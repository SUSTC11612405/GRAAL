class C{  public Animator build(){  final AnimatorSet animatorSet=getAnimatorSet();  final AnimatorSet result=animatorSet.clone();  setup(result);  return result;}  }
class C{  private void handleStaticStopTrees(StaticMetadata.StopTreeRequest request,TransportNetwork transportNetwork,TaskStatistics ts){  StaticMetadata staticMetadata=new StaticMetadata(request.request,transportNetwork);  if (request.request.bucket != null) {    try {      OutputStream os=StaticDataStore.getOutputStream(request.request,"query.json","application/octet-stream");      staticMetadata.writeStopTrees(os);      os.close();    } catch (    IOException e) {      LOG.error("Error creating static stop trees",e);    }    deleteRequest(request);  } else {    try {      PipedInputStream pis=new PipedInputStream();      PipedOutputStream pos=new PipedOutputStream(pis);      finishPriorityTask(request,pis);      staticMetadata.writeStopTrees(pos);      pos.close();    } catch (    IOException e) {      LOG.error("Error writing static stop trees to broker",e);    }  }}  }
class C{  public static boolean DownloadFromUrl(String targetUrl,File file){  try {    URL url=new URL(targetUrl);    Log.d(LOG_TAG,"Download begining");    Log.d(LOG_TAG,"Download url:" + url);    Log.d(LOG_TAG,"Downloaded file name:" + file.getAbsolutePath());    URLConnection ucon=url.openConnection();    InputStream is=ucon.getInputStream();    BufferedInputStream bis=new BufferedInputStream(is);    ByteArrayBuffer baf=new ByteArrayBuffer(50);    int current=0;    while ((current=bis.read()) != -1) {      baf.append((byte)current);    }    FileOutputStream fos=new FileOutputStream(file);    fos.write(baf.toByteArray());    fos.close();  } catch (  IOException e) {    Log.d(LOG_TAG,"Failed to download file with error: " + e);    return false;  }  return true;}  }
class C{  public void show(int top,int bottom,int left,int right){  Form f=Display.getInstance().getCurrent();  getUnselectedStyle().setMargin(TOP,top);  getUnselectedStyle().setMargin(BOTTOM,bottom);  getUnselectedStyle().setMargin(LEFT,left);  getUnselectedStyle().setMargin(RIGHT,right);  getUnselectedStyle().setMarginUnit(new byte[]{Style.UNIT_TYPE_PIXELS,Style.UNIT_TYPE_PIXELS,Style.UNIT_TYPE_PIXELS,Style.UNIT_TYPE_PIXELS});  getLayeredPane(f).addComponent(BorderLayout.center(this));  if (animateShow) {    int x=left + (f.getWidth() - right - left) / 2;    int y=top + (f.getHeight() - bottom - top) / 2;    setX(x);    setY(y);    setWidth(1);    setHeight(1);    getLayeredPane(f).animateLayout(400);  } else {    getLayeredPane(f).revalidate();  }}  }
class C{  public ColorStateList(int[][] states,int[] colors){  mStateSpecs=states;  mColors=colors;  if (states.length > 0) {    mDefaultColor=colors[0];    for (int i=0; i < states.length; i++) {      if (states[i].length == 0) {        mDefaultColor=colors[i];      }    }  }}  }
class C{  public CUtexref(){}  }
class C{  private static int checkTypeArguments(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkTypeArgument(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkTypeArgument(signature,pos);  }  return pos + 1;}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public int size(){  return this.list.size();}  }
class C{  public MType build(){  isClean=true;  return getMessage();}  }
class C{  protected void callSubtreeVisitors(XPathVisitor visitor){  if (null != m_predicates) {    int n=m_predicates.length;    for (int i=0; i < n; i++) {      ExpressionOwner predOwner=new PredOwner(i);      if (visitor.visitPredicate(predOwner,m_predicates[i])) {        m_predicates[i].callVisitors(predOwner,visitor);      }    }  }  if (null != m_relativePathPattern) {    m_relativePathPattern.callVisitors(this,visitor);  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof OPTICSHeapEntry)) {    return false;  }  final OPTICSHeapEntry that=(OPTICSHeapEntry)o;  return DBIDUtil.equal(objectID,that.objectID);}  }
class C{  public static void main(String[] args){  ResourceManager rm=new POSConfigurator().getDefaultConfig();  String testingFile=rm.getString("testData");  TestDiscrete.testDiscrete(new TestDiscrete(),new POSTagger(),new POSLabel(),new POSBracketToToken(testingFile),true,0);}  }
class C{  public static TransformMatrix2D translate(double x,double y){  return new TransformMatrix2D(1.0d,0.0d,0.0d,1.0d,x,y);}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  private final int yystate(){  return zzLexicalState;}  }
class C{  public static RDFParser createParser(RDFFormat format,ValueFactory valueFactory) throws UnsupportedRDFormatException {  RDFParser rdfParser=createParser(format);  rdfParser.setValueFactory(valueFactory);  return rdfParser;}  }
class C{  public static void swap(int[] arr,int index1,int index2){  if (index1 == index2) {  } else {    int tmp=arr[index1];    arr[index1]=arr[index2];    arr[index2]=tmp;  }}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public TlsKeyMaterialSpec(SecretKey clientMacKey,SecretKey serverMacKey,SecretKey clientCipherKey,IvParameterSpec clientIv,SecretKey serverCipherKey,IvParameterSpec serverIv){  this.clientMacKey=clientMacKey;  this.serverMacKey=serverMacKey;  this.clientCipherKey=clientCipherKey;  this.serverCipherKey=serverCipherKey;  this.clientIv=clientIv;  this.serverIv=serverIv;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public boolean isUsePointAsDefaultImage(){  return usePointAsDefaultImage;}  }
class C{  public void addItem(T item){  contents.add(item);  notifyItemInserted(contents.size() - 1);}  }
class C{  @Override public void initChannel(SocketChannel ch){  ChannelPipeline p=ch.pipeline();  ch.config().setAllocator(NettyChannelContext.ALLOCATOR);  ch.config().setSendBufferSize(NettyChannelContext.BUFFER_SIZE);  ch.config().setReceiveBufferSize(NettyChannelContext.BUFFER_SIZE);  if (this.pool.getSSLContext() != null) {    if (this.isHttp2Only) {      throw new IllegalArgumentException("HTTP/2 with SSL is not supported");    }    SSLEngine engine=this.pool.getSSLContext().createSSLEngine();    engine.setUseClientMode(true);    p.addLast(SSL_HANDLER,new SslHandler(engine));  }  HttpClientCodec http1_codec=new HttpClientCodec(NettyChannelContext.MAX_INITIAL_LINE_LENGTH,NettyChannelContext.MAX_HEADER_SIZE,NettyChannelContext.MAX_CHUNK_SIZE,false,false);  p.addLast(HTTP1_CODEC,http1_codec);  if (this.isHttp2Only) {    try {      NettyHttpToHttp2Handler connectionHandler=makeHttp2ConnectionHandler();      Http2ClientUpgradeCodec upgradeCodec=new Http2ClientUpgradeCodec(connectionHandler);      HttpClientUpgradeHandler upgradeHandler=new HttpClientUpgradeHandler(http1_codec,upgradeCodec,this.requestPayloadSizeLimit);      p.addLast(UPGRADE_HANDLER,upgradeHandler);      p.addLast(UPGRADE_REQUEST,new UpgradeRequestHandler());      ChannelPromise settingsPromise=ch.newPromise();      p.addLast("settings-handler",new Http2SettingsHandler(settingsPromise));      ch.attr(NettyChannelContext.SETTINGS_PROMISE_KEY).set(settingsPromise);      p.addLast(EVENT_LOGGER,new NettyHttp2UserEventLogger(this.debugLogging));    } catch (    Throwable ex) {      Utils.log(NettyHttpClientRequestInitializer.class,NettyHttpClientRequestInitializer.class.getSimpleName(),Level.WARNING,"Channel Initializer exception: %s",ex);      throw ex;    }  } else {    p.addLast(AGGREGATOR_HANDLER,new HttpObjectAggregator(this.requestPayloadSizeLimit));  }  p.addLast(XENON_HANDLER,new NettyHttpServerResponseHandler(this.pool));}  }
class C{  public final double[][] matrix(){  return m_perClassPerBag;}  }
class C{  public void substituteForAll(Vector exprs,Vector strs) throws TLAExprException {  substituteForAll(exprs,strs,true);}  }
class C{  public void handleInstanceExecutor(){  for (  InstanceExecutor executor : taskIdToInstanceExecutor.values()) {    boolean isLocalSpout=spoutSets.contains(executor.getComponentName());    int taskId=executor.getTaskId();    int items=executor.getStreamOutQueue().size();    for (int i=0; i < items; i++) {      HeronTuples.HeronTupleSet tupleSet=executor.getStreamOutQueue().poll();      if (tupleSet == null) {        break;      }      if (tupleSet.hasData()) {        HeronTuples.HeronDataTupleSet d=tupleSet.getData();        TopologyAPI.StreamId streamId=d.getStream();        StreamConsumers consumers=streamIdStreamConsumersMap.get(streamId);        if (consumers != null) {          for (          HeronTuples.HeronDataTuple tuple : d.getTuplesList()) {            List<Integer> outTasks=consumers.getListToSend(tuple);            outTasks.addAll(tuple.getDestTaskIdsList());            if (outTasks.isEmpty()) {              LOG.severe("Nobody to sent the tuple to");            }            copyDataOutBound(taskId,isLocalSpout,streamId,tuple,outTasks);          }        } else {          LOG.severe("Nobody consumes stream: " + streamId);        }      }      if (tupleSet.hasControl()) {        HeronTuples.HeronControlTupleSet c=tupleSet.getControl();        for (        HeronTuples.AckTuple ack : c.getAcksList()) {          copyControlOutBound(ack,true);        }        for (        HeronTuples.AckTuple fail : c.getFailsList()) {          copyControlOutBound(fail,false);        }      }    }  }}  }
class C{  public static void main(String args[]) throws IOException {  String star="M 48,54 L 31,42 15,54 21,35 6,23 25,23 25,23 25,23 25,23 32,4 40,23 58,23 42,35 z";  String arrow="M 12, 4 L 10.59,5.41 L 16.17,11 L 18.99,11 L 12,4 z M 4, 11 L 4, 13 L 18.99, 13 L 20, 12 L 18.99, 11 L 4, 11 z M 12,20 L 10.59, 18.59 L 16.17, 13 L 18.99, 13 L 12, 20z";  String triangle="M 91.095527,384.35546 L 254.23312,110.62095 L 405.71803,386.1926 z";  String polystar="M 177.11729,247.88609 L 256.31153,96.745452 L 217.85024,262.98609 L 388.33899,255.99999 L 225.13973,305.81185 L 316.43424,449.96639 L 191.69628,333.53762 L 112.50204,484.67825 L 150.96333,318.43762 L -19.525418,325.42372 L 143.67384,275.61186 L 52.379325,131.45732 z";  String fromSequence=null;  String toSequence=null;  VectAlign.Mode mode=VectAlign.Mode.BASE;  Options options=initCommandLineOptions();  try {    CommandLineParser parser=new DefaultParser();    CommandLine commandLine=parser.parse(options,args);    if (commandLine.getOptions() == null || commandLine.getOptions().length == 0 || commandLine.hasOption(OPTION_GUI)) {      VectAlignViewer.startVectAlignGUI();      return;    } else     if (commandLine.hasOption(OPTION_VERSION)) {      System.out.println(NAME + " v" + VERSION);      return;    } else     if (commandLine.hasOption(OPTION_HELP)) {      printHelp(options);      return;    }    if (commandLine.hasOption(OPTION_MODE)) {      mode=VectAlign.Mode.valueOf(commandLine.getOptionValue(OPTION_MODE).toUpperCase());    }    File tmpFile;    if (commandLine.hasOption(OPTION_FROM)) {      fromSequence=commandLine.getOptionValue(OPTION_FROM);      tmpFile=new File(fromSequence);      if (tmpFile.isFile() && tmpFile.exists()) {        if (SVGParser.isSVGImage(tmpFile))         fromSequence=SVGParser.getPathDataFromSVGFile(tmpFile); else         fromSequence=Utils.readSequenceFromFile(tmpFile);      }    }    if (commandLine.hasOption(OPTION_TO)) {      toSequence=commandLine.getOptionValue(OPTION_TO);      tmpFile=new File(toSequence);      if (tmpFile.isFile() && tmpFile.exists()) {        if (SVGParser.isSVGImage(tmpFile))         toSequence=SVGParser.getPathDataFromSVGFile(tmpFile); else         toSequence=Utils.readSequenceFromFile(tmpFile);      }    }    if (fromSequence == null || toSequence == null) {      if (fromSequence == null)       System.out.println("Missing START path sequence. Specify the starting path using -s (or --start)"); else       System.out.println("Missing END path sequence. Specify the ending path using -e (or --end)");      return;    }    String[] align=null;    try {      align=VectAlign.align(fromSequence,toSequence,mode);    } catch (    Exception e) {      System.out.println("###################### EXCEPTION #####################");      e.printStackTrace();      System.out.println("######################################################");      System.out.println("\nFor contributions or issues reporting, please visit " + Utils.ANSI_CYAN + "https://github.com/bonnyfone/vectalign \n "+ Utils.ANSI_RESET);    }    if (align == null) {      return;    }    System.out.println("\n--------------------");    System.out.println("  ALIGNMENT RESULT  ");    System.out.println("-------------------- ");    System.out.println("\n# new START path:  \n" + Utils.ANSI_GREEN + align[0]+ Utils.ANSI_RESET);    System.out.println("\n# new END path:  \n" + Utils.ANSI_YELLOW + align[1]+ Utils.ANSI_RESET);    System.out.println("\nThese sequences are morphable and can be used as 'pathData' attributes inside of VectorDrawable files.\n");  } catch (  ParseException e) {    System.out.println("Wrong parameters!\n");    printHelp(options);  }}  }
class C{  private static int[] subtract(int[] big,long val){  int highWord=(int)(val >>> 32);  int bigIndex=big.length;  int result[]=new int[bigIndex];  long difference=0;  if (highWord == 0) {    difference=(big[--bigIndex] & LONG_MASK) - val;    result[bigIndex]=(int)difference;  } else {    difference=(big[--bigIndex] & LONG_MASK) - (val & LONG_MASK);    result[bigIndex]=(int)difference;    difference=(big[--bigIndex] & LONG_MASK) - (highWord & LONG_MASK) + (difference >> 32);    result[bigIndex]=(int)difference;  }  boolean borrow=(difference >> 32 != 0);  while (bigIndex > 0 && borrow)   borrow=((result[--bigIndex]=big[bigIndex] - 1) == -1);  while (bigIndex > 0)   result[--bigIndex]=big[bigIndex];  return result;}  }
class C{  public Boolean isImageStabilization(){  return imageStabilization;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.529 -0400",hash_original_method="DAF76BB129F2DF1AEBFCF7AF03B53BD1",hash_generated_method="8EAA6A21405527077C09CC32684C9130") public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  errHandler.warning(new TransformerException(formattedMsg,(SAXSourceLocator)xctxt.getSAXLocator()));}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public void addDeviceKey(KeyPair deviceKey,Certificate deviceCert,String deviceName){  try {    this.keyStore.setKeyEntry(deviceName,deviceKey.getPrivate(),KeyConstants.OPEN_KEYSTORE_PASSWORD,new java.security.cert.Certificate[]{deviceCert});  } catch (  KeyStoreException e) {    logger.error("Could not add device key for device " + deviceName + " to identity's keystore",e);  }}  }
class C{  protected PersistentResource(@NonNull T obj,PersistentResource<?> parent,String id,RequestScope requestScope){  this.obj=obj;  this.uuid=Optional.ofNullable(id);  this.parent=Optional.ofNullable(parent);  this.lineage=this.parent.isPresent() ? new ResourceLineage(parent.lineage,parent) : new ResourceLineage();  this.dictionary=requestScope.getDictionary();  this.type=dictionary.getJsonAliasFor(obj.getClass());  this.user=requestScope.getUser();  this.entityCache=requestScope.getObjectEntityCache();  this.transaction=requestScope.getTransaction();  this.requestScope=requestScope;  dictionary.initializeEntity(obj);}  }
class C{  public static <T extends Key<T>>GroupMatcher<T> groupStartsWith(String compareTo){  return new GroupMatcher<T>(compareTo,StringOperatorName.STARTS_WITH);}  }
class C{  public AiffFileWriter(){  super(new AudioFileFormat.Type[]{AudioFileFormat.Type.AIFF});}  }
class C{  public void testKeyPairGenerator05() throws NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  try {    KeyPairGenerator.getInstance(null,validProviderName);    fail("NullPointerException or NoSuchAlgorithmException must be thrown  when algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],validProviderName);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(algs[i]).concat(" provider: ").concat(validProviderName).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public K lastKey(){  K k=map.lastKey();  while (true) {    if (k == null) {      return null;    }    if (get(k) != null) {      return k;    }    k=map.lowerKey(k);  }}  }
class C{  public void insert(String name,long cnt){  if (_values == null) {    _values=new ArrayList<>(30);  }  _values.add(0,new Count(this,name,cnt));}  }
class C{  public final void add(Action action,ActionManager actionManager){  add(action,Constraints.LAST,actionManager);}  }
class C{  public static double cosToSin(double angle,double cos){  if ((-1e-5 < cos && cos < 1e-5) || cos > 0.99999 || cos < -0.99999) {    return Math.sin(angle);  }  angle=normAngle(angle);  final double s=Math.sqrt(1 - cos * cos);  return (angle < Math.PI) ? s : -s;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:    return getAnnotations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isMathMode(){  return ignoreWhiteSpace;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYErrorRenderer)) {    return false;  }  XYErrorRenderer that=(XYErrorRenderer)obj;  if (this.drawXError != that.drawXError) {    return false;  }  if (this.drawYError != that.drawYError) {    return false;  }  if (this.capLength != that.capLength) {    return false;  }  if (!PaintUtilities.equal(this.errorPaint,that.errorPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.errorStroke,that.errorStroke)) {    return false;  }  return super.equals(obj);}  }
class C{  public static PermissionCondition create(Class<? extends Annotation> permission,PersistentResource resource,String field,ChangeSpec changes){  if (resource != null) {    if (changes != null) {      if (field != null && changes.getFieldName() == null) {        return new PermissionCondition(permission,resource,field);      }      return new PermissionCondition(permission,resource,changes);    } else     if (field == null) {      return new PermissionCondition(permission,resource);    } else {      return new PermissionCondition(permission,resource,field);    }  }  throw new IllegalArgumentException("Resource cannot be null");}  }
class C{  public FloatRange(float min,float max){  this.min=min;  this.max=max;}  }
class C{  private Collection<IQuest> findCompletedQuests(Player player){  List<IQuest> res=new ArrayList<IQuest>();  for (  IQuest quest : quests) {    if (quest.isCompleted(player) && quest.isVisibleOnQuestStatus()) {      res.add(quest);    }  }  return res;}  }
class C{  public void testXformLoadSucceeded_ReenablesXformFetch(){  mController.init();  mFakeGlobalEventBus.post(new FetchXformSucceededEvent());  verify(mMockUi).reEnableFetch();}  }
class C{  public static void addSingleCrystallization(Item input,ItemStack output,float xp){  addCrystallization(input,output,null,xp);}  }
class C{  private void checkOneNode(int id) throws Exception {  try (Ignite ignite=G.start(getConfiguration("grid" + id))){    String id8=U.id8(ignite.cluster().localNode().id());    String logPath="work/log/ignite-" + id8 + ".log";    File logFile=U.resolveIgnitePath(logPath);    assertNotNull("Failed to resolve path: " + logPath,logFile);    assertTrue("Log file does not exist: " + logFile,logFile.exists());    String logContent=U.readFileToString(logFile.getAbsolutePath(),"UTF-8");    assertTrue("Log file does not contain it's node ID: " + logFile,logContent.contains(">>> Local node [ID=" + id8.toUpperCase()));  } }  }
class C{  public void openDB(){  if (mSQLiteDatabase.isOpen() == false)   mSQLiteDatabase=SQLiteDatabase.openOrCreateDatabase(dbPath,null);}  }
class C{  public static Matrix random(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=Math.random();    }  }  return A;}  }
class C{  private int defaultThreadID(){  long tid=Thread.currentThread().getId();  if (tid < MIN_SEQUENTIAL_THREAD_ID) {    return (int)tid;  } else {    Integer id=threadIds.get();    if (id == null) {      id=nextThreadId.getAndIncrement();      threadIds.set(id);    }    return id;  }}  }
class C{  public FindBugsCommandLine(boolean modernGui){  this();  addOption("-f","font size","set font size");  addSwitch("-clear","clear saved GUI settings and exit");  addOption("-priority","thread priority","set analysis thread priority");  addOption("-loadbugs","saved analysis results","load bugs from saved analysis results");  makeOptionUnlisted("-loadbugs");  addOption("-loadBugs","saved analysis results","load bugs from saved analysis results");  addSwitch("-d","disable docking");  addSwitch("--nodock","disable docking");  addSwitchWithOptionalExtraPart("-look","plastic|gtk|native","set UI look and feel");}  }
class C{  private String makeFullStatus(){  if (online) {    String fullStatus=status;    if (status == null || status.isEmpty()) {      fullStatus="No stream title set";    }    if (game != null && !game.isEmpty()) {      fullStatus+=" (" + game + ")";    }    return fullStatus;  } else   if (!updateSucceeded) {    return "";  } else {    return "Stream offline";  }}  }
class C{  private String createViewName(QualifiedName name){  return String.format("%s_%s_%s",name.getDatabaseName(),name.getTableName(),name.getViewName());}  }
class C{  protected double numericDistribution(double[][] props,double[][][] dists,int att,double[][] subsetWeights,Instances data,double[] vals) throws Exception {  double splitPoint=Double.NaN;  Attribute attribute=data.attribute(att);  double[][] dist=null;  double[] sums=null;  double[] sumSquared=null;  double[] sumOfWeights=null;  double totalSum=0, totalSumSquared=0, totalSumOfWeights=0;  int indexOfFirstMissingValue=data.numInstances();  if (attribute.isNominal()) {    sums=new double[attribute.numValues()];    sumSquared=new double[attribute.numValues()];    sumOfWeights=new double[attribute.numValues()];    int attVal;    for (int i=0; i < data.numInstances(); i++) {      Instance inst=data.instance(i);      if (inst.isMissing(att)) {        if (indexOfFirstMissingValue == data.numInstances()) {          indexOfFirstMissingValue=i;        }        continue;      }      attVal=(int)inst.value(att);      sums[attVal]+=inst.classValue() * inst.weight();      sumSquared[attVal]+=inst.classValue() * inst.classValue() * inst.weight();      sumOfWeights[attVal]+=inst.weight();    }    totalSum=Utils.sum(sums);    totalSumSquared=Utils.sum(sumSquared);    totalSumOfWeights=Utils.sum(sumOfWeights);  } else {    sums=new double[2];    sumSquared=new double[2];    sumOfWeights=new double[2];    double[] currSums=new double[2];    double[] currSumSquared=new double[2];    double[] currSumOfWeights=new double[2];    data.sort(att);    for (int j=0; j < data.numInstances(); j++) {      Instance inst=data.instance(j);      if (inst.isMissing(att)) {        indexOfFirstMissingValue=j;        break;      }      currSums[1]+=inst.classValue() * inst.weight();      currSumSquared[1]+=inst.classValue() * inst.classValue() * inst.weight();      currSumOfWeights[1]+=inst.weight();    }    totalSum=currSums[1];    totalSumSquared=currSumSquared[1];    totalSumOfWeights=currSumOfWeights[1];    sums[1]=currSums[1];    sumSquared[1]=currSumSquared[1];    sumOfWeights[1]=currSumOfWeights[1];    double currSplit=data.instance(0).value(att);    double currVal, bestVal=Double.MAX_VALUE;    for (int i=0; i < indexOfFirstMissingValue; i++) {      Instance inst=data.instance(i);      if (inst.value(att) > currSplit) {        currVal=RandomTree.variance(currSums,currSumSquared,currSumOfWeights);        if (currVal < bestVal) {          bestVal=currVal;          splitPoint=(inst.value(att) + currSplit) / 2.0;          if (splitPoint <= currSplit) {            splitPoint=inst.value(att);          }          for (int j=0; j < 2; j++) {            sums[j]=currSums[j];            sumSquared[j]=currSumSquared[j];            sumOfWeights[j]=currSumOfWeights[j];          }        }      }      currSplit=inst.value(att);      double classVal=inst.classValue() * inst.weight();      double classValSquared=inst.classValue() * classVal;      currSums[0]+=classVal;      currSumSquared[0]+=classValSquared;      currSumOfWeights[0]+=inst.weight();      currSums[1]-=classVal;      currSumSquared[1]-=classValSquared;      currSumOfWeights[1]-=inst.weight();    }  }  props[0]=new double[sums.length];  for (int k=0; k < props[0].length; k++) {    props[0][k]=sumOfWeights[k];  }  if (!(Utils.sum(props[0]) > 0)) {    for (int k=0; k < props[0].length; k++) {      props[0][k]=1.0 / props[0].length;    }  } else {    Utils.normalize(props[0]);  }  for (int i=indexOfFirstMissingValue; i < data.numInstances(); i++) {    Instance inst=data.instance(i);    for (int j=0; j < sums.length; j++) {      sums[j]+=props[0][j] * inst.classValue() * inst.weight();      sumSquared[j]+=props[0][j] * inst.classValue() * inst.classValue()* inst.weight();      sumOfWeights[j]+=props[0][j] * inst.weight();    }    totalSum+=inst.classValue() * inst.weight();    totalSumSquared+=inst.classValue() * inst.classValue() * inst.weight();    totalSumOfWeights+=inst.weight();  }  dist=new double[sums.length][data.numClasses()];  for (int j=0; j < sums.length; j++) {    if (sumOfWeights[j] > 0) {      dist[j][0]=sums[j] / sumOfWeights[j];    } else {      dist[j][0]=totalSum / totalSumOfWeights;    }  }  double priorVar=singleVariance(totalSum,totalSumSquared,totalSumOfWeights);  double var=variance(sums,sumSquared,sumOfWeights);  double gain=priorVar - var;  subsetWeights[att]=sumOfWeights;  dists[0]=dist;  vals[att]=gain;  return splitPoint;}  }
class C{  public static void moveRowsUp(double[][] matrix,int upBy){  int rows=matrix.length;  int cols=matrix[0].length;  for (int r=0; r < rows - upBy; r++) {    for (int c=0; c < cols; c++) {      matrix[r][c]=matrix[r + upBy][c];    }  }  for (int r=rows - upBy; r < rows; r++) {    for (int c=0; c < cols; c++) {      matrix[r][c]=0;    }  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public static void writeGzip(String fileName,Iterable<String> list) throws IOException {  writeGZip(fileName,list,identityTransformer);}  }
class C{  public static DefaultRefactoringDescriptor[] readRefactoringDescriptors(final InputStream stream) throws CoreException {  final List list=new ArrayList(64);  readRefactoringDescriptors(stream,list,new NullProgressMonitor());  return (DefaultRefactoringDescriptor[])list.toArray(new DefaultRefactoringDescriptor[list.size()]);}  }
class C{  public static InteriorIntersectionFinder createAllIntersectionsFinder(LineIntersector li){  InteriorIntersectionFinder finder=new InteriorIntersectionFinder(li);  finder.setFindAllIntersections(true);  return finder;}  }
class C{  public static final SpellCheckedMetadata constructSpellCheckedMetadata(){  SpellCheckedMetadata scmd=new SpellCheckedMetadata();  scmd.add("Content-type","foo/bar");  scmd.add("Connection","close");  scmd.add("Last-Modified","Sat, 09 Dec 2006 15:09:57 GMT");  scmd.add("Server","Foobar");  scmd.add("Date","Sat, 09 Dec 2006 18:07:20 GMT");  scmd.add("Accept-Ranges","bytes");  scmd.add("ETag","\"1234567-89-01234567\"");  scmd.add("Content-Length","123");  scmd.add(Nutch.BATCH_NAME_KEY,"batchzzz");  scmd.add(Nutch.SIGNATURE_KEY,"123");  return scmd;}  }
class C{  public int processor(){  return Integer.parseInt(fields[38]);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final byte[] acceptSecContext(InputStream is,int mechTokenSize) throws GSSException {  byte[] retVal=null;  if (DEBUG) {    System.out.println("Entered Krb5Context.acceptSecContext with " + "state=" + printState(state));  }  if (isInitiator()) {    throw new GSSException(GSSException.FAILURE,-1,"acceptSecContext on an initiator " + "GSSContext");  }  try {    if (state == STATE_NEW) {      state=STATE_IN_PROCESS;      if (myCred == null) {        myCred=Krb5AcceptCredential.getInstance(caller,myName);      } else       if (!myCred.isAcceptorCredential()) {        throw new GSSException(GSSException.NO_CRED,-1,"No Secret Key available");      }      myName=(Krb5NameElement)myCred.getName();      if (myName != null) {        Krb5MechFactory.checkAcceptCredPermission(myName,myName);      }      InitSecContextToken token=new InitSecContextToken(this,(Krb5AcceptCredential)myCred,is);      PrincipalName clientName=token.getKrbApReq().getClient();      peerName=Krb5NameElement.getInstance(clientName);      if (myName == null) {        myName=Krb5NameElement.getInstance(token.getKrbApReq().getCreds().getServer());        Krb5MechFactory.checkAcceptCredPermission(myName,myName);      }      if (getMutualAuthState()) {        retVal=new AcceptSecContextToken(this,token.getKrbApReq()).encode();      }      serviceTicket=token.getKrbApReq().getCreds().getTicket();      myCred=null;      state=STATE_DONE;    } else {      if (DEBUG) {        System.out.println(state);      }    }  } catch (  KrbException e) {    GSSException gssException=new GSSException(GSSException.FAILURE,-1,e.getMessage());    gssException.initCause(e);    throw gssException;  }catch (  IOException e) {    if (DEBUG) {      e.printStackTrace();    }    GSSException gssException=new GSSException(GSSException.FAILURE,-1,e.getMessage());    gssException.initCause(e);    throw gssException;  }  return retVal;}  }
class C{  public static void reverse(final boolean[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  boolean tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  private Vector<Vector<Object>> queryProduct(){  String sql="SELECT p.Name,l.PriceActual,l.PriceList,l.QtyInvoiced," + "i.DateInvoiced,dt.PrintName || ' ' || i.DocumentNo As DocumentNo," + "o.Name, "+ "NULL, i.M_PriceList_ID "+ "FROM C_Invoice i"+ " INNER JOIN C_InvoiceLine l ON (i.C_Invoice_ID=l.C_Invoice_ID)"+ " INNER JOIN C_DocType dt ON (i.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN AD_Org o ON (i.AD_Org_ID=o.AD_Org_ID)"+ " INNER JOIN M_Product p  ON (l.M_Product_ID=p.M_Product_ID) "+ "WHERE i.C_BPartner_ID=? "+ "ORDER BY i.DateInvoiced DESC";  Vector<Vector<Object>> data=fillTable(sql,m_C_BPartner_ID);  sql="SELECT Name from C_BPartner WHERE C_BPartner_ID=?";  fillLabel(sql,m_C_BPartner_ID);  return data;}  }
class C{  public MRUSet(int maxSize){  Assert.isLegal(maxSize > 0);  fMaxSize=maxSize;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  theScreenResolution=getDisplaySize(display);  screenResolution=theScreenResolution;  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  public void registerDisruption(DisruptionEntry disruption){  for (  DisruptionEntry entry : disruptions)   if (disruption.getUnlocalizedName().equals(entry.getUnlocalizedName())) {    FMLLog.log("DisruptionHandler",Level.ERROR,"Disruption Entry already registered: %s",disruption.getUnlocalizedName());    return;  }  disruptions.add(disruption);}  }
class C{  private java.util.HashMap<Float,java.awt.Color> recalculate(final java.util.List<Float> FRACTION_LIST,final java.util.List<java.awt.Color> COLOR_LIST,final float OFFSET){  final int MAX_FRACTIONS=FRACTION_LIST.size();  final java.util.HashMap<Float,java.awt.Color> FRACTION_COLORS=new java.util.HashMap<Float,java.awt.Color>(MAX_FRACTIONS);  for (int i=0; i < MAX_FRACTIONS; i++) {    final float TMP_FRACTION=FRACTION_LIST.get(i) + OFFSET;    final java.awt.Color TMP_COLOR=COLOR_LIST.get(i);    if (TMP_FRACTION <= 0) {      FRACTION_COLORS.put(1.0f + TMP_FRACTION + 0.0001f,TMP_COLOR);      final float NEXT_FRACTION;      final java.awt.Color NEXT_COLOR;      if (i < MAX_FRACTIONS - 1) {        NEXT_FRACTION=FRACTION_LIST.get(i + 1) + OFFSET;        NEXT_COLOR=COLOR_LIST.get(i + 1);      } else {        NEXT_FRACTION=1 - FRACTION_LIST.get(0) + OFFSET;        NEXT_COLOR=COLOR_LIST.get(0);      }      if (NEXT_FRACTION > 0) {        final java.awt.Color NEW_FRACTION_COLOR=getColorFromFraction(TMP_COLOR,NEXT_COLOR,(int)((NEXT_FRACTION - TMP_FRACTION) * 10000),(int)((-TMP_FRACTION) * 10000));        FRACTION_COLORS.put(0.0f,NEW_FRACTION_COLOR);        FRACTION_COLORS.put(1.0f,NEW_FRACTION_COLOR);      }    } else     if (TMP_FRACTION >= 1) {      FRACTION_COLORS.put(TMP_FRACTION - 1.0f - 0.0001f,TMP_COLOR);      final float PREVIOUS_FRACTION;      final java.awt.Color PREVIOUS_COLOR;      if (i > 0) {        PREVIOUS_FRACTION=FRACTION_LIST.get(i - 1) + OFFSET;        PREVIOUS_COLOR=COLOR_LIST.get(i - 1);      } else {        PREVIOUS_FRACTION=FRACTION_LIST.get(MAX_FRACTIONS - 1) + OFFSET;        PREVIOUS_COLOR=COLOR_LIST.get(MAX_FRACTIONS - 1);      }      if (PREVIOUS_FRACTION < 1) {        final java.awt.Color NEW_FRACTION_COLOR=getColorFromFraction(TMP_COLOR,PREVIOUS_COLOR,(int)((TMP_FRACTION - PREVIOUS_FRACTION) * 10000),(int)(TMP_FRACTION - 1.0f) * 10000);        FRACTION_COLORS.put(1.0f,NEW_FRACTION_COLOR);        FRACTION_COLORS.put(0.0f,NEW_FRACTION_COLOR);      }    } else {      FRACTION_COLORS.put(TMP_FRACTION,TMP_COLOR);    }  }  FRACTION_LIST.clear();  COLOR_LIST.clear();  return FRACTION_COLORS;}  }
class C{  private static void rangeCheck(int arrayLen,int fromIndex,int toIndex){  if (fromIndex > toIndex)   throw new IllegalArgumentException("fromIndex(" + fromIndex + ") > toIndex("+ toIndex+ ")");  if (fromIndex < 0)   throw new ArrayIndexOutOfBoundsException(fromIndex);  if (toIndex > arrayLen)   throw new ArrayIndexOutOfBoundsException(toIndex);}  }
class C{  public CreatePixelMatrixDialog(final VisionWorld visionWorld){  super();  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;  setTitle("Create Pixel Matrix");  initComponents();  layoutComponents();}  }
class C{  public static void main(final String[] args){  Config config=ConfigUtils.createConfig();  config.addModule(PublicTransitMappingConfigGroup.createDefaultConfig());  Set<String> toRemove=config.getModules().keySet().stream().filter(null).collect(Collectors.toSet());  toRemove.forEach(null);  new ConfigWriter(config).write(args[0]);}  }
class C{  protected void addCameraButton(String key,String[][] imageSuffixes,boolean isLeftClickTemp,int[][] statePinValues){  final Integer state=prefs.getButtonState(key);  buttons.put(key,new CameraButton(key,imageSuffixes,isLeftClickTemp,statePinValues,this,(state == null ? 0 : state)));}  }
class C{  private static int hash(int x,int z){  int hash=HASH_SEED;  hash+=x;  hash*=HASH_SEED;  hash+=z;  hash*=HASH_SEED;  return hash;}  }
class C{  public static void drag(InstrumentationTestCase test,float fromX,float toX,float fromY,float toY,int stepCount){  Instrumentation inst=test.getInstrumentation();  long downTime=SystemClock.uptimeMillis();  long eventTime=SystemClock.uptimeMillis();  float y=fromY;  float x=fromX;  float yStep=(toY - fromY) / stepCount;  float xStep=(toX - fromX) / stepCount;  MotionEvent event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  for (int i=0; i < stepCount; ++i) {    y+=yStep;    x+=xStep;    eventTime=SystemClock.uptimeMillis();    event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_MOVE,x,y,0);    inst.sendPointerSync(event);    inst.waitForIdleSync();  }  eventTime=SystemClock.uptimeMillis();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();}  }
class C{  public void add(PaletteWidget w){  dragController.makeDraggable(w);  super.add(w);}  }
class C{  public static synchronized BufferedImage loadBufferedImage(URL url,int imageType){  BufferedImage image=null;  if (url == null || !url.toString().toLowerCase().endsWith(".jpg")) {    Image tmpImage=loadImage(url);    if (tmpImage != null) {      image=new BufferedImage(tmpImage.getWidth(null),tmpImage.getHeight(null),imageType);      Graphics2D g=image.createGraphics();      g.drawImage(tmpImage,0,0,null);      g.dispose();    }  } else {    BufferedImage tmpImage=loadBufferedJPEGImage(url);    if (tmpImage != null) {      if (tmpImage.getType() != imageType) {        log.config("Incompatible JPEG image type: creating new buffer image");        image=new BufferedImage(tmpImage.getWidth(null),tmpImage.getHeight(null),imageType);        Graphics2D g=image.createGraphics();        g.drawImage(tmpImage,0,0,null);        g.dispose();      } else       image=tmpImage;    }  }  return image;}  }
class C{  public void addSparseFeatureVector(IFeatureVector sfv,float alpha){  addSparseFeatureVector(sfv,(double)alpha);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public static boolean handleFiles(final File[] files){  String fileFolder=files[0].isFile() ? I18n.tr("file") : I18n.tr("folder");  DialogOption result=GUIMediator.showYesNoMessage(I18n.tr("Do you want to send this {0} to a friend?",fileFolder) + "\n\n\"" + files[0].getName()+ "\"",I18n.tr("Send files with FrostWire"),JOptionPane.QUESTION_MESSAGE);  if (result == DialogOption.YES) {    new SendFileProgressDialog(GUIMediator.getAppFrame(),files[0]).setVisible(true);    GUIMediator.instance().showTransfers(TransfersTab.FilterMode.ALL);    UXStats.instance().log(UXAction.SHARING_TORRENT_CREATED_WITH_SEND_TO_FRIEND_FROM_DND);    return true;  }  return false;}  }
class C{  public void put(E e){  offer(e);}  }
class C{  public OrderedRowIterator(final String table,final Pattern wherePattern,final boolean up) throws IOException {  this.whereColumn=null;  this.whereValue=null;  this.wherePattern=wherePattern == null || wherePattern.toString().isEmpty() ? null : wherePattern;  this.heap=getHeap(table);  this.i=heap.keys(up,false);}  }
class C{  private void fillHead(){  MPPProductPlanning pp=MPPProductPlanning.find(getCtx(),getAD_Org_ID(),getM_Warehouse_ID(),getS_Resource_ID(),getM_Product_ID(),null);  if (pp == null)   pp=new MPPProductPlanning(getCtx(),0,null);  fMaster.setSelected(pp.isMPS());  fMRPReq.setSelected(pp.isRequiredMRP());  fCreatePlan.setSelected(pp.isCreatePlan());  fOrderPeriod.setValue(pp.getOrder_Period());  fLeadtime.setValue(pp.getDeliveryTime_Promised());  fTimefence.setValue(pp.getTimeFence());  fMinOrd.setValue(pp.getOrder_Min());  fMaxOrd.setValue(pp.getOrder_Max());  fOrdMult.setValue(pp.getOrder_Pack());  fOrderQty.setValue(pp.getOrder_Qty());  fYield.setValue(pp.getYield());  fType.setText(MRefList.getListName(getCtx(),X_PP_Product_Planning.ORDER_POLICY_AD_Reference_ID,pp.getOrder_Policy()));  fSafetyStock.setValue(pp.getSafetyStock());}  }
class C{  public static void takeCamera(Activity activity,int requestCode){  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  activity.startActivityForResult(intent,requestCode);}  }
class C{  public void testRemoveNonComparableFromEmptyMap(){  tm=new TreeMap();  try {    tm.remove(new Object());  } catch (  ClassCastException expected) {  }}  }
class C{  public StrTokenizer(char[] input,char delim,char quote){  this(input,delim);  setQuoteChar(quote);}  }
class C{  protected CordovaWebView makeWebView(){  return new CordovaWebView(CordovaActivity.this);}  }
class C{  private static final int nextPieceSafe(Position pos,int sq,int delta){  int dx=0, dy=0;switch (delta) {case 1:    dx=1;  dy=0;break;case 9:dx=1;dy=1;break;case 8:dx=0;dy=1;break;case 7:dx=-1;dy=1;break;case -1:dx=-1;dy=0;break;case -9:dx=-1;dy=-1;break;case -8:dx=0;dy=-1;break;case -7:dx=1;dy=-1;break;}int x=Position.getX(sq);int y=Position.getY(sq);while (true) {x+=dx;y+=dy;if ((x < 0) || (x > 7) || (y < 0)|| (y > 7)) {return Piece.EMPTY;}int p=pos.getPiece(Position.getSquare(x,y));if (p != Piece.EMPTY) return p;}}  }
class C{  private boolean isDriverRegistered(Driver d){  boolean foundDriver=false;  java.util.Enumeration e=DriverManager.getDrivers();  while (e.hasMoreElements()) {    if (d == (Driver)e.nextElement()) {      foundDriver=true;      break;    }  }  return foundDriver;}  }
class C{  public void executeEpp(SessionMetadata sessionMetadata,TransportCredentials credentials,EppRequestSource eppRequestSource,boolean isDryRun,boolean isSuperuser,byte[] inputXmlBytes){  try {    response.setPayload(new String(marshalWithLenientRetry(eppController.handleEppCommand(sessionMetadata,credentials,eppRequestSource,isDryRun,isSuperuser,inputXmlBytes)),UTF_8));    response.setContentType(APPLICATION_EPP_XML);    response.setStatus(SC_OK);  } catch (  Exception e) {    logger.warning(e,"handleEppCommand general exception");    response.setStatus(SC_BAD_REQUEST);  }}  }
class C{  public void addPriorityPackage(String priorityPackage){  _classLoader.addPriorityPackage(priorityPackage);}  }
class C{  public static SipResponse create200OkOptionsResponse(SipRequest options,ContactHeader contact,String[] featureTags,String sdp) throws PayloadException {  try {    Response response=SipUtils.MSG_FACTORY.createResponse(200,options.getStackMessage());    ToHeader to=(ToHeader)response.getHeader(ToHeader.NAME);    to.setTag(IdGenerator.getIdentifier());    response.addHeader(contact);    SipUtils.setFeatureTags(response,featureTags);    SipUtils.buildAllowHeader(response);    response.addHeader(SipUtils.buildServerHeader());    if (sdp != null) {      response.setContent(sdp,SipUtils.HEADER_FACTORY.createContentTypeHeader("application","sdp"));      response.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(sdp.getBytes(UTF8).length));    }    SipResponse resp=new SipResponse(response);    resp.setStackTransaction(options.getStackTransaction());    return resp;  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP response for SDP : " + sdp,e);  }}  }
class C{  public void start(XmlPullParser parser) throws XmlPullParserException, IOException {  JDiffClassDescription currentClass=null;  String currentPackage="";  JDiffMethod currentMethod=null;  SignatureTest.beginDocument(parser,TAG_ROOT);  int type;  while (true) {    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT && type != XmlPullParser.END_TAG) {    }    if (type == XmlPullParser.END_TAG) {      if (TAG_CLASS.equals(parser.getName()) || TAG_INTERFACE.equals(parser.getName())) {        currentClass.checkSignatureCompliance();      } else       if (TAG_PACKAGE.equals(parser.getName())) {        currentPackage="";      }      continue;    }    if (type == XmlPullParser.END_DOCUMENT) {      break;    }    String tagname=parser.getName();    if (!mKeyTagSet.contains(tagname)) {      continue;    }switch (tagname) {case TAG_PACKAGE:      currentPackage=parser.getAttributeValue(null,ATTRIBUTE_NAME);    break;case TAG_CLASS:  currentClass=loadClassInfo(parser,false,currentPackage);break;case TAG_INTERFACE:currentClass=loadClassInfo(parser,true,currentPackage);break;case TAG_IMPLEMENTS:currentClass.addImplInterface(parser.getAttributeValue(null,ATTRIBUTE_NAME));break;case TAG_CONSTRUCTOR:JDiffConstructor constructor=loadConstructorInfo(parser,currentClass);currentClass.addConstructor(constructor);currentMethod=constructor;break;case TAG_METHOD:currentMethod=loadMethodInfo(currentClass.getClassName(),parser);currentClass.addMethod(currentMethod);break;case TAG_PARAM:currentMethod.addParam(parser.getAttributeValue(null,ATTRIBUTE_TYPE));break;case TAG_EXCEPTION:currentMethod.addException(parser.getAttributeValue(null,ATTRIBUTE_TYPE));break;case TAG_FIELD:JDiffField field=loadFieldInfo(currentClass.getClassName(),parser);currentClass.addField(field);break;default :throw new RuntimeException("unknow tag exception:" + tagname);}}}  }
class C{  protected void addIndexInfo(IndexInfo index){  indexes.put(index.id,index);}  }
class C{  public int addIndxCV(String cvName,String piCv,int piVal,String siCv,int siVal,String iCv,boolean readOnly,boolean infoOnly,boolean writeOnly){  int existingRow=getCvByName(cvName);  int row;  if (existingRow == -1) {    row=_numRows++;    CvValue indxCv=new CvValue(cvName,cvName,piCv,piVal,siCv,siVal,iCv,mProgrammer);    _indxCvAllMap.put(cvName,indxCv);    if (log.isDebugEnabled()) {      log.debug("created new indexed CV with name " + cvName);    }    indxCv.setReadOnly(readOnly);    indxCv.setInfoOnly(infoOnly);    _indxCvAllVector.setElementAt(indxCv,row);    _indxCvDisplayVector.addElement(indxCv);    indxCv.addPropertyChangeListener(this);    JButton bw=new JButton("Write");    _indxWriteButtons.addElement(bw);    JButton br=new JButton("Read");    _indxReadButtons.addElement(br);    JButton bc=new JButton("Compare");    _indxCompareButtons.addElement(bc);    if (infoOnly || readOnly) {      if (writeOnly) {        bw.setEnabled(true);        bw.setActionCommand("W" + row);        bw.addActionListener(this);      } else {        bw.setEnabled(false);      }      if (infoOnly) {        br.setEnabled(false);        bc.setEnabled(false);      } else {        br.setEnabled(true);        br.setActionCommand("R" + row);        br.addActionListener(this);        bc.setEnabled(true);        bc.setActionCommand("C" + row);        bc.addActionListener(this);      }    } else {      bw.setEnabled(true);      bw.setActionCommand("W" + row);      bw.addActionListener(this);      if (writeOnly) {        br.setEnabled(false);        bc.setEnabled(false);      } else {        br.setEnabled(true);        br.setActionCommand("R" + row);        br.addActionListener(this);        bc.setEnabled(true);        bc.setActionCommand("C" + row);        bc.addActionListener(this);      }    }    if (log.isDebugEnabled()) {      log.debug("addIndxCV adds row at " + row);    }    fireTableDataChanged();  } else {    if (log.isDebugEnabled()) {      log.debug("addIndxCV finds existing row of " + existingRow + " with numRows "+ _numRows);    }    row=existingRow;  }  if (row > -1 && row < _indxCvAllVector.size()) {    CvValue indxcv=_indxCvAllVector.elementAt(row);    if (readOnly) {      indxcv.setReadOnly(readOnly);    }    if (infoOnly) {      indxcv.setReadOnly(infoOnly);      indxcv.setInfoOnly(infoOnly);    }    if (writeOnly) {      indxcv.setWriteOnly(writeOnly);    }  }  return row;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] emptyArray(Class<T> kind){  if (kind == Object.class) {    return (T[])EMPTY;  }  int bucket=((System.identityHashCode(kind) / 8) & 0x7FFFFFFF) % CACHE_SIZE;  Object cache=sCache[bucket];  if (cache == null || cache.getClass().getComponentType() != kind) {    cache=Array.newInstance(kind,0);    sCache[bucket]=cache;  }  return (T[])cache;}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public boolean isSetAuthChallengeResponse(){  return this.authChallengeResponse != null;}  }
class C{  public final Coords translated(int dir){  return translated(dir,1);}  }
class C{  protected int hash(Object key){  int h=key.hashCode();  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  public void deleteTransit(Transit z){  deregister(z);  z.dispose();}  }
class C{  public UserConnection user(){  return this.userConnection;}  }
class C{  public void removeDeliveredMessage(String id){  if (this.hasMessage(id)) {    for (    Connection c : this.sendingConnections) {      if (c.getMessage().getId().equals(id)) {        c.abortTransfer();      }    }    this.deleteMessage(id,false);  }}  }
class C{  public void sortRenderQueue(){  sort(ritems,rscores,rsize);}  }
class C{  private int countCharsStart(char ch){  int count=0;  for (int i=0; i < this.value.length(); i++) {    final char c=this.value.charAt(i);    if (c == ' ') {      continue;    }    if (c == ch) {      count++;    } else {      break;    }  }  return count;}  }
class C{  private static void hybrid6_cx(float in[][],float out[][][],int outOffset,final float filter[][][],int len){  final int N=8;  float temp[][]=new float[8][2];  int inOffset=0;  for (int i=0; i < len; i++, inOffset++) {    PSDSP.hybrid_analysis(temp,0,in,inOffset,filter,0,1,N);    out[outOffset + 0][i][0]=temp[6][0];    out[outOffset + 0][i][1]=temp[6][1];    out[outOffset + 1][i][0]=temp[7][0];    out[outOffset + 1][i][1]=temp[7][1];    out[outOffset + 2][i][0]=temp[0][0];    out[outOffset + 2][i][1]=temp[0][1];    out[outOffset + 3][i][0]=temp[1][0];    out[outOffset + 3][i][1]=temp[1][1];    out[outOffset + 4][i][0]=temp[2][0] + temp[5][0];    out[outOffset + 4][i][1]=temp[2][1] + temp[5][1];    out[outOffset + 5][i][0]=temp[3][0] + temp[4][0];    out[outOffset + 5][i][1]=temp[3][1] + temp[4][1];  }}  }
class C{  public ServerBuilder defaultRequestTimeoutMillis(long defaultRequestTimeoutMillis){  validateDefaultRequestTimeoutMillis(defaultRequestTimeoutMillis);  this.defaultRequestTimeoutMillis=defaultRequestTimeoutMillis;  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.WILDCARD__DECLARED_UPPER_BOUND:    return basicSetDeclaredUpperBound(null,msgs);case TypeRefsPackage.WILDCARD__DECLARED_LOWER_BOUND:  return basicSetDeclaredLowerBound(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean skipChar(int c) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int cc=fCurrentEntity.ch[fCurrentEntity.position];  if (cc == c) {    fCurrentEntity.position++;    if (c == '\n') {      fCurrentEntity.lineNumber++;      fCurrentEntity.columnNumber=1;    } else {      fCurrentEntity.columnNumber++;    }    return true;  } else   if (c == '\n' && cc == '\r' && fCurrentEntity.isExternal()) {    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)cc;      load(1,false);    }    fCurrentEntity.position++;    if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {      fCurrentEntity.position++;    }    fCurrentEntity.lineNumber++;    fCurrentEntity.columnNumber=1;    return true;  }  return false;}  }
class C{  @Override public final double classProb(int classIndex,Instance instance,int theSubset) throws Exception {  if (theSubset <= -1) {    double[] weights=weights(instance);    if (weights == null) {      return m_distribution.prob(classIndex);    } else {      double prob=0;      for (int i=0; i < weights.length; i++) {        prob+=weights[i] * m_distribution.prob(classIndex,i);      }      return prob;    }  } else {    if (Utils.gr(m_distribution.perBag(theSubset),0)) {      return m_distribution.prob(classIndex,theSubset);    } else {      return m_distribution.prob(classIndex);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  boolean specified;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(0);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  specified=domesticAttr.getSpecified();  assertTrue("domesticSpecified",specified);}  }
class C{  public LinkedHashMapPro(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  accessOrder=false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testCase19(){  byte aBytes[]={0};  byte bBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int aSign=0;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  protected void handleChildElementRemoved(Element e){  CompositeGraphicsNode gn=(CompositeGraphicsNode)node;  if (selectedChild == e) {    gn.remove(0);    disposeTree(selectedChild);    selectedChild=null;    GraphicsNode refNode=null;    GVTBuilder builder=ctx.getGVTBuilder();    for (Node n=e.getNextSibling(); n != null; n=n.getNextSibling()) {      if (n.getNodeType() == Node.ELEMENT_NODE) {        Element ref=(Element)n;        if (n instanceof SVGTests && SVGUtilities.matchUserAgent(ref,ctx.getUserAgent())) {          refNode=builder.build(ctx,ref);          selectedChild=ref;          break;        }      }    }    if (refNode != null) {      gn.add(refNode);    }  }}  }
class C{  private PKCS1VectorGenerator(){}  }
class C{  public ResultMatrixSignificance(int cols,int rows){  super(cols,rows);}  }
class C{  public void createExternalForeignKeys(Database database,Table table,StringBuilder ddl){  if (!databaseInfo.isForeignKeysEmbedded()) {    for (int idx=0; idx < table.getForeignKeyCount(); idx++) {      writeExternalForeignKeyCreateStmt(database,table,table.getForeignKey(idx),ddl);    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ANNOTATABLE_ELEMENT;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof OHLCDataItem)) {    return false;  }  OHLCDataItem that=(OHLCDataItem)obj;  if (!this.date.equals(that.date)) {    return false;  }  if (!this.high.equals(that.high)) {    return false;  }  if (!this.low.equals(that.low)) {    return false;  }  if (!this.open.equals(that.open)) {    return false;  }  if (!this.close.equals(that.close)) {    return false;  }  return true;}  }
class C{  public final Bag elements(){  Bag bag=new Bag();  Object[][][] field=this.field;  Object[][] fieldx=null;  Object[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        if (fieldxy[z] != null)         bag.add(fieldxy[z]);      }    }  }  return bag;}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  public float slotChurn(){  final BigDecimal slotsAllocated=new BigDecimal(m_slotAllocations);  final BigDecimal slotsReserved=new BigDecimal(m_totalSlots);  if (slotsReserved.signum() == 0)   return 0f;  return slotsAllocated.divide(slotsReserved,2,RoundingMode.HALF_UP).floatValue();}  }
class C{  public boolean heartbeat() throws Exception {  return heartBeater.ping();}  }
class C{  public Set<UUID> nodeIds(){  return ids;}  }
class C{  public void ensureUpToDate(){  final String METHOD_NAME="insureUpToDate()";  getOwner().methodBegin(getClass(),METHOD_NAME);  try {    pause();    for (    Entity entity : getGame().getEntitiesVector()) {      if (getDone().get()) {        return;      }      if (!isEntityOnMap(entity)) {        continue;      }      if (((!getPathEnumerator().getLastKnownLocations().containsKey(entity.getId())) || (!getPathEnumerator().getLastKnownLocations().get(entity.getId()).equals(CoordFacingCombo.createCoordFacingCombo(entity))))) {        dirtifyUnit(entity.getId());      }    }    while (!getDirtyUnits().isEmpty()) {      if (getDone().get()) {        return;      }      Integer entityId=getDirtyUnits().pollFirst();      Entity entity=getGame().getEntity(entityId);      if (entity != null) {        getOwner().log(getClass(),METHOD_NAME,"recalculating paths for " + entity.getDisplayName());        getPathEnumerator().recalculateMovesFor(entity);        getOwner().log(getClass(),METHOD_NAME,"finished recalculating paths for " + entity.getDisplayName());      }    }  }  finally {    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public boolean isLongField(){  return (m_vo.DisplayLength >= MAXDISPLAY_LENGTH / 2);}  }
class C{  public List<SourceRecord> recordsForTopic(String topicName){  return recordsByTopic.get(topicName);}  }
class C{  public void shouldCompleteWhenMaxDurationExceeded() throws Throwable {  when(service.connect()).thenReturn(false);  RetryPolicy retryPolicy=new RetryPolicy().retryWhen(false).withMaxDuration(100,TimeUnit.MILLISECONDS);  assertEquals(Failsafe.with(retryPolicy).onFailure(null).get(null),Boolean.FALSE);  verify(service).connect();}  }
class C{  private static List<Command> loadRewrites(String str){  assert str != null;  List<Command> commands=new ArrayList<>();  for (  String line : str.split("\n")) {    addLine(commands,line);  }  return commands;}  }
class C{  public static Object invoke(Object o,String methodName,Class<?>[] paramClasses,Object[] paramValues){  Method m;  Object result;  result=null;  try {    m=o.getClass().getMethod(methodName,paramClasses);    result=m.invoke(o,paramValues);  } catch (  Exception e) {    e.printStackTrace();    result=null;  }  return result;}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println(String.format("Usage: %s <project-name>",ListResources.class.getSimpleName()));    return;  }  String project=args[0];  String projectResource="projects/" + project;  Monitoring monitoringService=authenticate();  ListResources example=new ListResources(monitoringService,projectResource);  example.listMonitoredResourceDescriptors();  example.listMetricDescriptors();  example.listTimeseries();}  }
class C{  public int loadInt(Offset offset){  return this.plus(offset).loadInt();}  }
class C{  public boolean isModified(){  return _isDigestModified;}  }
class C{  public ExpressionParserBuilder withModule(ExpressionParserModule module){  addModule(module);  return this;}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  final public void yybegin(int newState){  yy_lexical_state=newState;}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public static void copyFromResource(@NotNull VirtualFile file,@NonNls @NotNull String resourceUrl) throws IOException {  InputStream out=VfsUtil.class.getResourceAsStream(resourceUrl);  if (out == null) {    throw new FileNotFoundException(resourceUrl);  }  try {    byte[] bytes=FileUtil.adaptiveLoadBytes(out);    file.setBinaryContent(bytes);  }  finally {    out.close();  }}  }
class C{  public synchronized void write(int b){  if (closed) {    return;  }  super.write(b);}  }
class C{  public void handleServerCommand(String type,String[] params,Server server,Conversation conversation,IRCService service){  if (params.length > 1) {    service.getConnection(server.getId()).sendRawLineViaQueue(type.toUpperCase() + " " + BaseHandler.mergeParams(params));  } else {    service.getConnection(server.getId()).sendRawLineViaQueue(type.toUpperCase());  }}  }
class C{  protected void engineReset(){  messageLength=0;  buffer[BYTES_OFFSET]=0;  buffer[HASH_OFFSET]=H0;  buffer[HASH_OFFSET + 1]=H1;  buffer[HASH_OFFSET + 2]=H2;  buffer[HASH_OFFSET + 3]=H3;  buffer[HASH_OFFSET + 4]=H4;}  }
class C{  private static boolean checkAttributeCharacters(String chars) throws CharConversionException {  boolean escape=false;  for (int i=0; i < chars.length(); i++) {    char ch=chars.charAt(i);    if (ch <= 93) {switch (ch) {case 0x9:case 0xA:case 0xD:        continue;case '\'':case '"':case '<':case '&':      escape=true;    continue;default :  if (ch < 0x20) {    throw new CharConversionException("Invalid XML character &#" + ((int)ch) + ";.");  }}}}return escape == false;}  }
class C{  public int size(){  return al.size();}  }
class C{  @TargetApi(21) public void onChannelGuideSelected(int channelId,String channelTitle){  selectedChannelId=channelId;  selectedChannelTitle=channelTitle;  PVRChannelEPGListFragment pvrEPGFragment=PVRChannelEPGListFragment.newInstance(channelId);  FragmentTransaction fragTrans=getSupportFragmentManager().beginTransaction();  if (Utils.isLollipopOrLater()) {    pvrEPGFragment.setEnterTransition(TransitionInflater.from(this).inflateTransition(R.transition.media_details));    pvrEPGFragment.setReturnTransition(null);  } else {    fragTrans.setCustomAnimations(R.anim.fragment_details_enter,0,R.anim.fragment_list_popenter,0);  }  fragTrans.replace(R.id.fragment_container,pvrEPGFragment).addToBackStack(null).commit();  setupActionBar(selectedChannelGroupTitle,selectedChannelTitle);}  }
class C{  private static Map<String,List<String>> uninstallLibraries() throws Exception {  Map<String,List<String>> uninstalledLibs=new HashMap<String,List<String>>();  File uninstallLibDir=getLibraryUninstallDir();  String[] uninstallLibNames;  if (uninstallLibDir.exists()) {    uninstallLibNames=uninstallLibDir.list();    for (    String uninstallLibName : uninstallLibNames) {      String[] components=uninstallLibName.split("\\.");      String dataverse=components[0];      String libName=components[1];      uninstallLibrary(dataverse,libName);      new File(uninstallLibDir,uninstallLibName).delete();      List<String> uinstalledLibsInDv=uninstalledLibs.get(dataverse);      if (uinstalledLibsInDv == null) {        uinstalledLibsInDv=new ArrayList<String>();        uninstalledLibs.put(dataverse,uinstalledLibsInDv);      }      uinstalledLibsInDv.add(libName);    }  }  return uninstalledLibs;}  }
class C{  public boolean isEmpty(){  return filter.isEmpty() && query.isEmpty() && sort.isEmpty();}  }
class C{  public KeyValPair<K,V> cloneKeyValPair(KeyValPair<K,V> kv){  return kv;}  }
class C{  private void action_treeAdd(ListItem item){  log.info("Item=" + item);  if (item != null) {    centerTree.nodeChanged(true,item.id,item.name,item.description,item.isSummary,item.imageIndicator);    addNode(item);  }}  }
class C{  public void installDefaults(AbstractButton b){  super.installDefaults(b);  b.setOpaque(false);}  }
class C{  public String generateChangeAutoTieringPolicy(Workflow workflow,String wfGroupId,String waitFor,URI storageURI,List<URI> volumeURIs,URI newVpoolURI,URI oldVpoolURI) throws ControllerException {  DiscoveredSystemObject storageSystem=getStorageSystem(_dbClient,storageURI);  Workflow.Method method=ExportWorkflowEntryPoints.changeAutoTieringPolicyMethod(storageURI,volumeURIs,newVpoolURI,false);  Workflow.Method rollback=ExportWorkflowEntryPoints.changeAutoTieringPolicyMethod(storageURI,volumeURIs,oldVpoolURI,true);  return newWorkflowStep(workflow,wfGroupId,String.format("Updating Auto-tiering Policy on storage array %s (%s, args) for volumes %s",storageSystem.getNativeGuid(),storageURI,Joiner.on("\t").join(volumeURIs)),storageSystem,method,rollback,waitFor);}  }
class C{  protected static DBFField createField(DataInput in) throws IOException {  DBFField field=new DBFField();  byte t_byte=in.readByte();  if (t_byte == (byte)0x0d) {    return null;  }  in.readFully(field.fieldName,1,10);  field.fieldName[0]=t_byte;  for (int i=0; i < field.fieldName.length; i++) {    if (field.fieldName[i] == (byte)0) {      field.nameNullIndex=i;      break;    }  }  field.dataType=DBFField.DBFDataType.getTypeBySymbol(in.readByte());  field.reserv1=Utils.readLittleEndianInt(in);  field.fieldLength=in.readUnsignedByte();  field.decimalCount=in.readByte();  field.reserv2=Utils.readLittleEndianShort(in);  field.workAreaId=in.readByte();  field.reserv2=Utils.readLittleEndianShort(in);  field.setFieldsFlag=in.readByte();  in.readFully(field.reserv4);  field.indexFieldFlag=in.readByte();  return field;}  }
class C{  public static boolean looksLikeAURI(String val){  return val.startsWith("url(") && val.endsWith(")");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static AS_PathEntity translateAStarPathtoPathEntity(ArrayList<AStarNode> input){  AS_PathPoint[] points=new AS_PathPoint[input.size()];  AStarNode reading;  int i=0;  int size=input.size();  while (size > 0) {    reading=input.get(size - 1);    points[i]=new AS_PathPoint(reading.x,reading.y,reading.z);    points[i].setIndex(i);    points[i].setTotalPathDistance(i);    points[i].setDistanceToNext(1F);    points[i].setDistanceToTarget(size);    if (i > 0) {      points[i].setPrevious(points[i - 1]);    }    input.remove(size - 1);    size--;    i++;  }  return new AS_PathEntity(points);}  }
class C{  @Override public void executeScriptFiles(List<String> scriptFilePaths){  for (  String scriptFilePath : scriptFilePaths) {    File scriptFile=new File(scriptFilePath);    if (scriptFile.isAbsolute() && !scriptFile.exists()) {      getLogger().warn(String.format("Script file %s doesn't exists.",scriptFilePath),this.getClass().getName());    } else {      JvmLauncher java=createJvmLauncher(false);      addCliArguments(java);      setProperties(java);      java.addAppArguments("--file=" + scriptFile);      int result=java.execute();      if (result != 0) {        throw new ContainerException("Failure when invoking CLI script," + " java returned " + result);      }    }  }}  }
class C{  private static String[] nameParameters(Type[] types){  String[] names=new String[types.length];  for (int i=0; i < names.length; i++) {    names[i]="$param_" + generateNameFromType(types[i]) + "_"+ (i + 1);  }  return names;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  if (col == 1)   return true; else   return false;}  }
class C{  public static String text(CharSequence text){  return encode(text,TEXT,LEN);}  }
class C{  public java_cup.runtime.Symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$LexParse$do_action(act_num,parser,stack,top);}  }
class C{  public JBoss5xRuntimeConfiguration(){  setProperty(GeneralPropertySet.HOSTNAME,"localhost");  setProperty(GeneralPropertySet.RMI_PORT,"1099");  setProperty(JBossPropertySet.CONFIGURATION,"default");  setProperty(JBossPropertySet.PROFILE,"default");  setProperty(JBossPropertySet.CLUSTERED,"false");}  }
class C{  public static XMPMeta createXMPMeta(){  return XMPMetaFactory.create();}  }
class C{  public void testGenerateCertificates() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Certificate cert=certFs[0].generateCertificate(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));  for (int i=0; i < certFs.length; i++) {    Collection<? extends Certificate> col=null;    col=certFs[i].generateCertificates(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));    Iterator<? extends Certificate> it=col.iterator();    assertEquals("Incorrect Collection size",col.size(),1);    assertEquals("Incorrect Certificate in Collection",cert,it.next());  }}  }
class C{  public static void mergeResources(RamlResource existing,RamlResource resource,boolean addActions){  Map<String,RamlResource> existingChildResources=existing.getResources();  Map<String,RamlResource> newChildResources=resource.getResources();  for (  String newChildKey : newChildResources.keySet()) {    if (!existingChildResources.containsKey(newChildKey)) {      existing.addResource(newChildKey,newChildResources.get(newChildKey));    } else {      mergeResources(existingChildResources.get(newChildKey),newChildResources.get(newChildKey),addActions);    }  }  if (addActions) {    existing.addActions(resource.getActions());  }}  }
class C{  public void initializeMainMenu(){  MainMenu.initialize(viewport);}  }
class C{  private int keyColumnStart(){  int offset=0;  for (int i=0; i < _columns.length; i++) {    if (offset == _keyStart) {      return i;    }    offset+=_columns[i].length();  }  throw new IllegalStateException();}  }
class C{  public static <T>String join(Iterable<T> items){  return SPACE_JOINER.join(items);}  }
class C{  protected final void fireVetoableChange(String propertyName,Object oldValue,Object newValue) throws PropertyVetoException {  VetoableChangeSupport aVetoSupport=this.vetoSupport;  if (aVetoSupport == null) {    return;  }  aVetoSupport.fireVetoableChange(propertyName,oldValue,newValue);}  }
class C{  void registerTarget(VMID vmid,Target target){synchronized (leaseTable) {    LeaseInfo info=leaseTable.get(vmid);    if (info == null) {      target.vmidDead(vmid);    } else {      info.notifySet.add(target);    }  }}  }
class C{  public GeneralAttribute customSet(String set){  this.targetAttribute.set=set;  return this;}  }
class C{  public void writeMainKml(final KmlType kml){  writeKml("main.kml",kml);}  }
class C{  public Variable[] findArraysInCurrentScope(){  List<Variable> arrays=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fLocalVariables.listIterator(fLocalVariables.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isArray())     arrays.add(localVariable);  }  for (ListIterator<Variable> iterator=fFields.listIterator(fFields.size()); iterator.hasPrevious(); ) {    Variable field=iterator.previous();    if (field.isArray())     arrays.add(field);  }  return arrays.toArray(new Variable[arrays.size()]);}  }
class C{  public TernaryTreeNode(){}  }
class C{  public MTask(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public static <T>boolean contains(T[] array,T value){  return indexOf(array,value) != -1;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return COUNT;default :return null;}}  }
class C{  public double pdf(int k){  if (k < 0 || k >= cdf.length - 1)   return 0.0;  return cdf[k - 1] - cdf[k];}  }
class C{  public int fwordCount(){  return this.dataLength() / FontData.DataSize.FWORD.size();}  }
class C{  @ZeppelinApi public void runAll(InterpreterContext context){  for (  InterpreterContextRunner r : context.getRunners()) {    if (r.getParagraphId().equals(context.getParagraphId())) {      continue;    }    r.run();  }}  }
class C{  private URL createSearchURL(URL url) throws MalformedURLException {  if (url == null) {    return url;  }  String protocol=url.getProtocol();  if (isDirectory(url) || protocol.equals("jar")) {    return url;  }  if (factory == null) {    return new URL("jar","",-1,url.toString() + "!/");  }  return new URL("jar","",-1,url.toString() + "!/",factory.createURLStreamHandler("jar"));}  }
class C{  public void addImportedFiles(File xmlFile){  if (xmlFile.exists()) {    importedFiles.add(xmlFile);  } else {    importedFiles.add(new File("resources/" + xmlFile));  }}  }
class C{  @SuppressWarnings("deprecation") public static JSONNode read(Reader reader) throws Exception {  SymbolFactory sf;  Parser parser;  sf=new DefaultSymbolFactory();  parser=new Parser(new Scanner(reader,sf),sf);  parser.parse();  return parser.getResult();}  }
class C{  public static Test suite(){  return new TestSuite(C45Test.class);}  }
class C{  public boolean isRangeCrosshairLockedOnData(){  return this.rangeCrosshairLockedOnData;}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public QueryBuilder tags(Optional<Map<String,String>> tags){  checkNotNull(tags,"tags must not be null");  this.tags=pickOptional(this.tags,tags);  return this;}  }
class C{  public CtClass makeClass(ClassFile classfile,boolean ifNotFrozen) throws RuntimeException {  compress();  CtClass clazz=new CtClassType(classfile,this);  clazz.checkModify();  String classname=clazz.getName();  if (ifNotFrozen)   checkNotFrozen(classname);  cacheCtClass(classname,clazz,true);  return clazz;}  }
class C{  public static Impp yahoo(String handle){  return new Impp(YAHOO,handle);}  }
class C{  public void insertRow() throws SQLException {  crsInternal.insertRow();}  }
class C{  public ObjectFactory(){}  }
class C{  public GuacamoleSecurityException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  double dpi=72;  State state=new State(info);  state.seriesPath=new GeneralPath();  state.intervalPath=new GeneralPath();  state.dX=72.0 / dpi;  return state;}  }
class C{  public void testEmbeddedBooleanScorer() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter w=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newTextField("field","doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing",Field.Store.NO));  w.addDocument(doc);  IndexReader r=w.getReader();  w.close();  IndexSearcher s=new IndexSearcher(r);  BooleanQuery.Builder q1=new BooleanQuery.Builder();  q1.add(new TermQuery(new Term("field","little")),BooleanClause.Occur.SHOULD);  q1.add(new TermQuery(new Term("field","diseases")),BooleanClause.Occur.SHOULD);  BooleanQuery.Builder q2=new BooleanQuery.Builder();  q2.add(q1.build(),BooleanClause.Occur.SHOULD);  q2.add(new CrazyMustUseBulkScorerQuery(),BooleanClause.Occur.SHOULD);  assertEquals(1,s.search(q2.build(),10).totalHits);  r.close();  dir.close();}  }
class C{  public Field forceSource(boolean forceSource){  this.forceSource=forceSource;  return this;}  }
class C{  public static void drawToolbarButton(Graphics g,AbstractButton b){  if (!b.isEnabled()) {    return;  }  if (b.getModel().isSelected() && b.isRolloverEnabled() || b.getModel().isPressed() && b.getModel().isArmed() && b.isRolloverEnabled()) {    if (b.isContentAreaFilled()) {      drawButton(b,g,createShapeForButton(b));    }    if (b.isBorderPainted()) {      drawButtonBorder(b,g,createBorderShapeForButton(b));    }  } else   if (b.getModel().isRollover() && b.isRolloverEnabled()) {    if (b.isBorderPainted()) {      drawButtonBorder(b,g,createBorderShapeForButton(b));    }  }}  }
class C{  public void test_checkClientTrusted_03() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setX509Certificate();  xtm.checkClientTrusted(xcert,"SSL");}  }
class C{  public synchronized boolean stop(){  if (!mStarted) {    return true;  }  boolean success=true;  success&=getConfigurationService().stop();  success&=getHttpClientService().stop();  success&=getHistoryService().stop();  success&=getStorageService().stop();  success&=getContactService().stop();  success&=getSipService().stop();  success&=getSoundService().stop();  success&=getNetworkService().stop();  if (!success) {    Log.e(TAG,"Failed to stop services");  }  NgnApplication.getContext().stopService(new Intent(NgnApplication.getContext(),getNativeServiceClass()));  if (mNotifManager != null) {    mNotifManager.cancelAll();  }  mStarted=false;  return success;}  }
class C{  private void validateBusinessObjectDataDdlRequest(BusinessObjectDataDdlRequest request){  Assert.notNull(request,"A business object data DDL request must be specified.");  Assert.hasText(request.getNamespace(),"A namespace must be specified.");  request.setNamespace(request.getNamespace().trim());  Assert.hasText(request.getBusinessObjectDefinitionName(),"A business object definition name must be specified.");  request.setBusinessObjectDefinitionName(request.getBusinessObjectDefinitionName().trim());  Assert.hasText(request.getBusinessObjectFormatUsage(),"A business object format usage must be specified.");  request.setBusinessObjectFormatUsage(request.getBusinessObjectFormatUsage().trim());  Assert.hasText(request.getBusinessObjectFormatFileType(),"A business object format file type must be specified.");  request.setBusinessObjectFormatFileType(request.getBusinessObjectFormatFileType().trim());  businessObjectDataHelper.validatePartitionValueFilters(request.getPartitionValueFilters(),request.getPartitionValueFilter(),false);  Assert.isTrue(request.getStorageNames() == null || request.getStorageName() == null,"A list of storage names and a standalone storage name cannot be both specified.");  if (request.getStorageName() != null) {    Assert.hasText(request.getStorageName(),"A storage name must be specified.");    request.setStorageName(request.getStorageName().trim());  }  if (!CollectionUtils.isEmpty(request.getStorageNames())) {    for (int i=0; i < request.getStorageNames().size(); i++) {      Assert.hasText(request.getStorageNames().get(i),"A storage name must be specified.");      request.getStorageNames().set(i,request.getStorageNames().get(i).trim());    }  }  Assert.notNull(request.getOutputFormat(),"An output format must be specified.");  Assert.hasText(request.getTableName(),"A table name must be specified.");  request.setTableName(request.getTableName().trim());  if (StringUtils.isNotBlank(request.getCustomDdlName())) {    request.setCustomDdlName(request.getCustomDdlName().trim());  }}  }
class C{  private boolean isFbTextureNeeded(){  if (useShaderDepthTest && shaderContext.getDepthTestEnable() != 0) {    return true;  }  if (useShaderStencilTest && shaderContext.getStencilTestEnable() != 0) {    return true;  }  if (useShaderBlendTest && shaderContext.getBlendTestEnable() != 0) {    return true;  }  if (useShaderColorMask && shaderContext.getColorMaskEnable() != 0) {    return true;  }  return false;}  }
class C{  public static byte[] hmac_sha1(byte[] keyBytes,byte[] text) throws NoSuchAlgorithmException, InvalidKeyException {  Mac hmacSha1;  try {    hmacSha1=Mac.getInstance("HmacSHA1");  } catch (  final NoSuchAlgorithmException nsae) {    hmacSha1=Mac.getInstance("HMAC-SHA-1");  }  final SecretKeySpec macKey=new SecretKeySpec(keyBytes,"RAW");  hmacSha1.init(macKey);  return hmacSha1.doFinal(text);}  }
class C{  @Override public Operation error(Class<? extends DataObject> clazz,URI id,String opId,ServiceCoded serviceCoded){  Operation updateOperation=new Operation();  updateOperation.error(serviceCoded);  return updateTaskStatus(clazz,id,opId,updateOperation);}  }
class C{  protected int calcMaxValue(Object propertyName,int value){  int maxValue=getParentIntProperty(propertyName);  if (value > maxValue) {    if (miParent != null) {      miParent.putClientProperty(propertyName,value);    }    return value;  } else {    return maxValue;  }}  }
class C{  public void unblock(){  lock.writeLock().unlock();}  }
class C{  public Node removeMin(){  return null;}  }
class C{  public Model validateNode(Dataset dataset,URI shapesGraphURI,Node focusNode,Resource minSeverity,Predicate<SHConstraint> constraintFilter,Function<RDFNode,String> labelFunction,ProgressMonitor monitor) throws InterruptedException {  Model results=JenaUtil.createMemoryModel();  Model shapesModel=dataset.getNamedModel(shapesGraphURI.toString());  List<Property> properties=SHACLUtil.getAllConstraintProperties(true);  Resource resource=(Resource)dataset.getDefaultModel().asRDFNode(focusNode);  Set<Resource> shapes=getShapesForResource(resource,dataset,shapesModel);  for (  Resource shape : shapes) {    if (monitor != null && monitor.isCanceled()) {      throw new InterruptedException();    }    addResourceViolations(dataset,shapesGraphURI,focusNode,shape.asNode(),properties,minSeverity,constraintFilter,results,labelFunction,monitor);  }  return results;}  }
class C{  private TreeNode findNode(DefaultMutableTreeNode node,Object obj){  if (obj instanceof String) {    if (node.getUserObject().toString().equals(obj.toString())) {      return node;    }  } else   if (node.getUserObject().equals(obj)) {    return node;  }  TreeNode foundNode=null;  for (int i=0; i < node.getChildCount(); i++) {    DefaultMutableTreeNode childNode=(DefaultMutableTreeNode)node.getChildAt(i);    foundNode=findNode(childNode,obj);    if (foundNode != null) {      break;    }  }  return foundNode;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAltGlyphItemElement(prefix,(AbstractDocument)doc);}  }
class C{  public static EntityCondition makeRangeCondition(Timestamp rangeStart,Timestamp rangeEnd,String fromDateName,String thruDateName){  List<EntityCondition> criteria=new LinkedList<EntityCondition>();  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(fromDateName,EntityOperator.GREATER_THAN_EQUAL_TO,rangeStart),EntityOperator.AND,EntityCondition.makeCondition(fromDateName,EntityOperator.LESS_THAN,rangeEnd)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(thruDateName,EntityOperator.GREATER_THAN_EQUAL_TO,rangeStart),EntityOperator.AND,EntityCondition.makeCondition(thruDateName,EntityOperator.LESS_THAN,rangeEnd)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(fromDateName,EntityOperator.EQUALS,null),EntityOperator.AND,EntityCondition.makeCondition(thruDateName,EntityOperator.GREATER_THAN_EQUAL_TO,rangeStart)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(thruDateName,EntityOperator.EQUALS,null),EntityOperator.AND,EntityCondition.makeCondition(fromDateName,EntityOperator.LESS_THAN,rangeEnd)));  criteria.add(EntityCondition.makeCondition(EntityCondition.makeCondition(thruDateName,EntityOperator.EQUALS,null),EntityOperator.AND,EntityCondition.makeCondition(fromDateName,EntityOperator.EQUALS,null)));  return EntityCondition.makeCondition(criteria,EntityOperator.OR);}  }
class C{  public link removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestVesselHelper.class);}  }
class C{  private static boolean withinOne(INode n,INode goal){  DoubleLinkedList<IMove> moves=n.validMoves();  for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {    IMove move=it.next();    INode successor=n.copy();    move.execute(successor);    if (ge.eval(successor) == 0) {      return true;    }  }  return false;}  }
class C{  public Instrumenter attachGenerationalDistanceCollector(){  includeGenerationalDistance=true;  return this;}  }
class C{  @Override protected void observableActivated(){  if (activationHandler != null) {    activationHandler.observableActivated(this);  }}  }
class C{  public DownloadTask resume(String taskId){  DownloadTask downloadTask=getCurrentTaskById(taskId);  if (downloadTask != null) {    if (downloadTask.getDownloadStatus() != DownloadStatus.DOWNLOAD_STATUS_COMPLETED) {      downloadTask.setDownloadStatus(DownloadStatus.DOWNLOAD_STATUS_PREPARE);      downloadTask.setdownFileStore(downFileStore);      downloadTask.setHttpClient(client);      Future future=executorService.submit(downloadTask);      futureMap.put(downloadTask.getId(),future);    }  } else {    downloadTask=getDBTaskById(taskId);    if (downloadTask != null) {      currentTaskList.put(taskId,downloadTask);      downloadTask.setDownloadStatus(DownloadStatus.DOWNLOAD_STATUS_PREPARE);      downloadTask.setdownFileStore(downFileStore);      downloadTask.setHttpClient(client);      Future future=executorService.submit(downloadTask);      futureMap.put(downloadTask.getId(),future);    }  }  return downloadTask;}  }
class C{  public TwoColumnOutput(OutputStream out,int leftWidth,int rightWidth,String spacer){  this(new OutputStreamWriter(out),leftWidth,rightWidth,spacer);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ABSTRACT___ABSTRACT_1:    return abstract_1 != ABSTRACT_1_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void populateSequenceListForSegment(List<SequenceTypeTuple> sequenceTypeTuples,org.smpte_ra.schemas.st2067_2_2013.SegmentType segment){  org.smpte_ra.schemas.st2067_2_2013.ObjectFactory objectFactory=new org.smpte_ra.schemas.st2067_2_2013.ObjectFactory();  JAXBElement<SequenceType> element=null;  List<Object> any=segment.getSequenceList().getAny();  for (  SequenceTypeTuple sequenceTypeTuple : sequenceTypeTuples) {switch (sequenceTypeTuple.getSequenceType()) {case MainImageSequence:      element=objectFactory.createMainImageSequence(sequenceTypeTuple.getSequence());    break;case MainAudioSequence:  element=objectFactory.createMainAudioSequence(sequenceTypeTuple.getSequence());break;default :throw new IMFAuthoringException(String.format("Currently we only support %s and %s sequence types in building a Composition Playlist document, the type of sequence being requested is %s",Composition.SequenceTypeEnum.MainAudioSequence.toString(),Composition.SequenceTypeEnum.MainImageSequence,sequenceTypeTuple.getSequenceType().toString()));}any.add(element);}}  }
class C{  @Override public FilterReply decide(ILoggingEvent event){  if (Strings.isNullOrEmpty(event.getLoggerName())) {    return FilterReply.DENY;  }  for (  String name : loggerName) {    FilterReply ret;    if (name.endsWith("/0")) {      String nullTerminatedLN=event.getLoggerName() + "/0";      ret=nameMatches(nullTerminatedLN.equals(name));    } else {      ret=nameMatches(event.getLoggerName().startsWith(name));    }    ret=shouldReturn(ret);    if (ret != null) {      return ret;    }  }  if (exclude) {    return FilterReply.NEUTRAL;  } else {    return FilterReply.DENY;  }}  }
class C{  @Override public void tearDown() throws Exception {  if (this.rs != null) {    try {      this.rs.close();    } catch (    SQLException SQLE) {    }  }  if (this.sha256Rs != null) {    try {      this.sha256Rs.close();    } catch (    SQLException SQLE) {    }  }  if (System.getProperty("com.mysql.jdbc.testsuite.retainArtifacts") == null) {    Statement st=this.conn == null || this.conn.isClosed() ? getNewConnection().createStatement() : this.conn.createStatement();    Statement sha256st;    if (this.sha256Conn == null || this.sha256Conn.isClosed()) {      Connection c=getNewSha256Connection();      sha256st=c == null ? null : c.createStatement();    } else {      sha256st=this.sha256Conn.createStatement();    }    for (int i=0; i < this.createdObjects.size(); i++) {      String[] objectInfo=this.createdObjects.get(i);      try {        dropSchemaObject(st,objectInfo[0],objectInfo[1]);      } catch (      SQLException SQLE) {      }      try {        dropSchemaObject(sha256st,objectInfo[0],objectInfo[1]);      } catch (      SQLException SQLE) {      }    }    st.close();    if (sha256st != null) {      sha256st.close();    }  }  if (this.stmt != null) {    try {      this.stmt.close();    } catch (    SQLException SQLE) {    }  }  if (this.sha256Stmt != null) {    try {      this.sha256Stmt.close();    } catch (    SQLException SQLE) {    }  }  if (this.pstmt != null) {    try {      this.pstmt.close();    } catch (    SQLException SQLE) {    }  }  if (this.conn != null) {    try {      this.conn.close();    } catch (    SQLException SQLE) {    }  }  if (this.sha256Conn != null) {    try {      this.sha256Conn.close();    } catch (    SQLException SQLE) {    }  }}  }
class C{  private List<DoubleFactor> sumOut(String nodeId,List<DoubleFactor> factors){  List<DoubleFactor> dependentFactors=new LinkedList<DoubleFactor>();  List<DoubleFactor> remainingFactors=new LinkedList<DoubleFactor>();  for (  DoubleFactor f : factors) {    if (!f.getVariables().contains(nodeId)) {      remainingFactors.add(f);    } else {      dependentFactors.add(f);    }  }  DoubleFactor productDependentFactors=pointwiseProduct(dependentFactors);  DoubleFactor sumDependentFactors=sumOutDependent(nodeId,productDependentFactors);  if (!sumDependentFactors.isEmpty()) {    remainingFactors.add(sumDependentFactors);  }  return remainingFactors;}  }
class C{  public static int partition(int[] list,int from,int to,int splitter){  steps+=to - from + 1;  int element;  for (int i=from - 1; ++i <= to; ) {    element=list[i];    if (element < splitter) {      list[i]=list[from];      list[from++]=element;    }  }  return from - 1;}  }
class C{  public T animate(int animId,AnimationListener listener){  Animation anim=AnimationUtils.loadAnimation(getContext(),animId);  anim.setAnimationListener(listener);  return animate(anim);}  }
class C{  public Iterator enumerateLiteralResultAttributes(){  return (null == m_avts) ? null : m_avts.iterator();}  }
class C{  private void loadCookies(){  lock.lock();  try {    Set<String> cookieStrings=spePreferences.getStringSet(COOKIE_JAR,null);    if (cookieStrings != null)     cookieJar.addAll(stringSetToCookieList(cookieStrings));    Set<String> URIStrings=spePreferences.getStringSet(URI_LIST,null);    if (URIStrings != null) {      for (      String s : URIStrings) {        uriIndex.put(URI.create(s),stringSetToCookieList(spePreferences.getStringSet(s,null)));      }    }    Set<String> domains=spePreferences.getStringSet(STRING_LIST,null);    if (domains != null) {      for (      String s : domains) {        domainIndex.put(s,stringSetToCookieList(spePreferences.getStringSet(s,null)));      }    }  } catch (  Exception e) {    Log.e(TAG,"Failed to Load Cookies from SharedPref",e);  }  for (  HttpCookie cookie : cookieJar) {    Log.e(TAG,cookie.getName() + " : " + cookie.getValue());  }  lock.unlock();}  }
class C{  private byte[] concat(final byte[] data1,final byte[] data2){  final byte[] newdata=new byte[data1.length + data2.length];  System.arraycopy(data1,0,newdata,0,data1.length);  System.arraycopy(data2,0,newdata,data1.length,data2.length);  return newdata;}  }
class C{  private boolean lastTabIsEmpty(){  if (!diagrams.isEmpty()) {    DiagramHandler lastDiagram=diagrams.get(diagrams.size() - 1);    if (lastDiagram.getController().isEmpty() && lastDiagram.getDrawPanel().getGridElements().isEmpty()) {      return true;    }  }  return false;}  }
class C{  public AuditLogReader(Configuration conf,DbConnectionFactory dbConnectionFactory,String auditLogTableName,String outputObjectsTableName,String mapRedStatsTableName,long getIdsAfter) throws SQLException {  this.dbConnectionFactory=dbConnectionFactory;  this.auditLogTableName=auditLogTableName;  this.outputObjectsTableName=outputObjectsTableName;  this.mapRedStatsTableName=mapRedStatsTableName;  this.lastReadId=getIdsAfter;  auditLogEntries=new LinkedList<>();  this.retryingTaskRunner=new RetryingTaskRunner(conf.getInt(ConfigurationKeys.DB_QUERY_RETRIES,DbConstants.DEFAULT_NUM_RETRIES),DbConstants.DEFAULT_RETRY_EXPONENTIAL_BASE);}  }
class C{  static <E>void writeMultiset(Multiset<E> multiset,ObjectOutputStream stream) throws IOException {  int entryCount=multiset.entrySet().size();  stream.writeInt(entryCount);  for (  Multiset.Entry<E> entry : multiset.entrySet()) {    stream.writeObject(entry.getElement());    stream.writeInt(entry.getCount());  }}  }
class C{  public void storeRecursive(File file) throws IOException {  if (file.isDirectory()) {    makeDirectory(file.getName());    changeWorkingDirectory(file.getName());    for (    File f : file.listFiles()) {      storeRecursive(f);    }    changeWorkingDirectory("..");  } else {    InputStream in=new FileInputStream(file);    store(file.getName(),in);  }}  }
class C{  @Nonnull public BugInstance addSourceLine(ClassContext classContext,PreorderVisitor visitor,int pc){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstruction(classContext,visitor,pc);  if (sourceLineAnnotation != null) {    add(sourceLineAnnotation);  }  return this;}  }
class C{  public ThreeValueRulePanel(){  super();  this.add(mainTab);  tfBias=createTextField(null,null);  tfLowerThreshold=createTextField(null,null);  tfUpperThreshold=createTextField(null,null);  tfLowerValue=createTextField(null,null);  tfMiddleValue=createTextField(null,null);  tfUpperValue=createTextField(null,null);  mainTab.addItem("Bias",tfBias);  mainTab.addItem("Lower threshold",tfLowerThreshold);  mainTab.addItem("Upper threshold",tfUpperThreshold);  mainTab.addItem("Lower value",tfLowerValue);  mainTab.addItem("Middle value",tfMiddleValue);  mainTab.addItem("Upper value",tfUpperValue);}  }
class C{  DbException convertIllegalStateException(IllegalStateException e){  int errorCode=DataUtils.getErrorCode(e.getMessage());  if (errorCode == DataUtils.ERROR_FILE_CORRUPT) {    if (encrypted) {      throw DbException.get(ErrorCode.FILE_ENCRYPTION_ERROR_1,e,fileName);    }  } else   if (errorCode == DataUtils.ERROR_FILE_LOCKED) {    throw DbException.get(ErrorCode.DATABASE_ALREADY_OPEN_1,e,fileName);  } else   if (errorCode == DataUtils.ERROR_READING_FAILED) {    throw DbException.get(ErrorCode.IO_EXCEPTION_1,e,fileName);  }  throw DbException.get(ErrorCode.FILE_CORRUPTED_1,e,fileName);}  }
class C{  protected String doIt() throws Exception {  if (m_C_ProjectLine_ID == 0)   throw new IllegalArgumentException("No Project Line");  MProjectLine projectLine=new MProjectLine(getCtx(),m_C_ProjectLine_ID,get_TrxName());  log.info("doIt - " + projectLine);  if (projectLine.getM_Product_ID() == 0)   throw new IllegalArgumentException("No Product");  MProject project=new MProject(getCtx(),projectLine.getC_Project_ID(),get_TrxName());  if (project.getM_PriceList_ID() == 0)   throw new IllegalArgumentException("No PriceList");  boolean isSOTrx=true;  MProductPricing pp=new MProductPricing(projectLine.getM_Product_ID(),project.getC_BPartner_ID(),projectLine.getPlannedQty(),isSOTrx);  pp.setM_PriceList_ID(project.getM_PriceList_ID());  pp.setPriceDate(project.getDateContract());  projectLine.setPlannedPrice(pp.getPriceStd());  projectLine.setPlannedMarginAmt(pp.getPriceStd().subtract(pp.getPriceLimit()));  projectLine.saveEx();  String retValue=Msg.getElement(getCtx(),"PriceList") + pp.getPriceList() + " - "+ Msg.getElement(getCtx(),"PriceStd")+ pp.getPriceStd()+ " - "+ Msg.getElement(getCtx(),"PriceLimit")+ pp.getPriceLimit();  return retValue;}  }
class C{  synchronized void incrementQueriesIssuedSinceFailover(){  this.queriesIssuedSinceFailover++;}  }
class C{  private void chainingFilters(List<Employee> employees){  Stream<Employee> empStream=employees.stream().filter(null).filter(null).filter(null);  empStream.forEach(null);}  }
class C{  public double[] toEastingNorthing(double e,double n){  return new double[]{e + easting,n + northing};}  }
class C{  @Override public void pause(boolean toPause){  isPaused=toPause;}  }
class C{  public boolean isLoaded(){  return mBitmap != null || mStyle == STYLE_NULL;}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint cc=toContentConstraint(constraint);  LengthConstraintType w=cc.getWidthConstraintType();  LengthConstraintType h=cc.getHeightConstraintType();  Size2D contentSize=null;  if (w == LengthConstraintType.NONE) {    if (h == LengthConstraintType.NONE) {      contentSize=new Size2D(getWidth(),getHeight());    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.RANGE) {    if (h == LengthConstraintType.NONE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.RANGE) {      contentSize=arrangeRR(g2,cc.getWidthRange(),cc.getHeightRange());    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.FIXED) {    if (h == LengthConstraintType.NONE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  }  assert contentSize != null;  return new Size2D(calculateTotalWidth(contentSize.getWidth()),calculateTotalHeight(contentSize.getHeight()));}  }
class C{  public TabbedPaneTopTabState(){  super("Top");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Object convert(Class type,Object value){  if (value == null)   return (String)null; else   if (value instanceof Date)   return DateUtils.formatDate((Date)value); else   return value.toString();}  }
class C{  public static boolean isPrimitive(String type){  if (type.equals("int") || type.equals("long") || type.equals("double")|| type.equals("float")|| type.equals("char")|| type.equals("boolean")|| type.equals("byte")) {    return true;  }  return false;}  }
class C{  public InputStream openStream(String userAgent,Iterator mimeTypes) throws IOException {  InputStream raw=openStreamInternal(userAgent,mimeTypes,acceptedEncodings.iterator());  if (raw == null)   return null;  stream=null;  return checkGZIP(raw);}  }
class C{  public SAXParserMMImpl(){  this(null,null);}  }
class C{  @ReactMethod public void canOpenURL(String url,Promise promise){  if (url == null || url.isEmpty()) {    promise.reject(new JSApplicationIllegalArgumentException("Invalid URL: " + url));    return;  }  try {    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    boolean canOpen=intent.resolveActivity(getReactApplicationContext().getPackageManager()) != null;    promise.resolve(canOpen);  } catch (  Exception e) {    promise.reject(new JSApplicationIllegalArgumentException("Could not check if URL '" + url + "' can be opened: "+ e.getMessage()));  }}  }
class C{  public int itemAt(int k){  return m_items[k];}  }
class C{  public void disableTableModificationMenus(){  showInsertRowPopupMenu=false;  showInsertColumnPopupMenu=false;  showDeleteRowPopupMenu=false;  showDeleteColumnPopupMenu=false;  showEditInPopupMenu=false;}  }
class C{  public void draw(){  StdDraw.setPenColor(color);  StdDraw.filledCircle(rx,ry,radius);}  }
class C{  public static CCTurnOffTiles action(int s,ccGridSize gridSize,float d){  return new CCTurnOffTiles(s,gridSize,d);}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  getHandler().mouseWheelMoved(e);}  }
class C{  public static void generateJavaScriptError(Writer writer,String javascriptCode) throws IOException {  writer.write("<script>alert(top.GetIdsLan(\"" + javascriptCode + "\"));</script>");}  }
class C{  protected ShardResponse transfomResponse(final ShardRequest sreq,ShardResponse rsp,String shard){  return rsp;}  }
class C{  public int execute(final FormObject ref,final int type,final int eventType,final char keyPressed){  final int returnCode=executeCommand(ref,type,eventType,keyPressed);  boolean executeChangedCode=false;  if (eventType == ActionHandler.FOCUS_EVENT && (type != PdfDictionary.C2 || (type == PdfDictionary.C2 && (returnCode == ActionHandler.NOMESSAGE || returnCode == ActionHandler.VALUESCHANGED)))) {    executeChangedCode=true;  }  if (executeChangedCode) {    final String refName=ref.getTextStreamValue(PdfDictionary.T);    final Vector_String linkedObj=linkedjavascriptCommands.get(refName);    if (linkedObj != null) {      linkedObj.trim();      final String[] value=linkedObj.get();      for (      final String nextVal : value) {        if (nextVal.equals(refName) && type == PdfDictionary.C2) {        }      }    }  }  return returnCode;}  }
class C{  @Override public void write(ByteAppendable os,char ch) throws IOException {  throw new UnsupportedOperationException();}  }
class C{  protected int insertKey(int val){  int hash, index;  hash=HashFunctions.hash(val) & 0x7fffffff;  index=hash % _states.length;  byte state=_states[index];  consumeFreeSlot=false;  if (state == FREE) {    consumeFreeSlot=true;    insertKeyAt(index,val);    return index;  }  if (state == FULL && _set[index] == val) {    return -index - 1;  }  return insertKeyRehash(val,index,hash,state);}  }
class C{  int remoteRecv(byte[] buffer,int len) throws IOException {  return remoteTcp.recv(buffer,len);}  }
class C{  public static int testSplit1Snippet(int a){  try {    return container.a;  }  finally {    if (a < 0) {      container.a=15;    } else {      container.b=15;    }  }}  }
class C{  public synchronized Entry nextValue(Entry prev){  return prev.next;}  }
class C{  @DSSpec(DSCat.INTERNET) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.276 -0500",hash_original_method="1FC662ADE026A6EC6E72DFD849EB4C0C",hash_generated_method="85E1BD66594FB807FDC8148CFC6E4EC3") @Override public void connect() throws IOException {  List<Proxy> proxyList=null;  if (proxy != null) {    proxyList=new ArrayList<Proxy>(1);    proxyList.add(proxy);  } else {    ProxySelector selector=ProxySelector.getDefault();    if (selector != null) {      proxyList=selector.select(uri);    }  }  if (proxyList == null) {    currentProxy=null;    connectInternal();  } else {    ProxySelector selector=ProxySelector.getDefault();    Iterator<Proxy> iter=proxyList.iterator();    boolean connectOK=false;    String failureReason="";    while (iter.hasNext() && !connectOK) {      currentProxy=iter.next();      try {        connectInternal();        connectOK=true;      } catch (      IOException ioe) {        failureReason=ioe.getLocalizedMessage();        if (selector != null && Proxy.NO_PROXY != currentProxy) {          selector.connectFailed(uri,currentProxy.address(),ioe);        }      }    }    if (!connectOK) {      throw new IOException("Unable to connect to server: " + failureReason);    }  }}  }
class C{  public void addException(String exception){  LocalDate exceptionDate=parseDateFormat(exception);  additions.add(exceptionDate);  MapUtils.getSet(exceptionDate,dateStats).remove(this.getId());}  }
class C{  public void abort(){  m_nToDo=ABORT;  go();}  }
class C{  public void excluir(int idSetor){  try {    String sql="DELETE FROM tb_setor WHERE id_setor=?";    stm=conector.prepareStatement(sql);    stm.setInt(1,idSetor);    stm.execute();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao excluir setor na base de dados! \n" + ex);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Filter(FilterType type,FilterPred pred){  this(null,type,pred);}  }
class C{  public SearchForActions createSearch(int strategy,int qSearchImpl,HeuristicFunction hf){  QueueSearch qs=null;  SearchForActions result=null;switch (qSearchImpl) {case TREE_SEARCH:    qs=new TreeSearch();  break;case GRAPH_SEARCH:qs=new GraphSearch();break;case GRAPH_SEARCH_BFS:qs=new GraphSearchBFS();break;case BIDIRECTIONAL_SEARCH:qs=new BidirectionalSearch();}switch (strategy) {case DF_SEARCH:result=new DepthFirstSearch(qs);break;case BF_SEARCH:result=new BreadthFirstSearch(qs);break;case ID_SEARCH:result=new IterativeDeepeningSearch();break;case UC_SEARCH:result=new UniformCostSearch(qs);break;case GBF_SEARCH:result=new GreedyBestFirstSearch(qs,hf);break;case ASTAR_SEARCH:result=new AStarSearch(qs,hf);break;case RBF_SEARCH:result=new RecursiveBestFirstSearch(new AStarEvaluationFunction(hf));break;case RBF_AL_SEARCH:result=new RecursiveBestFirstSearch(new AStarEvaluationFunction(hf),true);break;case HILL_SEARCH:result=new HillClimbingSearch(hf);break;}return result;}  }
class C{  public String findWarLocation(String warFilePrefix){  String gemfireHome=getGemFireHome();  if (!StringUtils.isBlank(gemfireHome)) {    String[] possibleFiles={gemfireHome + "/tools/Extensions/" + warFilePrefix+ "-"+ gemfireVersion+ ".war",gemfireHome + "/tools/Pulse/" + warFilePrefix+ "-"+ gemfireVersion+ ".war",gemfireHome + "/lib/" + warFilePrefix+ "-"+ gemfireVersion+ ".war",gemfireHome + "/tools/Extensions/" + warFilePrefix+ ".war",gemfireHome + "/tools/Pulse/" + warFilePrefix+ ".war",gemfireHome + "/lib/" + warFilePrefix+ ".war"};    for (    String possibleFile : possibleFiles) {      if (new File(possibleFile).isFile()) {        logger.info(warFilePrefix + " war found: {}",possibleFile);        return possibleFile;      }    }  }  String[] possibleFiles={warFilePrefix + "-" + gemfireVersion+ ".war","tools/Pulse/" + warFilePrefix + "-"+ gemfireVersion+ ".war","tools/Extensions/" + warFilePrefix + "-"+ gemfireVersion+ ".war","lib/" + warFilePrefix + "-"+ gemfireVersion+ ".war",warFilePrefix + ".war"};  for (  String possibleFile : possibleFiles) {    URL url=this.getClass().getClassLoader().getResource(possibleFile);    if (url != null) {      logger.info(warFilePrefix + " war found: {}",possibleFile);      return url.getPath();    }  }  logger.warn(warFilePrefix + " war file was not found");  return null;}  }
class C{  private String buildCount(String label,int countNew,int count){  if (count == 0) {    return label;  }  return label + " (" + countNew+ "/"+ count+ ")";}  }
class C{  private boolean checkThreadCallbacks(SceKernelThreadInfo thread){  boolean handled=false;  if (thread == null || !thread.doCallbacks) {    return handled;  }  for (int callbackType=0; callbackType < SceKernelThreadInfo.THREAD_CALLBACK_SIZE; callbackType++) {    RegisteredCallbacks registeredCallbacks=thread.getRegisteredCallbacks(callbackType);    pspBaseCallback callback=registeredCallbacks.getNextReadyCallback();    if (callback != null) {      if (log.isDebugEnabled()) {        log.debug(String.format("Entering callback type %d %s for thread %s (current thread is %s)",callbackType,callback.toString(),thread.toString(),currentThread.toString()));      }      CheckCallbackReturnValue checkCallbackReturnValue=new CheckCallbackReturnValue(thread,callback.getUid());      callback.call(thread,checkCallbackReturnValue);      handled=true;      break;    }  }  return handled;}  }
class C{  public static MachineType platformToMachineType(SAMReadGroupRecord srgr,boolean paired){  if (MachineType.COMPLETE_GENOMICS.compatiblePlatform(srgr.getPlatform())) {    return MachineType.COMPLETE_GENOMICS;  } else   if (MachineType.COMPLETE_GENOMICS_2.compatiblePlatform(srgr.getPlatform())) {    return MachineType.COMPLETE_GENOMICS_2;  } else   if (MachineType.FOURFIVEFOUR_PE.compatiblePlatform(srgr.getPlatform()) || MachineType.FOURFIVEFOUR_SE.compatiblePlatform(srgr.getPlatform())) {    if (paired) {      return MachineType.FOURFIVEFOUR_PE;    } else {      return MachineType.FOURFIVEFOUR_SE;    }  } else   if (MachineType.ILLUMINA_PE.compatiblePlatform(srgr.getPlatform()) || MachineType.ILLUMINA_SE.compatiblePlatform(srgr.getPlatform())) {    if (paired) {      return MachineType.ILLUMINA_PE;    } else {      return MachineType.ILLUMINA_SE;    }  } else   if (MachineType.IONTORRENT.compatiblePlatform(srgr.getPlatform())) {    return MachineType.IONTORRENT;  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void run(){  this.java.setSpawn(spawn);  if (!spawn) {    this.java.setFailonerror(true);  }  try {    this.java.execute();  } catch (  BuildException ex) {    if (ex.getMessage().contains("Java returned: 1")) {      ex=new BuildException(ex.getMessage() + "  See Cargo log for details.",ex.getCause(),ex.getLocation());    }    this.setBuildException(ex);  } finally {    this.setFinished(true);  }}  }
class C{  public T caseEnum(org.eclipse.vorto.core.api.model.datatype.Enum object){  return null;}  }
class C{  public void rotateAngleAxisY(float angle){  if (mRotateMode != ROTATE_Y)   setRotationVector(ROTATE_Y);  float rotation=angle - mCurrentAngle[1];  mCurrentAngle[1]=mCurrentAngle[1] + (angle - mCurrentAngle[1]);  mRenderer.setRotationObject(rotation);}  }
class C{  private int findBestMatchingType(int givenType,Set<Integer> allowedTypes){  int toReturn=-1;  for (  Integer type : allowedTypes) {    if (type == givenType) {      toReturn=type;      break;    }    if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(givenType,type)) {      if (toReturn < 0) {        toReturn=type;      } else       if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(type,toReturn)) {        toReturn=type;      }    }  }  return toReturn;}  }
class C{  static String node_type(Node n){switch (n.getNodeType()) {case Node.DOCUMENT_NODE:    return ("Document");case Node.DOCUMENT_TYPE_NODE:  return ("Document type");case Node.ELEMENT_NODE:return ("Element");case Node.ENTITY_NODE:return ("Entity");case Node.TEXT_NODE:return ("Text");default :return String.format("node type %d",n.getNodeType());}}  }
class C{  private int[] computeCounts(int splitChannel,int c0,int c1){  int splitSh4=(2 - splitChannel) * 4;  int c0Sh4=(2 - c0) * 4;  int c1Sh4=(2 - c1) * 4;  int half=count / 2;  int[] counts=new int[256];  int tcount=0;  int minR=min[0], minG=min[1], minB=min[2];  int maxR=max[0], maxG=max[1], maxB=max[2];  int[] minIdx={minR >> 4,minG >> 4,minB >> 4};  int[] maxIdx={maxR >> 4,maxG >> 4,maxB >> 4};  int[] vals={0,0,0};  for (int i=minIdx[splitChannel]; i <= maxIdx[splitChannel]; i++) {    int idx1=i << splitSh4;    for (int j=minIdx[c0]; j <= maxIdx[c0]; j++) {      int idx2=idx1 | (j << c0Sh4);      for (int k=minIdx[c1]; k <= maxIdx[c1]; k++) {        int idx=idx2 | (k << c1Sh4);        Counter[] v=colors[idx];        for (int iColor=0; iColor < v.length; iColor++) {          Counter c=v[iColor];          vals=c.getRgb(vals);          if (contains(vals)) {            counts[vals[splitChannel]]+=c.count;            tcount+=c.count;          }        }      }    }  }  return counts;}  }
class C{  public static long quantile(long[] values,double quantile){  if (values == null)   throw new IllegalArgumentException("Values cannot be null.");  if (quantile < 0.0 || quantile > 1.0)   throw new IllegalArgumentException("Quantile must be between 0.0 and 1.0");  long[] copy=new long[values.length];  System.arraycopy(values,0,copy,0,copy.length);  Arrays.sort(copy);  int index=(int)(copy.length * quantile);  return copy[index];}  }
class C{  boolean removeVolumesFromConsistencyGroup(List<String> virtualVolumeNames,String cgName,boolean deleteCGWhenEmpty) throws VPlexApiException {  s_logger.info("Request to remove volumes {} from consistency group {}",virtualVolumeNames.toString(),cgName);  boolean cgDeleted=false;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  List<VPlexVirtualVolumeInfo> virtualVolumeInfoList=new ArrayList<VPlexVirtualVolumeInfo>();  for (  String virtualVolumeName : virtualVolumeNames) {    VPlexVirtualVolumeInfo virtualVolumeInfo=null;    for (    VPlexClusterInfo clusterInfo : clusterInfoList) {      virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterInfo.getName(),virtualVolumeName,false);      if (virtualVolumeInfo != null) {        break;      }    }    if (virtualVolumeInfo == null) {      throw VPlexApiException.exceptions.cantFindRequestedVolume(virtualVolumeName);    }    virtualVolumeInfoList.add(virtualVolumeInfo);  }  VPlexConsistencyGroupInfo cgInfo=discoveryMgr.findConsistencyGroup(cgName,clusterInfoList,false);  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_REMOVE_VOLUMES_FROM_CG);    s_logger.info("Remove volumes from consistency group URI is {}",requestURI.toString());    StringBuilder argBuilder=new StringBuilder();    for (    VPlexVirtualVolumeInfo virtualVolumeInfo : virtualVolumeInfoList) {      if (argBuilder.length() != 0) {        argBuilder.append(",");      }      argBuilder.append(virtualVolumeInfo.getPath());    }    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_V,argBuilder.toString());    argsMap.put(VPlexApiConstants.ARG_DASH_G,cgInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Remove volumes from consistency group POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Remove volumes from consistency group response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Remove volumes from consistency group completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.removeVolumesFromCGFailureStatus(cgInfo.getName(),String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully removed volumes from consistency group");    if (deleteCGWhenEmpty) {      discoveryMgr.updateConsistencyGroupInfo(cgInfo);      if (cgInfo.getVirtualVolumes().isEmpty()) {        s_logger.info("Deleting empty consistency group {}",cgName);        try {          deleteConsistencyGroup(cgInfo);          cgDeleted=true;        } catch (        Exception e) {          s_logger.error("Exception deleting consistency group {}:{}",cgName,e.getMessage());        }      }    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedRemovingVolumesFromCG(cgInfo.getName(),e);  } finally {    if (response != null) {      response.close();    }  }  return cgDeleted;}  }
class C{  public T caseTrace_(Trace_ object){  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  BinarySearchTreeNode<E> removeMaximum(BinarySearchTreeNode<E> node){  node=this.getMaximum(node);  if (node == null)   return null;  if (node == this.root) {    this.root=node.left;  } else   if (node.parent.right == node) {    node.parent.right=node.left;  } else {    node.parent.left=node.left;  }  this.size--;  return node;}  }
class C{  public static InetAddress intToInetAddress(int hostAddress){  if (hostAddress == 0)   return null;  byte[] addressBytes={(byte)(0xff & hostAddress),(byte)(0xff & (hostAddress >> 8)),(byte)(0xff & (hostAddress >> 16)),(byte)(0xff & (hostAddress >> 24))};  try {    return InetAddress.getByAddress(addressBytes);  } catch (  UnknownHostException e) {    throw new AssertionError();  }}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) public boolean isVisibleToUser(){  return getBooleanProperty(BOOLEAN_PROPERTY_VISIBLE_TO_USER);}  }
class C{  public long tryConvertToWriteLock(long stamp){  long a=stamp & ABITS, m, s, next;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      if (U.compareAndSwapLong(this,STATE,s,next=s + WBIT))       return next;    } else     if (m == WBIT) {      if (a != m)       break;      return stamp;    } else     if (m == RUNIT && a != 0L) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT + WBIT))       return next;    } else     break;  }  return 0L;}  }
class C{  SolrInputField f(String name,Object... values){  return field(name,1.0F,values);}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public Leaf(){}  }
class C{  private JTextField createTextField(int width){  JTextField f=new JTextField(width);  f.setEditable(false);  f.setBorder(null);  return f;}  }
class C{  public static InputStream open(final String filePath){  try {    if (!TextUtils.isEmpty(filePath)) {      return new FileInputStream(filePath);    }    return null;  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public PBEKeySpec(char[] password,byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=0;}  }
class C{  private void addInitializedClass(String classNameWithDots){  if (!initializedClasses.contains(classNameWithDots)) {    initializedClasses.add(classNameWithDots);  }}  }
class C{  public SensorRefresher(){  setName("inspectit-platform-sensor-refresher-thread");  setDaemon(true);}  }
class C{  public static void rendezvous(String condition,int N){  BValue cond;  IValue iv;  String name="RV_" + condition;synchronized (conditions) {    cond=(BValue)conditions.get(name);    if (cond == null) {      if (N < 2) {        throw new RuntimeException("rendezvous must be called with N >= 2");      }      cond=new BValue();      conditions.put(name,cond);      iv=new IValue(N - 1);      rv.put(name,iv);    } else {      iv=(IValue)rv.get(name);      iv.v--;    }  }  if (iv.v > 0) {    waitForCondition(name);  } else {    setCondition(name);synchronized (conditions) {      clearCondition(name);      rv.remove(name);    }  }}  }
class C{  public boolean hasHref(){  return getHref() != null;}  }
class C{  private int mulInv(int x){  int t0, t1, q, y;  if (x < 2) {    return x;  }  t0=1;  t1=BASE / x;  y=BASE % x;  while (y != 1) {    q=x / y;    x=x % y;    t0=(t0 + (t1 * q)) & MASK;    if (x == 1) {      return t0;    }    q=y / x;    y=y % x;    t1=(t1 + (t0 * q)) & MASK;  }  return (1 - t1) & MASK;}  }
class C{  public static boolean isFinal(int mod){  return Modifier.isFinal(mod);}  }
class C{  public static String macContentsEclipse(){  return OS.getNative().winMacLinux("","Contents/Eclipse/","");}  }
class C{  public void clear(int fromIndex,int toIndex){  checkRange(fromIndex,toIndex);  if (fromIndex == toIndex)   return;  int startWordIndex=wordIndex(fromIndex);  if (startWordIndex >= wordsInUse)   return;  int endWordIndex=wordIndex(toIndex - 1);  if (endWordIndex >= wordsInUse) {    toIndex=length();    endWordIndex=wordsInUse - 1;  }  long firstWordMask=WORD_MASK << fromIndex;  long lastWordMask=WORD_MASK >>> -toIndex;  if (startWordIndex == endWordIndex) {    words[startWordIndex]&=~(firstWordMask & lastWordMask);  } else {    words[startWordIndex]&=~firstWordMask;    for (int i=startWordIndex + 1; i < endWordIndex; i++)     words[i]=0;    words[endWordIndex]&=~lastWordMask;  }  recalculateWordsInUse();  checkInvariants();}  }
class C{  public void endElement(String uri,String localName,String rawName) throws org.xml.sax.SAXException {  m_elementID--;  if (!m_shouldProcess)   return;  if ((m_elementID + 1) == m_fragmentID)   m_shouldProcess=false;  flushCharacters();  popSpaceHandling();  XSLTElementProcessor p=getCurrentProcessor();  p.endElement(this,uri,localName,rawName);  this.popProcessor();  this.getNamespaceSupport().popContext();}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public AttachmentExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private static boolean isPollingPageFar(GraalHotSpotVMConfig config){  final long pollingPageAddress=config.safepointPollingAddress;  return !NumUtil.isSignedNbit(21,pollingPageAddress - config.codeCacheLowBound) || !NumUtil.isSignedNbit(21,pollingPageAddress - config.codeCacheHighBound);}  }
class C{  protected void shiftBuffer(int offset){  fStart=offset;  fEnd=fStart + fBufferSize;  if (fEnd > fDocumentLength)   fEnd=fDocumentLength;  try {    String content=fDocument.get(fStart,fEnd - fStart);    content.getChars(0,fEnd - fStart,fBuffer,0);  } catch (  BadLocationException x) {  }}  }
class C{  public XML addClass(Class<?> aClass,Attribute[] attributes){  checksClassAbsence(aClass);  XmlClass xmlClass=new XmlClass();  xmlClass.name=aClass.getName();  xmlClass.attributes=new ArrayList<XmlAttribute>();  xmlJmapper.classes.add(xmlClass);  addAttributes(aClass,attributes);  return this;}  }
class C{  public boolean add(Solution newSolution){  return super.forceAddWithoutCheck(newSolution);}  }
class C{  public Map<Integer,HadoopProcessDescriptor> reducersAddresses(){  return reducersAddrs;}  }
class C{  private void initialiseDrawables(){  leftDrawable=ContextCompat.getDrawable(TestButtonConfig.this,R.drawable.introbutton_behaviour_first);  rightDrawable=ContextCompat.getDrawable(TestButtonConfig.this,R.drawable.introbutton_behaviour_previous);  finalDrawable=ContextCompat.getDrawable(TestButtonConfig.this,R.drawable.introbutton_behaviour_progress);}  }
class C{  public boolean isLocalName(){  Scope scope=getDefiningScope();  return scope != null && scope.getParentScope() != null;}  }
class C{  public void configureOption3(String value){  super.configureOption3(value);  log.debug("configureOption3: " + value);  setTurnoutHandling(value);}  }
class C{  private TMember findMemberInSubScope(IScope subScope,String name){  final IEObjectDescription currElem=subScope.getSingleElement(QualifiedName.create(name));  if (currElem != null) {    final EObject objOrProxy=currElem.getEObjectOrProxy();    if (objOrProxy != null && !objOrProxy.eIsProxy() && objOrProxy instanceof TMember) {      final TMember currM=(TMember)objOrProxy;      if (hasCorrectAccess(currM,writeAccess) || (currM instanceof TField && hasCorrectAccess(currM,!writeAccess))) {        return currM;      } else {        return createErrorPlaceholder(name);      }    }  }  return null;}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Knuth.shuffle(a);  for (int i=0; i < a.length; i++)   StdOut.println(a[i]);}  }
class C{  public boolean match(TextElement node,Object other){  if (!(other instanceof TextElement)) {    return false;  }  TextElement o=(TextElement)other;  return safeEquals(node.getText(),o.getText());}  }
class C{  public Builder address(String host,int port){  return address(new InetSocketAddress(host,port));}  }
class C{  public SerializableInstance(){  super(0);}  }
class C{  public boolean isCharged(){  return status == BATTERY_STATUS_FULL || level >= 100;}  }
class C{  public ECKey maybeDecrypt(@Nullable KeyParameter aesKey) throws KeyCrypterException {  return isEncrypted() && aesKey != null ? decrypt(aesKey) : this;}  }
class C{  public String calculateHours(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  I_HR_WorkShift workShift=GridTabWrapper.create(mTab,I_HR_WorkShift.class);  Timestamp fromTime=workShift.getShiftFromTime();  Timestamp toTime=workShift.getShiftToTime();  if (fromTime == null || toTime == null)   return ""; else   if (fromTime.after(toTime)) {    GregorianCalendar gre=(GregorianCalendar)Calendar.getInstance();    gre.setTimeInMillis(toTime.getTime());    gre.add(Calendar.DAY_OF_MONTH,1);    toTime=new Timestamp(gre.getTimeInMillis());  }  long difference=toTime.getTime() - fromTime.getTime();  if (difference > 3600000) {    long hoursBetween=difference / 3600000;    workShift.setNoOfHours(new BigDecimal(hoursBetween));  }  return "";}  }
class C{  public static List<TvShowEpisode> parseNFO(MediaFile episodeFile){  List<TvShowEpisode> episodes=new ArrayList<>(1);  episodes.addAll(TvShowEpisodeToXbmcNfoConnector.getData(episodeFile.getFile()));  return episodes;}  }
class C{  public Vector3 normalize(){  return Vector3.normalize(this);}  }
class C{  public void update(double x_[]){  update(new double[][]{x_});}  }
class C{  public String date(String format,double time){  Calendar d=Calendar.getInstance();  d.setTime(new Date((long)(time * 1000)));  if (format.startsWith("!")) {    time-=timeZoneOffset(d);    d.setTime(new Date((long)(time * 1000)));    format=format.substring(1);  }  byte[] fmt=format.getBytes();  final int n=fmt.length;  Buffer result=new Buffer(n);  byte c;  for (int i=0; i < n; ) {switch (c=fmt[i++]) {case '\n':      result.append("\n");    break;default :  result.append(c);break;case '%':if (i >= n) break;switch (c=fmt[i++]) {default :LuaValue.argerror(1,"invalid conversion specifier '%" + c + "'");break;case '%':result.append((byte)'%');break;case 'a':result.append(WeekdayNameAbbrev[d.get(Calendar.DAY_OF_WEEK) - 1]);break;case 'A':result.append(WeekdayName[d.get(Calendar.DAY_OF_WEEK) - 1]);break;case 'b':result.append(MonthNameAbbrev[d.get(Calendar.MONTH)]);break;case 'B':result.append(MonthName[d.get(Calendar.MONTH)]);break;case 'c':result.append(date("%a %b %d %H:%M:%S %Y",time));break;case 'd':result.append(String.valueOf(100 + d.get(Calendar.DAY_OF_MONTH)).substring(1));break;case 'H':result.append(String.valueOf(100 + d.get(Calendar.HOUR_OF_DAY)).substring(1));break;case 'I':result.append(String.valueOf(100 + (d.get(Calendar.HOUR_OF_DAY) % 12)).substring(1));break;case 'j':{Calendar y0=beginningOfYear(d);int dayOfYear=(int)((d.getTime().getTime() - y0.getTime().getTime()) / (24 * 3600L * 1000L));result.append(String.valueOf(1001 + dayOfYear).substring(1));break;}case 'm':result.append(String.valueOf(101 + d.get(Calendar.MONTH)).substring(1));break;case 'M':result.append(String.valueOf(100 + d.get(Calendar.MINUTE)).substring(1));break;case 'p':result.append(d.get(Calendar.HOUR_OF_DAY) < 12 ? "AM" : "PM");break;case 'S':result.append(String.valueOf(100 + d.get(Calendar.SECOND)).substring(1));break;case 'U':result.append(String.valueOf(weekNumber(d,0)));break;case 'w':result.append(String.valueOf((d.get(Calendar.DAY_OF_WEEK) + 6) % 7));break;case 'W':result.append(String.valueOf(weekNumber(d,1)));break;case 'x':result.append(date("%m/%d/%y",time));break;case 'X':result.append(date("%H:%M:%S",time));break;case 'y':result.append(String.valueOf(d.get(Calendar.YEAR)).substring(2));break;case 'Y':result.append(String.valueOf(d.get(Calendar.YEAR)));break;case 'z':{final int tzo=timeZoneOffset(d) / 60;final int a=Math.abs(tzo);final String h=String.valueOf(100 + a / 60).substring(1);final String m=String.valueOf(100 + a % 60).substring(1);result.append((tzo >= 0 ? "+" : "-") + h + m);break;}}}}return result.tojstring();}  }
class C{  public void transform(Source xmlSource,Result outputTarget,boolean shouldRelease) throws TransformerException {synchronized (m_reentryGuard) {    SerializationHandler xoh=createSerializationHandler(outputTarget);    this.setSerializationHandler(xoh);    m_outputTarget=outputTarget;    transform(xmlSource,shouldRelease);  }}  }
class C{  public static Uri formatURL(String url){  if (url.startsWith("//")) {    url="https:" + url;  }  if (url.startsWith("/")) {    url="https://reddit.com" + url;  }  if (!url.contains("://")) {    url="http://" + url;  }  Uri uri=Uri.parse(url);  return uri.normalizeScheme();}  }
class C{  protected void addAgent() throws Exception {  if (agent != null && agent.isDone()) {    env.removeAgent(agent);    agent=null;  }  if (agent == null) {    int pSel=frame.getSelection().getIndex(NQueensFrame.PROBLEM_SEL);    int sSel=frame.getSelection().getIndex(NQueensFrame.SEARCH_SEL);    ActionsFunction af;    if (pSel == 0)     af=NQueensFunctionFactory.getIActionsFunction(); else     af=NQueensFunctionFactory.getCActionsFunction();    Problem problem=new Problem(env.getBoard(),af,NQueensFunctionFactory.getResultFunction(),new NQueensGoalTest());    Search search=SEARCH_ALGOS.get(sSel);    agent=new SearchAgent(problem,search);    env.addAgent(agent);  }}  }
class C{  public OffScenePanel(int width,int height){  this.width=width;  this.height=height;  initComponents();  setupScene();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ManualRecord mr=Wizard.getInstance().getManualRecord(getAir(stack));  return (mr == null) ? "" : ManualRecord.getRecurrenceName(mr.getRecurrence());}  }
class C{  private void buildUI(String[] stockData){  FacesContext context=FacesContext.getCurrentInstance();  UIForm form=(UIForm)context.getViewRoot().findComponent("myform");  UIPanel dataPanel=(UIPanel)form.findComponent("stockdata");  dataPanel.getChildren().clear();  UIPanel titlePanel1=new UIPanel();  UIOutput output=new UIOutput();  output.setValue("Symbol");  titlePanel1.getChildren().add(output);  dataPanel.getChildren().add(titlePanel1);  UIPanel titlePanel2=new UIPanel();  output=new UIOutput();  output.setValue("Name");  titlePanel2.getChildren().add(output);  dataPanel.getChildren().add(titlePanel2);  UIPanel titlePanel3=new UIPanel();  output=new UIOutput();  output.setValue("Open");  titlePanel3.getChildren().add(output);  dataPanel.getChildren().add(titlePanel3);  UIPanel titlePanel4=new UIPanel();  output=new UIOutput();  output.setValue("Last");  titlePanel4.getChildren().add(output);  dataPanel.getChildren().add(titlePanel4);  UIPanel titlePanel5=new UIPanel();  output=new UIOutput();  output.setValue("");  titlePanel5.getChildren().add(output);  dataPanel.getChildren().add(titlePanel5);  UIPanel titlePanel6=new UIPanel();  output=new UIOutput();  output.setValue("Change");  titlePanel6.getChildren().add(output);  dataPanel.getChildren().add(titlePanel6);  UIPanel titlePanel7=new UIPanel();  output=new UIOutput();  output.setValue("Change %");  titlePanel7.getChildren().add(output);  dataPanel.getChildren().add(titlePanel7);  UIPanel titlePanel8=new UIPanel();  output=new UIOutput();  output.setValue("Volume");  titlePanel8.getChildren().add(output);  dataPanel.getChildren().add(titlePanel8);  for (int i=0; i < stockData.length; i++) {    String[] data=stockData[i].split("\\,");    UIOutput outputComponent=null;    UIGraphic imageComponent=null;    double openPrice=0;    double lastPrice=0;    double change=0;    boolean openPriceAvailable=true;    outputComponent=new UIOutput();    outputComponent.setValue(data[0]);    dataPanel.getChildren().add(outputComponent);    outputComponent=new UIOutput();    outputComponent.setValue(data[1]);    dataPanel.getChildren().add(outputComponent);    outputComponent=new UIOutput();    try {      openPrice=new Double(data[2]).doubleValue();    } catch (    NumberFormatException nfe) {      openPriceAvailable=false;    }    outputComponent.setValue(data[2]);    dataPanel.getChildren().add(outputComponent);    outputComponent=new UIOutput();    if (openPriceAvailable) {      lastPrice=new Double(data[3]).doubleValue();      lastPrice=round(lastPrice,2);      change=lastPrice - openPrice;      change=round(change,2);    }    outputComponent.setValue(lastPrice);    dataPanel.getChildren().add(outputComponent);    if (change < 0) {      imageComponent=new UIGraphic();      imageComponent.setUrl("resources/down_r.gif");      dataPanel.getChildren().add(imageComponent);    } else     if (change > 0) {      imageComponent=new UIGraphic();      imageComponent.setUrl("resources/up_g.gif");      dataPanel.getChildren().add(imageComponent);    } else {      outputComponent=new UIOutput();      outputComponent.setValue("");      dataPanel.getChildren().add(outputComponent);    }    outputComponent=new UIOutput();    if (change < 0) {      outputComponent.getAttributes().put("styleClass","down-color");    } else     if (change > 0) {      outputComponent.getAttributes().put("styleClass","up-color");    }    outputComponent.setValue(String.valueOf(change));    dataPanel.getChildren().add(outputComponent);    outputComponent=new UIOutput();    if (change < 0) {      outputComponent.getAttributes().put("styleClass","down-color");    } else     if (change > 0) {      outputComponent.getAttributes().put("styleClass","up-color");    }    outputComponent.setValue(data[5]);    dataPanel.getChildren().add(outputComponent);    outputComponent=new UIOutput();    outputComponent.setValue(data[6]);    dataPanel.getChildren().add(outputComponent);  }}  }
class C{  private void buildRememberPassword(){  final Button checkbox=new Button(this.shell,SWT.CHECK);  final GridData gridData=new GridData(GridData.BEGINNING,GridData.CENTER,true,false,4,1);  gridData.horizontalIndent=35;  checkbox.setLayoutData(gridData);  checkbox.setText(ResourceManager.getLabel(ResourceManager.REMEMBER_PASSWORD));  checkbox.setSelection(this.rememberPassword);}  }
class C{  public boolean isShowCrosshair(){  return (worldScene.getShowCrosshair());}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static String decode(String encodedValue,final String encoding){  try {    if (encodedValue != null) {      String previousEncodedValue;      do {        previousEncodedValue=encodedValue;        encodedValue=URLDecoder.decode(encodedValue,encoding);      } while (!encodedValue.equals(previousEncodedValue));    }    return encodedValue;  } catch (  UnsupportedEncodingException ignore) {    return encodedValue;  }}  }
class C{  public EqualsMethodAsserter method(String name,Object... values){  Class<?> parameterTypes[]=new Class<?>[values.length];  for (int i=0; i < values.length; i++) {    parameterTypes[i]=values[i].getClass();  }  return method(name,parameterTypes,values);}  }
class C{  void showSettings(){  if (setdlg == null) {    setdlg=new CommonSettingsDialog(frame);  }  setdlg.setVisible(true);}  }
class C{  public B missing(Object missingValue){  this.missing=missingValue;  return (B)this;}  }
class C{  public static void showInfoMsg(final Object... messages){  Sound.beepOnInfo();  JOptionPane.showMessageDialog(LEnv.CURRENT_GUI_FRAME.get(),messages,"Info",JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public static BigInteger createBigInteger(String val){  BigInteger bi=new BigInteger(val);  return bi;}  }
class C{  @Deprecated public Object callReadResolve(final Object result){  return serializationMembers.callReadResolve(result);}  }
class C{  public UploadResultWindow(final List<UploadStatus> uploadResultList,final I18N i18n){  this.uploadResultList=uploadResultList;  this.i18n=i18n;  eventBus=SpringContextHelper.getBean(EventBus.SessionEventBus.class);  createComponents();  createLayout();}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public ParserString subCFMLString(int start){  return subCFMLString(start,text.length - start);}  }
class C{  public void padWithLen(byte[] in,int off,int len) throws ShortBufferException {  if (in == null)   return;  if ((off + len) > in.length) {    throw new ShortBufferException("Buffer too small to hold padding");  }  byte paddingOctet=(byte)(len & 0xff);  for (int i=0; i < len; i++) {    in[i + off]=paddingOctet;  }  return;}  }
class C{  public SVGImageElementBridge(){}  }
class C{  public static TriggerDefinition toTriggerDefinition(VOTriggerDefinition vo) throws ValidationException {  final TriggerDefinition domObj=new TriggerDefinition();  copyAttributes(domObj,vo);  return domObj;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.SERVICE_REF__NAME:    setName((String)newValue);  return;case EipPackage.SERVICE_REF__REFERENCE:setReference(newValue);return;case EipPackage.SERVICE_REF__OPERATIONS:getOperations().clear();getOperations().addAll((Collection<? extends String>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public ActorMessageTypeInvalidException(String error){  super(error);}  }
class C{  void onDropChild(View child){  if (child != null) {    LayoutParams lp=(LayoutParams)child.getLayoutParams();    lp.dropped=true;    child.requestLayout();  }}  }
class C{  protected static void parseContentTypeParams(ByteArrayInputStream pduDataStream,HashMap<Integer,Object> map,Integer length){  assert (null != pduDataStream);  assert (length > 0);  int startPos=pduDataStream.available();  int tempPos=0;  int lastLen=length;  while (0 < lastLen) {    int param=pduDataStream.read();    assert (-1 != param);    lastLen--;switch (param) {case PduPart.P_TYPE:case PduPart.P_CT_MR_TYPE:      pduDataStream.mark(1);    int first=extractByteValue(pduDataStream);  pduDataStream.reset();if (first > TEXT_MAX) {  int index=parseShortInteger(pduDataStream);  if (index < PduContentTypes.contentTypes.length) {    byte[] type=(PduContentTypes.contentTypes[index]).getBytes();    map.put(PduPart.P_TYPE,type);  } else {  }} else {  byte[] type=parseWapString(pduDataStream,TYPE_TEXT_STRING);  if ((null != type) && (null != map)) {    map.put(PduPart.P_TYPE,type);  }}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_START:case PduPart.P_DEP_START:byte[] start=parseWapString(pduDataStream,TYPE_TEXT_STRING);if ((null != start) && (null != map)) {map.put(PduPart.P_START,start);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_CHARSET:pduDataStream.mark(1);int firstValue=extractByteValue(pduDataStream);pduDataStream.reset();if (((firstValue > TEXT_MIN) && (firstValue < TEXT_MAX)) || (END_STRING_FLAG == firstValue)) {byte[] charsetStr=parseWapString(pduDataStream,TYPE_TEXT_STRING);try {int charsetInt=CharacterSets.getMibEnumValue(new String(charsetStr));map.put(PduPart.P_CHARSET,charsetInt);} catch (UnsupportedEncodingException e) {Log.e(LOG_TAG,Arrays.toString(charsetStr),e);map.put(PduPart.P_CHARSET,CharacterSets.ANY_CHARSET);}} else {int charset=(int)parseIntegerValue(pduDataStream);if (map != null) {map.put(PduPart.P_CHARSET,charset);}}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_DEP_NAME:case PduPart.P_NAME:byte[] name=parseWapString(pduDataStream,TYPE_TEXT_STRING);if ((null != name) && (null != map)) {map.put(PduPart.P_NAME,name);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;default :if (LOCAL_LOGV) {Log.v(LOG_TAG,"Not supported Content-Type parameter");}if (-1 == skipWapValue(pduDataStream,lastLen)) {Log.e(LOG_TAG,"Corrupt Content-Type");} else {lastLen=0;}break;}}if (0 != lastLen) {Log.e(LOG_TAG,"Corrupt Content-Type");}}  }
class C{  public NPCEmoteAction(String npcAction){  this.npcAction=npcAction.trim();}  }
class C{  public static <T>T byte2Obj(byte[] bytes,org.codehaus.jackson.type.TypeReference<T> typeReference){  if (bytes == null || typeReference == null) {    return null;  }  try {    return (T)(typeReference.getType().equals(byte[].class) ? bytes : objectMapper.readValue(bytes,typeReference));  } catch (  Exception e) {    log.info("parse byte[] to Object error, byte[]:{}, TypeReference<T>:{}, error:{}",bytes,typeReference.getType(),e);    return null;  }}  }
class C{  public void scrollToFinishActivity(){  final int childWidth=mContentView.getWidth();  int left=0, top=0;  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;  mDragHelper.smoothSlideViewTo(mContentView,left,top);  invalidate();}  }
class C{  public void ReInit(JavaCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  protected void sequence_TAnonymousFormalParameter(ISerializationContext context,TAnonymousFormalParameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void addContentView(View newContentView){  contentLayout.addView(newContentView);  contentLayout.invalidate();}  }
class C{  public static boolean addCompressionRecipe(ItemStack aInput,ItemStack aOutput){  aOutput=GT_OreDictUnificator.get(true,aOutput);  if (aInput == null || aOutput == null)   return false;  GT_Utility.removeSimpleIC2MachineRecipe(aInput,getCompressorRecipeList(),null);  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.compression,aInput,true))   return false;  GT_Utility.addSimpleIC2MachineRecipe(aInput,getCompressorRecipeList(),null,aOutput);  return true;}  }
class C{  public SnapshotId(String repository,String snapshot){  this.repository=repository;  this.snapshot=snapshot;  this.hashCode=computeHashCode();}  }
class C{  public ModuleAction(final ConfAction jsubaction){  super(jsubaction);}  }
class C{  public ConditionalRouteTest(String name){  super(name);}  }
class C{  public SyntheticMethodBinding(SourceTypeBinding declaringEnum,int startIndex,int endIndex){  this.declaringClass=declaringEnum;  SyntheticMethodBinding[] knownAccessMethods=declaringEnum.syntheticMethods();  this.index=knownAccessMethods == null ? 0 : knownAccessMethods.length;  StringBuffer buffer=new StringBuffer();  buffer.append(TypeConstants.SYNTHETIC_ENUM_CONSTANT_INITIALIZATION_METHOD_PREFIX).append(this.index);  this.selector=String.valueOf(buffer).toCharArray();  this.modifiers=ClassFileConstants.AccPrivate | ClassFileConstants.AccStatic;  this.tagBits|=(TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);  this.purpose=SyntheticMethodBinding.TooManyEnumsConstants;  this.thrownExceptions=Binding.NO_EXCEPTIONS;  this.returnType=TypeBinding.VOID;  this.parameters=Binding.NO_PARAMETERS;  this.startIndex=startIndex;  this.endIndex=endIndex;}  }
class C{  static int indexOf(final CharSequence cs,final CharSequence searchChar,final int start){  return cs.toString().indexOf(searchChar.toString(),start);}  }
class C{  private void calculateMaxValue(int seriesCount,int catCount){  double v;  Number nV;  for (int seriesIndex=0; seriesIndex < seriesCount; seriesIndex++) {    for (int catIndex=0; catIndex < catCount; catIndex++) {      nV=getPlotValue(seriesIndex,catIndex);      if (nV != null) {        v=nV.doubleValue();        if (v > this.maxValue) {          this.maxValue=v;        }      }    }  }}  }
class C{  void callbackToActivity(String clientHandle,Status status,Bundle dataBundle){  Intent callbackIntent=new Intent(MqttServiceConstants.CALLBACK_TO_ACTIVITY);  if (clientHandle != null) {    callbackIntent.putExtra(MqttServiceConstants.CALLBACK_CLIENT_HANDLE,clientHandle);  }  callbackIntent.putExtra(MqttServiceConstants.CALLBACK_STATUS,status);  if (dataBundle != null) {    callbackIntent.putExtras(dataBundle);  }  sendBroadcast(callbackIntent);}  }
class C{  public boolean isMarkedForRemoval(){  return markedForRemoval;}  }
class C{  public ServiceCall<Void> deleteCorpus(String customizationId,String corpusName){  Validator.notNull(customizationId,"customizationId cannot be null");  Validator.notNull(corpusName,"corpusName cannot be null");  RequestBuilder requestBuilder=RequestBuilder.delete(String.format(PATH_CORPUS,customizationId,corpusName));  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getVoid());}  }
class C{  public Supplier<Pair<Integer,JsonNode>> handleDelete(StateContext state) throws HttpStatusException {  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  static String encodeEntities(String source){  StringBuffer buffer=new StringBuffer();  String encoded;  for (int index=0; index < source.length(); index++) {    char ch=source.charAt(index);    if ((encoded=encodeEntity(ch)) != null) {      buffer.append(encoded);    } else {      buffer.append(ch);    }  }  return buffer.toString();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  private void cmd_query(){  boolean reports=reportField.isChecked();  ListItem listitem=processField.getSelectedItem();  KeyNamePair process=null;  if (listitem != null)   process=(KeyNamePair)listitem.getValue();  listitem=tableField.getSelectedItem();  KeyNamePair table=null;  if (listitem != null)   table=(KeyNamePair)listitem.getValue();  Integer C_BPartner_ID=(Integer)bPartnerField.getValue();  String name=nameQField.getText();  String description=descriptionQField.getText();  String help=helpQField.getText();  listitem=createdByQField.getSelectedItem();  KeyNamePair createdBy=null;  if (listitem != null)   createdBy=(KeyNamePair)listitem.getValue();  Date date=null;  Timestamp createdFrom=null;  if (createdQFrom.getValue() != null) {    date=createdQFrom.getValue();    createdFrom=new Timestamp(date.getTime());  }  Timestamp createdTo=null;  if (createdQTo.getValue() != null) {    date=createdQTo.getValue();    createdTo=new Timestamp(date.getTime());  }  cmd_query(reports,process,table,C_BPartner_ID,name,description,help,createdBy,createdFrom,createdTo);  tabbox.setSelectedIndex(1);  m_index=1;  updateVDisplay(false);}  }
class C{  public static String buildClusterCgName(String clusterName,String cgName){  return String.format("%s" + SPLITTER + "%s",clusterName,cgName);}  }
class C{  protected void loadThisOrOwner(){  if (isInnerClass()) {    visitFieldExpression(new FieldExpression(controller.getClassNode().getDeclaredField("owner")));  } else {    loadThis(null);  }}  }
class C{  protected void sequence_Wildcard_WildcardNewNotation(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void info(String msg){  if (logLevel.intValue() <= Level.INFO.intValue()) {    println(Level.INFO,msg);  }}  }
class C{  boolean addModule(@Nonnull String moduleName){  verifyIsRoot();  if (children.containsKey(moduleName)) {    children.get(moduleName).resetHierarchy();    return false;  } else {    CounterNode newNode=new CounterNode(ImmutableList.of(moduleName),null);    children.put(moduleName,newNode);    return true;  }}  }
class C{  public void testDragOutOfTouchable(){  View outsideView=getViewByTestId("E");  View innerButton=getViewByTestId("A");  SingleTouchGestureGenerator gestureGenerator=createGestureGenerator();  gestureGenerator.startGesture(innerButton);  waitForBridgeAndUIIdle();  gestureGenerator.dragTo(outsideView,15).endGesture();  waitForBridgeAndUIIdle();  assertTrue(mRecordingModule.getCalls().isEmpty());}  }
class C{  private void updateGwt27On(IJavaProject javaProject,List<String> programArgs,int indexDisabled,int indexEnabled,boolean superDevModeEnabled){  if (indexEnabled > -1) {    programArgs.remove(indexEnabled);  }  if (indexDisabled > -1) {    programArgs.remove(indexDisabled);  }  if (!superDevModeEnabled) {    programArgs.add(0,SUPERDEVMODE_DISABLED_ARG);  }}  }
class C{  public double compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  @ZeppelinApi public Object angular(String name){  AngularObject ao=getAngularObject(name,interpreterContext);  if (ao == null) {    return null;  } else {    return ao.get();  }}  }
class C{  public QueueReader<E> reader(){  return new QueueReader<E>((E[])q,index);}  }
class C{  public synchronized boolean performJoin(OsmElement element,Node nodeToJoin) throws OsmIllegalOperationException {  boolean mergeOK=true;  if (element instanceof Node) {    Node node=(Node)element;    createCheckpoint(R.string.undo_action_join);    mergeOK=getDelegator().mergeNodes(node,nodeToJoin);    map.invalidate();  } else   if (element instanceof Way) {    Way way=(Way)element;    List<Node> wayNodes=way.getNodes();    for (int i=1, wayNodesSize=wayNodes.size(); i < wayNodesSize; ++i) {      Node node1=wayNodes.get(i - 1);      Node node2=wayNodes.get(i);      float x=lonE7ToX(nodeToJoin.getLon());      float y=latE7ToY(nodeToJoin.getLat());      float node1X=lonE7ToX(node1.getLon());      float node1Y=latE7ToY(node1.getLat());      float node2X=lonE7ToX(node2.getLon());      float node2Y=latE7ToY(node2.getLat());      if (isPositionOnLine(x,y,node1X,node1Y,node2X,node2Y)) {        float[] p=GeoMath.closestPoint(x,y,node1X,node1Y,node2X,node2Y);        int lat=yToLatE7(p[1]);        int lon=xToLonE7(p[0]);        createCheckpoint(R.string.undo_action_join);        Node node=null;        if (node == null && lat == node1.getLat() && lon == node1.getLon()) {          node=node1;        }        if (node == null && lat == node2.getLat() && lon == node2.getLon()) {          node=node2;        }        if (node == null) {          getDelegator().updateLatLon(nodeToJoin,lat,lon);          getDelegator().addNodeToWayAfter(node1,nodeToJoin,way);        } else {          mergeOK=getDelegator().mergeNodes(node,nodeToJoin);        }        map.invalidate();        break;      }    }  }  return mergeOK;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  protected Compression(int value){  super(value);}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent ae){  String cmd=ae.getActionCommand();  server=serverAddrField.getText();  port=serverPortField.getText();  if (cmd == GetViewsCmd) {    connectedStatus.setText(STATUS_CONNECTING);    viewList=getViews();    if (viewList == null) {      Debug.message("netmap","Can't get view list from " + server + ":"+ port);      disconnect();    }  } else   if (cmd == ServerDisconnectCmd) {    Debug.message("netmap","Disconnecting from server " + server + ":"+ port);    disconnect();  } else   if (cmd == LoadViewCmd) {    ChoiceItem ci=viewList.get(viewChoice.getSelectedItem());    if (ci == null) {      disconnect();      return;    }    String view=((String)ci.value()).trim();    Debug.message("netmap","Loading view " + view);    connect(view);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static synchronized String nextID(){  return prefix + Long.toString(id++);}  }
class C{  public static double[][] minus(double[][] v1,double v2){  double[][] array=new double[v1.length][v1[0].length];  for (int i=0; i < v1.length; i++)   for (int j=0; j < v1[0].length; j++)   array[i][j]=v1[i][j] - v2;  return array;}  }
class C{  protected void processFailure(BaseStunMessageEvent event){  String receivedResponse;  if (event instanceof StunFailureEvent)   receivedResponse="unreachable"; else   if (event instanceof StunTimeoutEvent)   receivedResponse="timeout"; else   receivedResponse="failure";  receivedResponses.add(receivedResponse);}  }
class C{  public boolean isOngoing(){  return isOngoingStorage.get();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public final short readShort() throws IOException {  dis.readFully(work,0,2);  return (short)((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  public static void add(List<String> options,char option,int value){  add(options,"" + option,value);}  }
class C{  private static void pixel(double x,double y){  offscreen.fillRect((int)Math.round(scaleX(x)),(int)Math.round(scaleY(y)),1,1);}  }
class C{  private static double distanceSq(Color a,Color b){  double rMean=(a.getRed() + b.getRed()) / 256.0 / 2.0;  double dr=(a.getRed() - b.getRed()) / 256.0;  double dg=(a.getGreen() - b.getGreen()) / 256.0;  double db=(a.getBlue() - b.getBlue()) / 256.0;  double d=(2.0 + rMean) * dr * dr + 4.0 * dg * dg + (2.0 + 1.0 - rMean) * db * db;  return d / 9.0;}  }
class C{  public E removeFirst(){  if (head == null) {    throw new NoSuchElementException("Nothing in List");  }  E value=head.value;  head=head.next;  if (head != null) {    head.prev=null;  } else {    last=null;  }  size--;  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.615 -0500",hash_original_method="713B19D560033B1B50E26BAD17DD5FF2",hash_generated_method="A5AC41D84F7549396CE8AAD5A06BF8E9") protected void releaseManagedConnection() throws IOException {  if (managedConn != null) {    try {      managedConn.releaseConnection();    }  finally {      managedConn=null;    }  }}  }
class C{  public void test_getLjava_lang_ObjectI(){  int[] x={1};  Object ret=null;  boolean thrown=false;  try {    ret=Array.get(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,((Integer)ret).intValue());  try {    ret=Array.get(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.get(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  Integer[] y=new Integer[]{1};  ret=null;  thrown=false;  try {    ret=Array.get(y,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,((Integer)ret).intValue());  try {    ret=Array.get(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.get(y,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }}  }
class C{  private synchronized void updateOrResetReqPerMinPerHrLstDay(float incr,boolean reset){  updateOrResetSampledValues(incr,reset,_reqPerMinHrDay);}  }
class C{  private void convert(Problem problem,boolean reduced,ResultFileReader reader,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  while (reader.hasNext()) {    ResultEntry entry=reader.next();    Population population=entry.getPopulation();    Properties properties=entry.getProperties();    if (population.isEmpty()) {      continue;    }    if (properties.containsKey("NFE")) {      writer.print(properties.getProperty("NFE"));    } else {      writer.print("0");    }    writer.print(" ");    if (properties.containsKey("ElapsedTime")) {      writer.println(properties.getProperty("ElapsedTime"));    } else {      writer.println("0");    }    writer.println("#");    for (    Solution solution : population) {      for (int i=0; i < numberOfVariables; i++) {        if (i > 0) {          writer.print(" ");        }        writer.print(solution.getVariable(i));      }      for (int i=0; i < numberOfObjectives; i++) {        if ((i > 0) || (numberOfVariables > 0)) {          writer.print(" ");        }        writer.print(solution.getObjective(i));      }      writer.println();    }    writer.println("#");  }}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  public IndexedImage(int width,int height,int[] palette,byte[] data){  super(null);  this.width=width;  this.height=height;  this.palette=palette;  this.imageDataByte=data;  initOpaque();}  }
class C{  @Override public void onSlotRemoved(final RPObject object,final String slotName,final RPObject sobject){}  }
class C{  private ContextHandler createContextHandler(String directory,boolean isInJar,File installRootDirectory,int expiresInSeconds){  final ContextHandler contextHandler=new ContextHandler();  final ResourceHandler resourceHandler=new ExpiresResourceHandler(expiresInSeconds);  final String directoryWithSlash="/" + directory;  contextHandler.setContextPath(directoryWithSlash);  Resource directoryResource=getDirectoryResource(directory,isInJar,installRootDirectory);  directoryResource=new JsMinifyingResource(directoryResource);  if (isInJar) {    directoryResource=new CachingResource(directoryResource,directoryWithSlash);  }  resourceHandler.setBaseResource(directoryResource);  if (!isInJar) {    resourceHandler.setMinMemoryMappedContentLength(0);  }  contextHandler.setHandler(resourceHandler);  return contextHandler;}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.FIELD_ACCESSOR__DECLARED_THIS_TYPE:    return basicSetDeclaredThisType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void put(String name,boolean value){  emulatedFields.put(name,value);}  }
class C{  public boolean isStrict(){  return strict;}  }
class C{  protected void sequence_ModuleFilterSpecifier(ISerializationContext context,ModuleFilterSpecifier semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public final static boolean isNonSeparator(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == WILD || c == WAIT || c == PAUSE;}  }
class C{  public static void preloadDataModel(){  getMapOfLanguagesById();  getListOfCustomColumnTypes();  getMapOfEBookFilesByBookId();  getMapOfAuthorsByBookId();  getMapOfTagsByBookId();  getMapOfSeriesByBookId();  getMapOfCommentsByBookId();  getListOfTags();  getListOfAuthors();  getListOfSeries();  getListOfBooks();  getMapOfBooks();  getMapOfTags();  getMapOfAuthors();  getMapOfSeries();  generateImplicitLanguageTags();  getMapOfBooksByTag();  getMapOfBooksByAuthor();  getMapOfBooksBySeries();  getMapOfBooksByRating();}  }
class C{  protected void prepareDocument(Document doc){  removeScriptsAndStyles(doc);}  }
class C{  public ChannelFuture bind(SocketAddress address){  return bootstrap.bind(address);}  }
class C{  public String invertSelectionTipText(){  return "Set attribute selection mode. If false, only selected" + " (numeric) attributes in the range will be discretized; if" + " true, only non-selected attributes will be discretized.";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void clearRequestBody(){  LOG.trace("enter EntityEnclosingMethod.clearRequestBody()");  requestStream=null;  requestString=null;  requestEntity=null;}  }
class C{  public byte[] toByteArray(){  int size=24 + 2 * interfaceCount;  if (fields != null) {    size+=fields.length;  }  int nbMethods=0;  CodeWriter cb=firstMethod;  while (cb != null) {    ++nbMethods;    size+=cb.getSize();    cb=cb.next;  }  size+=pool.length;  int attributeCount=0;  if (sourceFile != null) {    ++attributeCount;    size+=8;  }  if ((access & Constants.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;  }  ByteVector out=new ByteVector(size);  out.put4(0xCAFEBABE).put2(3).put2(45);  out.put2(index).putByteArray(pool.data,0,pool.length);  out.put2(access).put2(name).put2(superName);  out.put2(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.put2(interfaces[i]);  }  out.put2(fieldCount);  if (fields != null) {    out.putByteArray(fields.data,0,fields.length);  }  out.put2(nbMethods);  cb=firstMethod;  while (cb != null) {    cb.put(out);    cb=cb.next;  }  out.put2(attributeCount);  if (sourceFile != null) {    out.put2(newUTF8("SourceFile").index).put4(2).put2(sourceFile.index);  }  if ((access & Constants.ACC_DEPRECATED) != 0) {    out.put2(newUTF8("Deprecated").index).put4(0);  }  if (innerClasses != null) {    out.put2(newUTF8("InnerClasses").index);    out.put4(innerClasses.length + 2).put2(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  return out.data;}  }
class C{  public void dumpOptions(){  logger.info("");  for (  Method getter : GetConfigurationInterface.class.getMethods()) {    String getterName=getter.getName();    try {      Object result=getter.invoke(ConfigurationManager.getCurrentProfile());      if (result instanceof Boolean) {        result=LocalizationHelper.getYesOrNo((Boolean)result);      }      if (result instanceof List) {        for (int i=0; i < ((List)result).size(); i++) {          assert ((List)result).get(i) instanceof CustomCatalogEntry;          CustomCatalogEntry c=((List<CustomCatalogEntry>)result).get(i);          String OptionName=Helper.pad(Localization.Main.getText("gui.tab6.label") + " [" + (i + 1)+ "], "+ c.getAtTop().toString(),' ',50) + " : ";          logger.info(OptionName + c.getLabel() + " ("+ c.getValue().toString()+ "), "+ c.getAtTop().toString());        }      } else {        String optionName=getterName.substring(3);        dumpOption(optionName,result);      }    } catch (    IllegalAccessException e) {      logger.warn("",e);    }catch (    InvocationTargetException e) {      logger.warn("",e);    }  }  logger.info("");}  }
class C{  @Override public void rescan(){  restart();}  }
class C{  private void updateYFieldValue(){  if (mousePosition != null) {    Rectangle2D plotArea=engine.getChartPanel().getScreenDataArea();    if (engine.getChartPanel().getChart().getPlot() instanceof XYPlot) {      XYPlot plot=(XYPlot)engine.getChartPanel().getChart().getPlot();      for (int i=0; i < plot.getRangeAxisCount(); i++) {        ValueAxis config=plot.getRangeAxis(i);        if (config != null && config.getLabel() != null) {          if (config.getLabel().equals(String.valueOf(rangeAxisSelectionCombobox.getSelectedItem()))) {            double chartY=config.java2DToValue(mousePosition.getY(),plotArea,plot.getRangeAxisEdge());            yField.setText(String.valueOf(chartY));          }        }      }    }  }}  }
class C{  public ServerProxy(InternalPool pool){  this.pool=pool;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  } else {    Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(bitmap);    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());    drawable.draw(canvas);    return bitmap;  }}  }
class C{  public boolean isDescription(){  Object oo=get_Value(COLUMNNAME_IsDescription);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Integer toInteger(int val){  if (val >= 0 && val < cachedInts.length)   return (cachedInts[val]);  return new Integer(val);}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  protected void appendContentEnd(StringBuffer buffer){  buffer.append(contentEnd);}  }
class C{  public static SubscriptionStillActiveException convertToApi(org.oscm.internal.types.exception.SubscriptionStillActiveException oldEx){  return convertExceptionToApi(oldEx,SubscriptionStillActiveException.class);}  }
class C{  public void drawTile(VPFGraphicWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2){  try {    for (List<Object> area=new ArrayList<Object>(getColumnCount()); parseRow(area); ) {      warehouse.createArea(covtable,this,area,ll1,ll2,dpplat,dpplon);    }  } catch (  FormatException f) {    System.out.println("Exception: " + f.getClass() + " "+ f.getMessage());  }}  }
class C{  public void schedule(TimerTask task,long delay){  if (delay < 0) {    throw new IllegalArgumentException("delay < 0: " + delay);  }  scheduleImpl(task,delay,-1,false);}  }
class C{  @Override public String globalInfo(){  return "Multi-Target Version of BaggingML\n" + "It takes votes using the confidence outputs of the base classifier.";}  }
class C{  public boolean isMissingAt(int rowIndex,int columnIndex){  return ((DataTableModel)getModel()).isMissingAt(mIndices[rowIndex],columnIndex);}  }
class C{  public final void run(final Population population,final ReplanningContext replanningContext){  beforePopulationRunHook(population,replanningContext);  delegate.run(population.getPersons().values(),population.getPersonAttributes(),replanningContext);  afterRunHook(population);}  }
class C{  @Override public void execute() throws BuildException {  Java7Checker.check();  ModuleDescriptorReader reader;  try {    CeylonClassLoader loader=Util.getCeylonClassLoaderCachedInProject(getProject());    try {      reader=new ModuleDescriptorReader(loader,module.getName(),getSrc());    } catch (    NoSuchModuleException e) {      throw new BuildException("Failed to load module",e);    }  } catch (  ClassLoaderSetupException x) {    throw new BuildException("Failed to set up Ceylon class loader",x);  }  if (versionProperty != null) {    setProjectProperty(versionProperty,reader.getModuleVersion());  }  if (nameProperty != null) {    setProjectProperty(nameProperty,reader.getModuleName());  }  if (licenseProperty != null) {    setProjectProperty(licenseProperty,reader.getModuleLicense());  }}  }
class C{  public static int value(String s){  return services.getValue(s);}  }
class C{  public SimpleOrderedMap(){  super();}  }
class C{  protected int engineGetBlockSize(){  return DESConstants.DES_BLOCK_SIZE;}  }
class C{  public boolean isCommited(){  return commited;}  }
class C{  public com.linkedin.camus.example.records.DummyLog.Builder clearMuchoStuff(){  muchoStuff=null;  fieldSetFlags()[2]=false;  return this;}  }
class C{  public static String hashData(final String data) throws CryptoException {  try {    final MessageDigest md=MessageDigest.getInstance("SHA-256","BC");    md.update(data.getBytes("UTF-8"));    return new BigInteger(md.digest()).toString(16);  } catch (  final Exception e) {    throw new CryptoException(e.getMessage(),e);  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.323 -0500",hash_original_method="41EBA2EAF373C2E18FF1DC39DB5B0A24",hash_generated_method="4BC37B5677B6027DE42CCB7478AA9851") public void startElement(String qName,AttributeList qAtts) throws SAXException {  ArrayList<SAXParseException> exceptions=null;  if (!namespaces) {    if (contentHandler != null) {      attAdapter.setAttributeList(qAtts);      contentHandler.startElement("","",qName.intern(),attAdapter);    }    return;  }  nsSupport.pushContext();  int length=qAtts.getLength();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    if (!attQName.startsWith("xmlns"))     continue;    String prefix;    int n=attQName.indexOf(':');    if (n == -1 && attQName.length() == 5) {      prefix="";    } else     if (n != 5) {      continue;    } else     prefix=attQName.substring(n + 1);    String value=qAtts.getValue(i);    if (!nsSupport.declarePrefix(prefix,value)) {      reportError("Illegal Namespace prefix: " + prefix);      continue;    }    if (contentHandler != null)     contentHandler.startPrefixMapping(prefix,value);  }  atts.clear();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    String type=qAtts.getType(i);    String value=qAtts.getValue(i);    if (attQName.startsWith("xmlns")) {      String prefix;      int n=attQName.indexOf(':');      if (n == -1 && attQName.length() == 5) {        prefix="";      } else       if (n != 5) {        prefix=null;      } else {        prefix=attQName.substring(6);      }      if (prefix != null) {        if (prefixes) {          if (uris)           atts.addAttribute(nsSupport.XMLNS,prefix,attQName.intern(),type,value); else           atts.addAttribute("","",attQName.intern(),type,value);        }        continue;      }    }    try {      String attName[]=processName(attQName,true,true);      atts.addAttribute(attName[0],attName[1],attName[2],type,value);    } catch (    SAXException e) {      if (exceptions == null) {        exceptions=new ArrayList<SAXParseException>();      }      exceptions.add((SAXParseException)e);      atts.addAttribute("",attQName,attQName,type,value);    }  }  if (exceptions != null && errorHandler != null) {    for (    SAXParseException ex : exceptions) {      errorHandler.error(ex);    }  }  if (contentHandler != null) {    String name[]=processName(qName,false,false);    contentHandler.startElement(name[0],name[1],name[2],atts);  }}  }
class C{  public Remote create(BenchServer.RemoteObjectFactory factory) throws RemoteException {  Remote impl=factory.create();  implTable.put(RemoteObject.toStub(impl),new WeakReference(impl));  return impl;}  }
class C{  public static void runtimeAssert(boolean condition,String message){  if (REPLACEMENTS_ASSERTIONS_ENABLED) {    AssertionNode.assertion(false,condition,message);  }}  }
class C{  private static ViewDocument loadViewDocument(IFile viewFile) throws IOException {  ObjectXmlPersist persist=new ObjectXmlPersist(XStreamFactory.getSharedRefXStream());  return (ViewDocument)persist.load(viewFile.getRawLocationURI());}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  Instances trainingSet=e.getTrainingSet();  DataSetEvent dse=new DataSetEvent(this,trainingSet);  acceptDataSet(dse);}  }
class C{  public T caseS_Var(S_Var object){  return null;}  }
class C{  public void showPopup(){  if (popup == null && entryList.getModel().getSize() > 0) {    if (isShowing()) {      Point origin=getLocationOnScreen();      PopupFactory pf=PopupFactory.getSharedInstance();      Component parent=this;      if (OSUtils.isMacOSX()) {        parent=new JPanel();        new MyPopup(this,parent,0,0);      }      popup=pf.getPopup(parent,getPopupComponent(),origin.x,origin.y + getHeight() + 1);      showPending=false;      popup.show();    } else {      showPending=true;    }  }}  }
class C{  private void updateTableVisibility(){  if (extrasTable.getRowCount() > 0) {    if (!extrasRootLayout.isVisible()) {      extrasRootLayout.setVisible(true);      extrasRootLayout.getParent().invalidate();      extrasRootLayout.getParent().validate();      extrasRootLayout.getParent().repaint();    }  } else {    if (extrasRootLayout.isVisible()) {      extrasRootLayout.setVisible(false);      extrasRootLayout.getParent().invalidate();      extrasRootLayout.getParent().validate();      extrasRootLayout.getParent().repaint();    }  }}  }
class C{  boolean hasNextSFeature(){  return (sFeatureIdx < sFeatures.size());}  }
class C{  public String globalInfo(){  return "Outputs the predictions in HTML.";}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isEmpty(){  return filteredClasses == null || filteredClasses.isEmpty();}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException("Warning: can't output text before document element!  Ignoring...");      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        throw new org.xml.sax.SAXException("Can't have more than one root on a DOM!");      }    }    if (ok)     m_doc.appendChild(newNode);  }}  }
class C{  @SuppressWarnings("UnusedDeclaration") public Drawable createDrawable(int color,Rect bounds){  Drawable drawable=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{color,color}).mutate();  if (color == Color.TRANSPARENT) {    drawable.setAlpha(0);  }  drawable.setBounds(bounds);  return drawable;}  }
class C{  public DoubleListParameter(OptionID optionID,boolean optional){  super(optionID,optional);}  }
class C{  private void releaseIO(){  if (mBufferedReader != null) {    try {      mBufferedReader.close();    } catch (    IOException e) {      e.printStackTrace();    }    mBufferedReader=null;  }}  }
class C{  public static boolean isTransient(int mod){  return (mod & TRANSIENT) != 0;}  }
class C{  public static GenericSqliteHelper openCopy(String dbFile){  File fs=new File(dbFile);  dbFile=fs.getAbsolutePath();  if (!(Path.unprotect(dbFile,4,false) && fs.exists() && fs.canRead())) {    if (Cfg.DEBUG) {      Check.log(TAG + " (openCopy) ERROR: no suitable db file");    }    return null;  }  String localFile=Path.markup() + fs.getName();  try {    Utils.copy(new File(dbFile),new File(localFile));  } catch (  IOException e) {    return null;  }  return new GenericSqliteHelper(localFile,true);}  }
class C{  public static Complex multiply(Complex sample1,Complex sample2){  float inphase=multiplyInphase(sample1.inphase(),sample1.quadrature(),sample2.inphase(),sample2.quadrature());  float quadrature=multiplyQuadrature(sample1.inphase(),sample1.quadrature(),sample2.inphase(),sample2.quadrature());  return new Complex(inphase,quadrature);}  }
class C{  public static String clean(String str){  return (str == null ? "" : str.trim());}  }
class C{  @SuppressWarnings("rawtypes") private static void unpack(String jarFile,File destDir) throws IOException {  byte[] buffer=new byte[1024 * 1024];  int length;  destDir.mkdirs();  JarFile jar=new JarFile(jarFile);  Enumeration enumeration=jar.entries();  while (enumeration.hasMoreElements()) {    InputStream is=null;    FileOutputStream os=null;    JarEntry jarEntry=(JarEntry)enumeration.nextElement();    File destFile=new File(destDir,jarEntry.getName());    if (jarEntry.isDirectory()) {      destFile.mkdirs();      continue;    } else     if (!destFile.getParentFile().isDirectory()) {      destFile.getParentFile().mkdirs();    }    try {      is=jar.getInputStream(jarEntry);      os=new FileOutputStream(destFile);      while ((length=is.read(buffer)) >= 0) {        os.write(buffer,0,length);      }    }  finally {      if (os != null) {        os.close();      }      if (is != null) {        is.close();      }    }  }}  }
class C{  public VobSubSubtitleHandler(sage.VideoFrame vf,sage.media.format.ContainerFormat inFormat){  super(inFormat);  this.vf=vf;}  }
class C{  public float angle(){  return (float)Math.atan2(y(),x());}  }
class C{  public SorensonVideo(){  this.reset();}  }
class C{  public static String isContinuousCopiesVpool(VirtualPool vpool,DbClient dbClient){  StringBuilder virtualPoolNameBuilder=new StringBuilder();  URIQueryResultList virtualPoolURIs=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualPoolByMirrorVpool(vpool.getId().toString()),virtualPoolURIs);  for (  URI uri : virtualPoolURIs) {    VirtualPool virtualPool=dbClient.queryObject(VirtualPool.class,uri);    if (virtualPool != null && !virtualPool.getInactive()) {      if (virtualPoolNameBuilder.length() == 0) {        virtualPoolNameBuilder.append(virtualPool.getLabel());      } else {        virtualPoolNameBuilder.append(", ").append(virtualPool.getLabel());      }    }  }  return virtualPoolNameBuilder.toString();}  }
class C{  public SubjectInfoAccessExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.SubjectInfoAccess_Id;  this.critical=critical.booleanValue();  if (!(value instanceof byte[])) {    throw new IOException("Illegal argument type");  }  extensionValue=(byte[])value;  DerValue val=new DerValue(extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "SubjectInfoAccessExtension.");  }  accessDescriptions=new ArrayList<AccessDescription>();  while (val.data.available() != 0) {    DerValue seq=val.data.getDerValue();    AccessDescription accessDescription=new AccessDescription(seq);    accessDescriptions.add(accessDescription);  }}  }
class C{  public boolean show_lib_meths(){  return soot.PhaseOptions.getBoolean(options,"show-lib-meths");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.812 -0500",hash_original_method="1ABAE35BE3091AD40FC1FECAC80B863E",hash_generated_method="C52168ADADDB15DD7003C2A37BAF0E3A") public void endDocument() throws SAXException {  if (documentHandler != null)   documentHandler.endDocument();}  }
class C{  void replacePolicyList(JList policyList){  JList list=(JList)getComponent(MW_POLICY_LIST);  list.setModel(policyList.getModel());}  }
class C{  public SimpleConstant(String name,double doubleValue,String annotation,boolean invisible){  this(name,doubleValue,annotation);  this.invisible=invisible;}  }
class C{  public String createShare(IsilonSMBShare smbFileShare,String zoneName) throws IsilonException {  String baseUrl=getURIWithZoneName(_baseUrl.resolve(URI_SMB_SHARES).toString(),zoneName);  URI uri=URI.create(baseUrl);  return create(uri,"share",smbFileShare);}  }
class C{  public synchronized void remove(ComponentName componentName,UserHandleCompat user){  mCache.remove(new ComponentKey(componentName,user));}  }
class C{  public static int floorLog2(double d){  if (d <= 0)   throw new ArithmeticException("Negative number or zero");  long bits=Double.doubleToLongBits(d);  int exp=((int)(bits >> 52)) & 0x7FF;  if (exp == 0x7FF)   throw new ArithmeticException("Infinity or NaN");  if (exp == 0)   return floorLog2(d * 18014398509481984L) - 54;  return exp - 1023;}  }
class C{  public void testEquals(){  byte[] key=new byte[]{1,2,3,4,5};  String algorithm="Algorithm";  SecretKeySpec ks1=new SecretKeySpec(key,algorithm);  SecretKeySpec ks2=new SecretKeySpec(key,algorithm);  SecretKeySpec ks3=new SecretKeySpec(key,algorithm);  assertTrue("The equivalence relation should be reflexive.",ks1.equals(ks1));  assertTrue("Objects built on the same parameters should be equal.",ks1.equals(ks2));  assertTrue("The equivalence relation should be symmetric.",ks2.equals(ks1));  assertTrue("Objects built on the equal parameters should be equal.",ks2.equals(ks3));  assertTrue("The equivalence relation should be transitive.",ks1.equals(ks3));  assertFalse("Should not be equal to null object.",ks1.equals(null));  ks2=new SecretKeySpec(new byte[]{1},algorithm);  assertFalse("Objects should not be equal.",ks1.equals(ks2));  ks2=new SecretKeySpec(key,"Another Algorithm");  assertFalse("Objects should not be equal.",ks1.equals(ks2));}  }
class C{  public static ServerSocketBar openJNI(int fd,int port) throws IOException {  return currentFactory().open(fd,port);}  }
class C{  public final void doubleScaleTransformShear(){  scale(this.Trm1);  if (clip != null) {    final Area final_clip=(Area)clip.clone();    final Area unscaled_clip=getUnscaledClip((Area)clip.clone());    final int segCount=isRectangle(final_clip);    clipImage(unscaled_clip,final_clip,segCount);    i_x=(int)clip.getBounds2D().getMinX();    i_y=(int)clip.getBounds2D().getMinY();    i_w=(int)((clip.getBounds2D().getMaxX()) - i_x);    i_h=(int)((clip.getBounds2D().getMaxY()) - i_y);  } else   if (current_image.getType() == 10) {  } else {    current_image=ColorSpaceConvertor.convertToARGB(current_image);  }}  }
class C{  public static String formatNumber(double value){  logger.debug("----------Input value : " + value);  return String.format("%.2f",value);}  }
class C{  public String buildUnionQuery(String[] subQueries,String sortOrder,String limit){  StringBuilder query=new StringBuilder(128);  int subQueryCount=subQueries.length;  String unionOperator=mDistinct ? " UNION " : " UNION ALL ";  for (int i=0; i < subQueryCount; i++) {    if (i > 0) {      query.append(unionOperator);    }    query.append(subQueries[i]);  }  appendClause(query," ORDER BY ",sortOrder);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public void query(String query){}  }
class C{  public VolumeLists(){  _volumeListsImpl=new VolumeListsImpl();}  }
class C{  final public void shake(Collection<PointMatch> matches,float scale,float[] center){  double xd=0.0;  double yd=0.0;  double rd=0.0;  int num_matches=matches.size();  if (num_matches > 0) {    for (    PointMatch m : matches) {      float[] m_p1=m.getP1().getW();      float[] m_p2=m.getP2().getW();      xd+=Math.abs(m_p1[0] - m_p2[0]);      ;      yd+=Math.abs(m_p1[1] - m_p2[1]);      ;      float x1=m_p1[0] - center[0];      float y1=m_p1[1] - center[1];      float x2=m_p2[0] - center[0];      float y2=m_p2[1] - center[1];      float l1=(float)Math.sqrt(x1 * x1 + y1 * y1);      float l2=(float)Math.sqrt(x2 * x2 + y2 * y2);      x1/=l1;      x2/=l2;      y1/=l1;      y2/=l2;      float cos=x1 * x2 + y1 * y2;      float sin=y1 * x2 - x1 * y2;      rd+=Math.abs(Math.atan2(sin,cos));    }    xd/=matches.size();    yd/=matches.size();    rd/=matches.size();  }  affine.rotate(rnd.nextGaussian() * (float)rd * scale,center[0],center[1]);}  }
class C{  public int hashCode(){  return (int)(this.lat * 1000) + (int)(this.lon * 1000) + (this.geom != null ? this.geom.hashCode() : 0)+ (this.id != null ? this.id.hashCode() : 0)+ this.properties.hashCode();}  }
class C{  public void addQueryExecuteListener(QueryExecuteListener l){  m_QueryExecuteListeners.add(l);}  }
class C{  public TridiagonalDoubleMatrix2D(double[][] values){  this(values.length,values.length == 0 ? 0 : values[0].length);  assign(values);}  }
class C{  public static XMethod createXMethod(String className,Method method){  String methodName=method.getName();  String methodSig=method.getSignature();  int accessFlags=method.getAccessFlags();  return createXMethod(className,methodName,methodSig,accessFlags);}  }
class C{  String readLiteral(String source,int ofs,String token){  return source.substring(ofs,ofs + token.length());}  }
class C{  public ManhattanDistance(){  super();}  }
class C{  public void resetShipBeforeDateIfAfter(Timestamp newShipBeforeDate){  if (newShipBeforeDate != null) {    if ((this.shipBeforeDate == null) || (!this.shipBeforeDate.before(newShipBeforeDate))) {      this.shipBeforeDate=newShipBeforeDate;    }  }}  }
class C{  public static void main(String a[]) throws Throwable {  final String main="LowMemoryTest$TestMain";  RunUtil.runTestKeepGcOpts(main);  RunUtil.runTestClearGcOpts(main,"-XX:+UseSerialGC");  RunUtil.runTestClearGcOpts(main,"-XX:+UseParallelGC");  RunUtil.runTestClearGcOpts(main,"-XX:+UseG1GC");  RunUtil.runTestClearGcOpts(main,"-XX:+UseConcMarkSweepGC");}  }
class C{  public PcRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  protected MultipleDownloadsCompletedReceiver registerNewMultipleDownloadsReceiver(){  MultipleDownloadsCompletedReceiver receiver=new MultipleDownloadsCompletedReceiver();  mContext.registerReceiver(receiver,new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));  return receiver;}  }
class C{  @Override public void apply(IDocument document,ConfigurableCompletionProposal proposal) throws BadLocationException {  final String syntacticReplacementString=proposal.getReplacementString();{    String actualSyntacticReplacementString=getActualReplacementString(proposal);    if (!syntacticReplacementString.equals(actualSyntacticReplacementString)) {      QualifiedName shortQualifiedName=applyValueConverter(actualSyntacticReplacementString);      if (shortQualifiedName.getSegmentCount() == 1) {        simpleApply(document,actualSyntacticReplacementString,proposal);        return;      }    }  }  final QualifiedName qualifiedName=(QualifiedName)proposal.getAdditionalData(KEY_QUALIFIED_NAME);  if (qualifiedName == null) {    super.apply(document,proposal);    return;  }  if (qualifiedName.getSegmentCount() == 1) {    simpleApply(document,syntacticReplacementString,proposal);    return;  }  if (qualifiedName.getSegmentCount() == 2 && N4TSQualifiedNameProvider.GLOBAL_NAMESPACE_SEGMENT.equals(qualifiedName.getFirstSegment())) {    simpleApply(document,syntacticReplacementString,proposal);    return;  }  String alias=null;  boolean isDefaultImport=isDefaultExport(qualifiedName);  String shortQName=lastSegmentOrDefaultHost(qualifiedName);  IEObjectDescription descriptionFullQN=scope.getSingleElement(QualifiedName.create(shortQName));  if (descriptionFullQN instanceof PlainAccessOfNamespacedImportDescription && !isDefaultImport) {    simpleApply(document,((PlainAccessOfNamespacedImportDescription)descriptionFullQN).getNamespacedName(),proposal);    return;  }  if (descriptionFullQN != null) {    IEObjectDescription description=scope.getSingleElement(qualifiedName);    IEObjectDescription existingAliased=findApplicableDescription(description.getEObjectOrProxy(),qualifiedName,false);    if (existingAliased != null) {      simpleApply(document,syntacticReplacementString,proposal);      return;    }    alias="Alias" + shortQName;  }  applyWithImport(qualifiedName,alias,document,proposal);}  }
class C{  private static McfData executeInteractionQuery(Analytics analytics,String tableId) throws IOException {  return analytics.data().mcf().get(tableId,"2012-01-01","2012-03-31","mcf:totalConversions").setDimensions("mcf:source").setSort("-mcf:totalConversions").setFilters("mcf:medium==organic").setMaxResults(25).execute();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.559 -0500",hash_original_method="298BCAB11064A058FB155FBEF5B04212",hash_generated_method="85399CA52B5D349444155F5AF171013D") public boolean isFinalResponse(){  return isFinalResponse(statusLine.getStatusCode());}  }
class C{  private boolean downloadSuccessful(long enqueue){  Query query=new Query();  query.setFilterById(enqueue);  Cursor c=mDownloadManager.query(query);  if (c.moveToFirst()) {    int columnIndex=c.getColumnIndex(DownloadManager.COLUMN_STATUS);    if (DownloadManager.STATUS_SUCCESSFUL == c.getInt(columnIndex)) {      Log.v(LOG_TAG,"Successfully downloaded file!");      return true;    }  }  return false;}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  public StringBuffer insert(int index,boolean b){  return insert(index,b ? "true" : "false");}  }
class C{  protected void prepareNewBatch(String stmt) throws SQLException {  throw new UnsupportedOperationException("Attempt to add to non-existent batch");}  }
class C{  public void addRenderingHints(Map hints){  this.hints.putAll(hints);}  }
class C{  public static <T>void execute(final String pluginName,final IPluginRegistry<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> pluginRegistry){  for (  final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin : pluginRegistry) {    if ((plugin instanceof IBatchPlugin) && plugin.getName().equals(pluginName)) {      try {        ((IBatchPlugin)plugin).run();      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);        return;      }    }  }}  }
class C{  public static void write(float lt,float ln,int offset_x1,int offset_y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {  int[] pixels=new int[image_width * image_height];  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);  pixelgrabber.grabPixels();  LinkRaster.write(lt,ln,offset_x1,offset_y1,image_width,image_height,pixels,properties,dos);}  }
class C{  boolean isMenu(){  return menu;}  }
class C{  protected void calculateStatesStatesPruning(int[] states1,double[] matrices1,int[] states2,double[] matrices2,double[] partials3,int[] matrixMap){  throw new RuntimeException("calculateStatesStatesPruning not implemented using matrixMap");}  }
class C{  private EmrClusterDefinitionInformation createEmrClusterDefinitionFromEntity(EmrClusterDefinitionEntity emrClusterDefinitionEntity) throws Exception {  EmrClusterDefinition emrClusterDefinition=xmlHelper.unmarshallXmlToObject(EmrClusterDefinition.class,emrClusterDefinitionEntity.getConfiguration());  EmrClusterDefinitionInformation emrClusterDefinitionInformation=new EmrClusterDefinitionInformation();  emrClusterDefinitionInformation.setId(emrClusterDefinitionEntity.getId());  emrClusterDefinitionInformation.setEmrClusterDefinitionKey(new EmrClusterDefinitionKey(emrClusterDefinitionEntity.getNamespace().getCode(),emrClusterDefinitionEntity.getName()));  emrClusterDefinitionInformation.setEmrClusterDefinition(emrClusterDefinition);  return emrClusterDefinitionInformation;}  }
class C{  private <T>String generateTestFile(String filename,List<T> elems,SyncBehavior syncBehavior,int syncInterval,AvroCoder<T> coder,String codec) throws IOException {  Random random=new Random(0);  File tmpFile=tmpFolder.newFile(filename);  String path=tmpFile.toString();  FileOutputStream os=new FileOutputStream(tmpFile);  DatumWriter<T> datumWriter=coder.createDatumWriter();  try (DataFileWriter<T> writer=new DataFileWriter<>(datumWriter)){    writer.setCodec(CodecFactory.fromString(codec));    writer.create(coder.getSchema(),os);    int recordIndex=0;    int syncIndex=syncBehavior == SyncBehavior.SYNC_RANDOM ? random.nextInt(syncInterval) : 0;    for (    T elem : elems) {      writer.append(elem);      recordIndex++;switch (syncBehavior) {case SYNC_REGULAR:        if (recordIndex == syncInterval) {          recordIndex=0;          writer.sync();        }      break;case SYNC_RANDOM:    if (recordIndex == syncIndex) {      recordIndex=0;      writer.sync();      syncIndex=random.nextInt(syncInterval);    }  break;case SYNC_DEFAULT:default :}}} return path;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  byte[] iv=generateDerivedKey(IV_MATERIAL,ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),iv,0,ivSize);}  }
class C{  public Object createImplementation(){  return new JavaSEPort();}  }
class C{  public InvalidConfigurationException(){}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public void fireGroupChanged(final NetworkEvent<Group> event,final String changeDescription){  for (  GroupListener listener : groupListeners) {    listener.groupChanged(event,changeDescription);  }}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] trees,int nbatches) throws Exception {  int ncycles=trees.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(trees[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public static Toast makeText(Context context,CharSequence text,int duration){  Toast result=new Toast(context);  LayoutInflater inflate=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View v=inflate.inflate(com.android.internal.R.layout.transient_notification,null);  TextView tv=(TextView)v.findViewById(com.android.internal.R.id.message);  tv.setText(text);  result.mNextView=v;  result.mDuration=duration;  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.626 -0500",hash_original_method="E95F1FE0EF3EE3193ED648BBE2C98991",hash_generated_method="4ECAF7C88D126E501DD7015D1C03A00B") public int describeContents(){  int mask=0;  if (hasFileDescriptors()) {    mask|=Parcelable.CONTENTS_FILE_DESCRIPTOR;  }  return mask;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  NodeList employeeIdList;  Node employeeNode;  Node textNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  child=elementList.item(1);  employeeIdList=child.getChildNodes();  employeeNode=employeeIdList.item(1);  textNode=employeeNode.getFirstChild();  state=textNode.hasChildNodes();  assertFalse("nodeHasChildFalseAssert1",state);}  }
class C{  public int max_inlinee_size(){  return soot.PhaseOptions.getInt(options,"max-inlinee-size");}  }
class C{  public void onEvent(Event e) throws Exception {  if (e.getTarget() == bUp)   setLine(-1,false); else   if (e.getTarget() == bDown)   setLine(+1,false); else   if (e.getTarget() == bNew)   setLine(0,true); else {    if (e.getTarget() == bDelete)     cmd_delete(); else     if (e.getTarget().getId().equals(ConfirmPanel.A_OK)) {      if (!cmd_save())       return;    }    dispose();  }}  }
class C{  private static boolean isAssignableFrom(Type from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from == null) {    return false;  }  if (to.equals(from)) {    return true;  }  Class<?> clazz=$Gson$Types.getRawType(from);  ParameterizedType ptype=null;  if (from instanceof ParameterizedType) {    ptype=(ParameterizedType)from;  }  if (ptype != null) {    Type[] tArgs=ptype.getActualTypeArguments();    TypeVariable<?>[] tParams=clazz.getTypeParameters();    for (int i=0; i < tArgs.length; i++) {      Type arg=tArgs[i];      TypeVariable<?> var=tParams[i];      while (arg instanceof TypeVariable<?>) {        TypeVariable<?> v=(TypeVariable<?>)arg;        arg=typeVarMap.get(v.getName());      }      typeVarMap.put(var.getName(),arg);    }    if (typeEquals(ptype,to,typeVarMap)) {      return true;    }  }  for (  Type itype : clazz.getGenericInterfaces()) {    if (isAssignableFrom(itype,to,new HashMap<String,Type>(typeVarMap))) {      return true;    }  }  Type sType=clazz.getGenericSuperclass();  return isAssignableFrom(sType,to,new HashMap<String,Type>(typeVarMap));}  }
class C{  @Override protected CommandLine createCommandLine(BuilderConfiguration config) throws BuilderException {  final CommandLine commandLine=new CommandLine("grunt");switch (config.getTaskType()) {case DEFAULT:    commandLine.add("build");  break;default :}commandLine.add(config.getOptions());return commandLine;}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  CheckContext newctx=new CheckContext(ctx,this);  Vset vsEntry=vset.copy();  ConditionVars cvars=cond.checkCondition(env,newctx,reach(env,vset),exp);  cond=convert(env,newctx,Type.tBoolean,cond);  vset=body.check(env,newctx,cvars.vsTrue,exp);  vset=vset.join(newctx.vsContinue);  ctx.checkBackBranch(env,this,vsEntry,vset);  vset=newctx.vsBreak.join(cvars.vsFalse);  return ctx.removeAdditionalVars(vset);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public void dispose(){  m_buttonSynchronizer.dispose();}  }
class C{  public void addLocalEventListener(GridLocalEventListener lsnr,int type,@Nullable int... types){  assert lsnr != null;  if (!enterBusy())   return;  try {    getOrCreate(type).add(lsnr);    if (!isRecordable(type))     U.warn(log,"Added listener for disabled event type: " + U.gridEventName(type));    if (types != null) {      for (      int t : types) {        getOrCreate(t).add(lsnr);        if (!isRecordable(t))         U.warn(log,"Added listener for disabled event type: " + U.gridEventName(t));      }    }  }  finally {    leaveBusy();  }}  }
class C{  public Element addAttribute(String attribute_name,Integer attribute_value){  getElementHashEntry().put(attribute_name,attribute_value);  return (this);}  }
class C{  public void testGetGameState() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("f3");  game.processString("e5");  game.processString("g4");  game.processString("Qh4");  assertEquals(Game.GameState.BLACK_MATE,game.getGameState());  game.setPos(TextIO.readFEN("5k2/5P2/5K2/8/8/8/8/8 b - - 0 1"));  assertEquals(Game.GameState.BLACK_STALEMATE,game.getGameState());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementValue;  doc=(Document)load("staff",false);  elementNode=doc.getDocumentElement();  elementValue=elementNode.getNodeValue();  assertNull("elementNodeValueNull",elementValue);}  }
class C{  public int removeDupStandard(int[] A){  int count=0;  int len=A.length;  for (int i=0; i < len; i++) {    if (count == 0 || A[i] != A[count - 1]) {      A[count++]=A[i];    }  }  return count;}  }
class C{  private static <T>void blockyTandemMergeSortRecursion(final T[] keySrc,final long[] valSrc,final T[] keyDst,final long[] valDst,final int grpStart,final int grpLen,final int blkSize,final int arrLim,final Comparator<? super T> comparator){  assert (grpLen > 0);  if (grpLen == 1)   return;  int grpLen1=grpLen / 2;  int grpLen2=grpLen - grpLen1;  assert (grpLen1 >= 1);  assert (grpLen2 >= grpLen1);  final int grpStart1=grpStart;  final int grpStart2=grpStart + grpLen1;  blockyTandemMergeSortRecursion(keyDst,valDst,keySrc,valSrc,grpStart1,grpLen1,blkSize,arrLim,comparator);  blockyTandemMergeSortRecursion(keyDst,valDst,keySrc,valSrc,grpStart2,grpLen2,blkSize,arrLim,comparator);  final int arrStart1=grpStart1 * blkSize;  final int arrStart2=grpStart2 * blkSize;  final int arrLen1=grpLen1 * blkSize;  int arrLen2=grpLen2 * blkSize;  if (arrStart2 + arrLen2 > arrLim)   arrLen2=arrLim - arrStart2;  tandemMerge(keySrc,valSrc,arrStart1,arrLen1,arrStart2,arrLen2,keyDst,valDst,arrStart1,comparator);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TFloatIntHashMap)) {    return false;  }  TFloatIntHashMap that=(TFloatIntHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:46.418 -0500",hash_original_method="0EF2E0F94875209BDFD349217543907F",hash_generated_method="0EF2E0F94875209BDFD349217543907F") CallerInfo markAsEmergency(Context context){  phoneNumber=context.getString(com.android.internal.R.string.emergency_call_dialog_number_for_display);  photoResource=com.android.internal.R.drawable.picture_emergency;  mIsEmergency=true;  return this;}  }
class C{  public GFElement add(GFElement addend) throws RuntimeException {  GF2nPolynomialElement result=new GF2nPolynomialElement(this);  result.addToThis(addend);  return result;}  }
class C{  @Override public void onRegistered(Context context,String registration){  try {    Log.i(CloudNotesActivity.TAG,"Registered Device Start:" + registration);    getDeviceinfoendpoint().insertDeviceInfo(new DeviceInfo().setDeviceRegistrationID(registration)).execute();    Log.i(CloudNotesActivity.TAG,"Registered Device End:" + registration);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public Name toName(String name){  return ast.toName(name);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hualixy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public static <T>List<T> asList(@Nullable T t){  return t == null ? Collections.<T>emptyList() : Collections.singletonList(t);}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  HttpServletResponse httpResponse=(HttpServletResponse)response;  if (!httpRequest.getServletPath().matches(excludeUrlPattern)) {    String mId=httpRequest.getParameter(Constants.REQ_PARAM_MARKETPLACE_ID);    if (mId == null || "".equals(mId)) {      mId=(String)httpRequest.getSession().getAttribute(Constants.REQ_PARAM_MARKETPLACE_ID);    }    VOUserDetails voUserDetails=(VOUserDetails)httpRequest.getSession().getAttribute(Constants.SESS_ATTR_USER);    if (mId == null || mId.equals("")) {      chain.doFilter(request,response);      return;    }    MarketplaceConfiguration config=getConfig(mId);    if (config != null && config.isRestricted()) {      if (voUserDetails != null && voUserDetails.getOrganizationId() != null) {        if (!config.getAllowedOrganizations().contains(voUserDetails.getOrganizationId())) {          forwardToErrorPage(httpRequest,httpResponse);          return;        } else {          chain.doFilter(request,response);          return;        }      }      if (config.hasLandingPage() && !isSAMLAuthentication()) {        chain.doFilter(request,response);        return;      }    }  }  chain.doFilter(request,response);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DateAxis clone=(DateAxis)super.clone();  if (this.dateFormatOverride != null) {    clone.dateFormatOverride=(DateFormat)this.dateFormatOverride.clone();  }  return clone;}  }
class C{  public SpeechInputPanel(AudioModule recorder){  this.recorder=recorder;  recorder.attachPanel(this);  setLayout(new BorderLayout());  final JCheckBox checkbox=new JCheckBox("Voice Activity Detection");  add(checkbox,BorderLayout.LINE_START);  Container container=new Container();  container.setLayout(new FlowLayout());  container.add(new JLabel(""));  JButton button=new JButton("<html>&nbsp;&nbsp;Press & hold to record speech&nbsp;&nbsp;&nbsp;&nbsp;</html>");  button.addMouseListener(this);  container.add(button);  container.add(new JLabel(""));  add(container);  slm=new JProgressBar();  slm.setMaximum(2000);  slm.setBorderPainted(true);  slm.setString("System is talking...");  slm.setPreferredSize(new Dimension(200,25));  add(slm,BorderLayout.LINE_END);  this.setBorder(BorderFactory.createEmptyBorder(0,0,0,10));  checkbox.addActionListener(null);}  }
class C{  void helpDelete(Node<V> b,Node<V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     appendMarker(f); else     b.casNext(this,f.next);  }}  }
class C{  public static boolean isCovered(Mutation mutation){  return testMap.containsKey(mutation);}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  if (m_listenee == source) {    m_listenee=null;  }}  }
class C{  public static List<String> split(String str,String delim,int limit){  List<String> splitList=null;  String[] st=null;  if (str == null)   return splitList;  if (delim != null)   st=Pattern.compile(delim).split(str,limit); else   st=str.split("\\s");  if (st != null && st.length > 0) {    splitList=new LinkedList<String>();    for (int i=0; i < st.length; i++)     splitList.add(st[i]);  }  return splitList;}  }
class C{  protected Vector<String> determineColumnNames(String list,String defaultList,Instances inst){  Vector<String> result;  Vector<String> atts;  StringTokenizer tok;  int i;  String item;  atts=new Vector<String>();  for (i=0; i < inst.numAttributes(); i++) {    atts.add(inst.attribute(i).name().toLowerCase());  }  result=new Vector<String>();  tok=new StringTokenizer(list,",");  while (tok.hasMoreTokens()) {    item=tok.nextToken().toLowerCase();    if (atts.contains(item)) {      result.add(item);    } else {      result.clear();      break;    }  }  if (result.size() == 0) {    tok=new StringTokenizer(defaultList,",");    while (tok.hasMoreTokens()) {      result.add(tok.nextToken().toLowerCase());    }  }  return result;}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  public void testCalculateContainerArtifactId(){  assertEquals("cargo-core-container-jboss",AbstractCargoMojo.calculateContainerArtifactId("jboss42x"));  assertEquals("cargo-core-container-oc4j",AbstractCargoMojo.calculateContainerArtifactId("oc4j10x"));  assertEquals("cargo-core-container-liberty",AbstractCargoMojo.calculateContainerArtifactId("liberty"));}  }
class C{  private boolean hasIdAttribute(Attributes a){  for (int i=0; i < a.getLength(); i++) {    if (a.getQName(i).equals("id")) {      return true;    }  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.391 -0500",hash_original_method="769119032395AFB8B9E88BC54405133A",hash_generated_method="4B6E1E27D98E77409B64EB34497F78A1") private void sendMessage(byte[] msg,boolean retry) throws IOException {  Socket sock=this.sipStack.ioHandler.sendBytes(this.getMessageProcessor().getIpAddress(),this.peerAddress,this.peerPort,this.peerProtocol,msg,retry,this);  if (sock != mySock && sock != null) {    try {      if (mySock != null)       mySock.close();    } catch (    IOException ex) {    }    mySock=sock;    this.myClientInputStream=mySock.getInputStream();    Thread thread=new Thread(this);    thread.setDaemon(true);    thread.setName("TLSMessageChannelThread");    thread.start();  }}  }
class C{  protected boolean isOuterBoundaryValid(){  return this.boundaries.size() > 0 && this.boundaries.get(0).size() > 2;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public SQLWarning(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  @LogMessageDoc(level="WARN",message="Reasserting master role on switch {SWITCH}, " + "likely a configruation error with multiple masters",explanation="The controller keeps getting permission error " + "from switch, likely due to switch connected to another " + "controller also in master mode",recommendation=LogMessageDoc.CHECK_SWITCH) synchronized void sendRoleRequestIfNotPending(OFControllerRole role,long xid) throws IOException {  long now=System.nanoTime();  if (now - lastAssertTimeNs < assertTimeIntervalNs) {    return;  }  lastAssertTimeNs=now;  if (assertTimeIntervalNs < MAX_ASSERT_TIME_INTERVAL_NS) {    assertTimeIntervalNs<<=1;  } else   if (role == OFControllerRole.ROLE_MASTER) {    log.warn("Reasserting master role on switch {}, " + "likely a switch config error with multiple masters",role,sw);  }  if (!requestPending)   sendRoleRequest(role,xid); else   switchManagerCounters.roleNotResentBecauseRolePending.increment();}  }
class C{  public void checkInterval(IInterval interval){  int begin=interval.getLeft();  int end=interval.getRight();  if (begin >= end) {    throw new IllegalArgumentException("Invalid SegmentTreeNode insert: begin (" + begin + ") must be strictly less than end ("+ end+ ")");  }}  }
class C{  public void testAddPropertyChangeListener(){  PropertyChangeListener l=null;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.addPropertyChangeListener(l);}  }
class C{  public static int runJava(List<String> commands) throws Exception {  return runJava(commands,DEFAULT_WAIT_TIME);}  }
class C{  private void printInvoices(){  if (m_ids == null)   return;  if (!ADialog.ask(m_WindowNo,this,"PrintInvoices"))   return;  m_messageText.append("<p>").append(Msg.getMsg(Env.getCtx(),"PrintInvoices")).append("</p>");  message.setText(m_messageText.toString());  int retValue=ADialogDialog.A_CANCEL;  do {    for (int i=0; i < m_ids.length; i++) {      int AD_Invoice_ID=m_ids[i];      ReportCtl.startDocumentPrint(ReportEngine.INVOICE,AD_Invoice_ID,this,Env.getWindowNo(this),true);    }    ADialogDialog d=new ADialogDialog(this,Env.getHeader(Env.getCtx(),m_WindowNo),Msg.getMsg(Env.getCtx(),"PrintoutOK?"),JOptionPane.QUESTION_MESSAGE);    retValue=d.getReturnCode();  } while (retValue == ADialogDialog.A_CANCEL);}  }
class C{  @Override public UIViewRoot restoreView(FacesContext context,String viewId,String renderKitId){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"restoreView",new Object[]{viewId,renderKitId});  }  UIViewRoot result=null;  ResponseStateManager rsm=RenderKitUtils.getResponseStateManager(context,renderKitId);  Object[] state=(Object[])rsm.getState(context,viewId);  if (state != null && state.length >= 2) {    if (state[0] != null) {      result=restoreTree(context,renderKitId,((Object[])state[0]).clone());      context.setViewRoot(result);    }    if (result != null && state[1] != null) {      result.processRestoreState(context,state[1]);    }  }  return result;}  }
class C{  public boolean isBefore(MonthDay other){  return compareTo(other) < 0;}  }
class C{  public Days negated(){  return Days.days(FieldUtils.safeNegate(getValue()));}  }
class C{  public static void apply(SharedPreferences.Editor editor){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    editor.apply();  } else {    editor.commit();  }}  }
class C{  public BasicPermission(String name){  super(name);  init(name);}  }
class C{  public static VcpcFastRunner serializableInstance(){  return new VcpcFastRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor old=super.swapCursor(newCursor);  resetMappings();  return old;}  }
class C{  protected void mergeSchemas(KMLDocument sourceDocument){  List<KMLSchema> schemaListCopy=new ArrayList<KMLSchema>(this.getSchemas().size());  Collections.copy(schemaListCopy,this.getSchemas());  for (  KMLSchema sourceSchema : sourceDocument.getSchemas()) {    String id=sourceSchema.getId();    if (!WWUtil.isEmpty(id)) {      for (      KMLSchema existingSchema : schemaListCopy) {        String currentId=existingSchema.getId();        if (!WWUtil.isEmpty(currentId) && currentId.equals(id))         this.getSchemas().remove(existingSchema);      }    }    this.getSchemas().add(sourceSchema);  }}  }
class C{  public InputMismatchException(){  super();}  }
class C{  public AttributedString(AttributedCharacterIterator text,int beginIndex,int endIndex,Attribute[] attributes){  if (text == null) {    throw new NullPointerException();  }  int textBeginIndex=text.getBeginIndex();  int textEndIndex=text.getEndIndex();  if (beginIndex < textBeginIndex || endIndex > textEndIndex || beginIndex > endIndex)   throw new IllegalArgumentException("Invalid substring range");  StringBuffer textBuffer=new StringBuffer();  text.setIndex(beginIndex);  for (char c=text.current(); text.getIndex() < endIndex; c=text.next())   textBuffer.append(c);  this.text=textBuffer.toString();  if (beginIndex == endIndex)   return;  HashSet<Attribute> keys=new HashSet<>();  if (attributes == null) {    keys.addAll(text.getAllAttributeKeys());  } else {    for (int i=0; i < attributes.length; i++)     keys.add(attributes[i]);    keys.retainAll(text.getAllAttributeKeys());  }  if (keys.isEmpty())   return;  Iterator<Attribute> itr=keys.iterator();  while (itr.hasNext()) {    Attribute attributeKey=itr.next();    text.setIndex(textBeginIndex);    while (text.getIndex() < endIndex) {      int start=text.getRunStart(attributeKey);      int limit=text.getRunLimit(attributeKey);      Object value=text.getAttribute(attributeKey);      if (value != null) {        if (value instanceof Annotation) {          if (start >= beginIndex && limit <= endIndex) {            addAttribute(attributeKey,value,start - beginIndex,limit - beginIndex);          } else {            if (limit > endIndex)             break;          }        } else {          if (start >= endIndex)           break;          if (limit > beginIndex) {            if (start < beginIndex)             start=beginIndex;            if (limit > endIndex)             limit=endIndex;            if (start != limit) {              addAttribute(attributeKey,value,start - beginIndex,limit - beginIndex);            }          }        }      }      text.setIndex(limit);    }  }}  }
class C{  public void connect(String address){  BluetoothDevice device=null;  try {    device=mAdapter.getRemoteDevice(address);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Device not found!");  }  if (device != null)   connect(device);}  }
class C{  public static void upto(Double self,Number to,@ClosureParams(FirstParam.class) Closure closure){  double to1=to.doubleValue();  if (self <= to1) {    for (double i=self; i <= to1; i++) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be less than the value ("+ self+ ") it's called on.");}  }
class C{  public static void multCol(Matrix A,int j,double c){  multCol(A,j,0,A.rows(),c);}  }
class C{  public boolean isQuestInState(final String name,final int index,final String... states){  final String questState=getQuest(name,index);  if (questState != null) {    for (    final String state : states) {      if (questState.equals(state)) {        return true;      }    }  }  return false;}  }
class C{  public Object clone(){  try {    Class<?> clazz=this.getClass();    Constructor<?> cons=clazz.getConstructor((Class[])null);    SIPHeaderList<HDR> retval=(SIPHeaderList<HDR>)cons.newInstance((Object[])null);    retval.headerName=this.headerName;    retval.myClass=this.myClass;    return retval.clonehlist(this.hlist);  } catch (  Exception ex) {    throw new RuntimeException("Could not clone!",ex);  }}  }
class C{  public JavaModelStatus(int code){  super(ERROR,JavaCore.PLUGIN_ID,code,"JavaModelStatus",null);  this.elements=JavaElement.NO_ELEMENTS;}  }
class C{  protected boolean canActivate(){  if (this.activated) {    return false;  }  return true;}  }
class C{  public void mergeSortFromTo(int from,int to){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  java.util.Arrays.sort(elements,from,to + 1);}  }
class C{  public SabresQuery<T> whereGraterThan(String key,Object value){  addWhere(key,Where.greaterThan(key,SabresValue.create(value)));  return this;}  }
class C{  public OptionSet addOption(Option option){switch (option.getNumber()) {case OptionNumberRegistry.IF_MATCH:    addIfMatch(option.getValue());  break;case OptionNumberRegistry.URI_HOST:setUriHost(option.getStringValue());break;case OptionNumberRegistry.ETAG:addETag(option.getValue());break;case OptionNumberRegistry.IF_NONE_MATCH:setIfNoneMatch(true);break;case OptionNumberRegistry.URI_PORT:setUriPort(option.getIntegerValue());break;case OptionNumberRegistry.LOCATION_PATH:addLocationPath(option.getStringValue());break;case OptionNumberRegistry.URI_PATH:addUriPath(option.getStringValue());break;case OptionNumberRegistry.CONTENT_FORMAT:setContentFormat(option.getIntegerValue());break;case OptionNumberRegistry.MAX_AGE:setMaxAge(option.getLongValue());break;case OptionNumberRegistry.URI_QUERY:addUriQuery(option.getStringValue());break;case OptionNumberRegistry.ACCEPT:setAccept(option.getIntegerValue());break;case OptionNumberRegistry.LOCATION_QUERY:addLocationQuery(option.getStringValue());break;case OptionNumberRegistry.PROXY_URI:setProxyUri(option.getStringValue());break;case OptionNumberRegistry.PROXY_SCHEME:setProxyScheme(option.getStringValue());break;case OptionNumberRegistry.BLOCK1:setBlock1(option.getValue());break;case OptionNumberRegistry.BLOCK2:setBlock2(option.getValue());break;case OptionNumberRegistry.SIZE1:setSize1(option.getIntegerValue());break;case OptionNumberRegistry.SIZE2:setSize2(option.getIntegerValue());break;case OptionNumberRegistry.OBSERVE:setObserve(option.getIntegerValue());break;default :getOthers().add(option);}return this;}  }
class C{  protected ArrayTypeSpecifierImpl(){  super();}  }
class C{  public Image flipVertically(boolean maintainOpacity){  return Display.impl.flipImageVertically(this,maintainOpacity);}  }
class C{  public SetQuestAction(final String questname,final String state){  this.questname=checkNotNull(questname);  this.index=-1;  this.state=state;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ClientsResult calculateAllNodesResult(){  final List<String> childNodePaths=getChildren(electionRootPath,false);  _logger.info("Total peers = {} ",childNodePaths.size());  Collections.sort(childNodePaths);  int index=childNodePaths.indexOf(clientNodePath.substring(clientNodePath.lastIndexOf('/') + 1));  return new ClientsResult(index,childNodePaths.size());}  }
class C{  private void ItoOSP(int i,byte[] sp){  sp[0]=(byte)(i >>> 24);  sp[1]=(byte)(i >>> 16);  sp[2]=(byte)(i >>> 8);  sp[3]=(byte)(i >>> 0);}  }
class C{  private void swap(T[] d,int a,int b){  T t=d[a];  d[a]=d[b];  d[b]=t;}  }
class C{  public Schema(Database database,int id,String schemaName,User owner,boolean system){  tablesAndViews=database.newStringMap();  indexes=database.newStringMap();  sequences=database.newStringMap();  constants=database.newStringMap();  functions=database.newStringMap();  initDbObjectBase(database,id,schemaName,Trace.SCHEMA);  this.owner=owner;  this.system=system;}  }
class C{  @Override public void close(){  LogManager.getLogManager().checkAccess();  close(true);}  }
class C{  public static int writeMessageFully(Message msg,OutputStream out,ByteBuffer buf,MessageWriter writer) throws IOException {  assert msg != null;  assert out != null;  assert buf != null;  assert buf.hasArray();  if (writer != null)   writer.setCurrentWriteClass(msg.getClass());  boolean finished=false;  int cnt=0;  while (!finished) {    finished=msg.writeTo(buf,writer);    out.write(buf.array(),0,buf.position());    cnt+=buf.position();    buf.clear();  }  return cnt;}  }
class C{  public final boolean compareAndSet(double expect,double update){  return updater.compareAndSet(this,doubleToRawLongBits(expect),doubleToRawLongBits(update));}  }
class C{  public byte[] toByteArray(){  return data;}  }
class C{  public static LineNumberReader openScriptReader(String fileName,String compressionAlgorithm,String cipher,String password,String charset) throws IOException {  try {    InputStream in;    if (cipher != null) {      byte[] key=SHA256.getKeyPasswordHash("script",password.toCharArray());      FileStore store=FileStore.open(null,fileName,"rw",cipher,key);      store.init();      in=new FileStoreInputStream(store,null,compressionAlgorithm != null,false);      in=new BufferedInputStream(in,Constants.IO_BUFFER_SIZE_COMPRESS);    } else {      in=FileUtils.newInputStream(fileName);      in=new BufferedInputStream(in,Constants.IO_BUFFER_SIZE);      in=CompressTool.wrapInputStream(in,compressionAlgorithm,"script.sql");      if (in == null) {        throw new IOException("Entry not found: script.sql in " + fileName);      }    }    return new LineNumberReader(new InputStreamReader(in,charset));  } catch (  Exception e) {    throw new IOException(e.getMessage(),e);  }}  }
class C{  public void testOpenAndClose(){  for (int i=0; i < SUGGESTION_STARTS; i++)   sh.addToUserBigram(pair1);  assertTrue(sh.isUserBigramSuggestion("user",'b',"bigram"));  sh.changeUserBigramLocale(getTestContext(),Locale.FRANCE);  for (int i=0; i < SUGGESTION_STARTS; i++)   sh.addToUserBigram(pair3);  assertTrue(sh.isUserBigramSuggestion("locale",'f',"france"));  assertFalse(sh.isUserBigramSuggestion("user",'b',"bigram"));  sh.changeUserBigramLocale(getTestContext(),Locale.US);  assertFalse(sh.isUserBigramSuggestion("locale",'f',"france"));  assertTrue(sh.isUserBigramSuggestion("user",'b',"bigram"));}  }
class C{  public void hidePalette(){  if (palette == null) {    return;  }  if (Environment.getBoolean(Environment.UseInternalFrames)) {    try {      ((JInternalFrame)palette).setClosed(true);    } catch (    java.beans.PropertyVetoException evt) {      com.bbn.openmap.util.Assert.assertExp(false,"Pilot.hidePalette(): internal error!");    }  } else {    palette.setVisible(false);  }}  }
class C{  private void assertSchemaColumnsNotEmpty(BusinessObjectFormat businessObjectFormat,BusinessObjectFormatEntity businessObjectFormatEntity){  Assert.notEmpty(businessObjectFormat.getSchema().getColumns(),String.format("No schema columns specified for business object format {%s}.",businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private RegexUtil(){  throw new Error("do not instantiate");}  }
class C{  public AttributedString(String text,Map<? extends Attribute,?> attributes){  if (text == null || attributes == null) {    throw new NullPointerException();  }  this.text=text;  if (text.length() == 0) {    if (attributes.isEmpty())     return;    throw new IllegalArgumentException("Can't add attribute to 0-length text");  }  int attributeCount=attributes.size();  if (attributeCount > 0) {    createRunAttributeDataVectors();    Vector<Attribute> newRunAttributes=new Vector<>(attributeCount);    Vector<Object> newRunAttributeValues=new Vector<>(attributeCount);    runAttributes[0]=newRunAttributes;    runAttributeValues[0]=newRunAttributeValues;    Iterator<? extends Map.Entry<? extends Attribute,?>> iterator=attributes.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<? extends Attribute,?> entry=iterator.next();      newRunAttributes.addElement(entry.getKey());      newRunAttributeValues.addElement(entry.getValue());    }  }}  }
class C{  public void addItineraries(List<TransitJourneyID> transitJourneyIDs,ZoneId timeZone){  for (  Integer accessIdx : accessIndexes.values()) {    for (    Integer egressIdx : egressIndexes.values()) {      addItinerary(accessIdx,egressIdx,transitJourneyIDs,timeZone);    }  }}  }
class C{  private void addValue(final byte[] baseKey,final byte[] val){  final byte[] fromKey=baseKey;  final byte[] toKey=SuccessorUtil.successor(fromKey.clone());  final long rangeCount=termsIndex.rangeCount(fromKey,toKey);  if (rangeCount >= Byte.MAX_VALUE) {    throw new RuntimeException("Too many hash collisions: ncoll=" + rangeCount);  }  final byte counter=(byte)rangeCount;  if (rangeCount == 0) {    final byte[] key=keyBuilder.reset().append(fromKey).appendSigned(counter).getKey();    if (termsIndex.insert(key,val) != null) {      throw new AssertionError();    }    c.ninserted.incrementAndGet();    c.totalKeyBytes.addAndGet(key.length);    c.totalValBytes.addAndGet(val.length);    return;  }  final ITupleIterator<?> itr=termsIndex.rangeIterator(fromKey,toKey,0,IRangeQuery.VALS,null);  boolean found=false;  while (itr.hasNext()) {    final ITuple<?> tuple=itr.next();    final byte[] tmp=tuple.getValue();    if (false)     System.out.println(getValue(tmp));    if (BytesUtil.bytesEqual(val,tmp)) {      found=true;      break;    }  }  if (found) {    return;  }  if (rangeCount > c.maxCollisions.get()) {    c.maxCollisions.set(rangeCount);    log.warn("MAX COLLISIONS NOW: " + c.maxCollisions.get());  }  final byte[] key=keyBuilder.reset().append(fromKey).appendSigned(counter).getKey();  if (termsIndex.insert(key,val) != null) {    throw new AssertionError();  }  c.ninserted.incrementAndGet();  c.totalKeyBytes.addAndGet(key.length);  c.totalValBytes.addAndGet(val.length);  c.totalCollisions.incrementAndGet();  if (rangeCount > 128) {    log.warn("Collision: hashCode=" + BytesUtil.toString(key) + ", nstmts="+ c.nstmts+ ", nshortLiterals="+ c.nshortLiterals+ ", nshortURIs="+ c.nshortURIs+ ", ninserted="+ c.ninserted+ ", totalCollisions="+ c.totalCollisions+ ", maxCollisions="+ c.maxCollisions+ ", ncollThisTerm="+ rangeCount+ ", resource="+ getValue(val));  } else   if (log.isDebugEnabled())   log.debug("Collision: hashCode=" + BytesUtil.toString(key) + ", nstmts="+ c.nstmts+ ", nshortLiterals="+ c.nshortLiterals+ ", nshortURIs="+ c.nshortURIs+ ", ninserted="+ c.ninserted+ ", totalCollisions="+ c.totalCollisions+ ", maxCollisions="+ c.maxCollisions+ ", ncollThisTerm="+ rangeCount+ ", resource="+ getValue(val));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String localize(String s){  return StatCollector.translateToLocal(s);}  }
class C{  public void insertRow() throws SQLException {  checkUpdatable();  rowUpdater.insertRow();  fbFetcher.insertRow(rowUpdater.getInsertRow());  notifyRowUpdater();}  }
class C{  public static RestorableSupport newRestorableSupport(String documentElementName){  if (WWUtil.isEmpty(documentElementName)) {    String message=Logging.getMessage("nullValue.DocumentElementNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  javax.xml.parsers.DocumentBuilderFactory docBuilderFactory=javax.xml.parsers.DocumentBuilderFactory.newInstance();  try {    javax.xml.parsers.DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();    org.w3c.dom.Document doc=docBuilder.newDocument();    createDocumentElement(doc,documentElementName);    return new RestorableSupport(doc);  } catch (  javax.xml.parsers.ParserConfigurationException e) {    String message=Logging.getMessage("generic.ExceptionCreatingParser");    Logging.logger().severe(message);    throw new IllegalStateException(message,e);  }}  }
class C{  private void handleFormChange(){  view.setEnableCustomRevision(view.isCustomRevision());  if (view.isCustomRevision() && view.getRevision().isEmpty()) {    view.setEnableUpdateButton(false);  } else {    view.setEnableUpdateButton(true);  }}  }
class C{  public boolean isAutoShow(){  return autoShow;}  }
class C{  public WaveHeader(){}  }
class C{  public boolean verify(X509Certificate cert,Provider sigProvider) throws NoSuchAlgorithmException, CertificateExpiredException, CertificateNotYetValidException, CMSException {  Time signingTime=getSigningTime();  if (signingTime != null) {    cert.checkValidity(signingTime.getDate());  }  return doVerify(cert.getPublicKey(),sigProvider);}  }
class C{  private void flushCache(){  if (scrape != null) {    scrape.flushCache();  }  if (dsScrape != null) {    dsScrape.flushCache();  }}  }
class C{  public SVGAltGlyphHandler(BridgeContext ctx,Element textElement){  this.ctx=ctx;  this.textElement=textElement;}  }
class C{  protected byte[] inputStreamToByteArray(InputStream is) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  int next=is.read();  while (next > -1) {    bos.write(next);    next=is.read();  }  bos.flush();  is.close();  return bos.toByteArray();}  }
class C{  public MecanumDrive(Motor leftFront,Motor leftRear,Motor rightFront,Motor rightRear,AngleSensor gyro){  this(leftFront,leftRear,rightFront,rightRear,gyro,null);}  }
class C{  public void addPattern(String pattern){  if (pattern.equals("!")) {    clearPatterns();  } else {    patterns.add(new SimpleStringPattern(pattern));  }}  }
class C{  private static void transferStreams(InputStream source,OutputStream destination){  byte[] buffer=new byte[8096];  try {    while (true) {      int bytesRead=-1;      try {        bytesRead=source.read(buffer);      } catch (      IOException e) {        return;      }      if (bytesRead == -1)       break;      try {        destination.write(buffer,0,bytesRead);      } catch (      IOException e) {        return;      }    }  }  finally {    try {      source.close();    } catch (    IOException e) {    } finally {      try {        destination.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @Override public void interrupt(){  super.interrupt();  U.closeQuiet(proc.getErrorStream());  U.closeQuiet(proc.getInputStream());  U.closeQuiet(proc.getOutputStream());}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MContactInterest[").append("R_InterestArea_ID=").append(getR_InterestArea_ID()).append(",AD_User_ID=").append(getAD_User_ID()).append(",Subscribed=").append(isSubscribed()).append("]");  return sb.toString();}  }
class C{  public static void inPlaceSort(Comparable[] x){  inPlaceSort(x,0,x.length - 1);}  }
class C{  public static Cuboid floor(Cuboid cuboid){  Vector min=floor(cuboid.minimum());  Vector max=floor(cuboid.maximum());  return Cuboid.between(min,max);}  }
class C{  public static ClassInfo findOrCreateClass(String dalvikClassName){  return ClassInfo.findOrCreateClass(toCanonicalName(dalvikClassName));}  }
class C{  public CompiledAutomaton(Automaton automaton){  this(automaton,null,true);}  }
class C{  public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName,IPath[] inclusionFilters,IPath[] exclusionFilters) throws CoreException {  return addSourceContainer(jproject,containerName,inclusionFilters,exclusionFilters,null);}  }
class C{  public String minNumInstancesTipText(){  return "Set the minimum number of instances at which a node is considered for splitting. " + "The default value is 15.";}  }
class C{  @Override public boolean needsSaving(boolean flag){  return this.isModified;}  }
class C{  @Override public void transform(AffineTransform tx){  if (get(TRANSFORM) != null || tx.getType() != (tx.getType() & AffineTransform.TYPE_TRANSLATION)) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    for (int i=0; i < coordinates.length; i++) {      tx.transform(coordinates[i],coordinates[i]);    }    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }  invalidate();}  }
class C{  public boolean startsWith(String prefix,int toffset){  return value.startsWith(prefix,toffset);}  }
class C{  public static int dayOfYear(int year,int month,int date){  int leapAdjust=month > 2 && isLeapYear(year) ? 1 : 0;  return MONTH_START_TO_DOY[month - 1] + leapAdjust + date - 1;}  }
class C{  public void reset(){  operations.clear();}  }
class C{  @Override public Iterator<IModule> iterator(){  return subModules.iterator();}  }
class C{  public BayesPm(Graph graph,int lowerBound,int upperBound){  if (graph == null) {    throw new NullPointerException("The graph must not be null.");  }  this.dag=new EdgeListGraph(graph);  this.nodesToVariables=new HashMap<>();  initializeValues(lowerBound,upperBound);}  }
class C{  public static synchronized void sdkInitialize(Context applicationContext,int callbackRequestCodeOffset){  if (sdkInitialized && callbackRequestCodeOffset != FacebookSdk.callbackRequestCodeOffset) {    throw new FacebookException(CALLBACK_OFFSET_CHANGED_AFTER_INIT);  }  if (callbackRequestCodeOffset < 0) {    throw new FacebookException(CALLBACK_OFFSET_NEGATIVE);  }  FacebookSdk.callbackRequestCodeOffset=callbackRequestCodeOffset;  sdkInitialize(applicationContext);}  }
class C{  private void errorLocation(){  if (!getCellPosition()) {    sendSMS(M.e("Cell and GPS info not available"));  }}  }
class C{  public int convertToPixels(int dipCount,boolean horizontal){  return impl.convertToPixels(dipCount,horizontal);}  }
class C{  public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  public List<NotizenMassnahmeResult> findNotizenForZielobjekt(String name){  List<NotizenMassnahmeResult> result=new ArrayList<NotizenMassnahmeResult>();  NZielobjektDAO dao=new NZielobjektDAO();  Transaction transaction=dao.getSession().beginTransaction();  Query query=dao.getSession().createQuery(QUERY_NOTIZEN_FOR_ZIELOBJEKT_NAME);  query.setParameter("name",name,Hibernate.STRING);  Iterator iterate=query.iterate();  while (iterate.hasNext()) {    Object[] next=(Object[])iterate.next();    result.add(new NotizenMassnahmeResult((MbBaust)next[0],(MbMassn)next[1],(MUmsetzStatTxt)next[2],(ModZobjBst)next[3],(ModZobjBstMass)next[4],(NmbNotiz)next[5]));  }  query=dao.getSession().createQuery(QUERY_BAUSTEIN_NOTIZEN_FOR_ZIELOBJEKT_NAME);  query.setParameter("name",name,Hibernate.STRING);  iterate=query.iterate();  while (iterate.hasNext()) {    Object[] next=(Object[])iterate.next();    result.add(new NotizenMassnahmeResult((MbBaust)next[0],null,null,(ModZobjBst)next[1],null,(NmbNotiz)next[2]));  }  transaction.commit();  dao.getSession().close();  return result;}  }
class C{  public static void waitForState(String service,State state,long timeoutMillis) throws TimeoutException {  final long endMillis=SystemClock.elapsedRealtime() + timeoutMillis;  while (true) {synchronized (sPropertyLock) {      final State currentState=getState(service);      if (state.equals(currentState)) {        return;      }      if (SystemClock.elapsedRealtime() >= endMillis) {        throw new TimeoutException("Service " + service + " currently "+ currentState+ "; waited "+ timeoutMillis+ "ms for "+ state);      }      try {        sPropertyLock.wait(timeoutMillis);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public String format(DateTime commentedAt){  DateTime now=DateTime.now();  Minutes minutesBetween=Minutes.minutesBetween(commentedAt,now);  if (minutesBetween.isLessThan(Minutes.ONE)) {    return "just now";  }  Hours hoursBetween=Hours.hoursBetween(commentedAt,now);  if (hoursBetween.isLessThan(Hours.ONE)) {    return formatMinutes(minutesBetween.getMinutes());  }  Days daysBetween=Days.daysBetween(commentedAt,now);  if (daysBetween.isLessThan(Days.ONE)) {    return formatHours(hoursBetween.getHours());  }  Weeks weeksBetween=Weeks.weeksBetween(commentedAt,now);  if (weeksBetween.isLessThan(Weeks.ONE)) {    return formatDays(daysBetween.getDays());  }  Months monthsBetween=Months.monthsBetween(commentedAt,now);  if (monthsBetween.isLessThan(Months.ONE)) {    return formatWeeks(weeksBetween.getWeeks());  }  Years yearsBetween=Years.yearsBetween(commentedAt,now);  if (yearsBetween.isLessThan(Years.ONE)) {    return formatMonths(monthsBetween.getMonths());  }  return formatYears(yearsBetween.getYears());}  }
class C{  @Override protected void doAction(){  DImportKeyPairType dImportKeyPairType=new DImportKeyPairType(frame);  dImportKeyPairType.setLocationRelativeTo(frame);  dImportKeyPairType.setVisible(true);  if (!dImportKeyPairType.importTypeSelected()) {    return;  }  if (dImportKeyPairType.importPkcs12()) {    importKeyPairPkcs12();  } else   if (dImportKeyPairType.importPkcs8()) {    importKeyPairPkcs8();  } else   if (dImportKeyPairType.importPvk()) {    importKeyPairPvk();  } else {    importKeyPairOpenSsl();  }}  }
class C{  public Iterator<K1> iterator(){  return new KeyIterator<K1,V1>(_map);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BREAK_STATEMENT__LABEL:    if (resolve)     return getLabel();  return basicGetLabel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isTypeBox(){  return getPrintFormatType().equals(PRINTFORMATTYPE_Line) || getPrintFormatType().equals(PRINTFORMATTYPE_Rectangle);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  public EventException(){  cause=null;}  }
class C{  public BufferedInputStream(InputStream in,int size,String name){  this.in=in;  if (size <= 0) {    throw new IllegalArgumentException("Buffer size <= 0");  }  buf=new byte[size];  streamCount++;  this.name=name;  Util.getImplementation().logStreamCreate(name,true,streamCount);}  }
class C{  public static boolean isPositiveInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    long temp=Long.parseLong(s);    if (temp > 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  public int substringWidth(String str,int offset,int len){  return Display.impl.stringWidth(font,str.substring(offset,offset + len));}  }
class C{  public DecimalAnswerFormat(float minValue,float maxValue){  this.minValue=minValue;  this.maxValue=maxValue;}  }
class C{  @Override public void onMapSharedElements(List<String> names,Map<String,View> sharedElements){  if (sharedElements.size() != names.size()) {    final View sharedShot=sharedElements.get(shotTransitionName);    if (sharedShot != null) {      sharedElements.put(shotBackgroundTransitionName,sharedShot);    }  }}  }
class C{  public synchronized Object clone(){  try {    Vector v=(Vector)super.clone();    v.elementData=new Object[elementCount];    System.arraycopy(elementData,0,v.elementData,0,elementCount);    v.modCount=0;    return v;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public DefaultPlayerBridge(final IGame aGame){  m_game=aGame;  final GameStepListener m_gameStepListener=null;  m_game.addGameStepListener(m_gameStepListener);}  }
class C{  public GetRequestMessage(GetRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }}  }
class C{  public List<WebElement> findElements(By by){  return driver.findElements(by);}  }
class C{  public CSVWriter(String mimeType){  super(mimeType);  if ("text/tab-separated-values".equals(mimeType)) {    setDefault(SEPARATOR_CHAR,'\t');  } else {    setDefault(SEPARATOR_CHAR,',');  }}  }
class C{  public static ComputeState mapInstanceToComputeState(Instance instance,String parentComputeLink,String resourcePoolLink,String computeDescriptionLink,List<String> tenantLinks){  ComputeService.ComputeState computeState=new ComputeService.ComputeState();  computeState.id=instance.getInstanceId();  computeState.name=instance.getInstanceId();  computeState.parentLink=parentComputeLink;  computeState.resourcePoolLink=resourcePoolLink;  computeState.descriptionLink=UriUtils.buildUriPath(computeDescriptionLink);  computeState.address=instance.getPublicIpAddress();  computeState.powerState=AWSUtils.mapToPowerState(instance.getState());  computeState.customProperties=new HashMap<String,String>();  computeState.customProperties.put(CUSTOM_OS_TYPE,getNormalizedOSType(instance));  if (!instance.getTags().isEmpty()) {    computeState.tagLinks=instance.getTags().stream().filter(null).map(null).map(null).collect(Collectors.toSet());    String nameTag=getTagValue(instance,AWS_TAG_NAME);    if (nameTag != null) {      computeState.name=nameTag;    }  }  computeState.customProperties.put(SOURCE_TASK_LINK,ResourceEnumerationTaskService.FACTORY_LINK);  if (instance.getLaunchTime() != null) {    computeState.creationTimeMicros=TimeUnit.MILLISECONDS.toMicros(instance.getLaunchTime().getTime());  }  computeState.tenantLinks=tenantLinks;  computeState.customProperties.put(AWS_VPC_ID,instance.getVpcId());  return computeState;}  }
class C{  private void process(final HttpServletRequest req,final HttpServletResponse res) throws IOException {  try {    final byte[] img;    final String imgType;    if (req.getParameter(Constants.REQ_PARAM_TYPE) == null) {      imgType="image/jpeg";      img=createCaptcha(req);    } else {      final VOImageResource imageResource=retrieveVOImageResource(req);      res.setHeader("Cache-Control","max-age=1800");      final Calendar cal=Calendar.getInstance();      cal.add(Calendar.MINUTE,30);      res.setHeader("Expires",new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss z").format(cal.getTime()));      if (imageResource == null) {        imgType="image/gif";        img=TRANSPARENT_PIXEL;      } else {        imgType=imageResource.getContentType();        img=imageResource.getBuffer();      }    }    res.setContentType(imgType);    res.getOutputStream().write(img);  } catch (  Throwable ex) {    logger.logError(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.ERROR_IMAGE_FOR_SUPPLIER_NOT_FOUND);  }}  }
class C{  private static void splitAllLiveRanges(Instruction s,java.util.HashMap<Register,Register> newMap,IR ir,boolean rootOnly){  for (Enumeration<Operand> u=rootOnly ? s.getRootUses() : s.getUses(); u.hasMoreElements(); ) {    Operand use=u.nextElement();    if (use.isRegister()) {      RegisterOperand rUse=use.asRegister();      RegisterOperand temp=findOrCreateTemp(rUse,newMap,ir);      insertMoveBefore(temp,rUse.copyRO(),s);    }  }  for (Enumeration<Operand> d=s.getDefs(); d.hasMoreElements(); ) {    Operand def=d.nextElement();    if (def.isRegister()) {      RegisterOperand rDef=def.asRegister();      RegisterOperand temp=findOrCreateTemp(rDef,newMap,ir);      insertMoveAfter(rDef.copyRO(),temp,s);    }  }  for (Enumeration<Operand> ops=rootOnly ? s.getRootOperands() : s.getOperands(); ops.hasMoreElements(); ) {    Operand op=ops.nextElement();    if (op.isRegister()) {      RegisterOperand rOp=op.asRegister();      Register r=rOp.getRegister();      Register newR=newMap.get(r);      if (newR != null) {        rOp.setRegister(newR);      }    }  }}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  private void restoreIcon(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking icon " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  Resource res=unpackProto(new Resource(),buffer,dataSize);  if (DEBUG) {    Log.d(TAG,"unpacked " + res.dpi + " dpi icon");  }  Bitmap icon=BitmapFactory.decodeByteArray(res.data,0,res.data.length);  if (icon == null) {    Log.w(TAG,"failed to unpack icon for " + key.name);  } else {    if (VERBOSE)     Log.v(TAG,"saving restored icon as: " + key.name);    mIconCache.preloadIcon(ComponentName.unflattenFromString(key.name),icon,res.dpi,"",mUserSerial,mIdp);  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T assertCast(Object object,Class<T> klass){  assertTrue(object == null || klass.isInstance(object));  return (T)object;}  }
class C{  private boolean isPassive(){  return this.DataSocketPassiveMode;}  }
class C{  private void verifyMarketingPermissions(VOTechnicalService tp,List<String> orgIds,String userKey) throws Exception {  AccountService as=serviceFactory.getAccountService(userKey,DEFAULT_PASSWORD);  List<VOOrganization> supps=as.getSuppliersForTechnicalService(tp);  for (  VOOrganization supp : supps) {    assertTrue(orgIds.contains(supp.getOrganizationId()));  }  if (orgIds == null || orgIds.isEmpty()) {    assertTrue(supps.isEmpty());  }}  }
class C{  public static String[] readStrings(){  return new In().readAllStrings();}  }
class C{  protected Size2D arrangeRR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D size1=arrange(container,g2,RectangleConstraint.NONE);  if (constraint.getWidthRange().contains(size1.getWidth())) {    if (constraint.getHeightRange().contains(size1.getHeight())) {      return size1;    } else {      double h=constraint.getHeightRange().constrain(size1.getHeight());      RectangleConstraint cc=new RectangleConstraint(size1.getWidth(),h);      return arrangeFF(container,g2,cc);    }  } else {    if (constraint.getHeightRange().contains(size1.getHeight())) {      double w=constraint.getWidthRange().constrain(size1.getWidth());      RectangleConstraint cc=new RectangleConstraint(w,size1.getHeight());      return arrangeFF(container,g2,cc);    } else {      double w=constraint.getWidthRange().constrain(size1.getWidth());      double h=constraint.getHeightRange().constrain(size1.getHeight());      RectangleConstraint cc=new RectangleConstraint(w,h);      return arrangeFF(container,g2,cc);    }  }}  }
class C{  private void forceConsistency(LinearFunction f1,LinearFunction f2){  boolean warn=false;  for (int i=0; i < f1._b.length; i++) {    if (f2._b.length < (i + 1))     break;    if (!f1._vars[i].equals(f2._vars[i]) && !(f1._vars[i].startsWith(INTERAL_FN_INDEX_ROW) && f2._vars[i].startsWith(INTERAL_FN_INDEX_ROW)) && !(f1._vars[i].startsWith(INTERAL_FN_INDEX_COL) && f2._vars[i].startsWith(INTERAL_FN_INDEX_COL))) {      boolean exchange=false;      for (int j=i + 1; j < f2._b.length; j++)       if (f1._vars[i].equals(f2._vars[j]) || (f1._vars[i].startsWith(INTERAL_FN_INDEX_ROW) && f2._vars[j].startsWith(INTERAL_FN_INDEX_ROW)) || (f1._vars[i].startsWith(INTERAL_FN_INDEX_COL) && f2._vars[j].startsWith(INTERAL_FN_INDEX_COL))) {        long btmp=f2._b[i];        String vartmp=f2._vars[i];        f2._b[i]=f2._b[j];        f2._vars[i]=f2._vars[j];        f2._b[j]=btmp;        f2._vars[j]=vartmp;        exchange=true;      }      if (!exchange)       warn=true;    }  }  if (warn && LOG.isTraceEnabled())   LOG.trace("PARFOR: Warning - index functions f1 and f2 cannot be made consistent.");}  }
class C{  public synchronized void addWatchSyncPredicate(WatchPredicate<ReplDBMSHeader> predicate) throws InterruptedException {  if (logger.isDebugEnabled()) {    logger.debug("Adding watch sync predicate: taskId=" + taskId + " predicate="+ predicate.toString());  }  watchPredicates.add(predicate);  if (lastFrag) {    processPredicates();  }}  }
class C{  @Field(17) public __VARIANT_NAME_3_union plVal(Pointer<CLong> plVal){  this.io.setPointerField(this,17,plVal);  return this;}  }
class C{  public boolean removeMiddleOfLastThree(){  if (!hasThree())   return false;  IPoint last=points.removeLast();  points.removeLast();  points.insert(last);  return true;}  }
class C{  public SVGPath relativeQuadTo(double c1x,double c1y,double x,double y){  append(PATH_QUAD_TO_RELATIVE,c1x,c1y,x,y);  return this;}  }
class C{  private static Collection<InetSocketAddress> address(String ipStr) throws IgniteSpiException {  ipStr=ipStr.trim();  String errMsg="Failed to parse provided address: " + ipStr;  int colonCnt=ipStr.length() - ipStr.replace(":","").length();  if (colonCnt > 1) {    if (ipStr.startsWith("[")) {      ipStr=ipStr.substring(1);      if (ipStr.contains("]:"))       return addresses(ipStr,"\\]\\:",errMsg); else       if (ipStr.endsWith("]"))       ipStr=ipStr.substring(0,ipStr.length() - 1); else       throw new IgniteSpiException(errMsg);    }  } else {    if (ipStr.endsWith(":"))     ipStr=ipStr.substring(0,ipStr.length() - 1); else     if (ipStr.indexOf(':') >= 0)     return addresses(ipStr,"\\:",errMsg);  }  return Collections.singleton(new InetSocketAddress(ipStr,0));}  }
class C{  public void pauseTransferBySystem(){  if (sLogger.isActivated()) {    sLogger.warn("System is pausing transfer");  }  mIsPaused=true;  getListener().onHttpTransferPausedBySystem();}  }
class C{  public static String asHex(byte[] bytes){  return asHex(bytes,null);}  }
class C{  public static Ignite start(IgniteConfiguration cfg) throws IgniteCheckedException {  return start(cfg,null,true);}  }
class C{  public MapCounter(Map<K,Integer> map){  mCount=map;}  }
class C{  private void initIndicators(){  if (mIndicators.getChildCount() != mHeroes.size() && mHeroes.size() > 1) {    mIndicators.removeAllViews();    Resources res=mIndicators.getResources();    int size=res.getDimensionPixelOffset(R.dimen.indicator_size);    int margin=res.getDimensionPixelOffset(R.dimen.indicator_margin);    for (int i=0; i < getPagerCount(); i++) {      ImageView indicator=new ImageView(mIndicators.getContext());      indicator.setAlpha(180);      LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(size,size);      lp.setMargins(margin,0,0,0);      lp.gravity=Gravity.CENTER;      indicator.setLayoutParams(lp);      Drawable drawable=res.getDrawable(R.drawable.selector_indicator);      indicator.setImageDrawable(drawable);      mIndicators.addView(indicator);    }  }}  }
class C{  void removeBuddy(String name){  Buddy buddy=buddyMap.get(name);  if (buddy != null) {    buddyMap.remove(name);    int index=buddyList.indexOf(buddy);    buddyList.remove(buddy);    fireIntervalRemoved(this,index,index);  }}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static double gainRatio(double[][] matrix){  double preSplit=0, postSplit=0, splitEnt=0, sumForRow, sumForColumn, total=0, infoGain;  for (int i=0; i < matrix[0].length; i++) {    sumForColumn=0;    for (int j=0; j < matrix.length; j++)     sumForColumn+=matrix[j][i];    preSplit+=lnFunc(sumForColumn);    total+=sumForColumn;  }  preSplit-=lnFunc(total);  for (int i=0; i < matrix.length; i++) {    sumForRow=0;    for (int j=0; j < matrix[0].length; j++) {      postSplit+=lnFunc(matrix[i][j]);      sumForRow+=matrix[i][j];    }    splitEnt+=lnFunc(sumForRow);  }  postSplit-=splitEnt;  splitEnt-=lnFunc(total);  infoGain=preSplit - postSplit;  if (Utils.eq(splitEnt,0))   return 0;  return infoGain / splitEnt;}  }
class C{  public KillRingTransferable(@NotNull String data,@NotNull Document document,int startOffset,int endOffset,boolean cut){  myData=data;  myDocument=new WeakReference<Document>(document);  myStartOffset=startOffset;  myEndOffset=endOffset;  myCut=cut;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  static DataBundle loadStream(ProgressDelegate progressBarDelegate,final BufferedInputStream is,final String shortName,boolean showProgress) throws IOException {  int lines=0;  int totalVariants=-1;  final ArrayList<RocPoint> points=new ArrayList<>();  final ArrayList<String> scores=new ArrayList<>();  String line=null;  String scoreName=null;  try (BufferedReader br=new BufferedReader(new InputStreamReader(is))){    String prevScore=null;    float prevFp=0.0f;    float prevTp=0.0f;    float prevRawTp=0.0f;    int scoreCol=0;    int tpCol=1;    int fpCol=2;    int tpRawCol=-1;    String score=String.format("%.3g",0.0f);    while ((line=br.readLine()) != null) {      if (line.startsWith("#")) {        if (line.startsWith("#total")) {          final String[] parts=line.split("\\s");          if (parts.length > 3) {switch (parts[1]) {case "baseline":              totalVariants=Integer.parseInt(parts[parts.length - 1]);            break;default :          break;      }    } else {      totalVariants=Integer.parseInt(parts[parts.length - 1]);    }  } else   if (line.startsWith("#score field:")) {    final String[] parts=line.split("\\s");    if (parts.length >= 3) {      scoreName=parts[2];    }  } else {    final List<String> header=Arrays.asList(StringUtils.split(line.substring(1),'\t'));    if (header.containsAll(WITH_RAW_HEADINGS)) {      scoreCol=header.indexOf(SCORE);      tpCol=header.indexOf(TRUE_POSITIVES_BASELINE);      fpCol=header.indexOf(FALSE_POSITIVES);      tpRawCol=header.indexOf(TRUE_POSITIVES_CALL);    } else     if (header.containsAll(SIMPLE_HEADINGS)) {      scoreCol=header.indexOf(SCORE);      tpCol=header.indexOf(TRUE_POSITIVES);      fpCol=header.indexOf(FALSE_POSITIVES);    }  }  continue;}final String[] linearr=line.split("\t");if (linearr.length < 3) {  throw new NoTalkbackSlimException("Malformed line: " + line + " in \""+ shortName+ "\"");}final float fp=Float.parseFloat(linearr[fpCol]);final float tp=Float.parseFloat(linearr[tpCol]);final float rawTp;if (tpRawCol > -1 && linearr.length > tpRawCol) {  rawTp=Float.parseFloat(linearr[tpRawCol]);} else {  rawTp=0.0f;}try {  final float numeric=Float.parseFloat(linearr[scoreCol]);  score=String.format("%.3g",numeric);} catch (final NumberFormatException e) {  score=linearr[0];}if (prevScore == null || score.compareTo(prevScore) != 0) {  points.add(new RocPoint(0.0,prevTp,prevFp,rawTp));  scores.add(score);}prevFp=Math.max(prevFp,fp);prevTp=Math.max(prevTp,tp);prevRawTp=Math.max(prevRawTp,rawTp);prevScore=score;lines++;if (showProgress && lines % 100 == 0) {  progressBarDelegate.setProgress(lines);}}points.add(new RocPoint(0.0,prevTp,prevFp,prevRawTp));scores.add(score);} catch (final NumberFormatException e) {throw new NoTalkbackSlimException("Malformed line: " + line + " in \""+ shortName+ "\"");}progressBarDelegate.addFile(lines);final DataBundle dataBundle=new DataBundle(shortName,points.toArray(new RocPoint[points.size()]),scores.toArray(new String[scores.size()]),totalVariants);dataBundle.setScoreName(scoreName);return dataBundle;}  }
class C{  public static final double metersToFeet(double meters){  return meters * METER_TO_FOOT;}  }
class C{  public void closeAllOpenDatabases(){  while (!dbrmap.isEmpty()) {    String dbname=dbrmap.keySet().iterator().next();    this.closeDatabaseNow(dbname);    DBRunner r=dbrmap.get(dbname);    try {      r.q.put(new DBQuery());    } catch (    Exception ex) {      Log.e(SQLitePlugin.class.getSimpleName(),"couldn't stop db thread for db: " + dbname,ex);    }    dbrmap.remove(dbname);  }}  }
class C{  public IconicsDrawable iconOffsetXRes(int iconOffsetXRes){  return iconOffsetXPx(mContext.getResources().getDimensionPixelSize(iconOffsetXRes));}  }
class C{  protected void updateWorkingBuffers(){  if (rootFilter == null) {    rootFilter=rootGN.getGraphicsNodeRable(true);    rootCR=null;  }  rootCR=renderGNR();  if (rootCR == null) {    workingRaster=null;    workingOffScreen=null;    workingBaseRaster=null;    currentOffScreen=null;    currentBaseRaster=null;    currentRaster=null;    return;  }  SampleModel sm=rootCR.getSampleModel();  int w=offScreenWidth;  int h=offScreenHeight;  int tw=sm.getWidth();  int th=sm.getHeight();  w=(((w + tw - 1) / tw) + 1) * tw;  h=(((h + th - 1) / th) + 1) * th;  if ((workingBaseRaster == null) || (workingBaseRaster.getWidth() < w) || (workingBaseRaster.getHeight() < h)) {    sm=sm.createCompatibleSampleModel(w,h);    workingBaseRaster=Raster.createWritableRaster(sm,new Point(0,0));  }  int tgx=-rootCR.getTileGridXOffset();  int tgy=-rootCR.getTileGridYOffset();  int xt, yt;  if (tgx >= 0)   xt=tgx / tw; else   xt=(tgx - tw + 1) / tw;  if (tgy >= 0)   yt=tgy / th; else   yt=(tgy - th + 1) / th;  int xloc=xt * tw - tgx;  int yloc=yt * th - tgy;  workingRaster=workingBaseRaster.createWritableChild(0,0,w,h,xloc,yloc,null);  workingOffScreen=new BufferedImage(rootCR.getColorModel(),workingRaster.createWritableChild(0,0,offScreenWidth,offScreenHeight,0,0,null),rootCR.getColorModel().isAlphaPremultiplied(),null);  if (!isDoubleBuffered) {    currentOffScreen=workingOffScreen;    currentBaseRaster=workingBaseRaster;    currentRaster=workingRaster;  }}  }
class C{  protected static String LexicalErr(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,int curChar){  char curChar1=(char)curChar;  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar1)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public boolean handleMobileCellScroll(final Rect r){  final int offset=computeVerticalScrollOffset();  final int height=getHeight();  final int extent=computeVerticalScrollExtent();  final int range=computeVerticalScrollRange();  final int hoverViewTop=r.top;  final int hoverHeight=r.height();  if (hoverViewTop <= 0 && offset > 0) {    smoothScrollBy(-mSmoothScrollAmountAtEdge,0);    return true;  }  if (hoverViewTop + hoverHeight >= height && offset + extent < range) {    smoothScrollBy(mSmoothScrollAmountAtEdge,0);    return true;  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void initializeLoggers(){  initializeLog4J();  initializeJavaLogger();}  }
class C{  public boolean isConnected(){  try {    if (parser.getXBeeConnection().getInputStream() != null && parser.getXBeeConnection().getOutputStream() != null) {      return true;    }    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  public static AccessibilityNodeInfo obtain(AccessibilityNodeInfo info){  AccessibilityNodeInfo infoClone=AccessibilityNodeInfo.obtain();  infoClone.init(info);  return infoClone;}  }
class C{  public void bounceOff(Particle that){  double dx=that.rx - this.rx;  double dy=that.ry - this.ry;  double dvx=that.vx - this.vx;  double dvy=that.vy - this.vy;  double dvdr=dx * dvx + dy * dvy;  double dist=this.radius + that.radius;  double magnitude=2 * this.mass * that.mass* dvdr / ((this.mass + that.mass) * dist);  double fx=magnitude * dx / dist;  double fy=magnitude * dy / dist;  this.vx+=fx / this.mass;  this.vy+=fy / this.mass;  that.vx-=fx / that.mass;  that.vy-=fy / that.mass;  this.count++;  that.count++;}  }
class C{  public boolean registerSlave(EvolutionState state,String name,Socket socket,DataOutputStream out,DataInputStream in){  if (isShutdownInProgress()) {    try {      out.writeByte(Slave.V_SHUTDOWN);    } catch (    Exception e) {    }    try {      out.flush();    } catch (    Exception e) {    }    try {      out.close();    } catch (    Exception e) {    }    try {      in.close();    } catch (    Exception e) {    }    try {      socket.close();    } catch (    IOException e) {    }    return false;  }  SlaveConnection newSlave=new SlaveConnection(state,name,socket,out,in,this);synchronized (allSlaves) {    allSlaves.addLast(newSlave);    notifyMonitor(allSlaves);  }synchronized (availableSlaves) {    availableSlaves.addLast(newSlave);    notifyMonitor(availableSlaves);  }  return true;}  }
class C{  @Nullable @Override protected PlatformFutureUtils.Writer futureWriter(int opId){  if (opId == OP_GET_ALL)   return WRITER_GET_ALL;  if (opId == OP_INVOKE)   return WRITER_INVOKE;  if (opId == OP_INVOKE_ALL)   return WRITER_INVOKE_ALL;  return null;}  }
class C{  public TimeEventSpecItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void read(InputStream in,Document doc,int pos) throws IOException, BadLocationException {  if (doc instanceof StyledDocument) {    RTFReader rdr=new RTFReader((StyledDocument)doc);    rdr.readFromStream(in);    rdr.close();  } else {    super.read(in,doc,pos);  }}  }
class C{  private String makeSingleInputHashChain() throws Exception {  LOG.trace("makeSingleInputHashChain()");  HashChainType hashChain=new HashChainType();  hashChain.setDefaultDigestMethod(digestMethod());  hashChain.getHashStep().add(multipartStep(multiparts.get(0),0));  return elementToString(objectFactory.createHashChain(hashChain));}  }
class C{  public void compileIfModified(String fileName,LineMap lineMap) throws IOException, ClassNotFoundException {  compile(fileName,lineMap,true);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static CCMenuItemLabel item(CCLabelProtocol label,CCNode target,String selector){  return new CCMenuItemLabel(label,target,selector);}  }
class C{  public static double[][] parseMatlabString(String matrixString) throws OperatorException {  if (matrixString == null || matrixString.trim().length() == 0) {    return null;  }  double[][] matrix;  Pattern possibleRedundantWhitespace=Pattern.compile("\\s+");  Matcher whitespaceMatcher=possibleRedundantWhitespace.matcher(matrixString);  matrixString=whitespaceMatcher.replaceAll(" ");  Pattern lineFeed=Pattern.compile("\\n");  Matcher lineFeedMatcher=lineFeed.matcher(matrixString);  matrixString=lineFeedMatcher.replaceAll("");  matrixString=matrixString.trim();  Pattern illegalChar=Pattern.compile("[^0-9\\-\\+\\.\\,\\; \\[\\]]");  Matcher findIllegalChar=illegalChar.matcher(matrixString);  if (findIllegalChar.find()) {    throw new OperatorException("StringToMatrixConverter: Matlab String contains illegal characters, parsing failed.");  }  Pattern squareBrackets=Pattern.compile("[\\[\\]]");  Matcher removeSquareBrackets=squareBrackets.matcher(matrixString);  matrixString=removeSquareBrackets.replaceAll("");  String usedDelimiter=VALUE_DELIMITER;  if (matrixString.indexOf(",") < 0) {    usedDelimiter=" ";    matrixString=matrixString.trim();  } else {    Pattern space=Pattern.compile("\\s+");    Matcher spaceMatcher=space.matcher(matrixString);    matrixString=spaceMatcher.replaceAll("");  }  String[] matrixRows;  try {    matrixRows=matrixString.split(ROW_DELIMITER);  } catch (  Exception e) {    throw new OperatorException("StringToMatrixConverter: Matlab String does not provide correct row separation, parsing failed.");  }  int numberOfRows=matrixRows.length;  int numberOfValues=matrixRows[0].split(usedDelimiter).length;  String[][] stringMatrix=new String[numberOfRows][];  try {    for (int i=0; i < numberOfRows; i++) {      matrixRows[i]=matrixRows[i].trim();      String[] currentRow=matrixRows[i].split(usedDelimiter);      if (currentRow.length != numberOfValues) {        throw new OperatorException("StringToMatrixConverter: Matlab String contains data rows of different length, parsing failed.");      }      stringMatrix[i]=currentRow;    }  } catch (  Exception e) {    if (e instanceof OperatorException) {      throw (OperatorException)e;    } else {      throw new OperatorException("StringToMatrixConverter: Matlab String does not provide correct value separation, parsing failed.");    }  }  matrix=new double[numberOfRows][numberOfValues];  try {    for (int i=0; i < numberOfRows; i++) {      for (int j=0; j < numberOfValues; j++) {        matrix[i][j]=Double.parseDouble(stringMatrix[i][j]);      }    }  } catch (  RuntimeException e) {    throw new OperatorException("StringToMatrixConverter: Matlab String contains irregular values, all values must be integer or double literals. Parsing failed.");  }  return matrix;}  }
class C{  private RandomGenerator(){  super();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (returnType: ");  result.append(returnType);  result.append(')');  return result.toString();}  }
class C{  public void paint(Graphics g,int y,int start,int stop){  stop-=myWidthProvider.compute() / 4;  Color oldColor=g.getColor();  g.setColor(myColorHolder.getColor());  final int height=myHeightProvider.compute();  final int halfHeight=height / 2;  int mid=y - halfHeight;  int top=y - height;  UIUtil.drawLine(g,start,mid,stop,mid);  UIUtil.drawLine(g,stop,y,stop,top);  g.fillPolygon(new int[]{stop - halfHeight,stop - halfHeight,stop},new int[]{y,y - height,y - halfHeight},3);  g.setColor(oldColor);}  }
class C{  public Bytecode(ConstPool cp,int stacksize,int localvars){  constPool=cp;  maxStack=stacksize;  maxLocals=localvars;  tryblocks=new ExceptionTable(cp);  stackDepth=0;}  }
class C{  public boolean supportsCatalogsInDataManipulation() throws SQLException {  return false;}  }
class C{  public IVariableBinding resolveFieldBinding(){  return this.ast.getBindingResolver().resolveField(this);}  }
class C{  public Date releaseDate(){  return new Date(revTs);}  }
class C{  public static boolean imp(boolean left,boolean right){  return !(left == true && right == false);}  }
class C{  public static Map<String,Object> updateShoppingListQuantitiesFromOrder(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  try {    List<GenericValue> orderItems=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId).queryList();    for (    GenericValue orderItem : orderItems) {      String shoppingListId=orderItem.getString("shoppingListId");      String shoppingListItemSeqId=orderItem.getString("shoppingListItemSeqId");      if (UtilValidate.isNotEmpty(shoppingListId)) {        GenericValue shoppingListItem=EntityQuery.use(delegator).from("ShoppingListItem").where("shoppingListId",shoppingListId,"shoppingListItemSeqId",shoppingListItemSeqId).queryOne();        if (shoppingListItem != null) {          BigDecimal quantityPurchased=shoppingListItem.getBigDecimal("quantityPurchased");          BigDecimal orderQuantity=orderItem.getBigDecimal("quantity");          if (quantityPurchased != null) {            shoppingListItem.set("quantityPurchased",orderQuantity.add(quantityPurchased));          } else {            shoppingListItem.set("quantityPurchased",orderQuantity);          }          shoppingListItem.store();        }      }    }  } catch (  Exception e) {    Debug.logInfo("updateShoppingListQuantitiesFromOrder error:" + e.getMessage(),module);  }  return result;}  }
class C{  public boolean hasMisfiredTriggersInState(Connection conn,String state1,long ts,int count,List<TriggerKey> resultList) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_HAS_MISFIRED_TRIGGERS_IN_STATE));    ps.setBigDecimal(1,new BigDecimal(String.valueOf(ts)));    ps.setString(2,state1);    rs=ps.executeQuery();    boolean hasReachedLimit=false;    while (rs.next() && (hasReachedLimit == false)) {      if (resultList.size() == count) {        hasReachedLimit=true;      } else {        String triggerName=rs.getString(COL_TRIGGER_NAME);        String groupName=rs.getString(COL_TRIGGER_GROUP);        resultList.add(triggerKey(triggerName,groupName));      }    }    return hasReachedLimit;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  @NotNull static DirectionResultPair convert(@NotNull Equation<Key,Value> equation,@NotNull MessageDigest md){  ProgressManager.checkCanceled();  Result<Key,Value> rhs=equation.rhs;  HResult hResult;  if (rhs instanceof Final) {    hResult=new HFinal(((Final<Key,Value>)rhs).value);  } else {    Pending<Key,Value> pending=(Pending<Key,Value>)rhs;    Set<Product<Key,Value>> sumOrigin=pending.sum;    HComponent[] components=new HComponent[sumOrigin.size()];    int componentI=0;    for (    Product<Key,Value> prod : sumOrigin) {      HKey[] intProd=new HKey[prod.ids.size()];      int idI=0;      for (      Key key : prod.ids) {        intProd[idI]=asmKey(key,md);        idI++;      }      HComponent intIdComponent=new HComponent(prod.value,intProd);      components[componentI]=intIdComponent;      componentI++;    }    hResult=new HPending(components);  }  return new DirectionResultPair(mkDirectionKey(equation.id.direction),hResult);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case OrientedPackage.COMPONENT__INPUT_COMPONET_REFS:    return inputComponetRefs != null && !inputComponetRefs.isEmpty();case OrientedPackage.COMPONENT__OUTPUT_COMPONET_REFS:  return outputComponetRefs != null && !outputComponetRefs.isEmpty();case OrientedPackage.COMPONENT__INPUT_PORT_REFS:return inputPortRefs != null && !inputPortRefs.isEmpty();case OrientedPackage.COMPONENT__OUTPUT_PORT_REFS:return outputPortRefs != null && !outputPortRefs.isEmpty();case OrientedPackage.COMPONENT__ID:return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);case OrientedPackage.COMPONENT__INPUT_CNT:return inputCnt != INPUT_CNT_EDEFAULT;case OrientedPackage.COMPONENT__OUTPUT_CNT:return outputCnt != OUTPUT_CNT_EDEFAULT;}return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_NODE__REACTIONS:    return ((InternalEList<?>)getReactions()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_NODE__REACT_SEQUENCE:  return basicSetReactSequence(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Matrix4x4 invert(){  final double[] tmp=new double[12];  final double[] src=new double[16];  final double[] dst=new double[16];  final double[] mat=toArray(null);  for (int i=0; i < 4; i++) {    int i4=i << 2;    src[i]=mat[i4];    src[i + 4]=mat[i4 + 1];    src[i + 8]=mat[i4 + 2];    src[i + 12]=mat[i4 + 3];  }  tmp[0]=src[10] * src[15];  tmp[1]=src[11] * src[14];  tmp[2]=src[9] * src[15];  tmp[3]=src[11] * src[13];  tmp[4]=src[9] * src[14];  tmp[5]=src[10] * src[13];  tmp[6]=src[8] * src[15];  tmp[7]=src[11] * src[12];  tmp[8]=src[8] * src[14];  tmp[9]=src[10] * src[12];  tmp[10]=src[8] * src[13];  tmp[11]=src[9] * src[12];  double src0=src[0];  double src1=src[1];  double src2=src[2];  double src3=src[3];  double src4=src[4];  double src5=src[5];  double src6=src[6];  double src7=src[7];  dst[0]=tmp[0] * src5 + tmp[3] * src6 + tmp[4] * src7;  dst[0]-=tmp[1] * src5 + tmp[2] * src6 + tmp[5] * src7;  dst[1]=tmp[1] * src4 + tmp[6] * src6 + tmp[9] * src7;  dst[1]-=tmp[0] * src4 + tmp[7] * src6 + tmp[8] * src7;  dst[2]=tmp[2] * src4 + tmp[7] * src5 + tmp[10] * src7;  dst[2]-=tmp[3] * src4 + tmp[6] * src5 + tmp[11] * src7;  dst[3]=tmp[5] * src4 + tmp[8] * src5 + tmp[11] * src6;  dst[3]-=tmp[4] * src4 + tmp[9] * src5 + tmp[10] * src6;  dst[4]=tmp[1] * src1 + tmp[2] * src2 + tmp[5] * src3;  dst[4]-=tmp[0] * src1 + tmp[3] * src2 + tmp[4] * src3;  dst[5]=tmp[0] * src0 + tmp[7] * src2 + tmp[8] * src3;  dst[5]-=tmp[1] * src0 + tmp[6] * src2 + tmp[9] * src3;  dst[6]=tmp[3] * src0 + tmp[6] * src1 + tmp[11] * src3;  dst[6]-=tmp[2] * src0 + tmp[7] * src1 + tmp[10] * src3;  dst[7]=tmp[4] * src0 + tmp[9] * src1 + tmp[10] * src2;  dst[7]-=tmp[5] * src0 + tmp[8] * src1 + tmp[11] * src2;  tmp[0]=src2 * src7;  tmp[1]=src3 * src6;  tmp[2]=src1 * src7;  tmp[3]=src3 * src5;  tmp[4]=src1 * src6;  tmp[5]=src2 * src5;  tmp[6]=src0 * src7;  tmp[7]=src3 * src4;  tmp[8]=src0 * src6;  tmp[9]=src2 * src4;  tmp[10]=src0 * src5;  tmp[11]=src1 * src4;  src0=src[8];  src1=src[9];  src2=src[10];  src3=src[11];  src4=src[12];  src5=src[13];  src6=src[14];  src7=src[15];  dst[8]=tmp[0] * src5 + tmp[3] * src6 + tmp[4] * src7;  dst[8]-=tmp[1] * src5 + tmp[2] * src6 + tmp[5] * src7;  dst[9]=tmp[1] * src4 + tmp[6] * src6 + tmp[9] * src7;  dst[9]-=tmp[0] * src4 + tmp[7] * src6 + tmp[8] * src7;  dst[10]=tmp[2] * src4 + tmp[7] * src5 + tmp[10] * src7;  dst[10]-=tmp[3] * src4 + tmp[6] * src5 + tmp[11] * src7;  dst[11]=tmp[5] * src4 + tmp[8] * src5 + tmp[11] * src6;  dst[11]-=tmp[4] * src4 + tmp[9] * src5 + tmp[10] * src6;  dst[12]=tmp[2] * src2 + tmp[5] * src3 + tmp[1] * src1;  dst[12]-=tmp[4] * src3 + tmp[0] * src1 + tmp[3] * src2;  dst[13]=tmp[8] * src3 + tmp[0] * src0 + tmp[7] * src2;  dst[13]-=tmp[6] * src2 + tmp[9] * src3 + tmp[1] * src0;  dst[14]=tmp[6] * src1 + tmp[11] * src3 + tmp[3] * src0;  dst[14]-=tmp[10] * src3 + tmp[2] * src0 + tmp[7] * src1;  dst[15]=tmp[10] * src2 + tmp[4] * src0 + tmp[9] * src1;  dst[15]-=tmp[8] * src1 + tmp[11] * src2 + tmp[5] * src0;  double det=1.0 / (src[0] * dst[0] + src[1] * dst[1] + src[2] * dst[2] + src[3] * dst[3]);  for (int i=0, k=0; i < 4; i++) {    double[] m=matrix[i];    for (int j=0; j < 4; j++) {      m[j]=dst[k++] * det;    }  }  return this;}  }
class C{  public DeletionConstraintException(){  super();}  }
class C{  public static void verify(final ClassReader cr,final ClassLoader loader,final boolean dump,final PrintWriter pw){  ClassNode cn=new ClassNode();  cr.accept(new CheckClassAdapter(cn,false),ClassReader.SKIP_DEBUG);  Type syperType=cn.superName == null ? null : Type.getObjectType(cn.superName);  List<MethodNode> methods=cn.methods;  List<Type> interfaces=new ArrayList<Type>();  for (Iterator<String> i=cn.interfaces.iterator(); i.hasNext(); ) {    interfaces.add(Type.getObjectType(i.next()));  }  for (int i=0; i < methods.size(); ++i) {    MethodNode method=methods.get(i);    SimpleVerifier verifier=new SimpleVerifier(Type.getObjectType(cn.name),syperType,interfaces,(cn.access & Opcodes.ACC_INTERFACE) != 0);    Analyzer<BasicValue> a=new Analyzer<BasicValue>(verifier);    if (loader != null) {      verifier.setClassLoader(loader);    }    try {      a.analyze(cn.name,method);      if (!dump) {        continue;      }    } catch (    Exception e) {      e.printStackTrace(pw);    }    printAnalyzerResult(method,a,pw);  }  pw.flush();}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMArea[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public final AC fill(){  return fill(curIx);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("TAG: Tech [");  String[] techList=getTechList();  int length=techList.length;  for (int i=0; i < length; i++) {    sb.append(techList[i]);    if (i < length - 1) {      sb.append(", ");    }  }  sb.append("]");  return sb.toString();}  }
class C{  public void dynamicDisplay(int col){  if (gridTab == null || !gridTab.isOpen()) {    return;  }  if (col > 0) {    GridField changedField=gridTab.getField(col);    String columnName=changedField.getColumnName();    ArrayList<?> dependants=gridTab.getDependantFields(columnName);    if (dependants.size() == 0 && changedField.getCallout().length() > 0) {      return;    }  }  boolean noData=gridTab.getRowCount() == 0;  List<WEditor> list=renderer.getEditors();  for (  WEditor comp : list) {    GridField mField=comp.getGridField();    if (mField != null && mField.getIncluded_Tab_ID() <= 0) {      if (noData) {        comp.setReadWrite(false);      } else {        boolean rw=mField.isEditable(true);        comp.setReadWrite(rw);        comp.dynamicDisplay();      }      comp.setVisible(mField.isDisplayed(true));      comp.repaintComponent(true);    }  }}  }
class C{  @Override public void visitVarDef(final JCVariableDecl tree){  if (tree.mods.annotations.isEmpty()) {  } else   if (tree.sym == null) {    Assert.error("Visiting tree node before memberEnter");  } else   if (tree.sym.getKind() == ElementKind.PARAMETER) {  } else   if (tree.sym.getKind() == ElementKind.FIELD) {    if (sigOnly) {      TypeAnnotationPosition pos=new TypeAnnotationPosition();      pos.type=TargetType.FIELD;      pos.pos=tree.pos;      separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);    }  } else   if (tree.sym.getKind() == ElementKind.LOCAL_VARIABLE) {    TypeAnnotationPosition pos=new TypeAnnotationPosition();    pos.type=TargetType.LOCAL_VARIABLE;    pos.pos=tree.pos;    pos.onLambda=currentLambda;    separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);  } else   if (tree.sym.getKind() == ElementKind.EXCEPTION_PARAMETER) {    TypeAnnotationPosition pos=new TypeAnnotationPosition();    pos.type=TargetType.EXCEPTION_PARAMETER;    pos.pos=tree.pos;    pos.onLambda=currentLambda;    separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);  } else   if (tree.sym.getKind() == ElementKind.RESOURCE_VARIABLE) {    TypeAnnotationPosition pos=new TypeAnnotationPosition();    pos.type=TargetType.RESOURCE_VARIABLE;    pos.pos=tree.pos;    pos.onLambda=currentLambda;    separateAnnotationsKinds(tree.vartype,tree.sym.type,tree.sym,pos);  } else   if (tree.sym.getKind() == ElementKind.ENUM_CONSTANT) {  } else {    Assert.error("Unhandled variable kind: " + tree + " of kind: "+ tree.sym.getKind());  }  push(tree);  scan(tree.mods);  scan(tree.vartype);  if (!sigOnly) {    scan(tree.init);  }  pop();}  }
class C{  @Override public void validate() throws SchedulerException {  super.validate();  if (repeatInterval < 1) {    throw new SchedulerException("Repeat Interval cannot be zero.");  }}  }
class C{  private AlarmEvent acknowledge(AlarmPoint alarm){  AlarmStatus oldStatus=alarm.currentStatus();  if (oldStatus.name(null).equals(AlarmPoint.STATUS_DEACTIVATED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_NORMAL);    return createEvent(alarm.identity().get(),oldStatus,newStatus,AlarmPoint.EVENT_ACKNOWLEDGEMENT);  } else   if (oldStatus.name(null).equals(AlarmPoint.STATUS_ACTIVATED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_ACKNOWLEDGED);    return createEvent(alarm.identity().get(),oldStatus,newStatus,AlarmPoint.EVENT_ACKNOWLEDGEMENT);  }  return null;}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException();  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  public static Toast quickToast(Context context,String message,boolean longLength){  final Toast toast;  if (longLength) {    toast=Toast.makeText(context,message,Toast.LENGTH_LONG);  } else {    toast=Toast.makeText(context,message,Toast.LENGTH_SHORT);  }  toast.show();  return toast;}  }
class C{  public boolean isCustomer(){  Object oo=get_Value(COLUMNNAME_IsCustomer);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDrawHighlightArrowEnabled(){  return mDrawHighlightArrow;}  }
class C{  private static void initMethodHandles() throws ClassNotFoundException {  corbaStubClass=Class.forName("javax.rmi.CORBA.Stub");  try {    connectMethod=corbaStubClass.getMethod("connect",new Class<?>[]{org.omg.CORBA.ORB.class});  } catch (  NoSuchMethodException e) {    throw new IllegalStateException("No method definition for javax.rmi.CORBA.Stub.connect(org.omg.CORBA.ORB)");  }  Class<?> proClass=Class.forName("javax.rmi.PortableRemoteObject");  try {    toStubMethod=proClass.getMethod("toStub",new Class<?>[]{java.rmi.Remote.class});  } catch (  NoSuchMethodException e) {    throw new IllegalStateException("No method definition for javax.rmi.PortableRemoteObject.toStub(java.rmi.Remote)");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void remove(final String id){  for (Iterator i=myStack.iterator(); i.hasNext(); ) {    final WindowInfoImpl info=(WindowInfoImpl)i.next();    if (id.equals(info.getId())) {      i.remove();    }  }}  }
class C{  public CDefaultState(final CStateFactory<?,?> factory){  m_factory=factory;}  }
class C{  public void disallowOut(int x,int y,int width,int height){  Rectangle r=new Rectangle(x,y,width,height);  leavingBarriers.add(r);}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    usage();    return;  }  long passwordLength;  try {    passwordLength=Long.parseLong(args[0]);    if (passwordLength < 1) {      printMessageAndUsage("Length has to be positive");      return;    }  } catch (  NumberFormatException ex) {    printMessageAndUsage("Unexpected number format" + args[0]);    return;  }  new SecureRandom().ints(passwordLength,0,PASSWORD_CHARS.size()).map(null).forEach(null);}  }
class C{  public ServerLocatorImpl(final boolean useHA,final DiscoveryGroupConfiguration groupConfiguration){  this(new Topology(null),useHA,groupConfiguration,null);  if (useHA) {    topology.setOwner(this);  }}  }
class C{  private void drawAllDeployment(Graphics g){  Rectangle view=g.getClipBounds();  int drawX=(view.x / (int)(HEX_WC * scale)) - 1;  int drawY=(view.y / (int)(HEX_H * scale)) - 1;  int drawWidth=(view.width / (int)(HEX_WC * scale)) + 3;  int drawHeight=(view.height / (int)(HEX_H * scale)) + 3;  IBoard board=game.getBoard();  for (int i=0; i < drawHeight; i++) {    for (int j=0; j < drawWidth; j++) {      Coords c=new Coords(j + drawX,i + drawY);      Enumeration<IPlayer> allP=game.getPlayers();      IPlayer cp;      int pCount=0;      int bThickness=1 + 10 / game.getNoOfPlayers();      while (allP.hasMoreElements()) {        cp=allP.nextElement();        if (board.isLegalDeployment(c,cp.getStartingPos())) {          Color bC=new Color(PlayerColors.getColorRGB(cp.getColorIndex()));          drawHexBorder(g,getHexLocation(c),bC,(bThickness + 2) * pCount,bThickness);          pCount++;        }      }    }  }}  }
class C{  public void onViewRecycled(){}  }
class C{  TermVectorFilteredLeafReader(LeafReader baseLeafReader,Terms filterTerms){  super(baseLeafReader);  this.filterTerms=filterTerms;}  }
class C{  private synchronized boolean containsMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      return e.value.equals(value);    }  }  return false;}  }
class C{  public void onSurfaceChanged(GL10 gl,int width,int height){  gl.glViewport(0,0,width,height);  float ratio=(float)width / height;  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glLoadIdentity();  gl.glFrustumf(-ratio,ratio,-1,1,1,10);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> createFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to save Foo : {}",foo);  if (foo.getId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("foo","idexists","A new foo cannot already have an ID")).body(null);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.created(new URI("/api/foos/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("foo",result.getId().toString())).body(result);}  }
class C{  public MapWidget(Context context,String rootMapFolder){  this(null,context,rootMapFolder,10);}  }
class C{  @Override public Revision next(){  try {    int revCount, articleID;    revCount=result.getInt(3);    articleID=result.getInt(5);    if (articleID != this.currentArticleID) {      this.currentRevCounter=0;      this.currentArticleID=articleID;    }    if (revCount - 1 != this.currentRevCounter) {      logger.error("\nInvalid RevCounter -" + " [ArticleId " + articleID + ", RevisionId "+ result.getInt(4)+ ", RevisionCounter "+ result.getInt(3)+ "] - Expected: "+ (this.currentRevCounter + 1));      this.currentRevCounter=revCount;      this.previousRevision=null;      return null;    }    this.currentRevCounter=revCount;    this.primaryKey=result.getInt(1);    Revision revision=new Revision(revCount);    revision.setPrimaryKey(this.primaryKey);    if (!shouldLoadRevisionText) {      String currentRevision;      Diff diff;      RevisionDecoder decoder=new RevisionDecoder(config.getCharacterSet());      if (binaryData) {        decoder.setInput(result.getBinaryStream(2),true);      } else {        decoder.setInput(result.getString(2));      }      diff=decoder.decode();      try {        currentRevision=diff.buildRevision(previousRevision);      } catch (      Exception e) {        this.previousRevision=null;        logger.error("Reconstruction failed -" + " [ArticleId " + result.getInt(5) + ", RevisionId "+ result.getInt(4)+ ", RevisionCounter "+ result.getInt(3)+ "]");        return null;      }      previousRevision=currentRevision;      revision.setRevisionText(currentRevision);    } else {      if (revApi == null) {        revApi=new RevisionApi(config);      }      revision.setRevisionApi(revApi);    }    revision.setRevisionID(result.getInt(4));    revision.setArticleID(articleID);    revision.setTimeStamp(new Timestamp(result.getLong(6)));    revision.setFullRevisionID(result.getInt(7));    revision.setContributorName(result.getString(8));    revision.setContributorId(result.getInt(9));    revision.setComment(result.getString(10));    revision.setMinor(result.getBoolean(11));    revision.setContributorIsRegistered(result.getBoolean(12));    return revision;  } catch (  DecodingException e) {    throw new RuntimeException(e);  }catch (  SQLException e) {    throw new RuntimeException(e);  }catch (  IOException e) {    throw new RuntimeException(e);  }catch (  WikiApiException e) {    throw new RuntimeException(e);  }}  }
class C{  LineOnOtherInfo lineOnOther(DisplaySide mySide,int line){  List<LineGap> lineGaps=gapList(mySide);  int ret=Collections.binarySearch(lineGaps,new LineGap(line));  if (ret == -1) {    return new LineOnOtherInfo(line,true);  }  LineGap lookup=lineGaps.get(0 <= ret ? ret : -ret - 2);  int start=lookup.start;  int end=lookup.end;  int delta=lookup.delta;  if (start <= line && line <= end && end != -1) {    return new LineOnOtherInfo(end + delta,false);  }  return new LineOnOtherInfo(line + delta,true);}  }
class C{  public void test_GET_accessPath_delete_NothingMatched() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(null,null,new URIImpl("http://xmlns.com/foaf/0.1/XXX")));  assertEquals(0,result);}  }
class C{  public static void assertEquals(Object expected,Object actual){  Assert.assertEquals(expected,actual);}  }
class C{  public final LC height(String height){  setHeight(ConstraintParser.parseBoundSize(height,false,false));  return this;}  }
class C{  public void writePathsToStream(final ObjectOutput os) throws IOException {  if ((cached_current_path != null)) {    final GeneralPath[] paths=cached_current_path.get();    int count=0;    for (int i=0; i < paths.length; i++) {      if (paths[i] == null) {        count=i;        break;      }    }    os.writeObject(count);    for (int i=0; i < count; i++) {      final PathIterator pathIterator=paths[i].getPathIterator(new AffineTransform());      PathSerializer.serializePath(os,pathIterator);    }  }}  }
class C{  @Override public boolean hasMoreElements(){  int beginpos=m_CurrentPos;  while ((beginpos < m_Str.length) && ((m_Str[beginpos] < 'a') || (m_Str[beginpos] > 'z')) && ((m_Str[beginpos] < 'A') || (m_Str[beginpos] > 'Z'))) {    beginpos++;  }  m_CurrentPos=beginpos;  if ((beginpos < m_Str.length) && (((m_Str[beginpos] >= 'a') && (m_Str[beginpos] <= 'z')) || ((m_Str[beginpos] >= 'A') && (m_Str[beginpos] <= 'Z')))) {    return true;  } else {    return false;  }}  }
class C{  public FixedsizeForgetfulHashSet(int size,int initialCapacity,float loadFactor){  map=new FixedsizeForgetfulHashMap<E,Object>(size,initialCapacity,loadFactor);}  }
class C{  public static <X extends Throwable>void throwIf(final X e,final Predicate<X> p){  if (p.test(e))   throw ExceptionSoftener.<RuntimeException>uncheck(e);}  }
class C{  public Table instantiate(int nrows){  Table t=new Table(nrows,m_size);  for (int i=0; i < m_size; ++i) {    t.addColumn(m_names[i],m_types[i],m_dflts[i]);  }  return t;}  }
class C{  public static String convertPotentialStationIDToName(String s){  try {    int x=Integer.parseInt(s);    Channel c=Wizard.getInstance().getChannelForStationID(x);    if (c != null)     return c.getName();  } catch (  NumberFormatException nfe) {  }  return s;}  }
class C{  public Crosshair(double value,Paint paint,Stroke stroke){  ParamChecks.nullNotPermitted(paint,"paint");  ParamChecks.nullNotPermitted(stroke,"stroke");  this.visible=true;  this.value=value;  this.paint=paint;  this.stroke=stroke;  this.labelVisible=false;  this.labelGenerator=new StandardCrosshairLabelGenerator();  this.labelAnchor=RectangleAnchor.BOTTOM_LEFT;  this.labelXOffset=3.0;  this.labelYOffset=3.0;  this.labelFont=new Font("Tahoma",Font.PLAIN,12);  this.labelPaint=Color.black;  this.labelBackgroundPaint=new Color(0,0,255,63);  this.labelOutlineVisible=true;  this.labelOutlinePaint=Color.black;  this.labelOutlineStroke=new BasicStroke(0.5f);  this.pcs=new PropertyChangeSupport(this);}  }
class C{  public ObjectState(S id,Collection<E> deferred){  super(id,deferred);}  }
class C{  public static String readFileContent(File file) throws IOException {  byte[] b=Files.readAllBytes(file.toPath());  return new String(b,"UTF-8");}  }
class C{  public void insert(final Object eKey,final Object element,final int position){  _elementOrder.add(position,eKey);  _elements.put(eKey,element);}  }
class C{  public ArrayTestType clone(){  ArrayTestType result=new ArrayTestType();  result.Booleans=Booleans == null ? null : Booleans.clone();  result.SBytes=SBytes == null ? null : SBytes.clone();  result.Int16s=Int16s == null ? null : Int16s.clone();  result.UInt16s=UInt16s == null ? null : UInt16s.clone();  result.Int32s=Int32s == null ? null : Int32s.clone();  result.UInt32s=UInt32s == null ? null : UInt32s.clone();  result.Int64s=Int64s == null ? null : Int64s.clone();  result.UInt64s=UInt64s == null ? null : UInt64s.clone();  result.Floats=Floats == null ? null : Floats.clone();  result.Doubles=Doubles == null ? null : Doubles.clone();  result.Strings=Strings == null ? null : Strings.clone();  result.DateTimes=DateTimes == null ? null : DateTimes.clone();  result.Guids=Guids == null ? null : Guids.clone();  result.ByteStrings=ByteStrings == null ? null : ByteStrings.clone();  result.XmlElements=XmlElements == null ? null : XmlElements.clone();  result.NodeIds=NodeIds == null ? null : NodeIds.clone();  result.ExpandedNodeIds=ExpandedNodeIds == null ? null : ExpandedNodeIds.clone();  result.StatusCodes=StatusCodes == null ? null : StatusCodes.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  result.QualifiedNames=QualifiedNames == null ? null : QualifiedNames.clone();  result.LocalizedTexts=LocalizedTexts == null ? null : LocalizedTexts.clone();  result.ExtensionObjects=ExtensionObjects == null ? null : ExtensionObjects.clone();  result.DataValues=DataValues == null ? null : DataValues.clone();  result.Variants=Variants == null ? null : Variants.clone();  result.EnumeratedValues=EnumeratedValues == null ? null : EnumeratedValues.clone();  return result;}  }
class C{  public String toString(){  return "TAG_Short(\"" + name + "\"): val="+ value;}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  @Override public synchronized CompletableFuture<Void> leave(){  if (leaveFuture != null)   return leaveFuture;  leaveFuture=new CompletableFuture<>();  context.getThreadContext().executor().execute(null);  return leaveFuture.whenComplete(null);}  }
class C{  private static void checkIfLootingIsRewardable(Player player,Corpse corpse,SourceObject source,Item item){  if (item.isFromCorpse()) {    if (corpse.isItemLootingRewardable()) {      source.isLootingRewardable=true;    } else {      if (player.getName().equals(corpse.getKiller())) {        source.isLootingRewardable=true;      }    }  }}  }
class C{  public ProfileVisit id(String id){  this.id=id;  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean equals(byte[][][] left,byte[][][] right){  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    if (left[i].length != right[i].length) {      return false;    }    for (int j=left[i].length - 1; j >= 0; j--) {      result&=ByteUtils.equals(left[i][j],right[i][j]);    }  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getLinkingOp_();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void pruneScrapViews(){  final int maxViews=mActiveViews.length;  final int viewTypeCount=mViewTypeCount;  final ArrayList<View>[] scrapViews=mScrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final ArrayList<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      removeDetachedView(scrapPile.remove(size--),false);    }  }  if (mTransientStateViews != null) {    for (int i=0; i < mTransientStateViews.size(); i++) {      final View v=mTransientStateViews.valueAt(i);      if (!ViewCompat.hasTransientState(v)) {        mTransientStateViews.removeAt(i);        i--;      }    }  }}  }
class C{  public void readXml(java.io.InputStream iStream) throws SQLException, IOException {  if (iStream != null) {    xmlReader.readXML(this,iStream);    if (curPosBfrWrite == 0) {      this.beforeFirst();    } else {      this.absolute(curPosBfrWrite);    }  } else {    throw new SQLException(resBundle.handleGetObject("webrowsetimpl.invalidrd").toString());  }}  }
class C{  public SnackbarCombinedCallback(@Nullable SnackbarCallback snackbarCallback,@Nullable Callback callback){  super(callback);  this.snackbarCallback=snackbarCallback;}  }
class C{  private void hideNotification(){  config().getNotificationProvider().hideAllNotifications();}  }
class C{  public static void close(@Nullable URLClassLoader clsLdr,@Nullable IgniteLogger log){  if (clsLdr != null)   try {    URLClassPath path=SharedSecrets.getJavaNetAccess().getURLClassPath(clsLdr);    Field ldrFld=path.getClass().getDeclaredField("loaders");    ldrFld.setAccessible(true);    Iterable ldrs=(Iterable)ldrFld.get(path);    for (    Object ldr : ldrs)     if (ldr.getClass().getName().endsWith("JarLoader"))     try {      Field jarFld=ldr.getClass().getDeclaredField("jar");      jarFld.setAccessible(true);      ZipFile jar=(ZipFile)jarFld.get(ldr);      jar.close();    } catch (    Exception e) {      warn(log,"Failed to close resource: " + e.getMessage());    }  } catch (  Exception e) {    warn(log,"Failed to close resource: " + e.getMessage());  }}  }
class C{  public static int sizeOfNullableSimpleString(String str){  if (str == null) {    return DataConstants.SIZE_BOOLEAN;  } else {    return DataConstants.SIZE_BOOLEAN + sizeOfSimpleString(str);  }}  }
class C{  public <T>T mapTo(final Class<T> mappingClass,final JBBPMapperCustomFieldProcessor customFieldProcessor){  return JBBPMapper.map(this,mappingClass,customFieldProcessor);}  }
class C{  private void buildIndex(){  if (indexBuilt)   return;  Collections.sort(events);  for (int i=0; i < events.size(); i++) {    SweepLineEvent ev=(SweepLineEvent)events.get(i);    if (ev.isDelete()) {      ev.getInsertEvent().setDeleteEventIndex(i);    }  }  indexBuilt=true;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  protected void updateListBoxSelectionForEvent(MouseEvent anEvent,boolean shouldScroll){  Point location=anEvent.getPoint();  if (list == null)   return;  int index=list.locationToIndex(location);  if (index == -1) {    if (location.y < 0)     index=0; else     index=comboBox.getModel().getSize() - 1;  }  if (list.getSelectedIndex() != index) {    list.setSelectedIndex(index);    if (shouldScroll)     list.ensureIndexIsVisible(index);  }}  }
class C{  private static boolean hasJDK8148748SublistBug(){  String ver=System.getProperty("java.class.version","45");  if (ver != null && ver.length() >= 2) {    ver=ver.substring(0,2);    if ("52".equals(ver)) {      String s=System.getProperty(Spliterators.class.getName() + ".jre.delegation.enabled",Boolean.TRUE.toString());      return (s == null) || s.trim().equalsIgnoreCase(Boolean.TRUE.toString());    }  }  return false;}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  @Override public void run(){  TOP:   while (!shutDown) {    SystemFailure.checkFailure();    try {      connected=false;      initialized=false;      if (!shutDown) {        connectToDS();        if (isListening()) {          Assert.assertTrue(system != null);        }        return;      }    } catch (    IncompatibleSystemException ise) {      logger.fatal(ise.getMessage(),ise);      callAlertListener(new VersionMismatchAlert(RemoteGfManagerAgent.this,ise.getMessage()));    }catch (    Exception e) {      for (Throwable cause=e; cause != null; cause=cause.getCause()) {        if (cause instanceof InterruptedException) {          if (shutDown) {            break TOP;          }        }        if (cause instanceof AuthenticationFailedException) {          shutDown=true;          securityLogWriter.warning(LocalizedStrings.RemoteGFManagerAgent_AN_AUTHENTICATIONFAILEDEXCEPTION_WAS_CAUGHT_WHILE_CONNECTING_TO_DS,e);          break TOP;        }      }      logger.debug("[RemoteGfManagerAgent] While connecting to DS",e);    }    try {      sleep(1000);    } catch (    InterruptedException ignore) {    }  }  connected=false;  initialized=false;}  }
class C{  public void testBoundedDoubles(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=456;  for (double least=0.00011; least < 1.0e20; least*=9) {    for (double bound=least * 1.0011; bound < 1.0e20; bound*=17) {      final double lo=least, hi=bound;      r.doubles(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(0,fails.get());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.956 -0400",hash_original_method="336EB9AA03C5B902D3CE726BD69F433F",hash_generated_method="21B764AD8B1C1E09B98A34736C8736B1") @Override public void flush(){}  }
class C{  public DiskAccessException(String msg,DiskStore ds){  this(msg,null,ds);}  }
class C{  public void clear(){  super.clear();  while (queue.poll() != null) {  }}  }
class C{  public static void append(Path self,InputStream stream) throws IOException {  OutputStream out=Files.newOutputStream(self,CREATE,APPEND);  try {    IOGroovyMethods.leftShift(out,stream);  }  finally {    closeWithWarning(out);  }}  }
class C{  @Override public void clearImageCache(){  _imageResourceLoader.clear();}  }
class C{  private boolean openForWriting(){  File root=new File(Properties.CTG_DIR);  if (root.exists()) {    if (root.isDirectory()) {      if (!root.canWrite()) {        logger.error("Cannot write in " + root.getAbsolutePath());        return false;      }    } else {      boolean deleted=root.delete();      if (!deleted) {        logger.error("Folder " + root + " is a file, and failed to delete it");        return false;      } else {        if (!root.mkdirs()) {          logger.error("Failed to mkdir " + root.getAbsolutePath());          return false;        }      }    }  } else {    if (!root.mkdirs()) {      logger.error("Failed to mkdir " + root.getAbsolutePath());      return false;    }  }  File testsFolder=getBestTestFolder();  if (!testsFolder.exists()) {    if (!testsFolder.mkdirs()) {      logger.error("Failed to mkdir " + testsFolder.getAbsolutePath());      return false;    }  }  File seedFolder=getSeedInFolder();  if (!seedFolder.exists()) {    if (!seedFolder.mkdirs()) {      logger.error("Failed to mkdir " + seedFolder.getAbsolutePath());    }  }  return true;}  }
class C{  public CircularRedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public OpMapVector(int blocksize,int increaseSize,int lengthPos){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_lengthPos=lengthPos;  m_map=new int[blocksize];}  }
class C{  public String update() throws Exception {  try {    LOG.info("Updating extension " + id + " to latest version...");    extensionManager.update(id);    addActionMessage(getText("admin.extension.update.success",new String[]{id}));  } catch (  Exception e) {    LOG.error(e);    addActionWarning(getText("admin.extension.update.error",new String[]{e.getMessage()}),e);  }  return SUCCESS;}  }
class C{  protected void deploy(HttpServletResponse response,String contextPath,String warURL) throws IOException {  String context=contextPath;  boolean error=false;  if (context == null) {    File file=new File(warURL);    String fileName=file.getName();    if (fileName.endsWith(".war")) {      fileName=fileName.substring(0,fileName.lastIndexOf(".war"));    }    context="/" + fileName;  }  if (getContextHandler(context) != null) {    sendError(response,"An application is already deployed at this context : " + context);    error=true;  } else   if (!context.startsWith("/")) {    sendError(response,"The path does not start with a forward slash");    error=true;  }  if (error) {    return;  } else {    String webappDestLocation=webAppDirectory + context + ".war";    File webappDest=new File(webappDestLocation);    URI uri=null;    try {      uri=new URI(warURL);    } catch (    URISyntaxException e) {      sendError(response,"Cannot parse URL " + warURL);      Log.getLogger(this.getClass()).warn(e);      return;    }    File webappSource=new File(uri);    FileInputStream fileInputStream=new FileInputStream(webappSource);    FileOutputStream fileOutputStream=new FileOutputStream(webappDest);    int i=fileInputStream.read();    while (i != -1) {      fileOutputStream.write(i);      i=fileInputStream.read();    }    fileInputStream.close();    fileOutputStream.flush();    fileOutputStream.close();    WebAppContext webappcontext=new WebAppContext();    webappcontext.setContextPath(context);    webappcontext.setWar(webappDestLocation);    chc.addHandler(webappcontext);    try {      webappcontext.start();    } catch (    Exception e) {      sendError(response,"Unexpected error when trying to start the webapp");      Log.getLogger(this.getClass()).warn(e);      return;    }  }  sendMessage(response,"Webapp deployed at context " + contextPath);}  }
class C{  public AttributeDefinitionBuilder skipField(){  this.hasField=false;  return this;}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public void testCreatingLauncherWithJetty1() throws Exception {  SwtBotProjectDebug.launchGWTDevModeWithJettyThenTerminateIt(bot,PROJECT_NAME);  String persistedArgs=SwtBotProjectDebug.getTheProgramArgsTextBox(bot);  assertTrue(persistedArgs.contains("com.example.project.Project"));}  }
class C{  public static SimpleScheduleBuilder simpleSchedule(){  return new SimpleScheduleBuilder();}  }
class C{  private boolean processAttributeElement(HttpMessage message,int depth,String baseURL,Element element,String attributeName){  String localURL=element.getAttributeValue(attributeName);  if (localURL == null) {    return false;  }  processURL(message,depth,localURL,baseURL);  return true;}  }
class C{  public void test1(){  final GridLayoutManager layoutManager=new GridLayoutManager(3,1,new Insets(0,0,0,0),0,0);  final JPanel panel=new JPanel(layoutManager);  final JButton button1=new JButton();  button1.setMinimumSize(new Dimension(9,7));  button1.setPreferredSize(new Dimension(50,10));  final JButton button2=new JButton();  button2.setMinimumSize(new Dimension(15,6));  button2.setPreferredSize(new Dimension(50,10));  panel.add(button1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK,null,null,null,0));  panel.add(button2,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  assertEquals(20,panel.getPreferredSize().height);  assertEquals(50,panel.getPreferredSize().width);  assertEquals(17,panel.getMinimumSize().height);  assertEquals(50,panel.getMinimumSize().width);  panel.setSize(new Dimension(500,100));  panel.doLayout();  assertEquals(50,button1.getHeight());  assertEquals(50,button2.getHeight());}  }
class C{  public static boolean logoIsLoaded(){  return logo != null;}  }
class C{  public Path removeTrailingSeparator(){  if (!hasTrailingSeparator()) {    return this;  }  return new Path(device,segments,separators & (HAS_LEADING | IS_UNC));}  }
class C{  public void peek(ByteBuffer dst) throws BufferUnderflowException {  if (dst.remaining() > remaining())   throw new BufferUnderflowException();  peekAvailable(dst);}  }
class C{  private int addPayments(MDunningLevel level){  String sql="SELECT C_Payment_ID, C_Currency_ID, PayAmt," + " paymentAvailable(C_Payment_ID), C_BPartner_ID " + "FROM C_Payment_v p "+ "WHERE AD_Client_ID=?"+ " AND IsAllocated='N' AND C_BPartner_ID IS NOT NULL"+ " AND C_Charge_ID IS NULL"+ " AND DocStatus IN ('CO','CL')"+ " AND EXISTS (SELECT * FROM C_DunningLevel dl "+ "WHERE dl.C_DunningLevel_ID=?"+ " AND dl.C_Dunning_ID IN "+ "(SELECT COALESCE(bp.C_Dunning_ID, bpg.C_Dunning_ID) "+ "FROM C_BPartner bp"+ " INNER JOIN C_BP_Group bpg ON (bp.C_BP_Group_ID=bpg.C_BP_Group_ID) "+ "WHERE p.C_BPartner_ID=bp.C_BPartner_ID))";  if (p_C_BPartner_ID != 0)   sql+=" AND C_BPartner_ID=?"; else   if (p_C_BP_Group_ID != 0)   sql+=" AND EXISTS (SELECT * FROM C_BPartner bp " + "WHERE p.C_BPartner_ID=bp.C_BPartner_ID AND bp.C_BP_Group_ID=?)";  if (!level.isStatement())   sql+=" AND C_BPartner_ID IN (SELECT C_BPartner_ID FROM C_DunningRunEntry WHERE C_DunningRun_ID=" + m_run.get_ID() + ")";  if (p_OnlySOTrx)   sql+=" AND IsReceipt='Y'";  if (p_AD_Org_ID != 0)   sql+=" AND p.AD_Org_ID=" + p_AD_Org_ID;  int count=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_Client_ID());    pstmt.setInt(2,level.getC_DunningLevel_ID());    if (p_C_BPartner_ID != 0)     pstmt.setInt(3,p_C_BPartner_ID); else     if (p_C_BP_Group_ID != 0)     pstmt.setInt(3,p_C_BP_Group_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      int C_Payment_ID=rs.getInt(1);      int C_Currency_ID=rs.getInt(2);      BigDecimal PayAmt=rs.getBigDecimal(3).negate();      BigDecimal OpenAmt=rs.getBigDecimal(4).negate();      int C_BPartner_ID=rs.getInt(5);      if (Env.ZERO.compareTo(OpenAmt) == 0)       continue;      if (createPaymentLine(C_Payment_ID,C_Currency_ID,PayAmt,OpenAmt,C_BPartner_ID,level.getC_DunningLevel_ID())) {        count++;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    getProcessInfo().addLog(getProcessInfo().getAD_PInstance_ID(),null,null,e.getLocalizedMessage());  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return count;}  }
class C{  public static IgniteUuid randomUuid(){  return new IgniteUuid(VM_ID,cntGen.incrementAndGet());}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'HISTORY_ENTITY' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'CALCULATE_TIME' INTEGER,"+ "'RATE' INTEGER);");}  }
class C{  public void checkRank(double value,double rank){  for (  RankedObservation observation : test.data) {    if (observation.getValue() == value) {      Assert.assertEquals(rank,observation.getRank(),Settings.EPS);    }  }}  }
class C{  protected double organizationalMeasure(Graph<V,E> g,V v){  return 1.0;}  }
class C{  public void onSequenceAborted(int sequenceId){}  }
class C{  public static Float[] convertSVGNumberOptionalNumber(Element elem,String attrName,String attrValue,BridgeContext ctx){  Float[] ret=new Float[2];  if (attrValue.length() == 0)   return ret;  try {    StringTokenizer tokens=new StringTokenizer(attrValue," ");    ret[0]=new Float(Float.parseFloat(tokens.nextToken()));    if (tokens.hasMoreTokens()) {      ret[1]=new Float(Float.parseFloat(tokens.nextToken()));    }    if (tokens.hasMoreTokens()) {      throw new BridgeException(ctx,elem,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attrName,attrValue});    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,elem,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attrName,attrValue,nfEx});  }  return ret;}  }
class C{  public String numExamplesTipText(){  return "The number of examples to generate.";}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public User clear(){  emailHash=null;  isFollowing=false;  return this;}  }
class C{  public static Validator<CharSequence> iri(@NonNull final Context context,@StringRes final int resourceId){  return new IRIValidator(context,resourceId);}  }
class C{  private void drawVerticalDividers(Canvas canvas,RecyclerView parent){  int parentLeft=parent.getPaddingLeft();  int parentRight=parent.getWidth() - parent.getPaddingRight();  int childCount=parent.getChildCount();  int numChildrenOnLastRow=childCount % mNumColumns;  int numRows=childCount / mNumColumns;  if (numChildrenOnLastRow == 0) {    numRows--;  }  for (int i=0; i < numRows; i++) {    View child=parent.getChildAt(i * mNumColumns);    RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    int parentTop=child.getBottom() + params.bottomMargin;    int parentBottom=parentTop + mVerticalDivider.getIntrinsicHeight();    mVerticalDivider.setBounds(parentLeft,parentTop,parentRight,parentBottom);    mVerticalDivider.draw(canvas);  }}  }
class C{  public ModpackDescriptionPanel(WizardController controller,Map wizardData){  initComponents();  this.controller=controller;  this.wizardData=wizardData;}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public static int[] copyOfRange(int[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  int[] copy=new int[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  @SuppressWarnings("unchecked") public final void testSetConstraints(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(true);  Constraint<Object>[] constraints1=new Constraint[1];  constraints1[0]=constraint1;  Constraint<Object>[] constraints2=new Constraint[2];  constraints2[0]=constraint1;  constraints2[1]=constraint2;  DisjunctiveConstraint<Object> disjunctiveConstraint=new DisjunctiveConstraint<>(constraints1);  disjunctiveConstraint.setConstraints(constraints2);  assertEquals(constraints2,disjunctiveConstraint.getConstraints());}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  public static TrueTypeTable createTable(TrueTypeFont ttf,String tagString,ByteBuffer data){  TrueTypeTable outTable=null;  int tag=stringToTag(tagString);switch (tag) {case CMAP_TABLE:    outTable=new CmapTable();  break;case GLYF_TABLE:outTable=new GlyfTable(ttf);break;case HEAD_TABLE:outTable=new HeadTable();break;case HHEA_TABLE:outTable=new HheaTable();break;case HMTX_TABLE:outTable=new HmtxTable(ttf);break;case LOCA_TABLE:outTable=new LocaTable(ttf);break;case MAXP_TABLE:outTable=new MaxpTable();break;case NAME_TABLE:outTable=new NameTable();break;case POST_TABLE:outTable=new PostTable();break;default :outTable=new TrueTypeTable(tag);break;}if (data != null) {outTable.setData(data);}return outTable;}  }
class C{  public URIBuilder addParameter(final String param,final String value){  if (this.queryParams == null) {    this.queryParams=new ArrayList<NameValuePair>();  }  this.queryParams.add(new BasicNameValuePair(param,value));  this.encodedQuery=null;  this.encodedSchemeSpecificPart=null;  return this;}  }
class C{  private PsiElement findBestResult(Multimap<Integer,PsiElement> results,boolean firstResult,PsiElement referenceElement){  if (!hasResults()) {    return null;  }  if (firstResult) {    return Iterators.get(results.values().iterator(),0);  }  int referenceLevel=preferNeigbourhood && (referenceElement != null) ? BashPsiUtils.blockNestingLevel(referenceElement) : 0;  int bestRating=Integer.MAX_VALUE;  int bestDelta=Integer.MAX_VALUE;  for (  int rating : results.keySet()) {    final int delta=Math.abs(referenceLevel - rating);    if (delta < bestDelta) {      bestDelta=delta;      bestRating=rating;    }  }  if (preferNeigbourhood) {    return Iterators.getLast(results.get(bestRating).iterator());  } else {    long smallestOffset=Integer.MAX_VALUE;    PsiElement bestElement=null;    for (    PsiElement e : results.get(bestRating)) {      int textOffset=e.getTextOffset();      if (BashPsiUtils.isInjectedElement(e)) {        PsiLanguageInjectionHost injectionHost=InjectedLanguageManager.getInstance(e.getProject()).getInjectionHost(e);        if (injectionHost != null) {          textOffset=textOffset + injectionHost.getTextOffset();        }      }      if (textOffset < smallestOffset) {        smallestOffset=textOffset;        bestElement=e;      }    }    return bestElement;  }}  }
class C{  protected void drawArcForInterval(Graphics2D g2,Rectangle2D meterArea,MeterInterval interval){  double minValue=interval.getRange().getLowerBound();  double maxValue=interval.getRange().getUpperBound();  Paint outlinePaint=interval.getOutlinePaint();  Stroke outlineStroke=interval.getOutlineStroke();  Paint backgroundPaint=interval.getBackgroundPaint();  if (backgroundPaint != null) {    fillArc(g2,meterArea,minValue,maxValue,backgroundPaint,false);  }  if (outlinePaint != null) {    if (outlineStroke != null) {      drawArc(g2,meterArea,minValue,maxValue,outlinePaint,outlineStroke);    }    drawTick(g2,meterArea,minValue,true);    drawTick(g2,meterArea,maxValue,true);  }}  }
class C{  public static String convertCalendarToStr(Calendar cal) throws Exception {  SimpleDateFormat format=new SimpleDateFormat(ScheduleInfo.FULL_DAYTIME_FORMAT);  String formatted=format.format(cal.getTime());  log.debug("converted calendar time:{}",formatted);  return formatted;}  }
class C{  private void validateSourcePolicy(ProtectionSourcePolicy sourcePolicy){  if (sourcePolicy != null) {    if (sourcePolicy.getJournalSize() != null) {      if (!isParsableToDouble(sourcePolicy.getJournalSize()) && !sourcePolicy.getJournalSize().matches(JOURNAL_REGEX_1) && !sourcePolicy.getJournalSize().matches(JOURNAL_REGEX_2)&& !sourcePolicy.getJournalSize().equals(JOURNAL_MIN)) {        throw APIException.badRequests.protectionVirtualPoolJournalSizeInvalid("source",sourcePolicy.getJournalSize());      }    }    if (sourcePolicy.getRemoteCopyMode() != null) {      if (VirtualPool.RPCopyMode.lookup(sourcePolicy.getRemoteCopyMode()) == null) {        throw APIException.badRequests.protectionVirtualPoolRemoteCopyModeInvalid(sourcePolicy.getRemoteCopyMode());      }    }    if (sourcePolicy.getRpoType() != null) {      if (VirtualPool.RPOType.lookup(sourcePolicy.getRpoType()) == null) {        throw APIException.badRequests.protectionVirtualPoolRPOTypeInvalid(sourcePolicy.getRpoType());      }    }    if (sourcePolicy.getRpoValue() != null && sourcePolicy.getRpoType() == null) {      throw APIException.badRequests.protectionVirtualPoolRPOTypeNotSpecified(sourcePolicy.getRpoValue());    }    if (sourcePolicy.getRpoValue() == null && sourcePolicy.getRpoType() != null) {      throw APIException.badRequests.protectionVirtualPoolRPOValueNotSpecified(sourcePolicy.getRpoType());    }  }}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  @SuppressWarnings("deprecation") protected void stopClusterer(){  if (m_RunThread != null) {    m_RunThread.interrupt();    m_RunThread.stop();  }}  }
class C{  public boolean check(int number){  return set.contains(number);}  }
class C{  public ViewSourceAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  labels.configureAction(this,ID);}  }
class C{  protected final void moveToNextIndex(){  if ((_index=nextIndex()) < 0) {    throw new NoSuchElementException();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.734 -0500",hash_original_method="6CD3D0843AA30F3B07C5B27C93AA8456",hash_generated_method="6CD3D0843AA30F3B07C5B27C93AA8456") Reference(){}  }
class C{  protected void addItemToSection(FormToolkit toolkit,String sectionTitle,String text,Image image,int minColumnWidth){  if (sections.containsKey(sectionTitle)) {    FormText formText=toolkit.createFormText(sections.get(sectionTitle),false);    if (image != null) {      formText.setText("<form><p><img href=\"img\"/> " + text + "</p></form>",true,false);      formText.setImage("img",image);    } else {      formText.setText("<form><p>" + text + "</p></form>",true,false);    }    formText.setLayoutData(new GridData(minColumnWidth,SWT.DEFAULT));  }}  }
class C{  public void removeToTag(){  parameters.delete(ParameterNames.TO_TAG);}  }
class C{  public void add(T t,String id,double percentX,double percentY,double percentWidth,double percentHeight){  surface.addRelative(id,t,percentX,percentY,percentWidth,percentHeight,0,Double.MAX_VALUE,0,Double.MAX_VALUE);  content.getChildren().add(t);}  }
class C{  public static Stats of(long... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public double compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public Rational(){  this(BigInteger.ZERO,BigInteger.ONE);}  }
class C{  @Override public void run(){  try {    Thread.sleep(2000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  RefreshUIActivity.this.runOnUiThread(RefreshUIActivity.this.uiRunnable);}  }
class C{  public void fsyncImpl(){  MappedByteBuffer mmap=_mmap;  try {    if (mmap != null && _isDirty.compareAndSet(true,false)) {      ArrayList<Result<Boolean>> resultList=new ArrayList<>(_resultList);      _resultList.clear();      mmap.force();      for (      Result<Boolean> result : resultList) {        try {          result.ok(Boolean.TRUE);        } catch (        Throwable e) {          e.printStackTrace();        }      }    } else {      ArrayList<Result<Boolean>> resultList=new ArrayList<>(_resultList);      _resultList.clear();      for (      Result<Boolean> result : resultList) {        try {          result.ok(Boolean.TRUE);        } catch (        Throwable e) {          e.printStackTrace();        }      }    }  } catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  public AuthenticatorException(String msg,List<String> messages,Throwable nested){  super(msg,messages,nested);}  }
class C{  public static int encodeToUtf8(char[] chars,int nchars,byte[] bytes,int off){  char c;  int j=off;  for (int i=0; i < nchars; i++) {    if ((c=chars[i]) < 0x80) {      bytes[j++]=(byte)c;    } else     if (c < 0x800) {      bytes[j++]=(byte)(0xC0 | ((c >> 6) & 0x1f));      bytes[j++]=(byte)(0x80 | (c & 0x3f));    } else {      bytes[j++]=(byte)(0xE0 | ((c >> 12) & 0x0f));      bytes[j++]=(byte)(0x80 | ((c >> 6) & 0x3f));      bytes[j++]=(byte)(0x80 | (c & 0x3f));    }  }  return j - off;}  }
class C{  public Boolean visitTypeArgs(final AnnotatedDeclaredType subtype,final AnnotatedDeclaredType supertype,final VisitHistory visited,final boolean subtypeRaw,final boolean supertypeRaw){  final boolean ignoreTypeArgs=ignoreRawTypes && (subtypeRaw || supertypeRaw);  if (!ignoreTypeArgs) {    final List<? extends AnnotatedTypeMirror> subtypeTypeArgs=subtype.getTypeArguments();    final List<? extends AnnotatedTypeMirror> supertypeTypeArgs=supertype.getTypeArguments();    if (subtypeTypeArgs.isEmpty() || supertypeTypeArgs.isEmpty()) {      return true;    }    if (supertypeTypeArgs.size() > 0) {      for (int i=0; i < supertypeTypeArgs.size(); i++) {        final AnnotatedTypeMirror superTypeArg=supertypeTypeArgs.get(i);        final AnnotatedTypeMirror subTypeArg=subtypeTypeArgs.get(i);        if (!compareTypeArgs(subTypeArg,superTypeArg,supertypeRaw,subtypeRaw,visited)) {          return false;        }      }    }  }  return true;}  }
class C{  static public InputSource fileInputSource(File file){  return new InputSource(UriOrFile.fileToUri(file));}  }
class C{  public GeneralSecurityException(){  super();}  }
class C{  public void testNumberOfGeneratedTokens(){  String s;  String[] result;  s="HOWEVER, the egg only got larger and larger, and more and more human";  try {    result=Tokenizer.tokenize(m_Tokenizer,new String[]{s});    assertEquals("number of tokens differ",13,result.length);  } catch (  Exception e) {    fail("Error tokenizing string '" + s + "'!");  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static void modifyPhysicalBTHForAdvantages(Entity attacker,Entity target,ToHitData toHit,IGame game){  if (attacker.getCrew().getOptions().booleanOption("melee_specialist") && (attacker instanceof Mech)) {    toHit.addModifier(-1,"melee specialist");  }  if (attacker.getCrew().getOptions().booleanOption("clan_pilot_training")) {    toHit.addModifier(1,"clan pilot training");  }  if ((target != null) && (target instanceof Mech) && target.getCrew().getOptions().booleanOption("dodge_maneuver")&& (target.dodging)) {    toHit.addModifier(2,"target is dodging");  }}  }
class C{  public static DomainApplication persistDeletedDomainApplication(String domainName,DateTime deletionTime){  return persistResource(newDomainApplication(domainName).asBuilder().setDeletionTime(deletionTime).build());}  }
class C{  private Source generateMainSource(CompilationUnit unit,String packageName,String className,FXGSymbolClass asset) throws IOException {  Source originalSource=unit.getSource();  String generatedName=getGeneratedFileName(packageName,className,"-generated.as");  if (generatedOutputDir != null) {    new File(generatedName).getParentFile().mkdirs();    FileUtil.writeFile(generatedName,asset.getGeneratedSource());  }  TextFile generatedFile=new TextFile(asset.getGeneratedSource(),generatedName,originalSource.getParent(),MimeMappings.AS,originalSource.getLastModified());  AssetInfo assetInfo=new AssetInfo(asset.getSymbol(),generatedFile,originalSource.getLastModified(),null);  unit.getAssets().add(asset.getQualifiedClassName(),assetInfo);  Source generatedSource=new Source(generatedFile,originalSource);  generatedSource.setAssetInfo(assetInfo);  return generatedSource;}  }
class C{  public void createBackup(String backupTag,boolean force){  checkOnStandby();  if (backupTag == null) {    backupTag=createBackupName();  } else {    validateBackupName(backupTag);  }  precheckForCreation(backupTag);  InterProcessLock backupLock=null;  InterProcessLock recoveryLock=null;  try {    backupLock=getLock(BackupConstants.BACKUP_LOCK,BackupConstants.LOCK_TIMEOUT,TimeUnit.MILLISECONDS);    recoveryLock=getLock(RecoveryConstants.RECOVERY_LOCK,BackupConstants.LOCK_TIMEOUT,TimeUnit.MILLISECONDS);    createBackupWithoutLock(backupTag,force);  }  finally {    releaseLock(recoveryLock);    releaseLock(backupLock);  }}  }
class C{  private NettyChannelContext selectHttp2Context(Operation request,NettyChannelGroup group,String link){  NettyChannelContext context=null;  NettyChannelContext badContext=null;  int limit=this.getConnectionLimitPerTag(group.getKey().connectionTag);synchronized (group) {    if (!group.inUseChannels.isEmpty()) {      int index=Math.abs(link.hashCode() % group.inUseChannels.size());      NettyChannelContext ctx=group.inUseChannels.get(index);      if (ctx.isValid()) {        context=ctx;      } else {        LOGGER.info(ctx.getLargestStreamId() + ":" + group.getKey());      }    }    if (context != null) {      if (context.isOpenInProgress() || !group.pendingRequests.isEmpty()) {        group.pendingRequests.add(request);        return null;      }    }    int activeChannelCount=group.inUseChannels.size();    if (context != null && context.hasActiveStreams() && activeChannelCount < limit) {      context=null;    } else     if (context == null) {      for (      NettyChannelContext ctx : group.inUseChannels) {        if (ctx.isValid()) {          context=ctx;          break;        }      }    }    if (context != null && context.getChannel() != null && !context.getChannel().isOpen()) {      badContext=context;      context=null;    }    if (context == null) {      context=new NettyChannelContext(group.getKey(),NettyChannelContext.Protocol.HTTP2);      context.setOpenInProgress(true);      group.inUseChannels.add(context);    }  }  closeBadChannelContext(badContext);  context.updateLastUseTime();  return context;}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public static boolean parseInterpolatedConstructs(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  if (((PerlBuilder)b).isUseVarsContent()) {    PsiBuilder.Marker m=b.mark();    boolean r=PerlParserImpl.use_vars_interpolated_constructs(b,l);    if (r) {      LighterASTNode lastMarker=b.getLatestDoneMarker();      if (lastMarker != null) {        IElementType elementType=lastMarker.getTokenType();        if (elementType == SCALAR_VARIABLE || elementType == ARRAY_VARIABLE || elementType == HASH_VARIABLE) {          m.done(VARIABLE_DECLARATION_WRAPPER);          return true;        }      }    }    m.drop();    return r;  } else {    return PerlParserImpl.interpolated_constructs(b,l);  }}  }
class C{  public static void validate(TechnicalProduct techProduct,String oldLicenseText,String newLicenseText){  if (techProduct == null) {    return;  }  if (oldLicenseText == null) {    return;  }  if (equalsContent(oldLicenseText,newLicenseText)) {    return;  }  if (oldLicenseText.equals(newLicenseText)) {    return;  }}  }
class C{  public ByteArray(){  this(32);}  }
class C{  public void paintTreeCellBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  SimulationBody circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  SimulationBody rectangle=new SimulationBody();  rectangle.addFixture(Geometry.createRectangle(1,1));  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  this.world.addBody(rectangle);  this.world.addListener(new StopContactListener(circle,rectangle));}  }
class C{  public static void assumeFalse(BooleanSupplier assumptionSupplier) throws TestAbortedException {  assumeFalse(assumptionSupplier,null);}  }
class C{  public static List<RepositoryLocation> removeIntersectedLocations(List<RepositoryLocation> repositoryLocations){  List<RepositoryLocation> locations=new LinkedList<>(repositoryLocations);  try {    Set<RepositoryLocation> removeSet=new HashSet<>();    for (    RepositoryLocation locationA : locations) {      for (      RepositoryLocation locationB : locations) {        if (!locationA.equals(locationB) && locationA.getRepository().equals(locationB.getRepository())) {          String pathA=locationA.getPath();          String pathB=locationB.getPath();          if (pathA.startsWith(pathB) && pathA.substring(pathB.length(),pathB.length() + 1).equals(String.valueOf(SEPARATOR))) {            removeSet.add(locationA);          }        }      }    }    locations.removeAll(removeSet);  } catch (  RepositoryException e) {    return repositoryLocations;  }  return locations;}  }
class C{  protected void SSE2_NCOP(Operator operator,Instruction s,Operand result,Operand val1,Operand val2){  if (VM.VerifyAssertions)   opt_assert(result.isRegister());  if (result.similar(val1)) {    EMIT(MIR_BinaryAcc.mutate(s,operator,result,val2));  } else   if (!result.similar(val2)) {    EMIT(CPOS(s,MIR_Move.create(SSE2_MOVE(result),result.copy(),val1)));    EMIT(MIR_BinaryAcc.mutate(s,operator,result,val2));  } else {    RegisterOperand temp=regpool.makeTemp(result);    EMIT(CPOS(s,MIR_Move.create(SSE2_MOVE(result),temp,val1)));    EMIT(MIR_BinaryAcc.mutate(s,operator,temp.copyRO(),val2));    EMIT(CPOS(s,MIR_Move.create(SSE2_MOVE(result),result,temp.copyRO())));  }}  }
class C{  public static Map<StreamKind,List<Map<String,String>>> snapshot(Path file) throws IOException {  MediaInfo mi=new MediaInfo();  try {    if (mi.open(file)) {      return mi.snapshot();    } else {      throw new IOException("Failed to open file: " + file);    }  }  finally {    mi.close();  }}  }
class C{  public static int countNonzeroPairs(final long x){  return Long.bitCount((x | x >>> 1) & 0x5555555555555555L);}  }
class C{  public void onDestroy(){  mBackgroundExecution.cancel(true);  return;}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void processUsers(LocalContainer container,File configOverrides) throws IOException {  List<User> userList=getUsers();  if (userList != null) {    Map<String,List<String>> groups=new HashMap<String,List<String>>();    Map<String,String> users=new HashMap<String,String>();    for (    User u : userList) {      users.put(u.getName(),u.getPassword());      for (      String group : u.getRoles()) {        List<String> members=groups.get(group);        if (members == null) {          members=new ArrayList<String>();          groups.put(group,members);        }        members.add(u.getName());      }    }    writeUserRegistry(container,configOverrides,users,groups);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.393 -0500",hash_original_method="574EFAE567BAC054324E4789AB0ACA21",hash_generated_method="1670645142CBE11F3C7719961E4505B3") void onMMIDone(CdmaMmiCode mmi){  if (mPendingMmis.remove(mmi)) {    mMmiCompleteRegistrants.notifyRegistrants(new AsyncResult(null,mmi,null));  }}  }
class C{  public static void silence(){  System.setOut(nullout);}  }
class C{  public static void main(String args[]){  long n=Long.parseLong(args[0]);  long N=Long.parseLong(args[1]);  long low=Long.parseLong(args[2]);  int chunkSize=Integer.parseInt(args[3]);  int times=Integer.parseInt(args[4]);  test(n,N,low,chunkSize,times);}  }
class C{  public void subtract(final Number operand){  this.value-=operand.intValue();}  }
class C{  private double adjustTransform(){  double xMin=Double.POSITIVE_INFINITY;  double xMax=Double.NEGATIVE_INFINITY;  double yMin=Double.POSITIVE_INFINITY;  double yMax=Double.NEGATIVE_INFINITY;  for (  Variable var : csp.getVariables()) {    Point2D point=getPosition(var);    xMin=Math.min(xMin,point.getX());    xMax=Math.max(xMax,point.getX());    yMin=Math.min(yMin,point.getY());    yMax=Math.max(yMax,point.getY());  }  double scale=Math.min(pane.getWidth() / (xMax - xMin + 300),pane.getHeight() / (yMax - yMin + 150));  pane.setTranslateX((scale * (pane.getWidth() - xMin - xMax) / 2.0));  pane.setTranslateY((scale * (pane.getHeight() - yMin - yMax) / 2.0));  pane.setScaleX(scale);  pane.setScaleY(scale);  return scale;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Address minus(int v){  return null;}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  public boolean hideCard(String tag){  final Card card=mVisibleCards.get(tag);  if (card != null) {    mVisibleCards.remove(tag);    mDismissibleCards.remove(tag);    mHiddenCards.put(tag,card);    mLayout.removeView(card.getView());    return true;  }  return mHiddenCards.containsValue(tag);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public boolean clean(){  try {    FileUtils.deleteDirectory(new File(Properties.CTG_DIR));  } catch (  IOException e) {    logger.error("Cannot delete folder " + Properties.CTG_DIR + ": "+ e,e);    return false;  }  return true;}  }
class C{  public Properties loadProperties(String resourceName,String subDir){  Properties result=new Properties();  Resource resource=this.loadResource(resourceName,subDir);  try {    result.load(resource.getInputStream());  } catch (  IOException e) {    String message=e.getLocalizedMessage();    message="Error cargando properties:" + subDir + File.separator+ resourceName+ "--- "+ message;    logger.error(message);    throw new RuntimeException(message);  }  return result;}  }
class C{  private String createKey(UIComponent table){  return TableColumnCache.KEY + '_' + table.hashCode();}  }
class C{  public void add(DurationFieldType field,int value){  super.addField(field,value);}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MPeriod.testPeriodOpen(getCtx(),getDateAcct(),getC_DocTypeTarget_ID(),getAD_Org_ID());  MInvoiceLine[] lines=getLines(true);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  if (PAYMENTRULE_Cash.equals(getPaymentRule()) && MCashBook.get(getCtx(),getAD_Org_ID(),getC_Currency_ID()) == null) {    m_processMsg="@NoCashBook@";    return DocAction.STATUS_Invalid;  }  if (getC_DocType_ID() != getC_DocTypeTarget_ID())   setC_DocType_ID(getC_DocTypeTarget_ID());  if (getC_DocType_ID() == 0) {    m_processMsg="No Document Type";    return DocAction.STATUS_Invalid;  }  explodeBOM();  if (!calculateTaxTotal()) {    m_processMsg="Error calculating Tax";    return DocAction.STATUS_Invalid;  }  createPaySchedule();  if (isSOTrx() && !isReversal()) {    MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),null);    if (MBPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus())) {      m_processMsg="@BPartnerCreditStop@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();      return DocAction.STATUS_Invalid;    }  }  if (!isSOTrx()) {    for (int i=0; i < lines.length; i++) {      MInvoiceLine line=lines[i];      String error=line.allocateLandedCosts();      if (error != null && error.length() > 0) {        m_processMsg=error;        return DocAction.STATUS_Invalid;      }    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  public void removeWallet(Wallet wallet){  wallets.remove(checkNotNull(wallet));  peerFilterProviders.remove(wallet);  wallet.removeCoinsReceivedEventListener(walletCoinsReceivedEventListener);  wallet.removeKeyChainEventListener(walletKeyEventListener);  wallet.removeScriptChangeEventListener(walletScriptEventListener);  wallet.setTransactionBroadcaster(null);  for (  Peer peer : peers) {    peer.removeWallet(wallet);  }}  }
class C{  public TemplateBuffer updateBuffer() throws MalformedTreeException, BadLocationException {  checkState();  TemplateVariable[] variables=fBuffer.getVariables();  try {    removeRangeMarkers(fPositions,fDocument,variables);  } catch (  BadPositionCategoryException x) {    Assert.isTrue(false);  }  fBuffer.setContent(fDocument.get(),variables);  fDocument=null;  return fBuffer;}  }
class C{  public MyComparableObjectSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){  super(key,autoSort,allowDuplicateXValues);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.132 -0500",hash_original_method="AE2AC52C1B086D07AB414F4634EAA37E",hash_generated_method="DA3324DED8188362CBB4DD2028BC1249") private Data(){}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public MBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact){  this(name,description,signature,type,impact,(Descriptor)null);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected Bitmap decodeJPEGByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,int length,BitmapFactory.Options options){  byte[] suffix=endsWithEOI(bytesRef,length) ? null : EOI;  final PooledByteBuffer pooledByteBuffer=bytesRef.get();  Preconditions.checkArgument(length <= pooledByteBuffer.size());  final CloseableReference<byte[]> encodedBytesArrayRef=mFlexByteArrayPool.get(length + 2);  try {    byte[] encodedBytesArray=encodedBytesArrayRef.get();    pooledByteBuffer.read(0,encodedBytesArray,0,length);    if (suffix != null) {      putEOI(encodedBytesArray,length);      length+=2;    }    Bitmap bitmap=BitmapFactory.decodeByteArray(encodedBytesArray,0,length,options);    return Preconditions.checkNotNull(bitmap,"BitmapFactory returned null");  }  finally {    CloseableReference.closeSafely(encodedBytesArrayRef);  }}  }
class C{  private void createFieldAnnotation(CAS cas,String nodeTag,int begin,int end){  JCas jcas=null;  try {    jcas=cas.getJCas();  } catch (  CASException e) {    throw new RuntimeException(e);  }  Field field=new Field(jcas,begin,end);  field.setName(nodeTag);  field.addToIndexes();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UserDao.dropTable(db,ifExists);}  }
class C{  boolean isInternalURL(String serviceAccessURL){  if (serviceAccessURL == null || serviceAccessURL.length() == 0) {    return false;  }  return isMatch(serviceAccessURL,getApplicationBean().getServerBaseUrl()) || isMatch(serviceAccessURL,getApplicationBean().getServerBaseUrlHttps());}  }
class C{  public NetworkTopologyEventImpl(JmDNS jmDNS,InetAddress inetAddress){  super(jmDNS);  this._inetAddress=inetAddress;}  }
class C{  public boolean roundXYToGrid(int index){  return ((getFlag(index) & ROUND_XY_TO_GRID) != 0);}  }
class C{  public Trie buildTrie(String[] data){  Trie result;  int i;  result=new Trie();  for (i=0; i < data.length; i++)   result.add(data[i]);  return result;}  }
class C{  public void paint(java.awt.Graphics g){  if (Debug.debugging("location")) {    Debug.output(getName() + "|LocationLayer.paint()");  }  OMGraphicList omgList=getList();  if (omgList != null) {    for (    OMGraphic omg : omgList) {      if (omg instanceof Location) {        ((Location)omg).renderLocation(g);      } else {        omg.render(g);      }    }    for (    OMGraphic omg : omgList) {      if (omg instanceof Location) {        ((Location)omg).renderName(g);      }    }  } else {    if (Debug.debugging("location")) {      Debug.error(getName() + "|LocationLayer: paint(): Null list...");    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDevice capDev=getCapDev(stack);  return capDev == null ? null : capDev.getEncodingQualities();}  }
class C{  @Override public int hashCode(){  return key == null ? 0 : key.hashCode();}  }
class C{  public static void enableTraceCalls(){  traceCalls=true;}  }
class C{  public void hideWindow(){  doHide();}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream seq=new DerOutputStream();  for (int i=0, n=size(); i < n; i++) {    get(i).encode(seq);  }  out.write(DerValue.tag_Sequence,seq);}  }
class C{  public void encoding(String charset){  setEncoding(charset);}  }
class C{  public void log(String tag,String message){  Log.d(tag,message);}  }
class C{  public void resetStats(){  if (lock.tryLock()) {    try {      ensureInitialized();      updateStats();    }  finally {      lock.unlock();    }  }}  }
class C{  public GenericFeed retrievePageOfMembers(Link next) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getNextPage(next);}  }
class C{  public void deleteRow(int selectedRow){  int i=0;  for (  final TradelogDetail element : getData().getTradelogDetail()) {    if (i == selectedRow) {      getData().getTradelogDetail().remove(element);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }    i++;  }}  }
class C{  static String pathToCookiePath(String path){  if (path == null) {    return "/";  }  int lastSlash=path.lastIndexOf('/');  return path.substring(0,lastSlash + 1);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  @Override public Vertex parseEquationByteCode(Vertex equation,BinaryData data,Network network) throws IOException {  return new SelfDecompiler().parseEquationByteCode(equation,data,network);}  }
class C{  protected void finishFont() throws IOException {  out=writer.getOutStream();  int glyphCount=glyphByteArrays.size();  int offset=glyphCount * 2;  out.writeUI16(offset);  for (int i=0; i < glyphCount - 1; i++) {    offset+=((byte[])glyphByteArrays.get(i)).length;    out.writeUI16(offset);  }  for (int i=0; i < glyphCount; i++) {    out.write((byte[])glyphByteArrays.get(i));  }}  }
class C{  public SVG12URIResolver(SVGDocument doc,DocumentLoader dl){  super(doc,dl);}  }
class C{  public void localTransactionRolledback(ConnectionEvent event){}  }
class C{  private List<Extension> matchExtensions(List<String> plugins,Extension[] extensions,String contentType){  List<Extension> extList=new ArrayList<Extension>();  if (plugins != null) {    for (    String parsePluginId : plugins) {      Extension ext=getExtension(extensions,parsePluginId,contentType);      if (ext == null) {        ext=getExtension(extensions,parsePluginId);        if (LOG.isWarnEnabled()) {          if (ext != null) {            LOG.warn("ParserFactory:Plugin: " + parsePluginId + " mapped to contentType "+ contentType+ " via parse-plugins.xml, but "+ "its plugin.xml "+ "file does not claim to support contentType: "+ contentType);          } else {            LOG.warn("ParserFactory: Plugin: " + parsePluginId + " mapped to contentType "+ contentType+ " via parse-plugins.xml, but not enabled via "+ "plugin.includes in nutch-default.xml");          }        }      }      if (ext != null) {        extList.add(ext);      }    }  } else {    for (int i=0; i < extensions.length; i++) {      if ("*".equals(extensions[i].getAttribute("contentType"))) {        extList.add(0,extensions[i]);      } else       if (extensions[i].getAttribute("contentType") != null && contentType.matches(escapeContentType(extensions[i].getAttribute("contentType")))) {        extList.add(extensions[i]);      }    }    if (extList.size() > 0) {      if (LOG.isInfoEnabled()) {        StringBuffer extensionsIDs=new StringBuffer("[");        boolean isFirst=true;        for (        Extension ext : extList) {          if (!isFirst)           extensionsIDs.append(" - "); else           isFirst=false;          extensionsIDs.append(ext.getId());        }        extensionsIDs.append("]");        LOG.info("The parsing plugins: " + extensionsIDs.toString() + " are enabled via the plugin.includes system "+ "property, and all claim to support the content type "+ contentType+ ", but they are not mapped to it  in the "+ "parse-plugins.xml file");      }    } else     if (LOG.isDebugEnabled()) {      LOG.debug("ParserFactory:No parse plugins mapped or enabled for " + "contentType " + contentType);    }  }  return (extList.size() > 0) ? extList : null;}  }
class C{  public void offline(TungstenProperties params) throws Exception {  try {    doShutdown(params);    context.getEventDispatcher().put(new OfflineNotification());  } catch (  ReplicatorException e) {    String pendingError="Replicator service shutdown failed";    if (logger.isDebugEnabled())     logger.debug(pendingError,e);    throw e;  }catch (  Throwable e) {    String pendingError="Replicator service shutdown failed due to underlying error";    logger.error(pendingError,e);    throw new ReplicatorException(pendingError + e);  }}  }
class C{  public static String m2s(Map map){  if (isDebug) {    if (map == null) {      return "";    }    StringBuilder sb=new StringBuilder();    Set set=map.entrySet();    for (    Object aSet : set) {      Map.Entry entry=(Map.Entry)aSet;      sb.append(entry.getValue());    }    return sb.toString();  }  return "";}  }
class C{  protected int convertText(String text,Locale locale){  return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);}  }
class C{  public static <T>T waitForState(Supplier<T> supplier,Predicate<T> predicate,Runnable cleanup,String timeoutMessage) throws Throwable {  return waitForState(supplier,predicate,WAIT_ITERATION_SLEEP_MILLIS,WAIT_ITERATION_COUNT,cleanup,timeoutMessage);}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    _logger.info(String.format("Updating status of job %s to %s",opId,_status.name()));    URI snapId=getTaskCompleter().getId();    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapId);    if (_status == JobStatus.SUCCESS && snapshotObj != null) {      if (snapshotObj.getConsistencyGroup() != null) {        List<BlockSnapshot> snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshotObj,dbClient);        for (        BlockSnapshot snapshot : snapshots) {          processSnapshot(snapshot,dbClient);        }      } else {        processSnapshot(snapshotObj,dbClient);      }      getTaskCompleter().ready(dbClient);    } else     if (_status == JobStatus.FAILED && snapshotObj != null) {      _logger.info(String.format("Task %s failed to delete volume snapshot: %s",opId,snapshotObj.getLabel()));    }  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeBlockDeleteSnapshotJob",e);    setErrorStatus("Encountered an internal error during volume snapshot delete job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  private boolean compileSWsequenceZR(int baseRegister,int[] offsets,int[] registers){  for (int i=0; i < registers.length; i++) {    if (registers[i] != _zr) {      return false;    }  }  for (int i=1; i < offsets.length; i++) {    if (offsets[i] != offsets[i - 1] + 4) {      return false;    }  }  int offset=offsets[0];  int length=offsets.length;  do {    int copyLength=Math.min(length,FastMemory.zero.length);    mv.visitFieldInsn(Opcodes.GETSTATIC,Type.getInternalName(FastMemory.class),"zero","[I");    loadImm(0);    loadMemoryInt();    prepareMemIndex(baseRegister,offset,false,32);    loadImm(copyLength);    mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(System.class),"arraycopy",arraycopyDescriptor);    length-=copyLength;    offset+=copyLength;  } while (length > 0);  return true;}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public Value convert(Value v){  try {    return v.convertTo(type);  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.DATA_CONVERSION_ERROR_1) {      String target=(table == null ? "" : table.getName() + ": ") + getCreateSQL();      throw DbException.get(ErrorCode.DATA_CONVERSION_ERROR_1,v.getSQL() + " (" + target+ ")");    }    throw e;  }}  }
class C{  public void registerModelUpdatePeriodChangeListener(final PropertyChangeListener listener){  modelUpdatePeriodListeners.add(listener);}  }
class C{  public AccountHeaderBuilder withSelectionListEnabledForSingleProfile(boolean selectionListEnabledForSingleProfile){  this.mSelectionListEnabledForSingleProfile=selectionListEnabledForSingleProfile;  return this;}  }
class C{  private OsmUser readUser(){  String rawUserId;  String rawUserName;  rawUserId=reader.getAttributeValue(null,ATTRIBUTE_NAME_USER_ID);  rawUserName=reader.getAttributeValue(null,ATTRIBUTE_NAME_USER);  if (rawUserId != null) {    int userId;    String userName;    userId=Integer.parseInt(rawUserId);    if (rawUserName == null) {      userName="";    } else {      userName=rawUserName;    }    return new OsmUser(userId,userName);  } else {    return OsmUser.NONE;  }}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  protected boolean registerProperty(String namespaceURI,String propertyName,String type){  if (namespaceURI == null) {    throw new IllegalArgumentException("Argument namespaceURI can not be null");  }  if (propertyName == null) {    throw new IllegalArgumentException("Argument property name can not be null");  }  if (type == null) {    throw new IllegalArgumentException("Argument type can not be null");  }  if (!this.validator.isKnownType(type)) {    return false;  }  QName name=new QName(namespaceURI,propertyName);  if (this.properties.containsKey(name)) {    return false;  }  this.properties.put(name,type);  return true;}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public Object deserializeObject(File file) throws FileNotFoundException, IOException, ClassNotFoundException {  logger.info("Loading cache from file: " + file.getAbsolutePath());  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file));  Object o=ois.readObject();  ois.close();  logger.info("Done.");  return o;}  }
class C{  public Hash(byte[] hash){  if (hash.length != 32) {    throw new IllegalArgumentException("Digest length must be 32 bytes for Hash");  }  this.bytes=new byte[32];  System.arraycopy(hash,0,this.bytes,0,32);}  }
class C{  private String secondsToTime(int seconds){  String time="";  String minutesText=String.valueOf(seconds / 60);  if (minutesText.length() == 1)   minutesText="0" + minutesText;  String secondsText=String.valueOf(seconds % 60);  if (secondsText.length() == 1)   secondsText="0" + secondsText;  time=minutesText + ":" + secondsText;  return time;}  }
class C{  public void addChild(ZkDataNode child){  allChildren.add(child);}  }
class C{  static char processCharLiteral(String entity) throws IOException, XMLParseException {  if (entity.charAt(2) == 'x') {    entity=entity.substring(3,entity.length() - 1);    return (char)Integer.parseInt(entity,16);  } else {    entity=entity.substring(2,entity.length() - 1);    return (char)Integer.parseInt(entity,10);  }}  }
class C{  public final RegExp rev(Macros macros){  RegExp1 unary;  RegExp2 binary;  RegExp content;switch (type) {case sym.BAR:    binary=(RegExp2)this;  return new RegExp2(sym.BAR,binary.r1.rev(macros),binary.r2.rev(macros));case sym.CONCAT:binary=(RegExp2)this;return new RegExp2(sym.CONCAT,binary.r2.rev(macros),binary.r1.rev(macros));case sym.STAR:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.STAR,content.rev(macros));case sym.PLUS:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.PLUS,content.rev(macros));case sym.QUESTION:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.QUESTION,content.rev(macros));case sym.BANG:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.BANG,content.rev(macros));case sym.TILDE:content=resolveTilde(macros);return content.rev(macros);case sym.STRING:case sym.STRING_I:unary=(RegExp1)this;return new RegExp1(unary.type,revString((String)unary.content));case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:unary=(RegExp1)this;return new RegExp1(unary.type,unary.content);case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).rev(macros);}throw new Error("unknown regexp type " + type);}  }
class C{  public final double SFMeanSchemeEntropy(){  return m_delegate.SFMeanSchemeEntropy();}  }
class C{  public static boolean containsOnlyAlphaDigitHyphen(final String... values){  if (values == null) {    return true;  }  return containsOnlyAlphaDigitHyphen(Arrays.asList(values));}  }
class C{  public void appendBoolean(boolean val){  buf[pos++]=(byte)(val ? 1 : 0);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override public java_cup.runtime.Symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$Parser$do_action(act_num,parser,stack,top);}  }
class C{  public int hashCode(){  long bits=java.lang.Double.doubleToLongBits(getX());  bits+=java.lang.Double.doubleToLongBits(getY()) * 37;  bits+=java.lang.Double.doubleToLongBits(getWidth()) * 43;  bits+=java.lang.Double.doubleToLongBits(getHeight()) * 47;  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  public Epoch createEpoch(ServerViewController recManager){  epochsLock.lock();  Set<Integer> keys=epochs.keySet();  int max=-1;  for (  int k : keys) {    if (k > max)     max=k;  }  max++;  Epoch epoch=new Epoch(recManager,this,max);  epochs.put(max,epoch);  epochsLock.unlock();  return epoch;}  }
class C{  public void validateParseTree(DMLProgram dmlp) throws LanguageException, ParseException, IOException {  boolean fWriteRead=prepareReadAfterWrite(dmlp,new HashMap<String,DataIdentifier>());  for (  String namespaceKey : dmlp.getNamespaces().keySet()) {    for (    String fname : dmlp.getFunctionStatementBlocks(namespaceKey).keySet()) {      FunctionStatementBlock fblock=dmlp.getFunctionStatementBlock(namespaceKey,fname);      HashMap<String,ConstIdentifier> constVars=new HashMap<String,ConstIdentifier>();      VariableSet vs=new VariableSet();      FunctionStatement fstmt=(FunctionStatement)fblock.getStatement(0);      if (fblock.getNumStatements() > 1) {        LOG.error(fstmt.printErrorLocation() + "FunctionStatementBlock can only have 1 FunctionStatement");        throw new LanguageException(fstmt.printErrorLocation() + "FunctionStatementBlock can only have 1 FunctionStatement");      }      for (      DataIdentifier currVar : fstmt.getInputParams()) {        if (currVar.getDataType() == DataType.SCALAR) {          currVar.setDimensions(0,0);        }        vs.addVariable(currVar.getName(),currVar);      }      fblock.validate(dmlp,vs,constVars,false);    }  }  VariableSet vs=new VariableSet();  HashMap<String,ConstIdentifier> constVars=new HashMap<String,ConstIdentifier>();  for (int i=0; i < dmlp.getNumStatementBlocks(); i++) {    StatementBlock sb=dmlp.getStatementBlock(i);    vs=sb.validate(dmlp,vs,constVars,fWriteRead);    constVars=sb.getConstOut();  }  if (fWriteRead) {    prepareReadAfterWrite(dmlp,new HashMap<String,DataIdentifier>());    vs=new VariableSet();    constVars=new HashMap<String,ConstIdentifier>();    for (int i=0; i < dmlp.getNumStatementBlocks(); i++) {      StatementBlock sb=dmlp.getStatementBlock(i);      vs=sb.validate(dmlp,vs,constVars,fWriteRead);      constVars=sb.getConstOut();    }  }  return;}  }
class C{  public ErrorResponse(final TimeInstant timeStamp,final Exception e,final HttpStatus status){  this(timeStamp,e.getMessage(),status.value());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.796 -0500",hash_original_method="152402B1F19F5AF3A149355992289F4E",hash_generated_method="5A7C233B5CE9F29C1DD832CCE8FC99D4") static Item retrieveItem(ComprehensionTlv ctlv) throws ResultException {  Item item=null;  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  int length=ctlv.getLength();  if (length != 0) {    int textLen=length - 1;    try {      int id=rawValue[valueIndex] & 0xff;      String text=IccUtils.adnStringFieldToString(rawValue,valueIndex + 1,textLen);      item=new Item(id,text);    } catch (    IndexOutOfBoundsException e) {      throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);    }  }  return item;}  }
class C{  public ECPair transform(ECPair cipherText){  if (key == null) {    throw new IllegalStateException("ECNewPublicKeyTransform not initialised");  }  ECDomainParameters ec=key.getParameters();  BigInteger n=ec.getN();  ECMultiplier basePointMultiplier=createBasePointMultiplier();  BigInteger k=ECUtil.generateK(n,random);  ECPoint[] gamma_phi=new ECPoint[]{basePointMultiplier.multiply(ec.getG(),k),key.getQ().multiply(k).add(cipherText.getY())};  ec.getCurve().normalizeAll(gamma_phi);  return new ECPair(gamma_phi[0],gamma_phi[1]);}  }
class C{  @SuppressWarnings("UnusedReturnValue") public boolean signOut(Context ctx,String providerName){  Context appContext=ctx.getApplicationContext();  CookieManager cookieManager=CookieManager.getInstance();  cookieManager.removeAllCookie();  if (providerName != null) {    if (socialAuthManager.getConnectedProvidersIds().contains(providerName))     socialAuthManager.disconnectProvider(providerName);    Editor edit=PreferenceManager.getDefaultSharedPreferences(appContext).edit();    edit.remove(providerName + " key");    edit.apply();    Log.d("SocialAuthAdapter","Disconnecting Provider");    return true;  } else {    Log.d("SocialAuthAdapter","The provider name should be same");    return false;  }}  }
class C{  public static void debug(String trace){  log.debug(trace);}  }
class C{  public static void startCalendarMetafeedSync(Account account){  Bundle extras=new Bundle();  extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  extras.putBoolean("metafeedonly",true);  ContentResolver.requestSync(account,Calendars.CONTENT_URI.getAuthority(),extras);}  }
class C{  public static byte[] toBytes(String value){  return doToBytes(value,"UTF-8");}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  public void addAll(Iterator<? extends Number> values){  while (values.hasNext()) {    add(values.next().doubleValue());  }}  }
class C{  public List<Integer> emit(Tuple anchor,List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,anchor,tuple);}  }
class C{  public static double squarePointsToMillis(double area){  return squareInchToMillis(squarePointsToInch(area));}  }
class C{  public FilledList(final Collection<? extends T> collection){  super(collection);  for (  final T t : collection) {    Preconditions.checkNotNull(t,"Error: Can not add null-elements to filled lists");  }}  }
class C{  public MLetObjectInputStream(InputStream in,MLet loader) throws IOException, StreamCorruptedException {  super(in);  if (loader == null) {    throw new IllegalArgumentException("Illegal null argument to MLetObjectInputStream");  }  this.loader=loader;}  }
class C{  public boolean isShowingPopup(){  return getListPopupWindow().isShowing();}  }
class C{  public WebPermission(String name,String... roles){  this(name,null,roles);}  }
class C{  public void clear(){  messages=Collections.emptyList();  isMessagesListMutable=false;  if (builders != null) {    for (    SingleFieldBuilder<MType,BType,IType> entry : builders) {      if (entry != null) {        entry.dispose();      }    }    builders=null;  }  onChanged();  incrementModCounts();}  }
class C{  private byte deltaMarkState(boolean increment){  byte mask=(byte)(((1 << Options.markSweepMarkBits.getValue()) - 1) << COUNT_BASE);  byte rtn=(byte)(increment ? markState + MARK_COUNT_INCREMENT : markState - MARK_COUNT_INCREMENT);  rtn&=mask;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((markState & ~MARK_COUNT_MASK) == 0);  return rtn;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.TIME_EVENT__PERIODIC:    setPeriodic(PERIODIC_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static void saveClassBackup(String className,ClassLoader loader,byte[] classBytes) throws IOException {  long t0=System.nanoTime();  try {    File bkpFile=getClassFile(className,loader);    if (bkpFile.exists()) {      throw new Profiler4JError("Backup file already exists: " + bkpFile);    }    Log.print(2,"saving backup " + bkpFile);    FileOutputStream fos=new FileOutputStream(bkpFile);    BufferedOutputStream bos=new BufferedOutputStream(fos);    bos.write(classBytes);    bos.close();  }  finally {    long dt=System.nanoTime() - t0;    totalWriteTime.addAndGet(dt);  }}  }
class C{  public GT_Recipe findRecipe(IHasWorldObjectAndCoords aTileEntity,GT_Recipe aRecipe,boolean aNotUnificated,long aVoltage,FluidStack[] aFluids,ItemStack aSpecialSlot,ItemStack... aInputs){  if (mRecipeList.isEmpty())   return null;  if (GregTech_API.sPostloadFinished) {    if (mMinimalInputFluids > 0) {      if (aFluids == null)       return null;      int tAmount=0;      for (      FluidStack aFluid : aFluids)       if (aFluid != null)       tAmount++;      if (tAmount < mMinimalInputFluids)       return null;    }    if (mMinimalInputItems > 0) {      if (aInputs == null)       return null;      int tAmount=0;      for (      ItemStack aInput : aInputs)       if (aInput != null)       tAmount++;      if (tAmount < mMinimalInputItems)       return null;    }  }  if (aNotUnificated)   aInputs=GT_OreDictUnificator.getStackArray(true,(Object[])aInputs);  if (aRecipe != null)   if (!aRecipe.mFakeRecipe && aRecipe.mCanBeBuffered && aRecipe.isRecipeInputEqual(false,true,aFluids,aInputs))   return aRecipe.mEnabled && aVoltage * mAmperage >= aRecipe.mEUt ? aRecipe : null;  if (mUsualInputCount > 0 && aInputs != null)   for (  ItemStack tStack : aInputs)   if (tStack != null) {    Collection<GT_Recipe> tRecipes=mRecipeItemMap.get(new GT_ItemStack(tStack));    if (tRecipes != null)     for (    GT_Recipe tRecipe : tRecipes)     if (!tRecipe.mFakeRecipe && tRecipe.isRecipeInputEqual(false,true,aFluids,aInputs))     return tRecipe.mEnabled && aVoltage * mAmperage >= tRecipe.mEUt ? tRecipe : null;    tRecipes=mRecipeItemMap.get(new GT_ItemStack(GT_Utility.copyMetaData(W,tStack)));    if (tRecipes != null)     for (    GT_Recipe tRecipe : tRecipes)     if (!tRecipe.mFakeRecipe && tRecipe.isRecipeInputEqual(false,true,aFluids,aInputs))     return tRecipe.mEnabled && aVoltage * mAmperage >= tRecipe.mEUt ? tRecipe : null;  }  if (mMinimalInputItems == 0 && aFluids != null)   for (  FluidStack aFluid : aFluids)   if (aFluid != null) {    Collection<GT_Recipe> tRecipes=mRecipeFluidMap.get(aFluid.getFluid());    if (tRecipes != null)     for (    GT_Recipe tRecipe : tRecipes)     if (!tRecipe.mFakeRecipe && tRecipe.isRecipeInputEqual(false,true,aFluids,aInputs))     return tRecipe.mEnabled && aVoltage * mAmperage >= tRecipe.mEUt ? tRecipe : null;  }  return null;}  }
class C{  public CUDA_TEXTURE_DESC(){}  }
class C{  final public int hashCode(){  final char[] a=pattern;  final int l=a.length;  int h;  for (int i=h=0; i < l; i++)   h=31 * h + a[i];  return h;}  }
class C{  public static JNIWriter instance(Context context){  JNIWriter instance=context.get(jniWriterKey);  if (instance == null)   instance=new JNIWriter(context);  return instance;}  }
class C{  public BusinessObjectFormatCreateRequest createBusinessObjectFormatCreateRequest(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,String partitionKey,String description,List<Attribute> attributes,List<AttributeDefinition> attributeDefinitions,Schema schema){  BusinessObjectFormatCreateRequest businessObjectFormatCreateRequest=new BusinessObjectFormatCreateRequest();  businessObjectFormatCreateRequest.setNamespace(namespaceCode);  businessObjectFormatCreateRequest.setBusinessObjectDefinitionName(businessObjectDefinitionName);  businessObjectFormatCreateRequest.setBusinessObjectFormatUsage(businessObjectFormatUsage);  businessObjectFormatCreateRequest.setBusinessObjectFormatFileType(businessObjectFormatFileType);  businessObjectFormatCreateRequest.setPartitionKey(partitionKey);  businessObjectFormatCreateRequest.setDescription(description);  businessObjectFormatCreateRequest.setAttributes(attributes);  businessObjectFormatCreateRequest.setAttributeDefinitions(attributeDefinitions);  businessObjectFormatCreateRequest.setSchema(schema);  return businessObjectFormatCreateRequest;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static void addQueryOrTemplateCalls(Resource cls,Property predicate,List<QueryOrTemplateCall> results){  List<Statement> ss=JenaUtil.listAllProperties(cls,predicate).toList();  if (ss.isEmpty() && cls != null && cls.isURIResource()) {    Template template=SPINModuleRegistry.get().getTemplate(cls.getURI(),null);    if (template != null) {      ss=JenaUtil.listAllProperties(template,predicate).toList();    }  }  for (  Statement s : ss) {    if (s.getObject().isResource()) {      TemplateCall templateCall=SPINFactory.asTemplateCall(s.getResource());      if (templateCall != null) {        results.add(new QueryOrTemplateCall(cls,templateCall));      } else {        Query query=SPINFactory.asQuery(s.getResource());        if (query != null) {          results.add(new QueryOrTemplateCall(cls,query));        }      }    }  }}  }
class C{  public static void main(String[] args){  int n=StdIn.readInt();  int source=2 * n;  int sink=2 * n + 1;  EdgeWeightedDigraph G=new EdgeWeightedDigraph(2 * n + 2);  for (int i=0; i < n; i++) {    double duration=StdIn.readDouble();    G.addEdge(new DirectedEdge(source,i,0.0));    G.addEdge(new DirectedEdge(i + n,sink,0.0));    G.addEdge(new DirectedEdge(i,i + n,duration));    int m=StdIn.readInt();    for (int j=0; j < m; j++) {      int precedent=StdIn.readInt();      G.addEdge(new DirectedEdge(n + i,precedent,0.0));    }  }  AcyclicLP lp=new AcyclicLP(G,source);  StdOut.println(" job   start  finish");  StdOut.println("--------------------");  for (int i=0; i < n; i++) {    StdOut.printf("%4d %7.1f %7.1f\n",i,lp.distTo(i),lp.distTo(i + n));  }  StdOut.printf("Finish time: %7.1f\n",lp.distTo(sink));}  }
class C{  private void initResponseSource() throws IOException {  responseSource=ResponseSource.NETWORK;  if (!policy.getUseCaches())   return;  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache == null)   return;  CacheResponse candidate=responseCache.get(uri,method,requestHeaders.getHeaders().toMultimap(false));  if (candidate == null)   return;  Map<String,List<String>> responseHeadersMap=candidate.getHeaders();  cachedResponseBody=candidate.getBody();  if (!acceptCacheResponseType(candidate) || responseHeadersMap == null || cachedResponseBody == null) {    Util.closeQuietly(cachedResponseBody);    return;  }  RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(responseHeadersMap,true);  cachedResponseHeaders=new ResponseHeaders(uri,rawResponseHeaders);  long now=System.currentTimeMillis();  this.responseSource=cachedResponseHeaders.chooseResponseSource(now,requestHeaders);  if (responseSource == ResponseSource.CACHE) {    this.cacheResponse=candidate;    setResponse(cachedResponseHeaders,cachedResponseBody);  } else   if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    this.cacheResponse=candidate;  } else   if (responseSource == ResponseSource.NETWORK) {    Util.closeQuietly(cachedResponseBody);  } else {    throw new AssertionError();  }}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int dragFlags=0;  if (mSortEnabled && !mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled && mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_X;    dragFlags|=DragSortListView.DRAG_NEG_X;  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),dragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  public void put(String key,String value){  editor.putString(key,value);  editor.commit();}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static long rotateLeft(long l,int shift){  return (l << shift) | l >>> (64 - shift);}  }
class C{  boolean satisfies(SSAOptions d){  if (!scalarValid) {    return false;  }  if (d.getScalarsOnly()) {    return true;  }  if (!heapValid) {    return false;  }  if (backwards != d.getBackwards()) {    return false;  }  if (insertUsePhis != d.getInsertUsePhis()) {    return false;  }  if (insertPEIDeps != d.getInsertPEIDeps()) {    return false;  }  if (excludeGuards != d.getExcludeGuards()) {    return false;  }  if (heapTypes != d.getHeapTypes()) {    return false;  }  return true;}  }
class C{  public boolean isAbstract_1(){  return abstract_1;}  }
class C{  public synchronized Object put(Object key,Object value){  if (key == null)   return null;  if (value == null)   return remove(key);  String stringKey=key.toString();  String stringValue=value.toString();  int index=m_keys.indexOf(key);  if (index != -1)   return m_values.set(index,stringValue);  m_values.add(stringKey);  m_values.add(stringValue);  return null;}  }
class C{  public static int size(){  return _size;}  }
class C{  protected boolean isSoLingerChanged(){  return true;}  }
class C{  @Override public void agentActed(Agent agent,Action command,Environment source){  String msg="";  if (env.getAgents().size() > 1)   msg="A" + env.getAgents().indexOf(agent) + ": ";  notify(msg + command.toString());  if (command instanceof MoveToAction) {    updateTrack(agent,getMapEnv().getAgentLocation(agent));  }}  }
class C{  final public boolean isPrimaryIndex(){  return this == SPO || this == SPOC;}  }
class C{  public HtmlRegularNode addSimpleNode(String tag,String text){  HtmlRegularNode t=simpleNode(tag,text);  addBodyNode(t);  return t;}  }
class C{  @Override public String toString(){  String val=new String();  val="Report(messageId=";  val+=messageId;  val+=")";  return val;}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();}  }
class C{  public void backfill() throws InterruptedException, GondolaException {  MessagePool pool=gondola.getMessagePool();  Rid rid=new Rid();  Rid savedRid=new Rid();  while (true) {    channel.awaitOperational();    int startIndex=-1;    cmember.saveQueue.getLatestWait(savedRid);    lock.lock();    try {      if (backfilling && backfillAhead < backfillAheadLimit) {        if (nextIndex > savedRid.index) {          logger.info("[{}-{}] Backfilling {} at index {} paused to allow storage (index={}) to catch up",gondola.getHostId(),cmember.memberId,peerId,nextIndex,savedRid.index);          backfillAhead=backfillAheadLimit;        } else {          startIndex=nextIndex;        }      }    }  finally {      lock.unlock();    }    int count=0;    Message message=null;    if (startIndex > 0) {      LogEntry le=getLogEntry(startIndex - 1);      if (le == null) {        throw new IllegalStateException(String.format("[%s-%d] Could not retrieve index=%d to backfill %d. savedIndex=%d",gondola.getHostId(),cmember.memberId,startIndex - 1,peerId,savedRid.index));      }      rid.set(le.term,le.index);      le.release();      le=getLogEntry(startIndex);      if (le == null) {        throw new IllegalStateException(String.format("[%s-%d] Could not retrieve index=%d to backfill %d. savedIndex=%d",gondola.getHostId(),cmember.memberId,startIndex,peerId,savedRid.index));      }      message=pool.checkout();      try {        message.appendEntryRequest(cmember.memberId,cmember.currentTerm,rid,cmember.commitIndex,le.term,le.buffer,0,le.size);        le.release();        count++;        while (fullSpeed && startIndex + count < backfillToIndex) {          le=getLogEntry(startIndex + count);          if (le == null) {            break;          } else           if (le.term != rid.term || !message.canBatch(le.size)) {            le.release();            break;          }          message.appendEntryBatch(le.buffer,0,le.size);          le.release();          count++;        }      } catch (      Exception e) {        message.release();        throw e;      }    } else     if (clock.now() >= lastSentTs + heartbeatPeriod) {      message=pool.checkout();      message.heartbeat(cmember.memberId,cmember.currentTerm,savedRid,cmember.commitIndex);      lastSentTs=clock.now();    }    lock.lock();    try {      if (message != null) {        if (backfilling) {          addOutQueue(message);        }        message.release();        if (startIndex == nextIndex) {          nextIndex=startIndex + count;          if (nextIndex == backfillToIndex) {            backfilling=false;            logger.info("[{}-{}] Backfilling {} to {} is done",gondola.getHostId(),cmember.memberId,peerId,backfillToIndex - 1);          }        }        backfillAhead++;      }      if (!backfilling || backfillAhead >= backfillAheadLimit) {        backfillCond.await(heartbeatPeriod,TimeUnit.MILLISECONDS);      }    }  finally {      lock.unlock();    }  }}  }
class C{  public Element store(Object o){  MergSD2SignalHead p=(MergSD2SignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  element.setAttribute("aspects",p.getAspects() + "");  if (p.getFeather()) {    element.setAttribute("feather","yes");  }  storeCommon(p,element);  int aspects=p.getAspects();switch (aspects) {case 2:    element.addContent(addTurnoutElement(p.getInput1(),"input1"));  if (!p.getHome()) {    element.setAttribute("home","no");  }break;case 3:element.addContent(addTurnoutElement(p.getInput1(),"input1"));element.addContent(addTurnoutElement(p.getInput2(),"input2"));break;case 4:element.addContent(addTurnoutElement(p.getInput1(),"input1"));element.addContent(addTurnoutElement(p.getInput2(),"input2"));element.addContent(addTurnoutElement(p.getInput3(),"input3"));break;default :log.error("incorrect number of aspects " + aspects + " for Signal "+ p.getDisplayName());}return element;}  }
class C{  static String parseRoleIdentifier(final String trackingId){  if (StringUtil.isNullOrWhiteSpace(trackingId) || !trackingId.contains(TRACKING_ID_TOKEN_SEPARATOR)) {    return null;  }  return trackingId.substring(trackingId.indexOf(TRACKING_ID_TOKEN_SEPARATOR));}  }
class C{  public final void connectTarget(boolean secure){  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.secure=secure;}  }
class C{  public static String computeCodebase(String name,String jarFile,int port,String srcRoot,String mdAlgorithm) throws IOException {  if (name == null)   throw new NullPointerException("name cannot be null");  if (jarFile == null)   throw new NullPointerException("jarFile cannot be null");  if (port < 0)   throw new IllegalArgumentException("port cannot be negative");  boolean doHttpmd=true;  if ((mdAlgorithm == null) || (("").equals(mdAlgorithm)) || (("off").equals(mdAlgorithm))|| (("none").equals(mdAlgorithm))) {    doHttpmd=false;  }  if (doHttpmd && (srcRoot == null)) {    throw new NullPointerException("srcRoot cannot be null when constructing " + "an HTTPMD codebase");  }  String codebase=null;  String ipAddr=name;  try {    ipAddr=NicUtil.getIpAddress(name);  } catch (  Exception e) {    logger.log(Level.TRACE,name + " - not a valid " + "network interface, assuming host name");  }  if (doHttpmd) {    String httpmdUrl="httpmd://" + ipAddr + ":"+ port+ "/"+ jarFile+ ";"+ mdAlgorithm+ "=0";    codebase=HttpmdUtil.computeDigestCodebase(srcRoot,httpmdUrl);    ;  } else {    codebase="http://" + ipAddr + ":"+ port+ "/"+ jarFile;  }  logger.log(Level.TRACE,"codebase = " + codebase);  return codebase;}  }
class C{  public static ComponentUI createUI(JComponent c){  return xWindowsButtonUI;}  }
class C{  public int size(){  return size;}  }
class C{  public Restricted(int i){  cusip=1000000000 - i;  String[] arr1={"moving","binding","non binding","not to exceed","storage","auto transport","mortgage"};  quoteType=arr1[i % 7];  uniqueQuoteType="quoteType" + Integer.toString(i);  price=(i / 10) * 8;  minQty=i + 100;  maxQty=i + 1000;  if ((i % 12) == 0) {    incQty=maxQty - minQty;  } else {    incQty=((maxQty - minQty) / 12) * (i % 12);  }}  }
class C{  public boolean canExtractItem(int slot,ItemStack stack,int side){  return slot > 2;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ApexClassCodeCoverageBean[] calculateAggregatedCodeCoverageUsingToolingAPI(){  PartnerConnection connection=ConnectionHandler.getConnectionHandlerInstance().getConnection();  ApexClassCodeCoverageBean[] apexClassCodeCoverageBeans=null;  String[] classesAsArray=null;  if (CommandLineArguments.getClassManifestFiles() != null) {    LOG.debug(" Fetching apex classes from location : " + CommandLineArguments.getClassManifestFiles());    classesAsArray=ApexClassFetcherUtils.fetchApexClassesFromManifestFiles(CommandLineArguments.getClassManifestFiles(),true);  }  if (CommandLineArguments.getSourceRegex() != null) {    LOG.debug(" Fetching apex classes with regex : " + CommandLineArguments.getSourceRegex());    classesAsArray=ApexClassFetcherUtils.fetchApexClassesBasedOnMultipleRegexes(connection,classesAsArray,CommandLineArguments.getSourceRegex(),true);  }  if (classesAsArray != null && classesAsArray.length > 0) {    String classArrayAsStringForQuery=processClassArrayForQuery(classesAsArray);    String relativeServiceURL="/services/data/v" + SUPPORTED_VERSION + "/tooling";    String soqlcc=QueryConstructor.getAggregatedCodeCoverage(classArrayAsStringForQuery);    JSONObject responseJsonObject=null;    responseJsonObject=WebServiceInvoker.doGet(relativeServiceURL,soqlcc,OAuthTokenGenerator.getOrgToken());    LOG.debug("responseJsonObject says " + responseJsonObject + "\n relativeServiceURL is "+ relativeServiceURL+ "\n soqlcc is "+ soqlcc);    if (responseJsonObject != null) {      apexClassCodeCoverageBeans=processJSONResponseAndConstructCodeCoverageBeans(connection,responseJsonObject);    }    if (apexClassCodeCoverageBeans == null) {      ApexUnitUtils.shutDownWithErrMsg("Code coverage metrics not computed. Null object returned while processing the JSON response from the Tooling API");    }  } else {    ApexUnitUtils.shutDownWithErrMsg("No/Invalid Apex source classes mentioned in manifest file and/or " + "regex pattern for ApexSourceClassPrefix didn't return any Apex source class names from the org");  }  return apexClassCodeCoverageBeans;}  }
class C{  public boolean[] readBoolArray(final int items) throws IOException {  int pos=0;  byte[] buffer;  if (items < 0) {    buffer=new byte[INITIAL_ARRAY_BUFFER_SIZE];    while (true) {      final int read=this.read(buffer,pos,buffer.length - pos);      if (read < 0) {        break;      }      pos+=read;      if (buffer.length == pos) {        final byte[] newbuffer=new byte[buffer.length << 1];        System.arraycopy(buffer,0,newbuffer,0,buffer.length);        buffer=newbuffer;      }    }  } else {    buffer=new byte[items];    int len=items;    while (len > 0) {      final int read=this.read(buffer,pos,len);      if (read < 0) {        throw new EOFException("Have read only " + pos + " bit portions instead of "+ items);      }      pos+=read;      len-=read;    }  }  final boolean[] result=new boolean[pos];  for (int i=0; i < pos; i++) {    result[i]=buffer[i] != 0;  }  return result;}  }
class C{  @Deprecated public int deleteNotebook(LinkedNotebook linkedNotebook) throws TException, EDAMUserException, EDAMSystemException, EDAMNotFoundException {  SharedNotebook sharedNotebook=getAsyncClient().getClient().getSharedNotebookByAuth(getAuthenticationToken());  Long[] ids={sharedNotebook.getId()};  getAsyncClient().getClient().expungeSharedNotebooks(getAuthenticationToken(),Arrays.asList(ids));  return getAsyncPersonalClient().getClient().expungeLinkedNotebook(getAsyncPersonalClient().getAuthenticationToken(),linkedNotebook.getGuid());}  }
