class C{  private int lastIndexOf(int elem){  int boffset=m_firstFree & m_MASK;  for (int index=m_firstFree >>> m_SHIFT; index >= 0; --index) {    int[] block=m_map[index];    if (block != null)     for (int offset=boffset; offset >= 0; --offset)     if (block[offset] == elem)     return offset + index * m_blocksize;    boffset=0;  }  return -1;}  }
class C{  @Override public String resolve(String key){  if (key.equals("HTTP_USER_AGENT")) {    return request.getHeader("user-agent");  } else   if (key.equals("HTTP_REFERER")) {    return request.getHeader("referer");  } else   if (key.equals("HTTP_COOKIE")) {    return request.getHeader("cookie");  } else   if (key.equals("HTTP_FORWARDED")) {    return request.getHeader("forwarded");  } else   if (key.equals("HTTP_HOST")) {    String host=request.getHeader("host");    if (host != null) {      int index=host.indexOf(':');      if (index != -1) {        host=host.substring(0,index);      }    }    return host;  } else   if (key.equals("HTTP_PROXY_CONNECTION")) {    return request.getHeader("proxy-connection");  } else   if (key.equals("HTTP_ACCEPT")) {    return request.getHeader("accept");  } else   if (key.equals("REMOTE_ADDR")) {    return request.getRemoteAddr();  } else   if (key.equals("REMOTE_HOST")) {    return request.getRemoteHost();  } else   if (key.equals("REMOTE_PORT")) {    return String.valueOf(request.getRemotePort());  } else   if (key.equals("REMOTE_USER")) {    return request.getRemoteUser();  } else   if (key.equals("REMOTE_IDENT")) {    return request.getRemoteUser();  } else   if (key.equals("REQUEST_METHOD")) {    return request.getMethod();  } else   if (key.equals("SCRIPT_FILENAME")) {    return request.getServletContext().getRealPath(request.getServletPath());  } else   if (key.equals("REQUEST_PATH")) {    return request.getRequestPathMB().toString();  } else   if (key.equals("CONTEXT_PATH")) {    return request.getContextPath();  } else   if (key.equals("SERVLET_PATH")) {    return emptyStringIfNull(request.getServletPath());  } else   if (key.equals("PATH_INFO")) {    return emptyStringIfNull(request.getPathInfo());  } else   if (key.equals("QUERY_STRING")) {    return emptyStringIfNull(request.getQueryString());  } else   if (key.equals("AUTH_TYPE")) {    return request.getAuthType();  } else   if (key.equals("DOCUMENT_ROOT")) {    return request.getServletContext().getRealPath("/");  } else   if (key.equals("SERVER_NAME")) {    return request.getLocalName();  } else   if (key.equals("SERVER_ADDR")) {    return request.getLocalAddr();  } else   if (key.equals("SERVER_PORT")) {    return String.valueOf(request.getLocalPort());  } else   if (key.equals("SERVER_PROTOCOL")) {    return request.getProtocol();  } else   if (key.equals("SERVER_SOFTWARE")) {    return "tomcat";  } else   if (key.equals("THE_REQUEST")) {    return request.getMethod() + " " + request.getRequestURI()+ " "+ request.getProtocol();  } else   if (key.equals("REQUEST_URI")) {    return request.getRequestURI();  } else   if (key.equals("REQUEST_FILENAME")) {    return request.getPathTranslated();  } else   if (key.equals("HTTPS")) {    return request.isSecure() ? "on" : "off";  } else   if (key.equals("TIME_YEAR")) {    return String.valueOf(Calendar.getInstance().get(Calendar.YEAR));  } else   if (key.equals("TIME_MON")) {    return String.valueOf(Calendar.getInstance().get(Calendar.MONTH));  } else   if (key.equals("TIME_DAY")) {    return String.valueOf(Calendar.getInstance().get(Calendar.DAY_OF_MONTH));  } else   if (key.equals("TIME_HOUR")) {    return String.valueOf(Calendar.getInstance().get(Calendar.HOUR_OF_DAY));  } else   if (key.equals("TIME_MIN")) {    return String.valueOf(Calendar.getInstance().get(Calendar.MINUTE));  } else   if (key.equals("TIME_SEC")) {    return String.valueOf(Calendar.getInstance().get(Calendar.SECOND));  } else   if (key.equals("TIME_WDAY")) {    return String.valueOf(Calendar.getInstance().get(Calendar.DAY_OF_WEEK));  } else   if (key.equals("TIME")) {    return FastHttpDateFormat.getCurrentDate();  }  return null;}  }
class C{  protected boolean deploymentExists(String contextName){  return (deployed.containsKey(contextName) || (host.findChild(contextName) != null));}  }
class C{  public void delete() throws Exception {  failIfDeleted();  XMLElement parent=getParent();  if (parent == null) {    throw new Exception("Deletion of root element not permitted");  }  int startTokenIndex=getStartToken().getTokenIndex();  int endTokenIndex=startTokenIndex;  if (getEndToken() != null) {    endTokenIndex=getEndToken().getTokenIndex();  }  getDocument().deleteTokens(startTokenIndex,endTokenIndex);  parent.removeChildElement(this);  markDeleted();}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return signXML(doc,certAlias,algorithm,null,ids);}  }
class C{  public static List<SearchResultEntry> findStringsSimiliar(String text){  List<SearchResultEntry> results=findStringsContaining(text);  return results;}  }
class C{  public boolean canUndo(){  return alive && hasBeenDone;}  }
class C{  public static String constructUserFilter(SSOToken token,String userRDNAttrName,String userName,boolean aliasEnabled) throws SSOException {  StringBuilder userFilter=new StringBuilder();  if (aliasEnabled) {    String principalsString=token.getProperty("Principals");    if (principalsString != null) {      StringTokenizer st=new StringTokenizer(principalsString,"|");      while (st.hasMoreTokens()) {        String principalName=(String)st.nextToken();        DN ldapDN=DN.valueOf(principalName);        if (LDAPUtils.isDN(principalName)) {          String userID=LDAPUtils.rdnValueFromDn(ldapDN);          if (userID == null || userID.isEmpty()) {            continue;          }          if (!userID.equalsIgnoreCase(userName)) {            userFilter.append("(").append(userRDNAttrName).append("=").append(userID).append(")");          }        }      }    }  }  if (userFilter.length() == 0) {    userFilter.append("(").append(userRDNAttrName).append("=").append(userName).append(")");  } else {    userFilter.insert(0,"(|");    userFilter.append("(").append(userRDNAttrName).append("=").append(userName).append("))");  }  if (debug.messageEnabled()) {    debug.message("PolicyUtils.constructUserFilter(): filter: " + userFilter.toString());  }  return userFilter.toString();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  @Descriptor("Encrypt the input string.") public void encrypt(CommandSession session,@Parameter(names={"-j","--json"},presentValue="false",absentValue="true") boolean isString){  session.getConsole().append("Enter the ").append(isString ? "String" : "Json").println(" value");  encrypt(session,isString,loadFromConsole(session));}  }
class C{  public boolean verify() throws GeneralSecurityException {  if (verified)   return verifyResult;  if (isTsp) {    TimeStampTokenInfo info=timeStampToken.getTimeStampInfo();    MessageImprint imprint=info.toASN1Structure().getMessageImprint();    byte[] md=messageDigest.digest();    byte[] imphashed=imprint.getHashedMessage();    verifyResult=Arrays.equals(md,imphashed);  } else {    if (sigAttr != null || sigAttrDer != null) {      final byte[] msgDigestBytes=messageDigest.digest();      boolean verifyRSAdata=true;      boolean encContDigestCompare=false;      if (RSAdata != null) {        verifyRSAdata=Arrays.equals(msgDigestBytes,RSAdata);        encContDigest.update(RSAdata);        encContDigestCompare=Arrays.equals(encContDigest.digest(),digestAttr);      }      boolean absentEncContDigestCompare=Arrays.equals(msgDigestBytes,digestAttr);      boolean concludingDigestCompare=absentEncContDigestCompare || encContDigestCompare;      boolean sigVerify=verifySigAttributes(sigAttr) || verifySigAttributes(sigAttrDer);      verifyResult=concludingDigestCompare && sigVerify && verifyRSAdata;    } else {      if (RSAdata != null)       sig.update(messageDigest.digest());      verifyResult=sig.verify(digest);    }  }  verified=true;  return verifyResult;}  }
class C{  private static Entry createEntryFromMsg(final DN baseDN,final long changeNumber,final String cookie,final UpdateMsg msg) throws DirectoryException {  if (msg instanceof AddMsg) {    return createAddMsg(baseDN,changeNumber,cookie,msg);  } else   if (msg instanceof ModifyCommonMsg) {    return createModifyMsg(baseDN,changeNumber,cookie,msg);  } else   if (msg instanceof DeleteMsg) {    final DeleteMsg delMsg=(DeleteMsg)msg;    return createChangelogEntry(baseDN,changeNumber,cookie,delMsg,null,"delete",delMsg.getInitiatorsName());  }  throw new DirectoryException(ResultCode.OPERATIONS_ERROR,LocalizableMessage.raw("Unexpected message type when trying to create changelog entry for dn %s : %s",baseDN,msg.getClass()));}  }
class C{  public ConcurrentModificationException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean isOn(){  return on;}  }
class C{  public long executionTimeInMilliseconds(){  return executionTimeInMilliseconds;}  }
class C{  private String readLine() throws IOException {  String line=null;  int newLineMatchByteCount;  boolean isLastFilePart=no == 1;  int i=currentLastBytePos;  while (i > -1) {    if (!isLastFilePart && i < avoidNewlineSplitBufferSize) {      createLeftOver();      break;    }    if ((newLineMatchByteCount=getNewLineMatchByteCount(data,i)) > 0) {      final int lineStart=i + 1;      int lineLengthBytes=currentLastBytePos - lineStart + 1;      if (lineLengthBytes < 0) {        throw new IllegalStateException("Unexpected negative line length=" + lineLengthBytes);      }      byte[] lineData=new byte[lineLengthBytes];      System.arraycopy(data,lineStart,lineData,0,lineLengthBytes);      line=new String(lineData,encoding);      currentLastBytePos=i - newLineMatchByteCount;      break;    }    i-=byteDecrement;    if (i < 0) {      createLeftOver();      break;    }  }  if (isLastFilePart && leftOver != null) {    line=new String(leftOver,encoding);    leftOver=null;  }  return line;}  }
class C{  public String toString(){  return "" + value;}  }
class C{  @Override public void addInitParameter(String name,String value){  parametersLock.writeLock().lock();  try {    parameters.put(name,value);  }  finally {    parametersLock.writeLock().unlock();  }  fireContainerEvent("addInitParameter",name);}  }
class C{  public SAMLRequesterException(Throwable t){  super(t);}  }
class C{  public Rectangle moveUp(float move){  y+=move;  return this;}  }
class C{  public ByteArrayBuilder(){  builder=new ByteStringBuilder(256);}  }
class C{  public SkipPageException(Throwable rootCause){  super(rootCause);}  }
class C{  public static boolean entryExists(DN entryDN) throws DirectoryException {  if (entryDN.isRootDN()) {    return true;  }  Backend<?> backend=getBackend(entryDN);  return backend != null && backend.entryExists(entryDN);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ZeroKnowledgeType createZeroKnowledgeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ZeroKnowledgeTypeImpl();}  }
class C{  public ValidationException(String message,String errorCode){  this(message,errorCode,null);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public RequestContext(CLIRequest request,CommandManager commandMgr,SubCommand subcmd) throws CLIException {  this.commandMgr=commandMgr;  this.request=request;  rb=commandMgr.getResourceBundle();  subCommand=subcmd;  String deprecationWarning=subcmd.getDeprecationWarning();  if (StringUtils.isNotEmpty(deprecationWarning)) {    commandMgr.getOutputWriter().printlnError(deprecationWarning);  }  if (commandMgr.isVerbose()) {    commandMgr.getOutputWriter().printlnMessage(rb.getString("verbose-constructing-request-context"));  }  String[] argv=request.getOptions();  CLIRequest parentRequest=request.getParent();  String[] parentArgv=(parentRequest != null) ? parentRequest.getOptions() : null;  parseArgs(commandMgr.getCommandName(),subcmd,argv,parentArgv);  if (commandMgr.isVerbose()) {    commandMgr.getOutputWriter().printlnMessage(getResourceString("verbose-validate-mandatory-options"));  }  if (!subcmd.validateOptions(mapOptions,request.getSSOToken())) {    throw createIncorrectOptionException(commandMgr.getCommandName(),argv);  } else {    request.setOptions(childArgList.toArray(new String[childArgList.size()]));    if (parentArgv != null) {      parentRequest.setOptions(parentArgList.toArray(new String[parentArgList.size()]));    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.CanonicalizationMethodElement createCanonicalizationMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.CanonicalizationMethodElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationhasfeature01.class,args);}  }
class C{  protected void deflate() throws IOException {  int len=def.deflate(buf,0,buf.length);  if (len > 0) {    out.write(buf,0,len);  }}  }
class C{  public static <T>T orderAccesses(T ref){  theVolatile=0;  return ref;}  }
class C{  public void close(boolean pCloseUnderlying) throws IOException {  if (closed) {    return;  }  if (pCloseUnderlying) {    closed=true;    input.close();  } else {    for (; ; ) {      int av=available();      if (av == 0) {        av=makeAvailable();        if (av == 0) {          break;        }      }      skip(av);    }  }  closed=true;}  }
class C{  public Client read(String clientId,OAuth2Request request) throws UnauthorizedClientException {  Map<String,Set<String>> clientAttributes=new HashMap<String,Set<String>>();  try {    AMIdentity theID=null;    final SSOToken token=AccessController.doPrivileged(AdminTokenAction.getInstance());    final String realm=request.getParameter(OAuth2Constants.Custom.REALM);    AMIdentityRepository repo=idRepoFactory.create(realm,token);    IdSearchControl idsc=new IdSearchControl();    idsc.setRecursive(true);    idsc.setAllReturnAttributes(true);    Set<AMIdentity> results;    idsc.setMaxResults(0);    IdSearchResults searchResults=repo.searchIdentities(IdType.AGENTONLY,clientId,idsc);    results=searchResults.getSearchResults();    if (results == null || results.size() != 1) {      logger.error("OpenAMClientDAO.read(): No client profile or more than one profile found.");      throw new UnauthorizedClientException("Not able to get client from OpenAM");    }    theID=results.iterator().next();    if (!theID.isActive()) {      theID=null;    } else {      clientAttributes=theID.getAttributes();    }  } catch (  UnauthorizedClientException e) {    logger.error("OpenAMClientDAO.read(): Unable to get client AMIdentity: ",e);    throw new UnauthorizedClientException("Not able to get client from OpenAM");  }catch (  SSOException e) {    logger.error("OpenAMClientDAO.read(): Unable to get client AMIdentity: ",e);    throw new UnauthorizedClientException("Not able to get client from OpenAM");  }catch (  IdRepoException e) {    logger.error("OpenAMClientDAO.read(): Unable to get client AMIdentity: ",e);    throw new UnauthorizedClientException("Not able to get client from OpenAM");  }  Client client=createClient(clientAttributes);  client.setClientID(clientId);  return client;}  }
class C{  public void removeSubConfig(String subConfigName) throws SMSException, SSOException {  validateServiceConfigImpl();  subConfigName=SMSSchema.unescapeName(subConfigName);  String sdn="ou=" + subConfigName + ","+ sc.getDN();  ServiceConfigManagerImpl scmImpl=ServiceConfigManagerImpl.getInstance(token,getServiceName(),getVersion());  ServiceConfigImpl sConfigImpl=sc.getSubConfig(token,subConfigName);  if (sConfigImpl != null) {    ServiceConfigImpl.deleteInstance(token,scmImpl,null,sdn,"/",sConfigImpl.getGroupName(),(getComponentName() + "/" + SMSSchema.escapeSpecialCharacters(subConfigName)),false,ss);  }  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,sdn);  if (cEntry.isDirty()) {    cEntry.refresh();  }  SMSEntry entry=cEntry.getClonedSMSEntry();  entry.delete(token);  cEntry.refresh(entry);  CachedSubEntries cse=CachedSubEntries.getInstance(token,sc.getDN());  cse.remove(subConfigName);}  }
class C{  @Override public void write(String str){}  }
class C{  public void testSyncFlushDeflater() throws Exception {  Deflater def=new Deflater();  Field f=def.getClass().getDeclaredField("flushParm");  f.setAccessible(true);  f.setInt(def,Deflater.SYNC_FLUSH);  final int deflaterBufferSize=512;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DeflaterOutputStream dos=new DeflaterOutputStream(baos,def,deflaterBufferSize);  final int outputBufferSize=128 * deflaterBufferSize;  byte[] output=new byte[outputBufferSize];  for (int i=0; i < output.length; i++) {    output[i]=(byte)i;  }  dos.write(output);  byte[] compressed=baos.toByteArray();  assertTrue("compressed=" + compressed.length + " but deflaterBufferSize="+ deflaterBufferSize,compressed.length > deflaterBufferSize);  ByteArrayInputStream bais=new ByteArrayInputStream(compressed);  InflaterInputStream iis=new InflaterInputStream(bais);  byte[] input=new byte[output.length];  int total=0;  while (true) {    int n=iis.read(input,total,input.length - total);    if (n == -1) {      break;    }    total+=n;    if (total == input.length) {      try {        iis.read();        fail();      } catch (      EOFException expected) {        break;      }    }  }  assertEquals(output.length,total);  assertTrue(Arrays.equals(input,output));  assertFalse(def.finished());  def.end();  iis.close();}  }
class C{  public void makeImmutable(){  if (mutable) {    if (statusCode != null) {      statusCode.makeImmutable();    }    if (statusMessage != null) {      statusMessage.makeImmutable();    }    if (statusDetail != null) {      statusDetail.makeImmutable();    }    mutable=false;  }}  }
class C{  public final void testEqualsObject03(){  assertTrue(new ECFieldF2m(1999,new int[]{367}).equals(new ECFieldF2m(1999,BigInteger.valueOf(0L).setBit(0).setBit(367).setBit(1999))));}  }
class C{  protected boolean flushBuffer(boolean block) throws IOException {  return socketWrapper.flush(block);}  }
class C{  @Override public void expire(){  expire(true);}  }
class C{  public BasicAttribute(String id){  this(id,false);}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  int out=offset;  if (fSurrogate != -1) {    ch[offset + 1]=(char)fSurrogate;    fSurrogate=-1;    length--;    out++;  }  int count=0;  if (fOffset == 0) {    if (length > fBuffer.length) {      length=fBuffer.length;    }    count=fInputStream.read(fBuffer,0,length);    if (count == -1) {      return -1;    }    count+=out - offset;  } else {    count=fOffset;    fOffset=0;  }  final int total=count;  for (int in=0; in < total; in++) {    int b0=fBuffer[in] & 0x00FF;    if (b0 < 0x80) {      ch[out++]=(char)b0;      continue;    }    if ((b0 & 0xE0) == 0xC0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,2);        }        count++;      }      if ((b1 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,2);      }      int c=((b0 << 6) & 0x07C0) | (b1 & 0x003F);      ch[out++]=(char)c;      count-=1;      continue;    }    if ((b0 & 0xF0) == 0xE0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,3);        }        count++;      }      if ((b1 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,3);      }      int b2=-1;      if (++in < total) {        b2=fBuffer[in] & 0x00FF;      } else {        b2=fInputStream.read();        if (b2 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fOffset=2;            return out - offset;          }          expectedByte(3,3);        }        count++;      }      if ((b2 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fOffset=3;          return out - offset;        }        invalidByte(3,3);      }      int c=((b0 << 12) & 0xF000) | ((b1 << 6) & 0x0FC0) | (b2 & 0x003F);      ch[out++]=(char)c;      count-=2;      continue;    }    if ((b0 & 0xF8) == 0xF0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,4);        }        count++;      }      if ((b1 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,4);      }      int b2=-1;      if (++in < total) {        b2=fBuffer[in] & 0x00FF;      } else {        b2=fInputStream.read();        if (b2 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fOffset=2;            return out - offset;          }          expectedByte(3,4);        }        count++;      }      if ((b2 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fOffset=3;          return out - offset;        }        invalidByte(3,4);      }      int b3=-1;      if (++in < total) {        b3=fBuffer[in] & 0x00FF;      } else {        b3=fInputStream.read();        if (b3 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fBuffer[2]=(byte)b2;            fOffset=3;            return out - offset;          }          expectedByte(4,4);        }        count++;      }      if ((b3 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fBuffer[3]=(byte)b3;          fOffset=4;          return out - offset;        }        invalidByte(4,4);      }      int uuuuu=((b0 << 2) & 0x001C) | ((b1 >> 4) & 0x0003);      if (uuuuu > 0x10) {        invalidSurrogate(uuuuu);      }      int wwww=uuuuu - 1;      int zzzz=b1 & 0x000F;      int yyyyyy=b2 & 0x003F;      int xxxxxx=b3 & 0x003F;      int hs=0xD800 | ((wwww << 6) & 0x03C0) | (zzzz << 2)| (yyyyyy >> 4);      int ls=0xDC00 | ((yyyyyy << 6) & 0x03C0) | xxxxxx;      ch[out++]=(char)hs;      ch[out++]=(char)ls;      count-=2;      continue;    }    if (out > offset) {      fBuffer[0]=(byte)b0;      fOffset=1;      return out - offset;    }    invalidByte(1,1);  }  if (DEBUG_READ) {    if (log.isDebugEnabled())     log.debug("read(char[]," + offset + ','+ length+ "): count="+ count);  }  return count;}  }
class C{  public RecurringTask removeRecurringTask(String recurringTaskID) throws DirectoryException {  schedulerLock.lock();  try {    RecurringTask recurringTask=recurringTasks.remove(recurringTaskID);    HashMap<String,Task> iterationsMap=new HashMap<>();    for (    Task t : tasks.values()) {      if (t.getRecurringTaskID() != null && t.getRecurringTaskID().equals(recurringTaskID)) {        TaskState state=t.getTaskState();        if (!TaskState.isDone(state) && !TaskState.isCancelled(state)) {          cancelTask(t.getTaskID());        }        iterationsMap.put(t.getTaskID(),t);      }    }    for (    Map.Entry<String,Task> iterationEntry : iterationsMap.entrySet()) {      if (TaskState.isDone(iterationEntry.getValue().getTaskState())) {        removeCompletedTask(iterationEntry.getKey());      }    }    writeState();    return recurringTask;  }  finally {    schedulerLock.unlock();  }}  }
class C{  void updateSAML2EntityConfig(String realm,String cotName,Set trustedProviders) throws COTException {  String classMethod="COTManager:updateSAML2EntityConfig";  String entityId=null;  SAML2COTUtils saml2CotUtils=new SAML2COTUtils(callerSession);  if (trustedProviders != null && !trustedProviders.isEmpty()) {    for (Iterator iter=trustedProviders.iterator(); iter.hasNext(); ) {      entityId=(String)iter.next();      try {        saml2CotUtils.updateEntityConfig(realm,cotName,entityId);      } catch (      SAML2MetaException sme) {        throw new COTException(sme);      }catch (      JAXBException e) {        debug.error(classMethod,e);        String[] data={e.getMessage(),cotName,entityId,realm};        LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_COT_DESCRIPTOR,data);        throw new COTException(e);      }    }  }}  }
class C{  public Duration plus(Duration duration){  return plus(duration.getSeconds(),duration.getNano());}  }
class C{  private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public JCheckBoxMenuItem(Action a){  this();  setAction(a);}  }
class C{  @Override public void unbind() throws Exception {  if (running) {    stop();  }  serverSock.close();  serverSock=null;  destroySsl();  super.unbind();  shutdownExecutor();  if (getHandler() != null) {    getHandler().recycle();  }}  }
class C{  public AttributeSet removeAttributes(AttributeSet old,AttributeSet attrs){  if (old != attrs) {    old=removeHTMLTags(old,attrs);  }  return super.removeAttributes(old,convertAttributeSet(attrs));}  }
class C{  @Override public Object clone(){  ChannelData clone=new ChannelData(false);  clone.options=this.options;  clone.message=new XByteBuffer(this.message.getBytesDirect(),false);  clone.timestamp=this.timestamp;  clone.uniqueId=this.uniqueId;  clone.address=this.address;  return clone;}  }
class C{  private void registerJsfCdiToSpring(BeanDefinition definition){  if (definition instanceof AnnotatedBeanDefinition) {    AnnotatedBeanDefinition annDef=(AnnotatedBeanDefinition)definition;    String scopeName=null;    if (annDef.getFactoryMethodMetadata() != null) {      scopeName=JsfCdiToSpring.deduceScopeName(annDef.getFactoryMethodMetadata());    } else {      scopeName=JsfCdiToSpring.deduceScopeName(annDef.getMetadata().getAnnotationTypes());    }    if (scopeName != null) {      definition.setScope(scopeName);      logger.debug(definition.getBeanClassName() + " - Scope(" + definition.getScope().toUpperCase()+ ")");    }  }}  }
class C{  static int formatUnsignedLong(long val,int shift,char[] buf,int offset,int len){  int charPos=len;  int radix=1 << shift;  int mask=radix - 1;  do {    buf[offset + --charPos]=Integer.digits[((int)val) & mask];    val>>>=shift;  } while (val != 0 && charPos > 0);  return charPos;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document ownerDoc;  DOMImplementation domImpl;  DocumentType docType;  String nullID=null;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("mydoc",nullID,nullID);  ownerDoc=docType.getOwnerDocument();  assertNull("nodegetownerdocument01",ownerDoc);}  }
class C{  protected void removeFromClientMap(String ct,Client c){  clientTypeMap.remove(ct);  mergedClientData.remove(ct);  String ua=null;  if ((c != null) && ((ua=c.getProperty(USER_AGENT)) != null)) {    userAgentMap.remove(ua);  }  removeFromProfilesMap(ct,c);}  }
class C{  public ExtendedOperation processExtendedOperation(String requestOID,ByteString requestValue,List<Control> controls){  ExtendedOperationBasis extendedOperation=new ExtendedOperationBasis(this,nextOperationID(),nextMessageID(),controls,requestOID,requestValue);  extendedOperation.setInternalOperation(true);  extendedOperation.run();  return extendedOperation;}  }
class C{  final void unsplice(Node pred,Node s){  s.forgetContents();  if (pred != null && pred != s && pred.next == s) {    Node n=s.next;    if (n == null || (n != s && pred.casNext(s,n) && pred.isMatched())) {      for (; ; ) {        Node h=head;        if (h == pred || h == s || h == null)         return;        if (!h.isMatched())         break;        Node hn=h.next;        if (hn == null)         return;        if (hn != h && casHead(h,hn))         h.forgetNext();      }      if (pred.next != pred && s.next != s) {        for (; ; ) {          int v=sweepVotes;          if (v < SWEEP_THRESHOLD) {            if (casSweepVotes(v,v + 1))             break;          } else           if (casSweepVotes(v,0)) {            sweep();            break;          }        }      }    }  }}  }
class C{  private static final int compareIgnoreCase(CharChunk name,int start,int end,String compareTo){  int result=0;  char[] c=name.getBuffer();  int len=compareTo.length();  if ((end - start) < len) {    len=end - start;  }  for (int i=0; (i < len) && (result == 0); i++) {    if (Ascii.toLower(c[i + start]) > Ascii.toLower(compareTo.charAt(i))) {      result=1;    } else     if (Ascii.toLower(c[i + start]) < Ascii.toLower(compareTo.charAt(i))) {      result=-1;    }  }  if (result == 0) {    if (compareTo.length() > (end - start)) {      result=-1;    } else     if (compareTo.length() < (end - start)) {      result=1;    }  }  return result;}  }
class C{  public boolean isAuthOption(String opt){  return false;}  }
class C{  public E poll(){  final Node<E> f=first;  return (f == null) ? null : unlinkFirst(f);}  }
class C{  private CommonArguments(){}  }
class C{  public static GSSAPISASLBindRequest newGSSAPISASLBindRequest(final Subject subject){  return new GSSAPISASLBindRequestImpl(subject);}  }
class C{  private void eventOccurred(IEventData data,EventType type){  if (supportedEvents == null || supportedEvents.contains(type)) {    eventListener.eventOccurred(data,type);  }}  }
class C{  public DefaultSignedAttributeTableGenerator(AttributeTable attributeTable){  if (attributeTable != null) {    table=attributeTable.toHashtable();  } else {    table=new Hashtable();  }}  }
class C{  public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket,final int responseCode) throws Throwable {  return doInteraction(clientConnection,serverSocket,responseCode,false);}  }
class C{  private static Reflect on(Method method,Object object,Object... args) throws ReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public NO_PERMISSION(){  this("");}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public FilterServiceImpl(Context context){  LOG.info("Creating AdguardService instance for {}",context);  this.context=context;  filterListDao=new FilterListDaoImpl(context);  filterRuleDao=new FilterRuleDaoImpl(context);  preferencesService=ServiceLocator.getInstance(context).getPreferencesService();}  }
class C{  public PropertyException(String message,String errorCode,Throwable exception){  super(message,errorCode,exception);}  }
class C{  private int doRegister(int registrations){  long adjust=((long)registrations << PARTIES_SHIFT) | registrations;  final Phaser parent=this.parent;  int phase;  for (; ; ) {    long s=(parent == null) ? state : reconcileState();    int counts=(int)s;    int parties=counts >>> PARTIES_SHIFT;    int unarrived=counts & UNARRIVED_MASK;    if (registrations > MAX_PARTIES - parties)     throw new IllegalStateException(badRegister(s));    phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     break;    if (counts != EMPTY) {      if (parent == null || reconcileState() == s) {        if (unarrived == 0)         root.internalAwaitAdvance(phase,null); else         if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s + adjust))         break;      }    } else     if (parent == null) {      long next=((long)phase << PHASE_SHIFT) | adjust;      if (UNSAFE.compareAndSwapLong(this,stateOffset,s,next))       break;    } else {synchronized (this) {        if (state == s) {          phase=parent.doRegister(1);          if (phase < 0)           break;          while (!UNSAFE.compareAndSwapLong(this,stateOffset,s,((long)phase << PHASE_SHIFT) | adjust)) {            s=state;            phase=(int)(root.state >>> PHASE_SHIFT);          }          break;        }      }    }  }  return phase;}  }
class C{  public ServerStatus changeStatus(StatusMachineEvent event) throws IOException {  return changeStatus(event,"from status analyzer");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrchildnodes2.class,args);}  }
class C{  public SaltedMD5PasswordStorageSchemeTestCase(){  super("cn=Salted MD5,cn=Password Storage Schemes,cn=config");}  }
class C{  public void info(Object message){  log(Level.INFO,String.valueOf(message),null);}  }
class C{  private List<String> convertToCommentedBlock(String content){  if (Strings.isNullOrEmpty(content)) {    return ImmutableList.<String>of();  }  ImmutableList.Builder<String> builder=ImmutableList.builder();  for (  String comment : Splitter.on("\n").splitToList(content)) {    builder.add(comment);  }  return builder.build();}  }
class C{  private void moveThumb(final FilePostParam file) throws IOException {  File sourceThumbFile=new File(configuration.getThumbsPath() + File.separator + file.getType()+ file.getFolder()+ file.getName());  File destThumbFile=new File(configuration.getThumbsPath() + File.separator + type+ this.currentFolder+ file.getName());  FileUtils.copyFromSourceToDestFile(sourceThumbFile,destThumbFile,true,configuration);}  }
class C{  public static void writeSwappedLong(byte[] data,int offset,long value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);  data[offset + 2]=(byte)((value >> 16) & 0xff);  data[offset + 3]=(byte)((value >> 24) & 0xff);  data[offset + 4]=(byte)((value >> 32) & 0xff);  data[offset + 5]=(byte)((value >> 40) & 0xff);  data[offset + 6]=(byte)((value >> 48) & 0xff);  data[offset + 7]=(byte)((value >> 56) & 0xff);}  }
class C{  void dispatchClientCallback(TransactInfo transactInfo,String paramMarshalling){  mClientProxy.dispatchClientCallback(transactInfo,paramMarshalling);}  }
class C{  public HiddenValueCallback(String id,String value){  Reject.ifNull(id,"A HiddenValueCallback must be given an id.");  this.id=id;  this.value=value;}  }
class C{  public Builder requiredAttributes(final Collection<String> attributeNamesOrOIDs){  this.requiredAttributes.addAll(attributeNamesOrOIDs);  return this;}  }
class C{  public String documentationWikiUrl(){  return properties.getProperty("doc.wiki.url");}  }
class C{  public static boolean isDragImageSupported(){  Toolkit t=Toolkit.getDefaultToolkit();  Boolean supported;  try {    supported=(Boolean)Toolkit.getDefaultToolkit().getDesktopProperty("DnD.isDragImageSupported");    return supported.booleanValue();  } catch (  Exception e) {    return false;  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set set=amir.getAllowedIdOperations(idType);    if (!set.contains(IdOperation.SERVICE)) {      throw new CLIException(MessageFormat.format(getResourceString("realm-does-not-support-service"),(Object[])params),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_ASSIGNABLE_SERVICES",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    Set services=amid.getAssignableServices();    if (idType.equals(IdType.USER)) {      services.remove(Constants.SVC_NAME_USER);      services.remove(Constants.SVC_NAME_AUTH_CONFIG);      services.remove(Constants.SVC_NAME_SAML);    }    if ((services != null) && !services.isEmpty()) {      String msg=getResourceString("assignable-service-result");      String[] arg={""};      for (Iterator i=services.iterator(); i.hasNext(); ) {        arg[0]=(String)i.next();        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(getResourceString("no-service-assignable"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_ASSIGNABLE_SERVICES",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetAssignableServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNABLE_SERVICES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetAssignableServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNABLE_SERVICES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public SecurityException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public boolean rotateFile(RotatableLogFile writer){  long fileSize=writer.getBytesWritten();  return fileSize >= sizeLimit;}  }
class C{  private static String writeAsString(JsonValue json) throws JsonProcessingException {  return writePrettyValueAsString(json).replaceAll("\\n"," \\\\\n         ");}  }
class C{  public JKDefaultTableModel(final Vector columnNames,final int rowCount){  setDataVector(newVector(rowCount),columnNames);}  }
class C{  public final ShapeTile[] calculate_tree_shapes(BrdArea p_obstacle_area){  ShapeTile[] convex_shapes=p_obstacle_area.split_to_convex();  if (convex_shapes == null)   return new ShapeTile[0];  double max_tree_shape_width=50000;  if (r_board.host_com.host_cad_exists()) {    max_tree_shape_width=Math.min(500 * r_board.host_com.get_resolution(UnitMeasure.MIL),max_tree_shape_width);  }  Collection<ShapeTile> tree_shape_list=new LinkedList<ShapeTile>();  for (int index=0; index < convex_shapes.length; ++index) {    ShapeTile curr_convex_shape=convex_shapes[index];    int offset_width=get_clearance_compensation(p_obstacle_area.clearance_idx(),p_obstacle_area.get_layer());    curr_convex_shape=curr_convex_shape.enlarge(offset_width);    ShapeTile[] curr_tree_shapes=curr_convex_shape.divide_into_sections(max_tree_shape_width);    for (int jndex=0; jndex < curr_tree_shapes.length; ++jndex) {      tree_shape_list.add(curr_tree_shapes[jndex]);    }  }  ShapeTile[] result=new ShapeTile[tree_shape_list.size()];  Iterator<ShapeTile> it=tree_shape_list.iterator();  for (int index=0; index < result.length; ++index) {    result[index]=it.next();  }  return result;}  }
class C{  private static <T>Argument createArgument(PropertyEditorModification<T> mod) throws ArgumentException {  StringArgument arg;switch (mod.getType()) {case ADD:case SET:    arg=StringArgument.builder(OPTION_DSCFG_LONG_SET).shortIdentifier(OPTION_DSCFG_SHORT_SET).description(INFO_DSCFG_DESCRIPTION_PROP_VAL.get()).multiValued().valuePlaceholder(INFO_VALUE_SET_PLACEHOLDER.get()).buildArgument();  addValues(mod,arg);return arg;case RESET:arg=StringArgument.builder(OPTION_DSCFG_LONG_RESET).description(INFO_DSCFG_DESCRIPTION_RESET_PROP.get()).multiValued().valuePlaceholder(INFO_PROPERTY_PLACEHOLDER.get()).buildArgument();arg.addValue(mod.getPropertyDefinition().getName());return arg;case REMOVE:arg=StringArgument.builder(OPTION_DSCFG_LONG_REMOVE).description(INFO_DSCFG_DESCRIPTION_REMOVE_PROP_VAL.get()).multiValued().valuePlaceholder(INFO_VALUE_SET_PLACEHOLDER.get()).buildArgument();addValues(mod,arg);return arg;default :throw new IllegalStateException("Unknown modification type: " + mod.getType());}}  }
class C{  public GenericObject next(){  return (SIPObject)super.next();}  }
class C{  void syncSummaryView(View view){  boolean useDefaultSummary=true;  if (isChecked && !isEmpty(summaryOn)) {    summaryView.setText(summaryOn);    useDefaultSummary=false;  } else   if (!isChecked && !isEmpty(summaryOff)) {    summaryView.setText(summaryOff);    useDefaultSummary=false;  }  if (useDefaultSummary) {    CharSequence summary=getSummary();    if (!isEmpty(summary)) {      summaryView.setText(summary);      useDefaultSummary=false;    }  }  int newVisibility=View.GONE;  if (!useDefaultSummary) {    newVisibility=View.VISIBLE;  }  if (newVisibility != summaryView.getVisibility()) {    summaryView.setVisibility(newVisibility);  }}  }
class C{  private static boolean remove(JsonValue subject,PatchOperation operation) throws BadRequestException {  if (!operation.isRemove()) {    throw new BadRequestException("Operation is an " + operation.getOperation() + ", not a remove!");  }  final JsonValue current=subject.get(operation.getField());  if (current == null || current.isNull()) {    return false;  }  if (operation.getValue() == null || operation.getValue().isNull()) {    subject.remove(operation.getField());    return true;  } else {    if (current.isList()) {      while (current.asList().remove(operation.getValue().getObject())) {      }      return true;    } else {      if (operation.getValue().getObject().equals(current.getObject())) {        subject.remove(operation.getField());        return true;      }    }    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnodename.class,args);}  }
class C{  static boolean shiftRight(int[] result,int resultLen,int[] source,int intCount,int count){  int i;  boolean allZero=true;  for (i=0; i < intCount; i++)   allZero&=source[i] == 0;  if (count == 0) {    System.arraycopy(source,intCount,result,0,resultLen);    i=resultLen;  } else {    int leftShiftCount=32 - count;    allZero&=(source[i] << leftShiftCount) == 0;    for (i=0; i < resultLen - 1; i++) {      result[i]=(source[i + intCount] >>> count) | (source[i + intCount + 1] << leftShiftCount);    }    result[i]=(source[i + intCount] >>> count);    i++;  }  return allZero;}  }
class C{  public static String printAttributeValue(Element node,String prefix){  if (node == null) {    return null;  }  StringBuffer xml=new StringBuffer(100);  xml.append('<');  xml.append(prefix).append(node.getLocalName());  NamedNodeMap attrs=node.getAttributes();  int length=attrs.getLength();  for (int i=0; i < length; i++) {    Attr attr=(Attr)attrs.item(i);    xml.append(' ');    xml.append(attr.getNodeName());    xml.append("=\"");    xml.append(attr.getNodeValue());    xml.append('"');  }  xml.append('>');  NodeList children=node.getChildNodes();  if (children != null) {    int len=children.getLength();    for (int i=0; i < len; i++) {      xml.append(print(children.item(i)));    }  }  xml.append("</");  xml.append(prefix).append(node.getLocalName());  xml.append('>');  return xml.toString();}  }
class C{  public boolean isRoot(){  return false;}  }
class C{  public static boolean booleanValue(String s){  boolean b=false;  if (s != null) {    if (s.equalsIgnoreCase("yes")) {      b=true;    } else {      b=Boolean.parseBoolean(s);    }  }  return b;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node emNode;  Node nsNode;  String nsName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("em");  emNode=elementList.item(1);  nsNode=emNode.getNextSibling();  nsName=nsNode.getNodeName();  assertEquals("whitespace","#text",nsName);}  }
class C{  public static Foo fetchByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_Last(uuid,orderByComparator);}  }
class C{  public static DynamicMBean createMBean(ContextResourceLink resourceLink) throws Exception {  String mname=createManagedName(resourceLink);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    Exception e=new Exception("ManagedBean is not found with " + mname);    throw new MBeanException(e);  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  DynamicMBean mbean=managed.createMBean(resourceLink);  ObjectName oname=createObjectName(domain,resourceLink);  if (mserver.isRegistered(oname)) {    mserver.unregisterMBean(oname);  }  mserver.registerMBean(mbean,oname);  return (mbean);}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String name2 : this.names) {    if (caseSensitivity.checkEquals(name,name2)) {      return true;    }  }  return false;}  }
class C{  public LDIFEntryReader(final Reader reader){  super(reader);}  }
class C{  public UnresolvedPermission(String type,String name,String actions,java.security.cert.Certificate certs[]){  super(type);  if (type == null)   throw new NullPointerException("type can't be null");  this.type=type;  this.name=name;  this.actions=actions;  if (certs != null) {    for (int i=0; i < certs.length; i++) {      if (!(certs[i] instanceof X509Certificate)) {        this.certs=certs.clone();        break;      }    }    if (this.certs == null) {      int i=0;      int count=0;      while (i < certs.length) {        count++;        while (((i + 1) < certs.length) && ((X509Certificate)certs[i]).getIssuerDN().equals(((X509Certificate)certs[i + 1]).getSubjectDN())) {          i++;        }        i++;      }      if (count == certs.length) {        this.certs=certs.clone();      }      if (this.certs == null) {        ArrayList<java.security.cert.Certificate> signerCerts=new ArrayList<>();        i=0;        while (i < certs.length) {          signerCerts.add(certs[i]);          while (((i + 1) < certs.length) && ((X509Certificate)certs[i]).getIssuerDN().equals(((X509Certificate)certs[i + 1]).getSubjectDN())) {            i++;          }          i++;        }        this.certs=new java.security.cert.Certificate[signerCerts.size()];        signerCerts.toArray(this.certs);      }    }  }}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String desc,Element sourceElement,String targetFrame){  super(source,type,targetURL,desc,sourceElement);  this.targetFrame=targetFrame;}  }
class C{  public boolean isNodeRelated(DefaultMutableTreeNode aNode){  return (aNode != null) && (getRoot() == aNode.getRoot());}  }
class C{  public boolean remove(HttpConnection connection){  TimeValues times=connectionToTimes.remove(connection);  if (times == null) {    log.warn("Removing a connection that never existed!");    return true;  } else {    return System.currentTimeMillis() <= times.timeExpires;  }}  }
class C{  void put(ThreadLocal<?> key,Object value){  cleanUp();  int firstTombstone=-1;  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == key.reference) {      table[index + 1]=value;      return;    }    if (k == null) {      if (firstTombstone == -1) {        table[index]=key.reference;        table[index + 1]=value;        size++;        return;      }      table[firstTombstone]=key.reference;      table[firstTombstone + 1]=value;      tombstones--;      size++;      return;    }    if (firstTombstone == -1 && k == TOMBSTONE) {      firstTombstone=index;    }  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DocumentBuilderFactory jxFactory=(DocumentBuilderFactory)ClassLoader.getSystemClassLoader().loadClass("oracle.xml.jaxp.JXDocumentBuilderFactory").newInstance();  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(jxFactory,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  flushStartDoc();  m_resultContentHandler.characters(ch,start,length);}  }
class C{  public void testXmlVersionFeature(){  assertFeature("XMLVersion",null);  assertFeature("XMLVersion","");  assertFeature("XMLVersion","1.0");  assertFeature("XMLVersion","1.1");  assertFeature("XMLVERSION","1.1");  assertFeature("+XMLVersion","1.1");  assertNoFeature("XMLVersion","1.2");  assertNoFeature("XMLVersion","2.0");  assertNoFeature("XMLVersion","2.0");}  }
class C{  @Override public void resetBuffer(){  this.response.resetBuffer();}  }
class C{  FileTreeIterator(Path start,int maxDepth,FileVisitOption... options) throws IOException {  this.walker=new FileTreeWalker(Arrays.asList(options),maxDepth);  this.next=walker.walk(start);  assert next.type() == FileTreeWalker.EventType.ENTRY || next.type() == FileTreeWalker.EventType.START_DIRECTORY;  IOException ioe=next.ioeException();  if (ioe != null)   throw ioe;}  }
class C{  public static java.math.BigInteger parseInteger(String lexicalXSDInteger){  if (theConverter == null)   initConverter();  return theConverter.parseInteger(lexicalXSDInteger);}  }
class C{  public static Bitmap takeScreenshotBitmap(Activity activity){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  try {    return takeBitmapUnchecked(activity);  } catch (  Exception e) {    String message="Unable to take screenshot to bitmap of activity " + activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  }}  }
class C{  public Builder rootCa(Certificate rootCa){  this.rootCa=rootCa;  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AudienceElement createAudienceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AudienceElementImpl();}  }
class C{  protected final void serialize(ObjectOutputStream oos,Collection coll) throws IOException {  int count=0;  Object[] objects=coll.toArray();  for (int i=0; i < objects.length; i++) {    if (objects[i] instanceof Serializable)     count++; else     objects[i]=null;  }  oos.writeInt(count);  for (int i=0; count > 0; i++) {    Object o=objects[i];    if (o != null) {      oos.writeObject(o);      count--;    }  }}  }
class C{  public void removePattern(String pattern){  if (pattern == null)   return;  int n=-1;  for (int i=0; i < patterns.length; i++) {    if (patterns[i].equals(pattern)) {      n=i;      break;    }  }  if (n >= 0) {    int j=0;    String results[]=new String[patterns.length - 1];    for (int i=0; i < patterns.length; i++) {      if (i != n)       results[j++]=patterns[i];    }    patterns=results;  }}  }
class C{  public static String encodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length() * 3);  for (  char c : s.toCharArray()) {    if (c < 256) {      sb.append(c);    } else {      sb.append("\\u");      sb.append(Character.forDigit((c >>> 12) & 0xf,16));      sb.append(Character.forDigit((c >>> 8) & 0xf,16));      sb.append(Character.forDigit((c >>> 4) & 0xf,16));      sb.append(Character.forDigit((c) & 0xf,16));    }  }  return sb.toString();}  }
class C{  private void generateJspFragment(Node n,String tagHandlerVar) throws JasperException {  FragmentHelperClass.Fragment fragment=fragmentHelperClass.openFragment(n,methodNesting);  ServletWriter outSave=out;  out=fragment.getGenBuffer().getOut();  String tmpParent=parent;  parent="_jspx_parent";  boolean isSimpleTagParentSave=isSimpleTagParent;  isSimpleTagParent=true;  boolean tmpIsFragment=isFragment;  isFragment=true;  String pushBodyCountVarSave=pushBodyCountVar;  if (pushBodyCountVar != null) {    pushBodyCountVar="_jspx_push_body_count";  }  visitBody(n);  out=outSave;  parent=tmpParent;  isSimpleTagParent=isSimpleTagParentSave;  isFragment=tmpIsFragment;  pushBodyCountVar=pushBodyCountVarSave;  fragmentHelperClass.closeFragment(fragment,methodNesting);  out.print("new " + fragmentHelperClass.getClassName() + "( "+ fragment.getId()+ ", _jspx_page_context, "+ tagHandlerVar+ ", "+ pushBodyCountVar+ ")");}  }
class C{  protected boolean escapingNotNeeded(char ch){  final boolean ret;  if (ch < 127) {    if (ch >= CharInfo.S_SPACE || (CharInfo.S_LINEFEED == ch || CharInfo.S_CARRIAGERETURN == ch || CharInfo.S_HORIZONAL_TAB == ch))     ret=true; else     ret=false;  } else {    ret=m_encodingInfo.isInEncoding(ch);  }  return ret;}  }
class C{  public static <K,V>KeyedObjectPool<K,V> erodingPool(final KeyedObjectPool<K,V> keyedPool,final float factor){  return erodingPool(keyedPool,factor,false);}  }
class C{  public StateInteractive key_typed(char p_key_char){  if (p_key_char == 's') {    i_brd.generate_snapshot();  } else {    return super.key_typed(p_key_char);  }  return this;}  }
class C{  @Override public void send(HandshakeIODataStream out){  if (signedHash.length != 0) {    out.writeUint16(signedHash.length);    out.write(signedHash);  }}  }
class C{  public E peek() throws EmptyStackException {  int n=size();  if (n <= 0) {    throw new EmptyStackException();  } else {    return get(n - 1);  }}  }
class C{  public DottedBorder(Color color,float width){  super(color,width);}  }
class C{  public PagedResultsControl(boolean isCritical,int size,ByteString cookie){  super(OID_PAGED_RESULTS_CONTROL,isCritical);  this.size=size;  if (cookie == null) {    this.cookie=ByteString.empty();  } else {    this.cookie=cookie;  }}  }
class C{  @Override public void init() throws ServletException {  if (getServletConfig().getInitParameter("debug") != null)   debug=Integer.parseInt(getServletConfig().getInitParameter("debug"));  if (getServletConfig().getInitParameter("input") != null)   input=Integer.parseInt(getServletConfig().getInitParameter("input"));  if (getServletConfig().getInitParameter("output") != null)   output=Integer.parseInt(getServletConfig().getInitParameter("output"));  listings=Boolean.parseBoolean(getServletConfig().getInitParameter("listings"));  if (getServletConfig().getInitParameter("readonly") != null)   readOnly=Boolean.parseBoolean(getServletConfig().getInitParameter("readonly"));  compressionFormats=parseCompressionFormats(getServletConfig().getInitParameter("precompressed"),getServletConfig().getInitParameter("gzip"));  if (getServletConfig().getInitParameter("sendfileSize") != null)   sendfileSize=Integer.parseInt(getServletConfig().getInitParameter("sendfileSize")) * 1024;  fileEncoding=getServletConfig().getInitParameter("fileEncoding");  globalXsltFile=getServletConfig().getInitParameter("globalXsltFile");  contextXsltFile=getServletConfig().getInitParameter("contextXsltFile");  localXsltFile=getServletConfig().getInitParameter("localXsltFile");  readmeFile=getServletConfig().getInitParameter("readmeFile");  if (getServletConfig().getInitParameter("useAcceptRanges") != null)   useAcceptRanges=Boolean.parseBoolean(getServletConfig().getInitParameter("useAcceptRanges"));  if (input < 256)   input=256;  if (output < 256)   output=256;  if (debug > 0) {    log("DefaultServlet.init:  input buffer size=" + input + ", output buffer size="+ output);  }  resources=(WebResourceRoot)getServletContext().getAttribute(Globals.RESOURCES_ATTR);  if (resources == null) {    throw new UnavailableException("No resources");  }  if (getServletConfig().getInitParameter("showServerInfo") != null) {    showServerInfo=Boolean.parseBoolean(getServletConfig().getInitParameter("showServerInfo"));  }}  }
class C{  public static Mp4HdlrBox createiTunesStyleHdlrBox(){  Mp4BoxHeader hdlrHeader=new Mp4BoxHeader(Mp4AtomIdentifier.HDLR.getFieldName());  hdlrHeader.setLength(Mp4BoxHeader.HEADER_LENGTH + Mp4HdlrBox.ITUNES_META_HDLR_DAT_LENGTH);  ByteBuffer hdlrData=ByteBuffer.allocate(Mp4HdlrBox.ITUNES_META_HDLR_DAT_LENGTH);  hdlrData.put(HANDLER_POS,(byte)0x6d);  hdlrData.put(HANDLER_POS + 1,(byte)0x64);  hdlrData.put(HANDLER_POS + 2,(byte)0x69);  hdlrData.put(HANDLER_POS + 3,(byte)0x72);  hdlrData.put(RESERVED1_POS,(byte)0x61);  hdlrData.put(RESERVED1_POS + 1,(byte)0x70);  hdlrData.put(RESERVED1_POS + 2,(byte)0x70);  hdlrData.put(RESERVED1_POS + 3,(byte)0x6c);  hdlrData.rewind();  Mp4HdlrBox hdlrBox=new Mp4HdlrBox(hdlrHeader,hdlrData);  return hdlrBox;}  }
class C{  public synchronized int hashCode(){  int h=0;  Iterator i=entrySet().iterator();  while (i.hasNext())   h+=i.next().hashCode();  return h;}  }
class C{  private static LocalizableMessage createMessage(Collection<PropertyException> causes){  Reject.ifNull(causes);  Reject.ifFalse(!causes.isEmpty(),"causes should not be empty");  if (causes.size() == 1) {    return ERR_MISSING_MANDATORY_PROPERTIES_EXCEPTION_SINGLE.get(causes.iterator().next().getPropertyDefinition().getName());  } else {    LocalizableMessageBuilder builder=new LocalizableMessageBuilder();    boolean isFirst=true;    for (    PropertyException cause : causes) {      if (!isFirst) {        builder.append(", ");      }      builder.append(cause.getPropertyDefinition().getName());      isFirst=false;    }    return ERR_MISSING_MANDATORY_PROPERTIES_EXCEPTION_PLURAL.get(builder.toMessage());  }}  }
class C{  public void endRule(){  int n=selectors.size();  for (int i=0; i < n; i++) {    String[] selector=selectors.elementAt(i);    if (selector.length > 0) {      StyleSheet.this.addRule(selector,declaration,isLink);    }  }  declaration.removeAttributes(declaration);  selectors.removeAllElements();}  }
class C{  public static void createSelfSignedCertificateIfNeeded(ServerContext serverContext) throws InitializationException {  try {    RootCfg root=serverContext.getRootConfig();    AdministrationConnectorCfg config=root.getAdministrationConnector();    final SortedSet<String> certAliases=config.getSSLCertNickname();    KeyManagerProviderCfg keyMgrConfig=root.getKeyManagerProvider(config.getKeyManagerProvider());    TrustManagerProviderCfg trustMgrConfig=root.getTrustManagerProvider(config.getTrustManagerProvider());    if (hasDefaultConfigChanged(keyMgrConfig,trustMgrConfig)) {      return;    }    FileBasedKeyManagerProviderCfg fbKeyManagerConfig=(FileBasedKeyManagerProviderCfg)keyMgrConfig;    String keystorePath=getFullPath(fbKeyManagerConfig.getKeyStoreFile());    FileBasedTrustManagerProviderCfg fbTrustManagerConfig=(FileBasedTrustManagerProviderCfg)trustMgrConfig;    String truststorePath=getFullPath(fbTrustManagerConfig.getTrustStoreFile());    String pinFilePath=getFullPath(fbKeyManagerConfig.getKeyStorePinFile());    boolean keystore=false;    boolean truststore=false;    boolean pinFile=false;    int nbFiles=0;    if (new File(keystorePath).exists()) {      keystore=true;      nbFiles++;    }    if (new File(truststorePath).exists()) {      truststore=true;      nbFiles++;    }    if (new File(pinFilePath).exists()) {      pinFile=true;      nbFiles++;    }    if (nbFiles == 3) {      return;    }    if (nbFiles != 0) {      String err="";      if (!keystore) {        err+=keystorePath + " ";      }      if (!truststore) {        err+=truststorePath + " ";      }      if (!pinFile) {        err+=pinFilePath + " ";      }      LocalizableMessage message=ERR_ADMIN_CERTIFICATE_GENERATION_MISSING_FILES.get(err);      logger.error(message);      throw new InitializationException(message);    }    String pwd=new String(SetupUtils.createSelfSignedCertificatePwd());    CertificateManager certManager=new CertificateManager(getFullPath(fbKeyManagerConfig.getKeyStoreFile()),fbKeyManagerConfig.getKeyStoreType(),pwd);    String hostName=SetupUtils.getHostNameForCertificate(DirectoryServer.getServerRoot());    String tempCertPath=getFullPath("config" + File.separator + "admin-cert.txt");    CertificateManager trustManager=new CertificateManager(truststorePath,CertificateManager.KEY_STORE_TYPE_JKS,pwd);    for (    String certAlias : certAliases) {      final KeyType keyType=KeyType.getTypeOrDefault(certAlias);      final String subjectDN="cn=" + Rdn.escapeValue(hostName) + ",O="+ FRIENDLY_NAME+ " "+ keyType+ " Self-Signed Certificate";      certManager.generateSelfSignedCertificate(keyType,certAlias,subjectDN,ADMIN_CERT_VALIDITY);      SetupUtils.exportCertificate(certManager,certAlias,tempCertPath);      final File tempCertFile=new File(tempCertPath);      trustManager.addCertificate(certAlias,tempCertFile);      tempCertFile.delete();    }    if (!new File(pinFilePath).exists()) {      try (final FileWriter file=new FileWriter(pinFilePath);final PrintWriter out=new PrintWriter(file)){        out.println(pwd);        out.flush();      }     }    try {      if (!FilePermission.setPermissions(new File(pinFilePath),new FilePermission(0600))) {        logger.warn(WARN_ADMIN_SET_PERMISSIONS_FAILED,pinFilePath);      }    } catch (    DirectoryException e) {      logger.warn(WARN_ADMIN_SET_PERMISSIONS_FAILED,pinFilePath);    }  } catch (  InitializationException e) {    throw e;  }catch (  Exception e) {    throw new InitializationException(ERR_ADMIN_CERTIFICATE_GENERATION.get(e.getMessage()),e);  }}  }
class C{  public void updateCustomObjectClass(ObjectClass oc,Schema schema){  customObjectClassPanel.update(oc,schema);  schemaElementPanel=customObjectClassPanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,customObjectClassPanel.getTitle().toString());}  }
class C{  private int handleW(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"WR")) {    result.append('R');    index+=2;  } else {    if (index == 0 && (isVowel(charAt(value,index + 1)) || contains(value,index,2,"WH"))) {      if (isVowel(charAt(value,index + 1))) {        result.append('A','F');      } else {        result.append('A');      }      index++;    } else     if ((index == value.length() - 1 && isVowel(charAt(value,index - 1))) || contains(value,index - 1,5,"EWSKI","EWSKY","OWSKI","OWSKY") || contains(value,0,3,"SCH")) {      result.appendAlternate('F');      index++;    } else     if (contains(value,index,4,"WICZ","WITZ")) {      result.append("TS","FX");      index+=4;    } else {      index++;    }  }  return index;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      NS=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      NS=IFSConstants.LIB_NAMESPACE_STRING;    }  }  if (includeNS)   appendNS=IFSConstants.LIB_PREFIX;  xml.append("<").append(appendNS).append("IDPProvidedNameIdentifier").append(" ").append(NS).append(" ");  if ((getNameQualifier() != null) && (!(getNameQualifier().length() == 0))) {    xml.append("NameQualifier").append("=\"").append(getNameQualifier()).append("\"").append(" ");  }  if ((getFormat() != null) && (!(getFormat().length() == 0))) {    xml.append("Format").append("=\"").append(getFormat()).append("\"").append(" ");  }  if ((getName() != null) && (!(getName().length() == 0))) {    xml.append(">").append(getName());    xml.append("</").append(appendNS).append("IDPProvidedNameIdentifier").append(">\n");  }  return xml.toString();}  }
class C{  protected boolean appendFoundJars(Node container,Document factory,Vector v,String desc){  if ((null == v) || (v.size() < 1))   return false;  boolean errors=false;  for (int i=0; i < v.size(); i++) {    Hashtable subhash=(Hashtable)v.elementAt(i);    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      try {        String keyStr=(String)key;        if (keyStr.startsWith(ERROR)) {          errors=true;        }        Element node=factory.createElement("foundJar");        node.setAttribute("name",keyStr.substring(0,keyStr.indexOf("-")));        node.setAttribute("desc",keyStr.substring(keyStr.indexOf("-") + 1));        node.appendChild(factory.createTextNode((String)subhash.get(keyStr)));        container.appendChild(node);      } catch (      Exception e) {        errors=true;        Element node=factory.createElement("foundJar");        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));        container.appendChild(node);      }    }  }  return errors;}  }
class C{  public void destroy() throws DestroyFailedException {  if (!destroyed) {    key.destroy();    principal=null;    destroyed=true;  }}  }
class C{  static void usePersistentSearchRequestControl(Connection connection) throws LdapException {  if (isSupported(PersistentSearchRequestControl.OID)) {    final SearchRequest request=Requests.newSearchRequest("dc=example,dc=com",SearchScope.WHOLE_SUBTREE,"(objectclass=inetOrgPerson)","cn").addControl(PersistentSearchRequestControl.newControl(true,true,true,PersistentSearchChangeType.ADD,PersistentSearchChangeType.DELETE,PersistentSearchChangeType.MODIFY,PersistentSearchChangeType.MODIFY_DN));    final ConnectionEntryReader reader=connection.search(request);    try {      while (reader.hasNext()) {        if (!reader.isReference()) {          final SearchResultEntry entry=reader.readEntry();          System.out.println("Entry changed: " + entry.getName());          final EntryChangeNotificationResponseControl control=entry.getControl(EntryChangeNotificationResponseControl.DECODER,new DecodeOptions());          final PersistentSearchChangeType type=control.getChangeType();          System.out.println("Change type: " + type);          if (type.equals(PersistentSearchChangeType.MODIFY_DN)) {            System.out.println("Previous DN: " + control.getPreviousName());          }          System.out.println("Change number: " + control.getChangeNumber());          System.out.println();        }      }    } catch (    final DecodeException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());    }catch (    final LdapException e) {      System.err.println(e.getMessage());      System.exit(e.getResult().getResultCode().intValue());    }catch (    final SearchResultReferenceIOException e) {      System.err.println("Got search reference(s): " + e.getReference().getURIs());    }  } else {    System.err.println("PersistentSearchRequestControl not supported.");  }}  }
class C{  public SAMLVersionMismatchException(Throwable t){  super(t);}  }
class C{  public void receiveTopoInfoFromRS(TopologyMsg topoMsg) throws DirectoryException, IOException {  replicationServerDomain.receiveTopoInfoFromRS(topoMsg,this,true);}  }
class C{  public boolean isChangeEnabled(){  return change.isEnabled();}  }
class C{  public void entering(String sourceClass,String sourceMethod,Object params[]){  String msg="ENTRY";  if (params == null) {    logp(Level.FINER,sourceClass,sourceMethod,msg);    return;  }  if (!isLoggable(Level.FINER))   return;  for (int i=0; i < params.length; i++) {    msg=msg + " {" + i+ "}";  }  logp(Level.FINER,sourceClass,sourceMethod,msg,params);}  }
class C{  public SortingFocusTraversalPolicy(Comparator<? super Component> comparator){  this.comparator=comparator;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0) {    return x;  }  int ntabs=(((int)x) - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  private static byte[] hmac_sha(String crypto,byte[] keyBytes,byte[] text){  try {    Mac hmac;    hmac=Mac.getInstance(crypto);    SecretKeySpec macKey=new SecretKeySpec(keyBytes,"RAW");    hmac.init(macKey);    return hmac.doFinal(text);  } catch (  GeneralSecurityException gse) {    throw new UndeclaredThrowableException(gse);  }}  }
class C{  public void clearMarkers(){  mGoogleMap.clear();  markers.clear();}  }
class C{  public String dumpNode(boolean recursive){  StringBuffer result=new StringBuffer(512);  this.dumpNode(result,recursive,0,0);  return result.toString();}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(TF_FILTER,CCTextField.class);  registerChild(BTN_SEARCH,CCButton.class);  registerChild(PAGETITLE,CCPageTitle.class);  registerChild(TBL_SESSIONS,CCActionTable.class);  registerChild(CHILD_SERVER_NAME_HREF,CCHref.class);  registerChild(CHILD_SERVER_NAME_MENU,CCDropDownMenu.class);  registerChild(LOGOUT_URL,CCStaticTextField.class);  ptModel.registerChildren(this);  tblModel.registerChildren(this);}  }
class C{  public static ValueExp value(int val){  return new NumericValueExp((long)val);}  }
class C{  @Override public Call<DirectionsResponse> cloneCall(){  return getCall().clone();}  }
class C{  public synchronized void reset(){  pos=0;}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    int n=size;    size=0;    for (int i=0; i < n; i++)     array[i]=null;  }  finally {    lock.unlock();  }}  }
class C{  private void writeConnectionHandlersTableModel(ConnectionHandlerTableModel tableModel,ServerDescriptor desc){  if (isScriptFriendly()) {    for (int i=0; i < tableModel.getRowCount(); i++) {      String[] hostNames=getHostNames(tableModel,i);      for (      String hostName : hostNames) {        println(LocalizableMessage.raw("-"));        for (int j=0; j < tableModel.getColumnCount(); j++) {          LocalizableMessageBuilder line=new LocalizableMessageBuilder();          line.append(tableModel.getColumnName(j)).append(": ");          if (j == 0) {            line.append(getCellValue(hostName,desc));          } else {            line.append(getCellValue(tableModel.getValueAt(i,j),desc));          }          println(line.toMessage());        }      }    }  } else {    TableBuilder table=new TableBuilder();    for (int i=0; i < tableModel.getColumnCount(); i++) {      table.appendHeading(LocalizableMessage.raw(tableModel.getColumnName(i)));    }    for (int i=0; i < tableModel.getRowCount(); i++) {      String[] hostNames=getHostNames(tableModel,i);      for (      String hostName : hostNames) {        table.startRow();        for (int j=0; j < tableModel.getColumnCount(); j++) {          if (j == 0) {            table.appendCell(getCellValue(hostName,desc));          } else {            table.appendCell(getCellValue(tableModel.getValueAt(i,j),desc));          }        }      }    }    TextTablePrinter printer=new TextTablePrinter(getOutputStream());    printer.setColumnSeparator(LIST_TABLE_SEPARATOR);    table.print(printer);  }}  }
class C{  long toCompactValue(int sign){  if (intLen == 0 || sign == 0)   return 0L;  int[] mag=getMagnitudeArray();  int len=mag.length;  int d=mag[0];  if (len > 2 || (d < 0 && len == 2))   return INFLATED;  long v=(len == 2) ? ((mag[1] & LONG_MASK) | (d & LONG_MASK) << 32) : d & LONG_MASK;  return sign == -1 ? -v : v;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      NS=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      NS=IFSConstants.LIB_NAMESPACE_STRING;    }  }  if (includeNS)   appendNS=IFSConstants.LIB_PREFIX;  xml.append("<").append(appendNS).append("SPProvidedNameIdentifier").append(" ").append(NS).append(" ");  if ((getNameQualifier() != null) && (!(getNameQualifier().length() == 0))) {    xml.append("NameQualifier").append("=\"").append(getNameQualifier()).append("\"").append(" ");  }  if ((getFormat() != null) && (!(getFormat().length() == 0))) {    xml.append("Format").append("=\"").append(getFormat()).append("\"").append(" ");  }  if ((getName() != null) && (!(getName().length() == 0))) {    xml.append(">").append(getName());    xml.append("</").append(appendNS).append("SPProvidedNameIdentifier").append(">\n");  }  return xml.toString();}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  if ((responseID == null) || (responseID.length() == 0)) {    responseID=FSUtils.generateID();    if (responseID == null) {      FSUtils.debug.error("FSNameRegistrationResponse.toBASE64EncodedString: " + "couldn't generate ResponseID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer){  this(peer,null,false,true);}  }
class C{  public static Iterable<FakeOperation> generateFakeOperations(Entry entry){  TreeMap<CSN,FakeOperation> operations=new TreeMap<>();  for (  Attribute attr : getHistoricalAttr(entry)) {    for (    ByteString val : attr) {      HistoricalAttributeValue histVal=new HistoricalAttributeValue(val.toString());      if (histVal.isADDOperation()) {        operations.put(histVal.getCSN(),new FakeAddOperation(histVal.getCSN(),entry));      } else       if (histVal.isMODDNOperation()) {        operations.put(histVal.getCSN(),new FakeModdnOperation(histVal.getCSN(),entry));      } else {        CSN csn=histVal.getCSN();        Modification mod=histVal.generateMod();        FakeOperation fakeOperation=operations.get(csn);        if (fakeOperation instanceof FakeModifyOperation) {          FakeModifyOperation modifyFakeOperation=(FakeModifyOperation)fakeOperation;          modifyFakeOperation.addModification(mod);        } else {          String uuidString=getEntryUUID(entry);          FakeModifyOperation modifyFakeOperation=new FakeModifyOperation(entry.getName(),csn,uuidString);          modifyFakeOperation.addModification(mod);          operations.put(histVal.getCSN(),modifyFakeOperation);        }      }    }  }  return operations.values();}  }
class C{  public KeyNotFoundException(Throwable ex){  super(ex);}  }
class C{  @SuppressWarnings("unused") private static Object invoke(Class<?> targetClass,Object o,Object functionalObject,Class<?> invoker,String method,boolean[] primitives,Object[] args) throws Throwable {  return invoke(new InvocationState(),targetClass,o,functionalObject,invoker,method,primitives,args);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  charactersFlush();  int dataIndex=m_data.size();  m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,DTM.PROCESSING_INSTRUCTION_NODE,m_parents.peek(),m_previous,-dataIndex,false);  m_data.addElement(m_valuesOrPrefixes.stringToIndex(target));  m_values.addElement(data);  m_data.addElement(m_valueIndex++);}  }
class C{  public Class<?> returnType(){  return rtype;}  }
class C{  public void removeAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i == 0) {      Object[] objPath={model.getRoot()};      if (objPath[0] == null)       return;      TreePath path=new TreePath(objPath);      JTree.this.removeSelectionPath(path);    }  }}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  private JSONObject validateAndToLowerCase(JSONObject jObj) throws CoreTokenException, JSONException {  if (jObj == null) {    return null;  }  JSONObject retObj=new JSONObject();  Iterator<String> it=jObj.keys();  while (it.hasNext()) {    String key=it.next();    String lcKey=key.toLowerCase();    int pos=lcKey.indexOf(CONNECTOR);    if (pos <= 0) {      String[] args=new String[]{key};      throw new CoreTokenException(227,args,400);    }    if (!internalTokenAttrs.contains(lcKey) && lcKey.startsWith("token.")) {      String[] args=new String[]{key};      throw new CoreTokenException(225,args,400);    } else {      retObj.put(lcKey,jObj.getJSONArray(key));    }  }  return retObj;}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof FederationPrincipal)) {    return false;  }  FederationPrincipal that=(FederationPrincipal)o;  if (this.getName().equals(that.getName())) {    return true;  }  return false;}  }
class C{  Map<String,Set<String>> mergeAttributes(Map<String,Set<String>> existingAttrs,Map<String,Set<String>> newAttrs){  Map<String,Set<String>> mergedAttrs=new CaseInsensitiveHashMap(existingAttrs);  for (  Map.Entry<String,Set<String>> attr : newAttrs.entrySet()) {    Set<String> values=attr.getValue();    Set<String> existingValues=mergedAttrs.get(attr.getKey());    if (existingValues == null) {      existingValues=new CaseInsensitiveHashSet();      mergedAttrs.put(attr.getKey(),existingValues);    }    existingValues.addAll(values);  }  return mergedAttrs;}  }
class C{  public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {  if (debug.messageEnabled()) {    debug.message("DelegationUtils.copyRealmPrivilegesFromParent" + " Parent org: " + parent.getOrganizationName() + " Child org: "+ child.getOrganizationName());  }  DelegationManager pdm=new DelegationManager(token,parent.getOrganizationName());  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());  Set pdps=pdm.getPrivileges();  if (pdps == null || pdps.isEmpty()) {    if (debug.messageEnabled()) {      debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: No privilege subjects in parent");    }    return;  }  for (Iterator items=pdps.iterator(); items.hasNext(); ) {    DelegationPrivilege dp=(DelegationPrivilege)items.next();    Set subjects=dp.getSubjects();    if (subjects == null || subjects.isEmpty()) {      if (debug.messageEnabled()) {        debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: No subjects in privilege: " + dp);      }      continue;    }    Set newSubjects=new HashSet();    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {      String sName=(String)subs.next();      try {        AMIdentity id=IdUtils.getIdentity(token,sName);        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());        newSubjects.add(IdUtils.getUniversalId(newId));      } catch (      IdRepoException ide) {        if (debug.messageEnabled()) {          debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: IdRepoException for: " + dp,ide);        }        continue;      }    }    dp.setSubjects(newSubjects);    Set permissions=dp.getPermissions();    if ((permissions != null) && (!permissions.isEmpty())) {      Iterator it=permissions.iterator();      while (it.hasNext()) {        DelegationPermission perm=(DelegationPermission)it.next();        perm.setOrganizationName("*" + childOrgName);      }    }    cdm.addPrivilege(dp);    if (debug.messageEnabled()) {      debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: Privilege copied from parent: " + dp);    }  }}  }
class C{  public synchronized void stop(){  if (!isRunning) {    return;  }  listener.close();  isRunning=false;}  }
class C{  void deleteTree(WriteableTransaction txn,Tree tree) throws StorageRuntimeException {  if (tree == state) {    return;  }  tree.delete(txn);  if (tree instanceof Index) {    state.deleteRecord(txn,tree.getName());  }}  }
class C{  private TypeInfo createTypeInfo(Field field,Method method){  boolean isMap=apiaryConfig.getAdditionalProperties(method.getResponseTypeUrl(),field.getName()) != null;  boolean isArray=!isMap && (field.getCardinality() == Field.Cardinality.CARDINALITY_REPEATED);  TypeInfo mapKey=null;  TypeInfo mapValue=null;  boolean isMessage=false;  MessageTypeInfo messageTypeInfo=null;  if (isMap) {    Type type=apiaryConfig.getType(field.getTypeUrl());    mapKey=createTypeInfo(apiaryConfig.getField(type,KEY_FIELD_NAME),method);    mapValue=createTypeInfo(apiaryConfig.getField(type,VALUE_FIELD_NAME),method);  } else   if (field.getKind() == Field.Kind.TYPE_MESSAGE) {    isMessage=true;    messageTypeInfo=createMessageTypeInfo(field,method,apiaryConfig,false);  }  return TypeInfo.newBuilder().kind(field.getKind()).isMap(isMap).mapKey(mapKey).mapValue(mapValue).isArray(isArray).isMessage(isMessage).message(messageTypeInfo).build();}  }
class C{  public UpgradeException(Throwable t){  super(t);}  }
class C{  public DeleteOperation processDelete(DN entryDN){  return processDelete(entryDN,null);}  }
class C{  static void writeArrayTable(ObjectOutputStream s,ArrayTable table) throws IOException {  Object keys[];  if (table == null || (keys=table.getKeys(null)) == null) {    s.writeInt(0);  } else {    int validCount=0;    for (int counter=0; counter < keys.length; counter++) {      Object key=keys[counter];      if ((key instanceof Serializable && table.get(key) instanceof Serializable) || (key instanceof ClientPropertyKey && ((ClientPropertyKey)key).getReportValueNotSerializable())) {        validCount++;      } else {        keys[counter]=null;      }    }    s.writeInt(validCount);    if (validCount > 0) {      for (      Object key : keys) {        if (key != null) {          s.writeObject(key);          s.writeObject(table.get(key));          if (--validCount == 0) {            break;          }        }      }    }  }}  }
class C{  private void unregisterHost(Host host){  String hostname=host.getName();  mapper.removeHost(hostname);  if (log.isDebugEnabled()) {    log.debug(sm.getString("mapperListener.unregisterHost",hostname,domain,service));  }}  }
class C{  public ArrayIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  synchronized void receivedLast(){  closedByWriter=true;  notifyAll();}  }
class C{  public void testConstrBI(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  BigDecimal aNumber=new BigDecimal(bA);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",0,aNumber.scale());  try {    new BigDecimal((BigInteger)null);    fail("No NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  public String toPattern(){  return ndf.toPattern();}  }
class C{  public AMUncaughtExceptionViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void validateMetaAliasForNewEntity(String realm,List<String> newMetaAliases) throws WSFederationMetaException {  if (null != newMetaAliases && !newMetaAliases.isEmpty()) {    if (newMetaAliases.size() > 1) {      Set checkForDuplicates=new HashSet<String>(newMetaAliases);      if (checkForDuplicates.size() < newMetaAliases.size()) {        debug.error("WSFederationMetaManager.validateMetaAliasForNewEntity:Duplicate" + " metaAlias values provided in list:\n" + newMetaAliases);        String[] data={newMetaAliases.toString()};        throw new WSFederationMetaException("meta_alias_duplicate",data);      }    }    List<String> allRealmMetaAliaes=getAllHostedMetaAliasesByRealm(realm);    if (!allRealmMetaAliaes.isEmpty()) {      List<String> duplicateMetaAliases=new ArrayList<String>();      for (      String metaAlias : newMetaAliases) {        if (allRealmMetaAliaes.contains(metaAlias)) {          duplicateMetaAliases.add(metaAlias);        }      }      if (!duplicateMetaAliases.isEmpty()) {        StringBuilder sb=new StringBuilder();        for (        String value : duplicateMetaAliases) {          sb.append(value);          sb.append("\t");        }        debug.error("WSFederationMetaManager.validateMetaAliasForNewEntity: metaAliases " + sb.toString() + " already exists in the realm: "+ realm);        String[] data={sb.toString(),realm};        throw new WSFederationMetaException("meta_alias_exists",data);      }    }  }}  }
class C{  public void onToggleTorch(View v){  if (mWZCameraView == null)   return;  WZCamera activeCamera=mWZCameraView.getCamera();  activeCamera.setTorchOn(mBtnTorch.toggleState());}  }
class C{  public EmptyFrameException(){}  }
class C{  @Override public int hashCode(){  return time.hashCode() ^ offset.hashCode();}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute(createQueryString("/reload").toString());}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(eContentType,content,encapsulate,CMSUtils.getProvider(sigProvider),true);}  }
class C{  private static String generateEncryptedID(SessionServerConfig serverConfig){  String r=Long.toHexString(secureRandom.getInstanceForCurrentThread().nextLong());  return AccessController.doPrivileged(new EncodeAction(r + "@" + serverConfig.getPrimaryServerID(),Crypt.getHardcodedKeyEncryptor()));}  }
class C{  public MetaBrush(){  super(META_BRUSH);}  }
class C{  public void testSetScaleRoundFloor(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_FLOOR);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public static long longForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return longForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  public boolean beginChoiceDisplay(ChildDisplayEvent event){  return (curCallback != null) && (curCallback instanceof ChoiceCallback);}  }
class C{  public MessagePropertyKey(String description,Integer ordinal){  this.description=description;  this.ordinal=ordinal;}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> handleRead(Context context,ReadRequest request){  try {    return connectionFactory.getConnection().readAsync(new UpdateContext(context),copyOfReadRequest(request).setResourcePath(updateStore.concat(request.getResourcePathObject())));  } catch (  ResourceException e) {    return e.asPromise();  }}  }
class C{  public static boolean assertGUID(final int[] value){  return value != null && value.length == GUID.GUID_LENGTH;}  }
class C{  public static boolean isReadable(Path path){  return isAccessible(path,AccessMode.READ);}  }
class C{  public void unbind(org.omg.CosNaming.NameComponent[] n) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("unbind",true);    org.omg.CosNaming.NameHelper.write($out,n);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    unbind(n);  } finally {    _releaseReply($in);  }}  }
class C{  private static void addAdvice(PolicyDecision pd,String adviceKey,String adviceValue){  if ((pd != null) && (pd.hasAdvices())) {    Map actionDecisions=pd.getActionDecisions();    Iterator actionDecisionIter=actionDecisions.keySet().iterator();    while (actionDecisionIter.hasNext()) {      String key=(String)actionDecisionIter.next();      ActionDecision ad=(ActionDecision)actionDecisions.get(key);      Map advices=ad.getAdvices();      if ((advices != null) && !advices.isEmpty()) {        Set values=(Set)advices.get(adviceKey);        if (values == null) {          values=new HashSet();        }        values.add(adviceValue);        advices.put(adviceKey,values);      }    }  }}  }
class C{  public void auditModuleFailure(LoginState loginState,Principal principal,AuthenticationAuditEntry auditEntryDetail){  String realm=getRealmFromState(loginState);  if (eventPublisher.isAuditing(realm,AUTHENTICATION_TOPIC,AM_LOGIN_MODULE_COMPLETED)) {    String principalName=principal == null ? null : principal.getName();    Map sharedState=loginState == null ? emptyMap() : loginState.getSharedState();    String authId=getUserId(principalName,realm);    if ((isEmpty(principalName) || isEmpty(authId)) && sharedState.containsKey(SHARED_STATE_USERNAME)) {      principalName=(String)sharedState.get(SHARED_STATE_USERNAME);      authId=getUserId(principalName,realm);    }    auditModuleEvent(loginState,realm,principalName,authId,FAILED,auditEntryDetail);  }}  }
class C{  public boolean requireEnd(){  return requireEnd;}  }
class C{  void notifyReplicaOffline(DN domainDN,CSN offlineCSN) throws ChangelogException {synchronized (domainsLock) {    final String domainId=domains.get(domainDN);    if (domainId == null) {      return;    }    final File serverIdPath=getServerIdPath(domainId,offlineCSN.getServerId());    if (!serverIdPath.exists()) {      return;    }    final File offlineFile=new File(serverIdPath,REPLICA_OFFLINE_STATE_FILENAME);    try (Writer writer=newTempFileWriter(offlineFile)){      writer.write(offlineCSN.toString());      writer.close();      changelogState.addOfflineReplica(domainDN,offlineCSN);      commitFile(offlineFile);    } catch (    IOException e) {      throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_WRITE_REPLICA_OFFLINE_STATE_FILE.get(domainDN.toString(),offlineCSN.getServerId(),offlineFile.getPath(),offlineCSN.toString()),e);    }  }}  }
class C{  private void checkAndNotify(FileEntry parent,FileEntry[] previous,File[] files){  int c=0;  FileEntry[] current=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (  FileEntry entry : previous) {    while (c < files.length && comparator.compare(entry.getFile(),files[c]) > 0) {      current[c]=createFileEntry(parent,files[c]);      doCreate(current[c]);      c++;    }    if (c < files.length && comparator.compare(entry.getFile(),files[c]) == 0) {      doMatch(entry,files[c]);      checkAndNotify(entry,entry.getChildren(),listFiles(files[c]));      current[c]=entry;      c++;    } else {      checkAndNotify(entry,entry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);      doDelete(entry);    }  }  for (; c < files.length; c++) {    current[c]=createFileEntry(parent,files[c]);    doCreate(current[c]);  }  parent.setChildren(current);}  }
class C{  public void addColumn(TableColumn aColumn){  if (aColumn == null) {    throw new IllegalArgumentException("Object is null");  }  tableColumns.addElement(aColumn);  aColumn.addPropertyChangeListener(this);  invalidateWidthCache();  fireColumnAdded(new TableColumnModelEvent(this,0,getColumnCount() - 1));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringcountnegative.class,args);}  }
class C{  public void testDivideRemainderIsZero(){  String a="8311389578904553209874735431110";  int aScale=-15;  String b="237468273682987234567849583746";  int bScale=20;  String c="3.5000000000000000000000000000000E+36";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String acsUrl=getDisplayFieldStringValue("SalesforceLoginURL");  try {    if ((acsUrl != null) && (acsUrl.length() > 0)) {      String realm=(String)getPageSessionAttribute("entityRealm");      String entityId=(String)getPageSessionAttribute(ENTITY_ID);      TaskModel model=(TaskModel)getModelInternal();      model.setAcsUrl(realm,entityId,acsUrl);      redirectToHome();    } else     if ((acsUrl == null) || !(acsUrl.length() > 0)) {      ConfigureSalesForceAppsFinishWarningViewBean vb=(ConfigureSalesForceAppsFinishWarningViewBean)getViewBean(ConfigureSalesForceAppsFinishWarningViewBean.class);      vb.forwardTo(getRequestContext());    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public static <T>T[] insert(T[] array,int currentSize,int index,T element){  assert currentSize <= array.length;  if (currentSize + 1 <= array.length) {    System.arraycopy(array,index,array,index + 1,currentSize - index);    array[index]=element;    return array;  }  @SuppressWarnings("unchecked") T[] newArray=ArrayUtils.newUnpaddedArray((Class<T>)array.getClass().getComponentType(),growSize(currentSize));  System.arraycopy(array,0,newArray,0,index);  newArray[index]=element;  System.arraycopy(array,index,newArray,index + 1,array.length - index);  return newArray;}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.changedUpdate(e,a,f);synchronized (this) {    state|=RELOAD_FLAG | RELOAD_IMAGE_FLAG;  }  preferenceChanged(null,true,true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodechildnodesempty.class,args);}  }
class C{  public void tagSwapAndCopyFile() throws Exception {  BufferedReader br=null;  BufferedWriter bw=null;  try {    FileInputStream fi=new FileInputStream(getSourceFile());    InputStreamReader ir=new InputStreamReader(fi,DEFAULT_ENCODING);    br=new BufferedReader(ir);    FileOutputStream fo=new FileOutputStream(getDestinationFile());    OutputStreamWriter ow=new OutputStreamWriter(fo,DEFAULT_ENCODING);    bw=new BufferedWriter(ow);    StringBuffer tokenQueue=new StringBuffer(256);    StringBuffer resultData=new StringBuffer();    String lineData=null;    while ((lineData=br.readLine()) != null) {      String transformedLine=scanAndReplaceTokens(lineData,resultData,tokenQueue);      bw.write(transformedLine);    }  } catch (  Exception e) {    throw e;  } finally {    if (br != null) {      try {        br.close();      } catch (      IOException ie) {        Debug.log("ReplaceTokens.tagSwapAndCopy() - Exception " + "occurred while closing Reader. ",ie);      }    }    if (bw != null) {      try {        bw.flush();        bw.close();      } catch (      IOException ie) {        Debug.log("ReplaceTokens.tagSwapAndCopy() - Exception " + "occurred while closing Writer. ",ie);      }    }  }}  }
class C{  protected static ComponentUI[] uisToArray(Vector uis){  if (uis == null) {    return new ComponentUI[0];  } else {    int count=uis.size();    if (count > 0) {      ComponentUI[] u=new ComponentUI[count];      for (int i=0; i < count; i++) {        u[i]=(ComponentUI)uis.elementAt(i);      }      return u;    } else {      return null;    }  }}  }
class C{  protected PStmtKey createKey(final String sql){  String catalog=null;  try {    catalog=getCatalog();  } catch (  final SQLException e) {  }  return new PStmtKey(normalizeSQL(sql),catalog);}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  private Document initializeModel(EditorKit kit,URL page){  Document doc=kit.createDefaultDocument();  if (pageProperties != null) {    for (Enumeration<String> e=pageProperties.keys(); e.hasMoreElements(); ) {      String key=e.nextElement();      doc.putProperty(key,pageProperties.get(key));    }    pageProperties.clear();  }  if (doc.getProperty(Document.StreamDescriptionProperty) == null) {    doc.putProperty(Document.StreamDescriptionProperty,page);  }  return doc;}  }
class C{  @Override protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {  Class<?>[] cinterfaces=new Class[interfaces.length];  for (int i=0; i < interfaces.length; i++) {    cinterfaces[i]=classLoader.loadClass(interfaces[i]);  }  try {    return Proxy.getProxyClass(classLoader,cinterfaces);  } catch (  IllegalArgumentException e) {    throw new ClassNotFoundException(null,e);  }}  }
class C{  public static ValueExp value(double val){  return new NumericValueExp(val);}  }
class C{  private void handleActionBaz(String param1,String param2){  String text="Baz: " + param1 + ", "+ param2;  Log.v(TAG,text);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsPrefix="";  String nsDeclaration="";  if (includeNSPrefix) {    nsPrefix=XACMLConstants.XACML_NS_PREFIX + ":";  }  if (declareNS) {    nsDeclaration=XACMLConstants.XACML_NS_DECLARATION;  }  sb.append("<").append(nsPrefix).append(XACMLConstants.OBLIGATIONS).append(" ").append(nsDeclaration).append(">\n");  int length=0;  if (obligations != null) {    length=obligations.size();    for (int i=0; i < length; i++) {      Obligation obligation=(Obligation)obligations.get(i);      sb.append(obligation.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(nsPrefix).append(XACMLConstants.OBLIGATIONS).append(">\n");  return sb.toString();}  }
class C{  public static void initPackage(String packageName) throws IOException {  Logger logger=Logger.getLogger(packageName);  if (disableLoggingToConsole()) {    logger.setUseParentHandlers(false);  }  logger.addHandler(fileHandler);  logger.info(getInitialLogRecord());}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  if (zoneStrings == null) {    zoneStrings=TimeZoneNameUtility.getZoneStrings(locale);  }  stream.defaultWriteObject();}  }
class C{  public static boolean isEnclosedBetween(final String input,final String encloser){  return isEnclosedBetween(input,encloser,encloser);}  }
class C{  private synchronized void sendPastNotifications(Date currentDate,boolean currentFlag){  TimerNotification notif;  Integer notifID;  Date date;  ArrayList<Object[]> values=new ArrayList<Object[]>(timerTable.values());  for (  Object[] obj : values) {    notif=(TimerNotification)obj[TIMER_NOTIF_INDEX];    notifID=notif.getNotificationID();    date=(Date)obj[TIMER_DATE_INDEX];    while ((currentDate.after(date)) && (timerTable.containsKey(notifID))) {      if (currentFlag == true) {        if (TIMER_LOGGER.isLoggable(Level.FINER)) {          StringBuilder strb=new StringBuilder().append("sending past timer notification:").append("\n\tNotification source = ").append(notif.getSource()).append("\n\tNotification type = ").append(notif.getType()).append("\n\tNotification ID = ").append(notif.getNotificationID()).append("\n\tNotification date = ").append(date).append("\n\tNotification period = ").append(obj[TIMER_PERIOD_INDEX]).append("\n\tNotification nb of occurrences = ").append(obj[TIMER_NB_OCCUR_INDEX]).append("\n\tNotification executes at fixed rate = ").append(obj[FIXED_RATE_INDEX]);          TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendPastNotifications",strb.toString());        }        sendNotification(date,notif);        TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendPastNotifications","past timer notification sent");      }      updateTimerTable(notif.getNotificationID());    }  }}  }
class C{  public boolean userHasReadAdminPrivs(SSOToken token,String realm) throws DelegationException, SSOException {  DelegationPermission dp=delegationPermissionFactory.newInstance(realm,"rest","1.0","sessions","getProperty",Collections.singleton("READ"),Collections.<String,String>emptyMap());  return delegationEvaluator.isAllowed(token,dp,Collections.<String,Set<String>>emptyMap());}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementassociatedattribute.class,args);}  }
class C{  protected void computeFields(){  int mask=0;  if (isPartiallyNormalized()) {    mask=getSetStateFields();    int fieldMask=~mask & ALL_FIELDS;    if (fieldMask != 0 || cachedFixedDate == Long.MIN_VALUE) {      mask|=computeFields(fieldMask,mask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK));      assert mask == ALL_FIELDS;    }  } else {    mask=ALL_FIELDS;    computeFields(mask,0);  }  setFieldsComputed(mask);}  }
class C{  @Override public boolean validate(Set<String> values){  for (  String toTest : values) {    if (StringUtils.isEmpty(toTest) || NOT_ALPHA_NUM.matcher(toTest).find()) {      return false;    }  }  return true;}  }
class C{  @Override public void engineStore(final OutputStream stream,final char[] password){  if (stream != null) {    throw new IllegalArgumentException("the LDAP key store is not file based");  }  engineStore(null);}  }
class C{  @Override public Foo[] findByUuid_C_PrevAndNext(long fooId,String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public void associateAsyncPrettyPrinterWithId(String requestId,AsyncPrettyPrinter asyncPrettyPrinter){  if (mRequestIdMap.put(requestId,asyncPrettyPrinter) != null) {    throw new IllegalArgumentException("cannot associate different " + "pretty printers with the same request id: " + requestId);  }}  }
class C{  protected String generatePeerId(R context,String endpointId){  return endpointId + "_" + UUID.randomUUID().toString();}  }
class C{  public boolean isValidEntry(String dn) throws SSOException {  if (!LDAPUtils.isDN(dn)) {    return false;  }  SSOTokenManager.getInstance().validateToken(token);  if (AMCommonUtils.debug.messageEnabled()) {    AMCommonUtils.debug.message("AMStoreConnection.isValidEntry(): DN=" + dn);  }  return dsServices.doesEntryExists(token,dn);}  }
class C{  public void importLDIF(ImportParameters parameters) throws EmbeddedDirectoryServerException {  checkServerIsRunning();  Reject.checkNotNull(connectionParams);  int returnCode=ImportLDIF.mainImportLDIF(parameters.toCommandLineArguments(configParams.getConfigurationFile(),connectionParams),!isRunning(),outStream,errStream);  if (returnCode != 0) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_IMPORT_DATA.get(parameters.getLdifFile(),configParams.getServerRootDirectory(),returnCode));  }}  }
class C{  public ServiceConfig addServiceConfig(String serviceName,Map attributes) throws SMSException {  try {    ServiceConfigManagerImpl scmi=ServiceConfigManagerImpl.getInstance(token,serviceName,ServiceManager.getVersion(serviceName));    ServiceConfigImpl sci=scmi.getOrganizationConfig(token,orgName,null);    if (sci == null || sci.isNewEntry()) {      ServiceConfigManager scm=new ServiceConfigManager(serviceName,token);      return (scm.createOrganizationConfig(orgName,attributes));    } else {      SMSEntry.debug.error("OrganizationConfigManager: " + "ServiceConfig already exists: " + sci.getDN());      throw (new SMSException(SMSEntry.bundle.getString("sms-service_already_exists1")));    }  } catch (  SSOException ssoe) {    SMSEntry.debug.error("OrganizationConfigManager: Unable to " + "add Service Config",ssoe);    throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));  }}  }
class C{  public BraceScanner(String fileName,Reader reader,Properties properties,ErrorManager err){  super(fileName,reader,properties,err);  init();}  }
class C{  public static StringArgument bindPasswordArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_DESCRIPTION_BINDPASSWORD.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildArgument();}  }
class C{  IndexFilter(EntryContainer entryContainer,ReadableTransaction txn,SearchOperation searchOp,StringBuilder debugBuilder,BackendMonitor monitor){  this.entryContainer=entryContainer;  this.txn=txn;  this.searchOp=searchOp;  this.buffer=debugBuilder;  this.monitor=monitor;}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns){  super(r,result);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public String toString(){  String orig=super.toString();  if (unexecs != null) {    orig+=("First unexecuted modification: " + unexecs[0].toString());  }  return orig;}  }
class C{  @Override public boolean allowedInBranch(){  return true;}  }
class C{  @DataProvider(name="certificateExactMatchValidAssertionValues") public Object[][] createCertificateExactMatchingRuleValidAssertionValues(){  return new Object[][]{{"{serialNumber 123,issuer rdnSequence:\"c=DE\"}"},{"{serialNumber 123,issuer rdnSequence:\"\"}"},{"{serialNumber 0123,issuer rdnSequence:\"cn=issuer\"}"},{"{  serialNumber  123,  issuer  rdnSequence:\"c=DE\"  }"},{"{serialNumber 123,issuer rdnSequence:\"cn=escaped\"\"dquotes\"}"},{"{serialNumber 123,issuer rdnSequence:\"cn=\u00D6\u00C4\"}"}};}  }
class C{  void reset(Component owner,Component contents,int ownerX,int ownerY){  if (getComponent() == null) {    component=createComponent(owner);  }  Component c=getComponent();  if (c instanceof JWindow) {    JWindow component=(JWindow)getComponent();    component.setLocation(ownerX,ownerY);    component.getContentPane().add(contents,BorderLayout.CENTER);    component.invalidate();    component.validate();    if (component.isVisible()) {      pack();    }  }}  }
class C{  public void deactivate(){  active=false;}  }
class C{  public static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  public FilterIdAttribute(String filter){  super(OctetUtils.toOctets(AttributeType.FILTER_ID,filter));  filterId=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public AMSearchResults searchPeopleContainers(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchPeopleContainers(wildcard,null,searchControl);}  }
class C{  public String to_string(){  return name;}  }
class C{  private static <T>T newInstanceNoServiceLoader(Class<T> type,Class<?> providerClass){  if (System.getSecurityManager() == null) {    return null;  }  try {    final Method creationMethod=providerClass.getDeclaredMethod("newTransformerFactoryNoServiceLoader");    final int modifiers=creationMethod.getModifiers();    if (!Modifier.isPublic(modifiers) || !Modifier.isStatic(modifiers)) {      return null;    }    final Class<?> returnType=creationMethod.getReturnType();    if (type.isAssignableFrom(returnType)) {      final Object result=creationMethod.invoke(null,(Object[])null);      return type.cast(result);    } else {      throw new ClassCastException(returnType + " cannot be cast to " + type);    }  } catch (  ClassCastException e) {    throw new TransformerFactoryConfigurationError(e,e.getMessage());  }catch (  NoSuchMethodException exc) {    return null;  }catch (  Exception exc) {    return null;  }}  }
class C{  private boolean handleConflictResolution(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      SynchronizationProviderResult result=provider.handleConflictResolution(this);      if (!result.continueProcessing()) {        setResultCodeAndMessageNoInfoDisclosure(entry,result.getResultCode(),result.getErrorMessage());        setMatchedDN(result.getMatchedDN());        setReferralURLs(result.getReferralURLs());        return false;      }    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_DELETE_SYNCH_CONFLICT_RESOLUTION_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return false;    }  }  return true;}  }
class C{  public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback){  if (listener == null) {    throw new IllegalArgumentException("Listener can't be null");  }  listenerList.add(new ListenerInfo(listener,filter,handback));}  }
class C{  @Override public void replaceSelection(String content){  replaceSelection(content,true);}  }
class C{  public void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {  java.lang.String fmsg=org.apache.xalan.res.XSLMessages.createXPATHMessage(msg,args);  throw new javax.xml.transform.TransformerException(fmsg);}  }
class C{  public static boolean parseStringAsBoolean(String in) throws IndexParseFieldException {  in=in.trim();  if (in.equalsIgnoreCase("T")) {    return true;  } else   if (in.equalsIgnoreCase("TRUE")) {    return true;  } else   if (in.equalsIgnoreCase("1")) {    return true;  } else   if (in.equalsIgnoreCase("F")) {    return false;  } else   if (in.equalsIgnoreCase("FALSE")) {    return false;  } else   if (in.equalsIgnoreCase("0")) {    return false;  }  throw new IndexParseFieldException(in);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextone.class,args);}  }
class C{  private static void moveExplicitAliases(XMPNode tree,ParseOptions options) throws XMPException {  if (!tree.getHasAliases()) {    return;  }  tree.setHasAliases(false);  boolean strictAliasing=options.getStrictAliasing();  for (Iterator schemaIt=tree.getUnmodifiableChildren().iterator(); schemaIt.hasNext(); ) {    XMPNode currSchema=(XMPNode)schemaIt.next();    if (!currSchema.getHasAliases()) {      continue;    }    for (Iterator propertyIt=currSchema.iterateChildren(); propertyIt.hasNext(); ) {      XMPNode currProp=(XMPNode)propertyIt.next();      if (!currProp.isAlias()) {        continue;      }      currProp.setAlias(false);      XMPAliasInfo info=XMPMetaFactory.getSchemaRegistry().findAlias(currProp.getName());      if (info != null) {        XMPNode baseSchema=XMPNodeUtils.findSchemaNode(tree,info.getNamespace(),null,true);        baseSchema.setImplicit(false);        XMPNode baseNode=XMPNodeUtils.findChildNode(baseSchema,info.getPrefix() + info.getPropName(),false);        if (baseNode == null) {          if (info.getAliasForm().isSimple()) {            String qname=info.getPrefix() + info.getPropName();            currProp.setName(qname);            baseSchema.addChild(currProp);            propertyIt.remove();          } else {            baseNode=new XMPNode(info.getPrefix() + info.getPropName(),info.getAliasForm().toPropertyOptions());            baseSchema.addChild(baseNode);            transplantArrayItemAlias(propertyIt,currProp,baseNode);          }        } else         if (info.getAliasForm().isSimple()) {          if (strictAliasing) {            compareAliasedSubtrees(currProp,baseNode,true);          }          propertyIt.remove();        } else {          XMPNode itemNode=null;          if (info.getAliasForm().isArrayAltText()) {            int xdIndex=XMPNodeUtils.lookupLanguageItem(baseNode,XMPConst.X_DEFAULT);            if (xdIndex != -1) {              itemNode=baseNode.getChild(xdIndex);            }          } else           if (baseNode.hasChildren()) {            itemNode=baseNode.getChild(1);          }          if (itemNode == null) {            transplantArrayItemAlias(propertyIt,currProp,baseNode);          } else {            if (strictAliasing) {              compareAliasedSubtrees(currProp,itemNode,true);            }            propertyIt.remove();          }        }      }    }    currSchema.setHasAliases(false);  }}  }
class C{  public static boolean isProducerCapability(Capability<?> capability){  return capability == TeslaCapabilities.CAPABILITY_PRODUCER;}  }
class C{  public static TangoPoseData matrixToTangoPose(Matrix4 transform){  Vector3 p=transform.getTranslation();  Quaternion q=new Quaternion();  q.fromMatrix(transform);  TangoPoseData tangoPose=new TangoPoseData();  double[] t=tangoPose.translation=new double[3];  t[0]=p.x;  t[1]=p.y;  t[2]=p.z;  double[] r=tangoPose.rotation=new double[4];  r[0]=q.x;  r[1]=q.y;  r[2]=q.z;  r[3]=q.w;  return tangoPose;}  }
class C{  private final Object slotExchange(Object item,boolean timed,long ns){  Node p=participant.get();  Thread t=Thread.currentThread();  if (t.isInterrupted())   return null;  for (Node q; ; ) {    if ((q=slot) != null) {      if (U.compareAndSwapObject(this,SLOT,q,null)) {        Object v=q.item;        q.match=item;        Thread w=q.parked;        if (w != null)         U.unpark(w);        return v;      }      if (NCPU > 1 && bound == 0 && U.compareAndSwapInt(this,BOUND,0,SEQ))       arena=new Node[(FULL + 2) << ASHIFT];    } else     if (arena != null)     return null; else {      p.item=item;      if (U.compareAndSwapObject(this,SLOT,null,p))       break;      p.item=null;    }  }  int h=p.hash;  long end=timed ? System.nanoTime() + ns : 0L;  int spins=(NCPU > 1) ? SPINS : 1;  Object v;  while ((v=p.match) == null) {    if (spins > 0) {      h^=h << 1;      h^=h >>> 3;      h^=h << 10;      if (h == 0)       h=SPINS | (int)t.getId(); else       if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)       Thread.yield();    } else     if (slot != p)     spins=SPINS; else     if (!t.isInterrupted() && arena == null && (!timed || (ns=end - System.nanoTime()) > 0L)) {      U.putObject(t,BLOCKER,this);      p.parked=t;      if (slot == p)       U.park(false,ns);      p.parked=null;      U.putObject(t,BLOCKER,null);    } else     if (U.compareAndSwapObject(this,SLOT,p,null)) {      v=timed && ns <= 0L && !t.isInterrupted() ? TIMED_OUT : null;      break;    }  }  U.putOrderedObject(p,MATCH,null);  p.item=null;  p.hash=h;  return v;}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  public void selectInitialValue(){  OptionPaneUI ui=getUI();  if (ui != null) {    ui.selectInitialValue(this);  }}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmpLen < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;    tmpLen=newSize;    tmpBase=0;  }  return tmp;}  }
class C{  public void GetInstance03(boolean mode) throws CertificateException, IllegalArgumentException, CRLException {  try {    CertificateFactory.getInstance(null,mProv);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],mProv);      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    CertificateException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  CertificateFactory cerF;  for (int i=0; i < validValues.length; i++) {    cerF=CertificateFactory.getInstance(validValues[i],mProv);    assertEquals("Incorrect type",cerF.getType(),validValues[i]);    assertEquals("Incorrect provider",cerF.getProvider(),mProv);    checkResult(cerF,mode);  }}  }
class C{  public static void doSSOFederate(HttpServletRequest request,HttpServletResponse response,PrintWriter out,boolean isFromECP,String reqBinding,SAML2EventLogger auditor) throws FederatedSSOException {  String classMethod="IDPSSOFederate.doSSOFederate: ";  try {    final IDPSSOFederate idpSsoFederateRequest=new IDPSSOFederate(isFromECP);    idpSsoFederateRequest.withEventAuditor(auditor);    idpSsoFederateRequest.process(request,response,out,reqBinding);  } catch (  IOException ioe) {    SAML2Utils.debug.error(classMethod + "I/O error",ioe);  }catch (  SessionException sso) {    SAML2Utils.debug.error("SSOException : ",sso);  }}  }
class C{  public long min(){  final long min=deltaMin.get();  return min == INITIAL_DELTA_MIN ? 0 : min;}  }
class C{  public AbstractLoginModuleBinder(AuthLoginModule authLoginModule){  this.authLoginModule=authLoginModule;  this.authLoginModule.setAMLoginModule(this);}  }
class C{  private SubSequence(final int offset,final int length){  this.subOffset=offset;  this.subLength=length;}  }
class C{  GF256Poly multiply(GF256Poly other){  if (!field.equals(other.field)) {    throw new IllegalArgumentException("GF256Polys do not have same GF256 field");  }  if (isZero() || other.isZero()) {    return field.getZero();  }  int[] aCoefficients=this.coefficients;  int aLength=aCoefficients.length;  int[] bCoefficients=other.coefficients;  int bLength=bCoefficients.length;  int[] product=new int[aLength + bLength - 1];  for (int i=0; i < aLength; i++) {    int aCoeff=aCoefficients[i];    for (int j=0; j < bLength; j++) {      product[i + j]=GF256.addOrSubtract(product[i + j],field.multiply(aCoeff,bCoefficients[j]));    }  }  return new GF256Poly(field,product);}  }
class C{  public WebRuleSet(){  this("",false);}  }
class C{  protected synchronized void discardKeyEvents(Component comp){  if (comp == null) {    return;  }  long start=-1;  for (Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator(); iter.hasNext(); ) {    TypeAheadMarker marker=iter.next();    Component toTest=marker.untilFocused;    boolean match=(toTest == comp);    while (!match && toTest != null && !(toTest instanceof Window)) {      toTest=toTest.getParent();      match=(toTest == comp);    }    if (match) {      if (start < 0) {        start=marker.after;      }      iter.remove();    } else     if (start >= 0) {      purgeStampedEvents(start,marker.after);      start=-1;    }  }  purgeStampedEvents(start,-1);}  }
class C{  public boolean validate(Set<String> values){  for (  String value : values) {    if (!validate(value)) {      return false;    }  }  return true;}  }
class C{  public boolean hasBeenModified(){  if (!hasSubSchema()) {    return isAttributesModified();  } else {    boolean modified=isAttributesModified();    for (    Map.Entry<String,ServiceSchemaModificationWrapper> subSchema : subSchemas.entrySet()) {      modified|=subSchema.getValue().hasBeenModified();    }    return modified;  }}  }
class C{  public void updateTaskCompletionState(DirectoryException de){  initState=TaskState.STOPPED_BY_ERROR;  try {    if (de == null) {      initState=TaskState.COMPLETED_SUCCESSFULLY;    } else {      taskCompletionError=de.getMessageObject();    }  }  finally {synchronized (initState) {      initState.notify();    }  }}  }
class C{  @Override public int indexOf(Object object){  return indexOf(object,0);}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.EntityDescriptorType createEntityDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.EntityDescriptorTypeImpl();}  }
class C{  public AccountLockedException(){  super();}  }
class C{  public SearchResults search(java.security.Principal principal,Guid guid,int scope,String searchFilter,String attrNames[],boolean attrOnly,SearchControl searchControl) throws UMSException {  String id=guid.getDn();  String[] attrNames1=null;  if (attrNames != null) {    attrNames1=new String[attrNames.length + 1];    System.arraycopy(attrNames,0,attrNames1,0,attrNames.length);    attrNames1[attrNames1.length - 1]="objectclass";  } else {    attrNames1=new String[]{"objectclass"};  }  ConnectionEntryReader ldapResults=null;  if (searchFilter == null) {    searchFilter="(objectclass=*)";  }  ResultCode errorCode;  try {    Connection conn=getConnection(principal);    List<Control> controls=getSearchControls(searchControl);    if (replicaRetryNum != 0) {      readLDAPEntry(conn,id,null);    }    SearchRequest request=null;    int retry=0;    while (retry <= connNumRetry) {      if (debug.messageEnabled()) {        debug.message("DataLayer.search retry: " + retry);      }      if (searchControl != null && searchControl.isGetAllReturnAttributesEnabled()) {        attrNames1=new String[]{"*"};      }      request=LDAPRequests.newSearchRequest(id,SearchScope.valueOf(scope),searchFilter,attrNames1);      break;    }    for (    Control control : controls) {      request.addControl(control);    }    ldapResults=conn.search(request);    SearchResults result=new SearchResults(conn,ldapResults,conn,this);    result.set(SearchResults.BASE_ID,id);    result.set(SearchResults.SEARCH_FILTER,searchFilter);    result.set(SearchResults.SEARCH_SCOPE,scope);    if ((searchControl != null) && (searchControl.contains(SearchControl.KeyVlvRange) || searchControl.contains(SearchControl.KeyVlvJumpTo))) {      result.set(SearchResults.EXPECT_VLV_RESPONSE,Boolean.TRUE);    }    if (searchControl != null && searchControl.contains(SearchControl.KeySortKeys)) {      SortKey[] sortKeys=searchControl.getSortKeys();      if (sortKeys != null && sortKeys.length > 0) {        result.set(SearchResults.SORT_KEYS,sortKeys);      }    }    return result;  } catch (  LdapException e) {    errorCode=e.getResult().getResultCode();    if (debug.warningEnabled()) {      debug.warning("Exception in DataLayer.search: ",e);    }    String msg=i18n.getString(IUMSConstants.SEARCH_FAILED);    if (ResultCode.TIME_LIMIT_EXCEEDED.equals(errorCode)) {      int timeLimit=searchControl != null ? searchControl.getTimeOut() : 0;      throw new TimeLimitExceededException(String.valueOf(timeLimit),e);    } else     if (ResultCode.SIZE_LIMIT_EXCEEDED.equals(errorCode)) {      int sizeLimit=searchControl != null ? searchControl.getMaxResults() : 0;      throw new SizeLimitExceededException(String.valueOf(sizeLimit),e);    } else     if (ResultCode.CLIENT_SIDE_PARAM_ERROR.equals(errorCode) || ResultCode.PROTOCOL_ERROR.equals(errorCode)) {      throw new InvalidSearchFilterException(searchFilter,e);    } else {      throw new UMSException(msg,e);    }  }}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(300);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("AttributeQuery").append(uri);  if (resource != null) {    xml.append(" Resource=\"").append(resource).append("\"");  }  xml.append(">\n").append(subject.toString(true,true));  Iterator iterator=attributeDesignators.iterator();  while (iterator.hasNext()) {    xml.append(((AttributeDesignator)iterator.next()).toString(true,true));  }  xml.append("</").append(prefix).append("AttributeQuery>\n");  return xml.toString();}  }
class C{  protected void paintDisabledText(JLabel l,Graphics g,String s,int textX,int textY){  int accChar=l.getDisplayedMnemonicIndex();  Color background=l.getBackground();  g.setColor(background.brighter());  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,accChar,textX + 1,textY + 1);  g.setColor(background.darker());  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,accChar,textX,textY);}  }
class C{  public BindResponseProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  public void addHeader(String name,String value){  if (this._getHttpServletResponse() != null) {    this._getHttpServletResponse().addHeader(name,value);  }  if (internalHeaders.containsKey(name)) {    List<String> existingSet=internalHeaders.get(name);    existingSet.add(value);    internalHeaders.put(name,existingSet);  } else {    List<String> vSet=new ArrayList<>();    vSet.add(value);    internalHeaders.put(name,vSet);  }}  }
class C{  public FieldDataInvalidException(String msg){  super(msg);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return _fooLocalService.createFoo(fooId);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  protected void PopStack(){  if (arg_count > 0) {    args[arg_count - 1]=null;    arg_count--;  }}  }
class C{  public void sendError(int sc,String msg) throws IOException {  if (this._getHttpServletResponse() != null) {    this._getHttpServletResponse().sendError(sc,msg);  }}  }
class C{  public FrameBodyUnsupported(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignedInfoElement createSignedInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignedInfoElementImpl();}  }
class C{  public int check(){  int result=0;  if (modified()) {    result=1;    lastState=result;  } else   if ((!exists()) && (!(lastState == -1))) {    result=-1;    lastState=result;  } else   if ((lastState == -1) && exists()) {    result=1;    lastState=result;  }  this.lastChecked=System.currentTimeMillis();  return result;}  }
class C{  public DTMAxisIterator cloneIterator(){  try {    final DTMAxisIteratorBase clone=(DTMAxisIteratorBase)super.clone();    clone._isRestartable=false;    return clone;  } catch (  CloneNotSupportedException e) {    throw new org.apache.xml.utils.WrappedRuntimeException(e);  }}  }
class C{  public final static HeaderElement[] parseElements(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseElements(buffer,cursor);}  }
class C{  @Override public void memberDisappeared(Member member){  table.dataModel.getValueAt(-1,-1);}  }
class C{  public PWResetQuestionViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  registerChildren();}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(port).toString();}  }
class C{  public boolean postSSOFederationSuccess(String hostedEntityID,HttpServletRequest request,HttpServletResponse response,Object ssoToken,FSAuthnRequest authnRequest,FSAuthnResponse authnResponse,FSResponse samlResponse) throws FederationException {  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSDefaultSPAdapter.postFedSuccess, " + "process " + hostedEntityID);  }  boolean isFederation=false;  if (authnRequest == null) {    FSUtils.debug.error("FSDefaultSPAdapter.postFedSuccess null");  } else {    String nameIDPolicy=authnRequest.getNameIDPolicy();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSDefaultSPAdapter.postSuccess " + nameIDPolicy);    }    if (nameIDPolicy.equals(IFSConstants.NAME_ID_POLICY_FEDERATED)) {      isFederation=true;    }  }  SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  if (isFederation && adminToken != null) {    try {      String nameId=null;      List assertions=null;      String idpEntityId=null;      if (authnResponse != null) {        assertions=authnResponse.getAssertion();        idpEntityId=authnResponse.getProviderId();      } else {        assertions=samlResponse.getAssertion();      }      FSAssertion assertion=(FSAssertion)assertions.iterator().next();      if (idpEntityId == null) {        idpEntityId=assertion.getIssuer();      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAdapter.postSuccess: idp=" + idpEntityId);      }      Iterator stmtIter=assertion.getStatement().iterator();      while (stmtIter.hasNext()) {        Statement statement=(Statement)stmtIter.next();        int stmtType=statement.getStatementType();        if (stmtType == Statement.AUTHENTICATION_STATEMENT) {          FSAuthenticationStatement authStatement=(FSAuthenticationStatement)statement;          FSSubject subject=(FSSubject)authStatement.getSubject();          NameIdentifier ni=subject.getIDPProvidedNameIdentifier();          if (ni == null) {            ni=subject.getNameIdentifier();          }          if (ni != null) {            nameId=ni.getName();          }          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAdapter.postSuccess: " + "found name id =" + nameId);          }          break;        }      }      if (nameId == null) {        FSUtils.debug.warning("FSAdapter.postSuc : null nameID");        return false;      }      Map map=new HashMap();      Set set=new HashSet();      set.add("|" + hostedEntityID + "|"+ nameId+ "|");      map.put("iplanet-am-user-federation-info-key",set);      AMIdentityRepository idRepo=new AMIdentityRepository(adminToken,((SSOToken)ssoToken).getProperty(ISAuthConstants.ORGANIZATION));      IdSearchControl searchControl=new IdSearchControl();      searchControl.setTimeOut(0);      searchControl.setMaxResults(0);      searchControl.setAllReturnAttributes(false);      searchControl.setSearchModifiers(IdSearchOpModifier.AND,map);      IdSearchResults searchResults=idRepo.searchIdentities(IdType.USER,"*",searchControl);      Set amIdSet=searchResults.getSearchResults();      if (amIdSet.size() > 1) {        String univId=((SSOToken)ssoToken).getProperty(Constants.UNIVERSAL_IDENTIFIER);        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAdapter.postSuccess: found " + amIdSet.size() + " federation with same ID as "+ univId);        }        String metaAlias=null;        try {          IDFFMetaManager metaManager=new IDFFMetaManager(ssoToken);          if (metaManager != null) {            SPDescriptorConfigElement spConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityID);            if (spConfig != null) {              metaAlias=spConfig.getMetaAlias();            }          }        } catch (        IDFFMetaException ie) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAdapter.postSuccess: " + "couldn't find meta alias:",ie);          }        }        FSAccountManager accManager=FSAccountManager.getInstance(metaAlias);        FSAccountFedInfoKey fedInfoKey=new FSAccountFedInfoKey(hostedEntityID,nameId);        Iterator it=amIdSet.iterator();        while (it.hasNext()) {          AMIdentity amId=(AMIdentity)it.next();          String tmpUnivId=IdUtils.getUniversalId(amId);          if (univId.equalsIgnoreCase(tmpUnivId)) {            continue;          }          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAdapter.postSucces, " + "remove fed info for user " + tmpUnivId);          }          accManager.removeAccountFedInfo(tmpUnivId,fedInfoKey,idpEntityId);        }      }    } catch (    FSAccountMgmtException f) {      FSUtils.debug.warning("FSDefaultSPAdapter.postSSOSuccess",f);    }catch (    IdRepoException i) {      FSUtils.debug.warning("FSDefaultSPAdapter.postSSOSuccess",i);    }catch (    SSOException e) {      FSUtils.debug.warning("FSDefaultSPAdapter.postSSOSuccess",e);    }  }  return false;}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return m_str.equalsIgnoreCase(anotherString);}  }
class C{  public void testInflatingFilesRequiringZipRefill() throws IOException {  int originalSize=1024 * 1024;  byte[] readBuffer=new byte[8192];  ZipFile zipFile=new ZipFile(createZipFile(1,originalSize));  for (Enumeration<? extends ZipEntry> e=zipFile.entries(); e.hasMoreElements(); ) {    ZipEntry zipEntry=e.nextElement();    assertTrue("This test needs >64 KiB of compressed data to exercise Inflater",zipEntry.getCompressedSize() > (64 * 1024));    InputStream is=zipFile.getInputStream(zipEntry);    while (is.read(readBuffer,0,readBuffer.length) != -1) {    }    is.close();  }  zipFile.close();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  List attributeNames=rc.getOption(IArgument.ATTRIBUTE_NAMES);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_GET_ATTRIBUTES",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    Set attrSchemas=getAttributeSchemas(type,adminSSOToken);    Map rawValues=null;    if ((attributeNames != null) && !attributeNames.isEmpty()) {      Set attrNames=new HashSet();      attrNames.addAll(attributeNames);      rawValues=amid.getAttributes(attrNames);    } else {      rawValues=amid.getAttributes();    }    Object[] args={idName};    if ((rawValues != null) && !rawValues.isEmpty()) {      String msg=getResourceString("idrepo-attribute-result");      String[] arg={"",""};      for (Iterator i=rawValues.keySet().iterator(); i.hasNext(); ) {        String attrName=(String)i.next();        Set attrValues=(Set)rawValues.get(attrName);        arg[0]=attrName;        arg[1]=isPassword(attrSchemas,attrName) ? "********" : tokenize(attrValues);        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-no-attributes"),args));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_GET_ATTRIBUTES",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_ATTRIBUTES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_ATTRIBUTES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_ATTRIBUTES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public void close() throws IOException {  throw exception;}  }
class C{  @Inject public EntitlementsExceptionMappingHandler(@Named(RESOURCE_ERROR_MAPPING) Map<Integer,Integer> errorCodeMapping,@Named(REQUEST_TYPE_ERROR_OVERRIDES) Map<RequestType,Map<Integer,Integer>> errorCodeOverrides,@Named(DEBUG_TYPE_OVERRIDES) Map<Integer,Integer> errorDebugMap){  Reject.ifNull(errorCodeMapping);  Reject.ifNull(errorCodeOverrides);  Reject.ifNull(errorDebugMap);  this.errorDebugMap=new HashMap<Integer,Integer>(errorDebugMap);  this.errorCodeMapping=new HashMap<Integer,Integer>(errorCodeMapping);  this.errorCodeOverrides=new EnumMap<RequestType,Map<Integer,Integer>>(RequestType.class);  this.errorCodeOverrides.putAll(errorCodeOverrides);}  }
class C{  public void addCompleteIndex(String index){  Reject.ifNull(index);  completeList.add(index);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.DigestMethodType createDigestMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestMethodTypeImpl();}  }
class C{  public void resetConnectionArguments(){  secureArgsList.getHostNameArg().clearValues();  secureArgsList.getHostNameArg().setPresent(false);  secureArgsList.getPortArg().clearValues();  secureArgsList.getPortArg().setPresent(false);  secureArgsList.getPortArg().addValue(secureArgsList.getPortArg().getDefaultValue());  secureArgsList.getBindDnArg().clearValues();  secureArgsList.getBindDnArg().setPresent(false);  secureArgsList.getBindPasswordArg().clearValues();  secureArgsList.getBindPasswordArg().setPresent(false);  secureArgsList.getBindPasswordFileArg().clearValues();  secureArgsList.getBindPasswordFileArg().getNameToValueMap().clear();  secureArgsList.getBindPasswordFileArg().setPresent(false);  state.bindPassword=null;  secureArgsList.getAdminUidArg().clearValues();  secureArgsList.getAdminUidArg().setPresent(false);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    return;  }  changeSupport.removePropertyChangeListener(listener);}  }
class C{  @Override public int read(byte[] bts) throws IOException {  try {    beforeRead(bts != null ? bts.length : 0);    int n=in.read(bts);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public static void registerFont(String path){  registerFont(path,null);}  }
class C{  private ConditionResult processExtensibleMatch(SearchFilter completeFilter,Entry entry) throws DirectoryException {  if (assertionValue == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_EXTENSIBLE_MATCH_NO_ASSERTION_VALUE.get(entry.getName(),completeFilter);    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  MatchingRule matchingRule=null;  if (matchingRuleID != null) {    try {      matchingRule=DirectoryServer.getSchema().getMatchingRule(matchingRuleID);    } catch (    UnknownSchemaElementException e) {      logger.trace("Unknown matching rule %s defined in extensibleMatch " + "component of filter %s -- returning undefined.",matchingRuleID,this);      return ConditionResult.UNDEFINED;    }  } else {    if (getAttributeType() == null) {      LocalizableMessage message=ERR_SEARCH_FILTER_EXTENSIBLE_MATCH_NO_RULE_OR_TYPE.get(entry.getName(),completeFilter);      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);    } else {      matchingRule=getAttributeType().getEqualityMatchingRule();      if (matchingRule == null) {        if (logger.isTraceEnabled()) {          logger.trace("Attribute type %s does not have an equality matching " + "rule -- returning undefined.",getAttributeType().getNameOrOID());        }        return ConditionResult.UNDEFINED;      }    }  }  if (getAttributeType() != null) {    try {      MatchingRuleUse mru=DirectoryServer.getSchema().getMatchingRuleUse(matchingRule);      if (!mru.hasAttribute(getAttributeType())) {        logger.trace("Attribute type %s is not allowed for use with " + "matching rule %s because of matching rule use definition %s",getAttributeType().getNameOrOID(),matchingRule.getNameOrOID(),mru.getNameOrOID());        return ConditionResult.UNDEFINED;      }    } catch (    UnknownSchemaElementException ignored) {    }  }  Assertion assertion;  try {    assertion=matchingRule.getAssertion(assertionValue);  } catch (  Exception e) {    logger.traceException(e);    return ConditionResult.UNDEFINED;  }  ConditionResult result=ConditionResult.FALSE;  if (getAttributeType() == null) {    final Iterable<Attribute> attrs=entry.getAllAttributes();    result=assertionMatchesAnyAttribute(matchingRule,assertion,attrs,result,entry,completeFilter);    if (ConditionResult.TRUE.equals(result)) {      return ConditionResult.TRUE;    }    Attribute a=entry.getObjectClassAttribute();    for (    ByteString v : a) {      try {        ByteString nv=matchingRule.normalizeAttributeValue(v);        ConditionResult r=assertion.matches(nv);switch (r) {case TRUE:          return ConditionResult.TRUE;case FALSE:        break;case UNDEFINED:      result=ConditionResult.UNDEFINED;    break;default :  LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_RESULT_TYPE.get(entry.getName(),completeFilter,r);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}} catch (Exception e) {logger.traceException(e);result=ConditionResult.UNDEFINED;}}} else {final Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);result=assertionMatchesAnyAttribute(matchingRule,assertion,attrs,result,entry,completeFilter);if (ConditionResult.TRUE.equals(result)) {return ConditionResult.TRUE;}}if (dnAttributes) {for (RDN rdn : entry.getName()) {for (AVA ava : rdn) {try {if (getAttributeType() == null || getAttributeType().equals(ava.getAttributeType())) {ByteString v=ava.getAttributeValue();ByteString nv=matchingRule.normalizeAttributeValue(v);ConditionResult r=assertion.matches(nv);switch (r) {case TRUE:  return ConditionResult.TRUE;case FALSE:break;case UNDEFINED:result=ConditionResult.UNDEFINED;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_RESULT_TYPE.get(entry.getName(),completeFilter,r);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}}} catch (Exception e) {logger.traceException(e);result=ConditionResult.UNDEFINED;}}}}return result;}  }
class C{  private void removeIdRepo(String orgName,String name,boolean reinitialize) throws IdRepoException, SSOException {  orgName=DNUtils.normalizeDN(orgName);synchronized (idrepoPlugins) {    clearReadOnlyPlugins(orgName);    Map idrepos=(Map)idrepoPlugins.get(orgName);    if (idrepos != null && !idrepos.isEmpty()) {      for (Iterator items=idrepos.keySet().iterator(); items.hasNext(); ) {        String iname=items.next().toString();        if (iname.equalsIgnoreCase(name)) {          IdRepo repo=(IdRepo)idrepos.get(iname);          if (debug.messageEnabled()) {            debug.message("IdRepoPluginsCache.removeIdRepo" + " for OrgName: " + orgName + " Repo Name: "+ name);          }          idrepos.remove(iname);          ShutdownIdRepoPlugin shutdownrepo=new ShutdownIdRepoPlugin(repo);          SMSThreadPool.scheduleTask(shutdownrepo);          break;        }      }      if (reinitialize) {        addIdRepo(orgName,name);      }    }  }}  }
class C{  public ImmutableList<A> append(final A x){  return of(x).prependList(this);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  submitCycle=true;  String svrMinPool=(String)getDisplayFieldValue(TF_SERVER_MIN_POOL);  String svrMaxPool=(String)getDisplayFieldValue(TF_SERVER_MAX_POOL);  String bindDN=(String)getDisplayFieldValue(TF_SERVER_BIND_DN);  String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);  ServerSiteModel model=(ServerSiteModel)getModel();  try {    ServerConfigXML xmlObj=model.getServerConfigObject(serverName);    ServerConfigXML.ServerGroup smsServerGroup=xmlObj.getSMSServerGroup();    if (bAMSDKEnabled) {      String userMinPool=(String)getDisplayFieldValue(TF_USER_MIN_POOL);      String userMaxPool=(String)getDisplayFieldValue(TF_USER_MAX_POOL);      ServerConfigXML.ServerGroup defaultServerGroup=xmlObj.getDefaultServerGroup();      defaultServerGroup.minPool=Integer.parseInt(userMinPool);      defaultServerGroup.maxPool=Integer.parseInt(userMaxPool);      defaultServerGroup.dsBaseDN=((String)getDisplayFieldValue(TF_USER_ROOTSUFFIX)).trim();      for (Iterator i=defaultServerGroup.dsUsers.iterator(); i.hasNext(); ) {        DirUserObject o=(DirUserObject)i.next();        if (o.type.equals("proxy")) {          o.dn="cn=puser,ou=DSAME Users," + defaultServerGroup.dsBaseDN;          String pwd=(String)getDisplayFieldValue(TF_USER_PROXY_PWD);          if (!pwd.equals(AMPropertySheetModel.passwordRandom)) {            o.password=Crypt.encode(pwd);          }        } else         if (o.type.equals("admin")) {          o.dn="cn=dsameuser,ou=DSAME Users," + defaultServerGroup.dsBaseDN;          String pwd=(String)getDisplayFieldValue(TF_USER_ADMIN_PWD);          if (!pwd.equals(AMPropertySheetModel.passwordRandom)) {            o.password=Crypt.encode(pwd);          }        }      }    }    smsServerGroup.minPool=Integer.parseInt(svrMinPool);    smsServerGroup.maxPool=Integer.parseInt(svrMaxPool);    List userGroup=smsServerGroup.dsUsers;    ServerConfigXML.DirUserObject bind=(ServerConfigXML.DirUserObject)userGroup.iterator().next();    bind.dn=bindDN;    String bindPwd=(String)getDisplayFieldValue(TF_SERVER_BIND_PWD);    if (!bindPwd.equals(AMPropertySheetModel.passwordRandom)) {      bind.password=Crypt.encode(bindPwd);    }    model.setServerConfigXML(serverName,xmlObj.toXML());    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",model.getLocalizedString("serverconfig.updated"));  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }catch (  NumberFormatException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("exception.thread.pool.no.integer"));  }  forwardTo();}  }
class C{  private static <T>void siftDownComparable(int k,T x,Object[] array,int n){  if (n > 0) {    Comparable<? super T> key=(Comparable<? super T>)x;    int half=n >>> 1;    while (k < half) {      int child=(k << 1) + 1;      Object c=array[child];      int right=child + 1;      if (right < n && ((Comparable<? super T>)c).compareTo((T)array[right]) > 0)       c=array[child=right];      if (key.compareTo((T)c) <= 0)       break;      array[k]=c;      k=child;    }    array[k]=key;  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  public JKEmptyReportException(String arg0,Throwable arg1,boolean arg2,boolean arg3){  super(arg0,arg1,arg2,arg3);}  }
class C{  public void applyDismissing(Animator animator,float currValue,float endValue,float velocity,float maxDistance){  AnimatorProperties properties=getDismissingProperties(currValue,endValue,velocity,maxDistance);  animator.setDuration(properties.duration);  animator.setInterpolator(properties.interpolator);}  }
class C{  public MARSHAL(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  static public void assertEquals(String message,double expected,double actual,double delta){  if (Double.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Double(expected),new Double(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Double(expected),new Double(actual));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild2.class,args);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {}  }
class C{  static String readOIDLen(final SubstringReader reader,final boolean allowCompatChars) throws DecodeException {  int length=1;  boolean enclosingQuote=false;  reader.skipWhitespaces();  reader.mark();  try {    char c=reader.read();    if (c == '\'') {      enclosingQuote=true;      reader.mark();      c=reader.read();    }    if (isDigit(c)) {      boolean lastWasPeriod=false;      while ((c=reader.read()) != ' ' && c != '{' && (c != '\'' || !enclosingQuote)) {        if (c == '.') {          if (lastWasPeriod) {            throw DecodeException.error(ERR_ATTR_SYNTAX_OID_CONSECUTIVE_PERIODS1.get(reader.pos() - 1));          }          lastWasPeriod=true;        } else         if (!isDigit(c)) {          if (c == ')') {            break;          }          throw DecodeException.error(ERR_ATTR_SYNTAX_OID_ILLEGAL_CHARACTER1.get(c,reader.pos() - 1));        } else {          lastWasPeriod=false;        }        length++;      }      if (length == 0) {        throw DecodeException.error(ERR_ATTR_SYNTAX_OID_NO_VALUE1.get(reader.pos() - 1));      }    } else     if (isAlpha(c)) {      while ((c=reader.read()) != ' ' && c != ')' && c != '{' && (c != '\'' || !enclosingQuote)) {        if (length == 0 && !isAlpha(c)) {          throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));        }        if (!isKeyChar(c,allowCompatChars)) {          throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));        }        length++;      }    } else {      throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));    }    reader.reset();    final String oid=reader.read(length);    reader.mark();    c=reader.read();    if (c == '{') {      reader.mark();      while ((c=reader.read()) != '}') {        if (!isDigit(c)) {          throw DecodeException.error(ERR_ATTR_SYNTAX_OID_ILLEGAL_CHARACTER1.get(reader.getString(),reader.pos() - 1));        }      }    } else     if (c == '\'') {      reader.mark();    } else {      reader.reset();    }    return oid;  } catch (  final StringIndexOutOfBoundsException e) {    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public GetEffectiveRightsRequestControl(DN authzDN,List<AttributeType> attrs){  this(true,authzDN,attrs);}  }
class C{  public void fireTableRowsInserted(int firstRow,int lastRow){  fireTableChanged(new TableModelEvent(this,firstRow,lastRow,TableModelEvent.ALL_COLUMNS,TableModelEvent.INSERT));}  }
class C{  public InvalidTagException(String msg){  super(msg);}  }
class C{  public boolean isObsolete(){  return isObsolete;}  }
class C{  public boolean verifyWSSSignature(org.w3c.dom.Document document,java.security.Key key) throws XMLSignatureException {  return false;}  }
class C{  private static void vecswap(double x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  public Observable<Long> cardObservable(JobState state){  io.vertx.rx.java.ObservableFuture<Long> handler=io.vertx.rx.java.RxHelper.observableFuture();  card(state,handler.toHandler());  return handler;}  }
class C{  private void readStats(){  stats=new Label();  stats.setVisible(false);  stats.setId("statsLabel");  try {    File file=new File("stats.dat");    if (!file.exists()) {      FileWriter fw=new FileWriter(file.getAbsoluteFile());      BufferedWriter bw=new BufferedWriter(fw);      bw.write("0:0:0");      bw.close();      fw.close();    }    FileReader fr=new FileReader(file.getAbsoluteFile());    BufferedReader br=new BufferedReader(fr);    String[] statsArrayStr=br.readLine().split(":");    br.close();    fr.close();    int[] statsArray=new int[3];    for (int i=0; i < 3; i++) {      statsArray[i]=Integer.parseInt(statsArrayStr[i]);    }    stats.setText("Stats:\n\nHigh Scores: " + statsArray[0] + "\nTotal Coins Collected: "+ statsArray[1]+ "\nTotal Enemies Killed: "+ statsArray[2]);  } catch (  Exception e) {    stats.setText("Stats:\n\nHigh Scores: 0\nTotal Coins Collected: 0\nTotal Enemies Killed: 0");    try {      FileWriter fw=new FileWriter(new File("stats.dat").getAbsoluteFile());      BufferedWriter bw=new BufferedWriter(fw);      bw.write("0:0:0");      bw.close();      fw.close();    } catch (    Exception e1) {      System.out.println("Cannot create file. Make sure you have access rights.");    }  }  try {    File file=new File("size_config.dat");    if (!file.exists()) {      FileWriter fw=new FileWriter(file.getAbsoluteFile());      BufferedWriter bw=new BufferedWriter(fw);      bw.write("1000:600");      bw.close();      fw.close();    }    FileReader fr=new FileReader(file.getAbsoluteFile());    BufferedReader br=new BufferedReader(fr);    String[] statsArray=br.readLine().split(":");    br.close();    fr.close();    int[] sizes=new int[2];    sizes[0]=Integer.parseInt(statsArray[0]);    sizes[1]=Integer.parseInt(statsArray[1]);    if (sizes[0] > 1920 || sizes[1] < 600) {      sizes[0]=1000;    }    if (sizes[1] > 1080 || sizes[1] < 300) {      sizes[1]=600;    }    WIDTH=sizes[0];    HEIGHT=sizes[1];  } catch (  Exception e) {    WIDTH=1000;    HEIGHT=600;    try {      FileWriter fw=new FileWriter(new File("size_config.dat").getAbsoluteFile());      BufferedWriter bw=new BufferedWriter(fw);      bw.write("1000:600");      bw.close();      fw.close();    } catch (    IOException ex) {      System.out.println("Cannot create file. Make sure you have access rights.");    }  }  REL_HEIGHT=(float)(HEIGHT / 224.0);  STAGEWIDTH=((int)(3392.0 * REL_HEIGHT)) - WIDTH;  ASPECT_LENGTH=(float)(16.0 * REL_HEIGHT);}  }
class C{  BufferedWriter newWriter(File file) throws IOException {  return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),Charset.forName("UTF-8")));}  }
class C{  private static int totalSeconds(int hours,int minutes,int seconds){  return hours * SECONDS_PER_HOUR + minutes * SECONDS_PER_MINUTE + seconds;}  }
class C{  public static <T>T[] append(T[] array,int currentSize,T element){  assert currentSize <= array.length;  if (currentSize + 1 > array.length) {    @SuppressWarnings("unchecked") T[] newArray=ArrayUtils.newUnpaddedArray((Class<T>)array.getClass().getComponentType(),growSize(currentSize));    System.arraycopy(array,0,newArray,0,currentSize);    array=newArray;  }  array[currentSize]=element;  return array;}  }
class C{  public void insert_trace(Polyline p_polyline,int p_layer,int p_half_width,NetNosList p_net_no_arr,int p_clearance_class,ItemFixState p_fixed_state){  BrdTracep new_trace=insert_trace_without_cleaning(p_polyline,p_layer,p_half_width,p_net_no_arr,p_clearance_class,p_fixed_state);  if (new_trace == null)   return;  new_trace.normalize(changed_area.get_area(p_layer));}  }
class C{  public static void scrollTo(TextView widget,Layout layout,int x,int y){  final int horizontalPadding=widget.getTotalPaddingLeft() + widget.getTotalPaddingRight();  final int availableWidth=widget.getWidth() - horizontalPadding;  final int top=layout.getLineForVertical(y);  Layout.Alignment a=layout.getParagraphAlignment(top);  boolean ltr=layout.getParagraphDirection(top) > 0;  int left, right;  if (widget.getHorizontallyScrolling()) {    final int verticalPadding=widget.getTotalPaddingTop() + widget.getTotalPaddingBottom();    final int bottom=layout.getLineForVertical(y + widget.getHeight() - verticalPadding);    left=Integer.MAX_VALUE;    right=0;    for (int i=top; i <= bottom; i++) {      left=(int)Math.min(left,layout.getLineLeft(i));      right=(int)Math.max(right,layout.getLineRight(i));    }  } else {    left=0;    right=availableWidth;  }  final int actualWidth=right - left;  if (actualWidth < availableWidth) {    if (a == Layout.Alignment.ALIGN_CENTER) {      x=left - ((availableWidth - actualWidth) / 2);    } else     if ((ltr && (a == Layout.Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Layout.Alignment.ALIGN_NORMAL)) || (a == Layout.Alignment.ALIGN_RIGHT)) {      x=left - (availableWidth - actualWidth);    } else {      x=left;    }  } else {    x=Math.min(x,right - availableWidth);    x=Math.max(x,left);  }  widget.scrollTo(x,y);}  }
class C{  public BeanDescriptor(Class<?> beanClass,Class<?> customizerClass){  this.beanClassRef=getWeakReference(beanClass);  this.customizerClassRef=getWeakReference(customizerClass);  String name=beanClass.getName();  while (name.indexOf('.') >= 0) {    name=name.substring(name.indexOf('.') + 1);  }  setName(name);}  }
class C{  @Inject SessionChangeAuthorizer(@Named(SessionConstants.SESSION_DEBUG) final Debug debug,final SSOTokenManager ssoTokenManager){  this.debug=debug;  this.ssoTokenManager=ssoTokenManager;}  }
class C{  public void readContent() throws IOException {  if (offset + length > buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    offset+=length;  } else {    int bytesRead=in.read(buffer,offset,length);    if (bytesRead != length) {      int c=bytesRead;      do {        if (c < 1 || bytesRead > length) {          throw new ASN1Exception("Failed to read encoded content");        }        c=in.read(buffer,offset + bytesRead,length - bytesRead);        bytesRead+=c;      } while (bytesRead != length);    }    offset+=length;  }}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec12(){  KeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(ks instanceof RSAPrivateKeySpec);}  }
class C{  public MemoryBackend load(final EntryReader reader,final boolean overwrite) throws IOException {synchronized (writeLock) {    if (reader != null) {      try {        while (reader.hasNext()) {          final Entry entry=reader.readEntry();          final DN dn=entry.getName();          if (!overwrite && entries.containsKey(dn)) {            throw newLdapException(ResultCode.ENTRY_ALREADY_EXISTS,"Attempted to add the entry '" + dn + "' multiple times");          }          entries.put(dn,entry);        }      }  finally {        reader.close();      }    }  }  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.RequesterAuthorizationElement createRequesterAuthorizationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.RequesterAuthorizationElementImpl();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  int len=(length + 2) / 3 * 4;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public CompareOperation processCompare(String rawEntryDN,String attributeType,String assertionValue){  return processCompare(ByteString.valueOfUtf8(rawEntryDN),attributeType,ByteString.valueOfUtf8(assertionValue),null);}  }
class C{  public void test_getInstanceLjava_lang_String01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i]);    assertNotNull("No KeyManagerFactory created",keyMF);    assertEquals("Invalid algorithm",keyMF.getAlgorithm(),validValues[i]);  }}  }
class C{  public static String join(CharSequence delimiter,Object[] tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  CloseWindowViewBean vb=(CloseWindowViewBean)getViewBean(CloseWindowViewBean.class);  vb.forwardTo(getRequestContext());}  }
class C{  @Override public void run(){  try {    templateFile.generateLDIF(inputStream);  } catch (  MakeLDIFException mle) {    inputStream.setIOException(new IOException(mle.getMessage()));    inputStream.closeEntryWriter();  }catch (  IOException ioe) {    inputStream.setIOException(ioe);    inputStream.closeEntryWriter();  }}  }
class C{  public static int mainCLI(String[] args,OutputStream outStream,OutputStream errStream,TempLogFile tempLogFile){  final PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  System.setProperty(Constants.CLI_JAVA_PROPERTY,"true");  final PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  final InstallDS install=new InstallDS(out,err,tempLogFile);  return install.execute(args);}  }
class C{  @DataProvider(name="namedValueIdentifierValues") public Object[][] createNamedValueIdentifierValues(){  return new Object[][]{{"serialNumber ",true},{"issuer ",true},{"Serialnumber ",false},{"0serialnumber ",false},{"serial Number ",false},{"missingSpace",false}};}  }
class C{  public static AMIdentity createATestUser(SSOToken adminToken,String username,String realm) throws IdRepoException, SSOException {  AMIdentityRepository amir=new AMIdentityRepository(adminToken,realm);  Map<String,Set<String>> attrValues=new HashMap<String,Set<String>>();  Set<String> set=new HashSet<String>();  set.add(username);  attrValues.put("givenname",set);  attrValues.put("sn",set);  attrValues.put("cn",set);  attrValues.put("userpassword",set);  return amir.createIdentity(IdType.USER,username,attrValues);}  }
class C{  public JAASCallbackHandler(JAASRealm realm,String username,String password,String nonce,String nc,String cnonce,String qop,String realmName,String md5a2,String authMethod){  this.realm=realm;  this.username=username;  if (realm.hasMessageDigest()) {    this.password=realm.getCredentialHandler().mutate(password);  } else {    this.password=password;  }  this.nonce=nonce;  this.nc=nc;  this.cnonce=cnonce;  this.qop=qop;  this.realmName=realmName;  this.md5a2=md5a2;  this.authMethod=authMethod;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int capacity=s.readInt();  if (capacity < 0) {    throw new InvalidObjectException("Illegal capacity: " + capacity);  }  float loadFactor=s.readFloat();  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new InvalidObjectException("Illegal load factor: " + loadFactor);  }  int size=s.readInt();  if (size < 0) {    throw new InvalidObjectException("Illegal size: " + size);  }  capacity=(int)Math.min(size * Math.min(1 / loadFactor,4.0f),HashMap.MAXIMUM_CAPACITY);  map=(((HashSet<?>)this) instanceof LinkedHashSet ? new LinkedHashMap<E,Object>(capacity,loadFactor) : new HashMap<E,Object>(capacity,loadFactor));  for (int i=0; i < size; i++) {    @SuppressWarnings("unchecked") E e=(E)s.readObject();    map.put(e,PRESENT);  }}  }
class C{  public static long counter32Value(long v){  if (v > (pow(2,32) - 1)) {    return (v % pow(2,32));  } else {    return v;  }}  }
class C{  @Override public void destroy(){  restletXACMLHttpServlet.destroy();  restletXACMLServiceServlet.destroy();  restletOAuth2ServiceServlet.destroy();  restletUMAServiceServlet.destroy();}  }
class C{  private PlaLineInt[] calc_division_lines(int p_inner_corner_no,ShapeTileSimplex p_outer_simplex){  PlaLineInt curr_inner_line=tline_get(p_inner_corner_no);  PlaLineInt prev_inner_line=tline_get(get_prev_index(p_inner_corner_no));  PlaPointFloat intersection=curr_inner_line.intersection_approx(prev_inner_line);  if (intersection.is_NaN()) {    System.out.println("Simplex.calc_division_lines: intersection expexted");    return null;  }  PlaPointInt inner_corner=intersection.round();  double c_tolerance=0.0001;  boolean is_exact=Math.abs(inner_corner.v_x - intersection.v_x) < c_tolerance && Math.abs(inner_corner.v_y - intersection.v_y) < c_tolerance;  if (!is_exact) {    PlaLineInt[] result=new PlaLineInt[1];    result[0]=prev_inner_line;    return result;  }  PlaDirection first_projection_dir=PlaDirection.NULL;  PlaDirection second_projection_dir=PlaDirection.NULL;  PlaDirection prev_inner_dir=prev_inner_line.direction().opposite();  PlaDirection next_inner_dir=curr_inner_line.direction();  int outer_line_no=0;  double min_distance=Integer.MAX_VALUE;  for (int ind=0; ind < p_outer_simplex.lines_size(); ++ind) {    PlaLineInt outer_line=p_outer_simplex.tline_get(outer_line_no);    PlaDirection curr_projection_dir=inner_corner.perpendicular_direction(outer_line);    if (curr_projection_dir == PlaDirection.NULL) {      PlaLineInt[] result=new PlaLineInt[1];      result[0]=new PlaLineInt(inner_corner,inner_corner);      return result;    }    boolean projection_visible=prev_inner_dir.determinant(curr_projection_dir) >= 0;    if (projection_visible) {      double curr_distance=Math.abs(outer_line.distance_signed(inner_corner.to_float()));      boolean second_division_necessary=curr_projection_dir.determinant(next_inner_dir) < 0;      PlaDirection curr_second_projection_dir=curr_projection_dir;      if (second_division_necessary) {        boolean second_projection_visible=false;        int tmp_outer_line_no=outer_line_no;        while (!second_projection_visible) {          if (tmp_outer_line_no == p_outer_simplex.lines_size() - 1) {            tmp_outer_line_no=0;          } else {            ++tmp_outer_line_no;          }          curr_second_projection_dir=inner_corner.perpendicular_direction(p_outer_simplex.tline_get(tmp_outer_line_no));          if (curr_second_projection_dir == PlaDirection.NULL) {            PlaLineInt[] result=new PlaLineInt[1];            result[0]=new PlaLineInt(inner_corner,inner_corner);            return result;          }          if (curr_projection_dir.determinant(curr_second_projection_dir) < 0) {            curr_distance=Integer.MAX_VALUE;            break;          }          second_projection_visible=curr_second_projection_dir.determinant(next_inner_dir) >= 0;        }        curr_distance+=Math.abs(p_outer_simplex.tline_get(tmp_outer_line_no).distance_signed(inner_corner.to_float()));      }      if (curr_distance < min_distance) {        min_distance=curr_distance;        first_projection_dir=curr_projection_dir;        second_projection_dir=curr_second_projection_dir;      }    }    if (outer_line_no == p_outer_simplex.lines_size() - 1) {      outer_line_no=0;    } else {      ++outer_line_no;    }  }  if (min_distance == Integer.MAX_VALUE) {    System.out.println("Simplex.calc_division_lines: division not found");    return null;  }  PlaLineInt[] result;  if (first_projection_dir.equals(second_projection_dir)) {    result=new PlaLineInt[1];    result[0]=new PlaLineInt(inner_corner,first_projection_dir);  } else {    result=new PlaLineInt[2];    result[0]=new PlaLineInt(inner_corner,first_projection_dir);    result[1]=new PlaLineInt(inner_corner,second_projection_dir);  }  return result;}  }
class C{  public ComparisonFailure(String message,String expected,String actual){  super(message);  fExpected=expected;  fActual=actual;}  }
class C{  private static int search(int value,int[] array,int start,int length){  int power=1 << getHighBit(length);  int extra=length - power;  int probe=power;  int index=start;  if (value >= array[index + extra]) {    index+=extra;  }  while (probe > 1) {    probe>>=1;    if (value >= array[index + probe]) {      index+=probe;    }  }  return index;}  }
class C{  public int compare(Object obj1,Object obj2){  DataFlavor flavor1=(DataFlavor)obj1;  DataFlavor flavor2=(DataFlavor)obj2;  if (flavor1.isFlavorTextType()) {    if (flavor2.isFlavorTextType()) {      return super.compare(obj1,obj2);    } else {      return 1;    }  } else   if (flavor2.isFlavorTextType()) {    return -1;  } else {    return 0;  }}  }
class C{  public long insert(String eventName,Long appID){  if (eventName == null || appID == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_EVENTNAME,eventName);  initialValues.put(KEY_APPID,appID);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  private void waitWebViewLoad(String containsUrl) throws Exception {  onWebView().withNoTimeout().check(webMatches(getCurrentUrl(),containsString(containsUrl)));}  }
class C{  public void repaint(){}  }
class C{  static MethodHandle varargsArray(Class<?> arrayType,int nargs){  Class<?> elemType=arrayType.getComponentType();  if (elemType == null)   throw new IllegalArgumentException("not an array: " + arrayType);  if (nargs >= MAX_JVM_ARITY / 2 - 1) {    int slots=nargs;    final int MAX_ARRAY_SLOTS=MAX_JVM_ARITY - 1;    if (slots <= MAX_ARRAY_SLOTS && elemType.isPrimitive())     slots*=Wrapper.forPrimitiveType(elemType).stackSlots();    if (slots > MAX_ARRAY_SLOTS)     throw new IllegalArgumentException("too many arguments: " + arrayType.getSimpleName() + ", length "+ nargs);  }  if (elemType == Object.class)   return varargsArray(nargs);  MethodHandle cache[]=TYPED_COLLECTORS.get(elemType);  MethodHandle mh=nargs < cache.length ? cache[nargs] : null;  if (mh != null)   return mh;  if (nargs == 0) {    Object example=java.lang.reflect.Array.newInstance(arrayType.getComponentType(),0);    mh=MethodHandles.constant(arrayType,example);  } else   if (elemType.isPrimitive()) {    MethodHandle builder=Lazy.MH_fillNewArray;    MethodHandle producer=buildArrayProducer(arrayType);    mh=buildVarargsArray(builder,producer,nargs);  } else {  }  mh=mh.asType(MethodType.methodType(arrayType,Collections.<Class<?>>nCopies(nargs,elemType)));  mh=makeIntrinsic(mh,Intrinsic.NEW_ARRAY);  assert (assertCorrectArity(mh,nargs));  if (nargs < cache.length)   cache[nargs]=mh;  return mh;}  }
class C{  public String toString(){  return ("AnonymousAuthPrincipal:  " + name);}  }
class C{  public void test_getIterator(){  String test="Test string";  try {    AttributedString attrString=new AttributedString(test);    AttributedCharacterIterator it=attrString.getIterator();    assertEquals("Incorrect iteration on AttributedString",it.first(),test.charAt(0));  } catch (  Exception e) {    fail("Unexpected exceptiption " + e.toString());  }}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyProvider01(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          PKCS8EncodedKeySpec eks=epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l]);          if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {            fail(algName[i][0] + " != " + algName[i][1]);          }        } catch (        InvalidKeyException e) {          fail(algName[i][0] + ", " + algName[i][1]+ ": "+ e);        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public void clear(){  bufSize=0;}  }
class C{  private void normalize(CharChunk cc){  int truncate=cc.indexOf('?');  if (truncate == -1) {    truncate=cc.indexOf('#');  }  char[] truncateCC=null;  if (truncate > -1) {    truncateCC=Arrays.copyOfRange(cc.getBuffer(),cc.getStart() + truncate,cc.getEnd());    cc.setEnd(cc.getStart() + truncate);  }  if (cc.endsWith("/.") || cc.endsWith("/..")) {    try {      cc.append('/');    } catch (    IOException e) {      throw new IllegalArgumentException(cc.toString(),e);    }  }  char[] c=cc.getChars();  int start=cc.getStart();  int end=cc.getEnd();  int index=0;  int startIndex=0;  for (int i=0; i < 3; i++) {    startIndex=cc.indexOf('/',startIndex + 1);  }  index=startIndex;  while (true) {    index=cc.indexOf("/./",0,3,index);    if (index < 0) {      break;    }    copyChars(c,start + index,start + index + 2,end - start - index- 2);    end=end - 2;    cc.setEnd(end);  }  index=startIndex;  int pos;  while (true) {    index=cc.indexOf("/../",0,4,index);    if (index < 0) {      break;    }    if (index == startIndex) {      throw new IllegalArgumentException();    }    int index2=-1;    for (pos=start + index - 1; (pos >= 0) && (index2 < 0); pos--) {      if (c[pos] == (byte)'/') {        index2=pos;      }    }    copyChars(c,start + index2,start + index + 3,end - start - index- 3);    end=end + index2 - index - 3;    cc.setEnd(end);    index=index2;  }  if (truncateCC != null) {    try {      cc.append(truncateCC,0,truncateCC.length);    } catch (    IOException ioe) {      throw new IllegalArgumentException(ioe);    }  }}  }
class C{  @Override public void remove(String id) throws IOException {synchronized (this) {    int numberOfTries=2;    while (numberOfTries > 0) {      Connection _conn=getConnection();      if (_conn == null) {        return;      }      try {        remove(id,_conn);        numberOfTries=0;      } catch (      SQLException e) {        manager.getContext().getLogger().error(sm.getString(getStoreName() + ".SQLException",e));        if (dbConnection != null)         close(dbConnection);      } finally {        release(_conn);      }      numberOfTries--;    }  }  if (manager.getContext().getLogger().isDebugEnabled()) {    manager.getContext().getLogger().debug(sm.getString(getStoreName() + ".removing",id,sessionTable));  }}  }
class C{  public static URI resolve(final URI baseURI,final String reference){  return URIUtils.resolve(baseURI,URI.create(reference));}  }
class C{  public void reloadConfig(){  downloadConfig(this.configUrl);}  }
class C{  boolean useVolatileDoubleBuffer(){  return volatileImageBufferEnabled;}  }
class C{  public void addCallMethod(String pattern,String methodName,int paramCount){  addRule(pattern,new CallMethodRule(methodName,paramCount));}  }
class C{  private static boolean portMatch(int port,int[] ports){  boolean portInList=false;  for (int i=0, len=ports.length; i < len; i++) {    if (port == ports[i]) {      portInList=true;      break;    }  }  return portInList;}  }
class C{  private void handleConnectionProperties(URLConnection conn){  if (pageProperties == null) {    pageProperties=new Hashtable<String,Object>();  }  String type=conn.getContentType();  if (type != null) {    setContentType(type);    pageProperties.put("content-type",type);  }  pageProperties.put(Document.StreamDescriptionProperty,conn.getURL());  String enc=conn.getContentEncoding();  if (enc != null) {    pageProperties.put("content-encoding",enc);  }}  }
class C{  public FSPostLoginException(String errorCode,Object[] args){  super(errorCode,args);}  }
class C{  public PersistentObject assertOneEntry() throws EntryNotFoundException, UMSException {  PersistentObject entry=null;  while (hasMoreElements()) {    entry=next();    break;  }  if (entry == null) {    throw new EntryNotFoundException();  }  if (hasMoreElements()) {    abandon();    throw new UMSException(i18n.getString(IUMSConstants.MULTIPLE_ENTRY));  }  return entry;}  }
class C{  public void logTrace(String message){  logger.debug(message);}  }
class C{  private TargAttrFilters(EnumTargetOperator op,TargAttrFilterList firstFilterList,TargAttrFilterList secondFilterList){  this.op=op;  this.firstFilterList=firstFilterList;  operationMask=firstFilterList.getMask();  if (secondFilterList != null) {    operationMask|=secondFilterList.getMask();    this.secondFilterList=secondFilterList;  } else {    this.secondFilterList=null;  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  boolean forwarded=false;  submitCycle=true;  try {    Referral referral=createReferral();    if (referral != null) {      CachedPolicy cachedPolicy=getCachedPolicy();      Policy policy=cachedPolicy.getPolicy();      String name=(String)propertySheetModel.getValue(REFERRAL_NAME);      policy.addReferral(name,referral);      backTrail();      forwardToPolicyViewBean();      forwarded=true;    }  } catch (  NameAlreadyExistsException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));  }catch (  InvalidNameException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));  }catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  } finally {    if (!forwarded) {      forwardTo();    }  }}  }
class C{  public static void main(String[] args){  int exitCode=main(args,System.out,System.err);  if (exitCode != ReturnCode.SUCCESS.get()) {    System.exit(filterExitCode(exitCode));  }}  }
class C{  void process(RoutableMsg msg,ServerHandler sender){  if (msg.getDestination() == localReplicationServer.getServerId()) {    if (msg instanceof ErrorMsg) {      ErrorMsg errorMsg=(ErrorMsg)msg;      logger.error(ERR_ERROR_MSG_RECEIVED,errorMsg.getDetails());    } else {      replyWithUnroutableMsgType(sender,msg);    }  } else {    List<ServerHandler> servers=getDestinationServers(msg,sender);    if (!servers.isEmpty()) {      forwardMsgToAllServers(msg,servers,sender);    } else {      replyWithUnreachablePeerMsg(sender,msg);    }  }}  }
class C{  static void updateImage(JLabel lImage,byte[] bytes){  Icon icon=Utilities.createImageIcon(bytes,BinaryAttributeEditorPanel.MAX_IMAGE_HEIGHT,INFO_CTRL_PANEL_IMAGE_OF_ATTRIBUTE_LABEL.get(),false);  if (icon.getIconHeight() > 0) {    lImage.setIcon(icon);    lImage.setText("");  } else {    Utilities.setWarningLabel(lImage,INFO_CTRL_PANEL_PREVIEW_NOT_AVAILABLE_LABEL.get());  }}  }
class C{  public void testConstructorSignBytesNegative7(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=-1;  byte rBytes[]={-1,11,-57,-101,1,75,-90,-46,-92,-4,14,-24,101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textName=textNode.getNodeName();  assertEquals("textNodeName","#text",textName);}  }
class C{  public String processPattern(String newPattern) throws IllegalArgumentException {  int idx=0;  int offnum=-1;  StringBuffer outpat=new StringBuffer();  offsets=new int[BUFSIZE];  arguments=new String[BUFSIZE];  maxOffset=-1;  while (true) {    int ridx=-1;    int lidx=newPattern.indexOf(ldel,idx);    if (lidx >= 0) {      ridx=newPattern.indexOf(rdel,lidx + ldel.length());    } else {      break;    }    if (++offnum >= BUFSIZE) {      throw new IllegalArgumentException("TooManyArguments");    }    if (ridx < 0) {      if (exactmatch) {        throw new IllegalArgumentException("UnmatchedBraces");      } else {        break;      }    }    outpat.append(newPattern.substring(idx,lidx));    offsets[offnum]=outpat.length();    arguments[offnum]=newPattern.substring(lidx + ldel.length(),ridx);    idx=ridx + rdel.length();    maxOffset++;  }  outpat.append(newPattern.substring(idx));  return outpat.toString();}  }
class C{  void regionToRect(int cellX,int cellY,int spanX,int spanY,Rect result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  final int left=hStartPadding + cellX * (mCellWidth + mWidthGap);  final int top=vStartPadding + cellY * (mCellHeight + mHeightGap);  result.set(left,top,left + (spanX * mCellWidth + (spanX - 1) * mWidthGap),top + (spanY * mCellHeight + (spanY - 1) * mHeightGap));}  }
class C{  @Override public void attributeAdded(ServletContextAttributeEvent event){  log("attributeAdded('" + event.getName() + "', '"+ event.getValue()+ "')");}  }
class C{  @Override public Foo fetchFooByUuidAndGroupId(String uuid,long groupId){  return fooPersistence.fetchByUUID_G(uuid,groupId);}  }
class C{  public TextTablePrinter(Writer writer){  this.writer=new PrintWriter(writer);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittextone.class,args);}  }
class C{  public static long extendedDosToJavaTime(long xdostime){  long time=dosToJavaTime(xdostime);  return time + (xdostime >> 32);}  }
class C{  public Builder removeName(String name){  this.names.remove(name);  return this;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void showDoneButton(boolean animate){  if (animate) {    mButtonStyle=STYLE_NEXT;    toggle();  } else {    mButtonStyle=STYLE_DONE;    setImageDrawable(mDoneDrawable);  }}  }
class C{  public void add(Attr attr){  if (attr == null)   return;  Attr attr1=findAttribute(attr.getName());  if (attr1 == null) {    _attrs.add(attr);  } else {    attr1.addValues(attr.getStringValues());  }}  }
class C{  AuditLogFilterBuilder add(String configPath,JsonValueObjectConverter<AuditLogFilter> filterFactory){  auditLogFilterBuilder.put(configPath,filterFactory);  return this;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public synchronized int read(){  return (pos < count) ? (buf[pos++] & 0xff) : -1;}  }
class C{  public static boolean processManageNameIDResponse(HttpServletRequest request,HttpServletResponse response,Map paramsMap) throws SAML2Exception {  String method="processManageNameIDResponse: ";  boolean success=false;  String requestURL=request.getRequestURI();  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(requestURL);  if (metaAlias == null) {    logError("MetaAliasNotFound",LogUtil.MISSING_META_ALIAS,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("MetaAliasNotFound"));  }  String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);  String hostEntityID=metaManager.getEntityByMetaAlias(metaAlias);  String hostRole=SAML2Utils.getHostEntityRole(paramsMap);  boolean isSupported=false;  if (SAML2Constants.IDP_ROLE.equals(hostRole)) {    isSupported=SAML2Utils.isIDPProfileBindingSupported(realm,hostEntityID,SAML2Constants.MNI_SERVICE,SAML2Constants.HTTP_REDIRECT);  } else {    isSupported=SAML2Utils.isSPProfileBindingSupported(realm,hostEntityID,SAML2Constants.MNI_SERVICE,SAML2Constants.HTTP_REDIRECT);  }  if (!isSupported) {    debug.error(method + "MNI binding: Redirect is not supported for " + hostEntityID);    String[] data={hostEntityID,SAML2Constants.HTTP_REDIRECT};    LogUtil.error(Level.INFO,LogUtil.BINDING_NOT_SUPPORTED,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  String relayState=request.getParameter(SAML2Constants.RELAY_STATE);  String mniRes=request.getParameter(SAML2Constants.SAML_RESPONSE);  String mniResStr=SAML2Utils.decodeFromRedirect(mniRes);  if (mniResStr == null) {    logError("nullDecodedStrFromSamlResponse",LogUtil.CANNOT_DECODE_RESPONSE,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("nullDecodedStrFromSamlResponse"));  }  if (debug.messageEnabled()) {    debug.message(method + "Meta Alias is : " + metaAlias);    debug.message(method + "Host role is : " + hostRole);    debug.message(method + "Relay state is : " + relayState);    debug.message(method + "MNI Response : " + mniResStr);  }  SAML2Utils.validateRelayStateURL(realm,hostEntityID,relayState,hostRole);  ManageNameIDResponse mniResponse=null;  try {    mniResponse=pf.createManageNameIDResponse(mniResStr);    String remoteEntityID=mniResponse.getIssuer().getValue();    Issuer resIssuer=mniResponse.getIssuer();    String requestId=mniResponse.getInResponseTo();    SAML2Utils.verifyResponseIssuer(realm,hostEntityID,resIssuer,requestId);    boolean needToVerify=SAML2Utils.getWantMNIResponseSigned(realm,hostEntityID,hostRole);    if (needToVerify) {      String queryString=request.getQueryString();      boolean valid=SAML2Utils.verifyQueryString(queryString,realm,hostRole,remoteEntityID);      if (!valid) {        logError("invalidSignInResponse",LogUtil.MNI_RESPONSE_INVALID_SIGNATURE,null);        throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInResponse"));      }    }    StringBuffer mniUserId=new StringBuffer();    success=checkMNIResponse(mniResponse,realm,hostEntityID,hostRole,mniUserId);    if (success && (hostRole != null) && hostRole.equals(SAML2Constants.SP_ROLE)) {      postTerminationSuccess(hostEntityID,realm,request,response,mniUserId.toString(),null,mniResponse,SAML2Constants.HTTP_REDIRECT);    }  } catch (  SessionException e) {    logError("invalidSSOToken",LogUtil.INVALID_SSOTOKEN,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSSOToken"));  }  if (debug.messageEnabled()) {    debug.message(method + "Request success : " + success);  }  return success;}  }
class C{  public SubResourceCollection glueObjectClass(final String objectClass){  this.glueObjectClasses.add(objectClass);  return this;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509SubjectName createX509DataTypeX509SubjectName() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509SubjectNameImpl();}  }
class C{  public static boolean isValidQName(String str){  final int colon=str.indexOf(':');  if (colon == 0 || colon == str.length() - 1) {    return false;  }  if (colon > 0) {    final String prefix=str.substring(0,colon);    final String localPart=str.substring(colon + 1);    return isValidNCName(prefix) && isValidNCName(localPart);  } else {    return isValidNCName(str);  }}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(ZonedDateTime.class,new ZonedDateTimeSerializer(ISO_FIXED_FORMAT));  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  @NonNull public final Agera observeOn(@NonNull Looper looper){  return new AgeraObserveOnLooper(this,looper,false);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  final Connection connection=Adapters.newRootConnectionFactory().getConnection();  connection.add("dn: uid=user.0, o=test","objectClass: top","objectClass: person","objectClass: inetOrgPerson","objectClass: organizationalPerson","cn: Aaccf Amar","sn:user.0","uid:user.0","description: This is the description for Aaccf Amar.","userPassword:: cGFzc3dvcmQ=","postalAddress: Aaccf Amar$01251 Chestnut Street$Panama City, DE  50369","postalCode: 50369");  connection.add("dn: uid=user.1, o=test","objectClass: top","objectClass: person","objectClass: inetOrgPerson","objectClass: organizationalPerson","cn: Aaren Atp","sn:user.1","uid:user.1","description: This is the description for Aaren Atp.","postalAddress: Aaren Atp$70110 Fourth Street$New Haven, OH  93694","postalCode: 93694");  connection.add("dn: uid=user.2, o=test","objectClass: top","objectClass: person","objectClass: inetOrgPerson","objectClass: organizationalPerson","cn: Aarika Atpco","sn: user.2","uid:user.2","description: This is the description for Aarika Atpco.","userPassword:: cGFzc3dvcmQ=","postalAddress: Aarika Atpco$00900 Maple Street$New Orleans, KS  10857","postalCode: 10857");  connection.add("dn: uid=user.3, o=test","objectClass: top","objectClass: person","objectClass: inetOrgPerson","objectClass: organizationalPerson","cn: Aaron Atrc","sn:user.3","uid:user.3","description: This is the description for Aaron Atrc.","postalAddress: Aaron Atrc$59748 Willow Street$Green Bay, TN  66239","postalCode: 66239");  connection.add("dn: uid=user.4, o=test","objectClass: top","objectClass: person","objectClass: inetOrgPerson","objectClass: organizationalPerson","cn: Samantha Carter","sn: Carter","uid:user.4","description: This is the description for Samantha Carter.","postalAddress: 59748 Willow Street$Green Bay, TN  66000","postalCode: 66000");  connection.close();}  }
class C{  private boolean dismissNoAntennaDialog(){  NoAntennaDialog newFragment=(NoAntennaDialog)mFragmentManager.findFragmentByTag(TAG_NO_ANTENNA);  if (null != newFragment) {    newFragment.dismissAllowingStateLoss();    return true;  }  return false;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void removeAttribute(String name){  if (name != null)   if (attributesList != null) {    for (int i=0; i < attributesList.size(); i++) {      Object o=attributesList.elementAt(i);      if (o instanceof AttributeField) {        AttributeField a=(AttributeField)o;        try {          String n=a.getName();          if (n != null) {            if (name.equals(n)) {              attributesList.remove(a);            }          }        } catch (        SdpParseException e) {        }      }    }  }}  }
class C{  public static void applyTemplate(StringBuilder builder,final String template,final Map<String,Object> map){  configuration=getConfiguration();  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream();Writer writer=new OutputStreamWriter(outputStream)){    Template configurationTemplate=configuration.getTemplate(template);    configurationTemplate.process(map,writer);    builder.append(outputStream.toString());  } catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public Template(String name){  _name=name;}  }
class C{  public BandedSampleModel(int dataType,int w,int h,int numBands){  super(dataType,w,h,1,w,BandedSampleModel.createIndicesArray(numBands),BandedSampleModel.createOffsetArray(numBands));}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  SampleModel sampleModel=new MultiPixelPackedSampleModel(dataType,w,h,pixelBitStride);  return sampleModel;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  this.validateData();  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNSPrefix) {    prefix=SAML2Constants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.PROTOCOL_DECLARE_STR;  }  result.append("<").append(prefix).append("Response").append(uri).append(" ID=\"").append(responseId).append("\"");  if (inResponseTo != null && inResponseTo.trim().length() != 0) {    result.append(" InResponseTo=\"").append(inResponseTo).append("\"");  }  result.append(" Version=\"").append(version).append("\"").append(" IssueInstant=\"").append(DateUtils.toUTCDateFormat(issueInstant)).append("\"");  if (destination != null && destination.trim().length() != 0) {    result.append(" Destination=\"").append(destination).append("\"");  }  if (consent != null && consent.trim().length() != 0) {    result.append(" Consent=\"").append(consent).append("\"");  }  result.append(">");  if (issuer != null) {    result.append(issuer.toXMLString(includeNSPrefix,declareNS));  }  if (signatureString != null) {    result.append(signatureString);  }  if (extensions != null) {    result.append(extensions.toXMLString(includeNSPrefix,declareNS));  }  result.append(status.toXMLString(includeNSPrefix,declareNS));  if (assertions != null) {    Iterator iter=assertions.iterator();    while (iter.hasNext()) {      result.append(((Assertion)iter.next()).toXMLString(includeNSPrefix,declareNS));    }  }  if (encAssertions != null) {    Iterator iter1=encAssertions.iterator();    while (iter1.hasNext()) {      result.append(((EncryptedAssertion)iter1.next()).toXMLString(includeNSPrefix,declareNS));    }  }  result.append("</").append(prefix).append("Response>");  return result.toString();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.KeyNameElement createKeyNameElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.KeyNameElementImpl(value);}  }
class C{  private boolean confirmDeleteFiles() throws ClientException {  return askConfirmation(INFO_CLI_UNINSTALL_CONFIRM_DELETE_FILES.get(),true,logger);}  }
class C{  public boolean isNodeSibling(TreeNode anotherNode){  boolean retval;  if (anotherNode == null) {    retval=false;  } else   if (anotherNode == this) {    retval=true;  } else {    TreeNode myParent=getParent();    retval=(myParent != null && myParent == anotherNode.getParent());    if (retval && !((DefaultMutableTreeNode)getParent()).isNodeChild(anotherNode)) {      throw new Error("sibling has different parent");    }  }  return retval;}  }
class C{  public void checkExcluded(GeneralName name) throws PKIXNameConstraintValidatorException {switch (name.getTagNo()) {case 1:    checkExcludedEmail(excludedSubtreesEmail,extractNameAsString(name));  break;case 2:checkExcludedDNS(excludedSubtreesDNS,DERIA5String.getInstance(name.getName()).getString());break;case 4:checkExcludedDN(ASN1Sequence.getInstance(name.getName().toASN1Primitive()));break;case 6:checkExcludedURI(excludedSubtreesURI,DERIA5String.getInstance(name.getName()).getString());break;case 7:byte[] ip=ASN1OctetString.getInstance(name.getName()).getOctets();checkExcludedIP(excludedSubtreesIP,ip);}}  }
class C{  public void test_SSLEngineResultStatus_values(){  boolean flag=false;  String[] str={"BUFFER_OVERFLOW","BUFFER_UNDERFLOW","CLOSED","OK"};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  if (enS.length == str.length) {    for (int i=0; i < enS.length; i++) {      flag=false;      for (int j=0; j < str.length; j++) {        if (enS[i].toString().equals(str[j])) {          flag=true;          break;        }      }      assertTrue("Incorrect Status",flag);    }  } else {    fail("Incorrect number of enum constant was returned");  }}  }
class C{  public boolean messageShow(String message){  JTextArea msgArea=new JTextArea(message,10,75);  msgArea.setLineWrap(true);  JScrollPane scrollPane=new JScrollPane(msgArea);  if (SwingUtilities.isEventDispatchThread())   JOptionPane.showMessageDialog(logFrame,scrollPane,"Copiate questo messaggio",JOptionPane.INFORMATION_MESSAGE); else   SwingUtilities.invokeLater(new SwingShowMessage(scrollPane,JOptionPane.INFORMATION_MESSAGE));  return true;}  }
class C{  @Override public void write(char[] chr) throws IOException {  out.write(chr);}  }
class C{  public void testUrlDecoderIgnoresUnnecessaryCharset() throws Exception {  try {    assertEquals("ab",URLDecoder.decode("ab","no-such-charset"));  } catch (  UnsupportedCharsetException expected) {  }}  }
class C{  @Override public void modifyMemberShip(SSOToken token,IdType type,String name,Set<String> members,IdType membersType,int operation) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("modifymembership invoked");  }  if (members == null || members.isEmpty()) {    throw newIdRepoException(IdRepoErrorCode.ILLEGAL_ARGUMENTS);  }  if (type.equals(IdType.USER)) {    throw newIdRepoException(IdRepoErrorCode.MEMBERSHIP_TO_USERS_AND_AGENTS_NOT_ALLOWED);  }  if (!membersType.equals(IdType.USER)) {    throw newIdRepoException(IdRepoErrorCode.MEMBERSHIPS_FOR_NOT_USERS_NOT_ALLOWED,CLASS_NAME);  }  String dn=getDN(type,name);  Set<String> memberDNs=new HashSet<>(members.size());  for (  String member : members) {    memberDNs.add(getDN(membersType,member));  }  if (type.equals(IdType.GROUP)) {    modifyGroupMembership(dn,memberDNs,operation);  } else   if (type.equals(IdType.ROLE)) {    modifyRoleMembership(dn,memberDNs,operation);  } else {    throw newIdRepoException(IdRepoErrorCode.MEMBERSHIP_CANNOT_BE_MODIFIED,CLASS_NAME,type.getName());  }}  }
class C{  PolicyConditionUpgrader(PolicyConditionUpgradeMap conditionUpgradeMap){  this.conditionUpgradeMap=conditionUpgradeMap;}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;    m_docIsEmpty=false;  } else   if (m_cdataTagOpen)   closeCDATA();  try {    if (m_needToOutputDocTypeDecl) {      if (null != getDoctypeSystem()) {        outputDocTypeDecl(name,true);      }      m_needToOutputDocTypeDecl=false;    }    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    if (namespaceURI != null)     ensurePrefixIsDeclared(namespaceURI,name);    m_ispreserve=false;    if (shouldIndent() && m_startNewLine) {      indent();    }    m_startNewLine=true;    final java.io.Writer writer=m_writer;    writer.write('<');    writer.write(name);  } catch (  IOException e) {    throw new SAXException(e);  }  if (atts != null)   addAttributes(atts);  m_elemContext=m_elemContext.push(namespaceURI,localName,name);  m_isprevtext=false;  if (m_tracer != null)   firePseudoAttributes();}  }
class C{  public static boolean isSupportedFeature(String featureOID){  return directoryServer.supportedFeatures.contains(featureOID);}  }
class C{  public static void addAttributeDefaultValues(String serviceName,String subSchemaName,String schemaType,String attributeName,Set defaultValues) throws UpgradeException {  String classMethod="UpgradeUtils:addAttributeDefaultValues : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Updating attribute default values");    debug.message("in :" + serviceName + "for attribute: "+ attributeName);  }  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType);  try {    Map attributeDefaults=ss.getAttributeDefaults();    Set oldAttrValues=(Set)attributeDefaults.get(attributeName);    Set newAttrValues=((oldAttrValues == null) || oldAttrValues.isEmpty()) ? new HashSet() : new HashSet(oldAttrValues);    newAttrValues.addAll(defaultValues);    ss.setAttributeDefaults(attributeName,newAttrValues);  } catch (  SSOException ssoe) {    throw new UpgradeException("Invalid SSOToken");  }catch (  SMSException sme) {    throw new UpgradeException("Failed to add attribute default " + "values");  }}  }
class C{  public void columnRemoved(TableColumnModelEvent e){  resizeAndRepaint();}  }
class C{  public SOAPMessage createSOAPMessage(final String header,final String body,final boolean isClientMessage) throws SOAPException, SAML2Exception {  try {    MimeHeaders mimeHeaders=new MimeHeaders();    mimeHeaders.addHeader("Content-Type","text/xml");    if (isClientMessage) {      mimeHeaders.addHeader("SOAPAction","\"\"");    }    if (debug.messageEnabled()) {      debug.message("SOAPCommunicator.createSOAPMessage: header = " + header + ", body = "+ body);    }    StringBuilder sb=new StringBuilder(500);    sb.append("<").append(SAMLConstants.SOAP_ENV_PREFIX).append(":Envelope").append(SAMLConstants.SPACE).append("xmlns:").append(SAMLConstants.SOAP_ENV_PREFIX).append("=\"").append(SAMLConstants.SOAP_URI).append("\">");    if (header != null) {      sb.append("<").append(SAMLConstants.SOAP_ENV_PREFIX).append(":Header>").append(header).append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(":Header>");    }    if (body != null) {      sb.append("<").append(SAMLConstants.SOAP_ENV_PREFIX).append(":Body>").append(body).append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(":Body>");    }    sb.append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(":Envelope>").append(SAMLConstants.NL);    if (debug.messageEnabled()) {      debug.message("SOAPCommunicator.createSOAPMessage: soap message = " + sb.toString());    }    return messageFactory.createMessage(mimeHeaders,new ByteArrayInputStream(sb.toString().getBytes(SAML2Constants.DEFAULT_ENCODING)));  } catch (  IOException io) {    debug.error("SOAPCommunicator.createSOAPMessage: IOE",io);    throw new SAML2Exception(io.getMessage());  }}  }
class C{  public PdfCanvas restoreState(){  document.checkIsoConformance('Q',IsoKey.CANVAS_STACK);  if (gsStack.isEmpty()) {    throw new PdfException(PdfException.UnbalancedSaveRestoreStateOperators);  }  currentGs=gsStack.pop();  contentStream.getOutputStream().writeBytes(Q);  return this;}  }
class C{  @Override protected synchronized WZStreamingError startBroadcast(){  getBroadcastConfig().setAudioChannels(isBluetoothActive() ? BLUETOOTH_CHANNELS : mStoredChannels);  getBroadcastConfig().setAudioSampleRate(isBluetoothActive() ? BLUETOOTH_SAMPLE_RATE : mStoredSampleRate);  return super.startBroadcast();}  }
class C{  public Period minusDays(long daysToSubtract){  return (daysToSubtract == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-daysToSubtract));}  }
class C{  SynchronizedKeyedPooledObjectFactory(final KeyedPooledObjectFactory<K,V> keyedFactory) throws IllegalArgumentException {  if (keyedFactory == null) {    throw new IllegalArgumentException("keyedFactory must not be null.");  }  this.keyedFactory=keyedFactory;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  Map<String,Set<String>> attributeValues=null;  if ((datafile != null) || (attrValues != null)) {    attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);    attributeValues=processFileAttributes(attributeValues);  }  IOutput outputWriter=getOutputWriter();  String[] params={realm,serviceName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ASSIGN_SERVICE_TO_REALM",params);  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Set assignableServices=ocm.getAssignableServices();    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity ai=amir.getRealmIdentity();    Set dynAssignableServices=ai.getAssignableServices();    if (assignableServices.contains(serviceName)) {      ocm.assignService(serviceName,attributeValues);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("assign-service-to-realm-succeed"),(Object[])params));    }    if (dynAssignableServices.contains(serviceName)) {      ai.assignService(serviceName,attributeValues);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("assign-service-to-realm-succeed"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ASSIGN_SERVICE_TO_REALM",params);  } catch (  SSOException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmAssignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ASSIGN_SERVICE_TO_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IdRepoException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmAssignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ASSIGN_SERVICE_TO_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmAssignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ASSIGN_SERVICE_TO_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public boolean equalsValue(final Object other){  return Objects.equals(this.value,other);}  }
class C{  public Object newInstance(Class javaContentInterface) throws JAXBException {  if (javaContentInterface == null) {    throw new JAXBException(Messages.format(Messages.CI_NOT_NULL));  }  try {    Class c=gi.getDefaultImplementation(javaContentInterface);    if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface));    return c.newInstance();  } catch (  Exception e) {    throw new JAXBException(e);  }}  }
class C{  public final boolean isEnabled(CBORGenerator.Feature f){  return (_formatGeneratorFeatures & f.getMask()) != 0;}  }
class C{  public ReplicaCursor(DBCursor<UpdateMsg> cursor,CSN offlineCSN,ReplicaId replicaId,ReplicationDomainDB domainDB){  this.cursor=cursor;  this.replicaId=replicaId;  this.domainDB=domainDB;  setOfflineCSN(offlineCSN);}  }
class C{  public void rotate_90_deg(int p_component_no,int p_factor,PlaPointInt p_pole){  BrdComponent curr_component=get(p_component_no);  undo_list.save_for_undo(curr_component);  curr_component.rotate_90_deg(p_factor,p_pole);}  }
class C{  public void duplicate(MessageBytes src) throws IOException {switch (src.getType()) {case MessageBytes.T_BYTES:    type=T_BYTES;  ByteChunk bc=src.getByteChunk();byteC.allocate(2 * bc.getLength(),-1);byteC.append(bc);break;case MessageBytes.T_CHARS:type=T_CHARS;CharChunk cc=src.getCharChunk();charC.allocate(2 * cc.getLength(),-1);charC.append(cc);break;case MessageBytes.T_STR:type=T_STR;String sc=src.getString();this.setString(sc);break;}setCharset(src.getCharset());}  }
class C{  public InternalSession(SessionID sid){  this(sid,InjectorHolder.getInstance(SessionService.class),InjectorHolder.getInstance(SessionServiceConfig.class),InjectorHolder.getInstance(SessionEventBroker.class),InjectorHolder.getInstance(SessionLogging.class),InjectorHolder.getInstance(SessionAuditor.class),InjectorHolder.getInstance(SessionUtilsWrapper.class),InjectorHolder.getInstance(SessionConstraint.class),InjectorHolder.getInstance(Key.get(Debug.class,Names.named(SESSION_DEBUG))));}  }
class C{  public ParseConversionEventImpl(int _severity,String _message,ValidationEventLocator _locator,Throwable _linkedException){  super(_severity,_message,_locator,_linkedException);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  DisplayMetrics dm=new DisplayMetrics();  display.getMetrics(dm);  screenResolution=new Point(dm.widthPixels,dm.heightPixels);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  ChronoPeriodImpl(Chronology chrono,int years,int months,int days){  Objects.requireNonNull(chrono,"chrono");  this.chrono=chrono;  this.years=years;  this.months=months;  this.days=days;}  }
class C{  public BackupConfig(BackupDirectory backupDirectory,String backupID,boolean isIncremental){  this.backupDirectory=backupDirectory;  this.backupID=backupID;  this.isIncremental=isIncremental;}  }
class C{  public static MatchedValuesFilter createExtensibleMatchFilter(AttributeType attributeType,MatchingRule matchingRule,ByteString assertionValue){  Reject.ifNull(attributeType,matchingRule,assertionValue);  String rawAttributeType=attributeType.getNameOrOID();  String matchingRuleID=matchingRule.getOID();  MatchedValuesFilter filter=new MatchedValuesFilter(EXTENSIBLE_MATCH_TYPE,rawAttributeType,assertionValue,null,null,null,matchingRuleID);  filter.attributeType=attributeType;  filter.assertionValue=assertionValue;  filter.matchingRule=matchingRule;  return filter;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {  try {    AMViewBeanBase vb=(AMViewBeanBase)getViewBean(Class.forName((String)getPageSessionAttribute(PG_ATTR_CONFIG_PAGE)));    removePageSessionAttribute(PG_ATTR_CONFIG_PAGE);    removePageSessionAttribute(PG_ATTR_PROPERTY_NAMES);    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  ClassNotFoundException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  try {    DTDprolog();    m_writer.write("<!ENTITY ");    m_writer.write(name);    if (publicId != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(publicId);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(systemId);    }    m_writer.write("\" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public JLabel(String text,int horizontalAlignment){  this(text,null,horizontalAlignment);}  }
class C{  protected boolean writeEnvironmentReport(Hashtable h){  if (null == h) {    logMsg("# ERROR: writeEnvironmentReport called with null Hashtable");    return false;  }  boolean errors=false;  logMsg("#---- BEGIN writeEnvironmentReport($Revision: 468646 $): Useful stuff found: ----");  for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {    Object key=keys.nextElement();    String keyStr=(String)key;    try {      if (keyStr.startsWith(FOUNDCLASSES)) {        Vector v=(Vector)h.get(keyStr);        errors|=logFoundJars(v,keyStr);      } else {        if (keyStr.startsWith(ERROR)) {          errors=true;        }        logMsg(keyStr + "=" + h.get(keyStr));      }    } catch (    Exception e) {      logMsg("Reading-" + key + "= threw: "+ e.toString());    }  }  logMsg("#----- END writeEnvironmentReport: Useful properties found: -----");  return errors;}  }
class C{  protected void fireEndElem(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name,(Attributes)null);  }}  }
class C{  public NoSuchMethodException(String s){  super(s);}  }
class C{  public ClassParser(final InputStream inputStream){  this.dataInputStream=new DataInputStream(new BufferedInputStream(inputStream,BUFSIZE));}  }
class C{  private void updateKeyMaskFields(){  mask=fRanges;  if (fContextual) {    mask|=(1 << 31);    key=fDefaultContextIndex;  } else {    key=fSingleRangeIndex;  }}  }
class C{  ASN1ByteSequenceReader(final ByteSequenceReader reader,final int maxElementSize){  this.reader=reader;  this.maxElementSize=maxElementSize;}  }
class C{  final long internalNextLong(long origin,long bound){  long r=mix64(nextSeed());  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=mix64(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix64(nextSeed());    }  }  return r;}  }
class C{  protected int checkTimeDay(){  return 0;}  }
class C{  @Override public void execute(final OutputStream out) throws ConnectorException {  this.file=new File(configuration.getTypes().get(type).getPath() + currentFolder,fileName);  if (!AccessControlUtil.getInstance(configuration).checkFolderACL(this.type,this.currentFolder,this.userRole,AccessControlUtil.CKFINDER_CONNECTOR_ACL_FILE_VIEW)) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_UNAUTHORIZED);  }  if (!FileUtils.checkFileName(this.fileName) || FileUtils.checkFileExtension(this.fileName,this.configuration.getTypes().get(this.type)) == 1) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST);  }  if (FileUtils.checkIfDirIsHidden(this.currentFolder,configuration)) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST);  }  try {    if (!file.exists() || !file.isFile() || FileUtils.checkIfFileIsHidden(this.fileName,this.configuration)) {      throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_FILE_NOT_FOUND);    }    FileUtils.printFileContentToResponse(file,out);  } catch (  IOException e) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,e);  }}  }
class C{  public StateInteractive extent_to_whole_nets(){  Set<Integer> curr_net_no_set=new TreeSet<Integer>();  for (  BrdItem curr_item : items_list) {    if (!(curr_item instanceof BrdConnectable))     continue;    for (int index=0; index < curr_item.net_count(); ++index) {      curr_net_no_set.add(curr_item.get_net_no(index));    }  }  Set<BrdItem> new_selected_items=new TreeSet<BrdItem>();  for (  Integer an_int : curr_net_no_set) {    int curr_net_no=an_int.intValue();    new_selected_items.addAll(r_brd.get_connectable_items(curr_net_no));  }  items_list=new_selected_items;  if (new_selected_items.isEmpty()) {    return return_state;  }  actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_NETS);  filter();  i_brd.repaint();  return this;}  }
class C{  public void activateFrame(JInternalFrame f){  Container p=f.getParent();  Component[] c;  JDesktopPane d=f.getDesktopPane();  JInternalFrame currentlyActiveFrame=(d == null) ? null : d.getSelectedFrame();  if (p == null) {    p=f.getDesktopIcon().getParent();    if (p == null)     return;  }  if (currentlyActiveFrame == null) {    if (d != null) {      d.setSelectedFrame(f);    }  } else   if (currentlyActiveFrame != f) {    if (currentlyActiveFrame.isSelected()) {      try {        currentlyActiveFrame.setSelected(false);      } catch (      PropertyVetoException e2) {      }    }    if (d != null) {      d.setSelectedFrame(f);    }  }  f.moveToFront();}  }
class C{  private static OCSPReq generateOCSPRequest(X509Certificate issuerCert,BigInteger serialNumber) throws OCSPException, IOException, OperatorException, CertificateEncodingException {  Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());  CertificateID id=SignUtils.generateCertificateId(issuerCert,serialNumber,CertificateID.HASH_SHA1);  return SignUtils.generateOcspRequestWithNonce(id);}  }
class C{  void updateTotalCount(final WriteableTransaction txn,final long delta){  addToCounter(txn,TOTAL_COUNT_ENTRY_ID,delta);}  }
class C{  public byte[] convertToVorbisSetupHeaderPacketAndAdditionalPackets(long fileOffsetOfStartingOggPage,RandomAccessFile raf) throws IOException, CannotReadException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  raf.seek(fileOffsetOfStartingOggPage);  OggPageHeader setupPageHeader=OggPageHeader.read(raf);  if (setupPageHeader.getPacketList().size() > 1) {    raf.skipBytes(setupPageHeader.getPacketList().get(0).getLength());  }  byte[] b=new byte[VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH];  raf.read(b);  if (!isVorbisSetupHeader(b)) {    throw new CannotReadException("Unable to find setup header(2), unable to write ogg file");  }  raf.seek(raf.getFilePointer() - (VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH));  if (setupPageHeader.getPacketList().size() > 1) {    b=new byte[setupPageHeader.getPacketList().get(1).getLength()];    raf.read(b);    baos.write(b);  } else {    b=new byte[setupPageHeader.getPacketList().get(0).getLength()];    raf.read(b);    baos.write(b);  }  if (!setupPageHeader.isLastPacketIncomplete() || setupPageHeader.getPacketList().size() > 2) {    logger.config("Setupheader finishes on this page");    if (setupPageHeader.getPacketList().size() > 2) {      for (int i=2; i < setupPageHeader.getPacketList().size(); i++) {        b=new byte[setupPageHeader.getPacketList().get(i).getLength()];        raf.read(b);        baos.write(b);      }    }    return baos.toByteArray();  }  while (true) {    logger.config("Reading another page");    OggPageHeader nextPageHeader=OggPageHeader.read(raf);    b=new byte[nextPageHeader.getPacketList().get(0).getLength()];    raf.read(b);    baos.write(b);    if (nextPageHeader.getPacketList().size() > 1) {      logger.config("Setupheader finishes on this page");      return baos.toByteArray();    }    if (!nextPageHeader.isLastPacketIncomplete()) {      logger.config("Setupheader finish on Page because this packet is complete");      return baos.toByteArray();    }  }}  }
class C{  public void policyChanged(PolicyEvent evt){  debug.message("PolicyListenerRequest.policyChanged()");  if (evt == null) {    debug.error("PolicyListenerRequest.policyChanged(PolicyEvent): " + "invalid policy event");    return;  }  String changeType=null;  int type=evt.getChangeType();  if (type == PolicyEvent.POLICY_ADDED) {    changeType=PolicyChangeNotification.ADDED;  } else   if (type == PolicyEvent.POLICY_REMOVED) {    changeType=PolicyChangeNotification.DELETED;  } else {    changeType=PolicyChangeNotification.MODIFIED;  }  Set resourceNames=evt.getResourceNames();  if (debug.messageEnabled()) {    debug.message("PolicyListenerRequest.policyChanged(PolicyEvent): " + "resource names from the policy event : " + resourceNames.toString());  }  PolicyService ps=new PolicyService();  PolicyNotification pn=new PolicyNotification();  PolicyChangeNotification pcn=new PolicyChangeNotification();  pcn.setResourceNames(resourceNames);  pcn.setPolicyChangeType(changeType);  pcn.setServiceName(serviceName);  pn.setNotificationType(PolicyNotification.POLICY_CHANGE_TYPE);  pn.setPolicyChangeNotification(pcn);  ps.setMethodID(PolicyService.POLICY_NOTIFICATION_ID);  ps.setPolicyNotification(pn);  Notification notification=new Notification(ps.toXMLString());  NotificationSet set=new NotificationSet(PolicyService.POLICY_SERVICE);  set.addNotification(notification);  if (debug.messageEnabled()) {    debug.message("PolicyListenerRequest.policyChanged(PolicyEvent): " + "the notification set sent is : " + set.toXMLString());  }  try {    PLLServer.send(new URL(notificationURL),set);    if (debug.messageEnabled()) {      debug.message("PolicyListenerRequest.policyChanged(PolicyEvent): " + "the policy change notification has been sent to " + notificationURL);    }  } catch (  SendNotificationException e) {    debug.error("PolicyListenerRequest.policyChanged(): " + "PLLServer.send() failed",e);  }catch (  MalformedURLException e) {    debug.error("PolicyListenerRequest.policyChanged(): " + "PLLServer.send() failed",e);  }}  }
class C{  public boolean startsWith(XMLString prefix){  return m_str.startsWith(prefix.toString());}  }
class C{  public long tryReadLock(){  for (; ; ) {    long s, m, next;    if ((m=(s=state) & ABITS) == WBIT)     return 0L; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))       return next;    } else     if ((next=tryIncReaderOverflow(s)) != 0L)     return next;  }}  }
class C{  public MalformedLinkException(){  super();}  }
class C{  public StateInteractive add_corner(PlaPointFloat p_location){  boolean route_completed=route_support.route_to(p_location);  String layer_string=r_brd.layer_structure.get_name(route_support.nearest_target_layer());  i_brd.screen_messages.set_target_layer(layer_string);  actlog_add_corner(p_location);  StateInteractive result=this;  if (route_completed) {    result=return_state;    r_brd.end_notify_observers();    i_brd.screen_messages.clear();    for (    int curr_net_no : route_support.net_nos) {      i_brd.update_ratsnest(curr_net_no);    }  }  i_brd.recalculate_length_violations();  i_brd.repaint(i_brd.get_graphics_update_rectangle());  return result;}  }
class C{  public SOAPException(String reason,Throwable cause){  super(reason);  initCause(cause);}  }
class C{  public ClientAbortException(Throwable throwable){  super(throwable);}  }
class C{  public boolean containsChildrenOf(LDAPURL parentUrl){  return contains(parentUrl);}  }
class C{  public static void clearNotification(Context context,int notificationType){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=sharedPreferences.edit();switch (notificationType) {case NOTIFICATION_ACTION:    editor.putInt(context.getString(R.string.pref_key_notification_action_count),0);  break;case NOTIFICATION_RULE:editor.putInt(context.getString(R.string.pref_key_notification_rule_count),0);break;case NOTIFICATION_WARN:editor.putInt(context.getString(R.string.pref_key_notification_warn_count),0);break;default :Log.w(TAG,new IllegalArgumentException());return;}editor.commit();NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);nm.cancel(notificationType);}  }
class C{  public String toString(){  return (toXML());}  }
class C{  public final void popNamespaceContext(){  m_prefixResolvers.pop();}  }
class C{  public static void loadApplicationAnnotations(Context context){  loadApplicationListenerAnnotations(context);  loadApplicationFilterAnnotations(context);  loadApplicationServletAnnotations(context);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  OpenCamera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException("Camera.open() failed to return object from driver");    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera cameraObject=theCamera.getCamera();  Camera.Parameters parameters=cameraObject.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=cameraObject.getParameters();      parameters.unflatten(parametersFlattened);      try {        cameraObject.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }  cameraObject.setPreviewDisplay(holder);}  }
class C{  private LinkedHashMap<String,AttributeType> buildAttributeMap(SubjectAttributeToUserAttributeCertificateMapperCfg cfg,ConfigChangeResult ccr){  LinkedHashMap<String,AttributeType> results=new LinkedHashMap<>();  for (  String mapStr : cfg.getSubjectAttributeMapping()) {    String lowerMap=toLowerCase(mapStr);    int colonPos=lowerMap.indexOf(':');    if (colonPos <= 0) {      ccr.setResultCodeIfSuccess(ResultCode.CONSTRAINT_VIOLATION);      ccr.addMessage(ERR_SATUACM_INVALID_MAP_FORMAT.get(cfg.dn(),mapStr));      return null;    }    String certAttrName=lowerMap.substring(0,colonPos).trim();    String userAttrName=lowerMap.substring(colonPos + 1).trim();    if (certAttrName.length() == 0 || userAttrName.length() == 0) {      ccr.setResultCodeIfSuccess(ResultCode.CONSTRAINT_VIOLATION);      ccr.addMessage(ERR_SATUACM_INVALID_MAP_FORMAT.get(cfg.dn(),mapStr));      return null;    }    certAttrName=normalizeAttributeName(certAttrName);    if (results.containsKey(certAttrName)) {      ccr.setResultCodeIfSuccess(ResultCode.CONSTRAINT_VIOLATION);      ccr.addMessage(ERR_SATUACM_DUPLICATE_CERT_ATTR.get(cfg.dn(),certAttrName));      return null;    }    AttributeType userAttrType=DirectoryServer.getSchema().getAttributeType(userAttrName);    if (userAttrType.isPlaceHolder()) {      ccr.setResultCodeIfSuccess(ResultCode.CONSTRAINT_VIOLATION);      ccr.addMessage(ERR_SATUACM_NO_SUCH_ATTR.get(mapStr,cfg.dn(),userAttrName));      return null;    }    if (results.values().contains(userAttrType)) {      ccr.setResultCodeIfSuccess(ResultCode.CONSTRAINT_VIOLATION);      ccr.addMessage(ERR_SATUACM_DUPLICATE_USER_ATTR.get(cfg.dn(),userAttrType.getNameOrOID()));      return null;    }    results.put(certAttrName,userAttrType);  }  return results;}  }
class C{  private void findNextClip(int pw,int ph){  final boolean ltr=table.getComponentOrientation().isLeftToRight();  if (col == 0) {    if (ltr) {      clip.x=0;    } else {      clip.x=totalColWidth;    }    clip.y+=clip.height;    clip.width=0;    clip.height=0;    int rowCount=table.getRowCount();    int rowHeight=table.getRowHeight(row);    do {      clip.height+=rowHeight;      if (++row >= rowCount) {        break;      }      rowHeight=table.getRowHeight(row);    } while (clip.height + rowHeight <= ph);  }  if (printMode == JTable.PrintMode.FIT_WIDTH) {    clip.x=0;    clip.width=totalColWidth;    return;  }  if (ltr) {    clip.x+=clip.width;  }  clip.width=0;  int colCount=table.getColumnCount();  int colWidth=colModel.getColumn(col).getWidth();  do {    clip.width+=colWidth;    if (!ltr) {      clip.x-=colWidth;    }    if (++col >= colCount) {      col=0;      break;    }    colWidth=colModel.getColumn(col).getWidth();  } while (clip.width + colWidth <= pw);}  }
class C{  public static Object check(Object self,Closure<?> c) throws Exception {  if (DefaultTypeTransformation.castToBoolean(c.call(self))) {    return self;  }  throw new Exception("Object failed check: " + self);}  }
class C{  private LogFileCursor(final LogFile<K,V> logFile) throws ChangelogException {  this.logFile=logFile;  this.reader=logFile.getReader();}  }
class C{  protected void reset(int linksSize,int varArraySize){  _frameTop=0;  _linksTop=0;  if (_links == null) {    _links=new int[linksSize];  }  _links[_linksTop++]=0;  _stackFrames=new XObject[varArraySize];}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  ValueExp val=exp.apply(name);  if (!(val instanceof StringValueExp)) {    return false;  }  return wildmatch(((StringValueExp)val).getValue(),pattern);}  }
class C{  public static byte[] readBinary(InputStream stream,long size) throws IOException {  byte[] result=new byte[(int)size];  stream.read(result);  return result;}  }
class C{  public Map<String,String> parse(Set<String> entries){  Map<String,String> result=new HashMap<String,String>();  if (entries != null) {    for (    String entry : entries) {      Pair<String,String> pair=parse(entry);      if (pair != null) {        result.put(pair.getFirst(),pair.getSecond());      }    }  }  return result;}  }
class C{  public boolean isActivated(){  return (getData() & 0x8) != 0;}  }
class C{  public void initialize(KeyProvider keyProvider){  if (keyProvider == null) {    FSUtils.debug.error("FSSignatureProvider.initialize: Key Provider " + "is null");  } else {    keystore=keyProvider;  }}  }
class C{  PropertyDescriptor(Class<?> bean,String base,Method read,Method write) throws IntrospectionException {  if (bean == null) {    throw new IntrospectionException("Target Bean class is null");  }  setClass0(bean);  setName(Introspector.decapitalize(base));  setReadMethod(read);  setWriteMethod(write);  this.baseName=base;}  }
class C{  public void logException(Exception ex){  if (traceLevel >= TRACE_EXCEPTION) {    checkLogFile();    ex.printStackTrace();    if (printWriter != null)     ex.printStackTrace(printWriter);  }}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  Set propertyNames=(Set)getPageSessionAttribute(PG_ATTR_PROPERTY_NAMES);  populatePropertyNameTableModel(propertyNames);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void doGroupAction(Object obj){  if (target != null) {    target.doGroupAction(obj);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FederationType createFederationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationTypeImpl();}  }
class C{  public boolean isPartialReturn(){  return partialReturn;}  }
class C{  public void init(InputMeta in) throws IOException {  style=in.readWord();  penWidth=in.readShort();  in.readWord();  color=in.readColor();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ObjectCreateRule[");  sb.append("className=");  sb.append(className);  sb.append(", attributeName=");  sb.append(attributeName);  sb.append("]");  return (sb.toString());}  }
class C{  public void handleTblHandlersHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    WSAuthNServicesHandlersEditViewBean vb=(WSAuthNServicesHandlersEditViewBean)getViewBean(WSAuthNServicesHandlersEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue("tblHandlersHrefAction"));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public ByteBufferOutputStream append(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)|| len == 0)   return this;  int newcount=count + len;  if (newcount > buf.length) {    byte[] newbuf=new byte[Math.max(buf.length << 1,newcount)];    System.arraycopy(buf,0,newbuf,0,count);    buf=newbuf;  }  System.arraycopy(b,off,buf,count,len);  count=newcount;  return this;}  }
class C{  public void selectAllAccessibleSelection(){}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String i18nkey=getStringOptionValue(ARGUMENT_I18N_KEY);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,i18nkey};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_ATTRIBUTE_SCHEMA_I18N_KEY",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,i18nkey,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_I18N_KEY",args);    }    attrSchema.setI18NKey(i18nkey);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_ATTRIBUTE_SCHEMA_I18N_KEY",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-modify-i18n-key-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,i18nkey,e.getMessage()};    debugError("ModifyAttributeSchemaI18nKey.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_I18N_KEY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,i18nkey,e.getMessage()};    debugError("ModifyAttributeSchemaI18nKey.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_I18N_KEY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  final boolean lookahead(char c,int n){  int pos=(m_queueMark + n);  boolean b;  if ((pos <= m_ops.getTokenQueueSize()) && (pos > 0) && (m_ops.getTokenQueueSize() != 0)) {    String tok=((String)m_ops.m_tokenQueue.elementAt(pos - 1));    b=(tok.length() == 1) ? (tok.charAt(0) == c) : false;  } else {    b=false;  }  return b;}  }
class C{  @Override public void put(String name,byte value){  emulatedFields.put(name,value);}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeShortArrayAsInteger() throws Exception {  super.testDecodeShortArrayAsInteger();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue05.class,args);}  }
class C{  public Future<Job> active(){  return this.state(JobState.ACTIVE);}  }
class C{  public SQLDataException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.KeyActivationElement createKeyActivationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyActivationElementImpl();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String fileName=getStringOptionValue(ARGUMENT_FILENAME);  if (subSchemaName == null) {    subSchemaName="/";  }  IOutput outputWriter=getOutputWriter();  String[] params={serviceName,schemaType,subSchemaName};  ServiceSchema ss=getServiceSchema();  CommandManager mgr=getCommandManager();  String url=mgr.getWebEnabledURL();  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_SUB_SCHEMA",params);  try {    if ((url != null) && (url.length() > 0)) {      ss.addSubSchema(new ByteArrayInputStream(fileName.getBytes()));    } else {      ss.addSubSchema(new FileInputStream(fileName));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_SUB_SCHEMA",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-subschema-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,e.getMessage()};    debugError("AddSubSchema.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SUB_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,e.getMessage()};    debugError("AddSubSchema.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SUB_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    String[] args={serviceName,schemaType,subSchemaName,e.getMessage()};    debugError("AddSubSchema.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SUB_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public JDesktopIcon(JInternalFrame f){  setVisible(false);  setInternalFrame(f);  updateUI();}  }
class C{  private void buildNewList(MethodVisitor methodVisitor,CodeInfo info,Ins.NewList newList){  methodVisitor.visitTypeInsn(Opcodes.NEW,typeToInternalName(newList.type()));  info.push(CodeInfo.Size._1);  methodVisitor.visitInsn(Opcodes.DUP);  info.push(CodeInfo.Size._1);  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,typeToInternalName(newList.type()),"<init>","()V",false);  info.pop(1);  for (  Value v : newList.initValues()) {    methodVisitor.visitInsn(Opcodes.DUP);    info.push(CodeInfo.Size._1);    buildValueAccess(methodVisitor,info,v,true);    methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,"java/util/List","add","(Ljava/lang/Object;)Z",true);    info.pop(2);    info.push(CodeInfo.Size._1);    methodVisitor.visitInsn(Opcodes.POP);    info.pop(1);  }}  }
class C{  public synchronized void putReplicaOfflineMsg(){  final CSN offlineCSN=csnGenerator.newCSN();  final PendingChange pendingChange=new PendingChange(offlineCSN,null,new ReplicaOfflineMsg(offlineCSN));  pendingChange.setCommitted(true);  pendingChanges.put(offlineCSN,pendingChange);  pushCommittedChanges();}  }
class C{  public void readFully(long position,byte[] buffer) throws IOException {  readFully(position,buffer,0,buffer.length);}  }
class C{  public void synchronize(){  checkAdminConnector();}  }
class C{  public void paintTableBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean startedIdFound(){  return startedIdFound;}  }
class C{  public static PluginHolder build(File[] pluginJars) throws MalformedURLException, InstantiationException, IllegalAccessException {  if (instance != null) {    throw new IllegalStateException("The PluginHolder has already been built. Please call getInstance() Instead.");  }  instance=new PluginHolder();  ArrayList<Class<? extends Plugin>> notifierClasses=new ArrayList<>();  ArrayList<Class<? extends Plugin>> securityClasses=new ArrayList<>();  for (  File pluginJar : pluginJars) {    notifierClasses.addAll(PluginUtils.getPluginsFromExternalJar(pluginJar,NotifierPlugin.class));    securityClasses.addAll(PluginUtils.getPluginsFromExternalJar(pluginJar,SecurityPlugin.class));  }  for (  Class<? extends Plugin> clazz : notifierClasses) {    NotifierPlugin object=(NotifierPlugin)clazz.newInstance();    logger.info("Loading Notifier Plugin: " + object.getPluginName() + " of class type: "+ object.getClass().getCanonicalName());    notifierPlugins.add(object);  }  for (  Class<? extends Plugin> clazz : securityClasses) {    SecurityPlugin object=(SecurityPlugin)clazz.newInstance();    logger.info("Loading Security Plugin: " + object.getPluginName() + " of class type: "+ object.getClass().getCanonicalName());    securityPlugins.add(object);  }  return instance;}  }
class C{  public static void createOrClearDestinationFolder(String path){  File fpath=new File(path);  fpath.mkdirs();  deleteDirectoryContents(path,false);}  }
class C{  public JRadioButton(String text,Icon icon){  this(text,icon,false);}  }
class C{  @Override public void finalize(){  listeners.clear();  backend.clear();}  }
class C{  private void indexModifications(IndexBuffer buffer,Entry oldEntry,Entry newEntry,EntryID entryID,List<Modification> mods) throws StorageRuntimeException, DirectoryException {  for (  AttributeIndex index : attrIndexMap.values()) {    if (isAttributeModified(index.getAttributeType(),mods)) {      index.modifyEntry(buffer,entryID,oldEntry,newEntry);    }  }  for (  VLVIndex vlvIndex : vlvIndexMap.values()) {    vlvIndex.modifyEntry(buffer,entryID,oldEntry,newEntry,mods);  }}  }
class C{  public Set searchUsers(String wildcard,int level) throws AMException, SSOException {  return searchUsers(wildcard,null,level);}  }
class C{  public RandomAccessFileOutputStream(final RandomAccessFile target){  super();  this.targetFile=target;}  }
class C{  public Decision createDecision(Element elem) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.DECISION,elem);  if (object == null) {    return new DecisionImpl(elem);  } else {    return (Decision)object;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  boolean specified;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(0);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  specified=domesticAttr.getSpecified();  assertTrue("domesticSpecified",specified);}  }
class C{  public LibPackages(LibPadstacks p_padstack_list){  this.padstack_list=p_padstack_list;}  }
class C{  public String toString(final String sep){  if (isEmpty()) {    return StringUtilities.EMPTY;  } else {    final StringBuilder buffer=new StringBuilder();    buffer.append(head);    for (ImmutableList<A> l=tail; l.nonEmpty(); l=l.tail) {      buffer.append(sep);      buffer.append(l.head);    }    return buffer.toString();  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("FilterDef[");  sb.append("filterName=");  sb.append(this.filterName);  sb.append(", filterClass=");  sb.append(this.filterClass);  sb.append("]");  return (sb.toString());}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNumber copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfNumber)super.copyTo(document,allowDuplicating);}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  protected int checkHorizontalKey(int key,String message){  if ((key == LEFT) || (key == CENTER) || (key == RIGHT)|| (key == LEADING)|| (key == TRAILING)) {    return key;  } else {    throw new IllegalArgumentException(message);  }}  }
class C{  public FREE_MEM(){  this("");}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String fixPropertyName(String name){  final char[] charArray=name.toCharArray();  for (int i=0; i < charArray.length; i++) {    if (charArray[i] == '_') {      charArray[i + 1]=Character.toUpperCase(charArray[i + 1]);    }  }  name=new String(charArray).replaceAll("_","");  return name;}  }
class C{  public final boolean isTraceEnabled(){  return false;}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {}  }
class C{  protected String layoutCL(JLabel label,FontMetrics fontMetrics,String text,Icon icon,Rectangle viewR,Rectangle iconR,Rectangle textR){  return SwingUtilities.layoutCompoundLabel((JComponent)label,fontMetrics,text,icon,label.getVerticalAlignment(),label.getHorizontalAlignment(),label.getVerticalTextPosition(),label.getHorizontalTextPosition(),viewR,iconR,textR,label.getIconTextGap());}  }
class C{  public FrameBodyTRSO(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe,final int maxResultSize){  if (binaryData == null || binaryData.length == 0) {    return binaryData;  }  final Base64 b64=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe);  final long len=b64.getEncodedLength(binaryData);  if (len > maxResultSize) {    throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maximum size of "+ maxResultSize);  }  return b64.encode(binaryData);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  protected String preReadModify(String bindDn,String bindPassword,String ldif,String attributes) throws Exception {  File tempFile=getTemporaryLdifFile();  TestCaseUtils.writeFile(tempFile,ldif);  ArrayList<String> argList=new ArrayList<>(20);  argList.add("-h");  argList.add("127.0.0.1");  argList.add("-p");  argList.add(String.valueOf(TestCaseUtils.getServerLdapPort()));  argList.add("-D");  argList.add(bindDn);  argList.add("-w");  argList.add(bindPassword);  if (attributes != null) {    argList.add("--preReadAttributes");    argList.add(attributes);  }  argList.add("-f");  argList.add(tempFile.getAbsolutePath());  String[] args=new String[argList.size()];  oStream.reset();  int retVal=LDAPModify.mainModify(argList.toArray(args),false,oStream,oStream);  Assert.assertEquals(retVal,0,"Returned error: " + oStream);  return oStream.toString();}  }
class C{  public int size(){  expungeStaleEntries();  return reverseMap.size();}  }
class C{  public String toString(){  if (myToString == null) {    final StringBuilder result=new StringBuilder().append(this.getClass().getName()).append("(name=").append(getTypeName()).append(",rowType=").append(rowType.toString()).append(",indexNames=(");    String sep="";    for (    String index : indexNames) {      result.append(sep).append(index);      sep=",";    }    result.append("))");    myToString=result.toString();  }  return myToString;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesType createActivationLimitUsagesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitUsagesTypeImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.SingleSignOnServiceElement createSingleSignOnServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.SingleSignOnServiceElementImpl();}  }
class C{  private void completeIfNecessary(final PromiseImpl<QueryResponse,ResourceException> handler){  if (pendingResourceCount == 0 && pendingResult != null && !resultSent) {    if (pendingResult == SUCCESS) {      handler.handleResult(newQueryResponse(cookie));    } else {      handler.handleException(pendingResult);    }    resultSent=true;  }}  }
class C{  protected void updateStats(long requestTime,long clusterTime){synchronized (this) {    lastSendTime=System.currentTimeMillis();    totalSendTime+=lastSendTime - clusterTime;    totalRequestTime+=lastSendTime - requestTime;    nrOfRequests++;  }  if (log.isInfoEnabled()) {    if ((nrOfRequests % 100) == 0) {      log.info(sm.getString("ReplicationValve.stats",new Object[]{Long.valueOf(totalRequestTime / nrOfRequests),Long.valueOf(totalSendTime / nrOfRequests),Long.valueOf(nrOfRequests),Long.valueOf(nrOfSendRequests),Long.valueOf(nrOfCrossContextSendRequests),Long.valueOf(nrOfFilterRequests),Long.valueOf(totalRequestTime),Long.valueOf(totalSendTime)}));    }  }}  }
class C{  public X509Certificate generate(PrivateKey key,String provider) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,provider,null);}  }
class C{  public long toEpochSecond(){  return transition.toEpochSecond(offsetBefore);}  }
class C{  public ReversedLinesFileReader(final File file,final int blockSize,final Charset encoding) throws IOException {  this.blockSize=blockSize;  this.encoding=encoding;  randomAccessFile=new RandomAccessFile(file,"r");  totalByteLength=randomAccessFile.length();  int lastBlockLength=(int)(totalByteLength % blockSize);  if (lastBlockLength > 0) {    totalBlockCount=totalByteLength / blockSize + 1;  } else {    totalBlockCount=totalByteLength / blockSize;    if (totalByteLength > 0) {      lastBlockLength=blockSize;    }  }  currentFilePart=new FilePart(totalBlockCount,lastBlockLength,null);  Charset charset=Charsets.toCharset(encoding);  CharsetEncoder charsetEncoder=charset.newEncoder();  float maxBytesPerChar=charsetEncoder.maxBytesPerChar();  if (maxBytesPerChar == 1f) {    byteDecrement=1;  } else   if (charset == Charset.forName("UTF-8")) {    byteDecrement=1;  } else   if (charset == Charset.forName("Shift_JIS")) {    byteDecrement=1;  } else   if (charset == Charset.forName("UTF-16BE") || charset == Charset.forName("UTF-16LE")) {    byteDecrement=2;  } else   if (charset == Charset.forName("UTF-16")) {    throw new UnsupportedEncodingException("For UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)");  } else {    throw new UnsupportedEncodingException("Encoding " + encoding + " is not supported yet (feel free to submit a patch)");  }  newLineSequences=new byte[][]{"\r\n".getBytes(encoding),"\n".getBytes(encoding),"\r".getBytes(encoding)};  avoidNewlineSplitBufferSize=newLineSequences[0].length;}  }
class C{  protected void installKeyboardActions(){  LazyActionMap.installLazyActionMap(table,BasicTableUI.class,"Table.actionMap");  InputMap inputMap=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(table,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,inputMap);}  }
class C{  public static void message(CommandManager mgr,String msg){  dumpToOutput(mgr,msg,null);  mgr.getDebugger().message(msg);}  }
class C{  public void endPreserving() throws org.xml.sax.SAXException {  m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();}  }
class C{  public void sessionDestroyed(String ssoId,Session session){  if (!getState().isAvailable()) {    return;  }  if (((session.getMaxInactiveInterval() > 0) && (session.getIdleTimeInternal() >= session.getMaxInactiveInterval() * 1000)) || (!session.getManager().getContext().getState().isAvailable())) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.sessionTimeout",ssoId,session));    }    removeSession(ssoId,session);  } else {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.sessionLogout",ssoId,session));    }    removeSession(ssoId,session);    if (cache.containsKey(ssoId)) {      deregister(ssoId);    }  }}  }
class C{  protected final void fireServiceAdded(BeanContextServiceAvailableEvent bcssae){  Object[] copy;synchronized (bcsListeners) {    copy=bcsListeners.toArray();  }  for (int i=0; i < copy.length; i++) {    ((BeanContextServicesListener)copy[i]).serviceAvailable(bcssae);  }}  }
class C{  public String encodeURL(HttpServletResponse res,String url,String cookieName,Session session){  String httpEncodeUrl=res.encodeURL(url);  return encodeSessionURL(httpEncodeUrl,SessionUtils.QUERY,true,cookieName,session);}  }
class C{  public void remove(Component component){  if (component == leftComponent) {    leftComponent=null;  } else   if (component == rightComponent) {    rightComponent=null;  }  super.remove(component);  revalidate();  repaint();}  }
class C{  public Action createAction(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ACTION,xml);  if (obj == null) {    return new ActionImpl(xml);  } else {    return (Action)obj;  }}  }
class C{  static public XObject create(Object val){  return XObjectFactory.create(val);}  }
class C{  public void jspError(Mark where,String errCode,String... args) throws JasperException {  dispatch(where,errCode,args,null);}  }
class C{  public IsMemberOfVirtualAttributeProvider(){  super();}  }
class C{  public DTMAxisIterator reset(){  m_ancestorsPos=m_ancestors.size() - 1;  _currentNode=(m_ancestorsPos >= 0) ? m_ancestors.elementAt(m_ancestorsPos) : DTM.NULL;  return resetPosition();}  }
class C{  public static String toHexString(long v){  return IntegralToString.longToHexString(v);}  }
class C{  public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public SendNotificationException(Throwable t){  super(t.getMessage());}  }
class C{  public static QueryExp eq(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(EQ,v1,v2);}  }
class C{  public void testManyConnectionsUsingOneThread(){  try {    int maxConnections=getConnectionNum();    openConnections(maxConnections);    assertEquals("Incorrect number of created connections",maxConnections,vc.size());  } catch (  Exception e) {    fail("Unexpected Exception " + e.toString());  }}  }
class C{  public void decode(InputStream stream) throws KeyException, IOException {}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue04.class,args);}  }
class C{  @Override public final int hashCode(){  return hashCode;}  }
class C{  protected void invalidate(boolean first){  if (!isValid()) {    if (canBeValid && !first) {      canBeValid=false;    }    return;  }  isValid=false;  canBeValid=first;  if (children != null) {    for (    ElementInfo child : children) {      child.invalidate(false);    }    children=null;  }}  }
class C{  private PlaPointInt reposition_via(BrdAbitVia p_via,int p_first_trace_half_width,int p_first_trace_cl_class,int p_first_trace_layer,ExpandCostFactor p_first_trace_costs,PlaPoint p_first_trace_from_corner,int p_second_trace_half_width,int p_second_trace_cl_class,int p_second_trace_layer,ExpandCostFactor p_second_trace_costs,PlaPoint p_second_trace_from_corner){  PlaPointInt via_location=p_via.center_get();  PlaPointInt first_trace_from_corner_int=p_first_trace_from_corner.round();  PlaPointInt second_trace_from_corner_int=p_second_trace_from_corner.round();  PlaVectorInt first_delta=first_trace_from_corner_int.difference_by(via_location);  PlaVectorInt second_delta=second_trace_from_corner_int.difference_by(via_location);  double scalar_product=first_delta.scalar_product(second_delta);  PlaPointFloat via_location_float=via_location.to_float();  PlaPointFloat first_trace_from_corner_float=p_first_trace_from_corner.to_float();  PlaPointFloat second_trace_from_corner_float=p_second_trace_from_corner.to_float();  double first_trace_from_corner_distance=via_location_float.distance(first_trace_from_corner_float);  double second_trace_from_corner_distance=via_location_float.distance(second_trace_from_corner_float);  if (via_location.side_of(p_first_trace_from_corner,p_second_trace_from_corner) == PlaSide.COLLINEAR && scalar_product > 0) {    if (second_trace_from_corner_distance < first_trace_from_corner_distance)     return reposition_via(p_via,second_trace_from_corner_int,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class); else     return reposition_via(p_via,first_trace_from_corner_int,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class);  }  PlaPointInt result=null;  double curr_weighted_distance_1=via_location_float.distance_weighted(first_trace_from_corner_float,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);  double curr_weighted_distance_2=via_location_float.distance_weighted(first_trace_from_corner_float,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);  if (curr_weighted_distance_1 > curr_weighted_distance_2) {    result=reposition_via(p_via,first_trace_from_corner_int,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class);    if (result != null)     return result;  }  curr_weighted_distance_1=via_location_float.distance_weighted(second_trace_from_corner_float,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);  curr_weighted_distance_2=via_location_float.distance_weighted(second_trace_from_corner_float,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);  if (curr_weighted_distance_1 > curr_weighted_distance_2) {    result=reposition_via(p_via,second_trace_from_corner_int,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class);    if (result != null)     return result;  }  if (scalar_product > 0) {    PlaPointInt to_point_1;    PlaPointInt to_point_2;    PlaPointFloat float_to_point_1;    PlaPointFloat float_to_point_2;    if (first_trace_from_corner_distance < second_trace_from_corner_distance) {      to_point_1=first_trace_from_corner_int;      float_to_point_1=first_trace_from_corner_float;      float_to_point_2=via_location_float.change_length(second_trace_from_corner_float,first_trace_from_corner_distance);      to_point_2=float_to_point_2.round();    } else {      float_to_point_1=via_location_float.change_length(first_trace_from_corner_float,second_trace_from_corner_distance);      to_point_1=float_to_point_1.round();      to_point_2=second_trace_from_corner_int;      float_to_point_2=second_trace_from_corner_float;    }    curr_weighted_distance_1=float_to_point_1.distance_weighted(float_to_point_2,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);    curr_weighted_distance_2=float_to_point_1.distance_weighted(float_to_point_2,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);    if (curr_weighted_distance_1 > curr_weighted_distance_2) {      result=reposition_via(p_via,to_point_1,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class);      if (result == null) {        result=reposition_via(p_via,to_point_2,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class);      }    } else {      result=reposition_via(p_via,to_point_2,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class);      if (result == null) {        result=reposition_via(p_via,to_point_1,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class);      }    }    if (result != null)     return result;  }  if (!first_delta.is_orthogonal()) {    PlaPointFloat float_check_location=new PlaPointFloat(via_location_float.v_x,first_trace_from_corner_float.v_y);    curr_weighted_distance_1=via_location_float.distance_weighted(first_trace_from_corner_float,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);    curr_weighted_distance_2=via_location_float.distance_weighted(float_check_location,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);    double curr_weighted_distance_3=float_check_location.distance_weighted(first_trace_from_corner_float,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);    if (curr_weighted_distance_1 > curr_weighted_distance_2 + curr_weighted_distance_3) {      PlaPointInt check_location=float_check_location.round();      boolean check_ok=reposition_via(p_via,check_location,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class,first_trace_from_corner_int,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class);      if (check_ok)       return check_location;    }    float_check_location=new PlaPointFloat(first_trace_from_corner_float.v_x,via_location_float.v_y);    curr_weighted_distance_2=via_location_float.distance_weighted(float_check_location,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);    curr_weighted_distance_3=float_check_location.distance_weighted(first_trace_from_corner_float,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);    if (curr_weighted_distance_1 > curr_weighted_distance_2 + curr_weighted_distance_3) {      PlaPointInt check_location=float_check_location.round();      boolean check_ok=reposition_via(p_via,check_location,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class,first_trace_from_corner_int,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class);      if (check_ok)       return check_location;    }  }  if (!second_delta.is_orthogonal()) {    PlaPointFloat float_check_location=new PlaPointFloat(via_location_float.v_x,second_trace_from_corner_float.v_y);    curr_weighted_distance_1=via_location_float.distance_weighted(second_trace_from_corner_float,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);    curr_weighted_distance_2=via_location_float.distance_weighted(float_check_location,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);    double curr_weighted_distance_3=float_check_location.distance_weighted(second_trace_from_corner_float,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);    if (curr_weighted_distance_1 > curr_weighted_distance_2 + curr_weighted_distance_3) {      PlaPointInt check_location=float_check_location.round();      boolean check_ok=reposition_via(p_via,check_location,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class,second_trace_from_corner_int,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class);      if (check_ok)       return check_location;    }    float_check_location=new PlaPointFloat(second_trace_from_corner_float.v_x,via_location_float.v_y);    curr_weighted_distance_2=via_location_float.distance_weighted(float_check_location,p_first_trace_costs.horizontal,p_first_trace_costs.vertical);    curr_weighted_distance_3=float_check_location.distance_weighted(second_trace_from_corner_float,p_second_trace_costs.horizontal,p_second_trace_costs.vertical);    if (curr_weighted_distance_1 > curr_weighted_distance_2 + curr_weighted_distance_3) {      PlaPointInt check_location=float_check_location.round();      boolean check_ok=reposition_via(p_via,check_location,p_first_trace_half_width,p_first_trace_layer,p_first_trace_cl_class,second_trace_from_corner_int,p_second_trace_half_width,p_second_trace_layer,p_second_trace_cl_class);      if (check_ok)       return check_location;    }  }  return null;}  }
class C{  private static void recycleMediumWeightPopup(MediumWeightPopup popup){synchronized (MediumWeightPopup.class) {    List<MediumWeightPopup> mediumPopupCache=getMediumWeightPopupCache();    if (mediumPopupCache.size() < MAX_CACHE_SIZE) {      mediumPopupCache.add(popup);    }  }}  }
class C{  public void addVetoableChangeListener(VetoableChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof VetoableChangeListenerProxy) {    VetoableChangeListenerProxy proxy=(VetoableChangeListenerProxy)listener;    addVetoableChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.add(null,listener);  }}  }
class C{  public FramedProtocolAttribute(byte[] octets){  super(octets);  framing=OctetUtils.toIntVal(octets);}  }
class C{  public static ValueExp value(float val){  return new NumericValueExp((double)val);}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  protected static void loadApplicationFilterAnnotations(Context context){  FilterDef[] filterDefs=context.findFilterDefs();  for (  FilterDef filterDef : filterDefs) {    Class<?> classClass=Introspection.loadClass(context,filterDef.getFilterClass());    if (classClass == null) {      continue;    }    loadClassAnnotation(context,classClass);    loadFieldsAnnotation(context,classClass);    loadMethodsAnnotation(context,classClass);  }}  }
class C{  public static String convertToString(InputStream input) throws IOException {  try {    if (input == null) {      throw new IOException("Input Stream Cannot be NULL");    }    StringBuilder sb1=new StringBuilder();    String line;    try {      BufferedReader r1=new BufferedReader(new InputStreamReader(input,"UTF-8"));      while ((line=r1.readLine()) != null) {        sb1.append(line);      }    }  finally {      input.close();    }    return sb1.toString();  } catch (  IOException e) {    throw new JKException(e);  }}  }
class C{  public static boolean isRunning(){  return directoryServer.isRunning;}  }
class C{  protected void iconifyFrame(JInternalFrame f){  BasicLookAndFeel.playSound(frame,"InternalFrame.minimizeSound");  getDesktopManager().iconifyFrame(f);}  }
class C{  public int hashCode(){  int hash=0;  for (  AnnotationMember element : elements) {    hash+=element.hashCode();  }  return hash;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AdviceType createAdviceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl();}  }
class C{  private String toUIString(final SearchScope scope){switch (scope.asEnum()) {case BASE_OBJECT:    return INFO_CTRL_PANEL_VLV_INDEX_BASE_OBJECT_LABEL.get().toString();case SINGLE_LEVEL:  return INFO_CTRL_PANEL_VLV_INDEX_SINGLE_LEVEL_LABEL.get().toString();case SUBORDINATES:return INFO_CTRL_PANEL_VLV_INDEX_SUBORDINATE_SUBTREE_LABEL.get().toString();case WHOLE_SUBTREE:return INFO_CTRL_PANEL_VLV_INDEX_WHOLE_SUBTREE_LABEL.get().toString();default :throw new IllegalArgumentException("Unknown scope: " + scope);}}  }
class C{  public void testClearBitTopNegative(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=-1;  int number=63;  byte rBytes[]={-1,127,-2,127,-57,-101,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void testSHA256(){  Digest oldDigest=new SHA256Digest();  Digest newDigest=new OpenSSLDigest.SHA256();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public Door(final Material type,BlockFace face,boolean isOpen){  super(type);  setTopHalf(false);  setFacingDirection(face);  setOpen(isOpen);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns03.class,args);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private String updateMethodName(ClassNode methodOwner,MethodNode mn){  while (!methodOwner.name.equals("java/lang/Object")) {    MethodNode method=getMethod(methodOwner,mn.name,mn.desc);    if (method != null) {      String renamed=getRefactoredName(method);      if (!renamed.equals(mn.name)) {        return renamed;      }    }    methodOwner=getClassNode(methodOwner.superName);  }  return mn.name;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfName copyTo(PdfDocument document){  return (PdfName)super.copyTo(document,true);}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(BarApp.class);  DefaultProfileUtil.addDefaultProfile(app);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  public Boolean isMustUnderstand(){  return mustUnderstand;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public Vector normalize(){  float l=this.length();  float x=vals[I1] / l;  float y=vals[I2] / l;  float z=vals[I3] / l;  return new Vector(x,y,z);}  }
class C{  public FrameBodyTRCK(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  private void updateChildClippingAndBackground(StackScrollState.ViewState state,float realHeight,float clipHeight,float backgroundHeight){  if (realHeight > clipHeight) {    state.topOverLap=(int)Math.floor((realHeight - clipHeight) / state.scale);  } else {    state.topOverLap=0;  }  if (realHeight > backgroundHeight) {    state.clipTopAmount=(int)Math.floor((realHeight - backgroundHeight) / state.scale);  } else {    state.clipTopAmount=0;  }}  }
class C{  public AuthenticatorAppRegistrationURIBuilder(AMIdentity id,String secretHex,int codeLength,String issuer){  Reject.ifNull(id,"id cannot be null");  Reject.ifNull(secretHex,"secretHex cannot be null");  Reject.ifTrue(StringUtils.isBlank(issuer),"issuer cannot be empty");  Reject.ifTrue((codeLength < MIN_CODE_LENGTH),"code length must be " + MIN_CODE_LENGTH + " or greater");  if (secretHex.length() == 0) {    throw new IllegalArgumentException("secretHex cannot be an empty String.");  }  this.issuer=issuer;  this.id=id;  this.secretHex=secretHex;  this.codeLength=codeLength;}  }
class C{  private AttrSet combineOCs(CreationTemplate ct,AttrSet aSet){  Attr attr=aSet.getAttribute("objectclass");  Attr defAttr=ct.getAttribute("objectclass");  Set addOCs=(attr != null) ? CommonUtils.stringArrayToSet(attr.getStringValues()) : new HashSet();  Set ctOCs=CommonUtils.stringArrayToSet(defAttr.getStringValues());  Set finalOCs=CommonUtils.combineOCs(addOCs,ctOCs);  aSet.remove("objectclass");  Attr finalOCAttr=new Attr("objectclass",(String[])finalOCs.toArray(new String[finalOCs.size()]));  aSet.add(finalOCAttr);  return aSet;}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean isDataModified(){  if (this.deletedRecords.size() > 0) {    return true;  }  for (  final JKTableRecord rec : this.records) {    if (rec.getStatus() == RecordStatus.MODIFIED) {      return true;    }  }  return false;}  }
class C{  public SlowQueryReport(){  super();}  }
class C{  private EnumEvalResult evalURL(AciEvalContext evalCtx){  EnumEvalResult matched=EnumEvalResult.FALSE;  AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attrStr);  List<Attribute> attrs=evalCtx.getResourceEntry().getAllAttributes(attrType);  for (  Attribute a : attrs) {    for (    ByteString v : a) {      LDAPURL url;      try {        url=LDAPURL.decode(v.toString(),true);      } catch (      LocalizedIllegalArgumentException|DirectoryException e) {        break;      }      matched=UserDN.evalURL(evalCtx,url);      if (matched != EnumEvalResult.FALSE) {        break;      }    }    if (matched == EnumEvalResult.TRUE) {      break;    }  }  return matched.getRet(type,matched == EnumEvalResult.ERR);}  }
class C{  private static Optional<Investment> invest(final ZonkyApi api,final int loanId,final int amount,final int balance){  final Loan l=api.getLoan(loanId);  if (amount < InvestmentStrategy.MINIMAL_INVESTMENT_ALLOWED) {    Investor.LOGGER.info("Not investing into loan '{}', since investment ({} CZK) less than bare minimum.",l,amount);    return Optional.empty();  } else   if (amount > balance) {    Investor.LOGGER.info("Not investing into loan '{}', {} CZK to invest is more than {} CZK balance.",l,amount,balance);    return Optional.empty();  } else   if (amount > l.getRemainingInvestment()) {    Investor.LOGGER.info("Not investing into loan '{}', {} CZK to invest is more than {} CZK loan remaining.",l,amount,l.getRemainingInvestment());    return Optional.empty();  }  final Investment investment=new Investment(l,amount);  if (api instanceof InvestingZonkyApi) {    ((InvestingZonkyApi)api).invest(investment);    Investor.LOGGER.info("Invested {} CZK into loan {}.",investment.getAmount(),investment.getLoanId());  } else {    Investor.LOGGER.info("Dry run. Otherwise would have invested {} CZK into loan {}.",investment.getAmount(),investment.getLoanId());  }  return Optional.of(investment);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  String entityName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("entityNodeNotNull",entityNode);  entityName=entityNode.getNodeName();  assertEquals("entityNodeName","ent1",entityName);}  }
class C{  private void handleSaveException(Subject subject,String realm,String uuid,Exception e) throws EntitlementException {  OpenSSOLogger.log(ERROR,Level.INFO,FAILED_SAVE_RESOURCE_TYPE,new String[]{realm,uuid,e.getMessage()},subject);  throw new EntitlementException(MODIFY_RESOURCE_TYPE_FAIL,e,uuid);}  }
class C{  public static char[] convertFromUtf32ToCharArray(int codePoint){  if (codePoint < 0x10000) {    return new char[]{(char)codePoint};  }  codePoint-=0x10000;  return new char[]{(char)(codePoint / 0x400 + 0xd800),(char)(codePoint % 0x400 + 0xdc00)};}  }
class C{  public void close() throws IOException {  in.close();}  }
class C{  private byte[] createSegments(int length,boolean quitStream){  logger.finest("Create Segments for length:" + length + ":QuitStream:"+ quitStream);  if (length == 0) {    byte[] result=new byte[1];    result[0]=(byte)0x00;    return result;  }  byte[] result=new byte[length / OggPageHeader.MAXIMUM_SEGMENT_SIZE + ((length % OggPageHeader.MAXIMUM_SEGMENT_SIZE == 0 && !quitStream) ? 0 : 1)];  int i=0;  for (; i < result.length - 1; i++) {    result[i]=(byte)0xFF;  }  result[result.length - 1]=(byte)(length - (i * OggPageHeader.MAXIMUM_SEGMENT_SIZE));  return result;}  }
class C{  public static ApiAnnotationAssert assertThat(Class value){  return new ApiAnnotationAssert(value);}  }
class C{  public void addAttachment(String attachmentText) throws MessagingException {  MimeBodyPart attachment=new MimeBodyPart();  attachment.setText(attachmentText);  attachments.add(attachment);}  }
class C{  boolean isValid(){  if (!ss.isValid()) {    return false;  }  if (smsEntry.isValid() && smsEntry.isDirty()) {    smsEntry.refresh();  }  return (smsEntry.isValid());}  }
class C{  public boolean isWildcard(){  return this.addressType == WILD_CARD;}  }
class C{  public NameIDPolicy createNameIDPolicy(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEID_POLICY,value);  if (obj == null) {    return new NameIDPolicyImpl(value);  } else {    return (NameIDPolicy)obj;  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ResourceIDElement createResourceIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ResourceIDElementImpl();}  }
class C{  private <T extends AuthenticationPolicyCfg>boolean isAuthenticationPolicyConfigurationAcceptable(T policyConfiguration,List<LocalizableMessage> unacceptableReasons){  if (policyConfiguration.dn().equals(DirectoryServer.getDefaultPasswordPolicyDN()) && !(policyConfiguration instanceof PasswordPolicyCfg)) {    unacceptableReasons.add(ERR_CONFIG_PWPOLICY_DEFAULT_POLICY_IS_WRONG_TYPE.get(policyConfiguration.dn()));    return false;  }  String className=policyConfiguration.getJavaClass();  AuthenticationPolicyCfgDefn d=AuthenticationPolicyCfgDefn.getInstance();  ClassPropertyDefinition pd=d.getJavaClassPropertyDefinition();  try {    Class<?> theClass=pd.loadClass(className,AuthenticationPolicyFactory.class);    AuthenticationPolicyFactory<T> factory=(AuthenticationPolicyFactory<T>)theClass.newInstance();    factory.setServerContext(serverContext);    return factory.isConfigurationAcceptable(policyConfiguration,unacceptableReasons);  } catch (  Exception e) {    logger.traceException(e);    unacceptableReasons.add(ERR_CONFIG_PWPOLICY_INVALID_POLICY_CONFIG.get(policyConfiguration.dn(),stackTraceToSingleLineString(e)));    return false;  }}  }
class C{  public Message resendRequest(String returnToURL,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws InteractionRedirectException, InteractionException, SOAPBindingException, SOAPFaultException {  return resendRequest(returnToURL,httpRequest,httpResponse,null);}  }
class C{  protected boolean bottom(TextView widget,Spannable buffer){  return false;}  }
class C{  public ParserConfigurationException(String msg){  super(msg);}  }
class C{  public Observable<Void> deleteAllProductsObservable(){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  deleteAllProducts(resultHandler.toHandler());  return resultHandler;}  }
class C{  public SearchResultReference(List<String> referralURLs){  if (referralURLs == null) {    this.referralURLs=new ArrayList<>();  } else {    this.referralURLs=referralURLs;  }  this.controls=new ArrayList<>(0);}  }
class C{  public void testIsSearchable(){  try {    assertTrue(rsmd.isSearchable(1));    assertTrue(rsmd.isSearchable(2));    assertTrue(rsmd.isSearchable(3));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isReadOnly" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isSearchable(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  private int yearToEpochMonth(int year){  return (year * 12) - hijrahStartEpochMonth;}  }
class C{  public String transform(String password){  if (AuthnSvcUtils.debug.messageEnabled()) {    AuthnSvcUtils.debug.message("TruncationTransform.transform");  }  if (password == null) {    return null;  }  if (parameters == null || parameters.isEmpty()) {    if (AuthnSvcUtils.debug.warningEnabled()) {      AuthnSvcUtils.debug.warning("TruncationTransform.transform: " + "no parameter found");    }    return password;  }  for (Iterator iter=parameters.iterator(); iter.hasNext(); ) {    Parameter parameter=(Parameter)iter.next();    if (parameter.getName().equals(Parameter.NAME_LENGTH)) {      try {        int length=Integer.parseInt(parameter.getValue());        if (length < password.length() && length >= 0) {          return password.substring(0,length);        } else {          if (AuthnSvcUtils.debug.messageEnabled()) {            AuthnSvcUtils.debug.message("TruncationTransform.transform: parameter " + "length value isn't less than password length");          }        }      } catch (      Exception ex) {        if (AuthnSvcUtils.debug.warningEnabled()) {          AuthnSvcUtils.debug.warning("TruncationTransform.transform: " + "parameter value is not integer",ex);        }      }      return password;    }  }  if (AuthnSvcUtils.debug.warningEnabled()) {    AuthnSvcUtils.debug.warning("TruncationTransform.transform: " + "parameter 'name' not found");  }  return password;}  }
class C{  @Override public boolean isSecure(){  boolean secure=false;  if (tlsActiveProvider != null) {    secure=tlsActiveProvider.isSecure();  }  if (!secure && saslActiveProvider != null) {    secure=saslActiveProvider.isSecure();  }  return secure;}  }
class C{  private static boolean decodeIpv4Suffix(String input,int pos,int limit,byte[] address,int addressOffset){  int b=addressOffset;  for (int i=pos; i < limit; ) {    if (b == address.length)     return false;    if (b != addressOffset) {      if (input.charAt(i) != '.')       return false;      i++;    }    int value=0;    int groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      if (c < '0' || c > '9')       break;      if (value == 0 && groupOffset != i)       return false;      value=(value * 10) + c - '0';      if (value > 255)       return false;    }    int groupLength=i - groupOffset;    if (groupLength == 0)     return false;    address[b++]=(byte)value;  }  if (b != addressOffset + 4)   return false;  return true;}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  private static Object maskNull(Object key){  return (key == null) ? NULL_KEY : key;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechildnode.class,args);}  }
class C{  @Parameters({"parent-realms"}) @BeforeSuite(groups={"api"}) public void suiteSetup(String realms) throws SSOException, SMSException {  Object[] params={realms};  entering("suiteSetup",params);  StringTokenizer st=new StringTokenizer(realms,",");  while (st.hasMoreElements()) {    String realm=st.nextToken().trim();    createSubRealm(getAdminSSOToken(),realm);  }  exiting("suiteSetup");}  }
class C{  public void addRelationType(RelationType relationTypeObj) throws IllegalArgumentException, InvalidRelationTypeException {  if (relationTypeObj == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"addRelationType");  List<RoleInfo> roleInfoList=relationTypeObj.getRoleInfos();  if (roleInfoList == null) {    String excMsg="No role info provided.";    throw new InvalidRelationTypeException(excMsg);  }  RoleInfo[] roleInfoArray=new RoleInfo[roleInfoList.size()];  int i=0;  for (  RoleInfo currRoleInfo : roleInfoList) {    roleInfoArray[i]=currRoleInfo;    i++;  }  RelationTypeSupport.checkRoleInfos(roleInfoArray);  addRelationTypeInt(relationTypeObj);  RELATION_LOGGER.exiting(RelationService.class.getName(),"addRelationType");  return;}  }
class C{  public static Map toLowerCaseKeys(Map attrs){  if (attrs != null) {    AMHashMap lowerCaseMap=new AMHashMap(isBinary(attrs));    for (    Object key : attrs.keySet()) {      lowerCaseMap.put(key == null ? null : key.toString().toLowerCase(),attrs.get(key));    }    return lowerCaseMap;  }  return attrs;}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  private boolean createFolder(String debugDirectory){  File dir=new File(debugDirectory);  if (dir.exists()) {    Date previousRecordDate;    try {      JsonValue infoJson=JsonValueBuilder.toJsonValue(IOUtils.getFileContent(debugDirectory + File.separator + RecordConstants.INFO_FILE_NAME));      previousRecordDate=recordReport.getDateFromInfoReport(infoJson);    } catch (    IOException|ParseException|JsonValueException e) {      debug.error("Can't extract starting date from previous record. We will use the current date instead",e);      previousRecordDate=newDate();    }    SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_UID);    dir.renameTo(new File(debugDirectory + "_" + dateFormat.format(previousRecordDate)));  }  return dir.mkdirs();}  }
class C{  public boolean isAllowDelete(){  return this.allowDelete || isEditable();}  }
class C{  public InflaterInputStream(InputStream in,Inflater inf,int size){  super(in);  if (in == null || inf == null) {    throw new NullPointerException();  } else   if (size <= 0) {    throw new IllegalArgumentException("buffer size <= 0");  }  this.inf=inf;  buf=new byte[size];}  }
class C{  public synchronized int read(byte b[],int off,int len){  if (b == null) {    throw new NullPointerException();  } else   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  }  if (pos >= count) {    return -1;  }  if (pos + len > count) {    len=count - pos;  }  if (len <= 0) {    return 0;  }  String s=buffer;  int cnt=len;  while (--cnt >= 0) {    b[off++]=(byte)s.charAt(pos++);  }  return len;}  }
class C{  public static boolean deleteDir(File dir,boolean logFailure){  String files[]=dir.list();  if (files == null) {    files=new String[0];  }  for (int i=0; i < files.length; i++) {    File file=new File(dir,files[i]);    if (file.isDirectory()) {      deleteDir(file,logFailure);    } else {      file.delete();    }  }  boolean result;  if (dir.exists()) {    result=dir.delete();  } else {    result=true;  }  if (logFailure && !result) {    log.error(sm.getString("expandWar.deleteFailed",dir.getAbsolutePath()));  }  return result;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.IDPEntryElement createIDPEntryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPEntryElementImpl();}  }
class C{  public void readInteger() throws IOException {  if (tag != ASN1Constants.TAG_INTEGER) {    throw expected("integer");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 integer at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    byte firstByte=buffer[offset - length];    byte secondByte=(byte)(buffer[offset - length + 1] & 0x80);    if (firstByte == 0 && secondByte == 0 || firstByte == (byte)0xFF && secondByte == (byte)0x80) {      throw new ASN1Exception("Wrong content for ASN.1 integer at [" + (offset - length) + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  @Override public void removeUserRuleItem(String item){  final Set<String> stringSet=sharedPreferences.getStringSet(KEY_USER_RULES,new HashSet<String>());  stringSet.remove(item);  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.remove(KEY_USER_RULES);  editor.putStringSet(KEY_USER_RULES,stringSet);  editor.commit();}  }
class C{  public int indexAtLocation(int x,int y){  if (ui != null) {    return ((TabbedPaneUI)ui).tabForCoordinate(this,x,y);  }  return -1;}  }
class C{  public Subpath(Point startPoint){  this((float)startPoint.getX(),(float)startPoint.getY());}  }
class C{  protected boolean matches(String selector){  int sLast=selector.length();  if (sLast == 0) {    return false;  }  int thisLast=name.length();  int sCurrent=selector.lastIndexOf(' ');  int thisCurrent=name.lastIndexOf(' ');  if (sCurrent >= 0) {    sCurrent++;  }  if (thisCurrent >= 0) {    thisCurrent++;  }  if (!matches(selector,sCurrent,sLast,thisCurrent,thisLast)) {    return false;  }  while (sCurrent != -1) {    sLast=sCurrent - 1;    sCurrent=selector.lastIndexOf(' ',sLast - 1);    if (sCurrent >= 0) {      sCurrent++;    }    boolean match=false;    while (!match && thisCurrent != -1) {      thisLast=thisCurrent - 1;      thisCurrent=name.lastIndexOf(' ',thisLast - 1);      if (thisCurrent >= 0) {        thisCurrent++;      }      match=matches(selector,sCurrent,sLast,thisCurrent,thisLast);    }    if (!match) {      return false;    }  }  return true;}  }
class C{  public FIFOEntryCache(){  super();}  }
class C{  public static TargAttrFilters decode(EnumTargetOperator type,String expression) throws AciException {  Pattern fullPattern=Pattern.compile(keywordFullPattern);  Matcher matcher=fullPattern.matcher(expression);  if (!matcher.find()) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_EXPRESSION.get(expression);    throw new AciException(message);  }  String firstOp=matcher.group(firstOpPos);  String subExpression=matcher.group(restOfExpressionPos);  String opPattern="[,]{1}" + ZERO_OR_MORE_WHITESPACE + firstOp+ ZERO_OR_MORE_WHITESPACE+ EQUAL_SIGN+ ZERO_OR_MORE_WHITESPACE;  String[] temp=subExpression.split(opPattern);  if (temp.length > 1) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_OPS_MATCH.get(expression);    throw new AciException(message);  }  String[] filterLists=secondOp.split(subExpression,-1);  if (filterLists.length > 2) {    throw new AciException(WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_MAX_FILTER_LISTS.get(expression));  } else   if (filterLists.length == 1) {    String[] filterList2=secondOpSeparator.split(subExpression);    if (filterList2.length == 2) {      throw new AciException(WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_EXPRESSION.get(expression));    }    String rg=getReverseOp(firstOp) + "=";    if (subExpression.contains(rg)) {      throw new AciException(WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_EXPRESSION.get(expression));    }  }  filterLists[0]=filterLists[0].trim();  if (!filterLists[0].endsWith(")")) {    throw new AciException(WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_EXPRESSION.get(expression));  }  TargAttrFilterList firstFilterList=TargAttrFilterList.decode(getMask(firstOp),filterLists[0]);  TargAttrFilterList secondFilterList=null;  if (filterLists.length == 2) {    String filterList=filterLists[1].trim();    if (!filterList.startsWith("=")) {      throw new AciException(WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_EXPRESSION.get(expression));    }    String temp2=filterList.substring(1,filterList.length());    String secondOp=getReverseOp(firstOp);    secondFilterList=TargAttrFilterList.decode(getMask(secondOp),temp2);  }  return new TargAttrFilters(type,firstFilterList,secondFilterList);}  }
class C{  static public void assertEquals(String message,int expected,int actual){  assertEquals(message,new Integer(expected),new Integer(actual));}  }
class C{  public NewEncryptedID encrypt(Key recipientPublicKey,String dataEncAlgorithm,int dataEncStrength,String recipientEntityID) throws SAML2Exception {  Element el=EncManager.getEncInstance().encrypt(toXMLString(true,true),recipientPublicKey,dataEncAlgorithm,dataEncStrength,recipientEntityID,"NewEncryptedID");  return ProtocolFactory.getInstance().createNewEncryptedID(el);}  }
class C{  public RuntimeOperationsException(java.lang.RuntimeException e,String message){  super(message);  runtimeException=e;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    logger.info("shootme: got an ACK! ");    logger.info("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    logger.error("Unexpected exception",ex);    fail("unexpected exception");  }}  }
class C{  public AddOperation processAdd(ByteString rawEntryDN,List<RawAttribute> rawAttributes,List<Control> controls){  AddOperationBasis addOperation=new AddOperationBasis(this,nextOperationID(),nextMessageID(),controls,rawEntryDN,rawAttributes);  addOperation.setInternalOperation(true);  addOperation.run();  return addOperation;}  }
class C{  boolean isSubregion(){  return getRegion().isSubregion();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DigestValueElement createDigestValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DigestValueElementImpl();}  }
class C{  private void linkAccount(final String principalId,final NameID nameId) throws SAML2MetaException, AuthenticationException {  final String spEntityId=metaManager.getEntityByMetaAlias(metaAlias);  try {    NameIDInfo info=new NameIDInfo(spEntityId,entityName,nameId,SAML2Constants.SP_ROLE,false);    DEBUG.message("SAML2 :: Local User {} Linked to Federation Account - {}",principalId,nameId.getValue());    if (shouldPersistNameID(spEntityId)) {      AccountUtils.setAccountFederation(info,principalId);    }    principal=new SAML2Principal(principalId);  } catch (  SAML2Exception e) {    throw new AuthenticationException(BUNDLE_NAME,"localLinkError",new Object[0]);  }}  }
class C{  public byte readByte() throws IOException {  if (head == tail) {    head=0;    tail=input.read(buffer,head,bufSize);    if (tail == -1) {      throw new IOException("No more data is available");    }    if (notifier != null) {      notifier.noteBytesRead(tail);    }  }  return buffer[head++];}  }
class C{  public PlaSegmentFloat(PlaPointFloat p_a,PlaPointFloat p_b){  point_a=check_input(p_a);  point_b=check_input(p_b);  is_nan|=point_a.equals(point_b);}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingResponseType createNameIdentifierMappingResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingResponseTypeImpl();}  }
class C{  public ConfigException(LocalizableMessage message){  super(message.toString());  this.message=message;}  }
class C{  public void changed_area_join(PlaPointFloat p_point,int p_layer){  changed_area.join(p_point,p_layer);}  }
class C{  public boolean isRequired(){  return this.required;}  }
class C{  @SuppressWarnings("null") protected void deployDescriptor(ContextName cn,File contextXml){  DeployedApplication deployedApp=new DeployedApplication(cn.getName(),true);  long startTime=0;  if (log.isInfoEnabled()) {    startTime=System.currentTimeMillis();    log.info(sm.getString("hostConfig.deployDescriptor",contextXml.getAbsolutePath()));  }  Context context=null;  boolean isExternalWar=false;  boolean isExternal=false;  File expandedDocBase=null;  try (FileInputStream fis=new FileInputStream(contextXml)){synchronized (digesterLock) {      try {        context=(Context)digester.parse(fis);      } catch (      Exception e) {        log.error(sm.getString("hostConfig.deployDescriptor.error",contextXml.getAbsolutePath()),e);      } finally {        digester.reset();        if (context == null) {          context=new FailedContext();        }      }    }    Class<?> clazz=Class.forName(host.getConfigClass());    LifecycleListener listener=(LifecycleListener)clazz.newInstance();    context.addLifecycleListener(listener);    context.setConfigFile(contextXml.toURI().toURL());    context.setName(cn.getName());    context.setPath(cn.getPath());    context.setWebappVersion(cn.getVersion());    if (context.getDocBase() != null) {      File docBase=new File(context.getDocBase());      if (!docBase.isAbsolute()) {        docBase=new File(host.getAppBaseFile(),context.getDocBase());      }      if (!docBase.getCanonicalPath().startsWith(host.getAppBaseFile().getAbsolutePath() + File.separator)) {        isExternal=true;        deployedApp.redeployResources.put(contextXml.getAbsolutePath(),Long.valueOf(contextXml.lastModified()));        deployedApp.redeployResources.put(docBase.getAbsolutePath(),Long.valueOf(docBase.lastModified()));        if (docBase.getAbsolutePath().toLowerCase(Locale.ENGLISH).endsWith(".war")) {          isExternalWar=true;        }      } else {        log.warn(sm.getString("hostConfig.deployDescriptor.localDocBaseSpecified",docBase));        context.setDocBase(null);      }    }    host.addChild(context);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(sm.getString("hostConfig.deployDescriptor.error",contextXml.getAbsolutePath()),t);  } finally {    expandedDocBase=new File(host.getAppBaseFile(),cn.getBaseName());    if (context.getDocBase() != null && !context.getDocBase().toLowerCase(Locale.ENGLISH).endsWith(".war")) {      expandedDocBase=new File(context.getDocBase());      if (!expandedDocBase.isAbsolute()) {        expandedDocBase=new File(host.getAppBaseFile(),context.getDocBase());      }    }    boolean unpackWAR=unpackWARs;    if (unpackWAR && context instanceof StandardContext) {      unpackWAR=((StandardContext)context).getUnpackWAR();    }    if (isExternalWar) {      if (unpackWAR) {        deployedApp.redeployResources.put(expandedDocBase.getAbsolutePath(),Long.valueOf(expandedDocBase.lastModified()));        addWatchedResources(deployedApp,expandedDocBase.getAbsolutePath(),context);      } else {        addWatchedResources(deployedApp,null,context);      }    } else {      if (!isExternal) {        File warDocBase=new File(expandedDocBase.getAbsolutePath() + ".war");        if (warDocBase.exists()) {          deployedApp.redeployResources.put(warDocBase.getAbsolutePath(),Long.valueOf(warDocBase.lastModified()));        } else {          deployedApp.redeployResources.put(warDocBase.getAbsolutePath(),Long.valueOf(0));        }      }      if (unpackWAR) {        deployedApp.redeployResources.put(expandedDocBase.getAbsolutePath(),Long.valueOf(expandedDocBase.lastModified()));        addWatchedResources(deployedApp,expandedDocBase.getAbsolutePath(),context);      } else {        addWatchedResources(deployedApp,null,context);      }      if (!isExternal) {        deployedApp.redeployResources.put(contextXml.getAbsolutePath(),Long.valueOf(contextXml.lastModified()));      }    }    addGlobalRedeployResources(deployedApp);  }  if (host.findChild(context.getName()) != null) {    deployed.put(context.getName(),deployedApp);  }  if (log.isInfoEnabled()) {    log.info(sm.getString("hostConfig.deployDescriptor.finished",contextXml.getAbsolutePath(),Long.valueOf(System.currentTimeMillis() - startTime)));  }}  }
class C{  public LDIFEntryReader(final InputStream in){  super(in);}  }
class C{  private boolean canProcessEntry(RDN rdn){  return !rdn.isMultiValued() && rdn.getFirstAVA().getAttributeType().equals(attrAlias);}  }
class C{  public void run(){  try {    verify();  } catch (  Exception e) {    Debug.error(name + ":Error running verifier thread",e);  }  verificationOn=false;}  }
class C{  public static void deleteRealmPrivileges(SSOToken token,String realmName) throws SSOException, DelegationException {  DelegationManager dm=new DelegationManager(token,realmName);  Set privs=dm.getPrivileges();  if ((privs == null) || privs.isEmpty()) {    return;  }  Iterator it=privs.iterator();  while (it.hasNext()) {    DelegationPrivilege dp=(DelegationPrivilege)it.next();    String privName=dp.getName();    dm.removePrivilege(privName);    if (debug.messageEnabled()) {      debug.message("removed " + privName + " privilege from realm "+ realmName);    }  }}  }
class C{  public static String convertFrameID23To22(String identifier){  if (identifier.length() < 4) {    return null;  }  if (ID3v23Frames.getInstanceOf().getIdToValueMap().containsKey(identifier)) {    return ID3Frames.convertv23Tov22.get(identifier.substring(0,4));  }  return null;}  }
class C{  public void postNewNameIDSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,ManageNameIDRequest idRequest,ManageNameIDResponse idResponse,String binding){  return;}  }
class C{  public StateTransition checkSessionUpdate(){  if (!willExpire()) {    return StateTransition.NO_CHANGE;  }  if (!isTimedOut()) {    if (isInvalid()) {      if (checkInvalidSessionDefaultIdleTime()) {        return StateTransition.DESTROY;      } else {        return StateTransition.NO_CHANGE;      }    }    if (getTimeLeft() == 0) {      return StateTransition.MAX_TIMEOUT;    }    if (getIdleTime() >= MINUTES.toSeconds(maxIdleTimeInMinutes)) {      return StateTransition.IDLE_TIMEOUT;    }    return StateTransition.NO_CHANGE;  } else {    return StateTransition.NO_CHANGE;  }}  }
class C{  @SuppressWarnings("unchecked") protected void init(Hashtable<?,?> environment) throws NamingException {  myProps=(Hashtable<Object,Object>)ResourceManager.getInitialEnvironment(environment);  if (myProps.get(Context.INITIAL_CONTEXT_FACTORY) != null) {    getDefaultInitCtx();  }}  }
class C{  public OBJ_ADAPTER(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,char[] match){  int length=offset + match.length;  if (length > text.offset + text.count)   return false;  char[] textArray=text.array;  for (int i=offset, j=0; i < length; i++, j++) {    char c1=textArray[i];    char c2=match[j];    if (ignoreCase) {      c1=Character.toUpperCase(c1);      c2=Character.toUpperCase(c2);    }    if (c1 != c2)     return false;  }  return true;}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public static void handlePrintConversionException(Object caller,Exception e,XMLSerializer serializer) throws SAXException {  if (e instanceof SAXException)   throw (SAXException)e;  String message=e.getMessage();  if (message == null) {    message=e.toString();  }  ValidationEvent ve=new PrintConversionEventImpl(ValidationEvent.ERROR,message,new ValidationEventLocatorImpl(caller),e);  serializer.reportError(ve);}  }
class C{  public static boolean isValidLifecycleCallback(Method method){  if (method.getParameterTypes().length != 0 || Modifier.isStatic(method.getModifiers()) || method.getExceptionTypes().length > 0 || !method.getReturnType().getName().equals("void")) {    return false;  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetlastchild.class,args);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof UserPrincipal)) {    return false;  }  UserPrincipal that=(UserPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof SimpleTimeZone)) {    return false;  }  SimpleTimeZone that=(SimpleTimeZone)obj;  return getID().equals(that.getID()) && hasSameRules(that);}  }
class C{  private boolean combine_at_start(){  PlaPoint end_corner=corner_first();  BrdTracepCombineFound other=search_end(end_corner,false);  if (other.other_trace == null)   return false;  r_board.undo_items.save_for_undo(this);  Polyline other_poly=other.other_trace.polyline;  if (other.reverse_order)   other_poly=other_poly.reverse();  boolean skip_line=other_poly.plaline_last_prev().is_equal_or_opposite(polyline.plaline_first_next());  int my_copy_count=other_poly.plaline_len(-1);  if (skip_line)   my_copy_count--;  PlaLineIntAlist new_lines=new PlaLineIntAlist(polyline.plaline_len() + other_poly.plaline_len());  other_poly.alist_append_to(new_lines,0,my_copy_count);  polyline.alist_append_to(new_lines,1);  Polyline joined_polyline=new Polyline(new_lines);  if (joined_polyline.plaline_len() != new_lines.size()) {    r_board.search_tree_manager.remove(this);    polyline=joined_polyline;    clear_derived_data();    r_board.search_tree_manager.insert(this);  } else {    int to_no=other_poly.plaline_len();    if (skip_line)     --to_no;    r_board.search_tree_manager.merge_entries_in_front(other.other_trace,this,joined_polyline,other_poly.plaline_len(-3),to_no);    other.other_trace.clear_search_tree_entries();    polyline=joined_polyline;  }  if (!polyline.is_valid()) {    r_board.remove_item(this);  }  r_board.remove_item(other.other_trace);  r_board.changed_area_join(end_corner.to_float(),get_layer());  return true;}  }
class C{  public void jspError(Exception e) throws JasperException {  dispatch(null,null,null,e);}  }
class C{  public void clear(){  if (arrayTable != null) {    arrayTable.clear();  }}  }
class C{  private void internalCreate(SSOToken token,String dn,Map attrs) throws SMSException, SSOException {  SMSAuditor auditor=newAuditor(token,dn,null);  List attrList=copyMapToAttrList(attrs);  AddOperation ao=icConn.processAdd(dn,attrList);  ResultCode resultCode=ao.getResultCode();  if (resultCode == ResultCode.SUCCESS) {    if (debug.messageEnabled()) {      debug.message("SMSEmbeddedLdapObject.create: Successfully created" + " entry: " + dn);    }    if (auditor != null) {      auditor.auditCreate(attrs);    }  } else   if (resultCode == ResultCode.ENTRY_ALREADY_EXISTS) {    debug.warning("SMSEmbeddedLdapObject.create: Entry " + "Already Exists Error for DN" + dn);  } else {    debug.error("SMSEmbeddedLdapObject.create: Error creating entry: " + dn + ", error code = "+ resultCode);    throw new SMSException("","sms-entry-cannot-create");  }}  }
class C{  protected void BuildNewCharString(int FontIndex) throws java.io.IOException {  NewCharStringsIndex=BuildNewIndex(fonts[FontIndex].charstringsOffsets,GlyphsUsed,ENDCHAR_OP);}  }
class C{  public List<Challenge> challenges(){  String responseField;  if (code == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";  } else   if (code == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";  } else {    return Collections.emptyList();  }  return OkHeaders.parseChallenges(headers(),responseField);}  }
class C{  public Set createFilteredRoles(Set roleNames) throws AMException, SSOException {  Iterator iter=roleNames.iterator();  Set roles=new HashSet();  while (iter.hasNext()) {    String roleName=(String)iter.next();    String roleDN=AMNamingAttrManager.getNamingAttr(FILTERED_ROLE) + "=" + roleName+ ","+ entryDN;    AMFilteredRoleImpl roleImpl=new AMFilteredRoleImpl(token,roleDN);    roleImpl.create();    roles.add(roleImpl);  }  return roles;}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws SAXException {  super.appendAndPush(handler,elem);  elem.setDOMBackPointer(handler.getOriginatingNode());  handler.getStylesheet().setTemplate((ElemTemplate)elem);}  }
class C{  public NodeSetDTM(int node,DTMManager dtmManager){  super();  m_manager=dtmManager;  addNode(node);}  }
class C{  public Permissions(){  permsMap=new HashMap<Class<?>,PermissionCollection>(11);  allPermission=null;}  }
class C{  @Override public MatchStrength hasFormat(InputAccessor acc) throws IOException {  return SmileParserBootstrapper.hasSmileFormat(acc);}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public void intervalAdded(ListDataEvent e){}  }
class C{  public void initNodeTest(int whatToShow,String namespace,String name){  m_whatToShow=whatToShow;  m_namespace=namespace;  m_name=name;  calcScore();}  }
class C{  @Override public Object addToEnvironment(String propName,Object propVal) throws NamingException {  return getBoundContext().addToEnvironment(propName,propVal);}  }
class C{  public static String hash(String string){  try {    MessageDigest sha1=MessageDigest.getInstance("SHA-1");    sha1.update(string.getBytes("UTF-8"));    return Base64.encode(sha1.digest());  } catch (  Exception ex) {    Debug debug=Debug.getInstance("amSDK");    if (debug.warningEnabled()) {      debug.warning("Hash.hash:",ex);    }    return null;  }}  }
class C{  public static void fill(int[] array,int start,int end,int value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.KeyNameElement createKeyNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.KeyNameElementImpl();}  }
class C{  public static boolean hasMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardToAgentsViewBean();}  }
class C{  public boolean retryRequest(final IOException exception,int executionCount,final HttpContext context){  if (exception == null) {    throw new IllegalArgumentException("Exception parameter may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  if (executionCount > this.retryCount) {    return false;  }  if (exception instanceof NoHttpResponseException) {    return true;  }  if (exception instanceof InterruptedIOException) {    return false;  }  if (exception instanceof UnknownHostException) {    return false;  }  if (exception instanceof SSLHandshakeException) {    return false;  }  Boolean b=(Boolean)context.getAttribute(ExecutionContext.HTTP_REQ_SENT);  boolean sent=(b != null && b.booleanValue());  if (!sent || this.requestSentRetryEnabled) {    return true;  }  return false;}  }
class C{  public boolean findCellForSpan(int[] cellXY,int spanX,int spanY){  boolean foundCell=false;  final int endX=mCountX - (spanX - 1);  final int endY=mCountY - (spanY - 1);  for (int y=0; y < endY && !foundCell; y++) {    inner:     for (int x=0; x < endX; x++) {      for (int i=0; i < spanX; i++) {        for (int j=0; j < spanY; j++) {          if (mOccupied[x + i][y + j]) {            x+=i;            continue inner;          }        }      }      if (cellXY != null) {        cellXY[0]=x;        cellXY[1]=y;      }      foundCell=true;      break;    }  }  return foundCell;}  }
class C{  public boolean hasMcid(int mcid,boolean checkTheTopmostLevelOnly){  if (checkTheTopmostLevelOnly) {    if (canvasTagHierarchy != null) {      int infoMcid=getMcid();      return infoMcid != -1 && infoMcid == mcid;    }  } else {    for (    CanvasTag tag : canvasTagHierarchy) {      if (tag.hasMcid())       if (tag.getMcid() == mcid)       return true;    }  }  return false;}  }
class C{  public ContextResourceMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  protected boolean arguments(String args[]){  boolean isConfig=false;  if (args.length < 1) {    usage();    return false;  }  for (int i=0; i < args.length; i++) {    if (isConfig) {      configFile=args[i];      isConfig=false;    } else     if (args[i].equals("-config")) {      isConfig=true;    } else     if (args[i].equals("-nonaming")) {      setUseNaming(false);    } else     if (args[i].equals("-help")) {      usage();      return false;    } else     if (args[i].equals("start")) {    } else     if (args[i].equals("configtest")) {    } else     if (args[i].equals("stop")) {    } else {      usage();      return false;    }  }  return true;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 246) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public DeleteOperationWrapper(DeleteOperation delete){  super(delete);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS04.class,args);}  }
class C{  public UnsupportedLookAndFeelException(String s){  super(s);}  }
class C{  public static int parseRuleID(String definition) throws DirectoryException {  return Integer.parseInt(parseOID(definition,ERR_PARSING_DIT_STRUCTURE_RULE_RULEID));}  }
class C{  @Override public long countEntries() throws DirectoryException {  Backend<?> backend=getBackend();  if (!backend.supports(BackendOperation.LDIF_EXPORT)) {    LocalizableMessage msg=ERR_INIT_EXPORT_NOT_SUPPORTED.get(backend.getBackendID());    logger.error(msg);    throw new DirectoryException(ResultCode.OTHER,msg);  }  return backend.getNumberOfEntriesInBaseDN(getBaseDN());}  }
class C{  public boolean removeAll(Collection<?> c){  return al.removeAll(c);}  }
class C{  public String doSASLExternal(ByteSequence bindDN,Map<String,List<String>> saslProperties,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  if (saslProperties != null && !saslProperties.isEmpty()) {    LocalizableMessage message=ERR_LDAPAUTH_NO_ALLOWED_SASL_PROPERTIES.get(SASL_MECHANISM_EXTERNAL);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  sendBindRequest(SASL_MECHANISM_EXTERNAL,bindDN,null,requestControls);  LDAPMessage responseMessage=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_BIND_RESPONSE);  responseControls.addAll(responseMessage.getControls());  checkConnected(responseMessage);  BindResponseProtocolOp bindResponse=responseMessage.getBindResponseProtocolOp();  int resultCode=bindResponse.getResultCode();  if (resultCode == ReturnCode.SUCCESS.get()) {    return null;  }  LocalizableMessage message=ERR_LDAPAUTH_SASL_BIND_FAILED.get(SASL_MECHANISM_EXTERNAL);  throw new LDAPException(resultCode,bindResponse.getErrorMessage(),message,bindResponse.getMatchedDN(),null);}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new FileItemStream.ItemSkippedException();  }  if (len == 0) {    return 0;  }  int res=available();  if (res == 0) {    res=makeAvailable();    if (res == 0) {      return -1;    }  }  res=Math.min(res,len);  System.arraycopy(buffer,head,b,off,res);  head+=res;  total+=res;  return res;}  }
class C{  public void testZeroNeg(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public boolean hasQueuedThreads(){  return sync.hasQueuedThreads();}  }
class C{  public void testClearBitPositiveInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=20;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-31,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static boolean isNotEmpty(final String s){  return (s != null && s.length() > 0);}  }
class C{  public Comparator(BlockFace facingDirection){  this(facingDirection,DEFAULT_SUBTRACTION_MODE,DEFAULT_STATE);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s8_main_and_branch_with_intermediate_light_tag();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public SSOToken createSSOToken(String tokenId) throws UnsupportedOperationException, SSOException {  for (  SSOProviderPlugin ssoProvider : getSsoProviderPlugins()) {    if (ssoProvider.isApplicable(tokenId)) {      return ssoProvider.createSSOToken(tokenId);    }  }  if (dProProvider != null)   return (dProProvider.createSSOToken(tokenId)); else   return (grappaProvider.createSSOToken(tokenId));}  }
class C{  public Set<Object> keySet(){  return map.keySet();}  }
class C{  public boolean isRdrandEnabled(){  return rdrandEnabled;}  }
class C{  private void buildTStore(MethodVisitor methodVisitor,CodeInfo info,Ins.TStore tStore){  buildValueAccess(methodVisitor,info,tStore.newValue(),true);  methodVisitor.visitVarInsn(tStore.mode(),tStore.index());  info.pop(1);  info.registerLocal(tStore.index());}  }
class C{  public IndentScanner(String fileName,Reader reader,Properties properties,ErrorManager err){  super(fileName,reader,properties,err);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof NTPrincipal)) {    return false;  }  NTPrincipal that=(NTPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public PdfLayerMembership(PdfDictionary membershipDictionary){  super(membershipDictionary);  ensureObjectIsAddedToDocument(membershipDictionary);  if (!PdfName.OCMD.equals(membershipDictionary.getAsName(PdfName.Type)))   throw new IllegalArgumentException("Invalid membershipDictionary.");}  }
class C{  public final byte[] update(byte[] input){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,0,input.length);}  }
class C{  public double[] board_to_dsn_rel(ShapeTileBox p_box){  double[] result=new double[4];  result[0]=p_box.box_ll.v_x / scale_factor;  result[1]=p_box.box_ll.v_y / scale_factor;  result[2]=p_box.box_ur.v_x / scale_factor;  result[3]=p_box.box_ur.v_y / scale_factor;  return result;}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  @Override public int hashCode(){  int result=effectiveKeyBits;  if (iv == null) {    return result;  }  for (  byte element : iv) {    result+=element;  }  return result;}  }
class C{  public static void createProtectedFile(String path,String content) throws IOException, InterruptedException {  FileWriter file=new FileWriter(path);  PrintWriter out=new PrintWriter(file);  out.println(content);  out.flush();  out.close();  if (!isWindows()) {    setPermissionsUnix(path,"600");  }}  }
class C{  @Deprecated public static String encodePostBody(Bundle parameters,String boundary){  if (parameters == null)   return "";  StringBuilder sb=new StringBuilder();  for (  String key : parameters.keySet()) {    Object parameter=parameters.get(key);    if (!(parameter instanceof String)) {      continue;    }    sb.append("Content-Disposition: form-data; name=\"" + key + "\"\r\n\r\n"+ (String)parameter);    sb.append("\r\n" + "--" + boundary + "\r\n");  }  return sb.toString();}  }
class C{  void addPermission(URL url){  if (url == null) {    return;  }  if (securityManager != null) {    String protocol=url.getProtocol();    if ("file".equalsIgnoreCase(protocol)) {      URI uri;      File f;      String path;      try {        uri=url.toURI();        f=new File(uri);        path=f.getCanonicalPath();      } catch (      IOException|URISyntaxException e) {        log.warn(sm.getString("webappClassLoader.addPermisionNoCanonicalFile",url.toExternalForm()));        return;      }      if (f.isFile()) {        addPermission(new FilePermission(path,"read"));      } else       if (f.isDirectory()) {        addPermission(new FilePermission(path,"read"));        addPermission(new FilePermission(path + File.separator + "-","read"));      } else {      }    } else {      log.warn(sm.getString("webappClassLoader.addPermisionNoProtocol",protocol,url.toExternalForm()));    }  }}  }
class C{  public XPath(Expression expr){  this.setExpression(expr);  initFunctionTable();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private StringBuffer subformat(Object[] arguments,StringBuffer result,FieldPosition fp,List<AttributedCharacterIterator> characterIterators){  int lastOffset=0;  int last=result.length();  for (int i=0; i <= maxOffset; ++i) {    result.append(pattern.substring(lastOffset,offsets[i]));    lastOffset=offsets[i];    int argumentNumber=argumentNumbers[i];    if (arguments == null || argumentNumber >= arguments.length) {      result.append('{').append(argumentNumber).append('}');      continue;    }    if (false) {      result.append('\uFFFD');    } else {      Object obj=arguments[argumentNumber];      String arg=null;      Format subFormatter=null;      if (obj == null) {        arg="null";      } else       if (formats[i] != null) {        subFormatter=formats[i];        if (subFormatter instanceof ChoiceFormat) {          arg=formats[i].format(obj);          if (arg.indexOf('{') >= 0) {            subFormatter=new MessageFormat(arg,locale);            obj=arguments;            arg=null;          }        }      } else       if (obj instanceof Number) {        subFormatter=NumberFormat.getInstance(locale);      } else       if (obj instanceof Date) {        subFormatter=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,locale);      } else       if (obj instanceof String) {        arg=(String)obj;      } else {        arg=obj.toString();        if (arg == null)         arg="null";      }      if (characterIterators != null) {        if (last != result.length()) {          characterIterators.add(createAttributedCharacterIterator(result.substring(last)));          last=result.length();        }        if (subFormatter != null) {          AttributedCharacterIterator subIterator=subFormatter.formatToCharacterIterator(obj);          append(result,subIterator);          if (last != result.length()) {            characterIterators.add(createAttributedCharacterIterator(subIterator,Field.ARGUMENT,Integer.valueOf(argumentNumber)));            last=result.length();          }          arg=null;        }        if (arg != null && arg.length() > 0) {          result.append(arg);          characterIterators.add(createAttributedCharacterIterator(arg,Field.ARGUMENT,Integer.valueOf(argumentNumber)));          last=result.length();        }      } else {        if (subFormatter != null) {          arg=subFormatter.format(obj);        }        last=result.length();        result.append(arg);        if (i == 0 && fp != null && Field.ARGUMENT.equals(fp.getFieldAttribute())) {          fp.setBeginIndex(last);          fp.setEndIndex(result.length());        }        last=result.length();      }    }  }  result.append(pattern.substring(lastOffset,pattern.length()));  if (characterIterators != null && last != result.length()) {    characterIterators.add(createAttributedCharacterIterator(result.substring(last)));  }  return result;}  }
class C{  public int compare(File file1,File file2){  int result=0;  for (  Comparator<File> delegate : delegates) {    result=delegate.compare(file1,file2);    if (result != 0) {      break;    }  }  return result;}  }
class C{  public static GUID readGUID(InputStream stream) throws IOException {  if (stream == null) {    throw new IllegalArgumentException("Argument must not be null");  }  int[] binaryGuid=new int[GUID.GUID_LENGTH];  for (int i=0; i < binaryGuid.length; i++) {    binaryGuid[i]=stream.read();  }  return new GUID(binaryGuid);}  }
class C{  public boolean isValidToken(SSOToken token){  return isValidToken(token,true);}  }
class C{  public ReportGenerator(String dataDir,String templateDir,String outputDir){  this.dataDir=dataDir;  this.templateDir=templateDir;  this.outputDir=outputDir;}  }
class C{  public static String rtrimWildcardTokens(String input){  return rtrimWildcardTokens(input,DEFAULT_PATH_SEPARATOR);}  }
class C{  public boolean removeChoosableFileFilter(FileFilter f){  int index=filters.indexOf(f);  if (index >= 0) {    if (getFileFilter() == f) {      FileFilter aaff=getAcceptAllFileFilter();      if (isAcceptAllFileFilterUsed() && (aaff != f)) {        setFileFilter(aaff);      } else       if (index > 0) {        setFileFilter(filters.get(0));      } else       if (filters.size() > 1) {        setFileFilter(filters.get(1));      } else {        setFileFilter(null);      }    }    FileFilter[] oldValue=getChoosableFileFilters();    filters.removeElement(f);    firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY,oldValue,getChoosableFileFilters());    return true;  } else {    return false;  }}  }
class C{  @Override protected void generateClass(String[] smap) throws FileNotFoundException, JasperException, Exception {  long t1=0;  if (log.isDebugEnabled()) {    t1=System.currentTimeMillis();  }  String javaEncoding=ctxt.getOptions().getJavaEncoding();  String javaFileName=ctxt.getServletJavaFileName();  String classpath=ctxt.getClassPath();  StringBuilder errorReport=new StringBuilder();  StringBuilder info=new StringBuilder();  info.append("Compile: javaFileName=" + javaFileName + "\n");  info.append("    classpath=" + classpath + "\n");  SystemLogHandler.setThread();  getProject();  Javac javac=(Javac)project.createTask("javac");  Path path=new Path(project);  path.setPath(System.getProperty("java.class.path"));  info.append("    cp=" + System.getProperty("java.class.path") + "\n");  StringTokenizer tokenizer=new StringTokenizer(classpath,File.pathSeparator);  while (tokenizer.hasMoreElements()) {    String pathElement=tokenizer.nextToken();    File repository=new File(pathElement);    path.setLocation(repository);    info.append("    cp=" + repository + "\n");  }  if (log.isDebugEnabled()) {    log.debug("Using classpath: " + System.getProperty("java.class.path") + File.pathSeparator+ classpath);  }  Path srcPath=new Path(project);  srcPath.setLocation(options.getScratchDir());  info.append("    work dir=" + options.getScratchDir() + "\n");  String exts=System.getProperty("java.ext.dirs");  if (exts != null) {    Path extdirs=new Path(project);    extdirs.setPath(exts);    javac.setExtdirs(extdirs);    info.append("    extension dir=" + exts + "\n");  }  if (ctxt.getOptions().getFork()) {    String endorsed=System.getProperty("java.endorsed.dirs");    if (endorsed != null) {      Javac.ImplementationSpecificArgument endorsedArg=javac.createCompilerArg();      endorsedArg.setLine("-J-Djava.endorsed.dirs=" + quotePathList(endorsed));      info.append("    endorsed dir=" + quotePathList(endorsed) + "\n");    } else {      info.append("    no endorsed dirs specified\n");    }  }  javac.setEncoding(javaEncoding);  javac.setClasspath(path);  javac.setDebug(ctxt.getOptions().getClassDebugInfo());  javac.setSrcdir(srcPath);  javac.setTempdir(options.getScratchDir());  javac.setOptimize(!ctxt.getOptions().getClassDebugInfo());  javac.setFork(ctxt.getOptions().getFork());  info.append("    srcDir=" + srcPath + "\n");  if (options.getCompiler() != null) {    javac.setCompiler(options.getCompiler());    info.append("    compiler=" + options.getCompiler() + "\n");  }  if (options.getCompilerTargetVM() != null) {    javac.setTarget(options.getCompilerTargetVM());    info.append("   compilerTargetVM=" + options.getCompilerTargetVM() + "\n");  }  if (options.getCompilerSourceVM() != null) {    javac.setSource(options.getCompilerSourceVM());    info.append("   compilerSourceVM=" + options.getCompilerSourceVM() + "\n");  }  PatternSet.NameEntry includes=javac.createInclude();  includes.setName(ctxt.getJavaPath());  info.append("    include=" + ctxt.getJavaPath() + "\n");  BuildException be=null;  try {    if (ctxt.getOptions().getFork()) {      javac.execute();    } else {synchronized (javacLock) {        javac.execute();      }    }  } catch (  BuildException e) {    be=e;    log.error(Localizer.getMessage("jsp.error.javac"),e);    log.error(Localizer.getMessage("jsp.error.javac.env") + info.toString());  }  errorReport.append(logger.getReport());  String errorCapture=SystemLogHandler.unsetThread();  if (errorCapture != null) {    errorReport.append(System.lineSeparator());    errorReport.append(errorCapture);  }  if (!ctxt.keepGenerated()) {    File javaFile=new File(javaFileName);    javaFile.delete();  }  if (be != null) {    String errorReportString=errorReport.toString();    log.error(Localizer.getMessage("jsp.error.compilation",javaFileName,errorReportString));    JavacErrorDetail[] javacErrors=ErrorDispatcher.parseJavacErrors(errorReportString,javaFileName,pageNodes);    if (javacErrors != null) {      errDispatcher.javacError(javacErrors);    } else {      errDispatcher.javacError(errorReportString,be);    }  }  if (log.isDebugEnabled()) {    long t2=System.currentTimeMillis();    log.debug("Compiled " + ctxt.getServletJavaFileName() + " "+ (t2 - t1)+ "ms");  }  logger=null;  project=null;  if (ctxt.isPrototypeMode()) {    return;  }  if (!options.isSmapSuppressed()) {    SmapUtil.installSmap(smap);  }}  }
class C{  private int doEndOfFile() throws EOFException {  eof=true;  if (throwEofException) {    throw new EOFException();  }  return -1;}  }
class C{  public KeyStoreBuilder withProvider(final Provider provider){  Reject.ifNull(provider);  this.provider=provider;  return this;}  }
class C{  private void resetStatusValues(){  dupToken=false;  oldToken=false;  unseqToken=false;  gapToken=false;  minorStatus=0;  minorString=null;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.OnlySignEntireHeadersAndBodyElement createOnlySignEntireHeadersAndBodyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.OnlySignEntireHeadersAndBodyElementImpl();}  }
class C{  public Goomba(Group parent,GameLoop gameLoop,Mario mario,int stageZone,boolean checkBlockCollision,String[] SVGData,float xPos,float yPos,float xVel,float yVel,Image[] playerDeathSprites,Image... sprites){  super(SVGData,stageZone,xPos,yPos,xVel,yVel,sprites);  this.checkBlockCollision=checkBlockCollision;  this.parent=parent;  spriteBoundsArray[5].setTranslateX(xPos);  spriteFrame.setTranslateX(xPos);  spriteFrame.setTranslateY(yPos);  frameHeight=ASPECT_LENGTH;  fbEffectDelta=(float)(1.86 * REL_HEIGHT);  this.mario=mario;  zone=stageZone;  this.gameLoop=gameLoop;  this.playerDeathSprites=playerDeathSprites;}  }
class C{  private static boolean isLineWrapChar(char c){  return Character.isWhitespace(c) || "([".indexOf(c) >= 0;}  }
class C{  public String doSASLBind(ByteSequence bindDN,ByteSequence bindPassword,String mechanism,Map<String,List<String>> saslProperties,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  if (bindDN == null) {    bindDN=ByteString.empty();  }  if (mechanism == null || mechanism.length() == 0) {    LocalizableMessage message=ERR_LDAPAUTH_NO_SASL_MECHANISM.get();    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  saslMechanism=toUpperCase(mechanism);switch (saslMechanism) {case SASL_MECHANISM_ANONYMOUS:    return doSASLAnonymous(bindDN,saslProperties,requestControls,responseControls);case SASL_MECHANISM_CRAM_MD5:  return doSASLCRAMMD5(bindDN,bindPassword,saslProperties,requestControls,responseControls);case SASL_MECHANISM_DIGEST_MD5:return doSASLDigestMD5(bindDN,bindPassword,saslProperties,requestControls,responseControls);case SASL_MECHANISM_EXTERNAL:return doSASLExternal(bindDN,saslProperties,requestControls,responseControls);case SASL_MECHANISM_GSSAPI:return doSASLGSSAPI(bindDN,bindPassword,saslProperties,requestControls,responseControls);case SASL_MECHANISM_PLAIN:return doSASLPlain(bindDN,bindPassword,saslProperties,requestControls,responseControls);default :LocalizableMessage message=ERR_LDAPAUTH_UNSUPPORTED_SASL_MECHANISM.get(mechanism);throw new ClientException(ReturnCode.CLIENT_SIDE_AUTH_UNKNOWN,message);}}  }
class C{  public void putNextEntry(ZipEntry ze) throws IOException {  if (firstEntry) {    byte[] edata=ze.getExtra();    if (edata == null || !hasMagic(edata)) {      if (edata == null) {        edata=new byte[4];      } else {        byte[] tmp=new byte[edata.length + 4];        System.arraycopy(edata,0,tmp,4,edata.length);        edata=tmp;      }      set16(edata,0,JAR_MAGIC);      set16(edata,2,0);      ze.setExtra(edata);    }    firstEntry=false;  }  super.putNextEntry(ze);}  }
class C{  public void handleTblSoapSTSInstancesButtonAddRequest(RequestInvocationEvent event){  SoapSTSAddViewBean vb=(SoapSTSAddViewBean)getViewBean(SoapSTSAddViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void initializeSerializerProps(){  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CANONICAL_FORM,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CDATA_SECTIONS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CHECK_CHAR_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_COMMENTS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DATATYPE_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_TRUE);  if ((fFeatures & INFOSET) != 0) {    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACES,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACE_DECLARATIONS,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_COMMENTS,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_WELLFORMED,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CDATA_SECTIONS,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE_IF_SCHEMA,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DATATYPE_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  }  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACES,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACE_DECLARATIONS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_SPLIT_CDATA,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE_IF_SCHEMA,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_WELLFORMED,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_INDENT,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(OutputPropertiesFactory.S_KEY_INDENT_AMOUNT,Integer.toString(3));  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DISCARD_DEFAULT_CONTENT,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,"no");}  }
class C{  public void addAttributeSchema(InputStream xmlAttrSchema) throws SSOException, SMSException {  SMSEntry.validateToken(ssm.getSSOToken());  Document doc=SMSSchema.getXMLDocument(xmlAttrSchema,false);  NodeList nl=doc.getElementsByTagName(SMSUtils.SCHEMA_ATTRIBUTE);  CaseInsensitiveHashSet asNames=new CaseInsensitiveHashSet(ss.getAttributeSchemaNames());  for (int i=0; i < nl.getLength(); i++) {    Node node=nl.item(i);    AttributeSchemaImpl as=new AttributeSchemaImpl(node);    if (asNames.contains(as.getName())) {      Object[] args={as.getName()};      throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-attributeschema-already-exists",args));    }  }  appendAttributeSchema(nl);}  }
class C{  public static boolean checkForCookies(HttpServletRequest req,AuthContextLocal ac){  LoginState loginState=getLoginState(ac);  if (loginState != null) {    utilDebug.message("set cookieSet to false.");    loginState.setCookieSet(false);    loginState.setCookieDetect(false);  }  return ((CookieUtils.getCookieValueFromReq(req,getAuthCookieName()) != null) || (CookieUtils.getCookieValueFromReq(req,getCookieName()) != null));}  }
class C{  @Override public final void run(){  setResultCode(ResultCode.UNDEFINED);  setProcessingStartTime();  logCompareRequest(this);  boolean workflowExecuted=false;  try {    checkIfCanceled(false);    if (!processOperationResult(getPluginConfigManager().invokePreParseComparePlugins(this))) {      return;    }    checkIfCanceled(false);    try {      if (entryDN == null) {        entryDN=DN.valueOf(rawEntryDN);      }    } catch (    LocalizedIllegalArgumentException e) {      logger.traceException(e);      setResultCode(ResultCode.INVALID_DN_SYNTAX);      appendErrorMessage(e.getMessageObject());      return;    }    workflowExecuted=execute(this,entryDN);  } catch (  CanceledOperationException coe) {    logger.traceException(coe);    setResultCode(ResultCode.CANCELLED);    cancelResult=new CancelResult(ResultCode.CANCELLED,null);    appendErrorMessage(coe.getCancelRequest().getCancelReason());  } finally {    setProcessingStopTime();    logCompareResponse(this);    if (cancelRequest == null || cancelResult == null || cancelResult.getResultCode() != ResultCode.CANCELLED || cancelRequest.notifyOriginalRequestor() || DirectoryServer.notifyAbandonedOperations()) {      clientConnection.sendResponse(this);    }    invokePostResponsePlugins(workflowExecuted);    if (cancelResult == null) {      cancelResult=new CancelResult(ResultCode.TOO_LATE,null);    }  }}  }
class C{  public void goToDetail(Activity activity,int comicId){  if (activity != null) {    Intent intentToLaunch=ComicDetailActivity.getCallingIntent(activity,comicId);    activity.startActivity(intentToLaunch);  }}  }
class C{  public void isValidResponse(BasicOCSPResp ocspResp,X509Certificate issuerCert) throws GeneralSecurityException, IOException {  X509Certificate responderCert=null;  if (isSignatureValid(ocspResp,issuerCert)) {    responderCert=issuerCert;  }  if (responderCert == null) {    if (ocspResp.getCerts() != null) {      Iterable<X509Certificate> certs=SignUtils.getCertsFromOcspResponse(ocspResp);      for (      X509Certificate cert : certs) {        List keyPurposes=null;        try {          keyPurposes=cert.getExtendedKeyUsage();          if ((keyPurposes != null) && keyPurposes.contains(id_kp_OCSPSigning) && isSignatureValid(ocspResp,cert)) {            responderCert=cert;            break;          }        } catch (        CertificateParsingException ignored) {        }      }      if (responderCert == null) {        throw new VerificationException(issuerCert,"OCSP response could not be verified");      }    } else {      if (rootStore != null) {        try {          for (          X509Certificate anchor : SignUtils.getCertificates(rootStore)) {            if (isSignatureValid(ocspResp,anchor)) {              responderCert=anchor;              break;            }          }        } catch (        Exception e) {          responderCert=(X509Certificate)null;        }      }      if (responderCert == null) {        throw new VerificationException(issuerCert,"OCSP response could not be verified");      }    }  }  responderCert.verify(issuerCert.getPublicKey());  if (responderCert.getExtensionValue(OCSPObjectIdentifiers.id_pkix_ocsp_nocheck.getId()) == null) {    CRL crl;    try {      crl=CertificateUtil.getCRL(responderCert);    } catch (    Exception ignored) {      crl=(CRL)null;    }    if (crl != null && crl instanceof X509CRL) {      CRLVerifier crlVerifier=new CRLVerifier(null,null);      crlVerifier.setRootStore(rootStore);      crlVerifier.setOnlineCheckingAllowed(onlineCheckingAllowed);      crlVerifier.verify((X509CRL)crl,responderCert,issuerCert,DateTimeUtil.getCurrentTimeDate());      return;    }  }  responderCert.checkValidity();}  }
class C{  public static int countByUuid(java.lang.String uuid){  return getPersistence().countByUuid(uuid);}  }
class C{  public FrameBodyASPI(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  String constructComponentName(){synchronized (Panel.class) {    return base + nameCounter++;  }}  }
class C{  private void playBlastSeq(){  if (frameControl % 2 == 0) {    spriteFrame.setImage(playerStates.get((frameControl / 2) + 1));    if (frameControl == 22) {      dispose();      isReadyForRemoval=true;      return;    }  }  frameControl++;}  }
class C{  public static void main(final String[] args){  if (args.length != 7) {    System.err.println("Usage: host port \"admin\"|\"self\" DN " + "password targetDN newPassword");    System.err.println("For example: ad.example.com 636 admin " + "cn=administrator,cn=Users,DC=ad,DC=example,DC=com " + "Secret123 cn=testuser,cn=Users,DC=ad,DC=example,DC=com "+ "NewP4s5w0rd");    System.exit(1);  }  final String host=args[0];  final int port=Integer.parseInt(args[1]);  final String mode=args[2];  final String bindDN=args[3];  final String bindPassword=args[4];  final String targetDN=args[5];  final String newPassword=args[6];  Connection connection=null;  try {    final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port,getTrustAllOptions());    connection=factory.getConnection();    connection.bind(bindDN,bindPassword.toCharArray());    ModifyRequest request=Requests.newModifyRequest(DN.valueOf(targetDN));    String passwordAttribute="unicodePwd";    if ("admin".equalsIgnoreCase(mode)) {      request.addModification(ModificationType.REPLACE,passwordAttribute,encodePassword(newPassword));    } else     if ("self".equalsIgnoreCase(mode)) {      request.addModification(ModificationType.DELETE,passwordAttribute,encodePassword(bindPassword));      request.addModification(ModificationType.ADD,passwordAttribute,encodePassword(newPassword));    } else {      System.err.println("Mode must be admin or self, not " + mode);      System.exit(1);    }    connection.modify(request);    System.out.println("Successfully changed password for " + targetDN + " to "+ newPassword+ ".");  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());  }catch (  final GeneralSecurityException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_CONNECT_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  @Post public Representation importXACML(Representation entity){  boolean dryRun="true".equalsIgnoreCase(getQuery().getFirstValue("dryrun"));  List<ImportStep> steps;  try {    if (!checkPermission("MODIFY")) {      throw new ResourceException(new Status(FORBIDDEN));    }    String realm=RestletRealmRouter.getRealmFromRequest(getRequest());    steps=importExport.importXacml(realm,entity.getStream(),getAdminToken(),dryRun);    if (steps.isEmpty()) {      throw new ResourceException(new Status(BAD_REQUEST,"No policies found in XACML document",null,null));    }    List<Map<String,String>> result=new ArrayList<>();    for (    ImportStep step : steps) {      Map<String,String> stepResult=new HashMap<>();      stepResult.put("status",String.valueOf(step.getDiffStatus().getCode()));      stepResult.put("name",step.getName());      stepResult.put("type",step.getType());      result.add(stepResult);    }    getResponse().setStatus(Status.SUCCESS_OK);    return jacksonRepresentationFactory.create(result);  } catch (  EntitlementException e) {    debug.warning("Importing XACML to policies failed",e);    throw new ResourceException(new Status(BAD_REQUEST,e,e.getLocalizedMessage(getRequestLocale()),null,null));  }catch (  IOException e) {    debug.warning("Reading XACML import failed",e);    throw new ResourceException(new Status(BAD_REQUEST,e,e.getLocalizedMessage(),null,null));  }}  }
class C{  public final void testWriteReplace(){  try {    MyCertPath cp1=new MyCertPath(testEncoding);    Object obj=cp1.writeReplace();    assertTrue(obj.toString().contains("java.security.cert.CertPath$CertPathRep"));  } catch (  ObjectStreamException e) {    fail("Unexpected ObjectStreamException " + e.getMessage());  }}  }
class C{  public void insertTextAtIndex(int index,String s){  Document doc=JTextComponent.this.getDocument();  if (doc != null) {    try {      if (s != null && s.length() > 0) {        boolean composedTextSaved=saveComposedText(index);        doc.insertString(index,s,null);        if (composedTextSaved) {          restoreComposedText();        }      }    } catch (    BadLocationException e) {      UIManager.getLookAndFeel().provideErrorFeedback(JTextComponent.this);    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.EncryptableNameIdentifierElement createEncryptableNameIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.EncryptableNameIdentifierElementImpl();}  }
class C{  public void init() throws ServletException {}  }
class C{  public NoninvertibleTransformException(String s){  super(s);}  }
class C{  public boolean isVerbose(){  return verboseArg.isPresent();}  }
class C{  public static void deregisterCertificateMapper(DN mapperDN){  directoryServer.certificateMappers.remove(mapperDN);}  }
class C{  public boolean containsProvider(String providerID){  SPDescriptorType spDescriptor=null;  try {    spDescriptor=idffMetaManager.getSPDescriptor(ROOT_REALM,providerID);  } catch (  IDFFMetaException imex) {    ProviderUtil.debug.error("IDFFProviderManager.containsProvider:",imex);  }  return (spDescriptor != null);}  }
class C{  public void testGetNewServerTransaction(){  try {    Request invite=createRiInviteRequest(null,null,null);    ServerTransaction tran=null;    RequestEvent receivedRequestEvent=null;    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);      waitForMessage();      receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      if (receivedRequestEvent == null || receivedRequestEvent.getRequest() == null)       throw new TiUnexpectedError("The sent request was not received by the RI!");    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("A TooManyListenersException was thrown while trying to add " + "a SipListener to a TI SipProvider.",ex);    }catch (    SipException ex) {      throw new TckInternalError("The RI failed to send the request!",ex);    }    try {      tran=tiSipProvider.getNewServerTransaction(receivedRequestEvent.getRequest());    } catch (    TransactionUnavailableException exc) {      exc.printStackTrace();      fail("A TransactionUnavailableException was thrown while trying to " + "create a new client transaction");    }catch (    TransactionAlreadyExistsException exc) {      exc.printStackTrace();      fail("A TransactionAlreadyExistsException was thrown while trying to " + "create a new server transaction");    }    assertNotNull("A null ServerTransaction was returned by SipProvider." + "getNewServerTransaction().",tran);    String tranBranch=tran.getBranchId();    String reqBranch=((ViaHeader)invite.getHeader(ViaHeader.NAME)).getBranch();    assertEquals("The newly created transaction did not have the same " + "branch id as the request that created it!",tranBranch,reqBranch);    assertNotNull("The newly created transaction returned a null Dialog. " + "Please check the docs on Transaction.getDialog()",tran.getDialog());    assertNotNull("The transaction's getRequest() method returned a null Request ",tran.getRequest());    assertEquals("The transaction's getRequest() method returned a Request " + "that did not match the one that we used to create it!",tran.getRequest(),receivedRequestEvent.getRequest());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public AccessReject(){  super(PacketType.ACCESS_REJECT);}  }
class C{  public SyncFactoryException(String msg){  super(msg);}  }
class C{  public DN toDn(ServerContext serverContext){  return DN.valueOf(toString(),serverContext.getSchema());}  }
class C{  public JKContext createDesktopContext(){  return new JKDesktopContext();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof MonthDay) {    MonthDay other=(MonthDay)obj;    return month == other.month && day == other.day;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetimplementation.class,args);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String appTypeName=getStringOptionValue(PARAM_APPL_TYPE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if (datafile == null && attrValues == null) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String[] params={appTypeName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_APPLICATION_TYPE",params);  try {    Map<String,Boolean> actions=getActions(attributeValues);    Class searchIndex=getClassAttribute(ATTR_SEARCH_INDEX,attributeValues);    Class saveIndex=getClassAttribute(ATTR_SAVE_INDEX,attributeValues);    Class resourceComp=getClassAttribute(ATTR_RESOURCE_COMPARATOR,attributeValues);    ApplicationType applType=new ApplicationType(appTypeName,actions,searchIndex,saveIndex,resourceComp);    ApplicationTypeManager.saveApplicationType(getAdminSubject(),applType);    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-application-type-succeeded"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_APPLICATION_TYPE",params);  } catch (  ClassCastException e) {    String[] paramExs={appTypeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION_TYPE",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  EntitlementException e) {    String[] paramExs={appTypeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION_TYPE",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  InstantiationException e) {    String[] paramExs={appTypeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION_TYPE",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IllegalAccessException e) {    String[] paramExs={appTypeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION_TYPE",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  CLIException e) {    String[] paramExs={appTypeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION_TYPE",paramExs);    throw e;  }}  }
class C{  public Object mapToNativeSubject(List xacmlContextSubjects) throws XACMLException {  if (xacmlContextSubjects == null) {    return null;  }  String sid=null;  String userName=null;  for (Iterator iter=xacmlContextSubjects.iterator(); iter.hasNext(); ) {    Subject subject=(Subject)iter.next();    if (subject == null) {      continue;    }    URI subjectCategory=subject.getSubjectCategory();    if ((subjectCategory != null) && (!subjectCategory.toString().equals(XACMLConstants.ACCESS_SUBJECT))) {      continue;    }    List attributes=subject.getAttributes();    if (attributes != null) {      for (int count=0; count < attributes.size(); count++) {        Attribute attr=(Attribute)attributes.get(count);        if (attr != null) {          URI tmpURI=attr.getAttributeId();          if (tmpURI.toString().equals(XACMLConstants.SUBJECT_ID)) {            tmpURI=attr.getDataType();            if (tmpURI.toString().equals(XACMLConstants.OPENSSO_SESSION_ID)) {              Element sidElement=(Element)attr.getAttributeValues().get(0);              sid=XMLUtils.getElementValue(sidElement);            } else             if (tmpURI.toString().equals(XACMLConstants.X500NAME)) {              Element sidElement=(Element)attr.getAttributeValues().get(0);              userName=XMLUtils.getElementValue(sidElement);            } else             if (tmpURI.toString().equals(XACMLConstants.SAML2_NAMEID)) {              Element sidElement=(Element)attr.getAttributeValues().get(0);              String nameID=XMLUtils.getElementValue(sidElement);              if (nameID != null) {                userName=(String)IDPCache.userIDByTransientNameIDValue.get(nameID);              }            }          }        }      }    }  }  SSOToken ssoToken=null;  if (sid != null) {    try {      SSOTokenManager tokenManager=SSOTokenManager.getInstance();      ssoToken=tokenManager.createSSOToken(sid);    } catch (    SSOException ssoExp) {      if (XACMLSDKUtils.debug.messageEnabled()) {        XACMLSDKUtils.debug.message("FMSubjectMapper.mapToNativeSubject()" + ":caught SSOException:",ssoExp);      }    }  }  if ((ssoToken == null) && (userName != null)) {    try {      ssoToken=createFMSession(userName);    } catch (    SessionException se) {      if (XACMLSDKUtils.debug.messageEnabled()) {        XACMLSDKUtils.debug.message("FMSubjectMapper.mapToNativeSubject()" + ":caught SessionException:",se);      }    }  }  return ssoToken;}  }
class C{  @Override public void validate(){}  }
class C{  public void testCompareGreaterScale1(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=28;  String b="4573563567890295784902768787678287";  int bScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public Set schemaSubEntries(String tokenID,String dn,String filter,String sidFilter,int numOfEntries,boolean sortResults,boolean ao) throws SMSException, SSOException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::subentries dn: " + dn);  }  CachedSubEntries ce=CachedSubEntries.getInstance(getToken(tokenID),dn);  return (ce.getSchemaSubEntries(getToken(tokenID),filter,sidFilter));}  }
class C{  private void loadImage(){  URL src=getImageURL();  Image newImage=null;  if (src != null) {    Dictionary cache=(Dictionary)getDocument().getProperty(IMAGE_CACHE_PROPERTY);    if (cache != null) {      newImage=(Image)cache.get(src);    } else {      newImage=Toolkit.getDefaultToolkit().createImage(src);      if (newImage != null && getLoadsSynchronously()) {        ImageIcon ii=new ImageIcon();        ii.setImage(newImage);      }    }  }  image=newImage;}  }
class C{  public void clear(){  table=null;}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public ResourceResults(Set resourceResults){  if (resourceResults != null) {    this.resourceResults=resourceResults;  }}  }
class C{  public void callback(String instanceId,String callback,String data){  callback(instanceId,callback,data,false);}  }
class C{  protected void registerChildren(){  registerChild(TITLE_HTML_PAGE,StaticTextField.class);  registerChild(COPYRIGHT_TEXT,StaticTextField.class);  registerChild(ERROR_TITLE,StaticTextField.class);  registerChild(ERROR_MSG,StaticTextField.class);  registerChild(INFO_MSG,StaticTextField.class);  registerChild(LBL_SUN_LOGO,StaticTextField.class);  registerChild(LBL_PRODUCT,StaticTextField.class);  registerChild(LBL_JAVA_LOGO,StaticTextField.class);}  }
class C{  public FSAssertionStats(Map table,String realm,String providerId){  this.table=table;  this.realm=realm;  this.providerId=providerId;}  }
class C{  @Override public void write(char[] chr,int st,int len) throws IOException {  try {    beforeWrite(len);    out.write(chr,st,len);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private boolean isReplicaOfflineMsgOutdated(final ReplicaOfflineMsg offlineMsg,final UpdateMsg updateMsg){  return offlineMsg != null && updateMsg != null && offlineMsg.getCSN().isOlderThanOrEqualTo(updateMsg.getCSN());}  }
class C{  public void updateBackendIndexes(String backendName){  backendIndexesPanel.update(backendName);  ((CardLayout)mainPanel.getLayout()).show(mainPanel,backendIndexesPanel.getTitle().toString());}  }
class C{  public boolean remove(Object o){  if (o == null) {    for (int index=0; index < size; index++)     if (elementData[index] == null) {      fastRemove(index);      return true;    }  } else {    for (int index=0; index < size; index++)     if (o.equals(elementData[index])) {      fastRemove(index);      return true;    }  }  return false;}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder(150);  xml.append("<NamingRequest vers=").append(QUOTE).append(requestVersion).append(QUOTE).append(" reqid=").append(QUOTE).append(requestID);  if (sessionId != null) {    xml.append(QUOTE).append(" sessid=").append(QUOTE).append(sessionId);  }  if (preferredNamingURL != null) {    xml.append(QUOTE).append(" preferredNamingURL=");    xml.append(QUOTE).append(preferredNamingURL);  }  xml.append(QUOTE).append('>').append(NL);  xml.append("<GetNamingProfile>").append(NL);  xml.append("</GetNamingProfile>").append(NL);  xml.append("</NamingRequest>");  return xml.toString();}  }
class C{  @Fluent public Job onRemove(Handler<JsonObject> removeHandler){  this.on("start",null);  return this;}  }
class C{  public boolean seekToProgress(SongDetail mSongDetail,float progress){  if (audioTrackPlayer == null && audioPlayer == null) {    return false;  }  try {    if (audioPlayer != null) {      int seekTo=(int)(audioPlayer.getDuration() * progress);      audioPlayer.seekTo(seekTo);      lastProgress=seekTo;    }  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public static NSObject parse(InputStream is) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {  return parse(readAll(is));}  }
class C{  public static void addAttributes(SerializationHandler handler,int src) throws TransformerException {  TransformerImpl transformer=(TransformerImpl)handler.getTransformer();  DTM dtm=transformer.getXPathContext().getDTM(src);  for (int node=dtm.getFirstAttribute(src); DTM.NULL != node; node=dtm.getNextAttribute(node)) {    addAttribute(handler,node);  }}  }
class C{  public boolean containsValue(Object value){  value=maskNull(value);  for (  Object val : vals)   if (value.equals(val))   return true;  return false;}  }
class C{  private boolean isSuperResourceResultOf(ResourceResult resourceResult,ResourceName resourceComparator) throws PolicyException {  boolean isSuperResource=false;  if (VIRTUAL_ROOT.equals(resourceName)) {    isSuperResource=true;  } else   if (resourceComparator != null) {    boolean interpretWildCard=false;    ResourceMatch resourceMatch=resourceComparator.compare(resourceName,resourceResult.resourceName,interpretWildCard);    if (resourceMatch.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {      isSuperResource=true;    } else     if (resourceResult.resourceName.indexOf('*') != -1) {      String resResultResName=resourceResult.resourceName;      String substrResultResName=resResultResName.substring(0,resResultResName.indexOf('*'));      if (resourceName.startsWith(substrResultResName)) {        if (policyDecision == null || policyDecision.getActionDecisions().isEmpty()) {          policyDecision=resourceResult.policyDecision;        }      }    }  } else {    isSuperResource=resourceResult.resourceName.startsWith(resourceName);  }  return isSuperResource;}  }
class C{  public TaskRunnable next(){  return nextTask;}  }
class C{  @Override public Promise<AuthStatus,AuthenticationException> secureResponse(MessageInfoContext messageInfo,Subject serviceSubject){  return newResultPromise(SEND_SUCCESS);}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public javax.sip.header.Header createHeader(String headerName,String headerValue) throws java.text.ParseException {  if (headerName == null)   throw new NullPointerException("header name is null");  String hdrText=new StringBuilder().append(headerName).append(":").append(headerValue).toString();  return createHeader(hdrText);}  }
class C{  public Set createUsers(Map usersMap) throws AMException, SSOException {  Set usersSet=new HashSet();  Set serviceNames=getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);  }  Iterator iter=usersMap.keySet().iterator();  while (iter.hasNext()) {    String userName=(String)iter.next();    String userDN=AMNamingAttrManager.getNamingAttr(USER) + "=" + userName+ ","+ super.entryDN;    AMUserImpl user=new AMUserImpl(super.token,userDN);    Map userMap=(Map)usersMap.get(userName);    user.setAttributes(userMap);    if (objectClasses != null && !objectClasses.isEmpty()) {      Set existingOC=(Set)userMap.get("objectclass");      if (existingOC != null && !existingOC.isEmpty())       objectClasses=AMCommonUtils.combineOCs(objectClasses,existingOC);      user.setAttribute("objectclass",objectClasses);    }    user.create();    usersSet.add(user);  }  return usersSet;}  }
class C{  public static CancelExtendedRequest copyOfCancelExtendedRequest(final CancelExtendedRequest request){  return new CancelExtendedRequestImpl(request);}  }
class C{  private void createTable(String tableName) throws SQLException, UnsupportedEncodingException {  StringBuffer sbuffer=new StringBuffer();  String oracleTableName=new String(tableName.getBytes("UTF-8")).toUpperCase();  try {    if (!isMySQL) {      sbuffer.append("SELECT COUNT(table_name) FROM all_tables WHERE table_name = ");      sbuffer.append("'").append(oracleTableName).append("'");    } else {      sbuffer.append("SHOW TABLES LIKE ");      sbuffer.append("'").append((new String(tableName.getBytes("UTF-8")))).append("'");    }    boolean foundTable=false;    Statement stmt=null;    ResultSet rs=null;    try {      stmt=conn.createStatement();      rs=stmt.executeQuery(sbuffer.toString());      if (isMySQL) {        String result=null;        while (rs.next()) {          result=rs.getString(1);        }        if (result != null && result.equalsIgnoreCase(tableName)) {          foundTable=true;        }      } else {        int result=0;        while (rs.next()) {          result=rs.getInt(1);        }        if (result == 1) {          foundTable=true;        }      }    }  finally {      closeResultSet(rs);      closeStatement(stmt);    }    if (foundTable == true) {      String getColNames=null;      if (isMySQL) {        getColNames="SHOW COLUMNS from " + tableName;      } else {        getColNames="SELECT column_name FROM USER_TAB_COLUMNS WHERE Table_Name = '" + oracleTableName + "'";      }      Set<String> colSet=new HashSet<String>();      try {        stmt=conn.createStatement();        try {          rs=stmt.executeQuery(getColNames);        } catch (        SQLException sqe) {          Debug.error("DBHandler:createTable: '" + getColNames + "'; error ("+ sqe.getErrorCode()+ "); msg = "+ sqe.getMessage());          return;        }        ResultSetMetaData rsmd=rs.getMetaData();        int numCols=rsmd.getColumnCount();        String colName=null;        while (rs.next()) {          colName=rs.getString(1);          colSet.add(colName);          for (int i=0; i < numCols; i++) {            colName=rs.getString(i + 1);          }        }      }  finally {        closeResultSet(rs);        closeStatement(stmt);      }      StringBuilder colList=new StringBuilder();      String[] allFields=lmanager.getAllFields();      boolean addedOne=false;      String tmpx=null;      for (int i=2; i < allFields.length - 1; i++) {        if (isMySQL) {          tmpx=allFields[i];        } else {          tmpx=allFields[i].toUpperCase();        }        if (!colSet.contains(tmpx)) {          if (addedOne) {            colList.append(", ");          }          colList.append(allFields[i]).append(" VARCHAR(255)");          addedOne=true;        }      }      if (colList.length() > 0) {        String altStr="ALTER TABLE " + tableName + " ADD ("+ colList.toString()+ ")";        try {          stmt=conn.createStatement();          stmt.execute(altStr);        } catch (        SQLException sqle) {          Debug.error("DBHandler:createTable: '" + altStr + "'; error ("+ sqle.getErrorCode()+ "); msg = "+ sqle.getMessage());        } finally {          closeStatement(stmt);        }      }      return;    }  } catch (  SQLException e) {    Debug.error(tableName + ":DBHandler:createTable:Query:SQLException (" + e.getErrorCode()+ "): "+ e.getMessage());    throw e;  }catch (  UnsupportedEncodingException use) {    Debug.error(tableName + ":DBHandler:createTable:Query:UE: " + use.getMessage());    throw use;  }  sbuffer=new StringBuffer();  try {    sbuffer.append("CREATE TABLE ").append(new String(tableName.getBytes("UTF-8")));  } catch (  UnsupportedEncodingException uee) {    Debug.error(tableName + ":DBHandler: unsupported encoding exception uee",uee);  }  String varCharX="VARCHAR2";  if (isMySQL) {    sbuffer.append(" (TIME DATETIME, ");  } else {    sbuffer.append(" (TIME DATE, ");  }  if (isMySQL) {    varCharX="VARCHAR";    sbuffer.append(" DATA ").append(mysqlDataType).append(", ");  } else {    sbuffer.append(" DATA ").append(oraDataType).append(", ");  }  String[] allFields=lmanager.getAllFields();  int i=0;  for (i=2; i < allFields.length - 1; i++) {    sbuffer.append(allFields[i]).append(" ").append(varCharX).append(" (255), ");  }  sbuffer.append(allFields[i]).append(" ").append(varCharX).append(" (255)) ");  String createString=sbuffer.toString();  Statement stmt=null;  try {    stmt=conn.createStatement();    if (Debug.messageEnabled()) {      Debug.message(tableName + ":DBHandler: the query string for creating is " + createString);    }    stmt.executeUpdate(createString);  } catch (  SQLException sqe) {    Debug.error(tableName + ":DBHandler:createTable:Execute:SQLEx (" + sqe.getErrorCode()+ "): "+ sqe.getMessage());    throw sqe;  } finally {    closeStatement(stmt);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagnamenomatch.class,args);}  }
class C{  public static String interpreterCall(boolean isTagFile,String expression,Class<?> expectedType,String fnmapvar){  String jspCtxt=null;  if (isTagFile) {    jspCtxt="this.getJspContext()";  } else {    jspCtxt="_jspx_page_context";  }  String returnType=expectedType.getCanonicalName();  String targetType=returnType;  String primitiveConverterMethod=null;  if (expectedType.isPrimitive()) {    if (expectedType.equals(Boolean.TYPE)) {      returnType=Boolean.class.getName();      primitiveConverterMethod="booleanValue";    } else     if (expectedType.equals(Byte.TYPE)) {      returnType=Byte.class.getName();      primitiveConverterMethod="byteValue";    } else     if (expectedType.equals(Character.TYPE)) {      returnType=Character.class.getName();      primitiveConverterMethod="charValue";    } else     if (expectedType.equals(Short.TYPE)) {      returnType=Short.class.getName();      primitiveConverterMethod="shortValue";    } else     if (expectedType.equals(Integer.TYPE)) {      returnType=Integer.class.getName();      primitiveConverterMethod="intValue";    } else     if (expectedType.equals(Long.TYPE)) {      returnType=Long.class.getName();      primitiveConverterMethod="longValue";    } else     if (expectedType.equals(Float.TYPE)) {      returnType=Float.class.getName();      primitiveConverterMethod="floatValue";    } else     if (expectedType.equals(Double.TYPE)) {      returnType=Double.class.getName();      primitiveConverterMethod="doubleValue";    }  }  targetType=toJavaSourceType(targetType);  StringBuilder call=new StringBuilder("(" + returnType + ") "+ "org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate"+ "("+ Generator.quote(expression)+ ", "+ targetType+ ".class, "+ "(javax.servlet.jsp.PageContext)"+ jspCtxt+ ", "+ fnmapvar+ ")");  if (primitiveConverterMethod != null) {    call.insert(0,"(");    call.append(")." + primitiveConverterMethod + "()");  }  return call.toString();}  }
class C{  public static FSResponse parseBASE64EncodedString(String encodedRes) throws FSMsgException, SAMLException {  FSUtils.debug.message("FSResponse.parseBASE64EncodedString:Called new");  if (encodedRes != null) {    String decodedAuthnRes=new String(Base64.decode(encodedRes));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSResponse.parseBASE64EncodedString:" + "Decoded AuthnResponse message: " + decodedAuthnRes);    }    return parseResponseXML(decodedAuthnRes);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSResponse.parseBASE64EncodedString:" + "null String passed in as argument.");    }    throw new FSMsgException("nullInput",null);  }}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String providerAlias=FSServiceUtils.getMetaAlias(request);  if (providerAlias == null || providerAlias.length() < 1) {    FSUtils.debug.error("Unable to retrieve alias, Hosted " + "Provider. Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  if (metaManager == null) {    FSUtils.debug.error("Cannot retrieve hosted descriptor. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);  ProviderDescriptorType hostedProviderDesc=null;  BaseConfigType hostedConfig=null;  String hostedEntityId=null;  String hostedProviderRole=null;  try {    hostedProviderRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.IDP)) {      hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);    } else     if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {      hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);    }    if (hostedProviderDesc == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException eam) {    FSUtils.debug.error("Unable to find Hosted Provider. not process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  this.request=request;  setRegistrationURL(hostedConfig,providerAlias);  FSNameRegistrationRequest regisRequest=new FSNameRegistrationRequest();  try {    regisRequest=FSNameRegistrationRequest.parseURLEncodedRequest(request);  } catch (  FSMsgException e) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_REQUEST_IMPROPER,IFSConstants.REGISTRATION_FAILED);    return;  }catch (  SAMLException e) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_REQUEST_IMPROPER,IFSConstants.REGISTRATION_FAILED);    return;  }  if (regisRequest == null) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_REQUEST_IMPROPER,IFSConstants.REGISTRATION_FAILED);  } else {    doRequestProcessing(request,response,hostedProviderDesc,hostedConfig,hostedProviderRole,realm,hostedEntityId,providerAlias,regisRequest);  }}  }
class C{  public static boolean isServicePassed(){  return servicePassed;}  }
class C{  public boolean containsAll(Collection<?> c){  if (!(c instanceof RegularEnumSet))   return super.containsAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType)   return es.isEmpty();  return (es.elements & ~elements) == 0;}  }
class C{  public static boolean isSynthetic(int mod){  return (mod & ACC_SYNTHETIC) != 0;}  }
class C{  public void create(T obj) throws ServerException {  Token token=adapter.toToken(obj);  SyncResultHandler<Token> handler=new SyncResultHandler<Token>();  try {    taskExecutor.execute(token.getTokenId(),taskFactory.create(token,handler));    handler.getResults();  } catch (  ServerException e) {    throw e;  }catch (  DataLayerException e) {    if (debug.warningEnabled()) {      debug.warning("Unable to create token corresponding",e);    }    throw new ServerException("Could not create token in token data store: " + e.getMessage());  }}  }
class C{  public void deleteIDRepos(String realmName,Set names) throws AMConsoleException {  String[] params=new String[2];  params[0]=realmName;  String curName="";  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,getUserSSOToken());    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realmName,null);    for (Iterator iter=names.iterator(); iter.hasNext(); ) {      String name=(String)iter.next();      curName=name;      params[1]=name;      logEvent("ATTEMPT_DELETE_ID_REPO",params);      cfg.removeSubConfig(name);      logEvent("SUCCEED_DELETE_ID_REPO",params);    }  } catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={realmName,curName,strError};    logEvent("SMS_EXCEPTION_DELETE_ID_REPO",paramsEx);    throw new AMConsoleException(strError);  }catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={realmName,curName,strError};    logEvent("SSO_EXCEPTION_DELETE_ID_REPO",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public synchronized boolean isDestroyed(){  return destroyed;}  }
class C{  public String toString(){  return ("AuthenticatorPushPrincipal:  " + name);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RecipientTokenElement createRecipientTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RecipientTokenElementImpl();}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  final Request request=requestEvent.getRequest();  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    final String toTag="" + System.nanoTime();    Response response=messageFactory.createResponse(Response.RINGING,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag(toTag);    sipProvider.sendResponse(response);    response=messageFactory.createResponse(Response.OK,request);    final Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    final ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag(toTag);    response.addHeader(contactHeader);    sipProvider.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#characters: " + start + ", "+ length);  if (m_contentHandler != null) {    m_contentHandler.characters(ch,start,length);  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(DatastoreOptions.DATASTORE_NAME);  validateRealm(realm);  String[] params={realm,name};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_DATASTORE",params);  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,adminSSOToken);    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realm,null);    if (cfg != null) {      ServiceConfig ss=cfg.getSubConfig(name);      if (ss != null) {        Set passwords=CLIUtil.getPasswordFields(IdConstants.REPO_SERVICE,SchemaType.ORGANIZATION,ss.getSchemaID());        Map attributesValues=ss.getAttributes();        getOutputWriter().printlnMessage(FormatUtils.printAttributeValues("{0}={1}",attributesValues,passwords));      } else {        getOutputWriter().printlnMessage(getResourceString("datastore-show-datastore-not-found"));      }    } else {      getOutputWriter().printlnMessage(getResourceString("datastore-show-datastore-not-found"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_SHOW_DATASTORE",params);  } catch (  SMSException e) {    String[] p={realm,name,e.getMessage()};    debugError("ShowDataStore.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_DATASTORE",p);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] p={realm,name,e.getMessage()};    debugError("ShowDataStore.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_DATASTORE",p);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String desc,String targetFrame){  super(source,type,targetURL,desc);  this.targetFrame=targetFrame;}  }
class C{  public static PropertyException defaultBehaviorException(final PropertyDefinition<?> pd,final Throwable cause){  return new PropertyException(pd,ERR_DEFAULT_BEHAVIOR_PROPERTY_EXCEPTION.get(pd.getName()),cause);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider02(){  try {    TrustManagerFactory.getInstance(null,getDefaultProvider());    fail("");  } catch (  NoSuchAlgorithmException expected) {  }catch (  NullPointerException expected) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],getDefaultProvider());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public byte[] decrypt(byte[] data) throws CryptoException {  try {    byte[] plaintext;    if (useExplicitIv) {      decryptIv=new IvParameterSpec(Arrays.copyOf(data,decryptCipher.getBlockSize()));    }    if (tlsContext.getMyConnectionEnd() == ConnectionEnd.CLIENT) {      decryptCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(serverWriteKey,bulkCipherAlg.getJavaName()),decryptIv);    } else {      decryptCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(clientWriteKey,bulkCipherAlg.getJavaName()),decryptIv);    }    if (useExplicitIv) {      plaintext=decryptCipher.doFinal(Arrays.copyOfRange(data,decryptCipher.getBlockSize(),data.length));    } else {      plaintext=decryptCipher.doFinal(data);      decryptIv=new IvParameterSpec(Arrays.copyOfRange(data,data.length - decryptCipher.getBlockSize(),data.length));    }    return plaintext;  } catch (  BadPaddingException|IllegalBlockSizeException|InvalidAlgorithmParameterException|InvalidKeyException|UnsupportedOperationException ex) {    throw new CryptoException(ex);  }}  }
class C{  public void scrollRectToVisible(Rectangle aRect){  Container parent;  int dx=getX(), dy=getY();  for (parent=getParent(); !(parent == null) && !(parent instanceof JComponent) && !(parent instanceof CellRendererPane); parent=parent.getParent()) {    Rectangle bounds=parent.getBounds();    dx+=bounds.x;    dy+=bounds.y;  }  if (!(parent == null) && !(parent instanceof CellRendererPane)) {    aRect.x+=dx;    aRect.y+=dy;    ((JComponent)parent).scrollRectToVisible(aRect);    aRect.x-=dx;    aRect.y-=dy;  }}  }
class C{  public int position(){  return pos;}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  MetaMessage event=new MetaMessage(newData);  return event;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  @Override public AvroGenerator createGenerator(OutputStream out) throws IOException {  IOContext ctxt=_createContext(out,false);  return _createGenerator(_decorate(out,ctxt),ctxt);}  }
class C{  protected void sendResponse(SIPResponse transactionResponse) throws IOException {  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("sipServerTransaction::sendResponse " + transactionResponse.getFirstLine());  }  try {    if (isReliable()) {      getMessageChannel().sendMessage(transactionResponse);    } else {      Via via=transactionResponse.getTopmostVia();      String transport=via.getTransport();      if (transport == null)       throw new IOException("missing transport!");      int port=via.getRPort();      if (port == -1)       port=via.getPort();      if (port == -1) {        if (transport.equalsIgnoreCase("TLS"))         port=5061; else         port=5060;      }      String host=null;      if (via.getMAddr() != null) {        host=via.getMAddr();      } else {        host=via.getParameter(Via.RECEIVED);        if (host == null) {          host=via.getHost();        }      }      Hop hop=sipStack.addressResolver.resolveAddress(new HopImpl(host,port,transport));      MessageChannel messageChannel=((SIPTransactionStack)getSIPStack()).createRawMessageChannel(this.getSipProvider().getListeningPoint(hop.getTransport()).getIPAddress(),this.getPort(),hop);      if (messageChannel != null) {        messageChannel.sendMessage(transactionResponse);        lastResponseHost=host;        lastResponsePort=port;        lastResponseTransport=transport;      } else {        throw new IOException("Could not create a message channel for " + hop + " with source IP:Port "+ this.getSipProvider().getListeningPoint(hop.getTransport()).getIPAddress()+ ":"+ this.getPort());      }    }    lastResponseAsBytes=transactionResponse.encodeAsBytes(this.getTransport());    lastResponse=null;  }  finally {    this.startTransactionTimer();  }}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec10(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null);  } catch (  Exception e) {    fail("Unexpected exception is thrown");  }}  }
class C{  private String cleanInput(String input){  if (input == null) {    return null;  }  input=input.trim();  if (input.length() == 0) {    return null;  }  return input.toUpperCase();}  }
class C{  public void startElement(String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  NamespaceSupport nssupport=this.getNamespaceSupport();  nssupport.pushContext();  int n=m_prefixMappings.size();  for (int i=0; i < n; i++) {    String prefix=(String)m_prefixMappings.elementAt(i++);    String nsURI=(String)m_prefixMappings.elementAt(i);    nssupport.declarePrefix(prefix,nsURI);  }  m_prefixMappings.removeAllElements();  m_elementID++;  checkForFragmentID(attributes);  if (!m_shouldProcess)   return;  flushCharacters();  pushSpaceHandling(attributes);  XSLTElementProcessor elemProcessor=getProcessorFor(uri,localName,rawName);  if (null != elemProcessor) {    this.pushProcessor(elemProcessor);    elemProcessor.startElement(this,uri,localName,rawName,attributes);  } else {    m_shouldProcess=false;    popSpaceHandling();  }}  }
class C{  public static boolean is02ConfigLdif(String schemaFile){  return CONFIG_SCHEMA_ELEMENTS_FILE.equals(schemaFile);}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public DecisionImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("DecisionImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  public String unmarshal(String text){  if (text == null)   return null;  int i=text.length() - 1;  while (i >= 0 && !isWhiteSpaceExceptSpace(text.charAt(i)))   i--;  if (i < 0)   return text;  char[] buf=text.toCharArray();  buf[i--]=' ';  for (; i >= 0; i--)   if (isWhiteSpaceExceptSpace(buf[i]))   buf[i]=' ';  return new String(buf);}  }
class C{  public void twoPath(Object obj1,Object obj2,int x){  Object localObj;synchronized (obj1) {synchronized (obj2) {      if (x == 0) {        localObj=obj2;      } else {        localObj=obj1;      }    }  }  doNothing(localObj);}  }
class C{  public Object extFunction(FuncExtFunction extFunction,Vector argVec) throws javax.xml.transform.TransformerException {  try {    String namespace=extFunction.getNamespace();    String functionName=extFunction.getFunctionName();    int arity=extFunction.getArgCount();    javax.xml.namespace.QName myQName=new javax.xml.namespace.QName(namespace,functionName);    if (extensionInvocationDisabled) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{myQName.toString()});      throw new XPathFunctionException(fmsg);    }    XPathFunction xpathFunction=resolver.resolveFunction(myQName,arity);    ArrayList argList=new ArrayList(arity);    for (int i=0; i < arity; i++) {      Object argument=argVec.elementAt(i);      if (argument instanceof XNodeSet) {        argList.add(i,((XNodeSet)argument).nodelist());      } else       if (argument instanceof XObject) {        Object passedArgument=((XObject)argument).object();        argList.add(i,passedArgument);      } else {        argList.add(i,argument);      }    }    return (xpathFunction.evaluate(argList));  } catch (  XPathFunctionException xfe) {    throw new org.apache.xml.utils.WrappedRuntimeException(xfe);  }catch (  Exception e) {    throw new javax.xml.transform.TransformerException(e);  }}  }
class C{  public Object clone(){  Object o;  try {    o=super.clone();  } catch (  CloneNotSupportedException cnse) {    o=null;  }  return o;}  }
class C{  public ConfigException createDecodingExceptionAdaptor(DN dn,DefinitionDecodingException e){  LocalizableMessage message=ERR_ADMIN_MANAGED_OBJECT_DECODING_PROBLEM.get(dn,stackTraceToSingleLineString(e,true));  return new ConfigException(message,e);}  }
class C{  @Override public void showProgress(){  if (mProgressDialog == null) {    mProgressDialog=ProgressDialog.show(getActivity(),getString(R.string.dialog_loading_title),getString(R.string.dialog_loading_shots),true);  }  mProgressDialog.show();}  }
class C{  public BadPasswordException(String message){  super(message);}  }
class C{  public JsonValue exportJson(){  JsonValue properties=RecordProperties.toJson(this.getRecordProperties());  properties.put(STATUS_LABEL,getRecordStatus().toString());  properties.put(FOLDER_LABEL,getFolderPath() + File.separator);  return properties;}  }
class C{  public boolean hasNonNullValueForProperty(String key){  return hasProperty(key) && !getProperty(key).isJsonNull();}  }
class C{  @GET @Produces("application/json") @Path("{token.id}") public Response readToken(@Context HttpHeaders headers,@Context HttpServletRequest request,@PathParam("token.id") String tokenId){  try {    String tokenVal=CoreTokenStoreFactory.getInstance().readToken(CoreTokenUtils.getAdminSubject(),tokenId);    JSONObject jObj=new JSONObject(tokenVal);    String eTag=jObj.getJSONArray(CoreTokenConstants.VERSION_TAG).getString(0);    jObj.remove(CoreTokenConstants.VERSION_TAG);    Response.ResponseBuilder builder=Response.status(200);    builder.entity(jObj.toString());    builder.type("application/json");    builder.header("ETag",eTag);    Response retResponse=builder.build();    String[] data=new String[]{jObj.getJSONArray(CoreTokenConstants.TOKEN_TYPE).toString(),jObj.getJSONArray(CoreTokenConstants.TOKEN_SUBJECT).toString()};    TokenLogUtils.access(Level.INFO,TokenLogUtils.TOKEN_READ_SUCCESS,data,null,tokenId);    return retResponse;  } catch (  CoreTokenException ce) {    CoreTokenUtils.debug.error("CoreTokenResource.readToken",ce);    String[] data=new String[]{ce.getLocalizedMessage()};    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_READ_TOKEN,data,null,tokenId);    throw getWebApplicationException(headers,ce);  }catch (  JSONException je) {    CoreTokenUtils.debug.error("CoreTokenResource.readToken",je);    String[] data=new String[]{je.getLocalizedMessage()};    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_READ_TOKEN,data,null,tokenId);    throw getWebApplicationException(je,MimeType.PLAIN);  }}  }
class C{  private ObjectDeque<T> register(final K k){  Lock lock=keyLock.readLock();  ObjectDeque<T> objectDeque=null;  try {    lock.lock();    objectDeque=poolMap.get(k);    if (objectDeque == null) {      lock.unlock();      lock=keyLock.writeLock();      lock.lock();      objectDeque=poolMap.get(k);      if (objectDeque == null) {        objectDeque=new ObjectDeque<>(fairness);        objectDeque.getNumInterested().incrementAndGet();        poolMap.put(k,objectDeque);        poolKeyList.add(k);      } else {        objectDeque.getNumInterested().incrementAndGet();      }    } else {      objectDeque.getNumInterested().incrementAndGet();    }  }  finally {    lock.unlock();  }  return objectDeque;}  }
class C{  protected PooledConnection create(boolean incrementCounter){  if (incrementCounter)   size.incrementAndGet();  PooledConnection con=new PooledConnection(getPoolProperties(),this);  return con;}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);return local;}  }
class C{  public void destroyFloat(){  hideFloat();  if (mFloatMenu != null) {    mFloatMenu.destroy();  }  mFloatMenu=null;}  }
class C{  @Override protected SmileParser _createParser(InputStream in,IOContext ctxt) throws IOException {  SmileParserBootstrapper bs=new SmileParserBootstrapper(ctxt,in);  return bs.constructParser(_factoryFeatures,_parserFeatures,_smileParserFeatures,_objectCodec,_byteSymbolCanonicalizer);}  }
class C{  public AccessToken requestAccessToken(OAuth2Request request) throws RedirectUriMismatchException, InvalidClientException, InvalidRequestException, InvalidCodeException, InvalidGrantException, ServerException, UnauthorizedClientException, InvalidScopeException, NotFoundException, AuthorizationPendingException, ExpiredTokenException, AuthorizationDeclinedException, BadRequestException {  final String grantType=request.getParameter(GRANT_TYPE);  final GrantTypeHandler grantTypeHandler=grantTypeHandlers.get(grantType);  if (grantTypeHandler == null) {    throw new InvalidGrantException("Unknown Grant Type, " + grantType);  }  return grantTypeHandler.handle(request);}  }
class C{  private static XMPNode followXPathStep(XMPNode parentNode,XMPPathSegment nextStep,boolean createNodes) throws XMPException {  XMPNode nextNode=null;  int index=0;  int stepKind=nextStep.getKind();  if (stepKind == XMPPath.STRUCT_FIELD_STEP) {    nextNode=findChildNode(parentNode,nextStep.getName(),createNodes);  } else   if (stepKind == XMPPath.QUALIFIER_STEP) {    nextNode=findQualifierNode(parentNode,nextStep.getName().substring(1),createNodes);  } else {    if (!parentNode.getOptions().isArray()) {      throw new XMPException("Indexing applied to non-array",XMPError.BADXPATH);    }    if (stepKind == XMPPath.ARRAY_INDEX_STEP) {      index=findIndexedItem(parentNode,nextStep.getName(),createNodes);    } else     if (stepKind == XMPPath.ARRAY_LAST_STEP) {      index=parentNode.getChildrenLength();    } else     if (stepKind == XMPPath.FIELD_SELECTOR_STEP) {      String[] result=Utils.splitNameAndValue(nextStep.getName());      String fieldName=result[0];      String fieldValue=result[1];      index=lookupFieldSelector(parentNode,fieldName,fieldValue);    } else     if (stepKind == XMPPath.QUAL_SELECTOR_STEP) {      String[] result=Utils.splitNameAndValue(nextStep.getName());      String qualName=result[0];      String qualValue=result[1];      index=lookupQualSelector(parentNode,qualName,qualValue,nextStep.getAliasForm());    } else {      throw new XMPException("Unknown array indexing step in FollowXPathStep",XMPError.INTERNALFAILURE);    }    if (1 <= index && index <= parentNode.getChildrenLength()) {      nextNode=parentNode.getChild(index);    }  }  return nextNode;}  }
class C{  public ByteHolder(){}  }
class C{  private static HttpHost[] toChain(HttpHost[] proxies){  if ((proxies == null) || (proxies.length < 1))   return null;  for (  HttpHost proxy : proxies) {    if (proxy == null)     throw new IllegalArgumentException("Proxy chain may not contain null elements.");  }  HttpHost[] result=new HttpHost[proxies.length];  System.arraycopy(proxies,0,result,0,proxies.length);  return result;}  }
class C{  protected ResourceMatch compare(String resource1,String resource2){  if (resourceNameUtil == null) {    return (ResourceMatch.NO_MATCH);  }  return (resourceNameUtil.compare(resource1,resource2,true));}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult matched=EnumEvalResult.FALSE;  String[] remoteHost=evalCtx.getHostName().split("\\.",-1);  for (  String p : patterns) {    String[] pat=p.split("\\.",-1);    if (evalHostName(remoteHost,pat)) {      matched=EnumEvalResult.TRUE;      break;    }  }  return matched.getRet(type,false);}  }
class C{  protected void ensureMyLastProtocolMessagesHaveRecords(List<ProtocolMessage> protocolMessages){  for (int pmPointer=0; pmPointer < protocolMessages.size(); pmPointer++) {    ProtocolMessage pm=protocolMessages.get(pmPointer);    if (handlingMyLastProtocolMessageWithContentType(protocolMessages,pmPointer)) {      if (pm.getRecords() == null || pm.getRecords().isEmpty()) {        pm.addRecord(new Record());      }    }  }}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public int size(){synchronized (eventsList) {    return eventsList.size();  }}  }
class C{  public org.w3c.dom.Document decryptAndReplace(org.w3c.dom.Document encryptedDoc,java.lang.String kekAlias) throws EncryptionException {  return ep.decryptAndReplace(encryptedDoc,kekAlias);}  }
class C{  public static Reflect on(String name) throws ReflectException {  return on(forName(name));}  }
class C{  public static synchronized Level parse(String name) throws IllegalArgumentException {  name.length();  KnownLevel level;  level=KnownLevel.findByName(name);  if (level != null) {    return level.levelObject;  }  try {    int x=Integer.parseInt(name);    level=KnownLevel.findByValue(x);    if (level == null) {      Level levelObject=new Level(name,x);      level=KnownLevel.findByValue(x);    }    return level.levelObject;  } catch (  NumberFormatException ex) {  }  level=KnownLevel.findByLocalizedLevelName(name);  if (level != null) {    return level.levelObject;  }  throw new IllegalArgumentException("Bad level \"" + name + "\"");}  }
class C{  protected static boolean isExternalGetAttributesEnabled(String orgDN){  Set attrVal;  SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  try {    ServiceConfig sc=AMServiceUtils.getOrgConfig(token,orgDN,ADMINISTRATION_SERVICE);    if (sc != null) {      Map attributes=sc.getAttributes();      attrVal=(Set)attributes.get(EXTERNAL_ATTRIBUTES_FETCH_ENABLED_ATTR);    } else {      attrVal=getDefaultGlobalConfig(token,EXTERNAL_ATTRIBUTES_FETCH_ENABLED_ATTR);    }  } catch (  Exception ee) {    attrVal=getDefaultGlobalConfig(token,EXTERNAL_ATTRIBUTES_FETCH_ENABLED_ATTR);  }  boolean enabled=false;  if (attrVal != null && !attrVal.isEmpty()) {    String val=(String)attrVal.iterator().next();    enabled=(val.equalsIgnoreCase("true"));  }  if (debug.messageEnabled()) {    debug.message("AMCommonUtils.isExternalGetAttributeEnabled() = " + enabled);  }  return enabled;}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public String generateLogField(String data,Object[] params) throws Exception {  String log=(String)params[0];  SecureLogHelper helper=SecureFileHandler.getSecureLogHelper(log);  byte[] MAC=helper.generateLogEntryMAC(data);  String sMAC=helper.toHexString(MAC);  return (sMAC);}  }
class C{  public Notification(String type,Object source,long sequenceNumber,long timeStamp,String message){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=timeStamp;  this.message=message;}  }
class C{  protected void printChildren(Graphics g){  paintChildren(g);}  }
class C{  private void deleteRecursively(File file,FileFilter filter) throws ApplicationException {  File cfile;  try {    cfile=file.getCanonicalFile();  } catch (  Exception e) {    cfile=file;  }  if (cfile.exists()) {    if (cfile.isFile()) {      maybeDeleteFile(filter,cfile);    } else {      File[] children=cfile.listFiles();      if (children != null) {        for (        File element : children) {          deleteRecursively(element,filter);        }      }      maybeDeleteFile(filter,cfile);    }  } else {    notifyListeners(getFormattedWarning(INFO_PROGRESS_DELETING_FILE_DOES_NOT_EXIST.get(cfile)));  }}  }
class C{  public void refresh() throws RefreshFailedException {  if (destroyed)   throw new RefreshFailedException("A destroyed ticket " + "cannot be renewd.");  if (!isRenewable())   throw new RefreshFailedException("This ticket is not renewable");  if (System.currentTimeMillis() > getRenewTill().getTime())   throw new RefreshFailedException("This ticket is past " + "its last renewal time.");  Throwable e=null;  sun.security.krb5.Credentials krb5Creds=null;  try {    krb5Creds=new sun.security.krb5.Credentials(asn1Encoding,client.toString(),server.toString(),sessionKey.getEncoded(),sessionKey.getKeyType(),flags,authTime,startTime,endTime,renewTill,clientAddresses);    krb5Creds=krb5Creds.renew();  } catch (  sun.security.krb5.KrbException krbException) {    e=krbException;  }catch (  java.io.IOException ioException) {    e=ioException;  }  if (e != null) {    RefreshFailedException rfException=new RefreshFailedException("Failed to renew Kerberos Ticket " + "for client " + client + " and server "+ server+ " - "+ e.getMessage());    rfException.initCause(e);    throw rfException;  }synchronized (this) {    try {      this.destroy();    } catch (    DestroyFailedException dfException) {    }    init(krb5Creds.getEncoded(),new KerberosPrincipal(krb5Creds.getClient().getName()),new KerberosPrincipal(krb5Creds.getServer().getName(),KerberosPrincipal.KRB_NT_SRV_INST),krb5Creds.getSessionKey().getBytes(),krb5Creds.getSessionKey().getEType(),krb5Creds.getFlags(),krb5Creds.getAuthTime(),krb5Creds.getStartTime(),krb5Creds.getEndTime(),krb5Creds.getRenewTill(),krb5Creds.getClientAddresses());    destroyed=false;  }}  }
class C{  public static String canonicalizePath(String path,boolean discardRelativePrefix){  int segmentStart=0;  int deletableSegments=0;  for (int i=0; i <= path.length(); ) {    int nextSegmentStart;    if (i == path.length()) {      nextSegmentStart=i;    } else     if (path.charAt(i) == '/') {      nextSegmentStart=i + 1;    } else {      i++;      continue;    }    if (i == segmentStart + 1 && path.regionMatches(segmentStart,".",0,1)) {      path=path.substring(0,segmentStart) + path.substring(nextSegmentStart);      i=segmentStart;    } else     if (i == segmentStart + 2 && path.regionMatches(segmentStart,"..",0,2)) {      if (deletableSegments > 0 || discardRelativePrefix) {        deletableSegments--;        int prevSegmentStart=path.lastIndexOf('/',segmentStart - 2) + 1;        path=path.substring(0,prevSegmentStart) + path.substring(nextSegmentStart);        i=segmentStart=prevSegmentStart;      } else {        i++;        segmentStart=i;      }    } else {      if (i > 0) {        deletableSegments++;      }      i++;      segmentStart=i;    }  }  return path;}  }
class C{  public synchronized void enableObjectName(ObjectName objectName) throws IllegalArgumentException {  if (objectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"enableObjectName",objectName);  if (deselectedNames != null) {    if (deselectedNames.size() != 0) {      deselectedNames.remove(objectName);    }  }  if (selectedNames != null) {    if (!(selectedNames.contains(objectName))) {      selectedNames.add(objectName);    }  }  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"enableObjectName");  return;}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  propertyChangeSupport.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public boolean hasEvents(){  return !events.isEmpty();}  }
class C{  private boolean mergePolicyDecisions(PolicyDecision pd,ResourceResult resourceResult,String resourceName,ResourceName resourceComparator,String serviceName) throws PolicyException {  boolean processed=false;  if (debug.messageEnabled()) {    debug.message("ResourceResultCache.mergePolicyDecisions():" + "resourceName=" + resourceName + ":resourceResultResourceName="+ resourceResult.getResourceName());  }  ResourceMatch result=resourceComparator.compare(resourceName,resourceResult.getResourceName(),true);  if (result.equals(ResourceMatch.EXACT_MATCH)) {    resetPolicyDecision(resourceResult.getPolicyDecision(),pd,serviceName);    processed=true;  } else   if (result.equals(ResourceMatch.WILDCARD_MATCH)) {    mergePolicyDecisions(resourceResult.getPolicyDecision(),pd,serviceName);    if (pd.getTimeToLive() < currentTimeMillis()) {      processed=true;    }    if (!processed) {      Set resourceResults=resourceResult.getResourceResults();      Iterator resultsIter=resourceResults.iterator();      while (!processed && resultsIter.hasNext()) {        ResourceResult subResult=(ResourceResult)resultsIter.next();        processed=mergePolicyDecisions(pd,subResult,resourceName,resourceComparator,serviceName);      }    }  } else   if (result.equals(ResourceMatch.SUPER_RESOURCE_MATCH)) {    Set resourceResults=resourceResult.getResourceResults();    Iterator resultsIter=resourceResults.iterator();    while (!processed && resultsIter.hasNext()) {      ResourceResult subResult=(ResourceResult)resultsIter.next();      processed=mergePolicyDecisions(pd,subResult,resourceName,resourceComparator,serviceName);    }  }  return processed;}  }
class C{  public PropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model,Set attributeSchemas) throws SMSException, SSOException {  this.model=model;  this.serviceName=serviceSchema.getServiceName();  getServiceResourceBundle(serviceSchema);  if (serviceBundle != null) {    mapTypeToAttributeSchema=new HashMap(attributeSchemas.size() * 2);    mapTypeToAttributeSchema.put(NULL_TYPE,attributeSchemas);  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  PictureInfoDao.dropTable(db,ifExists);}  }
class C{  private void checkLDIFOutput(Writer writer,String[] expectedLDIF) throws Exception {  BufferedReader reader=writer.getLDIFBufferedReader();  StringBuilder expected=new StringBuilder();  StringBuilder actual=new StringBuilder();  boolean failed=false;  for (  String expectedLine : expectedLDIF) {    String actualLine=reader.readLine();    if (!failed && !actualLine.equals(expectedLine)) {      failed=true;    }    expected.append("    ");    expected.append(expectedLine);    expected.append("\n");    actual.append("    ");    actual.append(actualLine);    actual.append("\n");  }  String actualLine=reader.readLine();  while (actualLine != null) {    if (actualLine.trim().length() != 0) {      failed=true;    }    actual.append("    ");    actual.append(actualLine);    actual.append("\n");    actualLine=reader.readLine();  }  Assert.assertFalse(failed,"expected:\n" + expected + "\nbut was:\n"+ actual);}  }
class C{  public static UIViewRoot createView(final String viewId){  final FacesContext facesContext=FacesContext.getCurrentInstance();  final ViewHandler viewHandler=facesContext.getApplication().getViewHandler();  final UIViewRoot view=viewHandler.createView(facesContext,viewId);  try {    viewHandler.getViewDeclarationLanguage(facesContext,viewId).buildView(facesContext,view);  } catch (  final IOException e) {    throw new RuntimeException(e);  }  return view;}  }
class C{  private String prependIfAbsent(String str,String requiredPrefix){  return (str != null && str.startsWith(requiredPrefix)) ? str : requiredPrefix + str;}  }
class C{  private void decrementWorkerCount(){  do {  } while (!compareAndDecrementWorkerCount(ctl.get()));}  }
class C{  public void runtimeInit(TransformerImpl transformer) throws TransformerException {}  }
class C{  public void test_Constructor(){  try {    new MockAttributedCharacterIteratorAttribute("test");  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public void close(){  str=null;}  }
class C{  public final void addElements(int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_firstFree+=numberOfElements;}  }
class C{  public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509SubjectName createX509DataTypeX509SubjectName(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509SubjectNameImpl(value);}  }
class C{  public static Charset forContentType(String contentType){  return forContentType(contentType,DEFAULT_HTTP_ENCODING);}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.ValueElement createValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.ValueElementImpl();}  }
class C{  public void paint(Graphics g,Shape allocation){  Container host=getContainer();  if (host != null && htmlPane != null && htmlPane.isEditable() != ((JTextComponent)host).isEditable()) {    editable=((JTextComponent)host).isEditable();    htmlPane.setEditable(editable);  }  super.paint(g,allocation);}  }
class C{  public boolean hasSubSchema(){  return (subSchema == null) ? false : true;}  }
class C{  @Deprecated protected static int calculateIndRefKey(PdfIndirectReference indRef){  int result=indRef.hashCode();  result=31 * result + indRef.getDocument().hashCode();  return result;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl();}  }
class C{  public boolean isExportable(){  return (false);}  }
class C{  public Mp4HdlrBox(Mp4BoxHeader header,ByteBuffer dataBuffer){  this.header=header;  this.dataBuffer=dataBuffer;}  }
class C{  public SimplePropertyMapper encoder(final Function<Object,ByteString,? extends Exception> f){  this.encoder=f;  return this;}  }
class C{  private void prepareWrapperMappingInfo(Context context,Wrapper wrapper,List<WrapperMappingInfo> wrappers){  String wrapperName=wrapper.getName();  boolean resourceOnly=context.isResourceOnlyServlet(wrapperName);  String[] mappings=wrapper.findMappings();  for (  String mapping : mappings) {    boolean jspWildCard=(wrapperName.equals("jsp") && mapping.endsWith("/*"));    wrappers.add(new WrapperMappingInfo(mapping,wrapper,jspWildCard,resourceOnly));  }}  }
class C{  private void executeEscaped(String[] specDetails) throws SQLException {  String sql="SELECT " + specDetails[0] + "(";  for (int p=0; p < specDetails.length - 1; p++) {    if (p != 0)     sql=sql + ", ";    sql=sql + specDetails[p + 1];  }  sql=sql + ") ;";  System.out.println("DatabaseMetaDataTest.executeEscaped() " + sql);  Statement st=conn.createStatement();  ResultSet rs=st.executeQuery(sql);  assertNotNull("not supported function: " + sql,rs);  rs.close();  st.close();}  }
class C{  public static void writeDetailedState(PrintWriter writer,MBeanServer mBeanServer,int mode) throws Exception {  if (mode == 0) {    ObjectName queryHosts=new ObjectName("*:j2eeType=WebModule,*");    Set<ObjectName> hostsON=mBeanServer.queryNames(queryHosts,null);    writer.print("<h1>");    writer.print("Application list");    writer.print("</h1>");    writer.print("<p>");    int count=0;    Iterator<ObjectName> iterator=hostsON.iterator();    while (iterator.hasNext()) {      ObjectName contextON=iterator.next();      String webModuleName=contextON.getKeyProperty("name");      if (webModuleName.startsWith("//")) {        webModuleName=webModuleName.substring(2);      }      int slash=webModuleName.indexOf('/');      if (slash == -1) {        count++;        continue;      }      writer.print("<a href=\"#" + (count++) + ".0\">");      writer.print(filter(webModuleName));      writer.print("</a>");      if (iterator.hasNext()) {        writer.print("<br>");      }    }    writer.print("</p>");    count=0;    iterator=hostsON.iterator();    while (iterator.hasNext()) {      ObjectName contextON=iterator.next();      writer.print("<a class=\"A.name\" name=\"" + (count++) + ".0\">");      writeContext(writer,contextON,mBeanServer,mode);    }  } else   if (mode == 1) {  }}  }
class C{  public ByteStringBuilder appendBERLength(final int length){  if ((length & 0x0000007F) == length) {    ensureAdditionalCapacity(1);    buffer[this.length++]=(byte)length;  } else   if ((length & 0x000000FF) == length) {    ensureAdditionalCapacity(2);    buffer[this.length++]=(byte)0x81;    buffer[this.length++]=(byte)length;  } else   if ((length & 0x0000FFFF) == length) {    ensureAdditionalCapacity(3);    buffer[this.length++]=(byte)0x82;    buffer[this.length++]=(byte)(length >> 8);    buffer[this.length++]=(byte)length;  } else   if ((length & 0x00FFFFFF) == length) {    ensureAdditionalCapacity(4);    buffer[this.length++]=(byte)0x83;    buffer[this.length++]=(byte)(length >> 16);    buffer[this.length++]=(byte)(length >> 8);    buffer[this.length++]=(byte)length;  } else {    ensureAdditionalCapacity(5);    buffer[this.length++]=(byte)0x84;    buffer[this.length++]=(byte)(length >> 24);    buffer[this.length++]=(byte)(length >> 16);    buffer[this.length++]=(byte)(length >> 8);    buffer[this.length++]=(byte)length;  }  return this;}  }
class C{  public COMM_FAILURE(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private static void saveJar(String name,File nonEntriesJar,Map<String,ClassNode> nodes,Map<String,MappedClass> mappedClasses){  Map<String,byte[]> out=null;  out=MappingProcessor.process(nodes,mappedClasses,false);  try {    out.putAll(JarUtils.loadNonClassEntries(nonEntriesJar));  } catch (  IOException e) {    e.printStackTrace();  }  JarUtils.saveAsJar(out,name);}  }
class C{  public HttpEngine recover(RouteException e){  if (!streamAllocation.recover(e)) {    return null;  }  if (!client.getRetryOnConnectionFailure()) {    return null;  }  StreamAllocation streamAllocation=close();  return new HttpEngine(client,userRequest,bufferRequestBody,callerWritesRequestBody,forWebSocket,streamAllocation,(RetryableSink)requestBodyOut,priorResponse);}  }
class C{  public static void bindContext(Object obj,Context context,Object token){  if (ContextAccessController.checkSecurityToken(obj,token)) {    objectBindings.put(obj,context);  }}  }
class C{  public void test_read_writeInt() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeInt(Integer.MIN_VALUE);  raf.writeInt('T');  raf.writeInt(Integer.MAX_VALUE);  raf.writeInt(Integer.MIN_VALUE - 1);  raf.writeInt(Integer.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Integer.MIN_VALUE,raf.readInt());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readInt());  assertEquals("Test 3: Incorrect value written or read;",Integer.MAX_VALUE,raf.readInt());  assertEquals("Test 4: Incorrect value written or read;",0x7fffffff,raf.readInt());  assertEquals("Test 5: Incorrect value written or read;",0x80000000,raf.readInt());  try {    raf.readInt();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeInt('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readInt();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append(handlerName);}  }
class C{  protected ObjectStreamException(){  super();}  }
class C{  public boolean is_push_enabled(){  return push_enabled;}  }
class C{  private Entries(){}  }
class C{  public int size(){  return count.get();}  }
class C{  public MimeType(String s){  parse(s);}  }
class C{  public void addRuleSet(ParserRuleSet ruleset){  imports.add(ruleset);}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_text_DateFormatSymbols(){  DateFormatSymbols symbols=new DateFormatSymbols(Locale.ENGLISH);  symbols.setEras(new String[]{"Before","After"});  SimpleDateFormat f2=new SimpleDateFormat("y'y'yy",symbols);  assertTrue("Wrong class",f2.getClass() == SimpleDateFormat.class);  assertEquals("Wrong pattern","y'y'yy",f2.toPattern());  assertTrue("Wrong symbols",f2.getDateFormatSymbols().equals(symbols));  assertTrue("Doesn't work",f2.format(new Date()).getClass() == String.class);  try {    new SimpleDateFormat(null,symbols);    fail("NullPointerException was not thrown.");  } catch (  NullPointerException npe) {  }  try {    new SimpleDateFormat("eee",symbols);    fail("IllegalArgumentException was not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public synchronized boolean next(Writable key) throws IOException {  if (key.getClass() != WALEntry.class) {    throw new IOException("wrong key class: " + key.getClass().getName() + " is not "+ WALEntry.class);  }  outBuf.reset();  keyLength=next(outBuf);  if (keyLength < 0) {    return false;  }  valBuffer.reset(outBuf.getData(),outBuf.getLength());  key.readFields(valBuffer);  valBuffer.mark(0);  if (valBuffer.getPosition() != keyLength) {    throw new IOException(key + " read " + valBuffer.getPosition()+ " bytes, should read "+ keyLength);  }  return true;}  }
class C{  public void execute(String command) throws BuildException {  execute(command,null,null,-1);}  }
class C{  public void appendByte(int val){  buf[pos++]=(byte)val;}  }
class C{  public static String defaultHelpDeskAdminRoleCreateDuringOrgConfig(){  initialize();  return (defaultHELP_DESK_ADMIN);}  }
class C{  public static Certificate[] readCertificateChain(List<String> certStringChain) throws Exception {  Certificate[] certChain=new Certificate[certStringChain.size()];  for (int i=0; i < certChain.length; i++) {    certChain[i]=readCertificate(certStringChain.get(i));  }  return certChain;}  }
class C{  @Override public void schemaChanged(String serviceName,String version){}  }
class C{  public static void flush(final InputStream source,final OutputStream dest) throws IOException {  final byte[] buf=new byte[8192];  int read;  while ((read=source.read(buf)) != -1) {    dest.write(buf,0,read);  }}  }
class C{  @Override public Promise<ActionResponse,ResourceException> actionCollection(Context context,ActionRequest request){  final String action=request.getAction();  if ("register".equalsIgnoreCase(action)) {    logAsDeprecated(action);  } else   if ("confirm".equalsIgnoreCase(action)) {    logAsDeprecated(action);  } else   if ("anonymousCreate".equalsIgnoreCase(action)) {    logAsDeprecated(action);  } else   if ("forgotPassword".equalsIgnoreCase(action)) {    logAsDeprecated(action);  } else   if ("forgotPasswordReset".equalsIgnoreCase(action)) {    logAsDeprecated(action);  }  return identityResourceV2.actionCollection(context,request);}  }
class C{  public boolean isPaused(){  return paused.get();}  }
class C{  protected Component createComponent(){  AttributeSet attr=getElement().getAttributes();  String classname=(String)attr.getAttribute(HTML.Attribute.CLASSID);  try {    ReflectUtil.checkPackageAccess(classname);    Class c=Class.forName(classname,true,Thread.currentThread().getContextClassLoader());    Object o=c.newInstance();    if (o instanceof Component) {      Component comp=(Component)o;      setParameters(comp,attr);      return comp;    }  } catch (  Throwable e) {  }  return getUnloadableRepresentation();}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public void removeOperation(Operation operation){  if (isRunning) {    if (operationHandlerThreadHandler == null)     return;    operationHandlerThreadHandler.removeCallbacks(new AndroidOperation(this,operation));  } else {    operationQueue.remove(new AndroidOperation(this,operation));  }}  }
class C{  public UnsupportedHeader createUnsupportedHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException(optionTag);  Unsupported unsupported=new Unsupported();  unsupported.setOptionTag(optionTag);  return unsupported;}  }
class C{  public PolicyError(String reason_string,short __reason){  super(reason_string);  reason=__reason;}  }
class C{  @Override public Promise<ActionResponse,ResourceException> actionInstance(Context context,String resourceId,ActionRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public int item(int index){  runTo(index);  return this.elementAt(index);}  }
class C{  public void handleException(Exception e,int option){  if (!getOptionIsSupported(option)) {    String message=e.getMessage();    if (message != null && (message.equals(osDoesNotSupportOperationString) || message.equals(osDoesNotSupportOptionString) || message.equals(osDoesNotSupportOptionArgumentString))) {    } else {      fail("Threw \"" + e + "\" instead of correct exception for unsupported socket option: "+ getSocketOptionString(option));    }  } else {    fail("Exception during test : " + e.getMessage());  }}  }
class C{  public ImageIcon(String filename,String description){  image=Toolkit.getDefaultToolkit().getImage(filename);  if (image == null) {    return;  }  this.filename=filename;  this.description=description;  loadImage(image);}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void clearPasswordHistory(){  operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_HISTORY);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(200);  sb.append("DelegationPrivilege Object:");  sb.append("\nname=");  sb.append(name);  sb.append("\npermissions=");  sb.append(permissions);  sb.append("\nsubject=");  sb.append(subjects);  return sb.toString();}  }
class C{  public TransformerConfigurationException(Throwable e){  super(e);}  }
class C{  public DefaultTreeSelectionModel(){  listSelectionModel=new DefaultListSelectionModel();  selectionMode=DISCONTIGUOUS_TREE_SELECTION;  leadIndex=leadRow=-1;  uniquePaths=new Hashtable<TreePath,Boolean>();  lastPaths=new Hashtable<TreePath,Boolean>();  tempPaths=new TreePath[1];}  }
class C{  public int hashCode(){  return text.hashCode() ^ pos ^ begin^ end;}  }
class C{  public static SearchFilter createSubstringFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString subInitialElement,List<ByteString> subAnyElements,ByteString subFinalElement){  return new SearchFilter(FilterType.SUBSTRING,null,null,attributeType,attributeOptions,null,subInitialElement,subAnyElements,subFinalElement,null,false);}  }
class C{  public static List<SearchResultEntry> findReferences(ClassNode node,FieldNode field){  List<SearchResultEntry> results=findChildren(node);  List<Reference> references=new ArrayList<Reference>();  for (  ClassNode cn : VisualizerWindow.instance.getNodes().values()) {    references.addAll(ReferenceUtils.getReferences(node,field,cn));  }  for (  Reference reference : references) {    results.add(new SearchResultEntry(reference.getNode(),reference.getMethod(),OpUtils.getIndex(reference.getAin())));  }  return results;}  }
class C{  public void write(int b) throws IOException {  oneByte[0]=(byte)b;  if (bufferedBlockCipher != null) {    int len=bufferedBlockCipher.processBytes(oneByte,0,1,buf,0);    if (len != 0) {      out.write(buf,0,len);    }  } else {    out.write(streamCipher.returnByte((byte)b));  }}  }
class C{  public boolean isAuthorized(){  return authorized;}  }
class C{  @DataProvider public Object[][] filterData(){  return new Object[][]{{"/object/name eq \"alice\"",true},{"/object/age eq 1234",true},{"/object/balance eq 3.14159",true},{"/object/isAdmin eq false",true},{"/object/age lt 1234",false},{"/object/age le 1234",true},{"/object/age gt 1234",false},{"/object/age ge 1234",true},{"/object/name co \"al\"",true},{"/object/name sw \"al\"",true},{"/object/name pr",true},{"/object/missing pr",false},{"/object/nullVal pr",false},{"/object/age lt 18 or /object/age gt 30",true},{"/object/age lt 1000 or /object/age gt 3000",false},{"/object/age lt 18 and /object/age gt 30",false},{"/object/age gt 1000 and /object/age lt 1300",true},{"/object/age ne 1234",false},{"/linkQualifier eq \"test\"",true},{"/linkQualifier eq \"fail\"",false}};}  }
class C{  public static String putReplyURL(String wreply){  String wctx=SAML2Utils.generateID();synchronized (wctxMap) {    wctxMap.put(wctx,wreply);  }  return wctx;}  }
class C{  public EvictionConfig(final long poolIdleEvictTime,final long poolIdleSoftEvictTime,final int minIdle){  if (poolIdleEvictTime > 0) {    idleEvictTime=poolIdleEvictTime;  } else {    idleEvictTime=Long.MAX_VALUE;  }  if (poolIdleSoftEvictTime > 0) {    idleSoftEvictTime=poolIdleSoftEvictTime;  } else {    idleSoftEvictTime=Long.MAX_VALUE;  }  this.minIdle=minIdle;}  }
class C{  public TimeDescription createTimeDescription(Time t) throws SdpException {  TimeDescriptionImpl timeDescriptionImpl=new TimeDescriptionImpl();  timeDescriptionImpl.setTime(t);  return timeDescriptionImpl;}  }
class C{  public boolean isContentAreaFilled(){  return contentAreaFilled;}  }
class C{  public void logMessage(SIPMessage message,String from,String to,String status,boolean sender,long time){  checkLogFile();  CallID cid=(CallID)message.getCallId();  String callId=null;  if (cid != null)   callId=cid.getCallId();  String firstLine=message.getFirstLine().trim();  String encoded=(logContent ? message.encode() : message.encodeMessage(new StringBuilder()).toString());  String tid=message.getTransactionId();  TimeStampHeader tshdr=(TimeStampHeader)message.getHeader(TimeStampHeader.NAME);  long tsval=tshdr == null ? 0 : tshdr.getTime();  logMessage(encoded,from,to,sender,callId,firstLine,status,tid,time,tsval);}  }
class C{  public int next(){  int node=_currentNode;  final int nodeType=_nodeType;  final int startNodeID=_startNodeID;  if (nodeType != DTM.ELEMENT_NODE) {    while (node != NULL && node != startNodeID && _exptype2(node) != nodeType) {      node=_nextsib2(node);    }  } else {    while (node != NULL && node != startNodeID && _exptype2(node) < DTM.NTYPES) {      node=_nextsib2(node);    }  }  if (node == DTM.NULL || node == startNodeID) {    _currentNode=NULL;    return NULL;  } else {    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public AttributeParser parseAttribute(String attributeDescription) throws LocalizedIllegalArgumentException, NullPointerException {  Iterator<Attribute> it=getAllAttributes(attributeDescription).iterator();  return AttributeParser.parseAttribute(it.hasNext() ? it.next() : null);}  }
class C{  public static FloatBuffer createFloatBuffer(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  public void updateUI(){  setUI((PanelUI)UIManager.getUI(this));}  }
class C{  public ClosedWatchServiceException(){}  }
class C{  private Map toAvPairMap(Set<String> names,String token){  if (token == null) {    return Collections.EMPTY_MAP;  }  Map map=new HashMap();  Set<String> set=new HashSet<String>();  set.add(token);  if (names == null || names.isEmpty()) {    return map;  }  for (  final Object name : names) {    map.put(name,set);  }  return map;}  }
class C{  public SOAPClientException(){  super();}  }
class C{  public long size(){  return size;}  }
class C{  public String documentationAdminGuideUrl(){  return properties.getProperty("doc.guide.admin.url");}  }
class C{  public void startPrefixMapping(String prefix,String uri){}  }
class C{  public Rect updateFastScrollerBounds(BaseRecyclerView rv,int lastTouchY){  mInvalidateRect.set(mBgBounds);  if (isVisible()) {    int edgePadding=rv.getMaxScrollbarWidth();    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;    int bgHeight=mBgOriginalSize;    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));    if (Utilities.isRtl(mRes)) {      mBgBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth());      mBgBounds.right=mBgBounds.left + bgWidth;    } else {      mBgBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth());      mBgBounds.left=mBgBounds.right - bgWidth;    }    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,rv.getHeight() - edgePadding - bgHeight));    mBgBounds.bottom=mBgBounds.top + bgHeight;  } else {    mBgBounds.setEmpty();  }  mInvalidateRect.union(mBgBounds);  return mInvalidateRect;}  }
class C{  public AuthenticatorResult authenticate(String username,String password,Context context) throws ResourceException {  Reject.ifNull(username,"Provided username was null");  Reject.ifNull(context,"Router context was null");  if (resource.getContent().get(RESOURCE_FIELD_USERNAME).asString().equals(username) && resource.getContent().get(RESOURCE_FIELD_PASSWORD).asString().equals(password)) {    return AuthenticatorResult.authenticationSuccess(resource);  } else {    return AuthenticatorResult.FAILED;  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_parts) {    int n=m_parts.size();    for (int i=0; i < n; i++) {      AVTPart part=(AVTPart)m_parts.elementAt(i);      part.fixupVariables(vars,globalsSize);    }  }}  }
class C{  int size(){  return size;}  }
class C{  private void animateView(final int position,@NonNull final View view,@NonNull final Animator[] animators){  if (mAnimationStartMillis == -1) {    mAnimationStartMillis=SystemClock.uptimeMillis();  }  ViewCompat.setAlpha(view,0);  AnimatorSet set=new AnimatorSet();  set.playTogether(animators);  set.setStartDelay(calculateAnimationDelay(position));  set.setDuration(mAnimationDurationMillis);  set.start();  mAnimators.put(view.hashCode(),set);}  }
class C{  public DSAParameterSpec(BigInteger p,BigInteger q,BigInteger g){  this.p=p;  this.q=q;  this.g=g;}  }
class C{  private DataProviderID(final String name,final boolean isInternal){  this.name=name;  this.normalizedName=name.trim().toLowerCase(Locale.ENGLISH);  this.isInternal=isInternal;}  }
class C{  public void removeJob(String jobId){  if (jobs.contains(jobId)) {    jobs.remove(jobId);  }}  }
class C{  public void paint(Graphics g,Shape alloc){synchronized (locator) {    locator.setAllocation(alloc);    locator.paintChildren(g);  }}  }
class C{  public static void showLoading(@NonNull View loadingView,@NonNull View contentView,@NonNull View errorView){  contentView.setVisibility(View.GONE);  errorView.setVisibility(View.GONE);  loadingView.setVisibility(View.VISIBLE);}  }
class C{  public synchronized void cachePackageInstallInfo(String packageName,UserHandleCompat user,Bitmap icon,CharSequence title){  removeFromMemCacheLocked(packageName,user);  ComponentKey cacheKey=getPackageKey(packageName,user);  CacheEntry entry=mCache.get(cacheKey);  if (entry == null) {    entry=new CacheEntry();    mCache.put(cacheKey,entry);  }  if (!TextUtils.isEmpty(title)) {    entry.title=title;  }  if (icon != null) {    entry.icon=Utilities.createIconBitmap(icon,mContext);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexequalzero.class,args);}  }
class C{  public synchronized void removeFlavorListener(FlavorListener listener){  if (listener == null || flavorListeners == null) {    return;  }  flavorListeners.remove(listener);}  }
class C{  public CCITTG4Encoder(int width){  rowpixels=width;  rowbytes=(rowpixels + 7) / 8;  refline=new byte[rowbytes];}  }
class C{  public void testSerializationSelf() throws Exception {  TestUtils.initCertPathSSCertChain();  CertPath certPath=TestUtils.buildCertPathSSCertChain();  SerializationTest.verifySelf(certPath);}  }
class C{  public void updateIDPAuthenticationContexts(String realm,String entityName,SAMLv2AuthContexts cxt) throws AMConsoleException {  List list=cxt.toIDPAuthContextInfo();  String[] params={realm,entityName,"SAMLv2","IDP-updateIDPAuthenticationContexts"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  try {    SAML2MetaManager saml2MetaManager=getSAML2MetaManager();    EntityConfigElement entityConfig=saml2MetaManager.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.entity.name");    }    IDPSSOConfigElement idpDecConfigElement=saml2MetaManager.getIDPSSOConfig(realm,entityName);    if (idpDecConfigElement == null) {      throw new AMConsoleException("invalid.config.element");    } else {      updateBaseConfig(idpDecConfigElement,IDP_AUTHN_CONTEXT_CLASS_REF_MAPPING,list);    }    saml2MetaManager.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  SAML2MetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"SAMLv2","IDP-updateIDPAuthenticationContexts",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }  return;}  }
class C{  public ByteArrayInputStream(byte buf[]){  this.buf=buf;  this.pos=0;  this.count=buf.length;}  }
class C{  public TimeLimitExceededException(String explanation){  super(explanation);}  }
class C{  public static long rotateRight(long v,int distance){  return (v >>> distance) | (v << -distance);}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  protected void updateRenderer(){  if (tree != null) {    TreeCellRenderer newCellRenderer;    newCellRenderer=tree.getCellRenderer();    if (newCellRenderer == null) {      tree.setCellRenderer(createDefaultCellRenderer());      createdRenderer=true;    } else {      createdRenderer=false;      currentCellRenderer=newCellRenderer;      if (createdCellEditor) {        tree.setCellEditor(null);      }    }  } else {    createdRenderer=false;    currentCellRenderer=null;  }  updateCellEditor();}  }
class C{  public RowSorterEvent(RowSorter source){  this(source,Type.SORT_ORDER_CHANGED,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS02.class,args);}  }
class C{  public void testReadBII() throws Exception {  CipherInputStream stream=new CipherInputStream(null,new NullCipher());  try {    stream.read(new byte[1],1,0);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public static final String createXPATHMessage(String msgKey,Object args[]){  return createXPATHMsg(XPATHBundle,msgKey,args);}  }
class C{  public long incrementTime(long deltaTime){  return clock.addAndGet(deltaTime);}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ManifestElement createManifestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ManifestElementImpl();}  }
class C{  public static void main(String[] args){  if (args.length == 1) {    System.out.println(hash(args[0]));  } else   if (args.length == 2 && args[0].equals("-f")) {    String passwd=readFromPasswordFile(args[1]);    if (passwd != null) {      System.out.println(hash(passwd.trim()));    }  }}  }
