class C{  public boolean matchesFirstGlyph(int glyphCode,String glyphUnicode){  if (firstGlyphCodes != null) {    int pt=Arrays.binarySearch(firstGlyphCodes,glyphCode);    if (pt >= 0)     return true;  }  if (glyphUnicode.length() < 1)   return false;  char glyphChar=glyphUnicode.charAt(0);  for (int i=0; i < firstUnicodeRanges.length; i++) {    if (firstUnicodeRanges[i].contains(glyphChar))     return true;  }  return false;}  }
class C{  public static _ProcessTemplateType fromString(final String value) throws SOAPSerializationException {  return (_ProcessTemplateType)Enumeration.fromString(value,_ProcessTemplateType.VALUES_TO_INSTANCES);}  }
class C{  public static Site me(){  return new Site();}  }
class C{  private CRegisterFunctions(){}  }
class C{  public boolean hasGeoRssPoint(){  return hasExtension(GeoRssPoint.class);}  }
class C{  public ModelMBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs){  super(name,type,description,isReadable,isWritable,isIs);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"ModelMBeanAttributeInfo(" + "String,String,String,boolean,boolean,boolean)","Entry",name);  }  attrDescriptor=validDescriptor(null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=null;  String outputFile=null;  int v;  int a;  int i;  double sigmaX;  double sigmaY;  double N;  double sigmaXY;  double sigmaXsqr;  double sigmaYsqr;  double mean;  double meanY;  double radians2Deg=180 / Math.PI;  double slope;  double slopeInDegrees;  double slopeM1;  double slopeM2;  double slopeRMA;  double slopeDegM1;  double slopeDegM2;  double slopeDegRMA;  int progress;  int oldProgress=-1;  double midX=0;  double midY=0;  double maxLineLength=100;  double lineLength;  double Sxx, Syy, Sxy;  double centroidX;  double centroidY;  double deltaX, deltaY;  int[] parts={0};  int[] partStart={0};  boolean[] partHoleData={false};  double x, y;  int pointSt, pointEnd;  boolean useElongationRatio=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  maxLineLength=Double.parseDouble(args[2]);  useElongationRatio=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    double numberOfRecords=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("This function can only be applied to polygon type shapefiles.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    if (!useElongationRatio) {      fields[1]=new DBFField();      fields[1].setName("LINEARITY");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ORIENT");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    } else {      fields[1]=new DBFField();      fields[1].setName("ELONGATION");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ELONG_DIR");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE,fields);    ShapeType inputType=input.getShapeType();    double[][] vertices=null;    double[] regressionData;    double rSquare;    if (!useElongationRatio) {      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {switch (inputType) {case POLYGON:            whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());          vertices=recPolygon.getPoints();        partStart=recPolygon.getParts();      partHoleData=recPolygon.getPartHoleData();    midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;  midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();partStart=recPolygonZ.getParts();partHoleData=recPolygonZ.getPartHoleData();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();partStart=recPolygonM.getParts();partHoleData=recPolygonM.getPartHoleData();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numParts=partStart.length;for (int p=0; p < numParts; p++) {if (!partHoleData[p]) {regressionData=new double[5];rSquare=0;slope=0;slopeInDegrees=0;slopeDegM1=0;slopeDegM2=0;slopeDegRMA=0;slopeM1=0;slopeM2=0;slopeRMA=0;pointSt=partStart[p];if (p < numParts - 1) {pointEnd=partStart[p + 1];} else {pointEnd=vertices.length;}N=pointEnd - pointSt;for (v=pointSt; v < pointEnd; v++) {x=vertices[v][0] - midX;y=vertices[v][1] - midY;regressionData[0]+=x;regressionData[1]+=y;regressionData[2]+=x * y;regressionData[3]+=x * x;regressionData[4]+=y * y;}sigmaX=regressionData[0];mean=sigmaX / N;sigmaY=regressionData[1];meanY=sigmaY / N;sigmaXY=regressionData[2];sigmaXsqr=regressionData[3];sigmaYsqr=regressionData[4];if ((sigmaXsqr - mean * sigmaX) > 0) {slopeM1=(sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX);slopeDegM1=(Math.atan(slopeM1) * radians2Deg);if (slopeDegM1 < 0) {slopeDegM1=90 + -1 * slopeDegM1;} else {slopeDegM1=90 - slopeDegM1;}}Sxx=(sigmaXsqr / N - mean * mean);Syy=(sigmaYsqr / N - (sigmaY / N) * (sigmaY / N));Sxy=(sigmaXY / N - (sigmaX * sigmaY) / (N * N));if (Math.sqrt(Sxx * Syy) != 0) {rSquare=((Sxy / Math.sqrt(Sxx * Syy)) * (Sxy / Math.sqrt(Sxx * Syy)));}slopeRMA=Math.sqrt(Syy / Sxx);if ((sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX) < 0) {slopeRMA=-slopeRMA;}slopeDegRMA=(Math.atan(slopeRMA) * radians2Deg);if (slopeDegRMA < 0) {slopeDegRMA=90 + -1 * slopeDegRMA;} else {slopeDegRMA=90 - slopeDegRMA;}if ((sigmaYsqr - meanY * sigmaY) > 0) {slopeM2=(sigmaXY - meanY * sigmaX) / (sigmaYsqr - meanY * sigmaY);slopeM2=1 / slopeM2;slopeDegM2=(Math.atan(slopeM2) * radians2Deg);if (slopeDegM2 < 0) {slopeDegM2=90 + -1 * slopeDegM2;} else {slopeDegM2=90 - slopeDegM2;}}if (slopeDegM2 < 6 || slopeDegM2 > 174) {slope=slopeM2;slopeInDegrees=slopeDegM2;} else if (slopeDegM1 > 84 && slopeDegM1 < 96) {slope=slopeM1;slopeInDegrees=slopeDegM1;} else {slope=slopeRMA;slopeInDegrees=slopeDegRMA;}centroidX=mean + midX;centroidY=meanY + midY;lineLength=maxLineLength * rSquare;double[][] points=new double[2][2];if (slopeInDegrees > 0) {deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=centroidX - deltaX / 2.0;points[0][1]=centroidY - deltaY / 2.0;points[1][0]=centroidX + deltaX / 2.0;points[1][1]=centroidY + deltaY / 2.0;} else {points[0][0]=centroidX - lineLength / 2.0;points[0][1]=centroidY;points[1][0]=centroidX + lineLength / 2.0;points[1][1]=centroidY;}PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(rSquare);rowData[2]=new Double(slopeInDegrees);output.addRecord(poly,rowData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}} else {double[][] verticesRotated=null;double[] newBoundingBox=new double[4];double psi=0;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;double elongation=0;double bearing=0;final double rightAngle=Math.toRadians(90);double boxCentreX=0;double boxCentreY=0;slope=0;for (ShapeFileRecord record : input.records) {switch (inputType) {case POLYGON:whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());vertices=recPolygon.getPoints();midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numVertices=vertices.length;verticesRotated=new double[numVertices][2];axes[0]=9999999;axes[1]=9999999;double sumX=0;double sumY=0;N=0;boolean calculatedCentroid=false;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int n=0; n < numVertices; n++) {x=vertices[n][0] - midX;y=vertices[n][1] - midY;if (!calculatedCentroid) {sumX+=x;sumY+=y;N++;}verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (int n=0; n < numVertices; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0] + 1;newYAxis=newBoundingBox[3] - newBoundingBox[2] + 1;if ((axes[0] * axes[1]) > (newXAxis * newYAxis)) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);elongation=1 - shortAxis / longAxis;centroidX=(sumX / N) + midX;centroidY=(sumY / N) + midY;lineLength=maxLineLength * elongation;double[][] points=new double[2][2];deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=boxCentreX - deltaX / 2.0;points[0][1]=boxCentreY - deltaY / 2.0;points[1][0]=boxCentreX + deltaX / 2.0;points[1][1]=boxCentreY + deltaY / 2.0;PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(elongation);bearing=90 - Math.toDegrees(slope);rowData[2]=new Double(bearing);output.addRecord(poly,rowData);if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public IdentifiableLanguage(final String language,final String name){  super();  this.language=language;  this.name=name;}  }
class C{  public void connectNeurons(SynapseGroup synGroup){  List<Synapse> syns=connectAllToAll(synGroup.getSourceNeurons(),synGroup.getTargetNeurons(),synGroup.isRecurrent(),selfConnectionAllowed,false);  synGroup.preAllocateSynapses(synGroup.getSourceNeuronGroup().size() * synGroup.getTargetNeuronGroup().size());  for (  Synapse s : syns) {    synGroup.addNewSynapse(s);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Get from " + request.getRemoteHost() + " - "+ request.getRemoteAddr()+ " - forward to request.jsp");  if (!response.isCommitted())   response.sendRedirect("advertisements.jsp");}  }
class C{  public ArrayList<T> addAll(ArrayList<T> elist,int uptoIndex){  if (uptoIndex > elist.size()) {    log.error("uptoIndex is greater than elist size .. aborting addAll");    return elist;  }  for (int index=0; index < uptoIndex; index++) {    T e=elist.get(index);    if (e != null) {      elist.set(index,add(e));    }  }  return elist;}  }
class C{  public boolean optBoolean(int index){  return optBoolean(index,false);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public Object clone(){  BreitWignerMeanSquare copy=(BreitWignerMeanSquare)super.clone();  if (this.uniform != null)   copy.uniform=new Uniform(copy.randomGenerator);  return copy;}  }
class C{  public boolean closeCamera(){  return cameraInternal.closeCameraInternal();}  }
class C{  public static Long createLong(final String str){  if (str == null) {    return null;  }  return Long.decode(str);}  }
class C{  public static int min(int a,int b,int c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public final void testAddAllHelperTextColorIdsFromArray(){  int[] helperTextColors1=new int[2];  helperTextColors1[0]=android.R.color.black;  helperTextColors1[1]=android.R.color.darker_gray;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColorIds(helperTextColors1);  passwordEditText.addAllHelperTextColorIds(helperTextColors1);  Collection<Integer> helperTextColors2=passwordEditText.getHelperTextColors();  assertEquals(helperTextColors1.length,helperTextColors2.size());  Iterator<Integer> iterator=helperTextColors2.iterator();  assertEquals(getContext().getResources().getColor(android.R.color.black),(int)iterator.next());  assertEquals(getContext().getResources().getColor(android.R.color.darker_gray),(int)iterator.next());}  }
class C{  @Override public void write(TextWriterStream out,String label,Object object){  String res="";  if (label != null) {    res=res + label + "=";  }  if (object != null) {    res=res + object.toString();  }  out.commentPrintLn(res);}  }
class C{  public static int differenceAt(String s1,String s2){  int i;  for (i=0; (i < s1.length()) && (i < s2.length()); ++i) {    if (s1.charAt(i) != s2.charAt(i)) {      break;    }  }  if ((i < s2.length()) || (i < s1.length())) {    return i;  }  return -1;}  }
class C{  public static List<File> removeRedundantPaths(List<File> files) throws IOException {  final List<File> out=new ArrayList<>();  final Set<String> paths=new HashSet<>();  for (  File file : files) {    if (paths.add(file.getCanonicalPath())) {      out.add(file);    }  }  return out;}  }
class C{  public final void parseError(String message) throws IOException {  final String m="At " + mSourceName + " line "+ mInputReader.getLineNumber()+ ": "+ message;  throw new IOException(m);}  }
class C{  private void activate() throws XMPPException {  Bytestream activate=createStreamHostActivation();  SyncPacketSend.getReply(this.connection,activate);}  }
class C{  public static <V extends SampledVertex>List<Set<V>> createSampledPartitions(Collection<V> vertices){  TIntObjectHashMap<Set<V>> partitions=new TIntObjectHashMap<Set<V>>();  for (  V vertex : vertices) {    if (vertex.isSampled()) {      int it=vertex.getIterationSampled();      Set<V> partition=partitions.get(it);      if (partition == null) {        partition=new HashSet<V>();        partitions.put(it,partition);      }      partition.add(vertex);    }  }  List<Set<V>> list=new ArrayList<Set<V>>(partitions.size());  for (int i=0; i < partitions.size() - 1; i++) {    list.add(partitions.get(i));  }  return list;}  }
class C{  public boolean isEncrypted(){  return getEncryptionType() != EncryptionType.UNENCRYPTED;}  }
class C{  public static CommandLineOptions processArgs(String... args) throws UsageException {  CommandLineOptions parameters;  try {    parameters=CommandLineOptionsParser.parse(Arrays.asList(args));  } catch (  IllegalArgumentException e) {    throw new UsageException(e.getMessage());  }catch (  Throwable t) {    t.printStackTrace();    throw new UsageException(t.getMessage());  }  int filesToFormat=parameters.files().size();  if (parameters.stdin()) {    filesToFormat++;  }  if (parameters.inPlace() && parameters.files().isEmpty()) {    throw new UsageException("in-place formatting was requested but no files were provided");  }  if (parameters.isSelection() && filesToFormat != 1) {    throw new UsageException("partial formatting is only support for a single file");  }  if (parameters.offsets().size() != parameters.lengths().size()) {    throw new UsageException(String.format("-offsets and -lengths flags must be provided in matching pairs"));  }  if (filesToFormat <= 0 && !parameters.version() && !parameters.help()) {    throw new UsageException("no files were provided");  }  return parameters;}  }
class C{  public void testBuildTextFromElementWithAttribute(){  LOGGER.debug("buildTextFromElementWithAttribute");  Element element=new Element(Tag.valueOf("div"),"");  element.attr(AttributeStore.ALT_ATTR,"test");  TextAttributeOfElementBuilder instance=new TextAttributeOfElementBuilder(AttributeStore.ALT_ATTR);  String result=instance.buildTextFromElement(element);  assertEquals("test",result);}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  public static Boolean toBoolean(Object o) throws PageException {  if (o instanceof Boolean)   return (Boolean)o;  return toBooleanValue(o) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private static boolean isSubtypeOf(TypeDescriptor<?> type,Class<?>... parents){  for (  Class<?> parent : parents) {    if (type.isSubtypeOf(TypeDescriptor.of(parent))) {      return true;    }  }  return false;}  }
class C{  public synchronized void registerManagedResource(String resourceId,Class<? extends ManagedResource> implClass,ManagedResourceObserver observer){  if (resourceId == null)   throw new IllegalArgumentException("Must provide a non-null resourceId to register a ManagedResource!");  Matcher resourceIdValidator=resourceIdRegex.matcher(resourceId);  if (!resourceIdValidator.matches()) {    String errMsg=String.format(Locale.ROOT,"Invalid resourceId '%s'; must start with  %s.",resourceId,SCHEMA_BASE_PATH);    throw new SolrException(ErrorCode.SERVER_ERROR,errMsg);  }  Matcher reservedEndpointsMatcher=reservedEndpointsPattern.matcher(resourceId);  if (reservedEndpointsMatcher.matches()) {    throw new SolrException(ErrorCode.SERVER_ERROR,reservedEndpointsMatcher.group(1) + " is a reserved endpoint used by the Solr REST API!");  }  ManagedResourceRegistration reg=registered.get(resourceId);  if (reg != null) {    if (!reg.implClass.equals(implClass)) {      String errMsg=String.format(Locale.ROOT,"REST API path %s already registered to instances of %s",resourceId,reg.implClass.getName());      throw new SolrException(ErrorCode.SERVER_ERROR,errMsg);    }    if (observer != null) {      reg.observers.add(observer);      log.info("Added observer of type {} to existing ManagedResource {}",observer.getClass().getName(),resourceId);    }  } else {    registered.put(resourceId,new ManagedResourceRegistration(resourceId,implClass,observer));    log.info("Registered ManagedResource impl {} for path {}",implClass.getName(),resourceId);  }  if (initializedRestManager != null) {    initializedRestManager.addRegisteredResource(registered.get(resourceId));  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static void main(String[] args) throws FileNotFoundException {  parseCommandLine(args);  if (!new File(serverIni).exists()) {    System.out.println("Welcome to your own Stendhal Server.");    System.out.println("");    System.out.println("This seems to be the very first start because we could not find a server.ini.");    System.out.println("So there are some simple questions for you to create it...");    System.out.println("");    GenerateINI.main(args,serverIni);  }  marauroa.server.marauroad.main(args);}  }
class C{  private ByteBuffer newDataPage() throws IOException {  ByteBuffer dataPage=_addRowBufferH.setNewPage(getPageChannel());  dataPage.put(PageTypes.DATA);  dataPage.put((byte)1);  dataPage.putShort((short)getFormat().DATA_PAGE_INITIAL_FREE_SPACE);  dataPage.putInt(_tableDefPageNumber);  dataPage.putInt(0);  dataPage.putShort((short)0);  int pageNumber=_addRowBufferH.getPageNumber();  getPageChannel().writePage(dataPage,pageNumber);  _ownedPages.addPageNumber(pageNumber);  _freeSpacePages.addPageNumber(pageNumber);  return dataPage;}  }
class C{  void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  out.writeByte(CONSTANT_UTF8);  out.writeUTF(str);}  }
class C{  @Override public boolean isUseShortClassName(){  return super.isUseShortClassName();}  }
class C{  public static void ensureDirectoryExists(File dir){  if (dir != null && (!dir.exists() || !dir.isDirectory())) {    dir.mkdirs();  }}  }
class C{  public void writeHeaderPart(AnnotatedOutput out){  throwIfNotPrepared();  int sz=fieldIds.size();  int offset=(sz == 0) ? 0 : getFileOffset();  if (out.annotates()) {    out.annotate(4,"field_ids_size:  " + Hex.u4(sz));    out.annotate(4,"field_ids_off:   " + Hex.u4(offset));  }  out.writeInt(sz);  out.writeInt(offset);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().rew();  return null;}  }
class C{  public static String escapeSingleQuotedAttValue(String value){  value=_escapeAttValue(value);  value=StringUtil.gsub("'","&apos;",value);  return value;}  }
class C{  public static void showMessage(final String messageKey){  MessageService.instance().showMessage(messageKey);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public Set detectCycles(){  Set builders=Algorithms.detectCycles(dependencies);  if (builders != null && builders.size() == 0) {    builders=null;  }  return builders;}  }
class C{  private int binarySearch(T targetKey){  int targetHash=hash(targetKey);  int l=0, u=num;  while (l < u) {    int m=(l + u) >> 1;    int keyHash=hash(keys[m]);    if (targetHash < keyHash || (targetHash == keyHash && ((Comparable)targetKey).compareTo(keys[m]) <= 0))     u=m; else     l=m + 1;  }  return l;}  }
class C{  public ResponseTimeoutException(String message,Throwable cause){  super(message,cause);}  }
class C{  static public Automaton repeat(Automaton a){  if (a.getNumStates() == 0) {    return a;  }  Automaton.Builder builder=new Automaton.Builder();  builder.createState();  builder.setAccept(0,true);  builder.copy(a);  Transition t=new Transition();  int count=a.initTransition(0,t);  for (int i=0; i < count; i++) {    a.getNextTransition(t);    builder.addTransition(0,t.dest + 1,t.min,t.max);  }  int numStates=a.getNumStates();  for (int s=0; s < numStates; s++) {    if (a.isAccept(s)) {      count=a.initTransition(0,t);      for (int i=0; i < count; i++) {        a.getNextTransition(t);        builder.addTransition(s + 1,t.dest + 1,t.min,t.max);      }    }  }  return builder.finish();}  }
class C{  public SelectOneValueExpressionHideNoSelectionITCase(String name){  super(name);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (conditionType_1: ");  result.append(conditionType_1);  result.append(')');  return result.toString();}  }
class C{  public static final void sort(float[] a,int[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  public pre addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static Date parseRfc822Date(String dateString) throws ParseException {  return getRfc822DateFormat().parse(dateString);}  }
class C{  public void printPrologStackTrace(PrintWriter pw){  if (m_curNode == null) {    pw.println("No stack trace available");    pw.flush();    return;  }  WAM.Node node=m_curNode;  pw.println(node.getGoal().toString(m_engine));  node=node.m_previous;  while (node != null) {    if (node.getGoal() != null)     pw.println(" - " + node.getGoal().toString(m_engine));    pw.flush();    node=node.m_previous;  }}  }
class C{  public InMemoryDocument(final byte[] bytes){  this(bytes,null,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void sequence_MemberExpression_ParameterizedPropertyAccessExpressionTail_TypeArguments_IndexedAccessExpression_2_1_0_0_ParameterizedPropertyAccessExpression_2_1_1_0_TaggedTemplateString_2_1_2_0(ISerializationContext context,ParameterizedPropertyAccessExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.read_text) {    Intent intent=new Intent(this,OcrCaptureActivity.class);    intent.putExtra(OcrCaptureActivity.AutoFocus,autoFocus.isChecked());    intent.putExtra(OcrCaptureActivity.UseFlash,useFlash.isChecked());    startActivityForResult(intent,RC_OCR_CAPTURE);  }}  }
class C{  private void updateSetsLabeled(int i1,final double a1,final double C){  final double y_i=label[i1];  I1[i1]=a1 == 0 && y_i == 1;  I2[i1]=a1 == C && y_i == -1;  I3[i1]=a1 == C && y_i == 1;  I4[i1]=a1 == 0 && y_i == -1;}  }
class C{  public void updateEllipse(float latPoint,float lonPoint,int w,int h,float rotateAngle,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkEllipse.write(latPoint,lonPoint,w,h,rotateAngle,properties,link.dos);}  }
class C{  private static void addMarker(IResource resource,int type,String message){  try {    IMarker marker=resource.createMarker(IMarker.PROBLEM);    Map<String,Object> map=new HashMap<String,Object>();    map.put(IMarker.SEVERITY,new Integer(type));    map.put(IMarker.MESSAGE,message);    marker.setAttributes(map);  } catch (  CoreException ex) {    DBPlugin.logException(ex);  }}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple3<Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3){  return fromStream(Seq.super.window(specification1,specification2,specification3));}  }
class C{  public static void handleException(Exception e){  if (LOGGING_LEVEL_FILTER > NONE)   e.printStackTrace();}  }
class C{  public void debugWriteFile(String directoryName){  try {    boolean p=stopPruning(true);    writeFile(directoryName);    defrost();    stopPruning(p);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public int[] Gen_columnIndices(android.database.Cursor cursor){  int[] result=new int[GEN_COUNT];  result[0]=cursor.getColumnIndex(GEN_FIELD__ID);  if (result[0] == -1) {    result[0]=cursor.getColumnIndex("_ID");  }  result[1]=cursor.getColumnIndex(GEN_FIELD_METALISTID);  result[2]=cursor.getColumnIndex(GEN_FIELD_KEYDESC);  result[3]=cursor.getColumnIndex(GEN_FIELD_METAFLAGS);  result[4]=cursor.getColumnIndex(GEN_FIELD_MOUSECLICK);  result[5]=cursor.getColumnIndex(GEN_FIELD_MOUSEBUTTONS);  result[6]=cursor.getColumnIndex(GEN_FIELD_KEYSYM);  result[7]=cursor.getColumnIndex(GEN_FIELD_SHORTCUT);  return result;}  }
class C{  public GitlabGroup createGroup(String name,String path,String ldapCn,GitlabAccessLevel ldapAccess,GitlabUser sudoUser) throws IOException {  Query query=new Query().append("name",name).append("path",path).appendIf("ldap_cn",ldapCn).appendIf("ldap_access",ldapAccess).appendIf(PARAM_SUDO,sudoUser != null ? sudoUser.getId() : null);  String tailUrl=GitlabGroup.URL + query.toString();  return dispatch().to(tailUrl,GitlabGroup.class);}  }
class C{  public NodeMetaData(final Deserializer deserializer){  this.version=NodeVersion.readFrom(deserializer,"version");  this.platform=deserializer.readOptionalString("platform");  this.application=deserializer.readOptionalString("application");  final Integer bitmask=deserializer.readOptionalInt("features");  this.featuresBitmask=null == bitmask ? 0 : bitmask;  final Integer networkVersion=deserializer.readOptionalInt("networkId");  this.networkId=null == networkVersion ? 0 : networkVersion;}  }
class C{  public void add(final ConversationStates state,final Collection<String> triggerStrings,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action){  engine.add(state,triggerStrings,condition,false,nextState,reply,action,"");}  }
class C{  public Templates createNotesTemplates(){  return mAdapter.create(Templates.class);}  }
class C{  public static MouseWheelListener add(MouseWheelListener a,MouseWheelListener b){  return (MouseWheelListener)addInternal(a,b);}  }
class C{  public ListIterator listIterator(){  return listIterator(0);}  }
class C{  public Key minKey(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  Node<Key> min=head;  Node<Key> current=head;  while (current.sibling != null) {    min=(greater(min.key,current.sibling.key)) ? current.sibling : min;    current=current.sibling;  }  return min.key;}  }
class C{  private TrieNode buildTrie(String[] words){  TrieNode root=new TrieNode();  for (  String w : words) {    TrieNode node=root;    for (    char c : w.toCharArray()) {      int i=c - 'a';      if (node.next[i] == null)       node.next[i]=new TrieNode();      node=node.next[i];    }    node.word=w;  }  return root;}  }
class C{  private void loadParentId(String entidad) throws Exception {  String qual;  ArchivesTable table=new ArchivesTable();  if (_logger.isDebugEnabled())   _logger.debug("loadParentId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    qual=table.getLoadNodeArchIdQual(_id);    _parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),qual);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public void dispatchAddress(){  if (throttle != null) {    InstanceManager.throttleManagerInstance().dispatchThrottle(throttle,this);    if (consistThrottle != null) {      InstanceManager.throttleManagerInstance().dispatchThrottle(consistThrottle,this);      consistThrottle=null;    }    notifyThrottleDisposed();  }}  }
class C{  final public void print(char ch){  Writer out=this.out;  if (out == null)   return;  try {    out.write(ch);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private IgfsException handleSecondaryFsError(IOException e,String detailMsg){  return cast(detailMsg,e);}  }
class C{  public ASN1InputStream(byte[] input){  this(new ByteArrayInputStream(input),input.length);}  }
class C{  public boolean isAbbr(){  String term=getWord();  int lastdash=term.lastIndexOf("-");  if (lastdash != -1)   term=term.substring(lastdash + 1);  ArrayList<String> abbrs=Acronyms.get(term.charAt(0));  if (abbrs != null && abbrs.contains(term))   return true;  int max=end == -1 ? current : end;  final int MAX_CHARS_PER_ACR=1;  boolean needcap=true;  int smallcnt=0;  for (int i=start; i < max; i++) {    char c=text[i];switch (c) {case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':      if (needcap)       return false;    smallcnt++;  if (smallcnt >= MAX_CHARS_PER_ACR)   return false;break;case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':if (needcap == false) return false;needcap=false;smallcnt=0;break;case '.':needcap=true;smallcnt=0;break;case '-':case '/':needcap=true;smallcnt=0;break;default :return false;}}return true;}  }
class C{  @Override public int distributedProcess(ResponseBuilder rb){  SolrParams params=rb.req.getParams();  LOG.info("SuggestComponent distributedProcess with : " + params);  if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY)   return ResponseBuilder.STAGE_EXECUTE_QUERY;  if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {    ShardRequest sreq=new ShardRequest();    sreq.purpose=ShardRequest.PURPOSE_GET_TOP_IDS;    sreq.params=new ModifiableSolrParams(rb.req.getParams());    sreq.params.remove(ShardParams.SHARDS);    rb.addRequest(this,sreq);    return ResponseBuilder.STAGE_GET_FIELDS;  }  return ResponseBuilder.STAGE_DONE;}  }
class C{  public static ComponentListener add(ComponentListener a,ComponentListener b){  return (ComponentListener)addInternal(a,b);}  }
class C{  public void emptyTemplate(){  runURLRequest("Template","0");}  }
class C{  public synchronized void addItemListener(ItemListener l){  if (l == null) {    return;  }  itemListener=AWTEventMulticaster.add(itemListener,l);  newEventsOnly=true;}  }
class C{  public void testUnsizedLongsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.longs().limit(size).parallel().forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public boolean isUnknown(){  return UNKNOWN.equals(gender);}  }
class C{  protected AbstractElement createDefaultRoot(){  BranchElement map=(BranchElement)createBranchElement(null,null);  Element line=createLeafElement(map,null,0,1);  Element[] lines=new Element[1];  lines[0]=line;  map.replace(0,0,lines);  return map;}  }
class C{  public void onNothingSelected(){  TextView text=(TextView)mItemView.findViewById(R.id.challengeView);  text.setText(mApplication.getString(R.string.statistics_no_challenge_selected));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void createOutput(ReportEngine re,String printerName){  if (printerName != null) {    re.getPrintInfo().setPrinterName(printerName);  }  re.print();}  }
class C{  public AbstractHttpOperationInvoker(final Gfsh gfsh,Map<String,String> securityProperties){  this(gfsh,REST_API_URL,securityProperties);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  ColorBar clone=(ColorBar)super.clone();  clone.axis=(ValueAxis)this.axis.clone();  return clone;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.BOOTSTRAP_MODULE__MODULE_SPECIFIER_WITH_WILDCARD:    return getModuleSpecifierWithWildcard();case N4mfPackage.BOOTSTRAP_MODULE__SOURCE_PATH:  return getSourcePath();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public HashMap<Territory,Collection<Unit>> scrambleUnitsQuery(final Territory scrambleTo,final Map<Territory,Tuple<Collection<Unit>,Collection<Unit>>> possibleScramblers){  initializeData();  final GameData data=getGameData();  final PlayerID player=getPlayerID();  final BattleDelegate delegate=DelegateFinder.battleDelegate(data);  final IBattle battle=delegate.getBattleTracker().getPendingBattle(scrambleTo,false,BattleType.NORMAL);  if (battle == null) {    return null;  }  final List<Unit> attackers=(List<Unit>)battle.getAttackingUnits();  final List<Unit> defenders=(List<Unit>)battle.getDefendingUnits();  ProLogger.info(player.getName() + " checking scramble to " + scrambleTo+ ", attackers="+ attackers.size()+ ", defenders="+ defenders.size()+ ", possibleScramblers="+ possibleScramblers);  calc.setData(getGameData());  return scrambleAI.scrambleUnitsQuery(scrambleTo,possibleScramblers);}  }
class C{  public MonoMapFuseable(Publisher<? extends T> source,Function<? super T,? extends R> mapper){  super(source);  this.mapper=Objects.requireNonNull(mapper,"mapper");}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  private float[] normalize(byte[] pixels,float[] normComponents,int normOffset){  if (normComponents == null) {    normComponents=new float[normOffset + pixels.length];  }  float[] decodeArray=getDecode();  for (int i=0; i < pixels.length; i++) {    int val=pixels[i] & 0xff;    int pow=((int)Math.pow(2,getBitsPerComponent())) - 1;    float ymin=decodeArray[i * 2];    float ymax=decodeArray[(i * 2) + 1];    normComponents[normOffset + i]=FunctionType0.interpolate(val,0,pow,ymin,ymax);  }  return normComponents;}  }
class C{  protected void distributeInvalidateRegion(RegionEventImpl event){  new InvalidateRegionOperation(event).distribute();}  }
class C{  BodySIDByteOffsetPair(ByteProvider byteProvider) throws IOException {  MXFPropertyPopulator.populateField(byteProvider,this,"bodySID");  MXFPropertyPopulator.populateField(byteProvider,this,"byteOffset");}  }
class C{  void killCurrentBubbleWindow(JComponent owner){  if (currentBubbleWindow != null && (owner == null || owner == bubbleOwner)) {    currentBubbleWindow.killBubble(true);    currentBubbleWindow=null;    bubbleOwner=null;  }}  }
class C{  public void addParticipantStatusListener(ParticipantStatusListener listener){synchronized (participantStatusListeners) {    if (!participantStatusListeners.contains(listener)) {      participantStatusListeners.add(listener);    }  }}  }
class C{  @Override public void operatorExported(final Operator op,final Element opElement){  Rectangle2D bounds=lookupOperatorRectangle(op);  if (bounds != null) {    opElement.setAttribute(XML_ATTRIBUTE_X_POSITION,"" + (int)bounds.getX());    opElement.setAttribute(XML_ATTRIBUTE_Y_POSITION,"" + (int)bounds.getY());    opElement.setAttribute(XML_ATTRIBUTE_WIDTH,"" + (int)bounds.getWidth());    opElement.setAttribute(XML_ATTRIBUTE_HEIGHT,"" + (int)bounds.getHeight());  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.DISPLAY_COLOR___ANONYMOUS_DISPLAY_COLOR_11:    return getAnonymous_displayColor_1_1();case UmplePackage.DISPLAY_COLOR___COLOR_VALUE_1:  return getColorValue_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public int hashCode(){  return this.image.hashCode();}  }
class C{  public static void print(Exception e,PrintStream logger){  if (logger != null) {    StringWriter sw=new StringWriter();    PrintWriter pw=new PrintWriter(sw);    e.printStackTrace(pw);    logger.println(sw.toString());  }}  }
class C{  public DisconnectContainerFromNetworkParams withNetworkId(@NotNull String netId){  requireNonNull(netId);  this.netId=netId;  return this;}  }
class C{  public T2<K,V> maximum(){  return root.maximum();}  }
class C{  public static Vector3 scaleVector(Vector3 v,float scale){  return new Vector3(scale * v.x,scale * v.y,scale * v.z);}  }
class C{  public void removeMarker(final Marker MARKER){  if (null == MARKER)   return;  markers.remove(MARKER);  Collections.sort(markers,new MarkerComparator());  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  protected AbstractAttrNS(String nsURI,String qname,AbstractDocument owner) throws DOMException {  super(qname,owner);  if (nsURI != null && nsURI.length() == 0) {    nsURI=null;  }  namespaceURI=nsURI;  String prefix=DOMUtilities.getPrefix(qname);  if (!owner.getStrictErrorChecking()) {    return;  }  if (prefix != null) {    if (nsURI == null || ("xml".equals(prefix) && !XMLSupport.XML_NAMESPACE_URI.equals(nsURI)) || ("xmlns".equals(prefix) && !XMLSupport.XMLNS_NAMESPACE_URI.equals(nsURI))) {      throw createDOMException(DOMException.NAMESPACE_ERR,"namespace.uri",new Object[]{new Integer(getNodeType()),getNodeName(),nsURI});    }  } else   if ("xmlns".equals(qname) && !XMLSupport.XMLNS_NAMESPACE_URI.equals(nsURI)) {    throw createDOMException(DOMException.NAMESPACE_ERR,"namespace.uri",new Object[]{new Integer(getNodeType()),getNodeName(),nsURI});  }}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public boolean doDisableImageCopies(BlockSnapshot snapshot){  ContainmentConstraint constraint=ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(snapshot.getId());  URIQueryResultList exportGroupIdsForSnapshot=new URIQueryResultList();  _dbClient.queryByConstraint(constraint,exportGroupIdsForSnapshot);  Iterator<URI> exportGroupIdsForSnapshotIter=exportGroupIdsForSnapshot.iterator();  List<URI> exportGroupURIs=new ArrayList<URI>();  while (exportGroupIdsForSnapshotIter.hasNext()) {    exportGroupURIs.add(exportGroupIdsForSnapshotIter.next());  }  if (exportGroupURIs.size() > 1) {    _log.info(String.format("Snapshot %s is in %d active exportGroups. Not safe to disable the CG",snapshot.getEmName(),exportGroupURIs.size()));    return false;  }  _log.info("Safe to disable image access on the CG");  return true;}  }
class C{  public void diff_cleanupSemanticLossless(LinkedList<Diff> diffs){  String equality1, edit, equality2;  String commonString;  int commonOffset;  int score, bestScore;  String bestEquality1, bestEdit, bestEquality2;  ListIterator<Diff> pointer=diffs.listIterator();  Diff prevDiff=pointer.hasNext() ? pointer.next() : null;  Diff thisDiff=pointer.hasNext() ? pointer.next() : null;  Diff nextDiff=pointer.hasNext() ? pointer.next() : null;  while (nextDiff != null) {    if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {      equality1=prevDiff.text;      edit=thisDiff.text;      equality2=nextDiff.text;      commonOffset=diff_commonSuffix(equality1,edit);      if (commonOffset != 0) {        commonString=edit.substring(edit.length() - commonOffset);        equality1=equality1.substring(0,equality1.length() - commonOffset);        edit=commonString + edit.substring(0,edit.length() - commonOffset);        equality2=commonString + equality2;      }      bestEquality1=equality1;      bestEdit=edit;      bestEquality2=equality2;      bestScore=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);      while (edit.length() != 0 && equality2.length() != 0 && edit.charAt(0) == equality2.charAt(0)) {        equality1+=edit.charAt(0);        edit=edit.substring(1) + equality2.charAt(0);        equality2=equality2.substring(1);        score=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);        if (score >= bestScore) {          bestScore=score;          bestEquality1=equality1;          bestEdit=edit;          bestEquality2=equality2;        }      }      if (!prevDiff.text.equals(bestEquality1)) {        if (bestEquality1.length() != 0) {          prevDiff.text=bestEquality1;        } else {          pointer.previous();          pointer.previous();          pointer.previous();          pointer.remove();          pointer.next();          pointer.next();        }        thisDiff.text=bestEdit;        if (bestEquality2.length() != 0) {          nextDiff.text=bestEquality2;        } else {          pointer.remove();          nextDiff=thisDiff;          thisDiff=prevDiff;        }      }    }    prevDiff=thisDiff;    thisDiff=nextDiff;    nextDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public void attachDialogField(DialogField dialogField){  attachDialogFields(new DialogField[]{dialogField});}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public void addPoint(PolygonPoint p){  p.setPrevious(_last);  p.setNext(_last.getNext());  _last.setNext(p);  _points.add(p);}  }
class C{  public CFunctionTypePanel(final ListenerProvider<IFilterDialogListener> listeners){  super(new BorderLayout());  m_listeners=listeners;  final JPanel innerPanel=new JPanel(new GridLayout(5,1));  innerPanel.add(buildRow("Normal functions",m_normalFunctionCheckbox));  innerPanel.add(buildRow("Imported functions",m_importedFunctionCheckbox));  innerPanel.add(buildRow("Library functions",m_libraryFunctionCheckbox));  innerPanel.add(buildRow("Thunk functions",m_thunkFunctionCheckbox));  innerPanel.add(buildRow("Thunk adjustor functions",m_adjustorFunctionCheckbox));  add(innerPanel,BorderLayout.NORTH);  setBorder(new TitledBorder("Function type"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.175 -0500",hash_original_method="75751EE68232240DE115414D89F9922B",hash_generated_method="C96862B1345CDBC2343D5949F5562413") public void removeParameters(){  authParams=new NameValueList();}  }
class C{  protected OMGeometryList createMGRSRectangles(LatLonPoint llp,int accuracy,int numRects,Ellipsoid ellipsoid){  MGRSPoint mgrs=new MGRSPoint();  mgrs.setAccuracy(accuracy);  MGRSPoint.LLtoMGRS(llp,ellipsoid,mgrs);  double accuracyBonus=100000 / Math.pow(10,accuracy);  OMGeometryList list=new OMGeometryList();  for (double i=-numRects * accuracyBonus; i < numRects * accuracyBonus; i+=accuracyBonus) {    for (double j=-numRects * accuracyBonus; j < numRects * accuracyBonus; j+=accuracyBonus) {      if (Debug.debugging("utmdistancegrid")) {        System.out.print(".");      }      list.add(createMGRSRectangle(mgrs,i,j,accuracyBonus,ellipsoid));    }    if (Debug.debugging("utmdistancegrid")) {      System.out.println();    }  }  return list;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getSimpleAttribute_();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.286 -0500",hash_original_method="0B50D7519F00D454A2A6502FA20A4415",hash_generated_method="4200AE66B63982882ADDF97168C7B996") public static Element BOOLEAN(RenderScript rs){  if (rs.mElement_BOOLEAN == null) {    rs.mElement_BOOLEAN=createUser(rs,DataType.BOOLEAN);  }  return rs.mElement_BOOLEAN;}  }
class C{  public boolean isUseSiteStructuralTyping(){  return false;}  }
class C{  public static List<String> expand(String filePattern) throws IOException {  List<String> fullyExpanded=new ArrayList<String>();  List<StringWithOffset> toExpand=new ArrayList<StringWithOffset>();  toExpand.add(new StringWithOffset(filePattern,0));  while (!toExpand.isEmpty()) {    StringWithOffset path=toExpand.remove(0);    List<StringWithOffset> expanded=expandLeftmost(path);    if (expanded == null) {      fullyExpanded.add(path.string);    } else {      toExpand.addAll(0,expanded);    }  }  return fullyExpanded;}  }
class C{  public ClassDefinition beginClass(long where,String doc,int mod,IdentifierToken t,IdentifierToken sup,IdentifierToken interfaces[]){  if (tracing)   toplevelEnv.dtEnter("beginClass: " + sourceClass);  SourceClass outerClass=sourceClass;  if (outerClass == null && pkg != null) {    t=new IdentifierToken(t.getWhere(),Identifier.lookup(pkg,t.getName()));  }  if ((mod & M_ANONYMOUS) != 0) {    mod|=(M_FINAL | M_PRIVATE);  }  if ((mod & M_LOCAL) != 0) {    mod|=M_PRIVATE;  }  if ((mod & M_INTERFACE) != 0) {    mod|=M_ABSTRACT;    if (outerClass != null) {      mod|=M_STATIC;    }  }  if (outerClass != null && outerClass.isInterface()) {    if ((mod & (M_PRIVATE | M_PROTECTED)) == 0)     mod|=M_PUBLIC;    mod|=M_STATIC;  }  sourceClass=(SourceClass)toplevelEnv.makeClassDefinition(toplevelEnv,where,t,doc,mod,sup,interfaces,outerClass);  sourceClass.getClassDeclaration().setDefinition(sourceClass,CS_PARSED);  env=new Environment(toplevelEnv,sourceClass);  if (tracing)   toplevelEnv.dtEvent("beginClass: SETTING UP DEPENDENCIES");  if (tracing)   toplevelEnv.dtEvent("beginClass: ADDING TO CLASS LIST");  classes.addElement(sourceClass);  if (tracing)   toplevelEnv.dtExit("beginClass: " + sourceClass);  return sourceClass;}  }
class C{  public void write(OutputStream out) throws IOException {  out.write(block);}  }
class C{  public boolean isBroken(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return generation.broken;  }  finally {    lock.unlock();  }}  }
class C{  public Z21XNetConnectionConfig(){  super();}  }
class C{  public Builder continuous(Boolean continuous){  this.continuous=continuous;  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.MORE_CODE___ANONYMOUS_MORE_CODE_11:    return getAnonymous_moreCode_1_1();case UmplePackage.MORE_CODE___CODE_1:  return getCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public PdxType defineLocalType(Object o,PdxType newType){  if (o != null) {    PdxType t=getExistingType(o);    if (t != null) {      return t;    }    defineType(newType);    this.localTypeIds.put(o.getClass(),newType);  } else {    defineType(newType);  }  return newType;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.388 -0500",hash_original_method="5A9C556851102A9977303C7DFC694964",hash_generated_method="7680988B0AE93E017ADB68EA9FB5FB67") private void parseHeader(String header){  if (HttpLog.LOGV) {    HttpLog.v("HttpAuthHeader.parseHeader(): header: " + header);  }  if (header != null) {    String parameters=parseScheme(header);    if (parameters != null) {      if (mScheme != UNKNOWN) {        parseParameters(parameters);      }    }  }}  }
class C{  protected BlockItemMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(BlockItemMeta.class);}  }
class C{  public void addFieldNameMapping(VarSymbol field,String name){  fieldNameMapping.put(field,name);}  }
class C{  protected void encodeLinePrefix(OutputStream outStream,int length) throws IOException {  outStream.write((length & 0x3f) + ' ');}  }
class C{  public void createMirrors(URI vplexURI,List<URI> vplexMirrorURIs,String workflowTaskId,String stepId) throws WorkflowException {  List<VolumeInfo> rollbackData=new ArrayList<VolumeInfo>();  List<URI> createdVplexMirrorURIs=new ArrayList<URI>();  VplexMirrorTaskCompleter completer=new VplexMirrorTaskCompleter(VplexMirror.class,vplexMirrorURIs,workflowTaskId);  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    Map<URI,StorageSystem> storageMap=new HashMap<URI,StorageSystem>();    Map<VplexMirror,Volume> mirrorMap=new HashMap<VplexMirror,Volume>();    for (    URI vplexMirrorURI : vplexMirrorURIs) {      VplexMirror vplexMirror=getDataObject(VplexMirror.class,vplexMirrorURI,_dbClient);      for (      String associatedVolume : vplexMirror.getAssociatedVolumes()) {        Volume storageVolume=getDataObject(Volume.class,new URI(associatedVolume),_dbClient);        URI storageSystemId=storageVolume.getStorageController();        if (storageMap.containsKey(storageSystemId) == false) {          StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageSystemId);          storageMap.put(storageSystemId,storage);        }        mirrorMap.put(vplexMirror,storageVolume);      }    }    StringBuilder buf=new StringBuilder();    buf.append("Vplex: " + vplexURI + " created mirror(s): ");    for (    VplexMirror vplexMirror : mirrorMap.keySet()) {      URI vplexMirrorId=vplexMirror.getId();      Volume sourceVplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);      VPlexVirtualVolumeInfo vplexVolumeInfo=new VPlexVirtualVolumeInfo();      vplexVolumeInfo.setName(sourceVplexVolume.getDeviceLabel());      vplexVolumeInfo.setPath(sourceVplexVolume.getNativeId());      if (null == sourceVplexVolume.getAssociatedVolumes() || sourceVplexVolume.getAssociatedVolumes().isEmpty()) {        _log.error("VPLEX volume {} has no backend volumes.",sourceVplexVolume.forDisplay());        throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(sourceVplexVolume.forDisplay());      }      if (sourceVplexVolume.getAssociatedVolumes().size() > 1) {        vplexVolumeInfo.setLocality(VPlexApiConstants.DISTRIBUTED_VIRTUAL_VOLUME);      } else {        vplexVolumeInfo.setLocality(VPlexApiConstants.LOCAL_VIRTUAL_VOLUME);      }      _log.info(String.format("Creating mirror: %s (%s)",vplexMirror.getLabel(),vplexMirrorId));      Volume storageVolume=mirrorMap.get(vplexMirror);      long totalProvisioned=storageVolume.getProvisionedCapacity();      StorageSystem storage=storageMap.get(storageVolume.getStorageController());      List<String> itls=VPlexControllerUtils.getVolumeITLs(storageVolume);      VolumeInfo vinfo=new VolumeInfo(storage.getNativeGuid(),storage.getSystemType(),storageVolume.getWWN().toUpperCase().replaceAll(":",""),storageVolume.getNativeId(),storageVolume.getThinlyProvisioned().booleanValue(),itls);      rollbackData.add(vinfo);      List<VolumeInfo> vinfos=new ArrayList<VolumeInfo>();      vinfos.add(vinfo);      _workflowService.storeStepData(stepId,rollbackData);      VPlexDeviceInfo vInfo=client.createDeviceAndAttachAsMirror(vplexVolumeInfo,vinfos,true,false);      buf.append(vInfo.getName() + " ");      _log.info(String.format("Created mirror : %s path: %s : for virtual volume %s device label %s",vInfo.getName(),vInfo.getPath(),sourceVplexVolume.getLabel(),sourceVplexVolume.getDeviceLabel()));      vplexMirror.setNativeId(vInfo.getPath());      vplexMirror.setDeviceLabel(vInfo.getName());      vplexMirror.setAllocatedCapacity(0L);      vplexMirror.setProvisionedCapacity(totalProvisioned);      if (vplexVolumeInfo.isThinEnabled() != sourceVplexVolume.getThinlyProvisioned()) {        _log.info("Thin provisioned setting changed after mirror operation to " + vplexVolumeInfo.isThinEnabled());        sourceVplexVolume.setThinlyProvisioned(vplexVolumeInfo.isThinEnabled());        _dbClient.updateObject(sourceVplexVolume);      }      vplexMirror.setThinlyProvisioned(vplexVolumeInfo.isThinEnabled());      _dbClient.updateObject(vplexMirror);      createdVplexMirrorURIs.add(vplexMirrorId);      recordBourneVplexMirrorEvent(vplexMirrorId,OperationTypeEnum.CREATE_VOLUME_MIRROR.getEvType(true),Operation.Status.ready,OperationTypeEnum.CREATE_VOLUME_MIRROR.getDescription());    }    completer.ready(_dbClient);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception creating Mirror for the Virtual Volume: " + vae.getMessage(),vae);    for (    URI vplexMirrorURI : vplexMirrorURIs) {      if (!createdVplexMirrorURIs.contains(vplexMirrorURI)) {        recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.CREATE_VOLUME_MIRROR.getEvType(false),Operation.Status.error,OperationTypeEnum.CREATE_VOLUME_MIRROR.getDescription());      }    }    completer.error(_dbClient,vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception creating Mirror for the Virtual Volume: " + ex.getMessage(),ex);    for (    URI vplexMirrorURI : vplexMirrorURIs) {      if (!createdVplexMirrorURIs.contains(vplexMirrorURI)) {        recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.CREATE_VOLUME_MIRROR.getEvType(false),Operation.Status.error,OperationTypeEnum.CREATE_VOLUME_MIRROR.getDescription());      }    }    ServiceError serviceError=VPlexApiException.errors.createMirrorsFailed(ex);    completer.error(_dbClient,serviceError);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public Vset addVarUnassigned(int varNumber){  if (x == fullX) {    return this;  }  long bit=(1L << varNumber);  if (varNumber >= VBITS) {    int i=((varNumber / VBITS - 1) * 2) + 1;    if (i >= x.length) {      growX(i + 1);    }    x[i]|=bit;    x[i - 1]&=~bit;  } else {    uset|=bit;    vset&=~bit;  }  return this;}  }
class C{  public static int parseInt(int i,final int j,final byte[] bytes){  int finalValue=0;  int power=0;  boolean isNegative=false;  i--;  for (int current=j - 1; current > i; current--) {    if (bytes[current] == '-') {      isNegative=true;    } else {      if (bytes[current] != '0') {        finalValue+=((bytes[current] - 48) * powers[power]);      }      power++;    }  }  if (isNegative) {    return -finalValue;  } else {    return finalValue;  }}  }
class C{  protected void paintCaption(Graphics g,Rectangle rect){}  }
class C{  public String incrementalDisabledTipText(){  return "If enabled, incremental mode is turned off.";}  }
class C{  @Override public boolean onKill(Scheduler.KillTopologyRequest request){  String topologyName=LocalContext.topologyName(config);  LOG.info("Command to kill topology: " + topologyName);  isTopologyKilled=true;synchronized (processToContainer) {    for (    Process p : processToContainer.keySet()) {      int index=processToContainer.get(p);      LOG.info("Killing executor for container: " + index);      p.destroy();      LOG.info("Killed executor for container: " + index);    }    processToContainer.clear();  }  return true;}  }
class C{  private void readUnlock(){  lock.readLock().unlock();}  }
class C{  public static File resolvePath(File base,String path){  File r=new File(path);  return r.isAbsolute() ? r : new File(base,path);}  }
class C{  public int readChar() throws IOException {  if (_chunkLength > 0) {    _chunkLength--;    if (_chunkLength == 0 && _isLastChunk)     _chunkLength=END_OF_DATA;    int ch=parseUTF8Char();    return ch;  } else   if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  }  int tag=read();switch (tag) {case 'N':    return -1;case 'S':case 's':case 'X':case 'x':  _isLastChunk=tag == 'S' || tag == 'X';_chunkLength=(read() << 8) + read();_chunkLength--;int value=parseUTF8Char();if (_chunkLength == 0 && _isLastChunk) _chunkLength=END_OF_DATA;return value;default :throw new IOException("expected 'S' at " + (char)tag);}}  }
class C{  public final int size(){  return values.length;}  }
class C{  @Override public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(getCtx(),m_WindowNo,I_C_Order.COLUMNNAME_IsSOTrx,"N");  try {    statInit();    fillPicks();    jbInit();    m_frame.getContentPane().add(mainPanel,BorderLayout.CENTER);    m_frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"VMRPDetailed.init",e);  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized E elementAt(int location){  if (location < elementCount) {    return (E)elementData[location];  }  throw new ArrayIndexOutOfBoundsException(location);}  }
class C{  public Stat addUsageStat(String fsNativeGuid,Map<String,Object> keyMap,Map<String,Number> metrics){  Stat stat=zeroRecordGenerator.injectattr(keyMap,fsNativeGuid,null);  if (stat != null) {    DbClient dbClient=(DbClient)keyMap.get(Constants.dbClient);    stat.setTimeInMillis((Long)keyMap.get(Constants._TimeCollected));    stat.setTimeCollected((Long)keyMap.get(Constants._TimeCollected));    statsColumnInjector.injectColumns(stat,dbClient);    stat.setProvisionedCapacity((Long)metrics.get(Constants.SIZE_TOTAL));    stat.setAllocatedCapacity((Long)metrics.get(Constants.SIZE_USED));    stat.setSnapshotCapacity((Long)metrics.get(Constants.SNAPSHOT_BYTES_RESERVED));    stat.setSnapshotCount((Integer)metrics.get(Constants.SNAPSHOT_COUNT));    _log.debug(String.format("Stat: %s: %s: provisioned(%s): used(%s)",stat.getResourceId(),fsNativeGuid,stat.getProvisionedCapacity(),stat.getAllocatedCapacity()));    _log.debug(String.format("Stat: %s: %s: snapshot capacity (%s), count (%s)",stat.getResourceId(),fsNativeGuid,stat.getSnapshotCapacity(),stat.getSnapshotCount()));  }  return stat;}  }
class C{  public void deleteRow(Value[] current) throws SQLException {  StatementBuilder buff=new StatementBuilder("DELETE FROM ");  appendTableName(buff);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  setKey(prep,1,current);  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  public void reduce(GeneralSubtrees excluded){  if (excluded == null) {    return;  }  for (int i=0, n=excluded.size(); i < n; i++) {    GeneralNameInterface excludedName=excluded.getGeneralNameInterface(i);    for (int j=0; j < size(); j++) {      GeneralNameInterface permitted=getGeneralNameInterface(j);switch (excludedName.constrains(permitted)) {case GeneralNameInterface.NAME_DIFF_TYPE:        break;case GeneralNameInterface.NAME_MATCH:      remove(j);    j--;  break;case GeneralNameInterface.NAME_NARROWS:remove(j);j--;break;case GeneralNameInterface.NAME_WIDENS:break;case GeneralNameInterface.NAME_SAME_TYPE:break;}}}}  }
class C{  public static boolean isOrContainsType(TypeRef typeRef,Type declaredType){  if (typeRef == null) {    return false;  }  if (typeRef instanceof ComposedTypeRef) {    return ((ComposedTypeRef)typeRef).getTypeRefs().stream().anyMatch(null);  }  if (typeRef.getDeclaredType() == null) {    return false;  }  return typeRef.getDeclaredType() == declaredType;}  }
class C{  public static DashboardDto transformToDto(Dashboard dashboard){  if (dashboard == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  DashboardDto result=createDtoObject(DashboardDto.class,dashboard);  result.setOwnerName(dashboard.getOwner().getUserName());  return result;}  }
class C{  protected static void assertImageNinePoints(String name,int[] pixels,Dimension size,Pixel upperLeft,Pixel upperCenter,Pixel upperRight,Pixel midLeft,Pixel center,Pixel midRight,Pixel lowerLeft,Pixel lowerCenter,Pixel lowerRight){  int rows=size.height;  int cols=size.width;  Assert.assertEquals("size consistency",pixels.length,rows * cols);  assertPixel(name + " upper left",upperLeft,pixels[0]);  assertPixel(name + " upper middle",upperCenter,pixels[0 + cols / 2]);  assertPixel(name + " upper right",upperRight,pixels[0 + (cols - 1)]);  assertPixel(name + " middle left",midLeft,pixels[(rows / 2) * cols]);  assertPixel(name + " middle right",midRight,pixels[(rows / 2) * cols + (cols - 1)]);  assertPixel(name + " lower left",lowerLeft,pixels[(rows * cols - 1) - (cols - 1)]);  assertPixel(name + " lower middle",lowerCenter,pixels[(rows * cols - 1) - (cols - 1) + cols / 2]);  assertPixel(name + " lower right",lowerRight,pixels[rows * cols - 1]);  assertPixel(name + " center",center,pixels[(rows / 2) * cols + cols / 2]);}  }
class C{  public static BigInteger evaluateExpression(final INaviOperandTreeNode node,final ImmutableList<RegisterValue> registers,final IDebugger debugger,final INaviModule module) throws CExpressionEvaluationException {switch (node.getType()) {case IMMEDIATE_INTEGER:    return evaluateInteger(node,debugger,module);case REGISTER:  return evaluateRegister(node,registers);case OPERATOR:return evaluateOperator(node,registers,debugger,module);default :throw new IllegalStateException("IE00610: Unknown operand type");}}  }
class C{  public static QueueInfo removeFirstRequest(QueueInfo queueInfo,String id){  int initialRequestCount=queueInfo.getRequestCount();  if (initialRequestCount == 0) {    throw new IllegalArgumentException("Cannot remove request from queue with no requests.");  }  int firstRequestNo=initialRequestCount == 1 ? 0 : queueInfo.getFirstRequestNo() + 1;  QueueInfo result=getCopy(queueInfo);  result.lastSentTime=new Date();  result.firstRequestSendCount=0;  result.requestCount=queueInfo.requestCount - 1;  result.firstRequestNo=firstRequestNo;  result.lastSuccessId=id;  result.lastSuccessTime=new Date();  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.723 -0400",hash_original_method="F4D6C9041E127D6A9D181ECD595CA773",hash_generated_method="C796E62DC57C7B34B015D2EA37F34B96") public FileWriterWithEncoding(String filename,Charset encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  private CGraphHotkeys(){}  }
class C{  public <T>T waitForState(String uri,Class<T> type,Predicate<T> predicate) throws Throwable {  return ServiceHostUtils.waitForServiceState(type,uri,predicate,this,this.waitIterationSleep,this.waitIterationCount,null);}  }
class C{  public void addCapabilitiesListener(ICapabilitiesListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mCapabilitiesBroadcaster.addCapabilitiesListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public static boolean isPackage(int accflags){  return (accflags & (PROTECTED | PUBLIC | PRIVATE)) == 0;}  }
class C{  public static Float[] toReferenceType(float[] primArr){  Float[] refArr=new Float[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=new Float(primArr[i]);  return refArr;}  }
class C{  public CTrackingResult(final INaviInstruction startInstruction,final String trackedRegister,final List<CInstructionResult> results){  m_startInstruction=Preconditions.checkNotNull(startInstruction,"IE02301: startInstruction argument can not be null");  m_trackedRegister=Preconditions.checkNotNull(trackedRegister,"IE02302: trackedRegister argument can not be null");  m_results=new ArrayList<CInstructionResult>(Preconditions.checkNotNull(results,"IE02303: results argument can not be null"));}  }
class C{  public boolean visit(VariableDeclarationStatement node){  return true;}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  protected void onStarve(){  if (weight > 0) {    setWeight(weight - 1);    updateSoundList();  } else {    delayedDamage(1,"starvation");  }  logger.warn("Sheep starve " + getZone().getName() + " "+ getX()+ ": "+ getY());  hunger/=2;}  }
class C{  public boolean isChanged(){  return changed;}  }
class C{  private void copyApplicationStub() throws BuildException {  File newStubFile=new File(mMacOsDir,bundleProperties.getCFBundleExecutable());  if (mVerbose)   log("Copying Java application stub to \"" + bundlePath(newStubFile) + "\"");  try {    mFileUtils.copyFile(mStubFile,newStubFile);  } catch (  IOException ex) {    throw new BuildException("Cannot copy Java Application Stub: " + ex);  }  setExecutable(newStubFile);}  }
class C{  public static Map<String,Object> checkPermission(DispatchContext ctx,Map<String,?> context){  boolean hasPermission=false;  String mainAction=(String)context.get("mainAction");  if ("VIEW".equals(mainAction)) {    if (DEFAULT_UID.equals(context.get(LOGINID_PARAMETER_NAME))) {      hasPermission=true;    } else {      hasPermission=isValidGetId(ctx,context);    }  } else   if ("CREATE~UPDATE~DELETE".contains(mainAction)) {    hasPermission=isValidSetId(ctx,context);  } else {    hasPermission=false;  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("hasPermission",hasPermission);  return result;}  }
class C{  public Phone fax(){  return fax;}  }
class C{  private void addIntersectionNodes(Iterator nodeIterator,GeomVectorField intersections){  GeometryFactory fact=new GeometryFactory();  Coordinate coord=null;  Point point=null;  int counter=0;  while (nodeIterator.hasNext()) {    Node node=(Node)nodeIterator.next();    coord=node.getCoordinate();    point=fact.createPoint(coord);    junctions.addGeometry(new MasonGeometry(point));    counter++;  }}  }
class C{  private void paintMaximizeHover(Graphics2D g,JComponent c,int width,int height){  maximizePainter.paintHover(g,c,width,height);}  }
class C{  public OrderInfo order(String serviceId,Map<String,Object> parameters) throws ValidationException {  return doOrder(client.uriBuilder(SERVICE_URL).build(serviceId),parameters);}  }
class C{  public final IOContainer run() throws OperatorException {  return run(new IOContainer());}  }
class C{  public static DataType fromExternalToWrapperDataType(org.carbondata.format.DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return DataType.STRING;case INT:  return DataType.INT;case LONG:return DataType.LONG;case DOUBLE:return DataType.DOUBLE;case DECIMAL:return DataType.DECIMAL;case TIMESTAMP:return DataType.TIMESTAMP;case ARRAY:return DataType.ARRAY;case STRUCT:return DataType.STRUCT;default :return DataType.STRING;}}  }
class C{  public boolean isMenuAssets(){  Object oo=get_Value(COLUMNNAME_IsMenuAssets);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  String a, result=null;  for (int i=0; null != (a=this.getKey(i)); i++) {    String av="{" + a;    String val=this.getValueAsString(i);    if (val != null)     av+="=" + val + "}"; else     av+="}";    if (result == null)     result=av; else     result=result + ", " + av;  }  return result != null ? result : "";}  }
class C{  public boolean equals(Object obj){  if (obj instanceof MimeMessageJDBCSource) {    MimeMessageJDBCSource source=(MimeMessageJDBCSource)obj;    return ((source.key.equals(key)) || ((source.key != null) && source.key.equals(key))) && ((source.repository == repository) || ((source.repository != null) && source.repository.equals(repository)));  }  return false;}  }
class C{  public GF2Polynomial remainder(GF2Polynomial g) throws RuntimeException {  GF2Polynomial a=new GF2Polynomial(this);  GF2Polynomial b=new GF2Polynomial(g);  GF2Polynomial j;  int i;  if (b.isZero()) {    throw new RuntimeException();  }  a.reduceN();  b.reduceN();  if (a.len < b.len) {    return a;  }  i=a.len - b.len;  while (i >= 0) {    j=b.shiftLeft(i);    a.subtractFromThis(j);    a.reduceN();    i=a.len - b.len;  }  return a;}  }
class C{  public final void testSetHintTextColorWithColorStateListParameter(){  ColorStateList colorStateList=ColorStateList.valueOf(Color.BLACK);  ArrayAdapter<CharSequence> adapter=new ArrayAdapter<CharSequence>(getContext(),android.R.layout.simple_spinner_dropdown_item,new CharSequence[]{"entry1","entry2"});  Spinner spinner=new Spinner(getContext());  spinner.setAdapter(adapter);  spinner.setHintTextColor(colorStateList);  assertEquals(colorStateList,spinner.getHintTextColors());}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("IDOS",3) : null;  if (stepprog != null) {    stepprog.beginStep(1,"Precomputing neighborhoods",LOG);  }  KNNQuery<O> knnQ=DatabaseUtil.precomputedKNNQuery(database,relation,getDistanceFunction(),Math.max(k_c,k_r) + 1);  DBIDs ids=relation.getDBIDs();  if (stepprog != null) {    stepprog.beginStep(2,"Computing intrinsic dimensionalities",LOG);  }  DoubleDataStore intDims=computeIDs(ids,knnQ);  if (stepprog != null) {    stepprog.beginStep(3,"Computing IDOS scores",LOG);  }  DoubleMinMax idosminmax=new DoubleMinMax();  DoubleDataStore ldms=computeIDOS(ids,knnQ,intDims,idosminmax);  if (stepprog != null) {    stepprog.setCompleted(LOG);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("Intrinsic Dimensionality Outlier Score","idos",ldms,ids);  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(idosminmax.getMin(),idosminmax.getMax(),0.0,Double.POSITIVE_INFINITY,1.0);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public void removeEventListener(FileUploadListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IFileUploadListener> weakRef=mFileUploadListeners.remove(listener);    if (weakRef == null) {      return;    }    IFileUploadListener fileUploadListener=weakRef.get();    if (fileUploadListener != null) {      mApi.removeEventListener(fileUploadListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public String reason(){  return reason;}  }
class C{  @Override void resetList(){  clearRecycledState(mHeaderViewInfos);  clearRecycledState(mFooterViewInfos);  super.resetList();  mLayoutMode=LAYOUT_NORMAL;}  }
class C{  protected JvmMemMgrPoolRelTableMeta createJvmMemMgrPoolRelTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemMgrPoolRelTableMetaImpl(mib,objectserver);}  }
class C{  public static Iterator tuples(TupleSet ts,Predicate p){  if (p == null)   return ts.tuples();  Iterator iter=null;  if (ts instanceof Table) {    Table t=(Table)ts;    IntIterator ii=getOptimizedIterator(t,p);    if (ii != null)     iter=t.tuples(ii);  }  if (iter == null) {    iter=new FilterIterator(ts.tuples(),p);  }  return iter;}  }
class C{  @RequestMapping(value="/foos/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteFoo(@PathVariable Long id){  log.debug("REST request to delete Foo : {}",id);  fooRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("foo",id.toString())).build();}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  return new State(info);}  }
class C{  public static int copy(Reader in,Writer out) throws IOException {  Assert.notNull(in,"No Reader specified");  Assert.notNull(out,"No Writer specified");  try {    int byteCount=0;    char[] buffer=new char[BUFFER_SIZE];    int bytesRead=-1;    while ((bytesRead=in.read(buffer)) != -1) {      out.write(buffer,0,bytesRead);      byteCount+=bytesRead;    }    out.flush();    return byteCount;  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void disAllowTeleport(){  disallowIn();  disallowOut();}  }
class C{  private void cmd_file(){  FolderBrowser directoryDialog=new FolderBrowser(true);  String directory=directoryDialog.getPath();  getComponent().setText(directory);}  }
class C{  protected int peekInternalDBID(){  return (numties > 0) ? ties[numties - 1] : heap.peekValue();}  }
class C{  private boolean disableIndexOnStartUp(){  return !disableField.getBooleanValue();}  }
class C{  private void addEvent(CacheEvent e,boolean setInvoked){  if (setInvoked) {    this.invoked=true;  }  if (this.eventHistory != null) {synchronized (this.eventHistory) {      this.eventHistory.add(e);    }  }}  }
class C{  private void checkResponseCode(Context context,long requestId,int responseCodeIndex){  Intent intent=new Intent(Consts.ACTION_RESPONSE_CODE);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_REQUEST_ID,requestId);  intent.putExtra(Consts.INAPP_RESPONSE_CODE,responseCodeIndex);  context.startService(intent);}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected static boolean isEqualIgnoreCase(int i,char c){  return (i == -1) ? false : Character.toLowerCase((char)i) == c;}  }
class C{  protected void formBusquedaAvanzadaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  try {    saveCurrentInvocation(KeysClientsInvocations.CUADRO_FORM_BUSQUEDA_AVANZADA_ELEMENTOS,request);    initializeSessionValues(request);    removeInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_KEY);    Busqueda busqueda=getCfgBusquedaFondosAvanzada(request);    setInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_KEY,busqueda);    BusquedasHelper.loadListasBusqueda(busqueda,(BusquedaElementosForm)form,request,null);    setReturnActionFordward(request,mapping.findForward("form_busqueda_avanzada"));  } catch (  FileNotFoundException flne) {    logger.error("NO SE HA ENCONTRADO EL FICHERO DE CONFIGURACION DE BUSQUEDA",flne);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE_NOT_FOUND));    goBackExecuteLogic(mapping,form,request,response);  }catch (  Exception e) {    logger.error("ERROR AL OBTENER EL FICHERO DE CONFIGURACION DE BUSQUEDA",e);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE));    goBackExecuteLogic(mapping,form,request,response);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_DURING___TRACE_DURATION_1:    setTrace_duration_1(TRACE_DURATION_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private static void markupParagraph(Element parent,String text,String linkCssClass){  if (StringUtils.isNullOrWhitespace(text)) {    return;  }  ParagraphElement myParagraph=createParagraphElement();  int index=0;  REGEXP_MARKUP.setLastIndex(0);  SpanElement current=createSpanElement();  for (MatchResult match=REGEXP_MARKUP.exec(text); match != null; match=REGEXP_MARKUP.exec(text)) {    current.setTextContent(text.substring(index,match.getIndex()));    myParagraph.appendChild(current);    current=createSpanElement();    if (match.getGroup(0).equals("\n")) {      myParagraph.appendChild(createBRElement());    } else {      AnchorElement anchor=createAnchorElement(linkCssClass);      anchor.setHref(match.getGroup(0));      anchor.setTarget("_blank");      anchor.setTextContent(match.getGroup(0));      myParagraph.appendChild(anchor);    }    index=match.getIndex() + match.getGroup(0).length();  }  current.setTextContent(text.substring(index));  myParagraph.appendChild(current);  parent.appendChild(myParagraph);}  }
class C{  private String generateResponseForm(Response samlResponse,String spEntId){  Validate.notEmpty(spEntId,"spEntId");  SamlService service=createSamlServiceForTenant(spEntId);  String acsUrl=idmAccessor.getAcsForRelyingParty(spEntId,null,null,SAMLNames.HTTP_POST_BINDING,false);  return service.buildPostResponseForm(samlResponse,this.relayState,acsUrl);}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  private int internalGetEra(){  return isSet(ERA) ? internalGet(ERA) : CE;}  }
class C{  @RequestProcessing(value="/admin/comments",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showComments(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/comments.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final int windowSize=Symphonys.WINDOW_SIZE;  final JSONObject requestJSONObject=new JSONObject();  requestJSONObject.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  requestJSONObject.put(Pagination.PAGINATION_PAGE_SIZE,pageSize);  requestJSONObject.put(Pagination.PAGINATION_WINDOW_SIZE,windowSize);  final Map<String,Class<?>> commentFields=new HashMap<String,Class<?>>();  commentFields.put(Keys.OBJECT_ID,String.class);  commentFields.put(Comment.COMMENT_CREATE_TIME,String.class);  commentFields.put(Comment.COMMENT_AUTHOR_ID,String.class);  commentFields.put(Comment.COMMENT_ON_ARTICLE_ID,String.class);  commentFields.put(Comment.COMMENT_SHARP_URL,String.class);  commentFields.put(Comment.COMMENT_STATUS,Integer.class);  commentFields.put(Comment.COMMENT_CONTENT,String.class);  final JSONObject result=commentQueryService.getComments(requestJSONObject,commentFields);  dataModel.put(Comment.COMMENTS,CollectionUtils.jsonArrayToList(result.optJSONArray(Comment.COMMENTS)));  final JSONObject pagination=result.optJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final JSONArray pageNums=pagination.optJSONArray(Pagination.PAGINATION_PAGE_NUMS);  dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.opt(0));  dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.opt(pageNums.length() - 1));  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,CollectionUtils.jsonArrayToList(pageNums));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public BadAttributeValueExpException(Object val){  this.val=val == null ? null : val.toString();}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.197 -0500",hash_original_method="A82C4E1E74B388EF1F68336E0B7074B9",hash_generated_method="DFA28A1095760F60199A7210297ABC05") public void clearBindings(){  mBindArgs=null;  if (this.nStatement == 0) {    return;  }  mDatabase.verifyDbIsOpen();  acquireReference();  try {    native_clear_bindings();  }  finally {    releaseReference();  }}  }
class C{  public synchronized void showPage(PDFPage page){  if (currentPage != null && prevSize != null) {    currentPage.stop(prevSize.width,prevSize.height,null);  }  currentPage=page;  if (page == null) {    currentImage=null;    af=null;    repaint();  } else {    flag.clear();    Dimension sz=getSize();    if (this.getParent().getParent() instanceof JScrollPane) {      sz=((JScrollPane)this.getParent().getParent()).getSize();      sz=new Dimension(sz.width - SCROLLBAR_BORDER,sz.height - SCROLLBAR_BORDER);    }    if (sz.width + sz.height <= 0) {      return;    }    Dimension pageSize=page.getUnstretchedSize(sz.width,sz.height,null);    int imw=pageSize.width;    int imh=pageSize.height;    int scrollbarWidth=0;    if (zoomFactor == -1.0) {      scale=Math.min(sz.getWidth() / imw,sz.getHeight() / imh);      imw*=scale;      imh*=scale;      setSize(sz.width,sz.height);      setPreferredSize(getSize());    } else     if (zoomFactor == -2.0) {      if ((sz.height * page.getAspectRatio()) > sz.width) {        scrollbarWidth=SCROLLBAR_WIDTH;      } else {        scrollbarWidth=0;      }      scale=(sz.getHeight() - scrollbarWidth) / imh;      imh=sz.height - scrollbarWidth;      imw=(int)(imw * scale);      setSize(Math.max(imw,sz.width),imh);      setPreferredSize(getSize());    } else     if (zoomFactor == -3.0) {      if (sz.width > (sz.height * page.getAspectRatio())) {        scrollbarWidth=SCROLLBAR_WIDTH;      } else {        scrollbarWidth=0;      }      scale=(sz.getWidth() - scrollbarWidth) / imw;      imw=sz.width - scrollbarWidth;      imh=(int)(imh * scale);      setSize(imw,Math.max(imh,sz.height));      setPreferredSize(getSize());    } else     if (zoomFactor == -4.0) {      imw=(int)page.getWidth();      imh=(int)page.getHeight();      scale=Math.min(sz.getWidth() / imw,sz.getHeight() / imh);      setSize(Math.max(imw,imh > sz.height ? sz.width - SCROLLBAR_WIDTH : sz.width),Math.max(imh,imw > sz.width ? sz.height - SCROLLBAR_WIDTH : sz.height));      setPreferredSize(getSize());    } else     if (zoomFactor > 0) {      scale=zoomFactor;      imw*=zoomFactor;      imh*=zoomFactor;      setSize(Math.max(imw,imh > sz.height ? sz.width - SCROLLBAR_WIDTH : sz.width),Math.max(imh,imw > sz.width ? sz.height - SCROLLBAR_WIDTH : sz.height));      setPreferredSize(getSize());    }    currentImage=page.getImage(imw,imh,null,this,true,true);    prevSize=pageSize;    repaint();    if (this.getParent() instanceof JViewport) {      ((JViewport)this.getParent()).setViewPosition(new Point(0,0));    }  }}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  private void saveEntityStatus(String sStatus){  try {    String sLogDir=PreferenceManager.getClientPreferences().getLogDirectory();    File logDir=new File(sLogDir);    if (!logDir.exists()) {      logDir.mkdir();    }    String fileName="entitystatus.txt";    if (PreferenceManager.getClientPreferences().stampFilenames()) {      fileName=StringUtil.addDateTimeStamp(fileName);    }    FileWriter fw=new FileWriter(sLogDir + File.separator + fileName);    fw.write(sStatus);    fw.flush();    fw.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void testInit_RequestsLoadLocationsWhenDataModelAvailable(){  when(mMockAppModel.isFullModelAvailable()).thenReturn(true);  mController.init();  verify(mMockAppModel).fetchLocationTree(mFakeEventBus,"en");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  int nodeType;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("title");  nodeType=(int)addrAttr.getNodeType();  assertEquals("nodeAttrNodeTypeAssert1",2,nodeType);}  }
class C{  @Override public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo state,Point2D source){  this.rangeAxis.zoomRange(lowerPercent,upperPercent);}  }
class C{  public void moveRight(){  Coord scale=_map.scale(_zoom);  double partX=1.0 * getWidth() / 4;  _center=_center.translate(0,partX * scale.getLongitude());  _needTiles=true;}  }
class C{  public static int hash(double value){  long bits=Double.doubleToLongBits(value);  return (int)(bits ^ (bits >>> 32));}  }
class C{  public void logMessageContent(byte[] value){  logger.info("RECEIVED DATA WITH LENGTH: " + ((value != null) ? value.length : "(null)"));  Logging.logBytes(logger,value);}  }
class C{  @NotNull public static VirtualFile copyFile(Object requestor,@NotNull VirtualFile file,@NotNull VirtualFile toDir) throws IOException {  return copyFile(requestor,file,toDir,file.getName());}  }
class C{  public static Chset union(Chset left,Chset right){  Chset n=(Chset)left.clone();  for (  Range r : right.ranges) {    n.set(r);  }  return n;}  }
class C{  private void ensureRowSize(){  Iterator<List<Object>> rowIterator=this.getInnerList().iterator();  while (rowIterator.hasNext()) {    List<Object> list=rowIterator.next();    if (list instanceof Vector)     ((Vector<Object>)list).setSize(m_noColumns); else {      if (m_noColumns > list.size()) {        for (int i=list.size(); i < m_noColumns; i++) {          list.add(null);        }      } else       if (m_noColumns < list.size()) {        for (int i=list.size(); i > m_noColumns; i--) {          list.remove(i - 1);        }      }    }  }}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  projectDescriptionEClass=createEClass(PROJECT_DESCRIPTION);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__VENDOR_NAME);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__PROJECT_VERSION);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__PROJECT_TYPE);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__MAIN_MODULE);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__EXTENDED_RUNTIME_ENVIRONMENT);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__PROVIDED_RUNTIME_LIBRARIES);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__REQUIRED_RUNTIME_LIBRARIES);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__PROJECT_DEPENDENCIES);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__IMPLEMENTATION_ID);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__IMPLEMENTED_PROJECTS);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__INIT_MODULES);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__EXEC_MODULE);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__OUTPUT_PATH);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__LIBRARY_PATHS);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__RESOURCE_PATHS);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__SOURCE_FRAGMENT);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__MODULE_FILTERS);  createEReference(projectDescriptionEClass,PROJECT_DESCRIPTION__TESTED_PROJECTS);  createEAttribute(projectDescriptionEClass,PROJECT_DESCRIPTION__MODULE_LOADER);  createEOperation(projectDescriptionEClass,PROJECT_DESCRIPTION___GET_ALL_TESTED_PROJECTS);  createEOperation(projectDescriptionEClass,PROJECT_DESCRIPTION___GET_ALL_INIT_MODULES);  createEOperation(projectDescriptionEClass,PROJECT_DESCRIPTION___GET_ALL_IMPLEMENTED_PROJECTS);  createEOperation(projectDescriptionEClass,PROJECT_DESCRIPTION___GET_ALL_PROJECT_DEPENDENCIES);  createEOperation(projectDescriptionEClass,PROJECT_DESCRIPTION___GET_ALL_PROVIDED_RUNTIME_LIBRARIES);  createEOperation(projectDescriptionEClass,PROJECT_DESCRIPTION___GET_ALL_REQUIRED_RUNTIME_LIBRARIES);  execModuleEClass=createEClass(EXEC_MODULE);  createEReference(execModuleEClass,EXEC_MODULE__EXEC_MODULE);  testedProjectsEClass=createEClass(TESTED_PROJECTS);  createEReference(testedProjectsEClass,TESTED_PROJECTS__TESTED_PROJECTS);  initModulesEClass=createEClass(INIT_MODULES);  createEReference(initModulesEClass,INIT_MODULES__INIT_MODULES);  implementedProjectsEClass=createEClass(IMPLEMENTED_PROJECTS);  createEReference(implementedProjectsEClass,IMPLEMENTED_PROJECTS__IMPLEMENTED_PROJECTS);  projectDependenciesEClass=createEClass(PROJECT_DEPENDENCIES);  createEReference(projectDependenciesEClass,PROJECT_DEPENDENCIES__PROJECT_DEPENDENCIES);  providedRuntimeLibrariesEClass=createEClass(PROVIDED_RUNTIME_LIBRARIES);  createEReference(providedRuntimeLibrariesEClass,PROVIDED_RUNTIME_LIBRARIES__PROVIDED_RUNTIME_LIBRARIES);  requiredRuntimeLibrariesEClass=createEClass(REQUIRED_RUNTIME_LIBRARIES);  createEReference(requiredRuntimeLibrariesEClass,REQUIRED_RUNTIME_LIBRARIES__REQUIRED_RUNTIME_LIBRARIES);  simpleProjectDescriptionEClass=createEClass(SIMPLE_PROJECT_DESCRIPTION);  createEAttribute(simpleProjectDescriptionEClass,SIMPLE_PROJECT_DESCRIPTION__DECLARED_VENDOR_ID);  createEAttribute(simpleProjectDescriptionEClass,SIMPLE_PROJECT_DESCRIPTION__PROJECT_ID);  createEOperation(simpleProjectDescriptionEClass,SIMPLE_PROJECT_DESCRIPTION___GET_VENDOR_ID);  testedProjectEClass=createEClass(TESTED_PROJECT);  createEReference(testedProjectEClass,TESTED_PROJECT__VERSION_CONSTRAINT);  createEAttribute(testedProjectEClass,TESTED_PROJECT__DECLARED_SCOPE);  declaredVersionEClass=createEClass(DECLARED_VERSION);  createEAttribute(declaredVersionEClass,DECLARED_VERSION__MAJOR);  createEAttribute(declaredVersionEClass,DECLARED_VERSION__MINOR);  createEAttribute(declaredVersionEClass,DECLARED_VERSION__MICRO);  createEAttribute(declaredVersionEClass,DECLARED_VERSION__QUALIFIER);  sourceFragmentEClass=createEClass(SOURCE_FRAGMENT);  createEAttribute(sourceFragmentEClass,SOURCE_FRAGMENT__SOURCE_FRAGMENT_TYPE);  createEAttribute(sourceFragmentEClass,SOURCE_FRAGMENT__PATHS);  createEOperation(sourceFragmentEClass,SOURCE_FRAGMENT___COMPARE_BY_FRAGMENT_TYPE__SOURCEFRAGMENT);  moduleFilterEClass=createEClass(MODULE_FILTER);  createEAttribute(moduleFilterEClass,MODULE_FILTER__MODULE_FILTER_TYPE);  createEReference(moduleFilterEClass,MODULE_FILTER__MODULE_SPECIFIERS);  bootstrapModuleEClass=createEClass(BOOTSTRAP_MODULE);  createEAttribute(bootstrapModuleEClass,BOOTSTRAP_MODULE__MODULE_SPECIFIER_WITH_WILDCARD);  createEAttribute(bootstrapModuleEClass,BOOTSTRAP_MODULE__SOURCE_PATH);  extendedRuntimeEnvironmentEClass=createEClass(EXTENDED_RUNTIME_ENVIRONMENT);  createEReference(extendedRuntimeEnvironmentEClass,EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT);  projectReferenceEClass=createEClass(PROJECT_REFERENCE);  createEReference(projectReferenceEClass,PROJECT_REFERENCE__PROJECT);  simpleProjectDependencyEClass=createEClass(SIMPLE_PROJECT_DEPENDENCY);  createEOperation(simpleProjectDependencyEClass,SIMPLE_PROJECT_DEPENDENCY___GET_SCOPE);  moduleFilterSpecifierEClass=createEClass(MODULE_FILTER_SPECIFIER);  createEAttribute(moduleFilterSpecifierEClass,MODULE_FILTER_SPECIFIER__MODULE_SPECIFIER_WITH_WILDCARD);  createEAttribute(moduleFilterSpecifierEClass,MODULE_FILTER_SPECIFIER__SOURCE_PATH);  runtimeProjectDependencyEClass=createEClass(RUNTIME_PROJECT_DEPENDENCY);  requiredRuntimeLibraryDependencyEClass=createEClass(REQUIRED_RUNTIME_LIBRARY_DEPENDENCY);  providedRuntimeLibraryDependencyEClass=createEClass(PROVIDED_RUNTIME_LIBRARY_DEPENDENCY);  projectDependencyEClass=createEClass(PROJECT_DEPENDENCY);  createEReference(projectDependencyEClass,PROJECT_DEPENDENCY__VERSION_CONSTRAINT);  createEAttribute(projectDependencyEClass,PROJECT_DEPENDENCY__DECLARED_SCOPE);  createEOperation(projectDependencyEClass,PROJECT_DEPENDENCY___GET_SCOPE);  versionConstraintEClass=createEClass(VERSION_CONSTRAINT);  createEAttribute(versionConstraintEClass,VERSION_CONSTRAINT__EXCL_LOWER_BOUND);  createEReference(versionConstraintEClass,VERSION_CONSTRAINT__LOWER_VERSION);  createEAttribute(versionConstraintEClass,VERSION_CONSTRAINT__EXCL_UPPER_BOUND);  createEReference(versionConstraintEClass,VERSION_CONSTRAINT__UPPER_VERSION);  projectTypeEEnum=createEEnum(PROJECT_TYPE);  sourceFragmentTypeEEnum=createEEnum(SOURCE_FRAGMENT_TYPE);  moduleFilterTypeEEnum=createEEnum(MODULE_FILTER_TYPE);  projectDependencyScopeEEnum=createEEnum(PROJECT_DEPENDENCY_SCOPE);  moduleLoaderEEnum=createEEnum(MODULE_LOADER);}  }
class C{  public static InputStream newBZFileInputStream(String file,boolean useGzip,boolean useIBuffers,int buffersize) throws IOException {  if (useGzip) {    return new GZIPInputStream(new FileInputStream(file),buffersize);  } else   if (useIBuffers) {    return new BufferedInputStream(new FileInputStream(file),buffersize);  } else {    return new FileInputStream(file);  }}  }
class C{  public void addItem(Comparable key,Number value){  this.dataset.setValue(key,value);}  }
class C{  private boolean makeCurrent(final EGLSurface surface){  if (mEglDisplay == null) {    if (DEBUG)     Log.d(TAG,"makeCurrent:eglDisplay not initialized");  }  if (surface == null || surface == EGL14.EGL_NO_SURFACE) {    final int error=EGL14.eglGetError();    if (error == EGL14.EGL_BAD_NATIVE_WINDOW) {      Log.e(TAG,"makeCurrent:returned EGL_BAD_NATIVE_WINDOW.");    }    return false;  }  if (!EGL14.eglMakeCurrent(mEglDisplay,surface,surface,mEglContext)) {    Log.w(TAG,"eglMakeCurrent:" + EGL14.eglGetError());    return false;  }  return true;}  }
class C{  private int writeLimit(int desiredWriteCount){  return desiredWriteCount > (array.length - buffered) ? (array.length - buffered) : desiredWriteCount;}  }
class C{  public VelocityContext(Map context){  this(context,null);}  }
class C{  public void testBigMinCalculation3Dim(){  final byte[] searchMinZOrder={Byte.valueOf("00000000",2),Byte.valueOf("00000000",2),Byte.valueOf("00010011",2)};  final byte[] searchMaxZOrder={Byte.valueOf("00000000",2),Byte.valueOf("00000000",2),Byte.valueOf("00010111",2)};  final ZOrderRangeScanUtil rangeScanUtil=new ZOrderRangeScanUtil(searchMinZOrder,searchMaxZOrder,3);  final byte[] dividingRecord={Byte.valueOf("00000000",2),Byte.valueOf("00000000",2),Byte.valueOf("00010101",2)};  assertFalse(rangeScanUtil.isInSearchRange(dividingRecord));  final byte[] bigMinAct=rangeScanUtil.calculateBigMin(dividingRecord);  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct));  assertEquals(searchMaxZOrder,bigMinAct);}  }
class C{  public House(){  super();}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public OAuth(IHttpRequestResponse message,String protocol,IBurpExtenderCallbacks callbacks){  super(message,protocol,callbacks);  super.setToken(findToken());  super.setProtocolflowID(analyseProtocol());  add(this,getProtocolflowID());}  }
class C{  private boolean isAuditingRequired(String serviceName){  if (EagleConfigFactory.load().isServiceAuditingEnabled() && ("AlertDefinitionService".equals(serviceName) || "AlertDataSourceService".equals(serviceName))) {    return true;  }  return false;}  }
class C{  public void writeToStream(OutputStreamWithBuffer os,long offset,long length) throws IOException {}  }
class C{  public OutlierResult run(Relation<?> relation){  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    scores.putDouble(iditer,0.0);  }  DoubleRelation scoreres=new MaterializedDoubleRelation("Trivial no-outlier score","no-outlier",scores,relation.getDBIDs());  OutlierScoreMeta meta=new ProbabilisticOutlierScore();  return new OutlierResult(meta,scoreres);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static TimeOfDay hourAndMinuteAndSecondFromDate(Date dateTime){  return hourAndMinuteAndSecondFromDate(dateTime,null);}  }
class C{  public void createTransportNode(TransportNodeCreateSpec request,FutureCallback<TransportNode> responseCallback) throws IOException {  postAsync(TRANSPORT_NODES_BASE_PATH,serializeObjectAsJson(request),HttpStatus.SC_CREATED,new TypeReference<TransportNode>(){  },responseCallback);}  }
class C{  public Vec2(double x,double y){  this.x=x;  this.y=y;}  }
class C{  public int size(){  return assertion.length;}  }
class C{  public GeoDistanceQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public FilterCodecReader(CodecReader in){  this.in=Objects.requireNonNull(in);}  }
class C{  final public void put(final byte[] b){  put(this.pos,b,0,b.length);  this.pos+=b.length;  this.limit=this.pos;}  }
class C{  private void drawBackground(Canvas canvas,Path path,LineSet set,float minDisplayY){  float innerChartBottom=super.getInnerChartBottom();  mStyle.mFillPaint.setAlpha((int)(set.getAlpha() * 255));  if (set.hasFill())   mStyle.mFillPaint.setColor(set.getFillColor());  if (set.hasGradientFill())   mStyle.mFillPaint.setShader(new LinearGradient(super.getInnerChartLeft(),minDisplayY,super.getInnerChartLeft(),innerChartBottom,set.getGradientColors(),set.getGradientPositions(),Shader.TileMode.MIRROR));  path.lineTo(set.getEntry(set.getEnd() - 1).getX(),innerChartBottom);  path.lineTo(set.getEntry(set.getBegin()).getX(),innerChartBottom);  path.close();  canvas.drawPath(path,mStyle.mFillPaint);}  }
class C{  public static boolean intersects(Set a,Set b){  Iterator it;  Set target;  if (a.size() <= b.size()) {    it=a.iterator();    target=b;  } else {    it=b.iterator();    target=a;  }  while (it.hasNext()) {    if (target.contains(it.next()))     return true;  }  return false;}  }
class C{  public String dontReplaceMissingValuesTipText(){  return "Replace missing values globally with mean/mode.";}  }
class C{  public Boolean isVmNpivWwnDisableSupported(){  return vmNpivWwnDisableSupported;}  }
class C{  public static double[] increment(int m,double begin,double pitch){  double[] array=new double[m];  for (int i=0; i < m; i++) {    array[i]=begin + i * pitch;  }  return array;}  }
class C{  public ObjectArrayList(int initialCapacity){  this(new Object[initialCapacity]);  size=0;}  }
class C{  @Override public void start(BundleContext bundleContext){  org.h2.Driver driver=org.h2.Driver.load();  try {    JdbcUtils.loadUserClass(DATASOURCE_FACTORY_CLASS);  } catch (  Exception e) {    return;  }  OsgiDataSourceFactory.registerService(bundleContext,driver);}  }
class C{  public DtoContentServiceImpl(final DtoFactory dtoFactory,final GenericService<Category> categoryGenericService,final GenericService<ProductType> productTypeService,final DtoAttributeService dtoAttributeService,final GenericDAO<AttrValueEntityCategory,Long> attrValueEntityCategoryDao,final ImageService imageService,final AdaptersRepository adaptersRepository,final SystemService systemService){  super(dtoFactory,categoryGenericService,adaptersRepository);  this.productTypeService=productTypeService;  this.attrValueEntityCategoryDao=attrValueEntityCategoryDao;  this.dtoAttributeService=dtoAttributeService;  this.systemService=systemService;  this.attributeService=dtoAttributeService.getService();  this.attrValueAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(AttrValueCategoryDTO.class),attributeService.getGenericDao().getEntityFactory().getImplClass(AttrValueCategory.class));  this.imageService=imageService;}  }
class C{  private static double distortionParam(int k,int max){  return Poisson.probOf(k,DISTORTION_LAMBDA);}  }
class C{  public static byte[] toBytes(short x){  return toBytes(x,new byte[2],0);}  }
class C{  public void testSingleMultiLineStringRoundTrip() throws SQLException {  LineStringGenerator pgc=new LineStringGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiLineString pt=(MultiLineString)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiLineString pt2=(MultiLineString)or.read(st);  assertTrue("The input MultiLineString is not the same as the output MultiLineString",pt.equals(pt2));}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public long loadLong(){  return 0L;}  }
class C{  final Oplog testHook_getChild(){  return getDiskStore().persistentOplogs.getChild();}  }
class C{  public static String encode(byte[] in){  int length=in.length * 4 / 3;  length+=length / 76 + 3;  byte[] out=new byte[length];  int index=0, i, crlr=0, end=in.length - in.length % 3;  for (i=0; i < end; i+=3) {    out[index++]=map[(in[i] & 0xff) >> 2];    out[index++]=map[((in[i] & 0x03) << 4) | ((in[i + 1] & 0xff) >> 4)];    out[index++]=map[((in[i + 1] & 0x0f) << 2) | ((in[i + 2] & 0xff) >> 6)];    out[index++]=map[(in[i + 2] & 0x3f)];    if (((index - crlr) % 76 == 0) && (index != 0)) {      out[index++]='\n';      crlr++;    }  }switch (in.length % 3) {case 1:    out[index++]=map[(in[end] & 0xff) >> 2];  out[index++]=map[(in[end] & 0x03) << 4];out[index++]='=';out[index++]='=';break;case 2:out[index++]=map[(in[end] & 0xff) >> 2];out[index++]=map[((in[end] & 0x03) << 4) | ((in[end + 1] & 0xff) >> 4)];out[index++]=map[((in[end + 1] & 0x0f) << 2)];out[index++]='=';break;}return new String(out,0,index);}  }
class C{  private void resetParser(){  try {    parser=XmlPullParserFactory.newInstance().newPullParser();    parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);    parser.setInput(connection.reader);  } catch (  XmlPullParserException xppe) {    xppe.printStackTrace();  }}  }
class C{  public static final HashSet readThisSetXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  HashSet set=new HashSet();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      set.add(val);    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return set;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public TeXFormula add(String s) throws ParseException {  if (s != null && s.length() != 0) {    textStyle=null;    add(new TeXFormula(s));  }  return this;}  }
class C{  @Override public Value concatenate(Value v){  if (v instanceof StringVal) {    return ValueFactory.create(str + " " + v.toString());  } else   if (v instanceof DoubleVal) {    return ValueFactory.create(str + " " + v.toString());  } else   if (v instanceof NoneVal) {    return this;  } else {    log.warning("cannot concatenate " + this + " and "+ v);    return ValueFactory.noneValue;  }}  }
class C{  public TranslateBrowsePathsToNodeIdsResponse clone(){  TranslateBrowsePathsToNodeIdsResponse result=new TranslateBrowsePathsToNodeIdsResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new BrowsePathResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public String toString(){  return "[SlidePlaceMark @ (" + col + ","+ row+ ")]";}  }
class C{  @Nullable public static Object decodeToObject(String encodedObject){  byte[] objBytes=decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  } catch (  java.io.IOException e) {    e.printStackTrace();    obj=null;  }catch (  java.lang.ClassNotFoundException e) {    e.printStackTrace();    obj=null;  } finally {    try {      bais.close();    } catch (    Exception e) {    }    try {      ois.close();    } catch (    Exception e) {    }  }  return obj;}  }
class C{  public synchronized boolean compile(String argv[]){  for (int i=0; i < argv.length; i++) {    if (argv[i].equals("-Xnew")) {      return (new sun.rmi.rmic.newrmic.Main(out,program)).compile(argv);    }  }  if (!parseArgs(argv)) {    return false;  }  if (classes.size() == 0) {    usage();    return false;  }  if ((flags & F_WARNINGS) != 0) {    for (    Generator g : generators) {      if (g instanceof RMIGenerator) {        output(getText("rmic.jrmp.stubs.deprecated",program));        break;      }    }  }  return doCompile();}  }
class C{  public static AnnotatedTypeMirror assignedTo(AnnotatedTypeFactory atypeFactory,TreePath path){  Tree assignmentContext=TreeUtils.getAssignmentContext(path);  if (assignmentContext == null) {    return null;  } else   if (assignmentContext instanceof AssignmentTree) {    ExpressionTree variable=((AssignmentTree)assignmentContext).getVariable();    return atypeFactory.getAnnotatedType(variable);  } else   if (assignmentContext instanceof CompoundAssignmentTree) {    ExpressionTree variable=((CompoundAssignmentTree)assignmentContext).getVariable();    return atypeFactory.getAnnotatedType(variable);  } else   if (assignmentContext instanceof MethodInvocationTree) {    MethodInvocationTree methodInvocation=(MethodInvocationTree)assignmentContext;    if (methodInvocation.getMethodSelect() instanceof MemberSelectTree && ((MemberSelectTree)methodInvocation.getMethodSelect()).getExpression() == path.getLeaf()) {      return null;    }    ExecutableElement methodElt=TreeUtils.elementFromUse(methodInvocation);    AnnotatedTypeMirror receiver=atypeFactory.getReceiverType(methodInvocation);    return assignedToExecutable(atypeFactory,path,methodElt,receiver,methodInvocation.getArguments());  } else   if (assignmentContext instanceof NewArrayTree) {    return null;  } else   if (assignmentContext instanceof NewClassTree) {    NewClassTree newClassTree=(NewClassTree)assignmentContext;    ExecutableElement constructorElt=InternalUtils.constructor(newClassTree);    AnnotatedTypeMirror receiver=atypeFactory.fromNewClass(newClassTree);    return assignedToExecutable(atypeFactory,path,constructorElt,receiver,newClassTree.getArguments());  } else   if (assignmentContext instanceof ReturnTree) {    HashSet<Kind> kinds=new HashSet<>(Arrays.asList(Kind.LAMBDA_EXPRESSION,Kind.METHOD));    Tree enclosing=TreeUtils.enclosingOfKind(path,kinds);    if (enclosing.getKind() == Kind.METHOD) {      return (atypeFactory.getAnnotatedType((MethodTree)enclosing)).getReturnType();    } else {      return atypeFactory.getFnInterfaceFromTree((LambdaExpressionTree)enclosing).first;    }  } else   if (assignmentContext instanceof VariableTree) {    return assignedToVariable(atypeFactory,assignmentContext);  }  ErrorReporter.errorAbort("AnnotatedTypes.assignedTo: shouldn't be here!");  return null;}  }
class C{  public StandardProblems(){  super();}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  protected void appendTextString(byte[] text){  if (((text[0]) & 0xff) > TEXT_MAX) {    append(TEXT_MAX);  }  arraycopy(text,0,text.length);  append(0);}  }
class C{  public void upResource(){  final DefaultMutableTreeTableNode[] selectedNodes=getSelectedNodes();  if (selectedNodes.length != 1) {    return;  }  DefaultMutableTreeTableNode selectedNode=selectedNodes[0];  TreeNode previousSibling=TreeUtil.getPrevSibling(selectedNode);  if (previousSibling == null) {    return;  }  if (selectedNode instanceof ResourceNode) {    HumanResource people=(HumanResource)selectedNode.getUserObject();    myResourceTreeModel.moveUp(people);    getTreeSelectionModel().setSelectionPath(TreeUtil.createPath(selectedNode));  } else   if (selectedNode instanceof AssignmentNode) {    swapAssignents((AssignmentNode)selectedNode,(AssignmentNode)previousSibling);  }}  }
class C{  public WebSocketDelegateImpl(URI url,URI origin,String[] protocols,long connectTimeout){  LOG.entering(CLASS_NAME,"<init>",new Object[]{url,origin,protocols});  if (origin == null) {    throw new IllegalArgumentException("Please specify the origin for the WebSocket connection");  }  if (url == null) {    throw new IllegalArgumentException("Please specify the target for the WebSocket connection");  }  this.url=url;  if ((origin.getScheme() == null) || (origin.getHost() == null)) {    this.origin="null";  } else {    String originScheme=origin.getScheme();    String originHost=origin.getHost();    int originPort=origin.getPort();    if (originPort == -1) {      originPort=(originScheme.equals("https")) ? 443 : 80;    }    this.origin=originScheme + "://" + originHost+ ":"+ originPort;  }  this.requestedProtocols=protocols;  secure=url.getScheme().equalsIgnoreCase("wss");  this.connectTimeout=connectTimeout;}  }
class C{  public ActivityChooserView(Context context){  this(context,null);}  }
class C{  public static NbtOutputStream writeDeflated(NbtTag tag,File file,Deflater def) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new DeflaterOutputStream(new FileOutputStream(file,false),def));  out.write(tag);  return out;}  }
class C{  public void updateText(Dim.SourceInfo sourceInfo){  this.sourceInfo=sourceInfo;  String newText=sourceInfo.source();  if (!textArea.getText().equals(newText)) {    textArea.setText(newText);    int pos=0;    if (currentPos != -1) {      pos=currentPos;    }    textArea.select(pos);  }  fileHeader.update();  fileHeader.repaint();}  }
class C{  public void merge(final Network networkA,final String prefixA,final Network networkB,final String prefixB,final Network mergedNetwork){  double capacityFactor=mergedNetwork.getCapacityPeriod() / networkA.getCapacityPeriod();  NetworkFactory factory=mergedNetwork.getFactory();  for (  Node node : networkA.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(prefixA + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkA.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixA + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixA + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixA + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);    fromNode.addOutLink(link2);    toNode.addInLink(link2);  }  capacityFactor=mergedNetwork.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Node node : networkB.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(prefixB + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkB.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixB + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixB + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixB + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);    fromNode.addOutLink(link2);    toNode.addInLink(link2);  }}  }
class C{  @Override public final int hashCode(){  final int prime=31;  int result=1;  result=prime * result;  if (vertices != null) {    result+=vertices.hashCode();  }  return result;}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public static String[] parseCommaSeparatedList(String externalVal,int dimension) throws SolrException {  String[] out=new String[dimension];  int idx=externalVal.indexOf(',');  int end=idx;  int start=0;  int i=0;  if (idx == -1 && dimension == 1 && externalVal.length() > 0) {    out[0]=externalVal.trim();    i=1;  } else   if (idx > 0) {    for (; i < dimension; i++) {      while (start < end && externalVal.charAt(start) == ' ')       start++;      while (end > start && externalVal.charAt(end - 1) == ' ')       end--;      if (start == end) {        break;      }      out[i]=externalVal.substring(start,end);      start=idx + 1;      end=externalVal.indexOf(',',start);      idx=end;      if (end == -1) {        end=externalVal.length();      }    }  }  if (i != dimension) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"incompatible dimension (" + dimension + ") and values ("+ externalVal+ ").  Only "+ i+ " values specified");  }  return out;}  }
class C{  public SortedExampleReader(ExampleSet parent){  this.parent=parent;  this.currentIndex=-1;}  }
class C{  protected void testsPerClassType(int classType,boolean weighted,boolean multiInstance){  boolean PNom=canPredict(true,false,false,false,false,multiInstance,classType)[0];  boolean PNum=canPredict(false,true,false,false,false,multiInstance,classType)[0];  boolean PStr=canPredict(false,false,true,false,false,multiInstance,classType)[0];  boolean PDat=canPredict(false,false,false,true,false,multiInstance,classType)[0];  boolean PRel;  if (!multiInstance) {    PRel=canPredict(false,false,false,false,true,multiInstance,classType)[0];  } else {    PRel=false;  }  if (PNom || PNum || PStr|| PDat|| PRel) {    if (weighted) {      instanceWeights(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    }    if (classType == Attribute.NOMINAL) {      canHandleNClasses(PNom,PNum,PStr,PDat,PRel,multiInstance,4);    }    if (!multiInstance) {      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,0);      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,1);    }    canHandleZeroTraining(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    boolean handleMissingPredictors=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,20)[0];    if (handleMissingPredictors) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,100);    }    boolean handleMissingClass=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,20)[0];    if (handleMissingClass) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,100);    }    correctBuildInitialisation(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    datasetIntegrity(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,handleMissingPredictors,handleMissingClass);  }}  }
class C{  public static void isAbsoluteOrRelativeUrl(String member,String value,boolean flag) throws ValidationException {  if (!flag) {    if (value == null || value.trim().length() == 0) {      return;    }  }  if (!ADMValidator.isAbsoluteOrRelativeUrl(value)) {    ValidationException vf=new ValidationException(ReasonEnum.URL,member,new Object[]{value});    logValidationFailure(vf);    throw vf;  }  isDescription(member,value,flag);}  }
class C{  public XMPPException(){  super();}  }
class C{  public SolutionUserResource solutionUser(){  return solutionUser;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.791 -0500",hash_original_method="94FE9BFA8A903BE49DF8F4E82A84C713",hash_generated_method="870FACBA9900B05E8ED3F9B0D2FDFB44") @Deprecated public String(byte[] data,int high){  this(data,high,0,data.length);}  }
class C{  @Override public final void postSetUp() throws Exception {  createBlackboard();  Invoke.invokeInEveryVM(null);  connectDistributedSystem();  Invoke.invokeInEveryVM(null);}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public void addEventListener(AbstractPeerEventListener listener){  addBlocksDownloadedEventListener(executor,listener);  addChainDownloadStartedEventListener(executor,listener);  addConnectedEventListener(executor,listener);  addDisconnectedEventListener(executor,listener);  addDiscoveredEventListener(executor,listener);  addGetDataEventListener(executor,listener);  addOnTransactionBroadcastListener(executor,listener);  addPreMessageReceivedEventListener(executor,listener);}  }
class C{  public ArgumentPair createArgumentPair(){  ArgumentPairImpl argumentPair=new ArgumentPairImpl();  return argumentPair;}  }
class C{  public static double converMetricValue(String metricName,double value){  return value;}  }
class C{  public void removeListener(final IDebugEventListener listener){  listeners.removeListener(listener);}  }
class C{  public void testNoDelimiters() throws Exception {  byte[] delim=wrap(2);  byte[] data=array(F.t(wrap(1),8));  assertSplit(0,4,0,8,data,delim);  assertSplit(0,8,0,8,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);}  }
class C{  public PropertySheetPanel(){  setBorder(BorderFactory.createEmptyBorder(0,0,10,0));  m_env=Environment.getSystemWide();}  }
class C{  public static void clear(){  long lock_stamp=lock.writeLock();  try {    idToString=new ArrayList<>();    stringToId=new HashMap<>();    idToString.add(UNKNOWN_ID,UNKNOWN_WORD);    stringToId.put(UNKNOWN_WORD,UNKNOWN_ID);  }  finally {    lock.unlockWrite(lock_stamp);  }}  }
class C{  public Comparator<? super K> keyComparator(){  return keyComparator;}  }
class C{  public JSONFormatterException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() == null)   return Boolean.FALSE;  int uiType=stack.getUIMgr().getUIClientType();  if ((Sage.WINDOWS_OS || Sage.MAC_OS_X) && (uiType == UIClient.LOCAL || uiType == UIClient.REMOTE_CLIENT))   return Boolean.TRUE;  if (uiType == UIClient.REMOTE_UI) {    if (stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {      String ipdp=((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getInputDevsProp();      if (ipdp != null && ipdp.indexOf("MOUSE") != -1)       return Boolean.TRUE;    }  }  return Boolean.FALSE;}  }
class C{  public CompositeIterator(Iterator<T>... iterators){  for (  Iterator<T> iterator : iterators) {    add(iterator);  }}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (peer == null)     peer=getToolkit().createCanvas(this);    super.addNotify();  }}  }
class C{  public ReadDomainOnlineScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public List<Boundary> populateWard(final Long zoneId){  List<Boundary> wardList=new LinkedList<Boundary>();  try {    wardList=boundaryService.getChildBoundariesByBoundaryId(zoneId);  } catch (  final Exception e) {    LOGGER.error("Error while loading warda - wards." + e.getMessage());    throw new ApplicationRuntimeException("Unable to load ward information",e);  }  return wardList;}  }
class C{  private PostgreSQLEdgeLoader(){}  }
class C{  public UF11(){  this(30,5);}  }
class C{  public void close() throws IOException {  try {    in.close();  }  finally {    if (!finalized) {      finaliseCipher();    }  }  maxBuf=bufOff=0;  markBufOff=0;  markPosition=0;  if (markBuf != null) {    Arrays.fill(markBuf,(byte)0);    markBuf=null;  }  if (buf != null) {    Arrays.fill(buf,(byte)0);    buf=null;  }  Arrays.fill(inBuf,(byte)0);}  }
class C{  public void keyTyped(KeyEvent e){  ((KeyListener)a).keyTyped(e);  ((KeyListener)b).keyTyped(e);}  }
class C{  @Override public int compareTo(Object obj){  PaintItem that=(PaintItem)obj;  double d1=this.value;  double d2=that.value;  if (d1 > d2) {    return 1;  }  if (d1 < d2) {    return -1;  }  return 0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void visitTree(JCTree tree){  throw new AssertionError();}  }
class C{  public void index() throws IOException {  IndexWriter indexWriter=new IndexWriter(indexDir,new IndexWriterConfig(new WhitespaceAnalyzer()).setOpenMode(OpenMode.CREATE));  for (int i=0; i < 100; i++) {    Document doc=new Document();    long then=nowSec - i * 1000;    doc.add(new NumericDocValuesField("timestamp",then));    doc.add(new LongPoint("timestamp",then));    indexWriter.addDocument(doc);  }  searcher=new IndexSearcher(DirectoryReader.open(indexWriter));  indexWriter.close();}  }
class C{  private void containerBrowse(){  Shell shell=new Shell(Display.getDefault());  SaveAsDialog saveas=new SaveAsDialog(shell);  if (saveas.open() == SaveAsDialog.OK) {    IPath result=saveas.getResult();    file.setText(result.toOSString());  }}  }
class C{  @Override protected void readResponse(HttpState state,HttpConnection conn) throws IOException, HttpException {  LOG.trace("enter HttpMethodBase.readResponse(HttpState, HttpConnection)");  boolean isUpgrade=false;  while (getStatusLine() == null) {    readStatusLine(state,conn);    processStatusLine(state,conn);    readResponseHeaders(state,conn);    processResponseHeaders(state,conn);    int status=this.statusLine.getStatusCode();    if (status == 101) {      LOG.debug("Retrieved HTTP status code '101 Switching Protocols'. Keep connection open!");      if (conn instanceof ZapHttpConnection) {        isUpgrade=true;        conn.setHttpConnectionManager(null);      }    } else     if ((status >= 100) && (status < 200)) {      if (LOG.isInfoEnabled()) {        LOG.info("Discarding unexpected response: " + this.statusLine.toString());      }      this.statusLine=null;    }  }  if (conn instanceof ZapHttpConnection) {    ZapHttpConnection zapConn=(ZapHttpConnection)conn;    upgradedSocket=zapConn.getSocket();    inputStream=zapConn.getResponseInputStream();  }  if (!isUpgrade) {    readResponseBody(state,conn);    processResponseBody(state,conn);  }}  }
class C{  private Track importDriveFile(long trackId,File driveFile) throws IOException {  InputStream inputStream=null;  try {    inputStream=downloadDriveFile(driveFile,true);    if (inputStream == null) {      Log.e(TAG,"Unable to import drive file. Input stream is null.");      return null;    }    TrackImporter trackImporter;    boolean useKmz=KmzTrackExporter.KMZ_EXTENSION.equals(driveFile.getFileExtension());    if (useKmz) {      if (trackId == -1L) {        Uri uri=myTracksProviderUtils.insertTrack(new Track());        trackId=Long.parseLong(uri.getLastPathSegment());      }      trackImporter=new KmzTrackImporter(context,trackId);    } else {      trackImporter=new KmlFileTrackImporter(context,trackId);    }    long importedId=trackImporter.importFile(inputStream);    if (importedId == -1L) {      Log.e(TAG,"Unable to import drive file. Imported id is -1L.");      return null;    }    Track track=myTracksProviderUtils.getTrack(importedId);    if (track == null) {      Log.e(TAG,"Unable to import drive file. Imported track is null.");      return null;    } else {      return track;    }  } catch (  IOException e) {    Log.e(TAG,"Unable to import drive file.",e);    return null;  } finally {    if (inputStream != null) {      inputStream.close();    }  }}  }
class C{  public static <T,K,L extends List<T>>BiConsumer<Partition<T,K,L>,T> processWhenFullAndEvict(final int size){  return null;}  }
class C{  public FunctionLib duplicate(boolean deepCopy){  FunctionLib fl=new FunctionLib();  fl.description=this.description;  fl.displayName=this.displayName;  fl.functions=duplicate(this.functions,deepCopy);  fl.shortName=this.shortName;  fl.uri=this.uri;  fl.version=this.version;  return fl;}  }
class C{  public THLEvent(String eventId,ReplDBMSEvent event){  this.seqno=event.getSeqno();  this.fragno=event.getFragno();  this.lastFrag=event.getLastFrag();  this.sourceId=event.getSourceId();  this.type=REPL_DBMS_EVENT;  this.epochNumber=event.getEpochNumber();  this.localEnqueueTstamp=null;  this.sourceTstamp=event.getDBMSEvent().getSourceTstamp();  this.comment=null;  this.eventId=eventId;  this.shardId=event.getShardId();  this.event=event;}  }
class C{  void advanceNextWriteDelGen(){  nextWriteDelGen++;}  }
class C{  final boolean acquireQueued(final Node node,int arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  private Rect calculateTapArea(int viewWidth,int viewHeight,float x,float y,float coefficient){  int areaSize=Float.valueOf(300 * coefficient).intValue();  x=x / viewWidth;  y=y / viewHeight;  float cameraX=y;  float cameraY=1 - x;  int centerX=(int)(cameraX * 2000 - 1000);  int centerY=(int)(cameraY * 2000 - 1000);  int left=clamp(centerX - areaSize / 2,-1000,1000);  int top=clamp(centerY - areaSize / 2,-1000,1000);  int right=clamp(left + areaSize,-1000,1000);  int bottom=clamp(top + areaSize,-1000,1000);  return new Rect(left,top,right,bottom);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  WIFILockManagerDao.dropTable(db,ifExists);}  }
class C{  public CreateIndexRequest source(String source){  return source(source.getBytes(Charsets.UTF_8));}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.STRING_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void printReward(){  System.out.println(Reward);  System.out.println(footer);}  }
class C{  public static final Vec3D min(ReadonlyVec3D a,ReadonlyVec3D b){  return new Vec3D(MathUtils.min(a.x(),b.x()),MathUtils.min(a.y(),b.y()),MathUtils.min(a.z(),b.z()));}  }
class C{  private DiscreteVariable accomodateCategory(DiscreteVariable variable,String category){  if (category == null) {    throw new NullPointerException();  }  List<String> categories=variable.getCategories();  if (!categories.contains(category)) {    List<String> newCategories=new LinkedList<>(categories);    newCategories.add(category);    DiscreteVariable newVariable=new DiscreteVariable(variable.getName(),newCategories);    changeVariable(variable,newVariable);    return newVariable;  }  return variable;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (options == null) {    options=new String[0];  }}  }
class C{  public List<Department> splitDepartments(Customer customer){  return customer.getDepartments();}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public void pauseAll() throws SchedulerException {  validateState();  resources.getJobStore().pauseAll();  notifySchedulerThread(0L);  notifySchedulerListenersPausedTriggers(null);}  }
class C{  public static void writeXML(Object data,String fileName){  try {    XStream xstream=new XStream();    FileUtils.writeStringToFile(new File(fileName),xstream.toXML(data));  } catch (  Exception e) {    logger.error("Error while writing file " + fileName + " , "+ e.getMessage(),e);  }}  }
class C{  public boolean isCurrentQuoter(){  if (!isValidIndex())   return false;  return lcText[pos] == '"' || lcText[pos] == '\'';}  }
class C{  public static void expand(){  String[] st=new String[L];  int i;  for (i=0; i < R; i++)   st[i]="" + (char)i;  st[i++]="";  int codeword=BinaryStdIn.readInt(W);  if (codeword == R)   return;  String val=st[codeword];  while (true) {    BinaryStdOut.write(val);    codeword=BinaryStdIn.readInt(W);    if (codeword == R)     break;    String s=st[codeword];    if (i == codeword)     s=val + val.charAt(0);    if (i < L)     st[i++]=val + s.charAt(0);    val=s;  }  BinaryStdOut.close();}  }
class C{  public String prefix(){  return prefix;}  }
class C{  public TFloatObjectHashMap(int initialCapacity,TFloatHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  @Override public MappedByteBuffer map(MapMode mode,long position,long size) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public Key keyOf(int i){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  return nodes[i].key;}  }
class C{  public static void createExplosion(World world,double x,double y,double z,float radius,BombType type){  createExplosion(new EntityBomb(world).setType(type),world,x,y,z,radius,0.0F,true);}  }
class C{  @Override protected void checkParameters(){  super.checkParameters();  if (projectFile == null && classLocations.size() == 0 && filesets.size() == 0 && dirsets.size() == 0 && auxAnalyzepath == null) {    throw new BuildException("either projectfile, <class/>, <fileset/> or <auxAnalyzepath/> child " + "elements must be defined for task <" + getTaskName() + "/>",getLocation());  }  if (cloudId != null && cloudId.contains(" ")) {    throw new BuildException("cloudId must not contain spaces: '" + cloudId + "'");  }  if (outputFormat != null && !("xml".equalsIgnoreCase(outputFormat.trim()) || "xml:withMessages".equalsIgnoreCase(outputFormat.trim()) || "html".equalsIgnoreCase(outputFormat.trim())|| "text".equalsIgnoreCase(outputFormat.trim())|| "xdocs".equalsIgnoreCase(outputFormat.trim())|| "emacs".equalsIgnoreCase(outputFormat.trim()))) {    throw new BuildException("output attribute must be either " + "'text', 'xml', 'html', 'xdocs' or 'emacs' for task <" + getTaskName() + "/>",getLocation());  }  if (reportLevel != null && !("experimental".equalsIgnoreCase(reportLevel.trim()) || "low".equalsIgnoreCase(reportLevel.trim()) || "medium".equalsIgnoreCase(reportLevel.trim())|| "high".equalsIgnoreCase(reportLevel.trim()))) {    throw new BuildException("reportlevel attribute must be either " + "'experimental' or 'low' or 'medium' or 'high' for task <" + getTaskName() + "/>",getLocation());  }  List<String> efforts=Arrays.asList("min","less","default","more","max");  if (effort != null && !efforts.contains(effort)) {    throw new BuildException("effort attribute must be one of " + efforts);  }}  }
class C{  public APIConnection(Connection connection) throws GuacamoleException {  this.name=connection.getName();  this.identifier=connection.getIdentifier();  this.parentIdentifier=connection.getParentIdentifier();  this.activeConnections=connection.getActiveConnections();  GuacamoleConfiguration configuration=connection.getConfiguration();  this.protocol=configuration.getProtocol();  this.attributes=connection.getAttributes();}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  @SuppressWarnings("JavaDoc") public static Serializable readObject(Context context,String file){  if (!isExistDataCache(context,file))   return null;  FileInputStream fis=null;  ObjectInputStream ois=null;  try {    fis=context.openFileInput(file);    ois=new ObjectInputStream(fis);    return (Serializable)ois.readObject();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();    if (e instanceof InvalidClassException) {      File data=context.getFileStreamPath(file);      data.delete();    }  } finally {    try {      if (ois != null)       ois.close();    } catch (    Exception e) {      e.printStackTrace();    }    try {      if (fis != null)       fis.close();    } catch (    Exception e) {      e.printStackTrace();    }  }  return null;}  }
class C{  protected boolean validTask(HttpServerRequest request,CopyTask task){  if (task.getSourceUri().endsWith(SLASH) || task.getDestinationUri().endsWith(SLASH)) {    Logger log=RequestLoggerFactory.getLogger(CopyResourceHandler.class,request);    log.debug("invalid copy task, collections are not allowed!");    request.response().setStatusCode(StatusCode.BAD_REQUEST.getStatusCode());    request.response().setStatusMessage(StatusCode.BAD_REQUEST.getStatusMessage());    request.response().end();    return false;  }  return true;}  }
class C{  public void sendNotification(String notifType){  Notification notification=null;  if (notifType.equals(NOTIF_TYPE_0)) {    notification=new Notification(NOTIF_TYPE_0,mbeanName,seqNumber,NOTIFICATION_MESSAGE);  } else   if (notifType.equals(NOTIF_TYPE_1)) {    notification=new SqeNotification(NOTIF_TYPE_1,mbeanName,seqNumber,NOTIFICATION_MESSAGE);  }  seqNumber++;  broadcaster.sendNotification(notification);}  }
class C{  public void finer(CharSequence message){  log(Level.FINER,message);}  }
class C{  protected int sendMedtronicPumpRequest(byte command,byte repeat){  try {    if (idPump != null && idPump.length > 0) {      byte[] readSystemTime=new byte[6 + idPump.length];      int i=0;      readSystemTime[0]=(byte)0x81;      readSystemTime[1]=(byte)0x06;      readSystemTime[2]=repeat;      readSystemTime[3]=(byte)MedtronicConstants.MEDTRONIC_PUMP;      for (i=0; i < idPump.length; i++)       readSystemTime[i + 4]=(byte)idPump[i];      readSystemTime[idPump.length + 4]=command;      readSystemTime[idPump.length + 5]=(byte)0x00;      log.debug("pump request sent ");      int resultWrite=mSerialDevice.write(readSystemTime);      return resultWrite;    }  } catch (  Exception e) {    StringBuffer sb1=new StringBuffer("");    sb1.append("EXCEPTION!!!!!! " + e.getMessage() + " "+ e.getCause());    for (    StackTraceElement st : e.getStackTrace()) {      sb1.append(st.toString());    }    sendMessageToUI(sb1.toString(),false);  }  return -1;}  }
class C{  boolean hasAnnotation(@NonNull Class<? extends Annotation> cls){  return annotations.containsKey(cls);}  }
class C{  private ConnectionDialog(final AbstractConnectionPanel optionsPanel,final ConnectNeurons connection,final NetworkPanel networkPanel){  this.networkPanel=networkPanel;  this.connectionPanel=optionsPanel;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public static FileInputStream newQueryInputStream(String fileName) throws Exception {  return new FileInputStream(QUERY_DIR + fileName);}  }
class C{  public byte[] generatePrologue(){  int size=varElms.size();  this.objs=new Object[size];  this.objnum=0;  this.rid=ObjectHolder.handinRefs(this.objs);  PseudoBytecode head=new Nop();  PseudoBytecode tail=head;  int elmcount=0;  if (!this.meth.isStatic()) {    VariableElement var=varElms.get(elmcount);    tail=processElement(var,tail,elmcount);    elmcount++;    if (VM.VerifyAssertions) {      VM._assert(var.isLocal() && (var.getNumber() == 0));    }  }  int paranum=this.meth.getParameterTypes().length;  for (int i=0; i < paranum; i++) {    VariableElement var=varElms.get(elmcount);    tail=processElement(var,tail,elmcount);    elmcount++;    if (VM.VerifyAssertions) {      VM._assert(var.isLocal());    }  }  tail.next=new ParamInitEnd();  tail=tail.next;  for (; elmcount < size; elmcount++) {    VariableElement var=varElms.get(elmcount);    tail=processElement(var,tail,elmcount);  }  if (this.objnum != 0) {    tail.next=new LoadIntConst(this.rid);    tail=tail.next;    tail.next=new InvokeStatic(CLEANREFS);    tail=tail.next;  } else {    ObjectHolder.cleanRefs(this.rid);  }  int branchTarget=this.bcIndex;  if (callee_cmid != -1) {    tail.next=new InvokeCompiledMethod(callee_cmid,this.bcIndex);    tail=tail.next;    BytecodeStream bcodes=this.meth.getBytecodes();    bcodes.reset(this.bcIndex);    int code=bcodes.nextInstruction();switch (code) {case JBC_invokeinterface:{        branchTarget=this.bcIndex + 5;        break;      }case JBC_invokespecial:case JBC_invokestatic:case JBC_invokevirtual:{      branchTarget=this.bcIndex + 3;      break;    }default :{    if (VM.VerifyAssertions) {      String msg="ExecutionState: unknown bytecode " + code + " at "+ this.bcIndex+ "@"+ this.meth;      VM._assert(VM.NOT_REACHED,msg);    }    break;  }}}int pops=computeStackHeight(head);branchTarget+=pops;{Goto togo=new Goto(branchTarget);int osize=togo.getSize();togo.patch(branchTarget + osize);int nsize=togo.getSize();if (nsize != osize) {togo.patch(branchTarget + nsize);}tail.next=togo;tail=tail.next;}tail=adjustStackHeight(tail,pops);int bsize=paddingBytecode(head);byte[] prologue=generateBinaries(head,bsize);this.objs=null;this.objnum=0;return prologue;}  }
class C{  private boolean updateEditorFromText(){  Log.d(DEBUG_TAG,"updating data from last text field");  View fragementView=getView();  if (fragementView == null) {    return false;  }  LinearLayout l=(LinearLayout)fragementView.findViewById(R.id.form_container_layout);  if (l != null) {    View v=l.findFocus();    Log.d(DEBUG_TAG,"focus is on " + v);    if (v != null && v instanceof CustomAutoCompleteTextView) {      View row=v;      do {        row=(View)row.getParent();      } while (row != null && !(row instanceof TagTextRow));      if (row != null) {        tagListener.updateSingleValue(((TagTextRow)row).getKey(),((TagTextRow)row).getValue());        if (row.getParent() instanceof EditableLayout) {          (((EditableLayout)row.getParent())).putTag(((TagTextRow)row).getKey(),((TagTextRow)row).getValue());        }      }    }  }  return true;}  }
class C{  @Override public boolean doesDirtySave(){  return pipelineShouldRun();}  }
class C{  @Override protected void validate(){}  }
class C{  public static synchronized void installTimerNullListener(NullListener s){  int numListeners=timerNullListeners.length;  NullListener[] tmp=new NullListener[numListeners + 1];  for (int i=0; i < numListeners; i++) {    tmp[i]=timerNullListeners[i];  }  tmp[numListeners]=s;  timerNullListeners=tmp;}  }
class C{  public final static String formatHeader(final Header header,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatHeader(null,header).toString();}  }
class C{  private static void removeController(ControlThread ct){synchronized (controllers) {    controllers.remove(ct);    if (controllers.isEmpty()) {      if (timer != null) {        timer.cancel();        timer=null;      }    }  }}  }
class C{  public void killAllLoads(){  killAllLoads(false);}  }
class C{  public JobBuilder withDescription(String jobDescription){  this.description=jobDescription;  return this;}  }
class C{  public static boolean isSynchronized(int mod){  return (mod & SYNCHRONIZED) != 0;}  }
class C{  public void testSetScaleException(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  try {    aNumber.setScale(newScale);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {    assertEquals("Improper exception message","Rounding necessary",e.getMessage());  }}  }
class C{  boolean hasNewReasons(ReasonsMask mask){  return ((_reasons | mask.getReasons() ^ _reasons) != 0);}  }
class C{  public String globalInfo(){  return "Ranker : \n\nRanks attributes by their individual evaluations. " + "Use in conjunction with attribute evaluators (ReliefF, GainRatio, " + "Entropy etc).\n";}  }
class C{  private static void deleteTask(Taskqueue taskQueue,Task task) throws IOException {  Taskqueue.Tasks.Delete request=taskQueue.tasks().delete(projectName,taskQueueName,task.getId());  request.execute();}  }
class C{  private Entity loadSingleItem(MetaClass meta,Object id,View view){  LoadContext ctx=new LoadContext(meta);  ctx.setLoadDynamicAttributes(true);  ctx.setSoftDeletion(false);  ctx.setView(view);  String primaryKeyName=metadata.getTools().getPrimaryKeyName(meta);  if (primaryKeyName == null)   throw new IllegalStateException("Entity " + meta.getName() + " has no primary key");  String query=String.format("select e from %s e where e.%s = :id",meta.getName(),primaryKeyName);  LoadContext.Query q=ctx.setQueryString(query);  q.setParameter("id",id);  return dataSupplier.load(ctx);}  }
class C{  public boolean hasUsername(){  return hasExtension(Username.class);}  }
class C{  public static double cdf(double val,double scale,double shape){  if (val < 0) {    return 0;  }  return 1. / (1. + Math.pow(val / scale,-shape));}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index){  return this.optEnum(clazz,index,null);}  }
class C{  private void retrieveExpirePeriod(SipResponse response){  ExpiresHeader expiresHeader=(ExpiresHeader)response.getHeader(ExpiresHeader.NAME);  if (expiresHeader != null) {    int expires=expiresHeader.getExpires();    if (expires != -1) {      mExpirePeriod=expires * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;    }  }}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public static ClassCloner cloneClassAndCloneMethodsAndFields(SootClass original){  ClassCloner c=new ClassCloner(original,false);  c.cloneClassCloneMethodsFieldsAndInstallClass();  return c;}  }
class C{  public DataSource createExportMaskDataSource(String configName,String hostName,String clusterName,StorageSystem storageSystem){  Host host=getHostByName(hostName);  Cluster cluster=new Cluster();  if (!Strings.isNullOrEmpty(clusterName)) {    cluster.setLabel(clusterName);  }  return createExportMaskDataSource(configName,host,cluster,storageSystem);}  }
class C{  protected static int intersectionBinarySearch(int[] a,int lena,int[] b,int lenb,int[] target){  int step=(lenb / lena) + 1;  step=step + step;  int icount=0;  int low=0;  int max=lenb - 1;  for (int i=0; i < lena; i++) {    int doca=a[i];    int high=max;    int probe=low + step;    if (probe < high) {      if (b[probe] >= doca) {        high=probe;      } else {        low=probe + 1;        probe=low + step;        if (probe < high) {          if (b[probe] >= doca) {            high=probe;          } else {            low=probe + 1;          }        }      }    }    while (low <= high) {      int mid=(low + high) >>> 1;      int docb=b[mid];      if (docb < doca) {        low=mid + 1;      } else       if (docb > doca) {        high=mid - 1;      } else {        target[icount++]=doca;        low=mid + 1;        break;      }    }  }  return icount;}  }
class C{  @Override public <A extends Annotation>ExpressionResult checkUserPermissions(PersistentResource<?> resource,Class<A> annotationClass,String field){  if (requestScope.getSecurityMode() == SecurityMode.SECURITY_INACTIVE) {    return ExpressionResult.PASS;  }  ExpressionResult expressionResult=userPermissionCheckCache.get(Triple.of(annotationClass,resource.getResourceClass(),field));  if (expressionResult != null) {    return expressionResult;  }  Expressions expressions=expressionBuilder.buildUserCheckFieldExpressions(resource,annotationClass,field);  expressionResult=executeExpressions(expressions,annotationClass);  userPermissionCheckCache.put(Triple.of(annotationClass,resource.getResourceClass(),field),expressionResult);  if (expressionResult == PASS) {    expressionResultShortCircuit.add(Triple.of(annotationClass,resource.getResourceClass(),field));  }  return expressionResult;}  }
class C{  public void mainHeader(String... header){  mainHeader=Arrays.asList(header);}  }
class C{  private BusinessObjectDefinitionTagEntity createBusinessObjectDefinitionTagEntity(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,TagEntity tagEntity){  BusinessObjectDefinitionTagEntity businessObjectDefinitionTagEntity=new BusinessObjectDefinitionTagEntity();  businessObjectDefinitionTagEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  businessObjectDefinitionTagEntity.setTag(tagEntity);  return businessObjectDefinitionTagDao.saveAndRefresh(businessObjectDefinitionTagEntity);}  }
class C{  public DataSet simulateData(int sampleSize,long seed,boolean latentDataSaved){  RandomUtil random=RandomUtil.getInstance();  long _seed=random.getSeed();  random.setSeed(seed);  DataSet dataSet=simulateData(sampleSize,latentDataSaved);  random.revertSeed(_seed);  return dataSet;}  }
class C{  public CF10(){  this(10);}  }
class C{  public boolean verify(JComponent input){  if (input instanceof JFormattedTextField) {    JFormattedTextField ftf=(JFormattedTextField)input;    AbstractFormatter formatter=ftf.getFormatter();    if (formatter != null) {      String text=ftf.getText();      try {        formatter.stringToValue(text);        ftf.setBackground(null);        valid=true;      } catch (      ParseException pe) {        ftf.setBackground(Color.red);        valid=false;      }    }  }  return valid;}  }
class C{  protected static void usage(final int status,final String msg){  if (msg != null) {    System.err.println(msg);  }  System.err.println("[options] port namespace (propertyFile|configFile)");  System.exit(status);}  }
class C{  public boolean isClosed(){  return STATE_Completed.equals(m_state) || STATE_Aborted.equals(m_state) || STATE_Terminated.equals(m_state);}  }
class C{  public boolean isPackage(){  return !testAnyFlags(ALL_ACCESS);}  }
class C{  boolean isShaking(){  return newest != null && oldest != null && newest.timestamp - oldest.timestamp >= MIN_WINDOW_SIZE && acceleratingCount >= (sampleCount >> 1) + (sampleCount >> 2);}  }
class C{  public MapWidget(Context context,File rootMapFolder){  this(null,context,rootMapFolder,10);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public double utcOffset(){  return utcOffset;}  }
class C{  private void applyPathsDocumentExtension(Context context){  for (  PathsDocumentExtension extension : extensionRegistry.getPathsDocumentExtensions()) {    extension.apply(context);  }}  }
class C{  public void removeOffer(Offer o,Player p){  Item item=o.getItem();  String itemName=item.getName();  o.getSlot(Offer.OFFER_ITEM_SLOT_NAME).remove(item.getID());  p.equipOrPutOnGround(item);  getSlot(OFFERS_SLOT_NAME).remove(o.getID());  getExpiredOffers().remove(o);  getSlot(EXPIRED_OFFERS_SLOT_NAME).remove(o.getID());  getZone().storeToDatabase();  String slotName=null;  String target="ground";  if (item.getContainerSlot() != null) {    slotName=item.getContainerSlot().getName();    target="slot";  }  new ItemLogger().addLogItemEventCommand(new LogSimpleItemEventCommand(item,p,"market-to-" + target,itemName,Integer.toString(getQuantity(item)),"remove offer",slotName));}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_trainInstances == null) {    text.append("\tGain Ratio evaluator has not been built");  } else {    text.append("\tGain Ratio feature evaluator");    if (!m_missing_merge) {      text.append("\n\tMissing values treated as seperate");    }  }  text.append("\n");  return text.toString();}  }
class C{  public long summarize(long startTime){  long timeSpent=now() - startTime;  System.out.printf("%s took %d ms\n",name,timeSpent);  return timeSpent;}  }
class C{  public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public static int EINPROGRESS(){  return Errno.EINPROGRESS.intValue();}  }
class C{  public Select<T> include(String... columns){  Collections.addAll(mIncludedColumns,columns);  return this;}  }
class C{  public static boolean hasServerNodes(Ignite ignite){  if (ignite.cluster().forServers().nodes().isEmpty()) {    System.err.println("Server nodes not found (start data nodes with ExampleNodeStartup class)");    return false;  }  return true;}  }
class C{  static void testLongFloorMod(long x,long y,Object expected){  Object result=doFloorMod(x,y);  if (!resultEquals(result,expected)) {    fail("FAIL: long Math.floorMod(%d, %d) = %s; expected %s%n",x,y,result,expected);  }  Object strict_result=doStrictFloorMod(x,y);  if (!resultEquals(strict_result,expected)) {    fail("FAIL: long StrictMath.floorMod(%d, %d) = %s; expected %s%n",x,y,strict_result,expected);  }  try {    BigDecimal xD=new BigDecimal(x);    BigDecimal yD=new BigDecimal(y);    BigDecimal resultD=xD.divide(yD,RoundingMode.FLOOR);    resultD=resultD.multiply(yD);    resultD=xD.subtract(resultD);    long fr=resultD.longValue();    if (!result.equals(fr)) {      fail("FAIL: Long.floorMod(%d, %d) = %d is different than BigDecimal result: %d%n",x,y,result,fr);    }  } catch (  ArithmeticException ae) {    if (y != 0) {      fail("FAIL: long Math.floorMod(%d, %d); unexpected ArithmeticException from bigdecimal");    }  }}  }
class C{  private void unhyphenate(){  restoreState(savedState);  savedState=null;  char term[]=termAttribute.buffer();  int length=hyphenated.length();  if (length > termAttribute.length()) {    term=termAttribute.resizeBuffer(length);  }  hyphenated.getChars(0,length,term,0);  termAttribute.setLength(length);  offsetAttribute.setOffset(offsetAttribute.startOffset(),lastEndOffset);  hyphenated.setLength(0);}  }
class C{  public void loadDbfModelIntoGraphics(OMGraphicList list){  if (list != null && dbfModel.getRowCount() > 0) {    int numgraphics=list.size();    for (int i=0; i < numgraphics; i++) {      try {        OMGraphic omg=list.getOMGraphicAt(i);        Integer recnum=(Integer)(omg.getAttribute(ShapeConstants.SHAPE_INDEX_ATTRIBUTE));        Object inforec=dbfModel.getRecord(recnum.intValue());        omg.putAttribute(ShapeConstants.SHAPE_DBF_INFO_ATTRIBUTE,inforec);      } catch (      ClassCastException cce) {        if (Debug.debugging("shape")) {          cce.printStackTrace();        }      }catch (      NullPointerException npe) {        npe.printStackTrace();      }    }  }}  }
class C{  public static boolean isBaseLanguage(String AD_Language,String tableName){  return Language.isBaseLanguage(AD_Language);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  s=domesticAttr.getPreviousSibling();  assertNull("attrPreviousSiblingNullAssert",s);}  }
class C{  public static boolean decodeToFile(String dataToDecode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public static void createVerticalSpacer(Composite parent,int numlines){  Label lbl=new Label(parent,SWT.NONE);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  Layout layout=parent.getLayout();  if (layout instanceof GridLayout) {    gd.horizontalSpan=((GridLayout)parent.getLayout()).numColumns;  }  gd.heightHint=numlines;  lbl.setLayoutData(gd);}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  Number value=dataset.getValue(row,column);  if (value == null) {    return;  }  PlotOrientation orientation=plot.getOrientation();  RectangleEdge axisEdge=plot.getDomainAxisEdge();  int count=dataset.getColumnCount();  float x0=(float)domainAxis.getCategoryStart(column,count,dataArea,axisEdge);  float x1=(float)domainAxis.getCategoryMiddle(column,count,dataArea,axisEdge);  float x2=(float)domainAxis.getCategoryEnd(column,count,dataArea,axisEdge);  x0=Math.round(x0);  x1=Math.round(x1);  x2=Math.round(x2);  if (this.endType == AreaRendererEndType.TRUNCATE) {    if (column == 0) {      x0=x1;    } else     if (column == getColumnCount() - 1) {      x2=x1;    }  }  double yy1=value.doubleValue();  double yy0=0.0;  if (this.endType == AreaRendererEndType.LEVEL) {    yy0=yy1;  }  if (column > 0) {    Number n0=dataset.getValue(row,column - 1);    if (n0 != null) {      yy0=(n0.doubleValue() + yy1) / 2.0;    }  }  double yy2=0.0;  if (column < dataset.getColumnCount() - 1) {    Number n2=dataset.getValue(row,column + 1);    if (n2 != null) {      yy2=(n2.doubleValue() + yy1) / 2.0;    }  } else   if (this.endType == AreaRendererEndType.LEVEL) {    yy2=yy1;  }  RectangleEdge edge=plot.getRangeAxisEdge();  float y0=(float)rangeAxis.valueToJava2D(yy0,dataArea,edge);  float y1=(float)rangeAxis.valueToJava2D(yy1,dataArea,edge);  float y2=(float)rangeAxis.valueToJava2D(yy2,dataArea,edge);  float yz=(float)rangeAxis.valueToJava2D(0.0,dataArea,edge);  double labelXX=x1;  double labelYY=y1;  g2.setPaint(getItemPaint(row,column));  g2.setStroke(getItemStroke(row,column));  GeneralPath area=new GeneralPath();  if (orientation == PlotOrientation.VERTICAL) {    area.moveTo(x0,yz);    area.lineTo(x0,y0);    area.lineTo(x1,y1);    area.lineTo(x2,y2);    area.lineTo(x2,yz);  } else   if (orientation == PlotOrientation.HORIZONTAL) {    area.moveTo(yz,x0);    area.lineTo(y0,x0);    area.lineTo(y1,x1);    area.lineTo(y2,x2);    area.lineTo(yz,x2);    double temp=labelXX;    labelXX=labelYY;    labelYY=temp;  }  area.closePath();  g2.setPaint(getItemPaint(row,column));  g2.fill(area);  if (isItemLabelVisible(row,column)) {    drawItemLabel(g2,orientation,dataset,row,column,labelXX,labelYY,(value.doubleValue() < 0.0));  }  int datasetIndex=plot.indexOf(dataset);  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),yy1,datasetIndex,x1,y1,orientation);  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,area);  }}  }
class C{  protected String loadDocumentDetails(){  MAllocationHdr alloc=(MAllocationHdr)getPO();  setDateDoc(alloc.getDateTrx());  p_lines=loadLines(alloc);  return null;}  }
class C{  private RemoteOperationResult grantFolderExistence(String pathToGrant){  RemoteOperation operation=new ExistenceCheckRemoteOperation(pathToGrant,this,false);  RemoteOperationResult result=operation.execute(mUploadClient);  if (!result.isSuccess() && result.getCode() == ResultCode.FILE_NOT_FOUND && mCurrentUpload.isRemoteFolderToBeCreated()) {    SyncOperation syncOp=new CreateFolderOperation(pathToGrant,true);    result=syncOp.execute(mUploadClient,mStorageManager);  }  if (result.isSuccess()) {    OCFile parentDir=mStorageManager.getFileByPath(pathToGrant);    if (parentDir == null) {      parentDir=createLocalFolder(pathToGrant);    }    if (parentDir != null) {      result=new RemoteOperationResult(ResultCode.OK);    } else {      result=new RemoteOperationResult(ResultCode.UNKNOWN_ERROR);    }  }  return result;}  }
class C{  @Override @Transactional public void updateDemandDetails(final BillReceiptInfo billRcptInfo){  final BigDecimal totalAmount=billRcptInfo.getTotalAmount();  if (LOGGER.isDebugEnabled())   LOGGER.debug("updateDemandDetails : Demand updation for advertisement started. ");  final EgDemand demand=getDemandByBillReferenceNumber(Long.valueOf(billRcptInfo.getBillReferenceNum()));  final String indexNo=((BillReceiptInfoImpl)billRcptInfo).getReceiptMisc().getReceiptHeader().getConsumerCode();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("updateDemandDetails : Demand before proceeding : " + demand);    LOGGER.debug("updateDemandDetails : collection back update started for property : " + indexNo + " and receipt event is "+ billRcptInfo.getEvent()+ ". Total Receipt amount is."+ totalAmount+ " with receipt no."+ billRcptInfo.getReceiptNum());  }  if (billRcptInfo.getEvent().equals(EVENT_INSTRUMENT_BOUNCED))   updateDemandWithcollectdTaxDetails(demand,billRcptInfo,EVENT_INSTRUMENT_BOUNCED,totalAmount); else   if (billRcptInfo.getEvent().equals(EVENT_RECEIPT_CREATED))   updateDemandWithcollectdTaxDetails(demand,billRcptInfo,EVENT_RECEIPT_CREATED,totalAmount); else   if (billRcptInfo.getEvent().equals(EVENT_RECEIPT_CANCELLED))   updateDemandWithcollectdTaxDetails(demand,billRcptInfo,EVENT_RECEIPT_CANCELLED,totalAmount);  if (LOGGER.isDebugEnabled())   LOGGER.debug("updateDemandDetails : Demand updation processed. ");}  }
class C{  public void update(SimulationThread simulationThread){  if (simulationThread.isCanceled()) {    frame.setStatus("Task canceled.");  } else   if (frame.simulationPaused()) {    frame.setStatus("Task paused.");  } else {    frame.setStatus("Task completed.");  }}  }
class C{  public static String toString(long x){  return toString(x,10);}  }
class C{  private void copy(InputStream from,File to) throws IOException {  OutputStream out=new FileOutputStream(to);  try {    copy(from,out);  }  finally {    out.close();  }}  }
class C{  public FileNotFoundException(){  super();}  }
class C{  public void end(String endType) throws IOException {  link.end(endType);}  }
class C{  public void receiveData(byte[] data,String mimeType){  ContactId contact=getRemoteContact();  for (  ImsSessionListener listener : getListeners()) {    ((SipSessionListener)listener).onDataReceived(contact,data,mimeType);  }}  }
class C{  private void checkRemovedEarnings(){  List<Earning> list=market.getEarningsOlderThan(TIME_TO_REMOVING_EARNINGS);  for (  Earning earning : list) {    StringBuilder builder=new StringBuilder();    builder.append("Your earning of ");    builder.append(earning.getValue());    builder.append(" money has expired and can no longer be collected.");    sendMessage(earning.getSeller(),builder);  }  market.removeEarnings(list);}  }
class C{  public static ThreadSafeIsolate[] wrapArray(Object syncObj,Isolate[] isolates){  ThreadSafeIsolate[] threadSafeIsolates=new ThreadSafeIsolate[isolates.length];  for (int i=0; i < isolates.length; ++i) {    threadSafeIsolates[i]=wrap(syncObj,isolates[i]);  }  return threadSafeIsolates;}  }
class C{  private void recordUndeploy(GridDeployment dep){  assert dep.undeployed();  if (ctx.event().isRecordable(EVT_TASK_UNDEPLOYED) || ctx.event().isRecordable(EVT_CLASS_UNDEPLOYED)) {    for (    Class<?> cls : dep.deployedClasses()) {      boolean isTask=isTask(cls);      String msg=isTask ? "Task locally undeployed: " + cls : "Class locally undeployed: " + cls;      if (ctx.event().isRecordable(isTask ? EVT_TASK_UNDEPLOYED : EVT_CLASS_UNDEPLOYED)) {        DeploymentEvent evt=new DeploymentEvent();        evt.message(msg);        evt.node(ctx.discovery().localNode());        evt.type(isTask ? EVT_TASK_UNDEPLOYED : EVT_CLASS_UNDEPLOYED);        evt.alias(getAlias(dep,cls));        ctx.event().record(evt);      }      if (log.isInfoEnabled())       log.info(msg);    }  }}  }
class C{  AttributeCreatorImpl(MetadataRegistry root,TransformKey transformKey){  super(root,transformKey);}  }
class C{  public DefaultAttribute(String name,String value){  super(name,value);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  double signatureLibraryReleaseValue=Double.parseDouble(signatureLibraryRelease);  if (signatureLibraryReleaseValue >= 2.75d) {    final Set<RawProtein<PIRSFHmmer2RawMatch>> resultRawMatches=new HashSet<RawProtein<PIRSFHmmer2RawMatch>>();    final Map<String,RawProtein<PIRSFHmmer2RawMatch>> proteinIdToProteinMap=new HashMap<String,RawProtein<PIRSFHmmer2RawMatch>>();    final String filteredMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,filteredMatchesFileName);    try {      Set<RawProtein<PIRSFHmmer2RawMatch>> filteredRawProteins=PirsfMatchTempParser.parse(filteredMatchesFilePath);      copySetToMap(proteinIdToProteinMap,filteredRawProteins);    } catch (    IOException e) {      throw new IllegalStateException("IOException thrown when parsing filtered matches file " + filteredMatchesFilePath);    }    final String blastedMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,blastedMatchesFileName);    try {      Set<RawProtein<PIRSFHmmer2RawMatch>> blastedRawProteins=PirsfMatchTempParser.parse(blastedMatchesFilePath);      copySetToMap(proteinIdToProteinMap,blastedRawProteins);    } catch (    IOException e) {      throw new IllegalStateException("IOException thrown when parsing blasted matches file " + blastedMatchesFilePath);    }    Set<RawProtein<PIRSFHmmer2RawMatch>> subfamRawProteins;    final String subfamMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,subfamMatchesFileName);    try {      subfamRawProteins=PirsfMatchTempParser.parse(subfamMatchesFilePath);    } catch (    IOException e) {      throw new IllegalStateException("IOException thrown when parsing subfamily matches file " + subfamMatchesFilePath);    }    final String subFamilyMapFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,subFamilyMapFileName);    final Resource subFamMapFileResource=new FileSystemResource(subFamilyMapFilePath);    final Map<String,String> subfamToSuperFamMap;    try {      subfamToSuperFamMap=subfamilyFileParser.parse(subFamMapFileResource);    } catch (    IOException e) {      throw new IllegalStateException("IOException thrown when parsing subfamily-superfamily map file " + subFamMapFileResource);    }    persistenceProcessor.process(subfamRawProteins,proteinIdToProteinMap,subfamToSuperFamMap);    resultRawMatches.addAll(proteinIdToProteinMap.values());    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("PIRSF: Retrieved " + resultRawMatches.size() + " proteins.");      int matchCount=0;      for (      final RawProtein rawProtein : resultRawMatches) {        matchCount+=rawProtein.getMatches().size();      }      LOGGER.debug("PIRSF: A total of " + matchCount + " raw matches.");    }    LOGGER.info("Persisting filtered raw matches...");    filteredMatchDAO.persist(resultRawMatches);  } else {    throw new IllegalStateException("Step instance with ID " + stepInstance.getId() + " only supports signature library release version >= 2.75");  }}  }
class C{  static public int[] toIntArray(IString[] strings){  int[] intArray=new int[strings.length];  for (int i=0; i < strings.length; i++) {    intArray[i]=strings[i].id;  }  return intArray;}  }
class C{  Tuple<ClusterState,List<MappingTask>> executeRefreshOrUpdate(final ClusterState currentState,final long insertionOrder) throws Exception {  final List<MappingTask> allTasks=new ArrayList<>();synchronized (refreshOrUpdateMutex) {    if (refreshOrUpdateQueue.isEmpty()) {      return Tuple.tuple(currentState,allTasks);    }    if (insertionOrder < refreshOrUpdateProcessedInsertOrder) {      return Tuple.tuple(currentState,allTasks);    }    allTasks.addAll(refreshOrUpdateQueue);    refreshOrUpdateQueue.clear();    refreshOrUpdateProcessedInsertOrder=refreshOrUpdateInsertOrder;  }  if (allTasks.isEmpty()) {    return Tuple.tuple(currentState,allTasks);  }  Map<String,List<MappingTask>> tasksPerIndex=Maps.newHashMap();  for (  MappingTask task : allTasks) {    if (task.index == null) {      logger.debug("ignoring a mapping task of type [{}] with a null index.",task);    }    List<MappingTask> indexTasks=tasksPerIndex.get(task.index);    if (indexTasks == null) {      indexTasks=new ArrayList<>();      tasksPerIndex.put(task.index,indexTasks);    }    indexTasks.add(task);  }  boolean dirty=false;  MetaData.Builder mdBuilder=MetaData.builder(currentState.metaData());  for (  Map.Entry<String,List<MappingTask>> entry : tasksPerIndex.entrySet()) {    String index=entry.getKey();    IndexMetaData indexMetaData=mdBuilder.get(index);    if (indexMetaData == null) {      logger.debug("[{}] ignoring tasks - index meta data doesn't exist",index);      continue;    }    List<MappingTask> allIndexTasks=entry.getValue();    List<MappingTask> tasks=new ArrayList<>();    for (    MappingTask task : allIndexTasks) {      if (!indexMetaData.isSameUUID(task.indexUUID)) {        logger.debug("[{}] ignoring task [{}] - index meta data doesn't match task uuid",index,task);        continue;      }      tasks.add(task);    }    IndexService indexService=indicesService.indexService(index);    if (indexService == null) {      indexService=indicesService.createIndex(indexMetaData.getIndex(),indexMetaData.getSettings(),currentState.nodes().localNode().id());      Set<String> typesToIntroduce=Sets.newHashSet();      for (      MappingTask task : tasks) {        if (task instanceof UpdateTask) {          typesToIntroduce.add(((UpdateTask)task).type);        } else         if (task instanceof RefreshTask) {          Collections.addAll(typesToIntroduce,((RefreshTask)task).types);        }      }      for (      String type : typesToIntroduce) {        if (indexMetaData.getMappings().containsKey(type)) {          indexService.mapperService().merge(type,indexMetaData.getMappings().get(type).source(),false,true);        }      }    }    IndexMetaData.Builder builder=IndexMetaData.builder(indexMetaData);    try {      boolean indexDirty=processIndexMappingTasks(tasks,indexService,builder);      if (indexDirty) {        mdBuilder.put(builder);        dirty=true;      }    }  finally {    }  }  if (!dirty) {    return Tuple.tuple(currentState,allTasks);  }  return Tuple.tuple(ClusterState.builder(currentState).incrementVersion().metaData(mdBuilder).build(),allTasks);}  }
class C{  public StackBlurFilter(){  this(3,3);}  }
class C{  public void finalizeAttack(){  this.tsAttackStop=System.currentTimeMillis();  if (this.ticker != null) {    this.ticker.interrupt();  }  if (this.sendProbeRequestsThread != null) {    this.sendProbeRequestsThread.interrupt();  }  this.currentAttackState=getStateArray()[8];  this.generateResults();  this.attackFinished=true;  fireModelChanged();}  }
class C{  @Bean public AmqpMessageHandlerService amqpMessageHandlerService(final RabbitTemplate rabbitTemplate,final AmqpMessageDispatcherService amqpMessageDispatcherService,final ControllerManagement controllerManagement,final EntityFactory entityFactory){  return new AmqpMessageHandlerService(rabbitTemplate,amqpMessageDispatcherService,controllerManagement,entityFactory);}  }
class C{  public static ResultadosBusquedaBean consultarNotificaciones(String idSession_,CriteriosBusquedaNotiBean parametros_,boolean conDetalle_,String entidad){  ResultadosBusquedaBean salida=new ResultadosBusquedaBean();  NotificacionesDatos bd=new NotificacionesDatos();  try {    Notificaciones valores=bd.getNotificaciones(NotificacionesDatos.SEARCH,parametros_,entidad);    salida.setError(SIN_ERROR_BUSQUEDA);    salida.setDetalle(null);    salida.setDescripcion(null);    Notificacion actual;    ResultadoBusquedaBean parteSalida;    for (int i=0; i < valores.count(); i++) {      actual=valores.get(i);      parteSalida=new ResultadoBusquedaBean();      parteSalida.setIdentificadorNotificacion(actual.getId());      NotificacionBean detalle=null;      if (conDetalle_)       detalle=parseaNotificacionANotificacionBean(actual,entidad);      parteSalida.setDetalle(detalle);      salida.add(parteSalida);    }  } catch (  Exception e) {    salida.setError(CON_ERROR_BUSQUEDA);    salida.setDetalle(e.toString());    salida.setDescripcion(MENSAJE_FALLO_BUSQUEDA_BD);    logger.debug(e);  }  return salida;}  }
class C{  public ReplaceViewHandlerTestCase(String name){  super(name);}  }
class C{  public synchronized boolean hasError(){  return mHasError;}  }
class C{  public static void makeDoubleMatrixFile(double matrix[][],String outputFileName,int decimalPlaces) throws IOException {  String template=String.format("%%.%df\t",decimalPlaces);  int rowSize=matrix.length;  int colSize=matrix[0].length;  createDirectories(outputFileName);  BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));  for (int i=0; i < rowSize; i++) {    for (int j=0; j < colSize; j++) {      out.write(String.format(template,matrix[i][j]));      if (j == colSize - 1) {        out.write("\n");      }    }  }  out.close();}  }
class C{  private static int normRNG(int factor){  factor++;  return (2 * (Compute.randomInt(factor) + Compute.randomInt(factor) + Compute.randomInt(factor)) - 3 * (factor - 1)) / 32;}  }
class C{  @Override public void writeGraph(){  require(1);  _buffer[_offset++]=(byte)ConstH3.GRAPH_ALL;}  }
class C{  private static TreeSet<String> findClasses(String directory,String packageName) throws Exception {  TreeSet<String> classes=new TreeSet<String>();  if (directory.startsWith("file:") && directory.contains("!")) {    String[] split=directory.split("!");    URL jar=new URL(split[0]);    ZipInputStream zip=new ZipInputStream(jar.openStream());    ZipEntry entry=null;    while ((entry=zip.getNextEntry()) != null) {      if (entry.getName().endsWith(".class")) {        String className=entry.getName().replaceAll("[$].*","").replaceAll("[.]class","").replace('/','.');        classes.add(className);      }    }  }  File dir=new File(directory);  if (!dir.exists()) {    return classes;  }  File[] files=dir.listFiles();  for (  File file : files) {    if (file.isDirectory()) {      assert !file.getName().contains(".");      classes.addAll(findClasses(file.getAbsolutePath(),packageName + "." + file.getName()));    } else     if (file.getName().endsWith(".class")) {      classes.add(packageName + '.' + file.getName().substring(0,file.getName().length() - 6));    }  }  return classes;}  }
class C{  public static byte[] convertStringToMacAddress(String str){  byte[] macAddress=new byte[Wlan.MAC_ADDRESS_LENGTH];  for (int i=0, n=0; i < macAddress.length; i++) {    int n1=parseHexDigit(str.charAt(n++));    int n2=parseHexDigit(str.charAt(n++));    n++;    macAddress[i]=(byte)((n1 << 4) + n2);  }  return macAddress;}  }
class C{  public void onStartRandomClicked0(final View view){  this.startInterpolatedAnim(0f);}  }
class C{  protected AssociationPosition_Impl(){  super();}  }
class C{  public TIntLongHashMapDecorator(TIntLongHashMap map){  super();  this._map=map;}  }
class C{  public static boolean parameter(Configuration cfg,String name,String authority,boolean dflt){  return cfg.getBoolean(String.format(name,authority != null ? authority : ""),dflt);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void draw(Object object,Graphics2D graphics,DrawInfo2D info){  double diamx=info.draw.width * 2;  double diamy=info.draw.height * 2;  double radiusX=info.draw.width * agent.getSphereRadius();  double radiusY=info.draw.height * agent.getSphereRadius();  graphics.setColor(getColor());  graphics.fillRect((int)(info.draw.x - radiusX),(int)(info.draw.y - radiusY),(int)(radiusX * 2),(int)(radiusY * 2));}  }
class C{  byte[] transform(ClassReader cr,boolean stubNativesOnly){  boolean hasNativeMethods=hasNativeMethods(cr);  String className=cr.getClassName();  String newName=transformName(className);  if (newName != className) {    mRenameCount++;    mClassesNotRenamed.remove(className);  }  mLog.debug("Transform %s%s%s%s",className,newName == className ? "" : " (renamed to " + newName + ")",hasNativeMethods ? " -- has natives" : "",stubNativesOnly ? " -- stub natives only" : "");  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);  ClassVisitor rv=cw;  if (newName != className) {    rv=new RenameClassAdapter(cw,className,newName);  }  ClassVisitor cv=new TransformClassAdapter(mLog,mStubMethods,mDeleteReturns.get(className),newName,rv,stubNativesOnly,stubNativesOnly || hasNativeMethods);  Set<String> delegateMethods=mDelegateMethods.get(className);  if (delegateMethods != null && !delegateMethods.isEmpty()) {    if (hasNativeMethods || !(delegateMethods.size() == 1 && delegateMethods.contains(DelegateClassAdapter.ALL_NATIVES))) {      cv=new DelegateClassAdapter(mLog,cv,className,delegateMethods);    }  }  cr.accept(cv,0);  return cw.toByteArray();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public synchronized void closeSession(){  if (mMsrpSession != null) {    if (logger.isActivated()) {      logger.info("Close the MSRP session");    }    mMsrpSession.close();    mMsrpSession=null;  }}  }
class C{  private void writePhotoOverlay(String name,String category,String description,String styleName,Location location,String photoUrl,float heading){  if (location != null) {    printWriter.println("<PhotoOverlay>");    printWriter.println("<name>" + StringUtils.formatCData(name) + "</name>");    printWriter.println("<description>" + StringUtils.formatCData(description) + "</description>");    printWriter.print("<Camera>");    printWriter.print("<longitude>" + location.getLongitude() + "</longitude>");    printWriter.print("<latitude>" + location.getLatitude() + "</latitude>");    printWriter.print("<altitude>20</altitude>");    printWriter.print("<heading>" + heading + "</heading>");    printWriter.print("<tilt>90</tilt>");    printWriter.println("</Camera>");    printWriter.println("<TimeStamp><when>" + StringUtils.formatDateTimeIso8601(location.getTime()) + "</when></TimeStamp>");    printWriter.println("<styleUrl>#" + styleName + "</styleUrl>");    writeCategory(category);    if (playTrack) {      printWriter.println("<Icon><href>" + Uri.decode(photoUrl) + "</href></Icon>");    } else {      Uri uri=Uri.parse(photoUrl);      printWriter.println("<Icon><href>" + KmzTrackExporter.KMZ_IMAGES_DIR + File.separatorChar+ uri.getLastPathSegment()+ "</href></Icon>");    }    printWriter.print("<ViewVolume>");    printWriter.print("<near>10</near>");    printWriter.print("<leftFov>-60</leftFov>");    printWriter.print("<rightFov>60</rightFov>");    printWriter.print("<bottomFov>-45</bottomFov>");    printWriter.print("<topFov>45</topFov>");    printWriter.println("</ViewVolume>");    printWriter.println("<Point>");    printWriter.println("<coordinates>" + getCoordinates(location,",") + "</coordinates>");    printWriter.println("</Point>");    printWriter.println("</PhotoOverlay>");  }}  }
class C{  protected final void unserialize(InputStream inputStream) throws IOException {  DataInputStream input=new DataInputStream(inputStream);  int indexDataLength=m_dataOffset_ + m_dataLength_;  m_index_=new char[indexDataLength];  for (int i=0; i < indexDataLength; i++) {    m_index_[i]=input.readChar();  }  m_data_=m_index_;  m_initialValue_=m_data_[m_dataOffset_];}  }
class C{  public boolean isEmbedded(){  return false;}  }
class C{  public void transferNeuronsToGroup(List<Neuron> list,NeuronGroup group){  for (  Neuron neuron : list) {    neuronList.remove(neuron);    group.addNeuron(neuron,false);  }}  }
class C{  private static byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  if (mf == null || !mf.isMusic())   return null;  Wizard wiz=Wizard.getInstance();  return wiz.getCachedAlbumForMediaFile(mf);}  }
class C{  public static RequestedAddressFamilyAttribute createRequestedAddressFamilyAttribute(char family){  RequestedAddressFamilyAttribute attribute=new RequestedAddressFamilyAttribute();  boolean isSet=attribute.setFamily(family);  if (!isSet) {    attribute=null;  }  return attribute;}  }
class C{  @Deprecated public void updateNote(Note note,OnClientCallback<Note> callback){  AsyncReflector.execute(mClient,callback,"updateNote",mAuthenticationToken,note);}  }
class C{  void verifyUniqueXids(List<OFMessage> msgs){  if (seenXids == null)   seenXids=new HashSet<Long>();  for (  OFMessage m : msgs) {    long xid=m.getXid();    assertTrue("Xid in messags is 0",xid != 0);    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));    seenXids.add(xid);  }}  }
class C{  public short loadShort(Offset offset){  return (short)0;}  }
class C{  public static void addFontFile(final String currentFont,String fontPath){  checkFontTablesInitialised();  if (fontPath != null && !fontPath.endsWith("/") && !fontPath.endsWith("\\")) {    fontPath+=separator;  }  final String name=currentFont.toLowerCase();  final int type=StandardFonts.getFontType(name);  InputStream in=null;  if (type != StandardFonts.FONT_UNSUPPORTED && new File(fontPath + currentFont).exists()) {    boolean failed=false;    try {      in=new FileInputStream(fontPath + currentFont);    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());      failed=true;    }catch (    final Error err) {      LogWriter.writeLog("Error: " + err.getMessage());      failed=true;    }    if (!failed) {      final String fontName;      final int pointer=currentFont.indexOf('.');      if (pointer == -1) {        fontName=currentFont.toLowerCase();      } else {        fontName=currentFont.substring(0,pointer).toLowerCase();      }      if (fontSubstitutionMode == PdfDecoderInt.SUBSTITUTE_FONT_USING_FILE_NAME || type == StandardFonts.OPENTYPE) {        if (type == StandardFonts.TYPE1) {          fontSubstitutionTable.put(fontName,"/Type1");        } else {          fontSubstitutionTable.put(fontName,"/TrueType");        }        fontSubstitutionLocation.put(fontName,fontPath + currentFont);        fontPropertiesTableType.put(fontName,type);        fontPropertiesTablePath.put(fontName,fontPath + currentFont);      } else       if (type == StandardFonts.TRUETYPE_COLLECTION || type == StandardFonts.TRUETYPE) {        if (fontSubstitutionMode == PdfDecoderInt.SUBSTITUTE_FONT_USING_POSTSCRIPT_NAME_USE_FAMILY_NAME_IF_DUPLICATES) {          String[] postscriptNames=null;          try {            postscriptNames=StandardFonts.readNamesFromFont(type,fontPath + currentFont,PdfDecoderInt.SUBSTITUTE_FONT_USING_POSTSCRIPT_NAME);          } catch (          final Exception e) {            LogWriter.writeLog("Exception: " + e.getMessage());          }          String[] familyNames=null;          try {            familyNames=StandardFonts.readNamesFromFont(type,fontPath + currentFont,PdfDecoderInt.SUBSTITUTE_FONT_USING_FAMILY_NAME);          } catch (          final Exception e) {            LogWriter.writeLog("Exception: " + e.getMessage());          }          int fontCount=0;          if (postscriptNames != null) {            fontCount=postscriptNames.length;          }          for (int ii=0; ii < fontCount; ii++) {            if (postscriptNames[ii] == null) {              postscriptNames[ii]=Strip.stripAllSpaces(fontName);            }            if (familyNames[ii] == null) {              familyNames[ii]=Strip.stripAllSpaces(fontName);            }            final String fontSubValue=fontSubstitutionTable.get(postscriptNames[ii]);            final String possDuplicate=fontPossDuplicates.get(postscriptNames[ii]);            if (fontSubValue == null && possDuplicate == null) {              fontSubstitutionTable.put(postscriptNames[ii],"/TrueType");              fontSubstitutionLocation.put(postscriptNames[ii],fontPath + currentFont);              fontSubstitutionFontID.put(postscriptNames[ii],ii);              fontPossDuplicates.put(postscriptNames[ii],familyNames[ii]);            } else             if (!familyNames[ii].equals(postscriptNames[ii])) {              fontSubstitutionTable.put(postscriptNames[ii],"/TrueType");              fontSubstitutionLocation.put(postscriptNames[ii],fontPath + currentFont);              fontSubstitutionFontID.put(postscriptNames[ii],ii);              fontPropertiesTableType.put(postscriptNames[ii],type);              fontPropertiesTablePath.put(postscriptNames[ii],fontPath + currentFont);              if (!possDuplicate.equals("DONE")) {                fontPossDuplicates.put(postscriptNames[ii],"DONE");                fontSubstitutionTable.remove(postscriptNames[ii]);                fontSubstitutionTable.put(familyNames[ii],"/TrueType");                final String font=fontSubstitutionLocation.get(postscriptNames[ii]);                fontSubstitutionLocation.remove(postscriptNames[ii]);                fontSubstitutionLocation.put(familyNames[ii],font);                fontSubstitutionFontID.remove(postscriptNames[ii]);                fontSubstitutionFontID.put(familyNames[ii],ii);                fontPropertiesTablePath.remove(familyNames[ii]);                fontPropertiesTableType.remove(familyNames[ii]);                fontPropertiesTableType.put(familyNames[ii],type);                fontPropertiesTablePath.put(familyNames[ii],fontPath + currentFont);              }            }          }        } else {          String[] fontNames=null;          try {            fontNames=StandardFonts.readNamesFromFont(type,fontPath + currentFont,fontSubstitutionMode);          } catch (          final Exception e) {            LogWriter.writeLog("Exception: " + e.getMessage());          }          if (fontNames != null) {            for (int i=0; i < fontNames.length; i++) {              if (fontNames[i] == null) {                fontNames[i]=Strip.stripAllSpaces(fontName);              }              fontSubstitutionTable.put(fontNames[i],"/TrueType");              fontSubstitutionLocation.put(fontNames[i],fontPath + currentFont);              fontSubstitutionFontID.put(fontNames[i],i);              fontPropertiesTableType.put(fontNames[i],type);              fontPropertiesTablePath.put(fontNames[i],fontPath + currentFont);            }          }        }      } else       if (type == StandardFonts.TYPE1) {        String[] fontNames=null;        try {          fontNames=StandardFonts.readNamesFromFont(type,fontPath + currentFont,fontSubstitutionMode);        } catch (        final Exception e) {          LogWriter.writeLog("Exception: " + e.getMessage());        }        if (fontNames != null) {          for (int i=0; i < fontNames.length; i++) {            if (fontNames[i] == null) {              fontNames[i]=Strip.stripAllSpaces(fontName);            }            fontSubstitutionTable.put(fontNames[i],"/Type1");            fontSubstitutionLocation.put(fontNames[i],fontPath + currentFont);            fontSubstitutionFontID.put(fontNames[i],i);            fontPropertiesTableType.put(fontNames[i],type);            fontPropertiesTablePath.put(fontNames[i],fontPath + currentFont);          }        }      }    } else {      LogWriter.writeLog("No fonts found at " + fontPath);    }  }  if (in != null) {    try {      in.close();    } catch (    final IOException e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }  }}  }
class C{  public HandleErrorResult primaryFail(Method method,Object[] args) throws Throwable {  boolean alreadyClosed=!masterProtocol.isConnected();  boolean inTransaction=masterProtocol != null && masterProtocol.inTransaction();  try {    if (masterProtocol != null && masterProtocol.isConnected() && masterProtocol.ping()) {      if (inTransaction) {        masterProtocol.rollback();        return new HandleErrorResult(true);      }      return relaunchOperation(method,args);    }  } catch (  QueryException e) {    proxy.lock.lock();    try {      masterProtocol.close();    }  finally {      proxy.lock.unlock();    }    if (setMasterHostFail()) {      addToBlacklist(masterProtocol.getHostAddress());    }  }  if (urlParser.getOptions().failOnReadOnly && !isSecondaryHostFail()) {    try {      if (this.secondaryProtocol != null && this.secondaryProtocol.ping()) {        syncConnection(masterProtocol,this.secondaryProtocol);        proxy.lock.lock();        try {          currentProtocol=this.secondaryProtocol;        }  finally {          proxy.lock.unlock();        }        FailoverLoop.addListener(this);        try {          return relaunchOperation(method,args);        } catch (        Exception e) {        }        return new HandleErrorResult();      }    } catch (    Exception e) {      if (setSecondaryHostFail()) {        blackListAndCloseConnection(this.secondaryProtocol);      }    }  }  try {    reconnectFailedConnection(new SearchFilter(true,urlParser.getOptions().failOnReadOnly));    handleFailLoop();    if (currentReadOnlyAsked || alreadyClosed || (!alreadyClosed && !inTransaction && isQueryRelaunchable(method,args))) {      logger.info("Connection to master lost, new master " + currentProtocol.getHostAddress() + ", conn:"+ currentProtocol.getServerThreadId()+ " found"+ ", query type permit to be re-execute on new server without throwing exception");      return relaunchOperation(method,args);    }    return new HandleErrorResult(true);  } catch (  Exception e) {    setMasterHostFail();    FailoverLoop.removeListener(this);    return new HandleErrorResult();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.192 -0400",hash_original_method="1CA41B58715410C4216B9DE6C43BB9D4",hash_generated_method="E7DA843D8557D10445E3B5AB05073926") private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public void test_GetParams(){  assertEquals("wrong parameters",ecparams,ecpks.getParams());}  }
class C{  public boolean writeComment(String taskId,TaskAttribute newComments){  if (!displayWriteWarning(WRITE_COMMENTS_WARNING)) {    return false;  }  try {    gitClient.writeComment(taskId,newComments.getValue());  } catch (  GitClientException e) {    AppraiseConnectorPlugin.logError("Error writing comment for " + taskId,e);    return false;  }  return true;}  }
class C{  public boolean isUsernameMuted(final String username){  final long muteTill=getUsernameUnmuteTime(username);  return muteTill > System.currentTimeMillis();}  }
class C{  public int compareTo(MetadataKey<?> other){  if (other == this) {    return 0;  }  if (!(other instanceof AttributeKey<?>)) {    return -1;  }  int compare=compareQName(id,other.id);  if (compare != 0) {    return compare;  }  return compareClass(datatype,other.datatype);}  }
class C{  public static String paramToQueryString(Map<String,String> params,String charset) throws UnsupportedEncodingException {  if (params == null || params.size() == 0) {    return null;  }  StringBuilder paramString=new StringBuilder();  boolean first=true;  for (  Entry<String,String> p : params.entrySet()) {    String key=p.getKey();    String val=p.getValue();    if (!first) {      paramString.append("&");    }    paramString.append(key);    if (val != null) {      paramString.append("=").append(HttpUtil.urlEncode(val,charset));    }    first=false;  }  return paramString.toString();}  }
class C{  @Override public void deconstructRocket(){  super.deconstructRocket();  for (  IInfrastructure infrastructure : connectedInfrastructure) {    infrastructure.unlinkRocket();  }  storage.pasteInWorld(this.worldObj,(int)(this.posX - storage.getSizeX() / 2f),(int)this.posY,(int)(this.posZ - storage.getSizeZ() / 2f));  this.setDead();}  }
class C{  public static String createMethodSignature(String[] parameterTypes,String returnType){  int parameterTypesLenth=parameterTypes.length;  char[][] parameters=new char[parameterTypesLenth][];  for (int i=0; i < parameterTypesLenth; i++) {    parameters[i]=parameterTypes[i].toCharArray();  }  return new String(createMethodSignature(parameters,returnType.toCharArray()));}  }
class C{  public void updateCounter(long partCntr){  this.partUpdateCntr=partCntr;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeInt(0);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readInt();    }  }}  }
class C{  protected BitwiseAndExpressionImpl(){  super();}  }
class C{  private RdapSearchResults searchByNameserverIp(final InetAddress inetAddress,final DateTime now){  return searchByNameserverRefs(ofy().load().type(HostResource.class).filter("inetAddresses",inetAddress.getHostAddress()).filter("deletionTime",END_OF_TIME).limit(1000).keys(),now);}  }
class C{  public final void remove(final BlacklistType blacklistType,final String blacklistToUse,final String host,final String path){  final Map<String,Set<Pattern>> blacklistMap=getBlacklistMap(blacklistType,true);  Set<Pattern> hostList=blacklistMap.get(host);  if (hostList != null) {    for (    Pattern hp : hostList) {      String hpxs=hp.pattern();      if (hpxs.equals(path)) {        hostList.remove(hp);        break;      }    }    if (hostList.isEmpty()) {      blacklistMap.remove(host);    }  }  final Map<String,Set<Pattern>> blacklistMapNotMatch=getBlacklistMap(blacklistType,false);  hostList=blacklistMapNotMatch.get(host);  if (hostList != null) {    for (    Pattern hp : hostList) {      String hpxs=hp.pattern();      if (hpxs.equals(path)) {        hostList.remove(hp);        break;      }    }    if (hostList.isEmpty()) {      blacklistMapNotMatch.remove(host);    }  }  final List<String> list=FileUtils.getListArray(new File(ListManager.listsPath,blacklistToUse));  if (list != null) {    for (    final String e : list) {      if (e.equals(host + "/" + path)) {        list.remove(e);        break;      }    }    FileUtils.writeList(new File(ListManager.listsPath,blacklistToUse),list.toArray(new String[list.size()]));  }}  }
class C{  private HashMap<ServerLocation,HashSet<Integer>> bucketServerMap2ServerBucketSetMap(Map<Integer,List<BucketServerLocation66>> map){  HashMap<ServerLocation,HashSet<Integer>> serverBucketMap=new HashMap<>();  for (  Integer id : map.keySet()) {    List<BucketServerLocation66> locations=map.get(id);    for (    BucketServerLocation66 location : locations) {      ServerLocation server=new ServerLocation(location.getHostName(),location.getPort());      if (location.isPrimary()) {        HashSet<Integer> set=serverBucketMap.get(server);        if (set == null) {          set=new HashSet<>();          serverBucketMap.put(server,set);        }        set.add(id);        break;      }    }  }  return serverBucketMap;}  }
class C{  @HLEFunction(nid=0x267A6DD2,version=150,checkInsideInterrupt=true) public int __sceSasRevParam(int sasCore,int delay,int feedback){  checkSasHandleGood(sasCore);  waveformEffectDelay=delay;  waveformEffectFeedback=feedback;  return 0;}  }
class C{  public void closeIndexWriter() throws IOException {  if (indexWriter != null) {    indexWriter.close();  }}  }
class C{  public static void startChatService(){  final Intent intent=new Intent(sStaticContext,ChatService.class);  intent.putExtra(AppConstants.Keys.HEART_BEAT,AppConstants.HEART_BEAT);  sStaticContext.startService(intent);}  }
class C{  private static boolean isCompatible(Lop node1,Lop node2){  return ((node1.getCompatibleJobs() & node2.getCompatibleJobs()) > 0);}  }
class C{  public GeoShapeConditionBuilder operation(GeoOperation operation){  this.operation=operation;  return this;}  }
class C{  @Override public String lindex(final String key,final long index){  checkIsInMultiOrPipeline();  client.lindex(key,index);  return client.getBulkReply();}  }
class C{  public static int computeLevenshteinDistance(CharSequence str1,CharSequence str2){  if ((str1 == null) || (str2 == null)) {    return Integer.MAX_VALUE;  }  if (str1.toString().toLowerCase().equals(str2.toString().toLowerCase())) {    return 0;  }  int[][] distance=new int[str1.length() + 1][str2.length() + 1];  for (int i=0; i <= str1.length(); i++) {    distance[i][0]=i;  }  for (int j=0; j <= str2.length(); j++) {    distance[0][j]=j;  }  for (int i=1; i <= str1.length(); i++) {    for (int j=1; j <= str2.length(); j++) {      distance[i][j]=minimum(distance[i - 1][j] + 1,distance[i][j - 1] + 1,distance[i - 1][j - 1] + ((str1.charAt(i - 1) == str2.charAt(j - 1)) ? 0 : 1));    }  }  return distance[str1.length()][str2.length()];}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static float pxToSp(float px){  float scaledDensity=Resources.getSystem().getDisplayMetrics().scaledDensity;  return (px / scaledDensity);}  }
class C{  public void testLocalCloseWithTry() throws Exception {  String curVal=null;  for (int i=0; i < 3; i++) {    try (IgniteCache<String,String> cache2=grid(2).getOrCreateCache(getLocalConfig())){      IgniteCache<String,String> cache0=grid(0).cache(CACHE_NAME_LOC);      IgniteCache<String,String> cache1=grid(1).cache(CACHE_NAME_LOC);      assert cache0.get(KEY_VAL) == null;      assert cache1.get(KEY_VAL) == null;      assert cache2.get(KEY_VAL) == null;      curVal=KEY_VAL + curVal;      cache0.put(KEY_VAL,curVal + 1);      cache1.put(KEY_VAL,curVal + 2);      cache2.put(KEY_VAL,curVal + 3);      assert cache0.get(KEY_VAL).equals(curVal + 1);      assert cache1.get(KEY_VAL).equals(curVal + 2);      assert cache2.get(KEY_VAL).equals(curVal + 3);    }   }}  }
class C{  public boolean select(int position){  View v=mAllList.get(position);  if (mMultiChoiceAdapter != null) {    performVibrate();    performSelect(v,position,true);    return true;  }  return false;}  }
class C{  public TextFileChange(String name,IFile file){  super(name);  Assert.isNotNull(file);  fFile=file;  String extension=file.getFileExtension();  if (extension != null && extension.length() > 0) {    setTextType(extension);  }}  }
class C{  public void addAdditionalRoleSet(AdditionalRoleSet additionalRoleSet){  getAdditionalRoleSets().add(additionalRoleSet);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_numExpr_3_();}  }
class C{  public SpecifiedLayout(String group,String xField,String yField){  super(group);  m_xfield=xField;  m_yfield=yField;}  }
class C{  public static byte[] toBytes(long value){  Buffer buffer=new Buffer(8);  buffer.bigEndianEditor().writeLong(value);  return buffer.data;}  }
class C{  void showAbout(){  if (about == null) {    about=new CommonAboutDialog(frame);  }  about.setVisible(true);}  }
class C{  public SparseTernaryPolynomial(int[] coeffs){  N=coeffs.length;  ones=new int[N];  negOnes=new int[N];  int onesIdx=0;  int negOnesIdx=0;  for (int i=0; i < N; i++) {    int c=coeffs[i];switch (c) {case 1:      ones[onesIdx++]=i;    break;case -1:  negOnes[negOnesIdx++]=i;break;case 0:break;default :throw new IllegalArgumentException("Illegal value: " + c + ", must be one of {-1, 0, 1}");}}ones=Arrays.copyOf(ones,onesIdx);negOnes=Arrays.copyOf(negOnes,negOnesIdx);}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertificate tbsCert=x509Certificate.getTBSCertificate();  if (!CertUtils.isAlgIdEqual(tbsCert.getSignature(),x509Certificate.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCert.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCert);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509Certificate.getSignature().getBytes());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  int nodeType;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  nodeType=(int)rootNode.getNodeType();  assertEquals("nodeElementNodeTypeAssert1",1,nodeType);}  }
class C{  public XPath(Expression expr){  this.setExpression(expr);  initFunctionTable();}  }
class C{  public static BlockNode traverseWhileDominates(BlockNode dom,BlockNode start){  for (  BlockNode node : start.getCleanSuccessors()) {    if (!node.isDominator(dom)) {      return node;    } else {      BlockNode out=traverseWhileDominates(dom,node);      if (out != null) {        return out;      }    }  }  return null;}  }
class C{  public NbtTagShort(){}  }
class C{  public Boolean isTestBooleanElement(){  return testBooleanElement;}  }
class C{  protected TrustManagerFactory(TrustManagerFactorySpi factorySpi,Provider provider,String algorithm){  this.factorySpi=factorySpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  @Override public void next(int frames) throws IOException {  next(frames,true);}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  public void init(CredentialInfo info,APIAccessCallBack apiAccessCallBack,Context context){  if (Constants.DEBUG_ENABLED) {    Log.d(TAG,"init");  }  IdentityProxy.clientID=info.getClientID();  IdentityProxy.clientSecret=info.getClientSecret();  this.apiAccessCallBack=apiAccessCallBack;  this.context=context;  SharedPreferences mainPref=context.getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(Constants.CLIENT_ID,clientID);  editor.putString(Constants.CLIENT_SECRET,clientSecret);  editor.putString(Constants.TOKEN_ENDPOINT,info.getTokenEndPoint());  editor.commit();  setAccessTokenURL(info.getTokenEndPoint());  AccessTokenHandler accessTokenHandler=new AccessTokenHandler(info,this);  accessTokenHandler.obtainAccessToken();}  }
class C{  public static void main(String[] args){  System.setProperty("prism.lcdtext","false");  System.setProperty("prism.text","t2k");  java.awt.Toolkit.getDefaultToolkit();  if (System.getProperty("os.name").toLowerCase().contains("mac os")) {    System.setProperty("javafx.macosx.embedded","true");    try {      Class<?> appCls=Class.forName("com.apple.eawt.Application");      Object osxApp=appCls.getDeclaredMethod("getApplication").invoke(null);      appCls.getDeclaredMethod("setDockIconImage",java.awt.Image.class).invoke(osxApp,SwingFXUtils.fromFXImage(Controls.image("ignite",128),null));    } catch (    Exception ignore) {    }    try {      Class<?> fontFinderCls=Class.forName("com.sun.t2k.MacFontFinder");      Field psNameToPathMap=fontFinderCls.getDeclaredField("psNameToPathMap");      psNameToPathMap.setAccessible(true);      psNameToPathMap.set(null,new HashMap<String,String>());    } catch (    Exception ignore) {    }  }  launch(args);}  }
class C{  public String write(Map<String,String> outputProperties){  StringWriter sw=new StringWriter();  try {    write(sw,outputProperties);  } catch (  TransformerException e) {    throw new RuntimeException(e);  }  return sw.toString();}  }
class C{  private static void maybeCastArgument(Assumptions assumptions,ValueNode[] arguments,int index,JavaType type){  if (type instanceof ResolvedJavaType) {    TypeReference targetType=TypeReference.create(assumptions,(ResolvedJavaType)type);    ValueNode argument=arguments[index];    if (targetType != null && !targetType.getType().isPrimitive() && !argument.getStackKind().isPrimitive()) {      ResolvedJavaType argumentType=StampTool.typeOrNull(argument.stamp());      if (argumentType == null || (argumentType.isAssignableFrom(targetType.getType()) && !argumentType.equals(targetType.getType()))) {        PiNode piNode=new PiNode(argument,StampFactory.object(targetType));        arguments[index]=piNode;      }    }  }}  }
class C{  public static Document clone(Document doc) throws IOException {  Document d;  try {    d=newBuilder().newDocument();  } catch (  ParserConfigurationException e) {    throw new IOException("Cannot clone document");  }  Node n=d.importNode(doc.getDocumentElement(),true);  d.appendChild(n);  return d;}  }
class C{  protected void stopAutoScrolling(){  isAutoScrolling=false;  if (autoscrollTimer != null) {    autoscrollTimer.stop();    autoscrollTimer=null;  }}  }
class C{  public void removeTableBlocks(List<String> segmentToBeRemoved,AbsoluteTableIdentifier absoluteTableIdentifier){  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  if (null == lockObject) {    return;  }  Map<String,Map<String,AbstractIndex>> map=tableSegmentMap.get(absoluteTableIdentifier);  if (null == map) {    return;  }  for (  String segmentId : segmentToBeRemoved) {    map.remove(segmentId);  }}  }
class C{  public static <E>List<E> of(E e1){  List<E> list=new ArrayList<>();  list.add(e1);  return list;}  }
class C{  public <T>Class<? extends T> findClass(String cname,Class<T> expectedType,String... subpackages){  if (subpackages == null || subpackages.length == 0 || subpackages == packages) {    subpackages=packages;    String c=classNameCache.get(cname);    if (c != null) {      try {        return Class.forName(c,true,classLoader).asSubclass(expectedType);      } catch (      ClassNotFoundException e) {        log.error("Unable to load cached class-name :  " + c + " for shortname : "+ cname+ e);      }    }  }  Class<? extends T> clazz=null;  try {    final Matcher m=legacyAnalysisPattern.matcher(cname);    if (m.matches()) {      final String name=m.group(4);      log.trace("Trying to load class from analysis SPI using name='{}'",name);      try {        if (CharFilterFactory.class.isAssignableFrom(expectedType)) {          return clazz=CharFilterFactory.lookupClass(name).asSubclass(expectedType);        } else         if (TokenizerFactory.class.isAssignableFrom(expectedType)) {          return clazz=TokenizerFactory.lookupClass(name).asSubclass(expectedType);        } else         if (TokenFilterFactory.class.isAssignableFrom(expectedType)) {          return clazz=TokenFilterFactory.lookupClass(name).asSubclass(expectedType);        } else {          log.warn("'{}' looks like an analysis factory, but caller requested different class type: {}",cname,expectedType.getName());        }      } catch (      IllegalArgumentException ex) {      }    }    try {      return clazz=Class.forName(cname,true,classLoader).asSubclass(expectedType);    } catch (    ClassNotFoundException e) {      String newName=cname;      if (newName.startsWith(project)) {        newName=cname.substring(project.length() + 1);      }      for (      String subpackage : subpackages) {        try {          String name=base + '.' + subpackage+ newName;          log.trace("Trying class name " + name);          return clazz=Class.forName(name,true,classLoader).asSubclass(expectedType);        } catch (        ClassNotFoundException e1) {        }      }      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error loading class '" + cname + "'",e);    }  }  finally {    if (clazz != null) {      if (clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() && !cname.equals(clazz.getName()) && (subpackages.length == 0 || subpackages == packages)) {        classNameCache.put(cname,clazz.getName());      }      if (clazz.isAnnotationPresent(Deprecated.class)) {        log.warn("Solr loaded a deprecated plugin/analysis class [{}]. Please consult documentation how to replace it accordingly.",cname);      }    }  }}  }
class C{  public void testBug34093() throws Exception {  Connection rewriteConn=null;  rewriteConn=getConnectionWithProps("rewriteBatchedStatements=true");  checkBug34093(rewriteConn);  rewriteConn=getConnectionWithProps("rewriteBatchedStatements=true,useServerPrepStmts=true");  checkBug34093(rewriteConn);}  }
class C{  public JSONArray put(int index,Map value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public void renderMenuString(Appendable writer,Map<String,Object> context,MenuStringRenderer menuStringRenderer) throws IOException {  AbstractModelAction.runSubActions(this.actions,context);  if ("simple".equals(this.type)) {    this.renderSimpleMenuString(writer,context,menuStringRenderer);  } else {    throw new IllegalArgumentException("The type " + this.getType() + " is not supported for menu with name "+ this.getName());  }}  }
class C{  public List<IMessage> deleteBefore(int index,int amount) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteFromRange(Math.max(0,index - amount),index + 1);}  }
class C{  private void heapifyUp(int twopos,double cur,Object val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur <= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public static SelectResults intersection(SelectResults c1,SelectResults c2,ExecutionContext contextOrNull){  QueryObserverHolder.getInstance().invokedQueryUtilsIntersection(c1,c2);  assertCompatible(c1,c2);  if (c1.isEmpty()) {    return c1;  }  if (c2.isEmpty()) {    return c2;  }  if (c1.size() < c2.size()) {    return sizeSortedIntersection(c1,c2,contextOrNull);  } else {    return sizeSortedIntersection(c2,c1,contextOrNull);  }}  }
class C{  public static boolean isElectricItem(ItemStack aStack){  try {    return aStack != null && aStack.getItem() instanceof ic2.api.item.IElectricItem && ((IElectricItem)aStack.getItem()).getTier(aStack) < Integer.MAX_VALUE;  } catch (  Throwable e) {  }  return false;}  }
class C{  @Override public boolean isFile(){  return true;}  }
class C{  @Override public BallNode buildTree() throws Exception {  BallNode root;  m_NumNodes=m_MaxDepth=0;  m_NumLeaves=1;  m_Splitter.setInstances(m_Instances);  m_Splitter.setInstanceList(m_InstList);  m_Splitter.setEuclideanDistanceFunction((EuclideanDistance)m_DistanceFunction);  root=new BallNode(0,m_InstList.length - 1,0);  root.setPivot(BallNode.calcCentroidPivot(m_InstList,m_Instances));  root.setRadius(BallNode.calcRadius(m_InstList,m_Instances,root.getPivot(),m_DistanceFunction));  splitNodes(root,m_MaxDepth + 1,root.m_Radius);  return root;}  }
class C{  public HoltWintersModelBuilder beta(double beta){  this.beta=beta;  return this;}  }
class C{  @Override public boolean isPlaying(){  log("IsPlaying : " + mService.isPlaying());  return mService.isPlaying();}  }
class C{  public static List<Integer> calculateRoundedToScale(List<Float> originalCalculations){  final List<Integer> rounded=new ArrayList<>(Constants.DENSITIES_COUNT - 1);  rounded.add(Dpi.XXXHDPI,calculateRoundedValuesToNearestScaleRatioMultiplication(originalCalculations.get(Dpi.XXXHDPI),DpiBestRatio.RATIO_XXXHDPI));  rounded.add(Dpi.XXHDPI,calculateRoundedValuesToNearestScaleRatioMultiplication(originalCalculations.get(Dpi.XXHDPI),DpiBestRatio.RATIO_XXHDPI));  rounded.add(Dpi.XHDPI,calculateRoundedValuesToNearestScaleRatioMultiplication(originalCalculations.get(Dpi.XHDPI),DpiBestRatio.RATIO_XHDPI));  rounded.add(Dpi.HDPI,calculateRoundedValuesToNearestScaleRatioMultiplication(originalCalculations.get(Dpi.HDPI),DpiBestRatio.RATIO_HDPI));  rounded.add(Dpi.MDPI,calculateRoundedValuesToNearestScaleRatioMultiplication(originalCalculations.get(Dpi.MDPI),DpiBestRatio.RATIO_MDPI));  rounded.add(Dpi.LDPI,calculateRoundedValuesToNearestScaleRatioMultiplication(originalCalculations.get(Dpi.LDPI),DpiBestRatio.RATIO_LDPI));  rounded.add(Dpi.TVDPI,(int)Math.ceil(originalCalculations.get(Dpi.TVDPI)));  return rounded;}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  BayesNetGenerator bng;  bng=new BayesNetGenerator();  bng.setOptions(getGenerator().getOptions());  setGeneratorOption(bng,"M","1");  bng.generateRandomNetwork();  bng.generateInstances();  bng.m_Instances.renameAttribute(0,"class");  bng.m_Instances.setRelationName(getRelationNameToUse());  return bng.m_Instances;}  }
class C{  private void approximateKnnDistances(MkCoPLeafEntry entry,KNNList knnDistances){  StringBuilder msg=LOG.isDebugging() ? new StringBuilder() : null;  if (msg != null) {    msg.append("\nknnDistances ").append(knnDistances);  }  int k_0=0;  for (int i=0; i < settings.kmax; i++) {    double dist=knnDistances.get(i).doubleValue();    if (dist == 0) {      k_0++;    } else {      break;    }  }  double[] log_k=new double[settings.kmax - k_0];  System.arraycopy(this.log_k,k_0,log_k,0,settings.kmax - k_0);  double sum_log_kDist=0;  double sum_log_k_kDist=0;  double[] log_kDist=new double[settings.kmax - k_0];  for (int i=0; i < settings.kmax - k_0; i++) {    double dist=knnDistances.get(i + k_0).doubleValue();    log_kDist[i]=Math.log(dist);    sum_log_kDist+=log_kDist[i];    sum_log_k_kDist+=log_kDist[i] * log_k[i];  }  double sum_log_k=0;  double sum_log_k2=0;  for (int i=0; i < log_k.length; i++) {    sum_log_k+=log_k[i];    sum_log_k2+=(log_k[i] * log_k[i]);  }  if (msg != null) {    msg.append("\nk_0 ").append(k_0);    msg.append("\nk_max ").append(settings.kmax);    msg.append("\nlog_k(").append(log_k.length).append(") ").append(FormatUtil.format(log_k));    msg.append("\nsum_log_k ").append(sum_log_k);    msg.append("\nsum_log_k^2 ").append(sum_log_k2);    msg.append("\nkDists ").append(knnDistances);    msg.append("\nlog_kDist(").append(log_kDist.length).append(") ").append(FormatUtil.format(log_kDist));    msg.append("\nsum_log_kDist ").append(sum_log_kDist);    msg.append("\nsum_log_k_kDist ").append(sum_log_k_kDist);  }  ConvexHull convexHull=new ConvexHull(log_k,log_kDist);  ApproximationLine conservative=approximateUpperHull(convexHull,log_k,log_kDist);  ApproximationLine c2=approximateUpperHullPaper(convexHull,log_k,sum_log_k,sum_log_k2,log_kDist,sum_log_kDist,sum_log_k_kDist);  double err1=ssqerr(k_0,settings.kmax,log_k,log_kDist,conservative.getM(),conservative.getT());  double err2=ssqerr(k_0,settings.kmax,log_k,log_kDist,c2.getM(),c2.getT());  if (msg != null) {    msg.append("err1 ").append(err1);    msg.append("err2 ").append(err2);  }  if (err1 > err2 && err1 - err2 > 0.000000001) {    StringBuilder warning=new StringBuilder();    int u=convexHull.getNumberOfPointsInUpperHull();    int[] upperHull=convexHull.getUpperHull();    warning.append("\nentry ").append(entry.getRoutingObjectID());    warning.append("\nlower Hull ").append(convexHull.getNumberOfPointsInLowerHull()).append(' ').append(FormatUtil.format(convexHull.getLowerHull()));    warning.append("\nupper Hull ").append(convexHull.getNumberOfPointsInUpperHull()).append(' ').append(FormatUtil.format(convexHull.getUpperHull()));    warning.append("\nerr1 ").append(err1);    warning.append("\nerr2 ").append(err2);    warning.append("\nconservative1 ").append(conservative);    warning.append("\nconservative2 ").append(c2);    for (int i=0; i < u; i++) {      warning.append("\nlog_k[").append(upperHull[i]).append("] = ").append(log_k[upperHull[i]]);      warning.append("\nlog_kDist[").append(upperHull[i]).append("] = ").append(log_kDist[upperHull[i]]);    }  }  ApproximationLine progressive=approximateLowerHull(convexHull,log_k,sum_log_k,sum_log_k2,log_kDist,sum_log_kDist,sum_log_k_kDist);  entry.setConservativeKnnDistanceApproximation(conservative);  entry.setProgressiveKnnDistanceApproximation(progressive);  if (msg != null) {    LOG.debugFine(msg.toString());  }}  }
class C{  private Attraction findAttraction(String attractionName){  for (  Map.Entry<String,List<Attraction>> attractionsList : ATTRACTIONS.entrySet()) {    List<Attraction> attractions=attractionsList.getValue();    for (    Attraction attraction : attractions) {      if (attractionName.equals(attraction.name)) {        return attraction;      }    }  }  return null;}  }
class C{  public Add(int playlistId,PlaylistType.Item item){  super();  addParameterToRequest("playlistid",playlistId);  addParameterToRequest("item",item);}  }
class C{  public static int[][] generatePartition(int L){  int partition[][]=new int[L][];  for (int j=0; j < L; j++) {    partition[j]=new int[]{j};  }  return partition;}  }
class C{  public InputSource(String systemId){  setSystemId(systemId);}  }
class C{  public void keyPressed(KeyEvent evt){  int keyCode=evt.getKeyCode();  int modifiers=evt.getModifiers();  if (keyCode == KeyEvent.VK_CONTROL || keyCode == KeyEvent.VK_SHIFT || keyCode == KeyEvent.VK_ALT || keyCode == KeyEvent.VK_META)   return;  if ((modifiers & ~KeyEvent.SHIFT_MASK) != 0 || evt.isActionKey() || keyCode == KeyEvent.VK_BACK_SPACE || keyCode == KeyEvent.VK_DELETE || keyCode == KeyEvent.VK_ENTER || keyCode == KeyEvent.VK_TAB || keyCode == KeyEvent.VK_ESCAPE) {    if (grabAction != null) {      handleGrabAction(evt);      return;    }    KeyStroke keyStroke=KeyStroke.getKeyStroke(keyCode,modifiers);    Object o=currentBindings.get(keyStroke);    if (o == null) {      if (currentBindings != bindings) {        Toolkit.getDefaultToolkit().beep();        repeatCount=0;        repeat=false;        evt.consume();      }      currentBindings=bindings;      return;    } else     if (o instanceof ActionListener) {      currentBindings=bindings;      executeAction(((ActionListener)o),evt.getSource(),null);      evt.consume();      return;    } else     if (o instanceof Hashtable) {      currentBindings=(Hashtable)o;      evt.consume();      return;    }  }}  }
class C{  public void removeSystemConsistencyGroup(String systemUri,String cgName){  if ((systemConsistencyGroups != null) && (systemConsistencyGroups.containsKey(systemUri))) {    StringSet systemCgNames=systemConsistencyGroups.get(systemUri);    systemCgNames.remove(cgName);    if (systemCgNames.isEmpty()) {      systemConsistencyGroups.remove(systemUri);    }  }}  }
class C{  public Response evaluateAndroidForWorkCompatibility(){  if (info.getSdkVersion() >= Build.VERSION_CODES.LOLLIPOP) {    return Response.ANDROID_FOR_WORK_COMPATIBLE;  } else   return Response.ANDROID_FOR_WORK_INCOMPATIBLE;}  }
class C{  private void packAllColumns(){  checkboxColumn.getColumn().pack();  imageColumn.getColumn().pack();  numberColumn.getColumn().pack();  nameColumn.getColumn().pack();  nameColumn.getColumn().setWidth(Math.min(nameColumn.getColumn().getWidth(),WIDTH_COL_NAME));  categoryColumn.getColumn().pack();}  }
class C{  public static boolean cs_cholsol(int order,Dcs A,double[] b){  double x[];  Dcss S;  Dcsn N;  int n;  boolean ok;  if (!Dcs_util.CS_CSC(A) || b == null)   return (false);  n=A.n;  S=Dcs_schol.cs_schol(order,A);  N=Dcs_chol.cs_chol(A,S);  x=new double[n];  ok=(S != null && N != null);  if (ok) {    Dcs_ipvec.cs_ipvec(S.pinv,b,x,n);    Dcs_lsolve.cs_lsolve(N.L,x);    Dcs_ltsolve.cs_ltsolve(N.L,x);    Dcs_pvec.cs_pvec(S.pinv,x,b,n);  }  return (ok);}  }
class C{  private double loglikelihoodNormal(DBIDs objids,Relation<V> relation){  if (objids.isEmpty()) {    return 0;  }  CovarianceMatrix builder=CovarianceMatrix.make(relation,objids);  double[] mean=builder.getMeanVector();  double[][] covarianceMatrix=builder.destroyToSampleMatrix();  double[][] covInv=inverse(covarianceMatrix);  double covarianceDet=new LUDecomposition(covarianceMatrix).det();  double fakt=1.0 / Math.sqrt(MathUtil.powi(MathUtil.TWOPI,RelationUtil.dimensionality(relation)) * covarianceDet);  double prob=0;  for (DBIDIter iter=objids.iter(); iter.valid(); iter.advance()) {    double[] x=minusEquals(relation.get(iter).toArray(),mean);    double mDist=transposeTimesTimes(x,covInv,x);    prob+=Math.log(fakt * Math.exp(-mDist * .5));  }  return prob;}  }
class C{  public static JSONObject toJSONObject(java.util.Properties properties) throws JSONException {  JSONObject jo=new JSONObject();  if (properties != null && !properties.isEmpty()) {    Enumeration<?> enumProperties=properties.propertyNames();    while (enumProperties.hasMoreElements()) {      String name=(String)enumProperties.nextElement();      jo.put(name,properties.getProperty(name));    }  }  return jo;}  }
class C{  @Override public GraphObjectToAdd buildValue(final IScope scope,final Object object){  if (object instanceof NodeToAdd) {    return new NodeToAdd(type.getKeyType().cast(scope,((NodeToAdd)object).object,null,false),((NodeToAdd)object).weight);  }  if (object instanceof EdgeToAdd) {    return new EdgeToAdd(type.getKeyType().cast(scope,((EdgeToAdd)object).source,null,false),type.getKeyType().cast(scope,((EdgeToAdd)object).target,null,false),type.getContentType().cast(scope,((EdgeToAdd)object).object,null,false),((EdgeToAdd)object).weight);  }  return new EdgeToAdd(null,null,type.getContentType().cast(scope,object,null,false),0.0);}  }
class C{  public EmptySprite(final int width,final int height,final Object reference){  this.width=width;  this.height=height;  this.reference=reference;}  }
class C{  public void removeLocalTempTable(Table table){  modificationId++;  localTempTables.remove(table.getName());synchronized (database) {    table.removeChildrenAndResources(this);  }}  }
class C{  public static void openUrlsPrompt(Component parent,List<String> urls){  openUrlsPrompt(parent,urls,false);}  }
class C{  public RequestOutputStream write(final String value) throws IOException {  final ByteBuffer bytes=encoder.encode(CharBuffer.wrap(value));  super.write(bytes.array(),0,bytes.limit());  return this;}  }
class C{  protected void fillAndSort(final int dim){  for (int j=0; j < size; j++) {    E e=get(j);    minSorting[j].first=e.getMin(dim);    minSorting[j].second=j;    maxSorting[j].first=e.getMax(dim);    maxSorting[j].second=j;  }  Arrays.sort(minSorting);  Arrays.sort(maxSorting);}  }
class C{  public static void clearMarkers(String markerID,IProject project) throws CoreException {  project.deleteMarkers(markerID,false,IResource.DEPTH_INFINITE);}  }
class C{  public void openWrite(){  TempBuffer ptr=_head;  _head=null;  _tail=null;  _encoding=null;  TempBuffer.freeAll(ptr);}  }
class C{  void resetChannel(){  reset(channel);  expect(channel.getPipeline()).andReturn(pipeline).anyTimes();  expect(channel.getRemoteAddress()).andReturn(null).anyTimes();}  }
class C{  public Population postBreedingExchangePopulation(final EvolutionState state){  if (frequency == 0)   return state.population;  if (state.generation % frequency != offset)   return state.population;  ExchangerData exData;  int n, s;  int[] replace;  while (mailbox.size() > 0) {synchronized (mailbox) {      exData=(ExchangerData)mailbox.get(0);      mailbox.remove(0);    }    n=exData.individuals.length;    s=exData.subpop;    replace=new int[n];    state.output.message("Immigrating " + n + " individuals from "+ exData.sender.name+ " for subpopulation "+ s);    indsToDieSelectionMethod.prepareToProduce(state,s,0);    for (int i=0; i < n; i++)     replace[i]=indsToDieSelectionMethod.produce(s,state,0);    indsToDieSelectionMethod.finishProducing(state,s,0);    for (int i=0; i < n; i++) {      state.population.subpops[s].individuals[replace[i]]=exData.individuals[i];      state.population.subpops[s].individuals[replace[i]].evaluated=false;    }  }  return state.population;}  }
class C{  private boolean enableConstraints(ArrayList<String> list){  log.info("");  return false;}  }
class C{  protected void desFunc(int[] wKey,byte[] in,int inOff,byte[] out,int outOff){  int work, right, left;  left=(in[inOff + 0] & 0xff) << 24;  left|=(in[inOff + 1] & 0xff) << 16;  left|=(in[inOff + 2] & 0xff) << 8;  left|=(in[inOff + 3] & 0xff);  right=(in[inOff + 4] & 0xff) << 24;  right|=(in[inOff + 5] & 0xff) << 16;  right|=(in[inOff + 6] & 0xff) << 8;  right|=(in[inOff + 7] & 0xff);  work=((left >>> 4) ^ right) & 0x0f0f0f0f;  right^=work;  left^=(work << 4);  work=((left >>> 16) ^ right) & 0x0000ffff;  right^=work;  left^=(work << 16);  work=((right >>> 2) ^ left) & 0x33333333;  left^=work;  right^=(work << 2);  work=((right >>> 8) ^ left) & 0x00ff00ff;  left^=work;  right^=(work << 8);  right=((right << 1) | ((right >>> 31) & 1)) & 0xffffffff;  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=((left << 1) | ((left >>> 31) & 1)) & 0xffffffff;  for (int round=0; round < 8; round++) {    int fval;    work=(right << 28) | (right >>> 4);    work^=wKey[round * 4 + 0];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=right ^ wKey[round * 4 + 1];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    left^=fval;    work=(left << 28) | (left >>> 4);    work^=wKey[round * 4 + 2];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=left ^ wKey[round * 4 + 3];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    right^=fval;  }  right=(right << 31) | (right >>> 1);  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=(left << 31) | (left >>> 1);  work=((left >>> 8) ^ right) & 0x00ff00ff;  right^=work;  left^=(work << 8);  work=((left >>> 2) ^ right) & 0x33333333;  right^=work;  left^=(work << 2);  work=((right >>> 16) ^ left) & 0x0000ffff;  left^=work;  right^=(work << 16);  work=((right >>> 4) ^ left) & 0x0f0f0f0f;  left^=work;  right^=(work << 4);  out[outOff + 0]=(byte)((right >>> 24) & 0xff);  out[outOff + 1]=(byte)((right >>> 16) & 0xff);  out[outOff + 2]=(byte)((right >>> 8) & 0xff);  out[outOff + 3]=(byte)(right & 0xff);  out[outOff + 4]=(byte)((left >>> 24) & 0xff);  out[outOff + 5]=(byte)((left >>> 16) & 0xff);  out[outOff + 6]=(byte)((left >>> 8) & 0xff);  out[outOff + 7]=(byte)(left & 0xff);}  }
class C{  public void itemLogWriteEntry(final DBTransaction transaction,final int itemid,final RPEntity player,final String event,final String param1,final String param2,final String param3,final String param4) throws SQLException {  String playerName=null;  if (player != null) {    playerName=player.getName();  }  final String query="INSERT INTO itemlog (itemid, source, event, " + "param1, param2, param3, param4) VALUES (" + itemid + ", '"+ StringChecker.trimAndEscapeSQLString(playerName,64)+ "', '"+ StringChecker.trimAndEscapeSQLString(event,64)+ "', '"+ StringChecker.trimAndEscapeSQLString(param1,64)+ "', '"+ StringChecker.trimAndEscapeSQLString(param2,64)+ "', '"+ StringChecker.trimAndEscapeSQLString(param3,64)+ "', '"+ StringChecker.trimAndEscapeSQLString(param4,64)+ "');";  transaction.execute(query,null);}  }
class C{  public static String cleanFolderStackingMarkers(String filename){  if (!StringUtils.isEmpty(filename)) {    Matcher m=folderStackingPattern.matcher(filename);    if (m.matches()) {      return m.group(1) + m.group(3);    }  }  return filename;}  }
class C{  public OnTransitionStartEvent(Object source,Transition<?,?> transition){  super(source,transition);}  }
class C{  public void testBitLengthNegative2(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(96,aNumber.bitLength());}  }
class C{  public TargetProcessThread(final long tid,final ThreadState state){  threadState=Preconditions.checkNotNull(state,"IE00823: Invalid state");  threadId=tid;}  }
class C{  public static void main(String[] args){  System.out.println(JFreeChart.INFO.toString());}  }
class C{  public static String urlEncode(String s){  try {    return URLEncoder.encode(s,"UTF-8");  } catch (  Exception e) {    throw DbException.convert(e);  }}  }
class C{  protected void finalize() throws Throwable {  shutdown();}  }
class C{  public void schedule(String jobName,String poolName,String serviceName,String dataId,long startTime,int frequency,int interval,int count,long endTime,int maxRetry) throws JobManagerException {  assertIsRunning();  String infoId=null;  if (frequency > -1 && count != 0) {    try {      RecurrenceInfo info=RecurrenceInfo.makeInfo(delegator,startTime,frequency,interval,count);      infoId=info.primaryKey();    } catch (    RecurrenceInfoException e) {      throw new JobManagerException(e.getMessage(),e);    }  }  if (UtilValidate.isEmpty(jobName)) {    jobName=Long.toString((new Date().getTime()));  }  Map<String,Object> jFields=UtilMisc.<String,Object>toMap("jobName",jobName,"runTime",new java.sql.Timestamp(startTime),"serviceName",serviceName,"statusId","SERVICE_PENDING","recurrenceInfoId",infoId,"runtimeDataId",dataId);  if (UtilValidate.isNotEmpty(poolName)) {    jFields.put("poolId",poolName);  } else {    try {      jFields.put("poolId",ServiceConfigUtil.getServiceEngine().getThreadPool().getSendToPool());    } catch (    GenericConfigException e) {      throw new JobManagerException(e.getMessage(),e);    }  }  jFields.put("loaderName",delegator.getDelegatorName());  jFields.put("maxRetry",Long.valueOf(maxRetry));  jFields.put("currentRetryCount",new Long(0));  GenericValue jobV;  try {    jobV=delegator.makeValue("JobSandbox",jFields);    delegator.createSetNextSeqId(jobV);  } catch (  GenericEntityException e) {    throw new JobManagerException(e.getMessage(),e);  }}  }
class C{  @DSComment("no info leak") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.760 -0500",hash_original_method="6609A304DB40C6FFC8F6AC783F01FDAC",hash_generated_method="ED7C68A509180A9A266A476496F0821D") public synchronized void close() throws IOException {  isClosed=true;  localAddress=Inet4Address.ANY;  impl.close();}  }
class C{  private static String extractClass(String line){  if (Java8OrEarlier) {    String traceClassLoadingPrefix="[Loaded ";    int index=line.indexOf(traceClassLoadingPrefix);    if (index != -1) {      int start=index + traceClassLoadingPrefix.length();      int end=line.indexOf(' ',start);      return line.substring(start,end);    }  } else {    Matcher matcher=CLASS_INIT_LOG_PATTERN.matcher(line);    if (matcher.find()) {      return matcher.group(1).replace('/','.');    }  }  return null;}  }
class C{  private static void incrementCharArray(char[] x,int p){  if (x[p] != 'z') {    x[p]+=1;  } else {    x[p]='a';    incrementCharArray(x,p - 1);  }}  }
class C{  public void test_writeIsolation(){  final Journal journal=getStore();  try {    final String name="abc";    final byte[] k1=new byte[]{1};    final byte[] v1=new byte[]{1};    final byte[] v1a=new byte[]{1,1};{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      assertNotSame(0L,journal.commit());    }    final long tx1=journal.newTx(ITx.UNISOLATED);    final long tx2=journal.newTx(ITx.UNISOLATED);    assertNotSame(tx1,tx2);    assertTrue(Math.abs(tx1) >= journal.getRootBlockView().getLastCommitTime());    assertTrue(Math.abs(tx2) > Math.abs(tx1));{      final IsolatedFusedView ndx1=(IsolatedFusedView)journal.getIndex(name,tx1);      assertFalse(ndx1.contains(k1));      assertNull(ndx1.insert(k1,v1));      assertTrue(ndx1.contains(k1));      assertFalse(journal.getIndex(name,tx2).contains(k1));      assertFalse(journal.getIndex(name).contains(k1));      final Tx localState=journal.getLocalTransactionManager().getTx(tx1);      final long commitTime1=journal.commit(tx1);      assertNotSame(0L,commitTime1);      assertFalse(journal.getIndex(name,tx2).contains(k1));      assertTrue(journal.getIndex(name).contains(k1));{        final BTree btree=((BTree)journal.getIndex(name));        final ITuple<?> tuple=btree.lookup(k1,new Tuple(btree,IRangeQuery.ALL));        assertNotNull(tuple);        assertFalse(tuple.isDeletedVersion());        assertEquals("revisionTime",localState.getRevisionTime(),tuple.getVersionTimestamp());      }      assertNull(journal.getIndex(name,tx2).insert(k1,v1a));{        final IsolatedFusedView isolatedView=(IsolatedFusedView)journal.getIndex(name,tx2);        final BTree btree=((BTree)journal.getIndex(name));        Tuple<?> tuple=btree.lookup(k1,new Tuple(btree,IRangeQuery.ALL));        tuple=isolatedView.getWriteSet().lookup(k1,tuple);        assertNotNull(tuple);        assertFalse(tuple.isDeletedVersion());        assertEquals("versionTimestamp",Math.abs(tx2),tuple.getVersionTimestamp());      }      try {        journal.commit(tx2);        fail("Expecting: " + ValidationError.class);      } catch (      ValidationError ex) {        if (log.isInfoEnabled())         log.info("Ignoring expected exception: " + ex);      }    }  }  finally {    journal.destroy();  }}  }
class C{  @Nullable private static Transferable merge(@NotNull KillRingTransferable newData,@NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException {  if (!oldData.isReadyToCombine() || !newData.isReadyToCombine()) {    return null;  }  Document document=newData.getDocument();  if (document == null || document != oldData.getDocument()) {    return null;  }  Object newDataText=newData.getTransferData(DataFlavor.stringFlavor);  Object oldDataText=oldData.getTransferData(DataFlavor.stringFlavor);  if (newDataText == null || oldDataText == null) {    return null;  }  if (oldData.isCut()) {    if (newData.getStartOffset() == oldData.getStartOffset()) {      return new KillRingTransferable(oldDataText.toString() + newDataText,document,oldData.getStartOffset(),newData.getEndOffset(),newData.isCut());    }  }  if (newData.getStartOffset() == oldData.getEndOffset()) {    return new KillRingTransferable(oldDataText.toString() + newDataText,document,oldData.getStartOffset(),newData.getEndOffset(),false);  }  if (newData.getEndOffset() == oldData.getStartOffset()) {    return new KillRingTransferable(newDataText.toString() + oldDataText,document,newData.getStartOffset(),oldData.getEndOffset(),false);  }  return null;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof DefaultOHLCDataset)) {    return false;  }  DefaultOHLCDataset that=(DefaultOHLCDataset)obj;  if (!this.key.equals(that.key)) {    return false;  }  if (!Arrays.equals(this.data,that.data)) {    return false;  }  return true;}  }
class C{  public static String encode(byte[] bytes){  String retorno="";  if (bytes == null || bytes.length == 0) {    return retorno;  }  for (int i=0; i < bytes.length; i++) {    byte valor=bytes[i];    int d1=valor & 0xF;    d1+=(d1 < 10) ? 48 : 55;    int d2=(valor & 0xF0) >> 4;    d2+=(d2 < 10) ? 48 : 55;    retorno=retorno + (char)d2 + (char)d1;  }  return retorno;}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  public void generate(java.io.Writer out) throws java.io.IOException {  out.write("<" + wrapString);  if (paramString != null) {    out.write(" " + paramString);  }  out.write(">");  e.generate(out);  out.write("</" + wrapString + ">\r\n");}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  public boolean arrowScroll(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump,getHeight())) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);    doScrollY(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {      scrollDelta=getScrollY();    } else     if (direction == View.FOCUS_DOWN) {      if (getChildCount() > 0) {        int daBottom=getChildAt(0).getBottom();        int screenBottom=getScrollY() + getHeight() - getPaddingBottom();        if (daBottom - screenBottom < maxJump) {          scrollDelta=daBottom - screenBottom;        }      }    }    if (scrollDelta == 0) {      return false;    }    doScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  protected boolean allConstraintsMatch(TypeCon con){  return this.constraints.stream().allMatch(null);}  }
class C{  public void suspectMember(DistributedMember member,InternalDistributedMember whoSuspected,String reason){  service.memberSuspect((InternalDistributedMember)member,whoSuspected,reason);}  }
class C{  @Override public void increment(double coord,int val){  int bin=getBinNr(coord);  if (bin < 0) {    if (size - bin > data.length) {      int[] tmpdata=new int[growSize(data.length,size - bin)];      System.arraycopy(data,0,tmpdata,-bin,size);      data=tmpdata;    } else {      System.arraycopy(data,0,data,-bin,size);      Arrays.fill(data,0,-bin,0);    }    data[0]=val;    assert (data.length >= size - bin);    offset-=bin;    size-=bin;  } else   if (bin >= data.length) {    int[] tmpdata=new int[growSize(data.length,bin + 1)];    System.arraycopy(data,0,tmpdata,0,size);    tmpdata[bin]=val;    data=tmpdata;    size=bin + 1;    max=Double.MAX_VALUE;  } else {    if (bin >= size) {      size=bin + 1;    }    data[bin]+=val;  }}  }
class C{  static NodeTextRep appendToNodeText(NodeTextRep nodeRep,String str){  NodeTextRep result=nodeRep.clone();  result.nodeText[result.nodeText.length - 1]=result.nodeText[result.nodeText.length - 1] + str;  return result;}  }
class C{  protected int doOneIteration(WeightVector w,WeightVector avg,SLProblem problem,int epoch,int count) throws Exception {  int numExamples=problem.size();  epochUpdateCount=0;  problem.shuffle(random);  for (int exampleId=0; exampleId < numExamples; exampleId++) {    IInstance example=problem.instanceList.get(exampleId);    IStructure gold=problem.goldStructureList.get(exampleId);    IStructure prediction=null;    boolean shouldUpdate=false;    prediction=this.inference.getLossAugmentedBestStructure(w,example,gold);    shouldUpdate=this.inference.getLoss(example,gold,prediction) > 0;    if (shouldUpdate) {      assert prediction != null;      update(example,gold,prediction,w,avg,epoch,count);      epochUpdateCount++;    }    count++;  }  return count;}  }
class C{  public boolean isDirectory(String file){  return Util.getImplementation().isDirectory(file);}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  boolean oldEncrypting=this.encrypting;  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length != blockSize) {      throw new IllegalArgumentException("initialisation vector must be the same length as block size");    }    System.arraycopy(iv,0,IV,0,iv.length);    reset();    if (ivParam.getParameters() != null) {      cipher.init(encrypting,ivParam.getParameters());    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  } else {    reset();    if (params != null) {      cipher.init(encrypting,params);    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  }}  }
class C{  public boolean guiChanged(RosterEntry r){  if (!r.getRoadName().equals(roadName.getText())) {    return true;  }  if (!r.getRoadNumber().equals(roadNumber.getText())) {    return true;  }  if (!r.getMfg().equals(mfg.getText())) {    return true;  }  if (!r.getOwner().equals(owner.getText())) {    return true;  }  if (!r.getModel().equals(model.getText())) {    return true;  }  if (!r.getComment().equals(comment.getText())) {    return true;  }  if (!r.getDecoderFamily().equals(decoderFamily.getText())) {    return true;  }  if (!r.getDecoderModel().equals(decoderModel.getText())) {    return true;  }  if (!r.getDecoderComment().equals(decoderComment.getText())) {    return true;  }  if (!r.getId().equals(id.getText())) {    return true;  }  if (r.getMaxSpeedPCT() != ((Integer)maxSpeedSpinner.getValue()).intValue()) {    return true;  }  DccLocoAddress a=addrSel.getAddress();  if (a == null) {    if (!r.getDccAddress().equals("")) {      return true;    }  } else {    if (r.getProtocol() != a.getProtocol()) {      return true;    }    if (!r.getDccAddress().equals("" + a.getNumber())) {      return true;    }  }  return false;}  }
class C{  public EqualsBuilder append(final int lhs,final int rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  public void read(InputStream in) throws Exception {  BufferedReader br=null;  try {    br=new BufferedReader(new InputStreamReader(in));    String line=null;    ConfigBlock cb=null;    while ((line=br.readLine()) != null) {      if (line.isEmpty()) {        cb=null;      } else       if (line.startsWith("[CHANGES]")) {        cb=new ConfigBlock();        this.changes.add(cb);      } else       if (line.startsWith("[STARTING]")) {        cb=new ConfigBlock();        this.startingConfig=cb;      } else       if (line.startsWith("[LAST]")) {        cb=new ConfigBlock();        this.lastCheckedConfig=cb;      } else       if (line.startsWith("[") && line.endsWith("]")) {        if (cb != null)         cb.setTime(line.substring(1,line.length() - 1));      } else       if (line.indexOf('=') > 0) {        int idx=line.indexOf('=');        if (idx < line.length() - 1)         cb.addVariable(line.substring(0,idx),line.substring(idx + 1)); else         cb.addVariable(line.substring(0,idx),"");      }    }  }  finally {    if (br != null)     try {      br.close();    } catch (    Exception iex) {    }  }}  }
class C{  public int exportToFile(MPaySelectionCheck[] checks,File file,StringBuffer err){  if (checks == null || checks.length == 0)   return 0;  if (file.isDirectory()) {    err.append("No se puede escribir, el archivo seleccionado es un directorio - " + file.getAbsolutePath());    s_log.log(Level.SEVERE,err.toString());    return -1;  }  try {    if (file.exists())     file.delete();  } catch (  Exception e) {    s_log.log(Level.WARNING,"Could not delete - " + file.getAbsolutePath(),e);  }  char x='"';  int noLines=0;  StringBuffer line=null;  try {    FileWriter fw=new FileWriter(file);    line=new StringBuffer();    line.append(x).append("Value").append(x).append(",").append(x).append("Name").append(x).append(",").append(x).append("Contact").append(x).append(",").append(x).append("Addr1").append(x).append(",").append(x).append("Addr2").append(x).append(",").append(x).append("City").append(x).append(",").append(x).append("State").append(x).append(",").append(x).append("ZIP").append(x).append(",").append(x).append("Country").append(x).append(",").append(x).append("ReferenceNo").append(x).append(",").append(x).append("DocumentNo").append(x).append(",").append(x).append("PayDate").append(x).append(",").append(x).append("Currency").append(x).append(",").append(x).append("PayAmount").append(x).append(",").append(x).append("Comment").append(x).append(Env.NL);    fw.write(line.toString());    noLines++;    for (int i=0; i < checks.length; i++) {      MPaySelectionCheck mpp=checks[i];      if (mpp == null)       continue;      String bp[]=getBPartnerInfo(mpp.getC_BPartner_ID());      StringBuffer comment=new StringBuffer();      MPaySelectionLine[] psls=mpp.getPaySelectionLines(false);      for (int l=0; l < psls.length; l++) {        if (l > 0)         comment.append(", ");        comment.append(psls[l].getInvoice().getDocumentNo());      }      line=new StringBuffer();      line.append(x).append(bp[BP_VALUE]).append(x).append(",").append(x).append(bp[BP_NAME]).append(x).append(",").append(x).append(bp[BP_CONTACT]).append(x).append(",").append(x).append(bp[BP_ADDR1]).append(x).append(",").append(x).append(bp[BP_ADDR2]).append(x).append(",").append(x).append(bp[BP_CITY]).append(x).append(",").append(x).append(bp[BP_REGION]).append(x).append(",").append(x).append(bp[BP_POSTAL]).append(x).append(",").append(x).append(bp[BP_COUNTRY]).append(x).append(",").append(x).append(bp[BP_REFNO]).append(x).append(",").append(x).append(mpp.getDocumentNo()).append(x).append(",").append(mpp.getParent().getPayDate()).append(",").append(x).append(MCurrency.getISO_Code(Env.getCtx(),mpp.getParent().getC_Currency_ID())).append(x).append(",").append(mpp.getPayAmt()).append(",").append(x).append(comment.toString()).append(x).append(Env.NL);      fw.write(line.toString());      noLines++;    }    fw.flush();    fw.close();  } catch (  Exception e) {    err.append(e.toString());    s_log.log(Level.SEVERE,"",e);    return -1;  }  return noLines;}  }
class C{  public T caseAnonymous_strictness_1_(Anonymous_strictness_1_ object){  return null;}  }
class C{  private static void registerKeyForClient(DistributedMember clientId,Object key){  try {    ClientSession cs=server.getClientSession(clientId);    if (cs.isPrimary()) {      cs.registerInterest(Region.SEPARATOR + REGION_NAME,key,InterestResultPolicy.KEYS_VALUES,false);    }  } catch (  Exception ex) {    Assert.fail("failed while registering key(" + key + ")",ex);  }}  }
class C{  public boolean isAvailable(){  if (!isAvailableTestClass()) {    return false;  }  try {    Log log=createLogFromClassName(getClass().getName());    log.isLevelEnabled(Level.INFO);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static void copyGeo(GeoTimeSerie from,GeoTimeSerie to){  GTSHelper.sort(from,false);  GTSHelper.sort(to,false);  int fromidx=0;  int toidx=0;  while (toidx < to.values && fromidx < from.values) {    long fromtick=GTSHelper.tickAtIndex(from,fromidx);    long totick=GTSHelper.tickAtIndex(to,toidx);    while (fromidx < from.values && fromtick < totick) {      fromidx++;      fromtick=GTSHelper.tickAtIndex(from,fromidx);    }    if (fromidx >= from.values) {      break;    }    while (toidx < to.values && totick < fromtick) {      toidx++;      totick=GTSHelper.tickAtIndex(to,toidx);    }    if (toidx >= to.values) {      break;    }    if (totick == fromtick) {      long location=GTSHelper.locationAtIndex(from,fromidx);      long elevation=GTSHelper.elevationAtIndex(from,fromidx);      GTSHelper.setLocationAtIndex(to,toidx,location);      GTSHelper.setElevationAtIndex(to,toidx,elevation);      fromidx++;    }  }}  }
class C{  protected DeserializableList(final int initialCapacity){  this(initialCapacity,DEFAULT_LABEL);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS01.class,args);}  }
class C{  public StringConverter(){  super();}  }
class C{  public void printEnumBody(List<JCTree> stats) throws IOException {  print("{");  println();  indent();  boolean first=true;  for (List<JCTree> l=stats; l.nonEmpty(); l=l.tail) {    if (isEnumerator(l.head)) {      if (!first) {        print(",");        println();      }      align();      printStat(l.head);      first=false;    }  }  print(";");  println();  int x=0;  for (List<JCTree> l=stats; l.nonEmpty(); l=l.tail) {    x++;    if (!isEnumerator(l.head)) {      if (!suppressAlignmentForEmptyLines(l.head))       align();      printStat(l.head);      println();    }  }  undent();  align();  print("}");}  }
class C{  private void initCropWindow(Rect bitmapRect){  if (initializedCropWindow == false)   initializedCropWindow=true;  if (mFixAspectRatio) {    if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > mTargetAspectRatio) {      Edge.TOP.setCoordinate(bitmapRect.top);      Edge.BOTTOM.setCoordinate(bitmapRect.bottom);      final float centerX=getWidth() / 2f;      final float cropWidth=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),Edge.BOTTOM.getCoordinate(),mTargetAspectRatio));      if (cropWidth == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.MIN_CROP_LENGTH_PX) / (Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate());      final float halfCropWidth=cropWidth / 2f;      Edge.LEFT.setCoordinate(centerX - halfCropWidth);      Edge.RIGHT.setCoordinate(centerX + halfCropWidth);    } else {      Edge.LEFT.setCoordinate(bitmapRect.left);      Edge.RIGHT.setCoordinate(bitmapRect.right);      final float centerY=getHeight() / 2f;      final float cropHeight=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateHeight(Edge.LEFT.getCoordinate(),Edge.RIGHT.getCoordinate(),mTargetAspectRatio));      if (cropHeight == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate()) / Edge.MIN_CROP_LENGTH_PX;      final float halfCropHeight=cropHeight / 2f;      Edge.TOP.setCoordinate(centerY - halfCropHeight);      Edge.BOTTOM.setCoordinate(centerY + halfCropHeight);    }  } else {    final float horizontalPadding=0.1f * bitmapRect.width();    final float verticalPadding=0.1f * bitmapRect.height();    Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);    Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);    Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);    Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);  }}  }
class C{  private boolean isEmpty(){  return mPath.getCurrentPoint() == null;}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  @Override public int executeUpdate(String sql) throws SQLException {  try {    debugCodeCall("executeUpdate",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_FIELD_ACCESSOR__BODY:    setBody((Block)newValue);  return;case N4JSPackage.N4_FIELD_ACCESSOR__LOK:set_lok((LocalArgumentsVariable)newValue);return;case N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  Map<Integer,Class<?>> defaultSerializers(){  return reader.getMap(DEFAULT_SERIALIZERS,null,null);}  }
class C{  protected final void emitBackEnd(){  emitLIR();  emitCode();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void persistConnection(Connection connection) throws PersistenceException {  MqttConnectOptions conOpts=connection.getConnectionOptions();  MqttMessage lastWill=conOpts.getWillMessage();  SQLiteDatabase db=getWritableDatabase();  ContentValues values=new ContentValues();  values.put(COLUMN_HOST,connection.getHostName());  values.put(COLUMN_port,connection.getPort());  values.put(COLUMN_client_ID,connection.getId());  values.put(COLUMN_ssl,connection.isSSL());  values.put(COLUMN_KEEP_ALIVE,conOpts.getKeepAliveInterval());  values.put(COLUMN_TIME_OUT,conOpts.getConnectionTimeout());  values.put(COLUMN_USER_NAME,conOpts.getUserName());  values.put(COLUMN_TOPIC,conOpts.getWillDestination());  char[] password=conOpts.getPassword();  values.put(COLUMN_CLEAN_SESSION,conOpts.isCleanSession() ? 1 : 0);  values.put(COLUMN_PASSWORD,password != null ? String.valueOf(password) : null);  values.put(COLUMN_MESSAGE,lastWill != null ? new String(lastWill.getPayload()) : null);  values.put(COLUMN_QOS,lastWill != null ? lastWill.getQos() : 0);  if (lastWill == null) {    values.put(COLUMN_RETAINED,0);  } else {    values.put(COLUMN_RETAINED,lastWill.isRetained() ? 1 : 0);  }  long newRowId=db.insert(TABLE_CONNECTIONS,null,values);  db.close();  if (newRowId == -1) {    throw new PersistenceException("Failed to persist connection: " + connection.handle());  } else {    connection.assignPersistenceId(newRowId);  }}  }
class C{  private List<String> listToLowerCase(List<String> l){  List<String> result=new ArrayList<String>();  for (  String s : l) {    result.add(s.toLowerCase());  }  return result;}  }
class C{  public boolean updatePackage(String x_app_id,String content_type,String package_name,String class_name,int app_type,boolean need_signature,boolean further_processing){  if (!appTypeCheck(app_type)) {    Log.w(LOG_TAG,"invalid app_type " + app_type + ". app_type must be "+ WapPushManagerParams.APP_TYPE_ACTIVITY+ " or "+ WapPushManagerParams.APP_TYPE_SERVICE);    return false;  }  WapPushManDBHelper dbh=getDatabase(mContext);  SQLiteDatabase db=dbh.getWritableDatabase();  WapPushManDBHelper.queryData lastapp=dbh.queryLastApp(db,x_app_id,content_type);  if (lastapp == null) {    db.close();    return false;  }  ContentValues values=new ContentValues();  String where="x_wap_application=\'" + x_app_id + "\'"+ " and content_type=\'"+ content_type+ "\'"+ " and install_order="+ lastapp.installOrder;  values.put("package_name",package_name);  values.put("class_name",class_name);  values.put("app_type",app_type);  values.put("need_signature",need_signature ? 1 : 0);  values.put("further_processing",further_processing ? 1 : 0);  int num=db.update(APPID_TABLE_NAME,values,where,null);  if (LOCAL_LOGV)   Log.v(LOG_TAG,"update:" + x_app_id + ":"+ content_type+ " "+ package_name+ "."+ class_name+ ", sq:"+ lastapp.installOrder);  db.close();  return num > 0;}  }
class C{  public void addLabel(String value){  addTextAttribute(LABEL_ATTRIBUTE,value);}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  protected boolean recursivelyFindSelectedItems(UUID itemId){  boolean passesFilter=passesFilter(itemId);  for (  UUID childId : getChildren(itemId)) {    passesFilter|=recursivelyFindSelectedItems(childId);  }  if (passesFilter) {    filteredItemsIds.add(itemId);  }  return passesFilter;}  }
class C{  public NotificationChain basicSetTypeRef(TypeRef newTypeRef,NotificationChain msgs){  TypeRef oldTypeRef=typeRef;  typeRef=newTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF,oldTypeRef,newTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 72 + 12,"Steal Session"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 96 + 12,"How to Use"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 120 + 12,"Cancel"));  tokenBox=new GuiTextField(1,fontRendererObj,width / 2 - 100,60,200,20);  tokenBox.setMaxStringLength(65);  tokenBox.setFocused(true);  WurstClient.INSTANCE.analytics.trackPageView("/session-stealer","Session Stealer");}  }
class C{  public void actionPerformed(ActionEvent e){  log.config("Action=" + e.getActionCommand());  if (m_actionActive)   return;  m_actionActive=true;  log.config("Action=" + e.getActionCommand());  if (e.getSource().equals(orderField)) {    KeyNamePair pp=(KeyNamePair)orderField.getSelectedItem();    int C_Order_ID=0;    if (pp != null)     C_Order_ID=pp.getKey();    rmaField.setSelectedIndex(-1);    shipmentField.setSelectedIndex(-1);    loadOrder(C_Order_ID,true);  } else   if (e.getSource().equals(shipmentField)) {    KeyNamePair pp=(KeyNamePair)shipmentField.getSelectedItem();    int M_InOut_ID=0;    if (pp != null)     M_InOut_ID=pp.getKey();    orderField.setSelectedIndex(-1);    rmaField.setSelectedIndex(-1);    loadShipment(M_InOut_ID);  } else   if (e.getSource().equals(rmaField)) {    KeyNamePair pp=(KeyNamePair)rmaField.getSelectedItem();    int M_RMA_ID=0;    if (pp != null)     M_RMA_ID=pp.getKey();    orderField.setSelectedIndex(-1);    shipmentField.setSelectedIndex(-1);    loadRMA(M_RMA_ID);  }  m_actionActive=false;}  }
class C{  public String deassignUser() throws OperationPendingException {  String subscriptionId=model.getSubscription().getSubscriptionId();  try {    if (subscriptionsHelper.validateSubscriptionStatus(model.getSubscription(),getSubscriptionDetailsService())) {      ui.handleError(null,ERROR_SUBSCRIPTION_NOT_ACCESSIBLE,model.getSubscription().getSubscriptionId());      return OUTCOME_SUBSCRIPTION_NOT_AVAILABLE;    }    if (model.getUserToDeassign() != null) {      List<VOUsageLicense> usersToBeAdded=new ArrayList<>();      List<VOUser> usersToBeRevoked=new ArrayList<>();      usersToBeRevoked.add(model.getUserToDeassign());      boolean rc=getSubscriptionService().addRevokeUser(subscriptionId,usersToBeAdded,usersToBeRevoked);      if (rc) {        ui.handle(INFO_SUBSCRIPTION_USER_DEASSIGNED,subscriptionId);      } else {        ui.handleProgress();      }      model.setInitialized(false);    }  } catch (  ConcurrentModificationException e) {    ExceptionHandler.execute(e);    return OUTCOME_MODIFICATION_ERROR;  }catch (  ObjectNotFoundException e) {    ExceptionHandler.execute(new ConcurrentModificationException());    return OUTCOME_MODIFICATION_ERROR;  }catch (  SaaSApplicationException e) {    ExceptionHandler.execute(e);  }  menuBean.resetMenuVisibility();  return OUTCOME_DEASSIGNED_USER_OR_ERROR;}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("line iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=line.getX1();    coords[1]=line.getY1();    type=SEG_MOVETO;  } else {    coords[0]=line.getX2();    coords[1]=line.getY2();    type=SEG_LINETO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return type;}  }
class C{  public boolean isModifiable(){  return this.modifiable;}  }
class C{  public AuthScope(final String host,int port,final String realm,final String scheme){  this.host=(host == null) ? ANY_HOST : host.toLowerCase(Locale.ENGLISH);  this.port=(port < 0) ? ANY_PORT : port;  this.realm=(realm == null) ? ANY_REALM : realm;  this.scheme=(scheme == null) ? ANY_SCHEME : scheme.toUpperCase(Locale.ENGLISH);}  }
class C{  public void addKeyComponent(boolean value){  if (shift < Long.SIZE) {    key1+=(value ? 1L : 0L) << shift;  } else {    key2+=(value ? 1L : 0L) << (shift - Long.SIZE);  }  shift++;}  }
class C{  @Pure public int parseForArrayDimensionality(){  if (VM.VerifyAssertions) {    VM._assert(val.length > 1,"An array descriptor has at least two characters");    VM._assert(val[0] == '[',"An array descriptor must start with '['");  }  for (int i=0; ; ++i) {    if (VM.VerifyAssertions) {      VM._assert(i < val.length,"Malformed array descriptor: it can't just have [ characters");    }    if (val[i] != '[') {      return i;    }  }}  }
class C{  public ScreenInfoAction(TerminalPosition position){  super(KeyType.CursorLocation);  this.position=position;}  }
class C{  public static void pauseEventStream(Context context){  Log.d(LOG_TAG,"pauseEventStream");  sendEventStreamAction(context,EventStreamService.StreamAction.PAUSE);}  }
class C{  public boolean springBackY(int start,int min,int max){  mScrollerY.mMode=FLING_MODE;  return mScrollerY.springback(start,min,max);}  }
class C{  public boolean isActive(){  return getValueAsBoolean("IsActive");}  }
class C{  private static void transformEquation(DataSet data,String eq) throws ParseException {  ExpressionParser parser=new ExpressionParser(data.getVariableNames(),ExpressionParser.RestrictionType.MAY_ONLY_CONTAIN);  Equation equation=parser.parseEquation(eq);  addVariableIfRequired(data,equation.getVariable());  Expression expression=equation.getExpression();  Node variable=data.getVariable(equation.getVariable());  if (variable == null) {    throw new IllegalStateException("Unknown variable " + equation.getVariable());  }  int column=data.getColumn(variable);  List<String> contextVars=getContextVariables(expression);  DataBackedContext context=new DataBackedContext(data,contextVars);  int rows=data.getNumRows();  for (int row=0; row < rows; row++) {    context.setRow(row);    double newValue=expression.evaluate(context);    data.setDouble(row,column,newValue);  }}  }
class C{  protected boolean add(Session session){  String channelId=getChannelId(session);  Collection<Session> sessions=socketSessions.get(channelId);  if (sessions != null && sessions.add(session)) {    Serializable user=socketUsers.getUser(getChannel(session),channelId);    if (user != null) {      session.getUserProperties().put("user",user);    }    fireEvent(session,null,SESSION_OPENED);    return true;  }  return false;}  }
class C{  Segment(CacheLIRS<K,V> cache,long maxMemory,int stackMoveDistance,int len){  this.cache=cache;  setMaxMemory(maxMemory);  this.stackMoveDistance=stackMoveDistance;  mask=len - 1;  stack=new Entry<K,V>();  stack.stackPrev=stack.stackNext=stack;  queue=new Entry<K,V>();  queue.queuePrev=queue.queueNext=queue;  queue2=new Entry<K,V>();  queue2.queuePrev=queue2.queueNext=queue2;  @SuppressWarnings("unchecked") Entry<K,V>[] e=new Entry[len];  entries=e;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  @Override public void pause(boolean toPause){  paused=toPause;}  }
class C{  public static Map asMap(String json) throws JsonParseException {  return JsonUtils.asMap(json);}  }
class C{  private Object checkInstanceLocation(final Shell shell,final Map<?,?> applicationArguments){  final Location instanceLoc=Platform.getInstanceLocation();  if (instanceLoc == null) {    openError(shell,IDEApplication_workspaceMandatoryTitle,IDEApplication_workspaceMandatoryMessage);    return EXIT_OK;  }  if (instanceLoc.isSet()) {    if (!checkValidWorkspace(shell,instanceLoc.getURL())) {      return EXIT_OK;    }    try {      if (instanceLoc.lock()) {        writeWorkspaceVersion();        return null;      }      final File workspaceDirectory=new File(instanceLoc.getURL().getFile());      if (workspaceDirectory.exists()) {        if (isDevLaunchMode(applicationArguments)) {          return EXIT_WORKSPACE_LOCKED;        }        openError(shell,IDEApplication_workspaceCannotLockTitle,NLS.bind(IDEApplication_workspaceCannotLockMessage,workspaceDirectory.getAbsolutePath()));      } else {        openError(shell,IDEApplication_workspaceCannotBeSetTitle,IDEApplication_workspaceCannotBeSetMessage);      }    } catch (    final IOException e) {      N4ProductActivator.log("Could not obtain lock for workspace location",e);      openError(shell,InternalError,e.getMessage());    }    return EXIT_OK;  }  final ChooseWorkspaceData launchData=new ChooseWorkspaceData(instanceLoc.getDefault());  boolean force=false;  while (true) {    final URL workspaceUrl=promptForWorkspace(shell,launchData,force);    if (workspaceUrl == null) {      return EXIT_OK;    }    force=true;    try {      if (instanceLoc.set(workspaceUrl,true)) {        launchData.writePersistedData();        writeWorkspaceVersion();        return null;      }    } catch (    final IllegalStateException e) {      MessageDialog.openError(shell,IDEApplication_workspaceCannotBeSetTitle,IDEApplication_workspaceCannotBeSetMessage);      return EXIT_OK;    }catch (    final IOException e) {      MessageDialog.openError(shell,IDEApplication_workspaceCannotBeSetTitle,IDEApplication_workspaceCannotBeSetMessage);    }    openError(shell,IDEApplication_workspaceInUseTitle,NLS.bind(IDEApplication_workspaceInUseMessage,workspaceUrl.getFile()));  }}  }
class C{  public NotificationChain basicSetAnnotationList(AnnotationList newAnnotationList,NotificationChain msgs){  AnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSets the attribute index\n" + "\t(default last).","C",1,"-C <col>"));  result.addElement(new Option("\tComma-separated list of labels to add.\n" + "\t(default: none)","L",1,"-L <label1,label2,...>"));  result.addElement(new Option("\tTurns on the sorting of the labels.","S",0,"-S"));  return result.elements();}  }
class C{  public String createSnapshot(String volumeId,String snapshotName) throws Exception {  _log.info("CinderApi - start createSnapshot");  Gson gson=new Gson();  VolumeShowResponse volumeDetails=showVolume(volumeId);  String volumeName=volumeDetails.volume.name;  SnapshotCreateRequest request=new SnapshotCreateRequest();  request.snapshot.name=snapshotName;  request.snapshot.description="Snapshot of volume " + volumeName;  request.snapshot.volume_id=volumeId;  request.snapshot.force=true;  String snapshotCreateUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_CREATE_SNAPSHOT,endPoint.getCinderTenantId());  _log.debug("Creating snapshot with uri : {}",snapshotCreateUri);  String json=gson.toJson(request);  _log.debug("Creating snapshot with body : {}",json);  ClientResponse js_response=getClient().postWithHeader(URI.create(snapshotCreateUri),json);  String s=js_response.getEntity(String.class);  _log.debug("Got the response {}",s);  _log.debug("Response status {}",String.valueOf(js_response.getStatus()));  String snapshotId="";  if (js_response.getStatus() == ClientResponse.Status.ACCEPTED.getStatusCode()) {    SnapshotCreateResponse response=gson.fromJson(SecurityUtils.sanitizeJsonString(s),SnapshotCreateResponse.class);    snapshotId=response.snapshot.id;  } else {    throw CinderException.exceptions.snapshotCreationFailed(s);  }  return snapshotId;}  }
class C{  public static void grantSubscription(String jid,XMPPConnection connection){  Presence presence=new Presence(Presence.Type.subscribed);  sendPresenceTo(jid,presence,connection);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.830 -0500",hash_original_method="B126004260D8EBAD1640E464F002A4A4",hash_generated_method="B126004260D8EBAD1640E464F002A4A4") Entry<E,K,V> createEntry(int hashCode,E key1,K key2,V value,Entry<E,K,V> next){  return new Entry<E,K,V>(hashCode,key1,key2,value,next);}  }
class C{  private void releaseUpgradeLock(String svcId){  if (backCompatPreYoda) {    log.info("Pre-yoda back compatible flag detected. Check upgrade lock from the global area");    String oldSvcId=coordinator.getMySvcId();    try {      DistributedPersistentLock lock=coordinator.getCoordinatorClient().getPersistentLock(DISTRIBUTED_UPGRADE_LOCK);      if (lock != null) {        String lockOwner=lock.getLockOwner();        if (lockOwner == null) {          log.info("Upgrade lock is not held by any node");          return;        }        if (!lockOwner.equals(oldSvcId)) {          log.error("Lock owner is {}",lockOwner);        } else {          boolean result=lock.releaseLock(lockOwner);          if (result) {            log.info("Upgrade lock released by owner {} successfully",lockOwner);          } else {            log.info("Upgrade lock release failed for owner {}",lockOwner);          }        }      }    } catch (    Exception e) {      log.error("Failed to release the upgrade lock:",e);    }  } else {    releaseRebootLock(svcId);  }}  }
class C{  Column(JComponent container,GridBagConstraints c){  this.container=container;  this.c=c;  c.gridy=0;  c.gridx++;  c.fill=GridBagConstraints.BOTH;}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FEED_SOURCE'";  db.execSQL(sql);}  }
class C{  public KeyBuilder(){  this(DEFAULT_INITIAL_CAPACITY);}  }
class C{  public static void append(String fileName,String line) throws IOException {  append(fileName,line,new StringTransformer<String>());}  }
class C{  public final int size(){  return (m_lastChunk << m_chunkBits) + m_firstFree;}  }
class C{  private static void parseTrun(Track track,DefaultSampleValues defaultSampleValues,long decodeTime,int workaroundFlags,ParsableByteArray trun,TrackFragment out){  trun.setPosition(Atom.HEADER_SIZE);  int fullAtom=trun.readInt();  int flags=Atom.parseFullAtomFlags(fullAtom);  int sampleCount=trun.readUnsignedIntToInt();  if ((flags & 0x01) != 0) {    trun.skipBytes(4);  }  boolean firstSampleFlagsPresent=(flags & 0x04) != 0;  int firstSampleFlags=defaultSampleValues.flags;  if (firstSampleFlagsPresent) {    firstSampleFlags=trun.readUnsignedIntToInt();  }  boolean sampleDurationsPresent=(flags & 0x100) != 0;  boolean sampleSizesPresent=(flags & 0x200) != 0;  boolean sampleFlagsPresent=(flags & 0x400) != 0;  boolean sampleCompositionTimeOffsetsPresent=(flags & 0x800) != 0;  out.initTables(sampleCount);  int[] sampleSizeTable=out.sampleSizeTable;  int[] sampleCompositionTimeOffsetTable=out.sampleCompositionTimeOffsetTable;  long[] sampleDecodingTimeTable=out.sampleDecodingTimeTable;  boolean[] sampleIsSyncFrameTable=out.sampleIsSyncFrameTable;  long timescale=track.timescale;  long cumulativeTime=decodeTime;  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == Track.TYPE_vide && ((workaroundFlags & WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) == WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME);  for (int i=0; i < sampleCount; i++) {    int sampleDuration=sampleDurationsPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.duration;    int sampleSize=sampleSizesPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.size;    int sampleFlags=(i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : sampleFlagsPresent ? trun.readInt() : defaultSampleValues.flags;    if (sampleCompositionTimeOffsetsPresent) {      int sampleOffset=trun.readInt();      sampleCompositionTimeOffsetTable[i]=(int)((sampleOffset * 1000) / timescale);    } else {      sampleCompositionTimeOffsetTable[i]=0;    }    sampleDecodingTimeTable[i]=(cumulativeTime * 1000) / timescale;    sampleSizeTable[i]=sampleSize;    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);    cumulativeTime+=sampleDuration;  }}  }
class C{  private void dragShift(double y){  double height=this.inputType.getHeight();  this.anchor.setLayoutY(y);  this.anchor.setOpacity(1 - (y / (height)));  this.anchor.setVisible(y < height);  this.curryArrow.setManaged(y > height || Iterables.getLast(FunApplyBlock.this.inputs) != this);  this.curryArrow.setVisible(y > height);  FunApplyBlock.this.dragShiftOuput(y - height);}  }
class C{  @Deprecated public void testTimestampNPE() throws Exception {  try {    Timestamp ts=new Timestamp(System.currentTimeMillis());    this.stmt.executeUpdate("DROP TABLE IF EXISTS testTimestampNPE");    this.stmt.executeUpdate("CREATE TABLE testTimestampNPE (field1 TIMESTAMP)");    this.pstmt=this.conn.prepareStatement("INSERT INTO testTimestampNPE VALUES (?)");    this.pstmt.setTimestamp(1,ts);    this.pstmt.executeUpdate();    this.pstmt=this.conn.prepareStatement("SELECT field1 FROM testTimestampNPE");    this.rs=this.pstmt.executeQuery();    this.rs.next();    System.out.println(this.rs.getString(1));    this.rs.getDate(1);    Timestamp rTs=this.rs.getTimestamp(1);    assertTrue("Retrieved year of " + rTs.getYear() + " does not match "+ ts.getYear(),rTs.getYear() == ts.getYear());    assertTrue("Retrieved month of " + rTs.getMonth() + " does not match "+ ts.getMonth(),rTs.getMonth() == ts.getMonth());    assertTrue("Retrieved date of " + rTs.getDate() + " does not match "+ ts.getDate(),rTs.getDate() == ts.getDate());    this.stmt.executeUpdate("DROP TABLE IF EXISTS testTimestampNPE");  }  finally {  }}  }
class C{  public static Ordering asc(String propertyName,NullOrdering nullOrdering){  return new Ordering(propertyName,Order.ASCENDING,nullOrdering);}  }
class C{  public void downloadImage(View view){  try {    UiUtils.hideKeyboard(this,mUrlEditText.getWindowToken());    startDownloadImageActivity(getUrl());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public DefaultMapEntry(final Map.Entry<K,V> entry){  super(entry.getKey(),entry.getValue());}  }
class C{  public void onCancelOrder(TradeOrder tradeOrder) throws BrokerModelException {  if (m_client.isConnected()) {    if (null != tradeOrder.getOrderKey()) {      m_client.cancelOrder(tradeOrder.getOrderKey());    }  } else {    throw new BrokerModelException(tradeOrder.getOrderKey(),3140,"Not conected to TWS order cannot be placed");  }}  }
class C{  private boolean pythonErrorIn(String output){  boolean isError=false;  String[] outputMultiline=output.split("\n");  Matcher errorMatcher;  for (  String row : outputMultiline) {    errorMatcher=errorInLastLine.matcher(row);    if (errorMatcher.find() == true) {      isError=true;      break;    }  }  return isError;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public boolean isDirectInteraction(long resultNode){  return !leftNodeEdgeSet.isEmpty() && leftNodeEdgeSet.contains(resultNode);}  }
class C{  public Matrix4x3d m22(double m22){  this.m22=m22;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  @SuppressWarnings("unchecked") protected void notifyTrainingSetProduced(TrainingSetEvent tse){  Vector<TrainingSetListener> l;synchronized (this) {    l=(Vector<TrainingSetListener>)m_listeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      if (m_receivedStopNotification) {        if (m_logger != null) {          m_logger.logMessage("T[rainingSetMaker] " + statusMessagePrefix() + " stopping.");          m_logger.statusMessage(statusMessagePrefix() + "INTERRUPTED");        }        m_receivedStopNotification=false;        break;      }      System.err.println("Notifying listeners (training set maker)");      l.elementAt(i).acceptTrainingSet(tse);    }  }}  }
class C{  public void tickStop(){  if (mTimer != null) {    mTimer.cancel();    mTimer=null;  }}  }
class C{  public static int measureIndentLength(CharSequence line,int tabSize){  return IndentManipulation.measureIndentInSpaces(line,tabSize);}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitExtensionElement(this);}  }
class C{  public boolean retainEntries(TLongLongProcedure procedure){  boolean modified=false;  byte[] states=_states;  long[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public void add(final String name,final List<BusinessKeyField> businessFields){  cache.add(name,businessFields);}  }
class C{  public EMail createEMail(MUser from,String to,String subject,String message){  return createEMail(from,to,subject,message,false);}  }
class C{  public DccAddressPanel(VariableTableModel mod){  this(mod,ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("TextDccAddress"));}  }
class C{  public boolean addIlluminatedPosition(Coords c){  boolean rv=illuminatedPositions.add(c);  processGameEvent(new GameBoardChangeEvent(this));  return rv;}  }
class C{  public void addFilterCriteria(final FilterCriteria<T> filterCriteria){  allFilterCriteria.add(filterCriteria);}  }
class C{  public static String toTimeString(Context context,long timeMillis){  return DateUtils.formatDateTime(context,timeMillis,DateUtils.FORMAT_SHOW_TIME);}  }
class C{  public static List<Object[]> fetchSqlQueryRows(VisorQueryCursor<List<?>> cur,int pageSize){  List<Object[]> rows=new ArrayList<>();  int cnt=0;  while (cur.hasNext() && cnt < pageSize) {    List<?> next=cur.next();    int sz=next.size();    Object[] row=new Object[sz];    for (int i=0; i < sz; i++) {      Object o=next.get(i);      if (o == null)       row[i]=null; else       if (isKnownType(o))       row[i]=o; else       row[i]=o.getClass().isArray() ? "binary" : o.toString();    }    rows.add(row);    cnt++;  }  return rows;}  }
class C{  public void deleteButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)_memo.getTrafficController().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (javax.swing.JOptionPane.OK_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,rb.getString("ConfirmDelete1") + "\n" + rb.getString("ConfirmDelete2"),rb.getString("ConfirmDeleteTitle"),javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {    _memo.getTrafficController().deleteNode(nodeAddress);    resetNotes();    statusText1.setText(rb.getString("FeedBackDelete") + " " + Integer.toString(nodeAddress));    errorInStatus1=true;    changedNode=true;  } else {    resetNotes();  }}  }
class C{  public void endArray() throws IOException {  expect(JsonToken.END_ARRAY);}  }
class C{  @Override public void onHeartbeat(int skipped){  try {    JavaScript.eval("t_$.heartbeat(" + skipped + ")");  } catch (  ScriptException e) {  }}  }
class C{  public boolean mandates(final long identifier){  return m_mandatory.contains(identifier);}  }
class C{  public String jplot(double[] x,double[] y,double dummy){  return jplot(x,y)[0];}  }
class C{  public static ActiveMQDestination createDestination(Object endpoint) throws AmqpProtocolException {  if (endpoint == null) {    return null;  } else   if (endpoint instanceof Coordinator) {    return null;  } else   if (endpoint instanceof org.apache.qpid.proton.amqp.messaging.Terminus) {    org.apache.qpid.proton.amqp.messaging.Terminus terminus=(org.apache.qpid.proton.amqp.messaging.Terminus)endpoint;    if (terminus.getAddress() == null || terminus.getAddress().length() == 0) {      if (terminus instanceof org.apache.qpid.proton.amqp.messaging.Source) {        throw new AmqpProtocolException("amqp:invalid-field","source address not set");      } else {        throw new AmqpProtocolException("amqp:invalid-field","target address not set");      }    }    return ActiveMQDestination.createDestination(terminus.getAddress(),ActiveMQDestination.QUEUE_TYPE);  } else {    throw new RuntimeException("Unexpected terminus type: " + endpoint);  }}  }
class C{  void locateClassFailed(Throwable ex,String adapterName,Object o){  log.error(ex.getMessage() + " could not load adapter class " + adapterName);  if (log.isDebugEnabled()) {    ex.printStackTrace();  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer(super.toString());  buf.setLength(buf.length() - 1);  return buf + ", h=" + currentTreeHeight+ ", hStartSampling="+ treeHeightStartingSampling+ ", precomputeEpsilon="+ precomputeEpsilon+ ")";}  }
class C{  @Override public String toString(){  return this.adapted;}  }
class C{  public synchronized void showLastFmErrorDialog(String message,String content){  Platform.runLater(null);}  }
class C{  @Override public void snmpPduTrap(InetAddress address,SnmpPduPacket pdu) throws IOException, SnmpStatusException {  if (address != null)   sendTrapPdu(address,pdu); else   sendTrapPdu(pdu);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Vector)) {    return false;  }  Vector that=(Vector)obj;  if (this.x != that.x) {    return false;  }  if (this.y != that.y) {    return false;  }  return true;}  }
class C{  public static Border createCompoundBorder(Border top,Border bottom,Border left,Border right){  if ((top != null && !top.isRectangleType()) || (bottom != null && !bottom.isRectangleType()) || (left != null && !left.isRectangleType())|| (right != null && !right.isRectangleType())) {    throw new IllegalArgumentException("Compound Border can be created " + "only from Rectangle types Borders");  }  if ((isSame(top,bottom)) && (isSame(top,left)) && (isSame(top,right))) {    return top;  }  Border b=new Border();  b.type=TYPE_COMPOUND;  b.compoundBorders=new Border[4];  b.compoundBorders[Component.TOP]=top;  b.compoundBorders[Component.BOTTOM]=bottom;  b.compoundBorders[Component.LEFT]=left;  b.compoundBorders[Component.RIGHT]=right;  b.thickness=0;  for (int i=Component.TOP; i <= Component.RIGHT; i++) {    if (b.compoundBorders[i] != null) {      int sideThickness=b.compoundBorders[i].thickness;      if (sideThickness > b.thickness) {        b.thickness=sideThickness;      }    }  }  return b;}  }
class C{  public void hide(){  view.hide();}  }
class C{  @LargeTest public void testMediaVideoItemOverlays() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final String overlayItemFileName=INPUT_FILE_PATH + "IMG_176x144_Overlay1.png";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  assertTrue("Overlay List Size",(mediaVideoItem1.getAllOverlays().size() == 0) ? true : false);  assertNull("Overlay Item by ID",mediaVideoItem1.getOverlay("xyz"));  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayItemFileName,176,144);  final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaVideoItem1,"overlayId",mBitmap,5000,5000);  mediaVideoItem1.addOverlay(overlayFrame);  assertTrue("Overlay List Size",(mediaVideoItem1.getAllOverlays().size() == 1) ? true : false);  assertEquals("Overlay Item by Valid ID",overlayFrame,mediaVideoItem1.getOverlay(overlayFrame.getId()));  assertNull("Overlay Item by Invalid ID",mediaVideoItem1.getOverlay("xyz"));  assertNull("Overlay Item by Invalid ID",mediaVideoItem1.removeOverlay("xyz"));  assertTrue("Overlay List Size",(mediaVideoItem1.getAllOverlays().size() == 1) ? true : false);  assertEquals("Overlay Removed",overlayFrame,mediaVideoItem1.removeOverlay(overlayFrame.getId()));  assertTrue("Overlay List Size",(mediaVideoItem1.getAllOverlays().size() == 0) ? true : false);  assertNull("Overlay Item by ID",mediaVideoItem1.getOverlay("effectId"));}  }
class C{  public boolean hasEntryLink(){  return super.hasElement(RecurrenceExceptionEntryLink.KEY);}  }
class C{  private Node createBinarySecurityToken(String uuid) throws ParserException {  ObjectFactory secExtFactory=new ObjectFactory();  BinarySecurityTokenType bst=secExtFactory.createBinarySecurityTokenType();  try {    bst.setValue(Base64.encodeBase64String(holderOfKeyConfig.getCertificate().getEncoded()));  } catch (  CertificateEncodingException e) {    String message="Error creating BinarySecurityToken";    _log.debug(message,e);    throw new ParserException(message,e);  }  bst.setValueType(X509_CERTIFICATE_TYPE);  bst.setEncodingType(Constants.ENCODING_TYPE_BASE64);  bst.setId(uuid);  return marshallJaxbElement(bst).getFirstChild();}  }
class C{  public Boolean isSendOnFailure(){  return sendOnFailure;}  }
class C{  public boolean isWildcardType(){  return this.getType().equals(MEDIA_TYPE_WILDCARD);}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public boolean decodeLongInteger(int startIndex){  int lengthMultiOctet=wspData[startIndex] & 0xff;  if (lengthMultiOctet > WAP_PDU_SHORT_LENGTH_MAX) {    return false;  }  unsigned32bit=0;  for (int i=1; i <= lengthMultiOctet; i++) {    unsigned32bit=(unsigned32bit << 8) | (wspData[startIndex + i] & 0xff);  }  dataLength=1 + lengthMultiOctet;  return true;}  }
class C{  public ProtectionSet findExistingProtectionSet(String psetLabel,String rpProtectionId,URI protectionSystemUri,String umpsetNativeGuid){  for (  VolumeIngestionContext volumeContext : getRootIngestionRequestContext().getProcessedUnManagedVolumeMap().values()) {    if (volumeContext != null && volumeContext instanceof RecoverPointVolumeIngestionContext) {      RecoverPointVolumeIngestionContext rpContext=(RecoverPointVolumeIngestionContext)volumeContext;      ProtectionSet pset=rpContext.getManagedProtectionSet();      if (pset != null) {        if ((pset.getLabel().equals(psetLabel)) && (pset.getProtectionId().equals(rpProtectionId)) && (pset.getProtectionSystem().equals(protectionSystemUri))&& (pset.getNativeGuid().equals(umpsetNativeGuid))) {          _logger.info("found already-instantiated ProtectionSet {} (hash {})",pset.getLabel(),pset.hashCode());          return pset;        }      }    }  }  _logger.info("did not find an already-instantiated ProtectionSet for ",psetLabel);  return null;}  }
class C{  public boolean isLessThanOrEqualTo(Money money){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(money);  return (thisValue.compareTo(parameter) <= 0);}  }
class C{  public ContextMatchStepPattern(int axis,int paxis){  super(DTMFilter.SHOW_ALL,axis,paxis);}  }
class C{  public static int process(final File orig){  PngReaderBuffered pngr=new PngReaderBuffered(orig);  pngr.end();  return pngr.frameIndex + 1;}  }
class C{  public NetworkInterface replicate(){  return new TestInterface(this);}  }
class C{  protected boolean hasSpaceDown(){  return false;}  }
class C{  public AdditionalName(String value){  this();  setValue(value);}  }
class C{  public final int decrementAndGet(){  for (; ; ) {    int current=get();    int next=current - 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  public IssuerAlternativeNameExtension(){  extensionId=PKIXExtensions.IssuerAlternativeName_Id;  critical=false;  names=new GeneralNames();}  }
class C{  public ColorAtom(Color bg,Color c,ColorAtom old){  elements=new RowAtom(old.elements);  background=(bg == null ? old.background : bg);  color=(c == null ? old.color : c);}  }
class C{  public static void assertArrayEquals(String message,Object[] expected,Object[] actual){  if (expected == null) {    assertEquals((Object)null,actual);    return;  }  if (actual == null) {    throw new AssertionFailedError(message + " (expected " + Arrays.toString(expected)+ " , but is null)");  }  assertEquals(message + " (array length is not equal)",expected.length,actual.length);  for (int i=0; i < expected.length; i++) {    assertEquals(message,expected[i],actual[i]);  }}  }
class C{  private void moveTo(float x,float y){  mPath.moveTo(mLastX=x,mLastY=y);}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public _QueueOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  public void addExercisePane(Pane pane){  trainingExerciseContainer.getChildren().add(pane);  exercisePanes.add(pane);}  }
class C{  private static void convertOldSanralSubpopulations(String outputFolder,double fraction){  SanralPopulationConverter.Run("/Users/jwjoubert/Documents/workspace/data-sanral2010/plans/car_plans_2009_10pctV0.xml.gz","car","WGS84_UTM35S","car",fraction,outputFolder + "car.xml.gz",outputFolder + "carAttr.xml.gz","WGS84_SA_Albers",true);  SanralPopulationConverter.Run("/Users/jwjoubert/Documents/workspace/data-sanral2010/plans/bus_plans_2009_10pctV0.xml.gz","bus","WGS84_UTM35S","bus",fraction,outputFolder + "bus.xml.gz",outputFolder + "busAttr.xml.gz","WGS84_SA_Albers",true);  SanralPopulationConverter.Run("/Users/jwjoubert/Documents/workspace/data-sanral2010/plans/taxi_plans_2009_10pctV0.xml.gz","taxi","WGS84_UTM35S","taxi",fraction,outputFolder + "taxi.xml.gz",outputFolder + "taxiAttr.xml.gz","WGS84_SA_Albers",true);  SanralPopulationConverter.Run("/Users/jwjoubert/Documents/workspace/data-sanral2010/plans/ext_plans_2011_10pctV0.xml.gz","ext","WGS84_UTM35S","ext",fraction,outputFolder + "ext.xml.gz",outputFolder + "extAttr.xml.gz","WGS84_SA_Albers",false);}  }
class C{  public synchronized boolean isTypeExisting(final String name){  Preconditions.checkNotNull(name,"Error: Name can not be null.");  return typesContainer.doesTypeNameExist(name);}  }
class C{  public static String leftPad(String str,int size){  return leftPad(str,size," ");}  }
class C{  public AppliedMigration(MigrationVersion version,String description,MigrationType type,String script,Integer checksum,String installedBy,int executionTime,boolean success){  this.version=version;  this.description=abbreviateDescription(description);  this.type=type;  this.script=abbreviateScript(script);  this.checksum=checksum;  this.installedBy=installedBy;  this.executionTime=executionTime;  this.success=success;}  }
class C{  private static void generatePivots(String[] values,int start,int length,int[] pivots,int pivotIndex){  final int capacity=Integer.highestOneBit(length - 1) << 1;  final int depth=Integer.numberOfTrailingZeros(capacity);  pivots[pivotIndex << 1]=depth;  pivots[(pivotIndex << 1) + 1]=length;  pivotIndex++;  for (int i=0; i < depth; i++) {    int step=capacity >> i;    for (int j=(1 << (depth - i - 1)) - 1; j < capacity; j+=step) {      final int part;      final int comp;      if (j >= length - 1) {        part=Integer.MIN_VALUE;        comp=0;      } else {        final String v1=values[start + j];        final String v2=values[start + j + 1];        final int l1=v1.length();        final int l2=v2.length();        if (l1 == l2) {          int tPart=-1;          int tComp=-1;          for (int k=0; k < l1; k++) {            final char c1=v1.charAt(k);            final char c2=v2.charAt(k);            if (c1 == c2)             continue;            if (c1 < c2) {              tPart=k;              tComp=c1;            } else {              throw new IllegalStateException();            }            break;          }          if (tPart == -1)           throw new IllegalArgumentException("duplicate value: " + v1);          part=tPart;          comp=tComp;        } else {          part=-1;          comp=l1;        }      }      pivots[pivotIndex << 1]=part;      pivots[(pivotIndex << 1) + 1]=comp;      pivotIndex++;    }  }}  }
class C{  public static Vector<String> parseMarkers(String markerList,String delim){  Vector<String> vector=null;  if (markerList == null) {    logger.fine("marker list null!");    return new Vector<String>(0);  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("parsing marker list |" + markerList + "|");  }  markerList=markerList.replace('\"','\0');  StringTokenizer tokens=new StringTokenizer(markerList,delim);  vector=new Vector<String>(tokens.countTokens());  while (tokens.hasMoreTokens()) {    String name=tokens.nextToken().trim();    vector.addElement(name);  }  return vector;}  }
class C{  public Matrix times(Matrix B){  if (B.m != n) {    throw new IllegalArgumentException("Matrix inner dimensions must agree.");  }  Matrix X=new Matrix(m,B.n);  double[][] C=X.getArray();  double[] Bcolj=new double[n];  for (int j=0; j < B.n; j++) {    for (int k=0; k < n; k++) {      Bcolj[k]=B.A[k][j];    }    for (int i=0; i < m; i++) {      double[] Arowi=A[i];      double s=0;      for (int k=0; k < n; k++) {        s+=Arowi[k] * Bcolj[k];      }      C[i][j]=s;    }  }  return X;}  }
class C{  public boolean isAfterLast() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    boolean b=this.rowData.isAfterLast();    return b;  }}  }
class C{  @ObjectiveCName("onAppHidden") public void onAppHidden(){  modules.getEvents().postSticky(new AppVisibleChanged(false));}  }
class C{  public TrainingSetEvent(Object source,Instances trainSet){  super(source);  m_trainingSet=trainSet;  if (m_trainingSet != null && m_trainingSet.numInstances() == 0) {    m_structureOnly=true;  }}  }
class C{  public ToStringBuilder append(String fieldName,char[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public boolean isHasParameters(){  return hasParameters;}  }
class C{  synchronized public final void markResourceAbsent(String resourceID){  AbsentResourceEntry entry=(AbsentResourceEntry)this.possiblyAbsent.get(resourceID);  if (entry == null)   this.possiblyAbsent.put(resourceID,entry=new AbsentResourceEntry());  ++entry.numTries;  entry.timeOfLastMark=System.currentTimeMillis();}  }
class C{  public Vec2 multiply(double scalar){  this.x*=scalar;  this.y*=scalar;  return this;}  }
class C{  public void updateResult(String name){  StringBuffer buff=m_Results.get(name);  if (buff == null) {    return;  }  if (m_SingleName == name) {    m_SingleText.setText(buff.toString());  }  JTextComponent currentText=m_FramedOutput.get(name);  if (currentText != null) {    currentText.setText(buff.toString());  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SVGOMAnimateElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public String toString(){  return getValue();}  }
class C{  public DrawerBuilder withDisplayBelowStatusBar(boolean displayBelowStatusBar){  this.mDisplayBelowStatusBar=displayBelowStatusBar;  return this;}  }
class C{  public void messageAcked(MessageType type,Short nodeId){  if (nodeId == null)   return;  if (!windowedTypes.contains(type))   return;  MessageWindow mw=messageWindows.get(nodeId);  if (mw == null)   return;  int pending=mw.pending.decrementAndGet();  if (pending < MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      mw.full.signalAll();    }  finally {      mw.lock.unlock();    }  }}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  PreparedStatement prepareAutoCloseStatement(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,true);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean hasBindingsRecovery(){  return (this.bits & ENABLE_BINDINGS_RECOVERY) != 0;}  }
class C{  public VNXeCommandResult modifyConsistencyGroupSync(String id,LunGroupModifyParam param){  StringBuilder urlBld=new StringBuilder(URL_MODIFY1);  urlBld.append(id);  urlBld.append(URL_MODIFY2);  _url=urlBld.toString();  return postRequestSync(param);}  }
class C{  public void testDefaultTrackNameAndDefaultActivityType(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_recording));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_recording_track_name_title));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_recording_track_name_number_option));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_recording_default_activity_title));  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(0,NEW_ACTIVITY_TYPE);  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_ok),true,true);  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.startRecording();  instrumentation.waitForIdleSync();  EndToEndTestUtils.stopRecording(false);  assertTrue(EndToEndTestUtils.SOLO.searchText(trackListActivity.getString(R.string.track_name_format).split(" ")[0]));  assertTrue(EndToEndTestUtils.SOLO.searchText(NEW_ACTIVITY_TYPE));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.generic_save));}  }
class C{  public static synchronized void sendCommitmentProto(SignedTreeRoot str,Socket socket){  Logging.log("Sending commitment response... ");  Commitment comm=buildCommitmentMsg(str);  sendMsgProto(MsgType.COMMITMENT,comm,socket);}  }
class C{  void removeNode(Node targetNode){  if (nodes != null) {    nodes.remove(targetNode);  }}  }
class C{  public boolean isIncrementalDisabled(){  return m_IncrementalDisabled;}  }
class C{  private VmaxVolumeToExportMaskApplicatorContext createVPlexBackendApplicatorContext(ExportGroup exportGroup,StorageSystem storage,Map<URI,ExportMaskPolicy> policyCache,InitiatorHelper initiatorHelper,Map<String,Set<URI>> initiatorToExportMaskPlacementMap,Set<URI> partialMasks,Map<URI,Integer> volumeMap,Map<URI,Map<URI,Integer>> masksToUpdateWithVolumes){  VmaxVolumeToExportMaskApplicatorContext context=new VmaxVolumeToExportMaskApplicatorContext();  context.storage=storage;  context.partialMasks=partialMasks;  context.exportMaskURIToPolicy=policyCache;  context.masksToUpdateWithVolumes=masksToUpdateWithVolumes;  context.initiatorHelper=initiatorHelper;  context.volumeMap=volumeMap;  context.initiatorToExportMaskPlacementMap=initiatorToExportMaskPlacementMap;  context.exportGroup=exportGroup;  context.initiatorURIsCopy=new ArrayList<>();  context.initiatorsForNewExport=new HashSet<>();  context.masksToUpdateWithInitiators=new HashMap<>();  context.token=UUID.randomUUID().toString();  return context;}  }
class C{  public double distanceSq(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  public static void printSortedSubSequenceOfSize3(int[] a){  int len=a.length, min=a[0], max=a[len - 1];  int[] smaller=new int[len], larger=new int[len];  smaller[0]=-1;  for (int i=1; i < len; i++) {    if (a[i] < min) {      smaller[i]=-1;      min=a[i];    } else {      smaller[i]=min;    }  }  larger[len - 1]=-1;  for (int i=len - 2; i >= 0; i--) {    if (a[i] > max) {      larger[i]=-1;      max=a[i];    } else {      larger[i]=max;    }  }  for (int i=0; i < len; i++) {    if (smaller[i] != -1 && larger[i] != -1) {      System.out.println(smaller[i] + "," + a[i]+ ","+ larger[i]);      break;    }  }}  }
class C{  public Rule(Attribute[] regularAttributes,Attribute label,boolean rejectionSampling,boolean createAll){  super(regularAttributes,label,rejectionSampling,createAll);  allLiterals=new Literal[regularAttributes.length][];  for (int attributeIndex=0; attributeIndex < regularAttributes.length; attributeIndex++) {    allLiterals[attributeIndex]=new Literal[regularAttributes[attributeIndex].getMapping().size()];    for (int valueIndex=0; valueIndex < regularAttributes[attributeIndex].getMapping().size(); valueIndex++) {      allLiterals[attributeIndex][valueIndex]=new Literal(regularAttributes[attributeIndex],valueIndex,attributeIndex);    }  }}  }
class C{  public static void autoDetectWidestChar(String s){  Font f=UIManager.getInstance().getComponentStyle("TextArea").getFont();  int widest=0;  int slen=s.length();  for (int iter=0; iter < slen; iter++) {    char c=s.charAt(iter);    int w=f.charWidth(c);    if (w > widest) {      widest=w;      setWidestChar(c);    }  }}  }
class C{  public DeActivateFor_ createDeActivateFor_(){  DeActivateFor_Impl deActivateFor_=new DeActivateFor_Impl();  return deActivateFor_;}  }
class C{  public static boolean isHighLoadOS(){  return !(_isWindows98 || _isWindows95 || _isWindowsMe|| _isWindowsNT);}  }
class C{  static Number forceUnwrappedNumberToType(final Number n,final Class targetType,final boolean bugfixed){  if (targetType == n.getClass()) {    return n;  } else   if (targetType == int.class || targetType == Integer.class) {    return n instanceof Integer ? (Integer)n : Integer.valueOf(n.intValue());  } else   if (targetType == long.class || targetType == Long.class) {    return n instanceof Long ? (Long)n : Long.valueOf(n.longValue());  } else   if (targetType == double.class || targetType == Double.class) {    return n instanceof Double ? (Double)n : Double.valueOf(n.doubleValue());  } else   if (targetType == BigDecimal.class) {    if (n instanceof BigDecimal) {      return n;    } else     if (n instanceof BigInteger) {      return new BigDecimal((BigInteger)n);    } else     if (n instanceof Long) {      return BigDecimal.valueOf(n.longValue());    } else {      return new BigDecimal(n.doubleValue());    }  } else   if (targetType == float.class || targetType == Float.class) {    return n instanceof Float ? (Float)n : Float.valueOf(n.floatValue());  } else   if (targetType == byte.class || targetType == Byte.class) {    return n instanceof Byte ? (Byte)n : Byte.valueOf(n.byteValue());  } else   if (targetType == short.class || targetType == Short.class) {    return n instanceof Short ? (Short)n : Short.valueOf(n.shortValue());  } else   if (targetType == BigInteger.class) {    if (n instanceof BigInteger) {      return n;    } else     if (bugfixed) {      if (n instanceof OverloadedNumberUtil.IntegerBigDecimal) {        return ((OverloadedNumberUtil.IntegerBigDecimal)n).bigIntegerValue();      } else       if (n instanceof BigDecimal) {        return ((BigDecimal)n).toBigInteger();      } else {        return BigInteger.valueOf(n.longValue());      }    } else {      return new BigInteger(n.toString());    }  } else {    final Number oriN=n instanceof OverloadedNumberUtil.NumberWithFallbackType ? ((OverloadedNumberUtil.NumberWithFallbackType)n).getSourceNumber() : n;    if (targetType.isInstance(oriN)) {      return oriN;    } else {      return null;    }  }}  }
class C{  private void pokeAddr(GPR reg,int idx){  int offset=BYTES_IN_STACKSLOT - BYTES_IN_ADDRESS + (idx << LOG_BYTES_IN_STACKSLOT);  if (VM.VerifyAssertions)   validateStackPush(-offset);  asm.emitSTAddr(reg,spTopOffset + offset,FP);}  }
class C{  protected static void initialiseSourceInfo(List<SourceInfo> sourceInfoList,String tenantId,Trace trace,StringBuffer parentNodeId,int pos,Node node){  SourceInfo si=new SourceInfo();  parentNodeId.append(':');  parentNodeId.append(pos);  si.setId(parentNodeId.toString());  si.setTimestamp(node.getTimestamp());  si.setDuration(node.getDuration());  si.setFragmentId(trace.getId());  si.setHostName(trace.getHostName());  si.setHostAddress(trace.getHostAddress());  si.setMultipleConsumers(true);  si.setProperties(node.getProperties());  if (log.isLoggable(Level.FINEST)) {    log.finest("Adding source information for node id=" + si.getId() + " si="+ si);  }  sourceInfoList.add(si);  if (node.getClass() == Producer.class) {    List<CorrelationIdentifier> cids=node.findCorrelationIds(Scope.Interaction,Scope.ControlFlow);    if (!cids.isEmpty()) {      for (int i=0; i < cids.size(); i++) {        CorrelationIdentifier cid=cids.get(i);        SourceInfo copy=new SourceInfo(si);        copy.setId(cid.getValue());        copy.setMultipleConsumers(((Producer)node).multipleConsumers());        if (log.isLoggable(Level.FINEST)) {          log.finest("Extra source information for scope=" + cid.getScope() + " id="+ copy.getId()+ " si="+ copy);        }        sourceInfoList.add(copy);      }    }  }  if (node instanceof ContainerNode) {    int nodeIdLen=parentNodeId.length();    for (int j=0; j < ((ContainerNode)node).getNodes().size(); j++) {      initialiseSourceInfo(sourceInfoList,tenantId,trace,parentNodeId,j,((ContainerNode)node).getNodes().get(j));      parentNodeId.delete(nodeIdLen,parentNodeId.length());    }  }}  }
class C{  public long start(){  startTime=System.currentTimeMillis();  return startTime;}  }
class C{  @Override public String toString(){  return String.format("%s %s",getAddress().toHexString(),getName());}  }
class C{  public static ProgressDialog showPrgressDialog(Context context,String title,String message,OnCancelListener cancelListener){  ProgressDialog progressDialog=ProgressDialog.show(context,title,message,true);  progressDialog.setCancelable(true);  progressDialog.setOnCancelListener(cancelListener);  return progressDialog;}  }
class C{  @SuppressWarnings("unchecked") private static Object transformContext(Draft2Job context,String language){  if (context == null) {    return null;  }  if (!language.equals("#cwl-js-engine") && !language.equals("cwl-js-engine")) {    Map<String,Object> newContext=(Map<String,Object>)CloneHelper.deepCopy(context.getInputs());    newContext.put("allocatedResources",context.getResources());    return newContext;  }  return context;}  }
class C{  public Vertex lastRelationship(Primitive type,int fromLast){  return lastRelationship(this.network.createVertex(type),fromLast);}  }
class C{  public String formatMountCmd(String dataMover,String fileSystem,String path){  StringBuilder cmd=new StringBuilder();  cmd.append(" ");  cmd.append(dataMover);  cmd.append(" ");  cmd.append(fileSystem);  cmd.append(" ");  cmd.append(path);  return cmd.toString();}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  @GetMapping("/users/fetch-by-email") public U fetchUserByEmail(@RequestParam String email){  log.debug("Fetching user by email: " + email);  return lemonService.fetchUserByEmail(email);}  }
class C{  private boolean isBatteryLevelCharacteristic(final BluetoothGattCharacteristic characteristic){  if (characteristic == null)   return false;  return BATTERY_LEVEL_CHARACTERISTIC.equals(characteristic.getUuid());}  }
class C{  private Network createIPNetworkForSCSIInitiators(String uniqueId){  Network network;  List<Network> results=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,Network.class,"nativeId",uniqueId);  if (results == null || results.isEmpty()) {    network=new Network();    network.setId(URIUtil.createId(Network.class));    network.setTransportType(StorageProtocol.Transport.IP.name());    network.setNativeId(uniqueId);    network.setLabel(String.format("%s-ScaleIONetwork",uniqueId));    network.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.name());    network.setInactive(false);    _dbClient.createObject(network);  } else {    network=results.get(0);  }  return network;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:23.836 -0500",hash_original_method="61F489343549C45D5079119B52911181",hash_generated_method="5A69ED0E0A66D7BB87D01A4C23F64132") @Override public String toString(){  return currencyCode;}  }
class C{  public static boolean replace(StringBuilder strb,String str,String repStr){  int ix=strb.indexOf(str);  if (ix != -1) {    strb.replace(ix,ix + str.length(),repStr);    return true;  }  return false;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public PublishItem(String nodeId,Collection<T> toPublish){  super(PubSubElementType.PUBLISH,nodeId);  items=toPublish;}  }
class C{  @Override public OpResult addScheduleState(ScheduleState state){  OpResult result=new OpResult();  try {    for (    String key : state.getSpoutSpecs().keySet()) {      SpoutSpec spoutSpec=state.getSpoutSpecs().get(key);      addOneSpoutSpec(spoutSpec);    }    for (    String key : state.getAlertSpecs().keySet()) {      AlertBoltSpec alertBoltSpec=state.getAlertSpecs().get(key);      addOne(alertSpecs,alertBoltSpec);    }    for (    String key : state.getGroupSpecs().keySet()) {      RouterSpec groupSpec=state.getGroupSpecs().get(key);      addOne(groupSpecs,groupSpec);    }    for (    String key : state.getPublishSpecs().keySet()) {      PublishSpec publishSpec=state.getPublishSpecs().get(key);      addOne(publishSpecs,publishSpec);    }    for (    VersionedPolicyDefinition policySnapshot : state.getPolicySnapshots()) {      addOne(policySnapshots,policySnapshot);    }    for (    VersionedStreamDefinition streamSnapshot : state.getStreamSnapshots()) {      addOne(streamSnapshots,streamSnapshot);    }    for (    MonitoredStream monitoredStream : state.getMonitoredStreams()) {      addOne(monitoredStreams,monitoredStream);    }    for (    PolicyAssignment assignment : state.getAssignments()) {      addOne(assignments,assignment);    }    ScheduleStateBase stateBase=new ScheduleStateBase(state.getVersion(),state.getGenerateTime(),state.getCode(),state.getMessage(),state.getScheduleTimeMillis());    addOne(scheduleStates,stateBase);    result.code=200;    result.message="add document to collection schedule_specs succeed";  } catch (  Exception e) {    result.code=400;    result.message=e.getMessage();    LOG.error("",e);  }  return result;}  }
class C{  public final void printCurrent(){  printValue(currentCount);}  }
class C{  @Override public int hashCode(){  return getMarketplaceId() == null ? 0 : getMarketplaceId().hashCode();}  }
class C{  protected synchronized void createServerObject() throws Exception {  if (this.server == null) {    try {      this.server=getClassLoader().loadClass("org.mortbay.jetty.Server").newInstance();    } catch (    Exception e) {      throw new ContainerException("Failed to create Jetty Server instance",e);    }  }}  }
class C{  private Object writeReplace(Object source) throws Exception {  if (source != null) {    Class type=source.getClass();    Caller caller=context.getCaller(type);    return caller.replace(source);  }  return source;}  }
class C{  private static List<String> filterHangoutAddresses(List<String> toList){  List<String> results=new LinkedList<String>();  Log.d("Looking for hangout addresses");  for (  String notifiedAddress : toList) {    String toResource=XmppStringUtils.parseResource(notifiedAddress);    if (toResource.toLowerCase().startsWith("messaging")) {      Log.d("Hangout address detected: " + notifiedAddress);      String bareAddress=XmppStringUtils.parseBareJid(notifiedAddress);      if (!results.contains(bareAddress)) {        results.add(bareAddress);        Log.d("Sending message to " + bareAddress);      }    }  }  for (  String notifiedAddress : toList) {    String bareAddress=XmppStringUtils.parseBareJid(notifiedAddress);    if (!results.contains(bareAddress)) {      results.add(notifiedAddress);    }  }  return results;}  }
class C{  @SuppressWarnings("unchecked") protected void sequentially(Consumer<Marker>... functions){  if (functions == null || functions.length == 0)   return;  Collection<ParsingException> errors=new ArrayList<>();  Marker marker=tokens.mark();  for (  Consumer<Marker> function : functions) {    try {      function.accept(marker);      return;    } catch (    ParsingException e) {      errors.add(e);      tokens.rewind(marker);    }  }  parsingFailed(marker.position(),errors,"Unable to parse statement");}  }
class C{  protected LinesToCharsResult diff_linesToChars(String text1,String text2){  List<String> lineArray=new ArrayList<String>();  Map<String,Integer> lineHash=new HashMap<String,Integer>();  lineArray.add("");  String chars1=diff_linesToCharsMunge(text1,lineArray,lineHash);  String chars2=diff_linesToCharsMunge(text2,lineArray,lineHash);  return new LinesToCharsResult(chars1,chars2,lineArray);}  }
class C{  @Deprecated public static KeyPair generateDSAKeyPair(){  KeyPairGenerator kg;  try {    kg=KeyPairGenerator.getInstance("DSA");    kg.initialize(1024,new SecureRandom());  } catch (  NoSuchAlgorithmException e) {    Logging.error("DSA is not valid for some reason.");    return null;  }catch (  InvalidParameterException e) {    Logging.error("DSA is not valid for some reason.");    return null;  }  KeyPair kp=kg.generateKeyPair();  return kp;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapnotfounderr.class,args);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public BuyClientBuilder apiKey(final String apiKey){  this.apiKey=apiKey;  return this;}  }
class C{  @NonNull @SuppressWarnings("unused") public static TimePickerDialog createDialog(@NonNull Context context,@Nullable OnDateSetListener listener,@NonNull Clock clock){  return createDialog(context,null,listener,clock);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public X509v3CertificateBuilder addExtension(ASN1ObjectIdentifier oid,boolean isCritical,ASN1Encodable value) throws CertIOException {  CertUtils.addExtension(extGenerator,oid,isCritical,value);  return this;}  }
class C{  public Calculator(final Composite parent,final int style){  super(parent,style);  setLayout(new GridLayout());  this.displayArea=createTextArea();  this.panel=new CalculatorButtonsComposite(this,SWT.NONE);  this.panel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));  this.panel.setDisplayArea(this.displayArea);  this.displayArea.addKeyListener(this.panel.getKeyListener());}  }
class C{  public void onConnectionStateChange(BluetoothDevice device,int status,int newState){}  }
class C{  private double computeWeight(int tsteps){  return 1.0 - (tsteps / (float)(steps + 1));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!isActive())   setRanking(999);  return true;}  }
class C{  public String dumpAsMap(Object data){  return dumpAs(data,Tag.MAP,FlowStyle.BLOCK);}  }
class C{  @Override public void highlight(URI property){  query.setHighlight(true);  String field=(property != null) ? SearchFields.getPropertyField(property) : "*";  query.addHighlightField(field);  query.setHighlightSimplePre(SearchFields.HIGHLIGHTER_PRE_TAG);  query.setHighlightSimplePost(SearchFields.HIGHLIGHTER_POST_TAG);  query.setHighlightSnippets(2);}  }
class C{  private File findUnixProgram(String program){  String[] cmd={"/bin/sh","-c","which " + program};  try {    Process process=Runtime.getRuntime().exec(cmd);    BufferedReader reader=new BufferedReader(new InputStreamReader(process.getInputStream()));    String line=reader.readLine();    if (line != null) {      File f=new File(line);      if (f.exists()) {        return f;      }    }    String flexHome=System.getProperty("application.home");    if (flexHome != null) {      File f=new File(flexHome,"bin/" + program);      if (f.exists()) {        return f;      }    }  } catch (  IOException e) {  }  return null;}  }
class C{  public static void releasePool(long poolPtr){  long mem=GridUnsafe.getLong(poolPtr + POOL_HDR_OFF_MEM_1);  if (mem != 0)   GridUnsafe.freeMemory(mem);  mem=GridUnsafe.getLong(poolPtr + POOL_HDR_OFF_MEM_2);  if (mem != 0)   GridUnsafe.freeMemory(mem);  mem=GridUnsafe.getLong(poolPtr + POOL_HDR_OFF_MEM_3);  if (mem != 0)   GridUnsafe.freeMemory(mem);  GridUnsafe.freeMemory(poolPtr);}  }
class C{  public Boolean isForce(){  return force;}  }
class C{  private static int toIntAccessType(String accessType) throws SecurityException {  accessType=accessType.trim().toLowerCase();  if (accessType.equals("setting"))   return TYPE_SETTING; else   if (accessType.equals("file"))   return TYPE_FILE; else   if (accessType.equals("direct_java_access"))   return TYPE_DIRECT_JAVA_ACCESS; else   if (accessType.equals("mail"))   return TYPE_MAIL; else   if (accessType.equals("datasource"))   return TYPE_DATASOURCE; else   if (accessType.equals("mapping"))   return TYPE_MAPPING; else   if (accessType.equals("remote"))   return TYPE_REMOTE; else   if (accessType.equals("custom_tag"))   return TYPE_CUSTOM_TAG; else   if (accessType.equals("cfx_setting"))   return TYPE_CFX_SETTING; else   if (accessType.equals("cfx_usage"))   return TYPE_CFX_USAGE; else   if (accessType.equals("debugging"))   return TYPE_DEBUGGING; else   if (accessType.equals("tag_execute"))   return TYPE_TAG_EXECUTE; else   if (accessType.equals("tag_import"))   return TYPE_TAG_IMPORT; else   if (accessType.equals("tag_object"))   return TYPE_TAG_OBJECT; else   if (accessType.equals("tag_registry"))   return TYPE_TAG_REGISTRY; else   if (accessType.equals("search"))   return TYPE_SEARCH; else   if (accessType.equals("cache"))   return TYPE_CACHE; else   if (accessType.equals("gateway"))   return TYPE_GATEWAY; else   if (accessType.equals("orm"))   return TYPE_ORM; else   if (accessType.startsWith("scheduled_task"))   return TYPE_SCHEDULED_TASK; else   throw new SecurityException("invalid access type [" + accessType + "]","valid access types are [setting,file,direct_java_access,mail,datasource,mapping,custom_tag,cfx_setting" + "cfx_usage,debugging]");}  }
class C{  public CViewFilterComponent(final IViewContainer module){  super(new BorderLayout());  if (GraphicsEnvironment.isHeadless()) {    m_dialog=null;  } else {    m_dialog=new CViewFilterDialog(module.getDatabase().getContent().getViewTagManager(),module.getDatabase().getContent().getNodeTagManager());    m_dialog.addListener(m_filterDialogListener);  }  add(new JButton(new CFilterAction()));}  }
class C{  public boolean isAllowsPublicVisibility(){  return allowsPublicVisibility;}  }
class C{  public static int[] createBootstrappingMapping(ExampleSet exampleSet,int size,Random random){  int[] mapping=new int[size];  for (int i=0; i < mapping.length; i++) {    mapping[i]=random.nextInt(exampleSet.size());  }  return mapping;}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public ByteArray grow(ByteArray array,long minSize){  if (minSize <= array.size()) {    return array;  }  final long newSize=overSize(minSize,BYTE_PAGE_SIZE,RamUsageEstimator.NUM_BYTES_BYTE);  return resize(array,newSize);}  }
class C{  public EventBTreeTupleSerializer(){  super();}  }
class C{  private void scale(){  Rectangle newBounds=getBounds();  if (!newBounds.equals(bounds)) {    bounds=newBounds;    double scalingX=bounds.width / (double)image.getWidth(this);    double scalingY=bounds.height / (double)image.getHeight(this);    double scaling=Math.max(scalingX,scalingY);    BufferedImage copy=getGraphicsConfiguration().createCompatibleImage(bounds.width,bounds.height);    Graphics2D g=copy.createGraphics();    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);    g.scale(scaling,scaling);    g.drawImage(image,0,0,this);    g.dispose();    setIcon(new ImageIcon(copy));  }}  }
class C{  public boolean add(String source,String target,String align){  AlignedSentence s=getSentence(source,target,align);  if (s == null) {    logger.warn("Cannot add unaligned sentence to corpus: {} ||| {} ||| {}",source,target,align);    return false;  } else {    segments.add(s);    return true;  }}  }
class C{  public NightModeHelper(Activity activity,int theme,int defaultUiMode){  init(activity,theme,defaultUiMode);}  }
class C{  public synchronized void ensureCapacity(int minimumCapacity){  if (elementData.length < minimumCapacity) {    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;    grow(minimumCapacity > next ? minimumCapacity : next);  }}  }
class C{  public DLSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public boolean handleRemsetAddress(Address addr){  if (subspace.addressInRange(addr)) {    int index=subspace.getIndex(addr);    remsetStream.increment(index,(short)1);    totalRemset++;    return true;  } else {    return false;  }}  }
class C{  int assign(String webappId){  int activityIndex=checkIfAssigned(webappId);  if (activityIndex == INVALID_ACTIVITY_INDEX) {    activityIndex=mActivityList.get(0).mActivityIndex;    ActivityEntry newEntry=new ActivityEntry(activityIndex,webappId);    mActivityList.set(0,newEntry);  }  markActivityUsed(activityIndex,webappId);  return activityIndex;}  }
class C{  private double ARAMm_Update_Weights(double[] data,double[] labels,int category){  double weightChange=0;  for (int i=0; i < numFeatures; i++) {    if (data[i] < weightsA[category][i]) {      weightsA[category][i]=(learningRate * data[i]) + (1 - learningRate) * weightsA[category][i];    }  }  for (int i=0; i < numClasses; i++) {    if (weightblearnmethod == 0) {      weightsB[category][i]=labels[i] + weightsB[category][i];      weightChange=1;    } else {      if (labels[i] < weightsB[category][i]) {        weightsB[category][i]=(learningRate * labels[i]) + (1 - learningRate) * weightsB[category][i];        weightChange=1;      }    }  }  return weightChange;}  }
class C{  public QRDecomposition(final Matrix matrix){  this(matrix,false);}  }
class C{  public TitledBorder(Border border,String title){  this(border,title,LEADING,DEFAULT_POSITION,null,null);}  }
class C{  public RelationCountNodeSelectorTool(Composite parent,int style,ViewEditor editor){  super(parent,style);  this.editor=editor;  setLayout(new GridLayout());  relationSetEditor=new RelationSetEditorPart();  Control relationshipPickerControl=relationSetEditor.getControl(this,new ToolRelationRepo());  relationshipPickerControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));  RelationCount.Settings settings=getEditorSettings(editor);  Composite rangeArea=new Composite(this,SWT.NONE);  rangeArea.setLayout(new GridLayout(2,true));  forwardRange=new RangeTool(rangeArea,style,"Forward:",settings.forward);  reverseRange=new RangeTool(rangeArea,style,"Reverse:",settings.reverse);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:24.384 -0400",hash_original_method="493DDE601B16F20B8C727AEC5BE72075",hash_generated_method="3A5AD5EA689A95BFAC76537067494A80") public AtomicIntegerArray(int length){  array=new int[length];}  }
class C{  boolean eventIntersectsSelection(Event event,Rect selection){  if (event.left < selection.right && event.right >= selection.left && event.top < selection.bottom && event.bottom >= selection.top) {    return true;  }  return false;}  }
class C{  public BlackVolatilityTermStructure(final Date referenceDate,final Calendar cal,final BusinessDayConvention bdc){  super(referenceDate,cal,bdc,new DayCounter());}  }
class C{  public static boolean verifyCompilationAndExecution(List<TestCase> tests){  if (tests == null || tests.isEmpty()) {    return true;  }  File dir=createNewTmpDir();  if (dir == null) {    logger.warn("Failed to create tmp dir");    return false;  }  try {    List<File> generated=compileTests(tests,dir);    if (generated == null) {      logger.warn("Failed to compile the test cases ");      return false;    }    Class<?>[] testClasses=loadTests(generated);    if (testClasses == null) {      logger.error("Found no classes for compiled tests");      return false;    }    JUnitResult result=runTests(testClasses,dir);    if (!result.wasSuccessful()) {      logger.error("" + result.getFailureCount() + " test cases failed");      for (      JUnitFailure failure : result.getFailures()) {        logger.error("Failure " + failure.getExceptionClassName() + ": "+ failure.getMessage()+ "\n"+ failure.getTrace());      }      return false;    } else {      if (result.getRunCount() == 0) {        logger.warn("There was no test to run");      }    }  } catch (  Exception e) {    logger.error("" + e,e);    return false;  } finally {    if (dir != null) {      try {        FileUtils.deleteDirectory(dir);      } catch (      IOException e) {        logger.warn("Cannot delete tmp dir: " + dir.getName(),e);      }    }  }  logger.debug("Successfully compiled and run test cases generated for " + Properties.TARGET_CLASS);  return true;}  }
class C{  @Override public void run(){  while (true) {    TimerTask task;synchronized (this) {      if (cancelled) {        return;      }      if (tasks.isEmpty()) {        if (finished) {          return;        }        try {          this.wait();        } catch (        InterruptedException ignored) {        }        continue;      }      long currentTime=System.currentTimeMillis();      task=tasks.minimum();      long timeToSleep;synchronized (task.lock) {        if (task.cancelled) {          tasks.delete(0);          continue;        }        timeToSleep=task.when - currentTime;      }      if (timeToSleep > 0) {        try {          this.wait(timeToSleep);        } catch (        InterruptedException ignored) {        }        continue;      }synchronized (task.lock) {        int pos=0;        if (tasks.minimum().when != task.when) {          pos=tasks.getTask(task);        }        if (task.cancelled) {          tasks.delete(tasks.getTask(task));          continue;        }        task.setScheduledTime(task.when);        tasks.delete(pos);        if (task.period >= 0) {          if (task.fixedRate) {            task.when=task.when + task.period;          } else {            task.when=System.currentTimeMillis() + task.period;          }          insertTask(task);        } else {          task.when=0;        }      }    }    boolean taskCompletedNormally=false;    try {      task.run();      taskCompletedNormally=true;    }  finally {      if (!taskCompletedNormally) {synchronized (this) {          cancelled=true;        }      }    }  }}  }
class C{  @Override protected void checkPath(Path path){  LOG.trace("Check path: {}",path.toString());}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  private int handleP(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 1) == 'H') {    result.append('F');    index+=2;  } else {    result.append('P');    index=contains(value,index + 1,1,"P","B") ? index + 2 : index + 1;  }  return index;}  }
class C{  private Request createRequest(long started){  int id=getRequestId();  Request request=data.build();  request.id=id;  request.started=started;  boolean loggingEnabled=picasso.loggingEnabled;  if (loggingEnabled) {    log(OWNER_MAIN,VERB_CREATED,request.plainId(),request.toString());  }  Request transformed=picasso.transformRequest(request);  if (transformed != request) {    transformed.id=id;    transformed.started=started;    if (loggingEnabled) {      log(OWNER_MAIN,VERB_CHANGED,transformed.logId(),"into " + transformed);    }  }  return transformed;}  }
class C{  public p addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static Object invoke(Object obj,String methodName,Class[] clazz,Object... newValue) throws NoSuchMethodException {  try {    Method method=obj.getClass().getMethod(methodName,clazz);    return method.invoke(obj,newValue);  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    InternalError error=new InternalError(e.getMessage());    error.initCause((e.getCause() != null) ? e.getCause() : e);    throw error;  }}  }
class C{  @Override public void decrypt(long[] inbuffer,long[] outbuffer){  int nLen=inbuffer.length;  for (int nI=0; nI < nLen; nI++)   outbuffer[nI]=decryptBlock(inbuffer[nI]);}  }
class C{  public void removeAllRefinementsForShard(int shardNumber){  queuedRefinements.remove(shardNumber);}  }
class C{  public void selectAll(){  List<SelectableWrapper<T>> selectionList=selectable.getSelectionList();  List<SelectableWrapper<T>> filteredData=selectable.getFilteredData();  for (  SelectableWrapper<T> wrapper : selectionList) {    if (filteredData.contains(wrapper)) {      wrapper.setSelected(true);    }  }}  }
class C{  public Deathdate(Date date){  super(date);}  }
class C{  public <T extends DataObject>void updateInBatches(List<T> records,int partitionSize,DbClient dbClient,String type){  List<List<T>> volume_partitions=Lists.partition(records,partitionSize);  for (  List<T> partition : volume_partitions) {    try {      dbClient.updateObject(partition);      _log.info("{} {} Records updated to DB",partition.size(),type);    } catch (    DatabaseException e) {      _log.error("Error updating {} records into the database:",type,e);    }  }}  }
class C{  static public Document newDocument(Element root){  Document doc=new Document(root);  addDefaultInfo(root);  return doc;}  }
class C{  @Override public Object remove(Serializable key){  if (component.initialStateMarked()) {    Object retVal=deltaMap.remove(key);    if (retVal == null) {      return defaultMap.remove(key);    } else {      defaultMap.remove(key);      return retVal;    }  } else {    return defaultMap.remove(key);  }}  }
class C{  public void stateChanged(ChangeEvent e){  if (e == null) {    throw new NullPointerException();  }  firePropertyChange(ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  SamplingXYLineRenderer clone=(SamplingXYLineRenderer)super.clone();  if (this.legendLine != null) {    clone.legendLine=ShapeUtilities.clone(this.legendLine);  }  return clone;}  }
class C{  public TestNodeGroupManager updateQuorum(int quorum){  TestRequestSender sender=getTestRequestSender();  List<Operation> ops=this.hosts.stream().map(null).collect(toList());  sender.sendAndWait(ops);  waitFor(this.timeout,null,null);  return this;}  }
class C{  public TopFieldDocs search(Query query,int n,Sort sort,boolean doDocScores,boolean doMaxScore) throws IOException {  return searchAfter(null,query,n,sort,doDocScores,doMaxScore);}  }
class C{  public String contentType(){  return contentType;}  }
class C{  public static void find2Methods(Class clazz,String superMethod,String thisMethod,int index,String desc,java.lang.reflect.Method[] methods){  methods[index + 1]=thisMethod == null ? null : findMethod(clazz,thisMethod,desc);  methods[index]=findSuperClassMethod(clazz,superMethod,desc);}  }
class C{  public final MappedByteBuffer force(){  checkIsMapped();  if (mapMode == MapMode.READ_WRITE) {    try {      Libcore.os.msync(block.toLong(),block.getSize(),MS_SYNC);    } catch (    ErrnoException errnoException) {      throw new AssertionError(errnoException);    }  }  return this;}  }
class C{  @Override public void caretUpdate(CaretEvent event){  String text=getText().trim();  String emptyMask=maskPattern.replace('#',' ');  if (text.length() == 0 || text.equals(emptyMask)) {    setForeground(UIManager.getColor("FormattedTextField.foreground"));    return;  }  try {    dateFormatter.parse(getText());    setForeground(positiveColor);  } catch (  Exception e) {    setForeground(negativeColor);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DialCap)) {    return false;  }  DialCap that=(DialCap)obj;  if (this.radius != that.radius) {    return false;  }  if (!PaintUtilities.equal(this.fillPaint,that.fillPaint)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!this.outlineStroke.equals(that.outlineStroke)) {    return false;  }  return super.equals(obj);}  }
class C{  protected SnmpCachedData updateCachedDatas(Object userData){  final String[] path=JvmRuntimeImpl.getClassPath(userData);  final long time=System.currentTimeMillis();  final int len=path.length;  SnmpOid indexes[]=new SnmpOid[len];  for (int i=0; i < len; i++) {    indexes[i]=new SnmpOid(i + 1);  }  return new SnmpCachedData(time,indexes,path);}  }
class C{  private boolean isArrowpointAllowed(Node x,Node y,Graph graph){  if (graph.getEndpoint(x,y) == Endpoint.ARROW) {    return true;  }  if (graph.getEndpoint(x,y) == Endpoint.TAIL) {    return false;  }  if (graph.getEndpoint(y,x) == Endpoint.ARROW) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  if (graph.getEndpoint(y,x) == Endpoint.TAIL) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  return graph.getEndpoint(y,x) == Endpoint.CIRCLE;}  }
class C{  public WindowDimensions(Rectangle bounds,boolean isClient){  this(bounds,null,isClient);}  }
class C{  public double pdf(double x){  throw new RuntimeException("not implemented");}  }
class C{  public LMDirichletSimilarity(){  this(2000);}  }
class C{  public static void main(String... args) throws Exception {  DeleteDbFiles.execute("./data","test",true);  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:./data/test","sa","");  Statement stat=conn.createStatement();  stat.execute("CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR)");  stat.execute("INSERT INTO TEST VALUES(1, 'Hello'), (2, 'World');");  stat.close();  conn.close();  System.out.println("Compacting...");  compact("./data","test","sa","");  System.out.println("Done.");}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!isInstanceAttribute()) {    String sql="UPDATE M_AttributeSet mas" + " SET IsInstanceAttribute='Y' " + "WHERE M_AttributeSet_ID=" + getM_AttributeSet_ID() + " AND IsInstanceAttribute='N'"+ " AND (IsSerNo='Y' OR IsLot='Y' OR IsGuaranteeDate='Y'"+ " OR EXISTS (SELECT * FROM M_AttributeUse mau"+ " INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) "+ "WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID"+ " AND mau.IsActive='Y' AND ma.IsActive='Y'"+ " AND ma.IsInstanceAttribute='Y')"+ ")";    int no=DB.executeUpdate(sql,get_TrxName());    if (no != 0) {      log.warning("Set Instance Attribute");      setIsInstanceAttribute(true);    }  }  if (isInstanceAttribute() && !isSerNo() && !isLot()&& !isGuaranteeDate()) {    String sql="UPDATE M_AttributeSet mas" + " SET IsInstanceAttribute='N' " + "WHERE M_AttributeSet_ID=" + getM_AttributeSet_ID() + " AND IsInstanceAttribute='Y'"+ "	AND IsSerNo='N' AND IsLot='N' AND IsGuaranteeDate='N'"+ " AND NOT EXISTS (SELECT * FROM M_AttributeUse mau"+ " INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) "+ "WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID"+ " AND mau.IsActive='Y' AND ma.IsActive='Y'"+ " AND ma.IsInstanceAttribute='Y')";    int no=DB.executeUpdate(sql,get_TrxName());    if (no != 0) {      log.warning("Reset Instance Attribute");      setIsInstanceAttribute(false);    }  }  return success;}  }
class C{  protected Suite(RunnerBuilder builder,Class<?> klass,Class<?>[] suiteClasses) throws InitializationError {  this(klass,builder.runners(klass,suiteClasses));}  }
class C{  public void resetScores(){  for (  String playerName : gameData.getPlayers()) {    gameData.getScores().put(playerName,Long.valueOf(0L));  }}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public void sort(Comparator<Mounted> comparator){  Collections.sort(weapons,comparator);  fireContentsChanged(this,0,weapons.size() - 1);}  }
class C{  public SurfaceSquare(LatLon center,double size){  super(center,size,size);}  }
class C{  public static long readHexLong(Map<String,? extends Object> map,String key,long defaultValue){  Object v=map.get(key);  if (v == null) {    return defaultValue;  } else   if (v instanceof Long) {    return (Long)v;  }  try {    return parseHexLong((String)v);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",v,e);  }}  }
class C{  public int size(){  throw new RuntimeException("IntegerNumberer does not implement the size() method.");}  }
class C{  protected Object clone() throws CloneNotSupportedException {  return (super.clone());}  }
class C{  private JComponent createCalculatorNumberPad(){  JPanel panel=new JPanel();  panel.setLayout(new GridLayout(4,4));  panel.add(createCalculatorButton("7"));  panel.add(createCalculatorButton("8"));  panel.add(createCalculatorButton("9"));  panel.add(createCalculatorButton("+"));  panel.add(createCalculatorButton("4"));  panel.add(createCalculatorButton("5"));  panel.add(createCalculatorButton("6"));  panel.add(createCalculatorButton("-"));  panel.add(createCalculatorButton("1"));  panel.add(createCalculatorButton("2"));  panel.add(createCalculatorButton("3"));  panel.add(createCalculatorButton("*"));  panel.add(createCalculatorButton("0"));  panel.add(createCalculatorButton("."));  panel.add(createCalculatorButton(ConstantExpression.E.getName()));  panel.add(createCalculatorButton(ConstantExpression.PI.getName()));  panel.setPreferredSize(new Dimension(150,150));  return panel;}  }
class C{  public Vector3i sub(int x,int y,int z,Vector3i dest){  dest.x=this.x - x;  dest.y=this.y - y;  dest.z=this.z - z;  return dest;}  }
class C{  static public boolean isCNFDisjunct(final FunctionNode functionNode){  final URI functionURI=functionNode.getFunctionURI();  if (functionURI.equals(FunctionRegistry.NOT)) {    return isCNFNegationOrTerminal(functionNode);  } else   if (functionURI.equals(FunctionRegistry.OR)) {    boolean isCNFDisjunct=!(functionNode.get(0) instanceof FunctionNode) || isCNFDisjunct((FunctionNode)functionNode.get(0));    isCNFDisjunct&=!(functionNode.get(1) instanceof FunctionNode) || isCNFDisjunct((FunctionNode)functionNode.get(1));    return isCNFDisjunct;  } else   if (functionURI.equals(FunctionRegistry.AND)) {    return false;  } else {    return true;  }}  }
class C{  private void testUpdatingLobRow() throws Exception {  if (config.memory) {    return;  }  deleteDb("lob");  Connection conn=getConnection("lob");  Statement stat=conn.createStatement();  stat.execute("create table test(id int primary key, " + "name clob, counter int)");  stat.execute("insert into test(id, name) select x, " + "space(100000) from system_range(1, 3)");  ResultSet rs=stat.executeQuery("select name " + "from test where id = 1");  rs.next();  Reader r=rs.getClob("name").getCharacterStream();  Random random=new Random();  char[] tmp=new char[256];  while (r.read(tmp) > 0) {    stat.execute("update test set counter = " + random.nextInt(1000) + " where id = 1");  }  r.close();  conn.close();}  }
class C{  private void checkConfigurationMatchesResource(String configuration,Resource resource){  try {    String pathToResourceRef="//resource-ref[res-ref-name='" + resource.getName() + "']";    if (resource.getClassName() != null) {      XMLAssert.assertXpathEvaluatesTo(resource.getClassName(),pathToResourceRef + "/res-type",configuration);    } else {      XMLAssert.assertXpathEvaluatesTo(resource.getType(),pathToResourceRef + "/res-type",configuration);    }    for (    String propertyName : resource.getParameterNames()) {      XMLAssert.assertXpathEvaluatesTo(resource.getParameter(propertyName),pathToResourceRef + "/init-param/@" + propertyName,configuration);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private Builder(IndexDocumentOptions options){  document=options.document;  documentInputStream=options.documentInputStream;  mediaType=options.mediaType;  metadata=options.metadata;  conversionConfiguration=options.convertDocumentConfig;  indexConfiguration=options.indexConfiguration;  dryRun=options.dryRun;}  }
class C{  public void updateTimestamp(int columnIndex,Timestamp x) throws SQLException {  checkUpdatable();  getField(columnIndex).setTimestamp(x);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STATE_ENTITY___ENTRY_OR_EXIT_ACTION_1:    getEntryOrExitAction_1().clear();  return;case UmplePackage.STATE_ENTITY___AUTO_TRANSITION_1:getAutoTransition_1().clear();return;case UmplePackage.STATE_ENTITY___TRANSITION_1:getTransition_1().clear();return;case UmplePackage.STATE_ENTITY___ACTIVITY_1:getActivity_1().clear();return;case UmplePackage.STATE_ENTITY___STATE_1:getState_1().clear();return;case UmplePackage.STATE_ENTITY___TRACE_1:getTrace_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public void populateDAO(Object value,int row,int column){  final PortfolioAccount element=(PortfolioAccount)getData().getPortfolioAccounts().get(row);switch (column) {case 0:{      element.getAccount().setName((String)value);      break;    }case 1:{    element.getAccount().setAccountNumber((String)value);    break;  }case 2:{  element.getAccount().setAccountType(((AccountType)value).getCode());  break;}case 3:{element.getAccount().setAlias((String)value);break;}case 4:{element.getAccount().setCurrency(((Currency)value).getCode());break;}case 5:{element.getAccount().setAvailableFunds(((Money)value).getBigDecimalValue());break;}case 6:{element.getAccount().setBuyingPower(((Money)value).getBigDecimalValue());break;}case 7:{element.getAccount().setCashBalance(((Money)value).getBigDecimalValue());break;}case 8:{element.getAccount().setGrossPositionValue(((Money)value).getBigDecimalValue());break;}case 9:{element.getAccount().setRealizedPnL(((Money)value).getBigDecimalValue());break;}case 10:{element.getAccount().setUnrealizedPnL(((Money)value).getBigDecimalValue());break;}case 11:{element.getAccount().setLastUpdateDate(((Date)value).getZonedDateTime());break;}default :{}}element.setDirty(true);}  }
class C{  public static void printMetricHistory(List<? extends Host> hosts,PowerVmAllocationPolicyMigrationAbstract vmAllocationPolicy){  for (int i=0; i < 10; i++) {    Host host=hosts.get(i);    Log.printLine("Host #" + host.getId());    Log.printLine("Time:");    if (!vmAllocationPolicy.getTimeHistory().containsKey(host.getId())) {      continue;    }    for (    Double time : vmAllocationPolicy.getTimeHistory().get(host.getId())) {      Log.format("%.2f, ",time);    }    Log.printLine();    for (    Double utilization : vmAllocationPolicy.getUtilizationHistory().get(host.getId())) {      Log.format("%.2f, ",utilization);    }    Log.printLine();    for (    Double metric : vmAllocationPolicy.getMetricHistory().get(host.getId())) {      Log.format("%.2f, ",metric);    }    Log.printLine();  }}  }
class C{  private void load(){  AccessToken accessToken=accessTokenManager.getAccessToken();  if (accessToken != null) {    AccessTokenSession session=new AccessTokenSession(sessionConfiguration,accessTokenManager);    rideRequestView.setSession(session);    loadRideRequestView();  } else {    login();  }}  }
class C{  public void testProcessWaitQueue(){}  }
class C{  private static double perp(int i,int[][] nearMe,double sigma,List<List<? extends VecPaired<Vec,Double>>> neighbors,List<Vec> vecs,List<Double> accelCache,DistanceMetric dm){  double hp=0;  for (int j_indx=0; j_indx < nearMe[i].length; j_indx++) {    double p_ji=p_j_i(nearMe[i][j_indx],i,sigma,neighbors,vecs,accelCache,dm);    if (p_ji > 0)     hp+=p_ji * FastMath.log2(p_ji);  }  hp*=-1;  return FastMath.pow2(hp);}  }
class C{  public boolean drop(){  boolean result=true;  String sql=s_dbEngine.sqlObjectDetail_dropColumn(m_parent.getVendor(),m_parent.getCatalog(),m_parent.getSchema(),m_table,m_name);  Statement stmt=m_parent.setStatement();  if (m_parent.executeUpdate(stmt,sql,false,false) == null)   result=false;  m_parent.releaseStatement(stmt);  return result;}  }
class C{  @Override public void initialize(){  RuntimeMeasurements.installTimerNullListener((YieldCounterListener)listener);}  }
class C{  @OnError public void onError(final Session session,final Throwable error){  SESSIONS.remove(session);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof StringTemplate) {    return ((StringTemplate)o).string.equals(string);  }  return false;}  }
class C{  public long sum(){  long sum=0L;  for (  AtomicLong value : map.values()) {    sum=sum + value.get();  }  return sum;}  }
class C{  public boolean isDestroyed(){  return cert == null && key == null && alias == null;}  }
class C{  public static final int ceilPowerOf2(int x){  int pow2=1;  while (pow2 < x) {    pow2<<=1;  }  return pow2;}  }
class C{  public double calculateCostForStringAVM(RegexGraph graph){  final int ROWS=graph.getNumberOfRows();  final int COLUMNS=graph.getNumberOfColumns();  final double[][][] matrix=new double[ROWS][COLUMNS][3];  calculateInsertionCostOnFirstRow(graph,matrix);  for (int i=1; i < ROWS; i++) {    for (int col=0; col < COLUMNS; col++) {      matrix[i][col][DEL]=Double.MAX_VALUE;      matrix[i][col][REP]=Double.MAX_VALUE;      matrix[i][col][INS]=Double.MAX_VALUE;      for (      GraphTransition t : graph.getIncomingTransitions(i,col)) {        int otherCol=graph.getColumn(t.fromState);        int otherRow=t.fromRow;        if (t.type.equals(GraphTransition.TransitionType.INSERTION)) {          assert otherRow == i;          matrix[i][col][INS]=Math.min(matrix[i][col][INS],getSubPathCost(matrix[otherRow][otherCol][DEL],t.cost));          matrix[i][col][INS]=Math.min(matrix[i][col][INS],getSubPathCost(matrix[otherRow][otherCol][REP],t.cost));          matrix[i][col][INS]=Math.min(matrix[i][col][INS],getSubPathCost(matrix[otherRow][otherCol][INS],t.cost));        } else         if (t.type.equals(GraphTransition.TransitionType.REPLACEMENT)) {          matrix[i][col][REP]=Math.min(matrix[i][col][REP],getSubPathCost(matrix[otherRow][otherCol][DEL],t.cost));          matrix[i][col][REP]=Math.min(matrix[i][col][REP],getSubPathCost(matrix[otherRow][otherCol][REP],t.cost));          matrix[i][col][INS]=Math.min(matrix[i][col][INS],getSubPathCost(matrix[otherRow][otherCol][DEL],t.cost));          matrix[i][col][INS]=Math.min(matrix[i][col][INS],getSubPathCost(matrix[otherRow][otherCol][REP],t.cost));        } else         if (t.type.equals(GraphTransition.TransitionType.DELETION)) {          matrix[i][col][DEL]=Math.min(matrix[i][col][DEL],getSubPathCost(matrix[otherRow][otherCol][DEL],t.cost));          matrix[i][col][REP]=Math.min(matrix[i][col][REP],getSubPathCost(matrix[otherRow][otherCol][DEL],t.cost));          matrix[i][col][INS]=Math.min(matrix[i][col][INS],getSubPathCost(matrix[otherRow][otherCol][DEL],t.cost));        } else         if (t.type.equals(GraphTransition.TransitionType.PHANTOM)) {          assert t.cost == 0;          matrix[i][col][DEL]=Math.min(matrix[i][col][DEL],matrix[otherRow][otherCol][DEL]);          matrix[i][col][REP]=Math.min(matrix[i][col][REP],matrix[otherRow][otherCol][REP]);          matrix[i][col][INS]=Math.min(matrix[i][col][INS],matrix[otherRow][otherCol][INS]);        }      }    }  }  double min=Double.MAX_VALUE;  for (  double value : matrix[ROWS - 1][COLUMNS - 1]) {    if (value < min) {      min=value;    }  }  return min;}  }
class C{  public static long reverseBits(final short value){  final int b0=JBBPUtils.reverseBitsInByte((byte)value) & 0xFF;  final int b1=JBBPUtils.reverseBitsInByte((byte)(value >> 8)) & 0xFF;  return (long)((b0 << 8) | b1) & 0xFFFFL;}  }
class C{  public boolean isEnabled(Object sender){  return true;}  }
class C{  public void add(Predicate p,FontAction f){  super.add(p,f);}  }
class C{  public int hashCode(){  int hashCode=this.hashCode;  if (hashCode == 0) {    hashCode=((groupId.hashCode() * 19 + artifactId.hashCode()) * 19 + version.hashCode()) * 19 + classifier.hashCode();    if (hashCode == 0) {      hashCode=-1;    }    this.hashCode=hashCode;  }  return hashCode;}  }
class C{  public static ColorRGB fromName(String name){  if (colorNames == null) {    loadColorNames();  }  return colorNames.get(name);}  }
class C{  String applyValueConverter(QualifiedName qualifiedName){  String result=qualifiedNameConverter.toString(qualifiedName);  result=valueConverter.toString(result);  return result;}  }
class C{  public boolean dataNew(boolean copy){  log.fine("#" + m_vo.TabNo);  if (!isInsertRecord()) {    log.warning("Inset Not allowed in TabNo=" + m_vo.TabNo);    return false;  }  if (m_vo.TabLevel > 0 && m_vo.TabNo > 0) {    boolean processed="Y".equals(Env.getContext(m_vo.ctx,m_vo.WindowNo,"Processed"));    if (processed) {      log.warning("Not allowed in TabNo=" + m_vo.TabNo + " -> Processed="+ processed);      return false;    }    log.finest("Processed=" + processed);  }  if (isDetail() && m_parentNeedSave)   return false;  int oldCurrentRow=m_currentRow;  m_currentRow=m_currentRow + 1;  boolean retValue=m_mTable.dataNew(oldCurrentRow,copy);  m_currentRow=oldCurrentRow;  if (!retValue)   return retValue;  setCurrentRow(m_currentRow + 1,true);  for (int i=0; i < getFieldCount(); i++)   processCallout(getField(i));  for (int i=0; i < getFieldCount(); i++) {    getField(i).refreshLookup();    getField(i).validateValue();  }  m_mTable.setChanged(false);  fireStateChangeEvent(new StateChangeEvent(this,StateChangeEvent.DATA_NEW));  return retValue;}  }
class C{  public void drop(){  makeActive();  getRawDatabase().drop();}  }
class C{  @Override public void updateAfterMisfire(org.quartz.Calendar cal){  int instr=getMisfireInstruction();  if (instr == Trigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY)   return;  if (instr == MISFIRE_INSTRUCTION_SMART_POLICY) {    instr=MISFIRE_INSTRUCTION_FIRE_ONCE_NOW;  }  if (instr == MISFIRE_INSTRUCTION_DO_NOTHING) {    Date newFireTime=getFireTimeAfter(new Date());    while (newFireTime != null && cal != null && !cal.isTimeIncluded(newFireTime.getTime())) {      newFireTime=getFireTimeAfter(newFireTime);    }    setNextFireTime(newFireTime);  } else   if (instr == MISFIRE_INSTRUCTION_FIRE_ONCE_NOW) {    setNextFireTime(new Date());  }}  }
class C{  public <A extends Annotation>Expressions buildUserCheckFieldExpressions(final PersistentResource resource,final Class<A> annotationClass,final String field){  Class<?> resourceClass=resource.getResourceClass();  if (!entityDictionary.entityHasChecksForPermission(resourceClass,annotationClass)) {    return SUCCESSFUL_EXPRESSIONS;  }  final Function<Check,Expression> userCheckFn=null;  return new Expressions(buildSpecificFieldExpression(new PermissionCondition(annotationClass,resource,field),userCheckFn),null);}  }
class C{  private void scrollIntoSlots(){  if (localLOGV)   Log.d(TAG,"scrollIntoSlots");  if (getChildCount() == 0 || mSelectedChild == null)   return;  int selectedCenter=0;  int targetCenter=0;  if (mOrientation == HORIZONTAL) {    selectedCenter=getHorizontalCenterOfView(mSelectedChild);    targetCenter=getHorizontalCenterOfGallery();  } else {    selectedCenter=getVerticalCenterOfView(mSelectedChild);    targetCenter=getVerticalCenterOfGallery();  }  int scrollAmount=targetCenter - selectedCenter;  if (scrollAmount != 0) {    mFlingRunnable.startUsingDistance(scrollAmount);  } else {    onFinishedMovement();  }}  }
class C{  private String checkSettings(){  if (aliasField.getText().isEmpty()) {    return "alias_cannot_be_empty";  }  if (!RepositoryLocation.isNameValid(aliasField.getText())) {    return "alias_invalid";  }  if (fileField.getText().isEmpty()) {    return "folder_cannot_be_empty";  }  File file=new File(fileField.getText());  if (file.exists() && !file.isDirectory()) {    return "root_is_not_a_directory";  }  if (file.exists() && !file.canWrite()) {    return "root_is_not_writable";  }  while (!file.exists()) {    file=file.getParentFile();    if (file == null) {      return "cannot_determine_root";    }  }  if (!file.canWrite()) {    return "cannot_create_root_folder";  }  return null;}  }
class C{  public DrawerBuilder withStickyFooter(@LayoutRes int stickyFooterRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (stickyFooterRes != -1) {    this.mStickyFooterView=(ViewGroup)mActivity.getLayoutInflater().inflate(stickyFooterRes,null,false);  }  return this;}  }
class C{  public int hashCode(){  int h=0;  if (extensionValue != null) {    byte[] val=extensionValue;    int len=val.length;    while (len > 0)     h+=len * val[--len];  }  h=h * hashMagic + extensionId.hashCode();  h=h * hashMagic + (critical ? 1231 : 1237);  return h;}  }
class C{  public DataBufferUShort(int size){  super(STABLE,TYPE_USHORT,size);  data=new short[size];  bankdata=new short[1][];  bankdata[0]=data;}  }
class C{  public RosterGroupComboBox(String selection){  this(Roster.getDefault(),selection);}  }
class C{  private boolean extraEntity(String outputString,int charToMap){  boolean extra=false;  if (charToMap < ASCII_MAX) {switch (charToMap) {case '"':      if (!outputString.equals("&quot;"))       extra=true;    break;case '&':  if (!outputString.equals("&amp;"))   extra=true;break;case '<':if (!outputString.equals("&lt;")) extra=true;break;case '>':if (!outputString.equals("&gt;")) extra=true;break;default :extra=true;}}return extra;}  }
class C{  @SuppressWarnings("null") public byte[] toByteArray(final ArrayOfItemsSerDe<T> serDe,final Class<?> clazz){  final int preLongs, outBytes;  final boolean empty=gadget_ == null;  final byte[] gadgetBytes=(gadget_ != null ? gadget_.toByteArray(serDe,clazz) : null);  if (empty) {    preLongs=Family.RESERVOIR_UNION.getMinPreLongs();    outBytes=8;  } else {    preLongs=Family.RESERVOIR_UNION.getMaxPreLongs();    outBytes=(preLongs << 3) + gadgetBytes.length;  }  final byte[] outArr=new byte[outBytes];  final Memory mem=new NativeMemory(outArr);  long pre0=0L;  pre0=PreambleUtil.insertPreLongs(preLongs,pre0);  pre0=PreambleUtil.insertSerVer(SER_VER,pre0);  pre0=PreambleUtil.insertFamilyID(Family.RESERVOIR_UNION.getID(),pre0);  pre0=(empty) ? PreambleUtil.insertFlags(EMPTY_FLAG_MASK,pre0) : PreambleUtil.insertFlags(0,pre0);  pre0=PreambleUtil.insertMaxK(encodedMaxK_,pre0);  pre0=PreambleUtil.insertSerDeId(serDe.getId(),pre0);  mem.putLong(0,pre0);  if (!empty) {    final int preBytes=preLongs << 3;    mem.putByteArray(preBytes,gadgetBytes,0,gadgetBytes.length);  }  return outArr;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (derivedFeatureID) {case GamlPackage.SEQUATIONS__NAME:      return GamlPackage.GAML_DEFINITION__NAME;default :    return -1;}}if (baseClass == EquationDefinition.class) {switch (derivedFeatureID) {default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @SuppressWarnings("unchecked") private Range(final T element1,final T element2,final Comparator<T> comp){  if (element1 == null || element2 == null) {    throw new IllegalArgumentException("Elements in a range must not be null: element1=" + element1 + ", element2="+ element2);  }  if (comp == null) {    this.comparator=ComparableComparator.INSTANCE;  } else {    this.comparator=comp;  }  if (this.comparator.compare(element1,element2) < 1) {    this.minimum=element1;    this.maximum=element2;  } else {    this.minimum=element2;    this.maximum=element1;  }}  }
class C{  public static void polygon(double[] x,double[] y){  int N=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < N; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.draw(path);  draw();}  }
class C{  String toString(Scope.Entry e,Scope.Entry[] table,boolean ref){  if (e == null)   return "null";  if (e.sym == null)   return "sent";  if (ref) {    int index=indexOf(table,e);    if (index != -1)     return String.valueOf(index);  }  return "(" + e.sym.name + ":"+ e.sym+ ",shdw:"+ toString(e.next(),table,true)+ ",sibl:"+ toString(e.sibling,table,true)+ ((e.sym.owner != e.scope.owner) ? (",BOGUS[" + e.sym.owner + ","+ e.scope.owner+ "]") : "")+ ")";}  }
class C{  @Override public <U extends Comparable<? super U>>Eval<Optional<T>> minBy(final Function<? super T,? extends U> function){  return Eval.later(null);}  }
class C{  private void executeSave(HttpServletRequest request,MobileSessionCtx wsc,WWindowStatus ws){  log.info("");  boolean error=updateFields(request,wsc,ws);  log.fine("Mandatory check");  int size=ws.curTab.getFieldCount();  for (int i=0; i < size; i++) {    GridField field=ws.curTab.getField(i);    if (field.isMandatory(true)) {      Object value=field.getValue();      if (value == null || value.toString().length() == 0) {        field.setInserting(true);        field.setError(true);        field.setErrorValue(value == null ? null : value.toString());        if (!error)         error=true;        log.info("Mandatory Error: " + field.getColumnName());      } else       field.setError(false);    }  }  if (error)   return;  if (!ws.curTab.dataSave(true))   ws.curTab.dataIgnore(); else   ws.setRO(true);  log.fine("done");}  }
class C{  public static void recomputeSSA(IR ir){  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=reg.getNext()) {    reg.putSSA((reg.defList != null && reg.defList.getNext() == null));  }}  }
class C{  @Contract(pure=true) public static int lastIndexOf(@NotNull CharSequence s,char c,int start,int end){  for (int i=end - 1; i >= start; i--) {    if (s.charAt(i) == c)     return i;  }  return -1;}  }
class C{  public Boolean isMemoryHotAddEnabled(){  return memoryHotAddEnabled;}  }
class C{  public static Vec2D fromDegrees2(double angleInDegrees,double magnitude){  double x=magnitude * Math.sin(angleInDegrees * Math.PI / 180);  double y=magnitude * Math.cos(angleInDegrees * Math.PI / 180);  return new Vec2D(x,y);}  }
class C{  public static void pruneCountHashMap(HashMap<?,Integer> hm,int p){  ArrayList removeList=new ArrayList();  for (  Object obj : hm.keySet()) {    if (hm.get(obj) <= p) {      removeList.add(obj);    }  }  for (  Object obj : removeList) {    hm.remove(obj);  }  removeList.clear();  removeList=null;}  }
class C{  public JPanelConfigPayment(){  initComponents();  jcboCardReader.addActionListener(dirty);  jcboPaymentGateway.addActionListener(dirty);  jchkPaymentTest.addActionListener(dirty);  initPayments("Not defined",new ConfigPaymentPanelEmpty());  initPayments("external",new ConfigPaymentPanelEmpty());  initPayments("PayPoint / SecPay",new ConfigPaymentPanelGeneric());  initPayments("AuthorizeNet",new ConfigPaymentPanelGeneric());  initPayments("BluePay AUTH.NET EMU",new ConfigPaymentPanelBluePay20POST());  initPayments("BluePay 2.0 POST",new ConfigPaymentPanelBluePay20POST());  initPayments("Planetauthorize",new ConfigPaymentPanelGeneric());  initPayments("First Data / LinkPoint / YourPay",new ConfigPaymentPanelLinkPoint());  initPayments("PaymentsGateway.net",new ConfigPaymentPanelGeneric());  initPayments("La Caixa (Spain)",new ConfigPaymentPanelCaixa());  jcboCardReader.addItem("Not defined");  jcboCardReader.addItem("Generic");  jcboCardReader.addItem("Intelligent");  jcboCardReader.addItem("Keyboard");}  }
class C{  public VectorClock(VectorClock other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetVersions()) {    List<ClockEntry> __this__versions=new ArrayList<ClockEntry>();    for (    ClockEntry other_element : other.versions) {      __this__versions.add(new ClockEntry(other_element));    }    this.versions=__this__versions;  }  this.timestamp=other.timestamp;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element createdNode;  Node parentNode;  doc=(Document)load("hc_staff",false);  createdNode=doc.createElement("br");  parentNode=createdNode.getParentNode();  assertNull("parentNode",parentNode);}  }
class C{  public void log(Throwable exception){  this.bot.log(this,exception);}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints the ASM code to generate the given class.");    System.err.println("Usage: ASMifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(null,new ASMifier(),new PrintWriter(System.out)),flags);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting NetworkExample2...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    Datacenter datacenter0=createDatacenter("Datacenter_0");    Datacenter datacenter1=createDatacenter("Datacenter_1");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=250;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmid++;    Vm vm2=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm1);    vmlist.add(vm2);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    long length=40000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId);    id++;    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet2.setUserId(brokerId);    cloudletList.add(cloudlet1);    cloudletList.add(cloudlet2);    broker.submitCloudletList(cloudletList);    broker.bindCloudletToVm(cloudlet1.getCloudletId(),vm1.getId());    broker.bindCloudletToVm(cloudlet2.getCloudletId(),vm2.getId());    NetworkTopology.buildNetworkTopology("topology.brite");    int briteNode=0;    NetworkTopology.mapNode(datacenter0.getId(),briteNode);    briteNode=2;    NetworkTopology.mapNode(datacenter1.getId(),briteNode);    briteNode=3;    NetworkTopology.mapNode(broker.getId(),briteNode);    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("NetworkExample2 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public void testRequiresMore() throws IOException {  BytesRef lake=new BytesRef("lake");  BytesRef star=new BytesRef("star");  BytesRef ret=new BytesRef("ret");  Input keys[]=new Input[]{new Input("top of the lake",18,lake),new Input("star wars: episode v - the empire strikes back",12,star),new Input("the returned",10,ret)};  Path tempDir=createTempDir("BlendedInfixSuggesterTest");  Analyzer a=new StandardAnalyzer(CharArraySet.EMPTY_SET);  BlendedInfixSuggester suggester=new BlendedInfixSuggester(newFSDirectory(tempDir),a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,1,false);  suggester.build(new InputArrayIterator(keys));  assertEquals(2,suggester.lookup("the",2,true,false).size());  long w0=getInResults(suggester,"the",ret,2);  assertTrue(w0 < 0);  assertEquals(3,suggester.lookup("the",3,true,false).size());  long w1=getInResults(suggester,"the",ret,3);  assertTrue(w1 > 0);  suggester.close();  suggester=new BlendedInfixSuggester(newFSDirectory(tempDir),a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,2,false);  suggester.build(new InputArrayIterator(keys));  long w2=getInResults(suggester,"the",ret,2);  assertTrue(w2 > 0);  long w3=getInResults(suggester,"the",star,2);  assertTrue(w3 < 0);  suggester.close();}  }
class C{  public Property createDemand(final PropertyImpl property,final Date dateOfCompletion) throws TaxCalculatorExeption {  LOGGER.debug("Entered into createDemand");  LOGGER.debug("createDemand: Property: " + property + ", dateOfCompletion: "+ dateOfCompletion);  instTaxMap=taxCalculator.calculatePropertyTax(property,dateOfCompletion);  Ptdemand ptDemand;  final Set<Ptdemand> ptDmdSet=new HashSet<Ptdemand>();  Set<EgDemandDetails> dmdDetailSet;  List<Installment> instList=new ArrayList<Installment>();  instList=new ArrayList<Installment>(instTaxMap.keySet());  LOGGER.debug("createDemand: instList: " + instList);  currentInstall=propertyTaxCommonUtils.getCurrentInstallment();  property.getPtDemandSet().clear();  Map<String,Installment> yearwiseInstMap=propertyTaxUtil.getInstallmentsForCurrYear(new Date());  Installment installmentFirstHalf=yearwiseInstMap.get(PropertyTaxConstants.CURRENTYEAR_FIRST_HALF);  Installment installmentSecondHalf=yearwiseInstMap.get(PropertyTaxConstants.CURRENTYEAR_SECOND_HALF);  APTaxCalculationInfo taxCalcInfo=null;  if (instList.size() == 1 && instList.get(0).equals(installmentSecondHalf)) {    taxCalcInfo=(APTaxCalculationInfo)instTaxMap.get(installmentSecondHalf);  } else   if (dateOfCompletion.after(installmentSecondHalf.getToDate())) {    taxCalcInfo=(APTaxCalculationInfo)instTaxMap.get(installmentSecondHalf);    instList.remove(installmentSecondHalf);  } else {    taxCalcInfo=(APTaxCalculationInfo)instTaxMap.get(installmentFirstHalf);  }  dmdDetailSet=createAllDmdDetails(instList,instTaxMap);  final PTDemandCalculations ptDmdCalc=new PTDemandCalculations();  ptDemand=new Ptdemand();  ptDemand.setBaseDemand(taxCalcInfo.getTotalTaxPayable());  ptDemand.setCreateDate(new Date());  ptDemand.setEgInstallmentMaster(installmentFirstHalf);  ptDemand.setEgDemandDetails(dmdDetailSet);  ptDemand.setIsHistory("N");  ptDemand.setEgptProperty(property);  ptDmdSet.add(ptDemand);  ptDmdCalc.setPtDemand(ptDemand);  ptDmdCalc.setPropertyTax(taxCalcInfo.getTotalTaxPayable());  ptDmdCalc.setTaxInfo(taxCalcInfo.getTaxCalculationInfoXML().getBytes());  propPerServ.applyAuditing(ptDmdCalc);  ptDemand.setDmdCalculations(ptDmdCalc);  if (property.getPropertyDetail().getPropertyTypeMaster().getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND))   ptDmdCalc.setAlv(taxCalcInfo.getTotalNetARV()); else   if (installmentFirstHalf.equals(currentInstall)) {    for (    final Floor floor : property.getPropertyDetail().getFloorDetails())     ptDmdCalc.addFlrwiseDmdCalculations(createFloorDmdCalc(ptDmdCalc,floor,taxCalcInfo));    ptDmdCalc.setAlv(totalAlv);  }  property.getPtDemandSet().addAll(ptDmdSet);  LOGGER.debug("Exiting from createDemand");  return property;}  }
class C{  public SecondBestScoringFunctionFactory(ScoringFunctionFactory delegate){  this.delegate=delegate;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  LOG.i(TAG,"Apache Cordova native platform version " + CordovaWebView.CORDOVA_VERSION + " is starting");  LOG.d(TAG,"CordovaActivity.onCreate()");  loadConfig();  if (!preferences.getBoolean("ShowTitle",false)) {    getWindow().requestFeature(Window.FEATURE_NO_TITLE);  }  if (preferences.getBoolean("SetFullscreen",false)) {    Log.d(TAG,"The SetFullscreen configuration is deprecated in favor of Fullscreen, and will be removed in a future version.");    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  } else   if (preferences.getBoolean("Fullscreen",false)) {    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  } else {    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);  }  super.onCreate(savedInstanceState);  cordovaInterface=makeCordovaInterface();  if (savedInstanceState != null) {    cordovaInterface.restoreInstanceState(savedInstanceState);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.261 -0400",hash_original_method="29E42406182AF866EF1235165AD5E16B",hash_generated_method="76BEFB22B5B643507DF59704E807DC6D") @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  protected CategoryDataset createWeightDataset(Timestamp start,MResource rosource){  GregorianCalendar gc1=new GregorianCalendar();  gc1.setTimeInMillis(start.getTime());  gc1.clear(Calendar.MILLISECOND);  gc1.clear(Calendar.SECOND);  gc1.clear(Calendar.MINUTE);  gc1.clear(Calendar.HOUR_OF_DAY);  String namecapacity=Msg.translate(Env.getCtx(),"Capacity");  String nameload=Msg.translate(Env.getCtx(),"Load");  String namesummary=Msg.translate(Env.getCtx(),"Summary");  String namepossiblecapacity="Possible Capacity";  MResourceType t=MResourceType.get(Env.getCtx(),rosource.getS_ResourceType_ID());  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  double currentweight=DB.getSQLValue(null,"SELECT SUM( (mo.qtyordered-mo.qtydelivered)*(SELECT mp.weight FROM M_Product mp WHERE  mo.m_product_id=mp.m_product_id )) FROM PP_Order mo WHERE AD_Client_ID=?",rosource.getAD_Client_ID());  double dailyCapacity=rosource.getDailyCapacity().doubleValue();  double utilization=rosource.getPercentUtilization().doubleValue();  double summary=0;  int day=0;  while (day < 32) {    day++;switch (gc1.get(Calendar.DAY_OF_WEEK)) {case Calendar.SUNDAY:      if (t.isOnSunday()) {        currentweight-=(dailyCapacity * utilization) / 100;        summary+=((dailyCapacity * utilization) / 100);        dataset.addValue(dailyCapacity,namepossiblecapacity,new Integer(day));        dataset.addValue((dailyCapacity * utilization) / 100,namecapacity,new Integer(day));      } else {        dataset.addValue(0,namepossiblecapacity,new Integer(day));        dataset.addValue(0,namecapacity,new Integer(day));      }    break;case Calendar.MONDAY:  if (t.isOnMonday()) {    currentweight-=(dailyCapacity * utilization) / 100;    summary+=((dailyCapacity * utilization) / 100);    dataset.addValue(dailyCapacity,namepossiblecapacity,new Integer(day));    dataset.addValue((dailyCapacity * utilization) / 100,namecapacity,new Integer(day));  } else {    dataset.addValue(0,namepossiblecapacity,new Integer(day));    dataset.addValue(0,namecapacity,new Integer(day));  }break;case Calendar.TUESDAY:if (t.isOnTuesday()) {currentweight-=(dailyCapacity * utilization) / 100;summary+=((dailyCapacity * utilization) / 100);dataset.addValue(dailyCapacity,namepossiblecapacity,new Integer(day));dataset.addValue((dailyCapacity * utilization) / 100,namecapacity,new Integer(day));} else {dataset.addValue(0,namepossiblecapacity,new Integer(day));dataset.addValue(0,namecapacity,new Integer(day));}break;case Calendar.WEDNESDAY:if (t.isOnWednesday()) {currentweight-=(dailyCapacity * utilization) / 100;summary+=((dailyCapacity * utilization) / 100);dataset.addValue(dailyCapacity,namepossiblecapacity,new Integer(day));dataset.addValue((dailyCapacity * utilization) / 100,namecapacity,new Integer(day));} else {dataset.addValue(0,namepossiblecapacity,new Integer(day));dataset.addValue(0,namecapacity,new Integer(day));}break;case Calendar.THURSDAY:if (t.isOnThursday()) {currentweight-=(dailyCapacity * utilization) / 100;summary+=((dailyCapacity * utilization) / 100);dataset.addValue(dailyCapacity,namepossiblecapacity,new Integer(day));dataset.addValue((dailyCapacity * utilization) / 100,namecapacity,new Integer(day));} else {dataset.addValue(0,namepossiblecapacity,new Integer(day));dataset.addValue(0,namecapacity,new Integer(day));}break;case Calendar.FRIDAY:if (t.isOnFriday()) {currentweight-=(dailyCapacity * utilization) / 100;summary+=((dailyCapacity * utilization) / 100);dataset.addValue(dailyCapacity,namepossiblecapacity,new Integer(day));dataset.addValue((dailyCapacity * utilization) / 100,namecapacity,new Integer(day));} else {dataset.addValue(0,namepossiblecapacity,new Integer(day));dataset.addValue(0,namecapacity,new Integer(day));}break;case Calendar.SATURDAY:if (t.isOnSaturday()) {currentweight-=(dailyCapacity * utilization) / 100;summary+=((dailyCapacity * utilization) / 100);dataset.addValue(dailyCapacity,namepossiblecapacity,new Integer(day));dataset.addValue((dailyCapacity * utilization) / 100,namecapacity,new Integer(day));} else {dataset.addValue(0,namepossiblecapacity,new Integer(day));dataset.addValue(0,namecapacity,new Integer(day));}break;}dataset.addValue(currentweight,nameload,new Integer(day));dataset.addValue(summary,namesummary,new Integer(day));gc1.add(Calendar.DATE,1);}return dataset;}  }
class C{  public static Timestamp atual(){  return toTimestamp(LocalDate.now());}  }
class C{  public String concat(String string){  if (string.count > 0 && count > 0) {    char[] buffer=new char[count + string.count];    System.arraycopy(value,offset,buffer,0,count);    System.arraycopy(string.value,string.offset,buffer,count,string.count);    return new String(0,buffer.length,buffer);  }  return count == 0 ? string : this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.BASE_TYPE_REF__DYNAMIC:    return isDynamic();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public InstrumentHeader createBankInstrumentHeader() throws NumberFormatException {  InstrumentHeader instrHdr=new InstrumentHeader();  instrHdr.setInstrumentAmount(BigDecimal.valueOf(1000));  instrHdr.setStatusId(createEgwStatus("testStatus",MODULE_NAME_TESTRECEIPTHEADER));  instrHdr.setInstrumentType((InstrumentType)service.find("from InstrumentType where type=?",CollectionConstants.INSTRUMENTTYPE_BANK));  instrHdr.setBankAccountId(createBankAccount("testGLCode"));  instrHdr.setBankId(instrHdr.getBankAccountId().getBankbranch().getBank());  instrHdr.setBankBranchName(instrHdr.getBankAccountId().getBankbranch().getBranchname());  instrHdr.setTransactionNumber("123456");  instrHdr.setIsPayCheque(CollectionConstants.ZERO_INT);  instrHdr.setTransactionDate(new Date());  User user=createUser("testUser");  instrHdr.setCreatedBy(user);  instrHdr.setCreatedDate(new Date());  instrHdr.setCreatedDate(new Date());  instrHdr.setModifiedBy(user);  instrHdr.setModifiedDate(new Date());  session.saveOrUpdate(instrHdr);  return instrHdr;}  }
class C{  @Override public void compute(){  if (!basicsAndFieldFacetsComputed) {    super.compute();    for (    Map<String,StatsCollector[]> f : fieldFacetCollectors.values()) {      for (      StatsCollector[] arr : f.values()) {        for (        StatsCollector b : arr) {          b.compute();        }      }    }    basicsAndFieldFacetsComputed=true;  }}  }
class C{  public VcfEvalParamsBuilder callsPhaseOrientor(Orientor orientor){  mCallsPhaseOrientor=orientor;  return this;}  }
class C{  protected StatementImpl(){  super();}  }
class C{  public void reset(){  state=STATE_BEGIN_READING;  length=0;}  }
class C{  public void testRoundTrip() throws Exception {  assertRoundTrip("1995-12-31T23:59:59.987Z");  assertRoundTrip("1995-12-31T23:59:59.98Z");  assertRoundTrip("1995-12-31T23:59:59.9Z");  assertRoundTrip("1995-12-31T23:59:59Z");  assertRoundTrip("1976-03-06T03:06:00Z");  assertRoundTrip("0001-01-01T01:01:01Z");  assertRoundTrip("12021-12-01T03:03:03Z");}  }
class C{  public QueueReader<Edge> listener(){  return reader.clone();}  }
class C{  public static CGPoint ccpAdd(final CGPoint v1,final CGPoint v2){  return ccp(v1.x + v2.x,v1.y + v2.y);}  }
class C{  public void testPathMode() throws Exception {  pathModes(F.t("/dir1",PROXY),F.t("/dir2",DUAL_SYNC),F.t("/dir3",PRIMARY),F.t("/dir4",PRIMARY));  mode=DUAL_ASYNC;  setSecondaryFs=true;  startUp();  checkMode("/dir",DUAL_ASYNC);  checkMode("/dir1",PROXY);  checkMode("/dir2",DUAL_SYNC);  checkMode("/dir3",PRIMARY);  checkMode("/somedir/dir3",DUAL_ASYNC);  checkMode("/dir4",PRIMARY);  checkMode("/dir4/subdir",PRIMARY);  checkMode("/somedir/dir4",DUAL_ASYNC);  checkMode("/somedir/dir4/subdir",DUAL_ASYNC);}  }
class C{  public static MinecraftlyConfiguration load(@NonNull String json,@NonNull MinecraftlyCore core){  gson=core.processGsonBuilder(getDefaultGsonBuilder()).create();  MinecraftlyConfiguration configuration;  core.getLogger().info("Loading Minecraftly configuration.");  configuration=gson.fromJson(json,MinecraftlyConfiguration.class);  if (configuration.getConfigLocation() != null && !configuration.getConfigLocation().isEmpty()) {    String nextUrl=configuration.getConfigLocation();    int maxHops=16;    try {      String maxHopsString=System.getProperty("minecraftly.configuration.MaxHops");      if (maxHopsString != null)       maxHops=Integer.parseInt(maxHopsString) + 1;    } catch (    Exception ignored) {    }    for (int hop=1; hop < maxHops; hop++) {      try {        if (nextUrl == null)         break;        MinecraftlyConfiguration hopConfig=gson.fromJson(MinecraftlyUtil.downloadText(nextUrl.trim()),MinecraftlyConfiguration.class);        if (hopConfig == null)         break;        core.getLogger().info("Minecraftly config [" + hop + "] loaded via \""+ nextUrl.trim()+ "\".");        hopConfig.applyTo(configuration);        nextUrl=hopConfig.getConfigLocation();      } catch (      Exception e) {        core.getLogger().log(Level.WARNING,"Unable to load configuration [" + hop + "] via \""+ configuration.getConfigLocation()+ "\".",e);        nextUrl=null;        break;      }    }    if (nextUrl != null)     core.getLogger().log(Level.WARNING,"There was more configurations to load but the max hops was reached!");  } else {    core.getLogger().info("Minecraftly configuration loaded!");  }  return configuration;}  }
class C{  @Override public TestSolution checkAttributeOnlyContainsNonAlphanumericCharacters(Node attribute,Node workingElement,TestSolution testSolution,String remarkMessage){  String attributeContent;  if (attribute.getNodeName().equalsIgnoreCase("#text")) {    attributeContent=attribute.getTextContent().toLowerCase();  } else {    attributeContent=attribute.getNodeValue().toLowerCase();  }  if (NON_ALPHANUMERIC_PATTERN.matcher(attributeContent).matches()) {    addSourceCodeRemark(testSolution,workingElement,remarkMessage,attribute.getNodeName());    return testSolution;  } else {    return TestSolution.PASSED;  }}  }
class C{  public boolean isStaticPolyfill(){  return this.isDeclaredStaticPolyfill();}  }
class C{  MethodBinding createMethod(AbstractMethodDeclaration method){  this.referenceContext=method;  method.scope=this;  SourceTypeBinding declaringClass=referenceType().binding;  int modifiers=method.modifiers | ExtraCompilerModifiers.AccUnresolved;  if (method.isConstructor()) {    if (method.isDefaultConstructor())     modifiers|=ExtraCompilerModifiers.AccIsDefaultConstructor;    method.binding=new MethodBinding(modifiers,null,null,declaringClass);    checkAndSetModifiersForConstructor(method.binding);  } else {    if (declaringClass.isInterface())     modifiers|=ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;    method.binding=new MethodBinding(modifiers,method.selector,null,null,null,declaringClass);    checkAndSetModifiersForMethod(method.binding);  }  this.isStatic=method.binding.isStatic();  Argument[] argTypes=method.arguments;  int argLength=argTypes == null ? 0 : argTypes.length;  if (argLength > 0 && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {    if (argTypes[--argLength].isVarArgs())     method.binding.modifiers|=ClassFileConstants.AccVarargs;    while (--argLength >= 0) {      if (argTypes[argLength].isVarArgs())       problemReporter().illegalVararg(argTypes[argLength],method);    }  }  TypeParameter[] typeParameters=method.typeParameters();  if (typeParameters == null || typeParameters.length == 0) {    method.binding.typeVariables=Binding.NO_TYPE_VARIABLES;  } else {    method.binding.typeVariables=createTypeVariables(typeParameters,method.binding);    method.binding.modifiers|=ExtraCompilerModifiers.AccGenericSignature;  }  return method.binding;}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=activity.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  private boolean isClustered(IAnalyzedMessageSummary ams){  if (m_baseScorer != null) {    final Double context=ams.getStatistics().getDoubleStat(m_baseScorer + "." + MAIN);    return context != null && context == 0;  } else {    return false;  }}  }
class C{  static Color deriveColor(Color base,Color actual,Color target){  float[] baseHSB=Color.RGBtoHSB(base.getRed(),base.getGreen(),base.getBlue(),null);  float[] targHSB=Color.RGBtoHSB(target.getRed(),target.getGreen(),target.getBlue(),null);  float[] actualHSB=Color.RGBtoHSB(actual.getRed(),actual.getGreen(),actual.getBlue(),null);  float[] resultHSB=new float[3];  float[] finalHSB=new float[3];  float[] diff=percentageDiff(actualHSB,baseHSB);  resultHSB[0]=actualHSB[0] + (diff[0] * (targHSB[0] - baseHSB[0]));  resultHSB[1]=actualHSB[1] + (diff[1] * (targHSB[1] - baseHSB[1]));  resultHSB[2]=actualHSB[2] + (diff[2] * (targHSB[2] - baseHSB[2]));  finalHSB[0]=saturate(resultHSB[0]);  finalHSB[1]=saturate(resultHSB[1]);  finalHSB[2]=saturate(resultHSB[2]);  if (targHSB[1] > 0.1 && resultHSB[1] <= 0.1) {    resultHSB[1]=resultHSB[2] * 0.25f;    resultHSB[2]=resultHSB[2] - (resultHSB[2] * 0.25f);  }  Color result=new Color(Color.HSBtoRGB(finalHSB[0],finalHSB[1],finalHSB[2]));  return result;}  }
class C{  public void jsFunction_resetCounter(){  counter=0;}  }
class C{  @Deprecated public static void main(String argv[]){  Main.main(argv);}  }
class C{  protected void seriesPressed(SeriesSelection sel){}  }
class C{  public void forwardToLocalService(final boolean isLeaderRequest,final HttpServletRequest request,final HttpServletResponse response) throws IOException {  final String path=request.getRequestURI();  final String prefix=(String)request.getServletContext().getAttribute(BigdataServlet.ATTRIBUTE_LBS_PREFIX);  if (prefix == null) {    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  }  if (!path.startsWith(prefix)) {    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  }  final String full_prefix=getFullPrefix(isLeaderRequest,prefix);  final String rest=path.substring(full_prefix.length());  final StringBuilder uri=new StringBuilder();  if (!rest.startsWith("/")) {    uri.append("/");  }  uri.append(rest);  final String newPath=uri.toString();  final RequestDispatcher requestDispatcher=request.getRequestDispatcher(newPath);  try {    nforward.increment();    if (log.isInfoEnabled())     log.info("forward: " + path + " => "+ newPath);    requestDispatcher.forward(request,response);  } catch (  ServletException e) {    throw new IOException("Could not forward: requestURL=" + path,e);  }}  }
class C{  private void parseFilterConfig(final Node node,final ConfigSettings config){  String name;  Node nnode;  final NodeList list=node.getChildNodes();  final int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(SUBSECTION_FILTER_NAMESPACES)) {      parseNamespaceFilterConfig(nnode,config);    }  }}  }
class C{  public SwaggerBackendBuilder schemes(final Set<SwaggerScheme> schemes){  options.setSchemes(schemes);  return this;}  }
class C{  public void swap(){  RatPoly top=polys.head;  RatPoly next=polys.tail.head;  polys.tail.head=top;  polys.head=next;}  }
class C{  protected Locale determineLocale(HttpContext context){  return Locale.getDefault();}  }
class C{  public Vector3f half(float x,float y,float z){  return this.add(x,y,z).normalize();}  }
class C{  public LongList(){  this(10);}  }
class C{  public final T blockingGet(long timeout,TimeUnit unit){  if (getCount() != 0) {    try {      if (!await(timeout,unit)) {        dispose();        throw new IllegalStateException("Timeout on blocking read");      }    } catch (    InterruptedException ex) {      dispose();      throw Exceptions.propagate(ex);    }  }  Throwable e=error;  if (e != null) {    throw Exceptions.propagate(e);  }  return value;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public void writeText(String text,Mode mode) throws Exception {  if (last == Tag.START) {    write('>');  }  if (mode == Mode.DATA) {    data(text);  } else {    escape(text);  }  last=Tag.TEXT;}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  static <T>Optional<T> maxWithStop(StreamEx<T> stream,Comparator<T> comparator,T stopValue){  return stream.prefix(BinaryOperator.maxBy(comparator)).takeWhileInclusive(Predicate.isEqual(stopValue).negate()).collect(MoreCollectors.last());}  }
class C{  public ProxySocketFactory(Proxy proxy){  this.proxy=proxy;}  }
class C{  public static void mergeSort(final long from,final long to,final LongComparator comp,final BigSwapper swapper){  final long length=to - from;  if (length < SMALL) {    for (long i=from; i < to; i++) {      for (long j=i; j > from && (comp.compare(j - 1,j) > 0); j--) {        swapper.swap(j,j - 1);      }    }    return;  }  long mid=(from + to) >>> 1;  mergeSort(from,mid,comp,swapper);  mergeSort(mid,to,comp,swapper);  if (comp.compare(mid - 1,mid) <= 0)   return;  inPlaceMerge(from,mid,to,comp,swapper);}  }
class C{  public void resetStats(){  if (lock.tryLock()) {    try {      ensureInitialized();      updateStats();    }  finally {      lock.unlock();    }  }}  }
class C{  public Call(String functionName,Class<?> returnType){  this(functionName,returnType,new String[0],new Class<?>[0]);}  }
class C{  private boolean isFullCopyOfRPTarget(AssetOptionsContext ctx,VolumeRestRep vol){  final ViPRCoreClient client=api(ctx);  if (vol != null && vol.getProtection() != null && vol.getProtection().getFullCopyRep() != null && vol.getProtection().getFullCopyRep().getAssociatedSourceVolume() != null) {    if (BlockStorageUtils.isRPTargetVolume(client.blockVolumes().get(vol.getProtection().getFullCopyRep().getAssociatedSourceVolume()))) {      return true;    }  }  return false;}  }
class C{  void addElementsToSortOrderMap(final Element element,int baseSortOrder){  elementSortOrderMap.addElement(element,baseSortOrder);  final List<Element> castToChildElementList=castToChildElementList(element);  int sortOrder=baseSortOrder;  for (  Element child : castToChildElementList) {    sortOrder+=SORT_ORDER_INCREMENT;    addElementsToSortOrderMap(child,sortOrder);  }}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public List<LookupResult> lookup(CharSequence key,BooleanQuery contextQuery,int num,boolean allTermsRequired,boolean doHighlight) throws IOException {  if (searcherMgr == null) {    throw new IllegalStateException("suggester was not built");  }  final BooleanClause.Occur occur;  if (allTermsRequired) {    occur=BooleanClause.Occur.MUST;  } else {    occur=BooleanClause.Occur.SHOULD;  }  BooleanQuery.Builder query;  Set<String> matchedTokens;  String prefixToken=null;  try (TokenStream ts=queryAnalyzer.tokenStream("",new StringReader(key.toString()))){    ts.reset();    final CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);    final OffsetAttribute offsetAtt=ts.addAttribute(OffsetAttribute.class);    String lastToken=null;    query=new BooleanQuery.Builder();    int maxEndOffset=-1;    matchedTokens=new HashSet<>();    while (ts.incrementToken()) {      if (lastToken != null) {        matchedTokens.add(lastToken);        query.add(new TermQuery(new Term(TEXT_FIELD_NAME,lastToken)),occur);      }      lastToken=termAtt.toString();      if (lastToken != null) {        maxEndOffset=Math.max(maxEndOffset,offsetAtt.endOffset());      }    }    ts.end();    if (lastToken != null) {      Query lastQuery;      if (maxEndOffset == offsetAtt.endOffset()) {        lastQuery=getLastTokenQuery(lastToken);        prefixToken=lastToken;      } else {        matchedTokens.add(lastToken);        lastQuery=new TermQuery(new Term(TEXT_FIELD_NAME,lastToken));      }      if (lastQuery != null) {        query.add(lastQuery,occur);      }    }    if (contextQuery != null) {      boolean allMustNot=true;      for (      BooleanClause clause : contextQuery.clauses()) {        if (clause.getOccur() != BooleanClause.Occur.MUST_NOT) {          allMustNot=false;          break;        }      }      if (allMustNot) {        for (        BooleanClause clause : contextQuery.clauses()) {          query.add(clause);        }      } else       if (allTermsRequired == false) {        BooleanQuery.Builder newQuery=new BooleanQuery.Builder();        newQuery.add(query.build(),BooleanClause.Occur.MUST);        newQuery.add(contextQuery,BooleanClause.Occur.MUST);        query=newQuery;      } else {        query.add(contextQuery,BooleanClause.Occur.MUST);      }    }  }   Query finalQuery=finishQuery(query,allTermsRequired);  TopFieldCollector c=TopFieldCollector.create(SORT,num,true,false,false);  Collector c2=new EarlyTerminatingSortingCollector(c,SORT,num);  List<LookupResult> results=null;  IndexSearcher searcher=searcherMgr.acquire();  try {    searcher.search(finalQuery,c2);    TopFieldDocs hits=c.topDocs();    results=createResults(searcher,hits,num,key,doHighlight,matchedTokens,prefixToken);  }  finally {    searcherMgr.release(searcher);  }  return results;}  }
class C{  public MLMatrix read(SQLContext sqlContext,String filePath,String format) throws IOException, DMLException, ParseException {  this.reset();  this.registerOutput("output");  MLOutput out=this.executeScript("output = read(\"" + filePath + "\", format=\""+ format+ "\"); "+ MLMatrix.writeStmt);  JavaPairRDD<MatrixIndexes,MatrixBlock> blocks=out.getBinaryBlockedRDD("output");  MatrixCharacteristics mcOut=out.getMatrixCharacteristics("output");  return MLMatrix.createMLMatrix(this,sqlContext,blocks,mcOut);}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public JavaClass parse() throws IOException {  JavaClass jclass=classParser.parse();  Repository.addClass(jclass);  return jclass;}  }
class C{  public MvcComponent(String name,boolean enableCache){  super(name,enableCache);}  }
class C{  public final synchronized Enumeration<T> reverseElements(){  return new FIFOQueueEnumerator<>(this);}  }
class C{  @Override public void start(){}  }
class C{  public LinearL1SCD(int epochs,double lambda,Loss loss,boolean reScale){  setEpochs(epochs);  setLambda(lambda);  setLoss(loss);  setReScale(reScale);}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public <T>PushableLazyFutureStream<T> futureStream(LazyReact s){  Queue<T> q=createQueue();  return new PushableLazyFutureStream<T>(q,s.fromStream(q.stream()));}  }
class C{  protected void initialize(){  this.setContentPane(getJPanel());  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(346,166);  }  this.setPreferredSize(new Dimension(346,166));  this.pack();}  }
class C{  private void checkSortMissingFirst(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,low));  assertU(adoc("id","2",field,high));  assertU(commit());  assertQ(req("q","*:*","sort",field + " asc"),"//result/doc[1]/str[@name='id'][.=0]","//result/doc[2]/str[@name='id'][.=1]","//result/doc[3]/str[@name='id'][.=2]");  assertQ(req("q","*:*","sort",field + " desc"),"//result/doc[1]/str[@name='id'][.=0]","//result/doc[2]/str[@name='id'][.=2]","//result/doc[3]/str[@name='id'][.=1]");}  }
class C{  public static PathPoint moveTo(float x,float y){  return new PathPoint(MOVE,x,y);}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setSize(274,251);  this.setName(Constant.messages.getString("alerts.panel.title"));  this.setIcon(new ImageIcon(AlertPanel.class.getResource("/resource/icon/16/071.png")));  this.add(getPanelCommand(),getPanelCommand().getName());  this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK,false));  this.setMnemonic(Constant.messages.getChar("alerts.panel.mnemonic"));  this.setShowByDefault(true);}  }
class C{  @NotNull private Optional<List<TypeConversion>> resolveConversions(@NotNull NamedTypeList sourceTypes,@NotNull List<Type> targetTypes){  if (targetTypes.size() != sourceTypes.size())   return Optional.empty();  ArrayList<TypeConversion> conversions=new ArrayList<>(targetTypes.size());  for (int i=0, len=targetTypes.size(); i < len; i++) {    TypeConversion conversion=findConversionFromDbValue(sourceTypes.getType(i),targetTypes.get(i)).orElse(null);    if (conversion != null)     conversions.add(conversion); else     return Optional.empty();  }  return Optional.of(conversions);}  }
class C{  public void removeAuthToken(){  this.authToken=null;}  }
class C{  @Override public boolean execute(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException("e == null");  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  void error(String err,String arg1,String arg2,String arg3){  nerrors++;  String msgParams[]={arg1,arg2,arg3};  String str=getSubstProp("dtderr." + err,msgParams);  if (str == null) {    str=err + "[" + arg1+ ","+ arg2+ ","+ arg3+ "]";  }  System.err.println("line " + in.ln + ", dtd "+ dtd+ ": "+ str);}  }
class C{  public boolean isTimestamp(){  return timestamp;}  }
class C{  private void selectBranch(){  presenter.showBranches(project);  presenter.onBranchSelected(selectedBranch);}  }
class C{  public void checkOrFixFile(File file,boolean fix,boolean checkLicense) throws Exception {  RandomAccessFile in=new RandomAccessFile(file,"r");  byte[] data=new byte[(int)file.length()];  ByteArrayOutputStream out=fix ? new ByteArrayOutputStream() : null;  in.readFully(data);  in.close();  if (checkLicense) {    if (data.length > COPYRIGHT.length() + LICENSE.length()) {      String text=new String(data);      if (text.indexOf(COPYRIGHT) < 0) {        fail(file,"copyright is missing",0);      }      if (text.indexOf(LICENSE) < 0) {        fail(file,"license is missing",0);      }      if (text.indexOf("// " + "##") > 0) {        fail(file,"unexpected space between // and ##",0);      }      if (text.indexOf("/* " + "##") > 0) {        fail(file,"unexpected space between /* and ##",0);      }      if (text.indexOf("##" + " */") > 0) {        fail(file,"unexpected space between ## and */",0);      }    }  }  int line=1;  int startLinePos=0;  boolean lastWasWhitespace=false;  for (int i=0; i < data.length; i++) {    char ch=(char)(data[i] & 0xff);    boolean isWhitespace=Character.isWhitespace(ch);    if (ch > 127) {      fail(file,"contains character " + (int)ch + " at "+ new String(data,i - 10,20),line);      return;    } else     if (ch < 32) {      if (ch == '\n') {        if (lastWasWhitespace && !ALLOW_TRAILING_SPACES) {          fail(file,"contains trailing white space",line);          return;        }        if (fix) {          if (useCRLF) {            out.write('\r');          }          out.write(ch);        }        lastWasWhitespace=false;        line++;        int lineLength=i - startLinePos;        if (file.getName().endsWith(".java")) {          if (i > 0 && data[i - 1] == '\r') {            lineLength--;          }          if (lineLength > MAX_SOURCE_LINE_SIZE) {            fail(file,"line too long: " + lineLength,line);          }        }        startLinePos=i;      } else       if (ch == '\r') {        if (!ALLOW_CR) {          fail(file,"contains CR",line);          return;        }        if (lastWasWhitespace && !ALLOW_TRAILING_SPACES) {          fail(file,"contains trailing white space",line);          return;        }        lastWasWhitespace=false;      } else       if (ch == '\t') {        if (fix) {          for (int j=0; j < SPACES_PER_TAB; j++) {            out.write(' ');          }        } else {          if (!ALLOW_TAB) {            fail(file,"contains TAB",line);            return;          }        }        lastWasWhitespace=true;      } else {        fail(file,"contains character " + (int)ch,line);        return;      }    } else     if (isWhitespace) {      lastWasWhitespace=true;      if (fix) {        boolean write=true;        for (int j=i + 1; j < data.length; j++) {          char ch2=(char)(data[j] & 0xff);          if (ch2 == '\n' || ch2 == '\r') {            write=false;            lastWasWhitespace=false;            ch=ch2;            i=j - 1;            break;          } else           if (!Character.isWhitespace(ch2)) {            break;          }        }        if (write) {          out.write(ch);        }      }    } else {      if (fix) {        out.write(ch);      }      lastWasWhitespace=false;    }  }  if (lastWasWhitespace && !ALLOW_TRAILING_SPACES) {    fail(file,"contains trailing white space at the very end",line);    return;  }  if (fix) {    byte[] changed=out.toByteArray();    if (!Arrays.equals(data,changed)) {      RandomAccessFile f=new RandomAccessFile(file,"rw");      f.write(changed);      f.setLength(changed.length);      f.close();      System.out.println("CHANGED: " + file.getName());    }  }  line=1;  for (int i=0; i < data.length; i++) {    if (data[i] < 32) {      line++;      for (int j=i + 1; j < data.length; j++) {        if (data[j] != 32) {          int mod=(j - i - 1) & 3;          if (mod != 0 && (mod != 1 || data[j] != '*')) {            fail(file,"contains wrong number " + "of heading spaces: " + (j - i - 1),line);          }          break;        }      }    }  }}  }
class C{  @Override public void ILOAD(int i){  IntegerValue integerExpression=env.topFrame().localsTable.getBv32Local(i);  env.topFrame().operandStack.pushBv32(integerExpression);}  }
class C{  public void patch_splitMax(LinkedList<Patch> patches){  short patch_size=Match_MaxBits;  String precontext, postcontext;  Patch patch;  int start1, start2;  boolean empty;  Operation diff_type;  String diff_text;  ListIterator<Patch> pointer=patches.listIterator();  Patch bigpatch=pointer.hasNext() ? pointer.next() : null;  while (bigpatch != null) {    if (bigpatch.length1 <= Match_MaxBits) {      bigpatch=pointer.hasNext() ? pointer.next() : null;      continue;    }    pointer.remove();    start1=bigpatch.start1;    start2=bigpatch.start2;    precontext="";    while (!bigpatch.diffs.isEmpty()) {      patch=new Patch();      empty=true;      patch.start1=start1 - precontext.length();      patch.start2=start2 - precontext.length();      if (precontext.length() != 0) {        patch.length1=patch.length2=precontext.length();        patch.diffs.add(new Diff(Operation.EQUAL,precontext));      }      while (!bigpatch.diffs.isEmpty() && patch.length1 < patch_size - Patch_Margin) {        diff_type=bigpatch.diffs.getFirst().operation;        diff_text=bigpatch.diffs.getFirst().text;        if (diff_type == Operation.INSERT) {          patch.length2+=diff_text.length();          start2+=diff_text.length();          patch.diffs.addLast(bigpatch.diffs.removeFirst());          empty=false;        } else         if (diff_type == Operation.DELETE && patch.diffs.size() == 1 && patch.diffs.getFirst().operation == Operation.EQUAL && diff_text.length() > 2 * patch_size) {          patch.length1+=diff_text.length();          start1+=diff_text.length();          empty=false;          patch.diffs.add(new Diff(diff_type,diff_text));          bigpatch.diffs.removeFirst();        } else {          diff_text=diff_text.substring(0,Math.min(diff_text.length(),patch_size - patch.length1 - Patch_Margin));          patch.length1+=diff_text.length();          start1+=diff_text.length();          if (diff_type == Operation.EQUAL) {            patch.length2+=diff_text.length();            start2+=diff_text.length();          } else {            empty=false;          }          patch.diffs.add(new Diff(diff_type,diff_text));          if (diff_text.equals(bigpatch.diffs.getFirst().text)) {            bigpatch.diffs.removeFirst();          } else {            bigpatch.diffs.getFirst().text=bigpatch.diffs.getFirst().text.substring(diff_text.length());          }        }      }      precontext=diff_text2(patch.diffs);      precontext=precontext.substring(Math.max(0,precontext.length() - Patch_Margin));      if (diff_text1(bigpatch.diffs).length() > Patch_Margin) {        postcontext=diff_text1(bigpatch.diffs).substring(0,Patch_Margin);      } else {        postcontext=diff_text1(bigpatch.diffs);      }      if (postcontext.length() != 0) {        patch.length1+=postcontext.length();        patch.length2+=postcontext.length();        if (!patch.diffs.isEmpty() && patch.diffs.getLast().operation == Operation.EQUAL) {          patch.diffs.getLast().text+=postcontext;        } else {          patch.diffs.add(new Diff(Operation.EQUAL,postcontext));        }      }      if (!empty) {        pointer.add(patch);      }    }    bigpatch=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public static DiffException createDiffException(final ErrorKeys errorId,final String message,final Exception e){  return new DiffException(errorId.toString() + ":\r\n" + message,e);}  }
class C{  public boolean isProductionJournal(Set<String> productionCopies,Volume volume){  for (  String productionCopy : productionCopies) {    if (productionCopy.equalsIgnoreCase(volume.getRpCopyName())) {      return true;    }  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.STRUCTURED_TEXT__ROOT_ELEMENT:    return rootElement != null;}return super.eIsSet(featureID);}  }
class C{  private void bufferStringWriting(StringBuffer stringBuilder,Writer writer){  if (stringBuilder.length() >= 8192) {    try {      writer.write(stringBuilder.toString());      stringBuilder.delete(0,stringBuilder.length());    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public byte[] serializeObject(Object obj){  Object convertObj=obj;  if (fieldGetterMap != null && !fieldGetterMap.isEmpty()) {    convertObj=getFieldsValueAsMap(obj);  }  ByteArrayOutputStream os=new ByteArrayOutputStream();  Output output=new Output(os);  getKryo().writeClassAndObject(output,convertObj);  output.flush();  return os.toByteArray();}  }
class C{  public void exit(int status){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkExit(status);  }  if (VMState == 2 && finalizeOnExit == true && status != 0) {    halt(status);  }  execShutdownSequence();  org.jikesrvm.VM.sysExit(status);}  }
class C{  @SuppressWarnings("unchecked") private void processPublishEvents(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  EventPublisher ep=new EventPublisher();  ep.setFieldMap((SpreadsheetCustomFieldMap)request.getSession().getAttribute(SESSION_ATTR_FIELD_MAP));  try {    ep.setSsAuthSubToken((String)request.getSession().getAttribute(SESSION_ATTR_SS_AUTH_TOKEN),false);  } catch (  EPAuthenticationException e) {    System.err.println("Authentication exception: " + e.getMessage());  }  LinkedList<Event> eventList=(LinkedList<Event>)request.getSession().getAttribute(SESSION_ATTR_EVENTS_TO_PUBLISH);  if (request.getParameter("calendar") != null && "checked".equals(request.getParameter("calendar"))) {    String calUsername=config.getString("calendar.username");    String calPassword=config.getString("calendar.password");    String calUrl=config.getString("calendar.url");    ep.setCalUsernamePassword(calUsername,calPassword);    ep.setCalUrl(calUrl);    ep.publishEventsToCalendar(eventList);  }  if (request.getParameter("base") != null && "checked".equals(request.getParameter("base"))) {    String baseUsername=config.getString("gbase.username");    String basePassword=config.getString("gbase.password");    ep.setBaseUsernamePassword(baseUsername,basePassword);    ep.publishEventsToBase(eventList);  }  javax.servlet.RequestDispatcher dispatcher=getServletContext().getRequestDispatcher("/WEB-INF/jsp/outputPublishingResults.jsp");  dispatcher.forward(request,response);}  }
class C{  public void removeRow(Comparable rowKey){  int index=getRowIndex(rowKey);  if (index < 0) {    throw new UnknownKeyException("Row key (" + rowKey + ") not recognised.");  }  removeRow(index);}  }
class C{  public void updateStates() throws CpuStateMonitorException {  _states.clear();  try {    String file=null;    if (Utils.existFile(Utils.getsysfspath(CPU_TIME_IN_STATE_ARRAY,core)) || Utils.existFile(Utils.getsysfspath(CPU_TIME_IN_STATE_ARRAY,0))) {      if (core > 0) {        CPU.activateCore(core,true,null);      }      if (Utils.existFile(Utils.getsysfspath(CPU_TIME_IN_STATE_ARRAY,core))) {        file=Utils.getsysfspath(CPU_TIME_IN_STATE_ARRAY,core);      } else {        file=Utils.getsysfspath(CPU_TIME_IN_STATE_ARRAY,0);      }    }    if (file == null)     throw new CpuStateMonitorException("Problem opening time-in-states file");    FileReader fileReader=new FileReader(file);    BufferedReader bufferedReader=new BufferedReader(fileReader);    readInStates(bufferedReader);    fileReader.close();    bufferedReader.close();  } catch (  Exception e) {    throw new CpuStateMonitorException("Problem opening time-in-states file");  }  long sleepTime=(SystemClock.elapsedRealtime() - SystemClock.uptimeMillis()) / 10;  _states.add(new CpuState(0,sleepTime));  Collections.sort(_states,Collections.reverseOrder());}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInterfaceMemberDeclaration_();}  }
class C{  public T caseCharacterClassAtom(CharacterClassAtom object){  return null;}  }
class C{  public String originalStreamId(){  return originalEvent().eventStreamId;}  }
class C{  @Override public boolean updateElevation(QuadTree quadTree){  for (int i=0; i < point.length; ++i) {    point[i].updateElevation(quadTree);  }  return (false);}  }
class C{  public int compare(MapNode node1,MapNode node2){  double dist1=distances.get(node1);  double dist2=distances.get(node2);  if (dist1 > dist2) {    return 1;  } else   if (dist1 < dist2) {    return -1;  } else {    return node1.compareTo(node2);  }}  }
class C{  private static void adjustTextSize(TextView view,TextPaint paint,float minTextSize,float maxTextSize,int maxLines,float precision){  if (maxLines <= 0 || maxLines == Integer.MAX_VALUE) {    return;  }  int targetWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();  if (targetWidth <= 0) {    return;  }  CharSequence text=view.getText();  TransformationMethod method=view.getTransformationMethod();  if (method != null) {    text=method.getTransformation(text,view);  }  Context context=view.getContext();  Resources r=Resources.getSystem();  DisplayMetrics displayMetrics;  float size=maxTextSize;  float high=size;  float low=0;  if (context != null) {    r=context.getResources();  }  displayMetrics=r.getDisplayMetrics();  paint.set(view.getPaint());  paint.setTextSize(size);  if ((maxLines == 1 && paint.measureText(text,0,text.length()) > targetWidth) || getLineCount(text,paint,size,targetWidth,displayMetrics) > maxLines) {    size=getAutofitTextSize(text,paint,targetWidth,maxLines,low,high,precision,displayMetrics);  }  if (size < minTextSize) {    size=minTextSize;  }  view.setTextSize(TypedValue.COMPLEX_UNIT_PX,size);}  }
class C{  public E take() throws InterruptedException {  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null)       available.await(); else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        first=null;        if (leader != null)         available.await(); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            available.awaitNanos(delay);          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  private boolean doTryAcquire(double permitsToAcquire){  double currentTime=System.nanoTime() / 1000000000.0;  while (true) {    readRate.lock();    try {      double permitReleaseRate=this.permitsPerSecond;      double clockDelta=permitsToAcquire / permitReleaseRate;      double lowestAllowedClock=(currentTime - backlogSize) - clockDelta;      double currentClock=clock.get();      double nextClock=currentClock + clockDelta;      if (nextClock < lowestAllowedClock)       nextClock=lowestAllowedClock;      if (nextClock > currentTime) {        return false;      }      if (clock.compareAndSet(currentClock,nextClock)) {        return true;      }    }  finally {      readRate.unlock();    }  }}  }
class C{  public static byte[] floatToBytes(float val){  return intToBytes(Float.floatToRawIntBits(val));}  }
class C{  private static final XmlJmapper xmlToXStream(String xml){  try {    return new XML(true,xml).toXStream();  } catch (  Exception e) {    JmapperLog.ERROR(e);    throw new RuntimeException();  }}  }
class C{  public static CascadedStyle createAnonymousStyle(IdentValue display){  CSSPrimitiveValue val=new PropertyValue(display);  List props=Collections.singletonList(new PropertyDeclaration(CSSName.DISPLAY,val,true,StylesheetInfo.USER));  return new CascadedStyle(props.iterator());}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  public void invalidate(){  possiblyInvalidate(_pageNumber,null);}  }
class C{  public void addReplyOnEmotion(final String playerAction,final String reply){  add(ConversationStates.IDLE,Arrays.asList("!me "),new EmoteCondition(playerAction),ConversationStates.IDLE,reply,null);  add(ConversationStates.ATTENDING,Arrays.asList("!me "),new EmoteCondition(playerAction),ConversationStates.ATTENDING,reply,null);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public double eval(double params[]){  return ((params[0] + params[1]) / 2.0);}  }
class C{  default PSetX<T> toPSetX(){  return PSetX.fromCollection(toList());}  }
class C{  protected CodeLangs_Impl(){  super();}  }
class C{  public Vector eigenvector(){  return eigenvector.product(1.0 / eigenvector.norm());}  }
class C{  @SuppressWarnings("unchecked") public G decorateGraph(G2 delegate){  G projection=createGraph(delegate);  for (  Vertex v : delegate.getVertices()) {    addVertex(projection,(V2)v);  }  for (  Edge e : delegate.getEdges()) {    V v_i=(V)projection.getVertex((V2)e.getVertices().getFirst());    V v_j=(V)projection.getVertex((V2)e.getVertices().getSecond());    this.addEdge(projection,v_i,v_j,(E2)e);  }  return projection;}  }
class C{  protected HttpErrorResponseException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace,int statusCode,String statusDescription,String responseMessage){  super(message,cause,enableSuppression,writableStackTrace);  this.statusCode=statusCode;  this.statusDescription=statusDescription;  this.responseMessage=responseMessage;}  }
class C{  public void add(String match,String replacement){  if (match.length() == 0) {    throw new IllegalArgumentException("cannot match the empty string");  }  if (pendingPairs.containsKey(match)) {    throw new IllegalArgumentException("match \"" + match + "\" was already added");  }  pendingPairs.put(match,replacement);}  }
class C{  public static String encodeContext(Resource context){  if (context == null) {    return Protocol.NULL_PARAM_VALUE;  } else {    return encodeValue(context);  }}  }
class C{  public DeleteRepositoryRequest name(String name){  this.name=name;  return this;}  }
class C{  public List<PlanNodeTable> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!(obj instanceof ArrayType<?>))   return false;  ArrayType<?> other=(ArrayType<?>)obj;  if (this.dimension != other.dimension) {    return false;  }  if (!this.elementType.equals(other.elementType)) {    return false;  }  return this.primitiveArray == other.primitiveArray;}  }
class C{  @Override public boolean insertsAreDetected(int type){  debugCodeCall("insertsAreDetected",type);  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.426 -0500",hash_original_method="53B83C1819BF34B8CC2A9C3AD4211A77",hash_generated_method="6963480B9BE93A2D4AEC00AE8C63F59F") private static int[] toIntArray(String str,boolean shouldThrow){  if (str == null) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException();  }  int length=str.length();  if (length == 0) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int count=1;  boolean wasDot=true;  char c;  for (int i=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      if (wasDot) {        if (!shouldThrow) {          return null;        }        throw new IllegalArgumentException("Incorrect syntax");      }      wasDot=true;      count++;    } else     if (c >= '0' && c <= '9') {      wasDot=false;    } else {      if (!shouldThrow) {        return null;      }      throw new IllegalArgumentException("Incorrect syntax");    }  }  if (wasDot) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  if (count < 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int[] oid=new int[count];  for (int i=0, j=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      j++;    } else {      oid[j]=oid[j] * 10 + c - 48;    }  }  if (oid[0] > 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  } else   if (oid[0] != 2 && oid[1] > 39) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  return oid;}  }
class C{  public ValidationException(){  super();}  }
class C{  @Deprecated public DBPendingGroup(){}  }
class C{  @NonNull public static Animator parallel(@NonNull Animator... animators){  AnimatorSet set=new AnimatorSet();  set.playTogether(animators);  return set;}  }
class C{  @Override public void beginDrawingLayer(final ILayer layer){  super.beginDrawingLayer(layer);  GamaPoint currentOffset, currentScale;  if (!(layer instanceof OverlayLayer)) {    final double currentZLayer=getMaxEnvDim() * layer.getPosition().getZ();    double z_scale;    if (layer.getExtent().getZ() > 0) {      z_scale=layer.getExtent().getZ();    } else {      z_scale=1;    }    currentOffset=new GamaPoint(getXOffsetInPixels() / (getWidth() / data.getEnvWidth()),getYOffsetInPixels() / (getHeight() / data.getEnvHeight()),currentZLayer);    currentScale=new GamaPoint(getLayerWidth() / getWidth(),getLayerHeight() / getHeight(),z_scale);  } else {    currentOffset=new GamaPoint(getXOffsetInPixels(),getYOffsetInPixels());    currentScale=new GamaPoint(1,1,1);  }  final ModelScene scene=sceneBuffer.getSceneToUpdate();  if (scene != null) {    scene.beginDrawingLayer(layer,currentOffset,currentScale,currentAlpha);  }}  }
class C{  public InputStream openStream(String source){  return this.getClass().getResourceAsStream(source);}  }
class C{  public void testSpans1(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(50,10));  final JTextField field2=new JTextField();  GridBagConverter converter=new GridBagConverter();  converter.addComponent(button,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field1,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field2,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(100,preferredSize.width);  panel.setSize(new Dimension(500,100));  panel.doLayout();  assertEquals(500,field2.getWidth());  assertEquals(50,button.getWidth());  assertEquals(450,field1.getWidth());}  }
class C{  public void printGnuplotXfer1D(Gate g,String assignment_name,Args options){  String var=g.get_variable_names().get(0);  String gp_file=_output_directory + assignment_name + "_xfer_model_"+ g.Name+ ".gp";  String eps_file=assignment_name + "_xfer_model_" + g.Name+ ".eps";  HistogramBins hbins=new HistogramBins();  hbins.init();  Double axis_max=Math.pow(10,hbins.get_LOGMAX());  Double axis_min=Math.pow(10,hbins.get_LOGMIN());  HashMap<String,Double> lowest_on_rpu_map=GateUtil.getIncomingONlow(g);  HashMap<String,Double> highest_off_rpu_map=GateUtil.getIncomingOFFhigh(g);  String xfer_color=g.ColorHex;  String gnuplot_xfer_lines="";  gnuplot_xfer_lines+="\n" + "set output \"" + eps_file + "\"";  gnuplot_xfer_lines+="\n" + "set terminal postscript eps enhanced color \"Helvetica, 35\" size 2,2";  gnuplot_xfer_lines+="\n" + "set logscale x";  gnuplot_xfer_lines+="\n" + "set logscale y";  gnuplot_xfer_lines+="\n" + "set lmargin screen 0.0";  gnuplot_xfer_lines+="\n" + "set rmargin screen 1.0";  gnuplot_xfer_lines+="\n" + "set tmargin screen 1.0";  gnuplot_xfer_lines+="\n" + "set bmargin screen 0.0";  gnuplot_xfer_lines+="\n" + "set size ratio 1.0";  gnuplot_xfer_lines+="\n" + "set border linewidth 2";  gnuplot_xfer_lines+="\n" + "set tics scale 2";  gnuplot_xfer_lines+="\n" + "set mxtics 10";  gnuplot_xfer_lines+="\n" + "set mytics 10";  gnuplot_xfer_lines+="\n" + "set key bottom left";  gnuplot_xfer_lines+="\n" + "set key samplen -1";  gnuplot_xfer_lines+="\n" + "set xrange [" + axis_min + ":"+ axis_max+ "]";  gnuplot_xfer_lines+="\n" + "set yrange [" + axis_min + ":"+ axis_max+ "]";  gnuplot_xfer_lines+="\n" + "set format y \"10^{%L}\"    ";  gnuplot_xfer_lines+="\n" + "set format x \"10^{%L}\"    ";  gnuplot_xfer_lines+="\n" + "set format x \"\"    ";  gnuplot_xfer_lines+="\n" + "set xlabel '" + BooleanLogic.logicString(g.get_logics()) + "'";  Double highest_off_rpu=highest_off_rpu_map.get(var);  Double lowest_on_rpu=lowest_on_rpu_map.get(var);  Double IL_x=0.0;  Double IH_x=0.0;  Double IL_y=0.0;  Double IH_y=0.0;  if (g.get_variable_thresholds().get(var) != null && options.is_noise_margin()) {    IL_x=g.get_variable_thresholds().get(var)[0];    IH_x=g.get_variable_thresholds().get(var)[1];    HashMap<String,Double> variables_low=new HashMap<String,Double>();    variables_low.put(var,IL_x);    HashMap<String,Double> variables_high=new HashMap<String,Double>();    variables_high.put(var,IH_x);    IL_y=ResponseFunction.computeOutput(variables_low,g.get_params(),g.get_equation());    IH_y=ResponseFunction.computeOutput(variables_high,g.get_params(),g.get_equation());    String low_rect_color="gold";    String high_rect_color="gold";    if (highest_off_rpu > IL_x) {      low_rect_color="red";    }    if (lowest_on_rpu < IH_x) {      high_rect_color="red";    }  }  gnuplot_xfer_lines+="\n" + "set arrow from " + highest_off_rpu + ","+ axis_min+ " to "+ highest_off_rpu+ ","+ axis_max+ " nohead lw 10 lt 2 lc rgb '#000000'";  gnuplot_xfer_lines+="\n" + "set arrow from " + lowest_on_rpu + ","+ axis_min+ " to "+ lowest_on_rpu+ ","+ axis_max+ " nohead lw 10 lt 2 lc rgb '#000000'";  String title="";  title=g.Name;  title=title.replaceAll("_","");  gnuplot_xfer_lines+="\n";  for (  String param_name : g.get_params().keySet()) {    gnuplot_xfer_lines+=param_name + " = " + g.get_params().get(param_name)+ "\n";  }  gnuplot_xfer_lines+="set dummy " + var + "\n";  String equation=g.get_equation().replaceAll("\\^","**");  gnuplot_xfer_lines+="\n" + "plot " + equation + " lw 25 lc rgb '#"+ xfer_color+ "' title '"+ title+ "',\\\n";  if (g.get_variable_thresholds().get(var) != null) {    gnuplot_xfer_lines+=" \"<echo '1 2'\" using (" + IL_x + "):("+ IL_y+ ")  with points pt 7 ps 4 lc rgb 'black' notitle,\\\n";    gnuplot_xfer_lines+=" \"<echo '1 2'\" using (" + IH_x + "):("+ IH_y+ ")  with points pt 7 ps 4 lc rgb 'black' notitle\n";  }  Util.fileWriter(gp_file,gnuplot_xfer_lines,false);}  }
class C{  public void quickProcessWord(String wordText,List<String> categoryText,Network network){  if ((wordText.length() == 0) || (wordText.indexOf("\n") != -1)) {    return;  }  Vertex word=network.createWord(wordText);  if (word.getRelationships(Primitive.MEANING) != null) {    log("Already known",Bot.FINE,word);    return;  }  Vertex meaning=network.createVertex();  meaning.setName(wordText);  log("Word",Bot.FINE,word);  word.addRelationship(Primitive.MEANING,meaning);  meaning.addRelationship(Primitive.WORD,word);  if (categoryText.contains(NOUNS_TAG)) {    log("Noun",Bot.FINE,meaning);    meaning.addRelationship(Primitive.INSTANTIATION,Primitive.THING);    word.addRelationship(Primitive.INSTANTIATION,Primitive.NOUN);  } else   if (categoryText.contains(VERBS_TAG)) {    log("Verb",Bot.FINE,meaning);    meaning.addRelationship(Primitive.INSTANTIATION,Primitive.ACTION);    word.addRelationship(Primitive.INSTANTIATION,Primitive.VERB);  } else   if (categoryText.contains(ADJECTIVES_TAG)) {    log("Adjective",Bot.FINE,meaning);    meaning.addRelationship(Primitive.INSTANTIATION,Primitive.DESCRIPTION);    word.addRelationship(Primitive.INSTANTIATION,Primitive.ADJECTIVE);  }}  }
class C{  public final byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  if (!(this instanceof NullCipher)) {    if (!initialized) {      throw new IllegalStateException("Cipher not initialized");    }    if (opmode != Cipher.WRAP_MODE) {      throw new IllegalStateException("Cipher not initialized " + "for wrapping keys");    }  }  chooseFirstProvider();  return spi.engineWrap(key);}  }
class C{  public static void configCheck(Config config){  StringBuilder sb=new StringBuilder();  for (  String shardId : config.getShardIds()) {    if (!config.getAttributesForShard(shardId).containsKey("bucketMap")) {      sb.append("Shard bucketMap attribute is missing on Shard - ").append(shardId).append("\n");    }  }  for (  String hostId : config.getHostIds()) {    Map<String,String> attributes=config.getAttributesForHost(hostId);    if (!attributes.containsKey("appScheme") || !attributes.containsKey("appPort")) {      sb.append("Host attributes appScheme and appPort is missing on Host - ").append(hostId).append("\n");    }  }  if (!sb.toString().isEmpty()) {    throw new IllegalStateException("Configuration Error: " + sb.toString());  }}  }
class C{  public Intersection(TupleExpr leftArg,TupleExpr rightArg){  super(leftArg,rightArg);}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public EqualsMethodAsserter method(String name,Class<?> parameterTypes[],Object... values){  if (parameterTypes.length != values.length) {    throw new IllegalArgumentException("Number of parameter types must match number of values.");  }  try {    Method method=clazz.getMethod(name,parameterTypes);    methods.add(method);    methodValues.add(values);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return this;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jlnu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public synchronized void proceed(int priority) throws InterruptedException {  while (queue.peek() < priority) {    wait();  }}  }
class C{  public int sign(){  return sign;}  }
