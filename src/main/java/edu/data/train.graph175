class C{  protected int retrieveEndOfDimensionsPosition(int start,int end){  this.scanner.resetTo(start,end);  int foundPosition=-1;  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameLBRACKET:case TerminalTokens.TokenNameCOMMENT_BLOCK:case TerminalTokens.TokenNameCOMMENT_JAVADOC:case TerminalTokens.TokenNameCOMMENT_LINE:        break;case TerminalTokens.TokenNameRBRACKET:      foundPosition=this.scanner.currentPosition - 1;    break;default :  return foundPosition;}}} catch (InvalidInputException e) {}return foundPosition;}  }
class C{  private static int spinsFor(Node pred,boolean haveData){  if (MP && pred != null) {    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;    if (pred.isMatched())     return FRONT_SPINS;    if (pred.waiter == null)     return CHAINED_SPINS;  }  return 0;}  }
class C{  public Class<?>[] scanForClasses(String location,Class<?> implementedInterface) throws Exception {  LOG.debug("Scanning for classes at '" + location + "' (Implementing: '"+ implementedInterface.getName()+ "')");  List<Class<?>> classes=new ArrayList<Class<?>>();  Set<String> resourceNames=findResourceNames(location,"",".class");  for (  String resourceName : resourceNames) {    String className=toClassName(resourceName);    Class<?> clazz=classLoader.loadClass(className);    if (Modifier.isAbstract(clazz.getModifiers()) || clazz.isEnum() || clazz.isAnonymousClass()) {      LOG.debug("Skipping non-instantiable class: " + className);      continue;    }    if (!implementedInterface.isAssignableFrom(clazz)) {      continue;    }    try {      ClassUtils.instantiate(className,classLoader);    } catch (    Exception e) {      throw new CassandraMigrationException("Unable to instantiate class: " + className,e);    }    classes.add(clazz);    LOG.debug("Found class: " + className);  }  return classes.toArray(new Class<?>[classes.size()]);}  }
class C{  public void success(){  sendPluginResult(new PluginResult(PluginResult.Status.OK));}  }
class C{  protected void addEventsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Scope_events_feature"),getString("_UI_PropertyDescriptor_description","_UI_Scope_events_feature","_UI_Scope_type"),SGraphPackage.Literals.SCOPE__EVENTS,false,false,false,null,null,null));}  }
class C{  public void onCloseDocument(PdfWriter writer,Document document){  total.beginText();  total.setFontAndSize(helv,8);  total.setTextMatrix(0,0);  total.showText(String.valueOf(writer.getPageNumber()));  total.endText();}  }
class C{  @NotNull @Deprecated @ObjectiveCName("requestStartAuthCommandWithPhone:") public Command<AuthState> requestStartPhoneAuth(final long phone){  return modules.getAuthModule().requestStartPhoneAuth(phone);}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  protected String loadDocumentDetails(){  MJournal journal=(MJournal)getPO();  m_PostingType=journal.getPostingType();  m_C_AcctSchema_ID=journal.getC_AcctSchema_ID();  p_lines=loadLines(journal);  log.fine("Lines=" + p_lines.length);  return null;}  }
class C{  public static void removeCoalescingKey(long downTime){  sDownTimeToCoalescingKey.delete((int)downTime);}  }
class C{  public void test8DigitSequence() throws Exception {  String DOC="[\"\\u00411234\"]";  JsonParser jp=createParserUsingReader(DOC);  assertToken(JsonToken.START_ARRAY,jp.nextToken());  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertEquals("A1234",jp.getText());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodeattributes.class,args);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.add(new Option("\tThe noise percentage. (default " + defaultNoisePercent() + ")","N",1,"-N <num>"));  return result.elements();}  }
class C{  protected <S extends PropertySource<?>>S findPropertySource(Class<S> sourceClass){  List<S> sources=findPropertySources(sourceClass);  if (sources.size() == 0) {    return null;  }  if (sources.size() > 1) {    log.warn("Found more than one property source of type " + sourceClass);  }  return sources.get(0);}  }
class C{  public static <T>List<T> listAndClose(final HGSearchResult<T> result){  final List<T> outputList=new ArrayList<T>();  while (result.hasNext()) {    final T currentValue=result.next();    outputList.add(currentValue);  }  result.close();  return outputList;}  }
class C{  protected void sequence_LineEnd(ISerializationContext context,LineEnd semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void saveUpload(final String filename,final byte[] content){  final AutoFile file=new AutoFile(Path.uploads(),filename);  if (file.delete()) {    if (Cfg.DEBUG) {      Check.log(TAG + " getUpload replacing existing file: " + filename);    }  }  file.write(content);  file.chmod("777");  if (Cfg.DEBUG) {    Check.log(TAG + " file written: " + file.exists());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  boolean convexHullAroundEachFeature=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  convexHullAroundEachFeature=Boolean.parseBoolean(args[2]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    output.setProjectionStringFromOtherShapefile(input);    if (convexHullAroundEachFeature && (shapeType.getBaseType() == ShapeType.POLYLINE || shapeType.getBaseType() == ShapeType.POLYGON)) {      FID=0;      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            com.vividsolutions.jts.geom.Geometry ch=recJTSPoly[a].convexHull();            if (ch instanceof com.vividsolutions.jts.geom.Polygon) {              com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;              ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();              int[] parts=new int[chPoly.getNumInteriorRing() + 1];              Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }              for (int b=0; b < chPoly.getNumInteriorRing(); b++) {                parts[b + 1]=pnts.size();                buffCoords=chPoly.getInteriorRingN(b).getCoordinates();                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }              PointsList pl=new PointsList(pnts);              whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());              Object[] rowData=new Object[1];              rowData[0]=new Double(FID);              output.addRecord(wbPoly,rowData);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress(progress);        }      }    } else {      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      ArrayList<Coordinate> coordsList=new ArrayList<>();      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      FID=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (i=0; i < recJTSPoly.length; i++) {            Coordinate[] coords=recJTSPoly[i].getCoordinates();            for (int a=0; a < coords.length; a++) {              coordsList.add(coords[a]);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      int numPoints=coordsList.size();      Coordinate[] coords=new Coordinate[numPoints];      for (i=0; i < numPoints; i++) {        coords[i]=coordsList.get(i);      }      GeometryFactory factory=new GeometryFactory();      com.vividsolutions.jts.geom.MultiPoint mp=factory.createMultiPoint(coords);      updateProgress("Calculating convex hull:",-1);      com.vividsolutions.jts.geom.Geometry ch=mp.convexHull();      if (ch instanceof com.vividsolutions.jts.geom.Polygon) {        com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[chPoly.getNumInteriorRing() + 1];        Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();        if (!Topology.isClockwisePolygon(buffCoords)) {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < chPoly.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=chPoly.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        Object[] rowData=new Object[1];        rowData[0]=new Double(FID);        output.addRecord(wbPoly,rowData);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> createFullCopy(URI consistencyGroupId,VolumeFullCopyCreateParam input){  final String url=getIdUrl() + "/protection/full-copies";  return postTasks(input,url,consistencyGroupId);}  }
class C{  @ObjectiveCName("changeGroupNotificationsOnlyMentionsEnabled:") public void changeGroupNotificationsOnlyMentionsEnabled(boolean val){  modules.getSettingsModule().changeGroupNotificationsOnlyMentionsEnabled(val);}  }
class C{  public void addAll(POJOPropertyBuilder src){  _fields=merge(_fields,src._fields);  _ctorParameters=merge(_ctorParameters,src._ctorParameters);  _getters=merge(_getters,src._getters);  _setters=merge(_setters,src._setters);}  }
class C{  public double[] errorVector(V p){  return project(minusEquals(p.toArray(),centroid),weakEigenvectors);}  }
class C{  public EaseInOut(){}  }
class C{  public void removeChangeListener(ChangeListener l){  listeners.remove(l);}  }
class C{  public String minAbsoluteCoefficientValueTipText(){  return "The minimum absolute magnitude for model coefficients. Terms " + "with weights smaller than this value are ignored. If periodic " + "pruning is turned on then this is also used to determine if a "+ "word should be removed from the dictionary.";}  }
class C{  public static Map<String,String> jsonToMap(String jsonString){  Map<String,String> jsonMap=new TreeMap<String,String>();  try {    GfJsonObject jsonObject=new GfJsonObject(jsonString);    Iterator<String> keys=jsonObject.keys();    while (keys.hasNext()) {      String key=keys.next();      jsonMap.put(key,jsonObject.getString(key));    }  } catch (  GfJsonException e) {    throw new IllegalArgumentException("Could not convert jsonString : '" + jsonString + "' to map.");  }  return jsonMap;}  }
class C{  public void onCancelAccountUpdates(String accountNumber){}  }
class C{  public static String minus(CharSequence self,Object target){  String s=self.toString();  String text=DefaultGroovyMethods.toString(target);  int index=s.indexOf(text);  if (index == -1)   return s;  int end=index + text.length();  if (s.length() > end) {    return s.substring(0,index) + s.substring(end);  }  return s.substring(0,index);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void search(final Window parent,final JTable table){  Preconditions.checkNotNull(parent,"IE01198: Parent argument can not be null");  Preconditions.checkNotNull(table,"IE01199: Table argument can not be null");  final CTableSearcher searcher=new CTableSearcher(parent,"",table,0);  String searchText="";  do {    searchText=(String)JOptionPane.showInputDialog(parent,"Search",Constants.DEFAULT_WINDOW_TITLE,JOptionPane.QUESTION_MESSAGE,null,null,searchText);    if ((searchText != null) && (searchText.length() > 0) && !searcher.search(searchText)) {      JOptionPane.showMessageDialog(parent,"Search string not found",Constants.DEFAULT_WINDOW_TITLE,JOptionPane.ERROR_MESSAGE);    }  } while ((searchText != null) && (searchText.length() > 0));}  }
class C{  public static boolean deleteFile(String path){  if (StringUtils.isEmpty(path)) {    return true;  }  File file=new File(path);  if (!file.exists()) {    return true;  }  if (file.isFile()) {    return file.delete();  }  if (!file.isDirectory()) {    return false;  }  if (file.isDirectory()) {    for (    File f : file.listFiles()) {      if (f.isFile()) {        f.delete();      } else       if (f.isDirectory()) {        deleteFile(f.getAbsolutePath());      }    }  }  return file.delete();}  }
class C{  public int queryAsCount(Context context){  boolean customInclude=false;  if (includedColumns.isEmpty() && excludedColumns.isEmpty()) {    String columnName=CPOrm.findTableDetails(context,dataObjectClass).findPrimaryKeyColumn().getColumnName();    includedColumns.add(columnName);    customInclude=true;  }  CPOrmCursor<Model> cursor=queryAsCursor(context);  try {    if (cursor == null)     return 0;    return cursor.getCount();  }  finally {    if (customInclude) {      includedColumns.clear();    }    if (cursor != null)     cursor.close();  }}  }
class C{  public BasicFireEyeParserTest() throws Exception {  super();}  }
class C{  public static StreamMetadata fromJson(byte[] bytes){  checkNotNull(bytes,"bytes");  try (BufferedReader reader=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes)))){    return gson.fromJson(new JsonReader(reader),StreamMetadata.class);  } catch (  IOException e) {    throw Throwables.propagate(e);  }}  }
class C{  public IntervalDbDownloader(Collection<IPeriod> periods,FramingFlowType framingFlowType) throws AdeException {  m_iterator=AdeInternal.getAdeImpl().getDataStore().periods().getPeriodIntervals(periods,framingFlowType,false);}  }
class C{  private void removeClusterData(URI cluster,List<URI> newHosts,List<URI> newInitiators){  List<URI> hostUris=ComputeSystemHelper.getChildrenUris(_dbClient,cluster,Host.class,"cluster");  for (  URI hosturi : hostUris) {    newHosts.remove(hosturi);    newInitiators.removeAll(ComputeSystemHelper.getChildrenUris(_dbClient,hosturi,Initiator.class,"host"));  }}  }
class C{  @Override public String toString(){  StringBuffer res=new StringBuffer();  res.append(getTruePositive()).append(' ');  res.append(getFalseNegative()).append(' ');  res.append(getTrueNegative()).append(' ');  res.append(getFalsePositive()).append(' ');  res.append(getFalsePositiveRate()).append(' ');  res.append(getTruePositiveRate()).append(' ');  res.append(getPrecision()).append(' ');  res.append(getRecall()).append(' ');  res.append(getFMeasure()).append(' ');  res.append(getFallout()).append(' ');  return res.toString();}  }
class C{  public BusinessObjectDataAttributeEntity createBusinessObjectDataAttributeEntity(BusinessObjectDataEntity businessObjectDataEntity,String businessObjectDataAttributeName,String businessObjectDataAttributeValue){  BusinessObjectDataAttributeEntity businessObjectDataAttributeEntity=new BusinessObjectDataAttributeEntity();  businessObjectDataAttributeEntity.setBusinessObjectData(businessObjectDataEntity);  businessObjectDataAttributeEntity.setName(businessObjectDataAttributeName);  businessObjectDataAttributeEntity.setValue(businessObjectDataAttributeValue);  businessObjectDataEntity.getAttributes().add(businessObjectDataAttributeEntity);  businessObjectDataAttributeDao.saveAndRefresh(businessObjectDataEntity);  return businessObjectDataAttributeEntity;}  }
class C{  @Override public void update(){  setScore(score);}  }
class C{  public HexLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private static void insertLines(final ZyLabelContent content,final List<Pair<String,List<CStyleRunData>>> lines,final HashMap<Pair<String,List<CStyleRunData>>,ArrayList<CommentContainer>> comments,final int maxLineWidth){  for (  final Pair<String,List<CStyleRunData>> lineContent : lines) {    final ArrayList<CommentContainer> instructionComments=comments.get(lineContent);    final StringBuilder lineBuilder=new StringBuilder(lineContent.first());    final List<CStyleRunData> styleRuns=lineContent.second();    if ((instructionComments == null) || instructionComments.isEmpty()) {      final ZyLineContent instructionLine=new ZyLineContent(lineBuilder.toString(),NORMAL_FONT,styleRuns,null);      content.addLineContent(instructionLine);      continue;    }    final String instructionFirstCommentLine=instructionComments.get(0).getCommentingString() != null ? instructionComments.get(0).getCommentingString().get(0) : null;    if (instructionFirstCommentLine != null) {      lineBuilder.append(Strings.repeat(" ",(maxLineWidth - lineBuilder.length()) + 1));      lineBuilder.append(instructionFirstCommentLine);    }    final ZyLineContent instructionLine=new ZyLineContent(lineBuilder.toString(),NORMAL_FONT,styleRuns,null);    if (instructionFirstCommentLine != null) {      instructionLine.setFont(maxLineWidth + 1,instructionFirstCommentLine.length(),ITALIC_FONT);      instructionLine.setTextColor(maxLineWidth + 1,instructionFirstCommentLine.length(),Color.BLACK);      instructionLine.setTextColor(maxLineWidth + 1,instructionComments.get(0).getCommentUserNameLength(),instructionComments.get(0).getCommentColor());    }    content.addLineContent(instructionLine);    boolean firstCommentContainer=true;    for (    final CommentContainer commentContainer : instructionComments) {      boolean firstCommentLine=true;      for (      final String partialCommentString : commentContainer.getCommentingString()) {        if (firstCommentContainer) {          firstCommentContainer=false;          continue;        }        final ZyLineContent commentLine=new ZyLineContent(Strings.repeat(" ",maxLineWidth + 1) + partialCommentString,ITALIC_FONT,null);        commentLine.setTextColor(Color.BLACK);        if (firstCommentLine) {          firstCommentLine=false;          commentLine.setTextColor(maxLineWidth + 1,commentContainer.getCommentUserNameLength(),commentContainer.getCommentColor());        }        content.addLineContent(commentLine);      }    }  }}  }
class C{  public boolean isAgentPerfomance(){  return agentPerfomance;}  }
class C{  public static String makeLogTag(Class<?> cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public void applyQueryTimeout(java.sql.CallableStatement cs){  if (hasQueryTimeout()) {    try {      cs.setQueryTimeout(getQueryTimeoutInSeconds());    } catch (    SQLException e) {      throw new JDBCException("failed to setQueryTimeout to :" + getQueryTimeoutInSeconds(),e,e.getSQLState());    }  }}  }
class C{  public String trace(int level){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  printStackTrace(pw);  int count=0, i=0;  StringBuffer sb=sw.getBuffer();  for (; i < sb.length() && count < level + 1; i++) {    if (sb.charAt(i) == '\n') {      count++;    }  }  sb.setLength(i);  return sb.toString();}  }
class C{  @Override public void doGet(BaseSolrResource endpoint,String childId){  SolrQueryResponse response=endpoint.getSolrResponse();  if (childId != null) {    String key=getIgnoreCase() ? childId.toLowerCase(Locale.ROOT) : childId;    if (!managedWords.contains(key))     throw new SolrException(ErrorCode.NOT_FOUND,String.format(Locale.ROOT,"%s not found in %s",childId,getResourceId()));    response.add(childId,key);  } else {    response.add(WORD_SET_JSON_FIELD,buildMapToStore(managedWords));  }}  }
class C{  private void handleExceptionThrown(Context cx,Throwable ex,StackFrame frame){  if (breakOnExceptions) {    ContextData cd=frame.contextData();    if (cd.lastProcessedException != ex) {      interrupted(cx,frame,ex);      cd.lastProcessedException=ex;    }  }}  }
class C{  public Map<String,Class<?>> mapAvailableClasses(String uri) throws IOException {  _resourcesNotLoaded.clear();  Map<String,Class<?>> classes=new HashMap<>();  Map<String,String> map=mapAvailableStrings(uri);  for (Iterator<Entry<String,String>> iterator=map.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,String> entry=iterator.next();    String string=entry.getKey();    String className=entry.getValue();    try {      Class<?> clazz=_classLoader.loadClass(className);      classes.put(string,clazz);    } catch (    Exception notAvailable) {      _resourcesNotLoaded.add(className);    }  }  return classes;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public void removeServiceByName(String serviceName){  removeService(getServiceByName(serviceName));}  }
class C{  public SimpleFSDirectory(Path path,LockFactory lockFactory) throws IOException {  super(path,lockFactory);}  }
class C{  public PlotEntity(Shape area,Plot plot){  this(area,plot,null);}  }
class C{  public Location rhumbLocation(double azimuthDegrees,double distanceRadians,Location result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","rhumbLocation","missingResult"));  }  if (distanceRadians == 0) {    result.latitude=this.latitude;    result.longitude=this.longitude;    return result;  }  double latRadians=Math.toRadians(this.latitude);  double lonRadians=Math.toRadians(this.longitude);  double azimuthRadians=Math.toRadians(azimuthDegrees);  double endLatRadians=latRadians + distanceRadians * Math.cos(azimuthRadians);  double endLonRadians;  double dLat=endLatRadians - latRadians;  double q;  if (Math.abs(dLat) < NEAR_ZERO_THRESHOLD) {    q=Math.cos(latRadians);  } else {    double dPhi=Math.log(Math.tan(endLatRadians / 2 + Math.PI / 4) / Math.tan(latRadians / 2 + Math.PI / 4));    q=dLat / dPhi;  }  double dLon=distanceRadians * Math.sin(azimuthRadians) / q;  if (Math.abs(endLatRadians) > Math.PI / 2) {    endLatRadians=endLatRadians > 0 ? Math.PI - endLatRadians : -Math.PI - endLatRadians;  }  endLonRadians=(lonRadians + dLon + Math.PI) % (2 * Math.PI) - Math.PI;  if (Double.isNaN(endLatRadians) || Double.isNaN(endLonRadians)) {    result.latitude=this.latitude;    result.longitude=this.longitude;  } else {    result.latitude=normalizeLatitude(Math.toDegrees(endLatRadians));    result.longitude=normalizeLongitude(Math.toDegrees(endLonRadians));  }  return result;}  }
class C{  public boolean mutable(){  return ("Integer".equals(type) || "Double".equals(type) || "Boolean".equals(type)|| "Number".equals(type));}  }
class C{  public Builder ignoreBlankLines(boolean val){  ignoreBlankLines=val;  return this;}  }
class C{  public boolean removeTradestrategy(Tradestrategy tradestrategy){  for (ListIterator<Tradestrategy> itemIter=this.tradestrategies.listIterator(); itemIter.hasNext(); ) {    Tradestrategy item=itemIter.next();    if (item.equals(tradestrategy)) {      itemIter.remove();      return true;    }  }  return false;}  }
class C{  public static void traverse(HeapVisitor visitor){  new Traversal(visitor);}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  protected void onSyncStateUpdated(){}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public void incrementActivity(){  if (trackActivity) {    activityStats.allActive.increment();    if (isPrimary)     activityStats.primaryActive.increment();  }}  }
class C{  @DSComment("Content uri manipulation utility") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:44.696 -0500",hash_original_method="E7C08F28E029230A0C776D88B5A5BA54",hash_generated_method="362181E19A81B88A5331260D007E8420") public static long parseId(Uri contentUri){  String last=contentUri.getLastPathSegment();  return last == null ? -1 : Long.parseLong(last);}  }
class C{  public Iterator edgesOutOf(MethodOrMethodContext m){  return new ArrayList(srcMap.get(m)).iterator();}  }
class C{  protected final void createMiniBar(Composite parent){  if (!(getContainer() instanceof CTabFolder))   return;  miniBar=new MiniBar();  initializeMiniBar(miniBar);  if (!((MiniBar)miniBar).isEmpty()) {    createMiniBarControl(miniBar,(CTabFolder)getContainer(),parent);  }}  }
class C{  @SuppressWarnings("fallthrough") public int read() throws IOException {synchronized (lock) {    int c=super.read();    if (skipLF) {      if (c == '\n')       c=super.read();      skipLF=false;    }switch (c) {case '\r':      skipLF=true;case '\n':    lineNumber++;  return '\n';}return c;}}  }
class C{  private void blit_resize(PImage img,int srcX1,int srcY1,int srcX2,int srcY2,int[] destPixels,int screenW,int screenH,int destX1,int destY1,int destX2,int destY2,int mode){  if (srcX1 < 0)   srcX1=0;  if (srcY1 < 0)   srcY1=0;  if (srcX2 > img.width)   srcX2=img.width;  if (srcY2 > img.height)   srcY2=img.height;  int srcW=srcX2 - srcX1;  int srcH=srcY2 - srcY1;  int destW=destX2 - destX1;  int destH=destY2 - destY1;  boolean smooth=true;  if (!smooth) {    srcW++;    srcH++;  }  if (destW <= 0 || destH <= 0 || srcW <= 0 || srcH <= 0 || destX1 >= screenW || destY1 >= screenH || srcX1 >= img.width || srcY1 >= img.height) {    return;  }  int dx=(int)(srcW / (float)destW * PRECISIONF);  int dy=(int)(srcH / (float)destH * PRECISIONF);  srcXOffset=(int)(destX1 < 0 ? -destX1 * dx : srcX1 * PRECISIONF);  srcYOffset=(int)(destY1 < 0 ? -destY1 * dy : srcY1 * PRECISIONF);  if (destX1 < 0) {    destW+=destX1;    destX1=0;  }  if (destY1 < 0) {    destH+=destY1;    destY1=0;  }  destW=low(destW,screenW - destX1);  destH=low(destH,screenH - destY1);  int destOffset=destY1 * screenW + destX1;  srcBuffer=img.pixels;  if (smooth) {    iw=img.width;    iw1=img.width - 1;    ih1=img.height - 1;switch (mode) {case BLEND:      for (int y=0; y < destH; y++) {        filter_new_scanline();        for (int x=0; x < destW; x++) {          destPixels[destOffset + x]=blend_blend(destPixels[destOffset + x],filter_bilinear());          sX+=dx;        }        destOffset+=screenW;        srcYOffset+=dy;      }    break;case ADD:  for (int y=0; y < destH; y++) {    filter_new_scanline();    for (int x=0; x < destW; x++) {      destPixels[destOffset + x]=blend_add_pin(destPixels[destOffset + x],filter_bilinear());      sX+=dx;    }    destOffset+=screenW;    srcYOffset+=dy;  }break;case SUBTRACT:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {  destPixels[destOffset + x]=blend_sub_pin(destPixels[destOffset + x],filter_bilinear());  sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case LIGHTEST:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_lightest(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case DARKEST:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_darkest(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case REPLACE:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=filter_bilinear();sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case DIFFERENCE:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_difference(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case EXCLUSION:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_exclusion(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case MULTIPLY:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_multiply(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case SCREEN:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_screen(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case OVERLAY:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_overlay(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case HARD_LIGHT:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_hard_light(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case SOFT_LIGHT:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_soft_light(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case DODGE:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_dodge(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case BURN:for (int y=0; y < destH; y++) {filter_new_scanline();for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_burn(destPixels[destOffset + x],filter_bilinear());sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;}} else {switch (mode) {case BLEND:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_blend(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case ADD:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_add_pin(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case SUBTRACT:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_sub_pin(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case LIGHTEST:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_lightest(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case DARKEST:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_darkest(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case REPLACE:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=srcBuffer[sY + (sX >> PRECISIONB)];sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case DIFFERENCE:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_difference(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case EXCLUSION:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_exclusion(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case MULTIPLY:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_multiply(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case SCREEN:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_screen(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case OVERLAY:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_overlay(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case HARD_LIGHT:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_hard_light(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case SOFT_LIGHT:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_soft_light(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case DODGE:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_dodge(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;case BURN:for (int y=0; y < destH; y++) {sX=srcXOffset;sY=(srcYOffset >> PRECISIONB) * img.width;for (int x=0; x < destW; x++) {destPixels[destOffset + x]=blend_burn(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);sX+=dx;}destOffset+=screenW;srcYOffset+=dy;}break;}}}  }
class C{  private void testFailoverTransition(String fromHost,String toHost,Set<String> downedHosts,String recoverHost,String... expectedConnectionsHistory) throws Exception {  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  String fromHostOk=UnreliableSocketFactory.STATUS_CONNECTED + fromHost;  String toHostOk=UnreliableSocketFactory.STATUS_CONNECTED + toHost;  Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props,downedHosts);  Statement testStmt=null;  try {    if (recoverHost != null) {      UnreliableSocketFactory.dontDownHost(recoverHost);    }    assertEquals(fromHostOk,UnreliableSocketFactory.getHostFromLastConnection());    testStmt=testConn.createStatement();    assertSingleValueQuery(testStmt,"SELECT 1",1L);    UnreliableSocketFactory.downHost(fromHost);    assertEquals(fromHostOk,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);    assertEquals(toHostOk,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt,"SELECT 1",STMT_CLOSED_ERR_PATTERN);    testStmt=testConn.createStatement();    assertSingleValueQuery(testStmt,"SELECT 1",1L);    assertEquals(toHostOk,UnreliableSocketFactory.getHostFromLastConnection());    assertConnectionsHistory(expectedConnectionsHistory);  }  finally {    if (testStmt != null) {      testStmt.close();    }    if (testConn != null) {      testConn.close();    }  }}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while (rightBorderNotWhite && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while (bottomBorderNotWhite && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while (leftBorderNotWhite && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while (topBorderNotWhite && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals("status")) {    lblStatus.setText(evt.getNewValue().toString());  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public boolean parse(InputStream is) throws IOException, ParseException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(is));    String line;    while ((line=reader.readLine()) != null) {      line=line.trim();      if (line.startsWith(tempOptionLine)) {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("-T option is available in this SignalP Perl script version.");        }        return true;      }    }  }  finally {    if (reader != null) {      reader.close();    }  }  return false;}  }
class C{  protected void handleOrDeferSurpriseConnect(InternalDistributedMember member){synchronized (startupLock) {    if (!processingEvents) {      startupMessages.add(new StartupEvent(member));      return;    }  }  processSurpriseConnect(member);}  }
class C{  private static String decodeFormFields(final String content,final Charset charset){  if (content == null) {    return null;  }  return urldecode(content,charset != null ? charset : Charset.forName(HTTP.UTF_8),true);}  }
class C{  public void rootToLeafPaths(){  List<E> pathList=new ArrayList<>();  rootToLeafPaths(root,pathList);}  }
class C{  @Override public void openElement(String tagName){  Element newElement=document.createElement(tagName);  current.appendChild(newElement);  current=newElement;}  }
class C{  public static GeoTimeSerie rename(GeoTimeSerie gts,String name){  String newname=null;  if (name.startsWith("+")) {    newname=gts.getName() + name.substring(1);  } else {    newname=name;  }  gts.setName(newname);  gts.setRenamed(true);  return gts;}  }
class C{  void pushStringEntry(String qName,Attributes attributes,String key){  if (!pushIfIgnored(qName,attributes)) {    currentContainer=new StringEntry(qName,currentContainer,key);  }}  }
class C{  default String renderAnnotations(Generator gen,M model){  return gen.onEach(model.getAnnotations()).collect(joinIfNotEmpty(nl(),EMPTY,nl()));}  }
class C{  public boolean isFromWithParam(){  return m_isFromWithParam;}  }
class C{  private static QueryTask.Query buildTaskStateQuery(String propertyName,TaskState.TaskStage... stages){  if (stages.length == 1) {    return new QueryTask.Query().setTermPropertyName(propertyName).setTermMatchValue(stages[0].toString());  }  QueryTask.Query query=new QueryTask.Query();  for (  TaskState.TaskStage stage : stages) {    QueryTask.Query stageQuery=new QueryTask.Query().setTermPropertyName(propertyName).setTermMatchValue(stage.toString());    stageQuery.occurance=QueryTask.Query.Occurance.SHOULD_OCCUR;    query.addBooleanClause(stageQuery);  }  return query;}  }
class C{  private Base64(){}  }
class C{  @Override public Instances generateExamples() throws Exception {  Random random=getRandom();  Instances format=getDatasetFormat();  if (format == null) {    throw new Exception("Dataset format not defined.");  }  format=generateExamples(getNumExamplesAct(),random,format);  if (getVoteFlag()) {    format=voteDataset(format);  }  return format;}  }
class C{  @Override protected Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public void removeNetworks(String identifier){  removeNetwork(identifier);}  }
class C{  public RatPoly add(RatPoly p){  if (p.isNaN() || this.isNaN()) {    return NAN;  }  RatPoly result=new RatPoly(terms.copy());  for (int i=0, size=p.terms.size(); i < size; i++) {    sortedAdd(result.terms,p.terms.get(i));  }  return result;}  }
class C{  public void createUnderlying(){  bounds=new com.lynden.gmapsfx.javascript.object.LatLongBounds(this.sw.toLatLong(),this.ne.toLatLong());}  }
class C{  public int[] obtainVotes(Instance inst) throws Exception {  if (!m_checksTurnedOff) {    m_Missing.input(inst);    m_Missing.batchFinished();    inst=m_Missing.output();  }  if (m_NominalToBinary != null) {    m_NominalToBinary.input(inst);    m_NominalToBinary.batchFinished();    inst=m_NominalToBinary.output();  }  if (m_Filter != null) {    m_Filter.input(inst);    m_Filter.batchFinished();    inst=m_Filter.output();  }  int[] votes=new int[inst.numClasses()];  for (int i=0; i < inst.numClasses(); i++) {    for (int j=i + 1; j < inst.numClasses(); j++) {      double output=m_classifiers[i][j].SVMOutput(-1,inst);      if (output > 0) {        votes[j]+=1;      } else {        votes[i]+=1;      }    }  }  return votes;}  }
class C{  public static void i(String message,Throwable cause){  Log.i(LOG_TAG,"[" + message + "]",cause);}  }
class C{  @Override public ReturnValue go(String[] args) throws Exception {  ApplicationContext applicationContext=createApplicationContext();  ReturnValue returnValue=parseCommandLineArguments(args,applicationContext);  if (returnValue != null) {    return returnValue;  }  S3FileTransferRequestParamsDto params=S3FileTransferRequestParamsDto.builder().localPath(argParser.getStringValue(localPathOpt)).useRrs(argParser.getBooleanValue(rrsOpt)).s3AccessKey(argParser.getStringValue(s3AccessKeyOpt)).s3SecretKey(argParser.getStringValue(s3SecretKeyOpt)).s3Endpoint(argParser.getStringValue(s3EndpointOpt)).maxThreads(maxThreads).httpProxyHost(argParser.getStringValue(httpProxyHostOpt)).httpProxyPort(httpProxyPort).socketTimeout(argParser.getIntegerValue(socketTimeoutOpt)).build();  UploaderController controller=applicationContext.getBean(UploaderController.class);  RegServerAccessParamsDto regServerAccessParamsDto=RegServerAccessParamsDto.builder().regServerHost(regServerHost).regServerPort(regServerPort).useSsl(useSsl).username(argParser.getStringValue(usernameOpt)).password(argParser.getStringValue(passwordOpt)).build();  controller.performUpload(regServerAccessParamsDto,argParser.getFileValue(manifestPathOpt),params,argParser.getBooleanValue(createNewVersionOpt),argParser.getBooleanValue(forceOpt),maxRetryAttempts,retryDelaySecs);  return ReturnValue.SUCCESS;}  }
class C{  public StringSet clone(){  StringSet result=new StringSet();  for (int i=0; i < contents.size(); i++) {    result.add(contents.elementAt(i));  }  return result;}  }
class C{  public Annotation(CstType type,AnnotationVisibility visibility){  if (type == null) {    throw new NullPointerException("type == null");  }  if (visibility == null) {    throw new NullPointerException("visibility == null");  }  this.type=type;  this.visibility=visibility;  this.elements=new TreeMap<CstString,NameValuePair>();}  }
class C{  public FlowNetworkArray(int numVertices,int srcIndex,int sinkIndex,Iterator<EdgeInfo> edges){  super(numVertices,srcIndex,sinkIndex);  populate(edges);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.505 -0500",hash_original_method="116518F1A4221980790E05262EEBEF20",hash_generated_method="B62EB3A2A250732FE27C1630FDC46337") public static int countGsmSeptetsUsingTables(CharSequence s,boolean use7bitOnly,int languageTable,int languageShiftTable){  int count=0;  int sz=s.length();  SparseIntArray charToLanguageTable=sCharsToGsmTables[languageTable];  SparseIntArray charToShiftTable=sCharsToShiftTables[languageShiftTable];  for (int i=0; i < sz; i++) {    char c=s.charAt(i);    if (c == GSM_EXTENDED_ESCAPE) {      Log.w(TAG,"countGsmSeptets() string contains Escape character, skipping.");      continue;    }    if (charToLanguageTable.get(c,-1) != -1) {      count++;    } else     if (charToShiftTable.get(c,-1) != -1) {      count+=2;    } else     if (use7bitOnly) {      count++;    } else {      return -1;    }  }  return count;}  }
class C{  public void copy(Automaton other){  int stateOffset=getNumStates();  states=ArrayUtil.grow(states,nextState + other.nextState);  System.arraycopy(other.states,0,states,nextState,other.nextState);  for (int i=0; i < other.nextState; i+=2) {    if (states[nextState + i] != -1) {      states[nextState + i]+=nextTransition;    }  }  nextState+=other.nextState;  int otherNumStates=other.getNumStates();  BitSet otherAcceptStates=other.getAcceptStates();  int state=0;  while (state < otherNumStates && (state=otherAcceptStates.nextSetBit(state)) != -1) {    setAccept(stateOffset + state,true);    state++;  }  transitions=ArrayUtil.grow(transitions,nextTransition + other.nextTransition);  System.arraycopy(other.transitions,0,transitions,nextTransition,other.nextTransition);  for (int i=0; i < other.nextTransition; i+=3) {    transitions[nextTransition + i]+=stateOffset;  }  nextTransition+=other.nextTransition;  if (other.deterministic == false) {    deterministic=false;  }}  }
class C{  public Authentication(){  setType(IQ.Type.SET);}  }
class C{  public SkeletonVersionChecker(int defaultVersion){  myExplicitVersion=createTreeMap();  myDefaultVersion=defaultVersion;  load();}  }
class C{  public void testIsValidUtf8_1Byte() throws UnsupportedEncodingException {  IsValidUtf8TestUtil.testBytes(1,IsValidUtf8TestUtil.EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT);}  }
class C{  public void select(Selectable selectable,boolean multi){  parent.selectionChanged(doSelect(selectable,multi));}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public void lineDot(final int x0,final int y0,final int x1,final int y1,final int radius,final int padding,final long lineColor,final long dotColor){  final double dx=x1 - x0;  final double dy=y1 - y0;  final double angle=Math.atan2(dy,dx);  final double d=Math.sqrt((dx * dx + dy * dy));  final double ddotcenter=d - radius - padding;  final double ddotborder=ddotcenter - radius;  final double xn=Math.cos(angle);  final double yn=Math.sin(angle);  final int x2=x0 + ((int)(ddotcenter * xn));  final int y2=y0 + ((int)(ddotcenter * yn));  final int x3=x0 + ((int)(ddotborder * xn));  final int y3=y0 + ((int)(ddotborder * yn));  setColor(lineColor);  line(x0,y0,x3,y3,100);  setColor(dotColor);  dot(x2,y2,radius,true,100);}  }
class C{  protected static List<String> extractPpOpts(final List<String> args){  List<String> actualArgs=new ArrayList<String>();  String path=null;  for (int i=0; i < args.size(); i++) {    if (args.get(i).equals("-processorpath") && (i + 1 < args.size())) {      args.remove(i);      path=args.remove(i);      i--;    }  }  if (path != null) {    actualArgs.add(path);  }  return actualArgs;}  }
class C{  public static Object toObject(COMObject parent,Variant variant,String key,Object defaultValue){  try {    return toObject(parent,variant,key);  } catch (  ExpressionException ee) {    return defaultValue;  }}  }
class C{  public static boolean isValidCharacterDataChar(char c){  return (c >= '\u0020' && c <= '\uD7FF') || (c >= '\uE000' && c <= '\uFFFD') || c == '\u0009' || c == '\n' || c == '\r';}  }
class C{  protected TextureTile allocateTextureTile(ContentTile tile){  TextureTile[] timeOrderedEntries=new TextureTile[this.textureTiles.size()];  Arrays.sort(this.textureTiles.toArray(timeOrderedEntries));  TextureTile textureTile=timeOrderedEntries[0];  textureTile.currentTile=tile;  this.textureTileMap.put(tile,textureTile);  return textureTile;}  }
class C{  public static void copyFileFromInputStream(String filePath,InputStream in) throws UtilException {  copyFileFromInputStream(filePath,in,null);}  }
class C{  protected void update(DialogueState currentState){  if (!currentState.hasChanceNode(queryVar)) {    return;  } else   if (lastDistrib != null && this.lastDistrib.equals(currentState.getChanceNode(queryVar).getDistrib())) {    return;  }  this.lastDistrib=currentState.queryProb(queryVar);  Container container=new Container();  container.setLayout(new BorderLayout());  container.add(new JLabel("        "),BorderLayout.NORTH);  container.add(new JLabel("        "),BorderLayout.WEST);  container.add(new JLabel("        "),BorderLayout.EAST);  container.add(new JLabel("        "),BorderLayout.SOUTH);  try {    IndependentDistribution indepDistrib=currentState.queryProb(queryVar);    if (indepDistrib instanceof ContinuousDistribution) {      container.add(generatePanel(indepDistrib.toContinuous()),BorderLayout.CENTER);    } else {      container.add(generatePanel(indepDistrib.toDiscrete()),BorderLayout.CENTER);    }  } catch (  RuntimeException e) {    log.warning("could not generate distribution viewer: " + e);  }  setContentPane(container);  if (getSize().height == 0 || getSize().width == 0) {    pack();    setLocation(new Random().nextInt(500),(new Random()).nextInt(500));    setVisible(true);  } else {    validate();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.318 -0500",hash_original_method="7A2D44AF2F579D4A5E25B4BDA18E068A",hash_generated_method="EF6AF958553B22C2771FC739F823DDA7") public X509Attribute(String oid,ASN1EncodableVector value){  this.attr=new Attribute(new DERObjectIdentifier(oid),new DERSet(value));}  }
class C{  @RequestProcessing(value="/activity/1A0001/bet",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class,CSRFCheck.class,Activity1A0001Validation.class}) @After(adviceClass=StopwatchEndAdvice.class) public void bet1A0001(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  context.renderJSON().renderFalseResult();  final JSONObject requestJSONObject=Requests.parseRequestJSONObject(request,context.getResponse());  final int amount=requestJSONObject.optInt(Common.AMOUNT);  final int smallOrLarge=requestJSONObject.optInt(Common.SMALL_OR_LARGE);  final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);  final String fromId=currentUser.optString(Keys.OBJECT_ID);  final JSONObject ret=activityMgmtService.bet1A0001(fromId,amount,smallOrLarge);  if (ret.optBoolean(Keys.STATUS_CODE)) {    String msg=langPropsService.get("activity1A0001BetedLabel");    final String small=langPropsService.get("activity1A0001BetSmallLabel");    final String large=langPropsService.get("activity1A0001BetLargeLabel");    msg=msg.replace("{smallOrLarge}",smallOrLarge == 0 ? small : large);    msg=msg.replace("{point}",String.valueOf(amount));    context.renderTrueResult().renderMsg(msg);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.138 -0500",hash_original_method="DB3FE2513664456015F767E0971235E8",hash_generated_method="D8F974B133FEC957A11D4C56787360D6") public boolean isPreventingWebkitUpdates(){  return isZoomAnimating();}  }
class C{  private boolean isShowSelf(String packagename){  return !Utils.isShowSelf() && packagename.equals(mContext.getPackageName());}  }
class C{  public boolean acceptIncomingConnect(BluetoothDevice device){  if (DBG)   log("acceptIncomingConnect");  if (mService != null && isEnabled()) {    try {      return mService.acceptIncomingConnect(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  protected Image createNewHexImage(){  GraphicsConfiguration config=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  return config.createCompatibleImage(bounds.width,bounds.height,Transparency.TRANSLUCENT);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PlatformException(String msg){  super(msg);}  }
class C{  public static double convertHoursToMillis(double hours){  return (hours * HOUR_TO_MILLIS);}  }
class C{  public int indexOf(int elem){  return indexOf(elem,0);}  }
class C{  private void generateFallbackKeys(String key,ArrayList<String> fallbackKeys){  int p1=key.indexOf("[$");  if (p1 == -1) {    fallbackKeys.add(key);  } else {    int p2=key.indexOf(']',p1 + 2);    if (p2 == -1) {      return;    }    String modifierKey=key.substring(p1 + 2,p2);    String[] modifierValues=propertyNameModifiers.get(modifierKey);    if (modifierValues == null) {      modifierValues=new String[]{"default"};    }    for (    String mv : modifierValues) {      generateFallbackKeys(key.substring(0,p1) + mv + key.substring(p2 + 1),fallbackKeys);    }  }}  }
class C{  public static String toListString(Collection self,int maxSize){  return (self == null) ? "null" : InvokerHelper.toListString(self,maxSize);}  }
class C{  public static char intToHexDigitMsb0(final int nibble){switch (nibble) {case 0x0:    return '0';case 0x1:  return '8';case 0x2:return '4';case 0x3:return 'c';case 0x4:return '2';case 0x5:return 'a';case 0x6:return '6';case 0x7:return 'e';case 0x8:return '1';case 0x9:return '9';case 0xA:return '5';case 0xB:return 'd';case 0xC:return '3';case 0xD:return 'b';case 0xE:return '7';case 0xF:return 'f';default :throw new IllegalArgumentException("nibble value not between 0 and 15: " + nibble);}}  }
class C{  @Override public String globalInfo(){  return "Class implementing the CoverTree datastructure.\n" + "The class is very much a translation of the c source code made " + "available by the authors.\n\n"+ "For more information and original source code see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public boolean contains(int x,int y){  Polygon clickRegion=getClickRegion();  if (clickRegion != null) {    return clickRegion.contains(new Point(x,y));  } else {    return false;  }}  }
class C{  void allocBricks(){  final float totalBrickWidth=ARENA_WIDTH - BORDER_WIDTH * 2;  final float brickWidth=totalBrickWidth / BRICK_COLUMNS;  final float totalBrickHeight=ARENA_HEIGHT * (BRICK_TOP_PERC - BRICK_BOTTOM_PERC);  final float brickHeight=totalBrickHeight / BRICK_ROWS;  final float zoneBottom=ARENA_HEIGHT * BRICK_BOTTOM_PERC;  final float zoneLeft=BORDER_WIDTH;  for (int i=0; i < mBricks.length; i++) {    Brick brick=new Brick();    int row=i / BRICK_COLUMNS;    int col=i % BRICK_COLUMNS;    float bottom=zoneBottom + row * brickHeight;    float left=zoneLeft + col * brickWidth;    brick.setPosition(left + brickWidth / 2,bottom + brickHeight / 2);    brick.setScale(brickWidth * (1.0f - BRICK_HORIZONTAL_GAP_PERC),brickHeight * (1.0f - BRICK_VERTICAL_GAP_PERC));    float factor=(float)i / (mBricks.length - 1);    int oddness=(row & 1) ^ (col & 1);    brick.setColor(factor,1.0f - factor,0.25f + 0.20f * oddness);    brick.setScoreValue((row + 1) * 100);    brick.setAlive(true);    mBricks[i]=brick;  }  if (false) {    int max=0;    for (int j=0; j < BRICK_ROWS; j++) {      max+=(j + 1) * BRICK_COLUMNS;    }    Log.d(TAG,"max score on 'normal' is " + (max * 100));  }  mLiveBrickCount=mBricks.length;}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  if (oldVersion != newVersion) {    if (newVersion == 2 && oldVersion == 1) {      WXLogUtils.d(TAG_STORAGE,"storage is updating from version " + oldVersion + " to version "+ newVersion);      boolean updateResult=true;      try {        long start=System.currentTimeMillis();        db.beginTransaction();        String SQL_ADD_COLUMN_TIMESTAMP="ALTER TABLE " + TABLE_STORAGE + " ADD COLUMN "+ COLUMN_TIMESTAMP+ " TEXT;";        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_ADD_COLUMN_TIMESTAMP);        db.execSQL(SQL_ADD_COLUMN_TIMESTAMP);        String SQL_ADD_COLUMN_PERSISTENT="ALTER TABLE " + TABLE_STORAGE + " ADD COLUMN "+ COLUMN_PERSISTENT+ " INTEGER;";        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_ADD_COLUMN_PERSISTENT);        db.execSQL(SQL_ADD_COLUMN_PERSISTENT);        String SQL_UPDATE_TABLE="UPDATE " + TABLE_STORAGE + " SET "+ COLUMN_TIMESTAMP+ " = '"+ sDateFormatter.format(new Date())+ "' , "+ COLUMN_PERSISTENT+ " = 0";        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_UPDATE_TABLE);        db.execSQL(SQL_UPDATE_TABLE);        db.setTransactionSuccessful();        long time=System.currentTimeMillis() - start;        WXLogUtils.d(TAG_STORAGE,"storage updated success (" + time + "ms)");      } catch (      Exception e) {        WXLogUtils.d(TAG_STORAGE,"storage updated failed from version " + oldVersion + " to version "+ newVersion+ ","+ e.getMessage());        updateResult=false;      } finally {        db.endTransaction();      }      if (!updateResult) {        WXLogUtils.d(TAG_STORAGE,"storage is rollback,all data will be removed");        deleteDB();        onCreate(db);      }    } else {      deleteDB();      onCreate(db);    }  }}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);}  }
class C{  private void processOutgoing(Fact fact){  URI predURI=fact.getPredicate();  Value object=fact.getObject();  OwlProperty prop=schema.getProperty(predURI);  Set<Resource> restrictions=prop.getRestrictions();  Set<URI> disjointProps=prop.getDisjointProperties();  for (  Resource type : prop.getDomain()) {    types.processType(type,OwlRule.PRP_DOM,fact);  }  if (!fact.hasRule(OwlRule.PRP_SPO1)) {    for (    URI superProp : prop.getSuperProperties()) {      if (superProp.equals(predURI)) {        continue;      }      collect(triple(node,superProp,object,OwlRule.PRP_SPO1,fact));    }  }  if (!disjointProps.isEmpty()) {    for (    URI disjointProp : disjointProps) {      if (disjointOutgoing.containsKey(disjointProp)) {        for (        Fact other : disjointOutgoing.get(disjointProp)) {          if (object.equals(other.getObject())) {            Derivation pdwFact=inconsistency(OwlRule.PRP_PDW,fact);            pdwFact.addSource(other);            collectInconsistency(pdwFact);          }        }      }    }    if (!disjointOutgoing.containsKey(predURI)) {      disjointOutgoing.put(predURI,new LinkedList<Fact>());    }    disjointOutgoing.get(predURI).add(fact);  }  for (  Resource rNode : restrictions) {    OwlClass restriction=schema.getClass(rNode);    if (restriction.someValuesFrom().contains(OWL.THING)) {      types.processType(rNode,OwlRule.CLS_SVF2,fact);    }    if (restriction.hasValue().contains(object)) {      types.processType(rNode,OwlRule.CLS_HV2,fact);    }    for (    Resource c : restriction.allValuesFrom()) {      if (object instanceof Resource) {        types.onType(rNode,triple((Resource)object,RDF.TYPE,c,OwlRule.CLS_AVF,fact));      }    }    if (restriction.getMaxCardinality() == 0) {      types.inconsistentOnType(rNode,inconsistency(OwlRule.CLS_MAXC1,fact));    }    if (restriction.getMaxQualifiedCardinality() == 0 && restriction.onClass().contains(OWL.THING)) {      types.inconsistentOnType(rNode,inconsistency(OwlRule.CLS_MAXQC2,fact));    }  }  if (prop.isTransitive() && !object.equals(node) && checkTransitivityOutgoing(fact)) {    if (transitiveIncoming.containsKey(predURI)) {      for (      Fact other : transitiveIncoming.get(predURI)) {        Resource otherSubject=other.getSubject();        Fact trpFact=triple(otherSubject,predURI,object,OwlRule.PRP_TRP,fact);        trpFact.addSource(other);        collect(trpFact);      }    }  }  if (prop.isAsymmetric() && asymmetricIncoming.containsKey(predURI)) {    for (    Fact other : asymmetricIncoming.get(predURI)) {      if (object.equals(other.getSubject())) {        Derivation asypFact=inconsistency(OwlRule.PRP_ASYP,fact);        asypFact.addSource(other);        collectInconsistency(asypFact);      }    }  }}  }
class C{  public ColladaTechniqueCommon(String ns){  super(ns);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void mapEntityDatabaseId2ExtId(SyncAttribute syncAttribute,PropertyList properties){  for (  Property property : properties.getProperties()) {    LOG.debug(EXPORT_REFERENCES + " transform : " + property);    int dbid=INVALID_DATABASE_ID;    dbid=castDatabaseId2Int(property,dbid);    if (INVALID_DATABASE_ID != dbid) {      writeExternalIdToSyncAttributes(syncAttribute,property,dbid);    }  }}  }
class C{  public void addAnalytics(){  SimulatedGpsSensor g=new SimulatedGpsSensor();  TStream<GpsSensor> gpsSensor=topology.poll(null,500,TimeUnit.MILLISECONDS);  if (trackGpsLocation) {    TStream<GpsSensor> logGps=gpsSensor.peek(null);    logGps.tag("logGps");    app.iotDevice().events(JsonGps(logGps),"GPS: " + driverId,QoS.FIRE_AND_FORGET);  }  if (trackSpeeding) {    TStream<GpsSensor> speeding=gpsSensor.filter(null);    speeding.tag("speeding");    speeding.peek(null);    app.iotDevice().events(JsonSpeed(speeding),"Speeding: " + driverId,QoS.FIRE_AND_FORGET);  }  if (trackGeofence) {    TStream<GpsSensor> geofence=gpsSensor.filter(null);    geofence.tag("geofence");    geofence.peek(null);    app.iotDevice().events(JsonGeofence(geofence),"Geofence: " + driverId,QoS.FIRE_AND_FORGET);  }  if (trackHardDriving) {    TStream<GpsSensor> hardDriving=gpsSensor;    TWindow<GpsSensor,Object> window=hardDriving.last(2,null);    TStream<GpsSensor[]> logHardDriving=window.batch(null).peek(null).tag("hardDriving");    app.iotDevice().events(JsonHardDriving(logHardDriving),"hardDriving: " + driverId,QoS.FIRE_AND_FORGET);  }}  }
class C{  @Override public String toString(){  int len=_value.length();  len=len + 2 + (len >> 4);  StringBuilder sb=new StringBuilder(len);  appendQuoted(sb,_value);  return sb.toString();}  }
class C{  public RawProperty(String propertyName,String value,VCardDataType dataType){  super(value);  this.propertyName=propertyName;  this.dataType=dataType;}  }
class C{  public static boolean addLiquidTransposerRecipe(ItemStack aEmptyContainer,FluidStack aLiquid,ItemStack aFullContainer,int aMJ){  aFullContainer=GT_OreDictUnificator.get(true,aFullContainer);  if (aEmptyContainer == null || aFullContainer == null || aLiquid == null)   return false;  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.liquidtransposer,aFullContainer,true))   return false;  try {    ThermalExpansion.addTransposerFill(aMJ * 10,aEmptyContainer,aFullContainer,aLiquid,true);  } catch (  Throwable e) {  }  return true;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testSingleSchemaNodeProcessing() throws Exception {  DevNull oper=new DevNull();  oper.beginWindow(0);  long numtuples=1000000;  Object o=new Object();  for (long i=0; i < numtuples; i++) {    oper.data.process(o);  }  oper.endWindow();  LOG.info(String.format("\n*******************************************************\nnumtuples(%d)",numtuples));}  }
class C{  BitSetIterator(long[] bits){  this.bits=bits;  index=0;  while (index < bits.length && bits[index] == 0L)   index++;  if (index < bits.length)   save=bits[index];}  }
class C{  public Closure addAttributeDelegate(Closure attrDelegate){  getProxyBuilder().attributeDelegates.addFirst(attrDelegate);  return attrDelegate;}  }
class C{  public POPOSigningKey(POPOSigningKeyInput poposkIn,AlgorithmIdentifier aid,DERBitString signature){  this.poposkInput=poposkIn;  this.algorithmIdentifier=aid;  this.signature=signature;}  }
class C{  public static String elapsedTime(long start,long end){  if (start > end) {    return null;  }  long[] elapsedTime=new long[TIME_FACTOR.length];  for (int i=0; i < TIME_FACTOR.length; i++) {    elapsedTime[i]=start > end ? -1 : (end - start) / TIME_FACTOR[i];    start+=TIME_FACTOR[i] * elapsedTime[i];  }  NumberFormat nf=NumberFormat.getInstance();  nf.setMinimumIntegerDigits(2);  StringBuffer buf=new StringBuffer();  for (int i=0; i < elapsedTime.length; i++) {    if (i > 0) {      buf.append(":");    }    buf.append(nf.format(elapsedTime[i]));  }  return buf.toString();}  }
class C{  @Nonnull public BugInstance addMethod(JavaClass javaClass,Method method){  MethodAnnotation methodAnnotation=new MethodAnnotation(javaClass.getClassName(),method.getName(),method.getSignature(),method.isStatic());  SourceLineAnnotation methodSourceLines=SourceLineAnnotation.forEntireMethod(javaClass,method);  methodAnnotation.setSourceLines(methodSourceLines);  addMethod(methodAnnotation);  return this;}  }
class C{  @Deprecated public static <T>void awaitAll(long timeout,@Nullable Collection<IgniteInternalFuture<T>> futs) throws IgniteCheckedException {  awaitAll(timeout,null,futs);}  }
class C{  @Override public int readTimeout(byte[] buf,int offset,int length,long timeout) throws IOException {  Socket s=_s;  if (s == null) {    return -1;  }  int oldTimeout=s.getSoTimeout();  s.setSoTimeout((int)timeout);  try {    int result=read(buf,offset,length);    if (result >= 0) {      return result;    } else     if (_is == null || _is.available() < 0) {      return -1;    } else {      return ReadStream.READ_TIMEOUT;    }  }  finally {    s.setSoTimeout(oldTimeout);  }}  }
class C{  public final double splitCritValue(Distribution bags,double totalnoInst,double numerator){  double denumerator;  denumerator=splitEnt(bags,totalnoInst);  if (Utils.eq(denumerator,0)) {    return 0;  }  denumerator=denumerator / totalnoInst;  return numerator / denumerator;}  }
class C{  private void projectVector(Vec vec,int slot,int[] projLocation,Vec projected){  randProjMatrix.multiply(vec,1.0,projected);  int pos=0;  int bitsLeft=Integer.SIZE;  int curVal=0;  while (pos < slotsPerEntry) {    while (bitsLeft > 0) {      curVal<<=1;      if (projected.get(pos * Integer.SIZE + (Integer.SIZE - bitsLeft)) >= 0)       curVal|=1;      bitsLeft--;    }    projLocation[slot + pos]=curVal;    curVal=0;    bitsLeft=Integer.SIZE;    pos++;  }}  }
class C{  public static void uploadLog(Context context){  init(context);  try {    if (aidlService != null) {      aidlService.uploadLog();    } else {      cacheEventList.add(new AIDLCacheEvent(EventType.UPLOAD_LOG));    }  } catch (  RemoteException e) {    EventManager.onError(context,e.getMessage());    Ln.e("EventManager == ","uploadLog == ",e);  }}  }
class C{  public long readLongLE() throws IOException {  inputStream.readFully(workSpace,0,8);  return ((long)(workSpace[7] & 0xff) << 56) | ((long)(workSpace[6] & 0xff) << 48) | ((long)(workSpace[5] & 0xff) << 40)| ((long)(workSpace[4] & 0xff) << 32)| ((long)(workSpace[3] & 0xff) << 24)| ((long)(workSpace[2] & 0xff) << 16)| ((long)(workSpace[1] & 0xff) << 8)| ((long)(workSpace[0] & 0xff));}  }
class C{  public static String loadConfigurationContents(String resourceName) throws IOException {  String result=null;  InputStream in=ResourceUtil.getInputStream(getResourceName(resourceName));  if (in == null) {    in=ResourceUtil.getInputStream(getDefaultResourceName(resourceName));  }  if (in != null) {    result=IOUtil.readString(in);  }  return result;}  }
class C{  public void updateAll(){}  }
class C{  public static Intent buildFileProviderReadUriIntent(Context context,String pathName,String action,String type){  Uri uri=FileProvider.getUriForFile(context,getFileProviderAuthority(),new File(pathName));  Intent intent=new Intent().setAction(action).setDataAndType(uri,type);  grantUriPermissions(context,intent,Intent.FLAG_GRANT_READ_URI_PERMISSION);  return intent;}  }
class C{  public boolean matches(World world,BlockPos pos,SubTileEntity pureDaisy,IBlockState state){  if (input instanceof Block)   return state.getBlock() == input;  ItemStack stack=new ItemStack(state.getBlock(),1,state.getBlock().damageDropped(state));  String oredict=(String)input;  return isOreDict(stack,oredict);}  }
class C{  public static void warning(final String string,final Object... args){  if (log.isLoggable(Level.WARNING)) {    log.warning(String.format(string,args));  }}  }
class C{  public BillingApplicationException(String message){  super(message);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord || is_ValueChanged("C_CashBook_ID") || is_ValueChanged("M_Warehouse_ID")) {    MCashBook cb=MCashBook.get(getCtx(),getC_CashBook_ID(),get_TrxName());    if (cb.getAD_Org_ID() != getAD_Org_ID()) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@AD_Org_ID@: @C_CashBook_ID@"));      return false;    }    MWarehouse wh=MWarehouse.get(getCtx(),getM_Warehouse_ID(),get_TrxName());    if (wh.getAD_Org_ID() != getAD_Org_ID()) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@AD_Org_ID@: @M_Warehouse_ID@"));      return false;    }  }  return true;}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);}  }
class C{  public void testCase17(){  byte aBytes[]={-120,34,78,-23,-111,45,127,23,45,-3};  byte bBytes[]={-120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={0};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  private void initEncTimes(){  this.lastEncouterTime=new HashMap<DTNHost,Double>();}  }
class C{  private List<Node> possibleParents(Node x,List<Node> nodes,IKnowledge knowledge){  List<Node> possibleParents=new LinkedList<>();  String _x=x.getName();  for (  Node z : nodes) {    String _z=z.getName();    if (PossibleDsepCfci.possibleParentOf(_z,_x,knowledge)) {      possibleParents.add(z);    }  }  return possibleParents;}  }
class C{  public static Date createDate(java.util.Date date){  return new Date(date,Units.Type.YEARS);}  }
class C{  public StringConstantOperand(String v,Offset i){  super(v,i);}  }
class C{  public void addHexEditorListener(HexEditorListener l){  listenerList.add(HexEditorListener.class,l);}  }
class C{  private void addParserNoticeHighlights(ParseResult res){  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: Adding parser notices from " + res.getParser());  }  if (noticesToHighlights == null) {    noticesToHighlights=new HashMap();  }  removeParserNotices(res);  List notices=res.getNotices();  if (notices.size() > 0) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (Iterator i=notices.iterator(); i.hasNext(); ) {      ParserNotice notice=(ParserNotice)i.next();      if (DEBUG_PARSING) {        System.out.println("[DEBUG]: ... adding: " + res);      }      try {        Object highlight=null;        if (notice.getShowInEditor()) {          highlight=h.addParserHighlight(notice,parserErrorHighlightPainter);        }        noticesToHighlights.put(notice,highlight);      } catch (      BadLocationException ble) {        ble.printStackTrace();      }    }  }  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: Done adding parser notices from " + res.getParser());  }}  }
class C{  protected void removeShadowShape(){  this.getShadowLayer().removeAllRenderables();  if (this.getShape() instanceof AbstractAirspace)   ((AbstractAirspace)this.getShape()).setAlwaysOnTop(false);  if (this.getOriginalAttributes() != null) {    ((Attributable)this.getShape()).setAttributes(this.getOriginalAttributes());    ((Attributable)this.getShape()).setHighlightAttributes(this.getOriginalHighlightAttributes());  }  this.getWwd().redraw();}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public static void deleteExisitingRows(String table,String filter,Connection connection){  table=table.replace(";","");  filter=filter.replace(";","");  StringBuilder deleteRowsQuery=new StringBuilder();  deleteRowsQuery.append("DELETE FROM ");  deleteRowsQuery.append(table);  deleteRowsQuery.append(" WHERE USED_FILTER='");  deleteRowsQuery.append(filter);  deleteRowsQuery.append("'");  LOG.info("Delete rows: ");  LOG.info(deleteRowsQuery);  executeStatementIfExists(deleteRowsQuery.toString(),connection);}  }
class C{  @NotNull public PsiQuery last(){  return (myPsiElements.length > 0) ? new PsiQuery(myPsiElements[myPsiElements.length - 1]) : EMPTY;}  }
class C{  @Deprecated public <T>CLBuffer<T> createBuffer(CLMem.Usage usage,PointerIO<T> io,long elementCount){  return createBuffer(io,null,io.getTargetSize() * elementCount,usage.getIntFlags(),false);}  }
class C{  private static Collection copyCollection(Collection o){  try {    Collection copy=null;    copy=(Collection)o.getClass().newInstance();    copy.addAll(o);    return copy;  } catch (  Exception ex) {    Logger.getLogger(Setting.class.getName()).log(Level.SEVERE,null,ex);  }  return new ArrayList(o);}  }
class C{  private void markClosed(boolean connBroken){  if (!closed) {    closed=true;    delegate.hadoop().removeEventListener(delegate);    this.connBroken=connBroken;  }}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  protected void storeImageReplacedElement(Element e,ReplacedElement cc,String uri,final int cssWidth,final int cssHeight){  if (imageComponents == null) {    imageComponents=new HashMap();  }  CacheKey key=new CacheKey(e,uri,cssWidth,cssHeight);  imageComponents.put(key,cc);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  String namespaceURI="http://www.w3.org/DOMTest/level2";  DocumentType docType=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newDoc=domImpl.createDocument(namespaceURI,":",docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("domimplementationcreatedocument07",success);  }}  }
class C{  public ByteMemberValue(int index,ConstPool cp){  super('B',cp);  this.valueIndex=index;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String profile=getString(stack);  return (Permissions.hasPermission(Permissions.PERMISSION_SECURITY,stack.getUIMgr()) && Permissions.addSecurityProfile(profile)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static boolean installedPackageResourceExists(String packageName,String resourceName){  String fullResourcePath=getPackageHome().toString() + File.separator + packageName+ File.separator+ resourceName;  return new File(fullResourcePath).exists();}  }
class C{  public int truncateToNextPage(int addr){  return ((addr + PAGE_SIZE - 1) >> OFFSET_BITS) << OFFSET_BITS;}  }
class C{  private String createFormatStrings(){  final String[] formatStrs=overriddenParameters.getFormat().split(",");  final StringBuilder sb=new StringBuilder();  for (int i=0; i < formatStrs.length; i++) {    final String formatStr=formatStrs[i].trim();    if ("pretty".equalsIgnoreCase(formatStr)) {      sb.append("\"pretty\"");    } else {      sb.append(String.format("\"%s:%s/%s.%s\"",formatStr,config.getCucumberOutputDir().replace('\\','/'),fileCounter,formatStr));    }    if (i < formatStrs.length - 1) {      sb.append(", ");    }  }  return sb.toString();}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public void push(final V value) throws IndexOutOfBoundsException {  if (top + locals >= values.length) {    throw new IndexOutOfBoundsException("Insufficient maximum stack size.");  }  values[top++ + locals]=value;}  }
class C{  private static String typeToString(Type type){  if (type instanceof ParameterizedType) {    ParameterizedType pt=(ParameterizedType)type;    StringBuilder sb=new StringBuilder();    sb.append(typeToString(pt.getRawType()));    sb.append("<");    int elementNum=0;    Type[] types=pt.getActualTypeArguments();    for (    Type t : types) {      sb.append(typeToString(t));      if (++elementNum < types.length) {        sb.append(", ");      }    }    sb.append(">");    return sb.toString();  } else   if (type instanceof TypeVariable) {    return ((TypeVariable<?>)type).getName();  } else   if (type instanceof Class) {    return ((Class<?>)type).getCanonicalName();  } else   if (type instanceof GenericArrayType) {    String typeName=typeToString(((GenericArrayType)type).getGenericComponentType());    return typeName + "[]";  } else   if (type instanceof WildcardType) {    WildcardType wt=(WildcardType)type;    Type[] lowerBounds=wt.getLowerBounds();    if (lowerBounds.length == 0) {      String name="? extends " + concatWildcardTypes(wt.getUpperBounds());      if (name.equals("? extends java.lang.Object")) {        return "?";      } else {        return name;      }    } else {      String name=concatWildcardTypes(wt.getUpperBounds()) + " super " + concatWildcardTypes(wt.getLowerBounds());      name=name.replace("java.lang.Object","?");      return name;    }  } else {    throw new RuntimeException("Got an unknown java.lang.Type");  }}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e,State patchState){  State state=(null != patchState ? patchState : new State());  state.taskState=(null != state.taskState ? state.taskState : new TaskState());  state.taskState.stage=stage;  if (e != null) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public static void main(String args[]){  try {    Uu.p(new Object());  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void insert(INode n){  hash.insert(n);  int score=n.score();  BalancedBinaryNode<Integer,ArrayList<INode>> entry=tree.getEntry(score);  ArrayList<INode> list;  if (entry != null) {    list=entry.value();  } else {    list=new ArrayList<INode>();    tree.insert(score,list);  }  list.add(n);}  }
class C{  public static long convertMillisToTicks(long milliseconds){  double nearestTickTime=round(milliseconds,50);  return (long)((nearestTickTime / 1000) * 20);}  }
class C{  private Subscription validateSubsciptionForUnsubscribe(String subId) throws SubscriptionStateException, SubscriptionStillActiveException, ObjectNotFoundException {  Subscription subscription=manageBean.loadSubscription(subId,0);  stateValidator.checkUnsubscribingAllowed(subscription);  List<Session> activeSessions=prodSessionMgmt.getProductSessionsForSubscriptionTKey(subscription.getKey());  if (activeSessions.size() > 0) {    sessionCtx.setRollbackOnly();    SubscriptionStillActiveException ssa=new SubscriptionStillActiveException("There are still " + activeSessions.size() + " sessions active for the subscription with key '"+ subscription.getKey()+ "'",SubscriptionStillActiveException.Reason.ACTIVE_SESSIONS);    LOG.logWarn(Log4jLogger.SYSTEM_LOG,ssa,LogMessageIdentifier.WARN_SUBSCRIPTION_DELETION_FAILED);    throw ssa;  }  return subscription;}  }
class C{  public String dnsResolve(String host){  return dns.resolve(host);}  }
class C{  public void repair(){  if (has("deterioration")) {    put("deterioration",DEFAULT_DETERIORATION);  }}  }
class C{  public static boolean hasColumn(final CConnection connection,final String tableName,final String columnName){  Preconditions.checkNotNull(columnName,"IE02035: Column name argument can not be null");  Preconditions.checkNotNull(tableName,"IE02036: Table name argument can not be null");  Preconditions.checkNotNull(connection,"IE02037: Connection argument can not be null");  final String query=String.format("SELECT attname FROM pg_attribute WHERE attrelid = " + " (SELECT oid FROM pg_class WHERE relname = '%s') AND attname = '%s';",tableName,columnName);  try (ResultSet result=connection.executeQuery(query,true)){    return result.first();  } catch (  final SQLException e) {    return false;  }}  }
class C{  protected void contributeAuthorizationRequestParameters(final QueryString bodyParameters){}  }
class C{  void stop(){  this.running=false;  runningThread.interrupt();}  }
class C{  public void saveOrder(Order order){  orders.add(0,order);}  }
class C{  public void endComposition(){}  }
class C{  protected boolean isNormalizePoints(){  return this.normalizePoints;}  }
class C{  public void addDstore(int n){  if (n < 4)   addOpcode(71 + n); else   if (n < 0x100) {    addOpcode(DSTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(DSTORE);    addIndex(n);  }}  }
class C{  public void onSort(MenuItem item){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File dFile=getFile(stack);  FileDownloader downer=FileDownloader.getFileDownloader(dFile);  if (downer != null)   return new Long(downer.getLastDownloadTimestamp()); else   return new Long(0);}  }
class C{  protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){  AxisSpace space=new AxisSpace();  space=calculateRangeAxisSpace(g2,plotArea,space);  space=calculateDomainAxisSpace(g2,plotArea,space);  return space;}  }
class C{  public static int intersectionSize(DBIDs first,DBIDs second){  if (second instanceof SetDBIDs) {    if (!(first instanceof SetDBIDs)) {      return internalIntersectionSize(first,second);    }  } else {    if (first instanceof SetDBIDs) {      return internalIntersectionSize(second,first);    }  }  if (first.size() <= second.size()) {    return internalIntersectionSize(first,second);  } else {    return internalIntersectionSize(second,first);  }}  }
class C{  public String sqlAD_getCustomEntityPrefixes(String vendorName,String catalogName,String schemaName){  String tableName="AD_EntityType";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("EntityType");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("ENTITYTYPE");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("EntityType NOT IN ('C','D','U','A')");  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public boolean isLimitEnabled(){  return joint.isLimitEnabled();}  }
class C{  public static void dSquareList(IntList L){  while (L != null) {    L.head=L.head * L.head;    L=L.tail;  }}  }
class C{  public void removeLast(){  if (undoList.size() > 0) {    undoList.removeLast();  }}  }
class C{  private static Pair<Uri,Review> review(Context context,ContentResolver cr,long id,Set<CharSequence> lines,Bitmap icon){  Uri photo=null;  Review review=null;  String[] proj={Reviews.RESTAURANT_ID,Reviews.TYPE_ID,Reviews.COMMENTS,alias(ReviewsJoinAll.REVIEW_RATING),alias_(ReviewsJoinAll.RESTAURANT_NAME),alias_(ReviewsJoinAll.CONTACT_NAME)};  String sel=ReviewsJoinAll.REVIEW_STATUS_ID + " = ? AND " + ReviewsJoinAll.RESTAURANT_STATUS_ID+ " = ?";  String[] args=Elements.toStrings(ACTIVE.id,ACTIVE.id);  EasyCursor c=new EasyCursor(cr.query(ContentUris.withAppendedId(ReviewsJoinAll.CONTENT_URI,id),proj,sel,args,null));  if (c.moveToFirst()) {    review=Reviews.first(c,false);    String restaurant=c.getString(aliased_(ReviewsJoinAll.RESTAURANT_NAME));switch (review.type) {case PRIVATE:      String contact=c.getString(aliased_(ReviewsJoinAll.CONTACT_NAME));    if (contact == null) {      contact=context.getString(R.string.non_contact);    }  lines.add(context.getString(R.string.new_friend_review,contact,restaurant));break;case GOOGLE:lines.add(context.getString(R.string.new_public_review,restaurant));break;}photo=icon == null ? RestaurantPhotos.uriForRestaurant(review.restaurantId) : EMPTY;}c.close();return Pair.create(photo,review);}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public LinkedListNode addFirst(Object object){  LinkedListNode node=new LinkedListNode(object,head.next,head);  node.previous.next=node;  node.next.previous=node;  return node;}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  public static <A>List<A> make(int len,A init){  List<A> l=new List<A>();  for (int i=0; i < len; i++)   l=new List<A>(init,l);  return l;}  }
class C{  public boolean codeMatches(String queryCode){  if (codePosition != null && code != null) {    int startIndex=codePosition.startIndex;    int length=code.indexOf('-');    if (length == -1) {      length=code.length();    }    if (Debug.debugging("symbology.detail")) {      Debug.output("Checking " + queryCode + " against |"+ code+ "| starting at "+ startIndex+ " for "+ length);    }    return queryCode.regionMatches(true,startIndex,code,0,length);  }  return true;}  }
class C{  public void addEntry(K key,V value,Map<K,MutableDouble> map){  if (!doprocessKey(key) || (value == null)) {    return;  }  MutableDouble val=map.get(key);  if (val == null) {    if (countkey) {      val=new MutableDouble(1.00);    } else {      val=new MutableDouble(value.doubleValue());    }  } else {    if (countkey) {      val.increment();    } else {      val.add(value.doubleValue());    }  }  map.put(cloneKey(key),val);}  }
class C{  public String putImagePNG(String theFolder,String theImageName,Bitmap theBitmap){  this.DEFAULT_APP_IMAGEDATA_DIRECTORY=theFolder;  String mFullPath=setupFolderPath(theImageName);  saveBitmapPNG(mFullPath,theBitmap);  lastImagePath=mFullPath;  return mFullPath;}  }
class C{  public void testGeolocSharingLogQuery() throws RemoteException {  Cursor cursor=null;  try {    String where=GeolocSharingLog.SHARING_ID.concat("=?");    String[] whereArgs=new String[]{"123456789"};    cursor=mProvider.query(GeolocSharingLog.CONTENT_URI,GEOLOC_SHARING_LOG_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  private void assignUnassigned(Relation<V> relation,WritableDataStore<double[]> probClusterIGivenX,List<MultivariateGaussianModel> models,ModifiableDBIDs unassigned){  if (unassigned.size() == 0) {    return;  }  final int k=models.size();  double pweight=1. / relation.size();  for (  EMClusterModel<?> m : models) {    m.setWeight(m.getWeight() * (relation.size() - unassigned.size()) * pweight);  }  for (DBIDIter iter=unassigned.iter(); iter.valid(); iter.advance()) {    V v=relation.get(iter);    int bestCluster=-1;    MultivariateGaussianModel bestModel=null;    double minDistance=Double.POSITIVE_INFINITY;    int c=0;    for (    MultivariateGaussianModel model : models) {      final double distance=model.mahalanobisDistance(v);      if (distance < minDistance) {        minDistance=distance;        bestCluster=c;        bestModel=model;      }      c++;    }    double[] weights=new double[k];    weights[bestCluster]=1.;    bestModel.setWeight(bestModel.getWeight() + pweight);    probClusterIGivenX.put(iter,weights);  }  unassigned.clear();}  }
class C{  public static ServiceCatalog build(final File xmlFile){  String fileName=xmlFile.getName().trim().toLowerCase();  if (fileName.endsWith(Constants.XML_FILE_SUFFIX)) {    fileName=fileName.substring(0,fileName.length() - Constants.XML_FILE_SUFFIX.length() - 1);  } else {    throw new IllegalArgumentException("API file is not xml format: " + fileName);  }  int separatorIndex=fileName.indexOf(Constants.NAME_STRING_SEPARATOR);  if (separatorIndex == -1) {    throw new IllegalArgumentException("API file name should split with " + Constants.NAME_STRING_SEPARATOR + " actually: "+ fileName);  }  String serviceName=fileName.substring(0,separatorIndex);  String version=fileName.substring(separatorIndex + 1,fileName.length());  Document document;  try {    document=new SAXBuilder().build(xmlFile);  } catch (  Exception ex) {    throw new IllegalArgumentException("Invalid XML file:\n " + xmlFile.getAbsolutePath(),ex);  }  if (document == null) {    return null;  }  List<Element> resourceList=document.getRootElement().getChild(Constants.REST_NODE).getChild(Constants.RESOURCES_NODE).getChildren();  List<Element> elementList=document.getRootElement().getChild(Constants.DATA_NODE).getChild(Constants.DATA_SCHEMA_NODE).getChild(Constants.ELEMENTS_NODE).getChildren();  return new ServiceCatalog(parseResource(resourceList),parseElement(elementList),serviceName,version);}  }
class C{  public void checkModificationsAndCloseAll(Runnable runIfOk){  checkModificationsAndCloseAll(runIfOk,null);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.595 -0500",hash_original_method="4EA2FDECEBB843A0FFF4778186BBC741",hash_generated_method="954604A616CA94114D25DB22D29E9C2A") public ProtocolException(String message){  super(message);}  }
class C{  public static float svgLengthToObjectBoundingBox(String s,String attr,short d,Context ctx){  float v=svgToObjectBoundingBox(s,attr,d,ctx);  if (v < 0) {    throw new BridgeException(getBridgeContext(ctx),ctx.getElement(),ErrorConstants.ERR_LENGTH_NEGATIVE,new Object[]{attr,s});  }  return v;}  }
class C{  public void dispatch(){  try {    unisolatedServices.getDispatchService().dispatch();  } catch (  RuntimeException ex) {    throw new EPException(ex);  }}  }
class C{  @Deprecated public void createNoteAsync(final Note note,final LinkedNotebook linkedNotebook,final OnClientCallback<Note> callback){  AsyncReflector.execute(this,callback,"createNote",note,linkedNotebook);}  }
class C{  public NineSwitchesGameSwitch(NineSwitchesGameBoard board){  this.board=board;  put("class","switch");  put("name","arrow_switch");  super.setMenu("Toggle|Use");}  }
class C{  public void increment(int count){  assert count >= 0;  mCount+=count;}  }
class C{  public void addArgument(int bytes,int data){switch (bytes) {case 0:    return;case 1:  arguments.add(new byte[]{(byte)data});break;case 2:arguments.add(new byte[]{(byte)data,(byte)(data >> 8)});break;case 3:arguments.add(new byte[]{(byte)data,(byte)(data >> 8),(byte)(data >> 16)});break;case 4:arguments.add(new byte[]{(byte)data,(byte)(data >> 8),(byte)(data >> 16),(byte)(data >>> 24)});break;}}  }
class C{  private boolean[] defineIrrelevant(Random random){  boolean[] irr=new boolean[getNumAttributes()];  for (int i=0; i < irr.length; i++) {    irr[i]=false;  }  int numIrr=0;  for (int i=0; (numIrr < getNumIrrelevant()) && (i < getNumAttributes() * 5); i++) {    int maybeNext=(int)(random.nextDouble() * irr.length);    if (irr[maybeNext] == false) {      irr[maybeNext]=true;      numIrr++;    }  }  return irr;}  }
class C{  public static String toClassName(String commonName,Category category){  if (StringUtils.isEmpty(commonName)) {    return "";  }  String suffix;switch (category) {case BEHAVIOR:case COMPONENT:case CONTROLLER:case FIXTURE:case HELPER:case SHELL:case TABLE:case TASK:case TEST_CASE:case VIEW:case VIEW_CELL:    suffix=category.getSuffix();  break;default :return commonName;}return commonName.concat(suffix);}  }
class C{  public static void uiImpl(){  UIManager.put("Button.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("Button.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("Button.dashedRectGapX",3);  UIManager.put("Button.dashedRectGapY",3);  UIManager.put("Button.dashedRectGapWidth",6);  UIManager.put("Button.dashedRectGapHeight",6);  UIManager.put("ButtonUI",org.jb2011.lnf.beautyeye.ch3_button.BEButtonUI.class.getName());  UIManager.put("Button.margin",new InsetsUIResource(6,8,6,8));  UIManager.put("Button.border",new org.jb2011.lnf.beautyeye.ch3_button.BEButtonUI.XPEmptyBorder(new Insets(3,3,3,3)));  UIManager.put("Button.focus",new ColorUIResource(130,130,130));  UIManager.put("ToggleButton.margin",new Insets(3,11,3,11));  UIManager.put("ToggleButton.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ToggleButton.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ToggleButton.focus",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ToggleButtonUI",org.jb2011.lnf.beautyeye.ch3_button.BEToggleButtonUI.class.getName());  Border toggleButtonBorder=new BorderUIResource(new MarginBorder());  UIManager.put("ToggleButton.border",toggleButtonBorder);  UIManager.put("ToggleButton.focusLine",new ColorUIResource(BeautyEyeLNFHelper.commonFocusedBorderColor.darker()));  UIManager.put("ToggleButton.focusLineHilight",new ColorUIResource(new Color(240,240,240)));}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public WhitenedZCA(DataSet dataSet){  super(dataSet);}  }
class C{  private void sendNotification(String message){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_stat_ic_notification).setContentTitle("GCM Message").setContentText(message).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public String toString(Instances t,int maxColWidth){  int i;  int cindex=t.classIndex();  StringBuffer text=new StringBuffer();  for (i=0; i < attributes.length; i++) {    if (i != cindex) {      if (missing[i]) {        text.append("?");        for (int j=0; j < maxColWidth; j++) {          text.append(" ");        }      } else {        String ss=t.attribute(i).value((int)attributes[i]);        StringBuffer sb=new StringBuffer(ss);        for (int j=0; j < (maxColWidth - ss.length() + 1); j++) {          sb.append(" ");        }        text.append(sb);      }    }  }  return text.toString();}  }
class C{  public BlueMarbleLandsatLayer(String serviceAddress){  if (serviceAddress == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"BlueMarbleLandsatLayer","constructor","missingServiceAddress"));  }  WmsLayerConfig blueMarbleConfig=new WmsLayerConfig();  blueMarbleConfig.serviceAddress=serviceAddress;  blueMarbleConfig.wmsVersion="1.3.0";  blueMarbleConfig.layerNames="BlueMarble-200405";  blueMarbleConfig.coordinateSystem="EPSG:4326";  blueMarbleConfig.transparent=false;  this.blueMarbleUrlFactory=new WmsGetMapUrlFactory(blueMarbleConfig);  WmsLayerConfig landsatConfig=new WmsLayerConfig();  landsatConfig.serviceAddress=serviceAddress;  landsatConfig.wmsVersion="1.3.0";  landsatConfig.layerNames="BlueMarble-200405,esat";  landsatConfig.coordinateSystem="EPSG:4326";  landsatConfig.transparent=false;  this.landsatUrlFactory=new WmsGetMapUrlFactory(landsatConfig);  double metersPerPixel=15;  double radiansPerPixel=metersPerPixel / WorldWind.WGS84_SEMI_MAJOR_AXIS;  LevelSetConfig levelsConfig=new LevelSetConfig();  levelsConfig.numLevels=levelsConfig.numLevelsForResolution(radiansPerPixel);  this.setDisplayName("Blue Marble & Landsat");  this.setLevelSet(new LevelSet(levelsConfig));  this.setTileUrlFactory(this);  this.setImageFormat("image/png");  this.setImageOptions(new ImageOptions(WorldWind.RGB_565));}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.300 -0500",hash_original_method="7E6122EDAE408D205AF0C9E45A024F04",hash_generated_method="73FD79D12E0BC58DBF740D0607743065") public javax.sip.header.Header createHeader(String headerText) throws ParseException {  StringMsgParser smp=new StringMsgParser();  SIPHeader sipHeader=smp.parseSIPHeader(headerText.trim());  if (sipHeader instanceof SIPHeaderList) {    if (((SIPHeaderList)sipHeader).size() > 1) {      throw new ParseException("Only singleton allowed " + headerText,0);    } else     if (((SIPHeaderList)sipHeader).size() == 0) {      try {        return (Header)((SIPHeaderList)sipHeader).getMyClass().newInstance();      } catch (      InstantiationException ex) {        ex.printStackTrace();        return null;      }catch (      IllegalAccessException ex) {        ex.printStackTrace();        return null;      }    } else {      return (Header)((SIPHeaderList)sipHeader).getFirst();    }  } else {    return (Header)sipHeader;  }}  }
class C{  public void add(CmdLineOption option){  this.map.put(option.getName(),option);  this.list.add(option);  if (option.getAltName() != null) {    this.map.put(option.getAltName(),option);  }}  }
class C{  public Task resumeSystem(String deploymentId) throws IOException {  String path=String.format("%s/%s/resume_system",getBasePath(),deploymentId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public DataSet(ArrayList<Entry> yVals,int type){  this.mType=type;  this.mYVals=yVals;  if (yVals == null || yVals.size() <= 0)   return;  calcMinMax();  calcYValueSum();}  }
class C{  public static int EBADMSG(){  return Errno.EBADMSG.intValue();}  }
class C{  public boolean scrollToCaret(){  int line=getCaretLine();  int lineStart=getLineStartOffset(line);  int offset=Math.max(0,Math.min(getLineLength(line) - 1,getCaretPosition() - lineStart));  return scrollTo(line,offset);}  }
class C{  public static void applyFiltersToScript(Collection<ScriptFilter> filters,Script script){  ExternalScriptDao externalScriptDao=new ExternalScriptDao();  List<ScriptFilter> internalFilters=new ArrayList<ScriptFilter>();  List<ScriptFilter> externalFilters=new ArrayList<ScriptFilter>();  for (  ScriptFilter tempFilter : filters) {    if (tempFilter.getFilterType() == ScriptFilterType.EXTERNAL) {      externalFilters.add(tempFilter);    } else {      internalFilters.add(tempFilter);    }  }  for (  ScriptFilter filter : internalFilters) {    applyFilter(filter,script.getScriptSteps());  }  if (!externalFilters.isEmpty()) {    LoggingOutputLogger outputLogger=new LoggingOutputLogger();    ScriptTO scriptTo=ScriptServiceUtil.scriptToTransferObject(script);    ScriptRunner runner=new ScriptRunner();    Map<String,Object> map=new HashMap<String,Object>();    map.put("script",scriptTo);    for (    ScriptFilter filter : externalFilters) {      ExternalScript externalScript=externalScriptDao.findById(filter.getExternalScriptId());      logger.info("Running external Script: " + externalScript);      if (script != null) {        try {          runner.runScript(externalScript.getName(),externalScript.getScript(),externalScript.getEngine(),map,outputLogger);        } catch (        ScriptException e) {          logger.error("Error Running Script: " + e);          throw new RuntimeException(e);        }      }    }    script.getScriptSteps().clear();    for (    ScriptStepTO stepTo : scriptTo.getSteps()) {      script.getScriptSteps().add(ScriptServiceUtil.transferObjectToScriptStep(stepTo));    }  }}  }
class C{  public RotationMatrixBuilder(int dimension){  super();  this.dimension=dimension;  planes=new ArrayList<Plane>();}  }
class C{  public static void writeNode(Node n,Writer w) throws IOException {switch (n.getNodeType()) {case Node.ELEMENT_NODE:    w.write("<");  w.write(n.getNodeName());if (n.hasAttributes()) {  NamedNodeMap attr=n.getAttributes();  int len=attr.getLength();  for (int i=0; i < len; i++) {    Attr a=(Attr)attr.item(i);    w.write(" ");    w.write(a.getNodeName());    w.write("=\"");    w.write(contentToString(a.getNodeValue()));    w.write("\"");  }}Node c=n.getFirstChild();if (c != null) {w.write(">");for (; c != null; c=c.getNextSibling()) {writeNode(c,w);}w.write("</");w.write(n.getNodeName());w.write(">");} else {w.write("/>");}break;case Node.TEXT_NODE:w.write(contentToString(n.getNodeValue()));break;case Node.CDATA_SECTION_NODE:w.write("<![CDATA[");w.write(n.getNodeValue());w.write("]]>");break;case Node.ENTITY_REFERENCE_NODE:w.write("&");w.write(n.getNodeName());w.write(";");break;case Node.PROCESSING_INSTRUCTION_NODE:w.write("<?");w.write(n.getNodeName());w.write(" ");w.write(n.getNodeValue());w.write("?>");break;case Node.COMMENT_NODE:w.write("<!--");w.write(n.getNodeValue());w.write("-->");break;case Node.DOCUMENT_TYPE_NODE:{DocumentType dt=(DocumentType)n;w.write("<!DOCTYPE ");w.write(n.getOwnerDocument().getDocumentElement().getNodeName());String pubID=dt.getPublicId();if (pubID != null) {w.write(" PUBLIC \"" + dt.getNodeName() + "\" \""+ pubID+ "\">");} else {String sysID=dt.getSystemId();if (sysID != null) w.write(" SYSTEM \"" + sysID + "\">");}break;}default :throw new IOException("Unknown DOM node type " + n.getNodeType());}}  }
class C{  protected void sequence_NoSubstitutionTemplate(ISerializationContext context,TemplateSegment semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getNoSubstitutionTemplateAccess().getRawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0(),semanticObject.getRawValue());  feeder.finish();}  }
class C{  private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  @Override public String toString(){  return "{" + "invocation=" + invocation + "}";}  }
class C{  public static IPackageFragmentRoot addLibrary(IJavaProject jproject,IPath path,IPath sourceAttachPath,IPath sourceAttachRoot) throws JavaModelException {  IClasspathEntry cpe=JavaCore.newLibraryEntry(path,sourceAttachPath,sourceAttachRoot);  addToClasspath(jproject,cpe);  return jproject.getPackageFragmentRoot(path.toString());}  }
class C{  public static boolean equals(char[] a,char[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  @Override public void onItemDataResponse(final ItemDataResponse itemDataResponse){  Log.v(TAG,"onItemDataResponse recieved");  Log.v(TAG,"ItemDataRequestStatus" + itemDataResponse.getItemDataRequestStatus());  Log.v(TAG,"ItemDataRequestId" + itemDataResponse.getRequestId());  new ItemDataAsyncTask().execute(itemDataResponse);}  }
class C{  public BaleenJob(String name,String yaml,File source,CollectionProcessingEngine engine){  super(name,yaml,source,engine);}  }
class C{  @DSComment("Data structure/no action") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.000 -0500",hash_original_method="C1D751586747941BBE1AE366FE4E3AB5",hash_generated_method="E9500D5A561ED92F5CC7985376ABE226") public boolean isFullScreen(){  return getBooleanProperty(PROPERTY_FULL_SCREEN);}  }
class C{  public static boolean deleteDir(File dir){  if (dir.isDirectory()) {    String[] children=dir.list();    for (int i=0; i < children.length; i++) {      deleteDir(new File(dir,children[i]));    }  }  return dir.delete();}  }
class C{  public static int blendColors(int color1,int color2,float ratio){  float proportion=ratio;  proportion=Math.min(1.0f,proportion);  proportion=Math.max(0.0f,proportion);  int[] color1Comps={Color.alpha(color1),Color.red(color1),Color.green(color1),Color.blue(color1)};  int[] color2Comps={Color.alpha(color2),Color.red(color2),Color.green(color2),Color.blue(color2)};  int[] newColorComps={0,0,0,0};  for (int i=0; i < 4; i++) {    newColorComps[i]=Math.round(color1Comps[i] + ((color2Comps[i] - color1Comps[i]) * proportion));  }  return Color.argb(newColorComps[0],newColorComps[1],newColorComps[2],newColorComps[3]);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  delayForNfs();  final String fileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,phobiusOutputFileNameTemplate);  InputStream is=null;  PhobiusFeature represantiveRawMatch=null;  int count=0;  try {    is=new FileInputStream(fileName);    Set<PhobiusProtein> phobiusProteins=parser.parse(is,fileName);    for (    PhobiusProtein phobiusProtein : phobiusProteins) {      if (phobiusProtein.getFeatures().size() > 0) {        count+=phobiusProtein.getFeatures().size();        if (represantiveRawMatch == null) {          PhobiusFeature feature=phobiusProtein.getFeatures().iterator().next();          represantiveRawMatch=feature;        }      }    }    phobiusMatchDAO.persist(phobiusProteins);    Long now=System.currentTimeMillis();    if (count > 0) {      int matchesFound=0;      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        Utilities.sleep(waitTimeFactor * 1000);      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse Phobius file " + fileName,e);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {        LOGGER.error("Unable to close connection to the Phobius output file located at " + fileName,e);        throw new IllegalStateException("IOException thrown when attempting to close the InputStream from the Phobius output file.",e);      }    }  }}  }
class C{  private List<AuditRecord> auditDelete(DatabaseDataSet databaseDataSet,OperationGroup deleteGroup) throws IllegalPersistStateException {  List<AuditRecord> records=new LinkedList<>();  for (  Entity entity : deleteGroup.getEntities()) {    AuditRecord auditRecord=null;    for (    Node node : entity.getChildren()) {      if (node instanceof ValueNode) {        if (((ValueNode)node).getValue() != null) {          if (auditRecord == null) {            auditRecord=new AuditRecord(entity.getEntityType(),entity.getKey().getValue());          }          auditRecord.addChange(node,((ValueNode)node).getValue(),null);        }      } else       if (node instanceof RefNode) {        if (((RefNode)node).getEntityKey() != null) {          if (auditRecord == null) {            auditRecord=new AuditRecord(entity.getEntityType(),entity.getKey().getValue());          }          auditRecord.addChange(node,((RefNode)node).getEntityKey(),null);        }      }    }    if (auditRecord != null) {      LOG.debug("Changes found for " + entity);      records.add(auditRecord);    }  }  return records;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isSetDomainId(){  return EncodingUtils.testBit(__isset_bitfield,__DOMAINID_ISSET_ID);}  }
class C{  protected void addAttributes(FieldInfo fi){}  }
class C{  public static String[] toStringArray(Collection<String> collection){  if (collection == null) {    return null;  }  return collection.toArray(new String[collection.size()]);}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  public Task(Task other){  issetBitfield=other.issetBitfield;  this.taskId=other.taskId;  if (other.isSetTaskName()) {    this.taskName=other.taskName;  }  if (other.isSetClassName()) {    this.className=other.className;  }  if (other.isSetMethod()) {    this.method=other.method;  }  if (other.isSetModuleCode()) {    this.moduleCode=other.moduleCode;  }  this.priority=other.priority;  if (other.isSetIsConcurrent()) {    this.isConcurrent=other.isConcurrent;  }  if (other.isSetTaskState()) {    this.taskState=other.taskState;  }  this.lastExecuteTime=other.lastExecuteTime;  this.nextExcuteDate=other.nextExcuteDate;  this.operatorId=other.operatorId;  this.createTime=other.createTime;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public InReplyToParser(String inReplyTo){  super(inReplyTo);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.436 -0400",hash_original_method="9372A1D570FF0E071E2A73F0471280C8",hash_generated_method="73E7D5E07B73B540EF5D01C579CF6548") public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  public void testMac02() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac mac;  for (int i=0; i < validValues.length; i++) {    mac=Mac.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",mac.getAlgorithm(),validValues[i]);  }}  }
class C{  public sup addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void rotateLeft(int startIndex,int endIndex){  boolean wrapBit=get(startIndex);  for (int x=startIndex; x < endIndex; x++) {    if (get(x + 1)) {      set(x);    } else {      clear(x);    }  }  if (wrapBit) {    set(endIndex);  } else {    clear(endIndex);  }}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  private Source generateAdditionalSource(CompilationUnit unit,FXGSymbolClass asset) throws IOException {  Source originalSource=unit.getSource();  String packageName=asset.getPackageName();  String className=asset.getClassName();  String generatedName=getGeneratedFileName(packageName,className,".as");  if (generatedOutputDir != null) {    new File(generatedName).getParentFile().mkdirs();    FileUtil.writeFile(generatedName,asset.getGeneratedSource());  }  TextFile generatedFile=new TextFile(asset.getGeneratedSource(),generatedName,originalSource.getParent(),MimeMappings.AS,originalSource.getLastModified());  AssetInfo assetInfo=new AssetInfo(asset.getSymbol(),generatedFile,originalSource.getLastModified(),null);  unit.getAssets().add(asset.getQualifiedClassName(),assetInfo);  String relativePath="";  if (packageName != null) {    relativePath=packageName.replace('.','/');  }  Source generatedSource=new Source(generatedFile,relativePath,className,null,false,false,false);  generatedSource.setAssetInfo(assetInfo);  generatedSource.setPathResolver(unit.getSource().getPathResolver());  return generatedSource;}  }
class C{  public Document exportConfiguration(String tenantName,boolean exportPrivateData) throws Exception {  this.tenantName=tenantName;  DocumentBuilder docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();  doc=docBuilder.newDocument();  Element root=createEntitiesDescriptor();  doc.appendChild(root);  Element entEle=createIDPEntityDescriptor(exportPrivateData);  root.appendChild(entEle);  if (exportPrivateData) {    Collection<RelyingParty> rpList=idmClient.getRelyingParties(tenantName);    Iterator<RelyingParty> it=rpList.iterator();    while (it.hasNext()) {      RelyingParty rp=it.next();      Element spEntEle=createSPEntityDescriptor(rp);      root.appendChild(spEntEle);    }  }  return doc;}  }
class C{  public static int ELIBEXEC(){  return 83;}  }
class C{  public void connect(SocketAddress endpoint) throws IOException {  connect(endpoint,0);}  }
class C{  public String build(){  StringBuffer result=new StringBuffer(template.length());  Set<String> found=new HashSet<>();  Matcher matcher=SEARCH_PATTERN.matcher(template);  while (matcher.find()) {    String wholeMatch=matcher.group(0);    String leftQuote=matcher.group(1);    String key=matcher.group(2);    String rightQuote=matcher.group(3);    String value=substitutions.get(key);    checkArgumentNotNull(value,"%%s% found in template but no substitution specified",key);    checkArgument(leftQuote.equals(rightQuote),"Quote mismatch: %s",wholeMatch);    matcher.appendReplacement(result,String.format("%s%s%s",leftQuote,value,rightQuote));    found.add(key);  }  matcher.appendTail(result);  Set<String> remaining=difference(substitutions.keySet(),found);  checkArgument(remaining.isEmpty(),"Not found in template: %s",Joiner.on(", ").join(remaining));  return result.toString();}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public PTBTokenizer(Reader r){  this(r,false);}  }
class C{  public boolean containsKey(long key){  int hash=hash(key);  int i=indexFor(hash,table.length);  LongEntry<VALUE> e=table[i];  while (e != null) {    if (e.hash == hash && key == e.key)     return true;    e=e.next;  }  return false;}  }
class C{  public String format(Locale locale,double number,String mask) throws InvalidMaskException {  byte justification=RIGHT;  boolean useBrackets=false;  boolean usePlus=false;  boolean useMinus=false;  boolean useDollar=false;  boolean useComma=false;  boolean foundDecimal=false;  boolean symbolsFirst=false;  boolean foundZero=false;  int maskLen=mask.length();  if (maskLen == 0)   throw new InvalidMaskException("mask can't be a empty value");  StringBuffer maskBuffer=new StringBuffer(mask);  String mod=StringUtil.replace(mask,",","",true);  if (StringUtil.startsWith(mod,'_'))   symbolsFirst=true;  if (mask.startsWith(",.")) {    maskBuffer.replace(0,1,",0");  }  boolean addZero=false;  for (int i=0; i < maskBuffer.length(); ) {    boolean removeChar=false;switch (maskBuffer.charAt(i)) {case '_':case '9':      if (foundDecimal || foundZero)       maskBuffer.setCharAt(i,'0'); else       maskBuffer.setCharAt(i,'#');    break;case '.':  if (i > 0 && maskBuffer.charAt(i - 1) == '#')   maskBuffer.setCharAt(i - 1,'0');if (foundDecimal) removeChar=true; else foundDecimal=true;if (i == 0) addZero=true;break;case '(':case ')':useBrackets=true;removeChar=true;break;case '+':usePlus=true;removeChar=true;break;case '-':useMinus=true;removeChar=true;break;case ',':useComma=true;if (true) {removeChar=true;maskLen++;}break;case 'L':justification=LEFT;removeChar=true;break;case 'C':justification=CENTER;removeChar=true;break;case '$':useDollar=true;removeChar=true;break;case '^':removeChar=true;break;case '0':if (!foundDecimal) {for (int y=0; y < i; y++) {if (maskBuffer.charAt(y) == '#') maskBuffer.setCharAt(y,'0');}}foundZero=true;break;default :throw new InvalidMaskException("invalid charcter [" + maskBuffer.charAt(i) + "], valid characters are ['_', '9', '.', '0', '(', ')', '+', '-', ',', 'L', 'C', '$', '^']");}if (removeChar) {maskBuffer.deleteCharAt(i);maskLen--;} else {i++;}}if (addZero) maskBuffer.insert(0,'0');mask=new String(maskBuffer);maskLen=mask.length();DecimalFormat df=getDecimalFormat(locale);int gs=df.getGroupingSize();df.applyPattern(mask);df.setGroupingSize(gs);df.setGroupingUsed(useComma);df.setRoundingMode(RoundingMode.HALF_UP);String formattedNum=df.format(StrictMath.abs(number));StringBuffer formattedNumBuffer=new StringBuffer(formattedNum);if (symbolsFirst) {int widthBefore=formattedNumBuffer.length();applySymbolics(formattedNumBuffer,number,usePlus,useMinus,useDollar,useBrackets);int offset=formattedNumBuffer.length() - widthBefore;if (formattedNumBuffer.length() < maskLen + offset) {int padding=(maskLen + offset) - formattedNumBuffer.length();applyJustification(formattedNumBuffer,justification,padding);}} else {int widthBefore=formattedNumBuffer.length();StringBuffer temp=new StringBuffer(formattedNumBuffer.toString());applySymbolics(temp,number,usePlus,useMinus,useDollar,useBrackets);int offset=temp.length() - widthBefore;if (temp.length() < maskLen + offset) {int padding=(maskLen + offset) - temp.length();applyJustification(formattedNumBuffer,justification,padding);}applySymbolics(formattedNumBuffer,number,usePlus,useMinus,useDollar,useBrackets);}return formattedNumBuffer.toString();}  }
class C{  public static String reverseString(String str){  StringBuilder sb=new StringBuilder(str);  sb.reverse();  return sb.toString();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public Matrix4d assumeNothing(){  properties=0;  return this;}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  public void writeAttribute(String localName,String value) throws XMLStreamException {  if (_currentEle.getState() != ELEMENT_STARTTAG_OPEN) {    throw new XMLStreamException("Attribute not associated with any element");  }  _writer.write(SPACE);  _writer.write(localName);  _writer.write("=\"");  writeXMLContent(value,true,true);  _writer.write(DOUBLEQUOT);}  }
class C{  public boolean isPortOverCeiling(StoragePort sp,StorageSystem system,boolean updatePortUsages){  boolean overCeiling=false;  boolean metricsValid=metricsValid(Collections.singletonList(sp));  if (updatePortUsages) {    updateStaticPortUsage(Collections.singletonList(sp));  }  StringMap metrics=sp.getMetrics();  Long initiatorCount=MetricsKeys.getLong(MetricsKeys.initiatorCount,metrics);  Integer ceiling=getInitiatorCeiling(StorageSystem.Type.valueOf(system.getSystemType()));  if (initiatorCount >= ceiling) {    _log.info(String.format("Port %s disqualified because initiator count %d over or equal-to ceiling %d",portName(sp),initiatorCount,ceiling));    overCeiling=true;  }  Long volumeCount=MetricsKeys.getLong(MetricsKeys.volumeCount,metrics);  ceiling=getVolumeCeiling(StorageSystem.Type.valueOf(system.getSystemType()));  if (volumeCount >= ceiling) {    _log.info(String.format("Port %s disqualified because volume count %d over or equal-to ceiling %d",portName(sp),volumeCount,ceiling));    overCeiling=true;  }  if (metricsValid) {    Double portPercentBusy=MetricsKeys.getDouble(MetricsKeys.avgPortPercentBusy,metrics);    if (portPercentBusy == null) {      portPercentBusy=0.0;    }    portPercentBusy*=10.0;    ceiling=10 * getPortBusyCeiling(StorageSystem.Type.valueOf(system.getSystemType()));    if (portPercentBusy.intValue() >= ceiling) {      _log.info(String.format("Port %s disqualified because port busy %d over or equal-to ceiling %d",portName(sp),portPercentBusy.intValue(),ceiling));      overCeiling=true;    }    Double cpuPercentBusy=MetricsKeys.getDouble(MetricsKeys.avgCpuPercentBusy,metrics);    if (cpuPercentBusy == null) {      cpuPercentBusy=0.0;    }    cpuPercentBusy*=10.0;    ceiling=10 * getCpuBusyCeiling(StorageSystem.Type.valueOf(system.getSystemType()));    if (cpuPercentBusy.intValue() >= ceiling) {      _log.info(String.format("Port %s disqualified because cpu busy %d over or equal-to ceiling %d",portName(sp),cpuPercentBusy.intValue(),ceiling));      overCeiling=true;    }  } else {    metrics.put(MetricsKeys.avgPortPercentBusy.name(),"");    metrics.put(MetricsKeys.avgCpuPercentBusy.name(),"");  }  MetricsKeys.putBoolean(MetricsKeys.allocationDisqualified,overCeiling,sp.getMetrics());  _dbClient.persistObject(sp);  return overCeiling;}  }
class C{  private static int leadingSpaces(String name){  int i=0;  while ((i < name.length()) && (name.charAt(i) == ' ')) {    ++i;  }  return i;}  }
class C{  @Override public List<Application> findAll() throws ServiceException {  try {    logger.debug("start findAll");    List<Application> listApplications=applicationDAO.findAll();    for (    Application application : listApplications) {      application.setServer(serverService.findByApp(application));      application.setModules(moduleService.findByAppAndUser(application.getUser(),application.getName()));    }    logger.debug("ApplicationService : All Applications found ");    return listApplications;  } catch (  PersistenceException e) {    logger.error("Error ApplicationService : error findAll Method : " + e);    throw new ServiceException(e.getLocalizedMessage(),e);  }}  }
class C{  public static void saveToStack(final ItemStack stack,final Data data){  if (!stack.hasTagCompound()) {    stack.setTagCompound(new NBTTagCompound());  }  data.writeToNBT(stack.getTagCompound());}  }
class C{  @Override public boolean accept(File pathname){  return pathname.isDirectory();}  }
class C{  @Override public ResultCollector executeFunction(final DistributedRegionFunctionExecutor execution,final Function function,final Object args,final ResultCollector rc,final Set filter,final ServerToClientFunctionResultSender sender){  DistributedMember target=getTransactionalNode();  if (target != null) {    if (target.equals(getMyId())) {      return executeLocally(execution,function,args,0,rc,filter,sender);    }    return executeOnReplicate(execution,function,args,rc,filter,target);  } else   if (this.getAttributes().getDataPolicy().withReplication() || this.getAttributes().getDataPolicy().withPreloaded()) {    final Set<InternalDistributedMember> singleMember=Collections.singleton(getMyId());    execution.validateExecution(function,singleMember);    execution.setExecutionNodes(singleMember);    return executeLocally(execution,function,args,0,rc,filter,sender);  } else {    target=getRandomReplicate();    if (target == null) {      throw new FunctionException(LocalizedStrings.DistributedRegion_NO_REPLICATED_REGION_FOUND_FOR_EXECUTING_FUNCTION_0.toLocalizedString(function.getId()));    }  }  final LocalResultCollector<?,?> localRC=execution.getLocalResultCollector(function,rc);  return executeOnReplicate(execution,function,args,localRC,filter,target);}  }
class C{  private void updateOldDBToDates(){  final Pattern regexPattern=Pattern.compile("&([a-f]|[0-9]){1}");  final SimpleDateFormat oldFormat=new SimpleDateFormat("dd/MM/yyyy");  Connection conn=getSQLConnection();  try (Statement st=conn.createStatement();PreparedStatement prep=conn.prepareStatement("INSERT INTO tempTable VALUES (?,?,?,?);")){    ResultSet rs=st.executeQuery("SELECT * FROM " + tablePrefix + "achievements");    ArrayList<String> uuids=new ArrayList<>();    ArrayList<String> achs=new ArrayList<>();    ArrayList<String> descs=new ArrayList<>();    ArrayList<String> oldDates=new ArrayList<>();    while (rs.next()) {      uuids.add(rs.getString(1));      achs.add(rs.getString(2));      descs.add(rs.getString(3));      oldDates.add(rs.getString(4));    }    ArrayList<java.sql.Date> newDates=new ArrayList<>(oldDates.size());    try {      for (      String date : oldDates) {        newDates.add((new java.sql.Date(oldFormat.parse(date.replaceAll(regexPattern.pattern(),"")).getTime())));      }    } catch (    ParseException e) {      plugin.getLogger().log(Level.SEVERE,"Error while parsing dates: ",e);    }    conn.setAutoCommit(false);    st.execute("CREATE TABLE tempTable (playername char(36),achievement varchar(64),description varchar(128),date DATE,PRIMARY KEY (playername, achievement))");    for (int i=0; i < uuids.size(); ++i) {      prep.setString(1,uuids.get(i));      prep.setString(2,achs.get(i));      prep.setString(3,descs.get(i));      prep.setDate(4,newDates.get(i));      prep.addBatch();    }    prep.executeBatch();    st.execute("DROP TABLE " + tablePrefix + "achievements");    st.execute("ALTER TABLE tempTable RENAME TO " + tablePrefix + "achievements");    conn.commit();    conn.setAutoCommit(true);  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while updating old DB (strings to dates): ",e);  }}  }
class C{  private List<WorkFlowMatrix> createActualWorkFlowMatrixDetails(final List<WorkFlowMatrix> ActualwfMatrixObjList,final List<WorkFlowMatrixDetails> matrixList){  LOGGER.info("createActualWorkFlowMatrixDetails Method is called");  for (int i=0; i < ActualwfMatrixObjList.size(); i++) {    final WorkFlowMatrix wfMatrixObj=ActualwfMatrixObjList.get(i);    wfMatrixObj.setNextState(matrixList.get(i).getState());    wfMatrixObj.setNextAction(matrixList.get(i).getAction());    wfMatrixObj.setNextDesignation(matrixList.get(i).getDesignationString());    wfMatrixObj.setNextStatus(matrixList.get(i).getStatus());    wfMatrixObj.setValidActions(matrixList.get(i).getButtonString());    wfMatrixObj.setAdditionalRule(!getAdditionalRule().equals("-1") ? getAdditionalRule() : null);    if (i == 0) {      wfMatrixObj.setCurrentState("NEW");      wfMatrixObj.setCurrentStatus(matrixList.get(i).getStatus());    } else {      wfMatrixObj.setCurrentState(ActualwfMatrixObjList.get(i - 1).getNextState());      wfMatrixObj.setCurrentStatus(ActualwfMatrixObjList.get(i - 1).getNextStatus());      wfMatrixObj.setPendingActions(ActualwfMatrixObjList.get(i - 1).getNextAction());      wfMatrixObj.setCurrentDesignation(ActualwfMatrixObjList.get(i - 1).getNextDesignation());    }  }  if (ActualwfMatrixObjList.size() > 1) {    if (getWorkFlowMatrixRejectDetails().get(0).getRejectAction() == null) {      final WorkFlowMatrix matrixforReject=ActualwfMatrixObjList.get(0).clone();      matrixforReject.setCurrentState(REJECTED);      ActualwfMatrixObjList.add(matrixforReject);    } else {      final List<WorkFlowMatrix> RejectionList=new ArrayList();      final List<WorkFlowMatrixDetails> matrixDetList=getWorkFlowMatrixRejectDetails();      if (matrixDetList.size() > 0) {        for (int i=0; i < matrixDetList.size(); i++) {          final WorkFlowMatrix wfMatrixObj=new WorkFlowMatrix();          wfMatrixObj.setFromDate(getFromDate());          if (getLegacyDate() != null) {            setToDate((getLegacyDate()));          }          wfMatrixObj.setToDate(getToDate());          wfMatrixObj.setObjectType((this.workFlowMatrixService.getobjectTypebyId(getObjectType())).getType());          wfMatrixObj.setFromQty(getFromAmount());          wfMatrixObj.setToQty(getToAmount());          wfMatrixObj.setAdditionalRule(!getAdditionalRule().equals("-1") ? getAdditionalRule() : null);          if (i == 0) {            wfMatrixObj.setCurrentState("Rejected");          } else {            wfMatrixObj.setCurrentState(RejectionList.get(i - 1).getNextState());            wfMatrixObj.setCurrentStatus(RejectionList.get(i - 1).getNextStatus());            wfMatrixObj.setPendingActions(RejectionList.get(i - 1).getNextAction());            wfMatrixObj.setCurrentDesignation(RejectionList.get(i - 1).getNextDesignation());          }          wfMatrixObj.setNextDesignation(matrixDetList.get(i).getRejectdesignationString());          wfMatrixObj.setNextAction(matrixDetList.get(i).getRejectAction());          wfMatrixObj.setNextState(matrixDetList.get(i).getRejectState());          wfMatrixObj.setNextStatus(matrixDetList.get(i).getRejectStatus());          wfMatrixObj.setValidActions(matrixDetList.get(i).getRejectbuttonString());          RejectionList.add(wfMatrixObj);        }      }      ;      ActualwfMatrixObjList.addAll(RejectionList);    }  }  LOGGER.info("createActualWorkFlowMatrixDetails Method is ended");  return ActualwfMatrixObjList;}  }
class C{  public Entity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,Date lastSeenTimestamp){  this.macAddress=macAddress;  this.ipv4Address=ipv4Address;  this.vlan=vlan;  this.switchDPID=switchDPID;  this.switchPort=switchPort;  this.lastSeenTimestamp=lastSeenTimestamp;  this.activeSince=lastSeenTimestamp;}  }
class C{  @Ignore @Deprecated public void copyTo(Array<Element> destination,int sourcePosition){  copyTo(destination,(long)sourcePosition,(long)0);}  }
class C{  public final <T>MappingIterator<T> readValues(byte[] src) throws IOException, JsonProcessingException {  return readValues(src,0,src.length);}  }
class C{  public Matrix(int nr,int nc){  m_Matrix=new weka.core.matrix.Matrix(nr,nc);}  }
class C{  public DuplicatePropertyKeyException(String message){  super(message);}  }
class C{  public synchronized int addLog(Log l){  logs.addElement(l);  return logs.size() - 1;}  }
class C{  public static AppEventsLogger newLogger(Context context,String applicationId){  return new AppEventsLogger(context,applicationId,null);}  }
class C{  protected void doInitialize(Long startTime){  log.info("Initializing engine URI '" + engineURI + "' version "+ Version.VERSION);  ExecutionPathDebugLog.setDebugEnabled(configSnapshot.getEngineDefaults().getLogging().isEnableExecutionDebug());  ExecutionPathDebugLog.setTimerDebugEnabled(configSnapshot.getEngineDefaults().getLogging().isEnableTimerDebug());  MetricReportingPath.setMetricsEnabled(configSnapshot.getEngineDefaults().getMetricsReporting().isEnableMetricsReporting());  AuditPath.setAuditPattern(configSnapshot.getEngineDefaults().getLogging().getAuditPattern());  ThreadingOption.setThreadingEnabled(ThreadingOption.isThreadingEnabled() || configSnapshot.getEngineDefaults().getThreading().isThreadPoolTimerExec() || configSnapshot.getEngineDefaults().getThreading().isThreadPoolInbound()|| configSnapshot.getEngineDefaults().getThreading().isThreadPoolRouteExec()|| configSnapshot.getEngineDefaults().getThreading().isThreadPoolOutbound());  if (engine != null) {    engine.getServices().getTimerService().stopInternalClock(false);    try {      Thread.sleep(100);    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();    }    if (configSnapshot.getEngineDefaults().getMetricsReporting().isJmxEngineMetrics()) {      destroyEngineMetrics(engine.getServices().getEngineURI());    }    engine.getRuntime().initialize();    engine.getServices().destroy();  }  String epServicesContextFactoryClassName=configSnapshot.getEPServicesContextFactoryClassName();  EPServicesContextFactory epServicesContextFactory;  if (epServicesContextFactoryClassName == null) {    epServicesContextFactoryClassName=System.getProperty("ESPER_EPSERVICE_CONTEXT_FACTORY_CLASS");  }  if (epServicesContextFactoryClassName == null) {    epServicesContextFactory=new EPServicesContextFactoryDefault();  } else {    Class clazz;    try {      ClassLoader cl=Thread.currentThread().getContextClassLoader();      clazz=Class.forName(epServicesContextFactoryClassName,true,cl);    } catch (    ClassNotFoundException e) {      throw new ConfigurationException("Class '" + epServicesContextFactoryClassName + "' cannot be loaded");    }    Object obj;    try {      obj=clazz.newInstance();    } catch (    InstantiationException e) {      throw new ConfigurationException("Class '" + clazz + "' cannot be instantiated");    }catch (    IllegalAccessException e) {      throw new ConfigurationException("Illegal access instantiating class '" + clazz + "'");    }    epServicesContextFactory=(EPServicesContextFactory)obj;  }  EPServicesContext services=epServicesContextFactory.createServicesContext(this,configSnapshot);  EPRuntimeSPI runtimeSPI;  InternalEventRouteDest routeDest;  TimerCallback timerCallback;  String runtimeClassName=configSnapshot.getEngineDefaults().getAlternativeContext().getRuntime();  if (runtimeClassName == null) {    runtimeClassName=System.getProperty("ESPER_EPRUNTIME_CLASS");  }  if (runtimeClassName == null) {    EPRuntimeImpl runtimeImpl=new EPRuntimeImpl(services);    runtimeSPI=runtimeImpl;    routeDest=runtimeImpl;    timerCallback=runtimeImpl;  } else {    Class clazz;    try {      ClassLoader cl=Thread.currentThread().getContextClassLoader();      clazz=Class.forName(runtimeClassName,true,cl);    } catch (    ClassNotFoundException e) {      throw new ConfigurationException("Class '" + epServicesContextFactoryClassName + "' cannot be loaded");    }    Object obj;    try {      Constructor c=clazz.getConstructor(EPServicesContext.class);      obj=c.newInstance(services);    } catch (    NoSuchMethodException e) {      throw new ConfigurationException("Class '" + clazz + "' cannot be instantiated, constructor accepting services was not found");    }catch (    InstantiationException e) {      throw new ConfigurationException("Class '" + clazz + "' cannot be instantiated");    }catch (    IllegalAccessException e) {      throw new ConfigurationException("Illegal access instantiating class '" + clazz + "'");    }catch (    InvocationTargetException e) {      throw new ConfigurationException("Exception invoking constructor of class '" + clazz + "'");    }    runtimeSPI=(EPRuntimeSPI)obj;    routeDest=(InternalEventRouteDest)obj;    timerCallback=(TimerCallback)obj;  }  routeDest.setInternalEventRouter(services.getInternalEventRouter());  services.setInternalEventEngineRouteDest(routeDest);  if (startTime != null) {    services.getSchedulingService().setTime(startTime);  }  services.getTimerService().setCallback(timerCallback);  services.getStatementLifecycleSvc().init();  services.getFilterService().init();  services.getSchedulingService().init();  ConfigurationOperations configOps=new ConfigurationOperationsImpl(services.getEventAdapterService(),services.getEventTypeIdGenerator(),services.getEngineImportService(),services.getVariableService(),services.getEngineSettingsService(),services.getValueAddEventService(),services.getMetricsReportingService(),services.getStatementEventTypeRefService(),services.getStatementVariableRefService(),services.getPlugInViews(),services.getFilterService(),services.getPatternSubexpressionPoolSvc(),services.getMatchRecognizeStatePoolEngineSvc(),services.getTableService(),configSnapshot.getTransientConfiguration());  SelectClauseStreamSelectorEnum defaultStreamSelector=SelectClauseStreamSelectorEnum.mapFromSODA(configSnapshot.getEngineDefaults().getStreamSelection().getDefaultStreamSelector());  EPAdministratorSPI adminSPI;  String adminClassName=configSnapshot.getEngineDefaults().getAlternativeContext().getAdmin();  EPAdministratorContext adminContext=new EPAdministratorContext(runtimeSPI,services,configOps,defaultStreamSelector);  if (adminClassName == null) {    adminClassName=System.getProperty("ESPER_EPADMIN_CLASS");  }  if (adminClassName == null) {    adminSPI=new EPAdministratorImpl(adminContext);  } else {    Class clazz;    try {      ClassLoader cl=Thread.currentThread().getContextClassLoader();      clazz=Class.forName(adminClassName,true,cl);    } catch (    ClassNotFoundException e) {      throw new ConfigurationException("Class '" + epServicesContextFactoryClassName + "' cannot be loaded");    }    Object obj;    try {      Constructor c=clazz.getConstructor(EPAdministratorContext.class);      obj=c.newInstance(adminContext);    } catch (    NoSuchMethodException e) {      throw new ConfigurationException("Class '" + clazz + "' cannot be instantiated, constructor accepting context was not found");    }catch (    InstantiationException e) {      throw new ConfigurationException("Class '" + clazz + "' cannot be instantiated");    }catch (    IllegalAccessException e) {      throw new ConfigurationException("Illegal access instantiating class '" + clazz + "'");    }catch (    InvocationTargetException e) {      throw new ConfigurationException("Exception invoking constructor of class '" + clazz + "'");    }    adminSPI=(EPAdministratorSPI)obj;  }  if (configSnapshot.getEngineDefaults().getThreading().isInternalTimerEnabled()) {    services.getTimerService().startInternalClock();  }  try {    Thread.sleep(100);  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();  }  engine=new EPServiceEngine(services,runtimeSPI,adminSPI);  loadAdapters(services);  if (services.getEngineLevelExtensionServicesContext() != null) {    services.getEngineLevelExtensionServicesContext().init(services,runtimeSPI,adminSPI);  }  if (configSnapshot.getEngineDefaults().getMetricsReporting().isEnableMetricsReporting()) {    services.getMetricsReportingService().setContext(runtimeSPI,services);  }  if (configSnapshot.getEngineDefaults().getMetricsReporting().isJmxEngineMetrics()) {    startEngineMetrics(services,runtimeSPI);  }  for (  EPServiceStateListener listener : serviceListeners) {    try {      listener.onEPServiceInitialized(this);    } catch (    RuntimeException ex) {      log.error("Runtime exception caught during an onEPServiceInitialized callback:" + ex.getMessage(),ex);    }  }}  }
class C{  public boolean isBound(final String var){  return vals.containsKey(var);}  }
class C{  public boolean flashlight(){  if (camera != null) {    Camera.Parameters parameter=camera.getParameters();    String flashMode=parameter.getFlashMode();    if (Camera.Parameters.FLASH_MODE_OFF.equals(flashMode)) {      parameter.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);      camera.setParameters(parameter);      return true;    } else {      parameter.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);      camera.setParameters(parameter);      return false;    }  }  return false;}  }
class C{  public void updateReceivedData(String topic,byte[] data,int QoS,boolean retained){  boolean writeHex=hexDisplay;  if (hexDisplay == true) {    toCharString();  }  receivedTopic.setText(topic);  receivedQoS.setText(Integer.toString(QoS));  receivedRetain.setSelected(retained);  receivedData.setText(new String(data));  fileContent=data;  if (writeHex) {    toHexString();  }synchronized (mqttMgr) {    mqttMgr.writeLogln("  --> PUBLISH received, TOPIC:" + topic + ", QoS:"+ QoS+ ", Retained:"+ retained);    mqttMgr.writeLog("                        DATA:");    if (writeHex) {      mqttMgr.writeLog("0x");    }    mqttMgr.writeLogln(receivedData.getText());  }}  }
class C{  public static boolean deleteRecursively(File f){  boolean done=false;  if (f.isFile()) {    f.delete();    return true;  }  if (f.isDirectory()) {    File[] list=f.listFiles();    if (list.length < 0) {      Logger.appendLog("[FilesUtils][I] deleting " + f.getAbsolutePath());      return f.delete();    } else {      for (      File file : list) {        deleteRecursively(file);      }      return f.delete();    }  }  return done;}  }
class C{  public void updateRow() throws SQLException {  checkState();  rs.updateRow();  notifyRowChanged();}  }
class C{  @Override protected void onPreProcess(String what,String[] oldPathNames,String[] newPathNames,int opCode){  if (Global.debugEnabled) {    Log.i(Global.LOG_CONTEXT,mDebugPrefix + "onPreProcess('" + what+ "')");  }  this.mHasNoMedia=MediaScanner.isNoMedia(22,oldPathNames) || MediaScanner.isNoMedia(22,newPathNames);  super.onPreProcess(what,oldPathNames,newPathNames,opCode);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.564 -0500",hash_original_method="82F216345EA52FCB5807D6A46DE8445B",hash_generated_method="A9262B0D84E883AEAED8396C5245AE70") public static final void writeValueXml(Object v,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  String typeStr;  if (v == null) {    out.startTag(null,"null");    if (name != null) {      out.attribute(null,"name",name);    }    out.endTag(null,"null");    return;  } else   if (v instanceof String) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else   if (v instanceof Integer) {    typeStr="int";  } else   if (v instanceof Long) {    typeStr="long";  } else   if (v instanceof Float) {    typeStr="float";  } else   if (v instanceof Double) {    typeStr="double";  } else   if (v instanceof Boolean) {    typeStr="boolean";  } else   if (v instanceof byte[]) {    writeByteArrayXml((byte[])v,name,out);    return;  } else   if (v instanceof int[]) {    writeIntArrayXml((int[])v,name,out);    return;  } else   if (v instanceof Map) {    writeMapXml((Map)v,name,out);    return;  } else   if (v instanceof List) {    writeListXml((List)v,name,out);    return;  } else   if (v instanceof Set) {    writeSetXml((Set)v,name,out);    return;  } else   if (v instanceof CharSequence) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else {    throw new RuntimeException("writeValueXml: unable to write value " + v);  }  out.startTag(null,typeStr);  if (name != null) {    out.attribute(null,"name",name);  }  out.attribute(null,"value",v.toString());  out.endTag(null,typeStr);}  }
class C{  public void testAddAllSelf(){  try {    LinkedBlockingQueue q=populatedQueue(SIZE);    q.addAll(q);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  @Deprecated public static void detect(String url,OnDetectUrlFileListener onDetectUrlFileListener){  getFileDownloadManager().detect(url,onDetectUrlFileListener);}  }
class C{  public static String byteToString58(byte[] array){  return Base58.encode(array);}  }
class C{  public static boolean hasScrollPane(@NotNull Component component){  return hasComponentOfType(component,JScrollPane.class);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof MutableLong) {    return value == ((MutableLong)obj).longValue();  }  return false;}  }
class C{  public boolean isNew(){  return newMessage;}  }
class C{  public WritableRaster copyData(WritableRaster dest){  Rectangle bounds;  Raster tile;  if (dest == null) {    bounds=getBounds();    Point p=new Point(minX,minY);    SampleModel sm=sampleModel.createCompatibleSampleModel(width,height);    dest=Raster.createWritableRaster(sm,p);  } else {    bounds=dest.getBounds();  }  int startX=XToTileX(bounds.x);  int startY=YToTileY(bounds.y);  int endX=XToTileX(bounds.x + bounds.width - 1);  int endY=YToTileY(bounds.y + bounds.height - 1);  for (int j=startY; j <= endY; j++) {    for (int i=startX; i <= endX; i++) {      tile=getTile(i,j);      Rectangle intersectRect=bounds.intersection(tile.getBounds());      Raster liveRaster=tile.createChild(intersectRect.x,intersectRect.y,intersectRect.width,intersectRect.height,intersectRect.x,intersectRect.y,null);      dest.setDataElements(0,0,liveRaster);    }  }  return dest;}  }
class C{  private void initialize(Future<Void> startFuture){  final Router mainRouter=createRoutes();  final HttpServerOptions options=getServerOptions();  startServer(startFuture,mainRouter,options);}  }
class C{  protected void printParameterSettings(){  log.info("Computing and writing grid based accessibility measures with following settings:");  log.info("Returning raw sum (not logsum): " + useRawSum);  log.info("Logit Scale Parameter: " + logitScaleParameter);  log.info("Inverse of logit Scale Parameter: " + inverseOfLogitScaleParameter);  log.info("Bike speed (meter/h): " + this.bikeSpeedMeterPerHour);  log.info("Walk speed (meter/h): " + this.walkSpeedMeterPerHour + " ("+ this.walkSpeedMeterPerHour / 3600. + "meter/s)");  log.info("Depature time (in seconds): " + depatureTime);  log.info("Beta Car Travel Time: " + betaCarTT);  log.info("Beta Car Travel Time Power2: " + betaCarTTPower);  log.info("Beta Car Ln Travel Time: " + betaCarLnTT);  log.info("Beta Car Travel Distance: " + betaCarTD);  log.info("Beta Car Travel Distance Power2: " + betaCarTDPower);  log.info("Beta Car Ln Travel Distance: " + betaCarLnTD);  log.info("Beta Car Travel Cost: " + betaCarTC);  log.info("Beta Car Travel Cost Power2: " + betaCarTCPower);  log.info("Beta Car Ln Travel Cost: " + betaCarLnTC);  log.info("Beta Bike Travel Time: " + betaBikeTT);  log.info("Beta Bike Travel Time Power2: " + betaBikeTTPower);  log.info("Beta Bike Ln Travel Time: " + betaBikeLnTT);  log.info("Beta Bike Travel Distance: " + betaBikeTD);  log.info("Beta Bike Travel Distance Power2: " + betaBikeTDPower);  log.info("Beta Bike Ln Travel Distance: " + betaBikeLnTD);  log.info("Beta Bike Travel Cost: " + betaBikeTC);  log.info("Beta Bike Travel Cost Power2: " + betaBikeTCPower);  log.info("Beta Bike Ln Travel Cost: " + betaBikeLnTC);  log.info("Beta Walk Travel Time: " + betaWalkTT);  log.info("Beta Walk Travel Time Power2: " + betaWalkTTPower);  log.info("Beta Walk Ln Travel Time: " + betaWalkLnTT);  log.info("Beta Walk Travel Distance: " + betaWalkTD);  log.info("Beta Walk Travel Distance Power2: " + betaWalkTDPower);  log.info("Beta Walk Ln Travel Distance: " + betaWalkLnTD);  log.info("Beta Walk Travel Cost: " + betaWalkTC);  log.info("Beta Walk Travel Cost Power2: " + betaWalkTCPower);  log.info("Beta Walk Ln Travel Cost: " + betaWalkLnTC);}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public static float sin(float angle){  return sinCache[((int)(angle * UNKNOWN_CONST) & SIN_CACHE_SIZE)];}  }
class C{  private static String fileName(String host,int port){  if (host == null) {    throw new NullPointerException("host == null");  }  return host + "." + port;}  }
class C{  protected Constants(){}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider,SecureRandom random) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  try {    return generate(key,provider,random);  } catch (  NoSuchProviderException e) {    throw e;  }catch (  SignatureException e) {    throw e;  }catch (  InvalidKeyException e) {    throw e;  }catch (  GeneralSecurityException e) {    throw new SecurityException("exception: " + e);  }}  }
class C{  public static int determineDimensions(java.lang.reflect.Type type){  String name=type.toString().replace("class","").trim();  int count=0;  for (int i=0; i < name.length(); i++) {    if (name.charAt(i) == '[') {      count++;    }  }  return count;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.987 -0500",hash_original_method="A37AC0F546410BFB8FB9B835A95E1AD0",hash_generated_method="776F05CA560EFB9C0C763CBDB1EB98A5") public static boolean putLong(ContentResolver cr,String name,long value){  return putString(cr,name,Long.toString(value));}  }
class C{  private void removeTempInstance(){  FormController formController=Collect.getInstance().getFormController();  File temp=SaveToDiskTask.savepointFile(formController.getInstancePath());  if (temp.exists()) {    temp.delete();  }  String selection=InstanceColumns.INSTANCE_FILE_PATH + "=?";  String[] selectionArgs={formController.getInstancePath().getAbsolutePath()};  boolean erase=false;{    Cursor c=null;    try {      c=getContentResolver().query(InstanceColumns.CONTENT_URI,null,selection,selectionArgs,null);      erase=(c.getCount() < 1);    }  finally {      if (c != null) {        c.close();      }    }  }  if (erase) {    String instanceFolder=formController.getInstancePath().getParent();    Log.i(t,"attempting to delete: " + instanceFolder);    int images=MediaUtils.deleteImagesInFolderFromMediaProvider(formController.getInstancePath().getParentFile());    int audio=MediaUtils.deleteAudioInFolderFromMediaProvider(formController.getInstancePath().getParentFile());    int video=MediaUtils.deleteVideoInFolderFromMediaProvider(formController.getInstancePath().getParentFile());    Log.i(t,"removed from content providers: " + images + " image files, "+ audio+ " audio files,"+ " and "+ video+ " video files.");    File f=new File(instanceFolder);    if (f.exists() && f.isDirectory()) {      for (      File del : f.listFiles()) {        Log.i(t,"deleting file: " + del.getAbsolutePath());        del.delete();      }      f.delete();    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void println(PrintWriter self,Object value){  self.println(InvokerHelper.toString(value));}  }
class C{  public final long decrementAndGet(){  for (; ; ) {    long current=get();    long next=current - 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  public synchronized void onNodeFailed(){  failedNodesCnt++;}  }
class C{  public void start(Context context){  mContext=context;  SensorManager sm=(SensorManager)context.getSystemService(Context.SENSOR_SERVICE);  Sensor s=sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  if (s == null) {    Log.e(LOG_TAG,"No accelerometer in this device. Cannot use rage shake.");    return;  }  sm.registerListener(this,s,SensorManager.SENSOR_DELAY_NORMAL);}  }
class C{  private Component parseString(GridField field,String in,ListItem listItem,boolean to){  if (in == null)   return null;  int dt=field.getDisplayType();  try {    WEditor editor=null;    if (field.isKey())     editor=new WNumberEditor(field); else     editor=WebEditorFactory.getEditor(field,true);    if (editor == null)     editor=new WStringEditor(field);    if (dt == DisplayType.Integer || (DisplayType.isID(dt) && field.getColumnName().endsWith("_ID"))) {      int i=Integer.parseInt(in);      editor.setValue(new Integer(i));    } else     if (DisplayType.isNumeric(dt)) {      editor.setValue(DisplayType.getNumberFormat(dt).parse(in));    } else     if (DisplayType.isDate(dt)) {      long time=0;      try {        time=DisplayType.getDateFormat_JDBC().parse(in).getTime();        editor.setValue(new Timestamp(time));      } catch (      Exception e) {        log.log(Level.SEVERE,in + "(" + in.getClass()+ ")"+ e);        time=DisplayType.getDateFormat(dt).parse(in).getTime();      }      editor.setValue(new Timestamp(time));    } else     if (dt == DisplayType.YesNo)     editor.setValue(Boolean.valueOf(in)); else     editor.setValue(in);    editor.addValueChangeListener(this);    boolean between=false;    Listbox listOp=(Listbox)listItem.getFellow("listOperator" + listItem.getId());    String betweenValue=listOp.getSelectedItem().getValue().toString();    String opValue=MQuery.OPERATORS[MQuery.BETWEEN_INDEX].getValue();    if (to && betweenValue != null && betweenValue.equals(opValue))     between=true;    boolean enabled=!to || (to && between);    editor.setReadWrite(enabled);    editor.setVisible(enabled);    editor.dynamicDisplay();    return editor.getComponent();  } catch (  Exception ex) {    log.log(Level.SEVERE,"Object=" + in,ex);    return null;  }}  }
class C{  public void subscribe(String topic,int qos,boolean expectRetained) throws Exception {  logToFile("subscribe [topic:" + topic + "][qos:"+ qos+ "][expectRetained:"+ expectRetained+ "]");  subscribedTopics.put(topic,new Integer(qos));  client.subscribe(topic,qos);  if (expectRetained) {    waitForMessage(topic,retainedPublishes.get(topic),true);  }}  }
class C{  public static int parseIntRelaxed(String s){  if (s == null || s.length() == 0 || s.trim().length() == 0) {    return 0;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (Character.isDigit(c)) {      buffer.append(c);    } else {      if (buffer.length() > 0) {        break;      }    }  }  if (buffer.length() == 0) {    return 0;  }  try {    return Integer.parseInt(buffer.toString());  } catch (  NumberFormatException exception) {    return Integer.MAX_VALUE;  }}  }
class C{  public static float maxY(final CGRect aRect){  return aRect.origin.y + aRect.size.height;}  }
class C{  @Override final public void mouseClicked(MouseEvent e){  mouseClick(e);}  }
class C{  public static StatementSpecRaw compileEPL(String eplStatement,String eplStatementForErrorMsg,boolean addPleaseCheck,String statementName,SelectClauseStreamSelectorEnum defaultStreamSelector,EngineImportService engineImportService,VariableService variableService,SchedulingService schedulingService,String engineURI,ConfigurationInformation configSnapshot,PatternNodeFactory patternNodeFactory,ContextManagementService contextManagementService,ExprDeclaredService exprDeclaredService,TableService tableService){  if (log.isDebugEnabled()) {    log.debug(".createEPLStmt statementName=" + statementName + " eplStatement="+ eplStatement);  }  ParseResult parseResult=ParseHelper.parse(eplStatement,eplStatementForErrorMsg,addPleaseCheck,eplParseRule,true);  Tree ast=parseResult.getTree();  EPLTreeWalkerListener walker=new EPLTreeWalkerListener(parseResult.getTokenStream(),engineImportService,variableService,schedulingService,defaultStreamSelector,engineURI,configSnapshot,patternNodeFactory,contextManagementService,parseResult.getScripts(),exprDeclaredService,tableService);  try {    ParseHelper.walk(ast,walker,eplStatement,eplStatementForErrorMsg);  } catch (  ASTWalkException ex) {    log.error(".createEPL Error validating expression",ex);    throw new EPStatementException(ex.getMessage(),ex,eplStatementForErrorMsg);  }catch (  EPStatementSyntaxException ex) {    throw ex;  }catch (  RuntimeException ex) {    String message="Error in expression";    log.debug(message,ex);    throw new EPStatementException(getNullableErrortext(message,ex.getMessage()),ex,eplStatementForErrorMsg);  }  if (log.isDebugEnabled()) {    ASTUtil.dumpAST(ast);  }  StatementSpecRaw raw=walker.getStatementSpec();  raw.setExpressionNoAnnotations(parseResult.getExpressionWithoutAnnotations());  return raw;}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  layout_width=w;  layout_height=h;  setupBounds();  setupPaints();  invalidate();}  }
class C{  @HLEFunction(nid=0xAD84D37F,version=150,checkInsideInterrupt=true) public int __sceSasSetPitch(int sasCore,int voice,int pitch){  checkSasAndVoiceHandlesGood(sasCore,voice);  voices[voice].setPitch(pitch);  return 0;}  }
class C{  private static List<String> linesToWrite(File file,Class<?> aClass,boolean cleanAll) throws IOException {  String[] classIdentifier=new String[]{"class","{",aClass.getSimpleName()};  List<String> linesToWrite=new ArrayList<String>();  String previousLine=":-P";  boolean classFound=false;  boolean classDefinitionFound=false;  boolean moreLines=false;  int annotatedFields=annotatedFieldsNumber(aClass);  for (  String line : readFile(file)) {    if (containsAll(line,classIdentifier))     classFound=true;    if (containsAll(line,"class","{") && !containsAll(line,"="))     classDefinitionFound=true;    if (!globalToClean(line) && globalToClean(previousLine)) {      if (moreLines) {        if ((cleanAll && classDefinitionFound) || classFound) {          HashMap<String,Object> cleanLine=cleanLine(previousLine,moreLines,JGlobalMap.class);          boolean newLine=(Boolean)cleanLine.get("newLine");          String result=(String)cleanLine.get("result");          if (result != null)           linesToWrite.add(result);          previousLine=line;          moreLines=newLine;          if (!newLine) {            linesToWrite.add(line);          }          continue;        }      }      if (!classFound || (cleanAll && !classDefinitionFound)) {        linesToWrite.add(previousLine);        linesToWrite.add(line);        previousLine=line;        classDefinitionFound=false;        continue;      }      linesToWrite.add(line);      previousLine=line;      continue;    }    if (globalToClean(line)) {      previousLine=line;      continue;    }    if (attributeToClean(line) || moreLines) {      if (cleanAll || (classFound && annotatedFields > 0)) {        HashMap<String,Object> cleanLine=cleanLine(line,moreLines,JMapAccessors.class,JMapAccessor.class,JMap.class);        boolean newLine=(Boolean)cleanLine.get("newLine");        String result=(String)cleanLine.get("result");        if (result != null)         linesToWrite.add(result);        moreLines=newLine;        if (!cleanAll && !moreLines && !newLine)         annotatedFields--;        continue;      }    }    if (line.trim().equals("})"))     continue;    linesToWrite.add(line);  }  linesToWrite=deleteImport(linesToWrite);  return linesToWrite;}  }
class C{  private void initChart(){  XYPlot plot=m_chart.getXYPlot();  if (m_xyAnnotation != null) {    plot.addAnnotation(m_xyAnnotation);  }  if (m_xMarker != null) {    plot.addDomainMarker(m_xMarker);  }  if (m_yMarker != null) {    plot.addRangeMarker(m_yMarker);  }  if (m_xAxisRange != null) {    NumberAxis rangeAxis=getAxis(AxisEnum.X);    rangeAxis.setRange(m_xAxisRange[0],m_xAxisRange[1]);  }  if (m_yAxisRange != null) {    NumberAxis rangeAxis=getAxis(AxisEnum.Y);    rangeAxis.setRange(m_yAxisRange[0],m_yAxisRange[1]);  }  if (m_backgroundPaint != null) {    m_chart.setBackgroundPaint(m_backgroundPaint);    plot.setBackgroundPaint(m_backgroundPaint);  }  if (m_gridPaint != null) {    plot.setDomainGridlinePaint(m_gridPaint);    plot.setRangeGridlinePaint(m_gridPaint);  }  if (m_xTickDelta > 0) {    NumberAxis rangeAxis=getAxis(AxisEnum.X);    rangeAxis.setTickUnit(new NumberTickUnit(m_xTickDelta));  }  if (m_yTickDelta > 0) {    NumberAxis rangeAxis=getAxis(AxisEnum.Y);    rangeAxis.setTickUnit(new NumberTickUnit(m_yTickDelta));  }}  }
class C{  public static int remainderUnsigned(int dividend,int divisor){  return (int)(toUnsignedLong(dividend) % toUnsignedLong(divisor));}  }
class C{  public void addProvider(Provider provider,int logo){  authProviders[providerCount]=provider;  authProviderLogos[providerCount]=logo;  providerCount++;}  }
class C{  public static Bitmap loadBitmapOptimized(String fileName) throws ImageLoadException {  return loadBitmapOptimized(fileName,MAX_PIXELS);}  }
class C{  public float intersectRayDistance(Ray3D ray){  float d=-normal.dot(this);  float numer=normal.dot(ray) + d;  float denom=normal.dot(ray.dir);  if (MathUtils.abs(denom) < MathUtils.EPS) {    return -1;  }  return -(numer / denom);}  }
class C{  private static boolean isAggregateExpressionNode(IValueExpressionNode exprNode){  final IValueExpression<?> expr=exprNode.getValueExpression();  if (expr == null) {    if (exprNode instanceof AssignmentNode) {      return isAggregateExpressionNode(((AssignmentNode)exprNode).getValueExpressionNode());    }    if (exprNode instanceof FunctionNode) {      final FunctionNode functionNode=(FunctionNode)exprNode;      if (FunctionRegistry.isAggregate(functionNode.getFunctionURI()))       return true;    }    return false;  }  if (isObviousAggregate(expr)) {    return true;  }  return false;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (simulator == null) {    throw new NullPointerException();  }}  }
class C{  public static Stream<Transaction> streamAllTransactions(final Block block){  return block.getTransactions().stream().flatMap(null);}  }
class C{  public void testMkdirsParentPathMissingPartially() throws Exception {  Map<String,String> props=properties(null,null,"0555");  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,paths(DIR),null);  igfs.mkdirs(SUBSUBDIR,props);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,SUBSUBDIR);  if (permissionsSupported()) {    assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfsSecondary.permissions(SUBSUBDIR.toString()));    assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfs.info(SUBSUBDIR).properties().get(IgfsUtils.PROP_PERMISSION));  }}  }
class C{  public PdfDecoderFX(){  pages=new SingleDisplayFX(this,options);  options.setRenderPage(true);  if (!FontMappings.fontsInitialised) {    FontMappings.initFonts();    FontMappings.fontsInitialised=true;  }  setId("PdfDecoderFX");  this.setCacheHint(CacheHint.QUALITY);}  }
class C{  @Procedure @Description("apoc.couchbase.posParamsQuery(nodes, bucket, statement, params) yield queryResult - executes a N1QL statement with positional parameters.") public Stream<CouchbaseQueryResult> posParamsQuery(@Name("nodes") List<String> nodes,@Name("bucket") String bucket,@Name("statement") String statement,@Name("params") List<Object> params){  Stream<CouchbaseQueryResult> result=null;  try (CouchbaseConnection couchbaseConnection=CouchbaseManager.getConnection(nodes,bucket)){    List<JsonObject> statementResult=couchbaseConnection.executeParametrizedStatement(statement,params);    if (statementResult != null) {      result=Stream.of(CouchbaseUtils.convertToCouchbaseQueryResult(statementResult));    }  }   return result;}  }
class C{  public static BaseMsgStreamer create(List<?> cons,final DistributionMessage msg,final boolean directReply,final DMStats stats){  final Connection firstCon=(Connection)cons.get(0);  Version version;  final int numCons=cons.size();  if (numCons > 1) {    Connection con;    Object2ObjectOpenHashMap versionToConnMap=null;    int numVersioned=0;    for (    Object c : cons) {      con=(Connection)c;      if ((version=con.getRemoteVersion()) != null) {        if (versionToConnMap == null) {          versionToConnMap=new Object2ObjectOpenHashMap();        }        @SuppressWarnings("unchecked") ArrayList<Object> vcons=(ArrayList<Object>)versionToConnMap.get(version);        if (vcons == null) {          vcons=new ArrayList<Object>(numCons);          versionToConnMap.put(version,vcons);        }        vcons.add(con);        numVersioned++;      }    }    if (versionToConnMap == null) {      return new MsgStreamer(cons,msg,directReply,stats,firstCon.getSendBufferSize());    } else {      final ArrayList<MsgStreamer> streamers=new ArrayList<MsgStreamer>(versionToConnMap.size() + 1);      final int sendBufferSize=firstCon.getSendBufferSize();      if (numCons > numVersioned) {        final ArrayList<Object> unversionedCons=new ArrayList<Object>(numCons);        for (        Object c : cons) {          con=(Connection)c;          if ((version=con.getRemoteVersion()) == null) {            unversionedCons.add(con);          }        }        streamers.add(new MsgStreamer(unversionedCons,msg,directReply,stats,sendBufferSize));      }      for (ObjectIterator<Object2ObjectMap.Entry> itr=versionToConnMap.object2ObjectEntrySet().fastIterator(); itr.hasNext(); ) {        Object2ObjectMap.Entry entry=itr.next();        Object ver=entry.getKey();        Object l=entry.getValue();        streamers.add(new VersionedMsgStreamer((List<?>)l,msg,directReply,stats,sendBufferSize,(Version)ver));      }      return new MsgStreamerList(streamers);    }  } else   if ((version=firstCon.getRemoteVersion()) == null) {    return new MsgStreamer(cons,msg,directReply,stats,firstCon.getSendBufferSize());  } else {    return new VersionedMsgStreamer(cons,msg,directReply,stats,firstCon.getSendBufferSize(),version);  }}  }
class C{  public PertFactory(){  for (  Object[] o : classTagArray) {    addStorableClass((String)o[1],(Class)o[0]);  }}  }
class C{  public BindObject bind(Framework.Mapping<?> mapping,Map<String,String> data){  return bind(mapping,data,"");}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public static void changeToMetricUnits(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));  Assert.assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.settings_stats_units_title)));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_stats_units_title));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.unit_kilometer));  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();}  }
class C{  private static String preStripIndividualTags(String html){  StringBuilder sb=new StringBuilder(html.length() * 110 / 100);  char prevChar=0;  for (int i=0; i < html.length(); i++) {    final char c=html.charAt(i);    if (c == '<') {      int look=(html.startsWith("/",i + 1)) ? i + 2 : i + 1;      for (      String tag : spacingTags) {        if (html.startsWith(tag,look)) {          if (prevChar > ' ') {            sb.append(' ');          }          break;        }      }    }    sb.append(c);    prevChar=c;  }  return sb.toString();}  }
class C{  public void addDisconnectedEventListener(Executor executor,PeerDisconnectedEventListener listener){  peerDisconnectedEventListeners.add(new ListenerRegistration<PeerDisconnectedEventListener>(checkNotNull(listener),executor));  for (  Peer peer : getConnectedPeers())   peer.addDisconnectedEventListener(executor,listener);  for (  Peer peer : getPendingPeers())   peer.addDisconnectedEventListener(executor,listener);}  }
class C{  private JobDefinitionEntity createOrUpdateJobDefinitionEntity(JobDefinitionEntity jobDefinitionEntity,NamespaceEntity namespaceEntity,String jobName,String description,String activitiId,List<Parameter> parameters,S3PropertiesLocation s3PropertiesLocation){  JobDefinitionEntity jobDefinitionEntityLocal=jobDefinitionEntity;  if (jobDefinitionEntityLocal == null) {    jobDefinitionEntityLocal=new JobDefinitionEntity();  }  jobDefinitionEntityLocal.setName(jobName);  jobDefinitionEntityLocal.setNamespace(namespaceEntity);  jobDefinitionEntityLocal.setDescription(description);  jobDefinitionEntityLocal.setActivitiId(activitiId);  String bucketName=null;  String key=null;  if (s3PropertiesLocation != null) {    bucketName=s3PropertiesLocation.getBucketName();    key=s3PropertiesLocation.getKey();  }  jobDefinitionEntityLocal.setS3BucketName(bucketName);  jobDefinitionEntityLocal.setS3ObjectKey(key);  List<JobDefinitionParameterEntity> parameterEntities=new ArrayList<>();  if (!CollectionUtils.isEmpty(parameters)) {    for (    Parameter parameter : parameters) {      JobDefinitionParameterEntity parameterEntity=new JobDefinitionParameterEntity();      parameterEntities.add(parameterEntity);      parameterEntity.setName(parameter.getName());      parameterEntity.setValue(parameter.getValue());    }  }  jobDefinitionEntityLocal.setParameters(parameterEntities);  return jobDefinitionEntityLocal;}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public Vertex basicGetSource(){  if (eContainerFeatureID() != SGraphPackage.TRANSITION__SOURCE)   return null;  return (Vertex)eInternalContainer();}  }
class C{  public static void assertEquals(String message,Set<? extends Object> expected,Set<? extends Object> actual){  Set<Object> onlyInExpected=new HashSet<Object>(expected);  onlyInExpected.removeAll(actual);  Set<Object> onlyInActual=new HashSet<Object>(actual);  onlyInActual.removeAll(expected);  if (onlyInExpected.size() != 0 || onlyInActual.size() != 0) {    Set<Object> intersection=new HashSet<Object>(expected);    intersection.retainAll(actual);    failWithMessage(message,"Sets do not match.\nOnly in expected: " + onlyInExpected + "\nOnly in actual: "+ onlyInActual+ "\nIntersection: "+ intersection);  }}  }
class C{  public static void add(ByteString namespace,ByteString key,ByteString value){  getOrCreate().add(namespace,key,value);}  }
class C{  public boolean matches(HttpServletRequest request){  return true;}  }
class C{  public static Type toSootType(String str){  if (str.equals("int"))   return IntType.v(); else   if (str.equals("char"))   return CharType.v(); else   if (str.equals("boolean"))   return BooleanType.v(); else   if (str.equals("long"))   return LongType.v(); else   if (str.equals("byte"))   return ByteType.v(); else   if (str.equals("double"))   return DoubleType.v(); else   if (str.equals("float"))   return FloatType.v(); else   if (str.equals("short"))   return ShortType.v(); else   if (str.equals("void"))   return VoidType.v(); else   if (str.equals("null"))   return NullType.v(); else {    Pattern typeSig=Pattern.compile("([\\w\\$\\.]+)([\\[\\]]*)");    Matcher matcher=typeSig.matcher(str);    boolean b=matcher.matches();    if (!b || matcher.groupCount() != 2) {      logger.error("Something very wrong with parsing type: {}",str);      droidsafe.main.Main.exit(1);    }    String baseType=matcher.group(1);    if (!matcher.group(2).equals("")) {      String brackets=matcher.group(2);      int numDims=brackets.length() / 2;      return ArrayType.v(toSootType(baseType),numDims);    } else     if (!matcher.group(1).equals("")) {      return RefType.v(baseType);    } else {      logger.error("Cannot parse type: {}",str);      droidsafe.main.Main.exit(1);      return null;    }  }}  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  @Override public WorldGenAbstractTree func_150567_a(Random p_150567_1_){  return worldGenBamboo;}  }
class C{  private boolean indentEmptyLines(){  return true;}  }
class C{  private boolean rendererFinished(){  if (page == null) {    return true;  }  return (page.isFinished() && currentCommand == page.getCommandCount());}  }
class C{  private Object buildPojoObject(@Nullable String cacheName,String typeName,JdbcTypeField[] flds,Map<String,Integer> loadColIdxs,ResultSet rs) throws CacheLoaderException {  Map<String,PojoPropertiesCache> cacheProps=pojosProps.get(cacheName);  if (cacheProps == null)   throw new CacheLoaderException("Failed to find POJO types metadata for cache: " + U.maskName(cacheName));  PojoPropertiesCache ppc=cacheProps.get(typeName);  if (ppc == null)   throw new CacheLoaderException("Failed to find POJO type metadata for type: " + typeName);  try {    Object obj=ppc.ctor.newInstance();    for (    JdbcTypeField fld : flds) {      String fldJavaName=fld.getJavaFieldName();      ClassProperty prop=ppc.props.get(fldJavaName);      if (prop == null)       throw new IllegalStateException("Failed to find property in POJO class [type=" + typeName + ", prop="+ fldJavaName+ "]");      String dbName=fld.getDatabaseFieldName();      Integer colIdx=columnIndex(loadColIdxs,dbName);      try {        Object colVal=transformer.getColumnValue(rs,colIdx,fld.getJavaFieldType());        try {          prop.set(obj,colVal);        } catch (        Exception e) {          throw new CacheLoaderException("Failed to set property in POJO class [type=" + typeName + ", prop="+ fldJavaName+ ", col="+ colIdx+ ", dbName="+ dbName+ "]",e);        }      } catch (      SQLException e) {        throw new CacheLoaderException("Failed to read object property [type= " + typeName + ", prop="+ fldJavaName+ ", col="+ colIdx+ ", dbName="+ dbName+ "]",e);      }    }    return obj;  } catch (  Exception e) {    throw new CacheLoaderException("Failed to construct instance of class: " + typeName,e);  }}  }
class C{  public void moveToBack(){  if (isIcon()) {    if (getDesktopIcon().getParent() instanceof JLayeredPane) {      ((JLayeredPane)getDesktopIcon().getParent()).moveToBack(getDesktopIcon());    }  } else   if (getParent() instanceof JLayeredPane) {    ((JLayeredPane)getParent()).moveToBack(this);  }}  }
class C{  public boolean containsParameter(String key){  return mParameters.containsKey(key);}  }
class C{  public boolean remove(int key,Object value){  if (value == null) {    return false;  }  E prev;  if (array.length <= key) {    return false;  }  prev=(E)array[key];  if (prev.equals(value)) {    size--;    array[key]=null;    return true;  }  return false;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String propertyName=e.getPropertyName();  if (propertyName == "visible") {    if (e.getOldValue() == Boolean.FALSE && e.getNewValue() == Boolean.TRUE) {      handlePopupIsVisibleEvent(true);    } else     if (e.getOldValue() == Boolean.TRUE && e.getNewValue() == Boolean.FALSE) {      handlePopupIsVisibleEvent(false);    }  }}  }
class C{  public void testSetBitBug1331(){  BigInteger result=BigInteger.valueOf(0L).setBit(191);  assertEquals("incorrect value","3138550867693340381917894711603833208051177722232017256448",result.toString());  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void error(int id,int code,String msg){  String symbol="N/A";  BrokerModelException brokerModelException=null;  if (m_contractRequests.containsKey(id)) {    symbol=m_contractRequests.get(id).getSymbol();synchronized (m_contractRequests) {      m_contractRequests.remove(id);    }  }  if (m_historyDataRequests.containsKey(id)) {    symbol=m_historyDataRequests.get(id).getContract().getSymbol();synchronized (m_historyDataRequests) {      m_historyDataRequests.remove(id);      m_historyDataRequests.notify();    }  }  if (m_realTimeBarsRequests.containsKey(id)) {    symbol=m_realTimeBarsRequests.get(id).getSymbol();  }  String errorMsg="Req/Order Id: " + id + " Code: "+ code+ " symbol: "+ symbol+ " Msg: "+ msg;  if (((code > 1999) && (code < 3000)) || ((code >= 200) && (code < 299)) || (code == 366)|| (code == 162)|| (code == 321)|| (code == 3170)) {    if (((code > 1999) && (code < 3000))) {      _log.info(errorMsg);      brokerModelException=new BrokerModelException(3,code,errorMsg);    } else     if (code == 202 || code == 201 || code == 3170) {      _log.warn(errorMsg);      brokerModelException=new BrokerModelException(2,code,errorMsg);    } else     if (code == 321) {      _log.info(errorMsg);      return;    } else {      _log.warn(errorMsg);      brokerModelException=new BrokerModelException(2,code,errorMsg);    }  } else {    if (m_realTimeBarsRequests.containsKey(id)) {synchronized (m_realTimeBarsRequests) {        m_realTimeBarsRequests.remove(id);      }    }    _log.error(errorMsg);    brokerModelException=new BrokerModelException(1,code,errorMsg);  }  this.fireBrokerError(brokerModelException);}  }
class C{  public String toStringOf(String elementName,Object element){  try {    StringWriter writer=new StringWriter();    XmlSerializer serializer=Xml.createSerializer();    serializer.setOutput(writer);    serialize(serializer,elementName,element,false);    return writer.toString();  } catch (  IOException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private String serialize(Entry[] solution){  char[] puzzle=new char[50];  Shape shape;  int row;  int col;  for (  Entry entry : solution) {    shape=entry.shape;    row=entry.row;    col=entry.col;    for (    int[] xy : shape.vector)     puzzle[5 * (row + xy[0]) + (col + xy[1]) / 2]=shape.symbol;  }  return new String(puzzle);}  }
class C{  public CDebuggerSelectionPanelSynchronizer(final CDebuggerComboBox debuggerBox,final CDebugPerspectiveModel debugPerspectiveModel){  m_debuggerBox=Preconditions.checkNotNull(debuggerBox,"IE01366: Debugger box can not be null");  m_debugPerspectiveModel=Preconditions.checkNotNull(debugPerspectiveModel,"IE01367: Debug perspective model can not be null");  m_debuggerBox.addItemListener(m_internalItemListener);  if (m_debuggerBox.getItemCount() != 0) {    final IDebugger debugger=m_debuggerBox.getSelectedItem().getObject();    final TargetProcessThread activeThread=debugger == null ? null : debugger.getProcessManager().getActiveThread();    m_debugPerspectiveModel.setActiveDebugger(debugger);    if (debugger != null) {      debugger.getProcessManager().setActiveThread(activeThread);    }  }}  }
class C{  public synchronized void addInclude(String path){  if (includes == null)   includes=new ArrayList<String>();  includes.add(path);  resolvedInclusions=null;}  }
class C{  public void testAuthenticateSpringSunDirectoryServerCorrect(){  LdapManager mgr=getLdapSunDirectoryServer();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho");  authenticationInfo.setUserCredentials("archivo_2007");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {  }  assertEquals("86b5a982-aa2011dc-802cebc5-dcc21b8e",ret);}  }
class C{  private static String resovlePropConfigFile(String prop){  if (prop != null && prop.startsWith("file://")) {    try {      String filePath=prop.substring(7);      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filePath),"UTF-8"));      StringBuffer sb=new StringBuffer();      String str=br.readLine();      while (str != null) {        sb.append(str);        str=br.readLine();      }      return sb.toString();    } catch (    IOException e) {      System.err.println("read classpath failed!");      throw new RuntimeException(" read classpath failed ",e);    }  }  return prop;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ERROR_CODE;case 2:  return MESSAGE;default :return null;}}  }
class C{  public SQLTimeoutException(Throwable cause){  super(cause);}  }
class C{  public void testServPrepStmtSetObjectAndNewUnsupportedTypes() throws Exception {  Connection testConn=getConnectionWithProps("useServerPrepStmts=true");  checkUnsupportedTypesBehavior(testConn.prepareStatement("SELECT ?"));  testConn.close();}  }
class C{  @Deprecated public HibernateTransaction(Session session){  this.session=session;  this.isScrollEnabled=true;  this.scrollMode=ScrollMode.FORWARD_ONLY;}  }
class C{  private URL eezeHelp(){  return this.getClass().getClassLoader().getResource("eeze/eeze_help.html");}  }
class C{  public void refresh(boolean fetch){  if (loading) {    MuninFoo.logW("Fragment_Alerts.refresh(" + fetch + ")","Alerts is currently loading, return");    return;  }  loading=true;  if (fetch && !Util.isOnline(context)) {    Toast.makeText(context,getString(R.string.text30),Toast.LENGTH_LONG).show();    loading=false;    return;  }  adapter.setAllGray();  int nbNodes=muninFoo.getNodes().size();  if (fetch) {    activity.setLoading(true);    activity.setLoadingProgress(0);    everythingsOk.setVisibility(View.GONE);    currentLoadingProgress=0;    for (int i=0; i < nbNodes; i++) {      if (i % NODES_BY_THREAD == 0) {        int to=i + 2;        if (to >= nbNodes)         to=nbNodes - 1;        AlertsScanner scanner=new AlertsScanner(i,to,this);        scanner.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);      }    }    muninFoo.alerts_lastUpdated=Calendar.getInstance();  } else {    adapter.updateViews();    loading=false;  }}  }
class C{  public static boolean verifyNoBacklog(){  if (list.isEmpty()) {    return true;  }  while (!list.isEmpty()) {    LoggingEvent evt=list.remove(0);    instance().superappend(evt);  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public float rating(){  return mRating;}  }
class C{  private void encodeCut(final DiffPart part) throws EncodingException {  data.writeBit(1);  data.writeBit(0);  data.writeBit(1);  data.writeValue(codecData.getBlocksizeS(),part.getStart());  data.writeValue(codecData.getBlocksizeE(),part.getLength());  data.writeValue(codecData.getBlocksizeB(),Integer.parseInt(part.getText()));  data.writeFillBits();}  }
class C{  public void putLong(String key,long value){  unparcel();  mMap.put(key,value);}  }
class C{  protected final void writeStartTag(String tagname,List<Tuple<String,String>> attributes) throws UncheckedIOException {  this.writeStartTag(tagname,attributes,false);}  }
class C{  private void initialize(Coordinate p0,Coordinate p1,double distance){  pt[0].setCoordinate(p0);  pt[1].setCoordinate(p1);  this.distance=distance;  isNull=false;}  }
class C{  public IdentityHashMap(Map t){  this(Math.max(2 * t.size(),11),0.75f);  putAll(t);}  }
class C{  public static MediaType parse(String input){  checkNotNull(input);  Tokenizer tokenizer=new Tokenizer(input);  try {    String type=tokenizer.consumeToken(TOKEN_MATCHER);    tokenizer.consumeCharacter('/');    String subtype=tokenizer.consumeToken(TOKEN_MATCHER);    ImmutableListMultimap.Builder<String,String> parameters=ImmutableListMultimap.builder();    while (tokenizer.hasMore()) {      tokenizer.consumeCharacter(';');      tokenizer.consumeTokenIfPresent(LINEAR_WHITE_SPACE);      String attribute=tokenizer.consumeToken(TOKEN_MATCHER);      tokenizer.consumeCharacter('=');      final String value;      if ('"' == tokenizer.previewChar()) {        tokenizer.consumeCharacter('"');        StringBuilder valueBuilder=new StringBuilder();        while ('"' != tokenizer.previewChar()) {          if ('\\' == tokenizer.previewChar()) {            tokenizer.consumeCharacter('\\');            valueBuilder.append(tokenizer.consumeCharacter(ascii()));          } else {            valueBuilder.append(tokenizer.consumeToken(QUOTED_TEXT_MATCHER));          }        }        value=valueBuilder.toString();        tokenizer.consumeCharacter('"');      } else {        value=tokenizer.consumeToken(TOKEN_MATCHER);      }      parameters.put(attribute,value);    }    return create(type,subtype,parameters.build());  } catch (  IllegalStateException e) {    throw new IllegalArgumentException("Could not parse '" + input + "'",e);  }}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  String name=e.getPropertyName();  Object value=e.getNewValue();  log.config(name + "=" + value);  if (value == null)   return;  if (name.equals("AD_Org_ID")) {    if (value == null)     m_AD_Org_ID=0; else     m_AD_Org_ID=((Integer)value).intValue();    loadBPartner();  } else   if (name.equals("C_Charge_ID")) {    if (value == null) {      m_C_Charge_ID=0;    } else {      m_C_Charge_ID=((Integer)value).intValue();    }    setAllocateButton();  }  if (name.equals("C_BPartner_ID")) {    bpartnerSearch.setValue(value);    m_C_BPartner_ID=((Integer)value).intValue();    loadBPartner();  } else   if (name.equals("C_Currency_ID")) {    m_C_Currency_ID=((Integer)value).intValue();    loadBPartner();  } else   if (name.equals("Date") && multiCurrency.isSelected())   loadBPartner();}  }
class C{  public HttpWaitStrategy forStatusCode(int statusCode){  this.statusCode=statusCode;  return this;}  }
class C{  public boolean isCrosshairVisible(){  return (crosshairVisible);}  }
class C{  public boolean containSoundID(int soundID){  return musicMap.containsValue(soundID);}  }
class C{  public void prepareSession(String remoteAddress,int remotePort,RtpInputStream rtpStream) throws NetworkException {  try {    inputStream=new DummyPacketSourceStream();    inputStream.open();    if (logger.isActivated()) {      logger.debug("Input stream: " + inputStream.getClass().getName());    }    outputStream=new RtpOutputStream(remoteAddress,remotePort,rtpStream);    outputStream.open();    if (logger.isActivated()) {      logger.debug("Output stream: " + outputStream.getClass().getName());    }    processor=new Processor(inputStream,outputStream,new Codec[0]);    if (logger.isActivated()) {      logger.debug("Session has been prepared with success");    }  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Can't prepare resources correctly for remoteAddress : ").append(remoteAddress).append(" with remotePort : ").append(remotePort).append("!").toString(),e);  }}  }
class C{  private static boolean isWindowResizeable(Window window){  return (window instanceof Frame && ((Frame)window).isResizable()) || (window instanceof Dialog && ((Dialog)window).isResizable());}  }
class C{  public WriteException(WriteRequest request,String s){  super(s);  this.requests=asRequestList(request);}  }
class C{  public static void logStderr(String msg){  try {    long now=CurrentTime.currentTime();    _origSystemErr.println(msg);  } catch (  Throwable e1) {  }}  }
class C{  public boolean isUsableWith(Cert cert){  int keySize=cert.getKeySize();  return keySize >= minAsymmetricKeyLength && keySize <= maxAsymmetricKeyLength;}  }
class C{  public void testImageLink(){  LOGGER.debug("buildTextFromElement of Image link");  Document document=Jsoup.parse("<a href=\"\">   <img alt=\" Image Alt \" src=\"\"/>  </a>");  Element el=document.select("a").first();  LinkTextElementBuilder instance=new LinkTextElementBuilder();  String expResult="Image Alt";  String result=instance.buildTextFromElement(el);  assertEquals(expResult,result);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturenull.class,args);}  }
class C{  public void testNumericRepresentations() throws JSONException {  JSONStringer stringer=new JSONStringer();  stringer.array();  stringer.value(Long.MAX_VALUE);  stringer.value(Double.MIN_VALUE);  stringer.endArray();  assertEquals("[9223372036854775807,4.9E-324]",stringer.toString());}  }
class C{  public boolean rpVPlexReinstateSourceVirtualVolumeStep(List<VolumeDescriptor> rpSourceDescriptors,String token) throws InternalException {  try {    WorkflowStepCompleter.stepExecuting(token);    for (    VolumeDescriptor volumeDescriptor : rpSourceDescriptors) {      Volume srcVolume=_dbClient.queryObject(Volume.class,volumeDescriptor.getVolumeURI());      if (srcVolume != null && srcVolume.getAssociatedVolumes() != null && srcVolume.getAssociatedVolumes().size() >= 2) {        Volume volWithOriginalAssets=findRPVPlexVolumeWithOrginalAssets(srcVolume.getAssociatedVolumes());        if (volWithOriginalAssets != null) {          _log.info(String.format("Request was for using HA side of RP VPLEX Source to protect. So we need to update the " + "Virtual Volume [%s] with the original requested assets " + "(original Virtual Pool [%s] and Virtual Array [%s])",srcVolume.getLabel(),volWithOriginalAssets.getVirtualPool(),volWithOriginalAssets.getVirtualArray()));          srcVolume.setVirtualArray(volWithOriginalAssets.getVirtualArray());          srcVolume.setVirtualPool(volWithOriginalAssets.getVirtualPool());          _dbClient.updateObject(srcVolume);        }      }    }    WorkflowStepCompleter.stepSucceded(token);    _log.info(METHOD_RP_VPLEX_REINSTATE_SRC_VVOL_STEP + " is complete.");  } catch (  Exception e) {    stepFailed(token,e,METHOD_RP_VPLEX_REINSTATE_SRC_VVOL_STEP);    return false;  }  return true;}  }
class C{  public Block optimize(Block js,MessageQueue mq){  finishInference();  while (true) {    Result out=new Result();    Scope s=Scope.fromProgram(js,mq);    optimize(s,js,false,false,false,false,out);    Block optimized=ConstLocalOptimization.optimize((Block)out.node);    if (optimized == js) {      return optimized;    }    js=optimized;  }}  }
class C{  public String createLabel(CompletionProposal proposal){  return createStyledLabel(proposal).getString();}  }
class C{  protected Object delegateToObjectState(String attributeName) throws Throwable {  Object returnObj;  try {    FederationComponent fedComp=(FederationComponent)monitoringRegion.get(objectName.toString());    returnObj=fedComp.getValue(attributeName);  } catch (  IllegalArgumentException e) {    throw new MBeanException(e);  }catch (  Exception e) {    throw new MBeanException(e);  }catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable th) {    SystemFailure.checkFailure();    throw new MBeanException(new Exception(th.getLocalizedMessage()));  }  return returnObj;}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public void failoverCGCopy(FunctionalAPIImpl impl,ConsistencyGroupCopyUID cgCopyUID) throws RecoverPointException {  String cgName=null;  String cgCopyName=null;  try {    cgCopyName=impl.getGroupCopyName(cgCopyUID);    cgName=impl.getGroupName(cgCopyUID.getGroupUID());    logger.info("Failover the image to copy name: " + cgCopyName + " for CG Name: "+ cgName);    impl.failover(cgCopyUID,true);    logger.info("Successful failover to copy name: " + cgCopyName + " for CG Name: "+ cgName);  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToFailoverCopy(cgCopyName,cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToFailoverCopy(cgCopyName,cgName,e);  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.397 -0500",hash_original_method="C6D6B3579ACFAA2466286D67BFFE3003",hash_generated_method="3EA9DA78911A0C5DA2BC654CEF310065") public void sendMessage(byte message[],InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {  if (message == null || receiverAddress == null)   throw new IllegalArgumentException("Null argument");  Socket sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),receiverAddress,receiverPort,"TLS",message,retry,this);  if (sock != mySock && sock != null) {    try {      if (mySock != null)       mySock.close();    } catch (    IOException ex) {    }    mySock=sock;    this.myClientInputStream=mySock.getInputStream();    Thread mythread=new Thread(this);    mythread.setDaemon(true);    mythread.setName("TLSMessageChannelThread");    mythread.start();  }}  }
class C{  public void moveSheep(Sheep sheep){  int x=Rand.randUniform(SHEEP_PEN_X,SHEEP_PEN_X + SHEEP_PEN_WIDTH - 1);  int y=Rand.randUniform(SHEEP_PEN_Y,SHEEP_PEN_Y + SHEEP_PEN_HEIGHT - 1);  StendhalRPZone zone=sheep.getZone();  List<Sheep> oldSheep=sheepInPen(zone);  killWolves(zone);  if (oldSheep.size() >= MAX_SHEEP_IN_PEN) {    zone.remove(oldSheep.get(0));  }  if (!StendhalRPAction.placeat(zone,sheep,x,y)) {    sheep.getZone().remove(sheep);  }}  }
class C{  private void unreadToken(){  _index=_lastIndexStart;  _peek=_lastToken;}  }
class C{  private CWindowTitle(){}  }
class C{  public NewCookie(Cookie cookie,String comment,int maxAge,boolean secure){  this(cookie,comment,maxAge,secure,false);}  }
class C{  public void addOutpoint(Outpoint outpoint){  add(outpoint.toWire());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:24:54.451 -0400",hash_original_method="D583F34426D06300D408364E03C0042E",hash_generated_method="218FD4CC6F97D8074ED8850635651530") public static boolean startFilteringMulticastV6Packets(){  double taintDouble=0;  return ((taintDouble) == 1);}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method,false);}  }
class C{  public JavaFXFormFactory(){}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public CronThreadPoolExecutor(int corePoolSize){  super(corePoolSize);  this.cronJobWatchDogs=new ArrayList<>();  this.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);}  }
class C{  void onEntryAdded(ProjectComparisonEntry addedEntry){  objToEntry.put(addedEntry.getProjectOrElementApi(),addedEntry);  final int len=addedEntry.getImplCount();  for (int idx=0; idx < len; idx++)   objToEntry.put(addedEntry.getProjectOrElementImpl(idx),addedEntry);}  }
class C{  @Override public void terminateSession(String sessionid) throws org.apache.thrift.TException {  if (!msgQueues.containsKey(sessionid)) {    return;  }  SessionQueue pQueue=msgQueues.get(sessionid);  log.debug("terminateSession: SessionId: " + sessionid + "\n");  String data="FilterTimeout";  ByteBuffer bb=ByteBuffer.wrap(data.getBytes());  BlockingQueue<ByteBuffer> queue=pQueue.getQueue();  if (queue != null) {    if (!queue.offer(bb)) {      log.error("Failed to queue message for session: " + sessionid);    }    msgQueues.remove(sessionid);  } else {    log.error("queue for session {} is null",sessionid);  }}  }
class C{  public FindBugsViewerTask(){}  }
class C{  public VcfEvalParamsBuilder bedRegionsFile(File bedFile){  mBedRegionsFile=bedFile;  return this;}  }
class C{  public String globalInfo(){  return "Save trained models to serialized object files.";}  }
class C{  public boolean hasControlScript(){  return hasExtension(GwoControlScript.class);}  }
class C{  public final void testRemoveHelperTextColorId(){  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperTextColorId(android.R.color.black);  passwordEditText.addHelperTextColorId(android.R.color.darker_gray);  passwordEditText.removeHelperTextColorId(android.R.color.black);  passwordEditText.removeHelperTextColorId(android.R.color.black);  assertEquals(1,passwordEditText.getHelperTextColors().size());  assertEquals(getContext().getResources().getColor(android.R.color.darker_gray),(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  private static synchronized TeamInfo addLiveTeam(){  String teamName=randomElement(COLORS) + randomElement(ANIMALS);  String robot=null;  if (random.nextInt(ROBOT_PROBABILITY) == 0) {    robot="Robot-" + random.nextInt(NUM_ROBOTS);  }  long currTime=System.currentTimeMillis();  TeamInfo newTeam=new TeamInfo(teamName,System.currentTimeMillis(),robot);  liveTeams.add(newTeam);  System.out.println("[+" + newTeam + "]");  return newTeam;}  }
class C{  @SafeVarargs public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11,E e12,E... others){  Object[] array=new Object[12 + others.length];  array[0]=e1;  array[1]=e2;  array[2]=e3;  array[3]=e4;  array[4]=e5;  array[5]=e6;  array[6]=e7;  array[7]=e8;  array[8]=e9;  array[9]=e10;  array[10]=e11;  array[11]=e12;  System.arraycopy(others,0,array,12,others.length);  return construct(array);}  }
class C{  public AsicContainer(String message,SignatureData signature) throws Exception {  this(message,signature,null);}  }
class C{  public Vector(int d){  this.d=d;  data=new double[d];}  }
class C{  public void validate(final TTransaction transaction){  this.extensions.stream().filter(null).forEach(null);}  }
class C{  void remove(final String id,final boolean removePersistentAlso){  for (Iterator i=myStack.iterator(); i.hasNext(); ) {    if (id.equals(i.next())) {      i.remove();    }  }  if (removePersistentAlso) {    for (Iterator i=myPersistentStack.iterator(); i.hasNext(); ) {      if (id.equals(i.next())) {        i.remove();      }    }  }}  }
class C{  public void testTimestampWatch() throws Exception {  WatchManager<ReplDBMSHeader> em=new WatchManager<ReplDBMSHeader>();  long currentTimeMillis=System.currentTimeMillis();  Watch<ReplDBMSHeader> w=em.watch(new SourceTimestampWatchPredicate(new Timestamp(currentTimeMillis + 1)),1);  DBMSEvent dbmsEvent1=new DBMSEvent("1",null,null,new Timestamp(currentTimeMillis));  ReplDBMSEvent replEvent1=new ReplDBMSEvent(1,(short)0,true,"source",0,new Timestamp(currentTimeMillis),dbmsEvent1);  em.process(replEvent1,0);  assertFalse("Should not be done",w.isDone());  DBMSEvent dbmsEvent2=new DBMSEvent("1",null,null,new Timestamp(currentTimeMillis + 1));  ReplDBMSEvent event2=new ReplDBMSEvent(1,(short)0,true,"source",0,new Timestamp(currentTimeMillis + 1),dbmsEvent2);  em.process(event2,0);  assertTrue("Should be done",w.isDone());  assertEquals("Should return event",event2,w.get(1,TimeUnit.SECONDS));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.834 -0500",hash_original_method="A15B72AB03BE363B2B31FA8E7C1F64A3",hash_generated_method="BC24E837C6B5DC7579AF418877B8F41A") public void readBitString() throws IOException {  if (tag == ASN1Constants.TAG_BITSTRING) {    if (length == 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong length. Tag at [" + tagOffset + "]");    }    readContent();    if (buffer[contentOffset] > 7) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. A number of unused bits MUST be in range 0 to 7");    }    if (length == 1 && buffer[contentOffset] != 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. For empty string unused bits MUST be 0");    }  } else   if (tag == ASN1Constants.TAG_C_BITSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 bitstring  type is not provided");  } else {    throw expected("bitstring");  }}  }
class C{  public AttachmentEntry uploadAttachment(String filename,BasePageEntry<?> parentPage) throws IOException, ServiceException {  File file=new File(filename);  return uploadAttachment(file,parentPage.getSelfLink().getHref(),file.getName(),"");}  }
class C{  public SubsetSelectorPanel(Collection<E> pool,Collection<E> subset,String poolTitle,String subsetTitle){  this.pool=pool;  this.subset=subset;  this.poolTitle=poolTitle;  this.subsetTitle=subsetTitle;  this.buildInterface();}  }
class C{  private void loadAuthenticationErrorActivity(){  Preference.putString(context,Constants.PreferenceFlag.IP,null);  Intent intent=new Intent(RegistrationActivity.this,ServerDetails.class);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),RegistrationActivity.class.getSimpleName());  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);  finish();}  }
class C{  @LargeTest public void testStressAudioTrackOnly() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String AudioItemFileName1=INPUT_FILE_PATH + "AACLC_44.1kHz_256kbps_s_1_17.mp4";  final String[] loggingInfo=new String[1];  int i=0;  writeTestCaseHeader("testStressAudioTrackOnly");  getBeginMemory();  for (i=0; i < 50; i++) {    final AudioTrack mediaItem1=new AudioTrack(mVideoEditor,"m1" + i,AudioItemFileName1);    mVideoEditor.addAudioTrack(mediaItem1);    mediaItem1.enableLoop();    mVideoEditor.removeAudioTrack("m1" + i);    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  Attr attribute;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  element=(Element)elementList.item(0);  attribute=element.getAttributeNode("xmlns");{    boolean success=false;    try {      attribute.setPrefix("xml");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  protected void commitChange(){  pendingCommit=false;  previousText=null;  pressCount=0;}  }
class C{  public static void equalsTest(final Object[] array){  for (int i=0; i < array.length; i++) {    final Object objectI=array[i];    if (objectI instanceof IntegralAbstract) {      try {        ((IntegralAbstract)objectI).integrity();      } catch (      final ExamException e) {        throw new RuntimeException("i=" + i + " "+ objectI.toString(),e);      }    }  }  for (int i=0; i < array.length; i++) {    final Object objectI=array[i];    Assert.assertEquals(objectI,objectI);    Assert.assertFalse(objectI.equals(null));    for (int j=0; j < i; j++) {      Assert.assertTrue(!array[j].equals(objectI));    }    for (int j=i + 1; j < array.length; j++) {      Assert.assertTrue(i + ":" + objectI+ " == "+ j+ ":"+ array[j],!array[j].equals(objectI));    }  }}  }
class C{  public BoxRenderer(String url,String baseurl,int width){  this(url,baseurl,width,NO_HEIGHT);}  }
class C{  public ExtendedType(int nodetype,String namespace,String localName,int hash){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=hash;}  }
class C{  public Issue2682Bean(){  chkStatus=false;}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double powerValue=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      powerValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (powerValue < 0.1) {      powerValue=0.1;    }    if (powerValue > 20) {      powerValue=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=(Math.pow(area[col],powerValue)) * (Math.tan(Math.toRadians(slope[col])));          } else {            z=0;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final float[] cmykToRGB(float c,float m,float y,float k,float[] rgb){  rgb[0]=1.0f - MathUtils.min(1.0f,c + k);  rgb[1]=1.0f - MathUtils.min(1.0f,m + k);  rgb[2]=1.0f - MathUtils.min(1.0f,y + k);  return rgb;}  }
class C{  public void testTokenizerFactoryArguments() throws Exception {  final String clazz=PatternTokenizerFactory.class.getName();  TokenFilterFactory factory=null;  factory=tokenFilterFactory("Synonym","synonyms","synonyms.txt","tokenizerFactory",clazz,"pattern","(.*)","group","0");  assertNotNull(factory);  factory=tokenFilterFactory("Synonym","synonyms","synonyms.txt","tokenizerFactory",clazz,"tokenizerFactory.pattern","(.*)","tokenizerFactory.group","0");  assertNotNull(factory);  expectThrows(Exception.class,null);  expectThrows(Exception.class,null);}  }
class C{  public static QueryTask.QuerySpecification buildChildServiceQuerySpec(final String selfLink,final Class childClass){  return buildChildServiceQuerySpec(selfLink,childClass,new QueryTask.Query[0]);}  }
class C{  public static void registerDisposableBlock(String oreDictName){  disposableBlocks.add(oreDictName);}  }
class C{  public SRaster(short x1,short y1,short width,short height,byte[] pixels,short colorsTotal,CTEntry[] ct,short transparent,short x_hot,short y_hot){  super(GraphicType.GT_Raster,RenderType.RT_XY,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint(x1,y1);  ll1_=new LLPoint(0f,0f);  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  pixels_=pixels;  makeMatch(colorsTotal,ct);  transparent_=transparent;}  }
class C{  @Override public void windowClosing(WindowEvent e){  if (!InstanceManager.getDefault(ShutDownManager.class).isShuttingDown() && JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,Bundle.getMessage("MessageLongCloseWarning"),Bundle.getMessage("MessageShortCloseWarning"),JOptionPane.YES_NO_OPTION)) {    handleQuit();  }}  }
class C{  private void validateEventInRuntime(String sourceStream,SortedMap data){  if (!needValidation)   return;  SortedMap<String,AlertStreamSchemaEntity> map=StreamMetadataManager.getInstance().getMetadataEntityMapForStream(sourceStream);  if (!map.keySet().equals(data.keySet()))   throw new IllegalStateException("incoming data schema is different from supported data schema, incoming data: " + data.keySet() + ", schema: "+ map.keySet());}  }
class C{  public static double[][] invertSymmPosDefMatrix(double[][] A) throws Exception {  double[][] L=CholeskyDecomposition(A);  return solveViaCholeskyResult(L,identityMatrix(A.length));}  }
class C{  public OpenMapFrame(){  this("");}  }
class C{  public DistributedRegionFunctionResultSender(DM dm,DistributedRegionFunctionStreamingMessage msg,Function function){  this.msg=msg;  this.dm=dm;  this.functionObject=function;}  }
class C{  public void chain(){  currentState=0;  if (loggers != null) {    for (    Logger logger : loggers) {      logger.startLogging();    }  }  timer.start();  mc.reset();  timer.start();  mc.addMarkovChainListener(chainListener);  mc.runChain(getChainLength(),true);  mc.removeMarkovChainListener(chainListener);  timer.stop();}  }
class C{  public boolean rejectCallTransfer(){  return super.isActive() ? mSession.rejectTransfer() : false;}  }
class C{  private EventNode read() throws Exception {  Node node=queue.peek();  if (node == null) {    return end();  }  return read(node);}  }
class C{  public void inc(Counter<KeyType> another){  for (  Entry<KeyType,Long> e : another.hash.entrySet()) {    inc(e.getKey(),e.getValue());  }}  }
class C{  public void register(Model model){  int index=model.getIndex();  int size=size();  for (int i=0; i < index; i++) {    if (i >= size) {      add(null);    }    if (i == index - 1) {      set(index - 1,model);    }  }}  }
class C{  public double entropyConditionalSecond(){  return (entropyJoint() - entropyFirst());}  }
class C{  private static void drawWidgetBackgroundToCanvas(Context context,Canvas canvas,int iconDensity,String url,int color){  Rect iconBounds=new Rect(0,0,canvas.getWidth(),canvas.getHeight());  Bitmap bookmarkWidgetBg=getBitmapFromResourceId(context,R.mipmap.bookmark_widget_bg,iconDensity);  Paint paint=new Paint(Paint.FILTER_BITMAP_FLAG);  canvas.drawBitmap(bookmarkWidgetBg,null,iconBounds,paint);  float density=(float)iconDensity / DisplayMetrics.DENSITY_MEDIUM;  int iconSize=(int)(GENERATED_ICON_SIZE_DP * density);  int iconRoundedEdge=(int)(GENERATED_ICON_ROUNDED_CORNERS_DP * density);  int iconFontSize=(int)(GENERATED_ICON_FONT_SIZE_DP * density);  RoundedIconGenerator generator=new RoundedIconGenerator(iconSize,iconSize,iconRoundedEdge,color,iconFontSize);  Bitmap icon=generator.generateIconForUrl(url);  if (icon == null)   return;  canvas.drawBitmap(icon,iconBounds.exactCenterX() - icon.getWidth() / 2.0f,iconBounds.exactCenterY() - icon.getHeight() / 2.0f,null);}  }
class C{  public void updateStarted(UpdateManagerEvent e){}  }
class C{  public void handleMessageEvent(StunMessageEvent e){  delegate.handleMessageEvent(e);}  }
class C{  @SuppressWarnings("unchecked") public static <S extends NativeObject>S toObject(Class<S> type,long handle){  try {    Method toObject=findMarshaler(type);    return (S)toObject.invoke(null,type,handle,MarshalerFlags.CALL_TYPE_PTR);  } catch (  InvocationTargetException e) {    throw new Error(e);  }catch (  IllegalAccessException e) {    throw new Error(e);  }}  }
class C{  public boolean loadPath(Block block,Element element) throws jmri.configurexml.JmriConfigureXmlException {  int toDir=0;  int fromDir=0;  try {    toDir=element.getAttribute("todir").getIntValue();    fromDir=element.getAttribute("fromdir").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("Could not parse path attribute");  }catch (  NullPointerException e) {    creationErrorEncountered("Block Path entry in file missing required attribute",block.getSystemName(),block.getUserName(),null);  }  Block toBlock=null;  if (element.getAttribute("block") != null) {    String name=element.getAttribute("block").getValue();    toBlock=InstanceManager.getDefault(jmri.BlockManager.class).getBlock(name);  }  Path path=new Path(toBlock,toDir,fromDir);  List<Element> settings=element.getChildren("beansetting");  for (int i=0; i < settings.size(); i++) {    Element setting=settings.get(i);    loadBeanSetting(path,setting);  }  if (!block.hasPath(path)) {    block.addPath(path);    return true;  } else {    log.debug("Skipping load of duplicate path {}",path);    return false;  }}  }
class C{  public static Writer writer(String uri) throws IOException {  return utf8(outputStream(uri));}  }
class C{  public static void boot(Service service,InstanceListener instanceListener,Thread.UncaughtExceptionHandler uncaughtExceptionHandler,String... args) throws LoadingException {  Objects.requireNonNull(uncaughtExceptionHandler);  Thread.currentThread().setUncaughtExceptionHandler(uncaughtExceptionHandler);  LOG.debug("Trying to create instance of service {} with args {}",service.getServiceName(),args);  try (Service.Instance instance=service.start(args)){    final RequestHandler requestHandler=HttpServiceModule.requestHandler(instance);    HttpServerModule.server(instance).start(requestHandler);    final String serviceName=service.getServiceName();    final MetaDescriptor metaDescriptor=instance.resolve(MetaDescriptor.class);    final ApolloConfig config=instance.resolve(ApolloConfig.class);    LOG.info("Started {} {} (apollo {}) with backend domain '{}'",serviceName,metaDescriptor.descriptor().version(),metaDescriptor.apolloVersion(),config.backend());    if (instanceListener != null) {      instanceListener.instanceCreated(instance);    }    instance.waitForShutdown();    LOG.info("Starting shutdown of {} ...",serviceName);  } catch (  IOException e) {    throw failure(e,"Failed to start service");  }catch (  InterruptedException e) {    throw failure(e,"Service interrupted");  }catch (  Exception e) {    throw failure(e,"Something went wrong");  }  LOG.info("Shutdown of {} complete",service.getServiceName());}  }
class C{  public Account findAccountByNumber(String accountNumber) throws PersistentModelException {  return m_accountHome.findByAccountNumber(accountNumber);}  }
class C{  public Element removeElement(QName id){  throwExceptionIfLocked();  if (state.elements != null) {    state.elements.remove(id);  }  return this;}  }
class C{  public void removeSynapseGroup(SynapseGroup synapseGroup){  numMembers-=synapseGroup.size();  synapseGroupList.remove(synapseGroup);  getParentNetwork().fireGroupRemoved(synapseGroup);}  }
class C{  private static void nextMatch(String text,ReplaceState state){  for (int i=0; i < state.numReplacements(); i++) {    if (state.noMoreMatches[i] || state.key(i) == null || state.key(i).length() == 0 || state.value(i) == null) {      continue;    }    state.tempIndex=text.indexOf(state.key(i).toString(),state.start);    if (state.tempIndex == -1) {      state.noMoreMatches[i]=true;    } else {      if (state.textIndex == -1 || state.tempIndex < state.textIndex) {        state.textIndex=state.tempIndex;        state.replaceIndex=i;      }    }  }}  }
class C{  @Override protected void updateFromInput(){  super.updateFromInput();  captureContextButton.setSelection(false);  startInvocationButton.setSelection(false);  minDurationText.setEnabled(false);  minDurationText.setText("");  contextCaptures.clear();  if (null != assignment) {    if (CollectionUtils.isNotEmpty(assignment.getContextCaptures())) {      captureContextButton.setSelection(true);      captureContextTableViewer.getTable().setEnabled(isCanEdit());      addCaptureButton.setEnabled(isCanEdit());      removeCaptureButton.setEnabled(isCanEdit());      contextCaptures.addAll(assignment.getContextCaptures());    } else {      captureContextButton.setSelection(false);      captureContextTableViewer.getTable().setEnabled(false);      addCaptureButton.setEnabled(false);      removeCaptureButton.setEnabled(false);    }    if (assignment.isStartsInvocation()) {      startInvocationButton.setSelection(true);      minDurationText.setEnabled(isCanEdit());      if (0 != assignment.getMinInvocationDuration()) {        minDurationText.setText(String.valueOf(assignment.getMinInvocationDuration()));      }    }  }  captureContextTableViewer.refresh();}  }
class C{  public E peek(){  return this.elements.get(this.elements.size() - 1);}  }
class C{  public static Sphere createBoundingSphere(Iterable<? extends Extent> extents){  if (extents == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 center=null;  double radius=0;  int count=0;  for (  Extent e : extents) {    if (e == null)     continue;    center=(center != null) ? e.getCenter().add3(center) : e.getCenter();    count++;  }  if (center == null)   return null;  center=center.divide3(count);  for (  Extent e : extents) {    if (e == null)     continue;    double distance=e.getCenter().distanceTo3(center) + e.getRadius();    if (radius < distance)     radius=distance;  }  return new Sphere(center,radius);}  }
class C{  @Override public void draw(final Graphics g,final int destx,final int desty,final int x,final int y,final int w,final int h){  g.drawImage(image,destx,desty,destx + w,desty + h,x,y,x + w,y + h,null);}  }
class C{  @OnMessage public void onMessage(String message,Session session){  callInternal("onMessage",session,message);}  }
class C{  private void addIndexedMetatags(Map<CharSequence,ByteBuffer> metadata,String metatag,String value){  String lcMetatag=metatag.toLowerCase(Locale.ROOT);  if (metatagset.contains("*") || metatagset.contains(lcMetatag)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Found meta tag: " + lcMetatag + "\t"+ value);    }    metadata.put(new Utf8(PARSE_META_PREFIX + lcMetatag),ByteBuffer.wrap(value.getBytes()));  }}  }
class C{  public void incrementAll(final Collection<? extends E> collection,final double count){  for (  final E key : collection) {    incrementCount(key,count);  }  dirty=true;}  }
class C{  public void write(ExceptionlessOutputStream out){  out.writeInt(size);  for (int i=0; i < size; ++i)   out.writeDouble(vector[i]);}  }
class C{  public static void assertEquals(final int[] a,final int[] b){  if (Arrays.equals(a,b)) {    return;  }  final String msg="Expected: " + Arrays.toString(a) + " Actual:"+ Arrays.toString(b);  Assert.fail(msg);}  }
class C{  public static SystemProxySettings create(){  final SystemProxySettings proxySettings=new SystemProxySettings();  proxySettings.httpUser=System.getProperty("http.proxyUser");  proxySettings.httpPassword=System.getProperty("http.proxyPassword");  proxySettings.httpHost=System.getProperty("http.proxyHost");  proxySettings.httpPort=System.getProperty("http.proxyPort");  proxySettings.httpNonProxyHosts=System.getProperty("http.nonProxyHosts");  proxySettings.httpsUser=System.getProperty("https.proxyUser");  proxySettings.httpsPassword=System.getProperty("https.proxyPassword");  proxySettings.httpsHost=System.getProperty("https.proxyHost");  proxySettings.httpsPort=System.getProperty("https.proxyPort");  return proxySettings;}  }
class C{  @Override public List<byte[]> read(long startOffset) throws IOException {  List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks=readDictionaryMetadataFile();  CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk=carbonDictionaryColumnMetaChunks.get(carbonDictionaryColumnMetaChunks.size() - 1);  long endOffset=carbonDictionaryColumnMetaChunk.getEnd_offset();  return read(carbonDictionaryColumnMetaChunks,startOffset,endOffset);}  }
class C{  public static IdentifierNode generateResolvedIdentifier(NodeFactory nodeFactory,String namespace,String name){  assert name.intern() == name;  IdentifierNode result=nodeFactory.identifier(name,false);  Namespaces namespaces=new Namespaces();  NamespaceValue namespaceValue=new NamespaceValue();  namespaceValue.name=namespace;  namespaces.add(namespaceValue);  ReferenceValue referenceValue=new ReferenceValue(nodeFactory.getContext(),null,name,namespaces);  referenceValue.setIsAttributeIdentifier(false);  result.ref=referenceValue;  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private ClientUpdateMessageImpl initializeMessage(EnumListenerEvent operation,CacheEvent event) throws Exception {  if (!supportsOperation(operation)) {    throw new Exception(LocalizedStrings.CacheClientNotifier_THE_CACHE_CLIENT_NOTIFIER_DOES_NOT_SUPPORT_OPERATIONS_OF_TYPE_0.toLocalizedString(operation));  }  Object keyOfInterest=null;  final EventID eventIdentifier;  ClientProxyMembershipID membershipID=null;  boolean isNetLoad=false;  Object callbackArgument=null;  byte[] delta=null;  VersionTag versionTag=null;  if (event.getOperation().isEntry()) {    EntryEventImpl entryEvent=(EntryEventImpl)event;    versionTag=entryEvent.getVersionTag();    delta=entryEvent.getDeltaBytes();    callbackArgument=entryEvent.getRawCallbackArgument();    if (entryEvent.isBridgeEvent()) {      membershipID=entryEvent.getContext();    }    keyOfInterest=entryEvent.getKey();    eventIdentifier=entryEvent.getEventId();    isNetLoad=entryEvent.isNetLoad();  } else {    RegionEventImpl regionEvent=(RegionEventImpl)event;    callbackArgument=regionEvent.getRawCallbackArgument();    eventIdentifier=regionEvent.getEventId();    if (event instanceof ClientRegionEventImpl) {      ClientRegionEventImpl bridgeEvent=(ClientRegionEventImpl)event;      membershipID=bridgeEvent.getContext();    }  }  ClientUpdateMessageImpl clientUpdateMsg=new ClientUpdateMessageImpl(operation,(LocalRegion)event.getRegion(),keyOfInterest,null,delta,(byte)0x01,callbackArgument,membershipID,eventIdentifier,versionTag);  if (event.getOperation().isEntry()) {    EntryEventImpl entryEvent=(EntryEventImpl)event;    entryEvent.exportNewValue(clientUpdateMsg);  }  if (isNetLoad) {    clientUpdateMsg.setIsNetLoad(isNetLoad);  }  return clientUpdateMsg;}  }
class C{  private boolean renderFrame(Canvas canvas,int frameNumber,int frameMonotonicNumber){  CloseableReference<Bitmap> bitmapReference=mAnimatedDrawableBackend.getBitmapForFrame(frameNumber);  if (bitmapReference != null) {    canvas.drawBitmap(bitmapReference.get(),0f,0f,mPaint);    if (mLastDrawnFrame != null) {      mLastDrawnFrame.close();    }    if (mIsRunning && frameMonotonicNumber > mLastDrawnFrameMonotonicNumber) {      int droppedFrames=frameMonotonicNumber - mLastDrawnFrameMonotonicNumber - 1;      mAnimatedDrawableDiagnostics.incrementDrawnFrames(1);      mAnimatedDrawableDiagnostics.incrementDroppedFrames(droppedFrames);      if (droppedFrames > 0) {        FLog.v(TAG,"(%s) Dropped %d frames",mLogId,droppedFrames);      }    }    mLastDrawnFrame=bitmapReference;    mLastDrawnFrameNumber=frameNumber;    mLastDrawnFrameMonotonicNumber=frameMonotonicNumber;    FLog.v(TAG,"(%s) Drew frame %d",mLogId,frameNumber);    return true;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  try {    if (Sage.WINDOWS_OS || Sage.MAC_OS_X || Sage.EMBEDDED)     return java.net.InetAddress.getLocalHost().getHostAddress(); else     return LinuxUtils.getIPAddress();  } catch (  Throwable e) {    System.out.println("ERROR:" + e);  }  return "0.0.0.0";}  }
class C{  private View findDirectChild(final View descendant){  View directChild=descendant;  for (ViewParent p=descendant.getParent(); p != this && p != null; p=p.getParent()) {    if (p instanceof View) {      directChild=(View)p;    }  }  return directChild;}  }
class C{  @DSComment("Data serialization/deserialization") @DSSpec(DSCat.SERIALIZATION) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:46.130 -0500",hash_original_method="73F73FE661E634DA2EF3458F6B4B1263",hash_generated_method="3057EF61A5E1D3097A01AB9DA476A12D") @DSVerified("Called from BackupManager") @Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {  mDispatcher.performRestore(data,appVersionCode,newState);}  }
class C{  private void ping(){}  }
class C{  public boolean skipPreamble() throws IOException {  System.arraycopy(boundary,2,boundary,0,boundary.length - 2);  boundaryLength=boundary.length - 2;  try {    discardBodyData();    return readBoundary();  } catch (  FileUploadException e) {    if (e.getErrorCode() == MalformedStreamException) {      return false;    }    throw e;  } finally {    System.arraycopy(boundary,0,boundary,2,boundary.length - 2);    boundaryLength=boundary.length;    boundary[0]=CR;    boundary[1]=LF;  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  MenuInflater menuInflater=getMenuInflater();  menuInflater.inflate(R.menu.menu,menu);  return true;}  }
class C{  public DrawerBuilder withDrawerItems(@NonNull ArrayList<IDrawerItem> drawerItems){  this.getAdapter().setDrawerItems(IdDistributor.checkIds(drawerItems));  return this;}  }
class C{  protected void performPUTRequest(final HttpServerRequest request,final HttpClientResponse getResponse,final CopyTask task){  getResponse.bodyHandler(null);}  }
class C{  public void startScanAllInContext(Context context,User user){  Target target=new Target(context);  target.setRecurse(true);  this.startScan(target,user,null);}  }
class C{  public void putDocumentInCache(int n,Source source){  int cachedNode=getNode(source);  if (DTM.NULL != cachedNode) {    if (!(cachedNode == n))     throw new RuntimeException("Programmer's Error!  " + "putDocumentInCache found reparse of doc: " + source.getSystemId());    return;  }  if (null != source.getSystemId()) {    m_sourceTree.addElement(new SourceTree(n,source.getSystemId()));  }}  }
class C{  public void fields(Map<String,List<Object>> fields){  this.fields=fields;}  }
class C{  @Nullable private TileEntity createTileEntity(BlockPos pos){  IBlockState blockState=getBlockState(pos);  Block block=blockState.getBlock();  if (block.hasTileEntity(blockState)) {    return block.createTileEntity((World)this.world,blockState);  }  return null;}  }
class C{  public final void testGetEncoded() throws CertificateEncodingException {  CertPath cp1=new MyCertPath(testEncoding);  cp1.getEncoded();}  }
class C{  private ChildPropertyDescriptor typeDeclProperty(){  if (getAST().apiLevel() == AST.JLS2_INTERNAL) {    return TYPE_DECLARATION_PROPERTY;  } else {    return DECLARATION_PROPERTY;  }}  }
class C{  public Path subpath(int startIndex){  return subpath(startIndex,size());}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMAGE_CACHE'";  db.execSQL(sql);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.397 -0500",hash_original_method="4F1204B9DEA81FB44DF832DBC08BD27C",hash_generated_method="012802211072B6A39691FEECE37501B3") private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  public static byte[] toBytes(final double d){  return Bytes.toBytes(Double.doubleToRawLongBits(d));}  }
class C{  public static boolean isBetweenInclusive(double min,double i,double max){  return (i >= min) && (i <= max);}  }
class C{  public static int calculateDOF(MeanVariance mv1,MeanVariance mv2){  final double relvar1=mv1.getSampleVariance() / mv1.getCount();  final double relvar2=mv2.getSampleVariance() / mv2.getCount();  final double wvariance=relvar1 + relvar2;  final double div=relvar1 * relvar1 / (mv1.getCount() - 1) + relvar2 * relvar2 / (mv2.getCount() - 1);  return (int)(wvariance * wvariance / div);}  }
class C{  public SampleVcpcFast(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  if (!(independenceTest instanceof IndTestFisherZ)) {    throw new IllegalArgumentException("Need Fisher Z test to proceed with algorithm");  }  this.independenceTest=independenceTest;  this.dataSet=(DataSet)independenceTest.getData();  this.variables=dataSet.getVariables();  this.covMatrix=new CovarianceMatrix(dataSet);  List<Node> nodes=covMatrix.getVariables();  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  this.semIm=semIm;  this.nodesToVariables=new HashMap<>();  this.variablesToNodes=new HashMap<>();}  }
class C{  private double[] calculatePowersOfLambda(){  double[] powers=new double[MAX_POWER_OF_LAMBDA + 1];  powers[0]=1.0;  double val=1.0;  for (int i=1; i <= MAX_POWER_OF_LAMBDA; i++) {    val*=m_lambda;    powers[i]=val;  }  return powers;}  }
class C{  public PrincipalComponentsTest(String name){  super(name);}  }
class C{  public static <T>T[] toArray(Iterable<? extends T> iterable,T[] target){  if (iterable instanceof Collection) {    return ((Collection<T>)iterable).toArray(target);  }  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).toArray(target);  }  MutableList<T> result=Lists.mutable.empty();  Iterate.addAllTo(iterable,result);  return result.toArray(target);}  }
class C{  public void testIsFinite(){  int num=atLeast(200);  for (int i=0; i < num; i++) {    Automaton a=AutomatonTestUtil.randomAutomaton(random());    assertEquals(AutomatonTestUtil.isFiniteSlow(a),Operations.isFinite(a));  }}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent intent){}  }
class C{  protected void onAuthDescriptionsUpdated(){}  }
class C{  public static boolean exists(MonKey key){  return factory.exists(key);}  }
class C{  public static void runOnUiThread(final Context context,final Runnable runnable){  if (context instanceof Activity) {    ((Activity)context).runOnUiThread(runnable);  } else {    new Handler(Looper.getMainLooper()).post(runnable);  }}  }
class C{  public boolean forwardIfCurrent(String first,String second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  if (!removeSpace()) {    pos=start;    return false;  }  boolean rtn=forwardIfCurrent(second);  if (!rtn)   pos=start;  return rtn;}  }
class C{  public UpdateLock(String tag){  mTag=tag;  mToken=new Binder();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__CHARACTER:    return getCharacter();case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__SEQUENCE:  return getSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="mc";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public CircleRDD(JavaRDD<Circle> circleRDD){  this.setCircleRDD(circleRDD.cache());}  }
class C{  public Sentence(Constituent sentenceConstituent){  super();  this.sentenceConstituent=sentenceConstituent;  this.textAnnotation=sentenceConstituent.textAnnotation;}  }
class C{  public void lineArrow(final int x0,final int y0,final int x1,final int y1,final int sidelength,final int padding,final long lineColor,final long arrowColor){  final double dx=x1 - x0;  final double dy=y1 - y0;  final double angle=Math.atan2(dy,dx);  final double d=Math.sqrt((dx * dx + dy * dy));  final double arrowtip=d - padding;  final double arrowlength=TL * sidelength;  final double arrowbase=arrowtip - arrowlength;  final double xn=Math.cos(angle);  final double yn=Math.sin(angle);  final int xt=x0 + ((int)(arrowtip * xn));  final int yt=y0 + ((int)(arrowtip * yn));  final double xb=x0 + arrowbase * xn;  final double yb=y0 + arrowbase * yn;  final double sl2=sidelength / 2.0;  final double xk=sl2 * Math.cos(angle + PI2);  final double yk=sl2 * Math.sin(angle + PI2);  final int x2=(int)(xb + xk);  final int y2=(int)(yb + yk);  final int x3=(int)(xb - xk);  final int y3=(int)(yb - yk);  setColor(lineColor);  line(x0,y0,(int)xb,(int)yb,100);  setColor(arrowColor);  line(x2,y2,x3,y3,100);  line(x2,y2,xt,yt,100);  line(x3,y3,xt,yt,100);}  }
class C{  public Block(NetworkParameters params,byte[] payloadBytes,int offset,@Nullable Message parent,MessageSerializer serializer,int length) throws ProtocolException {  super(params,payloadBytes,offset,serializer,length);}  }
class C{  public AdapterPath append(@NonNull UnwrapPositionResult wrapResult){  return append(wrapResult.adapter,wrapResult.tag);}  }
class C{  private void attemptModifyLabelPaint(){  Color c;  c=JColorChooser.showDialog(this,localizationResources.getString("Label_Color"),Color.blue);  if (c != null) {    this.labelPaintSample.setPaint(c);  }}  }
class C{  public KMLRegion(String namespaceURI){  super(namespaceURI);}  }
class C{  AnnotatedTypeMirror lub(AnnotatedTypeMirror type1,AnnotatedTypeMirror type2,TypeMirror lubJavaType){  AnnotatedTypeMirror lub=AnnotatedTypeMirror.createType(lubJavaType,atypeFactory,false);  if (type1.getKind() == TypeKind.NULL) {    return lubWithNull((AnnotatedNullType)type1,type2,lub);  }  if (type2.getKind() == TypeKind.NULL) {    return lubWithNull((AnnotatedNullType)type2,type1,lub);  }  AnnotatedTypeMirror type1AsLub=AnnotatedTypes.asSuper(atypeFactory,type1,lub);  AnnotatedTypeMirror type2AsLub=AnnotatedTypes.asSuper(atypeFactory,type2,lub);  visit(type1AsLub,type2AsLub,lub);  visitHistory.clear();  return lub;}  }
class C{  public Double createModel(){  Map<Integer,Integer> categoricalFeaturesInfo=new HashMap<Integer,Integer>();  int numTrees=10;  int numClasses=6;  String featureSubsetStrategy="auto";  String impurity="gini";  int maxDepth=9;  int maxBins=32;  RandomForestModel model=RandomForest.trainClassifier(trainingData,numClasses,categoricalFeaturesInfo,numTrees,featureSubsetStrategy,impurity,maxDepth,maxBins,12345);  JavaPairRDD<Double,Double> predictionAndLabel=testData.mapToPair(null);  Double testErr=1.0 * predictionAndLabel.filter(null).count() / testData.count();  return testErr;}  }
class C{  public static TypeEditorPanel CreateDefaultTypeEditor(final JFrame owner,final TypeManager typeManager){  return new TypeEditorPanel(owner,TypesTree.createDefaultDndTypesTree(typeManager),typeManager,"Type editor");}  }
class C{  public void flushPendingWrites(){synchronized (mPendingWritesLock) {    if (mPendingWrites.isEmpty())     return;    new UpdateDbTask(getContext(),sOpenHelper,mPendingWrites,mLocale).execute();    mPendingWrites=new HashMap<String,Integer>();  }}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public void testCertificateFactory16(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  MyCertificate ms=createMC();  List<Certificate> list=new Vector<Certificate>();  list.add(ms);  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(list);      fail("CertificateException must be thrown");    } catch (    CertificateException e) {    }  }}  }
class C{  protected int checkMapping(final int articleID,final int revisionCounter) throws SQLException {  PreparedStatement statement=null;  ResultSet result=null;  try {    statement=this.connection.prepareStatement("SELECT Mapping " + "FROM index_chronological " + "WHERE ArticleID=? LIMIT 1");    statement.setInt(1,articleID);    result=statement.executeQuery();    if (result.next()) {      String mapping=result.getString(1);      return getMapping(mapping,revisionCounter);    }  }  finally {    if (statement != null) {      statement.close();    }    if (result != null) {      result.close();    }  }  return revisionCounter;}  }
class C{  protected AbstractQueuedSynchronizer(){}  }
class C{  public boolean isCacheableFalse(){  if (m_cacheable != null) {    return !m_cacheable.booleanValue();  } else   if (isInheritanceSubclass()) {    return getInheritanceParentDescriptor().isCacheableFalse();  }  return false;}  }
class C{  public void incUnknowsOperationsReceived(){  this.stats.incInt(unknowsOperationsReceivedId,1);}  }
class C{  private void tryBackgroundEnter(boolean focused){  if (mBackground == null) {    mBackground=new RippleBackground(this,mHotspotBounds);  }  mBackground.setup(mState.mMaxRadius,mDensity);  mBackground.enter(focused);}  }
class C{  private void scrollFinished(){  if (mEdgeSwipeHandler != null && mEdgeSwipeStarted) {    mEdgeSwipeHandler.swipeFinished();  }  mEdgeSwipeStarted=false;}  }
class C{  private void doPrintEntry(String alias,PrintStream out,boolean printWarning) throws Exception {  if (storePass == null && printWarning && !KeyStoreUtil.isWindowsKeyStore(storetype)) {    printWarning();  }  if (keyStore.containsAlias(alias) == false) {    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist"));    Object[] source={alias};    throw new Exception(form.format(source));  }  if (verbose || rfc || debug) {    MessageFormat form=new MessageFormat(rb.getString("Alias.name.alias"));    Object[] source={alias};    out.println(form.format(source));    if (!token) {      form=new MessageFormat(rb.getString("Creation.date.keyStore.getCreationDate.alias."));      Object[] src={keyStore.getCreationDate(alias)};      out.println(form.format(src));    }  } else {    if (!token) {      MessageFormat form=new MessageFormat(rb.getString("alias.keyStore.getCreationDate.alias."));      Object[] source={alias,keyStore.getCreationDate(alias)};      out.print(form.format(source));    } else {      MessageFormat form=new MessageFormat(rb.getString("alias."));      Object[] source={alias};      out.print(form.format(source));    }  }  if (keyStore.entryInstanceOf(alias,KeyStore.SecretKeyEntry.class)) {    if (verbose || rfc || debug) {      Object[] source={"SecretKeyEntry"};      out.println(new MessageFormat(rb.getString("Entry.type.type.")).format(source));    } else {      out.println("SecretKeyEntry, ");    }  } else   if (keyStore.entryInstanceOf(alias,KeyStore.PrivateKeyEntry.class)) {    if (verbose || rfc || debug) {      Object[] source={"PrivateKeyEntry"};      out.println(new MessageFormat(rb.getString("Entry.type.type.")).format(source));    } else {      out.println("PrivateKeyEntry, ");    }    Certificate[] chain=keyStore.getCertificateChain(alias);    if (chain != null) {      if (verbose || rfc || debug) {        out.println(rb.getString("Certificate.chain.length.") + chain.length);        for (int i=0; i < chain.length; i++) {          MessageFormat form=new MessageFormat(rb.getString("Certificate.i.1."));          Object[] source={new Integer((i + 1))};          out.println(form.format(source));          if (verbose && (chain[i] instanceof X509Certificate)) {            printX509Cert((X509Certificate)(chain[i]),out);          } else           if (debug) {            out.println(chain[i].toString());          } else {            dumpCert(chain[i],out);          }        }      } else {        out.println(rb.getString("Certificate.fingerprint.SHA1.") + getCertFingerPrint("SHA1",chain[0]));      }    }  } else   if (keyStore.entryInstanceOf(alias,KeyStore.TrustedCertificateEntry.class)) {    Certificate cert=keyStore.getCertificate(alias);    Object[] source={"trustedCertEntry"};    String mf=new MessageFormat(rb.getString("Entry.type.type.")).format(source) + "\n";    if (verbose && (cert instanceof X509Certificate)) {      out.println(mf);      printX509Cert((X509Certificate)cert,out);    } else     if (rfc) {      out.println(mf);      dumpCert(cert,out);    } else     if (debug) {      out.println(cert.toString());    } else {      out.println("trustedCertEntry, ");      out.println(rb.getString("Certificate.fingerprint.SHA1.") + getCertFingerPrint("SHA1",cert));    }  } else {    out.println(rb.getString("Unknown.Entry.Type"));  }}  }
class C{  public static boolean canShow(){  return true;}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reason=SIPResponse.getReasonPhrase(statusCode);  if (reason == null)   throw new ParseException(statusCode + " : Unknown",0);  statusLine.setReasonPhrase(reason);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  @Override public long flushAndSync() throws IOException {  checkClosedOrInError("flushAndSync");  LOG.debug("FlushAndSync Started");  long highestTransactionId=0;  BKLogSegmentWriter writer=getCachedLogWriter();  if (null != writer) {    highestTransactionId=Math.max(highestTransactionId,FutureUtils.result(writer.commit()));    LOG.debug("FlushAndSync Completed");  } else {    LOG.debug("FlushAndSync Completed - Nothing to Flush");  }  return highestTransactionId;}  }
class C{  public void addCategoryFilter(CategoryFilter categoryFilter){  categoryFilters.add(categoryFilter);}  }
class C{  private void loadDataFromService(){  List<InvocationSequenceData> invocData;  if (!autoUpdate) {    if (template.getMethodIdent() != IdDefinition.ID_NOT_USED) {      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),template.getMethodIdent(),limit,fromDate,toDate,resultComparator);    } else {      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),limit,fromDate,toDate,resultComparator);    }  } else {    if (template.getMethodIdent() != IdDefinition.ID_NOT_USED) {      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),template.getMethodIdent(),limit,resultComparator);    } else {      invocData=dataAccessService.getInvocationSequenceOverview(template.getPlatformIdent(),limit,resultComparator);    }  }  invocationSequenceData.clear();  if (!invocData.isEmpty()) {    invocationSequenceData.addAll(invocData);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.102 -0500",hash_original_method="E6A664B73F10945CFC9983451CADB566",hash_generated_method="01DEB5F2A93E2DFAFC048D9A5B76AE9C") public static String formatElapsedTime(StringBuilder recycle,long elapsedSeconds){  initFormatStrings();  long hours=0;  long minutes=0;  long seconds=0;  if (elapsedSeconds >= 3600) {    hours=elapsedSeconds / 3600;    elapsedSeconds-=hours * 3600;  }  if (elapsedSeconds >= 60) {    minutes=elapsedSeconds / 60;    elapsedSeconds-=minutes * 60;  }  seconds=elapsedSeconds;  String result;  if (hours > 0) {    return formatElapsedTime(recycle,sElapsedFormatHMMSS,hours,minutes,seconds);  } else {    return formatElapsedTime(recycle,sElapsedFormatMMSS,minutes,seconds);  }}  }
class C{  private void _serializeSerializable(Serializable serializable,StringBuilder sb) throws ConverterException {  sb.append(goIn());  sb.append("evaluateJava(").append(QUOTE_CHR);  try {    sb.append(JavaConverter.serialize(serializable));  } catch (  IOException e) {    throw toConverterException(e);  }  sb.append(QUOTE_CHR).append(')');}  }
class C{  public InsufficientPermissionException(final Throwable cause){  super(SpServerError.SP_INSUFFICIENT_PERMISSION,cause);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public Object lookupLink(Name name) throws NamingException {  throw new NamingException(LocalizedStrings.ContextImpl_LOOKUPLINKNAME_NAME_IS_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  public String globalInfo(){  return "GreedyStepwise :\n\nPerforms a greedy forward or backward search " + "through " + "the space of attribute subsets. May start with no/all attributes or from "+ "an arbitrary point in the space. Stops when the addition/deletion of any "+ "remaining attributes results in a decrease in evaluation. "+ "Can also produce a ranked list of "+ "attributes by traversing the space from one side to the other and "+ "recording the order that attributes are selected.\n";}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  canvas.clipRect(mBackgroundPadding.left,mBackgroundPadding.top,getWidth() - mBackgroundPadding.right,getHeight() - mBackgroundPadding.bottom);  super.dispatchDraw(canvas);}  }
class C{  private static String patternMatching(String ptnName,String input){  String suffix="";  if (ptnNumber == null)   patternCompile();  Matcher matcher;  if (ptnName.equals("number")) {    matcher=ptnNumber.matcher(input);    if (matcher.matches())     suffix=":number";  } else   if (ptnName.equals("short_date")) {    matcher=ptnShortDate.matcher(input);    if (matcher.matches())     suffix=":short-date";  } else   if (ptnName.equals("long_date")) {    matcher=ptnLongDate.matcher(input);    if (matcher.matches())     suffix=":long-date";  } else   if (ptnName.equals("percentage")) {    matcher=ptnPercentage.matcher(input);    if (matcher.matches())     suffix=":percentage";  } else   if (ptnName.equals("currency")) {    matcher=ptnCurrency.matcher(input);    if (matcher.matches())     suffix=":currency"; else {      matcher=ptnViCurrency.matcher(input);      if (matcher.matches()) {        suffix=":currency";      }    }  }  return suffix;}  }
class C{  private void readUnreadSMS(){  ArrayList<Sms> smsList=mSmsManager.getLastUnreadSms();  Collections.sort(smsList);  XmppMsg allSms=new XmppMsg();  if (smsList.size() > 0) {    sendSmsListOnXmpp(smsList,null,null);  } else {    allSms.appendLine(getString(R.string.chat_no_sms));  }  send(allSms);}  }
class C{  public boolean hasYomi(){  return getYomi() != null;}  }
class C{  public static MCashLine createCashLine(Properties ctx,MCash cashJournal,BigDecimal transferAmount,String cashType,String description,String trxName) throws OperationException {  MCashLine cashLine=new MCashLine(ctx,0,trxName);  cashLine.setC_Cash_ID(cashJournal.get_ID());  cashLine.setAmount(transferAmount);  cashLine.setCashType(cashType);  cashLine.setDescription(description);  PoManager.save(cashLine);  return cashLine;}  }
class C{  private static RegisterSpec[] dupArray(RegisterSpec[] orig){  RegisterSpec[] copy=new RegisterSpec[orig.length];  System.arraycopy(orig,0,copy,0,orig.length);  return copy;}  }
class C{  @Timed @ExceptionMetered @DELETE @Path("{groupId}") public Response deleteGroup(@Auth AutomationClient automationClient,@PathParam("groupId") LongParam groupId){  Group group=groupDAO.getGroupById(groupId.get()).orElseThrow(null);  groupDAO.deleteGroup(group);  Map<String,String> extraInfo=new HashMap<>();  extraInfo.put("deprecated","true");  auditLog.recordEvent(new Event(Instant.now(),EventTag.GROUP_CREATE,automationClient.getName(),group.getName(),extraInfo));  return Response.ok().build();}  }
class C{  public static void putAt(DefaultListModel self,int index,Object e){  self.set(index,e);}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  public CompositeUnicode2Unicode(){  try {    cpsUni2Uni=new HashMap<String,String>();    URL url=CompositeUnicode2Unicode.class.getClassLoader().getResource(DEFAULT_MAP_RESOURCE);    BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream(),"UTF-8"));    String line;    while ((line=reader.readLine()) != null) {      String[] onemap=line.split("\t");      if (onemap.length != 2)       continue;      cpsUni2Uni.put(onemap[0],onemap[1]);    }    reader.close();  } catch (  Exception e) {    System.err.println("Loading composite to unicode map fail: " + e.getMessage());    cpsUni2Uni=null;  }}  }
class C{  @Deprecated public void pointToData(Data o) throws FitsException {  o.fillHeader(this);}  }
class C{  public void manualTestFailedSingleSlaveDoesntBlockNewConnections() throws Exception {  FabricMySQLConnection conn1=(FabricMySQLConnection)this.ds.getConnection(this.username,this.password);  conn1.setServerGroupName("ha_config1_group");  conn1.setReadOnly(true);  Statement s=conn1.createStatement();  try {    while (true) {      ResultSet rs=s.executeQuery("select 1");      rs.close();      try {        Thread.sleep(500);      } catch (      Exception ex) {      }    }  } catch (  SQLException ex) {    System.err.println("Failure encountered: " + ex.getMessage());    System.err.println("Waiting 10 seconds before trying a new connection");    try {      Thread.sleep(10 * 1000);    } catch (    Exception ex2) {    }  }  conn1=(FabricMySQLConnection)this.ds.getConnection(this.username,this.password);  conn1.setServerGroupName("ha_config1_group");  conn1.setReadOnly(true);  ResultSet rs=conn1.createStatement().executeQuery("SELECT CONCAT(@@hostname, ':', @@port) AS 'Value'");  rs.next();  System.err.println("New slave: " + rs.getString(1));  rs.close();  conn1.close();}  }
class C{  private static int msbBasedLeastSignificantBit(long x){  return mostSignificantBit(x & -x);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  protected void reloadSummaries(){  if (mSetPassword != null) {    if (mAdminActive) {      boolean sufficient=mDPM.isActivePasswordSufficient();      mSetPassword.setSummary(sufficient ? R.string.password_sufficient : R.string.password_insufficient);    } else {      mSetPassword.setSummary(null);    }  }}  }
class C{  static void freeMemoryAndFinalize(){  IOUtils.trace("freeMemoryAndFinalize",null,null);  Runtime rt=Runtime.getRuntime();  long mem=rt.freeMemory();  for (int i=0; i < 16; i++) {    rt.gc();    long now=rt.freeMemory();    rt.runFinalization();    if (now == mem) {      break;    }    mem=now;  }}  }
class C{  public boolean validation() throws ParallelTaskInvalidException {  ParallelTask task=new ParallelTask();  targetHostMeta=new TargetHostMeta(targetHosts);  task=new ParallelTask(requestProtocol,concurrency,httpMeta,targetHostMeta,sshMeta,tcpMeta,udpMeta,pingMeta,null,responseContext,replacementVarMapNodeSpecific,replacementVarMap,requestReplacementType,config);  boolean valid=false;  try {    valid=task.validateWithFillDefault();  } catch (  ParallelTaskInvalidException e) {    logger.info("task is invalid " + e);  }  return valid;}  }
class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  OutputStream os=_os;  if (os != null) {    os.write(buf,offset,length);  }}  }
class C{  public static short decodeHighBits(int i){  long key=i & 0xFFFF0000L;  key>>=16;  return (short)key;}  }
class C{  private void parseEntityConfigXMLFile(){  String fileName=this.entityConfigXMLFile;  File xmlFile=new File(fileName);  if (!xmlFile.exists()) {    if (DEFAULT_ENTITY_CONFIG_XML_FILE.equals(fileName)) {      return;    } else {      throw new AdminXmlException(LocalizedStrings.DistributedSystemConfigImpl_ENTITY_CONFIGURATION_XML_FILE_0_DOES_NOT_EXIST.toLocalizedString(fileName));    }  }  try {    InputStream is=new FileInputStream(xmlFile);    try {      ManagedEntityConfigXmlParser.parse(is,this);    }  finally {      is.close();    }  } catch (  IOException ex) {    throw new AdminXmlException(LocalizedStrings.DistributedSystemConfigImpl_WHILE_PARSING_0.toLocalizedString(fileName),ex);  }}  }
class C{  public void checkpoint(){  checkpointIndex=getSelectedIndex();}  }
class C{  public static void main(final String[] args) throws Exception {  try {    setup();    execute(args);  } catch (  Exception e) {    log.error("Configuration proxy failed to start",e);    throw e;  } finally {    shutdown();  }}  }
class C{  @Interruptible public static void fillAlignmentGap(BootImageInterface bootImage,Address address,Extent size){  while (size.GT(Extent.zero())) {    bootImage.setFullWord(address,JavaHeader.ALIGNMENT_VALUE);    address=address.plus(BYTES_IN_INT);    size=size.minus(BYTES_IN_INT);  }}  }
class C{  private boolean deleteLocalCacheFile(){  if (localCacheFile != null && !src.toString().startsWith("smb://")) {    if (localCacheFileTracker != null) {      localCacheFileTracker.removeFile(this);    }    if (localCacheFile.exists()) {      localCacheFile.delete();    }    localCacheFile=null;    return true;  }  return false;}  }
class C{  public DecimalStyle withPositiveSign(char positiveSign){  if (positiveSign == this.positiveSign) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  public DefaultClientWebRequestBuilder headers(HttpHeaders httpHeaders){  this.httpHeaders=httpHeaders;  return this;}  }
class C{  public void dispose(){  if (coverage != null) {    coverage.removeListener(traceListener);    coverage.dispose();    coverage=null;    graphFrame=null;  }}  }
class C{  public void dataCont(ChannelOutHttp2 stream){  _queue.offer(new MessageDataCont(stream));  _queue.wake();}  }
class C{  private static void bad_idiom(SootClass class_node,SootMethod method_node,String format,Object... args) throws UnsupportedIdiomException {  String msg=String.format(format,args);  throw new UnsupportedIdiomException(class_node,method_node,msg);}  }
class C{  public ReferenceType removeReference(final byte[] urlHash){  final Row.Entry entry=super.remove(urlHash);  if (entry == null)   return null;  return this.factory.produceSlow(entry);}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  DefaultHandler current=getCurrentHandler();  if (current != this) {    current.startElement(namespaceURI,localName,qName,atts);  } else   if (qName.equals(PIEDATASET_TAG)) {    this.dataset=new DefaultPieDataset();  } else   if (qName.equals(ITEM_TAG)) {    ItemHandler subhandler=new ItemHandler(this,this);    getSubHandlers().push(subhandler);    subhandler.startElement(namespaceURI,localName,qName,atts);  }}  }
class C{  private Integer runScanner(String parentPath,String... fileNames){  this.mCurrentFolder=parentPath;  final Integer resultCount=super.doInBackground(null,fileNames);  if (resultCount != null) {    this.mCount+=resultCount.intValue();  }  return resultCount;}  }
class C{  private void afterProcessTask(){  if (m_ids != null && m_ids.length > 0) {    log.config("");    if (m_AD_Process_ID == 119)     printInvoices(); else     if (m_AD_Process_ID == 118)     printShipments();  }}  }
class C{  public void registerClasses(Object... objs) throws IgniteCheckedException {  registerClasses(F.asList(objs));}  }
class C{  public CSVParser(){  this(',');}  }
class C{  public static final String[] guessStringsFromLine(LogChannelInterface log,String line,String delimiter,String enclosure,String escapeCharacter) throws KettleException {  List<String> strings=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  String pol;  try {    if (line == null) {      return null;    }    int pos=0;    int length=line.length();    boolean dencl=false;    int lenEncl=(enclosure == null ? 0 : enclosure.length());    int lenEsc=(escapeCharacter == null ? 0 : escapeCharacter.length());    while (pos < length) {      int from=pos;      int next;      boolean enclFound;      boolean containsEscapedEnclosures=false;      boolean containsEscapedSeparators=false;      if (lenEncl > 0 && line.substring(from,from + lenEncl).equalsIgnoreCase(enclosure)) {        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRow",line.substring(from,from + lenEncl)));        }        enclFound=true;        int p=from + lenEncl;        boolean isEnclosure=lenEncl > 0 && p + lenEncl < length && line.substring(p,p + lenEncl).equalsIgnoreCase(enclosure);        boolean isEscape=lenEsc > 0 && p + lenEsc < length && line.substring(p,p + lenEsc).equalsIgnoreCase(escapeCharacter);        boolean enclosureAfter=false;        if ((isEnclosure || isEscape) && p < length - 1) {          String strnext=line.substring(p + lenEncl,p + 2 * lenEncl);          if (strnext.equalsIgnoreCase(enclosure)) {            p++;            enclosureAfter=true;            dencl=true;            if (isEscape) {              containsEscapedEnclosures=true;            }          }        }        while ((!isEnclosure || enclosureAfter) && p < line.length()) {          p++;          enclosureAfter=false;          isEnclosure=lenEncl > 0 && p + lenEncl < length && line.substring(p,p + lenEncl).equals(enclosure);          isEscape=lenEsc > 0 && p + lenEsc < length && line.substring(p,p + lenEsc).equals(escapeCharacter);          if ((isEnclosure || isEscape) && p < length - 1) {            String strnext=line.substring(p + lenEncl,p + 2 * lenEncl);            if (strnext.equals(enclosure)) {              p++;              enclosureAfter=true;              dencl=true;              if (isEscape) {                containsEscapedEnclosures=true;              }            }          }        }        if (p >= length) {          next=p;        } else {          next=p + lenEncl;        }        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.EndOfEnclosure","" + p));        }      } else {        enclFound=false;        boolean found=false;        int startpoint=from;        do {          next=line.indexOf(delimiter,startpoint);          if (lenEsc > 0 && next - lenEsc > 0) {            String before=line.substring(next - lenEsc,next);            if (escapeCharacter != null && escapeCharacter.equals(before)) {              startpoint=next + 1;              containsEscapedSeparators=true;            } else {              found=true;            }          } else {            found=true;          }        } while (!found && next >= 0);      }      if (next == -1) {        next=length;      }      if (enclFound) {        pol=line.substring(from + lenEncl,next - lenEncl);        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.EnclosureFieldFound","" + pol));        }      } else {        pol=line.substring(from,next);        if (log.isRowLevel()) {          log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.NormalFieldFound","" + pol));        }      }      if (dencl) {        StringBuilder sbpol=new StringBuilder(pol);        int idx=sbpol.indexOf(enclosure + enclosure);        while (idx >= 0) {          sbpol.delete(idx,idx + (enclosure == null ? 0 : enclosure.length()));          idx=sbpol.indexOf(enclosure + enclosure);        }        pol=sbpol.toString();      }      if (containsEscapedEnclosures) {        String replace=escapeCharacter + enclosure;        String replaceWith=enclosure;        pol=Const.replace(pol,replace,replaceWith);      }      if (containsEscapedSeparators) {        String replace=escapeCharacter + delimiter;        String replaceWith=delimiter;        pol=Const.replace(pol,replace,replaceWith);      }      strings.add(pol);      pos=next + delimiter.length();    }    if (pos == length) {      if (log.isRowLevel()) {        log.logRowlevel(BaseMessages.getString(PKG,"CsvInput.Log.ConvertLineToRowTitle"),BaseMessages.getString(PKG,"CsvInput.Log.EndOfEmptyLineFound"));      }      strings.add("");    }  } catch (  Exception e) {    throw new KettleException(BaseMessages.getString(PKG,"CsvInput.Log.Error.ErrorConvertingLine",e.toString()),e);  }  return strings.toArray(new String[strings.size()]);}  }
class C{  public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){  if (inHeaders.isEmpty()) {    return HttpHeaders.EMPTY_HEADERS;  }  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());  toArmeria(inHeaders,out);  return out;}  }
class C{  public void start() throws IOException, MqttException {  final String methodName="start";  try {    log.fine(className,methodName,"252",new Object[]{uri});    connection=(SocketConnection)Connector.open(uri);    connection.setSocketOption(SocketConnection.DELAY,0);    in=connection.openInputStream();    out=connection.openOutputStream();  } catch (  IOException ex) {    log.fine(className,methodName,"250",null,ex);    throw new MqttException(MqttException.REASON_CODE_SERVER_CONNECT_ERROR,ex);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void i(String message,Throwable cause){  Log.i(LOG_TAG,"[" + message + "]",cause);}  }
class C{  public SignatureAttr(String signature){  this.signature=new AsciiCP(signature);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public GuacamoleClientException(String message){  super(message);}  }
class C{  private CGraphOpener(){}  }
class C{  public final LC align(String ax,String ay){  if (ax != null)   alignX(ax);  if (ay != null)   alignY(ay);  return this;}  }
class C{  public void flushStorageCache(){  Util.getImplementation().flushStorageCache();}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  byte countAsbyte=(byte)count;  boolean failed=(count > in.length | count == 0);  for (int i=0; i < in.length; i++) {    failed|=(in.length - i <= count) & (in[i] != countAsbyte);  }  if (failed) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  private boolean isSubQueryNonCorrelated(RelNode subq,Blackboard bb){  Set<CorrelationId> correlatedVariables=RelOptUtil.getVariablesUsed(subq);  for (  CorrelationId correlName : correlatedVariables) {    DeferredLookup lookup=mapCorrelToDeferred.get(correlName);    String originalRelName=lookup.getOriginalRelName();    int[] nsIndexes={-1};    final SqlValidatorScope[] ancestorScopes={null};    SqlValidatorNamespace foundNs=lookup.bb.scope.resolve(ImmutableList.of(originalRelName),ancestorScopes,nsIndexes);    assert foundNs != null;    assert nsIndexes.length == 1;    SqlValidatorScope ancestorScope=ancestorScopes[0];    SqlValidatorScope parentScope=bb.scope;    do {      if (ancestorScope == parentScope) {        return false;      }      if (parentScope instanceof DelegatingScope) {        parentScope=((DelegatingScope)parentScope).getParent();      } else {        break;      }    } while (parentScope != null);  }  return true;}  }
class C{  public EnumDeclaration newEnumDeclaration(){  EnumDeclaration result=new EnumDeclaration(this);  return result;}  }
class C{  @Override public void write(int b) throws IOException {  Streams.writeSingleByte(this,b);}  }
class C{  public Server(Rules rules){  mRules=rules;  httpConnectionUtil=new HttpConnectionUtil();}  }
class C{  public static NotificationWrapper makeExpandingNotification(Context context,String title,String summaryText,String description,long startMillis,long endMillis,long eventId,int notificationId,boolean doPopup,int priority){  Notification.Builder basicBuilder=new Notification.Builder(context);  Notification notification=buildBasicNotification(basicBuilder,context,title,summaryText,startMillis,endMillis,eventId,notificationId,doPopup,priority,true);  if (Utils.isJellybeanOrLater()) {    Notification.BigTextStyle expandedBuilder=new Notification.BigTextStyle(basicBuilder);    if (description != null) {      description=mBlankLinePattern.matcher(description).replaceAll("");      description=description.trim();    }    CharSequence text;    if (TextUtils.isEmpty(description)) {      text=summaryText;    } else {      SpannableStringBuilder stringBuilder=new SpannableStringBuilder();      stringBuilder.append(summaryText);      stringBuilder.append("\n\n");      stringBuilder.setSpan(new RelativeSizeSpan(0.5f),summaryText.length(),stringBuilder.length(),0);      stringBuilder.append(description);      text=stringBuilder;    }    expandedBuilder.bigText(text);    notification=expandedBuilder.build();  }  return new NotificationWrapper(notification,notificationId,eventId,startMillis,endMillis,doPopup);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void processResponse(ResponseEvent responseEvent){  Response response=responseEvent.getResponse();  int responseStatusCode=response.getStatusCode();  boolean loggerActivated=sLogger.isActivated();  if (loggerActivated) {    sLogger.debug("<<< Receive SIP " + responseStatusCode + " response");  }  if (mSipTraceEnabled) {    System.out.println("<<< " + response.toString());    System.out.println(TRACE_SEPARATOR);  }  ClientTransaction transaction=responseEvent.getClientTransaction();  if (transaction == null) {    if (loggerActivated) {      sLogger.debug("No transaction exist for this response: by-pass it");    }    return;  }  SipResponse resp=new SipResponse(response);  resp.setStackTransaction(transaction);  String transactionId=SipTransactionContext.getTransactionContextId(resp);  if (Response.OK <= responseStatusCode) {    notifyTransactionContext(transactionId,resp);  } else {    if (Response.TRYING <= responseStatusCode) {      notifyProvisionalResponse(transactionId,resp);    }  }}  }
class C{  int templatePosition(){  return mTemplatePosition;}  }
class C{  public WarnData(Instant date,UUID warner,String reason,Duration timeFromNextLogin){  this(date,warner,reason);  this.timeFromNextLogin=timeFromNextLogin.getSeconds();  this.date=date.toEpochMilli();}  }
class C{  public static void uiImpl(){  UIManager.put("CheckBox.margin",new InsetsUIResource(4,3,4,3));  UIManager.put("RadioButton.margin",new InsetsUIResource(4,3,4,3));  UIManager.put("RadioButton.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("CheckBox.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("CheckBox.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("RadioButton.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("RadioButton.icon",new RadioButtonIcon());  UIManager.put("CheckBox.icon",new CheckBoxIcon());  UIManager.put("RadioButton.margin",new InsetsUIResource(1,1,1,1));  UIManager.put("CheckBox.margin",new InsetsUIResource(1,1,1,1));}  }
class C{  public static boolean equals(String str1,String str2){  return str1 == null ? str2 == null : str1.equals(str2);}  }
class C{  public void addElements(List<SelectClauseElement> selectClauseElements){  selectList.addAll(selectClauseElements);}  }
class C{  public void encrypt(byte[] in,int length){  int pos=0;  while (pos < in.length && pos < length) {    encryptBlock(in,pos,length);    pos+=blockSize;  }}  }
class C{  private void initRange(){  mMinX=MathHelper.NULL_VALUE;  mMaxX=-MathHelper.NULL_VALUE;  mMinY=MathHelper.NULL_VALUE;  mMaxY=-MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    double x=getX(k);    double y=getY(k);    updateRange(x,y);  }}  }
class C{  public GBC(int gridx,int gridy,int gridwidth,int gridheight){  this.gridx=gridx;  this.gridy=gridy;  this.gridwidth=gridwidth;  this.gridheight=gridheight;}  }
class C{  void writeExternal(DataOutput out) throws IOException {  out.writeByte(ZRULES);  out.writeInt(standardTransitions.length);  for (  long trans : standardTransitions) {    writeEpochSec(trans,out);  }  for (  ZoneOffset offset : standardOffsets) {    writeOffset(offset,out);  }  out.writeInt(savingsInstantTransitions.length);  for (  long trans : savingsInstantTransitions) {    writeEpochSec(trans,out);  }  for (  ZoneOffset offset : wallOffsets) {    writeOffset(offset,out);  }  out.writeByte(lastRules.length);  for (  ZoneOffsetTransitionRule rule : lastRules) {    writeRule(rule,out);  }}  }
class C{  public StatusBar(boolean withInfo){  super();  try {    jbInit();  } catch (  Exception e) {  }  this.setName("statusBar");  if (!withInfo)   infoLine.setVisible(false);}  }
class C{  private static boolean isMeta(char ch){switch (ch) {case kindSeparator:case compSeparator:case escapeChar:    return true;}return false;}  }
class C{  public static void main(String[] args) throws Exception {  DistanceFacetsExample example=new DistanceFacetsExample();  example.index();  System.out.println("Distance facet counting example:");  System.out.println("-----------------------");  System.out.println(example.search());  System.out.println("Distance facet drill-down example (field/< 2 km):");  System.out.println("---------------------------------------------");  TopDocs hits=example.drillDown(example.TWO_KM);  System.out.println(hits.totalHits + " totalHits");  example.close();}  }
class C{  public static void writeUnpaddedInteger(Writer out,long value) throws IOException {  int intValue=(int)value;  if (intValue == value) {    writeUnpaddedInteger(out,intValue);  } else {    out.write(Long.toString(value));  }}  }
class C{  public JobExecutionResult executePipeline() throws Exception {  if (options.isStreaming()) {    if (this.flinkStreamEnv == null) {      throw new RuntimeException("FlinkPipelineExecutionEnvironment not initialized.");    }    if (this.flinkPipelineTranslator == null) {      throw new RuntimeException("FlinkPipelineTranslator not initialized.");    }    return this.flinkStreamEnv.execute(options.getJobName());  } else {    if (this.flinkBatchEnv == null) {      throw new RuntimeException("FlinkPipelineExecutionEnvironment not initialized.");    }    if (this.flinkPipelineTranslator == null) {      throw new RuntimeException("FlinkPipelineTranslator not initialized.");    }    return this.flinkBatchEnv.execute(options.getJobName());  }}  }
class C{  @Override public synchronized void insert(final byte[] key,final byte[] b) throws IOException {  blobItem bi=(this.blobs.isEmpty()) ? null : this.blobs.get(this.blobs.size() - 1);  if ((bi == null) || (System.currentTimeMillis() - bi.creation.getTime() > this.fileAgeLimit) || (bi.location.length() > this.fileSizeLimit && this.fileSizeLimit >= 0)) {    bi=new blobItem(this.buffersize);    this.blobs.add(bi);  }  assert bi.blob instanceof Heap;  bi.blob.insert(key,b);  executeLimits();}  }
class C{  TypeVariable typeVariable(Local local){  TypeVariable result=typeVariableMap.get(local);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this);    typeVariableList.set(id,result);    typeVariableMap.put(local,result);    if (DEBUG) {      G.v().out.println("[LOCAL VARIABLE \"" + local + "\" -> "+ id+ "]");    }  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int x=getInt(stack);  MediaFile mf=getMediaFile(stack);  if (mf != null && FileDownloader.isDownloading(mf.getFile(0))) {    FileDownloader fd=FileDownloader.getFileDownloader(mf.getFile(0));    long dlTime=fd.getLastDownloadTimestamp();    if (dlTime > 0)     return new Long(mf.getStart(x) + dlTime);  }  return new Long(mf == null ? 0 : mf.getEnd(x));}  }
class C{  @Override protected void keyTyped(char par1,int par2){  prevMenu.setKey(Keyboard.getKeyName(par2));  mc.displayGuiScreen((GuiScreen)prevMenu);}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT + "/");}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.693 -0500",hash_original_method="260B42F8E7BEBB3ADC717EDEB2B728A2",hash_generated_method="A34314B6DE7E4E9B624F3C7CC5F6B943") public String toString(){  return mPath;}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new FileUploadException(ItemSkippedException);  }  if (len == 0) {    return 0;  }  int res=available();  if (res == 0) {    res=makeAvailable();    if (res == 0) {      return -1;    }  }  res=Math.min(res,len);  System.arraycopy(buffer,head,b,off,res);  head+=res;  total+=res;  return res;}  }
class C{  public boolean isButtonDisabled(){  if (this.selectAll) {    return false;  }  if (this.operationRecordsMap == null) {    return true;  }  boolean disabled=true;  final Collection<OperationRecord> values=this.operationRecordsMap.values();  for (  final OperationRecord or : values) {    if (or.isSelected()) {      disabled=false;      break;    }  }  return disabled;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF:    setTypeRef((TypeRef)null);  return;}super.eUnset(featureID);}  }
class C{  public GridLayout(final double hSpacing,final double vSpacing){  this.hSpacing=hSpacing;  this.vSpacing=vSpacing;  this.manualColumns=false;}  }
class C{  public static void throwError(Exception e,String s){  throw new Error(e.toString() + " " + s);}  }
class C{  protected List<LabelLayout> createLayout(String key,Offset offset,Offset hotspot){  LabelLayout layout=new LabelLayout(key);  layout.add(offset,hotspot);  return Arrays.asList(layout);}  }
class C{  public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_ModesAndMeans == null) {    bufferInput(instance);    return false;  } else {    convertInstance(instance);    return true;  }}  }
class C{  protected Container createButtonArea(){  JPanel bottom=new JPanel();  Border border=(Border)DefaultLookup.get(optionPane,this,"OptionPane.buttonAreaBorder");  bottom.setName("OptionPane.buttonArea");  if (border != null) {    bottom.setBorder(border);  }  bottom.setLayout(new ButtonAreaLayout(DefaultLookup.getBoolean(optionPane,this,"OptionPane.sameSizeButtons",true),DefaultLookup.getInt(optionPane,this,"OptionPane.buttonPadding",6),DefaultLookup.getInt(optionPane,this,"OptionPane.buttonOrientation",SwingConstants.CENTER),DefaultLookup.getBoolean(optionPane,this,"OptionPane.isYesLast",false)));  addButtonComponents(bottom,getButtons(),getInitialValueIndex());  return bottom;}  }
class C{  private boolean addSpecifiedLine(){  if (horizontalLineRadiobutton.isSelected()) {    Object selectedItem=rangeAxisSelectionCombobox.getSelectedItem();    if (selectedItem != null && selectedItem instanceof RangeAxisConfig) {      if (!yField.getInputVerifier().verify(yField)) {        yField.requestFocusInWindow();        return false;      }      RangeAxisConfig config=(RangeAxisConfig)selectedItem;      if (line == null) {        line=createLine(Double.parseDouble(yField.getText()));      }      line.setValue(Double.parseDouble(yField.getText()));      config.getCrossHairLines().addLine(line);    }  } else   if (verticalLineRadiobutton.isSelected()) {    if (!xField.getInputVerifier().verify(xField)) {      xField.requestFocusInWindow();      return false;    }    if (line == null) {      line=createLine(Double.parseDouble(xField.getText()));    }    line.setValue(Double.parseDouble(xField.getText()));    plotConfig.getDomainConfigManager().getCrosshairLines().addLine(line);  }  return true;}  }
class C{  protected void afterConnected(){}  }
class C{  @Override public void onBrowserEvent(Event event){  if (!enabled) {    return;  }switch (DOM.eventGetType(event)) {case Event.ONMOUSEOVER:    onMouseOver();  break;case Event.ONMOUSEOUT:onMouseOut();break;case Event.ONMOUSEDOWN:if (event.getButton() == Event.BUTTON_LEFT) {onMouseDown();}break;case Event.ONMOUSEUP:if (event.getButton() == Event.BUTTON_LEFT) {onMouseUp();}break;case Event.ONCLICK:onMouseClick();break;}}  }
class C{  private void validateSourceStorageUnit(StorageUnitEntity storageUnitEntity,String storageName,BusinessObjectDataKey businessObjectDataKey){  Assert.isTrue(StorageUnitStatusEntity.ENABLED.equals(storageUnitEntity.getStatus().getCode()),String.format("Source storage unit status is \"%s\", but must be \"%s\" for storage policy transition to proceed. Storage: {%s}, business object data: {%s}",storageUnitEntity.getStatus().getCode(),StorageUnitStatusEntity.ENABLED,storageName,businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));}  }
class C{  public static String serialize(Node doc){  StringWriter writer=new StringWriter();  try {    serializeNode(doc,"",writer);  } catch (  IOException e) {    throw new RuntimeException(e);  }  writer.flush();  return writer.toString();}  }
class C{  protected static MethodHandle addTransformer(MethodHandle handle,int pos,Object arg,Class parameter){  MethodHandle transformer=null;  if (arg instanceof GString) {    transformer=TO_STRING;  } else   if (arg instanceof Closure) {    transformer=createSAMTransform(arg,parameter);  } else   if (Number.class.isAssignableFrom(parameter)) {    transformer=selectNumberTransformer(parameter,arg);  } else   if (parameter.isArray()) {    transformer=MethodHandles.insertArguments(AS_ARRAY,1,parameter);  }  if (transformer == null)   throw new GroovyBugError("Unknown transformation for argument " + arg + " at position "+ pos+ " with "+ arg.getClass()+ " for parameter of type "+ parameter);  return applyUnsharpFilter(handle,pos,transformer);}  }
class C{  private String convertSelectionToStringValue(){  if (this.getDigits() == 0) {    return String.valueOf(this.storedValue);  }  final StringBuilder unformatted=new StringBuilder(String.valueOf(this.storedValue * Math.pow(10,-1 * this.getDigits())));  for (int i=0; i < this.digits; i++) {    unformatted.append("0");  }  final int position=unformatted.indexOf(".");  final String temp=unformatted.substring(0,position + 1 + this.digits);  return temp.replace('.',this.decimalFormatSeparator);}  }
class C{  public static int indexOf(short[] array,short[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  short c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (array[i] != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (sub[j] != array[k]) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  private void expandAllNodes(JTree tree){  TreeNode root=(TreeNode)tree.getModel().getRoot();  expandAllNodes(tree,new TreePath(root));}  }
class C{  public LongMap(){  this(32,0.8f);}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  public Account find(ReviewDb db,String nameOrEmail) throws OrmException {  Set<Account.Id> r=findAll(db,nameOrEmail);  if (r.size() == 1) {    return byId.get(r.iterator().next()).getAccount();  }  Account match=null;  for (  Account.Id id : r) {    Account account=byId.get(id).getAccount();    if (!account.isActive()) {      continue;    }    if (match != null) {      return null;    }    match=account;  }  return match;}  }
class C{  public static void deleteFilesIfExist(Collection<? extends Path> files) throws IOException {  Throwable th=null;  for (  Path file : files) {    try {      if (file != null) {        Files.deleteIfExists(file);      }    } catch (    Throwable t) {      addSuppressed(th,t);      if (th == null) {        th=t;      }    }  }  reThrow(th);}  }
class C{  @Override public BreakCondition onClockTick() throws EmulationException {  try {    statement.reset();    if (((TxCPUState)platform.cpuState).is16bitIsaMode) {      ((TxStatement)statement).fill16bInstruction(platform.memory.loadInstruction16(platform.cpuState.pc),platform.cpuState.pc,platform.memory);      ((TxStatement)statement).decode16BitOperands(platform.cpuState.pc);    } else {      ((TxStatement)statement).fill32bInstruction(platform.memory.loadInstruction32(platform.cpuState.pc));      ((TxStatement)statement).decode32BitOperands();    }    logIfRequested(logger);    statement.getInstruction().getSimulationCode().simulate(statement,context);    int cycleListenerNumber=0;    while (cycleListenerNumber < cycleCounterListeners.size()) {      CycleCounterListener cycleCounterListener=cycleCounterListeners.get(cycleListenerNumber);      if (cycleCounterListener.onCycleCountChange(totalCycles,1)) {        cycleListenerNumber++;      } else {        cycleCounterListeners.remove(cycleCounterListener);      }    }    totalCycles++;    if (context.nextPc != null) {      if (context.delaySlotDone) {        platform.cpuState.setPc(context.nextPc);        context.nextPc=null;        if (context.nextReturnAddress != null) {          int targetRegister=TxCPUState.RA;          if (context.nextReturnAddressTargetRegister != null) {            targetRegister=context.nextReturnAddressTargetRegister;            context.nextReturnAddressTargetRegister=null;          }          platform.cpuState.setReg(targetRegister,context.nextReturnAddress);          context.nextReturnAddress=null;        }      } else {        context.delaySlotDone=true;      }    } else {      if (platform.interruptController.hasPendingRequests()) {        final InterruptRequest interruptRequest=platform.interruptController.getNextRequest();        if (interruptRequest != null) {          if (platform.cpuState.accepts(interruptRequest)) {            if (logger != null) {              DisassemblyLogger printer2=logger;              if (printer2 != null) {                if (printer2.isIncludeInterruptMarks()) {                  printer2.println(platform.getMasterClock().getFormatedTotalElapsedTimeMs() + " ------------------------- Accepting " + interruptRequest);                }                printer2.indent();              }            }            platform.interruptController.removeEdgeTriggeredRequest(interruptRequest);            context.pushInterrupt(interruptRequest);            ((TxInterruptController)platform.interruptController).processInterrupt((TxInterruptRequest)interruptRequest,platform.cpuState.getPc(),context);          }        }      }    }    if (breakConditionsPresent) {      BreakCondition breakCondition=processConditions();      if (breakCondition != null) {        return breakCondition;      }    }    if (sleepIntervalMs != 0) {      sleep();    }  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());    System.err.println(platform.cpuState);    try {      statement.formatOperandsAndComment(context,false,outputOptions);      System.err.println("Offending instruction : " + statement);    } catch (    Exception e1) {      System.err.println("Cannot disassemble offending instruction :" + statement.getFormattedBinaryStatement());    }    System.err.println("(on or before PC=0x" + Format.asHex(platform.cpuState.pc,8) + ")");    throw new EmulationException(e);  }  return null;}  }
class C{  public static void openBugButtonsWindowItem(Connector connector){  RaptorWindowItem[] items=Raptor.getInstance().getWindow().getWindowItems(BugButtonsWindowItem.class);  boolean openNewWindow=true;  for (  RaptorWindowItem item : items) {    BugButtonsWindowItem bugButtonsItem=(BugButtonsWindowItem)item;    if (bugButtonsItem.getConnector() == connector) {      Raptor.getInstance().getWindow().forceFocus(item);      openNewWindow=false;      break;    }  }  if (openNewWindow) {    Raptor.getInstance().getWindow().addRaptorWindowItem(new BugButtonsWindowItem(connector));  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Minute)) {    return false;  }  Minute that=(Minute)obj;  if (this.minute != that.minute) {    return false;  }  if (this.hour != that.hour) {    return false;  }  return true;}  }
class C{  public void testAlgorithmParameterGenerator02() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg;  for (int i=0; i < algs.length; i++) {    apg=AlgorithmParameterGenerator.getInstance(algs[i]);    assertEquals("Incorrect algorithm",apg.getAlgorithm(),algs[i]);  }}  }
class C{  public VerticalDoubleDataBox(double[][] data){  int length=data[0].length;  for (  double[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All columns must have same length.");    }  }  this.data=data;}  }
class C{  private ArrayDBIDs updateKNNsAfterInsertion(DBIDs ids){  ArrayModifiableDBIDs rkNN_ids=DBIDUtil.newArray();  DBIDs oldids=DBIDUtil.difference(relation.getDBIDs(),ids);  for (DBIDIter iter=oldids.iter(); iter.valid(); iter.advance()) {    KNNList kNNs=storage.get(iter);    double knnDist=kNNs.getKNNDistance();    KNNHeap heap=null;    for (DBIDIter iter2=ids.iter(); iter2.valid(); iter2.advance()) {      double dist=distanceQuery.distance(iter,iter2);      if (dist <= knnDist) {        if (heap == null) {          heap=DBIDUtil.newHeap(kNNs);        }        heap.insert(dist,iter2);      }    }    if (heap != null) {      kNNs=heap.toKNNList();      storage.put(iter,kNNs);      rkNN_ids.add(iter);    }  }  return rkNN_ids;}  }
class C{  public static PsiFile addIfMissingFile(PsiDirectory dir,PsiFile file){  final PsiFile existingFile=dir.findFile(file.getName());  if (existingFile != null) {    return existingFile;  }  return (PsiFile)dir.add(file);}  }
class C{  protected void initChildOf(APMSpanBuilder builder,TraceReporter reporter,Reference ref){  if (ref.getReferredTo() instanceof APMSpan) {    APMSpan parent=(APMSpan)ref.getReferredTo();    if (parent.getNodeBuilder() != null) {      nodeBuilder=new NodeBuilder(parent.getNodeBuilder());      traceContext=parent.traceContext;      if (parent.getTags().containsKey(Constants.PROP_TRANSACTION_NAME) && traceContext.getBusinessTransaction() == null) {        traceContext.setBusinessTransaction(parent.getTags().get(Constants.PROP_TRANSACTION_NAME).toString());      }    }  } else   if (ref.getReferredTo() instanceof APMSpanBuilder) {    APMSpanBuilder parentBuilder=(APMSpanBuilder)ref.getReferredTo();    initTopLevelState(this,reporter);    if (parentBuilder.getState().containsKey(Constants.HAWKULAR_APM_ID)) {      setInteractionId(parentBuilder.getState().get(Constants.HAWKULAR_APM_ID).toString(),NodeType.Consumer);      if (parentBuilder.getState().containsKey(Constants.HAWKULAR_APM_TXN)) {        traceContext.setBusinessTransaction(parentBuilder.getState().get(Constants.HAWKULAR_APM_TXN).toString());      }      if (parentBuilder.getState().containsKey(Constants.HAWKULAR_APM_LEVEL)) {        traceContext.setReportingLevel(parentBuilder.getState().get(Constants.HAWKULAR_APM_LEVEL).toString());      }    } else {      getNodeBuilder().setNodeType(NodeType.Consumer);    }  } else {    log.severe("Unknown parent type = " + ref.getReferredTo());  }}  }
class C{  public String toString(){  return getName();}  }
class C{  public boolean isAnyBPartner(){  Object oo=get_Value(COLUMNNAME_AnyBPartner);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public LogEntry(String timestamp,String contents){  this.timestamp=timestamp;  this.contents=contents;}  }
class C{  void fireMonitorStatusChangedEvents(List inserted,List removed){  MonitorStatusChangeEvent ev=null;  ArrayList registered=null;synchronized (listeners) {    registered=(ArrayList)listeners.clone();  }  for (Iterator i=registered.iterator(); i.hasNext(); ) {    VmListener l=(VmListener)i.next();    if (ev == null) {      ev=new MonitorStatusChangeEvent(this,inserted,removed);    }    l.monitorStatusChanged(ev);  }}  }
class C{  private void startClient(){  if (flumeClient != null && !flumeClient.isActive()) {    flumeClient.close();    flumeClient=null;  }  if (flumeClient == null) {    try {      flumeClient=RpcClientFactory.getDefaultInstance(flumeHostName,flumePort,maxSpanBatchSize);    } catch (    FlumeException e) {      LOG.warn("Failed to create Flume RPC Client. " + e.getMessage());    }  }}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  String curName=action.get("target");  String newName=action.get("args");  if ((newName == null) || (newName.length() == 0)) {    player.sendPrivateText("Please issue the old and the new name.");    return;  }  final List<DomesticAnimal> animals=player.getAnimals();  if (animals.isEmpty()) {    player.sendPrivateText("You don't own any " + curName);  } else {    DomesticAnimal animal=null;    do {      animal=player.searchAnimal(curName,false);      if (animal != null) {        if ((newName.charAt(0) == '\'') && (newName.charAt(newName.length() - 1) == '\'')) {          newName=newName.substring(1,newName.length() - 1);        }        newName=newName.trim();        if (player.searchAnimal(newName,true) != null) {          player.sendPrivateText("You own already a pet named '" + newName + "'");        } else         if (newName.length() > 0) {          if (newName.length() > 20) {            player.sendPrivateText("The new name of your pet must not be longer than 20 characters.");          } else {            final String oldName=animal.getTitle();            animal.setTitle(newName);            if (oldName != null) {              player.sendPrivateText("You changed the name of '" + oldName + "' to '"+ newName+ "'");            } else {              player.sendPrivateText("Congratulations, your " + curName + " is now called '"+ newName+ "'.");            }            new GameEvent(player.getName(),"name",animal.getRPClass().getName(),newName).raise();          }        } else {          player.sendPrivateText("Please don't use empty names.");        }      } else {        final int idxSpace=newName.indexOf(' ');        if (idxSpace != -1) {          final int idxLastSpace=newName.lastIndexOf(' ',idxSpace);          curName+=" " + newName.substring(0,idxSpace);          newName=newName.substring(idxLastSpace + 1);        } else {          break;        }      }    } while (animal == null);    if (animal == null) {      player.sendPrivateText("You don't own a pet called '" + curName + "'");    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tSet the attribute selection method" + " to use. 1 = None, 2 = Greedy.\n" + "\t(default 0 = M5' method)","S",1,"-S <number of selection method>"));  newVector.addElement(new Option("\tDo not try to eliminate colinear" + " attributes.\n","C",0,"-C"));  newVector.addElement(new Option("\tSet the attribute selection method" + " to use. 1 = None, 2 = Greedy.\n" + "\t(default 0 = M5' method)","S",1,"-S <number of selection method>"));  newVector.addElement(new Option("\tSet ridge parameter (default 1.0e-8).\n","R",1,"-R <double>"));  newVector.addElement(new Option("\tConserve memory, don't keep dataset header and means/stdevs.\n" + "\tModel cannot be printed out if this option is enabled." + "\t(default: keep data)","minimal",0,"-minimal"));  newVector.addElement(new Option("\tOutput additional statistics.","additional-stats",0,"-additional-stats"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public static String stringFor(int n){switch (n) {case CU_PREFER_PTX:    return "CU_PREFER_PTX";case CU_PREFER_BINARY:  return "CU_PREFER_BINARY";}return "INVALID CUjit_fallback: " + n;}  }
class C{  public static void serialize(Serializable obj,ByteArrayOutputStream bout){  try {    ObjectOutputStream out=new ObjectOutputStream(bout);    out.writeObject(obj);    out.close();  } catch (  IOException e) {    throw new IllegalStateException("Could not serialize " + obj,e);  }}  }
class C{  public VFSShare(String shareName,String path,VirtualVolume backend,IVolume volume,KeyPair deviceKeys) throws DeviceKeyException {  this.backend=backend;  this.shareName=shareName;  this.volume=volume;  this.publicDeviceKey=deviceKeys.getPublic();  this.privateDeviceKey=deviceKeys.getPrivate();  try {    this.obfuscationKey=CryptCore.decryptSymmertricKey(volume.getEncryptedObfuscationKey(publicDeviceKey),privateDeviceKey);  } catch (  SymmetricKeyDecryptionException e) {    throw new RuntimeException("Could not decrypt obfuscation key.",e);  }catch (  SymmetricKeyNotFoundException e) {    throw new DeviceKeyException(e);  }  try {    this.obfuscator=org.panbox.core.crypto.AbstractObfuscatorFactory.getFactory(FileObfuscatorFactory.class).getInstance(path,shareName);  } catch (  ClassNotFoundException|InstantiationException|IllegalAccessException|ObfuscationException e) {    log.fatal("obfuscator intialization failed, quitting!",e);    throw new RuntimeException("Obfuscator intialization failed, quitting!",e);  }}  }
class C{  public IllegalStateException(){  super();}  }
class C{  public BlockBasePresenter(int focusZoomFactor,boolean useFocusDimmer){  mFocusZoomFactor=focusZoomFactor;  mUseFocusDimmer=useFocusDimmer;}  }
class C{  public boolean isExerciseStatement(int position){  return targetStatements.contains(position);}  }
class C{  private Proxy nextProxy() throws IOException {  if (!hasNextProxy()) {    throw new SocketException("No route to " + address.url().host() + "; exhausted proxy configurations: "+ proxies);  }  Proxy result=proxies.get(nextProxyIndex++);  resetNextInetSocketAddress(result);  return result;}  }
class C{  final void runWorker(Worker w){  Thread wt=Thread.currentThread();  Runnable task=w.firstTask;  w.firstTask=null;  w.unlock();  boolean completedAbruptly=true;  try {    while (task != null || (task=getTask()) != null) {      w.lock();      if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt();      try {        beforeExecute(wt,task);        Throwable thrown=null;        try {          task.run();        } catch (        RuntimeException x) {          thrown=x;          throw x;        }catch (        Error x) {          thrown=x;          throw x;        }catch (        Throwable x) {          thrown=x;          throw new Error(x);        } finally {          afterExecute(task,thrown);        }      }  finally {        task=null;        w.completedTasks++;        w.unlock();      }    }    completedAbruptly=false;  }  finally {    processWorkerExit(w,completedAbruptly);  }}  }
class C{  public static void clearNetCookies(){  java.net.CookieManager cookieManager=getCookieManager();  CookieStore cookieStore=cookieManager.getCookieStore();  if (cookieStore != null) {    cookieStore.removeAll();  }}  }
class C{  public DragControl(String action){  this.repaint=false;  this.action=action;}  }
class C{  public static void cancelThumbnailRequest(ContentResolver cr,long origId){  InternalThumbnails.cancelThumbnailRequest(cr,origId,EXTERNAL_CONTENT_URI,InternalThumbnails.DEFAULT_GROUP_ID);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void angularObjectRemove(String name,String noteId,String paragraphId){  Map<String,String> removeObject=new HashMap<String,String>();  removeObject.put("name",name);  removeObject.put("noteId",noteId);  removeObject.put("paragraphId",paragraphId);  sendEvent(new RemoteInterpreterEvent(RemoteInterpreterEventType.ANGULAR_OBJECT_REMOVE,gson.toJson(removeObject)));}  }
class C{  protected List<String> readFromFile(String filename){  Path path=new File(filename).toPath();  List<String> result=new ArrayList<>();  try {    List<String> tempResult=Files.readAllLines(path);    if (tempResult != null) {      result.addAll(tempResult);    }  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to read from file. ",e);  }  return result;}  }
class C{  @Deprecated public List<?> filter(String filterModule,String filterName,Value... filterArgs) throws AerospikeException {  throw new NotImplementedException();}  }
class C{  @Override public String toString(){  return this.getClass().getName();}  }
class C{  static MBeanServer start(){  if (!isStarted) {    mbeanServer=createMBeanServer();    registry=createRegistry();    registerServerNotificationListener();    createRefreshTimer();    isStarted=true;  }  return mbeanServer;}  }
class C{  static private boolean isNamedSolutionSetScan(final AST2BOpContext ctx,final NamedSubqueryInclude nsi){  final JoinGroupNode parentJoinGroup=nsi.getParentJoinGroup();  final boolean firstInJoinGroup=parentJoinGroup.get(0) == nsi;  if (firstInJoinGroup && parentJoinGroup.getParent() == null) {    final QueryBase dominatingQuery=(QueryBase)ctx.sa.findParent(parentJoinGroup);    if (dominatingQuery instanceof QueryRoot || dominatingQuery instanceof NamedSubqueryRoot) {      final ISolutionSetStats exogenousStats=ctx.getSolutionSetStats();      if (exogenousStats.getSolutionSetSize() <= 100) {        return true;      }    }  }  return false;}  }
class C{  public boolean supportsMixedCaseIdentifiers() throws SQLException {  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ExtraCategoryAction(DataEditor editor){  super("Replace Missing Values by Extra Category");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public void testCreateTracksInMyTracks() throws IOException {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.createSimpleTrack(3,true);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFilesNumber(drive);}  }
class C{  private void cleanUp(IR ir){  Simple simple=new Simple(-1,false,false,false,false);  simple.perform(ir);  BranchOptimizations branchOpt=new BranchOptimizations(0,true,true);  branchOpt.perform(ir);  cbsReg=null;  DefUse.recomputeSpansBasicBlock(ir);  DefUse.recomputeSSA(ir);}  }
class C{  public Builder addMatch1Method(Match1MethodSpec match1MethodSpec,int maxArity){  checkArgument(maxArity <= MAX_ARITY,"Arity greater than " + MAX_ARITY + "is not currently supported");  match1Methods.addAll(new Match1MethodPermutationBuilder(matchType,match1MethodSpec,maxArity).build());  return this;}  }
class C{  @Override public int intValue(){  return value;}  }
class C{  public void unlock(){  if (fileLock != null) {    U.releaseQuiet(fileLock);    fileLock=null;  }}  }
class C{  protected InputSource resolveEnt(String name,String pubid,String sysid) throws SAXException, IOException {  return mHandEnt.resolveEntity(pubid,sysid);}  }
class C{  public static Tree<String> snipNullNodes(Tree<String> tree){  Tree<String> newTree=new Tree<>(tree.getLabel());  createSnippedTree(tree,newTree);  return newTree;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public ExtendedBufferCapabilities(BufferCapabilities caps){  super(caps.getFrontBufferCapabilities(),caps.getBackBufferCapabilities(),caps.getFlipContents());  this.vsync=VSyncType.VSYNC_DEFAULT;}  }
class C{  public void testSetIndexedProperty(){  UnboundArbitraryBean instance=new UnboundBeanImpl();  instance.setIndexedProperty(INDEXED_PROPERTY,1,NEW_VALUE);  instance.setIndexedProperty(MAPPED_INDEXED,1,NEW_VALUE);  assertEquals(OLD_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  assertEquals(OLD_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,0));  assertEquals(NEW_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,1));  assertEquals(NEW_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,1));  instance.setIndexedProperty(INDEXED_PROPERTY,0,NEW_VALUE);  instance.setIndexedProperty(MAPPED_INDEXED,0,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  assertEquals(NEW_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,0));  assertNull(instance.getIndexedProperty(NEW_PROPERTY,0));  instance.setIndexedProperty(NEW_PROPERTY,0,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getIndexedProperty(NEW_PROPERTY,0));}  }
class C{  public static <T extends Object>Function<T,Boolean> forPredicate(Predicate<T> predicate){  return new PredicateFunction<T>(predicate);}  }
class C{  protected void process(String algorithmName,Properties properties) throws IOException {  TimingProblem timingProblem=new TimingProblem(problem);  Algorithm algorithm=AlgorithmFactory.getInstance().getAlgorithm(algorithmName,properties,timingProblem);  if (!properties.containsKey("maxEvaluations")) {    throw new FrameworkException("maxEvaluations not defined");  }  int maxEvaluations=(int)Double.parseDouble(properties.getProperty("maxEvaluations"));  long startTime=System.nanoTime();  while (!algorithm.isTerminated() && (algorithm.getNumberOfEvaluations() < maxEvaluations)) {    algorithm.step();  }  long endTime=System.nanoTime();  NondominatedPopulation result=algorithm.getResult();  algorithm.terminate();  if (properties.containsKey("epsilon")) {    TypedProperties typedProperties=new TypedProperties(properties);    double[] epsilon=typedProperties.getDoubleArray("epsilon",null);    result=EpsilonHelper.convert(result,epsilon);  }  Properties timingData=new Properties();  timingData.setProperty("EvaluationTime",Double.toString(timingProblem.getTime()));  timingData.setProperty("TotalTime",Double.toString((endTime - startTime) / 1e9));  output.append(new ResultEntry(result,timingData));}  }
class C{  public void testReceive_BlockNoServerNull() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerNull();}  }
class C{  public Vector2 add(Vector2 that){  return Vector2.add(this,that);}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public QueryException(final String message,ExceptionCode exceptionCode){  super(message);  this.message=message;  this.errorCode=-1;  this.sqlState=exceptionCode.sqlState;}  }
class C{  public <K>T put(String url,String contentHeader,HttpEntity entity,Class<K> type,AjaxCallback<K> callback){  callback.url(url).type(type).method(AQuery.METHOD_PUT).header("Content-Type",contentHeader).param(AQuery.POST_ENTITY,entity);  return ajax(callback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.366 -0500",hash_original_method="A0A03885E6FE7F03CE9159285B1CDEFC",hash_generated_method="F0B500420E2688A267B32A8DCC5329DB") protected void revokeConnection(){  if (managedConn == null)   return;  log.warn(MISUSE_MESSAGE);  managedConn.detach();  try {    uniquePoolEntry.shutdown();  } catch (  IOException iox) {    log.debug("Problem while shutting down connection.",iox);  }}  }
class C{  public Crossfader withSavedInstance(Bundle savedInstance){  this.mSavedInstance=savedInstance;  return this;}  }
class C{  private JMenu createCoupleMenu(){  JMenu coupleMenu=new JMenu("Couplings");  coupleMenu.add(actionManager.getOpenCouplingManagerAction());  coupleMenu.add(actionManager.getOpenCouplingListAction());  return coupleMenu;}  }
class C{  public GreedyBestFirstSearch(QueueSearch impl,HeuristicFunction hf){  super(impl,new GreedyBestFirstEvaluationFunction(hf));}  }
class C{  public static CCSplitCols action(int c,float d){  return new CCSplitCols(c,d);}  }
class C{  public void restart(){  Executors.newSingleThreadExecutor().execute(socket);  try {    Thread.sleep(10);  } catch (  InterruptedException e) {  }}  }
class C{  private FileType makeFileType(String path){  FileType fileType=this.dataExportObjectFactory.createFileType();  fileType.setPath(path);  return fileType;}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public CF9(){  this(10);}  }
class C{  public void addExtensionNamespace(String uri,ExtensionHandler extNS){  m_extensionFunctionNamespaces.put(uri,extNS);}  }
class C{  public void testUnboundIssue572() throws Exception {  GenericBogusWrapper<Integer> list=new GenericBogusWrapper<Integer>(Integer.valueOf(7));  String json=new ObjectMapper().writeValueAsString(list);  assertEquals("{\"wrapped\":{\"value\":7}}",json);}  }
class C{  int crossOver(int index,E x){  int minChildIndex=findMinChild(index);  if ((minChildIndex > 0) && (ordering.compare(elementData(minChildIndex),x) < 0)) {    queue[index]=elementData(minChildIndex);    queue[minChildIndex]=x;    return minChildIndex;  }  return crossOverUp(index,x);}  }
class C{  public static String guessMimeTypeFromExtension(String extension){  if (extension == null || extension.isEmpty()) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  public WCPair(String w,int f){  word=w;  freq=f;}  }
class C{  public ZebraJTree(Object[] value){  super(value);}  }
class C{  public AuthorView(Context context){  this(context,null);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(DESCRIPTIONS)) {    accessDescriptions=new ArrayList<AccessDescription>();  } else {    throw new IOException("Attribute name [" + name + "] not recognized by "+ "CertAttrSet:AuthorityInfoAccessExtension.");  }  encodeThis();}  }
class C{  public static boolean encodeToFile(byte[] dataToEncode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);    success=true;  } catch (  java.io.IOException e) {    logger.error(e,e);    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public String toString(){  return buf.toString();}  }
class C{  private static Version readWorkspaceVersion(final URL workspace){  final File versionFile=getVersionFile(workspace,false);  if (versionFile == null || !versionFile.exists()) {    return null;  }  try {    final Properties props=new Properties();    final FileInputStream is=new FileInputStream(versionFile);    try {      props.load(is);    }  finally {      is.close();    }    String versionString=props.getProperty(WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME);    if (versionString != null) {      return Version.parseVersion(versionString);    }    versionString=props.getProperty(WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME_LEGACY);    if (versionString != null) {      return Version.parseVersion(versionString);    }    return null;  } catch (  final IOException e) {    IDEWorkbenchPlugin.log("Could not read version file " + versionFile,new Status(IStatus.ERROR,IDEWorkbenchPlugin.IDE_WORKBENCH,IStatus.ERROR,e.getMessage() == null ? "" : e.getMessage(),e));    return null;  }catch (  final IllegalArgumentException e) {    IDEWorkbenchPlugin.log("Could not parse version in " + versionFile,new Status(IStatus.ERROR,IDEWorkbenchPlugin.IDE_WORKBENCH,IStatus.ERROR,e.getMessage() == null ? "" : e.getMessage(),e));    return null;  }}  }
class C{  public int yForLineContaining(int offs) throws BadLocationException {  Rectangle alloc=getVisibleEditorRect();  if (alloc != null) {    RSTAView view=(RSTAView)getRootView(textArea).getView(0);    return view.yForLineContaining(alloc,offs);  }  return -1;}  }
class C{  public void testSingleClass() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.SingleNameSpace.py","SingleNameSpace","single_class.py",null));}  }
class C{  public static void moveEnd(JTextArea tf){  int position=tf.getText().length();  tf.setCaretPosition(position);}  }
class C{  private float validateProb(float prob){  if (prob >= 0.0 && prob <= 1.0) {    return prob;  } else {    return (float)0.5;  }}  }
class C{  protected void modify(float[] data,int frames,int channels,int rate){  propagate(data,frames,channels,rate);}  }
class C{  public EvalStateNodeNumber newSiblingState(){  int size=stateNumber.length;  int[] num=new int[size];  System.arraycopy(stateNumber,0,num,0,size);  num[size - 1]=stateNumber[size - 1] + 1;  return new EvalStateNodeNumber(num);}  }
class C{  public void deselect(final T value){  checkWidget();  checkNullElement();  this.selection.remove(value);  updateSelection();}  }
class C{  private CargoProject(String packaging,String groupId,String artifactId,String buildDirectory,String finalName,Artifact artifact,List<Artifact> attachedArtifacts,Set<Artifact> artifacts,Log log){  this.log=log;  this.packaging=packaging;  this.groupId=groupId;  this.artifactId=artifactId;  this.buildDirectory=buildDirectory;  this.finalName=finalName;  this.artifacts=new LinkedHashSet<Artifact>(1 + attachedArtifacts.size() + artifacts.size());  if (artifact != null) {    this.artifacts.add(artifact);  }  this.artifacts.addAll(attachedArtifacts);  this.artifacts.addAll(artifacts);}  }
class C{  public static Interval ensureExtent(Interval itemInterval,double minExtent){  double min=itemInterval.getMin();  double max=itemInterval.getMax();  if (min != max)   return itemInterval;  if (min == max) {    min=min - minExtent / 2.0;    max=min + minExtent / 2.0;  }  return new Interval(min,max);}  }
class C{  private EditProductionPanel(final IUIContext uiContext){  super(uiContext);}  }
class C{  public void testGetName() throws Exception {  Container c=new Jetty9xInstalledLocalContainer(null);  String name=c.getName();  assertEquals("Jetty 9.x",name);}  }
class C{  public String useDoubleTipText(){  return "Sets whether to use double instead of single precision.";}  }
class C{  public static byte[] encodeArrayCopy(final byte[] a){  return encodeArray(a,new byte[a.length],0,a.length);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == IdentifiableElement.class) {switch (derivedFeatureID) {case TypesPackage.TENUM_LITERAL__NAME:    return TypesPackage.IDENTIFIABLE_ELEMENT__NAME;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public ActionErrors modificarValoresFicha(Ficha ficha,Map parameters){  Locale locale=getServiceClient().getLocale();  ActionErrors errores=FichaFactory.getInstance(getServiceSession()).updateValores(ficha,parameters,false);  if (errores.isEmpty())   errores.add(ficha.ejecutarEvento(TipoEvento.AL_VALIDAR_DESCRIPCION,ficha,locale));  return errores;}  }
class C{  public boolean canGrow(World world,BlockPos pos,C crop){  return isCorrectSeason(world,pos,crop);}  }
class C{  protected void sequence_CharacterClass_Term(ISerializationContext context,CharacterClass semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public ClassEntry(Loader loader,String name,Path sourcePath,Path classPath){  this(loader.getClassLoader(),name,sourcePath,classPath,loader.getCodeSource(classPath));}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throw new NotSerializableException();}  }
class C{  @Override public void undeploy(Deployable deployable){  if (deployable.getType() == DeployableType.WAR) {    WAR war=(WAR)deployable;    undeployFile(getDeployableDir(deployable),war.getContext() + ".war");  } else   if (deployable.getType() == DeployableType.EAR) {    EAR ear=(EAR)deployable;    undeployFile(getDeployableDir(deployable),ear.getName() + ".ear");  } else   if (deployable.getType() == DeployableType.FILE || deployable.getType() == DeployableType.SAR) {    String fileName=getFileHandler().getName(deployable.getFile());    undeployFile(getDeployableDir(deployable),fileName);  } else {    super.undeploy(deployable);    return;  }}  }
class C{  public void testSendWithDelayAndOptNaglingOff(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setDelay(50);  test.setOptNagling(false);  test.doTestTransfer(100000);}  }
class C{  public int diagnoseMismatch(Environment env,Identifier nm,Type argTypes[],int start,Type margTypeResult[]) throws ClassNotFound {  int haveMatch[]=new int[argTypes.length];  Type margType[]=new Type[argTypes.length];  if (!diagnoseMismatch(env,nm,argTypes,start,haveMatch,margType))   return -2;  for (int i=start; i < argTypes.length; i++) {    if (haveMatch[i] < 4) {      margTypeResult[0]=margType[i];      return (i << 2) | haveMatch[i];    }  }  return -1;}  }
class C{  public CEditTagAction(final JFrame parent,final CTag tag){  super("Edit Tag Description");  m_parent=Preconditions.checkNotNull(parent,"IE01217: Parent argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01782: Tag can't be null.");}  }
class C{  public static double MCSCE2fitness(boolean useTrainingData,GEPIndividual ind,double parameters[]){  double threshold=parameters[0];  double MCSCE=MCSCE2rawFitness(useTrainingData,ind,threshold);  return (1000.0 * (1.0 - MCSCE));}  }
class C{  private void detachOffScreenChildren(boolean toLeft){  int numChildren=getChildCount();  int firstPosition=mFirstPosition;  int start=0;  int count=0;  if (toLeft) {    final int galleryLeft=getPaddingLeft();    for (int i=0; i < numChildren; i++) {      final View child=getChildAt(i);      if (child.getRight() >= galleryLeft) {        break;      } else {        count++;        mRecycler.add(firstPosition + i,child);      }    }  } else {    final int galleryRight=getWidth() - getPaddingRight();    for (int i=numChildren - 1; i >= 0; i--) {      final View child=getChildAt(i);      if (child.getLeft() <= galleryRight) {        break;      } else {        start=i;        count++;        mRecycler.add(firstPosition + i,child);      }    }  }  detachViewsFromParent(start,count);  if (toLeft) {    mFirstPosition+=count;  }}  }
class C{  public static boolean isInteger(String str){  try {    Integer.parseInt(str);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  static boolean isLightColor(final int color){  final int r=Color.red(color);  final int g=Color.green(color);  final int b=Color.blue(color);  final double threshold=0.21 * r + 0.72 * g + 0.07 * b;  return threshold > 128;}  }
class C{  protected ReferenceTargetImpl(){  super();}  }
class C{  public TermsQueryBuilder(String name,Iterable values){  this.name=name;  this.values=values;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Instance newInstance=(Instance)instance.copy();  if (!newInstance.isMissing(m_AttIndex.getIndex())) {    if (m_ValIndex.isInRange((int)newInstance.value(m_AttIndex.getIndex()))) {      newInstance.setValue(m_AttIndex.getIndex(),1);    } else {      newInstance.setValue(m_AttIndex.getIndex(),0);    }  }  push(newInstance);  return true;}  }
class C{  static void resetForTesting(){  log=null;  dialog=null;}  }
class C{  public SamFilterParamsBuilder excludeUnmapped(final boolean val){  mExcludeUnmapped=val;  return this;}  }
class C{  public Response<?> response(){  return response;}  }
class C{  public Object extractHardRef(Object o){  SoftReference w=(SoftReference)o;  if (w != null) {    return w.get();  }  return null;}  }
class C{  public void appendInstruction(Instruction s){  currentBBLE.block.appendInstruction(s);  setSourcePosition(s);  lastInstr=s;  if (DBG_INSTR || DBG_SELECTED)   db("-> " + s.getBytecodeIndex() + ":\t"+ s);}  }
class C{  public void registerActivityType(Class<? extends Activity> activityClass){  registerActivityType(activityClass.getName(),activityClass,new DefaultActivityFactory(activityClass));}  }
class C{  private void desCbcDecrypt(WrapToken token,byte[] key,InputStream is,int len,byte[] dataOutBuf,int dataOffset) throws GSSException, IOException {  int temp=0;  Cipher des=getInitializedDes(false,key,ZERO_IV);  WrapTokenInputStream truncatedInputStream=new WrapTokenInputStream(is,len);  CipherInputStream cis=new CipherInputStream(truncatedInputStream,des);  temp=cis.read(token.confounder);  len-=temp;  int blockSize=des.getBlockSize();  int numBlocks=len / blockSize - 1;  for (int i=0; i < numBlocks; i++) {    temp=cis.read(dataOutBuf,dataOffset,blockSize);    dataOffset+=blockSize;  }  byte[] finalBlock=new byte[blockSize];  temp=cis.read(finalBlock);  try {    des.doFinal();  } catch (  GeneralSecurityException e) {    GSSException ge=new GSSException(GSSException.FAILURE,-1,"Could not use DES cipher - " + e.getMessage());    ge.initCause(e);    throw ge;  }  int padSize=finalBlock[blockSize - 1];  if (padSize < 1 || padSize > 8)   throw new GSSException(GSSException.DEFECTIVE_TOKEN,-1,"Invalid padding on Wrap Token");  token.padding=WrapToken.pads[padSize];  blockSize-=padSize;  System.arraycopy(finalBlock,0,dataOutBuf,dataOffset,blockSize);}  }
class C{  private static void checkStringEquals(String expected,String actual,String label){  if (expected.equals(actual)) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  private static byte[] encode3to4(final byte[] b4,final byte[] threeBytes,final int numSigBytes,final int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public void writeConfigXml(Document configXml){  XmlUtils xmlUtil=new XmlUtils(getFileHandler());  xmlUtil.saveXml(configXml,getFileHandler().append(getDomainHome(),"config.xml"));}  }
class C{  public AbstractButton addAction(Action selectAction,Action deselectAction,int space,boolean isDefault,Class<? extends AbstractButton> buttonClass){  Action action;  if (deselectAction != null) {    action=makeSelectAction(selectAction,deselectAction);  } else {    action=selectAction;  }  if (isDefault && !JButton.class.isAssignableFrom(buttonClass)) {    throw new IllegalArgumentException("Only JButton objects can be default buttons");  }  AbstractButton button;  try {    button=buttonClass.newInstance();  } catch (  RuntimeException re) {    throw re;  }catch (  Exception e) {    throw new IllegalArgumentException("Cannot instantiate class " + buttonClass.getName());  }  if (deselectAction != null) {    buttonMap.put(selectAction,button);    buttonMap.put(deselectAction,button);  } else {    buttonMap.put(selectAction,button);  }  button.setAction(action);  if (action.getValue(Action.SMALL_ICON) != null) {    button.setMargin(new Insets(0,0,0,0));    button.setBorder(BorderFactory.createEmptyBorder());  }  maxWidth=Math.max(maxWidth,button.getPreferredSize().width);  maxHeight=Math.max(maxHeight,button.getPreferredSize().height);  add(button);  add(Box.createRigidArea(new Dimension(GAP_WIDTH,1)));  if (space > 0) {    add(Box.createRigidArea(new Dimension(space,1)));  }  Dimension size=new Dimension(maxWidth,maxHeight);  for (  Component comp : getComponents()) {    if (comp instanceof AbstractButton) {      AbstractButton but=(AbstractButton)comp;      but.setMinimumSize(size);      but.setPreferredSize(size);      but.setMaximumSize(size);    }  }  if (isDefault) {    defaultButton=(JButton)button;    setDefaultButton();  }  return button;}  }
class C{  public static void closeOutputStream(OutputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);    }  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VERSIONS:return isSetVersions();}throw new IllegalStateException();}  }
class C{  public String deployLatestVersion(){  if (log != null) {    log.info("Deploying version " + deployment.getVersion() + " to "+ deployment.getStage()+ " to Lambda function as $LATEST. ("+ functionArn+ ")");  }  updateCode();  return publishVersion();}  }
class C{  public void remove(int key){  map.remove(key);}  }
class C{  private static INaviCodeNode searchForSourceNodeOfEnterInlinedEdge(final INaviCodeNode node,final INaviFunction originalFunction,final Set<INaviCodeNode> visited){  if (visited.contains(node)) {    return null;  }  visited.add(node);  for (  final INaviEdge incomingEdge : node.getIncomingEdges()) {    if (incomingEdge.getType() == EdgeType.ENTER_INLINED_FUNCTION) {      if (incomingEdge.getSource() instanceof INaviCodeNode) {        return (INaviCodeNode)incomingEdge.getSource();      } else {        return null;      }    }  }  for (  final INaviEdge incomingEdge : node.getIncomingEdges()) {    if (incomingEdge.getSource() instanceof INaviCodeNode) {      final INaviCodeNode startNode=searchForSourceNodeOfEnterInlinedEdge((INaviCodeNode)incomingEdge.getSource(),originalFunction,visited);      if (startNode != null) {        return startNode;      }    }  }  return null;}  }
class C{  public LocalDateTime withSecondOfMinute(int second){  return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(),second));}  }
class C{  private void jbInit(boolean showTable) throws Exception {  getContentPane().add(mainPanel);  CTextArea info=new CTextArea(m_info.toString());  info.setReadWrite(false);  info.setOpaque(false);  info.setForeground(Color.blue);  info.setBorder(null);  if (showTable) {    mainPanel.add(info,BorderLayout.NORTH);    mainPanel.add(scrollPane,BorderLayout.CENTER);    scrollPane.getViewport().add(table);    scrollPane.setPreferredSize(new Dimension(500,100));  } else {    info.setPreferredSize(new Dimension(400,75));    mainPanel.add(info,BorderLayout.CENTER);  }  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);}  }
class C{  public void addOrUpdateExtension(WalletExtension extension){  String id=checkNotNull(extension).getWalletExtensionID();  lock.lock();  try {    extensions.put(id,extension);  }  finally {    lock.unlock();  }}  }
class C{  private void generateCode() throws IOException {  for (  ObjectMappableAnnotatedClass clazz : annotatedClasses) {    String packageName=getPackageName(clazz);    String mapperClassName=clazz.getSimpleClassName() + "Mapper";    TypeSpec mapperClass=TypeSpec.classBuilder(mapperClassName).addJavadoc("Generated class to work with Cursors and ContentValues for $T\n",ClassName.get(clazz.getElement())).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE).build()).addField(generateRxMappingMethod(clazz)).addMethod(generateContentValuesMethod(clazz,mapperClassName,"ContentValuesBuilder")).addType(generateContentValuesBuilderClass(clazz,mapperClassName,"ContentValuesBuilder")).build();    JavaFile.builder(packageName,mapperClass).build().writeTo(filer);  }}  }
class C{  public Wine runForeground(File executableToRun,List<String> arguments) throws CancelException {  runForeground(executableToRun,arguments,null);  return this;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public BlockOption(){}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public String restrictionString(){  String prefix=restrictionClass.getPackage().getName() + ".";  StringBuilder info=new StringBuilder();  if (restrictionClass.isInterface()) {    info.append("Implementing ");  } else {    info.append("Extending ");  }  info.append(restrictionClass.getName());  info.append(FormatUtil.NEWLINE);  List<Class<?>> known=getKnownImplementations();  if (!known.isEmpty()) {    info.append("Known classes (default package " + prefix + "):");    info.append(FormatUtil.NEWLINE);    for (    Class<?> c : known) {      info.append("->" + FormatUtil.NONBREAKING_SPACE);      String name=c.getName();      if (name.startsWith(prefix)) {        info.append(name.substring(prefix.length()));      } else {        info.append(name);      }      info.append(FormatUtil.NEWLINE);    }  }  return info.toString();}  }
class C{  public final synchronized int numElements(){  return numElements;}  }
class C{  public String fontName(){  return null;}  }
class C{  private static String[] removeUnuseful(String[] variables){  for (int i=0; i < variables.length; i++) {    variables[i]=removeUnuseful(variables[i]);  }  return variables;}  }
class C{  @Deprecated public static String format(double amount){  try {    return format(BigDecimal.valueOf(amount));  } catch (  NumberFormatException e) {    logger.log(Level.WARNING,"Failed to display " + amount + ": "+ e.getMessage(),e);    return "NaN";  }}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  protected void sendOnOffCommand(int newState){  if (log.isDebugEnabled()) {    log.debug("start sendOnOff(" + newState + ") Current: "+ mState);  }  int command1;  if (newState == ON) {    command1=Constants.CMD_LIGHT_ON_FAST;  } else   if (newState == OFF) {    command1=Constants.CMD_LIGHT_OFF_FAST;  } else {    log.warn("illegal state requested for Light: " + getSystemName());    return;  }  if (log.isDebugEnabled()) {    log.debug("set state " + newState + " "+ getSystemName());  }  InsteonSequence out=new InsteonSequence();  out.addFunction(idhighbyte,idmiddlebyte,idlowbyte,Constants.FUNCTION_REQ_STD,(Constants.FLAG_STD | (maxHops << Constants.FLAG_SHIFT_HOPSLEFT) | maxHops),command1,0);  tc.sendInsteonSequence(out,null);  if (log.isDebugEnabled()) {    log.debug("end sendOnOff(" + newState + ")  insteon "+ StringUtil.twoHexFromInt(idhighbyte)+ "."+ StringUtil.twoHexFromInt(idmiddlebyte)+ "."+ StringUtil.twoHexFromInt(idlowbyte)+ " cmd1: "+ command1);  }}  }
class C{  public CCodeBookmarkTableModel(final CCodeBookmarkManager bookmarkManager){  m_bookmarkManager=Preconditions.checkNotNull(bookmarkManager,"IE01311: Bookmarks manager can't be null");  initializeListeners();}  }
class C{  public void removeModerated(){  setMode("-m");}  }
class C{  public void writeBit(boolean bit) throws IOException {  if (bitField == -1) {    bitField=0;    mask=0b00000001;  }  if (bit) {    bitField|=mask;  }  mask<<=1;  if (mask == 0b100000000) {    flushBits();  }}  }
class C{  public PrincipleDirectionOfFire(String sidc){  super(sidc);}  }
class C{  public FileImageOutputStream(RandomAccessFile raf){  if (raf == null) {    throw new IllegalArgumentException("raf == null!");  }  this.raf=raf;  disposerRecord=new CloseableDisposerRecord(raf);  if (getClass() == FileImageOutputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Caret caret=target.getCaret();    DefaultCaret bidiCaret=(caret instanceof DefaultCaret) ? (DefaultCaret)caret : null;    int dot=caret.getDot();    Position.Bias[] bias=new Position.Bias[1];    Point magicPosition=caret.getMagicCaretPosition();    try {      if (magicPosition == null && (direction == SwingConstants.NORTH || direction == SwingConstants.SOUTH)) {        Rectangle r=(bidiCaret != null) ? target.getUI().modelToView(target,dot,bidiCaret.getDotBias()) : target.modelToView(dot);        magicPosition=new Point(r.x,r.y);      }      NavigationFilter filter=target.getNavigationFilter();      if (filter != null) {        dot=filter.getNextVisualPositionFrom(target,dot,(bidiCaret != null) ? bidiCaret.getDotBias() : Position.Bias.Forward,direction,bias);      } else {        dot=target.getUI().getNextVisualPositionFrom(target,dot,(bidiCaret != null) ? bidiCaret.getDotBias() : Position.Bias.Forward,direction,bias);      }      if (bias[0] == null) {        bias[0]=Position.Bias.Forward;      }      if (bidiCaret != null) {        if (select) {          bidiCaret.moveDot(dot,bias[0]);        } else {          bidiCaret.setDot(dot,bias[0]);        }      } else {        if (select) {          caret.moveDot(dot);        } else {          caret.setDot(dot);        }      }      if (magicPosition != null && (direction == SwingConstants.NORTH || direction == SwingConstants.SOUTH)) {        target.getCaret().setMagicCaretPosition(magicPosition);      }    } catch (    BadLocationException ex) {    }  }}  }
class C{  public static <T>List<T> patch(List<T> original,Patch<T> patch) throws PatchFailedException {  return patch.applyTo(original);}  }
class C{  public AbstractCompositeItems(){  items=new OrderedCompositeItem<T>();}  }
class C{  private boolean validateNetworkDisconnection(){  StringBuffer str=new StringBuffer("States: ");  str.append(printStates());  if (mStateDepository.get(0) != State.CONNECTED) {    str.append(String.format(" Initial state should be CONNECTED, but it is %s.",mStateDepository.get(0)));    mReason=str.toString();    return false;  }  State lastState=mStateDepository.get(mStateDepository.size() - 1);  if (lastState != mTransitionTarget) {    str.append(String.format(" Last state should be DISCONNECTED, but it is %s",lastState));    mReason=str.toString();    return false;  }  for (int i=1; i < mStateDepository.size() - 1; i++) {    State preState=mStateDepository.get(i - 1);    State curState=mStateDepository.get(i);    if ((preState == State.CONNECTED) && ((curState == State.DISCONNECTING) || (curState == State.DISCONNECTED))) {      continue;    } else     if ((preState == State.DISCONNECTING) && (curState == State.DISCONNECTED)) {      continue;    } else     if ((preState == State.DISCONNECTED) && (curState == State.DISCONNECTED)) {      continue;    } else {      str.append(String.format(" Transition state from %s to %s is not valid",preState.toString(),curState.toString()));      mReason=str.toString();      return false;    }  }  mReason=str.toString();  return true;}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  private void startDeviceAdminPrompt(ComponentName cdmDeviceAdmin){  DevicePolicyManager devicePolicyManager=(DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);  if (!devicePolicyManager.isAdminActive(cdmDeviceAdmin)) {    Intent deviceAdminIntent=new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);    deviceAdminIntent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN,cdmDeviceAdmin);    deviceAdminIntent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,getResources().getString(R.string.device_admin_enable_alert));    startActivityForResult(deviceAdminIntent,ACTIVATION_REQUEST);  } else {    Intent intent=new Intent(Intent.ACTION_MAIN);    intent.addCategory(Intent.CATEGORY_HOME);    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);    startActivity(intent);  }}  }
class C{  public JITOptions(){}  }
class C{  public static MessageDialog messageOnTheRun(final String message){  final MessageDialog $=message(message);  $.setBlockOnOpen(false);  return $;}  }
class C{  @Nonnull public BugInstance addMethod(String className,String methodName,String methodSig,boolean isStatic){  addMethod(MethodAnnotation.fromForeignMethod(className,methodName,methodSig,isStatic));  return this;}  }
class C{  private void shrinkSize(){  int i=longCount - 1;  while (i >= 0 && bits[i] == 0) {    --i;  }  this.longCount=i + 1;}  }
class C{  protected void moveCaret(MouseEvent e){  Point pt=new Point(e.getX(),e.getY());  Position.Bias[] biasRet=new Position.Bias[1];  int pos=component.getUI().viewToModel(component,pt,biasRet);  if (biasRet[0] == null)   biasRet[0]=Position.Bias.Forward;  if (pos >= 0) {    moveDot(pos,biasRet[0]);  }}  }
class C{  public void start(){  try {    server.start();  } catch (  Exception e) {    throw Throwables.propagate(e);  }  UrlChecker.waitUntilAvailable(getUrl("/healthz"),STARTUP_TIMEOUT_MS);}  }
class C{  public IssueMatcher syntaxError(boolean syntaxError){  return addEqualsMatcher("syntax error",syntaxError,null);}  }
class C{  public static String toString(Object[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public void sendDeploymentUnload(Entity loader,Entity loaded){  Object data[]={loader.getId(),loaded.getId()};  send(new Packet(Packet.COMMAND_ENTITY_DEPLOY_UNLOAD,data));}  }
class C{  public static EventType createEventType(StatementContext statementContext,StatViewAdditionalProps additionalProps,int streamNum){  Map<String,Object> schemaMap=new HashMap<String,Object>();  schemaMap.put(ViewFieldEnum.WEIGHTED_AVERAGE__AVERAGE.getName(),Double.class);  StatViewAdditionalProps.addCheckDupProperties(schemaMap,additionalProps,ViewFieldEnum.WEIGHTED_AVERAGE__AVERAGE);  String outputEventTypeName=statementContext.getStatementId() + "_wavgview_" + streamNum;  return statementContext.getEventAdapterService().createAnonymousMapType(outputEventTypeName,schemaMap,false);}  }
class C{  private static int blend_exclusion(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=ar + br - ((ar * br) >> 7);  int cg=ag + bg - ((ag * bg) >> 7);  int cb=ab + bb - ((ab * bb) >> 7);  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  private static boolean hasCarAccessAsDriver(Plan plan){  boolean result=false;  Iterator<PlanElement> iterator=plan.getPlanElements().iterator();  while (!result & iterator.hasNext()) {    PlanElement pe=iterator.next();    if (pe instanceof Leg) {      result=((Leg)pe).getMode().equalsIgnoreCase("car");    }  }  return result;}  }
class C{  public AccessToken(final String token,final String type,final long initialValidSeconds,final Date validUntil){  this(token,type,initialValidSeconds,validUntil,System.currentTimeMillis());}  }
class C{  public void testHugeTerm() throws IOException {  StringBuilder sb=new StringBuilder();  for (int i=0; i < 10240; i++) {    sb.append('a');  }  String input=sb.toString();  char token[]=new char[1024];  Arrays.fill(token,'a');  String expectedToken=new String(token);  String expected[]={expectedToken,expectedToken,expectedToken,expectedToken,expectedToken,expectedToken,expectedToken,expectedToken,expectedToken,expectedToken};  assertAnalyzesTo(sentence,input,expected);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__EXECUTE_CLAUSE_1:    return getExecuteClause_1();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_WHEN_1:  return getTraceWhen_1();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_FOR_1:return getTraceFor_1();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_PERIOD_1:return getTracePeriod_1();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_DURING_1:return getTraceDuring_1();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_CASE_ACTIVATION_1:return getTraceCaseActivation_1();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_RECORD_1:return getTraceRecord_1();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_LEVEL_1:return getTraceLevel_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private Object loadState() throws IOException, ClassNotFoundException {  ObjectInputStream ois=null;  try {    ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(stateFile)));    return ois.readObject();  }  finally {    if (ois != null) {      ois.close();    }  }}  }
class C{  protected SWFText defineText(Rect bounds,Matrix matrix,boolean hasAlpha) throws IOException {  bounds.write(out);  matrix.write(out);  return new SWFTextImpl(hasAlpha);}  }
class C{  protected Socks5BytestreamRequest(Socks5BytestreamManager manager,Bytestream bytestreamRequest){  this.manager=manager;  this.bytestreamRequest=bytestreamRequest;}  }
class C{  protected Object entryKey(HashEntry entry){  return entry.key;}  }
class C{  public synchronized void pushLayerEvent(int layerEventType,Layer[] layers){  if (synchronous) {    fireLayer(layerEventType,layers);  } else {    events.add(new SetLayerRunnable(layerEventType,layers));    if (t == null || !t.isAlive()) {      SetLayerRunnable runnable=popLayerEvent();      if (runnable != null) {        t=new Thread(runnable);        t.start();      }    }  }}  }
class C{  public static double acos(double a){  return StrictMath.acos(a);}  }
class C{  public void actionPerformed(ActionEvent e){  try {    File file=currentDisplayed;    File parent=file.getAbsoluteFile().getParentFile();    if (parent == null)     parent=file;    File imgDir=new File(parent.getAbsolutePath() + File.separator + "ref-img");    if (!imgDir.exists()) {      if (!imgDir.mkdir()) {        JOptionPane.showMessageDialog(Eeze.this.eezeFrame,"Can't create dir to store images: \n" + imgDir,"Save As Image",JOptionPane.ERROR_MESSAGE);        return;      }    }    String name=file.getName().substring(0,file.getName().lastIndexOf(".")) + ".png";    File target=new File(imgDir.getAbsolutePath() + File.separator + name);    if (target.exists() && JOptionPane.showConfirmDialog(Eeze.this.eezeFrame,"Stored image exists (" + name + "), overwrite?","Overwrite existing image file?",JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)     return;    BufferedImage image=Graphics2DRenderer.renderToImage(file.toURI().toURL().toExternalForm(),1024,768);    ImageIO.write(image,"png",target);    Toolkit.getDefaultToolkit().beep();    if (comparingWithImage) {      imagePanel.setImage(image);    }  } catch (  Exception e1) {    JOptionPane.showMessageDialog(Eeze.this.eezeFrame,"Error on trying to save image, check stack trace on console.","Save As Image",JOptionPane.ERROR_MESSAGE);    e1.printStackTrace();  }}  }
class C{  public TimerTrigger(long period,int count){  this.period=period;  this.count=count;}  }
class C{  @Override protected void onDestroy(){  this.stopSensorialRotation();  this.deactiveOrientation();  this.deactiveAccelerometer();  this.stopAnimation();  mFileDownloaderManager.removeAll();  if (mPanorama != null)   mPanorama.clear();  List<PLIReleaseView> releaseViewObjects=new ArrayList<PLIReleaseView>();  releaseViewObjects.add(mPanorama);  releaseViewObjects.add(mRenderer);  releaseViewObjects.add(mInternalCameraListener);  releaseViewObjects.add(mCurrentTransition);  releaseViewObjects.addAll(mInternalTouches);  releaseViewObjects.addAll(mCurrentTouches);  for (  PLIReleaseView releaseViewObject : releaseViewObjects)   if (releaseViewObject != null)   releaseViewObject.releaseView();  releaseViewObjects.clear();  super.onDestroy();}  }
class C{  public static String[] strings(){  String[] update=new String[MAX];  for (int i=0; i < MAX; i++) {    update[i]=new String("george");  }  return update;}  }
class C{  @Override public boolean discardArrived(String clientHandle,String id){  db=mqttDb.getWritableDatabase();  traceHandler.traceDebug(TAG,"discardArrived{" + clientHandle + "}, {"+ id+ "}");  int rows;  try {    rows=db.delete(ARRIVED_MESSAGE_TABLE_NAME,MqttServiceConstants.MESSAGE_ID + "='" + id+ "' AND "+ MqttServiceConstants.CLIENT_HANDLE+ "='"+ clientHandle+ "'",null);  } catch (  SQLException e) {    traceHandler.traceException(TAG,"discardArrived",e);    throw e;  }  if (rows != 1) {    traceHandler.traceError(TAG,"discardArrived - Error deleting message {" + id + "} from database: Rows affected = "+ rows);    return false;  }  int count=getArrivedRowCount(clientHandle);  traceHandler.traceDebug(TAG,"discardArrived - Message deleted successfully. - messages in db for this clientHandle " + count);  return true;}  }
class C{  private void assertCacheEntriesLoaded(int cnt){  IgniteCache<Integer,String> cache=grid().cache(null);  for (  Integer key : new ArrayList<>(new TreeSet<>(TEST_DATA.keySet())).subList(0,cnt))   assertEquals(TEST_DATA.get(key),cache.get(key));  assertEquals(cnt,cache.size(CachePeekMode.ALL));  grid().events(grid().cluster().forCacheNodes(null)).stopRemoteListen(remoteLsnr);}  }
class C{  private void computeLOFScores(KNNQuery<O> knnq,DBIDs ids,DoubleDataStore lrds,WritableDoubleDataStore lofs,DoubleMinMax lofminmax){  FiniteProgress progressLOFs=LOG.isVerbose() ? new FiniteProgress("Local Outlier Factor (LOF) scores",ids.size(),LOG) : null;  double lof;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    lof=computeLOFScore(knnq,iter,lrds);    lofs.putDouble(iter,lof);    lofminmax.put(lof);    LOG.incrementProcessed(progressLOFs);  }  LOG.ensureCompleted(progressLOFs);}  }
class C{  public RotationMatrixBuilder withRandomThetas(){  for (  Plane plane : planes) {    plane.setTheta(PRNG.nextDouble(0.0,2.0 * Math.PI));  }  return this;}  }
class C{  public void renderDataForProjection(Projection proj,Graphics g){  if (isProjectionOK(proj)) {    paint(g);  }}  }
class C{  public DurationConverter addDurationConverter(DurationConverter converter) throws SecurityException {  checkAlterDurationConverters();  if (converter == null) {    return null;  }  DurationConverter[] removed=new DurationConverter[1];  iDurationConverters=iDurationConverters.add(converter,removed);  return removed[0];}  }
class C{  @Override public int available(){  if (pos == -1) {    return tail - head - pad;  }  return pos - head;}  }
class C{  public static float sum(float[] array){  float sum=0;  for (  float x : array) {    sum+=x;  }  return sum;}  }
class C{  @Override public Generator<ILineSegment> construct(String[] args){  return new DoubleGenerator(Double.valueOf(args[0]),Double.valueOf(args[1]));}  }
class C{  public void addTree(TreeRTG tree){  this.addTree(tree,true);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("amount")) {    amount=changes.getInt("amount");    fireChange(PROP_AMOUNT);  }}  }
class C{  public static int secondaryHash(Object key){  return secondaryHash(key.hashCode());}  }
class C{  @EventBusListenerMethod(scope=EventScope.SESSION) void onEvent(final RolloutEvent event){switch (event) {case FILTER_BY_TEXT:case CREATE_ROLLOUT:case UPDATE_ROLLOUT:case SHOW_ROLLOUTS:    refreshGrid();  break;default :return;}}  }
class C{  @Override public String toString(){  return "Linear Probe[" + delta + "] for table of size "+ tableSize;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z != 0) {            val=0;            for (i=0; i < 8; i++) {              if (image.getValue(row + dY[i],col + dX[i]) != z) {                val=z;                break;              }            }            output.setValue(row,col,val);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public boolean hasNext(){  if (nextItem != null)   return true;  noNext();  return false;}  }
class C{  public static FunctionRenameDialog showNewInstance(Component contextComponent,Module module,HeaderConfigFunction renameFunction){  return new FunctionRenameDialog(contextComponent,module,renameFunction);}  }
class C{  protected void addToParentInfo(Openable child){  Openable parent=(Openable)child.getParent();  if (parent != null && parent.isOpen()) {    try {      OpenableElementInfo info=(OpenableElementInfo)parent.getElementInfo();      info.addChild(child);    } catch (    JavaModelException e) {    }  }}  }
class C{  public void init() throws ServletException {}  }
class C{  IVariableBinding resolveVariable(EnumConstantDeclaration enumConstant){  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean createInventory(MAcctSchema as,int AD_Org_ID,int M_Product_ID,int M_AttributeSetInstance_ID,int M_InventoryLine_ID,int M_CostElement_ID,BigDecimal Amt,BigDecimal Qty,String Description,String trxName){  String sql="DELETE M_CostDetail " + "WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0" + " AND M_InventoryLine_ID=" + M_InventoryLine_ID + " AND C_AcctSchema_ID ="+ as.getC_AcctSchema_ID()+ " AND M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID;  int no=DB.executeUpdate(sql,trxName);  if (no != 0)   s_log.config("Deleted #" + no);  MCostDetail cd=get(as.getCtx(),"M_InventoryLine_ID=?",M_InventoryLine_ID,M_AttributeSetInstance_ID,as.getC_AcctSchema_ID(),trxName);  if (cd == null) {    cd=new MCostDetail(as,AD_Org_ID,M_Product_ID,M_AttributeSetInstance_ID,M_CostElement_ID,Amt,Qty,Description,trxName);    cd.setM_InventoryLine_ID(M_InventoryLine_ID);  } else {    cd.setDeltaAmt(Amt.subtract(cd.getAmt()));    cd.setDeltaQty(Qty.subtract(cd.getQty()));    if (cd.isDelta()) {      cd.setProcessed(false);      cd.setAmt(Amt);      cd.setQty(Qty);    } else     return true;  }  boolean ok=cd.save();  if (ok && !cd.isProcessed()) {    MClient client=MClient.get(as.getCtx(),as.getAD_Client_ID());    if (client.isCostImmediate())     cd.process();  }  s_log.config("(" + ok + ") "+ cd);  return ok;}  }
class C{  public static OMCircle read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMCircle circle=null;  float lat, lon, radius;  int x, y, w, h;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_LATLON:    lat=dis.readFloat();  lon=dis.readFloat();radius=dis.readFloat();int units=dis.readByte();int nverts=dis.readInt();Length unit=Length.DECIMAL_DEGREE;switch (units) {case 0:unit=Length.KM;break;case 1:unit=Length.MILE;break;case 2:unit=Length.NM;break;default :}circle=new OMCircle(new LatLonPoint.Double(lat,lon),radius,unit,nverts);break;case RENDERTYPE_XY:x=dis.readInt();y=dis.readInt();w=dis.readInt();h=dis.readInt();circle=new OMCircle(x,y,w,h);break;case RENDERTYPE_OFFSET:lat=dis.readFloat();lon=dis.readFloat();x=dis.readInt();y=dis.readInt();w=dis.readInt();h=dis.readInt();circle=new OMCircle(lat,lon,x,y,w,h);break;default :}if (circle != null) {LinkProperties.loadPropertiesIntoOMGraphic(dis,circle,propertiesBuffer);}return circle;}  }
class C{  public BFGS(int maxIterations,LineSearch lineSearch){  setMaximumIterations(maxIterations);  setLineSearch(lineSearch);}  }
class C{  public static <W>ContextEncodedProbBackoffLm<W> readContextEncodedLmFromArpa(final String lmFile,final WordIndexer<W> wordIndexer,final ConfigOptions opts,final int lmOrder){  return readContextEncodedLmFromArpa(new ArpaLmReader<W>(lmFile,wordIndexer,lmOrder),wordIndexer,opts);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  onActivityResult(requestCode,resultCode,data,null);}  }
class C{  public InfoRegister createFolder(User user,Integer bookId,List atts,List inter,Map documents,String entidad) throws ValidationException, SecurityException, BookException, SessionException, AttributesException {  InfoRegister result=null;  try {    result=RegisterServices.createFolder(user,bookId,atts,inter,documents,entidad,false);  } catch (  TecDocException e) {    _logger.error("Impossible create new folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }catch (  ParseException e) {    _logger.error("Impossible create new folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }catch (  Exception e) {    _logger.error("Impossible create new folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }  return result;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == ThisArgProvider.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseFeatureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:  return N4JSPackage.N4_FIELD_ACCESSOR__BODY;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:return N4JSPackage.N4_FIELD_ACCESSOR__LOK;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseFeatureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:return N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME;default :return -1;}}if (baseClass == eu.numberfour.n4js.n4JS.FieldAccessor.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private MessageType checkMessageInitialized(MessageType message) throws InvalidProtocolBufferException {  if (message != null && !message.isInitialized()) {    throw newUninitializedMessageException(message).asInvalidProtocolBufferException().setUnfinishedMessage(message);  }  return message;}  }
class C{  public static String compareLines(final String[] erecs,final String[] arecs){  int i=0;  for (; i < erecs.length && i < arecs.length; i++) {    if (!erecs[i].trim().equals(arecs[i].trim())) {      return "" + (i + 1) + "c"+ (i + 1)+ StringUtils.LS+ "< "+ erecs[i].trim()+ StringUtils.LS+ "---"+ StringUtils.LS+ "> "+ arecs[i].trim()+ StringUtils.LS+ StringUtils.LS+ cat(arecs);    }  }  if (i < erecs.length) {    return "" + (i + 1) + "d"+ (i + 1)+ StringUtils.LS+ "< "+ erecs[i].trim()+ StringUtils.LS;  } else   if (i < arecs.length) {    return "" + (i + 1) + ">"+ (i + 1)+ StringUtils.LS+ "> "+ arecs[i].trim()+ StringUtils.LS;  }  return null;}  }
class C{  public boolean startsWith(String prefix,int start){  return regionMatches(start,prefix,0,prefix.count);}  }
class C{  private ExceptionSet computeEdgeExceptionSet(Edge edge,ExceptionSet thrownExceptionSet){  if (thrownExceptionSet.isEmpty()) {    return thrownExceptionSet;  }  ExceptionSet result=exceptionSetFactory.createExceptionSet();  if (edge.getType() == UNHANDLED_EXCEPTION_EDGE) {    result.addAll(thrownExceptionSet);    thrownExceptionSet.clear();    return result;  }  BasicBlock handlerBlock=edge.getTarget();  CodeExceptionGen handler=handlerBlock.getExceptionGen();  ObjectType catchType=handler.getCatchType();  if (Hierarchy.isUniversalExceptionHandler(catchType)) {    result.addAll(thrownExceptionSet);    thrownExceptionSet.clear();  } else {    for (ExceptionSet.ThrownExceptionIterator i=thrownExceptionSet.iterator(); i.hasNext(); ) {      ObjectType thrownType=i.next();      boolean explicit=i.isExplicit();      if (DEBUG) {        System.out.println("\texception type " + thrownType + ", catch type "+ catchType);      }      try {        if (Hierarchy.isSubtype(thrownType,catchType)) {          result.add(thrownType,explicit);          i.remove();          if (DEBUG) {            System.out.println("\tException is subtype of catch type: " + "will definitely catch");          }        } else         if (Hierarchy.isSubtype(catchType,thrownType)) {          result.add(thrownType,explicit);          if (DEBUG) {            System.out.println("\tException is supertype of catch type: " + "might catch");          }        }      } catch (      ClassNotFoundException e) {        AnalysisContext.reportMissingClass(e);        result.add(thrownType,explicit);      }    }  }  return result;}  }
class C{  public static String[] splitOptions(String optionString){  FastVector optionsVec=new FastVector();  StringTokenizer st=new StringTokenizer(optionString);  while (st.hasMoreTokens())   optionsVec.addElement(st.nextToken());  String[] options=new String[optionsVec.size()];  for (int i=0; i < optionsVec.size(); i++) {    options[i]=(String)optionsVec.elementAt(i);  }  return options;}  }
class C{  public void startAnimating(){  isAnimating=true;  invalidate();}  }
class C{  private ByteBuffer clientRequestPacket(GridClientMessage msg) throws IOException {  ByteBuffer res=marshaller.marshal(msg,45);  ByteBuffer slice=res.slice();  slice.put(IGNITE_REQ_FLAG);  slice.putInt(res.remaining() - 5);  slice.putLong(msg.requestId());  slice.put(U.uuidToBytes(msg.clientId()));  slice.put(U.uuidToBytes(msg.destinationId()));  return res;}  }
class C{  public FeaturesAndBundlesPublisher(){  super("org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher");  consolelog();}  }
class C{  public static byte[] readFile(File file) throws IOException {  assert file.exists();  assert file.length() < Integer.MAX_VALUE;  byte[] bytes=new byte[(int)file.length()];  try (FileInputStream fis=new FileInputStream(file)){    int readBytesCnt=fis.read(bytes);    assert readBytesCnt == bytes.length;  }   return bytes;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.386 -0500",hash_original_method="6D472F26B8815D9A75157924D7DB3DB8",hash_generated_method="0A0E6DA44D324DA85EA874CE831AF067") public SessionExpiresHeader createSessionExpiresHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  SessionExpires s=new SessionExpires();  s.setExpires(expires);  return s;}  }
class C{  public void evaluatePopulation(final EvolutionState state){  int numinds[]=new int[state.evalthreads];  int from[]=new int[state.evalthreads];  boolean[] assessFitness=new boolean[state.population.subpops.length];  for (int i=0; i < assessFitness.length; i++)   assessFitness[i]=true;  for (int y=0; y < state.evalthreads; y++) {    if (y < state.evalthreads - 1)     numinds[y]=state.population.subpops[0].individuals.length / state.evalthreads; else     numinds[y]=state.population.subpops[0].individuals.length / state.evalthreads + (state.population.subpops[0].individuals.length - (state.population.subpops[0].individuals.length / state.evalthreads) * state.evalthreads);    from[y]=(state.population.subpops[0].individuals.length / state.evalthreads) * y;  }  randomizeOrder(state,state.population.subpops[0].individuals);  GroupedProblemForm prob=(GroupedProblemForm)(p_problem.clone());  prob.preprocessPopulation(state,state.population,assessFitness,style == STYLE_SINGLE_ELIMINATION);switch (style) {case STYLE_SINGLE_ELIMINATION:    evalSingleElimination(state,state.population.subpops[0].individuals,0,prob);  break;case STYLE_ROUND_ROBIN:evalRoundRobin(state,from,numinds,state.population.subpops[0].individuals,0,prob);break;case STYLE_N_RANDOM_COMPETITORS_ONEWAY:evalNRandomOneWay(state,from,numinds,state.population.subpops[0].individuals,0,prob);break;case STYLE_N_RANDOM_COMPETITORS_TWOWAY:evalNRandomTwoWay(state,from,numinds,state.population.subpops[0].individuals,0,prob);break;default :state.output.fatal("Invalid competition style in CompetitiveEvaluator.evaluatePopulation()");}prob.postprocessPopulation(state,state.population,assessFitness,style == STYLE_SINGLE_ELIMINATION);}  }
class C{  void cleanupOperation(double newValue,double oldValue){}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW:    return getOwnedMembersRaw();case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPE_VARS:  return getTypeVars();case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPING_STRATEGY:return getTypingStrategy();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void checkComputeSignificanceDoesntAlterAverage(int algNumber) throws Exception {  MultiInfoCalculatorKraskov miCalc=getNewCalc(algNumber);  String kraskov_K="4";  miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);  super.testComputeSignificanceDoesntAlterAverage(miCalc,2,100);}  }
class C{  public void paintDesktopPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static long calculateChunkedContentLength(long originalLength,long chunkSize){  if (originalLength <= 0) {    throw new IllegalArgumentException("Nonnegative content length expected.");  }  long maxSizeChunks=originalLength / chunkSize;  long remainingBytes=originalLength % chunkSize;  return maxSizeChunks * calculateChunkHeaderLength(chunkSize) + (remainingBytes > 0 ? calculateChunkHeaderLength(remainingBytes) : 0) + calculateChunkHeaderLength(0);}  }
class C{  private void logGraphicalMemoryUsage(MemoryUsage memoryUsage,String title){  if (areMemoryUsageValuesCorrect(memoryUsage)) {    double value=(double)WIDTH / memoryUsage.getMax();    long used=Math.round(memoryUsage.getUsed() * value);    long committed=Math.round(memoryUsage.getCommitted() * value);    StringBuilder sb=new StringBuilder();    sb.append(START_END_CHAR);    sb.append('-');    sb.append(title);    for (int i=title.length() + 1; i < WIDTH; i++) {      sb.append('-');    }    sb.append(START_END_CHAR);    log.info(sb.toString());    sb=new StringBuilder();    sb.append(START_END_CHAR);    for (int i=0; i < used; i++) {      sb.append('/');    }    long pos=used;    if (pos <= committed) {      for (long i=pos; i < committed; i++) {        sb.append(' ');      }      sb.append('|');      pos=committed + 1L;    }    for (long i=pos; i < WIDTH; i++) {      sb.append(' ');    }    if (committed < WIDTH) {      sb.append(START_END_CHAR);    }    log.info(sb.toString());    sb=new StringBuilder();    sb.append(START_END_CHAR);    for (int i=0; i < WIDTH; i++) {      sb.append('-');    }    sb.append(START_END_CHAR);    log.info(sb.toString());  }}  }
class C{  public void paint(Graphics2D g2d){  if (stroke != null && paint != null) {    g2d.setPaint(paint);    g2d.setStroke(stroke);    g2d.draw(shape);  }}  }
class C{  @Override public void updateVolumePathParams(URI volumeURI,URI newVpoolURI,String opId) throws ControllerException {  blockRMI("updateVolumePathParams",volumeURI,newVpoolURI,opId);}  }
class C{  public synchronized int sendMessageWithClientById(Object newMessage,String clientId){  try {    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    log.debug("### sendMessageWithClientById ###" + clientId);    HashMap<String,Object> hsm=new HashMap<String,Object>();    hsm.put("client",currentClient);    hsm.put("message",newMessage);    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());          if (rcl == null) {          } else           if (rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {          } else {            if (conn instanceof IServiceCapableConnection) {              if (conn.getClient().getId().equals(clientId)) {                ((IServiceCapableConnection)conn).invoke("sendVarsToMessageWithClient",new Object[]{hsm},this);              }            }          }        }      }    }  } catch (  Exception err) {    log.error("[sendMessageWithClient] ",err);    return -1;  }  return 1;}  }
class C{  public static String reverseComplement(final String seq){  final StringBuilder sb=new StringBuilder();  for (int i=seq.length() - 1; i >= 0; i--) {    final char c=seq.charAt(i);switch (c) {case 'a':      sb.append('t');    break;case 'A':  sb.append('T');break;case 'c':sb.append('g');break;case 'C':sb.append('G');break;case 'g':sb.append('c');break;case 'G':sb.append('C');break;case 't':sb.append('a');break;case 'T':sb.append('A');break;case '-':break;default :sb.append(c);break;}}return sb.toString();}  }
class C{  private WebDoc createParameterPage(WebSessionCtx wsc,int processId,int windowID,int tableID,int recordID,int Type,String columnName,GridTab mTab){  MProcess process=null;  if (Type == 0)   process=MProcess.getFromMenu(wsc.ctx,processId); else   process=MProcess.get(wsc.ctx,processId);  if (process == null) {    WebDoc doc=WebDoc.createWindow("Process Not Found");    return doc;  }  WebDoc doc=WebDoc.createWindow(process.getName());  if (process.isWorkflow()) {    if (mTab == null) {      doc=WebDoc.createWindow("No Tab found");      return doc;    }    if (columnName.toString().equals("DocAction")) {      readReference();      option[] Options=dynInit(windowID,tableID,recordID,columnName,mTab);      td center=doc.addWindowCenter(false);      WebField wField=new WebField(wsc,columnName,columnName,columnName,17,22,22,false,false,false,false,false,false,processId,0,0,0,0,null,null,null,null,null);      if (process.getDescription() != null)       center.addElement(new p(new i(process.getDescription())));      if (process.getHelp() != null)       center.addElement(new p(process.getHelp(),AlignType.LEFT));      form myForm=new form("WProcess").setName("process" + process.getAD_Process_ID());      myForm.setTarget("WPopup");      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Process_ID",process.getAD_Process_ID()));      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Window_ID",windowID));      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Table_ID",tableID));      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Record_ID",recordID));      table myTable=new table("0","0","5","100%",null);      myTable.setID("WProcessParameter");      myTable.addElement(new tr().addElement(wField.getLabel()).addElement(createSelectField(columnName,Options)));      String text="Reset";      if (wsc.ctx != null)       text=Msg.getMsg(wsc.ctx,"Reset");      input restbtn=new input(input.TYPE_RESET,text,"  " + text);      restbtn.setID(text);      restbtn.setClass("resetbtn");      text="Submit";      if (wsc.ctx != null)       text=Msg.getMsg(wsc.ctx,"Submit");      input submitbtn=new input(input.TYPE_SUBMIT,text,"  " + text);      submitbtn.setID(text);      submitbtn.setClass("submitbtn");      myTable.addElement(new tr().addElement(new td(null,AlignType.RIGHT,AlignType.MIDDLE,false,restbtn)).addElement(new td(null,AlignType.LEFT,AlignType.MIDDLE,false,submitbtn)).addElement(new td(null,AlignType.RIGHT,AlignType.MIDDLE,false,null)));      myForm.addElement(myTable);      center.addElement(myForm);    }  } else {    td center=doc.addWindowCenter(false);    if (process.getDescription() != null)     center.addElement(new p(new i(process.getDescription())));    if (process.getHelp() != null)     center.addElement(new p(process.getHelp(),AlignType.LEFT));    form myForm=new form("WProcess").setName("process" + process.getAD_Process_ID());    myForm.setTarget("WPopup");    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Process_ID",process.getAD_Process_ID()));    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Window_ID",windowID));    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Table_ID",tableID));    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Record_ID",recordID));    table myTable=new table("0","0","5","100%",null);    myTable.setID("WProcessParameter");    MProcessPara[] parameter=process.getParameters();    for (int i=0; i < parameter.length; i++) {      MProcessPara para=parameter[i];      WebField wField=new WebField(wsc,para.getColumnName(),para.getName(),para.getDescription(),para.getAD_Reference_ID(),para.getFieldLength(),para.getFieldLength(),false,false,para.isMandatory(),false,false,false,para.getAD_Process_ID(),0,0,0,i,null,null,null,null,null);      WebField wFieldforRange=null;      if (para.isRange())       wFieldforRange=new WebField(wsc,para.getColumnName(),para.getName(),para.getDescription(),para.getAD_Reference_ID(),para.getFieldLength(),para.getFieldLength(),false,false,para.isMandatory(),false,false,false,para.getAD_Process_ID(),0,0,0,i + 1,null,null,null,null,null);      td toField=para.isRange() ? wFieldforRange.getField(para.getLookup(),para.getDefaultValue2()) : new td(WebEnv.NBSP);      myTable.addElement(new tr().addElement(wField.getLabel()).addElement(wField.getField(para.getLookup(),para.getDefaultValue())).addElement(toField));    }    String text="Reset";    if (wsc.ctx != null)     text=Msg.getMsg(wsc.ctx,"Reset");    input restbtn=new input(input.TYPE_RESET,text,"  " + text);    restbtn.setID(text);    restbtn.setClass("resetbtn");    text="Submit";    if (wsc.ctx != null)     text=Msg.getMsg(wsc.ctx,"Submit");    input submitbtn=new input(input.TYPE_SUBMIT,text,"  " + text);    submitbtn.setID(text);    submitbtn.setClass("submitbtn");    submitbtn.setOnClick("popUp('WProcess','WPopup')");    myTable.addElement(new tr().addElement(new td(null,AlignType.RIGHT,AlignType.MIDDLE,false,restbtn)).addElement(new td(null,AlignType.LEFT,AlignType.MIDDLE,false,submitbtn)).addElement(new td(null,AlignType.RIGHT,AlignType.MIDDLE,false,null)));    myForm.addElement(myTable);    center.addElement(myForm);  }  return doc;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void add(KeyName keyname){  this.constructionElement.appendChild(keyname.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public static boolean rectContains(final double aMinX,final double aMinY,final double aMaxX,final double aMaxY,final double bMinX,final double bMinY,final double bMaxX,final double bMaxY){  return !(bMinX < aMinX || bMinY < aMinY || bMaxX > aMaxX || bMaxY > aMaxY);}  }
class C{  protected void warnIf(boolean condition,String message){  if (condition)   set.warn(this,message);}  }
class C{  @VisibleForTesting boolean restartTopologyHandler(String topologyName){  Integer containerId=Context.topologyContainerId(config);  Scheduler.RestartTopologyRequest restartTopologyRequest=Scheduler.RestartTopologyRequest.newBuilder().setTopologyName(topologyName).setContainerIndex(containerId).build();  if (containerId == -1 || containerId == 0) {    SchedulerStateManagerAdaptor stateManager=Runtime.schedulerStateManagerAdaptor(runtime);    Boolean result=stateManager.deleteTMasterLocation(topologyName);    if (result == null || !result) {      LOG.severe("Failed to clear TMaster location. Check whether TMaster set it correctly.");      return false;    }  }  if (!schedulerClient.restartTopology(restartTopologyRequest)) {    LOG.log(Level.SEVERE,"Failed to restart with Scheduler: ");    return false;  }  LOG.fine("Scheduler restarted topology successfully.");  return true;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.959 -0500",hash_original_method="EF527252962F704D7452C6B99500917D",hash_generated_method="BE7655C07E1329CD326693E64EB0674A") public Token match(int tok) throws ParseException {  if (Debug.parserDebug) {    Debug.println("match " + tok);  }  if (tok > START && tok < END) {    if (tok == ID) {      if (!startsId())       throw new ParseException(buffer + "\nID expected",ptr);      String id=getNextId();      this.currentMatch=new Token();      this.currentMatch.tokenValue=id;      this.currentMatch.tokenType=ID;    } else     if (tok == SAFE) {      if (!startsSafeToken())       throw new ParseException(buffer + "\nID expected",ptr);      String id=ttokenSafe();      this.currentMatch=new Token();      this.currentMatch.tokenValue=id;      this.currentMatch.tokenType=SAFE;    } else {      String nexttok=getNextId();      Integer cur=(Integer)currentLexer.get(nexttok.toUpperCase());      if (cur == null || cur.intValue() != tok)       throw new ParseException(buffer + "\nUnexpected Token : " + nexttok,ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=nexttok;      this.currentMatch.tokenType=tok;    }  } else   if (tok > END) {    char next=lookAhead(0);    if (tok == DIGIT) {      if (!isDigit(next))       throw new ParseException(buffer + "\nExpecting DIGIT",ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=String.valueOf(next);      this.currentMatch.tokenType=tok;      consume(1);    } else     if (tok == ALPHA) {      if (!isAlpha(next))       throw new ParseException(buffer + "\nExpecting ALPHA",ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=String.valueOf(next);      this.currentMatch.tokenType=tok;      consume(1);    }  } else {    char ch=(char)tok;    char next=lookAhead(0);    if (next == ch) {      consume(1);    } else     throw new ParseException(buffer + "\nExpecting  >>>" + ch+ "<<< got >>>"+ next+ "<<<",ptr);  }  return this.currentMatch;}  }
class C{  public PainterChain(Painter[] chain){  this.chain=chain;}  }
class C{  private static String diffWhitespaceLineEndings(String dirty,String clean,boolean whitespace,boolean lineEndings) throws IOException {  dirty=visibleWhitespaceLineEndings(dirty,whitespace,lineEndings);  clean=visibleWhitespaceLineEndings(clean,whitespace,lineEndings);  RawText a=new RawText(dirty.getBytes(StandardCharsets.UTF_8));  RawText b=new RawText(clean.getBytes(StandardCharsets.UTF_8));  EditList edits=new EditList();  edits.addAll(MyersDiff.INSTANCE.diff(RawTextComparator.DEFAULT,a,b));  ByteArrayOutputStream out=new ByteArrayOutputStream();  try (DiffFormatter formatter=new DiffFormatter(out)){    formatter.format(edits,a,b);  }   String formatted=out.toString(StandardCharsets.UTF_8.name());  formatted=formatted.replace("\\ No newline at end of file\n","");  return NEWLINE_MATCHER.trimTrailingFrom(formatted);}  }
class C{  public PlotState(){  this.sharedAxisStates=new HashMap();}  }
class C{  @Override protected void buildActions(final List<String> list){  super.buildActions(list);  list.add(ActionType.USE.getRepresentation());  list.add(ActionType.KNOCK.getRepresentation());}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.DecisionStump";}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_CHANNEL_TABLE\"";  db.execSQL(sql);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static HashSet<Column> allColumnsForTableFilters(TableFilter[] filters){  HashSet<Column> allColumnsSet=New.hashSet();  for (int i=0; i < filters.length; i++) {    if (filters[i].getSelect() != null) {      filters[i].getSelect().isEverything(ExpressionVisitor.getColumnsVisitor(allColumnsSet));    }  }  return allColumnsSet;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static String readFirstLine(File file,Charset charset) throws IOException {  return asCharSource(file,charset).readFirstLine();}  }
class C{  public static double covarianceTwoColumns(double[][] data,int col1,int col2,double mean1,double mean2){  double c=0;  for (int t=0; t < data.length; t++) {    c+=(data[t][col1] - mean1) * (data[t][col2] - mean2);  }  return c / (double)(data.length - 1);}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ';':case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  private int[] createInitialLocals(){  int[] initialLocals=new int[itsMaxLocals];  int localsTop=0;  if ((itsCurrentMethod.getFlags() & ACC_STATIC) == 0) {    if ("<init>".equals(itsCurrentMethod.getName())) {      initialLocals[localsTop++]=TypeInfo.UNINITIALIZED_THIS;    } else {      initialLocals[localsTop++]=TypeInfo.OBJECT(itsThisClassIndex);    }  }  String type=itsCurrentMethod.getType();  int lParenIndex=type.indexOf('(');  int rParenIndex=type.indexOf(')');  if (lParenIndex != 0 || rParenIndex < 0) {    throw new IllegalArgumentException("bad method type");  }  int start=lParenIndex + 1;  StringBuilder paramType=new StringBuilder();  while (start < rParenIndex) {switch (type.charAt(start)) {case 'B':case 'C':case 'D':case 'F':case 'I':case 'J':case 'S':case 'Z':      paramType.append(type.charAt(start));    ++start;  break;case 'L':int end=type.indexOf(';',start) + 1;String name=type.substring(start,end);paramType.append(name);start=end;break;case '[':paramType.append('[');++start;continue;}String internalType=descriptorToInternalName(paramType.toString());int typeInfo=TypeInfo.fromType(internalType,itsConstantPool);initialLocals[localsTop++]=typeInfo;if (TypeInfo.isTwoWords(typeInfo)) {localsTop++;}paramType.setLength(0);}return initialLocals;}  }
class C{  @Override public void onPrepared(MediaPlayer mp){  Log_OC.v(TAG,"onPrepare");  mVideoPlayer.seekTo(mSavedPlaybackPosition);  if (mAutoplay) {    mVideoPlayer.start();  }  mMediaController.show(5000);}  }
class C{  public Stopwatch(){  start=System.currentTimeMillis();}  }
class C{  public boolean removeSpace(){  int start=pos;  while (pos < text.length && lcText[pos] == ' ') {    pos++;  }  return (start < pos);}  }
class C{  public void paint(Graphics g){  Color bColor;  if (isDropCell) {    bColor=DefaultLookup.getColor(this,ui,"Tree.dropCellBackground");    if (bColor == null) {      bColor=getBackgroundSelectionColor();    }  } else   if (selected) {    bColor=getBackgroundSelectionColor();  } else {    bColor=getBackgroundNonSelectionColor();    if (bColor == null) {      bColor=getBackground();    }  }  int imageOffset=-1;  if (bColor != null && fillBackground) {    imageOffset=getLabelStart();    g.setColor(bColor);    if (getComponentOrientation().isLeftToRight()) {      g.fillRect(imageOffset,0,getWidth() - imageOffset,getHeight());    } else {      g.fillRect(0,0,getWidth() - imageOffset,getHeight());    }  }  if (hasFocus) {    if (drawsFocusBorderAroundIcon) {      imageOffset=0;    } else     if (imageOffset == -1) {      imageOffset=getLabelStart();    }    if (getComponentOrientation().isLeftToRight()) {      paintFocus(g,imageOffset,0,getWidth() - imageOffset,getHeight(),bColor);    } else {      paintFocus(g,0,0,getWidth() - imageOffset,getHeight(),bColor);    }  }  super.paint(g);}  }
class C{  public static String addCapabilities(String title,Capabilities c){  String result;  String caps;  result=title + "\n";  caps=listCapabilities(c.getClassCapabilities());  if (caps.length() != 0) {    result+="Class -- ";    result+=caps;    result+="\n\n";  }  caps=listCapabilities(c.getAttributeCapabilities());  if (caps.length() != 0) {    result+="Attributes -- ";    result+=caps;    result+="\n\n";  }  caps=listCapabilities(c.getOtherCapabilities());  if (caps.length() != 0) {    result+="Other -- ";    result+=caps;    result+="\n\n";  }  result+="Additional\n";  result+="min # of instances: " + c.getMinimumNumberInstances() + "\n";  result+="\n";  return result;}  }
class C{  public T title(String value){  return attr("title",value);}  }
class C{  public static boolean isServiceReady(ServiceHost host,String serviceLinkFieldName,Class service) throws NoSuchFieldException, IllegalAccessException {  return host.checkServiceAvailable(getServiceSelfLink(serviceLinkFieldName,service));}  }
class C{  protected void appendNode(final Object newValue){}  }
class C{  private void resolveRelations(StaticDefinitions staticDefs,DefinitionsSpec spec){  for (  EntitySpec entitySpec : spec.getEntitySpecs()) {    for (    NodeSpec nodeSpec : entitySpec.getNodeSpecs()) {      RelationSpec relationSpec=nodeSpec.getRelationSpec();      if (relationSpec != null && relationSpec.getEntitySpec() == null) {        EntitySpec es=entitySpecByStaticKey.get(relationSpec.getEntitySpecIdentifier());        if (es == null) {          throw new IllegalStateException("Could not resolve realtion id " + relationSpec.getEntitySpecIdentifier());        }        relationSpec.setEntitySpec(es);        relationSpec.setEntitySpecIdentifier(null);        relationSpec.setJoinType(staticDefs.getJoinType(entitySpec,relationSpec));        if (relationSpec.isForeignKeyRelation()) {          Collection<NodeSpec> key=es.getPrimaryKeyNodes(true);          if (key.size() != 1) {            throw new IllegalStateException("Invalid key " + key + " for entity: "+ es);          }          if (nodeSpec.getJdbcType() == null) {            nodeSpec.setJdbcType(key.iterator().next().getJdbcType());            nodeSpec.setLength(key.iterator().next().getLength());          }        }        if (nodeSpec.getColumnName() == null) {          nodeSpec.setColumnName(staticDefs.createColumnName(nodeSpec));        }      }    }  }}  }
class C{  public ClipboardCommands(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.ENUMERATION_TYPE__ENUMERATOR:    return enumerator != null && !enumerator.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void addConceptMapAttributes(Element element,String conceptValueString){  String[] tokens=StringUtils.split(conceptValueString,"^");  ConceptService cs=Context.getConceptService();  try {    Concept concept=cs.getConcept(Integer.valueOf(tokens[0].trim()));    ConceptSource preferredSource=null;    String prefSourceName=Context.getAdministrationService().getGlobalProperty(XformConstants.GLOBAL_PROP_KEY_PREFERRED_CONCEPT_SOURCE);    if (StringUtils.isNotBlank(prefSourceName)) {      preferredSource=cs.getConceptSourceByName(prefSourceName);      if (concept.getConceptMappings().size() > 0) {        if (preferredSource != null) {          for (          ConceptMap map : concept.getConceptMappings()) {            if (OpenmrsUtil.nullSafeEquals(preferredSource,map.getSource())) {              element.setAttribute(null,ATTRIBUTE_OPENMRS_CONCEPT,map.getSource().getName() + ":" + map.getSourceCode());              return;            }          }        }      }    }  } catch (  NumberFormatException e) {    log.warn(e.getMessage());  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);}  }
class C{  public void find(String findText,int startPosition){  String findTextUpper=findText.toUpperCase();  try {    String text=getDocument().getText(0,getDocument().getLength());    int currstartPosition=text.toUpperCase().indexOf(findTextUpper,startPosition);    if (currstartPosition != -1) {      this.setSelectionStart(currstartPosition);      this.setSelectionEnd(currstartPosition + findTextUpper.length());      this.setSelectionColor(Color.red);      m_startPosition=currstartPosition + findTextUpper.length() + 1;    } else {      m_startPosition=0;    }  } catch (  BadLocationException e) {    e.printStackTrace();  }}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}/triggers/{triggerId}") @Description("Deletes a trigger having the given ID and removes any associations with the alert or notifications.") public Response deleteTriggersById(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,@PathParam("triggerId") BigInteger triggerId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (triggerId == null || triggerId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Trigger Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));  List<Trigger> listTrigger=new ArrayList<Trigger>(alert.getTriggers());  Iterator<Trigger> itTrigger=listTrigger.iterator();  while (itTrigger.hasNext()) {    Trigger trigger=itTrigger.next();    if (triggerId.equals(trigger.getId())) {      itTrigger.remove();      alert.setTriggers(listTrigger);      alertService.updateAlert(alert);      return Response.status(Status.OK).build();    }  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  public M_Registration(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  private void disconnectRepository(final IProject project,final TFSRepository repository,final boolean isConnected,final boolean disconnectServer){  Check.notNull(project,"project");  Check.notNull(repository,"repository");  final Set<IProject> projectsForRepository=repositoryToProjectMap.get(repository);  if (projectsForRepository == null) {    log.error(MessageFormat.format("Project Manager out of sync for repository {0}",repository.getName()));    return;  }  if (!projectsForRepository.contains(project)) {    if (isConnected) {      log.error(MessageFormat.format("Project Manager out of sync for repository {0} for project {1}",repository.getName(),project.getName()));    }  } else {    projectsForRepository.remove(project);  }  if (projectsForRepository.size() == 0) {    repositoryToProjectMap.remove(repository);    if (disconnectServer) {      repository.close();      repositoryManager.removeRepository(repository);    }  }  final TFSServer server=serverManager.getServer(repository.getVersionControlClient().getConnection());  if (server == null) {    log.error(MessageFormat.format("Project Manager cannot locate server for project {0} (repository = {1}",project.getName(),repository.getName()));    return;  }  final Set<IProject> projectsForServer=serverToProjectMap.get(server);  if (projectsForServer == null) {    log.error(MessageFormat.format("Project Manager out of sync for server {0}",server.getName()));    return;  }  if (!projectsForServer.contains(project)) {    log.error(MessageFormat.format("Project Manager out of sync for server {0} for project {1}",server.getName(),project.getName()));  } else {    projectsForServer.remove(project);    if (projectsForServer.size() == 0) {      serverToProjectMap.remove(server);      if (disconnectServer) {        server.close();        serverManager.removeServer(server);      }    }  }}  }
class C{  private static int sortLeftRightAndCenter(double[] array,int[] index,int l,int r){  int c=(l + r) / 2;  conditionalSwap(array,index,l,c);  conditionalSwap(array,index,l,r);  conditionalSwap(array,index,c,r);  return c;}  }
class C{  public static AtomContent forFeed(XmlNamespaceDictionary namespaceDictionary,Object feed){  return new AtomContent(namespaceDictionary,feed,false);}  }
class C{  public static <S>S loadFromSystemProperty(final Class<S> service){  try {    final String className=System.getProperty(service.getName());    if (className != null) {      Class<?> c=ClassLoader.getSystemClassLoader().loadClass(className);      return (S)c.newInstance();    }    return null;  } catch (  Exception e) {    throw new Error(e);  }}  }
class C{  private void loadEntriesFile(@NotNull FilePath filePath){  final FilePath parentPath=filePath.getParentPath();  if (parentPath == null) {    return;  }  refreshDotSvnAndEntries(parentPath);  if (filePath.isDirectory()) {    refreshDotSvnAndEntries(filePath);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static String quoteIdentifier(String identifier,String quoteChar,boolean isPedantic){  if (identifier == null) {    return null;  }  identifier=identifier.trim();  int quoteCharLength=quoteChar.length();  if (quoteCharLength == 0 || " ".equals(quoteChar)) {    return identifier;  }  if (!isPedantic && identifier.startsWith(quoteChar) && identifier.endsWith(quoteChar)) {    String identifierQuoteTrimmed=identifier.substring(quoteCharLength,identifier.length() - quoteCharLength);    int quoteCharPos=identifierQuoteTrimmed.indexOf(quoteChar);    while (quoteCharPos >= 0) {      int quoteCharNextExpectedPos=quoteCharPos + quoteCharLength;      int quoteCharNextPosition=identifierQuoteTrimmed.indexOf(quoteChar,quoteCharNextExpectedPos);      if (quoteCharNextPosition == quoteCharNextExpectedPos) {        quoteCharPos=identifierQuoteTrimmed.indexOf(quoteChar,quoteCharNextPosition + quoteCharLength);      } else {        break;      }    }    if (quoteCharPos < 0) {      return identifier;    }  }  return quoteChar + identifier.replaceAll(quoteChar,quoteChar + quoteChar) + quoteChar;}  }
class C{  protected String extractExenameFromCommandString(String cmd){  if (cmd.startsWith("\"")) {    int closingQuote=cmd.indexOf('"',1);    if (closingQuote == -1)     closingQuote=cmd.length();    cmd=cmd.substring(1,closingQuote);  } else {    int endOfFilename=-1;    for (; ; ) {      int nextSpace=cmd.indexOf(' ',endOfFilename + 1);      if (nextSpace == -1) {        endOfFilename=-1;        break;      }      String filename=cmd.substring(0,nextSpace);      if (!filename.toLowerCase().endsWith(".exe"))       filename+=".exe";      if (new File(filename).exists()) {        endOfFilename=nextSpace;        break;      }      endOfFilename=nextSpace;    }    if (endOfFilename != -1 && endOfFilename < cmd.length())     cmd=cmd.substring(0,endOfFilename);  }  return cmd;}  }
class C{  public int size(){  return data.length;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VALUE:    return isSetValue();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    URI snapId=getTaskCompleter().getId();    Snapshot snapshotObj=dbClient.queryObject(Snapshot.class,snapId);    URI fsUri=snapshotObj.getParent().getURI();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsUri);    String event=null;    if (_status == JobStatus.SUCCESS && snapshotObj != null) {      updateSnapshot(snapshotObj,dbClient,logMsgBuilder,vnxeApiClient);      event=String.format("Create file system snapshot successfully for URI: %s",getTaskCompleter().getId());    } else     if (_status == JobStatus.FAILED && snapshotObj != null) {      if (!snapshotObj.getInactive()) {        snapshotObj.setInactive(true);        dbClient.persistObject(snapshotObj);      }      event=String.format("Task %s failed to create file system snapshot: %s",opId,snapshotObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else {      logMsgBuilder.append(String.format("Could not find the snapshot:%s",snapId.toString()));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.CREATE_FILE_SYSTEM_SNAPSHOT,_isSuccess,event,"",snapshotObj,fsObj);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeCreateFileSystemSnapshotJob",e);    setErrorStatus("Encountered an internal error during file system snapshot create job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public URI location(){  return URI.create(locationVariablePath.getValue().strValue());}  }
class C{  public double pdf(double x){  double diff=x - mean;  return SQRT_INV * Math.exp(-(diff * diff) / (2.0 * variance));}  }
class C{  public static void snapToCycleDay(Time time,int cycleDay){  if (cycleDay > time.getActualMaximum(MONTH_DAY)) {    time.month+=1;    time.monthDay=1;    time.second=-1;  } else {    time.monthDay=cycleDay;  }  time.normalize(true);}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public static Gradient randomGradient(){  Gradient g=new Gradient();  g.randomize();  return g;}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected final void onActivityResult(final int requestCode,final int resultCode,final Intent data){  super.onActivityResult(requestCode,resultCode,data);switch (requestCode) {case REQUEST_GOOGLE_PLAY_SERVICES:    if (resultCode != Activity.RESULT_OK) {      checkPlayServices();    }  break;case REQUEST_ACCOUNT_PICKER:default :if (data != null && data.getExtras() != null) {  String accountName=data.getExtras().getString(AccountManager.KEY_ACCOUNT_NAME);  if (accountName != null) {    onSignedIn(accountName);    return;  }}startActivityForResult(credential.newChooseAccountIntent(),REQUEST_ACCOUNT_PICKER);break;}}  }
class C{  public void addCoalescingObject(CoalesceConfig object){  mCoalesceObjects.add(object);  mThetaRanges.add(object.spiral.calculateThetaForRadius(object.endProximity));}  }
class C{  private void configure(){  final LogManager manager=LogManager.getLogManager();  final String className=getClass().getName();  final String level=manager.getProperty(className + ".level");  setLevel((level == null) ? Level.INFO : Level.parse(level));  final Level levelStdOut=parseLevel(manager.getProperty(className + ".levelStdOut"));  final Level levelSplit=parseLevel(manager.getProperty(className + ".levelSplit"));  final Level levelStdErr=parseLevel(manager.getProperty(className + ".levelStdErr"));  setLevels(levelStdOut,levelSplit,levelStdErr);  final String filter=manager.getProperty(className + ".filter");  setFilter(makeFilter(filter));  final String formatter=manager.getProperty(className + ".formatter");  setFormatter(makeFormatter(formatter));  final String encoding=manager.getProperty(className + ".encoding");  try {    this.stdOutHandler.setEncoding(encoding);    this.stdErrHandler.setEncoding(encoding);  } catch (  final UnsupportedEncodingException e) {    ConcurrentLog.logException(e);  }  final String ignoreCtrlChrStr=manager.getProperty(className + ".ignoreCtrlChr");  this.ignoreCtrlChr=(ignoreCtrlChrStr == null) ? false : "true".equalsIgnoreCase(ignoreCtrlChrStr);}  }
class C{  private void insertContained(Node tree,Envelope itemEnv,Object item){  Assert.isTrue(tree.getEnvelope().contains(itemEnv));  boolean isZeroX=IntervalSize.isZeroWidth(itemEnv.getMinX(),itemEnv.getMaxX());  boolean isZeroY=IntervalSize.isZeroWidth(itemEnv.getMinY(),itemEnv.getMaxY());  NodeBase node;  if (isZeroX || isZeroY)   node=tree.find(itemEnv); else   node=tree.getNode(itemEnv);  node.add(item);}  }
class C{  public synchronized void addDataStatusListener(DataStatusListener l){  listenerList.add(DataStatusListener.class,l);}  }
class C{  public void visit(ActionHandler h){switch (code) {case sactionNextFrame:    h.nextFrame(this);  break;case sactionPrevFrame:h.prevFrame(this);break;case sactionPlay:h.play(this);break;case sactionStop:h.stop(this);break;case sactionToggleQuality:h.toggleQuality(this);break;case sactionStopSounds:h.stopSounds(this);break;case sactionAdd:h.add(this);break;case sactionSubtract:h.subtract(this);break;case sactionMultiply:h.multiply(this);break;case sactionDivide:h.divide(this);break;case sactionEquals:h.equals(this);break;case sactionLess:h.less(this);break;case sactionAnd:h.and(this);break;case sactionOr:h.or(this);break;case sactionNot:h.not(this);break;case sactionStringEquals:h.stringEquals(this);break;case sactionStringLength:h.stringLength(this);break;case sactionStringExtract:h.stringExtract(this);break;case sactionPop:h.pop(this);break;case sactionToInteger:h.toInteger(this);break;case sactionGetVariable:h.getVariable(this);break;case sactionSetVariable:h.setVariable(this);break;case sactionSetTarget2:h.setTarget2(this);break;case sactionStringAdd:h.stringAdd(this);break;case sactionGetProperty:h.getProperty(this);break;case sactionSetProperty:h.setProperty(this);break;case sactionCloneSprite:h.cloneSprite(this);break;case sactionRemoveSprite:h.removeSprite(this);break;case sactionTrace:h.trace(this);break;case sactionStartDrag:h.startDrag(this);break;case sactionEndDrag:h.endDrag(this);break;case sactionStringLess:h.stringLess(this);break;case sactionThrow:h.throwAction(this);break;case sactionCastOp:h.castOp(this);break;case sactionImplementsOp:h.implementsOp(this);break;case sactionRandomNumber:h.randomNumber(this);break;case sactionMBStringLength:h.mbStringLength(this);break;case sactionCharToAscii:h.charToASCII(this);break;case sactionAsciiToChar:h.asciiToChar(this);break;case sactionGetTime:h.getTime(this);break;case sactionMBStringExtract:h.mbStringExtract(this);break;case sactionMBCharToAscii:h.mbCharToASCII(this);break;case sactionMBAsciiToChar:h.mbASCIIToChar(this);break;case sactionDelete:h.delete(this);break;case sactionDelete2:h.delete2(this);break;case sactionDefineLocal:h.defineLocal(this);break;case sactionCallFunction:h.callFunction(this);break;case sactionReturn:h.returnAction(this);break;case sactionModulo:h.modulo(this);break;case sactionNewObject:h.newObject(this);break;case sactionDefineLocal2:h.defineLocal2(this);break;case sactionInitArray:h.initArray(this);break;case sactionInitObject:h.initObject(this);break;case sactionTypeOf:h.typeOf(this);break;case sactionTargetPath:h.targetPath(this);break;case sactionEnumerate:h.enumerate(this);break;case sactionAdd2:h.add2(this);break;case sactionLess2:h.less2(this);break;case sactionEquals2:h.equals2(this);break;case sactionToNumber:h.toNumber(this);break;case sactionToString:h.toString(this);break;case sactionPushDuplicate:h.pushDuplicate(this);break;case sactionStackSwap:h.stackSwap(this);break;case sactionGetMember:h.getMember(this);break;case sactionSetMember:h.setMember(this);break;case sactionIncrement:h.increment(this);break;case sactionDecrement:h.decrement(this);break;case sactionCallMethod:h.callMethod(this);break;case sactionNewMethod:h.newMethod(this);break;case sactionInstanceOf:h.instanceOf(this);break;case sactionEnumerate2:h.enumerate2(this);break;case sactionBitAnd:h.bitAnd(this);break;case sactionBitOr:h.bitOr(this);break;case sactionBitXor:h.bitXor(this);break;case sactionBitLShift:h.bitLShift(this);break;case sactionBitRShift:h.bitRShift(this);break;case sactionBitURShift:h.bitURShift(this);break;case sactionStrictEquals:h.strictEquals(this);break;case sactionGreater:h.greater(this);break;case sactionStringGreater:h.stringGreater(this);break;case sactionCall:h.call(this);break;case sactionQuickTime:h.quickTime(this);break;case sactionExtends:h.extendsOp(this);break;case sactionNop:h.nop(this);break;case sactionHalt:h.halt(this);break;default :assert false : ("unexpected action " + code);}}  }
class C{  public void unregisterSystemAssociation(Association assoc) throws AssociationNotRegisteredException, RegisterFailedException {  if (assoc == null) {    throw new IllegalArgumentException("The specified association is null");  }  try {    appAssocWriter.checkAssociationValidForUnregistration(assoc);  } catch (  IllegalArgumentException e) {    throw e;  }  if (!appAssocWriter.isAssociationExist(assoc,AppAssociationWriter.SYSTEM_LEVEL)) {    throw new AssociationNotRegisteredException("Assocation not existed!");  }  appAssocWriter.unregisterAssociation(assoc,AppAssociationWriter.SYSTEM_LEVEL);}  }
class C{  public final void rebind(Space space){  reset();  this.space=space;}  }
class C{  public boolean isChecked(){  return mChecked;}  }
class C{  @LargeTest public void testThumbnailForMPEG4WVGAWithSetBoundaries() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_800x480_515kbps_15fps_AMR_NB_8KHz_12.2kbps_m_0_26.mp4";  final int atTime=10000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  mediaVideoItem.setExtractBoundaries(1000,(mediaVideoItem.getDuration() - 21000));  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=(mediaVideoItem.getHeight() / 2);  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public double coefficient(int n){  return n < coefficients.length ? coefficients[n] : 0;}  }
class C{  protected static final float computePredictedRating(final float meanRating,final float userBaseline,final float itemBaseline,FloatMatrix user,FloatMatrix item,final int numRatings,FloatMatrix sumWeights,final float minRating,final float maxRating){  float predicted=meanRating + userBaseline + itemBaseline+ item.dot(user.add(sumWeights.mul(1.0f / (float)(Math.sqrt(numRatings)))));  predicted=Math.min(predicted,maxRating);  predicted=Math.max(predicted,minRating);  return predicted;}  }
class C{  protected void startUpload(String bucketName,String key,File file,boolean willBePublic) throws AmazonClientException, AmazonServiceException {  PutObjectRequest putObj=new PutObjectRequest(bucketName,key,file);  if (willBePublic) {    putObj.setCannedAcl(CannedAccessControlList.PublicRead);  }  amazonS3.putObject(putObj);}  }
class C{  public String toString(){  return m_name;}  }
class C{  public boolean isDependentOf(TaskFigure t){  if (this == t) {    return true;  }  for (  TaskFigure pre : getPredecessors()) {    if (pre.isDependentOf(t)) {      return true;    }  }  return false;}  }
class C{  public synchronized boolean isDestroyed(){  return this.destroyed;}  }
class C{  public void removeErrorCallback(OneSheeldErrorCallback errorCallback){  if (errorCallback != null && errorCallbacks.contains(errorCallback))   errorCallbacks.remove(errorCallback);}  }
class C{  static String addPrefixIfNotAlreadyThere(final String noun,final String prefixSingular,final String prefixPlural){  if (noun.startsWith(prefixSingular)) {    return noun;  } else   if (noun.startsWith(prefixPlural)) {    return noun;  } else {    return prefixSingular + noun;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element element2;  Attr attribute;  Attr attributeCloned;  Attr newAttr;  NodeList elementList;  String attrName;  String attrValue;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(1);  attribute=element.getAttributeNodeNS(nullNS,"street");  attributeCloned=(Attr)attribute.cloneNode(true);  element2=(Element)elementList.item(2);  newAttr=element2.setAttributeNodeNS(attributeCloned);  attrName=newAttr.getNodeName();  attrValue=newAttr.getNodeValue();  assertEquals("elementsetattributenodens02_attrName","street",attrName);  assertEquals("elementsetattributenodens02_attrValue","Yes",attrValue);}  }
class C{  public void testSuspend_ignoresNullPatientCursor(){  mController.suspend();}  }
class C{  private void writeSubstring(Kim kim) throws JSONException {  this.substringkeep.reserve();  zero();  int from=0;  int thru=kim.length;  int until=thru - minSubstringLength;  int previousFrom=none;  int previousThru=0;  while (true) {    int at;    int integer=none;    for (at=from; at <= until; at+=1) {      integer=this.substringkeep.match(kim,at,thru);      if (integer != none) {        break;      }    }    if (integer == none) {      break;    }    if (from != at) {      zero();      write(kim,from,at,this.substringhuff);      write(end,this.substringhuff);      if (previousFrom != none) {        this.substringkeep.registerOne(kim,previousFrom,previousThru);        previousFrom=none;      }    }    one();    writeAndTick(integer,this.substringkeep);    from=at + this.substringkeep.length(integer);    if (previousFrom != none) {      this.substringkeep.registerOne(kim,previousFrom,previousThru);      previousFrom=none;    }    previousFrom=at;    previousThru=from + 1;  }  zero();  if (from < thru) {    write(kim,from,thru,this.substringhuff);    if (previousFrom != none) {      this.substringkeep.registerOne(kim,previousFrom,previousThru);    }  }  write(end,this.substringhuff);  zero();  substringkeep.registerMany(kim);}  }
class C{  static double[] sumWithCompensation(double[] intermediateSum,double value){  double tmp=value - intermediateSum[1];  double sum=intermediateSum[0];  double velvel=sum + tmp;  intermediateSum[1]=(velvel - sum) - tmp;  intermediateSum[0]=velvel;  return intermediateSum;}  }
class C{  public void createDefaultTables(boolean generateFKConstraints){  JPAMTableCreator tableCreator=getDefaultTableCreator(generateFKConstraints);  tableCreator.createTables(this.session,this);}  }
class C{  public static short toShortValue(String str) throws PageException {  return (short)toDoubleValue(str);}  }
class C{  public int compareTo(Message other){  if (other == null) {    throw new NullPointerException();  } else   if (this.priority == other.priority) {    return I_AM_EQUAL_TO;  } else   if (this.priority < other.priority) {    return I_AM_LESS_THAN;  } else {    return I_AM_GREATER_THAN;  }}  }
class C{  public void onCancelBrokerData(Contract contract){  for (  Tradestrategy tradestrategy : m_historyDataRequests.values()) {    if (contract.equals(tradestrategy.getContract())) {      if (m_client.isConnected())       m_client.cancelHistoricalData(tradestrategy.getId());synchronized (m_historyDataRequests) {        m_historyDataRequests.remove(tradestrategy.getId());        m_historyDataRequests.notify();      }    }  }}  }
class C{  public boolean isSelected(final Object element){  return selectionModel.isSelected(element);}  }
class C{  protected void addNewDocument(String name,int parentId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile) throws Exception {  addNewDocument(name,parentId,fileExt,sortOrder,inputStreamDocumentFile,null);}  }
class C{  public GridFinishedFuture(){  res=null;  resFlag=RES;}  }
class C{  @Override public boolean needsMaterialization(){  return true;}  }
class C{  public static String evaluateExternal(String template) throws IOException {  if (template.startsWith(EXTERNAL_PREFIX)) {    File file=new File(template.substring(EXTERNAL_PREFIX.length()));    logger.info("Reading configuration value from file {}",file.getPath());    try {      return Files.toString(file,UTF_8).trim();    } catch (    IOException exception) {      logger.error("Error reading configuration value '{}':{}",template,exception);      throw exception;    }  }  return template;}  }
class C{  public double irr(final Leg cashflows,final double marketPrice,final DayCounter dayCounter,final Compounding compounding,final Frequency frequency,final Date settlementDate,final double tolerance,final int maxIterations,final double guess){  Date date=settlementDate;  if (date.isNull()) {    date=new Settings().evaluationDate();  }  int lastSign=sign(-marketPrice), signChanges=0;  for (int i=0; i < cashflows.size(); ++i) {    if (!cashflows.get(i).hasOccurred(date)) {      final int thisSign=sign(cashflows.get(i).amount());      if (lastSign * thisSign < 0) {        signChanges++;      }      if (thisSign != 0) {        lastSign=thisSign;      }    }  }  QL.ensure(signChanges > 0,infeasible_cashflow);  final Brent solver=new Brent();  solver.setMaxEvaluations(maxIterations);  return solver.solve(new IRRFinder(cashflows,marketPrice,dayCounter,compounding,frequency,date),tolerance,guess,guess / 10.0);}  }
class C{  public static void enquote(String s,StringBuilder sb){  if (s == null || s.length() == 0) {    sb.append("\"\"");    return;  }  char c;  int i;  int len=s.length();  String t;  sb.append('"');  for (i=0; i < len; i+=1) {    c=s.charAt(i);    if ((c == '\\') || (c == '"')) {      sb.append('\\');      sb.append(c);    } else     if (c == '\b') {      sb.append("\\b");    } else     if (c == '\t') {      sb.append("\\t");    } else     if (c == '\n') {      sb.append("\\n");    } else     if (c == '\f') {      sb.append("\\f");    } else     if (c == '\r') {      sb.append("\\r");    } else {      if (c < ' ') {        t="000" + Integer.toHexString(c);        sb.append("\\u");        sb.append(t.substring(t.length() - 4));      } else {        sb.append(c);      }    }  }  sb.append('"');}  }
class C{  protected AnimatablePathDataValue(AnimationTarget target){  super(target);}  }
class C{  public final void readFully(byte b[]) throws IOException {  readFully(b,0,b.length);}  }
class C{  public Phaser(Phaser parent,int parties){  if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");  int phase=0;  this.parent=parent;  if (parent != null) {    final Phaser root=parent.root;    this.root=root;    this.evenQ=root.evenQ;    this.oddQ=root.oddQ;    if (parties != 0)     phase=parent.doRegister(1);  } else {    this.root=this;    this.evenQ=new AtomicReference<QNode>();    this.oddQ=new AtomicReference<QNode>();  }  this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);}  }
class C{  public void removeBlurErrors(int maxCapacity){  for (int i=0; i < numberOfBins; i++) {    if (occupancy[i] > maxCapacity) {      if (i != 0 && i != numberOfBins - 1) {        if (occupancy[i - 1] != occupancy[i] && occupancy[i] != occupancy[i + 1]) {          occupancy[i]=maxCapacity;        } else {          DebugLib.emptyFunctionForSettingBreakPoint();        }      } else       if (i == 0) {        if (occupancy[numberOfBins - 1] != occupancy[i] && occupancy[i] != occupancy[i + 1]) {          occupancy[i]=maxCapacity;        } else {          DebugLib.emptyFunctionForSettingBreakPoint();        }      } else       if (i == numberOfBins - 1) {        if (occupancy[i - 1] != occupancy[i] && occupancy[i] != occupancy[0]) {          occupancy[i]=maxCapacity;        } else {          DebugLib.emptyFunctionForSettingBreakPoint();        }      } else {        DebugLib.stopSystemAndReportInconsistency();      }    }  }}  }
class C{  @Override public DescribeStepResult describeStepRequest(AmazonElasticMapReduceClient emrClient,DescribeStepRequest describeStepRequest){  return emrClient.describeStep(describeStepRequest);}  }
class C{  void handleMouseEvent(int eventType,int modifierFlags,int buttonNumber,int clickCount,int x,int y,int absoluteX,int absoluteY){  final SunToolkit tk=(SunToolkit)Toolkit.getDefaultToolkit();  if ((buttonNumber > 2 && !tk.areExtraMouseButtonsEnabled()) || buttonNumber > tk.getNumberOfButtons() - 1) {    return;  }  int jeventType=isNpapiCallback ? NSEvent.npToJavaEventType(eventType) : NSEvent.nsToJavaEventType(eventType);  boolean dragged=jeventType == MouseEvent.MOUSE_DRAGGED;  if (dragged && lastDraggedAbsoluteX == absoluteX && lastDraggedRelativeX == x && lastDraggedAbsoluteY == absoluteY && lastDraggedRelativeY == y)   return;  if (dragged || jeventType == MouseEvent.MOUSE_PRESSED) {    lastDraggedAbsoluteX=absoluteX;    lastDraggedAbsoluteY=absoluteY;    lastDraggedRelativeX=x;    lastDraggedRelativeY=y;  }  int jbuttonNumber=MouseEvent.NOBUTTON;  int jclickCount=0;  if (jeventType != MouseEvent.MOUSE_MOVED && jeventType != MouseEvent.MOUSE_ENTERED && jeventType != MouseEvent.MOUSE_EXITED) {    jbuttonNumber=NSEvent.nsToJavaButton(buttonNumber);    jclickCount=clickCount;  }  int jmodifiers=NSEvent.nsToJavaMouseModifiers(buttonNumber,modifierFlags);  boolean jpopupTrigger=NSEvent.isPopupTrigger(jmodifiers);  eventNotifier.notifyMouseEvent(jeventType,System.currentTimeMillis(),jbuttonNumber,x,y,absoluteX,absoluteY,jmodifiers,jclickCount,jpopupTrigger,null);}  }
class C{  public boolean isOpen(){  return open;}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void put(String searchString){  if (searchString == null || searchString.trim().length() == 0) {    return;  }  int lastIndex=recentSearches.indexOf(searchString);  if (lastIndex != -1) {    recentSearches.remove(lastIndex);  }  recentSearches.add(0,searchString);  if (getLength() > getMaxRecents()) {    recentSearches.remove(recentSearches.size() - 1);  }  save();  fireChangeEvent();}  }
class C{  public boolean isUpdateCompleted(){  return isUpdateCompleted;}  }
class C{  public static Map<String,Object> updateElectronicText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=updateElectronicTextMethod(dctx,context);  return result;}  }
class C{  public T caseTraceOption_(TraceOption_ object){  return null;}  }
class C{  public JsonToken peek() throws IOException {  if (token != null) {    return token;  }switch (stack[stackSize - 1]) {case EMPTY_DOCUMENT:    if (lenient) {      consumeNonExecutePrefix();    }  stack[stackSize - 1]=JsonScope.NONEMPTY_DOCUMENT;JsonToken firstToken=nextValue();if (!lenient && token != JsonToken.BEGIN_ARRAY && token != JsonToken.BEGIN_OBJECT) {throw new IOException("Expected JSON document to start with '[' or '{' but was " + token + " at line "+ getLineNumber()+ " column "+ getColumnNumber());}return firstToken;case EMPTY_ARRAY:return nextInArray(true);case NONEMPTY_ARRAY:return nextInArray(false);case EMPTY_OBJECT:return nextInObject(true);case DANGLING_NAME:return objectValue();case NONEMPTY_OBJECT:return nextInObject(false);case NONEMPTY_DOCUMENT:int c=nextNonWhitespace(false);if (c == -1) {return JsonToken.END_DOCUMENT;}pos--;if (!lenient) {throw syntaxError("Expected EOF");}return nextValue();case CLOSED:throw new IllegalStateException("JsonReader is closed");default :throw new AssertionError();}}  }
class C{  public AggregationNonDominatedSortingSelection(int popSize){  this.popSize=popSize;}  }
class C{  public String toString(){  return "BadStringOperationException: " + op;}  }
class C{  public void freeUniqueName(String name){  if (name != null) {synchronized (temporaryUniqueNames) {      temporaryUniqueNames.remove(name);    }  }}  }
class C{  @Deprecated public void authenticate(final String username,final String password,final String consumerKey,final String consumerSecret,boolean supportsTwoFactor,final OnClientCallback<AuthenticationResult> callback){  AsyncReflector.execute(mClient,callback,"authenticate",username,password,consumerKey,consumerSecret,supportsTwoFactor);}  }
class C{  public int readRawLittleEndian32() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  return ((b1 & 0xff)) | ((b2 & 0xff) << 8) | ((b3 & 0xff) << 16)| ((b4 & 0xff) << 24);}  }
class C{  public AsyncRequest period(int period){  this.asyncTaskCheckingPeriodMillis=period;  return this;}  }
class C{  private void collectData(ICoreService coreService,long sensorTypeIdent){  Timestamp timestamp=new Timestamp(Calendar.getInstance().getTime().getTime());  for (Iterator<JmxAttributeDescriptor> iterator=activeAttributes.keySet().iterator(); iterator.hasNext(); ) {    JmxAttributeDescriptor descriptor=iterator.next();    try {      ObjectName objectName=nameStringToObjectName.get(descriptor.getmBeanObjectName());      Object collectedValue=mBeanServer.getAttribute(objectName,descriptor.getAttributeName());      String value;      if (null == collectedValue) {        value="null";      } else       if (collectedValue.getClass().isArray()) {        value=getArrayValue(collectedValue);      } else {        value=collectedValue.toString();      }      long platformid=platformManager.getPlatformId();      JmxSensorValueData jsvd=new JmxSensorValueData(descriptor.getId(),value,timestamp,platformid,sensorTypeIdent);      coreService.addJmxSensorValueData(sensorTypeIdent,descriptor.getmBeanObjectName(),descriptor.getAttributeName(),jsvd);    } catch (    AttributeNotFoundException e) {      iterator.remove();      log.warn("JMX::AttributeNotFound. Attribute was not found. Maybe currently not available on the server. Attribute removed from the actively read list.",e);    }catch (    InstanceNotFoundException e) {      iterator.remove();      log.warn("JMX::Instance not found. MBean may not be registered on the Server. Attribute removed from the actively read list.",e);    }catch (    MBeanException e) {      iterator.remove();      log.warn("JMX::MBean. Undefined problem with the MBean. Attribute removed from the actively read list.",e);    }catch (    ReflectionException e) {      iterator.remove();      log.warn("JMX::Reflection error. MBean may not be registered on the Server. Attribute removed from the actively read list.",e);    }catch (    RuntimeMBeanException e) {      iterator.remove();      log.warn("JMX::Runtime error reading the attribute " + descriptor.getAttributeName() + " from the MBean "+ descriptor.getmBeanObjectName()+ ". Attribute removed from the actively read list.",e);    }catch (    IdNotAvailableException e) {      if (log.isDebugEnabled()) {        log.debug("JMX::IdNotAvailable. MBean may not be registered on the Server.",e);      }    }  }}  }
class C{  @Override public PrivateIonBinaryWriterBuilder withInitialSymbolTable(SymbolTable symtab){  PrivateIonBinaryWriterBuilder b=mutable();  b.setInitialSymbolTable(symtab);  return b;}  }
class C{  protected synchronized void addToSecondBuffer(Instance inst){  if (m_stopRequested.get()) {    return;  }  InstanceHolder newH=new InstanceHolder();  newH.m_instance=inst;  copyStringAttVals(newH,m_stringAttIndexesTwo);  if (!m_stopRequested.get()) {    m_secondBuffer.add(newH);  } else {    return;  }  if (m_secondBuffer.size() > 100 && !m_firstFinished) {    try {      m_secondIsWaiting=true;      wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  @Override protected void initListeners(){}  }
class C{  @SafeVarargs public final GenericItemAdapter<Model,Item> addModel(Model... models){  addModel(asList(models));  return this;}  }
class C{  private JScrollPane createDetailPanel(String errorMessage){  JTextArea textArea=new JTextArea(errorMessage);  textArea.setLineWrap(true);  textArea.setEditable(false);  JScrollPane detailPane=new ExtendedJScrollPane(textArea);  detailPane.setPreferredSize(new Dimension(getWidth(),200));  return detailPane;}  }
class C{  @NonNull private JSONObject createJSONObject(PointF screenXY,PointF pageXY,float pointerId){  JSONObject jsonObject=new JSONObject();  jsonObject.put(GestureInfo.PAGE_X,pageXY.x);  jsonObject.put(GestureInfo.PAGE_Y,pageXY.y);  jsonObject.put(GestureInfo.SCREEN_X,screenXY.x);  jsonObject.put(GestureInfo.SCREEN_Y,screenXY.y);  jsonObject.put(GestureInfo.POINTER_ID,pointerId);  return jsonObject;}  }
class C{  public static String capitalizeFirstLetter(String data){  char firstLetter=Character.toTitleCase(data.substring(0,1).charAt(0));  String restLetters=data.substring(1);  return firstLetter + restLetters;}  }
class C{  public static void testPermission(String loggerName){  if (System.getSecurityManager() != null) {    throw new Error("Security manager is already set");  }  Policy.setPolicy(new SimplePolicy(TestCase.PERMISSION));  System.setSecurityManager(new SecurityManager());  final ResourceBundle bundle=ResourceBundle.getBundle(LIST_BUNDLE_NAME);  Logger foobar=Logger.getLogger(loggerName);  try {    foobar.setResourceBundle(bundle);    throw new RuntimeException("Permission not checked!");  } catch (  AccessControlException x) {    if (x.getPermission() instanceof LoggingPermission) {      if ("control".equals(x.getPermission().getName())) {        System.out.println("Got expected exception: " + x);        return;      }    }    throw new RuntimeException("Unexpected exception: " + x,x);  }}  }
class C{  public boolean isAbstract(){  return this.isDeclaredAbstract();}  }
class C{  protected ConnAdapter(PoolEntry entry,HttpRoute route){  super(SingleClientConnManager.this,entry);  markReusable();  entry.route=route;}  }
class C{  public static FilterPred parse(JsonElement filterElt,Set<String> filterFields) throws FilterParseException {  JsonElement predElt=Utils.getFieldValue(filterElt,"pred");  if (predElt != null) {    FilterPredClause clause=FilterPredClause.parse(predElt,filterFields);    if (clause != null)     return new FilterPred(clause);  } else {    JsonArray conjuncts=Utils.getFieldValueAsArray(filterElt,"conjuncts");    if (conjuncts != null) {      List<FilterPredClause> clauses=parsePredClauses(conjuncts,filterFields);      return new FilterPred(BoolOp.AND,clauses);    } else {      JsonArray disjuncts=Utils.getFieldValueAsArray(filterElt,"disjuncts");      if (disjuncts != null) {        List<FilterPredClause> clauses=parsePredClauses(disjuncts,filterFields);        return new FilterPred(BoolOp.OR,clauses);      }    }  }  throw new FilterParseException("Missing predicate property \"pred\", \"conjuncts\", or \"disjuncts\" in\n" + filterElt);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public static void start(String[] args){  startedAsService=true;  startCMR();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static public List<KeyParts> keyPartsForQuery(final TemporalInstant queryInstant,final StatementConstraints contraints){  final List<KeyParts> keys=new LinkedList<KeyParts>();  final URI urlNull=new URIImpl("urn:null");  final Resource currentContext=contraints.getContext();  final boolean hasSubj=contraints.hasSubject();  if (contraints.hasPredicates()) {    for (    final URI nextPredicate : contraints.getPredicates()) {      final Text contraintPrefix=new Text();      final Statement statement=new ContextStatementImpl(hasSubj ? contraints.getSubject() : urlNull,nextPredicate,urlNull,contraints.getContext());      if (hasSubj) {        appendSubjectPredicate(statement,contraintPrefix);      } else {        appendPredicate(statement,contraintPrefix);      }      keys.add(new KeyParts(contraintPrefix,queryInstant,(currentContext == null) ? "" : currentContext.toString(),hasSubj ? CQ_S_P_AT : CQ_P_AT));    }  } else   if (contraints.hasSubject()) {    final Text contraintPrefix=new Text();    final Statement statement=new StatementImpl(contraints.getSubject(),urlNull,urlNull);    appendSubject(statement,contraintPrefix);    keys.add(new KeyParts(contraintPrefix,queryInstant,(currentContext == null) ? "" : currentContext.toString(),CQ_S_AT));  } else {    keys.add(new KeyParts(null,queryInstant,(currentContext == null) ? "" : currentContext.toString(),CQ_O_AT));  }  return keys;}  }
