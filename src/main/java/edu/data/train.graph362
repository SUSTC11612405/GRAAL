class C{  protected void beginUpdate(){  beginUpdate(source);}  }
class C{  public Dasher(PathConsumer2D out,float[] dash,float phase){  if (phase < 0) {    throw new IllegalArgumentException("phase < 0 !");  }  this.out=out;  int idx=0;  dashOn=true;  float d;  while (phase >= (d=dash[idx])) {    phase-=d;    idx=(idx + 1) % dash.length;    dashOn=!dashOn;  }  this.dash=dash;  this.startPhase=this.phase=phase;  this.startDashOn=dashOn;  this.startIdx=idx;  this.starting=true;  curCurvepts=new float[8 * 2];}  }
class C{  public ServiceRefAmp createLinkService(String path,PodRef podCaller){  StubLink actorLink;  String address=_scheme + "//" + _serviceRefOut.address()+ path;  ServiceRefAmp parentRef=_actorOut.getServiceRef();  if (_queryMapRef != null) {    actorLink=new StubLinkUnidir(_manager,path,parentRef,_queryMapRef,podCaller,_actorOut);  } else {    actorLink=new StubLink(_manager,path,parentRef,podCaller,_actorOut);  }  ServiceRefAmp linkRef=_serviceRefOut.pin(actorLink,address);  ServiceRefAmp clientRef=new ServiceRefClient(address,linkRef.stub(),linkRef.inbox());  actorLink.initSelfRef(clientRef);  return clientRef;}  }
class C{  public void release() throws Exception {  if (receiver == null) {    throw new IllegalStateException("Can't release non-received message.");  }  receiver.release(delivery);}  }
class C{  public void emitMultianewarray(int ndims,int type,Type arrayType){  emitop(multianewarray);  if (!alive)   return;  emit2(type);  emit1(ndims);  state.pop(ndims);  state.push(arrayType);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6,K k7,V v7,K k8,V v8,K k9,V v9,K k10,V v10){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3,k4,v4,k5,v5,k6,v6,k7,v7,k8,v8,k9,v9,k10,v10);}  }
class C{  public boolean isDiskSynchronous(){  return diskSynchronous;}  }
class C{  public ManhattanDistance(){  super();}  }
class C{  public static String parse(String timeZone){  if (timeZone == null || timeZone.isEmpty())   return null;  return timeZone;}  }
class C{  public static <T>Promise traverse(List<Supplier<Promise<T>>> queue){  if (queue.size() == 0) {    return Promise.success(null);  }  return queue.remove(0).get().flatMap(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypeinternalSubset01.class,args);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean isAzulJVM(){  return isJvmVendor(AZUL_JVM_VENDOR_NAME);}  }
class C{  public Observable<Boolean> logout(){  return routes.logout().map(null).map(null).doOnNext(null);}  }
class C{  public void testSeekFilteredEvent() throws Exception {  File logDir=prepareLogDir("testSeekFilteredEvent");  DiskLog log=openLog(logDir,false);  long seqno=0;  LogConnection conn=log.connect(false);  logger.info("Writing five unfiltered events");  for (int i=0; i < 5; i++) {    THLEvent e=this.createTHLEvent(seqno++);    conn.store(e,false);  }  long endSeqno=seqno + 4;  logger.info("Filtering 5 events: start=" + seqno + " end="+ endSeqno);  THLEvent fe=this.createFilteredTHLEvent(seqno,endSeqno,(short)0);  conn.store(fe,false);  seqno+=5;  logger.info("Writing five unfiltered events");  for (int i=0; i < 5; i++) {    THLEvent e=this.createTHLEvent(seqno++);    conn.store(e,false);  }  conn.commit();  conn.release();  log.release();  assertEquals("Should have stored requested events",(seqno - 1),log.getMaxSeqno());  logger.info("Final seqno: " + (seqno - 1));  DiskLog log2=openLog(logDir,true);  log2.validate();  LogConnection conn2=log2.connect(true);  conn2.seek(4);  THLEvent eBefore=conn2.next(false);  ReplDBMSEvent reBefore=(ReplDBMSEvent)eBefore.getReplEvent();  assertTrue("Expect a ReplDBMSEvent",reBefore instanceof ReplDBMSEvent);  for (int i=5; i <= 9; i++) {    logger.info("Seeking filtered event: seqno=" + i);    assertTrue("Seeking sequence number: seqno=" + i,conn2.seek(i,(short)0));    THLEvent eFiltered=conn2.next(false);    this.validateFilteredEvent(eFiltered,5,9);  }  conn2.seek(10);  THLEvent eAfter=conn2.next(false);  ReplDBMSEvent reAfter=(ReplDBMSEvent)eAfter.getReplEvent();  assertTrue("Expect a ReplDBMSEvent",reAfter instanceof ReplDBMSEvent);  log2.release();}  }
class C{  protected Vertex createInputSentence(String text,Network network){  if (getBot().getFilterProfanity()) {    if (Utils.checkProfanity(text)) {      throw BotException.offensive();    }  }  Utils.checkScript(text);  Vertex sentence=network.createSentence(text);  if (sentence.hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {    throw BotException.offensive();  }  Vertex input=network.createInstance(Primitive.INPUT);  input.setName(text);  input.addRelationship(Primitive.SENSE,getPrimitive());  input.addRelationship(Primitive.INPUT,sentence);  return input;}  }
class C{  public void resetTransition(){  mAlpha=0;  mTransitionState=TRANSITION_NONE;  invalidateSelf();}  }
class C{  private static List<String> replicate(List<String> list,int n){  List<String> originalList=new ArrayList<>(list);  for (int i=1; i < n; i++) {    list.addAll(originalList);  }  return list;}  }
class C{  public boolean hasMoreElements(){  return i < attr.length;}  }
class C{  public void test_termsIndex_addLookupValue_with_toldBNodesMode(){  doTermsIndexAddLookupTest(true);}  }
class C{  public int read(BitStream.In in){  Node n=tree;  while (n.left != null) {    n=in.readBit() == 1 ? n.right : n.left;  }  return n.value;}  }
class C{  public BasicAttribute(String id,Object value,boolean ordered){  this(id,ordered);  values.addElement(value);}  }
class C{  private void activeRecyclerView(List myMaps){  RecyclerView.LayoutManager layoutManager;  mapsRV=(RecyclerView)findViewById(R.id.my_maps_recycler_view);  DefaultItemAnimator animator=new DefaultItemAnimator();  animator.setAddDuration(2000);  animator.setRemoveDuration(600);  mapsRV.setItemAnimator(animator);  mapsRV.setHasFixedSize(true);  layoutManager=new LinearLayoutManager(this);  mapsRV.setLayoutManager(layoutManager);  mapAdapter=new MyMapAdapter(myMaps,this);  mapsRV.setAdapter(mapAdapter);  deleteItemHandler();}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {}  }
class C{  public void infoCRLSourceIsNull(){  addInfo("The CRL source is null!");}  }
class C{  public ServiceConfigurationError(String message,Throwable cause){  super(message,cause);}  }
class C{  public void droidsafeSetContext(Context activity){  mActivity=(FragmentActivity)activity;  onAttach(mActivity);}  }
class C{  public static boolean isProfileId(long id){  return id >= Profile.MIN_ID;}  }
class C{  public Notification(final NotificationType type){  this.type=type;}  }
class C{  private ClassNode optimizeDivWithIntOrLongTarget(Expression rhs,ClassNode assignmentTartgetType){  if (!(rhs instanceof BinaryExpression))   return null;  BinaryExpression binExp=(BinaryExpression)rhs;  int op=binExp.getOperation().getType();  if (op != Types.DIVIDE && op != Types.DIVIDE_EQUAL)   return null;  ClassNode originalResultType=typeChooser.resolveType(binExp,node);  if (!originalResultType.equals(BigDecimal_TYPE) || !(isLongCategory(assignmentTartgetType) || isFloatingCategory(assignmentTartgetType))) {    return null;  }  ClassNode leftType=typeChooser.resolveType(binExp.getLeftExpression(),node);  if (!isLongCategory(leftType))   return null;  ClassNode rightType=typeChooser.resolveType(binExp.getRightExpression(),node);  if (!isLongCategory(rightType))   return null;  ClassNode target;  if (isIntCategory(leftType) && isIntCategory(rightType)) {    target=int_TYPE;  } else   if (isLongCategory(leftType) && isLongCategory(rightType)) {    target=long_TYPE;  } else   if (isDoubleCategory(leftType) && isDoubleCategory(rightType)) {    target=double_TYPE;  } else {    return null;  }  StatementMeta meta=addMeta(rhs);  meta.type=target;  opt.chainInvolvedType(target);  return target;}  }
class C{  public boolean hasVariable(String name){  return variables != null && variables.containsKey(name);}  }
class C{  private void writeThriftObject(TBase dictionaryThriftObject) throws IOException {  dictionaryThriftWriter.write(dictionaryThriftObject);}  }
class C{  boolean needToCheckExclude(){  return false;}  }
class C{  @Override public BytesRef next() throws IOException {  try {    Thread.sleep(100);  } catch (  InterruptedException e) {  }  return in.next();}  }
class C{  public Voice(){}  }
class C{  public boolean isEditable(){  return getBooleanProperty(BOOLEAN_PROPERTY_EDITABLE);}  }
class C{  public static synchronized void start(Long mins){  if (schedulerRef != null) {    schedulerRef.cancel();  }  schedulerRef=ActorRegistry.scheduler.schedule(Duration.create(0,TimeUnit.MILLISECONDS),Duration.create(mins,TimeUnit.MINUTES),ActorRegistry.schedulerActor,"checking",ActorRegistry.dispatcher,null);}  }
class C{  public void readLbMaps(BufferedReader fin) throws IOException {  if (lbStr2Int != null) {    lbStr2Int.clear();  } else {    lbStr2Int=new HashMap();  }  if (lbInt2Str != null) {    lbInt2Str.clear();  } else {    lbInt2Str=new HashMap();  }  String line;  if ((line=fin.readLine()) == null) {    System.out.println("No label map size information");    return;  }  int numLabels=Integer.parseInt(line);  if (numLabels <= 0) {    System.out.println("Invalid label mapping size");    return;  }  System.out.println("Reading the context predicate maps ...");  for (int i=0; i < numLabels; i++) {    line=fin.readLine();    if (line == null) {      System.out.println("Invalid context predicate mapping line");      return;    }    StringTokenizer strTok=new StringTokenizer(line," \t\r\n");    if (strTok.countTokens() != 2) {      continue;    }    String lbStr=strTok.nextToken();    String lbInt=strTok.nextToken();    lbStr2Int.put(lbStr,new Integer(lbInt));    lbInt2Str.put(new Integer(lbInt),lbStr);  }  System.out.println("Reading label maps (" + Integer.toString(lbStr2Int.size()) + " entries) completed!");  line=fin.readLine();  option.numLabels=lbStr2Int.size();}  }
class C{  public boolean save(StringBuffer buf){  if (buf != null) {    JFileChooser fileChooser;    if (m_lastvisitedDirectory == null) {      fileChooser=new JFileChooser(new File(System.getProperty("user.dir")));    } else {      fileChooser=new JFileChooser(m_lastvisitedDirectory);    }    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);    int returnVal=fileChooser.showSaveDialog(m_parentComponent);    if (returnVal == JFileChooser.APPROVE_OPTION) {      File sFile=fileChooser.getSelectedFile();      m_lastvisitedDirectory=sFile.getPath();      if (sFile.exists()) {        Object[] options=new String[4];        options[0]="Append";        options[1]="Overwrite";        options[2]="Choose new name";        options[3]="Cancel";        JOptionPane jop=new JOptionPane("File exists",JOptionPane.QUESTION_MESSAGE,1,null,options);        JDialog dialog=jop.createDialog(m_parentComponent,"File query");        dialog.setVisible(true);        Object selectedValue=jop.getValue();        if (selectedValue == null) {        } else {          for (int i=0; i < 4; i++) {            if (options[i].equals(selectedValue)) {switch (i) {case 0:                return saveOverwriteAppend(buf,sFile,true);case 1:              return saveOverwriteAppend(buf,sFile,false);case 2:            return save(buf);case 3:          break;      }    }  }}} else {saveOverwriteAppend(buf,sFile,false);}} else {return false;}}return false;}  }
class C{  public static byte[] buildResponseToBrowser(ServiceContext context,boolean isGziped) throws IOException {  byte[] orig=context.orig;  RsrcIfc[] allRsrcs=context.allRsrcs;  int[] info=context.info;  boolean isServiceWithIframe=context.isServiceWithIframe;  boolean isIE=context.isIE;  boolean isHttps=context.isHttps;  ConfigData configData=context.configData;  boolean isIframeDumped=false;  boolean isFuncsDumped=false;  int iAll=0;  ByteArrayOutputStream oByteArr=new ByteArrayOutputStream(orig.length * 3 / 4);  OutputStream oGzip=(isGziped ? new OurGZIPOutputStream(oByteArr) : oByteArr);  int iOrig=0;  int i=0;  while (i < info.length) {    if (info[i] == HtmlAnalyzer.EOF_KIND)     break;    if (info[i] == HtmlAnalyzer.BASE_KIND && configData.hostsMap != null && context.base != null) {      int first=info[i + HtmlAnalyzer.BASE_HREF_FIRST];      int last=info[i + HtmlAnalyzer.BASE_HREF_LAST];      oGzip.write(orig,iOrig,first - iOrig);      oGzip.write(context.base.getBytes());      iOrig=last;    } else     if (info[i] == HtmlAnalyzer.EVENT_KIND && isServiceWithIframe && info[i + HtmlAnalyzer.EVENT_FIRST] > 0) {      int first=info[i + HtmlAnalyzer.EVENT_FIRST];      int last=info[i + HtmlAnalyzer.EVENT_LAST];      oGzip.write(orig,iOrig,first - iOrig);      oGzip.write(IF_IN_IFRAME_BYTES);      oGzip.write(orig,first,last - first);      oGzip.write(IF_END_BYTES);      iOrig=last;    } else     if (info[i] == HtmlAnalyzer.IMG_KIND && info[i + HtmlAnalyzer.IMG_SRC_FIRST] > 0 && allRsrcs[iAll] instanceof ImageRsrc && ((ImageRsrc)allRsrcs[iAll]).base64Data != null) {      int srcFirst=info[i + HtmlAnalyzer.IMG_SRC_FIRST];      int srcLast=info[i + HtmlAnalyzer.IMG_SRC_LAST];      oGzip.write(orig,iOrig,srcFirst - iOrig);      ImageRsrc imgRsrc=(ImageRsrc)allRsrcs[iAll];      byte[] imgBytes=imgRsrc.base64Data;      oGzip.write(imgBytes,0,imgBytes.length);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.IMG_KIND && info[i + HtmlAnalyzer.IMG_SRC_FIRST] > 0 && allRsrcs[iAll] instanceof TempRsrc && ((TempRsrc)allRsrcs[iAll]).cdnUrl != null) {      int srcFirst=info[i + HtmlAnalyzer.IMG_SRC_FIRST];      int srcLast=info[i + HtmlAnalyzer.IMG_SRC_LAST];      byte[] cdnUrl=(isHttps ? ((TempRsrc)allRsrcs[iAll]).cdnSslUrl : ((TempRsrc)allRsrcs[iAll]).cdnUrl);      oGzip.write(orig,iOrig,srcFirst - iOrig);      oGzip.write(cdnUrl);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.IMG_KIND && info[i + HtmlAnalyzer.IMG_SRC_FIRST] > 0 && allRsrcs[iAll] instanceof TempRsrc && ((TempRsrc)allRsrcs[iAll]).isVersioned && ((TempRsrc)allRsrcs[iAll]).replacer instanceof ImageRsrc) {      int srcFirst=info[i + HtmlAnalyzer.IMG_SRC_FIRST];      int srcLast=info[i + HtmlAnalyzer.IMG_SRC_LAST];      oGzip.write(orig,iOrig,srcFirst - iOrig);      ImageRsrc imgRsrc=(ImageRsrc)((TempRsrc)allRsrcs[iAll]).replacer;      oGzip.write(imgRsrc.versionUrlBytes);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.CSS_IMG_KIND && info[i + HtmlAnalyzer.CSS_IMG_FIRST] > 0 && allRsrcs[iAll] instanceof ImageRsrc && ((ImageRsrc)allRsrcs[iAll]).base64Data != null) {      int srcFirst=info[i + HtmlAnalyzer.CSS_IMG_FIRST];      int srcLast=info[i + HtmlAnalyzer.CSS_IMG_LAST];      oGzip.write(orig,iOrig,srcFirst - iOrig);      ImageRsrc imgRsrc=(ImageRsrc)allRsrcs[iAll];      byte[] imgBytes=imgRsrc.base64Data;      oGzip.write(imgBytes,0,imgBytes.length);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.CSS_IMG_KIND && info[i + HtmlAnalyzer.CSS_IMG_FIRST] > 0 && allRsrcs[iAll] instanceof ImageRsrc && ((TempRsrc)allRsrcs[iAll]).cdnUrl != null) {      int srcFirst=info[i + HtmlAnalyzer.CSS_IMG_FIRST];      int srcLast=info[i + HtmlAnalyzer.CSS_IMG_LAST];      byte[] cdnUrl=(isHttps ? ((TempRsrc)allRsrcs[iAll]).cdnSslUrl : ((TempRsrc)allRsrcs[iAll]).cdnUrl);      oGzip.write(orig,iOrig,srcFirst - iOrig);      oGzip.write(cdnUrl);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.CSS_IMG_KIND && info[i + HtmlAnalyzer.CSS_IMG_FIRST] > 0 && allRsrcs[iAll] instanceof TempRsrc && ((TempRsrc)allRsrcs[iAll]).isVersioned && ((TempRsrc)allRsrcs[iAll]).replacer instanceof ImageRsrc) {      int srcFirst=info[i + HtmlAnalyzer.CSS_IMG_FIRST];      int srcLast=info[i + HtmlAnalyzer.CSS_IMG_LAST];      oGzip.write(orig,iOrig,srcFirst - iOrig);      ImageRsrc imgRsrc=(ImageRsrc)((TempRsrc)allRsrcs[iAll]).replacer;      oGzip.write(imgRsrc.versionUrlBytes);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.INPUT_KIND && info[i + HtmlAnalyzer.INPUT_FIRST] > 0 && allRsrcs[iAll] instanceof ImageRsrc && ((ImageRsrc)allRsrcs[iAll]).base64Data != null) {      int srcFirst=info[i + HtmlAnalyzer.INPUT_SRC_FIRST];      int srcLast=info[i + HtmlAnalyzer.INPUT_SRC_LAST];      oGzip.write(orig,iOrig,srcFirst - iOrig);      ImageRsrc imgRsrc=(ImageRsrc)allRsrcs[iAll];      byte[] imgBytes=imgRsrc.base64Data;      oGzip.write(imgBytes,0,imgBytes.length);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.FRAME_KIND && info[i + HtmlAnalyzer.FRAME_SRC_FIRST] > 0 && info[i + HtmlAnalyzer.FRAME_SRC_FIRST] == info[i + HtmlAnalyzer.FRAME_SRC_LAST]) {      int srcFirst=info[i + HtmlAnalyzer.FRAME_SRC_FIRST];      int srcLast=info[i + HtmlAnalyzer.FRAME_SRC_LAST];      oGzip.write(orig,iOrig,srcFirst - iOrig);      oGzip.write(ABOUT_BLANK,0,ABOUT_BLANK.length);      iOrig=srcLast;    } else     if (info[i] == HtmlAnalyzer.IFRAME_KIND && info[i + HtmlAnalyzer.IFRAME_SRC_FIRST] > 0 && info[i + HtmlAnalyzer.IFRAME_SRC_FIRST] < info[i + HtmlAnalyzer.IFRAME_SRC_LAST] && isServiceWithIframe) {      int ifrmFirst=info[i + HtmlAnalyzer.IFRAME_FIRST];      int ifrmLast=info[i + HtmlAnalyzer.IFRAME_LAST];      int srcFirst=info[i + HtmlAnalyzer.IFRAME_SRC_FIRST];      int srcLast=info[i + HtmlAnalyzer.IFRAME_SRC_LAST];      oGzip.write(orig,iOrig,ifrmFirst - iOrig);      oGzip.write(SCRIPT_START_BYTES,0,SCRIPT_START_BYTES.length);      oGzip.write(DOCUMENT_WRITE_START_BYTES,0,DOCUMENT_WRITE_START_BYTES.length);      iOrig=ifrmFirst;      while (iOrig < srcFirst) {        if (orig[iOrig] == '\'')         oGzip.write('"'); else         if (orig[iOrig] < ' ')         oGzip.write(' '); else         oGzip.write(orig[iOrig]);        iOrig++;      }      oGzip.write(DOCUMENT_WRITE_END_BYTES,0,DOCUMENT_WRITE_END_BYTES.length);      oGzip.write(IF_START_BYTES,0,IF_START_BYTES.length);      oGzip.write(DOCUMENT_WRITE_START_BYTES,0,DOCUMENT_WRITE_START_BYTES.length);      iOrig=srcFirst;      oGzip.write(orig,iOrig,srcLast - iOrig);      oGzip.write(DOCUMENT_WRITE_END_BYTES,0,DOCUMENT_WRITE_END_BYTES.length);      oGzip.write(ELSE_BYTES,0,ELSE_BYTES.length);      oGzip.write(DOCUMENT_WRITE_START_BYTES,0,DOCUMENT_WRITE_START_BYTES.length);      oGzip.write(ABOUT_BLANK,0,ABOUT_BLANK.length);      oGzip.write(DOCUMENT_WRITE_END_BYTES,0,DOCUMENT_WRITE_END_BYTES.length);      oGzip.write(IF_END_BYTES,0,IF_END_BYTES.length);      oGzip.write(DOCUMENT_WRITE_START_BYTES,0,DOCUMENT_WRITE_START_BYTES.length);      iOrig=srcLast;      while (iOrig < ifrmLast) {        if (orig[iOrig] == '\'')         oGzip.write('"'); else         if (orig[iOrig] < ' ')         oGzip.write(' '); else         oGzip.write(orig[iOrig]);        iOrig++;      }      oGzip.write(DOCUMENT_WRITE_END_BYTES,0,DOCUMENT_WRITE_END_BYTES.length);      oGzip.write(SCRIPT_END_BYTES,0,SCRIPT_END_BYTES.length);      iOrig=ifrmLast;    } else     if (info[i] == HtmlAnalyzer.SCRIPT_KIND && info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST] < 0 && info[i + HtmlAnalyzer.SCRIPT_START_LAST] > 0 && isServiceWithIframe && isRealyJs(orig,info,i)) {      if (!isIframeDumped && info[i + HtmlAnalyzer.SCRIPT_IN_IE_COMMENT] == 0) {        int startFirst=info[i + HtmlAnalyzer.SCRIPT_START_FIRST];        oGzip.write(orig,iOrig,startFirst - iOrig);        iOrig=startFirst;        if (!isFuncsDumped) {          isFuncsDumped=true;          if (_isDelayIframe)           oGzip.write(HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES,0,HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES.length); else           oGzip.write(HTML_SPEED_FUNCS_BYTES,0,HTML_SPEED_FUNCS_BYTES.length);        }        if (isIE)         oGzip.write(IFRAME_IE_BYTES,0,IFRAME_IE_BYTES.length); else         oGzip.write(IFRAME_BYTES,0,IFRAME_BYTES.length);        isIframeDumped=true;      }      int bodyFirst=info[i + HtmlAnalyzer.SCRIPT_START_LAST];      int bodyLast=info[i + HtmlAnalyzer.SCRIPT_END_FIRST];      oGzip.write(orig,iOrig,bodyFirst - iOrig);      oGzip.write(IF_IN_IFRAME_BYTES,0,IF_IN_IFRAME_BYTES.length);      oGzip.write(orig,bodyFirst,bodyLast - bodyFirst);      oGzip.write('\n');      oGzip.write('}');      iOrig=bodyLast;    } else     if (info[i] == HtmlAnalyzer.SCRIPT_KIND && info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST] > 0 && allRsrcs[iAll] instanceof TempRsrc && (((TempRsrc)allRsrcs[iAll]).isVersioned || ((TempRsrc)allRsrcs[iAll]).cdnUrl != null) && ((TempRsrc)allRsrcs[iAll]).replacer instanceof JsRsrc) {      TempRsrc tempRsrc=(TempRsrc)allRsrcs[iAll];      JsRsrc jsRsrc=(JsRsrc)(tempRsrc).replacer;      if (!isServiceWithIframe) {        int srcFirst=info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST];        int srcLast=info[i + HtmlAnalyzer.SCRIPT_SRC_LAST];        oGzip.write(orig,iOrig,srcFirst - iOrig);        if (!isHttps && tempRsrc.cdnUrl != null)         oGzip.write(tempRsrc.cdnUrl); else         if (isHttps && tempRsrc.cdnSslUrl != null)         oGzip.write(tempRsrc.cdnSslUrl); else         oGzip.write(jsRsrc.versionUrlBytes);        iOrig=srcLast;      } else {        int startFirst=info[i + HtmlAnalyzer.SCRIPT_START_FIRST];        int endLast=info[i + HtmlAnalyzer.SCRIPT_END_LAST];        int srcFirst=info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST];        int srcLast=info[i + HtmlAnalyzer.SCRIPT_SRC_LAST];        oGzip.write(orig,iOrig,startFirst - iOrig);        if (!isIframeDumped && info[i + HtmlAnalyzer.SCRIPT_IN_IE_COMMENT] == 0) {          if (!isFuncsDumped) {            isFuncsDumped=true;            if (_isDelayIframe)             oGzip.write(HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES,0,HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES.length); else             oGzip.write(HTML_SPEED_FUNCS_BYTES,0,HTML_SPEED_FUNCS_BYTES.length);          }          if (isIE)           oGzip.write(IFRAME_IE_BYTES,0,IFRAME_IE_BYTES.length); else           oGzip.write(IFRAME_BYTES,0,IFRAME_BYTES.length);          isIframeDumped=true;        }        if (configData.isDefer(jsRsrc.url))         oGzip.write(SCRIPT_IN_IFRAME_START_DEFER_BYTES,0,SCRIPT_IN_IFRAME_START_DEFER_BYTES.length); else         oGzip.write(SCRIPT_IN_IFRAME_START_BYTES,0,SCRIPT_IN_IFRAME_START_BYTES.length);        int j;        for (j=startFirst + 7; j < srcFirst; j++) {switch (orig[j]) {case '\'':            oGzip.write('\\');          oGzip.write(orig[j]);        break;case '\n':case '\r':      oGzip.write(' ');    break;default :  oGzip.write(orig[j]);break;}}if (!isHttps && tempRsrc.cdnUrl != null) oGzip.write(tempRsrc.cdnUrl); else if (isHttps && tempRsrc.cdnSslUrl != null) oGzip.write(tempRsrc.cdnSslUrl); else oGzip.write(jsRsrc.versionUrlBytes);for (j=srcLast; j < endLast - 9; j++) {switch (orig[j]) {case '\'':oGzip.write('\\');oGzip.write(orig[j]);break;case '\n':case '\r':oGzip.write(' ');break;default :oGzip.write(orig[j]);break;}}oGzip.write(SCRIPT_IN_IFRAME_END_BYTES,0,SCRIPT_IN_IFRAME_END_BYTES.length);iOrig=endLast;}} else if (info[i] == HtmlAnalyzer.SCRIPT_KIND && info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST] > 0 && allRsrcs[iAll] instanceof JsRsrc && ((JsRsrc)allRsrcs[iAll]).isInlinable) {int srcFirst=info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST];int srcLast=info[i + HtmlAnalyzer.SCRIPT_SRC_LAST];int bodyFirst=info[i + HtmlAnalyzer.SCRIPT_START_LAST];int bodyLast=info[i + HtmlAnalyzer.SCRIPT_END_FIRST];int jsLast=info[i + HtmlAnalyzer.SCRIPT_END_LAST];srcFirst--;while (orig[srcFirst] != 's' && orig[srcFirst] != 'S') srcFirst--;if (orig[srcLast] == '"' || orig[srcLast] == '\'') srcLast++;oGzip.write(orig,iOrig,srcFirst - iOrig);iOrig=srcLast;oGzip.write(orig,iOrig,bodyFirst - iOrig);if (isServiceWithIframe && isRealyJs(orig,info,i)) oGzip.write(IF_IN_IFRAME_BYTES,0,IF_IN_IFRAME_BYTES.length);JsRsrc jsRsrc=(JsRsrc)allRsrcs[iAll];byte[] jsBytes=jsRsrc.origData;int offset=0;if (jsBytes.length > 0) {while (offset < 3 && jsBytes[offset] < 0) offset++;}oGzip.write(jsBytes,offset,jsBytes.length - offset);if (isServiceWithIframe && isRealyJs(orig,info,i)) {oGzip.write('\n');oGzip.write('}');}oGzip.write('\n');iOrig=bodyLast;oGzip.write(orig,iOrig,jsLast - iOrig);iOrig=jsLast;} else if (info[i] == HtmlAnalyzer.SCRIPT_KIND && info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST] > 0 && isServiceWithIframe) {int startFirst=info[i + HtmlAnalyzer.SCRIPT_START_FIRST];int endLast=info[i + HtmlAnalyzer.SCRIPT_END_LAST];int srcFirst=info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST];int srcLast=info[i + HtmlAnalyzer.SCRIPT_SRC_LAST];oGzip.write(orig,iOrig,startFirst - iOrig);if (!isIframeDumped && info[i + HtmlAnalyzer.SCRIPT_IN_IE_COMMENT] == 0) {if (!isFuncsDumped) {isFuncsDumped=true;if (_isDelayIframe) oGzip.write(HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES,0,HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES.length); else oGzip.write(HTML_SPEED_FUNCS_BYTES,0,HTML_SPEED_FUNCS_BYTES.length);}if (isIE) oGzip.write(IFRAME_IE_BYTES,0,IFRAME_IE_BYTES.length); else oGzip.write(IFRAME_BYTES,0,IFRAME_BYTES.length);isIframeDumped=true;}if (srcFirst > 0 && configData.isDefer(new String(orig,srcFirst,srcLast - srcFirst))) oGzip.write(SCRIPT_IN_IFRAME_START_DEFER_BYTES,0,SCRIPT_IN_IFRAME_START_DEFER_BYTES.length); else oGzip.write(SCRIPT_IN_IFRAME_START_BYTES,0,SCRIPT_IN_IFRAME_START_BYTES.length);int j;for (j=startFirst + 7; j < srcFirst; j++) {switch (orig[j]) {case '\'':oGzip.write('\\');oGzip.write(orig[j]);break;case '\n':case '\r':oGzip.write(' ');break;default :oGzip.write(orig[j]);break;}}byte[] cdnUrl=null;if (allRsrcs[iAll] instanceof TempRsrc) {TempRsrc tmp=(TempRsrc)allRsrcs[iAll];if (isHttps) cdnUrl=tmp.cdnSslUrl; else cdnUrl=tmp.cdnUrl;}if (cdnUrl != null) oGzip.write(cdnUrl); else oGzip.write(orig,srcFirst,srcLast - srcFirst);for (j=srcLast; j < endLast - 9; j++) {switch (orig[j]) {case '\'':oGzip.write('\\');oGzip.write(orig[j]);break;case '\n':case '\r':oGzip.write(' ');break;default :oGzip.write(orig[j]);break;}}oGzip.write(SCRIPT_IN_IFRAME_END_BYTES,0,SCRIPT_IN_IFRAME_END_BYTES.length);iOrig=endLast;} else if (info[i] == HtmlAnalyzer.HEAD_KIND && isServiceWithIframe) {int headLast=info[i + HtmlAnalyzer.HEAD_START_LAST];oGzip.write(orig,iOrig,headLast - iOrig);if (configData.isBaseTargetParent) oGzip.write(BASE_TARGET_BYTES,0,BASE_TARGET_BYTES.length);if (!isFuncsDumped) {isFuncsDumped=true;if (_isDelayIframe) oGzip.write(HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES,0,HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES.length); else oGzip.write(HTML_SPEED_FUNCS_BYTES,0,HTML_SPEED_FUNCS_BYTES.length);}iOrig=headLast;} else if (info[i] == HtmlAnalyzer.BODY_KIND && isServiceWithIframe) {int onloadFirst=info[i + HtmlAnalyzer.BODY_ONLOAD_FIRST];int onloadLast=info[i + HtmlAnalyzer.BODY_ONLOAD_LAST];int bodyLast=info[i + HtmlAnalyzer.BODY_START_LAST];if (onloadFirst < 0) {oGzip.write(orig,iOrig,bodyLast - 1 - iOrig);oGzip.write(ONLOAD_FULL_BYTES,0,ONLOAD_FULL_BYTES.length);iOrig=bodyLast - 1;} else {oGzip.write(orig,iOrig,onloadFirst - iOrig);oGzip.write(IF_IN_IFRAME_BYTES,0,IF_IN_IFRAME_BYTES.length);oGzip.write(orig,onloadFirst,onloadLast - onloadFirst);oGzip.write(ONLOAD_SUFFIX_BYTES,0,ONLOAD_SUFFIX_BYTES.length);iOrig=onloadLast;}oGzip.write(orig,iOrig,bodyLast - iOrig);iOrig=bodyLast;if (!isIframeDumped) {if (!isFuncsDumped) {isFuncsDumped=true;if (_isDelayIframe) oGzip.write(HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES,0,HTML_SPEED_FUNCS_DELAY_IFRAME_BYTES.length); else oGzip.write(HTML_SPEED_FUNCS_BYTES,0,HTML_SPEED_FUNCS_BYTES.length);}if (isIE) oGzip.write(IFRAME_IE_BYTES,0,IFRAME_IE_BYTES.length); else oGzip.write(IFRAME_BYTES,0,IFRAME_BYTES.length);isIframeDumped=true;}} else if (info[i] == HtmlAnalyzer.A_KIND && isServiceWithIframe) {int targetFirst=info[i + HtmlAnalyzer.A_TARGET_FIRST];int targetLast=info[i + HtmlAnalyzer.A_TARGET_LAST];int hrefFirst=info[i + HtmlAnalyzer.A_HREF_FIRST];int aLast=info[i + HtmlAnalyzer.A_START_LAST];boolean isForcedSelf=0 <= hrefFirst && hrefFirst + 10 < orig.length && (orig[hrefFirst] == '#' || (orig[hrefFirst] == 'j' && orig[hrefFirst + 1] == 'a' && orig[hrefFirst + 2] == 'v' && orig[hrefFirst + 3] == 'a' && orig[hrefFirst + 4] == 's' && orig[hrefFirst + 5] == 'c' && orig[hrefFirst + 6] == 'r' && orig[hrefFirst + 7] == 'i' && orig[hrefFirst + 8] == 'p' && orig[hrefFirst + 9] == 't' && orig[hrefFirst + 10] == ':'));if (targetFirst > 0 && (targetFirst == targetLast || (targetLast - targetFirst == 5 && orig[targetFirst] == '_' && (orig[targetFirst + 1] == 's' || orig[targetFirst + 1] == 'S') && (orig[targetFirst + 2] == 'e' || orig[targetFirst + 2] == 'E') && (orig[targetFirst + 3] == 'l' || orig[targetFirst + 3] == 'L') && (orig[targetFirst + 4] == 'f' || orig[targetFirst + 4] == 'F') && !isForcedSelf))) {oGzip.write(orig,iOrig,targetFirst - iOrig);oGzip.write(PARENT_BYTES,0,PARENT_BYTES.length);iOrig=targetLast;} else if (targetFirst < 0 && !isForcedSelf && !configData.isBaseTargetParent) {oGzip.write(orig,iOrig,aLast - 1 - iOrig);oGzip.write(TARGET_PARENT_BYTES,0,TARGET_PARENT_BYTES.length);iOrig=aLast - 1;} else if (targetFirst < 0 && isForcedSelf && configData.isBaseTargetParent) {oGzip.write(orig,iOrig,aLast - 1 - iOrig);oGzip.write(TARGET_SELF_BYTES,0,TARGET_SELF_BYTES.length);iOrig=aLast - 1;}} else if (info[i] == HtmlAnalyzer.FORM_KIND && isServiceWithIframe) {int targetFirst=info[i + HtmlAnalyzer.FORM_TARGET_FIRST];int targetLast=info[i + HtmlAnalyzer.FORM_TARGET_LAST];int aLast=info[i + HtmlAnalyzer.FORM_START_LAST];if (targetFirst > 0 && (targetFirst == targetLast || (targetLast - targetFirst == 5 && orig[targetFirst] == '_' && (orig[targetFirst + 1] == 's' || orig[targetFirst + 1] == 'S') && (orig[targetFirst + 2] == 'e' || orig[targetFirst + 2] == 'E') && (orig[targetFirst + 3] == 'l' || orig[targetFirst + 3] == 'L') && (orig[targetFirst + 4] == 'f' || orig[targetFirst + 4] == 'F')))) {oGzip.write(orig,iOrig,targetFirst - iOrig);oGzip.write(PARENT_BYTES,0,PARENT_BYTES.length);iOrig=targetLast;} else if (targetFirst < 0) {oGzip.write(orig,iOrig,aLast - 1 - iOrig);oGzip.write(TARGET_PARENT_BYTES,0,TARGET_PARENT_BYTES.length);iOrig=aLast - 1;}} else if (info[i] == HtmlAnalyzer.LINK_KIND && allRsrcs[iAll] instanceof CssRsrc && ((CssRsrc)allRsrcs[iAll]).optimData != null) {int linkFirst=info[i + HtmlAnalyzer.LINK_FIRST];int linkLast=info[i + HtmlAnalyzer.LINK_LAST];oGzip.write(orig,iOrig,linkFirst - iOrig);oGzip.write(STYLE_START_BYTES,0,STYLE_START_BYTES.length);CssRsrc cssRsrc=(CssRsrc)allRsrcs[iAll];byte[] optimBytes=cssRsrc.optimData;int offset=0;if (optimBytes.length > 0) {while (offset < 3 && optimBytes[offset] < 0) offset++;}oGzip.write(optimBytes,offset,optimBytes.length - offset);oGzip.write(STYLE_END_BYTES,0,STYLE_END_BYTES.length);iOrig=linkLast;} else if (info[i] == HtmlAnalyzer.LINK_KIND && info[i + HtmlAnalyzer.LINK_HREF_FIRST] > 0 && allRsrcs[iAll] instanceof TempRsrc && ((TempRsrc)allRsrcs[iAll]).cdnUrl != null) {int linkHrefFirst=info[i + HtmlAnalyzer.LINK_HREF_FIRST];int linkHrefLast=info[i + HtmlAnalyzer.LINK_HREF_LAST];byte[] cdnUrl=isHttps ? ((TempRsrc)allRsrcs[iAll]).cdnSslUrl : ((TempRsrc)allRsrcs[iAll]).cdnUrl;oGzip.write(orig,iOrig,linkHrefFirst - iOrig);oGzip.write(cdnUrl,0,cdnUrl.length);iOrig=linkHrefLast;} else if (info[i] == HtmlAnalyzer.LINK_KIND && info[i + HtmlAnalyzer.LINK_HREF_FIRST] > 0 && allRsrcs[iAll] instanceof TempRsrc && ((TempRsrc)allRsrcs[iAll]).isVersioned && ((TempRsrc)allRsrcs[iAll]).replacer instanceof CssRsrc) {int hrefFirst=info[i + HtmlAnalyzer.LINK_HREF_FIRST];int hrefLast=info[i + HtmlAnalyzer.LINK_HREF_LAST];oGzip.write(orig,iOrig,hrefFirst - iOrig);CssRsrc cssRsrc=(CssRsrc)((TempRsrc)allRsrcs[iAll]).replacer;oGzip.write(cssRsrc.versionUrlBytes);iOrig=hrefLast;} else if (info[i] == HtmlAnalyzer.STYLE_START_KIND) {} else if (info[i] == HtmlAnalyzer.STYLE_END_KIND) {}if (info[i] == HtmlAnalyzer.IMG_KIND || info[i] == HtmlAnalyzer.CSS_IMG_KIND || info[i] == HtmlAnalyzer.INPUT_KIND || info[i] == HtmlAnalyzer.SCRIPT_KIND || info[i] == HtmlAnalyzer.LINK_KIND) iAll++;i+=HtmlAnalyzer.INFO_LENS[info[i]];}if (iOrig < orig.length) oGzip.write(orig,iOrig,orig.length - iOrig);oGzip.close();byte[] gzipedContent=oByteArr.toByteArray();if (oGzip instanceof OurGZIPOutputStream) context.ungzipedResponseLen=((OurGZIPOutputStream)oGzip).getUnzipedContentLen(); else context.ungzipedResponseLen=gzipedContent.length;return gzipedContent;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateSensorStateAndDataSet(Sensor.SensorState sensorState,Sensor.SensorDataSet sensorDataSet){  ((TextView)findViewById(R.id.sensor_state)).setText(SensorUtils.getStateAsString(sensorState,this));  String lastSensorTime=sensorDataSet == null ? getString(R.string.value_unknown) : getLastSensorTime(sensorDataSet);  String heartRate=sensorDataSet == null ? getString(R.string.value_unknown) : getHeartRate(sensorDataSet);  String cadence=sensorDataSet == null ? getString(R.string.value_unknown) : getCadence(sensorDataSet);  String power=sensorDataSet == null ? getString(R.string.value_unknown) : getPower(sensorDataSet);  String battery=sensorDataSet == null ? getString(R.string.value_unknown) : getBattery(sensorDataSet);  ((TextView)findViewById(R.id.sensor_state_last_sensor_time)).setText(lastSensorTime);  ((TextView)findViewById(R.id.sensor_state_heart_rate)).setText(heartRate);  ((TextView)findViewById(R.id.sensor_state_cadence)).setText(cadence);  ((TextView)findViewById(R.id.sensor_state_power)).setText(power);  ((TextView)findViewById(R.id.sensor_state_battery)).setText(battery);}  }
class C{  public byte[] value2Key(final Value value){  if (value == null)   throw new IllegalArgumentException();  if (value instanceof URI) {    final URI uri=(URI)value;    final String term=uri.toString();    return uri2key(term);  } else   if (value instanceof Literal) {    final Literal lit=(Literal)value;    final String text=lit.getLabel();    final String languageCode=lit.getLanguage();    final URI datatypeUri=lit.getDatatype();    if (languageCode != null) {      return languageCodeLiteral2key(languageCode,text);    } else     if (datatypeUri != null) {      return datatypeLiteral2key(datatypeUri,text);    } else {      return plainLiteral2key(text);    }  } else   if (value instanceof BNode) {    final String bnodeId=((BNode)value).getID();    return blankNode2Key(bnodeId);  } else {    throw new AssertionError("Unknown value type: " + value.getClass());  }}  }
class C{  @Override public String modelDescription(Locale locale){  ResourceBundle rb=getResourceBundle(locale);  return rb.getString("MODEL_DESCRIPTION_SIMPLE");}  }
class C{  protected ExtendedDismaxConfiguration createConfiguration(String qstr,SolrParams localParams,SolrParams params,SolrQueryRequest req){  return new ExtendedDismaxConfiguration(localParams,params,req);}  }
class C{  public void close() throws IOException {  mOutputStream.close();}  }
class C{  public static WifiP2pServiceRequest newInstance(int protocolType){  return new WifiP2pServiceRequest(protocolType,null);}  }
class C{  protected int unwrap(Object value){  return ((Integer)value).intValue();}  }
class C{  public void testGetDisplayedContentGreen(){  JFrame f=new JFrame();  f.setUndecorated(true);  JLabel wIcon=new JLabel(new ImageIcon("resources/icons/greenSquare.gif"));  f.add(wIcon);  f.pack();  flushAWT();  Assert.assertEquals("icon size",new Dimension(13,13).toString(),wIcon.getSize().toString());  int[] val=getDisplayedContent(wIcon,wIcon.getSize(),new Point(0,0));  Assert.assertEquals("icon arraylength",13 * 13,val.length);  assertPixel("icon first",Pixel.GREEN,val[0]);  assertPixel("icon middle",Pixel.GREEN,val[(int)Math.floor(wIcon.getSize().height / 2) * wIcon.getSize().width + (int)Math.floor(wIcon.getSize().width / 2) - 1]);  assertPixel("icon last",Pixel.GREEN,val[wIcon.getSize().height * wIcon.getSize().width - 1]);  Assert.assertEquals("icon first","0xff00ff00",formatPixel(val[0]));  assertImageNinePoints("icon",val,wIcon.getSize(),Pixel.GREEN,Pixel.GREEN,Pixel.GREEN,Pixel.GREEN,Pixel.GREEN,Pixel.GREEN,Pixel.GREEN,Pixel.GREEN,Pixel.GREEN);  f.dispose();}  }
class C{  public final void testSetHintWithResourceIdParameter(){  ArrayAdapter<CharSequence> adapter=new ArrayAdapter<CharSequence>(getContext(),android.R.layout.simple_spinner_dropdown_item,new CharSequence[]{"entry1","entry2"});  Spinner spinner=new Spinner(getContext());  spinner.setAdapter(adapter);  spinner.setHint(android.R.string.cancel);  assertEquals(getContext().getText(android.R.string.cancel),spinner.getHint());}  }
class C{  public static int rollDice(){  return (int)(1 + Math.random() * 6);}  }
class C{  public void dismiss(){  mPopup.dismiss();  removePromptView();  mPopup.setContentView(null);  mDropDownList=null;  mHandler.removeCallbacks(mResizePopupRunnable);}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  private boolean uploadWaypoints(Fusiontables fusiontables,String tableId) throws IOException {  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getWaypointCursor(trackId,-1L,Constants.MAX_LOADED_WAYPOINTS_POINTS);    if (cursor != null && cursor.moveToFirst()) {      while (cursor.moveToNext()) {        Waypoint wpt=myTracksProviderUtils.createWaypoint(cursor);        String type=wpt.getType() == WaypointType.STATISTICS ? MARKER_TYPE_STATISTICS : MARKER_TYPE_WAYPOINT;        String description=wpt.getDescription().replaceAll("\n","<br>");        createNewPoint(fusiontables,tableId,wpt.getName(),description,wpt.getLocation(),type);      }    }    return true;  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public byte readByteFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Byte)getPrimitive(node)).byteValue();}  }
class C{  public String toString(){  return map.toString();}  }
class C{  protected void analyticsCallback(String page,String referrer){  if (!isBlockAnalytics() && AnalyticsService.isEnabled()) {    AnalyticsService.visit(page,referrer);  }}  }
class C{  public SingleSessionIoHandlerAdapter(IoSession session){  if (session == null) {    throw new IllegalArgumentException("session");  }  this.session=session;}  }
class C{  public final void writeBytes(String str) throws IOException {  int strlen=str.length();  if (strlen > 0) {    this.size+=strlen;  }}  }
class C{  public void createResourcePoolComputeHost() throws Throwable {  this.outPool=createAWSResourcePool(this.host);  this.outComputeHost=createAWSComputeHost(this.host,this.outPool.documentSelfLink,this.accessKey,this.secretKey,this.isAwsClientMock,this.awsMockEndpointReference,null);}  }
class C{  public Builder maskStrings(String fullyQualifiedColumnNames,String maskValue){  return map(fullyQualifiedColumnNames,new MaskStrings(maskValue));}  }
class C{  protected TestClient createClient(InetAddress addr,int port,InetAddress locHost) throws IgniteCheckedException {  return new TestClient(createSocket(),addr,port,0);}  }
class C{  public void deleteLocalComment(final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_node.getComments().deleteLocalCodeNodeComment(comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  private static boolean compare(TestCaseResult exp,List<TestCaseResult> actList,String tool){  if (actList == null || actList.isEmpty()) {    return !exp.isReal();  }  for (  TestCaseResult act : actList) {    int actualCWE=act.getCWE();    int expectedCWE=exp.getCWE();    boolean match=actualCWE == expectedCWE;    if (!match && (expectedCWE == 564)) {      match=(actualCWE == 89);    }    if (tool.startsWith("AppScan") || tool.startsWith("Vera")) {      if (expectedCWE == 328 && actualCWE == 327) {        match=true;      }    }    if (match) {      return exp.isReal();    }  }  return !exp.isReal();}  }
class C{  static public String[] splitTokens(String what){  return splitTokens(what,WHITESPACE);}  }
class C{  private void initializeLiveAttributes(){  offset=createLiveAnimatedNumber(null,SVG_OFFSET_ATTRIBUTE,0f,true);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public static boolean isNotEmpty(String s){  return (s != null) && s.length() > 0;}  }
class C{  @Override public void printStackTrace(PrintWriter output){synchronized (output) {    IStatus status=getStatus();    if (status.getException() != null) {      String path="()";      if (status instanceof IResourceStatus)       path="(" + ((IResourceStatus)status).getPath() + ")";      output.print(getClass().getName() + path + "["+ status.getCode()+ "]: ");      status.getException().printStackTrace(output);    } else     super.printStackTrace(output);  }}  }
class C{  public GeoHashGridBuilder shardSize(int shardSize){  this.shardSize=shardSize;  return this;}  }
class C{  @SuppressWarnings("unused") private void mockMethod(){}  }
class C{  private void checkForFailure(FilterJoinNode node){  if (node.hasFailure()) {    logger.error("Node processing failed: {}",node.getFailure());    throw new ElasticsearchException("Unexpected failure while processing a node",node.getFailure());  }}  }
class C{  protected void write(final String data){}  }
class C{  public JSONArray add(boolean value){  values.add(JSON.value(value));  return this;}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void add(Cluster cluster){  mentions.addAll(cluster.getMentions());}  }
class C{  public BOSHConnection(BOSHConfiguration config){  super(config);  this.config=config;}  }
class C{  public HashPrintRequestAttributeSet(PrintRequestAttribute[] attributes){  super(attributes,PrintRequestAttribute.class);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public SimpleConstant(String name,double doubleValue,String annotation){  this(name,doubleValue);  this.annotation=annotation;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean nullsAreSortedLow(){  debugCodeCall("nullsAreSortedLow");  return !SysProperties.SORT_NULLS_HIGH;}  }
class C{  public int[] validBaudNumber(){  return new int[]{57600};}  }
class C{  public FIXSession(SocketChannel channel,FIXConfig config,FIXMessageListener listener,FIXStatusListener statusListener){  this(SystemClock.INSTANCE,channel,config,listener,statusListener);}  }
class C{  private static String uniqueAlgorithm(List names,String baseName,String sep){  String newName=baseName;  int unique=0;  while (names.contains(newName)) {    String ins=(sep == null ? "" : sep);    newName=baseName + ins + String.valueOf(++unique);  }  names.add(newName);  return newName;}  }
class C{  public static Dialog createConfirmationDialog(Context context,String title,String confirmText,String dismissText,Runnable command){  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(context);  dialogBuilder.setCancelable(true);  dialogBuilder.setIcon(R.drawable.icon);  dialogBuilder.setTitle(title);  dialogBuilder.setInverseBackgroundForced(true);  dialogBuilder.setPositiveButton(confirmText,new DialogCommandWrapper(command));  dialogBuilder.setNegativeButton(dismissText,new DialogCommandWrapper(NO_OP));  return dialogBuilder.create();}  }
class C{  public void revokeOwnership(Collection<String> jids) throws XMPPException {  changeAffiliationByAdmin(jids,"admin");}  }
class C{  public void createInspectors(Rectangle2D.Double rect,GUIState simulation){  Bag wrappers=new Bag();  Bag[] hitObjects=objectsHitBy(rect);  for (int x=0; x < hitObjects.length; x++) {    FieldPortrayal2DHolder p=(FieldPortrayal2DHolder)(portrayals.get(x));    for (int i=0; i < hitObjects[x].numObjs; i++) {      LocationWrapper wrapper=(LocationWrapper)(hitObjects[x].objs[i]);      wrapper.fieldPortrayal=p.portrayal;      wrappers.add(wrapper);    }  }  createInspectors(wrappers,simulation);}  }
class C{  @Override public String install() throws InstallException {  boolean fullPathRequired=IdeFinder.getOS() == EclipseFinder.OS.UNIX || System.getProperty("lombok.installer.fullpath") != null;  boolean installSucceeded=false;  StringBuilder newContents=new StringBuilder();  File lombokJar=new File(eclipseIniPath.getParentFile(),"lombok.jar");  if (!Installer.isSelf(lombokJar.getAbsolutePath())) {    File ourJar=findOurJar();    byte[] b=new byte[524288];    boolean readSucceeded=true;    try {      FileOutputStream out=new FileOutputStream(lombokJar);      try {        readSucceeded=false;        InputStream in=new FileInputStream(ourJar);        try {          while (true) {            int r=in.read(b);            if (r == -1)             break;            if (r > 0)             readSucceeded=true;            out.write(b,0,r);          }        }  finally {          in.close();        }      }  finally {        out.close();      }    } catch (    IOException e) {      try {        lombokJar.delete();      } catch (      Throwable ignore) {      }      if (!readSucceeded)       throw new InstallException("I can't read my own jar file. I think you've found a bug in this installer!\nI suggest you restart it " + "and use the 'what do I do' link, to manually install lombok. Also, tell us about this at:\n" + "http://groups.google.com/group/project-lombok - Thanks!",e);      throw new InstallException("I can't write to your " + getTypeName() + " directory at "+ name+ generateWriteErrorMessage(),e);    }  }{    new File(lombokJar.getParentFile(),"lombok.eclipse.agent.jar").delete();  }  try {    FileInputStream fis=new FileInputStream(eclipseIniPath);    try {      BufferedReader br=new BufferedReader(new InputStreamReader(fis));      String line;      while ((line=br.readLine()) != null) {        if (JAVA_AGENT_LINE_MATCHER.matcher(line).matches())         continue;        Matcher m=BOOTCLASSPATH_LINE_MATCHER.matcher(line);        if (m.matches()) {          StringBuilder elemBuilder=new StringBuilder();          elemBuilder.append("-Xbootclasspath/a:");          boolean first=true;          for (          String elem : m.group(1).split(Pattern.quote(File.pathSeparator))) {            if (elem.toLowerCase().endsWith("lombok.jar"))             continue;{              if (elem.toLowerCase().endsWith("lombok.eclipse.agent.jar"))               continue;            }            if (first)             first=false; else             elemBuilder.append(File.pathSeparator);            elemBuilder.append(elem);          }          if (!first)           newContents.append(elemBuilder.toString()).append(OS_NEWLINE);          continue;        }        newContents.append(line).append(OS_NEWLINE);      }      br.close();    }  finally {      fis.close();    }    String pathPrefix;    if (fullPathRequired) {      pathPrefix=lombokJar.getParentFile().getCanonicalPath() + File.separator;    } else {      pathPrefix=pathToLombokJarPrefix;    }    newContents.append(String.format("-javaagent:%s",escapePath(pathPrefix + "lombok.jar"))).append(OS_NEWLINE);    FileOutputStream fos=new FileOutputStream(eclipseIniPath);    try {      fos.write(newContents.toString().getBytes());    }  finally {      fos.close();    }    installSucceeded=true;  } catch (  IOException e) {    throw new InstallException("Cannot install lombok at " + name + generateWriteErrorMessage(),e);  } finally {    if (!installSucceeded)     try {      lombokJar.delete();    } catch (    Throwable ignore) {    }  }  if (!installSucceeded) {    throw new InstallException("I can't find the " + getIniFileName() + " file. Is this a real "+ getTypeName()+ " installation?",null);  }  return "If you start " + getTypeName() + " with a custom -vm parameter, you'll need to add:<br>"+ "<code>-vmargs -javaagent:lombok.jar</code><br>as parameter as well.";}  }
class C{  public NodeReference(String serverUri,String namespaceUri,Object value){  if (value == null || namespaceUri == null || serverUri == null)   throw new IllegalArgumentException("argument is null");  this.namespaceUri=namespaceUri;  this.serverUri=serverUri;  if (value instanceof Integer)   value=UnsignedInteger.getFromBits((Integer)value);  this.value=value;  if (value instanceof UnsignedInteger)   type=IdType.Numeric; else   if (value instanceof String)   type=IdType.String; else   if (value instanceof UUID)   type=IdType.Guid; else   if (value instanceof byte[])   type=IdType.Opaque; else   throw new IllegalArgumentException("value cannot be " + value.getClass().getName());  if (!(value instanceof byte[]))   hashCode+=3 * value.hashCode();  if (namespaceUri != null)   hashCode+=13 * namespaceUri.hashCode();  if (serverUri != null)   hashCode+=17 * serverUri.hashCode();}  }
class C{  @Override public byte[] encode(BufferedImage bufferedImage) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  encode(bufferedImage,outputStream);  return outputStream.toByteArray();}  }
class C{  public void endVisit(MethodDeclaration node){  if (!taintedDataMapStack.isEmpty())   taintedDataMapStack.pop();}  }
class C{  private File fileForPath(IgfsPath path){  if (workDir == null)   return new File(path.toString()); else {    if ("/".equals(path.toString()))     return new File(workDir); else     return new File(workDir,path.toString());  }}  }
class C{  void addNewEntry(K key,V value,int hash,int index){  table[index]=new HashMapEntry<K,V>(key,value,hash,table[index]);}  }
class C{  public boolean hasWildcard(){  return false;}  }
class C{  public static String concatenateWhere(String a,String b){  if (TextUtils.isEmpty(a)) {    return b;  }  if (TextUtils.isEmpty(b)) {    return a;  }  return "(" + a + ") AND ("+ b+ ")";}  }
class C{  public SQLFormattingStrategy(ISourceViewer sourceViewer,SQLEditorSourceViewerConfiguration svConfig,SQLSyntaxManager syntax){  this.sourceViewer=sourceViewer;  this.svConfig=svConfig;  this.sqlSyntax=syntax;}  }
class C{  public static String randomRegexp(Random r){  while (true) {    String regexp=randomRegexpString(r);    if (!UnicodeUtil.validUTF16String(regexp))     continue;    try {      new RegExp(regexp,RegExp.NONE);      return regexp;    } catch (    Exception e) {    }  }}  }
class C{  public BulkUserImportException(Reason reason,Exception cause){  super(reason.toString(),cause);  bean.setReason(reason);  setMessageKey(initMessageKey(reason));}  }
class C{  public void writeLong(String key,long value){  SharedPreferences.Editor editor=preferences.edit();  editor.putLong(key,value);  editor.commit();}  }
class C{  @Override public int hashCode(){  int hash=_port + (_isSecure ? 65521 : 31);  byte[] uri=_uri;  int length=_uriLength;  for (int i=length - 1; i >= 0; i--) {    hash=65521 * hash + uri[i];  }  CharSequence host=_host;  if (host != null) {    hash=65521 * hash + host.hashCode();  }  return hash;}  }
class C{  public static boolean isOccupied(char x){  return x == 'Q';}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void eventNode(ClusterNode evtNode){  this.evtNode=evtNode;}  }
class C{  public int fetch(int k){  if (bits[k])   return 1; else   return 0;}  }
class C{  public void onAge(Player player){  getAndCheckAchievementsInCategory(player,Category.AGE);}  }
class C{  public void subscribe(ClientConnection connection,String channelID,long startOffset){  if (!clientSubscriptions.containsKey(connection)) {    clientSubscriptions.putIfAbsent(connection,ConcurrentHashMap.newKeySet());  }  clientSubscriptions.get(connection).add(channelID);  getChannel(channelID).subscribe(connection,startOffset);}  }
class C{  public boolean userCanCreateDept(int connectedUserId,int parentDeptId,String entidad) throws Exception {  boolean can=false;  int parentDeptMgrId=Defs.NULL_ID;  try {    if (parentDeptId == Defs.NULL_ID || parentDeptId == Defs.ROOT_DEPT_ID)     parentDeptMgrId=0; else     parentDeptMgrId=this.getDeptMgrId(parentDeptId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_CREATE,Defs.NULL_ID,parentDeptMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public OutputStreamInterceptingFilter(GuacamoleTunnel tunnel){  super(tunnel);}  }
class C{  public void addTextMsg(Object obj){  if (obj == null)   return;  StringBuffer TextMsg=new StringBuffer();  if (obj instanceof Exception) {    Exception ex=(Exception)obj;    if (ex.getMessage() != null && ex.getMessage().trim().length() > 0) {      TextMsg.append(ex.toString());    } else     if (ex instanceof NullPointerException) {      TextMsg.append(ex.getClass().getName());    }    while (ex != null) {      StackTraceElement[] st=ex.getStackTrace();      for (int i=0; i < st.length; i++) {        StackTraceElement ste=st[i];        if (i == 0 || ste.getClassName().startsWith("org.compiere") || ste.getClassName().startsWith("org.adempiere"))         TextMsg.append(" (").append(i).append("): ").append(ste.toString()).append("\n");      }      if (ex.getCause() instanceof Exception)       ex=(Exception)ex.getCause(); else       ex=null;    }  } else {    TextMsg.append(obj.toString());  }  String oldText=getTextMsg();  if (oldText == null || oldText.length() == 0)   super.setTextMsg(Util.trimSize(TextMsg.toString(),1000)); else   if (TextMsg != null && TextMsg.length() > 0)   super.setTextMsg(Util.trimSize(oldText + "\n - " + TextMsg.toString(),1000));}  }
class C{  public boolean isLabelOutlineVisible(){  return this.labelOutlineVisible;}  }
class C{  public MultiplexingDatagramSocket(DatagramSocket delegate) throws SocketException {  super(delegate);}  }
class C{  public IP(int a,int b,int c,int d){  checkArgument(checkRange(a) && checkRange(b) && checkRange(c)&& checkRange(d),"Each number of IP must in 0 ~ 255");  this.a=a;  this.b=b;  this.c=c;  this.d=d;  value=this.toLong();}  }
class C{  public TableScrollBorder(){  super(new Insets(3,5,10,5),org.jb2011.lnf.beautyeye.ch5_table.__Icon9Factory__.getInstance().getTableScrollBorder1());}  }
class C{  final public boolean isOptional(){  return false;}  }
class C{  public void resetFlags(){  mCompositorView.resetFlags();}  }
class C{  public NamespaceMetaDataPair(final Namespace namespace,final DefaultMetaData metaData){  super("namespace","meta",namespace,metaData);}  }
class C{  private synchronized void requestAudioFocus(){  if (!mHasAudioFocus) {    final AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);    int result=am.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);    if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      am.registerMediaButtonEventReceiver(RemoteControlReceiver.getComponentName(this));      mRemoteMetadata.setActive(true);      registerReceiver(mAudioNoisyReceiver,new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));      mWakeLock.acquire();      mHasAudioFocus=true;    } else {      Log.e(TAG,"Audio focus request denied: " + result);    }  }}  }
class C{  @Override synchronized public void stop(){  if (ignite != null)   ignite.close();  sinkCounter.stop();  super.stop();}  }
class C{  public void orderMinionToMoveTo(AStarNode[] possibles,boolean allowDropping){  currentTarget=new BlockPos(possibles[0].x,possibles[0].y,possibles[0].z);  pathPlanner.getPath(doubleToInt(this.posX),doubleToInt(this.posY),doubleToInt(this.posZ),possibles,allowDropping);}  }
class C{  public void leanTransforms(DataSet dataSet){  learnApplyTransforms(dataSet.shallowClone());}  }
class C{  private HttpEntity executePost(String url,String[][] postParams,String[][] headerParams) throws IOException {  List<NameValuePair> formparams=new ArrayList<NameValuePair>();  for (  String[] param : postParams) {    if (param[0] != null && param[1] != null) {      formparams.add(new BasicNameValuePair(param[0],param[1]));    }  }  UrlEncodedFormEntity entity=new UrlEncodedFormEntity(formparams,"UTF-8");  return executePost(url,entity,headerParams);}  }
class C{  public Lineizer(Reader reader,String commentMarker){  if (reader == null) {    throw new NullPointerException();  }  if (commentMarker == null) {    throw new NullPointerException();  }  this.reader=new BufferedReader(reader);  this.commentMarker=commentMarker;}  }
class C{  @NoInline @Interruptible public static CodeArray allocateCode(int numInstrs,boolean isHot){  RVMArray type=RVMType.CodeArrayType;  int headerSize=ObjectModel.computeArrayHeaderSize(type);  int align=ObjectModel.getAlignment(type);  int offset=ObjectModel.getOffsetForAlignment(type,false);  int width=type.getLogElementSize();  TIB tib=type.getTypeInformationBlock();  int allocator=isHot ? Plan.ALLOC_HOT_CODE : Plan.ALLOC_COLD_CODE;  return (CodeArray)allocateArray(numInstrs,width,headerSize,tib,allocator,align,offset,Plan.DEFAULT_SITE);}  }
class C{  public boolean isSingleSource(){  return singleSource;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.937 -0500",hash_original_method="3D1593377407708784326DC2078D0103",hash_generated_method="10FCFFA6DE7275B391E4D816E1D0E21F") public ServerSocket createServerSocket(int port,int backlog) throws IOException {  return new ServerSocket(port,backlog);}  }
class C{  public boolean delistResource(XAResource xaRes,int flag) throws IllegalStateException, SystemException {  try {    if (resourceMap.containsKey(xaRes)) {      Boolean isActive=(Boolean)resourceMap.get(xaRes);      if (isActive.booleanValue()) {        xaRes.end(xid,flag);        resourceMap.put(xaRes,Boolean.FALSE);      }    }  } catch (  Exception e) {    String exception=LocalizedStrings.GlobalTransaction_ERROR_WHILE_DELISTING_XARESOURCE_0_1.toLocalizedString(new Object[]{e," " + (e instanceof XAException ? ("Error Code =" + ((XAException)e).errorCode) : "")});    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (VERBOSE)     writer.fine(exception,e);    SystemException se=new SystemException(exception);    se.initCause(e);  }  return true;}  }
class C{  public void testDummy() throws Exception {}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public BufferSlice toSlice(){  if (size == objectBeginOffset) {    throw new RuntimeException("data size is zero.");  }  BufferSlice slice=new BufferSlice(buffer,objectBeginOffset,size - objectBeginOffset);  objectBeginOffset=size;  exposedSlices=true;  return slice;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isClosed() throws SQLException {  return protocol.isClosed();}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MPeriod.testPeriodOpen(getCtx(),getMovementDate(),MDocType.DOCBASETYPE_MaterialPhysicalInventory,getAD_Org_ID());  MInventoryLine[] lines=getLines(false);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  protected void remoteFetch(String url){  RequestBuilder rb=new RequestBuilder(RequestBuilder.GET,url);  try {    rb.setCallback(new ParseJsonFileCallback());    rb.send();  } catch (  RequestException e) {    notificationManager.showNotification(new Notification("Unable to get tour" + e.getMessage(),ERROR));  }}  }
class C{  public ResultMatrixGnuPlot(){  this(1,1);}  }
class C{  public void maxParentSetSize(int nSize){  m_nParents=new int[nSize];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Vertex circleCenter(Vertex b,Vertex c){  Vertex a=new Vertex(this.getX(),this.getY());  HCoordinate cab=bisector(a,b);  HCoordinate cbc=bisector(b,c);  HCoordinate hcc=new HCoordinate(cab,cbc);  Vertex cc=null;  try {    cc=new Vertex(hcc.getX(),hcc.getY());  } catch (  NotRepresentableException nre) {    System.err.println("a: " + a + "  b: "+ b+ "  c: "+ c);    System.err.println(nre);  }  return cc;}  }
class C{  @Override public void validate(Password password){  for (  Rule rule : passwordRules) {    rule.validate(password);  }}  }
class C{  public Process exec(String[] progArray) throws java.io.IOException {  return exec(progArray,null,null);}  }
class C{  public void skipNode(Object node){  if (!super.containsNode(node))   return;  Object[] preds=getPredsOf(node).toArray();  Object[] succs=getSuccsOf(node).toArray();  for (  Object element : preds) {    for (    Object element0 : succs) {      if (element != element0)       super.addEdge(element,element0);    }  }  for (  Object element : preds) {    super.removeEdge(element,node);  }  for (  Object element : succs) {    super.removeEdge(node,element);  }  super.removeNode(node);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void pvt(String user){  checkSocket();  this.socket.sendTextMessage("pvt: " + user);}  }
class C{  AkCollatorICU(final String scheme,final int collationId){  super(scheme,collationId);  collationSpecifier=new CollationSpecifier(scheme);  collator.get();}  }
class C{  public boolean isCaseSensitive(){  return m_isCaseSensitive;}  }
class C{  public static String truncate(String string,int length){  return string.length() > length ? string.substring(0,length) + "..." : string;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:57.825 -0500",hash_original_method="B5878332DE43EFB46C0A76BAF3DD0FEF",hash_generated_method="ED6C5AF4309AF6DE87CD8BAB5BAEA716") @Override protected int dispatchGsmMessage(SmsMessageBase message){  return ((CDMALTEPhone)phone).m3gppSMS.dispatchMessage(message);}  }
class C{  protected SetVal(Value... values){  this(Arrays.asList(values));}  }
class C{  public void configureFromObjectSettings(AnnotatedWithParams defaultCreator,AnnotatedWithParams delegateCreator,JavaType delegateType,AnnotatedWithParams withArgsCreator,CreatorProperty[] constructorArgs){  _defaultCreator=defaultCreator;  _delegateCreator=delegateCreator;  _delegateType=delegateType;  _withArgsCreator=withArgsCreator;  _constructorArguments=constructorArgs;}  }
class C{  public String amt(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  if (steps)   log.warning("init");  int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  int M_PriceList_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_ID");  int StdPrecision=MPriceList.getStandardPrecision(ctx,M_PriceList_ID);  BigDecimal QtyEntered, QtyOrdered, PriceEntered, PriceActual, PriceLimit, Discount, PriceList;  QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");  QtyOrdered=(BigDecimal)mTab.getValue("QtyOrdered");  log.fine("QtyEntered=" + QtyEntered + ", Ordered="+ QtyOrdered+ ", UOM="+ C_UOM_To_ID);  PriceEntered=(BigDecimal)mTab.getValue("PriceEntered");  PriceActual=(BigDecimal)mTab.getValue("PriceActual");  Discount=(BigDecimal)mTab.getValue("Discount");  PriceLimit=(BigDecimal)mTab.getValue("PriceLimit");  PriceList=(BigDecimal)mTab.getValue("PriceList");  log.fine("PriceList=" + PriceList + ", Limit="+ PriceLimit+ ", Precision="+ StdPrecision);  log.fine("PriceEntered=" + PriceEntered + ", Actual="+ PriceActual+ ", Discount="+ Discount);  if (M_Product_ID == 0) {    if (mField.getColumnName().equals("PriceActual")) {      PriceEntered=(BigDecimal)value;      mTab.setValue("PriceEntered",value);    } else     if (mField.getColumnName().equals("PriceEntered")) {      PriceActual=(BigDecimal)value;      mTab.setValue("PriceActual",value);    }  } else   if ((mField.getColumnName().equals("QtyOrdered") || mField.getColumnName().equals("QtyEntered") || mField.getColumnName().equals("C_UOM_ID")|| mField.getColumnName().equals("M_Product_ID")) && !"N".equals(Env.getContext(ctx,WindowNo,"DiscountSchema"))) {    int C_BPartner_ID=Env.getContextAsInt(ctx,WindowNo,"C_BPartner_ID");    if (mField.getColumnName().equals("QtyEntered"))     QtyOrdered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyOrdered == null)     QtyOrdered=QtyEntered;    boolean IsSOTrx=Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y");    MProductPricing pp=new MProductPricing(M_Product_ID,C_BPartner_ID,QtyOrdered,IsSOTrx);    pp.setM_PriceList_ID(M_PriceList_ID);    int M_PriceList_Version_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_Version_ID");    pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);    Timestamp date=(Timestamp)mTab.getValue("DateOrdered");    pp.setPriceDate(date);    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,pp.getPriceStd());    if (PriceEntered == null)     PriceEntered=pp.getPriceStd();    log.fine("QtyChanged -> PriceActual=" + pp.getPriceStd() + ", PriceEntered="+ PriceEntered+ ", Discount="+ pp.getDiscount());    PriceActual=pp.getPriceStd();    mTab.setValue("PriceActual",pp.getPriceStd());    mTab.setValue("Discount",pp.getDiscount());    mTab.setValue("PriceEntered",PriceEntered);    Env.setContext(ctx,WindowNo,"DiscountSchema",pp.isDiscountSchema() ? "Y" : "N");  } else   if (mField.getColumnName().equals("PriceActual")) {    PriceActual=(BigDecimal)value;    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,PriceActual);    if (PriceEntered == null)     PriceEntered=PriceActual;    log.fine("PriceActual=" + PriceActual + " -> PriceEntered="+ PriceEntered);    mTab.setValue("PriceEntered",PriceEntered);  } else   if (mField.getColumnName().equals("PriceEntered")) {    PriceEntered=(BigDecimal)value;    PriceActual=MUOMConversion.convertProductTo(ctx,M_Product_ID,C_UOM_To_ID,PriceEntered);    if (PriceActual == null)     PriceActual=PriceEntered;    log.fine("PriceEntered=" + PriceEntered + " -> PriceActual="+ PriceActual);    mTab.setValue("PriceActual",PriceActual);  }  if (mField.getColumnName().equals("Discount")) {    if (PriceList.doubleValue() != 0)     PriceActual=new BigDecimal((100.0 - Discount.doubleValue()) / 100.0 * PriceList.doubleValue());    if (PriceActual.scale() > StdPrecision)     PriceActual=PriceActual.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP);    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,PriceActual);    if (PriceEntered == null)     PriceEntered=PriceActual;    mTab.setValue("PriceActual",PriceActual);    mTab.setValue("PriceEntered",PriceEntered);  } else {    if (PriceList.intValue() == 0)     Discount=Env.ZERO; else     Discount=new BigDecimal((PriceList.doubleValue() - PriceActual.doubleValue()) / PriceList.doubleValue() * 100.0);    if (Discount.scale() > 2)     Discount=Discount.setScale(2,BigDecimal.ROUND_HALF_UP);    mTab.setValue("Discount",Discount);  }  log.fine("PriceEntered=" + PriceEntered + ", Actual="+ PriceActual+ ", Discount="+ Discount);  String epl=Env.getContext(ctx,WindowNo,"EnforcePriceLimit");  boolean enforce=Env.isSOTrx(ctx,WindowNo) && epl != null && epl.equals("Y");  if (enforce && MRole.getDefault().isOverwritePriceLimit())   enforce=false;  if (enforce && PriceLimit.doubleValue() != 0.0 && PriceActual.compareTo(PriceLimit) < 0) {    PriceActual=PriceLimit;    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,PriceLimit);    if (PriceEntered == null)     PriceEntered=PriceLimit;    log.fine("(under) PriceEntered=" + PriceEntered + ", Actual"+ PriceLimit);    mTab.setValue("PriceActual",PriceLimit);    mTab.setValue("PriceEntered",PriceEntered);    mTab.fireDataStatusEEvent("UnderLimitPrice","",false);    if (PriceList.intValue() != 0) {      Discount=new BigDecimal((PriceList.doubleValue() - PriceActual.doubleValue()) / PriceList.doubleValue() * 100.0);      if (Discount.scale() > 2)       Discount=Discount.setScale(2,BigDecimal.ROUND_HALF_UP);      mTab.setValue("Discount",Discount);    }  }  BigDecimal LineNetAmt=QtyOrdered.multiply(PriceActual);  if (LineNetAmt.scale() > StdPrecision)   LineNetAmt=LineNetAmt.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP);  log.info("LineNetAmt=" + LineNetAmt);  mTab.setValue("LineNetAmt",LineNetAmt);  return "";}  }
class C{  public void clearBuffer(){  if (position <= 0) {    position=0;  } else {    buffer[0]=buffer[position - 1];    position=1;  }}  }
class C{  public static boolean isTimestamp(Context c){  SharedPreferences pref=c.getSharedPreferences(APP_PREF_NAME,Context.MODE_PRIVATE);  return pref.getBoolean("timestamp",c.getString(R.string.timestamp).equals("true"));}  }
class C{  public final boolean commonCauseForbidden(String var1,String var2){  return forbiddenCommonCauses.contains(new KnowledgeEdge(var1,var2));}  }
class C{  private void initialize(Dimension size){  this.setPreferredSize(size);  this.setMinimumSize(size);  this.setBackground(Color.WHITE);  this.setBorder(BorderFactory.createLineBorder(this.getBackground().darker()));}  }
class C{  public static String gsm8BitUnpackedToString(byte[] data,int offset,int length,String characterset){  boolean isMbcs=false;  Charset charset=null;  ByteBuffer mbcsBuffer=null;  if (!TextUtils.isEmpty(characterset) && !characterset.equalsIgnoreCase("us-ascii") && Charset.isSupported(characterset)) {    isMbcs=true;    charset=Charset.forName(characterset);    mbcsBuffer=ByteBuffer.allocate(2);  }  String languageTableToChar=sLanguageTables[0];  String shiftTableToChar=sLanguageShiftTables[0];  StringBuilder ret=new StringBuilder(length);  boolean prevWasEscape=false;  for (int i=offset; i < offset + length; i++) {    int c=data[i] & 0xff;    if (c == 0xff) {      break;    } else     if (c == GSM_EXTENDED_ESCAPE) {      if (prevWasEscape) {        ret.append(' ');        prevWasEscape=false;      } else {        prevWasEscape=true;      }    } else {      if (prevWasEscape) {        char shiftChar=shiftTableToChar.charAt(c);        if (shiftChar == ' ') {          ret.append(languageTableToChar.charAt(c));        } else {          ret.append(shiftChar);        }      } else {        if (!isMbcs || c < 0x80 || i + 1 >= offset + length) {          ret.append(languageTableToChar.charAt(c));        } else {          mbcsBuffer.clear();          mbcsBuffer.put(data,i++,2);          mbcsBuffer.flip();          ret.append(charset.decode(mbcsBuffer).toString());        }      }      prevWasEscape=false;    }  }  return ret.toString();}  }
class C{  public static void activateProfiles(){  int i, n;  deferring=false;  if (aVector == null) {    return;  }  n=aVector.size();  for (  ProfileActivator pa : aVector) {    try {      pa.activate();    } catch (    ProfileDataException e) {    }  }  aVector.removeAllElements();  aVector=null;  return;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.229 -0500",hash_original_method="A4C771CAD3F4C9A57E73CCEAED0A04B5",hash_generated_method="E5700C27A853EC6F51A5150DA453A47A") public int newgroups(String date,String time,boolean GMT,String distributions) throws IOException {  StringBuffer buffer=new StringBuffer();  buffer.append(date);  buffer.append(' ');  buffer.append(time);  if (GMT) {    buffer.append(' ');    buffer.append("GMT");  }  if (distributions != null) {    buffer.append(" <");    buffer.append(distributions);    buffer.append('>');  }  return sendCommand(NNTPCommand.NEWGROUPS,buffer.toString());}  }
class C{  public String sqlMetadata_primaryKeyColumns(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_primaryKeyColumns(catalogName,schemaName);}  }
class C{  public void printStackTrace(PrintStream s){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(new PrintWriter(s));  } else {    super.printStackTrace(s);  }}  }
class C{  public MultiStepRace(String appName){  RaceGUI basicGUI=new RaceGUI(appName);  Point values[]={TrackView.START_POS,TrackView.FIRST_TURN_START,TrackView.FIRST_TURN_END,TrackView.SECOND_TURN_START,TrackView.SECOND_TURN_END,TrackView.THIRD_TURN_START,TrackView.THIRD_TURN_END,TrackView.FOURTH_TURN_START,TrackView.START_POS};  KeyValues keyValues=KeyValues.create(values);  double totalDistance=0;  double segmentDistance[]=new double[values.length];  for (int i=0; i < (values.length - 1); ++i) {    segmentDistance[i]=values[i].distance(values[i + 1]);    totalDistance+=segmentDistance[i];  }  segmentDistance[(values.length - 1)]=values[(values.length - 1)].distance(values[0]);  totalDistance+=segmentDistance[(values.length - 1)];  float times[]=new float[values.length];  float elapsedTime=0.0f;  times[0]=0.0f;  times[values.length - 1]=1.0f;  for (int i=0; i < (values.length - 2); ++i) {    times[i + 1]=elapsedTime + (float)(segmentDistance[i] / totalDistance);    elapsedTime=times[i + 1];  }  KeyTimes keyTimes=new KeyTimes(times);  Interpolator initialSpline=new SplineInterpolator(1.00f,0.00f,0.2f,.2f);  Interpolator straightawaySpline=new SplineInterpolator(0.50f,0.20f,.50f,.80f);  Interpolator curveSpline=new SplineInterpolator(0.50f,0.20f,.50f,.80f);  Interpolator finalSpline=new SplineInterpolator(0.50f,0.00f,.50f,1.00f);  KeyFrames keyFrames=new KeyFrames(keyValues,keyTimes,initialSpline,curveSpline,straightawaySpline,curveSpline,straightawaySpline,curveSpline,straightawaySpline,finalSpline);  PropertySetter modifier=new PropertySetter(basicGUI.getTrack(),"carPosition",keyFrames);  animator=new Animator(RACE_TIME,Animator.INFINITE,RepeatBehavior.LOOP,modifier);  keyValues=KeyValues.create(360,315,270,225,180,135,90,45,0);  Interpolator straightawayTurnSpline=new SplineInterpolator(1.0f,0.0f,1.0f,0.0f);  Interpolator curveTurnSpline=new SplineInterpolator(0.0f,0.5f,0.5f,1.0f);  keyFrames=new KeyFrames(keyValues,keyTimes,straightawayTurnSpline,curveTurnSpline,straightawayTurnSpline,curveTurnSpline,straightawayTurnSpline,curveTurnSpline,straightawayTurnSpline,curveTurnSpline);  modifier=new PropertySetter(basicGUI.getTrack(),"carRotation",keyFrames);  animator.addTarget(modifier);  soundEffects=new SoundEffects(keyFrames);  animator.addTarget(soundEffects);  JButton goButton=basicGUI.getControlPanel().getGoButton();  JButton stopButton=basicGUI.getControlPanel().getStopButton();  ActionTrigger trigger=ActionTrigger.addTrigger(goButton,animator);  stopButton.addActionListener(new Stopper(animator));}  }
class C{  public SessionStateLite(String cmd,HiveOperation commandType,HiveConf conf){  this.cmd=cmd;  this.commandType=commandType.name();  this.conf=new HiveConf(conf);  this.queryId=null;  this.mapRedStats=null;}  }
class C{  public String[] formatRangeOfAddresses(String start,int numberToAdd,String prefix){  numberToAdd=1;  String range[]=new String[numberToAdd];  for (int x=0; x < numberToAdd; x++) {    range[x]=prefix + "T" + start;  }  return range;}  }
class C{  synchronized void onReaderClosed(){  if (openReaderCount.decrementAndGet() == 0) {    notifyAll();  }}  }
class C{  public void clearCache(){  if (this.cache != null) {    this.cache.clearCaches();  }  frameProvider=null;  setList(null);  this.cache=null;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Predicate<T> and(Collection<Predicate<? super T>> components){  return and(components.toArray(new Predicate[0]));}  }
class C{  public boolean containsKey(float key){  return contains(key);}  }
class C{  public boolean hasUseOfMatchingClass(Pattern classNames){  for (int i=0; i < statements.size(); i++) {    Type declaringType=statements.get(i).getDeclaringClass();    if (declaringType != null && classNames.matcher(declaringType.getName()).matches()) {      return true;    }  }  return false;}  }
class C{  private float readTempC(final String location) throws Exception {  final String line=FileUtils.readLines(new File(location)).get(1);  final String tempEqual=line.split(" ")[9];  final int temp=Integer.parseInt(tempEqual.substring(2));  return temp / 1000f;}  }
class C{  @Override public final void refresh(){  loadPage(0);}  }
class C{  public static void removeMaskCoexistInitiators(DbModelClient dbModelClient,URI exportMaskUri,List<URI> initiatorsUris){  _log.info("removeMaskEoexistInitiators - Removing FCZoneReferences for initiators {}",initiatorsUris);  ExportMask mask=dbModelClient.find(ExportMask.class,exportMaskUri);  if (mask == null || mask.getInactive() || initiatorsUris == null) {    return;  }  List<Initiator> initiators=DataObjectUtils.iteratorToList(dbModelClient.find(Initiator.class,initiatorsUris));  List<StoragePort> ports=DataObjectUtils.iteratorToList(dbModelClient.find(StoragePort.class,StringSetUtil.stringSetToUriList(mask.getStoragePorts())));  List<String> keys=new ArrayList<String>();  for (  Initiator initiator : initiators) {    for (    StoragePort port : ports) {      keys.add(FCZoneReference.makeEndpointsKey(initiator.getInitiatorPort(),port.getPortNetworkId()));    }  }  if (!keys.isEmpty()) {    _log.info("removeMaskEoexistInitiators - Removing FCZoneReferences for keys {}",keys);    Joiner joiner=dbModelClient.join(FCZoneReference.class,"refs","pwwnKey",keys).go();    List<FCZoneReference> list=joiner.list("refs");    if (list != null && !list.isEmpty()) {      _log.info("removeMaskEoexistInitiators - found {} FCZoneReferences for keys {}",list.size(),keys);      dbModelClient.remove(list);    }  }  mask.removeInitiators(initiators);  for (  URI uri : initiatorsUris) {    mask.removeZoningMapEntry(uri.toString());  }  _log.info("removeMaskEoexistInitiators - removed initiators {} from mask {}",initiatorsUris,mask.getMaskName());  dbModelClient.update(mask);}  }
class C{  @Override public float floatValue(){  return value;}  }
class C{  public boolean isSpecified(int index){  if (index < 0 || index >= getLength())   throw new ArrayIndexOutOfBoundsException("No attribute at index: " + index);  return specified[index];}  }
class C{  public void displayErrorMessage(String message){  IStatusLineManager manager=getStatusLineManager();  if (manager != null) {    manager.setErrorMessage(message);  }}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  public void addAnalysis(SourcePlugin analysis){  if (!graphAnalyzers.contains(analysis)) {    graphAnalyzers.add(analysis);  }}  }
class C{  public void addClass(@DottedClassName String className,@CheckForNull String sourceFile,boolean isInterface,int size){  addClass(className,sourceFile,isInterface,size,true);}  }
class C{  public RowDescriptorBuilder addField(){  return addField(toFieldDescriptor()).resetField();}  }
class C{  protected boolean beforeDelete(){  Boolean generated=(Boolean)get_ValueOld("IsGenerated");  if (generated != null && generated.booleanValue()) {    if (get_ValueOld("C_Invoice_ID") != null) {      log.saveError("Error",Msg.getMsg(getCtx(),"CannotDeleteCashGenInvoice"));      return false;    }  }  return true;}  }
class C{  public GeoDistanceBuilder lat(double lat){  if (this.point == null) {    point=new GeoPoint();  }  point.resetLat(lat);  return this;}  }
class C{  public FileSystemAlreadyExistsException(String msg){  super(msg);}  }
class C{  public StringIndexOutOfBoundsException(String s,int offset,int count){  this(s.length(),offset,count);}  }
class C{  public static KNNList subList(KNNList list,int k){  return DBIDFactory.FACTORY.subList(list,k);}  }
class C{  void transformViewForTransition(int fromIndex,int toIndex,View view,boolean animate){  if (fromIndex == -1) {    mInAnimation.setTarget(view);    mInAnimation.start();  } else   if (toIndex == -1) {    mOutAnimation.setTarget(view);    mOutAnimation.start();  }}  }
class C{  public Throwable fillInStackTrace(){  if (VM.fullyBooted) {    if (RVMThread.getCurrentThread().isCollectorThread()) {      VM.sysWriteln("Exception in GC thread");      RVMThread.dumpVirtualMachine();    } else {      try {        vmStackTrace=new StackTrace();      } catch (      OutOfMemoryError oome) {      }catch (      Throwable t) {        VM.sysFail("VMThrowable.fillInStackTrace(): Cannot fill in a stack trace; got a weird Throwable when I tried to");      }    }  } else {  }  return this;}  }
class C{  public CustomsPost(){  super();}  }
class C{  private Node searchNode(final NodeArray children,final CharSequence word,final int offset,final int length){  final int count=children.length;  char currentChar=word.charAt(offset);  for (int j=0; j < count; j++) {    final Node node=children.data[j];    if (node.code == currentChar) {      if (offset == length - 1) {        if (node.terminal) {          return node;        }      } else {        if (node.children != null) {          Node returnNode=searchNode(node.children,word,offset + 1,length);          if (returnNode != null)           return returnNode;        }      }    }  }  return null;}  }
class C{  public void testOffer(){  LinkedBlockingDeque q=new LinkedBlockingDeque(1);  assertTrue(q.offer(zero));  assertFalse(q.offer(one));}  }
class C{  public static void addView(Context context,View view,WindowManager.LayoutParams params){  if (context == null || view == null) {    throw new IllegalArgumentException("argument cannot be null.");  }  mWindowManager=getWindowManager(context);  mWindowManager.addView(view,params);}  }
class C{  public WrapElement(String wrapString){  this(wrapString,null,null);}  }
class C{  public void freeHessian2Input(Hessian2Input in){  if (in == null)   return;  in.free();  _freeHessian2Input.free(in);}  }
class C{  public LowerCaseValidator(final String parameterValue){  this.parameterValue=parameterValue;}  }
class C{  private void sendMessage(Collection<? extends ClusterNode> nodes,GridTopic topic,GridEventStorageMessage msg,byte plc) throws IgniteCheckedException {  ClusterNode locNode=F.find(nodes,null,F.localNode(ctx.localNodeId()));  Collection<? extends ClusterNode> rmtNodes=F.view(nodes,F.remoteNodes(ctx.localNodeId()));  if (locNode != null)   ctx.io().send(locNode,topic,msg,plc);  if (!rmtNodes.isEmpty()) {    msg.responseTopicBytes(marsh.marshal(msg.responseTopic()));    ctx.io().send(rmtNodes,topic,msg,plc);  }}  }
class C{  public void readEntityFromNBT(NBTTagCompound tagCompound){  super.readEntityFromNBT(tagCompound);  this.dataWatcher.updateObject(16,tagCompound.getByte("BatFlags"));}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public static void main(String[] args){  Debug.init();  ArgParser ap=new ArgParser("RpfUtil");  ap.add("copy","Copy RPF data from one RPF directory to another. (-copy from to)",2);  ap.add("delete","Delete RPF data from a RPF directory. (-delete from)",1);  ap.add("maketoc","Create an A.TOC file in a RPF directory. (-maketoc from).",1);  ap.add("zip","Create a zip file from a RPF directory. (-zip zipFileName from)",2);  ap.add("query","Print the paths of files that fit the criteria, but do nothing",1);  ap.add("scale","The scale to use for criteria in matching chart types, followed by a letter describing the relationship of matching frame scales to give scale ('g'reater than, 'l'ess than, 'n'ot equal to, 'e'qual to). (optional)",2);  ap.add("boundary","Coordinates of bounding box (upper lat, left lon, lower lat, right lon) (optional)",4,true);  ap.add("inside","Flag to manage RPF frames inside bounding box. (default, optional)");  ap.add("outside","Flag to manage RPF frames outside bounding box. (optional)");  ap.add("verbose","Print out progress");  ap.add("extraverbose","Print out ALL progress");  if (!ap.parse(args)) {    ap.printUsage();    System.exit(0);  }  float ulat=90f;  float llat=-90f;  float llon=-180f;  float rlon=180f;  String arg[];  arg=ap.getArgValues("boundary");  if (arg != null) {    boolean boundaryCoordinateProblem=true;    try {      ulat=Float.parseFloat(arg[0]);      llon=Float.parseFloat(arg[1]);      llat=Float.parseFloat(arg[2]);      rlon=Float.parseFloat(arg[3]);      boundaryCoordinateProblem=ulat > 90 || llon < -180 || llat < -90 || rlon > 180 || ulat <= llat || llon >= rlon;    } catch (    NumberFormatException nfe) {      Debug.error("Parsing error for boundary coordinates");    }    if (boundaryCoordinateProblem) {      Debug.error("Boundary coordinates are screwy...");      ap.printUsage();      System.exit(0);    }  }  RpfUtil rpfUtil=new RpfUtil(ulat,llon,llat,rlon);  rpfUtil.verbose=(ap.getArgValues("verbose") != null);  arg=ap.getArgValues("outside");  if (arg != null) {    rpfUtil.setBoundaryLimits(RpfUtil.OUTSIDE);  }  arg=ap.getArgValues("inside");  if (arg != null) {    rpfUtil.setBoundaryLimits(RpfUtil.INSIDE);  }  arg=ap.getArgValues("scale");  if (arg != null) {    try {      rpfUtil.setScale(Float.parseFloat(arg[0]));      rpfUtil.setScaleDelim(arg[1].charAt(0));    } catch (    NumberFormatException nfe) {      Debug.error("Scale value is screwy...");      ap.printUsage();      System.exit(0);    }  }  arg=ap.getArgValues("query");  if (arg != null) {    rpfUtil.query(arg[0]);    System.exit(0);  }  arg=ap.getArgValues("copy");  if (arg != null) {    rpfUtil.setRpfDir(arg[0]);    if (!rpfUtil.copy(arg[1])) {      Debug.output("Problem copying frames");    }  }  arg=ap.getArgValues("delete");  if (arg != null && !rpfUtil.delete(arg[0])) {    Debug.output("Problem deleting files.");  }  arg=ap.getArgValues("maketoc");  if (arg != null && !rpfUtil.maketoc(arg[0])) {    Debug.output("Problem creating A.TOC file for frames.");  }  arg=ap.getArgValues("zip");  if (arg != null && !rpfUtil.zip(arg[0],arg[1])) {    Debug.output("Problem creating zip file: " + arg[0]);  }}  }
class C{  public PatchingChain(Chain<E> aChain){  innerChain=aChain;}  }
class C{  @SuppressWarnings({"unchecked"}) private void recordDeployFailed(Class<?> cls,ClassLoader clsLdr,boolean recordEvt){  assert cls != null;  assert clsLdr != null;  boolean isTask=isTask(cls);  String msg="Failed to deploy " + (isTask ? "task" : "class") + " [cls="+ cls+ ", clsLdr="+ clsLdr+ ']';  if (recordEvt && ctx.event().isRecordable(isTask ? EVT_CLASS_DEPLOY_FAILED : EVT_TASK_DEPLOY_FAILED)) {    String taskName=isTask ? U.getTaskName((Class<? extends ComputeTask<?,?>>)cls) : null;    DeploymentEvent evt=new DeploymentEvent();    evt.message(msg);    evt.node(ctx.discovery().localNode());    evt.type(isTask(cls) ? EVT_CLASS_DEPLOY_FAILED : EVT_TASK_DEPLOY_FAILED);    evt.alias(taskName);    ctx.event().record(evt);  }  if (log.isInfoEnabled())   log.info(msg);}  }
class C{  @Override public final void startElement(final String ns,final String lName,final String qName,final Attributes list) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  StringBuffer sb=new StringBuffer(match);  if (match.length() > 0) {    sb.append('/');  }  sb.append(name);  match=sb.toString();  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.begin(name,list);  }}  }
class C{  public static Date executeTimestampQuery(String sql,Connection con,boolean mandatory) throws AdeException {  final TimestampQueryExecuter executer=new TimestampQueryExecuter(sql,con,mandatory);  executer.executeQuery();  return executer.m_result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_1__NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);}return super.eIsSet(featureID);}  }
class C{  public void transformValues(TFloatFunction function){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public void testTUC1071(){  SecurityHelperTest.resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.tuc1071.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);    assertFalse(authInfo.isEncryptionNeeded());    assertFalse(authInfo.isConnectorUseSSL());  } catch (  ServerRuntimeException e) {    assertTrue("There should not be any exception thrown",false);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  SecurityHelperTest.resetSecuritySystemProperties();}  }
class C{  @Override public boolean add(Object obj){  if (!(obj instanceof StructImpl)) {    throw new IllegalArgumentException(LocalizedStrings.SortedStructSet_THIS_SET_ONLY_ACCEPTS_STRUCTIMPL.toLocalizedString());  }  StructImpl s=(StructImpl)obj;  if (!s.getStructType().equals(this.structType)) {    throw new IllegalArgumentException(LocalizedStrings.SortedStructSet_OBJ_DOES_NOT_HAVE_THE_SAME_STRUCTTYPE.toLocalizedString());  }  return this.addFieldValues(s.getFieldValues());}  }
class C{  public boolean isRemoved(){  return dirEdge == null;}  }
class C{  public static String format(final double d){  final StringBuffer s=new StringBuffer();  return FORMAT_DOUBLE.format(d,s,new java.text.FieldPosition(0)).toString();}  }
class C{  public static boolean isCommitOnDispose(TextArea tf){  Boolean b=(Boolean)tf.getClientProperty(MARKER_COMMIT_ON_DISPOSE);  return (b != null) && b.booleanValue();}  }
class C{  public static boolean doCheckProviderStatusOnSingleServer(LdapOrADServer server,AuthnProviderParamsToValidate param,StringBuilder errorString,DbClient dbClient){  LdapTemplate template=new LdapTemplate(server.getContextSource());  template.setIgnorePartialResultException(true);  if (!checkManagerDNAndSearchBase(template,param,errorString)) {    return false;  }  boolean isLDAPMode=true;  if (param.getMode().equals(AuthnProvider.ProvidersType.ad.toString())) {    isLDAPMode=false;  }  RootDSE rootDSE=null;  if (isLDAPMode == true) {    rootDSE=getRootDSE(template,LDAP_ROOT_DSE_RETURN_ATTRIBUTES,new RootDSELDAPContextMapper());  } else {    rootDSE=getRootDSE(template,null,new RootDSEContextMapper());  }  if (rootDSE == null) {    return false;  }  if (!checkDirectoryType(template,rootDSE,param,errorString)) {    return false;  }  if (isLDAPMode == true) {    if (dbClient.checkGeoCompatible(AuthnProvider.getExpectedGeoVDCVersionForLDAPGroupSupport())) {      if (!checkLDAPGroupAttribute(template,rootDSE,param,errorString)) {        return false;      }      if (!checkLDAPGroupObjectClasses(template,rootDSE,param,errorString)) {        return false;      }      if (!checkLDAPGroupMemberAttributes(template,rootDSE,param,errorString)) {        return false;      }    }    return true;  } else {    return checkGroupAttribute(template,rootDSE,param,errorString);  }}  }
class C{  public float mulPositionW(Matrix4fc mat){  return mulPositionW(mat,this);}  }
class C{  public StringBuffer format(long n,StringBuffer s,FieldPosition p){  int i;  while (n > 0) {    for (i=0; i < syms.length; i++) {      if (syms[i].value <= n) {        int shift=i + (i % 2);        if (i > 0 && shift < syms.length && (syms[i - 1].value - syms[shift].value) <= n) {          s.append(syms[shift].symbol);          s.append(syms[i - 1].symbol);          n=n - syms[i - 1].value + syms[shift].value;          i=-1;        } else {          s.append(syms[i].symbol);          n-=syms[i].value;          i=-1;        }      }    }  }  return s;}  }
class C{  public SearchScrollRequest(ActionRequest request){  super(request);}  }
class C{  public ImageReadParam(){}  }
class C{  @After public void tearDown(){  population=null;}  }
class C{  public boolean is_set_property(){  return this.property != null;}  }
class C{  protected Map<String,Object> popContext(){  if (!getProxyBuilder().getContexts().isEmpty()) {    return getProxyBuilder().getContexts().removeFirst();  }  return null;}  }
class C{  public final int indexOf(char ch,int start){  if (start < 0)   start=0;  int end=_offset + _length;  start+=_offset;  char[] buffer=_buffer;  for (; start < end; start++) {    if (buffer[start] == ch) {      return start - _offset;    }  }  return -1;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public String toSource(String objectname,int indent){  StringBuffer result;  String capsName;  String capName;  String indentStr;  int i;  result=new StringBuffer();  capsName=Capabilities.class.getName();  capName=Capabilities.Capability.class.getName().replaceAll("\\$",".");  indentStr="";  for (i=0; i < indent; i++) {    indentStr+=" ";  }  result.append(indentStr + capsName + " "+ objectname+ " = new "+ capsName+ "(this);\n");  List<Capability> capsList=new ArrayList<Capability>();  boolean hasNominalAtt=false;  boolean hasBinaryAtt=false;  boolean hasUnaryAtt=false;  boolean hasNominalClass=false;  result.append("\n");  for (  Capability cap : Capability.values()) {    if (handles(cap)) {      if (cap == Capability.NOMINAL_ATTRIBUTES) {        hasNominalAtt=true;      }      if (cap == Capability.NOMINAL_CLASS) {        hasNominalClass=true;      }      if (cap == Capability.BINARY_ATTRIBUTES) {        hasBinaryAtt=true;      }      if (cap == Capability.UNARY_ATTRIBUTES) {        hasUnaryAtt=true;      }      if (cap == Capability.EMPTY_NOMINAL_ATTRIBUTES) {      }      capsList.add(cap);    }  }  for (  Capability cap : capsList) {    if ((cap == Capability.BINARY_ATTRIBUTES && hasNominalAtt) || (cap == Capability.UNARY_ATTRIBUTES && hasBinaryAtt) || (cap == Capability.EMPTY_NOMINAL_ATTRIBUTES && hasUnaryAtt)|| (cap == Capability.BINARY_CLASS && hasNominalClass)) {      continue;    }    result.append(indentStr + objectname + ".enable("+ capName+ "."+ cap.name()+ ");\n");    if (hasDependency(cap)) {      result.append(indentStr + objectname + ".enableDependency("+ capName+ "."+ cap.name()+ ");\n");    }  }  result.append("\n");  result.append("\n");  result.append(indentStr + objectname + ".setMinimumNumberInstances("+ getMinimumNumberInstances()+ ");\n");  result.append("\n");  return result.toString();}  }
class C{  public Vector3d div(Vector3d v){  x/=v.x();  y/=v.y();  z/=v.z();  return this;}  }
class C{  protected Diagonal(){  throw new RuntimeException("Non instantiable");}  }
class C{  public boolean isSetCreateTime(){  return EncodingUtils.testBit(issetBitfield,CREATETIME_ISSET_ID);}  }
class C{  public boolean isAllowedToResumeTransfer() throws RcsPersistentStorageException, RcsGenericException {  try {    return mTransferInf.isAllowedToResumeTransfer();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  @Override public final void perform(IR ir){  DefUse.computeDU(ir);  ExpressionFolding.perform(ir);}  }
class C{  public void dismissFragment(){  try {    JSONObject newImageMeta=extractMetaDataFromFields(new JSONObject());    for (int i=0; i < newImageMeta.names().length(); i++) {      String name=newImageMeta.names().getString(i);      if (!newImageMeta.getString(name).equals(mImageMeta.getString(name))) {        showDiscardChangesDialog();        return;      }    }    if (mFeaturedCheckBox.isChecked() != mIsFeatured) {      showDiscardChangesDialog();      return;    }  } catch (  JSONException e) {    AppLog.d(AppLog.T.EDITOR,"Unable to update JSON array");  }  getTargetFragment().onActivityResult(getTargetRequestCode(),getTargetRequestCode(),null);  restorePreviousActionBar();  getFragmentManager().popBackStack();}  }
class C{  public void testBug43714() throws Exception {  Connection c_IS=null;  try {    c_IS=getConnectionWithProps("useInformationSchema=true");    DatabaseMetaData dbmd=c_IS.getMetaData();    this.rs=dbmd.getExportedKeys("x","y","z");  }  finally {    try {      if (c_IS != null) {        c_IS.close();      }    } catch (    SQLException ex) {    }  }}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext,secretKeys,"UTF-8");}  }
class C{  public int addItemToEnd(ShoppingCartItem item) throws CartItemModifyException {  return addItem(cartLines.size(),item);}  }
class C{  @Override public WritableFontData slice(int offset,int length){  if (offset < 0 || length < 0 || offset > Integer.MAX_VALUE - length || (offset + length) > this.size()) {    throw new IndexOutOfBoundsException("Attempt to bind data outside of its limits.");  }  WritableFontData slice=new WritableFontData(this,offset,length);  return slice;}  }
class C{  public DeferredFileOutputStream(int threshold,String prefix,String suffix,File directory){  this(threshold,null,prefix,suffix,directory);  if (prefix == null) {    throw new IllegalArgumentException("Temporary file prefix is missing");  }}  }
class C{  @Override public void emit(HashMap<K,ArrayList<HashMap<V,Integer>>> tuple){  bottom.emit(tuple);}  }
class C{  @Override public void postProcess(ResultProducer rp) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer calling postProcess!!");  }  disconnectFromDatabase();}  }
class C{  public static Camera create(int pixelWidth,int pixelHeight,float fov,float near,float far){  Camera result=new Camera(pixelWidth,pixelHeight,fov,near,far);  result.lookAt(new vec3(0,0,1),new vec3(0,0,0),vec3.YAXIS);  return result;}  }
class C{  private boolean isRelevant(Constraint<?> constraint,Set<VariableReference> targets){  Set<Variable<?>> variables=constraint.getVariables();  Set<String> targetNames=new HashSet<String>();  for (  VariableReference v : targets) {    targetNames.add(v.getName());  }  for (  Variable<?> var : variables) {    if (targetNames.contains(var.getName()))     return true;  }  return false;}  }
class C{  public CacheFactory(){  this(null);}  }
class C{  public static int tileYToY(int ty,int tileGridYOffset,int tileHeight){  return ty * tileHeight + tileGridYOffset;}  }
class C{  public static Event fromString(String s) throws ClassNotFoundException {  return new Event(s);}  }
class C{  public static double valueNoise2D(int x,int z,long seed){  long n=(1619 * x + 6971 * z + 1013 * seed) & 0x7fffffff;  n=(n >> 13) ^ n;  return 1.0 - ((double)((n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff) / 1073741824.0);}  }
class C{  public Boolean isReplaySupported(){  return replaySupported;}  }
class C{  @CallSuper public void onPause(){  mRunning=false;}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  protected void registerListener(String provider,LocationListener listener){  mLocationManager.requestLocationUpdates(provider,0,0,listener);}  }
class C{  static int innerNewVecInsertPos(int oldPos,int idx,Vector<Insertion> vec){  if (vec.size() <= idx) {    return oldPos;  } else {    return innerNewVecInsertPos(newInsertPos(oldPos,vec.elementAt(idx)),idx + 1,vec);  }}  }
class C{  public String toString(){  return "HessianRemote[" + url + "]";}  }
class C{  public double[][] solve(double[][] B){  int rows=B.length;  int cols=B[0].length;  if (rows != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isFullRank()) {    throw new RuntimeException("Matrix is rank deficient.");  }  double[][] X=VMath.copy(B);  solveInplace(X,cols);  return VMath.getMatrix(X,0,n - 1,0,cols - 1);}  }
class C{  public void writeString(String s) throws IOException {  if (StrtblType.ALWAYS.equals(type)) {    writeReferenceString(s);  } else {    writeInlineString(s);  }}  }
class C{  @HLEFunction(nid=0xF3370E61,version=150) public int sceNetResolverInit(){  return 0;}  }
class C{  public void characters(char ch[],int start,int len) throws SAXException {  if (!cdataElement) {    writeEsc(ch,start,len,false);  } else {    for (int i=start; i < start + len; i++) {      write(ch[i]);    }  }  super.characters(ch,start,len);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public static Ordering desc(String propertyName){  return new Ordering(propertyName,Order.DESCENDING,NullOrdering.FIRST);}  }
class C{  public void breakShape(){  g.breakShape();}  }
class C{  protected void release(){synchronized (m_latchLock) {    if (m_latch == null) {      return;    }    m_map.getUIContext().removeShutdownLatch(m_latch);    m_latch.countDown();    m_latch=null;  }}  }
class C{  private String createDistributedDevice(List<VPlexDeviceInfo> localDeviceInfoList,String winningClusterId) throws VPlexApiException {  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CREATE_DIST_DEVICE);    s_logger.info("Create distributed device URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    StringBuilder pathBuilder=new StringBuilder();    StringBuilder nameBuilder=new StringBuilder(VPlexApiConstants.DIST_DEVICE_PREFIX);    for (    VPlexDeviceInfo localDeviceInfo : localDeviceInfoList) {      if (pathBuilder.length() != 0) {        pathBuilder.append(",");      }      pathBuilder.append(localDeviceInfo.getPath());      nameBuilder.append(VPlexApiConstants.DIST_DEVICE_NAME_DELIM);      nameBuilder.append(localDeviceInfo.getName().substring(VPlexApiConstants.DEVICE_PREFIX.length()));    }    String rulesetName=VPlexApiConstants.CLUSTER_1_DETACHES;    if (winningClusterId.equals(VPlexApiConstants.CLUSTER_2_ID)) {      rulesetName=VPlexApiConstants.CLUSTER_2_DETACHES;    }    s_logger.info("Creating distributed device from local devices {}",pathBuilder.toString());    argsMap.put(VPlexApiConstants.ARG_DASH_N,nameBuilder.toString());    argsMap.put(VPlexApiConstants.ARG_DASH_D,pathBuilder.toString());    argsMap.put(VPlexApiConstants.ARG_DASH_R,rulesetName);    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Create distributed device POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Create distributed device response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Distributed device creation completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.createDistDeviceFailureStatus(String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully created distributed device {}",nameBuilder.toString());    return nameBuilder.toString();  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedCreateDistDevice(e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  private void handleUpdateTimeMessage(){  invalidate();  if (shouldTimerBeRunning()) {    long timeMs=System.currentTimeMillis();    long delayMs=INTERACTIVE_UPDATE_RATE_MS - (timeMs % INTERACTIVE_UPDATE_RATE_MS);    mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME,delayMs);  }}  }
class C{  public void writeInt(final int b){  m_buf[m_count++]=(byte)((b >>> 24) & 0xFF);  m_buf[m_count++]=(byte)((b >>> 16) & 0xFF);  m_buf[m_count++]=(byte)((b >>> 8) & 0xFF);  m_buf[m_count++]=(byte)((b >>> 0) & 0xFF);}  }
class C{  public Object readNull(Type target){  return null;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  @Category(FlakyTest.class) @Test public void testParallelPropagationSenderResumeNegativeScenario() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(nyPort,vm4,vm5);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  startSenderInVMs("ln",vm4,vm5);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm4.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm2.invoke(null);}  }
class C{  private void incrementConnectionFailures(String address){  Integer count=ADDRESS_BLACKLIST.get(address);  ADDRESS_BLACKLIST.put(address,count == null ? 1 : count + 1);}  }
class C{  public SupportVectorLearner(KernelTrick kernel,CacheMode cacheMode){  this.cacheMode=cacheMode;  setKernel(kernel);}  }
class C{  public CDatabasePasswordField(){  super("",20);}  }
class C{  public static Collection<String> resolveDererredEvents(State state){  ArrayList<String> events=new ArrayList<String>();  for (  Trigger trigger : state.getDeferrableTriggers()) {    Event event=trigger.getEvent();    if (event instanceof SignalEvent) {      Signal signal=((SignalEvent)event).getSignal();      events.add(signal.getName());    }  }  return events;}  }
class C{  public static CImporterManager instance(){  return m_instance;}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet origExampleSet,Attribute predictedLabel) throws OperatorException {  final String attributePrefix="AdaBoostModelPrediction";  final int numLabels=predictedLabel.getMapping().size();  final Attribute[] specialAttributes=new Attribute[numLabels];  for (int i=0; i < numLabels; i++) {    specialAttributes[i]=com.rapidminer.example.Tools.createSpecialAttribute(origExampleSet,attributePrefix + i,Ontology.NUMERICAL);  }  Iterator<Example> reader=origExampleSet.iterator();  while (reader.hasNext()) {    Example example=reader.next();    for (int i=0; i < specialAttributes.length; i++) {      example.setValue(specialAttributes[i],0);    }  }  reader=origExampleSet.iterator();  for (int modelNr=0; modelNr < this.getNumberOfModels(); modelNr++) {    Model model=this.getModel(modelNr);    ExampleSet exampleSet=(ExampleSet)origExampleSet.clone();    exampleSet=model.apply(exampleSet);    this.updateEstimates(exampleSet,modelNr,specialAttributes);    PredictionModel.removePredictedLabel(exampleSet);  }  this.evaluateSpecialAttributes(origExampleSet,specialAttributes);  for (int i=0; i < numLabels; i++) {    origExampleSet.getAttributes().remove(specialAttributes[i]);    origExampleSet.getExampleTable().removeAttribute(specialAttributes[i]);  }  return origExampleSet;}  }
class C{  public ZoneInfoProvider(String resourcePath,ClassLoader loader) throws IOException {  this(resourcePath,loader,true);}  }
class C{  public static final JIPString create(final String strString,boolean chars){  return new JIPString(new PString(strString,chars));}  }
class C{  private static double v2SquaredDistanceBetween2Points(Point2D.Double a,Point2D.Double b){  double dx=a.x - b.x;  double dy=a.y - b.y;  return (dx * dx) + (dy * dy);}  }
class C{  public SpecificationRunnerBuilder classLoader(ClassLoader customClassLoader){  this.classLoader=customClassLoader;  return this;}  }
class C{  @Override public String toString(){  return getDescription();}  }
class C{  @SuppressWarnings({"RedundantTypeArguments"}) @Deprecated public static <T>Set<T> asSet(@Nullable T... t){  if (t == null || t.length == 0)   return Collections.<T>emptySet();  if (t.length == 1)   return Collections.singleton(t[0]);  return new GridLeanSet<>(asList(t));}  }
class C{  public CRFSegmenter(String modelDir){  init(modelDir);}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public Channel(String name){  super(name);  this.topic="";}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @SuppressWarnings("unchecked") public static <T,A>ExtendedArray<T> extend(A array,ArrayAdapter<T,A> getter,T extra){  return new ExtendedArray<>(array,(ArrayAdapter<T,Object>)getter,extra);}  }
class C{  public void read_map_file(File map_file) throws IOException {  LineNumberReader lr=new LineNumberReader(new FileReader(map_file));  MapFileErrorHandler mfeh=new MapFileErrorHandler(lr,map_file);  Pattern current_regex=null;  Map<MethodDef,MethodInfo> map=new LinkedHashMap<>();  for (String line=lr.readLine(); line != null; line=lr.readLine()) {    line=line.replaceFirst("//.*$","");    if (line.trim().length() == 0)     continue;    if (line.startsWith(" ")) {      if (current_regex == null)       throw new IOException("No current class regex on line " + lr.getLineNumber());      StrTok st=new StrTok(line,mfeh);      st.stok.wordChars('.','.');      MethodDef md=parse_method(st);      String new_method=st.need_word();      map.put(md,new MethodInfo(new_method));    } else {      if (current_regex != null) {        MethodMapInfo mmi=new MethodMapInfo(current_regex,map);        map_list.add(mmi);        map=new LinkedHashMap<>();      }      current_regex=Pattern.compile(line);    }  }  if (current_regex != null) {    MethodMapInfo mmi=new MethodMapInfo(current_regex,map);    map_list.add(mmi);  }  dump_map_list();}  }
class C{  @org.junit.Test public void testWhatIs(){  Utils.sleep(SLEEP);  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("what is Uranium?");  String response=waitForOutput(output);  if (!response.equals("radioactive, metallic element with the atomic number 92")) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("tell me about Oxygen");  response=waitForOutput(output);  if (!response.equals("element with the atomic number of 8")) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("define love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("who is Barack Obama?");  response=waitForOutput(output);  if (response.indexOf("44th President") == -1) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("who is his father?");  response=waitForOutput(output);  if (response.indexOf("Barack Obama") == -1) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("who is George Bush?");  response=waitForOutput(output);  if (response.indexOf("43rd President") == -1) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("who is Barack Obama?");  response=waitForOutput(output);  if (response.indexOf("44th President") == -1) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("who is his mother?");  response=waitForOutput(output);  if (response.indexOf("Ann Dunham") == -1) {    fail("Incorrect: " + response);  }  Utils.sleep(SLEEP);  text.input("where is Montreal?");  response=waitForOutput(output);  checkResponse(response,"Montreal is in Canada.");  Utils.sleep(SLEEP);  text.input("where is Edmonton?");  response=waitForOutput(output);  checkResponse(response,"Edmonton is in Canada.");  Utils.sleep(SLEEP);  text.input("where is Edmonton?");  response=waitForOutput(output);  checkResponse(response,"Edmonton is in Canada.");  text.input("x");  response=waitForOutput(output);  Utils.sleep(SLEEP);  text.input("where is edmonton?");  response=waitForOutput(output);  checkResponse(response,"Edmonton is in Canada.");  Utils.sleep(SLEEP);  text.input("what is Brockville?");  response=waitForOutput(output);  checkResponse(response,"city in Ontario, Canada");  Utils.sleep(SLEEP);  text.input("what is Brockville?");  response=waitForOutput(output);  checkResponse(response,"city in Ontario, Canada");  text.input("x");  response=waitForOutput(output);  Utils.sleep(SLEEP);  text.input("what is brockville?");  response=waitForOutput(output);  checkResponse(response,"city in Ontario, Canada");  Utils.sleep(SLEEP);  text.input("where is it?");  response=waitForOutput(output);  checkResponse(response,"It is in Canada.");  bot.shutdown();}  }
class C{  private static Element parseSimpleType(String name,Element simpleTypeNode,Element bodyNode,Element bindingNode,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,Hashtable<String,Element> repeatControls,Element modelNode){  for (int i=0; i < simpleTypeNode.getChildCount(); i++) {    if (simpleTypeNode.isText(i))     continue;    Element child=(Element)simpleTypeNode.getElement(i);    if (child.getName().equalsIgnoreCase(NODE_RESTRICTION))     return parseRestriction(name,(Element)simpleTypeNode.getParent(),child,bodyNode,bindingNode,problemList,problemListItems,repeatControls,modelNode);  }  return null;}  }
class C{  public boolean equals(Object that){  return (that instanceof CharSet) && Arrays.equals(chars,((CharSet)that).chars);}  }
class C{  public ExpandableTableRowSkin(TableRow<S> tableRow,TableRowExpanderColumn<S> expander){  super(tableRow);  this.tableRow=tableRow;  this.expander=expander;  tableRow.itemProperty().addListener(null);}  }
class C{  private void computeForwardDependences(Instruction start,Instruction end){  boolean readsKill=ir.options.READS_KILL;  DepGraphNode lastStoreNode=null;  DepGraphNode lastExceptionNode=null;  DepGraphNode lastLoadNode=null;  clearRegisters(start,end);  for (DepGraphNode pnode=(DepGraphNode)firstNode(); pnode != null; pnode=(DepGraphNode)pnode.getNext()) {    Instruction p=pnode.instruction();    int useMask=p.operator().implicitUses;    int defMask=p.operator().implicitDefs;    if (p.isTSPoint()) {      useMask|=GenericPhysicalDefUse.getMaskTSPUses();      defMask|=GenericPhysicalDefUse.getMaskTSPDefs();    }    for (Enumeration<Operand> uses=p.getUses(); uses.hasMoreElements(); ) {      computeForwardDependencesUse(uses.nextElement(),pnode,lastExceptionNode);    }    for (Enumeration<Register> uses=GenericPhysicalDefUse.enumerate(useMask,ir); uses.hasMoreElements(); ) {      Register r=uses.nextElement();      computeImplicitForwardDependencesUse(r,pnode);    }    for (Enumeration<Operand> defs=p.getDefs(); defs.hasMoreElements(); ) {      computeForwardDependencesDef(defs.nextElement(),pnode,lastExceptionNode);    }    for (Enumeration<Register> defs=GenericPhysicalDefUse.enumerate(defMask,ir); defs.hasMoreElements(); ) {      Register r=defs.nextElement();      computeImplicitForwardDependencesDef(r,pnode);    }    boolean isStore=p.isImplicitStore();    boolean isLoad=p.isImplicitLoad();    if (isStore || isLoad) {      if (readsKill && isLoad) {        for (DepGraphNode lnode=lastLoadNode; lnode != null; lnode=(DepGraphNode)lnode.getPrev()) {          if (lnode.instruction().isImplicitLoad() && LocationOperand.mayBeAliased(getLocation(p),getLocation(lnode.instruction()))) {            lnode.insertOutEdge(pnode,MEM_READS_KILL);          }        }        lastLoadNode=pnode;      }      for (DepGraphNode snode=lastStoreNode; snode != null; snode=(DepGraphNode)snode.getPrev()) {        if (snode.instruction().isImplicitStore() && LocationOperand.mayBeAliased(getLocation(p),getLocation(snode.instruction()))) {          snode.insertOutEdge(pnode,isStore ? MEM_OUTPUT : MEM_TRUE);        }      }      if (isStore) {        lastStoreNode=pnode;        if (lastExceptionNode != null) {          lastExceptionNode.insertOutEdge(pnode,EXCEPTION_MS);        }      }    }    if (p.isPEI()) {      if (lastExceptionNode != null) {        lastExceptionNode.insertOutEdge(pnode,EXCEPTION_E);      }      lastExceptionNode=pnode;    }  }}  }
class C{  private void startIndexing(){  if (this.indexManager != null)   this.indexManager.reset();}  }
class C{  public int read(char cbuf[],int offset,int length) throws IOException {  return sd.read(cbuf,offset,length);}  }
class C{  private void generateBeforeBodyCall(){  loadHookDispatcher();  push(methodId);  if (isStatic) {    pushNull();  } else {    loadThis();  }  loadArgArray();  mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,IInstrumenterConstant.IHOOK_DISPATCHER_INTERNAL_NAME,"dispatchMethodBeforeBody",IInstrumenterConstant.DISPATCH_METHOD_BEFORE_BODY_DESCRIPTOR,true);}  }
class C{  public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  int node;  while (DTM.NULL != (node=iterator.nextNode())) {    addNodeInDocOrder(node,support);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Matrix4x3d mulOrtho(Matrix4x3dc view){  return mulOrtho(view,this);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  borderStroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());}  }
class C{  private void depthFirstSearch(T v,T ancestor,List<T> topSort){  if (parent != null) {    parent.put(v,ancestor);  }  setVisitState(v,VisitState.BEING_VISITED);  getChildren.apply(v).forEach(null);  setVisitState(v,VisitState.VISITED);  topSort.add(v);}  }
class C{  private void sendMessage(BeanMessageID type,Message message){  Buffer buffer=new Buffer();  buffer.writeByte((type.getRawValue() >> 8) & 0xff);  buffer.writeByte(type.getRawValue() & 0xff);  buffer.write(message.toPayload());  GattSerialMessage serialMessage=GattSerialMessage.fromPayload(buffer.readByteArray());  gattClient.getSerialProfile().sendMessage(serialMessage.getBuffer());}  }
class C{  protected void delete(FileList files){  for (  File f : files) {    delete(f);  }}  }
class C{  public Map<String,Object> readMap(String indexName,final String id){  GetResponse response=elasticsearchClient.prepareGet(indexName,null,id).execute().actionGet();  Map<String,Object> map=getMap(response);  return map;}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    try {      cache.close();      cache.getDistributedSystem().disconnect();    } catch (    RuntimeException e) {    }  }}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  public void addValidator(AbstractValidator validator){  this._validators.add(validator);  return;}  }
class C{  public Matrix3f rotateYXZ(Vector3f angles){  return rotateYXZ(angles.y,angles.x,angles.z);}  }
class C{  void createArgumentMaps(){  argumentMap=new LinkedMultiValueMap<String,String>();  includedCountries=new Vector<String>();  excludedCountries=new Vector<String>();  Iterator<Map.Entry<String,JsonNode>> jsonRootIt=template.fields();  for (Map.Entry<String,JsonNode> elt; jsonRootIt.hasNext(); ) {    elt=jsonRootIt.next();    JsonNode currentNode=elt.getValue();    String currentKey=elt.getKey();    if (currentNode.isContainerNode()) {      if (currentKey.equals(includedCountriesKey) || currentKey.equals(excludedCountriesKey)) {        Iterator<JsonNode> jsonSubNodeIt=currentNode.elements();        for (JsonNode subElt; jsonSubNodeIt.hasNext(); ) {          subElt=jsonSubNodeIt.next();          (currentKey.equals(includedCountriesKey) ? includedCountries : excludedCountries).addElement(subElt.path(countryCodeKey).asText());        }      }    } else     if (!currentNode.isNull() && argumentFilterSet.contains(currentKey)) {      argumentMap.add(jobKey + "[" + currentKey+ "]",currentNode.asText());    }    if (currentKey == idKey) {      this.id=currentNode.asText();    }  }}  }
class C{  public void fixUtil(String util,String utilPath){  try {    RootTools.remount("/system","rw");    if (RootTools.findBinary(util)) {      List<String> paths=new ArrayList<String>();      paths.addAll(RootTools.lastFoundBinaryPaths);      for (      String path : paths) {        CommandCapture command=new CommandCapture(0,false,utilPath + " rm " + path+ "/"+ util);        Shell.startRootShell().add(command);        commandWait(Shell.startRootShell(),command);      }      CommandCapture command=new CommandCapture(0,false,utilPath + " ln -s " + utilPath+ " /system/bin/"+ util,utilPath + " chmod 0755 /system/bin/" + util);      Shell.startRootShell().add(command);      commandWait(Shell.startRootShell(),command);    }    RootTools.remount("/system","ro");  } catch (  Exception e) {  }}  }
class C{  public AccountHeaderBuilder withSelectionSecondLineShown(boolean selectionSecondLineShown){  this.mSelectionSecondLineShown=selectionSecondLineShown;  return this;}  }
class C{  public List<Integer> emit(List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,tuple);}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget") @Override public Collection<Long> findPrimesWithoutSplitSizeAndThreshold(Collection<Long> input){  return findPrimes0(input);}  }
class C{  public void docString(@NotNull final String docString){  final String[] stringsToAdd=StringUtil.splitByLines(removeIndent(docString));  if (myDocStringLines == null) {    myDocStringLines=stringsToAdd;  } else {    myDocStringLines=ArrayUtil.mergeArrays(myDocStringLines,stringsToAdd);  }}  }
class C{  private String keyToBackupKey(Key key){  return Base64.encodeToString(Key.toByteArray(key),Base64.NO_WRAP);}  }
class C{  private static void addMethodChecked(Map<MethodSignature,PsiMethod> signatures,PsiMethod method,PsiSubstitutor substitutor,@Nullable Set<PsiMethod> resultSet){  if (method.isConstructor())   return;  if (method.hasModifierProperty(PsiModifier.STATIC))   return;  final MethodSignature signature=method.getSignature(substitutor);  final PsiMethod old=signatures.get(signature);  if (old != null) {    if (!old.hasModifierProperty(PsiModifier.ABSTRACT))     return;    if (resultSet != null)     resultSet.remove(old);  }  signatures.put(signature,method);  if (resultSet != null)   resultSet.add(method);}  }
class C{  public void paint(Graphics g){  int len=highlights.size();  for (int i=0; i < len; i++) {    HighlightInfo info=highlights.elementAt(i);    if (!(info instanceof LayeredHighlightInfo)) {      Rectangle a=component.getBounds();      Insets insets=component.getInsets();      a.x=insets.left;      a.y=insets.top;      a.width-=insets.left + insets.right;      a.height-=insets.top + insets.bottom;      for (; i < len; i++) {        info=highlights.elementAt(i);        if (!(info instanceof LayeredHighlightInfo)) {          Highlighter.HighlightPainter p=info.getPainter();          p.paint(g,info.getStartOffset(),info.getEndOffset(),a,component);        }      }    }  }}  }
class C{  protected Object readResolve() throws java.io.ObjectStreamException {synchronized (AWTKeyStroke.class) {    if (getClass().equals(getAWTKeyStrokeClass())) {      return getCachedStroke(keyChar,keyCode,modifiers,onKeyRelease);    }  }  return this;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=null;    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),null);    message.sendToTarget();  }}  }
class C{  protected boolean yIsByte(int pointIndex){  return ((getFlag(pointIndex) & 0x4) != 0);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.REGULAR_EXPRESSION_LITERAL__VALUE:    setValue((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ThisArgProvider.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseFeatureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:    return N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:  return N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:return N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_TYPE;default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (baseFeatureID) {case N4JSPackage.FUNCTION_DEFINITION__FPARS:return N4JSPackage.PROPERTY_METHOD_DECLARATION__FPARS;case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:return N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF;case N4JSPackage.FUNCTION_DEFINITION__GENERATOR:return N4JSPackage.PROPERTY_METHOD_DECLARATION__GENERATOR;case N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC:return N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:return N4JSPackage.PROPERTY_METHOD_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:return N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:return N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == MethodDeclaration.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static MmContent createFileicon(Uri file,String fileIconId,RcsSettings rcsSettings) throws FileAccessException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  InputStream in=null;  MmContent fileIcon=null;  try {    in=AndroidFactory.getApplicationContext().getContentResolver().openInputStream(file);    Bitmap bitmap=BitmapFactory.decodeStream(in);    if (bitmap == null) {      if (sLogger.isActivated()) {        sLogger.warn("Cannot decode image " + file);      }      return null;    }    int width=bitmap.getWidth();    int height=bitmap.getHeight();    long size=FileUtils.getFileSize(AndroidFactory.getApplicationContext(),file);    float scale=0.05f;    Matrix matrix=new Matrix();    matrix.postScale(scale,scale);    Bitmap resizedBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true);    int quality=90;    long maxSize=rcsSettings.getMaxFileIconSize();    while (size > maxSize) {      out=new ByteArrayOutputStream();      resizedBitmap.compress(CompressFormat.JPEG,quality,out);      out.flush();      out.close();      size=out.size();      quality-=10;    }    String fileIconName=buildFileiconUrl(fileIconId,FILEICON_MIMETYPE);    byte[] fileIconData=out.toByteArray();    Uri fileIconUri=Uri.fromFile(new File(rcsSettings.getFileIconRootDirectory().concat(fileIconName)));    fileIcon=ContentManager.createMmContent(fileIconUri,FILEICON_MIMETYPE,fileIconData.length,fileIconName);    fileIcon.writeData2File(fileIconData);    if (sLogger.isActivated()) {      sLogger.debug("Generate Icon " + fileIconName + " for image "+ file);    }    return fileIcon;  } catch (  IOException e) {    throw new FileAccessException("Failed to create icon for uri: " + file,e);  } finally {    CloseableUtils.tryToClose(in);    if (fileIcon != null) {      fileIcon.closeFile();    }  }}  }
class C{  public AWTGVTFont(Map attributes){  Float sz=(Float)attributes.get(TextAttribute.SIZE);  if (sz != null) {    this.size=sz.floatValue();    attributes.put(TextAttribute.SIZE,new Float(FONT_SIZE));    this.awtFont=new Font(attributes);  } else {    this.awtFont=new Font(attributes);    this.size=awtFont.getSize2D();  }  this.scale=size / awtFont.getSize2D();  initializeFontCache(awtFont);}  }
class C{  private final double preDistanceVM(NumberVector v,SpatialComparable mbr,final int start,final int end){  double agg=0.;  for (int d=start; d < end; d++) {    final double value=v.doubleValue(d), min=mbr.getMin(d);    double delta=min - value;    if (delta < 0.) {      delta=value - mbr.getMax(d);    }    if (delta > 0.) {      agg+=Math.pow(delta,p);    }  }  return agg;}  }
class C{  public static InExpression in(String property,Object... values){  return new InExpression(getPropExpr(property),false,values);}  }
class C{  public static GT_Tool_Item constructElectricDrillItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage,int aToolQuality,float aToolStrength,int aEnergyConsumptionPerBlockBreak,int aDisChargedGTID){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_DrillIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage,aToolQuality,aToolStrength,aEnergyConsumptionPerBlockBreak,aDisChargedGTID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  protected ObjectStreamException(){  super();}  }
class C{  private Bundle lookupSingleValue(int userId,Uri uri,String key){  Cursor cursor=null;  try {    cursor=queryForUser(userId,uri,new String[]{Settings.NameValueTable.VALUE},Settings.NameValueTable.NAME + " = ?",new String[]{key},null);    if (cursor != null && cursor.getCount() == 1) {      cursor.moveToFirst();      String value=cursor.getString(0);      return value == null ? NULL_SETTING : Bundle.forPair(Settings.NameValueTable.VALUE,value);    }  } catch (  SQLiteException e) {    Log.w(TAG,"settings lookup error",e);    return null;  } finally {    if (cursor != null) {      cursor.close();    }  }  return NULL_SETTING;}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public void processResponse(XBeeResponse response){  if (response.getApiId() == ApiId.ZNET_IO_SAMPLE_RESPONSE) {    ZNetRxIoSampleResponse ioSample=(ZNetRxIoSampleResponse)response;    log.debug("received i/o sample packet.  contains analog is " + ioSample.containsAnalog() + ", contains digital is "+ ioSample.containsDigital());    log.debug("pin 20 (DO) digital is " + ioSample.isD0On());    log.debug("pin 19 (D1) analog is " + ioSample.getAnalog1());  }}  }
class C{  public void addKeyChainEventListener(Executor executor,KeyChainEventListener listener){  keyChainGroup.addEventListener(listener,executor);}  }
class C{  public void lockUI(ProcessInfo pi){  panel.setEnabled(false);  m_isLocked=true;}  }
class C{  public static String stringFromStringAndTOA(String s,int TOA){  if (s == null)   return null;  if (TOA == TOA_International && s.length() > 0 && s.charAt(0) != '+') {    return "+" + s;  }  return s;}  }
class C{  public void rejectInvitation() throws RcsGenericException {  try {    mSharingInf.rejectInvitation();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public void addMethodAnnotations(CstMethodRef method,Annotations annotations){  if (methodAnnotations == null) {    methodAnnotations=new ArrayList<MethodAnnotationStruct>();  }  methodAnnotations.add(new MethodAnnotationStruct(method,new AnnotationSetItem(annotations)));}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.GENERATOR_CONFIGURATION;}  }
class C{  public void update(float delta){  for (int i=objects.size() - 1; i >= 0; i--) {    BaseTween<?> obj=objects.get(i);    if (obj.isFinished() && obj.isAutoRemoveEnabled) {      objects.remove(i);      obj.free();    }  }  if (!isPaused) {    if (delta >= 0) {      for (int i=0, n=objects.size(); i < n; i++)       objects.get(i).update(delta);    } else {      for (int i=objects.size() - 1; i >= 0; i--)       objects.get(i).update(delta);    }  }}  }
class C{  private static String mapModule(File directory,HashMap<String,File> map) throws FileNotFoundException, JsonParserException {  File metadata=new File(directory,"module.json");  JsonObject obj=JsonParser.object().from(new FileReader(metadata));  map.put(obj.getString("name"),new File(directory,obj.getString("script")).getAbsoluteFile());  String name=obj.getString("name");  if (obj.has("initscript")) {    try {      load(new File(directory,obj.getString("initscript")),JavaScript.getEngine());    } catch (    Exception e) {      Toast.log().info("Error in loading InitScript: " + e);      Toast.log().exception(e);    }  }  return name;}  }
class C{  private SolrInputDocument findDecendent(SolrInputDocument parent,String childId){  if (childId.equals(parent.getFieldValue("id"))) {    return parent;  }  if (!parent.hasChildDocuments()) {    return null;  }  for (  SolrInputDocument kid : parent.getChildDocuments()) {    SolrInputDocument result=findDecendent(kid,childId);    if (null != result) {      return result;    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.694 -0500",hash_original_method="553B9246636C3A5BC903932A40C4BC5E",hash_generated_method="FA87EB70F96C0E9808E3DF35429E1873") public boolean isCphsMwiMessage(){  return mWrappedSmsMessage.isCphsMwiMessage();}  }
class C{  public static UiResult openUrl(URI uri){  return openUrl(uri.toString());}  }
class C{  public CdmaSmsCbProgramData(int operation,int category,int language,int maxMessages,int alertOption,String categoryName){  mOperation=operation;  mCategory=category;  mLanguage=language;  mMaxMessages=maxMessages;  mAlertOption=alertOption;  mCategoryName=categoryName;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static PrincipalId parseUpn(String upn) throws ParserException {  ValidateUtil.validateNotEmpty(upn,"upn");  String[] parts=splitInTwo(upn,'@');  return new PrincipalId(parts[0],parts[1]);}  }
class C{  public boolean namespacePublishedToMapgraph(final String namespace) throws Exception {  assertMapgraphRuntimeAvailable();  final String repositoryUrl=getSparqlEndpointUrlForNamespaceOrDefault(namespace);  final ConnectOptions opts=newConnectOptions(repositoryUrl,UUID.randomUUID(),null);  JettyResponseListener response=null;{    opts.setAcceptHeader("Accept: text/plain");    opts.addRequestParam(MAPGRAPH,CHECK_PUBLISHED);    opts.method="POST";  }  try {    checkResponseCode(response=doConnect(opts));    final String responseBody=response.getResponseBody();    return responseBody != null && responseBody.contains("true");  }  finally {    if (response != null)     response.abort();  }}  }
class C{  public synchronized boolean hasChanged(){  return changed;}  }
class C{  private AlertLevel(int severity,String name){  this.severity=severity;  this.name=name;}  }
class C{  public static <T>T asType(CharSequence self,Class<T> c){  return asType(self.toString(),c);}  }
class C{  public void dispose(){  m_rootNode.dispose();  removeMouseListener(m_mouseListener);  m_graph.removeListener(m_graphSelectionListener);  m_graph.removeListener(m_graphVisibilityListener);}  }
class C{  public LegHistogram(final int binSize){  this(binSize,30 * 3600 / binSize + 1);}  }
class C{  private static void init(Object data){  Util.getImplementation().setStorageData(data);  INSTANCE=new Storage();}  }
class C{  public boolean unscheduleJob(TriggerKey triggerKey) throws SchedulerException {  try {    return getRemoteScheduler().unscheduleJob(triggerKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public Item dequeue(){  if (isEmpty())   throw new NoSuchElementException("Queue underflow");  Item item=first.item;  first=first.next;  n--;  if (isEmpty())   last=null;  assert check();  return item;}  }
class C{  @Override public void onFailure(IMqttToken token,Throwable exception){switch (action) {case CONNECT:    connect(exception);  break;case DISCONNECT:disconnect(exception);break;case SUBSCRIBE:subscribe(exception);break;case PUBLISH:publish(exception);break;}}  }
class C{  private boolean actionIsAccepted(final PoliticalActionAttachment paa){  final GameData data=getData();  final CompositeMatchOr<PoliticalActionAttachment> intoAlliedChainOrIntoOrOutOfWar=new CompositeMatchOr<>(Matches.politicalActionIsRelationshipChangeOf(null,Matches.RelationshipTypeIsAlliedAndAlliancesCanChainTogether.invert(),Matches.RelationshipTypeIsAlliedAndAlliancesCanChainTogether,data),Matches.politicalActionIsRelationshipChangeOf(null,Matches.RelationshipTypeIsAtWar.invert(),Matches.RelationshipTypeIsAtWar,data),Matches.politicalActionIsRelationshipChangeOf(null,Matches.RelationshipTypeIsAtWar,Matches.RelationshipTypeIsAtWar.invert(),data));  if (!games.strategy.triplea.Properties.getAlliancesCanChainTogether(data) || !intoAlliedChainOrIntoOrOutOfWar.match(paa)) {    for (    final PlayerID player : paa.getActionAccept()) {      if (!(getRemotePlayer(player)).acceptAction(m_player,PoliticsText.getInstance().getAcceptanceQuestion(paa.getText()),true)) {        return false;      }    }  } else {    final LinkedHashSet<PlayerID> playersWhoNeedToAccept=new LinkedHashSet<>();    playersWhoNeedToAccept.addAll(paa.getActionAccept());    playersWhoNeedToAccept.addAll(Match.getMatches(data.getPlayerList().getPlayers(),Matches.isAlliedAndAlliancesCanChainTogether(m_player,data)));    for (    final PlayerID player : paa.getActionAccept()) {      playersWhoNeedToAccept.addAll(Match.getMatches(data.getPlayerList().getPlayers(),Matches.isAlliedAndAlliancesCanChainTogether(player,data)));    }    final HashSet<PlayerID> alliesWhoMustAccept=playersWhoNeedToAccept;    alliesWhoMustAccept.removeAll(paa.getActionAccept());    for (    final PlayerID player : playersWhoNeedToAccept) {      String actionText=PoliticsText.getInstance().getAcceptanceQuestion(paa.getText());      if (actionText.equals("NONE")) {        actionText=m_player.getName() + " wants to take the following action: " + MyFormatter.attachmentNameToText(paa.getName())+ " \r\n Do you approve?";      } else {        actionText=m_player.getName() + " wants to take the following action: " + MyFormatter.attachmentNameToText(paa.getName())+ ".  Do you approve? \r\n\r\n "+ m_player.getName()+ " will ask "+ MyFormatter.defaultNamedToTextList(paa.getActionAccept())+ ", the following question: \r\n "+ actionText;      }      if (!(getRemotePlayer(player)).acceptAction(m_player,actionText,true)) {        return false;      }    }    for (    final PlayerID player : paa.getActionAccept()) {      if (!(getRemotePlayer(player)).acceptAction(m_player,PoliticsText.getInstance().getAcceptanceQuestion(paa.getText()),true)) {        return false;      }    }  }  return true;}  }
class C{  protected LeatherArmorMetaBuilder(final LeatherArmorMeta meta){  this.meta=meta.clone();}  }
class C{  public void buildCorpus(){  Set<String> set=new HashSet<String>(hamTokenCounts.size() + spamTokenCounts.size());  set.addAll(hamTokenCounts.keySet());  set.addAll(spamTokenCounts.keySet());  Map<String,Double> tempCorpus=new HashMap<String,Double>(set.size());  for (  String token : set) {    tempCorpus.put(token,computeProbability(token));  }  setCorpus(tempCorpus);}  }
class C{  public CfciRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public MLUInt8(String name,byte[] vals,int m){  this(name,castToByte(vals),m);}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  static public void removeDownload(AttachmentTask downloaderTask){  if (downloaderTask != null) {synchronized (sInstance) {      Thread thread=downloaderTask.getCurrentThread();      if (null != thread) {        thread.interrupt();      } else {        Log.i(TAG,"Thread is coming null");      }    }    sInstance.mDownloadThreadPool.remove(downloaderTask.getHTTPDownloadRunnable());  }}  }
class C{  @PostMapping("/users/{forgotPasswordCode}/reset-password") public void resetPassword(@PathVariable String forgotPasswordCode,@RequestParam String newPassword){  log.debug("Resetting password ... ");  lemonService.resetPassword(forgotPasswordCode,newPassword);}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return CancelStatListenerResponse.create(dm,this.getSender(),this.listenerId);}  }
class C{  public EducationalBackground primarySchool(School primarySchool){  this.primarySchool=primarySchool;  return this;}  }
class C{  public static ModifySubscriptionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ModifySubscriptionResponseE object=new ModifySubscriptionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","modifySubscriptionResponse").equals(reader.getName())) {          object.setModifySubscriptionResponse(org.oscm.xsd.ModifySubscriptionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public double normalDistanceSquared(final Vector v,final Membership... bounds){  return normalDistanceSquared(v.x,v.y,v.z,bounds);}  }
class C{  private void fireSelectionChangedEvent(int prevSmallest,int prevLargest){  SelectionChangedEvent e=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == SelectionChangedListener.class) {      if (e == null) {        e=new SelectionChangedEvent(this,prevSmallest,prevLargest,getSmallestSelectionIndex(),getLargestSelectionIndex());      }      ((SelectionChangedListener)listeners[i + 1]).selectionChanged(e);    }  }}  }
class C{  public Map<String,String> scanTag(Reader in) throws IOException {  Map<String,String> atts=new HashMap<String,String>();  skipSpace(in);  while (c >= 0 && c != '>') {    if (c == '<')     throw new IOException("Missing '>' in tag");    String att=scanIdentifier(in);    String val="";    skipSpace(in);    if (c == '=') {      int quote=-1;      c=in.read();      skipSpace(in);      if ((c == '\'') || (c == '\"')) {        quote=c;        c=in.read();      }      StringBuilder buf=new StringBuilder();      while ((c > 0) && (((quote < 0) && (c != ' ') && (c != '\t')&& (c != '\n')&& (c != '\r')&& (c != '>')) || ((quote >= 0) && (c != quote)))) {        buf.append((char)c);        c=in.read();      }      if (c == quote) {        c=in.read();      }      skipSpace(in);      val=buf.toString();    }    atts.put(att.toLowerCase(),val);    skipSpace(in);  }  return atts;}  }
class C{  protected final void fillBufferColumn(ByteBuffer bbuf,int wid,int hgt,int col,LayerType layerType){switch (layerType) {case none:case footprint:case viewshed:case derivative:    break;case elevation:case field:  FloatBuffer fbuf=bbuf.asFloatBuffer();for (int r=0; r < hgt; ++r) {  int c=r * wid + col;  fbuf.put(c,Float.NaN);}break;case colorimage:IntBuffer ibuf=bbuf.asIntBuffer();for (int r=0; r < hgt; ++r) {int c=r * wid + col;ibuf.put(c,0);}break;case grayimage:for (int r=0; r < hgt; ++r) {int c=r * wid + col;bbuf.put(c,(byte)0);}break;}bbuf.rewind();}  }
class C{  public static JedisPoolConfig createPoolConfig(int maxPoolSize){  JedisPoolConfig config=new JedisPoolConfig();  config.setMaxTotal(maxPoolSize);  config.setMaxIdle(maxPoolSize);  config.setTimeBetweenEvictionRunsMillis(600 * 1000);  return config;}  }
class C{  private Index(int unsigned){  this.unsigned=unsigned;}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public void onArmorTick(final World world,final EntityPlayer player,final ItemStack itemStack){  if (!world.isRemote && !hasReplacedArmour(itemStack)) {    replaceArmour(itemStack,player);    player.inventoryContainer.detectAndSendChanges();  }}  }
class C{  protected void createRandomWspHeader(byte[] arr,Random rd,int headerStart,boolean noAppId){  boolean appIdAdded=false;  Log.d(LOG_TAG,"headerStart = " + headerStart + ", appId = "+ mAppIdValue+ "("+ Integer.toHexString(mAppIdValue)+ ")");  Log.d(LOG_TAG,"random arr length:" + arr.length);  String typename[]=new String[]{"short int","long int","string","uint32"};  while (!appIdAdded) {    int type;    int index=headerStart;    int len=arr.length;    int i;    boolean addAppid=false;    int tmpVal=0;    int tmpVal2=0;    while (true) {      int add;      type=rd.nextInt(3);switch (type) {case 0:        if (index > 100 && !appIdAdded)         addAppid=true;      add=1;    break;case 1:  add=1 + rd.nextInt(29);break;default :add=2 + rd.nextInt(10);break;}if (index + add >= len) break;switch (type) {case 0:if (!addAppid) {do {arr[index]=(byte)(0x80 | rd.nextInt(128));} while (arr[index] == (byte)0xaf);} else {Log.d(LOG_TAG,"appId added.");arr[index]=(byte)0xaf;if (noAppId) arr[index]++;}break;case 1:arr[index]=(byte)(add - 1);tmpVal2=0;for (i=1; i < add; i++) {tmpVal=rd.nextInt(255);tmpVal2=(tmpVal2 << 8) | tmpVal;arr[index + i]=(byte)tmpVal;}if (tmpVal2 == 0x2f) arr[index + 1]++;break;default :for (i=0; i < add - 1; i++) {tmpVal=rd.nextInt(127);if (tmpVal < 32) tmpVal=(32 + tmpVal);arr[index + i]=(byte)tmpVal;}arr[index + i]=(byte)0x0;break;}if (LOCAL_LOGV) {Log.d(LOG_TAG,"field name index:" + index);Log.d(LOG_TAG,"type:" + typename[type] + ", add:"+ add);if (type != 2) {for (i=index; i < index + add; i++) {System.out.print(Integer.toHexString(0xff & arr[i]));System.out.print(' ');}} else {System.out.print(Integer.toHexString(0xff & arr[index]));System.out.print(' ');String str=new String(arr,index + 1,add - 2);for (i=0; i < str.length(); i++) {System.out.print(str.charAt(i));System.out.print(' ');}}System.out.print('\n');}index+=add;if (addAppid) {type=1;} else {type=rd.nextInt(4);}switch (type) {case 0:add=1;break;case 1:if (addAppid) {int bit=1;int topBit=0;for (i=0; i < 31; i++) {if ((mAppIdValue & bit) > 0) topBit=i;bit=(bit << 1);}add=2 + topBit / 8;} else {add=1 + rd.nextInt(29);}break;case 2:add=2 + rd.nextInt(10);break;default :add=6;}if (index + add >= len) break;switch (type) {case 0:arr[index]=(byte)(0x80 | rd.nextInt(128));break;case 1:if (addAppid) {addAppid=false;appIdAdded=true;arr[index]=(byte)(add - 1);tmpVal=mAppIdValue;for (i=add; i > 1; i--) {arr[index + i - 1]=(byte)(tmpVal & 0xff);tmpVal=(tmpVal >> 8);}} else {arr[index]=(byte)(add - 1);for (i=1; i < add; i++) {arr[index + i]=(byte)rd.nextInt(255);}}break;case 2:for (i=0; i < add - 1; i++) {tmpVal=rd.nextInt(127);if (tmpVal < 32) tmpVal=(32 + tmpVal);arr[index + i]=(byte)tmpVal;}arr[index + i]=(byte)0x0;break;default :arr[index]=(byte)31;tmpVal=rd.nextInt(0x0FFFFFFF);add=1 + encodeUint32(tmpVal,null,index + 1);encodeUint32(tmpVal,arr,index + 1);break;}if (LOCAL_LOGV) {Log.d(LOG_TAG,"field value index:" + index);Log.d(LOG_TAG,"type:" + typename[type] + ", add:"+ add);if (type != 2) {for (i=index; i < index + add; i++) {System.out.print(Integer.toHexString(0xff & arr[i]));System.out.print(' ');}} else {System.out.print(Integer.toHexString(0xff & arr[index]));System.out.print(' ');String str=new String(arr,index + 1,add - 2);for (i=0; i < str.length(); i++) {System.out.print(str.charAt(i));System.out.print(' ');}}System.out.print('\n');}index+=add;}if (noAppId) break;}Log.d(LOG_TAG,HexDump.dumpHexString(arr));}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public void sendDataAsync(Message message,boolean isResponse,byte[] data){  OtrChatManager cm=OtrChatManager.getInstance();  sendDataAsync(cm,message,isResponse,data);}  }
class C{  public boolean guiChanged(RosterEntry r){  if (labels != null) {    for (int i=0; i < labels.length; i++) {      if (labels[i] != null) {        if (r.getFunctionLabel(i) == null && !labels[i].getText().equals("")) {          return true;        }        if (r.getFunctionLabel(i) != null && !r.getFunctionLabel(i).equals(labels[i].getText())) {          return true;        }      }    }  }  if (lockable != null) {    for (int i=0; i < lockable.length; i++) {      if (lockable[i] != null) {        if (r.getFunctionLockable(i) && !lockable[i].isSelected()) {          return true;        }        if (!r.getFunctionLockable(i) && lockable[i].isSelected()) {          return true;        }      }    }  }  if (_imageFilePath != null) {    for (int i=0; i < _imageFilePath.length; i++) {      if (_imageFilePath[i] != null) {        if (r.getFunctionImage(i) == null && _imageFilePath[i].getImagePath() != null) {          return true;        }        if (r.getFunctionImage(i) != null && !r.getFunctionImage(i).equals(_imageFilePath[i].getImagePath())) {          return true;        }      }    }  }  if (_imagePressedFilePath != null) {    for (int i=0; i < _imagePressedFilePath.length; i++) {      if (_imagePressedFilePath[i] != null) {        if (r.getFunctionSelectedImage(i) == null && _imagePressedFilePath[i].getImagePath() != null) {          return true;        }        if (r.getFunctionSelectedImage(i) != null && !r.getFunctionSelectedImage(i).equals(_imagePressedFilePath[i].getImagePath())) {          return true;        }      }    }  }  if (shunterMode != null) {    String shunFn="";    for (int i=0; i < shunterMode.length; i++) {      if ((shunterMode[i] != null) && (shunterMode[i].isSelected())) {        shunFn="F" + i;      }    }    if (shunFn.compareTo(r.getShuntingFunction()) != 0) {      return true;    }  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.TYPE_CAST_EXPRESSION__OPERAND:    return basicSetOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static Matcher match(String s,String pat,String name){  try {    Pattern p=Pattern.compile(pat);    Matcher m=p.matcher(s);    if (!m.matches()) {      return (null);    }    return (m);  } catch (  PatternSyntaxException e) {    log.error("Malformed DCC++ message syntax! s = ",pat);    return (null);  }catch (  IllegalStateException e) {    log.error("Group called before match operation executed string= " + s);    return (null);  }catch (  IndexOutOfBoundsException e) {    log.error("Index out of bounds string= " + s);    return (null);  }}  }
class C{  public Entry<K,V> removeEntry(K key){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public HeikinAshiItem(Contract contract,RegularTimePeriod period,double open,double high,double low,double close,ZonedDateTime lastUpdateDate){  super(period,new Candle(contract,period,open,high,low,close,lastUpdateDate));}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public ByteRequest(String url,Listener<byte[]> listener,Response.ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  @Override public boolean removeAll(Collection<?> c){  throw new UnsupportedOperationException("cannot remove from Empty Ranges");}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public String toString(){  if (root == null) {    return "";  }  StringBuilder sb=new StringBuilder();  buildString(sb,root);  return sb.toString();}  }
class C{  public SpinnerListModel(Object[] values){  if (values == null || values.length == 0) {    throw new IllegalArgumentException("SpinnerListModel(Object[]) expects non-null non-empty Object[]");  }  this.list=Arrays.asList(values);  this.index=0;}  }
class C{  public void wipe(final int side,final boolean includingToolItems){  final ToolItem[] items=getToolbar(side).getItems();  for (  final ToolItem t : items) {    final Control c=t.getControl();    if (c == null && includingToolItems || c != null) {      if (c != null) {        c.dispose();      }      t.dispose();    }  }  normalizeToolbars();  refresh(true);}  }
class C{  public IntKeyMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public AttackOverview_NB(){  this(GuiController.getInstance());}  }
class C{  private boolean isWindows(Session ses) throws JSchException {  try {    return exec(ses,"cmd.exe") != null;  } catch (  IOException ignored) {    return false;  }}  }
class C{  public boolean isEmptyTokenAsNull(){  return this.emptyAsNull;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.654 -0500",hash_original_method="A3EC509E9519032EDFEF225EA8C949FF",hash_generated_method="B11887FC3B6A3BAD273423365EA6BE37") public static boolean isInfinite(double d){  return 1 == ((d + POSITIVE_INFINITY) + (d + NEGATIVE_INFINITY));}  }
class C{  public static double rMAErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfRelativeError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      result+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result (test value) is 0 in rMAE fitness calculation. Adjusting to avoid division by zero.");    }    error=(result - expectedResult) / expectedResult;    sumOfRelativeError+=Math.abs(error);  }  return (sumOfRelativeError / dvValues.length);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  iter=col.iterator();}  }
class C{  private boolean didNullColsChange(ArrayList<OneRowChange.ColumnSpec> colSpecs,ArrayList<OneRowChange.ColumnVal> currentColValues,ArrayList<OneRowChange.ColumnVal> previousColValues){  if (!conn.nullsEverBoundDifferently())   return false;  for (int i=0; i < currentColValues.size(); i++) {    if (conn.nullsBoundDifferently(colSpecs.get(i))) {      if (previousColValues.get(i).getValue() == null && currentColValues.get(i).getValue() != null)       return true;      if (previousColValues.get(i).getValue() != null && currentColValues.get(i).getValue() == null)       return true;    }  }  return false;}  }
class C{  public long count(){  long count=0;  while (iterator.hasNext()) {    iterator.next();    count++;  }  return count;}  }
class C{  private Dimension genMaxSize(){  Dimension displaySize=stendhal.getDisplaySize();  final int width=(int)(displaySize.getWidth() - PADDING);  final int height=(int)(displaySize.getHeight() - PADDING);  return new Dimension(width,height);}  }
class C{  private void deleteEntry(Entry p){  decrementSize();  if (p.left != null && p.right != null) {    Entry s=successor(p);    p.key=s.key;    p.value=s.value;    p=s;  }  Entry replacement=(p.left != null ? p.left : p.right);  if (replacement != null) {    replacement.parent=p.parent;    if (p.parent == null)     root=replacement; else     if (p == p.parent.left)     p.parent.left=replacement; else     p.parent.right=replacement;    p.left=p.right=p.parent=null;    if (p.color == BLACK)     fixAfterDeletion(replacement);  } else   if (p.parent == null) {    root=null;  } else {    if (p.color == BLACK) {      fixAfterDeletion(p);    }    if (p.parent != null) {      if (p == p.parent.left)       p.parent.left=null; else       if (p == p.parent.right)       p.parent.right=null;      p.parent=null;    }  }}  }
class C{  public QueryBuilder<T,ID> groupByRaw(String rawSql){  groupByRaw=rawSql;  return this;}  }
class C{  protected byte[] _readLastChunk(long index) throws IOException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, FileEncryptionException, ShortBufferException {  long nRemaining=backingRandomAccessFile.length() - (chunkOffset(index));  if (nRemaining > CHUNK_ENC_SIZE) {    throw new FileEncryptionException("Calculated size of size of last chunk bigger than default chunk size!");  } else   if (nRemaining <= CHUNK_IV_SIZE) {    return new byte[]{};  }  long oldpos=backingRandomAccessFile.getFilePointer();  backingRandomAccessFile.seek(chunkOffset(index));  byte[] iv=new byte[CHUNK_IV_SIZE];  int ret=backingRandomAccessFile.read(iv);  if (ret != CHUNK_IV_SIZE) {    throw new FileEncryptionException("Size mismatch reading chunk IV!");  }  IvParameterSpec spec=new IvParameterSpec(iv);  lastChunkCipher.init(Cipher.DECRYPT_MODE,getFileKey(),spec);  nRemaining-=CHUNK_IV_SIZE;  byte[] buf=new byte[(int)nRemaining];  byte[] res;  ret=backingRandomAccessFile.read(buf);  backingRandomAccessFile.seek(oldpos);  if (ret != nRemaining) {    throw new FileEncryptionException("Size mismatch reading encrypted chunk data!");  }  res=lastChunkCipher.doFinal(buf);  if ((res == null) || (res.length != (nRemaining - CHUNK_TLEN))) {    throw new FileEncryptionException("Decryption error or chunk size mismatch during decryption!");  } else {    return res;  }}  }
class C{  public static boolean isSpecialCollection(Class cls){  return ArrayList.class.equals(cls) || LinkedList.class.equals(cls) || HashSet.class.equals(cls)|| LinkedHashSet.class.equals(cls);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof ConnectionInfo)) {    return false;  }  ConnectionInfo ci=(ConnectionInfo)other;  if ((h1 == ci.h1 && h2 == ci.h2)) {    return true;  } else   if ((h1 == ci.h2 && h2 == ci.h1)) {    return true;  }  return false;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Integer && val instanceof Double) {          int k=unwrapKey(key);          double v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  @Scheduled(fixedRate=UPDATE_RATE) protected void updateExistingStoragesSize() throws IOException, SerializationException {  for (  StorageData storageData : existingStoragesSet) {    updateExistingStorageSize(storageData);  }}  }
class C{  protected void selectAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  if (RectangleEdge.isTopOrBottom(edge)) {    selectHorizontalAutoTickUnit(g2,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    selectVerticalAutoTickUnit(g2,dataArea,edge);  }}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  public static int[] lastIndexOf(String s,String arr[],int fromIndex){  int arrLen=arr.length;  int index=-1;  int last=-1;  for (int j=0; j < arrLen; j++) {    int i=s.lastIndexOf(arr[j],fromIndex);    if (i != -1) {      if (i > index) {        index=i;        last=j;      }    }  }  return last == -1 ? null : new int[]{last,index};}  }
class C{  public void destroy(){  log.fine("");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.WILDCARD__DECLARED_UPPER_BOUND:    return declaredUpperBound != null;case TypeRefsPackage.WILDCARD__DECLARED_LOWER_BOUND:  return declaredLowerBound != null;case TypeRefsPackage.WILDCARD__USING_IN_OUT_NOTATION:return usingInOutNotation != USING_IN_OUT_NOTATION_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple){  emitDirect(taskId,streamId,(Collection<Tuple>)null,tuple);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static RowLayout createCenteredRowLayout(int type){  RowLayout result=new RowLayout(type);  result.center=true;  return result;}  }
class C{  public static Predicate<Number> isZero(){  return null;}  }
class C{  public static String createRGBString(Color c){  return "rgb(" + (c.getRed() * 255) + ","+ (c.getGreen() * 255)+ ","+ (c.getBlue() * 255)+ ");";}  }
class C{  private void stopPolling(){  String notifier=Preference.getString(context,Constants.PreferenceFlag.NOTIFIER_TYPE);  if (Constants.NOTIFIER_LOCAL.equals(notifier)) {    LocalNotification.stopPolling(context);  }}  }
class C{  public int transcribe(IPoint[] hull,int offset,int num){  int idx=offset;  for (int i=0; i < num; i++) {    hull[idx++]=points.get(i);  }  return idx;}  }
class C{  private boolean compareField(ITuple innerTuple,ITuple outerTuple,String fieldName){  IField innerField=innerTuple.getField(fieldName);  IField outerField=outerTuple.getField(fieldName);  if (innerField == null || outerField == null) {    return false;  }  return innerField.getValue().equals(outerField.getValue());}  }
class C{  public ResponseCountToBatchSenderAsstManager(int responseCount){  super();  this.responseCount=responseCount;}  }
class C{  public Dashboard createDashboard(Dashboard dashboard) throws IOException {  String requestUrl=RESOURCE;  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,dashboard);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Dashboard.class);}  }
class C{  public TranslucentPopup(Component owner,Component contents,int x,int y){  this();  if (contents == null) {    throw new IllegalArgumentException("Contents must be non-null");  }  reset(owner,contents,x,y);}  }
class C{  public CoapClient useEarlyNegotiation(int size){  this.blockwise=size;  return this;}  }
class C{  @Deprecated public boolean isImageSharingSupported(){  return mImageSharing;}  }
class C{  public static String formatJavaDocBox(String text){  requireNonNull(text);  return formatTextBox(text,JAVA_DOC_WIDTH,JAVADOC_WORDS,JAVA_DOC_SINGLE_LINE_WORDS);}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  public Map extractQueryParams(URL url) throws UnsupportedEncodingException {  if (url.getQuery() == null)   return null;  Map paramsMap=new HashMap();  List paramList=Arrays.asList(url.getQuery().split("&"));  Iterator iter=paramList.iterator();  while (iter.hasNext()) {    String keyValue=(String)iter.next();    int equalPos=keyValue.indexOf("=");    String key=equalPos > -1 ? URLDecoder.decode(keyValue.substring(0,equalPos),"UTF-8") : URLDecoder.decode(keyValue,"UTF-8");    String value;    if (equalPos <= -1)     value=null; else     if (equalPos + 1 > keyValue.length())     value=""; else     value=URLDecoder.decode(keyValue.substring(equalPos + 1),"UTF-8");    List existingValues=(List)paramsMap.get(key);    if (existingValues == null) {      List newValues=new ArrayList();      newValues.add(value);      paramsMap.put(key,newValues);    } else     existingValues.add(value);  }  return paramsMap;}  }
class C{  public String accessString(){  StringBuffer result;  if (accessString != null)   return accessString;  result=new StringBuffer();  if ((access_flags & 0x0001) != 0)   result.append("public ");  if ((access_flags & 0x0002) != 0)   result.append("private ");  if ((access_flags & 0x0004) != 0)   result.append("protected ");  if ((access_flags & 0x0008) != 0)   result.append("static ");  if ((access_flags & 0x0010) != 0)   result.append("final ");  if ((access_flags & 0x0040) != 0)   result.append("volatile ");  if ((access_flags & 0x0080) != 0)   result.append("transient ");  accessString=result.toString();  return accessString;}  }
class C{  private Order applyOrderBy(){  final String orderBy=sord == null ? ord : sord;  final String orderByField=sidx == null ? searchField : sidx;  if (orderBy.equals("asc"))   return Order.asc(orderByField); else   return Order.desc(orderByField);}  }
class C{  public Matrix4d m31(double m31){  this.m31=m31;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);  return this;}  }
class C{  private void createResultContentHandler(Result outputTarget) throws TransformerException {  if (outputTarget instanceof SAXResult) {    SAXResult saxResult=(SAXResult)outputTarget;    m_resultContentHandler=saxResult.getHandler();    m_resultLexicalHandler=saxResult.getLexicalHandler();    if (m_resultContentHandler instanceof Serializer) {      m_serializer=(Serializer)m_resultContentHandler;    }  } else   if (outputTarget instanceof DOMResult) {    DOMResult domResult=(DOMResult)outputTarget;    Node outputNode=domResult.getNode();    Node nextSibling=domResult.getNextSibling();    Document doc;    short type;    if (null != outputNode) {      type=outputNode.getNodeType();      doc=(Node.DOCUMENT_NODE == type) ? (Document)outputNode : outputNode.getOwnerDocument();    } else {      try {        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();        dbf.setNamespaceAware(true);        if (m_isSecureProcessing) {          try {            dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);          } catch (          ParserConfigurationException pce) {          }        }        DocumentBuilder db=dbf.newDocumentBuilder();        doc=db.newDocument();      } catch (      ParserConfigurationException pce) {        throw new TransformerException(pce);      }      outputNode=doc;      type=outputNode.getNodeType();      ((DOMResult)outputTarget).setNode(outputNode);    }    DOMBuilder domBuilder=(Node.DOCUMENT_FRAGMENT_NODE == type) ? new DOMBuilder(doc,(DocumentFragment)outputNode) : new DOMBuilder(doc,outputNode);    if (nextSibling != null)     domBuilder.setNextSibling(nextSibling);    m_resultContentHandler=domBuilder;    m_resultLexicalHandler=domBuilder;  } else   if (outputTarget instanceof StreamResult) {    StreamResult sresult=(StreamResult)outputTarget;    try {      Serializer serializer=SerializerFactory.getSerializer(m_outputFormat.getProperties());      m_serializer=serializer;      if (null != sresult.getWriter())       serializer.setWriter(sresult.getWriter()); else       if (null != sresult.getOutputStream())       serializer.setOutputStream(sresult.getOutputStream()); else       if (null != sresult.getSystemId()) {        String fileURL=sresult.getSystemId();        if (fileURL.startsWith("file:///")) {          if (fileURL.substring(8).indexOf(":") > 0) {            fileURL=fileURL.substring(8);          } else {            fileURL=fileURL.substring(7);          }        } else         if (fileURL.startsWith("file:/")) {          if (fileURL.substring(6).indexOf(":") > 0) {            fileURL=fileURL.substring(6);          } else {            fileURL=fileURL.substring(5);          }        }        m_outputStream=new java.io.FileOutputStream(fileURL);        serializer.setOutputStream(m_outputStream);      } else       throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_OUTPUT_SPECIFIED,null));      m_resultContentHandler=serializer.asContentHandler();    } catch (    IOException ioe) {      throw new TransformerException(ioe);    }  } else {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_TO_RESULT_TYPE,new Object[]{outputTarget.getClass().getName()}));  }  if (m_resultContentHandler instanceof DTDHandler)   m_resultDTDHandler=(DTDHandler)m_resultContentHandler;  if (m_resultContentHandler instanceof DeclHandler)   m_resultDeclHandler=(DeclHandler)m_resultContentHandler;  if (m_resultContentHandler instanceof LexicalHandler)   m_resultLexicalHandler=(LexicalHandler)m_resultContentHandler;}  }
class C{  public void testDefaultToLocalHost() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(3000);  HostAddress address=HostAddressService.getByName(InetAddress.getLocalHost().getHostName());  PingResponse response=has.isReachableByMethod(HostAddressService.DEFAULT,address);  assertTrue("Can ping localhost",response.isReachable());}  }
class C{  public RSAKeyPairGenerator(){}  }
class C{  public Corpus(String path,TreeBankType treebank,double fraction,boolean onlyTest){  this(path,treebank,fraction,onlyTest,-1,false,false);}  }
class C{  public void testConstructionWithNullDocument() throws Exception {  try {    new WebXml(null,null);    fail("Expected NullPointerException");  } catch (  NullPointerException npe) {  }}  }
class C{  public org.dom4j.QName createQName(QName qname){  return factory.createQName(qname.getLocalPart(),qname.getPrefix(),qname.getNamespaceURI());}  }
class C{  protected void reapplySettings(){  if (!settingsInited)   return;  colorMode(colorMode,colorModeX,colorModeY,colorModeZ);  if (fill) {    fill(fillColor);  } else {    noFill();  }  if (stroke) {    stroke(strokeColor);    strokeWeight(strokeWeight);    strokeCap(strokeCap);    strokeJoin(strokeJoin);  } else {    noStroke();  }  if (tint) {    tint(tintColor);  } else {    noTint();  }  if (textFont != null) {    float saveLeading=textLeading;    textFont(textFont,textSize);    textLeading(saveLeading);  }  textMode(textMode);  textAlign(textAlign,textAlignY);  background(backgroundColor);  blendMode(blendMode);}  }
class C{  public Object put(Object key,Object value){  if (value == null)   throw new NullPointerException();  int hash=hash(key);  Entry[] tab=table;  int index=hash & (tab.length - 1);  Entry first=tab[index];  Entry e;  for (e=first; e != null; e=e.next)   if (e.hash == hash && eq(key,e.key))   break;synchronized (this) {    if (tab == table) {      if (e == null) {        if (first == tab[index]) {          Entry newEntry=new Entry(hash,key,value,first);          tab[index]=newEntry;          if (++count >= threshold)           rehash(); else           recordModification(newEntry);          return null;        }      } else {        Object oldValue=e.value;        if (first == tab[index] && oldValue != null) {          e.value=value;          return oldValue;        }      }    }    return sput(key,value,hash);  }}  }
class C{  public static Position interpolate(double amount,Position value1,Position value2){  if (value1 == null || value2 == null) {    throw new IllegalArgumentException("Position Is Null");  }  if (amount < 0)   return value1; else   if (amount > 1)   return value2;  LatLon latLon=LatLon.interpolate(amount,value1,value2);  double elevation=WWMath.mix(amount,value1.getElevation(),value2.getElevation());  return new Position(latLon,elevation);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String replaceAll(String s,String before,String after){  int next=s.indexOf(before);  if (next < 0) {    return s;  }  StringBuilder buff=new StringBuilder(s.length() - before.length() + after.length());  int index=0;  while (true) {    buff.append(s.substring(index,next)).append(after);    index=next + before.length();    next=s.indexOf(before,index);    if (next < 0) {      buff.append(s.substring(index));      break;    }  }  return buff.toString();}  }
class C{  public String toString(org.w3c.dom.Node n){  int nodeHandle=getDTMHandleFromNode(n);  DTM dtm=getDTM(nodeHandle);  XMLString strVal=dtm.getStringValue(nodeHandle);  return strVal.toString();}  }
class C{  private void dumpRoutedNetworks(String prefix,Network network){  StringBuffer sb=new StringBuffer();  sb.append(prefix + ":");  sb.append("label = " + network.getLabel() + ", ");  if (network.getRoutedNetworks() != null) {    for (    String str : network.getRoutedNetworks()) {      sb.append(", routed = " + str);    }  } else {    sb.append(", routed = null");  }  _log.info(sb.toString());}  }
class C{  private void createChildren(){  final List<NaviNode> nodes=GraphHelpers.filter(getGraph(),new CGraphNodeTaggedFilter(Sets.newHashSet(m_tag.getObject())));  for (  final NaviNode node : nodes) {    add(new CTaggedGraphNodeNode(getGraph(),node));  }}  }
class C{  @SuppressWarnings("unchecked") public void rewind(Mark m){  if (m.tq != this) {    throw new IllegalStateException();  }  this.prev=(TokenList<T>)m.savedPrev;  if (null != this.prev) {    this.current=this.prev.next;  } else {    this.current=(TokenList<T>)m.savedCurrent;  }}  }
class C{  public boolean isShift(){  return this.shift;}  }
class C{  final public int length(){  return hashLength >= 0 ? hashLength : array.length;}  }
class C{  public static <U1,U2,R>BiFunction<MonoTSeq<U1>,MonoTSeq<U2>,MonoTSeq<R>> lift2(final BiFunction<? super U1,? super U2,? extends R> fn){  return null;}  }
class C{  public void windowClosing(final WindowEvent arg0){  quit(false);}  }
class C{  public static int[] reverseIndices(int[] indices){  int[] result=new int[indices.length];  int len=indices.length;  for (int i=0; i < indices.length; i+=1) {    result[len - i - 1]=indices[i];  }  return result;}  }
class C{  public static byte[] readFile(File file) throws IOException {  int length=(int)file.length();  byte[] b=new byte[length];  FileInputStream fis=null;  try {    fis=new FileInputStream(file);    while (length > 0) {      length-=fis.read(b,b.length - length,length);    }    return b;  }  finally {    fis.close();  }}  }
class C{  public static boolean shouldEnforceTokenPinPolicy(){  return Boolean.valueOf(System.getProperty(PROXY_ENFORCE_TOKEN_PIN_POLICY,"false"));}  }
class C{  public static StoreWriter createWriter(File file,Configuration config){  return StoreImpl.createWriter(file,config);}  }
class C{  private static boolean isIntegerTranslation(AffineTransform xform){  if (xform.isIdentity()) {    return true;  }  if (xform.getType() == AffineTransform.TYPE_TRANSLATION) {    double tx=xform.getTranslateX();    double ty=xform.getTranslateY();    return (tx == (int)tx && ty == (int)ty);  }  return false;}  }
class C{  protected void saveInteraction(){  final JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));  fc.setFileFilter(new FileNameExtensionFilter("XML file","xml"));  int returnVal=fc.showSaveDialog(frame);  if (returnVal == JFileChooser.APPROVE_OPTION) {    String recordFile=fc.getSelectedFile().getAbsolutePath();    system.getModule(DialogueRecorder.class).writeToFile(recordFile);    addComment("Interaction saved to " + recordFile);  }}  }
class C{  private void startDeviceAdminPrompt(){  Intent intent=new Intent(EnrollmentService.this,EnableDeviceAdminActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);}  }
class C{  public static boolean isNull(URI id){  return (id == null) || NULL_URI.equals(id);}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.549 -0500",hash_original_method="1F52FCAAB51DEA0E76EDD9355166CAE1",hash_generated_method="40C3CF3F8DFF4C81E9E075CCE96C2488") public static final void writeMapXml(Map val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  Set s=val.entrySet();  Iterator i=s.iterator();  out.startTag(null,"map");  if (name != null) {    out.attribute(null,"name",name);  }  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    writeValueXml(e.getValue(),(String)e.getKey(),out);  }  out.endTag(null,"map");}  }
class C{  public void assertRuleMatches(String ruleName,String requestUrl){  Rule rule=getRule(ruleName);  MockResponse response=new MockResponse();  MockRequest request=new MockRequest(requestUrl);  NormalRewrittenUrl rewrittenUrl=null;  try {    rewrittenUrl=(NormalRewrittenUrl)rule.matches(request.getRequestURI(),request,response);  } catch (  IOException e) {    assertNull("IOException during rule matching " + e.toString(),e);  }catch (  ServletException e) {    assertNull("ServletException during rule matching " + e.toString(),e);  }catch (  InvocationTargetException e) {    assertNull("InvocationTargetException during rule matching " + e.toString(),e);  }  assertNotNull("Rule " + ruleName + " does not match",rewrittenUrl);}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    m_Counter=0;    for (int i=0; i < getInputFormat().numInstances(); i++) {      convertInstance(getInputFormat().instance(i));    }  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  private void parseDates(int[] date) throws ParseException {  if (currentOffset >= maxOffset || data.charAt(currentOffset++) != 'M')   throw new java.text.ParseException("invalid dst boundary date",currentOffset);  int tmpOffset=currentOffset;  date[0]=parseNumber();  if (tmpOffset == currentOffset || date[0] < 1 || date[0] > 12)   throw new java.text.ParseException("invalid dst month",currentOffset);  if (currentOffset >= maxOffset || data.charAt(currentOffset++) != '.')   throw new java.text.ParseException("invalid dst boundary char",currentOffset);  tmpOffset=currentOffset;  date[1]=parseNumber();  if (tmpOffset == currentOffset || date[1] < 1 || date[1] > 5)   throw new java.text.ParseException("invalid dst boundary week",currentOffset);  if (currentOffset >= maxOffset || data.charAt(currentOffset++) != '.')   throw new java.text.ParseException("invalid dst boundary char",currentOffset);  tmpOffset=currentOffset;  date[2]=parseNumber();  if (tmpOffset == currentOffset || date[2] < 0 || date[2] > 6)   throw new java.text.ParseException("invalid dst boundary day",currentOffset);}  }
class C{  public static <S>S fromSpec(Object context,String spec,final Class<S> type) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  return fromSpec(context,spec,type,null,null);}  }
class C{  public static FXGMatrix bitmapFillMatrix(BitmapFillNode fill,DefineBits img,Rect pathBounds){  MatrixNode mtxNode=fill.matrix;  if (mtxNode != null) {    double tx=mtxNode.tx;    double ty=mtxNode.ty;    FXGMatrix fxgMtx=new FXGMatrix(mtxNode.a,mtxNode.b,mtxNode.c,mtxNode.d,0,0);    fxgMtx.scale(SwfConstants.TWIPS_PER_PIXEL,SwfConstants.TWIPS_PER_PIXEL);    fxgMtx.translate(tx,ty);    return fxgMtx;  }  FXGMatrix matrix=new FXGMatrix();  double tx;  double ty;  double scaleX;  double scaleY;  if ((fill.getFileVersion() != FXGVersion.v1_0) && (fill.fillMode.equals(FillMode.SCALE))) {    tx=(Double.isNaN(fill.x)) ? pathBounds.xMin / (double)SwfConstants.TWIPS_PER_PIXEL : fill.x;    ty=(Double.isNaN(fill.y)) ? pathBounds.yMin / (double)SwfConstants.TWIPS_PER_PIXEL : fill.y;    scaleX=(Double.isNaN(fill.scaleX)) ? (pathBounds.getWidth() / (double)img.width) : SwfConstants.TWIPS_PER_PIXEL * fill.scaleX;    scaleY=(Double.isNaN(fill.scaleY)) ? (pathBounds.getHeight() / (double)img.height) : SwfConstants.TWIPS_PER_PIXEL * fill.scaleY;  } else {    tx=(Double.isNaN(fill.x)) ? pathBounds.xMin / (double)SwfConstants.TWIPS_PER_PIXEL : fill.x;    ty=(Double.isNaN(fill.y)) ? pathBounds.yMin / (double)SwfConstants.TWIPS_PER_PIXEL : fill.y;    scaleX=(Double.isNaN(fill.scaleX)) ? SwfConstants.TWIPS_PER_PIXEL : SwfConstants.TWIPS_PER_PIXEL * fill.scaleX;    scaleY=(Double.isNaN(fill.scaleY)) ? SwfConstants.TWIPS_PER_PIXEL : SwfConstants.TWIPS_PER_PIXEL * fill.scaleY;  }  double angle=fill.rotation;  while (angle < 0)   angle+=360;  angle%=360;  matrix.scale(scaleX,scaleY);  matrix.rotate(angle);  matrix.translate(tx,ty);  return matrix;}  }
class C{  public void testGetImplementedInterfaces() throws Exception {  Class<?>[] ifaces;  ifaces=Util.getImplementedInterfaces(Statement.class);  assertEquals(2,ifaces.length);  List<Class<?>> ifacesList=Arrays.asList(ifaces);  for (  Class<?> clazz : new Class<?>[]{java.sql.Statement.class,Wrapper.class}) {    assertTrue(ifacesList.contains(clazz));  }  ifaces=Util.getImplementedInterfaces(StatementImpl.class);  assertEquals(1,ifaces.length);  assertEquals(ifaces[0],Statement.class);  ifaces=Util.getImplementedInterfaces(ConnectionImpl.class);  assertEquals(3,ifaces.length);  ifacesList=Arrays.asList(ifaces);  for (  Class<?> clazz : new Class<?>[]{MySQLConnection.class,Serializable.class,ConnectionProperties.class}) {    assertTrue(ifacesList.contains(clazz));  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null) {    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  }  return fields;}  }
class C{  private void sendNonce(int r){  Nonce nonceMessage=new Nonce.Builder().nonce(r).build();  lengthValueWrite(out,nonceMessage);}  }
class C{  public int sampleData(DataSource dataSource,int length,boolean allowEndOfInput) throws IOException {  return rollingBuffer.appendData(dataSource,length,allowEndOfInput);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.INTERFACE_BODY___INTERFACE_MEMBER_DECLARATION_1:    return ((InternalEList<?>)getInterfaceMemberDeclaration_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public BeanPropertyWriter withSerializer(JsonSerializer<Object> ser){  if (getClass() != BeanPropertyWriter.class) {    throw new IllegalStateException("BeanPropertyWriter sub-class does not override 'withSerializer()'; needs to!");  }  return new BeanPropertyWriter(this,ser);}  }
class C{  private void fireEvent(int eventType,Object eventObject){  AgentRosterListener[] listeners=null;synchronized (this.listeners) {    listeners=new AgentRosterListener[this.listeners.size()];    this.listeners.toArray(listeners);  }  for (int i=0; i < listeners.length; i++) {switch (eventType) {case EVENT_AGENT_ADDED:      listeners[i].agentAdded((String)eventObject);    break;case EVENT_AGENT_REMOVED:  listeners[i].agentRemoved((String)eventObject);break;case EVENT_PRESENCE_CHANGED:listeners[i].presenceChanged((Presence)eventObject);break;}}}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String watershedHeader=null;  String weightHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double watershedID=0;  boolean blnWatershed=false;  boolean blnWeight=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      if (!args[i].toLowerCase().contains("not specified")) {        watershedHeader=args[i];        blnWatershed=true;      }    } else     if (i == 2) {      if (!args[i].toLowerCase().contains("not specified")) {        weightHeader=args[i];        blnWeight=true;      }    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!blnWatershed && !blnWeight) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (blnWatershed && !blnWeight) {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      watershed.close();    } else     if (!blnWatershed && blnWeight) {      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();    } else {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();      watershed.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean awaitState(Job job,Job.State state,long timeout,TimeUnit unit){  long endWait=-1;  if (timeout != -1) {    endWait=System.currentTimeMillis() + unit.toMillis(timeout);  }  while (true) {    Job.State curState=job.getCurrentState();    if (curState == state)     return true;    if (endWait != -1) {      long now=System.currentTimeMillis();      if (now >= endWait)       return false;    }    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      return false;    }  }}  }
class C{  public PhraseQuery build(){  Term[] terms=this.terms.toArray(new Term[this.terms.size()]);  int[] positions=new int[this.positions.size()];  for (int i=0; i < positions.length; ++i) {    positions[i]=this.positions.get(i);  }  return new PhraseQuery(slop,terms,positions);}  }
class C{  public MiniDrawer withEnableSelectedMiniDrawerItemBackground(boolean enableSelectedMiniDrawerItemBackground){  this.mEnableSelectedMiniDrawerItemBackground=enableSelectedMiniDrawerItemBackground;  return this;}  }
class C{  protected boolean removeEldestEntry(Map.Entry<K,V> eldest){  boolean removing=size() > maxCapacity;  if (removing) {    LOG.debug("Cache loses key: {}",eldest.getKey());  }  return removing;}  }
class C{  public void removeProcessListener(ProcessListener l){  listenerList.remove(l);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Response waitForResponse() throws InterruptedException {  return waitForResponse(0);}  }
class C{  public static Vec4 project(Vec4 modelPoint,Matrix modelview,Matrix projection,java.awt.Rectangle viewport){  if (modelPoint == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (modelview == null) {    String message=Logging.getMessage("nullValue.ModelViewIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (projection == null) {    String message=Logging.getMessage("nullValue.ProjectionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewport == null) {    String message=Logging.getMessage("nullValue.ViewportIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GLU glu=new GLUgl2();  double[] modelviewArray=new double[16];  double[] projectionArray=new double[16];  modelview.toArray(modelviewArray,0,false);  projection.toArray(projectionArray,0,false);  int[] viewportArray=new int[]{viewport.x,viewport.y,viewport.width,viewport.height};  double[] result=new double[3];  if (!glu.gluProject(modelPoint.x,modelPoint.y,modelPoint.z,modelviewArray,0,projectionArray,0,viewportArray,0,result,0)) {    return null;  }  return Vec4.fromArray3(result,0);}  }
class C{  public void deposit(double amount){  balance+=amount;  transactions.add(new Transaction('D',amount,balance,"Deposit to account"));}  }
class C{  public ShortRange(int min,int max){  this((short)min,(short)max);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String path=request.getServletPath();  String file="/spa".equals(path) ? "/webjars/todosapp/backbone-spa/spa.html" : "/webjars/todosapp/index.html";  getServletContext().getRequestDispatcher(file).forward(request,response);}  }
class C{  public boolean isTypeVariable(){  return true;}  }
class C{  public boolean evaluate(InternalContextAdapter context) throws MethodInvocationException {  return jjtGetChild(0).evaluate(context);}  }
class C{  @Override public void close(){  CloseableReference<Bitmap> reference=detachBitmapReference();  if (reference != null) {    reference.close();  }}  }
class C{  public ReliableMessageQueueFactoryImpl(){  this.closed=false;}  }
class C{  public void cacheFunction(String funcName,FunctionInterface function){  allFunctions.put(funcName,function);}  }
class C{  public static void integrateNetwork(final Network networkA,final Network networkB,final String prefixNodesNetworkB,final String prefixLinksNetworkB){  final NetworkFactory factory=networkA.getFactory();  log.info("Merging networks...");  final int numberOfLinksNetworkA=networkA.getLinks().size();  final int numberOfNodesNetworkA=networkA.getNodes().size();  for (  Node node : networkB.getNodes().values()) {    Id<Node> nodeId=Id.create(prefixNodesNetworkB + node.getId().toString(),Node.class);    if (!networkA.getNodes().containsKey(nodeId)) {      Node newNode=factory.createNode(nodeId,node.getCoord());      networkA.addNode(newNode);    }  }  double capacityFactor=networkA.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Link link : networkB.getLinks().values()) {    Id<Link> linkId=Id.create(prefixLinksNetworkB + link.getId().toString(),Link.class);    if (!networkA.getLinks().containsKey(linkId)) {      Id<Node> fromNodeId=Id.create(prefixNodesNetworkB + link.getFromNode().getId().toString(),Node.class);      Id<Node> toNodeId=Id.create(prefixNodesNetworkB + link.getToNode().getId().toString(),Node.class);      Link newLink=factory.createLink(linkId,networkA.getNodes().get(fromNodeId),networkA.getNodes().get(toNodeId));      newLink.setAllowedModes(link.getAllowedModes());      newLink.setCapacity(link.getCapacity() * capacityFactor);      newLink.setFreespeed(link.getFreespeed());      newLink.setLength(link.getLength());      newLink.setNumberOfLanes(link.getNumberOfLanes());      networkA.addLink(newLink);    }  }  log.info(" Merging Stats:");  log.info("  Number of links network A: " + numberOfLinksNetworkA);  log.info("  Number of nodes network A: " + numberOfNodesNetworkA);  log.info("  Number of links network B: " + networkB.getLinks().size());  log.info("  Number of nodes network B: " + networkB.getNodes().size());  log.info("  Sum of links: " + (numberOfLinksNetworkA + networkB.getLinks().size()));  log.info("  Sum of nodes: " + (numberOfNodesNetworkA + networkB.getNodes().size()));  log.info("  Number of links merged: " + networkA.getLinks().size());  log.info("  Number of nodes merged: " + networkA.getNodes().size());  log.info("Merging networks... done.");}  }
class C{  public int length(){  return body.length;}  }
class C{  public static boolean isFirstLaunch(final Context context){  SharedPreferences sp=getDefaultSharedPreferences(context);  return sp.getBoolean(SHARED_PREF_IS_FIRST_LAUNCH,true);}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  DeleteDbFiles.execute("~","test",true);  String url="jdbc:h2:~/test";  initialInsert(url,200000);  for (int i=0; i < 3; i++) {    createAsSelect(url,true);    createAsSelect(url,false);  }}  }
class C{  public void initialize(boolean initializeSystemVocabulary){  TimeKeeper timer=TimingUtils.start();  if (initializeSystemVocabulary)   populateSystemVocabulary();  createIdArrays();  timer.mark("Vocabulary setup");  createLexCoocTable(sa.getVocabulary().size());  timer.mark("Cooc table");  logger.info("Timing: {}",timer);}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getMask(actions));}  }
class C{  public void writeAttr(String name,int value) throws IOException {  writeAttr(name,Integer.toString(value));}  }
class C{  public static void saveMappingTextFormat(BidiMap mapping,File outputFile) throws IOException {  PrintWriter pw=new PrintWriter(new FileOutputStream(outputFile));  @SuppressWarnings("unchecked") SortedSet<Object> featureIndexes=new TreeSet<Object>(mapping.values());  for (  Object featureIndex : featureIndexes) {    pw.printf(Locale.ENGLISH,"%5d %s%n",(int)featureIndex,mapping.getKey(featureIndex).toString());  }  IOUtils.closeQuietly(pw);}  }
class C{  @TargetApi(21) public DotIndicator(final Context context,final AttributeSet attrs,final int defStyleAttr,final int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);  init(attrs,defStyleAttr,defStyleRes);}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  public void apply(int zoom_axis){  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      checkRange(range,i);      double[] limits=mRenderer.getZoomLimits();      double centerX=(range[0] + range[1]) / 2;      double centerY=(range[2] + range[3]) / 2;      double newWidth=range[1] - range[0];      double newHeight=range[3] - range[2];      double newXMin=centerX - newWidth / 2;      double newXMax=centerX + newWidth / 2;      double newYMin=centerY - newHeight / 2;      double newYMax=centerY + newHeight / 2;      if (i == 0) {        limitsReachedX=limits != null && (newXMin <= limits[0] || newXMax >= limits[1]);        limitsReachedY=limits != null && (newYMin <= limits[2] || newYMax >= limits[3]);      }      if (mZoomIn) {        if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedX && mZoomRate < 1) {          } else {            newWidth/=mZoomRate;          }        }        if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedY && mZoomRate < 1) {          } else {            newHeight/=mZoomRate;          }        }      } else {        if (mRenderer.isZoomXEnabled() && !limitsReachedX && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          newWidth*=mZoomRate;        }        if (mRenderer.isZoomYEnabled() && !limitsReachedY && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          newHeight*=mZoomRate;        }      }      double minX, minY;      if (limits != null) {        minX=Math.min(mRenderer.getZoomInLimitX(),limits[1] - limits[0]);        minY=Math.min(mRenderer.getZoomInLimitY(),limits[3] - limits[2]);      } else {        minX=mRenderer.getZoomInLimitX();        minY=mRenderer.getZoomInLimitY();      }      newWidth=Math.max(newWidth,minX);      newHeight=Math.max(newHeight,minY);      if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {        newXMin=centerX - newWidth / 2;        newXMax=centerX + newWidth / 2;        setXRange(newXMin,newXMax,i);      }      if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {        newYMin=centerY - newHeight / 2;        newYMax=centerY + newHeight / 2;        setYRange(newYMin,newYMax,i);      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    if (mZoomIn) {      renderer.setScale(renderer.getScale() * mZoomRate);    } else {      renderer.setScale(renderer.getScale() / mZoomRate);    }  }  notifyZoomListeners(new ZoomEvent(mZoomIn,mZoomRate));}  }
class C{  public static void registerMbeans(){  registerMbeans(ManagementFactory.getPlatformMBeanServer());}  }
class C{  private String crawlCode(String content){  String result="";  String resultSpan="";  String resultParagraph="";  String resultDiv="";  resultSpan=getTagContent("span",content);  resultParagraph=getTagContent("p",content);  resultDiv=getTagContent("div",content);  result=resultSpan;  if (resultParagraph.length() > resultSpan.length() && resultParagraph.length() >= resultDiv.length())   result=resultParagraph; else   if (resultParagraph.length() > resultSpan.length() && resultParagraph.length() < resultDiv.length())   result=resultDiv; else   result=resultParagraph;  return htmlDecode(result);}  }
class C{  private void disableExtension(Extensions extension){  extensions-=extensions & extension.id;  extension.instance.stop(this);}  }
class C{  private void showCategoriesDialog(){  if (categoriesDialog == null) {    categoriesDialog=new CustomCategoriesDialog(getFrame());    categoriesDialog.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);  }  categoriesDialog.reset();  categoriesDialog.pack();  categoriesDialog.setLocationRelativeTo(getFrame());  categoriesDialog.setVisible(true);}  }
class C{  public static <T,R>R[] map(T[] array,Function<? super T,? extends R> evalFunction,Class<R> klass){  R[] newArray=create(array.length,klass);  for (int i=0; i < newArray.length; i++) {    newArray[i]=evalFunction.apply(array[i]);  }  return newArray;}  }
class C{  public static String splitString(String str,String delimiter,int position){  String[] stringArray=str.split(delimiter);  return stringArray[position];}  }
class C{  public PickledGraphite(InetSocketAddress address,SocketFactory socketFactory,Charset charset,int batchSize){  this.address=address;  this.hostname=null;  this.port=-1;  this.socketFactory=socketFactory;  this.charset=charset;  this.batchSize=batchSize;}  }
class C{  public static DateBuilder newDate(){  return new DateBuilder();}  }
class C{  public CameraButton(String key,String[][] imageSuffixes,boolean isLeftClickTemp,int[][] statePinValues,FrontPanel frontPanel,int initState){  int numberPins=statePinValues.length;  int numberStates=statePinValues[0].length;  for (int pinNumber=0; pinNumber < numberPins; pinNumber++) {    int[] pinValues=statePinValues[pinNumber];    if (pinValues.length != numberStates) {      throw new RuntimeException("Error initializing CameraButton for button key '" + key + "': "+ numberStates+ " states are defined for pin 0, but array for pin "+ pinNumber+ " has "+ pinValues.length+ " values !");    }  }  for (int hoverState=0; hoverState < 2; hoverState++) {    String[] imageSuffix=imageSuffixes[hoverState];    if (imageSuffix.length != numberStates) {      throw new RuntimeException("Error initializing CameraButton for button key '" + key + "': "+ numberStates+ " states are defined, but array in hover state "+ hoverState+ " has "+ imageSuffix.length+ " pictures !");    }  }  this.key=key;  this.imageSuffixes=imageSuffixes;  this.isLeftClickTemp=isLeftClickTemp;  this.statePinValues=statePinValues;  this.frontPanel=frontPanel;  this.buttonPins=new Pin[numberPins];  state=initState;  for (int i=0; i < numberPins; i++) {    buttonPins[i]=new PulledOutputPin(key + " button" + (numberPins == 1 ? "" : (" pin" + i)),statePinValues[i][state]);  }}  }
class C{  protected void sequence_AnnotatedExpression_ClassExtendsClause_ClassImplementsList_Members(ISerializationContext context,N4ClassExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected static Config commandLineConfigs(String cluster,String role,String environ,Boolean verbose){  Config config=Config.newBuilder().put(Keys.cluster(),cluster).put(Keys.role(),role).put(Keys.environ(),environ).put(Keys.verbose(),verbose).build();  return config;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.635 -0400",hash_original_method="99B5BE3867B40B3085E3122FEC15BA27",hash_generated_method="B3E6CCF07FE265E91C2AB6D3E799467C") @Override public String toString(){  String condition=acceptOlder ? "<=" : ">";  return super.toString() + "(" + condition+ cutoff+ ")";}  }
class C{  public Cache(){  this(DEFAULT_CAPACITY);}  }
class C{  void handleResponse(DNSIncoming msg) throws IOException {  final long now=System.currentTimeMillis();  boolean hostConflictDetected=false;  boolean serviceConflictDetected=false;  for (  DNSRecord newRecord : msg.getAllAnswers()) {    this.handleRecord(newRecord,now);    if (DNSRecordType.TYPE_A.equals(newRecord.getRecordType()) || DNSRecordType.TYPE_AAAA.equals(newRecord.getRecordType())) {      hostConflictDetected|=newRecord.handleResponse(this);    } else {      serviceConflictDetected|=newRecord.handleResponse(this);    }  }  if (hostConflictDetected || serviceConflictDetected) {    this.startProber();  }}  }
class C{  public void updateTarget(){  setFireEnabled(false);  IGame game=clientgui.getClient().getGame();  final int weaponId=clientgui.mechD.wPan.getSelectedWeaponNum();  if ((target != null) && (target.getPosition() != null) && (weaponId != -1)&& (ce() != null)) {    ToHitData toHit;    if (ash.inAimingMode()) {      Mounted weapon=ce().getEquipment(weaponId);      boolean aiming=ash.isAimingAtLocation() && ash.allowAimedShotWith(weapon);      ash.setEnableAll(aiming);      if (aiming) {        toHit=WeaponAttackAction.toHit(game,cen,target,weaponId,ash.getAimingAt(),ash.getAimingMode(),false,false,null,null,false,true);        clientgui.mechD.wPan.wTargetR.setText(target.getDisplayName() + " (" + ash.getAimingLocation()+ ")");      } else {        toHit=WeaponAttackAction.toHit(game,cen,target,weaponId,Entity.LOC_NONE,IAimingModes.AIM_MODE_NONE,false,false,null,null,false,true);        clientgui.mechD.wPan.wTargetR.setText(target.getDisplayName());      }      ash.setPartialCover(toHit.getCover());    } else {      toHit=WeaponAttackAction.toHit(game,cen,target,weaponId,Entity.LOC_NONE,IAimingModes.AIM_MODE_NONE,false,false,null,null,false,true);      clientgui.mechD.wPan.wTargetR.setText(target.getDisplayName());    }    int effectiveDistance=Compute.effectiveDistance(game,ce(),target);    clientgui.mechD.wPan.wRangeR.setText("" + effectiveDistance);    Mounted m=ce().getEquipment(weaponId);    if (m.getType().hasFlag(WeaponType.F_CWS)) {      clientgui.mechD.wPan.selectWeapon(weaponId);    }    if (m.isUsedThisRound()) {      clientgui.mechD.wPan.wToHitR.setText(Messages.getString("FiringDisplay.alreadyFired"));      setFireEnabled(false);    } else     if (m.getType().hasFlag(WeaponType.F_AUTO_TARGET)) {      clientgui.mechD.wPan.wToHitR.setText(Messages.getString("FiringDisplay.autoFiringWeapon"));      setFireEnabled(false);    } else     if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString());      setFireEnabled(false);    } else     if (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL) {      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString());      setFireEnabled(true);    } else {      boolean natAptGunnery=ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_GUNNERY);      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString() + " (" + Compute.oddsAbove(toHit.getValue(),natAptGunnery)+ "%)");      setFireEnabled(true);    }    clientgui.mechD.wPan.toHitText.setText(toHit.getDesc());    setSkipEnabled(true);  } else {    clientgui.mechD.wPan.wTargetR.setText("---");    clientgui.mechD.wPan.wRangeR.setText("---");    clientgui.mechD.wPan.wToHitR.setText("---");    clientgui.mechD.wPan.toHitText.setText("");  }  if ((weaponId != -1) && (ce() != null)) {    Mounted m=ce().getEquipment(weaponId);    setFireModeEnabled(m.isModeSwitchable());  }  updateSearchlight();}  }
class C{  protected boolean filter(String text){  if (filter != null) {    filter.filter(text);    return true;  }  return false;}  }
class C{  protected void processConvert(DatabaseMapping mapping,String converterName,MetadataClass referenceClass,boolean isForMapKey,boolean hasConverts){  if (converterName.equals(Convert.SERIALIZED)) {    processSerialized(mapping,referenceClass,isForMapKey);  } else   if (converterName.equals(Convert.CLASS_INSTANCE)) {    new ClassInstanceMetadata().process(mapping,this,referenceClass,isForMapKey);  } else   if (converterName.equals(Convert.XML)) {    new XMLMetadata().process(mapping,this,referenceClass,isForMapKey);  } else   if (converterName.equals(Convert.JSON)) {    new JSONMetadata().process(mapping,this,referenceClass,isForMapKey);  } else   if (converterName.equals(Convert.KRYO)) {    new KryoMetadata().process(mapping,this,referenceClass,isForMapKey);  } else {    AbstractConverterMetadata converter=getProject().getConverter(converterName);    if (converter == null) {      throw ValidationException.converterNotFound(getJavaClass(),converterName,getAnnotatedElement());    } else {      converter.process(mapping,this,referenceClass,isForMapKey);    }  }  if (hasEnumerated(isForMapKey)) {    getLogger().logWarningMessage(MetadataLogger.IGNORE_ENUMERATED,getJavaClass(),getAnnotatedElement());  }  if (hasLob(isForMapKey)) {    getLogger().logWarningMessage(MetadataLogger.IGNORE_LOB,getJavaClass(),getAnnotatedElement());  }  if (hasTemporal(isForMapKey)) {    getLogger().logWarningMessage(MetadataLogger.IGNORE_TEMPORAL,getJavaClass(),getAnnotatedElement());  }  if (isValidSerializedType(referenceClass)) {    getLogger().logConfigMessage(MetadataLogger.IGNORE_SERIALIZED,getJavaClass(),getAnnotatedElement());  }  if (hasConverts) {    getLogger().logWarningMessage(MetadataLogger.IGNORE_CONVERTS,getJavaClass(),getAnnotatedElement());  }  if (getProject().hasAutoApplyConverter(referenceClass)) {    getLogger().logWarningMessage(MetadataLogger.IGNORE_AUTO_APPLY_CONVERTER,getJavaClass(),getAnnotatedElement());  }}  }
class C{  @Override public int compareTo(BlockIndex o){  if (o.x < x) {    return 1;  } else   if (o.x > x) {    return -1;  } else   if (o.z < z) {    return 1;  } else   if (o.z > z) {    return -1;  } else   if (o.y < y) {    return 1;  } else   if (o.y > y) {    return -1;  } else {    return 0;  }}  }
class C{  protected void rollback() throws MailboxException {  try {    getSession().refresh(false);  } catch (  RepositoryException e) {  }}  }
class C{  final private static String[] readQDescrs(String string,int[] pos) throws NamingException {  if (debug) {    System.err.println("readQDescrs: pos=" + pos[0]);  }  skipWhitespace(string,pos);switch (string.charAt(pos[0])) {case OID_LIST_BEGIN:    return readQDescrList(string,pos);case SINGLE_QUOTE:  return readQDString(string,pos);default :throw new InvalidAttributeValueException("unexpected oids " + "string: " + string);}}  }
class C{  public EventParser(String event){  super(event);}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  public OMGeometry addOMGeometry(OMGeometryList list){  return null;}  }
class C{  protected FloatBuffer computeBoundaryNormals(BoundaryInfo boundary,FloatBuffer nBuf){  int nVerts=boundary.positions.size();  Vec4[] verts=boundary.vertices;  double avgX, avgY, avgZ;  Vec4 va=verts[1].subtract3(verts[0]);  Vec4 vb=verts[nVerts - 2].subtract3(verts[0]);  avgX=(va.y * vb.z) - (va.z * vb.y);  avgY=(va.z * vb.x) - (va.x * vb.z);  avgZ=(va.x * vb.y) - (va.y * vb.x);  for (int i=1; i < nVerts - 1; i++) {    va=verts[i + 1].subtract3(verts[i]);    vb=verts[i - 1].subtract3(verts[i]);    avgX+=(va.y * vb.z) - (va.z * vb.y);    avgY+=(va.z * vb.x) - (va.x * vb.z);    avgZ+=(va.x * vb.y) - (va.y * vb.x);  }  avgX/=nVerts - 1;  avgY/=nVerts - 1;  avgZ/=nVerts - 1;  double length=Math.sqrt(avgX * avgX + avgY * avgY + avgZ * avgZ);  for (int i=0; i < nVerts; i++) {    nBuf.put((float)(avgX / length)).put((float)(avgY / length)).put((float)(avgZ / length));  }  return nBuf;}  }
class C{  private void handleNewSelectionChange(View selectedView,int direction,int newSelectedPosition,boolean newFocusAssigned){  if (newSelectedPosition == INVALID_POSITION) {    throw new IllegalArgumentException("newSelectedPosition needs to be valid");  }  View topView;  View bottomView;  int topViewIndex, bottomViewIndex;  boolean topSelected=false;  final int selectedIndex=mSelectedPosition - mFirstPosition;  final int nextSelectedIndex=newSelectedPosition - mFirstPosition;  if (direction == View.FOCUS_UP) {    topViewIndex=nextSelectedIndex;    bottomViewIndex=selectedIndex;    topView=getChildAt(topViewIndex);    bottomView=selectedView;    topSelected=true;  } else {    topViewIndex=selectedIndex;    bottomViewIndex=nextSelectedIndex;    topView=selectedView;    bottomView=getChildAt(bottomViewIndex);  }  final int numChildren=getChildCount();  if (topView != null) {    topView.setSelected(!newFocusAssigned && topSelected);    measureAndAdjustDown(topView,topViewIndex,numChildren);  }  if (bottomView != null) {    bottomView.setSelected(!newFocusAssigned && !topSelected);    measureAndAdjustDown(bottomView,bottomViewIndex,numChildren);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @SuppressWarnings("unchecked") public void simulate(){  Set<Action> actions=new HashSet<>();  actions.add(new DynamicAction("Move"));  Problem problem=new Problem(getRandomState(),null,null,null);  Function<Double,Double> func=(Function<Double,Double>)simPaneCtrl.getParamValue(PARAM_FUNC_SELECT);  Scheduler scheduler=new Scheduler(simPaneCtrl.getParamAsInt(PARAM_K),simPaneCtrl.getParamAsDouble(PARAM_LAMBDA),simPaneCtrl.getParamAsInt(PARAM_MAX_ITER));  search=new SimulatedAnnealingSearch(null,scheduler);  search.getNodeExpander().addNodeListener(null);  search.search(problem);  updateStateView(search.getLastSearchState());}  }
class C{  public static Image convertToArdor3DImage(WritableRaster raster,ColorModel colorModel,ImageDataFormat format,boolean flip){  DataBuffer dataBuffer=raster.getDataBuffer();  int width=raster.getWidth();  int height=raster.getHeight();  ByteBuffer byteBuffer=null;  PixelDataType type=PixelDataType.Byte;  int pixelSize=colorModel.getPixelSize();  int pixelBytes=pixelSize / 8;  if (dataBuffer instanceof DataBufferInt) {    int[] buffer=((DataBufferInt)dataBuffer).getData();    byteBuffer=BufferUtils.createByteBuffer(buffer.length * 4);    IntBuffer intBuffer=byteBuffer.asIntBuffer();    intBuffer.put(buffer);    intBuffer.rewind();    if (flip) {      doFlip(byteBuffer,width * pixelBytes,height);    }    if (format == null) {      format=ImageDataFormat.RGBA;    }    type=PixelDataType.UnsignedByte;  } else   if (dataBuffer instanceof DataBufferFloat) {    float[] buffer=((DataBufferFloat)dataBuffer).getData();    byteBuffer=BufferUtils.createByteBuffer(buffer.length * 4);    FloatBuffer floatBuffer=byteBuffer.asFloatBuffer();    floatBuffer.put(buffer);    if (flip) {      doFlip(byteBuffer,width * pixelBytes,height);    }    format=ImageDataFormat.Luminance;    type=PixelDataType.Float;  } else   if (dataBuffer instanceof DataBufferShort) {    short[] buffer=((DataBufferShort)dataBuffer).getData();    byteBuffer=BufferUtils.createByteBuffer(buffer.length * 2);    ShortBuffer shortBuffer=byteBuffer.asShortBuffer();    shortBuffer.put(buffer);    if (flip) {      doFlip(byteBuffer,width * pixelBytes,height);    }    format=ImageDataFormat.Luminance;    type=PixelDataType.UnsignedShort;  } else   if (dataBuffer instanceof DataBufferUShort) {    short[] buffer=((DataBufferUShort)dataBuffer).getData();    byteBuffer=BufferUtils.createByteBuffer(buffer.length * 2);    ShortBuffer shortBuffer=byteBuffer.asShortBuffer();    shortBuffer.put(buffer);    if (flip) {      doFlip(byteBuffer,width * pixelBytes,height);    }    format=ImageDataFormat.Luminance;    type=PixelDataType.UnsignedShort;  } else   if ((dataBuffer instanceof DataBufferByte)) {    byte[] buffer=((DataBufferByte)dataBuffer).getData();    int bytesPerPixel=buffer.length / (width * height);    int scanWidth=width * bytesPerPixel;    byteBuffer=BufferUtils.createByteBuffer(buffer.length);    byteBuffer.put(buffer);    if (flip) {      doFlip(byteBuffer,scanWidth,height);    }    if (format == null) {      if (pixelSize == 24) {        format=ImageDataFormat.RGB;      } else       if (pixelSize == 32) {        format=ImageDataFormat.RGBA;      } else       if (pixelSize == 16) {        format=ImageDataFormat.LuminanceAlpha;      } else {        format=ImageDataFormat.Luminance;      }    }    type=PixelDataType.UnsignedByte;  }  if (byteBuffer == null) {    throw new IllegalArgumentException("Unable to convert Raster with DataBuffer of " + dataBuffer.getClass().getName() + " to Ardor3D Image");  }  byteBuffer.rewind();  Image theImage=null;  ArrayList<ByteBuffer> list=new ArrayList<ByteBuffer>(1);  list.add(byteBuffer);  theImage=new Image(format,type,width,height,list,null);  return (theImage);}  }
class C{  public void attemptFontSelection(){  FontChooserPanel panel=new FontChooserPanel(this.titleFont);  int result=JOptionPane.showConfirmDialog(this,panel,localizationResources.getString("Font_Selection"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);  if (result == JOptionPane.OK_OPTION) {    this.titleFont=panel.getSelectedFont();    this.fontfield.setText(this.titleFont.getFontName() + " " + this.titleFont.getSize());  }}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getFeedItemDao() : null;}  }
class C{  public RaceGUI(String appName){  UIManager.put("swing.boldMetal",Boolean.FALSE);  JFrame f=new JFrame(appName);  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setLayout(new BorderLayout());  track=new TrackView();  f.add(track,BorderLayout.CENTER);  controlPanel=new RaceControlPanel();  f.add(controlPanel,BorderLayout.SOUTH);  f.pack();  f.setVisible(true);}  }
class C{  private boolean apply0(final UUID uuid,final Event evt){  if (!ctx.isEventTypeSupported(evt.type()))   return false;  if (types != null) {    boolean match=false;    for (    int type : types) {      if (type == evt.type()) {        match=true;        break;      }    }    if (!match)     return false;  }  try (PlatformMemory mem=ctx.memory().allocate()){    PlatformOutputStream out=mem.output();    BinaryRawWriterEx writer=ctx.writer(out);    ctx.writeEvent(writer,evt);    writer.writeUuid(uuid);    out.synchronize();    int res=ctx.gateway().eventFilterApply(hnd,mem.pointer());    return res != 0;  } }  }
class C{  @Override public String toString(){  if (getTemplateCall() != null) {    return SPINLabels.get().getLabel(getTemplateCall());  } else {    return SPINLabels.get().getLabel(getQuery());  }}  }
class C{  public static void start(GridField gridField){  new WFieldRecordInfo(gridField.getColumnName(),gridField.getGridTab().getAD_Table_ID(),gridField.getAD_Column_ID(),gridField.getGridTab().getRecord_ID());}  }
class C{  private void free(LocalCandidate localCandidate){  try {    localCandidate.free();  } catch (  Throwable t) {    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;    if (logger.isLoggable(Level.INFO)) {      logger.log(Level.INFO,"Failed to free LocalCandidate: " + localCandidate);    }  }}  }
class C{  public int numParameters(){  return info[0] & 0xff;}  }
class C{  protected Debug_Impl(){  super();}  }
class C{  @Override public List<T> next(){  currentIndex++;  for (int i=1; i <= lengthK; i++) {    int index=bitVector[i] - 1;    if (generator.originalVector.size() > 0) {      setValue(currentSimpleCombination,i - 1,generator.originalVector.get(index));    }  }  endIndex=lengthK;  while (bitVector[endIndex] == lengthN - lengthK + endIndex) {    endIndex--;    if (endIndex == 0)     break;  }  bitVector[endIndex]++;  for (int i=endIndex + 1; i <= lengthK; i++) {    bitVector[i]=bitVector[i - 1] + 1;  }  return new ArrayList<>(currentSimpleCombination);}  }
class C{  public FixedBitSet(long[] storedBits,int numBits){  this.numWords=bits2words(numBits);  if (numWords > storedBits.length) {    throw new IllegalArgumentException("The given long array is too small  to hold " + numBits + " bits");  }  this.numBits=numBits;  this.bits=storedBits;  assert verifyGhostBitsClear();}  }
class C{  public boolean decodeExtensionMedia(int startIndex){  int index=startIndex;  dataLength=0;  stringValue=null;  int length=wspData.length;  boolean rtrn=index < length;  while (index < length && wspData[index] != 0) {    index++;  }  dataLength=index - startIndex + 1;  stringValue=new String(wspData,startIndex,dataLength - 1);  return rtrn;}  }
class C{  private static String definitionListToHtml(DefinitionList dl){  if (dl == null) {    return "null";  }  StringBuilder result=new StringBuilder();  result.append("<table class=\"DefinitionList\">\n" + "<tr><th class=\"DefinitionList\">DefinitionList</th></tr>\n" + "<tr><td class=\"DefinitionList\">");  if (dl.getDefinedTerm() != null) {    result.append(contentElementToHtml(dl.getDefinedTerm()) + "\n");  }  result.append("<ul>");  for (  ContentElement ce : dl.getDefinitions()) {    result.append("<li>" + contentElementToHtml(ce) + "</li>");  }  result.append("</ul>\n");  result.append("</td></tr>\n");  result.append("</table>\n");  return result.toString();}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!mutate) {    declaration=new org.apache.flex.forks.batik.css.engine.StyleDeclaration();  }}  }
class C{  protected boolean verifySignature(HttpServletRequest req,SignatureKeyType type){  StringBuilder buf=new StringBuilder(req.getRequestURL().toString().toLowerCase());  if (req.getQueryString() != null) {    buf.append("?" + req.getQueryString().toLowerCase());  }  String timestamp=req.getHeader(INTERNODE_TIMESTAMP);  if (timestamp != null && !timestamp.isEmpty()) {    buf.append(req.getHeader(INTERNODE_TIMESTAMP));  } else {    return false;  }  _log.debug("buf: " + buf.toString());  String headerSignature=req.getHeader(INTERNODE_HMAC);  if (!trySignature(buf.toString(),headerSignature,type)) {    _log.info("Failed with signature key type {}. Reloading cached keys and trying again",type.toString());    _keyGenerator.loadKeys();    return trySignature(buf.toString(),headerSignature,type);  }  return true;}  }
class C{  protected int read() throws IOException {  if (offset == buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    return buffer[offset++] & 0xFF;  } else {    int octet=in.read();    if (octet == -1) {      throw new ASN1Exception("Unexpected end of encoding");    }    buffer[offset++]=(byte)octet;    return octet;  }}  }
class C{  public TColor saturate(float step){  return setSaturation(hsv[1] + step);}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  Seg<K,V>[] segs=this.segs;  int[] mc=new int[segs.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    int mcsum=0;    for (int i=0; i < segs.length; ++i) {      mcsum+=mc[i]=segs[i].modCnt;      if (segs[i].containsValue(value)) {        return true;      }    }    boolean cleanSweep=true;    if (mcsum != 0) {      for (int i=0; i < segs.length; ++i) {        if (mc[i] != segs[i].modCnt) {          cleanSweep=false;          break;        }      }    }    if (cleanSweep)     return false;  }  for (int i=0; i < segs.length; ++i) {    segs[i].lock();  }  boolean found=false;  try {    for (int i=0; i < segs.length; ++i) {      if (segs[i].containsValue(value)) {        found=true;        break;      }    }  }  finally {    for (int i=0; i < segs.length; ++i) {      segs[i].unlock();    }  }  return found;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void removeTreeModelListener(TreeModelListener l){}  }
class C{  public void append(StringBuffer buffer,String fieldName,char value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public void showTable(){  if (tableFrame == null) {    String tableTitle=(this.name != null) ? this.name : "";    tableFrame=new JFrame(tableTitle + " Shape Data Attributes");    JScrollPane pane=new JScrollPane(getTable(),JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);    tableFrame.getContentPane().add(pane,BorderLayout.CENTER);    tableFrame.setSize(400,300);  }  tableFrame.setVisible(true);  tableFrame.toFront();}  }
class C{  @CanIgnoreReturnValue @Override public boolean put(@Nullable K key,@Nullable V value){  addNode(key,value,null);  return true;}  }
class C{  public static boolean isFalsish(String value){  return value != null && ("false".equals(value) || "off".equals(value) || "no".equals(value)|| "0".equals(value));}  }
class C{  public void addPair(String var,double val){  map.put(var,ValueFactory.create(val));  cachedHash=0;}  }
class C{  static UnidirectionalFrame frameFromCode(final int value){  return values()[value];}  }
class C{  public void insertNode(int n,int pos){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  insertElementAt(n,pos);}  }
class C{  public String readConfigName(SolrZkClient zkClient,String collection) throws KeeperException, InterruptedException {  if (collection == null) {    throw new IllegalArgumentException("collection must not be null");  }  String configName=null;  collection=checkForAlias(zkClient,collection);  String path=ZkStateReader.COLLECTIONS_ZKNODE + "/" + collection;  if (LOG.isInfoEnabled()) {    LOG.info("Load collection config from:" + path);  }  byte[] data=zkClient.getData(path,null,null,true);  if (data != null) {    ZkNodeProps props=ZkNodeProps.load(data);    configName=props.getStr(ZkController.CONFIGNAME_PROP);  }  if (configName != null && !zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + "/" + configName,true)) {    LOG.error("Specified config does not exist in ZooKeeper:" + configName);    throw new IllegalArgumentException("Specified config does not exist in ZooKeeper:" + configName);  }  return configName;}  }
class C{  public Set<String> api_descriptors(Method m){  Set<String> apid=new LinkedHashSet<String>();  apid.addAll(m.getPermissions());  String cname=m.getCname();  String sig=m.getSignature();  if (cname.startsWith("java")) {    if (cname.contains("reflect"))     apid.add("java.reflection"); else     if (cname.contains(".io") || cname.contains(".nio"))     apid.add("java.io"); else     if (cname.contains(".net"))     apid.add("java.net"); else     if (cname.contains(".rmi"))     apid.add("java.rmi"); else     if (cname.contains("Thread") || cname.contains("Runnable") || (cname.contains("Process")))     apid.add("java.thread"); else     if (cname.contains("Loader"))     apid.add("java.classloader");  } else   if (cname.startsWith("android")) {    if (sig.contains("Intent"))     apid.add("android.intent");    if (cname.contains("opengl"))     apid.add("android.gui");  }  if (apid.size() == 0)   apid.add("misc");  return apid;}  }
class C{  public void mouseLiberalClick(MouseEvent e){}  }
class C{  public void replaceChild(Element oldChild,Element newChild){  if (children != null) {    setChildParent(newChild);    int index=children.indexOf(oldChild);    if (index != -1) {      children.add(index,newChild);      removeChildAt(index + 1);      return;    }  }  throw new IllegalArgumentException("The oldChild element specified must be this element's child");}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writePaint(this.backgroundPaint,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writeStroke(this.outlineStroke,stream);}  }
class C{  public static Lint instance(Context context){  Lint instance=context.get(lintKey);  if (instance == null)   instance=new Lint(context);  return instance;}  }
class C{  public HeapRowIterator(final String table,final String whereColumn,final byte[] whereValue) throws IOException {  assert whereColumn != null || whereValue == null;  this.whereColumn=whereColumn;  this.whereValue=whereValue;  this.wherePattern=null;  final BEncodedHeap heap=getHeap(table);  this.i=heap.iterator();}  }
class C{  public TargetInformation(Target[] targets){  this(new Targets(targets));}  }
class C{  public FlexSharedObjectMessage(String name,int version,boolean persistent){  this(null,name,version,persistent);}  }
class C{  public String finish(){  return null;}  }
class C{  public void addMouseListener(MouseListener l){}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getHitShape().contains(p);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.bounds,stream);}  }
class C{  public synchronized void sendIgnorePacket() throws IOException {  SecureRandom rnd=getOrCreateSecureRND();  byte[] data=new byte[rnd.nextInt(16)];  rnd.nextBytes(data);  sendIgnorePacket(data);}  }
class C{  private static String generateXMLString(Operation operation,Map<String,Object> attributeMap) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, ClassNotFoundException, NoSuchMethodException, SecurityException {  StringBuilder xmlNodeWithAttributes=new StringBuilder(XMLConstants.XMl_START_ELEMENT);  List<String> sequenceList=Arrays.asList(operation.getXmlElementSequence().split(XMLConstants.COMMA_OPERATOR));  Class noparams[]={};  LinkedList<String> xmlNodesToClose=new LinkedList<String>();  List<String> preClosedXMLNodes=new ArrayList<String>();  Map<String,XmlElementSequenceAttribute> elementAttributes=getElementProperites(operation.getXmlElementSequenceAttributeList());  Iterator<String> sequenceItr=sequenceList.iterator();  while (sequenceItr.hasNext()) {    String elementName=sequenceItr.next().toString();    if (elementAttributes.containsKey(elementName)) {      XmlElementSequenceAttribute sequenceAttrs=elementAttributes.get(elementName);      if (null != sequenceAttrs.getModel()) {        String type=sequenceAttrs.getType();        String model=sequenceAttrs.getModel();        String elementKey=(null == type) ? elementName : elementName + XMLConstants.UNDERSCORE_OP + type;        if (attributeMap.containsKey(elementKey)) {          log.debug("Found key {} in map",elementKey);          Object modelValue=attributeMap.get(elementKey);          if (modelValue instanceof List) {            List<Object> elementList=(List<Object>)modelValue;            if (null != elementList && !elementList.isEmpty()) {              for (              Object object : elementList) {                log.debug("list instance : {} object: {}",elementName,object);                xmlNodeWithAttributes.append(XMLConstants.LESS_THAN_OP).append(elementName);                Class cls=Class.forName(model);                Method method=cls.getDeclaredMethod(XMLConstants.METHOD_TO_INVOKE,noparams);                Object output=method.invoke(object,null);                xmlNodeWithAttributes.append(XMLConstants.SPACE).append(output.toString()).append(XMLConstants.GREATER_THAN_OP);                log.debug("getChildExists: {}",sequenceAttrs.getChildExists());                if (null != sequenceAttrs.getChildExists() && sequenceAttrs.getChildExists()) {                  String childNodeStr=processIfChildNodesExists(cls,object,noparams,elementName);                  if (null != childNodeStr && !childNodeStr.isEmpty()) {                    xmlNodeWithAttributes.append(childNodeStr);                  }                }                xmlNodeWithAttributes.append(XMLConstants.XML_CLOSING_START_TAG).append(elementName).append(XMLConstants.GREATER_THAN_OP);              }            }          } else {            log.debug("no list: {}",elementName);            xmlNodeWithAttributes.append(XMLConstants.LESS_THAN_OP).append(elementName);            Class cls=Class.forName(model);            Method method=cls.getDeclaredMethod(XMLConstants.METHOD_TO_INVOKE,noparams);            Object output=method.invoke(modelValue,null);            log.debug("object : {}",output);            xmlNodeWithAttributes.append(XMLConstants.SPACE).append(output.toString()).append(XMLConstants.GREATER_THAN_OP);            xmlNodesToClose.addFirst(elementName);          }        }      }      if (null != sequenceAttrs.getProperties() && !sequenceAttrs.getProperties().isEmpty()) {        log.debug("Found properties for element name: {}",elementName);        xmlNodeWithAttributes.append(XMLConstants.LESS_THAN_OP).append(elementName);        String attributeNames[]=sequenceAttrs.getProperties().split(XMLConstants.COMMA_OPERATOR);        int count=0;        for (        String attributeName : attributeNames) {          String attributeValue=null;          if (null != sequenceAttrs.getValues()) {            String defaultValuesFromXML[]=sequenceAttrs.getValues().split(XMLConstants.COMMA_OPERATOR);            if (null != defaultValuesFromXML[count]) {              attributeValue=defaultValuesFromXML[count];              count++;            }          }          if (null == attributeValue) {            attributeValue=attributeMap.get(elementName + XMLConstants.UNDERSCORE_OP + attributeName).toString();          }          if (null != attributeValue && attributeValue.length() > 0) {            xmlNodeWithAttributes.append(" ").append(attributeName + XMLConstants.EQUAL_OP + "\""+ attributeValue+ "\" ");          }        }      }      if (operation.getXmlElementsToClose().contains(elementName)) {        preClosedXMLNodes.add(elementName);        xmlNodeWithAttributes.append(XMLConstants.XML_CLOSING_TAG);      }    } else {      if (operation.getXmlElementsToClose().contains(elementName)) {        log.debug("pre closed element: {}",elementName);        xmlNodeWithAttributes.append(XMLConstants.LESS_THAN_OP).append(elementName).append(XMLConstants.XML_CLOSING_TAG);        preClosedXMLNodes.add(elementName);      } else {        log.debug("No sequence element found. hence adding: {}",elementName);        xmlNodeWithAttributes.append(XMLConstants.LESS_THAN_OP).append(elementName).append(XMLConstants.GREATER_THAN_OP);        xmlNodesToClose.addFirst(elementName);      }    }  }  if (null != xmlNodesToClose && !xmlNodesToClose.isEmpty()) {    for (    String xmlNodeToClose : xmlNodesToClose) {      if (!preClosedXMLNodes.contains(xmlNodeToClose)) {        log.debug("Closing {} element tag",xmlNodeToClose);        xmlNodeWithAttributes.append("</").append(xmlNodeToClose).append(XMLConstants.GREATER_THAN_OP);      }    }  }  return xmlNodeWithAttributes.toString();}  }
class C{  public void putListPropertyType(String property,Class<? extends Object> type){  listProperties.put(property,type);}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){  RepaintManager.currentManager(SunToolkit.targetToAppContext(this)).addDirtyRegion(this,x,y,width,height);}  }
class C{  private void parseParameters(String parameters){  if (HttpLog.LOGV) {    HttpLog.v("HttpAuthHeader.parseParameters():" + " parameters: " + parameters);  }  if (parameters != null) {    int i;    do {      i=parameters.indexOf(',');      if (i < 0) {        parseParameter(parameters);      } else {        parseParameter(parameters.substring(0,i));        parameters=parameters.substring(i + 1);      }    } while (i >= 0);  }}  }
class C{  public DistributionLocatorJmxImpl(DistributionLocatorConfig config,AdminDistributedSystemImpl system){  super(config,system);  initializeMBean();}  }
class C{  public boolean isNulled(){  return nulled;}  }
class C{  public static ApmOverlay INSTANCE(){  return INSTANCE.get();}  }
class C{  public void addListener(MapDownloadListener listener){  if (!mapDownloadListeners.contains(listener))   this.mapDownloadListeners.add(listener);}  }
class C{  final synchronized public Object clone(){  SnmpCounter64 newclone=null;  try {    newclone=(SnmpCounter64)super.clone();    newclone.value=value;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }  return newclone;}  }
class C{  public static IP MAX_IP(){  return new IP(0xffffffffL);}  }
class C{  private static void linearize_internal(double[] linearArray,Object array,int[] lengths,int[] currIndices){  if (array.getClass().equals(double[].class)) {    int[] doubleArrayIndices=new int[currIndices.length + 1];    System.arraycopy(currIndices,0,doubleArrayIndices,0,currIndices.length);    double[] doubleArray=(double[])array;    for (int i=0; i < doubleArray.length; i++) {      doubleArrayIndices[doubleArrayIndices.length - 1]=i;      int linearIndex=multidimensionalIndicesToLinearIndex(lengths,doubleArrayIndices);      linearArray[linearIndex]=doubleArray[i];    }  } else {    int arrayLength=Array.getLength(array);    for (int i=0; i < arrayLength; i++) {      int[] nextIndices=new int[currIndices.length + 1];      System.arraycopy(currIndices,0,nextIndices,0,currIndices.length);      nextIndices[nextIndices.length - 1]=i;      linearize_internal(linearArray,Array.get(array,i),lengths,nextIndices);    }  }}  }
class C{  public static List read(InStream in) throws IOException {  List records=new ArrayList();  int firstByte=0;  while ((firstByte=in.readUI8()) != 0) {    records.add(new ButtonRecord(in,firstByte));  }  return records;}  }
class C{  public boolean isXFAObject(){  return isXFAObject;}  }
class C{  public void logTrace(Object message,Throwable exception){  logInternal(TRACE,message,exception);}  }
class C{  private void drawAdditionalItemLabel(Graphics2D g2,PlotOrientation orientation,XYDataset dataset,int series,int item,double x,double y){  if (this.additionalItemLabelGenerator == null) {    return;  }  Font labelFont=getItemLabelFont(series,item);  Paint paint=getItemLabelPaint(series,item);  g2.setFont(labelFont);  g2.setPaint(paint);  String label=this.additionalItemLabelGenerator.generateLabel(dataset,series,item);  ItemLabelPosition position=getNegativeItemLabelPosition(series,item);  Point2D anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),x,y,orientation);  TextUtilities.drawRotatedString(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());}  }
class C{  private List<FahrzeitEvent> addFahrtInfoToFahrzeitEvents(List<FahrtEvent> fahrtEvents,List<FahrzeitEvent> fahrzeitEvents,boolean keepFahrzeitEventsWithoutFahrtEvent){  List<FahrzeitEvent> fahrzeitEventsOut=new LinkedList<FahrzeitEvent>();  Map<String,FahrtEvent> rblDateKursDateTimeIst2FahrtEventMap=new HashMap<String,FahrtEvent>();  Set<String> searchStrings=new TreeSet<String>();  for (  FahrtEvent fahrtEvent : fahrtEvents) {    String searchId=String.valueOf(fahrtEvent.getRblDate()) + String.valueOf(fahrtEvent.getKurs()) + fahrtEvent.getDepartureDateIst()+ fahrtEvent.getDepartureTimeIst();    if (searchStrings.contains(searchId)) {      log.warn("Search string already exists. This should not happen. " + searchId);    } else {      searchStrings.add(searchId);      rblDateKursDateTimeIst2FahrtEventMap.put(searchId,fahrtEvent);    }  }  int numberOfMissingFahrtEvents=0;  for (  FahrzeitEvent fahrzeitEvent : fahrzeitEvents) {    String searchId=String.valueOf(fahrzeitEvent.getRblDate()) + String.valueOf(fahrzeitEvent.getKurs()) + fahrzeitEvent.getDepartureDateIst()+ fahrzeitEvent.getDepartureTimeIst();    FahrtEvent fahrtEvent=rblDateKursDateTimeIst2FahrtEventMap.get(searchId);    if (fahrtEvent == null) {      numberOfMissingFahrtEvents++;      if (keepFahrzeitEventsWithoutFahrtEvent) {        fahrzeitEventsOut.add(fahrzeitEvent);      }    } else {      fahrzeitEvent.add(fahrtEvent);      fahrzeitEventsOut.add(fahrzeitEvent);    }  }  log.info(numberOfMissingFahrtEvents + " fahrzeit events could not be linked to a fahrt event");  log.info("Returning " + fahrzeitEventsOut.size() + " fahrzeitEvents");  return fahrzeitEventsOut;}  }
class C{  public boolean isParameterGoal(){  return goalDefinition == null;}  }
class C{  private void processHost(StorageSystem system,VNXeApiClient apiClient,DbClient dbClient,String hostIdStr){  Set<String> systemIds=new HashSet<String>();  systemIds.add(system.getId().toString());  try {    Host host=dbClient.queryObject(Host.class,URI.create(hostIdStr));    if (host != null && !host.getInactive()) {      Map<String,String> preferredPoolURIs=getPreferredPoolMap(system,host.getId(),apiClient,dbClient);      if (ArrayAffinityDiscoveryUtils.updatePreferredPools(host,systemIds,dbClient,preferredPoolURIs)) {        dbClient.updateObject(host);      }    }  } catch (  Exception e) {    logger.warn("Exception on updatePreferredSystem",e);  }}  }
class C{  private void startVpn(){  try {    JSONObject vpnData=new JSONObject(payload);    if (!vpnData.isNull(resources.getString(R.string.intent_extra_server))) {      serverAddress=(String)vpnData.get(resources.getString(R.string.intent_extra_server));    }    if (!vpnData.isNull(resources.getString(R.string.intent_extra_server_port))) {      serverPort=(String)vpnData.get(resources.getString(R.string.intent_extra_server_port));    }    if (!vpnData.isNull(resources.getString(R.string.intent_extra_shared_secret))) {      sharedSecret=(String)vpnData.get(resources.getString(R.string.intent_extra_shared_secret));    }    if (!vpnData.isNull(resources.getString(R.string.intent_extra_dns))) {      dnsServer=(String)vpnData.get(resources.getString(R.string.intent_extra_dns));    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid VPN payload " + e);  }  Intent intent=VpnService.prepare(this);  if (intent != null) {    startActivityForResult(intent,VPN_REQUEST_CODE);  } else {    onActivityResult(VPN_REQUEST_CODE,RESULT_OK,null);  }}  }
class C{  @Override public String toString(){  return Double.toString(value) + "D";}  }
class C{  public void printWordType(final PrintWriter writer,final String type){  for (  Map.Entry<String,WordEntry> it : words.entrySet()) {    final WordEntry entry=it.getValue();    boolean matches;    if (type == null) {      matches=entry.getType() == null;    } else {      matches=entry.getTypeString().startsWith(type) && !entry.isPlural();    }    if (matches) {      entry.print(writer,it.getKey());      writer.println();    }  }}  }
class C{  public Boolean isSupportsPvscsiControllerForBoot(){  return supportsPvscsiControllerForBoot;}  }
class C{  public void initDefaultVisibility(boolean vis){  visible=vis;  default_visibility=vis;}  }
class C{  public void updateAll(){  updateExecutionMark();  model.updateChanged();  for (  RegisterPanel rp : registerPanels) {    rp.update();  }  for (  IGuiModule mod : modules) {    mod.updateAll();  }  jCheckCarry.setSelected(data.fCarry);  jCheckAuxiliary.setSelected(data.fAuxiliary);  jCheckZero.setSelected(data.fZero);  jCheckSign.setSelected(data.fSign);  jCheckDirection.setSelected(data.fDirection);  jCheckTrap.setSelected(data.fTrap);  jCheckParity.setSelected(data.fParity);  jCheckOverflow.setSelected(data.fOverflow);  fpuPanel.update();}  }
class C{  @Override public boolean filterResult(long resultNode,SmallArrayBasedLongToDoubleMap[] socialProofs){  long bits=resultNode & TweetIDMask.METAMASK;  boolean keep=(tweet && (bits == TweetIDMask.TWEET)) || (summary && (bits == TweetIDMask.SUMMARY)) || (photo && (bits == TweetIDMask.PHOTO))|| (player && (bits == TweetIDMask.PLAYER))|| (promotion && (bits == TweetIDMask.PROMOTION));  return !keep;}  }
class C{  public boolean isApplyBackgroundColor(){  return mApplyBackgroundColor;}  }
class C{  public MockClock incrementByMilliseconds(long miliseconds){  return incrementByMicroseconds(1000 * miliseconds);}  }
class C{  final public boolean isLeaf(){  return true;}  }
class C{  public void executeBusinessRule(String mToken){  if (mToken != null && mToken.length() > 0) {    Log.d(REGISTRATION_DEBUG,"Current token: " + mToken);    MainActivity.updateCredentials(mToken);  }}  }
class C{  public static int showInternalOptionDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon,Object[] options,Object initialValue){  JOptionPane pane=new JOptionPane(message,messageType,optionType,icon,options,initialValue);  pane.putClientProperty(PopupFactory_FORCE_HEAVYWEIGHT_POPUP,Boolean.TRUE);  Component fo=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  pane.setInitialValue(initialValue);  JInternalFrame dialog=pane.createInternalFrame(parentComponent,title);  pane.selectInitialValue();  dialog.setVisible(true);  if (dialog.isVisible() && !dialog.isShowing()) {    Container parent=dialog.getParent();    while (parent != null) {      if (parent.isVisible() == false) {        parent.setVisible(true);      }      parent=parent.getParent();    }  }  try {    Method method=AccessController.doPrivileged(new ModalPrivilegedAction(Container.class,"startLWModal"));    if (method != null) {      method.invoke(dialog,(Object[])null);    }  } catch (  IllegalAccessException ex) {  }catch (  IllegalArgumentException ex) {  }catch (  InvocationTargetException ex) {  }  if (parentComponent instanceof JInternalFrame) {    try {      ((JInternalFrame)parentComponent).setSelected(true);    } catch (    java.beans.PropertyVetoException e) {    }  }  Object selectedValue=pane.getValue();  if (fo != null && fo.isShowing()) {    fo.requestFocus();  }  if (selectedValue == null) {    return CLOSED_OPTION;  }  if (options == null) {    if (selectedValue instanceof Integer) {      return ((Integer)selectedValue).intValue();    }    return CLOSED_OPTION;  }  for (int counter=0, maxCounter=options.length; counter < maxCounter; counter++) {    if (options[counter].equals(selectedValue)) {      return counter;    }  }  return CLOSED_OPTION;}  }
class C{  private PrincipalId updatePersonUserDetail(String tenantName,String accountName,PersonDetail detail) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"tenantName");    ServerUtils.validateNotEmptyUsername(accountName);    ValidateUtil.validateNotNull(detail,"user detail");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    return provider.updatePersonUserDetail(accountName,detail);  } catch (  Exception ex) {    logger.error(String.format("Failed to update user [%s] in tenant [%s]",accountName,tenantName));    throw ex;  }}  }
class C{  public List<RelatedResourceRep> listByCluster(URI clusterId){  UnManagedExportMaskList response=client.get(UnManagedExportMaskList.class,PathConstants.UNMANAGED_EXPORTS_BY_CLUSTER_URL,clusterId);  return ResourceUtils.defaultList(response.getUnManagedExportMasks());}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putString(LOG_TEXT_KEY,Html.toHtml((Spanned)mLogTextView.getText()));}  }
class C{  public void close(){  flush();  writeln("</java>");  try {    out.close();  } catch (  IOException e) {    getExceptionListener().exceptionThrown(e);  }}  }
class C{  @Override public ServiceExceptionIllegalState rethrow(String msg){  return new ServiceExceptionIllegalState(msg,this);}  }
class C{  public DKeyUsage(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DKeyUsage.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public DeadEvent(Object source,Object event){  this.source=checkNotNull(source);  this.event=checkNotNull(event);}  }
class C{  private SelectResults doubleBaseCollectionFilterEvaluate(ExecutionContext context,SelectResults intermediateResults,boolean completeExpansionNeeded,CompiledValue iterOperands,IndexInfo[] indxInfo,RuntimeIterator[] indpdntItrs) throws TypeMismatchException, AmbiguousNameException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  QueryObserver observer=QueryObserverHolder.getInstance();  context.cachePut(CompiledValue.INDEX_INFO,indxInfo);  if ((intermediateResults == null || intermediateResults.isEmpty()) && (indpdntItrs != null || completeExpansionNeeded)) {    Support.Assert(this._operator == TOK_EQ,"A relationship index is not usable for any condition other than equality");    List data=null;    try {      observer.beforeIndexLookup(indxInfo[0]._index,this._operator,null);      observer.beforeIndexLookup(indxInfo[1]._index,this._operator,null);      if (context.getBucketList() != null) {        data=QueryUtils.queryEquijoinConditionBucketIndexes(indxInfo,context);      } else {        data=indxInfo[0]._index.queryEquijoinCondition(indxInfo[1]._index,context);      }    }  finally {      observer.afterIndexLookup(data);    }    return QueryUtils.getconditionedRelationshipIndexResultsExpandedToTopOrCGJLevel(data,indxInfo,context,completeExpansionNeeded,iterOperands,indpdntItrs);  } else {    return QueryUtils.getRelationshipIndexResultsMergedWithIntermediateResults(intermediateResults,indxInfo,context,completeExpansionNeeded,iterOperands,indpdntItrs);  }}  }
class C{  public static final int binarySearch(int[] a,int key){  int x1=0;  int x2=a.length;  int i=x2 / 2;  while (x1 < x2) {    if (a[i] == key) {      return i;    } else     if (a[i] < key) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public String toString(){  return getClass().getName() + "[field=" + field+ ",attribute="+ attribute+ ",beginIndex="+ beginIndex+ ",endIndex="+ endIndex+ ']';}  }
class C{  public String numClustersTipText(){  return "The number of clusters to generate.";}  }
class C{  public static int toIntFromNibbles(byte[] nibbles,int start){  return toInt(nibbles[start],nibbles[start + 1],nibbles[start + 2],nibbles[start + 3],nibbles[start + 4],nibbles[start + 5],nibbles[start + 6],nibbles[start + 7]);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  protected static void printRepositoryPackageInfo(String packageName,String version) throws Exception {  Map<?,?> packageProps=getRepositoryPackageInfo(packageName,version).getPackageMetaData();  printPackageInfo(packageProps);}  }
class C{  public void test_getPublicExponent() throws Exception {  KeyFactory gen=KeyFactory.getInstance("RSA");  final BigInteger n=BigInteger.valueOf(3233);  final BigInteger e=BigInteger.valueOf(17);  RSAPublicKey key=(RSAPublicKey)gen.generatePublic(new RSAPublicKeySpec(n,e));  assertEquals("invalid public exponent",e,key.getPublicExponent());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.798 -0500",hash_original_method="294B6DEE36941009B0B201B0BEC2DD67",hash_generated_method="7C91D3CE551988D4DFA74FC99CD84DC2") public TwoKeyHashMap(){  this(DEFAULT_INITIAL_SIZE,DEFAULT_LOAD_FACTOR);}  }
class C{  public ChangeCorrectionProposal(String name,Change change,int relevance){  this(name,change,relevance,JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE));}  }
class C{  public void testReloadEvictionPartitionedCacheNearEnabled() throws Exception {  cacheMode=PARTITIONED;  doTest();}  }
class C{  public UserPreviewHolder(UserPreview userPreview){  super(userPreview);  this.userPreview=userPreview;}  }
class C{  public synchronized void add(double x,double y,double value){  super.add(x,y);  mValue.add(value);  updateRange(value);}  }
class C{  public boolean isZoomXEnabled(){  return mZoomXEnabled;}  }
class C{  public void dispose(){  super.dispose();  mSymbolBroadcaster.dispose();  mControlMessageFramer.dispose();  if (mDCRemovalFilter != null) {    mDCRemovalFilter.dispose();  }  mFSKDecoder.dispose();  mDecimationFilter.dispose();  mLowPassFilter.dispose();  mMessageProcessor.dispose();  mTrafficMessageFramer.dispose();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static boolean compareFloats(float a,float b){  if (Float.isNaN(a) && Float.isNaN(b))   return true;  if (!Float.isInfinite(a) && !Float.isInfinite(b))   return Math.abs(a - b) <= EPSILON;  return a == b;}  }
class C{  public boolean delete(String videoId){  return dbHelper.getWritableDatabase().delete(tableName,YouTubeVideoEntry.COLUMN_VIDEO_ID + "='" + videoId+ "'",null) > 0;}  }
class C{  @SuppressWarnings("unchecked") TypeToken(Type type){  this.type=$Type$Types.canonicalize($Type$Preconditions.checkNotNull(type));  this.rawType=(Class<? super T>)$Type$Types.getRawType(this.type);  this.hashCode=this.type.hashCode();}  }
class C{  void changedEntry(java.beans.PropertyChangeEvent e){  log.debug("changedEntry");  forceWrite();}  }
class C{  public static void print(double x){  out.print(x);  out.flush();}  }
class C{  int[] loadIntArray() throws IOException {  int n=loadInt();  if (n == 0)   return NOINTS;  int m=n << 2;  if (buf.length < m)   buf=new byte[m];  is.readFully(buf,0,m);  int[] array=new int[n];  for (int i=0, j=0; i < n; ++i, j+=4)   array[i]=luacLittleEndian ? (buf[j + 3] << 24) | ((0xff & buf[j + 2]) << 16) | ((0xff & buf[j + 1]) << 8)| (0xff & buf[j + 0]) : (buf[j + 0] << 24) | ((0xff & buf[j + 1]) << 16) | ((0xff & buf[j + 2]) << 8)| (0xff & buf[j + 3]);  return array;}  }
class C{  private void findMoviesByDirector(String director){  movies.stream().filter(null).map(null).forEach(null);}  }
class C{  public static int codePointAt(char[] seq,int index,int limit){  if (index < 0 || index >= limit || limit < 0 || limit > seq.length) {    throw new IndexOutOfBoundsException();  }  char high=seq[index++];  if (index >= limit) {    return high;  }  char low=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return high;}  }
class C{  protected void mergeGeometries(KMLMultiGeometry sourceMultiGeometry){  List<KMLAbstractGeometry> geometriesCopy=new ArrayList<KMLAbstractGeometry>(this.getGeometries().size());  Collections.copy(geometriesCopy,this.getGeometries());  for (  KMLAbstractGeometry sourceGeometry : sourceMultiGeometry.getGeometries()) {    String id=sourceGeometry.getId();    if (!WWUtil.isEmpty(id)) {      for (      KMLAbstractGeometry existingGeometry : geometriesCopy) {        String currentId=existingGeometry.getId();        if (!WWUtil.isEmpty(currentId) && currentId.equals(id)) {          this.getGeometries().remove(existingGeometry);        }      }    }    this.getGeometries().add(sourceGeometry);  }}  }
class C{  public ProxyRepository(String proxiedIdentity){  super();  this.setProxiedIdentity(proxiedIdentity);}  }
class C{  public static OTPUserRecord decomposeOtpUrl(String otpInfo){  OTPUserRecord otp=null;  Pattern pattern=Pattern.compile(OTP_URL_PATTERN);  Matcher matcher=pattern.matcher(otpInfo);  if (matcher.matches() && matcher.groupCount() == OTP_URL_GROUPS) {    String type=matcher.group(OTP_URL_TYPE);    String ident=matcher.group(OTP_URL_IDENT);    String secret=matcher.group(OTP_URL_SECRET);    otp=new OTPUserRecord();    otp.setType(OTPUserRecord.Type.valueOf(type.toUpperCase()));    otp.setIdentifier(ident);    otp.setSecret(secret);  }  return otp;}  }
class C{  private void applyLastDayOfMonth(Calendar cal,int month){  cal.set(Calendar.MONTH,month + 1);  cal.set(Calendar.DAY_OF_MONTH,1);  cal.add(Calendar.DAY_OF_MONTH,-1);}  }
class C{  public boolean isSPD(){  return isspd;}  }
class C{  protected void sequence_AnnotatedPropertyAssignment_PropertyNameValuePair(ISerializationContext context,PropertyNameValuePair semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public ClientSocket openIfLive(){  if (_state.isClosed()) {    return null;  }  ClientSocket stream=openRecycle();  if (stream != null)   return stream;  long now=CurrentTime.currentTime();  if (isFailed(now))   return null; else   if (_state == State.FAIL && _startingCount.get() > 0) {    return null;  }  return connect();}  }
class C{  public void reset(int rows,int cols){  rowData.clear();  for (int i=0; i < rows; i++) {    rowData.add(createNewRow(getDefaultValue(),cols));  }  fireTableStructureChanged();}  }
class C{  private boolean isNodeOfInterest(Derivation<TK,FV> node){  final int parentLength=node.parent == null ? 0 : node.parent.targetSequence.size();  final int length=node.targetSequence.size();  return parentLength <= prefixLength && (length > prefixLength || node.isDone());}  }
class C{  public List<Volume> validateVolumes(StorageSystem storageSystem,List<Volume> volumes,boolean delete,boolean remediate,ValCk... checks){  try {    client=VPlexControllerUtils.getVPlexAPIClient(VPlexApiFactory.getInstance(),storageSystem,getDbClient());    for (    Volume volume : volumes) {      try {        log.info(String.format("Validating %s (%s)(%s) checks %s",volume.getLabel(),volume.getNativeId(),volume.getId(),checks.toString()));        validateVolume(volume,delete,remediate,checks);      } catch (      Exception ex) {        log.error("Exception validating volume: " + volume.getId(),ex);      }    }  } catch (  Exception ex) {    log.error("Unexpected exception validating VPLEX: " + storageSystem.getId(),ex);  }  return remediatedVolumes;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Collection<Segment> segments(){  return segments.values();}  }
class C{  public final TextBuilder delete(int start,int end){  if ((start < 0) || (end < 0) || (start > end)|| (end > this.length()))   throw new IndexOutOfBoundsException();  for (int i=end, j=start; i < _length; ) {    this.setCharAt(j++,this.charAt(i++));  }  _length-=end - start;  return this;}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public Response deactivateExecutionWindow(@PathParam("id") URI id) throws DatabaseException {  ExecutionWindow executionWindow=queryResource(id);  ArgValidator.checkEntity(executionWindow,id,true);  executionWindowManager.deleteExecutionWindow(executionWindow);  auditOpSuccess(OperationTypeEnum.DELETE_EXECUTION_WINDOW,executionWindow.auditParameters());  return Response.ok().build();}  }
class C{  public Object readValue(TypeFactory.Type definition,MessageInputStream in) throws IOException {  if (definition.isOptional() && !in.readBit()) {    return null;  }  if (definition.isArray()) {    return readArray(definition,in);  } else   if (definition.isPrimitive()) {    return readPrimitive(definition,in);  } else {    return readStruct(definition,in);  }}  }
class C{  protected void init(final ResourceBundle bundle){  if (bundle == null) {    try {      Messages.setBundle(ResourceBundle.getBundle("org.jpedal.international.messages"));    } catch (    final Exception e) {      e.printStackTrace();      LogWriter.writeLog("Exception " + e + " loading resource bundle.\n"+ "Also check you have a file in org.jpedal.international.messages to support Locale="+ java.util.Locale.getDefault());    }  } else {    try {      Messages.setBundle(bundle);    } catch (    final Exception ee) {      LogWriter.writeLog("Exception with bundle " + bundle);      ee.printStackTrace();    }  }  decode_pdf.addExternalHandler(currentGUI,Options.MultiPageUpdate);  DecoderOptions.embedWidthData=true;  decode_pdf.setExtractionMode(0,1);  FontMappings.setFontReplacements();}  }
class C{  public TaskList detachFullCopy(URI sourceURI,URI fullCopyURI) throws InternalException {  s_logger.info("START detach full copy {}",fullCopyURI);  Volume fullCopy=(Volume)BlockFullCopyUtils.queryFullCopyResource(fullCopyURI,_uriInfo,false,_dbClient);  if (BlockFullCopyUtils.isFullCopyDetached(fullCopy,_dbClient)) {    s_logger.info("The full copy {} has been detached",fullCopyURI);    TaskList taskList=new TaskList();    String taskId=UUID.randomUUID().toString();    Operation op=new Operation();    op.setResourceType(ResourceOperationTypeEnum.DETACH_VOLUME_FULL_COPY);    op.ready("Full copy is already detached");    _dbClient.createTaskOpStatus(Volume.class,fullCopyURI,taskId,op);    TaskResourceRep task=TaskMapper.toTask(fullCopy,taskId,op);    taskList.addTask(task);    return taskList;  }  Map<URI,BlockObject> resourceMap=BlockFullCopyUtils.verifySourceAndFullCopy(sourceURI,fullCopyURI,_uriInfo,_dbClient);  BlockObject fcSourceObj=resourceMap.get(sourceURI);  Volume fullCopyVolume=(Volume)resourceMap.get(fullCopyURI);  boolean wasActive=(!BlockFullCopyUtils.isFullCopyDetached(fullCopyVolume,_dbClient) && !BlockFullCopyUtils.isFullCopyInactive(fullCopyVolume,_dbClient));  BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fullCopyVolume);  TaskList taskList=fullCopyApiImpl.detach(fcSourceObj,fullCopyVolume);  if (wasActive) {    auditOp(OperationTypeEnum.ACTIVATE_VOLUME_FULL_COPY,true,AuditLogManager.AUDITOP_BEGIN,fullCopyURI);  }  s_logger.info("FINISH detach full copy {}",fullCopyURI);  return taskList;}  }
class C{  public HessianException(String message){  super(message);}  }
class C{  public static String toString(byte[] byteArr){  Memory mem=new NativeMemory(byteArr);  return toString(mem);}  }
class C{  public boolean warn(){  return warnConnectivity;}  }
class C{  long length(){  return length;}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  int read(ByteBuffer buf,long pos) throws IOException {  int i=enter.getAndIncrement() & (chs.length - 1);  return chs[i].read(buf,pos);}  }
class C{  private boolean isUpgradable(SoftwareVersion currentVersion,SoftwareVersion targetVersion) throws Exception {  if (currentVersion.isNaturallySwitchableTo(targetVersion)) {    return true;  }  RemoteRepository repo=_upgradeManager.getRemoteRepository();  for (  SoftwareVersion v : repo.getUpgradeFromVersions(targetVersion)) {    if (v.weakEquals(currentVersion)) {      return true;    }  }  return false;}  }
class C{  public List<List<Integer>> verticalOrder(TreeNode root){  if (root == null) {    return Collections.emptyList();  }  List<List<Integer>> res=new ArrayList<>();  Map<Integer,List<Integer>> map=new HashMap<>();  int min=0;  int max=0;  Queue<TreeNode> queue=new LinkedList<>();  Queue<Integer> level=new LinkedList<>();  queue.add(root);  level.add(0);  while (!queue.isEmpty()) {    TreeNode node=queue.poll();    int curLvl=level.poll();    if (!map.containsKey(curLvl)) {      map.put(curLvl,new ArrayList<>());    }    map.get(curLvl).add(node.val);    if (node.left != null) {      queue.add(node.left);      level.add(curLvl - 1);      min=Math.min(min,curLvl - 1);    }    if (node.right != null) {      queue.add(node.right);      level.add(curLvl + 1);      max=Math.max(max,curLvl + 1);    }  }  for (int i=min; i <= max; i++) {    res.add(map.get(i));  }  return res;}  }
class C{  public DTMConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  public static boolean instanceofLongArray(Object o){  return getImplementation().instanceofLongArray(o);}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public static MosaicProperties createMosaicProperties(){  return createMosaicProperties(0L,3,null,null);}  }
class C{  synchronized void writeSampleData(final int trackIndex,final ByteBuffer byteBuf,final MediaCodec.BufferInfo bufferInfo){  if (mStatredCount > 0)   mMediaMuxer.writeSampleData(trackIndex,byteBuf,bufferInfo);}  }
class C{  public static Observable<Connectivity> observeNetworkConnectivity(final Context context){  final NetworkObservingStrategy strategy;  final boolean isAtLeastLollipop=Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;  if (isAtLeastLollipop) {    strategy=new LollipopNetworkObservingStrategy();  } else {    strategy=new PreLollipopNetworkObservingStrategy();  }  return observeNetworkConnectivity(context,strategy);}  }
class C{  public static <T>Collection<T> synchronizedCollection(Collection<T> collection){  if (collection == null) {    throw new NullPointerException("collection == null");  }  return new SynchronizedCollection<T>(collection);}  }
class C{  public Iterator<NameValue> iterator(){  return this.hmap.values().iterator();}  }
class C{  public InputStream openInputStream(final Request request,CrawlProfile profile,final int retryCount,final int maxFileSize,final BlacklistType blacklistType,final ClientIdentification.Agent agent) throws IOException {  if (retryCount < 0) {    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.TEMPORARY_NETWORK_FAILURE,"retry counter exceeded",-1);    throw new IOException("retry counter exceeded for URL " + request.url().toString() + ". Processing aborted.$");  }  DigestURL url=request.url();  final String host=url.getHost();  if (host == null || host.length() < 2) {    throw new IOException("host is not well-formed: '" + host + "'");  }  final String path=url.getFile();  int port=url.getPort();  final boolean ssl=url.getProtocol().equals("https");  if (port < 0)   port=(ssl) ? 443 : 80;  final String hostlow=host.toLowerCase();  if (blacklistType != null && Switchboard.urlBlacklist.isListed(blacklistType,hostlow,path)) {    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.FINAL_LOAD_CONTEXT,"url in blacklist",-1);    throw new IOException("CRAWLER Rejecting URL '" + request.url().toString() + "'. URL is in blacklist.$");  }  final AlternativeDomainNames yacyResolver=this.sb.peers;  if (yacyResolver != null) {    final String yAddress=yacyResolver.resolve(host);    if (yAddress != null) {      url=new DigestURL(url.getProtocol() + "://" + yAddress+ path);    }  }  final RequestHeader requestHeader=createRequestheader(request,agent);  final HTTPClient client=new HTTPClient(agent);  client.setRedirecting(false);  client.setTimout(this.socketTimeout);  client.setHeader(requestHeader.entrySet());  client.GET(url,false);  final StatusLine statusline=client.getHttpResponse().getStatusLine();  final int statusCode=statusline.getStatusCode();  final ResponseHeader responseHeader=new ResponseHeader(statusCode,client.getHttpResponse().getAllHeaders());  String requestURLString=request.url().toNormalform(true);  if (statusCode > 299 && statusCode < 310) {    client.finish();    final DigestURL redirectionUrl=extractRedirectURL(request,profile,url,statusline,responseHeader,requestURLString);    if (this.sb.getConfigBool(SwitchboardConstants.CRAWLER_FOLLOW_REDIRECTS,true)) {      if (profile != null && !CrawlSwitchboard.DEFAULT_PROFILES.contains(profile.name())) {        Request redirectedRequest=new Request(request.initiator(),redirectionUrl,request.referrerhash(),request.name(),request.appdate(),request.profileHandle(),request.depth(),request.timezoneOffset());        String rejectReason=this.sb.crawlStacker.stackCrawl(redirectedRequest);        if (rejectReason != null) {          throw new IOException("CRAWLER Redirect of URL=" + requestURLString + " aborted. Reason : "+ rejectReason);        }        throw new IOException("CRAWLER Redirect of URL=" + requestURLString + " to "+ redirectionUrl.toNormalform(false)+ " placed on crawler queue for double-check");      }      if (Thread.currentThread().isInterrupted()) {        this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.FINAL_LOAD_CONTEXT,"server shutdown",statusCode);        throw new IOException("CRAWLER Redirect of URL=" + requestURLString + " aborted because of server shutdown.$");      }      request.redirectURL(redirectionUrl);      return openInputStream(request,profile,retryCount - 1,maxFileSize,blacklistType,agent);    }    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.FINAL_PROCESS_CONTEXT,"redirection not wanted",statusCode);    throw new IOException("REJECTED UNWANTED REDIRECTION '" + statusline + "' for URL '"+ requestURLString+ "'$");  } else   if (statusCode == 200 || statusCode == 203) {    long contentLength=client.getHttpResponse().getEntity().getContentLength();    if (profile != null && profile.storeHTCache() && contentLength > 0 && contentLength < (Response.CRAWLER_MAX_SIZE_TO_CACHE) && !url.isLocal()) {      byte[] content=null;      try {        content=HTTPClient.getByteArray(client.getHttpResponse().getEntity(),maxFileSize);        Cache.store(url,responseHeader,content);      } catch (      final IOException e) {        this.log.warn("cannot write " + url + " to Cache (3): "+ e.getMessage(),e);      } finally {        client.finish();      }      return new ByteArrayInputStream(content);    }    return new HTTPInputStream(client);  } else {    client.finish();    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.TEMPORARY_NETWORK_FAILURE,"wrong http status code",statusCode);    throw new IOException("REJECTED WRONG STATUS TYPE '" + statusline + "' for URL '"+ requestURLString+ "'$");  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("[name=").append(this.name);  appendTo(sb,"displayName",this.displayName);  appendTo(sb,"shortDescription",this.shortDescription);  appendTo(sb,"preferred",this.preferred);  appendTo(sb,"hidden",this.hidden);  appendTo(sb,"expert",this.expert);  if ((this.table != null) && !this.table.isEmpty()) {    sb.append("; values={");    for (    Entry<String,Object> entry : this.table.entrySet()) {      sb.append(entry.getKey()).append("=").append(entry.getValue()).append("; ");    }    sb.setLength(sb.length() - 2);    sb.append("}");  }  appendTo(sb);  return sb.append("]").toString();}  }
class C{  protected Range findDomainBounds(XYDataset dataset,boolean includeInterval){  if (dataset == null) {    return null;  }  if (getDataBoundsIncludesVisibleSeriesOnly()) {    List visibleSeriesKeys=new ArrayList();    int seriesCount=dataset.getSeriesCount();    for (int s=0; s < seriesCount; s++) {      if (isSeriesVisible(s)) {        visibleSeriesKeys.add(dataset.getSeriesKey(s));      }    }    return DatasetUtilities.findDomainBounds(dataset,visibleSeriesKeys,includeInterval);  }  return DatasetUtilities.findDomainBounds(dataset,includeInterval);}  }
class C{  public String maximumAttributeNamesTipText(){  return "The maximum number of attributes to include in transformed attribute names.";}  }
class C{  @LargeTest public void testPreviewWithRenderPreviewFrameWithoutGenerate() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  boolean flagForException=false;  long duration=0;  OverlayData overlayData1=new OverlayData();  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem);  final SurfaceHolder surfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();  duration=mVideoEditor.getDuration();  try {    mVideoEditor.renderPreviewFrame(surfaceHolder,duration,overlayData1);  } catch (  IllegalStateException e) {    flagForException=true;  }  assertTrue(" Render Preview Frame without generate",flagForException);  duration=mVideoEditor.getDuration() + 1000;  try {    mVideoEditor.renderPreviewFrame(surfaceHolder,duration,overlayData1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue(" Preview time greater than duration",flagForException);}  }
class C{  public synchronized void paintComponent(final Graphics g){  if (paintLock)   return;  if (SwingUtilities.isEventDispatchThread())   setViewRect(port.getViewRect());  paintComponent(g,false);}  }
class C{  private void uninstallDefaults(){}  }
class C{  public boolean isSystemLanguage(){  Object oo=get_Value(COLUMNNAME_IsSystemLanguage);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void escape() throws IOException {  if (ScannerUtilities.isCSSHexadecimalCharacter((char)current)) {    nextChar();    if (!ScannerUtilities.isCSSHexadecimalCharacter((char)current)) {      if (ScannerUtilities.isCSSSpace((char)current)) {        nextChar();      }      return;    }    nextChar();    if (!ScannerUtilities.isCSSHexadecimalCharacter((char)current)) {      if (ScannerUtilities.isCSSSpace((char)current)) {        nextChar();      }      return;    }    nextChar();    if (!ScannerUtilities.isCSSHexadecimalCharacter((char)current)) {      if (ScannerUtilities.isCSSSpace((char)current)) {        nextChar();      }      return;    }    nextChar();    if (!ScannerUtilities.isCSSHexadecimalCharacter((char)current)) {      if (ScannerUtilities.isCSSSpace((char)current)) {        nextChar();      }      return;    }    nextChar();    if (!ScannerUtilities.isCSSHexadecimalCharacter((char)current)) {      if (ScannerUtilities.isCSSSpace((char)current)) {        nextChar();      }      return;    }  }  if ((current >= ' ' && current <= '~') || current >= 128) {    nextChar();    return;  }  throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}  }
class C{  private ContentProviderOperation modifyBlockingTimestampForContact(long rawContactId,ContactId contact,long newBlockingTimestamp,long oldBlockingTimestamp){  if (newBlockingTimestamp == oldBlockingTimestamp) {    return null;  }  return ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_RAW_CONTACT_MIMETYPE_DATA1,new String[]{Long.toString(rawContactId),MIMETYPE_BLOCKING_TIMESTAMP,contact.toString()}).withValue(Data.DATA2,newBlockingTimestamp).build();}  }
class C{  private static void expandArray(Object target,Field arrField,Object[] extraElements,boolean push) throws IllegalAccessException {  Object[] original=(Object[])arrField.get(target);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  if (push) {    System.arraycopy(extraElements,0,combined,0,extraElements.length);    System.arraycopy(original,0,combined,extraElements.length,original.length);  } else {    System.arraycopy(original,0,combined,0,original.length);    System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  }  arrField.set(target,combined);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  @NoInline public final void insertOOL(Address addr){  insert(addr);}  }
class C{  public FilterPredClause(FilterPredClause pred){  this(pred.field,pred.compOp,pred.value);}  }
class C{  public Task delete(String id) throws IOException {  String path=String.format("%s/%s",getBasePath(),id);  HttpResponse response=this.restClient.perform(RestClient.Method.DELETE,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public static Changeset[] findChangesetChildren(final TFSRepository repository,final Changeset c){  final boolean slotMode=true;  if (mayHaveChildren(repository,c)) {    if (c.getChanges() == null || c.getChanges().length <= 0) {      return new Changeset[0];    }    final ChangeType ctype=c.getChanges()[0].getChangeType();    if (ctype.contains(ChangeType.BRANCH)) {      return findBranchPaths(repository,c,slotMode);    }    if (ctype.contains(ChangeType.MERGE)) {      return findMergePaths(repository,c,slotMode);    }    if (ctype.contains(ChangeType.RENAME)) {      return findMergePaths(repository,c,slotMode);    }  }  return null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void rotateLog(long time){  if (m_fileNameDate == null || m_fileNameDate.equals(getFileNameDate(time)))   return;  rotateLog();}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {  SCHEMES.get(oprot.getScheme()).getScheme().write(oprot,this);}  }
class C{  @POST @Path("jaxrs") public String postJaxrs(@FormParam("greeting") String greeting){  return "OK";}  }
class C{  public MalformedStreamException(){  super();}  }
class C{  private String removeNoMoreExistentData(Project db,ProjectStaticData current){  int removed=0;  Iterator<CUT> iter=db.getCut().iterator();  while (iter.hasNext()) {    CUT cut=iter.next();    String cutName=cut.getFullNameOfTargetClass();    if (!current.containsClass(cutName)) {      iter.remove();      removeBestTestSuite(cut.getFullNameOfTestSuite());      removed++;    }  }  return "Removed test suites: " + removed;}  }
class C{  public String toString(){  return getStatus();}  }
class C{  public static boolean isBackendExportMask(DbClient dbClient,ExportMask exportMask){  Set<URI> initiatorURIs=ExportMaskUtils.getAllInitiatorsForExportMask(dbClient,exportMask);  if (initiatorURIs != null && !initiatorURIs.isEmpty()) {    List<Initiator> initiators=dbClient.queryObject(Initiator.class,initiatorURIs);    if (initiators != null) {      return areBackendInitiators(initiators);    }  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)null);  return;}super.eUnset(featureID);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public ExtractConstantDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.EXTRACT_CONSTANT,project,description,comment,arguments,flags);}  }
class C{  private static String symmetrize(String sourceFile,String targetFile,String feAlign,String efAlign,SymmetrizationType type) throws IOException {  String outFileName=getSymmetrizationFilename(Paths.get(sourceFile).getParent());  try (LineNumberReader fReader=IOTools.getReaderFromFile(sourceFile);LineNumberReader eReader=IOTools.getReaderFromFile(targetFile);LineNumberReader feReader=IOTools.getReaderFromFile(feAlign);LineNumberReader efReader=IOTools.getReaderFromFile(efAlign);PrintStream alignFile=IOTools.getWriterFromFile(outFileName)){    for (String fLine; (fLine=fReader.readLine()) != null; ) {      if (fReader.getLineNumber() % 10000 == 0)       logger.info("Reading corpus line {}...",fReader.getLineNumber());      String eLine=eReader.readLine();      String ef1=efReader.readLine();      String ef2=efReader.readLine();      String ef3=efReader.readLine();      String fe1=feReader.readLine();      String fe2=feReader.readLine();      String fe3=feReader.readLine();      GIZAWordAlignment gizaAlign=new GIZAWordAlignment(fe1,fe2,fe3,ef1,ef2,ef3);      int sourceLength=fLine.trim().split("\\s+").length;      int targetLength=eLine.trim().split("\\s+").length;      if (gizaAlign.e().size() != sourceLength) {        logger.error("Source length mismatch at line {}",fReader.getLineNumber());        throw new RuntimeException();      }      if (gizaAlign.f().size() != targetLength) {        logger.error("Target length mismatch at line {}",eReader.getLineNumber());        throw new RuntimeException();      }      SymmetricalWordAlignment symAlign=AlignmentSymmetrizer.symmetrize(gizaAlign,type);      symAlign.reverse();      String aLine=symAlign.toString().trim();      alignFile.println(aLine);    }    if (eReader.readLine() != null) {      logger.error("Target file is not exhausted!");      throw new RuntimeException();    }    if (feReader.readLine() != null) {      logger.error("fe alignment file is not exhausted!");      throw new RuntimeException();    }    if (efReader.readLine() != null) {      logger.error("ef alignment file is not exhausted!");      throw new RuntimeException();    }    logger.info("Symmetrized {} lines.",fReader.getLineNumber());    return outFileName;  } }  }
class C{  private SubscriberExceptionContext context(Object event){  return new SubscriberExceptionContext(bus,event,target,method);}  }
class C{  private void removeNeuron(Neuron neuron){  NeuronNode node=(NeuronNode)objectNodeMap.get(neuron);  if (node != null) {    selectionModel.remove(node);    node.removeFromParent();    objectNodeMap.remove(neuron);    if (neuron.getParentGroup() != null) {      NeuronGroupNode groupNode=(NeuronGroupNode)objectNodeMap.get(neuron.getParentGroup());      if (groupNode != null) {        groupNode.removeNeuronNode(node);      }    }    zoomToFitPage(false);  }}  }
class C{  public LaunchThread(IAgent agent){  super("Launch-" + agent.getName());  this.agent=agent;  startTime=System.currentTimeMillis();  if (agent.getType().equals("Node"))   throw new IllegalArgumentException(agent.getName() + " is a node.");}  }
class C{  protected int firstStep(RouteInfo plan){  return (plan.getHopCount() > 1) ? CONNECT_PROXY : CONNECT_TARGET;}  }
class C{  public static File showOpenFile(String[] extensions,Shell parent){  return showOpenFile(extensions,null,parent);}  }
class C{  public void proxyService(String serviceName,String contextPath){  if (proxiedServiceMappings().containsValue(contextPath)) {    throw new IllegalArgumentException("Cannot proxy multiple services under the same context path");  }  proxiedServiceMappings.put(serviceName,contextPath);}  }
class C{  @Override public boolean supportsLargeMessage(){  return true;}  }
class C{  final public void SetDirective() throws ParseException {  ASTSetDirective jjtn000=new ASTSetDirective(this,JJTSETDIRECTIVE);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    jj_consume_token(SET_DIRECTIVE);switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:      jj_consume_token(WHITESPACE);    break;default :  jj_la1[36]=jj_gen;;}Reference();switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:jj_consume_token(WHITESPACE);break;default :jj_la1[37]=jj_gen;;}jj_consume_token(EQUALS);Expression();jj_consume_token(RPAREN);token_source.inSet=false;switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case NEWLINE:jj_consume_token(NEWLINE);break;default :jj_la1[38]=jj_gen;;}} catch (Throwable jjte000) {if (jjtc000) {jjtree.clearNodeScope(jjtn000);jjtc000=false;} else {jjtree.popNode();}if (jjte000 instanceof RuntimeException) {{if (true) throw (RuntimeException)jjte000;}}if (jjte000 instanceof ParseException) {{if (true) throw (ParseException)jjte000;}}{if (true) throw (Error)jjte000;}} finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);}}}  }
class C{  @Override protected void internalRender(GL10 gl,PLIRenderer renderer){  this.calculateCoords(gl);  List<PLITexture> textures=this.getTextures();  int textureId=(textures.size() > 0 ? textures.get(0).getTextureId(gl) : 0);  if (textureId == 0 || mVertexsBuffer == null || mTextureCoordsBuffer == null)   return;  gl.glEnable(GL10.GL_TEXTURE_2D);  PLIView view=renderer.getInternalView();  gl.glColor4f(1.0f,1.0f,1.0f,(view != null && view.isValidForTransition()) || this.getTouchStatus() == PLSceneElementTouchStatus.PLSceneElementTouchStatusOut ? this.getAlpha() : mOverAlpha);  gl.glVertexPointer(3,GL10.GL_FLOAT,0,mVertexsBuffer);  gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,mTextureCoordsBuffer);  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL10.GL_CULL_FACE);  gl.glCullFace(GL10.GL_FRONT);  gl.glShadeModel(GL10.GL_SMOOTH);  gl.glBindTexture(GL10.GL_TEXTURE_2D,textureId);  gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,4);  gl.glDisable(GL10.GL_TEXTURE_2D);  gl.glDisable(GL10.GL_BLEND);  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);  gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);}  }
class C{  public static boolean deleteFile(final File file,final Logger logger,final int attempts){  if (file == null) {    return false;  }  boolean isGone=false;  try {    if (file.exists()) {      final int effectiveAttempts=Math.max(1,attempts);      for (int i=0; i < effectiveAttempts && !isGone; i++) {        isGone=file.delete() || !file.exists();        if (!isGone && (effectiveAttempts - i) > 1) {          FileUtils.sleepQuietly(MILLIS_BETWEEN_ATTEMPTS);        }      }      if (!isGone && logger != null) {        logger.warn("File appears to exist but unable to delete file: " + file.getAbsolutePath());      }    }  } catch (  final Throwable t) {    if (logger != null) {      logger.warn("Unable to delete file: '" + file.getAbsolutePath() + "' due to "+ t);    }  }  return isGone;}  }
class C{  public int lookup(BytesRef id) throws IOException {  for (int seg=0; seg < numSegs; seg++) {    if (termsEnums[seg].seekExact(id)) {      postingsEnums[seg]=termsEnums[seg].postings(postingsEnums[seg],0);      int docID=postingsEnums[seg].nextDoc();      if (docID != PostingsEnum.NO_MORE_DOCS && (liveDocs[seg] == null || liveDocs[seg].get(docID))) {        return docBases[seg] + docID;      }      assert hasDeletions;    }  }  return -1;}  }
class C{  @Override public void drawRangeMarker(Graphics2D g2,XYPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){  if (marker instanceof ValueMarker) {    ValueMarker vm=(ValueMarker)marker;    double value=vm.getValue();    Range range=rangeAxis.getRange();    if (!range.contains(value)) {      return;    }    double v=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());    PlotOrientation orientation=plot.getOrientation();    Line2D line=null;    if (orientation == PlotOrientation.HORIZONTAL) {      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());    } else     if (orientation == PlotOrientation.VERTICAL) {      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);    } else {      throw new IllegalStateException("Unrecognised orientation.");    }    final Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));    g2.setPaint(marker.getPaint());    g2.setStroke(marker.getStroke());    g2.draw(line);    String label=marker.getLabel();    RectangleAnchor anchor=marker.getLabelAnchor();    if (label != null) {      Font labelFont=marker.getLabelFont();      g2.setFont(labelFont);      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());      g2.setPaint(marker.getLabelBackgroundColor());      g2.fill(r);      g2.setPaint(marker.getLabelPaint());      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());    }    g2.setComposite(originalComposite);  } else   if (marker instanceof IntervalMarker) {    IntervalMarker im=(IntervalMarker)marker;    double start=im.getStartValue();    double end=im.getEndValue();    Range range=rangeAxis.getRange();    if (!(range.intersects(start,end))) {      return;    }    double start2d=rangeAxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());    double end2d=rangeAxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());    double low=Math.min(start2d,end2d);    double high=Math.max(start2d,end2d);    PlotOrientation orientation=plot.getOrientation();    Rectangle2D rect=null;    if (orientation == PlotOrientation.HORIZONTAL) {      low=Math.max(low,dataArea.getMinX());      high=Math.min(high,dataArea.getMaxX());      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());    } else     if (orientation == PlotOrientation.VERTICAL) {      low=Math.max(low,dataArea.getMinY());      high=Math.min(high,dataArea.getMaxY());      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);    }    final Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));    Paint p=marker.getPaint();    if (p instanceof GradientPaint) {      GradientPaint gp=(GradientPaint)p;      GradientPaintTransformer t=im.getGradientPaintTransformer();      if (t != null) {        gp=t.transform(gp,rect);      }      g2.setPaint(gp);    } else {      g2.setPaint(p);    }    g2.fill(rect);    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {      if (orientation == PlotOrientation.VERTICAL) {        Line2D line=new Line2D.Double();        double x0=dataArea.getMinX();        double x1=dataArea.getMaxX();        g2.setPaint(im.getOutlinePaint());        g2.setStroke(im.getOutlineStroke());        if (range.contains(start)) {          line.setLine(x0,start2d,x1,start2d);          g2.draw(line);        }        if (range.contains(end)) {          line.setLine(x0,end2d,x1,end2d);          g2.draw(line);        }      } else {        Line2D line=new Line2D.Double();        double y0=dataArea.getMinY();        double y1=dataArea.getMaxY();        g2.setPaint(im.getOutlinePaint());        g2.setStroke(im.getOutlineStroke());        if (range.contains(start)) {          line.setLine(start2d,y0,start2d,y1);          g2.draw(line);        }        if (range.contains(end)) {          line.setLine(end2d,y0,end2d,y1);          g2.draw(line);        }      }    }    String label=marker.getLabel();    RectangleAnchor anchor=marker.getLabelAnchor();    if (label != null) {      Font labelFont=marker.getLabelFont();      g2.setFont(labelFont);      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());      g2.setPaint(marker.getLabelBackgroundColor());      g2.fill(r);      g2.setPaint(marker.getLabelPaint());      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());    }    g2.setComposite(originalComposite);  }}  }
class C{  public void error(final String msg){  try {    mErr.append(msg);    mErr.append(LS);  } catch (  final IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private static String subtractAnnotation(String line,Class<?>... annotations){  String jmap=null;  int jmapBegin=-1;  String result="";  for (  Class<?> annotation : annotations) {    jmap="@" + annotation.getSimpleName();    jmapBegin=line.indexOf(jmap);    if (jmapBegin != -1)     break;  }  if (jmapBegin > 0)   result=line.substring(0,jmapBegin);  jmapBegin+=jmap.length();  if (line.length() <= jmapBegin)   return result;  int apertura=line.indexOf('(',jmapBegin);  if (apertura == -1)   return result+=line.substring(jmapBegin,line.length()); else   if (apertura > jmapBegin + 1)   for (  char c : line.substring(jmapBegin,apertura).toCharArray())   if (c != ' ')   return result+=line.substring(jmapBegin,line.length());  Integer jmapEnd=line.indexOf(')',jmapBegin);  if (jmapEnd == -1)   return result + "newLine";  if (line.length() > ++jmapEnd) {    String afterAnnotation=line.substring(jmapEnd,line.length());    if (!afterAnnotation.trim().equals(","))     return result+=afterAnnotation;  }  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.370 -0500",hash_original_method="58E4A281E06F713A765399D511C2B585",hash_generated_method="CDCAFDD275A693A2543A5DF9E786274C") static InputStream openUrl(String url) throws IOException {  try {    URLConnection urlConnection=new URL(url).openConnection();    urlConnection.setConnectTimeout(TIMEOUT);    urlConnection.setReadTimeout(TIMEOUT);    urlConnection.setDoInput(true);    urlConnection.setDoOutput(false);    return urlConnection.getInputStream();  } catch (  Exception e) {    IOException ioe=new IOException("Couldn't open " + url);    ioe.initCause(e);    throw ioe;  }}  }
class C{  public static Text valueOf(char[] chars,int offset,int length){  if ((offset < 0) || (length < 0) || ((offset + length) > chars.length))   throw new IndexOutOfBoundsException();  if (length <= BLOCK_SIZE) {    Text text=Text.newPrimitive(length);    System.arraycopy(chars,offset,text._data,0,length);    return text;  } else {    int half=((length + BLOCK_SIZE) >> 1) & BLOCK_MASK;    return Text.newComposite(Text.valueOf(chars,offset,half),Text.valueOf(chars,offset + half,length - half));  }}  }
class C{  @Override public DeserializerFactory withConfig(DeserializerFactory.Config config){  if (_factoryConfig == config) {    return this;  }  if (getClass() != BeanDeserializerFactory.class) {    throw new IllegalStateException("Subtype of BeanDeserializerFactory (" + getClass().getName() + ") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with "+ "additional deserializer definitions");  }  return new BeanDeserializerFactory(config);}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  private Class[] toClassArray(Collection coll){  if (coll == null || coll.size() == 0)   return null; else   return (Class[])coll.toArray(CLASS_ARRAY);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.MAPPED_ELEMENT__SOURCE_ELEMENT:    setSourceElement((EObject)null);  return;}super.eUnset(featureID);}  }
class C{  public static void removeKMLFiles(Drive drive) throws IOException {  List<File> files=getDriveFiles(EndToEndTestUtils.trackListActivity.getApplicationContext(),drive);  for (int i=0; i < files.size(); i++) {    File file=files.get(i);    removeFile(file,drive);  }}  }
class C{  public synchronized SetLayerRunnable popLayerEvent(){  try {    return events.remove(0);  } catch (  ArrayIndexOutOfBoundsException aioobe) {    return null;  }}  }
class C{  public static void expandSysCallTarget(Instruction s,IR ir){  MethodOperand sysM=Call.getMethod(s);  if (sysM.getMemberRef().isFieldReference()) {    RegisterOperand t1=getStatic(s,ir,Entrypoints.the_boot_recordField);    RVMField target=sysM.getMemberRef().asFieldReference().resolve();    Operand ip=getField(s,ir,t1,target);    Call.setAddress(s,ip);  }}  }
class C{  public void testAddAttributeID(){  char attributeID=0x22;  unknownAttributesAttribute.addAttributeID(attributeID);  assertEquals("addAttributeID does not seem to properly add the attribute ID",(int)attributeID,(int)unknownAttributesAttribute.getAttribute(0));  assertEquals("addAttributeID does not seem to properly add the attribute ID",1,unknownAttributesAttribute.getAttributeCount());  unknownAttributesAttribute.addAttributeID(attributeID);  assertEquals("Adding a 2nd time the same attributeID should not change " + "the number of attributes",1,unknownAttributesAttribute.getAttributeCount());}  }
class C{  @Override protected void updateStatus(IStatus status){  this.status=status;  super.updateStatus(status);}  }
class C{  public boolean dispatchKeyEvent(KeyEvent e){  Component focusOwner=(((AWTEvent)e).isPosted) ? getFocusOwner() : e.getComponent();  if (focusOwner != null && focusOwner.isShowing() && focusOwner.canBeFocusOwner()) {    if (!e.isConsumed()) {      Component comp=e.getComponent();      if (comp != null && comp.isEnabled()) {        redispatchEvent(comp,e);      }    }  }  boolean stopPostProcessing=false;  java.util.List<KeyEventPostProcessor> processors=getKeyEventPostProcessors();  if (processors != null) {    for (java.util.Iterator<KeyEventPostProcessor> iter=processors.iterator(); !stopPostProcessing && iter.hasNext(); ) {      stopPostProcessing=iter.next().postProcessKeyEvent(e);    }  }  if (!stopPostProcessing) {    postProcessKeyEvent(e);  }  Component source=e.getComponent();  ComponentPeer peer=source.getPeer();  if (peer == null || peer instanceof LightweightPeer) {    Container target=source.getNativeContainer();    if (target != null) {      peer=target.getPeer();    }  }  if (peer != null) {    peer.handleEvent(e);  }  return true;}  }
class C{  public void testLoaderCommandlineArgs(){}  }
class C{  public static double sqrtQuick(final double value){  if (USE_JDK_MATH) {    return Math.sqrt(value);  }  final long bits=Double.doubleToRawLongBits(value);  return Double.longBitsToDouble(bits + 4606859074900000000L >>> 1);}  }
class C{  public List<ContainerUnit> listContainers(String applicationName) throws ServiceException {  return listContainers(applicationName,true);}  }
class C{  public void logout(NativeAppDriver driver,String header,String logoutButton,String emailTextBox,boolean isAndroid) throws InterruptedException {  Thread.sleep(10000);  driver.clickElementById(header);  driver.clickElementById(logoutButton);  driver.clearInputById(emailTextBox);  if (isAndroid) {    driver.hideKeyboard();  }}  }
class C{  public static byte[] copyFromUtf8(final String text){  try {    return text.getBytes("UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("UTF-8 not supported?");  }}  }
class C{  static boolean isLowUTF16Surrogate(char ch){  return ('\uDC00' <= ch && ch <= '\uDFFF');}  }
class C{  public MultiShapeLayer(){  super();}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public CCopyAddressAction(final INaviInstruction instruction){  super("Copy address to clipboard");  m_instruction=instruction;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void writeFile(final String name,final String mimeType,final String fileName,final byte[] data) throws java.io.IOException {  if (data == null) {    throw new IllegalArgumentException("Data cannot be null.");  }  if (fileName == null) {    throw new IllegalArgumentException("File name cannot be null.");  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"");  out.writeBytes(NEWLINE);  if (mimeType != null) {    out.writeBytes("Content-Type: " + mimeType);    out.writeBytes(NEWLINE);  }  out.writeBytes(NEWLINE);  out.write(data,0,data.length);  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  MasonGeometry randomPointInsidePolygon(Polygon p,GeometryFactory gfact){  if (p == null) {    return null;  }  if (p.isEmpty()) {    return null;  }  Envelope e=p.getEnvelopeInternal();  double xmin=e.getMinX(), ymin=e.getMinY(), xmax=e.getMaxX(), ymax=e.getMaxY();  double addX=random.nextDouble() * (xmax - xmin) + xmin;  double addY=random.nextDouble() * (ymax - ymin) + ymin;  Point pnt=gfact.createPoint(new Coordinate(addX,addY));  while (!p.covers(pnt)) {    addX=random.nextDouble() * (xmax - xmin) + xmin;    addY=random.nextDouble() * (ymax - ymin) + ymin;    pnt=gfact.createPoint(new Coordinate(addX,addY));  }  return new MasonGeometry(pnt);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord) {    MRevenueRecognition rr=new MRevenueRecognition(getCtx(),getC_RevenueRecognition_ID(),get_TrxName());    if (rr.isTimeBased()) {    }  }  return success;}  }
class C{  public boolean containsTuple(Tuple t){  return (t.getTable() == this && isValidRow(t.getRow()));}  }
class C{  private void jsIsUpdateAvailableForInstallation(final CallbackContext callback){  Map<String,Object> data=null;  ChcpError error=null;  final String readyForInstallationVersionName=pluginInternalPrefs.getReadyForInstallationReleaseVersionName();  if (!TextUtils.isEmpty(readyForInstallationVersionName)) {    data=new HashMap<String,Object>();    data.put("readyToInstallVersion",readyForInstallationVersionName);    data.put("currentVersion",pluginInternalPrefs.getCurrentReleaseVersionName());  } else {    error=ChcpError.NOTHING_TO_INSTALL;  }  PluginResult pluginResult=PluginResultHelper.createPluginResult(null,data,error);  callback.sendPluginResult(pluginResult);}  }
class C{  public static void halt(int exitValue){  Runtime.getRuntime().halt(exitValue);}  }
class C{  @Override public boolean shouldCalculateWeights(){  return false;}  }
class C{  public Executor resetCheckpointFile() throws IOException {  if (checkpointFile != null) {    FileUtils.delete(checkpointFile);  }  return this;}  }
class C{  public static void goToGooglePlus(Context context,String id){  context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://plus.google.com/" + id)));}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher){  this(cipher,new PKCS7Padding());}  }
class C{  public DistributedLogClientBuilder periodicDumpOwnershipCacheIntervalMs(long intervalMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicDumpOwnershipCacheIntervalMs(intervalMs);  return newBuilder;}  }
class C{  public void testQueryAnalysis(){  assertQ("Query analysis: ",req("fl","id","q","content:ab","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=1]");  assertQ("Query analysis: ",req("fl","id","q","content:aba","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=2]");}  }
class C{  public CircleLayout(String group,double radius){  super(group);  m_radius=radius;}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  dialog.setTitle(getTitle());  MLocatorLookup locator=new MLocatorLookup(Env.getCtx(),p_WindowNo);  locatorField=new VLocator("M_Locator_ID",true,false,true,locator,p_WindowNo);  sameWarehouseCb.setSelected(true);  sameWarehouseCb.addActionListener(this);  initBPartner(false);  bPartnerField.addVetoableChangeListener(this);  return true;}  }
class C{  public void clear(){  for (int i=this.keyTable.length; --i >= 0; ) {    this.keyTable[i]=null;    this.valueTable[i]=0;  }  this.elementSize=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.485 -0500",hash_original_method="5FA42A6835435D19A578EB7E92901DD9",hash_generated_method="0D23F35D6282AF4EBECB37D456B20660") public static AsyncResult forMessage(Message m,Object r,Throwable ex){  AsyncResult ret;  ret=new AsyncResult(m.obj,r,ex);  m.obj=ret;  return ret;}  }
class C{  static void cancelThumbnailRequest(ContentResolver cr,long origId,Uri baseUri,long groupId){  Uri cancelUri=baseUri.buildUpon().appendQueryParameter("cancel","1").appendQueryParameter("orig_id",String.valueOf(origId)).appendQueryParameter("group_id",String.valueOf(groupId)).build();  Cursor c=null;  try {    c=cr.query(cancelUri,PROJECTION,null,null,null);  }  finally {    if (c != null)     c.close();  }}  }
class C{  public static String formatElapsed(Timestamp start){  if (start == null)   return "NoStartTime";  long startTime=start.getTime();  long endTime=System.currentTimeMillis();  return formatElapsed(endTime - startTime);}  }
class C{  public void notifyOffline(final String who){  boolean found=false;  if (containsKey("buddies",who)) {    put("buddies",who,false);    found=true;  }  if (found) {    if (has("offline")) {      put("offline",get("offline") + "," + who);    } else {      put("offline",who);    }  }}  }
class C{  @Override public boolean requiresLayout(){  return true;}  }
class C{  public ComplexColorWheelImageProducer(ColorSpace sys,int w,int h){  this(sys,w,h,false,false);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public String toString(){  try {    return new String(_buffer,0,_length,"iso-8859-1");  } catch (  Exception e) {    return new String(_buffer,0,_length);  }}  }
class C{  private Cache createCache() throws CacheException {  return new CacheFactory().set(MCAST_PORT,"0").create();}  }
class C{  public static <T>String reflectionToString(final T object,final ToStringStyle style,final boolean outputTransients,final Class<? super T> reflectUpToClass){  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,reflectUpToClass);}  }
class C{  @Override public boolean equals(Object o){  boolean equal=false;  if (o instanceof RomeFeedEntry) {    RomeFeedEntry rfe=(RomeFeedEntry)o;    SyndEntry syndEntry=getComponent();    equal=syndEntry.getTitle().equals(rfe.getComponent().getTitle()) && syndEntry.getUri().equals(rfe.getComponent().getUri());  }  return equal;}  }
class C{  private void cmd_print(){  String PaymentRule=((ValueNamePair)fPaymentRule.getSelectedItem()).getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  boolean somethingPrinted=false;  boolean directPrint=!Ini.isPropertyBool(Ini.P_PRINTPREVIEW);  for (  MHRPaySelectionCheck check : m_checks) {    boolean ok=ReportCtl.startDocumentPrint(ReportEngine.HR_CHECK,check.get_ID(),null,Env.getWindowNo(panel),directPrint);    if (!somethingPrinted && ok)     somethingPrinted=true;  }  if (somethingPrinted && ADialog.ask(m_WindowNo,panel,"VPayPrintSuccess?")) {    int lastDocumentNo=MHRPaySelectionCheck.confirmPrint(m_checks,m_batch);    if (lastDocumentNo != 0) {      StringBuffer sb=new StringBuffer();      sb.append("UPDATE C_BankAccountDoc SET CurrentNext=").append(++lastDocumentNo).append(" WHERE C_BankAccount_ID=").append(m_C_BankAccount_ID).append(" AND PaymentRule='").append(PaymentRule).append("'");      DB.executeUpdate(sb.toString(),null);    }  }  if (ADialog.ask(m_WindowNo,panel,"VPayPrintPrintRemittance")) {    for (    MHRPaySelectionCheck check : m_checks) {      ReportCtl.startDocumentPrint(ReportEngine.HR_REMITTANCE,check.get_ID(),null,Env.getWindowNo(panel),directPrint);    }  }  panel.setCursor(Cursor.getDefaultCursor());  dispose();}  }
class C{  public static IMethod findMethod(String name,int parameterCount,boolean isConstructor,IType type) throws JavaModelException {  return findMethod(name,parameterCount,isConstructor,type.getMethods());}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(this.map);}  }
class C{  private void doValueChanged(){  if (getMethod() != null) {    this.messageEvent(getMethod());  }}  }
class C{  public ProfileList(){  profiles=new ArrayList<Profile>();}  }
class C{  static int decodeMin(byte[] b,int dimension){  int offset=dimension * BYTES;  return NumericUtils.sortableBytesToInt(b,offset);}  }
class C{  public static String replaceFirst(final CharSequence self,final CharSequence regex,final CharSequence replacement){  return self.toString().replaceFirst(regex.toString(),replacement.toString());}  }
class C{  public CollisionAwarePitchAccessor(OrbitView orbitView){  if (orbitView == null) {    String message=Logging.getMessage("nullValue.OrbitViewIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.orbitView=orbitView;}  }
class C{  public JavaContext(TemplateContextType type,Document document,int completionOffset,int completionLength,CompilationUnit compilationUnit){  super(type,document,completionOffset,completionLength,compilationUnit);}  }
class C{  public static String statusToText(int s){  String stat="";switch (s) {case 0:    stat="Interface Powered Off";  break;case 1:stat="Cmd Ok";break;default :stat="Unk Status: " + s;break;}return (stat);}  }
class C{  public static ResourceBundle loadToBundle(final Class<?> clazz,final String resource) throws IOException {  PropertyResourceBundle properties=null;  InputStream in=null;  try {    in=ResourceLoader.getResourceAsStream(clazz,resource);    properties=new PropertyResourceBundle(in);  }  finally {    if (in != null) {      in.close();    }  }  return properties;}  }
class C{  private RoleOptions buildRoleOptionsFromData(final Map<String,String> data){  if (data == null) {    return null;  }  final String ttl=data.get("allow_any_name");  final String maxTtl=data.get("max_ttl");  final Boolean allowLocalhost=parseBoolean(data.get("allow_localhost"));  final List<String> allowedDomains=parseCsvToList(data.get("allow_domains"));  final Boolean allowBareDomains=parseBoolean(data.get("allow_bare_domains"));  final Boolean allowSubdomains=parseBoolean(data.get("allow_subdomains"));  final Boolean allowAnyName=parseBoolean(data.get("allow_any_name"));  final Boolean enforceHostnames=parseBoolean(data.get("enforce_hostnames"));  final Boolean allowIpSans=parseBoolean(data.get("allow_ip_sans"));  final Boolean serverFlag=parseBoolean(data.get("server_flag"));  final Boolean clientFlag=parseBoolean(data.get("client_flag"));  final Boolean codeSigningFlag=parseBoolean(data.get("code_signing_flag"));  final Boolean emailProtectionFlag=parseBoolean(data.get("email_protection_flag"));  final String keyType=data.get("key_type");  final Long keyBits=parseLong(data.get("key_bits"));  final Boolean useCsrCommonName=parseBoolean(data.get("use_csr_common_name"));  if (ttl == null && maxTtl == null && allowLocalhost == null && allowedDomains == null && allowBareDomains == null && allowSubdomains == null && allowAnyName == null && enforceHostnames == null && allowIpSans == null && serverFlag == null && clientFlag == null && codeSigningFlag == null && emailProtectionFlag == null && keyType == null && keyBits == null && useCsrCommonName == null) {    return null;  }  return new RoleOptions().ttl(ttl).maxTtl(maxTtl).allowLocalhost(allowLocalhost).allowedDomains(allowedDomains).allowBareDomains(allowBareDomains).allowSubdomains(allowSubdomains).allowAnyName(allowAnyName).enforceHostnames(enforceHostnames).allowIpSans(allowIpSans).serverFlag(serverFlag).clientFlag(clientFlag).codeSigningFlag(codeSigningFlag).emailProtectionFlag(emailProtectionFlag).keyType(keyType).keyBits(keyBits).useCsrCommonName(useCsrCommonName);}  }
class C{  public static boolean isVerticalWin(String[][] m,String t){  for (int i=0; i < m.length; i++) {    int count=0;    for (int j=0; j < m[i].length; j++) {      if (m[j][i] == t)       count++;    }    if (count == 3)     return true;  }  return false;}  }
class C{  public org.jdom2.Element store(){  Element e=new org.jdom2.Element(Xml.SCHEDULE);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  e.setAttribute(Xml.COMMENT,getComment());  for (  ScheduleItem si : getItemsBySequenceList()) {    e.addContent(si.store());  }  return e;}  }
class C{  public void fill(List<CellIndex> cellIndices,double val){  for (  CellIndex cellIndex : cellIndices) {    int row=cellIndex.row;    int col=cellIndex.col;    this.setLogicalValue(row,col,val,false);  }  this.fireTableDataChanged();}  }
class C{  public LiveRef(ObjID objID,int port){  this(objID,TCPEndpoint.getLocalEndpoint(port),true);}  }
class C{  public static BiomeProvider of(BiomeGenerator biomeGenerator){  if (biomeGenerator instanceof BiomeProvider) {    return ((BiomeProvider)biomeGenerator);  }  return new CustomBiomeProvider(biomeGenerator);}  }
class C{  public List<StorageUnitEntity> createDatabaseEntitiesForBusinessObjectDataDdlTestingTwoPartitionLevels(List<List<String>> partitions){  List<StorageUnitEntity> result=new ArrayList<>();  List<SchemaColumn> schemaColumns=new ArrayList<>();  schemaColumns.add(new SchemaColumn(AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,"DATE",AbstractServiceTest.NO_COLUMN_SIZE,AbstractServiceTest.COLUMN_REQUIRED,AbstractServiceTest.NO_COLUMN_DEFAULT_VALUE,AbstractServiceTest.NO_COLUMN_DESCRIPTION));  schemaColumns.add(new SchemaColumn(AbstractServiceTest.SECOND_PARTITION_COLUMN_NAME,"STRING",AbstractServiceTest.NO_COLUMN_SIZE,AbstractServiceTest.COLUMN_REQUIRED,AbstractServiceTest.NO_COLUMN_DEFAULT_VALUE,AbstractServiceTest.NO_COLUMN_DESCRIPTION));  schemaColumns.add(new SchemaColumn(AbstractServiceTest.COLUMN_NAME,"NUMBER",AbstractServiceTest.COLUMN_SIZE,AbstractServiceTest.NO_COLUMN_REQUIRED,AbstractServiceTest.COLUMN_DEFAULT_VALUE,AbstractServiceTest.COLUMN_DESCRIPTION));  List<SchemaColumn> partitionColumns=schemaColumns.subList(0,2);  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FORMAT_DESCRIPTION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,AbstractServiceTest.NO_PARTITION_KEY_GROUP,AbstractServiceTest.NO_ATTRIBUTES,AbstractServiceTest.SCHEMA_DELIMITER_PIPE,AbstractServiceTest.SCHEMA_ESCAPE_CHARACTER_BACKSLASH,AbstractServiceTest.SCHEMA_NULL_VALUE_BACKSLASH_N,schemaColumns,partitionColumns);  StorageEntity storageEntity=storageDaoTestHelper.createStorageEntity(AbstractServiceTest.STORAGE_NAME,StoragePlatformEntity.S3,Arrays.asList(new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),AbstractServiceTest.S3_BUCKET_NAME),new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE)));  for (  List<String> partition : partitions) {    String s3KeyPrefix=AbstractServiceTest.getExpectedS3KeyPrefix(AbstractServiceTest.NAMESPACE,AbstractServiceTest.DATA_PROVIDER_NAME,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,partition.get(0),partitionColumns.subList(1,2).toArray(new SchemaColumn[1]),Arrays.asList(partition.get(1)).toArray(new String[1]),AbstractServiceTest.DATA_VERSION);    BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectFormatEntity,partition.get(0),Arrays.asList(partition.get(1)),AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);    result.add(storageUnitDaoTestHelper.createStorageUnitEntity(storageEntity,businessObjectDataEntity,StorageUnitStatusEntity.ENABLED,s3KeyPrefix));  }  return result;}  }
class C{  private Level descriptionToLogLevel(String description){  Level result=Level.OFF;  if (description.equals(s_logger.localizeMessage("guiLogLevelOff"))) {    result=Level.OFF;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelSevere"))) {    result=Level.SEVERE;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelWarning"))) {    result=Level.WARNING;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelInfo"))) {    result=Level.INFO;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelConfig"))) {    result=Level.CONFIG;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelFine"))) {    result=Level.FINE;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelFiner"))) {    result=Level.FINER;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelFinest"))) {    result=Level.FINEST;  } else   if (description.equals(s_logger.localizeMessage("guiLogLevelAll"))) {    result=Level.ALL;  }  return result;}  }
class C{  protected void authorizeRequests(HttpSecurity http) throws Exception {  http.authorizeRequests().mvcMatchers("/login/impersonate*").hasRole(GOOD_ADMIN).mvcMatchers("/logout/impersonate*").authenticated().mvcMatchers("/**").permitAll();}  }
class C{  public Set<MotifInstance> findMotif(Motif motif){  unmappedNodes=new HashSet<Integer>();  for (int i=0; i < motif.getNrMotifNodes(); i++) {    unmappedNodes.add(i);  }  int nrMotifNodes=motif.getNrMotifNodes();  NodeIterator[] mapping=new NodeIterator[nrMotifNodes];  int bestMN=-1;  int sizeOfListOfBestNode=Integer.MAX_VALUE;  for (int i=0; i < nrMotifNodes; i++) {    int[] nrLinks=new int[MotifLink.getNrLinkIDs()];    MotifLink[] linksFromi=motif.getLinksOfMotifNode(i);    int[] nodesConnectedToi=motif.getConnectionsOfMotifNode(i);    int nrConnections=nodesConnectedToi.length;    NodeIterator nodeIterator=new NodeIterator(i);    int sizeOfSmallestListOfNodei=Integer.MAX_VALUE;    for (int k=0; k < nrConnections; k++) {      MotifLink link=linksFromi[k];      nrLinks[link.motifLinkID]++;      if (nrLinks[link.motifLinkID] == 1) {        ArrayList<Node> nodesOfType=this.network.getNodesOfType(link);        nodeIterator.addRestrictionList(nodesOfType);        if (sizeOfSmallestListOfNodei > nodesOfType.size()) {          sizeOfSmallestListOfNodei=nodesOfType.size();        }      }    }    if (sizeOfSmallestListOfNodei < sizeOfListOfBestNode) {      sizeOfListOfBestNode=sizeOfSmallestListOfNodei;      bestMN=i;    }    mapping[i]=nodeIterator;  }  Set<MotifInstance> instances=new HashSet<MotifInstance>();  Node[] mappedNodes=new Node[nrMotifNodes];  symmetryHandler=new SymmetryHandler(mapping,motif,mappedNodes);  mapNext(motif,instances,bestMN,mappedNodes,0);  return instances;}  }
class C{  @Override public boolean remove(Object object){  return removeElement(object);}  }
class C{  public void warning(CharSequence message){  log(Level.WARNING,message);}  }
class C{  public TranslationImportException(){  super();}  }
class C{  private List<Coupling<?>> addCouplingToList(final List<Coupling<?>> list,final Coupling<?> coupling){  List<Coupling<?>> local=list;  if (local == null) {    local=new ArrayList<Coupling<?>>();  }  local.add(coupling);  return local;}  }
class C{  public void diff_cleanupSemanticLossless(LinkedList<Diff> diffs){  String equality1, edit, equality2;  String commonString;  int commonOffset;  int score, bestScore;  String bestEquality1, bestEdit, bestEquality2;  ListIterator<Diff> pointer=diffs.listIterator();  Diff prevDiff=pointer.hasNext() ? pointer.next() : null;  Diff thisDiff=pointer.hasNext() ? pointer.next() : null;  Diff nextDiff=pointer.hasNext() ? pointer.next() : null;  while (nextDiff != null) {    if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {      equality1=prevDiff.text;      edit=thisDiff.text;      equality2=nextDiff.text;      commonOffset=diff_commonSuffix(equality1,edit);      if (commonOffset != 0) {        commonString=edit.substring(edit.length() - commonOffset);        equality1=equality1.substring(0,equality1.length() - commonOffset);        edit=commonString + edit.substring(0,edit.length() - commonOffset);        equality2=commonString + equality2;      }      bestEquality1=equality1;      bestEdit=edit;      bestEquality2=equality2;      bestScore=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);      while (edit.length() != 0 && equality2.length() != 0 && edit.charAt(0) == equality2.charAt(0)) {        equality1+=edit.charAt(0);        edit=edit.substring(1) + equality2.charAt(0);        equality2=equality2.substring(1);        score=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);        if (score >= bestScore) {          bestScore=score;          bestEquality1=equality1;          bestEdit=edit;          bestEquality2=equality2;        }      }      if (!prevDiff.text.equals(bestEquality1)) {        if (bestEquality1.length() != 0) {          prevDiff.text=bestEquality1;        } else {          pointer.previous();          pointer.previous();          pointer.previous();          pointer.remove();          pointer.next();          pointer.next();        }        thisDiff.text=bestEdit;        if (bestEquality2.length() != 0) {          nextDiff.text=bestEquality2;        } else {          pointer.remove();          nextDiff=thisDiff;          thisDiff=prevDiff;        }      }    }    prevDiff=thisDiff;    thisDiff=nextDiff;    nextDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public void testFollowerAcceptsPollWhenLogUpToDate() throws Throwable {  runOnServer(null);}  }
class C{  public GeneralSubtrees intersect(GeneralSubtrees other){  if (other == null) {    throw new NullPointerException("other GeneralSubtrees must not be null");  }  GeneralSubtrees newThis=new GeneralSubtrees();  GeneralSubtrees newExcluded=null;  if (size() == 0) {    union(other);    return null;  }  this.minimize();  other.minimize();  for (int i=0; i < size(); i++) {    GeneralNameInterface thisEntry=getGeneralNameInterface(i);    boolean removeThisEntry=false;    boolean sameType=false;    for (int j=0; j < other.size(); j++) {      GeneralSubtree otherEntryGS=other.get(j);      GeneralNameInterface otherEntry=getGeneralNameInterface(otherEntryGS);switch (thisEntry.constrains(otherEntry)) {case NAME_NARROWS:        remove(i);      i--;    newThis.add(otherEntryGS);  sameType=false;break;case NAME_SAME_TYPE:sameType=true;continue;case NAME_MATCH:case NAME_WIDENS:sameType=false;break;case NAME_DIFF_TYPE:default :continue;}break;}if (sameType) {boolean intersection=false;for (int j=0; j < size(); j++) {GeneralNameInterface thisAltEntry=getGeneralNameInterface(j);if (thisAltEntry.getType() == thisEntry.getType()) {for (int k=0; k < other.size(); k++) {GeneralNameInterface othAltEntry=other.getGeneralNameInterface(k);int constraintType=thisAltEntry.constrains(othAltEntry);if (constraintType == NAME_MATCH || constraintType == NAME_WIDENS || constraintType == NAME_NARROWS) {intersection=true;break;}}}}if (intersection == false) {if (newExcluded == null) {newExcluded=new GeneralSubtrees();}GeneralSubtree widestSubtree=createWidestSubtree(thisEntry);if (!newExcluded.contains(widestSubtree)) {newExcluded.add(widestSubtree);}}remove(i);i--;}}if (newThis.size() > 0) {union(newThis);}for (int i=0; i < other.size(); i++) {GeneralSubtree otherEntryGS=other.get(i);GeneralNameInterface otherEntry=getGeneralNameInterface(otherEntryGS);boolean diffType=false;for (int j=0; j < size(); j++) {GeneralNameInterface thisEntry=getGeneralNameInterface(j);switch (thisEntry.constrains(otherEntry)) {case NAME_DIFF_TYPE:diffType=true;continue;case NAME_NARROWS:case NAME_SAME_TYPE:case NAME_MATCH:case NAME_WIDENS:diffType=false;break;default :continue;}break;}if (diffType) {add(otherEntryGS);}}return newExcluded;}  }
class C{  @Override public void componentShowing(){  if (!this.obj.isModified()) {    return;  }  loadGui();}  }
class C{  public void addKeyBytes(KeyCacheObject key,boolean retVal,@Nullable GridCacheVersion dhtVer,GridCacheContext ctx) throws IgniteCheckedException {  dhtVers[idx]=dhtVer;  addKeyBytes(key,retVal,ctx);}  }
class C{  public void shutdownServer() throws SQLException {  try {    this.io.sendCommand(MysqlDefs.SHUTDOWN,null,null,false,null,0);  } catch (  Exception ex) {    SQLException sqlEx=SQLError.createSQLException(Messages.getString("Connection.UnhandledExceptionDuringShutdown"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());    sqlEx.initCause(ex);    throw sqlEx;  }}  }
class C{  private boolean connectElseIf(CodeWriter code,IContainer els) throws CodegenException {  if (!els.contains(AFlag.ELSE_IF_CHAIN)) {    return false;  }  if (!(els instanceof Region)) {    return false;  }  List<IContainer> subBlocks=((Region)els).getSubBlocks();  if (subBlocks.size() == 1 && subBlocks.get(0) instanceof IfRegion) {    makeIf((IfRegion)subBlocks.get(0),code,false);    return true;  }  return false;}  }
class C{  public static String genString(int size){  char[] array=new char[size];  Arrays.fill(array,'\'');  return String.valueOf(array);}  }
class C{  private void updateExternal(ServerHeartbeat server,String externalId){  if (externalId != null) {    ServerHeartbeat serverExternal=_root.getServer(externalId);    server.setExternalServer(serverExternal);  } else {    server.setExternalServer(null);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) public boolean isAccessibilityFocused(){  return getBooleanProperty(BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED);}  }
class C{  public void calculateAmt(BigDecimal amt,int precision){  m_amt=amt.multiply(getPercent());  m_amt=m_amt.divide(Env.ONEHUNDRED,precision,BigDecimal.ROUND_HALF_UP);}  }
class C{  public final boolean isInitiator(){  return initiator;}  }
class C{  public void send(OutputStream os,HeadersAmp headers,String address,String methodName,PodRef podCaller,Object[] args) throws IOException {  init(os);  OutH3 out=_out;  if (out == null) {    return;  }  if (log.isLoggable(Level.FINEST)) {    log.finest("hamp-send-w " + methodName + Arrays.asList(args)+ "\n  {to:"+ address+ "}");  }  try {    out.writeLong(MessageTypeHamp.SEND.ordinal());    writeHeaders(out,headers);    writeMethod(out,address,methodName,podCaller);    writeArgs(out,args);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  protected void add(FolderTokenDocTreeNode node){  m_nodes.add(node);}  }
class C{  public void testRemoveAllRandomAccess(){  Multimap<String,Integer> multimap=create();  multimap.put("foo",1);  multimap.put("foo",3);  assertTrue(multimap.removeAll("foo") instanceof RandomAccess);  assertTrue(multimap.removeAll("bar") instanceof RandomAccess);}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  @Nullable public static Cube syncCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int cubeX,int cubeY,int cubeZ){  Column column=cache.loadChunk(cubeX,cubeZ);  QueuedCube key=new QueuedCube(cubeX,cubeY,cubeZ,world);  AsyncCubeIOProvider task=cubeTasks.remove(key);  if (task != null) {    runTask(task);  } else {    task=new AsyncCubeIOProvider(key,loader);    task.setColumn(column);    task.run();  }  task.runSynchronousPart();  return task.get();}  }
class C{  public EventFunctor(final E domain){  this.domain=domain;  initialized=true;  initialization=null;  initializationSupplier=null;}  }
class C{  private void loadAuthenticationErrorActivity(){  Intent intent=new Intent(RegistrationActivity.this,AuthenticationErrorActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),RegistrationActivity.class.getSimpleName());  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  @Override public void run(){  amIActive=true;  String inputWatershedFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double increment;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputWatershedFile=args[1];  outputHeader=args[2];  increment=Double.parseDouble(args[3]);  if ((demHeader == null) || (inputWatershedFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(DEM.getPreferredPalette());    if (inputWatershedFile.toLowerCase().endsWith(".dep")) {      watershedHeader=inputWatershedFile;      watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberColumns() != cols || watershed.getNumberRows() != rows) {        showFeedback("The input files must have the same dimensions.");        return;      }      double[] demData;      boolean isBorderingCell;      double w;      int[] dX={1,1,1,0,-1,-1,-1,0};      int[] dY={-1,0,1,1,1,0,-1,-1};      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          w=watershed.getValue(row,col);          if (w > 0 && demData[col] != noData) {            isBorderingCell=false;            for (i=0; i < 8; i++) {              if (watershed.getValue(row + dY[i],col + dX[i]) != w) {                isBorderingCell=true;                break;              }            }            if (isBorderingCell) {              output.setValue(row,col,demData[col] + increment);            }          } else {            output.setValue(row,col,demData[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (inputWatershedFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputWatershedFile);      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=DEM.getRowFromYCoordinate(box.getMaxY());          bottomRow=DEM.getRowFromYCoordinate(box.getMinY());          leftCol=DEM.getColumnFromXCoordinate(box.getMinX());          rightCol=DEM.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=DEM.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=DEM.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=DEM.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=DEM.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,increment));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress((int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,DEM.getValue(cell.row,cell.col) + increment);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress((int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.flush();      double[] demData;      double[] outputData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        outputData=output.getRowValues(row);        for (col=0; col < cols; col++) {          if (outputData[col] == noData) {            output.setValue(row,col,demData[col]);          }        }      }      output.flush();    } else {      showFeedback("The input watershed file must be either a Whitebox raster or shapefile.");      return;    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @EnsuresNonNullIf(result=true,expression={"#1","#2"}) public static boolean sameLength(final boolean[] seq1,final boolean[] seq2){  if ((seq1 != null) && (seq2 != null) && seq1.length == seq2.length) {    return true;  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.263 -0500",hash_original_method="6EC335AEB28EA1E608617532103E031D",hash_generated_method="692344834A58C7F02E5722238C227FDE") public void drawCircle(float cx,float cy,float radius,Paint paint){  addTaint(cx + cy + radius+ paint.getTaintInt());}  }
class C{  public CSearchWaiter(final IDebugger debugger,final IAddress offset,final int size,final byte[] data){  Preconditions.checkNotNull(debugger,"IE01437: Debugger argument can not be null");  Preconditions.checkNotNull(offset,"IE01438: Offset argument can not be null");  m_debugger=debugger;  m_offset=offset;  m_size=size;  m_data=data.clone();  debugger.addListener(m_debuggerListener);  debugger.getProcessManager().addListener(m_processListener);}  }
class C{  public static synchronized void mappingChange(String uname,String newKey,DSAPublicKey ck,boolean allowsUnsignedChanges,boolean allowsPublicVisibility,byte[] msg,byte[] sig){  byte[] index=ServerUtils.unameToIndex(uname);  UserLeafNode uln=new UserLeafNode(uname,newKey,ServerHistory.nextEpoch(),0,allowsUnsignedChanges,allowsPublicVisibility,ck,index);  KeyChange change=new KeyChange(newKey,ck,allowsUnsignedChanges,allowsPublicVisibility,msg,sig,ServerHistory.nextEpoch(),0);  pendingQueue.add(Triplet.with(index,uln,(Operation)change));}  }
class C{  public static String formatQuantity(Float quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  private void buildGui(final XFileChooser fileChooser){  final Dimension mindim=new Dimension(16,16);  final GridBagConstraints c=this.c;  c.insets.set(1,1,0,1);  nextRow();  addDouble(RepUtils.createRepFoldersShortcutCombo(fileChooser));  nextRow();  addDouble(new JSeparator());  nextRow();  addDouble(GuiUtils.boldFont(repInfoLabel));  nextRow();  addSingle(new XLabel("Date:"));  c.weightx=1;  addSingle(dateLabel);  c.weightx=0;  nextRow();  addSingle(new XLabel("Version:"));  versionLabel.setPreferredSize(mindim);  versionLabel.setMaximumSize(mindim);  versionLabel.setMinimumSize(mindim);  addSingle(versionLabel);  nextRow();  addSingle(new XLabel("Mode:"));  addSingle(modeLabel);  nextRow();  addSingle(new XLabel("Length:"));  addSingle(lengthLabel);  nextRow();  addSingle(new XLabel("Avg League:"));  avgLeagueLabel.setPreferredSize(mindim);  avgLeagueLabel.setMaximumSize(mindim);  avgLeagueLabel.setMinimumSize(mindim);  addSingle(avgLeagueLabel);  nextRow();  addSingle(new XLabel("Matchup:"));  addSingle(matchupLabel);  nextRow();  addSingle(new XLabel("Region:"));  addSingle(regionLabel);  nextRow();  c.anchor=GridBagConstraints.NORTHWEST;  addSingle(new XLabel("Players:"));  addSingle(playersLabel);  c.anchor=GridBagConstraints.LINE_START;  nextRow();  addSingle(new XLabel("Map:"));  addSingle(mapTitleLabel);  nextRow();  c.weighty=1;  addDouble(mapImageLabel);  c.weighty=0;}  }
class C{  public BlockConsistencyGroupRestRep create(BlockConsistencyGroupCreate input){  return client.post(BlockConsistencyGroupRestRep.class,input,baseUrl);}  }
class C{  String readTimeZone(String source,int ofs){  int sp=source.indexOf(' ',ofs);  String fragment;  if (sp != -1) {    fragment=readSubstring(source,ofs,sp);  } else {    fragment=readSubstring(source,ofs);  }  if (fragment == null) {    return null;  }  int len=fragment.length();  if (len == 0) {    return null;  }  if (len == 1) {    if (fragment.toLowerCase().equals("z")) {      return readSubstring(source,ofs,1);    }    return null;  }  if (len >= 8 && fragment.startsWith(GMT)) {    return readSubstring(source,ofs);  }  int ch=fragment.charAt(0);  if (len >= 5 && (ch == SIGN_NEGATIVE || ch == SIGN_POSITIVE)) {    return readSubstring(source,ofs,ofs + 5);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(fragment)) {        return readSubstring(source,ofs,ofs + z.length());      }    }  }  return null;}  }
class C{  public ParameterTypeFile(String key,String description,String extension,String defaultFileName){  super(key,description,defaultFileName);  this.extensions=new String[]{extension};}  }
class C{  @Override public void pause(boolean toPause){  isPaused=toPause;}  }
class C{  static Vector parse(String str) throws ParseException {  int state=START;  int nameStartIndex=-1;  Vector paths=new Vector();  Vector names=new Vector();  boolean root=false;  for (int i=0, len=str.length(); i < len; i++) {    char c=str.charAt(i);switch (c) {case ' ':case '\r':case '\n':case '\t':      if (state == IN_NAME) {        names.addElement(makeName(str,nameStartIndex,i));        state=AFTER_NAME;      }    break;case '/':switch (state) {case IN_NAME:    names.addElement(makeName(str,nameStartIndex,i));  break;case START:root=true;break;case AFTER_SLASH:throw new ParseException("unexpected_slash");}state=AFTER_SLASH;break;case '|':switch (state) {case START:throw new ParseException("empty_path");case AFTER_NAME:break;case AFTER_SLASH:throw new ParseException("expected_name");case IN_NAME:names.addElement(makeName(str,nameStartIndex,i));break;}paths.addElement(new Path(root,names));root=false;names=new Vector();state=START;break;default :switch (state) {case AFTER_NAME:throw new ParseException("expected_slash");case AFTER_SLASH:case START:nameStartIndex=i;state=IN_NAME;break;case IN_NAME:break;}break;}}switch (state) {case START:throw new ParseException("empty_path");case AFTER_NAME:break;case AFTER_SLASH:throw new ParseException("expected_name");case IN_NAME:names.addElement(makeName(str,nameStartIndex,str.length()));break;}paths.addElement(new Path(root,names));return paths;}  }
class C{  public long toDays(){  return seconds / SECONDS_PER_DAY;}  }
class C{  public AsyncResult OpenSecureChannelAsync(OpenSecureChannelRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void testSqlCrossCacheQueryNotFullyFetchedMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  SqlFieldsQuery qry=new SqlFieldsQuery("select * from \"B\".Integer");  qry.setPageSize(10);  testQueryNotFullyFetchedMetrics(cache,qry,false);}  }
class C{  private void roleComboChanged(){  KeyNamePair role=(KeyNamePair)roleCombo.getSelectedItem();  if (role == null || m_comboActive)   return;  log.config(": " + role);  m_comboActive=true;  KeyNamePair[] clients=m_login.getClients(role);  if (clientCombo.getItemCount() > 0)   clientCombo.removeAllItems();  if (orgCombo.getItemCount() > 0)   orgCombo.removeAllItems();  if (clients == null || clients.length == 0) {    statusBar.setStatusLine(txt_RoleError,true);    m_comboActive=false;    return;  }  KeyNamePair iniValue=null;  String iniDefault=Ini.getProperty(Ini.P_CLIENT);  for (int i=0; i < clients.length; i++) {    clientCombo.addItem(clients[i]);    if (clients[i].getName().equals(iniDefault))     iniValue=clients[i];  }  if (iniValue != null)   clientCombo.setSelectedItem(iniValue);  m_comboActive=false;  clientComboChanged();}  }
class C{  public boolean isRead() throws RcsPersistentStorageException, RcsGenericException {  try {    return mChatMessageInf.isRead();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.526 -0500",hash_original_method="D262961B9C2C88432C23CE1E616C0D35",hash_generated_method="E58A9FC8C58B34F13DDC5C274B23CB07") public void sendMessage(int what,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.obj=obj;  sendMessage(msg);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean le(DD y){  return (hi < y.hi) || (hi == y.hi && lo <= y.lo);}  }
class C{  private AddFloatingDecoratorCmd(final InternalDecorator decorator,final WindowInfoImpl info){  super(myWindowManager.getCommandProcessor());  myFloatingDecorator=new FloatingDecorator(myFrame,info.copy(),decorator);  myId2FloatingDecorator.put(info.getId(),myFloatingDecorator);  final Rectangle bounds=info.getFloatingBounds();  if (bounds != null && bounds.width > 0 && bounds.height > 0 && myWindowManager.isInsideScreenBounds(bounds.x,bounds.y,bounds.width)) {    myFloatingDecorator.setBounds(bounds);  } else {    Dimension size=decorator.getSize();    if (size.width == 0 || size.height == 0) {      size=decorator.getPreferredSize();    }    myFloatingDecorator.setSize(size);    myFloatingDecorator.setLocationRelativeTo(myFrame);  }}  }
class C{  private void applyFilterToChildren(TreeElement<JsonElement,JsonElement> element,Filter filter){  List<TreeElement<JsonElement,?>> toRemove=new ArrayList<TreeElement<JsonElement,?>>();  for (  TreeElement<JsonElement,?> child : element.getChildren()) {    if (isFiltered(child,filter)) {      toRemove.add(child);    } else {      applyFilterToChildren((TreeElement<JsonElement,JsonElement>)child,filter);    }  }  for (  TreeElement<JsonElement,?> child : toRemove) {    element.removeChild(child);  }}  }
class C{  public BrandProductFilter(final String id,final long categoryId,final NavigationContext navigationContext){  super(id,categoryId,navigationContext);  if (categoryId > 0) {    filteringNavigationAllowedIncategory=getCategory().getNavigationByBrand() == null ? false : getCategory().getNavigationByBrand();  }}  }
class C{  public void addRow(Object[] row) throws IOException {  if (!enforcing()) {    return;  }  initialize();  for (  Joiner joiner : _secondaryJoiners) {    requirePrimaryValues(joiner,row);  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public static float saturate(float input){  return clamp(input,0f,1f);}  }
class C{  public void formListDownloadingComplete(HashMap<String,FormDetails> result){  dismissDialog(PROGRESS_DIALOG);  mDownloadFormListTask.setDownloaderListener(null);  mDownloadFormListTask=null;  if (result == null) {    Log.e(t,"Formlist Downloading returned null.  That shouldn't happen");    createAlertDialog(getString(R.string.load_remote_form_error),getString(R.string.error_occured),EXIT);    return;  }  if (result.containsKey(DownloadFormListTask.DL_AUTH_REQUIRED)) {    showDialog(AUTH_DIALOG);  } else   if (result.containsKey(DownloadFormListTask.DL_ERROR_MSG)) {    String dialogMessage=getString(R.string.list_failed_with_error,result.get(DownloadFormListTask.DL_ERROR_MSG).errorStr);    String dialogTitle=getString(R.string.load_remote_form_error);    createAlertDialog(dialogTitle,dialogMessage,DO_NOT_EXIT);  } else {    mFormNamesAndURLs=result;    mFormList.clear();    ArrayList<String> ids=new ArrayList<String>(mFormNamesAndURLs.keySet());    for (int i=0; i < result.size(); i++) {      String formDetailsKey=ids.get(i);      FormDetails details=mFormNamesAndURLs.get(formDetailsKey);      HashMap<String,String> item=new HashMap<String,String>();      item.put(FORMNAME,details.formName);      item.put(FORMID_DISPLAY,((details.formVersion == null) ? "" : (getString(R.string.version) + " " + details.formVersion+ " ")) + "ID: " + details.formID);      item.put(FORMDETAIL_KEY,formDetailsKey);      if (mFormList.size() == 0) {        mFormList.add(item);      } else {        int j;        for (j=0; j < mFormList.size(); j++) {          HashMap<String,String> compareMe=mFormList.get(j);          String name=compareMe.get(FORMNAME);          if (name.compareTo(mFormNamesAndURLs.get(ids.get(i)).formName) > 0) {            break;          }        }        mFormList.add(j,item);      }    }    mFormListAdapter.notifyDataSetChanged();  }}  }
class C{  protected XStream createBasicInstance(){  return new XStream();}  }
class C{  public boolean hasPrimary(){  return getPrimary() != null;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends View>T findViewById(View parentView,int id){  T view=null;  View genericView=parentView.findViewById(id);  try {    view=(T)(genericView);  } catch (  Exception ex) {    String message="Can't cast view (" + id + ") to a "+ view.getClass()+ ".  Is actually a "+ genericView.getClass()+ ".";    Log.e("PercolateAndroidUtils",message);    throw new ClassCastException(message);  }  return view;}  }
class C{  public boolean isInstanceOfFollowedByBranch(){  return instanceOfFollowedByBranch;}  }
class C{  public boolean visit(ReturnStatement node){  return true;}  }
class C{  public void stop(){  if (mMonitorStarted) {    mMonitorStarted=false;    Looper.getMainLooper().setMessageLogging(null);    mBlockCanaryCore.stackSampler.stop();    mBlockCanaryCore.cpuSampler.stop();  }}  }
class C{  public GeneralSubtree(DerValue val) throws IOException {  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for GeneralSubtree.");  }  name=new GeneralName(val.data.getDerValue(),true);  while (val.data.available() != 0) {    DerValue opt=val.data.getDerValue();    if (opt.isContextSpecific(TAG_MIN) && !opt.isConstructed()) {      opt.resetTag(DerValue.tag_Integer);      minimum=opt.getInteger();    } else     if (opt.isContextSpecific(TAG_MAX) && !opt.isConstructed()) {      opt.resetTag(DerValue.tag_Integer);      maximum=opt.getInteger();    } else     throw new IOException("Invalid encoding of GeneralSubtree.");  }}  }
class C{  void writeNormalizedChars(char ch[],int start,int length,boolean isCData,boolean useSystemLineSeparator) throws IOException, org.xml.sax.SAXException {  final java.io.Writer writer=m_writer;  int end=start + length;  for (int i=start; i < end; i++) {    char c=ch[i];    if (CharInfo.S_LINEFEED == c && useSystemLineSeparator) {      writer.write(m_lineSep,0,m_lineSepLen);    } else     if (isCData && (!escapingNotNeeded(c))) {      if (m_cdataTagOpen)       closeCDATA();      if (Encodings.isHighUTF16Surrogate(c)) {        writeUTF16Surrogate(c,ch,i,end);        i++;      } else {        writer.write("&#");        String intStr=Integer.toString((int)c);        writer.write(intStr);        writer.write(';');      }    } else     if (isCData && ((i < (end - 2)) && (']' == c) && (']' == ch[i + 1])&& ('>' == ch[i + 2]))) {      writer.write(CDATA_CONTINUE);      i+=2;    } else {      if (escapingNotNeeded(c)) {        if (isCData && !m_cdataTagOpen) {          writer.write(CDATA_DELIMITER_OPEN);          m_cdataTagOpen=true;        }        writer.write(c);      } else       if (Encodings.isHighUTF16Surrogate(c)) {        if (m_cdataTagOpen)         closeCDATA();        writeUTF16Surrogate(c,ch,i,end);        i++;      } else {        if (m_cdataTagOpen)         closeCDATA();        writer.write("&#");        String intStr=Integer.toString((int)c);        writer.write(intStr);        writer.write(';');      }    }  }}  }
class C{  public final void addScalar(MathVector u,double s){  for (int i=0; i < NDIM; i++) {    data[i]=u.data[i] + s;  }}  }
class C{  public Enumeration pathFromAncestorEnumeration(TreeNode ancestor){  return new PathBetweenNodesEnumeration(ancestor,this);}  }
class C{  protected String[] makeGradient(int shades,String[] colors){  if (shades <= colors.length) {    return colors;  }  Color[] cols=new Color[colors.length];  for (int i=0; i < colors.length; i++) {    cols[i]=SVGUtil.stringToColor(colors[i]);    if (cols[i] == null) {      throw new AbortException("Error parsing color: " + colors[i]);    }  }  double increment=(cols.length - 1.) / shades;  String[] colorShades=new String[shades];  for (int s=0; s < shades; s++) {    final int ppos=Math.min((int)Math.floor(increment * s),cols.length);    final int npos=Math.min((int)Math.ceil(increment * s),cols.length);    if (ppos == npos) {      colorShades[s]=colors[ppos];    } else {      Color prev=cols[ppos];      Color next=cols[npos];      final double mix=(increment * s - ppos) / (npos - ppos);      final int r=(int)((1 - mix) * prev.getRed() + mix * next.getRed());      final int g=(int)((1 - mix) * prev.getGreen() + mix * next.getGreen());      final int b=(int)((1 - mix) * prev.getBlue() + mix * next.getBlue());      colorShades[s]=SVGUtil.colorToString(((r & 0xFF) << 16) | ((g & 0xFF) << 8) | (b & 0xFF));    }  }  return colorShades;}  }
class C{  public void inviteFriends(String appLinkUrl,String previewImageUrl,final Callback cb){}  }
class C{  public StdXMLParser(){  this.builder=null;  this.validator=null;  this.reader=null;  this.entityResolver=new XMLEntityResolver();}  }
class C{  private void warnAboutDiskIfNeeded(DiskUsage usage){  if (usage.getFreeBytes() < DiskThresholdDecider.this.freeBytesThresholdHigh.bytes()) {    logger.warn("high disk watermark [{}] exceeded on {}, shards will be relocated away from this node",DiskThresholdDecider.this.freeBytesThresholdHigh,usage);  } else   if (usage.getFreeBytes() < DiskThresholdDecider.this.freeBytesThresholdLow.bytes()) {    logger.info("low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node",DiskThresholdDecider.this.freeBytesThresholdLow,usage);  }  if (usage.getFreeDiskAsPercentage() < DiskThresholdDecider.this.freeDiskThresholdHigh) {    logger.warn("high disk watermark [{}] exceeded on {}, shards will be relocated away from this node",Strings.format1Decimals(100.0 - DiskThresholdDecider.this.freeDiskThresholdHigh,"%"),usage);  } else   if (usage.getFreeDiskAsPercentage() < DiskThresholdDecider.this.freeDiskThresholdLow) {    logger.info("low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node",Strings.format1Decimals(100.0 - DiskThresholdDecider.this.freeDiskThresholdLow,"%"),usage);  }}  }
class C{  private boolean calculatePLV(){  if (m_M_Product_ID == 0 || m_M_PriceList_Version_ID == 0)   return false;  String sql="SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd," + " bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList," + " bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,"+ " p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,"+ " pl.EnforcePriceLimit, pl.IsTaxIncluded "+ "FROM M_Product p"+ " INNER JOIN M_ProductPrice pp ON (p.M_Product_ID=pp.M_Product_ID)"+ " INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)"+ " INNER JOIN M_Pricelist pl ON (pv.M_PriceList_ID=pl.M_PriceList_ID) "+ "WHERE pv.IsActive='Y'"+ " AND pp.IsActive='Y'"+ " AND p.M_Product_ID=?"+ " AND pv.M_PriceList_Version_ID=?";  m_calculated=false;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,m_M_PriceList_Version_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      m_PriceStd=rs.getBigDecimal(1);      if (rs.wasNull())       m_PriceStd=Env.ZERO;      m_PriceList=rs.getBigDecimal(2);      if (rs.wasNull())       m_PriceList=Env.ZERO;      m_PriceLimit=rs.getBigDecimal(3);      if (rs.wasNull())       m_PriceLimit=Env.ZERO;      m_C_UOM_ID=rs.getInt(4);      m_C_Currency_ID=rs.getInt(6);      m_M_Product_Category_ID=rs.getInt(7);      m_enforcePriceLimit="Y".equals(rs.getString(8));      m_isTaxIncluded="Y".equals(rs.getString(9));      log.fine("M_PriceList_Version_ID=" + m_M_PriceList_Version_ID + " - "+ m_PriceStd);      m_calculated=true;    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_calculated=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return m_calculated;}  }
class C{  private boolean cmd_saveOrder(int C_Order_ID){  log.config("C_Order_ID=" + C_Order_ID);  MOrder order=new MOrder(Env.getCtx(),C_Order_ID,null);  if (order.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Order_ID=" + C_Order_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=(BigDecimal)((VNumber)m_qtyList.get(i)).getValue();      int M_Product_ID=((Integer)m_productList.get(i)).intValue();      MOrderLine ol=new MOrderLine(order);      ol.setM_Product_ID(M_Product_ID,true);      ol.setQty(qty);      ol.setPrice();      ol.setTax();      if (ol.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  log.config("#" + lineCount);  return true;}  }
class C{  private static AnnotatedNullType createBottom(final AnnotatedTypeFactory typeFactory,final Set<? extends AnnotationMirror> annos){  return typeFactory.getAnnotatedNullType(annos);}  }
class C{  @SuppressWarnings("unchecked") public static int binarySearch(Object[] array,Object object){  return binarySearch(array,0,array.length,object);}  }
class C{  public boolean isBeforeInit(){  return getState().isBeforeInit();}  }
class C{  public synchronized StringArraySetting createStringArraySetting(String key,String[] defaultValue){  StringArraySetting result=new StringArraySetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  public TestStackExResponse TestStackEx(TestStackExRequest req) throws ServiceFaultException, ServiceResultException {  return (TestStackExResponse)channel.serviceRequest(req);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.770 -0500",hash_original_method="DE463A9B356349383A2BE8A77EA03DE1",hash_generated_method="0066BAA2498D40AFD198318F58700AE6") private void pruneEmptyContainers(ThreadContainer parent){  ThreadContainer container, prev, next;  for (prev=null, container=parent.child, next=container.next; container != null; prev=container, container=next, next=(container == null ? null : container.next)) {    if (container.threadable == null && container.child == null) {      if (prev == null)       parent.child=container.next; else       prev.next=container.next;      container=prev;    } else     if (container.threadable == null && container.child != null && (container.parent != null || container.child.next == null)) {      ThreadContainer tail;      ThreadContainer kids=container.child;      if (prev == null)       parent.child=kids; else       prev.next=kids;      for (tail=kids; tail.next != null; tail=tail.next)       tail.parent=container.parent;      tail.parent=container.parent;      tail.next=container.next;      next=kids;      container=prev;    } else     if (container.child != null) {      pruneEmptyContainers(container);    }  }}  }
class C{  @Deprecated public YearMonthDay toYearMonthDay(){  return new YearMonthDay(getMillis(),getChronology());}  }
class C{  public void addLinkCondition(){  _specificityC++;  addCondition(Condition.createLinkCondition());}  }
class C{  public ObjectLink(){  this(MAXID,MAXID);}  }
class C{  public static String resolveSchema(String schema,RamlRoot document){  if (document == null || schema == null || schema.indexOf("{") != -1) {    return null;  }  if (document.getSchemas() != null && !document.getSchemas().isEmpty()) {    for (    Map<String,String> map : document.getSchemas()) {      if (map.containsKey(schema)) {        return map.get(schema);      }    }  }  return null;}  }
class C{  private void calculateDelta(double[] b){  double numerator=0.0;  double denominator=0.0;  double sign=1.0;  for (int k=0; k < b.length; k++) {    if (k < mExtremalIndices.size()) {      int extremalIndex=mExtremalIndices.get(k);      numerator+=(b[k] * mGrid.getDesiredResponse()[extremalIndex]);      denominator+=b[k] * sign / mGrid.getWeight()[extremalIndex];      sign=-sign;    } else {      mLog.error("Something went wrong -- the length of b exceeds the set of extremal indices");    }  }  mDelta=numerator / denominator;}  }
class C{  protected boolean existCodeSpan(@NonNull SpannableStringBuilder ssb,int start,int end){  MDCodeSpan[] mdCodeSpans=ssb.getSpans(start,end,MDCodeSpan.class);  if (mdCodeSpans != null && mdCodeSpans.length > 0) {    return true;  }  return false;}  }
class C{  protected void configureByFile(@TestDataFile @NonNls @NotNull String filePath){  try {    final File ioFile=new File(getTestDataPath() + filePath);    String fileText=FileUtilRt.loadFile(ioFile,CharsetToolkit.UTF8,true);    configureFromFileText(ioFile.getName(),fileText);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void showComplex_2D(String format,int rows,int columns,double[] x,String title){  StringBuffer s=new StringBuffer(String.format(title + ": complex array 2D: %d rows, %d columns\n\n",rows,columns));  for (int r=0; r < rows; r++) {    for (int c=0; c < 2 * columns; c=c + 2) {      if (x[r * 2 * columns + c + 1] == 0) {        s.append(String.format(format + "\t",x[r * 2 * columns + c]));        continue;      }      if (x[r * 2 * columns + c] == 0) {        s.append(String.format(format + "i\t",x[r * 2 * columns + c + 1]));        continue;      }      if (x[r * 2 * columns + c + 1] < 0) {        s.append(String.format(format + " - " + format+ "i\t",x[r * 2 * columns + c],-x[r * 2 * columns + c + 1]));        continue;      }      s.append(String.format(format + " + " + format+ "i\t",x[r * 2 * columns + c],x[r * 2 * columns + c + 1]));    }    s.append("\n");  }  System.out.println(s.toString());}  }
class C{  public RemoveImageParams withImage(@NotNull String image){  requireNonNull(image);  this.image=image;  return this;}  }
class C{  public static Complex divide(Complex c1,Complex c2){  double scale=c2.real * c2.real + c2.imag * c2.imag;  return new Complex((c1.real * c2.real + c1.imag * c2.imag) / scale,(c1.imag * c2.real - c1.real * c2.imag) / scale);}  }
class C{  public void addExtension(Extension pExtension){  fExtensions.add(pExtension);}  }
class C{  public boolean removeGlobally(HGHandle handle){  unindex(handle);  return graph.remove(handle);}  }
class C{  public boolean rotatedCubeMatches(World world,int x,int y,int z,int offsetX,int offsetY,int offsetZ,int sizeWidth,int sizeHeight,int sizeDepth,int rotation,SurfaceType type){  x-=width / 2;  z-=depth / 2;switch (rotation) {case 0:    for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++)     for (int xx=x + offsetX; xx < x + offsetX + sizeWidth; xx++)     for (int zz=z + offsetZ; zz < z + offsetZ + sizeDepth; zz++) {      if (!type.matches(world.getBlockState(this.getCheckPos(xx,yy,zz))))       return false;    }  break;case 1:for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++) for (int zz=z + sizeDepth - offsetX - 1; zz > z + sizeDepth - offsetX - sizeWidth - 1; zz--) for (int xx=x + offsetZ; xx < x + offsetZ + sizeDepth; xx++) {  if (!type.matches(world.getBlockState(this.getCheckPos(xx,yy,zz))))   return false;}break;case 2:for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++) for (int xx=x + sizeWidth - offsetX - 1; xx > x + sizeWidth - offsetX - sizeWidth - 1; xx--) for (int zz=z + sizeDepth - offsetZ - 1; zz > z + sizeDepth - offsetZ - sizeDepth - 1; zz--) {if (!type.matches(world.getBlockState(this.getCheckPos(xx,yy,zz)))) return false;}break;case 3:for (int yy=y + offsetY; yy < y + offsetY + sizeHeight; yy++) for (int zz=z + offsetX; zz < z + offsetX + sizeWidth; zz++) for (int xx=x + width - offsetZ - 1; xx > x + width - offsetZ - sizeDepth - 1; xx--) {if (!type.matches(world.getBlockState(this.getCheckPos(xx,yy,zz)))) return false;}break;}return true;}  }
class C{  private boolean hasBufferedUnigram(){  if (outputUnigrams) {    return bufferLen - index == 1;  } else {    return bufferLen == 1 && index == 0;  }}  }
class C{  public final double length(){  return Math.sqrt(x * x + y * y);}  }
class C{  public static File createTempFile(Context context,File folder) throws IOException {  String prefix=String.valueOf(System.currentTimeMillis());  return File.createTempFile(prefix,null,folder);}  }
class C{  public static void init(Context context){  if (mInstance != null) {    throw new IllegalStateException("PermissionsManager has already been initialized. This should be called in your Application class or another singleton");  }  mInstance=new PermissionsManager(context);  try {    DbHelper.init(context);  } catch (  SnappydbException e) {    throw new IllegalStateException("SnappyDB was not initialized!",e);  }}  }
class C{  private Paint createPaint(){  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setStyle(this.paintStyle);  paint.setStrokeWidth(this.paintStrokeWidth);  paint.setStrokeCap(this.lineCap);  paint.setStrokeJoin(Paint.Join.MITER);  if (this.mode == Mode.TEXT) {    paint.setTypeface(this.fontFamily);    paint.setTextSize(this.fontSize);    paint.setTextAlign(this.textAlign);    paint.setStrokeWidth(0F);  }  if (this.mode == Mode.ERASER) {    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    paint.setARGB(0,0,0,0);  } else {    paint.setColor(this.paintStrokeColor);    paint.setShadowLayer(this.blur,0F,0F,this.paintStrokeColor);    paint.setAlpha(this.opacity);  }  return paint;}  }
class C{  public static String maskHTML(String content,boolean maskCR){  if (content == null)   return content;  StringBuffer out=new StringBuffer();  char[] chars=content.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];switch (c) {case '<':      out.append("&lt;");    break;case '>':  out.append("&gt;");break;case '&':out.append("&amp;");break;case '"':out.append("&quot;");break;case '\'':out.append("&#039;");break;case '\n':if (maskCR) out.append("<br>");default :int ii=(int)c;if (ii > 255) out.append("&#").append(ii).append(";"); else out.append(c);break;}}return out.toString();}  }
class C{  public static double max(final double a,final double b,final double c){  return max(max(a,b),c);}  }
class C{  protected void assertZeroUlps(float f1,float f2){  int ulps=getUlps(f1,f2);  if (ulps != 0) {    fail("Expecting zero ulps, but found: " + ulps + "; f1="+ f1+ ", f2="+ f2);  }}  }
class C{  public String toString(){  return label.toString();}  }
class C{  public boolean hasNext(String pattern){  return hasNext(patternCache.forName(pattern));}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof TableInfo)) {    return false;  }  TableInfo other=(TableInfo)obj;  if (databaseName == null) {    if (other.databaseName != null) {      return false;    }  } else   if (!tableUniqueName.equals(other.tableUniqueName)) {    return false;  }  if (tableUniqueName == null) {    if (other.tableUniqueName != null) {      return false;    }  } else   if (!tableUniqueName.equals(other.tableUniqueName)) {    return false;  }  return true;}  }
class C{  public DoubleProperty amplitudeProperty(){  return amplitude;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.327 -0500",hash_original_method="C666B3AD5E916677AE6610DC5A0840E2",hash_generated_method="332ECFB013A8F91084B6B4B5CC989D3B") public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  public TimeOfDay withHourOfDay(int hour){  int[] newValues=getValues();  newValues=getChronology().hourOfDay().set(this,HOUR_OF_DAY,newValues,hour);  return new TimeOfDay(this,newValues);}  }
class C{  @Override public void reset() throws IOException {  ensureOpen();  pos=markedPos;}  }
class C{  public static <T,K>Consumer<Partition<T,K,InsertionTimeList<T>>> evictOlderWithProcess(long time,TimeUnit unit){  long timeMs=TimeUnit.MILLISECONDS.convert(time,unit);  return null;}  }
class C{  public String toRawContent(){  StringTemplate stringTemplate=new StringTemplate(template,DefaultTemplateLexer.class);  Map<String,Object> header=new HashMap<>();  header.put("client",client);  header.put("service",service);  header.put("id",id);  header.put("async",async);  stringTemplate.setAttribute("xroadNamespace",SoapHeader.NS_XROAD);  stringTemplate.setAttribute("header",header);  stringTemplate.setAttribute("request",content);  stringTemplate.setAttribute("boundary",boundary);  return stringTemplate.toString();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenUser[");  buffer.append(", m_id = ").append(m_id);  buffer.append(", m_profile = ").append(m_profile);  buffer.append(", m_genPerms = ").append(m_genPerms);  buffer.append("]");  return buffer.toString();}  }
class C{  protected Node newNode(){  return new SVGOMUseElement();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.add(new Option("\tThe JDBC URL to connect to.\n" + "\t(default: from DatabaseUtils.props file)","url",1,"-url <JDBC URL>"));  newVector.add(new Option("\tThe user to connect with to the database.\n" + "\t(default: none)","user",1,"-user <name>"));  newVector.add(new Option("\tThe password to connect with to the database.\n" + "\t(default: none)","password",1,"-password <password>"));  newVector.add(new Option("\tSQL query of the form\n" + "\t\tSELECT <list of columns>|* FROM <table> [WHERE]\n" + "\tto execute.\n"+ "\t(default: Select * From Results0)","Q",1,"-Q <query>"));  newVector.add(new Option("\tList of column names uniquely defining a DB row\n" + "\t(separated by ', ').\n" + "\tUsed for incremental loading.\n"+ "\tIf not specified, the key will be determined automatically,\n"+ "\tif possible with the used JDBC driver.\n"+ "\tThe auto ID column created by the DatabaseSaver won't be loaded.","P",1,"-P <list of column names>"));  newVector.add(new Option("\tSets incremental loading","I",0,"-I"));  newVector.addElement(new Option("\tReturn sparse rather than normal instances.","S",0,"-S"));  newVector.add(new Option("\tThe custom properties file to use instead of default ones,\n" + "\tcontaining the database parameters.\n" + "\t(default: none)","custom-props",1,"-custom-props <file>"));  return newVector.elements();}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public static boolean isInRange(UIComponent component,long value){  Long minValue=getMinValue(component);  Long maxValue=getMaxValue(component);  return isInRange(value,minValue,maxValue);}  }
class C{  static IProject updateProjectName(IProject workspaceProject,OmniEclipseProject project,Set<OmniEclipseProject> allProjects,IProgressMonitor monitor){  String newName=normalizeProjectName(project);  SubMonitor progress=SubMonitor.convert(monitor,2);  if (newName.equals(workspaceProject.getName())) {    return workspaceProject;  } else {    ensureProjectNameIsFree(newName,allProjects,progress.newChild(1));    return CorePlugin.workspaceOperations().renameProject(workspaceProject,newName,progress.newChild(1));  }}  }
class C{  public static boolean isArff(String location){  if (location.toLowerCase().endsWith(ArffLoader.FILE_EXTENSION.toLowerCase()) || location.toLowerCase().endsWith(ArffLoader.FILE_EXTENSION_COMPRESSED.toLowerCase())) {    return true;  } else {    return false;  }}  }
class C{  public double calculateLogLikelihood(){  logLikelihood=0;  double[] mean=new double[N];  for (int i=0; i < N; i++)   mean[i]=getBranchMean(treeModel,treeModel.getExternalNode(i));  final double[][] data=dataParameter.getParameterAsMatrix();  final boolean[][] commonCluster=determineCommonClusters();  for (int i=0; i < N; i++) {    for (int j=i; j < N; j++) {      if (i != j) {        if (commonCluster[i][j]) {        } else {        }      }    }  }  return logLikelihood;}  }
class C{  public static boolean isAppEngineStandardRuntime(org.eclipse.wst.server.core.IRuntime serverRuntime){  Preconditions.checkNotNull(serverRuntime,"runtime is null");  IRuntimeType runtimeType=serverRuntime.getRuntimeType();  if (runtimeType == null) {    return false;  }  return DEFAULT_RUNTIME_ID.equals(runtimeType.getId());}  }
class C{  public boolean isValidAttachmentPoint(long switchDPID,int switchPort){  if (topology.isAttachmentPointPort(switchDPID,(short)switchPort) == false)   return false;  if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false;  return true;}  }
class C{  public void writeXML(Writer writer,Element element) throws IOException {  writeXML(writer,element,new StringBuilder(),false);}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  protected void new_rhs(){  rhs_pos=0;}  }
class C{  protected void startActivityForResult(Intent intent,int code){  if (fragment == null) {    activity.startActivityForResult(intent,code);  } else {    fragment.startActivityForResult(intent,code);  }}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);  if (reason != null) {    s.print("at ");    reason.printStackTrace(s);  }}  }
class C{  public static Protein valueOf(final String str){  final Protein res=VALUE_OF.get(str);  if (res == null) {    throw new IllegalArgumentException(str);  }  return res;}  }
class C{  public void close(){  if (parsingComplete()) {    close(this.input.getCharacterStream());    close(this.input.getByteStream());  }}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  private void mapToSerial(Map<String,Class<?>> map) throws SerialException {  try {    for (int i=0; i < attribs.length; i++) {      if (attribs[i] instanceof Struct) {        attribs[i]=new SerialStruct((Struct)attribs[i],map);      } else       if (attribs[i] instanceof SQLData) {        attribs[i]=new SerialStruct((SQLData)attribs[i],map);      } else       if (attribs[i] instanceof Blob) {        attribs[i]=new SerialBlob((Blob)attribs[i]);      } else       if (attribs[i] instanceof Clob) {        attribs[i]=new SerialClob((Clob)attribs[i]);      } else       if (attribs[i] instanceof Ref) {        attribs[i]=new SerialRef((Ref)attribs[i]);      } else       if (attribs[i] instanceof java.sql.Array) {        attribs[i]=new SerialArray((java.sql.Array)attribs[i],map);      }    }  } catch (  SQLException e) {    throw new SerialException(e.getMessage());  }  return;}  }
class C{  public void clearEventListeners(){  peerEventListeners.clear();}  }
class C{  public final boolean isCachingEnabled(){  return cachingIsEnabled;}  }
class C{  public boolean hasValuesByLocalPathRecursive(String localPath){  localPath=LocalPath.canonicalize(localPath);synchronized (lock) {    final Set<PendingChange> changes=changesByParentLocalPath.get(localPath);    return changes != null && changes.size() > 0;  }}  }
class C{  public static void verifyGetAfterSet(FinishedTriggers finishedSet){  ExecutableTrigger trigger=ExecutableTrigger.create(AfterAll.of(AfterFirst.of(AfterPane.elementCountAtLeast(3),AfterWatermark.pastEndOfWindow()),AfterAll.of(AfterPane.elementCountAtLeast(10),AfterProcessingTime.pastFirstElementInPane())));  verifyGetAfterSet(finishedSet,trigger);  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(0).subTriggers().get(1));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(0));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(1));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(1).subTriggers().get(1));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(1).subTriggers().get(0));}  }
class C{  public Vertex createUser(final String username,final String password){  if (findUser(username) != null)   throw new IllegalStateException("User with this name already exists");  if (supportsTransactions)   graph.tx().rollback();  try {    final Vertex v=graph.addVertex(T.label,CredentialGraphTokens.VERTEX_LABEL_USER,CredentialGraphTokens.PROPERTY_USERNAME,username,CredentialGraphTokens.PROPERTY_PASSWORD,BCrypt.hashpw(password,BCrypt.gensalt(BCRYPT_ROUNDS)));    if (supportsTransactions)     graph.tx().commit();    return v;  } catch (  Exception ex) {    if (supportsTransactions)     graph.tx().rollback();    throw new RuntimeException(ex);  }}  }
class C{  private void list(final Class<?> clazz){  Field[] fields=clazz.getDeclaredFields();  for (  Field field : fields) {    field.setAccessible(true);    String name=field.getName();    String type=field.getType().toString();    String value=getValue(field);    fieldsTypesValues.put(name,new Pair<String,String>(type,value));  }}  }
class C{  public void loadRotate(float rot){  loadIdentity();  float c, s;  rot*=(float)(java.lang.Math.PI / 180.0f);  c=(float)java.lang.Math.cos(rot);  s=(float)java.lang.Math.sin(rot);  mMat[0]=c;  mMat[1]=-s;  mMat[3]=s;  mMat[4]=c;}  }
class C{  public boolean add(terminal_set other) throws internal_error {  not_null(other);  BitSet copy=(BitSet)_elements.clone();  _elements.or(other._elements);  return !_elements.equals(copy);}  }
class C{  public void doPost(String requestUrl,OnDaVinciRequestListener requestListener){  doRequest(Request.Method.POST,requestUrl,null,null,requestListener);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.RETURN_TYPE__MULTIPLICITY:    setMultiplicity((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  FileSystemView fsv=null;  if (isAcceptAllFileFilterUsed()) {    removeChoosableFileFilter(getAcceptAllFileFilter());  }  if (fileSystemView.equals(FileSystemView.getFileSystemView())) {    fsv=fileSystemView;    fileSystemView=null;  }  s.defaultWriteObject();  if (fsv != null) {    fileSystemView=fsv;  }  if (isAcceptAllFileFilterUsed()) {    addChoosableFileFilter(getAcceptAllFileFilter());  }  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  static public String[] list(){  loadTypefaces();  return fontList;}  }
class C{  public static double P_Precision(int Y[][],int Ypred[][],int j){  return P_Precision(MatrixUtils.getCol(Y,j),MatrixUtils.getCol(Ypred,j));}  }
class C{  public int activeGroupCount(){  int count=0;synchronized (this.childrenGroupsLock) {    for (int i=0; i < numGroups; i++) {      count+=1 + this.childrenGroups[i].activeGroupCount();    }  }  return count;}  }
class C{  private static List<TextRange> addPreviousComma(PsiElement e,int cursorOffset){  PsiElement prevSibling=e.getPrevSibling();  TextRange textRange=e.getTextRange();  TextRange offsetRange=null;  if (prevSibling != null) {    if (prevSibling instanceof PsiWhiteSpace) {      PsiElement prevCommaSibling=prevSibling.getPrevSibling();      if (prevCommaSibling != null) {        ASTNode node=prevCommaSibling.getNode();        if (node != null) {          IElementType commaType=node.getElementType();          if (commaType == PyTokenTypes.COMMA) {            offsetRange=new TextRange(textRange.getStartOffset() - 2,textRange.getEndOffset());            if (offsetRange.contains(cursorOffset) && offsetRange.getLength() > 1) {              return Collections.singletonList(offsetRange);            }          }        }      }    } else {      ASTNode node=prevSibling.getNode();      if (node != null) {        IElementType commaType=node.getElementType();        if (commaType == PyTokenTypes.COMMA) {          offsetRange=new TextRange(textRange.getStartOffset() - 1,textRange.getEndOffset());        }      }    }    if (offsetRange != null) {      if (offsetRange.contains(cursorOffset) && offsetRange.getLength() > 1) {        return Collections.singletonList(offsetRange);      }    }  }  return Collections.emptyList();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.568 -0500",hash_original_method="317E4D17172E12E605B8E6C02B3A9523",hash_generated_method="F21628E06D2EB101E8BF08E6003BD5F3") public boolean isSipURI(){  return false;}  }
class C{  protected CCAnimation(String name,float delay,ArrayList<CCSpriteFrame> frames){  delay_=delay;  name_=name;  frames_=new ArrayList<CCSpriteFrame>();  if (frames != null)   frames_.addAll(frames);}  }
class C{  public double project(Coordinate pt){  return LengthIndexOfPoint.indexOf(linearGeom,pt);}  }
class C{  public int numNodes(){  return numNodes(rootNode);}  }
class C{  public void sendEasyDccMessage(EasyDccMessage m,EasyDccListener reply){  sendMessage(m,reply);}  }
class C{  public static void increaseTocPageCount(){  tocPageCount++;}  }
class C{  public synchronized void put(IPRangeNode<Map> ipr,boolean doCheck){  IPRangeNode parent=ipr.isV4() ? ipv4 : ipv6;  parent.addChild(ipr,doCheck);  version++;  isSorted=false;}  }
class C{  public List<BytecodeInstruction> registerMethodNode(MethodNode node,String className,String methodName){  registerMethodNode(node);  int lastLineNumber=-1;  int bytecodeOffset=0;  for (int instructionId=0; instructionId < node.instructions.size(); instructionId++) {    AbstractInsnNode instructionNode=node.instructions.get(instructionId);    BytecodeInstruction instruction=BytecodeInstructionFactory.createBytecodeInstruction(classLoader,className,methodName,instructionId,bytecodeOffset,instructionNode);    if (instruction.isLineNumber())     lastLineNumber=instruction.getLineNumber(); else     if (lastLineNumber != -1)     instruction.setLineNumber(lastLineNumber);    bytecodeOffset+=getBytecodeIncrement(instructionNode);    if (!instruction.isLabel() && !instruction.isLineNumber() && !instruction.isFrame()) {      bytecodeOffset++;    }    registerInstruction(instruction);  }  List<BytecodeInstruction> r=getInstructionsIn(className,methodName);  if (r == null || r.size() == 0)   throw new IllegalStateException("expect instruction pool to return non-null non-empty list of instructions for a previously registered method " + methodName);  return r;}  }
class C{  protected void begin() throws MailboxException {  try {    getSession().refresh(true);  } catch (  RepositoryException e) {  }}  }
class C{  public EditText real(){  return mEditText;}  }
class C{  private TClassifier explicitOrImplicitSuperType(TClassifier tclassifier){  Optional<TClassifier> expl=explicitSuperType(tclassifier);  if (expl.isPresent())   return expl.get();  List<ParameterizedTypeRef> superTypes=implicitSuperTypes(tclassifier);  if (!superTypes.isEmpty()) {    return (TClassifier)superTypes.get(0).getDeclaredType();  }  return null;}  }
class C{  public SubgraphSalsa(LeftIndexedBipartiteGraph bipartiteGraph,int expectedNodesToHit,int expectedNumLeftNodes,StatsReceiver statsReceiver){  SalsaSubgraphInternalState salsaSubgraphInternalState=new SalsaSubgraphInternalState(bipartiteGraph,new SalsaStats(),expectedNodesToHit,expectedNumLeftNodes);  this.salsaIterationsSubgraph=new SalsaIterations<LeftIndexedBipartiteGraph>(salsaSubgraphInternalState,new LeftSubgraphSalsaIteration(salsaSubgraphInternalState,new SalsaNodeVisitor.WeightedNodeVisitor(salsaSubgraphInternalState.getVisitedRightNodes())),new RightSubgraphSalsaIteration(salsaSubgraphInternalState),new FinalSubgraphSalsaIteration(salsaSubgraphInternalState));  this.salsaSelectResultsSubgraph=new SalsaSelectResults<LeftIndexedBipartiteGraph>(salsaSubgraphInternalState);  this.statsReceiver=statsReceiver.scope("SubgraphSALSA");  this.numRequestsCounter=this.statsReceiver.counter("numRequests");}  }
class C{  public <T>ArrayGeneratorBuilder<T> ofClass(Source<T> source,Class<T> c){  return new ArrayGeneratorBuilder<T>(source,c);}  }
class C{  private StringBuffer subformat(Object[] arguments,StringBuffer result,FieldPosition fp,List<AttributedCharacterIterator> characterIterators){  int lastOffset=0;  int last=result.length();  for (int i=0; i <= maxOffset; ++i) {    result.append(pattern.substring(lastOffset,offsets[i]));    lastOffset=offsets[i];    int argumentNumber=argumentNumbers[i];    if (arguments == null || argumentNumber >= arguments.length) {      result.append('{').append(argumentNumber).append('}');      continue;    }    if (false) {      result.append('\uFFFD');    } else {      Object obj=arguments[argumentNumber];      String arg=null;      Format subFormatter=null;      if (obj == null) {        arg="null";      } else       if (formats[i] != null) {        subFormatter=formats[i];        if (subFormatter instanceof ChoiceFormat) {          arg=formats[i].format(obj);          if (arg.indexOf('{') >= 0) {            subFormatter=new MessageFormat(arg,locale);            obj=arguments;            arg=null;          }        }      } else       if (obj instanceof Number) {        subFormatter=NumberFormat.getInstance(locale);      } else       if (obj instanceof Date) {        subFormatter=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,locale);      } else       if (obj instanceof String) {        arg=(String)obj;      } else {        arg=obj.toString();        if (arg == null)         arg="null";      }      if (characterIterators != null) {        if (last != result.length()) {          characterIterators.add(createAttributedCharacterIterator(result.substring(last)));          last=result.length();        }        if (subFormatter != null) {          AttributedCharacterIterator subIterator=subFormatter.formatToCharacterIterator(obj);          append(result,subIterator);          if (last != result.length()) {            characterIterators.add(createAttributedCharacterIterator(subIterator,Field.ARGUMENT,Integer.valueOf(argumentNumber)));            last=result.length();          }          arg=null;        }        if (arg != null && arg.length() > 0) {          result.append(arg);          characterIterators.add(createAttributedCharacterIterator(arg,Field.ARGUMENT,Integer.valueOf(argumentNumber)));          last=result.length();        }      } else {        if (subFormatter != null) {          arg=subFormatter.format(obj);        }        last=result.length();        result.append(arg);        if (i == 0 && fp != null && Field.ARGUMENT.equals(fp.getFieldAttribute())) {          fp.setBeginIndex(last);          fp.setEndIndex(result.length());        }        last=result.length();      }    }  }  result.append(pattern.substring(lastOffset,pattern.length()));  if (characterIterators != null && last != result.length()) {    characterIterators.add(createAttributedCharacterIterator(result.substring(last)));  }  return result;}  }
class C{  public IXMLElement createElement(String fullName,String namespace,String systemID,int lineNr){  return new XMLElement(fullName,namespace,systemID,lineNr);}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme!");  }  if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme-specific part!");  }  setScheme(p_scheme);  setPath(p_schemeSpecificPart);}  }
class C{  public String describeParams(){  StringBuilder sb=new StringBuilder();  sb.append("\t").append("maxQueryTermsPerField  : ").append(maxQueryTermsPerField).append("\n");  sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n");  sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n");  sb.append("\t").append("fieldNames     : ");  String delim="";  for (  String fieldName : getFieldNames()) {    sb.append(delim).append(fieldName);    delim=", ";  }  sb.append("\n");  sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n");  sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n");  return sb.toString();}  }
class C{  public static void runTrialParallel(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  QuickSort<Integer> qs=new QuickSort<Integer>(ar);  qs.setPivotMethod(selector);  qs.setNumberHelperThreads(NUM_THREADS);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  private void readObject(){}  }
class C{  public static long ptsToUs(long pts){  return (pts * C.MICROS_PER_SECOND) / 90000;}  }
class C{  public static final JIPNumber create(final double d){  return new JIPNumber(Expression.createDouble(d));}  }
class C{  public Builder backgroundColorRes(@IntegerRes int sliderBackgroundColorRes){  this.sliderBackgroundColorRes=sliderBackgroundColorRes;  return this;}  }
class C{  private void updateSelection(final SensorSelectionEvent event){  Set<Sensor> selection=event.getSelection();  Set<Sensor> oldSelection=event.getOldSelection();  Set<Sensor> difference=new HashSet<Sensor>(oldSelection);  difference.removeAll(selection);  for (  Sensor sensor : difference) {    sensorNodes.get(sensor).setSelected(false);  }  for (  Sensor sensor : selection) {    sensorNodes.get(sensor).setSelected(true);  }}  }
class C{  public static String decrypt(String encrypted) throws GeneralSecurityException {  return new String(decrypt(encrypted.getBytes()));}  }
class C{  public int oom_score() throws IOException {  return Integer.parseInt(read("oom_score"));}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  if (first == null) {    buf.append("empty");  } else {    LiveSetElement ptr=first;    while (ptr != null) {      buf.append(ptr.getRegisterOperand()).append("  ");      ptr=ptr.getNext();    }  }  return buf.toString();}  }
class C{  @Override public final void collect(){  VM.assertions.fail("GC Triggered in NoGC Plan. Is -X:gc:ignoreSystemGC=true ?");}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Override public ServiceRefAmp ref(){  if (_isForeign) {    return null;  }  if (workers() > 1) {    return buildWorkers();  }  if (_worker != null) {    return buildWorker();  } else {    return buildService();  }}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public static long New(String s){  return Extend(IrredPoly,s);}  }
class C{  public static String decodeString(String s){  int backSlashIdx=s.indexOf('\\');  if (backSlashIdx == -1) {    return s;  }  int startIdx=0;  int sLength=s.length();  StringBuilder sb=new StringBuilder(sLength);  while (backSlashIdx != -1) {    sb.append(s.substring(startIdx,backSlashIdx));    if (backSlashIdx + 1 >= sLength) {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    char c=s.charAt(backSlashIdx + 1);    if (c == 't') {      sb.append('\t');      startIdx=backSlashIdx + 2;    } else     if (c == 'n') {      sb.append('\n');      startIdx=backSlashIdx + 2;    } else     if (c == 'r') {      sb.append('\r');      startIdx=backSlashIdx + 2;    } else     if (c == 'b') {      sb.append('\b');      startIdx=backSlashIdx + 2;    } else     if (c == 'f') {      sb.append('\f');      startIdx=backSlashIdx + 2;    } else     if (c == '"') {      sb.append('"');      startIdx=backSlashIdx + 2;    } else     if (c == '\'') {      sb.append('\'');      startIdx=backSlashIdx + 2;    } else     if (c == '\\') {      sb.append('\\');      startIdx=backSlashIdx + 2;    } else {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    backSlashIdx=s.indexOf('\\',startIdx);  }  sb.append(s.substring(startIdx));  return sb.toString();}  }
class C{  public boolean isAirBlock(IBlockAccess world){  return world.isAirBlock(xCoord,yCoord,zCoord);}  }
class C{  public ServiceStateException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.296 -0400",hash_original_method="0F984CED9FC66315B02837114DDE7991",hash_generated_method="F7FDE07C39E100578759DE5512B61C47") public boolean connectInputDevice(BluetoothDevice device){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_ADMIN_PERM,"Need BLUETOOTH_ADMIN permission");  BluetoothDeviceProfileState state=mDeviceProfileState.get(device.getAddress());synchronized (mBluetoothInputProfileHandler) {    return mBluetoothInputProfileHandler.connectInputDevice(device,state);  }}  }
class C{  protected boolean removeLayoutTurnout(LayoutTurnout o){  if (!noWarnLayoutTurnout) {    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString("Question1r"),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonYes"),Bundle.getMessage("ButtonNo"),rb.getString("ButtonYesPlus")},Bundle.getMessage("ButtonNo"));    if (selectedValue == 1) {      return (false);    }    if (selectedValue == 2) {      noWarnLayoutTurnout=true;    }  }  if (selectedObject == o) {    selectedObject=null;  }  if (prevSelectedObject == o) {    prevSelectedObject=null;  }  TrackSegment t=(TrackSegment)o.getConnectA();  if (t != null) {    substituteAnchor(o.getCoordsA(),o,t);  }  t=(TrackSegment)o.getConnectB();  if (t != null) {    substituteAnchor(o.getCoordsB(),o,t);  }  t=(TrackSegment)o.getConnectC();  if (t != null) {    substituteAnchor(o.getCoordsC(),o,t);  }  t=(TrackSegment)o.getConnectD();  if (t != null) {    substituteAnchor(o.getCoordsD(),o,t);  }  LayoutBlock b=o.getLayoutBlock();  if (b != null) {    b.decrementUse();  }  if ((o.getTurnoutType() == LayoutTurnout.DOUBLE_XOVER) || (o.getTurnoutType() == LayoutTurnout.RH_XOVER) || (o.getTurnoutType() == LayoutTurnout.LH_XOVER)) {    LayoutBlock b2=o.getLayoutBlockB();    if ((b2 != null) && (b2 != b)) {      b2.decrementUse();    }    LayoutBlock b3=o.getLayoutBlockC();    if ((b3 != null) && (b3 != b) && (b3 != b2)) {      b3.decrementUse();    }    LayoutBlock b4=o.getLayoutBlockD();    if ((b4 != null) && (b4 != b) && (b4 != b2)&& (b4 != b3)) {      b4.decrementUse();    }  }  for (int i=0; i < turnoutList.size(); i++) {    LayoutTurnout lt=turnoutList.get(i);    if (lt == o) {      turnoutList.remove(i);      setDirty(true);      repaint();      return (true);    }  }  return (false);}  }
class C{  public Tree(T label){  this.label=label;  height=0;  children=new ArrayList<>();  childrenEdgeLabels=new ArrayList<>();  parent=null;  numNodes=1;}  }
class C{  public boolean isRotationNeeded(final String data,final File file){  final long now=System.currentTimeMillis();  if (m_currentRotation + TIME_24_HOURS < now) {    return true;  } else {    return false;  }}  }
class C{  public Set<Integer> nextIntSetWithRange(int lowerBound,int upperBound,int size){  if (upperBound <= lowerBound) {    throw new IllegalArgumentException("RandomGenerator.nextIntInRange : the upper bound of the " + "random number range should be greater than the lower bound.");  }  if ((upperBound - lowerBound) < size) {    throw new IllegalArgumentException("RandomGenerator.nextIntInRange : impossible to deliver the desired set of integeres --> range is too small.");  }  Set<Integer> set=new HashSet<>();  while (set.size() < size) {    set.add(nextIntInRange(lowerBound,upperBound));  }  return set;}  }
class C{  public Monitor(){  monitor=sysCall.sysMonitorCreate();}  }
class C{  public void addLast(RTLStatement statement){  if (statement != null) {    sequence.addLast(statement);  }}  }
class C{  public static void yieldIfTest(){  if (_testTime > 0) {  }}  }
class C{  protected static Integer insertDistribute(Session session,Integer bookID,int fdrid,int typeDest,int idDest,Timestamp currentDate,int typeOrig,int idOrig,String userName,Integer userId,int distributionType,String messageForUser,String entidad) throws HibernateException, SQLException, BookException, Exception {  boolean distribute=true;  int distributionID=0;  List distReg=ISicresQueries.getScrDistreg(session,bookID,fdrid,typeDest,idDest);  for (Iterator it=distReg.iterator(); it.hasNext(); ) {    ScrDistreg scr=(ScrDistreg)it.next();    if (scr.getState() != ISDistribution.STATE_RECHAZADO && scr.getState() != ISDistribution.STATE_REDISTRIBUIDO) {      distribute=false;    }  }  if (distribute) {    distributionID=DBEntityDAOFactory.getCurrentDBEntityDAO().getNextIdForScrDistReg(userId,entidad);    Date dateState=BBDDUtils.getDateFromTimestamp(currentDate);    ISicresSaveQueries.saveScrDistreg(session,distributionID,bookID,fdrid,dateState,typeOrig,idOrig,typeDest,idDest,1,dateState,messageForUser);    ISDistribution isDist=new ISDistribution();    isDist.setDistState(session,distributionID,ISDistribution.STATE_PENDIENTE,dateState,userName,userId,entidad,isDataBaseCaseSensitive(entidad));    isDist.changeStateAcceptRedis(session,bookID,fdrid,idOrig,userName,userId,distributionType,currentDate,entidad,isDataBaseCaseSensitive(entidad));  }  return new Integer(distributionID);}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public Route(Vertx vertx,ResourceStorage storage,LoggingResourceManager loggingResourceManager,MonitoringHandler monitoringHandler,String userProfilePath,HttpHook httpHook,String urlPattern){  this.vertx=vertx;  this.storage=storage;  this.loggingResourceManager=loggingResourceManager;  this.monitoringHandler=monitoringHandler;  this.userProfilePath=userProfilePath;  this.httpHook=httpHook;  this.urlPattern=urlPattern;  createRule();  createHttpClient();  createForwarder();}  }
class C{  @Override public boolean add(E o){  return map.put(o,FAKE) == null;}  }
class C{  public void reset(TicTacToeBoard newBoard){  board=newBoard;}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInIdleState);  assertTrue(!stateErrors.errorInIdleStateAfterReset);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public String format(char c){  if (fmt != 'c')   throw new java.lang.IllegalArgumentException();  String r="" + c;  return pad(r);}  }
class C{  public static void doDeactivateCluster(DbClient dbClient,Cluster cluster){  List<NamedElementQueryResultList.NamedElement> hostUris=listChildren(dbClient,cluster.getId(),Host.class,"label","cluster");  for (  NamedElementQueryResultList.NamedElement hostUri : hostUris) {    Host host=dbClient.queryObject(Host.class,hostUri.getId());    if (host != null && !host.getInactive()) {      removeClusterFromHost(dbClient,host);    }  }  _log.info("marking cluster for deletion: {} {}",cluster.getLabel(),cluster.getId());  dbClient.markForDeletion(cluster);  EventUtils.deleteResourceEvents(dbClient,cluster.getId());}  }
class C{  public static void pr(Object object){  init();  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  utilAsString.setPrintWriter(pw);  utilAsString.print(object);  pw.flush();  if (XRLog.isLoggingEnabled()) {    XRLog.general(sw.getBuffer().toString());  }}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  public RemoteInterpreterEvent pollEvent(){synchronized (eventQueue) {    if (eventQueue.isEmpty()) {      try {        eventQueue.wait(1000);      } catch (      InterruptedException e) {      }    }    if (eventQueue.isEmpty()) {      return new RemoteInterpreterEvent(RemoteInterpreterEventType.NO_OP,"");    } else {      RemoteInterpreterEvent event=eventQueue.remove(0);      logger.debug("Send event {}",event.getType());      return event;    }  }}  }
class C{  public SnmpCounter64(Long v) throws IllegalArgumentException {  this(v.longValue());}  }
class C{  public static Map<String,List<String>> parseMetaData(XmlPullParser parser) throws XmlPullParserException, IOException {  int eventType=parser.getEventType();  if ((eventType == XmlPullParser.START_TAG) && parser.getName().equals(MetaData.ELEMENT_NAME) && parser.getNamespace().equals(MetaData.NAMESPACE)) {    Map<String,List<String>> metaData=new Hashtable<String,List<String>>();    eventType=parser.nextTag();    while ((eventType != XmlPullParser.END_TAG) || (!parser.getName().equals(MetaData.ELEMENT_NAME))) {      String name=parser.getAttributeValue(0);      String value=parser.nextText();      if (metaData.containsKey(name)) {        List<String> values=metaData.get(name);        values.add(value);      } else {        List<String> values=new ArrayList<String>();        values.add(value);        metaData.put(name,values);      }      eventType=parser.nextTag();    }    return metaData;  }  return Collections.emptyMap();}  }
class C{  private int actualCount(int index,int count){  return index + count > sizeMap.size() ? sizeMap.size() - index : count;}  }
class C{  public static void createClientCache(String host,Integer port,String name) throws Exception {  ClientInterestNotifyDUnitTest test=new ClientInterestNotifyDUnitTest();  Cache cacheClient=test.createCache(createProperties1());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  factory.setConcurrencyChecksEnabled(false);  createPool2(host,factory,port);  factory.setCacheListener(test.new EventListener(name + REGION_NAME1));  RegionAttributes attrs=factory.create();  cacheClient.createRegion(REGION_NAME1,attrs);  factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  factory.setConcurrencyChecksEnabled(false);  createPool2(host,factory,port);  factory.setCacheListener(test.new EventListener(name + REGION_NAME2));  attrs=factory.create();  cacheClient.createRegion(REGION_NAME2,attrs);  factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  factory.setConcurrencyChecksEnabled(false);  createPool2(host,factory,port);  factory.setCacheListener(test.new EventListener(name + REGION_NAME3));  attrs=factory.create();  cacheClient.createRegion(REGION_NAME3,attrs);}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new LatvianAnalyzer();  checkOneTerm(a,"tirgiem","tirg");  checkOneTerm(a,"tirgus","tirg");  assertAnalyzesTo(a,"un",new String[]{});  a.close();}  }
class C{  public EditableLabeledOMPoly(LabeledOMPoly omp){  setGraphic(omp);}  }
class C{  public boolean isSelectionUserDefinedRosterGroup(){  return (selectedRosterGroup != null && !selectedRosterGroup.equals(Roster.ALLENTRIES));}  }
class C{  protected void initializeUIControls(HotSpot parent){  this.scrollKnobControl=new ScrollKnob(parent,this);  this.scrollUpControl=new ScrollControl(parent,this,UNIT_UP);  this.scrollDownControl=new ScrollControl(parent,this,UNIT_DOWN);  this.scrollUpBlockControl=new ScrollControl(parent,this,BLOCK_UP);  this.scrollDownBlockControl=new ScrollControl(parent,this,BLOCK_DOWN);}  }
class C{  public PoolingByteArrayOutputStream(com.android.volley.toolbox.ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private void updateTrackedBranch(){  try {    final VirtualFile root=gitRoot();    String currentBranch=(String)myBranchComboBox.getSelectedItem();    GitBranch trackedBranch=null;    if (currentBranch != null) {      String remote=GitConfigUtil.getValue(myProject,root,"branch." + currentBranch + ".remote");      String mergeBranch=GitConfigUtil.getValue(myProject,root,"branch." + currentBranch + ".merge");      if (remote == null || mergeBranch == null) {        trackedBranch=null;      } else {        mergeBranch=GitBranchUtil.stripRefsPrefix(mergeBranch);        if (remote.equals(".")) {          trackedBranch=new GitSvnRemoteBranch(mergeBranch,GitBranch.DUMMY_HASH);        } else {          GitRemote r=GitBranchUtil.findRemoteByNameOrLogError(myProject,root,remote);          if (r != null) {            trackedBranch=new GitStandardRemoteBranch(r,mergeBranch,GitBranch.DUMMY_HASH);          }        }      }    }    if (trackedBranch != null) {      myOntoComboBox.setSelectedItem(trackedBranch);    } else {      GitUIUtil.getTextField(myOntoComboBox).setText("");    }    GitUIUtil.getTextField(myFromComboBox).setText("");  } catch (  VcsException e) {    GitUIUtil.showOperationError(myProject,e,"git config");  }}  }
class C{  private int associate(DiscoveryInformation discovered,int maxAttempts){  if (_maxAssocAttempts == 0)   return 0;  URL opUrl=discovered.getOPEndpoint();  String opEndpoint=opUrl.toString();  _log.info("Trying to associate with " + opEndpoint + " attempts left: "+ maxAttempts);  Association a=_associations.load(opEndpoint);  if (a != null && (Association.FAILED_ASSOC_HANDLE.equals(a.getHandle()) || a.getExpiry().getTime() - System.currentTimeMillis() > _preExpiryAssocLockInterval * 1000)) {    _log.info("Found an existing association: " + a.getHandle());    return 0;  }  String handle=Association.FAILED_ASSOC_HANDLE;  LinkedHashMap requests=new LinkedHashMap();  if (discovered.isVersion2()) {    requests.put(AssociationSessionType.NO_ENCRYPTION_SHA1MAC,null);    requests.put(AssociationSessionType.NO_ENCRYPTION_SHA256MAC,null);    requests.put(AssociationSessionType.DH_SHA1,null);    requests.put(AssociationSessionType.DH_SHA256,null);  } else {    requests.put(AssociationSessionType.NO_ENCRYPTION_COMPAT_SHA1MAC,null);    requests.put(AssociationSessionType.DH_COMPAT_SHA1,null);  }  if (_prefAssocSessEnc.isVersion2() == discovered.isVersion2()) {    requests.remove(_prefAssocSessEnc);    requests.put(_prefAssocSessEnc,null);  }  Stack reqStack=new Stack();  Iterator iter=requests.keySet().iterator();  while (iter.hasNext()) {    AssociationSessionType type=(AssociationSessionType)iter.next();    AssociationRequest newReq=createAssociationRequest(type,opUrl);    if (newReq != null)     reqStack.push(newReq);  }  int attemptsLeft=maxAttempts;  LinkedHashMap alreadyTried=new LinkedHashMap();  while (attemptsLeft > 0 && !reqStack.empty()) {    try {      attemptsLeft--;      AssociationRequest assocReq=(AssociationRequest)reqStack.pop();      if (DEBUG)       _log.debug("Trying association type: " + assocReq.getType());      if (alreadyTried.keySet().contains(assocReq.getType())) {        if (DEBUG)         _log.debug("Already tried.");        continue;      }      alreadyTried.put(assocReq.getType(),null);      ParameterList respParams=new ParameterList();      int status=call(opEndpoint,assocReq,respParams);      if (status == HttpStatus.SC_OK) {        AssociationResponse assocResp;        assocResp=AssociationResponse.createAssociationResponse(respParams);        Association assoc=assocResp.getAssociation(assocReq.getDHSess());        handle=assoc.getHandle();        AssociationSessionType respType=assocResp.getType();        if (respType.equals(assocReq.getType()) || (!discovered.isVersion2() && respType.getHAlgorithm() == null && createAssociationRequest(respType,opUrl) != null)) {          _associations.save(opEndpoint,assoc);          _log.info("Associated with " + discovered.getOPEndpoint() + " handle: "+ assoc.getHandle());          break;        } else         _log.info("Discarding association response, " + "not matching consumer criteria");      } else       if (status == HttpStatus.SC_BAD_REQUEST) {        _log.info("Association attempt failed.");        AssociationError assocErr=AssociationError.createAssociationError(respParams);        AssociationSessionType opType=AssociationSessionType.create(assocErr.getSessionType(),assocErr.getAssocType());        if (alreadyTried.keySet().contains(opType))         continue;        AssociationRequest newReq=createAssociationRequest(opType,opUrl);        if (newReq != null) {          if (DEBUG)           _log.debug("Retrieved association type " + "from the association error: " + newReq.getType());          reqStack.push(newReq);        }      }    } catch (    OpenIDException e) {      _log.error("Error encountered during association attempt.",e);    }  }  if (Association.FAILED_ASSOC_HANDLE.equals(handle) && _failedAssocExpire > 0)   _associations.save(opEndpoint,Association.getFailedAssociation(_failedAssocExpire));  return maxAttempts - attemptsLeft;}  }
class C{  public DebugMessageRawArgument(final byte[] data){  super(DebugArgumentType.DATA);  Preconditions.checkNotNull(data,"IE01052: Data argument can not be null");  appendBytes(data);}  }
class C{  public static List<Audit> findByHostName(EntityManager em,String hostName){  requireArgument(em != null,"Entity manager cannot be null.");  requireArgument(hostName != null && !hostName.isEmpty(),"Host name cannot be null or empty.");  TypedQuery<Audit> query=em.createNamedQuery("Audit.findByHostName",Audit.class);  try {    query.setParameter("hostName",hostName);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<Audit>(0);  }}  }
class C{  private static void checkTitleFont(){  TitledBorder titledBorder=new TitledBorder(new EmptyBorder(1,1,1,1));  Font defaultFont=UIManager.getLookAndFeelDefaults().getFont("TitledBorder.font");  Font titledBorderFont=titledBorder.getTitleFont();  if (defaultFont == null) {    if (titledBorderFont == null) {      return;    } else {      throw new RuntimeException("TitledBorder default font should be null");    }  }  if (!defaultFont.equals(titledBorderFont)) {    throw new RuntimeException("L&F default font " + defaultFont.toString() + " differs from TitledBorder font "+ titledBorderFont.toString());  }  Font font=new Font("Dialog",Font.PLAIN,10);  titledBorder.setTitleFont(font);  if (!font.equals(titledBorder.getTitleFont())) {    throw new RuntimeException("TitledBorder font should be " + font.toString());  }  titledBorder.setTitleFont(null);  if (!defaultFont.equals(titledBorder.getTitleFont())) {    throw new RuntimeException("L&F default font " + defaultFont.toString() + " differs from TitledBorder font "+ titledBorderFont.toString());  }}  }
class C{  private double determinant(){  return m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m20 * m12) + m02 * (m10 * m21 - m20 * m11);}  }
class C{  public boolean isUpdateable(){  Object oo=get_Value(COLUMNNAME_IsUpdateable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testValueOfNull() throws Exception {  try {    WebXmlVersion.valueOf((DocType)null);    fail("Expected NullPointerException");  } catch (  NullPointerException expected) {  }}  }
class C{  protected Element writeShortToXML(Element parent,short o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Short.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Short(o).toString()));  return node;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.132 -0500",hash_original_method="F262A3A18BABECF7EC492736953EAF6E",hash_generated_method="94A4545C167C029CC38AACEACF2087E9") private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public boolean isInvoicePrintDetails(){  Object oo=get_Value(COLUMNNAME_IsInvoicePrintDetails);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void appendFrame(int pos,int offsetDelta,int[] tags,int[] data) throws BadBytecode {}  }
class C{  @Override protected int scale(BigInteger satoshis,int fractionPlaces){  prefixUnitsIndicator(numberFormat,scale);  return scale;}  }
class C{  public java.util.List<Figure> sort(Collection<Figure> c){  ensureSorted();  ArrayList<Figure> sorted=new ArrayList<Figure>(c.size());  for (  Figure f : children) {    if (c.contains(f)) {      sorted.add(f);    }  }  return sorted;}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.364 -0500",hash_original_method="C69FBA5615AE4C555A8E605188FC5D70",hash_generated_method="9529B15B91709FA3F46AA05F5D5D1C6A") public void create(boolean stream) throws IOException {  if (fd == null) {    fd=create_native(stream);  }}  }
class C{  @Nullable public V removeLast(){  return vals.isEmpty() ? null : vals.removeLast();}  }
class C{  public void writeString(final String s){  final byte[] bytes=s.getBytes();  final int len=bytes.length;  writeInt(len);  System.arraycopy(bytes,0,buffer,offset,len);  offset+=len;  pad();}  }
class C{  protected void processCGClones(CloseableIterator<CIMInstance> syncVolumeIter,WBEMClient client,DbClient dbClient,List<Volume> clones,String replicationGroupId,boolean isSyncActive) throws Exception {  Map<String,Volume> srcNativeIdToCloneMap=new HashMap<String,Volume>();  Set<URI> pools=new HashSet<URI>();  for (  Volume clone : clones) {    Volume volume=dbClient.queryObject(Volume.class,clone.getAssociatedSourceVolume());    srcNativeIdToCloneMap.put(volume.getNativeId(),clone);    pools.add(clone.getPool());  }  for (  URI pool : pools) {    SmisUtils.updateStoragePoolCapacity(dbClient,client,pool);    StoragePool thePool=dbClient.queryObject(StoragePool.class,pool);    StringMap reservationMap=thePool.getReservedCapacityMap();    for (    URI volumeId : getTaskCompleter().getIds()) {      reservationMap.remove(volumeId.toString());    }    dbClient.persistObject(thePool);  }  Calendar now=Calendar.getInstance();  while (syncVolumeIter.hasNext()) {    CIMInstance syncVolume=syncVolumeIter.next();    CIMObjectPath syncVolumePath=syncVolume.getObjectPath();    String syncDeviceID=syncVolumePath.getKey(SmisConstants.CP_DEVICE_ID).getValue().toString();    String elementName=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_ELEMENT_NAME);    CIMObjectPath volumePath=null;    CloseableIterator<CIMObjectPath> volumeIter=client.associatorNames(syncVolumePath,null,SmisConstants.CIM_STORAGE_VOLUME,null,null);    volumePath=volumeIter.next();    volumeIter.close();    String volumeDeviceID=volumePath.getKey(SmisConstants.CP_DEVICE_ID).getValue().toString();    String wwn=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_WWN_NAME);    String alternativeName=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_NAME);    Volume theClone=srcNativeIdToCloneMap.get(volumeDeviceID);    theClone.setNativeId(syncDeviceID);    theClone.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,theClone));    theClone.setReplicationGroupInstance(replicationGroupId);    theClone.setDeviceLabel(elementName);    theClone.setInactive(false);    theClone.setSyncActive(isSyncActive);    theClone.setCreationTime(now);    theClone.setWWN(wwn.toUpperCase());    theClone.setAlternateName(alternativeName);    theClone.setProvisionedCapacity(getProvisionedCapacityInformation(client,syncVolume));    theClone.setAllocatedCapacity(getAllocatedCapacityInformation(client,syncVolume));    if (isSyncActive) {      theClone.setReplicaState(ReplicationState.CREATED.name());    } else {      theClone.setReplicaState(ReplicationState.INACTIVE.name());    }    dbClient.persistObject(theClone);  }}  }
class C{  public static boolean isVplexVolume(UnManagedVolume volume){  if (null == volume || null == volume.getVolumeCharacterstics()) {    return false;  }  String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VPLEX_VOLUME.toString());  return TRUE.equals(status);}  }
class C{  public void topologyVersion(long topVer){  this.topVer=topVer;}  }
class C{  public TPrimitiveHash(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  String transformName(String className){  String newName=mRenameClasses.get(className);  if (newName != null) {    return newName;  }  int pos=className.indexOf('$');  if (pos > 0) {    String base=className.substring(0,pos);    newName=mRenameClasses.get(base);    if (newName != null) {      return newName + className.substring(pos);    }  }  return className;}  }
class C{  public PieChartGui(final GenericFrame frame,final PieChartComponent component){  super(frame,component);  setPreferredSize(PREFERRED_SIZE);  actionManager=new PlotActionManager(this);  setLayout(new BorderLayout());  JButton deleteButton=new JButton("Delete");  deleteButton.setActionCommand("Delete");  deleteButton.addActionListener(this);  JButton addButton=new JButton("Add");  addButton.setActionCommand("Add");  addButton.addActionListener(this);  JPanel buttonPanel=new JPanel();  buttonPanel.add(deleteButton);  buttonPanel.add(addButton);  createAttachMenuBar();  add("Center",chartPanel);  add("South",buttonPanel);}  }
class C{  public GeoHashGridBuilder precision(int precision){  this.precision=GeoHashGridParams.checkPrecision(precision);  return this;}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mSignalStrength);  dest.writeInt(mBitErrorRate);}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  MCashLine[] lines=getLines(false);  for (int i=0; i < lines.length; i++) {    MCashLine line=lines[i];    if (MCashLine.CASHTYPE_Invoice.equals(line.getCashType())) {      MInvoice invoice=line.getInvoice();      if (!MInvoice.DOCSTATUS_Completed.equals(invoice.getDocStatus()) && !MInvoice.DOCSTATUS_Closed.equals(invoice.getDocStatus()) && !MInvoice.DOCSTATUS_Reversed.equals(invoice.getDocStatus())&& !MInvoice.DOCSTATUS_Voided.equals(invoice.getDocStatus())) {        m_processMsg="@Line@ " + line.getLine() + ": @InvoiceCreateDocNotCompleted@";        return DocAction.STATUS_Invalid;      }      String name=Msg.translate(getCtx(),"C_Cash_ID") + ": " + getName()+ " - "+ Msg.translate(getCtx(),"Line")+ " "+ line.getLine();      MAllocationHdr hdr=new MAllocationHdr(getCtx(),false,getDateAcct(),line.getC_Currency_ID(),name,get_TrxName());      hdr.setAD_Org_ID(getAD_Org_ID());      if (!hdr.save()) {        m_processMsg=CLogger.retrieveErrorString("Could not create Allocation Hdr");        return DocAction.STATUS_Invalid;      }      MAllocationLine aLine=new MAllocationLine(hdr,line.getAmount(),line.getDiscountAmt(),line.getWriteOffAmt(),Env.ZERO);      aLine.setC_Invoice_ID(line.getC_Invoice_ID());      aLine.setC_CashLine_ID(line.getC_CashLine_ID());      if (!aLine.save()) {        m_processMsg=CLogger.retrieveErrorString("Could not create Allocation Line");        return DocAction.STATUS_Invalid;      }      if (!hdr.processIt(DocAction.ACTION_Complete)) {        m_processMsg=CLogger.retrieveErrorString("Could not process Allocation");        return DocAction.STATUS_Invalid;      }      if (!hdr.save()) {        m_processMsg=CLogger.retrieveErrorString("Could not save Allocation");        return DocAction.STATUS_Invalid;      }    } else     if (MCashLine.CASHTYPE_BankAccountTransfer.equals(line.getCashType())) {      MPayment pay=new MPayment(getCtx(),0,get_TrxName());      pay.setAD_Org_ID(getAD_Org_ID());      String documentNo=getName();      pay.setDocumentNo(documentNo);      pay.setR_PnRef(documentNo);      pay.set_ValueNoCheck("TrxType","X");      pay.set_ValueNoCheck("TenderType","X");      pay.setC_CashBook_ID(getC_CashBook_ID());      pay.setC_BankAccount_ID(line.getC_BankAccount_ID());      pay.setC_DocType_ID(true);      pay.setDateTrx(getStatementDate());      pay.setDateAcct(getDateAcct());      pay.setAmount(line.getC_Currency_ID(),line.getAmount().negate());      pay.setDescription(line.getDescription());      pay.setDocStatus(MPayment.DOCSTATUS_Closed);      pay.setDocAction(MPayment.DOCACTION_None);      pay.setPosted(true);      pay.setIsAllocated(true);      pay.setProcessed(true);      if (!pay.save()) {        m_processMsg=CLogger.retrieveErrorString("Could not create Payment");        return DocAction.STATUS_Invalid;      }      line.setC_Payment_ID(pay.getC_Payment_ID());      if (!line.save()) {        m_processMsg="Could not update Cash Line";        return DocAction.STATUS_Invalid;      }    }  }  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  private void removeNotification(){  ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).cancel(NOTIFICATION_ID);}  }
class C{  public boolean isConstantInteger(){  return isConstant() && (value instanceof Integer);}  }
class C{  protected AbstractState determineSuiteStateOnFinished(){  final AbstractState state;  if (isLeaf()) {    state=SuiteFinishedState.EMPTY_LEAF_SUITE;  } else   if (isEmptySuite()) {    state=SuiteFinishedState.EMPTY_SUITE;  } else {    if (isDefect()) {      if (containsErrorTests()) {        state=SuiteFinishedState.ERROR_SUITE;      } else {        state=containsFailedTests() ? SuiteFinishedState.FAILED_SUITE : SuiteFinishedState.WITH_IGNORED_TESTS_SUITE;      }    } else {      state=SuiteFinishedState.PASSED_SUITE;    }  }  return state;}  }
class C{  public char charAt(int index){  if (index >= _count)   throw new IndexOutOfBoundsException();  return (_data != null) ? _data[index] : (index < _head._count) ? _head.charAt(index) : _tail.charAt(index - _head._count);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforeinvalidnodetype.class,args);}  }
class C{  protected void printCommand(String command){  ensureViewOpened();  if (command.startsWith("'") || command.startsWith("\"")) {    command+=command.substring(1,command.length() - 1);  }  String line="<span style=\"font-weight: bold; font-style: italic;\">$ " + command + "</span>";  console.print(line);}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,String pathDocumentFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,pathDocumentFile,null);}  }
