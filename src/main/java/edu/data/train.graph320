class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new DataLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;    len-=gapLen;    inOff+=gapLen;    while (len > blockSize) {      System.arraycopy(in,inOff,buf,bufOff,blockSize);      resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);      System.arraycopy(buf,blockSize,buf,0,blockSize);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(publicId01.class,args);}  }
class C{  private URIUtils(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static TypeRef resolveTypeVariable(TypeRef typeRef){  final Type declType=typeRef != null ? typeRef.getDeclaredType() : null;  if (declType instanceof TypeVariable) {    final TypeRef ub=((TypeVariable)declType).getDeclaredUpperBound();    if (ub != null) {      return ub;    }  }  return typeRef;}  }
class C{  public int hashCode(){  int hash=0;  char[] buffer=_buffer;  int begin=_offset;  int end=begin + _length;  for (; begin < end; begin++)   hash=65521 * hash + buffer[begin] * 251 + 1021;  return hash;}  }
class C{  public CircularWindow(LatLng center,double radius,LengthUnit unit){  this.setCenter(center);  this.setRadius(LatLngWindow.lengthToLatitudeDelta(radius,unit));}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)")) {    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.security.AccessControlContext getStackAccessControlContext()")) {    java_security_AccessController_getStackAccessControlContext(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.security.AccessControlContext getInheritedAccessControlContext()")) {    java_security_AccessController_getInheritedAccessControlContext(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public Metadata extract(){  return extract(new Metadata());}  }
class C{  public void treeStructureChanged(TreeModelEvent e){}  }
class C{  public Element store(Object o){  getInstance(o);  Element e=new Element("connection");  storeCommon(e,adapter);  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public static byte[] fromHexString(String values) throws NumberFormatException {  String[] octets=values.split(":");  byte[] ret=new byte[octets.length];  for (int i=0; i < octets.length; i++) {    if (octets[i].length() > 2)     throw new NumberFormatException("Invalid octet length");    ret[i]=Integer.valueOf(octets[i],16).byteValue();  }  return ret;}  }
class C{  public void allowCoreThreadTimeOut(boolean value){  if (value && keepAliveTime <= 0)   throw new IllegalArgumentException("Core threads must have nonzero keep alive times");  if (value != allowCoreThreadTimeOut) {    allowCoreThreadTimeOut=value;    if (value)     interruptIdleWorkers();  }}  }
class C{  public Class<? extends XtextResourceSet> bindXtextResourceSet(){  return SynchronizedXtextResourceSet.class;}  }
class C{  public void addView(View view){  view.setParent(this);  views.put(view.getId(),view);  viewNames.put(view.getId() + view.getViewSuffix(),view);}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static void downloadFromPanel(SearchResultMediator rp,SearchResultDataLine[] lines){  downloadAll(lines);  rp.refresh();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFETileElement(prefix,(AbstractDocument)doc);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.434 -0400",hash_original_method="3F9946A3B8CB859CAD61D926A54058B5",hash_generated_method="E0C08CE6E8094F170C18AF003389C993") public String elementName(){  return elementName;}  }
class C{  public void assertResourceDescriptions(Collection<String> expected,Iterable<IResourceDescription> actual){  Set<String> extraDescriptions=new HashSet<>();  Set<String> missingDescriptions=new HashSet<>(expected);  for (  IResourceDescription iResourceDescription : actual) {    URI uri=iResourceDescription.getURI();    String stringUri=uri.isPlatform() ? uri.toPlatformString(false) : uri.toFileString();    if (!missingDescriptions.contains(stringUri)) {      extraDescriptions.add(stringUri);    } else {      missingDescriptions.remove(stringUri);    }  }  if (missingDescriptions.isEmpty() && extraDescriptions.isEmpty()) {    return;  }  StringBuilder msg=new StringBuilder("unexpected actual resources" + "\n");  if (!extraDescriptions.isEmpty()) {    msg.append("actual contains " + extraDescriptions.size() + " extra resources"+ "\n");  }  if (!missingDescriptions.isEmpty()) {    msg.append("actual is missing  " + missingDescriptions.size() + " expected resources"+ "\n");  }  for (  String extra : extraDescriptions) {    msg.append("[extra] " + extra + "\n");  }  for (  String missing : missingDescriptions) {    msg.append("[missing] " + missing + "\n");  }  fail(msg.toString());}  }
class C{  public static <T>ArrayList<T> parseJsonToArrayList(Context context,String jsonName){  String json=getTextFromAssets(context,jsonName);  return JsonUtils.jsonToArrayList(json);}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  public boolean isSelectable(OMGraphic omg){  return true;}  }
class C{  @Command(description="Log out token",abbrev="lo") public void logoutToken(@Param(name="tokenId",description="Token ID") String tokenId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(TOKEN_ID_PARAM,tokenId);  try {    PasswordStore.storePassword(tokenId,null);    SignerClient.execute(new ActivateToken(tokenId,false));    AuditLogger.log(LOGOUT_FROM_THE_TOKEN_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(LOGOUT_FROM_THE_TOKEN_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }}  }
class C{  boolean useWriteCache(String name,IOContext context){  if (!blockCacheWriteEnabled || name.startsWith(IndexFileNames.PENDING_SEGMENTS)) {    return false;  }  if (blockCacheFileTypes != null && !isCachableFile(name)) {    return false;  }switch (context.context) {case MERGE:{      return false;    }default :{    return true;  }}}  }
class C{  public void serialize(OutputStream out,Object object) throws IOException {  SerializationType type;  if (object instanceof ExampleSet) {    type=SerializationType.STREAMED_EXAMPLE_SET_DENSE_CURRENT_VERSION;  } else {    type=SerializationType.JAVA_BINARY;  }  serialize(out,object,type);}  }
class C{  public ASN1Explicit(int tagNumber,ASN1Type type){  this(CLASS_CONTEXTSPECIFIC,tagNumber,type);}  }
class C{  public synchronized void associateAll(Vertex associate,Vertex target,Vertex type){  Collection<Relationship> relationships=getRelationships(associate);  if (relationships == null) {    return;  }  for (  Relationship relationship : relationships) {    Vertex relation=relationship.getTarget();    if (!relation.isVariable()) {      if (relation.isArray()) {        Collection<Relationship> elements=getRelationships(Primitive.ELEMENT);        if (elements == null) {          continue;        }        for (        Relationship element : elements) {          element.getTarget().addRelationship(type,target);        }      } else {        relation.addRelationship(type,target);      }    }  }}  }
class C{  @Override public void onDisabled(Context context,Intent intent){  super.onDisabled(context,intent);  Toast.makeText(context,R.string.device_admin_disabled,Toast.LENGTH_LONG).show();  regId=Preference.getString(context,Constants.PreferenceFlag.REG_ID);  if (regId != null && !regId.isEmpty()) {    startUnRegistration(context);  } else {    Log.e(TAG,"Registration ID is already null");  }}  }
class C{  public Iterator<T> iterator(){  return Collections.unmodifiableSet(snapshot).iterator();}  }
class C{  public void tag(String key,String value){  if (StringUtils.hasText(value)) {    this.tags.put(key,value);  }}  }
class C{  public Set<StringBuilder> recommend(StringBuilder string){  Set<StringBuilder> ret=new HashSet<StringBuilder>();  for (  Dictionary dict : this.dictionaries.values()) {    ret.addAll(dict.recommend(string));  }  final SortedMap<StringBuilder,AtomicInteger> u=commonWords.tailMap(string);  StringBuilder vv;  try {    for (    final Map.Entry<StringBuilder,AtomicInteger> v : u.entrySet()) {      vv=v.getKey();      if (StringBuilderComparator.CASE_INSENSITIVE_ORDER.startsWith(vv,string) && vv.length() > string.length()) {        ret.add(vv);      } else {        break;      }    }  } catch (  final ConcurrentModificationException e) {    ConcurrentLog.logException(e);  }  return ret;}  }
class C{  protected void sequence_ControlLetterEscapeSequence_Term(ISerializationContext context,ControlLetterEscapeSequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected static String removeHTML(String textElement){  String retValue=textElement.replaceAll("<?\\w+((\\s+\\w+(\\s*=\\s*(?:\"b(.|\\n)*?\"|'(.|\\n)*?'|[^'\">\\s]+))?)+\\s*|\\s*)/?>"," ");  retValue=retValue.replaceAll("</"," ");  retValue=retValue.replaceAll("\\\\n"," ");  return retValue.toString();}  }
class C{  public T caseActiveStateReferenceExpression(ActiveStateReferenceExpression object){  return null;}  }
class C{  public void addShapeBox(float x,float y,float z,int w,int h,int d,float scale,float x0,float y0,float z0,float x1,float y1,float z1,float x2,float y2,float z2,float x3,float y3,float z3,float x4,float y4,float z4,float x5,float y5,float z5,float x6,float y6,float z6,float x7,float y7,float z7){  float f4=x + w;  float f5=y + h;  float f6=z + d;  x-=scale;  y-=scale;  z-=scale;  f4+=scale;  f5+=scale;  f6+=scale;  int m=(mirror ? -1 : 1);  if (mirror) {    float f7=f4;    f4=x;    x=f7;  }  float[] v={x - x0,y - y0,z - z0};  float[] v1={f4 + x1,y - y1,z - z1};  float[] v2={f4 + x5,f5 + y5,z - z5};  float[] v3={x - x4,f5 + y4,z - z4};  float[] v4={x - x3,y - y3,f6 + z3};  float[] v5={f4 + x2,y - y2,f6 + z2};  float[] v6={f4 + x6,f5 + y6,f6 + z6};  float[] v7={x - x7,f5 + y7,f6 + z7};  float[] qValues=new float[]{Math.abs((v[0] - v1[0]) / (v3[0] - v2[0])),Math.abs((v[0] - v1[0]) / (v4[0] - v5[0])),Math.abs((v4[0] - v5[0]) / (v7[0] - v6[0])),Math.abs((v3[0] - v2[0]) / (v7[0] - v6[0])),Math.abs((v[1] - v3[1]) / (v1[1] - v2[1])),Math.abs((v4[1] - v7[1]) / (v5[1] - v6[1])),Math.abs((v[1] - v3[1]) / (v4[1] - v7[1])),Math.abs((v1[1] - v2[1]) / (v5[1] - v6[1])),Math.abs((v[2] - v4[2]) / (v1[2] - v5[2])),Math.abs((v[2] - v4[2]) / (v3[2] - v7[2])),Math.abs((v1[2] - v5[2]) / (v2[2] - v6[2])),Math.abs((v3[2] - v7[2]) / (v2[2] - v6[2]))};  addRectShape(v,v1,v2,v3,v4,v5,v6,v7,w,h,d);}  }
class C{  public ServiceRefTest(String name){  super(name);}  }
class C{  public String randomSeedTipText(){  return "Sets the random number seed for subsampling.";}  }
class C{  public DrawerBuilder withDrawerItems(@NonNull ArrayList<IDrawerItem> drawerItems){  this.getAdapter().setDrawerItems(IdDistributor.checkIds(drawerItems));  return this;}  }
class C{  public static void assertNotEqual(double expected,double actual,double minRelativeError){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ minRelativeError+ ")");  }  if (expected == actual) {    TestUtils.assertBool(false);  } else {    assertRelativeErrorExceeded(expected,actual,minRelativeError);  }}  }
class C{  static private void checkZoningMap(URI varrayURI,ExportMask mask,Collection<Initiator> initiators){  StringSetMap zoningMap=mask.getZoningMap();  for (  Initiator initiator : initiators) {    if (zoningMap == null || !zoningMap.containsKey(initiator.getId().toString())) {      _log.info(String.format("No zoning map entry for initiator %s (%s), will not be zoned",initiator.getInitiatorPort(),initiator.getId()));    }  }}  }
class C{  public static boolean isModule(IResource resource){  return (resource != null && TLA_EXTENSION.equals(resource.getFileExtension()));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getName());  if (getItems().size() > 0) {    sb.append("\n|");    for (    IItem item : getItems()) {      sb.append("\n+ ");      appendItemLog(item,sb,1);    }  }  return sb.toString();}  }
class C{  static Object newInstance(String className,ClassLoader classLoader) throws ConfigurationError {  try {    Class spiClass;    if (classLoader == null) {      spiClass=Class.forName(className);    } else {      spiClass=classLoader.loadClass(className);    }    if (debug) {      debugPrintln("Loaded " + className + " from "+ which(spiClass));    }    return spiClass.newInstance();  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static int addPassThroughMessageID(Intent requestQueryIntent){  Bundle passThroughBundle=retrieveOrCreatePassThroughBundle(requestQueryIntent);  int id=getPositiveNonRepeatingRandomInteger();  passThroughBundle.putInt(PASS_THROUGH_BUNDLE_MESSAGE_ID_KEY,id);  return id;}  }
class C{  public static SolrConfig createConfig(Path solrHome,String coreName,String confFile){  System.setProperty("solr.test.sys.prop1","propone");  System.setProperty("solr.test.sys.prop2","proptwo");  try {    return new SolrConfig(solrHome.resolve(coreName),confFile,null);  } catch (  Exception xany) {    throw new RuntimeException(xany);  }}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){  packagerFactory.registerPackager("tomcat4x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);  packagerFactory.registerPackager("tomcat5x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);  packagerFactory.registerPackager("tomcat6x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);  packagerFactory.registerPackager("tomcat7x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);  packagerFactory.registerPackager("tomcat8x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);  packagerFactory.registerPackager("tomcat9x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);}  }
class C{  public static void addToolJarToClasspath(String name){  try {    String javaHome=System.getProperty("java.home");    String toolsJarURL="file:" + javaHome + "/../lib/"+ name+ ".jar";    new URL(toolsJarURL).getContent();    Method method=URLClassLoader.class.getDeclaredMethod("addURL",URL.class);    method.setAccessible(true);    URLClassLoader sysloader=(URLClassLoader)ClassLoader.getSystemClassLoader();    method.invoke(sysloader,(Object)new URL(toolsJarURL));    VirtualMachine.class.toString();  } catch (  Exception e) {    System.err.println("Failed to add " + name + ".jar to classpath: "+ e.toString());    e.printStackTrace();  }}  }
class C{  private void attrList(InfoObject a){  boolean flag=true;  while (flag) {    nextToken("error in attr_list");    if (m_st.ttype == ']') {      flag=false;    } else     if (m_st.sval.equalsIgnoreCase("color")) {      nextToken("error getting color");      if (m_st.ttype == '=') {        nextToken("error getting color");        if (m_st.sval != null) {          a.m_color=m_st.sval;        } else {          System.out.println("error getting color");        }      } else {        System.out.println("error getting color");      }    } else     if (m_st.sval.equalsIgnoreCase("fontcolor")) {      nextToken("error getting font color");      if (m_st.ttype == '=') {        nextToken("error getting font color");        if (m_st.sval != null) {          a.m_fontColor=m_st.sval;        } else {          System.out.println("error getting font color");        }      } else {        System.out.println("error getting font color");      }    } else     if (m_st.sval.equalsIgnoreCase("fontsize")) {      nextToken("error getting font size");      if (m_st.ttype == '=') {        nextToken("error getting font size");        if (m_st.sval != null) {        } else {          System.out.println("error getting font size");        }      } else {        System.out.println("error getting font size");      }    } else     if (m_st.sval.equalsIgnoreCase("label")) {      nextToken("error getting label");      if (m_st.ttype == '=') {        nextToken("error getting label");        if (m_st.sval != null) {          a.m_label=m_st.sval;        } else {          System.out.println("error getting label");        }      } else {        System.out.println("error getting label");      }    } else     if (m_st.sval.equalsIgnoreCase("shape")) {      nextToken("error getting shape");      if (m_st.ttype == '=') {        nextToken("error getting shape");        if (m_st.sval != null) {          a.m_shape=m_st.sval;        } else {          System.out.println("error getting shape");        }      } else {        System.out.println("error getting shape");      }    } else     if (m_st.sval.equalsIgnoreCase("style")) {      nextToken("error getting style");      if (m_st.ttype == '=') {        nextToken("error getting style");        if (m_st.sval != null) {          a.m_style=m_st.sval;        } else {          System.out.println("error getting style");        }      } else {        System.out.println("error getting style");      }    } else     if (m_st.sval.equalsIgnoreCase("data")) {      nextToken("error getting data");      if (m_st.ttype == '=') {        alterSyntax();        a.m_data=new String("");        while (true) {          nextToken("error getting data");          if (m_st.sval != null && a.m_data != null && m_st.sval.equals(",")) {            break;          } else           if (m_st.sval != null) {            a.m_data=a.m_data.concat(m_st.sval);          } else           if (m_st.ttype == '\r') {            a.m_data=a.m_data.concat("\r");          } else           if (m_st.ttype == '\n') {            a.m_data=a.m_data.concat("\n");          } else {            System.out.println("error getting data");          }        }        setSyntax();      } else {        System.out.println("error getting data");      }    }  }}  }
class C{  public static boolean isSubnet(String cidr1,String cidr2){  if (cidr2 == null) {    return true;  } else   if (cidr1 == null) {    return false;  }  int[] cidr=IPAddressUtil.parseCIDR(cidr1);  int cidr1Prefix=cidr[0];  int cidr1MaskBits=cidr[1];  cidr=IPAddressUtil.parseCIDR(cidr2);  int cidr2Prefix=cidr[0];  int cidr2MaskBits=cidr[1];  int bitsToShift_1=32 - cidr1MaskBits;  int bitsToShift_2=32 - cidr2MaskBits;  int offset=(bitsToShift_1 > bitsToShift_2) ? bitsToShift_1 : bitsToShift_2;  if (offset > 0) {    cidr1Prefix=cidr1Prefix >> offset;    cidr2Prefix=cidr2Prefix >> offset;    cidr1Prefix=cidr1Prefix << offset;    cidr2Prefix=cidr2Prefix << offset;  }  if (cidr1Prefix == cidr2Prefix) {    if (cidr1MaskBits >= cidr2MaskBits) {      return true;    }  }  return false;}  }
class C{  protected static List<String> isValidGitVersion(final String gitResponse){  Trace.writeLine("Program::isValidGitVersion");  Trace.writeLine("  gitResponse:" + gitResponse);  final String GitNotFound="Git is a requirement for installation and cannot be found. Please check that Git is installed and is added to your PATH";  final List<String> result=new ArrayList<String>();  if (gitResponse != null) {    Version version=null;    try {      version=Version.parseVersion(gitResponse);    } catch (    final IllegalArgumentException ignored) {      Trace.writeLine("  " + ignored.getMessage());      result.add(GitNotFound);    }    if (version != null) {      if (version.getMajor() < 1 || (version.getMajor() == 1 && version.getMinor() < 9)) {        result.add("Git version " + version.getMajor() + "."+ version.getMinor()+ " was found but version 1.9 or above is required.");      }    }  } else {    result.add(GitNotFound);  }  return result;}  }
class C{  public static <T>T min(T[] self,Comparator<T> comparator){  return min((Iterable<T>)toList(self),comparator);}  }
class C{  public boolean isExpired(){  return expirationDate != null && Calendar.getInstance().after(expirationDate);}  }
class C{  public final void init(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  if (serviceIterator == null) {    spi.engineInit(params,random);    return;  }  Exception failure=null;  KeyGeneratorSpi mySpi=spi;  do {    try {      mySpi.engineInit(params,random);      initType=I_PARAMS;      initKeySize=0;      initParams=params;      initRandom=random;      return;    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi,false);    }  } while (mySpi != null);  if (failure instanceof InvalidAlgorithmParameterException) {    throw (InvalidAlgorithmParameterException)failure;  }  if (failure instanceof RuntimeException) {    throw (RuntimeException)failure;  }  throw new InvalidAlgorithmParameterException("init() failed",failure);}  }
class C{  public void sort(Comparator<? super C> c){  BiMap<N,C> inverseMap=controllerNodeMap.inverse();  nodesList.removeListener(listChangeListener);  FXCollections.sort(nodesList,null);  nodesList.addListener(listChangeListener);}  }
class C{  public void testSystemClock(){  assertNotNull(Clock.SYSTEM);  final long ERROR_MARGIN=1000;  long systemValue=System.currentTimeMillis();  long clockValue=Clock.SYSTEM.currentTimeMillis();  assertTrue(Math.abs(clockValue - systemValue) <= ERROR_MARGIN);}  }
class C{  public Wildcards wildcard(Wildcards.Flag flag,Wildcards.Flag flag2){  int flags=flag.wildcard(flag2.wildcard(this.flags));  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  public static void closeSession(Session driverSes){  if (driverSes == null)   return;  Cluster cluster=driverSes.getCluster();  if (!driverSes.isClosed())   U.closeQuiet(driverSes);  if (!cluster.isClosed())   U.closeQuiet(cluster);}  }
class C{  public Builder with(Line line){  lines.add(line);  return this;}  }
class C{  private Peer constructPeerPojo(final PeerData peerData) throws PeerException {  Preconditions.checkNotNull(peerData,"Peer info could not be null.");  try {    PeerInfo peerInfo=fromJson(peerData.getInfo(),PeerInfo.class);    if (localPeerId.equals(peerData.getId())) {      localPeer.setPeerInfo(peerInfo);      return localPeer;    }    RemotePeerImpl remotePeer=new RemotePeerImpl(localPeerId,securityManager,peerInfo,messenger,commandResponseListener,messageResponseListener,provider,this);    RelationInfoMeta relationInfoMeta=new RelationInfoMeta();    Map<String,String> traits=relationInfoMeta.getRelationTraits();    traits.put("receiveHeartbeats","allow");    traits.put("sendHeartbeats","allow");    traits.put("hostTemplates","allow");    User peerOwner=identityManager.getUserByKeyId(identityManager.getPeerOwnerId());    RelationMeta relationMeta=new RelationMeta(peerOwner,localPeer,remotePeer,localPeer.getKeyId());    Relation relation=relationManager.buildRelation(relationInfoMeta,relationMeta);    relation.setRelationStatus(RelationStatus.VERIFIED);    relationManager.saveRelation(relation);    return remotePeer;  } catch (  Exception e) {    throw new PeerException("Could not create peer instance.",e);  }}  }
class C{  @Override public int hashCode(){  if (m_File != null)   return m_File.getAbsolutePath().hashCode(); else   return -1;}  }
class C{  public static void ccDrawPoints(GL10 gl,CGPoint points[],int numberOfPoints){  FloatBuffer vertices=getVertices(2 * numberOfPoints);  for (int i=0; i < numberOfPoints; i++) {    vertices.put(points[i].x);    vertices.put(points[i].y);  }  vertices.position(0);  gl.glDisable(GL_TEXTURE_2D);  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL_COLOR_ARRAY);  gl.glVertexPointer(2,GL_FLOAT,0,vertices);  gl.glDrawArrays(GL_POINTS,0,numberOfPoints);  gl.glEnableClientState(GL_COLOR_ARRAY);  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL_TEXTURE_2D);}  }
class C{  boolean removeEntry(PolicyEntry pe){  parser.remove(pe.getGrantEntry());  modified=true;  return (policyEntries.removeElement(pe));}  }
class C{  public static void fill(char[] array,int start,int end,char value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void testMoveDirectorySourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR_NEW,SUBDIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBDIR_NEW);  checkExist(igfs,DIR);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  private void generateFrom(int fromIndex){  if (DBG_BB || DBG_SELECTED) {    db("generating code into " + currentBBLE + " with runoff "+ runoff);  }  currentBBLE.setGenerated();  endOfBasicBlock=fallThrough=false;  lastInstr=null;  bcodes.reset(fromIndex);  while (true) {    currentBBLE.high=instrIndex=bcodes.index();    int code=bcodes.nextInstruction();    if (DBG_BCPARSE) {      db("parsing " + instrIndex + " "+ code+ " : 0x"+ Integer.toHexString(code)+ " "+ JBC_name(code));    }    Instruction s=null;    lastOsrBarrier=null;switch (code) {case JBC_nop:      break;case JBC_aconst_null:    push(new NullConstantOperand());  break;case JBC_iconst_m1:case JBC_iconst_0:case JBC_iconst_1:case JBC_iconst_2:case JBC_iconst_3:case JBC_iconst_4:case JBC_iconst_5:push(new IntConstantOperand(code - JBC_iconst_0));break;case JBC_lconst_0:case JBC_lconst_1:pushDual(new LongConstantOperand(code - JBC_lconst_0));break;case JBC_fconst_0:push(new FloatConstantOperand(0.f));break;case JBC_fconst_1:push(new FloatConstantOperand(1.f));break;case JBC_fconst_2:push(new FloatConstantOperand(2.f));break;case JBC_dconst_0:pushDual(new DoubleConstantOperand(0.));break;case JBC_dconst_1:pushDual(new DoubleConstantOperand(1.));break;case JBC_bipush:push(new IntConstantOperand(bcodes.getByteValue()));break;case JBC_sipush:push(new IntConstantOperand(bcodes.getShortValue()));break;case JBC_ldc:push(getConstantOperand(bcodes.getConstantIndex()));break;case JBC_ldc_w:push(getConstantOperand(bcodes.getWideConstantIndex()));break;case JBC_ldc2_w:pushDual(getConstantOperand(bcodes.getWideConstantIndex()));break;case JBC_iload:s=do_iload(bcodes.getLocalNumber());break;case JBC_lload:s=do_lload(bcodes.getLocalNumber());break;case JBC_fload:s=do_fload(bcodes.getLocalNumber());break;case JBC_dload:s=do_dload(bcodes.getLocalNumber());break;case JBC_aload:s=do_aload(bcodes.getLocalNumber());break;case JBC_iload_0:case JBC_iload_1:case JBC_iload_2:case JBC_iload_3:s=do_iload(code - JBC_iload_0);break;case JBC_lload_0:case JBC_lload_1:case JBC_lload_2:case JBC_lload_3:s=do_lload(code - JBC_lload_0);break;case JBC_fload_0:case JBC_fload_1:case JBC_fload_2:case JBC_fload_3:s=do_fload(code - JBC_fload_0);break;case JBC_dload_0:case JBC_dload_1:case JBC_dload_2:case JBC_dload_3:s=do_dload(code - JBC_dload_0);break;case JBC_aload_0:case JBC_aload_1:case JBC_aload_2:case JBC_aload_3:s=do_aload(code - JBC_aload_0);break;case JBC_iaload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.IntArray);}s=_aloadHelper(INT_ALOAD,ref,index,TypeReference.Int);}break;case JBC_laload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.LongArray);}s=_aloadHelper(LONG_ALOAD,ref,index,TypeReference.Long);}break;case JBC_faload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.FloatArray);}s=_aloadHelper(FLOAT_ALOAD,ref,index,TypeReference.Float);}break;case JBC_daload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.DoubleArray);}s=_aloadHelper(DOUBLE_ALOAD,ref,index,TypeReference.Double);}break;case JBC_aaload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}TypeReference type=getRefTypeOf(ref).getArrayElementType();if (VM.VerifyAssertions) opt_assert(type.isReferenceType());s=_aloadHelper(REF_ALOAD,ref,index,type);}break;case JBC_baload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}TypeReference type=getArrayTypeOf(ref);if (VM.VerifyAssertions) {opt_assert(type == TypeReference.ByteArray || type == TypeReference.BooleanArray);}if (type == TypeReference.ByteArray) {s=_aloadHelper(BYTE_ALOAD,ref,index,TypeReference.Byte);} else {s=_aloadHelper(UBYTE_ALOAD,ref,index,TypeReference.Boolean);}}break;case JBC_caload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.CharArray);}s=_aloadHelper(USHORT_ALOAD,ref,index,TypeReference.Char);}break;case JBC_saload:{Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.ShortArray);}s=_aloadHelper(SHORT_ALOAD,ref,index,TypeReference.Short);}break;case JBC_istore:s=do_store(bcodes.getLocalNumber(),popInt());break;case JBC_lstore:s=do_store(bcodes.getLocalNumber(),popLong());break;case JBC_fstore:s=do_store(bcodes.getLocalNumber(),popFloat());break;case JBC_dstore:s=do_store(bcodes.getLocalNumber(),popDouble());break;case JBC_astore:s=do_astore(bcodes.getLocalNumber());break;case JBC_istore_0:case JBC_istore_1:case JBC_istore_2:case JBC_istore_3:s=do_store(code - JBC_istore_0,popInt());break;case JBC_lstore_0:case JBC_lstore_1:case JBC_lstore_2:case JBC_lstore_3:s=do_store(code - JBC_lstore_0,popLong());break;case JBC_fstore_0:case JBC_fstore_1:case JBC_fstore_2:case JBC_fstore_3:s=do_store(code - JBC_fstore_0,popFloat());break;case JBC_dstore_0:case JBC_dstore_1:case JBC_dstore_2:case JBC_dstore_3:s=do_store(code - JBC_dstore_0,popDouble());break;case JBC_astore_0:case JBC_astore_1:case JBC_astore_2:case JBC_astore_3:s=do_astore(code - JBC_astore_0);break;case JBC_iastore:{Operand val=popInt();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.IntArray);}s=AStore.create(INT_ASTORE,val,ref,index,new LocationOperand(TypeReference.Int),getCurrentGuard());}break;case JBC_lastore:{Operand val=popLong();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.LongArray);}s=AStore.create(LONG_ASTORE,val,ref,index,new LocationOperand(TypeReference.Long),getCurrentGuard());}break;case JBC_fastore:{Operand val=popFloat();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.FloatArray);}s=AStore.create(FLOAT_ASTORE,val,ref,index,new LocationOperand(TypeReference.Float),getCurrentGuard());}break;case JBC_dastore:{Operand val=popDouble();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.DoubleArray);}s=AStore.create(DOUBLE_ASTORE,val,ref,index,new LocationOperand(TypeReference.Double),getCurrentGuard());}break;case JBC_aastore:{Operand val=pop();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}TypeReference type=getRefTypeOf(ref).getArrayElementType();if (VM.VerifyAssertions) opt_assert(type.isReferenceType());if (do_CheckStore(ref,val,type)) {break;}s=AStore.create(REF_ASTORE,val,ref,index,new LocationOperand(type),getCurrentGuard());}break;case JBC_bastore:{Operand val=popInt();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}TypeReference type=getArrayTypeOf(ref);if (VM.VerifyAssertions) {opt_assert(type == TypeReference.ByteArray || type == TypeReference.BooleanArray);}if (type == TypeReference.ByteArray) {type=TypeReference.Byte;} else {type=TypeReference.Boolean;}s=AStore.create(BYTE_ASTORE,val,ref,index,new LocationOperand(type),getCurrentGuard());}break;case JBC_castore:{Operand val=popInt();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.CharArray);}s=AStore.create(SHORT_ASTORE,val,ref,index,new LocationOperand(TypeReference.Char),getCurrentGuard());}break;case JBC_sastore:{Operand val=popInt();Operand index=popInt();Operand ref=pop();clearCurrentGuard();if (do_NullCheck(ref) || do_BoundsCheck(ref,index)) {break;}if (VM.VerifyAssertions) {assertIsType(ref,TypeReference.ShortArray);}s=AStore.create(SHORT_ASTORE,val,ref,index,new LocationOperand(TypeReference.Short),getCurrentGuard());}break;case JBC_pop:stack.pop();break;case JBC_pop2:stack.pop2();break;case JBC_dup:{Operand op1=stack.pop();stack.push(op1);s=pushCopy(op1);}break;case JBC_dup_x1:{Operand op1=stack.pop();Operand op2=stack.pop();stack.push(op1);stack.push(op2);s=pushCopy(op1);}break;case JBC_dup_x2:{Operand op1=stack.pop();Operand op2=stack.pop();Operand op3=stack.pop();stack.push(op1);stack.push(op3);stack.push(op2);s=pushCopy(op1);}break;case JBC_dup2:{Operand op1=stack.pop();Operand op2=stack.pop();stack.push(op2);stack.push(op1);s=pushCopy(op2);if (s != null) {appendInstruction(s);s=null;}s=pushCopy(op1);}break;case JBC_dup2_x1:{Operand op1=stack.pop();Operand op2=stack.pop();Operand op3=stack.pop();stack.push(op2);stack.push(op1);stack.push(op3);s=pushCopy(op2);if (s != null) {appendInstruction(s);s=null;}s=pushCopy(op1);}break;case JBC_dup2_x2:{Operand op1=stack.pop();Operand op2=stack.pop();Operand op3=stack.pop();Operand op4=stack.pop();stack.push(op2);stack.push(op1);stack.push(op4);stack.push(op3);s=pushCopy(op2);if (s != null) {appendInstruction(s);s=null;}s=pushCopy(op1);}break;case JBC_swap:{stack.swap();}break;case JBC_iadd:{Operand op2=popInt();Operand op1=popInt();s=_binaryHelper(INT_ADD,op1,op2,TypeReference.Int);}break;case JBC_ladd:{Operand op2=popLong();Operand op1=popLong();s=_binaryDualHelper(LONG_ADD,op1,op2,TypeReference.Long);}break;case JBC_fadd:{Operand op2=popFloat();Operand op1=popFloat();s=_binaryHelper(FLOAT_ADD,op1,op2,TypeReference.Float);}break;case JBC_dadd:{Operand op2=popDouble();Operand op1=popDouble();s=_binaryDualHelper(DOUBLE_ADD,op1,op2,TypeReference.Double);}break;case JBC_isub:{Operand op2=popInt();Operand op1=popInt();s=_binaryHelper(INT_SUB,op1,op2,TypeReference.Int);}break;case JBC_lsub:{Operand op2=popLong();Operand op1=popLong();s=_binaryDualHelper(LONG_SUB,op1,op2,TypeReference.Long);}break;case JBC_fsub:{Operand op2=popFloat();Operand op1=popFloat();s=_binaryHelper(FLOAT_SUB,op1,op2,TypeReference.Float);}break;case JBC_dsub:{Operand op2=popDouble();Operand op1=popDouble();s=_binaryDualHelper(DOUBLE_SUB,op1,op2,TypeReference.Double);}break;case JBC_imul:{Operand op2=popInt();Operand op1=popInt();s=_binaryHelper(INT_MUL,op1,op2,TypeReference.Int);}break;case JBC_lmul:{Operand op2=popLong();Operand op1=popLong();s=_binaryDualHelper(LONG_MUL,op1,op2,TypeReference.Long);}break;case JBC_fmul:{Operand op2=popFloat();Operand op1=popFloat();s=_binaryHelper(FLOAT_MUL,op1,op2,TypeReference.Float);}break;case JBC_dmul:{Operand op2=popDouble();Operand op1=popDouble();s=_binaryDualHelper(DOUBLE_MUL,op1,op2,TypeReference.Double);}break;case JBC_idiv:{clearCurrentGuard();Operand op2=popInt();Operand op1=popInt();if (do_IntZeroCheck(op2)) {break;}s=_guardedBinaryHelper(INT_DIV,op1,op2,getCurrentGuard(),TypeReference.Int);}break;case JBC_ldiv:{clearCurrentGuard();Operand op2=popLong();Operand op1=popLong();if (do_LongZeroCheck(op2)) {break;}s=_guardedBinaryDualHelper(LONG_DIV,op1,op2,getCurrentGuard(),TypeReference.Long);}break;case JBC_fdiv:{Operand op2=popFloat();Operand op1=popFloat();s=_binaryHelper(FLOAT_DIV,op1,op2,TypeReference.Float);}break;case JBC_ddiv:{Operand op2=popDouble();Operand op1=popDouble();s=_binaryDualHelper(DOUBLE_DIV,op1,op2,TypeReference.Double);}break;case JBC_irem:{clearCurrentGuard();Operand op2=popInt();Operand op1=popInt();if (do_IntZeroCheck(op2)) {break;}s=_guardedBinaryHelper(INT_REM,op1,op2,getCurrentGuard(),TypeReference.Int);}break;case JBC_lrem:{clearCurrentGuard();Operand op2=popLong();Operand op1=popLong();if (do_LongZeroCheck(op2)) {break;}s=_guardedBinaryDualHelper(LONG_REM,op1,op2,getCurrentGuard(),TypeReference.Long);}break;case JBC_frem:{Operand op2=popFloat();Operand op1=popFloat();s=_binaryHelper(FLOAT_REM,op1,op2,TypeReference.Float);}break;case JBC_drem:{Operand op2=popDouble();Operand op1=popDouble();s=_binaryDualHelper(DOUBLE_REM,op1,op2,TypeReference.Double);}break;case JBC_ineg:s=_unaryHelper(INT_NEG,popInt(),TypeReference.Int);break;case JBC_lneg:s=_unaryDualHelper(LONG_NEG,popLong(),TypeReference.Long);break;case JBC_fneg:s=_unaryHelper(FLOAT_NEG,popFloat(),TypeReference.Float);break;case JBC_dneg:s=_unaryDualHelper(DOUBLE_NEG,popDouble(),TypeReference.Double);break;case JBC_ishl:{Operand op2=popShiftInt(false);Operand op1=popInt();s=_binaryHelper(INT_SHL,op1,op2,TypeReference.Int);}break;case JBC_lshl:{Operand op2=popShiftInt(true);Operand op1=popLong();s=_binaryDualHelper(LONG_SHL,op1,op2,TypeReference.Long);}break;case JBC_ishr:{Operand op2=popShiftInt(false);Operand op1=popInt();s=_binaryHelper(INT_SHR,op1,op2,TypeReference.Int);}break;case JBC_lshr:{Operand op2=popShiftInt(true);Operand op1=popLong();s=_binaryDualHelper(LONG_SHR,op1,op2,TypeReference.Long);}break;case JBC_iushr:{Operand op2=popShiftInt(false);Operand op1=popInt();s=_binaryHelper(INT_USHR,op1,op2,TypeReference.Int);}break;case JBC_lushr:{Operand op2=popShiftInt(true);Operand op1=popLong();s=_binaryDualHelper(LONG_USHR,op1,op2,TypeReference.Long);}break;case JBC_iand:{Operand op2=popInt();Operand op1=popInt();s=_binaryHelper(INT_AND,op1,op2,TypeReference.Int);}break;case JBC_land:{Operand op2=popLong();Operand op1=popLong();s=_binaryDualHelper(LONG_AND,op1,op2,TypeReference.Long);}break;case JBC_ior:{Operand op2=popInt();Operand op1=popInt();s=_binaryHelper(INT_OR,op1,op2,TypeReference.Int);}break;case JBC_lor:{Operand op2=popLong();Operand op1=popLong();s=_binaryDualHelper(LONG_OR,op1,op2,TypeReference.Long);}break;case JBC_ixor:{Operand op2=popInt();Operand op1=popInt();s=_binaryHelper(INT_XOR,op1,op2,TypeReference.Int);}break;case JBC_lxor:{Operand op2=popLong();Operand op1=popLong();s=_binaryDualHelper(LONG_XOR,op1,op2,TypeReference.Long);}break;case JBC_iinc:{int index=bcodes.getLocalNumber();s=do_iinc(index,bcodes.getIncrement());}break;case JBC_i2l:s=_unaryDualHelper(INT_2LONG,popInt(),TypeReference.Long);break;case JBC_i2f:s=_unaryHelper(INT_2FLOAT,popInt(),TypeReference.Float);break;case JBC_i2d:s=_unaryDualHelper(INT_2DOUBLE,popInt(),TypeReference.Double);break;case JBC_l2i:s=_unaryHelper(LONG_2INT,popLong(),TypeReference.Int);break;case JBC_l2f:s=_unaryHelper(LONG_2FLOAT,popLong(),TypeReference.Float);break;case JBC_l2d:s=_unaryDualHelper(LONG_2DOUBLE,popLong(),TypeReference.Double);break;case JBC_f2i:s=_unaryHelper(FLOAT_2INT,popFloat(),TypeReference.Int);break;case JBC_f2l:s=_unaryDualHelper(FLOAT_2LONG,popFloat(),TypeReference.Long);break;case JBC_f2d:s=_unaryDualHelper(FLOAT_2DOUBLE,popFloat(),TypeReference.Double);break;case JBC_d2i:s=_unaryHelper(DOUBLE_2INT,popDouble(),TypeReference.Int);break;case JBC_d2l:s=_unaryDualHelper(DOUBLE_2LONG,popDouble(),TypeReference.Long);break;case JBC_d2f:s=_unaryHelper(DOUBLE_2FLOAT,popDouble(),TypeReference.Float);break;case JBC_int2byte:s=_unaryHelper(INT_2BYTE,popInt(),TypeReference.Byte);break;case JBC_int2char:s=_unaryHelper(INT_2USHORT,popInt(),TypeReference.Char);break;case JBC_int2short:s=_unaryHelper(INT_2SHORT,popInt(),TypeReference.Short);break;case JBC_lcmp:{Operand op2=popLong();Operand op1=popLong();s=_binaryHelper(LONG_CMP,op1,op2,TypeReference.Int);}break;case JBC_fcmpl:{Operand op2=popFloat();Operand op1=popFloat();s=_binaryHelper(FLOAT_CMPL,op1,op2,TypeReference.Int);}break;case JBC_fcmpg:{Operand op2=popFloat();Operand op1=popFloat();s=_binaryHelper(FLOAT_CMPG,op1,op2,TypeReference.Int);}break;case JBC_dcmpl:{Operand op2=popDouble();Operand op1=popDouble();s=_binaryHelper(DOUBLE_CMPL,op1,op2,TypeReference.Int);}break;case JBC_dcmpg:{Operand op2=popDouble();Operand op1=popDouble();s=_binaryHelper(DOUBLE_CMPG,op1,op2,TypeReference.Int);}break;case JBC_ifeq:s=_intIfHelper(ConditionOperand.EQUAL());break;case JBC_ifne:s=_intIfHelper(ConditionOperand.NOT_EQUAL());break;case JBC_iflt:s=_intIfHelper(ConditionOperand.LESS());break;case JBC_ifge:s=_intIfHelper(ConditionOperand.GREATER_EQUAL());break;case JBC_ifgt:s=_intIfHelper(ConditionOperand.GREATER());break;case JBC_ifle:s=_intIfHelper(ConditionOperand.LESS_EQUAL());break;case JBC_if_icmpeq:s=_intIfCmpHelper(ConditionOperand.EQUAL());break;case JBC_if_icmpne:s=_intIfCmpHelper(ConditionOperand.NOT_EQUAL());break;case JBC_if_icmplt:s=_intIfCmpHelper(ConditionOperand.LESS());break;case JBC_if_icmpge:s=_intIfCmpHelper(ConditionOperand.GREATER_EQUAL());break;case JBC_if_icmpgt:s=_intIfCmpHelper(ConditionOperand.GREATER());break;case JBC_if_icmple:s=_intIfCmpHelper(ConditionOperand.LESS_EQUAL());break;case JBC_if_acmpeq:s=_refIfCmpHelper(ConditionOperand.EQUAL());break;case JBC_if_acmpne:s=_refIfCmpHelper(ConditionOperand.NOT_EQUAL());break;case JBC_goto:{int offset=bcodes.getBranchOffset();if (offset != 3) {s=_gotoHelper(offset);}}break;case JBC_jsr:s=_jsrHelper(bcodes.getBranchOffset());break;case JBC_ret:s=_retHelper(bcodes.getLocalNumber());break;case JBC_tableswitch:{bcodes.alignSwitch();Operand op0=popInt();int defaultoff=bcodes.getDefaultSwitchOffset();int low=bcodes.getLowSwitchValue();int high=bcodes.getHighSwitchValue();int number=high - low + 1;if (CF_TABLESWITCH && op0 instanceof IntConstantOperand) {int v1=((IntConstantOperand)op0).value;int match=bcodes.computeTableSwitchOffset(v1,low,high);int offset=match == 0 ? defaultoff : match;bcodes.skipTableSwitchOffsets(number);if (DBG_CF) {db("changed tableswitch to goto because index (" + v1 + ") is constant");}s=_gotoHelper(offset);break;}s=TableSwitch.create(TABLESWITCH,op0,null,null,new IntConstantOperand(low),new IntConstantOperand(high),generateTarget(defaultoff),null,number * 2);for (int i=0; i < number; ++i) {TableSwitch.setTarget(s,i,generateTarget(bcodes.getTableSwitchOffset(i)));}bcodes.skipTableSwitchOffsets(number);SwitchBranchProfile sp=gc.getSwitchProfile(instrIndex - bciAdjustment);if (sp == null) {float approxProb=1.0f / (number + 1);TableSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(approxProb));for (int i=0; i < number; ++i) {TableSwitch.setBranchProfile(s,i,new BranchProfileOperand(approxProb));}} else {TableSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(sp.getDefaultProbability()));for (int i=0; i < number; ++i) {TableSwitch.setBranchProfile(s,i,new BranchProfileOperand(sp.getCaseProbability(i)));}}}break;case JBC_lookupswitch:{bcodes.alignSwitch();Operand op0=popInt();int defaultoff=bcodes.getDefaultSwitchOffset();int numpairs=bcodes.getSwitchLength();if (numpairs == 0) {s=_gotoHelper(defaultoff);break;}if (CF_LOOKUPSWITCH && op0 instanceof IntConstantOperand) {int v1=((IntConstantOperand)op0).value;int match=bcodes.computeLookupSwitchOffset(v1,numpairs);int offset=match == 0 ? defaultoff : match;bcodes.skipLookupSwitchPairs(numpairs);if (DBG_CF) {db("changed lookupswitch to goto because index (" + v1 + ") is constant");}s=_gotoHelper(offset);break;}s=LookupSwitch.create(LOOKUPSWITCH,op0,null,null,generateTarget(defaultoff),null,numpairs * 3);for (int i=0; i < numpairs; ++i) {LookupSwitch.setMatch(s,i,new IntConstantOperand(bcodes.getLookupSwitchValue(i)));LookupSwitch.setTarget(s,i,generateTarget(bcodes.getLookupSwitchOffset(i)));}bcodes.skipLookupSwitchPairs(numpairs);SwitchBranchProfile sp=gc.getSwitchProfile(instrIndex - bciAdjustment);if (sp == null) {float approxProb=1.0f / (numpairs + 1);LookupSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(approxProb));for (int i=0; i < numpairs; ++i) {LookupSwitch.setBranchProfile(s,i,new BranchProfileOperand(approxProb));}} else {LookupSwitch.setDefaultBranchProfile(s,new BranchProfileOperand(sp.getDefaultProbability()));for (int i=0; i < numpairs; ++i) {LookupSwitch.setBranchProfile(s,i,new BranchProfileOperand(sp.getCaseProbability(i)));}}}break;case JBC_ireturn:_returnHelper(INT_MOVE,popInt());break;case JBC_lreturn:_returnHelper(LONG_MOVE,popLong());break;case JBC_freturn:_returnHelper(FLOAT_MOVE,popFloat());break;case JBC_dreturn:_returnHelper(DOUBLE_MOVE,popDouble());break;case JBC_areturn:{Operand op0=popRef();if (VM.VerifyAssertions && !op0.isDefinitelyNull()) {TypeReference retType=op0.getType();assertIsAssignable(gc.getMethod().getReturnType(),retType);}_returnHelper(REF_MOVE,op0);}break;case JBC_return:_returnHelper(null,null);break;case JBC_getstatic:{FieldReference ref=bcodes.getFieldReference();boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());LocationOperand fieldOp=makeStaticFieldRef(ref);Operand offsetOp;TypeReference fieldType=ref.getFieldContentsType();RegisterOperand t=gc.getTemps().makeTemp(fieldType);if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));offsetOp=offsetrop;rectifyStateWithErrorHandler();} else {RVMField field=ref.peekResolvedField();offsetOp=new AddressConstantOperand(field.getOffset());RVMType ft=fieldType.peekType();if (ft != null && ft.isClassType()) {TypeReference concreteType=FieldAnalysis.getConcreteType(field);if (concreteType != null) {if (concreteType == fieldType) {t.setDeclaredType();t.setPreciseType();} else {fieldType=concreteType;t.setPreciseType(concreteType);}}}if (gc.getOptions().SIMPLIFY_CHASE_FINAL_FIELDS && field.isFinal()) {RVMClass declaringClass=field.getDeclaringClass();boolean initializedClassAtRuntime=VM.runningVM & declaringClass.isInitialized();boolean fieldFromRVMInternalClassInBootImage=declaringClass.isInBootImage() && declaringClass.getDescriptor().isRVMDescriptor();boolean publicFieldInBootImage=declaringClass.isInBootImage() && field.isPublic();if (initializedClassAtRuntime || fieldFromRVMInternalClassInBootImage || publicFieldInBootImage) {try {ConstantOperand rhs=StaticFieldReader.getStaticFieldValue(field);push(rhs,fieldType);break;} catch (NoSuchFieldException e) {if (VM.runningVM) {throw new Error("Unexpected exception",e);} else {}}}} else if (field.isRuntimeFinal()) {if (VM.VerifyAssertions) opt_assert(fieldType.isBooleanType());boolean rhsBool=field.getRuntimeFinalValue();push(new IntConstantOperand(rhsBool ? 1 : 0));break;}}s=GetStatic.create(GETSTATIC,t,offsetOp,fieldOp);if (fieldOp.mayBeVolatile()) {appendInstruction(s);s=Empty.create(READ_CEILING);}push(t.copyD2U(),fieldType);}break;case JBC_putstatic:{FieldReference ref=bcodes.getFieldReference();boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());LocationOperand fieldOp=makeStaticFieldRef(ref);Operand offsetOp;if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));offsetOp=offsetrop;rectifyStateWithErrorHandler();} else {RVMField field=ref.peekResolvedField();offsetOp=new AddressConstantOperand(field.getOffset());}TypeReference fieldType=ref.getFieldContentsType();Operand r=pop(fieldType);if (fieldOp.mayBeVolatile()) {appendInstruction(Empty.create(WRITE_FLOOR));}s=PutStatic.create(PUTSTATIC,r,offsetOp,fieldOp);if (fieldOp.mayBeVolatile()) {appendInstruction(s);s=Empty.create(FENCE);}}break;case JBC_getfield:{FieldReference ref=bcodes.getFieldReference();boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());LocationOperand fieldOp=makeInstanceFieldRef(ref);Operand offsetOp;TypeReference fieldType=ref.getFieldContentsType();RVMField field=null;RegisterOperand t=gc.getTemps().makeTemp(fieldType);if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));offsetOp=offsetrop;rectifyStateWithErrorHandler();} else {field=ref.peekResolvedField();offsetOp=new AddressConstantOperand(field.getOffset());RVMType ft=fieldType.peekType();if (ft != null && ft.isClassType()) {TypeReference concreteType=FieldAnalysis.getConcreteType(field);if (concreteType != null) {if (concreteType == fieldType) {t.setDeclaredType();t.setPreciseType();} else {fieldType=concreteType;t.setType(concreteType);t.setPreciseType();}}}}Operand op1=pop();clearCurrentGuard();if (do_NullCheck(op1)) {break;}if (op1.isConstant() && field.isFinal()) {try {ConstantOperand rhs=StaticFieldReader.getFieldValueAsConstant(field,op1.asObjectConstant().value);push(rhs,fieldType);break;} catch (NoSuchFieldException e) {if (VM.runningVM) {throw new Error("Unexpected exception",e);} else {}}}s=GetField.create(GETFIELD,t,op1,offsetOp,fieldOp,getCurrentGuard());if (fieldOp.mayBeVolatile()) {appendInstruction(s);s=Empty.create(READ_CEILING);}push(t.copyD2U(),fieldType);}break;case JBC_putfield:{FieldReference ref=bcodes.getFieldReference();boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());LocationOperand fieldOp=makeInstanceFieldRef(ref);TypeReference fieldType=ref.getFieldContentsType();Operand offsetOp;if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),fieldOp.copy()));offsetOp=offsetrop;rectifyStateWithErrorHandler();} else {RVMField field=ref.peekResolvedField();offsetOp=new AddressConstantOperand(field.getOffset());}Operand val=pop(fieldType);Operand obj=popRef();clearCurrentGuard();if (do_NullCheck(obj)) {break;}if (fieldOp.mayBeVolatile()) {appendInstruction(Empty.create(WRITE_FLOOR));}s=PutField.create(PUTFIELD,val,obj,offsetOp,fieldOp,getCurrentGuard());if (fieldOp.mayBeVolatile()) {appendInstruction(s);s=Empty.create(FENCE);}}break;case JBC_invokevirtual:{MethodReference ref=bcodes.getMethodReference();if (ref.isMagic()) {boolean generated=GenerateMagic.generateMagic(this,gc,ref);if (generated) break;}if (this.osrGuardedInline) {lastOsrBarrier=_createOsrBarrier();}if (ref.isMiranda()) {s=_callHelper(ref,MethodOperand.INTERFACE(ref,null));if (s == null) break;Operand receiver=Call.getParam(s,0);RVMClass receiverType=(RVMClass)receiver.getType().peekType();clearCurrentGuard();if (do_NullCheck(receiver)) {s=null;break;}Call.setGuard(s,getCurrentGuard());RVMMethod vmeth=null;if (receiverType != null && receiverType.isInitialized() && !receiverType.isInterface()) {vmeth=ClassLoaderProxy.lookupMethod(receiverType,ref);}if (vmeth != null) {MethodReference vmethRef=vmeth.getMemberRef().asMethodReference();MethodOperand mop=MethodOperand.VIRTUAL(vmethRef,vmeth);if (receiver.isConstant() || (receiver.isRegister() && receiver.asRegister().isPreciseType())) {mop.refine(vmeth,true);}Call.setMethod(s,mop);boolean unresolved=vmethRef.needsDynamicLink(bcodes.getMethod());if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));Call.setAddress(s,offsetrop);rectifyStateWithErrorHandler();} else {Call.setAddress(s,new AddressConstantOperand(vmeth.getOffset()));}if (maybeInlineMethod(shouldInline(s,receiver.isConstant() || (receiver.isRegister() && receiver.asRegister().isExtant()),instrIndex - bciAdjustment),s)) {return;}}} else {boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());RVMMethod target=ref.peekResolvedMethod();MethodOperand methOp=MethodOperand.VIRTUAL(ref,target);s=_callHelper(ref,methOp);if (s == null) break;if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));Call.setAddress(s,offsetrop);rectifyStateWithErrorHandler();} else {if (VM.VerifyAssertions) opt_assert(target != null);Call.setAddress(s,new AddressConstantOperand(target.getOffset()));}Operand receiver=Call.getParam(s,0);clearCurrentGuard();if (do_NullCheck(receiver)) {s=null;break;}Call.setGuard(s,getCurrentGuard());boolean isExtant=false;boolean isPreciseType=false;TypeReference tr=null;if (receiver.isRegister()) {RegisterOperand rop=receiver.asRegister();isExtant=rop.isExtant();isPreciseType=rop.isPreciseType();tr=rop.getType();} else {isExtant=true;isPreciseType=true;tr=receiver.getType();}RVMType type=tr.peekType();if (type != null && type.isResolved()) {if (type.isClassType()) {RVMMethod vmeth=target;if (target == null || type != target.getDeclaringClass()) {vmeth=ClassLoaderProxy.lookupMethod(type.asClass(),ref);}if (vmeth != null) {methOp.refine(vmeth,isPreciseType || type.asClass().isFinal());}} else {if (VM.VerifyAssertions) opt_assert(target != null,"Huh?  Target method must already be resolved if receiver is array");methOp.refine(target,true);}}if (maybeInlineMethod(shouldInline(s,isExtant,instrIndex - bciAdjustment),s)) {return;}}rectifyStateWithExceptionHandlers();}break;case JBC_invokespecial:{MethodReference ref=bcodes.getMethodReference();RVMMethod target=ref.resolveInvokeSpecial();if (this.osrGuardedInline) {lastOsrBarrier=_createOsrBarrier();}s=_callHelper(ref,MethodOperand.SPECIAL(ref,target));if (s == null) break;if (target == null) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));Call.setAddress(s,offsetrop);rectifyStateWithErrorHandler();} else {Call.setAddress(s,new AddressConstantOperand(target.getOffset()));}Operand receiver=Call.getParam(s,0);clearCurrentGuard();if (do_NullCheck(receiver)) {s=null;break;}Call.setGuard(s,getCurrentGuard());if (maybeInlineMethod(shouldInline(s,false,instrIndex - bciAdjustment),s)) {return;}rectifyStateWithExceptionHandlers();}break;case JBC_invokestatic:{MethodReference ref=bcodes.getMethodReference();if (ref.isMagic()) {boolean generated=GenerateMagic.generateMagic(this,gc,ref);if (generated) break;}boolean unresolved=ref.needsDynamicLink(bcodes.getMethod());RVMMethod target=ref.peekResolvedMethod();if (this.osrGuardedInline) {lastOsrBarrier=_createOsrBarrier();}s=_callHelper(ref,MethodOperand.STATIC(ref,target));if (s == null) break;if (Call.conforms(s)) {MethodOperand methOp=Call.getMethod(s);if (methOp.getTarget() == target) {if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));Call.setAddress(s,offsetrop);rectifyStateWithErrorHandler();} else {Call.setAddress(s,new AddressConstantOperand(target.getOffset()));}if (maybeInlineMethod(shouldInline(s,false,instrIndex - bciAdjustment),s)) {return;}}}rectifyStateWithExceptionHandlers();}break;case JBC_invokeinterface:{MethodReference ref=bcodes.getMethodReference();bcodes.alignInvokeInterface();RVMMethod resolvedMethod=null;resolvedMethod=ref.peekInterfaceMethod();if (this.osrGuardedInline) {lastOsrBarrier=_createOsrBarrier();}s=_callHelper(ref,MethodOperand.INTERFACE(ref,resolvedMethod));if (s == null) break;Operand receiver=Call.getParam(s,0);RVMClass receiverType=(RVMClass)receiver.getType().peekType();boolean requiresImplementsTest=VM.BuildForIMTInterfaceInvocation;if (requiresImplementsTest && resolvedMethod == null) {RVMMethod target=Entrypoints.unresolvedInvokeinterfaceImplementsTestMethod;Instruction callCheck=Call.create2(CALL,null,new AddressConstantOperand(target.getOffset()),MethodOperand.STATIC(target),new IntConstantOperand(ref.getId()),receiver.copy());if (gc.getOptions().H2L_NO_CALLEE_EXCEPTIONS) {callCheck.markAsNonPEI();}appendInstruction(callCheck);callCheck.setBytecodeIndex(RUNTIME_SERVICES_BCI);requiresImplementsTest=false;rectifyStateWithErrorHandler();}clearCurrentGuard();if (do_NullCheck(receiver)) {s=null;break;}Call.setGuard(s,getCurrentGuard());if (requiresImplementsTest) {RVMType interfaceType=resolvedMethod.getDeclaringClass();if (receiverType != null && receiverType.isResolved() && !receiverType.isInterface()) {byte doesImplement=ClassLoaderProxy.includesType(interfaceType.getTypeRef(),receiverType.getTypeRef());requiresImplementsTest=doesImplement != YES;}}RVMMethod vmeth=null;if (receiverType != null && receiverType.isInitialized() && !receiverType.isInterface()) {vmeth=ClassLoaderProxy.lookupMethod(receiverType,ref);}if (vmeth != null) {MethodReference vmethRef=vmeth.getMemberRef().asMethodReference();if (requiresImplementsTest) {RegisterOperand checkedReceiver=gc.getTemps().makeTemp(receiver);appendInstruction(TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),makeTypeOperand(resolvedMethod.getDeclaringClass()),getCurrentGuard()));checkedReceiver.refine(resolvedMethod.getDeclaringClass().getTypeRef());Call.setParam(s,0,checkedReceiver.copyRO());receiver=checkedReceiver;rectifyStateWithErrorHandler();}MethodOperand mop=MethodOperand.VIRTUAL(vmethRef,vmeth);if (receiver.isConstant() || receiver.asRegister().isPreciseType()) {mop.refine(vmeth,true);}Call.setMethod(s,mop);boolean unresolved=vmethRef.needsDynamicLink(bcodes.getMethod());if (unresolved) {RegisterOperand offsetrop=gc.getTemps().makeTempOffset();appendInstruction(Unary.create(RESOLVE_MEMBER,offsetrop.copyRO(),Call.getMethod(s).copy()));Call.setAddress(s,offsetrop);rectifyStateWithErrorHandler();} else {Call.setAddress(s,new AddressConstantOperand(vmeth.getOffset()));}if (maybeInlineMethod(shouldInline(s,receiver.isConstant() || receiver.asRegister().isExtant(),instrIndex - bciAdjustment),s)) {return;}} else {if (resolvedMethod != null && maybeInlineMethod(shouldInline(s,false,instrIndex - bciAdjustment),s)) {return;} else {if (requiresImplementsTest) {RegisterOperand checkedReceiver=gc.getTemps().makeTemp(receiver);appendInstruction(TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),makeTypeOperand(resolvedMethod.getDeclaringClass()),getCurrentGuard()));checkedReceiver.refine(resolvedMethod.getDeclaringClass().getTypeRef());Call.setParam(s,0,checkedReceiver.copyRO());}}}rectifyStateWithExceptionHandlers();}break;case JBC_invokedynamic:OptimizingCompilerException.UNREACHABLE();break;case JBC_new:{TypeReference klass=bcodes.getTypeReference();RegisterOperand t=gc.getTemps().makeTemp(klass);t.setPreciseType();markGuardlessNonNull(t);Operator operator;TypeOperand klassOp;RVMClass klassType=(RVMClass)klass.peekType();if (klassType != null && (klassType.isInitialized() || klassType.isInBootImage())) {klassOp=makeTypeOperand(klassType);operator=NEW;t.setExtant();} else {operator=NEW_UNRESOLVED;klassOp=makeTypeOperand(klass);}s=New.create(operator,t,klassOp);push(t.copyD2U());rectifyStateWithErrorHandler();}break;case JBC_newarray:{RVMType array=bcodes.getPrimitiveArrayType();TypeOperand arrayOp=makeTypeOperand(array);RegisterOperand t=gc.getTemps().makeTemp(array.getTypeRef());t.setPreciseType();t.setExtant();markGuardlessNonNull(t);s=NewArray.create(NEWARRAY,t,arrayOp,popInt());push(t.copyD2U());rectifyStateWithExceptionHandler(TypeReference.JavaLangNegativeArraySizeException);}break;case JBC_anewarray:{TypeReference elementTypeRef=bcodes.getTypeReference();s=generateAnewarray(null,elementTypeRef);}break;case JBC_arraylength:{Operand op1=pop();clearCurrentGuard();if (do_NullCheck(op1)) {break;}if (VM.VerifyAssertions) {opt_assert(getArrayTypeOf(op1).isArrayType());}RegisterOperand t=gc.getTemps().makeTempInt();s=GuardedUnary.create(ARRAYLENGTH,t,op1,getCurrentGuard());push(t.copyD2U());}break;case JBC_athrow:{Operand op0=pop();clearCurrentGuard();if (do_NullCheck(op0)) {break;}TypeReference type=getRefTypeOf(op0);if (VM.VerifyAssertions) assertIsAssignable(TypeReference.JavaLangThrowable,type);if (!gc.getMethod().isInterruptible()) {appendInstruction(Empty.create(UNINT_END));}endOfBasicBlock=true;BasicBlock definiteTarget=rectifyStateWithExceptionHandler(type,true);if (definiteTarget != null) {appendInstruction(CacheOp.create(SET_CAUGHT_EXCEPTION,op0));s=Goto.create(GOTO,definiteTarget.makeJumpTarget());definiteTarget.setExceptionHandlerWithNormalIn();} else {s=Athrow.create(ATHROW,op0);}}break;case JBC_checkcast:{TypeReference typeRef=bcodes.getTypeReference();boolean classLoading=couldCauseClassLoading(typeRef);Operand op2=pop();if (typeRef.isWordLikeType()) {op2=op2.copy();if (op2 instanceof RegisterOperand) {((RegisterOperand)op2).setType(typeRef);}push(op2);if (DBG_CF) db("skipped gen of checkcast to word type " + typeRef);break;}if (VM.VerifyAssertions) opt_assert(op2.isRef());if (CF_CHECKCAST && !classLoading) {if (op2.isDefinitelyNull()) {push(op2);if (DBG_CF) db("skipped gen of null checkcast");break;}TypeReference type=getRefTypeOf(op2);byte typeTestResult=ClassLoaderProxy.includesType(typeRef,type);if (typeTestResult == YES) {push(op2);if (DBG_CF) {db("skipped gen of checkcast of " + op2 + " from "+ typeRef+ " to "+ type);}break;}if (typeTestResult == NO) {if (isNonNull(op2)) {endOfBasicBlock=true;appendInstruction(Trap.create(TRAP,gc.getTemps().makeTempValidation(),TrapCodeOperand.CheckCast()));rectifyStateWithExceptionHandler(TypeReference.JavaLangClassCastException);if (DBG_CF) db("Converted checkcast into unconditional trap");break;} else {RegisterOperand refinedOp2=gc.getTemps().makeTemp(op2);s=TypeCheck.create(CHECKCAST,refinedOp2,op2.copy(),makeTypeOperand(typeRef.peekType()));refinedOp2.refine(TypeReference.NULL_TYPE);push(refinedOp2.copyRO());rectifyStateWithExceptionHandler(TypeReference.JavaLangClassCastException);if (DBG_CF) db("Narrowed type downstream of checkcast to NULL");break;}}}RegisterOperand refinedOp2=gc.getTemps().makeTemp(op2);if (classLoading) {s=TypeCheck.create(CHECKCAST_UNRESOLVED,refinedOp2,op2.copy(),makeTypeOperand(typeRef));} else {TypeOperand typeOp=makeTypeOperand(typeRef.peekType());if (isNonNull(op2)) {s=TypeCheck.create(CHECKCAST_NOTNULL,refinedOp2,op2.copy(),typeOp,copyGuardFromOperand(op2));} else {s=TypeCheck.create(CHECKCAST,refinedOp2,op2.copy(),typeOp);}}refinedOp2.refine(typeRef);push(refinedOp2.copyRO());rectifyStateWithExceptionHandler(TypeReference.JavaLangClassCastException);if (classLoading) rectifyStateWithErrorHandler();}break;case JBC_instanceof:{TypeReference typeRef=bcodes.getTypeReference();boolean classLoading=couldCauseClassLoading(typeRef);Operand op2=pop();if (VM.VerifyAssertions) opt_assert(op2.isRef());if (CF_INSTANCEOF && !classLoading) {if (op2.isDefinitelyNull()) {push(new IntConstantOperand(0));if (DBG_CF) db("skipped gen of null instanceof");break;}TypeReference type=getRefTypeOf(op2);int answer=ClassLoaderProxy.includesType(typeRef,type);if (answer == YES && isNonNull(op2)) {push(new IntConstantOperand(1));if (DBG_CF) {db(op2 + " instanceof " + typeRef+ " is always true ");}break;} else if (answer == NO) {if (DBG_CF) {db(op2 + " instanceof " + typeRef+ " is always false ");}push(new IntConstantOperand(0));break;}}RegisterOperand t=gc.getTemps().makeTempInt();if (classLoading) {s=InstanceOf.create(INSTANCEOF_UNRESOLVED,t,makeTypeOperand(typeRef),op2);} else {TypeOperand typeOp=makeTypeOperand(typeRef.peekType());if (isNonNull(op2)) {s=InstanceOf.create(INSTANCEOF_NOTNULL,t,typeOp,op2,copyGuardFromOperand(op2));} else {s=InstanceOf.create(INSTANCEOF,t,typeOp,op2);}}push(t.copyD2U());if (classLoading) rectifyStateWithErrorHandler();}break;case JBC_monitorenter:{Operand op0=pop();clearCurrentGuard();if (do_NullCheck(op0)) {break;}if (VM.VerifyAssertions) opt_assert(op0.isRef());s=MonitorOp.create(MONITORENTER,op0,getCurrentGuard());}break;case JBC_monitorexit:{Operand op0=pop();clearCurrentGuard();if (do_NullCheck(op0)) {break;}s=MonitorOp.create(MONITOREXIT,op0,getCurrentGuard());rectifyStateWithExceptionHandler(TypeReference.JavaLangIllegalMonitorStateException);}break;case JBC_wide:{int widecode=bcodes.getWideOpcode();int index=bcodes.getWideLocalNumber();switch (widecode) {case JBC_iload:s=do_iload(index);break;case JBC_lload:s=do_lload(index);break;case JBC_fload:s=do_fload(index);break;case JBC_dload:s=do_dload(index);break;case JBC_aload:s=do_aload(index);break;case JBC_istore:s=do_store(index,popInt());break;case JBC_lstore:s=do_store(index,popLong());break;case JBC_fstore:s=do_store(index,popFloat());break;case JBC_dstore:s=do_store(index,popDouble());break;case JBC_astore:s=do_astore(index);break;case JBC_iinc:s=do_iinc(index,bcodes.getWideIncrement());break;case JBC_ret:s=_retHelper(index);break;default :OptimizingCompilerException.UNREACHABLE();break;}}break;case JBC_multianewarray:{TypeReference arrayType=bcodes.getTypeReference();int dimensions=bcodes.getArrayDimension();if (dimensions == 1) {s=generateAnewarray(arrayType,null);} else {TypeOperand typeOp=makeTypeOperand(arrayType);RegisterOperand result=gc.getTemps().makeTemp(arrayType);markGuardlessNonNull(result);result.setPreciseType();TypeReference innermostElementTypeRef=arrayType.getInnermostElementType();RVMType innermostElementType=innermostElementTypeRef.peekType();if (innermostElementType != null && (innermostElementType.isInitialized() || innermostElementType.isInBootImage())) {result.setExtant();}s=Multianewarray.create(NEWOBJMULTIARRAY,result,typeOp,dimensions);for (int i=0; i < dimensions; i++) {Multianewarray.setDimension(s,dimensions - i - 1,popInt());}push(result.copyD2U());rectifyStateWithErrorHandler();rectifyStateWithExceptionHandler(TypeReference.JavaLangNegativeArraySizeException);}}break;case JBC_ifnull:s=_refIfNullHelper(ConditionOperand.EQUAL());break;case JBC_ifnonnull:s=_refIfNullHelper(ConditionOperand.NOT_EQUAL());break;case JBC_goto_w:{int offset=bcodes.getWideBranchOffset();if (offset != 5) {s=_gotoHelper(offset);}}break;case JBC_jsr_w:s=_jsrHelper(bcodes.getWideBranchOffset());break;case JBC_impdep1:{if (VM.BuildForAdaptiveSystem) {int pseudo_opcode=bcodes.nextPseudoInstruction();switch (pseudo_opcode) {case PSEUDO_LoadIntConst:{int value=bcodes.readIntConst();if (VM.TraceOnStackReplacement) {VM.sysWriteln("PSEUDO_LoadIntConst " + value);}push(new IntConstantOperand(value));param1=param2;param2=value;break;}case PSEUDO_LoadLongConst:{long value=bcodes.readLongConst();if (VM.TraceOnStackReplacement) {VM.sysWriteln("PSEUDO_LoadLongConst " + value);}pushDual(new LongConstantOperand(value));break;}case PSEUDO_LoadWordConst:{Address a=(VM.BuildFor32Addr) ? Address.fromIntSignExtend(bcodes.readIntConst()) : Address.fromLong(bcodes.readLongConst());push(new AddressConstantOperand(a));if (VM.TraceOnStackReplacement) {VM.sysWrite("PSEUDO_LoadWordConst 0x");}VM.sysWrite(a);VM.sysWriteln();break;}case PSEUDO_LoadFloatConst:{int ibits=bcodes.readIntConst();float value=Float.intBitsToFloat(ibits);if (VM.TraceOnStackReplacement) {VM.sysWriteln("PSEUDO_LoadFloatConst " + value);}push(new FloatConstantOperand(value,Offset.zero()));break;}case PSEUDO_LoadDoubleConst:{long lbits=bcodes.readLongConst();double value=Magic.longBitsAsDouble(lbits);if (VM.TraceOnStackReplacement) {VM.sysWriteln("PSEUDO_LoadDoubleConst " + lbits);}pushDual(new DoubleConstantOperand(value,Offset.zero()));break;}case PSEUDO_LoadRetAddrConst:{int value=bcodes.readIntConst();if (VM.TraceOnStackReplacement) {VM.sysWriteln("PSEUDO_LoadRetAddrConst " + value);}push(new ReturnAddressOperand(value));break;}case PSEUDO_InvokeStatic:{int targetidx=bcodes.readIntConst();RVMMethod meth=InvokeStatic.targetMethod(targetidx);if (VM.TraceOnStackReplacement) {VM.sysWriteln("PSEUDO_Invoke " + meth + "\n");}s=_callHelper(meth.getMemberRef().asMethodReference(),MethodOperand.STATIC(meth));if (s == null) break;Call.setAddress(s,new AddressConstantOperand(meth.getOffset()));if (targetidx == GETREFAT) {Object realObj=ObjectHolder.getRefAt(param1,param2);if (VM.VerifyAssertions) opt_assert(realObj != null);TypeReference klass=Magic.getObjectType(realObj).getTypeRef();RegisterOperand op0=gc.getTemps().makeTemp(klass);Call.setResult(s,op0);pop();push(op0.copyD2U(),klass);}rectifyStateWithExceptionHandlers();break;}case PSEUDO_InvokeCompiledMethod:{int cmid=bcodes.readIntConst();int origBCIdx=bcodes.readIntConst();CompiledMethod cm=CompiledMethods.getCompiledMethod(cmid);RVMMethod meth=cm.getMethod();if (VM.TraceOnStackReplacement) {VM.sysWriteln("PSEUDO_InvokeCompiledMethod " + meth + "\n");}s=_callHelper(meth.getMemberRef().asMethodReference(),MethodOperand.COMPILED(meth,cm.getOsrJTOCoffset()));if (s == null) break;s.adjustBytecodeIndex(bciAdjustment);rectifyStateWithExceptionHandlers();break;}case PSEUDO_ParamInitEnd:{break;}default :if (VM.TraceOnStackReplacement) {VM.sysWriteln("OSR Error, no such pseudo opcode : " + pseudo_opcode);}OptimizingCompilerException.UNREACHABLE();break;}break;} else {OptimizingCompilerException.UNREACHABLE();}}default :OptimizingCompilerException.UNREACHABLE();break;}if (s != null && !currentBBLE.isSelfRegen()) {appendInstruction(s);}if (VM.VerifyAssertions) opt_assert(bcodes.index() <= runoff);if (!endOfBasicBlock && bcodes.index() == runoff) {if (DBG_BB || DBG_SELECTED) {db("runoff occurred! current basic block: " + currentBBLE + ", runoff = "+ runoff);}endOfBasicBlock=fallThrough=true;}if (endOfBasicBlock) {if (currentBBLE.isSelfRegen()) {currentBBLE.block.deleteOut();if (DBG_CFG || DBG_SELECTED) {db("Deleted all out edges of " + currentBBLE.block);}return;}if (fallThrough) {if (VM.VerifyAssertions) opt_assert(bcodes.index() < bcodes.length());currentBBLE.fallThrough=getOrCreateBlock(bcodes.index());currentBBLE.block.insertOut(currentBBLE.fallThrough.block);}return;}}}  }
class C{  private String readResponse(InputStream in){  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  String inputLine;  StringBuilder builder=new StringBuilder();  try {    while ((inputLine=reader.readLine()) != null) {      builder.append(inputLine);    }  } catch (  IOException e) {    throw new MCApiRuntimeException(e);  }  return builder.toString();}  }
class C{  public int size(){  return size;}  }
class C{  public static int color(Color c){  return c.getRGB();}  }
class C{  public static String checkNumeric(EventType type,String numericFieldName){  return checkFieldNumeric(type,numericFieldName);}  }
class C{  public static String unbackQuoteChars(String string,String[] find,char[] replace){  int index;  StringBuilder newStr;  int[] pos;  int curPos;  String str;  int i;  if (string == null)   return null;  pos=new int[find.length];  str=new String(string);  newStr=new StringBuilder();  while (str.length() > 0) {    curPos=str.length();    index=-1;    for (i=0; i < pos.length; i++) {      pos[i]=str.indexOf(find[i]);      if ((pos[i] > -1) && (pos[i] < curPos)) {        index=i;        curPos=pos[i];      }    }    if (index == -1) {      newStr.append(str);      str="";    } else {      newStr.append(str.substring(0,pos[index]));      newStr.append(replace[index]);      str=str.substring(pos[index] + find[index].length());    }  }  return newStr.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean onlyInterolateInteriorHoles=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z == noData) {          output.setValue(row,col,1);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 6: ",progress);    }    if (onlyInterolateInteriorHoles) {      int[] scanFilter=new int[]{6,7,0,5};      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 6: ",progress);      }      scanFilter=new int[]{4,3,2,1};      for (row=(rows - 1); row >= 0; row--) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * 1 - row / (rows - 1));        updateProgress("Loop 3 of 6: ",progress);      }    }    int k=0;    boolean neighboursNoData=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            k++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 4 of 6: ",progress);    }    KdTree<Double> tree=new KdTree.SqrEuclid<Double>(2,k);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            double[] entry={row,col};            tree.addPoint(entry,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 5 of 6: ",progress);    }    List<KdTree.Entry<Double>> results;    double sumWeights;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output.getValue(row,col);        if (z == 1) {          double[] entry={row,col};          results=tree.nearestNeighbor(entry,6,true);          sumWeights=0;          for (i=0; i < results.size(); i++) {            sumWeights+=1 / (results.get(i).distance);          }          val=0;          for (i=0; i < results.size(); i++) {            val+=(1 / (results.get(i).distance)) / sumWeights * results.get(i).value;          }          output.setValue(row,col,val);        } else {          output.setValue(row,col,image.getValue(row,col));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 6 of 6: ",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,SecureRandom random) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",random);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  public boolean inType(){  return false;}  }
class C{  public void removeEchoBreakpoint(final Module module,final Address address){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  breakpointManager.removeBreakpoints(BreakpointType.ECHO,Sets.newHashSet(new BreakpointAddress(module == null ? null : module.getNative(),new UnrelocatedAddress(new CAddress(address.toLong())))));}  }
class C{  public CWMetricsScope(CWPublisherRunnable<CWMetricKey> publisher){  super();  this.publisher=publisher;}  }
class C{  public void traceOn(OutputStream traceStream){  if (traceStream == null) {    throw new NullPointerException();  } else {    this.traceStream=new PrintWriter(new OutputStreamWriter(traceStream,StandardCharsets.UTF_8),true);  }}  }
class C{  public static void skip(DataInput in) throws IOException {  Text.skip(in);  Text.skip(in);}  }
class C{  protected void creationFinished(Figure createdFigure){  if (isToolDoneAfterCreation()) {    fireToolDone();  }}  }
class C{  public ComponentTransferFunction createComponentTransferFunction(Element filterElement,Element funcElement){  int type=convertType(funcElement,ctx);switch (type) {case ComponentTransferFunction.DISCRETE:{      float[] v=convertTableValues(funcElement,ctx);      if (v == null) {        return ConcreteComponentTransferFunction.getIdentityTransfer();      } else {        return ConcreteComponentTransferFunction.getDiscreteTransfer(v);      }    }case ComponentTransferFunction.IDENTITY:{    return ConcreteComponentTransferFunction.getIdentityTransfer();  }case ComponentTransferFunction.GAMMA:{  float amplitude=convertNumber(funcElement,SVG_AMPLITUDE_ATTRIBUTE,1,ctx);  float exponent=convertNumber(funcElement,SVG_EXPONENT_ATTRIBUTE,1,ctx);  float offset=convertNumber(funcElement,SVG_OFFSET_ATTRIBUTE,0,ctx);  return ConcreteComponentTransferFunction.getGammaTransfer(amplitude,exponent,offset);}case ComponentTransferFunction.LINEAR:{float slope=convertNumber(funcElement,SVG_SLOPE_ATTRIBUTE,1,ctx);float intercept=convertNumber(funcElement,SVG_INTERCEPT_ATTRIBUTE,0,ctx);return ConcreteComponentTransferFunction.getLinearTransfer(slope,intercept);}case ComponentTransferFunction.TABLE:{float[] v=convertTableValues(funcElement,ctx);if (v == null) {return ConcreteComponentTransferFunction.getIdentityTransfer();} else {return ConcreteComponentTransferFunction.getTableTransfer(v);}}default :throw new Error("invalid convertType:" + type);}}  }
class C{  public static void callback(Script script) throws CompilationFailedException, IOException {  System.setSecurityManager(null);  setupBinding(script.getBinding());}  }
class C{  public static void reviveLogger(){  if (loggerHandler != null) {synchronized (loggerHandler) {      if (logger.getHandlers().length == 0) {        logger.addHandler(loggerHandler);      }      logger.setLevel(loggerLevel);    }  }}  }
class C{  @Override public void execute(Player admin,List<String> args){  super.execute(admin,args);  TurnNotifier.get().dontNotify(this);  StendhalRPWorld world=SingletonRepository.getRPWorld();  zone=world.getZone("int_semos_bank");  pathArea=new Area(zone,32,7,35,7);  tablePathArea=new Area(zone,35,2,40,8);  TurnNotifier.get().notifyInSeconds(CHECK_INTERVAL,this);}  }
class C{  @Override public String multiResultsetSummary(int comparisonColumn) throws Exception {  int[][] nonSigWin=new int[getNumResultsets()][getNumResultsets()];  int[][] win=multiResultsetWins(comparisonColumn,nonSigWin);  initResultMatrix();  m_ResultMatrix.setSummary(nonSigWin,win);  return m_ResultMatrix.toStringSummary();}  }
class C{  public static final HashMap readThisMapXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, IOException {  HashMap map=new HashMap();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      if (name[0] != null) {        map.put(name[0],val);      } else {        throw new XmlPullParserException("Map value without name attribute: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return map;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public static Set<UnitCategory> categorize(final Collection<Unit> units,final Map<Unit,Collection<Unit>> dependent,final boolean categorizeMovement,final boolean categorizeTransportCost){  return categorize(units,dependent,categorizeMovement,categorizeTransportCost,true);}  }
class C{  void createEntry(int hash,long key,VALUE value,int bucketIndex){  table[bucketIndex]=new LongEntry<>(hash,key,value,table[bucketIndex]);  size++;}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  public ImageCache(Context context,ImageCacheParams cacheParams){  init(context,cacheParams);}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  public <T>T access(Class<T> clazz){  if (configuration.getClass().equals(clazz)) {    return clazz.cast(configuration);  }  try {    return clazz.cast(fieldCache.get(clazz).get(configuration));  } catch (  Exception e) {    log.error("Could not access field for " + clazz,e);    throw new RuntimeException(e);  }}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  public static UUID nameUUIDFromBytes(byte[] name){  if (name == null) {    throw new NullPointerException("name == null");  }  try {    MessageDigest md=MessageDigest.getInstance("MD5");    return makeUuid(md.digest(name),3);  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }}  }
class C{  public CombinationGenerator(int[] dims){  this.dims=dims;  local=new int[dims.length];  returned=new int[dims.length];  for (int i=0; i < dims.length - 1; i++) {    local[i]=0;  }  if (local.length > 0) {    local[local.length - 1]=-1;  }  begun=false;}  }
class C{  public boolean hasNonZeroOrNonNullKeys(){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      return true;case IPv4:    if (!entity.ipv4Address.equals(IPv4Address.NONE))     return true;  break;case IPv6:if (!entity.ipv6Address.equals(IPv6Address.NONE)) return true;break;case SWITCH:if (!entity.switchDPID.equals(DatapathId.NONE)) return true;break;case PORT:if (!entity.switchPort.equals(OFPort.ZERO)) return true;break;case VLAN:if (entity.vlan != null) return true;break;}}return false;}  }
class C{  public static Model readFrom(InputStream is) throws IOException {  return fetchModel(XMLTree.from(requireNonNull(is,"Required not null input stream")));}  }
class C{  public T caseBlock(Block object){  return null;}  }
class C{  public CMemorySelectionPanel(final JFrame parent,final CDebugPerspectiveModel debugPerspectiveModel,final CMemoryRefreshButtonPanel refreshPanel){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01456: Parent argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01457: Debugger argument can not be null");  m_memorySectionPanel=new CMemorySectionPanel(debugPerspectiveModel);  m_refreshPanel=refreshPanel;  m_memoryPanel=new CMemoryPanel(parent,debugPerspectiveModel);  setBorder(new TitledBorder("Target Memory"));  final JPanel headerPanel=new JPanel(new BorderLayout());  headerPanel.add(m_memorySectionPanel,BorderLayout.CENTER);  headerPanel.add(m_refreshPanel,BorderLayout.EAST);  add(headerPanel,BorderLayout.NORTH);  add(m_memoryPanel,BorderLayout.CENTER);}  }
class C{  public static boolean asBoolean(Object object){  return object != null;}  }
class C{  public ConcurrentHashMapPro(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);  putAll(m);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.115 -0500",hash_original_method="D29C36EF10CFF1709E916D648669409B",hash_generated_method="C2F9DD9B3DC779CA372B2275183CC9ED") protected SIPServerTransaction(SIPTransactionStack sipStack,MessageChannel newChannelToUse){  super(sipStack,newChannelToUse);  if (sipStack.maxListenerResponseTime != -1) {    sipStack.getTimer().schedule(new ListenerExecutionMaxTimer(),sipStack.maxListenerResponseTime * 1000);  }  this.rseqNumber=(int)(Math.random() * 1000);  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Creating Server Transaction" + this.getBranchId());    sipStack.getStackLogger().logStackTrace();  }}  }
class C{  public void resetToHomePosition(){  this.setPosition(homeX,homeY);  lastX=homeX;  lastY=homeY;  moveCountSinceHome=0;  notifyWorldAboutChanges();}  }
class C{  public FasRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  private List buildMaximalEdgeRings(Collection dirEdges){  List maxEdgeRings=new ArrayList();  for (Iterator it=dirEdges.iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    if (de.isInResult() && de.getLabel().isArea()) {      if (de.getEdgeRing() == null) {        MaximalEdgeRing er=new MaximalEdgeRing(de,geometryFactory);        maxEdgeRings.add(er);        er.setInResult();      }    }  }  return maxEdgeRings;}  }
class C{  public void addHtmlLink(String htmlUrl,String lang,String title){  try {    Link link=new Link(Link.Rel.ALTERNATE,Link.Type.HTML,new URI(htmlUrl));    if (lang != null) {      link.setHrefLang(lang);    }    if (title != null) {      link.setTitle(title);    }    addElement(Link.KEY,link);  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public boolean isPostEncumbrance(){  Object oo=get_Value(COLUMNNAME_PostEncumbrance);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static final ImagePoint convertPoint(MapPoint mapPoint,MapEnvelope mapEnv,int imgHeight,int imgWidth){  long imageY=Math.round(convertY(mapPoint,mapEnv,imgHeight));  long imageX=Math.round(convertX(mapPoint,mapEnv,imgWidth));  return new ImagePoint(imageX,imageY);}  }
class C{  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {  SolrCore core=h.getCore();  UpdateRequestHandler handler=new UpdateRequestHandler();  handler.init(null);  MapSolrParams params=new MapSolrParams(new HashMap<String,String>());  params.getMap().put("update.processor","nonexistant");  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequestBase req=new SolrQueryRequestBase(core,params){  };  try {    handler.handleRequestBody(req,rsp);    assertTrue("Old param update.processor should not have any effect anymore",true);  } catch (  Exception e) {    assertFalse("Got wrong exception while testing update.chain",e.getMessage().equals("unknown UpdateRequestProcessorChain: nonexistant"));  }  params.getMap().remove("update.processor");  params.getMap().put(UpdateParams.UPDATE_CHAIN,"nonexistant");  req.setParams(params);  try {    handler.handleRequestBody(req,rsp);    assertFalse("Faulty update.chain parameter not causing an error - i.e. it is not detected",true);  } catch (  Exception e) {    assertEquals("Got wrong exception while testing update.chain",e.getMessage(),"unknown UpdateRequestProcessorChain: nonexistant");  }}  }
class C{  public void insert(int index,Double value){  if (value == null) {    insertNull(index);  } else {    _insert(index,numberNode(value.doubleValue()));  }}  }
class C{  public boolean hasStreet(){  return hasExtension(Street.class);}  }
class C{  public URI edit(String entityId,String newType,String data){  URIBuilder builder=apiBuilder();  builder.addParameter("action","wbeditentity");  if (entityId != null) {    builder.addParameter("id",entityId);  } else {    builder.addParameter("new",newType);  }  builder.addParameter("data",data);  return build(builder);}  }
class C{  public BuiltInTypeScope(ExecutionEnvironmentDescriptor descriptor){  super(descriptor);}  }
class C{  public static byte[] toByteArray(File file) throws IOException {  return asByteSource(file).read();}  }
class C{  public boolean isMissingAt(int rowIndex,int columnIndex){  return ((ArffTableModel)getModel()).isMissingAt(mIndices[rowIndex],columnIndex);}  }
class C{  static boolean luDecomposition(double[] matrix0,int[] row_perm){  double row_scale[]=new double[3];{    int i, j;    int ptr, rs;    double big, temp;    ptr=0;    rs=0;    i=3;    while (i-- != 0) {      big=0.0;      j=3;      while (j-- != 0) {        temp=matrix0[ptr++];        temp=Math.abs(temp);        if (temp > big) {          big=temp;        }      }      if (big == 0.0) {        return false;      }      row_scale[rs++]=1.0 / big;    }  }{    int j;    int mtx;    mtx=0;    for (j=0; j < 3; j++) {      int i, imax, k;      int target, p1, p2;      double sum, big, temp;      for (i=0; i < j; i++) {        target=mtx + (3 * i) + j;        sum=matrix0[target];        k=i;        p1=mtx + (3 * i);        p2=mtx + j;        while (k-- != 0) {          sum-=matrix0[p1] * matrix0[p2];          p1++;          p2+=3;        }        matrix0[target]=sum;      }      big=0.0;      imax=-1;      for (i=j; i < 3; i++) {        target=mtx + (3 * i) + j;        sum=matrix0[target];        k=j;        p1=mtx + (3 * i);        p2=mtx + j;        while (k-- != 0) {          sum-=matrix0[p1] * matrix0[p2];          p1++;          p2+=3;        }        matrix0[target]=sum;        if ((temp=row_scale[i] * Math.abs(sum)) >= big) {          big=temp;          imax=i;        }      }      if (imax < 0) {        throw new RuntimeException("PROBLEM!!! Matrix3d");      }      if (j != imax) {        k=3;        p1=mtx + (3 * imax);        p2=mtx + (3 * j);        while (k-- != 0) {          temp=matrix0[p1];          matrix0[p1++]=matrix0[p2];          matrix0[p2++]=temp;        }        row_scale[imax]=row_scale[j];      }      row_perm[j]=imax;      if (matrix0[(mtx + (3 * j) + j)] == 0.0) {        return false;      }      if (j != (3 - 1)) {        temp=1.0 / (matrix0[(mtx + (3 * j) + j)]);        target=mtx + (3 * (j + 1)) + j;        i=2 - j;        while (i-- != 0) {          matrix0[target]*=temp;          target+=3;        }      }    }  }  return true;}  }
class C{  private void onUnitReleased(ClassLoader clsLdr){  if (!clsLdr.equals(getClass().getClassLoader()))   GridUriDeploymentFileProcessor.cleanupUnit(clsLdr,log);  DeploymentListener tmp=lsnr;  if (tmp != null)   tmp.onUnregistered(clsLdr);}  }
class C{  public void detachMirrorFromLocalVirtualVolume(String virtualVolumeName,String mirrorDeviceName,boolean discard) throws VPlexApiException {  s_logger.info("Request to detach a mirror from a local virtual volume at {}",_baseURI);  _virtualVolumeMgr.detachMirrorFromLocalVirtualVolume(virtualVolumeName,mirrorDeviceName,discard);}  }
class C{  public void updateXMLValue(String item,String value){  if (item.equals("jss_url")) {    this.root.getChildren().get(0).setText(value);  } else   if (item.equals("jss_username")) {    this.root.getChildren().get(1).setText(value);  } else   if (item.equals("jss_password")) {    this.root.getChildren().get(2).setText(value);  } else   if (item.equals("smart_groups")) {    this.root.getChildren().get(5).getChildren().get(1).setText(value);  } else   if (item.equals("extension_attributes")) {    this.root.getChildren().get(5).getChildren().get(2).getChildren().get(0).setText(value);    this.root.getChildren().get(5).getChildren().get(2).getChildren().get(1).setText(value);  }  try {    XMLOutputter o=new XMLOutputter();    o.setFormat(Format.getPrettyFormat());    o.output(this.root,new FileWriter(getConfigurationPath()));  } catch (  Exception e) {    LOGGER.error("Unable to update XML file.",e);  }}  }
class C{  @Override public void addChild(FXGNode child){  if (content == null) {    if (child instanceof CDATANode && TextHelper.ignorableWhitespace(((CDATANode)child).content)) {      return;    } else {      super.addChild(child);    }  } else {    super.addChild(child);  }}  }
class C{  public static ScheduledReporter createElasticSearchReporter(MetricRegistry metricRegistry,Map<String,Object> config) throws BaleenException {  try {    String server=(String)config.getOrDefault("server","localhost:9200");    String index=(String)config.getOrDefault("index","metrics");    int timeout=(int)config.getOrDefault("timeout",1000);    int bulkSize=(int)config.getOrDefault("bulkSize",2500);    return ElasticsearchReporter.forRegistry(metricRegistry).convertRatesTo(getRatesUnit(config)).convertDurationsTo(getDurationUnit(config)).bulkSize(bulkSize).hosts(server).index(index).timeout(timeout).build();  } catch (  IOException e) {    throw new BaleenException("Unable to create ElasticSearch reporter",e);  }}  }
class C{  private static void notifyListeners(List<ExecutorTerminatedListener> listeners){  for (  ExecutorTerminatedListener listener : listeners) {    listener.terminated();  }}  }
class C{  public List types(){  return this.types;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public void endDocument() throws SAXException {  flushPending();  m_saxHandler.endDocument();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public void onClearMap(View view){  if (!checkReady()) {    return;  }  mMap.clear();}  }
class C{  public static boolean isAlphaChar(String text,int index){  char c=text.charAt(index);  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9');}  }
class C{  private String makeEscaped(String name){  int length=name.length();  if (length == 0) {    return name;  }  StringBuilder buf=new StringBuilder(length * 2);  for (int index=0; index < length; index++) {    char ch=name.charAt(index);switch (ch) {case ' ':      if (index == 0 || index == (length - 1)) {        buf.append('\\');      }    buf.append(' ');  break;case '"':case '\\':hasQE=true;buf.append('\\');buf.append(ch);break;case ',':case '+':case '<':case '>':case ';':case '#':case '=':buf.append('\\');buf.append(ch);break;default :buf.append(ch);break;}}return buf.toString();}  }
class C{  public ObjectFactory(){}  }
class C{  public static File open(@NonNull String dirPath,@NonNull String name){  return new File(dirPath,name);}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public RemoteException(Throwable originalException){  super(assertNotNull(originalException).getMessage());  this.originalExceptionClass=originalException.getClass().getCanonicalName();  super.setStackTrace(originalException.getStackTrace());}  }
class C{  public void stopMouseCapture(){  ((SVG12BridgeContext)bridgeContext.getPrimaryBridgeContext()).stopMouseCapture();}  }
class C{  private void initDefaultRule(ErrorListener errorListener) throws TransformerException {  m_defaultRule=new ElemTemplate();  m_defaultRule.setStylesheet(this);  XPath defMatch=new XPath("*",this,this,XPath.MATCH,errorListener);  m_defaultRule.setMatch(defMatch);  ElemApplyTemplates childrenElement=new ElemApplyTemplates();  childrenElement.setIsDefaultTemplate(true);  childrenElement.setSelect(m_selectDefault);  m_defaultRule.appendChild(childrenElement);  m_startRule=m_defaultRule;  m_defaultTextRule=new ElemTemplate();  m_defaultTextRule.setStylesheet(this);  defMatch=new XPath("text() | @*",this,this,XPath.MATCH,errorListener);  m_defaultTextRule.setMatch(defMatch);  ElemValueOf elemValueOf=new ElemValueOf();  m_defaultTextRule.appendChild(elemValueOf);  XPath selectPattern=new XPath(".",this,this,XPath.SELECT,errorListener);  elemValueOf.setSelect(selectPattern);  m_defaultRootRule=new ElemTemplate();  m_defaultRootRule.setStylesheet(this);  defMatch=new XPath("/",this,this,XPath.MATCH,errorListener);  m_defaultRootRule.setMatch(defMatch);  childrenElement=new ElemApplyTemplates();  childrenElement.setIsDefaultTemplate(true);  m_defaultRootRule.appendChild(childrenElement);  childrenElement.setSelect(m_selectDefault);}  }
class C{  public RandomScoreFunctionBuilder seed(int seed){  this.seed=seed;  return this;}  }
class C{  private String load(File file) throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    return load(reader);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.474 -0500",hash_original_method="FFA94FE476B4FC82FDFAB8191F06F76A",hash_generated_method="4F3AC23F2FDE2E244EBF603512230CB6") public Intent putExtra(String name,String value){  mExtras.put(name,value);  return this;}  }
class C{  public boolean isEnableContactsLogging(){  return enableContactsLogging;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public AbstractTileFactory(TileFactoryInfo info){  super(info);}  }
class C{  public StructImplString(int type){  if (type == TYPE_LINKED)   map=new LinkedHashMap<Collection.Key,Object>(); else   if (type == TYPE_WEAKED)   map=new java.util.WeakHashMap<Collection.Key,Object>(); else   if (type == TYPE_SYNC)   map=MapFactory.<Collection.Key,Object>getConcurrentMap(); else   map=new HashMap<Collection.Key,Object>();}  }
class C{  private void mergeContiguousFragments(TextFragment[] frag){  boolean mergingStillBeingDone;  if (frag.length > 1)   do {    mergingStillBeingDone=false;    for (int i=0; i < frag.length; i++) {      if (frag[i] == null) {        continue;      }      for (int x=0; x < frag.length; x++) {        if (frag[x] == null) {          continue;        }        if (frag[i] == null) {          break;        }        TextFragment frag1=null;        TextFragment frag2=null;        int frag1Num=0;        int frag2Num=0;        int bestScoringFragNum;        int worstScoringFragNum;        if (frag[i].follows(frag[x])) {          frag1=frag[x];          frag1Num=x;          frag2=frag[i];          frag2Num=i;        } else         if (frag[x].follows(frag[i])) {          frag1=frag[i];          frag1Num=i;          frag2=frag[x];          frag2Num=x;        }        if (frag1 != null) {          if (frag1.getScore() > frag2.getScore()) {            bestScoringFragNum=frag1Num;            worstScoringFragNum=frag2Num;          } else {            bestScoringFragNum=frag2Num;            worstScoringFragNum=frag1Num;          }          frag1.merge(frag2);          frag[worstScoringFragNum]=null;          mergingStillBeingDone=true;          frag[bestScoringFragNum]=frag1;        }      }    }  } while (mergingStillBeingDone);}  }
class C{  private static int mulPosAndCheck(final int x,final int y){  final long m=(long)x * (long)y;  if (m > Integer.MAX_VALUE) {    throw new ArithmeticException("overflow: mulPos");  }  return (int)m;}  }
class C{  private static Composite createFolder(String levelName){  Composite composite=new Composite();  composite.setName(levelName);  composite.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_FOLDER));  return composite;}  }
class C{  private void stitchSides(){  if (!isStitchable(this)) {    return;  }  QuadTree qt=null;  qt=getNeighbor(Side.Left,level,quadrant);  if (isStitchable(qt) && (qt.level == level)) {    qt.stitch(Side.Right,this);    leftDirty=false;  }  qt=getNeighbor(Side.Top,level,quadrant);  if (isStitchable(qt) && (qt.level == level)) {    qt.stitch(Side.Bottom,this);    topDirty=false;  }  qt=getNeighbor(Side.Right,level,quadrant);  if (isStitchable(qt) && (qt.level == level)) {    qt.stitch(Side.Left,this);    rightDirty=false;  }  qt=getNeighbor(Side.Bottom,level,quadrant);  if (isStitchable(qt) && (qt.level == level)) {    qt.stitch(Side.Top,this);    bottomDirty=false;  }}  }
class C{  public void componentHidden(final ComponentEvent e){  final Object source=e.getSource();  if (!(source instanceof JMenuItem))   return;  setChildVisible((JMenuItem)source,false);}  }
class C{  private int nullToZero(Integer i){  if (i == null)   return 0;  return i.intValue();}  }
class C{  public GangliaListener(final InetAddress group,final int port,final IGangliaMessageDecoder decoder,final IGangliaMessageHandler handler){  if (group == null)   throw new IllegalArgumentException();  if (port <= 0)   throw new IllegalArgumentException();  if (handler == null)   throw new IllegalArgumentException();  if (decoder == null)   throw new IllegalArgumentException();  this.group=group;  this.port=port;  this.decoder=decoder;  this.handler=handler;}  }
class C{  final public String yytext(){  return new String(yy_buffer,yy_startRead,yy_markedPos - yy_startRead);}  }
class C{  public static void register(final Server server){  register(server,Duration.fromMilliseconds(DEFAULT_GRACE_PERIOD_MILLIS));}  }
class C{  public static NodeList toNodeList(Object o) throws PageException {  if (o instanceof NodeList) {    return (NodeList)o;  } else   if (o instanceof ObjectWrap) {    return toNodeList(((ObjectWrap)o).getEmbededObject());  }  throw new CasterException(o,"NodeList");}  }
class C{  public ContinuousDistribution(String variable,DensityFunction function){  this.variable=variable;  this.function=function;}  }
class C{  public Bindings add(String property,JTextComponent c,String defaultValue){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,defaultValue));}  }
class C{  public ObjectParser(final Object context,final Class<?> type,final String[] packages,final String[] factoryMethod){  this.context=context;  this.type=type;  this.packages=packages;  this.factoryMethod=factoryMethod;}  }
class C{  public Builder port(final int port){  this.port=of(port);  return this;}  }
class C{  @Override public boolean contains(O object){  for (  ResultSet<O> resultSet : this.resultSets) {    if (resultSet.contains(object)) {      return true;    }  }  return false;}  }
class C{  public static Matrix readLAVModelFile(String fileName,boolean ignoreFirstLine){  LinkedList<String> fileRows=GeneralLib.readFileRows(fileName);  Matrix stringMatrix=new Matrix();  int maxNumberOfTabs=0;  for (  String row : fileRows) {    int numberOfTabs=row.split("\t").length;    if (numberOfTabs > maxNumberOfTabs) {      maxNumberOfTabs=numberOfTabs;    }  }  for (  String row : fileRows) {    String[] columns=row.split("\t");    int numberOfTabs=columns.length;    if (numberOfTabs == maxNumberOfTabs) {      if (ignoreFirstLine) {        ignoreFirstLine=false;      } else {        ArrayList<String> rowList=GeneralLib.convertStringArrayToArrayList(columns);        stringMatrix.addRow(rowList);      }    } else {      DebugLib.emptyFunctionForSettingBreakPoint();    }  }  if (stringMatrix.getNumberOfRows() == 0) {    DebugLib.stopSystemAndReportInconsistency("maxNumberOfTabs:" + maxNumberOfTabs);  }  return stringMatrix;}  }
class C{  protected TypeFakeDefinitionImpl(){  super();}  }
class C{  public void addToState(ProbDistribution distrib){  String variable=distrib.getVariable() + "'";  setAsCommitted(variable);  distrib.modifyVariableId(distrib.getVariable(),variable);  ChanceNode newNode=new ChanceNode(variable,distrib);  if (hasNode(variable)) {    BNode toRemove=getNode(variable);    removeNodes(toRemove.getDescendantIds());    removeNode(toRemove.getId());  }  for (  String inputVar : distrib.getInputVariables()) {    if (hasChanceNode(inputVar)) {      newNode.addInputNode(getChanceNode(inputVar));    }  }  addNode(newNode);  connectToPredictions(newNode);  incrementalVars.remove(variable);}  }
class C{  public Builder persistentSubscriptionBufferSize(int persistentSubscriptionBufferSize){  this.persistentSubscriptionBufferSize=persistentSubscriptionBufferSize;  return this;}  }
class C{  public boolean isJsonObject(){  return this instanceof JsonObject;}  }
class C{  @Override protected int visitDecisionState(DecisionState p){  int predictedAlt=super.visitDecisionState(p);  if (p.getNumberOfTransitions() > 1) {    if (p.decision == this.overrideDecision && this._input.index() == this.overrideDecisionInputIndex) {      overrideDecisionRoot=(GrammarInterpreterRuleContext)getContext();    }  }  GrammarInterpreterRuleContext ctx=(GrammarInterpreterRuleContext)_ctx;  if (decisionStatesThatSetOuterAltNumInContext.get(p.stateNumber)) {    ctx.outerAltNum=predictedAlt;    Rule r=g.getRule(p.ruleIndex);    if (atn.ruleToStartState[r.index].isLeftRecursiveRule) {      int[] alts=stateToAltsMap[p.stateNumber];      LeftRecursiveRule lr=(LeftRecursiveRule)g.getRule(p.ruleIndex);      if (p.getStateType() == ATNState.BLOCK_START) {        if (alts == null) {          alts=lr.getPrimaryAlts();          stateToAltsMap[p.stateNumber]=alts;        }      } else       if (p.getStateType() == ATNState.STAR_BLOCK_START) {        if (alts == null) {          alts=lr.getRecursiveOpAlts();          stateToAltsMap[p.stateNumber]=alts;        }      }      ctx.outerAltNum=alts[predictedAlt];    }  }  return predictedAlt;}  }
class C{  public int size(){  return n;}  }
class C{  public Problem(String message){  this();  this.message=message;}  }
class C{  public RepeatWrapper(final ISpeedTestSocket socket){  mSpeedTestSocket=socket;}  }
class C{  @Override public void info(PrintStream stream){  BinaryTable myData=this.myData;  stream.println("  Binary Table");  stream.println("      Header Information:");  int nhcol=this.myHeader.getIntValue(TFIELDS,-1);  int nrow=this.myHeader.getIntValue(NAXIS2,-1);  int rowsize=this.myHeader.getIntValue(NAXIS1,-1);  stream.print("          " + nhcol + " fields");  stream.println(", " + nrow + " rows of length "+ rowsize);  for (int i=1; i <= nhcol; i+=1) {    stream.print("           " + i + ":");    prtField(stream,"Name",TTYPEn.n(i).key());    prtField(stream,"Format",TFORMn.n(i).key());    prtField(stream,"Dimens",TDIMn.n(i).key());    stream.println("");  }  stream.println("      Data Information:");  if (myData == null || this.myData.getNRows() == 0 || this.myData.getNCols() == 0) {    stream.println("         No data present");    if (this.myData.getHeapSize() > 0) {      stream.println("         Heap size is: " + this.myData.getHeapSize() + " bytes");    }  } else {    stream.println("          Number of rows=" + this.myData.getNRows());    stream.println("          Number of columns=" + this.myData.getNCols());    if (this.myData.getHeapSize() > 0) {      stream.println("          Heap size is: " + this.myData.getHeapSize() + " bytes");    }    Object[] cols=this.myData.getFlatColumns();    for (int i=0; i < cols.length; i+=1) {      stream.println("           " + i + ":"+ ArrayFuncs.arrayDescription(cols[i]));    }  }}  }
class C{  protected Instances performTest(){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals("Number of attributes",icopy.numAttributes(),result.numAttributes());  assertEquals("Number of instances",icopy.numInstances(),m_Instances.numInstances());  for (int i=0; i < result.numAttributes(); i++) {    assertEquals("Number of values differ for attribute #" + (i + 1),icopy.attribute(i).numValues(),result.attribute(i).numValues());    HashSet<String> valuesOriginal=new HashSet<String>();    HashSet<String> valuesResult=new HashSet<String>();    for (int n=0; n < icopy.attribute(i).numValues(); n++) {      valuesOriginal.add(icopy.attribute(i).value(n));      valuesResult.add(result.attribute(i).value(n));    }    assertEquals("Values differ for attribute #" + (i + 1),valuesOriginal,valuesResult);  }  return result;}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.729 -0400",hash_original_method="317FFD5E22779163B9A9FF8F68A90F78",hash_generated_method="2A98E4C470D4F7C5996C6947A05619B6") public int read() throws IOException {  if (pos >= 0) {    int cur=pos % BUFF_SIZE;    if (cur < bar) {      pos++;      return buff[cur];    }    if (cur != end) {      buff[cur]=inStream.read();      bar=cur + 1;      pos++;      return buff[cur];    } else {      pos=-1;    }  }  return inStream.read();}  }
class C{  public static void saveDoubleValue(String name,double value,boolean isDefault){  if (isDefault) {    preferenceStore.setDefault(name,value);  } else {    preferenceStore.setValue(name,value);  }  try {    preferenceStore.save();  } catch (  IOException e) {    InspectIT.getDefault().createErrorDialog("Error occurred trying to save setting with name '" + name + "' to preference store.",e,-1);  }}  }
class C{  public FileTypeComponent(DefinitionFileModel model,WizardComponentContainer container){  super(container);  this.model=model;  Composite parent=getParentComposite();  Label definitionFileLabel=new Label(parent,SWT.NONE);  definitionFileLabel.setLayoutData(fillLabelDefaults());  definitionFileLabel.setText("File type:");  definitionFileBox=new Button(parent,SWT.CHECK);  definitionFileBox.setText("Definition file (.n4jsd)");  definitionFileBox.setLayoutData(fillLabelDefaults());  WizardComponentUtils.emptyGridCell(parent);  setupBindings();}  }
class C{  @Override public boolean waitForExists(String obj,long timeout) throws UiObjectNotFoundException {  return getUiObject(obj).waitForExists(timeout);}  }
class C{  public static String toFileSystemSafeName(String name,boolean dirSeparators,int maxFileLength){  int size=name.length();  StringBuilder rc=new StringBuilder(size * 2);  for (int i=0; i < size; i++) {    char c=name.charAt(i);    boolean valid=c >= 'a' && c <= 'z';    valid=valid || (c >= 'A' && c <= 'Z');    valid=valid || (c >= '0' && c <= '9');    valid=valid || (c == '_') || (c == '-')|| (c == '.');    valid=valid || (dirSeparators && ((c == '/') || (c == '\\')));    if (valid) {      rc.append(c);    }  }  String result=rc.toString();  if (result.length() > maxFileLength) {    result=result.substring(result.length() - maxFileLength,result.length());  }  return result;}  }
class C{  protected CSVRecord(){  this.record=new ArrayList<>();}  }
class C{  public void internalFrameClosed(InternalFrameEvent e){}  }
class C{  public static void assertArrayEqual(Object[] expected,Object[] actual,String errorMessage){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ", "+ errorMessage+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],errorMessage);  }}  }
class C{  @Bean JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory){  JpaTransactionManager transactionManager=new JpaTransactionManager();  transactionManager.setEntityManagerFactory(entityManagerFactory);  return transactionManager;}  }
class C{  @Override public void onClose(){  mmainActivity.invalidateOptionsMenu();}  }
class C{  public EmbeddedSolrServer(CoreContainer coreContainer,String coreName){  if (coreContainer == null) {    throw new NullPointerException("CoreContainer instance required");  }  this.coreContainer=coreContainer;  this.coreName=coreName == null ? "" : coreName;  _parser=new SolrRequestParsers(null);}  }
class C{  @Override public PlaySoundEntity create(final ConfigurableFactoryContext ctx){  PlaySoundEntity source;  source=new PlaySoundEntity(getSound(ctx),getRadius(ctx),getVolume(ctx));  return source;}  }
class C{  public static List<Node> searchPath(final StendhalRPZone zone,final int startX,final int startY,final int destX,final int destY,final double maxDistance){  final Pathfinder pathfinder=new SimplePathfinder(zone,startX,startY,new Rectangle(destX,destY,1,1),maxDistance);  return pathfinder.getPath();}  }
class C{  public RDFParseException(String msg,long lineNo,long columnNo){  super(msg + getLocationString(lineNo,columnNo));  this.lineNo=lineNo;  this.columnNo=columnNo;}  }
class C{  public void rejectTerms(String requestId,String pin) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Send response for request ".concat(requestId));  }  if (TextUtils.isEmpty(requestId)) {    throw new PayloadException("requestId should never be null or empty!");  }  sendSipMessage(mRcsSettings.getEndUserConfirmationRequestUri(),requestId,DECLINE_RESPONSE,pin);}  }
class C{  protected void verifyFileContents(ParcelFileDescriptor actual,byte[] expected) throws IOException {  AutoCloseInputStream input=new ParcelFileDescriptor.AutoCloseInputStream(actual);  long fileSize=actual.getStatSize();  assertTrue(fileSize <= Integer.MAX_VALUE);  assertEquals(expected.length,fileSize);  byte[] actualData=new byte[expected.length];  assertEquals(input.read(actualData),fileSize);  compareByteArrays(actualData,expected);}  }
class C{  public WhereBuilder or(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "OR",columnName,op,value);  return this;}  }
class C{  public void testPersist(){  File file=FileTesting.createFile();  try (MappedBuffer buffer=MappedBuffer.allocate(file,16)){    buffer.writeLong(10).writeLong(11).flip();    assertEquals(buffer.readLong(),10);    assertEquals(buffer.readLong(),11);  }   try (MappedBuffer buffer=MappedBuffer.allocate(file,16)){    assertEquals(buffer.readLong(),10);    assertEquals(buffer.readLong(),11);  } }  }
class C{  public byte[] take() throws KeeperException, InterruptedException {  TimerContext timer=stats.time(dir + "_take");  updateLock.lockInterruptibly();  try {    while (true) {      byte[] result=removeFirst();      if (result != null) {        return result;      }      changed.await();    }  }  finally {    updateLock.unlock();    timer.stop();  }}  }
class C{  public void close(){  if (btree != null) {    btree.removeAll();    btree=null;  }}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int[] hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if ((hc=threadHashCode.get()) == null || as == null || (n=as.length) < 1 || (a=as[(n - 1) & hc[0]]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public static boolean isPublic(int mod){  return (mod & PUBLIC) != 0;}  }
class C{  public boolean next(){  checkState();  if (mPlayerPlaylist.isEmpty()) {    return false;  }  PlaybackService.play(getContext(),mClientKey,mPlayerPlaylist.next());  return true;}  }
class C{  public RemoteLocatorPingResponse(){  super();}  }
class C{  public boolean canMoveBack(){  return currentIndex > 0;}  }
class C{  public boolean hasDate(){  return getDate() != null;}  }
class C{  public static Motion createDecelerationMotion(int sourceValue,int destinationValue,int duration){  Motion deceleration=new Motion(sourceValue,destinationValue,duration);  deceleration.motionType=DECELERATION;  return deceleration;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.271 -0500",hash_original_method="43F5E066353E431B2C9AD7CD0397BCCF",hash_generated_method="F3752548F85DBDF2C8EDC6A522B89411") private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  CDATASection section=(CDATASection)m_currentNode.getLastChild();  section.appendData(s);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.262 -0500",hash_original_method="D0C956420A79FC95538314A79FE6EF55",hash_generated_method="D0C956420A79FC95538314A79FE6EF55") void parseDocument(Reader in) throws IOException, SAXException {  startDocument();  parseFragment(in);  finish();  endDocument();}  }
class C{  public Vector2d mul(double x,double y){  this.x*=x;  this.y*=y;  return this;}  }
class C{  public final void writeChar(int v){  tempBuffer[0]=(byte)((v >>> 8) & 0xFF);  tempBuffer[1]=(byte)((v >>> 0) & 0xFF);  write(tempBuffer,0,2);}  }
class C{  public synchronized void log(LogRecord record){  if (!isLoggable(record.getLevel())) {    return;  }  if (DEBUG) {    System.out.println("Logging " + record);  }  Iterator iter=this.handlers.iterator();  while (iter.hasNext()) {    Handler handler=(Handler)iter.next();    handler.publish(record);    handler.flush();  }}  }
class C{  public void add(Vector4f vector){  this.points[0]+=vector.points[0];  this.points[1]+=vector.points[1];  this.points[2]+=vector.points[2];  this.points[3]+=vector.points[3];}  }
class C{  public static void close(OutputStream outputStream){  try {    if (outputStream != null) {      outputStream.close();    }  } catch (  IOException ex) {    LOGGER.warn(String.format(LOG_FORMAT,"output stream"));  }}  }
class C{  public int waitForCondition(Channel c,long timeout,int condition_mask){  long end_time=0;  boolean end_time_set=false;synchronized (c) {    while (true) {      int current_cond=0;      int stdoutAvail=c.stdoutWritepos - c.stdoutReadpos;      int stderrAvail=c.stderrWritepos - c.stderrReadpos;      if (stdoutAvail > 0)       current_cond=current_cond | ChannelCondition.STDOUT_DATA;      if (stderrAvail > 0)       current_cond=current_cond | ChannelCondition.STDERR_DATA;      if (c.EOF)       current_cond=current_cond | ChannelCondition.EOF;      if (c.getExitStatus() != null)       current_cond=current_cond | ChannelCondition.EXIT_STATUS;      if (c.getExitSignal() != null)       current_cond=current_cond | ChannelCondition.EXIT_SIGNAL;      if (c.state == Channel.STATE_CLOSED)       return current_cond | ChannelCondition.CLOSED | ChannelCondition.EOF;      if ((current_cond & condition_mask) != 0)       return current_cond;      if (timeout > 0) {        if (!end_time_set) {          end_time=System.currentTimeMillis() + timeout;          end_time_set=true;        } else {          timeout=end_time - System.currentTimeMillis();          if (timeout <= 0)           return current_cond | ChannelCondition.TIMEOUT;        }      }      try {        if (timeout > 0)         c.wait(timeout); else         c.wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  @SuppressWarnings({"rawtypes"}) public static void assertNotEmpty(final Collection objs) throws Exception {  if (objs == null) {    throw new AssertionFailedError("Collection is null");  }  if (objs.isEmpty()) {    throw new AssertionFailedError("Collection is empty");  }}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId) throws SyncException {  init(nodes,thisNodeId,AuthScheme.NO_AUTH,null,null);}  }
class C{  TreeSet(NavigableMap<E,Object> m){  this.m=m;}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x) throws SQLException {  updateBinaryStream(columnLabel,x,-1);}  }
class C{  public static JClass findFirstClassBySimpleName(JCodeModel codeModel,String simpleClassName){  return findFirstClassBySimpleName(codeModel == null ? new JCodeModel[]{new JCodeModel()} : new JCodeModel[]{codeModel},simpleClassName);}  }
class C{  public JSONStringer(){  this.sb=new StringBuffer();  this.stack=new char[maxdepth];  this.top=0;  this.mode='i';  this.comma=false;}  }
class C{  public BinaryTable(Object[][] data) throws FitsException {  this(convertToColumns(data));}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  alloperatorsDao.createTable(db,ifNotExists);  operatorsDao.createTable(db,ifNotExists);}  }
class C{  public static final int[][] threshold(double Rpred[][],double t[]){  int Ypred[][]=new int[Rpred.length][Rpred[0].length];  for (int i=0; i < Rpred.length; i++) {    for (int j=0; j < Rpred[i].length; j++) {      Ypred[i][j]=(Rpred[i][j] >= t[j]) ? 1 : 0;    }  }  return Ypred;}  }
class C{  private BillingResult initBillingResult(){  BillingResult br=new BillingResult();  br.setOrganizationTKey(1L);  br.setPeriodStartTime(0L);  br.setPeriodEndTime(0L);  return br;}  }
class C{  public static boolean isSuperDevModeCodeServer(ILaunchConfiguration config) throws CoreException {  String mainTypeName=LaunchConfigurationProcessorUtilities.getMainTypeName(config);  return SUPERDEVMODE_CODESERVER_MAIN_TYPE.equals(mainTypeName);}  }
class C{  public void testCancel(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  s1.awaitSubscribe();  p.submit(1);  s1.sn.cancel();  for (int i=2; i <= 20; ++i)   p.submit(i);  p.close();  s2.awaitComplete();  assertEquals(20,s2.nexts);  assertEquals(1,s2.completes);  assertTrue(s1.nexts < 20);  assertFalse(p.isSubscribed(s1));}  }
class C{  private void transferData(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  for (; ; ) {    int bytesRead=readFromResponse(state,innerState,data,entityStream);    if (bytesRead == -1) {      handleEndOfStream(state,innerState);      return;    }    state.mGotData=true;    writeDataToDestination(state,data,bytesRead);    innerState.mBytesSoFar+=bytesRead;    innerState.mBytesThisSession+=bytesRead;    reportProgress(state,innerState);    checkPausedOrCanceled(state);  }}  }
class C{  public boolean isExternalUser(){  return extern;}  }
class C{  @Override public void addComment(String comment){  current.appendChild(document.createComment(comment));}  }
class C{  public Object clone() throws CloneNotSupportedException {  MoneyFlowIndexSeries clone=(MoneyFlowIndexSeries)super.clone();  clone.yyValues=new LinkedList<Double>();  clone.volValues=new LinkedList<Long>();  return clone;}  }
class C{  protected SnmpCachedData updateCachedDatas(Object userData){  final String[] args=JvmRuntimeImpl.getInputArguments(userData);  final long time=System.currentTimeMillis();  SnmpOid indexes[]=new SnmpOid[args.length];  for (int i=0; i < args.length; i++) {    indexes[i]=new SnmpOid(i + 1);  }  return new SnmpCachedData(time,indexes,args);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.776 -0500",hash_original_method="7645C33AE0588436620AE83A499D7C08",hash_generated_method="9D697A0850F600422BCC7570C91E7256") private void updateSearchAutoComplete(){  mSearchAutoComplete.setDropDownDismissedOnCompletion(false);  mSearchAutoComplete.setForceIgnoreOutsideTouch(false);}  }
class C{  public static WebElement tapAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By by,int offsetX,int offsetY,int waitTimeInSeconds,int pressInMilliSeconds,int fingers){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(by);  WebElement element=augmentedFunctions.findElementPresentAfter(by,waitTimeInSeconds);  driver.tap(fingers,element.getLocation().getX() + offsetX,element.getLocation().getY() + offsetY,pressInMilliSeconds);  return element;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking() && !event.isCanceled()) {    onBackPressed();    return true;  }  return false;}  }
class C{  public static void main(String[] args){  SymbolicRegressionGUI.runDemo(new SymbolicRegression(new QuarticExample(),-1.0,1.0,100));}  }
class C{  public static List<VirtualNAS> checkVirtualNasNotVisible(List<VirtualNAS> discoveredVNasServers,DbClient dbClient,URI storageSystemId){  List<VirtualNAS> modifiedVNas=new ArrayList<VirtualNAS>();  URIQueryResultList vNasURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceVirtualNasConstraint(storageSystemId),vNasURIs);  Iterator<URI> vNasIter=vNasURIs.iterator();  List<URI> existingVNasURI=new ArrayList<URI>();  while (vNasIter.hasNext()) {    existingVNasURI.add(vNasIter.next());  }  List<URI> discoveredVNasURI=new ArrayList<URI>();  for (  VirtualNAS vNas : discoveredVNasServers) {    discoveredVNasURI.add(vNas.getId());  }  Set<URI> vNasDiff=Sets.difference(new HashSet<URI>(existingVNasURI),new HashSet<URI>(discoveredVNasURI));  if (!vNasDiff.isEmpty()) {    Iterator<VirtualNAS> vNasIt=dbClient.queryIterativeObjects(VirtualNAS.class,vNasDiff,true);    while (vNasIt.hasNext()) {      VirtualNAS vnas=vNasIt.next();      modifiedVNas.add(vnas);      _log.info("Setting discovery status of vnas {} as NOTVISIBLE",vnas.getNasName());      vnas.setDiscoveryStatus(DiscoveredDataObject.DiscoveryStatus.NOTVISIBLE.name());      vnas.setNasState(VirtualNAS.VirtualNasState.UNKNOWN.name());    }  }  if (!modifiedVNas.isEmpty()) {    dbClient.persistObject(modifiedVNas);  }  return modifiedVNas;}  }
class C{  public KeyPairCertificateChainDetailsAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("KeyPairCertificateChainDetailsAction.statusbar"));  putValue(NAME,res.getString("KeyPairCertificateChainDetailsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("KeyPairCertificateChainDetailsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("KeyPairCertificateChainDetailsAction.image")))));}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public ExecutionStageEvent(Experiment source,Stage stage){  super(source);  m_Stage=stage;}  }
class C{  @JsonIgnore public synchronized boolean isRunning(){  return this.begin != 0 && this.durationMicros == null;}  }
class C{  public String branch(){  return this.branch;}  }
class C{  private void fillPackages(ArrayList<Package> packages){  if (parentClassLoader != null) {    parentClassLoader.fillPackages(packages);  }synchronized (definedPackages) {    packages.addAll(definedPackages.values());  }}  }
class C{  public TableModelEvent(TableModel source,int firstRow,int lastRow,int column,int type){  super(source);  this.firstRow=firstRow;  this.lastRow=lastRow;  this.column=column;  this.type=type;}  }
class C{  void liftClassOrFunctionDefinition(Node n){  Node rhs=n.getFirstFirstChild();  Node oldName=rhs.getFirstChild();  Node newName=n.getFirstChild();  rhs.detachFromParent();  newName.detachFromParent();  nodeComments.replaceWithComment(oldName,newName);  nodeComments.replaceWithComment(n,rhs);}  }
class C{  public static void UF2(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 0) {      yj=x[j - 1] - 0.3 * x[0] * (x[0] * Math.cos(24.0 * PI * x[0] + 4.0 * j * PI / nx) + 2.0)* Math.sin(6.0 * PI * x[0] + j * PI / nx);      sum2+=yj * yj;      count2++;    } else {      yj=x[j - 1] - 0.3 * x[0] * (x[0] * Math.cos(24.0 * PI * x[0] + 4.0 * j * PI / nx) + 2.0)* Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=yj * yj;      count1++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2;}  }
class C{  public static CertPath buildPath(String relPath,String[] fileNames) throws Exception {  List<X509Certificate> list=new ArrayList<X509Certificate>();  for (int i=0; i < fileNames.length; i++) {    list.add(0,getCertFromFile(relPath + fileNames[i]));  }  CertificateFactory cf=CertificateFactory.getInstance("X509");  return (cf.generateCertPath(list));}  }
class C{  @Override public float[] computeStitch(final float[] values){  final float x=min(max(values[0],domain[0 * 2]),domain[0 * 2 + 1]);  int subi=bounds.length - 1;  for (; subi >= 0; subi--) {    if (x >= bounds[subi]) {      break;    }  }  subi++;  final float[] subinput=new float[1];  float xmin=domain[0], xmax=domain[1];  if (subi > 0) {    xmin=(bounds[subi - 1]);  }  if (subi < bounds.length) {    xmax=(bounds[subi]);  }  final float ymin=encode[subi * 2];  final float ymax=encode[subi * 2 + 1];  subinput[0]=interpolate(x,xmin,xmax,ymin,ymax);  final float[] output=functions[subi].compute(subinput);  final float[] result=new float[output.length];  for (int i=0; i != range.length / 2; i++) {    if (range != null) {      result[i]=min(max(output[i],range[0 * 2]),range[0 * 2 + 1]);    } else {      result[i]=output[i];    }  }  return result;}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  protected KMLAbstractTimePrimitive(String namespaceURI){  super(namespaceURI);}  }
class C{  public static Text createSingleText(Composite parent,int hspan){  Text t=new Text(parent,SWT.SINGLE | SWT.BORDER);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  private void insertHeapVariables(IR ir,boolean backwards){  registerHeapVariables(ir);  registerCalls(ir);  if (backwards) {    registerExits(ir);  }  insertHeapPhiFunctions(ir);}  }
class C{  public void share(String toShare){  share(toShare,null,null);}  }
class C{  public static void runTestWithoutOutputAndAllowWarnings(String testCaseFile) throws Exception {  runTestWithoutOutput(testCaseFile,true);}  }
class C{  public void create(String name,boolean expectedToPass,Object... args){  list.add(new Parameterization(name,expectedToPass,args));}  }
class C{  static void shiftLeftOneBit(int result[],int source[],int srcLen){  int carry=0;  for (int i=0; i < srcLen; i++) {    int val=source[i];    result[i]=(val << 1) | carry;    carry=val >>> 31;  }  if (carry != 0) {    result[srcLen]=carry;  }}  }
class C{  public void testGetSpeed_zero(){  testSpeed(0,0);}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public static int arraySize(final int expected,final float f){  final long s=Math.max(2,HashCommon.nextPowerOfTwo((long)Math.ceil(expected / f)));  if (s > (1 << 30))   throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor "+ f+ ")");  return (int)s;}  }
class C{  public static byte[] toByteArray(Float[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public void populateDAO(Object value,int row,int column){  Date openDate=(Date)super.getValueAt(row,0);  Date closeDate=(Date)super.getValueAt(row,1);  Tradingday element=getData().getTradingday(openDate.getZonedDateTime(),closeDate.getZonedDateTime());switch (column) {case 0:{      element.setOpen(((Date)value).getZonedDateTime());      break;    }case 1:{    element.setClose(((Date)value).getZonedDateTime());    break;  }case 2:{  element.setMarketGap(((MarketBar)value).getCode());  break;}case 3:{element.setMarketBias(((MarketBar)value).getCode());break;}case 4:{element.setMarketBar(((MarketBar)value).getCode());break;}default :{}}element.setDirty(true);}  }
class C{  public void parseConstantPool() throws IOException {  int count=readShort();  for (int i=1; i < count; i++) {    ConstantPoolEntry entry=parseConstantPoolEntry(i);    _cp.addConstant(entry);    if (entry instanceof DoubleConstant || entry instanceof LongConstant) {      i++;      _cp.addConstant(null);    }  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  @NotNull @ObjectiveCName("loadBlockedUsers") public Promise<List<User>> loadBlockedUsers(){  return modules.getUsersModule().loadBlockedUsers();}  }
class C{  private static void notifyClearComplete(){  clearLatch.countDown();}  }
class C{  static <T>T unmaskNull(T key){  return (key == NULL_KEY ? null : key);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public RVMField findDeclaredField(Atom fieldName,Atom fieldDescriptor){  for (  RVMField field : declaredFields) {    if (field.getName() == fieldName && field.getDescriptor() == fieldDescriptor) {      return field;    }  }  return null;}  }
class C{  public PageAdapter(final FragmentManager fm,final ArrayList<Fragment> pages){  super(fm);  if (pages == null) {    this.pages=new ArrayList<>();  } else {    this.pages=pages;  }}  }
class C{  public ExtrudedPolygon(Iterable<? extends Position> corners,Iterable<?> imageSources){  this(corners);  if (imageSources != null) {    this.sideTextures=new ArrayList<List<WWTexture>>();    this.sideTextures.add(this.fillImageList(imageSources));  }}  }
class C{  public ConstantMigrationModel(int demeCount,Parameter migrationParameter){  this(CONSTANT_MIGRATION_MODEL,demeCount,migrationParameter);}  }
class C{  private PageParamInfo parseDocument(Element root,String originalUrl){  double startTime=DomUtil.getTime();  mDocUrl=sHrefCleaner.replace(originalUrl,"");  mParsedUrl=ParsedUrl.create(mDocUrl);  if (mParsedUrl == null)   return new PageParamInfo();  AnchorElement baseAnchor=PagingLinksFinder.createAnchorWithBase(PagingLinksFinder.getBaseUrlForRelative(root,originalUrl));  NodeList<Element> allLinks=root.getElementsByTagName("A");  int idx=0;  while (idx < allLinks.getLength()) {    final AnchorElement link=AnchorElement.as(allLinks.getItem(idx));    PageInfoAndText pageInfoAndText=getPageInfoAndText(link,baseAnchor);    if (pageInfoAndText == null) {      idx++;      continue;    }    mAdjacentNumbersGroups.addGroup();    findAndAddClosestValidLeafNodes(link,false,true,null);    mAdjacentNumbersGroups.addPageInfo(pageInfoAndText.mPageInfo);    mNumForwardLinksProcessed=0;    findAndAddClosestValidLeafNodes(link,false,false,baseAnchor);    idx+=1 + mNumForwardLinksProcessed;  }  mAdjacentNumbersGroups.cleanup();  LogUtil.addTimingInfo(startTime,mTimingInfo,"PageParameterParser");  startTime=DomUtil.getTime();  PageParamInfo info=PageParameterDetector.detect(mAdjacentNumbersGroups,mDocUrl);  LogUtil.addTimingInfo(startTime,mTimingInfo,"PageParameterDetector");  return info;}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();  for (int i=0; i < timeEvents.length; i++) {    timeEvents[i]=false;  }}  }
class C{  public boolean adjacent(int direction){  return (direction == QuadTreeNode.SOUTH || direction == QuadTreeNode.WEST);}  }
class C{  public StrTokenizer(String input,String delim){  this(input);  setDelimiterString(delim);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  HttpRequestWrapper3(HttpServletRequest request,HttpServletResponse response){  super(request);  this.response=response;}  }
class C{  @Override public void onActivityCreated(Bundle savedInstanceState){  super.onActivityCreated(savedInstanceState);  mProgressBar=(ProgressBar)getTargetFragment().getView().findViewById(R.id.progress_horizontal);synchronized (mThread) {    mReady=true;    mThread.notify();  }}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.goc_layout) {    showChooseGocDialog();  } else   if (v.getId() == R.id.category_frame_layout) {    if (mGroupIdSelected == null)     Toast.makeText(getActivity(),getResources().getString(R.string.select_category_first),Toast.LENGTH_SHORT).show(); else     showChooseCategoryDialog();  } else   if ((v.getId() == R.id.text_location) || (v.getId() == R.id.text_edit)) {    final Intent selectLocationActivity=new Intent(getActivity(),SearchLocationActivity.class);    selectLocationActivity.putExtra(AppConstants.Keys.FROM_WALL,true);    startActivityForResult(selectLocationActivity,AppConstants.RequestCodes.GET_PLACE);  } else   if (v.getId() == R.id.attach_image) {    showChoosePictureSourceDialog();  } else   if (v.getId() == R.id.fabbutton) {    if (TextUtils.isEmpty(mMessageEdit.getText().toString().trim())) {      Toast.makeText(getActivity(),getResources().getString(R.string.please_write_your_query),Toast.LENGTH_SHORT).show();    } else {      if (mGroupIdSelected != null) {        if (mTagIdSelected != null) {          if (!TextUtils.isEmpty(mAddressName)) {            if (mWasWallImageUploaded) {              TypedFile typedFile;              File photo;              photo=new File(mWallImageFile.getAbsolutePath());              typedFile=new TypedFile("application/octet-stream",photo);              postToWallWithImage(mGroupIdSelected,mTagNameSelected,mTagIdSelected,mLatitude,mLongitude,mMessageEdit.getText().toString(),mWallImageFile.getAbsolutePath(),null);            } else {              postToWall(mTagNameSelected,mTagIdSelected,mLatitude,mLongitude,mMessageEdit.getText().toString(),mGroupIdSelected,null);            }          } else {            Toast.makeText(getActivity(),getResources().getString(R.string.please_select_location),Toast.LENGTH_SHORT).show();          }        } else {          Toast.makeText(getActivity(),getResources().getString(R.string.please_select_subcategory_message),Toast.LENGTH_SHORT).show();        }      } else {        Toast.makeText(getActivity(),getResources().getString(R.string.please_select_tags_message),Toast.LENGTH_SHORT).show();      }    }  }}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_filterThread.isAlive() && m_state != IDLE) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  public DestinationWrapper<Topic> lookupTopic(String uri,Session session) throws JMSException, NamingException {  if (usingJNDI) {    return lookupTopicFromJNDI(uri);  } else {    return new DestinationWrapper<Topic>(uri,session.createTopic(uri));  }}  }
class C{  private void swap(int a,int b){  Object aObject=currentActionListModel.getElementAt(a);  Object bObject=currentActionListModel.getElementAt(b);  currentActionListModel.set(a,bObject);  currentActionListModel.set(b,aObject);  workspace.getUpdater().getUpdateManager().swapElements(a,b);}  }
class C{  public CsvWriter put(int index,String value) throws CsvException {  if (disposition == null) {    disposition=new HashMap<Character,Disposition>(256);    for (    char c : escapedChars.toCharArray()) {      disposition.put(c,Disposition.escape);    }    for (    char c : suppressedChars.toCharArray()) {      disposition.put(c,Disposition.suppress);    }  }  if (row == null) {    int size=getWidth();    row=new ArrayList<String>(size);    for (int i=0; i < size; i++)     row.add(null);    colCount=0;  }  if (index < 1 || index > row.size()) {    throw new CsvException("Attempt to write to invalid column index: index=" + index + " value="+ value+ " row size="+ row.size());  }  int arrayIndex=index - 1;  if (row.get(arrayIndex) != null) {    throw new CsvException("Attempt to write value twice to same row: index=" + index + " old value="+ row.get(arrayIndex)+ " new value="+ value+ " (does table have a PK and is it single-column?)");  }  if (value == null) {    if (this.nullPolicy == NullPolicy.emptyString)     value=processString(""); else     if (nullPolicy == NullPolicy.skip)     value=null; else     value=nullValue;  } else {    value=processString(value);  }  row.set(arrayIndex,value);  colCount++;  return this;}  }
class C{  protected static AVList wmsGetParamsFromDocument(Element domElement,AVList params){  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null)   params=new AVListImpl();  DataConfigurationUtils.getWMSLayerConfigParams(domElement,params);  BasicTiledImageLayer.getParamsFromDocument(domElement,params);  params.setValue(AVKey.TILE_URL_BUILDER,new URLBuilder(params));  return params;}  }
class C{  @SuppressWarnings("rawtypes") static public void clearTermCacheFactory(final String namespace){  final Iterator it=termCacheFactory.entryIterator();  while (it.hasNext()) {    final NT nt=(NT)((Entry)it.next()).getKey();    if (nt.getName().equals(namespace)) {      it.remove();    }  }}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public void detachBone(){  parentNode.childNodes.remove(this);  parentNode=null;}  }
class C{  private boolean staticFinalCorrectFormat(String name){  return name.equals(name.toUpperCase());}  }
class C{  private Set<Clause> infer(Clause clause,Set<Clause> usable){  Set<Clause> resultingClauses=new LinkedHashSet<Clause>();  for (  Clause c : usable) {    Set<Clause> resolvents=clause.binaryResolvents(c);    for (    Clause rc : resolvents) {      resultingClauses.add(rc);    }    if (isUseParamodulation()) {      Set<Clause> paras=paramodulation.apply(clause,c,true);      for (      Clause p : paras) {        resultingClauses.add(p);      }    }  }  return getClauseFilter().filter(resultingClauses);}  }
class C{  @SuppressWarnings("unchecked") private void handleResponseOk(long requestId,Object response){  ContextualFuture future=futures.remove(requestId);  if (future != null) {    future.context.executor().execute(null);  }}  }
class C{  public OutputStream createInOutputStream(OutputStream os){  return new InstrumentedOutputStream(collector(),Direction.In,os,null);}  }
class C{  public void focusLost(FocusEvent e){  uninstall();}  }
class C{  public static int XDoubleToFixed(double dbl){  return (int)(dbl * 65536);}  }
class C{  public static Calendar previous(Calendar self){  Calendar result=(Calendar)self.clone();  result.add(Calendar.DAY_OF_YEAR,-1);  return result;}  }
class C{  public static int indexOf(boolean[] array,boolean[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  public final void updateClip(final Area current_area){  if (current_clipping_shape == null || current_area == null) {    current_clipping_shape=current_area;    hasClipChanged=true;  } else {    current_clipping_shape.intersect(current_area);    hasClipChanged=true;  }  if (debugClip) {    System.out.println("[updateClip]");    if (current_clipping_shape == null) {      System.out.println("Null shape");    } else {      System.out.println("Shape bounds= " + current_clipping_shape.getBounds());    }  }}  }
class C{  public Builder(Map<String,T> options){  this.options=new LinkedHashMap<>(options);}  }
class C{  public static Document loadXML(Reader is){  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder db=null;  try {    db=dbf.newDocumentBuilder();  } catch (  Exception se) {    throw new RuntimeException("Parser configuration error",se);  }  org.w3c.dom.Document doc=null;  try {    doc=db.parse(new InputSource(is));  } catch (  Exception se) {    throw new RuntimeException("Error parsing file:" + se,se);  }  return doc;}  }
class C{  private static void writeLogReport(long tDuration,ArrayList<Double> incumbent,double incumbentObjective){  log.info("Took " + tDuration + "ms for "+ numberOfIterations+ " iterations.");  log.info("=============================================================================");  log.info("Algorithm parameters:");  log.info("");  log.info("     Initial temperature: " + initialTemperature);  log.info("     Temperature reduction frequency: " + temperatureReductionFrequency);  log.info("     Temperature reduction factor: " + temperatureReductionFactor);  log.info("     Number of iterations: " + numberOfIterations);  log.info("=============================================================================");  log.info("Solution parameters:");  log.info("");  log.info("     Beta1: " + incumbent.get(0));  log.info("     Beta2: " + incumbent.get(1));  log.info("     Square error: " + incumbentObjective);  log.info("=============================================================================");  log.info("Done.");}  }
class C{  protected void rewriteDataColocation(OptNode n,LocalVariableMap vars) throws DMLRuntimeException {  boolean apply=false;  String varname=null;  String partitioner=n.getParam(ParamType.DATA_PARTITIONER);  ParForProgramBlock pfpb=(ParForProgramBlock)OptTreeConverter.getAbstractPlanMapping().getMappedProg(n.getID())[1];  if (partitioner != null && partitioner.equals(PDataPartitioner.REMOTE_MR.toString()) && n.getExecType() == ExecType.MR) {    HashSet<String> cand=new HashSet<String>();    rFindDataColocationCandidates(n,cand,pfpb.getIterablePredicateVars()[0]);    long nnzMax=Long.MIN_VALUE;    for (    String c : cand) {      MatrixObject tmp=(MatrixObject)vars.get(c);      if (tmp != null) {        long nnzTmp=tmp.getNnz();        if (nnzTmp > nnzMax) {          nnzMax=nnzTmp;          varname=c;          apply=true;        }      }    }  }  if (apply)   pfpb.enableColocatedPartitionedMatrix(varname);  _numEvaluatedPlans++;  LOG.debug(getOptMode() + " OPT: rewrite 'enable data colocation' - result=" + apply+ ((apply) ? " (" + varname + ")" : ""));}  }
class C{  protected void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=CacheFactory.getAnyInstance();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public final void invert(GMatrix m1){  invertGeneral(m1);}  }
class C{  private void processListItem(boolean opening,Editable output){  if (opening) {    if (output.length() > 0 && output.charAt(output.length() - 1) != '\n') {      output.append("\n");    }    String parentList=lists.peek();    if (parentList.equalsIgnoreCase("ol")) {      start(output,new Ol());      output.append(olNextIndex.peek().toString()).append(". ");      olNextIndex.push(olNextIndex.pop() + 1);    } else     if (parentList.equalsIgnoreCase("ul")) {      start(output,new Ul());    }  } else {    if (lists.peek().equalsIgnoreCase("ul")) {      if (output.length() > 0 && output.charAt(output.length() - 1) != '\n') {        output.append("\n");      }      int bulletMargin=indent;      if (lists.size() > 1) {        bulletMargin=indent - bullet.getLeadingMargin(true);        if (lists.size() > 2) {          bulletMargin-=(lists.size() - 2) * listItemIndent;        }      }      BulletSpan newBullet=new BulletSpan(bulletMargin);      end(output,Ul.class,new LeadingMarginSpan.Standard(listItemIndent * (lists.size() - 1)),newBullet);    } else     if (lists.peek().equalsIgnoreCase("ol")) {      if (output.length() > 0 && output.charAt(output.length() - 1) != '\n') {        output.append("\n");      }      int numberMargin=listItemIndent * (lists.size() - 1);      if (lists.size() > 2) {        numberMargin-=(lists.size() - 2) * listItemIndent;      }      end(output,Ol.class,new LeadingMarginSpan.Standard(numberMargin));    }  }}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  public boolean visit(MethodInvocation node){  return true;}  }
class C{  public final boolean peek(){  return m_values[m_index];}  }
class C{  public GenericObject next(){  return (SIPObject)super.next();}  }
class C{  public boolean isDeclaredInherit(){  return false;}  }
class C{  public static void main(String[] args){  SpringApplication.run(DriverStarter.class,args);}  }
class C{  public static NativeDistinctFilter newInstance(final SPOKeyOrder indexKeyOrder){  return new NativeDistinctFilter(BOp.NOARGS,Collections.singletonMap(Annotations.KEY_ORDER,(Object)indexKeyOrder));}  }
class C{  public IcyInputStream(InputStream in,int period,PlayerCallback playerCallback,String characterEncoding){  super(in);  this.period=period;  this.playerCallback=playerCallback;  this.characterEncoding=characterEncoding != null ? characterEncoding : "UTF-8";  remaining=period;  mbuffer=new byte[128];}  }
class C{  void calPairs4Sec() throws FileNotFoundException {  MaximumDistance=0;  MinX=Double.POSITIVE_INFINITY;  MinY=Double.POSITIVE_INFINITY;  MaxX=Double.NEGATIVE_INFINITY;  MaxY=Double.NEGATIVE_INFINITY;  pointsTree=new KdTree.SqrEuclid<>(2,new Integer(this.points.size()));  PairsTree=new KdTree.SqrEuclid<>(2,new Integer(this.points.size() * (this.points.size())));  double[] entry;  double[] pairentry;  double dx=0;  double dy=0;  for (int i=0; i < this.points.size(); i++) {    if (this.points.get(i).x < MinX) {      MinX=this.points.get(i).x;    }    if (this.points.get(i).y < MinY) {      MinY=this.points.get(i).y;    }    if (this.points.get(i).x > MaxX) {      MaxX=this.points.get(i).x;    }    if (this.points.get(i).y > MaxY) {      MaxY=this.points.get(i).y;    }    entry=new double[]{this.points.get(i).y,this.points.get(i).x};    pointsTree.addPoint(entry,(double)i);    for (int j=0; j < this.points.size(); j++) {      pair pr=new pair();      if (i != j) {        pr.FirstP=i;        pr.SecondP=j;        pr.Distance=Math.sqrt(Math.pow((points.get(i).x - points.get(j).x),2) + Math.pow((points.get(i).y - points.get(j).y),2));        pr.HorDistance=(points.get(j).x - points.get(i).x);        pr.VerDistance=(points.get(j).y - points.get(i).y);        if (MaximumDistance < pr.Distance) {          MaximumDistance=pr.Distance;        }        dx=points.get(j).x - points.get(i).x;        dy=points.get(j).y - points.get(i).y;        if (dx != 0) {          if ((dx > 0 && dy >= 0)) {            pr.Direction=Math.atan(dy / dx);          }          if (dx < 0 && dy >= 0) {            pr.Direction=Math.atan(dy / dx) + Math.PI;          }          if (dx > 0 && dy < 0) {            pr.Direction=Math.atan(dy / dx) + 2 * Math.PI;          }          if (dx < 0 && dy < 0) {            pr.Direction=Math.atan(dy / dx) + Math.PI;            ;          }        } else {          if (dy >= 0) {            pr.Direction=Math.PI / 2;          } else {            pr.Direction=3 * Math.PI / 2;          }        }        pr.MomentI=Math.pow((points.get(i).z - points.get(j).z),2) / 2;        Pairs.add(pr);        pairentry=new double[]{pr.VerDistance,pr.HorDistance};        PairsTree.addPoint(pairentry,(double)Pairs.size() - 1.0);      }    }  }  bMaxX=MaxX;  bMaxY=MaxY;  bMinX=MinX;  bMinY=MinY;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.542 -0400",hash_original_method="D4A1A32C2474C5102E834E4F9C261B55",hash_generated_method="CEE0CBA00AE2848CA8B8D03623973A61") public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null) {    return filename1 == null && filename2 == null;  }  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  private void savePreferences(){  try (FileOutputStream out=new FileOutputStream(prefsFile)){    prefs.store(out,"Apache Ignite Schema Import Utility");  } catch (  IOException e) {    MessageBox.errorDialog(owner,"Failed to save preferences!",e);  }}  }
class C{  public boolean isSubTask(){  return subTask;}  }
class C{  public ConfigurationDBAdapter configureFromString(String xml) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from string");  }  try {    InputSource source=new InputSource(new StringReader(xml));    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();    builderFactory.setNamespaceAware(true);    Document doc=builderFactory.newDocumentBuilder().parse(source);    ConfigurationDBAdapterParser.doConfigure(this,doc);    return this;  } catch (  IOException ioe) {    throw new RuntimeException("could not configure from String: " + ioe.getMessage(),ioe);  }catch (  SAXException e) {    throw new RuntimeException("could not configure from String: " + e.getMessage(),e);  }catch (  ParserConfigurationException e) {    throw new RuntimeException("could not configure from String: " + e.getMessage(),e);  }}  }
class C{  public void flip(int bitIndex){  if (bitIndex < 0)   throw new IndexOutOfBoundsException("bitIndex < 0: " + bitIndex);  int wordIndex=wordIndex(bitIndex);  expandTo(wordIndex);  words[wordIndex]^=(1L << bitIndex);  recalculateWordsInUse();  checkInvariants();}  }
class C{  public RoundedBitmapBuilder cornerRadius(int corner,float radius){  mCornerRadii[corner]=radius;  return this;}  }
class C{  private InputStream openResponseEntity(State state,HttpResponse response) throws StopRequest {  try {    return response.getEntity().getContent();  } catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while getting entity: " + ex.toString(),ex);  }}  }
class C{  public UserSession createSession(User user,Locale locale,boolean system){  return createSession(uuidSource.createUuid(),user,locale,system);}  }
class C{  public void removeChildAt(int index) throws IndexOutOfBoundsException {  children.remove(index);}  }
class C{  public void rebind(){  texture1=buffer1.getColorBufferTexture();  texture2=buffer2.getColorBufferTexture();}  }
class C{  public synchronized void removeConsumer(ImageConsumer ic){  if (proxies != null) {    ImageFilter imgf=(ImageFilter)proxies.get(ic);    if (imgf != null) {      src.removeConsumer(imgf);      proxies.remove(ic);      if (proxies.isEmpty()) {        proxies=null;      }    }  }}  }
class C{  public String handleException(String msg,Throwable t){  String result;  result=ExceptionUtils.handleException(this,msg,t,false);  log(result);  return result;}  }
class C{  public static CptInvariantUpdater serializableInstance(){  return new CptInvariantUpdater(MlBayesIm.serializableInstance());}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public void fireControlerStartupEvent(){  StartupEvent event=new StartupEvent(this.controler);  StartupListener[] listener=this.coreListenerList.getListeners(StartupListener.class);  for (  StartupListener aListener : listener) {    log.info("calling notifyStartup on " + aListener.getClass().getCanonicalName());    aListener.notifyStartup(event);  }  listener=this.listenerList.getListeners(StartupListener.class);  for (  StartupListener aListener : listener) {    log.info("calling notifyStartup on " + aListener.getClass().getCanonicalName());    aListener.notifyStartup(event);  }  log.info("all ControlerStartupListeners called.");}  }
class C{  public static void logSearchTermResolvedWords(boolean isSingleWord){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchResolvedTermWords",isSingleWord ? RESOLVED_SINGLE_WORD : RESOLVED_MULTI_WORD,RESOLVED_BOUNDARY);}  }
class C{  public static Builder createBuilder(Header header,ReadableFontData data){  return new Builder(header,data);}  }
class C{  public String bucketName(){  return bucketName;}  }
class C{  private void evalAllModels(Map<String,ClassificationResult> nrcResult,Map<String,ClassificationResult> gumltltResult,Map<String,ClassificationResult> klueResult) throws Exception {  System.out.println("Starting print Pred");  double[][] matrix=new double[3][3];  Map<String,Integer> classValue=new HashMap<String,Integer>();  classValue.put("positive",0);  classValue.put("neutral",1);  classValue.put("negative",2);  Map<String,Integer> resultMapToPrint=new HashMap<String,Integer>();  if ((nrcResult != null && gumltltResult != null && klueResult != null) && (nrcResult.size() == gumltltResult.size()) && (nrcResult.size() == klueResult.size())) {    for (    Map.Entry<String,ClassificationResult> tweet : nrcResult.entrySet()) {      String tweetID=tweet.getKey();      ClassificationResult nRCSenti=tweet.getValue();      ClassificationResult gUMLTLTSenti=gumltltResult.get(tweet.getKey());      ClassificationResult kLUESenti=klueResult.get(tweet.getKey());      if (gUMLTLTSenti != null && kLUESenti != null) {        double[] useSentiArray={0,0,0};        for (int i=0; i < 3; i++) {          useSentiArray[i]=(nRCSenti.getResultDistribution()[i] + gUMLTLTSenti.getResultDistribution()[i] + kLUESenti.getResultDistribution()[i]) / 3;        }        int useSenti=1;        if (useSentiArray[0] > useSentiArray[1] && useSentiArray[0] > useSentiArray[2]) {          useSenti=0;        }        if (useSentiArray[2] > useSentiArray[0] && useSentiArray[2] > useSentiArray[1]) {          useSenti=2;        }        resultMapToPrint.put(tweetID,useSenti);        if (!tweet.getValue().getTweet().getSentiment().equals("unknwn")) {          Integer actualSenti=classValue.get(tweet.getValue().getTweet().getSentiment());          matrix[actualSenti][useSenti]++;        }      } else {        System.out.println(tweet.getValue().getTweet().getTweetString());      }    }  } else {    System.out.println("resultMaps null or diffrent size");  }  if (matrix.length != 0) {    System.out.println(matrix[0][0] + " | " + matrix[0][1]+ " | "+ matrix[0][2]);    System.out.println(matrix[1][0] + " | " + matrix[1][1]+ " | "+ matrix[1][2]);    System.out.println(matrix[2][0] + " | " + matrix[2][1]+ " | "+ matrix[2][2]);    score(matrix);  }  printResultToFile(resultMapToPrint);}  }
class C{  public JobManager() throws SchedulerException {  jobScheduler=new StdSchedulerFactory().getScheduler();}  }
class C{  public List<T> selection(){  Scanner console=new Scanner(in,StandardCharsets.UTF_8.name());  while (true) {    out.print(prompt);    String line=console.nextLine();    if (line == null || line.toLowerCase(Locale.getDefault()).equals(quit)) {      return onQuit.get();    }    if (line.isEmpty()) {      return onLineIsEmpty.get();    }    Set<Integer> numbers=parseLineToNumbers(line);    if (numbers != null && validate(numbers,options)) {      return numbers.stream().map(null).map(null).collect(Collectors.toList());    }  }}  }
class C{  public static String unexpandLine(CharSequence self,int tabStop){  StringBuilder builder=new StringBuilder(self.toString());  int index=0;  while (index + tabStop < builder.length()) {    String piece=builder.substring(index,index + tabStop);    int count=0;    while ((count < tabStop) && (Character.isWhitespace(piece.charAt(tabStop - (count + 1)))))     count++;    if (count > 0) {      piece=piece.substring(0,tabStop - count) + '\t';      builder.replace(index,index + tabStop,piece);      index=index + tabStop - (count - 1);    } else     index=index + tabStop;  }  return builder.toString();}  }
class C{  public static double trunc(Double number){  if (number < 0d) {    return Math.ceil(number);  }  return Math.floor(number);}  }
class C{  private void manipulateConfigurationResponse(Map<String,String> result){  boolean proceedNext=true;  String responseStatus;  CommonDialogUtils.stopProgressDialog(progressDialog);  if (result != null) {    responseStatus=result.get(Constants.STATUS);    if (Constants.Status.SUCCESSFUL.equals(responseStatus)) {      String configurationResponse=result.get(Constants.RESPONSE);      if (configurationResponse != null) {        try {          JSONObject config=new JSONObject(configurationResponse);          if (!config.isNull(context.getString(R.string.shared_pref_configuration))) {            JSONArray configList=new JSONArray(config.getString(context.getString(R.string.shared_pref_configuration)));            for (int i=0; i < configList.length(); i++) {              JSONObject param=new JSONObject(configList.get(i).toString());              if (param.getString(context.getString(R.string.shared_pref_config_key)).trim().equals(Constants.PreferenceFlag.NOTIFIER_TYPE)) {                String type=param.getString(context.getString(R.string.shared_pref_config_value)).trim();                if (type.equals(String.valueOf(Constants.NOTIFIER_CHECK))) {                  Preference.putString(context,Constants.PreferenceFlag.NOTIFIER_TYPE,Constants.NOTIFIER_GCM);                } else {                  Preference.putString(context,Constants.PreferenceFlag.NOTIFIER_TYPE,Constants.NOTIFIER_LOCAL);                }              } else               if (param.getString(context.getString(R.string.shared_pref_config_key)).trim().equals(context.getString(R.string.shared_pref_frequency)) && !param.getString(context.getString(R.string.shared_pref_config_value)).trim().isEmpty()) {                Preference.putInt(context,getResources().getString(R.string.shared_pref_frequency),Integer.valueOf(param.getString(context.getString(R.string.shared_pref_config_value)).trim()));              } else               if (param.getString(context.getString(R.string.shared_pref_config_key)).trim().equals(context.getString(R.string.shared_pref_gcm))) {                Preference.putString(context,getResources().getString(R.string.shared_pref_sender_id),param.getString(context.getString(R.string.shared_pref_config_value)).trim());              }            }            String notifierType=Preference.getString(context,Constants.PreferenceFlag.NOTIFIER_TYPE);            if (notifierType == null || notifierType.isEmpty()) {              setDefaultNotifier();            }          }        } catch (        JSONException e) {          Log.e(TAG,"Error parsing configuration response JSON",e);          setDefaultNotifier();        }      } else {        Log.e(TAG,"Empty configuration response");        setDefaultNotifier();      }    } else     if (Constants.Status.UNAUTHORIZED.equals(responseStatus)) {      String response=result.get(Constants.RESPONSE);      Log.e(TAG,"Unauthorized :" + response);      showEnrollementFailedErrorMessage();      proceedNext=false;    } else     if (Constants.Status.INTERNAL_SERVER_ERROR.equals(responseStatus)) {      Log.e(TAG,"Empty configuration response.");      setDefaultNotifier();    } else {      Log.e(TAG,"Empty configuration response.");      setDefaultNotifier();    }  } else {    Log.e(TAG,"Empty configuration response.");    setDefaultNotifier();  }  if (proceedNext) {    loadNextActivity();  }}  }
class C{  public static void sortDesc(long[] keys,int[] values){  hybridsortDesc(keys,values,null,null,0,keys.length - 1);}  }
class C{  public boolean isValueSet(){  String value=dataContainer.getValue();  return (value != null && value.trim().length() > 0);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"ANSWER\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"TEXT\" TEXT NOT NULL ,"+ "\"ANSWER_CORRECT\" INTEGER,"+ "\"CHALLENGE_ID\" INTEGER NOT NULL );");}  }
class C{  public static JimpleRelationships v(){  if (v == null) {    v=new JimpleRelationships();  }  return v;}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public CorrelationAnalysisSolution(LinearEquationSystem solution,Relation<V> db,double[][] strongEigenvectors,double[][] weakEigenvectors,double[][] similarityMatrix,double[] centroid,NumberFormat nf){  this.linearEquationSystem=solution;  this.correlationDimensionality=strongEigenvectors[0].length;  this.strongEigenvectors=strongEigenvectors;  this.weakEigenvectors=weakEigenvectors;  this.similarityMatrix=similarityMatrix;  this.centroid=centroid;  this.nf=nf;  double variance=0;  DBIDs ids=db.getDBIDs();  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double distance=distance(db.get(iter).toArray());    variance+=distance * distance;  }  standardDeviation=Math.sqrt(variance / ids.size());}  }
class C{  protected ListSelectionListener createListSelectionListener(){  return new ListSelectionHandler();}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{snapshot_id}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response updateSnapshot(@PathParam("tenant_id") String openstack_tenant_id,@PathParam("snapshot_id") String snapshot_id,SnapshotUpdateRequestGen param,@HeaderParam("X-Cinder-V1-Call") String isV1Call,@Context HttpHeaders header){  BlockSnapshot snap=findSnapshot(snapshot_id,openstack_tenant_id);  if (snap == null) {    throw APIException.badRequests.parameterIsNotValid(snapshot_id);  }  _log.debug("Update snapshot {}: ",snap.getLabel());  String label=null;  String description=null;  if (isV1Call != null) {    label=param.snapshot.display_name;    description=param.snapshot.display_description;  } else {    label=param.snapshot.name;    description=param.snapshot.description;  }  _log.debug("new name = {}, description = {}",label,description);  if (label != null && (label.length() > 2)) {    URI volumeUri=snap.getParent().getURI();    String snapshotType=TechnologyType.NATIVE.toString();    Volume volume=queryVolumeResource(URI.create(getCinderHelper().trimId(volumeUri.toString())),openstack_tenant_id);    URIQueryResultList uris=new URIQueryResultList();    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(volume.getId()),uris);    for (    URI snuri : uris) {      BlockSnapshot snapIter=_dbClient.queryObject(BlockSnapshot.class,snuri);      if (snapIter != null && !snapIter.getInactive() && snapIter.getLabel().equals(label)) {        _log.info("Update snapshot: duplicate name");        throw APIException.badRequests.duplicateLabel(label);      }    }    VirtualPool pool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    if (pool == null) {      _log.info("Virtual Pool corresponding to the volume does not exist.");      throw APIException.badRequests.parameterIsNotValid(volume.getVirtualPool().toString());    }    BlockServiceApi api=getBlockServiceImpl(pool,_dbClient);    List<Volume> volumesToSnap=new ArrayList<Volume>();    volumesToSnap.addAll(api.getVolumesToSnap(volume,snapshotType));    BlockFullCopyManager fcManager=new BlockFullCopyManager(_dbClient,_permissionsHelper,_auditMgr,_coordinator,_placementManager,sc,uriInfo,_request,_tenantsService);    api.validateCreateSnapshot(volume,volumesToSnap,snapshotType,label,fcManager);    _log.debug("Update snapshot: not a duplicate name");    snap.setLabel(label);  }  if (description != null && (description.length() > 2)) {    StringMap extensions=snap.getExtensions();    if (extensions == null)     extensions=new StringMap();    extensions.put("display_description",description);    _log.debug("Update volume : stored description");    snap.setExtensions(extensions);  }  _dbClient.updateObject(snap);  return CinderApiUtils.getCinderResponse(getSnapshotDetail(snap,isV1Call,openstack_tenant_id),header,true,CinderConstants.STATUS_OK);}  }
class C{  public VOParameterDefinition(ParameterType parameterType,String parameterId,String description,ParameterValueType valueType,String defaultValue,Long minValue,Long maxValue,boolean mandatory,boolean configurable,List<VOParameterOption> parameterOptions){  super();  this.parameterType=parameterType;  this.parameterId=parameterId;  this.description=description;  this.valueType=valueType;  this.defaultValue=defaultValue;  this.minValue=minValue;  this.maxValue=maxValue;  this.configurable=configurable;  this.mandatory=mandatory;  this.parameterOptions=parameterOptions;  this.modificationType=ParameterModificationType.STANDARD;}  }
class C{  public Deployer createDeployer(DeployerType type,Container container){  Deployer deployer=DEPLOYER_FACTORY.createDeployer(container,type);  deployer.setLogger(getLogger());  return deployer;}  }
class C{  public EventEntry(){  super(KEY);  addCategory(CATEGORY);}  }
class C{  public static void restorePreviousOutAndErrStream(){  if (!alreadyMuted) {    return;  }  System.setOut(latestOut);  System.setErr(latestErr);  alreadyMuted=false;}  }
class C{  public EdgeNGramTokenizerFactory(Map<String,String> args){  super(args);  minGramSize=getInt(args,"minGramSize",EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);  maxGramSize=getInt(args,"maxGramSize",EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static Date parseDate(final String str,final String... parsePatterns) throws ParseException {  return parseDate(str,null,parsePatterns);}  }
class C{  public static void initialBalance(Account[] a){  int initialBalance=100;  for (int i=0; i < a.length; i++) {    a[i]=new Account(i,initialBalance);  }}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof TicTacToeBoard) {    TicTacToeBoard board=(TicTacToeBoard)o;    for (int c=0; c <= MaxC; c++) {      for (int r=0; r <= MaxR; r++) {        if (cells[c][r] != board.cells[c][r]) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public static boolean isValidTemplate(String template){  template=template.trim();  if (template.indexOf('{') == -1) {    return false;  }  String s=template.trim();  if (s.lastIndexOf('}') != s.length() - 1) {    return false;  }  if (getMethodSignature(template) == null) {    return false;  }  if (getMethodBody(template) == null) {    return false;  }  return true;}  }
class C{  private void quickFix(IStringDiffExpectation expectation,XtextResource resource,RegionWithCursor offset,String selected,String mode,String specifiedResourcePath,Multimap<Integer,Issue> offset2issue,boolean reparseResource) throws Exception {  Optional<XtextEditor> editor=Optional.empty();  try {    List<IssueResolution> resolutions=collectAllResolutions(resource,offset,offset2issue);    IssueResolution res=QuickFixTestHelper.selectSingleOrFail(resolutions,selected);    String beforeApplication;    URI targetResourceUri=resource.getURI();    if (specifiedResourcePath != null && !specifiedResourcePath.isEmpty()) {      URI specifiedURI=resource.getURI().trimSegments(1).appendSegments(specifiedResourcePath.split("/"));      targetResourceUri=specifiedURI;      beforeApplication=getContentForResourceUri(specifiedURI);    } else {      beforeApplication=getContentForResourceUri(resource.getURI());    }    Display.getDefault().syncExec(null);    editor=EditorsUtil.openXtextEditor(targetResourceUri,N4JSActivator.EU_NUMBERFOUR_N4JS_N4JS);    assertTrue("No editor for provided resource " + targetResourceUri.path(),editor.isPresent());    String textAfterApplication=editor.get().getDocument().get();    if (specifiedResourcePath == null || specifiedResourcePath.isEmpty()) {      resource.reparse(textAfterApplication);      TestingResourceValidator trVal=(TestingResourceValidator)resource.getResourceServiceProvider().getResourceValidator();      if ("fileValid".equals(mode)) {        List<Issue> remainingIssues=trVal.validateDelegate(resource,CheckMode.ALL,CancelIndicator.NullImpl);        assertEquals("Expecting all issues resolved, but got still left: " + remainingIssues,0,remainingIssues.size());      }    }    if (reparseResource) {      resource.reparse(getContentForResourceUri(resource.getURI()));    }    if (expectation != null) {      String before=XpectCommentRemovalUtil.removeAllXpectComments(beforeApplication);      String after=XpectCommentRemovalUtil.removeAllXpectComments(textAfterApplication);      if ("whitespaceSensitive".equals(mode)) {        LineBasedTokenizer tokenizer=new LineBasedTokenizer();        expectation.assertDiffEquals(tokenizer.apply(before),tokenizer.apply(after),new WSAwareTokenAdapter());      } else {        expectation.assertDiffEquals(before,after);      }    }  }  finally {    editor.ifPresent(null);  }}  }
class C{  public ArrayIntCompressed(int[] ints,int offset,int length){  int mask=0x0;  for (int i=0; i < length; i++) {    mask|=ints[offset + i];  }  int leadingClearBits=0;  int trailingClearBits=0;  while (((mask & (1 << (BIT_LENGTH - leadingClearBits - 1))) == 0) && (leadingClearBits < BIT_LENGTH)) {    leadingClearBits++;  }  while (((mask & (1 << trailingClearBits)) == 0) && (trailingClearBits < (BIT_LENGTH - leadingClearBits))) {    trailingClearBits++;  }  init(length,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);  for (int i=0; i < length; i++) {    set(i,ints[offset + i]);  }}  }
class C{  public TransformerHandler newTransformerHandler(Templates templates) throws TransformerConfigurationException {  try {    TransformerImpl transformer=(TransformerImpl)templates.newTransformer();    transformer.setURIResolver(m_uriResolver);    TransformerHandler th=(TransformerHandler)transformer.getInputContentHandler(true);    return th;  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  public static void unregisterSharedPreferencesChangedListener(final SharedPreferences.OnSharedPreferenceChangeListener onSharedPreferenceChangeListener){  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(YeloApplication.getStaticContext());  preferences.unregisterOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);}  }
class C{  private static void reverseArray(Object[] array){  int i=0;  int j=array.length - 1;  Object tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.140 -0500",hash_original_method="8EF9A1828892EFEBF4B93362A866125C",hash_generated_method="69E9D8B4009D997BC9EE261646EC81E4") public boolean onOptionsItemSelected(MenuItem item){  return false;}  }
class C{  protected final LeafFieldsLookup fields(){  return lookup.fields();}  }
class C{  @ObjectiveCName("changeInAppNotificationVibrationEnabledWithValue:") public void changeInAppNotificationVibrationEnabled(boolean val){  modules.getSettingsModule().changeInAppVibrationEnabled(val);}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent ev){  if (ev.getSource().equals(btnOkay)) {    isCanceled=false;    try {      mechFilter.createFilterExpressionFromTokens(filterToks);      setVisible(false);    } catch (    MechSearchFilter.FilterParsingException e) {      JOptionPane.showMessageDialog(this,"Error parsing filter expression!\n\n" + e.msg,"Filter Expression Parsing Error",JOptionPane.ERROR_MESSAGE);    }  } else   if (ev.getSource().equals(btnCancel)) {    isCanceled=true;    setVisible(false);  } else   if (ev.getSource().equals(cboUnitType) || ev.getSource().equals(cboTechLevel) || ev.getSource().equals(cboTechClass)) {    filterTables();  } else   if (ev.getSource().equals(btnAdd)) {    int row=tblEquipment.getSelectedRow();    if (row >= 0) {      String internalName=(String)tblEquipment.getModel().getValueAt(tblEquipment.convertRowIndexToModel(row),EquipmentTableModel.COL_INTERNAL_NAME);      String fullName=(String)tblEquipment.getValueAt(row,EquipmentTableModel.COL_NAME);      int qty=Integer.parseInt((String)tblEquipment.getValueAt(row,EquipmentTableModel.COL_QTY));      filterToks.add(new EquipmentFT(internalName,fullName,qty));      txtEqExp.setText(filterExpressionString());      btnBack.setEnabled(true);      enableOperationButtons();      disableSelectionButtons();    }    row=tblWeapons.getSelectedRow();    if (row >= 0) {      String internalName=(String)tblWeapons.getModel().getValueAt(tblWeapons.convertRowIndexToModel(row),WeaponsTableModel.COL_INTERNAL_NAME);      String fullName=(String)tblWeapons.getValueAt(row,WeaponsTableModel.COL_NAME);      int qty=Integer.parseInt((String)tblWeapons.getValueAt(row,WeaponsTableModel.COL_QTY));      filterToks.add(new EquipmentFT(internalName,fullName,qty));      txtEqExp.setText(filterExpressionString());      btnBack.setEnabled(true);      enableOperationButtons();      disableSelectionButtons();    }  } else   if (ev.getSource().equals(btnLeftParen)) {    filterToks.add(new ParensFT("("));    txtEqExp.setText(filterExpressionString());    btnBack.setEnabled(true);    disableOperationButtons();    enableSelectionButtons();    btnLeftParen.setEnabled(false);    btnRightParen.setEnabled(false);  } else   if (ev.getSource().equals(btnRightParen)) {    filterToks.add(new ParensFT(")"));    txtEqExp.setText(filterExpressionString());    btnBack.setEnabled(true);    enableOperationButtons();    disableSelectionButtons();    btnLeftParen.setEnabled(false);    btnRightParen.setEnabled(false);  } else   if (ev.getSource().equals(btnAnd)) {    filterToks.add(new OperationFT(MechSearchFilter.BoolOp.AND));    txtEqExp.setText(filterExpressionString());    btnBack.setEnabled(true);    disableOperationButtons();    enableSelectionButtons();  } else   if (ev.getSource().equals(btnOr)) {    filterToks.add(new OperationFT(MechSearchFilter.BoolOp.OR));    txtEqExp.setText(filterExpressionString());    btnBack.setEnabled(true);    disableOperationButtons();    enableSelectionButtons();  } else   if (ev.getSource().equals(btnBack)) {    if (filterToks.size() > 0) {      filterToks.remove(filterToks.size() - 1);      txtEqExp.setText(filterExpressionString());      if (filterToks.size() == 0) {        btnBack.setEnabled(false);      }      if ((filterToks.size() == 0) || (filterToks.lastElement() instanceof OperationFT)) {        disableOperationButtons();        enableSelectionButtons();      } else {        enableOperationButtons();        disableSelectionButtons();      }    }  } else   if (ev.getSource().equals(btnClear)) {    filterToks.clear();    txtEqExp.setText("");    btnBack.setEnabled(false);    disableOperationButtons();    enableSelectionButtons();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void transform(Transform3D transform){  Transform3D current=getTransform();  current.mul(transform,current);  setTransform(current);}  }
class C{  public AtomicShortArray(short[] initial){  this(initial.length,initial);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (!newBar)   return;  PivotItem dataItem=null;  Hashtable<Long,Pair> userDataVector=new Hashtable<Long,Pair>();  DAOEntryLimit entryLimits=new DAOEntryLimit();  boolean pivot=false;  String side=null;  String pivotSide=null;  CandleItem pivotCandle=null;  CandleItem pivotRangeCandle=null;  int middleBar=(this.getBars() - 1) / 2;  int startBar=skip - 1;  if ((startBar + 1) >= this.getBars()) {    for (int i=startBar; i > (startBar - this.getBars()); i--) {      CandleItem candleItem=(CandleItem)source.getDataItem(i);      long time=(((CandlePeriod)candleItem.getPeriod()).getDaySerialIndex());      userDataVector.put(time,new Pair(time,candleItem.getVwap()));    }    if (this.getQuadratic()) {      calcPivot.calculatePivot(new ArrayList<Pair>(userDataVector.values()));    }    CandleItem prevCandle=null;    for (int i=startBar; i > (startBar - this.getBars()); i--) {      CandleItem candle=(CandleItem)source.getDataItem(i);      pivot=false;      if (null != prevCandle) {        if (null == side) {          if ((userDataVector.get(((CandlePeriod)candle.getPeriod()).getDaySerialIndex()).y) < (userDataVector.get(((CandlePeriod)prevCandle.getPeriod()).getDaySerialIndex()).y)) {            side=Side.BOT;            pivotSide=Side.BOT;          } else {            side=Side.SLD;            pivotSide=Side.SLD;          }          if (!prevCandle.isSide(side) && this.getSide()) {            break;          }        }        if (i == (startBar - middleBar - 1)) {          if (side.equals(Side.SLD)) {            side=Side.BOT;          } else {            side=Side.SLD;          }        }        if (candle.getPeriod().getStart().getYear() == prevCandle.getPeriod().getStart().getYear() && candle.getPeriod().getStart().getDayOfYear() == prevCandle.getPeriod().getStart().getDayOfYear()) {          if (side.equals(Side.BOT)) {            if ((userDataVector.get(((CandlePeriod)candle.getPeriod()).getDaySerialIndex()).y) < (userDataVector.get(((CandlePeriod)prevCandle.getPeriod()).getDaySerialIndex()).y)) {              if (this.getSide()) {                if (i == (startBar - middleBar)) {                  pivot=true;                } else {                  if (candle.isSide(side)) {                    pivot=true;                  }                }              } else {                pivot=true;              }            }          } else {            if ((userDataVector.get(((CandlePeriod)candle.getPeriod()).getDaySerialIndex()).y) > (userDataVector.get(((CandlePeriod)prevCandle.getPeriod()).getDaySerialIndex()).y)) {              if (this.getSide()) {                if (i == (startBar - middleBar)) {                  pivot=true;                } else {                  if (candle.isSide(side)) {                    pivot=true;                  }                }              } else {                pivot=true;              }            }          }          if (pivotSide.equals(Side.BOT)) {            if (candle.getVwap() < prevCandle.getVwap()) {              pivotCandle=candle;            }            if (candle.getVwap() > pivotRangeCandle.getVwap()) {              pivotRangeCandle=candle;            }          } else {            if (candle.getVwap() > prevCandle.getVwap()) {              pivotCandle=candle;            }            if (candle.getVwap() < pivotRangeCandle.getVwap()) {              pivotRangeCandle=candle;            }          }        }        if (!pivot) {          break;        }      } else {        pivotRangeCandle=candle;      }      prevCandle=candle;    }    if (pivot && (null != pivotCandle)) {      try {        Entrylimit entryLimit=entryLimits.getValue(new Money(pivotCandle.getVwap()));        Money pivotRange=new Money(Math.abs((pivotRangeCandle.getVwap() - pivotCandle.getVwap())));        if (null != entryLimit && entryLimit.getPivotRange().doubleValue() <= pivotRange.doubleValue()) {          Money pivotPrice=new Money(pivotCandle.getVwap());          dataItem=new PivotItem(pivotCandle.getPeriod(),pivotPrice.getBigDecimalValue(),pivotSide);        }      } catch (      Exception ex) {        _log.error("Error find Pivot Range Msg: " + ex.getMessage(),ex);      }    }  }  if (null != dataItem) {    if (this.indexOf(dataItem.getPeriod()) < 0) {      this.add(dataItem,false);    } else {      PivotItem currDataItem=(PivotItem)this.getDataItem(this.indexOf(dataItem.getPeriod()));      currDataItem.setPivotPrice(dataItem.getPivotPrice());      currDataItem.setPivotSide(dataItem.getPivotSide());    }  }}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public static void main(String[] args) throws Exception {  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"processor-kafka-streams");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,MessageSerde.class);  StateStoreSupplier fastStore=Stores.create("FAST-store").withStringKeys().withDoubleValues().inMemory().build();  StateStoreSupplier mediumStore=Stores.create("MEDIUM-store").withStringKeys().withDoubleValues().inMemory().build();  StateStoreSupplier slowStore=Stores.create("SLOW-store").withStringKeys().withDoubleValues().inMemory().build();  TopologyBuilder builder=new TopologyBuilder();  builder.addSource("messages-source",Serdes.String().deserializer(),new MessageSerde().deserializer(),"messages").addProcessor("selector-processor",null,"messages-source").addProcessor("FAST-processor",null,"selector-processor").addProcessor("MEDIUM-processor",null,"selector-processor").addProcessor("SLOW-processor",null,"selector-processor").addStateStore(fastStore,"FAST-processor").addStateStore(mediumStore,"MEDIUM-processor").addStateStore(slowStore,"SLOW-processor").addSink("FAST-sink","fast-avgs",Serdes.String().serializer(),Serdes.Double().serializer(),"FAST-processor").addSink("MEDIUM-sink","medium-avgs",Serdes.String().serializer(),Serdes.Double().serializer(),"MEDIUM-processor").addSink("SLOW-sink","slow-avgs",Serdes.String().serializer(),Serdes.Double().serializer(),"SLOW-processor");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();  Properties producerConfig=new Properties();  producerConfig.put("bootstrap.servers","localhost:9092");  producerConfig.put("key.serializer","org.apache.kafka.common" + ".serialization.StringSerializer");  producerConfig.put("value.serializer","io.github.timothyrenner.kstreamex.processor" + ".MessageSerializer");  KafkaProducer producer=new KafkaProducer<String,Message>(producerConfig);  Random rng=new Random(12345L);  String[] keys={"A","B","C"};  String[] types={"FAST","MEDIUM","SLOW"};  HashMap<String,Double> lastValues=new HashMap<String,Double>();  for (  String key : keys) {    lastValues.put(key,0.0);  }  while (true) {    String key=keys[rng.nextInt(keys.length)];    double nextValue=lastValues.get(key) + rng.nextGaussian();    Message value=new Message(types[rng.nextInt(types.length)],nextValue);    producer.send(new ProducerRecord<>("messages",key,value));    lastValues.put(key,nextValue);    Thread.sleep(100L);  }}  }
class C{  public void showFunctionMenuAt(double x,double y,boolean byMouse){  FunctionMenu menu=new FunctionMenu(byMouse,ghci.getCatalog(),this);  double verticalCenter=150;  Point2D scenePos=this.localToScene(x,y - verticalCenter);  Point2D newPos=this.sceneToLocal(scenePos.getX(),Math.max(0,scenePos.getY()));  menu.relocate(newPos.getX(),newPos.getY());  this.addMenu(menu);}  }
class C{  private void extract(Node source){  NodeList list=source.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    Node node=list.item(i);    short type=node.getNodeType();    if (type != COMMENT_NODE) {      offer(node);      extract(node);    }  }}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle newRect,byte[] bdata){  lzwDecoder.decode(input,bdata,newRect.height);}  }
class C{  public boolean next() throws Exception {  if (m_NumIterationsPerformed >= m_NumIterations) {    return false;  }  if (m_TrainingData.numAttributes() == 1) {    return false;  }  if (m_Debug) {    System.err.println("Training classifier " + (m_NumIterationsPerformed + 1));  }  Instances trainData=null;  if (m_WeightThreshold < 100) {    trainData=selectWeightQuantile(m_TrainingData,(double)m_WeightThreshold / 100);  } else {    trainData=new Instances(m_TrainingData);  }  double epsilon=0;  if ((m_UseResampling) || (!(m_Classifier instanceof WeightedInstancesHandler))) {    int resamplingIterations=0;    double[] weights=new double[trainData.numInstances()];    for (int i=0; i < weights.length; i++) {      weights[i]=trainData.instance(i).weight();    }    do {      Instances sample=trainData.resampleWithWeights(m_RandomInstance,weights);      m_Classifiers[m_NumIterationsPerformed].buildClassifier(sample);      Evaluation evaluation=new Evaluation(m_TrainingData);      evaluation.evaluateModel(m_Classifiers[m_NumIterationsPerformed],m_TrainingData);      epsilon=evaluation.errorRate();      resamplingIterations++;    } while (Utils.eq(epsilon,0) && (resamplingIterations < MAX_NUM_RESAMPLING_ITERATIONS));  } else {    if (m_Classifiers[m_NumIterationsPerformed] instanceof Randomizable) {      ((Randomizable)m_Classifiers[m_NumIterationsPerformed]).setSeed(m_RandomInstance.nextInt());    }    m_Classifiers[m_NumIterationsPerformed].buildClassifier(trainData);    Evaluation evaluation=new Evaluation(m_TrainingData);    evaluation.evaluateModel(m_Classifiers[m_NumIterationsPerformed],m_TrainingData);    epsilon=evaluation.errorRate();  }  if (Utils.grOrEq(epsilon,0.5) || Utils.eq(epsilon,0)) {    if (m_NumIterationsPerformed == 0) {      m_NumIterationsPerformed=1;    }    return false;  }  double reweight=(1 - epsilon) / epsilon;  m_Betas[m_NumIterationsPerformed]=Math.log(reweight);  if (m_Debug) {    System.err.println("\terror rate = " + epsilon + "  beta = "+ m_Betas[m_NumIterationsPerformed]);  }  setWeights(m_TrainingData,reweight);  m_NumIterationsPerformed++;  return true;}  }
class C{  final SolrInputField f(String name,Object... values){  return field(name,1.0F,values);}  }
class C{  public static Object toNull(Object value) throws PageException {  if (value == null)   return null;  if (value instanceof String && Caster.toString(value).trim().length() == 0)   return null;  if (value instanceof Number && ((Number)value).intValue() == 0)   return null;  throw new CasterException(value,"null");}  }
class C{  private DualPivotQuicksort(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ExtensionForcedUser(){  super();  initialize();}  }
class C{  public boolean isAllUserRecordable(int[] types){  assert types != null;  boolean[] userRecordableEvts0=userRecordableEvts;  for (  int type : types) {    if (type < 0 || type >= len)     throw new IllegalArgumentException("Invalid event type: " + type);    if (!userRecordableEvts0[type])     return false;  }  return true;}  }
class C{  public RoleException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public boolean visit(AnnotationTypeDeclaration node){  return true;}  }
class C{  protected void storeDevice(String uid,String key,String username) throws DataAccessException {  Map<String,AttributeValue> item=new HashMap<String,AttributeValue>();  item.put(ATTRIBUTE_UID,new AttributeValue().withS(uid));  item.put(ATTRIBUTE_KEY,new AttributeValue().withS(key));  item.put(ATTRIBUTE_USERNAME,new AttributeValue().withS(username));  PutItemRequest putItemRequest=new PutItemRequest().withTableName(DEVICE_TABLE).withItem(item);  try {    ddb.putItem(putItemRequest);  } catch (  AmazonClientException e) {    throw new DataAccessException(String.format("Failed to store device uid: %s; key: %s; username: %s",uid,key,username),e);  }}  }
class C{  void cancelPressed(ActionEvent e){  if (inEditMode) {    status1.setText(Bundle.getMessage("LightCreateInst"));    update.setVisible(false);    create.setVisible(true);    fixedSystemName.setVisible(false);    prefixBox.setVisible(true);    systemNameLabel.setVisible(false);    systemLabel.setVisible(true);    panel1a.setVisible(true);    curLight.activateLight();    inEditMode=false;  }  if (lightCreatedOrUpdated) {    InstanceManager.getDefault(jmri.UserPreferencesManager.class).showInfoMessage(Bundle.getMessage("ReminderTitle"),Bundle.getMessage("ReminderSaveString",Bundle.getMessage("MenuItemLightTable")),getClassName(),"remindSaveLight");  }  lightCreatedOrUpdated=false;  clearLightControls();  status2.setText("");  if (addFrame != null) {    addFrame.setVisible(false);    addFrame.dispose();    addFrame=null;  }}  }
class C{  public DriverTask discoverStoragePools(StorageSystem storageSystem,List<StoragePool> storagePools){  LOG.info("Discovering storage pools for [{}] {} {}",storageSystem.getSystemName(),storageSystem.getIpAddress(),storageSystem.getNativeId());  DellSCDriverTask task=new DellSCDriverTask("discoverStoragePools");  try {    StorageCenterAPI api=connectionManager.getConnection(storageSystem.getNativeId());    ScStorageType[] storageTypes=api.getStorageTypes(storageSystem.getNativeId());    for (    ScStorageType storageType : storageTypes) {      storagePools.add(util.getStoragePoolFromStorageType(api,storageType,null));    }    task.setStatus(DriverTask.TaskStatus.READY);  } catch (  Exception e) {    String failureMessage=String.format("Error getting pool information: %s",e);    task.setFailed(failureMessage);    LOG.warn(failureMessage);  }  return task;}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  public static BookKeeperClientBuilder newBuilder(){  return new BookKeeperClientBuilder();}  }
class C{  public boolean bdd(){  return soot.PhaseOptions.getBoolean(options,"bdd");}  }
class C{  public boolean isTensileDragEnabled(){  return tensileDragEnabled;}  }
class C{  public static AsymmetricCipherKeyPair generateUserID(){  return generateDHKeyPair();}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!newRecord) {    StringBuffer sql=new StringBuffer();    int no=0;    if (is_ValueChanged(M_Element.COLUMNNAME_Name) || is_ValueChanged(M_Element.COLUMNNAME_Description) || is_ValueChanged(M_Element.COLUMNNAME_Help)|| is_ValueChanged(M_Element.COLUMNNAME_ColumnName)) {      sql=new StringBuffer("UPDATE AD_Column SET ColumnName=").append(DB.TO_STRING(getColumnName())).append(", Name=").append(DB.TO_STRING(getName())).append(", Description=").append(DB.TO_STRING(getDescription())).append(", Help=").append(DB.TO_STRING(getHelp())).append(" WHERE AD_Element_ID=").append(get_ID());      no=DB.executeUpdate(sql.toString(),get_TrxName());      log.fine("afterSave - Columns updated #" + no);      sql=new StringBuffer("UPDATE AD_Process_Para SET ColumnName=").append(DB.TO_STRING(getColumnName())).append(", Name=").append(DB.TO_STRING(getName())).append(", Description=").append(DB.TO_STRING(getDescription())).append(", Help=").append(DB.TO_STRING(getHelp())).append(", AD_Element_ID=").append(get_ID()).append(" WHERE UPPER(ColumnName)=").append(DB.TO_STRING(getColumnName().toUpperCase())).append(" AND IsCentrallyMaintained='Y' AND AD_Element_ID IS NULL");      no=DB.executeUpdate(sql.toString(),get_TrxName());      sql=new StringBuffer("UPDATE AD_Process_Para SET ColumnName=").append(DB.TO_STRING(getColumnName())).append(", Name=").append(DB.TO_STRING(getName())).append(", Description=").append(DB.TO_STRING(getDescription())).append(", Help=").append(DB.TO_STRING(getHelp())).append(" WHERE AD_Element_ID=").append(get_ID()).append(" AND IsCentrallyMaintained='Y'");      no+=DB.executeUpdate(sql.toString(),get_TrxName());      log.fine("Parameters updated #" + no);    }    if (is_ValueChanged(M_Element.COLUMNNAME_Name) || is_ValueChanged(M_Element.COLUMNNAME_Description) || is_ValueChanged(M_Element.COLUMNNAME_Help)) {      sql=new StringBuffer("UPDATE AD_Field SET Name=").append(DB.TO_STRING(getName())).append(", Description=").append(DB.TO_STRING(getDescription())).append(", Help=").append(DB.TO_STRING(getHelp())).append(" WHERE AD_Column_ID IN (SELECT AD_Column_ID FROM AD_Column WHERE AD_Element_ID=").append(get_ID()).append(") AND IsCentrallyMaintained='Y'");      no=DB.executeUpdate(sql.toString(),get_TrxName());      log.fine("Fields updated #" + no);    }    if (is_ValueChanged(M_Element.COLUMNNAME_PrintName) || is_ValueChanged(M_Element.COLUMNNAME_Name)) {      sql=new StringBuffer("UPDATE AD_PrintFormatItem pi SET PrintName=").append(DB.TO_STRING(getPrintName())).append(", Name=").append(DB.TO_STRING(getName())).append(" WHERE IsCentrallyMaintained='Y'").append(" AND EXISTS (SELECT * FROM AD_Column c ").append("WHERE c.AD_Column_ID=pi.AD_Column_ID AND c.AD_Element_ID=").append(get_ID()).append(")");      no=DB.executeUpdate(sql.toString(),get_TrxName());      log.fine("PrintFormatItem updated #" + no);    }  }  return success;}  }
class C{  @Override public long length(){  long len=0;  for (int i=0; i < actualSize; ) {    int content=blobContent[i] & 0xff;    if (content < 0x80) {      i+=1;    } else     if (content < 0xC2) {      throw new AssertionError("invalid UTF8");    } else     if (content < 0xE0) {      i+=2;    } else     if (content < 0xF0) {      i+=3;    } else     if (content < 0xF8) {      i+=4;    } else {      throw new AssertionError("invalid UTF8");    }    len++;  }  return len;}  }
class C{  public static <E extends Comparable<E>>void reverseList(SingleLinkedList<E> list){  SingleLinkedNode<E> curr=list.getNode(0), prev=null, next;  while (curr != null) {    next=curr.next;    curr.next=prev;    prev=curr;    curr=next;  }  list.head=prev;}  }
class C{  public void simpleIntegration(View v){  Intent intent=new Intent(this,SegmentScanActivity.class);  intent.putExtra(SegmentScanActivity.EXTRAS_LICENSE_KEY,LICENSE_KEY);  ScanConfiguration conf[]=new ScanConfiguration[]{new ScanConfiguration(R.string.amount_title,R.string.amount_msg,NAME_TOTAL_AMOUNT,new AmountParserSettings()),new ScanConfiguration(R.string.tax_title,R.string.tax_msg,NAME_TAX,new AmountParserSettings()),new ScanConfiguration(R.string.iban_title,R.string.iban_msg,NAME_IBAN,new IbanParserSettings())};  intent.putExtra(SegmentScanActivity.EXTRAS_SCAN_CONFIGURATION,conf);  Intent helpIntent=new Intent(this,HelpActivity.class);  intent.putExtra(SegmentScanActivity.EXTRAS_HELP_INTENT,helpIntent);  startActivityForResult(intent,BLINK_OCR_REQUEST_CODE);}  }
class C{  public static double lnFactorial(double x){  return Statistics.lnGamma(x + 1);}  }
class C{  @Override public final boolean equals(final Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  SemiCluster other=(SemiCluster)obj;  if (vertices == null) {    if (other.vertices != null) {      return false;    }  } else   if (!vertices.equals(other.vertices)) {    return false;  }  return true;}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  private static boolean hasAttribute(final Node node,final String name){  return node.getAttributes().getNamedItem(name) != null;}  }
class C{  private boolean indexIsInFieldList(FormIndex index){  int event=getEvent(index);  if (event == FormEntryController.EVENT_QUESTION) {    FormEntryCaption[] captions=getCaptionHierarchy(index);    if (captions.length < 2) {      return false;    }    FormEntryCaption grp=captions[captions.length - 2];    return groupIsFieldList(grp.getIndex());  } else   if (event == FormEntryController.EVENT_GROUP) {    return groupIsFieldList(index);  } else   if (event == FormEntryController.EVENT_REPEAT) {    return repeatIsFieldList(index);  } else {    return false;  }}  }
class C{  public void redrawScatterPlot(){  ScatterPlotOld newPlot=new ScatterPlotOld(scatterPlot.getDataSet(),(ContinuousVariable)(yVariableBox.getSelectedItem()),(ContinuousVariable)(xVariableBox.getSelectedItem()));  if (regressionBox.isSelected())   newPlot.setDrawRegLine(true);  for (int i=0; i < scrollers.size(); i++) {    boolean breakNow=false;    double low=((JScrollBar)scrollers.get(i)).getValue();    double high=((JScrollBar)scrollers.get(i)).getValue() + ((JScrollBar)scrollers.get(i)).getVisibleAmount();    if (low > high)     breakNow=true;    ContinuousVariable currentNode=(ContinuousVariable)(condVariables.get(i));    int variableIndex=newPlot.getDataSet().getColumn(currentNode);    Vector newIndexSet=new Vector();    Vector newComplementSet=new Vector();    for (int j=0; j < newPlot.getIndexSet().size(); j++) {      int currentIndex=(Integer)newPlot.getIndexSet().get(j);      double value=newPlot.getDataSet().getDouble(currentIndex,variableIndex);      if (value >= low && value <= high) {        newIndexSet.add(currentIndex);      } else {        newComplementSet.add(currentIndex);      }    }    newPlot.setIndexSet(newIndexSet);    newPlot.setComplementIndexSet(newComplementSet);    if (breakNow)     break;  }  changeScatterPlot(newPlot);}  }
class C{  public void send(String theString){  send(theString.getBytes());}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  public DefaultStateMachineComponentResolver(Map<String,Action<S,E>> registeredActions,Map<String,Guard<S,E>> registeredGuards){  this(null,registeredActions,registeredGuards);}  }
class C{  public double pixelSizeAtDistance(double distance){  if (this.pixelSizeFactor == 0) {    double fovyDegrees=this.fieldOfView;    double tanfovy_2=Math.tan(Math.toRadians(fovyDegrees * 0.5));    this.pixelSizeFactor=2 * tanfovy_2 / this.viewport.height;  }  return distance * this.pixelSizeFactor;}  }
class C{  public static JsonObject httpPut(CloseableHttpClient httpClient,String url,JsonObject requestJson) throws ClientProtocolException, IOException, IllegalStateException, HttpException {  HttpPut httpPut=new HttpPut(url);  httpPut.addHeader("Content-Type","application/json");  httpPut.addHeader("Accept","application/json");  String inp=requestJson.toString();  StringEntity input=new StringEntity(inp,ContentType.APPLICATION_JSON);  httpPut.setEntity(input);  try (CloseableHttpResponse response=httpClient.execute(httpPut)){    return UtilityFunctions.parseHTTPResponse(response,url);  } catch (  ClientProtocolException e) {    throw e;  }}  }
class C{  public boolean isLaborable(){  return laborable;}  }
class C{  public static float explainToleranceDelta(float f1,float f2){  return Math.max(EXPLAIN_SCORE_TOLERANCE_MINIMUM,Math.max(Math.abs(f1),Math.abs(f2)) * EXPLAIN_SCORE_TOLERANCE_DELTA);}  }
class C{  public PSPCommunicationException(){  super();}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public static void putUnsignedByte(ByteBuffer bb,short v){  bb.put((byte)(v & 0xff));}  }
class C{  public void deleteMessage(String queueUrl,String receiptHandle){  DeleteMessageRequest deleteMessageRequest=new DeleteMessageRequest(queueUrl,receiptHandle);  deleteMessage(deleteMessageRequest);}  }
class C{  protected void catchException(Exception exception,ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  super.catchException(exception,mapping,form,request,response);  Throwable error=((ArchigestActionProcessException)exception).getNested();  request.setAttribute(Constants.EXCEPCION_KEY,error);  setReturnActionFordward(request,mapping.findForward("globalerror"));}  }
class C{  public void beginDraggingFrame(JComponent f){  Rectangle r=f.getBounds();  ghostPanel.setBounds(r);  f.setVisible(false);  targetPane.add(ghostPanel);  targetPane.setLayer(ghostPanel,JLayeredPane.DRAG_LAYER.intValue());  targetPane.setVisible(true);}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof ECPoint) {    if (this.affineX != null) {      ECPoint otherPoint=(ECPoint)other;      return this.affineX.equals(otherPoint.affineX) && this.affineY.equals(otherPoint.affineY);    } else {      return other == POINT_INFINITY;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Channel c=getChannel(stack);  return (c == null) ? "" : c.getNetwork();}  }
class C{  private void handleStateRemoving(InetAddress endpoint,String[] pieces){  assert (pieces.length > 0);  if (endpoint.equals(FBUtilities.getBroadcastAddress())) {    logger.info("Received removenode gossip about myself. Is this node rejoining after an explicit removenode?");    try {      drain();    } catch (    Exception e) {      throw new RuntimeException(e);    }    return;  }  if (tokenMetadata.isMember(endpoint)) {    String state=pieces[0];    Collection<Token> removeTokens=tokenMetadata.getTokens(endpoint);    if (VersionedValue.REMOVED_TOKEN.equals(state)) {      excise(removeTokens,endpoint,extractExpireTime(pieces));    } else     if (VersionedValue.REMOVING_TOKEN.equals(state)) {      if (logger.isDebugEnabled())       logger.debug("Tokens {} removed manually (endpoint was {})",removeTokens,endpoint);      tokenMetadata.addLeavingEndpoint(endpoint);      PendingRangeCalculatorService.instance.update();      String[] coordinator=Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.REMOVAL_COORDINATOR).value.split(VersionedValue.DELIMITER_STR,-1);      UUID hostId=UUID.fromString(coordinator[1]);      restoreReplicaCount(endpoint,tokenMetadata.getEndpointForHostId(hostId));    }  } else {    if (VersionedValue.REMOVED_TOKEN.equals(pieces[0]))     addExpireTimeIfFound(endpoint,extractExpireTime(pieces));    removeEndpoint(endpoint);  }}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public static IndexKey prepareDefaultStartIndexKey(SegmentProperties segmentProperties) throws KeyGenException {  IndexKey startIndexKey;  long[] dictionarySurrogateKey=new long[segmentProperties.getDimensions().size() - segmentProperties.getNumberOfNoDictionaryDimension()];  byte[] dictionaryStartMdkey=segmentProperties.getDimensionKeyGenerator().generateKey(dictionarySurrogateKey);  byte[] noDictionaryStartKeyArray=getNoDictionaryDefaultStartKey(segmentProperties);  startIndexKey=new IndexKey(dictionaryStartMdkey,noDictionaryStartKeyArray);  return startIndexKey;}  }
class C{  public TIntSet findEdgesInEnvelope(Envelope envelope){  TIntSet candidates=spatialIndex.query(envelope);  edgeStore.forEachTemporarilyAddedEdge(null);  if (edgeStore.temporarilyDeletedEdges != null) {    candidates.removeAll(edgeStore.temporarilyDeletedEdges);  }  return candidates;}  }
class C{  public boolean isDefined(Object attrName){  return attributes.isDefined(attrName);}  }
class C{  final boolean allocateUnassigned(){  return balance(true);}  }
class C{  GeoPointInBBoxQueryImpl(final String field,final double minLat,final double maxLat,final double minLon,final double maxLon){  super(field,minLat,maxLat,minLon,maxLon);}  }
class C{  @Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){  if (errorToShow != null) {    if (errorToShow != null) {      Set<? extends Element> rootElements=roundEnv.getRootElements();      if (!rootElements.isEmpty()) {        processingEnv.getMessager().printMessage(Kind.WARNING,errorToShow,rootElements.iterator().next());        errorToShow=null;      }    }  }  return false;}  }
class C{  public boolean isLibClass(String clz){  if (Config.v().apk != null) {    for (    String libPkgPrefix : Config.v().libraryPackagePrefixes) {      if (clz.startsWith(libPkgPrefix))       return true;    }  }  return libClasses.contains(clz);}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent event){switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    x1=event.getX();  y1=event.getY();break;case MotionEvent.ACTION_MOVE:x2=event.getX();y2=event.getY();if (isScrollingHorizontal(x1,y1,x2,y2)) {return super.dispatchTouchEvent(event);}break;}switch (getCurrentItem()) {case 0:if (mDayPicker != null) mDayPicker.dispatchTouchEvent(event);break;case 1:if (mTimePicker != null) mTimePicker.dispatchTouchEvent(event);break;}return super.onTouchEvent(event);}  }
class C{  protected void assertScore(ODataRenderer renderer,int expectedScore){  assertThat(renderer.score(context,null),is(expectedScore));}  }
class C{  public void testDivideRoundHalfUpNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void findTools(){}  }
class C{  public MessageStats(String msgId,int numberOf10MinutesInterval,boolean isMsg2){  m_msgId=msgId;  m_10MinutesMsgCountArray=new int[numberOf10MinutesInterval];  m_isMsg2=isMsg2;}  }
class C{  public static short parseShort(final byte[] b,final int off){  final short size=Short.SIZE / Byte.SIZE;  final int len=b.length - off;  if (len >= size) {    return getShort(b,off);  } else {    throw new ParseException("Not enough bytes to parse a short.");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public void panAndZoom(int minX,int minY,int maxX,int maxY){  float currZoom=mapController.getZoom();  LngLat tl=Util.normalizeLngLat(mapController.coordinatesAtScreenPosition(0,0));  LngLat br=Util.normalizeLngLat(mapController.coordinatesAtScreenPosition(windowWidth,windowHeight));  int fromMinX=AreaPanel.convertLonToX(tl.longitude);  int fromMinY=AreaPanel.convertLatToY(tl.latitude);  int fromMaxX=AreaPanel.convertLonToX(br.longitude);  int fromMaxY=AreaPanel.convertLatToY(br.latitude);  maxY=(int)(((float)maxY - minY) * windowHeight / pointAreaHeight) + minY;  float zoomMultiplier=Math.min(((float)fromMaxX - fromMinX) / (maxX - minX),((float)fromMaxY - fromMinY) / (maxY - minY));  float newZoom=(float)(currZoom + Math.log(zoomMultiplier) / Math.log(2));  LngLat newPos=new LngLat(AreaPanel.convertXToLon((maxX - minX) / 2 + minX),AreaPanel.convertYToLat((maxY - minY) / 2 + minY));  mapController.setPositionEased(newPos,AUTOZOOM_PAN_EASE_MS);  mapController.setZoomEased(newZoom,AUTOZOOM_ZOOM_EASE_MS);  notifyScreenMoved();}  }
class C{  @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("RouteTracker[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.connected)   cab.append('c');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (int i=0; i < this.proxyChain.length; i++) {      cab.append(this.proxyChain[i]);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  public static void addURL(URL u) throws IOException {  Class sysclass=URLClassLoader.class;  try {    Method method=sysclass.getDeclaredMethod("addURL",URL.class);    method.setAccessible(true);    method.invoke(sysLoader,u);  } catch (  Throwable t) {  }}  }
class C{  public QuaternaryOperator(WDivMMType wt,double epsilon){  wtype3=wt;  eps=epsilon;}  }
class C{  public @NonNull JsRuntimeReplFactoryBuilder addFunction(@NonNull String name,@NonNull Function function){  mFunctions.put(name,function);  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void delFile(String delFileName) throws ConfigurationException {  File delFile=new File(delFileName);  if (delFile.exists() && delFile.canWrite()) {    delFile.delete();  } else {    throw new ConfigurationException("Can't delete file because it is not writeable. File=" + delFileName);  }}  }
class C{  public void updateCharacterStream(int columnIndex,java.io.Reader x,int length) throws SQLException {  throw new NotUpdatable();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, j, k;  int featureNum, numFeatures;  int filterSize, halfFilterSize;  double[][] geometry;  int numPoints, numParts, part, startingPointInPart, endingPointInPart;  int numPointsInFilter;  ShapeType shapeType;  ShapeFileRecord outputRecord;  double sumX, sumY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  filterSize=Integer.parseInt(args[2]);  if (filterSize < 3) {    filterSize=3;  }  if (filterSize % 2 == 0) {    showFeedback("The filter size must be an odd number. The specified value " + "has been incremented by one.");    filterSize++;  }  halfFilterSize=(int)Math.floor(filterSize / 2.0);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polyline or polygon base shape type.");      return;    }    ShapeFile output=new ShapeFile(outputFile,shapeType);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    featureNum=0;    for (    ShapeFileRecord record : input.records) {      featureNum++;      PointsList points=new PointsList();      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        if (geometry[startingPointInPart][0] == geometry[endingPointInPart - 1][0] && geometry[startingPointInPart][1] == geometry[endingPointInPart - 1][1]) {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              k=j;              if (k < startingPointInPart) {                k=endingPointInPart + k - 1;              }              if (k >= endingPointInPart) {                k=startingPointInPart + (k - endingPointInPart) + 1;              }              if (k >= startingPointInPart && k < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[k][0];                sumY+=geometry[k][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        } else {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              if (j >= startingPointInPart && j < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[j][0];                sumY+=geometry[j][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        }      }switch (shapeType) {case POLYLINE:        PolyLine line=new PolyLine(partData,points.getPointsArray());      output.addRecord(line);    break;case POLYLINEZ:  PolyLineZ polyLineZ=(PolyLineZ)(record.getGeometry());PolyLineZ linez=new PolyLineZ(partData,points.getPointsArray(),polyLineZ.getzArray(),polyLineZ.getmArray());output.addRecord(linez);break;case POLYLINEM:PolyLineM polyLineM=(PolyLineM)(record.getGeometry());PolyLineM linem=new PolyLineM(partData,points.getPointsArray(),polyLineM.getmArray());output.addRecord(linem);break;case POLYGON:Polygon poly=new Polygon(partData,points.getPointsArray());output.addRecord(poly);break;case POLYGONZ:PolygonZ polygonZ=(PolygonZ)(record.getGeometry());PolygonZ polyz=new PolygonZ(partData,points.getPointsArray(),polygonZ.getzArray(),polygonZ.getmArray());output.addRecord(polyz);break;case POLYGONM:PolygonM polygonM=(PolygonM)(record.getGeometry());PolygonM polym=new PolygonM(partData,points.getPointsArray(),polygonM.getmArray());output.addRecord(polym);break;}if (cancelOp) {cancelOperation();return;}progress=(int)(featureNum * 100.0 / numFeatures);updateProgress(progress);}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Rectangle(int x,int y,Dimension size){  this.x=x;  this.y=y;  this.size=size;}  }
class C{  public static void analyzeTable(Session session,Table table,int sample,boolean manual){  if (!(table.getTableType().equals(Table.TABLE)) || table.isHidden() || session == null) {    return;  }  if (!manual) {    if (session.getDatabase().isSysTableLocked()) {      return;    }    if (table.hasSelectTrigger()) {      return;    }  }  if (table.isTemporary() && !table.isGlobalTemporary() && session.findLocalTempTable(table.getName()) == null) {    return;  }  if (table.isLockedExclusively() && !table.isLockedExclusivelyBy(session)) {    return;  }  if (!session.getUser().hasRight(table,Right.SELECT)) {    return;  }  if (session.getCancel() != 0) {    return;  }  Column[] columns=table.getColumns();  if (columns.length == 0) {    return;  }  Database db=session.getDatabase();  StatementBuilder buff=new StatementBuilder("SELECT ");  for (  Column col : columns) {    buff.appendExceptFirst(", ");    int type=col.getType();    if (type == Value.BLOB || type == Value.CLOB) {      buff.append("MAX(NULL)");    } else {      buff.append("SELECTIVITY(").append(col.getSQL()).append(')');    }  }  buff.append(" FROM ").append(table.getSQL());  if (sample > 0) {    buff.append(" LIMIT ? SAMPLE_SIZE ? ");  }  String sql=buff.toString();  Prepared command=session.prepare(sql);  if (sample > 0) {    ArrayList<Parameter> params=command.getParameters();    params.get(0).setValue(ValueInt.get(1));    params.get(1).setValue(ValueInt.get(sample));  }  ResultInterface result=command.query(0);  result.next();  for (int j=0; j < columns.length; j++) {    Value v=result.currentRow()[j];    if (v != ValueNull.INSTANCE) {      int selectivity=v.getInt();      columns[j].setSelectivity(selectivity);    }  }  if (manual) {    db.updateMeta(session,table);  } else {    Session sysSession=db.getSystemSession();    if (sysSession != session) {synchronized (sysSession) {synchronized (db) {          db.updateMeta(sysSession,table);          sysSession.commit(true);        }      }    }  }}  }
class C{  public StringEdit(FlagConfig flagConfig,NumberRepresentation theNumbers,VectorStore theLetters){  this.flagConfig=flagConfig;  this.numberRepresentation=theNumbers;  this.theLetters=theLetters;  Random random=new Random(Bobcat.asLong("**LENGTH**"));  lengthVector=VectorFactory.generateRandomVector(flagConfig.vectortype(),flagConfig.dimension(),flagConfig.seedlength(),random);}  }
class C{  private float smoothInput(float current,float input){  current=MathUtils.clamp(current,input - 20,input + 20);  return MathUtils.interpolate(current,input,0.9f);}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  void closedown(IOException e){  logger.log(Level.FINE,debugName + " State: TCP_CLOSED ");  m_state=PseudoTcpState.TCP_CLOSED;  if (m_notify != null) {    m_notify.onTcpClosed(this,e);  }}  }
class C{  public static String memToHexBytes(Memory mem,String comment){  StringBuilder sb=new StringBuilder();  if ((comment != null) && !comment.isEmpty()) {    sb.append(comment).append(LS);  }  int bytes=(int)mem.getCapacity();  int longs=bytes >>> 3;  int remBytes=bytes % 8;  boolean hasRem=(remBytes > 0);  int i;  for (i=0; i < longs; i++) {    long v=mem.getLong(i << 3);    sb.append(i).append(TAB).append(longToHexBytes(v)).append(LS);  }  if (hasRem) {    int longBytes=longs << 3;    long long0=0;    for (int b=0; b < remBytes; b++) {      int byteVal=mem.getByte(longBytes + b);      long0=insertByte(byteVal,b,long0);    }    sb.append(i).append(TAB).append(longToHexBytes(long0)).append(LS);  }  return sb.toString();}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setSize(474,251);  this.setName(Constant.messages.getString("params.panel.title"));  this.setIcon(new ImageIcon(ParamsPanel.class.getResource("/resource/icon/16/179.png")));  this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK,false));  this.setMnemonic(Constant.messages.getChar("params.panel.mnemonic"));  this.add(getPanelCommand(),getPanelCommand().getName());}  }
class C{  public GridNode(String id){  this.id=id;}  }
class C{  boolean beamsOverlap(int direction,Rect rect1,Rect rect2){switch (direction) {case View.FOCUS_LEFT:case View.FOCUS_RIGHT:    return (rect2.bottom >= rect1.top) && (rect2.top <= rect1.bottom);case View.FOCUS_UP:case View.FOCUS_DOWN:  return (rect2.right >= rect1.left) && (rect2.left <= rect1.right);}throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");}  }
class C{  public FLV(File file,boolean generateMetadata){  this.file=file;  this.generateMetadata=generateMetadata;  int count=0;  if (!generateMetadata) {    try {      FLVReader reader=new FLVReader(this.file);      ITag tag=null;      while (reader.hasMoreTags() && (++count < 5)) {        tag=reader.readTag();        if (tag.getDataType() == IoConstants.TYPE_METADATA) {          if (metaService == null) {            metaService=new MetaService(this.file);          }          metaData=metaService.readMetaData(tag.getBody());        }      }      reader.close();    } catch (    Exception e) {      log.error("An error occured looking for metadata {}",e);    }  }}  }
class C{  public RectangularPrism(float width,float height,float depth,boolean hasCubemapTexture,boolean createTextureCoordinates,boolean createVertexColorBuffer,boolean createVBOs){  super();  mWidth=width;  mHeight=height;  mDepth=depth;  mHasCubemapTexture=hasCubemapTexture;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  init(createVBOs);}  }
class C{  public static java.awt.Rectangle toAwtRectangle(final Rectangle rect){  final java.awt.Rectangle rect2d=new java.awt.Rectangle();  rect2d.setRect(rect.x,rect.y,rect.width,rect.height);  return rect2d;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"TITLE\" TEXT NOT NULL ,"+ "\"DESCRIPTION\" TEXT NOT NULL ,"+ "\"IMAGE\" TEXT NOT NULL );");}  }
class C{  protected void performBoosting() throws Exception {  double[][] trainYs=getYs(m_train);  double[][] trainFs=getFs(m_numericData);  double[][] probs=getProbs(trainFs);  int iteration=0;  double[] trainErrors=new double[m_maxIterations + 1];  trainErrors[0]=getErrorRate(m_train);  int noMin=0;  double lastMin=Double.MAX_VALUE;  while (iteration < m_maxIterations) {    boolean foundAttribute=performIteration(iteration,trainYs,trainFs,probs,m_numericData);    if (foundAttribute) {      iteration++;      m_numRegressions=iteration;    } else {      break;    }    trainErrors[iteration]=getErrorRate(m_train);    if (noMin > m_heuristicStop) {      break;    }    if (trainErrors[iteration] < lastMin) {      lastMin=trainErrors[iteration];      noMin=0;    } else {      noMin++;    }  }  int bestIteration=getBestIteration(trainErrors,iteration);  m_numRegressions=0;  m_regressions=initRegressions();  performBoosting(bestIteration);}  }
class C{  public boolean fireMapMouseReleased(MouseEvent evt){  if (DEBUG) {    logger.fine("MapMouseSupport: fireMapMouseReleased");  }  boolean consumed=false;  evt=new MapMouseEvent(getParentMode(),evt);  if (priorityListener != null) {    priorityListener.mouseReleased(evt);    if (!clickHappened) {      priorityListener=null;    }    consumed=true;  }  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_RELEASED) > 0) {    Iterator<MapMouseListener> it=iterator();    while (it.hasNext() && !consumed) {      consumed=it.next().mouseReleased(evt) && consumeEvents;    }  }  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_RELEASED) == 0));  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {    proxy.mouseReleased(evt);    consumed=true;  }  return consumed;}  }
class C{  private void decodeTonesEnvelope(int chNum,boolean bandHasTones[]){  WavesData dst[]=ctx.channels[chNum].tonesInfo;  WavesData ref[]=ctx.channels[0].tonesInfo;  if (chNum == 0 || !br.readBool()) {    for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {      if (!bandHasTones[sb]) {        continue;      }      dst[sb].pendEnv.hasStartPoint=br.readBool();      dst[sb].pendEnv.startPos=(dst[sb].pendEnv.hasStartPoint ? br.read(5) : -1);      dst[sb].pendEnv.hasStopPoint=br.readBool();      dst[sb].pendEnv.stopPos=(dst[sb].pendEnv.hasStopPoint ? br.read(5) : 32);    }  } else {    for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {      if (!bandHasTones[sb]) {        continue;      }      dst[sb].pendEnv.copy(ref[sb].pendEnv);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void applyChoice(){  super.applyChoice();  setShotsLeft(Math.round((getShotsLeft() * m_origShotsLeft) / m_origAmmo.getShots()));  if (chDump.isSelected()) {    setShotsLeft(0);  }}  }
class C{  public boolean contains(Object element){  return objects.contains(element);}  }
class C{  public int[] unCompress(byte[] compInput){  try {    return Snappy.uncompressIntArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.462 -0500",hash_original_method="1E8C38EACEA1E94FE658824D01FD2A18",hash_generated_method="278A7E53643DE73F8A80E1A85A107DD5") public void release(){}  }
class C{  public void start(MediaRouter androidMediaRouter,Context applicationContext,Cast.Listener castApplicationListener){  assert androidMediaRouter != null;  assert applicationContext != null;  assert castApplicationListener != null;  if (mState != STATE_IDLE)   throwInvalidState();  if (mMediaSource == null) {    reportError(String.format(ERROR_NEW_ROUTE_INVALID_SOURCE_URN,mSourceUrn));    return;  }  mRoute=null;  for (  MediaRouter.RouteInfo route : androidMediaRouter.getRoutes()) {    MediaSink routeSink=MediaSink.fromRoute(route);    if (routeSink.getId().equals(mSinkId)) {      mRoute=route;      break;    }  }  if (mRoute == null) {    reportError(String.format(ERROR_NEW_ROUTE_INVALID_SINK_URN,mSinkId));    return;  }  mApiClient=createApiClient(mRoute,castApplicationListener,applicationContext);  mApiClient.connect();  mState=STATE_CONNECTING_TO_API;}  }
class C{  public static void translationX(View v,float fromX,float toX,int duration,Animator.AnimatorListener animatorListener){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.TRANSLATION_X,fromX,toX);  animator.setDuration(duration);  if (animatorListener != null) {    animator.addListener(animatorListener);  }  animator.start();}  }
class C{  @Deprecated public boolean isShowHiddenFiles(){  return hiddenFilesAreShown;}  }
class C{  protected final String format(double totalMillis,String event,double lastMillis,String reason){  return String.format("[%7sms]%s %-6s %s - [%6sms] %s",String.format("%.3f",totalMillis),MainThread.isMainThread() ? "[ui]" : "",event + ":",mName,String.format("%.3f",lastMillis),reason);}  }
class C{  public static void assertEquals(String message,double expected,double actual){  assertEqualsWithinUlps(message,expected,actual,10);}  }
class C{  public void endElement(String uri,String lname,String qname) throws org.xml.sax.SAXException {  if (uri == null) {    String msg=Logging.getMessage("nullValue.URIIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (lname == null) {    String msg=Logging.getMessage("nullValue.LNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (qname == null) {    String msg=Logging.getMessage("nullValue.QNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.currentElement != null) {    this.currentElement.endElement(uri,lname,qname);    if (lname.equalsIgnoreCase(this.currentElement.elementName))     this.currentElement=null;  }  this.doEndElement(uri,lname,qname);  this.currentCharacters=null;}  }
class C{  private void registerRoute(final String requestUrl,final String target,String[] methods,Map<String,String> staticHeaders){  String body="{ \"destination\":\"" + target + "\"";  String m=null;  if (methods != null) {    for (    String method : methods) {      m+="\"" + method + "\", ";    }    m=m.endsWith(", ") ? m.substring(0,m.lastIndexOf(",")) : m;    m="\"methods\": [" + m + "]";  }  if (staticHeaders != null && staticHeaders.size() > 0) {    body=body + ", \"staticHeaders\" : {";    boolean notFirst=false;    for (    Map.Entry<String,String> entry : staticHeaders.entrySet()) {      body=body + (notFirst ? ", " : "") + "\""+ entry.getKey()+ "\" : \""+ entry.getValue()+ "\"";      if (!notFirst) {        notFirst=true;      }    }    body=body + "}";  }  body=body + "}";  with().body(body).put(requestUrl).then().assertThat().statusCode(200);}  }
class C{  public synchronized Set<K> keySet(){  HashSet<K> set=new HashSet<K>();  for (  Segment<K,V> s : segments) {    set.addAll(s.keySet());  }  return set;}  }
class C{  protected void onInitTypeWithFailReason(FailReason failReason){}  }
class C{  protected long processInStreamOutLong(int type,BinaryRawReaderEx reader) throws IgniteCheckedException {  return throwUnsupported(type);}  }
class C{  public ReadOnlyKeysRaba(final byte[][] a){  this(0,a.length,a.length,a);}  }
class C{  protected void sequence_NamedImportSpecifier(ISerializationContext context,NamedImportSpecifier semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.919 -0500",hash_original_method="F27ED260A28BC4E6AB9113A5229AE82E",hash_generated_method="E395A3E2468207D799D865AD71404D75") public SIPRequest createACKRequest(){  RequestLine requestLine=(RequestLine)this.requestLine.clone();  requestLine.setMethod(Request.ACK);  return this.createSIPRequest(requestLine,false);}  }
class C{  public StatePair(int s1,int s2){  this.s1=s1;  this.s2=s2;  this.s=-1;}  }
class C{  private static void createPerson(final int i){  final TableItem tbli=new TableItem(tblDyn,SWT.NONE);  tbli.setText(0,Integer.toString(idCount++));  tbli.setText(1,firstNameSet[i]);  tbli.setText(2,lastNameSet[i]);  tbli.setText(3,birthDateSet[i]);}  }
class C{  public boolean isUseOutOfBagImportance(){  return useOutOfBagImportance;}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  public static Failure parseSASLFailure(XmlPullParser parser) throws Exception {  String condition=null;  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (!parser.getName().equals("failure")) {        condition=parser.getName();      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("failure")) {        done=true;      }    }  }  return new Failure(condition);}  }
class C{  private static int byteCompaction(int mode,int[] codewords,int codeIndex,StringBuilder result){  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    char[] decodedData=new char[6];    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedData[5 - j]=(char)(value % 256);            value>>=8;          }          result.append(decodedData);          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      result.append((char)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        char[] decodedData=new char[6];        for (int j=0; j < 6; ++j) {          decodedData[5 - j]=(char)(value & 0xFF);          value>>=8;        }        result.append(decodedData);        count=0;      }    }  }  return codeIndex;}  }
class C{  protected KerningPair(RandomAccessFile raf) throws IOException {  left=raf.readUnsignedShort();  right=raf.readUnsignedShort();  value=raf.readShort();}  }
class C{  public NioSocketSession(IoService service,IoProcessor<NioSession> processor,SocketChannel channel){  super(processor,service,channel);  config=new SessionConfigImpl();  this.config.setAll(service.getSessionConfig());}  }
class C{  public static byte[] decode(String s){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    decode(s,bos);  } catch (  IOException e) {    throw new RuntimeException();  }  byte[] decodedBytes=bos.toByteArray();  try {    bos.close();    bos=null;  } catch (  IOException ex) {    System.err.println("Error while decoding BASE64: " + ex.toString());  }  return decodedBytes;}  }
class C{  protected int AdditiveExpr(int addPos) throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (-1 == addPos)   addPos=opPos;  MultiplicativeExpr(-1);  if (null != m_token) {    if (tokenIs('+')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_PLUS);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=AdditiveExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs('-')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MINUS);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=AdditiveExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    }  }  return addPos;}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  if (this.targetLabel != null) {    if (this.statement != null) {      this.statement.generateCode(currentScope);    }  }}  }
class C{  private void printArguments(List<Expression> args,Object arg){  printer.print("(");  if (args != null) {    for (Iterator<Expression> i=args.iterator(); i.hasNext(); ) {      Expression e=i.next();      e.accept(this,arg);      if (i.hasNext()) {        printer.print(", ");      }    }  }  printer.print(")");}  }
class C{  public synchronized boolean deliver(Job job,Response response){  if (!response.getRequest().getRequest().getConnection().isOpen()) {    LOG.debug("Consumer connection was closed. It will be removed.");    return false;  }  List<GenericClusterRequest> tasks=new ArrayList<>();  while (tasks.size() < MAX_TASKS_PER_WORKER && !job.tasksAwaitingDelivery.isEmpty()) {    tasks.add(job.tasksAwaitingDelivery.poll());  }  try {    response.setStatus(HttpStatus.OK_200);    OutputStream out=response.getOutputStream();    mapper.writeValue(out,tasks);    response.resume();  } catch (  IOException e) {    LOG.debug("Consumer connection caused IO error, it will be removed.");    response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR_500);    response.resume();    job.tasksAwaitingDelivery.addAll(tasks);    return false;  }  LOG.debug("Delivery of {} tasks succeeded.",tasks.size());  job.lastDeliveryTime=System.currentTimeMillis();  return true;}  }
class C{  public static <T>LazySortedSetX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  protected void increment(){  indentation++;}  }
class C{  public OneKDC(String etype) throws Exception {  super(REALM,KDCHOST,0,true);  addPrincipal(USER,PASS);  addPrincipal(USER2,PASS2);  addPrincipalRandKey("krbtgt/" + REALM);  addPrincipalRandKey(SERVER);  addPrincipalRandKey(BACKEND);  String extraConfig="";  if (etype != null) {    extraConfig+="default_tkt_enctypes=" + etype + "\ndefault_tgs_enctypes="+ etype;    if (etype.startsWith("des")) {      extraConfig+="\nallow_weak_crypto = true";    }  }  KDC.saveConfig(KRB5_CONF,this,"forwardable = true","default_keytab_name = " + KTAB,extraConfig);  System.setProperty("java.security.krb5.conf",KRB5_CONF);  Config.refresh();  writeKtab(KTAB);  Security.setProperty("auth.login.defaultCallbackHandler","OneKDC$CallbackForClient");}  }
class C{  protected String[][] format(AbstractMatrix2D matrix){  return this.format((ObjectMatrix2D)matrix);}  }
class C{  public ArrayList<S2CellId> cellIds(){  return cellIds;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean shouldConsume(int keyCode){  return (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT || keyCode == KeyEvent.KEYCODE_DPAD_UP || keyCode == KeyEvent.KEYCODE_DPAD_DOWN || keyCode == KeyEvent.KEYCODE_MOVE_HOME || keyCode == KeyEvent.KEYCODE_MOVE_END || keyCode == KeyEvent.KEYCODE_PAGE_UP || keyCode == KeyEvent.KEYCODE_PAGE_DOWN || keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL);}  }
class C{  protected AbstractRable(Filter src){  init(src,null);}  }
class C{  public OutSegment(TableKelp table,PageServiceSync tableService,TableWriterServiceImpl readWrite,SegmentKelp segment){  Objects.requireNonNull(table);  Objects.requireNonNull(tableService);  Objects.requireNonNull(readWrite);  Objects.requireNonNull(segment);  _table=table;  _readWrite=readWrite;  _segment=segment;  if (!_segment.isWriting()) {    throw new IllegalStateException(String.valueOf(_segment));  }  _indexTempBuf=TempBuffer.createLarge();  _indexBuffer=_indexTempBuf.buffer();  _indexAddress=_segment.length() - BLOCK_SIZE;  fillHeader();  _compressor=readWrite.compressor();  _sOut=_readWrite.openWrite(segment.extent());}  }
class C{  @Override public void removeDataSourceListener(DataSourceListener dsl){}  }
class C{  protected void addMethods(MethodHandler handler,Method template,Method[] methods){  int i;  int n;  Method method;  boolean equal;  String name;  for (i=0; i < methods.length; i++) {    method=methods[i];    if (template.equals(method)) {      continue;    }    if (!template.getReturnType().equals(method.getReturnType())) {      continue;    }    if (template.getParameterTypes().length != method.getParameterTypes().length) {      continue;    }    equal=true;    for (n=0; n < template.getParameterTypes().length; n++) {      if (!template.getParameterTypes()[n].equals(method.getParameterTypes()[n])) {        equal=false;        break;      }    }    if (equal) {      name=method.getName();      name=name.replaceAll("read|write","");      name=name.substring(0,1).toLowerCase() + name.substring(1);      handler.add(name,method);    }  }}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  if (key != null && stream != null) {    streamParams.put(key,new StreamWrapper(stream,name,contentType));  }}  }
class C{  protected int computeTileTextureDimension(Dimension frameSize,Dimension contentSize){  int width=Math.min(frameSize.width,contentSize.width);  int height=Math.min(frameSize.height,contentSize.height);  int area=width * height;  return WWMath.powerOfTwoCeiling((int)Math.sqrt(area) + this.textureTileDimension);}  }
class C{  public String[] match(String text){  List<String> matches=new ArrayList<String>();  _match(text,matches);  String arr[]=new String[matches.size()];  for (int i=0; i < matches.size(); i++)   arr[i]=matches.get(i);  return arr;}  }
class C{  public static LocationInfo parse(String fullInfo){  if (fullInfo == null) {    return null;  }  fullInfo=removeLambdas(fullInfo);  fullInfo=fullInfo.trim();  fullInfo=StringUtils.removeStart(fullInfo,"at ");  int lastClosingBrace=fullInfo.indexOf(')');  int lastColon=fullInfo.lastIndexOf(':',lastClosingBrace);  int lastOpeningBrace=fullInfo.lastIndexOf('(',lastColon);  if (lastOpeningBrace == -1 || lastClosingBrace == -1 || lastColon == -1) {    return null;  }  String packageName;  String className;  String methodName;  String fileName;  Optional<Integer> lineNumber;  final String lineNumberString=fullInfo.substring(lastColon + 1,lastClosingBrace);  lineNumber=Optional.of(Integer.parseInt(lineNumberString));  fileName=fullInfo.substring(lastOpeningBrace + 1,lastColon);  fullInfo=fullInfo.substring(0,lastOpeningBrace);  int lastDot=fullInfo.lastIndexOf('.');  if (lastDot == -1) {    return null;  } else {    methodName=fullInfo.substring(lastDot + 1);    className=fullInfo.substring(0,lastDot);    lastDot=className.lastIndexOf(".");    if (lastDot == -1) {      packageName="";    } else {      packageName=className.substring(0,lastDot);    }  }  return new LocationInfo(Optional.of(packageName),Optional.of(className),Optional.of(methodName),Optional.of(fileName),lineNumber,Optional.empty());}  }
class C{  @Override public void changeCursor(Cursor cursor){  super.changeCursor(cursor);  resetMappings();}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method,false);}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  extProfile.declareArbitraryXmlExtension(GoogleBaseEntry.class);  GoogleBaseNamespaces.declareAllExtensions(extProfile);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void paintComponent(Graphics g,Component c,Container p,int x,int y,int w,int h,boolean shouldValidate){  if (c == null) {    if (p != null) {      Color oldColor=g.getColor();      g.setColor(p.getBackground());      g.fillRect(x,y,w,h);      g.setColor(oldColor);    }    return;  }  if (c.getParent() != this) {    this.add(c);  }  c.setBounds(x,y,w,h);  if (shouldValidate) {    c.validate();  }  boolean wasDoubleBuffered=false;  if ((c instanceof JComponent) && ((JComponent)c).isDoubleBuffered()) {    wasDoubleBuffered=true;    ((JComponent)c).setDoubleBuffered(false);  }  Graphics cg=g.create(x,y,w,h);  try {    c.paint(cg);  }  finally {    cg.dispose();  }  if (wasDoubleBuffered && (c instanceof JComponent)) {    ((JComponent)c).setDoubleBuffered(true);  }  c.setBounds(-w,-h,0,0);}  }
class C{  public void addEdge(final Edge edge){  if (edge == null)   throw new RuntimeException("Attempted to add a null Edge.");  if (edge.owner != null)   throw new RuntimeException("Attempted to add an Edge already added elsewhere");  edge.owner=this;  edge.indexFrom=0;  edge.indexTo=0;  IndexOutIn outNode=(IndexOutIn)(indexOutInHash.get(edge.from));  if (outNode == null) {    addNode(edge.from);    outNode=(IndexOutIn)(indexOutInHash.get(edge.from));  }  if (outNode.out == null) {    if (directed)     outNode.out=new Bag(); else {      if (outNode.in != null)       outNode.out=outNode.in; else       outNode.out=outNode.in=new Bag();    }  }  outNode.out.add(edge);  edge.indexFrom=outNode.out.numObjs - 1;  IndexOutIn inNode=(IndexOutIn)(indexOutInHash.get(edge.to));  if (inNode == null) {    addNode(edge.to);    inNode=(IndexOutIn)(indexOutInHash.get(edge.to));  }  if (inNode.in == null) {    if (directed)     inNode.in=new Bag(); else {      if (inNode.out != null)       inNode.in=inNode.out; else       inNode.in=inNode.out=new Bag();    }  }  inNode.in.add(edge);  edge.indexTo=inNode.in.numObjs - 1;}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  public ContinuousAudioDataStream(AudioData data){  super(data);}  }
class C{  public SparqlDynamicErrorException(){  this(0,SPARQL_DYNAMIC_ERROR_0000);}  }
class C{  public LoopedSoundSource(){  setRPClass(RPCLASS_NAME);  put("type",RPCLASS_NAME);}  }
class C{  public int onPasv(){  return localDataSocket.onPasv();}  }
class C{  public void clearConnParams(){  _host=null;  _userName=null;  _password=null;}  }
class C{  private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  public void testDoCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test.html");  mockTestSolutionHandler.addTestSolution(TestSolution.NEED_MORE_INFO);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("html"));  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.NEED_MORE_INFO,element,DETECTION_MSG);  expectLastCall().once();  TextEndsWithChecker instance=new TextEndsWithChecker(mockTextElementBuilder,EXTENSION_NOM_NAME,TestSolution.NEED_MORE_INFO,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);}  }
class C{  @Override public Color match(PropertyElement element){  return getColor(ColorPreferencesIds.COLOR_PROPERTY);}  }
class C{  public void missingElement(String systemID,int lineNr,String parentElementName,String missingElementName) throws XMLValidationException {  XMLUtil.errorMissingElement(systemID,lineNr,parentElementName,missingElementName);}  }
class C{  @SuppressWarnings("unchecked") public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,Executor executor,int size,SelectorProvider selectorProvider){  if (processorType == null) {    throw new IllegalArgumentException("processorType");  }  if (size <= 0) {    throw new IllegalArgumentException("size: " + size + " (expected: positive integer)");  }  createdExecutor=(executor == null);  if (createdExecutor) {    this.executor=Executors.newCachedThreadPool();    ((ThreadPoolExecutor)this.executor).setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());  } else {    this.executor=executor;  }  pool=new IoProcessor[size];  boolean success=false;  Constructor<? extends IoProcessor<S>> processorConstructor=null;  boolean usesExecutorArg=true;  try {    try {      try {        processorConstructor=processorType.getConstructor(ExecutorService.class);        pool[0]=processorConstructor.newInstance(this.executor);      } catch (      NoSuchMethodException e1) {        try {          if (selectorProvider == null) {            processorConstructor=processorType.getConstructor(Executor.class);            pool[0]=processorConstructor.newInstance(this.executor);          } else {            processorConstructor=processorType.getConstructor(Executor.class,SelectorProvider.class);            pool[0]=processorConstructor.newInstance(this.executor,selectorProvider);          }        } catch (        NoSuchMethodException e2) {          try {            processorConstructor=processorType.getConstructor();            usesExecutorArg=false;            pool[0]=processorConstructor.newInstance();          } catch (          NoSuchMethodException e3) {          }        }      }    } catch (    RuntimeException re) {      LOGGER.error("Cannot create an IoProcessor :{}",re.getMessage());      throw re;    }catch (    Exception e) {      String msg="Failed to create a new instance of " + processorType.getName() + ":"+ e.getMessage();      LOGGER.error(msg,e);      throw new RuntimeIoException(msg,e);    }    if (processorConstructor == null) {      String msg=String.valueOf(processorType) + " must have a public constructor with one " + ExecutorService.class.getSimpleName()+ " parameter, a public constructor with one "+ Executor.class.getSimpleName()+ " parameter or a public default constructor.";      LOGGER.error(msg);      throw new IllegalArgumentException(msg);    }    for (int i=1; i < pool.length; i++) {      try {        if (usesExecutorArg) {          if (selectorProvider == null) {            pool[i]=processorConstructor.newInstance(this.executor);          } else {            pool[i]=processorConstructor.newInstance(this.executor,selectorProvider);          }        } else {          pool[i]=processorConstructor.newInstance();        }      } catch (      Exception e) {      }    }    success=true;  }  finally {    if (!success) {      dispose();    }  }}  }
class C{  public void push(E e){  Node<E> n=newNode();  n.item=e;  n.next=null;  while (true) {    Node<E> t=tail;    Node<E> s=t.next;    if (t == tail) {      if (s == null) {        if (t.casNext(s,n)) {          casTail(t,n);          return;        }      } else {        casTail(t,s);      }    }  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("EMailServlet.init");}  }
class C{  @Deprecated public boolean isHandled(){  return fHandled;}  }
class C{  public int available() throws IOException {  SmbNamedPipe pipe;  TransPeekNamedPipe req;  TransPeekNamedPipeResponse resp;  if (file.type != SmbFile.TYPE_NAMED_PIPE) {    return 0;  }  try {    pipe=(SmbNamedPipe)file;    file.open(SmbFile.O_EXCL,pipe.pipeType & 0xFF0000,SmbFile.ATTR_NORMAL,0);    req=new TransPeekNamedPipe(file.unc,file.fid);    resp=new TransPeekNamedPipeResponse(pipe);    pipe.send(req,resp);    if (resp.status == TransPeekNamedPipeResponse.STATUS_DISCONNECTED || resp.status == TransPeekNamedPipeResponse.STATUS_SERVER_END_CLOSED) {      file.opened=false;      return 0;    }    return resp.available;  } catch (  SmbException se) {    throw seToIoe(se);  }}  }
class C{  public static final int[] resize(int[] a,int size){  if (a.length >= size)   return a;  int[] b=new int[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  public SearchSourceBuilder size(int size){  this.size=size;  return this;}  }
class C{  public final boolean isSuperAccessMethod(){  return superAccessMethod;}  }
class C{  protected void serializeDocType(DocumentType node,boolean bStart) throws SAXException {  String docTypeName=node.getNodeName();  String publicId=node.getPublicId();  String systemId=node.getSystemId();  String internalSubset=node.getInternalSubset();  if (internalSubset != null && !"".equals(internalSubset)) {    if (bStart) {      try {        Writer writer=fSerializer.getWriter();        StringBuffer dtd=new StringBuffer();        dtd.append("<!DOCTYPE ");        dtd.append(docTypeName);        if (null != publicId) {          dtd.append(" PUBLIC \"");          dtd.append(publicId);          dtd.append('\"');        }        if (null != systemId) {          if (null == publicId) {            dtd.append(" SYSTEM \"");          } else {            dtd.append(" \"");          }          dtd.append(systemId);          dtd.append('\"');        }        dtd.append(" [ ");        dtd.append(fNewLine);        dtd.append(internalSubset);        dtd.append("]>");        dtd.append(new String(fNewLine));        writer.write(dtd.toString());        writer.flush();      } catch (      IOException e) {        throw new SAXException(Utils.messages.createMessage(MsgKey.ER_WRITING_INTERNAL_SUBSET,null),e);      }    }  } else {    if (bStart) {      if (fLexicalHandler != null) {        fLexicalHandler.startDTD(docTypeName,publicId,systemId);      }    } else {      if (fLexicalHandler != null) {        fLexicalHandler.endDTD();      }    }  }}  }
class C{  private void checkParamIndex(int idx) throws SQLException {  if ((idx < 1)) {    throw new SQLException("Invalid Parameter Index");  }}  }
class C{  private boolean isLive(long index,Segment segment,OffsetPredicate predicate){  long offset=segment.offset(index);  return offset != -1 && predicate.test(offset);}  }
class C{  protected void updateDynamicAccounts() throws ConfigurationException {  setDynamicAccounts(computeDynamicAccounts());}  }
class C{  public void addModel(String file,Class modelFormat){  ModelPoolEntry entry=ModelPool.addFile(file,modelFormat,transformGroup,textureGroup);  if (entry == null)   return;  PositionTextureVertex[] verts=Arrays.copyOf(entry.vertices,entry.vertices.length);  TexturedPolygon[] poly=Arrays.copyOf(entry.faces,entry.faces.length);  if (flip) {    for (    TexturedPolygon face : faces) {      face.flipFace();    }  }  copyTo(verts,poly,false);}  }
class C{  @Command(description="Lists all certs on all keys on all tokens") public void listCerts() throws Exception {  List<TokenInfo> tokens=SignerClient.execute(new ListTokens());  tokens.forEach(null);}  }
class C{  private static RunQueryResponse makeLatestTimestampResponse(long timestamp){  RunQueryResponse.Builder timestampResponse=RunQueryResponse.newBuilder();  Entity.Builder entity=Entity.newBuilder();  entity.setKey(makeKey("dummyKind","dummyId"));  entity.getMutableProperties().put("timestamp",makeValue(new Date(timestamp * 1000)).build());  EntityResult.Builder entityResult=EntityResult.newBuilder();  entityResult.setEntity(entity);  QueryResultBatch.Builder batch=QueryResultBatch.newBuilder();  batch.addEntityResults(entityResult);  timestampResponse.setBatch(batch);  return timestampResponse.build();}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Quick3way.sort(a);  show(a);}  }
class C{  public boolean isVisible(){  return m_visible;}  }
class C{  public void testDefaultInstallerElement() throws Exception {  this.mojo.setContainerElement(new Container());  this.mojo.getContainerElement().setContainerId("tomcat6x");  assertNull("Container installer already set",this.mojo.getContainerElement().getZipUrlInstaller());  try {    this.mojo.doExecute();  } catch (  ContainerException e) {    assertTrue("Exception message [" + e.getMessage() + "] doesn't contain tomcat6x",e.getMessage().contains("tomcat6x"));  }  assertNotNull("Container installer not set",this.mojo.getContainerElement().getZipUrlInstaller());  assertNotNull("Container installer URL not set",this.mojo.getContainerElement().getZipUrlInstaller().getUrl());}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    cancelAllAnimations();  }  if (event.getPointerCount() > 1) {    mMidPntX=(event.getX(0) + event.getX(1)) / 2;    mMidPntY=(event.getY(0) + event.getY(1)) / 2;  }  mGestureDetector.onTouchEvent(event);  if (mIsScaleEnabled) {    mScaleDetector.onTouchEvent(event);  }  if (mIsRotateEnabled) {    mRotateDetector.onTouchEvent(event);  }  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {    setImageToWrapCropBounds();  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.635 -0500",hash_original_method="9F181DA813C5E35277B72423F9B4689F",hash_generated_method="E55E6F09FFD1A2C94BDE35A848616422") protected void needAppData() throws IOException {  if (!handshake_started) {    startHandshake();  }  int type;  if (logger != null) {    logger.println("SSLSocket.needAppData..");  }  try {    while (appDataIS.available() == 0) {switch (type=recordProtocol.unwrap()) {case ContentType.HANDSHAKE:        if (!handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING)) {          doHandshake();        }      break;case ContentType.ALERT:    processAlert();  if (socket_was_closed) {    return;  }break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("SSLSocket.needAppData: got the data");}break;default :reportFatalAlert(AlertProtocol.UNEXPECTED_MESSAGE,new SSLException("Unexpected message of type " + type + " has been got"));}if (alertProtocol.hasAlert()) {output.write(alertProtocol.wrap());alertProtocol.setProcessed();}if (socket_was_closed) {appDataIS.setEnd();return;}}} catch (AlertException e) {reportFatalAlert(e.getDescriptionCode(),e.getReason());}catch (EndOfSourceException e) {appDataIS.setEnd();}if (logger != null) {logger.println("SSLSocket.needAppData: app data len: " + appDataIS.available());}}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (status == JobStatus.IN_PROGRESS) {      return;    }    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,getStorageSystemURI());    CinderApi cinderApi=jobContext.getCinderApiFactory().getApi(storageSystem.getActiveProviderURI(),getEndPointInfo());    List<Volume> volumes=new ArrayList<Volume>();    Set<URI> poolURIs=new HashSet<URI>();    long deletedVolumesTotCapacity=0L;    for (    URI id : getTaskCompleter().getIds()) {      Volume volume=dbClient.queryObject(Volume.class,id);      volumes.add(volume);      poolURIs.add(volume.getPool());      deletedVolumesTotCapacity+=volume.getCapacity();    }    if (status == JobStatus.SUCCESS) {      for (      URI poolURI : poolURIs) {        StoragePool storagePool=dbClient.queryObject(StoragePool.class,poolURI);        CinderUtils.updateStoragePoolCapacity(dbClient,cinderApi,storagePool,String.valueOf(deletedVolumesTotCapacity / CinderConstants.BYTES_TO_GB),true);      }    }    StringBuilder logMsgBuilder=new StringBuilder();    if (status == JobStatus.SUCCESS) {      for (      Volume volume : volumes) {        volume.setInactive(true);        dbClient.persistObject(volume);        dbClient.ready(Volume.class,volume.getId(),getTaskCompleter().getOpId());        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Successfully deleted volume %s",volume.getId()));      }    } else     if (status == JobStatus.FAILED) {      for (      URI id : getTaskCompleter().getIds()) {        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Failed to delete volume: %s",id));      }    }    if (logMsgBuilder.length() > 0) {      logger.info(logMsgBuilder.toString());    }  } catch (  Exception e) {    setErrorStatus("Encountered an internal error during delete volume job status processing: " + e.getMessage());    logger.error("Caught exception while handling updateStatus for delete volume job.",e);  } finally {    super.updateStatus(jobContext);  }}  }
class C{  private void cancel(){  connection.removeConnectionListener(this);  connection.removePacketListener(listener);}  }
class C{  public long delete(String id){  final RepositoryDocumentImpl doc=(RepositoryDocumentImpl)read(id);  if (!doc.exists()) {    log.warn("No current version: id=" + id);    return 0L;  }  final int version=doc.getVersion();{    final Map<String,Object> metadata=new HashMap<String,Object>();    metadata.put(FileMetadataSchema.ID,id);    metadata.put(FileMetadataSchema.VERSION,null);    getFileMetadataIndex().write(metadataSchema,metadata,AUTO_TIMESTAMP_UNIQUE,null,null);  }  long blockCount=0;  final IKeyBuilder keyBuilder=getFileDataIndex().getIndexMetadata().getKeyBuilder();  final byte[] fromKey=keyBuilder.reset().appendText(id,true,false).append(version).getKey();  final byte[] toKey=keyBuilder.reset().appendText(id,true,false).append(version + 1).getKey();  final ITupleIterator itr=getFileDataIndex().rangeIterator(fromKey,toKey,0,IRangeQuery.REMOVEALL,null);  while (itr.hasNext()) {    itr.next();    blockCount++;  }  if (INFO)   log.info("Deleted " + blockCount + " blocks : id="+ id+ ", version="+ version);  return blockCount;}  }
class C{  public boolean hasSameRules(TimeZone other){  if (this == other) {    return true;  }  if (other == null) {    return false;  }  if (!(other instanceof ZoneInfoOld)) {    if (getRawOffset() != other.getRawOffset()) {      return false;    }    if ((transitions == null) && (useDaylightTime() == false) && (other.useDaylightTime() == false)) {      return true;    }    return false;  }  if (getLastRawOffset() != ((ZoneInfoOld)other).getLastRawOffset()) {    return false;  }  return (checksum == ((ZoneInfoOld)other).checksum);}  }
class C{  public byte[] peek(boolean block) throws KeeperException, InterruptedException {  return block ? peek(Long.MAX_VALUE) : peek();}  }
class C{  public static <E extends Comparable<E>>void printListInReverse(SingleLinkedNode<E> node){  if (node == null)   return;  printListInReverse(node.next);  System.out.print(node.item + ",");}  }
class C{  @POST @Path("/enumdef") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public AtlasEnumDef createEnumDef(AtlasEnumDef enumDef) throws AtlasBaseException {  AtlasEnumDef ret=typeDefStore.createEnumDef(enumDef);  return ret;}  }
class C{  public static int size(boolean[] array){  return Array.getLength(array);}  }
class C{  public void handleEvent(Event evt){  laidoutText=null;  computeLaidoutText(ctx,e,getTextNode());}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  @Override protected void finalize() throws Throwable {  shakePosition=null;  shakeLastPosition=null;  super.finalize();}  }
class C{  private void renderImage(){  panel.clear();  if (presentation.getSVGIcon() != null) {    SVGImage image=new SVGImage(presentation.getSVGIcon());    image.getElement().setAttribute("class",toolbarResources.toolbar().iconButtonIcon());    panel.add(image);    this.image=image.getElement();  } else   if (presentation.getIcon() != null) {    Image img=new Image(presentation.getIcon());    img.setStyleName(toolbarResources.toolbar().iconButtonIcon());    panel.add(img);    this.image=img.getElement();  }}  }
class C{  public Instrumenter attachR2Collector(){  includeR2=true;  return this;}  }
class C{  public String parseApkFilePath(Element element){  return element.getText();}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction badPI;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("foo","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("invalid^Name","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  static public MutableString wrap(final char a[]){  MutableString s=new MutableString(0);  s.array=a;  s.hashLength=-1;  return s;}  }
class C{  public NodesStatsRequest threadPool(boolean threadPool){  this.threadPool=threadPool;  return this;}  }
class C{  public void createRootPathMap() throws WikiApiException {  if (rootPathMap != null) {    return;  }  File rootPathFile=new File(wiki.getWikipediaId() + "_" + this.rootPathMapFilename);  if (rootPathFile.exists()) {    logger.info("Loading saved rootPathMap ...");    rootPathMap=deserializeMap(rootPathFile);    logger.info("Done loading saved rootPathMap");    return;  }  logger.info("Computing rootPathMap");  rootPathMap=new HashMap<Integer,List<Integer>>();  List<Integer> queue=new ArrayList<Integer>();  Set<Integer> leafNodes=this.__getLeafNodes();  queue.addAll(leafNodes);  logger.info(queue.size() + " leaf nodes.");  fillRootPathMap(queue);  queue.clear();  for (  Category cat : wiki.getCategories()) {    if (!rootPathMap.containsKey(cat.getPageId())) {      queue.add(cat.getPageId());    }  }  logger.info(queue.size() + " non leaf nodes not on a shortest leaf-node to root path.");  fillRootPathMap(queue);  for (  Category cat : wiki.getCategories()) {    if (!rootPathMap.containsKey(cat.getPageId())) {      logger.info("no path for " + cat.getPageId());    }  }  this.depth=getDepthFromRootPathMap();  logger.info("Setting depth of category graph: " + this.depth);  logger.info("Serializing rootPathMap");  this.serializeMap(rootPathMap,rootPathFile);}  }
class C{  static String toUnsignedString0(long val,int shift){  int mag=Long.SIZE - Long.numberOfLeadingZeros(val);  int chars=Math.max(((mag + (shift - 1)) / shift),1);  char[] buf=new char[chars];  formatUnsignedLong(val,shift,buf,0,chars);  return new String(buf,true);}  }
class C{  public GOVMinimalPerfectHashFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new GOVMinimalPerfectHashFunction<T>(keys,transform,signatureWidth,tempDir,chunkedHashStore);}  }
class C{  public boolean newrow(String rowdata[]){  if (rowdata != null) {    if (maxrows > 0 && nrows >= maxrows) {      atmaxrows=true;      return true;    }    rows.addElement(rowdata);    nrows++;  }  return false;}  }
class C{  private void showMessage(@NotNull String message,final TextAttributes style){  if (message.length() > MAX_CONSOLE_OUTPUT_SIZE) {    message=message.substring(0,MAX_CONSOLE_OUTPUT_SIZE);  }  myVcsManager.addMessageToConsoleWindow(message,style);}  }
class C{  public static void requestClose(final Tab tab){  TabPaneBehavior behavior=getBehavior(tab);  if (behavior.canCloseTab(tab)) {    behavior.closeTab(tab);  }}  }
class C{  public final FastSet<E> intersection(Set<? extends E> other){  FastSet<E> tmp=new FastSet<E>(this);  tmp.retainAll(other);  return tmp;}  }
class C{  protected void paintMap(java.awt.Graphics2D g2){  Map envMap=getMapEnv().getMap();  for (  String l1 : envMap.getLocations()) {    Point2D pt1=envMap.getPosition(l1);    List<String> linkedLocs=envMap.getPossibleNextLocations(l1);    for (    String l2 : linkedLocs) {      Point2D pt2=envMap.getPosition(l2);      g2.setColor(Color.lightGray);      g2.drawLine(x(pt1),y(pt1),x(pt2),y(pt2));    }  }}  }
class C{  public void initialize(ModelValidationEngine engine,MClient client){  m_engine=engine;  if (client != null) {    m_AD_Client_ID=client.getAD_Client_ID();    log.info(client.toString());  } else {    log.warning("Export Model Validator cannot be used as a global validator, it needs to be defined in a per-client (tenant) basis");    return;  }}  }
class C{  public void mouseEntered(MouseEvent e){  JComponent c=(JComponent)e.getSource();  c.setCursor(cursor);}  }
class C{  public InvalidProviderAddress3(){  requestFileName="attachm.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  void logCurrentState(@Nullable ContentViewCore cvc){  if (cvc == null || !ContextualSearchFieldTrial.isEnabled()) {    return;  }  ContextualSearchUma.logPreferenceState();  int promoTapsRemaining=getPromoTapsRemaining();  if (promoTapsRemaining >= 0)   ContextualSearchUma.logPromoTapsRemaining(promoTapsRemaining);  DisableablePromoTapCounter promoTapCounter=getPromoTapCounter();  boolean wasOpened=!promoTapCounter.isEnabled();  int count=promoTapCounter.getCount();  if (wasOpened) {    ContextualSearchUma.logPromoTapsBeforeFirstOpen(count);  } else {    ContextualSearchUma.logPromoTapsForNeverOpened(count);  }}  }
class C{  public static Result restWorkflowSummariesForUser(String username){  JsonArray workflowSummaryArray=new JsonArray();  List<AppResult> results=null;  if (username == null || username.isEmpty()) {    results=getSchedulerApplications(MAX_APPLICATIONS_IN_WORKFLOW);  } else {    results=getSchedulerApplications(username,MAX_APPLICATIONS_IN_WORKFLOW);  }  Map<IdUrlPair,List<AppResult>> flowExecIdToJobsMap=ControllerUtil.limitHistoryResults(ControllerUtil.groupJobs(results,ControllerUtil.GroupBy.FLOW_EXECUTION_ID),results.size(),MAX_FLOW_LIMIT);  List<IdUrlPair> keyList=new ArrayList<IdUrlPair>(flowExecIdToJobsMap.keySet());  for (  IdUrlPair flowExecPair : keyList) {    List<AppResult> mrJobsList=Lists.reverse(flowExecIdToJobsMap.get(flowExecPair));    Map<IdUrlPair,List<AppResult>> jobDefIdToJobsMap=ControllerUtil.groupJobs(mrJobsList,ControllerUtil.GroupBy.JOB_EXECUTION_ID);    Map<Severity,Long> jobSeverityCount=new HashMap<Severity,Long>();    long totalFlowMemoryUsed=0;    long totalFlowMemoryWasted=0;    long totalFlowDelay=0;    long totalFlowRuntime=0;    Severity flowSeverity=Severity.NONE;    for (    IdUrlPair jobDefPair : jobDefIdToJobsMap.keySet()) {      Severity jobseverity=Severity.NONE;      long totalJobMemoryUsed=0;      long totalJobMemoryWasted=0;      for (      AppResult job : jobDefIdToJobsMap.get(jobDefPair)) {        totalJobMemoryUsed+=job.resourceUsed;        totalJobMemoryWasted+=job.resourceWasted;        if (job.severity.getValue() > jobseverity.getValue()) {          jobseverity=job.severity;        }      }      if (jobSeverityCount.containsKey(jobseverity)) {        jobSeverityCount.put(jobseverity,jobSeverityCount.get(jobseverity) + 1);      } else {        jobSeverityCount.put(jobseverity,1L);      }      if (jobseverity.getValue() > flowSeverity.getValue()) {        flowSeverity=jobseverity;      }      totalFlowMemoryUsed+=totalJobMemoryUsed;      totalFlowMemoryWasted+=totalJobMemoryWasted;    }    totalFlowDelay=Utils.getTotalWaittime(flowExecIdToJobsMap.get(flowExecPair));    totalFlowRuntime=Utils.getTotalRuntime(flowExecIdToJobsMap.get(flowExecPair));    JsonArray jobSeverity=new JsonArray();    for (    Map.Entry<Severity,Long> entry : jobSeverityCount.entrySet()) {      JsonObject severityObject=new JsonObject();      severityObject.addProperty(JsonKeys.SEVERITY,entry.getKey().getText());      severityObject.addProperty(JsonKeys.COUNT,entry.getValue());      jobSeverity.add(severityObject);    }    JsonObject dataset=new JsonObject();    dataset.addProperty(JsonKeys.ID,mrJobsList.get(0).flowExecId);    dataset.addProperty(JsonKeys.USERNAME,mrJobsList.get(0).username);    dataset.addProperty(JsonKeys.START_TIME,mrJobsList.get(0).startTime);    dataset.addProperty(JsonKeys.FINISH_TIME,mrJobsList.get(mrJobsList.size() - 1).finishTime);    dataset.addProperty(JsonKeys.RUNTIME,totalFlowRuntime);    dataset.addProperty(JsonKeys.WAITTIME,totalFlowDelay);    dataset.addProperty(JsonKeys.RESOURCE_USED,totalFlowMemoryUsed);    dataset.addProperty(JsonKeys.RESOURCE_WASTED,totalFlowMemoryWasted);    dataset.addProperty(JsonKeys.QUEUE,mrJobsList.get(0).queueName);    dataset.addProperty(JsonKeys.SEVERITY,flowSeverity.getText());    dataset.add(JsonKeys.JOBS_SEVERITY,jobSeverity);    workflowSummaryArray.add(dataset);  }  JsonArray sortedWorkflowSummaryArray=getSortedJsonArrayByFinishTime(workflowSummaryArray);  JsonObject parent=new JsonObject();  parent.add(JsonKeys.WORKFLOW_SUMMARIES,sortedWorkflowSummaryArray);  return ok(new Gson().toJson(parent));}  }
class C{  public static ValueExp div(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(DIV,value1,value2);}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuilder sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuilder();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  public void addAll(final Collection<RegisterSetLatticeElement> inputState){  Preconditions.checkNotNull(inputState,"Error: Input state argument can not be null");  final Set<String> tempNativeNewlyTaintedRegisters=Sets.newHashSet();  final Set<String> tempNativeUntaintedRegisters=Sets.newHashSet();  final Set<String> tempNativeReadRegisters=Sets.newHashSet();  final Set<String> tempNativeUpdatedRegisters=Sets.newHashSet();  for (  final RegisterSetLatticeElement element : inputState) {    tempNativeNewlyTaintedRegisters.addAll(element.m_nativeNewlyTaintedRegs);    tempNativeUntaintedRegisters.addAll(element.m_nativeUntaintedRegs);    tempNativeReadRegisters.addAll(element.m_nativeReadRegs);    tempNativeUpdatedRegisters.addAll(element.m_nativeUpdatedRegs);    m_taintedRegs.addAll(element.m_taintedRegs);    m_newlyTaintedRegs.addAll(element.m_newlyTaintedRegs);    m_untaintedRegs.addAll(element.m_untaintedRegs);    m_readRegs.addAll(element.m_readRegs);    m_updatedRegs.addAll(element.m_updatedRegs);  }  m_nativeNewlyTaintedRegs=ImmutableSet.copyOf(tempNativeNewlyTaintedRegisters);  m_nativeUntaintedRegs=ImmutableSet.copyOf(tempNativeUntaintedRegisters);  m_nativeReadRegs=ImmutableSet.copyOf(tempNativeReadRegisters);  m_nativeUpdatedRegs=ImmutableSet.copyOf(tempNativeUpdatedRegisters);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ARRAY_LIKE;}  }
class C{  public void isometricView(){  sensorMatrixNode.setVisible(true);  sensorMatrixNode.raiseToTop();  sensorMatrixNode.setOffset(0.0d,sensorMatrixNode.getHeight() * -0.1d);  if (pixelMatrixNode.hasFocus()) {    pixelMatrixNode.setFocus(false);  }  if (!selectionEventHandlerInstalled) {    selectionEventHandlerInstalled=true;    addInputEventListener(selectionEventHandler);  }  Point2D sensorCenter=sensorMatrixNode.getBounds().getCenter2D();  sensorMatrixNode.getTransformReference(true).scale(1.0d,0.573558d);  sensorMatrixNode.getTransformReference(true).rotate(Math.PI / 4.0d,sensorCenter.getX(),sensorCenter.getY());  Point2D pixelCenter=sensorMatrixNode.getBounds().getCenter2D();  pixelMatrixNode.getTransformReference(true).scale(1.0d,0.573558d);  pixelMatrixNode.getTransformReference(true).rotate(Math.PI / 4.0d,pixelCenter.getX(),pixelCenter.getY());  centerCamera();}  }
class C{  void implDigest(byte[] out,int ofs){  long bitsProcessed=bytesProcessed << 3;  int index=(int)bytesProcessed & 0x3f;  int padLen=(index < 56) ? (56 - index) : (120 - index);  engineUpdate(padding,0,padLen);  i2bLittle4((int)bitsProcessed,buffer,56);  i2bLittle4((int)(bitsProcessed >>> 32),buffer,60);  implCompress(buffer,0);  i2bLittle(state,0,out,ofs,16);}  }
class C{  public void open(String channel){  if (channel == null || channel.isEmpty()) {    JOptionPane.showMessageDialog(main,"No channel specified. Can't" + " open admin dialog.");    if (!Chatty.DEBUG) {      return;    }  }  setPutResult("");  setChannel(channel);  setVisible(true);}  }
class C{  public void enable(RichFormatterFeature feature){  features.add(feature);}  }
class C{  private void dropArchTbls(String entidad) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropArchTbls");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tableName=DaoUtil.getXNIdTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getFdrHdrTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getRelFldsTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getExtFldTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getDividerTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=tableName + "X";    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getDocumentTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=tableName + "X";    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getPageTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=tableName + "X";    DbTableFns.dropTable(dbConn,tableName);    try {      dropTxtMultTbl(dbConn);      dropIntMultTbl(dbConn);      dropDecMultTbl(dbConn);      dropDateMultTbl(dbConn);    } catch (    Exception e) {    } finally {      dbConn.close();    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node newAttribute;  Node setNode;  doc1=(Document)load("staff",true);  doc2=(Document)load("staff",true);  elementList=doc1.getElementsByTagName("address");  testAddress=elementList.item(2);  newAttribute=doc2.createAttribute("newAttribute");  attributes=testAddress.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public void readFully(byte[] bytes,int start,int len) throws IOException {  dataInput.readFully(bytes,start,len);  offset+=len;  available-=len;}  }
class C{  public static PrettyPrint singleLine(){  return new PrettyPrint(null);}  }
class C{  public boolean isCellEditable(EventObject anEvent){  return delegate.isCellEditable(anEvent);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.792 -0500",hash_original_method="A5D3F28C11D8E50179A44FB484206D0C",hash_generated_method="4D78BAE0D7C03C0346B07CB3B077254E") public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  public PrimitiveType(Class<?> runtimeClass){  assert runtimeClass.isPrimitive() : "must be initialized with primitive type, got " + runtimeClass.getName();  assert !runtimeClass.equals(void.class) : "void should be represented by VoidType";  this.runtimeClass=runtimeClass;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_2__MORE_CODE_1:    return getMoreCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SubContent(List<StructuredContent> content){  this.root=content;}  }
class C{  public static EncodedStringValue[] extract(String src){  String[] values=src.split(";");  ArrayList<EncodedStringValue> list=new ArrayList<EncodedStringValue>();  for (int i=0; i < values.length; i++) {    if (values[i].length() > 0) {      list.add(new EncodedStringValue(values[i]));    }  }  int len=list.size();  if (len > 0) {    return list.toArray(new EncodedStringValue[len]);  } else {    return null;  }}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type) throws javax.xml.transform.TransformerException {  this(exprString,locator,prefixResolver,type,null);}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void clientComboChanged(){  KeyNamePair client=(KeyNamePair)clientCombo.getSelectedItem();  if (client == null || m_comboActive)   return;  log.config(": " + client);  m_comboActive=true;  Env.setContext(m_ctx,"#AD_Client_ID",client.getKey());  KeyNamePair rolesKNPairs[]=m_login.getRoles(userTextField.getText(),new String(passwordField.getPassword()));  if (rolesKNPairs == null || rolesKNPairs.length == 0)   throw new AdempiereException("@UserPwdError@");  KeyNamePair[] orgs=m_login.getOrgs(client);  if (orgCombo.getItemCount() > 0)   orgCombo.removeAllItems();  if (orgs == null || orgs.length == 0) {    statusBar.setStatusLine(txt_RoleError,true);    m_comboActive=false;    return;  }  KeyNamePair orgValue=null;  KeyNamePair orgValue2=null;  String iniDefault=Ini.getProperty(Ini.P_ORG);  for (int i=0; i < orgs.length; i++) {    orgCombo.addItem(orgs[i]);    if (orgs[i].getName().equals(iniDefault))     orgValue=orgs[i];    if (orgValue2 == null && orgs[i].getKey() != 0)     orgValue2=orgs[i];  }  if (orgValue2 != null && orgValue != null && orgValue.getKey() == 0)   orgValue=orgValue2;  if (orgValue != null)   orgCombo.setSelectedItem(orgValue); else   orgValue=(KeyNamePair)orgCombo.getSelectedItem();  m_comboActive=false;  orgComboChanged();}  }
class C{  private Multimap<String,String> createStorageHWIDs(StorageSystem storage,Map<String,CIMObjectPath> existingHwStorageIds,List<Initiator> initiators,TaskCompleter completer) throws Exception {  _log.info("{} createStorageHWID START...",storage.getSerialNumber());  Multimap<String,String> existingTargets=TreeMultimap.create();  if (initiators == null || initiators.isEmpty()) {    _log.info("No initiators ...");    return existingTargets;  }  try {    CIMObjectPath hwIdManagementSvc=_cimPath.getStorageHardwareIDManagementService(storage);    List<Initiator> createdInitiators=new ArrayList<Initiator>();    for (    Initiator initiator : initiators) {      String normalizedPortName=Initiator.normalizePort(initiator.getInitiatorPort());      if (existingHwStorageIds.containsKey(normalizedPortName)) {        List<String> endpoints=getEMCTargetEndpoints(hwIdManagementSvc,storage,existingHwStorageIds.get(normalizedPortName));        _log.info("Endpoint found for {} EndPoints {}",normalizedPortName,endpoints);        for (        String endpoint : endpoints) {          existingTargets.put(normalizedPortName,endpoint);          _log.info("Endpoint found for {} EndPoint {}",normalizedPortName,endpoint);        }        _log.info("WWNs found on the array already: {}",Joiner.on(',').join(existingHwStorageIds.keySet()));        _log.info(String.format("Initiator %s already exists, skip creation",initiator.getInitiatorPort()));        continue;      }      CIMArgument[] createHwIdIn=_helper.getCreateStorageHardwareIDArgs(initiator);      CIMArgument[] createHwIdOut=new CIMArgument[5];      _helper.invokeMethod(storage,hwIdManagementSvc,SmisConstants.CREATE_STORAGE_HARDWARE_ID,createHwIdIn,createHwIdOut);      createdInitiators.add(initiator);    }    ExportOperationContext.insertContextOperation(completer,VnxExportOperationContext.OPERATION_ADD_INITIATORS_TO_STORAGE_GROUP,createdInitiators);  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    throw e;  }catch (  Exception e) {    _log.error("Unexpected error: createStorageHWIDs failed.",e);    throw e;  }  return existingTargets;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void reschedule(long delay,TimeUnit unit){  boolean needQueue=true;  SingletonTaskWorker stw=null;synchronized (context) {    if (context.taskRunning || context.taskShouldRun) {      if (context.taskRunning) {        if (delay > 0) {          long now=System.nanoTime();          long then=now + TimeUnit.NANOSECONDS.convert(delay,unit);          context.waitingTask.nextschedule=then;        } else {          context.waitingTask.nextschedule=0;        }        needQueue=false;      } else {        context.waitingTask.canceled=true;        context.waitingTask=null;      }    }    context.taskShouldRun=true;    if (needQueue) {      stw=context.waitingTask=new SingletonTaskWorker(this);    }  }  if (needQueue) {    if (delay <= 0)     ses.execute(stw); else     ses.schedule(stw,delay,unit);  }}  }
class C{  void zApplyBorderPropertiesList(){  if (settings == null) {    return;  }  CalendarBorderProperties clearBordersProperties=new CalendarBorderProperties(new Point(1,1),new Point(5,5),Color.black,0);  zApplyBorderPropertiesInstance(clearBordersProperties);  for (  CalendarBorderProperties borderProperties : settings.getBorderPropertiesList()) {    zApplyBorderPropertiesInstance(borderProperties);  }  if (!(settings.getWeekNumbersDisplayed())) {    CalendarBorderProperties hideWeekNumberBorders=new CalendarBorderProperties(new Point(1,1),new Point(2,5),Color.black,0);    zApplyBorderPropertiesInstance(hideWeekNumberBorders);  }  drawCalendar();}  }
class C{  public void testConstrStringException(){  String a="-238768.787678287a+10";  try {    BigDecimal bd=new BigDecimal(a);    fail("NumberFormatException has not been caught: " + bd.toString());  } catch (  NumberFormatException e) {  }}  }
class C{  public static void downloadImageToStorage(String url,String fileName,SuccessCallback<Image> onSuccess,FailureCallback<Image> onFail){  ConnectionRequest cr=new ConnectionRequest();  cr.setPost(false);  cr.setFailSilently(true);  cr.setDuplicateSupported(true);  cr.setUrl(url);  cr.downloadImageToStorage(fileName,onSuccess,onFail);}  }
class C{  public static long decodeZigZag64(final long n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public static AlertDialog errorAlertDialog(Context context){  return new AlertDialog.Builder(context).setTitle(R.string.error_title).setMessage(R.string.error_message).setPositiveButton(R.string.ok,null).create();}  }
class C{  private PropertyDescriptor[] introspectProperties(Class<?> stopClass) throws IntrospectionException {  MethodDescriptor[] methodDescriptors=introspectMethods();  if (methodDescriptors == null) {    return null;  }  ArrayList<MethodDescriptor> methodList=new ArrayList<MethodDescriptor>();  for (int index=0; index < methodDescriptors.length; index++) {    int modifiers=methodDescriptors[index].getMethod().getModifiers();    if (!Modifier.isStatic(modifiers)) {      methodList.add(methodDescriptors[index]);    }  }  int methodCount=methodList.size();  MethodDescriptor[] theMethods=null;  if (methodCount > 0) {    theMethods=new MethodDescriptor[methodCount];    theMethods=methodList.toArray(theMethods);  }  if (theMethods == null) {    return null;  }  HashMap<String,HashMap<Object,Object>> propertyTable=new HashMap<String,HashMap<Object,Object>>(theMethods.length);  for (int i=0; i < theMethods.length; i++) {    introspectGet(theMethods[i].getMethod(),propertyTable);    introspectSet(theMethods[i].getMethod(),propertyTable);  }  fixGetSet(propertyTable);  MethodDescriptor[] allMethods=introspectMethods(true);  if (stopClass != null) {    MethodDescriptor[] excludeMethods=introspectMethods(true,stopClass);    if (excludeMethods != null) {      ArrayList<MethodDescriptor> tempMethods=new ArrayList<MethodDescriptor>();      for (      MethodDescriptor method : allMethods) {        if (!isInSuper(method,excludeMethods)) {          tempMethods.add(method);        }      }      allMethods=tempMethods.toArray(new MethodDescriptor[0]);    }  }  for (int i=0; i < allMethods.length; i++) {    introspectPropertyListener(allMethods[i].getMethod());  }  ArrayList<PropertyDescriptor> propertyList=new ArrayList<PropertyDescriptor>();  for (  Map.Entry<String,HashMap<Object,Object>> entry : propertyTable.entrySet()) {    String propertyName=entry.getKey();    HashMap<Object,Object> table=entry.getValue();    if (table == null) {      continue;    }    String normalTag=(String)table.get(STR_NORMAL);    String indexedTag=(String)table.get(STR_INDEXED);    if ((normalTag == null) && (indexedTag == null)) {      continue;    }    Method get=(Method)table.get(STR_NORMAL + PREFIX_GET);    Method set=(Method)table.get(STR_NORMAL + PREFIX_SET);    Method indexedGet=(Method)table.get(STR_INDEXED + PREFIX_GET);    Method indexedSet=(Method)table.get(STR_INDEXED + PREFIX_SET);    PropertyDescriptor propertyDesc=null;    if (indexedTag == null) {      propertyDesc=new PropertyDescriptor(propertyName,get,set);    } else {      try {        propertyDesc=new IndexedPropertyDescriptor(propertyName,get,set,indexedGet,indexedSet);      } catch (      IntrospectionException e) {        propertyDesc=new IndexedPropertyDescriptor(propertyName,null,null,indexedGet,indexedSet);      }    }    if (canAddPropertyChangeListener && canRemovePropertyChangeListener) {      propertyDesc.setBound(true);    } else {      propertyDesc.setBound(false);    }    if (table.get(STR_IS_CONSTRAINED) == Boolean.TRUE) {      propertyDesc.setConstrained(true);    }    propertyList.add(propertyDesc);  }  PropertyDescriptor[] theProperties=new PropertyDescriptor[propertyList.size()];  propertyList.toArray(theProperties);  return theProperties;}  }
class C{  private void populateLocations(Element controlNode){  includesLocations=true;  List<Location> locations=customizer.getEncounterLocations();  for (  Location loc : locations) {    Integer id=loc.getLocationId();    addSelectOption(controlNode,customizer.getLabel(loc),id.toString());  }}  }
class C{  public static <T>ObjectAnimator ofInt(T target,Property<T,Integer> property,int... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setIntValues(values);  return anim;}  }
class C{  public Metadata extract(Metadata metadata){  if (_data == null)   return metadata;  JpegDirectory directory=(JpegDirectory)metadata.getDirectory(JpegDirectory.class);  try {    int dataPrecision=get16Bits(JpegDirectory.TAG_JPEG_DATA_PRECISION);    directory.setInt(JpegDirectory.TAG_JPEG_DATA_PRECISION,dataPrecision);    int height=get32Bits(JpegDirectory.TAG_JPEG_IMAGE_HEIGHT);    directory.setInt(JpegDirectory.TAG_JPEG_IMAGE_HEIGHT,height);    int width=get32Bits(JpegDirectory.TAG_JPEG_IMAGE_WIDTH);    directory.setInt(JpegDirectory.TAG_JPEG_IMAGE_WIDTH,width);    int numberOfComponents=get16Bits(JpegDirectory.TAG_JPEG_NUMBER_OF_COMPONENTS);    directory.setInt(JpegDirectory.TAG_JPEG_NUMBER_OF_COMPONENTS,numberOfComponents);    int offset=6;    for (int i=0; i < numberOfComponents; i++) {      int componentId=get16Bits(offset++);      int samplingFactorByte=get16Bits(offset++);      int quantizationTableNumber=get16Bits(offset++);      JpegComponent component=new JpegComponent(componentId,samplingFactorByte,quantizationTableNumber);      directory.setObject(JpegDirectory.TAG_JPEG_COMPONENT_DATA_1 + i,component);    }  } catch (  MetadataException me) {    directory.addError("MetadataException: " + me);  }  return metadata;}  }
class C{  public GaussianDensityFunction(Double mean,Double variance){  this.mean=new double[]{mean};  this.variance=new double[]{variance};  stdDev=new double[]{Math.sqrt(variance)};  if (variance < 0) {    log.warning("variance should not be negative, but is : " + variance);  }}  }
class C{  static <T>GeneralRange<T> downTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,true,endpoint,boundType,false,null,OPEN);}  }
class C{  protected void closeOutUnwantedEmbeddedTags(AttributeSet attr) throws IOException {  tagsToRemove.removeAllElements();  attr=convertToHTML(attr,null);  HTML.Tag t;  Object tValue;  int firstIndex=-1;  int size=tags.size();  for (int i=size - 1; i >= 0; i--) {    t=tags.elementAt(i);    tValue=tagValues.elementAt(i);    if ((attr == null) || noMatchForTagInAttributes(attr,t,tValue)) {      firstIndex=i;      tagsToRemove.addElement(t);    }  }  if (firstIndex != -1) {    boolean removeAll=((size - firstIndex) == tagsToRemove.size());    for (int i=size - 1; i >= firstIndex; i--) {      t=tags.elementAt(i);      if (removeAll || tagsToRemove.contains(t)) {        tags.removeElementAt(i);        tagValues.removeElementAt(i);      }      write('<');      write('/');      write(t.toString());      write('>');    }    size=tags.size();    for (int i=firstIndex; i < size; i++) {      t=tags.elementAt(i);      write('<');      write(t.toString());      Object o=tagValues.elementAt(i);      if (o != null && o instanceof AttributeSet) {        writeAttributes((AttributeSet)o);      }      write('>');    }  }}  }
class C{  @Override public void insertBack(Item x){  if (size == items.length) {    resize(size * RFACTOR);  }  items[size]=x;  size=size + 1;}  }
class C{  @Override public final void preTearDownCacheTestCase() throws Exception {  FileUtil.delete(getIncremental2Dir());  FileUtil.delete(getIncrementalDir());  FileUtil.delete(getBaselineDir());}  }
class C{  boolean isRunning(){  return Thread.getDefaultUncaughtExceptionHandler() == this;}  }
class C{  public static float toPixelFromSP(float value){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,value,DisplayMetricsHolder.getDisplayMetrics());}  }
class C{  @Override public void transmit(int event){  if (!isConnected(event))   return;  Address start=subspace.getStart();  int required=countTileNum(start,maxAddr,blockSize);  int current=subspace.getBlockNum();  if (required > current || maxAddr.NE(subspace.getEnd())) {    subspace.reset(start,maxAddr,0,required);    allTileNum=required;    serverSpace.resize(allTileNum);    setTilenames(subspace,allTileNum);  }  setupSummaries();  controlValues(CONTROL_USED,subspace.getFirstIndex(),subspace.getBlockNum());  Offset size=subspace.getEnd().diff(subspace.getStart());  setSpaceInfo(size);  send(event,allTileNum);}  }
class C{  public static Statement statement(String s,String p,Object o){  Value oValue;  if (o instanceof String) {    oValue=uri(o.toString());  } else   if (o instanceof Value) {    oValue=(Value)o;  } else   if (o instanceof Integer) {    oValue=new IntegerLiteralImpl(BigInteger.valueOf((int)o));  } else   if (o instanceof Long) {    oValue=new IntegerLiteralImpl(BigInteger.valueOf((long)o));  } else {    throw new IllegalArgumentException("Illegal object:  " + o);  }  if (p instanceof String && p.startsWith("P")) {    p=WikibaseUris.getURISystem().property(PropertyType.CLAIM) + p;  }  return new StatementImpl(uri(s),uri(p),oValue);}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  public void clear(){  rw.writeLock().lock();  try {    nodes.clear();    circle.clear();  }  finally {    rw.writeLock().unlock();  }}  }
class C{  protected List<SparseItemset> frequentItemsetsSparse(List<SparseItemset> candidates,Relation<BitVector> relation,int needed,DBIDs ids,ArrayModifiableDBIDs survivors,int length){  int begin=0, end=candidates.size();  int[] scratchi=new int[length], iters=new int[length];  SparseItemset scratch=new SparseItemset(scratchi);  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    BitVector bv=relation.get(iditer);    if (!initializeSearchItemset(bv,scratchi,iters)) {      continue;    }    int lives=0;    while (begin < end) {      begin=binarySearch(candidates,scratch,begin,end);      if (begin > 0) {        candidates.get(begin).increaseSupport();        ++lives;      } else {        begin=(-begin) - 1;      }      if (begin >= end || !nextSearchItemset(bv,scratchi,iters)) {        break;      }    }    for (    Itemset candidate : candidates) {      if (candidate.containedIn(bv)) {        candidate.increaseSupport();        ++lives;      }    }    if (lives > length) {      survivors.add(iditer);    }  }  List<SparseItemset> frequent=new ArrayList<>(candidates.size());  for (Iterator<SparseItemset> iter=candidates.iterator(); iter.hasNext(); ) {    final SparseItemset candidate=iter.next();    if (candidate.getSupport() >= needed) {      frequent.add(candidate);    }  }  return frequent;}  }
class C{  private void generateName(){  if (this.url.equals(""))   return;  if (!this.name.equals("localdomain") && !this.name.equals(""))   return;  this.name=Util.URLManipulation.getHostFromUrl(this.url,this.name);}  }
class C{  protected void verifyMatch(Object target,Object deserialized){  CronExpression targetCronExpression=(CronExpression)target;  CronExpression deserializedCronExpression=(CronExpression)deserialized;  assertNotNull(deserializedCronExpression);  assertEquals(targetCronExpression.getCronExpression(),deserializedCronExpression.getCronExpression());  assertEquals(targetCronExpression.getTimeZone(),deserializedCronExpression.getTimeZone());}  }
class C{  public static List transpose(Object[] lists){  return transpose(Arrays.asList(lists));}  }
class C{  private List<double[]> initializeWeightsND(){  int N=50;  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);  for (int i=0; i < numberOfPoints * N; i++) {    double[] weight=new double[numberOfObjectives];    for (int j=0; j < numberOfObjectives; j++) {      weight[j]=PRNG.nextDouble();    }    double sum=StatUtils.sum(weight);    for (int j=0; j < numberOfObjectives; j++) {      weight[j]/=sum;    }    candidates.add(weight);  }  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);  for (int i=0; i < numberOfObjectives; i++) {    double[] weight=new double[numberOfObjectives];    weight[i]=1.0;    weights.add(weight);  }  while (weights.size() < numberOfPoints) {    double[] weight=null;    double distance=Double.NEGATIVE_INFINITY;    for (int i=0; i < candidates.size(); i++) {      double d=Double.POSITIVE_INFINITY;      for (int j=0; j < weights.size(); j++) {        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));      }      if (d > distance) {        weight=candidates.get(i);        distance=d;      }    }    weights.add(weight);    candidates.remove(weight);  }  return weights;}  }
class C{  public static final void show(Component parent,String contents){  SampleFileDialog dialog=new SampleFileDialog(parent,contents);  dialog.setLocationRelativeTo(parent);  dialog.setVisible(true);}  }
class C{  public String toString(){  return "DummyGetterTestBean{" + "model=" + model + ", x="+ getX()+ ", dummyModel="+ getDummyModel()+ '}';}  }
class C{  private void validateBlockletSize(){  String blockletSizeStr=carbonProperties.getProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);  try {    int blockletSize=Integer.parseInt(blockletSizeStr);    if (blockletSize < CarbonCommonConstants.BLOCKLET_SIZE_MIN_VAL || blockletSize > CarbonCommonConstants.BLOCKLET_SIZE_MAX_VAL) {      LOGGER.info("The blocklet size value \"" + blockletSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The blocklet size value \"" + blockletSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);  }}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  functionblockModelEClass=createEClass(FUNCTIONBLOCK_MODEL);  createEReference(functionblockModelEClass,FUNCTIONBLOCK_MODEL__FUNCTIONBLOCK);  createEReference(functionblockModelEClass,FUNCTIONBLOCK_MODEL__ENTITIES);  createEReference(functionblockModelEClass,FUNCTIONBLOCK_MODEL__ENUMS);  createEReference(functionblockModelEClass,FUNCTIONBLOCK_MODEL__SUPER_TYPE);  functionBlockEClass=createEClass(FUNCTION_BLOCK);  createEReference(functionBlockEClass,FUNCTION_BLOCK__CONFIGURATION);  createEReference(functionBlockEClass,FUNCTION_BLOCK__STATUS);  createEReference(functionBlockEClass,FUNCTION_BLOCK__FAULT);  createEReference(functionBlockEClass,FUNCTION_BLOCK__EVENTS);  createEReference(functionBlockEClass,FUNCTION_BLOCK__OPERATIONS);  configurationEClass=createEClass(CONFIGURATION);  createEReference(configurationEClass,CONFIGURATION__PROPERTIES);  statusEClass=createEClass(STATUS);  createEReference(statusEClass,STATUS__PROPERTIES);  faultEClass=createEClass(FAULT);  createEReference(faultEClass,FAULT__PROPERTIES);  operationEClass=createEClass(OPERATION);  createEAttribute(operationEClass,OPERATION__NAME);  createEReference(operationEClass,OPERATION__PARAMS);  createEReference(operationEClass,OPERATION__RETURN_TYPE);  createEAttribute(operationEClass,OPERATION__DESCRIPTION);  createEAttribute(operationEClass,OPERATION__BREAKABLE);  returnTypeEClass=createEClass(RETURN_TYPE);  createEAttribute(returnTypeEClass,RETURN_TYPE__MULTIPLICITY);  returnObjectTypeEClass=createEClass(RETURN_OBJECT_TYPE);  createEReference(returnObjectTypeEClass,RETURN_OBJECT_TYPE__RETURN_TYPE);  returnPrimitiveTypeEClass=createEClass(RETURN_PRIMITIVE_TYPE);  createEAttribute(returnPrimitiveTypeEClass,RETURN_PRIMITIVE_TYPE__RETURN_TYPE);  createEReference(returnPrimitiveTypeEClass,RETURN_PRIMITIVE_TYPE__CONSTRAINT_RULE);  primitiveParamEClass=createEClass(PRIMITIVE_PARAM);  createEAttribute(primitiveParamEClass,PRIMITIVE_PARAM__TYPE);  createEReference(primitiveParamEClass,PRIMITIVE_PARAM__CONSTRAINT_RULE);  refParamEClass=createEClass(REF_PARAM);  createEReference(refParamEClass,REF_PARAM__TYPE);  paramEClass=createEClass(PARAM);  createEAttribute(paramEClass,PARAM__MULTIPLICITY);  createEAttribute(paramEClass,PARAM__NAME);  createEAttribute(paramEClass,PARAM__DESCRIPTION);  eventEClass=createEClass(EVENT);  createEAttribute(eventEClass,EVENT__NAME);  createEReference(eventEClass,EVENT__PROPERTIES);}  }
class C{  public RangeBuilder format(String format){  this.format=format;  return this;}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  private Stream<InteractionWord> extractInteractionWords(List<ClusteredPatterns> clusters){  return clusters.stream().flatMap(null).filter(null).distinct();}  }
class C{  public GeneratedProblem generateNewProblem(){  GeneratedProblem newProb=getProblemGenerator().generateProblem(getDifficulty());  newProb.setxPos(getxPos());  newProb.setyPos(getyPos());  MathObjectContainer parent=getParentContainer();  getParentContainer().removeObject(this);  parent.addObject(newProb);  return newProb;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  protected static void fail(){  System.exit(1);}  }
class C{  public Long addRoomWithModerationExternalTypeAndAudioType(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,String externalRoomType,Boolean allowUserQuestions,Boolean isAudioOnly){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return roommanagement.addExternalRoom(name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,null,externalRoomType,allowUserQuestions,isAudioOnly,false,"",false,true,false);    }  } catch (  Exception err) {    log.error("[addRoomWithModeration] ",err);  }  return new Long(-1);}  }
class C{  protected void onPositionChange(boolean isInTouching,byte status,PtrIndicator mPtrIndicator){}  }
class C{  boolean isLeftChild(){  if (this.parent == null)   return false;  return (this.parent.left == this);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public DoubleMatrix3D make(int slices,int rows,int columns){  if (this == sparse)   return new SparseDoubleMatrix3D(slices,rows,columns);  return new DenseDoubleMatrix3D(slices,rows,columns);}  }
class C{  public LRUCache(int initialCapacity,int maximumCacheSize,float loadFactor,boolean accessOrder){  super(initialCapacity,loadFactor,accessOrder);  this.maxCacheSize=maximumCacheSize;}  }
class C{  public FluentBiFunction<T1,T2,R> log(final Consumer<String> logger,final Consumer<Throwable> error){  return FluentFunctions.of(null);}  }
class C{  protected void flowThrough(Object inValue,Object unit,Object outValue){  FlowSet in=(FlowSet)inValue, out=(FlowSet)outValue;  in.union(unitToGenerateSet.get(unit),out);}  }
class C{  public Matrix4f shadow(float lightX,float lightY,float lightZ,float lightW,float a,float b,float c,float d){  return shadow(lightX,lightY,lightZ,lightW,a,b,c,d,this);}  }
class C{  private void configureClientSSLSocket(Socket socket) throws IOException {  if (socket instanceof SSLSocket) {    SSLSocket sslSocket=(SSLSocket)socket;    sslSocket.setUseClientMode(true);    sslSocket.setEnableSessionCreation(true);    String[] protocols=this.sslConfig.getProtocolsAsStringArray();    if (protocols != null && !"any".equalsIgnoreCase(protocols[0])) {      sslSocket.setEnabledProtocols(protocols);    }    String[] ciphers=this.sslConfig.getCiphersAsStringArray();    if (ciphers != null && !"any".equalsIgnoreCase(ciphers[0])) {      sslSocket.setEnabledCipherSuites(ciphers);    }    try {      sslSocket.startHandshake();      SSLSession session=sslSocket.getSession();      Certificate[] peer=session.getPeerCertificates();      if (logger.isDebugEnabled()) {        logger.debug(LocalizedMessage.create(LocalizedStrings.SocketCreator_SSL_CONNECTION_FROM_PEER_0,((X509Certificate)peer[0]).getSubjectDN()));      }    } catch (    SSLHandshakeException ex) {      logger.fatal(LocalizedMessage.create(LocalizedStrings.SocketCreator_SSL_ERROR_IN_CONNECTING_TO_PEER_0_1,new Object[]{socket.getInetAddress(),Integer.valueOf(socket.getPort())}),ex);      throw ex;    }catch (    SSLPeerUnverifiedException ex) {      if (this.sslConfig.isRequireAuth()) {        logger.fatal(LocalizedMessage.create(LocalizedStrings.SocketCreator_SSL_ERROR_IN_AUTHENTICATING_PEER),ex);        throw ex;      }    }catch (    SSLException ex) {      logger.fatal(LocalizedMessage.create(LocalizedStrings.SocketCreator_SSL_ERROR_IN_CONNECTING_TO_PEER_0_1,new Object[]{socket.getInetAddress(),Integer.valueOf(socket.getPort())}),ex);      throw ex;    }  }}  }
class C{  final void putLong(int offset,long value){  unsafe.putLong(offset + address,value);}  }
class C{  @Description(summary="Run the benchmarks.") public void benchmark(){  downloadUsingMaven("ext/hsqldb-2.3.2.jar","org/hsqldb","hsqldb","2.3.2","970fd7b8f635e2c19305160459649569655b843c");  downloadUsingMaven("ext/derby-10.10.1.1.jar","org/apache/derby","derby","10.10.1.1","09f6f910f0373adc1b23c10f9b4bb151b7e7449f");  downloadUsingMaven("ext/derbyclient-10.10.1.1.jar","org/apache/derby","derbyclient","10.10.1.1","42d5293b4ac5c5f082583c3564c10f78bd34a4cb");  downloadUsingMaven("ext/derbynet-10.10.1.1.jar","org/apache/derby","derbynet","10.10.1.1","912b08dca73663d4665e09cd317be1218412d93e");  downloadUsingMaven("ext/postgresql-9.4.1209.jre6.jar","org.postgresql","postgresql","9.4.1209.jre6","2ed7a5a8c952d9ea18af92efea7e56ef854abfea");  downloadUsingMaven("ext/mysql-connector-java-5.1.6.jar","mysql","mysql-connector-java","5.1.6","380ef5226de2c85ff3b38cbfefeea881c5fce09d");  compile();  String cp="temp" + File.pathSeparator + "bin/h2"+ getJarSuffix()+ File.pathSeparator+ "ext/hsqldb.jar"+ File.pathSeparator+ "ext/hsqldb-2.3.2.jar"+ File.pathSeparator+ "ext/derby-10.10.1.1.jar"+ File.pathSeparator+ "ext/derbyclient-10.10.1.1.jar"+ File.pathSeparator+ "ext/derbynet-10.10.1.1.jar"+ File.pathSeparator+ "ext/postgresql-9.4.1209.jre6.jar"+ File.pathSeparator+ "ext/mysql-connector-java-5.1.6.jar";  StringList args=args("-Xmx128m","-cp",cp,"org.h2.test.bench.TestPerformance");  execJava(args.plus("-init","-db","1"));  execJava(args.plus("-db","2"));  execJava(args.plus("-db","3","-out","pe.html"));  execJava(args.plus("-init","-db","4"));  execJava(args.plus("-db","5","-exit"));  execJava(args.plus("-db","6"));  execJava(args.plus("-db","7"));  execJava(args.plus("-db","8","-out","ps.html"));}  }
class C{  public boolean addEdge(Edge edge){  SessionNodeWrapper from=(SessionNodeWrapper)Edges.getDirectedEdgeTail(edge);  SessionNodeWrapper to=(SessionNodeWrapper)Edges.getDirectedEdgeHead(edge);  SessionNode parent=from.getSessionNode();  SessionNode child=to.getSessionNode();  boolean added=child.addParent2(parent);  if (added) {    this.sessionEdges.add(edge);    getPropertyChangeSupport().firePropertyChange("edgeAdded",null,edge);    return true;  } else {    return false;  }}  }
class C{  protected final void mergeServlets(WebXml theWebXml) throws CargoException {  try {    List<String> servletNames=WebXmlUtils.getServletNames(theWebXml);    int count=0;    for (    String servletName : servletNames) {      if (!WebXmlUtils.hasServlet(this.webXml,servletName)) {        WebXmlUtils.addServlet(this.webXml,WebXmlUtils.getServlet(theWebXml,servletName));      } else {        List<String> servletInitParamNames=WebXmlUtils.getServletInitParamNames(theWebXml,servletName);        for (        String paramName : servletInitParamNames) {          String paramValue=WebXmlUtils.getServletInitParam(theWebXml,servletName,paramName);          WebXmlUtils.addServletInitParam(this.webXml,servletName,paramName,paramValue);        }        String roleName=WebXmlUtils.getServletRunAsRoleName(theWebXml,servletName);        if (roleName != null) {          WebXmlUtils.addServletRunAsRoleName(this.webXml,servletName,roleName);        }      }      List<String> servletMappings=WebXmlUtils.getServletMappings(theWebXml,servletName);      for (      String urlPattern : servletMappings) {        List<String> existingServletMappings=WebXmlUtils.getServletMappings(this.webXml,servletName);        if (!existingServletMappings.contains(urlPattern)) {          WebXmlUtils.addServletMapping(this.webXml,servletName,urlPattern);        }      }      count++;    }    getLogger().debug("Merged " + count + " servlet definition"+ (count != 1 ? "s " : " ")+ "into the descriptor",this.getClass().getName());  } catch (  Exception ex) {    throw new CargoException("Exception merging servlet definitions",ex);  }}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  protected AbstractMatrix2D vRowFlip(){  if (rows > 0) {    rowZero+=(rows - 1) * rowStride;    rowStride=-rowStride;    this.isNoView=false;  }  return this;}  }
class C{  public static long decodeDimension(byte value[],int offset){  return NumericUtils.sortableBytesToLong(value,offset);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public MutablePeriod(long duration,PeriodType type,Chronology chronology){  super(duration,type,chronology);}  }
class C{  private Enum<?> readEnum0(@Nullable Class<?> cls) throws BinaryObjectException {  if (checkFlagNoHandles(ENUM) == Flag.NORMAL) {    Class<?> cls0=BinaryUtils.doReadClass(in,ctx,ldr);    if (cls == null)     cls=cls0;    return BinaryUtils.doReadEnum(in,cls);  } else   return null;}  }
class C{  public DtoProvider<?> unregisterProvider(Class<?> dtoInterface){  final DtoProvider<?> dtoProvider=dtoInterface2Providers.remove(dtoInterface);  if (dtoProvider != null) {    dtoImpl2Providers.remove(dtoProvider.getImplClass());  }  return dtoProvider;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  AbstractItem<?,?> that=(AbstractItem<?,?>)o;  return mIdentifier == that.getIdentifier();}  }
class C{  public AccountHeaderBuilder withHeaderBackground(ImageHolder headerBackground){  this.mHeaderBackground=headerBackground;  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.INLINE_TAG__TITLE:    return title != null;case DomPackage.INLINE_TAG__VALUES:  return values != null && !values.isEmpty();case DomPackage.INLINE_TAG__TAG_DEFINITION:return TAG_DEFINITION_EDEFAULT == null ? tagDefinition != null : !TAG_DEFINITION_EDEFAULT.equals(tagDefinition);}return super.eIsSet(featureID);}  }
class C{  private Object writeReplace(){  return new SerializationProxy(get(),function,identity);}  }
class C{  MutableBigInteger(int val){  value=new int[1];  intLen=1;  value[0]=val;}  }
class C{  public static short max(short a,final short b,final short c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  public int length(){  return str.length();}  }
class C{  @Inject public MergePresenter(MergeView view,EventBus eventBus,EditorAgent editorAgent,GitServiceClient service,GitOutputPartPresenter console,GitLocalizationConstant constant,AppContext appContext,NotificationManager notificationManager,DtoUnmarshallerFactory dtoUnmarshallerFactory,ProjectExplorerPresenter projectExplorer){  this.view=view;  this.console=console;  this.projectExplorer=projectExplorer;  this.view.setDelegate(this);  this.service=service;  this.eventBus=eventBus;  this.constant=constant;  this.editorAgent=editorAgent;  this.appContext=appContext;  this.notificationManager=notificationManager;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;}  }
class C{  private void updateDisplay(){  firstVersionLabel.setSize(firstVersionLabel.computeSize(SWT.DEFAULT,SWT.DEFAULT));}  }
class C{  private void selectItem(int index,boolean silently){  final Object valueToSelect=index == -1 ? null : comboBoxModel.getElementAt(index);  if (GlazedListsImpl.equal(comboBoxModel.getSelectedItem(),valueToSelect))   return;  doNotChangeDocument=true;  try {    if (silently)     comboBoxModel.setSelectedItem(valueToSelect); else     comboBox.setSelectedItem(valueToSelect);  }  finally {    doNotChangeDocument=false;  }}  }
class C{  static final public boolean isDEBUG(Logger log){  return log.getEffectiveLevel().toInt() <= Level.DEBUG.toInt();}  }
class C{  public void constructHopsForForControlBlock(ForStatementBlock sb) throws ParseException, LanguageException {  ForStatement fs=(ForStatement)sb.getStatement(0);  ArrayList<StatementBlock> body=fs.getBody();  constructHopsForIterablePredicate(sb);  for (  StatementBlock current : body) {    constructHops(current);  }}  }
class C{  public EntityQuery cursorForwardOnly(){  this.resultSetType=EntityFindOptions.TYPE_FORWARD_ONLY;  return this;}  }
class C{  protected void configureMQConnectionFactory(MQConnectionFactory cf) throws JMSException {  cf.setTransportType(JMSC.MQJMS_TP_CLIENT_MQ_TCPIP);  cf.setHostName(Config.parms.getString("cmd_jh"));  cf.setPort(Config.parms.getInt("cmd_p"));  cf.setChannel(Config.parms.getString("cmd_jc"));  cf.setQueueManager(Config.parms.getString("cmd_jb"));}  }
class C{  private void newInstance() throws MalformedURLException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {  final File file=new File("./data/script");  final ClassLoader loader=new URLClassLoader(new URL[]{file.toURI().toURL()});  final Class<?> aClass=loader.loadClass(classname);  script=(Script)aClass.newInstance();}  }
class C{  public AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES);}  }
class C{  @Description(summary="Download all required jar files.") public void download(){  downloadOrVerify(false);}  }
class C{  public void leaveSource(NodeHandler handler,Context context){  if (TRACE) {    indent=indent.substring(0,indent.length() - 1);    trace(indent + "</Source><!-- " + Navigator.getPath(context.getContextNodeInfo())+ " -->");  }  myDebugger.popSource();}  }
class C{  public AppVersion(int major,int minor,String modifier){  this(major,minor,-1,-1,modifier);}  }
class C{  List<String> prepareFieldNames(final List<EgDemandReasonMaster> dmdReasonMasters,final DCBDisplayInfo dcbDisPlayInfo){  final List<String> fieldNames=new ArrayList<String>();  if (dmdReasonMasters != null && !dmdReasonMasters.isEmpty()) {    List<String> reasonCatgoryCodes=null;    if (dcbDisPlayInfo != null && dcbDisPlayInfo.getReasonCategoryCodes() != null && !dcbDisPlayInfo.getReasonCategoryCodes().isEmpty()) {      reasonCatgoryCodes=dcbDisPlayInfo.getReasonCategoryCodes();      fieldNames.addAll(getNamesFromCodes(reasonCatgoryCodes));    }    for (    final EgDemandReasonMaster reasonMaster : dmdReasonMasters)     if (reasonMaster != null && reasonMaster.getEgReasonCategory() != null) {      final String categoryReason=reasonMaster.getEgReasonCategory().getName();      if (!fieldNames.contains(categoryReason))       fieldNames.add(reasonMaster.getReasonMaster());    }  }  return fieldNames;}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  public static void addDeclaredSymbolsInScopeSet(StringSet result,ModuleNode module,Location loc){  HashSet<ModuleNode> extendees=module.getExtendedModuleSet();  extendees.add(module);  Iterator<ModuleNode> iter=extendees.iterator();  while (iter.hasNext()) {    ModuleNode modNode=iter.next();    OpDeclNode[] decls=modNode.getConstantDecls();    for (int i=0; i < decls.length; i++) {      if ((modNode != module) || earlierLine(decls[i].stn.getLocation(),loc)) {        result.add(decls[i].getName().toString());      }    }    decls=modNode.getVariableDecls();    for (int i=0; i < decls.length; i++) {      if ((modNode != module) || earlierLine(decls[i].stn.getLocation(),loc)) {        result.add(decls[i].getName().toString());      }    }  }  HashSet<ModuleNode> allModulesSet=new HashSet<ModuleNode>();  addImportedModulesSet(allModulesSet,result,loc,module);  iter=allModulesSet.iterator();  while (iter.hasNext()) {    ModuleNode modNode=iter.next();    OpDefNode[] decls=modNode.getOpDefs();    for (int i=0; i < decls.length; i++) {      if ((modNode != module) || earlierLine(decls[i].stn.getLocation(),loc)) {        result.add(decls[i].getName().toString());      }    }    ThmOrAssumpDefNode[] tdecls=module.getThmOrAssDefs();    for (int i=0; i < tdecls.length; i++) {      if ((modNode != module) || earlierLine(tdecls[i].stn.getLocation(),loc)) {        result.add(tdecls[i].getName().toString());      }    }  }  ;}  }
class C{  public DNSOutgoing(int flags,boolean multicast){  this(flags,multicast,DNSConstants.MAX_MSG_TYPICAL);}  }
class C{  public synchronized IndexedLine readIndexedLine() throws IOException {  long pos=real_pos - buf_end + buf_pos;  byte[] text=this.getNextLine();  return text == null ? null : new IndexedLine(pos,text);}  }
class C{  @SuppressWarnings("unchecked") private void doubleCapacity(){  assert head == tail;  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=(E[])a;  head=0;  tail=n;}  }
class C{  public boolean isVerbose(){  return logger.isLoggable(Level.VERBOSE);}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  @Override public Object prepend(Object o) throws ExpressionException {  insert(1,o);  return o;}  }
class C{  private AttrHold(final String val) throws BOSHException {  super(val);  checkMinValue(0);}  }
class C{  public void deleteConnectedSynapses(){  deleteFanIn();  deleteFanOut();}  }
class C{  public static String rightPad(Object value,int width,String pad) throws Exception {  return pad(2,value,width,pad);}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  public Path append(Path path){  if (path == null || path.segmentCount() == 0)   return this;  if (this.isEmpty())   return path.setDevice(device).makeRelative().makeUNC(isUNC());  if (this.isRoot())   return path.setDevice(device).makeAbsolute().makeUNC(isUNC());  int myLen=segments.length;  int tailLen=path.segmentCount();  String[] newSegments=new String[myLen + tailLen];  System.arraycopy(segments,0,newSegments,0,myLen);  for (int i=0; i < tailLen; i++) {    newSegments[myLen + i]=path.segment(i);  }  Path result=new Path(device,newSegments,(separators & (HAS_LEADING | IS_UNC)) | (path.hasTrailingSeparator() ? HAS_TRAILING : 0));  String tailFirstSegment=newSegments[myLen];  if (tailFirstSegment.equals("..") || tailFirstSegment.equals(".")) {    result.canonicalize();  }  return result;}  }
class C{  public boolean isSetRenameToTable(){  return this.renameToTable != null;}  }
class C{  public AbTabItemView(Context context){  this(context,null);}  }
class C{  public Edge findEdge(Coordinate p0,Coordinate p1){  for (int i=0; i < edges.size(); i++) {    Edge e=(Edge)edges.get(i);    Coordinate[] eCoord=e.getCoordinates();    if (p0.equals(eCoord[0]) && p1.equals(eCoord[1]))     return e;  }  return null;}  }
class C{  public void resolve(BlockScope scope,boolean warn,boolean considerParamRefAsUsage){  LocalVariableBinding variableBinding=scope.findVariable(this.token);  if (variableBinding != null && variableBinding.isValidBinding() && ((variableBinding.tagBits & TagBits.IsArgument) != 0)) {    this.binding=variableBinding;    if (considerParamRefAsUsage) {      variableBinding.useFlag=LocalVariableBinding.USED;    }    return;  }  if (warn) {    try {      MethodScope methScope=(MethodScope)scope;      scope.problemReporter().javadocUndeclaredParamTagName(this.token,this.sourceStart,this.sourceEnd,methScope.referenceMethod().modifiers);    } catch (    Exception e) {      scope.problemReporter().javadocUndeclaredParamTagName(this.token,this.sourceStart,this.sourceEnd,-1);    }  }}  }
class C{  @Override public boolean supportsCapability(OperatorCapability lc){  if (lc == OperatorCapability.NUMERICAL_ATTRIBUTES) {    return true;  }  if (lc == OperatorCapability.BINOMINAL_LABEL) {    return true;  }  if (lc == OperatorCapability.NUMERICAL_LABEL) {    return true;  }  if (lc == OperatorCapability.WEIGHTED_EXAMPLES) {    return true;  }  if (lc == OperatorCapability.FORMULA_PROVIDER) {    return true;  }  return false;}  }
class C{  public ZyGraphEdgeSettings(final ZyGraphEdgeSettings settings){  displayMultipleEdgesAsOne=settings.getDisplayMultipleEdgesAsOne();  edgeHidingMode=settings.getEdgeHidingMode();  edgeHidingThreshold=settings.getEdgeHidingThreshold();  drawSelectedBends=settings.getDrawSelectedBends();  type=null;}  }
class C{  private boolean checkOrgDeregistration(Organization org,boolean lookupOnly){  if (org.getDeregistrationDate() != null) {    if (lookupOnly) {      return false;    }    InvalidUserSession ius=new InvalidUserSession("Organization with key '" + org.getKey() + "' is deregistered!");    logger.logError(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,ius,LogMessageIdentifier.ERROR_USER_OPERATE_NOT_PERMITTED,org.getOrganizationId());    throw ius;  }  return true;}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  private void searchForWorkingRingsOfLife(RPObject obj,List<RingOfLife> list){  if (obj instanceof RingOfLife) {    RingOfLife ring=(RingOfLife)obj;    if (!ring.isBroken()) {      list.add(ring);    }  } else {    for (    RPSlot slot : obj.slots()) {      for (      RPObject subobj : slot) {        searchForWorkingRingsOfLife(subobj,list);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") private void expungeStaleEntries(){synchronized (sync) {    ListWeakReference r;    while ((r=(ListWeakReference)queue.poll()) != null) {      ListEntry le=r.getListEntry();      int i=list.indexOf(le);      if (i != -1) {        list.remove(i);      }    }  }}  }
class C{  @Override public Iterator<Double> iterator(){  return valueMap.keySet().iterator();}  }
class C{  public static void main(String[] args){  FinanceService service=new FinanceService("Google-PortfoliosDemo-1.0");  Scanner sc=new Scanner(System.in);  System.out.println("Sample Google Finance Portfolios Client");  if (args.length != 1 && args.length != 3) {    printUsage();    System.exit(0);  }  if (args.length == 3) {    userEmail=args[1];    userPassword=args[2];  } else {    System.out.print("Enter user ID: ");    userEmail=sc.nextLine();    System.out.print("Enter user password: ");    userPassword=sc.nextLine();  }  if (!loginUser(service,userEmail,userPassword)) {    printUsage();    System.exit(0);  }  server=args[0];  baseUrl=server + basePath + "default";  printMainMenuHelp();  try {    while (true) {switch (processMainMenuCommand(sc.nextLine().toLowerCase())) {case PORTFOLIOS:        portfolioMenu(service,sc);      break;case POSITIONS:    positionMenu(service,sc);  break;case TRANSACTIONS:transactionMenu(service,sc);break;case QUIT:System.exit(0);case HELP:printMainMenuHelp();break;default :printMainMenuHelp();}}} catch (IOException e) {System.err.println("There was a problem communicating with the service.");e.printStackTrace();}catch (ServiceException e) {System.err.println("The server had a problem handling your request.");e.printStackTrace();}}  }
class C{  protected StringOption(OptionSet set,String name,String desc,String defaultValue){  super(set,STRING_OPTION,name,desc);  this.value=this.defaultValue=defaultValue;}  }
class C{  public void closeAttackUnfinished(){  abortAttack();  attackFinished=true;  this.setWsAttackerResults("Attack aborted by user");  fireModelChanged();}  }
class C{  public void send(Class<? extends Protocol> packetProtocol) throws Exception {  send(packetProtocol,true);}  }
class C{  public DataSetBuilder<T> repeatAll(int times){  builder.repeatAll(times);  return this;}  }
class C{  public SWFShapeImpl(TagWriter writer,boolean hasAlpha,boolean hasStyle){  this.hasAlpha=hasAlpha;  this.hasStyle=hasStyle;  this.writer=writer;  out=writer.getOutStream();}  }
class C{  public void writeTo(PrintWriter pw){  pw.println(this.contents);  if (!this.suppressBlanks) {    pw.println("");  }  pw.flush();}  }
class C{  @SuppressWarnings("unchecked") private void createTemporaryIndexes(boolean isTargetOnly){  resetDBObjects(DBObject_ForeignKey.class);  DBObject dbObject=null;  Class objectClass=DBObject_Index.class;  if (objectClass != null)   dbObject=new DBObject(objectClass);  if (dbObject != null) {    m_objectType=dbObject.getObjectType();    m_objectTypes=dbObject.getObjectTypes();  }  if (isTargetOnly) {    m_objectList=new ArrayList<String>();    if (m_targetMap != null && m_targetMap.size() > 0) {      for (Iterator<String> it=m_targetMap.keySet().iterator(); it.hasNext(); ) {        String key=it.next();        if (!m_objectList.contains(key))         m_objectList.add(key);      }    }    java.util.Collections.sort(m_objectList);  }  m_tempIndexes=new HashMap<String,DBObject>();  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"createTemporaryIndexes",new Object[]{m_objectTypes,m_direction});  m_counterAdd=new Integer(0);  m_totalAdd=new Integer(0);  for (Iterator<String> fkit=m_objectList.iterator(); fkit.hasNext(); ) {    String key=fkit.next();    DBObject obj=null;    String ndxTypeIdentifier=null;    if (isTargetOnly) {      obj=m_targetMap.get(key);      ndxTypeIdentifier="t";    } else {      obj=m_sourceMap.get(key);      if (obj == null) {        obj=m_targetMap.get(key);        if (obj.getCustomizationLevel() == s_parameters.CUSTOMNONE)         obj=null;      }      ndxTypeIdentifier="f";    }    if (obj != null) {      Vector<Integer> v=new Vector<Integer>(obj.getContents().keySet());      for (Iterator<Integer> colit=v.iterator(); colit.hasNext(); ) {        int colkey=colit.next();        DBObject_ForeignKey_Column fkdetail=(DBObject_ForeignKey_Column)obj.getContents().get(colkey);        String tableName=fkdetail.getTable();        String columnName=fkdetail.getColumn();        if (!isIndexExists(tableName,columnName,isTargetOnly)) {          String indexName=new StringBuffer(s_parameters.TEMPNDXNAME).append("_").append(ndxTypeIdentifier).append("_").append(String.format("%05d",m_counterAdd)).toString();          DBObject index=new DBObject(m_target,objectClass,indexName);          DBObject_Index_Table header=new DBObject_Index_Table(m_target,indexName,0);          header.initializeDefinition(tableName,false);          HashMap<Integer,DBObjectDefinition> headers=new HashMap<Integer,DBObjectDefinition>();          headers.put(new Integer(0),header);          index.setHeaders(headers);          DBObject_Index_Column column=new DBObject_Index_Column(m_target,indexName,0);          column.initializeDefinition(tableName,columnName,"ASC","LAST");          HashMap<Integer,DBObjectDefinition> contents=new HashMap<Integer,DBObjectDefinition>();          contents.put(new Integer(0),column);          index.setContents(contents);          if (index.create(m_target)) {            m_tempIndexes.put(indexName.toUpperCase(),index);            m_counterAdd=new Integer(m_counterAdd.intValue() + 1);          }          m_totalAdd=new Integer(m_totalAdd.intValue() + 1);        }      }    }  }  logResults();}  }
class C{  private ContentComparisonResult localFileNodesCompare(final Object obj1,final Object obj2,final IProgressMonitor monitor){  final byte[] hash1=getItemHash(obj1,monitor);  final byte[] hash2=getItemHash(obj2,monitor);  return compareByHash(hash1,hash2);}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") String configGroup,Principal principal){  RestWrapper restWrapper=null;  try {    generalConfigDAO.deleteByConfigGroup(configGroup);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with configGroup:" + configGroup + " deleted from generalConfig by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private static void runFromConfig(ServerConfig config) throws IOException {  LOG.info("Starting server");  String newDataDir=LocalTaskCommons.setDir(ZKDATA);  String newLogDir=LocalTaskCommons.setDir(ZKLOG);  try {    removeZKTmpDir(newDataDir,newLogDir);    ZooKeeperServer zkServer=new ZooKeeperServer();    FileTxnSnapLog ftxn=new FileTxnSnapLog(new File(newLogDir),new File(newDataDir));    zkServer.setTxnLogFactory(ftxn);    zkServer.setTickTime(config.getTickTime());    zkServer.setMinSessionTimeout(config.getMinSessionTimeout());    zkServer.setMaxSessionTimeout(config.getMaxSessionTimeout());    cnxnFactory=ServerCnxnFactory.createFactory();    cnxnFactory.configure(config.getClientPortAddress(),config.getMaxClientCnxns());    cnxnFactory.startup(zkServer);  } catch (  InterruptedException e) {    LOG.warn("Server interrupted",e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  int nodeType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  nodeType=(int)entityNode.getNodeType();  assertEquals("entityNodeType",6,nodeType);}  }
class C{  public boolean removeChild(V orphan){  return removeVertex(orphan);}  }
class C{  public boolean isInMemoryDb(){  return path.equalsIgnoreCase(MEMORY_DB_PATH);}  }
class C{  @SuppressWarnings("unchecked") public void registerDefaultDeviceTypes(){  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {    String key=entry.getKey();    String value=entry.getValue();    try {      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));    } catch (    ClassNotFoundException e) {      e.printStackTrace();    }  }}  }
class C{  @Inline @Entrypoint public static long longFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_LONG_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().longRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public GlobalMemorySubjectData(PermissionService service){  super(service);}  }
class C{  static public final boolean randomBoolean(){  return random.nextBoolean();}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("quad iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=(float)quad.getX1();    coords[1]=(float)quad.getY1();    type=SEG_MOVETO;  } else {    coords[0]=(float)quad.getCtrlX();    coords[1]=(float)quad.getCtrlY();    coords[2]=(float)quad.getX2();    coords[3]=(float)quad.getY2();    type=SEG_QUADTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 2);  }  return type;}  }
class C{  public static void createDirs(File target) throws AdeUsageException {  if (!target.exists() && !target.mkdirs() && !target.exists()) {    throw new AdeUsageException("Failed creating directory " + target.getPath());  }}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public void close(){  try {    isClosed=true;    if (rtcpTransmitter != null)     rtcpTransmitter.close();    if (rtpReceiver != null) {      rtpReceiver.close();    }    if (rtcpReceiver != null) {      rtcpReceiver.close();    }    rtpStreamListener=null;  } catch (  Exception e) {  }}  }
class C{  void foo(Param param,String s1){  bar(param.getS(),s1);}  }
class C{  private static final byte[] fillData(byte[] data){  RAND.nextBytes(data);  return data;}  }
class C{  private void do_loadContactLists(){  debug(TAG,"load contact lists");  ContactList cl;  try {    cl=getDefaultContactList();  } catch (  ImException e1) {    debug(TAG,"couldn't read default list");    cl=null;  }  if (cl == null) {    String generalGroupName=mContext.getString(R.string.buddies);    Collection<Contact> contacts=new ArrayList<Contact>();    XmppAddress groupAddress=new XmppAddress(generalGroupName);    cl=new ContactList(groupAddress,generalGroupName,true,contacts,this);    cl.setDefault(true);    mDefaultContactList=cl;    notifyContactListCreated(cl);  }  if (mConnection != null) {    for (    RosterEntry rEntry : mRoster.getEntries()) {      String address=rEntry.getUser();      String name=rEntry.getName();      if (mUser.getAddress().getBareAddress().equals(address))       continue;      Contact contact=getContact(address);      if (contact == null) {        XmppAddress xAddr=new XmppAddress(address);        if (name == null || name.length() == 0)         name=xAddr.getUser();        contact=new Contact(xAddr,name);      }      if (!cl.containsContact(contact)) {        try {          cl.addExistingContact(contact);        } catch (        ImException e) {          debug(TAG,"could not add contact to list: " + e.getLocalizedMessage());        }      }      int subStatus=subStatus=Imps.ContactsColumns.SUBSCRIPTION_STATUS_NONE;      if (rEntry.getStatus() == RosterPacket.ItemStatus.SUBSCRIPTION_PENDING)       subStatus=Imps.ContactsColumns.SUBSCRIPTION_STATUS_SUBSCRIBE_PENDING;      int subType=0;      if (rEntry.getType() == RosterPacket.ItemType.both)       subType=Imps.ContactsColumns.SUBSCRIPTION_TYPE_BOTH; else       if (rEntry.getType() == RosterPacket.ItemType.none)       subType=Imps.ContactsColumns.SUBSCRIPTION_TYPE_NONE; else       if (rEntry.getType() == RosterPacket.ItemType.to) {        subType=Imps.ContactsColumns.SUBSCRIPTION_TYPE_TO;      } else       if (rEntry.getType() == RosterPacket.ItemType.from) {        subType=Imps.ContactsColumns.SUBSCRIPTION_TYPE_FROM;      } else       if (rEntry.getType() == RosterPacket.ItemType.remove)       subType=Imps.ContactsColumns.SUBSCRIPTION_TYPE_REMOVE;      try {        mContactListManager.getSubscriptionRequestListener().onSubScriptionChanged(contact,mProviderId,mAccountId,subStatus,subType);      } catch (      RemoteException re) {      }    }  }  notifyContactListLoaded(cl);  notifyContactListsLoaded();}  }
class C{  public void resolve(ClassScope upperScope){  if (this.binding != null && this.binding instanceof LocalTypeBinding) {    upperScope.referenceCompilationUnit().record((LocalTypeBinding)this.binding);  }  resolve();  updateMaxFieldCount();}  }
class C{  static public void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  public void insert(String name,boolean is_inclusive){  if (states.containsKey(name))   return;  Integer code=new Integer(numStates++);  states.put(name,code);  if (is_inclusive)   inclusive.addElement(code);}  }
class C{  private void editSensor(Sensor sensor){  StandardDialog dialog=new StandardDialog();  dialog.setTitle("Edit Sensor");  AbstractSensorPanel sensorPanel=null;  if (sensor instanceof SmellSensor) {    sensorPanel=new SmellSensorPanel(entity,(SmellSensor)sensor);  } else   if (sensor instanceof TileSensor) {    sensorPanel=new TileSensorPanel(entity,(TileSensor)sensor);  } else   if (sensor instanceof Hearing) {    sensorPanel=new HearingSensorPanel(entity,(Hearing)sensor);  }  dialog.setContentPane(sensorPanel);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (!dialog.hasUserCancelled()) {    sensorPanel.commitChanges();  }}  }
class C{  public void removeCountryListener(CountryListener listener){synchronized (mListeners) {    ListenerTransport transport=mListeners.get(listener);    if (transport != null) {      mListeners.remove(listener);      mService.removeCountryListener(transport);    }  }}  }
class C{  protected void uninstallComponents(){  if (rendererPane != null) {    tree.remove(rendererPane);  }}  }
class C{  public static void cancelRetryAlarm(Context context,PendingIntent intent){  if (sLogger.isActivated()) {    sLogger.debug("Stop retry configuration update");  }  AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  am.cancel(intent);}  }
class C{  public static String toString(Throwable e){  StringWriter sw=new StringWriter();  e.printStackTrace(new PrintWriter(sw));  return sw.toString();}  }
class C{  public ProtocolCodecFilter(ProtocolCodecFactory factory){  if (factory == null) {    throw new IllegalArgumentException("factory");  }  this.factory=factory;}  }
class C{  private void checkTranslucencySupport(){  translucencySupported=window.getGraphicsConfiguration().getDevice().isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.TRANSLUCENT);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Bundle args=getArguments();  if (args != null) {    mLabel=args.getCharSequence("label",mLabel);  }}  }
class C{  private ProjectTypePredicate(final Predicate<ProjectType> delegate){  this.delegate=delegate;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"movsx");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a movsx instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,operands.get(1),true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final String sourceOperand=sourceResult.getRegister();  final String destinationOperand=Helpers.getLeafValue(operands.get(0).getRootNode());  final OperandSize destSize=Helpers.getRegisterSize(destinationOperand);  final OperandSize sourceSize=sourceResult.getSize();  final TranslationResult extendedSign=Helpers.extendSign(environment,offset,sourceOperand,sourceSize,destSize);  instructions.addAll(extendedSign.getInstructions());  offset=baseOffset + instructions.size();  if (destSize == environment.getArchitectureSize()) {    instructions.add(ReilHelpers.createStr(offset,destSize,extendedSign.getRegister(),destSize,destinationOperand));  } else {    Helpers.moveAndMask(environment,offset,extendedSign.getSize(),extendedSign.getRegister(),destinationOperand,instructions);  }}  }
class C{  public int size(){  return count;}  }
class C{  public void addHeader(String header,Object value){  _headers.put(header,value);}  }
class C{  synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    controller().sendQsiMessage(QsiMessage.getClearStatus(),null);    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.884 -0500",hash_original_method="D685C2FA386E3559D94DAB46E30EF0B9",hash_generated_method="C2DDB97E7C57BEF40BF526EA65D8CE24") public boolean dismissPopup(){  if (isShowingPopup()) {    getListPopupWindow().dismiss();    ViewTreeObserver viewTreeObserver=getViewTreeObserver();    if (viewTreeObserver.isAlive()) {      viewTreeObserver.removeGlobalOnLayoutListener(mOnGlobalLayoutListener);    }  }  return true;}  }
class C{  private static int extractEventHeader(ReplicatorRuntime runtime,BinlogReader position,byte[] header) throws IOException, ReplicatorException, InterruptedException {  int eventLength;  readDataFromBinlog(runtime,position,header,0,header.length,60);  eventLength=(int)LittleEndianConversion.convert4BytesToLong(header,MysqlBinlog.EVENT_LEN_OFFSET) - header.length;  return eventLength;}  }
class C{  private WebEmbed handleRendered(Element e){  if (!"IFRAME".equals(e.getTagName())) {    return null;  }  IFrameElement iframe=IFrameElement.as(e);  if (!iframe.getSrc().isEmpty()) {    return null;  }  Document iframeDoc=iframe.getContentDocument();  if (iframeDoc == null) {    return null;  }  NodeList blocks=iframeDoc.getElementsByTagName("blockquote");  if (blocks.getLength() < 1) {    return null;  }  Element tweetBlock=Element.as(blocks.getItem(0));  String id=tweetBlock.getAttribute("data-tweet-id");  if (id.isEmpty()) {    return null;  }  return new WebEmbed(e,"twitter",id,null);}  }
class C{  public boolean canShowBalloon(KMLAbstractFeature feature){  KMLBalloonStyle style=(KMLBalloonStyle)feature.getSubStyle(new KMLBalloonStyle(null),KMLConstants.NORMAL);  boolean isBalloonHidden="hide".equals(style.getDisplayMode());  boolean hasBalloonStyle=style.hasStyleFields() && !style.hasField(AVKey.UNRESOLVED);  return (hasBalloonStyle || !WWUtil.isEmpty(feature.getDescription()) || feature.getExtendedData() != null) && !isBalloonHidden;}  }
class C{  public boolean isSetSyncRequest(){  return this.syncRequest != null;}  }
class C{  public void pauseAll(){  getDownloadTaskManager().pauseAll(null);}  }
class C{  public void paste(String text){  text=text.replaceAll("(\u001B|[\u0080-\u009F])","");  boolean bracketed=isDecsetInternalBitSet(DECSET_BIT_BRACKETED_PASTE_MODE);  if (bracketed)   mSession.write("\033[200~");  mSession.write(text);  if (bracketed)   mSession.write("\033[201~");}  }
class C{  public IndexBuilder addColumns(String... names){  return addColumns(true,names);}  }
class C{  LocalDate withLocalMillis(long newMillis){  newMillis=iChronology.dayOfMonth().roundFloor(newMillis);  return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis,getChronology()));}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventSender,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  final ICvsFiles cvsFiles;  try {    cvsFiles=scanFileSystem(clientEnvironment);  } catch (  IOException ex) {    throw new IOCommandException(ex);  }  final Requests requests=new Requests(CommandRequest.COMMIT,clientEnvironment);  requests.addArgumentRequest(isForceCommit(),"-f");  requests.addArgumentRequest(isRecursive(),"-R");  requests.addArgumentRequest(isNoModuleProgram(),"-n");  requests.addArgumentRequest(getToRevisionOrBranch(),"-r");  addFileRequests(cvsFiles,requests,clientEnvironment);  requests.addMessageRequests(CommandUtils.getMessageNotNull(getMessage()));  requests.addLocalPathDirectoryRequest();  addArgumentRequests(requests);  final IRequestsProgressHandler requestsProgressHandler=new FileStateRequestsProgressHandler(new RangeProgressViewer(progressViewer,0.0,0.5),cvsFiles);  final ICvsListener responseProgressHandler=new FileInfoAndMessageResponseProgressHandler(new RangeProgressViewer(progressViewer,0.5,1.0),cvsFiles,EXAM_DIR);  final ICvsListener commitParser=new CommitParser(eventSender,clientEnvironment.getCvsFileSystem());  final ICvsListener parser=new DualListener(commitParser,responseProgressHandler);  parser.registerListeners(listenerRegistry);  try {    return requestProcessor.processRequests(requests,requestsProgressHandler);  }  finally {    parser.unregisterListeners(listenerRegistry);  }}  }
class C{  public static boolean available(int port){  if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {    throw new IllegalArgumentException("Invalid start port: " + port);  }  ServerSocket ss=null;  DatagramSocket ds=null;  try {    ss=new ServerSocket(port);    ss.setReuseAddress(true);    ds=new DatagramSocket(port);    ds.setReuseAddress(true);    return true;  } catch (  IOException e) {  } finally {    if (ds != null) {      ds.close();    }    if (ss != null) {      try {        ss.close();      } catch (      IOException e) {      }    }  }  return false;}  }
class C{  protected void doPrintFooter(){}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private BigDecimal excludeWaterTax(Installment installment,BigDecimal balanceDemand,BigDecimal waterTax){  BigDecimal demand=balanceDemand;  Date waterTaxEffectiveDate=PropertyTaxUtil.getWaterTaxEffectiveDateForPenalty();  if (installment.getFromDate().before(waterTaxEffectiveDate) && !propertyTaxUtil.between(waterTaxEffectiveDate,installment.getFromDate(),installment.getToDate())) {    demand=demand.subtract(waterTax);  }  return demand;}  }
class C{  public static Range iterateZBounds(XYZDataset dataset,boolean includeInterval){  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  int seriesCount=dataset.getSeriesCount();  for (int series=0; series < seriesCount; series++) {    int itemCount=dataset.getItemCount(series);    for (int item=0; item < itemCount; item++) {      double value=dataset.getZValue(series,item);      if (!Double.isNaN(value)) {        minimum=Math.min(minimum,value);        maximum=Math.max(maximum,value);      }    }  }  if (minimum == Double.POSITIVE_INFINITY) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  public static String padRightAligned(String o,int len){  if (o.length() >= len) {    return o;  }  return whitespace(len - o.length()) + o;}  }
class C{  public boolean isTLS12(){  return tls12;}  }
class C{  public void textAlign(int alignX,int alignY){  textAlign=alignX;  textAlignY=alignY;}  }
class C{  public GeocoderParams(Context context,Locale locale){  mLocale=locale;  mPackageName=context.getPackageName();}  }
class C{  private void scanIdentifier(StringBuffer result){  for (; ; ) {    char ch=this.readChar();    if (((ch < 'A') || (ch > 'Z')) && ((ch < 'a') || (ch > 'z')) && ((ch < '0') || (ch > '9'))&& (ch != '_')&& (ch != '.')&& (ch != ':')&& (ch != '-')&& (ch <= '\u007E')) {      this.unreadChar(ch);      return;    }    result.append(ch);  }}  }
class C{  public void testFailureNotifications() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(1000);  HostAddress address=HostAddressService.getByName(UNKNOWN_IP);  PingResponse response=has.isReachable(address);  assertEquals("General invocation",has.getEnabledMethodNames().size(),response.getNotifications().size());  for (  PingNotification notification : response.getNotifications()) {    logger.info("Notification: " + notification.toString());  }}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(){  return new Builder<Comparable>(Ordering.natural()).create();}  }
class C{  public static LongTag parseLong(String mojangson) throws MojangsonParseException {  Character lastChar=mojangson.charAt(mojangson.length() - 1);  if (lastChar.toString().toLowerCase().charAt(0) == MojangsonToken.LONG_SUFFIX.getSymbol()) {    mojangson=mojangson.substring(0,mojangson.length() - 1);  }  try {    return new LongTag(Long.valueOf(mojangson));  } catch (  NumberFormatException nfe) {    throw new MojangsonParseException("\'" + mojangson + "\'",MojangsonParseException.ParseExceptionReason.INVALID_FORMAT_NUM);  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public SavedStateScrolling(Parcel in){  Parcelable superState=in.readParcelable(RecyclerView.class.getClassLoader());  this.superState=superState != null ? superState : EMPTY_STATE;  prevFirstVisiblePosition=in.readInt();  prevFirstVisibleChildHeight=in.readInt();  prevScrolledChildrenHeight=in.readInt();  prevScrollY=in.readInt();  scrollY=in.readInt();  childrenHeights=new SparseIntArray();  final int numOfChildren=in.readInt();  if (0 < numOfChildren) {    for (int i=0; i < numOfChildren; i++) {      final int key=in.readInt();      final int value=in.readInt();      childrenHeights.put(key,value);    }  }}  }
class C{  public TypedFile(String mimeType,File file){  if (mimeType == null) {    throw new NullPointerException("mimeType");  }  if (file == null) {    throw new NullPointerException("file");  }  this.mimeType=mimeType;  this.file=file;}  }
class C{  public void configureOption2(String value){  super.configureOption2(value);  log.debug("configureOption2: " + value);  setCommandStationType(value);}  }
class C{  public static void write(int px1,int py1,int px2,int py2,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RECTANGLE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RECTANGLE);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(px1);  dos.writeInt(py1);  dos.writeInt(px2);  dos.writeInt(py2);  properties.write(dos);}  }
class C{  public static <T>T withPrintWriter(File file,String charset,@ClosureParams(value=SimpleType.class,options="java.io.PrintWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newPrintWriter(file,charset),closure);}  }
class C{  private DateTime parseDateString(String dateStamp) throws Exception {  final String[] regex={"([A-Za-z]{3} [0-9]{1,2}, [0-9]{4} [0-9]{1,2}:[0-9]{2}:[0-9]{2} [A-Z]{2}) (.+)"};  final String datePattern="MMM dd, YYYY hh:mm:ss aa";  String[] groups=new String[2];  int index=SSHDialog.match(dateStamp,regex,groups);  if (index != 0) {    throw new Exception("Unable to parse date and timezone: " + dateStamp);  }  String dateTime=groups[0];  String timeZone=groups[1];  return DateTime.parse(dateTime,DateTimeFormat.forPattern(datePattern).withZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone(timeZone))));}  }
class C{  public RandomLocationTransformer(Dimension d){  this(d,new Date().getTime());}  }
class C{  public boolean isVmOffRequired(){  return vmOffRequired;}  }
class C{  public void writeBytes(final byte[] bytes){  if (bytes == null)   return;  if (currentBitIndex < Byte.SIZE - 1) {    for (int i=0; i < bytes.length; i++) {      write(bytes[i],Byte.SIZE);    }  } else {    byteStream.write(bytes,0,bytes.length);  }}  }
class C{  public boolean isInitialize(){  return !editors.isEmpty();}  }
class C{  public static int findNextNewLineChar(CharSequence s,int start){  for (int i=start; i < s.length(); i++) {    if (s.charAt(i) == '\n') {      return i;    }  }  return -1;}  }
class C{  @AndroidOnly("dalvikvm specific") public void test_streams() throws IOException, InterruptedException {  Process p=javaProcessBuilder().start();  assertNotNull(p.getInputStream());  assertNotNull(p.getErrorStream());  assertNotNull(p.getOutputStream());}  }
class C{  private boolean checkStorageGroupInAnyMaskingView(StorageSystem storage,CIMObjectPath storageGroupPath) throws Exception {  CloseableIterator<CIMObjectPath> cimPathItr=null;  try {    _log.info("Verifying SG is already part of masking view");    cimPathItr=getAssociatorNames(storage,storageGroupPath,null,SYMM_LUN_MASKING_VIEW,null,null);    if (cimPathItr != null && cimPathItr.hasNext()) {      _log.info("SG already part of masking view found");      return true;    }  } catch (  Exception e) {    _log.error("Failed trying to check if storage group is in a parent storage group",storageGroupPath.getObjectName(),e);    throw e;  } finally {    closeCIMIterator(cimPathItr);  }  return false;}  }
class C{  public JsonObject toJSON(){  JsonBuilder<JsonObject> obj=JsonObject.builder();  for (  ProfilerSection section : sections()) {    if (section != null) {      JsonObject object=section.toJSON();      if (section.name() != null && object != null)       obj.value(section.name(),object);    }  }  return obj.done();}  }
class C{  public XhtmlDocument appendHead(Element value){  head.addElement(value);  return (this);}  }
class C{  public static double distanceSegmentSegment(Coordinate A,Coordinate B,Coordinate C,Coordinate D){  if (A.equals3D(B))   return distancePointSegment(A,C,D);  if (C.equals3D(B))   return distancePointSegment(C,A,B);  double a=Vector3D.dot(A,B,A,B);  double b=Vector3D.dot(A,B,C,D);  double c=Vector3D.dot(C,D,C,D);  double d=Vector3D.dot(A,B,C,A);  double e=Vector3D.dot(C,D,C,A);  double denom=a * c - b * b;  if (Double.isNaN(denom))   throw new IllegalArgumentException("Ordinates must not be NaN");  double s;  double t;  if (denom <= 0.0) {    s=0;    if (b > c)     t=d / b; else     t=e / c;  } else {    s=(b * e - c * d) / denom;    t=(a * e - b * d) / denom;  }  if (s < 0)   return distancePointSegment(A,C,D); else   if (s > 1)   return distancePointSegment(B,C,D); else   if (t < 0)   return distancePointSegment(C,A,B); else   if (t > 1) {    return distancePointSegment(D,A,B);  }  double x1=A.x + s * (B.x - A.x);  double y1=A.y + s * (B.y - A.y);  double z1=A.z + s * (B.z - A.z);  double x2=C.x + t * (D.x - C.x);  double y2=C.y + t * (D.y - C.y);  double z2=C.z + t * (D.z - C.z);  return distance(new Coordinate(x1,y1,z1),new Coordinate(x2,y2,z2));}  }
class C{  protected void println(String line){  if (output instanceof PrintStream) {    ((PrintStream)output).println(line);  } else {    ((PrintWriter)output).println(line);  }}  }
class C{  private void clearUpgradePath(Product product){  if (product != null) {    for (    ProductReference pr : product.getAllCompatibleProducts()) {      ds.remove(pr);    }    product.getAllCompatibleProducts().clear();    ArrayList<ProductReference> references=new ArrayList<ProductReference>(product.getCompatibleProductsTarget());    for (    ProductReference pr : references) {      pr.getSourceProduct().getAllCompatibleProducts().remove(pr);      ds.remove(pr);    }    product.getCompatibleProductsTarget().clear();  }}  }
class C{  public static AddHealthListenerRequest create(GemFireHealthConfig cfg){  if (cfg == null) {    throw new NullPointerException(LocalizedStrings.AddHealthListenerRequest_NULL_GEMFIREHEALTHCONFIG.toLocalizedString());  }  AddHealthListenerRequest m=new AddHealthListenerRequest();  m.cfg=cfg;  return m;}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] contents){  if (elementCount > contents.length) {    Class<?> ct=contents.getClass().getComponentType();    contents=(T[])Array.newInstance(ct,elementCount);  }  System.arraycopy(elementData,0,contents,0,elementCount);  if (elementCount < contents.length) {    contents[elementCount]=null;  }  return contents;}  }
class C{  public void extend(RuleGrounding other){  if (other.isFailed()) {    groundings.clear();    return;  }  extend(other.getAlternatives());}  }
class C{  protected FetchRequest(){  _parameters.set(new Parameter("mode","fetch_request"));  if (DEBUG)   _log.debug("Created empty fetch request.");}  }
class C{  public void beforeLayout(StructDescription desc,List<StructFieldDescription> aggregatedFields){}  }
class C{  protected void doSetValue(Object value){  Assert.isTrue(text != null && (value instanceof String));  text.removeModifyListener(getModifyListener());  text.setText((String)value);  text.addModifyListener(getModifyListener());}  }
class C{  public static String xmlCDataEscape(String s){  s=CONTROL_MATCHER.removeFrom(s);  int found=s.indexOf("]]>");  if (found == -1) {    return s;  }  StringBuilder sb=new StringBuilder();  int prev=0;  do {    sb.append(s.substring(prev,found + 3));    sb.append("]]&gt;<![CDATA[");    prev=found + 3;  } while ((found=s.indexOf("]]>",prev)) != -1);  sb.append(s.substring(prev));  return sb.toString();}  }
class C{  public String snapshot(){  return this.snapshot;}  }
class C{  public ConversionException(String message){  super(message);}  }
class C{  public static List<org.oscm.vo.VOTechnicalServiceOperation> convertToApiVOTechnicalServiceOperation(List<org.oscm.internal.vo.VOTechnicalServiceOperation> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOTechnicalServiceOperation> newVO=new ArrayList<org.oscm.vo.VOTechnicalServiceOperation>();  for (  org.oscm.internal.vo.VOTechnicalServiceOperation tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public boolean put(double lat,double lon,T obj){  return put(new QuadTreeLeaf<T>(lat,lon,obj));}  }
class C{  public static Map<String,Object> addPrefToMap(GenericValue rec,Map<String,Object> userPrefMap) throws GeneralException {  String prefDataType=rec.getString("userPrefDataType");  if (UtilValidate.isEmpty(prefDataType)) {    userPrefMap.put(rec.getString("userPrefTypeId"),rec.getString("userPrefValue"));  } else {    userPrefMap.put(rec.getString("userPrefTypeId"),ObjectType.simpleTypeConvert(rec.get("userPrefValue"),prefDataType,null,null,false));  }  return userPrefMap;}  }
class C{  public ExtendedGeneralPath(){  path=new GeneralPath();}  }
class C{  @Override public void invalidate(){  super.invalidate();}  }
class C{  public void message(XNetReply msg){}  }
class C{  protected List<XRGlyphCacheEntry>[] seperateGlyphTypes(List<XRGlyphCacheEntry> glyphList,boolean containsLCDGlyphs){  ArrayList<XRGlyphCacheEntry> lcdGlyphs=null;  ArrayList<XRGlyphCacheEntry> grayGlyphs=null;  for (  XRGlyphCacheEntry cacheEntry : glyphList) {    if (cacheEntry.isGrayscale(containsLCDGlyphs)) {      if (grayGlyphs == null) {        grayGlyphs=new ArrayList<XRGlyphCacheEntry>(glyphList.size());      }      cacheEntry.setGlyphSet(grayGlyphSet);      grayGlyphs.add(cacheEntry);    } else {      if (lcdGlyphs == null) {        lcdGlyphs=new ArrayList<XRGlyphCacheEntry>(glyphList.size());      }      cacheEntry.setGlyphSet(lcdGlyphSet);      lcdGlyphs.add(cacheEntry);    }  }  return new List[]{grayGlyphs,lcdGlyphs};}  }
class C{  @Override public List<ConnectorTableMetadata> listTableMetadatas(ConnectorSession session,String schemaName,List<String> tableNames){  List<Table> tables=((MetacatHiveMetastore)metastore).getTablesByNames(schemaName,tableNames);  if (tables != null) {    return tables.stream().map(null).collect(Collectors.toList());  }  return Lists.newArrayList();}  }
class C{  private void countAndFinishUpdating(EnumerationContext ctx,AtomicInteger numOfUpdates){  if (numOfUpdates.decrementAndGet() == 0) {    ctx.computeStates.clear();    logInfo("Finished updating compute states");    if (ctx.virtualMachines.isEmpty()) {      if (ctx.enumNextPageLink == null) {        ctx.subStage=EnumerationSubStages.DELETE_LOCAL_VMS;      } else {        ctx.subStage=EnumerationSubStages.LIST_REMOTE_VMS;      }    } else {      ctx.subStage=EnumerationSubStages.CREATE_LOCAL_VMS;    }    handleSubStage(ctx);  }}  }
class C{  public void updateCapabilitiesTimeLastResponse(ContactId contact,long timestampOfLastResponse){  String contactNumber=contact.toString();  if (sLogger.isActivated()) {    sLogger.debug("Update the time of last capabilities response for ".concat(contactNumber));  }synchronized (mContactInfoCache) {    ContactInfo contactInfo=getContactInfoInternal(contact);    Capabilities capabilities=contactInfo.getCapabilities();    CapabilitiesBuilder capaBuilder=new CapabilitiesBuilder(capabilities);    capaBuilder.setTimestampOfLastResponse(timestampOfLastResponse);    contactInfo.setCapabilities(capaBuilder.build());    ContentValues values=new ContentValues();    values.put(KEY_CAPABILITY_TIMESTAMP_LAST_RESPONSE,timestampOfLastResponse);    Uri uri=Uri.withAppendedPath(CONTENT_URI,contactNumber);    mLocalContentResolver.update(uri,values,null,null);  }}  }
class C{  public void disconnected(MqttException reason){  final String methodName="disconnected";  log.fine(CLASS_NAME,methodName,"633",new Object[]{reason});  this.connected=false;  try {    if (cleanSession) {      clearState();    }    pendingMessages.clear();    pendingFlows.clear();synchronized (pingOutstandingLock) {      pingOutstanding=0;    }  } catch (  MqttException e) {  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public boolean isSuccessReportRequested(){  return mSuccessReportOption;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(NUMBER)) {    crlNumber=null;  } else {    throw new IOException("Attribute name not recognized by" + " CertAttrSet:" + extensionName + ".");  }  encodeThis();}  }
class C{  public void addIssuerName(byte[] iss_name) throws IOException {  if (iss_name == null) {    throw new NullPointerException("iss_name == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=new Name(iss_name).getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }}  }
class C{  public Bundler putSerializable(String key,Serializable value){  bundle.putSerializable(key,value);  return this;}  }
class C{  private int timeDelay(){  attempts++;  if (attempts > 13) {    return randomBase * 6 * 5;  }  if (attempts > 7) {    return randomBase * 6;  }  return randomBase;}  }
class C{  protected VersionTag fetchRemoteVersionTag(Object key){  VersionTag tag=null;  assert this.dataPolicy != DataPolicy.REPLICATE;  TransactionId txId=cache.getCacheTransactionManager().suspend();  try {    boolean retry=true;    InternalDistributedMember member=getRandomReplicate();    while (retry) {      try {        if (member == null) {          break;        }        FetchVersionResponse response=RemoteFetchVersionMessage.send(member,this,key);        tag=response.waitForResponse();        retry=false;      } catch (      RemoteOperationException e) {        member=getRandomReplicate();        if (member != null) {          if (logger.isDebugEnabled()) {            logger.debug("Retrying RemoteFetchVersionMessage on member:{}",member);          }        }      }    }  }  finally {    if (txId != null) {      cache.getCacheTransactionManager().resume(txId);    }  }  return tag;}  }
class C{  public String isDropOnTreeComponentPossible(Component container,TreeNode treeNode,Transferable transferable,int childIndex){  try {    if (transferable.isDataFlavorSupported(ValueSourceTreeNode.VALUE_SOURCE_FLAVOR)) {      return canImportValueSource(container,treeNode,transferable,childIndex);    } else     if (transferable.isDataFlavorSupported(RangeAxisConfigTreeNode.RANGE_AXIS_CONFIG_FLAVOR)) {      return canImportRangeAxis(container,treeNode,childIndex,container);    } else     if (transferable.isDataFlavorSupported(DataTableColumnCollection.DATATABLE_COLUMN_COLLECTION_FLAVOR)) {      return canImportDataTableColumnCollection(container,treeNode,transferable,childIndex);    }    return null;  } catch (  IOException e) {    e.printStackTrace();    return null;  }catch (  UnsupportedFlavorException e) {    e.printStackTrace();    return null;  }}  }
class C{  @Override protected void createHandshakeBytes(){  handshakeBytes=new byte[Constants.HANDSHAKE_SIZE];  handshakeBytes[0]=0;  handshakeBytes[1]=0;  handshakeBytes[2]=0;  handshakeBytes[3]=0;  handshakeBytes[4]=9;  handshakeBytes[5]=0;  handshakeBytes[6]=124;  handshakeBytes[7]=2;  byte[] rndBytes=new byte[Constants.HANDSHAKE_SIZE - 8];  random.nextBytes(rndBytes);  System.arraycopy(rndBytes,0,handshakeBytes,8,(Constants.HANDSHAKE_SIZE - 8));}  }
class C{  @Override public void undo(){  foreignEntity.removeForeignKeyRelationship(association,true);  primaryEntity.removePrimaryKeyRelationship(association,true);}  }
class C{  public Set<String> topics(){  return recordsByTopic.keySet();}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(MAC_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public void asTimeOnly(MutableDateTime t){  if (length != 8 && length != 12)   throw new FIXValueFormatException("Not a time only");  t.setHourOfDay(getDigits(2,offset + 0));  t.setMinuteOfHour(getDigits(2,offset + 3));  t.setSecondOfMinute(getDigits(2,offset + 6));  t.setMillisOfSecond(length == 12 ? getDigits(3,offset + 9) : 0);}  }
class C{  protected int reflectOperator(int op){switch (op) {case TOK_EQ:    return TOK_EQ;case TOK_NE:  return TOK_NE;case TOK_LT:return TOK_GT;case TOK_GE:return TOK_LE;case TOK_LE:return TOK_GE;case TOK_GT:return TOK_LT;default :Support.assertionFailed("unknown operator: " + op);throw new Error("this line of code can never be executed");}}  }
class C{  public int keyCount(){  int count=0, nextKey;  for (nextKey=0; nextKey < mData.length; count++) {    nextKey+=(0xFF & (mData[nextKey] + 1));  }  return count;}  }
class C{  public boolean isQuery(){  return (_flags & DNSConstants.FLAGS_QR_MASK) == DNSConstants.FLAGS_QR_QUERY;}  }
class C{  @Override public boolean performAtomicTransaction() throws AdeException {  try {    List<Rule> currentRules=getRuleListAtomic();    List<Rule> rulesToAdd=getRulesToAdd(currentRules);    List<Rule> rulesToDelete=getRulesToDelete(currentRules);    List<Rule> rulesToUpdate=getRulesToUpdate(currentRules,rulesToDelete);    List<String> batchList=new ArrayList<String>();    deleteRules(batchList,rulesToDelete);    addRules(batchList,rulesToAdd);    updateRules(batchList,rulesToUpdate);    executeBatch(batchList);  } catch (  SQLException e) {    throw new AdeInternalException("An error occurred while trying to update " + RULES_TABLE,e);  }  return true;}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  public TFloatHashSetDecorator(TFloatHashSet set){  super();  this._set=set;}  }
class C{  public CRLReasonCodeExtension(boolean critical,int reason) throws IOException {  this.extensionId=PKIXExtensions.ReasonCode_Id;  this.critical=critical;  this.reasonCode=reason;  encodeThis();}  }
class C{  public String toString(){  return (constant_pool[this_class].toString(constant_pool));}  }
class C{  public void addSuperInterface(InterfaceType type){  addSuperInterfaceNoBidirectionalUpdate(type);  type.addSubInterfaceNoBidirectionalUpdate(this);}  }
class C{  public void capabilitiesFilterChanged(CapabilitiesFilterChangeEvent e){  if (e.getFilter() == null)   updateCapabilitiesFilter(null); else   updateCapabilitiesFilter((Capabilities)e.getFilter().clone());}  }
class C{  private void heapifyUp(int twopos,double cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur >= par) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  protected final void updateValue(FloatMatrix value,FloatMatrix update,final float rating,final float minRatings,final float maxRating,final float lambda,final float gamma){  float predicted=value.dot(update);  predicted=Math.min(predicted,maxRating);  predicted=Math.max(predicted,minRating);  float err=predicted - rating;  FloatMatrix part1=value.mul(lambda);  FloatMatrix part2=update.mul(err);  FloatMatrix part3=(part1.add(part2)).mul(-gamma);  value.addi(part3);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!isActive()) {    getQtys(false);    for (int i=0; i < m_qtys.length; i++) {      MRfQResponseLineQty qty=m_qtys[i];      if (qty.isActive()) {        qty.setIsActive(false);        qty.saveEx();      }    }  }  return success;}  }
class C{  public void changeCurrentMoment(String nextMomentId,long now){  if (nextMomentId == DEFAULT_END_ID || nextMomentId.equals(DEFAULT_END_ID)) {    mIsDone=true;    return;  }  mData.setCurrentMomentId(nextMomentId);  mData.getCurrentMoment().start(now);}  }
class C{  protected static String toAuthorization(String username,String password){  StringBuilder buffer=new StringBuilder();  buffer.append(username).append(':');  if (password != null) {    buffer.append(password);  }  return "Basic " + new String(Base64.encodeBase64(buffer.toString().getBytes()));}  }
class C{  public MExtensionFileFilter(final String extension,final String newDescription){  this();  if (extension != null) {    addExtension(extension);  }  if (newDescription != null) {    setDescription(newDescription);  }}  }
class C{  protected void close(){  AppletContext appletContext;  try {    appletContext=getAppletContext();  } catch (  Throwable e) {    appletContext=null;  }  if (appletContext == null) {    System.exit(0);  } else {    try {      appletContext.showDocument(new URL(getDocumentBase(),getParameter("PageURL")));    } catch (    MalformedURLException ex) {      ex.printStackTrace();    }  }}  }
class C{  public Sample(final double xValue,final double yValue,final double yPlusError,final double yMinusError,final double xPlusError,final double xMinusError,final String info){  this.xValue=xValue;  this.yValue=yValue;  this.xPlusError=xPlusError;  this.yPlusError=yPlusError;  this.xMinusError=xMinusError;  this.yMinusError=yMinusError;  this.info=info;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== IndexTableSegment ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_UID = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_UID[0],this.instance_UID[1],this.instance_UID[2],this.instance_UID[3],this.instance_UID[4],this.instance_UID[5],this.instance_UID[6],this.instance_UID[7],this.instance_UID[8],this.instance_UID[9],this.instance_UID[10],this.instance_UID[11],this.instance_UID[12],this.instance_UID[13],this.instance_UID[14],this.instance_UID[15]));  if (this.indexEditRate != null) {    sb.append("================== IndexEditRate ======================\n");    sb.append(this.indexEditRate.toString());  }  sb.append(String.format("index_start_position = 0x%x%n",this.index_start_position));  sb.append(String.format("index_duration = 0x%x%n",this.index_duration));  sb.append(String.format("edit_unit_byte_count = %d%n",this.edit_unit_byte_count));  sb.append(String.format("index_SID = %d%n",this.index_SID));  sb.append(String.format("body_SID = %d%n",this.body_SID));  sb.append(String.format("slice_count = %d%n",this.slice_count));  sb.append(String.format("pos_table_count = %d%n",this.pos_table_count));  if (this.indexEntryArray != null) {    sb.append(this.indexEntryArray.toString());  }  sb.append(String.format("ext_start_offset = 0x%x%n",this.ext_start_offset));  sb.append(String.format("vbe_byte_count = %d%n",this.vbe_byte_count));  return sb.toString();}  }
class C{  public ByteBuffer putFloat(float value){  return putInt(Numbers.floatToIntBits(value));}  }
class C{  public static void warning(File file,ErrorMessages message,int line,int column){  String msg=NL + "Warning";  if (file != null)   msg+=" in file \"" + file + "\"";  if (line >= 0)   msg=msg + " (line " + (line + 1)+ ")";  try {    err(msg + ": " + NL+ ErrorMessages.get(message));  } catch (  ArrayIndexOutOfBoundsException e) {    err(msg);  }  warnings++;  if (line >= 0) {    if (column >= 0)     showPosition(file,line,column); else     showPosition(file,line);  }}  }
class C{  public BaseSearchRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String q){  super(requestUrl,client,options,BaseSearchCollectionResponse.class,ISearchCollectionPage.class);  if (q != null) {    addQueryOption(new QueryOption("q",q));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ReactionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static void requestLocationForBluetooth(Activity activity){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (ContextCompat.checkSelfPermission(activity,android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {      toast(activity,"Without Location permission android bluetooth scan doesn't work");      ActivityCompat.requestPermissions(activity,new String[]{android.Manifest.permission.ACCESS_COARSE_LOCATION},0);    }    LocationHelper.requestLocation(activity);  }}  }
class C{  public AbstractValidatorImplementation(final Context context,final int resourceId,final boolean result){  super(context,resourceId);  this.result=result;}  }
class C{  protected void init(){}  }
class C{  public boolean isCurrent(char first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=isCurrent(second);  pos=start;  return rtn;}  }
class C{  public void putField(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTFIELD,owner,name,type);}  }
class C{  public void findAndUnInit(Object someObj){  if (someObj instanceof MouseDelegator) {    Debug.message("mousemodemenuitem","MouseModeMenuItem removing MouseDelegator.");    setMouseDelegator(null);  }}  }
class C{  Object execute() throws Exception {  if (object == player) {    player.trace("> " + assignVariable + " not set");    if (assignment) {      player.assign(assignVariable,player);    }    return null;  }  Class<?> clazz;  if (staticCall) {    clazz=Player.getClass(staticCallClass);  } else {    clazz=object.getClass();  }  Class<?>[] parameterTypes=new Class[args.length];  Object[] parameters=new Object[args.length];  for (int i=0; i < args.length; i++) {    Arg arg=args[i];    arg.execute();    parameterTypes[i]=arg.getValueClass();    parameters[i]=arg.getValue();  }  Method method=clazz.getMethod(methodName,parameterTypes);  returnClass=method.getReturnType();  try {    Object obj=method.invoke(object,parameters);    if (assignment) {      player.assign(assignVariable,obj);    }    return obj;  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    Throwable t=e.getTargetException();    player.trace("> " + t.toString());    if (assignment) {      player.assign(assignVariable,player);    }  }  return null;}  }
class C{  public Promise<PeerSession> pickSession(final int uid,final int keyGroupId){  return null;}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  protected void createDefaultTheme(){  setCurrentTheme(s_theme);}  }
class C{  public GlassFish2xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.LOGGING,Boolean.FALSE);  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.FALSE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.HOSTNAME,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.REMOVE_DEFAULT_DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.ADMIN_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.JMS_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.IIOP_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.HTTPS_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.IIOPS_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.IIOP_MUTUAL_AUTH_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.JMX_ADMIN_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.DOMAIN_NAME,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.DEBUG_MODE,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.PORT_BASE,Boolean.TRUE);}  }
class C{  public static double calculateDiversity(ExampleSet exampleSet,LinkedList theResults){  Iterator<Example> reader=exampleSet.iterator();  int[][] predictionMatrix=new int[exampleSet.size()][2];  for (int i=0; reader.hasNext(); i++) {    Example e=reader.next();    Iterator it=theResults.iterator();    while (it.hasNext()) {      Hypothesis hypo=((Result)it.next()).getHypothesis();      if (hypo.applicable(e)) {        predictionMatrix[i][hypo.getPrediction()]++;      } else {        predictionMatrix[i][1 - hypo.getPrediction()]++;      }    }  }  double sum1=0.0d;  for (int i=0; i < predictionMatrix.length; i++) {    if (predictionMatrix[i][0] != 0 && predictionMatrix[i][1] != 0) {      double p0=(double)predictionMatrix[i][0] / (double)theResults.size();      double p1=(double)predictionMatrix[i][1] / (double)theResults.size();      sum1=sum1 + ((-1) * p0 * log2(p0)) + ((-1) * p1 * log2(p1));    }  }  double result=sum1 / predictionMatrix.length;  return result;}  }
class C{  public static WebElement swipeVerticalWaitVisibleAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By swipeElement,By elementVisible,int waitTimeInSeconds,int offset,int quantity,int durationInMilliSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(swipeElement);  Preconditions.checkNotNull(elementVisible);  WebElement elementPresent=augmentedFunctions.findElementPresentAfter(swipeElement,waitTimeInSeconds);  int x=elementPresent.getLocation().getX() + elementPresent.getSize().getWidth() / 2;  int y=elementPresent.getLocation().getY() + elementPresent.getSize().getHeight() / 2;  int swipe=getVerticalOffset(driver,y,offset);  for (int iteration=0; iteration < quantity; iteration++) {    driver.swipe(x,y,x,swipe,durationInMilliSeconds);    if (augmentedFunctions.isElementVisibleAfter(elementVisible,3)) {      return augmentedFunctions.findElementVisible(elementVisible);    }  }  throw new AssertionError(String.format("Swiped %s with an offest of %s times but element %s not found",quantity,offset,elementVisible));}  }
class C{  @DSComment("Private Method") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.916 -0500",hash_original_method="E5D7EFF0C51BEFD641F2F6FB80CD17F5",hash_generated_method="F96D3A2403620B571D209F169558FE70") private String normalize(String path,boolean discardRelativePrefix){  path=UrlUtils.canonicalizePath(path,discardRelativePrefix);  int colon=path.indexOf(':');  if (colon != -1) {    int slash=path.indexOf('/');    if (slash == -1 || colon < slash) {      path="./" + path;    }  }  return path;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:02.876 -0500",hash_original_method="2C3B764DDE8F79C85110BA90D40DB7B8",hash_generated_method="4E23B7FF5032A5785CD3E7D3ECD4A70A") public void close(){synchronized (this) {    if (mOpen) {      mOpen=false;      decRefsLocked(this.hashCode());    }  }}  }
class C{  public static void openBuildExplorer(final IBuildDefinition buildDefinition,final IQueuedBuild queuedBuild){  final IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();  try {    final IEditorPart editorPart=page.openEditor(new BuildExplorerEditorInput(TFSCommonUIClientPlugin.getDefault().getProductPlugin().getServerManager().getServer(buildDefinition.getBuildServer().getConnection()),buildDefinition),BuildExplorer.ID);    if (editorPart instanceof BuildExplorer) {      final BuildExplorer buildExplorer=(BuildExplorer)editorPart;      buildExplorer.setBuildDefinition(buildDefinition);      if (!buildDefinition.getBuildServer().getBuildServerVersion().isV1()) {        buildExplorer.setSelectedQueuedBuild(queuedBuild);      }      CodeMarkerDispatch.dispatch(CODEMARKER_OPEN_COMPLETE);    }  } catch (  final PartInitException e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean isEnRoute(String cc){  String first4digs=cc.substring(0,4);  if ((cc.length() == 15) && (first4digs.equals("2014") || first4digs.equals("2149")))   return isCreditCard(cc);  return false;}  }
class C{  public Rules(){  super();  returnType=Void.class;  maxInitializationDepth=5;  maxVariationDepth=10;  functionCrossoverProbability=0.5;  availableNodes=new ArrayList<Node>();}  }
class C{  @Provides @Config("dnsUpdateTimeToLive") public static Duration provideDnsUpdateTimeToLive(){  return Duration.standardHours(2);}  }
class C{  public void remove(int offset,int length){  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset == 0) {    System.arraycopy(_data,length,_data,0,_pos - length);  } else   if (_pos - length == offset) {  } else {    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));  }  _pos-=length;}  }
class C{  public void pauseFlusherForTesting(){  assert this.fp == null;  this.fp=new FlushPauser();  try {    addAsyncItem(this.fp,true);  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();    throw new IllegalStateException("unexpected interrupt in test code",ex);  }}  }
class C{  private boolean tell(final Player player,final String text){  if (getRidOfPlayerIfAlreadySpeaking(player,text)) {    return true;  }  if (engine.getCurrentState() == ConversationStates.IDLE) {    logger.debug("Attending player " + player.getName());    setAttending(player);  }  lastMessageTurn=SingletonRepository.getRuleProcessor().getTurn();  return engine.step(player,text);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  @Override public void updateClassifier(Instance instance) throws Exception {  int classIndex=(int)instance.value(instance.classIndex());  m_probOfClass[classIndex]+=instance.weight();  for (int a=0; a < instance.numValues(); a++) {    if (instance.index(a) == instance.classIndex() || instance.isMissing(a)) {      continue;    }    double numOccurences=instance.valueSparse(a) * instance.weight();    m_wordsPerClass[classIndex]+=numOccurences;    if (m_wordsPerClass[classIndex] < 0) {      throw new Exception("Can't have a negative number of words for class " + (classIndex + 1));    }    m_probOfWordGivenClass[classIndex][instance.index(a)]+=numOccurences;    if (m_probOfWordGivenClass[classIndex][instance.index(a)] < 0) {      throw new Exception("Can't have a negative conditional sum for attribute " + instance.index(a));    }  }}  }
class C{  public void start(boolean openRecentProject){  eventBus.addHandler(WindowActionEvent.TYPE,this);  eventBus.addHandler(ProjectActionEvent.TYPE,this);  readStateFromPreferences();  openRecentProject(openRecentProject);}  }
class C{  public void writeTraceAnalysis(XMLWriter writer){  writer.writeTag("traceAnalysis",new Attribute[]{new Attribute.Default<String>("fileName",options.logFileName)},true);}  }
class C{  public void testCipherSpi06() throws BadPaddingException, ShortBufferException, IllegalBlockSizeException {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  int len=10;  byte[] bbuf=new byte[len];  for (int i=0; i < bbuf.length; i++) {    bbuf[i]=(byte)i;  }  ByteBuffer bb1=ByteBuffer.wrap(bbuf);  ByteBuffer bbNull=null;  try {    cSpi.engineDoFinal(bbNull,bb1);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  try {    cSpi.engineDoFinal(bb1,bbNull);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  ByteBuffer bb2=ByteBuffer.allocate(len);  bb1.position(bb1.limit());  assertEquals("Incorrect result",0,cSpi.engineDoFinal(bb1,bb2));  bb1.position(0);  bb2.position(len - 2);  try {    cSpi.engineDoFinal(bb1,bb2);    fail("ShortBufferException must be thrown. Output buffer remaining: ".concat(Integer.toString(bb2.remaining())));  } catch (  ShortBufferException e) {  }  int pos=5;  bb1.position(pos);  bb2.position(0);  assertTrue("Incorrect result",cSpi.engineDoFinal(bb1,bb2) > 0);}  }
class C{  public void reset(){  mLabelCache.clear();}  }
class C{  @Action(value="/receipts/ajaxReceiptCreate-ajaxValidateDetailCodeNew") public String ajaxValidateDetailCodeNew() throws Exception {  final String code=parameters.get("code")[0];  final String index=parameters.get("index")[0];  final String codeorname=parameters.get("codeorname")[0];  final Accountdetailtype adt=(Accountdetailtype)getPersistenceService().find(accountDetailTypeQuery,Integer.valueOf(parameters.get(DETAILTYPEID)[0]));  if (adt == null) {    value=index + "~" + ERROR+ "#";    return RESULT;  }  final String table=adt.getFullQualifiedName();  final Class<?> service=Class.forName(table);  String simpleName=service.getSimpleName();  simpleName=simpleName.substring(0,1).toLowerCase() + simpleName.substring(1) + "Service";  final WebApplicationContext wac=WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());  final EntityTypeService entityService=(EntityTypeService)wac.getBean(simpleName);  entityList=(List<EntityType>)entityService.filterActiveEntities(code,-1,adt.getId());  if (entityList == null || entityList.isEmpty())   value=index + "~" + ERROR+ "#"; else {    if (entityList.size() > 1) {      value=index + "~" + ERROR+ "#";      return RESULT;    }    for (    final EntityType entity : entityList)     if (entity == null) {      value=index + "~" + ERROR+ "#";      break;    } else     if (codeorname.equalsIgnoreCase("both")) {      if (entity.getName().equals(code) || entity.getCode().equals(code)) {        value=index + "~" + entity.getEntityId()+ "~"+ entity.getName()+ "~"+ entity.getCode();        break;      } else       value=index + "~" + ERROR+ "#";    } else     if (entity.getCode().equals(code)) {      value=index + "~" + entity.getEntityId()+ "~"+ entity.getName()+ "~"+ entity.getCode();      break;    } else     value=index + "~" + ERROR+ "#";  }  return RESULT;}  }
class C{  public static final ArrayList readThisListXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, IOException {  ArrayList list=new ArrayList();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      list.add(val);    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return list;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public static int determineThreads(Output output,ParameterDatabase parameters,Parameter threadParameter){  int thread=1;  String tmp_s=parameters.getString(threadParameter,null);  if (tmp_s == null) {    output.fatal("Threads number must exist.",threadParameter,null);  } else   if (V_THREADS_AUTO.equalsIgnoreCase(tmp_s)) {    Runtime runtime=Runtime.getRuntime();    try {      return ((Integer)runtime.getClass().getMethod("availableProcessors",(Class[])null).invoke(runtime,(Object[])null)).intValue();    } catch (    Exception e) {      output.fatal("Whoa! This Java version is too old to have the Runtime.availableProcessors() method available.\n" + "This means you can't use 'auto' as a threads option.",threadParameter,null);    }  } else {    try {      thread=parameters.getInt(threadParameter,null);      if (thread <= 0)       output.fatal("Threads value must be > 0",threadParameter,null);    } catch (    NumberFormatException e) {      output.fatal("Invalid, non-integer threads value (" + thread + ")",threadParameter,null);    }  }  return thread;}  }
class C{  public final void popSubContextList(){  m_axesIteratorStack.pop();}  }
class C{  public static void main(String[] args){  TestRunner.run(ServiceActivatorTest.class);}  }
class C{  public static int compareDateTime(String value1,String value2){  XMLDateTime dateTime1=new XMLDateTime(value1);  XMLDateTime dateTime2=new XMLDateTime(value2);  dateTime1.normalize();  dateTime2.normalize();  return dateTime1.compareTo(dateTime2);}  }
class C{  public void openPopupMenu(MenuBarItem item){  if (lockLayer == null) {    int top=getAbsoluteTop() + getOffsetHeight();    lockLayer=new MenuLockLayer(this,top);  }  item.openPopupMenu(lockLayer);}  }
class C{  public float[] readArray(int count){  float[] ary=new float[count];  int idx=0;  while (idx < count) {    String thing=readThing();    if (thing.charAt(0) == '[') {      thing=thing.substring(1);    }    if (thing.endsWith("]")) {      thing=thing.substring(0,thing.length() - 1);    }    if (thing.length() > 0) {      ary[idx++]=Float.valueOf(thing).floatValue();    }  }  return ary;}  }
class C{  public final int _parent2(int identity){  if (identity < m_blocksize)   return m_parent_map0[identity]; else   return m_parent_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public boolean isScreenOn(){  try {    return mDevice.isScreenOn();  } catch (  RemoteException e) {    throw new RuntimeException(e);  }}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") @Override public ReceivePacket<?> receiveHead(){  try {    int type=mIn.read();    if (type != -1) {      byte[] lenByte=new byte[4];      mIn.read(lenByte);      int len=convertToInt(lenByte);      ReceivePacket<?> entity=mParser.parseReceive(type,len);      if (entity == null)       receiveRedundancy();      return entity;    }  } catch (  IOException e) {    return null;  }  return null;}  }
class C{  public static void main(String[] args) throws Throwable {  ChainNotValidatedTest test=new ChainNotValidatedTest();  test.start();}  }
class C{  public Builder senderId(@StringRes final int senderIdRes){  this.mSenderIdRes=senderIdRes;  return this;}  }
class C{  public int put(Object processor){  int id;  final Object obj;  if (this.useWeakRefs) {    obj=new WeakReference<Object>(processor);  } else {    obj=processor;  }  do {    id=getNextId();  } while (this.map.putIfAbsent(id,obj) != null);  Assert.assertTrue(id > 0);  return id;}  }
class C{  Object processCDATA(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    return value;  }}  }
class C{  private void clearAppData(){  CommonUtils.clearAppData(context);  alertDialog=CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_registration_error),getResources().getString(R.string.error_for_all_unknown_registration_failures),getResources().getString(R.string.button_ok),isRegisteredFailedOKBtnClickListerner);  alertDialog.show();}  }
class C{  public static Change unitsHit(final IntegerMap<Unit> newHits){  return new UnitHitsChange(newHits);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof SmallPuzzle) {    SmallPuzzle tp=(SmallPuzzle)o;    return tp.s[0] == s[0] && tp.s[1] == s[1];  }  return false;}  }
class C{  public Task<FileShareRestRep> deleteAllNfsAcl(URI id,String subDir){  UriBuilder builder=client.uriBuilder(getNfsACLsUrl());  if (subDir != null) {    builder.queryParam(SUBDIR_PARAM,subDir);  }  URI targetUri=builder.build(id);  return deleteTaskURI(targetUri);}  }
class C{  private byte[] firstElement() throws KeeperException, InterruptedException {  while (true) {    String firstChild=firstChild(false);    if (firstChild == null) {      return null;    }    try {      return zookeeper.getData(dir + "/" + firstChild,null,null,true);    } catch (    KeeperException.NoNodeException e) {      updateLock.lockInterruptibly();      try {        knownChildren.remove(firstChild);      }  finally {        updateLock.unlock();      }    }  }}  }
class C{  public boolean isUrl(String url){  return URL_VALIDATOR.isValid(url);}  }
class C{  public <X>Page<X> as(Class<X> toClass){  Page<X> page=new Page<X>();  page.pageNo=pageNo;  page.pageSize=pageSize;  page.totalPage=totalPage;  page.totalRow=totalRow;  if (list != null) {    page.list=list.as(toClass);  }  return page;}  }
class C{  public Object execute(String method,Vector params) throws Exception {  if ("NotifyFinished".equals(method)) {    return execNotifyFinished((Boolean)params.get(0));  } else   if ("RequestInput".equals(method)) {    return execRequestInput();  } else   if ("IPythonEditor".equals(method)) {    return execIPythonEditor(params);  } else   if ("NotifyAboutMagic".equals(method)) {    return execNotifyAboutMagic(params);  } else {    throw new UnsupportedOperationException();  }}  }
class C{  public void updateJob(String jobName,String jobXml) throws IOException {  client.post_xml("/job/" + encode(jobName) + "/config.xml",jobXml);}  }
class C{  private static String humanReadableUnits(long bytes,DecimalFormat df){  String newSizeAndUnits;  if (bytes / ONE_GB > 0) {    newSizeAndUnits=String.valueOf(df.format((float)bytes / ONE_GB)) + " GB";  } else   if (bytes / ONE_MB > 0) {    newSizeAndUnits=String.valueOf(df.format((float)bytes / ONE_MB)) + " MB";  } else   if (bytes / ONE_KB > 0) {    newSizeAndUnits=String.valueOf(df.format((float)bytes / ONE_KB)) + " KB";  } else {    newSizeAndUnits=String.valueOf(bytes) + " bytes";  }  return newSizeAndUnits;}  }
class C{  @SuppressWarnings("unchecked") static <T>long[] internalBuildHistogram(final T[] splitPoints,ItemsSketch<T> sketch){  final Object[] levelsArr=sketch.getCombinedBuffer();  final Object[] baseBuffer=levelsArr;  final int bbCount=sketch.getBaseBufferCount();  validateValues(splitPoints,sketch.getComparator());  final int numSplitPoints=splitPoints.length;  final int numCounters=numSplitPoints + 1;  final long[] counters=new long[numCounters];  long weight=1;  if (numSplitPoints < 50) {    bilinearTimeIncrementHistogramCounters((T[])baseBuffer,0,bbCount,weight,splitPoints,counters,sketch.getComparator());  } else {    Arrays.sort(baseBuffer,0,bbCount);    linearTimeIncrementHistogramCounters((T[])baseBuffer,0,bbCount,weight,splitPoints,counters,sketch.getComparator());  }  long myBitPattern=sketch.getBitPattern();  final int k=sketch.getK();  assert myBitPattern == sketch.getN() / (2L * k);  for (int lvl=0; myBitPattern != 0L; lvl++, myBitPattern>>>=1) {    weight+=weight;    if ((myBitPattern & 1L) > 0L) {      linearTimeIncrementHistogramCounters((T[])levelsArr,(2 + lvl) * k,k,weight,splitPoints,counters,sketch.getComparator());    }  }  return counters;}  }
class C{  public static void startInterpreterForClass(Class genClass){  String fqClassName=genClass.getName();  String baseName=Name.suffix(fqClassName,1);  String resName=baseName + ".bsh";  InputStream in=genClass.getResourceAsStream(resName);  if (in == null)   throw new InterpreterError("Script (" + resName + ") for BeanShell generated class: "+ genClass+ " not found.");  Reader reader=new InputStreamReader(genClass.getResourceAsStream(resName));  Interpreter bsh=new Interpreter();  NameSpace globalNS=bsh.getNameSpace();  globalNS.setName("class_" + baseName + "_global");  globalNS.getClassManager().associateClass(genClass);  try {    bsh.eval(reader,bsh.getNameSpace(),resName);  } catch (  TargetError e) {    System.out.println("Script threw exception: " + e);    if (e.inNativeCode())     e.printStackTrace(System.err);  }catch (  EvalError e) {    System.out.println("Evaluation Error: " + e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.DOUBLE_LITERAL;}  }
class C{  public MRUMap(int maxSize){  Assert.isLegal(maxSize > 0);  fMaxSize=maxSize;}  }
class C{  public Map<String,DateTimeZone> compile(File outputDir,File[] sources) throws IOException {  if (sources != null) {    for (int i=0; i < sources.length; i++) {      BufferedReader in=new BufferedReader(new FileReader(sources[i]));      parseDataFile(in);      in.close();    }  }  if (outputDir != null) {    if (!outputDir.exists()) {      throw new IOException("Destination directory doesn't exist: " + outputDir);    }    if (!outputDir.isDirectory()) {      throw new IOException("Destination is not a directory: " + outputDir);    }  }  Map<String,DateTimeZone> map=new TreeMap<String,DateTimeZone>();  System.out.println("Writing zoneinfo files");  for (int i=0; i < iZones.size(); i++) {    Zone zone=iZones.get(i);    DateTimeZoneBuilder builder=new DateTimeZoneBuilder();    zone.addToBuilder(builder,iRuleSets);    final DateTimeZone original=builder.toDateTimeZone(zone.iName,true);    DateTimeZone tz=original;    if (test(tz.getID(),tz)) {      map.put(tz.getID(),tz);      if (outputDir != null) {        if (ZoneInfoCompiler.verbose()) {          System.out.println("Writing " + tz.getID());        }        File file=new File(outputDir,tz.getID());        if (!file.getParentFile().exists()) {          file.getParentFile().mkdirs();        }        OutputStream out=new FileOutputStream(file);        try {          builder.writeTo(zone.iName,out);        }  finally {          out.close();        }        InputStream in=new FileInputStream(file);        DateTimeZone tz2=DateTimeZoneBuilder.readFrom(in,tz.getID());        in.close();        if (!original.equals(tz2)) {          System.out.println("*e* Error in " + tz.getID() + ": Didn't read properly from file");        }      }    }  }  for (int pass=0; pass < 2; pass++) {    for (int i=0; i < iLinks.size(); i+=2) {      String id=iLinks.get(i);      String alias=iLinks.get(i + 1);      DateTimeZone tz=map.get(id);      if (tz == null) {        if (pass > 0) {          System.out.println("Cannot find time zone '" + id + "' to link alias '"+ alias+ "' to");        }      } else {        map.put(alias,tz);      }    }  }  if (outputDir != null) {    System.out.println("Writing ZoneInfoMap");    File file=new File(outputDir,"ZoneInfoMap");    if (!file.getParentFile().exists()) {      file.getParentFile().mkdirs();    }    OutputStream out=new FileOutputStream(file);    DataOutputStream dout=new DataOutputStream(out);    try {      Map<String,DateTimeZone> zimap=new TreeMap<String,DateTimeZone>(String.CASE_INSENSITIVE_ORDER);      zimap.putAll(map);      writeZoneInfoMap(dout,zimap);    }  finally {      dout.close();    }  }  return map;}  }
class C{  public static int roundUpToPowerOfTwo(int i){  i--;  i|=i >>> 1;  i|=i >>> 2;  i|=i >>> 4;  i|=i >>> 8;  i|=i >>> 16;  return i + 1;}  }
class C{  public Parameter popn(int n){  String s=param;  for (int y=0; y < n; y++) {    int x=s.lastIndexOf(delimiter);    if (x == -1)     return null; else     s=param.substring(0,x);  }  return new Parameter(s);}  }
class C{  public void generateTeasers(){  includeTease=true;}  }
class C{  public static Term parseTerm(StreamTokenizer input) throws ParseError {  try {    int result=input.nextToken();    if (result != StreamTokenizer.TT_WORD && result != '"') {      throw new ParseError("expected word during identifier parse" + input);    }    String identifier=input.sval;    Map<String,String> options=parseOptions(input);    return new Term(identifier,options);  } catch (  IOException e) {    throw new ParseError(e.getMessage());  }}  }
class C{  public LatticeWrapper(final ILattice<ApiLatticeElement,ObjectType> lattice){  Preconditions.checkNotNull(lattice,"IE02085: Lattice argument can not be null");  m_lattice=lattice;}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof SNIHostName) {    return hostname.equalsIgnoreCase(((SNIHostName)other).hostname);  }  return false;}  }
class C{  public boolean checkError(){  return pw.checkError();}  }
class C{  private static TimestampedValue<Long> timestamped(Instant timestamp){  return TimestampedValue.of(uniqueLong.incrementAndGet(),timestamp);}  }
class C{  @Override protected void doInitContents(){  List<GefaehrdungsUmsetzung> arrListAssociatedGefaehrdungen=getRiskAnalysisWizard().getAssociatedGefaehrdungen();  viewer.setLabelProvider(new CheckboxTableViewerLabelProvider());  viewer.setContentProvider(new ArrayContentProvider());  viewer.setInput(arrListAssociatedGefaehrdungen);  viewer.setSorter(new GefaehrdungenSorter());  selectAssignedGefaehrdungen();  packAllColumns();  checkPageComplete();}  }
class C{  @Override public void actionPerformed(ActionEvent event){  privateKeysBackupFile=null;  if (abort()) {    return;  }  String importFilename=importPrivateKeysPanel.getOutputFilename();  if (importFilename == null || importFilename.equals("")) {    importPrivateKeysPanel.setMessageText1(controller.getLocaliser().getString("importPrivateKeysSubmitAction.privateKeysNothingToDo"));    importPrivateKeysPanel.setMessageText2(" ");    return;  }  if (super.bitcoinController.getModel().getActiveWallet() != null) {    KeyCrypter keyCrypter=super.bitcoinController.getModel().getActiveWallet().getKeyCrypter();    if (keyCrypter != null && keyCrypter.getUnderstoodEncryptionType() == EncryptionType.ENCRYPTED_SCRYPT_AES) {      if (walletPasswordField.getPassword() == null || walletPasswordField.getPassword().length == 0) {        importPrivateKeysPanel.setMessageText1(controller.getLocaliser().getString("showExportPrivateKeysAction.youMustEnterTheWalletPassword"));        importPrivateKeysPanel.setMessageText2(" ");        return;      }      try {        if (!super.bitcoinController.getModel().getActiveWallet().checkPassword(CharBuffer.wrap(walletPasswordField.getPassword()))) {          importPrivateKeysPanel.setMessageText1(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));          importPrivateKeysPanel.setMessageText2(" ");          return;        }      } catch (      KeyCrypterException ede) {        log.debug(ede.getClass().getCanonicalName() + " " + ede.getMessage());        importPrivateKeysPanel.setMessageText1(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));        importPrivateKeysPanel.setMessageText2(" ");        return;      }    }  }  setEnabled(false);  log.debug("Importing from file '" + importFilename + "'.");  File importFile=new File(importFilename);  CharSequence passwordCharSequence=CharBuffer.wrap(passwordField.getPassword());  try {    if (importPrivateKeysPanel.multiBitFileChooser.accept(importFile)) {      log.debug("Regular MultiBit import.");      PrivateKeysHandler privateKeysHandler=new PrivateKeysHandler(super.bitcoinController.getModel().getNetworkParameters());      importPrivateKeysPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));      Collection<PrivateKeyAndDate> privateKeyAndDateArray=privateKeysHandler.readInPrivateKeys(importFile,passwordCharSequence);      changeWalletBusyAndImportInBackground(privateKeyAndDateArray,CharBuffer.wrap(walletPasswordField.getPassword()));      importPrivateKeysPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    } else {      log.error("The wallet import file was not a recognised type.");    }  } catch (  Exception e) {    log.error(e.getClass().getName() + " " + e.getMessage());    setEnabled(true);    importPrivateKeysPanel.setMessageText1(controller.getLocaliser().getString("importPrivateKeysSubmitAction.privateKeysUnlockFailure",new Object[]{e.getMessage()}));    importPrivateKeysPanel.setMessageText2(" ");  } finally {    importPrivateKeysPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }}  }
class C{  @Nullable private static TextRange combineWithErrorElementIfPossible(@NotNull ASTNode node){  if (node.getElementType() == TokenType.ERROR_ELEMENT) {    return node.getTextRange();  }  final ASTNode prevLeaf=FormatterUtil.getPreviousLeaf(node,TokenType.WHITE_SPACE);  if (prevLeaf == null || prevLeaf.getElementType() != TokenType.ERROR_ELEMENT) {    return node.getTextRange();  }  final TextRange range=doGetRangeAffectingIndent(prevLeaf);  if (range == null) {    return node.getTextRange();  } else {    return new TextRange(range.getStartOffset(),node.getTextRange().getEndOffset());  }}  }
class C{  public String toString(CSSEngine eng){  StringBuffer sb=new StringBuffer();  if (selectorList != null) {    sb.append(selectorList.item(0));    for (int i=1; i < selectorList.getLength(); i++) {      sb.append(", ");      sb.append(selectorList.item(i));    }  }  sb.append(" {\n");  if (styleDeclaration != null) {    sb.append(styleDeclaration.toString(eng));  }  sb.append("}\n");  return sb.toString();}  }
class C{  public void recompose(StylesheetRoot root) throws TransformerException {  root.recomposeOutput(this);}  }
class C{  public static boolean outerLinkExists(Environment env,ClassDefinition reqc,ClassDefinition thisc){  while (!match(env,thisc,reqc)) {    if (thisc.isTopLevel()) {      return false;    }    thisc=thisc.getOuterClass();  }  return true;}  }
class C{  public static String readStringFromFile(File file,Charset charset) throws IOException {  return readBytesFromFile(file).toString(charset);}  }
class C{  public boolean isSriovEnabled(){  return sriovEnabled;}  }
class C{  static byte[] readFixedLengthContent(ByteBuf in) throws UnsupportedEncodingException {  if (in.readableBytes() < 2) {    return null;  }  int strLen=in.readUnsignedShort();  if (in.readableBytes() < strLen) {    return null;  }  byte[] strRaw=new byte[strLen];  in.readBytes(strRaw);  return strRaw;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public Word(String f,String pos){  this(f,pos,null);}  }
class C{  public boolean isEmpty(){  return (sentenceType == SentenceType.UNDEFINED) && expressions.isEmpty();}  }
class C{  public static void main(String... args) throws SQLException {  SelfDestructor.startCountdown(60);  if (args.length == 0) {    System.exit(1);  }  String url=args[0];  TestExit.execute(url);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/resume") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep resumeMigration(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Migration.class,"id");  Migration migration=queryResource(id);  if (!BulkList.MigrationFilter.isUserAuthorizedForMigration(migration,getUserFromContext(),_permissionsHelper)) {    StorageOSUser user=getUserFromContext();    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  String status=migration.getMigrationStatus();  String migrationName=migration.getLabel();  if (status == null || status.isEmpty() || migrationName == null || migrationName.isEmpty()) {    throw APIException.badRequests.migrationHasntStarted(id.toString());  }  if (!status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.PAUSED.getStatusValue())) {    throw APIException.badRequests.migrationCantBeResumed(migrationName,status);  }  URI volId=migration.getVolume();  Volume vplexVol=_dbClient.queryObject(Volume.class,volId);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Volume.class,volId,taskId,ResourceOperationTypeEnum.RESUME_MIGRATION);  TaskResourceRep task=toTask(vplexVol,taskId,op);  try {    VPlexController controller=_vplexBlockServiceApi.getController();    controller.resumeMigration(vplexVol.getStorageController(),id,taskId);  } catch (  InternalException e) {    s_logger.error("Error",e);    String errMsg=String.format("Error: %s",e.getMessage());    task.setState(Operation.Status.error.name());    task.setMessage(errMsg);    op.error(e);    vplexVol.getOpStatus().updateTaskStatus(taskId,op);    _dbClient.persistObject(vplexVol);  }  return task;}  }
class C{  public RDFProcessor(XMLReader reader,int subsetDenom,boolean includeAdult,int skew,Pattern topicPattern) throws IOException {  this.reader=reader;  this.subsetDenom=subsetDenom;  this.includeAdult=includeAdult;  this.topicPattern=topicPattern;  this.hashSkew=skew != 0 ? skew : new Random().nextInt();}  }
class C{  public TableSettings(String id){  ID=id;  REAL_TIME_SORT=FACTORY.createBooleanSetting(id + SORT,getDefaultSorting());  DISPLAY_TOOLTIPS=FACTORY.createBooleanSetting(id + TOOLTIP,getDefaultTooltips());}  }
class C{  public void reset() throws IOException {  m_structure=null;  m_Buffer=null;  setRetrieval(NONE);  if ((m_File != null) && (new File(m_File)).isFile()) {    setFile(new File(m_File));  } else   if ((m_URL != null) && !m_URL.equals("http://")) {    setURL(m_URL);  }}  }
class C{  @Override public void validate(final IDescription desc){  final IDescription sup=desc.getEnclosingDescription();  final String keyword=sup.getKeyword();  if (!states.contains(keyword)) {    desc.error("Transitions cannot be declared inside  " + keyword,IGamlIssue.WRONG_PARENT);    return;  }  final String behavior=desc.getLitteral(TO);  final SpeciesDescription sd=desc.getSpeciesContext();  if (!sd.hasBehavior(behavior)) {    desc.error("Behavior " + behavior + " does not exist in "+ sd.getName(),IGamlIssue.UNKNOWN_BEHAVIOR,TO,behavior,sd.getName());  }}  }
class C{  public TriangleWavePositionIterator(Iterable<? extends Position> positions,double waveLength,double amplitude,Globe globe){  if (positions == null) {    String message=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (waveLength <= 0 || amplitude <= 0) {    String message=Logging.getMessage("generic.LengthIsInvalid");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.globe=globe;  this.amplitude=amplitude;  this.halfWaveLength=Angle.fromRadians(waveLength / (2.0 * this.globe.getRadius()));  this.thisStep=this.halfWaveLength.degrees;  this.positions=positions.iterator();  this.thisPosition=this.positions.next();  this.firstPosition=this.thisPosition;  this.nextControlPosition=this.thisPosition;}  }
class C{  public static int parseInt(String text) throws DataParseException {  try {    return ColorLib.hex(text);  } catch (  Exception e) {    throw new DataParseException(e);  }}  }
class C{  private <C extends HadoopComponent>C add(C c){  components.add(c);  return c;}  }
class C{  protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {  String rootDirPath=determineRootDir(locationPattern);  String subPattern=locationPattern.substring(rootDirPath.length());  Resource[] rootDirResources=getResources(rootDirPath);  Set<Resource> result=new LinkedHashSet<Resource>(16);  for (  Resource rootDirResource : rootDirResources) {    rootDirResource=resolveRootDirResource(rootDirResource);    if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {      result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource,subPattern,getPathMatcher()));    } else     if (isJarResource(rootDirResource)) {      result.addAll(doFindPathMatchingJarResources(rootDirResource,subPattern));    } else {      result.addAll(doFindPathMatchingFileResources(rootDirResource,subPattern));    }  }  if (logger.isDebugEnabled()) {    logger.debug("Resolved location pattern [" + locationPattern + "] to resources "+ result);  }  return result.toArray(new Resource[result.size()]);}  }
class C{  public void testReceive_NonBlockNoServerBufZero() throws Exception {  this.channel1.configureBlocking(false);  receiveNonBlockNoServer(CAPACITY_ZERO);}  }
class C{  public MetricSchemaRecord(String namespace,String scope,String metric,String tagKey,String tagValue){  setNamespace(namespace);  setScope(scope);  setMetric(metric);  setTagKey(tagKey);  setTagValue(tagValue);}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  private SepsetMapDci combineSepsets(List<SepsetMapDci> sepsets){  SepsetMapDci allSepsets=new SepsetMapDci();  for (  SepsetMapDci sepset : sepsets) {    for (    Set<Node> pair : sepset.getSeparatedPairs()) {      Object[] pairArray=pair.toArray();      Node x=(Node)pairArray[0];      Node y=(Node)pairArray[1];      for (      List<Node> condSet : sepset.getSet(x,y)) {        allSepsets.set(x,y,condSet);      }    }  }  return allSepsets;}  }
class C{  public boolean markTimeIfDelay(World world,long delay){  if (world == null) {    return false;  }  long currentTime=world.getTotalWorldTime();  if (currentTime < lastMark) {    lastMark=currentTime;    return false;  } else   if (lastMark + delay + lastRandomDelay <= currentTime) {    duration=currentTime - lastMark;    lastMark=currentTime;    lastRandomDelay=(int)(Math.random() * randomRange);    return true;  } else {    return false;  }}  }
class C{  private static int collectHighlights(@NotNull final CallArgumentsMapping argumentsMapping,@NotNull final List<PyParameter> parameterList,@NotNull final Map<PyNamedParameter,Integer> parameterToIndex,@NotNull final Map<Integer,EnumSet<ParameterInfoUIContextEx.Flag>> hintFlags,@NotNull final List<PyExpression> flatArgs,int currentParamOffset){  final PyMarkedCallee callee=argumentsMapping.getMarkedCallee();  assert callee != null;  int lastParamIndex=callee.getImplicitOffset();  for (  PyExpression arg : flatArgs) {    final boolean mustHighlight=arg.getTextRange().contains(currentParamOffset);    PsiElement seeker=arg;    while (!(seeker instanceof PyArgumentList) && seeker instanceof PyExpression && !argumentsMapping.getPlainMappedParams().containsKey(seeker)) {      seeker=seeker.getParent();    }    if (seeker instanceof PyExpression) {      final PyNamedParameter parameter=argumentsMapping.getPlainMappedParams().get((PyExpression)seeker);      lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));      if (parameter != null) {        highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);      }    } else     if (arg == argumentsMapping.getTupleArg()) {      for (      PyNamedParameter parameter : argumentsMapping.getTupleMappedParams()) {        lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));        highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);      }    } else     if (arg == argumentsMapping.getKwdArg()) {      for (      PyNamedParameter parameter : argumentsMapping.getKwdMappedParams()) {        lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));        highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);      }    } else {      final List<PyNamedParameter> namedParameters=argumentsMapping.getNestedMappedParams().get(arg);      if (namedParameters != null) {        for (        PyNamedParameter parameter : namedParameters) {          lastParamIndex=Math.max(lastParamIndex,parameterList.indexOf(parameter));          highlightParameter(parameter,parameterToIndex,hintFlags,mustHighlight);        }      }    }  }  return lastParamIndex;}  }
class C{  private static boolean isFinite(Transition scratch,Automaton a,int state,BitSet path,BitSet visited){  path.set(state);  int numTransitions=a.initTransition(state,scratch);  for (int t=0; t < numTransitions; t++) {    a.getTransition(state,t,scratch);    if (path.get(scratch.dest) || (!visited.get(scratch.dest) && !isFinite(scratch,a,scratch.dest,path,visited))) {      return false;    }  }  path.clear(state);  visited.set(state);  return true;}  }
class C{  protected boolean writeConstantPool(DataOutputStream dd) throws IOException {  byte tag;  cp_info cp;  int i;  boolean skipone=false;  for (i=1; i < constant_pool_count; i++) {    if (skipone) {      skipone=false;      continue;    }    cp=constant_pool[i];    dd.writeByte(cp.tag);switch (cp.tag) {case cp_info.CONSTANT_Class:      dd.writeShort(((CONSTANT_Class_info)cp).name_index);    break;case cp_info.CONSTANT_Fieldref:  dd.writeShort(((CONSTANT_Fieldref_info)cp).class_index);dd.writeShort(((CONSTANT_Fieldref_info)cp).name_and_type_index);break;case cp_info.CONSTANT_Methodref:dd.writeShort(((CONSTANT_Methodref_info)cp).class_index);dd.writeShort(((CONSTANT_Methodref_info)cp).name_and_type_index);break;case cp_info.CONSTANT_InterfaceMethodref:dd.writeShort(((CONSTANT_InterfaceMethodref_info)cp).class_index);dd.writeShort(((CONSTANT_InterfaceMethodref_info)cp).name_and_type_index);break;case cp_info.CONSTANT_String:dd.writeShort(((CONSTANT_String_info)cp).string_index);break;case cp_info.CONSTANT_Integer:dd.writeInt((int)((CONSTANT_Integer_info)cp).bytes);break;case cp_info.CONSTANT_Float:dd.writeInt((int)((CONSTANT_Float_info)cp).bytes);break;case cp_info.CONSTANT_Long:dd.writeInt((int)((CONSTANT_Long_info)cp).high);dd.writeInt((int)((CONSTANT_Long_info)cp).low);skipone=true;break;case cp_info.CONSTANT_Double:dd.writeInt((int)((CONSTANT_Double_info)cp).high);dd.writeInt((int)((CONSTANT_Double_info)cp).low);skipone=true;break;case cp_info.CONSTANT_NameAndType:dd.writeShort(((CONSTANT_NameAndType_info)cp).name_index);dd.writeShort(((CONSTANT_NameAndType_info)cp).descriptor_index);break;case cp_info.CONSTANT_Utf8:((CONSTANT_Utf8_info)cp).writeBytes(dd);break;default :G.v().out.println("Unknown tag in constant pool: " + cp.tag);return false;}}return true;}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(){  return new ByValueSortingTreeMap<>(ByValueComparator.<K,V>create());}  }
class C{  protected ExactQuantifierImpl(){  super();}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  if (w <= 0 || h <= 0) {    throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height"));  }  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);  return new ShortBandedRaster(sm,new Point(0,0));}  }
class C{  public Local newLocal(String name,Type t){  return new JimpleLocal(name.intern(),t);}  }
class C{  public int sendUDP(Object object){  if (object == null)   throw new IllegalArgumentException("object cannot be null.");  SocketAddress address=udpRemoteAddress;  if (address == null && udp != null)   address=udp.connectedAddress;  if (address == null && isConnected)   throw new IllegalStateException("Connection is not connected via UDP.");  try {    if (address == null)     throw new SocketException("Connection is closed.");    int length=udp.send(this,object,address);    if (length == 0) {      if (TRACE)       trace("kryonet",this + " UDP had nothing to send.");    } else     if (DEBUG) {      if (length != -1) {        String objectString=object == null ? "null" : object.getClass().getSimpleName();        if (!(object instanceof FrameworkMessage)) {          debug("kryonet",this + " sent UDP: " + objectString+ " ("+ length+ ")");        } else         if (TRACE) {          trace("kryonet",this + " sent UDP: " + objectString+ " ("+ length+ ")");        }      } else       debug("kryonet",this + " was unable to send, UDP socket buffer full.");    }    return length;  } catch (  IOException ex) {    if (DEBUG)     debug("kryonet","Unable to send UDP with connection: " + this,ex);    close();    return 0;  }catch (  KryoNetException ex) {    if (ERROR)     error("kryonet","Unable to send UDP with connection: " + this,ex);    close();    return 0;  }}  }
class C{  public void read(BufferedReader reader) throws Exception {  String line;  clear();  while ((line=reader.readLine()) != null) {    line=line.trim();    if (line.startsWith("#")) {      continue;    }    add(line);  }  reader.close();}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();  m_Random=null;}  }
class C{  public void testRangeShardMappingKeyLookup() throws Exception {  final String globalGroupName="My global group";  final int lowerBounds[]=new int[]{1,10000,1001,400,1000,470};  final int lowestLowerBound=1;  Set<ShardIndex> shardIndices=new HashSet<ShardIndex>();  int shardId=0;  for (  Integer lowerBound : lowerBounds) {    ShardIndex i=new ShardIndex(String.valueOf(lowerBound),shardId,"shard_group_" + shardId);    shardId++;    shardIndices.add(i);  }  ShardMapping mapping=new RangeShardMapping(5000,ShardingType.RANGE,globalGroupName,null,shardIndices);  try {    mapping.getGroupNameForKey(String.valueOf(lowestLowerBound - 1));    fail("Looking up a key with a value below the lowest bound is invalid");  } catch (  Exception ex) {  }  try {    mapping.getGroupNameForKey(String.valueOf(lowestLowerBound - 1000));    fail("Looking up a key with a value below the lowest bound is invalid");  } catch (  Exception ex) {  }  for (shardId=0; shardId < lowerBounds.length; ++shardId) {    int lowerBound=lowerBounds[shardId];    String groupName=mapping.getGroupNameForKey(String.valueOf(lowerBound));    assertEquals("Exact lookup for key " + lowerBound,"shard_group_" + shardId,groupName);  }}  }
class C{  public void roundUp(){  width=Math.ceil(width);  height=Math.ceil(height);}  }
class C{  public static void enableStrictMode(boolean enable){  if (enable) {    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectDiskReads().detectDiskWrites().detectNetwork().penaltyLog().build());    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {      StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectLeakedSqlLiteObjects().detectLeakedClosableObjects().penaltyLog().penaltyDeath().build());    }  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/start") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList startContinuousCopies(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume volume=_dbClient.queryObject(Volume.class,id);  checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));  VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume(volume,ResourceOperationTypeEnum.CREATE_VOLUME_MIRROR,_dbClient);  Volume sourceVolume=queryVolumeResource(id);  validateSourceVolumeHasExported(sourceVolume);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  verifyCopyIDs(param);  for (  Copy copy : param.getCopies()) {    ArgValidator.checkFieldNotEmpty(copy.getType(),"type");    URI copyID=copy.getCopyID();    if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {      if (!URIUtil.isValid(copyID)) {        copyID=null;      }      taskResp=performProtectionAction(id,copy,ProtectionOp.START.getRestOp());      taskList.getTaskList().add(taskResp);      if (copyID == null) {        return taskList;      }    } else     if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {      id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);      copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));      taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.START.getRestOp());      taskList.getTaskList().add(taskResp);    } else     if (copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {      if (URIUtil.isValid(copyID) && URIUtil.isType(copyID,BlockMirror.class)) {        taskResp=establishVolumeMirrorGroupRelation(id,copy,ProtectionOp.START.getRestOp());        taskList.getTaskList().add(taskResp);      } else {        NativeContinuousCopyCreate mirror=new NativeContinuousCopyCreate(copy.getName(),copy.getCount());        taskList=startMirrors(id,mirror);      }    } else {      throw APIException.badRequests.invalidCopyType(copy.getType());    }  }  return taskList;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.VIRTUAL_BASE_TYPE__DECLARED_OWNED_MEMBERS:    return getDeclaredOwnedMembers();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static List<Trip> purposeTripFilter(List<Trip> trips,String purpose){  List<Trip> filteredTrips=new LinkedList<>();  for (  Trip tempTrip : trips) {    if (tempTrip.purpose.equals(purpose)) {      filteredTrips.add(tempTrip.clone());    }  }  return Collections.unmodifiableList(filteredTrips);}  }
class C{  private void drawLeftPart(final Point buttonSize){  gc.setForeground(unselectedBackgroundColor);  gc.setBackground(unselectedBackgroundColor);  gc.setClipping(buttonSize.x / 2 + 3,3,buttonSize.x / 2,buttonSize.y - 1);  if (round) {    gc.fillRoundRectangle(2,2,buttonSize.x,buttonSize.y,arc,arc);  } else {    gc.fillRectangle(2,2,buttonSize.x,buttonSize.y);  }  gc.setForeground(unselectedForegroundColor);  final Point textSize=gc.textExtent(textForUnselect);  gc.drawString(textForUnselect,buttonSize.x / 2 + (buttonSize.x / 2 - textSize.x) / 2 + arc,(buttonSize.y - textSize.y) / 2 + arc);}  }
class C{  public int errorCount(){  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.errorCount(); else {    if (werror && log.nerrors == 0 && log.nwarnings > 0) {      log.error("warnings.and.werror");    }  }  return log.nerrors;}  }
class C{  protected final static byte cleanMessagingMode(byte esmClass){  return (byte)(esmClass & 0x03);}  }
class C{  @Override public void onRemoved(final StendhalRPZone zone){  if (zone.getID().getID().equals(PlayerDieer.DEFAULT_DEAD_AREA)) {    setVisibility(100);  }  super.onRemoved(zone);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.198 -0500",hash_original_method="8EF6528E21853FD53F2FB8406F9F06D5",hash_generated_method="1FBC85A83D94EF6B0DCAC0EE08B0F0E2") public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeHeader(v)) {      if (mDataSetObserver != null) {        mDataSetObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  private static void generateHelloMethod(DexMaker dexMaker,TypeId<?> declaringType){  TypeId<System> systemType=TypeId.get(System.class);  TypeId<PrintStream> printStreamType=TypeId.get(PrintStream.class);  MethodId hello=declaringType.getMethod(TypeId.VOID,"hello");  Code code=dexMaker.declare(hello,Modifier.STATIC | Modifier.PUBLIC);  Local<Integer> a=code.newLocal(TypeId.INT);  Local<Integer> b=code.newLocal(TypeId.INT);  Local<Integer> c=code.newLocal(TypeId.INT);  Local<String> s=code.newLocal(TypeId.STRING);  Local<PrintStream> localSystemOut=code.newLocal(printStreamType);  code.loadConstant(a,0xabcd);  code.loadConstant(b,0xaaaa);  code.op(BinaryOp.SUBTRACT,c,a,b);  MethodId<Integer,String> toHexString=TypeId.get(Integer.class).getMethod(TypeId.STRING,"toHexString",TypeId.INT);  code.invokeStatic(toHexString,s,c);  FieldId<System,PrintStream> systemOutField=systemType.getField(printStreamType,"out");  code.sget(systemOutField,localSystemOut);  MethodId<PrintStream,Void> printlnMethod=printStreamType.getMethod(TypeId.VOID,"println",TypeId.STRING);  code.invokeVirtual(printlnMethod,null,localSystemOut,s);  code.returnVoid();}  }
class C{  private void zoomToAddress(){  if (!"".equals(getText())) {    add(getText());    final IAddress address=new CAddress(Long.parseLong(getText(),16));    m_textField.setSuccessful(ZyZoomHelpers.zoomToAddress(m_graph,address,m_modules.get(0),true));  }}  }
class C{  public Message fromStream(Pdu.Type pduType,InputStream in){  Optional<String> structName=typeFactory.getStructNameForId(pduType.id());  if (structName.isPresent()) {    try {      String name=structName.get();      TypeFactory.Type type=typeFactory.resolveType(name);      Map<String,Object> fields=(Map<String,Object>)reader.readValue(type,MessageInputStream.toMessageInputStream(in));      return new Message(typeFactory,name,fields);    } catch (    TypeException|IOException e) {      throw new PduException(e);    }  } else {    throw new PduException("No type definition for " + pduType);  }}  }
class C{  public SQLRecoverableException(Throwable cause){  super(cause);}  }
class C{  public boolean isInRange(int value,int min,int max){  return INTEGER_VALIDATOR.isInRange(value,min,max);}  }
class C{  private ReportedData(DataForm dataForm){  for (Iterator fields=dataForm.getReportedData().getFields(); fields.hasNext(); ) {    FormField field=(FormField)fields.next();    columns.add(new Column(field.getLabel(),field.getVariable(),field.getType()));  }  for (Iterator items=dataForm.getItems(); items.hasNext(); ) {    DataForm.Item item=(DataForm.Item)items.next();    List<Field> fieldList=new ArrayList<Field>(columns.size());    FormField field;    for (Iterator fields=item.getFields(); fields.hasNext(); ) {      field=(FormField)fields.next();      List<String> values=new ArrayList<String>();      for (Iterator<String> it=field.getValues(); it.hasNext(); ) {        values.add(it.next());      }      fieldList.add(new Field(field.getVariable(),values));    }    rows.add(new Row(fieldList));  }  this.title=dataForm.getTitle();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  private void updateEffectiveSize(){  try {    int r=Integer.valueOf(rows.getText());    int c=Integer.valueOf(columns.getText());    int h=Integer.valueOf(receptiveFieldHeight.getText());    int w=Integer.valueOf(receptiveFieldWidth.getText());    effectiveSize.setText((c * w) + "x" + (r * h));  } catch (  NumberFormatException e) {    effectiveSize.setText("...");  }}  }
class C{  public DoubleBuffer[] _getFullOrPartialBuffers(){  int count=0;  for (int i=buffers.length; --i >= 0; ) {    if (!buffers[i].isEmpty())     count++;  }  DoubleBuffer[] collectedBuffers=new DoubleBuffer[count];  int j=0;  for (int i=buffers.length; --i >= 0; ) {    if (!buffers[i].isEmpty()) {      collectedBuffers[j++]=buffers[i];    }  }  return collectedBuffers;}  }
class C{  public UDView resumeAnimation(){  AnimatorUtil.resume(mAnimators);  return this;}  }
class C{  public static void logError(String message,Object... args){  logError(null,message,args);}  }
class C{  public void testZeroFrequencyAccepted(){  assertTrue(sh.isValid("yikes"));  assertFalse(sh.isValid("yike"));}  }
class C{  public static void initialise(Context context){  tagLastSeenMap=new PersistedMap(context,"TagLastSeenMap");  toDoSet=new PersistedSet(context,"ToDoSet");  if (sessionList == null) {    sessionList=new ArrayList<>();  }  PackageManager packageManager=context.getPackageManager();  try {    PackageInfo packageInfo=packageManager.getPackageInfo(context.getPackageName(),0);    lastAppUpdatedTime=packageInfo.lastUpdateTime;  } catch (  PackageManager.NameNotFoundException ignored) {  }}  }
class C{  protected MWHCFunction(final Iterable<? extends T> keys,final TransformationStrategy<? super T> transform,int signatureWidth,final LongIterable values,final int dataWidth,final File tempDir,ChunkedHashStore<T> chunkedHashStore,boolean indirect) throws IOException {  this.transform=transform;  if (signatureWidth != 0 && values != null)   throw new IllegalArgumentException("You cannot sign a function if you specify its values");  if (signatureWidth != 0 && dataWidth != -1)   throw new IllegalArgumentException("You cannot specify a signature width and a data width");  final LongBigList valueList=indirect ? (values instanceof LongList ? LongBigLists.asBigList((LongList)values) : (LongBigList)values) : null;  final ProgressLogger pl=new ProgressLogger(LOGGER);  pl.displayLocalSpeed=true;  pl.displayFreeMemory=true;  final RandomGenerator r=new XorShift1024StarRandomGenerator();  pl.itemsName="keys";  final boolean givenChunkedHashStore=chunkedHashStore != null;  if (!givenChunkedHashStore) {    if (keys == null)     throw new IllegalArgumentException("If you do not provide a chunked hash store, you must provide the keys");    chunkedHashStore=new ChunkedHashStore<T>(transform,tempDir,-Math.min(signatureWidth,0),pl);    chunkedHashStore.reset(r.nextLong());    if (values == null || indirect)     chunkedHashStore.addAll(keys.iterator()); else     chunkedHashStore.addAll(keys.iterator(),values != null ? values.iterator() : null);  }  n=chunkedHashStore.size();  defRetValue=signatureWidth < 0 ? 0 : -1;  if (n == 0) {    m=this.globalSeed=chunkShift=this.width=0;    data=null;    marker=null;    rank=null;    seed=null;    offset=null;    signatureMask=0;    signatures=null;    return;  }  int log2NumChunks=Math.max(0,Fast.mostSignificantBit(n >> LOG2_CHUNK_SIZE));  chunkShift=chunkedHashStore.log2Chunks(log2NumChunks);  final int numChunks=1 << log2NumChunks;  LOGGER.debug("Number of chunks: " + numChunks);  seed=new long[numChunks];  offset=new long[numChunks + 1];  this.width=signatureWidth < 0 ? -signatureWidth : dataWidth == -1 ? Fast.ceilLog2(n) : dataWidth;  @SuppressWarnings("resource") final OfflineIterable<BitVector,LongArrayBitVector> offlineData=new OfflineIterable<BitVector,LongArrayBitVector>(BitVectors.OFFLINE_SERIALIZER,LongArrayBitVector.getInstance());  int duplicates=0;  for (; ; ) {    LOGGER.debug("Generating MWHC function with " + this.width + " output bits...");    long seed=0;    pl.expectedUpdates=numChunks;    pl.itemsName="chunks";    pl.start("Analysing chunks... ");    try {      int q=0;      final LongArrayBitVector dataBitVector=LongArrayBitVector.getInstance();      final LongBigList data=dataBitVector.asLongBigList(this.width);      for (      ChunkedHashStore.Chunk chunk : chunkedHashStore) {        HypergraphSorter<BitVector> sorter=new HypergraphSorter<BitVector>(chunk.size());        do {          seed=r.nextLong();        } while (!sorter.generateAndSort(chunk.iterator(),seed));        this.seed[q]=seed;        dataBitVector.fill(false);        data.size(sorter.numVertices);        offset[q + 1]=offset[q] + sorter.numVertices;        int top=chunk.size(), x, k;        final int[] stack=sorter.stack;        final int[] vertex1=sorter.vertex1;        final int[] vertex2=sorter.vertex2;        final int[] edge=sorter.edge;        while (top > 0) {          x=stack[--top];          k=edge[x];          final long s=data.getLong(vertex1[x]) ^ data.getLong(vertex2[x]);          final long value=indirect ? valueList.getLong(chunk.data(k)) : chunk.data(k);          data.set(x,value ^ s);          if (ASSERTS)           assert (value == (data.getLong(x) ^ data.getLong(vertex1[x]) ^ data.getLong(vertex2[x]))) : "<" + x + ","+ vertex1[x]+ ","+ vertex2[x]+ ">: "+ value+ " != "+ (data.getLong(x) ^ data.getLong(vertex1[x]) ^ data.getLong(vertex2[x]));        }        q++;        offlineData.add(dataBitVector);        pl.update();      }      pl.done();      break;    } catch (    ChunkedHashStore.DuplicateException e) {      if (keys == null)       throw new IllegalStateException("You provided no keys, but the chunked hash store was not checked");      if (duplicates++ > 3)       throw new IllegalArgumentException("The input list contains duplicates");      LOGGER.warn("Found duplicate. Recomputing triples...");      chunkedHashStore.reset(r.nextLong());      pl.itemsName="keys";      if (values == null || indirect)       chunkedHashStore.addAll(keys.iterator()); else       chunkedHashStore.addAll(keys.iterator(),values != null ? values.iterator() : null);    }  }  if (DEBUG)   System.out.println("Offsets: " + Arrays.toString(offset));  globalSeed=chunkedHashStore.seed();  long nonZero=0;  m=offset[offset.length - 1];{    final OfflineIterator<BitVector,LongArrayBitVector> iterator=offlineData.iterator();    while (iterator.hasNext()) {      final LongBigList data=iterator.next().asLongBigList(this.width);      for (long i=0; i < data.size64(); i++)       if (data.getLong(i) != 0)       nonZero++;    }    iterator.close();  }  if (nonZero * this.width + m * 1.126 < m * this.width) {    LOGGER.info("Compacting...");    marker=LongArrayBitVector.ofLength(m);    final LongBigList newData=LongArrayBitVector.getInstance().asLongBigList(this.width);    newData.size(nonZero);    nonZero=0;    final OfflineIterator<BitVector,LongArrayBitVector> iterator=offlineData.iterator();    long j=0;    while (iterator.hasNext()) {      final LongBigList data=iterator.next().asLongBigList(this.width);      for (long i=0; i < data.size64(); i++, j++) {        final long value=data.getLong(i);        if (value != 0) {          marker.set(j);          newData.set(nonZero++,value);        }      }    }    iterator.close();    rank=new Rank16(marker);    if (ASSERTS) {      final OfflineIterator<BitVector,LongArrayBitVector> iterator2=offlineData.iterator();      long k=0;      while (iterator2.hasNext()) {        final LongBigList data=iterator2.next().asLongBigList(this.width);        for (long i=0; i < data.size64(); i++, k++) {          final long value=data.getLong(i);          assert (value != 0) == marker.getBoolean(k);          if (value != 0)           assert value == newData.getLong(rank.rank(k)) : value + " != " + newData.getLong(rank.rank(k));        }      }      iterator2.close();    }    this.data=newData;  } else {    final LongArrayBitVector dataBitVector=LongArrayBitVector.getInstance(m * this.width);    this.data=dataBitVector.asLongBigList(this.width);    OfflineIterator<BitVector,LongArrayBitVector> iterator=offlineData.iterator();    while (iterator.hasNext())     dataBitVector.append(iterator.next());    iterator.close();    marker=null;    rank=null;  }  offlineData.close();  LOGGER.info("Completed.");  LOGGER.debug("Forecast bit cost per element: " + (marker == null ? HypergraphSorter.GAMMA * this.width : HypergraphSorter.GAMMA + this.width + 0.126));  LOGGER.info("Actual bit cost per element: " + (double)numBits() / n);  if (signatureWidth > 0) {    signatureMask=-1L >>> Long.SIZE - signatureWidth;    signatures=chunkedHashStore.signatures(signatureWidth,pl);  } else   if (signatureWidth < 0) {    signatureMask=-1L >>> Long.SIZE + signatureWidth;    signatures=null;  } else {    signatureMask=0;    signatures=null;  }  if (!givenChunkedHashStore)   chunkedHashStore.close();}  }
class C{  public static StackMapTable make(ClassPool classes,MethodInfo minfo) throws BadBytecode {  CodeAttribute ca=minfo.getCodeAttribute();  if (ca == null)   return null;  TypedBlock[] blocks;  try {    blocks=TypedBlock.makeBlocks(minfo,ca,true);  } catch (  BasicBlock.JsrBytecode e) {    return null;  }  if (blocks == null)   return null;  MapMaker mm=new MapMaker(classes,minfo,ca);  try {    mm.make(blocks,ca.getCode());  } catch (  BadBytecode bb) {    throw new BadBytecode(minfo,bb);  }  return mm.toStackMap(blocks);}  }
class C{  public ProxyConfig(Type type,String host,int port,String user,String password,boolean expectContinue,Set<String> nonProxyHosts){  this.type=type;  this.host=host;  this.port=port;  this.hostAndPort=host + ":" + port;  this.user=user;  this.password=password;  this.expectContinue=expectContinue;  this.nonProxyHosts=nonProxyHosts;}  }
class C{  public static <T>Flowable<T> fluxToFlowable(Flux<T> source){  return new FluxAsFlowable<>(source);}  }
class C{  public void startClock(){  m_Clock.start();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public synchronized void report(int id,long seqno,long time,long reportTime,D datum){  processReport(id,seqno,time,datum);  ThreadPosition tp=array.get(id);  tp.reportTime=reportTime;  notifyAll();}  }
class C{  @SafeVarargs public final AssertSubscriber<T> assertValues(T... expectedValues){  return assertValueSequence(Arrays.asList(expectedValues));}  }
class C{  public static RSAPrivateKey loadSigningKey(){  KeyStore ks=null;  RSAPrivateKey myPrivateKey=null;  try {    ks=KeyStore.getInstance(KeyStore.getDefaultType());    char[] ks_password=ServerConfig.getKeystorePassword().toCharArray();    FileInputStream fis=null;    fis=new FileInputStream(ServerConfig.getKeystorePath());    ks.load(fis,ks_password);    if (ks.isKeyEntry(ServerConfig.getName())) {      KeyStore.ProtectionParameter protParam=new KeyStore.PasswordProtection(ks_password);      KeyStore.PrivateKeyEntry pkEntry=(KeyStore.PrivateKeyEntry)ks.getEntry(ServerConfig.getName(),protParam);      myPrivateKey=(RSAPrivateKey)pkEntry.getPrivateKey();    } else {      throw new CertificateException();    }    fis.close();    return myPrivateKey;  } catch (  IOException e) {    Logging.error("KeyOps:loadSigningKey: Problem loading the keystore");  }catch (  NoSuchAlgorithmException e) {    Logging.error("KeyOps:loadSigningKey: Problem with integrity check algorithm");  }catch (  CertificateException e) {    Logging.error("KeyOps:loadSigningKey: Problem with the cert(s) in keystore");  }catch (  KeyStoreException e) {    Logging.error("KeyOps:loadSigningKey: Problem getting Keystore instance");  }catch (  UnrecoverableEntryException e) {    Logging.error("KeyOps:loadSigningKey: specified protParam were insufficient or invalid");  }  return null;}  }
class C{  public void closeSession(long sessionId){  send(new RTCCloseSession(deviceId,sessionId));}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public DrawerBuilder withOnDrawerListener(@NonNull Drawer.OnDrawerListener onDrawerListener){  this.mOnDrawerListener=onDrawerListener;  return this;}  }
class C{  public boolean storeDefaultOption(String defaultOptionID){  if (defaultOptionID != null) {    if (hasProcessed(defaultOptionID)) {      parameterDef.setDefaultValue(defaultOptionID);      dm.flush();      dm.refresh(parameterDef);      return true;    } else {      return false;    }  } else {    return true;  }}  }
class C{  public AcelaSignalHead(String systemName,AcelaSystemConnectionMemo memo){  super(systemName);  _memo=memo;  tSystemName=systemName;  int num=AcelaAddress.getBitFromSystemName(systemName);  addr=num;  AcelaNode tNode=AcelaAddress.getNodeFromSystemName(tSystemName,_memo);  if (tNode == null) {    log.error("Can't find new Acela Signal with name '" + tSystemName);    return;  }  tNode.setOutputSpecial(addr,1);  tNode.setOutputSignalHeadType(addr,AcelaNode.UKNOWN);}  }
class C{  protected void stopMessageLoopIfNoInstances(){synchronized (webViewUILock) {    if (instances.get() <= 0) {      WindowsWebViewJNI.releaseMessageLoop(webViewMessageLoop);      webViewMessageLoop=0;      webViewUI=null;    }  }}  }
class C{  public Object clone(){  CharArrayIterator c=new CharArrayIterator(chars,begin);  c.pos=this.pos;  return c;}  }
class C{  public DoubleVector minus(DoubleVector v){  return copy().minusEquals(v);}  }
class C{  public long length(){  return getWrappedPath().length();}  }
class C{  public static String toString(int x){  return toString(x,10);}  }
class C{  public IMarker[] findMarkers(String type,boolean includeSubtypes) throws CoreException {  if (resources.length == 0)   return new IMarker[0];  ArrayList<IMarker> result=new ArrayList<IMarker>();  doFindMarkers(result,type,includeSubtypes);  return result.toArray(new IMarker[result.size()]);}  }
class C{  public void init() throws ServletException {}  }
class C{  private boolean createShortcut(String folderPath){  try {    ShellLink.createLink(getAppPath(),folderPath + getShortcutName() + ".lnk");  } catch (  IOException ex) {    log.warn("Error creating desktop shortcut",ex);    return false;  }  return true;}  }
class C{  public String invertSelectionTipText(){  return "Set attribute selection mode. If false, only selected" + " (numeric) attributes in the range will be discretized; if" + " true, only non-selected attributes will be discretized.";}  }
class C{  public static boolean isTrueTypeFileSupported(){  return Display.impl.isTrueTypeSupported();}  }
class C{  public AbstractGremlinSuite(final Class<?> klass,final RunnerBuilder builder,final Class<?>[] testsToExecute,final Class<?>[] testsToEnforce,final boolean gremlinFlavorSuite,final TraversalEngine.Type traversalEngineType) throws InitializationError {  super(builder,klass,enforce(testsToExecute,testsToEnforce));  this.gremlinFlavorSuite=gremlinFlavorSuite;  final Pair<Class<? extends GraphProvider>,Class<? extends Graph>> pair=getGraphProviderClass(klass);  final Optional<GraphProvider.Descriptor> graphProviderDescriptor=getGraphProviderDescriptor(traversalEngineType,pair.getValue0());  validateOptInToSuite(pair.getValue1());  validateOptInAndOutAnnotationsOnGraph(pair.getValue1());  registerOptOuts(pair.getValue1(),graphProviderDescriptor,traversalEngineType);  try {    final GraphProvider graphProvider=pair.getValue0().newInstance();    GraphManager.setGraphProvider(graphProvider);    GraphManager.setTraversalEngineType(traversalEngineType);  } catch (  Exception ex) {    throw new InitializationError(ex);  }}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  private void checkGroupExists(String entidad) throws Exception {  int count;  GroupsTable table=new GroupsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (_id == Defs.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameIdQual(_id,_name));    if (count > 0)     AdminException.throwException(GroupErrorCodes.EC_GROUP_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  private void logVolume(String type,Operator operator,Port port,int rows,int columns){  String value=operator.getOperatorDescription().getKey() + "." + port.getName();  logCountSumMinMax(type,value,VOLUME_ROWS,rows);  logCountSumMinMax(type,value,VOLUME_COLUMNS,columns);  logCountSumMinMax(type,value,VOLUMNE_CELLS,(long)columns * rows);}  }
class C{  public DefaultHttpParams(final HttpParams defaults){  super();  this.defaults=defaults;}  }
class C{  public final CC shrinkPrioY(int p){  ver.setShrinkPriority(p);  return this;}  }
class C{  public void bind(int index,String value){  if (value == null) {    mPreparedStatement.bindNull(index);  } else {    mPreparedStatement.bindString(index,value);  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_create_widget_clock_day);}  }
class C{  private static int med3(short[] x,int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  public static void delete(IResource resource) throws CoreException {  for (int i=0; i < MAX_RETRY; i++) {    try {      resource.delete(IResource.FORCE | IResource.ALWAYS_DELETE_PROJECT_CONTENT,null);      i=MAX_RETRY;    } catch (    CoreException e) {      if (i == MAX_RETRY - 1) {        JavaPlugin.log(e);        throw e;      }      try {        JavaPlugin.log(new IllegalStateException("sleep before retrying JavaProjectHelper.delete() for " + resource.getLocationURI()));        Thread.sleep(RETRY_DELAY);      } catch (      InterruptedException e1) {      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.VARIABLE_STATEMENT__VAR_DECLS_OR_BINDINGS:    return getVarDeclsOrBindings();case N4JSPackage.VARIABLE_STATEMENT__VAR_STMT_KEYWORD:  return getVarStmtKeyword();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void validateRemovalOfPublicNetworkInterface(String instanceId,int desiredNetworkInterfaceStateCount) throws Throwable {  if (this.isAwsClientMock) {    return;  }  ComputeState stoppedComputeState=getComputeByAWSId(this.host,instanceId);  assertNotNull(stoppedComputeState);  for (  String networkLink : stoppedComputeState.networkInterfaceLinks) {    assertFalse(networkLink.contains(PUBLIC_INTERFACE));  }  validateNetworkInterfaceCount(desiredNetworkInterfaceStateCount);}  }
class C{  public void putInRegion(){  manager.putSession(this);  isDirty=false;}  }
class C{  public Builder(){  positiveExamplesByName=new HashMap<String,File>();}  }
class C{  public static SeparatorAction createSeparator(){  int sequenceValue=Raptor.getInstance().getPreferences().getInt(PreferenceKeys.ACTION_SEPARATOR_SEQUENCE);  SeparatorAction action=new SeparatorAction();  Raptor.getInstance().getPreferences().setValue(PreferenceKeys.ACTION_SEPARATOR_SEQUENCE,sequenceValue + 1);  Raptor.getInstance().getPreferences().save();  action.setName("Separator " + sequenceValue);  return action;}  }
class C{  public void doRender(EntityBullet p_76986_1_,double p_76986_2_,double p_76986_4_,double p_76986_6_,float p_76986_8_,float p_76986_9_){  this.bindEntityTexture(p_76986_1_);  GL11.glPushMatrix();  GL11.glTranslatef((float)p_76986_2_,(float)p_76986_4_,(float)p_76986_6_);  GL11.glRotatef(p_76986_1_.prevRotationYaw + (p_76986_1_.rotationYaw - p_76986_1_.prevRotationYaw) * p_76986_9_ - 90.0F,0.0F,1.0F,0.0F);  GL11.glRotatef(p_76986_1_.prevRotationPitch + (p_76986_1_.rotationPitch - p_76986_1_.prevRotationPitch) * p_76986_9_,0.0F,0.0F,1.0F);  Tessellator tessellator=Tessellator.instance;  byte b0=0;  float f2=0.0F;  float f3=0.5F;  float f4=(float)(0 + b0 * 10) / 32.0F;  float f5=(float)(5 + b0 * 10) / 32.0F;  float f6=0.0F;  float f7=0.15625F;  float f8=(float)(5 + b0 * 10) / 32.0F;  float f9=(float)(10 + b0 * 10) / 32.0F;  float f10=0.05625F;  GL11.glEnable(GL12.GL_RESCALE_NORMAL);  float f11=(float)p_76986_1_.arrowShake - p_76986_9_;  if (f11 > 0.0F) {    float f12=-MathHelper.sin(f11 * 3.0F) * f11;    GL11.glRotatef(f12,0.0F,0.0F,1.0F);  }  GL11.glRotatef(45.0F,1.0F,0.0F,0.0F);  GL11.glScalef(f10,f10,f10);  GL11.glTranslatef(-4.0F,0.0F,0.0F);  GL11.glNormal3f(f10,0.0F,0.0F);  tessellator.startDrawingQuads();  tessellator.addVertexWithUV(-7.0D,-2.0D,-2.0D,(double)f6,(double)f8);  tessellator.addVertexWithUV(-7.0D,-2.0D,2.0D,(double)f7,(double)f8);  tessellator.addVertexWithUV(-7.0D,2.0D,2.0D,(double)f7,(double)f9);  tessellator.addVertexWithUV(-7.0D,2.0D,-2.0D,(double)f6,(double)f9);  tessellator.draw();  GL11.glNormal3f(-f10,0.0F,0.0F);  tessellator.startDrawingQuads();  tessellator.addVertexWithUV(-7.0D,2.0D,-2.0D,(double)f6,(double)f8);  tessellator.addVertexWithUV(-7.0D,2.0D,2.0D,(double)f7,(double)f8);  tessellator.addVertexWithUV(-7.0D,-2.0D,2.0D,(double)f7,(double)f9);  tessellator.addVertexWithUV(-7.0D,-2.0D,-2.0D,(double)f6,(double)f9);  tessellator.draw();  for (int i=0; i < 4; ++i) {    GL11.glRotatef(90.0F,1.0F,0.0F,0.0F);    GL11.glNormal3f(0.0F,0.0F,f10);    tessellator.startDrawingQuads();    tessellator.addVertexWithUV(-8.0D,-2.0D,0.0D,(double)f2,(double)f4);    tessellator.addVertexWithUV(8.0D,-2.0D,0.0D,(double)f3,(double)f4);    tessellator.addVertexWithUV(8.0D,2.0D,0.0D,(double)f3,(double)f5);    tessellator.addVertexWithUV(-8.0D,2.0D,0.0D,(double)f2,(double)f5);    tessellator.draw();  }  GL11.glDisable(GL12.GL_RESCALE_NORMAL);  GL11.glPopMatrix();}  }
