class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public JEditorCurrencyPositive(){}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static boolean makeDirsIfNeeded(File dir){  return dir.exists() || dir.mkdirs();}  }
class C{  protected int fill(byte[] buffer,int offset,int count) throws IOException {  if (inputStream == null)   return -1;  try {    return inputStream.read(buffer,offset,count);  } catch (  IOException ex) {    throw new IOException(ex);  }}  }
class C{  public Queue<Env<AttrContext>> flow(Queue<Env<AttrContext>> envs){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  for (  Env<AttrContext> env : envs) {    flow(env,results);  }  return stopIfError(CompileState.FLOW,results);}  }
class C{  public boolean isTrimWhitespace(){  return trimWhitespace;}  }
class C{  public SourceClipBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SourceClip.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.source_package_id == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SourceClip.ERROR_DESCRIPTION_PREFIX + "source_package_id is null");  }  if (this.duration == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SourceClip.ERROR_DESCRIPTION_PREFIX + "duration is null");  }}  }
class C{  public static double keepSignificantFigures(double input,int sigfigs){  return new Double(getSignificant(input,sigfigs));}  }
class C{  public NetPanel(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  initComponents();  undoManager=new UndoRedoManager();  editor=new DefaultDrawingEditor();  editor.add(view);  addCreationButtonsTo(creationToolbar,editor);  ButtonFactory.addAttributesButtonsTo(attributesToolbar,editor);  JPopupButton pb=new JPopupButton();  pb.setItemFont(UIManager.getFont("MenuItem.font"));  labels.configureToolBarButton(pb,"actions");  pb.add(new DuplicateAction());  pb.addSeparator();  pb.add(new GroupAction(editor));  pb.add(new UngroupAction(editor));  pb.addSeparator();  pb.add(new BringToFrontAction(editor));  pb.add(new SendToBackAction(editor));  pb.addSeparator();  pb.add(new CutAction());  pb.add(new CopyAction());  pb.add(new PasteAction());  pb.add(new SelectAllAction());  pb.add(new SelectSameAction(editor));  pb.addSeparator();  pb.add(undoManager.getUndoAction());  pb.add(undoManager.getRedoAction());  JMenu m=new JMenu(labels.getString("view.zoomFactor.text"));  JRadioButtonMenuItem rbmi;  ButtonGroup group=new ButtonGroup();  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.1,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.75,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.0,null)));  rbmi.setSelected(true);  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,2,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,3,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,4,null)));  group.add(rbmi);  pb.add(m);  pb.setFocusable(false);  creationToolbar.addSeparator();  creationToolbar.add(pb);  DefaultDrawing drawing=new DefaultDrawing();  view.setDrawing(drawing);  drawing.addUndoableEditListener(undoManager);}  }
class C{  @Override public byte[] serializeToByteArray(final Set<String> fontsAlreadyOnClient) throws IOException {  return new byte[0];}  }
class C{  public ChoiceSet(Random random){  this.random=random;  this.options=new ArrayList<T>();  this.weights=new TDoubleArrayList();  weightSum=0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double pitElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      DEMHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette(DEM.getPreferredPalette());    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pntr.getValue(row,col);        if (output.getValue(row,col) == -999 && flowDir != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) != -999) {                pitElev=DEM.getValue(y,x) - output.getValue(y,x);                flag=true;              }            } else {              pitElev=DEM.getValue(y,x);              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          do {            z=DEM.getValue(y,x) - pitElev;            output.setValue(y,x,z);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              output.setValue(y,x,0);              flag=true;            }          } while (!flag);        } else         if (flowDir == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Loader(ClassPool cp){  init(cp);}  }
class C{  public void pushRect(Rect rect,int color){  if (mFirstPush) {    mRectangles.clear();    mFirstPush=false;  }  mRectangles.add(new Pair<Rect,Integer>(rect,color));  invalidate();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public int doFinal(final byte[] out,final int outOff) throws BadCiphertextException {  isFinalFrame_=true;  complete_=true;  return writeEncryptedFrame(bytesToFrame_,0,bytesToFrameLen_,out,outOff);}  }
class C{  public void start(){  if (mEgl == null) {    mEgl=(EGL10)EGLContext.getEGL();  } else {  }  if (mEglDisplay == null) {    mEglDisplay=mEgl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);  } else {  }  if (mEglConfig == null) {    int[] version=new int[2];    mEgl.eglInitialize(mEglDisplay,version);    mEglConfig=mEGLConfigChooser.chooseConfig(mEgl,mEglDisplay);  } else {  }  if (mEglContext == null) {    mEglContext=mEGLContextFactory.createContext(mEgl,mEglDisplay,mEglConfig);    if (mEglContext == null || mEglContext == EGL10.EGL_NO_CONTEXT) {      throw new RuntimeException("createContext failed");    }  } else {  }  mEglSurface=null;}  }
class C{  public Reflect call(String name) throws ReflectException {  return call(name,new Object[0]);}  }
class C{  public void selectApplicationDefinition(ApplicationDefinition applicationDefinition,CmrRepositoryDefinition repositoryDefinition){  ApplicationLeaf leaf=new ApplicationLeaf(applicationDefinition,managerView.getApplications(),repositoryDefinition);  StructuredSelection selection=new StructuredSelection(leaf);  managerView.select(selection);}  }
class C{  private void addInsideTurn(int orientation,boolean addStartPoint){  li.computeIntersection(offset0.p0,offset0.p1,offset1.p0,offset1.p1);  if (li.hasIntersection()) {    segList.addPt(li.getIntersection(0));  } else {    hasNarrowConcaveAngle=true;    if (offset0.p1.distance(offset1.p0) < distance * INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR) {      segList.addPt(offset0.p1);    } else {      segList.addPt(offset0.p1);      if (closingSegLengthFactor > 0) {        Coordinate mid0=new Coordinate((closingSegLengthFactor * offset0.p1.x + s1.x) / (closingSegLengthFactor + 1),(closingSegLengthFactor * offset0.p1.y + s1.y) / (closingSegLengthFactor + 1));        segList.addPt(mid0);        Coordinate mid1=new Coordinate((closingSegLengthFactor * offset1.p0.x + s1.x) / (closingSegLengthFactor + 1),(closingSegLengthFactor * offset1.p0.y + s1.y) / (closingSegLengthFactor + 1));        segList.addPt(mid1);      } else {        segList.addPt(s1);      }      segList.addPt(offset1.p0);    }  }}  }
class C{  private static void fulfillRequestFromWeb(final HashMap<String,Object> conProp,final DigestURL url,final RequestHeader requestHeader,final ResponseHeader cachedResponseHeader,final OutputStream respond,final ClientIdentification.Agent agent){  try {    final int reqID=requestHeader.hashCode();    final String host=url.getHost();    final String path=url.getPath();    final String args=url.getSearchpart();    final String ip=(String)conProp.get(HeaderFramework.CONNECTION_PROP_CLIENTIP);    final String httpVer=(String)conProp.get(HeaderFramework.CONNECTION_PROP_HTTP_VER);    final String clienthttpVer;    final HttpServletRequest clientservletrequest=(HttpServletRequest)conProp.get(HeaderFramework.CONNECTION_PROP_CLIENT_HTTPSERVLETREQUEST);    if (clientservletrequest != null) {      clienthttpVer=clientservletrequest.getProtocol();    } else {      clienthttpVer=null;    }    final int port=url.getPort();    String yAddress=resolveYacyDomains(host);    final String remotePath=(args == null) ? path : (path + "?" + args);    if ((yAddress != null) && (remotePath.startsWith("/env")) && (yAddress.indexOf('/') != -1))     yAddress=yAddress.substring(0,yAddress.indexOf('/'));    modifyProxyHeaders(requestHeader,httpVer);    final String connectHost=hostPart(host,port,yAddress);    final String getUrl=url.getProtocol() + "://" + connectHost+ remotePath;    requestHeader.remove(HeaderFramework.HOST);    final HTTPClient client=setupHttpClient(requestHeader,agent,connectHost);    try {      client.GET(getUrl,false);      if (log.isFinest())       log.finest(reqID + "    response status: " + client.getHttpResponse().getStatusLine());      int statusCode=client.getHttpResponse().getStatusLine().getStatusCode();      final ResponseHeader responseHeader=new ResponseHeader(statusCode,client.getHttpResponse().getAllHeaders());      if (responseHeader.isEmpty()) {        throw new Exception(client.getHttpResponse().getStatusLine().toString());      }      ChunkedOutputStream chunkedOut=setTransferEncoding(conProp,responseHeader,statusCode,respond);      long sizeBeforeDelete=-1;      if (cachedResponseHeader != null) {        final ResponseHeader rh=Cache.getResponseHeader(url.hash());        if (rh != null && (sizeBeforeDelete=rh.getContentLength()) == 0) {          final byte[] b=Cache.getContent(url.hash());          if (b != null)           sizeBeforeDelete=b.length;        }        Cache.delete(url.hash());        conProp.put(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_CODE,"TCP_REFRESH_MISS");      }      final Request request=new Request(null,url,requestHeader.referer() == null ? null : requestHeader.referer().hash(),"",responseHeader.lastModified(),sb.crawler.defaultProxyProfile.handle(),0,sb.crawler.defaultProxyProfile.timezoneOffset());      handleIncomingCookies(responseHeader,host,ip);      prepareResponseHeader(responseHeader,client.getHttpResponse().getProtocolVersion().toString());      if (chunkedOut != null) {        responseHeader.put(HeaderFramework.TRANSFER_ENCODING,"chunked");      }      if (log.isFinest())       log.finest(reqID + "    sending response header: " + responseHeader);      HTTPDemon.sendRespondHeader(conProp,respond,clienthttpVer,statusCode,client.getHttpResponse().getStatusLine().toString(),responseHeader);      if (hasBody(client.getHttpResponse().getStatusLine().getStatusCode())) {        OutputStream outStream=chunkedOut != null ? chunkedOut : respond;        final Response response=new Response(request,requestHeader,responseHeader,sb.crawler.defaultProxyProfile,true,null);        final String storeError=response.shallStoreCacheForProxy();        final boolean storeHTCache=response.profile().storeHTCache();        final String supportError=TextParser.supports(response.url(),response.getMimeType());        if ((storeError == null) && ((storeHTCache) || (supportError != null))) {          final int l=responseHeader.size();          final ByteArrayOutputStream byteStream=new ByteArrayOutputStream((l < 32) ? 32 : l);          final OutputStream toClientAndMemory=new MultiOutputStream(new OutputStream[]{outStream,byteStream});          client.writeTo(toClientAndMemory);          byte[] cacheArray;          if (byteStream.size() > 0) {            cacheArray=byteStream.toByteArray();          } else {            cacheArray=null;          }          if (log.isFine())           log.fine(reqID + " writeContent of " + url+ " produced cacheArray = "+ ((cacheArray == null) ? "null" : ("size=" + cacheArray.length)));          if (sizeBeforeDelete == -1) {            response.setContent(cacheArray);            try {              Cache.store(response.url(),response.getResponseHeader(),cacheArray);              sb.toIndexer(response);            } catch (            final IOException e) {              log.warn("cannot write " + response.url() + " to Cache (1): "+ e.getMessage(),e);            }            conProp.put(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_CODE,"TCP_MISS");          } else           if (cacheArray != null && sizeBeforeDelete == cacheArray.length) {            cacheArray=null;            conProp.put(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_CODE,"TCP_REF_FAIL_HIT");          } else {            response.setContent(cacheArray);            try {              Cache.store(response.url(),response.getResponseHeader(),cacheArray);              sb.toIndexer(response);            } catch (            final IOException e) {              log.warn("cannot write " + response.url() + " to Cache (2): "+ e.getMessage(),e);            }            conProp.put(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_CODE,"TCP_REFRESH_MISS");          }        } else {          if (log.isFine())           log.fine(reqID + " " + url.toNormalform(false)+ " not cached."+ " StoreError="+ ((storeError == null) ? "None" : storeError)+ " StoreHTCache="+ storeHTCache+ " SupportError="+ supportError);          if (statusCode == HttpServletResponse.SC_OK) {            client.writeTo(outStream);          }          conProp.put(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_CODE,"TCP_MISS");        }        outStream.close();        if (chunkedOut != null) {          chunkedOut.finish();          chunkedOut.flush();        }      }    } catch (    final SocketException se) {      client.finish();      handleProxyException(se,conProp,respond,url);    } finally {      client.finish();    }  } catch (  final Exception e) {    handleProxyException(e,conProp,respond,url);  }}  }
class C{  public VcpcFastRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public boolean needSave(int newRow){  return needSave(newRow,false);}  }
class C{  public DropwizardMetricsCircuitBreakerListener(MetricRegistry registry,String prefix){  this.registry=requireNonNull(registry,"registry");  this.prefix=requireNonNull(prefix,"prefix");}  }
class C{  public QuadEdge makeEdge(Vertex o,Vertex d){  QuadEdge q=QuadEdge.makeEdge(o,d);  quadEdges.add(q);  return q;}  }
class C{  private void emitDimensions(MachineInfo tuple){  MachineKey tupleKey=tuple.getMachineKey();  for (int i=0; i < 64; i++) {    MachineKey machineKey=new MachineKey(tupleKey.getTimeKey(),tupleKey.getDay());    if ((i & 1) != 0) {      machineKey.setCustomer(tupleKey.getCustomer());    }    if ((i & 2) != 0) {      machineKey.setProduct(tupleKey.getProduct());    }    if ((i & 4) != 0) {      machineKey.setOs(tupleKey.getOs());    }    if ((i & 8) != 0) {      machineKey.setDeviceId(tupleKey.getDeviceId());    }    if ((i & 16) != 0) {      machineKey.setSoftware1(tupleKey.getSoftware1());    }    if ((i & 32) != 0) {      machineKey.setSoftware2(tupleKey.getSoftware2());    }    int cpu=tuple.getCpu();    int ram=tuple.getRam();    int hdd=tuple.getHdd();    MachineInfo machineInfo=new MachineInfo();    machineInfo.setMachineKey(machineKey);    machineInfo.setCpu((cpu < threshold) ? cpu : threshold);    machineInfo.setRam((ram < threshold) ? ram : threshold);    machineInfo.setHdd((hdd < threshold) ? hdd : threshold);    outputInline.emit(machineInfo);    output.emit(machineInfo);  }}  }
class C{  public static void saveAsocRegFdr(String sessionID,String entidad,int idArchPrim,int idFdrPrim,int idArchSec,int idFdrSec) throws Exception {  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  Transaction tran=null;  try {    Session session=HibernateUtil.currentSession(entidad);    tran=session.beginTransaction();    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    int assocId=DBEntityDAOFactory.getCurrentDBEntityDAO().getNextIdForScrRegAsoc(user.getId(),entidad);    ISicresSaveQueries.saveScrRegAsoc(session,assocId,idArchPrim,idArchSec,idFdrPrim,idFdrSec);    HibernateUtil.commitTransaction(tran);  } catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  HibernateException e) {    HibernateUtil.rollbackTransaction(tran);    throw e;  }catch (  Exception e) {    throw e;  } finally {    HibernateUtil.closeSession(entidad);  }}  }
class C{  public boolean isFormerEmployee(){  Object oo=get_Value(COLUMNNAME_IsFormerEmployee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Command addCommandToOverflowMenu(String name,Image icon,final ActionListener ev){  Command cmd=Command.create(name,icon,ev);  addCommandToOverflowMenu(cmd);  return cmd;}  }
class C{  protected ScopeImpl(){  super();}  }
class C{  private BridgeTransform(Class<A> from,Class<B> to,TransformFactory factory){  this.from=requireNonNull(from);  this.to=requireNonNull(to);  this.factory=requireNonNull(factory);  this.steps=new ArrayList<>();  this.end=requireNonNull(from);}  }
class C{  public PacketOutputStream writeByte(final byte theByte){  assureBufferCapacity(1);  buffer.put(theByte);  return this;}  }
class C{  public Iterator edgesInto(MethodOrMethodContext m){  return new ArrayList(tgtMap.get(m)).iterator();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_3__OR_OP_1:    return OR_OP_1_EDEFAULT == null ? orOp_1 != null : !OR_OP_1_EDEFAULT.equals(orOp_1);case UmplePackage.ANONYMOUS_LINKING_OP_3__CONSTRAINT_EXPR_1:  return constraintExpr_1 != null && !constraintExpr_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void addChild(Context context){  invoke(hostAddChild,context);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  if (words != null) {    for (int i=0; i < words.length; ++i) {      if (i != 0)       sb.append(' ');      sb.append(Vocabulary.word(words[i]));    }  }  return sb.toString();}  }
class C{  public static <T extends DataObject>void checkForDuplicateName(String name,Class<T> type,URI parentToScope,String parentFieldName,DbClient dbClient){  List<T> objectList=new ArrayList<T>();  if (parentToScope != null && parentFieldName != null) {    objectList=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,type,ContainmentPrefixConstraint.Factory.getFullMatchConstraint(type,parentFieldName,parentToScope,name));  } else {    objectList=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,type,PrefixConstraint.Factory.getFullMatchConstraint(type,DATAOBJECT_NAME_FIELD,name));  }  if (!objectList.isEmpty()) {    throw APIException.badRequests.duplicateLabel(name);  }}  }
class C{  public void testGridMultiPolygonsNoHoleRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  MultiPolygon[] pt=new MultiPolygon[100];  STRUCT[] st=new STRUCT[100];  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiPolygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    MultiPolygon pt2=(MultiPolygon)or.read(st[i]);    assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt[i].equals(pt2));    i++;  }}  }
class C{  public TwoColumnOutput(OutputStream out,int leftWidth,int rightWidth,String spacer){  this(new OutputStreamWriter(out),leftWidth,rightWidth,spacer);}  }
class C{  public static void writeZygoteSnapshot(){  if (!enabled) {    return;  }  writeSnapshotFile("zygote",null);  samplingProfiler.shutdown();  samplingProfiler=null;  startMillis=0;}  }
class C{  public EmbeddedMetaService(String jolieHome) throws IOException, ExecutionException {  this(jolieHome,jolieHome + defaultFilepath);}  }
class C{  public boolean hasArchiveStatus(){  return hasExtension(ArchiveStatus.class);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION___MODIFIER_1:    setModifier_1((String)newValue);  return;case UmplePackage.INLINE_ASSOCIATION___INLINE_ASSOCIATION_END_1:getInlineAssociationEnd_1().clear();getInlineAssociationEnd_1().addAll((Collection<? extends InlineAssociationEnd_>)newValue);return;case UmplePackage.INLINE_ASSOCIATION___ARROW_1:setArrow_1((String)newValue);return;case UmplePackage.INLINE_ASSOCIATION___ASSOCIATION_END_1:getAssociationEnd_1().clear();getAssociationEnd_1().addAll((Collection<? extends AssociationEnd_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void clearResourceType(){  attributes.remove(LinkFormat.RESOURCE_TYPE);}  }
class C{  @Override public ExchangeServer bind(URL url,ExchangeHandler handler) throws RemotingException {  return null;}  }
class C{  public PartitionLocatorTupleSerializer(){}  }
class C{  private void validateGroupRules(HashMap<Integer,List<Group>> groupsByType,List<Rule> rules) throws AdeUsageException {  HashSet<String> ruleNames=new HashSet<String>();  HashSet<String> usedRules=new HashSet<String>();  for (  Rule rule : rules) {    ruleNames.add(rule.getName().toUpperCase());  }  for (  GroupType groupType : GroupType.values()) {    int groupVal=groupType.getValue();    List<Group> groups=groupsByType.get(groupVal);    for (    Group group : groups) {      if (!ruleNames.contains(group.getRuleName().toUpperCase())) {        throw new AdeUsageException("The rule name " + group.getRuleName() + " must be provided in the JSON file.");      }      usedRules.add(group.getRuleName().toUpperCase());    }  }  if (usedRules.size() != ruleNames.size()) {    throw new AdeUsageException("Every rule in the JSON file must be referenced by a group.");  }}  }
class C{  public CreateSubscriptionResponse CreateSubscription(RequestHeader RequestHeader,Double RequestedPublishingInterval,UnsignedInteger RequestedLifetimeCount,UnsignedInteger RequestedMaxKeepAliveCount,UnsignedInteger MaxNotificationsPerPublish,Boolean PublishingEnabled,UnsignedByte Priority) throws ServiceFaultException, ServiceResultException {  CreateSubscriptionRequest req=new CreateSubscriptionRequest(RequestHeader,RequestedPublishingInterval,RequestedLifetimeCount,RequestedMaxKeepAliveCount,MaxNotificationsPerPublish,PublishingEnabled,Priority);  return (CreateSubscriptionResponse)channel.serviceRequest(req);}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public long fileSize(){  return _store.fileSize();}  }
class C{  public boolean scrollToCaret(){  int line=getCaretLine();  int lineStart=getLineStartOffset(line);  int offset=Math.max(0,Math.min(getLineLength(line) - 1,getCaretPosition() - lineStart));  return scrollTo(line,offset);}  }
class C{  public NokiaRingTone(byte[] ringToneData){  super(SmsPort.NOKIA_RING_TONE,SmsPort.ZERO);  ringToneData_=ringToneData;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void generateComplete(ProcessInfo pi){  tabbedPane.setSelectedIndex(1);  ProcessInfoUtil.setLogFromDB(pi);  StringBuffer iText=new StringBuffer();  iText.append("<b>").append(pi.getSummary()).append("</b><br>(").append(Msg.getMsg(Env.getCtx(),genForm.getTitle())).append(")<br>").append(pi.getLogInfo(true));  info.setText(iText.toString());  int[] ids=pi.getIDs();  if (ids == null || ids.length == 0)   return;  log.config("PrintItems=" + ids.length);  confirmPanelGen.getOKButton().setEnabled(false);  if (ADialog.ask(m_WindowNo,this,genForm.getAskPrintMsg())) {    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    int retValue=ADialogDialog.A_CANCEL;    do {      for (int i=0; i < ids.length; i++) {        int Record_ID=ids[i];        if (genForm.getPrintFormat() != null) {          MPrintFormat format=genForm.getPrintFormat();          MTable table=MTable.get(Env.getCtx(),format.getAD_Table_ID());          MQuery query=new MQuery(table.getTableName());          query.addRestriction(table.getTableName() + "_ID",MQuery.EQUAL,Record_ID);          PrintInfo info=new PrintInfo(table.getTableName(),table.get_Table_ID(),Record_ID);          ReportEngine re=new ReportEngine(Env.getCtx(),format,query,info);          re.print();          new Viewer(m_frame.getGraphicsConfiguration(),re);        } else         ReportCtl.startDocumentPrint(genForm.getReportEngineType(),Record_ID,this,Env.getWindowNo(this),true);      }      ADialogDialog d=new ADialogDialog(m_frame,Env.getHeader(Env.getCtx(),m_WindowNo),Msg.getMsg(Env.getCtx(),"PrintoutOK?"),JOptionPane.QUESTION_MESSAGE);      retValue=d.getReturnCode();    } while (retValue == ADialogDialog.A_CANCEL);    this.setCursor(Cursor.getDefaultCursor());  }  confirmPanelGen.getOKButton().setEnabled(true);}  }
class C{  public final int length(){  return array.length;}  }
class C{  @Override public Collection<VALUE> values(){  Collection<VALUE> vs=values;  return (vs != null ? vs : (values=new Values()));}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Object loadStepData(String stepOrWorkflowId,String key){  Workflow workflow=null;  if (stepOrWorkflowId.matches(WORKFLOW_URI_Match)) {    workflow=loadWorkflowFromUri(URI.create(stepOrWorkflowId));    if (workflow != null) {      return loadStepData(workflow.getWorkflowURI(),key,stepOrWorkflowId);    }  } else {    workflow=getWorkflowFromStepId(stepOrWorkflowId);    if (workflow != null) {      return loadStepData(workflow.getWorkflowURI(),key,stepOrWorkflowId);    }  }  _log.info(String.format("No step data found for %s (workflow not found)",stepOrWorkflowId));  return null;}  }
class C{  public int innerClassIndex(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 2);}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length != 2) {    System.err.printf("Usage: java %s tm_file source_file%n",DynamicTranslationModel.class.getName());    System.exit(-1);  }  String fileName=args[0];  String inputFile=args[1];  TimeKeeper timer=TimingUtils.start();  DynamicTranslationModel<String> tm=DynamicTranslationModel.load(fileName,true,DEFAULT_NAME);  tm.setReorderingScores(true);  timer.mark("Load");  tm.createQueryCache(FeatureTemplate.DENSE_EXT_LOPEZ);  timer.mark("Cache creation");  List<Sequence<IString>> sourceFile=IStrings.tokenizeFile(inputFile);  timer.mark("Source file loading");  long startTime=TimingUtils.startTime();  int sourceId=0, numRules=0;  InputProperties inProps=new InputProperties();  for (  Sequence<IString> source : sourceFile) {    numRules+=tm.getRules(source,inProps,sourceId++,null).size();  }  double queryTimeMillis=TimingUtils.elapsedMillis(startTime);  timer.mark("Query");  startTime=TimingUtils.startTime();  int numSAQueries=0;  for (  Sequence<IString> source : sourceFile) {    for (    Sequence<IString> ngram : Sequences.ngrams(source,2)) {      int[] query=new int[ngram.size()];      query[0]=tm.toTMId(ngram.get(0));      if (ngram.size() == 2)       query[1]=tm.toTMId(ngram.get(1));      boolean doQuery=Arrays.stream(query).allMatch(null);      if (doQuery)       tm.sa.count(query,true);      ++numSAQueries;    }  }  double saTime=TimingUtils.elapsedSeconds(startTime);  timer.mark("SA Query");  System.out.printf("SA src size:        %d%n",tm.sa.sourceSASize());  System.out.printf("SA tgt size:        %d%n",tm.sa.targetSASize());  System.out.printf("SA num sentences:   %d%n",tm.sa.numSentences());  System.out.printf("SA vocab size:      %d%n",tm.sa.getVocabulary().size());  System.out.printf("TM src cardinality: %d%n",tm.maxLengthSource());  System.out.printf("TM tgt cardinality: %d%n",tm.maxLengthTarget());  System.out.printf("TM Cooc table size: %d%n",tm.coocTable.size());  System.out.println("===========");  System.out.printf("#source segments:   %d%n",sourceFile.size());  System.out.printf("Timing: %s%n",timer);  System.out.printf("Time/segment: %.2fms%n",queryTimeMillis / (double)sourceFile.size());  System.out.printf("#rules: %d%n",numRules);  System.out.printf("#segments: %d%n",sourceFile.size());  System.out.printf("#sa queries: %d%n",numSAQueries);  System.out.printf("Time/sa query: %.5fs%n",saTime);}  }
class C{  public static String saveLyric(Lyric lyric){  return "";}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public boolean contains(Charset cs){  return cs instanceof HexCharset;}  }
class C{  public GoogleBaseAttribute(String name){  this(new GoogleBaseAttributeId(name,null),null);}  }
class C{  public boolean hasNoDragOffset(){  return mViewPortHandler.hasNoDragOffset();}  }
class C{  private static double roundedHeapSize(double heap,int precision){  double rounded=new BigDecimal(heap / (1024 * 1024 * 1024d)).round(new MathContext(precision)).doubleValue();  return rounded < 0.1 ? 0.1 : rounded;}  }
class C{  public Guard createGuard(){  GuardImpl guard=new GuardImpl();  return guard;}  }
class C{  public void addMusicFolderPath(String folderPath){  if (folderPath.contains("'")) {    folderPath=folderPath.replace("'","''");  }  ContentValues values=new ContentValues();  values.put(FOLDER_PATH,folderPath);  getDatabase().insert(MUSIC_FOLDERS_TABLE,null,values);}  }
class C{  public static Object invokeMethod(Object instance,String className,PackageType packageType,String methodName,Object... arguments) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {  return invokeMethod(instance,packageType.getClass(className),methodName,arguments);}  }
class C{  public static void markGeneratorByFileExt(String fileExt,int regLevel) throws RegisterFailedException {  String clsID=getClassIDByFileExt(fileExt,regLevel);  String clsIDKey=getClsIDKey(clsID,regLevel);  if (clsIDKey != null) {    regSetValueEx(clsIDKey,VN_DEFAULTGENERATOR,VALUE_DEFAULTGENERATOR,regLevel);  }}  }
class C{  public List<OutputT> takeOutputElements(){  List<OutputT> resultElems=new ArrayList<>(peekOutputElements());  clearOutputElements();  return resultElems;}  }
class C{  public static synchronized boolean isInitialized(){  return sdkInitialized;}  }
class C{  public CPrinter(){  super(getPrinterNames());  setValue(Ini.getProperty(Ini.P_PRINTER));  this.addActionListener(this);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private BrownClusters(){}  }
class C{  public void firePropertyChange(String propertyName,double oldValue,double newValue){}  }
class C{  private Network findMatchByFabricIdAndWwn(Network newTransportZone,Collection<Network> oldTransportZones){  for (  Network zone : oldTransportZones) {    if (newTransportZone.getNativeId().equals(zone.getNativeId()) && newTransportZone.getNativeGuid().equals(zone.getNativeGuid())) {      return zone;    }  }  return null;}  }
class C{  private boolean hasTrailingToken(Input input,List<? extends Tree> nodes,String token){  if (nodes.isEmpty()) {    return false;  }  Tree lastNode=getLast(nodes);  Optional<? extends Input.Token> nextToken=getNextToken(input,getEndPosition(lastNode,getCurrentPath()));  return nextToken.isPresent() && nextToken.get().getTok().getText().equals(token);}  }
class C{  public UpdateBuilder bindStatements(String from,Collection<Statement> statements){  StringBuilder b=new StringBuilder(statements.size() * 30);  for (  Statement s : statements) {    b.append(str(s.getSubject())).append(' ');    b.append(str(s.getPredicate())).append(' ');    b.append(str(s.getObject())).append(" .\n");  }  bind(from,b.toString().trim());  return this;}  }
class C{  private void checkBuffersAndSizes(byte[][] shards,int offset,int byteCount){  if (shards.length != totalShardCount) {    throw new IllegalArgumentException("wrong number of shards: " + shards.length);  }  int shardLength=shards[0].length;  for (int i=1; i < shards.length; i++) {    if (shards[i].length != shardLength) {      throw new IllegalArgumentException("Shards are different sizes");    }  }  if (offset < 0) {    throw new IllegalArgumentException("offset is negative: " + offset);  }  if (byteCount < 0) {    throw new IllegalArgumentException("byteCount is negative: " + byteCount);  }  if (shardLength < offset + byteCount) {    throw new IllegalArgumentException("buffers to small: " + byteCount + offset);  }}  }
class C{  private static void readNodes(String pathToInputFile_Nodes,TemplateNetworkConverter networkConverter){  BufferedReader fileReader=IOUtils.getBufferedReader(pathToInputFile_Nodes);  try {    String line=fileReader.readLine();    while (line != null) {      String[] lineArgs=line.split(",");      if (lineArgs[0].equals("node")) {        String nodeId=null;        double xCoord=0;        double yCoord=0;        networkConverter.addNode(nodeId,xCoord,yCoord);      } else {      }      line=fileReader.readLine();    }    fileReader.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void decodeLineSuffix(PushbackInputStream inStream,OutputStream outStream) throws IOException {  int i;  int lineCRC=crc.value;  int readCRC;  byte tmp[];  lineAndSeq.reset();  decodeAtom(inStream,lineAndSeq,2);  tmp=lineAndSeq.toByteArray();  readCRC=((tmp[0] << 8) & 0xFF00) + (tmp[1] & 0xff);  if (readCRC != lineCRC) {    throw new CEFormatException("UCDecoder: CRC check failed.");  }}  }
class C{  public Beach(){  super();}  }
class C{  public SFTPv3Client(Connection conn,PrintStream debug) throws IOException {  if (conn == null)   throw new IllegalArgumentException("Cannot accept null argument!");  this.conn=conn;  this.debug=debug;  if (debug != null)   debug.println("Opening session and starting SFTP subsystem.");  sess=conn.openSession();  sess.startSubSystem("sftp");  is=sess.getStdout();  os=new BufferedOutputStream(sess.getStdin(),2048);  if ((is == null) || (os == null))   throw new IOException("There is a problem with the streams of the underlying channel.");  init();}  }
class C{  public void signRequest(Verb verb){  String convertedUrl=SecurityUtils.convertUrl(requestUrl,verb,params);  if (convertedUrl != null) {    params.put("oauth_signature",SecurityUtils.getSignatureFromRequest(convertedUrl,apiKeySecret + SEPARATOR + (oAuthTokenSecret == null ? "" : oAuthTokenSecret)));  }}  }
class C{  public dd addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void test_metric_heartbeat_uint32(){  final IGangliaMetadataMessage decl=new GangliaMetadataMessage("bigdata10","heartbeat",false,GangliaMessageTypeEnum.UINT32,"heartbeat","",GangliaSlopeEnum.unspecified,20,0,AbstractMetrics.getMap(IGangliaAttributes.GROUP_CORE,"heartbeat","Last heartbeat"));  assertEncodeDecode(null,decl);  final IGangliaMetricMessage expected=new GangliaMetricMessage(GangliaMessageTypeEnum.UINT32,"bigdata10","heartbeat",false,"%u",Long.valueOf(1326920615L));  final byte[] actualData=assertEncodeDecode(decl,expected);  final byte[] expectedData=new byte[]{0,0,0,-124,0,0,0,9,98,105,103,100,97,116,97,49,48,0,0,0,0,0,0,9,104,101,97,114,116,98,101,97,116,0,0,0,0,0,0,0,0,0,0,2,37,117,0,0,79,23,51,-89};  if (!Arrays.equals(expectedData,actualData)) {    fail("expect: " + Arrays.toString(expectedData) + ", actual="+ Arrays.toString(actualData));  }}  }
class C{  public net.minecraft.world.chunk.Chunk loadChunk(int x,int z){  return provideChunk(x,z);}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  public MetricQuery(MetricQuery clone){  SystemAssert.requireArgument(clone != null,"The object to clone cannot be null.");  _scope=clone.getScope();  _metric=clone.getMetric();  setTags(clone.getTags());  setStartTimestamp(clone.getStartTimestamp());  setEndTimestamp(clone.getEndTimestamp());  setNamespace(clone.getNamespace());  setAggregator(clone.getAggregator());  setDownsampler(clone.getDownsampler());  setDownsamplingPeriod(clone.getDownsamplingPeriod());}  }
class C{  public ByteBuffer buildPacket(int encap,short destUdp,short srcUdp){  ByteBuffer result=ByteBuffer.allocate(MAX_LENGTH);  fillInPacket(encap,mClientIp,mYourIp,destUdp,srcUdp,result,DHCP_BOOTREQUEST,false);  result.flip();  return result;}  }
class C{  public String toStringMatrix(){  StringBuffer result;  String[][] cells;  int i;  int n;  int nameWidth;  String line;  String colStr;  int rows;  result=new StringBuffer();  cells=toArray();  nameWidth=getColSize(cells,0);  for (i=0; i < cells.length - 1; i++)   cells[i][0]=padString(cells[i][0],nameWidth);  rows=cells.length - 1;  if (getShowAverage())   rows--;  for (i=0; i < rows; i++) {    line="";    colStr="";    for (n=0; n < cells[i].length; n++) {      if (isMean(n) || isRowName(n))       colStr=cells[0][n];      if ((n > 1) && (!isSignificance(n)))       continue;      if (n > 0)       line+=" ";      if ((i > 0) && (n > 1))       line+=" ";      if (i == 0) {        line+=colStr;      } else {        if (n == 0) {          line+=cells[i][n];        } else         if (n == 1) {          line+=colStr.replaceAll("."," ");        } else {          line+=cells[i][n];          line+=colStr.replaceAll("."," ").substring(2);        }      }    }    result.append(line + "\n");    if (i == 0)     result.append(line.replaceAll(".","-") + "\n");  }  return result.toString();}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  for (StepPattern pat=this; pat != null; pat=pat.m_relativePathPattern) {    if (pat != this)     buf.append("/");    buf.append(Axis.getNames(pat.m_axis));    buf.append("::");    if (0x000005000 == pat.m_whatToShow) {      buf.append("doc()");    } else     if (DTMFilter.SHOW_BYFUNCTION == pat.m_whatToShow) {      buf.append("function()");    } else     if (DTMFilter.SHOW_ALL == pat.m_whatToShow) {      buf.append("node()");    } else     if (DTMFilter.SHOW_TEXT == pat.m_whatToShow) {      buf.append("text()");    } else     if (DTMFilter.SHOW_PROCESSING_INSTRUCTION == pat.m_whatToShow) {      buf.append("processing-instruction(");      if (null != pat.m_name) {        buf.append(pat.m_name);      }      buf.append(")");    } else     if (DTMFilter.SHOW_COMMENT == pat.m_whatToShow) {      buf.append("comment()");    } else     if (null != pat.m_name) {      if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {        buf.append("@");      }      if (null != pat.m_namespace) {        buf.append("{");        buf.append(pat.m_namespace);        buf.append("}");      }      buf.append(pat.m_name);    } else     if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {      buf.append("@");    } else     if ((DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT) == pat.m_whatToShow) {      buf.append("doc-root()");    } else {      buf.append("?" + Integer.toHexString(pat.m_whatToShow));    }    if (null != pat.m_predicates) {      for (int i=0; i < pat.m_predicates.length; i++) {        buf.append("[");        buf.append(pat.m_predicates[i]);        buf.append("]");      }    }  }  return buf.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.485 -0400",hash_original_method="AE68C1645286560831358DD2BB3F1723",hash_generated_method="91E429D82F8C1189894B356A843378F9") protected CanWriteFileFilter(){}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Language=[");  sb.append(m_name).append(",Locale=").append(m_locale.toString()).append(",AD_Language=").append(m_AD_Language).append(",DatePattern=").append(getDBdatePattern()).append(",DecimalPoint=").append(isDecimalPoint()).append("]");  return sb.toString();}  }
class C{  @SuppressWarnings("unchecked") void updateGroupSelector(){  cbFrameNum.removeAllItems();  cbFrameNum.addItem("All Groups");  Object[] frames=prt.knownGrpItems.keySet().toArray();  Arrays.sort(frames);  for (int i=0; i < frames.length; i++) {    cbFrameNum.addItem(String.format("Group %s",frames[i]));  }}  }
class C{  public void doErrorTest(Uri uri,int error) throws Exception {  Request request=new Request(uri);  request.setTitle(DEFAULT_FILENAME);  long dlRequest=mDownloadManager.enqueue(request);  waitForDownloadOrTimeout(dlRequest);  Cursor cursor=getCursor(dlRequest);  try {    verifyInt(cursor,DownloadManager.COLUMN_REASON,error);  }  finally {    cursor.close();  }}  }
class C{  public final double doOperation(){  double[] mass=null;  int whichRegion=0;  if (polygonList.size() > 1) {    mass=new double[polygonList.size()];    for (int i=0; i < polygonList.size(); ++i) {      mass[i]=polygonList.get(i).calculateArea();    }    whichRegion=MathUtils.randomChoicePDF(mass);  }  totalOps++;  if (whichRegion == 0) {    currentSum++;  }  Polygon2D polygon=polygonList.get(whichRegion);  double[][] minMax=polygon.getXYMinMax();  int attempts=0;  Point2D pt;  do {    pt=new Point2D.Double((MathUtils.nextDouble() * (minMax[0][1] - minMax[0][0])) + minMax[0][0],(MathUtils.nextDouble() * (minMax[1][1] - minMax[1][0])) + minMax[1][0]);    attempts++;  } while (!polygon.containsPoint2D(pt));  if (DEBUG) {    System.err.println("region: " + whichRegion + " attempts: "+ attempts+ " "+ mass[0]+ " "+ mass[1]+ "     "+ ((double)currentSum / (double)totalOps));  }  parameter.setParameterValue(0,pt.getX());  parameter.setParameterValue(1,pt.getY());  return 0.0;}  }
class C{  public static String transformClassName(String className){  int lastDot=className.lastIndexOf('.');  if (lastDot >= 0) {    String pkg=className.substring(0,lastDot);    if (!isUnlikelyToBeRenamed(pkg)) {      className=className.substring(lastDot + 1);    }  }  return className;}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean isValidAggregate(@NotNull ArrayList<Map<String,Object>> rows) throws Exception {  Object computed=aggregateIndex.compute(rows);  return (compareType == compareValue.compareTo(computed));}  }
class C{  protected void configOutputs(Element model){  if (model == null) {    log.debug("configOutputs was given a null model");    return;  }  Attribute a=model.getAttribute("numOuts");  try {    if (a != null) {      numOut=Integer.valueOf(a.getValue()).intValue();    }  } catch (  Exception e) {    log.error("error handling decoder's numOuts value");  }  a=model.getAttribute("numFns");  try {    if (a != null) {      numFn=Integer.valueOf(a.getValue()).intValue();    }  } catch (  Exception e) {    log.error("error handling decoder's numFns value");  }  if (log.isDebugEnabled()) {    log.debug("numFns, numOuts " + numFn + ","+ numOut);  }  List<Element> elemList=model.getChildren("output");  if (log.isDebugEnabled()) {    log.debug("output scan starting with " + elemList.size() + " elements");  }  for (int i=0; i < elemList.size(); i++) {    Element e=elemList.get(i);    String name=e.getAttribute("name").getValue();    try {      int outputNum=Integer.valueOf(name).intValue();      String at=LocaleSelector.getAttribute(e,"label");      if (at != null) {        loadSplitLabel(outputNum - 1,at);        numOut=Math.max(numOut,outputNum);      }    } catch (    java.lang.NumberFormatException ex) {      if (numOut < maxOut) {        outName[numOut]=name;        String at;        if ((at=LocaleSelector.getAttribute(e,"label")) != null) {          outLabel[numOut]=at;        } else {          outLabel[numOut]="";        }        numOut++;      }    }  }}  }
class C{  public static Predicate<Number> even(){  return null;}  }
class C{  public GPUImageDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public String toString(){  return ("(" + primId + ": \t"+ x1+ " \t"+ x2+ " \t"+ y1+ " \t"+ y2+ ")");}  }
class C{  public Matrix4x3d reflect(double a,double b,double c,double d){  return reflect(a,b,c,d,this);}  }
class C{  public static ChromeTab createLiveTab(int id,ChromeActivity activity,boolean incognito,WindowAndroid nativeWindow,TabLaunchType type,int parentId,boolean initiallyHidden){  return new ChromeTab(id,activity,incognito,nativeWindow,type,parentId,initiallyHidden ? TabCreationState.LIVE_IN_BACKGROUND : TabCreationState.LIVE_IN_FOREGROUND,null);}  }
class C{  public double weightedTrueNegativeRate(){  return m_delegate.weightedTrueNegativeRate();}  }
class C{  public VaultConfig sslPemFile(final File sslPemFile) throws VaultException {  try (final InputStream input=new FileInputStream(sslPemFile)){    this.sslPemUTF8=inputStreamToUTF8(input);  } catch (  IOException e) {    throw new VaultException(e);  }  return this;}  }
class C{  public static double clamp(double value,double low,double high){  return Math.min(Math.max(value,low),high);}  }
class C{  public Matrix4x3f shadow(Vector4fc light,float a,float b,float c,float d){  return shadow(light.x(),light.y(),light.z(),light.w(),a,b,c,d,this);}  }
class C{  public static QueueInfo removeCorruptRequest(QueueInfo queueInfo){  QueueState state=new QueueState(queueInfo.getRequestCount() - 1,queueInfo.getFirstRequestNo() + 1,queueInfo.getLastSentTime(),queueInfo.getFirstRequestSendCount(),queueInfo.getLastSuccessId(),queueInfo.getLastSuccessTime(),queueInfo.getLastSendResult());  return new QueueInfo(queueInfo.getName(),state);}  }
class C{  public synchronized HashMap<String,RoomClient> sendMessageByRoomAndDomain(Long room_id,Object message){  HashMap<String,RoomClient> roomClientList=new HashMap<String,RoomClient>();  try {    log.debug("sendMessageByRoomAndDomain " + room_id);    IScope globalScope=getContext().getGlobalScope();    IScope webAppKeyScope=globalScope.getScope(OpenmeetingsVariables.webAppRootKey);    log.debug("webAppKeyScope " + webAppKeyScope);    IScope scopeHibernate=webAppKeyScope.getScope(room_id.toString());    if (scopeHibernate != null) {      Collection<Set<IConnection>> conCollection=webAppKeyScope.getScope(room_id.toString()).getConnections();      for (      Set<IConnection> conset : conCollection) {        for (        IConnection conn : conset) {          if (conn != null) {            RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());            if (rcl == null) {            } else             if (rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {            } else {              if (conn instanceof IServiceCapableConnection) {                ((IServiceCapableConnection)conn).invoke("newMessageByRoomAndDomain",new Object[]{message},this);              }            }          }        }      }    } else {      log.debug("sendMessageByRoomAndDomain servlet not yet started  - roomID : '" + room_id + "'");    }  } catch (  Exception err) {    log.error("[getClientListBYRoomAndDomain]",err);  }  return roomClientList;}  }
class C{  private void processRequestedAcrValuesIfAny(final AuthorizationRequest authorizationRequest,final List<Principal> principals){  if (authorizationRequest.getExtensions().containsKey(OIDCConstants.ACR_VALUES)) {    final String[] acrValues=authorizationRequest.getExtensions().get(OIDCConstants.ACR_VALUES).toString().split(" ");    for (    final String acrValue : acrValues) {      final AuthnContextClassRefPrincipal requestedPrincipal=new AuthnContextClassRefPrincipal(acrValue.trim());      for (      final AuthenticationFlowDescriptor flow : this.availableAuthenticationFlows) {        if (!principals.contains(requestedPrincipal) && flow.getSupportedPrincipals().contains(requestedPrincipal)) {          principals.add(requestedPrincipal);        }      }    }  }}  }
class C{  public static IType resolveElementToJavaType(IDOMElement element,IJavaProject javaProject){  String qualifiedTypeName=computeQualifiedWidgetTypeName(element);  if (qualifiedTypeName == null) {    Node typeAttr=getTypeAttribute(element);    if (typeAttr != null) {      qualifiedTypeName=typeAttr.getNodeValue();    }  }  if (qualifiedTypeName == null) {    if (isImageElement(element)) {      qualifiedTypeName=UiBinderConstants.UI_BINDER_IMAGE_RESOURCE_NAME;    } else     if (isDataElement(element)) {      qualifiedTypeName=UiBinderConstants.UI_BINDER_DATA_RESOURCE_NAME;    } else     if (isImportElement(element)) {      Node node=getFieldAttribute(element);      if (node == null) {        return null;      }      String qualifiedConstant=node.getNodeValue();      int index=qualifiedConstant.lastIndexOf('.');      if (index != -1) {        qualifiedTypeName=qualifiedConstant.substring(0,index);      }    }  }  if (qualifiedTypeName == null) {    return null;  }  try {    return javaProject.findType(qualifiedTypeName);  } catch (  JavaModelException e) {    GWTPluginLog.logWarning(e,"Could not resolve element to Java type.");    return null;  }}  }
class C{  public boolean isReversed(){  return STATUS_Reversed.equals(m_status);}  }
class C{  MonthDay(MonthDay partial,int[] values){  super(partial,values);}  }
class C{  public static void fixGTFSTrainSingapore2() throws IOException {  SortedMap<String,TripAux> trips=new TreeMap<String,TripAux>();  File oldFile=new File("./data/gtfs/trains/trips2.txt");  File newFile=new File("./data/gtfs/trains/trips.txt");  BufferedReader reader=new BufferedReader(new FileReader(oldFile));  PrintWriter writer=new PrintWriter(newFile);  String line=reader.readLine();  writer.println(line);  line=reader.readLine();  while (line != null) {    String[] parts=line.split(",");    if (!parts[2].contains("_first") && !parts[2].contains("_last")) {      TripAux tripAux=trips.get(parts[2]);      if (tripAux == null) {        trips.put(parts[2],new TripAux());        tripAux=trips.get(parts[2]);      }      tripAux.setLine(line);    } else     if (parts[2].contains("_first")) {      String tripId=parts[2].replaceAll("_first","");      TripAux tripAux=trips.get(tripId);      if (tripAux == null) {        tripAux=trips.put(parts[2],new TripAux());        tripAux=trips.get(parts[2]);        tripAux.setLine(line);      }      tripAux.addFirst(parts[2]);    } else {      String tripId=parts[2].replaceAll("_last","");      TripAux tripAux=trips.get(tripId);      if (tripAux == null) {        tripAux=trips.put(parts[2],new TripAux());        tripAux=trips.get(parts[2]);        tripAux.setLine(line);      }      tripAux.addLast(parts[2]);    }    line=reader.readLine();  }  for (  Entry<String,TripAux> trip : trips.entrySet()) {    writer.println(trip.getValue().getLine());    System.out.println(trip.getKey() + " " + trip.getValue().getFirsts().size()+ " "+ trip.getValue().getLasts().size());  }  writer.close();  reader.close();  Map<String,String> startDepartures=new HashMap<String,String>();  Map<String,String> endDepartures=new HashMap<String,String>();  oldFile=new File("./data/gtfs/trains/stop_times2.txt");  newFile=new File("./data/gtfs/trains/stop_times.txt");  reader=new BufferedReader(new FileReader(oldFile));  writer=new PrintWriter(newFile);  line=reader.readLine();  writer.println(line);  line=reader.readLine();  while (line != null) {    String[] parts=line.split(",");    if (parts[0].contains("_first")) {      String tripId=parts[0].replaceAll("_first","");      if (trips.containsKey(tripId)) {        if (startDepartures.get(tripId) == null)         startDepartures.put(tripId,parts[2]);        writer.print(tripId);        for (int i=1; i < parts.length; i++)         writer.print("," + parts[i]);        writer.println();      }    } else     if (parts[0].contains("_last")) {      String tripId=parts[0].replaceAll("_last","");      ;      if (trips.containsKey(tripId)) {        if (endDepartures.get(tripId) == null)         endDepartures.put(tripId,parts[2]);      } else       if (trips.containsKey(parts[0]))       writer.println(line);    } else {      if (trips.get(parts[0]).getFirsts().size() == 0)       writer.println(line);    }    line=reader.readLine();  }  writer.close();  reader.close();  oldFile=new File("./data/gtfs/trains/frequencies2.txt");  newFile=new File("./data/gtfs/trains/frequencies.txt");  reader=new BufferedReader(new FileReader(oldFile));  writer=new PrintWriter(newFile);  line=reader.readLine();  writer.println(line);  String previous=line;  line=reader.readLine();  String[] parts=line.split(",");  String tripId=parts[0];  previous=parts[0] + "," + startDepartures.get(parts[0]);  for (int i=2; i < parts.length; i++)   previous+="," + parts[i];  line=reader.readLine();  while (line != null) {    parts=line.split(",");    if (!parts[0].equals(tripId)) {      String[] parts2=previous.split(",");      if (endDepartures.get(parts2[0]) != null) {        for (int i=0; i < 2; i++)         writer.print(parts2[i] + ",");        writer.println(endDepartures.get(parts2[0]) + "," + parts2[3]);      } else       writer.println(previous);      tripId=parts[0];      previous=parts[0] + "," + startDepartures.get(parts[0]);      for (int i=2; i < parts.length; i++)       previous+="," + parts[i];    } else {      writer.println(previous);      previous=line;    }    line=reader.readLine();  }  String[] parts2=previous.split(",");  if (endDepartures.get(parts2[0]) != null) {    for (int i=0; i < 2; i++)     writer.print(parts2[i] + ",");    writer.println(endDepartures.get(parts2[0]) + "," + parts2[3]);  } else   writer.println(previous);  writer.close();  reader.close();}  }
class C{  public MessageDialogBuilder addButton(MessageDialogButton button){  if (button != null) {    buttons.add(button);  }  return this;}  }
class C{  public static NDC push(String... context){  return new NDC(context);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getPropertyName().equals("defaultButton")) {    JRootPane rootpane=(JRootPane)e.getSource();    updateDefaultButtonBindings(rootpane);    if (rootpane.getClientProperty("temporaryDefaultButton") == null) {      rootpane.putClientProperty("initialDefaultButton",e.getNewValue());    }  }}  }
class C{  public int update(String query) throws SQLException {  if (!isConnected()) {    throw new IllegalStateException("Not connected, please connect first!");  }  Statement statement;  if (!isCursorScrollable()) {    statement=m_Connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);  } else {    statement=m_Connection.createStatement(getSupportedCursorScrollType(),ResultSet.CONCUR_READ_ONLY);  }  int result=statement.executeUpdate(query);  statement.close();  return result;}  }
class C{  Entry<K,V> removeEntryForKey(Object key){  Object k=maskNull(key);  int hash=hash(k);  int i=indexFor(hash,table.length);  Entry<K,V> prev=table[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (e.hash == hash && eq(k,e.key)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  public boolean isBold(){  return modifiers.contains(SGR.BOLD);}  }
class C{  public static List<Vertex> targets(List<Transition> transitions){  List<Vertex> vertices=new ArrayList<Vertex>();  for (  Transition transition : transitions) {    vertices.add(transition.getTarget());  }  return vertices;}  }
class C{  public synchronized void add(K obj){  int len=array.length;  array=Arrays.copyOf(array,len + 1);  array[len]=obj;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public void drop(java.awt.dnd.DropTargetDropEvent dtde){  dtde.acceptDrop(DnDConstants.ACTION_MOVE);  transferData=extractTransferData(dtde);  dropLocation=extractDropLocation(dtde);  dtde.dropComplete(true);  if (transferData == null || dropLocation == null)   return;  JPopupMenu popup=new JPopupMenu();  TitledBorder titledBorder=BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(),"Available Drop Targets:");  titledBorder.setTitleColor(Color.gray);  popup.setBorder(titledBorder);  Border compoundborder=BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(),BorderFactory.createEmptyBorder(2,2,2,2));  if (transferData instanceof Location) {    ((Location)transferData).setLocation(dropLocation.x,dropLocation.y,proj);    OMGraphicHandlerLayer omlayer=null;    String layer_name;    Enumeration keys=layers.keys();    while (keys.hasMoreElements()) {      layer_name=keys.nextElement().toString();      omlayer=(OMGraphicHandlerLayer)layers.get(layer_name);      if (omlayer.isVisible()) {        JMenuItem menuItem=new JMenuItem(layer_name);        menuItem.setHorizontalTextPosition(SwingConstants.CENTER);        menuItem.setBorder(compoundborder);        menuItem.addActionListener(this);        popup.add(menuItem);      }    }    popup.addSeparator();  }  JMenuItem menuItem=new JMenuItem("CANCEL");  menuItem.setForeground(Color.red);  menuItem.setHorizontalTextPosition(SwingConstants.CENTER);  menuItem.setBorder(compoundborder);  popup.add(menuItem);  popup.setPreferredSize(new Dimension(150,(popup.getComponentCount() + 1) * 25));  popup.show(((DropTarget)dtde.getSource()).getComponent(),dropLocation.x,dropLocation.y);}  }
class C{  public UnlockKeyAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("UnlockKeyAction.statusbar"));  putValue(NAME,res.getString("UnlockKeyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("UnlockKeyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("UnlockKeyAction.image")))));}  }
class C{  public RouteLocation addLocation(Location location,int sequence){  RouteLocation rl=addLocation(location);  if (sequence < 1 || sequence > _routeHashTable.size()) {    return rl;  }  for (int i=0; i < _routeHashTable.size() - sequence; i++) {    moveLocationUp(rl);  }  return rl;}  }
class C{  private Eml loadEmlFromFile(String shortname,@NotNull BigDecimal version) throws IOException, SAXException, ParserConfigurationException {  Preconditions.checkNotNull(version);  File emlFile=dataDir.resourceEmlFile(shortname,version);  LOG.debug("Loading EML from file: " + emlFile.getAbsolutePath());  InputStream in=new FileInputStream(emlFile);  return EmlFactory.build(in);}  }
class C{  public static String filenameWithoutExtension(IFile file){  String filename=file.getName();  int extPos=filename.lastIndexOf('.');  if (extPos == -1) {    return filename;  }  return filename.substring(0,extPos);}  }
class C{  public ActionErrors validateCreate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=validate(mapping,request);  if (StringUtils.isEmpty(nombre)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_NOMBRE,request.getLocale())));  }  return errors;}  }
class C{  public static Future<?> submit(Runnable task){  return THREAD_POOL.submit(task);}  }
class C{  public SimpleLongArrayList(){  this(10);}  }
class C{  public static CommandLineResult executeCommandLine(@Nullable final Map<String,String> env,final String cmd,@Nullable final String[] args,@Nullable final String[] redactedArgs,final long timeout,@Nullable final File workingDirectory,@Nullable LineConsumerFactory lineConsumerFactory) throws IOException {  CommandLine command=new CommandLine(cmd);  if (args != null) {    for (    String arg : args) {      command.add(arg);    }  }  CommandLine redactedCommand=new CommandLine(command);  if (redactedArgs != null) {    for (    String arg : redactedArgs) {      redactedCommand.add(arg);    }  }  LOG.debug("Running command: " + command.toString());  final ProcessBuilder processBuilder=new ProcessBuilder(redactedCommand.toShellCommand());  Map<String,String> environment=processBuilder.environment();  if (env != null) {    environment.putAll(env);  }  environment.put("LANG","en_US.UTF-8");  environment.put("GDM_LANG","en_US.UTF-8");  environment.put("LANGUAGE","us");  processBuilder.directory(workingDirectory);  LineConsumer lineConsumer=LineConsumer.DEV_NULL;  if (lineConsumerFactory != null) {    lineConsumer=lineConsumerFactory.newLineConsumer();  }  final CommandLineOutputProcessor stdOutConsumer=new CommandLineOutputProcessor(new ArrayList<String>());  final CommandLineOutputProcessor stdErrConsumer=new CommandLineOutputProcessor(new ArrayList<String>());  final Process process=processBuilder.start();  final Watchdog watcher;  if (timeout > 0) {    watcher=new Watchdog(timeout,TimeUnit.MILLISECONDS);    watcher.start(new CancellableProcessWrapper(process));  }  try (LineConsumer consumer=new CompositeLineConsumer(lineConsumer,stdOutConsumer)){    ProcessUtil.process(process,consumer,stdErrConsumer);    process.waitFor();  } catch (  InterruptedException e) {    throw new IOException(e);  }  return new CommandLineResult(command,process.exitValue(),stdOutConsumer.getOutput(),stdErrConsumer.getOutput());}  }
class C{  public static void w(String message){  if (BuildConfig.DEBUG)   Log.w(TAG,buildLogMsg(message));}  }
class C{  private void checkCapabilitiesIfNeeded(){  if (!mCapabilitiesCheckDeferred)   return;  mMaxTextures=Capabilities.getInstance().getMaxTextureImageUnits();}  }
class C{  protected CoverTreeNode new_leaf(Integer idx){  CoverTreeNode new_leaf=new CoverTreeNode(idx,0.0,0.0,null,0,100);  return new_leaf;}  }
class C{  public NoSubscriptionServersAvailableException(String message){  super(message);}  }
class C{  private void check_timeout(){  if (timeout())   throw new RuntimeException("Catch Block Timeout");}  }
class C{  public static final Action[] augmentList(Action[] list1,Action[] list2){  Hashtable<String,Action> h=new Hashtable<String,Action>();  for (  Action a : list1) {    String value=(String)a.getValue(Action.NAME);    h.put((value != null ? value : ""),a);  }  for (  Action a : list2) {    String value=(String)a.getValue(Action.NAME);    h.put((value != null ? value : ""),a);  }  Action[] actions=new Action[h.size()];  int index=0;  for (Enumeration e=h.elements(); e.hasMoreElements(); ) {    actions[index++]=(Action)e.nextElement();  }  return actions;}  }
class C{  private void deletePassword(Intent data){  if (data != null && data.hasExtra(PASSWORD_LIST_DELETED_ID)) {    int deletedId=data.getIntExtra(PASSWORD_LIST_DELETED_ID,-1);    boolean isException=data.getBooleanExtra(DELETED_ITEM_IS_EXCEPTION,false);    if (isException) {      mPasswordManagerHandler.removeSavedPasswordException(deletedId);    } else {      mPasswordManagerHandler.removeSavedPasswordEntry(deletedId);    }  }}  }
class C{  private Location createLocation() throws SAXException {  if (latitude == null || longitude == null) {    return null;  }  double latitudeValue;  double longitudeValue;  try {    latitudeValue=Double.parseDouble(latitude);    longitudeValue=Double.parseDouble(longitude);  } catch (  NumberFormatException e) {    throw new SAXException(createErrorMessage(String.format(Locale.US,"Unable to parse latitude longitude: %s %s",latitude,longitude)),e);  }  Double altitudeValue=null;  if (altitude != null) {    try {      altitudeValue=Double.parseDouble(altitude);    } catch (    NumberFormatException e) {      throw new SAXException(createErrorMessage(String.format(Locale.US,"Unable to parse altitude: %s",altitude)),e);    }  }  long timeValue;  if (time == null) {    timeValue=trackData.importTime;  } else {    try {      timeValue=StringUtils.getTime(time);    } catch (    IllegalArgumentException e) {      throw new SAXException(createErrorMessage(String.format(Locale.US,"Unable to parse time: %s",time)),e);    }  }  return createLocation(latitudeValue,longitudeValue,altitudeValue,timeValue);}  }
class C{  public boolean multipleInstances(){  return false;}  }
class C{  public void map(Text key,LinkDatum datum,OutputCollector<Text,LinkDatum> output,Reporter reporter) throws IOException {  String fromUrl=key.toString();  String toUrl=datum.getUrl();  String anchor=datum.getAnchor();  LinkDatum inlink=new LinkDatum(fromUrl,anchor,timestamp);  inlink.setLinkType(LinkDatum.INLINK);  output.collect(new Text(toUrl),inlink);}  }
class C{  @Override @SuppressWarnings("deprecation") public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }  if (m_evaluateThread != null) {    m_evaluateThread.interrupt();    m_evaluateThread.stop();    m_evaluateThread=null;    m_visual.setStatic();  }}  }
class C{  protected void checkMIForGivenData(double[][] var1,double[][] var2,int[] kNNs,double[] expectedResults) throws Exception {  MutualInfoCalculatorMultiVariateKraskov miCalc=getNewCalc(2);  for (int kIndex=0; kIndex < kNNs.length; kIndex++) {    int k=kNNs[kIndex];    miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(k));    miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);    miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");    miCalc.initialise(var1[0].length,var2[0].length);    miCalc.setObservations(var1,var2);    miCalc.setDebug(true);    double mi=miCalc.computeAverageLocalOfObservations();    miCalc.setDebug(false);    System.out.printf("k=%d: Average MI %.8f (expected %.8f)\n",k,mi,expectedResults[kIndex]);    assertEquals(expectedResults[kIndex],mi,0.0000001);  }}  }
class C{  public boolean isDisplayLogging(){  return this.logArea != null;}  }
class C{  protected void updateLookAndFeelFonts(java.awt.Font awtFont){  assert awtFont != null;  assert EventQueue.isDispatchThread();  FontUIResource fontResource=new FontUIResource(awtFont);  UIManager.put("Button.font",fontResource);  UIManager.put("CheckBox.font",fontResource);  UIManager.put("ComboBox.font",fontResource);  UIManager.put("EditorPane.font",fontResource);  UIManager.put("Label.font",fontResource);  UIManager.put("List.font",fontResource);  UIManager.put("Panel.font",fontResource);  UIManager.put("ProgressBar.font",fontResource);  UIManager.put("RadioButton.font",fontResource);  UIManager.put("ScrollPane.font",fontResource);  UIManager.put("TabbedPane.font",fontResource);  UIManager.put("Table.font",fontResource);  UIManager.put("TableHeader.font",fontResource);  UIManager.put("TextField.font",fontResource);  UIManager.put("TextPane.font",fontResource);  UIManager.put("TitledBorder.font",fontResource);  UIManager.put("ToggleButton.font",fontResource);  UIManager.put("TreeFont.font",fontResource);  UIManager.put("ViewportFont.font",fontResource);}  }
class C{  public Single<TAccessToken> grantNewAccessToken(OAuth2Grant<TAccessToken> grant){  return grantNewAccessToken(grant,Calendar.getInstance());}  }
class C{  public T caseAnnotation(Annotation object){  return null;}  }
class C{  LinkedList<TrieNode<T>> makeSuffixChain(TrieNode<T> root,String suffix,T value){  LinkedList<TrieNode<T>> result=new LinkedList<>();  String rootPrefix=root.getPrefix();  for (int i=1, suffixSize=suffix.length(); i <= suffixSize; i++) {    String newPrefix=rootPrefix + suffix.substring(0,i);    TrieNode<T> newNode=TrieNode.makeNode(newPrefix);    result.add(newNode);    root.addChild(newNode);    root=newNode;  }  root.setValue(value);  return result;}  }
class C{  public static boolean isLetterOrDigit(Character self){  return Character.isLetterOrDigit(self);}  }
class C{  protected final void fireVetoableChange(String propertyName,Object oldValue,Object newValue) throws PropertyVetoException {  vcs.fireVetoableChange(propertyName,oldValue,newValue);}  }
class C{  private Attraction findAttraction(String attractionName){  for (  Map.Entry<String,List<Attraction>> attractionsList : ATTRACTIONS.entrySet()) {    List<Attraction> attractions=attractionsList.getValue();    for (    Attraction attraction : attractions) {      if (attractionName.equals(attraction.name)) {        return attraction;      }    }  }  return null;}  }
class C{  public boolean beforeOpcode(int seen){  return true;}  }
class C{  private void closeSessionAndCreateAndOpenUntitledDb() throws Exception {  getExtensionLoader().sessionAboutToChangeAllPlugin(null);  model.closeSession();  log.info("Create and Open Untitled Db");  model.createAndOpenUntitledDb();}  }
class C{  protected void onAway(final String message){  if (messageChanged(away,message)) {    away=message;    fireChange(PROP_AWAY);    if (message != null) {      addTextIndicator("Away",NotificationType.INFORMATION);    } else {      addTextIndicator("Back",NotificationType.INFORMATION);    }  }}  }
class C{  public KDF1BytesGenerator(Digest digest){  super(0,digest);}  }
class C{  public boolean isStrict1(){  return this.strict1;}  }
class C{  public double heapUsage(){  final MemoryUsage usage=memory.getHeapMemoryUsage();  return usage.getUsed() / (double)usage.getMax();}  }
class C{  public static void load(String url){  String driver=getDriver(url);  if (driver != null) {    loadUserClass(driver);  }}  }
class C{  public JSONStringer value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public void sendResponse(int rCode,String rTag) throws IOException {  OutputStream os=new TestHttpsServer.NioOutputStream(channel(),server.getSSLEngine(),server.outNetBB(),server.outAppBB());  PrintStream ps=new PrintStream(os);  ps.print("HTTP/1.1 " + rCode + " "+ rTag+ "\r\n");  if (rspheaders != null) {    rspheaders.print(ps);  } else {    ps.print("\r\n");  }  ps.flush();  if (rspbody != null) {    os.write(rspbody,0,rspbodylen);    os.flush();  }  if (rsptrailers != null) {    rsptrailers.print(ps);  } else   if (rspchunked) {    ps.print("\r\n");  }  ps.flush();}  }
class C{  public List<String> sort(final String key){  checkIsInMulti();  client.sort(key);  return client.getMultiBulkReply();}  }
class C{  private void addLabelIndex(int label,int index){  int origSz=labelToIndex.size();  for (int i=0; i <= (label - origSz); i++) {    labelToIndex.add(-1);  }  labelToIndex.set(label,index);}  }
class C{  public RangeHolder(String logical){  isLessThan="<".equals(logical);}  }
class C{  protected void stop(){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Exiting provider");  for (Iterator it=listeningPoints.values().iterator(); it.hasNext(); ) {    ListeningPointImpl listeningPoint=(ListeningPointImpl)it.next();    listeningPoint.removeSipProvider();  }  this.eventScanner.stop();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FlushFdrDocument[");  buffer.append("fixedValue = ").append(fixedValue);  buffer.append(", className = ").append(className);  buffer.append(", treeId = ").append(treeId);  buffer.append(", documentName = ").append(documentName);  buffer.append(", fatherId = ").append(fatherId);  buffer.append(", fatherClassName = ").append(fatherClassName);  buffer.append("]");  return buffer.toString();}  }
class C{  public double scoreDag(Graph dag){  buildIndexing(dag.getNodes());  double _score=0.0;  for (  Node y : dag.getNodes()) {    Set<Node> parents=new HashSet<>(dag.getParents(y));    int parentIndices[]=new int[parents.size()];    Iterator<Node> pi=parents.iterator();    int count=0;    while (pi.hasNext()) {      Node nextParent=pi.next();      parentIndices[count++]=hashIndices.get(nextParent);    }    int yIndex=hashIndices.get(y);    _score+=fgsScore.localScore(yIndex,parentIndices);  }  return _score;}  }
class C{  public void addMethod(SootMethod m){  checkLevel(SIGNATURES);  if (m.isDeclared())   throw new RuntimeException("already declared: " + m.getName());  if (subSigToMethods.get(m.getNumberedSubSignature()) != null) {    throw new RuntimeException("Attempting to add method " + m.getSubSignature() + " to class "+ this+ ", but the class already has a method with that signature.");  }  subSigToMethods.put(m.getNumberedSubSignature(),m);  methodList.add(m);  m.isDeclared=true;  m.declaringClass=this;}  }
class C{  private static boolean isEncryptedKey(char[] text) throws IOException {  BufferedReader in=new BufferedReader(new CharArrayReader(text));  try {    String line;    while ((line=in.readLine()) != null) {      if (line.startsWith("Proc-Type: ") && line.contains("ENCRYPTED")) {        return true;      }      if (line.length() == 0) {        break;      }    }    return false;  }  finally {    in.close();  }}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public boolean isParseLazyMode(){  return parseLazy;}  }
class C{  public void reset(){  if (fullExtent == null) {    setFullExtent();  }  try {    fullExtent=new ReferencedEnvelope(CRS.transform(fullExtent,content.getCoordinateReferenceSystem()));  } catch (  final Exception e) {    e.printStackTrace();  }  setDisplayArea(fullExtent);}  }
class C{  DisplayedContent(int numberOfColumns,int numberOfLines){  data=new StringBuilder(numberOfColumns * numberOfLines * 2);  textListeners=new HashSet<>();  setDimensions(numberOfColumns,numberOfLines);}  }
class C{  public void testAssertVectorEquals_differentLengths(){  Vector3 v1=new Vector3(0,0,1.0f);  Vector3 v2=new Vector3(0,0,1.1f);  try {    assertVectorEquals(v1,v2,0.0001f,0.0001f);    fail("Vectors should have been found to have different lengths.");  } catch (  junit.framework.AssertionFailedError e) {  }}  }
class C{  public void addBusinessTransactionDefinition(BusinessTransactionDefinition businessTransactionDefinition,int insertBeforeIndex) throws BusinessException {  if (businessTransactionDefinition == null) {    throw new BusinessException("Adding business transaction 'null'.",BusinessContextErrorCodeEnum.UNKNOWN_BUSINESS_TRANSACTION);  } else   if (businessTransactionDefinitions.contains(businessTransactionDefinition)) {    throw new BusinessException("Adding business transaction " + businessTransactionDefinition.getBusinessTransactionDefinitionName() + " with id "+ businessTransactionDefinition.getId()+ ".",BusinessContextErrorCodeEnum.DUPLICATE_ITEM);  } else   if ((insertBeforeIndex < 0) || (insertBeforeIndex > businessTransactionDefinitions.size())) {    throw new BusinessException("Adding business transaction " + businessTransactionDefinition.getBusinessTransactionDefinitionName() + " with id "+ businessTransactionDefinition.getId()+ " at index "+ insertBeforeIndex+ ".",BusinessContextErrorCodeEnum.INVALID_MOVE_OPRATION);  } else {    businessTransactionDefinitions.add(insertBeforeIndex,businessTransactionDefinition);  }}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return null;}  }
class C{  public Bigquery create(String projectId,String datasetId,String tableId) throws IOException {  Bigquery bigquery=create(projectId,datasetId);  checkArgument(bigquerySchemas.containsKey(tableId),"Unknown table ID: %s",tableId);  if (!knownExistingTables.contains(tableId)) {    ensureTable(bigquery,new TableReference().setDatasetId(datasetId).setProjectId(projectId).setTableId(tableId),bigquerySchemas.get(tableId));    knownExistingTables.add(tableId);  }  return bigquery;}  }
class C{  @BeforeMethod public void prepareBuffer(){  byteBuffer.clear();}  }
class C{  public Long call() throws Exception {  final long begin=System.currentTimeMillis();{    Arrays.sort(stmts,0,numStmts,comparator);    sortTime.addAndGet(System.currentTimeMillis() - begin);  }  final SPOTupleSerializer tupleSer=(SPOTupleSerializer)ndx.getIndexMetadata().getTupleSerializer();  int numToAdd=0;  ISPO last=null;  final byte[][] keys=new byte[numStmts][];  final byte[][] vals=new byte[numStmts][];  final ISPO[] denseStmts=reportMutation ? new ISPO[numStmts] : null;  for (int i=0; i < numStmts; i++) {    final ISPO spo=stmts[i];    if (spo == null)     throw new IllegalArgumentException("null @ index=" + i);    if (!spo.isFullyBound())     throw new IllegalArgumentException("Not fully bound: " + spo.toString());    if (quads) {      if (spo.c() == null) {        throw new IllegalArgumentException("context not bound: " + spo);      }    } else     if (!sids) {      if (spo.c() != null) {        throw new IllegalArgumentException("context bound, but not quads or sids: " + spo);      }    }    if (filter != null && filter.isValid(spo))     continue;    if (last != null && last.equals(spo)) {      if (quads) {        if (last.c().equals(spo.c()))         continue;      } else       continue;    }    keys[numToAdd]=tupleSer.serializeKey(spo);    vals[numToAdd]=tupleSer.serializeVal(spo);    if (reportMutation)     denseStmts[numToAdd]=spo;    last=spo;    numToAdd++;  }  final long _begin=System.currentTimeMillis();  long writeCount=0;  if (reportMutation) {    final ResultBitBufferHandler aggregator=new ResultBitBufferHandler(numToAdd,2);    ndx.submit(0,numToAdd,keys,vals,IndexWriteProcConstructor.REPORT_MUTATION,aggregator);    final ResultBitBuffer modified=aggregator.getResult();    final boolean[] bits=modified.getResult();    final ModifiedEnum[] m=ModifiedEnum.fromBooleans(bits,bits.length);    for (int i=0; i < numToAdd; i++) {      if (m[i] != ModifiedEnum.NONE) {        denseStmts[i].setModified(m[i]);        writeCount++;      }    }  } else {    final LongAggregator aggregator=new LongAggregator();    ndx.submit(0,numToAdd,keys,vals,IndexWriteProcConstructor.INSTANCE,aggregator);    writeCount=aggregator.getResult();  }  insertTime.addAndGet(System.currentTimeMillis() - _begin);  if (primaryIndex) {    numWritten.addAndGet(writeCount);  }  return System.currentTimeMillis() - begin;}  }
class C{  public static String xmlText(String text){  return xmlText(text,false);}  }
class C{  public RepositoryConfig copyWithBranch(String branch){  RepositoryConfig newConfig=GsonUtil.cloneGsonObject(this);  newConfig.branch=branch;  return newConfig;}  }
class C{  public void test_addPathToNameLintLjava_lang_String(){  for (int type=0; type <= 8; type++) {    try {      new X509CertSelector().addPathToName(type,(String)null);      fail();    } catch (    IOException expected) {    }  }}  }
class C{  @ResponseBody @ExceptionHandler(IllegalArgumentException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) VndErrors illegalArgumentExceptionHandler(IllegalArgumentException ex){  return new VndErrors(HttpStatus.BAD_REQUEST.getReasonPhrase(),ex.getMessage());}  }
class C{  public void config(String msg){  throw new RuntimeException();}  }
class C{  private void cmd_updateArchive(){  MArchive ar=m_archives[m_index];  boolean update=false;  if (!isSame(nameField.getText(),ar.getName())) {    String newText=nameField.getText();    if (newText != null && newText.length() > 0) {      ar.setName(newText);      update=true;    }  }  if (!isSame(descriptionField.getText(),ar.getDescription())) {    ar.setDescription(descriptionField.getText());    update=true;  }  if (!isSame(helpField.getText(),ar.getHelp())) {    ar.setHelp(helpField.getText());    update=true;  }  log.info("Update=" + update);  if (update)   ar.saveEx();  m_index++;  updateVDisplay(false);}  }
class C{  boolean answeredBy(DNSEntry rec){  return this.isSameRecordClass(rec) && this.isSameType(rec) && this.getName().equals(rec.getName());}  }
class C{  public void addPolygon(double[] vals,int offset,int numVertices){  double c1=(vals[offset]);  double c2=(vals[offset + 1]);  double c3=(vals[offset + 2]);  double c4=(vals[offset + 3]);  int r=discretize(c1,255);  int b=discretize(c2,255);  int g=discretize(c3,255);  int a=discretize(c4,255);  Color color=new Color(r,b,g,a);  if (graphics == null)   graphics=image.getGraphics();  graphics.setColor(color);  if (xpoints.length != numVertices) {    xpoints=new int[numVertices];    ypoints=new int[numVertices];  }  int[] xpoints=this.xpoints;  int[] ypoints=this.ypoints;  int width=image.getWidth(null);  int height=image.getHeight(null);  for (int i=0; i < numVertices; i++) {    xpoints[i]=discretize(extend(vals[offset + i * 2 + 4]),width - 1);    ypoints[i]=discretize(extend(vals[offset + i * 2 + 5]),height - 1);  }  graphics.fillPolygon(xpoints,ypoints,numVertices);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapBean) {    Debug.message("droplistenersupport","DropListenerSupport found a map.");    setMap((MapBean)someObj);  }  if (someObj instanceof DefaultDnDCatcher) {    getBeanContext().addBeanContextMembershipListener((DefaultDnDCatcher)someObj);    Debug.message("DropListener","DropListener found a DefaultDnDCatcher.");    dndCatchers.addElement(someObj);  }}  }
class C{  @Override protected boolean isFrontierEmpty(){  cleanUpFrontier();  updateMetrics(frontier.size());  return frontier.isEmpty();}  }
class C{  public boolean nextLine(){  while (isValidIndex() && text[pos] != '\n' && text[pos] != '\r') {    next();  }  if (!isValidIndex())   return false;  if (text[pos] == '\n') {    next();    return isValidIndex();  }  if (text[pos] == '\r') {    next();    if (isValidIndex() && text[pos] == '\n') {      next();    }    return isValidIndex();  }  return false;}  }
class C{  public void scrollDown(){  setIdleTime(0,false);  if (chatScroll > 0) {    chatScroll--;    computeScrollBarOffset();  }}  }
class C{  @Override protected void startLoading(Tile tile){}  }
class C{  EppCommandOperations(CurrencyUnit currency,ImmutableList<Fee> fees,ImmutableList<Credit> credits){  this.currency=checkArgumentNotNull(currency,"Currency may not be null in EppCommandOperations.");  checkArgument(!fees.isEmpty(),"You must specify one or more fees.");  this.fees=checkArgumentNotNull(fees,"Fees may not be null in EppCommandOperations.");  this.credits=checkArgumentNotNull(credits,"Credits may not be null in EppCommandOperations.");}  }
class C{  public synchronized void stopPreview(){  mCameraOpenedManually=false;  stop();}  }
class C{  public CoapResponse putIfNoneMatch(String payload,int format){  return synchronous(ifNoneMatch(format(newPut().setURI(uri).setPayload(payload),format)));}  }
class C{  public static boolean isDatePart(String part){  Integer p=DATE_PART.get(StringUtils.toUpperEnglish(part));  return p != null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.DISJUNCTION__ELEMENTS:    return elements != null && !elements.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public AugmentedNode<K> parent(){  return (AugmentedNode<K>)parent;}  }
class C{  public MiniDrawer withInRTL(boolean inRTL){  this.mInRTL=inRTL;  return this;}  }
class C{  public DemoFlexTable(int rows,int cols,FlexTableRowDragController tableRowDragController){  addStyleName("demo-flextable");  for (int row=0; row < rows; row++) {    HTML handle=new HTML("[drag-here]");    handle.addStyleName("demo-drag-handle");    setWidget(row,0,handle);    tableRowDragController.makeDraggable(handle);    for (int col=1; col < cols; col++) {      setHTML(row,col,"[" + row + ", "+ col+ "]");    }  }}  }
class C{  public boolean hasChanged(){  return (dirtyNodes != null);}  }
class C{  public static Validator<String> allowedChars(String... chars){  return allowedChars(chars,null);}  }
class C{  public void writePopulation(String outputFolder,String networkFile){  LOG.info("Writing output...");  BufferedWriter bw=IOUtils.getBufferedWriter(outputFolder + "check2.csv");  try {    bw.write("SPCode,Hhs2,Persons2");    bw.newLine();    for (    Id id : zoneCounts.keySet()) {      bw.write(id.toString());      bw.write(",");      bw.write(String.valueOf(zoneCounts.get(id).getFirst()));      bw.write(",");      bw.write(String.valueOf(zoneCounts.get(id).getSecond()));      bw.newLine();    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + outputFolder + "check2.csv");  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + outputFolder + "check2.csv");    }  }  BufferedWriter bw2=IOUtils.getBufferedWriter(outputFolder + "check3.csv");  try {    bw2.write("Long,Lat");    bw2.newLine();    for (    Coord c : homeCoords) {      bw2.write(String.format("%.0f,%.0f\n",c.getX(),c.getY()));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + outputFolder + "check3.csv");  } finally {    try {      bw2.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + outputFolder + "check3.csv");    }  }  BufferedWriter bw3=IOUtils.getBufferedWriter(outputFolder + "check4.csv");  try {    bw3.write("Long,Lat");    bw3.newLine();    for (    Coord c : homeCoords2) {      bw3.write(String.format("%.0f,%.0f\n",c.getX(),c.getY()));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + outputFolder + "check4.csv");  } finally {    try {      bw3.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + outputFolder + "check4.csv");    }  }  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  NetworkReaderMatsimV1 nr=new NetworkReaderMatsimV1(sc.getNetwork());  nr.readFile(networkFile);  PopulationWriter pw=new PopulationWriter(this.outputPopulation,sc.getNetwork());  pw.write(outputFolder + "population.xml.gz");  ObjectAttributes personAttributes=new ObjectAttributes();  for (  Person person : this.outputPopulation.getPersons().values()) {    for (    String s : person.getCustomAttributes().keySet()) {      personAttributes.putAttribute(person.getId().toString(),s,person.getCustomAttributes().get(s));    }  }  ObjectAttributesXmlWriter paw=new ObjectAttributesXmlWriter(personAttributes);  paw.writeFile(outputFolder + "populationAttributes.xml.gz");  HouseholdsWriterV10 hw=new HouseholdsWriterV10(outputHouseholds);  hw.writeFile(outputFolder + "households.xml.gz");  String bufferedWriterName=outputFolder + "distances.txt";  bw=IOUtils.getBufferedWriter(bufferedWriterName);  try {    for (    double d : distanceList) {      bw.write(String.format("%.0f\n",d));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to " + bufferedWriterName);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter for " + bufferedWriterName);    }  }}  }
class C{  public static UpdatedBayesIm serializableInstance(){  return new UpdatedBayesIm(MlBayesIm.serializableInstance());}  }
class C{  public void initialize(){  final Map<String,Achievement> allAchievements=createAchievements();  for (  Achievement a : allAchievements.values()) {    if (!achievements.containsKey(a.getCategory())) {      achievements.put(a.getCategory(),new LinkedList<Achievement>());    }    achievements.get(a.getCategory()).add(a);  }  final Map<String,Integer> allIdentifiersInDatabase=collectAllIdentifiersFromDatabase();  identifiersToIds.putAll(allIdentifiersInDatabase);  for (  Map.Entry<String,Integer> it : allIdentifiersInDatabase.entrySet()) {    final String identifier=it.getKey();    final Achievement achievement=allAchievements.get(identifier);    if (achievement != null) {      try {        DAORegister.get().get(AchievementDAO.class).updateAchievement(it.getValue(),achievement);      } catch (      SQLException e) {        logger.error("Error while updating existing achievement " + achievement.getTitle(),e);      }    }  }  for (  String identifier : allIdentifiersInDatabase.keySet()) {    allAchievements.remove(identifier);  }  for (  Achievement a : allAchievements.values()) {    try {      Integer id=DAORegister.get().get(AchievementDAO.class).insertAchievement(a);      identifiersToIds.put(a.getIdentifier(),id);    } catch (    SQLException e) {      logger.error("Error while saving new achievement " + a.getTitle(),e);    }  }  SingletonRepository.getLoginNotifier().addListener(new UpdatePendingAchievementsOnLogin());  SingletonRepository.getLoginNotifier().addListener(new ReadAchievementsOnLogin());}  }
class C{  public static boolean isSameTree(TreeNode p,TreeNode q){  if (p == null || q == null)   return p == q;  return p.val == q.val && isSameTree(p.left,q.left) && isSameTree(p.right,q.right);}  }
class C{  public synchronized void update(Vector2 mousePosition){  this.beginPosition=mousePosition;}  }
class C{  private Bitmap processBitmap(String data){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + data);  }  final String key=ImageCache.hashKeyForDisk(data);  FileDescriptor fileDescriptor=null;  FileInputStream fileInputStream=null;  DiskLruCache.Snapshot snapshot;synchronized (mHttpDiskCacheLock) {    while (mHttpDiskCacheStarting) {      try {        mHttpDiskCacheLock.wait();      } catch (      InterruptedException e) {      }    }    if (mHttpDiskCache != null) {      try {        snapshot=mHttpDiskCache.get(key);        if (snapshot == null) {          if (BuildConfig.DEBUG) {            Log.d(TAG,"processBitmap, not found in http cache, downloading...");          }          DiskLruCache.Editor editor=mHttpDiskCache.edit(key);          if (editor != null) {            if (downloadUrlToStream(data,editor.newOutputStream(DISK_CACHE_INDEX))) {              editor.commit();            } else {              editor.abort();            }          }          snapshot=mHttpDiskCache.get(key);        }        if (snapshot != null) {          fileInputStream=(FileInputStream)snapshot.getInputStream(DISK_CACHE_INDEX);          fileDescriptor=fileInputStream.getFD();        }      } catch (      IOException e) {        Log.e(TAG,"processBitmap - " + e);      }catch (      IllegalStateException e) {        Log.e(TAG,"processBitmap - " + e);      } finally {        if (fileDescriptor == null && fileInputStream != null) {          try {            fileInputStream.close();          } catch (          IOException e) {          }        }      }    }  }  Bitmap bitmap=null;  if (fileDescriptor != null) {    bitmap=decodeSampledBitmapFromDescriptor(fileDescriptor,mImageWidth,mImageHeight,getImageCache());  }  if (fileInputStream != null) {    try {      fileInputStream.close();    } catch (    IOException e) {    }  }  return bitmap;}  }
class C{  public static BoundSize parseBoundSize(String s,boolean isGap,boolean isHor){  if (s.length() == 0 || s.equals("null") || s.equals("n")) {    return null;  }  String cs=s;  boolean push=false;  if (s.endsWith("push")) {    push=true;    int l=s.length();    s=s.substring(0,l - (s.endsWith(":push") ? 5 : 4));    if (s.length() == 0) {      return new BoundSize(null,null,null,true,cs);    }  }  String[] sizes=toTrimmedTokens(s,':');  String s0=sizes[0];  if (sizes.length == 1) {    boolean hasEM=s0.endsWith("!");    if (hasEM) {      s0=s0.substring(0,s0.length() - 1);    }    UnitValue uv=parseUnitValue(s0,null,isHor);    return new BoundSize(((isGap || hasEM) ? uv : null),uv,(hasEM ? uv : null),push,cs);  } else   if (sizes.length == 2) {    return new BoundSize(parseUnitValue(s0,null,isHor),parseUnitValue(sizes[1],null,isHor),null,push,cs);  } else   if (sizes.length == 3) {    return new BoundSize(parseUnitValue(s0,null,isHor),parseUnitValue(sizes[1],null,isHor),parseUnitValue(sizes[2],null,isHor),push,cs);  } else {    throw new IllegalArgumentException("Min:Preferred:Max size section must contain 0, 1 or 2 colons. '" + cs + "'");  }}  }
class C{  public void loadDefinition(ClassDeclaration c){  env.loadDefinition(c);}  }
class C{  public boolean removeAll(Collection<?> c){  if (!(c instanceof RegularEnumSet))   return super.removeAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType)   return false;  long oldElements=elements;  elements&=~es.elements;  return elements != oldElements;}  }
class C{  public void addWaitMessage(final String text,final ChatAction action){  waitMessage=text;  waitAction=action;}  }
class C{  public static Document createDocument(final String namespaceURI,final String qualifiedName){  ensureDocumentBuilder();  DOMImplementation domImpl;  try {    domImpl=dbFactory.newDocumentBuilder().getDOMImplementation();  } catch (  ParserConfigurationException e) {    throw new DSSException(e);  }  return domImpl.createDocument(namespaceURI,qualifiedName,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void selectVisibleNodes(final ZyGraph graph,final CTag tag){  selectNodes(graph,Sets.newHashSet(tag),true);}  }
class C{  protected void printContent(boolean spaceAtStart) throws TranscoderException, XMLException, IOException {  boolean preceedingSpace=false;  content:   for (; ; ) {switch (type) {case LexicalUnits.COMMENT:      output.printComment(getCurrentValue());    scanner.clearBuffer();  type=scanner.next();preceedingSpace=false;break;case LexicalUnits.PI_START:printPI();preceedingSpace=false;break;case LexicalUnits.CHARACTER_DATA:preceedingSpace=output.printCharacterData(getCurrentValue(),spaceAtStart,preceedingSpace);scanner.clearBuffer();type=scanner.next();spaceAtStart=false;break;case LexicalUnits.CDATA_START:type=scanner.next();if (type != LexicalUnits.CHARACTER_DATA) {throw fatalError("character.data",null);}output.printCDATASection(getCurrentValue());if (scanner.next() != LexicalUnits.SECTION_END) {throw fatalError("section.end",null);}scanner.clearBuffer();type=scanner.next();preceedingSpace=false;spaceAtStart=false;break;case LexicalUnits.START_TAG:String name=printElement();spaceAtStart=allowSpaceAtStart(name);break;case LexicalUnits.CHARACTER_REFERENCE:output.printCharacterEntityReference(getCurrentValue(),spaceAtStart,preceedingSpace);scanner.clearBuffer();type=scanner.next();spaceAtStart=false;preceedingSpace=false;break;case LexicalUnits.ENTITY_REFERENCE:output.printEntityReference(getCurrentValue(),spaceAtStart);scanner.clearBuffer();type=scanner.next();spaceAtStart=false;preceedingSpace=false;break;default :break content;}}}  }
class C{  private void processSkills(final RoundEnvironment env){  final List<? extends Element> skills=sortElements(env,skill.class);  for (  final Element e : skills) {    final skill skill=e.getAnnotation(skill.class);    final StringBuilder sb=new StringBuilder();    sb.append(SKILL_PREFIX);    sb.append(skill.name()).append(SEP);    sb.append(rawNameOf(e));    for (    final String s : skill.attach_to()) {      sb.append(SEP).append(s);    }    final doc[] docs=skill.doc();    doc doc;    if (docs.length == 0) {      doc=e.getAnnotation(doc.class);    } else {      doc=docs[0];    }    if (doc == null) {      emitWarning("GAML: skill '" + skill.name() + "' is not documented",e);    }    gp.put(sb.toString(),"");  }}  }
class C{  public static boolean isAccessorPair(TMember member,TMember member2){  return (member instanceof TGetter && member2 instanceof TSetter) || (member instanceof TSetter && member2 instanceof TGetter);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public TLongDoubleIterator(TLongDoubleHashMap map){  super(map);  _map=map;}  }
class C{  public MoveTargetEdit(int offset){  super(offset,0);}  }
class C{  public PhoneNumberValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId,REGEX);}  }
class C{  public void draw(DrawingContext context){  boolean wordWrap=isWordWrapEnabled();  Shape labelShape=getCachedOutline(wordWrap);  if (labelShape == null) {    return;  }  Rectangle2D textBounds=labelShape.getBounds2D();  double rotation=getRotation();  if (MathUtils.isCalculatable(rotation) && rotation != 0.0) {    AffineTransform txLabelText=AffineTransform.getRotateInstance(Math.toRadians(-rotation),textBounds.getCenterX(),textBounds.getCenterY());    labelShape=txLabelText.createTransformedShape(labelShape);    textBounds=labelShape.getBounds2D();  }  Graphics2D graphics=context.getGraphics();  AffineTransform txOld=graphics.getTransform();  Paint background=getBackground();  if (background != null) {    GraphicsUtils.fillPaintedShape(graphics,getBounds(),background,null);  }  double shapePosX=getX() - textBounds.getX();  double shapePosY=getY() - textBounds.getY();  double alignmentX=getAlignmentX();  double alignmentY=getAlignmentY();  shapePosX+=alignmentX * (getWidth() - textBounds.getWidth());  shapePosY+=alignmentY * (getHeight() - textBounds.getHeight());  graphics.translate(shapePosX,shapePosY);  Paint paint=getColor();  GraphicsUtils.fillPaintedShape(graphics,labelShape,paint,null);  graphics.setTransform(txOld);}  }
class C{  private void fillText(InputNode from) throws Exception {  EventNode event=reader.peek();  if (event.isText()) {    String data=event.getValue();    text.append(data);  }}  }
class C{  public dt addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected RemoteApplicationVM removeMember(InternalDistributedMember id){  Future future=null;synchronized (this.membersLock) {    Map oldMembersMap=this.membersMap;    if (oldMembersMap.containsKey(id)) {      Map newMembersMap=new HashMap(oldMembersMap);      future=(Future)newMembersMap.remove(id);      if (future != null) {        this.membersMap=newMembersMap;      }    }  }  if (future != null) {    future.cancel(true);    for (; ; ) {      this.system.getCancelCriterion().checkCancelInProgress(null);      boolean interrupted=Thread.interrupted();      try {        return (RemoteApplicationVM)future.get();      } catch (      InterruptedException ex) {        interrupted=true;      }catch (      CancellationException ex) {        return null;      }catch (      ExecutionException ex) {        handle(ex);        return null;      } finally {        if (interrupted) {          Thread.currentThread().interrupt();        }      }    }  } else {    return null;  }}  }
class C{  public JpegCommentReader(byte[] data){  _data=data;}  }
class C{  public void repaint(final Layer layer){  mapLayerTableViewer.refresh(layer,true);}  }
class C{  public void saveToFile(){  Properties properties=new Properties();  properties.setProperty("param_migrationMode_isUpgrade",booleanToString(isUpgrade()));  if (getLogLevel() != null)   properties.setProperty("param_maxLogLevel",getLogLevel().toString());  properties.setProperty("param_attemptTranslation",booleanToString(isAttemptTranslation()));  properties.setProperty("param_preserveTableID",booleanToString(isPreserveTableID()));  properties.setProperty("param_dropSource",booleanToString(isDropSource()));  properties.setProperty("param_optimizeDatabase",booleanToString(isOptimizeDatabase()));  if (getSourceVendor() != null)   properties.setProperty("param_sourceDB_vendor",getSourceVendor());  if (getSourceHost() != null)   properties.setProperty("param_sourceDB_host",getSourceHost());  if (getSourcePort() != null)   properties.setProperty("param_sourceDB_port",getSourcePort());  if (getSourceName() != null)   properties.setProperty("param_sourceDB_name",getSourceName());  if (getSourceCatalog() != null)   properties.setProperty("param_sourceDB_catalog",getSourceCatalog());  if (getSourceSchema() != null)   properties.setProperty("param_sourceDB_schema",getSourceSchema());  if (getSourceUser() != null)   properties.setProperty("param_sourceDB_user",getSourceUser());  if (getSourcePasswd() != null)   properties.setProperty("param_sourceDB_passwd",getSourcePasswd());  if (getSourceSystemUser() != null)   properties.setProperty("param_sourceDB_systemUser",getSourceSystemUser());  if (getSourceSystemPasswd() != null)   properties.setProperty("param_sourceDB_systemPasswd",getSourceSystemPasswd());  if (getTargetVendor() != null)   properties.setProperty("param_targetDB_vendor",getTargetVendor());  if (getTargetHost() != null)   properties.setProperty("param_targetDB_host",getTargetHost());  if (getTargetPort() != null)   properties.setProperty("param_targetDB_port",getTargetPort());  if (getTargetName() != null)   properties.setProperty("param_targetDB_name",getTargetName());  if (getTargetCatalog() != null)   properties.setProperty("param_targetDB_catalog",getTargetCatalog());  if (getTargetSchema() != null)   properties.setProperty("param_targetDB_schema",getTargetSchema());  if (getTargetUser() != null)   properties.setProperty("param_targetDB_user",getTargetUser());  if (getTargetPasswd() != null)   properties.setProperty("param_targetDB_passwd",getTargetPasswd());  if (getTargetSystemUser() != null)   properties.setProperty("param_targetDB_systemUser",getTargetSystemUser());  if (getTargetSystemPasswd() != null)   properties.setProperty("param_targetDB_systemPasswd",getTargetSystemPasswd());  FileOutputStream out;  try {    out=new FileOutputStream(getConfigFileName());    properties.store(out,"---ADEMPIERE MIGRATION PARAMETERS---");    out.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  out=null;  properties.clear();}  }
class C{  private void checkAddable(String name){  if (name2entry.containsKey(name)) {    throw new IllegalArgumentException("Other filter is using the same name '" + name + "'");  }}  }
class C{  public boolean canBeLongAddress(int address){  return ((address >= 0) && (address <= 10239));}  }
class C{  public static void generateImports(StringBuilder builder){  builder.append("import com.google.inject.Inject;\n");  builder.append("import com.google.inject.Provider;\n");  builder.append("import com.google.inject.Singleton;\n");  builder.append("import java.util.HashMap;\n");  builder.append("import java.util.Map;\n");}  }
class C{  public NvpBuilder addRaw(final String name,final String value){  npv.put(name,value);  return this;}  }
class C{  private void validateStorageUnitNotificationRegistrationCreateRequest(StorageUnitNotificationRegistrationCreateRequest request){  Assert.notNull(request,"A storage unit notification create request must be specified.");  validateStorageUnitNotificationRegistrationKey(request.getStorageUnitNotificationRegistrationKey());  Assert.hasText(request.getStorageUnitEventType(),"A storage unit event type must be specified.");  request.setStorageUnitEventType(request.getStorageUnitEventType().trim());  validateStorageUnitNotificationFilter(request.getStorageUnitNotificationFilter());  validateNotificationActions(request.getJobActions());  if (request.getNotificationRegistrationStatus() != null) {    request.setNotificationRegistrationStatus(request.getNotificationRegistrationStatus().trim());  }}  }
class C{  static public final int random(int start,int end){  return start + random.nextInt(end - start + 1);}  }
class C{  public void export(){  export(null);}  }
class C{  public void paintViewportBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public RelativeStrengthIndexSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  public void testSetF1(){  boolean f1=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF1(f1);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup1 needs to be implemented if invoked");}  }
class C{  public LongMap(LongMap<? extends V> map){  this(map.capacity,map.loadFactor);  stashSize=map.stashSize;  System.arraycopy(map.keyTable,0,keyTable,0,map.keyTable.length);  System.arraycopy(map.valueTable,0,valueTable,0,map.valueTable.length);  size=map.size;  zeroValue=map.zeroValue;  hasZeroValue=map.hasZeroValue;}  }
class C{  public int length(){  return nodes.length;}  }
class C{  @Override public void update(SpoutSpec spoutSpec,Map<String,StreamDefinition> sds){  this.streamRepartitionMetadataList=spoutSpec.getStreamRepartitionMetadataMap().get(topic);  this.converter=new Tuple2StreamConverter(spoutSpec.getTuple2StreamMetadataMap().get(topic));  this.sds=sds;}  }
class C{  public static Complex unaryMinus(Complex c){  return new Complex(-c.real,-c.imag);}  }
class C{  public SignMidletAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("SignMidletAction.statusbar"));  putValue(NAME,res.getString("SignMidletAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SignMidletAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SignMidletAction.image")))));}  }
class C{  public Collection<EvictableEntry<K,V>> queue(){  Set<EvictableEntry<K,V>> cp=new LinkedHashSet<>();  for (  Holder<K,V> holder : set)   cp.add(holder.entry);  return Collections.unmodifiableCollection(cp);}  }
class C{  @Override public void onCreate(@NonNull SQLiteDatabase db){  LLog.v("populating new database");  createDownloadsTable(db);  createHeadersTable(db);  createBatchesTable(db);  createBatchesWithSizesView(db);  createDownloadsByBatchView(db);  createDownloadsWithoutProgressView(db);  createBatchesWithoutProgressView(db);  makeCacheDownloadsInvisible(db);}  }
class C{  @Override public List<Vec> sample(int count,Random rand){  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  private void collectCompatibleExceptions(ClassDoc[] froms,ClassDoc[] withs,List<ClassDoc> list){  for (  ClassDoc from : froms) {    if (!list.contains(from)) {      for (      ClassDoc with : withs) {        if (from.subclassOf(with)) {          list.add(from);          break;        }      }    }  }}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    e.getQueue().poll();    e.execute(r);  }}  }
class C{  public void init(String videoId) throws IOException {  super.init(videoId);  super.videosList.setFields("items(snippet/description)");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public void dispose(){  detach();}  }
class C{  public boolean matchesWord(){  return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));}  }
class C{  void removeCallback(String key,boolean async){  context.removeCallback(this,key,async);}  }
class C{  public static String fromIPv4Address(int ipAddress){  StringBuffer sb=new StringBuffer();  int result=0;  for (int i=0; i < 4; ++i) {    result=(ipAddress >> ((3 - i) * 8)) & 0xff;    sb.append(Integer.valueOf(result).toString());    if (i != 3)     sb.append(".");  }  return sb.toString();}  }
class C{  static boolean regionMatches(final CharSequence cs,final boolean ignoreCase,final int thisStart,final CharSequence substring,final int start,final int length){  if (cs instanceof String && substring instanceof String) {    return ((String)cs).regionMatches(ignoreCase,thisStart,(String)substring,start,length);  }  int index1=thisStart;  int index2=start;  int tmpLen=length;  while (tmpLen-- > 0) {    final char c1=cs.charAt(index1++);    final char c2=substring.charAt(index2++);    if (c1 == c2) {      continue;    }    if (!ignoreCase) {      return false;    }    if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {      return false;    }  }  return true;}  }
class C{  public static Book book(){  return getBook(DEFAULT_DB_NAME);}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "[" + _path+ "]";}  }
class C{  public static FieldAnnotation fromFieldDescriptor(FieldDescriptor fieldDescriptor){  return new FieldAnnotation(fieldDescriptor.getClassDescriptor().getDottedClassName(),fieldDescriptor.getName(),fieldDescriptor.getSignature(),fieldDescriptor.isStatic());}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public List<Integer> rightSideViewDFS(TreeNode root){  List<Integer> res=new ArrayList<>();  helper(res,root,0);  return res;}  }
class C{  protected void createEmptyPageResource(String url){  Page page=getWebResourceDataService().createPage(url);  getAudit().setSubject(page);  getWebResourceDataService().saveOrUpdate(page);}  }
class C{  protected ColumnVisibilityAction createColumnVisibilityAction(TableColumn column){  return new ColumnVisibilityAction(column);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Observable<Permission> requestEach(final String... permissions){  return Observable.just(null).compose(ensureEach(permissions));}  }
class C{  @Override protected void validateConstructor(List<Throwable> errors){  validateOnlyOneConstructor(errors);  if (fieldsAreAnnotated()) {    validateZeroArgConstructor(errors);  }}  }
class C{  public boolean equals(Matrix4f m1){  try {    return (this.m00 == m1.m00 && this.m01 == m1.m01 && this.m02 == m1.m02 && this.m03 == m1.m03 && this.m10 == m1.m10 && this.m11 == m1.m11 && this.m12 == m1.m12 && this.m13 == m1.m13 && this.m20 == m1.m20 && this.m21 == m1.m21 && this.m22 == m1.m22 && this.m23 == m1.m23 && this.m30 == m1.m30 && this.m31 == m1.m31 && this.m32 == m1.m32 && this.m33 == m1.m33);  } catch (  NullPointerException e) {    return false;  }}  }
class C{  private BlockPos findNearestBlockChunkOfIDInRange(CompassSetting currentSetting,Block blockID,int meta,int playerX,int playerY,int playerZ,int xzRange,int yRange,int minY,int maxY){  int[] configInts={meta,playerX,playerY,playerZ,xzRange,yRange,minY,maxY};  CompassTargetData key=new CompassTargetData(blockID,meta);  ThreadCompassWorker worker=currentSetting.getCompassWorkers().get(key);  if (worker == null || !worker.isWorking()) {    worker=new ThreadCompassWorker(mc);    worker.setPriority(Thread.MIN_PRIORITY);    currentSetting.getCompassWorkers().put(key,worker);    worker.setupValues(blockID,configInts);    worker.start();  }  BlockPos result=currentSetting.getNewFoundTargets().get(key);  if (result == null) {    result=currentSetting.getCustomNeedleTargets().get(key);  } else {    currentSetting.getNewFoundTargets().remove(key);  }  return result;}  }
class C{  public String toString(){  return super.toString() + " " + transform;}  }
class C{  public DigitsOAuthSigning(TwitterAuthConfig authConfig,TwitterAuthToken authToken){  this(authConfig,authToken,new OAuth1aHeaders());}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  @Override public void endOfStream() throws AdeException, AdeFlowException {  for (  Entry<String,PerodicityBounder> last : m_lastSeen.entrySet()) {    final PerodicityBounder pb=last.getValue();    pb.train(last.getKey());  }  m_trained=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.597 -0500",hash_original_method="F909FF4426F024059C8CEA2BE75ABFBE",hash_generated_method="6AE54003EF68EC28106E6B4BE417E02D") public void invalidateHeaders(){  if (!mHandler.hasMessages(MSG_BUILD_HEADERS)) {    mHandler.sendEmptyMessage(MSG_BUILD_HEADERS);  }}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public static MethodAnnotation convertMethodAnnotation(ClassNameRewriter classNameRewriter,MethodAnnotation annotation){  if (classNameRewriter != IdentityClassNameRewriter.instance()) {    annotation=new MethodAnnotation(classNameRewriter.rewriteClassName(annotation.getClassName()),annotation.getMethodName(),rewriteMethodSignature(classNameRewriter,annotation.getMethodSignature()),annotation.isStatic());  }  return annotation;}  }
class C{  public void testReceive_BlockNoServerCloseNull() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerChannelCloseNull();}  }
class C{  public Sub3(){  super("sub3",3);}  }
class C{  public void loadFeatures() throws IOException {  File f=new File(path.getAbsolutePath() + ".features");  if (f.exists()) {    DataInputStream dis=new DataInputStream(new FileInputStream(f));    try {      if (dis.available() < 4) {        return;      }      int count=dis.readInt();      imageLocations.clear();      for (int i=0; i < count; i++) {        imageLocations.put(new Feature(dis.readLong()),new Point2d(dis.readDouble(),dis.readDouble()));      }    }  finally {      dis.close();    }  } else {    String absolutePath=path.getAbsolutePath();    f=new File(absolutePath.substring(0,absolutePath.length() - 3) + "txt");    if (f.exists()) {      double[] values=MatrixUtils.loadMatrix(f," ");      for (int i=0; i < values.length; i+=3) {        imageLocations.put(new Feature((long)values[i]),new Point2d(values[i + 1],values[i + 2]));      }    }  }}  }
class C{  public synchronized ExtentTest createTest(String testName,String description){  ExtentTest t=new ExtentTest(this,testName,description);  createTest(t.getModel());  return t;}  }
class C{  private static String processResult(Map<String,Object> result,HttpServletRequest request){  StringBuilder errMsg=new StringBuilder();  if (result.containsKey(ModelService.ERROR_MESSAGE_LIST)) {    List<String> errorMsgs=UtilGenerics.checkList(result.get(ModelService.ERROR_MESSAGE_LIST));    Iterator<String> iterator=errorMsgs.iterator();    errMsg.append("<ul>");    while (iterator.hasNext()) {      errMsg.append("<li>");      errMsg.append(iterator.next());      errMsg.append("</li>");    }    errMsg.append("</ul>");  } else   if (result.containsKey(ModelService.ERROR_MESSAGE)) {    errMsg.append(result.get(ModelService.ERROR_MESSAGE));    request.setAttribute("_ERROR_MESSAGE_",errMsg.toString());  }  if (errMsg.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errMsg.toString());    if (result.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_SUCCESS)) {      return NON_CRITICAL_ERROR;    } else {      return ERROR;    }  } else {    return NO_ERROR;  }}  }
class C{  public void periodicProcessing() throws PayloadException, NetworkException {  if (UAC_ROLE.equals(mRefresher)) {    sessionRefreshForUAC();  } else {    sessionRefreshForUAS();  }}  }
class C{  public static VOPriceModel toVOPriceModel(PriceModel priceModel,LocalizerFacade facade,PerformanceHint scope){  if (priceModel == null) {    return null;  }  VOPriceModel voPM=new VOPriceModel();switch (scope) {case ONLY_FIELDS_FOR_LISTINGS:    fillBaseFields(priceModel,voPM);  break;default :fillAllFields(priceModel,facade,voPM);}updateValueObject(voPM,priceModel);return voPM;}  }
class C{  private Map<String,Double> findMaxMetricValues(List<Map<String,String>> dataLines,int start,int end){  assert (start < end);  Map<String,Double> maxValuesMap=new HashMap<>();  for (int index=start; index < end; index++) {    Map<String,String> data=dataLines.get(index);    for (    String metricKey : data.keySet()) {      String dataValueString=data.get(metricKey);      if (dataValueString.equals(NO_DATA) || !dataValueString.matches(DOUBLE_DATA_PATTERN)) {        continue;      }      Double currentMaxValue=maxValuesMap.get(metricKey);      Double dataValue=Double.valueOf(dataValueString);      if (currentMaxValue == null) {        maxValuesMap.put(metricKey,dataValue);      } else {        if (dataValue > currentMaxValue) {          maxValuesMap.put(metricKey,dataValue);        }      }    }  }  return maxValuesMap;}  }
class C{  public static OutputConditionFactory createCondition(OutputLimitSpec outputLimitSpec,StatementContext statementContext,boolean isGrouped,boolean isWithHavingClause,boolean isStartConditionOnCreation,ResultSetProcessorHelperFactory resultSetProcessorHelperFactory) throws ExprValidationException {  if (outputLimitSpec == null) {    return new OutputConditionNullFactory();  }  VariableMetaData variableMetaData=null;  if (outputLimitSpec.getVariableName() != null) {    variableMetaData=statementContext.getVariableService().getVariableMetaData(outputLimitSpec.getVariableName());    if (variableMetaData == null) {      throw new ExprValidationException("Variable named '" + outputLimitSpec.getVariableName() + "' has not been declared");    }    String message=VariableServiceUtil.checkVariableContextName(statementContext.getContextDescriptor(),variableMetaData);    if (message != null) {      throw new ExprValidationException(message);    }  }  if (outputLimitSpec.getDisplayLimit() == OutputLimitLimitType.FIRST && isGrouped) {    return new OutputConditionNullFactory();  }  if (outputLimitSpec.getRateType() == OutputLimitRateType.CRONTAB) {    return resultSetProcessorHelperFactory.makeOutputConditionCrontab(outputLimitSpec.getCrontabAtSchedule(),statementContext,isStartConditionOnCreation);  } else   if (outputLimitSpec.getRateType() == OutputLimitRateType.WHEN_EXPRESSION) {    return resultSetProcessorHelperFactory.makeOutputConditionExpression(outputLimitSpec.getWhenExpressionNode(),outputLimitSpec.getThenExpressions(),statementContext,outputLimitSpec.getAndAfterTerminateExpr(),outputLimitSpec.getAndAfterTerminateThenExpressions(),isStartConditionOnCreation);  } else   if (outputLimitSpec.getRateType() == OutputLimitRateType.EVENTS) {    if (log.isDebugEnabled()) {      log.debug(".createCondition creating OutputConditionCount with event rate " + outputLimitSpec);    }    if ((variableMetaData != null) && (!JavaClassHelper.isNumericNonFP(variableMetaData.getType()))) {      throw new IllegalArgumentException("Variable named '" + outputLimitSpec.getVariableName() + "' must be type integer, long or short");    }    int rate=-1;    if (outputLimitSpec.getRate() != null) {      rate=outputLimitSpec.getRate().intValue();    }    return resultSetProcessorHelperFactory.makeOutputConditionCount(rate,variableMetaData,statementContext);  } else   if (outputLimitSpec.getRateType() == OutputLimitRateType.TERM) {    if (outputLimitSpec.getAndAfterTerminateExpr() == null && (outputLimitSpec.getAndAfterTerminateThenExpressions() == null || outputLimitSpec.getAndAfterTerminateThenExpressions().isEmpty())) {      return new OutputConditionTermFactory();    } else {      return resultSetProcessorHelperFactory.makeOutputConditionExpression(new ExprConstantNodeImpl(false),Collections.<OnTriggerSetAssignment>emptyList(),statementContext,outputLimitSpec.getAndAfterTerminateExpr(),outputLimitSpec.getAndAfterTerminateThenExpressions(),isStartConditionOnCreation);    }  } else {    if (log.isDebugEnabled()) {      log.debug(".createCondition creating OutputConditionTime with interval length " + outputLimitSpec.getRate());    }    if ((variableMetaData != null) && (!JavaClassHelper.isNumeric(variableMetaData.getType()))) {      throw new IllegalArgumentException("Variable named '" + outputLimitSpec.getVariableName() + "' must be of numeric type");    }    return resultSetProcessorHelperFactory.makeOutputConditionTime(outputLimitSpec.getTimePeriodExpr(),isStartConditionOnCreation);  }}  }
class C{  public HashDocAttributeSet(DocAttributeSet attributes){  super(attributes,DocAttribute.class);}  }
class C{  public static String[] jsonArrayToStringArray(String json){  try {    JSONArray jsonArray=new JSONArray(json);    String[] stringArray=new String[jsonArray.length()];    for (int i=0; i < jsonArray.length(); i++) {      stringArray[i]=jsonArray.getString(i);    }    return stringArray;  } catch (  JSONException e) {    Log.e(TAG,"Error during Json processing: ",e);  }  return new String[0];}  }
class C{  public static boolean deleteAll(final File file){  boolean ok=true;  if (file != null) {    if (file.isDirectory()) {      final File[] files=file.listFiles();      if (files != null) {        for (        final File x : files) {          ok&=deleteAll(x);        }      }    }    ok&=!file.exists() || file.delete();  }  return ok;}  }
class C{  synchronized public void stop(){  logger.info("Stopping AutoScanner");  forceStop();  forceStopScheduler(SCHEDULER_MONITOR);  this.running=false;  this.metricDb.destroy();  logger.info("AutoScanner Stopped.");}  }
class C{  public void addEventType(String eventTypeName,String eventClassName){  eventClasses.put(eventTypeName,eventClassName);}  }
class C{  private Object singleElement(int row,int col){  Object res=null;  if (this.isNull == null || !this.isNull[row * this.nFields + col]) {    res=ArrayFuncs.newInstance(this.types[col],1);    System.arraycopy(this.data[col],row,res,0,1);  }  return res;}  }
class C{  public void testSingleDir() throws Exception {  JFlexMojo mojo=newMojo("single-dir-test");  mojo.execute();  File produced=getExpectedOutputFile(mojo);  assertTrue("produced file is a file: " + produced,produced.isFile());}  }
class C{  public boolean directEditCellAt(int i,int j){  return super.editCellAt(i,j,null);}  }
class C{  public IncompatibleComparatorException(){  super();}  }
class C{  public boolean containsElementKey(final Object eKey){  return _elementOrder.contains(eKey);}  }
class C{  public byte[] toByteArray(){  try {    ByteArrayOutputStream outBytes=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(outBytes);    if (isFinalFrame_) {      dataStream.writeInt(Constants.ENDFRAME_SEQUENCE_NUMBER);    }    dataStream.writeInt(sequenceNumber_);    dataStream.write(nonce_);    if (includeFrameSize_ || isFinalFrame_) {      dataStream.writeInt(frameContentLength_);    }    dataStream.close();    return outBytes.toByteArray();  } catch (  IOException e) {    throw new RuntimeException("Failed to serialize cipher frame headers",e);  }}  }
class C{  public static AffineTransform convertTransform(Element e,String attr,String transform,BridgeContext ctx){  try {    return AWTTransformProducer.createAffineTransform(transform);  } catch (  ParseException pEx) {    throw new BridgeException(ctx,e,pEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attr,transform,pEx});  }}  }
class C{  public DropTargetEvent(DropTargetContext dtc){  super(dtc.getDropTarget());  context=dtc;}  }
class C{  public SamplePrincipal(String name){  if (name == null) {    throw new NullPointerException("illegal null input");  }  this.name=name;}  }
class C{  protected void removeListeners(Component c){  if (AWTEventMonitor.componentListener_private != null) {    removeListeners(c,EventID.COMPONENT);  }  if (AWTEventMonitor.keyListener_private != null) {    removeListeners(c,EventID.KEY);  }  if (AWTEventMonitor.mouseListener_private != null) {    removeListeners(c,EventID.MOUSE);  }  if (AWTEventMonitor.mouseMotionListener_private != null) {    removeListeners(c,EventID.MOTION);  }  if (AWTEventMonitor.windowListener_private != null) {    removeListeners(c,EventID.WINDOW);  }  if (AWTEventMonitor.actionListener_private != null) {    removeListeners(c,EventID.ACTION);  }  if (AWTEventMonitor.adjustmentListener_private != null) {    removeListeners(c,EventID.ADJUSTMENT);  }  if (AWTEventMonitor.itemListener_private != null) {    removeListeners(c,EventID.ITEM);  }  if (AWTEventMonitor.textListener_private != null) {    removeListeners(c,EventID.TEXT);  }}  }
class C{  public static ModifiableDBIDs intersection(DBIDs first,DBIDs second){  if (first.size() > second.size()) {    return intersection(second,first);  }  ModifiableDBIDs inter=newHashSet(first.size());  for (DBIDIter it=first.iter(); it.valid(); it.advance()) {    if (second.contains(it)) {      inter.add(it);    }  }  return inter;}  }
class C{  public static void writeSource(FacesContext ctx,String file){  ExternalContext extCtx=ctx.getExternalContext();  BufferedReader r=new BufferedReader(new InputStreamReader(extCtx.getResourceAsStream(file)));  StringWriter w=new StringWriter();  PrintWriter pw=new PrintWriter(w);  try {    int lineNumber=1;    for (String s=r.readLine(); s != null; s=r.readLine()) {      pw.format("%3s",Integer.toString(lineNumber++));      pw.write(": ");      pw.write(s);      pw.write('\n');    }    ctx.getResponseWriter().writeText(w.toString(),null);  } catch (  IOException ioe) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,ioe.toString(),ioe);    }  }}  }
class C{  @Override public int following(int offset){  CharacterIterator text=getText();  checkOffset(offset,text);  text.setIndex(offset);  if (offset == text.getBeginIndex()) {    cachedLastKnownBreak=handleNext();    return cachedLastKnownBreak;  }  int result=cachedLastKnownBreak;  if (result >= offset || result <= BreakIterator.DONE) {    result=handlePrevious();  } else {    text.setIndex(result);  }  while (result != BreakIterator.DONE && result <= offset) {    result=handleNext();  }  cachedLastKnownBreak=result;  return result;}  }
class C{  static public void put(PrintWriter log,String msg){  put(log,msg,(Throwable)null);}  }
class C{  public int observedCount(String form){  if (!table.containsKey(form))   return 0;  int result=0;  for (  Integer count : table.get(form).values())   result+=count;  return result;}  }
class C{  public VertexIconShapeTransformer(Function<V,Shape> delegate){  this.delegate=delegate;}  }
class C{  private void exportAnnotationDocuments(ProjectExportModel aModel,File aCopyDir) throws IOException, UIMAException, ClassNotFoundException {  List<de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument> documents=repository.listSourceDocuments(aModel.project);  int i=1;  int initProgress=progress;  for (  de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument sourceDocument : documents) {    String formatId;    if (FORMAT_AUTO.equals(aModel.format)) {      formatId=sourceDocument.getFormat();    } else {      formatId=repository.getWritableFormatId(aModel.format);    }    Class<?> writer=repository.getWritableFormats().get(formatId);    if (writer == null) {      String msg="[" + sourceDocument.getName() + "] No writer found for format ["+ formatId+ "] - exporting as WebAnno TSV instead.";      if (!messages.contains(msg)) {        messages.add(msg);      }      writer=WebannoTsv3Writer.class;    }    for (    de.tudarmstadt.ukp.clarin.webanno.model.AnnotationDocument annotationDocument : repository.listAnnotationDocuments(sourceDocument)) {      if (userRepository.get(annotationDocument.getUser()) != null && !annotationDocument.getState().equals(AnnotationDocumentState.NEW) && !annotationDocument.getState().equals(AnnotationDocumentState.IGNORE)) {        File annotationDocumentAsSerialisedCasDir=new File(aCopyDir.getAbsolutePath() + ANNOTATION_CAS_FOLDER + sourceDocument.getName());        File annotationDocumentDir=new File(aCopyDir.getAbsolutePath() + ANNOTATION_ORIGINAL_FOLDER + sourceDocument.getName());        FileUtils.forceMkdir(annotationDocumentAsSerialisedCasDir);        FileUtils.forceMkdir(annotationDocumentDir);        File annotationFileAsSerialisedCas=repository.getCasFile(sourceDocument,annotationDocument.getUser());        File annotationFile=null;        if (annotationFileAsSerialisedCas.exists() && writer != null) {          annotationFile=repository.exportAnnotationDocument(sourceDocument,annotationDocument.getUser(),writer,annotationDocument.getUser(),Mode.ANNOTATION,false);        }        if (annotationFileAsSerialisedCas.exists()) {          FileUtils.copyFileToDirectory(annotationFileAsSerialisedCas,annotationDocumentAsSerialisedCasDir);          if (writer != null) {            FileUtils.copyFileToDirectory(annotationFile,annotationDocumentDir);            FileUtils.forceDelete(annotationFile);          }        }      }    }    if (aModel.project.getMode().equals(Mode.AUTOMATION) || aModel.project.getMode().equals(Mode.CORRECTION)) {      File correctionCasFile=repository.getCasFile(sourceDocument,CORRECTION_USER);      if (correctionCasFile.exists()) {        File curationCasDir=new File(aCopyDir + CURATION_AS_SERIALISED_CAS + sourceDocument.getName());        FileUtils.forceMkdir(curationCasDir);        FileUtils.copyFileToDirectory(correctionCasFile,curationCasDir);        File curationDir=new File(aCopyDir + CURATION_FOLDER + sourceDocument.getName());        FileUtils.forceMkdir(curationDir);        File correctionFile=repository.exportAnnotationDocument(sourceDocument,CORRECTION_USER,writer,CORRECTION_USER,Mode.CORRECTION);        FileUtils.copyFileToDirectory(correctionFile,curationDir);        FileUtils.forceDelete(correctionFile);      }    }    progress=initProgress + (int)Math.ceil(((double)i) / documents.size() * 80.0);    i++;  }}  }
class C{  public boolean visitStylesheet(ElemTemplateElement elem){  return true;}  }
class C{  private void populateHDSAccessProfile(AccessProfile accessProfile,StorageSystem storageDevice,String nameSpace){  accessProfile.setSystemType(storageDevice.getSystemType());  accessProfile.setserialID(storageDevice.getSerialNumber());  accessProfile.setLastSampleTime(0L);  if (null != nameSpace) {    accessProfile.setnamespace(nameSpace);  }  if (accessProfile.getProfileName().equalsIgnoreCase(ControllerServiceImpl.METERING)) {    accessProfile.setIpAddress(getHDSSMISIPAddressBasedOnModel(storageDevice));    accessProfile.setInteropNamespace(HDSConstants.HITACHI_NAMESPACE);    accessProfile.setPortNumber(getHDSSMISPortBasedOnModel(storageDevice));    accessProfile.setSslEnable(Boolean.TRUE.toString());    accessProfile.setUserName(storageDevice.getSmisUserName());    accessProfile.setPassword(storageDevice.getSmisPassword());  } else {    StorageProvider activeProvider=getActiveProviderForStorageSystem(storageDevice,accessProfile);    accessProfile.setIpAddress(activeProvider.getIPAddress());    accessProfile.setPortNumber(activeProvider.getPortNumber());    accessProfile.setUserName(activeProvider.getUserName());    accessProfile.setPassword(activeProvider.getPassword());    accessProfile.setSslEnable(String.valueOf(activeProvider.getUseSSL()));  }}  }
class C{  protected boolean isAnyMemberRunning(){  return findFirstRunningMember() != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.850 -0500",hash_original_method="662F89856A3B1E88FA54A5AA5FC0E396",hash_generated_method="737A6B97701E0AB20FAA2BFB74B032C0") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public SMTPConnectionClosedException(String message){  super(message);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  void processOFMessage(OFMessage m){  roleChanger.checkTimeout();switch (m.getType()) {case BARRIER_REPLY:    processOFBarrierReply((OFBarrierReply)m);  break;case ERROR:processOFError((OFErrorMsg)m);break;case FLOW_REMOVED:processOFFlowRemoved((OFFlowRemoved)m);break;case GET_CONFIG_REPLY:processOFGetConfigReply((OFGetConfigReply)m);break;case PACKET_IN:processOFPacketIn((OFPacketIn)m);break;case PORT_STATUS:processOFPortStatus((OFPortStatus)m);break;case QUEUE_GET_CONFIG_REPLY:processOFQueueGetConfigReply((OFQueueGetConfigReply)m);break;case STATS_REPLY:processOFStatsReply((OFStatsReply)m);break;case ROLE_REPLY:processOFRoleReply((OFRoleReply)m);break;case EXPERIMENTER:processOFExperimenter((OFExperimenter)m);break;default :illegalMessageReceived(m);break;}}  }
class C{  private Intent makeBrowserIntent(String address){  Log.d(TAG,"makeBrowserIntent: address = " + address);  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse("https://maps.google.com/?q=" + Uri.encode(address)));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  return intent;}  }
class C{  protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing,int missingLevel){  if (missingLevel == 100) {    print("100% ");  }  print("missing");  if (predictorMissing) {    print(" predictor");    if (classMissing) {      print(" and");    }  }  if (classMissing) {    print(" class");  }  print(" values");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("missing");  accepts.add("value");  accepts.add("train");  accepts.add("no attributes");  int numTrain=getNumInstances(), numClasses=2;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public synchronized void clearYTextLabels(int scale){  mYTextLabels.get(scale).clear();}  }
class C{  public ProductReview createOrFindDomainObject(long objectKey) throws ObjectNotFoundException {  ProductReview review;  boolean update=objectKey != 0;  if (update) {    review=dm.getReference(ProductReview.class,objectKey);  } else {    review=new ProductReview();  }  return review;}  }
class C{  public static boolean cs_sprealloc(Scs A,int nzmax){  if (A == null)   return (false);  if (nzmax <= 0)   nzmax=(Scs_util.CS_CSC(A)) ? (A.p[A.n]) : A.nz;  int[] Ainew=new int[nzmax];  int length=Math.min(nzmax,A.i.length);  System.arraycopy(A.i,0,Ainew,0,length);  A.i=Ainew;  if (Scs_util.CS_TRIPLET(A)) {    int[] Apnew=new int[nzmax];    length=Math.min(nzmax,A.p.length);    System.arraycopy(A.p,0,Apnew,0,length);    A.p=Apnew;  }  if (A.x != null) {    float[] Axnew=new float[nzmax];    length=Math.min(nzmax,A.x.length);    System.arraycopy(A.x,0,Axnew,0,length);    A.x=Axnew;  }  A.nzmax=nzmax;  return (true);}  }
class C{  protected Complex(){}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 0) {    if (args[0].toLowerCase().endsWith(".xml")) {      System.out.println(new XMLExperiment().read(args[0]).toString());    } else {      FileInputStream fi=new FileInputStream(args[0]);      ObjectInputStream oi=new ObjectInputStream(new BufferedInputStream(fi));      Object o=oi.readObject();      oi.close();      new XMLExperiment().write(new BufferedOutputStream(new FileOutputStream(args[0] + ".xml")),o);      FileOutputStream fo=new FileOutputStream(args[0] + ".exp");      ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(fo));      oo.writeObject(o);      oo.close();    }  }}  }
class C{  public SpatialSparseGraphFactory(CoordinateReferenceSystem crs){  this.crs=crs;  SRID=CRSUtils.getSRID(crs);  if (SRID == 0)   logger.warn("Coordinate reference system has no SRID. Setting SRID to 0.");}  }
class C{  public InputStream fetchStoragePortInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating VNX Port query");  InputStream iStream=null;  try {    Query query=new Query();    MoverQueryParams dataMovers=new MoverQueryParams();    com.emc.nas.vnxfile.xmlapi.MoverQueryParams.AspectSelection selection=new com.emc.nas.vnxfile.xmlapi.MoverQueryParams.AspectSelection();    selection.setMoverInterfaces(true);    dataMovers.setAspectSelection(selection);    query.getQueryRequestChoice().add(dataMovers);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(dataMovers,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for celerra storage port info",jaxbException.getCause());  }  return iStream;}  }
class C{  @Override protected BlockSnapshot prepareSnapshotFromVolume(Volume vplexVolume,String snapsetLabel,String label){  Volume nativeSnapshotSourceVolume=getVPLEXSnapshotSourceVolume(vplexVolume);  BlockSnapshot snapshot=new BlockSnapshot();  snapshot.setId(URIUtil.createId(BlockSnapshot.class));  snapshot.setSourceNativeId(nativeSnapshotSourceVolume.getNativeId());  snapshot.setParent(new NamedURI(nativeSnapshotSourceVolume.getId(),nativeSnapshotSourceVolume.getLabel()));  snapshot.setLabel(label);  snapshot.setStorageController(nativeSnapshotSourceVolume.getStorageController());  snapshot.setSystemType(nativeSnapshotSourceVolume.getSystemType());  snapshot.setVirtualArray(nativeSnapshotSourceVolume.getVirtualArray());  snapshot.setProtocol(new StringSet());  snapshot.getProtocol().addAll(nativeSnapshotSourceVolume.getProtocol());  snapshot.setProject(new NamedURI(vplexVolume.getProject().getURI(),vplexVolume.getProject().getName()));  snapshot.setSnapsetLabel(ResourceOnlyNameGenerator.removeSpecialCharsForName(snapsetLabel,SmisConstants.MAX_SNAPSHOT_NAME_LENGTH));  URI cgUri=nativeSnapshotSourceVolume.getConsistencyGroup();  if (cgUri != null) {    snapshot.setConsistencyGroup(cgUri);  }  return snapshot;}  }
class C{  public LinearGradientPaint(Point2D start,Point2D end,float[] fractions,Color[] colors,CycleMethodEnum cycleMethod,ColorSpaceEnum colorSpace,AffineTransform gradientTransform){  super(fractions,colors,cycleMethod,colorSpace,gradientTransform);  if (start == null || end == null) {    throw new NullPointerException("Start and end points must be" + "non-null");  }  if (start.equals(end)) {    throw new IllegalArgumentException("Start point cannot equal" + "endpoint");  }  this.start=(Point2D)start.clone();  this.end=(Point2D)end.clone();}  }
class C{  public void init() throws ServletException {}  }
class C{  public byte ID(){  return 8;}  }
class C{  public synchronized void clearDynamicProperties() throws ReplicatorException {  logger.info("Clearing dynamic properties");  if (dynamicProperties != null)   dynamicProperties.clear();  if (dynamicPropertiesFile.exists()) {    if (!dynamicPropertiesFile.delete())     logger.error("Unable to delete dynamic properties file: " + dynamicPropertiesFile.getAbsolutePath());  }  if (dynamicRoleFile != null) {    if (dynamicRoleFile.exists()) {      if (!dynamicRoleFile.delete())       logger.error("Unable to delete dynamic role file: " + dynamicRoleFile.getAbsolutePath());    }  }}  }
class C{  public void removeSelectionListener(SelectionListener listener){  if (selectionListener != null) {    selectionListener.removeListener(listener);  }}  }
class C{  public JEP(){}  }
class C{  public static Class<?> loadClass(String name,boolean init,ClassLoader loader) throws ClassNotFoundException {  if (loader == null)   loader=Thread.currentThread().getContextClassLoader();  if (loader == null || loader.equals(CauchoUtil.class.getClassLoader()))   return Class.forName(name); else   return Class.forName(name,init,loader);}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public MapTypeImpl(Class clazz,ObjectType keyType,ObjectType valueType){  super(clazz,valueType);  this.keyType=keyType;}  }
class C{  public boolean extendedFilterMatch(String langTag){  return extendedFilterMatch(langTag.toLowerCase(Locale.ROOT).split("-"));}  }
class C{  public int pageCount(){  return pages.size();}  }
class C{  public small addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static int compareVersion(String version1,String version2){  String[] partsv1=version1.split("\\.");  String[] partsv2=version2.split("\\.");  int len=Math.min(partsv1.length,partsv2.length);  for (int i=0; i < partsv1.length && i < len; i++) {    Integer iv1=Integer.parseInt(partsv1[i]);    Integer iv2=Integer.parseInt(partsv2[i]);    if (iv1.compareTo(iv2) != 0)     return iv1.compareTo(iv2);  }  return 0;}  }
class C{  public static boolean parseParserExtensionStatement(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  return ((PerlBuilder)b).getPerlParser().parseStatement(b,l);}  }
class C{  private void handleBreakpointClick(final NaviNode node,final double y){  if (node.getRawNode() instanceof INaviCodeNode) {    final int row=node.positionToRow(y - node.getY());    CGraphDebugger.toggleBreakpoint(m_model.getDebuggerProvider(),(INaviCodeNode)node.getRawNode(),row);  } else   if (node.getRawNode() instanceof INaviFunctionNode) {    CGraphDebugger.toggleBreakpoint(m_model.getDebuggerProvider(),(INaviFunctionNode)node.getRawNode());  }}  }
class C{  public ArithEncoder(Output out){  mOut=out;}  }
class C{  public boolean isIncompleteNumericalRun(String pin){  final int len=pin.length();  int consecutive=0;  char last=pin.charAt(0);  for (int i=1; i < len; i++) {    final char c=pin.charAt(i);    if (last == c) {      consecutive++;    } else {      consecutive=0;    }    last=c;    if (consecutive >= 2) {      return true;    }  }  return false;}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.compareTo("text") == 0 || eventName.compareTo("graph") == 0 || eventName.equals("batchAssociationRules")) {    if (!m_listenees.containsKey("dataSet") && !m_listenees.containsKey("trainingSet")) {      return false;    }    Object source=m_listenees.get("trainingSet");    if (source != null && source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("trainingSet")) {        return false;      }    }    source=m_listenees.get("dataSet");    if (source != null && source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("dataSet")) {        return false;      }    }    if (eventName.compareTo("graph") == 0 && !(m_Associator instanceof weka.core.Drawable)) {      return false;    }    if (eventName.equals("batchAssociationRules")) {      if (!(m_Associator instanceof AssociationRulesProducer)) {        return false;      }      if (!((AssociationRulesProducer)m_Associator).canProduceRules()) {        return false;      }    }  }  return true;}  }
class C{  public String minRuleSizeTipText(){  return "The minimum number of tests in rules.";}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.PARAMETERIZED_TYPE_REF_IM;}  }
class C{  public void addChargingCollectionFunctionAddress(String ccfAddress) throws ParseException {  if (ccfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");  this.parameters.set(ParameterNamesIms.CCF,ccfAddress);}  }
class C{  public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,String value){  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);  if (bluetoothGatt != null) {    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));    characteristic.setValue(value);    return bluetoothGatt.writeCharacteristic(characteristic);  }  return false;}  }
class C{  public List<String> unzipFile(String zipFileName,String outputDirectory) throws ZipException, IOException {  int BUFFER=2048;  byte[] data=new byte[BUFFER];  int currentByte;  List<String> destFileList=new ArrayList<String>();  File file=new File(zipFileName);  ZipFile zipFile=new ZipFile(file);  Enumeration zipFileEntries=zipFile.entries();  while (zipFileEntries.hasMoreElements()) {    ZipEntry zipEntry=(ZipEntry)zipFileEntries.nextElement();    File destFile=new File(outputDirectory,zipEntry.getName());    destFile.getParentFile().mkdirs();    if (!zipEntry.isDirectory()) {      destFileList.add(destFile.getAbsolutePath());      BufferedInputStream bufferedInputStream=new BufferedInputStream(zipFile.getInputStream(zipEntry));      FileOutputStream fileOutputStream=new FileOutputStream(destFile);      BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(fileOutputStream,BUFFER);      while ((currentByte=bufferedInputStream.read(data,0,BUFFER)) != -1) {        bufferedOutputStream.write(data,0,currentByte);      }      bufferedOutputStream.flush();      bufferedOutputStream.close();      bufferedInputStream.close();    }  }  return destFileList;}  }
class C{  public AccountHeaderBuilder withAlternativeProfileHeaderSwitching(boolean alternativeProfileHeaderSwitching){  this.mAlternativeProfileHeaderSwitching=alternativeProfileHeaderSwitching;  return this;}  }
class C{  public static void controlFlowAnchor(){}  }
class C{  public boolean hasNorms(){  return indexOptions != IndexOptions.NONE && omitNorms == false;}  }
class C{  public static void put200(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    for (int i=1; i < 100; i++) {      r1.put("key-1","11");      r2.put("key-1","11");    }    r1.put("key-1","33");    r2.put("key-1","33");  } catch (  Exception ex) {    ex.printStackTrace();    Assert.fail("failed while region.put()",ex);  }}  }
class C{  public void decodeSingle(BarcodeCallback callback){  this.decodeMode=DecodeMode.SINGLE;  this.callback=callback;  startDecoderThread();}  }
class C{  public void addGrid(final Grid grid){  gridList.add(grid);  add(grid);  revalidate();}  }
class C{  @Override public final int skipBytes(int n) throws IOException {  return dis.skipBytes(n);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:58.417 -0500",hash_original_method="8E343D7D0CF266D2D2F5F12353F2E5FB",hash_generated_method="3F0DC5CF6405BEFFC970BFCD2FEB88B1") public static boolean isEqual(byte[] digesta,byte[] digestb){  if (digesta.length != digestb.length) {    return false;  }  for (int i=0; i < digesta.length; i++) {    if (digesta[i] != digestb[i]) {      return false;    }  }  return true;}  }
class C{  public static X509Certificate generateSelfSignedCertificate() throws GeneralSecurityException, IOException, OperatorCreationException {  return new SelfSignedCertificateGenerator().certificate;}  }
class C{  private static boolean serializeField(Field f){  int mod=f.getModifiers();  return !Modifier.isStatic(mod) && !Modifier.isTransient(mod);}  }
class C{  private int handleJ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index,4,"JOSE") || contains(value,0,4,"SAN ")) {    if ((index == 0 && (charAt(value,index + 4) == ' ') || value.length() == 4) || contains(value,0,4,"SAN ")) {      result.append('H');    } else {      result.append('J','H');    }    index++;  } else {    if (index == 0 && !contains(value,index,4,"JOSE")) {      result.append('J','A');    } else     if (isVowel(charAt(value,index - 1)) && !slavoGermanic && (charAt(value,index + 1) == 'A' || charAt(value,index + 1) == 'O')) {      result.append('J','H');    } else     if (index == value.length() - 1) {      result.append('J',' ');    } else     if (!contains(value,index + 1,1,L_T_K_S_N_M_B_Z) && !contains(value,index - 1,1,"S","K","L")) {      result.append('J');    }    if (charAt(value,index + 1) == 'J') {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public void testDecimalFormatAssumptions(){  Pair[] pairs={Pair.of(new Double(12345678),"12345678.0"),Pair.of(new Double(12345678.0),"12345678.0"),Pair.of(new Double(12345678.1),"12345678.1"),Pair.of(new Double(12345678.11),"12345678.11"),Pair.of(new Double(12345678.111),"12345678.111"),Pair.of(new Double(12345678.1111),"12345678.1111"),Pair.of(new Double(12345678.11111),"12345678.11111"),Pair.of(new Double(12345678.111111),"12345678.111111")};  for (  Pair pair : pairs) {    assertEquals("Format did not match",pair.getRight(),BasicBroParser.DECIMAL_FORMAT.get().format(pair.getLeft()));  }}  }
class C{  protected SimpleQuantifierImpl(){  super();}  }
class C{  public boolean isUnorderedVariant(final Path p){  if (p == null)   throw new IllegalArgumentException();  if (vertices.length != p.vertices.length) {    return false;  }  final Vertex[] v1=this.vertices;  final Vertex[] v2=p.vertices;  if (v1.length != v2.length) {    return false;  }  for (int i=0; i < v2.length; i++) {    final Vertex tmp=v2[i];    boolean found=false;    for (int j=0; j < v1.length; j++) {      if (v1[j] == tmp) {        found=true;        break;      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public FastFloatBuffer append(float[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  @Override public void stopRadio(){  mService.stop();}  }
class C{  public boolean isInlineable(Environment env,boolean fromFinal){  return (getModifiers() & M_INLINEABLE) != 0;}  }
class C{  public boolean isAPSupported(){  return true;}  }
class C{  public static <C extends Comparable<?>>Builder<C> builder(){  return new Builder<C>();}  }
class C{  public synchronized void nextFrame(){  currentFrame++;  if (currentFrame >= frames.size()) {    currentFrame=0;  }  super.setLines(frames.get(currentFrame));  invalidate();}  }
class C{  protected void registerTableAttributes(){  addAttributeProcessor(new OneColumnLmlAttribute(),"oneColumn");  addAttributeProcessor(new TableAlignLmlAttribute(),"tableAlign");  addAttributeProcessor(new TableBackgroundLmlAttribute(),"bg","background");  addAttributeProcessor(new TablePadBottomLmlAttribute(),"tablePadBottom");  addAttributeProcessor(new TablePadLeftLmlAttribute(),"tablePadLeft");  addAttributeProcessor(new TablePadLmlAttribute(),"tablePad");  addAttributeProcessor(new TablePadRightLmlAttribute(),"tablePadRight");  addAttributeProcessor(new TablePadTopLmlAttribute(),"tablePadTop");  addAttributeProcessor(new TableRoundLmlAttribute(),"round");  registerCellAttributes();}  }
class C{  public Collection<?> toCollection() throws SQLException {  return super.toCollection();}  }
class C{  public final static void writeLong(BytesRef dst,long i){  writeInt(dst,(int)(i >> 32));  writeInt(dst,(int)i);}  }
class C{  public boolean onPort(InetAddress dest,int port){  return localDataSocket.onPort(dest,port);}  }
class C{  public static boolean showSoftInput(View view){  InputMethodManager imm=(InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  return imm.showSoftInput(view,InputMethodManager.SHOW_FORCED);}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapBean) {    if (getMap() == (MapBean)someObj) {      Debug.message("mousedelegator","MouseDelegator: removing the map.");      setMap(null);    }  }  if (someObj instanceof MapMouseMode) {    Debug.message("mousedelegator","MouseDelegator: removing a MapMouseMode.");    removeMouseMode((MapMouseMode)someObj);  }  if (someObj == this) {    dispose();  }}  }
class C{  private static void addCommandWrapper(Map<Resource,List<CommandWrapper>> class2Query,Statement s,CommandWrapper wrapper){  Resource type=s.getSubject();  List<CommandWrapper> list=class2Query.get(type);  if (list == null) {    list=new LinkedList<CommandWrapper>();    class2Query.put(type,list);  }  list.add(wrapper);}  }
class C{  public static <K,V>Map<K,V> removeKeys(final Map<K,V> map,final Filter<Map.Entry<K,V>> filter){  for (final Iterator<Map.Entry<K,V>> mapEntries=map.entrySet().iterator(); mapEntries.hasNext(); ) {    if (!filter.accept(mapEntries.next())) {      mapEntries.remove();    }  }  return map;}  }
class C{  public VideoStream(String streamStr){  String[] args=streamStr.split("&");  Map<String,String> argMap=new HashMap<String,String>();  for (  String arg : args) {    String[] argsValues=arg.split("=");    if (argsValues != null) {      if (argsValues.length >= 2) {        argMap.put(argsValues[0],argsValues[1]);      }    }  }  mUrl=argMap.get("url");}  }
class C{  @Override public void close(){  super.close();  allLocks.remove(fileName);  try {    FileChannel channel=lock.channel();    lock.release();    channel.close();    File file=new File(fileName + LCK_EXT);    file.delete();  } catch (  IOException e) {  }}  }
class C{  protected boolean[] correctBuildInitialisation(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  boolean[] result=new boolean[2];  print("correct initialisation during buildClassifier");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  Instances train1=null;  Instances test1=null;  Instances train2=null;  Instances test2=null;  Classifier classifier=null;  Evaluation evaluation1A=null;  Evaluation evaluation1B=null;  Evaluation evaluation2=null;  boolean built=false;  int stage=0;  try {    train1=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    train2=makeTestDataset(84,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    test1=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    test2=makeTestDataset(48,numTest,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train1,missingLevel,predictorMissing,classMissing);      addMissing(test1,Math.min(missingLevel,50),predictorMissing,classMissing);      addMissing(train2,missingLevel,predictorMissing,classMissing);      addMissing(test2,Math.min(missingLevel,50),predictorMissing,classMissing);    }    classifier=AbstractClassifier.makeCopies(getClassifier(),1)[0];    evaluation1A=new Evaluation(train1);    evaluation1B=new Evaluation(train1);    evaluation2=new Evaluation(train2);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    stage=0;    classifier.buildClassifier(train1);    built=true;    if (!testWRTZeroR(classifier,evaluation1A,train1,test1)[0]) {      throw new Exception("Scheme performs worse than ZeroR");    }    stage=1;    built=false;    classifier.buildClassifier(train2);    built=true;    if (!testWRTZeroR(classifier,evaluation2,train2,test2)[0]) {      throw new Exception("Scheme performs worse than ZeroR");    }    stage=2;    built=false;    classifier.buildClassifier(train1);    built=true;    if (!testWRTZeroR(classifier,evaluation1B,train1,test1)[0]) {      throw new Exception("Scheme performs worse than ZeroR");    }    stage=3;    if (!evaluation1A.equals(evaluation1B)) {      if (m_Debug) {        println("\n=== Full report ===\n" + evaluation1A.toSummaryString("\nFirst buildClassifier()",true) + "\n\n");        println(evaluation1B.toSummaryString("\nSecond buildClassifier()",true) + "\n\n");      }      throw new Exception("Results differ between buildClassifier calls");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    String msg=ex.getMessage().toLowerCase();    if (msg.indexOf("worse than zeror") >= 0) {      println("warning: performs worse than ZeroR");      result[0]=(stage < 1);      result[1]=(stage < 1);    } else {      println("no");      result[0]=false;    }    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }switch (stage) {case 0:        print(" of dataset 1");      break;case 1:    print(" of dataset 2");  break;case 2:print(" of dataset 1 (2nd build)");break;case 3:print(", comparing results from builds of dataset 1");break;}println(": " + ex.getMessage() + "\n");println("here are the datasets:\n");println("=== Train1 Dataset ===\n" + train1.toString() + "\n");println("=== Test1 Dataset ===\n" + test1.toString() + "\n\n");println("=== Train2 Dataset ===\n" + train2.toString() + "\n");println("=== Test2 Dataset ===\n" + test2.toString() + "\n\n");}}return result;}  }
class C{  public PreparedStatement prepareStatement(final String sql,final int resultSetType,final int resultSetConcurrency,final int resultSetHoldability) throws SQLException {  if (resultSetConcurrency != ResultSet.CONCUR_READ_ONLY) {    throw ExceptionMapper.getFeatureNotSupportedException("Only read-only result sets allowed");  }  return prepareStatement(sql);}  }
class C{  @SuppressWarnings("try") private static StructuredGraph parseBytecodes(ResolvedJavaMethod method,HighTierContext context,CanonicalizerPhase canonicalizer,StructuredGraph caller){  StructuredGraph newGraph=new StructuredGraph(method,AllowAssumptions.from(caller.getAssumptions() != null));  try (Debug.Scope s=Debug.scope("InlineGraph",newGraph)){    if (!caller.isUnsafeAccessTrackingEnabled()) {      newGraph.disableUnsafeAccessTracking();    }    if (context.getGraphBuilderSuite() != null) {      context.getGraphBuilderSuite().apply(newGraph,context);    }    assert newGraph.start().next() != null : "graph needs to be populated by the GraphBuilderSuite " + method + ", "+ method.canBeInlined();    if (UseGraalInstrumentation.getValue()) {      new ExtractInstrumentationPhase().apply(newGraph,context);    }    new DeadCodeEliminationPhase(Optional).apply(newGraph);    canonicalizer.apply(newGraph,context);    return newGraph;  } catch (  Throwable e) {    throw Debug.handle(e);  }}  }
class C{  protected void doRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  Context context=null;  try {    context=createContext(request,response);    setContentType(request,response);    Template template=handleRequest(request,response,context);    if (template == null) {      return;    }    mergeTemplate(template,context,response);  } catch (  Exception e) {    error(request,response,e);  } finally {    requestCleanup(request,response,context);  }}  }
class C{  public BrowsableEditableData(BrowsableData bd,EditorRecord ed,DirtyManager dirty){  m_bd=bd;  m_editorrecord=ed;  m_Dirty=dirty;  m_iState=ST_NORECORD;  m_iIndex=INX_EOF;  m_bIsAdjusting=false;  m_editorrecord.writeValueEOF();  m_Dirty.setDirty(false);}  }
class C{  public boolean allowDuplicates(){  return allowDuplicates;}  }
class C{  private static void scanPath(Path path,FileSystem fs) throws IOException, InterruptedException, SQLException {  FileSystem scanFs=fs;  System.out.println("Now reading data as:" + UserGroupInformation.getCurrentUser());  if (!scanFs.exists(path)) {    logger.info("path : " + path.getName() + " doesn't exist!");  }  scanPathHelper(path,scanFs);}  }
class C{  public void logIn(Activity activity,Callback<TwitterSession> callback){  checkInitialized();  new TwitterAuthClient().authorize(activity,callback);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:56.417 -0400",hash_original_method="97DC8BEF6DA4F2C77A7C47140A7E5DBB",hash_generated_method="E5C9BEB5C08CF7BC7E37FD9017B6D1B3") long freeSpaceWindows(String path,long timeout) throws IOException {  path=FilenameUtils.normalize(path,false);  if (path.length() > 0 && path.charAt(0) != '"') {    path="\"" + path + "\"";  }  String[] cmdAttribs=new String[]{"cmd.exe","/C","dir /a /-c " + path};  List<String> lines=performCommand(cmdAttribs,Integer.MAX_VALUE,timeout);  for (int i=lines.size() - 1; i >= 0; i--) {    String line=lines.get(i);    if (line.length() > 0) {      return parseDir(line,path);    }  }  throw new IOException("Command line 'dir /-c' did not return any info " + "for path '" + path + "'");}  }
class C{  private void invite(Player player,Player targetPlayer){  if (!player.getChatBucket().checkAndAdd(0)) {    return;  }  if (player == targetPlayer) {    player.sendPrivateText(NotificationType.ERROR,"You cannot invite yourself into a group.");    return;  }  if (targetPlayer.isGhost() && (player.getAdminLevel() < AdministrationAction.getLevelForCommand("ghostmode").intValue())) {    player.sendPrivateText(NotificationType.ERROR,"Player " + targetPlayer.getName() + " is not online");    return;  }  if (GagManager.checkIsGaggedAndInformPlayer(player)) {    return;  }  if (targetPlayer.getIgnore(player.getName()) != null) {    return;  }  if (targetPlayer.getAwayMessage() != null) {    player.sendPrivateText("Sorry, " + targetPlayer.getName() + " is away.");    return;  }  if (targetPlayer.getGrumpyMessage() != null) {    player.sendPrivateText(targetPlayer.getName() + " has a closed mind, and is seeking solitude from all but close friends");    return;  }  Group group=SingletonRepository.getGroupManager().getGroup(targetPlayer.getName());  if (group != null) {    player.sendPrivateText(NotificationType.ERROR,targetPlayer.getName() + " is already in a group.");    return;  }  SingletonRepository.getGroupManager().createGroup(player.getName());  group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (!group.hasLeader(player.getName())) {    player.sendPrivateText(NotificationType.ERROR,"Only the group leader may invite people.");    return;  }  if (group.isFull()) {    player.sendPrivateText(NotificationType.ERROR,"Your group is already full.");    return;  }  group.invite(player,targetPlayer);  player.sendPrivateText("You have invited " + targetPlayer.getName() + " to join your group.");}  }
class C{  private void loadTestConfiguration() throws Exception {  assert TEST_CONFIGURATION_FILE.isFile();  InputStream in=null;  Properties p=new Properties();  try {    in=new FileInputStream(TEST_CONFIGURATION_FILE);    p.load(in);  }  finally {    U.closeQuiet(in);  }  clientNodes=Integer.parseInt(p.getProperty("client.nodes.count"));  srvNodes=Integer.parseInt(p.getProperty("server.nodes.count"));  threadsPerClient=Integer.parseInt(p.getProperty("threads.per.client"));  cancelRate=Integer.parseInt(p.getProperty("cancel.rate"));  submitDelay=Long.parseLong(p.getProperty("submit.delay"));  taskParams=new GridJobLoadTestParams(Integer.parseInt(p.getProperty("jobs.count")),Integer.parseInt(p.getProperty("jobs.test.duration")),Integer.parseInt(p.getProperty("jobs.test.completion.delay")),Double.parseDouble(p.getProperty("jobs.failure.probability")));}  }
class C{  public String[] readNext() throws IOException {  String[] result=null;  do {    String nextLine=getNextLine();    if (!hasNext) {      return result;    }    String[] r=parser.parseLineMulti(nextLine);    if (r.length > 0) {      if (result == null) {        result=r;      } else {        result=combineResultsFromMultipleReads(result,r);      }    }  } while (parser.isPending());  return result;}  }
class C{  protected boolean validateFunctionArgumentTypes(final Processor<ElementComponentKey,? extends ConsumerFunctionContext<ElementComponentKey,? extends ConsumerFunction>> processor,final SchemaElementDefinition elementDef){  if (null != processor && null != processor.getFunctions()) {    for (    ConsumerFunctionContext<ElementComponentKey,? extends ConsumerFunction> context : processor.getFunctions()) {      if (null == context.getFunction()) {        LOGGER.error(processor.getClass().getSimpleName() + " contains a function context with a null function.");        return false;      }      if (!validateFunctionSelectionTypes(elementDef,context)) {        return false;      }      if (context instanceof ConsumerProducerFunctionContext && !validateFunctionProjectionTypes(elementDef,(ConsumerProducerFunctionContext<ElementComponentKey,? extends ConsumerFunction>)context)) {        return false;      }    }  }  return true;}  }
class C{  @Override public int read(byte[] buf,int offset,int length) throws IOException {  int sublen=_pageReader.read(_offset,buf,offset,length);  if (sublen > 0) {    _offset+=sublen;    return sublen;  } else {    return sublen;  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public SimpleLoader(DynamicClassLoader loader,PathImpl path,String prefix){  this(loader);  setPath(path);  setPrefix(prefix);}  }
class C{  public void updateTagKeyOptions(){  String currentText=keyBox.getText();  List<String> tagKeys=influxService.getTags(measurementBox.getText());  if (null != tagKeys) {    keyBox.setItems(tagKeys.toArray(new String[tagKeys.size()]));  }  keyBox.setText(currentText);}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int dragFlags=0;  if (mSortEnabled && !mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled && mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_X;    dragFlags|=DragSortListView.DRAG_NEG_X;  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),dragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  public boolean hasStatus(){  return hasExtension(Status.class);}  }
class C{  public MathExpression(MathExpression existing){  this.expressionStr=existing.expressionStr;  this.variables=existing.variables;  this.exp=existing.exp;  this.functions=existing.functions;}  }
class C{  private Protocol(){}  }
class C{  public void removeController(Controller controller){  boolean contain=controllers.contains(controller);  System.out.println(contain);  controllers.remove(controller);}  }
class C{  @Override public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  public void deleteProject(final Project project) throws CouldntDeleteException {  Preconditions.checkNotNull(project,"Error: Project argument can not be null");  try {    m_database.getContent().delete(project.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public boolean isInspectorVolatile(){  return getInspector().isVolatile();}  }
class C{  protected void deleteProximityBrowsingNode(final Node yProxyNode){  final ZyProximityNode<?> zyProxyNode=m_proximityMap.get(yProxyNode);  m_nodeListeners.remove(zyProxyNode);  m_proximityMap.remove(yProxyNode);  m_graph.getGraph().removeNode(yProxyNode);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    history.getCurrentState().setPreviousStateAsCurrentState();    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public static void takeScreenshot(Activity activity,final File toFile){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  if (toFile == null) {    throw new IllegalArgumentException("Parameter toFile cannot be null.");  }  Bitmap bitmap=null;  try {    bitmap=takeBitmapUnchecked(activity);    writeBitmap(bitmap,toFile);  } catch (  Exception e) {    String message="Unable to take screenshot to file " + toFile.getAbsolutePath() + " of activity "+ activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  } finally {    if (bitmap != null) {      bitmap.recycle();    }  }  Log.d(TAG,"Screenshot captured to " + toFile.getAbsolutePath());}  }
class C{  public Contract findContractByUniqueKey(String SECType,String symbol,String exchange,String currency,ZonedDateTime expiry) throws PersistentModelException {  return m_contractHome.findByUniqueKey(SECType,symbol,exchange,currency,expiry);}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=getBool(stack);  MediaNode node=getMediaNode(stack);  if (node != null) {    MediaNode[] kids=node.getChildren();    for (int i=0; kids != null && i < kids.length; i++)     kids[i].setChecked(x);  }  return null;}  }
class C{  private static <T extends GlowStructurePiece>T createStructurePiece(StructurePieceStore<T> store,CompoundTag compound){  T structurePiece=store.createStructurePiece();  store.load(structurePiece,compound);  return structurePiece;}  }
class C{  public UpdateConstraintException(String message){  super(message);}  }
class C{  private int encodeObj(Object obj,ByteArrayOutputStream out) throws IgniteCheckedException {  int flags=0;  byte[] data=null;  if (obj instanceof String)   data=((String)obj).getBytes(UTF_8); else   if (obj instanceof Boolean) {    data=new byte[]{(byte)((Boolean)obj ? '1' : '0')};    flags|=BOOLEAN_FLAG;  } else   if (obj instanceof Integer) {    data=U.intToBytes((Integer)obj);    flags|=INT_FLAG;  } else   if (obj instanceof Long) {    data=U.longToBytes((Long)obj);    flags|=LONG_FLAG;  } else   if (obj instanceof Date) {    data=U.longToBytes(((Date)obj).getTime());    flags|=DATE_FLAG;  } else   if (obj instanceof Byte) {    data=new byte[]{(Byte)obj};    flags|=BYTE_FLAG;  } else   if (obj instanceof Float) {    data=U.intToBytes(Float.floatToIntBits((Float)obj));    flags|=FLOAT_FLAG;  } else   if (obj instanceof Double) {    data=U.longToBytes(Double.doubleToLongBits((Double)obj));    flags|=DOUBLE_FLAG;  } else   if (obj instanceof byte[]) {    data=(byte[])obj;    flags|=BYTE_ARR_FLAG;  } else {    jdkMarshaller.marshal(obj,out);    flags|=SERIALIZED_FLAG;  }  if (data != null)   out.write(data,0,data.length);  return flags;}  }
class C{  public String jndiName(){  if (jndiName != null) {    return this.jndiName;  }  return "java:/jms/" + this.name;}  }
class C{  public final int readInt() throws IOException {  mPosition+=4;  d.readFully(w,0,4);  return (w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.GENERATOR_ENTRY__ELEMENT_REF:    if (resolve)     return getElementRef();  return basicGetElementRef();case SGenPackage.GENERATOR_ENTRY__FEATURES:return getFeatures();case SGenPackage.GENERATOR_ENTRY__CONTENT_TYPE:return getContentType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.PARENTHESIZED_EXPRESSION__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void add(double value){  if (value - median != 0.0) {    super.add(value - median,0);  }}  }
class C{  public DirectReplyProcessor(InternalDistributedSystem system,InternalDistributedMember member){  this(system,Collections.singleton(member));}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("weblogic8x",ContainerType.INSTALLED,WebLogic8xInstalledLocalContainer.class);  containerFactory.registerContainer("weblogic9x",ContainerType.INSTALLED,WebLogic9xInstalledLocalContainer.class);  containerFactory.registerContainer("weblogic10x",ContainerType.INSTALLED,WebLogic10xInstalledLocalContainer.class);  containerFactory.registerContainer("weblogic103x",ContainerType.INSTALLED,WebLogic103xInstalledLocalContainer.class);  containerFactory.registerContainer("weblogic103x",ContainerType.REMOTE,WebLogic103xRemoteContainer.class);  containerFactory.registerContainer("weblogic12x",ContainerType.INSTALLED,WebLogic12xInstalledLocalContainer.class);  containerFactory.registerContainer("weblogic121x",ContainerType.INSTALLED,WebLogic121xInstalledLocalContainer.class);  containerFactory.registerContainer("weblogic121x",ContainerType.REMOTE,WebLogic121xRemoteContainer.class);  containerFactory.registerContainer("weblogic122x",ContainerType.INSTALLED,WebLogic122xInstalledLocalContainer.class);  containerFactory.registerContainer("weblogic122x",ContainerType.REMOTE,WebLogic122xRemoteContainer.class);}  }
class C{  private static int checkTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':    return pos + 1;default :  return checkFieldTypeSignature(signature,pos);}}  }
class C{  public static List<Trip> modalTripFilter(List<Trip> trips,String mode){  List<Trip> filteredTrips=new LinkedList<>();  for (  Trip tempTrip : trips) {    if (tempTrip.mode.equals(mode)) {      filteredTrips.add(tempTrip.clone());    }  }  return Collections.unmodifiableList(filteredTrips);}  }
class C{  public void testFailureWithSuccessRatio(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(2,3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  assertFalse(breaker.isOpen());  state.recordFailure();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  private void startFromQueue(){  do {    int active0=active.get();    if (active0 == maxTasks)     break;    if (active.compareAndSet(active0,active0 + 1)) {      Callable<?> task=queue.poll();      if (task == null) {        int res=active.decrementAndGet();        assert res >= 0 : res;        break;      }      startThread(task);    }  } while (!queue.isEmpty());}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AlertInfoParser.parse");  AlertInfoList list=new AlertInfoList();  try {    headerName(TokenTypes.ALERT_INFO);    while (lexer.lookAhead(0) != '\n') {      AlertInfo alertInfo=new AlertInfo();      alertInfo.setHeaderName(SIPHeaderNames.ALERT_INFO);      URLParser urlParser;      GenericURI uri;      do {        this.lexer.SPorHT();        if (this.lexer.lookAhead(0) == '<') {          this.lexer.match('<');          urlParser=new URLParser((Lexer)this.lexer);          uri=urlParser.uriReference(true);          alertInfo.setAlertInfo(uri);          this.lexer.match('>');        } else {          String alertInfoStr=this.lexer.byteStringNoSemicolon();          alertInfo.setAlertInfo(alertInfoStr);        }        this.lexer.SPorHT();        super.parse(alertInfo);        list.add(alertInfo);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');        } else         break;      } while (true);    }    return list;  }  finally {    if (debug)     dbg_leave("AlertInfoParser.parse");  }}  }
class C{  public HashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  private void computeSearchResult(String searchString){  this.searchString=searchString;  this.searchResult=new ArrayList<Object>();  this.searchResultIndex=0;  for (  Object rootElement : contentProvider.getSortedRootElements()) {    computeSearchResult(rootElement);  }}  }
class C{  public final void writeDouble(double v) throws IOException {  writeLong(Double.doubleToLongBits(v));}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public IMultimediaStreamingSession initiateStreamingSession(String serviceId,ContactId contact) throws RemoteException {  return initiateStreamingSession2(serviceId,contact,DataFormat.ENCODING);}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();switch (resType) {case cudaResourceType.cudaResourceTypeArray:    sb.append("array=" + array_array + f);  break;case cudaResourceType.cudaResourceTypeMipmappedArray:sb.append("mipmap=" + mipmap_mipmap + f);break;case cudaResourceType.cudaResourceTypeLinear:sb.append("devPtr=" + linear_devPtr + f);sb.append("format=" + linear_desc + f);sb.append("sizeInBytes=" + linear_sizeInBytes + f);break;case cudaResourceType.cudaResourceTypePitch2D:sb.append("devPtr=" + pitch2D_devPtr + f);sb.append("format=" + pitch2D_desc + f);sb.append("width=" + pitch2D_width + f);sb.append("height=" + pitch2D_height + f);sb.append("pitchInBytes=" + pitch2D_pitchInBytes + f);break;default :sb.append("INVALID");}return sb.toString();}  }
class C{  public void kill(){  if (out != null) {    out.close();    out=null;  }  if (process != null) {    process.destroy();    process=null;    notifyStopProcess();  }  if (outThread != null) {    outThread.interrupt();    outThread=null;  }  if (errThread != null) {    errThread.interrupt();    errThread=null;  }}  }
class C{  @Override public final void tokenize(SourceCode source,Tokens cpdTokens){  String fileName=source.getFileName();  if (!canTokenize(fileName)) {    return;  }  doTokenize(cpdTokens,fileName);}  }
class C{  private pairNodeNode deleteLink(Link link){  pairNodeNode p=new pairNodeNode();  net.removeLink(link.getId());  if (link.getFromNode().getInLinks().isEmpty() && link.getFromNode().getOutLinks().isEmpty()) {    p.node1=link.getFromNode();    net.removeNode(link.getFromNode().getId());  }  if (link.getToNode().getInLinks().isEmpty() && link.getToNode().getOutLinks().isEmpty()) {    p.node2=link.getToNode();    net.removeNode(link.getToNode().getId());  }  return p;}  }
class C{  PatchListKey(ObjectId oldId,Integer parentNum,ObjectId newId,Whitespace whitespace){  this.oldId=oldId;  this.parentNum=parentNum;  this.newId=newId;  this.whitespace=whitespace;}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    if (!mStackFromBottom) {      final int firstTop=getScrollChildTop();      delta=firstTop - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mDividerHeight;      }      if (delta < 0) {        delta=0;      }    } else {      final int lastBottom=getScrollChildBottom();      delta=lastBottom - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mDividerHeight;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      tryOffsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  public void paintArrowButtonForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int direction){  String compName=context.getComponent().getName();  boolean ltr=context.getComponent().getComponentOrientation().isLeftToRight();  if ("Spinner.nextButton".equals(compName) || "Spinner.previousButton".equals(compName)) {    if (ltr) {      paintForeground(context,g,x,y,w,h,null);    } else {      AffineTransform transform=new AffineTransform();      transform.translate(w,0);      transform.scale(-1,1);      paintForeground(context,g,x,y,w,h,transform);    }  } else   if (direction == SwingConstants.WEST) {    paintForeground(context,g,x,y,w,h,null);  } else   if (direction == SwingConstants.NORTH) {    if (ltr) {      AffineTransform transform=new AffineTransform();      transform.scale(-1,1);      transform.rotate(Math.toRadians(90));      paintForeground(context,g,y,0,h,w,transform);    } else {      AffineTransform transform=new AffineTransform();      transform.rotate(Math.toRadians(90));      transform.translate(0,-(x + w));      paintForeground(context,g,y,0,h,w,transform);    }  } else   if (direction == SwingConstants.EAST) {    AffineTransform transform=new AffineTransform();    transform.translate(w,0);    transform.scale(-1,1);    paintForeground(context,g,x,y,w,h,transform);  } else   if (direction == SwingConstants.SOUTH) {    if (ltr) {      AffineTransform transform=new AffineTransform();      transform.rotate(Math.toRadians(-90));      transform.translate(-h,0);      paintForeground(context,g,y,x,h,w,transform);    } else {      AffineTransform transform=new AffineTransform();      transform.scale(-1,1);      transform.rotate(Math.toRadians(-90));      transform.translate(-(h + y),-(w + x));      paintForeground(context,g,y,x,h,w,transform);    }  }}  }
class C{  @Override public void encode(WbXmlEncoder encoder,WbXmlElement element,WbXmlContent content) throws IOException {  if (content.isString()) {    encoder.writeString(content.getString());  } else   if (content.isElement()) {    ByteArrayOutputStream bos=null;    try {      if (encoder.getDefinition().locateTag(content.getElement().getTag()) != null) {        encoder.encode(content);      } else {        WbXmlDefinition def=encoder.getDefinition().locateLinkedDefinitionForTag(content.getElement().getTag());        if (def == null) {          throw new IOException(String.format("The definition for tag %s is not defined as linked!",content.getElement().getTag()));        }        WbXmlDocument doc=new WbXmlDocument(def,encoder.getIanaCharset());        doc.setBody(new WbXmlBody(content.getElement()));        bos=new ByteArrayOutputStream();        WbXmlEncoder tmp=new WbXmlEncoder(bos,doc,encoder.getType());        tmp.encode();        bos.flush();        byte[] bytes=bos.toByteArray();        encoder.writeOpaque(bytes);      }    }  finally {      if (bos != null) {        try {          bos.close();        } catch (        Exception e) {        }      }    }  } else {    throw new IOException("The Data should be a String or a Element");  }}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid,int registerA0,int registerA1){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X($a0=0x%08X, $a1=0x%08X), afterAction=%s, returnVoid=%b",address,registerA0,registerA1,afterAction,returnVoid));  }  callAddress(thread,address,afterAction,returnVoid,false,new int[]{registerA0,registerA1});}  }
class C{  public void clearMessages(){  this.values.clear();  notifyDataSetChanged();}  }
class C{  public boolean isValidLocalTld(String lTld){  lTld=unicodeToASCII(lTld);  return Arrays.binarySearch(LOCAL_TLDS,chompLeadingDot(lTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  private void uninstallLayout(JRootPane root){  if (myOldLayout != null) {    root.setLayout(myOldLayout);    myOldLayout=null;  }}  }
class C{  private void restoreStepDataFromDB(Step step){  com.emc.storageos.db.client.model.WorkflowStep logStep=_dbClient.queryObject(com.emc.storageos.db.client.model.WorkflowStep.class,step.workflowStepURI);  if (logStep.getExecuteMethodData() != null) {    Workflow.Method executeMethod=(Workflow.Method)GenericSerializer.deserialize(logStep.getExecuteMethodData());    step.executeMethod=executeMethod;  } else {    _log.info("No execute method in WorkflowStep DB" + step.stepId);  }  if (logStep.getRollbackMethodData() != null) {    Workflow.Method rollbackMethod=(Workflow.Method)GenericSerializer.deserialize(logStep.getRollbackMethodData());    step.rollbackMethod=rollbackMethod;  }}  }
class C{  public void sendTo(IMessage message,EntityPlayerMP player){  netHandler.sendTo(message,player);}  }
class C{  public T caseN4ClassDefinition(N4ClassDefinition object){  return null;}  }
class C{  protected void sendDataToPlayer(EntityPlayerMP player){  TheBetweenlands.networkWrapper.sendTo(new MessageSyncSharedStorage(SharedStorage.save(this,new NBTTagCompound(),true)),player);}  }
class C{  public static SegmentInfos readSegmentInfos(IndexCommit commit) throws IOException {  String filename=IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",commit.getGeneration());  return SegmentInfos.readCommit(commit.getDirectory(),filename);}  }
class C{  public static void displayPanel(JComponent component){  displayPanel(component,null);}  }
class C{  public static GeneralizedSemIm serializableInstance(){  return new GeneralizedSemIm(GeneralizedSemPm.serializableInstance());}  }
class C{  public BusinessObjectDefinitionCreateRequest createBusinessObjectDefinitionCreateRequest(String namespaceCode,String businessObjectDefinitionName,String dataProviderName,String businessObjectDefinitionDescription,String displayName){  return createBusinessObjectDefinitionCreateRequest(namespaceCode,businessObjectDefinitionName,dataProviderName,businessObjectDefinitionDescription,displayName,AbstractServiceTest.NO_ATTRIBUTES);}  }
class C{  public TColor rotateRYB(int theta){  float h=hsv[0] * 360;  theta%=360;  float resultHue=0;  for (int i=0; i < RYB_WHEEL.length - 1; i++) {    Vec2D p=RYB_WHEEL[i];    Vec2D q=RYB_WHEEL[i + 1];    if (q.y < p.y) {      q.y+=360;    }    if (p.y <= h && h <= q.y) {      resultHue=p.x + (q.x - p.x) * (h - p.y) / (q.y - p.y);      break;    }  }  resultHue=(resultHue + theta) % 360;  for (int i=0; i < RYB_WHEEL.length - 1; i++) {    Vec2D p=RYB_WHEEL[i];    Vec2D q=RYB_WHEEL[i + 1];    if (q.y < p.y) {      q.y+=360;    }    if (p.x <= resultHue && resultHue <= q.x) {      h=p.y + (q.y - p.y) * (resultHue - p.x) / (q.x - p.x);      break;    }  }  hsv[0]=(h % 360) / 360.0f;  return setHSV(hsv);}  }
class C{  public static void assertEqualsIgnoreOrder(String message,NominalMapping expected,NominalMapping actual){  assertEquals(message,expected,actual,true);}  }
class C{  public void proceed(){  final Runnable proceedAction=this.proceedAction.get();  if (proceedAction != null)   proceedAction.run();}  }
class C{  public byte[] toByteArray(){  int length=getByteArrayLength();  ByteBuffer buffer=ByteBuffer.allocate(length);  for (int i=0; i < mRecords.length; i++) {    boolean mb=(i == 0);    boolean me=(i == mRecords.length - 1);    mRecords[i].writeToByteBuffer(buffer,mb,me);  }  return buffer.array();}  }
class C{  public void doSaveUnit(){  for (Enumeration<IPlayer> iter=getClient().getGame().getPlayers(); iter.hasMoreElements(); ) {    IPlayer p=iter.nextElement();    ArrayList<Entity> l=getClient().getGame().getPlayerEntities(p,false);    for (Enumeration<Entity> iter2=getClient().getGame().getRetreatedEntities(); iter2.hasMoreElements(); ) {      Entity e=iter2.nextElement();      if (e.getOwnerId() == p.getId()) {        l.add(e);      }    }    saveListFile(l,p.getName());  }  ArrayList<Entity> destroyed=new ArrayList<Entity>();  Enumeration<Entity> graveyard=getClient().getGame().getGraveyardEntities();  while (graveyard.hasMoreElements()) {    Entity entity=graveyard.nextElement();    if (entity.isSalvage()) {      destroyed.add(entity);    }  }  if (destroyed.size() > 0) {    String sLogDir=PreferenceManager.getClientPreferences().getLogDirectory();    File logDir=new File(sLogDir);    if (!logDir.exists()) {      logDir.mkdir();    }    String fileName="salvage.mul";    if (PreferenceManager.getClientPreferences().stampFilenames()) {      fileName=StringUtil.addDateTimeStamp(fileName);    }    File unitFile=new File(sLogDir + File.separator + fileName);    try {      EntityListFile.saveTo(unitFile,destroyed);    } catch (    IOException excep) {      excep.printStackTrace(System.err);      doAlertDialog(Messages.getString("ClientGUI.errorSavingFile"),excep.getMessage());    }  }}  }
class C{  void buildFunction(Prototype prototype,boolean full){  int i, n=prototype.p.length;  buildHeader(prototype);  buildCode(prototype);  if (full) {    buildConstants(prototype);    buildLocals(prototype);    buildUpValues(prototype);  }  for (i=0; i < n; i++)   buildFunction(prototype.p[i],full);}  }
class C{  public void XXtestIllFormedWKB() throws ParseException {  checkWKBGeometry("00000000030000000140590000000000004069000000000000","POLYGON ((100 200, 100 200, 100 200, 100 200)");}  }
class C{  public AttributePanel(Color background){  m_backgroundColor=background;  setProperties();  this.setBackground(Color.blue);  setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);  m_colorList=new ArrayList<Color>(10);  for (int noa=m_colorList.size(); noa < 10; noa++) {    Color pc=m_DefaultColors[noa % 10];    int ija=noa / 10;    ija*=2;    for (int j=0; j < ija; j++) {      pc=pc.darker();    }    m_colorList.add(pc);  }}  }
class C{  public void end(){  if (currentPrompt != null) {    currentPrompt.conversationEnded(context);    currentPrompt=null;  }  context.getBot().getConversationRegistry().removeConversation(this);}  }
class C{  void reset(){  price=INFINITY_PRICE;}  }
class C{  public MekaFileChooser(String currentDirectoryPath){  super(currentDirectoryPath);  initialize();}  }
class C{  protected Node newNode(){  return new SVGOMFEBlendElement();}  }
class C{  public IntsRefFSTEnum(FST<T> fst){  super(fst);  result.input=current;  current.offset=1;}  }
class C{  public static PsiFile findLayoutResource(PsiFile file,Project project,String fileName){  String name=String.format("%s.xml",fileName);  return resolveLayoutResourceFile(file,project,name);}  }
class C{  public static void skipFully(InputStream in,long bytes) throws IOException {  if (bytes < 0) {    throw new IllegalArgumentException("Can't skip " + bytes + " bytes");  }  long remaining=bytes;  while (remaining > 0) {    long skipped=in.skip(remaining);    if (skipped <= 0) {      throw new EOFException("Reached EOF while trying to skip a total of " + bytes);    }    remaining-=skipped;  }}  }
class C{  public boolean hasEntity(int entityId){  return entityIds.containsKey(new Integer(entityId));}  }
class C{  @NoInline public static void write(long value,boolean hexToo){  if (runningVM) {    sysCall.sysConsoleWriteLong(value,hexToo ? 1 : 0);  } else {    writeNotRunningVM(value);  }}  }
class C{  public XMPPError(Condition condition,String messageText){  this.init(condition);  this.message=messageText;}  }
class C{  @Override public boolean add(final T ref){  if (nscan > 0 && scanHead(nscan,ref)) {    return false;  }  super.add(ref);  return true;}  }
class C{  @Override public void processEndElement() throws ParseException {  if (value == null) {    value="";  }  text=value;  lang=xmlLang;}  }
class C{  protected MqttWireMessage waitForResponse() throws MqttException {  return waitForResponse(-1);}  }
class C{  public IntBidirectionalIterator iterator(final int from){  if (this == EMPTY_INTERVAL)   return IntIterators.EMPTY_ITERATOR;  final IntBidirectionalIterator i=IntIterators.fromTo(left,right + 1);  if (from > left)   i.skip(Math.min(length(),from - left));  return i;}  }
class C{  public double distance(int[] point1,int[] point2) throws Exception {  return Math.sqrt(Long.valueOf(distance2(point1,point2)).doubleValue());}  }
class C{  public static String removeHashbang(String url){  return url.replaceFirst("#!","");}  }
class C{  private static <T>T instantiate(final Class<T> clazz,Class<?>[] parameterTypes,Object... initArgs){  try {    Constructor<T> constructor=clazz.getConstructor(parameterTypes);    return constructor.newInstance(initArgs);  } catch (  NoSuchMethodException|IllegalAccessException|InstantiationException|InvocationTargetException e) {    handleInitializationException(clazz,e);  }  return null;}  }
class C{  public void process(Set<MultiKey<EventBean>> newEvents,Set<MultiKey<EventBean>> oldEvents,ExprEvaluatorContext exprEvaluatorContext){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".process Received update, " + "  newData.length==" + ((newEvents == null) ? 0 : newEvents.size()) + "  oldData.length=="+ ((oldEvents == null) ? 0 : oldEvents.size()));  }  resultSetProcessor.applyJoinResult(newEvents,oldEvents);  if (!super.checkAfterCondition(newEvents,parent.getStatementContext())) {    return;  }  int newEventsSize=0;  if (newEvents != null) {    newEventsSize=newEvents.size();  }  int oldEventsSize=0;  if (oldEvents != null) {    oldEventsSize=oldEvents.size();  }  outputCondition.updateOutputCondition(newEventsSize,oldEventsSize);}  }
class C{  public static double pareto(double alpha){  if (!(alpha > 0.0))   throw new IllegalArgumentException("Shape parameter alpha must be positive");  return Math.pow(1 - uniform(),-1.0 / alpha) - 1.0;}  }
class C{  public CERTRecord(Name name,int dclass,long ttl,int certType,int keyTag,int alg,byte[] cert){  super(name,Type.CERT,dclass,ttl);  this.certType=checkU16("certType",certType);  this.keyTag=checkU16("keyTag",keyTag);  this.alg=checkU8("alg",alg);  this.cert=cert;}  }
class C{  public synchronized long push(final byte[] b) throws IOException, SpaceExceededException {  long handle=nextHandle();  this.stack.insert(NaturalOrder.encodeLong(handle,8),b);  return handle;}  }
class C{  ValueForKeyIterator(@Nullable Object key){  this.key=key;  KeyList<K,V> keyList=keyToKeyList.get(key);  next=(keyList == null) ? null : keyList.head;}  }
class C{  public InvalidCredentialsException(){  super();}  }
class C{  private float calculateScale(int x,int y){  final float centerX=getWidth() / 2f;  final float centerY=getHeight() / 2f;  final float maxDistance=(float)Math.sqrt(centerX * centerX + centerY * centerY);  final float deltaX=centerX - x;  final float deltaY=centerY - y;  final float distance=(float)Math.sqrt(deltaX * deltaX + deltaY * deltaY);  final float scale=0.5f + (distance / maxDistance) * 0.5f;  return scale;}  }
class C{  @Deprecated public NinePatchDrawable(Bitmap bitmap,byte[] chunk,Rect padding,String srcName){  this(new NinePatchState(new NinePatch(bitmap,chunk,srcName),padding),null);}  }
class C{  public boolean connect(boolean autoReconnect,OnConnectionChangedListener onConnectionChangedListener,OnBondingChangedListener onBondingChangedListener){  mBondingChangedListener=onBondingChangedListener;  return connect(autoReconnect,onConnectionChangedListener);}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  public static float fromDpToPx(float dp){  return dp * Resources.getSystem().getDisplayMetrics().density;}  }
class C{  public void clearSnapshots(){  if (F.isEmpty(snapshots))   return;  for (  Object snapshot : snapshots.values()) {    if (snapshot instanceof GridReservable)     ((GridReservable)snapshot).release();  }  snapshots=null;}  }
class C{  public IncrementMove(int pos){  if (pos < 0 || pos > 1) {    throw new IllegalArgumentException("Only two spaces to be incremented.");  }  this.pos=pos;}  }
class C{  public void testPassed(boolean testPassed,String sessionId){  update("passed",testPassed,sessionId);}  }
class C{  public Long findCandleCount(final Integer idTradingday,final Integer idContract) throws PersistentModelException {  return m_candleHome.findCandleCount(idTradingday,idContract);}  }
class C{  public void testDoConfigureSetsPort() throws Exception {  configuration.setProperty(ServletPropertySet.PORT,PORT);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(PORT,"//weblogic:listen-port",config);}  }
class C{  public static Properties createProperties(final Map<String,String> map){  Properties properties=new Properties();  if (!(map == null || map.isEmpty())) {    for (    Entry<String,String> entry : map.entrySet()) {      properties.setProperty(entry.getKey(),entry.getValue());    }  }  return properties;}  }
class C{  public void paintFileChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public T click(){  if (view != null) {    view.performClick();  }  return self();}  }
class C{  public byte[] annotateLookup(HyperGraph graph,HGHandle target,Object... annotations){  HGHandle type=null;  Integer position=null;  if (annotations.length > 0)   type=(HGHandle)annotations[0];  byte[] targetKey=target.getPersistent().toByteArray();  if (annotations.length > 1)   position=(Integer)annotations[1];  if (type == null && position != null)   throw new HGException("Type of link must be specified alongside target position for a typed incident lookup."); else   if (type != null && position != null) {    byte[] key=new byte[2 * targetKey.length + 4];    System.arraycopy(targetKey,0,key,0,targetKey.length);    System.arraycopy(type.getPersistent().toByteArray(),0,key,targetKey.length,targetKey.length);    BAUtils.writeInt(position,key,2 * targetKey.length);    return key;  } else   if (type != null) {    byte[] key=new byte[2 * targetKey.length];    System.arraycopy(targetKey,0,key,0,targetKey.length);    System.arraycopy(type.getPersistent().toByteArray(),0,key,targetKey.length,targetKey.length);    return key;  } else   return targetKey;}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction) throws WriterException {  byte[] bytes=null;  StringBuilder sb=new StringBuilder(msg.length());  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    bytes=getBytesForMessage(msg);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          if (bytes == null) {            bytes=getBytesForMessage(msg);          }          int b=determineConsecutiveBinaryCount(msg,bytes,p);          if (b == 0) {            b=1;          }          if (b == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,p,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,p,b,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public final Buffer append(String str){  char[] c=str.toCharArray();  final int n=LuaString.lengthAsUtf8(c);  makeroom(0,n);  LuaString.encodeToUtf8(c,c.length,bytes,offset + length);  length+=n;  return this;}  }
class C{  public void synchWithTree(final boolean forceSynch){  if (myInsideSynch) {    return;  }  myInsideSynch=true;  try {    RadComponent[] newSelection=myComponentTree.getSelectedComponents();    if (!forceSynch && mySelection.size() == newSelection.length) {      boolean anyChanges=false;      for (      RadComponent c : newSelection) {        if (!mySelection.contains(c)) {          anyChanges=true;          break;        }      }      if (!anyChanges)       return;    }    mySelection.clear();    Collections.addAll(mySelection,newSelection);    if (isEditing()) {      cellEditor.stopCellEditing();    }    final int selectedRow=getSelectedRow();    Property selectedProperty=null;    if (selectedRow >= 0 && selectedRow < myProperties.size()) {      selectedProperty=myProperties.get(selectedRow);    }    collectPropertiesForSelection();    myModel.fireTableDataChanged();    final ArrayList<Property> reversePath=new ArrayList<Property>(2);    while (selectedProperty != null) {      reversePath.add(selectedProperty);      selectedProperty=selectedProperty.getParent();    }    int indexToSelect=-1;    for (int i=reversePath.size() - 1; i >= 0; i--) {      final Property property=reversePath.get(i);      int index=findPropertyByName(myProperties,property.getName());      if (index == -1 && indexToSelect != -1) {        expandProperty(indexToSelect);        index=findPropertyByName(myProperties,property.getName());        if (index != -1) {          indexToSelect=index;        } else {          break;        }      } else {        indexToSelect=index;      }    }    if (indexToSelect != -1) {      getSelectionModel().setSelectionInterval(indexToSelect,indexToSelect);    } else     if (getRowCount() > 0) {      getSelectionModel().setSelectionInterval(0,0);    }    TableUtil.scrollSelectionToVisible(this);  }  finally {    myInsideSynch=false;  }}  }
class C{  private static boolean shouldMaterializerInCurrentBlock(double probabilityBlock,double probabilityChildren,int numMat){  return probabilityBlock * Math.pow(0.9,numMat - 1) < probabilityChildren;}  }
class C{  private static String hex(char ch){  return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void bumpPriority(List<GridCollisionJobContextWrapper> jobs){  int starvationInc=this.starvationInc;  for (int i=0; i < jobs.size(); i++) {    GridCollisionJobContextWrapper wrapper=jobs.get(i);    if (i > wrapper.originalIndex())     wrapper.getContext().getJobContext().setAttribute(jobPriAttrKey,getJobPriority(wrapper.getContext()) + starvationInc);  }}  }
class C{  public static Motor victorSP(int channel,DoubleToDoubleFunction speedLimiter){  return new HardwareMotor(new VictorSP(channel),SPEED_LIMITER);}  }
class C{  private static boolean isNewerVersionAvailable(final String localVersion,final String webVersion){  final DefaultArtifactVersion dafLocalVersion=new DefaultArtifactVersion(localVersion);  final DefaultArtifactVersion dafWebVersion=new DefaultArtifactVersion(webVersion);  return !TextUtils.isEmpty(localVersion) && !TextUtils.isEmpty(webVersion) && dafLocalVersion.compareTo(dafWebVersion) == -1;}  }
class C{  public DataViewerDialog(Frame parent,ModalityType modality){  super(parent,modality);  createDialog();}  }
class C{  public static boolean isWWDotNetLayerSetConfigEvent(XMLEvent event){  if (event == null) {    String message=Logging.getMessage("nullValue.EventIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!event.isStartElement()) {    return false;  }  String name=WWXML.getUnqalifiedName(event.asStartElement());  return name != null && name.equals("LayerSet");}  }
class C{  public Pointer(){  buffer=null;  pointers=null;  byteOffset=0;}  }
class C{  private void addWorker(){synchronized (workers) {    if (workers.size() >= super.getMaximumPoolSize()) {      return;    }    Worker worker=new Worker();    Thread thread=getThreadFactory().newThread(worker);    idleWorkers.incrementAndGet();    thread.start();    workers.add(worker);    if (workers.size() > largestPoolSize) {      largestPoolSize=workers.size();    }  }}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  public SuballocatedIntVector(int blocksize){  this(blocksize,NUMBLOCKS_DEFAULT);}  }
class C{  public DOMUnsupportedException(){  this(null,null);}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);}  }
class C{  public static BufferedImage generateRandomImage(int numOfPixels) throws OpenStegoException {  final double ASPECT_RATIO=4.0 / 3.0;  int width=0;  int height=0;  byte[] rgbValue=new byte[3];  BufferedImage image=null;  SecureRandom random=null;  try {    random=SecureRandom.getInstance("SHA1PRNG");    width=(int)Math.ceil(Math.sqrt(numOfPixels * ASPECT_RATIO));    height=(int)Math.ceil(numOfPixels / (double)width);    image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);    for (int x=0; x < width; x++) {      for (int y=0; y < height; y++) {        random.nextBytes(rgbValue);        image.setRGB(x,y,CommonUtil.byteToInt(rgbValue[0]) + (CommonUtil.byteToInt(rgbValue[1]) << 8) + (CommonUtil.byteToInt(rgbValue[2]) << 16));      }    }    return image;  } catch (  NoSuchAlgorithmException nsaEx) {    throw new OpenStegoException(nsaEx);  }}  }
class C{  public static Document stringToDoc(String str) throws IOException {  if (StringUtils.isNotEmpty(str)) {    try {      Reader reader=new StringReader(str);      DocumentBuilder db=DocumentBuilderFactory.newInstance().newDocumentBuilder();      Document doc=db.parse(new InputSource(reader));      reader.close();      return doc;    } catch (    Exception ex) {      log.debug("String: {}",str);      throw new IOException(String.format("Error converting from string to doc %s",ex.getMessage()));    }  } else {    throw new IOException("Error - could not convert empty string to doc");  }}  }
class C{  protected PrivateKey engineGeneratePrivate(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPrivateKeySpec) {      return new DSAPrivateKeyImpl((DSAPrivateKeySpec)keySpec);    }    if (keySpec instanceof PKCS8EncodedKeySpec) {      return new DSAPrivateKeyImpl((PKCS8EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");}  }
class C{  public static String escape(String string){  char c;  String s=string.trim();  StringBuffer sb=new StringBuffer();  int length=s.length();  for (int i=0; i < length; i+=1) {    c=s.charAt(i);    if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {      sb.append('%');      sb.append(Character.forDigit((char)((c >>> 4) & 0x0f),16));      sb.append(Character.forDigit((char)(c & 0x0f),16));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public static boolean intersectLines(Vector2 p1,Vector2 p2,Vector2 p3,Vector2 p4,Vector2 intersection){  float x1=p1.x, y1=p1.y, x2=p2.x, y2=p2.y, x3=p3.x, y3=p3.y, x4=p4.x, y4=p4.y;  float det1=det(x1,y1,x2,y2);  float det2=det(x3,y3,x4,y4);  float det3=det(x1 - x2,y1 - y2,x3 - x4,y3 - y4);  float x=det(det1,x1 - x2,det2,x3 - x4) / det3;  float y=det(det1,y1 - y2,det2,y3 - y4) / det3;  intersection.x=x;  intersection.y=y;  return true;}  }
class C{  public IntrospectionException(String mess){  super(mess);}  }
class C{  public HDBSCAN(DistanceMetric dm,int m_pts,int m_clSize,VectorCollectionFactory<Vec> vcf){  this.dm=dm;  this.m_pts=m_pts;  this.m_clSize=m_clSize;  this.vcf=vcf;}  }
class C{  protected void handlePartialCoverHit(Entity entityTarget,Vector<Report> vPhaseReport,HitData pcHit,Building bldg,int hits,int nCluster,int bldgAbsorbs){  Report r;  if (!bSalvo) {    r=new Report(3405);    r.subject=subjectId;    r.add(toHit.getTableDesc());    r.add(entityTarget.getLocationAbbr(pcHit));    vPhaseReport.addElement(r);    if (weapon.isRapidfire()) {      r.newlines=0;      r=new Report(3225);      r.subject=subjectId;      r.add(numRapidFireHits * 3);      vPhaseReport.add(r);    }  } else {    Report.addNewline(vPhaseReport);  }  r=new Report(3460);  r.subject=subjectId;  r.add(entityTarget.getShortName());  r.add(entityTarget.getLocationAbbr(pcHit));  r.indent(2);  vPhaseReport.addElement(r);  int damagableCoverType=LosEffects.DAMAGABLE_COVER_NONE;  Building coverBuilding=null;  Entity coverDropship=null;  Coords coverLoc=null;  if ((toHit.getCover() == LosEffects.COVER_75RIGHT || toHit.getCover() == LosEffects.COVER_75LEFT) || (toHit.getCover() == LosEffects.COVER_HORIZONTAL && toHit.getDamagableCoverTypeSecondary() != LosEffects.DAMAGABLE_COVER_NONE)) {    int hitLoc=pcHit.getLocation();    if (hitLoc == Mech.LOC_RLEG || hitLoc == Mech.LOC_RT || hitLoc == Mech.LOC_RARM) {      damagableCoverType=toHit.getDamagableCoverTypePrimary();      coverBuilding=toHit.getCoverBuildingPrimary();      coverDropship=toHit.getCoverDropshipPrimary();      coverLoc=toHit.getCoverLocPrimary();    } else {      damagableCoverType=toHit.getDamagableCoverTypeSecondary();      coverBuilding=toHit.getCoverBuildingSecondary();      coverDropship=toHit.getCoverDropshipSecondary();      coverLoc=toHit.getCoverLocSecondary();    }  } else {    damagableCoverType=toHit.getDamagableCoverTypePrimary();    coverBuilding=toHit.getCoverBuildingPrimary();    coverDropship=toHit.getCoverDropshipPrimary();    coverLoc=toHit.getCoverLocPrimary();  }  if (damagableCoverType == LosEffects.DAMAGABLE_COVER_DROPSHIP) {    ToHitData savedToHit=toHit;    int savedAimingMode=waa.getAimingMode();    waa.setAimingMode(IAimingModes.AIM_MODE_NONE);    int savedAimedLocation=waa.getAimedLocation();    waa.setAimedLocation(Entity.LOC_NONE);    boolean savedSalvo=bSalvo;    bSalvo=true;    toHit=new ToHitData(0,"",ToHitData.HIT_NORMAL,Compute.targetSideTable(ae,coverDropship));    int sizeBefore=vPhaseReport.size();    r=new Report(3465);    r.subject=subjectId;    r.add(coverDropship.getShortName());    vPhaseReport.add(r);    handleEntityDamage(coverDropship,vPhaseReport,bldg,hits,nCluster,bldgAbsorbs);    if (vPhaseReport.elementAt(sizeBefore).newlines > 0)     vPhaseReport.elementAt(sizeBefore).newlines--;    while (sizeBefore < vPhaseReport.size()) {      vPhaseReport.elementAt(sizeBefore).indent(3);      sizeBefore++;    }    toHit=savedToHit;    waa.setAimingMode(savedAimingMode);    waa.setAimedLocation(savedAimedLocation);    bSalvo=savedSalvo;  } else   if (damagableCoverType == LosEffects.DAMAGABLE_COVER_BUILDING) {    int nDamage=nDamPerHit * Math.min(nCluster,hits);    Vector<Report> buildingReport=server.damageBuilding(coverBuilding,nDamage," blocks the shot and takes ",coverLoc);    for (    Report report : buildingReport) {      report.subject=subjectId;      report.indent();    }    vPhaseReport.addAll(buildingReport);    Vector<Report> infantryReport=server.damageInfantryIn(coverBuilding,nDamage,coverLoc,wtype.getInfantryDamageClass());    for (    Report report : infantryReport) {      report.indent(2);    }    vPhaseReport.addAll(infantryReport);  }  missed=true;}  }
class C{  public synchronized UniformPair<EventBean[]> assertInvokedAndReset(){  ScopeTestHelper.assertTrue("Listener invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Received more then one invocation",1,getNewDataList().size());  ScopeTestHelper.assertEquals("Received more then one invocation",1,getOldDataList().size());  EventBean[] newEvents=getLastNewData();  EventBean[] oldEvents=getLastOldData();  reset();  return new UniformPair<EventBean[]>(newEvents,oldEvents);}  }
class C{  public Bindings add(String property,JRadioButton[] cs,int defaultValue){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,defaultValue));}  }
class C{  public int hashCode(){  int result=style;  if (source != null)   result^=source.hashCode();  if (unicodeRanges != null)   result^=unicodeRanges.hashCode();  return result;}  }
class C{  public DrawerBuilder withStickyHeader(@NonNull View stickyHeader){  this.mStickyHeaderView=stickyHeader;  return this;}  }
class C{  public static GLUhalfEdge __gl_meshMakeEdge(GLUmesh mesh){  GLUvertex newVertex1=new GLUvertex();  GLUvertex newVertex2=new GLUvertex();  GLUface newFace=new GLUface();  GLUhalfEdge e;  e=MakeEdge(mesh.eHead);  if (e == null)   return null;  MakeVertex(newVertex1,e,mesh.vHead);  MakeVertex(newVertex2,e.Sym,mesh.vHead);  MakeFace(newFace,e,mesh.fHead);  return e;}  }
class C{  public Matrix4x3d invert(){  return invert(this);}  }
class C{  private static String textPropertyFromView(View v){  String ret=null;  if (v instanceof TextView) {    final TextView textV=(TextView)v;    final CharSequence retSequence=textV.getText();    if (null != retSequence) {      ret=retSequence.toString();    }  } else   if (v instanceof ViewGroup) {    final StringBuilder builder=new StringBuilder();    final ViewGroup vGroup=(ViewGroup)v;    final int childCount=vGroup.getChildCount();    boolean textSeen=false;    for (int i=0; i < childCount && builder.length() < MAX_PROPERTY_LENGTH; i++) {      final View child=vGroup.getChildAt(i);      final String childText=textPropertyFromView(child);      if (null != childText && childText.length() > 0) {        if (textSeen) {          builder.append(", ");        }        builder.append(childText);        textSeen=true;      }    }    if (builder.length() > MAX_PROPERTY_LENGTH) {      ret=builder.substring(0,MAX_PROPERTY_LENGTH);    } else     if (textSeen) {      ret=builder.toString();    }  }  return ret;}  }
class C{  public PackageFragmentRootInfo(){  this.nonJavaResources=null;  this.initialized=false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  String baseFileHeader=null;  int row, col;  double x, y, z;  double east, west, north, south;  int i, j;  int progress=0;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double noData=-32768;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  baseFileHeader=args[3];  if (args[4].toLowerCase().contains("double")) {    dataType=WhiteboxRaster.DataType.DOUBLE;  } else   if (args[4].toLowerCase().contains("float")) {    dataType=WhiteboxRaster.DataType.FLOAT;  } else   if (args[4].toLowerCase().contains("int")) {    dataType=WhiteboxRaster.DataType.INTEGER;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    WhiteboxRaster baseImage=new WhiteboxRaster(baseFileHeader,"r");    double resolutionX=baseImage.getCellSizeX();    double resolutionY=baseImage.getCellSizeY();    noData=baseImage.getNoDataValue();    east=baseImage.getEast();    west=baseImage.getWest();    north=baseImage.getNorth();    south=baseImage.getSouth();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,noData);    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            row=(int)(Math.floor((y - south) / resolutionY));            col=(int)(Math.floor((x - west) / resolutionX));            output.setValue(row,col,z);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public boolean needsRollToStand(){  if (countBadLegs() == 0) {    return false;  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void startAutoScroll(int duration){  startAutoScroll(duration,0);}  }
class C{  public IntSet(Set<Integer> set){  this(set.size());  for (  Integer integer : set)   this.add(integer);}  }
class C{  @Override public void updateNClob(int columnIndex,Reader x) throws SQLException {  updateClob(columnIndex,x,-1);}  }
class C{  public PathwayXref addPathwayXRef(PathwayXref xref) throws IllegalArgumentException {  if (xref == null) {    throw new IllegalArgumentException("'xref' must not be null");  }  if (pathwayXRefs == null) {    pathwayXRefs=new HashSet<PathwayXref>();  }  pathwayXRefs.add(xref);  xref.addEntry(this);  return xref;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeFooter(v)) {      if (mObserver != null) {        mObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  static boolean compareNotNull(Database database,Value l,Value r,int compareType){  boolean result;switch (compareType) {case EQUAL:case EQUAL_NULL_SAFE:    result=database.areEqual(l,r);  break;case NOT_EQUAL:case NOT_EQUAL_NULL_SAFE:result=!database.areEqual(l,r);break;case BIGGER_EQUAL:result=database.compare(l,r) >= 0;break;case BIGGER:result=database.compare(l,r) > 0;break;case SMALLER_EQUAL:result=database.compare(l,r) <= 0;break;case SMALLER:result=database.compare(l,r) < 0;break;default :throw DbException.throwInternalError("type=" + compareType);}return result;}  }
class C{  private static Options createOptions(){  Options options=new Options();  options.addOption("v","verbose",false,"verbose");  options.addOption("b","basedir",true,"execution directory");  options.addOption("c","configuration-dir",true,"configuration directory");  options.addOption("t","conformance-test",false,"conformance test");  options.addOption(null,"no-container",false,"don't use containers");  options.addOption(null,"tmp-outdir-prefix",true,"doesn't do anything");  options.addOption(null,"tmpdir-prefix",true,"doesn't do anything");  options.addOption(null,"outdir",true,"doesn't do anything");  options.addOption(null,"quiet",false,"quiet");  options.addOption("h","help",false,"help");  return options;}  }
class C{  public CRootNodeComponent(){  super(new BorderLayout());  createGui();}  }
class C{  public boolean isAlwaysFalse(){  return compareType == Comparison.FALSE;}  }
class C{  public Task create(FlavorCreateSpec flavorCreateSpec) throws IOException {  HttpResponse response=this.restClient.perform(RestClient.Method.POST,getBasePath(),serializeObjectAsJson(flavorCreateSpec));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  private int nextContractChar(int ch){  Vector<EntryPair> list=ordering.getContractValues(ch);  EntryPair pair=list.firstElement();  int order=pair.value;  pair=list.lastElement();  int maxLength=pair.entryName.length();  NormalizerBase tempText=(NormalizerBase)text.clone();  tempText.previous();  key.setLength(0);  int c=tempText.next();  while (maxLength > 0 && c != NormalizerBase.DONE) {    if (Character.isSupplementaryCodePoint(c)) {      key.append(Character.toChars(c));      maxLength-=2;    } else {      key.append((char)c);      --maxLength;    }    c=tempText.next();  }  String fragment=key.toString();  maxLength=1;  for (int i=list.size() - 1; i > 0; i--) {    pair=list.elementAt(i);    if (!pair.fwd)     continue;    if (fragment.startsWith(pair.entryName) && pair.entryName.length() > maxLength) {      maxLength=pair.entryName.length();      order=pair.value;    }  }  while (maxLength > 1) {    c=text.next();    maxLength-=Character.charCount(c);  }  return order;}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  put(index,new Double(value));  return this;}  }
class C{  public DMSCoordPanel(CenterSupport support){  super(support);}  }
class C{  public RoundBorder stroke(Stroke stroke){  this.stroke=stroke;  return this;}  }
class C{  private Server populateServer(Cursor cursor){  Server server=new Server();  server.setTitle(cursor.getString(cursor.getColumnIndex((ServerConstants.TITLE))));  server.setHost(cursor.getString(cursor.getColumnIndex((ServerConstants.HOST))));  server.setPort(cursor.getInt(cursor.getColumnIndex((ServerConstants.PORT))));  server.setPassword(cursor.getString(cursor.getColumnIndex(ServerConstants.PASSWORD)));  server.setId(cursor.getInt(cursor.getColumnIndex((ServerConstants._ID))));  server.setCharset(cursor.getString(cursor.getColumnIndex(ServerConstants.CHARSET)));  String useSSLvalue=cursor.getString(cursor.getColumnIndex(ServerConstants.USE_SSL));  if (useSSLvalue != null && useSSLvalue.equals("1")) {    server.setUseSSL(true);  }  server.setStatus(Status.DISCONNECTED);  Authentication authentication=new Authentication();  authentication.setNickservPassword(cursor.getString(cursor.getColumnIndex(ServerConstants.NICKSERV_PASSWORD)));  authentication.setSaslUsername(cursor.getString(cursor.getColumnIndex(ServerConstants.SASL_USERNAME)));  authentication.setSaslPassword(cursor.getString(cursor.getColumnIndex(ServerConstants.SASL_PASSWORD)));  server.setAuthentication(authentication);  Identity identity=this.getIdentityById(cursor.getInt(cursor.getColumnIndex(ServerConstants.IDENTITY)));  server.setIdentity(identity);  ArrayList<String> channels=this.getChannelsByServerId(server.getId());  server.setAutoJoinChannels(channels);  ArrayList<String> commands=this.getCommandsByServerId(server.getId());  server.setConnectCommands(commands);  return server;}  }
class C{  public double[][] computeLocalFromPreviousObservations(int timeSeries[][]){  int rows=timeSeries.length;  int columns=timeSeries[0].length;  double[][] localPredictive=new double[rows][columns];  if (rows < k + (k - 1)) {    return localPredictive;  }  average=0;  max=0;  min=0;  int[] prevVal=new int[columns];  int[] nextVal=new int[columns];  for (int c=0; c < columns; c++) {    prevVal[c]=0;    nextVal[c]=0;    for (int p=0; p < k; p++) {      prevVal[c]*=numDiscreteValues;      prevVal[c]+=timeSeries[p][c];      nextVal[c]*=numDiscreteValues;      nextVal[c]+=timeSeries[k - 1 + p][c];    }  }  double logTerm=0.0;  for (int r=k; r < rows - (k - 1); r++) {    for (int c=0; c < columns; c++) {      nextVal[c]-=maxShiftedValue[timeSeries[r - 1][c]];      nextVal[c]*=numDiscreteValues;      nextVal[c]+=timeSeries[k - 1 + r][c];      logTerm=((double)jointCount[nextVal[c]][prevVal[c]]) / ((double)nextCount[nextVal[c]] * (double)prevCount[prevVal[c]]);      logTerm*=(double)observations;      localPredictive[r][c]=Math.log(logTerm) / log_base;      average+=localPredictive[r][c];      if (localPredictive[r][c] > max) {        max=localPredictive[r][c];      } else       if (localPredictive[r][c] < min) {        min=localPredictive[r][c];      }      prevVal[c]-=maxShiftedValue[timeSeries[r - k][c]];      prevVal[c]*=numDiscreteValues;      prevVal[c]+=timeSeries[r][c];    }  }  average=average / (double)(columns * (rows - k - (k - 1)));  return localPredictive;}  }
class C{  public static void hideKeyboard(Context context){  try {    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    View currentFocus=((Activity)context).getCurrentFocus();    if (imm != null && currentFocus != null) {      IBinder windowToken=currentFocus.getWindowToken();      if (windowToken != null) {        imm.hideSoftInputFromWindow(windowToken,0);      }    }  } catch (  Exception e) {    Log.e(LOG_TAG,"Can't even hide keyboard " + e.getMessage());  }}  }
class C{  public boolean isGetAllContactsFast(){  return impl.isGetAllContactsFast();}  }
class C{  public static int[][] makeDelayEmbeddingVector(int[] data,int k,int tau,int startKthPoint,int numEmbeddingVectors) throws Exception {  if (startKthPoint < (k - 1) * tau) {    throw new Exception("Start point t=" + startKthPoint + " is too early for a "+ k+ " length embedding vector with delay "+ tau);  }  if (numEmbeddingVectors + startKthPoint > data.length) {    throw new Exception("Too many embedding vectors " + numEmbeddingVectors + " requested for the given startPoint "+ startKthPoint+ " and time series length "+ data.length);  }  int[][] embeddingVectors=new int[numEmbeddingVectors][k];  for (int t=startKthPoint; t < numEmbeddingVectors + startKthPoint; t++) {    for (int i=0; i < k; i++) {      embeddingVectors[t - startKthPoint][i]=data[t - i * tau];    }  }  return embeddingVectors;}  }
class C{  private AccessController(){}  }
class C{  public void warning(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.warning(e);  }}  }
class C{  void trackEvent(Context context,String event){  for (  EventTrackingService service : services) {    if (service.isEnabled()) {      service.logEvent(context,event);    }  }}  }
class C{  protected MetaData modifyGeneratedModelMetaData(PredictionModelMetaData unmodifiedMetaData){  return unmodifiedMetaData;}  }
class C{  public void addDeco(DecoBase deco){  if (!deco.properlyDefined())   throw new RuntimeException(deco.toString());  this.addDeco(deco,true);}  }
class C{  public TvShowUpdateDatasourceTask2(){  super(BUNDLE.getString("update.datasource"));  tvShowList=TvShowList.getInstance();  dataSources=new ArrayList<>(TvShowModuleManager.SETTINGS.getTvShowDataSource());}  }
class C{  public long size(){  return bytes.length;}  }
class C{  public void takePicture(PictureTransaction xact){  if (session != null) {    engine.takePicture(session,xact);  }}  }
class C{  protected void logLayout(VisualTable labels){  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  labels.clear();  double llo=MathLib.safeLog10(m_lo);  double lhi=MathLib.safeLog10(m_hi);  double lspan=lhi - llo;  double d=MathLib.log10(lhi - llo);  int e=(int)Math.floor(d);  int ilo=(int)Math.floor(llo);  int ihi=(int)Math.ceil(lhi);  double start=Math.pow(10,ilo);  double end=Math.pow(10,ihi);  double step=start * Math.pow(10,e);  for (double val, v=start, i=0; v <= end; v+=step, ++i) {    val=MathLib.safeLog10(v);    if (i != 0 && Math.abs(val - Math.round(val)) < 0.0001) {      i=0;      step=10 * step;    }    val=((val - llo) / lspan) * breadth;    if (val < -0.5)     continue;    VisualItem item=labels.addItem();    set(item,val,b);    String label=i == 0 ? m_nf.format(v) : null;    item.set(LABEL,label);    item.setDouble(VALUE,v);  }}  }
class C{  public Env<AttrContext> classEnv(JCClassDecl tree,Env<AttrContext> env){  Env<AttrContext> localEnv=env.dup(tree,env.info.dup(new Scope(tree.sym)));  localEnv.enclClass=tree;  localEnv.outer=env;  localEnv.info.isSelfCall=false;  localEnv.info.lint=null;  return localEnv;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void handleZip64Extra(ZipArchiveEntry ze,long lfhOffset,boolean needsZip64Extra){  if (needsZip64Extra) {    Zip64ExtendedInformationExtraField z64=getZip64Extra(ze);    if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC) {      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));      z64.setSize(new ZipEightByteInteger(ze.getSize()));    } else {      z64.setCompressedSize(null);      z64.setSize(null);    }    if (lfhOffset >= ZIP64_MAGIC) {      z64.setRelativeHeaderOffset(new ZipEightByteInteger(lfhOffset));    }    ze.setExtra();  }}  }
class C{  @Override protected PlotData2D createPlotData(String name) throws Exception {  PlotData2D result;  result=new PlotData2D(m_PlotInstances);  if (m_PlotShapes != null) {    result.setShapeType(m_PlotShapes);  }  result.addInstanceNumberAttribute();  result.setPlotName(name + " (" + m_Instances.relationName()+ ")");  return result;}  }
class C{  private boolean greater(int i,int j){  if (comparator == null) {    return ((Comparable<Key>)pq[i]).compareTo(pq[j]) > 0;  } else {    return comparator.compare(pq[i],pq[j]) > 0;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void process(HashMap<K,Integer> tuple){  if (mergedTuple.isEmpty()) {    mergedTuple.putAll(tuple);    for (    Map.Entry<K,Integer> e : tuple.entrySet()) {      lval=e.getValue();      break;    }  } else {    for (    Map.Entry<K,Integer> e : tuple.entrySet()) {      if ((least && (e.getValue() < lval)) || (!least && (e.getValue() > lval))) {        mergedTuple.clear();        mergedTuple.put(e.getKey(),e.getValue());        break;      }    }  }}  }
class C{  public static void unlockIfRequired(Activity activity,@NonNull UnlockDialogBuilder.UnlockEventListener eventListener){  ActionLockingHelper helper=new ActionLockingHelper(activity);  if (helper.isUnlockRequired())   new UnlockDialogBuilder(activity,eventListener).show(); else   eventListener.onUnlockSuccessful();}  }
class C{  @Override public final void clear(){  int spin=0;  for (; ; ) {    final long writeLock=seqLock.tryWriteLock();    if (writeLock > 0L) {      final int stackTop=this.stackTop.get();      if (stackTop > 0) {        try {          for (int i=0; i < stackTop; i++) {            stack.set(i,null);          }          stackNotFullCondition.signal();          return;        }  finally {          this.stackTop.set(0);        }      } else {        return;      }    }    spin=Condition.progressiveYield(spin);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.372 -0500",hash_original_method="E4C63287FA81E5CD749A3DF00B7871AE",hash_generated_method="A395ADC766F313790DA998F5853068A3") void nameChanged(String newName){  addTaint(newName.getTaint());}  }
class C{  private static boolean isAssignableFrom(Type from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from == null) {    return false;  }  if (to.equals(from)) {    return true;  }  Class<?> clazz=$Type$Types.getRawType(from);  ParameterizedType ptype=null;  if (from instanceof ParameterizedType) {    ptype=(ParameterizedType)from;  }  if (ptype != null) {    Type[] tArgs=ptype.getActualTypeArguments();    TypeVariable<?>[] tParams=clazz.getTypeParameters();    for (int i=0; i < tArgs.length; i++) {      Type arg=tArgs[i];      TypeVariable<?> var=tParams[i];      while (arg instanceof TypeVariable<?>) {        TypeVariable<?> v=(TypeVariable<?>)arg;        arg=typeVarMap.get(v.getName());      }      typeVarMap.put(var.getName(),arg);    }    if (typeEquals(ptype,to,typeVarMap)) {      return true;    }  }  for (  Type itype : clazz.getGenericInterfaces()) {    if (isAssignableFrom(itype,to,new HashMap<String,Type>(typeVarMap))) {      return true;    }  }  Type sType=clazz.getGenericSuperclass();  return isAssignableFrom(sType,to,new HashMap<String,Type>(typeVarMap));}  }
class C{  public void seleccionExpedientesExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  RelacionEntregaVO relacionEntrega=(RelacionEntregaVO)getFromTemporalSession(request,TransferenciasConstants.RELACION_KEY);  List expedientes=(List)getFromTemporalSession(request,TransferenciasConstants.LISTA_EXPEDIENTES);  UnidadDocumentalForm udocForm=(UnidadDocumentalForm)form;  String[] expedientesSeleccionados=udocForm.getExpediente();  if (expedientesSeleccionados != null) {    ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));    GestionRelacionesEntregaBI relacionesBI=services.lookupGestionRelacionesBI();    int nExpedientes=expedientesSeleccionados.length;    List listaExpedientes=new ArrayList();    for (int i=0; i < nExpedientes; i++)     listaExpedientes.add(expedientes.get(Integer.parseInt(expedientesSeleccionados[i])));    try {      Integer orden=(Integer)getFromTemporalSession(request,TransferenciasConstants.ORDEN_UDOC);      int retorno=relacionesBI.crearUnidadesDocumentales(orden,relacionEntrega,listaExpedientes,ElementoCuadroClasificacion.SUBTIPO_UNIDAD_DOCUMENTAL_SIMPLE);      if (retorno == GestionRelacionesEntregaBI.ERROR_RELACION_SIN_DOCS_FISICOS) {        ActionErrors errors=new ActionErrors();        errors.add(ActionErrors.GLOBAL_ERROR,new ActionError(Constants.ERROR_RELACION_SOLO_DOCS_ELECTRONICOS));        ErrorsTag.saveErrors(request,errors);      }      setInTemporalSession(request,TransferenciasConstants.LISTA_EXPEDIENTES_A_ELIMINAR,listaExpedientes);    } catch (    ActionNotAllowedException anae) {      guardarError(request,anae);    }catch (    SistemaTramitadorException ste) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_ERROR,new ActionError(Constants.ERROR_SISTEMA_TRAMITADOR));    }catch (    GestorOrganismosException gte) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_ERROR,new ActionError(Constants.ERROR_GESTOR_ORGANIZACION));    }catch (    NotAvailableException nae) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_ERROR,new ActionError(Constants.ERROR_FUNCIONALIDAD_NO_DISPONIBLE));    }  }  goBackExecuteLogic(mappings,form,request,response);}  }
class C{  public AtomicShortArray(int length,short[] initial){  this.length=length;  this.backingArraySize=(length & 1) + (length >> 1);  if (initial == null) {    this.backingArray=new AtomicIntegerArray(this.backingArraySize);    return;  }  int[] data=new int[this.backingArraySize];  int initIndex=0;  for (int i=0; i < this.backingArraySize; i++) {    if ((initIndex + 1) < initial.length) {      data[i]=key(initial[initIndex],initial[initIndex + 1]);    } else {      data[i]=key(initial[initIndex],(short)0);    }    initIndex+=2;  }  this.backingArray=new AtomicIntegerArray(data);}  }
class C{  public boolean isCurrent(EGLSurface eglSurface){  return mEGLContext.equals(EGL14.eglGetCurrentContext()) && eglSurface.equals(EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW));}  }
class C{  public static final Parameter base(){  return new Parameter(P_MULTI);}  }
class C{  public RangedUri(String baseUri,String referenceUri,long start,long length){  Assertions.checkArgument(baseUri != null || referenceUri != null);  this.baseUri=baseUri;  this.referenceUri=referenceUri;  this.start=start;  this.length=length;}  }
class C{  public void addObjectToLocation(final Object obj,final int x,final int y){  Bag[] fieldx=field[x];  if (fieldx[y] == null)   buildBag(fieldx,y);  fieldx[y].add(obj);}  }
class C{  @WorkerThread public void unsubscribeFromEventWithID(long eventListenerID) throws ParticleCloudException {  eventsDelegate.unsubscribeFromEventWithID(eventListenerID);}  }
class C{  public static double logBase2(double value){  return Math.log(value) / Math.log(2d);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static void loadProperties(boolean reload){  if (reload || s_prop.size() == 0) {    if (isWebStartClient()) {      loadWebStartProperties();    } else {      loadProperties(getFileName(s_client));    }  }}  }
class C{  public static TextView findTextViewInView(String text,View parent){  ArrayList<TextView> textViews=SOLO.getCurrentViews(TextView.class,parent);  for (  TextView textView : textViews) {    String textString=(String)textView.getText();    if (textView.isShown() && textString.endsWith(text)) {      return textView;    }  }  return null;}  }
class C{  public Scanner skip(Pattern pattern){  ensureOpen();  if (pattern == null)   throw new NullPointerException();  clearCaches();  while (true) {    String token=matchPatternInBuffer(pattern);    if (token != null) {      matchValid=true;      position=matcher.end();      return this;    }    if (needInput)     readInput(); else     throw new NoSuchElementException();  }}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  public void writeSample(MediaSample sample){  mParent.receiveData(sample.getData(),"application/*");}  }
class C{  private void open(){  for (  Snapshot snapshot : loadSnapshots()) {    snapshots.put(snapshot.index(),snapshot);  }  if (!snapshots.isEmpty()) {    currentSnapshot=snapshots.lastEntry().getValue();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.SCOPED_ELEMENT__SCOPES:    getScopes().clear();  getScopes().addAll((Collection<? extends Scope>)newValue);return;case SGraphPackage.SCOPED_ELEMENT__NAMESPACE:setNamespace((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((Gene[])(pieces[x])).length;  int runningsum=0;  Gene[] newgenome=new Gene[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((Gene[])(pieces[x])).length);    runningsum+=((Gene[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  public static void main(String[] args){  Main m=new Main();  m.recursiveSync(0);  m.nestedMayThrow(false);  try {    m.nestedMayThrow(true);    System.err.println("nestedThrow(true) did not throw");  } catch (  MyException me) {  }  System.out.println("nestedMayThrow ok");  m.constantLock();  System.out.println("constantLock ok");  m.notExcessiveNesting();  if (false) {    try {      TooDeep.excessiveNesting();      System.err.println("excessiveNesting did not throw");    } catch (    VerifyError ve) {    }  }  System.out.println("excessiveNesting ok");  m.notNested();  System.out.println("notNested ok");  Object obj1=new Object();  Object obj2=new Object();  m.twoPath(obj1,obj2,0);  System.out.println("twoPath ok");  m.triplet(obj1,obj2,0);  System.out.println("triplet ok");}  }
class C{  public boolean isAsync(){  return this.isDeclaredAsync();}  }
class C{  public static float calculateBottom(float left,float top,float right,float targetAspectRatio){  final float width=right - left;  final float bottom=(width / targetAspectRatio) + top;  return bottom;}  }
class C{  public boolean isAdventureModeExempt(){  return this.isAdventureModeExempt;}  }
class C{  public void loadData(Table t,String query,String keyField,Object lock,DataSourceWorker.Listener listener){  DataSourceWorker.Entry e=new DataSourceWorker.Entry(this,t,query,keyField,lock,listener);  DataSourceWorker.submit(e);}  }
class C{  public float[] interpolate(float[] samples){  int pointer=0;  float[] interpolated=new float[samples.length * mPhases.length];  for (  float sample : samples) {    mBuffer[mBufferPointer]=(double)sample;    mBufferPointer++;    mBufferPointer%=mBuffer.length;    for (int x=0; x < mPhases.length; x++) {      interpolated[pointer]=mPhases[x].filter();      pointer++;    }  }  return interpolated;}  }
class C{  public VoronoiDiagramBuilder(){}  }
class C{  public static <T>Lazyable<ArrayList<T>> ofArrayList(){  return new Lazyable<>(new ArrayList<>(),null);}  }
class C{  public LimeTextField(String text,int columns){  super(text,columns);  init();}  }
class C{  public static void eachFile(final File self,final FileType fileType,@ClosureParams(value=SimpleType.class,options="java.io.File") final Closure closure) throws FileNotFoundException, IllegalArgumentException {  checkDir(self);  final File[] files=self.listFiles();  if (files == null)   return;  for (  File file : files) {    if (fileType == FileType.ANY || (fileType != FileType.FILES && file.isDirectory()) || (fileType != FileType.DIRECTORIES && file.isFile())) {      closure.call(file);    }  }}  }
class C{  public boolean lessThanOrEquals(ResolutionSyntax other){  return (this.crossFeedResolution <= other.crossFeedResolution && this.feedResolution <= other.feedResolution);}  }
class C{  public void removeSnapshot() throws BackupException {  logger.debug("Removing snapshot: " + this.snapshotName);  processHelper.exec("Remove the snapshot",lvremoveCmd);}  }
class C{  public NanoXMLDOMOutput(DOMFactory factory){  this.factory=factory;  objectids=new HashMap<Object,String>();  document=new XMLElement();  current=document;  stack=new Stack<XMLElement>();  stack.push(current);}  }
class C{  public static boolean isHeader(Header hdr){  return hdr.getBooleanValue(ZIMAGE,false);}  }
class C{  public JSONObject(){  this.myHashMap=new HashMap<String,Object>();}  }
class C{  public void prependPath(Object referrer,int index){  Reference ref=new Reference(referrer,index);  prependPath(ref);}  }
class C{  E unlink(Node<E> x){  final E element=x.item;  final Node<E> next=x.next;  final Node<E> prev=x.prev;  if (prev == null) {    first=next;  } else {    prev.next=next;    x.prev=null;  }  if (next == null) {    last=prev;  } else {    next.prev=prev;    x.next=null;  }  x.item=null;  size--;  modCount++;  return element;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  public static String rewriteMethodSignature(ClassNameRewriter classNameRewriter,String methodSignature){  if (classNameRewriter != IdentityClassNameRewriter.instance()) {    SignatureParser parser=new SignatureParser(methodSignature);    StringBuilder buf=new StringBuilder();    buf.append('(');    for (Iterator<String> i=parser.parameterSignatureIterator(); i.hasNext(); ) {      buf.append(rewriteSignature(classNameRewriter,i.next()));    }    buf.append(')');    buf.append(rewriteSignature(classNameRewriter,parser.getReturnTypeSignature()));    methodSignature=buf.toString();  }  return methodSignature;}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10){  return new ImmutableCollections.SetN<E>(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10);}  }
class C{  public final void println(String string) throws IOException {  print(string);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline)   flush();}  }
class C{  @Override public void characters(char[] chars,int start,int length){  if (this.handler != null) {    try {      while (0 < length--) {        this.handler.addCharacter(chars[start++]);      }    } catch (    RuntimeException exception) {      handleException(exception);    }  }}  }
class C{  DriverThread(RacingThreadsTest test){  super("DriverThread");  this.test=test;}  }
class C{  protected Instances generateData(int nominal,int numeric,int rows){  Instances result;  TestInstances test;  test=new TestInstances();  test.setClassIndex(TestInstances.NO_CLASS);  test.setNumNominal(nominal);  test.setNumNumeric(numeric);  test.setNumInstances(rows);  try {    result=test.generate();  } catch (  Exception e) {    result=null;  }  return result;}  }
class C{  protected final void resolveClass(Class<?> clazz){  RVMType cls=JikesRVMSupport.getTypeForClass(clazz);  cls.resolve();  cls.instantiate();  cls.initialize();}  }
class C{  public boolean isEmulatingOldNames(){  return isEmulatingOldNames;}  }
class C{  public boolean hasSomethingToCommit(){  return false;}  }
class C{  public void testGuestLoginLogout(){  expectVisible(viewWithText("GU"));  click(viewWithText("Guest User"));  expectVisible(viewWithText(R.string.title_location_list));  click(viewWithText("GU"));  expectVisible(viewWithText("Guest User"));  click(viewWithId(R.id.button_log_out));  waitForProgressFragment();  click(viewWithId(R.id.action_new_user));}  }
class C{  public String toString(DoubleMatrix3D matrix){  StringBuffer buf=new StringBuffer();  boolean oldPrintShape=this.printShape;  this.printShape=false;  for (int slice=0; slice < matrix.slices(); slice++) {    if (slice != 0)     buf.append(sliceSeparator);    buf.append(toString(matrix.viewSlice(slice)));  }  this.printShape=oldPrintShape;  if (printShape)   buf.insert(0,shape(matrix) + "\n");  return buf.toString();}  }
class C{  public static void demo1(){  double[][] values={{3,0,-3.4,0},{5.1,0,+3.0123456789,0},{16.37,0.0,2.5,0},{-16.3,0,-3.012345678E-4,-1},{1236.3456789,0,7,-1.2}};  String[] formats={"%G","%1.10G","%f","%1.2f","%0.2e",null};  int size=formats.length;  DoubleMatrix2D matrix=cern.colt.matrix.DoubleFactory2D.dense.make(values);  String[] strings=new String[size];  String[] sourceCodes=new String[size];  String[] htmlStrings=new String[size];  String[] htmlSourceCodes=new String[size];  for (int i=0; i < size; i++) {    String format=formats[i];    strings[i]=new Formatter(format).toString(matrix);    sourceCodes[i]=new Formatter(format).toSourceCode(matrix);  }  System.out.println("original:\n" + new Formatter().toString(matrix));  for (int i=0; i < size; i++) {  }  for (int i=0; i < size; i++) {    System.out.println("\nstring(" + formats[i] + "):\n"+ strings[i]);    System.out.println("\nsourceCode(" + formats[i] + "):\n"+ sourceCodes[i]);  }}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=(k1 << 15) | (k1 >>> 17);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  public boolean isFullyDepreciated(){  Object oo=get_Value(COLUMNNAME_IsFullyDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onRedButtonClick(View v){  if (isSubscribed()) {    centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.redbutton));    update();  } else {    generateSubscribeDialog();  }}  }
class C{  public static Attribute createSpecialAttribute(ExampleSet exampleSet,String name,int valueType){  Attribute attribute=AttributeFactory.createAttribute(name,valueType);  exampleSet.getExampleTable().addAttribute(attribute);  exampleSet.getAttributes().setSpecialAttribute(attribute,name);  return attribute;}  }
class C{  public void resize(int width,int height){  camera.setAspect(width / (double)height);  camera.resize(width,height);  updateCrosshair();  centerScale.setTranslation(camera.getWidth() / 2.0,camera.getHeight() / 2.0,0);  centerScale.updateGeometricState(0);  changed.set(true);}  }
class C{  public void addImportName(String importName,int line){  if (importName.startsWith(StandardDefs.CLASS_VECTOR + ".<")) {    addImportName(importName.substring(StandardDefs.CLASS_VECTOR.length() + 2,importName.length() - 1),line);  } else   if (importName.startsWith(StandardDefs.CLASS_VECTOR_SHORTNAME + ".<")) {    addImportName(importName.substring(StandardDefs.CLASS_VECTOR_SHORTNAME.length() + 2,importName.length() - 1),line);  } else {    if (!importName.equals("*") && !StandardDefs.isBuiltInTypeName(importName)) {      (importNames != null ? importNames : (importNames=new TreeSet<NameInfo>())).add(new NameInfo(importName,line));    }  }}  }
class C{  protected void drawItemPass1(Graphics2D x_graphics,Rectangle2D x_dataArea,PlotRenderingInfo x_info,XYPlot x_plot,ValueAxis x_domainAxis,ValueAxis x_rangeAxis,XYDataset x_dataset,int x_series,int x_item,CrosshairState x_crosshairState){  Shape l_entityArea=null;  EntityCollection l_entities=null;  if (null != x_info) {    l_entities=x_info.getOwner().getEntityCollection();  }  Paint l_seriesPaint=getItemPaint(x_series,x_item);  Stroke l_seriesStroke=getItemStroke(x_series,x_item);  x_graphics.setPaint(l_seriesPaint);  x_graphics.setStroke(l_seriesStroke);  PlotOrientation l_orientation=x_plot.getOrientation();  RectangleEdge l_domainAxisLocation=x_plot.getDomainAxisEdge();  RectangleEdge l_rangeAxisLocation=x_plot.getRangeAxisEdge();  double l_x0=x_dataset.getXValue(x_series,x_item);  double l_y0=x_dataset.getYValue(x_series,x_item);  double l_x1=x_domainAxis.valueToJava2D(l_x0,x_dataArea,l_domainAxisLocation);  double l_y1=x_rangeAxis.valueToJava2D(l_y0,x_dataArea,l_rangeAxisLocation);  if (getShapesVisible()) {    Shape l_shape=getItemShape(x_series,x_item);    if (l_orientation == PlotOrientation.HORIZONTAL) {      l_shape=ShapeUtilities.createTranslatedShape(l_shape,l_y1,l_x1);    } else {      l_shape=ShapeUtilities.createTranslatedShape(l_shape,l_x1,l_y1);    }    if (l_shape.intersects(x_dataArea)) {      x_graphics.setPaint(getItemPaint(x_series,x_item));      x_graphics.fill(l_shape);    }    l_entityArea=l_shape;  }  if (null != l_entities) {    if (null == l_entityArea) {      l_entityArea=new Rectangle2D.Double((l_x1 - 2),(l_y1 - 2),4,4);    }    String l_tip=null;    XYToolTipGenerator l_tipGenerator=getToolTipGenerator(x_series,x_item);    if (null != l_tipGenerator) {      l_tip=l_tipGenerator.generateToolTip(x_dataset,x_series,x_item);    }    String l_url=null;    XYURLGenerator l_urlGenerator=getURLGenerator();    if (null != l_urlGenerator) {      l_url=l_urlGenerator.generateURL(x_dataset,x_series,x_item);    }    XYItemEntity l_entity=new XYItemEntity(l_entityArea,x_dataset,x_series,x_item,l_tip,l_url);    l_entities.add(l_entity);  }  if (isItemLabelVisible(x_series,x_item)) {    drawItemLabel(x_graphics,l_orientation,x_dataset,x_series,x_item,l_x1,l_y1,(l_y1 < 0.0));  }  int l_domainAxisIndex=x_plot.getDomainAxisIndex(x_domainAxis);  int l_rangeAxisIndex=x_plot.getRangeAxisIndex(x_rangeAxis);  updateCrosshairValues(x_crosshairState,l_x0,l_y0,l_domainAxisIndex,l_rangeAxisIndex,l_x1,l_y1,l_orientation);  if (0 == x_item) {    return;  }  double l_x2=x_domainAxis.valueToJava2D(x_dataset.getXValue(x_series,(x_item - 1)),x_dataArea,l_domainAxisLocation);  double l_y2=x_rangeAxis.valueToJava2D(x_dataset.getYValue(x_series,(x_item - 1)),x_dataArea,l_rangeAxisLocation);  Line2D l_line=null;  if (PlotOrientation.HORIZONTAL == l_orientation) {    l_line=new Line2D.Double(l_y1,l_x1,l_y2,l_x2);  } else   if (PlotOrientation.VERTICAL == l_orientation) {    l_line=new Line2D.Double(l_x1,l_y1,l_x2,l_y2);  }  if ((null != l_line) && l_line.intersects(x_dataArea)) {    x_graphics.setPaint(getItemPaint(x_series,x_item));    x_graphics.setStroke(getItemStroke(x_series,x_item));    x_graphics.draw(l_line);  }}  }
class C{  public void run(){  interpreter.callHandler(function,arguments);}  }
class C{  public static int dipToPx(DisplayMetrics displayMetrics,float dip){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,displayMetrics);}  }
class C{  protected String escapeStringValue(String value){  String result=value;  for (Iterator<Map.Entry<String,String>> it=charSequencesToEscape.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<String,String> entry=(Map.Entry<String,String>)it.next();    result=StringUtils.replace(result,entry.getKey(),entry.getValue());  }  return result;}  }
class C{  protected boolean internalExecute(boolean sendOutParams) throws SQLException {  boolean canExecute=true;  for (  boolean anIsParamSet : isParamSet) {    canExecute=canExecute && anIsParamSet;  }  if (!canExecute)   throw new FBMissingParameterException("Not all parameters were set.",isParamSet);synchronized (getSynchronizationObject()) {    flushFields();    try {      fbStatement.execute(fieldValues);      return currentStatementResult == StatementResult.RESULT_SET;    } catch (    SQLException e) {      currentStatementResult=StatementResult.NO_MORE_RESULTS;      throw e;    }  }}  }
class C{  protected ModbusSlave(int port) throws ModbusException {  this(ModbusSlaveType.UDP,port,0,null);}  }
class C{  public Builder trustCertificates(KeyStore trustStore) throws GeneralSecurityException {  SSLContext sslContext=SslUtils.getTlsSslContext();  SslUtils.initSslContext(sslContext,trustStore,SslUtils.getPkixTrustManagerFactory());  return setSslSocketFactory(sslContext.getSocketFactory());}  }
class C{  public Throwable(String detailMessage){  this();  this.detailMessage=detailMessage;}  }
class C{  public T last(){  QuantumFluxCursor<T> cursor=queryAsCursor();  try {    if (cursor.moveToLast()) {      return cursor.inflate();    } else     return null;  }  finally {    cursor.close();  }}  }
class C{  public String toString(){  LinkedListNode node=head.next;  StringBuilder buf=new StringBuilder();  while (node != head) {    buf.append(node.toString()).append(", ");    node=node.next;  }  return buf.toString();}  }
class C{  public char first(){  if (start == end) {    return DONE;  }  offset=start;  return string.charAt(offset);}  }
class C{  public void drop(){  if (openHandle != null) {    try {      openHandle.close();    } catch (    SQLException e) {      System.err.println("WARNING: Cannot close database connection");      e.printStackTrace(System.err);    }    openHandle=null;    database=null;  }}  }
class C{  public boolean hasNextRegex(Pattern pattern){  return hasNext() && pattern.matcher(remaining).find();}  }
class C{  @Override public void handleMouseMoved(ChartCanvas canvas,MouseEvent e){}  }
class C{  public Rest readTimeoutSeconds(final Integer readTimeoutSeconds){  this.readTimeoutSeconds=readTimeoutSeconds;  return this;}  }
class C{  public FastStringBuffer append(long n){  append(String.valueOf(n));  return this;}  }
class C{  protected static Class<?> unaryNumericResultType(final Object value){  Class<?> type=void.class;  if (value instanceof Byte || value instanceof Short || value instanceof Character|| value instanceof Integer) {    type=Integer.class;  } else   if (value instanceof Long) {    type=Long.class;  }  return type;}  }
class C{  public void load(String nameValuePairs,boolean doSubstitutions){  Properties props=new Properties();  boolean parsingKey=true;  int index=0;  StringBuffer keyBuf=new StringBuffer();  StringBuffer valueBuf=new StringBuffer();  while (index < nameValuePairs.length()) {    char next=nameValuePairs.charAt(index++);    if (parsingKey && next == '=') {      parsingKey=false;    } else     if (parsingKey) {      keyBuf.append(next);    } else     if (!parsingKey && next == ';') {      String key=keyBuf.toString().trim();      String value=valueBuf.toString().trim();      props.setProperty(key,value);      parsingKey=true;      keyBuf=new StringBuffer();      valueBuf=new StringBuffer();    } else {      valueBuf.append(next);    }  }  String key=keyBuf.toString().trim();  String value=valueBuf.toString().trim();  if (key.length() > 0 && value.length() > 0)   props.setProperty(key,value);  if (doSubstitutions)   substituteSystemValues(props);  load(props);}  }
class C{  public static double[][] fastICA(double[][] input,int maxIterations,double epsilon,int noComponents){  whitening(input);  int m=Matrix.getNumOfRows(whitenedVectors);  int n=Matrix.getNumOfColumns(whitenedVectors);  if (m > noComponents) {    noComponents=m;  }  B=Matrix.random(noComponents,m);  B=Matrix.mult(powerSymmMatrix(Matrix.square(B),-0.5),B);  for (int k=1; k < maxIterations; k++) {    double[][] oldB=Matrix.clone(B);    for (int c=0; c < noComponents; c++) {      double[] prevW=Matrix.getVecOfRow(oldB,c);      double[] firstPart=new double[m];      for (int j=0; j < n; j++) {        double one=Vector.dot(prevW,Matrix.getVecOfCol(whitenedVectors,j));        one=Math.pow(one,3);        double[] two=Vector.scale(one,Matrix.getVecOfCol(whitenedVectors,j));        firstPart=Vector.add(firstPart,two);      }      firstPart=Vector.scale((1.0 / (double)n),firstPart);      double[] secondPart=Vector.scale(-3,prevW);      double[] w=Vector.add(firstPart,secondPart);      for (int j=0; j < m; ++j) {        B[c][j]=w[j];      }    }    B=Matrix.mult(powerSymmMatrix(Matrix.square(B),-0.5),B);    double matrixDelta=deltaMatrices(B,oldB);    if (matrixDelta < epsilon) {      break;    }  }  double[][] sepMatrix=Matrix.mult(B,whiteningMatrix);  return Matrix.mult(sepMatrix,input);}  }
class C{  public void handleMouseDoubleClick(MouseEvent e){}  }
class C{  public static ByteIndex createIndex(final long length){  if (length < 0) {    throw new NegativeArraySizeException("Negative length=" + length);  }  if (length <= ByteIndex.MAX_LENGTH) {    return new ByteArray(length);  } else {    return new ByteChunks(length);  }}  }
class C{  public TerminateSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public static TableView createTempView(Session session,User owner,String name,Query query,Query topQuery){  Schema mainSchema=session.getDatabase().getSchema(Constants.SCHEMA_MAIN);  String querySQL=query.getPlanSQL();  TableView v=new TableView(mainSchema,0,name,querySQL,query.getParameters(),null,session,false);  if (v.createException != null) {    throw v.createException;  }  v.setTopQuery(topQuery);  v.setOwner(owner);  v.setTemporary(true);  return v;}  }
class C{  public DoubleMatrix1D like1D(int size){  return new DenseDoubleMatrix1D(size);}  }
class C{  public boolean isRestartOnCrash(){  return restartOnCrash;}  }
class C{  @Override public boolean contains(Object o){  return indexes.keySet().contains(o);}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder("v");  s.append(version);  s.append(" block: \n");  s.append("   previous block: ");  s.append(getPrevBlockHash());  s.append("\n");  s.append("   merkle root: ");  s.append(getMerkleRoot());  s.append("\n");  s.append("   time: [");  s.append(time);  s.append("] ");  s.append(new Date(time * 1000));  s.append("\n");  s.append("   difficulty target (nBits): ");  s.append(difficultyTarget);  s.append("\n");  s.append("   nonce: ");  s.append(nonce);  s.append("\n");  if (transactions != null && transactions.size() > 0) {    s.append("   with ").append(transactions.size()).append(" transaction(s):\n");    for (    Transaction tx : transactions) {      s.append(tx.toString());    }  }  return s.toString();}  }
class C{  public void release(){  dispatch.safeRelease();}  }
class C{  public ArrayExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  private String prepareWhere(String where){  where=combineWhere(where,"LocalCopyType != 300");  if (mOfflineOnly)   where=combineWhere(where,"LocalCopyPath IS NOT NULL");  if (!TextUtils.isEmpty(mSearchKey)) {    String searchKey=DatabaseUtils.sqlEscapeString("%" + mSearchKey + "%");    where=combineWhere(where,"(" + COLUMN_ARTIST + " LIKE "+ searchKey+ ")");  }  return where;}  }
class C{  public static double[] multiply(double a[],double w){  double c[]=new double[a.length];  for (int j=0; j < a.length; j++) {    c[j]=a[j] * w;  }  return c;}  }
class C{  public Trie buildTrie(String data){  return buildTrie(new String[]{data});}  }
class C{  public boolean isStaticClass(){  return redirect().staticClass;}  }
class C{  public static I18N instance(){  return theInstance;}  }
class C{  @Override public void update(BasicCamera camera){  if (anchorPoint != null) {    anchorPoint.update(camera);  }  if (currentPoint != null) {    currentPoint.update(camera);  }  coordDisplayChanged();}  }
class C{  private boolean moveToEnd(int direction){  resetHintTime();  final boolean result;  if (mNodeSearch.hasMatch()) {    result=mNodeSearch.nextResult(direction);    while (mNodeSearch.nextResult(direction)) {    }  } else   if (direction == NodeFocusFinder.SEARCH_BACKWARD) {    result=mContext.getCursorController().jumpToTop();  } else {    result=mContext.getCursorController().jumpToBottom();  }  mHasNavigated=true;  return result;}  }
class C{  protected void deleteImage(){  if (mBitmap != null) {    if (PLUtils.getAndroidVersion() < 3.0f && !mBitmap.isRecycled())     mBitmap.recycle();    mBitmap=null;    mIsRecycled=true;    mIsLoaded=false;  }}  }
class C{  public LogRecord write() throws ReplicatorException {  LogRecord logRecord=new LogRecord(file,-1,checkCRC);  try {    DataOutputStream dos=new DataOutputStream(logRecord.write());    dos.writeByte(LogRecord.EVENT_ROTATE);    dos.writeLong(index);    dos.flush();    logRecord.done();    if (checkCRC)     logRecord.storeCrc(LogRecord.CRC_TYPE_32);  } catch (  IOException e) {    throw new THLException("Error writing log record data: " + e.getMessage(),e);  } finally {    logRecord.done();  }  return logRecord;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.200 -0500",hash_original_method="5B87AA85F76367E84F6A87186CEADEE5",hash_generated_method="216E1F74EE288CB17CA845827E206614") public SslError doHandshakeAndValidateServerCertificates(HttpsConnection connection,SSLSocket sslSocket,String domain) throws IOException {  SSLSession sslSession=sslSocket.getSession();  if (!sslSession.isValid()) {    closeSocketThrowException(sslSocket,"failed to perform SSL handshake");  }  Certificate[] peerCertificates=sslSocket.getSession().getPeerCertificates();  if (peerCertificates == null || peerCertificates.length == 0) {    closeSocketThrowException(sslSocket,"failed to retrieve peer certificates");  } else {    if (connection != null) {      if (peerCertificates[0] != null) {        connection.setCertificate(new SslCertificate((X509Certificate)peerCertificates[0]));      }    }  }  return verifyServerDomainAndCertificates((X509Certificate[])peerCertificates,domain,"RSA");}  }
class C{  public boolean isUseMipMaps(){  return this.useMipMaps;}  }
class C{  @Override public boolean isPubKeyOnly(){  return super.isPubKeyOnly() && (parent == null || parent.isPubKeyOnly());}  }
class C{  public MaskWriteRegisterRequest(){  super();  setFunctionCode(Modbus.MASK_WRITE_REGISTER);  setDataLength(6);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return PATH;case 2:  return BLOCK_SIZE_BYTES;case 3:return TOTAL_LBA_BLOCKS;case 4:return TOTAL_SPACE;default :return null;}}  }
class C{  public CouldntSaveDataException(final Exception exception){  super(exception);  m_stacktrace=exception.getStackTrace();}  }
class C{  public void resetViews(){  resetViews(null);}  }
class C{  public final void popCurrentNodeAndExpression(){  m_currentNodes.quickPop(1);  m_currentExpressionNodes.quickPop(1);}  }
class C{  public String generateSdp(String setup,String[] acceptTypes,String[] acceptWrappedTypes){  int msrpPort;  if ("active".equals(setup)) {    msrpPort=9;  } else {    msrpPort=getMsrpMgr().getLocalMsrpPort();  }  String ntpTime=SipUtils.constructNTPtime(System.currentTimeMillis());  String ipAddress=getDialogPath().getSipStack().getLocalIpAddress();  String addr=SdpUtils.formatAddressType(ipAddress);  StringBuilder sdp=new StringBuilder("v=0").append(SipUtils.CRLF).append("o=- ").append(ntpTime).append(" ").append(ntpTime).append(" ").append(addr).append(SipUtils.CRLF).append("s=-").append(SipUtils.CRLF).append("c=").append(addr).append(SipUtils.CRLF).append("t=0 0").append(SipUtils.CRLF).append("m=message ").append(msrpPort).append(" ").append(getMsrpMgr().getLocalSocketProtocol()).append(" *").append(SipUtils.CRLF).append("a=setup:").append(setup).append(SipUtils.CRLF).append("a=path:").append(getMsrpMgr().getLocalMsrpPath()).append(SipUtils.CRLF).append("a=max-size:").append(getMaxMessageSize()).append(SipUtils.CRLF);  if (acceptTypes != null && acceptTypes.length > 0) {    StringBuilder types=new StringBuilder();    types.append(acceptTypes[0]);    for (int i=1; i < acceptTypes.length; i++) {      types.append(" ").append(acceptTypes[i]);    }    sdp.append("a=accept-types:").append(types).append(SipUtils.CRLF);  } else {    sdp.append("a=accept-types:").append(GenericSipMsrpSession.MIME_TYPE).append(SipUtils.CRLF);  }  if (acceptWrappedTypes != null && acceptWrappedTypes.length > 0) {    StringBuilder types=new StringBuilder();    types.append(acceptWrappedTypes[0]);    for (int i=1; i < acceptWrappedTypes.length; i++) {      types.append(" ").append(acceptWrappedTypes[i]);    }    sdp.append("a=accept-wrapped-types:").append(types).append(SipUtils.CRLF);  }  sdp.append("a=sendrecv").append(SipUtils.CRLF);  return sdp.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  static double ensureNonNegative(double value){  checkArgument(!isNaN(value));  if (value > 0.0) {    return value;  } else {    return 0.0;  }}  }
class C{  public static int spToPx(Context context,float sp){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(sp * fontScale + 0.5f);}  }
class C{  @SuppressWarnings("rawtypes") public Iterator<T> preorder(){  if (root == null) {    return empty();  }  return new ValueExtractor<T>(new PreorderTraversal(root));}  }
class C{  public static Typeface ostrichBold(Context context){  return FontSourceProcessor.process(R.raw.ostrich_bold,context);}  }
class C{  public void load(BufferedReader reader) throws IOException {  String line=null;  outer:   while ((line=reader.readLine()) != null) {    String[] tokens=line.trim().split("\\s+");    for (int i=0; i < tokens.length; i++) {      int id=Integer.parseInt(tokens[i]);      if (id == -1) {        break outer;      } else {        nodes.add(id);      }    }  }}  }
class C{  public int computeStringWidth(SynthContext ss,Font font,FontMetrics metrics,String text){  return SwingUtilities2.stringWidth(ss.getComponent(),metrics,text);}  }
class C{  private static boolean checkUserPermissions(ExportGroup group,PermissionsHelper permissionsHelper,StorageOSUser user) throws DatabaseException {  if (permissionsHelper == null || user == null) {    return true;  }  if (permissionsHelper.userHasGivenRole(user,null,Role.SYSTEM_MONITOR,Role.SYSTEM_ADMIN)) {    return true;  } else {    Project project=permissionsHelper.getObjectById(group.getProject().getURI(),Project.class);    return project != null && (permissionsHelper.userHasGivenRole(user,project.getTenantOrg().getURI(),Role.TENANT_ADMIN) || permissionsHelper.userHasGivenACL(user,project.getId(),ACL.ANY));  }}  }
class C{  public void rotateY(double degrees){  Transform3D other=new Transform3D();  other.rotY(degrees * Math.PI / 180);  transform(other);}  }
class C{  public SessionChannel createSessionChannel(ApplicationDescription applicationDescription) throws ServiceResultException {  SecureChannel channel=createSecureChannel(applicationDescription);  try {    Session session=createSession(channel);    SessionChannel sessionChannel=session.createSessionChannel(channel,this);    return sessionChannel;  } catch (  ServiceResultException se) {    channel.closeAsync();    throw se;  }}  }
class C{  private void reverseAfter(int i){  int start=i + 1;  int end=n - 1;  while (start < end) {    int t=index[start];    index[start]=index[end];    index[end]=t;    start++;    end--;  }}  }
class C{  public DiskRegionVersionVector(){  super();}  }
class C{  static public ResourceState replicatorStateToResourceState(String state){  if (state.startsWith(SERVICE_STATE_ONLINE))   return ResourceState.ONLINE; else   if (state.startsWith(SERVICE_STATE_OFFLINE)) {    if (state.equals(SERVICE_STATE_ERROR)) {      return ResourceState.SUSPECT;    } else     if (state.equals(SERVICE_STATE_BACKUP)) {      return ResourceState.BACKUP;    } else {      return ResourceState.OFFLINE;    }  } else   if (state.contains(SERVICE_STATE_SYNCHRONIZING)) {    return ResourceState.SYNCHRONIZING;  } else   if (state.startsWith(SERVICE_STATE_GOING_ONLINE)) {    if (state.contains(SERVICE_STATE_RESTORING)) {      return ResourceState.RESTORING;    } else {      return ResourceState.UNKNOWN;    }  } else   return ResourceState.UNKNOWN;}  }
class C{  public static boolean sslHandshake(InputStream inputStream,OutputStream outputStream) throws IOException {  byte data[]=new byte[SSL_SERVER_HANDSHAKE.length];  outputStream.write(SSL_CLIENT_HANDSHAKE);  inputStream.read(data);  outputStream=null;  inputStream=null;  if (Arrays.equals(data,SSL_SERVER_HANDSHAKE)) {    return true;  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public UF6(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public HttpException(final HttpException cause){  this(cause.statusCode,cause.getMessage());}  }
class C{  private boolean createTableDataRow(ResultSet rs,MTable mTable){  StringBuffer insert=new StringBuffer("INSERT INTO ").append(mTable.getTableName()).append(" (");  StringBuffer values=new StringBuffer();  MColumn[] columns=mTable.getColumns(false);  for (int i=0; i < columns.length; i++) {    if (i != 0) {      insert.append(",");      values.append(",");    }    MColumn column=columns[i];    String columnName=column.getColumnName();    insert.append(columnName);    int dt=column.getAD_Reference_ID();    try {      Object value=rs.getObject(columnName);      if (rs.wasNull()) {        values.append("NULL");      } else       if (columnName.endsWith("_ID") || DisplayType.isNumeric(dt) || (DisplayType.isID(dt) && !columnName.equals("AD_Language"))) {        BigDecimal bd=rs.getBigDecimal(columnName);        String s=m_dbTarget.TO_NUMBER(bd,dt);        values.append(s);      } else       if (DisplayType.isDate(dt)) {        Timestamp ts=rs.getTimestamp(columnName);        String tsString=m_dbTarget.TO_DATE(ts,dt == DisplayType.Date);        values.append(tsString);      } else       if (DisplayType.isLOB(dt)) {        values.append("NULL");      } else       if (DisplayType.isText(dt) || dt == DisplayType.YesNo || dt == DisplayType.List || dt == DisplayType.Button || columnName.equals("AD_Language")) {        String s=rs.getString(columnName);        values.append(DB.TO_STRING(s));      } else {        log.warning("Unknown DisplayType=" + dt + " - "+ value+ " ["+ value.getClass().getName()+ "]");        values.append("NuLl");      }    } catch (    Exception e) {      log.log(Level.SEVERE,columnName,e);    }  }  insert.append(") VALUES (").append(values).append(")");  return executeCommands(new String[]{insert.toString()},m_conn,false,false);}  }
class C{  public void createSupply(MWMInOutBoundLine boundline,BigDecimal qtySupply){  MProduct product=MProduct.get(boundline.getCtx(),boundline.getM_Product_ID());  if (product.isBOM()) {    createMO(boundline,product,qtySupply);  } else   if (product.isPurchased()) {    createRequisition(boundline,product,qtySupply);  }}  }
class C{  public static String printDate(Date date){  if (date == null) {    return "";  }  return Helper.printTimestamp(new Timestamp(date.getTime()));}  }
class C{  public StempelStemmer(InputStream stemmerTable) throws IOException {  this(load(stemmerTable));}  }
class C{  protected static void analyzeEqualsNode(ExprEqualsNode equalsNode,QueryGraph queryGraph,boolean isOuterJoin){  if ((equalsNode.getChildNodes()[0] instanceof ExprIdentNode) && (equalsNode.getChildNodes()[1] instanceof ExprIdentNode)) {    ExprIdentNode identNodeLeft=(ExprIdentNode)equalsNode.getChildNodes()[0];    ExprIdentNode identNodeRight=(ExprIdentNode)equalsNode.getChildNodes()[1];    if (identNodeLeft.getStreamId() != identNodeRight.getStreamId()) {      queryGraph.addStrictEquals(identNodeLeft.getStreamId(),identNodeLeft.getResolvedPropertyName(),identNodeLeft,identNodeRight.getStreamId(),identNodeRight.getResolvedPropertyName(),identNodeRight);    }    return;  }  if (isOuterJoin) {    return;  }  int indexedStream=-1;  ExprIdentNode indexedPropExpr=null;  ExprNode exprNodeNoIdent=null;  if (equalsNode.getChildNodes()[0] instanceof ExprIdentNode) {    indexedPropExpr=(ExprIdentNode)equalsNode.getChildNodes()[0];    indexedStream=indexedPropExpr.getStreamId();    exprNodeNoIdent=equalsNode.getChildNodes()[1];  } else   if (equalsNode.getChildNodes()[1] instanceof ExprIdentNode) {    indexedPropExpr=(ExprIdentNode)equalsNode.getChildNodes()[1];    indexedStream=indexedPropExpr.getStreamId();    exprNodeNoIdent=equalsNode.getChildNodes()[0];  }  if (indexedStream == -1) {    return;  }  EligibilityDesc eligibility=EligibilityUtil.verifyInputStream(exprNodeNoIdent,indexedStream);  if (!eligibility.getEligibility().isEligible()) {    return;  }  if (eligibility.getEligibility() == Eligibility.REQUIRE_NONE) {    queryGraph.addUnkeyedExpression(indexedStream,indexedPropExpr,exprNodeNoIdent);  } else {    queryGraph.addKeyedExpression(indexedStream,indexedPropExpr,eligibility.getStreamNum(),exprNodeNoIdent);  }}  }
class C{  public MemberDefinition makeMemberDefinition(Environment origEnv,long where,ClassDefinition clazz,String doc,int modifiers,Type type,Identifier name,IdentifierToken argNames[],IdentifierToken expIds[],Object value){  if (env == null)   return null;  return env.makeMemberDefinition(origEnv,where,clazz,doc,modifiers,type,name,argNames,expIds,value);}  }
class C{  public WaitOnRebuildResult waitOnRebuildCompletion(String virtualVolumeName) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  for (int retryCount=0; retryCount < VPlexApiConstants.REBUILD_WAIT_RETRY_COUNT; retryCount++) {    try {      VPlexVirtualVolumeInfo virtualVolume=discoveryMgr.findVirtualVolume(virtualVolumeName,true);      if (!VPlexVirtualVolumeInfo.Locality.distributed.name().equals(virtualVolume.getLocality())) {        s_logger.error("Not a distributed device: {}",virtualVolumeName);        return WaitOnRebuildResult.INVALID_REQUEST;      }      Map<String,Object> ddProperties=getDistributedDeviceProperties(virtualVolume.getSupportingDevice());      String rebuildStatus=ddProperties.get(VPlexApiConstants.REBUILD_STATUS_ATT_KEY).toString();      if (VPlexApiConstants.REBUILD_STATUS_DONE.equalsIgnoreCase(rebuildStatus)) {        s_logger.info("Rebuild complete for volume: {}",virtualVolumeName);        return WaitOnRebuildResult.SUCCESS;      }      if (rebuildStatus.equalsIgnoreCase(VPlexApiConstants.REBUILD_STATUS_ERROR)) {        s_logger.info("Rebuild failed for volume: {}",virtualVolumeName);        return WaitOnRebuildResult.FAILED;      }      s_logger.info("Waiting on rebuild to complete for volume: {}",virtualVolumeName);      VPlexApiUtils.pauseThread(VPlexApiConstants.REBUILD_WAIT_SLEEP_TIME_MS);    } catch (    Exception e) {      s_logger.warn("An exception occured checking rebuild status: {}. Retrying",e.getMessage(),e);      VPlexApiUtils.pauseThread(VPlexApiConstants.REBUILD_WAIT_SLEEP_TIME_MS);    }  }  s_logger.error("Rebuild timed out for volume: {}",virtualVolumeName);  return WaitOnRebuildResult.TIMED_OUT;}  }
class C{  public static <E>List<E> singletonList(E object){  return new SingletonList<E>(object);}  }
class C{  public BasicVisualizationServer(Layout<V,E> layout,Dimension preferredSize){  this(new DefaultVisualizationModel<V,E>(layout,preferredSize),preferredSize);}  }
class C{  public void testConstrBI(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  BigDecimal aNumber=new BigDecimal(bA);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",0,aNumber.scale());  try {    new BigDecimal((BigInteger)null);    fail("No NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  private static void addHeadMinuta(Locale locale,Element parent){  Element headMinuta=parent.addElement(XML_HEADMINUTA_TEXT);  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL11)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL12)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL13)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL8)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL14)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL9)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.873 -0500",hash_original_method="51B09D41A46E89A1CD0754E5C1F0D1B8",hash_generated_method="4DB41399A5FE1C6CA2B074D6BDF7F6D9") public void readSet(ASN1Set set) throws IOException {  if (tag != ASN1Constants.TAG_C_SET) {    throw expected("set");  }  throw new ASN1Exception("Decoding ASN.1 Set type is not supported");}  }
class C{  public ArrayList<Media> formatForPopcorn(ArrayList<Media> existingList){  ArrayList<LinkedTreeMap<String,Object>> movies=new ArrayList<>();  if (data != null) {    movies=(ArrayList<LinkedTreeMap<String,Object>>)data.get("movies");  }  for (  LinkedTreeMap<String,Object> item : movies) {    Movie movie=new Movie(sMediaProvider,sSubsProvider);    movie.videoId=(String)item.get("imdb_code");    movie.imdbId=movie.videoId;    int existingItem=isInResults(existingList,movie.videoId);    if (existingItem == -1) {      movie.title=(String)item.get("title_english");      Double year=(Double)item.get("year");      movie.year=Integer.toString(year.intValue());      movie.rating=item.get("rating").toString();      movie.genre=((ArrayList<String>)item.get("genres")).get(0);      movie.image=(String)item.get("large_cover_image");      movie.headerImage=(String)item.get("background_image_original");      movie.trailer="https://youtube.com/watch?v=" + item.get("yt_trailer_code");      Double runtime=(Double)item.get("runtime");      movie.runtime=Integer.toString(runtime.intValue());      movie.synopsis=(String)item.get("description_full");      movie.certification=(String)item.get("mpa_rating");      movie.fullImage=movie.image;      ArrayList<LinkedTreeMap<String,Object>> torrents=(ArrayList<LinkedTreeMap<String,Object>>)item.get("torrents");      if (torrents != null) {        for (        LinkedTreeMap<String,Object> torrentObj : torrents) {          String quality=(String)torrentObj.get("quality");          if (quality == null)           continue;          Media.Torrent torrent=new Media.Torrent();          torrent.seeds=((Double)torrentObj.get("seeds")).intValue();          torrent.peers=((Double)torrentObj.get("peers")).intValue();          torrent.hash=(String)torrentObj.get("hash");          try {            torrent.url="magnet:?xt=urn:btih:" + torrent.hash + "&amp;dn="+ URLEncoder.encode(item.get("title").toString(),"utf-8")+ "&amp;tr=http://exodus.desync.com:6969/announce&amp;tr=udp://tracker.openbittorrent.com:80/announce&amp;tr=udp://open.demonii.com:1337/announce&amp;tr=udp://exodus.desync.com:6969/announce&amp;tr=udp://tracker.yify-torrents.com/announce";          } catch (          UnsupportedEncodingException e) {            e.printStackTrace();            torrent.url=(String)torrentObj.get("url");          }          movie.torrents.put(quality,torrent);        }      }      existingList.add(movie);    }  }  return existingList;}  }
class C{  public void cancelAllRequests(boolean mayInterruptIfRunning){  for (  List<RequestHandle> requestList : requestMap.values()) {    if (requestList != null) {      for (      RequestHandle requestHandle : requestList) {        requestHandle.cancel(mayInterruptIfRunning);      }    }  }  requestMap.clear();}  }
class C{  private int[] calculateRotations(final File[] matchingFiles){  final int[] results=new int[matchingFiles.length];  for (int i=0; i < matchingFiles.length; i++) {    final File file=matchingFiles[i];    try {      results[i]=calculateRotationForFile(file);    } catch (    final NumberFormatException nfe) {      results[i]=-1;    }  }  return results;}  }
class C{  public static List<ShapeRecord> cubicToQuadratic(final double startX,final double startY,final double control1X,final double control1Y,final double control2X,final double control2Y,final double anchorX,final double anchorY){  double ratio=3.0 / 4.0;  double pax=startX + ((control1X - startX) * ratio);  double pay=startY + ((control1Y - startY) * ratio);  double pbx=anchorX + ((control2X - anchorX) * ratio);  double pby=anchorY + ((control2Y - anchorY) * ratio);  double dx=(anchorX - startX) / 16.0;  double dy=(anchorY - startY) / 16.0;  ratio=3.0 / 8.0;  double c1x=startX + ((control1X - startX) * ratio);  double c1y=startY + ((control1Y - startY) * ratio);  double c2x=pax + ((pbx - pax) * ratio);  double c2y=pay + ((pby - pay) * ratio);  c2x=c2x - dx;  c2y=c2y - dy;  double c3x=pbx + ((pax - pbx) * ratio);  double c3y=pby + ((pay - pby) * ratio);  c3x=c3x + dx;  c3y=c3y + dy;  double c4x=anchorX + ((control2X - anchorX) * ratio);  double c4y=anchorY + ((control2Y - anchorY) * ratio);  double a1x=(c1x + c2x) / 2.0;  double a1y=(c1y + c2y) / 2.0;  double a2x=(pax + pbx) / 2.0;  double a2y=(pay + pby) / 2.0;  double a3x=(c3x + c4x) / 2.0;  double a3y=(c3y + c4y) / 2.0;  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>(4);  shapeRecords.add(curvedEdge(startX,startY,c1x,c1y,a1x,a1y));  shapeRecords.add(curvedEdge(a1x,a1y,c2x,c2y,a2x,a2y));  shapeRecords.add(curvedEdge(a2x,a2y,c3x,c3y,a3x,a3y));  shapeRecords.add(curvedEdge(a3x,a3y,c4x,c4y,anchorX,anchorY));  return shapeRecords;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public <T>T deserialize(Response response,TypeRef returnType) throws ApiException {  String contentType=null;  List<Object> contentTypes=response.getHeaders().get("Content-Type");  if (contentTypes != null && !contentTypes.isEmpty())   contentType=(String)contentTypes.get(0);  if (contentType == null)   throw new ApiException(500,"missing Content-Type in response");  String body;  if (response.hasEntity())   body=(String)response.readEntity(String.class); else   body="";  if (contentType.startsWith("application/json")) {    return json.deserialize(body,returnType);  } else {    throw new ApiException(500,"can not deserialize Content-Type: " + contentType);  }}  }
class C{  public NotificationChain basicSetStatement(Statement newStatement,NotificationChain msgs){  Statement oldStatement=statement;  statement=newStatement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FOR_STATEMENT__STATEMENT,oldStatement,newStatement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void clear(){  profiles.clear();}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  } else   if (other instanceof TFloatArrayList) {    TFloatArrayList that=(TFloatArrayList)other;    if (that.size() != this.size()) {      return false;    } else {      for (int i=_pos; i-- > 0; ) {        if (this._data[i] != that._data[i]) {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  protected void loadAccionesExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de formBusqExecuteLogic");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionAuditoriaBI service=services.lookupGestionAuditoriaBI();  String modulo=request.getParameter("modulo");  this.establecerElementosVista(request,service,modulo);  saveCurrentInvocation(KeysClientsInvocations.AUDITORIA_FORMBUSQUEDA,request);  setReturnActionFordward(request,mapping.findForward("formulario_busqueda"));}  }
class C{  private static void formatOrderList(Editable editable,int start){  int startPosition=EditUtils.findBeforeNewLineChar(editable,start) + 1;  int endPosition=EditUtils.findNextNewLineCharCompat(editable,start);  int nested=calculateNested(editable,startPosition,0);  int number=calculateOrderListNumber(editable,startPosition + nested,0);  editable.setSpan(new MDOrderListSpan(10,nested,number),startPosition,endPosition,Spanned.SPAN_INCLUSIVE_INCLUSIVE);}  }
class C{  protected boolean switchToNext(){  if (_nextParser >= _parsers.length) {    return false;  }  delegate=_parsers[_nextParser++];  return true;}  }
class C{  void encode(ASN1OutputStream out) throws IOException {  ASN1OutputStream dOut=out.getDLSubStream();  int length=getBodyLength();  out.write(BERTags.SET | BERTags.CONSTRUCTED);  out.writeLength(length);  for (Enumeration e=this.getObjects(); e.hasMoreElements(); ) {    Object obj=e.nextElement();    dOut.writeObject((ASN1Encodable)obj);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  throw new NotSerializableException("ActivatableServerRef not serializable");}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  protected int writeObj(Object... strs){  int objId=nextObjId(size());  writeln(objId," 0 obj");  writeDict(strs);  writeln("endobj");  return objId;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.TYPE_ARGUMENT___CONTAINS_WILDCARDS:    return TypeRefsPackage.PARAMETERIZED_TYPE_REF___CONTAINS_WILDCARDS;case TypeRefsPackage.TYPE_ARGUMENT___CONTAINS_UNBOUND_TYPE_VARIABLES:  return TypeRefsPackage.PARAMETERIZED_TYPE_REF___CONTAINS_UNBOUND_TYPE_VARIABLES;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___IS_GENERIC:return TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_GENERIC;case TypeRefsPackage.TYPE_REF___IS_PARAMETERIZED:return TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_PARAMETERIZED;case TypeRefsPackage.TYPE_REF___IS_RAW:return TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_RAW;case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPING_STRATEGY;case TypeRefsPackage.TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING;case TypeRefsPackage.TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public double[][] prob_Z(double X_[][]){  Matrix X=new Matrix(MatrixUtils.addBias(X_));  return MatrixUtils.removeBias(prob_Z(X).getArray());}  }
class C{  public WriteRequest(final Mode mode,final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final Collection<LwM2mResource> resources){  this(mode,contentFormat,new LwM2mPath(objectId,objectInstanceId),new LwM2mObjectInstance(objectId,resources));}  }
class C{  public TModule basicGetModule(){  return module;}  }
class C{  private static String[] splitWorker(String str,char separatorChar,boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return EMPTY_STRING_ARRAY;  }  List list=new ArrayList();  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  while (i < len) {    if (str.charAt(i) == separatorChar) {      if (match || preserveAllTokens) {        list.add(str.substring(start,i));        match=false;        lastMatch=true;      }      start=++i;      continue;    }    lastMatch=false;    match=true;    i++;  }  if (match || (preserveAllTokens && lastMatch)) {    list.add(str.substring(start,i));  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  public boolean isRTL(Context context){  if (isRTLForced(context)) {    return true;  }  return isRTLAllowed(context) && isDevicePreferredLanguageRTL();}  }
class C{  public View create(Element elem){  return new PasswordView(elem);}  }
class C{  @POST @Path("/{id}/detach-storage") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep detachStorage(@PathParam("id") URI id) throws DatabaseException {  Host host=queryHost(_dbClient,id);  ArgValidator.checkEntity(host,id,true);  boolean hasPendingTasks=hostHasPendingTasks(id);  if (hasPendingTasks) {    throw APIException.badRequests.cannotDetachStorageForHost("another operation is in progress for this host");  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Host.class,host.getId(),taskId,ResourceOperationTypeEnum.DETACH_HOST_STORAGE);  ComputeSystemController controller=getController(ComputeSystemController.class,null);  controller.detachHostStorage(host.getId(),false,false,taskId);  return toTask(host,taskId,op);}  }
class C{  @Override public String toString(){  return string;}  }
class C{  public void error(Exception ex){  _log.error("BrokerModel error msg: " + ex.getMessage());}  }
class C{  @Override public void draw(Graphics2D g2,XYPlot plot,Rectangle2D dataArea,ValueAxis domainAxis,ValueAxis rangeAxis,int rendererIndex,PlotRenderingInfo info){  PlotOrientation orientation=plot.getOrientation();  RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);  RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);  float j2DX=(float)domainAxis.valueToJava2D(this.x,dataArea,domainEdge);  float j2DY=(float)rangeAxis.valueToJava2D(this.y,dataArea,rangeEdge);  Rectangle2D displayArea=new Rectangle2D.Double(j2DX - this.displayWidth / 2.0,j2DY - this.displayHeight / 2.0,this.displayWidth,this.displayHeight);  AffineTransform savedTransform=g2.getTransform();  Rectangle2D drawArea=new Rectangle2D.Double(0.0,0.0,this.displayWidth * this.drawScaleFactor,this.displayHeight * this.drawScaleFactor);  g2.scale(1 / this.drawScaleFactor,1 / this.drawScaleFactor);  g2.translate((j2DX - this.displayWidth / 2.0) * this.drawScaleFactor,(j2DY - this.displayHeight / 2.0) * this.drawScaleFactor);  this.drawable.draw(g2,drawArea);  g2.setTransform(savedTransform);  String toolTip=getToolTipText();  String url=getURL();  if (toolTip != null || url != null) {    addEntity(info,displayArea,rendererIndex,toolTip,url);  }}  }
class C{  public static char[] nullToEmpty(final char[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  return array;}  }
class C{  public SeaGlassBorder(SeaglassUI ui,Insets insets){  this.ui=ui;  this.insets=insets;}  }
class C{  public static void doRebalance(){  ResourceManager resMan=cache.getResourceManager();  boolean heapEviction=(resMan.getEvictionHeapPercentage() > 0);  RebalanceFactory factory=resMan.createRebalanceFactory();  try {    RebalanceResults simulateResults=null;    if (!heapEviction) {      LogWriterUtils.getLogWriter().info("Calling rebalance simulate");      RebalanceOperation simulateOp=factory.simulate();      simulateResults=simulateOp.getResults();    }    LogWriterUtils.getLogWriter().info("Starting rebalancing");    RebalanceOperation rebalanceOp=factory.start();    RebalanceResults rebalanceResults=rebalanceOp.getResults();  } catch (  InterruptedException e) {    Assert.fail("Interrupted",e);  }}  }
class C{  public ExternalProject(File file,String[] natureIds,String[] builderIds){  this(file,Arrays.asList(natureIds),Arrays.asList(builderIds));}  }
class C{  public static void main(String[] args) throws IOException {  new UdpServer();}  }
class C{  public NewTreeParameterModel(TreeModel tree,Parameter parameter,boolean includeRoot,boolean includeTips){  super(tree,parameter,includeRoot,includeTips);}  }
class C{  public static ImagePreviewFragemnt newInstance(ArrayList<String> param1,int pos){  ImagePreviewFragemnt fragment=new ImagePreviewFragemnt();  Bundle args=new Bundle();  args.putStringArrayList("images",param1);  args.putInt("pos",pos);  fragment.setArguments(args);  return fragment;}  }
class C{  public static int exec(StringBuffer output,StringBuffer error,String args[]){  try {    String osName=System.getProperty("os.name");    if (osName.equals("Windows 95")) {      String[] prefix=new String[2];      prefix[0]="command.com";      prefix[1]="/C";      args=ArrayUtils.addAll(prefix,args);    } else     if (osName.startsWith("Windows")) {      String[] prefix=new String[2];      prefix[0]="cmd.exe";      prefix[1]="/C";      args=ArrayUtils.addAll(prefix,args);    }    Runtime runtime=Runtime.getRuntime();    Process childProcess=runtime.exec(args);    ReaderThread errorReader=new ReaderThread(childProcess.getErrorStream(),output);    ReaderThread outputReader=new ReaderThread(childProcess.getInputStream(),error);    errorReader.start();    outputReader.start();    int exitValue=childProcess.waitFor();    return exitValue;  } catch (  Throwable t) {    t.printStackTrace();  }  return -1;}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  if (GagManager.isGagged(player)) {    long timeRemaining=SingletonRepository.getGagManager().getTimeRemaining(player);    return "You are gagged, it will expire in " + TimeUtil.approxTimeUntil((int)(timeRemaining / 1000L));  }  return null;}  }
class C{  private SignalControlData mergeData(SignalControlData morningControl,SignalControlData eveningControl){  for (  SignalSystemControllerData morningController : morningControl.getSignalSystemControllerDataBySystemId().values()) {    List<SignalPlanData> morningPlans=new ArrayList<SignalPlanData>(morningController.getSignalPlanData().values());    morningController.getSignalPlanData().clear();    for (    SignalPlanData morningPlan : morningPlans) {      Id<SignalPlan> newId=Id.create(morningPlan.getId().toString() + "_m",SignalPlan.class);      SignalPlanData newPlan=DgSignalsUtils.copySignalPlanData(morningPlan,newId,morningControl.getFactory());      newPlan.setStartTime(0.0);      newPlan.setEndTime(12.0 * 3600.0);      morningController.addSignalPlanData(newPlan);    }    SignalSystemControllerData ecd=eveningControl.getSignalSystemControllerDataBySystemId().get(morningController.getSignalSystemId());    for (    SignalPlanData eplan : ecd.getSignalPlanData().values()) {      Id<SignalPlan> newId=Id.create(eplan.getId().toString() + "_e",SignalPlan.class);      SignalPlanData newPlan=DgSignalsUtils.copySignalPlanData(eplan,newId,morningControl.getFactory());      newPlan.setStartTime(12.0 * 3600.0);      newPlan.setEndTime((23.0 * 3600.0) + (59.0 * 60.0) + 59.0);      morningController.addSignalPlanData(newPlan);    }  }  return morningControl;}  }
class C{  public final TextBuilder clear(){  _length=0;  return this;}  }
class C{  public void addTransitSection(TransitSection s){  mTransitSectionList.add(s);  mMaxSequence=s.getSequenceNumber();}  }
class C{  public ImportNode(ClassNode type){  this.type=type;  this.alias=null;  this.isStar=true;  this.isStatic=true;  this.packageName=null;  this.fieldName=null;}  }
class C{  public void notifyFailed(Throwable exception) throws RuntimeException {  exec.shutdownNow();  LOGGER.error(exception);  throw new RuntimeException(exception);}  }
class C{  public final int size(){  return keys.length;}  }
class C{  private Map processEvent(MatchResult result){  Map map=new HashMap();  for (int i=1; i < result.groupCount() + 1; i++) {    Object key=matchingKeywords.get(i - 1);    Object value=result.group(i);    map.put(key,value);  }  return map;}  }
class C{  public List<A> appendList(List<A> x){  return x.prependList(this);}  }
class C{  public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (cookie.getPorts() == null) {      return false;    }    if (!portMatch(port,cookie.getPorts())) {      return false;    }  }  return true;}  }
class C{  private void parse(File dir){  File[] xmlFiles=dir.listFiles(new XmlFilter());  for (  File xmlFile : xmlFiles) {    parseTestFromXml(xmlFile);  }}  }
class C{  public Matrix solve(final Matrix B){  QL.require(B.rows() == this.n,Matrix.MATRIX_IS_INCOMPATIBLE);  if (!this.isSPD())   throw new LibraryException(MATRIX_IS_NOT_SIMMETRIC_POSITIVE);  final int nx=B.cols();  final Matrix X=B.clone();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      for (int i=0; i < k; i++) {        X.$[X.addr.op(k,j)]-=X.$[X.addr.op(i,j)] * L.$[L.addr.op(k,i)];      }      X.$[X.addr.op(k,j)]/=L.$[L.addr.op(k,k)];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      for (int i=k + 1; i < n; i++) {        X.$[X.addr.op(k,j)]-=X.$[X.addr.op(i,j)] * L.$[L.addr.op(i,k)];      }      X.$[X.addr.op(k,j)]/=L.$[L.addr.op(k,k)];    }  }  return X;}  }
class C{  public GPUImageFilterGroup(List<GPUImageFilter> filters){  mFilters=filters;  if (mFilters == null) {    mFilters=new ArrayList<GPUImageFilter>();  } else {    updateMergedFilters();  }  mGLCubeBuffer=ByteBuffer.allocateDirect(GPUImageRenderer.CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(GPUImageRenderer.CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("version")) {  } else   if (name.equals("class")) {    this.type=getOwner().findClass(value);  } else {    super.addAttribute(name,value);  }}  }
class C{  public void expectErrorSuffix(String... parts){  expected=join(parts);  expectedSuffix=true;}  }
class C{  public CacheException(){  super();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TINTERFACE__EXTERNAL:    setExternal((Boolean)newValue);  return;case TypesPackage.TINTERFACE__SUPER_INTERFACE_REFS:getSuperInterfaceRefs().clear();getSuperInterfaceRefs().addAll((Collection<? extends ParameterizedTypeRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void step(SimState state){  Bag neighbors=new Bag();  landscape.getNeighborsMaxDistance(basin.loc_x,basin.loc_y,1,true,neighbors,null,null);  ArrayList<Basin> mins=new ArrayList<Basin>();  double minheight=Double.MAX_VALUE;  for (  Object o : neighbors) {    Basin b=(Basin)o;    if (b.cumulativeHeight < minheight) {      mins=new ArrayList<Basin>();      mins.add(b);      minheight=b.cumulativeHeight;    } else     if (b.cumulativeHeight == minheight) {      mins.add(b);    }  }  if (minheight >= basin.cumulativeHeight) {    if (basin.loc_x == 0 || basin.loc_y == 0 || basin.loc_x == landscape.getWidth() - 1 || basin.loc_y == landscape.getHeight() - 1) {      stopper.stop();      basin.removeDrop(this);      world.drops.remove(this);    }    return;  }  Basin newbasin=mins.get(state.random.nextInt(mins.size()));  basin.removeDrop(this);  newbasin.addDrop(this);  basin=newbasin;}  }
class C{  public static Split find(double lat,double lon,double searchRadiusMeters,StreetLayer streetLayer,StreetMode streetMode){  int fixedLat=VertexStore.floatingDegreesToFixed(lat);  int fixedLon=VertexStore.floatingDegreesToFixed(lon);  final double metersPerDegreeLat=111111.111;  double cosLat=FastMath.cos(FastMath.toRadians(lat));  long radiusFixedLat=VertexStore.floatingDegreesToFixed(searchRadiusMeters / metersPerDegreeLat);  long radiusFixedLon=(int)(radiusFixedLat / cosLat);  Envelope envelope=new Envelope(fixedLon,fixedLon,fixedLat,fixedLat);  envelope.expandBy(radiusFixedLon,radiusFixedLat);  long squaredRadiusFixedLat=radiusFixedLat * radiusFixedLat;  EdgeStore.Edge edge=streetLayer.edgeStore.getCursor();  TIntCollection candidateEdges=streetLayer.findEdgesInEnvelope(envelope);  Split curr=new Split();  Split best=new Split();  candidateEdges.forEach(null);  if (best.edge < 0) {    return null;  }  edge.seek(best.edge);  best.vertex0=edge.getFromVertex();  best.vertex1=edge.getToVertex();  double[] lengthBefore_fixedDeg=new double[1];  edge.forEachSegment(null);  double lengthBefore_floatDeg=VertexStore.fixedDegreesToFloating((int)lengthBefore_fixedDeg[0]);  best.distance0_mm=(int)(lengthBefore_floatDeg * metersPerDegreeLat * 1000);  if (best.distance0_mm < 0) {    best.distance0_mm=0;    LOG.error("Length of first street segment was not positive.");  }  if (best.distance0_mm > edge.getLengthMm()) {    LOG.debug("Length of first street segment was greater than the whole edge ({} > {}).",best.distance0_mm,edge.getLengthMm());    best.distance0_mm=edge.getLengthMm();  }  best.distance1_mm=edge.getLengthMm() - best.distance0_mm;  return best;}  }
class C{  protected boolean isMod2TbempSet(){  return (mod2 & MOD2_TBEMP_MASK) != 0;}  }
class C{  public SQLClientInfoException(){  this.failedProperties=null;}  }
class C{  public void addPreloadEntry(GridCacheEntryInfo info){  assert info.cacheId() != 0;  if (preloadEntries == null)   preloadEntries=new ArrayList<>();  preloadEntries.add(info);}  }
class C{  public Matrix epoch(Matrix X_0){  int N=X_0.getArray().length;  Matrix Z_0=prob_Z(X_0);  Matrix E_pos=X_0.transpose().times(Z_0);  Matrix X_1=prob_X(Z_0);  Matrix pZ_1=prob_Z(X_1);  Matrix E_neg=X_1.transpose().times(pZ_1);  Matrix CD=((E_pos.minusEquals(E_neg)).times(1. / N));  return CD;}  }
class C{  public void preEvaluationStatistics(final EvolutionState state){  super.preEvaluationStatistics(state);  if (state.generation == start)   resetClock(state);  if (state.generation >= start)   possiblyRestart(state);}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int deltaV=computeScrollDeltaToGetChildRectOnScreenV(rect);  final int deltaH=computeScrollDeltaToGetChildRectOnScreenH(rect);  final boolean scroll=deltaH != 0 || deltaV != 0;  if (scroll) {    if (immediate) {      scrollBy(deltaH,deltaV);    } else {      smoothScrollBy(deltaH,deltaV);    }  }  return scroll;}  }
class C{  private RewrittenOutboundUrl processPreEncodeURL(String s){  if (urlRerwiter == null) {    return null;  }  return urlRerwiter.processEncodeURL(httpServletResponse,httpServletRequest,false,s);}  }
class C{  public String authenticate(){  String postOutput=null;  try {    URL url=new URL(AUTHENTICATION_URL);    postOutput=makeLoginRequest(url);  } catch (  IOException e) {    System.out.println("Could not connect to authentication server: " + e.toString());    System.exit(1);  }  StringTokenizer tokenizer=new StringTokenizer(postOutput,"=\n ");  String token=null;  while (tokenizer.hasMoreElements()) {    if (tokenizer.nextToken().equals("Auth")) {      if (tokenizer.hasMoreElements()) {        token=tokenizer.nextToken();      }      break;    }  }  if (token == null) {    System.out.println("Authentication error. Response from server:\n" + postOutput);    System.exit(1);  }  return token;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == VOICE_RECOGNITION_REQUEST_CODE && resultCode == RESULT_OK) {    ArrayList<String> matches=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);    mList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,matches));  }  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  @Transactional public void removeExpiredVerifycodes(){  final Query query=new Query().setFilter(new PropertyFilter(Verifycode.EXPIRED,FilterOperator.LESS_THAN,new Date().getTime()));  try {    final JSONObject result=verifycodeRepository.get(query);    final JSONArray verifycodes=result.optJSONArray(Keys.RESULTS);    for (int i=0; i < verifycodes.length(); i++) {      final String id=verifycodes.optJSONObject(i).optString(Keys.OBJECT_ID);      verifycodeRepository.remove(id);    }  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Expires verifycodes failed",e);  }}  }
class C{  public boolean forEachEntry(TDoubleObjectProcedure<V> procedure){  double[] keys=_set;  V[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
class C{  @Override protected void clearRequestBody(){  log.trace("enter GenericMethod.clearRequestBody()");  this.params.clear();  super.clearRequestBody();}  }
class C{  public int error_sym(){  return 1;}  }
class C{  public static LatLon fromDegrees(double latitude,double longitude){  return new LatLon(latitude,longitude);}  }
class C{  private void disconnectFromImsByBatteryLow() throws PayloadException, NetworkException, ContactManagerException {  if (sLogger.isActivated()) {    sLogger.debug("Disconnect from IMS network interface and de-register due to battery low");  }  stopImsConnection(TerminationReason.TERMINATION_BY_LOW_BATTERY);  mCurrentNetworkInterface.unregister();  mCurrentNetworkInterface.getNetworkAccess().disconnect();}  }
class C{  public double cdf(double x){  return Probability.chiSquare(freedom,x);}  }
class C{  protected void updateElementType(){  setElementType(elementName + " " + name+ " "+ visibility+ " "+ identifier+ " "+ uri);}  }
class C{  public static void registerRecyclerView(Context context,RecyclerView recyclerView){  if (context != null && hashMap.containsKey(context)) {    MaterialViewPagerAnimator animator=hashMap.get(context);    if (animator != null) {      animator.registerRecyclerView(recyclerView);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void footerViewHide(){}  }
class C{  public NotImplementedException(final String message,final Throwable cause){  this(message,cause,null);}  }
class C{  public ShortArrayList(short[] elements){  elements(elements);}  }
class C{  private static Scenario cleanupHouseholds(Scenario sc,String folder,String personCRS,String wantedCRS){  LOG.info("Adjusting household member IDs and home coordinates...");  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation(personCRS,wantedCRS);  new HouseholdsReaderV10(sc.getHouseholds()).readFile(folder + "wip/households.xml.gz");  ObjectAttributesXmlReader oar=new ObjectAttributesXmlReader(sc.getHouseholds().getHouseholdAttributes());  oar.putAttributeConverter(Coord.class,new CoordConverter());  oar.readFile(folder + "wip/householdAttributes.xml.gz");  for (  Household hh : sc.getHouseholds().getHouseholds().values()) {    int householdSize=hh.getMemberIds().size();    for (int i=0; i < householdSize; i++) {      String oldId=hh.getMemberIds().get(0).toString();      Id<Person> newId=Id.createPersonId("coct_p_" + oldId);      hh.getMemberIds().remove(0);      hh.getMemberIds().add(newId);    }    Coord oldCoord=(Coord)sc.getHouseholds().getHouseholdAttributes().getAttribute(hh.getId().toString(),"homeCoord");    sc.getHouseholds().getHouseholdAttributes().putAttribute(hh.getId().toString(),"homeCoord",ct.transform(oldCoord));  }  LOG.info("Done adjusting household member IDs and home coordinates.");  return sc;}  }
class C{  @Override public List<double[]> generate(int count){  ArrayList<double[]> result=new ArrayList<>(count);  while (result.size() < count) {    double[] d=new double[dim];    for (int i=0; i < dim; i++) {      d[i]=axes.get(i).nextRandom();    }    if (trans != null) {      d=trans.apply(d);    }    if (testClipping(d)) {      if (--retries < 0) {        throw new AbortException("Maximum retry count in generator exceeded.");      }      continue;    }    result.add(d);  }  return result;}  }
class C{  public boolean isDownloading(int downloadId){  return query(downloadId) != DownloadState.INVALID;}  }
class C{  public HttpHook(String destination){  this.destination=destination;  methods=new ArrayList<>();  queueExpireAfter=-1;  hookTriggerType=HookTriggerType.BEFORE;}  }
class C{  public void destroyProxies(BroadPhase broadPhase){  for (int i=0; i < m_proxyCount; ++i) {    FixtureProxy proxy=m_proxies[i];    broadPhase.destroyProxy(proxy.proxyId);    proxy.proxyId=BroadPhase.NULL_PROXY;  }  m_proxyCount=0;}  }
class C{  @Override public final void insertAll(DBIDs ids){  if (ids.isEmpty() || (ids.size() == 1)) {    return;  }  if (canBulkLoad()) {    List<DeLiCluEntry> leafs=new ArrayList<>(ids.size());    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      leafs.add(createNewLeafEntry(DBIDUtil.deref(iter)));    }    bulkLoad(leafs);  } else {    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      insert(iter);    }  }  doExtraIntegrityChecks();}  }
class C{  public XMLOptions(String xml) throws Exception {  this();  getXMLDocument().read(xml);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ItemLabelPosition)) {    return false;  }  ItemLabelPosition that=(ItemLabelPosition)obj;  if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {    return false;  }  if (!this.textAnchor.equals(that.textAnchor)) {    return false;  }  if (!this.rotationAnchor.equals(that.rotationAnchor)) {    return false;  }  if (this.angle != that.angle) {    return false;  }  return true;}  }
class C{  public void onSelectFileHelpClicked(final View view){  new AlertDialog.Builder(this).setTitle(R.string.dfu_help_title).setMessage(R.string.dfu_help_message).setPositiveButton(R.string.ok,null).show();}  }
class C{  private void sendSelfPatch(State state){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(state);  sendRequest(patch);}  }
class C{  public void testNoResourceSupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{}));  configuration.getResources().add(ConfigurationFixtureFactory.createXADataSourceAsResource().buildResource());  try {    configuration.collectUnsupportedResourcesAndThrowException();    fail("should have gotten an Exception");  } catch (  CargoException e) {    assertEquals("This configuration does not support Resource configuration! " + "JndiName: resource/XADataSource",e.getMessage());  }}  }
class C{  @SuppressWarnings("rawtypes") public synchronized Object handleData(Map data,int action){  return (handleData(data,action,false));}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static double logpdf(double x,double dof){  if (x <= 0) {    return Double.NEGATIVE_INFINITY;  }  if (dof <= 0) {    return Double.NaN;  }  final double k=dof * .5;  final double twox=x * 2.0;  return twox == Double.POSITIVE_INFINITY ? Double.NEGATIVE_INFINITY : (k - 1.0) * Math.log(twox) - twox - logGamma(k) + MathUtil.LOG2;}  }
class C{  private void tearDown(){  pendingMessages.add("*************************Tear Down*************************");  ExamplePubsubTopicAndSubscriptionOptions pubsubOptions=options.as(ExamplePubsubTopicAndSubscriptionOptions.class);  if (!pubsubOptions.getPubsubTopic().isEmpty()) {    try {      deletePubsubTopic(pubsubOptions.getPubsubTopic());      pendingMessages.add("The Pub/Sub topic has been deleted: " + pubsubOptions.getPubsubTopic());    } catch (    IOException e) {      pendingMessages.add("Failed to delete the Pub/Sub topic : " + pubsubOptions.getPubsubTopic());    }    if (!pubsubOptions.getPubsubSubscription().isEmpty()) {      try {        deletePubsubSubscription(pubsubOptions.getPubsubSubscription());        pendingMessages.add("The Pub/Sub subscription has been deleted: " + pubsubOptions.getPubsubSubscription());      } catch (      IOException e) {        pendingMessages.add("Failed to delete the Pub/Sub subscription : " + pubsubOptions.getPubsubSubscription());      }    }  }  ExampleBigQueryTableOptions bigQueryTableOptions=options.as(ExampleBigQueryTableOptions.class);  if (bigQueryTableOptions.getBigQueryDataset() != null && bigQueryTableOptions.getBigQueryTable() != null && bigQueryTableOptions.getBigQuerySchema() != null) {    pendingMessages.add("The BigQuery table might contain the example's output, " + "and it is not deleted automatically: " + bigQueryTableOptions.getProject() + ":"+ bigQueryTableOptions.getBigQueryDataset()+ "."+ bigQueryTableOptions.getBigQueryTable());    pendingMessages.add("Please go to the Developers Console to delete it manually." + " Otherwise, you may be charged for its usage.");  }}  }
class C{  public void onSantacamStateChange(boolean santacamEnabled){  if (mSantaCamButton != null && !isFinishing()) {    if (santacamEnabled) {      mSantaCamButton.hide();    } else {      mSantaCamButton.show();    }  }  if (santacamEnabled) {    mSantaCamTimeout.cancel();  }}  }
class C{  public void buildClassifier(Instances data) throws Exception {  m_instances=null;  m_topOfTree=null;  m_covered=null;  m_notCovered=null;  m_ruleModel=null;  m_splitAtts=null;  m_splitVals=null;  m_relOps=null;  m_internalNodes=null;  m_instances=data;  m_classIndex=m_instances.classIndex();  m_numInstances=m_instances.numInstances();  m_globalStdDev=Rule.stdDev(m_classIndex,m_instances);  m_globalAbsDev=Rule.absDev(m_classIndex,m_instances);  m_topOfTree=new RuleNode(m_globalStdDev,m_globalAbsDev,null);  m_topOfTree.setSaveInstances(m_saveInstances);  m_topOfTree.setRegressionTree(m_regressionTree);  m_topOfTree.setMinNumInstances(m_minNumInstances);  m_topOfTree.buildClassifier(m_instances);  if (!m_useUnpruned) {    m_topOfTree.prune();  } else {    m_topOfTree.installLinearModels();  }  if (m_smoothPredictions) {    m_topOfTree.installSmoothedModels();  }  m_topOfTree.numLeaves(0);  if (!m_useTree) {    makeRule();  }  m_instances=new Instances(m_instances,0);}  }
class C{  protected void listadoModulosExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de listadoModulosExecuteLogic");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionAuditoriaBI service=services.lookupGestionAuditoriaBI();  Collection modules=service.getModules();  request.setAttribute(AuditoriaConstants.LISTA_MODULOS_KEY,modules);  String module=request.getParameter(Constants.MODULE);  if (module != null && module.trim().length() > 0) {    Collection actions=service.getActionsWithLevels(Integer.parseInt(module));    request.setAttribute(AuditoriaConstants.LISTA_ACCIONES_KEY,actions);    request.setAttribute(AuditoriaConstants.SHOW_ACTIONS,new Boolean(true));    setInTemporalSession(request,AuditoriaConstants.MODULE_KEY,module);  }  Collection niveles=service.getLogLevels();  request.setAttribute(AuditoriaConstants.LISTA_NIVELES_KEY,niveles);  saveCurrentInvocation(KeysClientsInvocations.AUDITORIA_ACTIONLIST,request);  setReturnActionFordward(request,mapping.findForward(Constants.FORWARD_LISTADO_ACCIONES));}  }
class C{  private CProjectTreeNode<?> findDebuggerContainerNode(final CProjectTreeNode<?> databaseNode){  final List<CProjectTreeNode<?>> nodes=new ArrayList<CProjectTreeNode<?>>();  nodes.add(databaseNode);  while (!nodes.isEmpty()) {    final CProjectTreeNode<?> current=nodes.get(0);    nodes.remove(0);    if (current instanceof CDebuggerContainerNode) {      return current;    }    for (final Enumeration<?> e=current.children(); e.hasMoreElements(); ) {      nodes.add((CProjectTreeNode<?>)e.nextElement());    }  }  throw new IllegalStateException("IE01201: Debugger container node not found");}  }
class C{  boolean removeEdge(SparseEdge e){  boolean removedEdge=edges.remove(e);  boolean removedNeighbour=neighbours.remove(e.getOpposite(this));  if (removedEdge && removedNeighbour)   return true; else   if (!removedEdge && !removedNeighbour)   return false; else   throw new RuntimeException("Graph connectivity appears to be inconsitent!");}  }
class C{  public NotificationChain basicSetParameters(Parameters newParameters,NotificationChain msgs){  Parameters oldParameters=parameters;  parameters=newParameters;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.FUNCTION__PARAMETERS,oldParameters,newParameters);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static long bigArraySize(final long expected,final float f){  return nextPowerOfTwo((long)Math.ceil(expected / f));}  }
class C{  public SymbolTableEntryInternal steFor_module(){  return getSymbolTableEntryInternal("module",true);}  }
class C{  public void write(String filePath,String format) throws IOException, DMLException {  ml.reset();  ml.registerInput("left",this);  ml.executeScript("left = read(\"\"); output=left; write(output, \"" + filePath + "\", format=\""+ format+ "\");");}  }
class C{  public SerializeWriter(int initialSize){  if (initialSize <= 0) {    throw new IllegalArgumentException("Negative initial size: " + initialSize);  }  buf=new char[initialSize];}  }
class C{  public void defrost(){  throw new RuntimeException("cannot defrost " + getName());}  }
class C{  public int size(){  return this.count;}  }
class C{  public void addFragment(String name,Fragment fragment){  fragmentNames.add(name);  fragments.add(fragment);}  }
class C{  private void postThemeResetNotification(Context context){  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  String title=context.getString(R.string.theme_reset_notification_title);  String body=context.getString(R.string.theme_reset_notification_message);  Notification notice=new Notification.Builder(context).setAutoCancel(true).setOngoing(false).setContentTitle(title).setContentText(body).setStyle(new Notification.BigTextStyle().bigText(body)).setSmallIcon(android.R.drawable.stat_notify_error).setWhen(System.currentTimeMillis()).setCategory(Notification.CATEGORY_SYSTEM).setPriority(Notification.PRIORITY_MAX).build();  nm.notify(R.string.theme_reset_notification_title,notice);}  }
class C{  public Bench(){  super();}  }
class C{  public void delete(){  ListView list=(ListView)findViewById(R.id.avatarsList);  int index=list.getCheckedItemPosition();  if (index < 0) {    MainActivity.showMessage("Select image",this);    return;  }  this.avatar=MainActivity.avatars.get(index);  this.avatar.instance=MainActivity.instance.id;  HttpDeleteAvatarAction action=new HttpDeleteAvatarAction(this,this.avatar);  action.execute();}  }
class C{  public void hide(){  animationController.hide(getElement());}  }
class C{  private String constructMetricPrefix(String prefixFromConfig,TaskInfo taskInfo){  StringBuilder sb=new StringBuilder();  if (prefixFromConfig != null && !prefixFromConfig.isEmpty()) {    sb.append(prefixFromConfig).append(".");  }  sb.append(removeNonce(stormId)).append(".");  sb.append(taskInfo.srcComponentId).append(".");  sb.append(taskInfo.srcWorkerHost).append(".");  sb.append(taskInfo.srcWorkerPort).append(".");  sb.append(taskInfo.srcTaskId);  return sb.toString();}  }
class C{  public void hideRecycler(){  mRecycler.setVisibility(View.GONE);}  }
class C{  public void testGetColumnCount(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  assertTrue(d.getColumnCount() == 0);  d.addValue(1.0,"R1","C1");  assertTrue(d.getColumnCount() == 1);  d.addValue(1.0,"R1","C2");  assertTrue(d.getColumnCount() == 2);  d.addValue(2.0,"R1","C2");  assertTrue(d.getColumnCount() == 2);  d.setValue(null,"R1","C2");  assertTrue(d.getColumnCount() == 2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.175 -0500",hash_original_method="AE4C70F7AA3BE069BFD471F033424C08",hash_generated_method="FA3E9EFE37ED47F9FCA29E09A1225220") private static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  @Override public void clear() throws Exception {  super.clear();  m_Properties.addIgnored(VAL_ROOT + ".options");  m_Properties.addIgnored(Experiment.class,"options");  m_Properties.addAllowed(weka.classifiers.Classifier.class,"debug");  m_Properties.addAllowed(weka.classifiers.Classifier.class,"options");  m_Properties.addAllowed(weka.experiment.SplitEvaluator.class,"options");  m_Properties.addAllowed(weka.experiment.ResultProducer.class,"options");  m_CustomMethods.register(this,PropertyNode.class,"PropertyNode");}  }
class C{  public static boolean recursiveDelete(File file){  if (file.isDirectory()) {    String[] children=file.list();    if (children == null)     return false;    for (    String child : children) {      recursiveDelete(new File(file,child));    }  }  return file.delete();}  }
class C{  public void clear(){  store.clear();}  }
class C{  public void testInvokeAllCollection(){  testInvokeAllCollection(mainPool());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.083 -0400",hash_original_method="C455F2D927ADC92D1A4791D782C4857A",hash_generated_method="37BBEA285A8084C4915C89DE4C0CCC39") @Override protected void onCreate(Bundle savedInstanceState){  mFragments.attachActivity(this,mContainer,null);  if (getLayoutInflater().getFactory() == null) {    getLayoutInflater().setFactory(this);  }  super.onCreate(savedInstanceState);  NonConfigurationInstances nc=(NonConfigurationInstances)getLastNonConfigurationInstance();  if (nc != null) {    mAllLoaderManagers=nc.loaders;  }  if (savedInstanceState != null) {    Parcelable p=savedInstanceState.getParcelable(FRAGMENTS_TAG);    mFragments.restoreAllState(p,nc != null ? nc.fragments : null);  }  mFragments.dispatchCreate();}  }
class C{  public BatchInterrupted(String reason,int totalCount,int successCount,int errorCount){  this();  if (totalCount < (successCount - errorCount)) {    throw new IllegalArgumentException("total < success + error. total = " + totalCount + " success="+ successCount+ " error="+ errorCount);  }  setReason(reason);  setTotalCount(totalCount);  setSuccessCount(successCount);  setErrorCount(errorCount);  setSkippedCount(totalCount - (successCount + errorCount));}  }
class C{  public void buildIndex(){  fieldIndex.clear();  labelToColNr.clear();  aliasIndex.clear();  columnToColIndex.clear();  int visIndex=1;  for (  Column col : columns) {    fieldIndex.put(col.getLabel(),col);    fieldIndex.put(col.getAggName(),col);    labelToColNr.put(col.getLabel(),visIndex);    labelToColNr.put(col.getFullName(),visIndex);    if (col.getAlias() != null)     aliasIndex.put(col.getAlias(),col);    if (col.isVisible()) {      columnToColIndex.put(visIndex,col.getIndex());      visIndex++;    }  }}  }
class C{  public void testAssignServiceComment() throws Exception {  filterHelper.setContext(generateDefaultRuntime(true));  filterHelper.setFilter(new EventMetadataFilter());  ReplDBMSEvent e=this.eventHelper.eventFromStatement(1,"test","insert into foo(id) values(1)");  checkServiceAddition(e,true);}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=23 * hash + (_scope != null ? _scope.hashCode() : 0);  hash=23 * hash + (_metric != null ? _metric.hashCode() : 0);  hash=23 * hash + (_tags != null ? _tags.hashCode() : 0);  return hash;}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (source.getItemCount() > skip) {    if (newBar) {      VwapItem dataItem=new VwapItem(source.getRollingCandle().getPeriod(),new BigDecimal(source.getRollingCandle().getVwap()));      this.add(dataItem,false);    } else {      VwapItem dataItem=(VwapItem)this.getDataItem(this.getItemCount() - 1);      dataItem.setVwapPrice(source.getRollingCandle().getVwap());    }  }}  }
class C{  public static boolean isWhitespace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isWhitespace(str.charAt(i)) == false)) {      return false;    }  }  return true;}  }
class C{  @Override public void run(){  Charset charset=Charset.forName("UTF-8");  try {    info("Trying to connect to " + address + (secured ? " (secured)" : ""));    if (secured) {      SSLSocketFactory sf=(SSLSocketFactory)SSLSocketFactory.getDefault();      socket=sf.createSocket();      ((SSLSocket)socket).setUseClientMode(true);    } else {      socket=new Socket();    }    socket.connect(address,CONNECT_TIMEOUT);    out=new PrintWriter(new OutputStreamWriter(socket.getOutputStream(),charset));    in=new BufferedReader(new InputStreamReader(socket.getInputStream(),charset));    socket.setSoTimeout(SOCKET_BLOCK_TIMEOUT);  } catch (  UnknownHostException ex) {    irc.disconnected(Irc.ERROR_UNKNOWN_HOST);    warning("Error opening connection to " + address + ": "+ ex);    return;  }catch (  SocketTimeoutException ex) {    warning("Error opening connection: " + ex);    irc.disconnected(Irc.ERROR_SOCKET_TIMEOUT);    return;  }catch (  IOException ex) {    warning("Error opening connection: " + ex);    irc.disconnected(Irc.ERROR_SOCKET_ERROR,ex.getLocalizedMessage());    return;  }  info("Connected to " + socket.getRemoteSocketAddress().toString());  connected=true;  irc.connected(socket.getInetAddress().toString(),address.getPort());  StringBuilder b=new StringBuilder();  boolean previousWasCR=false;  String receivedLine=null;  while (true) {    try {      int c=in.read();      if (c == -1) {        break;      }      if (c == '\r') {        previousWasCR=true;      } else       if (c == '\n') {        if (previousWasCR) {          receivedLine=b.toString();          b.setLength(0);          previousWasCR=false;        }      } else {        b.append((char)c);        previousWasCR=false;      }      if (receivedLine == null) {        continue;      }      irc.received(receivedLine);      receivedLine=null;      activity();    } catch (    SocketTimeoutException ex) {      checkConnection();    }catch (    SSLException ex) {      warning("SSL Error reading from socket: " + ex);      disconnectReason=SSL_ERROR;      disconnectMessage=ex.getLocalizedMessage();      break;    }catch (    IOException ex) {      info("Error reading from socket: " + ex);      break;    }  }  close();}  }
class C{  public static String postImmediate(Properties ctx,int AD_Client_ID,int AD_Table_ID,int Record_ID,boolean force,String trxName){  if (MColumn.getColumn_ID(MTable.getTableName(ctx,AD_Table_ID),"Posted") <= 0)   return null;  String error=null;  if (MClient.isClientAccounting()) {    log.info("Table=" + AD_Table_ID + ", Record="+ Record_ID);    MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(ctx,AD_Client_ID);    error=Doc.postImmediate(ass,AD_Table_ID,Record_ID,force,trxName);    return error;  }  if (CConnection.get().isAppsServerOK(true)) {    log.config("trying server");    try {      Server server=CConnection.get().getServer();      if (server != null) {        Properties p=Env.getRemoteCallCtx(Env.getCtx());        error=server.postImmediate(p,AD_Client_ID,AD_Table_ID,Record_ID,force,null);        log.config("from Server: " + error == null ? "OK" : error);      } else {        error="NoAppsServer";      }    } catch (    Exception e) {      log.log(Level.WARNING,"(RE)",e);      error=e.getMessage();    }  }  return error;}  }
class C{  public static void logPromoSeen(boolean wasPanelSeen,boolean wasTap){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchFirstRunPanelSeen",wasPanelSeen ? RESULTS_SEEN : RESULTS_NOT_SEEN,RESULTS_SEEN_BOUNDARY);  logHistogramByGesture(wasPanelSeen,wasTap,"Search.ContextualSearchPromoSeenByGesture");}  }
class C{  public static void validate_NotNull(Object object,String attributeName) throws ValidationException {  if (object == null) {    throw new ValidationException(ValidationException.ERROR_ATTRIBUTE_VALIDATION,new String[]{attributeName});  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.858 -0500",hash_original_method="B1417C53B7334442AE372C957DCB8F0C",hash_generated_method="E063C2FA1E7EEC72A2E6214EEDDC4ECF") public ActivityChooserView(Context context){  this(context,null);}  }
class C{  public void save(Index index) throws IOException {  final String path=index.getPath();  final String prefix=index.getPrefix();  save(new File(path + File.separator + prefix+ EXTENSION));}  }
class C{  public void maybeIndex(HGPersistentHandle typeHandle,HGAtomType type,HGPersistentHandle atomHandle,Object atom){  List<HGIndexer> indList=(List)indexers.get(typeHandle);  if (indList == null)   return;  for (  HGIndexer indexer : indList) {    HGIndex<Object,Object> idx=getOrCreateIndex(indexer);    indexer.index(graph,atomHandle,atom,idx);  }}  }
class C{  public LRUCapacityController(int maximumEntries,EvictionAction evictionAction,Region region){  super(evictionAction,region);  setMaximumEntries(maximumEntries);}  }
class C{  public MimeType(String primary,String sub) throws MimeTypeParseException {  this(primary,sub,new MimeTypeParameterList());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void preloadEmbedded(ClassLoader classLoader) throws Exception {  Class realm=Class.forName("org.apache.catalina.Realm",true,classLoader);  Class connector;  try {    connector=Class.forName("org.apache.catalina.Connector",true,classLoader);  } catch (  ClassNotFoundException e) {    connector=Class.forName("org.apache.catalina.connector.Connector",true,classLoader);  }  Class engine=Class.forName("org.apache.catalina.Engine",true,classLoader);  Class embedded;  try {    embedded=Class.forName("org.apache.catalina.startup.Embedded",true,classLoader);    embeddedCreateEngine=embedded.getMethod("createEngine",new Class[0]);    embeddedCreateHost=embedded.getMethod("createHost",new Class[]{String.class,String.class});    embeddedAddEngine=embedded.getMethod("addEngine",new Class[]{engine});    embeddedCreateConnector=embedded.getMethod("createConnector",new Class[]{InetAddress.class,int.class,boolean.class});    embeddedAddConnector=embedded.getMethod("addConnector",new Class[]{connector});    embeddedCreateContext=embedded.getMethod("createContext",new Class[]{String.class,String.class});    embeddedSetRealm=embedded.getMethod("setRealm",new Class[]{realm});    embeddedSetCatalinaBase=embedded.getMethod("setCatalinaBase",new Class[]{String.class});    embeddedSetCatalinaHome=embedded.getMethod("setCatalinaHome",new Class[]{String.class});  } catch (  ClassNotFoundException e) {    embedded=Class.forName("org.apache.catalina.startup.Tomcat",true,classLoader);    embeddedSetCatalinaBase=embedded.getMethod("setBaseDir",new Class[]{String.class});    embeddedSetPort=embedded.getMethod("setPort",new Class[]{int.class});    embeddedEnableNaming=embedded.getMethod("enableNaming",new Class[0]);    embeddedGetConnector=embedded.getMethod("getConnector",new Class[0]);    embeddedGetEngine=embedded.getMethod("getEngine",new Class[0]);    embeddedGetHost=embedded.getMethod("getHost",new Class[0]);    engineSetRealm=engine.getMethod("setRealm",new Class[]{realm});    embeddedCreateContext=embedded.getMethod("addWebapp",new Class[]{String.class,String.class});    Class tomcatURLStreamHandlerFactory=Class.forName("org.apache.catalina.webresources.TomcatURLStreamHandlerFactory",true,classLoader);    Method getInstance=tomcatURLStreamHandlerFactory.getMethod("getInstance",new Class[0]);    getInstance.invoke(null);  }  embeddedNew=embedded.getConstructor(new Class[0]);  embeddedStart=embedded.getMethod("start",new Class[0]);  embeddedStop=embedded.getMethod("stop",new Class[0]);  connectorDestroy=connector.getMethod("destroy",new Class[0]);}  }
class C{  public boolean isNumberCancelled(ContactId contact){  return RcsStatus.CANCELLED.equals(getContactSharingStatus(contact));}  }
class C{  public void showResultPage(){  IFormPage resultPage=setActivePage(ResultPage.ID);  if (resultPage != null) {    try {      ((ResultPage)resultPage).loadData();    } catch (    CoreException e) {      TLCUIActivator.getDefault().logError("Error refreshing the result page",e);    }  }}  }
class C{  public OffsetTimingSpecifier(TimedElement owner,boolean isBegin,float offset){  super(owner,isBegin);  this.offset=offset;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  boolean interfaceParameterIsIntersectionType(){  List<Type> tl=tree.getDescriptorType(types).getParameterTypes();  if (tree.kind == ReferenceKind.UNBOUND) {    tl=tl.tail;  }  for (; tl.nonEmpty(); tl=tl.tail) {    Type pt=tl.head;    if (pt.getKind() == TypeKind.TYPEVAR) {      TypeVar tv=(TypeVar)pt;      if (tv.bound.getKind() == TypeKind.INTERSECTION) {        return true;      }    }  }  return false;}  }
class C{  public void testRandomlyAgainstJavaMap(){  PMap<Integer,Integer> pmap=HashTreePMap.empty();  Map<Integer,Integer> map=new HashMap<Integer,Integer>();  Random r=new Random();  for (int i=0; i < 10000; i++) {    if (pmap.size() == 0 || r.nextBoolean()) {      int k=r.nextInt(), v=r.nextInt();      assertEquals(map.containsKey(k),pmap.containsKey(k));      assertEquals(map.get(k),pmap.get(k));      map.put(k,v);      pmap=pmap.plus(k,v);    } else {      int j=r.nextInt(pmap.size());      for (      Entry<Integer,Integer> e : pmap.entrySet()) {        int k=e.getKey();        assertTrue(map.containsKey(k));        assertTrue(pmap.containsKey(k));        assertEquals(map.get(k),pmap.get(k));        assertTrue(map.entrySet().contains(e));        assertTrue(pmap.entrySet().contains(e));        UtilityTest.assertEqualsAndHash(pmap,pmap.plus(k,e.getValue()));        if (j-- == 0) {          map.remove(k);          pmap=pmap.minus(k);          assertFalse(pmap.entrySet().contains(e));        }      }    }    int k=r.nextInt();    assertEquals(map.containsKey(k),pmap.containsKey(k));    assertEquals(map.get(k),pmap.get(k));    map.remove(k);    pmap=pmap.minus(k);    String s=Integer.toString(k);    assertFalse(pmap.containsKey(s));    assertEquals(null,pmap.get(s));    assertFalse(pmap.entrySet().contains(s));    pmap=pmap.minus(s);    assertEquals(map.size(),pmap.size());    UtilityTest.assertEqualsAndHash(map,pmap);    UtilityTest.assertEqualsAndHash(map.entrySet(),pmap.entrySet());    UtilityTest.assertEqualsAndHash(pmap,HashTreePMap.from(pmap));    UtilityTest.assertEqualsAndHash(HashTreePMap.empty(),pmap.minusAll(pmap.keySet()));    UtilityTest.assertEqualsAndHash(pmap,pmap.plusAll(pmap));  }}  }
class C{  public boolean isRemoveChildren(){  return removeChildren;}  }
class C{  public String toString(){  return new String(getType() + " with current value: " + getValue());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.415 -0500",hash_original_method="56ED8A50252CAA4A163E554237CE5ACA",hash_generated_method="44F53CF6742339CE56733D4953AB5880") private void flushInternal() throws IOException {  if (pos > 0) {    out.write(buf,0,pos);  }  pos=0;}  }
class C{  @POST @Path("/{id}/detach-storage") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) public TaskResourceRep detachStorage(@PathParam("id") URI id) throws DatabaseException {  Vcenter vcenter=queryObject(Vcenter.class,id,true);  ArgValidator.checkEntity(vcenter,id,true);  checkIfOtherTenantsUsingTheVcenter(vcenter);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Vcenter.class,vcenter.getId(),taskId,ResourceOperationTypeEnum.DETACH_VCENTER_DATACENTER_STORAGE);  ComputeSystemController controller=getController(ComputeSystemController.class,null);  controller.detachVcenterStorage(vcenter.getId(),false,taskId);  return toTask(vcenter,taskId,op);}  }
class C{  private void resetDisplay(){  Utils.hideKeyboard(this,mEditText.getWindowToken());  mAdapter.clear();  mAdapter.notifyDataSetChanged();}  }
class C{  @Override public ListenableFuture<T> add(Callable<? extends ListenableFuture<T>> callable){  Preconditions.checkNotNull(callable);  final SettableFuture<T> response=SettableFuture.create();  final Job<T> job=new Job<T>(callable,response);  if (!queue.offer(job)) {    final String message="Queue size has reached capacity: " + maxQueueSize;    return Futures.immediateFailedFuture(new CapacityReachedException(message));  }  pump();  return response;}  }
class C{  public int toInt(){  return 0;}  }
class C{  public static int colorSpline(int x,int numKnots,int[] xknots,int[] yknots){  int span;  int numSpans=numKnots - 3;  float k0, k1, k2, k3;  float c0, c1, c2, c3;  if (numSpans < 1)   throw new IllegalArgumentException("Too few knots in spline");  for (span=0; span < numSpans; span++)   if (xknots[span + 1] > x)   break;  if (span > numKnots - 3)   span=numKnots - 3;  float t=(float)(x - xknots[span]) / (xknots[span + 1] - xknots[span]);  span--;  if (span < 0) {    span=0;    t=0;  }  int v=0;  for (int i=0; i < 4; i++) {    int shift=i * 8;    k0=(yknots[span] >> shift) & 0xff;    k1=(yknots[span + 1] >> shift) & 0xff;    k2=(yknots[span + 2] >> shift) & 0xff;    k3=(yknots[span + 3] >> shift) & 0xff;    c3=m00 * k0 + m01 * k1 + m02 * k2 + m03 * k3;    c2=m10 * k0 + m11 * k1 + m12 * k2 + m13 * k3;    c1=m20 * k0 + m21 * k1 + m22 * k2 + m23 * k3;    c0=m30 * k0 + m31 * k1 + m32 * k2 + m33 * k3;    int n=(int)(((c3 * t + c2) * t + c1) * t + c0);    if (n < 0)     n=0; else     if (n > 255)     n=255;    v|=n << shift;  }  return v;}  }
class C{  public void onTouchesBegan(PLIView view,List<UITouch> touches,MotionEvent event){}  }
class C{  public Source<Date> withMillisecondsBetween(long millisecondsFromEpochStartInclusive,long millisecondsFromEpochEndInclusive){  lowerBoundGEQZero(millisecondsFromEpochStartInclusive);  maxGEQMin(millisecondsFromEpochStartInclusive,millisecondsFromEpochEndInclusive);  return Compositions.weightWithValues(Dates.withMilliSecondsBetween(millisecondsFromEpochStartInclusive,millisecondsFromEpochEndInclusive),new Date(millisecondsFromEpochEndInclusive),new Date(millisecondsFromEpochStartInclusive));}  }
class C{  public boolean cancelTransfer(String username,String submissionID){  if (cancelUpload(username,submissionID))   return true;  return cancelDownload(username,submissionID);}  }
class C{  public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){  if (map == null) {    throw new NullPointerException();  }  return new SynchronizedSortedMap<K,V>(map);}  }
class C{  public T caseAnonymous_genExpr_2_(Anonymous_genExpr_2_ object){  return null;}  }
class C{  private void writeFieldDescriptor(String name,byte type,int length,byte decimalPlaces) throws IOException {  _leos.writeString(name,11);  _leos.writeByte(type);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(length);  _leos.writeByte(decimalPlaces);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);}  }
class C{  public UpdateUser build(){  if (userName == null || userName.isEmpty()) {    updateUser=new User.Builder();  } else {    updateUser=new User.Builder(userName);  }  if (nickName != null) {    updateUser.setNickName(nickName);  }  if (externalId != null) {    updateUser.setExternalId(externalId);  }  if (locale != null) {    updateUser.setLocale(locale);  }  if (password != null) {    updateUser.setPassword(password);  }  if (preferredLanguage != null) {    updateUser.setPreferredLanguage(preferredLanguage);  }  if (profileUrl != null) {    updateUser.setProfileUrl(profileUrl);  }  if (timezone != null) {    updateUser.setTimezone(timezone);  }  if (title != null) {    updateUser.setTitle(title);  }  if (name != null) {    updateUser.setName(name);  }  if (userType != null) {    updateUser.setUserType(userType);  }  if (displayName != null) {    updateUser.setDisplayName(displayName);  }  if (active != null) {    updateUser.setActive(active);  }  if (deleteFields.size() > 0) {    Meta meta=new Meta.Builder().setAttributes(deleteFields).build();    updateUser.setMeta(meta);  }  if (emails.size() > 0) {    updateUser.addEmails(emails);  }  if (phoneNumbers.size() > 0) {    updateUser.addPhoneNumbers(phoneNumbers);  }  if (addresses.size() > 0) {    updateUser.addAddresses(addresses);  }  if (entitlements.size() > 0) {    updateUser.addEntitlements(entitlements);  }  if (ims.size() > 0) {    updateUser.addIms(ims);  }  if (photos.size() > 0) {    updateUser.addPhotos(photos);  }  if (roles.size() > 0) {    updateUser.addRoles(roles);  }  if (certificates.size() > 0) {    updateUser.addX509Certificates(certificates);  }  if (extensions.size() > 0) {    updateUser.addExtensions(extensions);  }  return new UpdateUser(this);}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  private Constants(){}  }
class C{  public TabbedPane(){  super(JTabbedPane.TOP,JTabbedPane.SCROLL_TAB_LAYOUT);  authenticationTab=new TabAuthentication();  signatureTab=new TabSignature();  labelTab=new TabLabel();  filtersTab=new TabFilter();  sendasTab=new TabSendAs();  popTab=new TabPop();  forwardingTab=new TabForwarding();  imapTab=new TabImap();  vacationTab=new TabVacation();  languageTab=new TabLanguage();  generalTab=new TabGeneral();  webClipTab=new TabWebClip();  addTab(authenticationTab);  addTab(signatureTab);  addTab(labelTab);  addTab(filtersTab);  addTab(sendasTab);  addTab(popTab);  addTab(forwardingTab);  addTab(imapTab);  addTab(vacationTab);  addTab(languageTab);  addTab(generalTab);  addTab(webClipTab);  this.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);}  }
class C{  public Object clone(){  Message m=new Message();  for (int i=0; i < sections.length; i++) {    if (sections[i] != null)     m.sections[i]=new LinkedList(sections[i]);  }  m.header=(Header)header.clone();  m.size=size;  return m;}  }
class C{  public void testCountOrderBySql(){  final String expected="SELECT EXISTS(SELECT 1 FROM MockModel WHERE intField <> ? GROUP BY intField )";  String actual=new Select().from(MockModel.class).groupBy("intField").orderBy("intField").where("intField <> ?",0).toExistsSql();  assertEquals(expected,actual);}  }
class C{  public Builder userSuppliedIds(final boolean useUserSuppliedIds){  configuration.setProperty(USER_SUPPLIED_IDS_CFG_KEY,useUserSuppliedIds);  return this;}  }
class C{  public void test417() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enableDefaultTyping();  Jackson417Bean input=new Jackson417Bean();  String json=m.writeValueAsString(input);  Jackson417Bean result=m.readValue(json,Jackson417Bean.class);  assertEquals(input.foo,result.foo);  assertEquals(input.bar,result.bar);}  }
class C{  public void destroyPresenter(){  if (presenter != null) {    PresenterManager.getInstance().destroy(presenter);    presenter=null;  }}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  final int i=super.read(b,off,len);  if (i >= 0)   out.write(b,off,i);  return i;}  }
class C{  public void completePendingPageChanges(){  if (!mPendingAnimations.isEmpty()) {    HashMap<View,Runnable> pendingViews=new HashMap<>(mPendingAnimations);    for (    Map.Entry<View,Runnable> e : pendingViews.entrySet()) {      e.getKey().animate().cancel();      e.getValue().run();    }  }}  }
class C{  protected static double gammaQuantileNewtonRefinement(final double logpt,final double k,final double theta,final int maxit,double x){  final double EPS_N=1e-15;  if (x <= 0) {    x=Double.MIN_NORMAL;  }  double logpc=logcdf(x,k,theta);  if (x == Double.MIN_NORMAL && logpc > logpt * (1. + 1e-7)) {    return 0.;  }  if (logpc == Double.NEGATIVE_INFINITY) {    return 0.;  }  for (int i=0; i < maxit; i++) {    final double logpe=logpc - logpt;    if (Math.abs(logpe) < Math.abs(EPS_N * logpt)) {      break;    }    final double g=logpdf(x,k,theta);    if (g == Double.NEGATIVE_INFINITY) {      break;    }    final double newx=x - logpe * Math.exp(logpc - g);    logpc=logcdf(newx,k,theta);    if (Math.abs(logpc - logpt) > Math.abs(logpe) || (i > 0 && Math.abs(logpc - logpt) == Math.abs(logpe))) {      break;    }    x=newx;  }  return x;}  }
class C{  public static double toDouble(final String value){  return Double.parseDouble(value);}  }
class C{  public void dumpEntryNames(){  if (m_items == null)   loadLOBData();  if (m_items == null || m_items.size() == 0) {    System.out.println("- no entries -");    return;  }  System.out.println("- entries: " + m_items.size());  for (int i=0; i < m_items.size(); i++)   System.out.println("  - " + getEntryName(i));}  }
class C{  public HostNameParser(LexerCore lexer){  this.lexer=lexer;  lexer.selectLexer("charLexer");  stripAddressScopeZones=Boolean.getBoolean("gov2.nist.core.STRIP_ADDR_SCOPES");}  }
class C{  public boolean isAllowedToWriteReview(){  return allowedToWriteReview;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.DISJUNCTION__ELEMENTS:    return getElements();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public double[] elements(){  return elements;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  if (keySize > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + keySize + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new KeyParameter(dKey,0,keySize);}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  @Override public void onNothingSelected(AdapterView<?> parent){  final Display display=(Display)parent.getTag();  setPresentationDisplayMode(display,0);}  }
class C{  public void Nested(int obj){  if (obj != offset())   throw new AssertionError("FlatBuffers: struct must be serialized inline.");}  }
class C{  public void testEveryNodeHasCorrectMinimumNumberOfEdges(){  Graph<Integer,Number> graph=generateAndTestSizeOfBarabasiAlbertGraph(graphFactory,vertexFactory,edgeFactory,init_vertices,edges_to_add_per_timestep,random_seed,num_tests);  for (  Integer v : graph.getVertices()) {    assertTrue(graph.outDegree(v) >= edges_to_add_per_timestep);  }}  }
class C{  private static void d_uakptrace(double[] a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  for (int i=rl, aix=rl * n + rl; i < ru; i++, aix+=(n + 1))   kplus.execute2(kbuff,a[aix]);  c[0]=kbuff._sum;  c[1]=kbuff._correction;}  }
class C{  public static boolean checkFDSatisfaction(Instances i,HashMap<String,String[]> FDs){  HashMap<Object,List<Object>> map=new HashMap<Object,List<Object>>();  System.out.println("\nChecking FD sataisfactian...\n");  for (  String premiseID : FDs.keySet()) {    String[] rhsIDs=FDs.get(premiseID);    for (int j=0; j < i.numInstances(); j++) {      List<Object> rhsValues=new LinkedList<Object>();      for (int k=0; k < rhsIDs.length; k++)       rhsValues.add(i.instance(j).toString(Integer.parseInt(rhsIDs[k])));      String premise=i.instance(j).toString(Integer.parseInt(premiseID));      if (map.containsKey(premise) && !map.get(premise).equals(rhsValues)) {        System.out.println("The following pair violate an FD:");        System.out.println(premise + " " + rhsValues.toString());        System.out.println(premise + " " + map.get(premise).toString()+ "\n");        return false;      } else {        map.put(premise,Collections.unmodifiableList(rhsValues));      }    }  }  return true;}  }
class C{  public lalr_state shift_to(){  return _shift_to;}  }
class C{  private void onRcDisplayUpdate(RemoteControlStackEntry rcse,int flags){synchronized (mRCStack) {synchronized (mCurrentRcLock) {      if ((mCurrentRcClient != null) && (mCurrentRcClient.equals(rcse.mRcClient))) {        if (DEBUG_RC)         Log.i(TAG,"Display/update remote control ");        mCurrentRcClientGen++;        setNewRcClient_syncRcsCurrc(mCurrentRcClientGen,rcse.mMediaIntent,false);        try {          mCurrentRcClient.onInformationRequested(mCurrentRcClientGen,flags);        } catch (        RemoteException e) {          Log.e(TAG,"Current valid remote client is dead: " + e);          mCurrentRcClient=null;        }      } else {      }    }  }}  }
class C{  public ApplyAttributesAction(DrawingEditor editor){  super(editor);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,"edit.applyAttributes");  updateEnabledState();}  }
class C{  public String stripID(){  if (this.isEmpty || this.value.charAt(this.value.length() - this.trailing - 1) != '}') {    return null;  }  int p=this.leading;  boolean found=false;  while (p < this.value.length() && !found) {switch (this.value.charAt(p)) {case '\\':      if (p + 1 < this.value.length()) {switch (this.value.charAt(p + 1)) {case '{':          p++;        break;    }  }p++;break;case '{':found=true;break;default :p++;break;}}if (found) {if (p + 1 < this.value.length() && this.value.charAt(p + 1) == '#') {final int start=p + 2;p=start;found=false;while (p < this.value.length() && !found) {switch (this.value.charAt(p)) {case '\\':if (p + 1 < this.value.length()) {switch (this.value.charAt(p + 1)) {case '}':p++;break;}}p++;break;case '}':found=true;break;default :p++;break;}}if (found) {final String id=this.value.substring(start,p).trim();if (this.leading != 0) {this.value=this.value.substring(0,this.leading) + this.value.substring(this.leading,start - 2).trim();} else {this.value=this.value.substring(this.leading,start - 2).trim();}this.trailing=0;return id.length() > 0 ? id : null;}}}return null;}  }
class C{  public Document readXML(Type target){  final String xmlString=readString(target);  Document doc=null;  try {    doc=XMLUtils.stringToDoc(xmlString);  } catch (  IOException ioex) {    log.error("IOException converting xml to dom",ioex);  }  storeReference(doc);  return doc;}  }
class C{  private Map<URI,Integer> validateBlockObjectsAndGetMap(List<VolumeParam> volumes,ExportGroup exportGroup,Map<URI,Map<URI,Integer>> storageMap){  if (volumes != null) {    validateVolumeLunIdParam(volumes);    Map<URI,String> systemURIToSystemTypeMap=new HashMap<>();    for (    VolumeParam volumeParam : volumes) {      BlockObject block=getAndValidateVolume(exportGroup,volumeParam.getId());      Integer lun=volumeParam.getLun();      if (block != null) {        if (block instanceof BlockSnapshot) {          BlockSnapshot snapshot=(BlockSnapshot)block;          checkIfOpenStackSnapshot(snapshot);          checkForActiveBlockSnapshot(snapshot);        } else         if (block instanceof Volume) {          if (lun != ExportGroup.LUN_UNASSIGNED && isCinderVolume((Volume)block,systemURIToSystemTypeMap)) {            _log.info("User specified HLU ({}) is ignored for cinder type volume" + " since Cinder API does not take HLU while exporting.",lun);            lun=ExportGroup.LUN_UNASSIGNED;          }        }      }      exportGroup.addVolume(volumeParam.getId(),lun);    }  }  storageMap.putAll(ExportUtils.getStorageToVolumeMap(exportGroup,false,_dbClient));  Map<URI,Integer> volumeMap=new HashMap<URI,Integer>();  for (  URI storage : storageMap.keySet()) {    volumeMap.putAll(storageMap.get(storage));  }  return volumeMap;}  }
class C{  public final static char[] encodeToChar(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new char[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  char[] dArr=new char[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=CA[(i >>> 18) & 0x3f];    dArr[d++]=CA[(i >>> 12) & 0x3f];    dArr[d++]=CA[(i >>> 6) & 0x3f];    dArr[d++]=CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=CA[i >> 12];    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  public Object showNativePicker(int type,Component source,Object currentValue,Object data){  return impl.showNativePicker(type,source,currentValue,data);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failback") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList failbackProtection(@PathParam("id") URI id,FileReplicationParam param) throws ControllerException {  TaskResourceRep taskResp=null;  StoragePort storageportNFS=null;  StoragePort storageportCIFS=null;  TaskList taskList=new TaskList();  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare sourceFileShare=_dbClient.queryObject(FileShare.class,id);  ArgValidator.checkEntity(sourceFileShare,id,true);  checkForPendingTasks(Arrays.asList(sourceFileShare.getTenant().getURI()),Arrays.asList(sourceFileShare));  URI projectURI=sourceFileShare.getProject().getURI();  Project project=_permissionsHelper.getObjectById(projectURI,Project.class);  ArgValidator.checkEntity(project,projectURI,false);  _log.info("Found filesystem project {}",projectURI);  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,sourceFileShare.getVirtualPool());  StringBuffer notSuppReasonBuff=new StringBuffer();  String operation=ProtectionOp.FAILBACK.getRestOp();  if (!FileSystemReplicationUtils.validateMirrorOperationSupported(sourceFileShare,currentVpool,notSuppReasonBuff,operation)) {    _log.error("Mirror Operation {} is not supported for the file system {} as : {}",operation.toUpperCase(),sourceFileShare.getLabel(),notSuppReasonBuff.toString());    throw APIException.badRequests.unableToPerformMirrorOperation(operation.toUpperCase(),sourceFileShare.getId(),notSuppReasonBuff.toString());  }  Operation op=_dbClient.createTaskOpStatus(FileShare.class,id,task,ResourceOperationTypeEnum.FILE_PROTECTION_ACTION_FAILBACK);  op.setDescription("Filesystem Failback");  boolean replicateConfiguration=param.isReplicateConfiguration();  if (replicateConfiguration) {    List<String> targetfileUris=new ArrayList<String>();    targetfileUris.addAll(sourceFileShare.getMirrorfsTargets());    FileShare targetFileShare=_dbClient.queryObject(FileShare.class,URI.create(targetfileUris.get(0)));    SMBShareMap smbShareMap=targetFileShare.getSMBFileShares();    if (smbShareMap != null) {      storageportCIFS=_fileScheduler.placeFileShareExport(sourceFileShare,StorageProtocol.File.CIFS.name(),null);    }    FSExportMap nfsExportMap=targetFileShare.getFsExports();    if (nfsExportMap != null) {      storageportNFS=_fileScheduler.placeFileShareExport(sourceFileShare,StorageProtocol.File.NFS.name(),null);    }  }  FileServiceApi fileServiceApi=getFileShareServiceImpl(sourceFileShare,_dbClient);  try {    fileServiceApi.failbackFileShare(sourceFileShare.getId(),storageportNFS,storageportCIFS,replicateConfiguration,task);  } catch (  InternalException e) {    if (_log.isErrorEnabled()) {      _log.error("",e);    }    op=sourceFileShare.getOpStatus().get(task);    op.error(e);    sourceFileShare.getOpStatus().updateTaskStatus(task,op);    _dbClient.updateObject(sourceFileShare);    throw e;  }  taskResp=toTask(sourceFileShare,task,op);  taskList.getTaskList().add(taskResp);  return taskList;}  }
class C{  public void delete(int index){}  }
class C{  public void step(){  int lineNumber=data.getInstructionPointer();  data.setInstructionPointer(lineNumber + 1);  if (lineNumber < highlighter.getNumberOfLines()) {    executeLineNumber(lineNumber,false);  }  updateAll();  scrollToExecutionMark();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode11.class,args);}  }
class C{  public void onLoaderReset(Loader<Cursor> loader){  mOps.displayCursor(null);}  }
class C{  public MyIdentityHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public boolean remove(E comparable){  if (comparable == null)   return false;  if (this.root == null)   return false;  return this.remove(this.root,comparable) != null;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void initPrefs(PreferenceFragment fragment){  for (  String key : prefKeys) {    initPref(fragment.findPreference(key));  }}  }
class C{  protected IV<?,?> toSeparatedString(final BigdataValueFactory vf,final Object... args){  final StringBuffer buf=new StringBuffer();  for (int i=0; i < args.length; i++) {    if (i > 0)     buf.append(GeoSpatial.CUSTOM_FIELDS_SEPARATOR);    buf.append(args[i].toString());  }  return DummyConstantNode.toDummyIV(vf.createLiteral(buf.toString()));}  }
class C{  public ReliefF(final ClassificationDataSet cds,int featureCount,final int m,final int n,final DistanceMetric dm,ExecutorService threadPool){  this(cds,featureCount,m,n,dm,new DefaultVectorCollectionFactory<Vec>(),threadPool);}  }
class C{  public BarRenderer(){  super();  this.base=0.0;  this.includeBaseInRange=true;  this.itemMargin=DEFAULT_ITEM_MARGIN;  this.drawBarOutline=false;  this.maximumBarWidth=1.0;  this.positiveItemLabelPositionFallback=null;  this.negativeItemLabelPositionFallback=null;  this.gradientPaintTransformer=new StandardGradientPaintTransformer();  this.minimumBarLength=0.0;  setBaseLegendShape(new Rectangle2D.Double(-4.0,-4.0,8.0,8.0));  this.barPainter=getDefaultBarPainter();  this.shadowsVisible=getDefaultShadowsVisible();  this.shadowPaint=Color.gray;  this.shadowXOffset=4.0;  this.shadowYOffset=4.0;}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  if (r.compareTo(ONE) < 0 || r.compareTo(n) >= 0) {    return false;  }  if (s.compareTo(ONE) < 0 || s.compareTo(n) >= 0) {    return false;  }  BigInteger c=s.modInverse(n);  BigInteger u1=e.multiply(c).mod(n);  BigInteger u2=r.multiply(c).mod(n);  ECPoint G=key.getParameters().getG();  ECPoint Q=((ECPublicKeyParameters)key).getQ();  ECPoint point=ECAlgorithms.sumOfTwoMultiplies(G,u1,Q,u2);  if (point.isInfinity()) {    return false;  }  BigInteger v=point.getX().toBigInteger().mod(n);  return v.equals(r);}  }
class C{  @Override public void layout(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr != null)   return uiMgr.getVideoFrame().getNowPlayingList(); else   return null;}  }
class C{  public Task<BlockSnapshotSessionRestRep> restore(URI id){  return postTask(getIdUrl() + "/restore",id);}  }
class C{  public Instrumenter attachHypervolumeCollector(){  includeHypervolume=true;  return this;}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  boolean accepted=checkModifiers(e);  if (accepted == true) {    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();    if (vv instanceof SatelliteVisualizationViewer) {      VisualizationViewer<?,?> vvMaster=((SatelliteVisualizationViewer<?,?>)vv).getMaster();      int amount=e.getWheelRotation();      if (amount > 0) {        scaler.scale(vvMaster,in,vvMaster.getCenter());      } else       if (amount < 0) {        scaler.scale(vvMaster,out,vvMaster.getCenter());      }      e.consume();      vv.repaint();    }  }}  }
class C{  public void testGetColorsByName(){  try {    for (    String colorName : MaterialPalettes.COLORS_WITH_ACCENT_NAMES) {      List<Integer> colors=MaterialPalettes.getColorsByName(colorName);      assertEquals(MaterialPalettes.COLOR_LEVELS.length,colors.size());    }  } catch (  IllegalAccessException iae) {    fail();  }  try {    for (    String colorName : MaterialPalettes.COLORS_WITHOUT_ACCENT_NAMES) {      List<Integer> colors=MaterialPalettes.getColorsByName(colorName);      assertEquals(MaterialPalettes.NON_ACCENT_COLOR_LEVELS.length,colors.size());    }  } catch (  IllegalAccessException iae) {    fail();  }  try {    List<Integer> colors=MaterialPalettes.getColorsByName("");    fail();  } catch (  IllegalArgumentException iae) {  }catch (  IllegalAccessException iae1) {    fail();  }  try {    List<Integer> colors=MaterialPalettes.getColorsByName(null);    fail();  } catch (  IllegalArgumentException iae) {  }catch (  IllegalAccessException iae1) {    fail();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:39.625 -0500",hash_original_method="FD9D9C54290793DEF25EE96780FA43D9",hash_generated_method="0D823BB8817086852D9CC56BB148DF51") public void proceed(PrivateKey privateKey,X509Certificate[] chain){  byte[] privateKeyBytes=privateKey.getEncoded();  byte[][] chainBytes;  try {    chainBytes=NativeCrypto.encodeCertificates(chain);  } catch (  CertificateEncodingException e) {    mBrowserFrame.nativeSslClientCert(mHandle,null,null);    return;  }  mTable.Allow(mHostAndPort,privateKeyBytes,chainBytes);  mBrowserFrame.nativeSslClientCert(mHandle,privateKeyBytes,chainBytes);}  }
class C{  public static <T>String toString(Class<T> cls,T obj,String name0,Object val0,String name1,Object val1){  assert cls != null;  assert obj != null;  assert name0 != null;  assert name1 != null;  Queue<GridToStringThreadLocal> queue=threadCache.get();  assert queue != null;  GridToStringThreadLocal tmp=queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();  Object[] addNames=tmp.getAdditionalNames();  Object[] addVals=tmp.getAdditionalValues();  addNames[0]=name0;  addVals[0]=val0;  addNames[1]=name1;  addVals[1]=val1;  try {    return toStringImpl(cls,tmp.getStringBuilder(),obj,addNames,addVals,2);  }  finally {    queue.offer(tmp);  }}  }
class C{  public boolean containsGLCode(String glCode){  boolean contains=false;  for (  EgBillDetails bd : getEgBillDetails()) {    if (bd.getGlcode().equals(glCode)) {      contains=true;      break;    }  }  return contains;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.insertData(40,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public static boolean debugging(String token){  return Debug.On && (debugAll || dbgTable.containsKey(token));}  }
class C{  protected Keymap createKeymap(){  Keymap map=JTextComponent.getKeymap(RTEXTAREA_KEYMAP_NAME);  if (map == null) {    Keymap parent=JTextComponent.getKeymap(JTextComponent.DEFAULT_KEYMAP);    map=JTextComponent.addKeymap(RTEXTAREA_KEYMAP_NAME,parent);    map.setDefaultAction(new RTextAreaEditorKit.DefaultKeyTypedAction());  }  return map;}  }
class C{  public void testNullStoredBytesFieldReuse() throws Exception {  Directory dir=newDirectory();  Analyzer analyzer=new MockAnalyzer(random());  IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(analyzer));  Document doc=new Document();  Field theField=new StoredField("foo",new BytesRef("hello").bytes);  doc.add(theField);  iw.addDocument(doc);  expectThrows(NullPointerException.class,null);  assertNull(iw.getTragicException());  iw.close();  DirectoryReader r=DirectoryReader.open(dir);  assertEquals(1,r.numDocs());  r.close();  dir.close();}  }
class C{  public static void main(String... args){  new VcfStatsCli().mainExit(args);}  }
class C{  public void removeAll(){  m_nodes.clear();  m_lines.clear();  Component[] components=getComponents();  for (int i=0; i < components.length; i++) {    Component component=components[i];    component.removeMouseListener(this);    component.removeMouseMotionListener(this);  }  super.removeAll();}  }
class C{  protected Scope createScopeNode(int token,int lineno){  Scope scope=new Scope();  scope.setType(token);  scope.setLineno(lineno);  return scope;}  }
class C{  public static void assertImportanceTransferNotification(final Notification notification,final Account expectedLessor,final Account expectedLessee,final ImportanceTransferMode expectedMode){  final ImportanceTransferNotification n=(ImportanceTransferNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.ImportanceTransfer));  Assert.assertThat(n.getLessor(),IsEqual.equalTo(expectedLessor));  Assert.assertThat(n.getLessee(),IsEqual.equalTo(expectedLessee));  Assert.assertThat(n.getMode(),IsEqual.equalTo(expectedMode));}  }
class C{  public SelectResults createWithIR(ClientCQ cq){  pool.getRITracker().addCq(cq,cq.isDurable());  byte regionDataPolicyOrdinal=cq.getCqBaseRegion() == null ? (byte)0 : cq.getCqBaseRegion().getAttributes().getDataPolicy().ordinal;  return CreateCQWithIROp.execute(this.pool,cq.getName(),cq.getQueryString(),CqStateImpl.RUNNING,cq.isDurable(),regionDataPolicyOrdinal);}  }
class C{  public void handleManageChildren(ReactShadowNode nodeToManage,int[] indicesToRemove,int[] tagsToRemove,ViewAtIndex[] viewsToAdd,int[] tagsToDelete){  if (!ENABLED) {    mUIViewOperationQueue.enqueueManageChildren(nodeToManage.getReactTag(),indicesToRemove,viewsToAdd,tagsToDelete);    return;  }  for (int i=0; i < tagsToRemove.length; i++) {    int tagToRemove=tagsToRemove[i];    boolean delete=false;    for (int j=0; j < tagsToDelete.length; j++) {      if (tagsToDelete[j] == tagToRemove) {        delete=true;        break;      }    }    ReactShadowNode nodeToRemove=mShadowNodeRegistry.getNode(tagToRemove);    removeNodeFromParent(nodeToRemove,delete);  }  for (int i=0; i < viewsToAdd.length; i++) {    ViewAtIndex toAdd=viewsToAdd[i];    ReactShadowNode nodeToAdd=mShadowNodeRegistry.getNode(toAdd.mTag);    addNodeToNode(nodeToManage,nodeToAdd,toAdd.mIndex);  }}  }
class C{  public LogoutRequest createSamlLogoutRequest(String id,String where,String nameIDFormat,String nameID,String sessionIndex){  if (id == null) {    id=generator.generateIdentifier();  }  log.info("Building SAML LogoutRequest for id: " + id + "\n 	destination: "+ where+ "\n	nameIDFormat: "+ nameIDFormat+ "\n	nameID: "+ nameID+ "\n	sessionIndex: "+ sessionIndex);  Validate.notNull(where,"destination is null");  Validate.notNull(nameID,"nameID is null");  DateTime issueInstant=new DateTime();  LogoutRequestBuilder logoutRequestBuilder=new LogoutRequestBuilder();  LogoutRequest logoutRequest=logoutRequestBuilder.buildObject(SamlNames.PROTOCOL,"LogoutRequest","samlp");  logoutRequest.setDestination(where);  logoutRequest.setIssueInstant(issueInstant);  logoutRequest.setIssuer(spawnIssuer(getIssuer()));  logoutRequest.setNameID(spawnNameID(nameIDFormat,nameID));  logoutRequest.setID(id);  logoutRequest.setVersion(SAMLVersion.VERSION_20);  if (sessionIndex != null) {    SessionIndexBuilder sessionIndexBuilder=new SessionIndexBuilder();    SessionIndex sessionIndexElement=sessionIndexBuilder.buildObject(SamlNames.PROTOCOL,"SessionIndex","samlp");    sessionIndexElement.setSessionIndex(sessionIndex);    logoutRequest.getSessionIndexes().add(sessionIndexElement);  }  return logoutRequest;}  }
class C{  public void addSample(Sample stat){  samples.add(stat);  if (samples.size() == 1) {    start=stat.start;    end=stat.end;  }  this.ioBytes+=stat.ioBytes;  this.jobMsgCnt+=stat.jobMsgCnt;  this.msgCnt+=stat.msgCnt;  this.msgBytes+=stat.msgBytes;  this.start=Math.min(this.start,stat.start);  this.end=Math.max(this.end,stat.end);}  }
class C{  public boolean hasProblem(){  return problem != null;}  }
class C{  public void close(){  mOneToOneFileTransferCache.clear();  mGroupFileTransferCache.clear();  if (sLogger.isActivated()) {    sLogger.info("File transfer service API is closed");  }}  }
class C{  public Boolean isVmotionAcrossNetworkSupported(){  return vmotionAcrossNetworkSupported;}  }
class C{  protected boolean fitsBounds(float val,float min,float max){  if (val < min || val > max)   return false; else   return true;}  }
class C{  @Override public boolean hasMoreElements(){  return (m_N >= m_NMin);}  }
class C{  private void handleSubscribe(String[] args){switch (args[1]) {case "rr":    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);  payloadSubscribers.put(args[2],rrsub);idToType.put(args[2],args[1]);ReactiveSocket rrclient=createClient.get();Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));rrpub.subscribe(rrsub);break;case "rs":TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);payloadSubscribers.put(args[2],rssub);idToType.put(args[2],args[1]);ReactiveSocket rsclient=createClient.get();Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));rspub.subscribe(rssub);break;case "sub":TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);payloadSubscribers.put(args[2],rsubsub);idToType.put(args[2],args[1]);ReactiveSocket rsubclient=createClient.get();Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));rsubpub.subscribe(rsubsub);break;case "fnf":TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);fnfSubscribers.put(args[2],fnfsub);idToType.put(args[2],args[1]);ReactiveSocket fnfclient=createClient.get();Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));fnfpub.subscribe(fnfsub);break;default :break;}}  }
class C{  private void startOrDisable(){  Executor e;  if ((e=executor) != null) {    try {      e.execute(new ConsumerTask<T>(this));    } catch (    Throwable ex) {      for (int c; ; ) {        if ((c=ctl) == DISABLED || (c & ACTIVE) == 0)         break;        if (U.compareAndSwapInt(this,CTL,c,c & ~ACTIVE)) {          onError(ex);          break;        }      }    }  }}  }
class C{  private void doDml(String text) throws AdeException {  System.out.println("Executing DML statements");  final String[] stats=text.split(";");  for (  String stat : stats) {    System.out.println("Executing: " + stat);    m_dataStore.user().executeDml(stat);  }}  }
class C{  public ConnectNeuronsSimpleAction(final NetworkPanel networkPanel,final Collection<NeuronNode> sourceNeurons,final NeuronNode targetNeuron){  super("Connect Simple");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  this.sourceNeurons=sourceNeurons;  this.targetNeuron=targetNeuron;}  }
class C{  public boolean isFileType(){  return fileType;}  }
class C{  private void reallocate(final int row){  final int size=this.cols[row].length;  final int[] newCols=new int[size * 2];  final double[] newValues=new double[size * 2];  System.arraycopy(this.cols[row],0,newCols,0,size);  System.arraycopy(this.values[row],0,newValues,0,size);  this.cols[row]=newCols;  this.values[row]=newValues;}  }
class C{  public DigitalSignatureValidationException(String message){  super(message);}  }
class C{  ZoneOffsetTransition(LocalDateTime transition,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  this.transition=transition;  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  protected void savePassCodeAndExit(){  Intent resultIntent=new Intent();  resultIntent.putExtra(KEY_PASSCODE,mPassCodeDigits[0] + mPassCodeDigits[1] + mPassCodeDigits[2]+ mPassCodeDigits[3]);  setResult(RESULT_OK,resultIntent);  finish();}  }
class C{  public NemProperty(final String name,final String value){  this.name=name;  this.value=value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:08.783 -0500",hash_original_method="EA54CCD4F91FD8A9A4140D3CDE5AE34D",hash_generated_method="9D8AFB67B7EB3BF5B1543021205359EE") public int previous(){  return NativeCollation.previous(address);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private String constructWWNQuery(String systemId,String hsdId,List<String> wwnList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Add addOp=new Add(HDSConstants.ADD_WWN_TO_HSD_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.ADD,addOp);  attributeMap.put(HDSConstants.MODEL,model);  HostStorageDomain hsd=new HostStorageDomain(hsdId);  attributeMap.put(HDSConstants.HOST_STORAGE_DOMAIN,hsd);  List<WorldWideName> wwnObjList=new ArrayList<WorldWideName>();  if (null != wwnList && !wwnList.isEmpty()) {    for (    String initiatorWWN : wwnList) {      WorldWideName wwn=new WorldWideName(initiatorWWN);      wwnObjList.add(wwn);    }  }  attributeMap.put(HDSConstants.WWN_LIST,wwnObjList);  String addWWNQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_WWN_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return addWWNQuery;}  }
class C{  public static boolean allNotDisabled(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  checkArguments(debuggerProvider,rows);  for (  final int row : rows) {    final Pair<IDebugger,Integer> breakpoint=CBreakpointTableHelpers.findBreakpoint(debuggerProvider,row);    final BreakpointManager manager=breakpoint.first().getBreakpointManager();    final int breakpointIndex=breakpoint.second();    if (manager.getBreakpointStatus(BreakpointType.REGULAR,breakpointIndex) == BreakpointStatus.BREAKPOINT_DISABLED) {      return false;    }  }  return true;}  }
class C{  private Object newDynaCodeInstance(Class<?> clz) throws Exception {  try {    return getCreateClass(clz,this.parm);  } catch (  Exception e) {    throw new Exception("Failed to new instance of DynaCode class " + clz.getName(),e);  }}  }
class C{  @Override public Object deserializeKey(ITuple tuple){  throw new UnsupportedOperationException();}  }
class C{  public PreferenceChangeEvent(Preferences node,String key,String newValue){  super(node);  this.key=key;  this.newValue=newValue;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.229 -0400",hash_original_method="23536108F435071EFDBDD1BB2093DF63",hash_generated_method="9288C44D791B96442C881C2550D06EB5") public static void copy(byte[] input,Writer output) throws IOException {  ByteArrayInputStream in=new ByteArrayInputStream(input);  copy(in,output);}  }
class C{  public String str(){  return (m_obj != null) ? m_obj.toString() : "";}  }
class C{  public static URI determineFinalEndpoint(URI endpoint,String bucket,ClientConfiguration clientConfig){  try {    StringBuilder conbinedEndpoint=new StringBuilder();    conbinedEndpoint.append(String.format("%s://",endpoint.getScheme()));    conbinedEndpoint.append(buildCanonicalHost(endpoint,bucket,clientConfig));    conbinedEndpoint.append(endpoint.getPort() != -1 ? String.format(":%s",endpoint.getPort()) : "");    conbinedEndpoint.append(endpoint.getPath());    return new URI(conbinedEndpoint.toString());  } catch (  URISyntaxException ex) {    throw new IllegalArgumentException(ex.getMessage(),ex);  }}  }
class C{  public void commitRandom(final Randomizer rand){  if (!cbDistribution.getSelectedItem().equals(SimbrainConstants.NULL_STRING)) {    ProbDistribution pdf=(ProbDistribution)cbDistribution.getSelectedItem();    cardMap.get(pdf).commitRandom(rand);  }}  }
class C{  private static UnitValue parseUnitValue(String s,UnitValue emptyReplacement,boolean isHor){  if (s == null || s.length() == 0) {    return emptyReplacement;  }  String cs=s;  char c0=s.charAt(0);  if (c0 == '(' && s.charAt(s.length() - 1) == ')') {    s=s.substring(1,s.length() - 1);  }  if (c0 == 'n' && (s.equals("null") || s.equals("n"))) {    return null;  }  if (c0 == 'i' && s.equals("inf")) {    return UnitValue.INF;  }  int oper=getOper(s);  boolean inline=oper == UnitValue.ADD || oper == UnitValue.SUB || oper == UnitValue.MUL || oper == UnitValue.DIV;  if (oper != UnitValue.STATIC) {    String[] uvs;    if (inline == false) {      String sub=s.substring(4,s.length() - 1).trim();      uvs=toTrimmedTokens(sub,',');      if (uvs.length == 1) {        return parseUnitValue(sub,null,isHor);      }    } else {      char delim;      if (oper == UnitValue.ADD) {        delim='+';      } else       if (oper == UnitValue.SUB) {        delim='-';      } else       if (oper == UnitValue.MUL) {        delim='*';      } else {        delim='/';      }      uvs=toTrimmedTokens(s,delim);      if (uvs.length > 2) {        String last=uvs[uvs.length - 1];        String first=s.substring(0,s.length() - last.length() - 1);        uvs=new String[]{first,last};      }    }    if (uvs.length != 2) {      throw new IllegalArgumentException("Malformed UnitValue: '" + s + "'");    }    UnitValue sub1=parseUnitValue(uvs[0],null,isHor);    UnitValue sub2=parseUnitValue(uvs[1],null,isHor);    if (sub1 == null || sub2 == null) {      throw new IllegalArgumentException("Malformed UnitValue. Must be two sub-values: '" + s + "'");    }    return new UnitValue(isHor,oper,sub1,sub2,cs);  } else {    try {      String[] numParts=getNumTextParts(s);      float value=numParts[0].length() > 0 ? Float.parseFloat(numParts[0]) : 1;      return new UnitValue(value,numParts[1],isHor,oper,cs);    } catch (    Exception e) {      e.printStackTrace();      throw new IllegalArgumentException("Malformed UnitValue: '" + s + "'");    }  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private void bfsRecursive(char[][] grid,int i,int j){  if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == '0') {    return;  }  grid[i][j]='0';  bfsRecursive(grid,i + 1,j);  bfsRecursive(grid,i - 1,j);  bfsRecursive(grid,i,j + 1);  bfsRecursive(grid,i,j - 1);}  }
class C{  public TestTable2 selectByPrimaryKey(Integer id){  if (id == null)   return null;  this.model.id=id;  this.model.load();  if (this.model.entity()) {    return this.model;  } else {    return null;  }}  }
class C{  private void readObject(){}  }
class C{  private void mergeDepartures(TransitScheduleFactoryImpl factory,Map<Id<TransitRoute>,TransitRoute> transitRoutes,TransitRouteStop startTransitRouteStop,TransitRoute mergedTransitRoute,String[] listOfTransitRoutes){  for (int i=0; i < listOfTransitRoutes.length; i++) {    TransitRoute transitRoute=transitRoutes.get(Id.create(listOfTransitRoutes[i],TransitRoute.class));    if (mergedTransitRouteContainsTransitRouteStops(mergedTransitRoute,transitRoute,startTransitRouteStop)) {      for (      Departure departure : transitRoute.getDepartures().values()) {        String departureId=mergedTransitRoute.getDepartures().size() < 10 ? "0" + Integer.toString(mergedTransitRoute.getDepartures().size()) : Integer.toString(mergedTransitRoute.getDepartures().size());        Departure dep=factory.createDeparture(Id.create(departureId,Departure.class),departure.getDepartureTime() + transitRoute.getStop(startTransitRouteStop.getStopFacility()).getDepartureOffset());        dep.setVehicleId(departure.getVehicleId());        mergedTransitRoute.addDeparture(dep);      }    }  }}  }
class C{  public void reset(){  this.fBuffer.setLength(0);}  }
class C{  public static void printFieldValue(final FieldDescriptor field,final Object value,final Appendable output) throws IOException {  DEFAULT_PRINTER.printFieldValue(field,value,new TextGenerator(output));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.881 -0500",hash_original_method="2E006816EDCCACEA53589D73DD63B701",hash_generated_method="6079A4EA9337F722AA40E9EFA0393ECC") public void readString(ASN1StringType type) throws IOException {  if (tag == type.id) {    readContent();  } else   if (tag == type.constrId) {    throw new ASN1Exception("Decoding constructed ASN.1 string type is not provided");  } else {    throw expected("string");  }}  }
class C{  public void doDoubleClickAction(Graph graph){  String newName;  List<Node> nodes=graph.getNodes();  JCheckBox latentCheckBox=new JCheckBox("Latent",false);  loop:   while (true) {    JTextField nameField=new JTextField(8);    nameField.setText(getName());    nameField.setCaretPosition(0);    nameField.moveCaretPosition(getName().length());    JPanel message=new JPanel();    message.add(new JLabel("Name:"));    message.add(nameField);    message.add(latentCheckBox);    JOptionPane pane=new JOptionPane(message,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION);    JDialog dialog=pane.createDialog(this,"Node Properties");    dialog.pack();    dialog.setVisible(true);    newName=nameField.getText();    if (!NamingProtocol.isLegalName(newName)) {      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),NamingProtocol.getProtocolDescription());      continue;    } else     if (nodes != null) {      for (      Node node : nodes) {        if (newName.equals(node.toString()) && !newName.equals(super.getModelNode().getName())) {          JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"The name '" + newName + "' is already being used."+ "\nPlease choose another name.");          continue loop;        }      }    }    break;  }  boolean changed=false;  if (super.getModelNode() != null) {    super.getModelNode().setName(newName);    changed=true;  }  if (latentCheckBox.isSelected()) {    super.getModelNode().setNodeType(NodeType.LATENT);    firePropertyChange("resetGraph",null,null);    changed=true;  }  if (changed) {    firePropertyChange("editingValueChanged",null,null);  }}  }
class C{  public KeySelectorException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  protected void initSystemColorDefaults(UIDefaults table){  super.initSystemColorDefaults(table);}  }
class C{  public void replaceFile(String pathFile,String fileExt){  m_pathFile=pathFile;  m_inputStreamFile=null;  m_fileExt=fileExt;  m_isUpdateFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Seeker.getInstance().setDefaultQuality(getString(stack));  return null;}  }
class C{  public static ByteBuffer decryptData(final ByteBuffer buffer,final int size,final int key){  long seed1=key & 0xFFFF_FFFFL;  long seed2=0xEEEE_EEEEL;  int ch;  for (int i=0; i < size; i+=4) {    seed2=(seed2 + CRYPT_TABLE[0x400 + (int)(seed1 & 0xFF)]) & 0xFFFF_FFFFL;    ch=buffer.getInt(i) ^ (int)(seed1 + seed2);    seed1=((((~seed1 & 0xFFFF_FFFFL) << 0x15) + 0x1111_1111L) & 0xFFFF_FFFFL) | (seed1 >> 0x0B);    seed2=((ch & 0xFFFF_FFFFL) + seed2 + (seed2 << 5)+ 3) & 0xFFFF_FFFFL;    buffer.putInt(i,ch);  }  buffer.position(0);  return buffer;}  }
class C{  public boolean revertToDefault(){  boolean any=false;synchronized (PROPS) {    for (    SettingsGroup group : PROPS) {      any|=group.revertToDefault();    }  }  if (any) {    fireSettingsHandlerEvent(EventType.REVERT_TO_DEFAULT,null);  }  return any;}  }
class C{  private void scanButtonActionPerformed(){  numUr92=0;  updateStatusLineMessage("ProcessingFindingUR92s",COLOR_STATUS_OK);  duplexGroupImplementation.countUr92sAndQueryDuplexIdentityInfo();}  }
class C{  public long readLongNibble() throws IOException {  int b;  long x=0;  do {    x<<=3;    b=readBit();    x|=readInt(3);  } while (b == 0);  return x;}  }
class C{  public int size(){  return labels.length;}  }
class C{  public static void startFinalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  if (!finalizableReferenceClass.getName().equals(FINALIZABLE_REFERENCE)) {    throw new IllegalArgumentException("Expected " + FINALIZABLE_REFERENCE + ".");  }  Finalizer finalizer=new Finalizer(finalizableReferenceClass,queue,frqReference);  Thread thread=new Thread(finalizer);  thread.setName(Finalizer.class.getName());  thread.setDaemon(true);  try {    if (inheritableThreadLocals != null) {      inheritableThreadLocals.set(thread,null);    }  } catch (  Throwable t) {    logger.log(Level.INFO,"Failed to clear thread local values inherited by reference finalizer thread.",t);  }  thread.start();}  }
class C{  public SimpleUserDirectory(User user){  super(Collections.singletonMap(user.getIdentifier(),user));}  }
class C{  public static final void pause(final int milliseconds){  if (milliseconds >= 1000 || logger.isDebugEnabled()) {    logger.info("Pausing for {} ms...",milliseconds);  }  final long target=System.currentTimeMillis() + milliseconds;  try {    for (; ; ) {      long msLeft=target - System.currentTimeMillis();      if (msLeft <= 0) {        break;      }      Thread.sleep(msLeft);    }  } catch (  InterruptedException e) {    Assert.fail("interrupted",e);  }}  }
class C{  public Statement gt(Object value){  return compare(">",value);}  }
class C{  protected void initializeDynamicSupport(BridgeContext ctx,Element e,GraphicsNode node){  if (!ctx.isInteractive())   return;  ctx.bind(e,node);  if (ctx.isDynamic()) {    this.e=e;    this.node=node;    this.ctx=ctx;    ((SVGOMElement)e).setSVGContext(this);  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public CProjectDebuggerContainer(final INaviProject project){  Preconditions.checkNotNull(project,"IE01954: Project argument can not be null");  m_project=project;}  }
class C{  private boolean checkRange(int num){  return num >= 0 && num <= 255;}  }
class C{  public DummyElementProcessor(ElementProcessor parentProcessor){  super(parentProcessor);}  }
class C{  public ReadWriteLockedOffHeapHashMapFactory(PageSource tableSource,boolean tableAllocationsSteal,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,int tableSize){  this.storageEngineFactory=storageEngineFactory;  this.tableSource=tableSource;  this.tableAllocationsSteal=tableAllocationsSteal;  this.tableSize=tableSize;}  }
class C{  protected boolean isDhcpPacket(Ethernet frame){  IPacket payload=frame.getPayload();  if (payload == null)   return false;  IPacket p2=payload.getPayload();  if (p2 == null)   return false;  IPacket p3=p2.getPayload();  if ((p3 != null) && (p3 instanceof DHCP))   return true;  return false;}  }
class C{  public MResourceAssignment(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  private static void delete(List<URI> ids){  performSuccessFail(ids,new DeactivateOperation(),DELETED_SUCCESS,DELETED_ERROR);  list();}  }
class C{  protected void removeLastChildNodeIfEmptyText(Node parentNode,boolean closedTag){  if (parentNode == null) {    return;  }  Node lastChild=parentNode.getLastChild();  if (lastChild == null) {    return;  }  if (lastChild.getNodeType() != Node.NodeType.TEXT) {    return;  }  if (closedTag) {    if (parentNode.getChildNodesCount() == 1) {      return;    }  }  Text text=(Text)lastChild;  if (text.isBlank()) {    lastChild.detachFromParent();  }}  }
class C{  private Node delete(Node x,Key key){  int cmp=key.compareTo(x.key);  if (cmp < 0) {    x.left=delete(x.left,key);  } else   if (cmp > 0) {    x.right=delete(x.right,key);  } else {    if (x.left == null) {      return x.right;    } else     if (x.right == null) {      return x.left;    } else {      Node y=x;      x=min(y.right);      x.right=deleteMin(y.right);      x.left=y.left;    }  }  x.size=1 + size(x.left) + size(x.right);  x.height=1 + Math.max(height(x.left),height(x.right));  return balance(x);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String test=getString(stack);  Airing a=getAir(stack);  if (a == null)   return Boolean.FALSE;  if ("HDTV".equalsIgnoreCase(test))   return a.isHDTV() ? Boolean.TRUE : Boolean.FALSE; else   if ("Stereo".equalsIgnoreCase(test))   return a.isStereo() ? Boolean.TRUE : Boolean.FALSE; else   if ("CC".equalsIgnoreCase(test))   return a.isCC() ? Boolean.TRUE : Boolean.FALSE; else   if ("SAP".equalsIgnoreCase(test))   return a.isSAP() ? Boolean.TRUE : Boolean.FALSE; else   if ("Subtitled".equalsIgnoreCase(test))   return a.isSubtitled() ? Boolean.TRUE : Boolean.FALSE; else   if ("3D".equalsIgnoreCase(test))   return a.is3D() ? Boolean.TRUE : Boolean.FALSE; else   if ("DD5.1".equalsIgnoreCase(test))   return a.isDD51() ? Boolean.TRUE : Boolean.FALSE; else   if ("Dolby".equalsIgnoreCase(test))   return a.isDolby() ? Boolean.TRUE : Boolean.FALSE; else   if ("Letterbox".equalsIgnoreCase(test))   return a.isLetterbox() ? Boolean.TRUE : Boolean.FALSE; else   if ("Live".equalsIgnoreCase(test))   return a.isLive() ? Boolean.TRUE : Boolean.FALSE; else   if ("New".equalsIgnoreCase(test))   return a.isNew() ? Boolean.TRUE : Boolean.FALSE; else   if ("Widescreen".equalsIgnoreCase(test))   return a.isWidescreen() ? Boolean.TRUE : Boolean.FALSE; else   if ("Surround".equalsIgnoreCase(test))   return a.isSurround() ? Boolean.TRUE : Boolean.FALSE; else   if ("Dubbed".equalsIgnoreCase(test))   return a.isDubbed() ? Boolean.TRUE : Boolean.FALSE; else   if ("Taped".equalsIgnoreCase(test))   return a.isTaped() ? Boolean.TRUE : Boolean.FALSE; else   return Boolean.FALSE;}  }
class C{  public static void initialize(Context context,ImagePipelineConfig imagePipelineConfig){  ImagePipelineFactory.initialize(imagePipelineConfig);  initializeDrawee(context);}  }
class C{  public static Graph subscan(Object o,boolean trace){  if (o == null) {    return null;  }  if (Graph.class.equals(o.getClass())) {    return (Graph)o;  }  Graph graph=new Graph(true,trace);  Node root=graph.expandReactiveSate(o,null);  graph.addDownstream(root,null);  return graph;}  }
class C{  public void testGetCheckSum(){  Em18RfidProtocol instance=new Em18RfidProtocol();  assertEquals("C5",instance.getCheckSum(msgStandalone));}  }
class C{  public long totalTime(){  long time=0;  for (  ProfilerSection sec : sections()) {    time+=sec.totalTime();  }  for (  ProfilerEntity ent : entities()) {    time+=ent.getDuration();  }  return time;}  }
class C{  public AbCameraView(Context context){  super(context);  surfaceHolder=getHolder();  surfaceHolder.addCallback(this);  surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);}  }
class C{  private void refresh(final IResource[] resources){  refresh(new LabelProviderChangedEvent(this,resources));}  }
class C{  public boolean containsValue(int value){  return indexOfValue(value) >= 0;}  }
class C{  public void testThrottleDispose(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.throttleDispose();}  }
