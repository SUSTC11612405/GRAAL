class C{  private final static void usage(String msg){  System.err.println(msg);  System.err.println("Usage: java Base64 -e|-d inputfile outputfile");}  }
class C{  void allocateIfIndexRoot(int logPos,int tableId,Row row){  if (tableId == META_TABLE_ID) {    int rootPageId=row.getValue(3).getInt();    if (reservedPages == null) {      reservedPages=New.hashMap();    }    reservedPages.put(rootPageId,logPos);  }}  }
class C{  public SWFActions tagDoAction() throws IOException {  if (tags != null) {    return tags.tagDoAction();  }  return null;}  }
class C{  public lalr_item add(lalr_item itm) throws internal_error {  lalr_item other;  not_null(itm);  other=(lalr_item)_all.get(itm);  if (other != null) {    other.lookahead().add(itm.lookahead());    return other;  } else {    hashcode_cache=null;    _all.put(itm,itm);    return itm;  }}  }
class C{  public CSelectionCriteriumPanel(final CSelectionCriterium criterium){  super(new BorderLayout());  m_criterium=criterium;  selectionStateBox.addActionListener(selectionStateBoxListener);  initPanel();}  }
class C{  public ApprovalDialog(Dialog owner,String title){  super(owner,title);}  }
class C{  @Override protected void update(){  m_ButtonApplyFilter.setEnabled(hasData());  m_PanelAttributes.setEnabled(hasData());  m_PanelDataSummary.setEnabled(hasData());  m_ButtonRemoveAttributes.setEnabled(hasData());  m_PanelAttributeSummary.setEnabled(hasData());  m_PanelClassAttributes.setEnabled(hasData());  m_ButtonSetClassAttributes.setEnabled(hasData());  if (hasData()) {    m_PanelAttributes.setInstances(getData());    m_PanelDataSummary.setInstances(getData());    m_PanelAttributeSummary.setInstances(getData());    m_PanelClassAttributes.setInstances(getData());  }}  }
class C{  public static boolean isSoftDeleted(Class entityClass){  return SoftDelete.class.isAssignableFrom(entityClass);}  }
class C{  @Override public void onCreate(){  super.onCreate();  Log_OC.d(TAG,"Creating service");  mNotificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  HandlerThread thread=new HandlerThread("FileDownloaderThread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mServiceLooper=thread.getLooper();  mServiceHandler=new ServiceHandler(mServiceLooper,this);  mBinder=new FileDownloaderBinder();  AccountManager am=AccountManager.get(getApplicationContext());  am.addOnAccountsUpdatedListener(this,null,false);}  }
class C{  public static boolean isLocalNotInitializerScope(Scope scope){  return scope instanceof FunctionOrValue || scope instanceof Constructor || scope instanceof ControlBlock|| scope instanceof NamedArgumentList|| scope instanceof Specification;}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(LOCAL_TEMP_PATH.toFile());}  }
class C{  public IgniteUuid lastId(){  return ids[ids.length - 1];}  }
class C{  public DateBuilder atMinute(int atMinute){  validateMinute(atMinute);  this.minute=atMinute;  return this;}  }
class C{  BitTorrentSettingsWindow(SetupManager manager){  super(manager,I18n.tr("BitTorrent Sharing Settings"),describeText(),LEARN_MORE_URL);}  }
class C{  protected static void doConfigure(ConfigurationDBAdapter configuration,Document doc) throws RuntimeException {  Element root=doc.getDocumentElement();  DOMElementIterator eventTypeNodeIterator=new DOMElementIterator(root.getChildNodes());  while (eventTypeNodeIterator.hasNext()) {    Element element=eventTypeNodeIterator.next();    String nodeName=element.getNodeName();    if (nodeName.equals("jdbc-connection")) {      handleConnection(configuration,element);    } else     if (nodeName.equals("dml")) {      handleDml(configuration,element);    } else     if (nodeName.equals("upsert")) {      handleUpsert(configuration,element);    } else     if (nodeName.equals("executors")) {      handleExecutors(configuration,element);    }  }}  }
class C{  public static List<String> extractOutcomeLabels(File featureVectorsFile) throws IOException {  List<String> result=new ArrayList<>();  List<String> lines=FileUtils.readLines(featureVectorsFile);  for (  String line : lines) {    String label=line.split("\\s")[0];    result.add(label);  }  return result;}  }
class C{  public static AnnotationAnalysisResult analyzeAnnotations(Annotation[] annotations){  boolean preemptive=false;  int priority=0;  boolean hasPrioritySetting=false;  for (  Annotation annotation : annotations) {    if (annotation instanceof Priority) {      priority=((Priority)annotation).value();      hasPrioritySetting=true;    }    if (annotation instanceof Drop) {      preemptive=true;    }  }  if (!hasPrioritySetting && preemptive) {    priority=1;  }  return new AnnotationAnalysisResult(priority,preemptive);}  }
class C{  @Override public boolean shouldExit(){  Long timeoutAt=get();  if (timeoutAt == null) {    return false;  }  return timeoutAt - nanoTime() < 0L;}  }
class C{  @Override public void printStackTrace(PrintStream output){synchronized (output) {    IStatus status=getStatus();    if (status.getException() != null) {      String path="()";      if (status instanceof IResourceStatus)       path="(" + ((IResourceStatus)status).getPath() + ")";      output.print(getClass().getName() + path + "["+ status.getCode()+ "]: ");      status.getException().printStackTrace(output);    } else     super.printStackTrace(output);  }}  }
class C{  private CThreadFunctions(){}  }
class C{  private String proxyToString(Object proxy){  Class<?>[] interfaces=proxy.getClass().getInterfaces();  if (interfaces.length == 0) {    return "Proxy[" + this + "]";  }  String iface=interfaces[0].getName();  if (iface.equals("java.rmi.Remote") && interfaces.length > 1) {    iface=interfaces[1].getName();  }  int dot=iface.lastIndexOf('.');  if (dot >= 0) {    iface=iface.substring(dot + 1);  }  return "Proxy[" + iface + ","+ this+ "]";}  }
class C{  public DDObjectInputStream(InputStream stream) throws IOException {  super(stream);}  }
class C{  public static OFGroup createMPLSForwardingFastFailover(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_FAST_FAILOVER << 24)| (OFDPAGroupType.MPLS_FORWARDING << 28));}  }
class C{  public ServerError(String s,Error err){  super(s,err);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Text createText(){  TextImpl text=new TextImpl();  return text;}  }
class C{  public void generateXML(File file) throws GeneratorException, IOException, Arguments.ArgumentException {  XMLWriter writer=new XMLWriter(new BufferedWriter(new FileWriter(file)));  writer.writeText("<?xml version=\"1.0\" standalone=\"yes\"?>");  writer.writeComment("Generated by BEAUTi " + version.getVersionString(),"      by Alexei J. Drummond, Andrew Rambaut and Marc A. Suchard","      Department of Computer Science, University of Auckland and","      Institute of Evolutionary Biology, University of Edinburgh","      David Geffen School of Medicine, University of California, Los Angeles","      http://beast.bio.ed.ac.uk/");  writer.writeOpenTag("beast");  writer.writeText("");  generateInsertionPoint(ComponentGenerator.InsertionPoint.BEFORE_TAXA,writer);  if (options.originDate != null) {    Taxon originTaxon=new Taxon("originTaxon");    options.originDate.setUnits(options.units);    originTaxon.setDate(options.originDate);    writeTaxon(originTaxon,true,false,writer);  }  try {    writeTaxa(options.taxonList,writer);    writer.writeText("");    if (!options.hasIdenticalTaxa()) {      for (      AbstractPartitionData partition : options.dataPartitions) {        if (partition.getTaxonList() != null) {          writeDifferentTaxa(partition,writer);        }      }    } else {      for (      PartitionPattern partitionPattern : options.getPartitionPattern()) {        if (partitionPattern.getTaxonList() != null && partitionPattern.getPatterns().hasMask()) {          writeDifferentTaxa(partitionPattern,writer);        }      }    }  } catch (  Exception e) {    e.printStackTrace(System.err);    throw new GeneratorException("Taxon list generation has failed:\n" + e.getMessage());  }  List<Taxa> taxonSets=options.taxonSets;  try {    if (taxonSets != null && taxonSets.size() > 0 && !options.useStarBEAST) {      tmrcaStatisticsGenerator.writeTaxonSets(writer,taxonSets);    }  } catch (  Exception e) {    e.printStackTrace();    throw new GeneratorException("Taxon sets generation has failed:\n" + e.getMessage());  }  generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_TAXA,writer);  List<Alignment> alignments=new ArrayList<Alignment>();  try {    for (    AbstractPartitionData partition : options.dataPartitions) {      Alignment alignment=null;      if (partition instanceof PartitionData) {        alignment=((PartitionData)partition).getAlignment();      }      if (alignment != null && !alignments.contains(alignment)) {        alignments.add(alignment);      }    }    if (alignments.size() > 0) {      alignmentGenerator.writeAlignments(alignments,writer);      generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_SEQUENCES,writer);    }  } catch (  Exception e) {    e.printStackTrace();    throw new GeneratorException("Alignments generation has failed:\n" + e.getMessage());  }  try {    if (!options.samplePriorOnly) {      List<Microsatellite> microsatList=new ArrayList<Microsatellite>();      for (      AbstractPartitionData partition : options.dataPartitions) {        if (partition.getTaxonList() != null) {switch (partition.getDataType().getType()) {case DataType.NUCLEOTIDES:case DataType.AMINO_ACIDS:case DataType.CODONS:case DataType.COVARION:case DataType.TWO_STATES:            patternListGenerator.writePatternList((PartitionData)partition,writer);          break;case DataType.GENERAL:case DataType.CONTINUOUS:        break;case DataType.MICRO_SAT:      patternListGenerator.writePatternList((PartitionPattern)partition,microsatList,writer);    break;default :  throw new IllegalArgumentException("Unsupported data type");}writer.writeText("");}}}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Pattern lists generation has failed:\n" + e.getMessage());}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_PATTERNS,writer);try {for (PartitionTreePrior prior : options.getPartitionTreePriors()) {treePriorGenerator.writeTreePriorModel(prior,writer);writer.writeText("");}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Tree prior model generation has failed:\n" + e.getMessage());}try {for (PartitionTreeModel model : options.getPartitionTreeModels()) {initialTreeGenerator.writeStartingTree(model,writer);writer.writeText("");}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Starting tree generation has failed:\n" + e.getMessage());}try {for (PartitionTreeModel model : options.getPartitionTreeModels()) {treeModelGenerator.writeTreeModel(model,writer);writer.writeText("");}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_TREE_MODEL,writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Tree model generation has failed:\n" + e.getMessage());}try {if (taxonSets != null && taxonSets.size() > 0 && !options.useStarBEAST) {tmrcaStatisticsGenerator.writeTMRCAStatistics(writer);}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("TMRCA statistics generation has failed:\n" + e.getMessage());}try {for (PartitionTreeModel model : options.getPartitionTreeModels()) {treePriorGenerator.writePriorLikelihood(model,writer);writer.writeText("");}for (PartitionTreePrior prior : options.getPartitionTreePriors()) {treePriorGenerator.writeMultiLociTreePriors(prior,writer);}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_TREE_PRIOR,writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Tree prior likelihood generation has failed:\n" + e.getMessage());}try {for (PartitionClockModel model : options.getPartitionClockModels()) {clockModelGenerator.writeBranchRatesModel(model,writer);writer.writeText("");}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Branch rates model generation has failed:\n" + e.getMessage());}try {for (PartitionSubstitutionModel model : options.getPartitionSubstitutionModels()) {substitutionModelGenerator.writeSubstitutionSiteModel(model,writer);writer.writeText("");}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_SUBSTITUTION_MODEL,writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Substitution model or site model generation has failed:\n" + e.getMessage());}try {for (PartitionClockModel model : options.getPartitionClockModels()) {clockModelGenerator.writeAllMus(model,writer);}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Clock model generation has failed:\n" + e.getMessage());}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_SITE_MODEL,writer);try {for (AbstractPartitionData partition : options.dataPartitions) {if (partition.getTaxonList() != null) {if (partition instanceof PartitionData) {if (partition.getDataType().getType() != DataType.GENERAL && partition.getDataType().getType() != DataType.CONTINUOUS) {treeLikelihoodGenerator.writeTreeLikelihood((PartitionData)partition,writer);writer.writeText("");}} else if (partition instanceof PartitionPattern) {treeLikelihoodGenerator.writeTreeLikelihood((PartitionPattern)partition,writer);writer.writeText("");} else {throw new GeneratorException("Find unrecognized partition:\n" + partition.getName());}}}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_TREE_LIKELIHOOD,writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Tree likelihood generation has failed:\n" + e.getMessage());}if (options.useStarBEAST) {try {starBeastGenerator.writeSpecies(writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("*BEAST species section generation has failed:\n" + e.getMessage());}List<Taxa> speciesSets=options.speciesSets;try {if (speciesSets != null && speciesSets.size() > 0) {tmrcaStatisticsGenerator.writeTaxonSets(writer,speciesSets);}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Species sets generation has failed:\n" + e.getMessage());}try {if (speciesSets != null && speciesSets.size() > 0) {starBeastGenerator.writeStartingTreeForCalibration(writer);}starBeastGenerator.writeSpeciesTree(writer,speciesSets != null && speciesSets.size() > 0);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("*BEAST trees generation has failed:\n" + e.getMessage());}try {if (speciesSets != null && speciesSets.size() > 0) {tmrcaStatisticsGenerator.writeTMRCAStatistics(writer);}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("*BEAST TMRCA statistics generation has failed:\n" + e.getMessage());}try {starBeastGenerator.writeSTARBEAST(writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("*BEAST trees section generation has failed:\n" + e.getMessage());}}generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_TRAITS,writer);try {generateInsertionPoint(ComponentGenerator.InsertionPoint.BEFORE_OPERATORS,writer);List<Operator> operators=options.selectOperators();operatorsGenerator.writeOperatorSchedule(operators,writer);writer.writeText("");generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_OPERATORS,writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("Operators generation has failed:\n" + e.getMessage());}try {writeMCMC(writer);writer.writeText("");generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_MCMC,writer);} catch (Exception e) {e.printStackTrace();throw new GeneratorException("MCMC or log generation has failed:\n" + e.getMessage());}try {writeTimerReport(writer);writer.writeText("");if (options.performTraceAnalysis) {writeTraceAnalysis(writer);}if (options.generateCSV) {for (PartitionTreePrior prior : options.getPartitionTreePriors()) {treePriorGenerator.writeEBSPAnalysisToCSVfile(prior,writer);}}} catch (Exception e) {e.printStackTrace();throw new GeneratorException("The last part of XML generation has failed:\n" + e.getMessage());}writer.writeCloseTag("beast");writer.flush();writer.close();}  }
class C{  public void testMergeOneEjbRefIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <ejb-ref>" + "    <ejb-ref-name>ejbref1</ejb-ref-name>"+ "    <ejb-ref-type>ejbref1.type</ejb-ref-type>"+ "    <home>ejbref1.homeInterface</home>"+ "    <remote>ejbref1.remoteInterface</remote>"+ "  </ejb-ref>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  List<Element> ejbRefs=srcWebXml.getElements(WebXmlType.EJB_REF);  assertEquals(1,ejbRefs.size());}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cIdUser=(String)oForm.get(Constants.USUARIO_USUARIO_FIELD);  if ((cIdUser == null) || ("".equals(cIdUser))) {    cIdUser=(String)request.getAttribute(Constants.USUARIO_USUARIO_FIELD);  }  DatosUsuario oUser=null;  try {    oUser=UserAdminHelper.getUser(request,oForm);  } catch (  Exception e) {    return mapping.findForward(GLOBAL_FORWARD_ERROR);  }  request.setAttribute(USER_KEY,oUser);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  private DocLine[] loadLines(MOrder order){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MOrderLine[] lines=order.getLines();  for (int i=0; i < lines.length; i++) {    MOrderLine line=lines[i];    DocLine docLine=new DocLine(line,this);    BigDecimal Qty=line.getQtyOrdered();    docLine.setQty(Qty,order.isSOTrx());    BigDecimal PriceActual=line.getPriceActual();    BigDecimal PriceCost=null;    if (getDocumentType().equals(DOCTYPE_POrder))     PriceCost=line.getPriceCost();    BigDecimal LineNetAmt=null;    if (PriceCost != null && PriceCost.signum() != 0)     LineNetAmt=Qty.multiply(PriceCost); else     LineNetAmt=line.getLineNetAmt();    docLine.setAmount(LineNetAmt);    BigDecimal PriceList=line.getPriceList();    int C_Tax_ID=docLine.getC_Tax_ID();    if (isTaxIncluded() && C_Tax_ID != 0) {      MTax tax=MTax.get(getCtx(),C_Tax_ID);      if (!tax.isZeroTax()) {        BigDecimal LineNetAmtTax=tax.calculateTax(LineNetAmt,true,getStdPrecision());        log.fine("LineNetAmt=" + LineNetAmt + " - Tax="+ LineNetAmtTax);        LineNetAmt=LineNetAmt.subtract(LineNetAmtTax);        for (int t=0; t < m_taxes.length; t++) {          if (m_taxes[t].getC_Tax_ID() == C_Tax_ID) {            m_taxes[t].addIncludedTax(LineNetAmtTax);            break;          }        }        BigDecimal PriceListTax=tax.calculateTax(PriceList,true,getStdPrecision());        PriceList=PriceList.subtract(PriceListTax);      }    }    docLine.setAmount(LineNetAmt,PriceList,Qty);    list.add(docLine);  }  DocLine[] dl=new DocLine[list.size()];  list.toArray(dl);  return dl;}  }
class C{  @Override public synchronized void addObserver(Observer o){  super.addObserver(o);}  }
class C{  public Long addFolderSelf(String SID,Long parentFileExplorerItemId,String fileName,Long room_id,Boolean isOwner) throws AxisFault {  return this.geFileServiceProxy().addFolderSelf(SID,parentFileExplorerItemId,fileName,room_id,isOwner);}  }
class C{  public SVGFontFace createFontFace(BridgeContext ctx,Element fontFaceElement){  String familyNames=fontFaceElement.getAttributeNS(null,SVG_FONT_FAMILY_ATTRIBUTE);  String unitsPerEmStr=fontFaceElement.getAttributeNS(null,SVG_UNITS_PER_EM_ATTRIBUTE);  if (unitsPerEmStr.length() == 0) {    unitsPerEmStr=SVG_FONT_FACE_UNITS_PER_EM_DEFAULT_VALUE;  }  float unitsPerEm;  try {    unitsPerEm=SVGUtilities.convertSVGNumber(unitsPerEmStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_UNITS_PER_EM_ATTRIBUTE,unitsPerEmStr});  }  String fontWeight=fontFaceElement.getAttributeNS(null,SVG_FONT_WEIGHT_ATTRIBUTE);  if (fontWeight.length() == 0) {    fontWeight=SVG_FONT_FACE_FONT_WEIGHT_DEFAULT_VALUE;  }  String fontStyle=fontFaceElement.getAttributeNS(null,SVG_FONT_STYLE_ATTRIBUTE);  if (fontStyle.length() == 0) {    fontStyle=SVG_FONT_FACE_FONT_STYLE_DEFAULT_VALUE;  }  String fontVariant=fontFaceElement.getAttributeNS(null,SVG_FONT_VARIANT_ATTRIBUTE);  if (fontVariant.length() == 0) {    fontVariant=SVG_FONT_FACE_FONT_VARIANT_DEFAULT_VALUE;  }  String fontStretch=fontFaceElement.getAttributeNS(null,SVG_FONT_STRETCH_ATTRIBUTE);  if (fontStretch.length() == 0) {    fontStretch=SVG_FONT_FACE_FONT_STRETCH_DEFAULT_VALUE;  }  String slopeStr=fontFaceElement.getAttributeNS(null,SVG_SLOPE_ATTRIBUTE);  if (slopeStr.length() == 0) {    slopeStr=SVG_FONT_FACE_SLOPE_DEFAULT_VALUE;  }  float slope;  try {    slope=SVGUtilities.convertSVGNumber(slopeStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,slopeStr});  }  String panose1=fontFaceElement.getAttributeNS(null,SVG_PANOSE_1_ATTRIBUTE);  if (panose1.length() == 0) {    panose1=SVG_FONT_FACE_PANOSE_1_DEFAULT_VALUE;  }  String ascentStr=fontFaceElement.getAttributeNS(null,SVG_ASCENT_ATTRIBUTE);  if (ascentStr.length() == 0) {    ascentStr=String.valueOf(unitsPerEm * 0.8);  }  float ascent;  try {    ascent=SVGUtilities.convertSVGNumber(ascentStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,ascentStr});  }  String descentStr=fontFaceElement.getAttributeNS(null,SVG_DESCENT_ATTRIBUTE);  if (descentStr.length() == 0) {    descentStr=String.valueOf(unitsPerEm * 0.2);  }  float descent;  try {    descent=SVGUtilities.convertSVGNumber(descentStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,descentStr});  }  String underlinePosStr=fontFaceElement.getAttributeNS(null,SVG_UNDERLINE_POSITION_ATTRIBUTE);  if (underlinePosStr.length() == 0) {    underlinePosStr=String.valueOf(-3 * unitsPerEm / 40);  }  float underlinePos;  try {    underlinePos=SVGUtilities.convertSVGNumber(underlinePosStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,underlinePosStr});  }  String underlineThicknessStr=fontFaceElement.getAttributeNS(null,SVG_UNDERLINE_THICKNESS_ATTRIBUTE);  if (underlineThicknessStr.length() == 0) {    underlineThicknessStr=String.valueOf(unitsPerEm / 20);  }  float underlineThickness;  try {    underlineThickness=SVGUtilities.convertSVGNumber(underlineThicknessStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,underlineThicknessStr});  }  String strikethroughPosStr=fontFaceElement.getAttributeNS(null,SVG_STRIKETHROUGH_POSITION_ATTRIBUTE);  if (strikethroughPosStr.length() == 0) {    strikethroughPosStr=String.valueOf(3 * ascent / 8);  }  float strikethroughPos;  try {    strikethroughPos=SVGUtilities.convertSVGNumber(strikethroughPosStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,strikethroughPosStr});  }  String strikethroughThicknessStr=fontFaceElement.getAttributeNS(null,SVG_STRIKETHROUGH_THICKNESS_ATTRIBUTE);  if (strikethroughThicknessStr.length() == 0) {    strikethroughThicknessStr=String.valueOf(unitsPerEm / 20);  }  float strikethroughThickness;  try {    strikethroughThickness=SVGUtilities.convertSVGNumber(strikethroughThicknessStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,strikethroughThicknessStr});  }  String overlinePosStr=fontFaceElement.getAttributeNS(null,SVG_OVERLINE_POSITION_ATTRIBUTE);  if (overlinePosStr.length() == 0) {    overlinePosStr=String.valueOf(ascent);  }  float overlinePos;  try {    overlinePos=SVGUtilities.convertSVGNumber(overlinePosStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,overlinePosStr});  }  String overlineThicknessStr=fontFaceElement.getAttributeNS(null,SVG_OVERLINE_THICKNESS_ATTRIBUTE);  if (overlineThicknessStr.length() == 0) {    overlineThicknessStr=String.valueOf(unitsPerEm / 20);  }  float overlineThickness;  try {    overlineThickness=SVGUtilities.convertSVGNumber(overlineThicknessStr);  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,fontFaceElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FONT_FACE_SLOPE_DEFAULT_VALUE,overlineThicknessStr});  }  List srcs=null;  Element fontElt=SVGUtilities.getParentElement(fontFaceElement);  if (!fontElt.getNamespaceURI().equals(SVG_NAMESPACE_URI) || !fontElt.getLocalName().equals(SVG_FONT_TAG)) {    srcs=getFontFaceSrcs(fontFaceElement);  }  return new SVGFontFace(fontFaceElement,srcs,familyNames,unitsPerEm,fontWeight,fontStyle,fontVariant,fontStretch,slope,panose1,ascent,descent,strikethroughPos,strikethroughThickness,underlinePos,underlineThickness,overlinePos,overlineThickness);}  }
class C{  static void pauseThread(long duration){  try {    Thread.sleep(duration);  } catch (  Exception e) {    s_logger.warn("Exception while trying to sleep",e);  }}  }
class C{  @Nonnull public BugInstance addMethod(PreorderVisitor visitor){  MethodAnnotation methodAnnotation=MethodAnnotation.fromVisitedMethod(visitor);  addMethod(methodAnnotation);  addSourceLinesForMethod(methodAnnotation,SourceLineAnnotation.fromVisitedMethod(visitor));  return this;}  }
class C{  public GridConcurrentPhantomHashSet(int initCap,float loadFactor,int conLevel){  store=new GridConcurrentHashSet<>(initCap,loadFactor,conLevel);}  }
class C{  public FileAlreadyExistsException(final String message){  super(message);}  }
class C{  @Nullable static Date parseDate(@NonNull String dateString){  Date date=parseRFC822Date(dateString);  if (null == date) {    date=parseRFC8601Date(dateString);  }  if (null == date) {    date=parseRFC3339Date(dateString);  }  if (null == date) {    Log.w(TAG,"Malformed date " + dateString);  }  return date;}  }
class C{  public boolean includesMax(){  return maxInclusive;}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(getAccessFlags());}  }
class C{  @Override public boolean showContextMenu(){  if (isPressed() && mSelectedPosition >= 0) {    int index=mSelectedPosition - mFirstPosition;    View v=getChildAt(index);    return dispatchLongPress(v,mSelectedPosition,mSelectedRowId);  }  return false;}  }
class C{  public boolean isTransferring(){  return (numberOfTransmissions > 0);}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  private void skipUntilEndOfMultiLineComment(BufferedReader bufferedReader,StringBuilder minified) throws IOException {  char cPrevious=0;  boolean previousSet=false;  while (true) {    int cInt=bufferedReader.read();    if (cInt == -1) {      return;    }    char c=(char)cInt;    if (c == '/' && previousSet && cPrevious == '*') {      return;    }    if (c == '\n') {      minified.append('\n');    }    previousSet=true;    cPrevious=c;  }}  }
class C{  private final int appendNode(int w0,int w1,int w2,int w3){  int slotnumber=nodes.appendSlot(w0,w1,w2,w3);  if (DEBUG)   System.out.println(slotnumber + ": " + w0+ " "+ w1+ " "+ w2+ " "+ w3);  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,slotnumber);  previousSiblingWasParent=false;  return slotnumber;}  }
class C{  public CouchbaseManifestComparator(DistributedMap connection){  this.key="default";  this.versionedKey=newKey(1L).toJson();  this.connection=connection;}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  public synchronized StringBuffer insert(int index,char[] chars){  insert0(index,chars);  return this;}  }
class C{  public static final long mortonEncode(final String hash){  int level=11;  long b;  long l=0L;  for (  char c : hash.toCharArray()) {    b=(long)(BASE_32_STRING.indexOf(c));    l|=(b << ((level-- * 5) + MORTON_OFFSET));  }  return BitUtil.flipFlop(l);}  }
class C{  public static Parameter[] parameterizeArguments(final ClassNode receiver,final MethodNode m){  Map<String,GenericsType> genericFromReceiver=GenericsUtils.extractPlaceholders(receiver);  Map<String,GenericsType> contextPlaceholders=extractGenericsParameterMapOfThis(m);  Parameter[] methodParameters=m.getParameters();  Parameter[] params=new Parameter[methodParameters.length];  for (int i=0; i < methodParameters.length; i++) {    Parameter methodParameter=methodParameters[i];    ClassNode paramType=methodParameter.getType();    params[i]=buildParameter(genericFromReceiver,contextPlaceholders,methodParameter,paramType);  }  return params;}  }
class C{  public NodesStatsRequest jvm(boolean jvm){  this.jvm=jvm;  return this;}  }
class C{  public boolean scheduleExecutorTask(Runnable task){  ClassLoader loader=Thread.currentThread().getContextClassLoader();synchronized (_executorLock) {    _executorTaskCount++;    if (_executorTaskCount <= _executorTaskMax || _executorTaskMax < 0) {      boolean isPriority=false;      boolean isQueue=true;      boolean isWake=true;      return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);    } else {      ExecutorQueueItem item=new ExecutorQueueItem(task,loader);      if (_executorQueueTail != null)       _executorQueueTail._next=item; else       _executorQueueHead=item;      _executorQueueTail=item;      return false;    }  }}  }
class C{  public static int hash(boolean value){  return value ? 1231 : 1237;}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public void deleteNodes(final List<NaviNode> nodes){  final List<INaviViewNode> convertedNodes=GraphConverters.convert(nodes);  getGraph().firePreEvent();  getRawView().getContent().deleteNodes(convertedNodes);  getGraph().firePostEvent();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.424 -0500",hash_original_method="B3697246130D2B10DFD352DF4E32FBC6",hash_generated_method="654E7775CBB7CAD048A0C4280FAC85E3") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public FromNetASCIIOutputStream(OutputStream output){  super(output);  __lastWasCR=false;}  }
class C{  public static void initializeWithoutPassword(int appId){  Assert.assertTrue("Initial database setup not done",prefs.initialWorkPerformed);  GTG.crypt=generateAndInitializeNewUserDataEncryptingKey(appId,GTG.db);}  }
class C{  Object doNetSearch() throws TimeoutException {  resetResults();  RegionAttributes attrs=region.getAttributes();  this.requestInProgress=true;  Scope scope=attrs.getScope();  Assert.assertTrue(scope != Scope.LOCAL);  netSearchForBlob();  this.requestInProgress=false;  return this.result;}  }
class C{  public boolean removeAll(long[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (remove(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  public AbstractBeginNode successor(boolean istrue){  return istrue ? trueSuccessor : falseSuccessor;}  }
class C{  public void fireTextChanged(final NetworkTextObject changed){  for (  TextListener listener : textListeners) {    listener.textRemoved(changed);  }}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static boolean isInvoke(int opcode){  return (flagsArray[opcode & 0xff] & INVOKE) != 0;}  }
class C{  public void tick(){  Iterator<SatelliteBase> iterator=tickingSatallites.values().iterator();  while (iterator.hasNext()) {    SatelliteBase satallite=iterator.next();    satallite.tickEntity();  }  this.prevOrbitalTheta=this.orbitTheta;  this.orbitTheta+=(201 - orbitalDist) * 0.000005d;}  }
class C{  public static synchronized void addClosable(Closable it){  closableList.addElement(new WeakReference<Closable>(it));}  }
class C{  public static boolean isVolatile(int mod){  return (mod & VOLATILE) != 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(String[] args){  EnumSet<TestMethods> testMethods=EnumSet.complementOf(EnumSet.of(TestMethods.IDENTITY,TestMethods.CONSTANT,TestMethods.ARRAY_ELEMENT_GETTER,TestMethods.ARRAY_ELEMENT_SETTER,TestMethods.EXACT_INVOKER,TestMethods.INVOKER));  LambdaFormTestCase.runTests(null,testMethods);}  }
class C{  public void doTestPingPong(int size,int iterations){  Thread.setDefaultUncaughtExceptionHandler(this);  long start;  iterationsRemaining=iterations;  receiver=getRemoteTcp();  sender=getLocalTcp();  byte[] dummy=createDummyData(size);  send_stream=new ByteFifoBuffer(size);  send_stream.write(dummy,size);  recv_stream=new ByteFifoBuffer(size);  start=PseudoTCPBase.now();  startClocks();  try {    connect();  } catch (  IOException ex) {    ex.printStackTrace();    fail(ex.getMessage());  }  assert_Connected_wait(kConnectTimeoutMs);  assert_Disconnected_wait(kMinTransferRate);  long elapsed=PseudoTCPBase.now() - start;  stopClocks();  logger.log(Level.INFO,"Performed " + iterations + " pings in "+ elapsed+ " ms");}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void update(){}  }
class C{  protected void assertEquals(long expected,long actual){  if (expected != actual) {    fail("Expected: " + expected + " actual: "+ actual);  }}  }
class C{  @Override public void onRemoved(final StendhalRPZone zone){  zone.removeMovementListener(this);  super.onRemoved(zone);}  }
class C{  protected Object notifyInternal(final ProceedingJoinPoint pjp) throws Throwable {  final Object[] args=pjp.getArgs();  final Shop shop=(Shop)args[0];  final String email=(String)args[1];  final Map<String,Object> registrationData=(Map<String,Object>)args[2];  registrationData.put("email",email);  final RegistrationMessage registrationMessage=new RegistrationMessageImpl();  final ShoppingCart cart=ApplicationDirector.getShoppingCart();  if (cart != null) {    registrationMessage.setLocale(cart.getCurrentLocale());  }  registrationMessage.setMailTemplatePathChain(themeService.getMailTemplateChainByShopId(shop.getShopId()));  registrationMessage.setTemplateName("adm-contactform-request");  final String emailTo=determineFromEmail(shop);  registrationMessage.setEmail(emailTo);  registrationMessage.setShopMailFrom(emailTo);  registrationMessage.setShopId(shop.getShopId());  registrationMessage.setShopCode(shop.getCode());  registrationMessage.setShopName(shop.getName());  registrationMessage.setShopUrl(transformShopUrls(shop));  registrationMessage.setAdditionalData(registrationData);  sendNotification(registrationMessage);  ShopCodeContext.getLog(this).info("ContactUs message was send to queue {}",registrationMessage);  return pjp.proceed();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildHouseArea(zone);}  }
class C{  public static List<Header> spdy3HeadersList(Request request){  Headers headers=request.headers();  List<Header> result=new ArrayList<>(headers.size() + 5);  result.add(new Header(TARGET_METHOD,request.method()));  result.add(new Header(TARGET_PATH,RequestLine.requestPath(request.url())));  result.add(new Header(VERSION,"HTTP/1.1"));  result.add(new Header(TARGET_HOST,Util.hostHeader(request.url())));  result.add(new Header(TARGET_SCHEME,request.url().scheme()));  Set<ByteString> names=new LinkedHashSet<>();  for (int i=0, size=headers.size(); i < size; i++) {    ByteString name=ByteString.encodeUtf8(headers.name(i).toLowerCase(Locale.US));    if (SPDY_3_SKIPPED_REQUEST_HEADERS.contains(name))     continue;    String value=headers.value(i);    if (names.add(name)) {      result.add(new Header(name,value));      continue;    }    for (int j=0; j < result.size(); j++) {      if (result.get(j).name.equals(name)) {        String concatenated=joinOnNull(result.get(j).value.utf8(),value);        result.set(j,new Header(name,concatenated));        break;      }    }  }  return result;}  }
class C{  public DenseMatrix(final int rows,final int cols,final double[] values){  super(rows,cols);  if (values.length != this.getElementCount()) {    throw new IllegalArgumentException("incompatible number of values");  }  this.numCols=cols;  this.values=values;}  }
class C{  public static void main(String[] args) throws IOException {  Header.printHeader(ClusteredChainGenerator.class.toString(),args);  long startTime=System.currentTimeMillis();  String inputVehicleFolder=args[0];  String inputFacilityFolder=args[1];  int nThreads=Integer.parseInt(args[2]);  String shapefile=args[3];  int idField=Integer.parseInt(args[4]);  double[] radii={20};  int[] pmins={20};  MyMultiFeatureReader mfr=new MyMultiFeatureReader();  mfr.readMultizoneShapefile(shapefile,idField);  List<MyZone> zones=mfr.getAllZones();  if (zones.size() > 1) {    log.warn("The read shapefile contains multiple zones. Only the first will be used as study area.");  }  Geometry studyArea=zones.get(0);  for (  double thisRadius : radii) {    for (    int thisPmin : pmins) {      log.info("================================================================================");      log.info("Executing chain modification for radius " + thisRadius + ", and pmin of "+ thisPmin);      log.info("================================================================================");      String facilityFile=String.format("%s%.0f_%d/%.0f_%d_facilities.xml.gz",inputFacilityFolder,thisRadius,thisPmin,thisRadius,thisPmin);      String facilityAttributeFile=String.format("%s%.0f_%d/%.0f_%d_facilityAttributes.xml.gz",inputFacilityFolder,thisRadius,thisPmin,thisRadius,thisPmin);      String xml2Folder=String.format("%s%.0f_%d/xml2/",inputFacilityFolder,thisRadius,thisPmin);      ClusteredChainGenerator ccg=new ClusteredChainGenerator();      ObjectAttributes oa=new ObjectAttributes();      ObjectAttributesXmlReader oar=new ObjectAttributesXmlReader(oa);      oar.putAttributeConverter(Point.class,new HullConverter());      oar.putAttributeConverter(LineString.class,new HullConverter());      oar.putAttributeConverter(Polygon.class,new HullConverter());      oar.readFile(facilityAttributeFile);      QuadTree<DigicoreFacility> facilityTree=ccg.buildFacilityQuadTree(facilityFile,facilityAttributeFile);      ccg.reconstructChains(facilityTree,oa,inputVehicleFolder,xml2Folder,nThreads,studyArea);    }  }  long duration=System.currentTimeMillis() - startTime;  log.info("	 Tree build time (s): " + treeBuildDuration / 1000);  log.info("	Reconstruct time (s): " + reconstructDuration / 1000);  log.info("Write to file time (s): " + writeToFileDuration / 1000);  log.info("	  Total run time (s): " + duration / 1000);  Header.printFooter();}  }
class C{  public final double doOperation() throws OperatorFailedException {  NodeRef root=tree.getRoot();  List<NodeRef> candidates=new ArrayList<NodeRef>();  for (int i=0; i < tree.getNodeCount(); i++) {    NodeRef node=tree.getNode(i);    if (node != root && tree.getParent(node) != root) {      NodeRef parent=tree.getParent(node);      int sum=rateChange(tree,node) + rateChange(tree,parent);      if (sum == 1)       candidates.add(node);    }  }  if (candidates.size() == 0)   throw new OperatorFailedException("No suitable pairs!");  NodeRef node=candidates.get(MathUtils.nextInt(candidates.size()));  NodeRef parent=tree.getParent(node);  double nodeTrait, parentTrait;  double nodeRate, parentRate;  nodeTrait=tree.getNodeTrait(node,indicatorTrait);  parentTrait=tree.getNodeTrait(parent,indicatorTrait);  tree.setNodeTrait(node,indicatorTrait,parentTrait);  tree.setNodeTrait(parent,indicatorTrait,nodeTrait);  if (trait2 != null) {    nodeTrait=tree.getNodeTrait(node,trait2);    parentTrait=tree.getNodeTrait(parent,trait2);    tree.setNodeTrait(node,trait2,parentTrait);    tree.setNodeTrait(parent,trait2,nodeTrait);  } else {    nodeRate=tree.getNodeRate(node);    parentRate=tree.getNodeRate(parent);    tree.setNodeRate(node,parentRate);    tree.setNodeRate(parent,nodeRate);  }  return 0.0;}  }
class C{  public DrawerBuilder withAccountHeader(@NonNull AccountHeader accountHeader){  return withAccountHeader(accountHeader,false);}  }
class C{  public Scanner useDelimiter(Pattern pattern){  delimPattern=pattern;  return this;}  }
class C{  public void endKeySet(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(keySetInProgressId,-1);  int endKeySetId;  if (timedOut) {    endKeySetId=keySetTimedOutId;  } else   if (failed) {    endKeySetId=keySetFailedId;  } else {    endKeySetId=keySetId;  }  this.stats.incInt(endKeySetId,1);  this.stats.incLong(keySetDurationId,duration);}  }
class C{  private void handleMissingComponent(LinuxSyslogLineParser lineParser,String currentLine) throws AdeException {  if (lineParser.m_component.length() == 0) {    lineParser.m_component=LINUX_LINE_NO_COMPONENT_NAME;    if (AdeExt.getAdeExt().getConfigProperties().isParseErrorTrackNullComponent()) {      final MessagesWithParseErrorStats stats=MessagesWithParseErrorStats.getParserErrorStats();      stats.addMessage(LINUX_LINE_NO_COMPONENT_NAME + " " + currentLine);    }    m_componentMissingLineCount++;  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.012 -0400",hash_original_method="755EBDA321A82D31400835D2D9A2791F",hash_generated_method="A50F8EC60C8F4F1F97AB6C70C6C21F4C") public final void warn(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,null);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  return;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__STRUCTURAL_TYPE:setStructuralType((TStructuralType)null);return;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();return;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();return;}super.eUnset(featureID);}  }
class C{  public static void read(final URL shpFile,GeomVectorField field) throws FileNotFoundException, IOException, Exception {  read(shpFile,field,null,MasonGeometry.class);}  }
class C{  private void resize(int capacity){  Item[] a=(Item[])new Object[capacity];  System.arraycopy(items,0,a,0,size);  items=a;}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration(ISerializationContext context,N4SetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static double calcPhi(double e,double t){  double phi=0;  double old=Math.PI / 2.0 - 2.0 * Math.atan(t);  short maxIterations=20;  while ((Math.abs((phi - old) / phi) > 1.0e-8) && (maxIterations != 0)) {    old=phi;    phi=Math.PI / 2.0 - 2.0 * Math.atan(t * Math.pow((1.0 - e * Math.sin(phi)) / ((1.0 + e * Math.sin(phi))),(e / 2.0)));    maxIterations--;  }  return phi;}  }
class C{  public SegmentTree(int[] array){  this.array=Arrays.copyOf(array,array.length);  size=(int)(2 * Math.pow(2.0,Math.floor((Math.log((double)array.length) / Math.log(2.0)) + 1)));  heap=new Node[size];  build(1,0,array.length);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.657 -0400",hash_original_method="B0A127C96A64726487AA51E16A0E3CC5",hash_generated_method="FF66116A90D47F0E1CA729B601FC7903") @Override public boolean accept(File file,String name){  return !filter.accept(file,name);}  }
class C{  protected RegionAttributes createRegionAttributesForPR(int redundancy,int localMaxMem){  AttributesFactory attr=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  PartitionAttributes prAttr=paf.setRedundantCopies(redundancy).setLocalMaxMemory(localMaxMem).create();  attr.setPartitionAttributes(prAttr);  return attr.create();}  }
class C{  public static void lockAndFlushToOthers(RegionEventImpl regionEvent,Set<InternalDistributedMember> recipients){  DistributedClearOperation dco=new DistributedClearOperation(DistributedClearOperation.OperationType.OP_LOCK_FOR_CLEAR,regionEvent,null,recipients);  dco.distribute();}  }
class C{  public synchronized void initializeTypeSubstitution(final INaviOperandTreeNode node,final RawTypeSubstitution rawSubstitution){  Preconditions.checkNotNull(node,"IE02420: Operand tree node can not be null.");  Preconditions.checkNotNull(rawSubstitution,"IE02421: Raw type substitution can not be null.");  final BaseType baseType=typesContainer.getBaseTypeById(rawSubstitution.getBaseTypeId());  final TypeSubstitution substitution=new TypeSubstitution(node,baseType,rawSubstitution.getExpressionId(),rawSubstitution.getPosition(),rawSubstitution.getOffset(),rawSubstitution.getAddress());  node.setTypeSubstitution(substitution);  typesContainer.addTypeSubstitution(substitution);  notifySubstitutionAdded(substitution);}  }
class C{  private void mergeSOFNode(Node node) throws IIOInvalidTreeException {  SOFMarkerSegment sof=(SOFMarkerSegment)findMarkerSegment(SOFMarkerSegment.class,true);  if (sof != null) {    sof.updateFromNativeNode(node,false);  } else {    SOFMarkerSegment newGuy=new SOFMarkerSegment(node);    int firstSOS=findMarkerSegmentPosition(SOSMarkerSegment.class,true);    if (firstSOS != -1) {      markerSequence.add(firstSOS,newGuy);    } else {      markerSequence.add(newGuy);    }  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final BlockAmount amount){  serializer.writeLong(label,amount.getRaw());}  }
class C{  public void deleteEnvironment(Environment environment) throws IOException {  String id=environment.getId();  Environment local=existingEnvironments.remove(id);  if (null != local) {    Files.deleteIfExists(pathResolver.getEnvironmentFilePath(local));    AgentMappings agentMappings=agentMappingsReference.get();    if (checkEnvironments(agentMappings)) {      try {        saveAgentMappings(agentMappings,false);      } catch (      Exception e) {        log.error("Update of the agent mappings on the environment deletion failed.",e);      }    }  }}  }
class C{  static int accumSingle(int counts[],int docBase,FieldFacetStats[] facetStats,SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordMap=map == null ? null : map.getGlobalOrds(subIndex);  int missingDocCount=0;  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    if (doc > si.docID()) {      si.advance(doc);    }    if (doc == si.docID()) {      int term=si.ordValue();      if (map != null) {        term=(int)ordMap.get(term);      }      counts[term]++;      for (      FieldFacetStats f : facetStats) {        f.facetTermNum(docBase + doc,term);      }    } else {      for (      FieldFacetStats f : facetStats) {        f.facetMissingNum(docBase + doc);      }      missingDocCount++;    }  }  return missingDocCount;}  }
class C{  @Override protected Object[] availableIDsArray(){  LinkedList retVal=new LinkedList();  retVal.addAll(this.durableIDsList);  retVal.addAll(idsAvailable);  return retVal.toArray();}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public In(File file){  try {    scanner=new Scanner(file,CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + file);  }}  }
class C{  public PaletteColorSlidersChooser(){}  }
class C{  private void indexFiles(){  String[] initialFiles=this.initialFiles;  if (initialFiles != null) {    this.initialFiles=null;    Set<CacheFile> diskOnly=new TreeSet<CacheFile>();    for (    String name : initialFiles) {      if (!accessOrder.containsKey(name)) {        diskOnly.add(new CacheFile(directory,name));      }    }    if (!diskOnly.isEmpty()) {      Map<String,File> newOrder=newAccessOrder();      for (      CacheFile cacheFile : diskOnly) {        newOrder.put(cacheFile.name,cacheFile);      }      newOrder.putAll(accessOrder);      this.accessOrder=newOrder;    }  }}  }
class C{  public NexusBlock findBlockName(String blockName){  if (blockName.equalsIgnoreCase(ASSUMPTIONS_BLOCK.toString())) {    return ASSUMPTIONS_BLOCK;  } else   if (blockName.equalsIgnoreCase(SETS_BLOCK.toString())) {    return SETS_BLOCK;  } else   if (blockName.equalsIgnoreCase(PAUP_BLOCK.toString())) {    return PAUP_BLOCK;  } else   if (blockName.equalsIgnoreCase(MRBAYES_BLOCK.toString())) {    return MRBAYES_BLOCK;  } else {    return super.findBlockName(blockName);  }}  }
class C{  public void testRemoveLastOccurrence(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=1; i < SIZE; i+=2) {    assertTrue(q.removeLastOccurrence(new Integer(i)));  }  for (int i=0; i < SIZE; i+=2) {    assertTrue(q.removeLastOccurrence(new Integer(i)));    assertFalse(q.removeLastOccurrence(new Integer(i + 1)));  }  assertTrue(q.isEmpty());}  }
class C{  public DateTimeFormatterBuilder appendDayOfWeekText(){  return appendText(DateTimeFieldType.dayOfWeek());}  }
class C{  public double dot(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Plane","dot","missingVector"));  }  return this.normal.dot(vector) + this.distance;}  }
class C{  public static Document newXMLDocument(){  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    DocumentBuilder builder=factory.newDocumentBuilder();    builder.setErrorHandler(new XMLErrorHandler());    Document doc=builder.newDocument();    return doc;  } catch (  ParserConfigurationException e) {    log.warning(e.getMessage());    throw new RuntimeException("cannot create XML file");  }}  }
class C{  private int mask(int bit){  return MSB >>> bit;}  }
class C{  public char[] toCharArray(){  return null;}  }
class C{  protected URL resolveURL(){  if (this.clazz != null) {    return this.clazz.getResource(this.path);  } else   if (this.classLoader != null) {    return this.classLoader.getResource(this.path);  } else {    return ClassLoader.getSystemResource(this.path);  }}  }
class C{  public void onCloseGUI(){}  }
class C{  public void textMode(int mode){  if ((mode == LEFT) || (mode == RIGHT)) {    showWarning("Since Processing beta, textMode() is now textAlign().");    return;  }  if (mode == SCREEN) {    showWarning("textMode(SCREEN) has been removed from Processing 2.0.");  }  if (textModeCheck(mode)) {    textMode=mode;  } else {    String modeStr=String.valueOf(mode);switch (mode) {case MODEL:      modeStr="MODEL";    break;case SHAPE:  modeStr="SHAPE";break;}showWarning("textMode(" + modeStr + ") is not supported by this renderer.");}}  }
class C{  public FPSSurfaceView addChild(@NonNull DisplayBase DisplayBase){  DisplayBase.setUp(mFps);  mDisplayList.add(DisplayBase);  return this;}  }
class C{  public void tagDefineFontInfo(int fontId,String fontName,int flags,int[] codes) throws IOException {  startTag(TAG_DEFINEFONTINFO,true);  out.writeUI16(fontId);  byte[] chars=fontName.getBytes();  out.writeUI8(chars.length);  out.write(chars);  out.writeUI8(flags);  boolean wide=(flags & FONT_WIDECHARS) != 0;  for (int i=0; i < codes.length; i++) {    if (wide) {      out.writeUI16(codes[i]);    } else {      out.writeUI8(codes[i]);    }  }  completeTag();}  }
class C{  public static <SERVICE,RESPONSE extends PaxosResponse>List<RESPONSE> collectQuorumResponses(ImmutableList<SERVICE> remotes,final Function<SERVICE,RESPONSE> request,int quorumSize,Executor executor,long remoteRequestTimeoutInSec){  return collectQuorumResponses(remotes,request,quorumSize,executor,remoteRequestTimeoutInSec,false);}  }
class C{  public static String asXmlString(Node node){  final StringBuilder builder=new StringBuilder();  asXmlStringRecursive(node,builder);  return builder.toString();}  }
class C{  public static boolean hasRepExt(final String fileName){  if (fileName.endsWith(".SC2Replay") || fileName.endsWith(".sc2replay"))   return true;  if (fileName.toLowerCase().endsWith(".sc2replay"))   return true;  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isVarargs(){  unsupportedIn2();  return this.variableArity;}  }
class C{  public static boolean intersectRaySphere(Vector3 rayStart,Vector3 rayEnd,Vector3 sphereCenter,double sphereRadius,Vector3 hitPoint){  rayStart=new Vector3(rayStart);  rayEnd=new Vector3(rayEnd);  Vector3 dir=Vector3.subtractAndCreate(rayEnd,rayStart);  dir.normalize();  sphereCenter=new Vector3(sphereCenter);  double radius2=sphereRadius * sphereRadius;  double a=Vector3.dot(dir,dir);  double b=2.0f * Vector3.dot(dir,Vector3.subtractAndCreate(rayStart,sphereCenter));  double c=Vector3.dot(sphereCenter,sphereCenter) + Vector3.dot(rayStart,rayStart) - 2.0f * Vector3.dot(sphereCenter,rayStart) - radius2;  double result=b * b - 4.0f * a * c;  if (result < 0)   return false;  double distSqrt=Math.sqrt(result);  double q;  if (b < 0)   q=(-b - distSqrt) / 2.0f; else   q=(-b + distSqrt) / 2.0f;  double t0=q / 1;  double t1=c / q;  if (t0 > t1) {    double temp=t0;    t0=t1;    t1=temp;  }  if (t1 < 0)   return false;  if (t0 < 0) {    hitPoint=rayStart.add(Vector3.scaleAndCreate(dir,t1));    return true;  } else {    hitPoint=rayStart.add(Vector3.scaleAndCreate(dir,t0));    return true;  }}  }
class C{  public Drawable loadLogo(PackageManager pm){  if (logo != 0) {    Drawable d=pm.getDrawable(packageName,logo,getApplicationInfo());    if (d != null) {      return d;    }  }  return loadDefaultLogo(pm);}  }
class C{  public void write(Command command,int value,int index,ByteBuffer buffer) throws UsbException {  if (mDeviceHandle != null) {    int transferred=LibUsb.controlTransfer(mDeviceHandle,USB_REQUEST_OUT,command.getValue(),(short)value,(short)index,buffer,USB_TIMEOUT_MS);    if (transferred < 0) {      throw new LibUsbException("error writing byte buffer",transferred);    } else     if (transferred != buffer.capacity()) {      throw new LibUsbException("transferred bytes [" + transferred + "] is not what was expected ["+ buffer.capacity()+ "]",transferred);    }  } else {    throw new LibUsbException("device handle is null",LibUsb.ERROR_NO_DEVICE);  }}  }
class C{  public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException {  final boolean isDebugEnabled=logger.isDebugEnabled();  if (Thread.interrupted())   throw new InterruptedException();  recipients=new HashSet(recipients);  DistributedMember me=originDm.getDistributionManagerId();  if (recipients.contains(me)) {    recipients.remove(me);  }  if (isDebugEnabled) {    logger.debug("Recipients for SerialAckedMessage are {}",recipients);  }  rp=new ReplyProcessor21(originDm,recipients);  processorId=rp.getProcessorId();  setRecipients(recipients);  setMulticast(multicast);  Set failures=originDm.putOutgoing(this);  if (failures != null && failures.size() > 0) {    for (Iterator i=failures.iterator(); i.hasNext(); ) {      InternalDistributedMember mbr=(InternalDistributedMember)i.next();      if (isDebugEnabled) {        logger.debug("Unable to send serial acked message to {}",mbr);      }    }  }  rp.waitForReplies();}  }
class C{  public TInstanceBuilder copyFrom(TInstance type){  if (type.typeClass() != orig.typeClass() || type.enumClass() != orig.enumClass())   throw new IllegalArgumentException("can't copy " + type + " to a builder based on "+ orig);  this.workingCopy=type;  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY:    return body != null;case N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK:  return _lok != null;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_TYPE:return definedType != null;case N4JSPackage.PROPERTY_METHOD_DECLARATION__FPARS:return fpars != null && !fpars.isEmpty();case N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF:return returnTypeRef != null;case N4JSPackage.PROPERTY_METHOD_DECLARATION__GENERATOR:return generator != GENERATOR_EDEFAULT;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_ASYNC:return declaredAsync != DECLARED_ASYNC_EDEFAULT;case N4JSPackage.PROPERTY_METHOD_DECLARATION__TYPE_VARS:return typeVars != null && !typeVars.isEmpty();case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF:return declaredTypeRef != null;case N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF:return bogusTypeRef != null;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_METHOD:return definedMethod != null;}return super.eIsSet(featureID);}  }
class C{  public static String decrypt(SecretKey key,String encrypted,String charset,String transform) throws UnencryptedException, GeneralSecurityException, UnsupportedEncodingException {  if (encrypted == null)   return null;  try {    byte[] enc=Base64.decode(encrypted,Base64.DEFAULT);    byte[] result=decrypt(key,enc,transform);    if (result != null) {      return new String(result,charset);    }  } catch (  IllegalArgumentException e) {    throw new UnencryptedException("Encrypted String was not base64 encoded.",e);  }  return null;}  }
class C{  private boolean dragStartedThreshold(){  return dragStartedAgo() > DRAG_STARTED_THRESHOLD;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.194 -0500",hash_original_method="7A7DE76338CD4FF5C3A48558D2B4614E",hash_generated_method="1BC6A3758785F5F0776626FF643FAA62") public boolean clipPath(Path path,Region.Op op){  addTaint(path.getTaint());  addTaint(op.getTaint());  return getTaintBoolean();}  }
class C{  public static void initialize(Context context){  if (createAccount(context) || !sSettings.getSyncAccountInitialized()) {    startFullSync();    sSettings.setSyncAccountInitialized(true);  }}  }
class C{  public ByteArrayBuilder(byte[] initialContents){  this(initialContents,16);}  }
class C{  public void withMaxResultSize(@IntRange(from=100) int width,@IntRange(from=100) int height){  mOptionBundle.putInt(EXTRA_MAX_SIZE_X,width);  mOptionBundle.putInt(EXTRA_MAX_SIZE_Y,height);}  }
class C{  protected void formExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de formExecuteLogic");  String id=request.getParameter(Constants.ID);  logger.info("Id lista descriptora: " + id);  if (StringUtils.isNotBlank(id)) {    saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_EDIT,request);    GestionDescripcionBI descripcionBI=getGestionDescripcionBI(request);    ((ListaDescriptoraForm)form).set(descripcionBI.getListaDescriptoraExt(id));    request.setAttribute(DescripcionConstants.TIENE_DESCRIPTORES_KEY,new Boolean(descripcionBI.tieneDescriptores(id)));  } else {    ((ListaDescriptoraForm)form).reset();    saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_FORM,request);    request.setAttribute(DescripcionConstants.TIENE_DESCRIPTORES_KEY,new Boolean(false));  }  request.setAttribute(DescripcionConstants.FICHAS_DESCRIPCION_KEY,getGestionDescripcionBI(request).getFichasByTiposNivel(new int[]{ElementoCuadroClasificacion.TIPO_DESCRIPTOR,ElementoCuadroClasificacion.TIPO_ALL}));  request.setAttribute(DescripcionConstants.FICHAS_CLF_DOC_KEY,getGestionDocumentosElectronicosBI(request).getFichas());  cargarListaRepositoriosECM(request);  setReturnActionFordward(request,mapping.findForward("editar_lista_descriptora"));}  }
class C{  public ColorList(ColorList list){  for (  TColor c : list) {    this.colors.add(c.copy());  }}  }
class C{  @Override public void killAllApps(){  String marathonEndpoint=getServiceUrl().toString();  JSONObject appsResponse;  try {    appsResponse=Unirest.get(marathonEndpoint + END_POINT_EXT).header(HEADER_ACCEPT,APPLICATION_JSON).asJson().getBody().getObject();    if (appsResponse.length() == 0) {      return;    }  } catch (  UnirestException e) {    throw new MinimesosException("Could not retrieve apps from Marathon at " + marathonEndpoint,e);  }  JSONArray apps=appsResponse.getJSONArray("apps");  for (int i=0; i < apps.length(); i++) {    JSONObject app=apps.getJSONObject(i);    String appId=app.getString("id");    try {      Unirest.delete(marathonEndpoint + END_POINT_EXT + appId).asJson();    } catch (    UnirestException e) {      LOGGER.error("Could not delete app " + appId + " at "+ marathonEndpoint,e);    }  }}  }
class C{  public void testSimpleWritePerformance(String store) throws Exception {  waitForFullMesh(5000);  final int count=1000000;  IStoreClient<String,String> client0=syncManagers[0].getStoreClient(store,String.class,String.class);  IStoreClient<String,String> client2=syncManagers[2].getStoreClient(store,String.class,String.class);  long then=System.currentTimeMillis();  for (int i=1; i <= count; i++) {    client0.put("" + i,"" + i);  }  long donewriting=System.currentTimeMillis();  waitForValue(client2,"" + count,null,count,"client2");  long now=System.currentTimeMillis();  logger.info("Simple write ({}): {} values in {}+/-100 " + "millis ({} synced writes/s) ({} local writes/s)",new Object[]{store,count,(now - then),1000.0 * count / (now - then),1000.0 * count / (donewriting - then)});}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String inputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getSsfInputFileTemplate());  final String outputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getSsfOutputFileTemplate());  List<String> command=new ArrayList<String>();  command.add(this.getFullPathToBinary());  command.addAll(this.getBinarySwitchesAsList());  command.add("-i");  command.add(inputFilePath);  command.add("-o");  command.add(outputFilePath);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(command.toString());  }  return command;}  }
class C{  protected boolean shouldWriteHeaderAndFooter(){  return flags.contains(WriterFlags.WRITE_HEADER) || encoding != null || standalone != null;}  }
class C{  protected void visitNode(final Node n,final AStarNodeData data,final RouterPriorityQueue<Node> pendingNodes,final double time,final double cost,double expectedRemainingCost,final Link outLink){  data.setExpectedRemainingCost(expectedRemainingCost);  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public static double estimateCompileTime(int compiler,NormalMethod meth){  double bytes=meth.getBytecodeLength();  double runtimeBaselineRate=RuntimeCompiler.getBaselineRate();  double compileTime=bytes / runtimeBaselineRate;  if (compiler != BASELINE) {    compileTime*=compileTimeRatio[BASELINE][compiler];  }  return compileTime;}  }
class C{  public boolean isRemove(){  return remove;}  }
class C{  private static int med3(short x[],int a,int b,int c,ShortComparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public static String stripParens(String sourceExpression){  if (sourceExpression.startsWith("(") && sourceExpression.endsWith(")")) {    sourceExpression=sourceExpression.substring(1,sourceExpression.length() - 1);  }  return sourceExpression;}  }
class C{  public static Timestamp valueOf(String s){  final int YEAR_LENGTH=4;  final int MONTH_LENGTH=2;  final int DAY_LENGTH=2;  final int MAX_MONTH=12;  final int MAX_DAY=31;  String date_s;  String time_s;  String nanos_s;  int year=0;  int month=0;  int day=0;  int hour;  int minute;  int second;  int a_nanos=0;  int firstDash;  int secondDash;  int dividingSpace;  int firstColon=0;  int secondColon=0;  int period=0;  String formatError="Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]";  String zeros="000000000";  String delimiterDate="-";  String delimiterTime=":";  if (s == null)   throw new java.lang.IllegalArgumentException("null string");  s=s.trim();  dividingSpace=s.indexOf(' ');  if (dividingSpace > 0) {    date_s=s.substring(0,dividingSpace);    time_s=s.substring(dividingSpace + 1);  } else {    throw new java.lang.IllegalArgumentException(formatError);  }  firstDash=date_s.indexOf('-');  secondDash=date_s.indexOf('-',firstDash + 1);  if (time_s == null)   throw new java.lang.IllegalArgumentException(formatError);  firstColon=time_s.indexOf(':');  secondColon=time_s.indexOf(':',firstColon + 1);  period=time_s.indexOf('.',secondColon + 1);  boolean parsedDate=false;  if ((firstDash > 0) && (secondDash > 0) && (secondDash < date_s.length() - 1)) {    String yyyy=date_s.substring(0,firstDash);    String mm=date_s.substring(firstDash + 1,secondDash);    String dd=date_s.substring(secondDash + 1);    if (yyyy.length() == YEAR_LENGTH && (mm.length() >= 1 && mm.length() <= MONTH_LENGTH) && (dd.length() >= 1 && dd.length() <= DAY_LENGTH)) {      year=Integer.parseInt(yyyy);      month=Integer.parseInt(mm);      day=Integer.parseInt(dd);      if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {        parsedDate=true;      }    }  }  if (!parsedDate) {    throw new java.lang.IllegalArgumentException(formatError);  }  if ((firstColon > 0) & (secondColon > 0) & (secondColon < time_s.length() - 1)) {    hour=Integer.parseInt(time_s.substring(0,firstColon));    minute=Integer.parseInt(time_s.substring(firstColon + 1,secondColon));    if ((period > 0) & (period < time_s.length() - 1)) {      second=Integer.parseInt(time_s.substring(secondColon + 1,period));      nanos_s=time_s.substring(period + 1);      if (nanos_s.length() > 9)       throw new java.lang.IllegalArgumentException(formatError);      if (!Character.isDigit(nanos_s.charAt(0)))       throw new java.lang.IllegalArgumentException(formatError);      nanos_s=nanos_s + zeros.substring(0,9 - nanos_s.length());      a_nanos=Integer.parseInt(nanos_s);    } else     if (period > 0) {      throw new java.lang.IllegalArgumentException(formatError);    } else {      second=Integer.parseInt(time_s.substring(secondColon + 1));    }  } else {    throw new java.lang.IllegalArgumentException(formatError);  }  return new Timestamp(year - 1900,month - 1,day,hour,minute,second,a_nanos);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return PAGE_VIEWS;default :  return null;}}  }
class C{  public void readLed(Callback<LedColor> callback){  addCallback(BeanMessageID.CC_LED_READ_ALL,callback);  sendMessageWithoutPayload(BeanMessageID.CC_LED_READ_ALL);}  }
class C{  public Builder maxLiveQueueSize(int maxLiveQueueSize){  this.maxLiveQueueSize=maxLiveQueueSize;  return this;}  }
class C{  public BaseProgramBuilder addTexture(TextureType texType) throws IllegalArgumentException {  addTexture(texType,"Tex" + mTextureCount);  return this;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.210 -0400",hash_original_method="570C1378326063600110CB3D156C7691",hash_generated_method="11531F2C7D6991750845B0705120981E") @Override public void write(String str) throws IOException {  out.write(str);}  }
class C{  public static String simplePatternToFullRegularExpression(String pattern){  StringBuffer buf=new StringBuffer();  for (int i=0; i < pattern.length(); i++) {    char c=pattern.charAt(i);switch (c) {case '*':      buf.append(".*");    break;case '.':case '[':case ']':case '\\':case '+':case '?':case '{':case '}':case '$':case '^':case '|':case '(':case ')':  buf.append('\\');default :buf.append(c);break;}}return buf.toString();}  }
class C{  private void close(){  if (!closed) {    try {      if (ptr != 0) {        try {          PlatformUtils.platformContext(grid).gateway().continuousQueryFilterRelease(ptr);        }  finally {          ptr=0;        }      }    }  finally {      closed=true;    }  }}  }
class C{  public void updateUnreadLabel(){  int count=getUnreadMsgCountTotal();  if (count > 0) {    unreadLabel.setText(String.valueOf(count));    unreadLabel.setVisibility(View.VISIBLE);  } else {    unreadLabel.setVisibility(View.INVISIBLE);  }}  }
class C{  public static CInliningResult inlineCodeNode(final INaviView view,final INaviCodeNode originalNode,final INaviInstruction inlineInstruction,final INaviFunction functionToInline){  Preconditions.checkNotNull(view,"IE00108: View argument can not be null");  Preconditions.checkNotNull(originalNode,"IE00109: Node argument can not be null");  Preconditions.checkNotNull(inlineInstruction,"IE00110: Instruction argument can not be null");  Preconditions.checkArgument(originalNode.hasInstruction(inlineInstruction),"IE00111: Instruction is not part of the code node");  Preconditions.checkNotNull(functionToInline,"IE00112: Function argument can not be null");  Preconditions.checkArgument(view.isLoaded(),"IE00113: View must be loaded before it can be inlined");  Preconditions.checkArgument(view.getGraph().getNodes().contains(originalNode),"IE00114: Code node does not belong to the view");  Preconditions.checkArgument(functionToInline.isLoaded(),"IE00115: Function must be loaded before it can be inlined");  Preconditions.checkArgument(functionToInline.getBasicBlockCount() != 0,"IE00116: Functions with 0 blocks can not be inlined");  final INaviGroupNode parentGroup=originalNode.getParentGroup();  GroupHelpers.expandParents(originalNode);  final List<INaviEdge> oldIncomingEdges=originalNode.getIncomingEdges();  final List<INaviEdge> oldOutgoingEdges=originalNode.getOutgoingEdges();  final List<INaviInstruction> upperInstructions=new ArrayList<INaviInstruction>();  final List<INaviInstruction> lowerInstructions=new ArrayList<INaviInstruction>();  List<INaviInstruction> currentBlock=upperInstructions;  for (  final INaviInstruction currentInstruction : originalNode.getInstructions()) {    currentBlock.add(currentInstruction);    if (currentInstruction == inlineInstruction) {      currentBlock=lowerInstructions;    }  }  INaviCodeNode firstNode;  final List<INaviViewNode> continueNodes=new ArrayList<INaviViewNode>();  final boolean keepOriginalBlock=lowerInstructions.isEmpty();  CCodeNode returnNode=null;  if (keepOriginalBlock) {    firstNode=originalNode;    for (    final INaviEdge edge : originalNode.getOutgoingEdges()) {      continueNodes.add(edge.getTarget());      view.getContent().deleteEdge(edge);    }  } else {    final boolean recolor=(originalNode.getIncomingEdges().size() == 1) && (originalNode.getIncomingEdges().get(0).getType() == EdgeType.ENTER_INLINED_FUNCTION) && (originalNode.getOutgoingEdges().size() == 1)&& (originalNode.getOutgoingEdges().get(0).getType() == EdgeType.LEAVE_INLINED_FUNCTION);    view.getContent().deleteNode(originalNode);    try {      firstNode=view.getContent().createCodeNode(originalNode.getParentFunction(),upperInstructions);    } catch (    final MaybeNullException exception) {      firstNode=view.getContent().createCodeNode(null,upperInstructions);    }    firstNode.setColor(originalNode.getColor());    firstNode.setBorderColor(originalNode.getBorderColor());    try {      returnNode=view.getContent().createCodeNode(originalNode.getParentFunction(),lowerInstructions);    } catch (    final MaybeNullException e1) {      returnNode=view.getContent().createCodeNode(null,lowerInstructions);    }    returnNode.setColor(originalNode.getColor());    if (recolor) {      firstNode.setBorderColor(new Color(-16736256));      returnNode.setBorderColor(new Color(-6291456));    }    if (parentGroup != null) {      parentGroup.addElement(firstNode);      parentGroup.addElement(returnNode);    }    final Iterator<CTag> it=originalNode.getTagsIterator();    while (it.hasNext()) {      final CTag tag=it.next();      try {        firstNode.tagNode(tag);        returnNode.tagNode(tag);      } catch (      final CouldntSaveDataException e) {        CUtilityFunctions.logException(e);      }    }    continueNodes.add(returnNode);  }  final Triple<CCodeNode,List<CCodeNode>,ArrayList<CCodeNode>> nodes=insertNodes(view,functionToInline,parentGroup);  final INaviCodeNode entryNode=nodes.first();  final List<CCodeNode> exitNodes=nodes.second();  if (!keepOriginalBlock) {    for (    final INaviEdge incomingEdge : oldIncomingEdges) {      if (incomingEdge.getSource() == originalNode) {        final EdgeType edgeType=incomingEdge.getType();        view.getContent().createEdge(returnNode,firstNode,edgeType);      } else {        final EdgeType edgeType=incomingEdge.getType();        view.getContent().createEdge(incomingEdge.getSource(),firstNode,edgeType);      }    }  }  view.getContent().createEdge(firstNode,entryNode,EdgeType.ENTER_INLINED_FUNCTION);  for (  final INaviCodeNode exitNode : exitNodes) {    for (    final INaviViewNode continueNode : continueNodes) {      view.getContent().createEdge(exitNode,continueNode,EdgeType.LEAVE_INLINED_FUNCTION);    }  }  if (!keepOriginalBlock) {    for (    final INaviEdge oldChild : oldOutgoingEdges) {      for (      final INaviViewNode continueNode : continueNodes) {        if (oldChild.getTarget() != originalNode) {          view.getContent().createEdge(continueNode,oldChild.getTarget(),oldChild.getType());        }      }    }  }  return new CInliningResult(firstNode,returnNode);}  }
class C{  public ObjectReference loadObjectReference(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  private void acquireWakeLockAndStartService(Context context){  acquireWakeLock(context);  startPrecacheService(context);}  }
class C{  @Override public void write(int oneByte) throws IOException {  writeOne[0]=(byte)oneByte;  write(writeOne,0,1);}  }
class C{  @Override public void marshal(Object source,HierarchicalStreamWriter writer,MarshallingContext context){  GraphModelReference graphRef=(GraphModelReference)source;  context.convertAnother(graphRef.getLocation().getFullPath().toString());}  }
class C{  @Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){  glyphDisplay.setScalingValues(0,0,scaling);  final float OLDglyphScale=glyphScale;  if (isFormGlyph) {    glyphScale=scaling * glyphScale;  }  AffineTransform aff=null;  if (glyphScale != 1f) {    aff=g2.getTransform();    g2.scale(glyphScale,glyphScale);  }  glyphDisplay.setG2(g2);  glyphDisplay.paint(null,null,null);  if (aff != null) {    g2.setTransform(aff);  }  glyphScale=OLDglyphScale;}  }
class C{  public ClusterRerouteRequest source(BytesReference source) throws Exception {  try (XContentParser parser=XContentHelper.createParser(source)){    XContentParser.Token token;    String currentFieldName=null;    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {      if (token == XContentParser.Token.FIELD_NAME) {        currentFieldName=parser.currentName();      } else       if (token == XContentParser.Token.START_ARRAY) {        if ("commands".equals(currentFieldName)) {          this.commands=AllocationCommands.fromXContent(parser);        } else {          throw new ElasticsearchParseException("failed to parse reroute request, got start array with wrong field name [{}]",currentFieldName);        }      } else       if (token.isValue()) {        if ("dry_run".equals(currentFieldName) || "dryRun".equals(currentFieldName)) {          dryRun=parser.booleanValue();        } else {          throw new ElasticsearchParseException("failed to parse reroute request, got value with wrong field name [{}]",currentFieldName);        }      }    }  }   return this;}  }
class C{  public SpecificLight(String systemName,SerialTrafficController tc){  super(systemName,tc);  this.tc=tc;  maxDimStep=tc.getNumberOfIntensitySteps();}  }
class C{  public static ArrayList<Integer> findImmediateAssig(Channels broadcast){  ArrayList<Integer> found=new ArrayList<>();  for (  Map.Entry pair : broadcast.getRecordedFrames().entrySet()) {    if (((Frame)pair.getValue()).getData()[1].equals("06") && ((Frame)pair.getValue()).getData()[2].equals("3f")) {      found.add((Integer)pair.getKey());    }  }  return found;}  }
class C{  public void ensurePathExists(String path) throws IOException {  try (SolrZkClient client=new SolrZkClient(getZkHost(),10000)){    client.makePath(path,false);  } catch (  InterruptedException|KeeperException e) {    throw new IOException("Error checking path " + path,SolrZkClient.checkInterrupted(e));  }}  }
class C{  public static HadoopSplitWrapper wrapSplit(int id,Object split,String[] hosts) throws IOException {  ByteArrayOutputStream arr=new ByteArrayOutputStream();  ObjectOutput out=new ObjectOutputStream(arr);  assert split instanceof Writable;  ((Writable)split).write(out);  out.flush();  return new HadoopSplitWrapper(id,split.getClass().getName(),arr.toByteArray(),hosts);}  }
class C{  private static ClassNode convertClosureTypeToSAMType(final Expression expression,final ClassNode closureType,final ClassNode samType,final Map<String,GenericsType> placeholders){  if (!samType.isUsingGenerics())   return samType;  MethodNode sam=findSAM(samType);  if (closureType.isUsingGenerics() && sam != null) {    ClassNode samReturnType=sam.getReturnType();    ClassNode closureReturnType=expression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);    if (closureReturnType != null && closureReturnType.isUsingGenerics()) {      ClassNode unwrapped=closureReturnType.getGenericsTypes()[0].getType();      extractGenericsConnections(placeholders,unwrapped,samReturnType);    } else     if (samReturnType.isGenericsPlaceHolder()) {      placeholders.put(samReturnType.getGenericsTypes()[0].getName(),closureType.getGenericsTypes()[0]);    }    if (expression instanceof ClosureExpression && sam.getParameters().length > 0) {      List<ClassNode[]> genericsToConnect=new LinkedList<ClassNode[]>();      Parameter[] closureParams=((ClosureExpression)expression).getParameters();      ClassNode[] closureParamTypes=extractTypesFromParameters(closureParams);      if (expression.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS) != null) {        closureParamTypes=expression.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);      }      final Parameter[] parameters=sam.getParameters();      for (int i=0; i < parameters.length; i++) {        final Parameter parameter=parameters[i];        if (parameter.getOriginType().isUsingGenerics() && closureParamTypes.length > i) {          genericsToConnect.add(new ClassNode[]{closureParamTypes[i],parameter.getOriginType()});        }      }      for (      ClassNode[] classNodes : genericsToConnect) {        ClassNode found=classNodes[0];        ClassNode expected=classNodes[1];        if (!isAssignableTo(found,expected)) {          continue;        }        ClassNode generifiedType=GenericsUtils.parameterizeType(found,expected);        while (expected.isArray()) {          expected=expected.getComponentType();          generifiedType=generifiedType.getComponentType();        }        if (expected.isGenericsPlaceHolder()) {          placeholders.put(expected.getGenericsTypes()[0].getName(),new GenericsType(generifiedType));        } else {          GenericsType[] expectedGenericsTypes=expected.getGenericsTypes();          GenericsType[] foundGenericsTypes=generifiedType.getGenericsTypes();          for (int i=0; i < expectedGenericsTypes.length; i++) {            final GenericsType type=expectedGenericsTypes[i];            if (type.isPlaceholder()) {              String name=type.getName();              placeholders.put(name,foundGenericsTypes[i]);            }          }        }      }    }  }  ClassNode result=applyGenericsContext(placeholders,samType.redirect());  return result;}  }
class C{  protected void add(Object s,Object p,Object o){  store().addStatement((Resource)convert(s),(URI)convert(p),convert(o),null);}  }
class C{  public static byte[] toIPv4AddressBytes(int ipAddress){  return new byte[]{(byte)(ipAddress >>> 24),(byte)(ipAddress >>> 16),(byte)(ipAddress >>> 8),(byte)ipAddress};}  }
class C{  private void createSubnodes(Document document,Element element,List<? extends BaseToken> tagChildren){  if (tagChildren != null) {    for (    Object item : tagChildren) {      if (item instanceof CommentNode) {        CommentNode commentNode=(CommentNode)item;        Comment comment=document.createComment(commentNode.getContent());        element.appendChild(comment);      } else       if (item instanceof CData) {        if (props.isUseCdataFor(element.getNodeName())) {          element.appendChild(document.createCDATASection(outputCData((CData)item)));        }      } else       if (item instanceof ContentNode) {        ContentNode contentNode=(ContentNode)item;        String content=contentNode.getContent();        boolean specialCase=dontEscape(element);        if (escapeXml && !specialCase) {          content=Utils.escapeXml(content,props,true);        }        element.appendChild(specialCase ? document.createCDATASection(content) : document.createTextNode(content));      } else       if (item instanceof TagNode) {        TagNode subTagNode=(TagNode)item;        Element subelement=document.createElement(subTagNode.getName());        Map<String,String> attributes=subTagNode.getAttributes();        Iterator<Map.Entry<String,String>> entryIterator=attributes.entrySet().iterator();        while (entryIterator.hasNext()) {          Map.Entry<String,String> entry=(Map.Entry<String,String>)entryIterator.next();          String attrName=(String)entry.getKey();          String attrValue=(String)entry.getValue();          if (escapeXml) {            attrValue=Utils.escapeXml(attrValue,props,true);          }          subelement.setAttribute(attrName,attrValue);          if (attrName.equalsIgnoreCase("id")) {            subelement.setIdAttribute(attrName,true);          }        }        createSubnodes(document,subelement,subTagNode.getAllChildren());        element.appendChild(subelement);      } else       if (item instanceof List) {        List<? extends BaseToken> sublist=(List<? extends BaseToken>)item;        createSubnodes(document,element,sublist);      }    }  }}  }
class C{  public void add(Item item){  int size=item.writeSize();  count++;  totalSize+=size;  if (size > largestSize) {    largestSize=size;  }  if (size < smallestSize) {    smallestSize=size;  }}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  @Override public boolean removeElement(Object obj){  if (!(obj instanceof CheckBoxListItem)) {    return super.removeElement(new CheckBoxListItem(obj));  } else {    return super.removeElement(obj);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  attrList=doc.getAttributes();  assertNull("documentAttributesNull",attrList);}  }
class C{  public UnweightedGraph(){}  }
class C{  public void add(boolean priority,CreateMarkerTask c){  lock.lock();  sendEmptyMessage(BLANK);  if (priority) {    mOnScreenCreateMarkerTasks.add(c);  } else {    mCreateMarkerTasks.add(c);  }  lock.unlock();}  }
class C{  void createBusinessCaseTest(String trxName){  createDataMaster();  generateHistoryCost();  Timestamp dateAcct;  dateAcct=today;  MOrder purchase1=createPurchaseOrder(dateAcct,new BigDecimal(100),new BigDecimal(36));  MInOut receipt1=null;  for (  MOrderLine line : purchase1.getLines()) {    receipt1=createMaterialReceipt(dateAcct,new BigDecimal(10),line.getC_OrderLine_ID());  }  for (  MInOutLine line : receipt1.getLines()) {    CostResult costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("47.7292"),new BigDecimal("30"),new BigDecimal("1431.8748"),new BigDecimal("477.2920"),new BigDecimal("0"),new BigDecimal("10"),new BigDecimal("53.5937"),new BigDecimal("20"),new BigDecimal("1071.8748"),dateAcct);    assertCostReceipt(costResult,line.getM_InOutLine_ID(),as,trxName);  }  dateAcct=TimeUtil.addDays(today,15);  MOrder sales1=createSalesOrder(dateAcct,new BigDecimal(5),new BigDecimal(45));  for (  MOrderLine line : sales1.getLines()) {    CostResult costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("47.7292"),new BigDecimal("25"),new BigDecimal("1193.2288"),new BigDecimal("238.6460"),new BigDecimal("0"),new BigDecimal("-5"),new BigDecimal("47.7292"),new BigDecimal("30"),new BigDecimal("1431.8748"),dateAcct);    assertCostShipment(costResult,line.getC_OrderLine_ID(),as,trxName);  }  dateAcct=TimeUtil.addDays(today,31);  MOrder purchase2=createPurchaseOrder(dateAcct,new BigDecimal(100),new BigDecimal(34));  MInOut receipt2=null;  for (  MOrderLine line : purchase2.getLines()) {    receipt2=createMaterialReceipt(dateAcct,new BigDecimal(10),line.getC_OrderLine_ID());  }  for (  MInOutLine line : receipt2.getLines()) {    CostResult costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("43.8065"),new BigDecimal("35"),new BigDecimal("1533.2288"),new BigDecimal("438.0650"),new BigDecimal("0"),new BigDecimal("10"),new BigDecimal("47.7292"),new BigDecimal("25"),new BigDecimal("1193.2288"),dateAcct);    assertCostReceipt(costResult,line.getM_InOutLine_ID(),as,trxName);  }  dateAcct=TimeUtil.addDays(today,60);  MOrder sales2=createSalesOrder(dateAcct,new BigDecimal(10),new BigDecimal(45));  for (  MOrderLine line : sales2.getLines()) {    CostResult costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("43.8065"),new BigDecimal("25"),new BigDecimal("1095.1638"),new BigDecimal("438.0650"),new BigDecimal("0"),new BigDecimal("-10"),new BigDecimal("43.8065"),new BigDecimal("35"),new BigDecimal("1533.2288"),dateAcct);    assertCostShipment(costResult,line.getC_OrderLine_ID(),as,trxName);  }  dateAcct=receipt1.getDateAcct();  int M_InOutLine_ID=0;  for (  MInOutLine line : receipt1.getLines()) {    M_InOutLine_ID=line.getM_InOutLine_ID();    MInvoice invoice=createInvoiceVendor(dateAcct,new BigDecimal(10),new BigDecimal(38),line.getM_InOutLine_ID());  }  CostResult costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("44.2827"),new BigDecimal("25"),new BigDecimal("1107.0688"),new BigDecimal("380.0000"),new BigDecimal("20.0000"),new BigDecimal("10"),new BigDecimal("53.5937"),new BigDecimal("20"),new BigDecimal("1071.8748"),dateAcct);  assertCostInvoice(costResult,M_InOutLine_ID,as,trxName);  dateAcct=Timestamp.valueOf("2010-01-16 00:00:00.0");  for (  MOrderLine line : sales1.getLines()) {    costResult=new CostResult(line.getM_Product_ID(),new BigDecimal("44.2827"),new BigDecimal("25"),new BigDecimal("1107.0688"),new BigDecimal("241.9790"),new BigDecimal("0"),new BigDecimal("-5"),new BigDecimal("48.3958"),new BigDecimal("30"),new BigDecimal("1451.8748"),dateAcct);    assertCostShipmentAdjust(costResult,line.getC_OrderLine_ID(),as,trxName);  }  dateAcct=today;  receipt1.processIt(DocAction.ACTION_Reverse_Correct);  receipt1.saveEx();  for (  MInOutLine line : receipt1.getLines(true)) {    costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("44.2827"),new BigDecimal("25"),new BigDecimal("1107.0688"),new BigDecimal("380.0000"),new BigDecimal("20.0000"),new BigDecimal("10"),new BigDecimal("53.5937"),new BigDecimal("20"),new BigDecimal("1071.8748"),dateAcct);    assertCostReceiptReversal(costResult,line.getM_InOutLine_ID(),as,trxName);  }  MInOut reversal=new MInOut(getCtx(),receipt1.getReversal_ID(),trxName);  for (  MInOutLine line : reversal.getLines(true)) {    costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("46.8373"),new BigDecimal("19"),new BigDecimal("889.9081"),new BigDecimal("380"),new BigDecimal("20"),new BigDecimal("-10"),new BigDecimal("49.0073"),new BigDecimal("34"),new BigDecimal("1666.2496"),dateAcct);    assertCostReceiptReversal(costResult,line.getM_InOutLine_ID(),as,trxName);  }  dateAcct=TimeUtil.addDays(today,7);  MOrder purchase3=createPurchaseOrder(dateAcct,new BigDecimal(100),new BigDecimal(37));  MInOut receipt3=null;  for (  MOrderLine line : purchase3.getLines()) {    receipt3=createMaterialReceipt(dateAcct,new BigDecimal(20),line.getC_OrderLine_ID());  }  for (  MInOutLine line : receipt3.getLines()) {    costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("42.0489"),new BigDecimal("45"),new BigDecimal("1892.1983"),new BigDecimal("876.7500"),new BigDecimal("0"),new BigDecimal("20"),new BigDecimal("48.3958"),new BigDecimal("30"),new BigDecimal("1451.8748"),dateAcct);    assertCostReceipt(costResult,line.getM_InOutLine_ID(),as,trxName);  }  dateAcct=TimeUtil.addDays(today,65);  MMovement move=createMovement(dateAcct,new BigDecimal("5"));  for (  MMovementLine line : move.getLines(true)) {    costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("53.5938"),new BigDecimal("9"),new BigDecimal("482.3442"),new BigDecimal("267.9690"),new BigDecimal("0"),new BigDecimal("5"),new BigDecimal("53.5938"),new BigDecimal("4"),new BigDecimal("214.3752"),dateAcct);    assertCostMovement(costResult,line.getM_MovementLine_ID(),as,trxName);  }  dateAcct=TimeUtil.addDays(today,70);  MInventory inventory=createPhisicalInventory(dateAcct,new BigDecimal("20"),costResult.cumulateQty);  for (  MInventoryLine line : inventory.getLines(true)) {    costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("42.0488"),new BigDecimal("51"),new BigDecimal("2144.4906"),new BigDecimal("462.5368"),new BigDecimal("0"),new BigDecimal("11"),new BigDecimal("42.0488"),new BigDecimal("40"),new BigDecimal("1681.9538"),dateAcct);    assertCostPhisicalInventory(costResult,line.getM_InventoryLine_ID(),as,trxName);    break;  }  dateAcct=TimeUtil.addDays(today,80);  inventory=createInvetoryInternalUse(dateAcct,new BigDecimal("-5"));  for (  MInventoryLine line : inventory.getLines(true)) {    costResult=new CostResult(product.getM_Product_ID(),new BigDecimal("42.0488"),new BigDecimal("56"),new BigDecimal("2354.7346"),new BigDecimal("210.2440"),new BigDecimal("0"),new BigDecimal("5"),new BigDecimal("42.0488"),new BigDecimal("51"),new BigDecimal("2144.4906"),dateAcct);    assertCostPhisicalInventory(costResult,line.getM_InventoryLine_ID(),as,trxName);    ;  }  createTrxAndInventoryValuationReport();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void assertArrayEqual(long[] expected,long[] actual,long maxRelativeError,String errorMessage){  TestUtils.assertArrayEqual(expected,actual,maxRelativeError,errorMessage);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return mf == null ? null : mf.getRecordTimes();}  }
class C{  public String toString(){  String ret=new String();  ret+="SynapseNode: (" + this.getGlobalFullBounds().x + ")("+ getGlobalFullBounds().y+ ")\n";  return ret;}  }
class C{  public void release(long ptr,long size){  release0(ptr,size,allocated);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_2__MORE_CODE_1:    return moreCode_1 != null && !moreCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean checkInteractiveElement(Element e){  return checkInteractiveElement((SVGDocument)e.getOwnerDocument(),e);}  }
class C{  public String splitPointTipText(){  return "Numeric value to be used for selection on numeric attribute. " + "Instances with values smaller than given value will be selected.";}  }
class C{  public void exportPrivateKey(BurpCertificate certificate,String filename){  setStatus("Exporting private key...");  try {    fileHelper.exportPEMObject(certificate.getPrivateKey(),filename);    setStatus("Private Key exported.");  } catch (  IOException e) {    setStatus("Error exporting private key. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");  }}  }
class C{  public int readInt() throws IOException {switch (type) {case MatDataTypes.miUINT8:    return (int)(buf.get() & 0xFF);case MatDataTypes.miINT8:  return (int)buf.get();case MatDataTypes.miUINT16:return (int)(buf.getShort() & 0xFFFF);case MatDataTypes.miINT16:return (int)buf.getShort();case MatDataTypes.miUINT32:return (int)(buf.getInt() & 0xFFFFFFFF);case MatDataTypes.miINT32:return (int)buf.getInt();case MatDataTypes.miUINT64:return (int)buf.getLong();case MatDataTypes.miDOUBLE:return (int)buf.getDouble();default :throw new IllegalArgumentException("Unknown data type: " + type);}}  }
class C{  public SendableVideoMessage build(){  return new SendableVideoMessage(video,duration,width,height,caption,replyTo,replyMarkup,disableNotification);}  }
class C{  protected boolean doWaitForObbStateChange(ObbListener obbListener){synchronized (obbListener) {    long waitTimeMillis=0;    while (!obbListener.isDone()) {      try {        Log.i(LOG_TAG,"Waiting for listener...");        obbListener.wait(WAIT_TIME_INCR);        Log.i(LOG_TAG,"Awoke from waiting for listener...");        waitTimeMillis+=WAIT_TIME_INCR;        if (waitTimeMillis > MAX_WAIT_TIME) {          fail("Timed out waiting for OBB state to change!");        }      } catch (      InterruptedException e) {        Log.i(LOG_TAG,e.toString());      }    }    return obbListener.isDone();  }}  }
class C{  public static String byteArrayToHexString(byte[] block,int offset,int length){  StringBuffer buf=new StringBuffer();  int len=block.length;  length=length + offset;  if ((len < length)) {    length=len;  }  for (int i=0 + offset; i < length; i++) {    byte2hex(block[i],buf);    if (i < length - 1) {      buf.append(':');    }  }  return buf.toString();}  }
class C{  protected SquareTerrain(int divisions,double[][] terrain,Vector3[][] normals,double[][] temperature,double xScale,double zScale){  mDivisions=divisions;  mTerrain=terrain;  mTemperature=temperature;  mNormals=normals;  mXScale=xScale;  mZScale=zScale;  mOneOverXScale=1 / xScale;  mOneOverZScale=1 / zScale;  for (int i=0; i <= divisions; ++i)   for (int j=0; j <= divisions; ++j) {    if (terrain[i][j] < mMinH)     mMinH=terrain[i][j]; else     if (terrain[i][j] > mMaxH)     mMaxH=terrain[i][j];    if (temperature[i][j] < mMinT)     mMinT=temperature[i][j]; else     if (temperature[i][j] > mMaxT)     mMaxT=temperature[i][j];  }  if (debug) {    Material mat=new Material();    mV0=new Sphere(0.2f,8,8);    mV1=new Sphere(0.2f,8,8);    mV2=new Sphere(0.2f,8,8);    mNor=new Sphere(0.2f,8,8);    mNorBase=new Sphere(0.2f,8,8);    mV0.setMaterial(mat);    mV1.setMaterial(mat);    mV2.setMaterial(mat);    mNor.setMaterial(mat);    mNorBase.setMaterial(mat);    mNor.setColor(Color.MAGENTA);    mNorBase.setColor(Color.BLACK);    mV0.setColor(Color.RED);    mV1.setColor(Color.GREEN);    mV2.setColor(Color.BLUE);    this.addChild(mV0);    this.addChild(mV1);    this.addChild(mV2);    this.addChild(mNor);    this.addChild(mNorBase);  }}  }
class C{  public static void e(String tag,String msg){  if (sIsLogEnabled) {    Log.e(tag,getContent(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public void stopEventLog(String tenant) throws ClientException, ClientProtocolException, WebApplicationException, HttpException, IOException {  URI uri=buildURI(parent.getHostRetriever(),STOP_EVENT_LOG_URI,tenant);  HttpPost post=RequestFactory.createPostRequest(uri,parent.getToken());  execute(parent.getClient(),post);}  }
class C{  private String createStartMomentXml(String momentType,String momentId){  return "<moment " + "type='" + momentType + "' "+ "id='"+ momentId+ "' >";}  }
class C{  static void dispatchToWindow(XEvent ev){  XBaseWindow target=XAwtState.getGrabWindow();  if (target == null || !isGrabbedEvent(ev,target)) {    target=XToolkit.windowToXWindow(ev.get_xany().get_window());  }  if (target != null && target.checkInitialised()) {    target.dispatchEvent(ev);  }}  }
class C{  public static boolean isAccountClassClass(GenericValue glAccountClass,String parentGlAccountClassId) throws GenericEntityException {  if (glAccountClass == null)   return false;  if (parentGlAccountClassId.equals(glAccountClass.get("glAccountClassId"))) {    return true;  }  String parentClassId=glAccountClass.getString("parentClassId");  if (parentClassId == null) {    return false;  }  if (parentClassId.equals(parentGlAccountClassId)) {    return true;  }  return isAccountClassClass(glAccountClass.getRelatedOne("ParentGlAccountClass",true),parentGlAccountClassId);}  }
class C{  private final long internalNextLong(long origin,long bound){  long r=TLRandom.mix64(nextSeed());  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=TLRandom.mix64(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=TLRandom.mix64(nextSeed());    }  }  return r;}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  public NativeSize(long value){  super(SIZE,value);}  }
class C{  private void initSwitchLineAction(){  aSwitchLinesDownAction=new SwitchAction("switchLinesDown",KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,Event.SHIFT_MASK),this);  aSwitchLinesUpAction=new SwitchAction("switchLinesUp",KeyStroke.getKeyStroke(KeyEvent.VK_UP,Event.SHIFT_MASK),this);  JTable table=m_curGC.getTable();  table.getInputMap(CPanel.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,Event.SHIFT_MASK),"none");  table.getInputMap(CPanel.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,Event.SHIFT_MASK),"none");  table.getInputMap(CPanel.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,Event.SHIFT_MASK),"none");  table.getInputMap(CPanel.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,Event.SHIFT_MASK),"none");  getInputMap(CPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,Event.SHIFT_MASK),aSwitchLinesDownAction.getName());  getActionMap().put(aSwitchLinesDownAction.getName(),aSwitchLinesDownAction);  getInputMap(CPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,Event.SHIFT_MASK),aSwitchLinesUpAction.getName());  getActionMap().put(aSwitchLinesUpAction.getName(),aSwitchLinesUpAction);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  return view.modelToView(p0,b0,p1,b1,a);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.146 -0400",hash_original_method="9E77FAB6736E7503C45B87AFC676673E",hash_generated_method="E178A606E22440D1A0851EBA2C112E58") private static void innerListFiles(Collection<File> files,File directory,IOFileFilter filter,boolean includeSubDirectories){  File[] found=directory.listFiles((FileFilter)filter);  if (found != null) {    for (    File file : found) {      if (file.isDirectory()) {        if (includeSubDirectories) {          files.add(file);        }        innerListFiles(files,file,filter,includeSubDirectories);      } else {        files.add(file);      }    }  }}  }
class C{  public static SettingsGroupManager instance(){  return INSTANCE;}  }
class C{  public JMenuItem insert(Action a,int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  JMenuItem mi=new JMenuItem(a);  mi.setHorizontalTextPosition(JButton.TRAILING);  mi.setVerticalTextPosition(JButton.CENTER);  popupMenu.insert(mi,pos);  return mi;}  }
class C{  private synchronized IDETsconfigJson createTsConfig(IFile tsconfigFile) throws CoreException {  IDETsconfigJson tsconfig=jsconConfig.get(tsconfigFile);  if (tsconfig != null) {    return tsconfig;  }  tsconfig=IDETsconfigJson.load(tsconfigFile);synchronized (jsconConfig) {    jsconConfig.put(tsconfigFile,tsconfig);  }  return tsconfig;}  }
class C{  public boolean containsName(String type,String name){  List<String> names=getNames(type);  return names.contains(name);}  }
class C{  public void addPreviewAreaSizeChangedListener(PreviewStatusListener.PreviewAreaChangedListener listener){  if (listener != null && !mPreviewSizeChangedListeners.contains(listener)) {    mPreviewSizeChangedListeners.add(listener);    if (mPreviewArea.width() == 0 || mPreviewArea.height() == 0) {      listener.onPreviewAreaChanged(new RectF(0,0,mWidth,mHeight));    } else {      listener.onPreviewAreaChanged(new RectF(mPreviewArea));    }  }}  }
class C{  public long hash1(char carray[]){  final long p=1099511628211L;  long hash=0xcbf29ce484222325L;  for (int i=0; i < carray.length; i++) {    char d=carray[i];    hash=(hash ^ (d & 0x00FF)) * p;    hash=(hash ^ (d >> 8)) * p;  }  return hash;}  }
class C{  public static int fromMetaDataToFirebirdType(int metaDataType){switch (metaDataType) {case smallint_type:    return ISCConstants.SQL_SHORT;case integer_type:  return ISCConstants.SQL_LONG;case int64_type:return ISCConstants.SQL_INT64;case quad_type:return ISCConstants.SQL_QUAD;case float_type:return ISCConstants.SQL_FLOAT;case double_type:return ISCConstants.SQL_DOUBLE;case d_float_type:return ISCConstants.SQL_D_FLOAT;case date_type:return ISCConstants.SQL_TYPE_DATE;case time_type:return ISCConstants.SQL_TYPE_TIME;case timestamp_type:return ISCConstants.SQL_TIMESTAMP;case char_type:return ISCConstants.SQL_TEXT;case varchar_type:return ISCConstants.SQL_VARYING;case blob_type:return ISCConstants.SQL_BLOB;case boolean_type:return ISCConstants.SQL_BOOLEAN;default :return ISCConstants.SQL_NULL;}}  }
class C{  protected void writeTldDescription() throws IOException {  writer.startElement("taglib",TAG_LIB_SCHEMA_ATTRIBUTES);  writer.writeComment("============== Tag Library Description Elements =============");  writer.startElement("description");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_DESCRIPTION));  writer.closeElement();  writer.startElement("tlib-version");  writer.writeText(JSF_TLIB_VERSION);  writer.closeElement();  writer.startElement("short-name");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_SHORT_NAME));  writer.closeElement();  try {    String displayName=propManager.getProperty(PropertyManager.TAGLIB_DISPLAY_NAME);    writer.startElement("display-name");    writer.writeText(displayName);    writer.closeElement();  } catch (  Exception ex) {  }  writer.startElement("uri");  writer.writeText(propManager.getProperty(PropertyManager.TAGLIB_URI));  writer.closeElement();}  }
class C{  public float generatorSortValue(Text url,CrawlDatum datum,float initSort) throws ScoringFilterException {  for (int i=0; i < this.filters.length; i++) {    initSort=this.filters[i].generatorSortValue(url,datum,initSort);  }  return initSort;}  }
class C{  public void clearAccumulatedForce(){  this.forces.clear();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override public Iterator<Map.Entry<K1,V1>> iterator(){  return new EntryIterator(_map);}  }
class C{  public final void connectXmlStructure(){  GetContentStructureOperation operation=new GetContentStructureOperation();  processOperation(operation);}  }
class C{  @Override public void addTemporaryQueue(final TemporaryQueue temp){  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("addTemporaryQueue(" + temp + ")");  }synchronized (tempQueues) {    tempQueues.add(temp);  }}  }
class C{  public boolean isValor(){  return valor;}  }
class C{  public static double missingValue(){  return MISSING_VALUE;}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof RequestItem)) {    return false;  }  RequestItem that=(RequestItem)other;  return this.appName.equals(that.appName) && this.packageName.equals(that.packageName) && this.className.equals(that.className);}  }
class C{  public static Clock newClock(){  return new Clock();}  }
class C{  public Geo add(Geo b){  return create(this.x() + b.x(),this.y() + b.y(),this.z() + b.z());}  }
class C{  void punch(){  if (ce() == null) {    return;  }  final Entity en=ce();  final boolean isAptPiloting=(en.getCrew() != null) && en.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);  final boolean isMeleeMaster=(en.getCrew() != null) && en.getCrew().getOptions().booleanOption("melee_master");  final ToHitData leftArm=PunchAttackAction.toHit(clientgui.getClient().getGame(),cen,target,PunchAttackAction.LEFT);  final ToHitData rightArm=PunchAttackAction.toHit(clientgui.getClient().getGame(),cen,target,PunchAttackAction.RIGHT);  final double punchOddsRight=Compute.oddsAbove(rightArm.getValue(),isAptPiloting);  final int punchDmgRight=PunchAttackAction.getDamageFor(en,PunchAttackAction.RIGHT,(target instanceof Infantry) && !(target instanceof BattleArmor));  final double punchOddsLeft=Compute.oddsAbove(leftArm.getValue(),isAptPiloting);  final int punchDmgLeft=PunchAttackAction.getDamageFor(en,PunchAttackAction.LEFT,(target instanceof Infantry) && !(target instanceof BattleArmor));  String title=Messages.getString("PhysicalDisplay.PunchDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.PunchDialog.message",new Object[]{rightArm.getValueAsString(),punchOddsRight,rightArm.getDesc(),punchDmgRight,rightArm.getTableDesc(),leftArm.getValueAsString(),punchOddsLeft,leftArm.getDesc(),punchDmgLeft,leftArm.getTableDesc()});  if (isMeleeMaster) {    message=Messages.getString("PhysicalDisplay.MeleeMaster") + "\n\n" + message;  }  if (clientgui.doYesNoDialog(title,message)) {    boolean leftBladeExtend=false;    boolean rightBladeExtend=false;    if ((en instanceof Mech) && (target instanceof Entity) && clientgui.getClient().getGame().getOptions().booleanOption("tacops_retractable_blades")&& (leftArm.getValue() != TargetRoll.IMPOSSIBLE)&& ((Mech)ce()).hasRetractedBlade(Mech.LOC_LARM)) {      leftBladeExtend=clientgui.doYesNoDialog(Messages.getString("PhysicalDisplay.ExtendBladeDialog.title"),Messages.getString("PhysicalDisplay.ExtendBladeDialog.message",new Object[]{ce().getLocationName(Mech.LOC_LARM)}));    }    if ((en instanceof Mech) && (target instanceof Entity) && (rightArm.getValue() != TargetRoll.IMPOSSIBLE)&& clientgui.getClient().getGame().getOptions().booleanOption("tacops_retractable_blades")&& ((Mech)en).hasRetractedBlade(Mech.LOC_RARM)) {      rightBladeExtend=clientgui.doYesNoDialog(Messages.getString("PhysicalDisplay.ExtendBladeDialog" + ".title"),Messages.getString("PhysicalDisplay.ExtendBladeDialog.message",new Object[]{en.getLocationName(Mech.LOC_RARM)}));    }    disableButtons();    if (GUIPreferences.getInstance().getAutoDeclareSearchlight()) {      doSearchlight();    }    if ((leftArm.getValue() != TargetRoll.IMPOSSIBLE) && (rightArm.getValue() != TargetRoll.IMPOSSIBLE)) {      attacks.addElement(new PunchAttackAction(cen,target.getTargetType(),target.getTargetId(),PunchAttackAction.BOTH,leftBladeExtend,rightBladeExtend));      if (isMeleeMaster) {        attacks.addElement(new PunchAttackAction(cen,target.getTargetType(),target.getTargetId(),PunchAttackAction.BOTH,leftBladeExtend,rightBladeExtend));      }    } else     if (leftArm.getValue() < rightArm.getValue()) {      attacks.addElement(new PunchAttackAction(cen,target.getTargetType(),target.getTargetId(),PunchAttackAction.LEFT,leftBladeExtend,rightBladeExtend));      if (isMeleeMaster) {        attacks.addElement(new PunchAttackAction(cen,target.getTargetType(),target.getTargetId(),PunchAttackAction.LEFT,leftBladeExtend,rightBladeExtend));      }    } else {      attacks.addElement(new PunchAttackAction(cen,target.getTargetType(),target.getTargetId(),PunchAttackAction.RIGHT,leftBladeExtend,rightBladeExtend));      if (isMeleeMaster) {        attacks.addElement(new PunchAttackAction(cen,target.getTargetType(),target.getTargetId(),PunchAttackAction.RIGHT,leftBladeExtend,rightBladeExtend));      }    }    ready();  }}  }
class C{  public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){  join(async.getThread(),timeoutMilliseconds);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public boolean isStableNumber(){  return true;}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public Chunk3D(int x,int z,int dimension){  xCoord=x;  zCoord=z;  dimensionId=dimension;}  }
class C{  @Deprecated public static boolean isValidDate(String date,String dateFormat){  return Formats.getDateFormat(dateFormat).isValid(date);}  }
class C{  private ListExpression determineClasses(Expression expr,boolean searchSourceUnit){  ListExpression list=new ListExpression();  if (expr instanceof ClassExpression) {    list.addExpression(expr);  } else   if (expr instanceof VariableExpression && searchSourceUnit) {    VariableExpression ve=(VariableExpression)expr;    ClassNode fromSourceUnit=getSourceUnitClass(ve);    if (fromSourceUnit != null) {      ClassExpression found=classX(fromSourceUnit);      found.setSourcePosition(ve);      list.addExpression(found);    } else {      addError(BASE_BAD_PARAM_ERROR + "an unresolvable reference to '" + ve.getName()+ "'.",expr);    }  } else   if (expr instanceof ListExpression) {    list=(ListExpression)expr;    final List<Expression> expressions=list.getExpressions();    for (int i=0; i < expressions.size(); i++) {      Expression next=expressions.get(i);      if (next instanceof VariableExpression && searchSourceUnit) {        VariableExpression ve=(VariableExpression)next;        ClassNode fromSourceUnit=getSourceUnitClass(ve);        if (fromSourceUnit != null) {          ClassExpression found=classX(fromSourceUnit);          found.setSourcePosition(ve);          expressions.set(i,found);        } else {          addError(BASE_BAD_PARAM_ERROR + "a list containing an unresolvable reference to '" + ve.getName()+ "'.",next);        }      } else       if (!(next instanceof ClassExpression)) {        addError(BASE_BAD_PARAM_ERROR + "a list containing type: " + next.getType().getName()+ ".",next);      }    }    checkDuplicateNameClashes(list);  } else   if (expr != null) {    addError(BASE_BAD_PARAM_ERROR + "a type: " + expr.getType().getName()+ ".",expr);  }  return list;}  }
class C{  public static boolean testAabSphere(double minX,double minY,double minZ,double maxX,double maxY,double maxZ,double centerX,double centerY,double centerZ,double radiusSquared){  double radius2=radiusSquared;  if (centerX < minX) {    double d=(centerX - minX);    radius2-=d * d;  } else   if (centerX > maxX) {    double d=(centerX - maxX);    radius2-=d * d;  }  if (centerY < minY) {    double d=(centerY - minY);    radius2-=d * d;  } else   if (centerY > maxY) {    double d=(centerY - maxY);    radius2-=d * d;  }  if (centerZ < minZ) {    double d=(centerZ - minZ);    radius2-=d * d;  } else   if (centerZ > maxZ) {    double d=(centerZ - maxZ);    radius2-=d * d;  }  return radius2 >= 0.0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=evalBool(stack.pop());  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).setAdvancedDeinterlacing(x);  }  return null;}  }
class C{  private SimplePanel createContentWidget(){  SimplePanel messageWrapper=new SimplePanel();  Label messageLabel=new Label();  messageWrapper.add(messageLabel);  messageWrapper.setStyleName(resources.notificationCss().notificationMessageWrapper());  messageWrapper.ensureDebugId(MESSAGE_WRAPPER_DBG_ID + notification.getId());  return messageWrapper;}  }
class C{  @Override protected int evictionExtraSpace(Builder<K,V> builder){  double factor=EVICTION_SPACE_PERCENT / 100D;  userDataElements=builder.getExpectedMapSize();  final int parallelityEvictionSpace;  if (FEATURE_ExtraParEvictionSpace) {    int evictionSpacePerWriter=builder.getConcurrencyLevel() * EVICTION_SPACE_PER_WRITER;    parallelityEvictionSpace=Math.min(evictionSpacePerWriter,MAXIMUM_EVICTION_SPACE_FOR_WRITERS);  } else {    parallelityEvictionSpace=0;  }  long normalEvictionSpace=(long)(userDataElements * factor);  long extraEvictionSpace=Math.max(normalEvictionSpace,parallelityEvictionSpace);  long plannedSizeLong=userDataElements + extraEvictionSpace;  blockStartAt=(int)Math.min(plannedSizeLong,Integer.MAX_VALUE);  evictNormallyElements=(int)((double)userDataElements * FREE_PERCENTAGE / 100D);  evictNormallyElements=Math.max(1,evictNormallyElements);  evictUntilAtLeast=userDataElements - evictNormallyElements;  if (LOG_INTERNAL_DATA) {    logger.info("Cache eviction tuning [" + id() + "]. Size="+ userDataElements+ ", BLOCK="+ blockStartAt+ ", evictToPos="+ evictUntilAtLeast+ ", normal-evicting="+ evictNormallyElements);  }  return blockStartAt - userDataElements;}  }
class C{  private void runCommercialNow(int length){  lastCommercialRunAttempt=System.currentTimeMillis();  if (repeatCommercial.isSelected()) {    scheduleCommercial(length);  } else {    clearScheduledCommercial();  }  main.runCommercial(currentChannel,length);  setLoadingCommercial(true);}  }
class C{  void unregister(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> listenerMethodsForType=entry.getValue();    CopyOnWriteArraySet<Subscriber> currentSubscribers=subscribers.get(eventType);    if (currentSubscribers == null || !currentSubscribers.removeAll(listenerMethodsForType)) {      throw new IllegalArgumentException("missing event subscriber for an annotated method. Is " + listener + " registered?");    }  }}  }
class C{  public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  private boolean isSameCharacter(char c1,char c2){  return c1 != NULL_CHARACTER && c1 == c2;}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){  alphaAnimator(animators,view,0f);  animators.add(ObjectAnimator.ofFloat(view,"translationY",-recyclerView.getMeasuredHeight() >> 1,0));  if (FlexibleAdapter.DEBUG)   Log.v(TAG,"Added TOP Animator");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS04.class,args);}  }
class C{  public void pushSubHandler(DefaultHandler subhandler){  this.subHandlers.push(subhandler);}  }
class C{  public static void saveAsXML(NSObject root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists() && !parent.mkdirs()) {    throw new IOException("The output directory does not exist and could not be created.");  }  FileOutputStream fous=new FileOutputStream(out);  saveAsXML(root,fous);  fous.close();}  }
class C{  public Vector3d negate(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  public Long zcard(final String key){  checkIsInMulti();  client.zcard(key);  return client.getIntegerReply();}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public static float abs(Float number){  return Math.abs(number.floatValue());}  }
class C{  public static void main(String[] args) throws Exception {  try {    int exitCode=ToolRunner.run(new FtpExportJob(),args);    System.exit(exitCode);  } catch (  Exception e) {    LOG.error(e.getMessage());    System.exit(1);  }}  }
class C{  protected void onChanged(final String key,final Object value){}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public int hashCode(){  if (hashCode == 0) {    hashCode=getName().hashCode() ^ getNamespaceURI().hashCode();    if (hashCode == 0) {      hashCode=0xbabe;    }  }  return hashCode;}  }
class C{  public void socksAccept() throws IOException {  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  public PutIndexedScriptRequest source(BytesReference source){  this.source=source;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void uploadConfig(Path configPath,String configName) throws IOException {  connect();  zkStateReader.getConfigManager().uploadConfigDir(configPath,configName);}  }
class C{  @Override public void validate(final IDescription description){  if (Assert.nameIsValid(description)) {    assertReturnedValueIsOk((StatementDescription)description);  }}  }
class C{  public boolean hasTextOnTagLine(){  return (this.flags & TEXT_ON_TAG_LINE) != 0;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_1__NAME_1:    return getName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:45.620 -0500",hash_original_method="B2A4B0E492C25011D357FE5464557874",hash_generated_method="EF22B4C297DB91EF0334685BA9B1B44B") public HTMLSchema(){  setURI("http://www.w3.org/1999/xhtml");  setPrefix("html");  elementType("<pcdata>",M_EMPTY,M_PCDATA,0);  elementType("<root>",M_ROOT,M_EMPTY,0);  elementType("a",M_PCDATA | M_NOLINK,M_INLINE,0);  elementType("abbr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("acronym",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("address",M_PCDATA | M_INLINE | M_P,M_BLOCK,0);  elementType("applet",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("area",M_EMPTY,M_AREA,0);  elementType("b",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("base",M_EMPTY,M_HEAD,0);  elementType("basefont",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("bdo",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("bgsound",M_EMPTY,M_HEAD,0);  elementType("big",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blink",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blockquote",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("body",M_PCDATA | M_INLINE | M_BLOCK,M_HTML | M_BODY,0);  elementType("br",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("button",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("canvas",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("caption",M_PCDATA | M_INLINE,M_TABULAR,0);  elementType("center",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("cite",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("code",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("col",M_EMPTY,M_COL | M_TABULAR,0);  elementType("colgroup",M_COL,M_TABULAR,0);  elementType("comment",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("dd",M_PCDATA | M_INLINE | M_BLOCK,M_DEF,0);  elementType("del",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCKINLINE | M_BLOCK,F_RESTART);  elementType("dfn",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("dir",M_LI,M_BLOCK,0);  elementType("div",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("dl",M_DEF,M_BLOCK,0);  elementType("dt",M_PCDATA | M_INLINE,M_DEF,0);  elementType("em",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("fieldset",M_PCDATA | M_LEGEND | M_INLINE| M_BLOCK,M_BLOCK,0);  elementType("font",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("form",M_PCDATA | M_INLINE | M_NOLINK| M_BLOCK| M_TR| M_CELL,M_BLOCK | M_FORM,F_NOFORCE);  elementType("frame",M_EMPTY,M_FRAME,0);  elementType("frameset",M_FRAME,M_FRAME | M_HTML,0);  elementType("h1",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h2",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h3",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h4",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h5",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h6",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("head",M_HEAD,M_HTML,0);  elementType("hr",M_EMPTY,M_BLOCK,0);  elementType("html",M_HTML,M_ROOT,0);  elementType("i",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("iframe",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("img",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("input",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("ins",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCK,F_RESTART);  elementType("isindex",M_EMPTY,M_HEAD,0);  elementType("kbd",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("label",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("legend",M_PCDATA | M_INLINE,M_LEGEND,0);  elementType("li",M_PCDATA | M_INLINE | M_BLOCK,M_LI,0);  elementType("link",M_EMPTY,M_HEAD | M_INLINE,0);  elementType("listing",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("map",M_BLOCK | M_AREA,M_INLINE,0);  elementType("marquee",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("menu",M_LI,M_BLOCK,0);  elementType("meta",M_EMPTY,M_HEAD,0);  elementType("nobr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("noframes",M_BODY | M_BLOCK | M_INLINE,M_BLOCK | M_HTML | M_FRAME,0);  elementType("noscript",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("object",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_HEAD | M_INLINE | M_NOLINK,0);  elementType("ol",M_LI,M_BLOCK,0);  elementType("optgroup",M_OPTIONS,M_OPTIONS,0);  elementType("option",M_PCDATA,M_OPTION | M_OPTIONS,0);  elementType("p",M_PCDATA | M_INLINE | M_TABLE,M_BLOCK | M_P,0);  elementType("param",M_EMPTY,M_PARAM,0);  elementType("pre",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("q",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rb",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rbc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rtc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ruby",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("s",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("samp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("script",M_PCDATA,M_ANY & ~M_ROOT,F_CDATA);  elementType("select",M_OPTIONS,M_INLINE,0);  elementType("small",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("span",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("strike",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("strong",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("style",M_PCDATA,M_HEAD | M_INLINE,F_CDATA);  elementType("sub",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("sup",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("table",M_FORM | M_TABULAR,M_BLOCK | M_TABLE,F_NOFORCE);  elementType("tbody",M_TR,M_TABULAR,0);  elementType("td",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("textarea",M_PCDATA,M_INLINE,0);  elementType("tfoot",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("th",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("thead",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("title",M_PCDATA,M_HEAD,0);  elementType("tr",M_FORM | M_CELL,M_TR | M_TABULAR,0);  elementType("tt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("u",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ul",M_LI,M_BLOCK,0);  elementType("var",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("wbr",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("xmp",M_PCDATA | M_INLINE,M_BLOCK,0);  parent("<pcdata>","body");  parent("html","<root>");  parent("a","body");  parent("abbr","body");  parent("acronym","body");  parent("address","body");  parent("applet","body");  parent("area","map");  parent("b","body");  parent("base","head");  parent("basefont","body");  parent("bdo","body");  parent("bgsound","head");  parent("big","body");  parent("blink","body");  parent("blockquote","body");  parent("body","html");  parent("br","body");  parent("button","form");  parent("canvas","body");  parent("caption","table");  parent("center","body");  parent("cite","body");  parent("code","body");  parent("col","table");  parent("colgroup","table");  parent("comment","body");  parent("dd","dl");  parent("del","body");  parent("dfn","body");  parent("dir","body");  parent("div","body");  parent("dl","body");  parent("dt","dl");  parent("em","body");  parent("fieldset","form");  parent("font","body");  parent("form","body");  parent("frame","frameset");  parent("frameset","html");  parent("h1","body");  parent("h2","body");  parent("h3","body");  parent("h4","body");  parent("h5","body");  parent("h6","body");  parent("head","html");  parent("hr","body");  parent("i","body");  parent("iframe","body");  parent("img","body");  parent("input","form");  parent("ins","body");  parent("isindex","head");  parent("kbd","body");  parent("label","form");  parent("legend","fieldset");  parent("li","ul");  parent("link","head");  parent("listing","body");  parent("map","body");  parent("marquee","body");  parent("menu","body");  parent("meta","head");  parent("nobr","body");  parent("noframes","html");  parent("noscript","body");  parent("object","body");  parent("ol","body");  parent("optgroup","select");  parent("option","select");  parent("p","body");  parent("param","object");  parent("pre","body");  parent("q","body");  parent("rb","body");  parent("rbc","body");  parent("rp","body");  parent("rt","body");  parent("rtc","body");  parent("ruby","body");  parent("s","body");  parent("samp","body");  parent("script","html");  parent("select","form");  parent("small","body");  parent("span","body");  parent("strike","body");  parent("strong","body");  parent("style","head");  parent("sub","body");  parent("sup","body");  parent("table","body");  parent("tbody","table");  parent("td","tr");  parent("textarea","form");  parent("tfoot","table");  parent("th","tr");  parent("thead","table");  parent("title","head");  parent("tr","tbody");  parent("tt","body");  parent("u","body");  parent("ul","body");  parent("var","body");  parent("wbr","body");  parent("xmp","body");  attribute("a","hreflang","NMTOKEN",null);  attribute("a","shape","CDATA","rect");  attribute("a","tabindex","NMTOKEN",null);  attribute("applet","align","NMTOKEN",null);  attribute("area","nohref","BOOLEAN",null);  attribute("area","shape","CDATA","rect");  attribute("area","tabindex","NMTOKEN",null);  attribute("br","clear","CDATA","none");  attribute("button","disabled","BOOLEAN",null);  attribute("button","tabindex","NMTOKEN",null);  attribute("button","type","CDATA","submit");  attribute("caption","align","NMTOKEN",null);  attribute("col","align","NMTOKEN",null);  attribute("col","span","CDATA","1");  attribute("col","valign","NMTOKEN",null);  attribute("colgroup","align","NMTOKEN",null);  attribute("colgroup","span","CDATA","1");  attribute("colgroup","valign","NMTOKEN",null);  attribute("dir","compact","BOOLEAN",null);  attribute("div","align","NMTOKEN",null);  attribute("dl","compact","BOOLEAN",null);  attribute("form","enctype","CDATA","application/x-www-form-urlencoded");  attribute("form","method","CDATA","get");  attribute("frame","frameborder","CDATA","1");  attribute("frame","noresize","BOOLEAN",null);  attribute("frame","scrolling","CDATA","auto");  attribute("h1","align","NMTOKEN",null);  attribute("h2","align","NMTOKEN",null);  attribute("h3","align","NMTOKEN",null);  attribute("h4","align","NMTOKEN",null);  attribute("h5","align","NMTOKEN",null);  attribute("h6","align","NMTOKEN",null);  attribute("hr","align","NMTOKEN",null);  attribute("hr","noshade","BOOLEAN",null);  attribute("iframe","align","NMTOKEN",null);  attribute("iframe","frameborder","CDATA","1");  attribute("iframe","scrolling","CDATA","auto");  attribute("img","align","NMTOKEN",null);  attribute("img","ismap","BOOLEAN",null);  attribute("input","align","NMTOKEN",null);  attribute("input","checked","BOOLEAN",null);  attribute("input","disabled","BOOLEAN",null);  attribute("input","ismap","BOOLEAN",null);  attribute("input","maxlength","NMTOKEN",null);  attribute("input","readonly","BOOLEAN",null);  attribute("input","tabindex","NMTOKEN",null);  attribute("input","type","CDATA","text");  attribute("label","for","IDREF",null);  attribute("legend","align","NMTOKEN",null);  attribute("li","value","NMTOKEN",null);  attribute("link","hreflang","NMTOKEN",null);  attribute("marquee","width","NMTOKEN",null);  attribute("menu","compact","BOOLEAN",null);  attribute("meta","http-equiv","NMTOKEN",null);  attribute("meta","name","NMTOKEN",null);  attribute("object","align","NMTOKEN",null);  attribute("object","declare","BOOLEAN",null);  attribute("object","tabindex","NMTOKEN",null);  attribute("ol","compact","BOOLEAN",null);  attribute("ol","start","NMTOKEN",null);  attribute("optgroup","disabled","BOOLEAN",null);  attribute("option","disabled","BOOLEAN",null);  attribute("option","selected","BOOLEAN",null);  attribute("p","align","NMTOKEN",null);  attribute("param","valuetype","CDATA","data");  attribute("pre","width","NMTOKEN",null);  attribute("rt","rbspan","CDATA","1");  attribute("script","defer","BOOLEAN",null);  attribute("select","disabled","BOOLEAN",null);  attribute("select","multiple","BOOLEAN",null);  attribute("select","size","NMTOKEN",null);  attribute("select","tabindex","NMTOKEN",null);  attribute("table","align","NMTOKEN",null);  attribute("table","frame","NMTOKEN",null);  attribute("table","rules","NMTOKEN",null);  attribute("tbody","align","NMTOKEN",null);  attribute("tbody","valign","NMTOKEN",null);  attribute("td","align","NMTOKEN",null);  attribute("td","colspan","CDATA","1");  attribute("td","headers","IDREFS",null);  attribute("td","nowrap","BOOLEAN",null);  attribute("td","rowspan","CDATA","1");  attribute("td","scope","NMTOKEN",null);  attribute("td","valign","NMTOKEN",null);  attribute("textarea","cols","NMTOKEN",null);  attribute("textarea","disabled","BOOLEAN",null);  attribute("textarea","readonly","BOOLEAN",null);  attribute("textarea","rows","NMTOKEN",null);  attribute("textarea","tabindex","NMTOKEN",null);  attribute("tfoot","align","NMTOKEN",null);  attribute("tfoot","valign","NMTOKEN",null);  attribute("th","align","NMTOKEN",null);  attribute("th","colspan","CDATA","1");  attribute("th","headers","IDREFS",null);  attribute("th","nowrap","BOOLEAN",null);  attribute("th","rowspan","CDATA","1");  attribute("th","scope","NMTOKEN",null);  attribute("th","valign","NMTOKEN",null);  attribute("thead","align","NMTOKEN",null);  attribute("thead","valign","NMTOKEN",null);  attribute("tr","align","NMTOKEN",null);  attribute("tr","valign","NMTOKEN",null);  attribute("ul","compact","BOOLEAN",null);  attribute("ul","type","NMTOKEN",null);  attribute("xmp","width","NMTOKEN",null);  attribute("a","class","NMTOKEN",null);  attribute("abbr","class","NMTOKEN",null);  attribute("acronym","class","NMTOKEN",null);  attribute("address","class","NMTOKEN",null);  attribute("applet","class","NMTOKEN",null);  attribute("area","class","NMTOKEN",null);  attribute("b","class","NMTOKEN",null);  attribute("base","class","NMTOKEN",null);  attribute("basefont","class","NMTOKEN",null);  attribute("bdo","class","NMTOKEN",null);  attribute("bgsound","class","NMTOKEN",null);  attribute("big","class","NMTOKEN",null);  attribute("blink","class","NMTOKEN",null);  attribute("blockquote","class","NMTOKEN",null);  attribute("body","class","NMTOKEN",null);  attribute("br","class","NMTOKEN",null);  attribute("button","class","NMTOKEN",null);  attribute("canvas","class","NMTOKEN",null);  attribute("caption","class","NMTOKEN",null);  attribute("center","class","NMTOKEN",null);  attribute("cite","class","NMTOKEN",null);  attribute("code","class","NMTOKEN",null);  attribute("col","class","NMTOKEN",null);  attribute("colgroup","class","NMTOKEN",null);  attribute("comment","class","NMTOKEN",null);  attribute("dd","class","NMTOKEN",null);  attribute("del","class","NMTOKEN",null);  attribute("dfn","class","NMTOKEN",null);  attribute("dir","class","NMTOKEN",null);  attribute("div","class","NMTOKEN",null);  attribute("dl","class","NMTOKEN",null);  attribute("dt","class","NMTOKEN",null);  attribute("em","class","NMTOKEN",null);  attribute("fieldset","class","NMTOKEN",null);  attribute("font","class","NMTOKEN",null);  attribute("form","class","NMTOKEN",null);  attribute("frame","class","NMTOKEN",null);  attribute("frameset","class","NMTOKEN",null);  attribute("h1","class","NMTOKEN",null);  attribute("h2","class","NMTOKEN",null);  attribute("h3","class","NMTOKEN",null);  attribute("h4","class","NMTOKEN",null);  attribute("h5","class","NMTOKEN",null);  attribute("h6","class","NMTOKEN",null);  attribute("head","class","NMTOKEN",null);  attribute("hr","class","NMTOKEN",null);  attribute("html","class","NMTOKEN",null);  attribute("i","class","NMTOKEN",null);  attribute("iframe","class","NMTOKEN",null);  attribute("img","class","NMTOKEN",null);  attribute("input","class","NMTOKEN",null);  attribute("ins","class","NMTOKEN",null);  attribute("isindex","class","NMTOKEN",null);  attribute("kbd","class","NMTOKEN",null);  attribute("label","class","NMTOKEN",null);  attribute("legend","class","NMTOKEN",null);  attribute("li","class","NMTOKEN",null);  attribute("link","class","NMTOKEN",null);  attribute("listing","class","NMTOKEN",null);  attribute("map","class","NMTOKEN",null);  attribute("marquee","class","NMTOKEN",null);  attribute("menu","class","NMTOKEN",null);  attribute("meta","class","NMTOKEN",null);  attribute("nobr","class","NMTOKEN",null);  attribute("noframes","class","NMTOKEN",null);  attribute("noscript","class","NMTOKEN",null);  attribute("object","class","NMTOKEN",null);  attribute("ol","class","NMTOKEN",null);  attribute("optgroup","class","NMTOKEN",null);  attribute("option","class","NMTOKEN",null);  attribute("p","class","NMTOKEN",null);  attribute("param","class","NMTOKEN",null);  attribute("pre","class","NMTOKEN",null);  attribute("q","class","NMTOKEN",null);  attribute("rb","class","NMTOKEN",null);  attribute("rbc","class","NMTOKEN",null);  attribute("rp","class","NMTOKEN",null);  attribute("rt","class","NMTOKEN",null);  attribute("rtc","class","NMTOKEN",null);  attribute("ruby","class","NMTOKEN",null);  attribute("s","class","NMTOKEN",null);  attribute("samp","class","NMTOKEN",null);  attribute("script","class","NMTOKEN",null);  attribute("select","class","NMTOKEN",null);  attribute("small","class","NMTOKEN",null);  attribute("span","class","NMTOKEN",null);  attribute("strike","class","NMTOKEN",null);  attribute("strong","class","NMTOKEN",null);  attribute("style","class","NMTOKEN",null);  attribute("sub","class","NMTOKEN",null);  attribute("sup","class","NMTOKEN",null);  attribute("table","class","NMTOKEN",null);  attribute("tbody","class","NMTOKEN",null);  attribute("td","class","NMTOKEN",null);  attribute("textarea","class","NMTOKEN",null);  attribute("tfoot","class","NMTOKEN",null);  attribute("th","class","NMTOKEN",null);  attribute("thead","class","NMTOKEN",null);  attribute("title","class","NMTOKEN",null);  attribute("tr","class","NMTOKEN",null);  attribute("tt","class","NMTOKEN",null);  attribute("u","class","NMTOKEN",null);  attribute("ul","class","NMTOKEN",null);  attribute("var","class","NMTOKEN",null);  attribute("wbr","class","NMTOKEN",null);  attribute("xmp","class","NMTOKEN",null);  attribute("a","dir","NMTOKEN",null);  attribute("abbr","dir","NMTOKEN",null);  attribute("acronym","dir","NMTOKEN",null);  attribute("address","dir","NMTOKEN",null);  attribute("applet","dir","NMTOKEN",null);  attribute("area","dir","NMTOKEN",null);  attribute("b","dir","NMTOKEN",null);  attribute("base","dir","NMTOKEN",null);  attribute("basefont","dir","NMTOKEN",null);  attribute("bdo","dir","NMTOKEN",null);  attribute("bgsound","dir","NMTOKEN",null);  attribute("big","dir","NMTOKEN",null);  attribute("blink","dir","NMTOKEN",null);  attribute("blockquote","dir","NMTOKEN",null);  attribute("body","dir","NMTOKEN",null);  attribute("br","dir","NMTOKEN",null);  attribute("button","dir","NMTOKEN",null);  attribute("canvas","dir","NMTOKEN",null);  attribute("caption","dir","NMTOKEN",null);  attribute("center","dir","NMTOKEN",null);  attribute("cite","dir","NMTOKEN",null);  attribute("code","dir","NMTOKEN",null);  attribute("col","dir","NMTOKEN",null);  attribute("colgroup","dir","NMTOKEN",null);  attribute("comment","dir","NMTOKEN",null);  attribute("dd","dir","NMTOKEN",null);  attribute("del","dir","NMTOKEN",null);  attribute("dfn","dir","NMTOKEN",null);  attribute("dir","dir","NMTOKEN",null);  attribute("div","dir","NMTOKEN",null);  attribute("dl","dir","NMTOKEN",null);  attribute("dt","dir","NMTOKEN",null);  attribute("em","dir","NMTOKEN",null);  attribute("fieldset","dir","NMTOKEN",null);  attribute("font","dir","NMTOKEN",null);  attribute("form","dir","NMTOKEN",null);  attribute("frame","dir","NMTOKEN",null);  attribute("frameset","dir","NMTOKEN",null);  attribute("h1","dir","NMTOKEN",null);  attribute("h2","dir","NMTOKEN",null);  attribute("h3","dir","NMTOKEN",null);  attribute("h4","dir","NMTOKEN",null);  attribute("h5","dir","NMTOKEN",null);  attribute("h6","dir","NMTOKEN",null);  attribute("head","dir","NMTOKEN",null);  attribute("hr","dir","NMTOKEN",null);  attribute("html","dir","NMTOKEN",null);  attribute("i","dir","NMTOKEN",null);  attribute("iframe","dir","NMTOKEN",null);  attribute("img","dir","NMTOKEN",null);  attribute("input","dir","NMTOKEN",null);  attribute("ins","dir","NMTOKEN",null);  attribute("isindex","dir","NMTOKEN",null);  attribute("kbd","dir","NMTOKEN",null);  attribute("label","dir","NMTOKEN",null);  attribute("legend","dir","NMTOKEN",null);  attribute("li","dir","NMTOKEN",null);  attribute("link","dir","NMTOKEN",null);  attribute("listing","dir","NMTOKEN",null);  attribute("map","dir","NMTOKEN",null);  attribute("marquee","dir","NMTOKEN",null);  attribute("menu","dir","NMTOKEN",null);  attribute("meta","dir","NMTOKEN",null);  attribute("nobr","dir","NMTOKEN",null);  attribute("noframes","dir","NMTOKEN",null);  attribute("noscript","dir","NMTOKEN",null);  attribute("object","dir","NMTOKEN",null);  attribute("ol","dir","NMTOKEN",null);  attribute("optgroup","dir","NMTOKEN",null);  attribute("option","dir","NMTOKEN",null);  attribute("p","dir","NMTOKEN",null);  attribute("param","dir","NMTOKEN",null);  attribute("pre","dir","NMTOKEN",null);  attribute("q","dir","NMTOKEN",null);  attribute("rb","dir","NMTOKEN",null);  attribute("rbc","dir","NMTOKEN",null);  attribute("rp","dir","NMTOKEN",null);  attribute("rt","dir","NMTOKEN",null);  attribute("rtc","dir","NMTOKEN",null);  attribute("ruby","dir","NMTOKEN",null);  attribute("s","dir","NMTOKEN",null);  attribute("samp","dir","NMTOKEN",null);  attribute("script","dir","NMTOKEN",null);  attribute("select","dir","NMTOKEN",null);  attribute("small","dir","NMTOKEN",null);  attribute("span","dir","NMTOKEN",null);  attribute("strike","dir","NMTOKEN",null);  attribute("strong","dir","NMTOKEN",null);  attribute("style","dir","NMTOKEN",null);  attribute("sub","dir","NMTOKEN",null);  attribute("sup","dir","NMTOKEN",null);  attribute("table","dir","NMTOKEN",null);  attribute("tbody","dir","NMTOKEN",null);  attribute("td","dir","NMTOKEN",null);  attribute("textarea","dir","NMTOKEN",null);  attribute("tfoot","dir","NMTOKEN",null);  attribute("th","dir","NMTOKEN",null);  attribute("thead","dir","NMTOKEN",null);  attribute("title","dir","NMTOKEN",null);  attribute("tr","dir","NMTOKEN",null);  attribute("tt","dir","NMTOKEN",null);  attribute("u","dir","NMTOKEN",null);  attribute("ul","dir","NMTOKEN",null);  attribute("var","dir","NMTOKEN",null);  attribute("wbr","dir","NMTOKEN",null);  attribute("xmp","dir","NMTOKEN",null);  attribute("a","id","ID",null);  attribute("abbr","id","ID",null);  attribute("acronym","id","ID",null);  attribute("address","id","ID",null);  attribute("applet","id","ID",null);  attribute("area","id","ID",null);  attribute("b","id","ID",null);  attribute("base","id","ID",null);  attribute("basefont","id","ID",null);  attribute("bdo","id","ID",null);  attribute("bgsound","id","ID",null);  attribute("big","id","ID",null);  attribute("blink","id","ID",null);  attribute("blockquote","id","ID",null);  attribute("body","id","ID",null);  attribute("br","id","ID",null);  attribute("button","id","ID",null);  attribute("canvas","id","ID",null);  attribute("caption","id","ID",null);  attribute("center","id","ID",null);  attribute("cite","id","ID",null);  attribute("code","id","ID",null);  attribute("col","id","ID",null);  attribute("colgroup","id","ID",null);  attribute("comment","id","ID",null);  attribute("dd","id","ID",null);  attribute("del","id","ID",null);  attribute("dfn","id","ID",null);  attribute("dir","id","ID",null);  attribute("div","id","ID",null);  attribute("dl","id","ID",null);  attribute("dt","id","ID",null);  attribute("em","id","ID",null);  attribute("fieldset","id","ID",null);  attribute("font","id","ID",null);  attribute("form","id","ID",null);  attribute("frame","id","ID",null);  attribute("frameset","id","ID",null);  attribute("h1","id","ID",null);  attribute("h2","id","ID",null);  attribute("h3","id","ID",null);  attribute("h4","id","ID",null);  attribute("h5","id","ID",null);  attribute("h6","id","ID",null);  attribute("head","id","ID",null);  attribute("hr","id","ID",null);  attribute("html","id","ID",null);  attribute("i","id","ID",null);  attribute("iframe","id","ID",null);  attribute("img","id","ID",null);  attribute("input","id","ID",null);  attribute("ins","id","ID",null);  attribute("isindex","id","ID",null);  attribute("kbd","id","ID",null);  attribute("label","id","ID",null);  attribute("legend","id","ID",null);  attribute("li","id","ID",null);  attribute("link","id","ID",null);  attribute("listing","id","ID",null);  attribute("map","id","ID",null);  attribute("marquee","id","ID",null);  attribute("menu","id","ID",null);  attribute("meta","id","ID",null);  attribute("nobr","id","ID",null);  attribute("noframes","id","ID",null);  attribute("noscript","id","ID",null);  attribute("object","id","ID",null);  attribute("ol","id","ID",null);  attribute("optgroup","id","ID",null);  attribute("option","id","ID",null);  attribute("p","id","ID",null);  attribute("param","id","ID",null);  attribute("pre","id","ID",null);  attribute("q","id","ID",null);  attribute("rb","id","ID",null);  attribute("rbc","id","ID",null);  attribute("rp","id","ID",null);  attribute("rt","id","ID",null);  attribute("rtc","id","ID",null);  attribute("ruby","id","ID",null);  attribute("s","id","ID",null);  attribute("samp","id","ID",null);  attribute("script","id","ID",null);  attribute("select","id","ID",null);  attribute("small","id","ID",null);  attribute("span","id","ID",null);  attribute("strike","id","ID",null);  attribute("strong","id","ID",null);  attribute("style","id","ID",null);  attribute("sub","id","ID",null);  attribute("sup","id","ID",null);  attribute("table","id","ID",null);  attribute("tbody","id","ID",null);  attribute("td","id","ID",null);  attribute("textarea","id","ID",null);  attribute("tfoot","id","ID",null);  attribute("th","id","ID",null);  attribute("thead","id","ID",null);  attribute("title","id","ID",null);  attribute("tr","id","ID",null);  attribute("tt","id","ID",null);  attribute("u","id","ID",null);  attribute("ul","id","ID",null);  attribute("var","id","ID",null);  attribute("wbr","id","ID",null);  attribute("xmp","id","ID",null);  attribute("a","lang","NMTOKEN",null);  attribute("abbr","lang","NMTOKEN",null);  attribute("acronym","lang","NMTOKEN",null);  attribute("address","lang","NMTOKEN",null);  attribute("applet","lang","NMTOKEN",null);  attribute("area","lang","NMTOKEN",null);  attribute("b","lang","NMTOKEN",null);  attribute("base","lang","NMTOKEN",null);  attribute("basefont","lang","NMTOKEN",null);  attribute("bdo","lang","NMTOKEN",null);  attribute("bgsound","lang","NMTOKEN",null);  attribute("big","lang","NMTOKEN",null);  attribute("blink","lang","NMTOKEN",null);  attribute("blockquote","lang","NMTOKEN",null);  attribute("body","lang","NMTOKEN",null);  attribute("br","lang","NMTOKEN",null);  attribute("button","lang","NMTOKEN",null);  attribute("canvas","lang","NMTOKEN",null);  attribute("caption","lang","NMTOKEN",null);  attribute("center","lang","NMTOKEN",null);  attribute("cite","lang","NMTOKEN",null);  attribute("code","lang","NMTOKEN",null);  attribute("col","lang","NMTOKEN",null);  attribute("colgroup","lang","NMTOKEN",null);  attribute("comment","lang","NMTOKEN",null);  attribute("dd","lang","NMTOKEN",null);  attribute("del","lang","NMTOKEN",null);  attribute("dfn","lang","NMTOKEN",null);  attribute("dir","lang","NMTOKEN",null);  attribute("div","lang","NMTOKEN",null);  attribute("dl","lang","NMTOKEN",null);  attribute("dt","lang","NMTOKEN",null);  attribute("em","lang","NMTOKEN",null);  attribute("fieldset","lang","NMTOKEN",null);  attribute("font","lang","NMTOKEN",null);  attribute("form","lang","NMTOKEN",null);  attribute("frame","lang","NMTOKEN",null);  attribute("frameset","lang","NMTOKEN",null);  attribute("h1","lang","NMTOKEN",null);  attribute("h2","lang","NMTOKEN",null);  attribute("h3","lang","NMTOKEN",null);  attribute("h4","lang","NMTOKEN",null);  attribute("h5","lang","NMTOKEN",null);  attribute("h6","lang","NMTOKEN",null);  attribute("head","lang","NMTOKEN",null);  attribute("hr","lang","NMTOKEN",null);  attribute("html","lang","NMTOKEN",null);  attribute("i","lang","NMTOKEN",null);  attribute("iframe","lang","NMTOKEN",null);  attribute("img","lang","NMTOKEN",null);  attribute("input","lang","NMTOKEN",null);  attribute("ins","lang","NMTOKEN",null);  attribute("isindex","lang","NMTOKEN",null);  attribute("kbd","lang","NMTOKEN",null);  attribute("label","lang","NMTOKEN",null);  attribute("legend","lang","NMTOKEN",null);  attribute("li","lang","NMTOKEN",null);  attribute("link","lang","NMTOKEN",null);  attribute("listing","lang","NMTOKEN",null);  attribute("map","lang","NMTOKEN",null);  attribute("marquee","lang","NMTOKEN",null);  attribute("menu","lang","NMTOKEN",null);  attribute("meta","lang","NMTOKEN",null);  attribute("nobr","lang","NMTOKEN",null);  attribute("noframes","lang","NMTOKEN",null);  attribute("noscript","lang","NMTOKEN",null);  attribute("object","lang","NMTOKEN",null);  attribute("ol","lang","NMTOKEN",null);  attribute("optgroup","lang","NMTOKEN",null);  attribute("option","lang","NMTOKEN",null);  attribute("p","lang","NMTOKEN",null);  attribute("param","lang","NMTOKEN",null);  attribute("pre","lang","NMTOKEN",null);  attribute("q","lang","NMTOKEN",null);  attribute("rb","lang","NMTOKEN",null);  attribute("rbc","lang","NMTOKEN",null);  attribute("rp","lang","NMTOKEN",null);  attribute("rt","lang","NMTOKEN",null);  attribute("rtc","lang","NMTOKEN",null);  attribute("ruby","lang","NMTOKEN",null);  attribute("s","lang","NMTOKEN",null);  attribute("samp","lang","NMTOKEN",null);  attribute("script","lang","NMTOKEN",null);  attribute("select","lang","NMTOKEN",null);  attribute("small","lang","NMTOKEN",null);  attribute("span","lang","NMTOKEN",null);  attribute("strike","lang","NMTOKEN",null);  attribute("strong","lang","NMTOKEN",null);  attribute("style","lang","NMTOKEN",null);  attribute("sub","lang","NMTOKEN",null);  attribute("sup","lang","NMTOKEN",null);  attribute("table","lang","NMTOKEN",null);  attribute("tbody","lang","NMTOKEN",null);  attribute("td","lang","NMTOKEN",null);  attribute("textarea","lang","NMTOKEN",null);  attribute("tfoot","lang","NMTOKEN",null);  attribute("th","lang","NMTOKEN",null);  attribute("thead","lang","NMTOKEN",null);  attribute("title","lang","NMTOKEN",null);  attribute("tr","lang","NMTOKEN",null);  attribute("tt","lang","NMTOKEN",null);  attribute("u","lang","NMTOKEN",null);  attribute("ul","lang","NMTOKEN",null);  attribute("var","lang","NMTOKEN",null);  attribute("wbr","lang","NMTOKEN",null);  attribute("xmp","lang","NMTOKEN",null);  entity("aacgr",0x03AC);  entity("Aacgr",0x0386);  entity("aacute",0x00E1);  entity("Aacute",0x00C1);  entity("abreve",0x0103);  entity("Abreve",0x0102);  entity("ac",0x223E);  entity("acd",0x223F);  entity("acirc",0x00E2);  entity("Acirc",0x00C2);  entity("acute",0x00B4);  entity("acy",0x0430);  entity("Acy",0x0410);  entity("aelig",0x00E6);  entity("AElig",0x00C6);  entity("af",0x2061);  entity("afr",0x1D51E);  entity("Afr",0x1D504);  entity("agr",0x03B1);  entity("Agr",0x0391);  entity("agrave",0x00E0);  entity("Agrave",0x00C0);  entity("alefsym",0x2135);  entity("aleph",0x2135);  entity("alpha",0x03B1);  entity("Alpha",0x0391);  entity("amacr",0x0101);  entity("Amacr",0x0100);  entity("amalg",0x2A3F);  entity("amp",0x0026);  entity("and",0x2227);  entity("And",0x2A53);  entity("andand",0x2A55);  entity("andd",0x2A5C);  entity("andslope",0x2A58);  entity("andv",0x2A5A);  entity("ang",0x2220);  entity("ange",0x29A4);  entity("angle",0x2220);  entity("angmsd",0x2221);  entity("angmsdaa",0x29A8);  entity("angmsdab",0x29A9);  entity("angmsdac",0x29AA);  entity("angmsdad",0x29AB);  entity("angmsdae",0x29AC);  entity("angmsdaf",0x29AD);  entity("angmsdag",0x29AE);  entity("angmsdah",0x29AF);  entity("angrt",0x221F);  entity("angrtvb",0x22BE);  entity("angrtvbd",0x299D);  entity("angsph",0x2222);  entity("angst",0x212B);  entity("angzarr",0x237C);  entity("aogon",0x0105);  entity("Aogon",0x0104);  entity("aopf",0x1D552);  entity("Aopf",0x1D538);  entity("ap",0x2248);  entity("apacir",0x2A6F);  entity("ape",0x224A);  entity("apE",0x2A70);  entity("apid",0x224B);  entity("apos",0x0027);  entity("ApplyFunction",0x2061);  entity("approx",0x2248);  entity("approxeq",0x224A);  entity("aring",0x00E5);  entity("Aring",0x00C5);  entity("ascr",0x1D4B6);  entity("Ascr",0x1D49C);  entity("Assign",0x2254);  entity("ast",0x002A);  entity("asymp",0x2248);  entity("asympeq",0x224D);  entity("atilde",0x00E3);  entity("Atilde",0x00C3);  entity("auml",0x00E4);  entity("Auml",0x00C4);  entity("awconint",0x2233);  entity("awint",0x2A11);  entity("b.alpha",0x1D6C2);  entity("b.beta",0x1D6C3);  entity("b.chi",0x1D6D8);  entity("b.delta",0x1D6C5);  entity("b.Delta",0x1D6AB);  entity("b.epsi",0x1D6C6);  entity("b.epsiv",0x1D6DC);  entity("b.eta",0x1D6C8);  entity("b.gamma",0x1D6C4);  entity("b.Gamma",0x1D6AA);  entity("b.gammad",0x1D7CB);  entity("b.Gammad",0x1D7CA);  entity("b.iota",0x1D6CA);  entity("b.kappa",0x1D6CB);  entity("b.kappav",0x1D6DE);  entity("b.lambda",0x1D6CC);  entity("b.Lambda",0x1D6B2);  entity("b.mu",0x1D6CD);  entity("b.nu",0x1D6CE);  entity("b.omega",0x1D6DA);  entity("b.Omega",0x1D6C0);  entity("b.phi",0x1D6D7);  entity("b.Phi",0x1D6BD);  entity("b.phiv",0x1D6DF);  entity("b.pi",0x1D6D1);  entity("b.Pi",0x1D6B7);  entity("b.piv",0x1D6E1);  entity("b.psi",0x1D6D9);  entity("b.Psi",0x1D6BF);  entity("b.rho",0x1D6D2);  entity("b.rhov",0x1D6E0);  entity("b.sigma",0x1D6D4);  entity("b.Sigma",0x1D6BA);  entity("b.sigmav",0x1D6D3);  entity("b.tau",0x1D6D5);  entity("b.Theta",0x1D6AF);  entity("b.thetas",0x1D6C9);  entity("b.thetav",0x1D6DD);  entity("b.upsi",0x1D6D6);  entity("b.Upsi",0x1D6BC);  entity("b.xi",0x1D6CF);  entity("b.Xi",0x1D6B5);  entity("b.zeta",0x1D6C7);  entity("backcong",0x224C);  entity("backepsilon",0x03F6);  entity("backprime",0x2035);  entity("backsim",0x223D);  entity("backsimeq",0x22CD);  entity("Backslash",0x2216);  entity("Barv",0x2AE7);  entity("barvee",0x22BD);  entity("barwed",0x2305);  entity("Barwed",0x2306);  entity("barwedge",0x2305);  entity("bbrk",0x23B5);  entity("bbrktbrk",0x23B6);  entity("bcong",0x224C);  entity("bcy",0x0431);  entity("Bcy",0x0411);  entity("bdquo",0x201E);  entity("becaus",0x2235);  entity("because",0x2235);  entity("bemptyv",0x29B0);  entity("bepsi",0x03F6);  entity("bernou",0x212C);  entity("Bernoullis",0x212C);  entity("beta",0x03B2);  entity("Beta",0x0392);  entity("beth",0x2136);  entity("between",0x226C);  entity("bfr",0x1D51F);  entity("Bfr",0x1D505);  entity("bgr",0x03B2);  entity("Bgr",0x0392);  entity("bigcap",0x22C2);  entity("bigcirc",0x25EF);  entity("bigcup",0x22C3);  entity("bigodot",0x2A00);  entity("bigoplus",0x2A01);  entity("bigotimes",0x2A02);  entity("bigsqcup",0x2A06);  entity("bigstar",0x2605);  entity("bigtriangledown",0x25BD);  entity("bigtriangleup",0x25B3);  entity("biguplus",0x2A04);  entity("bigvee",0x22C1);  entity("bigwedge",0x22C0);  entity("bkarow",0x290D);  entity("blacklozenge",0x29EB);  entity("blacksquare",0x25AA);  entity("blacktriangle",0x25B4);  entity("blacktriangledown",0x25BE);  entity("blacktriangleleft",0x25C2);  entity("blacktriangleright",0x25B8);  entity("blank",0x2423);  entity("blk12",0x2592);  entity("blk14",0x2591);  entity("blk34",0x2593);  entity("block",0x2588);  entity("bnot",0x2310);  entity("bNot",0x2AED);  entity("bopf",0x1D553);  entity("Bopf",0x1D539);  entity("bot",0x22A5);  entity("bottom",0x22A5);  entity("bowtie",0x22C8);  entity("boxbox",0x29C9);  entity("boxdl",0x2510);  entity("boxdL",0x2555);  entity("boxDl",0x2556);  entity("boxDL",0x2557);  entity("boxdr",0x250C);  entity("boxdR",0x2552);  entity("boxDr",0x2553);  entity("boxDR",0x2554);  entity("boxh",0x2500);  entity("boxH",0x2550);  entity("boxhd",0x252C);  entity("boxhD",0x2565);  entity("boxHd",0x2564);  entity("boxHD",0x2566);  entity("boxhu",0x2534);  entity("boxhU",0x2568);  entity("boxHu",0x2567);  entity("boxHU",0x2569);  entity("boxminus",0x229F);  entity("boxplus",0x229E);  entity("boxtimes",0x22A0);  entity("boxul",0x2518);  entity("boxuL",0x255B);  entity("boxUl",0x255C);  entity("boxUL",0x255D);  entity("boxur",0x2514);  entity("boxuR",0x2558);  entity("boxUr",0x2559);  entity("boxUR",0x255A);  entity("boxv",0x2502);  entity("boxV",0x2551);  entity("boxvh",0x253C);  entity("boxvH",0x256A);  entity("boxVh",0x256B);  entity("boxVH",0x256C);  entity("boxvl",0x2524);  entity("boxvL",0x2561);  entity("boxVl",0x2562);  entity("boxVL",0x2563);  entity("boxvr",0x251C);  entity("boxvR",0x255E);  entity("boxVr",0x255F);  entity("boxVR",0x2560);  entity("bprime",0x2035);  entity("breve",0x02D8);  entity("brvbar",0x00A6);  entity("bscr",0x1D4B7);  entity("Bscr",0x212C);  entity("bsemi",0x204F);  entity("bsim",0x223D);  entity("bsime",0x22CD);  entity("bsol",0x005C);  entity("bsolb",0x29C5);  entity("bull",0x2022);  entity("bullet",0x2022);  entity("bump",0x224E);  entity("bumpe",0x224F);  entity("bumpE",0x2AAE);  entity("bumpeq",0x224F);  entity("Bumpeq",0x224E);  entity("cacute",0x0107);  entity("Cacute",0x0106);  entity("cap",0x2229);  entity("Cap",0x22D2);  entity("capand",0x2A44);  entity("capbrcup",0x2A49);  entity("capcap",0x2A4B);  entity("capcup",0x2A47);  entity("capdot",0x2A40);  entity("CapitalDifferentialD",0x2145);  entity("caret",0x2041);  entity("caron",0x02C7);  entity("Cayleys",0x212D);  entity("ccaps",0x2A4D);  entity("ccaron",0x010D);  entity("Ccaron",0x010C);  entity("ccedil",0x00E7);  entity("Ccedil",0x00C7);  entity("ccirc",0x0109);  entity("Ccirc",0x0108);  entity("Cconint",0x2230);  entity("ccups",0x2A4C);  entity("ccupssm",0x2A50);  entity("cdot",0x010B);  entity("Cdot",0x010A);  entity("cedil",0x00B8);  entity("Cedilla",0x00B8);  entity("cemptyv",0x29B2);  entity("cent",0x00A2);  entity("centerdot",0x00B7);  entity("cfr",0x1D520);  entity("Cfr",0x212D);  entity("chcy",0x0447);  entity("CHcy",0x0427);  entity("check",0x2713);  entity("checkmark",0x2713);  entity("chi",0x03C7);  entity("Chi",0x03A7);  entity("cir",0x25CB);  entity("circ",0x02C6);  entity("circeq",0x2257);  entity("circlearrowleft",0x21BA);  entity("circlearrowright",0x21BB);  entity("circledast",0x229B);  entity("circledcirc",0x229A);  entity("circleddash",0x229D);  entity("CircleDot",0x2299);  entity("circledR",0x00AE);  entity("circledS",0x24C8);  entity("CircleMinus",0x2296);  entity("CirclePlus",0x2295);  entity("CircleTimes",0x2297);  entity("cire",0x2257);  entity("cirE",0x29C3);  entity("cirfnint",0x2A10);  entity("cirmid",0x2AEF);  entity("cirscir",0x29C2);  entity("ClockwiseContourIntegral",0x2232);  entity("CloseCurlyDoubleQuote",0x201D);  entity("CloseCurlyQuote",0x2019);  entity("clubs",0x2663);  entity("clubsuit",0x2663);  entity("colon",0x003A);  entity("Colon",0x2237);  entity("colone",0x2254);  entity("Colone",0x2A74);  entity("coloneq",0x2254);  entity("comma",0x002C);  entity("commat",0x0040);  entity("comp",0x2201);  entity("compfn",0x2218);  entity("complement",0x2201);  entity("complexes",0x2102);  entity("cong",0x2245);  entity("congdot",0x2A6D);  entity("Congruent",0x2261);  entity("conint",0x222E);  entity("Conint",0x222F);  entity("ContourIntegral",0x222E);  entity("copf",0x1D554);  entity("Copf",0x2102);  entity("coprod",0x2210);  entity("Coproduct",0x2210);  entity("copy",0x00A9);  entity("copysr",0x2117);  entity("CounterClockwiseContourIntegral",0x2233);  entity("crarr",0x21B5);  entity("cross",0x2717);  entity("Cross",0x2A2F);  entity("cscr",0x1D4B8);  entity("Cscr",0x1D49E);  entity("csub",0x2ACF);  entity("csube",0x2AD1);  entity("csup",0x2AD0);  entity("csupe",0x2AD2);  entity("ctdot",0x22EF);  entity("cudarrl",0x2938);  entity("cudarrr",0x2935);  entity("cuepr",0x22DE);  entity("cuesc",0x22DF);  entity("cularr",0x21B6);  entity("cularrp",0x293D);  entity("cup",0x222A);  entity("Cup",0x22D3);  entity("cupbrcap",0x2A48);  entity("cupcap",0x2A46);  entity("CupCap",0x224D);  entity("cupcup",0x2A4A);  entity("cupdot",0x228D);  entity("cupor",0x2A45);  entity("curarr",0x21B7);  entity("curarrm",0x293C);  entity("curlyeqprec",0x22DE);  entity("curlyeqsucc",0x22DF);  entity("curlyvee",0x22CE);  entity("curlywedge",0x22CF);  entity("curren",0x00A4);  entity("curvearrowleft",0x21B6);  entity("curvearrowright",0x21B7);  entity("cuvee",0x22CE);  entity("cuwed",0x22CF);  entity("cwconint",0x2232);  entity("cwint",0x2231);  entity("cylcty",0x232D);  entity("dagger",0x2020);  entity("Dagger",0x2021);  entity("daleth",0x2138);  entity("darr",0x2193);  entity("dArr",0x21D3);  entity("Darr",0x21A1);  entity("dash",0x2010);  entity("dashv",0x22A3);  entity("Dashv",0x2AE4);  entity("dbkarow",0x290F);  entity("dblac",0x02DD);  entity("dcaron",0x010F);  entity("Dcaron",0x010E);  entity("dcy",0x0434);  entity("Dcy",0x0414);  entity("dd",0x2146);  entity("DD",0x2145);  entity("ddagger",0x2021);  entity("ddarr",0x21CA);  entity("DDotrahd",0x2911);  entity("ddotseq",0x2A77);  entity("deg",0x00B0);  entity("Del",0x2207);  entity("delta",0x03B4);  entity("Delta",0x0394);  entity("demptyv",0x29B1);  entity("dfisht",0x297F);  entity("dfr",0x1D521);  entity("Dfr",0x1D507);  entity("dgr",0x03B4);  entity("Dgr",0x0394);  entity("dHar",0x2965);  entity("dharl",0x21C3);  entity("dharr",0x21C2);  entity("DiacriticalAcute",0x00B4);  entity("DiacriticalDot",0x02D9);  entity("DiacriticalDoubleAcute",0x02DD);  entity("DiacriticalGrave",0x0060);  entity("DiacriticalTilde",0x02DC);  entity("diam",0x22C4);  entity("diamond",0x22C4);  entity("diamondsuit",0x2666);  entity("diams",0x2666);  entity("die",0x00A8);  entity("DifferentialD",0x2146);  entity("digamma",0x03DD);  entity("disin",0x22F2);  entity("div",0x00F7);  entity("divide",0x00F7);  entity("divideontimes",0x22C7);  entity("divonx",0x22C7);  entity("djcy",0x0452);  entity("DJcy",0x0402);  entity("dlcorn",0x231E);  entity("dlcrop",0x230D);  entity("dollar",0x0024);  entity("dopf",0x1D555);  entity("Dopf",0x1D53B);  entity("dot",0x02D9);  entity("Dot",0x00A8);  entity("doteq",0x2250);  entity("doteqdot",0x2251);  entity("DotEqual",0x2250);  entity("dotminus",0x2238);  entity("dotplus",0x2214);  entity("dotsquare",0x22A1);  entity("doublebarwedge",0x2306);  entity("DoubleContourIntegral",0x222F);  entity("DoubleDot",0x00A8);  entity("DoubleDownArrow",0x21D3);  entity("DoubleLeftArrow",0x21D0);  entity("DoubleLeftRightArrow",0x21D4);  entity("DoubleLeftTee",0x2AE4);  entity("DoubleLongLeftArrow",0x27F8);  entity("DoubleLongLeftRightArrow",0x27FA);  entity("DoubleLongRightArrow",0x27F9);  entity("DoubleRightArrow",0x21D2);  entity("DoubleRightTee",0x22A8);  entity("DoubleUpArrow",0x21D1);  entity("DoubleUpDownArrow",0x21D5);  entity("DoubleVerticalBar",0x2225);  entity("downarrow",0x2193);  entity("Downarrow",0x21D3);  entity("DownArrowBar",0x2913);  entity("DownArrowUpArrow",0x21F5);  entity("downdownarrows",0x21CA);  entity("downharpoonleft",0x21C3);  entity("downharpoonright",0x21C2);  entity("DownLeftRightVector",0x2950);  entity("DownLeftTeeVector",0x295E);  entity("DownLeftVector",0x21BD);  entity("DownLeftVectorBar",0x2956);  entity("DownRightTeeVector",0x295F);  entity("DownRightVector",0x21C1);  entity("DownRightVectorBar",0x2957);  entity("DownTee",0x22A4);  entity("DownTeeArrow",0x21A7);  entity("drbkarow",0x2910);  entity("drcorn",0x231F);  entity("drcrop",0x230C);  entity("dscr",0x1D4B9);  entity("Dscr",0x1D49F);  entity("dscy",0x0455);  entity("DScy",0x0405);  entity("dsol",0x29F6);  entity("dstrok",0x0111);  entity("Dstrok",0x0110);  entity("dtdot",0x22F1);  entity("dtri",0x25BF);  entity("dtrif",0x25BE);  entity("duarr",0x21F5);  entity("duhar",0x296F);  entity("dwangle",0x29A6);  entity("dzcy",0x045F);  entity("DZcy",0x040F);  entity("dzigrarr",0x27FF);  entity("eacgr",0x03AD);  entity("Eacgr",0x0388);  entity("eacute",0x00E9);  entity("Eacute",0x00C9);  entity("easter",0x2A6E);  entity("ecaron",0x011B);  entity("Ecaron",0x011A);  entity("ecir",0x2256);  entity("ecirc",0x00EA);  entity("Ecirc",0x00CA);  entity("ecolon",0x2255);  entity("ecy",0x044D);  entity("Ecy",0x042D);  entity("eDDot",0x2A77);  entity("edot",0x0117);  entity("eDot",0x2251);  entity("Edot",0x0116);  entity("ee",0x2147);  entity("eeacgr",0x03AE);  entity("EEacgr",0x0389);  entity("eegr",0x03B7);  entity("EEgr",0x0397);  entity("efDot",0x2252);  entity("efr",0x1D522);  entity("Efr",0x1D508);  entity("eg",0x2A9A);  entity("egr",0x03B5);  entity("Egr",0x0395);  entity("egrave",0x00E8);  entity("Egrave",0x00C8);  entity("egs",0x2A96);  entity("egsdot",0x2A98);  entity("el",0x2A99);  entity("Element",0x2208);  entity("elinters",0x23E7);  entity("ell",0x2113);  entity("els",0x2A95);  entity("elsdot",0x2A97);  entity("emacr",0x0113);  entity("Emacr",0x0112);  entity("empty",0x2205);  entity("emptyset",0x2205);  entity("EmptySmallSquare",0x25FB);  entity("emptyv",0x2205);  entity("EmptyVerySmallSquare",0x25AB);  entity("emsp",0x2003);  entity("emsp13",0x2004);  entity("emsp14",0x2005);  entity("eng",0x014B);  entity("ENG",0x014A);  entity("ensp",0x2002);  entity("eogon",0x0119);  entity("Eogon",0x0118);  entity("eopf",0x1D556);  entity("Eopf",0x1D53C);  entity("epar",0x22D5);  entity("eparsl",0x29E3);  entity("eplus",0x2A71);  entity("epsi",0x03F5);  entity("epsilon",0x03B5);  entity("Epsilon",0x0395);  entity("epsiv",0x03B5);  entity("eqcirc",0x2256);  entity("eqcolon",0x2255);  entity("eqsim",0x2242);  entity("eqslantgtr",0x2A96);  entity("eqslantless",0x2A95);  entity("Equal",0x2A75);  entity("equals",0x003D);  entity("EqualTilde",0x2242);  entity("equest",0x225F);  entity("Equilibrium",0x21CC);  entity("equiv",0x2261);  entity("equivDD",0x2A78);  entity("eqvparsl",0x29E5);  entity("erarr",0x2971);  entity("erDot",0x2253);  entity("escr",0x212F);  entity("Escr",0x2130);  entity("esdot",0x2250);  entity("esim",0x2242);  entity("Esim",0x2A73);  entity("eta",0x03B7);  entity("Eta",0x0397);  entity("eth",0x00F0);  entity("ETH",0x00D0);  entity("euml",0x00EB);  entity("Euml",0x00CB);  entity("euro",0x20AC);  entity("excl",0x0021);  entity("exist",0x2203);  entity("Exists",0x2203);  entity("expectation",0x2130);  entity("exponentiale",0x2147);  entity("fallingdotseq",0x2252);  entity("fcy",0x0444);  entity("Fcy",0x0424);  entity("female",0x2640);  entity("ffilig",0xFB03);  entity("fflig",0xFB00);  entity("ffllig",0xFB04);  entity("ffr",0x1D523);  entity("Ffr",0x1D509);  entity("filig",0xFB01);  entity("FilledSmallSquare",0x25FC);  entity("FilledVerySmallSquare",0x25AA);  entity("flat",0x266D);  entity("fllig",0xFB02);  entity("fltns",0x25B1);  entity("fnof",0x0192);  entity("fopf",0x1D557);  entity("Fopf",0x1D53D);  entity("forall",0x2200);  entity("fork",0x22D4);  entity("forkv",0x2AD9);  entity("Fouriertrf",0x2131);  entity("fpartint",0x2A0D);  entity("frac12",0x00BD);  entity("frac13",0x2153);  entity("frac14",0x00BC);  entity("frac15",0x2155);  entity("frac16",0x2159);  entity("frac18",0x215B);  entity("frac23",0x2154);  entity("frac25",0x2156);  entity("frac34",0x00BE);  entity("frac35",0x2157);  entity("frac38",0x215C);  entity("frac45",0x2158);  entity("frac56",0x215A);  entity("frac58",0x215D);  entity("frac78",0x215E);  entity("frasl",0x2044);  entity("frown",0x2322);  entity("fscr",0x1D4BB);  entity("Fscr",0x2131);  entity("gacute",0x01F5);  entity("gamma",0x03B3);  entity("Gamma",0x0393);  entity("gammad",0x03DD);  entity("Gammad",0x03DC);  entity("gap",0x2A86);  entity("gbreve",0x011F);  entity("Gbreve",0x011E);  entity("Gcedil",0x0122);  entity("gcirc",0x011D);  entity("Gcirc",0x011C);  entity("gcy",0x0433);  entity("Gcy",0x0413);  entity("gdot",0x0121);  entity("Gdot",0x0120);  entity("ge",0x2265);  entity("gE",0x2267);  entity("gel",0x22DB);  entity("gEl",0x2A8C);  entity("geq",0x2265);  entity("geqq",0x2267);  entity("geqslant",0x2A7E);  entity("ges",0x2A7E);  entity("gescc",0x2AA9);  entity("gesdot",0x2A80);  entity("gesdoto",0x2A82);  entity("gesdotol",0x2A84);  entity("gesles",0x2A94);  entity("gfr",0x1D524);  entity("Gfr",0x1D50A);  entity("gg",0x226B);  entity("Gg",0x22D9);  entity("ggg",0x22D9);  entity("ggr",0x03B3);  entity("Ggr",0x0393);  entity("gimel",0x2137);  entity("gjcy",0x0453);  entity("GJcy",0x0403);  entity("gl",0x2277);  entity("gla",0x2AA5);  entity("glE",0x2A92);  entity("glj",0x2AA4);  entity("gnap",0x2A8A);  entity("gnapprox",0x2A8A);  entity("gne",0x2A88);  entity("gnE",0x2269);  entity("gneq",0x2A88);  entity("gneqq",0x2269);  entity("gnsim",0x22E7);  entity("gopf",0x1D558);  entity("Gopf",0x1D53E);  entity("grave",0x0060);  entity("GreaterEqual",0x2265);  entity("GreaterEqualLess",0x22DB);  entity("GreaterFullEqual",0x2267);  entity("GreaterGreater",0x2AA2);  entity("GreaterLess",0x2277);  entity("GreaterSlantEqual",0x2A7E);  entity("GreaterTilde",0x2273);  entity("gscr",0x210A);  entity("Gscr",0x1D4A2);  entity("gsim",0x2273);  entity("gsime",0x2A8E);  entity("gsiml",0x2A90);  entity("gt",0x003E);  entity("Gt",0x226B);  entity("gtcc",0x2AA7);  entity("gtcir",0x2A7A);  entity("gtdot",0x22D7);  entity("gtlPar",0x2995);  entity("gtquest",0x2A7C);  entity("gtrapprox",0x2A86);  entity("gtrarr",0x2978);  entity("gtrdot",0x22D7);  entity("gtreqless",0x22DB);  entity("gtreqqless",0x2A8C);  entity("gtrless",0x2277);  entity("gtrsim",0x2273);  entity("Hacek",0x02C7);  entity("hairsp",0x200A);  entity("half",0x00BD);  entity("hamilt",0x210B);  entity("hardcy",0x044A);  entity("HARDcy",0x042A);  entity("harr",0x2194);  entity("hArr",0x21D4);  entity("harrcir",0x2948);  entity("harrw",0x21AD);  entity("Hat",0x005E);  entity("hbar",0x210F);  entity("hcirc",0x0125);  entity("Hcirc",0x0124);  entity("hearts",0x2665);  entity("heartsuit",0x2665);  entity("hellip",0x2026);  entity("hercon",0x22B9);  entity("hfr",0x1D525);  entity("Hfr",0x210C);  entity("HilbertSpace",0x210B);  entity("hksearow",0x2925);  entity("hkswarow",0x2926);  entity("hoarr",0x21FF);  entity("homtht",0x223B);  entity("hookleftarrow",0x21A9);  entity("hookrightarrow",0x21AA);  entity("hopf",0x1D559);  entity("Hopf",0x210D);  entity("horbar",0x2015);  entity("HorizontalLine",0x2500);  entity("hscr",0x1D4BD);  entity("Hscr",0x210B);  entity("hslash",0x210F);  entity("hstrok",0x0127);  entity("Hstrok",0x0126);  entity("HumpDownHump",0x224E);  entity("HumpEqual",0x224F);  entity("hybull",0x2043);  entity("hyphen",0x2010);  entity("iacgr",0x03AF);  entity("Iacgr",0x038A);  entity("iacute",0x00ED);  entity("Iacute",0x00CD);  entity("ic",0x2063);  entity("icirc",0x00EE);  entity("Icirc",0x00CE);  entity("icy",0x0438);  entity("Icy",0x0418);  entity("idiagr",0x0390);  entity("idigr",0x03CA);  entity("Idigr",0x03AA);  entity("Idot",0x0130);  entity("iecy",0x0435);  entity("IEcy",0x0415);  entity("iexcl",0x00A1);  entity("iff",0x21D4);  entity("ifr",0x1D526);  entity("Ifr",0x2111);  entity("igr",0x03B9);  entity("Igr",0x0399);  entity("igrave",0x00EC);  entity("Igrave",0x00CC);  entity("ii",0x2148);  entity("iiiint",0x2A0C);  entity("iiint",0x222D);  entity("iinfin",0x29DC);  entity("iiota",0x2129);  entity("ijlig",0x0133);  entity("IJlig",0x0132);  entity("Im",0x2111);  entity("imacr",0x012B);  entity("Imacr",0x012A);  entity("image",0x2111);  entity("ImaginaryI",0x2148);  entity("imagline",0x2110);  entity("imagpart",0x2111);  entity("imath",0x0131);  entity("imof",0x22B7);  entity("imped",0x01B5);  entity("Implies",0x21D2);  entity("in",0x2208);  entity("incare",0x2105);  entity("infin",0x221E);  entity("infintie",0x29DD);  entity("inodot",0x0131);  entity("int",0x222B);  entity("Int",0x222C);  entity("intcal",0x22BA);  entity("integers",0x2124);  entity("Integral",0x222B);  entity("intercal",0x22BA);  entity("Intersection",0x22C2);  entity("intlarhk",0x2A17);  entity("intprod",0x2A3C);  entity("InvisibleComma",0x2063);  entity("InvisibleTimes",0x2062);  entity("iocy",0x0451);  entity("IOcy",0x0401);  entity("iogon",0x012F);  entity("Iogon",0x012E);  entity("iopf",0x1D55A);  entity("Iopf",0x1D540);  entity("iota",0x03B9);  entity("Iota",0x0399);  entity("iprod",0x2A3C);  entity("iquest",0x00BF);  entity("iscr",0x1D4BE);  entity("Iscr",0x2110);  entity("isin",0x2208);  entity("isindot",0x22F5);  entity("isinE",0x22F9);  entity("isins",0x22F4);  entity("isinsv",0x22F3);  entity("isinv",0x2208);  entity("it",0x2062);  entity("itilde",0x0129);  entity("Itilde",0x0128);  entity("iukcy",0x0456);  entity("Iukcy",0x0406);  entity("iuml",0x00EF);  entity("Iuml",0x00CF);  entity("jcirc",0x0135);  entity("Jcirc",0x0134);  entity("jcy",0x0439);  entity("Jcy",0x0419);  entity("jfr",0x1D527);  entity("Jfr",0x1D50D);  entity("jmath",0x0237);  entity("jopf",0x1D55B);  entity("Jopf",0x1D541);  entity("jscr",0x1D4BF);  entity("Jscr",0x1D4A5);  entity("jsercy",0x0458);  entity("Jsercy",0x0408);  entity("jukcy",0x0454);  entity("Jukcy",0x0404);  entity("kappa",0x03BA);  entity("Kappa",0x039A);  entity("kappav",0x03F0);  entity("kcedil",0x0137);  entity("Kcedil",0x0136);  entity("kcy",0x043A);  entity("Kcy",0x041A);  entity("kfr",0x1D528);  entity("Kfr",0x1D50E);  entity("kgr",0x03BA);  entity("Kgr",0x039A);  entity("kgreen",0x0138);  entity("khcy",0x0445);  entity("KHcy",0x0425);  entity("khgr",0x03C7);  entity("KHgr",0x03A7);  entity("kjcy",0x045C);  entity("KJcy",0x040C);  entity("kopf",0x1D55C);  entity("Kopf",0x1D542);  entity("kscr",0x1D4C0);  entity("Kscr",0x1D4A6);  entity("lAarr",0x21DA);  entity("lacute",0x013A);  entity("Lacute",0x0139);  entity("laemptyv",0x29B4);  entity("lagran",0x2112);  entity("lambda",0x03BB);  entity("Lambda",0x039B);  entity("lang",0x2329);  entity("Lang",0x27EA);  entity("langd",0x2991);  entity("langle",0x2329);  entity("lap",0x2A85);  entity("Laplacetrf",0x2112);  entity("laquo",0x00AB);  entity("larr",0x2190);  entity("lArr",0x21D0);  entity("Larr",0x219E);  entity("larrb",0x21E4);  entity("larrbfs",0x291F);  entity("larrfs",0x291D);  entity("larrhk",0x21A9);  entity("larrlp",0x21AB);  entity("larrpl",0x2939);  entity("larrsim",0x2973);  entity("larrtl",0x21A2);  entity("lat",0x2AAB);  entity("latail",0x2919);  entity("lAtail",0x291B);  entity("late",0x2AAD);  entity("lbarr",0x290C);  entity("lBarr",0x290E);  entity("lbbrk",0x2997);  entity("lbrace",0x007B);  entity("lbrack",0x005B);  entity("lbrke",0x298B);  entity("lbrksld",0x298F);  entity("lbrkslu",0x298D);  entity("lcaron",0x013E);  entity("Lcaron",0x013D);  entity("lcedil",0x013C);  entity("Lcedil",0x013B);  entity("lceil",0x2308);  entity("lcub",0x007B);  entity("lcy",0x043B);  entity("Lcy",0x041B);  entity("ldca",0x2936);  entity("ldquo",0x201C);  entity("ldquor",0x201E);  entity("ldrdhar",0x2967);  entity("ldrushar",0x294B);  entity("ldsh",0x21B2);  entity("le",0x2264);  entity("lE",0x2266);  entity("LeftAngleBracket",0x2329);  entity("leftarrow",0x2190);  entity("Leftarrow",0x21D0);  entity("LeftArrowBar",0x21E4);  entity("LeftArrowRightArrow",0x21C6);  entity("leftarrowtail",0x21A2);  entity("LeftCeiling",0x2308);  entity("LeftDoubleBracket",0x27E6);  entity("LeftDownTeeVector",0x2961);  entity("LeftDownVector",0x21C3);  entity("LeftDownVectorBar",0x2959);  entity("LeftFloor",0x230A);  entity("leftharpoondown",0x21BD);  entity("leftharpoonup",0x21BC);  entity("leftleftarrows",0x21C7);  entity("leftrightarrow",0x2194);  entity("Leftrightarrow",0x21D4);  entity("leftrightarrows",0x21C6);  entity("leftrightharpoons",0x21CB);  entity("leftrightsquigarrow",0x21AD);  entity("LeftRightVector",0x294E);  entity("LeftTee",0x22A3);  entity("LeftTeeArrow",0x21A4);  entity("LeftTeeVector",0x295A);  entity("leftthreetimes",0x22CB);  entity("LeftTriangle",0x22B2);  entity("LeftTriangleBar",0x29CF);  entity("LeftTriangleEqual",0x22B4);  entity("LeftUpDownVector",0x2951);  entity("LeftUpTeeVector",0x2960);  entity("LeftUpVector",0x21BF);  entity("LeftUpVectorBar",0x2958);  entity("LeftVector",0x21BC);  entity("LeftVectorBar",0x2952);  entity("leg",0x22DA);  entity("lEg",0x2A8B);  entity("leq",0x2264);  entity("leqq",0x2266);  entity("leqslant",0x2A7D);  entity("les",0x2A7D);  entity("lescc",0x2AA8);  entity("lesdot",0x2A7F);  entity("lesdoto",0x2A81);  entity("lesdotor",0x2A83);  entity("lesges",0x2A93);  entity("lessapprox",0x2A85);  entity("lessdot",0x22D6);  entity("lesseqgtr",0x22DA);  entity("lesseqqgtr",0x2A8B);  entity("LessEqualGreater",0x22DA);  entity("LessFullEqual",0x2266);  entity("LessGreater",0x2276);  entity("lessgtr",0x2276);  entity("LessLess",0x2AA1);  entity("lesssim",0x2272);  entity("LessSlantEqual",0x2A7D);  entity("LessTilde",0x2272);  entity("lfisht",0x297C);  entity("lfloor",0x230A);  entity("lfr",0x1D529);  entity("Lfr",0x1D50F);  entity("lg",0x2276);  entity("lgE",0x2A91);  entity("lgr",0x03BB);  entity("Lgr",0x039B);  entity("lHar",0x2962);  entity("lhard",0x21BD);  entity("lharu",0x21BC);  entity("lharul",0x296A);  entity("lhblk",0x2584);  entity("ljcy",0x0459);  entity("LJcy",0x0409);  entity("ll",0x226A);  entity("Ll",0x22D8);  entity("llarr",0x21C7);  entity("llcorner",0x231E);  entity("Lleftarrow",0x21DA);  entity("llhard",0x296B);  entity("lltri",0x25FA);  entity("lmidot",0x0140);  entity("Lmidot",0x013F);  entity("lmoust",0x23B0);  entity("lmoustache",0x23B0);  entity("lnap",0x2A89);  entity("lnapprox",0x2A89);  entity("lne",0x2A87);  entity("lnE",0x2268);  entity("lneq",0x2A87);  entity("lneqq",0x2268);  entity("lnsim",0x22E6);  entity("loang",0x27EC);  entity("loarr",0x21FD);  entity("lobrk",0x27E6);  entity("longleftarrow",0x27F5);  entity("Longleftarrow",0x27F8);  entity("longleftrightarrow",0x27F7);  entity("Longleftrightarrow",0x27FA);  entity("longmapsto",0x27FC);  entity("longrightarrow",0x27F6);  entity("Longrightarrow",0x27F9);  entity("looparrowleft",0x21AB);  entity("looparrowright",0x21AC);  entity("lopar",0x2985);  entity("lopf",0x1D55D);  entity("Lopf",0x1D543);  entity("loplus",0x2A2D);  entity("lotimes",0x2A34);  entity("lowast",0x2217);  entity("lowbar",0x005F);  entity("LowerLeftArrow",0x2199);  entity("LowerRightArrow",0x2198);  entity("loz",0x25CA);  entity("lozenge",0x25CA);  entity("lozf",0x29EB);  entity("lpar",0x0028);  entity("lparlt",0x2993);  entity("lrarr",0x21C6);  entity("lrcorner",0x231F);  entity("lrhar",0x21CB);  entity("lrhard",0x296D);  entity("lrm",0x200E);  entity("lrtri",0x22BF);  entity("lsaquo",0x2039);  entity("lscr",0x1D4C1);  entity("Lscr",0x2112);  entity("lsh",0x21B0);  entity("lsim",0x2272);  entity("lsime",0x2A8D);  entity("lsimg",0x2A8F);  entity("lsqb",0x005B);  entity("lsquo",0x2018);  entity("lsquor",0x201A);  entity("lstrok",0x0142);  entity("Lstrok",0x0141);  entity("lt",0x003C);  entity("Lt",0x226A);  entity("ltcc",0x2AA6);  entity("ltcir",0x2A79);  entity("ltdot",0x22D6);  entity("lthree",0x22CB);  entity("ltimes",0x22C9);  entity("ltlarr",0x2976);  entity("ltquest",0x2A7B);  entity("ltri",0x25C3);  entity("ltrie",0x22B4);  entity("ltrif",0x25C2);  entity("ltrPar",0x2996);  entity("lurdshar",0x294A);  entity("luruhar",0x2966);  entity("macr",0x00AF);  entity("male",0x2642);  entity("malt",0x2720);  entity("maltese",0x2720);  entity("map",0x21A6);  entity("Map",0x2905);  entity("mapsto",0x21A6);  entity("mapstodown",0x21A7);  entity("mapstoleft",0x21A4);  entity("mapstoup",0x21A5);  entity("marker",0x25AE);  entity("mcomma",0x2A29);  entity("mcy",0x043C);  entity("Mcy",0x041C);  entity("mdash",0x2014);  entity("mDDot",0x223A);  entity("measuredangle",0x2221);  entity("MediumSpace",0x205F);  entity("Mellintrf",0x2133);  entity("mfr",0x1D52A);  entity("Mfr",0x1D510);  entity("mgr",0x03BC);  entity("Mgr",0x039C);  entity("mho",0x2127);  entity("micro",0x00B5);  entity("mid",0x2223);  entity("midast",0x002A);  entity("midcir",0x2AF0);  entity("middot",0x00B7);  entity("minus",0x2212);  entity("minusb",0x229F);  entity("minusd",0x2238);  entity("minusdu",0x2A2A);  entity("MinusPlus",0x2213);  entity("mlcp",0x2ADB);  entity("mldr",0x2026);  entity("mnplus",0x2213);  entity("models",0x22A7);  entity("mopf",0x1D55E);  entity("Mopf",0x1D544);  entity("mp",0x2213);  entity("mscr",0x1D4C2);  entity("Mscr",0x2133);  entity("mstpos",0x223E);  entity("mu",0x03BC);  entity("Mu",0x039C);  entity("multimap",0x22B8);  entity("mumap",0x22B8);  entity("nabla",0x2207);  entity("nacute",0x0144);  entity("Nacute",0x0143);  entity("nap",0x2249);  entity("napos",0x0149);  entity("napprox",0x2249);  entity("natur",0x266E);  entity("natural",0x266E);  entity("naturals",0x2115);  entity("nbsp",0x00A0);  entity("ncap",0x2A43);  entity("ncaron",0x0148);  entity("Ncaron",0x0147);  entity("ncedil",0x0146);  entity("Ncedil",0x0145);  entity("ncong",0x2247);  entity("ncup",0x2A42);  entity("ncy",0x043D);  entity("Ncy",0x041D);  entity("ndash",0x2013);  entity("ne",0x2260);  entity("nearhk",0x2924);  entity("nearr",0x2197);  entity("neArr",0x21D7);  entity("nearrow",0x2197);  entity("NegativeMediumSpace",0x200B);  entity("NegativeThickSpace",0x200B);  entity("NegativeThinSpace",0x200B);  entity("NegativeVeryThinSpace",0x200B);  entity("nequiv",0x2262);  entity("nesear",0x2928);  entity("NestedGreaterGreater",0x226B);  entity("NestedLessLess",0x226A);  entity("NewLine",0x000A);  entity("nexist",0x2204);  entity("nexists",0x2204);  entity("nfr",0x1D52B);  entity("Nfr",0x1D511);  entity("nge",0x2271);  entity("ngeq",0x2271);  entity("ngr",0x03BD);  entity("Ngr",0x039D);  entity("ngsim",0x2275);  entity("ngt",0x226F);  entity("ngtr",0x226F);  entity("nharr",0x21AE);  entity("nhArr",0x21CE);  entity("nhpar",0x2AF2);  entity("ni",0x220B);  entity("nis",0x22FC);  entity("nisd",0x22FA);  entity("niv",0x220B);  entity("njcy",0x045A);  entity("NJcy",0x040A);  entity("nlarr",0x219A);  entity("nlArr",0x21CD);  entity("nldr",0x2025);  entity("nle",0x2270);  entity("nleftarrow",0x219A);  entity("nLeftarrow",0x21CD);  entity("nleftrightarrow",0x21AE);  entity("nLeftrightarrow",0x21CE);  entity("nleq",0x2270);  entity("nless",0x226E);  entity("nlsim",0x2274);  entity("nlt",0x226E);  entity("nltri",0x22EA);  entity("nltrie",0x22EC);  entity("nmid",0x2224);  entity("NoBreak",0x2060);  entity("NonBreakingSpace",0x00A0);  entity("nopf",0x1D55F);  entity("Nopf",0x2115);  entity("not",0x00AC);  entity("Not",0x2AEC);  entity("NotCongruent",0x2262);  entity("NotCupCap",0x226D);  entity("NotDoubleVerticalBar",0x2226);  entity("NotElement",0x2209);  entity("NotEqual",0x2260);  entity("NotExists",0x2204);  entity("NotGreater",0x226F);  entity("NotGreaterEqual",0x2271);  entity("NotGreaterLess",0x2279);  entity("NotGreaterTilde",0x2275);  entity("notin",0x2209);  entity("notinva",0x2209);  entity("notinvb",0x22F7);  entity("notinvc",0x22F6);  entity("NotLeftTriangle",0x22EA);  entity("NotLeftTriangleEqual",0x22EC);  entity("NotLess",0x226E);  entity("NotLessEqual",0x2270);  entity("NotLessGreater",0x2278);  entity("NotLessTilde",0x2274);  entity("notni",0x220C);  entity("notniva",0x220C);  entity("notnivb",0x22FE);  entity("notnivc",0x22FD);  entity("NotPrecedes",0x2280);  entity("NotPrecedesSlantEqual",0x22E0);  entity("NotReverseElement",0x220C);  entity("NotRightTriangle",0x22EB);  entity("NotRightTriangleEqual",0x22ED);  entity("NotSquareSubsetEqual",0x22E2);  entity("NotSquareSupersetEqual",0x22E3);  entity("NotSubsetEqual",0x2288);  entity("NotSucceeds",0x2281);  entity("NotSucceedsSlantEqual",0x22E1);  entity("NotSupersetEqual",0x2289);  entity("NotTilde",0x2241);  entity("NotTildeEqual",0x2244);  entity("NotTildeFullEqual",0x2247);  entity("NotTildeTilde",0x2249);  entity("NotVerticalBar",0x2224);  entity("npar",0x2226);  entity("nparallel",0x2226);  entity("npolint",0x2A14);  entity("npr",0x2280);  entity("nprcue",0x22E0);  entity("nprec",0x2280);  entity("nrarr",0x219B);  entity("nrArr",0x21CF);  entity("nrightarrow",0x219B);  entity("nRightarrow",0x21CF);  entity("nrtri",0x22EB);  entity("nrtrie",0x22ED);  entity("nsc",0x2281);  entity("nsccue",0x22E1);  entity("nscr",0x1D4C3);  entity("Nscr",0x1D4A9);  entity("nshortmid",0x2224);  entity("nshortparallel",0x2226);  entity("nsim",0x2241);  entity("nsime",0x2244);  entity("nsimeq",0x2244);  entity("nsmid",0x2224);  entity("nspar",0x2226);  entity("nsqsube",0x22E2);  entity("nsqsupe",0x22E3);  entity("nsub",0x2284);  entity("nsube",0x2288);  entity("nsubseteq",0x2288);  entity("nsucc",0x2281);  entity("nsup",0x2285);  entity("nsupe",0x2289);  entity("nsupseteq",0x2289);  entity("ntgl",0x2279);  entity("ntilde",0x00F1);  entity("Ntilde",0x00D1);  entity("ntlg",0x2278);  entity("ntriangleleft",0x22EA);  entity("ntrianglelefteq",0x22EC);  entity("ntriangleright",0x22EB);  entity("ntrianglerighteq",0x22ED);  entity("nu",0x03BD);  entity("Nu",0x039D);  entity("num",0x0023);  entity("numero",0x2116);  entity("numsp",0x2007);  entity("nvdash",0x22AC);  entity("nvDash",0x22AD);  entity("nVdash",0x22AE);  entity("nVDash",0x22AF);  entity("nvHarr",0x2904);  entity("nvinfin",0x29DE);  entity("nvlArr",0x2902);  entity("nvrArr",0x2903);  entity("nwarhk",0x2923);  entity("nwarr",0x2196);  entity("nwArr",0x21D6);  entity("nwarrow",0x2196);  entity("nwnear",0x2927);  entity("oacgr",0x03CC);  entity("Oacgr",0x038C);  entity("oacute",0x00F3);  entity("Oacute",0x00D3);  entity("oast",0x229B);  entity("ocir",0x229A);  entity("ocirc",0x00F4);  entity("Ocirc",0x00D4);  entity("ocy",0x043E);  entity("Ocy",0x041E);  entity("odash",0x229D);  entity("odblac",0x0151);  entity("Odblac",0x0150);  entity("odiv",0x2A38);  entity("odot",0x2299);  entity("odsold",0x29BC);  entity("oelig",0x0153);  entity("OElig",0x0152);  entity("ofcir",0x29BF);  entity("ofr",0x1D52C);  entity("Ofr",0x1D512);  entity("ogon",0x02DB);  entity("ogr",0x03BF);  entity("Ogr",0x039F);  entity("ograve",0x00F2);  entity("Ograve",0x00D2);  entity("ogt",0x29C1);  entity("ohacgr",0x03CE);  entity("OHacgr",0x038F);  entity("ohbar",0x29B5);  entity("ohgr",0x03C9);  entity("OHgr",0x03A9);  entity("ohm",0x2126);  entity("oint",0x222E);  entity("olarr",0x21BA);  entity("olcir",0x29BE);  entity("olcross",0x29BB);  entity("oline",0x203E);  entity("olt",0x29C0);  entity("omacr",0x014D);  entity("Omacr",0x014C);  entity("omega",0x03C9);  entity("Omega",0x03A9);  entity("omicron",0x03BF);  entity("Omicron",0x039F);  entity("omid",0x29B6);  entity("ominus",0x2296);  entity("oopf",0x1D560);  entity("Oopf",0x1D546);  entity("opar",0x29B7);  entity("OpenCurlyDoubleQuote",0x201C);  entity("OpenCurlyQuote",0x2018);  entity("operp",0x29B9);  entity("oplus",0x2295);  entity("or",0x2228);  entity("Or",0x2A54);  entity("orarr",0x21BB);  entity("ord",0x2A5D);  entity("order",0x2134);  entity("orderof",0x2134);  entity("ordf",0x00AA);  entity("ordm",0x00BA);  entity("origof",0x22B6);  entity("oror",0x2A56);  entity("orslope",0x2A57);  entity("orv",0x2A5B);  entity("oS",0x24C8);  entity("oscr",0x2134);  entity("Oscr",0x1D4AA);  entity("oslash",0x00F8);  entity("Oslash",0x00D8);  entity("osol",0x2298);  entity("otilde",0x00F5);  entity("Otilde",0x00D5);  entity("otimes",0x2297);  entity("Otimes",0x2A37);  entity("otimesas",0x2A36);  entity("ouml",0x00F6);  entity("Ouml",0x00D6);  entity("ovbar",0x233D);  entity("OverBar",0x00AF);  entity("OverBrace",0xFE37);  entity("OverBracket",0x23B4);  entity("OverParenthesis",0xFE35);  entity("par",0x2225);  entity("para",0x00B6);  entity("parallel",0x2225);  entity("parsim",0x2AF3);  entity("parsl",0x2AFD);  entity("part",0x2202);  entity("PartialD",0x2202);  entity("pcy",0x043F);  entity("Pcy",0x041F);  entity("percnt",0x0025);  entity("period",0x002E);  entity("permil",0x2030);  entity("perp",0x22A5);  entity("pertenk",0x2031);  entity("pfr",0x1D52D);  entity("Pfr",0x1D513);  entity("pgr",0x03C0);  entity("Pgr",0x03A0);  entity("phgr",0x03C6);  entity("PHgr",0x03A6);  entity("phi",0x03D5);  entity("Phi",0x03A6);  entity("phiv",0x03C6);  entity("phmmat",0x2133);  entity("phone",0x260E);  entity("pi",0x03C0);  entity("Pi",0x03A0);  entity("pitchfork",0x22D4);  entity("piv",0x03D6);  entity("planck",0x210F);  entity("planckh",0x210E);  entity("plankv",0x210F);  entity("plus",0x002B);  entity("plusacir",0x2A23);  entity("plusb",0x229E);  entity("pluscir",0x2A22);  entity("plusdo",0x2214);  entity("plusdu",0x2A25);  entity("pluse",0x2A72);  entity("PlusMinus",0x00B1);  entity("plusmn",0x00B1);  entity("plussim",0x2A26);  entity("plustwo",0x2A27);  entity("pm",0x00B1);  entity("Poincareplane",0x210C);  entity("pointint",0x2A15);  entity("popf",0x1D561);  entity("Popf",0x2119);  entity("pound",0x00A3);  entity("pr",0x227A);  entity("Pr",0x2ABB);  entity("prap",0x2AB7);  entity("prcue",0x227C);  entity("pre",0x2AAF);  entity("prE",0x2AB3);  entity("prec",0x227A);  entity("precapprox",0x2AB7);  entity("preccurlyeq",0x227C);  entity("Precedes",0x227A);  entity("PrecedesEqual",0x2AAF);  entity("PrecedesSlantEqual",0x227C);  entity("PrecedesTilde",0x227E);  entity("preceq",0x2AAF);  entity("precnapprox",0x2AB9);  entity("precneqq",0x2AB5);  entity("precnsim",0x22E8);  entity("precsim",0x227E);  entity("prime",0x2032);  entity("Prime",0x2033);  entity("primes",0x2119);  entity("prnap",0x2AB9);  entity("prnE",0x2AB5);  entity("prnsim",0x22E8);  entity("prod",0x220F);  entity("Product",0x220F);  entity("profalar",0x232E);  entity("profline",0x2312);  entity("profsurf",0x2313);  entity("prop",0x221D);  entity("Proportion",0x2237);  entity("Proportional",0x221D);  entity("propto",0x221D);  entity("prsim",0x227E);  entity("prurel",0x22B0);  entity("pscr",0x1D4C5);  entity("Pscr",0x1D4AB);  entity("psgr",0x03C8);  entity("PSgr",0x03A8);  entity("psi",0x03C8);  entity("Psi",0x03A8);  entity("puncsp",0x2008);  entity("qfr",0x1D52E);  entity("Qfr",0x1D514);  entity("qint",0x2A0C);  entity("qopf",0x1D562);  entity("Qopf",0x211A);  entity("qprime",0x2057);  entity("qscr",0x1D4C6);  entity("Qscr",0x1D4AC);  entity("quaternions",0x210D);  entity("quatint",0x2A16);  entity("quest",0x003F);  entity("questeq",0x225F);  entity("quot",0x0022);  entity("rAarr",0x21DB);  entity("race",0x29DA);  entity("racute",0x0155);  entity("Racute",0x0154);  entity("radic",0x221A);  entity("raemptyv",0x29B3);  entity("rang",0x232A);  entity("Rang",0x27EB);  entity("rangd",0x2992);  entity("range",0x29A5);  entity("rangle",0x232A);  entity("raquo",0x00BB);  entity("rarr",0x2192);  entity("rArr",0x21D2);  entity("Rarr",0x21A0);  entity("rarrap",0x2975);  entity("rarrb",0x21E5);  entity("rarrbfs",0x2920);  entity("rarrc",0x2933);  entity("rarrfs",0x291E);  entity("rarrhk",0x21AA);  entity("rarrlp",0x21AC);  entity("rarrpl",0x2945);  entity("rarrsim",0x2974);  entity("rarrtl",0x21A3);  entity("Rarrtl",0x2916);  entity("rarrw",0x219D);  entity("ratail",0x291A);  entity("rAtail",0x291C);  entity("ratio",0x2236);  entity("rationals",0x211A);  entity("rbarr",0x290D);  entity("rBarr",0x290F);  entity("RBarr",0x2910);  entity("rbbrk",0x2998);  entity("rbrace",0x007D);  entity("rbrack",0x005D);  entity("rbrke",0x298C);  entity("rbrksld",0x298E);  entity("rbrkslu",0x2990);  entity("rcaron",0x0159);  entity("Rcaron",0x0158);  entity("rcedil",0x0157);  entity("Rcedil",0x0156);  entity("rceil",0x2309);  entity("rcub",0x007D);  entity("rcy",0x0440);  entity("Rcy",0x0420);  entity("rdca",0x2937);  entity("rdldhar",0x2969);  entity("rdquo",0x201D);  entity("rdquor",0x201D);  entity("rdsh",0x21B3);  entity("Re",0x211C);  entity("real",0x211C);  entity("realine",0x211B);  entity("realpart",0x211C);  entity("reals",0x211D);  entity("rect",0x25AD);  entity("reg",0x00AE);  entity("ReverseElement",0x220B);  entity("ReverseEquilibrium",0x21CB);  entity("ReverseUpEquilibrium",0x296F);  entity("rfisht",0x297D);  entity("rfloor",0x230B);  entity("rfr",0x1D52F);  entity("Rfr",0x211C);  entity("rgr",0x03C1);  entity("Rgr",0x03A1);  entity("rHar",0x2964);  entity("rhard",0x21C1);  entity("rharu",0x21C0);  entity("rharul",0x296C);  entity("rho",0x03C1);  entity("Rho",0x03A1);  entity("rhov",0x03F1);  entity("RightAngleBracket",0x232A);  entity("rightarrow",0x2192);  entity("Rightarrow",0x21D2);  entity("RightArrowBar",0x21E5);  entity("RightArrowLeftArrow",0x21C4);  entity("rightarrowtail",0x21A3);  entity("RightCeiling",0x2309);  entity("RightDoubleBracket",0x27E7);  entity("RightDownTeeVector",0x295D);  entity("RightDownVector",0x21C2);  entity("RightDownVectorBar",0x2955);  entity("RightFloor",0x230B);  entity("rightharpoondown",0x21C1);  entity("rightharpoonup",0x21C0);  entity("rightleftarrows",0x21C4);  entity("rightleftharpoons",0x21CC);  entity("rightrightarrows",0x21C9);  entity("rightsquigarrow",0x219D);  entity("RightTee",0x22A2);  entity("RightTeeArrow",0x21A6);  entity("RightTeeVector",0x295B);  entity("rightthreetimes",0x22CC);  entity("RightTriangle",0x22B3);  entity("RightTriangleBar",0x29D0);  entity("RightTriangleEqual",0x22B5);  entity("RightUpDownVector",0x294F);  entity("RightUpTeeVector",0x295C);  entity("RightUpVector",0x21BE);  entity("RightUpVectorBar",0x2954);  entity("RightVector",0x21C0);  entity("RightVectorBar",0x2953);  entity("ring",0x02DA);  entity("risingdotseq",0x2253);  entity("rlarr",0x21C4);  entity("rlhar",0x21CC);  entity("rlm",0x200F);  entity("rmoust",0x23B1);  entity("rmoustache",0x23B1);  entity("rnmid",0x2AEE);  entity("roang",0x27ED);  entity("roarr",0x21FE);  entity("robrk",0x27E7);  entity("ropar",0x2986);  entity("ropf",0x1D563);  entity("Ropf",0x211D);  entity("roplus",0x2A2E);  entity("rotimes",0x2A35);  entity("RoundImplies",0x2970);  entity("rpar",0x0029);  entity("rpargt",0x2994);  entity("rppolint",0x2A12);  entity("rrarr",0x21C9);  entity("Rrightarrow",0x21DB);  entity("rsaquo",0x203A);  entity("rscr",0x1D4C7);  entity("Rscr",0x211B);  entity("rsh",0x21B1);  entity("rsqb",0x005D);  entity("rsquo",0x2019);  entity("rsquor",0x2019);  entity("rthree",0x22CC);  entity("rtimes",0x22CA);  entity("rtri",0x25B9);  entity("rtrie",0x22B5);  entity("rtrif",0x25B8);  entity("rtriltri",0x29CE);  entity("RuleDelayed",0x29F4);  entity("ruluhar",0x2968);  entity("rx",0x211E);  entity("sacute",0x015B);  entity("Sacute",0x015A);  entity("sbquo",0x201A);  entity("sc",0x227B);  entity("Sc",0x2ABC);  entity("scap",0x2AB8);  entity("scaron",0x0161);  entity("Scaron",0x0160);  entity("sccue",0x227D);  entity("sce",0x2AB0);  entity("scE",0x2AB4);  entity("scedil",0x015F);  entity("Scedil",0x015E);  entity("scirc",0x015D);  entity("Scirc",0x015C);  entity("scnap",0x2ABA);  entity("scnE",0x2AB6);  entity("scnsim",0x22E9);  entity("scpolint",0x2A13);  entity("scsim",0x227F);  entity("scy",0x0441);  entity("Scy",0x0421);  entity("sdot",0x22C5);  entity("sdotb",0x22A1);  entity("sdote",0x2A66);  entity("searhk",0x2925);  entity("searr",0x2198);  entity("seArr",0x21D8);  entity("searrow",0x2198);  entity("sect",0x00A7);  entity("semi",0x003B);  entity("seswar",0x2929);  entity("setminus",0x2216);  entity("setmn",0x2216);  entity("sext",0x2736);  entity("sfgr",0x03C2);  entity("sfr",0x1D530);  entity("Sfr",0x1D516);  entity("sfrown",0x2322);  entity("sgr",0x03C3);  entity("Sgr",0x03A3);  entity("sharp",0x266F);  entity("shchcy",0x0449);  entity("SHCHcy",0x0429);  entity("shcy",0x0448);  entity("SHcy",0x0428);  entity("ShortDownArrow",0x2193);  entity("ShortLeftArrow",0x2190);  entity("shortmid",0x2223);  entity("shortparallel",0x2225);  entity("ShortRightArrow",0x2192);  entity("ShortUpArrow",0x2191);  entity("shy",0x00AD);  entity("sigma",0x03C3);  entity("Sigma",0x03A3);  entity("sigmaf",0x03C2);  entity("sigmav",0x03C2);  entity("sim",0x223C);  entity("simdot",0x2A6A);  entity("sime",0x2243);  entity("simeq",0x2243);  entity("simg",0x2A9E);  entity("simgE",0x2AA0);  entity("siml",0x2A9D);  entity("simlE",0x2A9F);  entity("simne",0x2246);  entity("simplus",0x2A24);  entity("simrarr",0x2972);  entity("slarr",0x2190);  entity("SmallCircle",0x2218);  entity("smallsetminus",0x2216);  entity("smashp",0x2A33);  entity("smeparsl",0x29E4);  entity("smid",0x2223);  entity("smile",0x2323);  entity("smt",0x2AAA);  entity("smte",0x2AAC);  entity("softcy",0x044C);  entity("SOFTcy",0x042C);  entity("sol",0x002F);  entity("solb",0x29C4);  entity("solbar",0x233F);  entity("sopf",0x1D564);  entity("Sopf",0x1D54A);  entity("spades",0x2660);  entity("spadesuit",0x2660);  entity("spar",0x2225);  entity("sqcap",0x2293);  entity("sqcup",0x2294);  entity("Sqrt",0x221A);  entity("sqsub",0x228F);  entity("sqsube",0x2291);  entity("sqsubset",0x228F);  entity("sqsubseteq",0x2291);  entity("sqsup",0x2290);  entity("sqsupe",0x2292);  entity("sqsupset",0x2290);  entity("sqsupseteq",0x2292);  entity("squ",0x25A1);  entity("square",0x25A1);  entity("SquareIntersection",0x2293);  entity("SquareSubset",0x228F);  entity("SquareSubsetEqual",0x2291);  entity("SquareSuperset",0x2290);  entity("SquareSupersetEqual",0x2292);  entity("SquareUnion",0x2294);  entity("squarf",0x25AA);  entity("squf",0x25AA);  entity("srarr",0x2192);  entity("sscr",0x1D4C8);  entity("Sscr",0x1D4AE);  entity("ssetmn",0x2216);  entity("ssmile",0x2323);  entity("sstarf",0x22C6);  entity("star",0x2606);  entity("Star",0x22C6);  entity("starf",0x2605);  entity("straightepsilon",0x03F5);  entity("straightphi",0x03D5);  entity("strns",0x00AF);  entity("sub",0x2282);  entity("Sub",0x22D0);  entity("subdot",0x2ABD);  entity("sube",0x2286);  entity("subE",0x2AC5);  entity("subedot",0x2AC3);  entity("submult",0x2AC1);  entity("subne",0x228A);  entity("subnE",0x2ACB);  entity("subplus",0x2ABF);  entity("subrarr",0x2979);  entity("subset",0x2282);  entity("Subset",0x22D0);  entity("subseteq",0x2286);  entity("subseteqq",0x2AC5);  entity("SubsetEqual",0x2286);  entity("subsetneq",0x228A);  entity("subsetneqq",0x2ACB);  entity("subsim",0x2AC7);  entity("subsub",0x2AD5);  entity("subsup",0x2AD3);  entity("succ",0x227B);  entity("succapprox",0x2AB8);  entity("succcurlyeq",0x227D);  entity("Succeeds",0x227B);  entity("SucceedsEqual",0x2AB0);  entity("SucceedsSlantEqual",0x227D);  entity("SucceedsTilde",0x227F);  entity("succeq",0x2AB0);  entity("succnapprox",0x2ABA);  entity("succneqq",0x2AB6);  entity("succnsim",0x22E9);  entity("succsim",0x227F);  entity("SuchThat",0x220B);  entity("sum",0x2211);  entity("sung",0x266A);  entity("sup",0x2283);  entity("Sup",0x22D1);  entity("sup1",0x00B9);  entity("sup2",0x00B2);  entity("sup3",0x00B3);  entity("supdot",0x2ABE);  entity("supdsub",0x2AD8);  entity("supe",0x2287);  entity("supE",0x2AC6);  entity("supedot",0x2AC4);  entity("Superset",0x2283);  entity("SupersetEqual",0x2287);  entity("suphsub",0x2AD7);  entity("suplarr",0x297B);  entity("supmult",0x2AC2);  entity("supne",0x228B);  entity("supnE",0x2ACC);  entity("supplus",0x2AC0);  entity("supset",0x2283);  entity("Supset",0x22D1);  entity("supseteq",0x2287);  entity("supseteqq",0x2AC6);  entity("supsetneq",0x228B);  entity("supsetneqq",0x2ACC);  entity("supsim",0x2AC8);  entity("supsub",0x2AD4);  entity("supsup",0x2AD6);  entity("swarhk",0x2926);  entity("swarr",0x2199);  entity("swArr",0x21D9);  entity("swarrow",0x2199);  entity("swnwar",0x292A);  entity("szlig",0x00DF);  entity("Tab",0x0009);  entity("target",0x2316);  entity("tau",0x03C4);  entity("Tau",0x03A4);  entity("tbrk",0x23B4);  entity("tcaron",0x0165);  entity("Tcaron",0x0164);  entity("tcedil",0x0163);  entity("Tcedil",0x0162);  entity("tcy",0x0442);  entity("Tcy",0x0422);  entity("telrec",0x2315);  entity("tfr",0x1D531);  entity("Tfr",0x1D517);  entity("tgr",0x03C4);  entity("Tgr",0x03A4);  entity("there4",0x2234);  entity("therefore",0x2234);  entity("theta",0x03B8);  entity("Theta",0x0398);  entity("thetasym",0x03D1);  entity("thetav",0x03D1);  entity("thgr",0x03B8);  entity("THgr",0x0398);  entity("thickapprox",0x2248);  entity("thicksim",0x223C);  entity("thinsp",0x2009);  entity("ThinSpace",0x2009);  entity("thkap",0x2248);  entity("thksim",0x223C);  entity("thorn",0x00FE);  entity("THORN",0x00DE);  entity("tilde",0x02DC);  entity("Tilde",0x223C);  entity("TildeEqual",0x2243);  entity("TildeFullEqual",0x2245);  entity("TildeTilde",0x2248);  entity("times",0x00D7);  entity("timesb",0x22A0);  entity("timesbar",0x2A31);  entity("timesd",0x2A30);  entity("tint",0x222D);  entity("toea",0x2928);  entity("top",0x22A4);  entity("topbot",0x2336);  entity("topcir",0x2AF1);  entity("topf",0x1D565);  entity("Topf",0x1D54B);  entity("topfork",0x2ADA);  entity("tosa",0x2929);  entity("tprime",0x2034);  entity("trade",0x2122);  entity("triangle",0x25B5);  entity("triangledown",0x25BF);  entity("triangleleft",0x25C3);  entity("trianglelefteq",0x22B4);  entity("triangleq",0x225C);  entity("triangleright",0x25B9);  entity("trianglerighteq",0x22B5);  entity("tridot",0x25EC);  entity("trie",0x225C);  entity("triminus",0x2A3A);  entity("triplus",0x2A39);  entity("trisb",0x29CD);  entity("tritime",0x2A3B);  entity("trpezium",0x23E2);  entity("tscr",0x1D4C9);  entity("Tscr",0x1D4AF);  entity("tscy",0x0446);  entity("TScy",0x0426);  entity("tshcy",0x045B);  entity("TSHcy",0x040B);  entity("tstrok",0x0167);  entity("Tstrok",0x0166);  entity("twixt",0x226C);  entity("twoheadleftarrow",0x219E);  entity("twoheadrightarrow",0x21A0);  entity("uacgr",0x03CD);  entity("Uacgr",0x038E);  entity("uacute",0x00FA);  entity("Uacute",0x00DA);  entity("uarr",0x2191);  entity("uArr",0x21D1);  entity("Uarr",0x219F);  entity("Uarrocir",0x2949);  entity("ubrcy",0x045E);  entity("Ubrcy",0x040E);  entity("ubreve",0x016D);  entity("Ubreve",0x016C);  entity("ucirc",0x00FB);  entity("Ucirc",0x00DB);  entity("ucy",0x0443);  entity("Ucy",0x0423);  entity("udarr",0x21C5);  entity("udblac",0x0171);  entity("Udblac",0x0170);  entity("udhar",0x296E);  entity("udiagr",0x03B0);  entity("udigr",0x03CB);  entity("Udigr",0x03AB);  entity("ufisht",0x297E);  entity("ufr",0x1D532);  entity("Ufr",0x1D518);  entity("ugr",0x03C5);  entity("Ugr",0x03A5);  entity("ugrave",0x00F9);  entity("Ugrave",0x00D9);  entity("uHar",0x2963);  entity("uharl",0x21BF);  entity("uharr",0x21BE);  entity("uhblk",0x2580);  entity("ulcorn",0x231C);  entity("ulcorner",0x231C);  entity("ulcrop",0x230F);  entity("ultri",0x25F8);  entity("umacr",0x016B);  entity("Umacr",0x016A);  entity("uml",0x00A8);  entity("UnderBrace",0xFE38);  entity("UnderBracket",0x23B5);  entity("UnderParenthesis",0xFE36);  entity("Union",0x22C3);  entity("UnionPlus",0x228E);  entity("uogon",0x0173);  entity("Uogon",0x0172);  entity("uopf",0x1D566);  entity("Uopf",0x1D54C);  entity("uparrow",0x2191);  entity("Uparrow",0x21D1);  entity("UpArrowBar",0x2912);  entity("UpArrowDownArrow",0x21C5);  entity("updownarrow",0x2195);  entity("Updownarrow",0x21D5);  entity("UpEquilibrium",0x296E);  entity("upharpoonleft",0x21BF);  entity("upharpoonright",0x21BE);  entity("uplus",0x228E);  entity("UpperLeftArrow",0x2196);  entity("UpperRightArrow",0x2197);  entity("upsi",0x03C5);  entity("Upsi",0x03D2);  entity("upsih",0x03D2);  entity("upsilon",0x03C5);  entity("Upsilon",0x03A5);  entity("UpTee",0x22A5);  entity("UpTeeArrow",0x21A5);  entity("upuparrows",0x21C8);  entity("urcorn",0x231D);  entity("urcorner",0x231D);  entity("urcrop",0x230E);  entity("uring",0x016F);  entity("Uring",0x016E);  entity("urtri",0x25F9);  entity("uscr",0x1D4CA);  entity("Uscr",0x1D4B0);  entity("utdot",0x22F0);  entity("utilde",0x0169);  entity("Utilde",0x0168);  entity("utri",0x25B5);  entity("utrif",0x25B4);  entity("uuarr",0x21C8);  entity("uuml",0x00FC);  entity("Uuml",0x00DC);  entity("uwangle",0x29A7);  entity("vangrt",0x299C);  entity("varepsilon",0x03B5);  entity("varkappa",0x03F0);  entity("varnothing",0x2205);  entity("varphi",0x03C6);  entity("varpi",0x03D6);  entity("varpropto",0x221D);  entity("varr",0x2195);  entity("vArr",0x21D5);  entity("varrho",0x03F1);  entity("varsigma",0x03C2);  entity("vartheta",0x03D1);  entity("vartriangleleft",0x22B2);  entity("vartriangleright",0x22B3);  entity("vBar",0x2AE8);  entity("Vbar",0x2AEB);  entity("vBarv",0x2AE9);  entity("vcy",0x0432);  entity("Vcy",0x0412);  entity("vdash",0x22A2);  entity("vDash",0x22A8);  entity("Vdash",0x22A9);  entity("VDash",0x22AB);  entity("Vdashl",0x2AE6);  entity("vee",0x2228);  entity("Vee",0x22C1);  entity("veebar",0x22BB);  entity("veeeq",0x225A);  entity("vellip",0x22EE);  entity("verbar",0x007C);  entity("Verbar",0x2016);  entity("vert",0x007C);  entity("Vert",0x2016);  entity("VerticalBar",0x2223);  entity("VerticalLine",0x007C);  entity("VerticalSeparator",0x2758);  entity("VerticalTilde",0x2240);  entity("VeryThinSpace",0x200A);  entity("vfr",0x1D533);  entity("Vfr",0x1D519);  entity("vltri",0x22B2);  entity("vopf",0x1D567);  entity("Vopf",0x1D54D);  entity("vprop",0x221D);  entity("vrtri",0x22B3);  entity("vscr",0x1D4CB);  entity("Vscr",0x1D4B1);  entity("Vvdash",0x22AA);  entity("vzigzag",0x299A);  entity("wcirc",0x0175);  entity("Wcirc",0x0174);  entity("wedbar",0x2A5F);  entity("wedge",0x2227);  entity("Wedge",0x22C0);  entity("wedgeq",0x2259);  entity("weierp",0x2118);  entity("wfr",0x1D534);  entity("Wfr",0x1D51A);  entity("wopf",0x1D568);  entity("Wopf",0x1D54E);  entity("wp",0x2118);  entity("wr",0x2240);  entity("wreath",0x2240);  entity("wscr",0x1D4CC);  entity("Wscr",0x1D4B2);  entity("xcap",0x22C2);  entity("xcirc",0x25EF);  entity("xcup",0x22C3);  entity("xdtri",0x25BD);  entity("xfr",0x1D535);  entity("Xfr",0x1D51B);  entity("xgr",0x03BE);  entity("Xgr",0x039E);  entity("xharr",0x27F7);  entity("xhArr",0x27FA);  entity("xi",0x03BE);  entity("Xi",0x039E);  entity("xlarr",0x27F5);  entity("xlArr",0x27F8);  entity("xmap",0x27FC);  entity("xnis",0x22FB);  entity("xodot",0x2A00);  entity("xopf",0x1D569);  entity("Xopf",0x1D54F);  entity("xoplus",0x2A01);  entity("xotime",0x2A02);  entity("xrarr",0x27F6);  entity("xrArr",0x27F9);  entity("xscr",0x1D4CD);  entity("Xscr",0x1D4B3);  entity("xsqcup",0x2A06);  entity("xuplus",0x2A04);  entity("xutri",0x25B3);  entity("xvee",0x22C1);  entity("xwedge",0x22C0);  entity("yacute",0x00FD);  entity("Yacute",0x00DD);  entity("yacy",0x044F);  entity("YAcy",0x042F);  entity("ycirc",0x0177);  entity("Ycirc",0x0176);  entity("ycy",0x044B);  entity("Ycy",0x042B);  entity("yen",0x00A5);  entity("yfr",0x1D536);  entity("Yfr",0x1D51C);  entity("yicy",0x0457);  entity("YIcy",0x0407);  entity("yopf",0x1D56A);  entity("Yopf",0x1D550);  entity("yscr",0x1D4CE);  entity("Yscr",0x1D4B4);  entity("yucy",0x044E);  entity("YUcy",0x042E);  entity("yuml",0x00FF);  entity("Yuml",0x0178);  entity("zacute",0x017A);  entity("Zacute",0x0179);  entity("zcaron",0x017E);  entity("Zcaron",0x017D);  entity("zcy",0x0437);  entity("Zcy",0x0417);  entity("zdot",0x017C);  entity("Zdot",0x017B);  entity("zeetrf",0x2128);  entity("ZeroWidthSpace",0x200B);  entity("zeta",0x03B6);  entity("Zeta",0x0396);  entity("zfr",0x1D537);  entity("Zfr",0x2128);  entity("zgr",0x03B6);  entity("Zgr",0x0396);  entity("zhcy",0x0436);  entity("ZHcy",0x0416);  entity("zigrarr",0x21DD);  entity("zopf",0x1D56B);  entity("Zopf",0x2124);  entity("zscr",0x1D4CF);  entity("Zscr",0x1D4B5);  entity("zwj",0x200D);  entity("zwnj",0x200C);}  }
class C{  public synchronized void addPackage(IdentifierToken t){  final Identifier name=t.getName();  if (name == currentPackage) {    return;  }  final int size=packages.size();  for (int i=0; i < size; i++) {    if (name == ((IdentifierToken)packages.elementAt(i)).getName()) {      return;    }  }  packages.addElement(t);}  }
class C{  private void beforeCreateToStringMethod(Map<String,String> params,TemplateResource template){  PsiMethod existingMethod=PsiAdapter.findMethodByName(clazz,template.getTargetMethodName());  if (existingMethod != null && existingMethod.getDocComment() != null) {    PsiDocComment doc=existingMethod.getDocComment();    if (doc != null) {      params.put("existingJavaDoc",doc.getText());    }  }}  }
class C{  private void startServer(int portno,boolean redirection) throws Exception {  port=portno;  setUp(redirection);  SelectChannelConnector connector=new SelectChannelConnector();  connector.setHost("127.0.0.1");  connector.setPort(port);  server.addConnector(connector);  server.start();}  }
class C{  public void removeAllConfigOfKInd(String lockName,String configKInd) throws Exception {  InterProcessLock lock=acquireLock(lockName);  try {    List<Configuration> configs=coordinator.queryAllConfiguration(configKInd);    if (!CollectionUtils.isEmpty(configs)) {      for (      Configuration configuration : configs) {        coordinator.removeServiceConfiguration(configuration);      }    } else {      log.debug("configs of kind " + configKInd + " were not removed since none were found");    }  }  finally {    releaseLock(lock);  }}  }
class C{  public void testGetWriteRemaining(){  int len=100;  ByteFifoBuffer instance=new ByteFifoBuffer(len);  int expResult=len;  int result=instance.getWriteRemaining();  assertEquals(expResult,result);  int w_size=23;  byte[] w_data=getWData(w_size);  instance.write(w_data,w_size);  expResult=len - w_size;  result=instance.getWriteRemaining();  assertEquals(expResult,result);}  }
class C{  public void testIteratorRemove(){  final LinkedBlockingDeque q=new LinkedBlockingDeque(3);  q.add(two);  q.add(one);  q.add(three);  Iterator it=q.iterator();  it.next();  it.remove();  it=q.iterator();  assertSame(it.next(),one);  assertSame(it.next(),three);  assertFalse(it.hasNext());}  }
class C{  public synchronized boolean stop(){  boolean success=true;  if (!isRunning)   return false;  try {    success=((Boolean)(encoderClass.getMethod("stop",new Class[0]).invoke(encoder,new Object[0]))).booleanValue();  } catch (  Exception ex) {    ex.printStackTrace();    return false;  }  isRunning=false;  return success;}  }
class C{  @Override public List<ValidationError> validate(){  final List<ValidationError> validationErrors=new ArrayList<ValidationError>();  if (percentage < 0.0 || percentage > 100)   validationErrors.add(new ValidationError("percentage","estimate.overhead.percentage.lessthan.100"));  if (percentage == 0.0 && (lumpsumAmount == null || lumpsumAmount.getValue() == 0.0))   validationErrors.add(new ValidationError("percentage","estimate.overhead.percentage_or_lumpsum_needed"));  if (percentage > 0.0 && lumpsumAmount != null && lumpsumAmount.getValue() > 0.0)   validationErrors.add(new ValidationError("percentage","estimate.overhead.only_one_of_percentage_or_lumpsum_needed"));  if (validity == null || validity != null && !compareDates(validity.getStartDate(),validity.getEndDate()))   validationErrors.add(new ValidationError("validity","estimate.overhead.invalid_date_range"));  if (!validationErrors.isEmpty())   return validationErrors;  return null;}  }
class C{  private boolean processAuthenticationResponse(final HttpMethod method){  LOG.trace("enter HttpMethodBase.processAuthenticationResponse(" + "HttpState, HttpConnection)");  try {switch (method.getStatusCode()) {case HttpStatus.SC_UNAUTHORIZED:      return processWWWAuthChallenge(method);case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:    return processProxyAuthChallenge(method);default :  return false;}} catch (Exception e) {if (LOG.isErrorEnabled()) {LOG.error(e.getMessage(),e);}return false;}}  }
class C{  private void postInitViewPager(){  try {    Field scroller=ViewPager.class.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=ViewPager.class.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    viewPagerScroller=new ViewPagerScroller(getContext(),new Expo.EaseOut());    scroller.set(this,viewPagerScroller);  } catch (  Exception ignored) {  }}  }
class C{  protected void registerHandler(String urlPath,Object handler) throws BeansException, IllegalStateException {  Assert.notNull(urlPath,"URL path must not be null");  Assert.notNull(handler,"Handler object must not be null");  Object resolvedHandler=handler;  if (!this.lazyInitHandlers && handler instanceof String) {    String handlerName=(String)handler;    if (getApplicationContext().isSingleton(handlerName)) {      resolvedHandler=getApplicationContext().getBean(handlerName);    }  }  Object mappedHandler=this.handlerMap.get(urlPath);  if (mappedHandler != null) {    if (mappedHandler != resolvedHandler) {      throw new IllegalStateException("Cannot map " + getHandlerDescription(handler) + " to URL path ["+ urlPath+ "]: There is already "+ getHandlerDescription(mappedHandler)+ " mapped.");    }  } else {    this.handlerMap.put(urlPath,resolvedHandler);    if (logger.isInfoEnabled()) {      logger.info("Mapped URL path [" + urlPath + "] onto "+ getHandlerDescription(handler));    }  }}  }
class C{  public void pvt(String user){  checkSocket();  this.socket.sendTextMessage("pvt: " + user);}  }
class C{  public static boolean metricsEnabled(){  return System.getenv(STATSD_HOST_ENV) != null && System.getenv(STATSD_PORT_ENV) != null;}  }
class C{  public static StringBuilder readFile(String filePath,String charsetName){  File file=new File(filePath);  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public final double pctCorrect(){  return 100 * m_Correct / m_WithClass;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:58.727 -0500",hash_original_method="1E01F580CB089394F15961B5A9E514F5",hash_generated_method="C52CE02B17695298AAA11044E27D9872") public AlternativeName(boolean which,byte[] encoding) throws IOException {  super(encoding);  this.which=which;  this.alternativeNames=(GeneralNames)GeneralNames.ASN1.decode(encoding);}  }
class C{  public boolean hasConstant(){  return getConstant() != Constant.NotAConstant;}  }
class C{  public static boolean isJavaClass(String classNameWithDots){  return classNameWithDots.startsWith("java.") || classNameWithDots.startsWith("javax.") || classNameWithDots.startsWith("sun.")|| classNameWithDots.startsWith("apple.")|| classNameWithDots.startsWith("com.apple.");}  }
class C{  public void addMetadataEntry(String value){  metadata.add(value.replaceAll(";",":"));}  }
class C{  @Override public final void addBezierCurveV(final float x2,final float y2,final float x3,final float y3){  shape_primitives.addElement(V);  shape_primitive_x.addElement(200);  shape_primitive_y.addElement(200);  shape_primitive_x2.addElement(x2);  shape_primitive_y2.addElement(y2);  shape_primitive_x3.addElement(x3);  shape_primitive_y3.addElement(y3);}  }
class C{  public FastFloatBuffer(){  this.minChunkLen=1024;}  }
class C{  Rule assignmentExpressionChaining(){  return Sequence(inlineIfExpressionChaining(),set(),Optional(Sequence(assignmentOperator().label("operator"),group.basics.optWS(),assignmentExpressionChaining().label("RHS"))).label("assignment"),set(actions.createAssignmentExpression(value(),text("assignment/Sequence/operator"),value("assignment"))));}  }
class C{  public OrganizationAuthorityException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  protected FileList files(String dir){  FileList list=new FileList();  addFiles(list,new File(dir));  return list;}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableLengthOrIdentValue res;  if (result == null) {    res=new AnimatableLengthOrIdentValue(target);  } else {    res=(AnimatableLengthOrIdentValue)result;  }  if (to == null) {    if (isIdent) {      res.hasChanged=!res.isIdent || !res.ident.equals(ident);      res.ident=ident;      res.isIdent=true;    } else {      short oldLengthType=res.lengthType;      float oldLengthValue=res.lengthValue;      short oldPercentageInterpretation=res.percentageInterpretation;      super.interpolate(res,to,interpolation,accumulation,multiplier);      if (res.lengthType != oldLengthType || res.lengthValue != oldLengthValue || res.percentageInterpretation != oldPercentageInterpretation) {        res.hasChanged=true;      }    }  } else {    AnimatableLengthOrIdentValue toValue=(AnimatableLengthOrIdentValue)to;    if (isIdent || toValue.isIdent) {      if (interpolation >= 0.5) {        if (res.isIdent != toValue.isIdent || res.lengthType != toValue.lengthType || res.lengthValue != toValue.lengthValue || res.isIdent && toValue.isIdent && !toValue.ident.equals(ident)) {          res.isIdent=toValue.isIdent;          res.ident=toValue.ident;          res.lengthType=toValue.lengthType;          res.lengthValue=toValue.lengthValue;          res.hasChanged=true;        }      } else {        if (res.isIdent != isIdent || res.lengthType != lengthType || res.lengthValue != lengthValue || res.isIdent && isIdent && !res.ident.equals(ident)) {          res.isIdent=isIdent;          res.ident=ident;          res.ident=ident;          res.lengthType=lengthType;          res.hasChanged=true;        }      }    } else {      super.interpolate(res,to,interpolation,accumulation,multiplier);    }  }  return res;}  }
class C{  public Node addRoot(){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public void addListener(final INaviGraphListener listener){  m_listeners.addListener(listener);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double threshold=0;  double centreValue=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      threshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPointX) && (y != midPointY)) {              z=inputFile.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            if (Math.abs((centreValue - average) / stdDev) > threshold) {              outputFile.setValue(row,col,average);            } else {              outputFile.setValue(row,col,centreValue);            }          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String toToken(){  return tokens[value];}  }
class C{  public static List toList(Object o,boolean duplicate) throws PageException {  if (o instanceof List) {    if (duplicate) {      List src=(List)o;      int size=src.size();      ArrayList trg=new ArrayList();      for (int i=0; i < size; i++) {        trg.add(i,src.get(i));      }      return trg;    }    return (List)o;  } else   if (o instanceof Object[]) {    ArrayList list=new ArrayList();    Object[] arr=(Object[])o;    for (int i=0; i < arr.length; i++)     list.add(i,arr[i]);    return list;  } else   if (o instanceof Array) {    if (!duplicate)     return ArrayAsList.toList((Array)o);    ArrayList list=new ArrayList();    Array arr=(Array)o;    for (int i=0; i < arr.size(); i++)     list.add(i,arr.get(i + 1,null));    return list;  } else   if (o instanceof Iterator) {    Iterator it=(Iterator)o;    ArrayList list=new ArrayList();    while (it.hasNext()) {      list.add(it.next());    }    return list;  } else   if (o instanceof XMLStruct) {    XMLStruct sct=((XMLStruct)o);    if (sct instanceof XMLMultiElementStruct)     return toList(new XMLMultiElementArray((XMLMultiElementStruct)o));    ArrayList list=new ArrayList();    list.add(sct);    return list;  } else   if (o instanceof ObjectWrap) {    return toList(((ObjectWrap)o).getEmbededObject());  } else   if (o instanceof Struct) {    Struct sct=(Struct)o;    ArrayList arr=new ArrayList();    Iterator<Entry<Key,Object>> it=sct.entryIterator();    Entry<Key,Object> e=null;    try {      while (it.hasNext()) {        e=it.next();        arr.add(toIntValue(e.getKey().getString()),e.getValue());      }    } catch (    ExpressionException ee) {      throw new ExpressionException("can't cast struct to a array, key [" + (e != null ? e.getKey() : "") + "] is not a number");    }    return arr;  } else   if (o instanceof boolean[])   return toList(ArrayUtil.toReferenceType((boolean[])o)); else   if (o instanceof byte[])   return toList(ArrayUtil.toReferenceType((byte[])o)); else   if (o instanceof char[])   return toList(ArrayUtil.toReferenceType((char[])o)); else   if (o instanceof short[])   return toList(ArrayUtil.toReferenceType((short[])o)); else   if (o instanceof int[])   return toList(ArrayUtil.toReferenceType((int[])o)); else   if (o instanceof long[])   return toList(ArrayUtil.toReferenceType((long[])o)); else   if (o instanceof float[])   return toList(ArrayUtil.toReferenceType((float[])o)); else   if (o instanceof double[])   return toList(ArrayUtil.toReferenceType((double[])o));  throw new CasterException(o,"List");}  }
class C{  public ContextFeatureExtractor(int contextSize,boolean specifyIndex,boolean ignoreConstituent){  super("");  this.contextSize=contextSize;  this.specifyIndex=specifyIndex;  this.ignoreConstituent=ignoreConstituent;}  }
class C{  public boolean isAnalysisVersionConsistent(Set<Protein> preCalculatedProteins,List<BerkeleyMatch> berkeleyMatches,Map<String,SignatureLibraryRelease> analysisJobMap){  Map<String,String> lookupAnalysesMap=new HashMap<String,String>();  for (  BerkeleyMatch berkeleyMatch : berkeleyMatches) {    String signatureLibraryReleaseVersion=berkeleyMatch.getSignatureLibraryRelease();    final SignatureLibrary sigLib=SignatureLibraryLookup.lookupSignatureLibrary(berkeleyMatch.getSignatureLibraryName());    lookupAnalysesMap.put(sigLib.getName().toUpperCase(),signatureLibraryReleaseVersion);  }  for (  String analysisJobName : analysisJobMap.keySet()) {    if (lookupAnalysesMap.containsKey(analysisJobName.toUpperCase())) {      String lookUpMatchAnalaysVersion=lookupAnalysesMap.get(analysisJobName.toUpperCase());      LOGGER.debug("analysis: " + analysisJobName + " lookUpMatchAnalaysiVersion: "+ lookUpMatchAnalaysVersion+ " analysisJobName: "+ analysisJobName+ " analysisJobVersion: "+ analysisJobMap.get(analysisJobName).getVersion());      if (!lookUpMatchAnalaysVersion.equals(analysisJobMap.get(analysisJobName).getVersion())) {        LOGGER.debug("Different versions of  " + analysisJobName + " running ");        return false;      }    }  }  return true;}  }
class C{  @Override public final void process(final DM dm,final ReplyProcessor21 p){  RemoveIndexesResponse processor=(RemoveIndexesResponse)p;  if (processor != null) {    processor.setResponse(this.result,this.numBucketsIndexesRemoved,this.numTotalBuckets);    processor.process(this);  }}  }
class C{  @Override public void cancelRowUpdates() throws SQLException {  try {    debugCodeCall("cancelRowUpdates");    checkClosed();    if (insertRow != null) {      throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);    }    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public TextAreaNotInScrollPaneState(){  super("NotInScrollPane");}  }
class C{  private void writePacketOutForPacketIn(IOFSwitch sw,OFPacketIn packetInMessage,OFPort egressPort){  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  pob.setBufferId(packetInMessage.getBufferId());  pob.setInPort(packetInMessage.getVersion().compareTo(OFVersion.OF_12) < 0 ? packetInMessage.getInPort() : packetInMessage.getMatch().get(MatchField.IN_PORT));  List<OFAction> actions=new ArrayList<OFAction>(1);  actions.add(sw.getOFFactory().actions().buildOutput().setPort(egressPort).setMaxLen(0xffFFffFF).build());  pob.setActions(actions);  if (packetInMessage.getBufferId() == OFBufferId.NO_BUFFER) {    byte[] packetData=packetInMessage.getData();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  private static int convertSpanToSparseGrid(int curIx,int span,TreeSet<Integer> indexes){  int lastIx=curIx + span;  int retSpan=1;  for (  Integer ix : indexes) {    if (ix <= curIx)     continue;    if (ix >= lastIx)     break;    retSpan++;  }  return retSpan;}  }
class C{  public void add(final int id){  toExport.add(id);}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  public void show(final ViewController viewController){  if (currentController != null) {    if (isControllerHiding) {      switchToView(viewController);    } else {      hideCurrentViewAndSchedule(viewController);    }  } else {    switchToView(viewController);  }}  }
class C{  private void releaseSubscription(Subscription subscription){  if (subscription != null && !subscription.isUnsubscribed()) {    subscription.unsubscribe();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s2=getString(stack);  String s1=getString(stack);  return (s1 == null || s2 == null) ? Boolean.FALSE : Boolean.valueOf(s1.endsWith(s2));}  }
class C{  public boolean canLock(int turnoutLockout){  if (tc.getUsbSystem() != NceTrafficController.USB_SYSTEM_NONE) {    return false;  }  if ((turnoutLockout & PUSHBUTTONLOCKOUT) != 0 && _enablePushButtonLockout && !getDecoderName().equals(PushbuttonPacket.unknown)) {    return true;  }  if ((turnoutLockout & CABLOCKOUT) != 0 && getFeedbackMode() == MONITORING && _enableCabLockout) {    return true;  } else {    return false;  }}  }
class C{  public UnweightedGraph(List<V> vertices,List<Edge> edges){  super(vertices,edges);}  }
class C{  public void clearValueLocal(String columnHeader){  values.remove(columnHeader.toLowerCase());}  }
class C{  private String tailFile(File f){  try {    return TailLogResponse.tailSystemLog(f);  } catch (  IOException ex) {    return LocalizedStrings.AgentImpl_COULD_NOT_TAIL_0_BECAUSE_1.toLocalizedString(new Object[]{f,ex});  }}  }
class C{  public static String base64Decode(final String s){  byte[] b=Base64.base64DecodeToArray(s);  if (b == null) {    return null;  }  if (b.length == 0) {    return "";  }  try {    return new String(b,"UTF-8");  } catch (  java.io.UnsupportedEncodingException e) {    e.printStackTrace();    return null;  }}  }
class C{  public MethodDeclarator_ createMethodDeclarator_(){  MethodDeclarator_Impl methodDeclarator_=new MethodDeclarator_Impl();  return methodDeclarator_;}  }
class C{  public VectorClock incremented(int nodeId,long time){  if (nodeId < 0 || nodeId > Short.MAX_VALUE)   throw new IllegalArgumentException(nodeId + " is outside the acceptable range of node ids.");  List<ClockEntry> newversions=Lists.newArrayList(versions);  boolean found=false;  int index=0;  for (; index < newversions.size(); index++) {    if (newversions.get(index).getNodeId() == nodeId) {      found=true;      break;    } else     if (newversions.get(index).getNodeId() > nodeId) {      found=false;      break;    }  }  if (found) {    newversions.set(index,newversions.get(index).incremented());  } else   if (index < newversions.size() - 1) {    newversions.add(index,new ClockEntry((short)nodeId,1));  } else {    if (newversions.size() > MAX_NUMBER_OF_VERSIONS)     throw new IllegalStateException("Vector clock is full!");    newversions.add(index,new ClockEntry((short)nodeId,1));  }  return new VectorClock(newversions,time);}  }
class C{  @Override public String toString(){  return "cudaChannelFormatDesc[" + "x=" + x + ","+ "y="+ y+ ","+ "z="+ z+ ","+ "w="+ w+ ","+ "f="+ cudaChannelFormatKind.stringFor(f)+ "]";}  }
class C{  private static void install(final File directory) throws FileNotFoundException, IOException {  final File pluginsDirectory=new File(directory.getAbsolutePath() + "/plugins");  for (  final String pluginFile : CBinExportFiles.getPluginFiles()) {    if (!FileUtils.containsFile(pluginsDirectory,pluginFile)) {      copyFile(directory,pluginFile);    }  }}  }
class C{  public ListFeedHelper(SpreadsheetService inService,URL inFeedUrl){  service=inService;  feedUrl=inFeedUrl;}  }
class C{  public void parentRemoved(SessionEvent event){}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(UpdateManagerSettings.SHOW_PROMOTION_OVERLAYS.getValue());}  }
class C{  public void deleteFileSet(String[] args) throws Exception {  if (args.length > 1) {    String fileSet=args[1];    if (confirmFileSetDeletion(fileSet,System.in)) {      deleteFileSet(zkManager,fileSet);      System.out.println("file set is successfully marked to be deleted. It will be " + "physically deleted after short period of time.");    }  } else {    System.err.println("missing file set argument");  }}  }
class C{  public void add(final Territory t){  if (t == null) {    throw new IllegalStateException("Null territory");  }  if (t.equals(m_start) || m_steps.contains(t)) {    throw new IllegalArgumentException("Loops not allowed in m_routes, route:" + this + " new territory:"+ t);  }  m_steps.add(t);}  }
class C{  public static double logQuick(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.log(value) : Math.log(value);  }  double h;  if (value > 0.87) {    if (value < 1.16) {      return 2.0 * (value - 1.0) / (value + 1.0);    }    h=0.0;  } else   if (value < MIN_DOUBLE_NORMAL) {    value*=TWO_POW_52;    h=-52 * LOG_2;  } else {    h=0.0;  }  int valueBitsHi=(int)(Double.doubleToRawLongBits(value) >> 32);  int valueExp=(valueBitsHi >> 20) - MAX_DOUBLE_EXPONENT;  int xIndex=((valueBitsHi << 12) >>> (32 - LOG_BITS));  return h + valueExp * LOG_2 + logXLogTab[xIndex];}  }
class C{  private boolean isKDE(){  String gdmSession=getSystemEnv("GDMSESSION");  if (gdmSession != null && gdmSession.toLowerCase().contains("kde")) {    return true;  }  String desktopSession=getSystemEnv("DESKTOP_SESSION");  if (desktopSession != null && desktopSession.toLowerCase().contains("kde")) {    return true;  }  String windowManager=getSystemEnv("WINDOW_MANAGER");  if (windowManager != null && windowManager.trim().toLowerCase().endsWith("kde")) {    return true;  }  return false;}  }
class C{  public void sentPacketBySUT(DatagramPacket packet){  InetAddress addr=packet.getAddress();  int port=packet.getPort();  EndPointInfo info=new EndPointInfo(addr.getHostAddress(),port,ConnectionType.UDP);  remoteContactedPorts.add(info);synchronized (sentUdpPackets) {    AtomicInteger counter=sentUdpPackets.get(info);    if (counter == null) {      counter=new AtomicInteger(0);      sentUdpPackets.put(info,counter);    }    counter.incrementAndGet();  }}  }
class C{  public boolean isCumulative(){  return cumulative;}  }
class C{  @Inline public static boolean fits(long val,int bits){  val=val >> bits - 1;  return (val == 0L || val == -1L);}  }
class C{  private boolean trackSegmentLeadsTo(TrackSegment tsg,Object ob){  if ((tsg == null) || (ob == null)) {    log.error("Null argument on entry to trackSegmentLeadsTo");    return false;  }  TrackSegment curTS=tsg;  Object curObj=ob;  ArrayList<TrackSegment> posTS=new ArrayList<TrackSegment>();  ArrayList<Object> posOB=new ArrayList<Object>();  int conType=0;  Object conObj=null;  while (curTS != null) {    if (curTS.getLayoutBlock() == nlb) {      return true;    }    if (curTS.getLayoutBlock() == lb) {      if (curTS.getConnect1() == curObj) {        conType=curTS.getType2();        conObj=curTS.getConnect2();      } else       if (curTS.getConnect2() == curObj) {        conType=curTS.getType1();        conObj=curTS.getConnect1();      } else {        log.error("Connectivity error when following track in Block " + lb.getUserName());        return false;      }      if (conType == LayoutEditor.POS_POINT) {        if (((PositionablePoint)conObj).getType() == PositionablePoint.END_BUMPER) {          curTS=null;        } else         if (((PositionablePoint)conObj).getType() == PositionablePoint.ANCHOR || ((PositionablePoint)conObj).getType() == PositionablePoint.EDGE_CONNECTOR) {          if (((PositionablePoint)conObj).getConnect1() == curTS) {            curTS=(((PositionablePoint)conObj).getConnect2());          } else {            curTS=(((PositionablePoint)conObj).getConnect1());          }          curObj=conObj;        }      } else       if ((conType >= LayoutEditor.LEVEL_XING_A) && (conType <= LayoutEditor.LEVEL_XING_D)) {        if ((conType == LayoutEditor.LEVEL_XING_A) || (conType == LayoutEditor.LEVEL_XING_C)) {          if (((LevelXing)conObj).getLayoutBlockAC() != lb) {            if (((LevelXing)conObj).getLayoutBlockAC() == nlb) {              return true;            } else {              curTS=null;            }          } else           if (conType == LayoutEditor.LEVEL_XING_A) {            curTS=(TrackSegment)((LevelXing)conObj).getConnectC();          } else {            curTS=(TrackSegment)((LevelXing)conObj).getConnectA();          }        } else {          if (((LevelXing)conObj).getLayoutBlockBD() != lb) {            if (((LevelXing)conObj).getLayoutBlockBD() == nlb) {              return true;            } else {              curTS=null;            }          } else           if (conType == LayoutEditor.LEVEL_XING_B) {            curTS=(TrackSegment)((LevelXing)conObj).getConnectD();          } else {            curTS=(TrackSegment)((LevelXing)conObj).getConnectB();          }        }        curObj=conObj;      } else       if ((conType >= LayoutEditor.TURNOUT_A) && (conType <= LayoutEditor.TURNOUT_D)) {        LayoutTurnout lt=(LayoutTurnout)conObj;        int tType=lt.getTurnoutType();        if ((tType == LayoutTurnout.DOUBLE_XOVER) || (tType == LayoutTurnout.RH_XOVER) || (tType == LayoutTurnout.LH_XOVER)) {switch (conType) {case LayoutEditor.TURNOUT_A:            if ((lt.getLayoutBlock()) != lb) {              if (lt.getLayoutBlock() == nlb) {                return true;              } else {                curTS=null;              }            } else             if ((lt.getLayoutBlockB() == nlb) || ((tType != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlockC() == nlb))) {              return true;            } else             if (lt.getLayoutBlockB() == lb) {              curTS=(TrackSegment)lt.getConnectB();              if ((tType != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlockC() == lb)) {                posTS.add((TrackSegment)lt.getConnectC());                posOB.add(conObj);              }            } else             if ((tType != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlockC() == lb)) {              curTS=(TrackSegment)lt.getConnectC();            } else {              curTS=null;            }          curObj=conObj;        break;case LayoutEditor.TURNOUT_B:      if ((lt.getLayoutBlockB()) != lb) {        if (lt.getLayoutBlockB() == nlb) {          return true;        } else {          curTS=null;        }      } else       if ((lt.getLayoutBlock() == nlb) || ((tType != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockD() == nlb))) {        return true;      } else       if (lt.getLayoutBlock() == lb) {        curTS=(TrackSegment)lt.getConnectA();        if ((tType != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockD() == lb)) {          posTS.add((TrackSegment)lt.getConnectD());          posOB.add(conObj);        }      } else       if ((tType != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockD() == lb)) {        curTS=(TrackSegment)lt.getConnectD();      } else {        curTS=null;      }    curObj=conObj;  break;case LayoutEditor.TURNOUT_C:if ((lt.getLayoutBlockC()) != lb) {  if (lt.getLayoutBlockC() == nlb) {    return true;  } else {    curTS=null;  }} else if ((lt.getLayoutBlockD() == nlb) || ((tType != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlock() == nlb))) {  return true;} else if (lt.getLayoutBlockD() == lb) {  curTS=(TrackSegment)lt.getConnectD();  if ((tType != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlock() == lb)) {    posTS.add((TrackSegment)lt.getConnectA());    posOB.add(conObj);  }} else if ((tType != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlock() == lb)) {  curTS=(TrackSegment)lt.getConnectA();} else {  curTS=null;}curObj=conObj;break;case LayoutEditor.TURNOUT_D:if ((lt.getLayoutBlockD()) != lb) {if (lt.getLayoutBlockD() == nlb) {return true;} else {curTS=null;}} else if ((lt.getLayoutBlockC() == nlb) || ((tType != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockB() == nlb))) {return true;} else if (lt.getLayoutBlockC() == lb) {curTS=(TrackSegment)lt.getConnectC();if ((tType != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockB() == lb)) {posTS.add((TrackSegment)lt.getConnectB());posOB.add(conObj);}} else if ((tType != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockB() == lb)) {curTS=(TrackSegment)lt.getConnectB();} else {curTS=null;}curObj=conObj;break;default :break;}} else if ((tType == LayoutTurnout.RH_TURNOUT) || (tType == LayoutTurnout.LH_TURNOUT) || (tType == LayoutTurnout.WYE_TURNOUT)) {if (lt.getLayoutBlock() != lb) {if (lt.getLayoutBlock() == nlb) {return true;} else {curTS=null;}} else {if (conType == LayoutEditor.TURNOUT_A) {if ((((TrackSegment)lt.getConnectB()).getLayoutBlock() == nlb) || (((TrackSegment)lt.getConnectC()).getLayoutBlock() == nlb)) {return true;} else if (((TrackSegment)lt.getConnectB()).getLayoutBlock() == lb) {curTS=(TrackSegment)lt.getConnectB();if (((TrackSegment)lt.getConnectC()).getLayoutBlock() == lb) {posTS.add((TrackSegment)lt.getConnectC());posOB.add(conObj);}} else {curTS=(TrackSegment)lt.getConnectC();}} else {curTS=(TrackSegment)lt.getConnectA();}curObj=conObj;}}} else if (conType >= LayoutEditor.SLIP_A && conType <= LayoutEditor.SLIP_D) {LayoutSlip ls=(LayoutSlip)conObj;int tType=ls.getTurnoutType();if (ls.getLayoutBlock() != lb) {if (ls.getLayoutBlock() == nlb) {return true;} else {curTS=null;}} else {switch (conType) {case LayoutEditor.SLIP_A:if (((TrackSegment)ls.getConnectC()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectD()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectC()).getLayoutBlock() == lb) {curTS=(TrackSegment)ls.getConnectC();if (((TrackSegment)ls.getConnectD()).getLayoutBlock() == lb) {posTS.add((TrackSegment)ls.getConnectD());posOB.add(conObj);}} else {curTS=(TrackSegment)ls.getConnectD();}break;case LayoutEditor.SLIP_B:if (tType == LayoutSlip.SINGLE_SLIP) {curTS=(TrackSegment)ls.getConnectD();break;}if (((TrackSegment)ls.getConnectC()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectB()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectC()).getLayoutBlock() == lb) {curTS=(TrackSegment)ls.getConnectC();if (((TrackSegment)ls.getConnectD()).getLayoutBlock() == lb) {posTS.add((TrackSegment)ls.getConnectD());posOB.add(conObj);}} else {curTS=(TrackSegment)ls.getConnectD();}break;case LayoutEditor.SLIP_C:if (tType == LayoutSlip.SINGLE_SLIP) {curTS=(TrackSegment)ls.getConnectA();break;}if (((TrackSegment)ls.getConnectA()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectB()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectB()).getLayoutBlock() == lb) {curTS=(TrackSegment)ls.getConnectB();if (((TrackSegment)ls.getConnectA()).getLayoutBlock() == lb) {posTS.add((TrackSegment)ls.getConnectA());posOB.add(conObj);}} else {curTS=(TrackSegment)ls.getConnectA();}break;case LayoutEditor.SLIP_D:if (((TrackSegment)ls.getConnectA()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectB()).getLayoutBlock() == nlb) {return true;}if (((TrackSegment)ls.getConnectB()).getLayoutBlock() == lb) {curTS=(TrackSegment)ls.getConnectB();if (((TrackSegment)ls.getConnectA()).getLayoutBlock() == lb) {posTS.add((TrackSegment)ls.getConnectA());posOB.add(conObj);}} else {curTS=(TrackSegment)ls.getConnectA();}break;}}}} else {curTS=null;}if (curTS == null) {if (posTS.size() > 0) {curTS=posTS.get(0);curObj=posOB.get(0);posTS.remove(0);posOB.remove(0);}}}return false;}  }
class C{  public boolean isValid(){  return node != null;}  }
class C{  public String toJSPointer(){  return context.jsLookupTable + "[" + objectId+ "]";}  }
class C{  public static double gaussian(){  double r, x, y;  do {    x=uniform(-1.0,1.0);    y=uniform(-1.0,1.0);    r=x * x + y * y;  } while (r >= 1 || r == 0);  return x * Math.sqrt(-2 * Math.log(r) / r);}  }
class C{  public void beforeQueryEvaluation(CompiledValue expression,ExecutionContext context){}  }
class C{  public boolean isNormal(){  return this.normalManager;}  }
class C{  public static Enumeration all(){  return _all.elements();}  }
class C{  public StatementBuilder resetCount(){  index=0;  return this;}  }
class C{  protected void drawDomainGridlines(Graphics2D g2,Rectangle2D dataArea,List ticks){  if (!isDomainGridlinesVisible()) {    return;  }  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  Iterator iterator=ticks.iterator();  while (iterator.hasNext()) {    ValueTick tick=(ValueTick)iterator.next();    double v=this.domainAxis.valueToJava2D(tick.getValue(),dataArea,RectangleEdge.BOTTOM);    Line2D line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());    g2.setPaint(getDomainGridlinePaint());    g2.setStroke(getDomainGridlineStroke());    g2.draw(line);  }  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  public void reset(){  mChannelNumber=0;  mActiveCalls.clear();  mESNs.clear();  mNeighborIDs.clear();  mReceiveFrequencies.clear();  mSiteIDs.clear();  mTalkgroups.clear();  mTransmitFrequencies.clear();  mUniqueIDs.clear();  resetState();}  }
class C{  private void parseRules(Attributes attributes){  startMode=getModeAttribute(attributes,"startMode");  if (startMode == null) {    startMode=lookupCreateMode(IMPLICIT_MODE_NAME);    md.currentMode=startMode;    startMode.noteDefined(null);  }  startMode.noteUsed(locator);  if (attributesSchema) {    Mode wrapper=lookupCreateMode(WRAPPER_MODE_NAME);    ActionSet actions=new ActionSet();    actions.addNoResultAction(new AllowAction(new ModeUsage(startMode,startMode)));    wrapper.bindElement(NamespaceSpecification.ANY_NAMESPACE,NamespaceSpecification.DEFAULT_WILDCARD,actions);    wrapper.noteDefined(null);    startMode=wrapper;  }  defaultSchemaType=getSchemaType(attributes);}  }
class C{  public ElementKindStatsViewer(Composite parent,int style){  super(parent,style);  setLayout(new GridLayout());  Table elementKindTable=new Table(this,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);  elementKindTable.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));  elementKindTable.setHeaderVisible(true);  EditColTableDef.setupTable(TABLE_DEF,elementKindTable);  elementKindViewer=new TableViewer(elementKindTable);  elementKindViewer.setContentProvider(new ArrayContentProvider());  LabelProvider labelProvider=new LabelProvider();  elementKindViewer.setLabelProvider(labelProvider);  configSorters(elementKindTable);  setSortColumn(elementKindTable.getColumn(0),0,SWT.DOWN);}  }
class C{  protected void selectLoco(int dccAddress,boolean isLong,int mfgId,int modelId){  inStartProgrammer=false;  if (re != null) {    re.removePropertyChangeListener(rosterEntryUpdateListener);  }  List<RosterEntry> l=Roster.getDefault().matchingList(null,null,Integer.toString(dccAddress),null,null,null,null);  if (log.isDebugEnabled()) {    log.debug("selectLoco found " + l.size() + " matches");  }  if (l.size() > 0) {    if (l.size() > 1) {      List<RosterEntry> l2=new ArrayList<>();      for (      RosterEntry _re : l) {        if (_re.isLongAddress() == isLong) {          l2.add(_re);        }      }      if (l2.size() == 1) {        re=l2.get(0);      } else {        if (l2.isEmpty()) {          l2=l;        }        List<RosterEntry> l3=new ArrayList<>();        List<DecoderFile> temp=DecoderIndexFile.instance().matchingDecoderList(null,null,"" + mfgId,"" + modelId,null,null);        ArrayList<String> decoderFam=new ArrayList<>();        for (        DecoderFile f : temp) {          if (!decoderFam.contains(f.getModel())) {            decoderFam.add(f.getModel());          }        }        for (        RosterEntry _re : l2) {          if (decoderFam.contains(_re.getDecoderModel())) {            l3.add(_re);          }        }        if (l3.isEmpty()) {          re=l2.get(0);        } else {          re=l3.get(0);        }      }    } else {      re=l.get(0);    }    re.addPropertyChangeListener(rosterEntryUpdateListener);    rtable.setSelection(re);    updateDetails();    rtable.moveTableViewToSelected();  } else {    log.warn("Read address " + dccAddress + ", but no such loco in roster");    JOptionPane.showMessageDialog(this,"No roster entry found","Address " + dccAddress + " was read from the decoder\nbut has not been found in the Roster",JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  protected String doIt() throws java.lang.Exception {  log.info("");  Env.reset(false);  return "Cache Reset";}  }
class C{  @Deprecated public void importPackage(long off,IdentifierToken nm){  importPackage(off,nm.id);}  }
class C{  private static @Nullable View findTouchTargetViewWithPointerEvents(float eventCoords[],View view){  PointerEvents pointerEvents=view instanceof ReactPointerEventsView ? ((ReactPointerEventsView)view).getPointerEvents() : PointerEvents.AUTO;  if (pointerEvents == PointerEvents.NONE) {    return null;  } else   if (pointerEvents == PointerEvents.BOX_ONLY) {    return view;  } else   if (pointerEvents == PointerEvents.BOX_NONE) {    if (view instanceof ViewGroup) {      View targetView=findTouchTargetView(eventCoords,(ViewGroup)view);      return targetView != view ? targetView : null;    }    return null;  } else   if (pointerEvents == PointerEvents.AUTO) {    if (view instanceof ViewGroup) {      return findTouchTargetView(eventCoords,(ViewGroup)view);    }    return view;  } else {    throw new JSApplicationIllegalArgumentException("Unknown pointer event type: " + pointerEvents.toString());  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VALUES:  return isSetValues();}throw new IllegalStateException();}  }
class C{  final int capacity(){  return buf.buffer().capacity();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  float f=getFloat(stack);  String ass=getString(stack);  stack.getUIMgrSafe().getVideoFrame().setVideoZoomX(f,VideoFrame.getAspectRatioCode(ass));  return null;}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {}  }
class C{  public void checkProfile(){  log("Checking profile.",Level.FINE);  this.processedTweets=new HashSet<Long>();  try {    if (getConnection() == null) {      connect();    }    if (this.checkTrends) {      checkTrends();    }    checkFollowers();    checkStatus();    checkMentions();    checkSearch();    checkRSS();    checkAutoTweet();  } catch (  Exception exception) {    log(exception);  }  log("Done checking profile.",Level.FINE);}  }
class C{  public boolean exists(@NotNull final String url){  requireNonNull(url,"URL parameter cannot be null");  try {    return exists(new URL(url));  } catch (  MalformedURLException e) {    LOG.debug(UNABLE_TO_CHECK_MESSAGE,url,e);    return false;  }}  }
class C{  public MarkdownDialog(Dialog owner,String title){  super(owner,title);}  }
class C{  public static void addSourceHandleTo(final PNode node){  if (node == null) {    throw new IllegalArgumentException("node must not be null");  }  if (hasSelectionHandle(node)) {    return;  }  PNodeLocator nodeLocator=new PNodeLocator(node);  SourceHandle selectionHandle=new SourceHandle(nodeLocator);}  }
class C{  void _list(PrintWriter p,boolean listShadowed,String prefix,Hashtable gather){  if (listShadowed) {    if (p != null) {      p.println("\n########" + prefix);      super.list(p);    }    int size=parents.size();    for (int x=0; x < size; x++)     ((ParameterDatabase)(parents.elementAt(x)))._list(p,listShadowed,prefix + "." + x,gather);  } else {    int size=parents.size();    for (int x=size - 1; x >= 0; x--)     ((ParameterDatabase)(parents.elementAt(x)))._list(p,listShadowed,prefix,gather);    Enumeration e=keys();    while (e.hasMoreElements()) {      String key=(String)(e.nextElement());      gather.put(key,get(key));    }  }  if (p != null)   p.flush();}  }
class C{  public final int min(){  int min=Integer.MAX_VALUE;  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (min > fieldxy[z])       min=fieldxy[z];    }  }  return min;}  }
class C{  @Override protected Control createDialogArea(Composite parent){  Composite container=(Composite)super.createDialogArea(parent);  GridLayout gridLayout=(GridLayout)container.getLayout();  gridLayout.numColumns=2;  Composite composite=new Composite(container,SWT.NONE);  GridData gd_composite=new GridData(SWT.LEFT,SWT.TOP,false,false,1,1);  gd_composite.heightHint=328;  gd_composite.widthHint=406;  composite.setLayoutData(gd_composite);  Group grpAbcd=new Group(composite,SWT.NONE);  grpAbcd.setText("abcd");  grpAbcd.setBounds(0,10,396,63);  Combo combo=new Combo(grpAbcd,SWT.NONE);  combo.setBounds(10,33,169,25);  Combo combo_1=new Combo(grpAbcd,SWT.NONE);  combo_1.setBounds(217,33,169,25);  TableViewer tableViewer=new TableViewer(composite,SWT.BORDER | SWT.FULL_SELECTION);  table=tableViewer.getTable();  table.setBounds(0,211,396,287);  Composite composite_1=new Composite(container,SWT.NONE);  GridData gd_composite_1=new GridData(SWT.FILL,SWT.CENTER,false,false,1,1);  gd_composite_1.heightHint=502;  gd_composite_1.widthHint=183;  composite_1.setLayoutData(gd_composite_1);  Label label_3=new Label(composite_1,SWT.NONE);  label_3.setText("\u89E6\u6478\u4E8B\u4EF6:");  label_3.setBounds(21,91,61,17);  text_3=new Text(composite_1,SWT.BORDER);  text_3.setBounds(88,88,85,23);  Label label_7=new Label(composite_1,SWT.NONE);  label_7.setText("\u4E3B\u8981\u5BFC\u822A:");  label_7.setBounds(21,307,61,17);  text_7=new Text(composite_1,SWT.BORDER);  text_7.setBounds(88,304,85,23);  Label label_8=new Label(composite_1,SWT.NONE);  label_8.setText("\u7CFB\u7EDF\u6309\u952E:");  label_8.setBounds(21,333,61,17);  text_8=new Text(composite_1,SWT.BORDER);  text_8.setBounds(88,330,85,23);  Label label_9=new Label(composite_1,SWT.NONE);  label_9.setText("\u542F\u52A8\u6D3B\u52A8:");  label_9.setBounds(21,362,61,17);  text_9=new Text(composite_1,SWT.BORDER);  text_9.setBounds(88,359,85,23);  Label label_10=new Label(composite_1,SWT.NONE);  label_10.setText("\u5176\u4ED6\u4E8B\u4EF6:");  label_10.setBounds(21,388,61,17);  text_10=new Text(composite_1,SWT.BORDER);  text_10.setBounds(88,385,85,23);  return container;}  }
class C{  public boolean checkValidity(){  Matcher matcher=sValidityPattern.matcher(fieldName);  isValid=matcher.find();  return isValid;}  }
class C{  private boolean QNameEquals(String uri,String localName){  return (equalsMayBeNullOrZeroLen(m_namespace,uri) && (equalsMayBeNullOrZeroLen(m_name,localName) || equalsMayBeNullOrZeroLen(m_nameAlias,localName)));}  }
class C{  private void updateFilter(){  boolean usePorterDuffFilter=false;  int key=-1;  if (mDesaturation > 0) {    key=(mDesaturation << 16) | mBrightness;  } else   if (mBrightness > 0) {    key=(1 << 16) | mBrightness;    usePorterDuffFilter=true;  }  if (key == mPrevUpdateKey) {    return;  }  mPrevUpdateKey=key;  if (key != -1) {    ColorFilter filter=sCachedFilter.get(key);    if (filter == null) {      float brightnessF=getBrightness();      int brightnessI=(int)(255 * brightnessF);      if (usePorterDuffFilter) {        filter=new PorterDuffColorFilter(Color.argb(brightnessI,255,255,255),PorterDuff.Mode.SRC_ATOP);      } else {        float saturationF=1f - getDesaturation();        sTempFilterMatrix.setSaturation(saturationF);        if (mBrightness > 0) {          float scale=1f - brightnessF;          float[] mat=sTempBrightnessMatrix.getArray();          mat[0]=scale;          mat[6]=scale;          mat[12]=scale;          mat[4]=brightnessI;          mat[9]=brightnessI;          mat[14]=brightnessI;          sTempFilterMatrix.preConcat(sTempBrightnessMatrix);        }        filter=new ColorMatrixColorFilter(sTempFilterMatrix);      }      sCachedFilter.append(key,filter);    }    mPaint.setColorFilter(filter);  } else {    mPaint.setColorFilter(null);  }  invalidateSelf();}  }
class C{  public Group emptyClone(){  try {    Population p=(Population)clone();    p.subpops=new Subpopulation[subpops.length];    for (int x=0; x < subpops.length; x++)     p.subpops[x]=(Subpopulation)(subpops[x].emptyClone());    return p;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static void cleanUp(){  _mapPwPf.clear();  _pfstats.clear();  _pwstats.clear();}  }
class C{  protected void mergeScannedResults(List<Result> scannedResultList){  long start=System.currentTimeMillis();  LOGGER.debug("Started a slice result merging");  for (int i=0; i < scannedResultList.size(); i++) {    mergedScannedResult.merge(scannedResultList.get(i));  }  LOGGER.debug("Finished current slice result merging in time (MS) " + (System.currentTimeMillis() - start));}  }
class C{  Type toType(Environment env,Context ctx){  return toType(env,right.toType(env,ctx));}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height);}  }
class C{  public boolean findFieldByName(String name){  if (raw)   throw new BinaryObjectException("Failed to read named field because reader is in raw mode.");  assert dataStart != start;  if (footerLen == 0)   return false;  if (userType) {    int order;    if (matching) {      int expOrder=matchingOrder++;      BinarySchema.Confirmation confirm=schema.confirmOrder(expOrder,name);switch (confirm) {case CONFIRMED:        if (expOrder == 0)         streamPosition(dataStart);      return true;case REJECTED:    matching=false;  order=schema.order(fieldId(name));break;default :assert confirm == BinarySchema.Confirmation.CLARIFY;int id=fieldId(name);int realId=schema.fieldId(expOrder);if (id == realId) {schema.clarifyFieldName(expOrder,name);if (expOrder == 0) streamPosition(dataStart);return true;} else {matching=false;order=schema.order(id);}break;}} else order=schema.order(fieldId(name));return trySetUserFieldPosition(order);} else return trySetSystemFieldPosition(fieldId(name));}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  void verifySourceFileAttribute(File f){  System.err.println("verify: " + f);  try {    ClassFile cf=ClassFile.read(f);    SourceFile_attribute sfa=(SourceFile_attribute)cf.getAttribute(Attribute.SourceFile);    String found=sfa.getSourceFile(cf.constant_pool);    String expect=f.getName().replaceAll("([$.].*)?\\.class",".java");    if (!expect.equals(found)) {      error("bad value found: " + found + ", expected: "+ expect);    }  } catch (  Exception e) {    error("error reading " + f + ": "+ e);  }}  }
class C{  public AttachmentBig(){  responseFile="getstate.answer";}  }
class C{  private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){  if (depth == 0) {    int[] a=Arrays.copyOfRange(idx,start,end);    Arrays.sort(a);    ret.add(a);    return;  }  final int count=end - start;  if (count == 0) {    for (int j=1 << depth; j > 0; --j) {      ret.add(new int[0]);    }    return;  }  double m=0.;  for (int i=start; i < end; i++) {    m+=data[i];  }  m/=count;  int pos=Arrays.binarySearch(data,start,end,m);  if (pos >= 0) {    final int opt=(start + end) >> 1;    while (data[pos] == m) {      if (pos < opt) {        pos++;      } else       if (pos > opt) {        pos--;      } else {        break;      }    }  } else {    pos=(-pos - 1);  }  divide(idx,data,ret,start,pos,depth - 1);  divide(idx,data,ret,pos,end,depth - 1);}  }
class C{  public final ArrayList<WifiRecord> loadWifisByBssid(final String bssid,final Integer session){  final ArrayList<WifiRecord> wifis=new ArrayList<>();  String selectSql;  if (session != null) {    selectSql=Schema.COL_BSSID + " = \"" + bssid+ "\" AND "+ Schema.COL_SESSION_ID+ " =\""+ session+ "\"";  } else {    selectSql=Schema.COL_BSSID + " = \"" + bssid+ "\"";  }  final Cursor cursor=contentResolver.query(ContentProvider.CONTENT_URI_WIFI,null,selectSql,null,null);  final int columnIndex=cursor.getColumnIndex(Schema.COL_BSSID);  final int columnIndex2=cursor.getColumnIndex(Schema.COL_SSID);  final int columnIndex3=cursor.getColumnIndex(Schema.COL_CAPABILITIES);  final int columnIndex4=cursor.getColumnIndex(Schema.COL_FREQUENCY);  final int columnIndex5=cursor.getColumnIndex(Schema.COL_LEVEL);  final int columnIndex6=cursor.getColumnIndex(Schema.COL_TIMESTAMP);  final int columnIndex7=cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);  final int columnIndex8=cursor.getColumnIndex(Schema.COL_END_POSITION_ID);  final int columnIndex9=cursor.getColumnIndex(Schema.COL_KNOWN_WIFI);  while (cursor.moveToNext()) {    final WifiRecord wifi=new WifiRecord();    wifi.setBssid(cursor.getString(columnIndex));    wifi.setSsid(cursor.getString(columnIndex2));    wifi.setCapabilities(cursor.getString(columnIndex3));    wifi.setFrequency(cursor.getInt(columnIndex4));    wifi.setLevel(cursor.getInt(columnIndex5));    wifi.setOpenBmapTimestamp(cursor.getLong(columnIndex6));    wifi.setBeginPosition(loadPositionById(cursor.getString(columnIndex7)));    wifi.setEndPosition(loadPositionById(cursor.getString(columnIndex8)));    wifi.setCatalogStatus(CatalogStatus.values()[cursor.getInt(columnIndex9)]);    wifis.add(wifi);  }  cursor.close();  return wifis;}  }
class C{  void updateForDecoderMfgID(String pMfg,int pMfgID,int pModelID){  String msg="Found mfg " + pMfgID + " ("+ pMfg+ ") version "+ pModelID+ "; no such decoder defined";  log.warn(msg);  _statusLabel.setText(msg);  JComboBox<String> temp=DecoderIndexFile.instance().matchingComboBox(null,null,Integer.toString(pMfgID),null,null,null);  if (log.isDebugEnabled()) {    log.debug("mfg-only selectDecoder found " + temp.getItemCount() + " matches");  }  if (temp.getItemCount() > 0) {    decoderBox.setModel(temp.getModel());    decoderBox.insertItemAt("<from locomotive settings>",0);    decoderBox.setSelectedIndex(1);  } else {    temp=DecoderIndexFile.instance().matchingComboBox(null,null,null,null,null,null);    decoderBox.setModel(temp.getModel());    decoderBox.insertItemAt("<from locomotive settings>",0);    decoderBox.setSelectedIndex(1);  }}  }
class C{  public boolean isDhcp(){  return dhcp;}  }
class C{  public boolean updateStatsAndReturnIfAllowed(){  long now=SystemClock.elapsedRealtime();  long deltaMs=now - mLastRequestTimestamp;  if (deltaMs < mDelayMs)   return false;  mLastRequestTimestamp=now;  if (deltaMs < 2 * mDelayMs) {    mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2);  } else {    mDelayMs=MIN_DELAY;  }  return true;}  }
class C{  private static BigInteger generateRandomInteger(BigInteger n,SecureRandom random){  return new BigInteger(n.bitLength() - 1,random);}  }
class C{  public static MealsFragment newInstance(){  MealsFragment fragment=new MealsFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  protected Iterator<Map.Entry<K,V>> createEntrySetIterator(){  return new ReferenceEntrySetIterator<K,V>(this);}  }
class C{  public static boolean isEncoded(final HttpEntity entity){  Header h=entity.getContentType();  if (h != null) {    HeaderElement[] elems=h.getElements();    if (elems.length > 0) {      String contentType=elems[0].getName();      return contentType.equalsIgnoreCase(CONTENT_TYPE);    } else {      return false;    }  } else {    return false;  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public void requestStartupUpdates(String from,byte[] tableKey,int podIndex,long deltaTime,Result<Boolean> cont){  if (log.isLoggable(Level.FINEST)) {    log.finest("CacheRequestUpdates " + from + " shard="+ podIndex+ " delta="+ deltaTime);  }  long accessTime=CurrentTime.currentTime() + deltaTime;  TablePod tablePod=_clientKraken.getTable(tableKey);  if (tablePod == null) {    if (log.isLoggable(Level.FINEST)) {      log.finest(L.l("{0} is an unknown table key ({1})",Hex.toShortHex(tableKey),BartenderSystem.getCurrentSelfServer()));    }    cont.ok(true);    return;  }  tablePod.getUpdatesFromLocal(podIndex,accessTime,cont);}  }
class C{  public void deleteCookie(Cookie cookie){  String name=cookie.getName() + cookie.getDomain();  cookies.remove(name);  SharedPreferences.Editor prefsWriter=cookiePrefs.edit();  prefsWriter.remove(COOKIE_NAME_PREFIX + name);  prefsWriter.commit();}  }
class C{  public void dockSomewhere(JComponent child){  dockSomewhere(getWrapper(child));}  }
class C{  @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  builder.append("\t<logging>\r\n");  String pathDiffTool=diffToolField.getText();  if (pathDiffTool.length() == 0) {    errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.PATH_NOT_SET,"The root folder for all logs and debug" + " information has not been set."));  }  if (!pathDiffTool.endsWith(File.separator) && pathDiffTool.contains(File.separator)) {    pathDiffTool+=File.separator;  }  builder.append("\t\t<root_folder>\"" + pathDiffTool + "\"</root_folder>\r\n");  builder.append("\t\t<diff_tool>\r\n");  builder.append("\t\t\t<level>" + diffToolLogLevelComboBox.getSelectedItem() + "</level>\r\n");  builder.append("\t\t</diff_tool>\r\n");  builder.append("\t</logging>\r\n");}  }
class C{  protected boolean checkPromptNeeded(){  return false;}  }
class C{  @Override protected LR0State createStartState(){  return new LR0State(toHashSet(new LR0Item(grammar.getStartProduction(),0)));}  }
class C{  private void connectionOK(){  log.info("");  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  confirmPanel.getOKButton().setEnabled(false);  m_connectionOK=tryConnection();  if (m_connectionOK) {    Language l=Language.getLoginLanguage();    Env.verifyLanguage(m_ctx,l);    Env.setContext(m_ctx,Env.LANGUAGE,l.getAD_Language());    Msg.getMsg(m_ctx,"0");    MSystem system=MSystem.get(m_ctx);    if (system.isJustMigrated()) {      statusBar.setStatusLine("Running: After Migration ....",true);      ADialog.info(m_WindowNo,this,"AfterMigration");      Thread.yield();      DB.afterMigration(m_ctx);    }    printerField.setValue(Ini.getProperty(Ini.P_PRINTER));    loginTabPane.setSelectedIndex(1);  }  confirmPanel.getOKButton().setEnabled(true);  setCursor(Cursor.getDefaultCursor());}  }
class C{  public static PlatformAffinityFunction readAffinityFunction(BinaryRawReaderEx in){  byte plcTyp=in.readByte();  if (plcTyp == 0)   return null;  int partitions=in.readInt();  boolean exclNeighbours=in.readBoolean();  byte overrideFlags=in.readByte();  Object userFunc=in.readObjectDetached();  AffinityFunction baseFunc=null;switch (plcTyp) {case 1:{      FairAffinityFunction f=new FairAffinityFunction();      f.setPartitions(partitions);      f.setExcludeNeighbors(exclNeighbours);      baseFunc=f;      break;    }case 2:{    RendezvousAffinityFunction f=new RendezvousAffinityFunction();    f.setPartitions(partitions);    f.setExcludeNeighbors(exclNeighbours);    baseFunc=f;    break;  }default :assert plcTyp == 3;}return new PlatformAffinityFunction(userFunc,partitions,overrideFlags,baseFunc);}  }
class C{  private static List<COperandTree> convert(final INaviModule module,final List<Operand> operands){  final List<COperandTree> convertedOperands=new ArrayList<COperandTree>();  for (  final Operand operand : operands) {    convertedOperands.add(module.createOperand(convert(module,operand.getRootNode(),null)));  }  return convertedOperands;}  }
class C{  public boolean isDeadlocked(){  return deadlocked;}  }
class C{  public Boolean isLogQos(){  return logQos;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.296 -0500",hash_original_method="E786223707BD58A877E8AD07E09750F2",hash_generated_method="65A678B85D05DA1494C62416913CD072") public void onScaleChanged(WebView view,float oldScale,float newScale){}  }
class C{  public PairedStats snapshot(){  return new PairedStats(xStats.snapshot(),yStats.snapshot(),sumOfProductsOfDeltas);}  }
class C{  Object adjustValue(Object value,Map attributes,Object key,int direction) throws BadLocationException, ParseException {  if (key != null) {    int field;    if (key == DateFormat.Field.HOUR1) {      key=DateFormat.Field.HOUR0;    }    field=((DateFormat.Field)key).getCalendarField();    Calendar calendar=getCalendar();    if (calendar != null) {      calendar.setTime((Date)value);      int fieldValue=calendar.get(field);      try {        calendar.add(field,direction);        value=calendar.getTime();      } catch (      Throwable th) {        value=null;      }      return value;    }  }  return null;}  }
class C{  public VariableNode(Object object,Object id){  this.object=object;  this.id=id;}  }
class C{  @SuppressWarnings("unused") private void dumpCrossings(S2Loop loop){  System.out.println("Ortho(v1): " + S2.ortho(loop.vertex(1)));  System.out.printf("Contains(kOrigin): %b\n",loop.contains(S2.origin()));  for (int i=1; i <= loop.numVertices(); ++i) {    S2Point a=S2.ortho(loop.vertex(i));    S2Point b=loop.vertex(i - 1);    S2Point c=loop.vertex(i + 1);    S2Point o=loop.vertex(i);    System.out.printf("Vertex %d: [%.17g, %.17g, %.17g], " + "%d%dR=%d, %d%d%d=%d, R%d%d=%d, inside: %b\n",i,loop.vertex(i).x,loop.vertex(i).y,loop.vertex(i).z,i - 1,i,S2.robustCCW(b,o,a),i + 1,i,i - 1,S2.robustCCW(c,o,b),i,i + 1,S2.robustCCW(a,o,c),S2.orderedCCW(a,b,c,o));  }  for (int i=0; i < loop.numVertices() + 2; ++i) {    S2Point orig=S2.origin();    S2Point dest;    if (i < loop.numVertices()) {      dest=loop.vertex(i);      System.out.printf("Origin->%d crosses:",i);    } else {      dest=new S2Point(0,0,1);      if (i == loop.numVertices() + 1) {        orig=loop.vertex(1);      }      System.out.printf("Case %d:",i);    }    for (int j=0; j < loop.numVertices(); ++j) {      System.out.println(" " + S2EdgeUtil.edgeOrVertexCrossing(orig,dest,loop.vertex(j),loop.vertex(j + 1)));    }    System.out.println();  }  for (int i=0; i <= 2; i+=2) {    System.out.printf("Origin->v1 crossing v%d->v1: ",i);    S2Point a=S2.ortho(loop.vertex(1));    S2Point b=loop.vertex(i);    S2Point c=S2.origin();    S2Point o=loop.vertex(1);    System.out.printf("%d1R=%d, M1%d=%d, R1M=%d, crosses: %b\n",i,S2.robustCCW(b,o,a),i,S2.robustCCW(c,o,b),S2.robustCCW(a,o,c),S2EdgeUtil.edgeOrVertexCrossing(c,o,b,a));  }}  }
class C{  public static void main(String[] args){  double facilityXCoordinates[]=new double[numberOfFacilities];  for (int i=0; i < numberOfFacilities; i++) {    facilityXCoordinates[i]=rand.nextDouble() * numberOfLinks * linkLength;  }  int numberOfExperiments=10000;  double averageMobSimDistance=0;  double averageEuclideanDistance=0;  double averageOldJDEQSimDistance=0;  for (int i=0; i < numberOfExperiments; i++) {    int indexStartFacility=getIndexOfRandomFacility();    int indexTargetFacility=getIndexOfRandomFacility();    averageMobSimDistance+=getMobSimDistance(facilityXCoordinates[indexStartFacility],facilityXCoordinates[indexTargetFacility]);    averageEuclideanDistance+=getEuclideanDistance(facilityXCoordinates[indexStartFacility],facilityXCoordinates[indexTargetFacility]);    averageOldJDEQSimDistance+=getOldJDEQSimDistance(facilityXCoordinates[indexStartFacility],facilityXCoordinates[indexTargetFacility]);  }  averageMobSimDistance/=numberOfExperiments;  averageEuclideanDistance/=numberOfExperiments;  averageOldJDEQSimDistance/=numberOfExperiments;  System.out.println("averageMobSimDistance: " + averageMobSimDistance);  System.out.println("averageEuclideanDistance: " + averageEuclideanDistance);  System.out.println("averageOldJDEQSimDistance: " + averageOldJDEQSimDistance);}  }
class C{  @Override public Set<TopicPartition> assignment(){  return assignment;}  }
class C{  public static long toLongFromNibbles(byte[] nibbles,int start){  return toLong(nibbles[start],nibbles[start + 1],nibbles[start + 2],nibbles[start + 3],nibbles[start + 4],nibbles[start + 5],nibbles[start + 6],nibbles[start + 7],nibbles[start + 8],nibbles[start + 9],nibbles[start + 10],nibbles[start + 11],nibbles[start + 12],nibbles[start + 13],nibbles[start + 14],nibbles[start + 15]);}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public TitleGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,java.util.Vector inDescendants){  super(inSource,inParent,inGroupLabel,DATATYPE_VIRTUAL,null,inDescendants);}  }
class C{  static <E>E checkType(E obj,Class<? extends E> type){  if (obj != null && !type.isInstance(obj)) {    throw new ClassCastException("Attempt to insert element of type " + obj.getClass() + " into collection of type "+ type);  }  return obj;}  }
class C{  public GoToAction(PDFObject obj,PDFObject root) throws IOException {  super("GoTo");  PDFObject destObj=obj.getDictRef("D");  if (destObj == null) {    throw new PDFParseException("No destination in GoTo action " + obj);  }  dest=PDFDestination.getDestination(destObj,root);}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public void testMissingParent() throws Exception {  final Locale oldDefault=Locale.getDefault();  Locale.setDefault(new Locale("en","US"));  try {    final Locale loc=new Locale("jf","jf");    ResourceBundle bundle=ResourceBundle.getBundle("Bug4168625Resource2",loc);    final String s1=bundle.getString("name");    if (!s1.equals("Bug4168625Resource2_en_US")) {      errln("getBundle did not find leaf bundle: " + bundle.getClass().getName());    }    final String s2=bundle.getString("baseName");    if (!s2.equals("Bug4168625Resource2")) {      errln("getBundle did not set up proper inheritance chain");    }  }  finally {    Locale.setDefault(oldDefault);  }}  }
class C{  public void testDoubleDelivery(){  Message m1=new Message(h1,h2,msgId1,1);  h1.createNewMessage(m1);  h1.connect(h2);  updateAllNodes();  clock.advance(10);  mc.reset();  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h2,mc.getLastTo());  h1.connect(h3);  updateAllNodes();  assertTrue(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h3,mc.getLastTo());  h3.connect(h2);  updateAllNodes();  clock.advance(10);  updateAllNodes();  assertFalse(mc.next());}  }
class C{  public static <V,E>UndirectedGraph<V,E> toUndirected(Graph<V,E> graph,Supplier<UndirectedGraph<V,E>> graph_factory,Supplier<E> edge_factory,boolean create_new){  UndirectedGraph<V,E> out=graph_factory.get();  for (  V v : graph.getVertices())   out.addVertex(v);  for (  E e : graph.getEdges()) {    Pair<V> endpoints=graph.getEndpoints(e);    V v1=endpoints.getFirst();    V v2=endpoints.getSecond();    E to_add;    if (graph.getEdgeType(e) == EdgeType.DIRECTED || create_new)     to_add=edge_factory.get(); else     to_add=e;    out.addEdge(to_add,v1,v2,EdgeType.UNDIRECTED);  }  return out;}  }
class C{  public RepeatIterable(@NotNull List<T> master){  this.master=master;}  }
class C{  protected boolean collect(Fact fact){  if (fact.getIteration() == currentIteration && !fact.isCycle()) {    Derivation d=fact.getDerivation();    for (    Fact source : d.getSources()) {      if (frontier(source)) {        return newFacts.add(fact);      }    }  }  return false;}  }
class C{  @Override public void addError(String message){  addError(message,null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.COMPLEX_TYPE__FEATURES:    return getFeatures();case TypesPackage.COMPLEX_TYPE__SUPER_TYPES:  return getSuperTypes();}return super.eGet(featureID,resolve,coreType);}  }
class C{  byte[] encryptContentEncryptionKey(byte[] contentEncryptionKey,PublicKey publicKey) throws EncryptDataException {  try {    Cipher rsaCipher=Cipher.getInstance(RSA_ALGORITHM_MODE);    rsaCipher.init(Cipher.ENCRYPT_MODE,publicKey);    byte[] encryptedData=rsaCipher.doFinal(contentEncryptionKey);    return encryptedData;  } catch (  Exception e) {    throw new EncryptDataException("Error while encrypting data ",e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.DEPEND___DEPEND_1:    setDepend_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public NamingSecurityException(){  super();}  }
class C{  public TimezoneId(String timezone){  super(timezone);}  }
class C{  public static OperationPendingException convertToApi(org.oscm.internal.types.exception.OperationPendingException oldEx){  org.oscm.internal.types.exception.beans.OperationPendingExceptionBean bean=(org.oscm.internal.types.exception.beans.OperationPendingExceptionBean)getFaultInfo(oldEx);  OperationPendingExceptionBean v13Bean=convertBeanToApi(bean,OperationPendingExceptionBean.class);  if (bean != null) {    OperationPendingException.ReasonEnum v13Reason=EnumConverter.convert(bean.getReason(),OperationPendingException.ReasonEnum.class);    v13Bean.setReason(v13Reason);  }  return newApiException(OperationPendingException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  private static MatrixBlock computeSolve(MatrixObject in1,MatrixObject in2) throws DMLRuntimeException {  Array2DRowRealMatrix matrixInput=DataConverter.convertToArray2DRowRealMatrix(in1);  Array2DRowRealMatrix vectorInput=DataConverter.convertToArray2DRowRealMatrix(in2);  QRDecomposition qrdecompose=new QRDecomposition(matrixInput);  DecompositionSolver solver=qrdecompose.getSolver();  RealMatrix solutionMatrix=solver.solve(vectorInput);  return DataConverter.convertToMatrixBlock(solutionMatrix.getData());}  }
class C{  @Override protected void append(LoggingEvent event){  String message=(getLayout() == null) ? event.getRenderedMessage() : getLayout().format(event);  if (getEnableLevelMonitoring()) {    MonitorFactory.add(createKey(PREFIX + "TOTAL",message,event),1);    MonitorFactory.add(createKey(PREFIX + event.getLevel(),message,event),1);  }  if (getGeneralize()) {    MonitorFactory.add(createKey(generalize(message),message,event),1);  }}  }
class C{  public void onSearchComplete(String address,int status){  if (DBG)   Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);  if (!address.equals(mDevice.getAddress())) {    return;  }  try {    mCallback.onServicesDiscovered(BluetoothGatt.this,status);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  @Nullable @ObjectiveCName("editMyNickCommandWithNick:") public Command<Boolean> editMyNick(final String newNick){  return null;}  }
class C{  protected RenameResourceChange(IPath resourcePath,String newName,long stampToRestore){  if (resourcePath == null || newName == null || newName.length() == 0) {    throw new IllegalArgumentException();  }  fResourcePath=resourcePath;  fNewName=newName;  fStampToRestore=stampToRestore;  fDescriptor=null;  setValidationMethod(VALIDATE_NOT_DIRTY);}  }
class C{  public int hashCode(){  return "ISO".hashCode() * 11 + getZone().hashCode();}  }
class C{  private static int compareHandlesNulls(CstString a,CstString b){  if (a == b) {    return 0;  } else   if (a == null) {    return -1;  } else   if (b == null) {    return 1;  } else {    return a.compareTo(b);  }}  }
class C{  public static void moveFile(final File src,final File dst) throws IOException {  copyFile(src,dst);  src.delete();}  }
class C{  private void run() throws Exception {  Object result=EclipseStarter.run(null);  Preconditions.checkState(Integer.valueOf(0).equals(result),"Unexpected return=0, was: %s",result);}  }
class C{  protected void checkForDuplicateSnapshotName(String requestedName,Volume volume){  BlockServiceUtils.checkForDuplicateArraySnapshotName(requestedName,volume.getId(),_dbClient);}  }
class C{  public static void saveEditors(Indexable<IProject> projects){  if (!BuildAction.isSaveAllSet()) {    return;  }  IWorkbenchWindow[] windows=PlatformUI.getWorkbench().getWorkbenchWindows();  for (int i=0; i < windows.length; i++) {    IWorkbenchPage[] pages=windows[i].getPages();    for (int j=0; j < pages.length; j++) {      IWorkbenchPage page=pages[j];      if (projects == null) {        page.saveAllEditors(false);      } else {        IEditorPart[] editors=page.getDirtyEditors();        for (int k=0; k < editors.length; k++) {          IEditorPart editor=editors[k];          IFile inputFile=ResourceUtil.getFile(editor.getEditorInput());          if (inputFile != null) {            if (projects.contains(inputFile.getProject())) {              page.saveEditor(editor,false);            }          }        }      }    }  }}  }
class C{  static void registerAccessQuickFixAction(@NotNull PsiMember refElement,@NotNull PsiJavaCodeReferenceElement place,@Nullable HighlightInfo errorResult,final PsiElement fileResolveScope){  if (errorResult == null)   return;  PsiClass accessObjectClass=null;  PsiElement qualifier=place.getQualifier();  if (qualifier instanceof PsiExpression) {    accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass((PsiExpression)qualifier).getElement();  }  registerReplaceInaccessibleFieldWithGetterSetterFix(refElement,place,accessObjectClass,errorResult);  if (refElement instanceof PsiCompiledElement)   return;  PsiModifierList modifierList=refElement.getModifierList();  if (modifierList == null)   return;  PsiClass packageLocalClassInTheMiddle=getPackageLocalClassInTheMiddle(place);  if (packageLocalClassInTheMiddle != null) {    IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(packageLocalClassInTheMiddle,PsiModifier.PUBLIC,true,true);    QuickFixAction.registerQuickFixAction(errorResult,fix);    return;  }  try {    Project project=refElement.getProject();    JavaPsiFacade facade=JavaPsiFacade.getInstance(project);    PsiModifierList modifierListCopy=facade.getElementFactory().createFieldFromText("int a;",null).getModifierList();    modifierListCopy.setModifierProperty(PsiModifier.STATIC,modifierList.hasModifierProperty(PsiModifier.STATIC));    String minModifier=PsiModifier.PACKAGE_LOCAL;    if (refElement.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {      minModifier=PsiModifier.PROTECTED;    }    if (refElement.hasModifierProperty(PsiModifier.PROTECTED)) {      minModifier=PsiModifier.PUBLIC;    }    String[] modifiers={PsiModifier.PACKAGE_LOCAL,PsiModifier.PROTECTED,PsiModifier.PUBLIC};    for (int i=ArrayUtil.indexOf(modifiers,minModifier); i < modifiers.length; i++) {      @PsiModifier.ModifierConstant String modifier=modifiers[i];      modifierListCopy.setModifierProperty(modifier,true);      if (facade.getResolveHelper().isAccessible(refElement,modifierListCopy,place,accessObjectClass,fileResolveScope)) {        IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(refElement,modifier,true,true);        TextRange fixRange=new TextRange(errorResult.startOffset,errorResult.endOffset);        PsiElement ref=place.getReferenceNameElement();        if (ref != null) {          fixRange=fixRange.union(ref.getTextRange());        }        QuickFixAction.registerQuickFixAction(errorResult,fixRange,fix);      }    }  } catch (  IncorrectOperationException e) {    LOG.error(e);  }}  }
class C{  private void checkSortMissingLast(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,low));  assertU(adoc("id","2",field,high));  assertU(commit());  assertQ(req("q","*:*","sort",field + " asc"),"//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=2]","//result/doc[3]/str[@name='id'][.=0]");  assertQ(req("q","*:*","sort",field + " desc"),"//result/doc[1]/str[@name='id'][.=2]","//result/doc[2]/str[@name='id'][.=1]","//result/doc[3]/str[@name='id'][.=0]");}  }
class C{  public static PendingIntent makeCheckAlarmPendingIntent(Context context){  return PendingIntent.getBroadcast(context,DELETE_CACHE_REQUEST_CODE,new Intent(context,CacheCleanupReceiver.class),PendingIntent.FLAG_NO_CREATE);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.687 -0500",hash_original_method="3D6841DD3321DF543EE186C2C08CA7E2",hash_generated_method="F8C03B01875AE3EA2298F5B7496851FE") public final void update(byte[] input) throws IllegalStateException {  if (!isInitMac) {    throw new IllegalStateException();  }  if (input != null) {    spiImpl.engineUpdate(input,0,input.length);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__OPERATOR:  return operator != OPERATOR_EDEFAULT;case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__RIGHT_OPERAND:return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  public static String loadContentFirstPatterns(String dirName,String fileName,ConfigData configData){  String filePath=dirName + fileName;  _contentFirstFileName=fileName;  _contentFirstFilePath=filePath;  _contentFirstLastModified=0;  _contentFirstPatterns=DEFAULT_CONTENT_FIRST_PATTERNS;  PatternsInfo patternsInfo=loadPatterns(filePath,"content-first");  if (patternsInfo.patterns != null) {    _contentFirstPatterns=patternsInfo.patterns;    _contentFirstVersion=patternsInfo.version;    _contentFirstLastModified=new File(filePath).lastModified();  }  configData.setContentFirstPatterns(_contentFirstPatterns);  return patternsInfo.html.toString();}  }
class C{  @Override public void mousePressed(MouseEvent e){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.288 -0500",hash_original_method="F1A6F8EFFE6AE4CC1CBF3FEC9CE7ACF7",hash_generated_method="42A6BF67B8D830ED8E343D9B3686751E") private static Element[] makeDexElements(ArrayList<File> files,File optimizedDirectory){  Element[] ret=new Element[1];  ret[0]=new Element(files.get(0),null,null);  return ret;}  }
class C{  public void removeChartMouseListener(ChartMouseListenerFX listener){  ParamChecks.nullNotPermitted(listener,"listener");  this.chartMouseListeners.remove(listener);}  }
class C{  public DeLiCluNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,DeLiCluEntry.class);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void writeStringMessage(String string){  writeMessage(ByteBuffer.wrap(string.getBytes()));}  }
class C{  private List<Rule> readRules(Reader reader) throws IOException, IllegalArgumentException {  BufferedReader in=new BufferedReader(reader);  List<Rule> rules=new ArrayList<Rule>();  String line;  while ((line=in.readLine()) != null) {    if (line.length() == 0) {      continue;    }    line=line.trim();    char first=line.charAt(0);    boolean sign=false;switch (first) {case '+':      sign=true;    break;case '-':  sign=false;break;case ' ':case '\n':case '#':continue;default :throw new IOException("Invalid first character: " + line);}String regex=line.substring(1);if (LOG.isTraceEnabled()) {LOG.trace("Adding rule [" + regex + "]");}Rule rule=createRule(sign,regex);rules.add(rule);}return rules;}  }
class C{  @SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter") private static Collection<Object> initializeNativeLibraries0(Collection<NativeLibrary> libs){  assert Thread.holdsLock(LIBS_MUX);  Collection<Object> res=new HashSet<>();  for (  NativeLibrary lib : libs) {    String libName=lib.name;    File libFile=new File(libName);    try {      if (libFile.isAbsolute())       System.load(libName); else       System.loadLibrary(libName);      Object libObj=null;      ClassLoader ldr=APP_CLS_LDR;      while (ldr != null) {        Vector<Object> ldrLibObjs=nativeLibraries(ldr);synchronized (ldrLibObjs) {          for (          Object ldrLibObj : ldrLibObjs) {            String name=nativeLibraryName(ldrLibObj);            if (libFile.isAbsolute()) {              if (F.eq(name,libFile.getCanonicalPath())) {                libObj=ldrLibObj;                break;              }            } else {              if (name.contains(libName)) {                libObj=ldrLibObj;                break;              }            }          }        }        if (libObj != null)         break;        ldr=ldr.getParent();      }      if (libObj == null)       throw new IgniteException("Failed to find loaded library: " + libName);      res.add(libObj);    } catch (    UnsatisfiedLinkError e) {      if (!lib.optional)       throw e;    }catch (    IOException e) {      throw new IgniteException("Failed to initialize native libraries due to unexpected exception.",e);    }  }  return res;}  }
class C{  public boolean isSystem(){  return system;}  }
class C{  private void init(int userConnected,int parentId,boolean isLdap){  _id=ISicresAdminDefsKeys.NULL_ID;  _parentId=parentId;  _isLdap=isLdap;  _userConnected=userConnected;  _name="";  _tblPrefix="";  _remarks="";  _flags=ArchiveDefs.ARCH_FLAG_NONE;  _type=ArchiveDefs.ARCH_TYPE_STANDARD;  _accessType=ArchiveDefs.ACCESS_TYPE_PROTECTED;  _updaterId=DbDataType.NULL_LONG_INTEGER;  _creatorId=_userConnected;  _updateDate=DbDataType.NULL_DATE_TIME;  _acsId=ISicresAdminDefsKeys.NULL_ID;  _adminUserId=_userConnected;  _adminUsers=new BasicUsersImpl();  _flds=new ArchiveFldsImpl();  _idxs=new ArchiveIdxsImpl();  _misc=new ArchiveMiscImpl("",ArchiveVolListType.NONE,ISicresAdminDefsKeys.NULL_ID);}  }
class C{  public static Value safeValue(Value v,int isolateId){  if (v == null) {    v=DValue.forPrimitive(null,isolateId);    assert v != null;  }  return v;}  }
class C{  public <K,V>TransactionMap<K,V> openMap(String name,DataType keyType,DataType valueType){  checkNotClosed();  MVMap<K,VersionedValue> map=store.openMap(name,keyType,valueType);  int mapId=map.getId();  return new TransactionMap<K,V>(this,map,mapId);}  }
class C{  public void removeAllTrackingIcons(){  if (trackingIcons != null && trackingIcons.size() > 0) {    trackingIcons.clear();    repaint();  }}  }
class C{  public void compileProjects(List<File> projectLocations,List<File> projectLocationsToCompile,List<File> singleSourcesToCompile) throws N4JSCompileException {  compileProjects(projectLocations,projectLocationsToCompile,singleSourcesToCompile,new DismissingIssueAcceptor());}  }
class C{  public IMqttToken subscribe(String topicFilter,int qos,Object userContext,IMqttActionListener callback,IMqttMessageListener messageListener) throws MqttException {  return subscribe(new String[]{topicFilter},new int[]{qos},userContext,callback,new IMqttMessageListener[]{messageListener});}  }
class C{  public ResourceNode(String nodeName,Object object){  this(nodeName,object,null,"");}  }
class C{  public void addBatch(final String sql) throws SQLException {  if (batchQueries == null)   batchQueries=new ArrayList<>();  if (sql == null)   throw ExceptionMapper.getSqlException("null cannot be set to addBatch( String sql)");  batchQueries.add(sql);}  }
class C{  protected static Tuple<String,String> createTuple(String one,boolean two){  return MatsimXmlWriter.createTuple(one,Boolean.toString(two));}  }
class C{  public boolean isItemStackRegisteredForName(ItemStack stack,String oreName){  final int[] oreIDs=OreDictionary.getOreIDs(stack);  for (  final int oreID : oreIDs) {    if (oreName.equals(OreDictionary.getOreName(oreID))) {      return true;    }  }  return false;}  }
class C{  private boolean compareBoolean(Boolean valueObj,String value1S,String value2S){  m_numeric=false;  Boolean value1B=Boolean.valueOf(value1S) || "Y".equalsIgnoreCase(value1S);  String op=getOperation();  if (OPERATION_Eq.equals(op))   return valueObj.equals(value1B); else   if (OPERATION_NotEq.equals(op))   return !valueObj.equals(value1B); else   throw new IllegalArgumentException("Not Supported =" + op);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static List<TimeSynchronizationSample> createTolerableUnsortedSamples(final long startValue,final int count){  final List<TimeSynchronizationSample> samples=createTolerableSamples(startValue,count);  Collections.shuffle(samples);  return samples;}  }
class C{  public static void main(String[] argv){  try {    Instances instances=new Instances(new FileReader("\\iris.2.arff"));    ADNode ADTree=ADNode.makeADTree(instances);    int[] nCounts=new int[12];    int[] nNodes=new int[3];    int[] nOffsets=new int[3];    nNodes[0]=0;    nNodes[1]=3;    nNodes[2]=4;    nOffsets[0]=2;    nOffsets[1]=1;    nOffsets[2]=4;    ADTree.print();    ADTree.getCounts(nCounts,nNodes,nOffsets,0,0,false);  } catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public static boolean isXML11Invalid(int c){  return !isXML11Valid(c);}  }
class C{  public HllSketch build(){  final FieldsFactory denseFactory;  if (compressedDense) {    denseFactory=new DenseCompressedFieldsFactory();  } else {    denseFactory=new DenseFieldsFactory();  }  final Fields fields;  if (denseMode) {    fields=denseFactory.make(preamble);  } else {    fields=new OnHeapHashFields(preamble,16,HashUtils.getMaxHashSize(preamble.getLogConfigK()),denseFactory);  }  if (hipEstimator) {    return new HipHllSketch(fields);  } else {    return new HllSketch(fields);  }}  }
class C{  public static <T,P,R extends Collection<T>>R selectWith(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter,R targetCollection){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).selectWith(predicate,parameter,targetCollection);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.selectWith((ArrayList<T>)iterable,predicate,parameter,targetCollection);  }  if (iterable instanceof List) {    return ListIterate.selectWith((List<T>)iterable,predicate,parameter,targetCollection);  }  if (iterable != null) {    return IterableIterate.selectWith(iterable,predicate,parameter,targetCollection);  }  throw new IllegalArgumentException("Cannot perform a selectWith on null");}  }
class C{  public JsonObject add(String name,long value){  add(name,valueOf(value));  return this;}  }
class C{  private void createTld(String tldName,TldState initialTldState,Duration addGracePeriod,Duration redemptionGracePeriod,Duration pendingDeleteLength) throws Exception {  CreateTldCommand command=new CreateTldCommand();  command.initialTldState=initialTldState;  command.mainParameters=ImmutableList.of(tldName);  command.roidSuffix=String.format("%S%X",tldName.replaceAll("[^a-z0-9]","").substring(0,7),roidSuffixCounter++);  command.addGracePeriod=addGracePeriod;  command.redemptionGracePeriod=redemptionGracePeriod;  command.pendingDeleteLength=pendingDeleteLength;  command.premiumListName=Optional.of(premiumList);  command.force=force;  command.run();}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public static boolean permitNextLogBatch(long maxCount,long currentLogSize,int nextBatchSize){  if (maxCount == 0) {    return true;  } else   if (nextBatchSize == 1) {    return currentLogSize < maxCount;  } else {    return (currentLogSize + nextBatchSize <= maxCount + LogConstants.MAXCOUNT_OVERFLOW) || (currentLogSize == 0);  }}  }
class C{  public <T>T toNative(Object novaObject){  Objects.requireNonNull(novaObject);  NativeConverter converter=findConverter(novaConverters,novaObject);  if (converter == null) {    throw new NativeException("NativeManager.toNative: Converter for " + novaObject + " with class "+ novaObject.getClass()+ " does not exist!");  }  return (T)converter.toNative(novaObject);}  }
class C{  public static SignatureManager from(Snapshot snapshot,FileConfig fileConfig){  logger.trace("<< from() < dsPrsId: {} udid: {} snapshot: {} fileConfig: {}",snapshot.dsPrsID(),snapshot.backupUDID(),snapshot.snapshotID(),fileConfig);  CloudFileWriter cloudWriter=CloudFileWriter.from(snapshot,fileConfig);  Map<ByteString,Set<ICloud.MBSFile>> signatures=snapshot.files().stream().collect(Collectors.groupingByConcurrent(null,Collectors.toSet()));  long totalBytes=signatures.values().stream().flatMap(null).mapToLong(null).sum();  Lock lock=new ReentrantLock();  SignatureManager instance=new SignatureManager(signatures,cloudWriter,lock,totalBytes,new AtomicLong(0),new AtomicLong(0));  logger.trace(">> from() > {}",instance);  return instance;}  }
class C{  public boolean checkElementNameIsValid(ElementName elName,FilePosition pos){  if (!elName.custom) {    return true;  }  try {    return doc.createElement(elName.name) != null;  } catch (  DOMException e) {    mq.addMessage(MessageType.INVALID_TAG_NAME,MessageLevel.WARNING,FilePosition.startOf(pos),MessagePart.Factory.valueOf(elName.name));    return false;  }}  }
class C{  public static Connection connect(DBInstanceInfo db,String username,String password,MyPerfContext context,java.util.Properties myinfo) throws java.sql.SQLException {  java.util.Properties info=new java.util.Properties();  info.put("user",username);  info.put("password",password);  if ("oracle".equalsIgnoreCase(db.getDbType())) {    info.put("oracle.net.CONNECT_TIMEOUT",String.valueOf(context.getConnectionTimeout()));    info.put("oracle.net.READ_TIMEOUT",String.valueOf(context.getConnectionReadTimeout()));    info.put("oracle.jdbc.ReadTimeout",String.valueOf(context.getConnectionReadTimeout()));  } else   if ("mysql".equalsIgnoreCase(db.getDbType())) {    if (myinfo.getProperty("connectTimeout") != null)     info.put("connectTimeout",myinfo.getProperty("connectTimeout")); else     info.put("connectTimeout",String.valueOf(context.getConnectionTimeout()));    if (myinfo.getProperty("socketTimeout") != null)     info.put("socketTimeout",myinfo.getProperty("socketTimeout")); else     info.put("socketTimeout",String.valueOf(context.getConnectionReadTimeout()));  }  if (myinfo != null && myinfo.size() > 0) {    for (    Entry<Object,Object> e : myinfo.entrySet()) {      if ("connectTimeout".equalsIgnoreCase(e.getKey().toString()) || "socketTimeout".equalsIgnoreCase(e.getKey().toString()))       continue;      info.put(e.getKey(),e.getValue());    }  }  return DriverManager.getConnection(db.getConnectionString(),info);}  }
class C{  @Ignore("TODO") @Test public void testRedundancySpecifiedNonFailoverEPFailsDetectionByUnregisterInterest() throws Exception {  createClientCache(NetworkUtils.getServerHostName(Host.getHost(0)),PORT1,PORT2,PORT3,PORT4,1,250,500);  waitConnectedServers(4);  assertEquals(1,pool.getRedundantNames().size());  assertTrue(pool.getRedundantNames().contains(SERVER4));  verifyOrderOfEndpoints();  server2.invoke(null);  unregisterInterest();  verifyDeadServers(1);  verifyRedundantServersContain(SERVER4);  verifyLiveAndRedundantServers(3,1);  verifyOrderOfEndpoints();}  }
class C{  private static boolean isToplevelClass(String fileName){  return fileName.indexOf('$') < 0;}  }
class C{  public SexecAdapterFactory(){  if (modelPackage == null) {    modelPackage=SexecPackage.eINSTANCE;  }}  }
class C{  public LibraryPlaylistsTableDataLine createDataLine(){  return new LibraryPlaylistsTableDataLine();}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample5...");  try {    int num_user=2;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    @SuppressWarnings("unused") Datacenter datacenter0=createDatacenter("Datacenter_0");    @SuppressWarnings("unused") Datacenter datacenter1=createDatacenter("Datacenter_1");    DatacenterBroker broker1=createBroker(1);    int brokerId1=broker1.getId();    DatacenterBroker broker2=createBroker(2);    int brokerId2=broker2.getId();    vmlist1=new ArrayList<Vm>();    vmlist2=new ArrayList<Vm>();    int vmid=0;    int mips=250;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId1,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    Vm vm2=new Vm(vmid,brokerId2,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist1.add(vm1);    vmlist2.add(vm2);    broker1.submitVmList(vmlist1);    broker2.submitVmList(vmlist2);    cloudletList1=new ArrayList<Cloudlet>();    cloudletList2=new ArrayList<Cloudlet>();    int id=0;    long length=40000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId1);    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet2.setUserId(brokerId2);    cloudletList1.add(cloudlet1);    cloudletList2.add(cloudlet2);    broker1.submitCloudletList(cloudletList1);    broker2.submitCloudletList(cloudletList2);    CloudSim.startSimulation();    List<Cloudlet> newList1=broker1.getCloudletReceivedList();    List<Cloudlet> newList2=broker2.getCloudletReceivedList();    CloudSim.stopSimulation();    Log.print("=============> User " + brokerId1 + "    ");    printCloudletList(newList1);    Log.print("=============> User " + brokerId2 + "    ");    printCloudletList(newList2);    Log.printLine("CloudSimExample5 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  private void readObject(){}  }
class C{  public static void animate1(RecyclerView.ViewHolder holder,boolean goesDown){  int holderHeight=holder.itemView.getHeight();  holder.itemView.setPivotY(goesDown == true ? 0 : holderHeight);  AnimatorSet animatorSet=new AnimatorSet();  ObjectAnimator animatorTranslateY=ObjectAnimator.ofFloat(holder.itemView,"translationY",goesDown == true ? 300 : -300,0);  ObjectAnimator scaleY=ObjectAnimator.ofFloat(holder.itemView,"scaleY",1f,0.4f,1f);  ObjectAnimator scaleX=ObjectAnimator.ofFloat(holder.itemView,"scaleX",1f,1.3f,1f);  animatorTranslateY.setInterpolator(new AccelerateInterpolator());  scaleY.setInterpolator(new OvershootInterpolator());  scaleX.setInterpolator(new OvershootInterpolator());  animatorSet.play(animatorTranslateY).before(scaleY).before(scaleX);  animatorSet.setDuration(700);  animatorSet.start();}  }
class C{  public PeriodAxis(String label,RegularTimePeriod first,RegularTimePeriod last,TimeZone timeZone,Locale locale){  super(label,null);  ParamChecks.nullNotPermitted(timeZone,"timeZone");  ParamChecks.nullNotPermitted(locale,"locale");  this.first=first;  this.last=last;  this.timeZone=timeZone;  this.locale=locale;  this.calendar=Calendar.getInstance(timeZone,locale);  this.first.peg(this.calendar);  this.last.peg(this.calendar);  this.autoRangeTimePeriodClass=first.getClass();  this.majorTickTimePeriodClass=first.getClass();  this.minorTickMarksVisible=false;  this.minorTickTimePeriodClass=RegularTimePeriod.downsize(this.majorTickTimePeriodClass);  setAutoRange(true);  this.labelInfo=new PeriodAxisLabelInfo[2];  SimpleDateFormat df0=new SimpleDateFormat("MMM",locale);  df0.setTimeZone(timeZone);  this.labelInfo[0]=new PeriodAxisLabelInfo(Month.class,df0);  SimpleDateFormat df1=new SimpleDateFormat("yyyy",locale);  df1.setTimeZone(timeZone);  this.labelInfo[1]=new PeriodAxisLabelInfo(Year.class,df1);}  }
class C{  private Object translateIntoMyData(final Object msg){  return GameDataUtils.translateIntoOtherGameData(msg,m_data);}  }
class C{  protected void generateInnerAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  if (srcState.id != null) {    w.simpleElement(Namespaces.atomNs,"id",null,srcState.id);  }  if (srcState.updated != null) {    w.simpleElement(Namespaces.atomNs,"updated",null,srcState.updated.toString());  }  w.startRepeatingElement();  for (  Category cat : srcState.categories) {    cat.generateAtom(w);  }  w.endRepeatingElement();  if (srcState.title != null) {    srcState.title.generateAtom(w,"title");  }  if (srcState.subtitle != null) {    srcState.subtitle.generateAtom(w,"subtitle");  }  if (srcState.rights != null) {    srcState.rights.generateAtom(w,"rights");  }  if (srcState.icon != null) {    w.simpleElement(Namespaces.atomNs,"icon",null,srcState.icon);  }  if (srcState.logo != null) {    w.simpleElement(Namespaces.atomNs,"logo",null,srcState.logo);  }  w.startRepeatingElement();  for (  Link link : srcState.links) {    link.generateAtom(w,extProfile);  }  w.endRepeatingElement();  w.startRepeatingElement();  for (  Person author : srcState.authors) {    author.generateAtom(extProfile,w,"author");  }  w.endRepeatingElement();  w.startRepeatingElement();  for (  Person contributor : srcState.contributors) {    contributor.generateAtom(extProfile,w,"contributor");  }  w.endRepeatingElement();  if (srcState.generator != null) {    srcState.generator.generateAtom(w);  }}  }
class C{  private ScanState switchState(ScanState desired,String forOperation){  return switchState(desired,allowedStates.get(forOperation));}  }
class C{  public optgroup addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public boolean isSpread(){  return spread;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.GENERATE___GENERATE_1:    return getGenerate_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public <B>Set<B> bind(Function<? super A,Set<B>> fn){  Set<B> result=empty();  for (  A a : this) {    result=result.plus(fn.apply(a));  }  return result;}  }
class C{  public boolean isHiddenFromSelectors(){  return true;}  }
class C{  public String repository(){  return this.repository;}  }
class C{  private synchronized void addLookupToCache(String lookupName,LookupQualifier qualifier,Lookup lookup){  Hashtable<String,Lookup> lookupsByQualifier=_lookups.get(lookupName);  if (null == lookupsByQualifier) {    lookupsByQualifier=new Hashtable<String,Lookup>();    _lookups.put(lookupName,lookupsByQualifier);  }  lookupsByQualifier.put(qualifier.toString(),lookup);}  }
class C{  public static ReilInstruction createLdm(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize thirdSize,final String thirdValue){  checkBinaryOperandSizeTypes(firstSize,thirdSize);  return createBinaryInstruction(ReilHelpers.OPCODE_LDM,new CAddress(offset),firstSize,firstValue,thirdSize,thirdValue);}  }
class C{  public static AnimatablePaintValue createURIColorPaintValue(AnimationTarget target,String uri,float r,float g,float b){  AnimatablePaintValue v=new AnimatablePaintValue(target,r,g,b);  v.uri=uri;  v.paintType=PAINT_URI_COLOR;  return v;}  }
class C{  public static void write(double d,int postDecimalDigits){  if (d != d) {    write("NaN");    return;  }  if (d > Integer.MAX_VALUE) {    write("TooBig");    return;  }  if (d < -Integer.MAX_VALUE) {    write("TooSmall");    return;  }  boolean negative=(d < 0.0);  d=negative ? (-d) : d;  int ones=(int)d;  int multiplier=1;  while (postDecimalDigits-- > 0)   multiplier*=10;  int remainder=(int)(multiplier * (d - ones));  if (remainder < 0)   remainder=0;  if (negative)   write('-');  write(ones);  write('.');  while (multiplier > 1) {    multiplier/=10;    write(remainder / multiplier);    remainder%=multiplier;  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassTextPaneUI();}  }
class C{  public SAXException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  @Override public void execute(JsonApiDocument jsonApiDocument,Set<PersistentResource> resources,Optional<MultivaluedMap<String,String>> queryParams){  if (isPresent(queryParams,INCLUDE)) {    resources.forEach(null);  }}  }
class C{  private static String long3Str(long value){  if (value < 10) {    return "00" + value;  } else   if (value < 100) {    return "0" + value;  } else {    return Long.toString(value);  }}  }
class C{  public Collection<IInterval> gather(IInterval target){  checkInterval(target);  return gather0(target);}  }
class C{  private void emit(ProfileMeasurement measurement,Tuple anchor){  collector.emit(anchor,new Values(measurement,profileConfig));  collector.ack(anchor);}  }
class C{  AdminResponse sendAndWait(AdminRequest msg){  if (unreachable) {    throw new OperationCancelledException(LocalizedStrings.RemoteGemFireVM_0_IS_UNREACHABLE_IT_HAS_EITHER_LEFT_OR_CRASHED.toLocalizedString(this.name));  }  if (this.id == null) {    throw new NullPointerException(LocalizedStrings.RemoteGemFireVM_THE_ID_IF_THIS_REMOTEGEMFIREVM_IS_NULL.toLocalizedString());  }  msg.setRecipient(this.id);  msg.setModifiedClasspath(inspectionClasspath);  return agent.sendAndWait(msg);}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public SearchControls(){  searchScope=ONELEVEL_SCOPE;  timeLimit=0;  countLimit=0;  derefLink=false;  returnObj=false;  attributesToReturn=null;}  }
class C{  public Query(String id,String type){  super(id,type);}  }
class C{  public void selfAddWAAt(double w,double[] a){  if (rows != a.length) {    throw new IllegalArgumentException("cannot add a " + a.length + 'x'+ a.length+ " matrix to a "+ rows+ 'x'+ columns+ " matrix");  }  for (int i=0; i < rows; ++i) {    int indexU=i * (columns + 1);    int indexL=indexU;    double factor=w * a[i];    data[indexU]+=factor * a[i];    for (int j=i + 1; j < columns; ++j) {      ++indexU;      indexL+=columns;      data[indexU]+=factor * a[j];      data[indexL]=data[indexU];    }  }}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){  if (controller instanceof MainController) {    Raptor.getInstance().getPreferences().setValue(getConnector().getShortName() + "-" + PreferenceKeys.MAIN_TAB_QUADRANT,newQuadrant);  } else   if (controller instanceof PersonController) {    Raptor.getInstance().getPreferences().setValue(getConnector().getShortName() + "-" + PreferenceKeys.PERSON_TAB_QUADRANT,newQuadrant);  } else   if (controller instanceof BughousePartnerController) {    Raptor.getInstance().getPreferences().setValue(getConnector().getShortName() + "-" + PreferenceKeys.PARTNER_TELL_TAB_QUADRANT,newQuadrant);  } else   if (controller instanceof ChannelController) {    Raptor.getInstance().getPreferences().setValue(getConnector().getShortName() + "-" + PreferenceKeys.PERSON_TAB_QUADRANT,newQuadrant);  } else   if (controller instanceof RegExController) {    Raptor.getInstance().getPreferences().setValue(getConnector().getShortName() + "-" + PreferenceKeys.REGEX_TAB_QUADRANT,newQuadrant);  } else   if (controller instanceof GameChatController) {    Raptor.getInstance().getPreferences().setValue(getConnector().getShortName() + "-" + PreferenceKeys.GAME_CHAT_TAB_QUADRANT,newQuadrant);  }}  }
class C{  public void addClick(HttpServletRequest request){  setActualClick(getActualClick() + 1);  if (getActualClick() > getMaxClick())   setIsActive(true);  save();}  }
class C{  public void actualizarArchivoExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository service=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionArchivosBI gestionArchivosBI=service.lookupGestionArchivosBI();  ArchivoForm formulario=(ArchivoForm)form;  ActionErrors errors=validateForm(formulario,request);  if (errors.size() > 0) {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mappings.findForward("edicion_archivo"));  } else {    ArchivoVO archivoVO=new ArchivoVO();    formulario.populate(archivoVO);    gestionArchivosBI.actualizarArchivo(archivoVO);    setReturnActionFordward(request,mappings.findForward("initial"));  }}  }
class C{  public void insertElementAt(Node value,int at){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null == m_map) {    m_map=new Node[m_blocksize];    m_mapSize=m_blocksize;  } else   if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Node newMap[]=new Node[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  private static void matchPerfCounters(OutputAnalyzer output) throws Exception {  int matchedCount=output.shouldMatchByLineFrom(PERF_COUNTER_REGEX,PERF_COUNTER_REGEX);  assertGreaterThan(matchedCount,0,"Found no lines matching pattern: " + PERF_COUNTER_REGEX);}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public void updateDouble(int columnIndex,double x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateDouble(columnIndex,x);}  }
class C{  public void FeatureInit(String str,Map cpStr2Int,Map lbStr2Int){  StringTokenizer strTok=new StringTokenizer(str," \t\r\n");  int len=strTok.countTokens();  if (len != 4) {    return;  }  String labelStr=strTok.nextToken();  String cpStr=strTok.nextToken();  int idx=Integer.parseInt(strTok.nextToken());  float val=1;  double wgt=Double.parseDouble(strTok.nextToken());  Integer labelInt=(Integer)lbStr2Int.get(labelStr);  Integer cpInt=(Integer)cpStr2Int.get(cpStr);  FeatureInit(labelInt.intValue(),cpInt.intValue());  this.idx=idx;  this.val=val;  this.wgt=wgt;}  }
class C{  public void testHeartRanking() throws IOException {  Query q=new TermQuery(new Term(FIELD_BODY,"heart"));  for (  SimilarityBase sim : sims) {    searcher.setSimilarity(sim);    TopDocs topDocs=searcher.search(q,1000);    assertEquals("Failed: " + sim.toString(),"2",reader.document(topDocs.scoreDocs[0].doc).get(FIELD_ID));  }}  }
class C{  public static byte[] decrypt(CipherTextIvMac civ,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(civ.getIv(),civ.getCipherText());  byte[] computedMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  if (constantTimeEq(computedMac,civ.getMac())) {    Cipher aesCipherForDecryption=Cipher.getInstance(CIPHER_TRANSFORMATION);    aesCipherForDecryption.init(Cipher.DECRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(civ.getIv()));    return aesCipherForDecryption.doFinal(civ.getCipherText());  } else {    throw new GeneralSecurityException("MAC stored in civ does not match computed MAC.");  }}  }
class C{  Cursor find(Session session,long first,long last,boolean multiVersion){  PageData root=getPage(rootPageId,0);  return root.find(session,first,last,multiVersion);}  }
class C{  public void testSetPropertiesOnPartiallyMissingDirectory() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> props=properties("owner","group","0555");  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,paths(DIR),null);  igfsSecondaryFileSystem.update(SUBDIR,props);  assertEquals(props,igfs.info(SUBDIR).properties());}  }
class C{  public void showEditListItemNameDialog(String itemName,String itemId){  DialogFragment dialog=EditListItemNameDialogFragment.newInstance(mShoppingList,itemName,itemId,mListId,mEncodedEmail,mSharedWithUsers);  dialog.show(this.getFragmentManager(),"EditListItemNameDialogFragment");}  }
class C{  protected void selectDrawItem(int position){}  }
class C{  public static boolean isEqual(Constituent c,FeatureExtractor fex_1,FeatureExtractor fex_2) throws Exception {  Set<Feature> feats_1=fex_1.getFeatures(c);  Set<Feature> feats_2=fex_2.getFeatures(c);  return isEqual(feats_1,feats_2);}  }
class C{  public static Sampler CLAMP_LINEAR(RenderScript rs){  if (rs.mSampler_CLAMP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.CLAMP);    b.setWrapT(Value.CLAMP);    rs.mSampler_CLAMP_LINEAR=b.create();  }  return rs.mSampler_CLAMP_LINEAR;}  }
class C{  int add(int key){  for (int slot=key & mask; ; slot=(slot + 1) & mask) {    if (freqs[slot] == 0) {      keys[slot]=key;      return freqs[slot]=1;    } else     if (keys[slot] == key) {      return ++freqs[slot];    }  }}  }
class C{  private void checkExceptionChain(SQLException root,List<SQLException> expectedExceptions){  int count=0;  SQLException nextException=root;  while ((nextException=nextException.getNextException()) != null) {    count++;    if (count <= expectedExceptions.size()) {      assertSame("Unexpected Exception for count " + count,expectedExceptions.get(count - 1),nextException);    } else {      break;    }  }  assertEquals("Unexpected number of exceptions returned",expectedExceptions.size(),count);}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public GF2Polynomial increase(){  GF2Polynomial result=new GF2Polynomial(this);  result.increaseThis();  return result;}  }
class C{  boolean isPainting(){  Container component=this;  while (component != null) {    if (component instanceof JComponent && ((JComponent)component).getFlag(ANCESTOR_USING_BUFFER)) {      return true;    }    component=component.getParent();  }  return false;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="mc";  String parameter="2.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static byte[] copyOfRange(byte[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      byte[] copy=new byte[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  private int invokeDebugger(String[] args){  String[] newArgs=new String[args.length + 1];  int current=0;  String phonyDir=System.getProperty("java.home") + File.separator + "phony";  newArgs[current++]="-Djava.class.path=" + phonyDir;  newArgs[current++]="sun.applet.Main";  for (int i=0; i < args.length; i++) {    if (!("-debug".equals(args[i]))) {      newArgs[current++]=args[i];    }  }  try {    Class c=Class.forName("com.sun.tools.example.debug.tty.TTY",true,ClassLoader.getSystemClassLoader());    Method m=c.getDeclaredMethod("main",new Class[]{String[].class});    m.invoke(null,new Object[]{newArgs});  } catch (  ClassNotFoundException cnfe) {    System.err.println(lookup("main.debug.cantfinddebug"));    return 1;  }catch (  NoSuchMethodException nsme) {    System.err.println(lookup("main.debug.cantfindmain"));    return 1;  }catch (  InvocationTargetException ite) {    System.err.println(lookup("main.debug.exceptionindebug"));    return 1;  }catch (  IllegalAccessException iae) {    System.err.println(lookup("main.debug.cantaccess"));    return 1;  }  return 0;}  }
class C{  public void test_8_3_2() throws Exception {  if (!store.isQuads())   return;  new TestHelper("named-graphs-8-3-1","named-graphs-8-3-1.rq","named-graphs-8-3-1.trig","named-graphs-8-3-1.srx").runTest();}  }
class C{  private LazyStyle(String prefix){  if (prefix == null) {    throw new IllegalArgumentException("The prefix must not be null");  }  this.prefix=prefix;  String temp=prefix;  if (temp.endsWith("cellRenderer\"") || temp.endsWith("renderer\"") || temp.endsWith("listRenderer\"")) {    temp=temp.substring(temp.lastIndexOf(":\"") + 1);  }  List<String> sparts=split(temp);  parts=new Part[sparts.size()];  for (int i=0; i < parts.length; i++) {    parts[i]=new Part(sparts.get(i));    if (parts[i].named) {      simple=false;    }  }}  }
class C{  @Override public RangeQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public static WebDialog create(String dialogTitle,String htmlFileName,int accentColor,String positiveText,DialogInterface.OnClickListener positiveListener,String neutralText,DialogInterface.OnClickListener neutralListener){  WebDialog dialog=new WebDialog();  Bundle args=new Bundle();  args.putString("dialogTitle",dialogTitle);  args.putString("htmlFileName",htmlFileName);  args.putInt("accentColor",accentColor);  args.putString("positiveText",positiveText);  dialog.setPositiveClickCallback(positiveListener);  args.putString("neutralText",neutralText);  dialog.setNeutralClickCallback(neutralListener);  dialog.setArguments(args);  return dialog;}  }
class C{  private void emitDeserializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childInVarIterator=childInVar + "_iterator";  String childOutVar=outVar + "_";  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && ").append(inVar).append(".isNull() == null) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  for (int ").append(childInVarIterator).append(" = 0; ").append(childInVarIterator).append(" < ").append(inVar).append(".isArray().size(); ").append(childInVarIterator).append("++) {\n");    builder.append(i).append("    JSONValue ").append(childInVar).append(" = ").append(inVar).append(".isArray().get(").append(childInVarIterator).append(");\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".add(").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    String entryVar="key" + depth;    String entriesVar="keySet" + depth;    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && ").append(inVar).append(".isNull() == null) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  java.util.Set<String> ").append(entriesVar).append(" = ").append(inVar).append(".isObject().keySet();\n");    builder.append(i).append("  for (String ").append(entryVar).append(" : ").append(entriesVar).append(") {\n");    builder.append(i).append("    JSONValue ").append(childInVar).append(" = ").append(inVar).append(".isObject().get(").append(entryVar).append(");\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".put(").append(entryVar).append(", ").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (rawClass.isEnum()) {    String primitiveName=rawClass.getCanonicalName();    builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(primitiveName).append(".valueOf(").append(inVar).append(".isString().stringValue());\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    String className=getImplName(rawClass,false);    builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(getImplNameForDto(rawClass)).append(".fromJsonObject(").append(inVar).append(");\n");  } else   if (rawClass.equals(String.class)) {    String primitiveName=rawClass.getSimpleName();    builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isString() != null ? ").append(inVar).append(".isString().stringValue() : null;\n");  } else   if (isNumber(rawClass)) {    String primitiveName=rawClass.getSimpleName();    String typeCast=rawClass.equals(double.class) || rawClass.equals(Double.class) ? "" : "(" + getPrimitiveName(rawClass) + ")";    if (rawClass.isPrimitive()) {      builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(typeCast).append(inVar).append(".isNumber().doubleValue();\n");    } else {      if (isInteger(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).intValue() : null;\n");      } else       if (isFloat(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).floatValue() : null;\n");      } else       if (isLong(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).longValue() : null;\n");      } else       if (isDouble(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).doubleValue() : null;\n");      }    }  } else   if (isBoolean(rawClass)) {    String primitiveName=rawClass.getSimpleName();    if (rawClass.isPrimitive()) {      builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isBoolean().booleanValue();\n");    } else {      builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isBoolean() != null ? ").append(inVar).append(".isBoolean().booleanValue() : null;\n");    }  } else   if (isAny(rawClass)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = ");    appendCopyJsonExpression(inVar,builder).append(";\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      String className=getImplName(rawClass,false);      builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(dtoImplementation.getCanonicalName()).append(".fromJsonObject(").append(inVar).append(");\n");    } else {      throw new IllegalArgumentException("Unable to generate client implementation for DTO interface " + getDtoInterface().getCanonicalName() + ". Type "+ rawClass+ " is not allowed to use in DTO interface.");    }  }}  }
class C{  @Override public ContentValues toContentValues(LeagueRound round,ElifutDataStore service){  return ContentValuesBuilder.create().put("round_number",round.roundNumber()).put("matches",TextUtils.join(",",Lists.transform(round.matches(),null))).build();}  }
class C{  public static _JobActionEnum fromString(final String value) throws SOAPSerializationException {  return (_JobActionEnum)Enumeration.fromString(value,_JobActionEnum.VALUES_TO_INSTANCES);}  }
class C{  public void clear(){  freeSpace.clear();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public HeadPhaseBuilder<S> findFirst(RError.Message message,Object... messageArgs){  pipelineBuilder().appendFindFirst(null,elementClass,null,message,messageArgs);  return new HeadPhaseBuilder<>(pipelineBuilder());}  }
class C{  void registerLocalSymbol(String sourceFile,String fullLocalName,String requiredNamespace,String localName){  valueRewrite.put(sourceFile,fullLocalName,localName);  typeRewrite.put(sourceFile,fullLocalName,localName);  typeRewrite.put(sourceFile,requiredNamespace,localName);}  }
class C{  private List<ExternalEvent> readEvents(int nrof){  if (allEventsRead) {    return new ArrayList<ExternalEvent>(0);  }  List<ExternalEvent> events=reader.readEvents(nrof);  if (nrof > 0 && events.size() == 0) {    reader.close();    allEventsRead=true;  }  return events;}  }
class C{  public static void addSaslMechs(Collection<String> mechs){  for (  String mech : mechs) {    addSaslMech(mech);  }}  }
class C{  @DSSource({DSSourceKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.176 -0400",hash_original_method="AC2448C633688F1D1E3E7E73CF19AB88",hash_generated_method="632C881B3A7ABCF55BF15FD73DC82D54") public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  private void close(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException e) {      log("Failed closing [resource=" + closeable + ", message="+ e.getLocalizedMessage()+ ']',Project.MSG_WARN);    }  }}  }
class C{  @SuppressWarnings("UnusedDeclaration") @Beta(Beta.Feature.Sandbox) public static void disableSandbox(){  Fabric.getLogger().i(Digits.TAG,"Sandbox is disabled");  getInstance().getSandboxConfig().disable();  getInstance().getApiClientManager().createNewClient();}  }
class C{  protected Population truncate(Population offspring,int size){  Population survivors=new Population();  Iterator<Solution> iterator=offspring.iterator();  while (iterator.hasNext()) {    Solution solution=iterator.next();    double fitness=(Double)solution.getAttribute(FitnessEvaluator.FITNESS_ATTRIBUTE);    if (fitness < 1.0) {      survivors.add(solution);      iterator.remove();    }  }  if (survivors.size() < size) {    offspring.sort(fitnessComparator);    while (survivors.size() < size) {      survivors.add(offspring.get(0));      offspring.remove(0);    }  } else   if (survivors.size() > size) {    MutableDistanceMap map=new MutableDistanceMap(computeDistanceMatrix(survivors));    while (survivors.size() > size) {      int index=map.findMostCrowdedPoint();      map.removePoint(index);      survivors.remove(index);    }  }  return survivors;}  }
class C{  public List discover(String url,HttpFetcher httpFetcher) throws DiscoveryException {  return discover(url,_maxRedirects,httpFetcher);}  }
class C{  public void removeSFSEntryForReplicaReplicationGroup(StorageSystem system,CIMObjectPath replicationSvc,String sourceReplicationGroupName){  List<String> sfsEntries=getEMCSFSEntries(system,replicationSvc);  String groupSynchronizedAspectLabel=formatSessionLabelForFabrication(system.getSerialNumber(),sourceReplicationGroupName);  List<String> removeEntryList=new ArrayList<String>();  if (sfsEntries != null && !sfsEntries.isEmpty()) {    for (    String entry : sfsEntries) {      if (entry.contains(groupSynchronizedAspectLabel)) {        removeEntryList.add(entry);      }    }  }  if (removeEntryList.isEmpty()) {    _log.info(String.format("The expected SFS entry %s is not found for the source group %s",groupSynchronizedAspectLabel,sourceReplicationGroupName));    return;  }  try {    String[] removeEntries=new String[removeEntryList.size()];    removeEntries=removeEntryList.toArray(removeEntries);    CIMArgument[] inArgs=new CIMArgument[]{_cimArgument.stringArray("SFSEntries",removeEntries)};    CIMArgument[] outArgs=new CIMArgument[5];    invokeMethod(system,replicationSvc,SmisConstants.EMC_REMOVE_SFSENTRIES,inArgs,outArgs);  } catch (  WBEMException e) {    _log.error("EMCRemoveSFSEntries -- WBEMException: ",e);  }}  }
class C{  @Override public boolean pinchOut(Selector obj,int percent,int steps) throws UiObjectNotFoundException, NotImplementedException {  return pinchOut(device.findObject(obj.toUiSelector()),percent,steps);}  }
class C{  protected void uninvert(final LeafReader reader,Bits liveDocs,final BytesRef termPrefix) throws IOException {  final FieldInfo info=reader.getFieldInfos().fieldInfo(field);  if (checkForDocValues && info != null && info.getDocValuesType() != DocValuesType.NONE) {    throw new IllegalStateException("Type mismatch: " + field + " was indexed as "+ info.getDocValuesType());  }  final long startTime=System.nanoTime();  prefix=termPrefix == null ? null : BytesRef.deepCopyOf(termPrefix);  final int maxDoc=reader.maxDoc();  final int[] index=new int[maxDoc];  final int[] lastTerm=new int[maxDoc];  final byte[][] bytes=new byte[maxDoc][];  final Terms terms=reader.terms(field);  if (terms == null) {    return;  }  final TermsEnum te=terms.iterator();  final BytesRef seekStart=termPrefix != null ? termPrefix : new BytesRef();  if (te.seekCeil(seekStart) == TermsEnum.SeekStatus.END) {    return;  }  final List<BytesRef> indexedTerms=new ArrayList<>();  final PagedBytes indexedTermsBytes=new PagedBytes(15);  byte[] tempArr=new byte[12];  int termNum=0;  postingsEnum=null;  for (; ; ) {    final BytesRef t=te.term();    if (t == null || (termPrefix != null && !StringHelper.startsWith(t,termPrefix))) {      break;    }    visitTerm(te,termNum);    if ((termNum & indexIntervalMask) == 0) {      sizeOfIndexedStrings+=t.length;      BytesRef indexedTerm=new BytesRef();      indexedTermsBytes.copy(t,indexedTerm);      indexedTerms.add(indexedTerm);    }    final int df=te.docFreq();    if (df <= maxTermDocFreq) {      postingsEnum=te.postings(postingsEnum,PostingsEnum.NONE);      int actualDF=0;      for (; ; ) {        int doc=postingsEnum.nextDoc();        if (doc == DocIdSetIterator.NO_MORE_DOCS) {          break;        }        actualDF++;        termInstances++;        int delta=termNum - lastTerm[doc] + TNUM_OFFSET;        lastTerm[doc]=termNum;        int val=index[doc];        if ((val & 0xff) == 1) {          int pos=val >>> 8;          int ilen=vIntSize(delta);          byte[] arr=bytes[doc];          int newend=pos + ilen;          if (newend > arr.length) {            int newLen=(newend + 3) & 0xfffffffc;            byte[] newarr=new byte[newLen];            System.arraycopy(arr,0,newarr,0,pos);            arr=newarr;            bytes[doc]=newarr;          }          pos=writeInt(delta,arr,pos);          index[doc]=(pos << 8) | 1;        } else {          int ipos;          if (val == 0) {            ipos=0;          } else           if ((val & 0x0000ff80) == 0) {            ipos=1;          } else           if ((val & 0x00ff8000) == 0) {            ipos=2;          } else           if ((val & 0xff800000) == 0) {            ipos=3;          } else {            ipos=4;          }          int endPos=writeInt(delta,tempArr,ipos);          if (endPos <= 4) {            for (int j=ipos; j < endPos; j++) {              val|=(tempArr[j] & 0xff) << (j << 3);            }            index[doc]=val;          } else {            for (int j=0; j < ipos; j++) {              tempArr[j]=(byte)val;              val>>>=8;            }            index[doc]=(endPos << 8) | 1;            bytes[doc]=tempArr;            tempArr=new byte[12];          }        }      }      setActualDocFreq(termNum,actualDF);    }    termNum++;    if (te.next() == null) {      break;    }  }  numTermsInField=termNum;  long midPoint=System.nanoTime();  if (termInstances == 0) {    tnums=null;  } else {    this.index=index;    for (int pass=0; pass < 256; pass++) {      byte[] target=tnums[pass];      int pos=0;      if (target != null) {        pos=target.length;      } else {        target=new byte[4096];      }      for (int docbase=pass << 16; docbase < maxDoc; docbase+=(1 << 24)) {        int lim=Math.min(docbase + (1 << 16),maxDoc);        for (int doc=docbase; doc < lim; doc++) {          int val=index[doc];          if ((val & 0xff) == 1) {            int len=val >>> 8;            index[doc]=(pos << 8) | 1;            if ((pos & 0xff000000) != 0) {              throw new IllegalStateException("Too many values for UnInvertedField faceting on field " + field);            }            byte[] arr=bytes[doc];            bytes[doc]=null;            if (target.length <= pos + len) {              int newlen=target.length;              while (newlen <= pos + len)               newlen<<=1;              byte[] newtarget=new byte[newlen];              System.arraycopy(target,0,newtarget,0,pos);              target=newtarget;            }            System.arraycopy(arr,0,target,pos,len);            pos+=len + 1;          }        }      }      if (pos < target.length) {        byte[] newtarget=new byte[pos];        System.arraycopy(target,0,newtarget,0,pos);        target=newtarget;      }      tnums[pass]=target;      if ((pass << 16) > maxDoc)       break;    }  }  indexedTermsArray=indexedTerms.toArray(new BytesRef[indexedTerms.size()]);  long endTime=System.nanoTime();  total_time=(int)TimeUnit.MILLISECONDS.convert(endTime - startTime,TimeUnit.NANOSECONDS);  phase1_time=(int)TimeUnit.MILLISECONDS.convert(midPoint - startTime,TimeUnit.NANOSECONDS);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getDeinterlaceName(DShowDVDPlayer.getDVDForceDeinterlace());}  }
class C{  public void updateWithResult(final Result result){switch (result) {case VICTORY:    victories++;  break;case DEFEAT:defeats++;break;default :other++;break;}}  }
class C{  public TerminateReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  public OutputStream openOutputStream(Uri uri,boolean append) throws IOException {  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:{      File localFile=new File(uri.getPath());      File parent=localFile.getParentFile();      if (parent != null) {        parent.mkdirs();      }      return new FileOutputStream(localFile,append);    }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{    AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,append ? "wa" : "w");    return assetFd.createOutputStream();  }}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  @Deprecated public void registerCredentials(UserCredential authentication){  wallet.put(authentication.getURL(),authentication);}  }
class C{  public PSPIdentifierForSellerException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private List<Pair<SceneView,SceneView>> imagesWithCommonFeatures(double n,List<SceneView> imgList){  List<Pair<SceneView,SceneView>> images=new ArrayList<>();  for (int i=0; i < imgList.size(); i++) {    SceneView imgI=imgList.get(i);    for (int j=0; j < imgList.size(); j++) {      if (j > i) {        SceneView imgJ=imgList.get(j);        Collection<Feature> f=imgJ.getCommonFeatures(imgI);        if (f.size() >= n) {          images.add(new Pair<>(imgI,imgJ));        }      }    }  }  return images;}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  ClientResourceInfo(ContractInfo contract,String name,VersionInfo version,String localePrefix,ResourceHelper helper,boolean compressible,boolean supportsEL,boolean isDevStage,boolean cacheTimestamp){  super(contract,name,version,helper);  this.name=name;  this.version=version;  this.localePrefix=localePrefix;  this.helper=helper;  this.compressible=compressible;  this.supportsEL=supportsEL;  this.isDevStage=isDevStage;  this.cacheTimestamp=(!isDevStage && cacheTimestamp);  initPath(isDevStage);}  }
class C{  public void testClientTransactionTimeouts() throws Exception {  String oldRetransValue=System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);  System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"1");  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  responseCollector.waitForTimeout();  assertEquals("No timeout was produced upon expiration of a client transaction",responseCollector.receivedResponses.size(),1);  assertEquals("No timeout was produced upon expiration of a client transaction",responseCollector.receivedResponses.get(0),"timeout");  if (oldRetransValue != null)   System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,oldRetransValue); else   System.clearProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);}  }
class C{  private Object readResolve(){  listenerList=new ArrayList<WorldListener>();  if (agentNameGenerator == null) {    agentNameGenerator=new SimpleId("Agent",1);  }  for (  OdorWorldEntity entity : entityList) {    entity.postSerializationInit();  }  recomputeMaxStimulusLength();  return this;}  }
class C{  public void onPause(){  super.onPause();  if (mOpenCvCameraView != null)   mOpenCvCameraView.disableView();}  }
class C{  public static KeywordMatcher buildKeywordMatcher(Map<String,String> operatorProperties) throws PlanGenException, DataFlowException {  String keyword=OperatorBuilderUtils.getRequiredProperty(KEYWORD,operatorProperties);  String matchingTypeStr=OperatorBuilderUtils.getRequiredProperty(MATCHING_TYPE,operatorProperties);  PlanGenUtils.planGenAssert(!keyword.trim().isEmpty(),"keyword is empty");  List<Attribute> attributeList=OperatorBuilderUtils.constructAttributeList(operatorProperties);  KeywordMatchingType matchingType=KeywordMatcherBuilder.getKeywordMatchingType(matchingTypeStr);  PlanGenUtils.planGenAssert(matchingType != null,"matching type: " + matchingTypeStr + " is not valid, "+ "must be one of "+ KeywordMatcherBuilder.keywordMatchingTypeMap.keySet());  KeywordPredicate keywordPredicate=new KeywordPredicate(keyword,attributeList,DataConstants.getStandardAnalyzer(),matchingType);  KeywordMatcher keywordMatcher=new KeywordMatcher(keywordPredicate);  Integer limitInt=OperatorBuilderUtils.findLimit(operatorProperties);  if (limitInt != null) {    keywordMatcher.setLimit(limitInt);  }  Integer offsetInt=OperatorBuilderUtils.findOffset(operatorProperties);  if (offsetInt != null) {    keywordMatcher.setOffset(offsetInt);  }  return keywordMatcher;}  }
class C{  @Override public boolean supportsANSI92FullSQL(){  debugCodeCall("supportsANSI92FullSQL");  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String costHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster costSurface;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, costVal, srcVal;  float progress=0;  double largeVal=Float.MAX_VALUE - 10000000;  int[] dX=new int[]{1,1,0,-1,-1,-1,0,1};  int[] dY=new int[]{0,1,1,1,0,-1,-1,-1};  double diagDist=Math.sqrt(2);  double[] dist=new double[]{1,diagDist,1,diagDist,1,diagDist,1,diagDist};  double gridRes;  int col, row, a;  int c;  int x, y, i;  int[] backLinkDir=new int[]{32,64,128,1,2,4,8,16};  double costAccumVal, cost1, cost2, newCostVal;  boolean didSomething=false;  int loopNum=0;  boolean blnAnisotropicForce=false;  double anisotropicForceDirection=-999;  double anisotropicForceStrength=-999;  double[] azDir=new double[]{90,135,180,225,270,315,0,45};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      costHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      backLinkHeader=args[i];    } else     if (i == 4) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        blnAnisotropicForce=true;        anisotropicForceDirection=Double.parseDouble(args[i]);        if (anisotropicForceDirection >= 360) {          anisotropicForceDirection=0;        }        if (anisotropicForceDirection < 0) {          anisotropicForceDirection=0;        }      }    } else     if (i == 5) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        anisotropicForceStrength=Double.parseDouble(args[i]);        if (anisotropicForceStrength == 1 || anisotropicForceStrength == 0) {          blnAnisotropicForce=false;        } else {          blnAnisotropicForce=true;          if (anisotropicForceStrength > 100) {            anisotropicForceStrength=100;          }          if (anisotropicForceStrength < -100) {            anisotropicForceStrength=-100;          }        }      }    }  }  if ((sourceHeader == null) || (costHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (anisotropicForceDirection == -999 || anisotropicForceStrength == -999) {    if (blnAnisotropicForce) {      showFeedback("Both the Anisotropic Force Direction and " + "Anisotropic Force Strength must be set to valid " + "values to carry out this operation.");      return;    }  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    costSurface=new WhiteboxRaster(costHeader,"r");    if (costSurface.getNumberColumns() != cols || costSurface.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,largeVal);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    backLink=new WhiteboxRaster(backLinkHeader,"rw",sourceHeader,WhiteboxRaster.DataType.INTEGER,noData);    backLink.setPreferredPalette("spectrum.pal");    backLink.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    updateProgress("Calculating Cost Accumulation Surface:",0);    double[] data;    for (row=0; row < rows; row++) {      data=costSurface.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          srcVal=sourceImage.getValue(row,col);          if (srcVal > 0) {            output.setValue(row,col,0);            backLink.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    if (!blnAnisotropicForce) {      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    } else {      double dir=0;      for (c=0; c <= 7; c++) {        dir=Math.abs(azDir[c] - anisotropicForceDirection);        if (dir > 180) {          dir=360 - dir;        }        azDir[c]=1 + (180 - dir) / 180 * (anisotropicForceStrength - 1);      }      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    backLink.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    backLink.addMetadataEntry("Created on " + new Date());    sourceImage.close();    costSurface.close();    output.close();    backLink.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void save(final AbstractSQLProvider provider,final CView view) throws CouldntSaveDataException {  PostgreSQLViewSaver.checkArguments(provider,view);  final CConnection connection=provider.getConnection();  try {    PostgreSQLHelpers.beginTransaction(connection);    final int viewId=view.getConfiguration().getId();    final List<INaviViewNode> nodes=view.getGraph().getNodes();    final List<INaviEdge> edges=view.getGraph().getEdges();    PostgreSQLViewSaver.deleteNodes(connection,viewId);    PostgreSQLNodeSaver.writeNodes(provider,viewId,nodes);    PostgreSQLEdgeSaver.writeEdges(provider,edges);    PostgreSQLHelpers.endTransaction(connection);  } catch (  final SQLException exception) {    try {      PostgreSQLHelpers.rollback(connection);    } catch (    final SQLException e) {      CUtilityFunctions.logException(e);    }    throw new CouldntSaveDataException(exception);  }}  }
class C{  public Type pullType(final String expr,Environment env) throws HaskellException {  try {    String[] parts=this.pullRaw(":t " + expr).get().split(" :: ");    if (parts.length < 2) {      throw new HaskellException("ghci could not determine the type of:\n" + expr);    }    return env.buildType(parts[1].trim());  } catch (  InterruptedException|ExecutionException e) {    throw new HaskellException(e);  }}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  in[inOff]=(byte)0x80;  inOff++;  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  public void init(String modelDir){  String templateFile=modelDir + File.separator + "featuretemplate.xml";  Vector<Element> nodes=BasicContextGenerator.readFeatureNodes(templateFile);  for (int i=0; i < nodes.size(); ++i) {    Element node=nodes.get(i);    String cpType=node.getAttribute("value");    BasicContextGenerator contextGen=null;    if (cpType.equals("Conjunction")) {      contextGen=new ConjunctionContextGenerator(node);    } else     if (cpType.equals("Lexicon")) {      contextGen=new LexiconContextGenerator(node);      LexiconContextGenerator.loadVietnameseDict(modelDir + File.separator + "VNDic_UTF-8.txt");      LexiconContextGenerator.loadViLocationList(modelDir + File.separator + "vnlocations.txt");      LexiconContextGenerator.loadViPersonalNames(modelDir + File.separator + "vnpernames.txt");    } else     if (cpType.equals("Regex")) {      contextGen=new RegexContextGenerator(node);    } else     if (cpType.equals("SyllableFeature")) {      contextGen=new SyllableContextGenerator(node);    } else     if (cpType.equals("ViSyllableFeature")) {      contextGen=new VietnameseContextGenerator(node);    }    if (contextGen != null)     dataTagger.addContextGenerator(contextGen);  }  labeling=new Labeling(modelDir,dataTagger,reader,writer);}  }
class C{  public TransactionOutput(NetworkParameters params,Transaction parent,byte[] msg,int offset,boolean parseLazy,boolean parseRetain) throws ProtocolException {  super(params,msg,offset,parent,parseLazy,parseRetain,UNKNOWN_LENGTH);  parentTransaction=parent;  availableForSpending=true;}  }
class C{  private String streamInvoice(HttpServletRequest request,HttpServletResponse response){  int MIN_SIZE=2000;  int C_Invoice_ID=WebUtil.getParameterAsInt(request,"Invoice_ID");  if (C_Invoice_ID == 0) {    log.fine("No ID)");    return "No Invoice ID";  }  Properties ctx=JSPEnv.getCtx(request);  MInvoice invoice=new MInvoice(ctx,C_Invoice_ID,null);  if (invoice.getC_Invoice_ID() != C_Invoice_ID) {    log.fine("Invoice not found - ID=" + C_Invoice_ID);    return "Invoice not found";  }  HttpSession session=request.getSession(true);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu.getC_BPartner_ID() != invoice.getC_BPartner_ID()) {    log.warning("Invoice from BPartner - C_Invoice_ID=" + C_Invoice_ID + " - BP_Invoice="+ invoice.getC_BPartner_ID()+ " = BP_Web="+ wu.getC_BPartner_ID());    return "Your invoice not found";  }  String dirName=ctx.getProperty("documentDir",".");  try {    File dir=new File(dirName);    if (!dir.exists())     dir.mkdir();  } catch (  Exception ex) {    log.log(Level.SEVERE,"Could not create directory " + dirName,ex);    return "Streaming error - directory";  }  String fileName=invoice.getPDFFileName(dirName);  File file=new File(fileName);  if (file.exists() && file.isFile() && file.length() > MIN_SIZE)   log.info("Existing: " + file + " - "+ new Timestamp(file.lastModified())); else {    log.info("New: " + fileName);    file=invoice.createPDF(file);    if (file != null) {      invoice.setDatePrinted(new Timestamp(System.currentTimeMillis()));      invoice.saveEx();    }  }  if (file == null || !file.exists() || file.length() < MIN_SIZE) {    log.warning("File does not exist - " + file);    return "Streaming error - file";  }  try {    int bufferSize=2048;    int fileLength=(int)file.length();    response.setContentType("application/pdf");    response.setBufferSize(bufferSize);    response.setContentLength(fileLength);    log.fine(file.getAbsolutePath() + ", length=" + fileLength);    long time=System.currentTimeMillis();    FileInputStream in=new FileInputStream(file);    ServletOutputStream out=response.getOutputStream();    byte[] buffer=new byte[bufferSize];    double totalSize=0;    int count=0;    do {      count=in.read(buffer,0,bufferSize);      if (count > 0) {        totalSize+=count;        out.write(buffer,0,count);      }    } while (count != -1);    out.flush();    out.close();    in.close();    time=System.currentTimeMillis() - time;    double speed=(totalSize / 1024) / ((double)time / 1000);    log.fine("Length=" + totalSize + " - "+ time+ " ms - "+ speed+ " kB/sec");  } catch (  IOException ex) {    log.log(Level.SEVERE,ex.toString());    return "Streaming error";  }  return null;}  }
class C{  public synchronized short persistExt(EntityManager em,Object obj){  try {    if (em != null) {      em.persist(obj);    } else {      return 0;    }  } catch (  Exception Ex) {    return 0;  }  return 1;}  }
class C{  public void taintAll(final Collection<String> registers){  Preconditions.checkNotNull(registers,"Error: State argument can not be null");  for (  final String taintedRegister : registers) {    taint(taintedRegister);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public int[] toArray(int start,int len){  int remaining=len;  int pos=0;  int[] array=new int[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    int[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  public GamaShape(final IShape source,final Geometry geom){  this((Geometry)(geom == null ? source.getInnerGeometry().clone() : geom));  mixAttributes(source);}  }
class C{  public int processPacket(byte[] in,int inOff,int inLen,byte[] output,int outOff) throws IllegalStateException, InvalidCipherTextException, DataLengthException {  if (keyParam == null) {    throw new IllegalStateException("CCM cipher unitialized.");  }  int n=nonce.length;  int q=15 - n;  if (q < 4) {    int limitLen=1 << (8 * q);    if (inLen >= limitLen) {      throw new IllegalStateException("CCM packet too large for choice of q.");    }  }  byte[] iv=new byte[blockSize];  iv[0]=(byte)((q - 1) & 0x7);  System.arraycopy(nonce,0,iv,1,nonce.length);  BlockCipher ctrCipher=new SICBlockCipher(cipher);  ctrCipher.init(forEncryption,new ParametersWithIV(keyParam,iv));  int outputLen;  int inIndex=inOff;  int outIndex=outOff;  if (forEncryption) {    outputLen=inLen + macSize;    if (output.length < (outputLen + outOff)) {      throw new OutputLengthException("Output buffer too short.");    }    calculateMac(in,inOff,inLen,macBlock);    ctrCipher.processBlock(macBlock,0,macBlock,0);    while (inIndex < (inOff + inLen - blockSize)) {      ctrCipher.processBlock(in,inIndex,output,outIndex);      outIndex+=blockSize;      inIndex+=blockSize;    }    byte[] block=new byte[blockSize];    System.arraycopy(in,inIndex,block,0,inLen + inOff - inIndex);    ctrCipher.processBlock(block,0,block,0);    System.arraycopy(block,0,output,outIndex,inLen + inOff - inIndex);    System.arraycopy(macBlock,0,output,outOff + inLen,macSize);  } else {    if (inLen < macSize) {      throw new InvalidCipherTextException("data too short");    }    outputLen=inLen - macSize;    if (output.length < (outputLen + outOff)) {      throw new OutputLengthException("Output buffer too short.");    }    System.arraycopy(in,inOff + outputLen,macBlock,0,macSize);    ctrCipher.processBlock(macBlock,0,macBlock,0);    for (int i=macSize; i != macBlock.length; i++) {      macBlock[i]=0;    }    while (inIndex < (inOff + outputLen - blockSize)) {      ctrCipher.processBlock(in,inIndex,output,outIndex);      outIndex+=blockSize;      inIndex+=blockSize;    }    byte[] block=new byte[blockSize];    System.arraycopy(in,inIndex,block,0,outputLen - (inIndex - inOff));    ctrCipher.processBlock(block,0,block,0);    System.arraycopy(block,0,output,outIndex,outputLen - (inIndex - inOff));    byte[] calculatedMacBlock=new byte[blockSize];    calculateMac(output,outOff,outputLen,calculatedMacBlock);    if (!Arrays.constantTimeAreEqual(macBlock,calculatedMacBlock)) {      throw new InvalidCipherTextException("mac check in CCM failed");    }  }  return outputLen;}  }
class C{  @Override public void busy(long time){  getRequestBusyProbe().start();synchronized (this) {    degrade(time);    _lastBusyTime=time;    _firstSuccessTime=0;    _currentFailCount++;    _busyCountTotal++;    _state=_state.toBusy();  }}  }
class C{  public static void include(ServletRequest request,ServletResponse response,String relativePath,JspWriter out,boolean flush) throws IOException, ServletException {  if (flush && !(out instanceof BodyContent))   out.flush();  String resourcePath=getContextRelativePath(request,relativePath);  RequestDispatcher rd=request.getRequestDispatcher(resourcePath);  rd.include(request,new ServletResponseWrapperInclude(response,out));}  }
class C{  public int waitWhile(int state) throws IOException, InterruptedException {  int current;  do {    Thread.sleep(pollRate);  } while (!file.exists() || ((current=get()) == state));  return current;}  }
class C{  private boolean operatorRevenueShareIsInvalid(BigDecimal operatorRevenueShare,Collection<OrganizationRoleType> roles){  if (roles.contains(OrganizationRoleType.SUPPLIER)) {    return (operatorRevenueShare == null);  } else {    return (operatorRevenueShare != null);  }}  }
class C{  private static Unit insertGotoAfter(Chain unitChain,Unit node,Unit target){  Unit newGoto=Jimple.v().newGotoStmt(target);  unitChain.insertAfter(newGoto,node);  return newGoto;}  }
class C{  private String remainingStrings() throws IOException {  StringBuffer buffer=null;  while (true) {    Tokenizer.Token t=get();    if (!t.isString())     break;    if (buffer == null)     buffer=new StringBuffer();    buffer.append(t.value);  }  unget();  if (buffer == null)   return null;  return buffer.toString();}  }
class C{  public long version(){  return this.version;}  }
class C{  protected static boolean is_id_start(char c){  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c == '_');}  }
class C{  public int optInt(String key,int defaultValue){  try {    return getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void firePopupMenuCanceled(){  Object[] listeners=listenerList.getListenerList();  PopupMenuEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == PopupMenuListener.class) {      if (e == null)       e=new PopupMenuEvent(this);      ((PopupMenuListener)listeners[i + 1]).popupMenuCanceled(e);    }  }}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public ConfigProperties(){  super();}  }
class C{  @LargeTest public void testFrameOverlayVideoItem() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "H263_profile0_176x144_10fps_256kbps_0_25.3gp";  final String overlayFile1=INPUT_FILE_PATH + "IMG_176x144_Overlay1.png";  final String overlayFile2=INPUT_FILE_PATH + "IMG_176x144_Overlay2.png";  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem1);  final Bitmap mBitmap1=mVideoEditorHelper.getBitmap(overlayFile1,176,144);  final OverlayFrame overlayFrame1=mVideoEditorHelper.createOverlay(mediaVideoItem1,"overlayId1",mBitmap1,5000,5000);  mediaVideoItem1.addOverlay(overlayFrame1);  assertEquals("Overlay : Media Item",mediaVideoItem1,overlayFrame1.getMediaItem());  assertTrue("Overlay Id",overlayFrame1.getId().equals("overlayId1"));  assertEquals("Overlay Bitmap",mBitmap1,overlayFrame1.getBitmap());  assertEquals("Overlay Start Time",5000,overlayFrame1.getStartTime());  assertEquals("Overlay Duration",5000,overlayFrame1.getDuration());  Bitmap upddateBmp=mVideoEditorHelper.getBitmap(overlayFile2,176,144);  overlayFrame1.setBitmap(upddateBmp);  assertEquals("Overlay Update Bitmap",upddateBmp,overlayFrame1.getBitmap());  upddateBmp.recycle();}  }
class C{  public static void printf(String format,Object... args){  out.printf(LOCALE,format,args);  out.flush();}  }
class C{  public UserSample() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, ClientProtocolException, ClientException, IOException {  super();  resource=new UserResource(client);}  }
class C{  private void removeFromStack(){  tempRemoveFromStack();  previousInStack=null;  nextInStack=null;}  }
class C{  public static synchronized KDTree generate(IPoint[] points){  if (points.length == 0) {    return null;  }  IMultiPoint others[]=new IMultiPoint[points.length];  for (int i=0; i < points.length; i++) {    if (points[i] instanceof IMultiPoint) {      others[i]=(IMultiPoint)points[i];    } else {      others[i]=new TwoDPoint(points[i].getX(),points[i].getY());    }  }  return generate(others);}  }
class C{  public ParseException(String message){  super(message);}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public boolean isCascadedSG(StorageSystem storage,CIMObjectPath path) throws WBEMException {  String policyName=Constants.NONE;  CloseableIterator<CIMObjectPath> pathItr=null;  try {    if (checkExists(storage,path,false,false) != null) {      pathItr=getReference(storage,path,SE_MEMBER_OF_COLLECTION_DMG_DMG,null);      if (!pathItr.hasNext()) {        return false;      }      while (pathItr.hasNext()) {        CIMObjectPath objPath=pathItr.next();        if (objPath != null) {          CIMProperty prop=objPath.getKey(MEMBER);          if (prop != null) {            CIMObjectPath comparePath=(CIMObjectPath)prop.getValue();            if (comparePath != null && comparePath.toString().endsWith(path.toString())) {              return false;            }          }        }      }    } else {      _log.info("Instance not found for path {}. Assuming cascaded.",path);    }  } catch (  Exception e) {    _log.info("Got exception trying to retrieve cascade status of SG.  Assuming cascaded: ",e);  } finally {    closeCIMIterator(pathItr);  }  return true;}  }
class C{  @Override public int compareTo(Fact other){  if (this.equals(other)) {    return 0;  } else   if (other == null) {    return 1;  }  if (this.triple == null) {    if (other.triple == null) {      return this.getDerivation().compareTo(other.getDerivation());    } else {      return -1;    }  } else   if (other.triple == null) {    return 1;  }  int result=this.getSubject().toString().compareTo(other.getSubject().toString());  if (result == 0) {    result=this.getPredicate().toString().compareTo(other.getPredicate().toString());    if (result == 0) {      result=this.getObject().toString().compareTo(other.getObject().toString());    }  }  return result;}  }
class C{  private void eliminateReservation(MStorage target){  if (target.getQtyReserved().signum() != 0 || target.getQtyOrdered().signum() != 0) {    int M_Locator_ID=target.getM_Locator_ID();    MStorage storage0=MStorage.get(getCtx(),M_Locator_ID,target.getM_Product_ID(),0,get_TrxName());    if (storage0 == null) {      MLocator defaultLoc=MLocator.getDefault(getCtx(),M_Locator_ID);      if (M_Locator_ID != defaultLoc.getM_Locator_ID()) {        M_Locator_ID=defaultLoc.getM_Locator_ID();        storage0=MStorage.get(getCtx(),M_Locator_ID,target.getM_Product_ID(),0,get_TrxName());      }    }    if (storage0 != null) {      BigDecimal reserved=Env.ZERO;      BigDecimal ordered=Env.ZERO;      if (target.getQtyReserved().add(storage0.getQtyReserved()).signum() >= 0)       reserved=target.getQtyReserved();      if (target.getQtyOrdered().add(storage0.getQtyOrdered()).signum() >= 0)       ordered=target.getQtyOrdered();      if (reserved.signum() != 0 || ordered.signum() != 0) {        if (MStorage.add(getCtx(),target.getM_Warehouse_ID(),target.getM_Locator_ID(),target.getM_Product_ID(),target.getM_AttributeSetInstance_ID(),target.getM_AttributeSetInstance_ID(),Env.ZERO,reserved.negate(),ordered.negate(),get_TrxName())) {          if (MStorage.add(getCtx(),storage0.getM_Warehouse_ID(),storage0.getM_Locator_ID(),storage0.getM_Product_ID(),storage0.getM_AttributeSetInstance_ID(),storage0.getM_AttributeSetInstance_ID(),Env.ZERO,reserved,ordered,get_TrxName()))           log.info("Reserved=" + reserved + ",Ordered="+ ordered); else           log.warning("Failed Storage0 Update");        } else         log.warning("Failed Target Update");      }    }  }}  }
class C{  public boolean checkSlotsAndSizesUnordered(@Nonnull IInventory inv,@Nonnull IMultiItemStacks[] filter,int[] from){  return checkSlotsAndSizesUnordered(inv,Arrays.asList(filter),from);}  }
class C{  public String equationsToString(int fractionDigits){  return equationsToString("",fractionDigits);}  }
class C{  public Model addPluginRepository(Repository pluginRepository){  requireNonNull(pluginRepository,"Required not null plugin repository");  pluginRepositories().add(pluginRepository);  if (root.hasSingleChild("pluginRepositories")) {    root.getSingleChild("pluginRepositories").appendChild(pluginRepository.asXMLElement());    pluginRepository.element=root.getLastChild();  } else {    root.insertChild(createElement("pluginRepositories",pluginRepository.asXMLElement()),beforeAnyOf("build","reporting","profiles").or(inTheEnd()));    pluginRepository.element=root.getSingleChild("pluginRepositories").getFirstChild();  }  return this;}  }
class C{  @Override public String toString(){  return "(" + first + ","+ second+ ")";}  }
class C{  private boolean init(){  return true;}  }
class C{  private void stopWaiting(){  m_finished=true;  removeListeners();  finish();}  }
class C{  public int size(){  return 5;}  }
class C{  private void copyImageHostToHost(final State current){  ServiceUtils.logInfo(this,"Start to copy image: %s from host %s to host %s",current.image,current.host,current.destinationHost.getHost());  if (current.sourceDatastore.equals(current.destinationDatastore)) {    ServiceUtils.logInfo(this,"Skip copying image to source itself");    sendStageProgressPatch(current,TaskState.TaskStage.FINISHED,null);    return;  }  if (current.host.equals(current.destinationHost.getHost())) {    invokeCopyImage(current);  } else {    invokeTransferImage(current);  }}  }
class C{  public static void main(String[] args){  SliderDemo demo=new SliderDemo(null);  demo.mainImpl();}  }
class C{  public static Boolean or(Boolean left,Boolean right){  return left || right;}  }
class C{  public boolean isClosedShape(){  return this.positions != null && this.positions.size() > 1 && this.positions.get(0).equals(this.positions.get(this.positions.size() - 1));}  }
class C{  public static void createFederatedNamespace(URI namespace,ZooKeeperClient zkc) throws InterruptedException, ZooKeeperClient.ZooKeeperConnectionException, KeeperException {  String zkSubNamespacesPath=namespace.getPath() + "/" + ZNODE_SUB_NAMESPACES;  Utils.zkCreateFullPathOptimistic(zkc,zkSubNamespacesPath,new byte[0],zkc.getDefaultACL(),CreateMode.PERSISTENT);}  }
class C{  public static boolean putAll(String key,List<?> list){  return putAll(null,key,list);}  }
class C{  public static final void drawCircleFromCenter(GL2 gl,double r,double cx,double cy,boolean points,boolean line){  double c=COS;  double s=SIN;  double t;  double x=r;  double y=0;  gl.glBegin(GL.GL_LINE_LOOP);  for (int i=0; i < N; i++) {    gl.glVertex2d(x + cx,y + cy);    t=x;    x=c * x - s * y;    y=s * t + c * y;  }  gl.glEnd();  if (points) {    x=r;    y=0;    gl.glBegin(GL.GL_POINTS);    for (int i=0; i < N; i++) {      gl.glVertex2d(x + cx,y + cy);      t=x;      x=c * x - s * y;      y=s * t + c * y;    }    gl.glEnd();  }  if (line) {    gl.glBegin(GL.GL_LINES);    gl.glVertex2d(cx,cy);    gl.glVertex2d(cx + r,cy);    gl.glEnd();  }}  }
class C{  Node[] genTrees(int depth,int ntrees){  Node[] trees=new Node[ntrees];  for (int i=0; i < ntrees; i++) {    trees[i]=new Node(null,depth);  }  return trees;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static void main(String[] args){  DertTest test=new DertTest(args);  test.runTests(args);}  }
class C{  public boolean isZero(){  return this.milliseconds == 0 && this.seconds == 0 && this.minutes == 0 && this.hours == 0 && this.days == 0 && this.months == 0 && this.years == 0;}  }
class C{  public Path runtimeOptimizer(final QueryEngine queryEngine,final Map<PathIds,EdgeSample> edgeSamples) throws Exception, NoSolutionsException {  if (queryEngine == null)   throw new IllegalArgumentException();  final int limit=joinGraph.getLimit();  if (limit <= 0)   throw new IllegalArgumentException();  final int nedges=joinGraph.getNEdges();  if (nedges <= 0)   throw new IllegalArgumentException();  if (edgeSamples == null)   throw new IllegalArgumentException();  Path[] paths=round0(queryEngine,limit,nedges);  final int nvertices=V.length;  int round=1;  int nunderflow=0;  while (paths.length > 0 && round < nvertices - 1) {    for (int i=0; i < 3; i++) {      nunderflow=resamplePaths(queryEngine,limit,round,paths,edgeSamples);      if (nunderflow == 0) {        break;      }      log.warn("Cardinality estimate underflow - resampling: round=" + round + ", npaths="+ paths.length+ ", nunderflow="+ nunderflow+ ", limit="+ limit+ "\n"+ showTable(paths,null,edgeSamples));    }    if (nunderflow > 0) {      log.warn("Continuing: some paths have cardinality underflow!");    }    paths=expand(queryEngine,limit,round++,paths,edgeSamples);  }  if (paths.length == 0) {    throw new NoSolutionsException();  }  final Path selectedPath;  if (paths.length != 1) {    log.warn("Multiple paths exist: npaths=" + paths.length + ", nunderflow="+ nunderflow+ "\n"+ showTable(paths,null,edgeSamples));    Path t=null;    for (    Path p : paths) {      if (p.edgeSample.isUnderflow()) {        continue;      }      if (t == null || p.sumEstCard < t.sumEstCard) {        t=p;      }    }    if (t == null) {      t=paths[0];    }    selectedPath=t;  } else {    selectedPath=paths[0];  }  if (log.isInfoEnabled()) {    log.info("\n*** Selected join path: " + Arrays.toString(selectedPath.getVertexIds()) + "\n"+ showPath(selectedPath,edgeSamples));  }  return selectedPath;}  }
class C{  public static AtlasCardinality createCardinality(Cardinality cardinality){  if (cardinality == Cardinality.SINGLE) {    return AtlasCardinality.SINGLE;  } else   if (cardinality == Cardinality.LIST) {    return AtlasCardinality.LIST;  }  return AtlasCardinality.SET;}  }
class C{  public boolean makeReflective(Class clazz,Class metaobject,Class metaclass) throws CannotCompileException, NotFoundException {  return makeReflective(clazz.getName(),metaobject.getName(),metaclass.getName());}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public KeyIdentifier(PublicKey pubKey) throws IOException {  DerValue algAndKey=new DerValue(pubKey.getEncoded());  if (algAndKey.tag != DerValue.tag_Sequence)   throw new IOException("PublicKey value is not a valid " + "X.509 public key");  AlgorithmId algid=AlgorithmId.parse(algAndKey.data.getDerValue());  byte[] key=algAndKey.data.getUnalignedBitString().toByteArray();  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA1");  } catch (  NoSuchAlgorithmException e3) {    throw new IOException("SHA1 not supported");  }  md.update(key);  this.octetString=md.digest();}  }
class C{  public int addBarPlot(String name,Color color,double[][] XY){  return ((Plot3DCanvas)plotCanvas).addBarPlot(name,color,XY);}  }
class C{  private void restoreIcon(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking icon " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  Resource res=unpackProto(new Resource(),buffer,dataSize);  if (DEBUG) {    Log.d(TAG,"unpacked " + res.dpi + " dpi icon");  }  Bitmap icon=BitmapFactory.decodeByteArray(res.data,0,res.data.length);  if (icon == null) {    Log.w(TAG,"failed to unpack icon for " + key.name);  }  if (VERBOSE)   Log.v(TAG,"saving restored icon as: " + key.name);  IconCache.preloadIcon(mContext,ComponentName.unflattenFromString(key.name),icon,res.dpi);}  }
class C{  public static NodeList toNodeList(Object o,NodeList defaultValue){  if (o instanceof NodeList) {    return (NodeList)o;  } else   if (o instanceof ObjectWrap) {    return toNodeList(((ObjectWrap)o).getEmbededObject(defaultValue),defaultValue);  }  return defaultValue;}  }
class C{  public CSaveCombobox(final ComboBoxModel<T> model){  super(model);  setRenderer(new InternalRenderer());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static ApexStream<String> fromFolder(String folderName,Option... opts){  LineByLineFileInputOperator fileLineInputOperator=new LineByLineFileInputOperator();  fileLineInputOperator.setDirectory(folderName);  ApexStreamImpl<String> newStream=new ApexStreamImpl<>();  return newStream.addOperator(fileLineInputOperator,null,fileLineInputOperator.output,opts);}  }
class C{  @Override public HashMap<String,Object> save(){  HashMap<String,Object> map=super.save();  map.put("PanelType",type.toString());  map.put("PanelTitle",title);  return (map);}  }
class C{  public String useORForMustContainListTipText(){  return "Use OR instead of AND for transactions/rules must contain lists.";}  }
class C{  public boolean isReference(){  return !special && (clazz == null || !clazz.isPrimitive());}  }
class C{  public SVGOMMPathElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void removeFromMemCacheLocked(String packageName,UserHandleCompat user){  HashSet<ComponentKey> forDeletion=new HashSet<ComponentKey>();  for (  ComponentKey key : mCache.keySet()) {    if (key.componentName.getPackageName().equals(packageName) && key.user.equals(user)) {      forDeletion.add(key);    }  }  for (  ComponentKey condemned : forDeletion) {    mCache.remove(condemned);  }}  }
class C{  public static void movePosition(final char[] buf,int off,int end,Position pos){  int lineNumber=pos.lineNumber;  int colStart=off - pos.columnNumber;  while (off != end) {switch (buf[off++]) {case '\n':      lineNumber++;    colStart=off;  break;case '\r':if (off != end && buf[off] == '\n') off+=1;lineNumber++;colStart=off;break;}}pos.lineNumber=lineNumber;pos.columnNumber=off - colStart;}  }
class C{  public static void registerApp(int application,String appName) throws AppIDException {  if ((application & APP_ID_MASK) != application) {    throw new InvalidAppIDValueException(application);  }  String oldApp=appIdMap.putIfAbsent(application,appName);  if (oldApp != null && !oldApp.equals(appName)) {    throw new AppIDInUseException(application,oldApp,appName);  }}  }
class C{  protected void resetAttribute(){}  }
class C{  public void stop(){  if (mRunning.compareAndSet(true,false)) {    mTargetDataLine.stop();    mTargetDataLine.close();  }}  }
class C{  public StatisticsTypeImpl(String name,String description,StatisticDescriptor[] stats,boolean wrapsSharedClass){  if (name == null) {    throw new NullPointerException(LocalizedStrings.StatisticsTypeImpl_CANNOT_HAVE_A_NULL_STATISTICS_TYPE_NAME.toLocalizedString());  }  if (stats == null) {    throw new NullPointerException(LocalizedStrings.StatisticsTypeImpl_CANNOT_HAVE_A_NULL_STATISTIC_DESCRIPTORS.toLocalizedString());  }  if (stats.length > StatisticsTypeFactory.MAX_DESCRIPTORS_PER_TYPE) {    throw new IllegalArgumentException(LocalizedStrings.StatisticsTypeImpl_THE_REQUESTED_DESCRIPTOR_COUNT_0_EXCEEDS_THE_MAXIMUM_WHICH_IS_1.toLocalizedString(new Object[]{Integer.valueOf(stats.length),Integer.valueOf(StatisticsTypeFactory.MAX_DESCRIPTORS_PER_TYPE)}));  }  this.name=name;  this.description=description;  this.stats=stats;  this.statsMap=new HashMap(stats.length * 2);  int intCount=0;  int longCount=0;  int doubleCount=0;  for (int i=0; i < stats.length; i++) {    StatisticDescriptorImpl sd=(StatisticDescriptorImpl)stats[i];    if (sd.getTypeCode() == StatisticDescriptorImpl.INT) {      if (!wrapsSharedClass) {        sd.setId(intCount);      }      intCount++;    } else     if (sd.getTypeCode() == StatisticDescriptorImpl.LONG) {      if (!wrapsSharedClass) {        sd.setId(longCount);      }      longCount++;    } else     if (sd.getTypeCode() == StatisticDescriptorImpl.DOUBLE) {      if (!wrapsSharedClass) {        sd.setId(doubleCount);      }      doubleCount++;    }    Object previousValue=statsMap.put(stats[i].getName(),sd);    if (previousValue != null) {      throw new IllegalArgumentException(LocalizedStrings.StatisticsTypeImpl_DUPLICATE_STATISTICDESCRIPTOR_NAMED_0.toLocalizedString(stats[i].getName()));    }  }  this.intStatCount=intCount;  this.longStatCount=longCount;  this.doubleStatCount=doubleCount;}  }
class C{  public void flattenModule(LogicalPlan parentDAG,Configuration conf){  if (flattened) {    return;  }  module.populateDAG(dag,conf);  for (  ModuleMeta subModuleMeta : dag.getAllModules()) {    subModuleMeta.setParent(this);    subModuleMeta.flattenModule(dag,conf);  }  dag.applyStreamLinks();  parentDAG.addDAGToCurrentDAG(this);  flattened=true;}  }
class C{  public int varLimit(){  long vset;  int result;  scan: {    for (int i=(x.length / 2) * 2; i >= 0; i-=2) {      if (i == x.length)       continue;      vset=x[i];      if (i + 1 < x.length) {        vset|=x[i + 1];      }      if (vset != 0) {        result=(i / 2 + 1) * VBITS;        break scan;      }    }    vset=this.vset;    vset|=this.uset;    if (vset != 0) {      result=0;      break scan;    } else {      return 0;    }  }  while (vset != 0) {    result+=1;    vset>>>=1;  }  return result;}  }
class C{  public final double divide(Angle angle){  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (angle.getDegrees() == 0.0) {    String message=Logging.getMessage("generic.DivideByZero");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.degrees / angle.degrees;}  }
class C{  public _QueryOptions(){  super();}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  public Element store(){  Element e=new Element(Xml.ROUTE);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  e.setAttribute(Xml.COMMENT,getComment());  for (  RouteLocation rl : getLocationsBySequenceList()) {    e.addContent(rl.store());  }  return e;}  }
class C{  public boolean os(){  return this.os;}  }
class C{  static void writeValueLength(long ptr,int len,GridUnsafeMemory mem){  mem.writeInt(ptr + HEADER_VALUE_SIZE,len);}  }
class C{  public HttpDiscovery(NetworkParameters params,URI uri,@Nullable ECKey pubkey){  this(params,new Details(pubkey,uri));}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  protected double unwrapKey(Object key){  return ((Double)key).doubleValue();}  }
class C{  public void close(){  isClosed=true;  impl.close();}  }
class C{  public static QosSpecification createQosSpecification(VirtualPool virtualPool,DbClient dbClient){  _log.debug("Fetching data from Virtual Pool, id: {}",virtualPool.getId());  QosSpecification qosSpecification=new QosSpecification();  StringMap specs=new StringMap();  String protocols=null;  if (virtualPool.getProtocols() != null) {    protocols=virtualPool.getProtocols().toString();  }  qosSpecification.setName(QOS_NAME + virtualPool.getLabel());  qosSpecification.setConsumer(QOS_CONSUMER);  qosSpecification.setLabel(virtualPool.getLabel());  qosSpecification.setId(URIUtil.createId(QosSpecification.class));  qosSpecification.setVirtualPoolId(virtualPool.getId());  if (virtualPool.getSupportedProvisioningType() != null) {    specs.put(SPEC_PROVISIONING_TYPE,virtualPool.getSupportedProvisioningType());  }  if (protocols != null) {    specs.put(SPEC_PROTOCOL,protocols.substring(1,protocols.length() - 1));  }  if (virtualPool.getDriveType() != null) {    specs.put(SPEC_DRIVE_TYPE,virtualPool.getDriveType());  }  if (VirtualPoolService.getSystemType(virtualPool) != null) {    specs.put(SPEC_SYSTEM_TYPE,VirtualPoolService.getSystemType(virtualPool));  }  if (virtualPool.getMultivolumeConsistency() != null) {    specs.put(SPEC_MULTI_VOL_CONSISTENCY,Boolean.toString(virtualPool.getMultivolumeConsistency()));  }  if (virtualPool.getArrayInfo() != null && virtualPool.getArrayInfo().get(LABEL_RAID_LEVEL) != null) {    specs.put(SPEC_RAID_LEVEL,virtualPool.getArrayInfo().get(LABEL_RAID_LEVEL).toString());  }  if (virtualPool.getExpandable() != null) {    specs.put(SPEC_EXPENDABLE,Boolean.toString(virtualPool.getExpandable()));  }  if (virtualPool.getNumPaths() != null) {    specs.put(SPEC_MAX_SAN_PATHS,Integer.toString(virtualPool.getNumPaths()));  }  if (virtualPool.getMinPaths() != null) {    specs.put(SPEC_MIN_SAN_PATHS,Integer.toString(virtualPool.getMinPaths()));  }  if (virtualPool.getMaxNativeContinuousCopies() != null) {    specs.put(SPEC_MAX_BLOCK_MIRRORS,Integer.toString(virtualPool.getMaxNativeContinuousCopies()));  }  if (virtualPool.getPathsPerInitiator() != null) {    specs.put(SPEC_PATHS_PER_INITIATOR,Integer.toString(virtualPool.getPathsPerInitiator()));  }  if (virtualPool.getHighAvailability() != null) {    specs.put(SPEC_HIGH_AVAILABILITY,virtualPool.getHighAvailability());  }  if (virtualPool.getMaxNativeSnapshots() != null) {    if (virtualPool.getMaxNativeSnapshots().equals(UNLIMITED_SNAPSHOTS)) {      specs.put(SPEC_MAX_SNAPSHOTS,LABEL_UNLIMITED_SNAPSHOTS);    } else     if (virtualPool.getMaxNativeSnapshots().equals(DISABLED_SNAPSHOTS)) {      specs.put(SPEC_MAX_SNAPSHOTS,LABEL_DISABLED_SNAPSHOTS);    } else {      specs.put(SPEC_MAX_SNAPSHOTS,Integer.toString(virtualPool.getMaxNativeSnapshots()));    }  }  qosSpecification.setSpecs(specs);  dbClient.createObject(qosSpecification);  return qosSpecification;}  }
class C{  public String globalInfo(){  return "Implements stochastic gradient descent for learning" + " a linear binary class SVM or binary class" + " logistic regression on text data. Operates directly (and only) "+ "on String attributes. Other types of input attributes are accepted "+ "but ignored during training and classification.";}  }
class C{  public Connection attach(String address,long attachTimeout,long handshakeTimeout) throws IOException {  if (address == null) {    throw new NullPointerException("address is null");  }  if (attachTimeout < 0 || handshakeTimeout < 0) {    throw new IllegalArgumentException("timeout is negative");  }  int splitIndex=address.indexOf(':');  String host;  String portStr;  if (splitIndex < 0) {    host=InetAddress.getLocalHost().getHostName();    portStr=address;  } else {    host=address.substring(0,splitIndex);    portStr=address.substring(splitIndex + 1);  }  int port;  try {    port=Integer.decode(portStr).intValue();  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("unable to parse port number in address");  }  InetSocketAddress sa=new InetSocketAddress(host,port);  Socket s=new Socket();  try {    s.connect(sa,(int)attachTimeout);  } catch (  SocketTimeoutException exc) {    try {      s.close();    } catch (    IOException x) {    }    throw new TransportTimeoutException("timed out trying to establish connection");  }  try {    handshake(s,handshakeTimeout);  } catch (  IOException exc) {    try {      s.close();    } catch (    IOException x) {    }    throw exc;  }  return new SocketConnection(s);}  }
class C{  public void add(Token token,List<String> suggestions){  LinkedHashMap<String,Integer> map=this.suggestions.get(token);  if (map == null) {    map=new LinkedHashMap<>();    this.suggestions.put(token,map);  }  for (  String suggestion : suggestions) {    map.put(suggestion,NO_FREQUENCY_INFO);  }}  }
class C{  public String name(){  return theType.name();}  }
class C{  private void paintMaximizeEnabled(Graphics2D g,JComponent c,int width,int height){  maximizePainter.paintEnabled(g,c,width,height);}  }
class C{  public FillShapePainter(Shape shape){  if (shape == null)   throw new IllegalArgumentException("Shape can not be null!");  this.shape=shape;}  }
class C{  private SootField resolveStringMember(Integer intId){  String idName=makeIdName("String",intId);  String className=makeClassName("java.lang.String");  if (mNumberToIDMap == null) {    logger.warn("mNumberToIDMap not set");    return null;  }  if (!mNumberToIDMap.containsKey(intId)) {    logger.warn("ID {} is not in the resource info ",String.format("%x",intId));    return null;  }  SootField sf=null;  try {    sf=mSootClass.getFieldByName(idName);  } catch (  Exception ex) {    RefType classType=RefType.v(className);    sf=new SootField(idName,classType,Modifier.PUBLIC | Modifier.STATIC);    mSootClass.addField(sf);    logger.info("added field: {}",sf);  }  logger.info("Field name {} resolved",idName);  return sf;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("rawtypes") public BeanContextMembershipEvent(BeanContext bc,Collection changes){  super(bc);  if (changes == null)   throw new NullPointerException("BeanContextMembershipEvent constructor:  changes is null.");  children=changes;}  }
class C{  public static Builder builder(){  return new Builder(new InstallResponse());}  }
class C{  public IgniteDeploymentException(String msg){  super(msg);}  }
class C{  public OutlierResult run(Relation<?> relation){  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    String label=relation.get(iditer).toString();    final double score=(pattern.matcher(label).matches()) ? 1 : 0;    scores.putDouble(iditer,score);  }  DoubleRelation scoreres=new MaterializedDoubleRelation("By label outlier scores","label-outlier",scores,relation.getDBIDs());  OutlierScoreMeta meta=new ProbabilisticOutlierScore();  return new OutlierResult(meta,scoreres);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public TaskTagParser(){  result=new DefaultParseResult(this);  setTaskPattern(DEFAULT_TASK_PATTERN);}  }
class C{  private void activateProxyService(){  Bundle bundle=Platform.getBundle("org.eclipse.ui.ide");  Object proxyService=null;  if (bundle != null) {    ServiceReference ref=bundle.getBundleContext().getServiceReference(IProxyService.class.getName());    if (ref != null) {      proxyService=bundle.getBundleContext().getService(ref);    }  }  if (proxyService == null) {    IDEWorkbenchPlugin.log("Proxy service could not be found.");  }}  }
class C{  protected void visitRET(int pos,byte[] code) throws BadBytecode {}  }
class C{  @Nullable public IndexShard shard(int shardId){  IndexShardInjectorPair indexShardInjectorPair=shards.get(0);  if (indexShardInjectorPair != null) {    return indexShardInjectorPair.getIndexShard();  }  return null;}  }
class C{  public final boolean isCaretBlinkEnabled(){  return caretBlinks;}  }
class C{  private int allocateBP(int C_BPartner_ID) throws Exception {  getPayments(C_BPartner_ID);  getInvoices(C_BPartner_ID);  log.info("(1) - C_BPartner_ID=" + C_BPartner_ID + " - #Payments="+ m_payments.length+ ", #Invoices="+ m_invoices.length);  if (m_payments.length + m_invoices.length < 2)   return 0;  int count=allocateBPPaymentWithInfo();  if (count != 0) {    getPayments(C_BPartner_ID);    getInvoices(C_BPartner_ID);    log.info("(2) - C_BPartner_ID=" + C_BPartner_ID + " - #Payments="+ m_payments.length+ ", #Invoices="+ m_invoices.length);    if (m_payments.length + m_invoices.length < 2)     return count;  }  int newCount=allocateBPartnerAll();  if (newCount != 0) {    count+=newCount;    getPayments(C_BPartner_ID);    getInvoices(C_BPartner_ID);    processAllocation();    log.info("(3) - C_BPartner_ID=" + C_BPartner_ID + " - #Payments="+ m_payments.length+ ", #Invoices="+ m_invoices.length);    if (m_payments.length + m_invoices.length < 2)     return count;  }  newCount=allocateBPOneToOne();  if (newCount != 0) {    count+=newCount;    getPayments(C_BPartner_ID);    getInvoices(C_BPartner_ID);    processAllocation();    log.info("(4) - C_BPartner_ID=" + C_BPartner_ID + " - #Payments="+ m_payments.length+ ", #Invoices="+ m_invoices.length);    if (m_payments.length + m_invoices.length < 2)     return count;  }  if (p_AllocateOldest) {    newCount=allocateBPOldestFirst();    if (newCount != 0) {      count+=newCount;      getPayments(C_BPartner_ID);      getInvoices(C_BPartner_ID);      processAllocation();      log.info("(5) - C_BPartner_ID=" + C_BPartner_ID + " - #Payments="+ m_payments.length+ ", #Invoices="+ m_invoices.length);      if (m_payments.length + m_invoices.length < 2)       return count;    }  }  return count;}  }
class C{  @Nullable private String checkInPath(){  String PATH=getPath();  if (PATH == null) {    return null;  }  List<String> pathEntries=StringUtil.split(PATH,";");  for (  String pathEntry : pathEntries) {    if (looksLikeGit(pathEntry)) {      return checkBinDir(new File(pathEntry));    }  }  return null;}  }
class C{  public void showCrosshairsForCentroid(){  if (selectedWays == null) {    return;  }synchronized (selectedWays) {    float centroid[]=centroidXY(map.getWidth(),map.getHeight(),viewBox,selectedWays.get(0));    if (centroid == null) {      return;    }    centroidX=centroid[0];    centroidY=centroid[1];    showCrosshairs(centroidX,centroidY);  }}  }
class C{  public void load(){}  }
class C{  public CompletableFuture<Void> expire(){  CompletableFuture<Void> future=new CompletableFuture<>();  context.executor().execute(null);  return future;}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension cpd, mbd, tpd;  int cpWidth=Integer.MAX_VALUE;  int cpHeight=Integer.MAX_VALUE;  int mbWidth=Integer.MAX_VALUE;  int mbHeight=Integer.MAX_VALUE;  int tpWidth=Integer.MAX_VALUE;  int tpHeight=Integer.MAX_VALUE;  Insets i=target.getInsets();  JRootPane root=(JRootPane)target;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMaximumSize();    if (cpd != null) {      cpWidth=cpd.width;      cpHeight=cpd.height;    }  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getMaximumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMaximumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  int maxHeight=Math.max(Math.max(cpHeight,mbHeight),tpHeight);  if (maxHeight != Integer.MAX_VALUE) {    maxHeight=cpHeight + mbHeight + tpHeight+ i.top+ i.bottom;  }  int maxWidth=Math.max(Math.max(cpWidth,mbWidth),tpWidth);  if (maxWidth != Integer.MAX_VALUE) {    maxWidth+=i.left + i.right;  }  return new Dimension(maxWidth,maxHeight);}  }
class C{  public synchronized boolean isIdle(){  return idleStartTimeNs != Long.MAX_VALUE;}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  long[] timestamps=timeSeries.getTimestampsAsArray();  double[] values=timeSeries.getValuesAsArray();  timeSeries.clear();  for (int i=0; i < values.length; i++) {    values[i]-=value;  }  timeSeries.addAll(timestamps,values);  functionValueMap.add(this);}  }
class C{  @Override public void ortho(){  ortho(-width / 2f,width / 2f,-height / 2f,height / 2f,0,eyeDist * 10);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:39.177 -0400",hash_original_method="85B0BC88009D26568BAEDC3852E0DEEF",hash_generated_method="9414564B2F8D243C48DCAACFC2CBA6D0") public void dismiss(){  if (mDialog != null) {    mDialog.dismiss();  }}  }
class C{  public List<String> findRepeatedDnaSequencesB(String s){  List<String> res=new ArrayList<String>();  if (s == null || s.length() < 10)   return res;  Set<String> set=new HashSet<String>();  for (int i=0; i < s.length() - 10; i++) {    String sub=s.substring(i,i + 10);    if (set.contains(sub)) {      res.add(s);    }    set.add(s);  }  return res;}  }
class C{  protected void removeAffectedChild(JavaElementDelta child){  int index=-1;  if (this.affectedChildren != null) {    for (int i=0; i < this.affectedChildren.length; i++) {      if (equalsAndSameParent(this.affectedChildren[i].getElement(),child.getElement())) {        index=i;        break;      }    }  }  if (index >= 0) {    this.affectedChildren=removeAndShrinkArray(this.affectedChildren,index);  }}  }
class C{  public synchronized int init5Baud(int address){  int result=0;  setCurrAddress(address);  try {    commTimer.stop();    setDeviceName(deviceName);    for (int i=0; i < baudRates.length; i++) {      setProtStat(ProtStatus.CONNECTING);      log.info(String.format("Init Device:%s Address:%02x, Speed:%d",deviceName,address,baudRates[i]));      setCustomBaudRate(baudRates[i]);      setCurrBaudRate(baudRates[i]);      send5Baud(address);      try {        Thread.sleep(500);      } catch (      InterruptedException e) {        log.error("Sleep",e);      }      if (getProtStat() != ProtStatus.CONNECTING) {        log.info(String.format("Init OK Device:%s Address:%02x, Speed:%d",deviceName,address,baudRates[i]));        result=getCurrBaudRate();        commTimer.restart();        break;      }    }    if (result == 0) {      log.warn(String.format("Init Timeout Device:%s Address:%02x",deviceName,address));      close();    }  } catch (  Exception ex) {    log.error(deviceName + ": " + ex.toString());    close();    setProtStat(ProtStatus.ERROR);    result=0;  }  setCurrBaudRate(result);  return (result);}  }
class C{  public static KeyStore pem2Keystore(File pemFile) throws IOException, CertificateException, InvalidKeySpecException, NoSuchAlgorithmException, KeyStoreException {  byte[] certAndKey=FileUtils.readFileToByteArray(pemFile);  byte[] certBytes=parseDERFromPEM(certAndKey,"-----BEGIN CERTIFICATE-----","-----END CERTIFICATE-----");  byte[] keyBytes=parseDERFromPEM(certAndKey,"-----BEGIN PRIVATE KEY-----","-----END PRIVATE KEY-----");  X509Certificate cert=generateCertificateFromDER(certBytes);  RSAPrivateKey key=generatePrivateKeyFromDER(keyBytes);  KeyStore keystore=KeyStore.getInstance("JKS");  keystore.load(null);  keystore.setCertificateEntry("cert-alias",cert);  keystore.setKeyEntry(SslCertificateService.ZAPROXY_JKS_ALIAS,key,SslCertificateService.PASSPHRASE,new Certificate[]{cert});  return keystore;}  }
class C{  public synchronized void pinChildren(){  for (Iterator<Relationship> iterator=allRelationships(); iterator.hasNext(); ) {    iterator.next().getTarget().setPinned(true);  }}  }
class C{  public static Builder from(URL swaggerURL){  Validate.notNull(swaggerURL,"swaggerURL must not be null");  return new Builder(swaggerURL);}  }
class C{  public static void openURL(Context mContext,String url){  Uri uri=Uri.parse(url);  Intent intent=new Intent(Intent.ACTION_VIEW,uri);  mContext.startActivity(intent);}  }
class C{  public Minutes multipliedBy(int scalar){  return Minutes.minutes(FieldUtils.safeMultiply(getValue(),scalar));}  }
class C{  private boolean hasUpgradeLock(String svcId) throws Exception {  if (backCompatPreYoda) {    log.info("Pre-yoda back compatible flag detected. Check upgrade lock from the global area");    String oldSvcId=coordinator.getMySvcId();    DistributedPersistentLock lock=coordinator.getCoordinatorClient().getPersistentLock(DISTRIBUTED_UPGRADE_LOCK);    log.info("Acquiring the upgrade lock for {}...",oldSvcId);    if (lock != null) {      String lockOwner=lock.getLockOwner();      if (lockOwner != null && lockOwner.equals(oldSvcId)) {        log.info("Current owner of the upgrade lock: {} ",lockOwner);        return true;      }    }    return false;  } else {    return hasRebootLock(svcId);  }}  }
class C{  public BitemporalConditionBuilder vtFrom(Object vtFrom){  this.vtFrom=vtFrom;  return this;}  }
class C{  public void testMoveDirectorySourceAndDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,null,null);  igfs.rename(SUBSUBDIR,SUBDIR_NEW);  checkExist(igfs,DIR,SUBDIR,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  @SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){  mCircleDimmedLayer=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_circle_dimmed_layer,DEFAULT_CIRCLE_DIMMED_LAYER);  mDimmedColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_dimmed_color,getResources().getColor(R.color.ucrop_color_default_dimmed));  mDimmedStrokePaint.setColor(mDimmedColor);  mDimmedStrokePaint.setStyle(Paint.Style.STROKE);  mDimmedStrokePaint.setStrokeWidth(1);  initCropFrameStyle(a);  mShowCropFrame=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_frame,DEFAULT_SHOW_CROP_FRAME);  initCropGridStyle(a);  mShowCropGrid=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_grid,DEFAULT_SHOW_CROP_GRID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.563 -0500",hash_original_method="651EAEC497B28FBE14AC71396739DF99",hash_generated_method="CB1C5A4BEAEEF5DC9F4C010C3A76075B") public void reset(){  final float[] a=mArray;  for (int i=19; i > 0; --i) {    a[i]=0;  }  a[0]=a[6]=a[12]=a[18]=1;}  }
class C{  public boolean hasNotProductiveNonTerminals(){  this.checkProductivity();  Collection<SymbolInfo> c=this.symbolInfos.values();  for (  SymbolInfo i : c) {    if ((i.symbol instanceof NonTerminal) && !i.bProductive) {      return true;    }  }  return false;}  }
class C{  public final void execute(int anchor,LoadPosition pos,int before,int after,NarrowFilter filter){  this.mainAnchor=anchor;  this.before=before;  this.afterAnchor=mainAnchor + 1;  this.after=after;  this.filter=filter;  position=pos;  this.receivedMessages=new ArrayList<>();  Log.i("AGOM","executing " + anchor + " "+ before+ " "+ after);  execute("GET","v1/messages");}  }
class C{  public static byte divide(byte a,byte b){  if (a == 0) {    return 0;  }  if (b == 0) {    throw new IllegalArgumentException("Argument 'divisor' is 0");  }  int logA=LOG_TABLE[a & 0xFF];  int logB=LOG_TABLE[b & 0xFF];  int logResult=logA - logB;  if (logResult < 0) {    logResult+=255;  }  return EXP_TABLE[logResult];}  }
class C{  public void actionPerformed(ActionEvent e){  DesktopController.getInstance().newSessionEditor();}  }
class C{  public void save(){  Preferences preferences=getUnderlyingPreferences();  preferences.putBoolean(KSE3_USECACERTS,useCaCertificates);  preferences.put(KSE3_CACERTSFILE,caCertificatesFile.toString());  preferences.putBoolean(KSE3_USEWINTRUSTROOTCERTS,useWindowsTrustedRootCertificates);  preferences.putBoolean(KSE3_ENABLEIMPORTTRUSTEDCERTTRUSTCHECK,enableImportTrustedCertTrustCheck);  preferences.putBoolean(KSE3_ENABLEIMPORTCAREPLYTRUSTCHECK,enableImportCaReplyTrustCheck);  preferences.put(KSE3_KEYPAIRTYPE,generateKeyPairType.jce());  preferences.putInt(KSE3_KEYPAIRSIZE,generateKeyPairSize);  preferences.put(KSE3_SECKEYTYPE,generateSecretKeyType.jce());  preferences.putInt(KSE3_SECKEYSIZE,generateSecretKeySize);  preferences.put(KSE3_CERTFINGERTYPE,certificateFingerprintType.jce());  preferences.putBoolean(KSE3_PWDQUALENABLE,passwordQualityConfig.getEnabled());  preferences.putBoolean(KSE3_MINPWDQUALENFORCE,passwordQualityConfig.getEnforced());  preferences.putInt(KSE3_MINPWDQUAL,passwordQualityConfig.getMinimumQuality());  getCurrentProxySettings(preferences);  preferences.putInt(KSE3_XPOS,sizeAndPosition.x);  preferences.putInt(KSE3_YPOS,sizeAndPosition.y);  preferences.putInt(KSE3_WIDTH,sizeAndPosition.width);  preferences.putInt(KSE3_HEIGHT,sizeAndPosition.height);  preferences.putBoolean(KSE3_SHOWTOOLBAR,showToolBar);  preferences.putBoolean(KSE3_SHOWSTATUSBAR,showStatusBar);  preferences.putInt(KSE3_TABLAYOUT,tabLayout);  clearExistingRecentFiles(preferences);  for (int i=1; i <= recentFiles.length; i++) {    preferences.put(KSE3_RECENTFILE + i,recentFiles[i - 1].toString());  }  preferences.put(KSE3_CURRENTDIR,currentDirectory.toString());  preferences.put(KSE3_LOOKFEEL,lookAndFeelClass);  preferences.putBoolean(KSE3_LOOKFEELDECOR,lookAndFeelDecorated);  preferences.putBoolean(KSE3_LICENSEAGREED,licenseAgreed);  preferences.putBoolean(KSE3_TIPSONSTARTUP,showTipsOnStartUp);  preferences.putInt(KSE3_TIPINDEX,nextTipIndex);  preferences.put(KSE3_DEFAULTDN,defaultDN);  preferences.put(KSE3_SSLHOSTS,getSslHosts());  preferences.put(KSE3_SSLPORTS,getSslPorts());  preferences.putBoolean(KSE3_AUTO_UPDATE_CHECK_ENABLED,isAutoUpdateCheckEnabled());  preferences.putInt(KSE3_AUTO_UPDATE_CHECK_INTERVAL,getAutoUpdateCheckInterval());  preferences.put(KSE3_AUTO_UPDATE_CHECK_LAST_CHECK,DATE_FORMAT.format(getAutoUpdateCheckLastCheck()));  preferences.put(KSE3_PKCS11_LIBS,getP11Libs());}  }
class C{  @Transactional(readOnly=true) public NucleotideSequence retrieveByXrefName(String name){  final Query query=entityManager.createQuery("SELECT s FROM NucleotideSequence s INNER JOIN s.xrefs x " + "WHERE x.name like :name");  query.setParameter("name",'%' + name + '%');  @SuppressWarnings("unchecked") List<NucleotideSequence> list=query.getResultList();  if (list != null && !list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public int numCategoricalValues(){  return categoricalValues.length;}  }
class C{  @Deprecated public List<?> range(Value begin,Value end,int count,String filterModule,String filterName,Value... filterArgs) throws AerospikeException {  throw new NotImplementedException();}  }
class C{  public AbstractAnnotatorTest(Class<? extends BaleenAnnotator> annotatorClass){  this.annotatorClass=annotatorClass;}  }
class C{  protected Task<T> postTaskURI(URI uri){  TaskResourceRep task=client.postURI(TaskResourceRep.class,uri);  return new Task<T>(client,task,resourceClass);}  }
class C{  private void initListBlock(final Block root){  BlockType blockType=root.type == BlockType.ORDERED_LIST ? BlockType.ORDERED_LIST_ITEM : BlockType.UNORDERED_LIST_ITEM;  Line line=root.lines;  line=line.next;  while (line != null) {    final LineType t=line.getLineType();    if ((t == LineType.OLIST || t == LineType.ULIST) || (!line.isEmpty && (line.prevEmpty && line.leading == 0))) {      root.split(line.previous).type=blockType;    }    line=line.next;  }  root.split(root.lineTail).type=blockType;}  }
class C{  public void discardUntil(long timeUs){  while (rollingBuffer.peekSample(sampleInfoHolder) && sampleInfoHolder.timeUs < timeUs) {    rollingBuffer.skipSample();    needKeyframe=true;  }  lastReadTimeUs=Long.MIN_VALUE;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void executeDownload(State state,AndroidHttpClient client,HttpGet request) throws StopRequest, RetryDownload {  InnerState innerState=new InnerState();  byte data[]=new byte[Constants.BUFFER_SIZE];  checkPausedOrCanceled(state);  setupDestinationFile(state,innerState);  addRequestHeaders(innerState,request);  checkConnectivity(state);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_CONNECTING);  HttpResponse response=sendRequest(state,client,request);  handleExceptionalStatus(state,innerState,response);  if (Constants.LOGV) {    Log.v(Constants.TAG,"received response for " + mInfo.mUri);  }  processResponseHeaders(state,innerState,response);  InputStream entityStream=openResponseEntity(state,response);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_DOWNLOADING);  transferData(state,innerState,data,entityStream);}  }
class C{  public void testNominalClass(){  m_Instances.setClassIndex(1);  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(icopy.numAttributes() + 2,result.numAttributes());  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public String globalInfo(){  return "An instance filter that discretizes a range of numeric" + " attributes in the dataset into nominal attributes." + " Discretization is by Fayyad & Irani's MDL method (the default).\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  private Transform matchEnum(Class type){  Class parent=type.getSuperclass();  if (parent != null) {    if (parent.isEnum()) {      return new EnumTransform(type);    }    if (type.isEnum()) {      return new EnumTransform(type);    }  }  return null;}  }
class C{  public Territory(final String name,final boolean water,final GameData data){  super(name,data);  m_water=water;  m_units=new UnitCollection(this,getData());  m_coordinate=null;}  }
class C{  public TextHit(int charIndex,boolean leadingEdge){  this.charIndex=charIndex;  this.leadingEdge=leadingEdge;}  }
class C{  private void init(){  setTitle("Network Dialog");  networkPropertiesPanel=new NetworkPropertiesPanel(networkPanel);  tabbedPane.addTab("Main",networkPropertiesPanel);  quickConnectPanel=new QuickConnectPreferencesPanel(networkPanel,this);  tabbedPane.addTab("Connections",quickConnectPanel);  setContentPane(tabbedPane);  JButton helpButton=new JButton("Help");  ShowHelpAction helpAction=new ShowHelpAction("Pages/Network/network_prefs.html");  helpButton.setAction(helpAction);  this.addButton(helpButton);}  }
class C{  public static ContentValues values(ContentValues vals,long restaurantId,Place.Review review){  String text=review.getText();  if (!TextUtils.isEmpty(Html.fromHtml(text))) {    vals.put(RESTAURANT_ID,restaurantId);    vals.put(TYPE_ID,GOOGLE.id);    vals.put(AUTHOR_NAME,review.getAuthorName());    vals.put(COMMENTS,text);    int rating=review.getRating();    vals.put(RATING,rating > 0 ? rating : null);    vals.put(WRITTEN_ON,SQLite.datetime(review.getTime() * 1000));    vals.put(DIRTY,0);  } else {    vals.clear();  }  return vals;}  }
class C{  private static boolean isSupportingDivisionType(final float divisionType){  for (  final float supportingDivisionType : SUPPORTING_DIVISION_TYPES) {    if (divisionType == supportingDivisionType) {      return true;    }  }  return false;}  }
class C{  public void addProperty(String property,Boolean value){  add(property,createJsonElement(value));}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  private Bitmap createPaddedSourceImage(Uri sourceImageUri,boolean previewSize){  InputStream is=getInputStream(sourceImageUri);  if (is == null) {    Log.e(TAG,"Could not create input stream for image.");    dismiss();  }  Bitmap sourceBitmap=BitmapFactory.decodeStream(is);  is=getInputStream(sourceImageUri);  XMPMeta xmp=XmpUtil.extractXMPMeta(is);  if (xmp != null) {    int size=previewSize ? getDisplaySize() : sourceBitmap.getWidth();    sourceBitmap=createPaddedBitmap(sourceBitmap,xmp,size);  }  return sourceBitmap;}  }
class C{  public AuthScope(final AuthScope authscope){  super();  if (authscope == null) {    throw new IllegalArgumentException("Scope may not be null");  }  host=authscope.getHost();  port=authscope.getPort();  scheme=authscope.getScheme();}  }
class C{  public void allowUnauthenticatedRequests(boolean allow){  registry.setAllowUnauthenticatedRequests(allow);}  }
class C{  public synchronized void close() throws FormatException {  try {    if (inputFile != null) {      inputFile.close();    }    inputFile=null;  } catch (  IOException i) {    throw new FormatException("DcwThematicIndex: Can't close file " + filename + ": "+ i.getMessage());  }}  }
class C{  private void sendNoteOffIfOn(Track track,long endTick){  int size=track.size();  int done=0;  try {    for (int i=0; i < size; i++) {      MidiEvent event=track.get(i);      if (event.getTick() > endTick)       break;      MidiMessage msg=event.getMessage();      int status=msg.getStatus();      int len=msg.getLength();      if (len == 3 && ((status & 0xF0) == ShortMessage.NOTE_ON)) {        int note=-1;        if (msg instanceof ShortMessage) {          ShortMessage smsg=(ShortMessage)msg;          if (smsg.getData2() > 0) {            note=smsg.getData1();          }        } else {          byte[] data=msg.getMessage();          if ((data[2] & 0x7F) > 0) {            note=data[1] & 0x7F;          }        }        if (note >= 0) {          int bit=1 << (status & 0x0F);          if ((noteOnCache[note] & bit) != 0) {            getTransmitterList().sendMessage(status | (note << 8),-1);            noteOnCache[note]&=(0xFFFF ^ bit);            done++;          }        }      }    }  } catch (  ArrayIndexOutOfBoundsException aioobe) {  }  if (DEBUG_PUMP)   Printer.println("  sendNoteOffIfOn: sent " + done + " messages.");}  }
class C{  public int size(){  return points.size();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public A first(){  return elems.head;}  }
class C{  public void add(BytesRef utf8,int bucket) throws IOException {  if (bucket < 0 || bucket >= buckets) {    throw new IllegalArgumentException("Bucket outside of the allowed range [0, " + buckets + "): "+ bucket);  }  scratch.grow(utf8.length + 10);  scratch.clear();  scratch.append((byte)bucket);  scratch.append(utf8);  sorter.add(scratch.get());}  }
class C{  ArrayList<Instruction> performCleanupAfterRecompilation(ArrayList<Instruction> tmp){  String[] outputs=(_outVarnames != null) ? _outVarnames.toArray(new String[0]) : new String[0];  return JMLCUtils.cleanupRuntimeInstructions(tmp,outputs);}  }
class C{  public static void sendDataInBackground(JSONObject data,ParseQuery<ParseInstallation> query,SendCallback callback){  ParseTaskUtils.callbackOnMainThreadAsync(sendDataInBackground(data,query),callback);}  }
class C{  private void updateAppearance(){  if (mAdapter.getCount() > 0) {    mExpandActivityOverflowButton.setEnabled(true);  } else {    mExpandActivityOverflowButton.setEnabled(false);  }  final int activityCount=mAdapter.getActivityCount();  final int historySize=mAdapter.getHistorySize();  if (activityCount > 0 && historySize > 0) {    mDefaultActivityButton.setVisibility(VISIBLE);    ResolveInfo activity=mAdapter.getDefaultActivity();    PackageManager packageManager=mContext.getPackageManager();    mDefaultActivityButtonImage.setImageDrawable(activity.loadIcon(packageManager));    if (mDefaultActionButtonContentDescription != 0) {      CharSequence label=activity.loadLabel(packageManager);      String contentDescription=mContext.getString(mDefaultActionButtonContentDescription,label);      mDefaultActivityButton.setContentDescription(contentDescription);    }  } else {    mDefaultActivityButton.setVisibility(View.GONE);  }  if (mDefaultActivityButton.getVisibility() == VISIBLE) {    mActivityChooserContent.setBackgroundDrawable(mActivityChooserContentBackground);  } else {    mActivityChooserContent.setBackgroundDrawable(null);    mActivityChooserContent.setPadding(0,0,0,0);  }}  }
class C{  public void testAddServletToDocumentWithAnotherServlet() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  webXml.addTag(createServletElement(webXml.getDescriptorType(),"s2","s2class"));  assertTrue(WebXmlUtils.hasServlet(webXml,"s1"));  assertTrue(WebXmlUtils.hasServlet(webXml,"s2"));}  }
class C{  protected void registerViewContainerBean(String beanName){  BeanDefinitionRegistry registry=(BeanDefinitionRegistry)applicationContext;  BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(ViewContainerRegistrationBean.class);  builder.addPropertyValue("beanName",beanName);  builder.setScope(UIScopeImpl.VAADIN_UI_SCOPE_NAME);  builder.setRole(BeanDefinition.ROLE_SUPPORT);  AbstractBeanDefinition beanDefinition=builder.getBeanDefinition();  String name=getBeanNameGenerator().generateBeanName(beanDefinition,registry);  registry.registerBeanDefinition(name,beanDefinition);}  }
class C{  public boolean hasAutoPruneMode(){  return hasExtension(GwoAutoPruneMode.class);}  }
class C{  public CommandEditor(ActionCommand cmd,EditableResources res,String uiName,List<com.codename1.ui.Command> commands,Properties projectGeneratorSettings,boolean java5){  this.java5=java5;  this.projectGeneratorSettings=projectGeneratorSettings;  this.uiName=uiName;  initComponents();  goToSource.setEnabled(projectGeneratorSettings != null);  com.codename1.ui.Command[] existing=new com.codename1.ui.Command[commands.size() + 1];  existing[0]=null;  for (int iter=1; iter < existing.length; iter++) {    existing[iter]=commands.get(iter - 1);  }  Vector postActions=new Vector();  postActions.addElement("None");  Vector actions=new Vector();  actions.addElement("None");  actions.addElement("Minimize");  actions.addElement("Exit");  actions.addElement("Execute");  actions.addElement("Back");  backCommand.setSelected(cmd.isBackCommand());  String[] uiEntries=new String[res.getUIResourceNames().length];  System.arraycopy(res.getUIResourceNames(),0,uiEntries,0,uiEntries.length);  Arrays.sort(uiEntries);  for (  String uis : uiEntries) {    if (!uiName.equals(uis)) {      actions.addElement(uis);      postActions.addElement(uis);    }  }  action.setModel(new DefaultComboBoxModel(actions));  postAction.setModel(new DefaultComboBoxModel(postActions));  String a=cmd.getAction();  if (a != null) {    if (a.startsWith("@")) {      a=a.substring(1);      asynchronous.setSelected(true);    } else {      if (a.startsWith("!")) {        a=a.substring(1);        String[] arr=a.split(";");        action.setSelectedItem(arr[0]);        postAction.setSelectedItem(arr[1]);      } else {        if (a.startsWith("$")) {          a=a.substring(1);        }      }    }  }  action.setSelectedItem(a);  name.setText(cmd.getCommandName());  id.setModel(new SpinnerNumberModel(cmd.getId(),-10000,Integer.MAX_VALUE,1));  ResourceEditorView.initImagesComboBox(icon,res,false,true);  icon.setSelectedItem(cmd.getIcon());  ResourceEditorView.initImagesComboBox(rollover,res,false,true);  rollover.setSelectedItem(cmd.getRolloverIcon());  ResourceEditorView.initImagesComboBox(pressed,res,false,true);  pressed.setSelectedItem(cmd.getPressedIcon());  ResourceEditorView.initImagesComboBox(disabled,res,false,true);  disabled.setSelectedItem(cmd.getDisabledIcon());}  }
class C{  public List<GenericValue> makeAllQuoteAdjustments(){  List<GenericValue> quoteAdjs=FastList.newInstance();  for (  GenericValue orderAdj : makeAllAdjustments()) {    GenericValue quoteAdj=this.getDelegator().makeValue("QuoteAdjustment");    quoteAdj.put("quoteAdjustmentId",orderAdj.get("orderAdjustmentId"));    quoteAdj.put("quoteAdjustmentTypeId",orderAdj.get("orderAdjustmentTypeId"));    quoteAdj.put("quoteItemSeqId",orderAdj.get("orderItemSeqId"));    quoteAdj.put("comments",orderAdj.get("comments"));    quoteAdj.put("description",orderAdj.get("description"));    quoteAdj.put("amount",orderAdj.get("amount"));    quoteAdj.put("productPromoId",orderAdj.get("productPromoId"));    quoteAdj.put("productPromoRuleId",orderAdj.get("productPromoRuleId"));    quoteAdj.put("productPromoActionSeqId",orderAdj.get("productPromoActionSeqId"));    quoteAdj.put("productFeatureId",orderAdj.get("productFeatureId"));    quoteAdj.put("correspondingProductId",orderAdj.get("correspondingProductId"));    quoteAdj.put("sourceReferenceId",orderAdj.get("sourceReferenceId"));    quoteAdj.put("sourcePercentage",orderAdj.get("sourcePercentage"));    quoteAdj.put("customerReferenceId",orderAdj.get("customerReferenceId"));    quoteAdj.put("primaryGeoId",orderAdj.get("primaryGeoId"));    quoteAdj.put("secondaryGeoId",orderAdj.get("secondaryGeoId"));    quoteAdj.put("exemptAmount",orderAdj.get("exemptAmount"));    quoteAdj.put("taxAuthGeoId",orderAdj.get("taxAuthGeoId"));    quoteAdj.put("taxAuthPartyId",orderAdj.get("taxAuthPartyId"));    quoteAdj.put("overrideGlAccountId",orderAdj.get("overrideGlAccountId"));    quoteAdj.put("includeInTax",orderAdj.get("includeInTax"));    quoteAdj.put("includeInShipping",orderAdj.get("includeInShipping"));    quoteAdj.put("createdDate",orderAdj.get("createdDate"));    quoteAdj.put("createdByUserLogin",orderAdj.get("createdByUserLogin"));    quoteAdjs.add(quoteAdj);  }  return quoteAdjs;}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (SerialAddress.validSystemNameFormat(systemName,'L'));}  }
class C{  public static void updateColumns(SetGetModel[] models,String[] columnNames,String sql,Object[] params,String trxName){  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    DB.setParameters(pstmt,params);    rs=pstmt.executeQuery();    updateColumns(models,columnNames,rs);  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  public LocatorState waitOnStatusResponse(final long timeout,final long interval,final TimeUnit timeUnit){  final long endTimeInMilliseconds=(System.currentTimeMillis() + timeUnit.toMillis(timeout));  while (System.currentTimeMillis() < endTimeInMilliseconds) {    try {      LocatorStatusResponse response=statusLocator(getPort(),getBindAddress());      return new LocatorState(this,Status.ONLINE,response);    } catch (    Exception ignore) {      try {synchronized (this) {          timeUnit.timedWait(this,interval);        }      } catch (      InterruptedException ignoreInterrupt) {      }    }  }  return new LocatorState(this,Status.NOT_RESPONDING);}  }
class C{  public Network inspectNetwork(String netId) throws IOException {  return inspectNetwork(InspectNetworkParams.create(netId));}  }
class C{  public boolean isValid(){  return true;}  }
class C{  private PalDB(){}  }
class C{  protected List<WalletExtension> provideWalletExtensions() throws Exception {  return ImmutableList.of();}  }
class C{  public Point(int x,int y){  this.x=x;  this.y=y;}  }
class C{  public MX4JServerSocketFactory(boolean useSSL,boolean needClientAuth,String protocols,String ciphers,String bindAddress,int backlog,Properties gfsecurityProps){  this(useSSL,needClientAuth,protocols,ciphers,gfsecurityProps);  this.bindAddress=bindAddress;  this.backlog=backlog;}  }
class C{  public void updateListaDescriptora(ListaDescrVO listaDescriptora){  Locale locale=getServiceClient().getLocale();  checkPermission(DescripcionSecurityManager.ADMINISTRAR_DESCRIPTORES_ACTION);  iniciarTransaccion();  AuditoriaDescripcion.auditaModificacionListaDescriptora(locale,this,listaDescriptora);  catalogoListaDescriptoresDBEntity.update(listaDescriptora);  commit();}  }
class C{  public SkipInvalidRecordsIterator(File samFile) throws IOException {  this(samFile.getPath(),SamUtils.makeSamReader(samFile));}  }
class C{  public void visitReferenceExpression(PsiReferenceExpression expression){}  }
class C{  public static void zkCreateFullPathOptimistic(ZooKeeperClient zkc,String path,byte[] data,final List<ACL> acl,final CreateMode createMode) throws ZooKeeperClient.ZooKeeperConnectionException, KeeperException, InterruptedException {  try {    Await.result(zkAsyncCreateFullPathOptimistic(zkc,path,data,acl,createMode));  } catch (  ZooKeeperClient.ZooKeeperConnectionException zkce) {    throw zkce;  }catch (  KeeperException ke) {    throw ke;  }catch (  InterruptedException ie) {    throw ie;  }catch (  RuntimeException rte) {    throw rte;  }catch (  Exception exc) {    throw new RuntimeException("Unexpected Exception",exc);  }}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  @Override public V remove(int key){  return doRemove(key,null);}  }
class C{  public EntityQuery cache(boolean useCache){  this.useCache=useCache;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.471 -0400",hash_original_method="4BC4820D321CD470B31CD7A09BA15480",hash_generated_method="B9C82E57AD62EB002BF2F4FF7506E536") public void testEnablePan(){  int iterations=BluetoothTestRunner.sEnablePanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.disablePan(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("testEnablePan iteration " + (i + 1) + " of "+ iterations);    mTestUtils.enablePan(adapter);    mTestUtils.disablePan(adapter);  }  mTestUtils.disable(adapter);}  }
class C{  public final void removeAllListeners(){  listeners.clear();}  }
class C{  public synchronized boolean checkSize(final int sizeChecked){  if (!started) {    throw new IllegalStateException("TimedBuffer is not started");  }  if (sizeChecked > bufferSize) {    throw new IllegalStateException("Can't write records bigger than the bufferSize(" + bufferSize + ") on the journal");  }  if (bufferLimit == 0 || buffer.writerIndex() + sizeChecked > bufferLimit) {    flush();    delayFlush=true;    final int remainingInFile=bufferObserver.getRemainingBytes();    if (sizeChecked > remainingInFile) {      return false;    } else {      bufferLimit=Math.min(remainingInFile,bufferSize);      return true;    }  } else {    delayFlush=true;    return true;  }}  }
class C{  private void findExtremalIndices() throws FilterDesignException {  mExtremalIndices.clear();  if (((mGridErrors[0] > 0.0 && mGridErrors[0] > mGridErrors[1]) || (mGridErrors[0] < 0.0 && mGridErrors[0] < mGridErrors[1])) && isGTEDelta(mGridErrors[0])) {    mExtremalIndices.add(0);  }  for (int x=1; x < mGridErrors.length - 1; x++) {    if (((mGridErrors[x] > 0.0 && (mGridErrors[x - 1] <= mGridErrors[x] && mGridErrors[x] > mGridErrors[x + 1])) || (mGridErrors[x] < 0.0 && (mGridErrors[x - 1] >= mGridErrors[x] && mGridErrors[x] < mGridErrors[x + 1]))) && isGTEDelta(mGridErrors[x])) {      mExtremalIndices.add(x);    }  }  int last=mGridErrors.length - 1;  if (((mGridErrors[last] > 0.0 && (mGridErrors[last] > mGridErrors[last - 1])) || (mGridErrors[last] < 0.0 && (mGridErrors[last] < mGridErrors[last - 1]))) && isGTEDelta(mGridErrors[last])) {    mExtremalIndices.add(last);  }  if (mExtremalIndices.size() < mSpecification.getExtremaCount()) {    throw new FilterDesignException("Couldn't find the minimum extremal frequencies in " + "error set");  }  List<Integer> indicesToRemove=new ArrayList<>();  Iterator<Integer> it=mExtremalIndices.iterator();  Integer current=it.next();  Integer next;  boolean positiveAxis=mGridErrors[current] > 0.0;  while (it.hasNext()) {    next=it.next();    if (!(positiveAxis ^ (mGridErrors[next] > 0.0))) {      if (Math.abs(mGridErrors[next]) <= Math.abs(mGridErrors[current])) {        it.remove();        next=current;      } else {        indicesToRemove.add(current);      }    } else {      positiveAxis=!positiveAxis;    }    current=next;  }  mExtremalIndices.removeAll(indicesToRemove);  while (mExtremalIndices.size() > mSpecification.getExtremaCount()) {    mExtremalIndices.remove(mExtremalIndices.size() - 1);  }  if (mExtremalIndices.size() > mSpecification.getExtremaCount()) {    int lastIndex=mExtremalIndices.size() - 1;    if (Math.abs(mGridErrors[mExtremalIndices.get(0)]) > Math.abs(mGridErrors[mExtremalIndices.get(lastIndex)])) {      mExtremalIndices.remove(lastIndex);    } else {      mExtremalIndices.remove(0);    }  }  if (mExtremalIndices.size() < mSpecification.getExtremaCount()) {    throw new FilterDesignException("Couldn't find the minimum extremal frequencies in " + "error set");  }}  }
class C{  public void stop(){  Util.validateMainThread();synchronized (LOCK) {    running=false;    handler.removeCallbacksAndMessages(null);    thread.quit();  }}  }
class C{  private static void logWarning(String message){  if (LOG_WARNING) {    System.out.println(message);  }}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void assertArrayEqual(double[] expected,double[] actual,double maxRelativeError){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],maxRelativeError);  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized E elementAt(int location){  if (location < elementCount) {    return (E)elementData[location];  }  throw new ArrayIndexOutOfBoundsException(location);}  }
class C{  private void onActivePointerUp(){  if (STATUS.isSwipingToRefresh(mStatus)) {    scrollSwipingToRefreshToDefault();  } else   if (STATUS.isSwipingToLoadMore(mStatus)) {    scrollSwipingToLoadMoreToDefault();  } else   if (STATUS.isReleaseToRefresh(mStatus)) {    mRefreshCallback.onRelease();    scrollReleaseToRefreshToRefreshing();  } else   if (STATUS.isReleaseToLoadMore(mStatus)) {    mLoadMoreCallback.onRelease();    scrollReleaseToLoadMoreToLoadingMore();  }}  }
class C{  public Object item(int index){  if (index < 0 || index >= count) {    return null;  }  int j=0;  for (int i=0; i < table.length; i++) {    Entry e=table[i];    if (e == null) {      continue;    }    do {      if (j++ == index) {        return e.value;      }      e=e.next;    } while (e != null);  }  return null;}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public Prototype compile(InputStream stream,String chunkname) throws IOException {  return (new LuaC(new Hashtable())).luaY_parser(stream,chunkname);}  }
class C{  public String resolveAlias(String name){  String alias=aliases.get(name.toUpperCase());  return alias == null ? name : alias;}  }
class C{  public AxisLabelLayout(String group,AxisLayout layout,Rectangle2D bounds,double spacing){  super(group);  if (bounds != null)   setLayoutBounds(bounds);  m_layout=layout;  m_model=layout.getRangeModel();  m_axis=layout.getAxis();  m_scale=layout.getScale();  m_spacing=spacing;}  }
class C{  public void center(CenterEvent evt){  setCenter(evt.getLatitude(),evt.getLongitude());}  }
class C{  public boolean wantsEvents(){  return wantsEvents;}  }
class C{  public String node(){  return this.node;}  }
class C{  @Override public void onCreate(SQLiteDatabase db,ConnectionSource connectionSource){  try {    Log.d(TAG,"onCreate");    TableUtils.createTable(connectionSource,HistoryCall.class);    TableUtils.createTable(connectionSource,HistoryText.class);  } catch (  SQLException e) {    Log.e(TAG,"Can't create database",e);    throw new RuntimeException(e);  }}  }
class C{  public static long[] decodeDateTime(long encodedDateTime){  return new long[]{encodedDateTime / DATETIME_YEAR_SCALE,encodedDateTime / DATETIME_MONTH_SCALE % 100,encodedDateTime / DATETIME_DAY_SCALE % 100,encodedDateTime / DATETIME_HOUR_SCALE % 100,encodedDateTime / DATETIME_MIN_SCALE % 100,encodedDateTime % 100};}  }
class C{  public static <T>Predicate<T> memoizePredicate(final Predicate<T> p,final Cacheable<Boolean> cache){  final Function<T,Boolean> memoised=memoizeFunction((Function<T,Boolean>)null,cache);  return null;}  }
class C{  @Override public String toString(){  return "CUtexref[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  protected void updatePreferredSize(){  updatePreferredSize(getRow());}  }
class C{  public String format(String zkUrl){  parser.validateZkUrl(zkUrl);  return zkUrl;}  }
class C{  public boolean isErrorReceived(){  return errorReceived;}  }
class C{  private void dumpEvent(MotionEvent event){  String names[]={"DOWN","UP","MOVE","CANCEL","OUTSIDE","POINTER_DOWN","POINTER_UP","7?","8?","9?"};  StringBuilder sb=new StringBuilder();  int action=event.getAction();  int actionCode=action & MotionEvent.ACTION_MASK;  sb.append("event ACTION_").append(names[actionCode]);  if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {    sb.append("(pid ").append(action >> MotionEvent.ACTION_POINTER_ID_SHIFT);    sb.append(")");  }  sb.append("[");  for (int i=0; i < event.getPointerCount(); i++) {    sb.append("#").append(i);    sb.append("(pid ").append(event.getPointerId(i));    sb.append(")=").append((int)event.getX(i));    sb.append(",").append((int)event.getY(i));    if (i + 1 < event.getPointerCount())     sb.append(";");  }  sb.append(", dist: " + distance(event.getX(),start.x,event.getY(),start.y) + "]");  Log.d("TouchListener",sb.toString());}  }
class C{  private boolean matches(T value,T against){  return Matchers.lessThan(against.doubleValue()).matches(value.doubleValue());}  }
class C{  public LCTest(String name){  super(name);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("Reason Flags [\n");  if (isSet(0)) {    sb.append("  Unused\n");  }  if (isSet(1)) {    sb.append("  Key Compromise\n");  }  if (isSet(2)) {    sb.append("  CA Compromise\n");  }  if (isSet(3)) {    sb.append("  Affiliation_Changed\n");  }  if (isSet(4)) {    sb.append("  Superseded\n");  }  if (isSet(5)) {    sb.append("  Cessation Of Operation\n");  }  if (isSet(6)) {    sb.append("  Certificate Hold\n");  }  if (isSet(7)) {    sb.append("  Privilege Withdrawn\n");  }  if (isSet(8)) {    sb.append("  AA Compromise\n");  }  sb.append("]\n");  return sb.toString();}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        try {          int b=in.read();          if (b >= 0) {            b3[i]=(byte)b;            numBinaryBytes++;          }        } catch (        java.io.IOException e) {          if (i == 0)           throw e;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0)         break;        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes)     return -1;    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength)       position=-1;      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public void remove(final String collectionName,final String documentId,final ResultListener listener){  Map<String,Object> query=new HashMap<String,Object>();  query.put(MongoDb.Field.ID,documentId);  call("/" + collectionName + "/remove",new Object[]{query},listener);}  }
class C{  public VirtualMachineError(){}  }
class C{  public DtoWarehouseServiceImpl(final GenericService<Warehouse> warehouseGenericService,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository,final SkuWarehouseService skuWarehouseService){  super(dtoFactory,warehouseGenericService,adaptersRepository);  this.skuWarehouseService=skuWarehouseService;  dtoSkuWarehouseAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(SkuWarehouseDTO.class),SkuWarehouse.class);  shopWarehouseAssembler=DTOAssembler.newAssembler(ShopWarehouseDTOImpl.class,ShopWarehouse.class);  shopAssembler=DTOAssembler.newAssembler(ShopDTOImpl.class,Shop.class);}  }
class C{  private boolean areSwcFileChecksumsEqual(){  if (swcFileChecksums == null) {    if (Trace.swcChecksum) {      Trace.trace("areSwcFileChecksumsEqual: no file checksum map, not equal");    }    return false;  }  Map<String,VirtualFile> swcFiles=swcContext.getFiles();  Set<Map.Entry<String,Long>> dataSet=swcFileChecksums.entrySet();  if (swcFiles.size() < dataSet.size()) {    if (Trace.swcChecksum) {      Trace.trace("areSwcFileChecksumsEqual: less files than before, not equal");    }    return false;  }  for (  Map.Entry<String,Long> entry : dataSet) {    String filename=entry.getKey();    Long dataFileLastModified=entry.getValue();    Long swcFileLastModified=null;    VirtualFile swcFile=swcFiles.get(filename);    if (swcFile != null) {      swcFileLastModified=new Long(swcFile.getLastModified());    }    if (!dataFileLastModified.equals(swcFileLastModified)) {      if (Trace.swcChecksum) {        Trace.trace("areSwcFileChecksumsEqual: not equal");        Trace.trace("filename = " + filename);        Trace.trace("last modified1 = " + dataFileLastModified);        Trace.trace("last modified2 = " + swcFileLastModified);      }      return false;    }  }  if (Trace.swcChecksum) {    Trace.trace("areSwcFileChecksumsEqual: equal");  }  return true;}  }
class C{  public CipherFrameHeaders(final int sequenceNumber,final byte[] nonce,final int frameContentLen,final boolean isFinal){  sequenceNumber_=sequenceNumber;  if (nonce == null) {    throw new AwsCryptoException("Nonce cannot be null.");  }  if (nonce.length > Constants.MAX_NONCE_LENGTH) {    throw new AwsCryptoException("Nonce length is greater than the maximum value of an unsigned byte.");  }  nonce_=nonce.clone();  isFinalFrame_=isFinal;  frameContentLength_=frameContentLen;}  }
class C{  void writeGlobalState(String reason,MetaData metaData) throws Exception {  logger.trace("[_global] writing state, reason [{}]",reason);  try {    globalStateFormat.write(metaData,metaData.version(),nodeEnv.nodeDataPaths());  } catch (  Throwable ex) {    logger.warn("[_global]: failed to write global state",ex);    throw new IOException("failed to write global state",ex);  }}  }
class C{  static Shape intersection(Rectangle r,Shape s){  return intersection(r,s,new GeneralPath());}  }
class C{  public int generate(){  int fromR=(Color.red(mFromColor));  int fromG=(Color.green(mFromColor));  int fromB=(Color.blue(mFromColor));  int toR=(Color.red(mToColor));  int toG=(Color.green(mToColor));  int toB=(Color.blue(mToColor));  int diffR=toR - fromR;  int diffG=toG - fromG;  int diffB=toB - fromB;  int R=fromR + (int)((diffR * mShade));  int G=fromG + (int)((diffG * mShade));  int B=fromB + (int)((diffB * mShade));  return Color.rgb(R,G,B);}  }
class C{  public CreateModelOptions build(){  return new CreateModelOptions(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String formatDate(Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  public void fillInList(final List<GeoPoint> pointList){  if (previous != null) {    previous.fillInList(pointList);  }  pointList.add(lastPoint);}  }
class C{  public void testReadVarint() throws Exception {  assertReadVarint(bytes(0x00),0);  assertReadVarint(bytes(0x01),1);  assertReadVarint(bytes(0x7f),127);  assertReadVarint(bytes(0xa2,0x74),(0x22 << 0) | (0x74 << 7));  assertReadVarint(bytes(0xbe,0xf7,0x92,0x84,0x0b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x0bL << 28));  assertReadVarint(bytes(0xbe,0xf7,0x92,0x84,0x1b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x1bL << 28));  assertReadVarint(bytes(0x80,0xe6,0xeb,0x9c,0xc3,0xc9,0xa4,0x49),(0x00 << 0) | (0x66 << 7) | (0x6b << 14)| (0x1c << 21)| (0x43L << 28)| (0x49L << 35)| (0x24L << 42)| (0x49L << 49));  assertReadVarint(bytes(0x9b,0xa8,0xf9,0xc2,0xbb,0xd6,0x80,0x85,0xa6,0x01),(0x1b << 0) | (0x28 << 7) | (0x79 << 14)| (0x42 << 21)| (0x3bL << 28)| (0x56L << 35)| (0x00L << 42)| (0x05L << 49)| (0x26L << 56)| (0x01L << 63));  assertReadVarintFailure(InvalidProtocolBufferException.malformedVarint(),bytes(0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00));  assertReadVarintFailure(InvalidProtocolBufferException.truncatedMessage(),bytes(0x80));}  }
class C{  public void updateRegisterHeaders(){  for (int i=0; i < getTabCount(); i++) {    final IGraphPanel component=(IGraphPanel)getComponentAt(i);    setTitleAt(i,CNameShortener.shorten(component.getModel().getGraph().getRawView()));  }}  }
class C{  public void testAddAndRemove(){  AuditServiceImpl instance=initialiseAuditService();  AuditServiceListener mockAuditServiceListener=EasyMock.createMock(AuditServiceListener.class);  instance.remove(mockAuditServiceListener);  instance.add(mockAuditServiceListener);  assertTrue(instance.getListeners().contains(mockAuditServiceListener));  instance.remove(mockAuditServiceListener);  assertTrue(instance.getListeners().isEmpty());}  }
class C{  @Override public int locations(){  return 9;}  }
class C{  private Object readLiteral() throws JSONException {  String literal=nextToInternal("{}[]/\\:,=;# \t\f");  if (literal.length() == 0) {    throw syntaxError("Expected literal value");  } else   if ("null".equalsIgnoreCase(literal)) {    return JSONObject.NULL;  } else   if ("true".equalsIgnoreCase(literal)) {    return Boolean.TRUE;  } else   if ("false".equalsIgnoreCase(literal)) {    return Boolean.FALSE;  }  if (literal.indexOf('.') == -1) {    int base=10;    String number=literal;    if (number.startsWith("0x") || number.startsWith("0X")) {      number=number.substring(2);      base=16;    } else     if (number.startsWith("0") && number.length() > 1) {      number=number.substring(1);      base=8;    }    try {      long longValue=Long.parseLong(number,base);      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        return (int)longValue;      } else {        return longValue;      }    } catch (    NumberFormatException e) {    }  }  try {    return Double.valueOf(literal);  } catch (  NumberFormatException ignored) {  }  return new String(literal);}  }
class C{  public void absoluteLocal(){  m00=FastMath.abs(m00);  m01=FastMath.abs(m01);  m02=FastMath.abs(m02);  m10=FastMath.abs(m10);  m11=FastMath.abs(m11);  m12=FastMath.abs(m12);  m20=FastMath.abs(m20);  m21=FastMath.abs(m21);  m22=FastMath.abs(m22);}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public boolean isEjected(){  return ejected;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public void hideList(){  ListView listView=(ListView)findViewById(R.id.recordListView);  listView.setVisibility(View.GONE);}  }
class C{  public void addTab(Button tab,Component component){  insertTab(tab,component,tabsContainer.getComponentCount());}  }
class C{  public int indexOf(final RoundedToolItem item){  checkWidget();  return items.indexOf(item);}  }
class C{  public Pair(IGameState s,MoveEvaluation m){  this.state=s;  this.move=m;}  }
class C{  public ServerOperationException(String message){  super(getServerMessage(message));}  }
class C{  protected Pattern(String regex,int flags){  namedPattern=regex;  groupInfo=extractGroupInfo(regex);  pattern=buildStandardPattern(regex,flags);}  }
class C{  static Object[] toArrayImpl(Collection<?> c){  return fillArray(c,new Object[c.size()]);}  }
class C{  public static <T>Predicate<T> nonNull(){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.723 -0400",hash_original_method="BE1D40ED821F3E25537E5C6AFC567836",hash_generated_method="4E1F618E74EC0ED8B817AEFE37FF45E5") public FileWriterWithEncoding(String filename,CharsetEncoder encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  public String toString(){  if (m_FilteredInstances == null) {    return "FilteredClassifier: No model built yet.";  }  String result="FilteredClassifier using " + getClassifierSpec() + " on data filtered through "+ getFilterSpec()+ "\n\nFiltered Header\n"+ m_FilteredInstances.toString()+ "\n\nClassifier Model\n"+ m_Classifier.toString();  return result;}  }
class C{  public void removeSupportedOptions(Set<String> unmatchedProcessorOptions){  unmatchedProcessorOptions.removeAll(supportedOptionNames);}  }
class C{  public boolean isAlwaysFalse(){  return compareType == Comparison.FALSE;}  }
class C{  public double[] attributeToDoubleArray(int index){  double[] result=new double[numInstances()];  for (int i=0; i < result.length; i++) {    result[i]=instance(i).value(index);  }  return result;}  }
class C{  public void chat(View view){  Intent intent=new Intent(this,LiveChatActivity.class);  startActivity(intent);}  }
class C{  public static RegressionDataSet loadR(Reader reader,double sparseRatio,int vectorLength) throws IOException {  return (RegressionDataSet)loadG(reader,sparseRatio,vectorLength,false);}  }
class C{  static boolean isHighUTF16Surrogate(char ch){  return ('\uD800' <= ch && ch <= '\uDBFF');}  }
class C{  public static BidiMap loadMapping(File inputFile) throws IOException {  ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream(inputFile));  try {    return (BidiMap)inputStream.readObject();  } catch (  ClassNotFoundException e) {    throw new IOException(e);  } finally {    IOUtils.closeQuietly(inputStream);  }}  }
class C{  public static void refreshMemory(final JFrame parent,final IDebugger debugger,final IAddress address,final int size){  Preconditions.checkNotNull(parent,"IE01451: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01452: Debugger argument can not be null");  if (!debugger.isConnected()) {    return;  }  try {    debugger.getMemoryMap();    debugger.readMemory(address,size);  } catch (  final DebugExceptionWrapper exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="E00080: " + "Could not refresh memory";    final String innerDescription=CUtilityFunctions.createDescription("The memory list and the memory data could not be refreshed.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The memory data was not refreshed."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);  }}  }
class C{  private void readUserInfoFromSharedPref(){  UserInfo.INSTANCE.setAuthToken(SharedPreferenceHelper.getString(R.string.pref_auth_token));  UserInfo.INSTANCE.setId(SharedPreferenceHelper.getString(R.string.pref_user_id));  UserInfo.INSTANCE.setEmail(SharedPreferenceHelper.getString(R.string.pref_email));  UserInfo.INSTANCE.setProfilePicture(SharedPreferenceHelper.getString(R.string.pref_profile_image));  UserInfo.INSTANCE.setFirstName(SharedPreferenceHelper.getString(R.string.pref_first_name));  UserInfo.INSTANCE.setMobileNumber(SharedPreferenceHelper.getString(R.string.pref_mobile_number));  UserInfo.INSTANCE.setDeviceId(SharedPreferenceHelper.getString(R.string.pref_device_id));  UserInfo.INSTANCE.setDescription(SharedPreferenceHelper.getString(R.string.pref_description));  SharedPreferenceHelper.set(R.string.pref_update_location,true);}  }
class C{  public static ActionBarBackground fadeDrawable(AppCompatActivity activity,Drawable newDrawable){  ActionBarBackground abColor=new ActionBarBackground(activity);  abColor.fadeBackground(newDrawable);  return abColor;}  }
class C{  public void testConnectorSecuritySettingsSSL_alias_2(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.alias.2.position.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ServerRuntimeException e) {    assertTrue("There should not be any exception thrown",false);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  resetSecuritySystemProperties();}  }
class C{  @Override public void validate(final IDescription cd){}  }
class C{  protected final void endOfInput(boolean reuseConnection) throws IOException {  if (state == STATE_CLOSED)   return;  if (state != STATE_READING_RESPONSE_BODY)   throw new IllegalStateException("state: " + state);  detachTimeout(timeout);  state=STATE_CLOSED;  if (streamAllocation != null) {    streamAllocation.streamFinished(!reuseConnection,Http1xStream.this);  }}  }
class C{  public NotificationChain basicSetUpdateExpr(Expression newUpdateExpr,NotificationChain msgs){  Expression oldUpdateExpr=updateExpr;  updateExpr=newUpdateExpr;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FOR_STATEMENT__UPDATE_EXPR,oldUpdateExpr,newUpdateExpr);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public ManagedConnection matchManagedConnections(final Set connectionSet,final Subject subject,final ConnectionRequestInfo cxRequestInfo) throws ResourceException {  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("matchManagedConnections(" + connectionSet + ", "+ subject+ ", "+ cxRequestInfo+ ")");  }  ActiveMQRAConnectionRequestInfo cri=getCRI((ActiveMQRAConnectionRequestInfo)cxRequestInfo);  ActiveMQRACredential credential=ActiveMQRACredential.getCredential(this,subject,cri);  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("Looking for connection matching credentials: " + credential);  }  for (  Object obj : connectionSet) {    if (obj instanceof ActiveMQRAManagedConnection) {      ActiveMQRAManagedConnection mc=(ActiveMQRAManagedConnection)obj;      ManagedConnectionFactory mcf=mc.getManagedConnectionFactory();      if ((mc.getUserName() == null || mc.getUserName() != null && mc.getUserName().equals(credential.getUserName())) && mcf.equals(this)) {        if (cri.equals(mc.getCRI())) {          if (ActiveMQRAManagedConnectionFactory.trace) {            ActiveMQRALogger.LOGGER.trace("Found matching connection: " + mc);          }          return mc;        }      }    }  }  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("No matching connection was found");  }  return null;}  }
class C{  public ListSelectionListener createListSelectionListener(JFileChooser fc){  return super.createListSelectionListener(fc);}  }
class C{  public final void checkMBeanPermission(final ObjectName name,final String actions) throws InstanceNotFoundException, SecurityException {  checkMBeanPermission(mbeanServer,name,actions);}  }
class C{  public String toString(){  return "TAG_ByteArray(\"" + name + "\"): size="+ data.length;}  }
class C{  private void verifyVolumeResults() throws Exception {  log.info("Verifying updated full copy Volume sresults for FullCopyVolumeReplicaStateMigration.");  for (  URI cloneURI : cloneURIs) {    Volume clone=_dbClient.queryObject(Volume.class,cloneURI);    Assert.assertNotNull("replicaState shouldn't be null",clone.getReplicaState());    Assert.assertEquals("replica state should be DETACHED",ReplicationState.DETACHED.name(),clone.getReplicaState());  }}  }
class C{  public ObjectMatrix3D assign(Object[][][] values){  if (this.isNoView) {    if (values.length != slices)     throw new IllegalArgumentException("Must have same number of slices: slices=" + values.length + "slices()="+ slices());    int i=slices * rows * columns - columns;    for (int slice=slices; --slice >= 0; ) {      Object[][] currentSlice=values[slice];      if (currentSlice.length != rows)       throw new IllegalArgumentException("Must have same number of rows in every slice: rows=" + currentSlice.length + "rows()="+ rows());      for (int row=rows; --row >= 0; ) {        Object[] currentRow=currentSlice[row];        if (currentRow.length != columns)         throw new IllegalArgumentException("Must have same number of columns in every row: columns=" + currentRow.length + "columns()="+ columns());        System.arraycopy(currentRow,0,this.elements,i,columns);        i-=columns;      }    }  } else {    super.assign(values);  }  return this;}  }
class C{  public boolean isMaster(){  return master;}  }
class C{  public static boolean rectCrossesCircle(final double rMinX,final double rMinY,final double rMaxX,final double rMaxY,final double centerLon,final double centerLat,final double radius){  return rectAnyCornersInCircle(rMinX,rMinY,rMaxX,rMaxY,centerLon,centerLat,radius) || lineCrossesSphere(rMinX,rMinY,0,rMaxX,rMinY,0,centerLon,centerLat,0,radius) || lineCrossesSphere(rMaxX,rMinY,0,rMaxX,rMaxY,0,centerLon,centerLat,0,radius)|| lineCrossesSphere(rMaxX,rMaxY,0,rMinX,rMaxY,0,centerLon,centerLat,0,radius)|| lineCrossesSphere(rMinX,rMaxY,0,rMinX,rMinY,0,centerLon,centerLat,0,radius);}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      DecimalFormat dft=new DecimalFormat("###.##");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public static String makeDescriptor(Method m){  Class[] params=m.getParameterTypes();  return makeDescriptor(params,m.getReturnType());}  }
class C{  public boolean canDeleteShardContent(ShardId shardId,IndexMetaData metaData){  assert shardId.getIndex().equals(metaData.getIndex());  final Settings indexSettings=buildIndexSettings(metaData);  return canDeleteShardContent(shardId,indexSettings);}  }
class C{  public Duration plusNanos(long nanosToAdd){  return plus(0,nanosToAdd);}  }
class C{  public static void main(String[] args) throws IOException {  int runTime=Integer.parseInt(args[0]);  int repeat=Integer.parseInt(args[1]);  for (int i=runTime; i < repeat; ++i) {    boolean enableOutput=true;    boolean outputToFile=true;    String inputFolder=ContainerOverbooking.class.getClassLoader().getResource("workload/planetlab").getPath();    String outputFolder="~/Results";    String vmAllocationPolicy="MSThreshold-Under_0.80_0.70";    String containerSelectionPolicy="Cor";    String containerAllocationPolicy="FirstFit";    String hostSelectionPolicy="FirstFit";    String vmSelectionPolicy="VmMaxC";    int OverBookingFactor=80;    new RunnerInitiator(enableOutput,outputToFile,inputFolder,outputFolder,vmAllocationPolicy,containerAllocationPolicy,vmSelectionPolicy,containerSelectionPolicy,hostSelectionPolicy,OverBookingFactor,Integer.toString(i),outputFolder);  }}  }
class C{  public static Exchange newInstance(){  final Exchange returnInstance=new Exchange();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public void enable(boolean on) throws GondolaException {  logger.info("[{}-{}] {}",gondola.getHostId(),memberId,on ? "Enabling" : "Disabling");  enabled=on;  if (isLeader()) {    becomeFollower(-1);  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  Object o;  o=e.getSource();  if (o == menuFileOpen) {    loadFile();  } else   if (o == menuFileSave) {    saveFile();  } else   if (o == menuFileSaveAs) {    saveFileAs();  } else   if (o == menuFileClose) {    closeFile();  } else   if (o == menuFileCloseAll) {    closeAllFiles();  } else   if (o == menuFileProperties) {    showProperties();  } else   if (o == menuFileExit) {    close();  } else   if (o == menuEditUndo) {    undo();  } else   if (o == menuEditCopy) {    copyContent();  } else   if (o == menuEditSearch) {    search();  } else   if (o == menuEditClearSearch) {    clearSearch();  } else   if (o == menuEditDeleteAttribute) {    deleteAttribute(false);  } else   if (o == menuEditDeleteAttributes) {    deleteAttribute(true);  } else   if (o == menuEditRenameAttribute) {    renameAttribute();  } else   if (o == menuEditAttributeAsClass) {    attributeAsClass();  } else   if (o == menuEditDeleteInstance) {    deleteInstance(false);  } else   if (o == menuEditDeleteInstances) {    deleteInstance(true);  } else   if (o == menuEditSortInstances) {    sortInstances();  } else   if (o == menuViewAttributes) {    showAttributes();  } else   if (o == menuViewValues) {    showValues();  } else   if (o == menuViewOptimalColWidths) {    setOptimalColWidths();  }  updateMenu();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(FIXED);  builder.addAttribute(HREF);  builder.addAttribute(SCHEME);  builder.addElement(Category.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);}  }
class C{  public static String[] infoAll(AerospikeClient client,String infoString){  String[] messages=new String[client.getNodes().length];  int index=0;  for (  Node node : client.getNodes()) {    messages[index]=Info.request(node,infoString);  }  return messages;}  }
class C{  public void pop(){  this.elements.remove(this.elements.size() - 1);}  }
class C{  public String toString(){  return this.sourcePackageBO.toString();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static <E>AutoSortedCollection<E> createAutoSortedCollection(int initial,Comparator<E> comparator){  Validate.notNull(comparator,"Comparator can't be null.");  return new AutoListSortedCollection<>(new ObjectArrayList<>(initial),comparator);}  }
class C{  public CRTest(String name){  super(name);}  }
class C{  public synchronized CommListenerFactory createCommListenerFactory(String name,CommCore commCore) throws IOException {  CommListenerFactory factory=null;  String className=listenerExtensionClassNames.get(name);  if (className != null) {    try {      Class<?> c=loadExtensionClass(className);      if (CommListenerFactory.class.isAssignableFrom(c)) {        Class<? extends CommListenerFactory> fClass=(Class<? extends CommListenerFactory>)c;        factory=fClass.getConstructor(CommCore.class).newInstance(commCore);      }    } catch (    ClassNotFoundException e) {      throw new IOException(e);    }catch (    InstantiationException e) {      throw new IOException(e);    }catch (    IllegalAccessException e) {      throw new IOException(e);    }catch (    NoSuchMethodException e) {      throw new IOException(e);    }catch (    InvocationTargetException e) {      throw new IOException(e);    }  }  return factory;}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  public static void main(String[] args) throws Exception {  XMLDocument doc;  if (args.length > 0) {    doc=new XMLDocument();    doc.read(args[0]);    doc.print();    if (args.length > 1) {      doc.write(args[1]);    }  }}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  private boolean searchNextPc(final BigInteger pc,final HashMap<BigInteger,List<ReilInstruction>> instructions,final String programCounter){  for (int i=0; i < 10; i++) {    final BigInteger current=pc.add(BigInteger.valueOf(i));    if (instructions.containsKey(nativeToReil(current))) {      setRegister(programCounter,current,OperandSize.DWORD,ReilRegisterStatus.DEFINED);      return true;    }  }  return false;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public IMultiPoint nearest(IMultiPoint x){  double dist=Integer.MAX_VALUE;  int idx=-1;  double[] xraw=x.raw();  for (int i=0; i < points.size(); i++) {    double d=0;    double[] rawpt=points.get(i);    for (int j=0; j < xraw.length; j++) {      double delta=xraw[j] - rawpt[j];      d+=delta * delta;    }    d=Math.sqrt(d);    if (d < dist) {      dist=d;      idx=i;    }  }  return results[idx];}  }
class C{  public double evaluate(Assignment input){  Assignment input2=(functions.isEmpty()) ? input : input.copy();  for (  FunctionalTemplate f : functions) {    CustomFunction fu=f.getFunction();    Value result=f.getValue(input2);    input2.addPair((fu.getName() + f.hashCode()),result);  }  Expression exp2=new Expression(exp);  exp2.setVariables(getDoubles(input2));  double result=exp2.evaluate();  return result;}  }
class C{  public static Key distance(Key a,Key b){  Key x=new Key();  for (int i=0; i < a.hash.length; i++) {    x.hash[i]=(byte)(a.hash[i] ^ b.hash[i]);  }  return x;}  }
class C{  public <T>void publisherPath(String path,Class<T> api,Result<T> result){  String address=address(path);  ServicesAmp manager=ServicesAmp.current();  ServiceRefAmp pubRef=manager.service(address);  result.ok(pubRef.as(api));}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  @SuppressWarnings("unchecked") protected void rehash(int newCapacity){  int oldCapacity=objects.length;  @SuppressWarnings("unchecked") E[] newObjects=(E[])new Object[newCapacity];  for (int ix=0; ix < oldCapacity; ix++) {    Object o=objects[ix];    if (o == null || o == deletedObject)     continue;    int hash=o.hashCode();    int index=(hash & 0x7FFFFFFF) % newCapacity;    int offset=1;    while (newObjects[index] != null) {      index=((index + offset) & 0x7FFFFFFF) % newCapacity;      offset=offset * 2 + 1;      if (offset == -1)       offset=2;    }    newObjects[index]=(E)o;  }  objects=newObjects;  freecells=objects.length - elements;}  }
class C{  public static Document transformWWDotNetLayerSetConfigDocument(Element domElement){  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  XPath xpath=WWXML.makeXPath();  Element[] els=WWXML.getElements(domElement,"/LayerSet/QuadTileSet",xpath);  if (els == null || els.length == 0) {    return null;  }  Document outDoc=WWXML.createDocumentBuilder(true).newDocument();  transformWWDotNetLayerSet(els[0],outDoc,xpath);  return outDoc;}  }
class C{  private static void createRow(Long chequeID,LocalDate receiptDate,LocalDate returnedToClientDate,String brandName,String fullname,double income,double profit){  Row row1=sheet.createRow(rowID++);  Cell cell11=row1.createCell(0);  cell11.setCellValue(chequeID);  Cell cell12=row1.createCell(1);  cell12.setCellValue(Date.from(receiptDate.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant()));  cell12.setCellStyle(dateStyle);  Cell cell13=row1.createCell(2);  cell13.setCellValue(Date.from(returnedToClientDate.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant()));  cell13.setCellStyle(dateStyle);  Cell cell14=row1.createCell(3);  cell14.setCellValue(brandName);  Cell cell15=row1.createCell(4);  cell15.setCellValue(fullname);  Cell cell16=row1.createCell(5);  cell16.setCellStyle(rubleStyle);  cell16.setCellValue(income);  Cell cell17=row1.createCell(6);  cell17.setCellValue(profit);  cell17.setCellStyle(rubleStyle);}  }
class C{  public static InetAddress increment(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0xff) {    addr[i]=0;    i--;  }  Preconditions.checkArgument(i >= 0,"Incrementing %s would wrap.",address);  addr[i]++;  return bytesToInetAddress(addr);}  }
class C{  public Document read(File file) throws DocumentException {  try {    InputSource source=new InputSource(new FileInputStream(file));    if (this.encoding != null) {      source.setEncoding(this.encoding);    }    String path=file.getAbsolutePath();    if (path != null) {      StringBuffer sb=new StringBuffer("file://");      if (!path.startsWith(File.separator)) {        sb.append("/");      }      path=path.replace('\\','/');      sb.append(path);      source.setSystemId(sb.toString());    }    return read(source);  } catch (  FileNotFoundException e) {    throw new DocumentException(e.getMessage(),e);  }}  }
class C{  public static final boolean isUseOfElement(ExpressionTree node){  node=TreeUtils.skipParens(node);switch (node.getKind()) {case IDENTIFIER:case MEMBER_SELECT:case METHOD_INVOCATION:case NEW_CLASS:    return true;default :  return false;}}  }
class C{  private boolean isClosed(){  if (!verifyReader) {    return false;  }  try {    return !br.ready();  } catch (  IOException e) {    return true;  }}  }
class C{  public SolutionUser(PrincipalId id,SolutionDetail detail,boolean disabled){  this(id,null,null,detail,disabled);}  }
class C{  public CAppendAndOperatorAction(final CCriteriumTree tree,final CCriteriumTreeNode parent){  super("Append AND");  m_tree=tree;  m_parent=parent;}  }
class C{  public void tagFreeCharacter(int charId) throws IOException {  if (tags != null) {    tags.tagFreeCharacter(charId);  }}  }
class C{  public T caseTStructField(TStructField object){  return null;}  }
class C{  public String toString(){  return m_data;}  }
class C{  private Workflow.Method createDetachMirrorMethod(URI vplexURI,URI vplexVolumeURI,URI mirrorVolumeURI,URI cgURI){  return new Workflow.Method(DETACH_MIRROR_METHOD_NAME,vplexURI,vplexVolumeURI,mirrorVolumeURI,cgURI);}  }
class C{  public Chronology withUTC(){  return INSTANCE_UTC;}  }
class C{  public LauncherEdgeEffect(){  mPaint.setAntiAlias(true);  mPaint.setStyle(Paint.Style.FILL);  mInterpolator=new DecelerateInterpolator();}  }
class C{  public Select.SelectForExample SELECT(){  return TestRecord.SELECT().selectForExample(this.example);}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  public static void unpackKey(MemoryStoreData storeData){  unpackKey(storeData.storageDescription,storeData.rawKey,storeData.persistitKey);}  }
class C{  public static AVList openSpatialImage(File imageFile,int interpolation_mode) throws IOException {  AVList values=new AVListImpl();  BufferedImage image;  Sector sector;  if ((imageFile.getName().toLowerCase().endsWith(".tiff") || (imageFile.getName().toLowerCase().endsWith(".tif")))) {    GeotiffReader reader=new GeotiffReader(imageFile);    int imageIndex=0;    image=reader.read(imageIndex);    if (reader.isGeotiff(imageIndex)) {      return handleGeotiff(image,reader,imageIndex,interpolation_mode);    }  }  image=ImageIO.read(imageFile);  if (image == null) {    String message=Logging.getMessage("generic.ImageReadFailed",imageFile);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  File[] worldFiles=WorldFile.getWorldFiles(imageFile.getAbsoluteFile());  if (worldFiles == null || worldFiles.length == 0) {    String message=Logging.getMessage("WorldFile.WorldFileNotFound",imageFile.getAbsolutePath());    Logging.logger().severe(message);    throw new FileNotFoundException(message);  }  values.setValue(AVKey.IMAGE,image);  WorldFile.decodeWorldFiles(worldFiles,values);  sector=(Sector)values.getValue(AVKey.SECTOR);  if (sector == null)   ImageUtil.reprojectUtmToGeographic(values,interpolation_mode);  sector=(Sector)values.getValue(AVKey.SECTOR);  if (sector == null) {    String message="Problem generating bounding sector for the image";    throw new WWRuntimeException(message);  }  values.setValue(AVKey.SECTOR,sector);  return values;}  }
class C{  public void recreateReactContextInBackground(){  Assertions.assertCondition(mHasStartedCreatingInitialContext,"recreateReactContextInBackground should only be called after the initial " + "createReactContextInBackground call.");  recreateReactContextInBackgroundInner();}  }
class C{  public PlayerContainerChangeStateEvent(Player who,PlayerContainerData oldData,PlayerContainerData newData){  super(who);  this.oldData=oldData;  this.newData=newData;}  }
class C{  public static void main(String[] arguments) throws IOException, CryptoError {  String privateKeyPath=arguments[0];  String password=arguments[1];  String encryptedPath=arguments[2];  String privateKeyData=Files.toString(new File(privateKeyPath),Charsets.UTF_8);  KeyczarKeyFactory keyFactory=new KeyczarKeyFactory();  PrivateKeyInterface key=keyFactory.loadEncryptedPrivateKey(privateKeyData,password);  String encryptedData=Files.toString(new File(encryptedPath),Charsets.UTF_8);  System.out.println(key.decrypt(encryptedData));}  }
class C{  public void destroy(){  try {    logger.info("Shutdown meta db");    DriverManager.getConnection("jdbc:derby:;shutdown=true");  } catch (  SQLException ex) {    logger.log(Level.WARNING,"Exception",ex);    if ("XJ015".equalsIgnoreCase(ex.getSQLState())) {      logger.info("meta DB has been shutdown.");    }  }}  }
class C{  Operation findBestArcToReverse(BayesNet bayesNet,Instances instances,Operation oBestOperation) throws Exception {  int nNrOfAtts=instances.numAttributes();  for (int iNode=0; iNode < nNrOfAtts; iNode++) {    ParentSet parentSet=bayesNet.getParentSet(iNode);    for (int iParent=0; iParent < parentSet.getNrOfParents(); iParent++) {      int iTail=parentSet.getParent(iParent);      if (reverseArcMakesSense(bayesNet,instances,iNode,iTail) && bayesNet.getParentSet(iTail).getNrOfParents() < m_nMaxNrOfParents) {        Operation oOperation=new Operation(parentSet.getParent(iParent),iNode,Operation.OPERATION_REVERSE);        double fScore=calcScoreWithReversedParent(oOperation.m_nHead,oOperation.m_nTail);        if (fScore > oBestOperation.m_fScore) {          if (isNotTabu(oOperation)) {            oBestOperation=oOperation;            oBestOperation.m_fScore=fScore;          }        }      }    }  }  return oBestOperation;}  }
class C{  private String tenantHeader(RoutingContext ctx){  String auth=ctx.request().getHeader(XOkapiHeaders.AUTHORIZATION);  String tok=ctx.request().getHeader(XOkapiHeaders.TOKEN);  if (auth != null) {    Pattern pattern=Pattern.compile("Bearer\\s+(.+)");    Matcher matcher=pattern.matcher(auth);    if (matcher.find() && matcher.groupCount() > 0) {      auth=matcher.group(1);    }  }  if (auth != null && tok != null && auth != tok) {    responseText(ctx,400).end("Different tokens in Authentication and X-Okapi-Token. Use only one of them");    return null;  }  if (tok == null && auth != null) {    ctx.request().headers().add(XOkapiHeaders.TOKEN,auth);    ctx.request().headers().remove(XOkapiHeaders.AUTHORIZATION);    logger.debug("Okapi: Moved Authorization header to X-Okapi-Token");  }  String tenantId=ctx.request().getHeader(XOkapiHeaders.TENANT);  if (tenantId == null) {    tenantId=new OkapiToken(ctx).getTenant();    if (tenantId != null && !tenantId.isEmpty()) {      ctx.request().headers().add(XOkapiHeaders.TENANT,tenantId);      logger.debug("Okapi: Recovered tenant from token: '" + tenantId + "'");    }  }  if (tenantId == null) {    responseText(ctx,403).end("Missing Tenant");    return null;  }  return tenantId;}  }
class C{  protected synchronized void releaseLock(){  colorChooserLock=false;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void printString(String v) throws IOException {  printString(v,0,v.length());}  }
class C{  private int chiSquaredUniformTest(SetDBIDs[] parts,long[] marked,int card){  final int binCount=parts.length - card;  int max=0, maxpos=-1;  MeanVariance mv=new MeanVariance();  for (int i=0; i < parts.length; i++) {    if (BitsUtil.get(marked,i)) {      continue;    }    final int binSupport=parts[i].size();    mv.put(binSupport);    if (binSupport > max) {      max=binSupport;      maxpos=i;    }  }  if (mv.getCount() < 1. || !(mv.getNaiveVariance() > 0.)) {    return -1;  }  final double chiSquare=mv.getNaiveVariance() / mv.getMean();  final double test=ChiSquaredDistribution.cdf(chiSquare,Math.max(1,binCount - card - 1));  if ((1. - alpha) < test) {    return maxpos;  }  return -1;}  }
class C{  private void cleanupTreeNodes(){  if (m_customNodes == null || m_customNodes.size() == 0)   return;  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"cleanupTreeNodes",m_direction);  for (  ADObject_TreeNode customNode : m_customNodes) {    m_totalUpd=new Integer(m_totalUpd.intValue() + 1);    if (customNode.adjustNodeLocation(m_target))     m_counterUpd=new Integer(m_counterUpd.intValue() + 1);  }  logResults();}  }
class C{  public void test_getQ(){  DSAParams params=new DSAParameterSpec(p,q,g);  assertEquals("Invalid Q",q,params.getQ());}  }
class C{  public static boolean isBlank(String str){  return (str == null || str.trim().length() == 0);}  }
class C{  public void onUpdate(Project.NameKey project,Boolean oldValue,Boolean newValue){}  }
class C{  public static void main(String[] args){  double from=50000;  double to=60000;  double interval=50;  System.out.println("\nTaxable      Single      Married Joint       Married        Head of\n" + "Income                   or Qualifying       Separate       a House\n" + "                         Widow(er)\n"+ "---------------------------------------------------------------------");  for (double taxableIncome=from; taxableIncome <= to; taxableIncome+=interval) {    System.out.printf("%-13.0f",taxableIncome);    System.out.printf("%-12d",Math.round(computeTax(0,taxableIncome)));    System.out.printf("%-20d",Math.round(computeTax(1,taxableIncome)));    System.out.printf("%-15d",Math.round(computeTax(2,taxableIncome)));    System.out.printf("%-10d\n",Math.round(computeTax(3,taxableIncome)));  }}  }
class C{  private void populateRecyclerList(){  talkAdapter.setCycle(cycle);  talkAdapter.setIncomingOutgoing(dataUsage);  talkAdapter.setDividerHeader(new RecyclerDivider(resources.getString(R.string.add_to_plan_header),0));  List<Offer> talkOffers=new ArrayList<>();  for (  Offer offer : acceptedOffers) {    if ((offer.getType()) == PlanConstants.TALK) {      talkOffers.add(offer);    }  }  talkAdapter.setCardOffers(talkOffers);}  }
class C{  public void println(Writer writer) throws IOException {  print(writer);  writer.write('\n');}  }
class C{  public GPUImageFilterGroup(){  this(null);}  }
class C{  public synchronized boolean unregisterAllFrames(){  frameList.removeAllElements();  frameListDisplay.setListData(frameList);  return true;}  }
class C{  public static WebElement swipeUpWaitVisibleAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By swipeElement,By elementVisible,int waitTimeInSeconds,int quantity,int pressInMilliSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(swipeElement);  Preconditions.checkNotNull(elementVisible);  return swipeVerticalWaitVisibleAfter(driver,augmentedFunctions,swipeElement,elementVisible,waitTimeInSeconds,-BIG_NUMBER,quantity,pressInMilliSeconds);}  }
class C{  protected ReactionImpl(){  super();}  }
class C{  public SparqlTypeErrorException(){  this(0,SPARQL_TYPE_ERROR_0000);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.EMBEDDED ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public Collection<K> keySet(){  return Collections.unmodifiableCollection(objects.keySet());}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForUriComponentTag instance=new ForUriComponentTag();  String value="&amp;=test";  String expected="%26amp%3B%3Dtest";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.610 -0500",hash_original_method="694D318D728E7460C6E6317B80FB1826",hash_generated_method="89B3661221734219BB93880F76201C32") private static int countDuplicates(StackTraceElement[] currentStack,StackTraceElement[] parentStack){  int duplicates=0;  int parentIndex=parentStack.length;  for (int i=currentStack.length; --i >= 0 && --parentIndex >= 0; ) {    StackTraceElement parentFrame=parentStack[parentIndex];    if (parentFrame.equals(currentStack[i])) {      duplicates++;    } else {      break;    }  }  return duplicates;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.813 -0500",hash_original_method="76AC245ADF42DED69B554EDA9FD556DE",hash_generated_method="8E31E6F75E82C3AA40CE537898BC3EF1") public HttpRoute(HttpHost target,InetAddress local,boolean secure){  this(local,target,null,secure,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  @Override public void addInstanceListener(InstanceListener dsl){  m_instanceListeners.add(dsl);}  }
class C{  public static Pair<View,String>[] createSafeTransitionParticipants(@NonNull Activity activity,boolean includeStatusBar,@Nullable Pair... otherParticipants){  View decor=activity.getWindow().getDecorView();  View statusBar=null;  if (includeStatusBar) {    statusBar=decor.findViewById(android.R.id.statusBarBackground);  }  View navBar=decor.findViewById(android.R.id.navigationBarBackground);  List<Pair> participants=new ArrayList<>(3);  addNonNullViewToTransitionParticipants(statusBar,participants);  addNonNullViewToTransitionParticipants(navBar,participants);  if (otherParticipants != null && !(otherParticipants.length == 1 && otherParticipants[0] == null)) {    participants.addAll(Arrays.asList(otherParticipants));  }  return participants.toArray(new Pair[participants.size()]);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.wallPaint=SerialUtilities.readPaint(stream);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ERROR_CODE;case 2:  return STRUCT_THING;default :return null;}}  }
class C{  public List<FlashcardEntity> _queryLessonEntity_FlashcardEntityList(Long lessonId){synchronized (this) {    if (lessonEntity_FlashcardEntityListQuery == null) {      QueryBuilder<FlashcardEntity> queryBuilder=queryBuilder();      queryBuilder.where(Properties.LessonId.eq(null));      lessonEntity_FlashcardEntityListQuery=queryBuilder.build();    }  }  Query<FlashcardEntity> query=lessonEntity_FlashcardEntityListQuery.forCurrentThread();  query.setParameter(0,lessonId);  return query.list();}  }
class C{  public static Data loadFromStack(final ItemStack stack){  return loadFromNBT(stack.getTagCompound());}  }
class C{  public SocketRunnable(SocketWrapper socketWrapper,Object sync){  this.socketWrapper=socketWrapper;  this.sync=sync;}  }
class C{  public void testBinaryResultSetNumericTypes() throws Exception {  String unsignedMinimum="0";  String tiMinimum="-128";  String tiMaximum="127";  String utiMaximum="255";  String siMinimum="-32768";  String siMaximum="32767";  String usiMaximum="65535";  String miMinimum="-8388608";  String miMaximum="8388607";  String umiMaximum="16777215";  String iMinimum="-2147483648";  String iMaximum="2147483647";  String uiMaximum="4294967295";  String biMinimum="-9223372036854775808";  String biMaximum="9223372036854775807";  String ubiMaximum="18446744073709551615";  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBinaryResultSetNumericTypes");    this.stmt.executeUpdate("CREATE TABLE testBinaryResultSetNumericTypes(rowOrder TINYINT, ti TINYINT,uti TINYINT UNSIGNED, si SMALLINT," + "usi SMALLINT UNSIGNED, mi MEDIUMINT,umi MEDIUMINT UNSIGNED, i INT, ui INT UNSIGNED,bi BIGINT, ubi BIGINT UNSIGNED)");    PreparedStatement inserter=this.conn.prepareStatement("INSERT INTO testBinaryResultSetNumericTypes VALUES (?,?,?,?,?,?,?,?,?,?,?)");    inserter.setInt(1,0);    inserter.setString(2,tiMinimum);    inserter.setString(3,unsignedMinimum);    inserter.setString(4,siMinimum);    inserter.setString(5,unsignedMinimum);    inserter.setString(6,miMinimum);    inserter.setString(7,unsignedMinimum);    inserter.setString(8,iMinimum);    inserter.setString(9,unsignedMinimum);    inserter.setString(10,biMinimum);    inserter.setString(11,unsignedMinimum);    inserter.executeUpdate();    inserter.setInt(1,1);    inserter.setString(2,tiMaximum);    inserter.setString(3,utiMaximum);    inserter.setString(4,siMaximum);    inserter.setString(5,usiMaximum);    inserter.setString(6,miMaximum);    inserter.setString(7,umiMaximum);    inserter.setString(8,iMaximum);    inserter.setString(9,uiMaximum);    inserter.setString(10,biMaximum);    inserter.setString(11,ubiMaximum);    inserter.executeUpdate();    PreparedStatement selector=this.conn.prepareStatement("SELECT * FROM testBinaryResultSetNumericTypes ORDER by rowOrder ASC");    this.rs=selector.executeQuery();    assertTrue(this.rs.next());    assertTrue(this.rs.getString(2).equals(tiMinimum));    assertTrue(this.rs.getString(3).equals(unsignedMinimum));    assertTrue(this.rs.getString(4).equals(siMinimum));    assertTrue(this.rs.getString(5).equals(unsignedMinimum));    assertTrue(this.rs.getString(6).equals(miMinimum));    assertTrue(this.rs.getString(7).equals(unsignedMinimum));    assertTrue(this.rs.getString(8).equals(iMinimum));    assertTrue(this.rs.getString(9).equals(unsignedMinimum));    assertTrue(this.rs.getString(10).equals(biMinimum));    assertTrue(this.rs.getString(11).equals(unsignedMinimum));    assertTrue(this.rs.next());    assertTrue(this.rs.getString(2) + " != " + tiMaximum,this.rs.getString(2).equals(tiMaximum));    assertTrue(this.rs.getString(3) + " != " + utiMaximum,this.rs.getString(3).equals(utiMaximum));    assertTrue(this.rs.getString(4) + " != " + siMaximum,this.rs.getString(4).equals(siMaximum));    assertTrue(this.rs.getString(5) + " != " + usiMaximum,this.rs.getString(5).equals(usiMaximum));    assertTrue(this.rs.getString(6) + " != " + miMaximum,this.rs.getString(6).equals(miMaximum));    assertTrue(this.rs.getString(7) + " != " + umiMaximum,this.rs.getString(7).equals(umiMaximum));    assertTrue(this.rs.getString(8) + " != " + iMaximum,this.rs.getString(8).equals(iMaximum));    assertTrue(this.rs.getString(9) + " != " + uiMaximum,this.rs.getString(9).equals(uiMaximum));    assertTrue(this.rs.getString(10) + " != " + biMaximum,this.rs.getString(10).equals(biMaximum));    assertTrue(this.rs.getString(11) + " != " + ubiMaximum,this.rs.getString(11).equals(ubiMaximum));    assertTrue(!this.rs.next());  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBinaryResultSetNumericTypes");  }}  }
class C{  @SuppressWarnings("deprecation") private static final URL toURL(String location,boolean file){  if (file) {    File f=new File(location);    if (f.exists()) {      try {        return f.toURL();      } catch (      MalformedURLException murl) {        return null;      }    } else {      return null;    }  } else {    return getURL(location);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.IDENTIFIER_REF_IM___GET_ID_IM:    return getId_IM();case ImPackage.IDENTIFIER_REF_IM___SET_ID_IM__SYMBOLTABLEENTRY:  setId_IM((SymbolTableEntry)arguments.get(0));return null;case ImPackage.IDENTIFIER_REF_IM___GET_ID:return getId();case ImPackage.IDENTIFIER_REF_IM___SET_ID__IDENTIFIABLEELEMENT:setId((IdentifiableElement)arguments.get(0));return null;case ImPackage.IDENTIFIER_REF_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET:return getOriginalTargetOfRewiredTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public MultiImageElementViewport(float w,float h){  this.width=w;  this.height=h;}  }
class C{  public GdbInfoLine infoLine() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("info line");  return GdbInfoLine.parse(gdbOutput);}  }
class C{  @Override public void addPages(){  page=new NewGraphPage(getSelection());  addPage(page);}  }
class C{  public String baseType(){  if (!mutable()) {    return type;  } else {    return baseTypeHelper(type);  }}  }
class C{  public boolean isCellEditable(EventObject anEvent){  return false;}  }
class C{  public void showDialog(Path path){  this.defaultStartPoint=path;  view.showDialog();  view.clearInput();  view.setPathDirectory(path.toString());}  }
class C{  public static void main(String[] argv){  runClassifier(new RandomizableFilteredClassifier(),argv);}  }
class C{  public FittingFunction(int[] target,double[][] regressors){  this.target=target;  this.regressors=regressors;}  }
class C{  public static void fileWriter(String outfile,String contents,boolean append){  try {    BufferedWriter bw=new BufferedWriter(new FileWriter(new File(outfile),append));    bw.write(contents);    bw.close();  } catch (  Exception e) {  }}  }
class C{  public static short[] join(short[]... arrays){  if (arrays.length == 0) {    return EMPTY_SHORTS;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  short[] notNull=null;  int finalSize=0;  int nullArrays=0;  ShortArrayList list=new ShortArrayList(arrays.length * 10);  for (  short[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_SHORTS;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new short[list.size()]);}  }
class C{  public static long sizeOf(short[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + (long)Short.BYTES * arr.length);}  }
class C{  private int unsignedBytesToInt(byte b0,byte b1){  return (unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8));}  }
class C{  public Builder backgroundColor(int backgroundColor){  this.backgroundColor=backgroundColor;  return this;}  }
class C{  public boolean hasExceptionHandler(){  return (this.exceptionHandler != null);}  }
class C{  private UnManagedFileSystem createUnManagedFileSystem(UnManagedFileSystem unManagedFileSystem,String unManagedFileSystemNativeGuid,StorageSystem storageSystem,StoragePool pool,NASServer nasServer,FileShare fileSystem) throws IOException, IsilonCollectionException {  if (null == unManagedFileSystem) {    unManagedFileSystem=new UnManagedFileSystem();    unManagedFileSystem.setId(URIUtil.createId(UnManagedFileSystem.class));    unManagedFileSystem.setNativeGuid(unManagedFileSystemNativeGuid);    unManagedFileSystem.setStorageSystemUri(storageSystem.getId());    if (null != pool) {      unManagedFileSystem.setStoragePoolUri(pool.getId());    }    unManagedFileSystem.setHasExports(false);    unManagedFileSystem.setHasShares(false);    unManagedFileSystem.setHasNFSAcl(false);  }  if (null == unManagedFileSystem.getExtensions()) {    unManagedFileSystem.setExtensions(new StringMap());  }  Map<String,StringSet> unManagedFileSystemInformation=new HashMap<String,StringSet>();  StringMap unManagedFileSystemCharacteristics=new StringMap();  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_SNAP_SHOT.toString(),FALSE);  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),TRUE);  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),FALSE);  if (null != pool) {    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_POOL.toString(),pools);    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(_dbClient,pool.getId(),unManagedFileSystemCharacteristics.get(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString()));    _log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedFileSystem.getSupportedVpoolUris().clear();    } else {      unManagedFileSystem.getSupportedVpoolUris().replace(matchedVPools);      _log.info("Replaced Pools :" + Joiner.on("\t").join(unManagedFileSystem.getSupportedVpoolUris()));    }  }  if (null != nasServer) {    StringSet storagePorts=new StringSet();    if (nasServer.getStoragePorts() != null && !nasServer.getStoragePorts().isEmpty()) {      storagePorts.addAll(nasServer.getStoragePorts());      unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_PORT.toString(),storagePorts);      _log.info("StoragePorts :" + Joiner.on("\t").join(storagePorts));    }    StringSet nasServerSet=new StringSet();    nasServerSet.add(nasServer.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NAS.toString(),nasServerSet);    _log.debug("nasServer uri id {}",nasServer.getId().toString());  }  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_INGESTABLE.toString(),TRUE);  if (null != storageSystem) {    StringSet systemTypes=new StringSet();    systemTypes.add(storageSystem.getSystemType());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.SYSTEM_TYPE.toString(),systemTypes);  }  StringSet fsPath=new StringSet();  fsPath.add(fileSystem.getNativeId());  StringSet fsMountPath=new StringSet();  fsMountPath.add(fileSystem.getMountPath());  StringSet fsName=new StringSet();  fsName.add(fileSystem.getName());  StringSet fsId=new StringSet();  fsId.add(fileSystem.getNativeId());  unManagedFileSystem.setLabel(fileSystem.getName());  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NAME.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.NATIVE_ID.toString(),fsId);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.DEVICE_LABEL.toString(),fsName);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PATH.toString(),fsPath);  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.MOUNT_PATH.toString(),fsMountPath);  StringSet provisionedCapacity=new StringSet();  long capacity=0;  if (fileSystem.getCapacity() != null) {    capacity=fileSystem.getCapacity();  }  provisionedCapacity.add(String.valueOf(capacity));  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),provisionedCapacity);  StringSet allocatedCapacity=new StringSet();  long usedCapacity=0;  if (fileSystem.getUsedCapacity() != null) {    usedCapacity=fileSystem.getUsedCapacity();  }  allocatedCapacity.add(String.valueOf(usedCapacity));  unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  String quotaId=fileSystem.getExtensions().get(QUOTA);  if (quotaId != null) {    unManagedFileSystem.getExtensions().put(QUOTA,quotaId);  }  _log.debug("Quota : {}  : {}",quotaId,fileSystem.getPath());  unManagedFileSystem.addFileSystemInformation(unManagedFileSystemInformation);  unManagedFileSystem.addFileSystemCharacterstcis(unManagedFileSystemCharacteristics);  unManagedFileSystem.setFsUnManagedExportMap(new UnManagedFSExportMap());  unManagedFileSystem.setUnManagedSmbShareMap(new UnManagedSMBShareMap());  return unManagedFileSystem;}  }
class C{  public void testOneArgMethod() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getMethod("oneArgMethod",double.class));  Expression expr=JavascriptCompiler.compile("foo(3)",functions,getClass().getClassLoader());  assertEquals(6,expr.evaluate(0,null),DELTA);}  }
class C{  static public boolean isValid(String[] values){  try {    if (values[3] == "")     return false;    if (values[2].equalsIgnoreCase("BYTE_Max") || values[2].equalsIgnoreCase("BYTE_Min") || values[2].equalsIgnoreCase("BYTE_Max_Plus")|| values[2].equalsIgnoreCase("BYTE_Min_Minus")|| values[2].equalsIgnoreCase("SHORT_Max")|| values[2].equalsIgnoreCase("SHORT_Min")|| values[2].equalsIgnoreCase("SHORT_Max_Plus")|| values[2].equalsIgnoreCase("SHORT_Min_Minus")|| values[2].equalsIgnoreCase("INT_Max")|| values[2].equalsIgnoreCase("INT_Min")|| values[2].equalsIgnoreCase("INT_Max_Plus")|| values[2].equalsIgnoreCase("INT_Min_Minus")|| values[2].equalsIgnoreCase("LONG_Max")|| values[2].equalsIgnoreCase("LONG_Min")|| values[2].equalsIgnoreCase("LONG_Max_Plus")|| values[2].equalsIgnoreCase("LONG_Min_Minus"))     return true;    return false;  } catch (  Exception ex) {    return false;  }}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @NotNull @ObjectiveCName("doStartAuthWithEmail:") public Promise<AuthStartRes> doStartEmailAuth(String email){  return modules.getAuthModule().doStartEmailAuth(email);}  }
class C{  public boolean findMRInstructions(int lineNum){  if (!DMLScript.ENABLE_DEBUG_MODE) {    System.err.println("Error: Expecting debug mode to be enabled for this functionality");    return false;  }  for (  Integer lineNumber : MRJobInstructionsLineNumbers) {    if (lineNum == lineNumber)     return true;  }  return false;}  }
class C{  public static String removeExtraSpaces(String str){  StringBuilder sb=new StringBuilder();  int pos=0;  boolean prevWS=true;  for (int i=0; i < str.length(); i++) {    if (Character.isWhitespace(str.charAt(i)) || i == str.length() - 1) {      if (!prevWS) {        sb.append(str.substring(pos,i)).append(str.charAt(i));      }      prevWS=true;    } else {      if (prevWS)       pos=i;      prevWS=false;    }  }  if (Character.isWhitespace(sb.charAt(sb.length() - 1)))   sb.deleteCharAt(sb.length() - 1);  return sb.toString();}  }
class C{  private static final String annotationToXml(Class<?> destinationClass,Class<?> sourceClass){  return null;}  }
class C{  public void grow(int capacity){  ref.bytes=ArrayUtil.grow(ref.bytes,capacity);}  }
class C{  public String writeJsonApiDocument(JsonNode node) throws JsonProcessingException {  return mapper.writeValueAsString(node);}  }
class C{  void closeOpenedItems(){  if (opened != null) {    int start=mLayoutManager.findFirstVisibleItemPosition();    int end=mLayoutManager.findLastVisibleItemPosition();    for (int i=start; i <= end; i++) {      if (opened.get(i)) {        closeAnimate(swipeListView.getChildAt(i - start).findViewById(swipeFrontView),i);      }    }  }}  }
class C{  protected Point.Float computeDrawPoint(Rectangle2D rect,Vec4 screenPoint){  return new Point.Float((float)(screenPoint.x - rect.getWidth() / 2d),(float)(screenPoint.y));}  }
class C{  protected Statement compare(String op,Object value){  statement.append(' ').append(op).append(' ');  append(value);  return this;}  }
class C{  public boolean onDownloadStart(String url,String userAgent,String contentDisposition,String mimetype,String referer,long contentLength){  if (mDownloadListener == null) {    return false;  }  Message msg=obtainMessage(DOWNLOAD_FILE);  Bundle bundle=msg.getData();  bundle.putString("url",url);  bundle.putString("userAgent",userAgent);  bundle.putString("mimetype",mimetype);  bundle.putString("referer",referer);  bundle.putLong("contentLength",contentLength);  bundle.putString("contentDisposition",contentDisposition);  sendMessage(msg);  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.262 -0400",hash_original_method="3CA361324F026F8C9B0AA94A864ACDD9",hash_generated_method="1B1551AD543164CCE8ABE887F4733D99") @Override public int size(){  return size;}  }
class C{  public Resources addResources(String... resources){  Resources prop=new Resources(resources);  addResources(prop);  return prop;}  }
class C{  public static boolean isValidDate(int year,int month,int day){  if (month < 1 || month > 12 || day < 1) {    return false;  }  if (year > 1582) {    if (month != 2) {      return day <= NORMAL_DAYS_PER_MONTH[month];    }    if ((year & 3) != 0) {      return day <= 28;    }    return day <= ((year % 100 != 0) || (year % 400 == 0) ? 29 : 28);  } else   if (year == 1582 && month == 10) {    return day <= 31 && (day < 5 || day > 14);  }  if (month != 2 && day <= NORMAL_DAYS_PER_MONTH[month]) {    return true;  }  return day <= ((year & 3) != 0 ? 28 : 29);}  }
class C{  public double toView(double modelDist){  return modelDist * scale;}  }
class C{  public SWFVectors tagDefineFont2(int id,int flags,String name,int numGlyphs,int ascent,int descent,int leading,int[] codes,int[] advances,Rect[] bounds,int[] kernCodes1,int[] kernCodes2,int[] kernAdjustments) throws IOException {  startTag(TAG_DEFINEFONT2,id,true);  out.writeUI8(flags);  out.writeUI8(0);  byte[] nameBytes=name.getBytes();  out.writeUI8(nameBytes.length);  out.write(nameBytes);  out.writeUI16(numGlyphs);  return new Font2ShapeImpl(this,flags,numGlyphs,ascent,descent,leading,codes,advances,bounds,kernCodes1,kernCodes2,kernAdjustments);}  }
class C{  public StructEmBayesSearchEditor(StructEmBayesSearchRunner semBayesEstWrapper){  this(semBayesEstWrapper.getEstimatedBayesIm(),semBayesEstWrapper.getDataSet());}  }
class C{  public LegendGraphic(Shape shape,Paint fillPaint){  ParamChecks.nullNotPermitted(shape,"shape");  ParamChecks.nullNotPermitted(fillPaint,"fillPaint");  this.shapeVisible=true;  this.shape=shape;  this.shapeAnchor=RectangleAnchor.CENTER;  this.shapeLocation=RectangleAnchor.CENTER;  this.shapeFilled=true;  this.fillPaint=fillPaint;  this.fillPaintTransformer=new StandardGradientPaintTransformer();  setPadding(2.0,2.0,2.0,2.0);}  }
class C{  public Decor build(){  Animation slideInAnimation=null;  Animation slideOutAnimation=null;  if (mSlideIn && mPage.start > 0) {    mPage=Page.pageRange(Math.max(0,mPage.start - 1),mPage.end);    Page slideInPage=Page.singlePage(mPage.start);    slideInAnimation=new SlideInAnimation(slideInPage);  }  if (mSlideOut && mPage.end != Page.ALL_PAGES) {    mPage=Page.pageRange(mPage.start,mPage.end + 1);    Page slideOutPage=Page.singlePage(mPage.end);    slideOutAnimation=new SlideOutAnimation(slideOutPage);  }  return new Decor(mContentView,mPage,mLayoutBehindViewPage,slideInAnimation,slideOutAnimation,mWithLayer);}  }
class C{  public Principal peerPrincipal(){  return !peerCertificates.isEmpty() ? ((X509Certificate)peerCertificates.get(0)).getSubjectX500Principal() : null;}  }
class C{  public static String extractClassname(String fullname){  return fullname.replaceFirst("^.*[.]","");}  }
class C{  public void testWriteBit() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  BitOutputStream bOut=new BitOutputStream(out);  bOut.writeBit(true);  byte[] bytes=out.toByteArray();  Assert.assertEquals(0,bytes.length);  bOut.close();  bytes=out.toByteArray();  Assert.assertEquals(1,bytes[0]);}  }
class C{  public boolean isParameterized(){  return true;}  }
class C{  protected int findSeparator(){  int first;  int match=0;  int maxpos=tail - boundaryLength;  for (first=head; first <= maxpos && match != boundaryLength; first++) {    first=findByte(boundary[0],first);    if (first == -1 || first > maxpos) {      return -1;    }    for (match=1; match < boundaryLength; match++) {      if (buffer[first + match] != boundary[match]) {        break;      }    }  }  if (match == boundaryLength) {    return first - 1;  }  return -1;}  }
class C{  public static void info(final InformationType type,boolean outputToProgress,final String... params){  if (type != null && type.getNumberOfParameters() == params.length) {    final InformationEvent event=new InformationEvent(type,params);    userLog(event.getMessage());    if (outputToProgress) {      Diagnostic.progress(event.getMessage());    }    notifyAll(event);  }}  }
class C{  String processRequest(String file,String hostAddr){  int index=file.lastIndexOf('.');  String suffix;  if (index >= 0) {    suffix=file.substring(index + 1);  } else {    suffix="";  }  if ("ico".equals(suffix)) {    mimeType="image/x-icon";    cache=true;  } else   if ("gif".equals(suffix)) {    mimeType="image/gif";    cache=true;  } else   if ("css".equals(suffix)) {    cache=true;    mimeType="text/css";  } else   if ("html".equals(suffix) || "do".equals(suffix) || "jsp".equals(suffix)) {    cache=false;    mimeType="text/html";    if (session == null) {      session=server.createNewSession(hostAddr);      if (!"notAllowed.jsp".equals(file)) {        file="index.do";      }    }  } else   if ("js".equals(suffix)) {    cache=true;    mimeType="text/javascript";  } else {    cache=true;    mimeType="application/octet-stream";  }  trace("mimeType=" + mimeType);  trace(file);  if (file.endsWith(".do")) {    file=process(file);  }  return file;}  }
class C{  public Object execute(String scriptBody,Object[] parameters){  AsyncScriptResult asyncResult=new AsyncScriptResult();  Function function=createInjectedScriptFunction(scriptBody,asyncResult);  try {    page.executeJavaScriptFunctionIfPossible(function,function,parameters,page.getDocumentElement());  } catch (  ScriptException e) {    throw new WebDriverException(e);  }  try {    return asyncResult.waitForResult();  } catch (  InterruptedException e) {    throw new WebDriverException(e);  }}  }
class C{  public static String unflatten(String json){  return new JsonUnflattener(json).unflatten();}  }
class C{  public void reload(){  Display.impl.browserReload(internal);}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public NTRUEncryptionPrivateKeyParameters(IntegerPolynomial h,Polynomial t,IntegerPolynomial fp,NTRUEncryptionParameters params){  super(true,params);  this.h=h;  this.t=t;  this.fp=fp;}  }
class C{  public static Item parse(XContentParser parser,ParseFieldMatcher parseFieldMatcher,Item item) throws IOException {  XContentParser.Token token;  String currentFieldName=null;  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {    if (token == XContentParser.Token.FIELD_NAME) {      currentFieldName=parser.currentName();    } else     if (currentFieldName != null) {      if (parseFieldMatcher.match(currentFieldName,Field.INDEX)) {        item.index=parser.text();      } else       if (parseFieldMatcher.match(currentFieldName,Field.TYPE)) {        item.type=parser.text();      } else       if (parseFieldMatcher.match(currentFieldName,Field.ID)) {        item.id=parser.text();      } else       if (parseFieldMatcher.match(currentFieldName,Field.DOC)) {        item.doc(jsonBuilder().copyCurrentStructure(parser));      } else       if (parseFieldMatcher.match(currentFieldName,Field.FIELDS)) {        if (token == XContentParser.Token.START_ARRAY) {          List<String> fields=new ArrayList<>();          while (parser.nextToken() != XContentParser.Token.END_ARRAY) {            fields.add(parser.text());          }          item.fields(fields.toArray(new String[fields.size()]));        } else {          throw new ElasticsearchParseException("failed to parse More Like This item. field [fields] must be an array");        }      } else       if (parseFieldMatcher.match(currentFieldName,Field.PER_FIELD_ANALYZER)) {        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));      } else       if ("_routing".equals(currentFieldName) || "routing".equals(currentFieldName)) {        item.routing=parser.text();      } else       if ("_version".equals(currentFieldName) || "version".equals(currentFieldName)) {        item.version=parser.longValue();      } else       if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName) || "version_type".equals(currentFieldName)|| "versionType".equals(currentFieldName)) {        item.versionType=VersionType.fromString(parser.text());      } else {        throw new ElasticsearchParseException("failed to parse More Like This item. unknown field [{}]",currentFieldName);      }    }  }  if (item.id != null && item.doc != null) {    throw new ElasticsearchParseException("failed to parse More Like This item. either [id] or [doc] can be specified, but not both!");  }  return item;}  }
class C{  private void addCharacterClassFeatures(Collection<String> features,String string,String suffix){  if (string == null) {    features.add("boundary" + suffix);    return;  }  if (string.length() > 1)   return;  final char c=string.charAt(0);  final int cType=Character.getType(c);  if (Character.isLetter(c)) {    features.add("alpha" + suffix);  } else   if (Character.isDigit(c)) {    features.add("digit" + suffix);  } else   if (Character.isWhitespace(c)) {    features.add("ws" + suffix);  } else   if (c == ',' || c == '"' || c == '.' || c == '/' || c == ':' || c == ';') {    features.add(c + suffix);  } else   if (cType == Character.START_PUNCTUATION || cType == Character.INITIAL_QUOTE_PUNCTUATION) {    features.add("start_punc" + suffix);  } else   if (cType == Character.END_PUNCTUATION || cType == Character.FINAL_QUOTE_PUNCTUATION) {    features.add("end_punc" + suffix);  } else   if (cType == Character.OTHER_PUNCTUATION) {    features.add("other_punc" + suffix);  } else   if (cType == Character.CONNECTOR_PUNCTUATION || cType == Character.DASH_PUNCTUATION) {    features.add("conn_punc" + suffix);  } else   if (cType == Character.CURRENCY_SYMBOL) {    features.add("currency" + suffix);  } else   if (cType == Character.MATH_SYMBOL) {    features.add("math" + suffix);  } else {    features.add("unk" + suffix);  }}  }
class C{  public void fillOval(int x,int y,int width,int height){  mGraphics.fillOval(x,y,width,height);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public static Symbol symbol(JCTree tree){  tree=skipParens(tree);switch (tree.getTag()) {case IDENT:    return ((JCIdent)tree).sym;case SELECT:  return ((JCFieldAccess)tree).sym;case TYPEAPPLY:return symbol(((JCTypeApply)tree).clazz);case ANNOTATED_TYPE:return symbol(((JCAnnotatedType)tree).underlyingType);default :return null;}}  }
class C{  public void fail(String url){  int currentIndex=index.get();  if (urls.get(currentIndex).equals(url)) {    index.compareAndSet(currentIndex,(currentIndex + 1) % urls.size());  }}  }
class C{  public static Varargs char_(Varargs args){  int n=args.narg();  byte[] bytes=new byte[n];  for (int i=0, a=1; i < n; i++, a++) {    int c=args.checkint(a);    if (c < 0 || c >= 256)     argerror(a,"invalid value");    bytes[i]=(byte)c;  }  return LuaString.valueOf(bytes);}  }
class C{  public static ImmutableList<IFlowgraphView> loadFlowgraphs(final AbstractSQLProvider provider,final CModule module,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  return loadModuleFlowgraphs(provider,module,viewTagManager,nodeTagManager,ViewType.NonNative);}  }
class C{  public boolean can_have_callbacks(SootMethod m){  logger.info("method {} ipcsink = {}, ipcmethod = {}",m,API.v().isIPCSink(m),API.v().isIPCMethod(m));  return (API.v().isIPCSink(m) || API.v().isIPCMethod(m));}  }
class C{  public ArrayList<DHCPBinding> cleanExpiredLeases(){  ArrayList<DHCPBinding> newAvailableLeases=new ArrayList<DHCPBinding>();  for (  DHCPBinding binding : DHCP_POOL) {    if (binding.isLeaseExpired() && binding.isActiveLease()) {      this.cancelLeaseOfIPv4(binding.getIPv4Address());      this.setPoolAvailability(this.getPoolAvailability() + 1);      this.setPoolFull(false);      newAvailableLeases.add(binding);    }  }  return newAvailableLeases;}  }
class C{  public Ripper(String devName){  this.devName=devName;}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return voidIt();}  }
class C{  public void removeSeries(int index){  TimeSeries series=getSeries(index);  if (series != null) {    removeSeries(series);  }}  }
class C{  protected void restoreState(){  if (storePartials) {    likelihoodCore.restoreState();  } else {    updateAllNodes();  }  reconstructTree=true;  super.restoreState();}  }
class C{  public void DeleteProperty(XBaseWindow window){  if (atom == 0) {    throw new IllegalStateException("Atom should be initialized");  }  checkWindow(window.getWindow());  XToolkit.awtLock();  try {    XlibWrapper.XDeleteProperty(XToolkit.getDisplay(),window.getWindow(),atom);  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  protected int nextChar() throws IOException {  current=reader.read();  if (current == -1) {    return current;  }  if (position == buffer.length) {    char[] t=new char[1 + position + position / 2];    System.arraycopy(buffer,0,t,0,position);    buffer=t;  }  return buffer[position++]=(char)current;}  }
class C{  public synchronized void add(Result result,Object payload,String suffix){  Date date;  date=new Date();  m_Results.put(date,result);  m_Payloads.put(date,payload);  m_Suffixes.put(date,suffix);  m_Ordered.add(date);}  }
class C{  public void addOperator(String name,Operator operator){  logicalPlan.addOperator(name,operator);  if (physicalPlan != null) {    OperatorMeta om=logicalPlan.getMeta(operator);    physicalPlan.addLogicalOperator(om);  }}  }
class C{  private boolean isEitherSeriesDegenerate(XYDataset x_dataset,boolean x_impliedZeroSubtrahend){  if (x_impliedZeroSubtrahend) {    return (x_dataset.getItemCount(0) < 2);  }  return ((x_dataset.getItemCount(0) < 2) || (x_dataset.getItemCount(1) < 2));}  }
class C{  private static boolean matches(Type from,Type to,Map<String,Type> typeMap){  return to.equals(from) || (from instanceof TypeVariable && to.equals(typeMap.get(((TypeVariable<?>)from).getName())));}  }
class C{  public String localizeMessage(String msg){  String result=msg;  ResourceBundle catalog=m_logger.getResourceBundle();  if (catalog != null) {    try {      result=catalog.getString(msg);    } catch (    java.util.MissingResourceException ex) {      result=msg;    }  }  return result;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected Set<NodePortTuple> identifyBroadcastDomainPorts(){  Set<NodePortTuple> broadcastDomainPorts=new HashSet<NodePortTuple>();  broadcastDomainPorts.addAll(this.portBroadcastDomainLinks.keySet());  Set<NodePortTuple> additionalNpt=new HashSet<NodePortTuple>();  Map<NodePortTuple,Set<Link>> spLinks=new HashMap<NodePortTuple,Set<Link>>();  for (  NodePortTuple npt : switchPortLinks.keySet()) {    spLinks.put(npt,new HashSet<Link>(switchPortLinks.get(npt)));  }  for (  NodePortTuple npt : spLinks.keySet()) {    Set<Link> links=spLinks.get(npt);    boolean bdPort=false;    ArrayList<Link> linkArray=new ArrayList<Link>();    if (links.size() > 2) {      bdPort=true;    } else     if (links.size() == 2) {      for (      Link l : links) {        linkArray.add(l);      }      Link l1=linkArray.get(0);      Link l2=linkArray.get(1);      if (l1.getSrc() != l2.getDst() || l1.getSrcPort() != l2.getDstPort() || l1.getDst() != l2.getSrc() || l1.getDstPort() != l2.getSrcPort()) {        bdPort=true;      }    }    if (bdPort && (broadcastDomainPorts.contains(npt) == false)) {      additionalNpt.add(npt);    }  }  if (additionalNpt.size() > 0) {    log.warn("The following switch ports have multiple " + "links incident on them, so these ports will be treated " + " as braodcast domain ports. {}",additionalNpt);    broadcastDomainPorts.addAll(additionalNpt);  }  return broadcastDomainPorts;}  }
class C{  public int read() throws IOException {  if (!buf.hasRemaining()) {    return -1;  }  return buf.get() & 0xFF;}  }
class C{  protected UnManagedFileExportRule checkUnManagedFsExportRuleExistsInDB(DbClient dbClient,String exportRuleNativeGuid){  UnManagedFileExportRule unManagedExportRule=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileExporRuleNativeGUIdConstraint(exportRuleNativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unExportRuleURI=iter.next();    unManagedExportRule=dbClient.queryObject(UnManagedFileExportRule.class,unExportRuleURI);    return unManagedExportRule;  }  return unManagedExportRule;}  }
class C{  public void printSummary(final PrintStream out){  assert mBadPloidyRecords <= mTotalRecords;  final long goodPloidy=mTotalRecords - mBadPloidyRecords;  assert mBadMendelianRecords <= goodPloidy;  if (mTotalRecords == 0) {    out.println("No variants processed");  } else {    out.println(mBadPloidyRecords + "/" + mTotalRecords+ " ("+ NF.format(100.0 * mBadPloidyRecords / mTotalRecords)+ "%) records did not conform to expected call ploidy");    if (mNonRefFamilyRecords < mTotalRecords) {      out.println(mNonRefFamilyRecords + "/" + mTotalRecords+ " ("+ NF.format(100.0 * mNonRefFamilyRecords / mTotalRecords)+ "%) records were variant in at least 1 family member and checked for Mendelian constraints");    }    if (mNonRefFamilyRecords > 0) {      out.println(mBadMendelianRecords + "/" + mNonRefFamilyRecords+ " ("+ NF.format(100.0 * mBadMendelianRecords / mNonRefFamilyRecords)+ "%) records contained a violation of Mendelian constraints");    }    if (mStrangeChildPloidyRecords > 0) {      out.println(mStrangeChildPloidyRecords + "/" + mNonRefFamilyRecords+ " ("+ NF.format(100.0 * mStrangeChildPloidyRecords / mNonRefFamilyRecords)+ "%) records were not adequately checked due to a child call that was neither haploid nor diploid");    }  }}  }
class C{  private StringBuilder resolveIncludes(String baseFileName,StringBuilder baseFileData,SubRangeAggregator excludes){  if (baseFileName == null || baseFileData == null) {    return baseFileData;  }  baseFileName=DelphiUtils.normalizeFileName(baseFileName);  StringBuilder newData=new StringBuilder(baseFileData);  List<ReplacementSubRange> dataToInclude=new ArrayList<ReplacementSubRange>();  try {    CompilerDirectiveFactory factory=new CompilerDirectiveFactory();    List<CompilerDirective> allDirectives=factory.produce(baseFileData.toString());    for (    CompilerDirective directive : allDirectives) {      if (excludes.inRange(directive.getFirstCharPosition()) || directive.getType() != CompilerDirectiveType.INCLUDE) {        continue;      }      String includeFileName=directive.getItem();      String currentDir=baseFileName.substring(0,baseFileName.lastIndexOf('/'));      currentDir=backtrackDirectory(currentDir,DelphiUtils.countSubstrings(includeFileName,".."));      try {        String copyData="";        if (extendIncludes) {          File includeFile=resolveIncludeFile(includeFileName,currentDir,includes);          includedFiles.add(includeFile.getAbsolutePath());          copyData=readFileIncludeData(includeFile);        }        dataToInclude.add(new ReplacementSubRange(directive.getFirstCharPosition(),directive.getFirstCharPosition() + directive.getLength() + REPLACEMENT_OFFSET,copyData));      } catch (      IncludeResolverException e) {        DelphiUtils.LOG.warn(e.getMessage());        continue;      }catch (      IOException e) {        DelphiUtils.LOG.warn(e.getMessage());        continue;      }    }  } catch (  CompilerDirectiveFactorySyntaxException e) {    DelphiUtils.LOG.trace(e.getMessage());  }  return introduceIncludedData(newData,dataToInclude);}  }
class C{  public final boolean hasResponseBody(){  int responseCode=responseHeaders.getHeaders().getResponseCode();  if (method.equals("HEAD")) {    return false;  }  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HttpURLConnectionImpl.HTTP_NO_CONTENT && responseCode != HttpURLConnectionImpl.HTTP_NOT_MODIFIED) {    return true;  }  if (responseHeaders.getContentLength() != -1 || responseHeaders.isChunked()) {    return true;  }  return false;}  }
class C{  public static boolean processDefinedGlobalHashNames(Project project,Processor<String> processor){  return PerlStubIndex.getInstance().processAllKeys(PerlVariablesStubIndex.KEY_HASH,project,processor);}  }
class C{  public static Stopwatch createStarted(Ticker ticker){  return new Stopwatch(ticker).start();}  }
class C{  private boolean showAmountChooser(MouseEvent event,IEntity entity){  if (((event.getModifiersEx() & (MouseEvent.CTRL_DOWN_MASK | MouseEvent.META_DOWN_MASK)) != 0) && (entity instanceof StackableItem)) {    return ((StackableItem)entity).getQuantity() > 1;  }  return false;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case PEDIGREE:    return is_set_pedigree();case DATAUNIT:  return is_set_dataunit();}throw new IllegalStateException();}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();  nread=size - in.available();  fireStateChanged();}  }
class C{  public WHERE WHERE(String condition){  return new WHERE(this,condition);}  }
class C{  public static void playSoundWithUserSettings(Context context,int rawSoundId,int vibrateMillies){  AudioManager am=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);switch (am.getRingerMode()) {case AudioManager.RINGER_MODE_SILENT:    break;case AudioManager.RINGER_MODE_VIBRATE:  vibrate(context,vibrateMillies);break;case AudioManager.RINGER_MODE_NORMAL:playRawSound(rawSoundId,context);vibrate(context,vibrateMillies);break;}}  }
class C{  public String src(String destCollection){  String srcCollection=mapCollectionName(destCollection,false);  logger.info("Mapped Dst:" + destCollection + " --> Src:"+ srcCollection);  return srcCollection;}  }
class C{  public void add(Renderable item){  this.add(item,null);}  }
class C{  public mxGraphics2DCanvas(){  this(null);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.save_bt:{      v.setEnabled(false);      new DownloadImageAsyncTask(this).execute(OBJECT_IMAGE_URL);      break;    }}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.977 -0500",hash_original_method="CFB1A151895061CB7F5CB4DF56AD3E67",hash_generated_method="6EF3DDDF1A50D65D4C137EFF052DB3F8") final synchronized void _sendDont(int option) throws IOException {  if (debug || debugoptions) {    System.err.println("DONT: " + TelnetOption.getOption(option));  }  _output_.write(_COMMAND_DONT);  _output_.write(option);  _output_.flush();}  }
class C{  public void resumeAll(){  lock.unlock();}  }
class C{  protected void processAttList(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  if (!XMLUtil.checkLiteral(reader,"TTLIST")) {    XMLUtil.skipTag(reader);    return;  }  XMLUtil.skipWhitespace(reader,null);  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  while (ch == '%') {    XMLUtil.processEntity(str,reader,this.parameterEntityResolver);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);  }  reader.unread(ch);  String elementName=XMLUtil.scanIdentifier(reader);  XMLUtil.skipWhitespace(reader,null);  str=XMLUtil.read(reader,'%');  ch=str.charAt(0);  while (ch == '%') {    XMLUtil.processEntity(str,reader,this.parameterEntityResolver);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);  }  Properties props=new Properties();  while (ch != '>') {    reader.unread(ch);    String attName=XMLUtil.scanIdentifier(reader);    XMLUtil.skipWhitespace(reader,null);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);    while (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      str=XMLUtil.read(reader,'%');      ch=str.charAt(0);    }    if (ch == '(') {      while (ch != ')') {        str=XMLUtil.read(reader,'%');        ch=str.charAt(0);        while (ch == '%') {          XMLUtil.processEntity(str,reader,this.parameterEntityResolver);          str=XMLUtil.read(reader,'%');          ch=str.charAt(0);        }      }    } else {      reader.unread(ch);      XMLUtil.scanIdentifier(reader);    }    XMLUtil.skipWhitespace(reader,null);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);    while (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      str=XMLUtil.read(reader,'%');      ch=str.charAt(0);    }    if (ch == '#') {      str=XMLUtil.scanIdentifier(reader);      XMLUtil.skipWhitespace(reader,null);      if (!str.equals("FIXED")) {        XMLUtil.skipWhitespace(reader,null);        str=XMLUtil.read(reader,'%');        ch=str.charAt(0);        while (ch == '%') {          XMLUtil.processEntity(str,reader,this.parameterEntityResolver);          str=XMLUtil.read(reader,'%');          ch=str.charAt(0);        }        continue;      }    } else {      reader.unread(ch);    }    String value=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);    props.put(attName,value);    XMLUtil.skipWhitespace(reader,null);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);    while (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      str=XMLUtil.read(reader,'%');      ch=str.charAt(0);    }  }  if (!props.isEmpty()) {    this.attributeDefaultValues.put(elementName,props);  }}  }
class C{  private void finish(){  this.writer.writeMainKml(this.mainKml);  this.writer.close();}  }
class C{  @Override public int last(){  cachedBreakPositions=null;  dictionaryCharCount=0;  positionInCache=0;  return super.last();}  }
