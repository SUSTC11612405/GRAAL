class C{  public static void saveSkinPath(Context context,String path){  SkinPreferencesUtils.putString(context,PREF_CUSTOM_SKIN_PATH,path);}  }
class C{  public static Map<String,Object> createProductionRun(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productId=(String)context.get("productId");  Timestamp startDate=(Timestamp)context.get("startDate");  BigDecimal pRQuantity=(BigDecimal)context.get("pRQuantity");  String facilityId=(String)context.get("facilityId");  String workEffortId=(String)context.get("routingId");  String workEffortName=(String)context.get("workEffortName");  String description=(String)context.get("description");  GenericValue routing=null;  GenericValue product=null;  List<GenericValue> routingTaskAssocs=null;  try {    product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();    if (product == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductNotExist",locale));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(e.getMessage());  }  try {    Map<String,Object> routingInMap=UtilMisc.toMap("productId",productId,"applicableDate",startDate,"userLogin",userLogin);    if (workEffortId != null) {      routingInMap.put("workEffortId",workEffortId);    }    Map<String,Object> routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);    routing=(GenericValue)routingOutMap.get("routing");    routingTaskAssocs=UtilGenerics.checkList(routingOutMap.get("tasks"));  } catch (  GenericServiceException gse) {    Debug.logWarning(gse.getMessage(),module);  }  if (routing == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductRoutingNotExist",locale));  }  if (UtilValidate.isEmpty(routingTaskAssocs)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingHasNoRoutingTask",locale));  }  List<BOMNode> components=null;  Map<String,Object> serviceContext=FastMap.newInstance();  serviceContext.put("productId",productId);  serviceContext.put("quantity",pRQuantity);  serviceContext.put("userLogin",userLogin);  Map<String,Object> resultService=null;  try {    resultService=dispatcher.runSync("getManufacturingComponents",serviceContext);    components=UtilGenerics.checkList(resultService.get("components"));  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the getManufacturingComponents service",module);    return ServiceUtil.returnError(e.getMessage());  }  if (workEffortName == null) {    String prdName=UtilValidate.isNotEmpty(product.getString("productName")) ? product.getString("productName") : product.getString("productId");    String wefName=UtilValidate.isNotEmpty(routing.getString("workEffortName")) ? routing.getString("workEffortName") : routing.getString("workEffortId");    workEffortName=prdName + "-" + wefName;  }  serviceContext.clear();  serviceContext.put("workEffortTypeId","PROD_ORDER_HEADER");  serviceContext.put("workEffortPurposeTypeId","WEPT_PRODUCTION_RUN");  serviceContext.put("currentStatusId","PRUN_CREATED");  serviceContext.put("workEffortName",workEffortName);  serviceContext.put("description",description);  serviceContext.put("facilityId",facilityId);  serviceContext.put("estimatedStartDate",startDate);  serviceContext.put("quantityToProduce",pRQuantity);  serviceContext.put("userLogin",userLogin);  try {    resultService=dispatcher.runSync("createWorkEffort",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the createWorkEffort service",module);    return ServiceUtil.returnError(e.getMessage());  }  String productionRunId=(String)resultService.get("workEffortId");  if (Debug.infoOn()) {    Debug.logInfo("ProductionRun created: " + productionRunId,module);  }  serviceContext.clear();  serviceContext.put("workEffortId",productionRunId);  serviceContext.put("productId",productId);  serviceContext.put("workEffortGoodStdTypeId","PRUN_PROD_DELIV");  serviceContext.put("statusId","WEGS_CREATED");  serviceContext.put("estimatedQuantity",pRQuantity);  serviceContext.put("fromDate",startDate);  serviceContext.put("userLogin",userLogin);  try {    resultService=dispatcher.runSync("createWorkEffortGoodStandard",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the createWorkEffortGoodStandard service",module);    return ServiceUtil.returnError(e.getMessage());  }  boolean first=true;  for (  GenericValue routingTaskAssoc : routingTaskAssocs) {    if (EntityUtil.isValueActive(routingTaskAssoc,startDate)) {      GenericValue routingTask=null;      try {        routingTask=routingTaskAssoc.getRelatedOne("ToWorkEffort",false);      } catch (      GenericEntityException e) {        Debug.logError(e.getMessage(),module);      }      long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,pRQuantity,dispatcher);      Timestamp endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);      serviceContext.clear();      serviceContext.put("priority",routingTaskAssoc.get("sequenceNum"));      serviceContext.put("workEffortPurposeTypeId",routingTask.get("workEffortPurposeTypeId"));      serviceContext.put("workEffortName",routingTask.get("workEffortName"));      serviceContext.put("description",routingTask.get("description"));      serviceContext.put("fixedAssetId",routingTask.get("fixedAssetId"));      serviceContext.put("workEffortTypeId","PROD_ORDER_TASK");      serviceContext.put("currentStatusId","PRUN_CREATED");      serviceContext.put("workEffortParentId",productionRunId);      serviceContext.put("facilityId",facilityId);      serviceContext.put("reservPersons",routingTask.get("reservPersons"));      serviceContext.put("estimatedStartDate",startDate);      serviceContext.put("estimatedCompletionDate",endDate);      serviceContext.put("estimatedSetupMillis",routingTask.get("estimatedSetupMillis"));      serviceContext.put("estimatedMilliSeconds",routingTask.get("estimatedMilliSeconds"));      serviceContext.put("quantityToProduce",pRQuantity);      serviceContext.put("userLogin",userLogin);      resultService=null;      try {        resultService=dispatcher.runSync("createWorkEffort",serviceContext);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the createWorkEffort service",module);      }      String productionRunTaskId=(String)resultService.get("workEffortId");      if (Debug.infoOn())       Debug.logInfo("ProductionRunTaskId created: " + productionRunTaskId,module);      serviceContext.clear();      serviceContext.put("userLogin",userLogin);      serviceContext.put("workEffortIdFrom",routingTask.getString("workEffortId"));      serviceContext.put("workEffortIdTo",productionRunTaskId);      serviceContext.put("workEffortAssocTypeId","WORK_EFF_TEMPLATE");      try {        resultService=dispatcher.runSync("createWorkEffortAssoc",serviceContext);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the createWorkEffortAssoc service",module);      }      String routingTaskId=routingTaskAssoc.getString("workEffortIdTo");      cloneWorkEffortPartyAssignments(ctx,userLogin,routingTaskId,productionRunTaskId);      cloneWorkEffortCostCalcs(ctx,userLogin,routingTaskId,productionRunTaskId);      for (      BOMNode node : components) {        GenericValue productBom=node.getProductAssoc();        if ((productBom.getString("routingWorkEffortId") == null && first) || (productBom.getString("routingWorkEffortId") != null && productBom.getString("routingWorkEffortId").equals(routingTask.getString("workEffortId")))) {          serviceContext.clear();          serviceContext.put("workEffortId",productionRunTaskId);          serviceContext.put("productId",node.getProduct().get("productId"));          serviceContext.put("workEffortGoodStdTypeId","PRUNT_PROD_NEEDED");          serviceContext.put("statusId","WEGS_CREATED");          serviceContext.put("fromDate",productBom.get("fromDate"));          serviceContext.put("estimatedQuantity",node.getQuantity());          serviceContext.put("userLogin",userLogin);          resultService=null;          try {            resultService=dispatcher.runSync("createWorkEffortGoodStandard",serviceContext);          } catch (          GenericServiceException e) {            Debug.logError(e,"Problem calling the createWorkEffortGoodStandard service",module);          }          if (Debug.infoOn())           Debug.logInfo("ProductLink created for productId: " + productBom.getString("productIdTo"),module);        }      }      first=false;      startDate=endDate;    }  }  serviceContext.clear();  serviceContext.put("workEffortId",productionRunId);  serviceContext.put("estimatedCompletionDate",startDate);  serviceContext.put("userLogin",userLogin);  resultService=null;  try {    resultService=dispatcher.runSync("updateWorkEffort",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem calling the updateWorkEffort service",module);  }  result.put("productionRunId",productionRunId);  result.put("estimatedCompletionDate",startDate);  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunCreated",UtilMisc.toMap("productionRunId",productionRunId),locale));  return result;}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.comment(text,augs);  }}  }
class C{  void notifyModelChanges(){  UpdateOpHelper updateOpHelper=new UpdateOpHelper();  if (modelListObserver.hasNoChanges()) {    updateHashes(updateOpHelper);  } else   if (!notifiedOfStructuralChanges && (modelListObserver.hasOnlyInsertions() || modelListObserver.hasOnlyRemovals())) {    notifyChanges(modelListObserver);    updateHashes(updateOpHelper);  } else {    buildDiff(updateOpHelper);  }  adapter.unregisterAdapterDataObserver(observer);  notifyChanges(updateOpHelper);  adapter.registerAdapterDataObserver(observer);  modelListObserver.reset();  notifiedOfStructuralChanges=false;}  }
class C{  @Override public boolean hasFeature(String feature,String version){  return super.hasFeature(feature,version) || feature.equalsIgnoreCase("psvi");}  }
class C{  public static <K,T,V>MultiDimensionalMap<K,T,V> newThreadSafeTreeBackedMap(){  return new MultiDimensionalMap<>(new ConcurrentSkipListMap<Pair<K,T>,V>());}  }
class C{  public boolean isPinchZoomEnabled(){  return mPinchZoomEnabled;}  }
class C{  public static JsonRootNode readJSON(File file){  StringBuffer strings=FileUtility.readFromFile(file);  return jsonFromString(strings.toString());}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  action.actionPerformed(ev);}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public String loadDocumentTextToString(String sDocID){  return loadDocumentElement(sDocID,TEXT_TAG);}  }
class C{  public void commit(ServerTransaction xtn,boolean anyUpdates) throws SAException {}  }
class C{  public Value toUpperCase(Value str){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public Zmat(double A[][]){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  nrow=A.length;  ncol=A[0].length;  getProperties();  re=new double[nr][nc];  im=new double[nr][nc];  for (int i=0; i < nr; i++)   for (int j=0; j < nc; j++) {    re[i][j]=A[i][j];    im[i][j]=0;  }}  }
class C{  public TestRunner(final Class<?> classToRun) throws InitializationError, InstantiationException, IllegalAccessException {  super(classToRun);  injector=InjectorsMap.INSTANCE.forClass(classToRun);  properties=injector.getInstance(Properties.class);  testEventCollector=injector.getBinding(TestEventCollector.class).getProvider().get();  reportingListener.addInjector(injector);}  }
class C{  @Override public List<TableView> formatTables(Set<LogicalTable> logicalTables,UriInfo uriInfo){  Map<String,TableView> tablesMeta=new HashMap<>();  Map<String,List<TableGrainView>> grainsData=new HashMap<>();  for (  LogicalTable logicalTable : logicalTables) {    List<TableGrainView> grains=grainsData.computeIfAbsent(logicalTable.getName(),null);    grains.add(formatTableGrain(logicalTable,logicalTable.getGranularity().getName(),uriInfo));    if (tablesMeta.get(logicalTable.getName()) == null) {      tablesMeta.put(logicalTable.getName(),formatTable(logicalTable,uriInfo));    }  }  List<TableView> tableViewList=new ArrayList<>();  Set<Map.Entry<String,TableView>> entrySet=tablesMeta.entrySet();  for (  Map.Entry<String,TableView> entry : entrySet) {    TableView tableView=entry.getValue();    tableView.put("timeGrains",grainsData.get(entry.getKey()));    tableViewList.add(tableView);  }  return tableViewList;}  }
class C{  public BpmResult(){  success=true;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (wildcards != null) {    for (int i=0; i < wildcards.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(wildcards[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public RealMatrixFormat(final String prefix,final String suffix,final String rowPrefix,final String rowSuffix,final String rowSeparator,final String columnSeparator){  this(prefix,suffix,rowPrefix,rowSuffix,rowSeparator,columnSeparator,CompositeFormat.getDefaultNumberFormat());}  }
class C{  public void clearBody() throws JMSException {  Body=new byte[0];  setBodyReadOnly(false);  try {    if (dataOut != null) {      dataOut.close();    }    if (dataIn != null) {      dataIn.close();    }    if (bytesOut != null) {      bytesOut.close();    }  } catch (  IOException e) {    JMSException jmsEx=new JMSException("IOException while clearing message body: " + e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  } finally {    this.dataOut=null;    this.dataIn=null;    this.bytesOut=null;  }}  }
class C{  public static StorableTimeFence inSundayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(SUNDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_INVITED_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300173,value0);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  JSONTokener x=new JSONTokener(string);  while (x.more()) {    String name=Cookie.unescape(x.nextTo('='));    x.next('=');    jo.put(name,Cookie.unescape(x.nextTo(';')));    x.next();  }  return jo;}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public static RespJson buildFailureResponse(String errorMsg){  RespJson respJson=new RespJson();  respJson.setCode(ResponseCode.FAILURE.getCode());  respJson.setMsg(errorMsg);  return respJson;}  }
class C{  public RecordMergeStrategyException(){  this(null);}  }
class C{  private AudioOption createAudioOption(Object xmlOpt){  AudioOption option=null;  if (xmlOpt instanceof Option1AType) {    Option1AType opt1A=(Option1AType)xmlOpt;    option=createOption1A(opt1A.getTrack1().getL(),opt1A.getTrack1().getR(),opt1A.getTrack1().getC(),opt1A.getTrack1().getLFE(),opt1A.getTrack1().getLs(),opt1A.getTrack1().getRs(),opt1A.getTrack2().getLt(),opt1A.getTrack3().getRt());  } else   if (xmlOpt instanceof Option2Type) {    Option2Type opt2=(Option2Type)xmlOpt;    option=createOption2(opt2.getTrack1().getL(),opt2.getTrack2().getR(),opt2.getTrack3().getC(),opt2.getTrack4().getLFE(),opt2.getTrack5().getLs(),opt2.getTrack6().getRs(),opt2.getTrack7().getLt(),opt2.getTrack8().getRt());  } else   if (xmlOpt instanceof Option3Type) {    Option3Type opt3=(Option3Type)xmlOpt;    option=createOption3(opt3.getTrack1().getL(),opt3.getTrack1().getR(),opt3.getTrack1().getC(),opt3.getTrack1().getLFE(),opt3.getTrack1().getLs(),opt3.getTrack1().getRs(),opt3.getTrack2().getLt(),opt3.getTrack2().getRt());  } else   if (xmlOpt instanceof Option4Type) {    Option4Type opt4=(Option4Type)xmlOpt;    option=createOption4(opt4.getTrack1().getL(),opt4.getTrack2().getR(),opt4.getTrack3().getC(),opt4.getTrack4().getLFE(),opt4.getTrack5().getLs(),opt4.getTrack6().getRs(),opt4.getTrack7().getLt(),opt4.getTrack7().getRt());  } else   if (xmlOpt instanceof Option5Type) {    Option5Type opt5=(Option5Type)xmlOpt;    option=createOption5(opt5.getTrack1().getL(),opt5.getTrack2().getR());  } else   if (xmlOpt instanceof Option6Type) {    Option6Type opt6=(Option6Type)xmlOpt;    option=createOption6(opt6.getTrack1().getL(),opt6.getTrack1().getR());  } else {  }  return option;}  }
class C{  public static RemoveFilesDialogFragment newInstance(ArrayList<OCFile> files){  RemoveFilesDialogFragment frag=new RemoveFilesDialogFragment();  Bundle args=new Bundle();  int messageStringId;  boolean containsFolder=false;  boolean containsDown=false;  boolean containsFavorite=false;  for (  OCFile file : files) {    containsFolder|=file.isFolder();    containsDown|=file.isDown();    containsFavorite|=file.isFavorite();  }  if (files.size() == 1) {    OCFile file=files.get(0);    messageStringId=(file.isFolder()) ? R.string.confirmation_remove_folder_alert : R.string.confirmation_remove_file_alert;  } else {    messageStringId=(containsFolder) ? R.string.confirmation_remove_folders_alert : R.string.confirmation_remove_files_alert;  }  int localRemoveButton=(!containsFavorite && (containsFolder || containsDown)) ? R.string.confirmation_remove_local : -1;  args.putInt(ARG_MESSAGE_RESOURCE_ID,messageStringId);  if (files.size() == 1) {    args.putStringArray(ARG_MESSAGE_ARGUMENTS,new String[]{files.get(0).getFileName()});  }  args.putInt(ARG_POSITIVE_BTN_RES,R.string.common_yes);  args.putInt(ARG_NEUTRAL_BTN_RES,R.string.common_no);  args.putInt(ARG_NEGATIVE_BTN_RES,localRemoveButton);  args.putParcelableArrayList(ARG_TARGET_FILES,files);  frag.setArguments(args);  return frag;}  }
class C{  public void onSuccess(int statusCode,byte[] binaryData){  onSuccess(binaryData);}  }
class C{  public static boolean isEmpty(String string){  if (null == string)   return true;  return string.equals(EMPTY);}  }
class C{  public static int bytesToCodePoint(ByteBuffer bytes){  bytes.mark();  byte b=bytes.get();  bytes.reset();  int extraBytesToRead=bytesFromUTF8[(b & 0xFF)];  if (extraBytesToRead < 0)   return -1;  int ch=0;switch (extraBytesToRead) {case 5:    ch+=(bytes.get() & 0xFF);  ch<<=6;case 4:ch+=(bytes.get() & 0xFF);ch<<=6;case 3:ch+=(bytes.get() & 0xFF);ch<<=6;case 2:ch+=(bytes.get() & 0xFF);ch<<=6;case 1:ch+=(bytes.get() & 0xFF);ch<<=6;case 0:ch+=(bytes.get() & 0xFF);}ch-=offsetsFromUTF8[extraBytesToRead];return ch;}  }
class C{  @Deployment public void testUUIDVariableAndQuery(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  assertNotNull(processInstance);  Task task=taskService.createTaskQuery().singleResult();  assertNotNull(task);  UUID randomUUID=UUID.randomUUID();  taskService.setVariableLocal(task.getId(),"conversationId",randomUUID);  Task resultingTask=taskService.createTaskQuery().taskVariableValueEquals("conversationId",randomUUID).singleResult();  assertNotNull(resultingTask);  assertEquals(task.getId(),resultingTask.getId());  randomUUID=UUID.randomUUID();  runtimeService.setVariable(processInstance.getId(),"uuidVar",randomUUID);  ProcessInstance result=runtimeService.createProcessInstanceQuery().variableValueEquals("uuidVar",randomUUID).singleResult();  assertNotNull(result);  assertEquals(processInstance.getId(),result.getId());}  }
class C{  public UsersGetFollowersQueryWithFields(VkApiClient client,UserField... fields){  super(client,"users.getFollowers",GetFollowersFieldsResponse.class);  fields(fields);}  }
class C{  public Matrix(double[] vals,int m){  this.m=m;  n=(m != 0 ? vals.length / m : 0);  if (m * n != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=vals[i + j * m];    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private ViewAnimationUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static void normalize(double[] doubles,double sum){  if (Double.isNaN(sum)) {    throw new IllegalArgumentException("Can't normalize array. Sum is NaN.");  }  if (sum == 0) {    throw new IllegalArgumentException("Can't normalize array. Sum is zero.");  }  for (int i=0; i < doubles.length; i++) {    doubles[i]/=sum;  }}  }
class C{  @Override public void startConditional(short type,Augmentations augmentations) throws XNIException {}  }
class C{  public final void removeChangeListener(ChangeListener listener){  listeners.remove(listener);}  }
class C{  public boolean isMemorySpace(){  return _isMemorySA;}  }
class C{  public Item addDaughter(Item item){  Item newItem;  ItemContents contents;  Item p=getLastDaughter();  if (p != null) {    newItem=p.appendItem(item);  } else {    if (item == null) {      contents=new ItemContents();    } else {      contents=item.getSharedContents();    }    newItem=new Item(getOwnerRelation(),contents);    newItem.parent=this;    daughter=newItem;  }  return newItem;}  }
class C{  @Override public final synchronized void write(byte ba[],int off,int len) throws IOException {  dis.write(ba,off,len);}  }
class C{  private void writeAttributes(Attributes atts) throws SAXException {  int len=atts.getLength();  for (int i=0; i < len; i++) {    write(' ');    writeName(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),false);    if (htmlMode && booleanAttribute(atts.getLocalName(i),atts.getQName(i),atts.getValue(i)))     break;    write("=\"");    String s=atts.getValue(i);    writeEscUTF16(s,0,s.length(),true);    write('"');  }}  }
class C{  public FuelEvent(ItemStack stack){  this.stack=stack;}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  @Override public synchronized void maybeStartTrackingJob(JobStatus job){  if (job.hasTimingDelayConstraint() || job.hasDeadlineConstraint()) {    maybeStopTrackingJob(job);    ListIterator<JobStatus> it=mTrackedJobs.listIterator(mTrackedJobs.size());    while (it.hasPrevious()) {      JobStatus ts=it.previous();      if (ts.getLatestRunTimeElapsed() < job.getLatestRunTimeElapsed()) {        break;      }    }    it.add(job);    maybeUpdateAlarms(job.hasTimingDelayConstraint() ? job.getEarliestRunTime() : Long.MAX_VALUE,job.hasDeadlineConstraint() ? job.getLatestRunTimeElapsed() : Long.MAX_VALUE);  }}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  public static MultiwayPoolBuilder<Object,Object> newBuilder(){  return new MultiwayPoolBuilder<Object,Object>();}  }
class C{  public void discardP2Set(){  p2set=null;}  }
class C{  public void redraw(){  mItemCount=getShouldDrawCount();  mPreviousSelectedIndicator=null;  for (  View i : mIndicators) {    removeView(i);  }  for (int i=0; i < mItemCount; i++) {    ImageView indicator=new ImageView(mContext);    indicator.setImageDrawable(mUnselectedDrawable);    indicator.setPadding((int)mUnSelectedPadding_Left,(int)mUnSelectedPadding_Top,(int)mUnSelectedPadding_Right,(int)mUnSelectedPadding_Bottom);    addView(indicator);    mIndicators.add(indicator);  }  setItemAsSelected(mPreviousSelectedPosition);}  }
class C{  public void showMetrics(){}  }
class C{  public GroupsReorderLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){  super(client,"groups.reorderLink",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  linkId(linkId);}  }
class C{  public void deleteObservers(){  observers.clear();}  }
class C{  private boolean contains(Convex convex,Transform transform,Vector2 point){  double scale=this.simulation.getCamera().getScale();  if (convex instanceof Segment) {    Segment segment=(Segment)convex;    return segment.contains(point,transform,0.2 * 32.0 / scale);  }  return convex.contains(point,transform);}  }
class C{  private void mergeDimensionalObjects(BaseAnalyticalObject object,List<DimensionalObject> dimensions){  if (object == null || dimensions == null) {    return;  }  for (  DimensionalObject dimension : dimensions) {    DimensionType type=getDimensionType(dimension.getDimension());    String dimensionId=dimension.getDimension();    List<DimensionalItemObject> items=dimension.getItems();    if (items != null) {      List<String> uids=getUids(items);      if (DATA_X.equals(type)) {        for (        String uid : uids) {          DimensionalItemObject dimItemObject=getOrAddDataDimensionalItemObject(IdScheme.UID,uid);          if (dimItemObject != null) {            object.getDataDimensionItems().add(DataDimensionItem.create(dimItemObject));          }        }      } else       if (PERIOD.equals(type)) {        List<RelativePeriodEnum> enums=new ArrayList<>();        List<Period> periods=new UniqueArrayList<>();        for (        String isoPeriod : uids) {          if (RelativePeriodEnum.contains(isoPeriod)) {            enums.add(RelativePeriodEnum.valueOf(isoPeriod));          } else {            Period period=PeriodType.getPeriodFromIsoString(isoPeriod);            if (period != null) {              periods.add(period);            }          }        }        object.setRelatives(new RelativePeriods().setRelativePeriodsFromEnums(enums));        object.setPeriods(periodService.reloadPeriods(new ArrayList<>(periods)));      } else       if (ORGANISATION_UNIT.equals(type)) {        for (        String ou : uids) {          if (KEY_USER_ORGUNIT.equals(ou)) {            object.setUserOrganisationUnit(true);          } else           if (KEY_USER_ORGUNIT_CHILDREN.equals(ou)) {            object.setUserOrganisationUnitChildren(true);          } else           if (KEY_USER_ORGUNIT_GRANDCHILDREN.equals(ou)) {            object.setUserOrganisationUnitGrandChildren(true);          } else           if (ou != null && ou.startsWith(KEY_LEVEL)) {            int level=DimensionalObjectUtils.getLevelFromLevelParam(ou);            if (level > 0) {              object.getOrganisationUnitLevels().add(level);            }          } else           if (ou != null && ou.startsWith(KEY_ORGUNIT_GROUP)) {            String uid=DimensionalObjectUtils.getUidFromGroupParam(ou);            OrganisationUnitGroup group=identifiableObjectManager.get(OrganisationUnitGroup.class,uid);            if (group != null) {              object.getItemOrganisationUnitGroups().add(group);            }          } else {            OrganisationUnit unit=identifiableObjectManager.get(OrganisationUnit.class,ou);            if (unit != null) {              object.getOrganisationUnits().add(unit);            }          }        }      } else       if (CATEGORY.equals(type)) {        DataElementCategoryDimension categoryDimension=new DataElementCategoryDimension();        categoryDimension.setDimension(identifiableObjectManager.get(DataElementCategory.class,dimensionId));        categoryDimension.getItems().addAll(identifiableObjectManager.getByUidOrdered(DataElementCategoryOption.class,uids));        object.getCategoryDimensions().add(categoryDimension);      } else       if (DATA_ELEMENT_GROUP_SET.equals(type)) {        object.getDataElementGroups().addAll(identifiableObjectManager.getByUidOrdered(DataElementGroup.class,uids));      } else       if (ORGANISATION_UNIT_GROUP_SET.equals(type)) {        object.getOrganisationUnitGroups().addAll(identifiableObjectManager.getByUidOrdered(OrganisationUnitGroup.class,uids));      } else       if (CATEGORY_OPTION_GROUP_SET.equals(type)) {        object.getCategoryOptionGroups().addAll(identifiableObjectManager.getByUidOrdered(CategoryOptionGroup.class,uids));      } else       if (PROGRAM_ATTRIBUTE.equals(type)) {        TrackedEntityAttributeDimension attributeDimension=new TrackedEntityAttributeDimension();        attributeDimension.setAttribute(identifiableObjectManager.get(TrackedEntityAttribute.class,dimensionId));        attributeDimension.setLegendSet(dimension.hasLegendSet() ? identifiableObjectManager.get(LegendSet.class,dimension.getLegendSet().getUid()) : null);        attributeDimension.setFilter(dimension.getFilter());        object.getAttributeDimensions().add(attributeDimension);      } else       if (PROGRAM_DATA_ELEMENT.equals(type)) {        TrackedEntityDataElementDimension dataElementDimension=new TrackedEntityDataElementDimension();        dataElementDimension.setDataElement(identifiableObjectManager.get(DataElement.class,dimensionId));        dataElementDimension.setLegendSet(dimension.hasLegendSet() ? identifiableObjectManager.get(LegendSet.class,dimension.getLegendSet().getUid()) : null);        dataElementDimension.setFilter(dimension.getFilter());        object.getDataElementDimensions().add(dataElementDimension);      } else       if (PROGRAM_INDICATOR.equals(type)) {        TrackedEntityProgramIndicatorDimension programIndicatorDimension=new TrackedEntityProgramIndicatorDimension();        programIndicatorDimension.setProgramIndicator(identifiableObjectManager.get(ProgramIndicator.class,dimensionId));        programIndicatorDimension.setLegendSet(dimension.hasLegendSet() ? identifiableObjectManager.get(LegendSet.class,dimension.getLegendSet().getUid()) : null);        programIndicatorDimension.setFilter(dimension.getFilter());        object.getProgramIndicatorDimensions().add(programIndicatorDimension);      }    }  }}  }
class C{  public TranslatorHolder(View itemView,TranslatorObject object){  super(itemView);  itemView.findViewById(R.id.item_about_translator_container).setOnClickListener(this);  this.avatar=(CircleImageView)itemView.findViewById(R.id.item_about_translator_avatar);  TextView title=(TextView)itemView.findViewById(R.id.item_about_translator_title);  title.setText(object.title);  this.flag=(ImageView)itemView.findViewById(R.id.item_about_translator_flag);  TextView subtitle=(TextView)itemView.findViewById(R.id.item_about_translator_subtitle);  subtitle.setText(object.subtitle);  DisplayUtils.setTypeface(itemView.getContext(),subtitle);  this.email=object.subtitle;}  }
class C{  public static void remove(String sid){  String id="//captcha/" + sid;  Cache.remove(id);}  }
class C{  public AccountRegisterDeviceQuery deviceYear(Integer value){  return unsafeParam("device_year",value);}  }
class C{  public AccountLookupContactsQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  final boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  final boolean newState;  if (commitChange) {    mVelocityTracker.computeCurrentVelocity(1000);    final float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=ViewUtils.isLayoutRtl(this) ? (xvel < 0) : (xvel > 0);    } else {      newState=getTargetCheckedState();    }  } else {    newState=isChecked();  }  setChecked(newState);  cancelSuperTouch(ev);}  }
class C{  public void zoomToFit(){  graphView.fitGraphToWindow();}  }
class C{  public boolean cs_demand(){  return soot.PhaseOptions.getBoolean(options,"cs-demand");}  }
class C{  public int checkStatsFile(@NotNull Client client){  if (myClient != client) {    return 0;  }  IDevice device=client.getDevice();  if (device == null || device.isOffline()) {    return -1;  }  CollectingOutputReceiver receiver=new CollectingOutputReceiver();  try {    device.executeShellCommand("ls " + NETWORK_STATS_FILE,receiver);    return receiver.getOutput().contains("No such file") ? -1 : 1;  } catch (  TimeoutException timeoutException) {    LOG.warning(String.format("TimeoutException %1$s in ls %2$s",timeoutException.getMessage(),NETWORK_STATS_FILE));  }catch (  AdbCommandRejectedException rejectedException) {    LOG.warning(String.format("AdbCommandRejectedException %1$s in ls %2$s",rejectedException.getMessage(),NETWORK_STATS_FILE));  }catch (  ShellCommandUnresponsiveException unresponsiveException) {    LOG.warning(String.format("ShellCommandUnresponsiveException %1$s in ls %2$s",unresponsiveException.getMessage(),NETWORK_STATS_FILE));  }catch (  IOException ioException) {    LOG.warning(String.format("IOException %1$s in ls %2$s",ioException.getMessage(),NETWORK_STATS_FILE));  }  return 0;}  }
class C{  public static boolean isPcm(AudioFormat.Encoding encoding){  return encoding.equals(AudioFormat.Encoding.PCM_SIGNED) || encoding.equals(AudioFormat.Encoding.PCM_UNSIGNED);}  }
class C{  public CombinedOperation[] gather(){  final ArrayList<CombinedOperation> list=new ArrayList<>();  for (int i=0; i < size(); i++) {    PackedOperation pop=getPackedOperation(i);    final CombinedOperation cop=new CombinedOperation();    cop.setEditOperation(pop.getEditOperation());    if (pop.getEditOperation().equals(EditOperation.op_deletion) || pop.getEditOperation().equals(EditOperation.op_substitution)) {      cop.setLetter(pop.getLetter());      cop.setCount(1);    } else {      cop.setCount(0);      while (true) {        cop.incrementCount(pop.getCount());        i++;        if (i == size())         break;        pop=getPackedOperation(i);        if (cop.getEditOperation() != pop.getEditOperation())         break;      }      i--;    }    list.add(cop);  }  return list.toArray(new CombinedOperation[list.size()]);}  }
class C{  public SimpleMarkerSymbol(){  if (styleMap.isEmpty()) {    styleMap.put(esriSMSCircle,"circle");    styleMap.put(esriSMSCross,"cross");    styleMap.put(esriSMSDiamond,"circle");    styleMap.put(esriSMSSquare,"square");    styleMap.put(esriSMSX,"x");  }}  }
class C{  @OnClick(R.id.tvSeeAllPossibilities) public void displayAllPossibilities(){  resultsBox.setVisibility(View.GONE);  allPossibilitiesBox.setVisibility(View.VISIBLE);}  }
class C{  public Local newLocal(String name,Type t){  return Jimple.v().newLocal(name,t);}  }
class C{  @Override public boolean accept(File file){  return file.canWrite();}  }
class C{  public StreamReaderDelegate(XMLStreamReader reader){  this.reader=reader;}  }
class C{  public static String callIdeal(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  String orderId=(String)request.getAttribute("orderId");  String issuerId=(String)request.getAttribute("issuerId");  GenericValue orderHeader=null;  List<GenericValue> orderItemList=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    orderItemList=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingOrderHeader",locale));    return "error";  }  BigDecimal orderTotal=orderHeader.getBigDecimal("grandTotal");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore == null) {    Debug.logError("ProductStore is null",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_IDEAL",null,true);  String configString=null;  String paymentGatewayConfigId=null;  if (paymentConfig != null) {    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");    configString=paymentConfig.getString("paymentPropertiesPath");  }  if (configString == null) {    configString="payment.properties";  }  String merchantId=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantId",configString,"merchantId");  String merchantSubId=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantSubId",configString,"merchantSubId");  String merchantReturnURL=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantReturnURL",configString,"merchantReturnURL");  String acquirerURL=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerURL",configString,"acquirerURL");  String acquirerTimeout=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerTimeout",configString,"acquirerTimeout");  String privateCert=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"privateCert",configString,"privateCert");  String acquirerKeyStoreFilename=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerKeyStoreFilename",configString,"acquirerKeyStoreFilename");  String acquirerKeyStorePassword=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"acquirerKeyStorePassword",configString,"acquirerKeyStorePassword");  String merchantKeyStoreFilename=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantKeyStoreFilename",configString,"merchantKeyStoreFilename");  String merchantKeyStorePassword=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"merchantKeyStorePassword",configString,"merchantKeyStorePassword");  String expirationPeriod=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"expirationPeriod",configString,"expirationPeriod");  if (UtilValidate.isEmpty(merchantId) || UtilValidate.isEmpty(merchantReturnURL) || UtilValidate.isEmpty(privateCert)|| UtilValidate.isEmpty(merchantKeyStoreFilename)|| UtilValidate.isEmpty(merchantKeyStoreFilename)) {    Debug.logError("Payment properties is not configured properly, some notify URL from iDEAL is not correctly defined!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  List<String> descriptionList=FastList.newInstance();  for (  GenericValue orderItem : orderItemList) {    if (UtilValidate.isNotEmpty(orderItem.get("itemDescription"))) {      descriptionList.add((String)orderItem.get("itemDescription"));    }  }  String orderDescription=StringUtil.join(descriptionList,",");  String amount=orderTotal.setScale(decimals,rounding).movePointRight(2).toPlainString();  String redirectString=null;  try {    IdealConnector connector=new IdealConnector("payment");    Transaction transaction=new Transaction();    transaction.setIssuerID(issuerId);    transaction.setAmount(amount);    transaction.setPurchaseID(orderId);    transaction.setDescription(orderDescription);    String returnURL=merchantReturnURL + "?orderId=" + orderId;    Random random=new SecureRandom();    String EntranceCode=Long.toString(Math.abs(random.nextLong()),36);    transaction.setEntranceCode(EntranceCode);    transaction.setMerchantReturnURL(returnURL);    Transaction trx=connector.requestTransaction(transaction);    redirectString=trx.getIssuerAuthenticationURL();    request.getSession().setAttribute("purchaseID",orderId);    request.getSession().setAttribute("payAmount",orderTotal.toPlainString());  } catch (  IdealException ex) {    Debug.logError(ex.getMessage(),module);    request.setAttribute("_ERROR_MESSAGE_",ex.getConsumerMessage());    return "error";  }  try {    response.sendRedirect(redirectString);  } catch (  IOException e) {    Debug.logError(e,"Problems redirecting to iDEAL",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsConnectingWithIdeal",locale));    return "error";  }  return "success";}  }
class C{  public AccountSetInfoQuery name(String value){  return unsafeParam("name",value);}  }
class C{  private void checkSampleData(final StatisticalSummary stat) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(stat);  if (stat.getN() < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,stat.getN(),2,true);  }}  }
class C{  @Override public IntegerDistribution makeDistribution(){  return new UniformIntegerDistribution(-3,5);}  }
class C{  public boolean onEnterKeyPress(View view){  return showAppMenu(view,false);}  }
class C{  public byte readByte(){  if (offset < data.length) {    return data[offset++];  }  return 0;}  }
class C{  public static ValueCmpTarget value(ByteString value){  return new ValueCmpTarget(value);}  }
class C{  public MessageFormatter removeMessageFormatter(String domain){  return (MessageFormatter)fMessageFormatters.remove(domain);}  }
class C{  public DocumentNGramDistroGraph intersectDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);  EdgeCachedLocator ecLocator=new EdgeCachedLocator(10);  EdgeCachedLocator ecNewLocator=new EdgeCachedLocator(10);  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraph=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gNewGraph=gRes.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraph == null)     continue;    java.util.Iterator iIter=gOtherGraph.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      WeightedEdge eEdge=(WeightedEdge)ecLocator.locateDirectedEdgeInGraph(gGraph,weCurItem.getVertexA(),weCurItem.getVertexB());      WeightedEdge weNewEdge=null;      String sHead=weCurItem.getVertexA().getLabel();      String sTail=weCurItem.getVertexB().getLabel();      if (eEdge != null) {        try {          List l=new ArrayList();          l.add(sTail);          createWeightedEdgesConnecting(gNewGraph,sHead,l,eEdge.getWeight() + weCurItem.getWeight(),eEdge.getWeight() + weCurItem.getWeight(),1.0);          weNewEdge=(WeightedEdge)gr.demokritos.iit.jinsect.utils.locateDirectedEdgeInGraph(gNewGraph,weCurItem.getVertexA(),weCurItem.getVertexB());        } catch (        Exception e) {          e.printStackTrace();        }        Distribution d1=(Distribution)this.EdgeDistros.get(eEdge);        if (d1 == null)         d1=new Distribution();        Distribution d2=(Distribution)dgOtherGraph.EdgeDistros.get(weCurItem);        if (d2 == null)         d2=new Distribution();        if (weNewEdge != null)         gRes.EdgeDistros.put(weNewEdge,d2.addTo(d1));      }    }  }  return gRes;}  }
class C{  public void applyInlineRightHalf(double[] data,int off,int len){  Window w=Window.get(windowType,2 * len,prescale);  w.apply(data,off,data,off,len,len);}  }
class C{  public void put(byte b[],int off,int len) throws IOException {  buffer.write(b,off,len);}  }
class C{  public void listen(String pattern,ListenListener listenListener){  if (this.listeners.get(pattern) != null) {    this.client.onError(Topic.EVENT,Event.LISTENER_EXISTS,pattern);  } else {synchronized (this) {      UtilListener eventListener=new UtilListener(Topic.EVENT,pattern,listenListener,this.deepstreamConfig,this.client,this.connection);      this.listeners.put(pattern,eventListener);      eventListener.start();    }  }}  }
class C{  public Bundler putFloat(String key,float value){  bundle.putFloat(key,value);  return this;}  }
class C{  public AbstractInfoflow(){  this(null);}  }
class C{  void removeNode(Node node){  if (node == null)   return;  if (fRemoveChild == node)   return;  Node parent=node.getParentNode();  if (parent == fStartContainer) {    int index=indexOf(node,fStartContainer);    if (index < fStartOffset) {      fStartOffset--;    }  }  if (parent == fEndContainer) {    int index=indexOf(node,fEndContainer);    if (index < fEndOffset) {      fEndOffset--;    }  }  if (parent != fStartContainer || parent != fEndContainer) {    if (isAncestorOf(node,fStartContainer)) {      fStartContainer=parent;      fStartOffset=indexOf(node,parent);    }    if (isAncestorOf(node,fEndContainer)) {      fEndContainer=parent;      fEndOffset=indexOf(node,parent);    }  }}  }
class C{  @Override public void endParameterEntity(String name,Augmentations augs) throws XNIException {  fPEDepth--;  fReadingExternalDTD=fPEntityStack[fPEDepth];}  }
class C{  public void registerListener(Condition condition,int cPriority,EventListener listener,int lPriority){  getListenerForCondition(condition,cPriority).registerListener(listener,lPriority);}  }
class C{  public boolean approxEquals(S2LatLngRect other,double maxError){  return (lat.approxEquals(other.lat,maxError) && lng.approxEquals(other.lng,maxError));}  }
class C{  @Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  DTDGrammar grammar=(fDTDGrammar != null ? fDTDGrammar : fGrammarBucket.getActiveGrammar());  int index=grammar.getEntityDeclIndex(name);  if (index == -1) {    if (fDTDGrammar != null)     fDTDGrammar.externalEntityDecl(name,identifier,augs);    if (fDTDHandler != null) {      fDTDHandler.externalEntityDecl(name,identifier,augs);    }  }}  }
class C{  public void screenshot(){  screenshot(null);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUY_SELL_HE_DOES_NOT_BUY_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300337,value0);}  }
class C{  void listMethods(){  int i;  for (i=0; i < methods_count; i++) {    G.v().out.println(methods[i].prototype(constant_pool));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ITEM_DICE_CUSTOM(String value0,int num1,int num2){  return new SM_SYSTEM_MESSAGE(1300187,value0,num1,num2);}  }
class C{  public static Zpsdmat aah(Zmat A){  Zpsdmat C=new Zpsdmat(A.nrow,A.nrow);  for (int i=0; i < A.nrow; i++) {    for (int k=0; k < A.ncol; k++) {      C.re[i][i]=C.re[i][i] + A.re[i][k] * A.re[i][k] + A.im[i][k] * A.im[i][k];    }    C.im[i][i]=0.;    for (int j=i + 1; j < A.nrow; j++) {      for (int k=0; k < A.ncol; k++) {        C.re[i][j]=C.re[i][j] + A.re[i][k] * A.re[j][k] + A.im[i][k] * A.im[j][k];        C.im[i][j]=C.im[i][j] - A.re[i][k] * A.im[j][k] + A.im[i][k] * A.re[j][k];      }      C.re[j][i]=C.re[i][j];      C.im[j][i]=-C.im[i][j];    }  }  return C;}  }
class C{  public MessagesDeleteQuery(VkApiClient client,Actor actor){  super(client,"messages.delete",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public DataIOException(String message){  super(message);}  }
class C{  public TagAllocationModel(InputStream input) throws IOException {  loadFrom(input);}  }
class C{  public AnnotElemValPair(String name,char kind,AnnotationAttr attr){  super(name,kind);  this.attr=attr;}  }
class C{  public GameTime plus(GameTime gt){  return new GameTime(this.getTime() + gt.getTime());}  }
class C{  public FriendsGetQueryWithFields nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this)   return true;  return _map.equals(obj);}  }
class C{  public TouchesExtended(){  super(null,null);}  }
class C{  public static boolean createDirectory(String directory){  File theDir=new File(directory);  if (!theDir.exists()) {    boolean result=false;    try {      theDir.mkdirs();      result=true;    } catch (    SecurityException se) {      se.printStackTrace();      return false;    }    return result;  } else {    return true;  }}  }
class C{  public ODEStateAndDerivative mapStateAndDerivative(final double t,final double[] y,final double[] yDot) throws MathIllegalArgumentException {  if (y.length != getTotalDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,y.length,getTotalDimension());  }  if (yDot.length != getTotalDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,yDot.length,getTotalDimension());  }  final int n=getNumberOfEquations();  int index=0;  final double[] state=extractEquationData(index,y);  final double[] derivative=extractEquationData(index,yDot);  if (n < 2) {    return new ODEStateAndDerivative(t,state,derivative);  } else {    final double[][] secondaryState=new double[n - 1][];    final double[][] secondaryDerivative=new double[n - 1][];    while (++index < getNumberOfEquations()) {      secondaryState[index - 1]=extractEquationData(index,y);      secondaryDerivative[index - 1]=extractEquationData(index,yDot);    }    return new ODEStateAndDerivative(t,state,derivative,secondaryState,secondaryDerivative);  }}  }
class C{  public BlowFishCrypt(SecretKeySpec secretKeySpec){  this.secretKeySpec=secretKeySpec;}  }
class C{  public static final void fillShape(GL2 gl,Shape s){  if (s instanceof Circle) {    RenderUtilities.fillCircle(gl,(Circle)s);  } else   if (s instanceof Rectangle) {    RenderUtilities.fillRectangle(gl,(Rectangle)s);  } else   if (s instanceof Polygon) {    RenderUtilities.fillPolygon(gl,(Polygon)s);  } else   if (s instanceof Segment) {  } else {  }}  }
class C{  public String toIdString(Object id){  if (id == null)   return null;  return id.toString();}  }
class C{  public void parseOptionString(String string) throws IOException {  NexusStreamParser np=new NexusStreamParser(new StringReader(string));  java.util.List tokens=np.getTokensLowerCase(null,null);  resamplingMethod.setOptionResamplingSize((int)np.findIgnoreCase(tokens,"resamplingsize=",resamplingMethod.getOptionResamplingSize()));  resamplingMethod.setOptionRepeatitions((int)np.findIgnoreCase(tokens,"repeatitions=",resamplingMethod.getOptionRepeatitions()));  resamplingMethod.setOptionLeftPercentile(np.findIgnoreCase(tokens,"percentile=",(float)resamplingMethod.getOptionLeftPercentile()));  if (np.findIgnoreCase(tokens,"includeinternal=true"))   setOptionUseInternal(true); else   if (np.findIgnoreCase(tokens,"includeinternal=false"))   setOptionUseInternal(false);  if (np.findIgnoreCase(tokens,"includeunassigned=true"))   setOptionUseUnassigned(true); else   if (np.findIgnoreCase(tokens,"includeunassigned=false"))   setOptionUseUnassigned(false);  np.checkFindDone(tokens);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_SUCCEED(String value0){  return new SM_SYSTEM_MESSAGE(1300473,value0);}  }
class C{  public PointList normalize(){  Matrix mean=getMean();  Matrix variances=getVariance();  Matrix stdDeviation=variances.pow(0.5d);  PointList normalized=new PointList(dimension);  for (int i=0; i < numberElements; i++) {    Matrix x=data[i];    x=x.minus(mean);    x.arrayRightDivideEquals(stdDeviation);    normalized.add(x.getColumnPackedCopy());  }  return normalized;}  }
class C{  public boolean hasNext(){  return next >= 0;}  }
class C{  protected void mouseDragged(Minecraft par1Minecraft,int par2,int par3){  if (this.enabled && this.visible) {    if (this.dragging) {      if (par2 != this.lastMouseX) {        this.lastMouseX=-1;        this.sliderValue=(float)(par2 - (this.xPosition + 4)) / (float)(this.width - 8);        if (this.sliderValue < 0.0F) {          this.sliderValue=0.0F;        }        if (this.sliderValue > 1.0F) {          this.sliderValue=1.0F;        }        float range=this.maxValue - this.minValue;        this.lastValue=this.minValue + (this.sliderValue * range);        this.lastValue=Math.round(this.lastValue / this.increment) * this.increment;        float original=par1Minecraft.vrSettings.getOptionFloatValue(this.idFloat);        par1Minecraft.vrSettings.setOptionFloatValue(this.idFloat,this.lastValue);        this.displayString=par1Minecraft.vrSettings.getKeyBinding(this.idFloat);        par1Minecraft.vrSettings.setOptionFloatValue(this.idFloat,original);      }    }    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);    this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)),this.yPosition,0,66,4,20);    this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4,this.yPosition,196,66,4,20);  }}  }
class C{  private soot.Value createCondAnd(polyglot.ast.Binary binary){  soot.Local retLocal=lg.generateLocal(soot.BooleanType.v());  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();  soot.Value lVal=base().createAggressiveExpr(binary.left(),false,false);  boolean leftNeedIf=needSootIf(lVal);  if (!(lVal instanceof soot.jimple.ConditionExpr)) {    lVal=soot.jimple.Jimple.v().newEqExpr(lVal,soot.jimple.IntConstant.v(0));  } else {    lVal=reverseCondition((soot.jimple.ConditionExpr)lVal);    lVal=handleDFLCond((soot.jimple.ConditionExpr)lVal);  }  if (leftNeedIf) {    soot.jimple.IfStmt ifLeft;    ifLeft=soot.jimple.Jimple.v().newIfStmt(lVal,noop1);    body.getUnits().add(ifLeft);    Util.addLnPosTags(ifLeft.getConditionBox(),binary.left().position());    Util.addLnPosTags(ifLeft,binary.left().position());  }  soot.jimple.Stmt endNoop=soot.jimple.Jimple.v().newNopStmt();  soot.Value rVal=base().createAggressiveExpr(binary.right(),false,false);  boolean rightNeedIf=needSootIf(rVal);  if (!(rVal instanceof soot.jimple.ConditionExpr)) {    rVal=soot.jimple.Jimple.v().newEqExpr(rVal,soot.jimple.IntConstant.v(0));  } else {    rVal=reverseCondition((soot.jimple.ConditionExpr)rVal);    rVal=handleDFLCond((soot.jimple.ConditionExpr)rVal);  }  if (rightNeedIf) {    soot.jimple.IfStmt ifRight;    ifRight=soot.jimple.Jimple.v().newIfStmt(rVal,noop1);    body.getUnits().add(ifRight);    Util.addLnPosTags(ifRight.getConditionBox(),binary.right().position());    Util.addLnPosTags(ifRight,binary.right().position());  }  soot.jimple.Stmt assign1=soot.jimple.Jimple.v().newAssignStmt(retLocal,soot.jimple.IntConstant.v(1));  body.getUnits().add(assign1);  soot.jimple.Stmt gotoEnd1=soot.jimple.Jimple.v().newGotoStmt(endNoop);  body.getUnits().add(gotoEnd1);  body.getUnits().add(noop1);  soot.jimple.Stmt assign2=soot.jimple.Jimple.v().newAssignStmt(retLocal,soot.jimple.IntConstant.v(0));  body.getUnits().add(assign2);  body.getUnits().add(endNoop);  Util.addLnPosTags(assign1,binary.position());  Util.addLnPosTags(assign2,binary.position());  return retLocal;}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  mFileToRemove=getStorageManager().getFileByPath(mRemotePath);  boolean localRemovalFailed=false;  if (!mOnlyLocalCopy) {    RemoveRemoteFileOperation operation=new RemoveRemoteFileOperation(mRemotePath);    result=operation.execute(client);    if (result.isSuccess() || result.getCode() == ResultCode.FILE_NOT_FOUND) {      localRemovalFailed=!(getStorageManager().removeFile(mFileToRemove,true,true));    }  } else {    localRemovalFailed=!(getStorageManager().removeFile(mFileToRemove,false,true));    if (!localRemovalFailed) {      result=new RemoteOperationResult(ResultCode.OK);    }  }  if (localRemovalFailed) {    result=new RemoteOperationResult(ResultCode.LOCAL_STORAGE_NOT_REMOVED);  }  return result;}  }
class C{  public void mergeSamples(Set<String> samples,String newName) throws IOException {  if (getSampleNames().contains(newName))   throw new IOException("Can't merge samples, name already used: " + newName);  getDataTable().mergeSamples(samples,newName);  getSampleAttributeTable().mergeSamples(samples,newName);  setDirty(true);  try {    processReadHits();  } catch (  CanceledException e) {    Basic.caught(e);  }  if (getDir() != null)   getDir().getMainViewer().setDoReInduce(true);}  }
class C{  public static void showInformation(String message,long milliseconds){  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,milliseconds);}  }
class C{  public InvalidPluginException(final String message){  super(message);}  }
class C{  public XNIException(String message,Exception exception){  super(message);  fException=exception;}  }
class C{  public void rightClick(){  myRobot.click(mySurface,getMidPoint(),MouseButton.RIGHT_BUTTON,1);  myRobot.waitForIdle();}  }
class C{  public void endEntity(String name,Augmentations augmentations) throws XNIException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_OPENED_FOR_SELF(String worldname0){  return new SM_SYSTEM_MESSAGE(1400640,worldname0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_MP_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201048,skilltarget,num0,skillname);}  }
class C{  public static boolean isOfferAccepted(Protos.Offer offer,Collection<Protos.OfferID> acceptedOfferIds){  return acceptedOfferIds.stream().anyMatch(null);}  }
class C{  public void sort(int fromIndex,int toIndex){  Arrays.sort(_data,fromIndex,toIndex);}  }
class C{  public MarketAddToAlbumQuery addToAlbum(UserActor actor,int ownerId,int itemId,int... albumIds){  return new MarketAddToAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);}  }
class C{  private boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(context.getApplicationContext());  if (resultCode != ConnectionResult.SUCCESS) {    return false;  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200995,skilltarget,num0,skillcaster,skillname);}  }
class C{  public static boolean shouldProcessDependenciesRecursively(JpsModule module){  return JpsJavaDependenciesEnumerationHandler.shouldProcessDependenciesRecursively(JpsJavaDependenciesEnumerationHandler.createHandlers(Collections.singletonList(module)));}  }
class C{  public Future<Boolean> analyzeTraffic(String uriPrefix,Map<String,String> expectedParams,final int timeout){  return analyzeTraffic(new RequestPredicateImpl(uriPrefix,expectedParams),timeout);}  }
class C{  public boolean isPublished(long sequence){  return sequencer.isAvailable(sequence);}  }
class C{  public boolean isFinished(){  return this.request == null || request.isDone();}  }
class C{  @Nullable public static NlComponent findComponent(@NotNull ScreenView view,@SwingCoordinate int swingX,@SwingCoordinate int swingY){  return view.getModel().findLeafAt(getAndroidX(view,swingX),getAndroidY(view,swingY),false);}  }
class C{  public void resetAndInterrupt(){  sync.reset();  for (int i=0; i < 3; i++)   for (  Thread t : sync.getQueuedThreads())   t.interrupt();  sync.reset();}  }
class C{  protected Map<String,Map<String,Object>> parseLibs(String defaultLibFormat) throws IOException, ParseException {  Map<String,Map<String,Object>> srcFileDataModels=FtlDocFileParser.makeDataMap();  for (  String libFilename : libFilenames) {    File srcFile=new File(srcFolderPathFile,libFilename);    msgHandler.logInfo("Parsing " + srcFile.toString());    Map<String,Object> dataModel=parseLib(libFilename,srcFile,defaultLibFormat);    String libName=(String)dataModel.get("libName");    srcFileDataModels.put(libName,dataModel);  }  return srcFileDataModels;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_TIMEOUT_WITHOUT_PARTNER(String value0){  return new SM_SYSTEM_MESSAGE(1300104,value0);}  }
class C{  public static final void sort(Object[] a,int[] b,Comparator cmp){  mergesort(a,b,0,a.length - 1,cmp);}  }
class C{  public void resetCount(){  progress=0;  setText("0%");  invalidate();}  }
class C{  public VOGeoServerContrastEnhancementNormalizeGreen(Class<?> panelId,RasterSymbolizerDetails parentPanel){  super(panelId,"geoserver/GeoServerContrastEnhancementNormalizeGreen.xml",parentPanel,FieldIdEnum.VO_RASTER_NORMALIZE_ALGORITHM_GREEN,FieldIdEnum.VO_RASTER_NORMALIZE_MIN_VALUE_GREEN,FieldIdEnum.VO_RASTER_NORMALIZE_MAX_VALUE_GREEN);}  }
class C{  public CoreDumpDescriptor(CoreDump coreDump){  super(coreDump,resolveSnapshotName(coreDump),NbBundle.getMessage(CoreDumpDescriptor.class,"DESCR_CoreDump"),ICON,resolvePosition(coreDump,POSITION_AT_THE_END,true),EXPAND_NEVER);}  }
class C{  public void addGroups(String[] groups) throws IOException {  lookupDisc.addGroups(groups);}  }
class C{  @Override public void populateExpression(Object objValue){  String sValue=null;  boolean validColour=true;  if (objValue instanceof LiteralExpressionImpl) {    sValue=((LiteralExpressionImpl)objValue).toString();  } else   if (objValue instanceof String) {    sValue=(String)objValue;  } else {    validColour=false;    if (objValue != null) {      ConsoleManager.getInstance().error(this,"Colour expression is of unknown type : " + objValue.getClass().getName());    } else {    }  }  if ((colourButton != null) && validColour) {    if (!sValue.startsWith("#")) {      ConsoleManager.getInstance().error(this,"Colour string does not start with #" + sValue);    } else {      Expression opacity=getFilterFactory().literal(DefaultSymbols.defaultColourOpacity());      colourButton.populate(sValue,opacity);      Color newValue=colourButton.getColour();      UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,newValue));      oldValueObj=newValue;    }  }}  }
class C{  public EntityQuery(Delegator delegator){  this.delegator=delegator;}  }
class C{  public WallDeleteQuery delete(UserActor actor){  return new WallDeleteQuery(getClient(),actor);}  }
class C{  public int double_set_old(){  String s=soot.PhaseOptions.getString(options,"double-set-old");  if (s.equalsIgnoreCase("hash"))   return double_set_old_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_old_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_old_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_old_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_old_heintze;  if (s.equalsIgnoreCase("sharedlist"))   return double_set_old_sharedlist;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-old");}  }
class C{  protected void init() throws InvalidJobException {  if (Debug.verboseOn())   Debug.logVerbose("Async-Service initializing.",module);}  }
class C{  public void close(){  currentPage.close();  dirsMayBeUpdated=null;}  }
class C{  public int findAll(String regularExpression){  return findAndUncollapseNext(regularExpression,false,true);}  }
class C{  public int double_set_new(){  String s=soot.PhaseOptions.getString(options,"double-set-new");  if (s.equalsIgnoreCase("hash"))   return double_set_new_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_new_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_new_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_new_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_new_heintze;  if (s.equalsIgnoreCase("sharedlist"))   return double_set_new_sharedlist;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-new");}  }
class C{  public boolean write(byte[] audioData){  return write(audioData,0,audioData.length);}  }
class C{  public void onStop(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onStop();    }  }}  }
class C{  public static String toHex(int r,int g,int b){  if ((r >= 0) && (r <= 255) && (g >= 0)&& (g <= 255)&& (b >= 0)&& (b <= 255)) {    return "#" + toBrowserHexValue(r) + toBrowserHexValue(g)+ toBrowserHexValue(b);  } else {    return null;  }}  }
class C{  private boolean movePlatform(BlockPos anchor,boolean up){  IBlockState state=worldObj.getBlockState(anchor);  if (state.getBlock() != BWMBlocks.ANCHOR)   return false;  HashSet<BlockPos> platformBlocks=new HashSet<>();  platformBlocks.add(anchor);  Block b=worldObj.getBlockState(anchor.down()).getBlock();  boolean success=worldObj.getBlockState(anchor.down()).getBlock() == PLATFORM ? addToList(platformBlocks,anchor.down(),up) : up || isValidBlock(b,anchor.down());  if (!success) {    return false;  }  for (  BlockPos blockPos : platformBlocks) {    Arrays.asList(new BlockPos[]{blockPos.north(),blockPos.south()}).forEach(null);    Arrays.asList(new BlockPos[]{blockPos.east(),blockPos.west()}).forEach(null);  }  if (!worldObj.isRemote) {    for (    BlockPos blockPos : platformBlocks) {      IBlockState blockState=worldObj.getBlockState(blockPos.up());      b=blockState.getBlock();      blockState=(b == Blocks.REDSTONE_WIRE || b instanceof BlockRailBase ? blockState : null);      Vec3i offset=blockPos.subtract(anchor.up());      rope.addBlock(offset,worldObj.getBlockState(blockPos));      if (blockState != null) {        rope.addBlock(new Vec3i(offset.getX(),offset.getY() + 1,offset.getZ()),blockState);        worldObj.setBlockToAir(blockPos.up());      }      worldObj.setBlockToAir(blockPos);    }  }  return true;}  }
class C{  public static void onSync(Project project,BlazeContext context,ProjectViewSet projectViewSet,BlazeProjectData blazeProjectData,BlazeSyncParams.SyncMode syncMode){  for (  FileCache fileCache : FileCache.EP_NAME.getExtensions()) {    Scope.push(context,null);  }  LocalFileSystem.getInstance().refresh(true);}  }
class C{  public void moveFile(String file){  File f=new File(this.tempFile);  if (!file.startsWith("/")) {    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {      file=Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + file;    } else {      file="/data/data/" + handler.cordova.getActivity().getPackageName() + "/cache/"+ file;    }  }  String logMsg="renaming " + this.tempFile + " to "+ file;  Log.d(LOG_TAG,logMsg);  if (!f.renameTo(new File(file)))   Log.e(LOG_TAG,"FAILED " + logMsg);}  }
class C{  public RemoteVideoInfo(String title,int durationMillis,PlayerState state,int currentTimeMillis,String errorMessage){  this.title=title;  this.durationMillis=durationMillis;  this.state=state;  this.currentTimeMillis=currentTimeMillis;  this.errorMessage=errorMessage;}  }
class C{  public SessionId(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200769,skillcaster,skillname);}  }
class C{  public void updateEntryReferencesUnderXtn(CacheManager cacheManager,IEntryCacheInfo pEntry,IEntryData oldEntryData){  RuntimeException ex_thrown=null;  try {    ShadowEntryHolder shadowEh=pEntry.getEntryHolder(cacheManager).getShadow();    shadowEh.resetNumOfIndexesUpdated();    shadowEh.incrementNumOfUpdates();    IEntryData shadowEntryData=shadowEh.getEntryData();    boolean double_update=shadowEntryData.getFixedPropertiesValues() != oldEntryData.getFixedPropertiesValues();    if (hasIndexes()) {      int refpos=1;      ArrayList<IObjectInfo<IEntryCacheInfo>> deletedBackRefs=pEntry.getBackRefs();      if (pEntry.indexesBackRefsKept()) {        pEntry.setBackRefs(new ArrayList<IObjectInfo<IEntryCacheInfo>>(numberOfBackRefs()));        pEntry.getBackRefs().add(deletedBackRefs.get(0));      }      IEntryData newEntryData=pEntry.getEntryHolder(cacheManager).getEntryData();      for (      TypeDataIndex index : _indexes) {        if (index.disableIndexUsageForOperation(this,pEntry.getLatestIndexCreationNumber()))         continue;        Object newFieldValue=index.getIndexValue(newEntryData);        Object oldFieldValue=index.getIndexValue(oldEntryData);        int cursize=pEntry.indexesBackRefsKept() ? pEntry.getBackRefs().size() : -1;        try {          refpos=index.updateIndexValueUndexXtn(this,pEntry.getEntryHolder(cacheManager),pEntry,oldFieldValue,newFieldValue,deletedBackRefs,refpos,double_update);          shadowEh.incrementNumOfIndexesUpdated();        } catch (        RuntimeException ex) {          if (ex_thrown == null)           ex_thrown=ex;          if (pEntry.indexesBackRefsKept()) {            if (pEntry.getBackRefs().size() == cursize)             pEntry.getBackRefs().add(TypeDataIndex._DummyOI);            refpos++;            if (index.isExtendedIndex()) {              if (newFieldValue != null && pEntry.getBackRefs().size() == cursize + 1)               pEntry.getBackRefs().add(TypeDataIndex._DummyOI);              if (oldFieldValue != null)               refpos++;            }          }        }      }      for (      QueryExtensionIndexManagerWrapper queryExtensionIndexManager : getForeignQueriesHandlers()) {        if (double_update)         queryExtensionIndexManager.replaceEntry(new SpaceServerEntryImpl(pEntry,cacheManager)); else         queryExtensionIndexManager.insertEntry(new SpaceServerEntryImpl(pEntry,cacheManager),true);      }    }  }  finally {    if (ex_thrown != null) {      XtnEntry xtnEntry=pEntry.getEntryHolder(cacheManager).getWriteLockOwner();      cacheManager.consolidateWithShadowEntry(this,pEntry,true,true);      pEntry.getEntryHolder(cacheManager).setWriteLockOwnerAndOperation(xtnEntry,SpaceOperations.READ);      xtnEntry.getXtnData().removeRewrittenEntryIndication(pEntry.getUID());      throw ex_thrown;    }  }}  }
class C{  public ReadTakeEntrySpaceOperationResult(){}  }
class C{  @Before public void initializeTestDirectories(){  logger.debug("Initialize test directories");  String testId=testIdWatcher.getTestId();  File baseDir=getBaseDir();  File resourcesDir=new File(baseDir,TEST_RESOURCES_DIR);  sourceTestDir=new File(resourcesDir,testId);  targetTestDir=new File(baseDir,TEST_RESOURCES_TARGET_DIR + testId);  logger.debug("Delete test target directory to remove data from previous run");  try {    FileUtils.deleteDirectory(targetTestDir);  } catch (  IOException e) {    throw new RuntimeException("Problem deleting directory: " + targetTestDir.getAbsolutePath(),e);  }  targetTestDir.mkdirs();}  }
class C{  public NavigableImagePanel(BufferedImage image) throws IOException {  this();  setImage(image);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public static int insertTable(String table,V sets){  StringBuilder sql=new StringBuilder();  sql.append("insert into ").append(table).append(" (");  StringBuilder s=new StringBuilder();  int total=0;  for (  String name : sets.names()) {    if (s.length() > 0)     s.append(",");    s.append(name);    total++;  }  sql.append(s).append(") values( ");  for (int i=0; i < total - 1; i++) {    sql.append("?, ");  }  sql.append("?)");  Connection c=null;  PreparedStatement p=null;  try {    c=getConnection();    if (c == null)     return -1;    p=c.prepareStatement(sql.toString());    int order=1;    for (    String name : sets.names()) {      Object v=sets.value(name);      setParameter(p,order++,v);    }    return p.executeUpdate();  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + sets.toString(),e);  } finally {    close(p,c);  }  return 0;}  }
class C{  public OperationTimeoutException(){  super(DETAILED_MESSAGE);}  }
class C{  private void init(String[] configArgs) throws Exception {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"init",(Object[])configArgs);  }  final Configuration config=ConfigurationProvider.getInstance(configArgs,getClass().getClassLoader());  loginContext=(LoginContext)config.getEntry(TxnManager.MAHALO,"loginContext",LoginContext.class,null);  if (loginContext != null) {    doInitWithLogin(config,loginContext);  } else {    doInit(config);  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"init");  }}  }
class C{  private void updateHull(final Vector2D point,final List<Vector2D> hull){  final double tolerance=getTolerance();  if (hull.size() == 1) {    final Vector2D p1=hull.get(0);    if (p1.distance(point) < tolerance) {      return;    }  }  while (hull.size() >= 2) {    final int size=hull.size();    final Vector2D p1=hull.get(size - 2);    final Vector2D p2=hull.get(size - 1);    final double offset=new Line(p1,p2,tolerance).getOffset(point);    if (FastMath.abs(offset) < tolerance) {      final double distanceToCurrent=p1.distance(point);      if (distanceToCurrent < tolerance || p2.distance(point) < tolerance) {        return;      }      final double distanceToLast=p1.distance(p2);      if (isIncludeCollinearPoints()) {        final int index=distanceToCurrent < distanceToLast ? size - 1 : size;        hull.add(index,point);      } else {        if (distanceToCurrent > distanceToLast) {          hull.remove(size - 1);          hull.add(point);        }      }      return;    } else     if (offset > 0) {      hull.remove(size - 1);    } else {      break;    }  }  hull.add(point);}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  public NotStrictlyPositiveException(Number value){  super(value,INTEGER_ZERO,false);}  }
class C{  protected void collectProperties(Class<?> type,Type<?> referenceType,Map<String,Property> properties){  try {    BeanInfo beanInfo=Introspector.getBeanInfo(type);    PropertyDescriptor[] descriptors=beanInfo.getPropertyDescriptors();    for (    final PropertyDescriptor pd : descriptors) {      try {        Method readMethod=getReadMethod(pd,type);        Method writeMethod=getWriteMethod(pd,type,null);        Property property=processProperty(pd.getName(),pd.getPropertyType(),readMethod,writeMethod,type,referenceType,properties);        postProcessProperty(property,pd,readMethod,writeMethod,type,referenceType,properties);      } catch (      final Exception e) {        throw new RuntimeException("Unexpected error while trying to resolve property " + referenceType.getCanonicalName() + ", ["+ pd.getName()+ "]",e);      }    }  } catch (  IntrospectionException e) {    throw new RuntimeException(e);  }}  }
class C{  public Dfp dotrap(int type,String what,Dfp oper,Dfp result){  Dfp def=result;switch (type) {case DfpField.FLAG_INVALID:    def=newInstance(getZero());  def.sign=result.sign;def.nans=QNAN;break;case DfpField.FLAG_DIV_ZERO:if (nans == FINITE && mant[mant.length - 1] != 0) {def=newInstance(getZero());def.sign=(byte)(sign * oper.sign);def.nans=INFINITE;}if (nans == FINITE && mant[mant.length - 1] == 0) {def=newInstance(getZero());def.nans=QNAN;}if (nans == INFINITE || nans == QNAN) {def=newInstance(getZero());def.nans=QNAN;}if (nans == INFINITE || nans == SNAN) {def=newInstance(getZero());def.nans=QNAN;}break;case DfpField.FLAG_UNDERFLOW:if ((result.exp + mant.length) < MIN_EXP) {def=newInstance(getZero());def.sign=result.sign;} else {def=newInstance(result);}result.exp+=ERR_SCALE;break;case DfpField.FLAG_OVERFLOW:result.exp-=ERR_SCALE;def=newInstance(getZero());def.sign=result.sign;def.nans=INFINITE;break;default :def=result;break;}return trap(type,what,oper,def,result);}  }
class C{  public ForceItem(){  mass=1.0f;  force=new float[]{0.f,0.f};  velocity=new float[]{0.f,0.f};  location=new float[]{0.f,0.f};  plocation=new float[]{0.f,0.f};  k=new float[4][2];  l=new float[4][2];}  }
class C{  public void add(final BSPTree<S> node){  for (  final BSPTree<S> existing : list) {    if (node == existing) {      return;    }  }  list.add(node);}  }
class C{  protected void createStmt(polyglot.ast.Stmt stmt){  if (stmt instanceof polyglot.ast.Eval) {    base().createAggressiveExpr(((polyglot.ast.Eval)stmt).expr(),false,false);  } else   if (stmt instanceof polyglot.ast.If) {    createIf2((polyglot.ast.If)stmt);  } else   if (stmt instanceof polyglot.ast.LocalDecl) {    createLocalDecl((polyglot.ast.LocalDecl)stmt);  } else   if (stmt instanceof polyglot.ast.Block) {    createBlock((polyglot.ast.Block)stmt);  } else   if (stmt instanceof polyglot.ast.While) {    createWhile2((polyglot.ast.While)stmt);  } else   if (stmt instanceof polyglot.ast.Do) {    createDo2((polyglot.ast.Do)stmt);  } else   if (stmt instanceof polyglot.ast.For) {    createForLoop2((polyglot.ast.For)stmt);  } else   if (stmt instanceof polyglot.ast.Switch) {    createSwitch((polyglot.ast.Switch)stmt);  } else   if (stmt instanceof polyglot.ast.Return) {    createReturn((polyglot.ast.Return)stmt);  } else   if (stmt instanceof polyglot.ast.Branch) {    createBranch((polyglot.ast.Branch)stmt);  } else   if (stmt instanceof polyglot.ast.ConstructorCall) {    createConstructorCall((polyglot.ast.ConstructorCall)stmt);  } else   if (stmt instanceof polyglot.ast.Empty) {  } else   if (stmt instanceof polyglot.ast.Throw) {    createThrow((polyglot.ast.Throw)stmt);  } else   if (stmt instanceof polyglot.ast.Try) {    createTry((polyglot.ast.Try)stmt);  } else   if (stmt instanceof polyglot.ast.Labeled) {    createLabeled((polyglot.ast.Labeled)stmt);  } else   if (stmt instanceof polyglot.ast.Synchronized) {    createSynchronized((polyglot.ast.Synchronized)stmt);  } else   if (stmt instanceof polyglot.ast.Assert) {    createAssert((polyglot.ast.Assert)stmt);  } else   if (stmt instanceof polyglot.ast.LocalClassDecl) {    createLocalClassDecl((polyglot.ast.LocalClassDecl)stmt);  } else {    throw new RuntimeException("Unhandled Stmt: " + stmt.getClass());  }}  }
class C{  @Override public void endDTD(Augmentations augmentations) throws XNIException {}  }
class C{  static Type<?>[] convertTypeArgumentsFromAncestry(final Class<?> rawType,final Set<java.lang.reflect.Type> bounds){  Map<TypeVariable<?>,Type<?>> typesByVariable=new LinkedHashMap<TypeVariable<?>,Type<?>>();  for (  TypeVariable<?> var : rawType.getTypeParameters()) {    typesByVariable.put(var,TypeFactory.limitedValueOf(var,bounds));  }  Set<java.lang.reflect.Type> genericAncestors=new LinkedHashSet<java.lang.reflect.Type>();  genericAncestors.add(rawType.getGenericSuperclass());  genericAncestors.add(rawType.getSuperclass());  genericAncestors.addAll(Arrays.asList(rawType.getGenericInterfaces()));  genericAncestors.addAll(Arrays.asList(rawType.getInterfaces()));  Iterator<java.lang.reflect.Type> iter=genericAncestors.iterator();  while (iter.hasNext()) {    java.lang.reflect.Type ancestor=iter.next();    iter.remove();    if (ancestor instanceof ParameterizedType) {      ParameterizedType superType=(ParameterizedType)ancestor;      TypeVariable<?>[] variables=((Class<?>)superType.getRawType()).getTypeParameters();      java.lang.reflect.Type[] actuals=superType.getActualTypeArguments();      for (int i=0; i < variables.length; ++i) {        Type<?> resolvedActual=TypeFactory.limitedValueOf(actuals[i],bounds);        TypeVariable<?> var=(TypeVariable<?>)((actuals[i] instanceof TypeVariable) ? actuals[i] : variables[i]);        Type<?> currentActual=typesByVariable.get(var);        if (currentActual != null) {          typesByVariable.put(var,getMostSpecificType(currentActual,resolvedActual));        }      }    } else     if (ancestor instanceof Class) {      Class<?> superType=(Class<?>)ancestor;      TypeVariable<?>[] variables=superType.getTypeParameters();      for (int i=0; i < variables.length; ++i) {        Type<?> resolvedActual=TypeFactory.limitedValueOf(variables[i],bounds);        Type<?> currentActual=typesByVariable.get(variables[i]);        if (currentActual != null) {          typesByVariable.put(variables[i],getMostSpecificType(currentActual,resolvedActual));        }      }    }  }  return typesByVariable.values().toArray(new Type<?>[0]);}  }
class C{  public ParameterRef newParameterRef(Type paramType,int number){  return Jimple.v().newParameterRef(paramType,number);}  }
class C{  public AuthConfirmQuery testMode(Boolean value){  return unsafeParam("test_mode",value);}  }
class C{  private void checkForUpgrades(@Nullable List completedChanges){  if (completedChanges == null) {    return;  }  int highestNewApiLevel=0;  for (  Object o : completedChanges) {    if (!(o instanceof IPkgDesc)) {      continue;    }    IPkgDesc pkgDesc=(IPkgDesc)o;    if (pkgDesc.getType().equals(PkgType.PKG_PLATFORM)) {      AndroidVersion version=pkgDesc.getAndroidVersion();      if (version != null && version.getApiLevel() > highestNewApiLevel) {        highestNewApiLevel=version.getApiLevel();      }    }  }  if (highestNewApiLevel > 0) {    myState.put(NEWLY_INSTALLED_API_KEY,highestNewApiLevel);  }}  }
class C{  public static long swapLong(long value){  return (((value >> 0) & 0xff) << 56) + (((value >> 8) & 0xff) << 48) + (((value >> 16) & 0xff) << 40)+ (((value >> 24) & 0xff) << 32)+ (((value >> 32) & 0xff) << 24)+ (((value >> 40) & 0xff) << 16)+ (((value >> 48) & 0xff) << 8)+ (((value >> 56) & 0xff) << 0);}  }
class C{  public static int px2dip(Context context,float pxValue){  return (int)(pxValue / getDensity(context) + 0.5f);}  }
class C{  public CategoryHolder(View itemView,CategoryAboutObject object){  super(itemView);  TextView text=(TextView)itemView.findViewById(R.id.item_about_category_title);  text.setText(object.category);}  }
class C{  public double chiSquareDataSetsComparison(long[] observed1,long[] observed2) throws MathIllegalArgumentException {  if (observed1.length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,observed1.length,2);  }  MathUtils.checkDimension(observed1.length,observed2.length);  MathArrays.checkNonNegative(observed1);  MathArrays.checkNonNegative(observed2);  long countSum1=0;  long countSum2=0;  boolean unequalCounts=false;  double weight=0.0;  for (int i=0; i < observed1.length; i++) {    countSum1+=observed1[i];    countSum2+=observed2[i];  }  if (countSum1 == 0 || countSum2 == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NOT_ALLOWED);  }  unequalCounts=countSum1 != countSum2;  if (unequalCounts) {    weight=FastMath.sqrt((double)countSum1 / (double)countSum2);  }  double sumSq=0.0d;  double dev=0.0d;  double obs1=0.0d;  double obs2=0.0d;  for (int i=0; i < observed1.length; i++) {    if (observed1[i] == 0 && observed2[i] == 0) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY,i);    } else {      obs1=observed1[i];      obs2=observed2[i];      if (unequalCounts) {        dev=obs1 / weight - obs2 * weight;      } else {        dev=obs1 - obs2;      }      sumSq+=(dev * dev) / (obs1 + obs2);    }  }  return sumSq;}  }
class C{  public void saveToFile(final File file,final Object objectToSave) throws XMLException {  try {    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    StringWriter writer=new StringWriter();    marshaller.marshal(objectToSave,writer);    marshaller.marshal(objectToSave,file);  } catch (  Exception e) {    throw new XMLException("Cannot save to " + file.getAbsolutePath(),e);  }}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public boolean isUsernameIndex(String[] args,int index){  return index == 0;}  }
class C{  public SQLQuery(String typeName,String sqlExpression,QueryResultType queryResultType){  this(sqlExpression,typeName,null,queryResultType,null);}  }
class C{  @Override public void exec() throws InvalidJobException {  if (currentState != State.QUEUED) {    throw new InvalidJobException("Illegal state change");  }  currentState=State.RUNNING;  init();  Throwable thrown=null;  Map<String,Object> result=null;  try {    LocalDispatcher dispatcher=dctx.getDispatcher();    result=dispatcher.runSync(getServiceName(),getContext());    if (ServiceUtil.isError(result)) {      thrown=new Exception(ServiceUtil.getErrorMessage(result));    }    if (requester != null) {      requester.receiveResult(result);    }  } catch (  Throwable t) {    if (requester != null) {      requester.receiveThrowable(t);    }    thrown=t;  }  if (thrown == null) {    finish(result);  } else {    failed(thrown);  }}  }
class C{  public void writeTo(DataOutput out) throws IOException {  if (byteValuedDiscreteFeatures != null) {    out.write(byteValuedDiscreteFeatures);  }  if (shortValuedDiscreteFeatures != null) {    for (int i=0; i < shortValuedDiscreteFeatures.length; i++) {      out.writeShort(shortValuedDiscreteFeatures[i]);    }  }  if (continuousFeatures != null) {    for (int i=0; i < continuousFeatures.length; i++) {      out.writeFloat(continuousFeatures[i]);    }  }}  }
class C{  public Boolean isLogRetained(){  return logRetained;}  }
class C{  private final boolean eq(Object o1,Object o2){  return o1 == o2 || ((o1 != null) && o1.equals(o2));}  }
class C{  private void sendSensorEventDataRequests(){  try {    Log.v(TAG,"Updating sensor event data request");    for (    Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {      sendSensorEventDataRequest(sensorDataRequestEntry.getKey(),sensorDataRequestEntry.getValue());    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public AccountUnregisterDeviceQuery(VkApiClient client,UserActor actor){  super(client,"account.unregisterDevice",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void trim(double leftTrimSecond,double rightTrimSecond){  int sampleRate=waveHeader.getSampleRate();  int bitsPerSample=waveHeader.getBitsPerSample();  int channels=waveHeader.getChannels();  int leftTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * leftTrimSecond);  int rightTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * rightTrimSecond);  trim(leftTrimNumberOfSample,rightTrimNumberOfSample);}  }
class C{  public Boolean createStock(EntityManager em,String productId){  Boolean status=true;  Stock stock=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    stock=new Stock();    stock.setProductId(productId);    stock.setQuantity(BigDecimal.valueOf(10));    stock.setLotSize(BigDecimal.valueOf(15));    stock.setMinStock(BigDecimal.valueOf(5));    em.persist(stock);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during creation of Stock. Detailed info: " + e);  }  return status;}  }
class C{  public static void paintCheckeredBackground(Graphics g,Shape clip){  paintCheckeredBackground(g,Color.LIGHT_GRAY,Color.GRAY,clip,BACKGROUND_CELL_SIZE);}  }
class C{  public boolean isInstance(){  return kind.isInstance();}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static boolean bookmark(String id){  init(context);  if (!isBookmarked(id)) {    Inquiry.get().insertInto(Constants.DATABASE_NAME,BookmarksDB.class).values(new BookmarksDB(id)).run();    return true;  } else   unbookmark(id);  return false;}  }
class C{  @Override public boolean skipChar(int c) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int cc=fCurrentEntity.ch[fCurrentEntity.position];  if (cc == c) {    fCurrentEntity.position++;    if (c == '\n') {      fCurrentEntity.lineNumber++;      fCurrentEntity.columnNumber=1;    } else {      fCurrentEntity.columnNumber++;    }    return true;  } else   if (c == '\n' && ((cc == 0x2028 || cc == 0x85) && fCurrentEntity.isExternal())) {    fCurrentEntity.position++;    fCurrentEntity.lineNumber++;    fCurrentEntity.columnNumber=1;    return true;  } else   if (c == '\n' && (cc == '\r') && fCurrentEntity.isExternal()) {    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)cc;      load(1,false);    }    int ccc=fCurrentEntity.ch[++fCurrentEntity.position];    if (ccc == '\n' || ccc == 0x85) {      fCurrentEntity.position++;    }    fCurrentEntity.lineNumber++;    fCurrentEntity.columnNumber=1;    return true;  }  return false;}  }
class C{  private int tags_index(dictionary_delta dict_delta,Tags tags){  final BiMap<Tags,Integer> dict=from_.getTagDict().inverse();  final Integer resolved=dict.get(tags);  if (resolved != null)   return resolved;  final int allocated=allocate_index_(dict);  dict.put(tags,allocated);  tag_dictionary_delta tdd=new tag_dictionary_delta();  tdd.id=allocated;  tdd.value=new tags();  tdd.value.elems=tags.stream().map(null).toArray(null);  dict_delta.tdd=Stream.concat(Arrays.stream(dict_delta.tdd),Stream.of(tdd)).toArray(null);  LOG.log(Level.FINE,"dict_delta.tdd: {0} items (added {1})",new Object[]{dict_delta.tdd.length,tags});  return allocated;}  }
class C{  private boolean normalizeDefaultAttrValue(XMLString value){  boolean skipSpace=true;  int current=value.offset;  int end=value.offset + value.length;  for (int i=value.offset; i < end; i++) {    if (value.ch[i] == ' ') {      if (!skipSpace) {        value.ch[current++]=' ';        skipSpace=true;      } else {      }    } else {      if (current != i) {        value.ch[current]=value.ch[i];      }      current++;      skipSpace=false;    }  }  if (current != end) {    if (skipSpace) {      current--;    }    value.length=current - value.offset;    return true;  }  return false;}  }
class C{  private void update(Collection<ResolverTuple> underlyingTuples,Throwable t){  if (t != null)   applyException(t); else   if (underlyingTuples != null)   applyUpdate(underlyingTuples); else   applyException(null);}  }
class C{  public void mapChannels(List<Pair<LayoutType,String>> options){  List<Pair<LayoutType,String>> optionsByDescriptor=new ArrayList<>();  List<Pair<LayoutType,String>> optionsByOrder=new ArrayList<>();  if (essenceLayoutValid) {    optionsByDescriptor.addAll(options);  } else {    optionsByOrder.addAll(options);  }  optionsByDescriptor.stream().forEachOrdered(null);  optionsByOrder.stream().forEachOrdered(null);}  }
class C{  private void startSorting() throws CarbonSortKeyAndGroupByException {  LOGGER.info("Number of temp file: " + this.fileCounter);  createRecordHolderQueue(intermediateFiles);  LOGGER.info("Started adding first record from each file");  SortTempFileChunkHolder sortTempFileChunkHolder=null;  for (  File tempFile : intermediateFiles) {    sortTempFileChunkHolder=new SortTempFileChunkHolder(tempFile,mergerParameters.getDimColCount(),mergerParameters.getComplexDimColCount(),mergerParameters.getMeasureColCount(),mergerParameters.getFileBufferSize(),mergerParameters.getNoDictionaryCount(),mergerParameters.getAggType(),mergerParameters.getNoDictionaryDimnesionColumn());    sortTempFileChunkHolder.initialize();    sortTempFileChunkHolder.readRow();    this.totalNumberOfRecords+=sortTempFileChunkHolder.getEntryCount();    this.recordHolderHeap.add(sortTempFileChunkHolder);  }  LOGGER.info("Heap Size" + this.recordHolderHeap.size());}  }
class C{  private static String fixOcrNumsToLetters(String src){  return src.replace("1","l").replace("0","o").replace("5","s").replace("2","z");}  }
class C{  public TLongObjectHashMap(TLongHashingStrategy strategy){  super(strategy);}  }
class C{  public Buffer pin(BlockId blk){  PinnedBuffer pinnedBuff=pinnedBuffers.get(blk);  if (pinnedBuff != null) {    pinnedBuff.pinnedCount++;    return pinnedBuff.buffer;  }  if (pinnedBuffers.size() == BUFFER_POOL_SIZE)   throw new BufferAbortException();  try {    Buffer buff;    long timestamp=System.currentTimeMillis();    boolean waitedBeforeGotBuffer=false;    buff=bufferPool.pin(blk);    if (buff == null) {      waitedBeforeGotBuffer=true;synchronized (bufferPool) {        waitingThreads.add(Thread.currentThread());        while (buff == null && !waitingTooLong(timestamp)) {          bufferPool.wait(MAX_TIME);          if (waitingThreads.get(0).equals(Thread.currentThread()))           buff=bufferPool.pin(blk);        }        waitingThreads.remove(Thread.currentThread());      }    }    if (buff == null) {      repin();      buff=pin(blk);    } else {      pinnedBuffers.put(buff.block(),new PinnedBuffer(buff));    }    if (waitedBeforeGotBuffer) {synchronized (bufferPool) {        bufferPool.notifyAll();      }    }    return buff;  } catch (  InterruptedException e) {    throw new BufferAbortException();  }}  }
class C{  public static int apply(Document srcDoc,Collection<String> samplesToUse,boolean asUpperBound,int samplesThreshold,float taxonDetectionThresholdPercent,Map<String,Map<Integer,Integer[]>> tarClassification2class2counts,ProgressListener progress){  final BitSet sampleIds=srcDoc.getDataTable().getSampleIds(samplesToUse);  int size=0;  if (sampleIds.cardinality() > 0) {    DataTable dataTable=srcDoc.getDataTable();    for (    String classificationName : dataTable.getClassification2Class2Counts().keySet()) {      final Map<Integer,Integer[]> srcClass2counts=srcDoc.getDataTable().getClass2Counts(classificationName);      final Node root;      if (classificationName.equals(Classification.Taxonomy))       root=TaxonomyData.getTree().getRoot(); else {        root=ClassificationManager.get(classificationName,true).getFullTree().getRoot();      }      final Map<Integer,Integer[]> tarClass2counts=new HashMap<>();      tarClassification2class2counts.put(classificationName,tarClass2counts);      final int[] detectionThreshold=computeDetectionThreshold(srcDoc.getNumberOfSamples(),srcClass2counts,taxonDetectionThresholdPercent);      computeCoreBiomeRec(sampleIds,asUpperBound,srcDoc.getNumberOfSamples(),samplesThreshold,detectionThreshold,root,srcClass2counts,tarClass2counts);    }    final Map<Integer,Integer[]> taxId2counts=tarClassification2class2counts.get(ClassificationType.Taxonomy.toString());    if (taxId2counts != null) {      for (      Integer taxId : taxId2counts.keySet()) {        if (taxId >= 0) {          Integer[] values=taxId2counts.get(taxId);          size+=values[0];        }      }    }    if (size == 0) {      for (      String classificationName : dataTable.getClassification2Class2Counts().keySet()) {        if (!classificationName.equals(ClassificationType.Taxonomy.toString())) {          final Map<Integer,Integer[]> id2counts=tarClassification2class2counts.get(classificationName);          if (id2counts != null) {            for (            Integer ids : id2counts.keySet()) {              final Integer[] values=id2counts.get(ids);              if (ids >= 0)               size+=values[0];            }            if (size > 0)             break;          }        }      }    }  }  return size;}  }
class C{  public AemContentFinder refreshResults(){  getCurrentTab().refreshResults();  return this;}  }
class C{  public void copyTo(@Nonnull final UserAgent.Builder builder){  builder.setFamily(family);  builder.setIcon(icon);  builder.setName(familyName);  builder.setProducer(producer);  builder.setProducerUrl(producerUrl);  builder.setTypeName(type.getName());  builder.setUrl(url);  if (operatingSystem != null) {    operatingSystem.copyTo(builder);  }}  }
class C{  public boolean before(Model m){  String uri=m.getURI();  for (  String name : filters.keySet()) {    if (uri.matches(name)) {      Object o=filters.get(name);      try {        IFilter f=null;        if (o instanceof IFilter) {          f=(IFilter)o;        } else {          f=(IFilter)(Class.forName((String)o).newInstance());          filters.put(name,f);        }        if (!f.before(m)) {          return false;        }      } catch (      Exception e) {        log.error(e.getMessage(),e);        filters.remove(name);      }    }  }  Module m1=floor();  if (m1 != null) {    return m1.before(m);  }  return true;}  }
class C{  public UsersGetSubscriptionsQueryWithExtended(VkApiClient client){  super(client,"users.getSubscriptions",GetSubscriptionsExtendedResponse.class);  extended(true);}  }
class C{  public double max(){  return m_max;}  }
class C{  public PoolingByteArrayOutputStream(com.android.volley.toolbox.ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public SnapshotDescriptor(X snapshot,Image icon){  this(snapshot,null,icon);}  }
class C{  public ConcurrentRequestsThrottlingFilter(ConcurrentRequestRegulatorSupplier regulatorSupplier){  _regulatorSupplier=checkNotNull(regulatorSupplier,"Concurrent request regulator supplier is required");}  }
class C{  private void invalidSurrogate(int uuuuu) throws MalformedByteSequenceException {  throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,"InvalidHighSurrogate",new Object[]{Integer.toHexString(uuuuu)});}  }
class C{  public float[] generateTransformedValuesBubble(IBubbleDataSet data,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil(to - from) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    Entry e=data.getEntryForIndex(j / 2 + from);    if (e != null) {      valuePoints[j]=(float)(e.getXIndex() - from) * phaseX + from;      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);  setChild(new List(),5);}  }
class C{  public CommandManagerFX(IDirector dir,Object viewer,String[] commandsPaths){  this(dir,viewer,commandsPaths,false);}  }
class C{  public static boolean isMetaTempo(MidiMessage midiMsg){  if (midiMsg.getLength() != 6 || midiMsg.getStatus() != MetaMessage.META) {    return false;  }  byte[] msg=midiMsg.getMessage();  return ((msg[1] & 0xFF) == META_TEMPO_TYPE) && (msg[2] == 3);}  }
class C{  private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  count=0;}  }
class C{  public void addProcessToReboot(final String processName){  processesToReboot.add(processName);}  }
class C{  public IdsQuery(Class<T> type,Object[] ids,Object[] routings){  this(type.getName(),ids,null,routings,QueryResultType.DEFAULT);}  }
class C{  @AfterClass protected void afterClassTestWrapper(){  LOGGER.debug(this.getClass().getName() + "@AfterClass");}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public static WxMaterialCountResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxMaterialCountResult.class);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  final ClusterViewer viewer=getViewer();  viewer.updateGraph();}  }
class C{  public Decision suggestCategory(String sFilename){  DocumentNGramGraph dDoc=new DocumentNGramSymWinGraph();  try {    dDoc.loadDataStringFromFile(sFilename);  } catch (  IOException ex) {    Logger.getLogger(Decider.class.getName()).log(Level.SEVERE,null,ex);    return null;  }  return suggestCategory(dDoc);}  }
class C{  public CyclicCounter(int startValue){  super(startValue);}  }
class C{  private void rdp_decoding_rd(List<ArrayList<Character>> g_data,int disks,int stripe_unit_size,int w,int x,int y){  int packet_size=stripe_unit_size / w;  int ccount, count, rcount;  ArrayList<Character> rdata, xdata, ydata, row_data, diag_data;  int g, gx, gy, coffset, i, j, k, c;  int row_disk, diag_disk;  rcount=stripe_unit_size;  rdata=g_data.get(0);  xdata=g_data.get(x);  ydata=g_data.get(y);  gx=(x >= 3 ? x - 3 : pnumRdp - 1);  gy=(y >= 3 ? y - 3 : pnumRdp - 1);  row_disk=x;  diag_disk=y;  row_data=xdata;  diag_data=ydata;  g=gx;  while (true) {    if (g == pnumRdp - 1) {      if (gx == (row_disk >= 3 ? row_disk - 3 : row_disk + pnumRdp - 3)) {        row_disk=y;        diag_disk=x;        row_data=ydata;        diag_data=xdata;        g=gy;        continue;      } else       break;    } else {      int row_index;      ArrayList<Character> cdata;      int diag_count;      int row_count;      diag_count=stripe_unit_size;      row_count=stripe_unit_size;      row_index=(g - diag_disk + pnumRdp + 2) % pnumRdp;      coffset=(row_index + diag_disk - 2 + pnumRdp) % pnumRdp * packet_size;      cdata=g_data.get(1);      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && k < packet_size; i++, j++, k++) {        diag_data.set(i,cdata.get(j));      }      for (c=2; c < (disks + 2); c++) {        if (c == diag_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data.get(c);        coffset=(row_index + diag_disk - c + pnumRdp) % pnumRdp * packet_size;        for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {          diag_data.set(i,(char)(diag_data.get(i) ^ cdata.get(j)));        }      }      ccount=rcount;      cdata=rdata;      coffset=(row_index + diag_disk - 1 + pnumRdp) % pnumRdp * packet_size;      for (i=row_index * packet_size, j=coffset, k=0; i < diag_count && j < ccount && k < packet_size; i++, j++, k++) {        diag_data.set(i,(char)(diag_data.get(i) ^ cdata.get(j)));      }      coffset=row_index * packet_size;      for (c=2; c < (disks + 2); c++) {        if (c == row_disk)         continue;        ccount=stripe_unit_size;        cdata=g_data.get(c);        coffset=row_index * packet_size;        for (i=coffset, k=0; i < ccount && k < packet_size; i++, k++) {          row_data.set(i,(char)(row_data.get(i) ^ cdata.get(i)));        }      }      cdata=rdata;      coffset=row_index * packet_size;      count=row_count;      for (i=coffset, k=0; i < count && k < packet_size; i++, k++) {        row_data.set(i,(char)(row_data.get(i) ^ cdata.get(i)));      }      g=(row_index + row_disk - 2) % pnumRdp;    }  }}  }
class C{  public boolean isDomainSuffix(String extension){  return domains.containsKey(extension);}  }
class C{  boolean tryTransfer(E e){  int start=startIndex();  return scanAndTransferToWaiter(e,start) || awaitExchange(e,start);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_FRIENDLY_PARRY(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1240218,value0,value1);}  }
class C{  public int id(){  return id;}  }
class C{  void onItemClick(MenuItem menuItem){  if (menuItem.isEnabled()) {    dismiss();    mHandler.onOptionsItemSelected(menuItem);  }}  }
class C{  public static int locToBlock(double loc){  return NumberConversions.floor(loc);}  }
class C{  public IndexScanOperator(Database.Transaction transaction,String tableName,String columnName,QueryPlan.PredicateOperator predicate,DataType value) throws QueryPlanException, DatabaseException {  super(OperatorType.INDEXSCAN);  this.tableName=tableName;  this.transaction=transaction;  this.columnName=columnName;  this.predicate=predicate;  this.value=value;  this.setOutputSchema(this.computeSchema());  columnName=this.checkSchemaForColumn(this.getOutputSchema(),columnName);  this.sourceColumnIndex=this.getOutputSchema().getFieldNames().indexOf(columnName);}  }
class C{  public AemPathWindow clickCancel(){  cancelButton.click();  return this;}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public Item(ServiceItem item) throws RemoteException {  Object svc=item.service;  if (enableImplToStubReplacement && svc instanceof Remote) {    try {      svc=RemoteObject.toStub((Remote)svc);      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,"replacing {0} with {1}",new Object[]{item.service,svc});      }    } catch (    NoSuchObjectException e) {    }  }  serviceID=item.serviceID;  ServiceTypeBase stb=ClassMapper.toServiceTypeBase(svc.getClass());  serviceType=stb.type;  codebase=stb.codebase;  try {    service=new MarshalledWrapper(svc);  } catch (  IOException e) {    throw new MarshalException("error marshalling arguments",e);  }  attributeSets=EntryRep.toEntryRep(item.attributeSets,true);}  }
class C{  @Override public int hashCode(){  return mask != null ? mask.hashCode() : 0;}  }
class C{  public RioServiceDescriptor(String name,String codebase,String policy,String classpath,String implClassName,String[] serverConfigArgs,LifeCycle lifeCycle){  if (codebase == null || policy == null || classpath == null || implClassName == null)   throw new NullPointerException("Codebase, policy, classpath, and " + "implementation cannot be null");  this.name=name;  this.codebase=codebase;  this.policy=policy;  this.classpath=classpath;  this.implClassName=implClassName;  this.serverConfigArgs=serverConfigArgs;  this.lifeCycle=(lifeCycle == null) ? NoOpLifeCycle : lifeCycle;}  }
class C{  public static boolean hasSelfPermissions(Context context,String... permissions){  for (  String permission : permissions) {    if (permissionExists(permission) && !hasSelfPermission(context,permission)) {      return false;    }  }  return true;}  }
class C{  public static void transferLocalIdToDeviceId(@NotNull IDevice device,@NotNull InstantRunContext context){  InstantRunBuildInfo buildInfo=context.getInstantRunBuildInfo();  assert buildInfo != null;  String localTimestamp=buildInfo.getTimeStamp();  assert !StringUtil.isEmpty(localTimestamp) : "Unable to detect build timestamp";  InstantRunClient.transferBuildIdToDevice(device,localTimestamp,context.getApplicationId(),ILOGGER);}  }
class C{  public PhotosSaveOwnerPhotoQuery server(String value){  return unsafeParam("server",value);}  }
class C{  @Override public double[] makeInverseCumulativeTestValues(){  double[] points=makeCumulativeTestPoints();  double[] points2=new double[points.length - 4];  System.arraycopy(points,4,points2,0,points2.length - 4);  return points2;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AQI\"";  db.execSQL(sql);}  }
class C{  public ButtonClick(GuiScreen gui,GuiButton button){  super(gui);  this.button=button;}  }
class C{  public static boolean writeFile(String filePath,InputStream stream){  return writeFile(filePath,stream,false);}  }
class C{  public void multipleLinearRegression(String fileName,int indVariable,int[] c,String[] factors,boolean interceptTerm,int rowIni,int rowEnd){  try {    BufferedReader reader=new BufferedReader(new FileReader(fileName));    Matrix data=Matrix.read(reader);    reader.close();    int rows=data.getRowDimension() - 1;    int cols=data.getColumnDimension() - 1;    if (rowIni < 0 || rowIni > rows)     throw new RuntimeException("Problem reading file, rowIni=" + rowIni + "  and number of rows in file="+ rows);    if (rowEnd < 0 || rowEnd > rows)     throw new RuntimeException("Problem reading file, rowIni=" + rowIni + "  and number of rows in file="+ rows);    if (rowIni > rowEnd)     throw new RuntimeException("Problem reading file, rowIni < rowend" + rowIni + " < "+ rowEnd);    Matrix indVar=data.getMatrix(rowIni,rowEnd,indVariable,indVariable);    data=data.getMatrix(rowIni,rowEnd,c);    multipleLinearRegression(indVar,data,interceptTerm);  } catch (  Exception e) {    throw new RuntimeException("Problem reading file " + fileName,e);  }}  }
class C{  public MarketAddQuery photoIds(List<Integer> value){  return unsafeParam("photo_ids",value);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public void jPanelComponentPropertyChange(final JTabbedPane panel,final Object objclass,final String name,final boolean enabled,final String[] value,final int index){  JPanel jPanelTemp=null;  JComboBox jComboTemp=null;  JTextField jTextTemp=null;  JLabel jLabelTemp=null;  Component[] components=null;  int totalTabs=0;  final Map<String,Component> componentMap=new HashMap<String,Component>();  totalTabs=panel.getTabCount() - 1;  for (int i=1; i < totalTabs; i++) {    componentMap.clear();    jPanelTemp=(JPanel)panel.getComponentAt(i);    components=jPanelTemp.getComponents();    for (int n=0; n < components.length; ++n) {      if (null != components[n].getName()) {        componentMap.put(components[n].getName(),components[n]);      }    }    if (JComboBox.class.equals(objclass)) {      jComboTemp=(JComboBox)componentMap.get(name);      if (enabled) {        jComboTemp.setSelectedIndex(index);        jComboTemp.setEnabled(true);      } else {        jComboTemp.setSelectedIndex(index);        jComboTemp.setEnabled(false);      }      if (null != value) {        jComboTemp.setEditable(true);        jComboTemp.removeAllItems();        jComboTemp.addItem(value[0]);        jComboTemp.addItem(value[1]);        jComboTemp.setEditable(false);      }    } else     if (JTextField.class.equals(objclass)) {      jTextTemp=(JTextField)componentMap.get(name);      if (enabled) {        jTextTemp.setEnabled(true);      } else {        jTextTemp.setEnabled(false);      }      jTextTemp.setText(String.valueOf(value));    } else     if (JLabel.class.equals(objclass)) {      jLabelTemp=(JLabel)componentMap.get(name);      if (enabled) {        jLabelTemp.setEnabled(true);      } else {        jLabelTemp.setEnabled(false);      }      jLabelTemp.setText(String.valueOf(value));    }  }}  }
class C{  public static void listMixersAndExit(boolean bPlayback){  out("Available Mixers:");  Mixer.Info[] aInfos=AudioSystem.getMixerInfo();  for (int i=0; i < aInfos.length; i++) {    Mixer mixer=AudioSystem.getMixer(aInfos[i]);    Line.Info lineInfo=new Line.Info(bPlayback ? SourceDataLine.class : TargetDataLine.class);    if (mixer.isLineSupported(lineInfo)) {      out(aInfos[i].getName());    }  }  if (aInfos.length == 0) {    out("[No mixers available]");  }  System.exit(0);}  }
class C{  public void makeUniqueLocalNames(){  sbb.makeUniqueLocalNames();}  }
class C{  public boolean containsKey(K key){  return contains(key);}  }
class C{  public Vec2d(double x,double y){  set(x,y);}  }
class C{  private static void buildIntervalSet(List<String> entries,Interval interval,Map<String,Set<Interval>> container){  entries.stream().map(null).forEach(null);}  }
class C{  public UsersGetFollowersQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private static void validateConfiguration(){  String[] versions={ApplicationInfo.getInstance().getMajorVersion(),ApplicationInfo.getInstance().getMinorVersion(),ApplicationInfo.getInstance().getMicroVersion(),ApplicationInfo.getInstance().getPatchVersion()};  for (  String version : versions) {    if (version == null || !version.matches("0|([1-9]+[0-9]*)")) {      throw new AssertionError("Invalid version component found: " + version);    }  }}  }
class C{  public static InSpacePredicate in(Object... values){  return new InSpacePredicate(values);}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  private boolean isPathRestricted(HttpServletRequest oCntxt) throws ODataException {  boolean status;  String path=oCntxt.getRequestURI().toString();  if ((path.contains("/SalesOrderHeaders") || path.contains("/Customers") || path.contains("/SalesOrderItems")) && (oCntxt.getMethod().equals("GET") || oCntxt.getMethod().equals("DELETE"))) {    status=true;  } else   if (path.contains("/PurchaseOrderHeaders") || path.contains("/PurchaseOrderItems") || path.contains("/Suppliers")|| path.contains("/Stocks")) {    status=true;  } else   if ((path.contains("/Products") || path.contains("/ProductCategories")) && (oCntxt.getMethod().equals("POST") || oCntxt.getMethod().equals("PUT") || oCntxt.getMethod().equals("DELETE"))) {    status=true;  } else   if ((path.contains("/ConfirmSalesOrder") || path.contains("/CancelSalesOrder"))) {    status=true;  } else {    status=false;  }  return status;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InvulnerableWing_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201219,skillcaster,skillname);}  }
class C{  public Sample(){  initComponents();}  }
class C{  public static void logTapsSinceOpenForDecided(int tapsSinceOpen){  RecordHistogram.recordCountHistogram("Search.ContextualSearchTapsSinceOpenDecided",tapsSinceOpen);}  }
class C{  private GSMessageImpl receiveFromQueueNoBlock(long timeout) throws ReceiveFromQueueException {  GSMessageImpl message;  long now;  long timeToWait;  long startTime=SystemTime.timeMillis();  if (_logger.isLoggable(Level.FINEST)) {    _logger.log(Level.FINEST,toString2() + "timeout=" + timeout);  }  while (!m_closed && !m_session.m_stopped && timeout > 10) {    timeToWait=Math.min(timeout,RECEIVE_TIME_FRAME);    if (_logger.isLoggable(Level.FINEST)) {      _logger.log(Level.FINEST,toString2() + "Next timeToWait=" + timeToWait);    }    message=receiveFromQueue(timeToWait);    if (message != null) {      if (_logger.isLoggable(Level.FINEST)) {        _logger.log(Level.FINEST,toString2() + "Got message: " + message);      }      return message;    }    now=SystemTime.timeMillis();    timeout=timeout - (now - startTime);    startTime=now;  }  if (_logger.isLoggable(Level.FINEST)) {    _logger.log(Level.FINEST,toString2() + "Exiting: m_closed=" + m_closed+ ", m_stopped="+ m_session.m_stopped+ ", timeout="+ timeout);  }  return null;}  }
class C{  public int addItemToEnd(ShoppingCartItem item) throws CartItemModifyException {  return addItem(cartLines.size(),item);}  }
class C{  public boolean isShowing(){  return mPopupWindow.isShowing();}  }
class C{  public static final SandboxRay show(Window owner,SandboxRay ray){  EditRayDialog ard=new EditRayDialog(owner,ray);  ard.setLocationRelativeTo(owner);  ard.setVisible(true);  if (!ard.canceled) {    return ard.rayPanel.getRay();  }  return ray;}  }
class C{  public synchronized void stopCollecting(){  started=false;  if (thread != null) {    try {      thread.join();    } catch (    InterruptedException e) {    }    thread=null;  }}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  public WaveFileReader(){}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  double stage(final BaseAbstractUnivariateIntegrator baseIntegrator,final int n) throws MathIllegalStateException {  if (n == 0) {    final double max=baseIntegrator.getMax();    final double min=baseIntegrator.getMin();    s=0.5 * (max - min) * (baseIntegrator.computeObjectiveValue(min) + baseIntegrator.computeObjectiveValue(max));    return s;  } else {    final long np=1L << (n - 1);    double sum=0;    final double max=baseIntegrator.getMax();    final double min=baseIntegrator.getMin();    final double spacing=(max - min) / np;    double x=min + 0.5 * spacing;    for (long i=0; i < np; i++) {      sum+=baseIntegrator.computeObjectiveValue(x);      x+=spacing;    }    s=0.5 * (s + sum * spacing);    return s;  }}  }
class C{  private void Ridgeblade_StalwartSkills(){  if (getOwner().isCasting() || isAlreadyDead()) {    return;  }  int rand=Rnd.get(1,16);  if (getLifeStats().getHpPercentage() <= NextAttackBuff) {    rand=Rnd.get(17,19);    NextAttackBuff=getLifeStats().getHpPercentage() - (100 / 3);    NextAttackBuff=(NextAttackBuff > 0) ? NextAttackBuff : 0;  }switch (rand) {case 1:    useSkill(17294);  break;case 2:useSkill(17295);break;case 3:useSkill(17296);break;case 4:useSkill(17297);break;case 5:useSkill(17298);break;case 6:useSkill(17299);break;case 7:useSkill(17300);break;case 8:useSkill(17301);break;case 9:useSkill(17302);break;case 10:useSkill(17303);break;case 11:useSkill(17304);break;case 12:useSkill(17305);break;case 13:useSkill(17306);break;case 14:useSkill(17307);break;case 15:useSkill(17311);break;case 16:useSkill(17312);break;case 17:apllyEffect(17308,getOwner());break;case 18:apllyEffect(17309,getOwner());break;case 19:apllyEffect(17310,getOwner());break;}}  }
class C{  public AndPredicate(Predicate p1){  add(p1);}  }
class C{  @Override public void occurrence(short occurrence,Augmentations augs) throws XNIException {  if (!fMixed) {    if (occurrence == XMLDTDContentModelHandler.OCCURS_ZERO_OR_ONE) {      fNodeIndexStack[fDepth]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE,fNodeIndexStack[fDepth],-1);    } else     if (occurrence == XMLDTDContentModelHandler.OCCURS_ZERO_OR_MORE) {      fNodeIndexStack[fDepth]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE,fNodeIndexStack[fDepth],-1);    } else     if (occurrence == XMLDTDContentModelHandler.OCCURS_ONE_OR_MORE) {      fNodeIndexStack[fDepth]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE,fNodeIndexStack[fDepth],-1);    }  }}  }
class C{  @SuppressWarnings("unchecked") @Nullable ResourceHandle tryToGetPooledResourceHandle(ResourceKey<K> resourceKey){  R resource=cache.get(resourceKey);  if (resource == null) {    return null;  }  return (resourceKey.getStatus() == Status.IDLE) && resourceKey.goFromIdleToInFlight() ? (ResourceHandle)resourceKey.handle : null;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  NewFriendDao.createTable(db,ifNotExists);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_A_TO_ME(String skillname,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201267,skillname,skillcaster);}  }
class C{  public RealMatrixFormat(){  this(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_ROW_PREFIX,DEFAULT_ROW_SUFFIX,DEFAULT_ROW_SEPARATOR,DEFAULT_COLUMN_SEPARATOR,CompositeFormat.getDefaultNumberFormat());}  }
class C{  public void init() throws ServletException {}  }
class C{  private void recycleViewsFromEnd(RecyclerView.Recycler recycler,int dt){  final int childCount=getChildCount();  if (dt < 0) {    if (DEBUG) {      Log.d(TAG,"Called recycle from end with a negative value. This might happen" + " during layout changes but may be sign of a bug");    }    return;  }  final int limit=mOrientationHelper.getEnd() - dt;  if (mShouldReverseLayout) {    for (int i=0; i < childCount; i++) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedStart(child) < limit) {        recycleChildren(recycler,0,i);        return;      }    }  } else {    for (int i=childCount - 1; i >= 0; i--) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedStart(child) < limit) {        recycleChildren(recycler,childCount - 1,i);        return;      }    }  }}  }
class C{  public static int exportReadName2Headers(MainViewer viewer,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final Document doc=viewer.getDir().getDocument();      final IConnector connector=doc.getConnector();      final IClassificationBlock classificationBlock=connector.getClassificationBlock(ClassificationType.Taxonomy.toString());      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      progressListener.setSubtask("Read ids to reference sequence headers");      progressListener.setMaximum(taxonIds.size());      progressListener.setProgress(0);      for (      int taxonId : taxonIds) {        Set<Integer> allBelow;        Node v=viewer.getTaxId2Node(taxonId);        if (v.getOutDegree() == 0)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {          allBelow=new HashSet<>();          allBelow.add(taxonId);        }        for (        int id : allBelow) {          if (classificationBlock.getSum(id) > 0) {            try (IReadBlockIterator it=connector.getReadsIterator(ClassificationType.Taxonomy.toString(),id,doc.getMinScore(),doc.getMaxExpected(),true,true)){              while (it.hasNext()) {                IReadBlock readBlock=it.next();                w.write(readBlock.getReadName() + separator);                for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {                  IMatchBlock matchBlock=readBlock.getMatchBlock(i);                  if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity() && matchBlock.getText() != null) {                    w.write(" " + Basic.swallowLeadingGreaterSign(Basic.getFirstWord(matchBlock.getText())));                  }                }                w.write("\n");                totalLines++;              }            }             progressListener.checkForCancel();          }        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (!methodConstraintsSpecified && methodConstraints != null) {    throw new InvalidObjectException("Method constraints not specified but not null");  }  if (permissions == null) {    throw new InvalidObjectException("Permissions cannot be null");  }  for (int i=permissions.length; --i >= 0; ) {    if (permissions[i] == null) {      throw new InvalidObjectException("Permission cannot be null");    }  }}  }
class C{  @Override public void publish(String topic,String payload) throws AWSIotException {  super.publish(topic,payload);}  }
class C{  private void bigWigToScores(BBFileReader reader){  List<ScreenWiggleLocusInfo> screenWigLocInfoList=new ArrayList<ScreenWiggleLocusInfo>();  for (int i=0; i < getGc().getUserWindowSize(); i++) {    screenWigLocInfoList.add(new ScreenWiggleLocusInfo());  }  BigWigIterator iter=reader.getBigWigIterator(getGc().getChrom(),getGc().getFrom(),getGc().getChrom(),getGc().getTo(),false);  while (iter.hasNext()) {    WigItem bw=iter.next();    for (int i=bw.getStartBase(); i <= bw.getEndBase(); i++) {      int idx=Utils.getIndexOfclosestValue(i,getGc().getMapping());      screenWigLocInfoList.get(idx).increment(bw.getWigValue());    }  }  ArrayList<Double> screenScores=new ArrayList<Double>();  for (  ScreenWiggleLocusInfo x : screenWigLocInfoList) {    screenScores.add((double)x.getMeanScore());  }  this.setScreenScores(screenScores);}  }
class C{  @deprecated public LanguageMatcherData addDistance(String desired,String supported,int percent,boolean oneway){  return addDistance(desired,supported,percent,oneway,null);}  }
class C{  public PhotosSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public VirtualEntryIntrospector(){  throw new IllegalStateException("This constructor is required for Externalizable and should not be called directly.");}  }
class C{  private void processLine(List<byte[]> parts,Channel channel,ChannelHandlerContext channelHandlerContext) throws UnknownCommandException, MalformedCommandException {  final int numParts=parts.size();  Op op;  try {    op=Op.findOp(parts.get(0));  } catch (  IllegalArgumentException e) {    throw new UnknownCommandException("unknown operation: " + new String(parts.get(0)));  }  CommandMessage cmd=CommandMessage.command(op);switch (op) {case DELETE:    if (numParts < 2 || numParts > 4)     throw new MalformedCommandException("invalid delete command");  cmd.setKey(parts.get(1));if (numParts > 2) {  if (Arrays.equals(parts.get(numParts - 1),NOREPLY)) {    cmd.noreply=true;    if (numParts == 4)     cmd.time=BufferUtils.atoi((parts.get(2)));  } else   if (numParts == 3) {    cmd.time=BufferUtils.atoi((parts.get(2)));  } else {    throw new MalformedCommandException("invalid delete command");  }}Channels.fireMessageReceived(channelHandlerContext,cmd,channel.getRemoteAddress());break;case DECR:case INCR:if (numParts < 3 || numParts > 4) throw new MalformedCommandException("invalid incr/decr command");cmd.setKey(parts.get(1));cmd.incrAmount=BufferUtils.atoi(parts.get(2));if (numParts == 4 && Arrays.equals(parts.get(3),NOREPLY)) {cmd.noreply=true;}Channels.fireMessageReceived(channelHandlerContext,cmd,channel.getRemoteAddress());break;case FLUSH_ALL:if (numParts >= 1) {if (Arrays.equals(parts.get(numParts - 1),NOREPLY)) {cmd.noreply=true;if (numParts == 3) cmd.time=BufferUtils.atoi((parts.get(1)));} else if (numParts == 2) cmd.time=BufferUtils.atoi((parts.get(1)));}Channels.fireMessageReceived(channelHandlerContext,cmd,channel.getRemoteAddress());break;case VERBOSITY:if (numParts < 2 || numParts > 3) throw new MalformedCommandException("invalid verbosity command");cmd.time=BufferUtils.atoi((parts.get(1)));if (numParts > 1 && Arrays.equals(parts.get(2),NOREPLY)) cmd.noreply=true;Channels.fireMessageReceived(channelHandlerContext,cmd,channel.getRemoteAddress());break;case APPEND:case PREPEND:case REPLACE:case ADD:case SET:case CAS:if (numParts < 5) {throw new MalformedCommandException("invalid command length");}int size=BufferUtils.atoi(parts.get(4));int expire=BufferUtils.atoi(parts.get(3));int flags=BufferUtils.atoi(parts.get(2));if (expire == 0) {expire=Integer.MAX_VALUE;} else if (expire > SpaceCache.THIRTY_DAYS) {expire=LocalCacheElement.Now() - expire;}cmd.element=new LocalCacheElement(new Key(parts.get(1)),flags,expire,0L);if (numParts > 5) {int noreply=op == Op.CAS ? 6 : 5;if (op == Op.CAS) {cmd.cas_key=BufferUtils.atol(parts.get(5));}if (numParts == noreply + 1 && Arrays.equals(parts.get(noreply),NOREPLY)) cmd.noreply=true;}status.needMore(size,cmd);break;case GET:case GETS:case STATS:cmd.setKeys(parts.subList(1,numParts));Channels.fireMessageReceived(channelHandlerContext,cmd,channel.getRemoteAddress());break;case VERSION:case QUIT:if (numParts > 1) {throw new MalformedCommandException("invalid command length");}Channels.fireMessageReceived(channelHandlerContext,cmd,channel.getRemoteAddress());break;default :throw new UnknownCommandException("unknown command: " + op);}}  }
class C{  private String fixMalformedJson(String string){  string=string.trim();  if (!string.startsWith("{")) {    string="{" + string + "}";    string=string.replaceAll(START_OF_TEXT,",");    string=string.replaceAll(END_OF_TEXT,":");  }  return string;}  }
class C{  public DefaultErrorDTO(int code,String message,Map<String,Object> metadata){  this(String.valueOf(code),message,metadata);}  }
class C{  @Override public void close(){  try {    raf.close();    System.err.println("Closing file: " + file.getName());  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public boolean print_table(){  return soot.PhaseOptions.getBoolean(options,"print-table");}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {  handleEndDocument();  if (fDocumentHandler != null) {    fDocumentHandler.endDocument(augs);  }  fLocator=null;}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public URI(String p_uriSpec) throws MalformedURIException {  this((URI)null,p_uriSpec);}  }
class C{  public ProviderBuilder<T> encrypt(boolean encrypt){  this.encrypted=encrypt;  return this;}  }
class C{  public AdsGetFloodStatsQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getFloodStats",FloodStats.class);  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  @Provides @Singleton @DataStoreZooKeeper CuratorFramework provideDataStoreZooKeeperConnection(@Global CuratorFramework curator){  return withComponentNamespace(curator,"sor");}  }
class C{  public boolean isPrefix(String s){  if (s.length() == 0)   return false;  Node n=root;  int pos=0;  while (pos < s.length() && n != null) {    char k=s.charAt(pos);    boolean found=false;    for (    Node fils : n.children) {      if (fils.c == k) {        found=true;        n=fils;        pos++;      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_BLOCK(String value0){  return new SM_SYSTEM_MESSAGE(1210224,value0);}  }
class C{  public String addUser(String user,String password,boolean isAdmin){  ResponseEntity<String> response=restTemplate.exchange(url + RMAControllerMappings.ADD_USER_MAPPING + "userName="+ user+ "&password="+ password+ "&isAdmin="+ isAdmin,HttpMethod.GET,request,String.class);  return response.getBody();}  }
class C{  private void usMoneyToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  int dotIndex=tokenVal.indexOf('.');  if (matches(illionPattern,(String)tokenItem.findFeature("n.name"))) {    NumberExpander.expandReal(tokenVal.substring(1),wordRelation,tokenItem);  } else   if (dotIndex == -1) {    String aaa=tokenVal.substring(1);    tokenToWords(wordRelation,tokenItem,aaa);    if (aaa.equals("1")) {      wordRelation.addWord(tokenItem,"dollar");    } else {      wordRelation.addWord(tokenItem,"dollars");    }  } else   if (dotIndex == (tokenVal.length() - 1) || (tokenVal.length() - dotIndex) > 3) {    NumberExpander.expandReal(tokenVal.substring(1),wordRelation,tokenItem);    wordRelation.addWord(tokenItem,"dollars");  } else {    String aaa=tokenVal.substring(1,dotIndex);    aaa=Utilities.deleteChar(aaa,',');    String bbb=tokenVal.substring(dotIndex + 1);    NumberExpander.expandNumber(aaa,wordRelation,tokenItem);    if (aaa.equals("1")) {      wordRelation.addWord(tokenItem,"dollar");    } else {      wordRelation.addWord(tokenItem,"dollars");    }    if (bbb.equals("00")) {    } else {      NumberExpander.expandNumber(bbb,wordRelation,tokenItem);      if (bbb.equals("01")) {        wordRelation.addWord(tokenItem,"cent");      } else {        wordRelation.addWord(tokenItem,"cents");      }    }  }}  }
class C{  public Builder maxWidth(Number maxWidth){  this.maxHeight=maxWidth;  return this;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private void drawHorizontalAxis(Graphics2D g2d){  int h=this.getSize().height;  int w=this.getSize().width - this.paddingRight;  Font font=g2d.getFont();  FontMetrics fm=getFontMetrics(this.font);  g2d.setFont(this.font);  Stroke stroke=g2d.getStroke();  Stroke dashed=new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{1.0f},0.0f);  int yi=(h - this.paddingBottom - this.paddingTop) / this.verticalTicks;  int y=h - this.paddingBottom - 1;  for (int i=0; i <= this.verticalTicks; i++) {    double value=this.maxY / this.verticalTicks * i;    g2d.setColor(this.axisColor);    g2d.setStroke(stroke);    g2d.drawLine(this.paddingLeft - 3,y,this.paddingLeft,y);    String text=MessageFormat.format(this.format,value);    int fw=fm.stringWidth(text);    int fh=fm.getAscent() / 2 - 1;    g2d.drawString(text,this.paddingLeft - fw - 5,y + fh);    if (i != 0) {      g2d.setColor(this.guideColor);      g2d.setStroke(dashed);      g2d.drawLine(this.paddingLeft,y,w,y);    }    y-=yi;  }  g2d.setFont(font);  g2d.setStroke(stroke);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200907,skilltarget);}  }
class C{  private void updateEmptyViewVisibility(Adapter adapter){  mEmptyView.setVisibility(adapter.getItemCount() == 0 ? View.VISIBLE : View.GONE);}  }
class C{  @Override public void processNewLines(String[] lines){  for (  String line : lines) {    if (line.startsWith("idx")) {      continue;    }    if (line.contains("No such file")) {      myIsFileMissing=true;      return;    }    String[] values=line.split(LINE_SPLIT_REGEX);    if (values.length < INDEX_OF_TX_BYTES) {      continue;    }    try {      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);      if (myUid == lineUid) {        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);        if (tempRxBytes < 0 || tempTxBytes < 0) {          LOG.warning(String.format("Negative rxBytes %1$d and/or txBytes %2$d in %3$s",tempRxBytes,tempTxBytes,line));          continue;        }        myRxBytes+=tempRxBytes;        myTxBytes+=tempTxBytes;      }    } catch (    NumberFormatException e) {      LOG.warning(String.format("Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));    }  }}  }
class C{  public void startApplet(){  checkApplet();  logInfo(LogArea.CONFIG,"startApplet() --> %s.start()",applet.getClass().getName());  applet.start();}  }
class C{  public ParserConfigurationException(String msg){  super(msg);}  }
class C{  public static String underlinesToCamelCase(String string){  StringBuilder sb=new StringBuilder(string.length());  int n=string.length();  int i=0;  boolean upcaseNext=true;  for (; i < n; i++) {    char c=string.charAt(i);    if (c == '_') {      upcaseNext=true;    } else {      if (upcaseNext) {        c=Character.toUpperCase(c);      }      upcaseNext=false;      sb.append(c);    }  }  return sb.toString();}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.upload_files_btn_cancel) {    setResult(RESULT_CANCELED);    finish();  } else   if (v.getId() == R.id.upload_files_btn_upload) {    new CheckAvailableSpaceTask().execute(mBehaviourSpinner.getSelectedItemPosition() == 0);  }}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  @ColorInt public int extractPrimaryDarkColorFrom(Context context){  return extractIntAttribute(context,PRIMARY_DARK);}  }
class C{  private int computeHashCode(){  int sum=0;  HashSet set=new HashSet(grants.length);  for (int i=0; i < grants.length; i++) {    Permission p=grants[i];    String pcn=p.getClass().getName();    if (p instanceof AllPermission) {      return pcn.hashCode();    } else     if (p instanceof UnresolvedPermission) {      pcn+=":" + p.getName();    }    if (!set.contains(pcn)) {      set.add(pcn);      sum+=pcn.hashCode();    }  }  return sum;}  }
class C{  protected PhotosMoveQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  @ObjectiveCName("subscribeWithListEntryChangedListener:") public List subscribe(ListEntryChangedListener listEntryChangedListener){  this.listEntryChangedListeners.add(listEntryChangedListener);  if (this.listEntryChangedListeners.size() == 0) {    this.record.subscribe(this.recordListeners);  }  return this;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  @Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){  Layout layout=mUrlBar.getLayout();  if (layout == null)   return;  int urlBarWidth=mUrlBar.getWidth();  int iconWidth=mCurrentIconResource == 0 ? 0 : mIconResourceWidths.get(mCurrentIconResource);  int availableTextWidth=urlBarWidth - iconWidth;  int desiredWidth=(int)Layout.getDesiredWidth(layout.getText(),layout.getPaint());  if (desiredWidth > availableTextWidth) {    mUrlBar.scrollTo(desiredWidth - availableTextWidth,0);  } else {    mUrlBar.scrollTo(0,0);  }}  }
class C{  public ScratchoffController attach(View scratchableLayout,View behindView){  safelyStopProcessors();  this.scratchableLayout=scratchableLayout;  this.behindView=behindView;  return reset();}  }
class C{  public final static char[] encodeToChar(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new char[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  char[] dArr=new char[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=CA[(i >>> 18) & 0x3f];    dArr[d++]=CA[(i >>> 12) & 0x3f];    dArr[d++]=CA[(i >>> 6) & 0x3f];    dArr[d++]=CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=CA[i >> 12];    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  public IterativeLegendreGaussIntegrator(final int n,final double relativeAccuracy,final double absoluteAccuracy,final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(relativeAccuracy,absoluteAccuracy,minimalIterationCount,maximalIterationCount);  if (n <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_POINTS,n);  }  numberOfPoints=n;}  }
class C{  public Door(final Material type,boolean isHingeRight){  super(type);  setTopHalf(true);  setHinge(isHingeRight);}  }
class C{  public String toString(){  return "JavaClipAudioPlayer";}  }
class C{  private void writeDictionaryMetadataFile() throws IOException {  int min_surrogate_key=0;  int max_surrogate_key=0;  if (null != chunkMetaObjectForLastSegmentEntry) {    if (0 == totalRecordCount) {      min_surrogate_key=chunkMetaObjectForLastSegmentEntry.getMax_surrogate_key();    } else {      min_surrogate_key=chunkMetaObjectForLastSegmentEntry.getMax_surrogate_key() + 1;    }    max_surrogate_key=chunkMetaObjectForLastSegmentEntry.getMax_surrogate_key() + totalRecordCount;  } else {    if (totalRecordCount > 0) {      min_surrogate_key=1;    }    max_surrogate_key=totalRecordCount;  }  ColumnDictionaryChunkMeta dictionaryChunkMeta=new ColumnDictionaryChunkMeta(min_surrogate_key,max_surrogate_key,chunk_start_offset,chunk_end_offset,chunk_count);  openThriftWriter(this.dictionaryMetaFilePath);  writeThriftObject(dictionaryChunkMeta);  closeThriftWriter();  LOGGER.info("Dictionary metadata file written successfully for column " + this.columnIdentifier + " at path "+ this.dictionaryMetaFilePath);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getRoleId() == null) ? 0 : getRoleId().hashCode());  result=prime * result + ((getMenuId() == null) ? 0 : getMenuId().hashCode());  result=prime * result + ((getPermission() == null) ? 0 : getPermission().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public static void createFlight(AirMapFlight flight,@Nullable AirMapCallback<AirMapFlight> callback){  FlightService.createFlight(flight,callback);}  }
class C{  public static boolean isNimbusLookAndFeel(){  return UIUtils.isNimbusLookAndFeel();}  }
class C{  @Override public int hashCode(){  return _map.hashCode();}  }
class C{  public TempTable(Schema sch,Transaction tx){  String tblname=nextTableName();  ti=new TableInfo(tblname,sch);  this.tx=tx;  FileHeaderFormatter fhf=new FileHeaderFormatter();  Buffer buff=tx.bufferMgr().pinNew(ti.fileName(),fhf);  tx.bufferMgr().unpin(buff);}  }
class C{  @Override public void onDestroy(){  LOG.d(TAG,"CordovaActivity.onDestroy()");  super.onDestroy();  if (this.appView != null) {    appView.handleDestroy();  }}  }
class C{  private List<ValueComboBoxData> populateColourRamps(boolean reverseColours){  List<ValueComboBoxData> dataList=new ArrayList<ValueComboBoxData>();  colourRampCache.clear();  if (rampDataList != null) {    for (    ColourRamp data : rampDataList) {      String key=data.toString();      ValueComboBoxData valueData=new ValueComboBoxData(key,data.getImageIcon(reverseColours),getClass());      dataList.add(valueData);      colourRampCache.put(key,data);    }  }  return dataList;}  }
class C{  public final void trace(final Object o){  log(Level.TRACE,o);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CarveSignet_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200644,skillcaster,num0,skillname);}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  @Override public void flush(){}  }
class C{  public void actionPerformed(ActionEvent ev){  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();  if (samples.size() > 0)   execute("set nodeShape=triangle sample='" + Basic.toString(samples,"' '") + "';");}  }
class C{  public VolatileDataRequestHandler(DataRequestHandler next,PhysicalTableDictionary physicalTableDictionary,VolatileIntervalsService volatileIntervalsService){  this.next=next;  this.physicalTableDictionary=physicalTableDictionary;  this.volatileIntervalsService=volatileIntervalsService;}  }
class C{  private static IntervalsSet buildIntervalSet(final Vector2D start,final Vector2D end,final double tolerance){  final Line line=new Line(start,end,tolerance);  return new IntervalsSet(line.toSubSpace((Point<Euclidean2D>)start).getX(),line.toSubSpace((Point<Euclidean2D>)end).getX(),tolerance);}  }
class C{  public Builder duplicateColumn(String column,String newName){  return transform(new DuplicateColumnsTransform(Collections.singletonList(column),Collections.singletonList(newName)));}  }
class C{  public static void drawSnapHorizontalMargin(ViewTransform transform,Graphics2D g,int x1,int x2,int y1,String text,boolean textOver){  Canvas c=new Canvas();  FontMetrics fm=c.getFontMetrics(sFont);  g.setFont(sFont);  int padding=transform.getSwingDimension(4);  Rectangle2D bounds=fm.getStringBounds(text,g);  int tw=(int)bounds.getWidth();  int offset=6 * CONNECTION_ARROW_SIZE;  if (x1 > x2) {    int temp=x1;    x1=x2;    x2=temp;  }  int w=((x2 - x1) - (tw + 2 * padding)) / 2;  if (w <= padding) {    g.drawLine(x1,y1,x2,y1);    if (textOver) {      offset=-1 * offset / 2;    }    g.drawString(text,x1 + w + padding,y1 + offset);  } else {    g.drawLine(x1,y1,x1 + w,y1);    g.drawLine(x2 - w,y1,x2,y1);    g.drawString(text,x1 + w + padding,(int)(y1 + (bounds.getHeight() / 2)));  }  g.drawLine(x1,y1 - CONNECTION_ARROW_SIZE,x1,y1 + CONNECTION_ARROW_SIZE);  g.drawLine(x2,y1 - CONNECTION_ARROW_SIZE,x2,y1 + CONNECTION_ARROW_SIZE);}  }
class C{  protected static TestDimensionConfig buildStandardDimensionConfig(TestApiDimensionName dimensionName){  return new TestDimensionConfig(dimensionName,dimensionName.asName(),getDefaultKeyValueStore(dimensionName),getDefaultSearchProvider(),getDefaultFields(),getDefaultFields());}  }
class C{  private Elem parsePrimaryExpr(TokenStream tokens){  Elem expr=null;  if (tokens.has(LITERAL)) {    String lit=tokens.next();    expr=Elem.Lit.create(input.location(),Doc.text(deEscapeLiteral(trimLiteral(lit))));  } else   if (tokens.has(IDENTIFIER)) {    String var=tokens.expect(IDENTIFIER);    if (tokens.has("(")) {      List<Elem> args=parseOptionalArgs(tokens);      if (var != null) {        expr=Elem.Call.create(input.location(),var,args);      }    } else     if (var != null) {      expr=Elem.Ref.create(input.location(),var);    }  } else {    tokens.syntaxError("expected identifier or literal");  }  while (tokens.has(".")) {    tokens.next();    String member=tokens.expect(IDENTIFIER);    List<Elem> args=parseOptionalArgs(tokens);    if (member != null && expr != null) {      expr=Elem.Reflect.create(input.location(),expr,member,args);    }  }  return expr;}  }
class C{  public ShapedMaterialRecipe(int width,int height,List<Predicate<ItemStack>> matchers,ItemStack output){  this.width=width;  this.height=height;  this.size=width * height;  this.matchers=matchers;  this.output=output;}  }
class C{  public PhotosPutTagQuery x(Float value){  return unsafeParam("x",value);}  }
class C{  private boolean isDirect(final BSPTree<Euclidean1D> node){  return ((OrientedPoint)node.getCut().getHyperplane()).isDirect();}  }
class C{  public Decision(Object dDocument,Object oFinalDecision,double dDecisionBelief,Map mDecisionEvidence){  Document=dDocument;  FinalDecision=oFinalDecision;  DecisionBelief=dDecisionBelief;  DecisionEvidence=mDecisionEvidence;}  }
class C{  public static void regenerateClientID(){  clientID=new Random().nextLong();}  }
class C{  public int equivHashCode(){  return getBase().equivHashCode() * 101 + getIndex().equivHashCode() + 17;}  }
class C{  public RegexSearchTupleSet(){  this(false);}  }
class C{  static Object popRequestStack(String name,HttpServletRequest request,Map<String,Object> context,Environment env) throws TemplateModelException {  return readRequestStack(name,true,request,context,env);}  }
class C{  public HttpClient(){}  }
class C{  @Override protected boolean readIntoBuffer(int minLength){  if (bufferSpaceLeft() < minLength) {    increaseBufferSize(minLength + currentlyInBuffer());  } else   if (buf.length - writePos < minLength) {    compact();  }  int readSum=0;  while (readSum < minLength && !datagrams.isEmpty()) {    Datagram next=datagrams.removeFirst();    int length=(int)next.getDuration();    if (buf.length < writePos + length) {      increaseBufferSize(writePos + length);    }    int read=readDatagram(next,buf,writePos);    writePos+=read;    readSum+=read;  }  if (dataProcessor != null) {    dataProcessor.applyInline(buf,writePos - readSum,readSum);  }  return readSum >= minLength;}  }
class C{  private void verifyOption(Object opt){  if (!isOptionEmpty(opt) && !hasOptionAllTracks(opt)) {    throw new ConversionException("Audio Option should contain all tracks or be empty");  }}  }
class C{  public boolean equals(String productId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,boolean isPromo){  return equals(productId,null,BigDecimal.ZERO,BigDecimal.ZERO,null,null,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,null,itemType,itemGroup,isPromo);}  }
class C{  private AsyncFlowable(){  throw new IllegalStateException("No instances!");}  }
class C{  private static void expand3DigitNumber(String numberString,WordRelation wordRelation){  if (numberString.charAt(0) == '0') {    expandNumberAt(numberString,1,wordRelation);  } else {    String hundredDigit=digit2num[numberString.charAt(0) - '0'];    wordRelation.addWord(hundredDigit);    wordRelation.addWord("hundred");    expandNumberAt(numberString,1,wordRelation);  }}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  if (image == null) {    return;  }  if (scale == 0.0) {    initializeParams();  }  if (isHighQualityRendering()) {    Rectangle rect=getImageClipBounds();    if (rect == null || rect.width == 0 || rect.height == 0) {      return;    }    BufferedImage subimage=image.getSubimage(rect.x,rect.y,rect.width,rect.height);    Graphics2D g2=(Graphics2D)g;    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,INTERPOLATION_TYPE);    g2.drawImage(subimage,Math.max(0,originX),Math.max(0,originY),Math.min((int)(subimage.getWidth() * scale),getWidth()),Math.min((int)(subimage.getHeight() * scale),getHeight()),null);  } else {    g.drawImage(image,originX,originY,getScreenImageWidth(),getScreenImageHeight(),null);  }  if (isNavigationImageEnabled()) {    g.drawImage(navigationImage,0,0,getScreenNavImageWidth(),getScreenNavImageHeight(),null);    drawZoomAreaOutline(g);  }}  }
class C{  public static IOFileFilter sizeFileFilter(long threshold){  return new SizeFileFilter(threshold);}  }
class C{  @Nullable public RuleType matchingRule(ProtoElement elem){  RuleType result=ruleMap.get(elem);  if (result != null) {    return result;  }  for (int i=rules.size() - 1; i >= 0; i--) {    RuleWrapper<RuleType> ruleWrapper=rules.get(i);    String matchedSelector=ruleWrapper.getMatchedSelector(elem);    if (matchedSelector != null) {      ruleMap.put(elem,ruleWrapper.rule);      if (unmatchedRules.containsKey(ruleWrapper)) {        Set<String> unmatchedSelectors=unmatchedRules.get(ruleWrapper);        unmatchedSelectors.remove(matchedSelector);        if (unmatchedSelectors.isEmpty()) {          unmatchedRules.remove(ruleWrapper);        }      }      return ruleWrapper.rule;    }  }  return null;}  }
class C{  public String toStringValues(FeatureVector features){  StringBuilder buf=new StringBuilder();  byte[] bytes=features.getByteValuedDiscreteFeatures();  short[] shorts=features.getShortValuedDiscreteFeatures();  float[] floats=features.getContinuousFeatures();  if (bytes.length != byteValuedDiscreteFeatureProcessors.length || shorts.length != shortValuedDiscreteFeatureProcessors.length || floats.length != continuousFeatureProcessors.length) {    throw new IllegalArgumentException("Number of features in argument does not match number of feature processors");  }  for (int i=0; i < bytes.length; i++) {    if (buf.length() > 0)     buf.append(" ");    buf.append(byteValuedDiscreteFeatureProcessors[i].getValues()[bytes[i] & 0xff]);  }  for (int i=0; i < shorts.length; i++) {    if (buf.length() > 0)     buf.append(" ");    buf.append(shortValuedDiscreteFeatureProcessors[i].getValues()[shorts[i]]);  }  for (int i=0; i < floats.length; i++) {    if (buf.length() > 0)     buf.append(" ");    buf.append(floats[i]);  }  return buf.toString();}  }
class C{  public static LikesAttributesImpl copy(@Nullable LikesAttributesImpl likesAttributes){  if (likesAttributes == null) {    return empty();  }  return new LikesAttributesImpl(likesAttributes);}  }
class C{  public static String checkAndAppendHDFSUrl(String filePath){  String currentPath=filePath;  if (null != filePath && filePath.length() != 0 && FileFactory.getFileType(filePath) != FileFactory.FileType.HDFS && FileFactory.getFileType(filePath) != FileFactory.FileType.VIEWFS) {    String baseDFSUrl=CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_DDL_BASE_HDFS_URL);    if (null != baseDFSUrl) {      String dfsUrl=conf.get(FS_DEFAULT_FS);      if (null != dfsUrl && (dfsUrl.startsWith(HDFS_PREFIX) || dfsUrl.startsWith(VIEWFS_PREFIX))) {        baseDFSUrl=dfsUrl + baseDFSUrl;      }      if (baseDFSUrl.endsWith("/")) {        baseDFSUrl=baseDFSUrl.substring(0,baseDFSUrl.length() - 1);      }      if (!filePath.startsWith("/")) {        filePath="/" + filePath;      }      currentPath=baseDFSUrl + filePath;    }  }  return currentPath;}  }
class C{  public boolean unregisterTask(UserDefinedAction action){  for (  KeyChain k : action.getActivation().getHotkeys()) {    unregisterKey(k);  }  mouseGestureManager.unRegisterAction(action);  return true;}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  @PreDestroy public void shutdown(){  LOGGER.info("shutdown - Stopping tag publisher.");  republisher.stop();}  }
class C{  public int computeContigs(int minReads,double minCoverage,int minLength,ProgressListener progress) throws IOException, CanceledException {  final PathExtractor pathExtractor=new PathExtractor(overlapGraph,readId2ContainedReads);  pathExtractor.apply(progress);  paths=pathExtractor.getPaths();  final ContigBuilder contigBuilder=new ContigBuilder(pathExtractor.getPaths(),readId2ContainedReads);  contigBuilder.apply(readId2ReadData,minReads,minCoverage,minLength,progress);  contigs=contigBuilder.getContigs();  return contigBuilder.getCountContigs();}  }
class C{  private void computeIntsForThisZoomLevel(){  int halfHeight=(getMeasuredHeight() / 2) - 1;  mHeightsAtThisZoomLevel=new int[mLenByZoomLevel[mZoomLevel]];  for (int i=0; i < mLenByZoomLevel[mZoomLevel]; i++) {    mHeightsAtThisZoomLevel[i]=(int)(mValuesByZoomLevel[mZoomLevel][i] * halfHeight);  }}  }
class C{  public <T>T inject(Class<T> clazz,Object object){  return inject(clazz,frameMap.get(object));}  }
class C{  private void editConflictsExternal(IFile resource,IFile conflictOldFile,IFile conflictWorkingFile,IFile conflictNewFile,String mergeProgramLocation,String mergeProgramParameters) throws CoreException, InvocationTargetException, InterruptedException {  try {    if (mergeProgramLocation.equals("")) {      throw new SVNException(Policy.bind("EditConflictsAction.noMergeProgramConfigured"));    }    File mergeProgramFile=new File(mergeProgramLocation);    if (!mergeProgramFile.exists()) {      throw new SVNException(Policy.bind("EditConflictsAction.mergeProgramDoesNotExist"));    }    Command command=new Command(mergeProgramLocation);    String[] parameters=mergeProgramParameters.split(" ");    for (int i=0; i < parameters.length; i++) {      parameters[i]=replaceParameter(parameters[i],"${theirs}",conflictNewFile.getLocation().toFile().getAbsolutePath());      parameters[i]=replaceParameter(parameters[i],"${yours}",conflictWorkingFile.getLocation().toFile().getAbsolutePath());      parameters[i]=replaceParameter(parameters[i],"${base}",conflictOldFile.getLocation().toFile().getAbsolutePath());      parameters[i]=replaceParameter(parameters[i],"${merged}",resource.getLocation().toFile().getAbsolutePath());    }    command.setParameters(parameters);    command.exec();    command.waitFor();    resource.refreshLocal(IResource.DEPTH_ZERO,null);  } catch (  IOException e) {    throw new SVNException(Policy.bind("EditConflictsAction.1") + e.getMessage(),e);  }}  }
class C{  protected AudioReorderQuery audioId(int value){  return unsafeParam("audio_id",value);}  }
class C{  public boolean isSource(){  return isSource;}  }
class C{  public final Object fromXml(final String xml) throws Exception {  try {    Document doc=this.parser.parse(xml);    String docName=doc.getDocumentElement().getNodeName();    LOGGER.trace("fromXml() - Message received from " + docName + ": "+ xml);    if (docName.equals(ProcessMessageType.CONNECT_REQUEST.getName())) {      return fromXml(xml,ProcessMessageType.CONNECT_REQUEST);    } else     if (docName.equals(ProcessMessageType.CONNECT_RESPONSE.getName())) {      return fromXml(xml,ProcessMessageType.CONNECT_RESPONSE);    } else     if (docName.equals(ProcessMessageType.CONFIG_REQUEST.getName())) {      return fromXml(xml,ProcessMessageType.CONFIG_REQUEST);    } else     if (docName.equals(ProcessMessageType.CONFIG_RESPONSE.getName())) {      return fromXml(xml,ProcessMessageType.CONFIG_RESPONSE);    } else     if (docName.equals(ProcessMessageType.DISCONNETION_REQUEST.getName())) {      return fromXml(xml,ProcessMessageType.DISCONNETION_REQUEST);    } else {      LOGGER.error("fromXml() : Cannot deserialize XML message since the message type could not be determined" + xml);      throw new MessageFormatException("XML TAG Node Name not found: " + xml);    }  } catch (  ParserException ex) {    LOGGER.error("Exception caught in DOM parsing of incoming message: ",ex);    LOGGER.error("Message was: " + xml);    throw new MessageConversionException("Exception caught in DOM parsing on process request message");  }}  }
class C{  public double distance(Vector3 point){  double xd=this.x - point.x;  double yd=this.y - point.y;  double zd=this.z - point.z;  return Math.sqrt(xd * xd + yd * yd + zd * zd);}  }
class C{  public static Object executeScript(String filePath,String functionName,ScriptContext scriptContext,Object[] args) throws ScriptException, NoSuchMethodException, IOException {  Assert.notNull("filePath",filePath,"scriptContext",scriptContext);  scriptContext.setAttribute(ScriptEngine.FILENAME,filePath,ScriptContext.ENGINE_SCOPE);  if (functionName == null) {    CompiledScript script=compileScriptFile(filePath);    if (script != null) {      return executeScript(script,functionName,scriptContext,args);    }  }  String fileExtension=getFileExtension(filePath);  ScriptEngineManager manager=new ScriptEngineManager();  ScriptEngine engine=manager.getEngineByExtension(fileExtension);  if (engine == null) {    throw new IllegalArgumentException("The script type is not supported for location: " + filePath);  }  if (Debug.verboseOn()) {    Debug.logVerbose("Begin processing script [" + filePath + "] using engine "+ engine.getClass().getName(),module);  }  engine.setContext(scriptContext);  URL scriptUrl=FlexibleLocation.resolveLocation(filePath);  FileReader reader=new FileReader(new File(scriptUrl.getFile()));  Object result=engine.eval(reader);  if (UtilValidate.isNotEmpty(functionName)) {    try {      Invocable invocableEngine=(Invocable)engine;      result=invocableEngine.invokeFunction(functionName,args == null ? EMPTY_ARGS : args);    } catch (    ClassCastException e) {      throw new ScriptException("Script engine " + engine.getClass().getName() + " does not support function/method invocations");    }  }  return result;}  }
class C{  public static void main(String[] args){  Thrust simulation=new Thrust();  simulation.run();}  }
class C{  private static void askAboutRestart(@NotNull PatchRunner patchRunner,@NotNull PatchOperation op,@NotNull final File patchFile,@NotNull FileOp fop,@NotNull final ProgressIndicator progress){  final ApplicationEx application=ApplicationManagerEx.getApplicationEx();  application.invokeLater(null,ModalityState.any());}  }
class C{  public static String joinStringFrom(final String arr[],final int start){  return joinStringFrom(arr,start," ");}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeDecl lookupType(String packageName,String typeName){  ASTNode$State state=state();  TypeDecl lookupType_String_String_value=getParent().Define_TypeDecl_lookupType(this,null,packageName,typeName);  return lookupType_String_String_value;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public void deleteItem(String sItem){  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    UniqueVertexGraph gCurLevel=getGraphLevelByNGramSize(iNGramSize);    Vertex v=utils.locateVertexInGraph(gCurLevel,sItem);    if (v == null)     return;    try {      gCurLevel.remove(v);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private static boolean canResolveDownloadItem(Context context,long downloadId){  assert !ThreadUtils.runningOnUiThread();  Intent intent=getLaunchIntentFromDownloadId(context,downloadId);  return (intent == null) ? false : ExternalNavigationDelegateImpl.resolveIntent(context,intent,true);}  }
class C{  private String toCommaSeparatedString(List<?> proxyExceptions){  StringBuilder result=new StringBuilder();  for (  Object object : proxyExceptions) {    if (result.length() > 0) {      result.append(",");    }    result.append(object);  }  return result.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200713,skillcaster,skillname);}  }
class C{  public void java_lang_SecurityManager_getClassContext(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public void resetIterationCount(){  iterations.reset();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SPLIT_B_TO_ME(String value0,int num1,int num2,int num3){  return new SM_SYSTEM_MESSAGE(1390248,value0,num1,num2,num3);}  }
class C{  @Override protected Expression generateExpression(){  if (ttfPanel == null) {    return null;  }  return ttfPanel.getExpression();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_CRITICAL(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1250001,value0,num2,value1);}  }
class C{  public static float spToPx(float sp){  float scaledDensity=Resources.getSystem().getDisplayMetrics().scaledDensity;  return Math.round(sp * scaledDensity);}  }
class C{  public double convert(){  return Double.longBitsToDouble(ints2long(high,low));}  }
class C{  public static List<EntityCondition> createCondition(ModelEntity modelEntity,Map<String,Map<String,Map<String,Object>>> normalizedFields,Map<String,Object> queryStringMap,Map<String,List<Object[]>> origValueMap,Delegator delegator,Map<String,?> context){  Map<String,Map<String,Object>> subMap=null;  Map<String,Object> subMap2=null;  Object fieldValue=null;  EntityCondition cond=null;  List<EntityCondition> tmpList=new LinkedList<EntityCondition>();  String opString=null;  boolean ignoreCase=false;  List<ModelField> fields=modelEntity.getFieldsUnmodifiable();  for (  ModelField modelField : fields) {    String fieldName=modelField.getName();    subMap=normalizedFields.get(fieldName);    if (subMap == null) {      continue;    }    subMap2=subMap.get("fld0");    fieldValue=subMap2.get("value");    opString=(String)subMap2.get("op");    if (fieldValue == null && !"empty".equals(opString)) {      continue;    }    ignoreCase="Y".equals(subMap2.get("ic"));    cond=createSingleCondition(modelField,opString,fieldValue,ignoreCase,delegator,context);    tmpList.add(cond);    subMap2=subMap.get("fld1");    if (subMap2 == null) {      continue;    }    fieldValue=subMap2.get("value");    opString=(String)subMap2.get("op");    if (fieldValue == null && !"empty".equals(opString)) {      continue;    }    ignoreCase="Y".equals(subMap2.get("ic"));    cond=createSingleCondition(modelField,opString,fieldValue,ignoreCase,delegator,context);    tmpList.add(cond);    List<Object[]> origList=origValueMap.get(fieldName);    if (UtilValidate.isNotEmpty(origList)) {      for (      Object[] arr : origList) {        queryStringMap.put((String)arr[0],arr[1]);      }    }  }  return tmpList;}  }
class C{  public Iterator<E> snapshotIterator(){  List<E> l=new LinkedList<E>(this);  return l.iterator();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){}  }
class C{  private JobStore(Context context,File dataDir){  mContext=context;  mDirtyOperations=0;  File systemDir=new File(dataDir,"system");  File jobDir=new File(systemDir,"job");  jobDir.mkdirs();  mJobsFile=new AtomicFile(new File(jobDir,"jobs.xml"));  mJobSet=new ArraySet<JobStatus>();  readJobMapFromDisk(mJobSet);}  }
class C{  public static void hide(int tabId,int notificationId){  MediaNotificationManager manager=getManager(notificationId);  if (manager == null)   return;  manager.hideNotification(tabId);}  }
class C{  public Activity cancel(String action){  return m_actions.cancel(action);}  }
class C{  public static boolean cmpList(List<?> l1,List<?> l2){  if ((l1 == null) && (l2 == null)) {    return true;  }  if ((l1 == null) || (l2 == null)) {    return false;  }  ArrayList<?> cp=new ArrayList<>(l1);  for (  Object o : l2) {    if (!cp.remove(o)) {      return false;    }  }  return cp.isEmpty();}  }
class C{  public void dragBy(int amountX,int amountY){  press(InputEvent.BUTTON1_MASK);  moveBy(amountX,amountY);  release(InputEvent.BUTTON1_MASK);}  }
class C{  public boolean isSub(){  return isSub;}  }
class C{  public static Joint show(Window owner,SandboxBody[] bodies,Class<? extends Joint> clazz){  AddJointDialog dialog=new AddJointDialog(owner,bodies,clazz);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.incrementCounter(clazz);    return dialog.pnlJoint.getJoint();  } else {    return null;  }}  }
class C{  private void checkParameters(double lower,double upper,double confidence){  if (lower >= upper) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper);  }  if (confidence <= 0 || confidence >= 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_BOUNDS_CONFIDENCE_LEVEL,confidence,0,1);  }}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  @Override public void element(String elementName,Augmentations augs) throws XNIException {  if (fMixed) {    if (fNodeIndexStack[fDepth] == -1) {      fNodeIndexStack[fDepth]=addUniqueLeafNode(elementName);    } else {      fNodeIndexStack[fDepth]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_CHOICE,fNodeIndexStack[fDepth],addUniqueLeafNode(elementName));    }  } else {    fNodeIndexStack[fDepth]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_LEAF,elementName);  }}  }
class C{  public void modifyFilesInTargetTestDirectory(Function<String,String> fileContentModifier) throws IOException {  Collection<File> files=FileUtils.listFiles(getTargetTestDir(),null,true);  for (  File file : files) {    String fileContent=Files.toString(file,StandardCharsets.UTF_8);    String modifiedFileContent=fileContentModifier.apply(fileContent);    Files.write(modifiedFileContent,file,StandardCharsets.UTF_8);  }}  }
class C{  public static List<DependencyGraph> read(String fileName,char format){  if (format == 'x')   return readCoNLLX(fileName); else   if (format == 'u')   return readCoNLLU(fileName);  return null;}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static void fail(String message){  throw new IllegalStateException(message == null ? "" : message);}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (start.datePicker != null) {      return start.datePicker.isEnabled();    }  }  return false;}  }
class C{  public final void addPropertyChangeListener(PropertyChangeListener listener){  getChangeSupport().addPropertyChangeListener(listener);}  }
class C{  public synchronized VisualTable addTable(VisualTable table){  addDataGroup(table.getGroup(),table,table.getParentTable());  table.setVisualization(this);  return table;}  }
class C{  protected boolean matchesAnyOf(TokenKind... kinds){  TokenKind current=currentToken();  for (  TokenKind kind : kinds) {    if (kind == current) {      builder.advanceLexer();      return true;    }  }  return false;}  }
class C{  public <U>Domino<T,U> merge(Domino<? super R,? extends U> domino1,Domino<? super R,? extends U> domino2){  return merge((Domino<R,U>[])new Domino[]{domino1,domino2});}  }
class C{  public void updateFifoXtnInfoForEntry(IEntryHolder eh,long xtnNumber,boolean writeLock,boolean entryWritingXtn){  FifoXtnEntryInfo newXe=new FifoXtnEntryInfo(eh.getUID(),eh.getSCN(),eh.getOrder());  FifoXtnEntryInfo xe=_terminatingXtnsEntries.putIfAbsent(newXe,newXe);  if (xe == null)   xe=newXe;  if (writeLock)   xe._writeLockInfo=entryWritingXtn ? new FifoXtnWriteLockEntryInfo(xtnNumber,xtnNumber) : new FifoXtnWriteLockEntryInfo(xtnNumber); else   xe._terminatingXtnReadLock=xtnNumber;  xe.setTime();}  }
class C{  public boolean isApplicable(){  ChartViewer chartViewer=(ChartViewer)getViewer();  LabelsJList list=chartViewer.getActiveLabelsJList();  return list != null && !list.isSelectionEmpty();}  }
class C{  public boolean isApplicable(){  AttributesWindow viewer=(AttributesWindow)getViewer();  return viewer != null && viewer.selectedTaxon != null;}  }
class C{  public static boolean isAncestor(Node ancestor,Node node){  Node p=node;  while ((p=p.getParentNode()) != null) {    if (ancestor == p)     return true;  }  return false;}  }
class C{  public void init(MissionInit minit){  initBusses();  this.stateMachine=new ServerStateMachine(ServerState.WAITING_FOR_MOD_READY,minit);}  }
class C{  @Override protected String dateToString(DateTimeData date){  StringBuffer message=new StringBuffer(8);  message.append('-');  message.append('-');  append(message,date.month,2);  message.append('-');  append(message,date.day,2);  append(message,(char)date.utc,0);  return message.toString();}  }
class C{  public static boolean checkHasGetSetMethod(VariableElement var){  List<? extends Element> elements=var.getEnclosingElement().getEnclosedElements();  ExecutableElement getMethod=null;  ExecutableElement setMethod=null;  String getMethodName=Utils.combineGetMethodName(var.getSimpleName().toString());  String setMethodName=Utils.combineSetMethodName(var.getSimpleName().toString());  for (  Element ele : elements) {    if (ele.getKind() != ElementKind.METHOD)     continue;    if (ele.getModifiers().contains(Modifier.PRIVATE))     continue;    String methodName=ele.getSimpleName().toString();    if (getMethodName.equals(methodName)) {      getMethod=(ExecutableElement)ele;    } else     if (setMethodName.equals(methodName)) {      setMethod=(ExecutableElement)ele;    }  }  if (getMethod == null || setMethod == null) {    throw new ParcelException(String.format("The field %s should has get/set method while it is modified by private",var.getSimpleName()),var);  }  String fieldType=var.asType().toString();  if (getMethod.getParameters().size() != 0 || !getMethod.getReturnType().toString().equals(fieldType)) {    throw new ParcelException(String.format("The get-method %s can not matched with field %s",getMethod.getSimpleName(),var.getSimpleName()),getMethod);  }  if (!(setMethod.getParameters().size() == 1 && setMethod.getParameters().get(0).asType().toString().equals(fieldType))) {    throw new ParcelException(String.format("The set-method %s can not matched with field %s",setMethod.getSimpleName(),var.getSimpleName()),setMethod);  }  return true;}  }
class C{  public void checkAndEquipBadges() throws LoginFailedException, RemoteServerException {  CheckAwardedBadgesMessage msg=CheckAwardedBadgesMessage.newBuilder().build();  ServerRequest serverRequest=new ServerRequest(RequestType.CHECK_AWARDED_BADGES,msg);  api.getRequestHandler().sendServerRequests(serverRequest);  CheckAwardedBadgesResponse response;  try {    response=CheckAwardedBadgesResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  if (response.getSuccess()) {    for (int i=0; i < response.getAwardedBadgesCount(); i++) {      EquipBadgeMessage msg1=EquipBadgeMessage.newBuilder().setBadgeType(response.getAwardedBadges(i)).setBadgeTypeValue(response.getAwardedBadgeLevels(i)).build();      ServerRequest serverRequest1=new ServerRequest(RequestType.EQUIP_BADGE,msg1);      api.getRequestHandler().sendServerRequests(serverRequest1);      EquipBadgeResponseOuterClass.EquipBadgeResponse response1;      try {        response1=EquipBadgeResponseOuterClass.EquipBadgeResponse.parseFrom(serverRequest1.getData());        badge=response1.getEquipped();      } catch (      InvalidProtocolBufferException e) {        throw new RemoteServerException(e);      }    }  }}  }
class C{  private Map<String,List<ChartObject>> convertResult(Map<String,List<ChartObject>> initial){  if (initial.size() == 0)   return new HashMap<>();  for (  Map.Entry<String,List<ChartObject>> entry : initial.entrySet()) {    entry.getValue().stream().forEach(null);  }  return initial;}  }
class C{  public int append_file1(String appender_file_id,String local_filename) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.append_file(parts[0],parts[1],local_filename);}  }
class C{  public FilenameUtils(){  super();}  }
class C{  public boolean isPrefixOf(FieldSelector sel){  for (int i=0; i < fields.size(); i++) {    if (i >= sel.fields.size() || fields.get(i) != sel.fields.get(i)) {      return false;    }  }  return true;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public static void breakpoint(){}  }
class C{  public void addUserDefPts(Set<Node> initVars){  for (  Node vn : initVars) {    IVarAbstraction pn=geomPTA.findInternalNode(vn);    if (pn == null) {      continue;    }    pn=pn.getRepresentative();    if (pn.reachable()) {      pn.willUpdate=true;    }  }}  }
class C{  @SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int[] size=getMeasureSize(MeasureSpec.getSize(widthMeasureSpec));  setMeasuredDimension(size[0],size[1]);}  }
class C{  public boolean importAsSource(Label label){  return containsLabel(label);}  }
class C{  public void confirm(){  okButton.click();  bobcatWait.withTimeout(Timeouts.SMALL).until(elementNotPresentOrVisible(By.cssSelector(CSS)));}  }
class C{  public static String ifNotEmpty(String base,String pre,String post){  if (UtilValidate.isNotEmpty(base))   return pre + base + post; else   return "";}  }
class C{  public boolean fromJSON(JSON jo){  for (  String name : jo.keySet()) {    set(name,jo.get(name));  }  return true;}  }
class C{  protected void performRowOperations(int pivotCol,int pivotRow){  final double pivotVal=getEntry(pivotRow,pivotCol);  divideRow(pivotRow,pivotVal);  for (int i=0; i < getHeight(); i++) {    if (i != pivotRow) {      final double multiplier=getEntry(i,pivotCol);      if (multiplier != 0.0) {        subtractRow(i,pivotRow,multiplier);      }    }  }  final int previousBasicVariable=getBasicVariable(pivotRow);  basicVariables[previousBasicVariable]=-1;  basicVariables[pivotCol]=pivotRow;  basicRows[pivotRow]=pivotCol;}  }
class C{  public SplashLoad(GuiScreen gui,List<String> splashTexts){  super(gui);  this.splashTexts=splashTexts;}  }
class C{  Collection<? extends ClientRequestResult> handleTagRequest(final ClientRequest tagRequest){  final Collection<TagValueUpdate> transferTags=new ArrayList<>(tagRequest.getIds().size());  transferTags.addAll(getTagsById(tagRequest));  transferTags.addAll(getTagsByRegex(tagRequest));  if (LOG.isDebugEnabled()) {    LOG.debug("Finished processing Tag request (values only): returning " + transferTags.size() + " Tags");  }  return transferTags;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200958,skillcaster,num0,skilltarget,skillname);}  }
class C{  public void removeFromAggregate(int row,VisualItem member){  validRowCheck(row,true);  int ar=getAggregatedRow(row,member);  if (ar >= 0) {    m_aggregated.removeRow(ar);    fireTableEvent(row,row,EventConstants.ALL_COLUMNS,EventConstants.UPDATE);  }}  }
class C{  public static long readStartFooterSection(IInputReaderOutputWriter reader) throws IOException {  reader.seek(reader.length() - 16);  return reader.readLong();}  }
class C{  public void unregisterCustomizer(JmxConnectionCustomizer customizer){  JmxConnectionSupportImpl.unregisterCustomizer(customizer);}  }
class C{  public Path copyTestDataAndGetPath(String name){  copyTestData(name);  return Paths.get(tempDir,name);}  }
class C{  public void disconnectAndCloseAll(){  for (  final MqttAsyncConnection connection : getMqttConnections()) {    disconnectAndCloseTab(connection);  }}  }
class C{  public boolean isAssumedNullBefore(Unit s,Immediate i){  AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);  return ai.get(i) == NULL;}  }
class C{  public void mouseDragged(MouseEvent me){  stillDownWithoutMoving=false;  if (current == inScrollByMouse) {    viewer.setCursor(Cursors.getClosedHand());    JScrollPane scrollPane=viewer.getScrollPane();    int dX=me.getX() - downX;    int dY=me.getY() - downY;    if (dY != 0) {      JScrollBar scrollBar=scrollPane.getVerticalScrollBar();      int amount=Math.round(dY * (scrollBar.getMaximum() - scrollBar.getMinimum()) / viewer.getHeight());      if (amount != 0) {        scrollBar.setValue(scrollBar.getValue() - amount);      }    }    if (dX != 0) {      JScrollBar scrollBar=scrollPane.getHorizontalScrollBar();      int amount=Math.round(dX * (scrollBar.getMaximum() - scrollBar.getMinimum()) / viewer.getWidth());      if (amount != 0) {        scrollBar.setValue(scrollBar.getValue() - amount);      }    }  } else   if (current == inRubberband) {    Graphics2D gc=(Graphics2D)viewer.getGraphics();    if (gc != null) {      gc.setXORMode(viewer.getCanvasColor());      if (selRect != null)       gc.drawRect(selRect.x,selRect.y,selRect.width,selRect.height);      selRect=new Rectangle(downX,downY,0,0);      selRect.add(me.getX(),me.getY());      gc.drawRect(selRect.x,selRect.y,selRect.width,selRect.height);    }  } else   if (viewer.isAllowInternalEdgePoints() && current == inMoveInternalEdgePoint) {    Point p1=new Point(downX,downY);    Edge e=getHitEdges(downX,downY).getFirstElement();    downX=me.getX();    downY=me.getY();    Point p2=new Point(downX,downY);    try {      if (e != null) {        viewer.getEV(e).moveInternalPoint(viewer.trans,p1,p2);        viewer.repaint();      }    } catch (    NotOwnerException ex) {    }  } else   if (current == inMoveNodeLabel) {    if (hitNodeLabels.size() > 0) {      Node v=hitNodeLabels.getFirstElement();      try {        if (!viewer.getSelected(v) || viewer.getNV(v).getLabel() == null)         return;      } catch (      NotOwnerException e) {        return;      }      NodeView nv=viewer.getNV(v);      Graphics2D gc=(Graphics2D)viewer.getGraphics();      if (gc != null) {        Point apt=viewer.trans.w2d(nv.getLocation());        int meX=me.getX();        int meY=me.getY();        gc.setXORMode(viewer.getCanvasColor());        if (prevPt != null) {          gc.drawLine(apt.x,apt.y,prevPt.x,prevPt.y);        } else {          prevPt=new Point(downX,downY);          Point labPt=nv.getLabelPosition(viewer.trans);          if (labPt != null) {            offset.x=labPt.x - downX;            offset.y=labPt.y - downY;          }        }        gc.drawLine(apt.x,apt.y,meX,meY);        nv.hiliteLabel(gc,viewer.trans,viewer.getFont());        int labX=meX + offset.x;        int labY=meY + offset.y;        nv.setLabelPositionRelative(labX - apt.x,labY - apt.y);        nv.hiliteLabel(gc,viewer.trans,viewer.getFont());        prevPt.x=meX;        prevPt.y=meY;        nodesWithMovedLabels.add(v);      }    }  } else   if (current == inMoveEdgeLabel) {    if (hitEdgeLabels.size() > 0) {      try {        Edge e=hitEdgeLabels.getFirstElement();        try {          if (!viewer.getSelected(e) || viewer.getEV(e).getLabel() == null)           return;        } catch (        NotOwnerException ex) {          return;        }        EdgeView ev=viewer.getEV(e);        Point2D nextToV;        Point2D nextToW;        Graph G=viewer.getGraph();        NodeView vv=viewer.getNV(G.getSource(e));        NodeView wv=viewer.getNV(G.getTarget(e));        nextToV=wv.getLocation();        nextToW=vv.getLocation();        if (viewer.getInternalPoints(e) != null) {          if (viewer.getInternalPoints(e).size() != 0) {            nextToV=viewer.getInternalPoints(e).get(0);            nextToW=viewer.getInternalPoints(e).get(viewer.getInternalPoints(e).size() - 1);          }        }        Point pv=vv.computeConnectPoint(nextToV,viewer.trans);        Point pw=wv.computeConnectPoint(nextToW,viewer.trans);        if (G.findDirectedEdge(G.getTarget(e),G.getSource(e)) != null)         viewer.adjustBiEdge(pv,pw);        Graphics2D gc=(Graphics2D)viewer.getGraphics();        if (gc != null) {          ev.setLabelReferenceLocation(nextToV,nextToW,viewer.trans);          ev.setLabelSize(gc);          Point apt=ev.getLabelReferencePoint();          int meX=me.getX();          int meY=me.getY();          gc.setXORMode(viewer.getCanvasColor());          if (prevPt != null)           gc.drawLine(apt.x,apt.y,prevPt.x,prevPt.y); else {            prevPt=new Point(downX,downY);            Point labPt=ev.getLabelPosition(viewer.trans);            offset.x=labPt.x - downX;            offset.y=labPt.y - downY;          }          gc.drawLine(apt.x,apt.y,meX,meY);          ev.hiliteLabel(gc,viewer.trans);          if (false)           ev.drawLabel(gc,viewer.trans);          int labX=meX + offset.x;          int labY=meY + offset.y;          ev.setLabelPositionRelative(labX - apt.x,labY - apt.y);          ev.hiliteLabel(gc,viewer.trans);          if (false)           ev.drawLabel(gc,viewer.trans);          prevPt.x=meX;          prevPt.y=meY;        }      } catch (      NotOwnerException ex) {        Basic.caught(ex);      }    }  } else   if (current == inNewEdge) {    Graphics gc=viewer.getGraphics();    if (gc != null) {      gc.setXORMode(viewer.getCanvasColor());      if (selRect != null)       gc.drawLine(downX,downY,selRect.x,selRect.y);      selRect=new Rectangle(me.getX(),me.getY(),0,0);      gc.drawLine(downX,downY,me.getX(),me.getY());    }  } else   if (current == inMoveMagnifier) {    int meX=me.getX();    int meY=me.getY();    if (meX != downX || meY != downY) {      viewer.trans.getMagnifier().move(downX,downY,meX,meY);      downX=meX;      downY=meY;      viewer.repaint();    }  } else   if (current == inResizeMagnifier) {    int meY=me.getY();    if (meY != downY) {      viewer.trans.getMagnifier().resize(downY,meY);      downX=me.getX();      downY=meY;      viewer.repaint();    }  }}  }
class C{  public MessagesGetChatQuery(VkApiClient client,UserActor actor){  super(client,"messages.getChat",Chat.class);  accessToken(actor.getAccessToken());}  }
class C{  public XSModelImpl(SchemaGrammar[] grammars){  this(grammars,Constants.SCHEMA_VERSION_1_0);}  }
class C{  public static String md5(File file){  if (file == null)   throw new IllegalArgumentException("file cannot be null");  try {    HashCode hc=Files.hash(file,Hashing.md5());    return toHex(hc.asBytes());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public int kind(){  String s=soot.PhaseOptions.getString(options,"kind");  if (s.equalsIgnoreCase("optimistic"))   return kind_optimistic;  if (s.equalsIgnoreCase("pessimistic"))   return kind_pessimistic;  throw new RuntimeException("Invalid value " + s + " of phase option kind");}  }
class C{  public void putString(String key,String value){  checkForNullKey(key);  checkForNullValue(value);  preferences.edit().putString(key,value).apply();}  }
class C{  @NotNull public UpdatePersonAction updatePerson(@NotNull String personGroupId,@NotNull String personId,String name,String userData){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  Validation.validate(name,"^.{1,128}$",new ParameterValidationException("name","The maximum length is 128"));  Validation.validate(userData,16,new ParameterValidationException("userData","The size limit is 16KB"));  return new UpdatePersonAction(cognitiveContext,personGroupId,personId,name,userData);}  }
class C{  public static ProbeItemDescriptor discreteToplineItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,boolean filled,int width,boolean fixedWidth){  return discreteItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,filled ? DEFAULT_COLOR : null,width,fixedWidth,true,false);}  }
class C{  public boolean dump_types(){  return soot.PhaseOptions.getBoolean(options,"dump-types");}  }
class C{  int peek() throws IOException {  int lookaheadChar=in.read();  in.unread(lookaheadChar);  return lookaheadChar;}  }
class C{  public static List<Writable> sampleFromColumnSequence(int count,String columnName,Schema schema,JavaRDD<List<List<Writable>>> sequenceData){  JavaRDD<List<Writable>> flattenedSequence=sequenceData.flatMap(new SequenceFlatMapFunction());  return sampleFromColumn(count,columnName,schema,flattenedSequence);}  }
class C{  public static Histogram subtract(Histogram x,double y){  return x.modifyEventCounters(null);}  }
class C{  private void processCandidateForUnaassign(Iterable<User> users,String projectName){  List<User> updated=StreamSupport.stream(users.spliterator(),false).filter(null).map(null).collect(toList());  userRepository.save(updated);}  }
class C{  @ManagedOperation(description="Runs task performed on every server restart (does nothing so far)") public void refreshAfterStandardRestart(){}  }
class C{  public VideoGetCommentsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public Graph(Table nodes,Table edges,Boolean directed,String nodeKey,String sourceKey,String targetKey){  init(nodes,edges,directed,nodeKey,sourceKey,targetKey);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  protected AudioDeleteAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  LoadBalancingPolicy.LoadBalancingPolicyDescription copy=(LoadBalancingPolicy.LoadBalancingPolicyDescription)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(full,copy));}  }
class C{  public void put(int key,int value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=Math.max(mSize + 1,mKeys.length * 2);      int[] nkeys=new int[n];      int[] nvalues=new int[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static String bind(String id,String binding){  return bind(id,new String[]{binding});}  }
class C{  public void checkConstraints() throws IOException {}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  protected void assertClose(String msg,FieldMatrix<Fraction> m,FieldMatrix<Fraction> n,double tolerance){  for (int i=0; i < m.getRowDimension(); i++) {    for (int j=0; j < m.getColumnDimension(); j++) {      Assert.assertEquals(msg,m.getEntry(i,j).doubleValue(),n.getEntry(i,j).doubleValue(),tolerance);    }  }}  }
class C{  private UnivariateSolverUtils(){}  }
class C{  public static void main(String[] sArgs){  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(sArgs);  String sInputDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"inputDir",".");  boolean bInputDirFlat=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"inputDirFlat",Boolean.FALSE.toString()));  String sModel=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"model","");  String sDocumentMatrix=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"docMatrix","");  int iLevels=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"levels","5")).intValue();  int iIterations=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"iters","10000")).intValue();  int iBurnInIterations=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"burnIn","1000")).intValue();  double dAlpha=Double.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"alpha","2.0")).doubleValue();  double dBeta=Double.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"beta","0.5")).doubleValue();  int iThreads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"threads",String.valueOf(Runtime.getRuntime().availableProcessors()))).intValue();  boolean bRecalc=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"recalc","FALSE")).booleanValue();  int iTextMeanSize=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"textMeanSize","250")).intValue();  if (Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"help","FALSE")).booleanValue()) {    printSyntax();    return;  }  ConsoleNotificationListener cnlReporting=new ConsoleNotificationListener();  TreeMap<Integer,String> tmIdxToStr=new TreeMap<Integer,String>();  System.err.println("Initializing HLDA...");  int[][] dtm=null;  boolean bMatrixLoadedOK=false;  if ((sDocumentMatrix.length() != 0) && !bRecalc) {    try {      System.err.println("Loading document-term matrix...");      FileInputStream fis=new FileInputStream(sDocumentMatrix);      ObjectInputStream ois=new ObjectInputStream(fis);      dtm=(int[][])ois.readObject();      tmIdxToStr=(TreeMap<Integer,String>)ois.readObject();      ois.close();      fis.close();      bMatrixLoadedOK=true;    } catch (    Exception e) {      System.err.println("Could not load document term matrix.");    }  }  ;  if (!bMatrixLoadedOK) {    DocumentSet dm=new DocumentSet(sInputDir,1.0);    dm.createSets(false,1.0,bInputDirFlat);    System.err.print("Calculating document term matrix...");    dtm=HierLDACaller.getDocumentTermMatrix(dm.getTrainingSet(),tmIdxToStr);    System.err.println("Done.");    System.err.println("Saving document-term matrix...");    if (sDocumentMatrix.length() != 0) {      try {        FileOutputStream fos=new FileOutputStream(sDocumentMatrix);        ObjectOutputStream oos=new ObjectOutputStream(fos);        oos.writeObject(dtm);        oos.writeObject(tmIdxToStr);        oos.close();        fos.close();      } catch (      Exception e) {        System.err.println("Could not save document term matrix.");        e.printStackTrace(System.err);      }    }  }  HierLDAGibbs hierLDA=null;  boolean bHLDALoadedOK=false;  if ((sModel.length() != 0) && !bRecalc) {    File fLDAModel=new File(sModel);    try {      System.err.println("Loading HLDA model...");      FileInputStream fis=new FileInputStream(fLDAModel);      ObjectInputStream ois=new ObjectInputStream(fis);      hierLDA=(HierLDAGibbs)ois.readObject();      ois.close();      fis.close();      bHLDALoadedOK=true;    } catch (    Exception e) {      System.err.println("Could not load HLDA model...");      hierLDA=new HierLDAGibbs(iLevels,dtm,dAlpha,dBeta);      System.err.println("Performing HLDA sampling...");      hierLDA.setProgressIndicator(cnlReporting);      hierLDA.performGibbs(iIterations,iBurnInIterations,Runtime.getRuntime().availableProcessors());    }  } else {    hierLDA=new HierLDAGibbs(iLevels,dtm,dAlpha,dBeta);    hierLDA.setProgressIndicator(cnlReporting);    System.err.println("Performing HLDA sampling...");    hierLDA.performGibbs(iIterations,iBurnInIterations,Runtime.getRuntime().availableProcessors());  }  if ((sModel.length() != 0) && (!bHLDALoadedOK)) {    try {      System.err.println("Saving HLDA model...");      FileOutputStream fos=new FileOutputStream(sModel);      ObjectOutputStream oos=new ObjectOutputStream(fos);      oos.writeObject(hierLDA);      oos.close();      fos.close();    } catch (    Exception e) {      System.err.println("Could not save document term matrix.");      e.printStackTrace(System.err);    }  }  System.err.println("Initializing and training grammaticality estimator...");  grammaticalityEstimator ge=new grammaticalityEstimator(sInputDir,1,-1,1,3,2,bInputDirFlat);  ge.train();  System.err.println("Initializing text generator...");  HLDATextGenerator tg=new HLDATextGenerator(hierLDA,new DistributionDocumentEvaluator(tmIdxToStr,ge),tmIdxToStr);  for (int iGramVinc=1; iGramVinc < 2; iGramVinc++) {    System.err.println("Creating text... Grammar rank " + iGramVinc);    Vector<Integer> vText=tg.generateNormalText(iTextMeanSize,iGramVinc);    String sText=tg.getVectorToText(vText);    sText=sText.replaceAll("_/"," ");    sText=sText.replaceAll("\\\\_"," ");    System.out.println(sText);    System.err.println("Grammaticality:" + ge.getNormality(sText));  }  System.err.println("Complete.");  System.exit(0);}  }
class C{  public synchronized CompletableFuture<Void> close(){  if (log.isDebugEnabled()) {    log.debug("Closing producer {} -- isClosed={}",this,isClosed);  }  if (!isClosed) {    isClosed=true;    if (log.isDebugEnabled()) {      log.debug("Trying to close producer {} -- cnxIsActive: {} -- pendingPublishAcks: {}",this,cnx.isActive(),pendingPublishAcks);    }    if (!cnx.isActive() || pendingPublishAcks == 0) {      closeNow();    }  }  return closeFuture;}  }
class C{  private void message(String type,SAXParseException exception){  String filename=exception.getSystemId();  if (filename.startsWith(baseURI)) {    filename=filename.substring(baseURI.length());  }  System.out.print(type + ":" + filename+ ":"+ exception.getLineNumber());  if (exception.getColumnNumber() > 0) {    System.out.print(":" + exception.getColumnNumber());  }  System.out.println(":" + exception.getMessage());}  }
class C{  public void write(Writer w) throws IOException {  boolean useOriginal=(originalData != null && disabledSamples.size() > 0);  write(w,useOriginal);}  }
class C{  public void openPageByTitle(String title){  SiteAdminGridRow row=getRowByTitle(title);  if (row != null) {    row.open();  } else {    String msg=String.format("Could not find a page titled %s",title);    throw new IllegalArgumentException(msg);  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Schema))   return false;  Schema s=(Schema)o;  if (m_size != s.getColumnCount())   return false;  for (int i=0; i < m_size; ++i) {    if (!(m_names[i].equals(s.getColumnName(i)) && m_types[i].equals(s.getColumnType(i)) && m_dflts[i].equals(s.getDefault(i)))) {      return false;    }  }  return true;}  }
class C{  public static @ColorInt int scrimify(@ColorInt int color,boolean isDark,@FloatRange(from=0f,to=1f) float lightnessMultiplier){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  if (!isDark) {    lightnessMultiplier+=1f;  } else {    lightnessMultiplier=1f - lightnessMultiplier;  }  hsl[2]=MathUtils.constrain(0f,1f,hsl[2] * lightnessMultiplier);  return android.support.v4.graphics.ColorUtils.HSLToColor(hsl);}  }
class C{  private boolean parseOptions() throws IOException {  boolean valid;  if (hasOption(LOCALPROPFILE)) {    SystemConfiguration.loadPropsFromFile(new File(getOptionValue(LOCALPROPFILE)));  } else   if (hasOption(HDFSPROPDIR)) {    FileSystem fs=FileSystem.get(new Configuration());    SystemConfiguration.loadPropsFromHDFSDir(getOptionValue(HDFSPROPDIR),fs);  } else   if (hasOption(HDFSPROPFILE)) {    FileSystem fs=FileSystem.get(new Configuration());    SystemConfiguration.loadPropsFromFile(getOptionValue(HDFSPROPFILE),fs);  } else {    for (    String prop : ResponderProps.PROPSLIST) {      if (hasOption(prop)) {        SystemConfiguration.setProperty(prop,getOptionValue(prop));      }    }  }  valid=ResponderProps.validateResponderProperties();  return valid;}  }
class C{  public Matrix uminus(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=-A[i][j];    }  }  return X;}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {  fInCDATA=false;  if (fDocumentHandler != null) {    fDocumentHandler.endCDATA(augs);  }}  }
class C{  protected static double evaluate(double[] coefficients,double argument) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(coefficients);  int n=coefficients.length;  if (n == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);  }  double result=coefficients[n - 1];  for (int j=n - 2; j >= 0; j--) {    result=argument * result + coefficients[j];  }  return result;}  }
class C{  @Override public WebElement findElementByTagName(String tagName){  return ((FindsByTagName)super.getWrappedDriver()).findElementByTagName(tagName);}  }
class C{  public CopyOnWriteArrayList(Object[] toCopyIn){  copyIn(toCopyIn,0,toCopyIn.length);}  }
class C{  protected List<String> parseArgStringMacro(CharSequence argStr) throws ParseException {  List<String> argList=new ArrayList<>();  String[] args=argStr.toString().split("(\\s|\\n)+");  for (  String arg : args) {    String[] parts=arg.split("=");    String name=parts[0];    argList.add(name);  }  return argList;}  }
class C{  public boolean hasProgramStatus(){  return programStatus != null;}  }
class C{  public static boolean isValidNCName(String ncName){  final int length=ncName.length();  if (length == 0) {    return false;  }  char ch=ncName.charAt(0);  if (!isNCNameStart(ch)) {    return false;  }  for (int i=1; i < length; ++i) {    ch=ncName.charAt(i);    if (!isNCName(ch)) {      return false;    }  }  return true;}  }
class C{  public void configureDetailsArea(DetailsAreaConfiguration detailsAreaConfiguration,int location){  DisplayArea displayArea=getDisplayArea(location);  if (displayArea != null) {    displayArea.setCaption(detailsAreaConfiguration.getName());    displayArea.setClosable(detailsAreaConfiguration.isClosable());  }}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  public boolean debug(){  return soot.PhaseOptions.getBoolean(options,"debug");}  }
class C{  void processIncludeActions(Element parentElement,List<? extends Element> preInclElements,List<? extends Element> postInclElements,List<ModelAction> actions,String currResource,boolean processIncludes,CurrentMenuDefBuildArgs currentMenuDefBuildArgs,GeneralBuildArgs genBuildArgs){  final boolean useCache=true;  final boolean cacheConsume=false;  if (processIncludes) {    List<Element> actionInclElements=new ArrayList<Element>();    if (preInclElements != null) {      actionInclElements.addAll(preInclElements);    }    actionInclElements.addAll(UtilXml.childElementList(parentElement,"include-elements"));    actionInclElements.addAll(UtilXml.childElementList(parentElement,"include-actions"));    if (postInclElements != null) {      actionInclElements.addAll(postInclElements);    }    for (    Element actionInclElement : getMergedIncludeDirectives(actionInclElements,currResource)) {      String inclMenuName=actionInclElement.getAttribute("menu-name");      String inclResource=actionInclElement.getAttribute("resource");      String inclRecursive=actionInclElement.getAttribute("recursive");      if (inclRecursive.isEmpty()) {        inclRecursive="full";      }      String nextResource=UtilValidate.isNotEmpty(inclResource) ? inclResource : currResource;      if ("no".equals(inclRecursive) || "includes-only".equals(inclRecursive) || "extends-only".equals(inclRecursive)|| "full".equals(inclRecursive)) {        Element includedMenuElem=loadIncludedMenu(inclMenuName,inclResource,parentElement,currResource,genBuildArgs.menuElemCache,useCache,cacheConsume);        ModelMenu includedMenuModel=getMenuDefinition(inclResource,inclMenuName,currResource,parentElement,genBuildArgs);        CurrentMenuDefBuildArgs includedNextCurrentMenuDefBuildArgs=new CurrentMenuDefBuildArgs(includedMenuModel != null ? includedMenuModel : this);        if (includedMenuElem != null) {          if ("extends-only".equals(inclRecursive) || "full".equals(inclRecursive)) {            String extendedResource=includedMenuElem.getAttribute("extends-resource");            String extendedMenuName=includedMenuElem.getAttribute("extends");            String extendedNextResource=UtilValidate.isNotEmpty(extendedResource) ? extendedResource : nextResource;            if (UtilValidate.isNotEmpty(extendedMenuName)) {              Element extendedMenuElem=loadIncludedMenu(extendedMenuName,extendedResource,includedMenuElem,nextResource,genBuildArgs.menuElemCache,useCache,cacheConsume);              if (extendedMenuElem != null) {                ModelMenu extendedMenuModel=getMenuDefinition(extendedResource,extendedMenuName,nextResource,includedMenuElem,genBuildArgs);                CurrentMenuDefBuildArgs extendedNextCurrentMenuDefBuildArgs=new CurrentMenuDefBuildArgs(extendedMenuModel != null ? extendedMenuModel : this);                processIncludeActions(extendedMenuElem,null,null,actions,extendedNextResource,true,extendedNextCurrentMenuDefBuildArgs,genBuildArgs);              } else {                Debug.logError("Failed to find (via include-actions or include-elements) parent menu definition '" + extendedMenuName + "' in resource '"+ extendedNextResource+ "'",module);              }            }          }          if ("includes-only".equals(inclRecursive) || "full".equals(inclRecursive)) {            processIncludeActions(includedMenuElem,null,null,actions,nextResource,true,includedNextCurrentMenuDefBuildArgs,genBuildArgs);          } else {            processIncludeActions(includedMenuElem,null,null,actions,nextResource,false,includedNextCurrentMenuDefBuildArgs,genBuildArgs);          }        } else {          Debug.logError("Failed to find include-actions or include-elements menu definition '" + inclMenuName + "' in resource '"+ nextResource+ "'",module);        }      } else {        Debug.logError("Unrecognized include-actions or include-elements recursive mode: " + inclRecursive,module);      }    }  }  Element actionsElement=UtilXml.firstChildElement(parentElement,"actions");  if (actionsElement != null) {    actions.addAll(ModelMenuAction.readSubActions(this,actionsElement));  }}  }
class C{  @Override public void reset() throws IOException {  fInputStream.reset();}  }
class C{  @ObjectiveCName("addToRegister:action:name:event:timeoutListener:timeoutDuration:") private void addToRegister(Topic topic,Actions action,String name,Event event,UtilTimeoutListener timeoutListener,int timeoutDuration){  AckTimeout task=new AckTimeout(topic,action,name,event,timeoutListener,timeoutDuration);  if (this.state == ConnectionState.OPEN) {    ScheduledFuture scheduledFuture=executor.schedule(task,timeoutDuration,TimeUnit.MILLISECONDS);    String uniqueName=this.getUniqueName(topic,action,name);    register.put(uniqueName,scheduledFuture);  } else {    this.ackTimers.add(task);  }}  }
class C{  public static void onSimpleFinishTalk(NpcAI2 npcAI,Creature creature){  Npc owner=npcAI.getOwner();  if (owner.isTargeting(creature.getObjectId()) && npcAI.setSubStateIfNot(AISubState.NONE)) {    owner.setTarget(null);  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsEllipses();}  }
class C{  private int blockWidth(final int blockColumn){  return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;}  }
class C{  @Override public synchronized void process(CAS tcas){  final AnnotationComboIterator comboIterator=new AnnotationComboIterator(tcas,this.sentenceType,this.tokenType);  for (  AnnotationIteratorPair annotationIteratorPair : comboIterator) {    final List<AnnotationFS> sentenceTokenAnnotationList=new LinkedList<AnnotationFS>();    final List<String> sentenceTokenList=new LinkedList<String>();    for (    AnnotationFS tokenAnnotation : annotationIteratorPair.getSubIterator()) {      sentenceTokenAnnotationList.add(tokenAnnotation);      sentenceTokenList.add(tokenAnnotation.getCoveredText());    }    final List<String> posTags=this.posTagger.tag(sentenceTokenList);    double posProbabilities[]=null;    if (this.probabilityFeature != null) {      posProbabilities=this.posTagger.probs();    }    final Iterator<String> posTagIterator=posTags.iterator();    final Iterator<AnnotationFS> sentenceTokenIterator=sentenceTokenAnnotationList.iterator();    int index=0;    while (posTagIterator.hasNext() && sentenceTokenIterator.hasNext()) {      final String posTag=posTagIterator.next();      final AnnotationFS tokenAnnotation=sentenceTokenIterator.next();      tokenAnnotation.setStringValue(this.posFeature,posTag);      if (posProbabilities != null) {        tokenAnnotation.setDoubleValue(this.posFeature,posProbabilities[index]);      }      index++;    }    if (this.logger.isLoggable(Level.FINER)) {      final StringBuilder sentenceWithPos=new StringBuilder();      sentenceWithPos.append("\"");      for (final Iterator<AnnotationFS> it=sentenceTokenAnnotationList.iterator(); it.hasNext(); ) {        final AnnotationFS token=it.next();        sentenceWithPos.append(token.getCoveredText());        sentenceWithPos.append('\\');        sentenceWithPos.append(token.getStringValue(this.posFeature));        sentenceWithPos.append(' ');      }      if (sentenceWithPos.length() > 1)       sentenceWithPos.setLength(sentenceWithPos.length() - 1);      sentenceWithPos.append("\"");      this.logger.log(Level.FINER,sentenceWithPos.toString());    }  }}  }
class C{  private void transformToLowerBiDiagonal(){  final int m=householderVectors.length;  final int n=householderVectors[0].length;  for (int k=0; k < m; k++) {    final double[] hK=householderVectors[k];    double xNormSqr=0;    for (int j=k; j < n; ++j) {      final double c=hK[j];      xNormSqr+=c * c;    }    final double a=(hK[k] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);    main[k]=a;    if (a != 0.0) {      hK[k]-=a;      for (int i=k + 1; i < m; ++i) {        final double[] hI=householderVectors[i];        double alpha=0;        for (int j=k; j < n; ++j) {          alpha-=hI[j] * hK[j];        }        alpha/=a * householderVectors[k][k];        for (int j=k; j < n; ++j) {          hI[j]-=alpha * hK[j];        }      }    }    if (k < m - 1) {      final double[] hKp1=householderVectors[k + 1];      xNormSqr=0;      for (int i=k + 1; i < m; ++i) {        final double c=householderVectors[i][k];        xNormSqr+=c * c;      }      final double b=(hKp1[k] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);      secondary[k]=b;      if (b != 0.0) {        hKp1[k]-=b;        for (int j=k + 1; j < n; ++j) {          double beta=0;          for (int i=k + 1; i < m; ++i) {            final double[] hI=householderVectors[i];            beta-=hI[j] * hI[k];          }          beta/=b * hKp1[k];          for (int i=k + 1; i < m; ++i) {            final double[] hI=householderVectors[i];            hI[j]-=beta * hI[k];          }        }      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6,Plan<R> p7,Plan<R> p8){  return from(JoinPatterns.when(p1,p2,p3,p4,p5,p6,p7,p8));}  }
class C{  public VideoGetCommentsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void initPlayerStateUI(){  if (!playableMediaItem.getBitrate().isEmpty()) {    tvTrackInfo.setText(playableMediaItem.getBitrate() + getString(R.string.kbps));  } else {    tvTrackInfo.setText("");  }  if (universalPlayer.isPrepaired) {    ((IToolbarHolder)getActivity()).getToolbar().setTitle(R.string.now_paying);    if (btnPlay.isPlay() && universalPlayer.isPlaying()) {      btnPlay.toggle();    } else     if (!btnPlay.isPlay() && !universalPlayer.isPlaying()) {      btnPlay.toggle();    }  } else {    ((IToolbarHolder)getActivity()).getToolbar().setTitle(R.string.buffering);    if (!btnPlay.isPlay()) {      btnPlay.toggle();    }  }}  }
class C{  @PostConstruct public void init(){  LOGGER.info("Initializing Process cache...");  commonInit();  doPostConfigurationOfProcessControlTags();  LOGGER.info("... Process cache initialization complete.");}  }
class C{  protected void propagate(D sourceVal,N target,D targetVal,N relatedCallSite,boolean isUnbalancedReturn){  propagate(sourceVal,target,targetVal,relatedCallSite,isUnbalancedReturn,false);}  }
class C{  private void checkServerResponseCode(HttpURLConnection urlConnection) throws RequestFailureException {  try {    if (urlConnection.getResponseCode() != 200) {      throw new RequestFailureException("Received " + urlConnection.getResponseCode() + " code instead of 200 (OK) from the server.  Aborting.");    }  } catch (  IOException e) {    throw new RequestFailureException("Failed to read response code from server: ",e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SOLDOUT_ITEM_MULTI(String value1,String value0s){  return new SM_SYSTEM_MESSAGE(1300791,value1,value0s);}  }
class C{  public static Locale parseLocale(String localeString){  if (UtilValidate.isEmpty(localeString)) {    return null;  }  Locale locale=null;  if (localeString.length() == 2) {    locale=new Locale(localeString);  } else   if (localeString.length() == 5) {    String language=localeString.substring(0,2);    String country=localeString.substring(3,5);    locale=new Locale(language,country);  } else   if (localeString.length() > 6) {    String language=localeString.substring(0,2);    String country=localeString.substring(3,5);    String extension=localeString.substring(6);    locale=new Locale(language,country,extension);  } else {    Debug.logWarning("Do not know what to do with the localeString [" + localeString + "], should be length 2, 5, or greater than 6, returning null",module);  }  return locale;}  }
class C{  public final TestSubscriber<T> configureValuesTimeout(Duration timeout){  this.valuesTimeout=timeout;  return this;}  }
class C{  public DTW(double[][] signal,double[][] reference,String distanceFunction){  this.signal=signal;  this.reference=reference;  this.distanceFunction=distanceFunction;  setCost(dpDistance());}  }
class C{  public static Observable<Float> createFrom1D(Observable<Float> stream){  final JKalman kalman=new JKalman(2,1);  final Matrix m=new Matrix(1,1);  double[][] tr={{1,0},{0,1}};  kalman.setTransition_matrix(new Matrix(tr));  kalman.setError_cov_post(kalman.getError_cov_post().identity());  return Observable.create(null);}  }
class C{  @Controller(events=EventType.FILE_SHARED) public void onFileShared(WebSocketSession session,Event event){  logger.info("File shared: {}",event);}  }
class C{  public Role withDefaults(){  return this;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void removeConnection(final IConnectionWithReconnect connection){synchronized (connections) {    connections.remove(connection);  }}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,int startRow,int startColumn){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,START_PATTERN),INDEXES_START_PATTERN);  if (result[4] != null) {    startColumn=(int)result[4].getX();    startRow=(int)result[4].getY();  }  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,STOP_PATTERN),INDEXES_STOP_PATTERN);  return result;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_login);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  private static void write(GigaSpace space,Phrase phrase){  LeaseContext<Phrase> context=space.write(phrase);  if (context.getVersion() == 1) {    System.out.println("write - " + phrase);  } else {    System.out.println("update - " + phrase);  }}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  @Nullable public FuncallExpression findRule(String name){  for (  FuncallExpression expr : findChildrenByClass(FuncallExpression.class)) {    String ruleName=expr.getNameArgumentValue();    if (name.equals(ruleName)) {      return expr;    }  }  return null;}  }
class C{  public HashChain(){  firstItem=lastItem=null;}  }
class C{  public static final boolean isValidType(final short valueDeadbandType){  return valueDeadbandType >= DEADBAND_NONE && valueDeadbandType <= DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE;}  }
class C{  private <T>T send(String method,@Nullable Object entity){  try {    if (entity == null) {      builder().method(method);    } else {      builder().method(method,shadingSafeEntity(entity));    }    return null;  } catch (  UniformInterfaceException e) {    throw asEmoClientException(e);  }}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public DUCDocumentInfo(String sDocName){  sDocName=new File(sDocName).getName();  if (isDUCDoc(sDocName)) {    String[] sArr=sDocName.split("[.]");    Topic=sArr[0];    Length=Integer.valueOf(sArr[2]).intValue();    Selector=sArr[3];    Assessor=sArr[3];    Summarizer=sArr[4];  } else {    Topic="NA";    Length=-1;    Selector="NA";    Assessor="NA";    Summarizer="NA";  }}  }
class C{  public void clear(){  stateCount++;  firstItem=lastItem=null;  map.clear();}  }
class C{  private double cov(double[] vec1,double[] vec2){  double result=0;  int dim=vec1.length;  if (vec2.length != dim)   (new IllegalArgumentException("vectors are not of same length")).printStackTrace();  double meanVec1=mean(vec1), meanVec2=mean(vec2);  for (int i=0; i < dim; i++) {    result+=(vec1[i] - meanVec1) * (vec2[i] - meanVec2);  }  return result / Math.max(1,dim - 1);}  }
class C{  public TransferableDataItem(Map<NodeInterface,TreePath> selectedData){  internalPopulate(selectedData);}  }
class C{  public void readBookiesBlocking() throws InterruptedException, KeeperException {  bookieWatcher.readBookiesBlocking();}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {  if (!fDeferNodeExpansion) {    if (fDocumentImpl != null) {      fDocumentType=fDocumentImpl.createDocumentType(rootElement,publicId,systemId);      fCurrentNode.appendChild(fDocumentType);    }  } else {    fDocumentTypeIndex=fDeferredDocumentImpl.createDeferredDocumentType(rootElement,publicId,systemId);    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,fDocumentTypeIndex);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MERCENARY_CANT_ORDER_BY_TOO_DISTANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400484,value0);}  }
class C{  public static <T>List<T> toList(T[] array){  return Arrays.asList(array);}  }
class C{  @MediumTest public void testPreconditions(){  assertNotNull(mLibTextView1);  assertNotNull(mLibTextView2);}  }
class C{  protected StatsGetPostReachQuery postId(int value){  return unsafeParam("post_id",value);}  }
class C{  public GroupsSearchQuery search(UserActor actor,String q){  return new GroupsSearchQuery(getClient(),actor,q);}  }
class C{  public Grammar parseGrammar(String type,XMLInputSource is) throws XNIException, IOException {  if (type.equals(XMLGrammarDescription.XML_SCHEMA)) {    return parseXMLSchema(is);  } else   if (type.equals(XMLGrammarDescription.XML_DTD)) {    return parseDTD(is);  }  return null;}  }
class C{  public boolean useClusterSchema(){  return (_clusterSchema != null ? true : false);}  }
class C{  protected void writePalette() throws IOException {  out.write(colorTab,0,colorTab.length);  int n=(3 * 256) - colorTab.length;  for (int i=0; i < n; i++) {    out.write(0);  }}  }
class C{  public String toString(){  return "FileAudioPlayer";}  }
class C{  private void installSocksProxy(Dict proxySettings,ProtocolDispatchSelector ps){  if (isActive(proxySettings.get("SOCKSEnable"))) {    String proxyHost=(String)proxySettings.get("SOCKSProxy");    int proxyPort=(Integer)proxySettings.get("SOCKSPort");    ps.setSelector("socks",new FixedSocksSelector(proxyHost,proxyPort));    Logger.log(getClass(),LogLevel.TRACE,"OSX socks proxy is {0}:{1}",proxyHost,proxyPort);  }}  }
class C{  public void writeNullTerminatedString(byte[] bytes) throws IOException {  int pos=0;  while (pos < bytes.length) {    if (bytes[pos] == 0)     break;    pos++;  }  if (pos > 0)   write(bytes,0,pos);  write((byte)0);}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  @Override public Void call() throws Exception {  try {    NodeHolder nodeHolder=processDataRows(dataRows);    int indexInNodeHolderArray=(sequenceNumber - 1) % numberOfCores;    blockletDataHolder.put(nodeHolder,indexInNodeHolderArray);    return null;  } catch (  Throwable throwable) {    consumerExecutorService.shutdownNow();    resetBlockletProcessingCount();    throw new CarbonDataWriterException(throwable.getMessage());  }}  }
class C{  protected void onDownloadFailed(String fileName){  mDownloadSnackbarController.onDownloadFailed(fileName);}  }
class C{  public String geom_verify_name(){  return soot.PhaseOptions.getString(options,"geom-verify-name");}  }
class C{  public boolean hasAttributes(){  return attributes != null && !attributes.isEmpty();}  }
class C{  public ColourRamp(){}  }
class C{  @Override public void element(String elementName,Augmentations augs) throws XNIException {}  }
class C{  @Override public String object2Relation(String fieldType){  if (fieldType != null) {    if (fieldType.equals("float") || fieldType.equals("java.lang.Float")) {      return "real";    }    if (fieldType.equals("double") || fieldType.equals("java.lang.Double")) {      return "real";    }  }  return null;}  }
class C{  private void dropTables(){  List<String> tableNamesToDrop=findTablesToDrop();  dropTables(tableNamesToDrop,mDb);  clearCopyInTableSchema(tableNamesToDrop);}  }
class C{  public void invalidateGraphicsRenderer(){  myAndroidPreviewPanel.invalidateGraphicsRenderer();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public int passes(){  return soot.PhaseOptions.getInt(options,"passes");}  }
class C{  public boolean supportLocale(String locale){  return new File(path + "/i18n/" + locale+ ".lang").exists();}  }
class C{  @NotNull public Emotion findEmotionSingleFace(@NotNull String image){  List<Emotion> emotions=emotionBuilder.emotionRecognition(image).withResult();  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),"a single face was not present");  return emotions.get(0);}  }
class C{  public static CassandraThriftFacade forSeedsAndPort(String seeds,int defaultPort){  final String seed=seeds.contains(",") ? seeds.substring(0,seeds.indexOf(',')) : seeds;  HostAndPort host=HostAndPort.fromString(seed).withDefaultPort(defaultPort);  return new CassandraThriftFacade(new TFramedTransport(new TSocket(host.getHostText(),host.getPort())));}  }
class C{  public LeadsMetricHitQuery(VkApiClient client,String data){  super(client,"leads.metricHit",MetricHitResponse.class);  data(data);}  }
class C{  public VideoEditCommentQuery editComment(UserActor actor,int commentId){  return new VideoEditCommentQuery(getClient(),actor,commentId);}  }
class C{  public boolean halfEmpty(){  return count * 2 < capacity && bufferMap.size() == 1 && bufferMap.containsKey(0);}  }
class C{  public void handleDirectUpdateSA(Context context,final ITemplateHolder template){  ILockObject templateLock=null;  try {    boolean makeWaitForInfo=(template.getExpirationTime() != 0);    IEntryHolder entry=null;    try {      if (makeWaitForInfo)       template.setInitialIfExistSearchActive();      try {        entry=_engine.getMatchedEntryAndOperateSA(context,template,makeWaitForInfo,false);      }  finally {        if (makeWaitForInfo)         template.resetInitialIfExistSearchActive();      }    } catch (    TemplateDeletedException ex) {      return;    }    if (entry != null || template.isDeleted()) {      return;    }    if ((template.getExpirationTime() == 0)) {      context.setOperationAnswer(template,null,null);      return;    }    if (templateLock == null)     templateLock=getTemplateLockObject(template);synchronized (templateLock) {      if (template.hasAnswer())       return;      if (!template.isHasWaitingFor()) {        context.setOperationAnswer(template,null,null);        if (!template.isDeleted() && template.isInCache()) {          _cacheManager.removeTemplate(context,template,false,true,false);        }        return;      }    }  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Error handling update.",ex);    }    if (templateLock == null)     templateLock=getTemplateLockObject(template);synchronized (templateLock) {      if (!template.hasAnswer())       context.setOperationAnswer(template,null,ex);      if (!template.isDeleted() && template.isInCache())       _cacheManager.removeTemplate(context,template,false,true,false);    }  } finally {    if (templateLock != null)     freeTemplateLockObject(templateLock);  }}  }
class C{  private void createNodes(DefaultMutableTreeNode top){  DefaultMutableTreeNode attributeNode=null;  DefaultMutableTreeNode kindNode;  DefaultMutableTreeNode toSelect=null;  String addedAttribute="";  for (  String attribute_kind : attribute2taxa2value.keySet()) {    int pos=attribute_kind.indexOf(":");    String attribute=attribute_kind.substring(0,pos);    String kind=attribute_kind.substring(pos + 1,attribute_kind.length());    kindNode=new DefaultMutableTreeNode(kind);    if (!attribute.equals(addedAttribute)) {      attributeNode=new DefaultMutableTreeNode(attribute);      addedAttribute=attribute;      top.add(attributeNode);    }    Map<String,Number> taxa2values=attribute2taxa2value.get(attribute_kind);    int nrOfReadsPerKind=0;    int nrOfReadsPerTaxon=0;    if (doSortByAlpha) {      for (      String taxname : taxa2values.keySet()) {        nrOfReadsPerTaxon=taxa2values.get(taxname).intValue();        if (nrOfReadsPerTaxon > 0) {          nrOfReadsPerKind+=nrOfReadsPerTaxon;          DefaultMutableTreeNode leaf=new DefaultMutableTreeNode(taxname,false);          leaf.setUserObject(leaf.getUserObject().toString() + " [" + nrOfReadsPerTaxon+ " Reads]");          kindNode.add(leaf);          if (toSelect == null) {            selectedTaxon=taxname;            toSelect=leaf;          }        }      }    } else {      if (doSortByNrOfReads) {        if (attribute2SortedTaxValPair.containsKey(attribute_kind)) {          Pair pairTax2Val=attribute2SortedTaxValPair.get(attribute_kind);          String[] taxnames=(String[])pairTax2Val.getFirst();          int[] nrOfReads=(int[])pairTax2Val.getSecond();          nrOfReadsPerKind=0;          for (int i=taxnames.length - 1; i >= 0; i--) {            String taxname=taxnames[i];            nrOfReadsPerTaxon=nrOfReads[i];            if (nrOfReadsPerTaxon > 0) {              nrOfReadsPerKind+=nrOfReadsPerTaxon;              DefaultMutableTreeNode leaf=new DefaultMutableTreeNode(taxname,false);              leaf.setUserObject(leaf.getUserObject().toString() + " [" + nrOfReadsPerTaxon+ " Reads]");              kindNode.add(leaf);              if (toSelect == null) {                selectedTaxon=taxname;                toSelect=leaf;              }            }          }        }      }    }    kindNode.setUserObject(kindNode.getUserObject().toString() + " [" + taxa2values.size()+ " Taxa, "+ nrOfReadsPerKind+ " Reads]");    if (attributeNode != null)     attributeNode.add(kindNode);  }  if (toSelect != null) {    TreeNode[] treePath=toSelect.getPath();    if (treePath != null) {      tree.expandPath(new TreePath(treePath));      tree.setSelectionPath(new TreePath(treePath));    }  }}  }
class C{  public String hash(String key){  try {    MessageDigest md=MessageDigest.getInstance(algorithm);    byte[] keyBytes=key.getBytes("UTF-8");    md.update(keyBytes,0,keyBytes.length);    byte[] binaryhash=md.digest();    return Base64.encode(binaryhash);  } catch (  Exception e) {    LOG.warn("Failed to get hash encoding for key: {}",key,e);    return key;  }}  }
class C{  public JDKRandomGenerator(){  delegate=new Random();}  }
class C{  public ObjectFactory(){}  }
class C{  private static void interactiveMode(FreeTTS freetts){  try {    while (true) {      String text;      BufferedReader reader;      reader=new BufferedReader(new InputStreamReader(System.in));      System.out.print("Enter text: ");      System.out.flush();      text=reader.readLine();      if ((text == null) || (text.length() == 0)) {        freetts.shutdown();        System.exit(0);      } else {        freetts.batchTextToSpeech(text);      }    }  } catch (  IOException e) {  }}  }
class C{  public void java_lang_System_getCallerClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public boolean isCellEditable(int row,int column){  return false;}  }
class C{  public void addToWeightList(double weight){  weightList.add(weight);}  }
class C{  public Set<D> ifdsResultsAt(N statement){  return resultsAt(statement).keySet();}  }
class C{  public void loadTree(InputStream treeStream) throws IOException, MaryConfigurationException {  MaryCARTReader cartReader=new MaryCARTReader();  this.tree=cartReader.loadFromStream(treeStream);  this.featureDefinition=tree.getFeatureDefinition();  this.indexPredictedFeature=featureDefinition.getFeatureIndex(PREDICTED_STRING_FEATURENAME);  this.convertToLowercase=false;  Properties props=tree.getProperties();  if (props == null)   throw new IllegalArgumentException("Prediction tree does not contain properties");  convertToLowercase=Boolean.parseBoolean(props.getProperty("lowercase"));  context=Integer.parseInt(props.getProperty("context"));}  }
class C{  private void sendResponse(final Collection<? extends ClientRequestResult> response){  sendJsonResponse(GSON.toJson(response));}  }
class C{  public static Converter<String,?> determinePrimitiveConverter(Type type){  if (String.class.equals(type)) {    return StringConverter.INSTANCE;  } else   if (Boolean.class.equals(type) || boolean.class.equals(type)) {    return BooleanConverter.INSTANCE;  } else   if (Integer.class.equals(type) || int.class.equals(type)) {    return Ints.stringConverter();  } else   if (Long.class.equals(type) || long.class.equals(type)) {    return Longs.stringConverter();  } else   if (Short.class.equals(type) || short.class.equals(type)) {    return Shorts.stringConverter();  } else   if (Float.class.equals(type) || float.class.equals(type)) {    return Floats.stringConverter();  } else   if (Double.class.equals(type) || double.class.equals(type)) {    return Doubles.stringConverter();  }  return null;}  }
class C{  protected FaveAddGroupQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private RbacAuthorizationDetails createAuthDetails(){  RbacAuthorizationDetails authDetails=new RbacAuthorizationDetails();  authDetails.setRbacClass("Manos");  authDetails.setRbacDevice("Mark");  authDetails.setRbacProperty("Matias");  return authDetails;}  }
class C{  public boolean contains(JsonElement element){  return elements.contains(element);}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  protected final void fireColumnEvent(int idx,float prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  private void addVendorOption(VendorOptionTypeInterface vendorOption){  options.put(vendorOption,vendorOption.getName());}  }
class C{  private Reader createASCIIReader(InputStream stream){  return new ASCIIReader(stream,fTempString.ch.length,fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN),fErrorReporter.getLocale());}  }
class C{  public BouncyCastleProvider(){  super(PROVIDER_NAME,1.23,info);  put("KeyStore.BKS","org.bouncycastle.jce.provider.JDKKeyStore");  put("KeyStore.BouncyCastle","org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore");  put("KeyStore.PKCS12","org.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore");  put("KeyStore.BCPKCS12","org.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore");  put("KeyStore.PKCS12-DEF","org.bouncycastle.jce.provider.JDKPKCS12KeyStore$DefPKCS12KeyStore");  put("Alg.Alias.KeyStore.UBER","BouncyCastle");  put("Alg.Alias.KeyStore.BOUNCYCASTLE","BouncyCastle");  put("Alg.Alias.KeyStore.bouncycastle","BouncyCastle");  put("CertificateFactory.X.509","org.bouncycastle.jce.provider.JDKX509CertificateFactory");  put("Alg.Alias.CertificateFactory.X509","X.509");  put("AlgorithmParameterGenerator.DH","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DH");  put("AlgorithmParameterGenerator.DSA","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DSA");  put("AlgorithmParameterGenerator.ELGAMAL","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$ElGamal");  put("AlgorithmParameterGenerator.DES","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES");  put("AlgorithmParameterGenerator.DESEDE","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES");  put("AlgorithmParameterGenerator.1.2.840.113549.3.7","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES");  put("AlgorithmParameterGenerator.1.3.14.3.2.7","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES");  put("AlgorithmParameterGenerator.IDEA","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$IDEA");  put("AlgorithmParameterGenerator.1.3.6.1.4.1.188.7.1.1.2","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$IDEA");  put("AlgorithmParameterGenerator.RC2","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$RC2");  put("AlgorithmParameterGenerator.1.2.840.113549.3.2","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$RC2");  put("AlgorithmParameterGenerator.CAST5","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$CAST5");  put("AlgorithmParameterGenerator.1.2.840.113533.7.66.10","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$CAST5");  put("AlgorithmParameterGenerator.AES","org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$AES");  put("Alg.Alias.AlgorithmParameterGenerator.2.16.840.1.101.3.4.2","AES");  put("Alg.Alias.AlgorithmParameterGenerator.2.16.840.1.101.3.4.22","AES");  put("Alg.Alias.AlgorithmParameterGenerator.2.16.840.1.101.3.4.42","AES");  put("Alg.Alias.AlgorithmParameterGenerator.2.16.840.1.101.3.4.1.2","AES");  put("Alg.Alias.AlgorithmParameterGenerator.2.16.840.1.101.3.4.1.22","AES");  put("Alg.Alias.AlgorithmParameterGenerator.2.16.840.1.101.3.4.1.42","AES");  put("AlgorithmParameters.DH","org.bouncycastle.jce.provider.JDKAlgorithmParameters$DH");  put("AlgorithmParameters.DSA","org.bouncycastle.jce.provider.JDKAlgorithmParameters$DSA");  put("AlgorithmParameters.ELGAMAL","org.bouncycastle.jce.provider.JDKAlgorithmParameters$ElGamal");  put("AlgorithmParameters.IES","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IES");  put("AlgorithmParameters.PKCS12PBE","org.bouncycastle.jce.provider.JDKAlgorithmParameters$PKCS12PBE");  put("AlgorithmParameters.1.2.840.113549.3.7","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.IDEA","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IDEAAlgorithmParameters");  put("AlgorithmParameters.1.3.6.1.4.1.188.7.1.1.2","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IDEAAlgorithmParameters");  put("AlgorithmParameters.CAST5","org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters");  put("AlgorithmParameters.1.2.840.113533.7.66.10","org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters");  put("Alg.Alias.AlgorithmParameters.PBEWITHSHA1ANDRC2","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.PBEWITHSHAAND3-KEYTRIPLEDES","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.PBEWITHSHAAND2-KEYTRIPLEDES","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDRC2","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDRC4","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDTWOFISH","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.PBEWITHSHAANDIDEA","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.1.2.840.113549.1.12.1.1","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.1.2.840.113549.1.12.1.2","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.1.2.840.113549.1.12.1.3","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.1.2.840.113549.1.12.1.4","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.1.2.840.113549.1.12.1.5","PKCS12PBE");  put("Alg.Alias.AlgorithmParameters.1.2.840.113549.1.12.1.6","PKCS12PBE");  put("KeyAgreement.DH","org.bouncycastle.jce.provider.JCEDHKeyAgreement");  put("KeyAgreement.ECDH","org.bouncycastle.jce.provider.JCEECDHKeyAgreement$DH");  put("KeyAgreement.ECDHC","org.bouncycastle.jce.provider.JCEECDHKeyAgreement$DHC");  put("Cipher.DES","org.bouncycastle.jce.provider.JCEBlockCipher$DES");  put("Cipher.DESEDE","org.bouncycastle.jce.provider.JCEBlockCipher$DESede");  put("Cipher.1.2.840.113549.3.7","org.bouncycastle.jce.provider.JCEBlockCipher$DESedeCBC");  put("Cipher.1.3.14.3.2.7","org.bouncycastle.jce.provider.JCEBlockCipher$DESCBC");  put("Cipher.DESEDEWRAP","org.bouncycastle.jce.provider.WrapCipherSpi$DESEDEWrap");  put("Cipher.1.2.840.113549.1.9.16.3.6","org.bouncycastle.jce.provider.WrapCipherSpi$DESEDEWrap");  put("Cipher.SKIPJACK","org.bouncycastle.jce.provider.JCEBlockCipher$Skipjack");  put("Cipher.BLOWFISH","org.bouncycastle.jce.provider.JCEBlockCipher$Blowfish");  put("Cipher.TWOFISH","org.bouncycastle.jce.provider.JCEBlockCipher$Twofish");  put("Cipher.RC2","org.bouncycastle.jce.provider.JCEBlockCipher$RC2");  put("Cipher.RC2WRAP","org.bouncycastle.jce.provider.WrapCipherSpi$RC2Wrap");  put("Cipher.1.2.840.113549.1.9.16.3.7","org.bouncycastle.jce.provider.WrapCipherSpi$RC2Wrap");  put("Cipher.ARC4","org.bouncycastle.jce.provider.JCEStreamCipher$RC4");  put("Cipher.RC4","org.bouncycastle.jce.provider.JCEStreamCipher$RC4");  put("Alg.Alias.Cipher.1.2.840.113549.3.4","RC4");  put("Cipher.RC5","org.bouncycastle.jce.provider.JCEBlockCipher$RC5");  put("Cipher.1.2.840.113549.3.2","org.bouncycastle.jce.provider.JCEBlockCipher$RC2CBC");  put("Alg.Alias.Cipher.RC5-32","RC5");  put("Cipher.RC5-64","org.bouncycastle.jce.provider.JCEBlockCipher$RC564");  put("Cipher.RC6","org.bouncycastle.jce.provider.JCEBlockCipher$RC6");  put("Cipher.RIJNDAEL","org.bouncycastle.jce.provider.JCEBlockCipher$Rijndael");  put("Cipher.AES","org.bouncycastle.jce.provider.JCEBlockCipher$AES");  put("Alg.Alias.Cipher.2.16.840.1.101.3.4.2","AES");  put("Alg.Alias.Cipher.2.16.840.1.101.3.4.22","AES");  put("Alg.Alias.Cipher.2.16.840.1.101.3.4.42","AES");  put("Cipher.2.16.840.1.101.3.4.1.2","org.bouncycastle.jce.provider.JCEBlockCipher$AESCBC");  put("Cipher.2.16.840.1.101.3.4.1.22","org.bouncycastle.jce.provider.JCEBlockCipher$AESCBC");  put("Cipher.2.16.840.1.101.3.4.1.42","org.bouncycastle.jce.provider.JCEBlockCipher$AESCBC");  put("Cipher.AESWRAP","org.bouncycastle.jce.provider.WrapCipherSpi$AESWrap");  put("Cipher.SERPENT","org.bouncycastle.jce.provider.JCEBlockCipher$Serpent");  put("Cipher.CAST5","org.bouncycastle.jce.provider.JCEBlockCipher$CAST5");  put("Cipher.1.2.840.113533.7.66.10","org.bouncycastle.jce.provider.JCEBlockCipher$CAST5CBC");  put("Cipher.CAST6","org.bouncycastle.jce.provider.JCEBlockCipher$CAST6");  put("Cipher.IDEA","org.bouncycastle.jce.provider.JCEBlockCipher$IDEA");  put("Cipher.1.3.6.1.4.1.188.7.1.1.2","org.bouncycastle.jce.provider.JCEBlockCipher$IDEACBC");  put("Cipher.RSA","org.bouncycastle.jce.provider.JCERSACipher$NoPadding");  put("Cipher.RSA/RAW","org.bouncycastle.jce.provider.JCERSACipher$NoPadding");  put("Cipher.RSA/PKCS1","org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding");  put("Cipher.1.2.840.113549.1.1.1","org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding");  put("Cipher.2.5.8.1.1","org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding");  put("Cipher.RSA/1","org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PrivateOnly");  put("Cipher.RSA/2","org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PublicOnly");  put("Cipher.RSA/OAEP","org.bouncycastle.jce.provider.JCERSACipher$OAEPPadding");  put("Cipher.1.2.840.113549.1.1.7","org.bouncycastle.jce.provider.JCERSACipher$OAEPPadding");  put("Cipher.RSA/ISO9796-1","org.bouncycastle.jce.provider.JCERSACipher$ISO9796d1Padding");  put("Cipher.ECIES","org.bouncycastle.jce.provider.JCEIESCipher$ECIES");  put("Cipher.ELGAMAL","org.bouncycastle.jce.provider.JCEElGamalCipher$NoPadding");  put("Cipher.ELGAMAL/PKCS1","org.bouncycastle.jce.provider.JCEElGamalCipher$PKCS1v1_5Padding");  put("Alg.Alias.Cipher.RSA//RAW","RSA");  put("Alg.Alias.Cipher.RSA//NOPADDING","RSA");  put("Alg.Alias.Cipher.RSA//PKCS1PADDING","RSA/PKCS1");  put("Alg.Alias.Cipher.RSA//OAEPPADDING","RSA/OAEP");  put("Alg.Alias.Cipher.RSA//ISO9796-1PADDING","RSA/ISO9796-1");  put("Alg.Alias.Cipher.RSA/ECB/NOPADDING","RSA");  put("Alg.Alias.Cipher.RSA/ECB/PKCS1PADDING","RSA/PKCS1");  put("Alg.Alias.Cipher.RSA/ECB/OAEPPADDING","RSA/OAEP");  put("Alg.Alias.Cipher.RSA/ECB/ISO9796-1PADDING","RSA/ISO9796-1");  put("Alg.Alias.Cipher.RSA/NONE/NOPADDING","RSA");  put("Alg.Alias.Cipher.RSA/NONE/PKCS1PADDING","RSA/PKCS1");  put("Alg.Alias.Cipher.RSA/NONE/OAEPPADDING","RSA/OAEP");  put("Alg.Alias.Cipher.RSA/NONE/ISO9796-1PADDING","RSA/ISO9796-1");  put("Alg.Alias.Cipher.RSA/1/PCKS1PADDING","RSA/1");  put("Alg.Alias.Cipher.RSA/2/PCKS1PADDING","RSA/2");  put("Alg.Alias.Cipher.ELGAMAL/ECB/PKCS1PADDING","ELGAMAL/PKCS1");  put("Alg.Alias.Cipher.ELGAMAL/NONE/PKCS1PADDING","ELGAMAL/PKCS1");  put("Cipher.PBEWITHMD5ANDDES","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndDES");  put("Cipher.BROKENPBEWITHMD5ANDDES","org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES");  put("Cipher.PBEWITHMD5ANDRC2","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndRC2");  put("Cipher.PBEWITHSHA1ANDDES","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndDES");  put("Cipher.BROKENPBEWITHSHA1ANDDES","org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES");  put("Cipher.PBEWITHSHA1ANDRC2","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndRC2");  put("Cipher.PBEWITHSHAAND3-KEYTRIPLEDES-CBC","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES3Key");  put("Cipher.BROKENPBEWITHSHAAND3-KEYTRIPLEDES-CBC","org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES3Key");  put("Cipher.OLDPBEWITHSHAAND3-KEYTRIPLEDES-CBC","org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndDES3Key");  put("Cipher.PBEWITHSHAAND2-KEYTRIPLEDES-CBC","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES2Key");  put("Cipher.BROKENPBEWITHSHAAND2-KEYTRIPLEDES-CBC","org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES2Key");  put("Cipher.PBEWITHSHAAND128BITRC2-CBC","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd128BitRC2");  put("Cipher.PBEWITHSHAAND40BITRC2-CBC","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd40BitRC2");  put("Cipher.PBEWITHSHAAND128BITRC4","org.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd128BitRC4");  put("Cipher.PBEWITHSHAAND40BITRC4","org.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd40BitRC4");  put("Cipher.PBEWITHSHAANDTWOFISH-CBC","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndTwofish");  put("Cipher.OLDPBEWITHSHAANDTWOFISH-CBC","org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish");  put("Cipher.PBEWITHSHAANDIDEA-CBC","org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndIDEA");  put("Alg.Alias.Cipher.1.2.840.113549.1.12.1.1","PBEWITHSHAAND128BITRC4");  put("Alg.Alias.Cipher.1.2.840.113549.1.12.1.2","PBEWITHSHAAND40BITRC4");  put("Alg.Alias.Cipher.1.2.840.113549.1.12.1.3","PBEWITHSHAAND3-KEYTRIPLEDES-CBC");  put("Alg.Alias.Cipher.1.2.840.113549.1.12.1.4","PBEWITHSHAAND2-KEYTRIPLEDES-CBC");  put("Alg.Alias.Cipher.1.2.840.113549.1.12.1.5","PBEWITHSHAAND128BITRC2-CBC");  put("Alg.Alias.Cipher.1.2.840.113549.1.12.1.6","PBEWITHSHAAND40BITRC2-CBC");  put("KeyGenerator.DES","org.bouncycastle.jce.provider.JCEKeyGenerator$DES");  put("Alg.Alias.KeyGenerator.1.3.14.3.2.7","DES");  put("KeyGenerator.DESEDE","org.bouncycastle.jce.provider.JCEKeyGenerator$DESede");  put("KeyGenerator.1.2.840.113549.3.7","org.bouncycastle.jce.provider.JCEKeyGenerator$DESede3");  put("KeyGenerator.DESEDEWRAP","org.bouncycastle.jce.provider.JCEKeyGenerator$DESede");  put("KeyGenerator.SKIPJACK","org.bouncycastle.jce.provider.JCEKeyGenerator$Skipjack");  put("KeyGenerator.BLOWFISH","org.bouncycastle.jce.provider.JCEKeyGenerator$Blowfish");  put("KeyGenerator.TWOFISH","org.bouncycastle.jce.provider.JCEKeyGenerator$Twofish");  put("KeyGenerator.RC2","org.bouncycastle.jce.provider.JCEKeyGenerator$RC2");  put("KeyGenerator.1.2.840.113549.3.2","org.bouncycastle.jce.provider.JCEKeyGenerator$RC2");  put("KeyGenerator.RC4","org.bouncycastle.jce.provider.JCEKeyGenerator$RC4");  put("Alg.Alias.KeyGenerator.ARC4","RC4");  put("Alg.Alias.KeyGenerator.1.2.840.113549.3.4","RC4");  put("KeyGenerator.RC5","org.bouncycastle.jce.provider.JCEKeyGenerator$RC5");  put("Alg.Alias.KeyGenerator.RC5-32","RC5");  put("KeyGenerator.RC5-64","org.bouncycastle.jce.provider.JCEKeyGenerator$RC564");  put("KeyGenerator.RC6","org.bouncycastle.jce.provider.JCEKeyGenerator$RC6");  put("KeyGenerator.RIJNDAEL","org.bouncycastle.jce.provider.JCEKeyGenerator$Rijndael");  put("KeyGenerator.AES","org.bouncycastle.jce.provider.JCEKeyGenerator$AES");  put("KeyGenerator.2.16.840.1.101.3.4.2","org.bouncycastle.jce.provider.JCEKeyGenerator$AES128");  put("KeyGenerator.2.16.840.1.101.3.4.22","org.bouncycastle.jce.provider.JCEKeyGenerator$AES192");  put("KeyGenerator.2.16.840.1.101.3.4.42","org.bouncycastle.jce.provider.JCEKeyGenerator$AES256");  put("KeyGenerator.2.16.840.1.101.3.4.1.2","org.bouncycastle.jce.provider.JCEKeyGenerator$AES128");  put("KeyGenerator.2.16.840.1.101.3.4.1.22","org.bouncycastle.jce.provider.JCEKeyGenerator$AES192");  put("KeyGenerator.2.16.840.1.101.3.4.1.42","org.bouncycastle.jce.provider.JCEKeyGenerator$AES256");  put("KeyGenerator.AESWRAP","org.bouncycastle.jce.provider.JCEKeyGenerator$AES");  put("KeyGenerator.SERPENT","org.bouncycastle.jce.provider.JCEKeyGenerator$Serpent");  put("KeyGenerator.CAST5","org.bouncycastle.jce.provider.JCEKeyGenerator$CAST5");  put("KeyGenerator.1.2.840.113533.7.66.10","org.bouncycastle.jce.provider.JCEKeyGenerator$CAST5");  put("KeyGenerator.CAST6","org.bouncycastle.jce.provider.JCEKeyGenerator$CAST6");  put("KeyGenerator.IDEA","org.bouncycastle.jce.provider.JCEKeyGenerator$IDEA");  put("KeyGenerator.1.3.6.1.4.1.188.7.1.1.2","org.bouncycastle.jce.provider.JCEKeyGenerator$IDEA");  put("KeyGenerator.HMACMD2","org.bouncycastle.jce.provider.JCEKeyGenerator$MD2HMAC");  put("KeyGenerator.HMACMD4","org.bouncycastle.jce.provider.JCEKeyGenerator$MD4HMAC");  put("KeyGenerator.HMACMD5","org.bouncycastle.jce.provider.JCEKeyGenerator$MD5HMAC");  put("KeyGenerator.HMACRIPEMD128","org.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC");  put("KeyGenerator.HMACRIPEMD160","org.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD160HMAC");  put("KeyGenerator.HMACSHA1","org.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA1");  put("KeyGenerator.HMACTIGER","org.bouncycastle.jce.provider.JCEKeyGenerator$HMACTIGER");  put("KeyPairGenerator.RSA","org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA");  put("KeyPairGenerator.DH","org.bouncycastle.jce.provider.JDKKeyPairGenerator$DH");  put("KeyPairGenerator.DSA","org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA");  put("KeyPairGenerator.ELGAMAL","org.bouncycastle.jce.provider.JDKKeyPairGenerator$ElGamal");  put("KeyPairGenerator.ECDSA","org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDSA");  put("KeyPairGenerator.ECDH","org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDH");  put("KeyPairGenerator.ECDHC","org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDHC");  put("KeyPairGenerator.ECIES","org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDH");  put("Alg.Alias.KeyPairGenerator.1.2.840.113549.1.1.1","RSA");  put("KeyFactory.RSA","org.bouncycastle.jce.provider.JDKKeyFactory$RSA");  put("KeyFactory.DH","org.bouncycastle.jce.provider.JDKKeyFactory$DH");  put("KeyFactory.DSA","org.bouncycastle.jce.provider.JDKKeyFactory$DSA");  put("KeyFactory.ELGAMAL","org.bouncycastle.jce.provider.JDKKeyFactory$ElGamal");  put("KeyFactory.ElGamal","org.bouncycastle.jce.provider.JDKKeyFactory$ElGamal");  put("KeyFactory.EC","org.bouncycastle.jce.provider.JDKKeyFactory$EC");  put("KeyFactory.ECDSA","org.bouncycastle.jce.provider.JDKKeyFactory$ECDSA");  put("KeyFactory.ECDH","org.bouncycastle.jce.provider.JDKKeyFactory$ECDH");  put("KeyFactory.ECDHC","org.bouncycastle.jce.provider.JDKKeyFactory$ECDHC");  put("Alg.Alias.KeyFactory.1.2.840.113549.1.1.1","RSA");  put("Alg.Alias.KeyFactory.1.2.840.10040.4.1","DSA");  put("AlgorithmParameters.DES","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("Alg.Alias.AlgorithmParameters.1.3.14.3.2.7","DES");  put("AlgorithmParameters.DESEDE","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.1.2.840.113549.3.7","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.RC2","org.bouncycastle.jce.provider.JDKAlgorithmParameters$RC2AlgorithmParameters");  put("AlgorithmParameters.1.2.840.113549.3.2","org.bouncycastle.jce.provider.JDKAlgorithmParameters$RC2AlgorithmParameters");  put("AlgorithmParameters.RC5","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.RC6","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.IDEA","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IDEAAlgorithmParameters");  put("AlgorithmParameters.BLOWFISH","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.TWOFISH","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.SKIPJACK","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.RIJNDAEL","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("AlgorithmParameters.AES","org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters");  put("Alg.Alias.AlgorithmParameters.2.16.840.1.101.3.4.2","AES");  put("Alg.Alias.AlgorithmParameters.2.16.840.1.101.3.4.22","AES");  put("Alg.Alias.AlgorithmParameters.2.16.840.1.101.3.4.42","AES");  put("Alg.Alias.AlgorithmParameters.2.16.840.1.101.3.4.1.2","AES");  put("Alg.Alias.AlgorithmParameters.2.16.840.1.101.3.4.1.22","AES");  put("Alg.Alias.AlgorithmParameters.2.16.840.1.101.3.4.1.42","AES");  put("SecretKeyFactory.PBE/PKCS5","org.bouncycastle.jce.provider.JCESecretKeyFactory$PBE_PKCS5");  put("SecretKeyFactory.PBE/PKCS12","org.bouncycastle.jce.provider.JCESecretKeyFactory$PBE_PKCS12");  put("SecretKeyFactory.DES","org.bouncycastle.jce.provider.JCESecretKeyFactory$DES");  put("SecretKeyFactory.DESEDE","org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede");  put("SecretKeyFactory.DESEDE","org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede");  put("Alg.Alias.SecretKeyFactory.PBE","PBE/PKCS5");  put("Alg.Alias.SecretKeyFactory.PBEWITHMD5ANDDES","PBE/PKCS5");  put("Alg.Alias.SecretKeyFactory.BROKENPBEWITHMD5ANDDES","PBE/PKCS5");  put("Alg.Alias.SecretKeyFactory.PBEWITHMD5ANDRC2","PBE/PKCS5");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHA1ANDDES","PBE/PKCS5");  put("Alg.Alias.SecretKeyFactory.BROKENPBEWITHSHA1ANDDES","PBE/PKCS5");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHA1ANDRC2","PBE/PKCS5");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAAND3-KEYTRIPLEDES-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.OLDPBEWITHSHAAND3-KEYTRIPLEDES-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.BROKENPBEWITHSHAAND3-KEYTRIPLEDES-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAAND2-KEYTRIPLEDES-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.BROKENPBEWITHSHAAND2-KEYTRIPLEDES-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAAND128BITRC4","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAAND40BITRC4","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAAND128BITRC2-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAAND40BITRC2-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAANDTWOFISH-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.OLDPBEWITHSHAANDTWOFISH-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHSHAANDIDEA-CBC","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHHMACSHA","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.PBEWITHHMACRIPEMD160","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.1.2.840.113549.1.12.1.1","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.1.2.840.113549.1.12.1.2","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.1.2.840.113549.1.12.1.3","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.1.2.840.113549.1.12.1.4","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.1.2.840.113549.1.12.1.5","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.1.2.840.113549.1.12.1.6","PBE/PKCS12");  put("Alg.Alias.SecretKeyFactory.1.3.14.3.2.26","PBE/PKCS12");  put("Mac.DESMAC","org.bouncycastle.jce.provider.JCEMac$DES");  put("Alg.Alias.Mac.DES","DESMAC");  put("Mac.DESMAC/CFB8","org.bouncycastle.jce.provider.JCEMac$DESCFB8");  put("Alg.Alias.Mac.DES/CFB8","DESMAC/CFB8");  put("Mac.DESEDEMAC","org.bouncycastle.jce.provider.JCEMac$DESede");  put("Alg.Alias.Mac.DESEDE","DESEDEMAC");  put("Mac.DESEDEMAC/CFB8","org.bouncycastle.jce.provider.JCEMac$DESedeCFB8");  put("Alg.Alias.Mac.DESEDE/CFB8","DESEDEMAC/CFB8");  put("Mac.SKIPJACKMAC","org.bouncycastle.jce.provider.JCEMac$Skipjack");  put("Alg.Alias.Mac.SKIPJACK","SKIPJACKMAC");  put("Mac.SKIPJACKMAC/CFB8","org.bouncycastle.jce.provider.JCEMac$SkipjackCFB8");  put("Alg.Alias.Mac.SKIPJACK/CFB8","SKIPJACKMAC/CFB8");  put("Mac.IDEAMAC","org.bouncycastle.jce.provider.JCEMac$IDEA");  put("Alg.Alias.Mac.IDEA","IDEAMAC");  put("Mac.IDEAMAC/CFB8","org.bouncycastle.jce.provider.JCEMac$IDEACFB8");  put("Alg.Alias.Mac.IDEA/CFB8","IDEAMAC/CFB8");  put("Mac.RC2MAC","org.bouncycastle.jce.provider.JCEMac$RC2");  put("Alg.Alias.Mac.RC2","RC2MAC");  put("Mac.RC2MAC/CFB8","org.bouncycastle.jce.provider.JCEMac$RC2CFB8");  put("Alg.Alias.Mac.RC2/CFB8","RC2MAC/CFB8");  put("Mac.RC5MAC","org.bouncycastle.jce.provider.JCEMac$RC5");  put("Alg.Alias.Mac.RC5","RC5MAC");  put("Mac.RC5MAC/CFB8","org.bouncycastle.jce.provider.JCEMac$RC5CFB8");  put("Alg.Alias.Mac.RC5/CFB8","RC5MAC/CFB8");  put("Mac.HMACMD2","org.bouncycastle.jce.provider.JCEMac$MD2");  put("Alg.Alias.Mac.HMAC-MD2","HMACMD2");  put("Alg.Alias.Mac.HMAC/MD2","HMACMD2");  put("Mac.HMACMD4","org.bouncycastle.jce.provider.JCEMac$MD4");  put("Alg.Alias.Mac.HMAC-MD4","HMACMD4");  put("Alg.Alias.Mac.HMAC/MD4","HMACMD4");  put("Mac.HMACMD5","org.bouncycastle.jce.provider.JCEMac$MD5");  put("Alg.Alias.Mac.HMAC-MD5","HMACMD5");  put("Alg.Alias.Mac.HMAC/MD5","HMACMD5");  put("Mac.HMACRIPEMD128","org.bouncycastle.jce.provider.JCEMac$RIPEMD128");  put("Alg.Alias.Mac.HMAC-RIPEMD128","HMACRIPEMD128");  put("Alg.Alias.Mac.HMAC/RIPEMD128","HMACRIPEMD128");  put("Mac.HMACRIPEMD160","org.bouncycastle.jce.provider.JCEMac$RIPEMD160");  put("Alg.Alias.Mac.HMAC-RIPEMD160","HMACRIPEMD160");  put("Alg.Alias.Mac.HMAC/RIPEMD160","HMACRIPEMD160");  put("Mac.HMACSHA1","org.bouncycastle.jce.provider.JCEMac$SHA1");  put("Alg.Alias.Mac.HMAC-SHA1","HMACSHA1");  put("Alg.Alias.Mac.HMAC/SHA1","HMACSHA1");  put("Mac.HMACSHA256","org.bouncycastle.jce.provider.JCEMac$SHA256");  put("Alg.Alias.Mac.HMAC-SHA256","HMACSHA256");  put("Alg.Alias.Mac.HMAC/SHA256","HMACSHA256");  put("Mac.HMACSHA384","org.bouncycastle.jce.provider.JCEMac$SHA384");  put("Alg.Alias.Mac.HMAC-SHA384","HMACSHA384");  put("Alg.Alias.Mac.HMAC/SHA384","HMACSHA384");  put("Mac.HMACSHA512","org.bouncycastle.jce.provider.JCEMac$SHA512");  put("Alg.Alias.Mac.HMAC-SHA512","HMACSHA512");  put("Alg.Alias.Mac.HMAC/SHA512","HMACSHA512");  put("Mac.HMACTiger","org.bouncycastle.jce.provider.JCEMac$Tiger");  put("Alg.Alias.Mac.HMAC-Tiger","HMACTiger");  put("Alg.Alias.Mac.HMAC/Tiger","HMACTiger");  put("Mac.PBEWITHHMACSHA","org.bouncycastle.jce.provider.JCEMac$PBEWithSHA");  put("Mac.PBEWITHHMACRIPEMD160","org.bouncycastle.jce.provider.JCEMac$PBEWithRIPEMD160");  put("Alg.Alias.Mac.1.3.14.3.2.26","PBEWITHHMACSHA");  put("MessageDigest.SHA-1","org.bouncycastle.jce.provider.JDKMessageDigest$SHA1");  put("Alg.Alias.MessageDigest.SHA1","SHA-1");  put("Alg.Alias.MessageDigest.SHA","SHA-1");  put("Alg.Alias.MessageDigest.1.3.14.3.2.26","SHA-1");  put("MessageDigest.SHA-256","org.bouncycastle.jce.provider.JDKMessageDigest$SHA256");  put("MessageDigest.SHA-384","org.bouncycastle.jce.provider.JDKMessageDigest$SHA384");  put("MessageDigest.SHA-512","org.bouncycastle.jce.provider.JDKMessageDigest$SHA512");  put("MessageDigest.MD2","org.bouncycastle.jce.provider.JDKMessageDigest$MD2");  put("MessageDigest.MD4","org.bouncycastle.jce.provider.JDKMessageDigest$MD4");  put("MessageDigest.MD5","org.bouncycastle.jce.provider.JDKMessageDigest$MD5");  put("MessageDigest.1.2.840.113549.2.5","org.bouncycastle.jce.provider.JDKMessageDigest$MD5");  put("MessageDigest.RIPEMD128","org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD128");  put("MessageDigest.RIPEMD160","org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD160");  put("MessageDigest.RIPEMD256","org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD256");  put("MessageDigest.RIPEMD320","org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD320");  put("MessageDigest.Tiger","org.bouncycastle.jce.provider.JDKMessageDigest$Tiger");  put("Signature.MD2WithRSAEncryption","org.bouncycastle.jce.provider.JDKDigestSignature$MD2WithRSAEncryption");  put("Signature.MD5WithRSAEncryption","org.bouncycastle.jce.provider.JDKDigestSignature$MD5WithRSAEncryption");  put("Signature.SHA1WithRSAEncryption","org.bouncycastle.jce.provider.JDKDigestSignature$SHA1WithRSAEncryption");  put("Signature.RIPEMD160WithRSAEncryption","org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD160WithRSAEncryption");  put("Signature.RIPEMD128WithRSAEncryption","org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD128WithRSAEncryption");  put("Signature.RIPEMD256WithRSAEncryption","org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD256WithRSAEncryption");  put("Signature.DSA","org.bouncycastle.jce.provider.JDKDSASigner$stdDSA");  put("Signature.ECDSA","org.bouncycastle.jce.provider.JDKDSASigner$ecDSA");  put("Signature.SHA1withRSA/ISO9796-2","org.bouncycastle.jce.provider.JDKISOSignature$SHA1WithRSAEncryption");  put("Signature.MD5withRSA/ISO9796-2","org.bouncycastle.jce.provider.JDKISOSignature$MD5WithRSAEncryption");  put("Signature.RIPEMD160withRSA/ISO9796-2","org.bouncycastle.jce.provider.JDKISOSignature$RIPEMD160WithRSAEncryption");  put("Signature.SHA1withRSA/PSS","org.bouncycastle.jce.provider.JDKPSSSigner$SHA1withRSA");  put("Signature.SHA256withRSA/PSS","org.bouncycastle.jce.provider.JDKPSSSigner$SHA256withRSA");  put("Signature.SHA384withRSA/PSS","org.bouncycastle.jce.provider.JDKPSSSigner$SHA384withRSA");  put("Signature.SHA512withRSA/PSS","org.bouncycastle.jce.provider.JDKPSSSigner$SHA512withRSA");  put("Alg.Alias.Signature.MD2withRSAEncryption","MD2WithRSAEncryption");  put("Alg.Alias.Signature.MD5withRSAEncryption","MD5WithRSAEncryption");  put("Alg.Alias.Signature.SHA1withRSAEncryption","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.SHA256withRSAEncryption","SHA256withRSA/PSS");  put("Alg.Alias.Signature.SHA384withRSAEncryption","SHA384withRSA/PSS");  put("Alg.Alias.Signature.SHA512withRSAEncryption","SHA512withRSA/PSS");  put("Alg.Alias.Signature.SHA256WithRSAEncryption","SHA256withRSA/PSS");  put("Alg.Alias.Signature.SHA384WithRSAEncryption","SHA384withRSA/PSS");  put("Alg.Alias.Signature.SHA512WithRSAEncryption","SHA512withRSA/PSS");  put("Alg.Alias.Signature.SHA256WITHRSAENCRYPTION","SHA256withRSA/PSS");  put("Alg.Alias.Signature.SHA384WITHRSAENCRYPTION","SHA384withRSA/PSS");  put("Alg.Alias.Signature.SHA512WITHRSAENCRYPTION","SHA512withRSA/PSS");  put("Alg.Alias.Signature.RIPEMD160withRSAEncryption","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.1.2.840.113549.1.1.2","MD2WithRSAEncryption");  put("Alg.Alias.Signature.MD2WithRSA","MD2WithRSAEncryption");  put("Alg.Alias.Signature.MD2withRSA","MD2WithRSAEncryption");  put("Alg.Alias.Signature.MD2/RSA","MD2WithRSAEncryption");  put("Alg.Alias.Signature.MD5WithRSA","MD5WithRSAEncryption");  put("Alg.Alias.Signature.MD5withRSA","MD5WithRSAEncryption");  put("Alg.Alias.Signature.MD5/RSA","MD5WithRSAEncryption");  put("Alg.Alias.Signature.1.2.840.113549.1.1.4","MD5WithRSAEncryption");  put("Alg.Alias.Signature.SHA1WithRSA","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.SHA1withRSA","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.SHA1/RSA","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.SHA-1/RSA","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.1.2.840.113549.1.1.5","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.113549.1.1.1","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.113549.1.1.5","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.1.2.840.113549.2.5with1.2.840.113549.1.1.1","MD5WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD160WithRSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD160withRSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD128WithRSA","RIPEMD128WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD128withRSA","RIPEMD128WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD256WithRSA","RIPEMD256WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD256withRSA","RIPEMD256WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD-160/RSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.RMD160withRSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.RMD160/RSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.1.3.36.3.3.1.2","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.1.3.36.3.3.1.3","RIPEMD128WithRSAEncryption");  put("Alg.Alias.Signature.1.3.36.3.3.1.4","RIPEMD256WithRSAEncryption");  put("Alg.Alias.Signature.MD2WITHRSAENCRYPTION","MD2WithRSAEncryption");  put("Alg.Alias.Signature.MD5WITHRSAENCRYPTION","MD5WithRSAEncryption");  put("Alg.Alias.Signature.SHA1WITHRSAENCRYPTION","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD160WITHRSAENCRYPTION","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.MD5WITHRSA","MD5WithRSAEncryption");  put("Alg.Alias.Signature.SHA1WITHRSA","SHA1WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD160WITHRSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.RMD160WITHRSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.RIPEMD160WITHRSA","RIPEMD160WithRSAEncryption");  put("Alg.Alias.Signature.SHA1withECDSA","ECDSA");  put("Alg.Alias.Signature.ECDSAwithSHA1","ECDSA");  put("Alg.Alias.Signature.SHA1WITHECDSA","ECDSA");  put("Alg.Alias.Signature.ECDSAWITHSHA1","ECDSA");  put("Alg.Alias.Signature.SHA1WithECDSA","ECDSA");  put("Alg.Alias.Signature.ECDSAWithSHA1","ECDSA");  put("Alg.Alias.Signature.1.2.840.10045.4.1","ECDSA");  put("Alg.Alias.Signature.SHA/DSA","DSA");  put("Alg.Alias.Signature.SHA1withDSA","DSA");  put("Alg.Alias.Signature.SHA1WITHDSA","DSA");  put("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.10040.4.1","DSA");  put("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.10040.4.3","DSA");  put("Alg.Alias.Signature.DSAwithSHA1","DSA");  put("Alg.Alias.Signature.DSAWITHSHA1","DSA");  put("Alg.Alias.Signature.SHA1WithDSA","DSA");  put("Alg.Alias.Signature.DSAWithSHA1","DSA");  put("Alg.Alias.Signature.1.2.840.10040.4.3","DSA");  put("Alg.Alias.Signature.MD5WithRSA/ISO9796-2","MD5withRSA/ISO9796-2");  put("Alg.Alias.Signature.SHA1WithRSA/ISO9796-2","SHA1withRSA/ISO9796-2");  put("Alg.Alias.Signature.RIPEMD160WithRSA/ISO9796-2","RIPEMD160withRSA/ISO9796-2");  put("CertPathValidator.PKIX","org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi");  put("CertPathValidator.PKIX ValidationAlgorithm","RFC2459");  put("CertPathBuilder.PKIX","org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi");  put("CertPathBuilder.PKIX ValidationAlgorithm","RFC2459");  put("CertStore.Collection","org.bouncycastle.jce.provider.CertStoreCollectionSpi");}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  public void onDestroy(){  this.stop();}  }
class C{  public long key(){  return _map._set[_index];}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public void removeCommandClass(CommandClass commandClass){  supportedCommandClasses.remove(commandClass);}  }
class C{  public void drawChartTransposed(Graphics2D gc){  int x0=2;  int x1=getWidth() - 2;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Updating coordinates...",20,20);    return;  }  if (rTree.size() == 0)   return;  Rectangle deviceBBox=new Rectangle(x0,y1,x1 - x0,y0 - y1);  deviceBBox.x+=deviceBBox.width / 2;  deviceBBox.y+=deviceBBox.height / 2;  Rectangle worldBBox=new Rectangle();  rTree.getBoundingBox(worldBBox);  worldBBox.x+=worldBBox.width / 2;  worldBBox.y+=worldBBox.height / 2;  double xFactor=deviceBBox.width / (double)worldBBox.width;  double yFactor=deviceBBox.height / (double)worldBBox.height;  if (xFactor > 1)   xFactor=1;  if (yFactor > 1)   yFactor=1;  double factor=Math.min(xFactor,yFactor);  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  for (Iterator<Pair<Rectangle2D,Pair<String,Integer>>> it=rTree.iterator(); it.hasNext(); ) {    Pair<Rectangle2D,Pair<String,Integer>> pair=it.next();    Rectangle2D rect=pair.get1();    String label=pair.get2().get1();    Integer fontSize=(int)(factor * pair.get2().get2());    if (fontSize >= 1) {      gc.setFont(getFontForSize(fontSize));      Color color=getFontColor(ChartViewer.FontKeys.DrawFont.toString(),null);      if (color == null)       color=getChartColors().getSampleColor(label);      gc.setColor(color);      double x=rect.getX();      double y=rect.getY() + rect.getHeight();      x=factor * (x - worldBBox.x) + deviceBBox.x;      y=factor * (y - worldBBox.y) + deviceBBox.y;      if (sgc != null)       sgc.setCurrentItem(new String[]{label,null});      gc.drawString(label,(int)Math.round(x),(int)Math.round(y));      if (sgc != null)       sgc.clearCurrentItem();      if (getChartData().getChartSelection().isSelected(label,null)) {        Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();        gc.setStroke(HEAVY_STROKE);        gc.setColor(ProgramProperties.SELECTION_COLOR);        drawRect(gc,x,y,labelSize.width,labelSize.height,0);        gc.setStroke(NORMAL_STROKE);      }    }  }}  }
class C{  private FileUtil(){}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  public EventPoller<E> newPoller(Sequence... gatingSequences){  return sequencer.newPoller(this,gatingSequences);}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public EnterMonitorStmt newEnterMonitorStmt(Value op){  return new JEnterMonitorStmt(op);}  }
class C{  public boolean isConnected(Direction direction){  return mConstraintWidget.getAnchor(lookupType(direction)).isConnected();}  }
class C{  private void onDying(){  mCache.dropObservables(mUUID);}  }
class C{  public static boolean hasKitkat(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  private void upgradeTable(){  if (hasNewUniqueOrNotNullColumn()) {    createOrUpgradeTable(mTableModel,mDb,true);    Collection<AssociationsInfo> associationsInfo=getAssociationInfo(mTableModel.getClassName());    for (    AssociationsInfo info : associationsInfo) {      if (info.getAssociationType() == Const.Model.MANY_TO_ONE || info.getAssociationType() == Const.Model.ONE_TO_ONE) {        if (info.getClassHoldsForeignKey().equalsIgnoreCase(mTableModel.getClassName())) {          String associatedTableName=DBUtility.getTableNameByClassName(info.getAssociatedClassName());          addForeignKeyColumn(mTableModel.getTableName(),associatedTableName,mTableModel.getTableName(),mDb);        }      }    }  } else {    hasConstraintChanged=false;    removeColumns(findColumnsToRemove());    addColumns(findColumnsToAdd());    changeColumnsType(findColumnTypesToChange());    changeColumnsConstraints();  }}  }
class C{  public static Map<RType,Set<RDotTxtEntry>> readRTxt(String rTxtFullFilename){  Map<RType,Set<RDotTxtEntry>> rTypeResourceMap=new HashMap<RType,Set<RDotTxtEntry>>();  if (StringUtil.isNotBlank(rTxtFullFilename) && FileUtil.isExist(rTxtFullFilename)) {    BufferedReader bufferedReader=null;    try {      final Pattern textSymbolLine=Pattern.compile("(\\S+) (\\S+) (\\S+) (.+)");      bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream(rTxtFullFilename)));      String line=null;      while ((line=bufferedReader.readLine()) != null) {        Matcher matcher=textSymbolLine.matcher(line);        if (matcher.matches()) {          IdType idType=IdType.from(matcher.group(1));          RType rType=RType.valueOf(matcher.group(2).toUpperCase());          String name=matcher.group(3);          String idValue=matcher.group(4);          RDotTxtEntry rDotTxtEntry=new RDotTxtEntry(idType,rType,name,idValue);          Set<RDotTxtEntry> hashSet=null;          if (rTypeResourceMap.containsKey(rType)) {            hashSet=rTypeResourceMap.get(rType);          } else {            hashSet=new HashSet<RDotTxtEntry>();            rTypeResourceMap.put(rType,hashSet);          }          hashSet.add(rDotTxtEntry);        }      }    } catch (    Exception e) {      e.printStackTrace();    } finally {      if (bufferedReader != null) {        try {          bufferedReader.close();        } catch (        Exception e) {          e.printStackTrace();        }      }    }  }  return rTypeResourceMap;}  }
class C{  public int double_set_new(){  String s=soot.PhaseOptions.getString(options,"double-set-new");  if (s.equalsIgnoreCase("hash"))   return double_set_new_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_new_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_new_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_new_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_new_heintze;  if (s.equalsIgnoreCase("sharedlist"))   return double_set_new_sharedlist;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-new");}  }
class C{  static boolean isOutsideResourceTypeFolder(@NotNull DataContext context){  VirtualFile file=CommonDataKeys.VIRTUAL_FILE.getData(context);  if (file != null) {    if (!file.isDirectory()) {      file=file.getParent();    }    if (file != null && ResourceFolderType.getFolderType(file.getName()) != null) {      return false;    }  }  Module module=LangDataKeys.MODULE.getData(context);  if (module != null) {    return AndroidFacet.getInstance(module) != null;  }  PsiElement element=CommonDataKeys.PSI_ELEMENT.getData(context);  return element != null && AndroidFacet.getInstance(element) != null;}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Remove not supported");}  }
class C{  @Override public void addView(View child,int index,ViewGroup.LayoutParams params){  if (contentView == null) {    super.addView(child,index,params);  } else {    contentView.addView(child,index,params);  }}  }
class C{  public DatabaseGetSchoolsQuery(VkApiClient client,UserActor actor,int cityId){  super(client,"database.getSchools",GetSchoolsResponse.class);  accessToken(actor.getAccessToken());  cityId(cityId);}  }
class C{  public void registerObserver(SpinnerNotifyInterface observer){  observers.add(observer);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'BLACK_LIST' ("+ "'USER_ID' TEXT PRIMARY KEY NOT NULL ,"+ "'STATUS' TEXT,"+ "'TIMESTAMP' INTEGER);");}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode){  return makeValid(source,mode,true,null);}  }
class C{  public static void showCreateAircraft(android.support.v4.app.Fragment fragment,int requestCode){  Intent intent=new Intent(fragment.getContext(),CreateEditAircraftActivity.class);  fragment.startActivityForResult(intent,requestCode);}  }
class C{  protected Object newInitialFlow(){  return emptySet.clone();}  }
class C{  public void close(){  if (blk != null) {    tx.bufferMgr().unpin(currentBuff);    blk=null;    currentBuff=null;  }}  }
class C{  @Override public void error(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public void invalidate(final Long pId,final TagQualityStatus pReason,final String pDescription,final Timestamp pTimestamp){  final RuleBufferObject bufferObj;  LOG.trace(pId + " entering invalidate()");synchronized (BUFFER_LOCK) {    if (!RULE_OBJECT_BUF.containsKey(pId)) {      bufferObj=new RuleBufferObject(pId,null,pReason,pDescription,null,pTimestamp);      RULE_OBJECT_BUF.put(pId,bufferObj);    } else {      bufferObj=(RuleBufferObject)RULE_OBJECT_BUF.get(pId);      bufferObj.invalidate(pReason,pDescription,pTimestamp);    }    scheduleCacheUpdaterTask(pId);  }  LOG.trace(pId + " leaving invalidate()");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_UNBAN_SUCCESS(String value0){  return new SM_SYSTEM_MESSAGE(1300870,value0);}  }
class C{  public static void displayContextClassLoaderTree(){  Thread curThread=Thread.currentThread();  ClassLoader curClassLoader=curThread.getContextClassLoader();  displayClassLoaderTree(curClassLoader);}  }
class C{  public SamLocusIterator(final SamReader samReader){  this(samReader,null);}  }
class C{  private List<SymbolTypeConfig> readValueListConfig(Class<?> localisationClass,Class<?> panelId,XMLFieldConfigEnumValueList valueList){  List<SymbolTypeConfig> configList=new ArrayList<SymbolTypeConfig>();  for (  XMLFieldConfigEnumValue valueObj : valueList.getValue()) {    SymbolTypeConfig config=parseSymbolTypeConfig(localisationClass,panelId,valueObj);    configList.add(config);  }  return configList;}  }
class C{  private static boolean hasTies(double[] x,double[] y){  final HashSet<Double> values=new HashSet<Double>();  for (int i=0; i < x.length; i++) {    if (!values.add(x[i])) {      return true;    }  }  for (int i=0; i < y.length; i++) {    if (!values.add(y[i])) {      return true;    }  }  return false;}  }
class C{  @Override public String addSymbol(char[] buffer,int offset,int length){synchronized (fSymbolTable) {    return fSymbolTable.addSymbol(buffer,offset,length);  }}  }
class C{  public File showSaveDialog(){  return showDialog(null);}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public static void createParentDirectories(String path){  File targetFile=new File(path);  File parent=targetFile.getParentFile();  if (!parent.exists() && !parent.mkdirs()) {    throw new IllegalStateException("Couldn't create dir: " + parent);  }}  }
class C{  public WallUnpinQuery(VkApiClient client,UserActor actor,int postId){  super(client,"wall.unpin",OkResponse.class);  accessToken(actor.getAccessToken());  postId(postId);}  }
class C{  private void initWidget(){  this.handler=new SafeHandler<>(this);  this.timer=new Timer();  SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_download_manage_swipeBackLayout);  swipeBackLayout.setOnSwipeListener(this);  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_download_manage_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  boolean openByNotification=getIntent().getBooleanExtra(EXTRA_NOTIFICATION,false);  Toolbar toolbar=(Toolbar)findViewById(R.id.activity_download_manage_toolbar);  if (Mysplash.getInstance().isLightTheme()) {    if (openByNotification) {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_light);    } else {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);    }    toolbar.inflateMenu(R.menu.activity_download_manage_toolbar_light);  } else {    if (openByNotification) {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_dark);    } else {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);    }    toolbar.inflateMenu(R.menu.activity_download_manage_toolbar_dark);  }  toolbar.setNavigationOnClickListener(this);  toolbar.setOnMenuItemClickListener(this);  this.container=(CoordinatorLayout)findViewById(R.id.activity_download_manage_container);  this.recyclerView=(RecyclerView)findViewById(R.id.activity_download_manage_recyclerView);  recyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));  recyclerView.setAdapter(adapter);}  }
class C{  public static SortedMap<EnumSet<HashSupport>,HashProvider> search(HashParameters params){  return search(params,EnumSet.of(HashSupport.STATEFUL));}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    Symbolizer symbolizer=SelectedSymbol.getInstance().getSymbolizer();    if (symbolizer instanceof PointSymbolizer) {      PointSymbolizerImpl newPointSymbolizer=(PointSymbolizerImpl)symbolizer;      Graphic graphic=getGraphic();      newPointSymbolizer.setGraphic(graphic);    } else     if (symbolizer instanceof PolygonSymbolizer) {      PolygonSymbolizerImpl newPolygonSymbolizer=(PolygonSymbolizerImpl)symbolizer;      Fill fill=symbolTypeFactory.getFill(getGraphicFill(),this.fieldConfigManager);      newPolygonSymbolizer.setFill(fill);      if (vendorOptionFillFactory != null) {        vendorOptionFillFactory.updateSymbol(newPolygonSymbolizer);      }    }    this.fireUpdateSymbol();  }}  }
class C{  protected VirtualFile createFile(String filePath){  return testFixture.getTempDirFixture().createFile(filePath);}  }
class C{  public NullnessAssumptionAnalysis(UnitGraph graph){  super(graph);  doAnalysis();}  }
class C{  public UsersGetSubscriptionsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  @POST @Timed @Path("/dimensions/{dimensionName}/dimensionRows") @Consumes("application/json; charset=utf-8") public Response addReplaceDimensionRows(@PathParam("dimensionName") String dimensionName,String json){  LOG.debug("Replacing {} dimension rows with a json payload {} characters long",dimensionName,json.length());  Map<String,LinkedHashSet<LinkedHashMap<String,String>>> dimensionRows;  try {    Dimension dimension=dimensionDictionary.findByApiName(dimensionName);    if (dimension == null) {      LOG.error("Missing dimensionRows for dimension: {}",dimensionName);      return Response.status(BAD_REQUEST).build();    }    dimensionRows=mapper.readValue(json,new TypeReference<Map<String,LinkedHashSet<LinkedHashMap<String,String>>>>(){    });    Set<DimensionRow> drs=dimensionRows.get("dimensionRows").stream().map(null).collect(Collectors.toCollection(null));    dimension.addAllDimensionRows(drs);  } catch (  IOException e) {    LOG.error("Failed to add/replace dimension rows: {}",e);    return Response.status(BAD_REQUEST).build();  }  int dimensionRowsSize=dimensionRows.get("dimensionRows").size();  LOG.info("Successfully added/replaced {} row(s) for dimension: {}",dimensionRowsSize,dimensionName);  return Response.status(Status.OK).build();}  }
class C{  private void initDictionaryCacheInfo(List<String> dictionaryKeys,List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers,Cache reverseDictionaryCache,String carbonStorePath) throws KettleException {  long lruCacheStartTime=System.currentTimeMillis();  try {    List reverseDictionaries=reverseDictionaryCache.getAll(dictionaryColumnUniqueIdentifiers);    for (int i=0; i < reverseDictionaries.size(); i++) {      Dictionary reverseDictionary=(Dictionary)reverseDictionaries.get(i);      getDictionaryCaches().put(dictionaryKeys.get(i),reverseDictionary);      updateMaxKeyInfo(dictionaryKeys.get(i),reverseDictionary.getDictionaryChunks().getSize());    }    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordLruCacheLoadTime((System.currentTimeMillis() - lruCacheStartTime) / 1000.0);  } catch (  CarbonUtilException e) {    throw new KettleException(e.getMessage());  }}  }
class C{  private Literal buildLiteral(){  NumericLiteral literal;  setDigits(buf.toString().toLowerCase());  if (!floating) {    if (!whole)     return syntaxError("at least one digit is required");    if (kind == DECIMAL) {      if (digits.charAt(0) == '0') {        kind=OCTAL;        for (int idx=1; idx < digits.length(); ++idx) {          char c=digits.charAt(idx);          if (c < '0' || c > '7')           return unexpectedCharacter(c);        }      }    }    if (isLong)     literal=new LongLiteral(getLITERAL()); else     literal=new IntegerLiteral(getLITERAL());  } else {    if (kind == HEXADECIMAL && !exponent)     return syntaxError("exponent is required");    if (!(whole || fraction))     return syntaxError("at least one digit is required in " + "either the whole or fraction part");    if (kind == HEXADECIMAL)     digits="0x" + digits;    if (isFloat)     literal=new FloatingPointLiteral(getLITERAL()); else     literal=new DoubleLiteral(getLITERAL());  }  literal.setDigits(getDigits());  literal.setKind(getKind());  return literal;}  }
class C{  public void writeInt(int value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeInt(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  @Override public void tableChanged(TableModelEvent arg0){  if (!isPopulatingTable()) {    dataChanged=true;    updateButtonState();  }}  }
class C{  @Override public void printStackTrace(PrintStream out){synchronized (out) {    PrintWriter pw=new PrintWriter(out,false);    printStackTrace(pw);    pw.flush();  }}  }
class C{  public static void storeBreakpadUploadStatsInUma(ChromePreferenceManager pref){  for (int success=pref.getBreakpadUploadSuccessCount(); success > 0; success--) {    RecordUserAction.record("MobileBreakpadUploadSuccess");  }  for (int fail=pref.getBreakpadUploadFailCount(); fail > 0; fail--) {    RecordUserAction.record("MobileBreakpadUploadFail");  }  pref.setBreakpadUploadSuccessCount(0);  pref.setBreakpadUploadFailCount(0);}  }
class C{  public DataSourceProperties(DataSourceConnectorInterface dsc){  this.dsc=dsc;}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  default void writeAttribute(NamespaceManager ns,int attribute,DataValue value,String indexRange) throws UaException {  Optional<AttributeId> attributeId=AttributeId.from(attribute);  if (attributeId.isPresent()) {    writeAttribute(ns,attributeId.get(),value,indexRange);  } else {    throw new UaException(StatusCodes.Bad_AttributeIdInvalid);  }}  }
class C{  public static boolean isIgnorePartialFailure(int mod){  return Modifiers.contains(mod,IGNORE_PARTIAL_FAILURE);}  }
class C{  private void doWrite(List<String> args) throws DumpUsageException {  String usagePrefix="Usage: prefs write <path> <key> <type> <value>, where type is one of: ";  Iterator<String> argsIter=args.iterator();  String path=nextArg(argsIter,"Expected <path>");  String key=nextArg(argsIter,"Expected <key>");  String typeName=nextArg(argsIter,"Expected <type>");  Type type=Type.of(typeName);  if (type == null) {    throw new DumpUsageException(Type.appendNamesList(new StringBuilder(usagePrefix),", ").toString());  }  SharedPreferences sharedPreferences=getSharedPreferences(path);  SharedPreferences.Editor editor=sharedPreferences.edit();switch (type) {case BOOLEAN:    editor.putBoolean(key,Boolean.valueOf(nextArgValue(argsIter)));  break;case INT:editor.putInt(key,Integer.valueOf(nextArgValue(argsIter)));break;case LONG:editor.putLong(key,Long.valueOf(nextArgValue(argsIter)));break;case FLOAT:editor.putFloat(key,Float.valueOf(nextArgValue(argsIter)));break;case STRING:editor.putString(key,nextArgValue(argsIter));break;case SET:putStringSet(editor,key,argsIter);break;}editor.commit();}  }
class C{  public void printResult(PrintStream output,String title,Histogram other){  output.println(title);  if (count == 0) {    output.println("No samples are inserted, no output!");    return;  }  output.println("Samples : " + count + " ("+ other.count+ ")");  for (int i=0; i < results.length; i++) {    if (i == 0)     output.printf("<= %d: %d (%d)",limits[0],results[i],other.results[i]); else     if (i == results.length - 1) {      output.printf("> %d: %d (%d)",limits[limits.length - 1],results[i],other.results[i]);    } else {      output.printf("%d < x <= %d: %d (%d)",limits[i - 1],limits[i],results[i],other.results[i]);    }    output.printf(", percentage = %.2f%% (%.2f%%) \n",(double)results[i] * 100 / count,(double)other.results[i] * 100 / other.count);  }  output.println();}  }
class C{  @Override public Scan open(){  Scan s=p.open();  return new ProjectScan(s,schema.fields());}  }
class C{  static IndexPredicateAnalyzer newIndexPredicateAnalyzer(String keyColumnName){  IndexPredicateAnalyzer analyzer=new IndexPredicateAnalyzer();  analyzer.addComparisonOp("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual");  analyzer.clearAllowedColumnNames();  analyzer.allowColumnName(keyColumnName);  return analyzer;}  }
class C{  public void sendPacket(String... datas){  String packet=new String();  packet=packet.concat(Settings.sSenderSplitProtocolToken);  for (int i=0; i < datas.length; i++) {    packet=packet.concat(datas[i] + Settings.sSenderSplitProtocolToken);  }  packet=packet.concat(Settings.sSenderSplitMultipleToken);  send(packet);}  }
class C{  public static ExpectedCondition<Boolean> hasNodeProperty(final Session session,final String nodePath,final String propertyName){  LOG.debug("Checking if node '{}' has property '{}'",nodePath,propertyName);  return null;}  }
class C{  public void stream(long durationInMillis){  confettiManager.setNumInitialCount(0).setEmissionDuration(durationInMillis).setEmissionRate(50).animate();}  }
class C{  public EntropyChunker(){  sgOverallGraph=new SymbolicGraph(1,1);  clLocator=new EdgeCachedLocator(100);  smDelims=null;}  }
class C{  public ChiSquaredDistribution(double degreesOfFreedom,double inverseCumAccuracy){  super(inverseCumAccuracy);  gamma=new GammaDistribution(degreesOfFreedom / 2,2);}  }
class C{  public boolean isEmpty(){  return (geometryType == null) || segmentList.isEmpty();}  }
class C{  public static String toSootICAT(String type){  String r="";  String[] split1=type.split(";");  for (  String s : split1) {    if (s.startsWith("L"))     s=s.replaceFirst("L","");    if (s.startsWith("<L"))     s=s.replaceFirst("<L","<");    r+=s;  }  return r;}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  return this.request != null && request.cancel(mayInterruptIfRunning);}  }
class C{  protected BoardFixTopicQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @Override public void scrollToTop(){  view.scrollToTop();}  }
class C{  public static String formatDps(final double dps){  return "(" + String.format("%.2f",dps) + " dps)";}  }
class C{  public void onAccessibilityStatusChanged(boolean enabled){  if (enabled && (mNodeProvider == null)) {    mAccessibilityView=new View(getContext());    addView(mAccessibilityView);    mNodeProvider=new CompositorAccessibilityProvider(mAccessibilityView);    ViewCompat.setAccessibilityDelegate(mAccessibilityView,mNodeProvider);  }}  }
class C{  public KDTree(final int k){  this(k,0);}  }
class C{  public NewsfeedGetRecommendedQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public Builder streams(List<String> streams){  this._streams=streams;  return this;}  }
class C{  public VideoEditQuery privacyView(String... value){  return unsafeParam("privacy_view",value);}  }
class C{  public static ReactorCallAdapterFactory create(){  return new ReactorCallAdapterFactory(null);}  }
class C{  private void loadList(JComboBox cbox){  java.util.List<IDirector> projects=ProjectManager.getProjects();  TreeSet<InputDataItem> items=new TreeSet<>(new InputDataItem());  for (  IDirector project : projects) {    if (project instanceof Director) {      Director dir=(Director)project;      if (!dir.getMainViewer().isLocked() && dir.getDocument().getNumberOfReads() > 0 && !dir.getDocument().getMeganFile().isMeganSummaryFile()) {        items.add(new InputDataItem(dir));      }    }  }  for (  InputDataItem item : items) {    cbox.addItem(item);  }}  }
class C{  public static SparseGradient atan2(final SparseGradient y,final SparseGradient x){  return y.atan2(x);}  }
class C{  @Override protected synchronized Class<?> loadClass(String sClassName,boolean bResolve) throws ClassNotFoundException {  logDebug(LogArea.CLASS,"LOADING %s (resolve=%b)",sClassName,bResolve);  Thread.currentThread().setContextClassLoader(this);  Class<?> c=null;  try {    if (getClass().getName().equals(sClassName)) {      return JarClassLoader.class;    }    if (isLaunchedFromJar()) {      try {        c=findJarClass(sClassName);        return c;      } catch (      JarClassLoaderException e) {        if (e.getCause() == null) {          logDebug(LogArea.CLASS,"Not found %s in JAR by %s: %s",sClassName,getClass().getName(),e.getMessage());        } else {          logDebug(LogArea.CLASS,"Error loading %s in JAR by %s: %s",sClassName,getClass().getName(),e.getCause());        }      }    }    try {      ClassLoader cl=getParent();      c=cl.loadClass(sClassName);      logInfo(LogArea.CLASS,"Loaded %s by %s",sClassName,cl.getClass().getName());      return c;    } catch (    ClassNotFoundException e) {    }    throw new ClassNotFoundException("Failure to load: " + sClassName);  }  finally {    if (c != null && bResolve) {      resolveClass(c);    }  }}  }
class C{  private Doc evalParsingTime(Elem elem){  try {    return Values.convertToDoc(elem.eval(new Context(ImmutableMap.<SnippetKey,Snippet>of())));  } catch (  EvalException e) {    error("parsing time evaluation error: %s",e.getMessage());    return Doc.BREAK;  }}  }
class C{  public GConnection(String url,Properties properties) throws SQLException {  try {    if (!url.startsWith(JDBC_GIGASPACES_URL))     throw new IllegalArgumentException("Invalid Url [" + url + "] - does not start with "+ JDBC_GIGASPACES_URL);    this.url=url.substring(JDBC_GIGASPACES_URL.length());    this.space=(ISpaceProxy)SpaceFinder.find(this.url);    this.properties=properties;    initialize(space.getDirectProxy().getRemoteJSpace());  } catch (  Exception e) {    SQLException se=new SQLException("Error creating connection; Cause: " + e,"GSP",-137);    se.initCause(e);    throw se;  }}  }
class C{  public static File addExtension(File file,String extension){  if (extension.startsWith(".")) {    return new File(file.getAbsolutePath() + extension);  } else {    return new File(file.getAbsolutePath() + "." + extension);  }}  }
class C{  private boolean validateInviteUser(User user,HttpServletResponse response) throws WebMessageException {  if (!validateCreateUser(user,response)) {    return false;  }  UserCredentials credentials=user.getUserCredentials();  if (credentials == null) {    throw new WebMessageException(WebMessageUtils.conflict("User credentials is not present"));  }  credentials.setUserInfo(user);  String valid=securityService.validateInvite(user.getUserCredentials());  if (valid != null) {    throw new WebMessageException(WebMessageUtils.conflict(valid + ": " + user.getUserCredentials()));  }  return true;}  }
class C{  public void removeChangeListener(ChangeListener cl){  listeners.remove(cl);}  }
class C{  private Canvas beginRecordingPicture(int imageWidth,int imageHeight){  if (targetWidth == 0 || targetHeight == 0) {    return picture.beginRecording(imageWidth,imageHeight);  } else {    Canvas canvas=picture.beginRecording(targetWidth,targetHeight);    prepareScaledCanvas(canvas,imageWidth,imageHeight);    return canvas;  }}  }
class C{  void createExistingProject(IProgressMonitor monitor) throws CoreException {  String projectName=project.getName();  IProjectDescription description;  try {    monitor.beginTask("Creating " + projectName,2 * 1000);    description=ResourcesPlugin.getWorkspace().loadProjectDescription(new Path(directory + File.separatorChar + ".project"));    description.setName(projectName);    project.create(description,new SubProgressMonitor(monitor,1000));    project.open(new SubProgressMonitor(monitor,1000));  }  finally {    monitor.done();  }}  }
class C{  private ItemApplication findApplicationInfoLocked(String packageName,String className){  for (  ItemApplication info : data) {    final ComponentName component=info.mIntent.getComponent();    if (packageName.equals(component.getPackageName()) && className.equals(component.getClassName())) {      return info;    }  }  return null;}  }
class C{  public void run(){  PrintStream pOut=null;  if (OutFile.length() != 0) {    try {      pOut=new PrintStream(OutFile);    } catch (    FileNotFoundException fnfe) {      System.err.println("Cannot output to selected file:\n" + fnfe.getMessage());      System.exit(1);    }  }  doOptimizedEval(OutputSemaphore,pOut,NMin,NMax,Dist,SummaryDir,ModelDir,Threads,DocumentClass,ComparatorClass,Silent,Progress);  if (pOut != null)   pOut.close();}  }
class C{  public static <T extends RealFieldElement<T>>T distanceInf(final Vector3D v1,final FieldVector3D<T> v2){  return v2.distanceInf(v1);}  }
class C{  public static String encodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length() * 3);  for (  char c : s.toCharArray()) {    if (c < 256) {      sb.append(c);    } else {      sb.append("\\u");      sb.append(Character.forDigit((c >>> 12) & 0xf,16));      sb.append(Character.forDigit((c >>> 8) & 0xf,16));      sb.append(Character.forDigit((c >>> 4) & 0xf,16));      sb.append(Character.forDigit((c) & 0xf,16));    }  }  return sb.toString();}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentHeight() > 10 && !mViewPortHandler.isFullyZoomedOutX()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentRight(),mViewPortHandler.contentTop());    if (!mYAxis.isInverted()) {      yMin=(float)p1.x;      yMax=(float)p2.x;    } else {      yMin=(float)p2.x;      yMax=(float)p1.x;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  public ScanStatus toScanStatus(){  List<ScanRangeStatus> pendingRangeStatuses=Lists.newArrayList();  int taskId=0;  int batchId=0;  int concurrencyId=0;  for (  PlanBatch batch : _clusterHeads.values()) {    Integer lastBatchId=null;    while (batch != null) {      List<PlanItem> items=batch.getItems();      if (!items.isEmpty()) {        Optional<Integer> blockingBatch=Optional.fromNullable(lastBatchId);        for (        PlanItem item : items) {          String placement=item.getPlacement();          Optional<Integer> concurrency=item.getScanRanges().size() > 1 ? Optional.of(concurrencyId++) : Optional.<Integer>absent();          for (          ScanRange scanRange : item.getScanRanges()) {            pendingRangeStatuses.add(new ScanRangeStatus(taskId++,placement,scanRange,batchId,blockingBatch,concurrency));          }        }        lastBatchId=batchId;        batchId++;      }      batch=batch.getNextBatch();    }  }  return new ScanStatus(_scanId,_options,false,new Date(),pendingRangeStatuses,ImmutableList.<ScanRangeStatus>of(),ImmutableList.<ScanRangeStatus>of());}  }
class C{  private static boolean isForbiddenBySequence(String name){  if (NameConfig.NAME_SEQUENCE_FORBIDDEN.equals("")) {    return false;  }  if (forbiddenSequences == null || forbiddenSequences.length == 0) {    forbiddenSequences=NameConfig.NAME_SEQUENCE_FORBIDDEN.toLowerCase().split(",");  }  for (  String s : forbiddenSequences) {    if (name.toLowerCase().contains(s)) {      return true;    }  }  return false;}  }
class C{  private void emitParticles(){switch (currentWeather) {case RAIN:    ps.emitWithGravity(this,Gravity.BOTTOM,rainParticles);  break;case SNOW:ps.emitWithGravity(this,Gravity.BOTTOM,snowParticles);break;default :break;}isPlaying=true;}  }
class C{  @NotNull public List<GradleCoordinate> findMissingDependencies(@NotNull Module module,@NotNull Iterable<GradleCoordinate> dependencies){  GradleBuildModel buildModel=GradleBuildModel.get(module);  if (buildModel == null) {    return Collections.emptyList();  }  return findMissingLibrariesFromGradleBuildFile(buildModel,dependencies);}  }
class C{  public static Object invokeStaticMethod(Class<?> clazz,String name) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  return invokeStaticMethod(clazz,name,null,null);}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_ITEM1(String value0){  return new SM_SYSTEM_MESSAGE(1390000,value0);}  }
class C{  private void extractProtocolFilter(){  int protocolIndex=this.matchTo.indexOf(PROTOCOL_ENDING);  if (protocolIndex != -1) {    this.protocolFilter=this.matchTo.substring(0,protocolIndex);    this.matchTo=this.matchTo.substring(protocolIndex + PROTOCOL_ENDING.length());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_CANT_RETURN_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400714,value0);}  }
class C{  public Boolean isReplicateNotifyTemplate(){  return replicateNotifyTemplate;}  }
class C{  @Override public List<Period> generateLast5Years(Date date){  Calendar calendar=getCalendar();  DateTimeUnit dateTimeUnit=createLocalDateUnitInstance(date);  dateTimeUnit=calendar.minusYears(dateTimeUnit,4);  dateTimeUnit.setDay(1);  dateTimeUnit.setMonth(1);  List<Period> periods=Lists.newArrayList();  for (int i=0; i < 5; ++i) {    periods.add(createPeriod(dateTimeUnit,calendar));    dateTimeUnit=calendar.plusYears(dateTimeUnit,1);  }  return periods;}  }
class C{  public <T extends Fragment>T into(T fragment){  fragment.setArguments(get());  return fragment;}  }
class C{  public static boolean instanceOf(Class<?> objectClass,String typeName){  return instanceOf(objectClass,typeName,null);}  }
class C{  public Optional<Message> can(@NotNull PermissionFlag action){  return Optional.ofNullable(mark(generalPermissions.get(action),action));}  }
class C{  public MarketDeleteAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int albumId){  super(client,"market.deleteAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  albumId(albumId);}  }
class C{  @Override public void onWebsocketMessageFragment(WebSocket conn,Framedata frame){}  }
class C{  public void updateStats(int fIdx,long count){synchronized (pq) {    frmtCount[fIdx]+=count;    Stats tmp=new Stats(fIdx,frmtCount[fIdx]);    pq.remove(tmp);    pq.offer(tmp);  }  if (LOG.isTraceEnabled()) {    LOG.trace("update forest " + fIdx);  }}  }
class C{  public Split split(final Arc arc){  final List<Double> minus=new ArrayList<Double>();  final List<Double> plus=new ArrayList<Double>();  final double reference=FastMath.PI + arc.getInf();  final double arcLength=arc.getSup() - arc.getInf();  for (  final double[] a : this) {    final double syncedStart=MathUtils.normalizeAngle(a[0],reference) - arc.getInf();    final double arcOffset=a[0] - syncedStart;    final double syncedEnd=a[1] - arcOffset;    if (syncedStart < arcLength) {      minus.add(a[0]);      if (syncedEnd > arcLength) {        final double minusToPlus=arcLength + arcOffset;        minus.add(minusToPlus);        plus.add(minusToPlus);        if (syncedEnd > MathUtils.TWO_PI) {          final double plusToMinus=MathUtils.TWO_PI + arcOffset;          plus.add(plusToMinus);          minus.add(plusToMinus);          minus.add(a[1]);        } else {          plus.add(a[1]);        }      } else {        minus.add(a[1]);      }    } else {      plus.add(a[0]);      if (syncedEnd > MathUtils.TWO_PI) {        final double plusToMinus=MathUtils.TWO_PI + arcOffset;        plus.add(plusToMinus);        minus.add(plusToMinus);        if (syncedEnd > MathUtils.TWO_PI + arcLength) {          final double minusToPlus=MathUtils.TWO_PI + arcLength + arcOffset;          minus.add(minusToPlus);          plus.add(minusToPlus);          plus.add(a[1]);        } else {          minus.add(a[1]);        }      } else {        plus.add(a[1]);      }    }  }  return new Split(createSplitPart(plus),createSplitPart(minus));}  }
class C{  private static BigInteger toBigInteger(BigDecimal value,boolean canBeNull){  if (canBeNull && value.signum() == 0) {    return null;  } else {    return value.unscaledValue();  }}  }
class C{  public void check() throws IOException {  boolean ok=false;  if (type != null) {    for (    AcceptableTypes acceptable : AcceptableTypes.values()) {      if (acceptable.toString().equalsIgnoreCase(type)) {        ok=true;        break;      }    }  }  if (!ok)   throw new IOException("type=" + type + ", must be one of: "+ Basic.toString(AcceptableTypes.values(),", ").replaceAll("_"," "));  ok=false;  if (matrix_type != null) {    for (    AcceptableMatrixTypes acceptable : AcceptableMatrixTypes.values()) {      if (acceptable.toString().equalsIgnoreCase(matrix_type)) {        ok=true;        break;      }    }  }  if (!ok)   throw new IOException("matrix_type=" + matrix_type + ", must be one of: "+ Basic.toString(AcceptableMatrixTypes.values(),", "));  ok=false;  if (matrix_element_type != null) {    for (    AcceptableMatrixElementTypes acceptable : AcceptableMatrixElementTypes.values()) {      if (acceptable.toString().equalsIgnoreCase(matrix_element_type)) {        ok=true;        break;      }    }  }  if (!ok)   throw new IOException("matrix_element_type=" + matrix_element_type + ", must be one of: "+ Basic.toString(AcceptableMatrixElementTypes.values(),", "));}  }
class C{  private void checkParameters(){  if (start != null) {    final int dim=start.length;    if (lowerBound != null) {      if (lowerBound.length != dim) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerBound.length,dim);      }      for (int i=0; i < dim; i++) {        final double v=start[i];        final double lo=lowerBound[i];        if (v < lo) {          throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,v,lo);        }      }    }    if (upperBound != null) {      if (upperBound.length != dim) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,upperBound.length,dim);      }      for (int i=0; i < dim; i++) {        final double v=start[i];        final double hi=upperBound[i];        if (v > hi) {          throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,v,hi);        }      }    }  }}  }
class C{  public GridLayout(String group,int nrows,int ncols){  super(group);  rows=nrows;  cols=ncols;  analyze=false;}  }
class C{  public static String[] convertStrings(List<String> strings){  String[] ret=new String[strings.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=strings.get(i);  }  return ret;}  }
class C{  public void addGroups(String[] newGroups) throws IOException {  testArrayForNullElement(newGroups);  checkGroups(newGroups);synchronized (registrars) {    if (terminated)     throw new IllegalStateException("discovery terminated");    if (groups == null)     throw new UnsupportedOperationException("can't add to \"any groups\"");    Collection req=new ArrayList(newGroups.length);    for (int i=0; i < newGroups.length; i++) {      if (groups.add(newGroups[i]))       req.add(newGroups[i]);    }    if (!req.isEmpty())     requestGroups(req);  }}  }
class C{  private Object convertUpdateResult(IEntryPacket oldPacket,IEntryPacket newPacket,Object newEntry,int modifiers){  Object oldEntry=null;  final boolean returnPacket=newPacket == newEntry;  if (oldPacket != null && oldPacket != DUMMY_PACKET) {    oldEntry=getObjectFromEntryPacket(oldPacket,QueryResultTypeInternal.getUpdateResultType(newPacket),returnPacket);    final boolean overrideVersion=Modifiers.contains(modifiers,Modifiers.OVERRIDE_VERSION);    if (returnPacket) {      if (!overrideVersion)       newPacket.setVersion(oldPacket.getVersion() + 1);    } else {      ITypeIntrospector introspector=oldPacket.getTypeDescriptor().getIntrospector(newPacket.getEntryType());      int version=overrideVersion ? newPacket.getVersion() : oldPacket.getVersion() + 1;      introspector.setEntryInfo(newEntry,oldPacket.getUID(),version,oldPacket.getTTL());    }  } else   if (UpdateModifiers.isUpdateOrWrite(modifiers) || UpdateModifiers.isWriteOnly(modifiers)) {    final int newVer=(!_proxy.isEmbedded() || _proxy.isClustered()) ? 1 : newPacket.getVersion();    _typeDescRepository.loadTypeDescToPacket(newPacket);    ITypeDesc typeDesc=newPacket.getTypeDescriptor();    if (returnPacket) {      if (oldPacket != null)       oldPacket.setTypeDesc(typeDesc,false);      newPacket.setVersion(newVer);      oldEntry=oldPacket;    } else {      typeDesc.getIntrospector(newPacket.getEntryType()).setEntryInfo(newEntry,newPacket.getUID(),newVer,newPacket.getTTL());    }  }  return oldEntry;}  }
class C{  public static boolean isDontKeepActivitiesEnabled(final Context context){  int alwaysFinishActivitiesInt;  if (Build.VERSION.SDK_INT >= 17) {    alwaysFinishActivitiesInt=Settings.System.getInt(context.getContentResolver(),Settings.Global.ALWAYS_FINISH_ACTIVITIES,0);  } else {    alwaysFinishActivitiesInt=Settings.System.getInt(context.getContentResolver(),Settings.System.ALWAYS_FINISH_ACTIVITIES,0);  }  return alwaysFinishActivitiesInt == 1;}  }
class C{  private void refineByAvailableAppraisalInfo(IVScanResult ivScanResult){  if (attCheckbox.isChecked() || defCheckbox.isChecked() || staCheckbox.isChecked()) {    ivScanResult.refineByHighest(attCheckbox.isChecked(),defCheckbox.isChecked(),staCheckbox.isChecked());  }  if (appraisalPercentageRange.getSelectedItemPosition() != 0) {    ivScanResult.refineByAppraisalPercentageRange(appraisalPercentageRange.getSelectedItemPosition());  }  if (appraisalIvRange.getSelectedItemPosition() != 0) {    ivScanResult.refineByAppraisalIVRange(appraisalIvRange.getSelectedItemPosition());  }}  }
class C{  public boolean has(String key,String value){  if (key == null) {    throw new NullPointerException("key");  }  if (value == null) {    throw new NullPointerException("value");  }synchronized (contexts) {    for (    Map.Entry<String,String> e : contexts) {      if (!e.getKey().equalsIgnoreCase(key)) {        continue;      }      if (!e.getValue().equals(value)) {        continue;      }      return true;    }  }  return false;}  }
class C{  @Override public final void writeMapleAsciiString(final String s){  writeShort((short)s.length());  writeAsciiString(s);}  }
class C{  public void write(byte[] bytes,int offset,int length) throws IOException {  outs.write(bytes,offset,length);  position+=length;}  }
class C{  public static boolean isEnabled(){  return enabledFlag.get();}  }
class C{  private void drawSolidProgress(Canvas canvas){  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f,false,mProgressBackgroundPaint);  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f * getProgress() / getMax(),true,mProgressPaint);}  }
class C{  protected void show(Activity activity,String helpContext,@Nonnull FeedbackCollector collector){  launchFallbackSupportUri(activity);}  }
class C{  public RenderPanelImpl(LayoutManager layout,boolean isDoubleBuffered){  super(layout,isDoubleBuffered);}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  protected AdsRemoveOfficeUsersQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public Bundler putFloat(String key,float value){  bundle.putFloat(key,value);  return this;}  }
class C{  protected int complement(int extra){  extra=RADIX - extra;  for (int i=0; i < mant.length; i++) {    mant[i]=RADIX - mant[i] - 1;  }  int rh=extra / RADIX;  extra-=rh * RADIX;  for (int i=0; i < mant.length; i++) {    final int r=mant[i] + rh;    rh=r / RADIX;    mant[i]=r - rh * RADIX;  }  return extra;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private int klattRule6(Element segment){  Element syllable=getSyllable(segment);  if (isInOnset(segment) && !isWordInitial(syllable)) {    return getPropertyAsInteger("rule6.onset");  } else   if (isInCoda(segment)) {    return getPropertyAsInteger("rule6.coda");  }  return 100;}  }
class C{  public DatabaseGetSchoolClassesQuery(VkApiClient client,UserActor actor){  super(client,"database.getSchoolClasses",Utils.buildParametrizedType(List.class,Utils.buildParametrizedType(List.class,JsonObject.class)));  accessToken(actor.getAccessToken());}  }
class C{  protected DocsDeleteQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean isCallerValid(Context context,int authRequirements){  return isCallerValid(context,authRequirements,"");}  }
class C{  private void validate(Node node){  final Node top=node;  final boolean useIsSameNode=useIsSameNode(top);  while (node != null) {    beginNode(node);    Node next=node.getFirstChild();    while (next == null) {      finishNode(node);      if (top == node) {        break;      }      next=node.getNextSibling();      if (next == null) {        node=node.getParentNode();        if (node == null || ((useIsSameNode) ? top.isSameNode(node) : top == node)) {          if (node != null) {            finishNode(node);          }          next=null;          break;        }      }    }    node=next;  }}  }
class C{  private static void addDependency(Project project,DependencyOnPlugin newDep){  ExternalDependenciesManager manager=ExternalDependenciesManager.getInstance(project);  List<ProjectExternalDependency> deps=Lists.newArrayList(manager.getAllDependencies());  boolean added=false;  for (int i=0; i < deps.size(); i++) {    ProjectExternalDependency dep=deps.get(i);    if (!(dep instanceof DependencyOnPlugin)) {      continue;    }    DependencyOnPlugin pluginDep=(DependencyOnPlugin)dep;    if (pluginDep.getPluginId().equals(newDep.getPluginId())) {      added=true;      deps.set(i,newDep);    }  }  if (!added) {    deps.add(newDep);  }  manager.setAllDependencies(deps);}  }
class C{  String readCountryName(Element el) throws IOException {  NodeList list=el.getElementsByTagName("country");  if (list == null || list.getLength() == 0)   throw new IOException("Country name should be given");  return list.item(0).getNodeValue();}  }
class C{  public NotesCreateCommentQuery createComment(UserActor actor,int noteId,String message){  return new NotesCreateCommentQuery(getClient(),actor,noteId,message);}  }
class C{  private void insertBadgeAsync(int badgeCount,String packageName,String activityName){  final ContentValues contentValues=new ContentValues();  contentValues.put(PROVIDER_COLUMNS_BADGE_COUNT,badgeCount);  contentValues.put(PROVIDER_COLUMNS_PACKAGE_NAME,packageName);  contentValues.put(PROVIDER_COLUMNS_ACTIVITY_NAME,activityName);  mQueryHandler.startInsert(0,null,BADGE_CONTENT_URI,contentValues);}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  public void removeInterface(SootClass interfaceClass){  checkLevel(HIERARCHY);  if (!implementsInterface(interfaceClass.getName()))   throw new RuntimeException("no such interface: " + interfaceClass.getName());  interfaces.remove(interfaceClass);}  }
class C{  public void prepareStatement(String sql,boolean specifyTypeAndConcur,int resultSetType,int resultSetConcurrency,int fetchSize,int maxRows) throws GenericDataSourceException, GenericEntityException {  if (Debug.verboseOn())   Debug.logVerbose("[SQLProcessor.prepareStatement] sql=" + sql,module);  if (_connection == null) {    getConnection();  }  try {    _sql=sql;    _ind=1;    if (specifyTypeAndConcur) {      _ps=_connection.prepareStatement(sql,resultSetType,resultSetConcurrency);      if (Debug.verboseOn())       Debug.logVerbose("[SQLProcessor.prepareStatement] _ps=" + _ps,module);    } else {      _ps=_connection.prepareStatement(sql);      if (Debug.verboseOn())       Debug.logVerbose("[SQLProcessor.prepareStatement] (def) _ps=" + _ps,module);    }    if (maxRows > 0) {      _ps.setMaxRows(maxRows);      if (Debug.verboseOn())       Debug.logVerbose("[SQLProcessor.prepareStatement] max rows set : " + maxRows,module);    }    this.setFetchSize(_ps,fetchSize);  } catch (  SQLException sqle) {    throw new GenericDataSourceException("SQL Exception while executing the following:" + sql,sqle);  }}  }
class C{  public void computeFromTris(Triangle[] tris,int start,int end){  if (end - start <= 0) {    return;  }  Vector3f min=Vector3f.newInstance();  Vector3f max=Vector3f.newInstance();  min.set(new Vector3f(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY));  max.set(new Vector3f(Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY));  Vector3f point;  for (int i=start; i < end; i++) {    point=tris[i].get(0);    checkMinMax(min,max,point);    point=tris[i].get(1);    checkMinMax(min,max,point);    point=tris[i].get(2);    checkMinMax(min,max,point);  }  center.set(min.addLocal(max));  center.multLocal(0.5f);  xExtent=max.x - center.x;  yExtent=max.y - center.y;  zExtent=max.z - center.z;  Vector3f.recycle(min);  Vector3f.recycle(max);}  }
class C{  public void startDrag(RecyclerView.ViewHolder viewHolder){  initializeItemTouchHelper();  mDefaultItemTouchHelper.startDrag(viewHolder);}  }
class C{  public static void startMentoring(Player player){  PlayerGroup group=player.getPlayerGroup2();  if (group != null) {    group.onEvent(new PlayerStartMentoringEvent(group,player));  }}  }
class C{  private static boolean showFlagsForLanguages(){  if (ourFlagSettingAvailable) {    try {      if (ourLanguageFlagField == null) {        ourLanguageFlagField=UISettings.class.getDeclaredField("LANGUAGE_FLAGS");      }      return ourLanguageFlagField.getBoolean(UISettings.getInstance());    } catch (    Throwable t) {      ourFlagSettingAvailable=false;      return true;    }  }  return true;}  }
class C{  @Override public int[] makeCumulativeTestPoints(){  return makeDensityTestPoints();}  }
class C{  public GenericValue next(){  try {    if (resultSet.next()) {      return currentGenericValue();    } else {      return null;    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error getting the next result",e);  }catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error creating GenericValue",e);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  AlignmentViewer viewer=(AlignmentViewer)getViewer();  final Set<String> previousSelection=ProjectManager.getPreviouslySelectedNodeLabels();  viewer.getSelectedBlock().clear();  if (previousSelection.size() > 0) {    final Alignment alignment=viewer.getAlignment();    for (int row=0; row < alignment.getNumberOfSequences(); row++) {      Lane lane=alignment.getLane(row);      if (previousSelection.contains(Basic.getFirstWord(lane.getName()))) {        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(lane.getFirstNonGapPosition());        int firstCol=lane.getFirstNonGapPosition() - firstJump;        int lastCol=lane.getLastNonGapPosition() - firstJump - 1;        row=alignment.getRowCompressor().getRow(row);        viewer.getSelectedBlock().select(row,firstCol,row,lastCol,alignment.isTranslate());        System.err.println("Found: " + lane.getName());        executeImmediately("zoom axis=both what=selection;");        return;      }    }  }}  }
class C{  private void createConnection(String server){  Properties props=System.getProperties();  props.put("mail.smtp.host",server);  LOG.debug("createConnection() - The connection with the mail server has been created");  this.session=Session.getInstance(props,null);}  }
class C{  public AemContextMenu openContextMenuFirstComponent(Class<?> componentClass){  return openContextMenuNthComponent(componentClass,0);}  }
class C{  public static Account loadAccount(int accountId){  Account account=new Account(accountId);  PlayerDAO playerDAO=DAOManager.getDAO(PlayerDAO.class);  PlayerAppearanceDAO appereanceDAO=DAOManager.getDAO(PlayerAppearanceDAO.class);  List<Integer> playerIdList=playerDAO.getPlayerOidsOnAccount(accountId);  for (  int playerId : playerIdList) {    PlayerCommonData playerCommonData=playerDAO.loadPlayerCommonData(playerId);    CharacterBanInfo cbi=DAOManager.getDAO(PlayerPunishmentsDAO.class).getCharBanInfo(playerId);    if (playerCommonData.isOnline()) {      if (World.getInstance().findPlayer(playerId) == null) {        playerCommonData.setOnline(false);        log.warn(playerCommonData.getName() + " has online status, but I cant find it in World. Skip online status");      }    }    PlayerAppearance appereance=appereanceDAO.load(playerId);    LegionMember legionMember=DAOManager.getDAO(LegionMemberDAO.class).loadLegionMember(playerId);    List<Item> equipment=DAOManager.getDAO(InventoryDAO.class).loadEquipment(playerId);    PlayerAccountData acData=new PlayerAccountData(playerCommonData,cbi,appereance,equipment,legionMember);    playerDAO.setCreationDeletionTime(acData);    account.addPlayerAccountData(acData);    if (account.getAccountWarehouse() == null) {      Storage accWarehouse=DAOManager.getDAO(InventoryDAO.class).loadStorage(playerId,StorageType.ACCOUNT_WAREHOUSE);      ItemService.loadItemStones(accWarehouse.getItems());      account.setAccountWarehouse(accWarehouse);    }  }  if (account.getAccountWarehouse() == null) {    account.setAccountWarehouse(new PlayerStorage(StorageType.ACCOUNT_WAREHOUSE));  }  return account;}  }
class C{  @SuppressWarnings("unchecked") public static void isPossibleToRead(Acl acl,String userModifier,String projectName){  BusinessRule.expect(acl,Predicates.or(Preconditions.isOwner(userModifier),Preconditions.isSharedTo(projectName))).verify(ErrorType.UNABLE_MODIFY_SHARABLE_RESOURCE,Suppliers.formattedSupplier("User '{}' isn't owner of resource and resource isn't shared to project '{}'.",userModifier,projectName));}  }
class C{  public QueueReader<Edge> newListener(){  return stream.reader();}  }
class C{  public V remove(short key){  V prev=null;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0,0,2 / 75.0,4 / 75.0,6 / 75.0,8 / 75.0,10 / 75.0,9 / 75.0,8 / 75.0,2 / 75.0,1 / 75.0,0,0};}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public String[] upload_file(byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String group_name=null;  return this.upload_file(group_name,file_buff,offset,length,file_ext_name,meta_list);}  }
class C{  @Override public Fraction divide(Fraction fraction){  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);  if (fraction.numerator == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_FRACTION_TO_DIVIDE_BY,fraction.numerator,fraction.denominator);  }  return multiply(fraction.reciprocal());}  }
class C{  public void resetStartTime(){  dStart=new Date();}  }
class C{  private void blockIfNecessaryUntilCleaned() throws SpaceCleanedException, InterruptedException {  if (_isCleaned) {    if (Thread.holdsLock(_cleanedLock))     return;synchronized (_cleanedLock) {      long CLEAN_TIMEOUT=10 * 1000;      while (_isCleaned) {        _cleanedLock.wait(CLEAN_TIMEOUT);        if (_isCleaned)         throw new SpaceCleanedException(getServiceName(),"Clean operation timed out after " + CLEAN_TIMEOUT + " ms. for space: "+ getServiceName());      }    }  }}  }
class C{  Request toRequest(Object... args) throws IOException {  RequestBuilder requestBuilder=new RequestBuilder(httpMethod,baseUrl,relativeUrl,headers,contentType,hasBody,isFormEncoded,isMultipart);  @SuppressWarnings("unchecked") ParameterHandler<Object>[] handlers=(ParameterHandler<Object>[])parameterHandlers;  int argumentCount=args != null ? args.length : 0;  if (argumentCount != handlers.length) {    throw new IllegalArgumentException("Argument count (" + argumentCount + ") doesn't match expected count ("+ handlers.length+ ")");  }  for (int p=0; p < argumentCount; p++) {    handlers[p].apply(requestBuilder,args[p]);  }  return requestBuilder.build();}  }
class C{  private String serializeJobRow(JobRow jobRow,UriInfo uriInfo){  try {    return objectMappers.getMapper().writeValueAsString(jobPayloadBuilder.buildPayload(jobRow,uriInfo));  } catch (  JsonProcessingException e) {    LOG.error("Error serializing JobRow: %s",e);    throw new RuntimeException(e);  }}  }
class C{  private XMLDocumentHandler handler(){  return JAXPValidatorComponent.this.getDocumentHandler();}  }
class C{  public XSNamedMapImpl(String namespace,SymbolHash map){  fNamespaces=new String[]{namespace};  fMaps=new SymbolHash[]{map};  fNSNum=1;}  }
class C{  private Deque<Character> dequeFrom(CharSequence in){  if (in == null) {    return null;  }  final Deque<Character> out=new ArrayDeque<>(in.length());  for (int i=in.length() - 1; i >= 0; i--) {    out.push(in.charAt(i));  }  return out;}  }
class C{  public Vector3f subtract(float subtractX,float subtractY,float subtractZ){  return new Vector3f(x - subtractX,y - subtractY,z - subtractZ);}  }
class C{  public void output(Node input,OutputStream destination) throws TransformerException {  output(new DOMSource(input),new StreamResult(destination));}  }
class C{  public static boolean hasKitKat(){  return Build.VERSION.SDK_INT >= 19;}  }
class C{  public long estimateMaxCapacity(ResourceQuota defaultQuota){  return calculateBrokerMaxCapacity(this.systemResourceUsage,defaultQuota);}  }
class C{  private Map<Importance,Integer> countResultsByImportanceType(Set<ValidationResult> results){  Map<Importance,Integer> importanceCountMap=new HashMap<>();  for (  ValidationResult result : results) {    Integer importanceCount=importanceCountMap.get(result.getValidationRule().getImportance());    importanceCountMap.put(result.getValidationRule().getImportance(),importanceCount == null ? 1 : importanceCount + 1);  }  return importanceCountMap;}  }
class C{  public int key() throws ConcurrentModificationException, NoSuchElementException {  if (referenceCount != count) {    throw new ConcurrentModificationException();  }  if (current < 0) {    throw new NoSuchElementException();  }  return keys[current];}  }
class C{  private static byte[] sign(byte[] data,final byte[] key) throws AWSIotException {  try {    Mac mac=Mac.getInstance(HMAC_ALGORITHM);    mac.init(new SecretKeySpec(key,HMAC_ALGORITHM));    return mac.doFinal(data);  } catch (  Exception e) {    throw new AWSIotException("Unable to calculate a request signature: " + e.getMessage());  }}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private FileEntry createFileEntry(FileEntry parent,File file){  FileEntry entry=parent.newChildInstance(file);  entry.refresh(file);  File[] files=listFiles(file);  FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (int i=0; i < files.length; i++) {    children[i]=createFileEntry(entry,files[i]);  }  entry.setChildren(children);  return entry;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T fromXml(Class<T> clazz,String xml){  T object=(T)CLASS_2_XSTREAM_INSTANCE.get(clazz).fromXML(xml);  return object;}  }
class C{  private void addPathCenteredConnectionOnSameWidget(ViewTransform transform,Graphics2D g,boolean isSelected,ConnectionDrawing drawing,ColorSet colorSet,ConstraintHandle targetHandle,ConstraintWidget targetWidget){  int radius=4;  float x0=mX;  float y0=mY;  float xt=targetHandle.getDrawX();  float yt=targetHandle.getDrawY();  boolean isTopConnection=mAnchor.getType() == ConstraintAnchor.Type.TOP;  boolean isLeftConnection=targetHandle.getDrawX() < getDrawX();  boolean isVerticalConnection=mAnchor.isVerticalAnchor();  int xdelta=0;  int ydelta=0;  if (targetHandle.getAnchor().isConnected()) {    if (isVerticalConnection) {      xdelta=x0 > xt ? -sConnectionOffset : sConnectionOffset;    } else {      ydelta=y0 < yt ? -sConnectionOffset : sConnectionOffset;    }  }  if (isVerticalConnection) {    float base=Math.min(transform.getSwingFY(y0),transform.getSwingFY(yt) - ConnectionDraw.ARROW_SIDE);    if (!isTopConnection) {      base=Math.max(transform.getSwingFY(y0),transform.getSwingFY(yt) + ConnectionDraw.ARROW_SIDE);    }    drawing.mPath.moveTo(transform.getSwingFX(x0),transform.getSwingFY(y0));    if (isSelected && Math.abs(transform.getSwingFY(y0) - base) > 0) {      int start=transform.getSwingFY(y0);      int end=transform.getSwingFY(yt);      if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0) {        if (isTopConnection) {          end+=transform.getSwingDimensionF(mAnchor.getMargin());        } else {          end-=transform.getSwingDimensionF(mAnchor.getMargin());        }        Color pre=g.getColor();        g.setColor(colorSet.getMargins());        Stroke pres=g.getStroke();        g.setStroke(sSimpleStroke);        ConnectionDraw.drawVerticalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),transform.getSwingFX(x0) + ConnectionDraw.ARROW_SIDE,end,transform.getSwingFY(yt));        g.setStroke(pres);        g.setColor(pre);        g.drawLine(transform.getSwingFX(x0 - 4),end,transform.getSwingFX(x0 + 4),end);      }      addVerticalSmallSpring(drawing.mPath,transform.getSwingFX(x0),start,end);    }    drawing.mPath.lineTo(transform.getSwingFX(x0),base);    float x1=x0 - radius;    float sy1=base - transform.getSwingDimension(radius);    if (!isTopConnection) {      sy1=base + transform.getSwingDimension(radius);    }    if (!isLeftConnection) {      x1=x0 + radius;    }    addQuarterArc(drawing.mPath,transform.getSwingFX(x0),base,transform.getSwingFX(x1),sy1,1,true);    float x2=xt + 2 * radius;    if (!isLeftConnection) {      x2=xt - 2 * radius;    }    drawing.mPath.lineTo(transform.getSwingFX(x2),sy1);    float syt=transform.getSwingFY(yt) - ConnectionDraw.ARROW_SIDE;    if (!isTopConnection) {      syt=transform.getSwingFY(yt) + ConnectionDraw.ARROW_SIDE;    }    addQuarterArc(drawing.mPath,transform.getSwingFX(x2),sy1,transform.getSwingFX(xt) + xdelta,syt + ydelta,radius,false);    if (isSelected) {      Stroke pre=g.getStroke();      g.setStroke(ConnectionDraw.sDashedStroke);      if (isLeftConnection) {        g.drawLine(transform.getSwingFX(targetWidget.getDrawRight()),transform.getSwingFY(yt),transform.getSwingFX(x0 - 4),transform.getSwingFY(yt));      } else {        g.drawLine(transform.getSwingFX(targetWidget.getDrawX()),transform.getSwingFY(yt),transform.getSwingFX(x0 - 4),transform.getSwingFY(yt));      }      g.setStroke(pre);      Shape line=new Line2D.Float(transform.getSwingFX(x0 - 4),transform.getSwingFX(yt),transform.getSwingFX(x0 + 4),transform.getSwingFX(yt));      drawing.addShape(line);    }    if (isTopConnection) {      drawing.setArrow(ConnectionDraw.getBottomArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);    } else {      drawing.setArrow(ConnectionDraw.getTopArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);    }  } else {    isTopConnection=targetHandle.getDrawY() < getDrawY();    isLeftConnection=mAnchor.getType() == ConstraintAnchor.Type.LEFT;    float base=Math.min(transform.getSwingFX(x0),transform.getSwingFX(xt) - ConnectionDraw.ARROW_SIDE);    if (!isLeftConnection) {      base=Math.max(transform.getSwingFX(x0),transform.getSwingFX(xt) + ConnectionDraw.ARROW_SIDE);    }    drawing.mPath.moveTo(transform.getSwingFX(x0),transform.getSwingFY(y0));    if (isSelected && Math.abs(transform.getSwingFX(x0) - base) > 0) {      int start=transform.getSwingFX(x0);      int end=transform.getSwingFX(xt);      if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0) {        if (isLeftConnection) {          end+=transform.getSwingDimensionF(mAnchor.getMargin());        } else {          end-=transform.getSwingDimensionF(mAnchor.getMargin());        }        Color pre=g.getColor();        g.setColor(colorSet.getMargins());        Stroke pres=g.getStroke();        g.setStroke(sSimpleStroke);        ConnectionDraw.drawHorizontalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),end,transform.getSwingFX(xt),transform.getSwingFY(y0) + ConnectionDraw.ARROW_SIDE);        g.setStroke(pres);        g.setColor(pre);        Shape line=new Line2D.Float(end,transform.getSwingFX(y0 - 4),end,transform.getSwingFX(y0 + 4));        drawing.addShape(line);      }      addHorizontalSmallSpring(drawing.mPath,transform.getSwingFY(y0),start,end);    }    drawing.mPath.lineTo(base,transform.getSwingFY(y0));    float y1=y0 - radius;    float sx1=base - transform.getSwingDimension(radius);    if (!isLeftConnection) {      sx1=base + transform.getSwingDimension(radius);    }    if (!isTopConnection) {      y1=y0 + radius;    }    addQuarterArc(drawing.mPath,base,transform.getSwingFY(y0),sx1,transform.getSwingFY(y1),1,false);    float y2=yt + 2 * radius;    if (!isTopConnection) {      y2=yt - 2 * radius;    }    drawing.mPath.lineTo(sx1,transform.getSwingFY(y2));    float sxt=transform.getSwingFX(xt) - ConnectionDraw.ARROW_SIDE;    if (!isLeftConnection) {      sxt=transform.getSwingFX(xt) + ConnectionDraw.ARROW_SIDE;    }    addQuarterArc(drawing.mPath,sx1,transform.getSwingFY(y2),sxt + xdelta,transform.getSwingFY(yt) + ydelta,radius,true);    if (isSelected) {      Stroke pre=g.getStroke();      g.setStroke(ConnectionDraw.sDashedStroke);      if (isTopConnection) {        g.drawLine(transform.getSwingFX(xt),transform.getSwingFY(targetWidget.getDrawBottom()),transform.getSwingFX(xt),transform.getSwingFY(y0 - 4));      } else {        g.drawLine(transform.getSwingFX(xt),transform.getSwingFY(targetWidget.getDrawY()),transform.getSwingFX(xt),transform.getSwingFY(y0 - 4));      }      g.setStroke(pre);      Shape line=new Line2D.Float(transform.getSwingFX(xt),transform.getSwingFY(y0 - 4),transform.getSwingFX(xt),transform.getSwingFY(y0 + 4));      drawing.addShape(line);    }    if (isLeftConnection) {      drawing.setArrow(ConnectionDraw.getRightArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);    } else {      drawing.setArrow(ConnectionDraw.getLeftArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);    }  }}  }
class C{  public AemParsys clear(){  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));  list.forEach(null);  return this;}  }
class C{  public OrdersGetAmountQuery(VkApiClient client,UserActor actor,int userId,List<String> votes){  super(client,"orders.getAmount",Amount.class);  accessToken(actor.getAccessToken());  userId(userId);  votes(votes);}  }
class C{  private void sendJson(Json json){  try {    session.getRemote().sendString(json.toString());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean geom_app_only(){  return soot.PhaseOptions.getBoolean(options,"geom-app-only");}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,false,false);}  }
class C{  @Override public DerivativeStructure log10(){  final DerivativeStructure result=new DerivativeStructure(compiler);  compiler.log10(data,0,result.data,0);  return result;}  }
class C{  @Override public int regionOffset(String dataCenter){  return Math.abs(reverse("Dynomite").hashCode());}  }
class C{  public ResponsePacket writeRequestPacket(RequestPacket packet) throws SQLException {  long start=System.currentTimeMillis();  boolean useRouter=false;  while (true) {    if (!useRouter) {      try {        return writeRequestPacketInternal(packet);      } catch (      RemoteException re) {        sleep(1000);        if (System.currentTimeMillis() - start > EXECUTE_RETRY_TIMEOUT) {          useRouter=true;        }      }    } else {      reinitialize();      start=System.currentTimeMillis();      useRouter=false;    }  }}  }
class C{  protected final void checkQName(String prefix,String local){  if (!errorChecking) {    return;  }  boolean validNCName=false;  if (!xml11Version) {    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);  } else {    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);  }  if (!validNCName) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"httpFile\"";  db.execSQL(sql);}  }
class C{  public StartViewModel(AppPreferences preferences){  this.preferences=preferences;}  }
class C{  public void delete(){  this.dataFile.delete();}  }
class C{  public static PostsFragment newInstance(){  return new PostsFragment();}  }
class C{  private void lockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_START);    mState=STATE_WAITING_LOCK;    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  protected ResponseFormatType generateAcceptFormat(String format) throws BadApiRequestException {  try {    return format == null ? ResponseFormatType.JSON : ResponseFormatType.valueOf(format.toUpperCase(Locale.ENGLISH));  } catch (  IllegalArgumentException e) {    LOG.error(ACCEPT_FORMAT_INVALID.logFormat(format),e);    throw new BadApiRequestException(ACCEPT_FORMAT_INVALID.format(format));  }}  }
class C{  private void usMoneyToWords(String tokenVal){  int dotIndex=tokenVal.indexOf('.');  if (matches(illionPattern,(String)tokenItem.findFeature("n.name"))) {    NumberExpander.expandReal(tokenVal.substring(1),wordRelation);  } else   if (dotIndex == -1) {    String aaa=tokenVal.substring(1);    tokenToWords(aaa);    if (aaa.equals("1")) {      wordRelation.addWord("dollar");    } else {      wordRelation.addWord("dollars");    }  } else   if (dotIndex == (tokenVal.length() - 1) || (tokenVal.length() - dotIndex) > 3) {    NumberExpander.expandReal(tokenVal.substring(1),wordRelation);    wordRelation.addWord("dollars");  } else {    String aaa=tokenVal.substring(1,dotIndex);    aaa=Utilities.deleteChar(aaa,',');    String bbb=tokenVal.substring(dotIndex + 1);    NumberExpander.expandNumber(aaa,wordRelation);    if (aaa.equals("1")) {      wordRelation.addWord("dollar");    } else {      wordRelation.addWord("dollars");    }    if (bbb.equals("00")) {    } else {      NumberExpander.expandNumber(bbb,wordRelation);      if (bbb.equals("01")) {        wordRelation.addWord("cent");      } else {        wordRelation.addWord("cents");      }    }  }}  }
class C{  public void resetViewPortOffsets(){  mCustomViewPortEnabled=false;  calculateOffsets();}  }
class C{  public EventDrivenScriptingProxyConfigurer(GigaSpace gigaSpace){  remotingConfigurer=new EventDrivenRemotingProxyConfigurer<ScriptingExecutor>(gigaSpace,ScriptingExecutor.class).metaArgumentsHandler(new ScriptingMetaArgumentsHandler()).remoteInvocationAspect(new LazyLoadingRemoteInvocationAspect()).remoteRoutingHandler(new ScriptingRemoteRoutingHandler());}  }
class C{  @Override public void startAttlist(String elementName,Augmentations augmentations) throws XNIException {}  }
class C{  protected void drawYAxis(Graphics2D gc,Dimension size){  if (inUpdateCoordinates)   return;  if (isTranspose()) {    drawYAxisTransposed(gc,size);    return;  }  final int numberOfAttributes=(attributeNames == null ? 0 : attributeNames.length);  if (numberOfAttributes > 0) {    final SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);    gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));    final boolean doDraw=(size == null);    Rectangle bbox=null;    int x0=leftMargin;    int x1=getWidth() - rightMargin;    int y0=getHeight() - bottomMargin;    int y1=topMargin;    if (viewer.getClassesList().isDoClustering())     y1+=topTreeSpace;    int longest=0;    for (    String attributeName : attributeNames) {      longest=Math.max(longest,Basic.getStringSize(gc,attributeName,gc.getFont()).getSize().width);    }    int right=Math.max(leftMargin,longest + 5);    if (doDraw)     gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    double yStep=(y0 - y1) / (double)numberOfAttributes;    int d=numberOfAttributes - 1;    for (    String attributeName : attributeNames) {      Dimension labelSize=Basic.getStringSize(gc,attributeName,gc.getFont()).getSize();      int x=right - labelSize.width - 4;      int y=(int)Math.round(y0 - (d + 0.5) * yStep);      if (doDraw) {        if (getChartData().getChartSelection().isSelectedAttribute(attributeName)) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.DARK_GRAY));        gc.drawString(attributeName,x,y);      } else {        Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }      if (sgc != null) {        sgc.setCurrentItem(new String[]{null,null,attributeName});        drawRect(gc,x,y,labelSize.width,labelSize.height,0);        sgc.clearCurrentItem();      }      d--;    }    if (size != null && bbox != null) {      size.setSize(bbox.width + 3,bbox.height);    }  }}  }
class C{  public LpCoeffs(double[] oneMinusA,double gain){  this.oneMinusA=oneMinusA;  this.gain=gain;  this.lsf=null;  this.lpcc=null;  this.lprefc=null;}  }
class C{  public boolean isVisible(SootClass from,SootClass check){  if (check.isPublic())   return true;  if (check.isProtected() || check.isPrivate())   return false;  return from.getJavaPackageName().equals(check.getJavaPackageName());}  }
class C{  public Dex(int byteCount){  this.data=ByteBuffer.wrap(new byte[byteCount]);  this.data.order(ByteOrder.LITTLE_ENDIAN);  this.tableOfContents.fileSize=byteCount;}  }
class C{  public boolean intersectWherePlanar(Vector3f v0,Vector3f v1,Vector3f v2,Vector3f loc){  return intersects(v0,v1,v2,loc,true,false);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  CompareWindow viewer=(CompareWindow)getParent();  viewer.setCanceled(false);  viewer.setVisible(false);}  }
class C{  public Value avg(Value num){  return new AggregationFunction(num,AggregationType.AVERAGE);}  }
class C{  public void start(Activity activity){  start(activity,REQUEST_CROP);}  }
class C{  public DistributionGraph(){  super();  EdgeDistros=new HashMap();}  }
class C{  @Inject public DatabaseFavoritesRepository(final TransactionFactory transactionFactory,final Flyway flyway,final @Named("mysql.mutagen.root.resource.path") String mutagenRootResourcePath){  this.transactionFactory=transactionFactory;  initialize(flyway,mutagenRootResourcePath);}  }
class C{  public void java_io_ObjectInputStream_latestUserDefinedLoader(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  @Override public Vector clone(){  try {    return (Vector)super.clone();  } catch (  CloneNotSupportedException e) {    throw new Error(e);  }}  }
class C{  private static <T>List<T> rest(List<T> list){  return list.subList(1,list.size());}  }
class C{  public static void updateSdkSourceRoot(@NotNull Sdk sdk){  AndroidPlatform platform=AndroidPlatform.getInstance(sdk);  if (platform != null) {    IAndroidTarget target=platform.getTarget();    SdkModificator sdkModificator=sdk.getSdkModificator();    sdkModificator.removeRoots(SOURCES);    findAndSetPlatformSources(target,sdkModificator);    sdkModificator.commitChanges();  }}  }
class C{  private void throwIfSaveFailed(long id){  if (id == -1) {    throw new DataSupportException(DataSupportException.SAVE_FAILED);  }}  }
class C{  public static IRemoteSpace findJiniSpace(SpaceURL url,Properties customProperties,long timeout,LookupType lookupType) throws FinderException {  return (IRemoteSpace)findJiniSpace(url,customProperties,timeout,lookupType,false);}  }
class C{  public void onSaveInstanceState(Bundle outState){  if (activityResultCallback != null) {    String serviceName=activityResultCallback.getServiceName();    outState.putString("callbackService",serviceName);  }  if (pluginManager != null) {    outState.putBundle("plugin",pluginManager.onSaveInstanceState());  }}  }
class C{  public Infoflow(){  this.androidPath="";  this.forceAndroidJar=false;  this.pathBuilderFactory=new DefaultPathBuilderFactory();}  }
class C{  public static <T>Promise<Void> ignore(Future<T> future){  return ignore(future,null);}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();    if (suffixLength == Constants.XML_STRING_PROPERTY.length() && propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,propertyId);    }  }  super.checkProperty(propertyId);}  }
class C{  public static final void updateAlliance(Player player,PlayerAllianceEvent allianceEvent){  PlayerAlliance alliance=player.getPlayerAlliance2();  if (alliance != null) {    alliance.onEvent(new PlayerAllianceUpdateEvent(alliance,player,allianceEvent));  }}  }
class C{  private boolean playMode(){switch (this.mode) {case NONE:    this.setMode(MODE.PLAY);  break;case PLAY:break;case RECORD:Log.d(LOG_TAG,"AudioPlayer Error: Can't play in record mode.");sendErrorStatus(MEDIA_ERR_ABORTED);return false;}return true;}  }
class C{  public Builder fillRule(String fillRule){  this.fillRule=fillRule;  return this;}  }
class C{  public static boolean isGpsEnabled(Context context){  LocationManager lm=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  return lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}  }
class C{  public void save(FileOutputStream outputStream,@Nullable String header) throws IOException {  myProperties.store(outputStream,header);}  }
class C{  public void addHP(int delta){  if (stats.setHp(stats.getHp() + delta,this)) {    updateSingleStat(MapleStat.HP,stats.getHp());  }}  }
class C{  public void close() throws IOException {  outs.close();}  }
class C{  private static final String toXml(SandboxRay ray){  StringBuilder sb=new StringBuilder();  sb.append("<Ray Name=\"").append(ray.getName()).append("\">").append(XmlGenerator.toXml(ray.getStart(),"Start")).append("<Direction>").append(ray.getDirection()).append("</Direction>").append("<Length>").append(ray.getLength()).append("</Length>").append("<IgnoreSensors>").append(ray.isIgnoreSensors()).append("</IgnoreSensors>").append("<TestAll>").append(ray.isAll()).append("</TestAll>").append("</Ray>");  return sb.toString();}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this(usingCheckDigit,false);}  }
class C{  public Iterator edgesInto(MethodOrMethodContext m){  return new ArrayList(tgtMap.get(m)).iterator();}  }
class C{  public boolean providesIntegrity(URL url){  return "httpmd".equals(url.getProtocol());}  }
class C{  protected void timeout(){}  }
class C{  public NewsfeedGetCommentsQuery filters(NewsfeedGetCommentsFilter... value){  return unsafeParam("filters",value);}  }
class C{  @Override public ArcsSet wholeSpace(){  return new ArcsSet(tolerance);}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public GrantPermission(Permission permission){  this(new Permission[]{permission});}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  public NewsfeedDeleteBanQuery groupIds(Integer... value){  return unsafeParam("group_ids",value);}  }
class C{  private void addPaths(){  addPath(new ConfigureAndroidProjectPath(getDisposable()));  for (  NewFormFactorModulePath path : NewFormFactorModulePath.getAvailableFormFactorModulePaths(getDisposable())) {    addPath(path);  }  addPath(new ConfigureCppSupportPath(getDisposable()));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("set mode=" + (Comparer.COMPARISON_MODE.ABSOLUTE) + ";");  CompareWindow viewer=(CompareWindow)getParent();  viewer.getCommandManager().updateEnableState();}  }
class C{  public static final void isCDataWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){  if (datavalue == null || (datavalue.length() == 0)) {    return;  }  char[] dataarray=datavalue.toCharArray();  int datalength=dataarray.length;  if (isXML11Version) {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XML11Char.isXML11Invalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInCDSect",new Object[]{Integer.toString(c,16)});        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      } else       if (c == ']') {        int count=i;        if (count < datalength && dataarray[count] == ']') {          while (++count < datalength && dataarray[count] == ']') {          }          if (count < datalength && dataarray[count] == '>') {            String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"CDEndInContent",null);            reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");          }        }      }    }  } else {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XMLChar.isInvalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInCDSect",new Object[]{Integer.toString(c,16)});        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      } else       if (c == ']') {        int count=i;        if (count < datalength && dataarray[count] == ']') {          while (++count < datalength && dataarray[count] == ']') {          }          if (count < datalength && dataarray[count] == '>') {            String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"CDEndInContent",null);            reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");          }        }      }    }  }}  }
class C{  public void addCallback(@NonNull Callback callback){  mCallbacks.add(callback);}  }
class C{  private void initPresenter(){  this.photosPresenter=new PhotosImplementor(photosModel,this);  this.pagerPresenter=new PagerImplementor(this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);}  }
class C{  @Override public boolean equals(final Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final VersionNumber other=(VersionNumber)obj;  if (!groups.equals(other.groups)) {    return false;  }  if (!extension.equals(other.extension)) {    return false;  }  return true;}  }
class C{  private void populatePokemon(String[] names,int[] attack,int[] defense,int[] stamina,int[] devolution,int[] evolutionCandyCost){  int pokeListSize=names.length;  for (int i=0; i < pokeListSize; i++) {    Pokemon p=new Pokemon(names[i],i,attack[i],defense[i],stamina[i],devolution[i],evolutionCandyCost[i]);    pokedex.add(p);    pokemap.put(names[i].toLowerCase(),p);  }  for (int i=0; i < pokeListSize; i++) {    if (devolution[i] != -1) {      Pokemon devo=pokedex.get(devolution[i]);      devo.evolutions.add(pokedex.get(i));    } else {      basePokemons.add(pokedex.get(i));    }  }}  }
class C{  public OverScroller(Context context,Interpolator interpolator,boolean flywheel){  mInterpolator=interpolator;  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);}  }
class C{  @Override public int read(){  return -1;}  }
class C{  @Override public boolean accepts(Field field){  return field.getType().isAnnotationPresent(PageObject.class) && AnnotationsHelper.isFindByAnnotationPresent(field);}  }
class C{  public static String readPemStringFromFile(File file){  try {    byte[] fileContents=FileUtils.readFileToByteArray(file);    return new String(fileContents,Charset.forName("US-ASCII"));  } catch (  IOException e) {    throw new ImportException("Unable to read PEM-encoded data from file: " + file.getName());  }}  }
class C{  public void updateProcessConfiguration(final ProcessConfigurationUpdate processConfigurationUpdate,final ProcessConfiguration processConfiguration) throws IllegalAccessException, NoSuchFieldException {  fillNonNullFields(processConfigurationUpdate,processConfiguration,CHANGE_ID_FIELD,PROCESS_ID_FIELD);  removeListOfFields(processConfigurationUpdate.getFieldsToRemove(),processConfiguration);}  }
class C{  public double angle(S2Point va){  return Math.atan2(crossProd(this,va).norm(),this.dotProd(va));}  }
class C{  public PagesGetHistoryQuery(VkApiClient client,UserActor actor,int pageId){  super(client,"pages.getHistory",Utils.buildParametrizedType(List.class,WikipageVersion.class));  accessToken(actor.getAccessToken());  pageId(pageId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Polymorph_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200848,skillcaster,value0,skillname);}  }
class C{  public static boolean isRemoteFile(String localFileName){  return localFileName.contains("::");}  }
class C{  public boolean dump_pag(){  return soot.PhaseOptions.getBoolean(options,"dump-pag");}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public RawClassDecl fullCopy(){  RawClassDecl tree=(RawClassDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 2:        tree.children[i]=new Opt();      continue;case 3:case 4:case 5:    tree.children[i]=new List();  continue;}ASTNode child=(ASTNode)children[i];if (child != null) {child=child.fullCopy();tree.setChild(child,i);}}}return tree;}  }
class C{  @Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {  DTDGrammar grammar=(fDTDGrammar != null ? fDTDGrammar : fGrammarBucket.getActiveGrammar());  int index=grammar.getEntityDeclIndex(name);  if (index == -1) {    if (fDTDGrammar != null)     fDTDGrammar.internalEntityDecl(name,text,nonNormalizedText,augs);    if (fDTDHandler != null) {      fDTDHandler.internalEntityDecl(name,text,nonNormalizedText,augs);    }  }}  }
class C{  public void notify(RemoteEvent event) throws UnknownEventException, RemoteException {  RemoteEventListener l=get();  if (l != null) {    l.notify(event);  }}  }
class C{  public String pulling(ClientSession client,Map<String,String> configItems,HttpServletRequest req,HttpServletResponse resp){  boolean longPulling=isLongPulling(req);  if (longPulling) {    longPulling(client,configItems,req);    return "";  }  shortPulling(client,configItems,resp);  return "";}  }
class C{  public void validate(){  final List<ValidationException> exceptionList=new ArrayList<ValidationException>();  validate(exceptionList);  if (!exceptionList.isEmpty())   throw exceptionList.get(0);}  }
class C{  public void fireIterationStartedEvent(final IterationEvent e){  for (  IterationListener l : listeners) {    l.iterationStarted(e);  }}  }
class C{  public final boolean canGetLong(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetLong());}  }
class C{  private Fragment buildFragmentByCode(int code){switch (code) {case R.id.action_home:    return new HomeFragment();case R.id.action_search:  return new SearchFragment();case R.id.action_multi_filter:return new MultiFilterFragment();case R.id.action_category_buildings:return new CategoryFragment().setCategory(Mysplash.CATEGORY_BUILDINGS_ID);case R.id.action_category_food_drink:return new CategoryFragment().setCategory(Mysplash.CATEGORY_FOOD_DRINK_ID);case R.id.action_category_nature:return new CategoryFragment().setCategory(Mysplash.CATEGORY_NATURE_ID);case R.id.action_category_objects:return new CategoryFragment().setCategory(Mysplash.CATEGORY_OBJECTS_ID);case R.id.action_category_people:return new CategoryFragment().setCategory(Mysplash.CATEGORY_PEOPLE_ID);case R.id.action_category_technology:return new CategoryFragment().setCategory(Mysplash.CATEGORY_TECHNOLOGY_ID);default :return null;}}  }
class C{  public void upload(File file,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  upload(file,0,listener);}  }
class C{  public static String formatMillis(int millisec){  int seconds=(int)(millisec / 1000);  int hours=seconds / (60 * 60);  seconds%=(60 * 60);  int minutes=seconds / 60;  seconds%=60;  String time;  if (hours > 0) {    time=String.format("%d:%02d:%02d",hours,minutes,seconds);  } else {    time=String.format("%d:%02d",minutes,seconds);  }  return time;}  }
class C{  public void evict() throws Exception {  assertOpen();  boolean isEmpty;synchronized (this) {    isEmpty=pool.isEmpty();  }  if (!isEmpty) {    if (softMinEvictableIdleTimeMillis > 0) {      int numToEvict=getNumIdle() - getMinIdle();      evict(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict);    }    if (minEvictableIdleTimeMillis > 0) {      int numToEvict=getNumIdle();      evict(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict);    }  }}  }
class C{  protected boolean checkList(String currentVal,String tokenValue){  if (currentVal == null || tokenValue == null) {    throw new NullPointerException("Received null argument");  }  if (!currentVal.startsWith("INLIST") && !currentVal.startsWith("!INLIST")) {    throw new IllegalArgumentException("currentVal does not start with INLIST or !INLIST");  }  boolean negation=currentVal.startsWith("!");  String listName=currentVal.substring(currentVal.indexOf(":") + 1);  Object listObj=listMap.get(listName);  if (listObj == null)   return false;  boolean contains;  if (listObj instanceof Set) {    Set<String> set=(Set)listObj;    contains=set.contains(tokenValue);  } else {    throw new IllegalArgumentException("Unknown list representation: " + listObj);  }  return !(contains && negation || !contains && !negation);}  }
class C{  public int next(){  matchesTextLength=0;  String queryLine=getNextLineContains(vsString);  if (queryLine == null)   return -1;  final String queryName=Basic.swallowLeadingGreaterSign(Basic.getFirstWord(queryLine));  pushBackLine(queryLine);  int matchId=0;  matches.clear();  try {    while (hasNextLine()) {      queryLine=getNextLineContains(vsString);      if (queryLine == null)       break;      String currentQueryName=Basic.swallowLeadingGreaterSign(Basic.getFirstWord(queryLine));      if (!currentQueryName.equals(queryName)) {        pushBackLine(queryLine);        break;      }      RapSearchMatch match=new RapSearchMatch();      match.parseHeader(queryLine);      match.parseLines(nextLine(),nextLine(),nextLine());      if (matches.size() < getMaxNumberOfMatchesPerRead() || match.bitScore > matches.last().bitScore) {        match.id=matchId++;        match.samLine=makeSAM(queryName,match.referenceName,-1,match.bitScore,match.expected,0,match.identity,match.frame,match.queryStart,match.queryEnd,match.refStart,match.refEnd,match.querySequence,match.refSequence);        matches.add(match);        if (matches.size() > getMaxNumberOfMatchesPerRead())         matches.remove(matches.last());      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  public DefaultChunkScrollableDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(entityName,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  public static String bind(String key){  try {    return getResourceBundle().getString(key);  } catch (  MissingResourceException e) {    return key;  }catch (  NullPointerException e) {    return "!" + key + "!";  }}  }
class C{  public static Label createLabel(Composite parent,String text){  return createIndentedLabel(parent,text,0);}  }
class C{  public Expression isNotEmpty(Value target){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public void cancel(Uuid uuid) throws UnknownLeaseException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"cancel",new Object[]{uuid});  }  readyState.check();  verifyLeaseUuid(uuid);  Long tid=getLeaseTid(uuid);  TxnManagerTransaction txntr=_txns.get(tid);  if (txntr == null) {    Object xid=_tidToExternalXid.get(tid);    if (xid != null)     txntr=_txns.get(xid);  }  if (txntr == null)   throw new UnknownLeaseException();  int state=txntr.getState();  if (state == ACTIVE) {synchronized (txntr) {      txntr.setExpiration(0);    }    try {      abort(tid.longValue(),Long.MAX_VALUE);    } catch (    TransactionException e) {      throw new UnknownLeaseException("When canceling abort threw:" + e.getClass().getName() + ":"+ e.getLocalizedMessage());    }  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"cancel");  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  private boolean isValidSelfIntro(String name){  return LegionConfig.SELF_INTRO_PATTERN.matcher(name).matches();}  }
class C{  public static String convertObjectToString(Object obj) throws IOException {  ByteArrayOutputStream baos=null;  GZIPOutputStream gos=null;  ObjectOutputStream oos=null;  try {    baos=new ByteArrayOutputStream();    gos=new GZIPOutputStream(baos);    oos=new ObjectOutputStream(gos);    oos.writeObject(obj);  }  finally {    try {      if (oos != null) {        oos.close();      }      if (gos != null) {        gos.close();      }      if (baos != null) {        baos.close();      }    } catch (    IOException e) {      LOG.error(e);    }  }  return new String(Base64.encodeBase64(baos.toByteArray()),CarbonCommonConstants.DEFAULT_CHARSET);}  }
class C{  public IObjectInfo<T> add(T subject){  return insert(subject);}  }
class C{  public AuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static Style yellow(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_YELLOW);  style.messageTextColor=PaletteUtils.getSolidColor(PaletteUtils.DARK_GREY);  style.buttonDividerColor=PaletteUtils.getSolidColor(PaletteUtils.DARK_GREY);  style.buttonTextColor=PaletteUtils.getSolidColor(PaletteUtils.DARK_GREY);  return style;}  }
class C{  public static final void sort(float[] a,int[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  public static boolean isSvnMetaResource(IResource resource){  if ((resource.getType() == IResource.FOLDER) && (SVNProviderPlugin.getPlugin().isAdminDirectory(resource.getName())))   return true;  IResource parent=resource.getParent();  if (parent == null) {    return false;  } else {    return isSvnMetaResource(parent);  }}  }
class C{  public boolean isOverwrite(){  return overwrite;}  }
class C{  private void AttackAll(){  for (int i=0; i < 6; i++) {    for (int j=0; j < 8; j++) {      if (enemys[i][j].get_Statue() == PangPangEnemy.SYNC)       AttackPath(i,j,rnd.nextInt(10) + 1);    }  }}  }
class C{  public static void resetAll(Context context){  PrefsManager.resetAll(context);}  }
class C{  @RequestMapping(value="/rest/activiti/forms",method=RequestMethod.GET,produces="application/json") public JsonNode listForms(HttpServletRequest request){  ServerConfig serverConfig=retrieveServerConfig();  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);  return clientService.listForms(serverConfig,parameterMap);}  }
class C{  public void start(boolean daemon,int thread_priority){  if (thread_priority < Thread.MIN_PRIORITY)   throw new IllegalArgumentException("thread priority too low");  if (thread_priority > Thread.MAX_PRIORITY)   throw new IllegalArgumentException("thread priority too high");  start_(Executors.newSingleThreadScheduledExecutor(null),true);}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapPilot && getPilotId().equals(((AirMapPilot)o).getPilotId());}  }
class C{  public static int export(String format,Director dir,File file,char separator,boolean reportSummarized,ProgressListener progressListener) throws IOException {  int countTaxa=0;  try {    final Document doc=dir.getDocument();    final MainViewer viewer=dir.getMainViewer();    final IConnector connector=doc.getMeganFile().getDataConnector();    int numberOfTaxa=viewer.getSelectedNodes().size();    progressListener.setSubtask("Taxa to normalized counts");    progressListener.setMaximum(numberOfTaxa);    progressListener.setProgress(0);    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      Set<String> references=new HashSet<>();      java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      for (      int taxonId : taxonIds) {        int countMatchedReads=0;        final Set<Integer> allBelow;        final Node v=viewer.getTaxId2Node(taxonId);        if (v.getOutDegree() == 0 || reportSummarized)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {          allBelow=new HashSet<>();          allBelow.add(taxonId);        }        IReadBlockIterator it=connector.getReadsIteratorForListOfClassIds(ClassificationType.Taxonomy.toString(),allBelow,doc.getMinScore(),doc.getMaxExpected(),false,true);        while (it.hasNext()) {          final IReadBlock readBlock=it.next();          final BitSet activeMatchesForTaxa=new BitSet();          ActiveMatches.compute(doc.getMinScore(),doc.getTopPercent(),doc.getMaxExpected(),doc.getMinPercentIdentity(),readBlock,Classification.Taxonomy,activeMatchesForTaxa);          for (int i=activeMatchesForTaxa.nextSetBit(0); i >= 0; i=activeMatchesForTaxa.nextSetBit(i + 1)) {            final IMatchBlock matchBlock=readBlock.getMatchBlock(i);            String header=matchBlock.getText();            if (header != null) {              int pos=matchBlock.getText().indexOf("\n");              if (pos > 0)               header=header.substring(0,pos);            }            if (header == null)             header=matchBlock.getRefSeqId();            if (header != null) {              references.add(header);              countMatchedReads++;            }            progressListener.checkForCancel();          }        }        it.close();        progressListener.incrementProgress();        float normalizedCount=(references.size() > 0 ? (float)countMatchedReads / (float)references.size() : 0f);        w.write(String.format("%s%c%d/%d%c%g\n",CSVExportTaxonomy.getTaxonLabelSource(dir,format,taxonId),separator,countMatchedReads,references.size(),separator,normalizedCount));        references.clear();        countTaxa++;      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return countTaxa;}  }
class C{  public void addGenericAttr(GenericAttr g){  generic.addElement(g);}  }
class C{  public void fixupNextTryTime(){  long curTime=SystemTime.timeMillis();  if ((curTime - time) > MIN_RETRY) {    tryIndx=0;    nextTryTime=curTime;  } else {    setNextTryTime();  }}  }
class C{  public void putCorrection(String ocredPokemonName,String correctedPokemonName){  userCorrections.put(ocredPokemonName,correctedPokemonName);}  }
class C{  public static String toString(Object[] arr){  StringBuilder sb=new StringBuilder();  sb.append("[");  if (arr != null) {    int len=arr.length;    for (int i=0; i < len; i++) {      if (i > 0) {        sb.append(",");      }      Object o=arr[i];      if (o == null) {        sb.append("null");      } else       if (o instanceof Integer) {        sb.append(o);      } else       if (o instanceof Date) {        sb.append("Date(").append(o).append(")");      } else       if (o instanceof Long) {        sb.append(o);      } else       if (o instanceof Float) {        sb.append(o);      } else       if (o instanceof Double) {        sb.append(o);      } else       if (o instanceof Boolean) {        sb.append("Bool(").append(o).append(")");      } else {        sb.append("\"").append(o).append("\"");      }    }  }  return sb.append("]").toString();}  }
class C{  protected void testAssertMappedValues(double[] d,Object[][] map,Double tolerance){  for (  Object[] o : map) {    EstimationType e=(EstimationType)o[0];    double expected=(Double)o[1];    double result=getTestMedian(e).evaluate(d);    assertEquals("expected[" + e + "] = "+ expected+ " but was = "+ result,expected,result,tolerance);  }}  }
class C{  public ActivationExporter(ActivationID id,Exporter underlyingExporter,ClassLoader loader){  if (id == null || underlyingExporter == null) {    throw new NullPointerException();  }  this.id=id;  this.underlyingExporter=underlyingExporter;  this.loader=loader;}  }
class C{  public AuditLogException(ErrorCode errorCode,String message){  this(errorCode,message,null);}  }
class C{  public DocumentNGramGraph inverseIntersectGraph(DocumentNGramGraph dgOtherGraph){  DocumentNGramGraph dgUnion=(DocumentNGramGraph)clone();  dgUnion.mergeGraph(dgOtherGraph,0);  DocumentNGramGraph dgIntersection=intersectGraph(dgOtherGraph);  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(10);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgUnion;}  }
class C{  public PointF mapImageToView(PointF imagePoint){  float[] points=mTempValues;  points[0]=imagePoint.x;  points[1]=imagePoint.y;  mapRelativeToAbsolute(points,points,1);  mActiveTransform.mapPoints(points,0,points,0,1);  return new PointF(points[0],points[1]);}  }
class C{  private long calcLastProcessedkey(){  ReplicationInContext replicationInContext=getReplicationInContext();  ReplicationBlobstoreBulkContext replicationBlobstoreBulkContext=replicationInContext.getReplicationBlobstoreBulkContext();  if (replicationBlobstoreBulkContext != null && replicationBlobstoreBulkContext.getBlobStoreReplicationBulkConsumeHelper() != null) {    return replicationBlobstoreBulkContext.getBlobStoreReplicationBulkConsumeHelper().getLastProcessedKey();  }  return _lastProcessedKey;}  }
class C{  public Matrix4f transposeLocal(){  float tmp=m01;  m01=m10;  m10=tmp;  tmp=m02;  m02=m20;  m20=tmp;  tmp=m03;  m03=m30;  m30=tmp;  tmp=m12;  m12=m21;  m21=tmp;  tmp=m13;  m13=m31;  m31=tmp;  tmp=m23;  m23=m32;  m32=tmp;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CRAFT_RECIPE_LEARN(int value0,String name){  return new SM_SYSTEM_MESSAGE(1330061,"[recipe_ex:" + value0 + ";"+ name+ "]");}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public static void d(String tag,String s){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s);}  }
class C{  @Override public void revertToDefaultValue(){  if (windBarbsPanel != null) {    windBarbsPanel.revertToDefaultValue();  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParInterfaceDecl fullCopy(){  ParInterfaceDecl tree=(ParInterfaceDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 3:case 4:        tree.children[i]=new List();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public QueryResponse query(String userQuery) throws Exception {  RetrieveAndRank service=new RetrieveAndRank();  HttpSolrClient solrClient=HttpSolrClientUtils.getSolrClient(service.getSolrUrl(CLUSTER_ID),USERNAME,PASSWORD);  logger.info(Messages.getString("Query.PASS_CLUSTER_DETAILS"));  final SolrQuery query=new SolrQuery(userQuery).setFields(Constants.SCHEMA_FIELD_ID,Constants.SCHEMA_FIELD_BODY,Constants.SCHEMA_FIELD_TITLE,Constants.SCHEMA_FIELD_CONFIDENCE,Constants.SCHEMA_FIELD_SOURCE_URL).setHighlight(true).setHighlightFragsize(150).setHighlightSnippets(1).setParam("hl.fl",Constants.SCHEMA_FIELD_BODY).setRows(Constants.RESULTS_TO_FETCH).setRequestHandler("/fcselect").setParam("ranker_id",RANKER_ID);  logger.info(Messages.getString("Query.QUERY_SOLR_RANKER"));  return solrClient.query(COLLECTION_NAME,query);}  }
class C{  public RequestHandle put(String url,ResponseHandlerInterface responseHandler){  return put(null,url,null,responseHandler);}  }
class C{  public Activity put(String key,Activity activity){  return (Activity)m_map.put(key,activity);}  }
class C{  public IEntryPacket aggregate(IQueryResultSet<IEntryPacket> entries) throws SQLException {  Iterator iter=query.getQueryColumns().iterator();  ArrayList<String> vecFieldNames=new ArrayList<String>();  ArrayList<Object> vecFieldValues=new ArrayList<Object>();  while (iter.hasNext()) {    SelectColumn funcColumn=(SelectColumn)iter.next();    if (!funcColumn.isVisible())     continue;    vecFieldNames.add(funcColumn.toString());    if (funcColumn.getFunctionName() == null) {      IEntryPacket first=entries.iterator().next();      Object value=entries.getFieldValue(funcColumn,first);      vecFieldValues.add(value);    } else     if (funcColumn.getFunctionName().equals(SqlConstants.MAX)) {      Object maxMin=minMax(funcColumn,entries,true);      vecFieldValues.add(maxMin);    } else     if (funcColumn.getFunctionName().equals(SqlConstants.MIN)) {      Object maxMin=minMax(funcColumn,entries,false);      vecFieldValues.add(maxMin);    } else     if (funcColumn.getFunctionName().equals(SqlConstants.COUNT)) {      vecFieldValues.add(entries.size());    } else     if (funcColumn.getFunctionName().equals(SqlConstants.SUM)) {      Object sum=sum(funcColumn,entries);      vecFieldValues.add(sum);    } else     if (funcColumn.getFunctionName().equals(SqlConstants.AVG)) {      Number avg=avg(funcColumn,entries);      vecFieldValues.add(avg);    }  }  return new QueryEntryPacket(vecFieldNames.toArray(new String[vecFieldNames.size()]),vecFieldValues.toArray(new Object[vecFieldValues.size()]));}  }
class C{  public static boolean bboxIsValid(String bbox){  if (bbox == null || bbox.trim().isEmpty()) {    return false;  }  Matcher matcher=BBOX_PATTERN.matcher(bbox);  if (!matcher.matches()) {    return false;  }  double minLng=Double.parseDouble(matcher.group(1));  double minLat=Double.parseDouble(matcher.group(4));  double maxLng=Double.parseDouble(matcher.group(7));  double maxLat=Double.parseDouble(matcher.group(10));  if (minLng < -180d || minLng > 180d || maxLng < -180d || maxLng > 180d) {    return false;  }  if (minLat < -90d || minLat > 90d || maxLat < -90d || maxLat > 90d) {    return false;  }  return true;}  }
class C{  public static StorableHeadphoneFence during(int state){  return new StorableHeadphoneFence(STATE,state);}  }
class C{  public FriendsEditListQuery editList(UserActor actor,int listId){  return new FriendsEditListQuery(getClient(),actor,listId);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_BECOME_OFFLINE(String value0){  return new SM_SYSTEM_MESSAGE(1301019,value0);}  }
class C{  public static int classIndex(int luaState,Class clazz,String searchName) throws LuaException {synchronized (LuaStateFactory.getExistingState(luaState)) {    int res;    res=checkField(luaState,clazz,searchName);    if (res != 0) {      return 1;    }    res=checkMethod(luaState,clazz,searchName);    if (res != 0) {      return 2;    }    return 0;  }}  }
class C{  private static void makeNode(@NotNull Node root,@NotNull List<String> path,@Nullable Icon ic,boolean markConflict){  root.isProposedFile=true;  if (path.isEmpty()) {    return;  }  String name=path.get(0);  if (markConflict) {    if (path.size() == 1 && root.name.equals(name)) {      root.isConflicted=true;      return;    }  }  if (root.name.equals(name)) {    makeNode(root,rest(path),ic,markConflict);  } else   if (root.hasChild(name)) {    if (markConflict && path.size() == 1) {      Node targetNode=root.getChild(name);      targetNode.isConflicted=true;      targetNode.icon=ic;      targetNode.isProposedFile=true;      return;    }    makeNode(root.getChild(name),rest(path),ic,markConflict);  } else {    Node n=new Node();    n.name=name;    root.children.add(n);    if (path.size() == 1) {      n.icon=ic;      n.isProposedFile=true;    } else {      makeNode(n,rest(path),ic,markConflict);    }  }}  }
class C{  private void broadcastFromGm(final Player player){  PacketSendUtility.broadcastPacket(player,new SM_MESSAGE(player,message,type),true);}  }
class C{  public static <T>OperatorSemaphore<T> semaphoreLatest(Observable<Boolean> go){  return new OperatorSemaphore<>(go,true);}  }
class C{  private void checkBardEffects(int code){  if (effector instanceof Player) {    Player player=(Player)effector;    if (code == 0) {      if (player.getEffectController().isNoshowPresentBySkillId(4589)) {        player.getEffectController().removeNoshowEffect(4589);      }    } else {      if (player.getEffectController().isNoshowPresentBySkillId(4590)) {        player.getEffectController().removeNoshowEffect(4590);      }    }  }}  }
class C{  private static void check(double[][] x,double[][] y){  Matrix A=new Matrix(x);  Matrix B=new Matrix(y);  check(A,B);}  }
class C{  public static float convertSpToPixel(float sp,Context context){  if (pxForSp.containsKey(sp)) {    return pxForSp.get(sp);  }  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,context.getResources().getDisplayMetrics());  pxForSp.put(sp,px);  return px;}  }
class C{  @SuppressWarnings("checkstyle:cyclomaticcomplexity") private <T>T constructSubclass(Class<T> cls,Args mode,Stack<Class> stack){  T cachedValue=getCachedValue(cls);  if (stack.size() > MAX_STACK_DEPTH) {    LOG.error("Max stack depth of {} reached when constructing subclass for {}. Returning {}.\n{}",MAX_STACK_DEPTH,cls.getSimpleName(),cachedValue,stack);    return cachedValue;  }  if (stack.contains(cls)) {    LOG.error("Recursive constructors for subclass for {}. Returning {}.\n{}",cls.getSimpleName(),cachedValue,stack);    return cachedValue;  }  stack.push(cls);  try {    for (    Class<?> subclass : getClasses()) {      if (cls.isAssignableFrom(subclass) && !Modifier.isAbstract(subclass.getModifiers())) {        try {          @SuppressWarnings("unchecked") T arg=constructObject((Class<T>)subclass,mode,stack);          if (arg != null) {            return arg;          }        } catch (        InstantiationException e) {          LOG.debug("Instantiation exception : {}",e);        }      }    }  } catch (  ClassNotFoundException|IOException ignore) {  } finally {    stack.pop();  }  return cachedValue;}  }
class C{  protected BaseGameActivity(int requestedClients){  super();  setRequestedClients(requestedClients);}  }
class C{  public static boolean isTableFile(String fileName){  try {    try (RandomAccessFile raf=new RandomAccessFile(fileName,"r")){      final byte[] magicNumber=new byte[3];      raf.read(magicNumber);      return Basic.toString(magicNumber).equals(MAGIC_NUMBER) || Basic.toString(magicNumber).equals(MAGIC_NUMBERX);    }   } catch (  Exception ex) {    return false;  }}  }
class C{  public static boolean hasParentType(Delegator delegator,String entityName,String primaryKey,String childType,String parentTypeField,String parentType){  GenericValue childTypeValue=null;  try {    childTypeValue=EntityQuery.use(delegator).from(entityName).where(primaryKey,childType).cache(true).queryOne();  } catch (  GenericEntityException e) {    Debug.logError("Error finding " + entityName + " record for type "+ childType,module);  }  if (childTypeValue != null) {    if (parentType.equals(childTypeValue.getString(primaryKey)))     return true;    if (childTypeValue.getString(parentTypeField) != null) {      if (parentType.equals(childTypeValue.getString(parentTypeField))) {        return true;      } else {        return hasParentType(delegator,entityName,primaryKey,childTypeValue.getString(parentTypeField),parentTypeField,parentType);      }    }  }  return false;}  }
class C{  void add(VisibleObject object){  if (objects.put(object.getObjectId(),object) == null) {    if (object instanceof Player) {      checkActiveness(playerCount.incrementAndGet() > 0);    } else     if (DeveloperConfig.SPAWN_CHECK) {      Iterator<TreeSet<ZoneInstance>> zoneIter=zoneMap.values().iterator();      while (zoneIter.hasNext()) {        TreeSet<ZoneInstance> zones=zoneIter.next();        for (        ZoneInstance zone : zones) {          if (!zone.isInsideCordinate(object.getX(),object.getY(),object.getZ())) {            continue;          }          if (zone.getZoneTemplate().getZoneType() != ZoneClassName.DUMMY) {            return;          }        }      }      log.warn("Outside any zones: id=" + object + " > X:"+ object.getX()+ ",Y:"+ object.getY()+ ",Z:"+ object.getZ());    }  }}  }
class C{  public IntIterator rangeSortedBy(String field,Object lo,Object hi,int indexType){  Class type=TypeLib.getSharedType(lo,hi);  if (type == null)   throw new IllegalArgumentException("Incompatible arguments");  Index index=getIndex(field,type,true);  return index.rows(lo,hi,indexType);}  }
class C{  public Builder withShowErrors(boolean showErrors){  myShowErrors=showErrors;  return this;}  }
class C{  @Override public void addField(DataSourceFieldInterface dataSourceField){}  }
class C{  private Map<String,Pair<Type,RoleType>> computeVarTypeRoleMap(){  Map<String,Pair<Type,RoleType>> roleVarTypeMap=new HashMap<>();  if (getParentQuery() == null)   return roleVarTypeMap;  MindmapsGraph graph=getParentQuery().getGraph().orElse(null);  Type relType=getType();  Set<String> vars=getVarNames();  Map<String,Type> varTypeMap=getParentQuery().getVarTypeMap();  for (  String var : vars) {    Type type=varTypeMap.get(var);    String roleTypeId="";    for (    VarAdmin.Casting c : castings) {      if (c.getRolePlayer().getName().equals(var))       roleTypeId=c.getRoleType().flatMap(null).orElse("");    }    if (!roleTypeId.isEmpty())     roleVarTypeMap.put(var,new Pair<>(type,graph.getRoleType(roleTypeId))); else {      if (type != null) {        Set<RoleType> cRoles=getCompatibleRoleTypes(type,relType);        if (cRoles.size() == 1)         roleVarTypeMap.put(var,new Pair<>(type,cRoles.iterator().next())); else         roleVarTypeMap.put(var,new Pair<>(type,null));      }    }  }  return roleVarTypeMap;}  }
class C{  public char readChar(){  scanner.useDelimiter(EMPTY_PATTERN);  String ch=scanner.next();  assert ch.length() == 1 : "Internal (Std)In.readChar() error!" + " Please contact the authors.";  scanner.useDelimiter(WHITESPACE_PATTERN);  return ch.charAt(0);}  }
class C{  @Override public void printStackTrace(){  super.printStackTrace();  if (nested != null)   nested.printStackTrace();}  }
class C{  public Segment(final Vector2D start,final Vector2D end,final Line line){  this.start=start;  this.end=end;  this.line=line;}  }
class C{  private double computeCorrelationCoefficient(int[] x,double[] y,int n){  double sumX=0;  double sumY=0;  double sumXY=0;  double sumX2=0;  double sumY2=0;  for (int i=0; i < n; i++) {    sumX+=x[i];    sumY+=y[i];    sumXY+=x[i] * y[i];    sumX2+=x[i] * x[i];    sumY2+=y[i] * y[i];  }  final double bottom=Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));  if (bottom == 0)   return 0;  final double top=n * sumXY - sumX * sumY;  return top / bottom;}  }
class C{  public SootMethod resolveSpecialDispatch(SpecialInvokeExpr ie,SootMethod container){  SootMethod target=ie.getMethod();  if (target.getName().equals("<init>") || target.isPrivate())   return target; else   if (isSubclass(target.getDeclaringClass(),container.getDeclaringClass()))   return resolveConcreteDispatch(container.getDeclaringClass(),target); else   return target;}  }
class C{  public String toString(){  return "MbrolaAudioOutput";}  }
class C{  public static AndroidMethod createFromSignature(String signature){  if (!signature.startsWith("<"))   signature="<" + signature;  if (!signature.endsWith(">"))   signature=signature + ">";  SootMethodAndClass smac=SootMethodRepresentationParser.v().parseSootMethodString(signature);  return new AndroidMethod(smac.getMethodName(),smac.getParameters(),smac.getReturnType(),smac.getClassName());}  }
class C{  protected boolean visitNode(ASTNode node){  return true;}  }
class C{  public boolean isResumeSupported(){synchronized (lock) {    return restSupported;  }}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsLessThenOrEqualToImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 3)) {    filter=new IsLessThanOrEqualToExtended();  } else {    LiteralExpressionImpl matchCase=(LiteralExpressionImpl)parameterList.get(2);    filter=new IsLessThanOrEqualToExtended(parameterList.get(0),parameterList.get(1),(Boolean)matchCase.getValue());  }  return filter;}  }
class C{  public static Properties gatherProperties(){  if (properties == null) {    try {      String parents=System.getProperty(ConfigKeys.CONFIGURATION_PATHS,"src/main/config");      String[] split=StringUtils.split(parents,";");      properties=loadDefaultProperties();      for (      String name : split) {        File configParent=new File(StringUtils.trim(name));        loadProperties(configParent,properties);      }      overrideFromSystemProperties(properties);      setSystemProperties(properties);      overrideTimeouts(properties);    } catch (    IOException e) {      LOG.error("Can't bind properties",e);    }  }  return properties;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean isFainted(){  return getStamina() == 0;}  }
class C{  public static String slurpFile(File file) throws IOException {  Reader r=new FileReader(file);  return slurpReader(r);}  }
class C{  public void mergeHistogram(DocumentNGramHistogram dnOtherDocumentNGram,double fNewDataImportance){  java.util.Iterator iIter=dnOtherDocumentNGram.NGramHistogram.keySet().iterator();  while (iIter.hasNext()) {    String sCurNGram=(String)iIter.next();    if (this.NGramHistogram.containsKey(sCurNGram)) {      double dPrev=((Double)NGramHistogram.get(sCurNGram)).doubleValue();      double dNew=((Double)dnOtherDocumentNGram.NGramHistogram.get(sCurNGram)).doubleValue();      NGramHistogram.put(sCurNGram,dPrev + (dNew - dPrev) * fNewDataImportance);    } else {      double dNew=((Double)dnOtherDocumentNGram.NGramHistogram.get(sCurNGram)).doubleValue();      NGramHistogram.put(sCurNGram,dNew);    }  }}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  if (utterance.getRelation(Relation.WORD) == null) {    throw new IllegalStateException("Word relation has not been set");  } else   if (utterance.getRelation(Relation.SYLLABLE) != null) {    throw new IllegalStateException("Syllable relation has already been set");  } else   if (utterance.getRelation(Relation.SYLLABLE_STRUCTURE) != null) {    throw new IllegalStateException("SylStructure relation has already been set");  } else   if (utterance.getRelation(Relation.SEGMENT) != null) {    throw new IllegalStateException("Segment relation has already been set");  }  String stress=NO_STRESS;  Relation syl=utterance.createRelation(Relation.SYLLABLE);  Relation sylstructure=utterance.createRelation(Relation.SYLLABLE_STRUCTURE);  Relation seg=utterance.createRelation(Relation.SEGMENT);  Lexicon lex=utterance.getVoice().getLexicon();  List syllableList=null;  for (Item word=utterance.getRelation(Relation.WORD).getHead(); word != null; word=word.getNext()) {    Item ssword=sylstructure.appendItem(word);    Item sylItem=null;    Item segItem=null;    Item sssyl=null;    String[] phones=null;    Item token=word.getItemAs("Token");    FeatureSet featureSet=null;    if (token != null) {      Item parent=token.getParent();      featureSet=parent.getFeatures();    }    if (featureSet != null && featureSet.isPresent("phones")) {      phones=(String[])featureSet.getObject("phones");    } else {      phones=lex.getPhones(word.toString(),null);    }    assert phones != null;    for (int j=0; j < phones.length; j++) {      if (sylItem == null) {        sylItem=syl.appendItem();        sssyl=ssword.addDaughter(sylItem);        stress=NO_STRESS;        syllableList=new ArrayList();      }      segItem=seg.appendItem();      if (isStressed(phones[j])) {        stress=STRESS;        phones[j]=deStress(phones[j]);      }      segItem.getFeatures().setString("name",phones[j]);      sssyl.addDaughter(segItem);      syllableList.add(phones[j]);      if (lex.isSyllableBoundary(syllableList,phones,j + 1)) {        sylItem=null;        if (sssyl != null) {          sssyl.getFeatures().setString("stress",stress);        }      }    }  }  assert utterance.getRelation(Relation.WORD) != null;  assert utterance.getRelation(Relation.SYLLABLE) != null;  assert utterance.getRelation(Relation.SYLLABLE_STRUCTURE) != null;  assert utterance.getRelation(Relation.SEGMENT) != null;}  }
class C{  private void populateContrastEnhancementGroup(GroupIdEnum channelGroup,FieldIdEnum nameField,GroupIdEnum contrastGroup,FieldIdEnum gammaField,GroupIdEnum methodField,SelectedChannelType channelType){  String name="";  if (channelType != null) {    name=channelType.getChannelName();  }  fieldConfigVisitor.populateTextField(nameField,name);  GroupConfigInterface contrastGrp=getGroup(contrastGroup);  ContrastEnhancement contrastEnhancement=null;  if (channelType != null) {    contrastEnhancement=channelType.getContrastEnhancement();  }  contrastGrp.enable(contrastEnhancement != null);  if (contrastEnhancement != null) {    fieldConfigVisitor.populateField(gammaField,contrastEnhancement.getGammaValue());    populateContrastMethod(contrastEnhancement,methodField);  }}  }
class C{  public void startSearcherPruningThread(CountDownLatch shutdownNow){  if (searcherPruningThread == null) {    searcherPruningThread=new SearcherPruningThread(shutdownNow);    searcherPruningThread.setName("LuceneSearcherPruning-" + name);    searcherPruningThread.start();  }}  }
class C{  public Zmat(Zdiagmat D){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  nrow=D.n;  ncol=D.n;  getProperties();  re=new double[nr][nc];  im=new double[nr][nc];  for (int i=0; i < nr; i++) {    re[i][i]=D.re[i];    im[i][i]=D.im[i];  }}  }
class C{  public static Replacement replacement(Object... os){  Replacement replacement=new Replacement();  for (  Object o : os) {    if (o instanceof String) {      replacement.addPart(new StringReplacementPart((String)o));    } else     if (o instanceof Character) {      replacement.addPart(new StringReplacementPart("" + (Character)o));    } else     if (o instanceof CaptureGroup) {      replacement.addPart(new CaptureGroupReplacementPart((CaptureGroup)o));    }  }  return replacement;}  }
class C{  @Override public void startMerging(){  for (  Api api : getModel().getServiceConfig().getApisList()) {    Interface including=resolveInterface(api.getName(),getLocationInConfig(api,"name"));    for (    Mixin mixin : api.getMixinsList()) {      Interface included=resolveInterface(mixin.getName(),getLocationInConfig(mixin,"name"));      if (including == null || included == null) {        continue;      }      MixinAttribute mixinAttr=MixinAttribute.create(included,mixin);      including.addAttribute(MixinAttribute.KEY,mixinAttr);      for (      Method method : included.getMethods()) {        startMergeMethod(including,method);      }    }  }}  }
class C{  public boolean isUseMemoryOnlySearch(){  return useMemoryOnlySearch;}  }
class C{  protected MarketReportCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public DataReadOnlyException(Throwable cause){  super(cause);}  }
class C{  public void join(String tableName,String leftColumnName,String rightColumnName){  this.joinTableNames.add(tableName);  this.joinLeftColumnNames.add(leftColumnName);  this.joinRightColumnNames.add(rightColumnName);}  }
class C{  public static boolean isEnabled(){  return enabled;}  }
class C{  public boolean containsNestedExpression(){  return fse != null;}  }
class C{  public void addProvider(AXmlNode node){  if (providers.isEmpty())   providers=new ArrayList<AXmlNode>();  providers.add(node);}  }
class C{  @Nullable public Interface lookupInterface(String fullName){  return interfaceByName.get(fullName);}  }
class C{  private void copyUriToFile(Uri uri,File destFile) throws IOException {  InputStream source=null;  FileOutputStream dest=null;  try {    source=getActivity().getContentResolver().openInputStream(uri);    dest=new FileOutputStream(destFile);    ByteStreams.copy(source,dest);  }  finally {    if (source != null) {      source.close();    }    if (dest != null) {      dest.close();    }  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public final byte readByte() throws IOException {  return dis.readByte();}  }
class C{  public void addItemFromInflater(Preference preference){  addPreference(preference);}  }
class C{  public String toString(){  return "ClusterUnitSelector";}  }
class C{  @Override public void onTokenRefresh(){  super.onTokenRefresh();  String refreshedToken=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"Refreshed token: " + refreshedToken);  sendRegistrationToServer(refreshedToken);}  }
class C{  @Override public int hashCode(){  return this.getColumnSchema().getColumnUniqueId().hashCode();}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  @Override protected void clearCachedAuthorizationInfo(PrincipalCollection principals){  if (_clearCaches) {    super.clearCachedAuthorizationInfo(principals);  }}  }
class C{  public static void unregisterTransportMBean(String containerName) throws Exception {  MBeanServer mBeanServer=getMBeanServer(containerName);  if (mBeanServer == null)   return;  ObjectName transportMBeanObjectName=TransportConstants.createTransportMBeanObjectName(containerName);  if (mBeanServer.isRegistered(transportMBeanObjectName)) {    mBeanServer.unregisterMBean(transportMBeanObjectName);    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Transport MBean was unregistered successfully.");    }  }}  }
class C{  public Vector2f mult(float scalar,Vector2f product){  if (null == product) {    product=new Vector2f();  }  product.x=x * scalar;  product.y=y * scalar;  return product;}  }
class C{  protected float calculateAnimationDisplacement(float initialVelocity,float duration){  return initialVelocity * duration / 2000;}  }
class C{  public VideoGetNewTagsQuery(VkApiClient client,UserActor actor){  super(client,"video.getNewTags",GetNewTagsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public Builder withCommandName(@NotNull String commandName){  myCommandName=commandName;  return this;}  }
class C{  private static List<PsiDirectory> filterDirectories(Project project,PsiDirectory[] directories){  if (directories.length == 0) {    return ImmutableList.of();  }  ProjectViewSet projectViewSet=ProjectViewManager.getInstance(project).getProjectViewSet();  if (projectViewSet == null) {    return ImmutableList.of();  }  WorkspaceRoot workspaceRoot=WorkspaceRoot.fromProject(project);  ImportRoots importRoots=ImportRoots.builder(workspaceRoot,Blaze.getBuildSystem(project)).add(projectViewSet).build();  return Lists.newArrayList(directories).stream().filter(null).collect(Collectors.toList());}  }
class C{  @SuppressLint("InlinedApi") @SuppressWarnings("deprecation") private static String createSalt(Context context){  String abiString;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    abiString=Build.SUPPORTED_ABIS[0];  } else {    abiString=Build.CPU_ABI;  }  String fingerprint="HA" + (Build.BOARD.length() % 10) + (Build.BRAND.length() % 10)+ (abiString.length() % 10)+ (Build.PRODUCT.length() % 10);  String serial="";  try {    serial=android.os.Build.class.getField("SERIAL").get(null).toString();  } catch (  Throwable t) {  }  return fingerprint + ":" + serial;}  }
class C{  public void writeFloat(float value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_FLOAT);    this.dataOut.writeFloat(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  @Override public long addOrder(Order order){  return sessionTemplate.insert(NAMESPACE + ".addOrder",order);}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (spinner != null) {      return spinner.isEnabled();    }  }  return false;}  }
class C{  private Iterator<Row<ByteBuffer,UUID>> rowScan(final DeltaPlacement placement,final ByteBufferRange rowRange,final ByteBufferRange columnRange,final LimitCounter limit,final ReadConsistency consistency){  return rowScan(placement,placement.getDeltaColumnFamily(),rowRange,columnRange,limit,consistency);}  }
class C{  public MonotoneChain(final boolean includeCollinearPoints,final double tolerance){  super(includeCollinearPoints,tolerance);}  }
class C{  protected LikesGetListQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  @Override public long readLong(String filePath,long offset){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.LONG_SIZE_IN_BYTE,offset);  return byteBffer.getLong();}  }
class C{  public Storage(){  this(new File(getTemporaryStorageDirectoryString()));}  }
class C{  protected GroupsInviteQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @PostConstruct public void init(){  listenerContainer=cacheRegistrationService.registerToAlarms(this);}  }
class C{  @NonNull public static History single(@NonNull Object key){  return emptyBuilder().push(key).build();}  }
class C{  public void initGui(){  this.buttonList.clear();  this.initProfileList();  this.profileListCtrl=new GuiSelectSettingsProfile.List();  this.profileListCtrl.registerScrollButtons(4,5);  this.initGuiButtons();  updateButtonEnablement(this.selectedProfile);}  }
class C{  synchronized public void terminate(){  if (_isTerminated)   return;  _isTerminated=true;  if (Thread.currentThread() != this)   interrupt();  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,toString() + " active failure detector has terminated");}  }
class C{  private void toggleListGridLayout(){  cityWeatherAdapter.setOnCityWeatherClickListener(null);  List<CityWeather> cityWeatherList=cityWeatherAdapter.getCityWeatherList();  if (isLinearLayoutEnabled) {    cityWeatherRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));    cityWeatherAdapter=new CityWeatherAdapter(getContext(),new ArrayList<>(),R.layout.item_city_weather);  } else {    cityWeatherRecyclerView.setLayoutManager(new GridLayoutManager(getContext(),2));    cityWeatherAdapter=new CityWeatherAdapter(getContext(),new ArrayList<>(),R.layout.item_city_weather_card);  }  cityWeatherAdapter.setOnCityWeatherClickListener(onCityWeatherClickListener);  cityWeatherAdapter.setOnCityWeatherFavoriteSelectListener(onCityWeatherFavoriteSelectListener);  cityWeatherAdapter.setCityWeatherList(cityWeatherList);  cityWeatherRecyclerView.setAdapter(cityWeatherAdapter);}  }
class C{  private void createUI(){  panel=new JPanel();  panel.setLayout(null);  createField(FIELD_SERVER,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.server"));  createField(FIELD_PORT,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.port"));  createField(FIELD_DATABASE,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.database"));  createField(FIELD_USER,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.username"));  createField(FIELD_PASSWORD,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.password"));  panel.setPreferredSize(new Dimension(FIELD_X + FIELD_WIDTH,textFieldMap.size() * ROW_HEIGHT));}  }
class C{  @Override public void write(String str) throws IOException {  out.write(str);}  }
class C{  public ParetoDistribution(double scale,double shape,double inverseCumAccuracy) throws MathIllegalArgumentException {  super(inverseCumAccuracy);  if (scale <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SCALE,scale);  }  if (shape <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SHAPE,shape);  }  this.scale=scale;  this.shape=shape;}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ViewerBase;}  }
class C{  public VideoRestoreQuery(VkApiClient client,UserActor actor,int videoId){  super(client,"video.restore",OkResponse.class);  accessToken(actor.getAccessToken());  videoId(videoId);}  }
class C{  @PostConstruct public void init(){  listenerContainer=supervisionNotifier.registerAsListener(this);}  }
class C{  @Override protected void afterRead(int n) throws IOException {  if (n == -1) {    close();  }}  }
class C{  public void updateErrorDisplay(@Nullable final RenderResult result){  assert ApplicationManager.getApplication().isDispatchThread() || !ApplicationManager.getApplication().isReadAccessAllowed() : "Do not hold read lock when calling updateErrorDisplay!";  getErrorQueue().cancelAllUpdates();  myRenderHasProblems=result != null && result.getLogger().hasProblems();  if (myRenderHasProblems) {    updateErrors(result);  } else {    UIUtil.invokeLaterIfNeeded(null);  }}  }
class C{  static boolean equal(Object[] arr1,Object[] arr2){  if (arr1 == arr2) {    return true;  } else   if (arr1.length != arr2.length) {    return false;  }  for (int i=arr1.length; --i >= 0; ) {    if (!contains(arr2,arr2.length,arr1[i])) {      return false;    }  }  return true;}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public static File stream2file(InputStream in) throws IOException {  final File tempFile=File.createTempFile(PREFIX,SUFFIX);  try (FileOutputStream out=new FileOutputStream(tempFile)){    IOUtils.copy(in,out);  }   String newFont=getFontForOS();  if (newFont.compareToIgnoreCase(DEFAULT_FONT) != 0) {    BufferedReader br=new BufferedReader(new FileReader(tempFile));    try {      StringBuilder sb=new StringBuilder();      String line=br.readLine();      while (line != null) {        sb.append(line.replace(DEFAULT_FONT,newFont));        sb.append("\n");        line=br.readLine();      }      try {        FileWriter fileWriter=new FileWriter(tempFile);        fileWriter.write(sb.toString());        fileWriter.flush();        fileWriter.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  finally {      br.close();    }  }  return tempFile;}  }
class C{  public static boolean load(String where,Object[] args,String orderby,Bean b){  Table mapping=(Table)b.getClass().getAnnotation(Table.class);  if (mapping == null) {    if (log.isErrorEnabled())     log.error("mapping missed in [" + b.getClass() + "] declaretion");    return false;  }  return load(mapping.name(),where,args,orderby,b);}  }
class C{  static void decorate(@NotNull ColoredTextContainer container,@NotNull NlComponent component){  append(container,component);  container.setIcon(getViewHandler(component).getIcon(component));}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null) {    return filename1 == null && filename2 == null;  }  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  public JSearchPanel(TupleSet source,SearchTupleSet search,String[] fields,boolean autoIndex,boolean monitorKeystrokes){  m_lock=new Object();  m_fields=fields;  m_autoIndex=autoIndex;  m_monitorKeys=monitorKeystrokes;  m_searcher=(search != null ? search : new PrefixSearchTupleSet());  init(source);}  }
