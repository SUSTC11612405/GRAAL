class C{  public DNetscapeSslServerName(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeSslServerName.Title"));  initComponents();}  }
class C{  private boolean isLeaderRegistered(SolrZkClient zkClient,ClusterState clusterState) throws KeeperException, InterruptedException {  return zkClient.exists(this.getZnodePath(),watcher,true) != null;}  }
class C{  private void jbInit() throws Exception {  showAll.setText(Msg.getMsg(Env.getCtx(),"ShowAll"));  showAll.addActionListener(this);  showAll.setAttribute("zk_component_ID","Lookup_Criteria_showAll");  m_table.setAttribute("zk_component_ID","Lookup_Data_ASIResults");  Borderlayout borderlayout=new Borderlayout();  setAttribute(Window.MODE_MODAL,Boolean.TRUE);  setBorder("normal");  setClosable(true);  this.setContentStyle("overflow: auto");  this.setSizable(true);  this.setMaximizable(true);  this.setWidth("100%");  this.setHeight("100%");  this.setMaximized(true);  borderlayout.setWidth("100%");  borderlayout.setHeight("100%");  borderlayout.setStyle("border: none; position: relative");  this.appendChild(borderlayout);  North north=new North();  borderlayout.appendChild(north);  Div div=new Div();  div.setAlign("right");  div.appendChild(showAll);  north.appendChild(div);  Center center=new Center();  center.setAutoscroll(true);  center.setFlex(true);  borderlayout.appendChild(center);  center.appendChild(m_table);  South south=new South();  borderlayout.appendChild(south);  south.appendChild(confirmPanel);  confirmPanel.addActionListener(this);}  }
class C{  void decryptUsingKeyTab(KeyTab ktab,KrbAsReq asReq,PrincipalName cname) throws KrbException, Asn1Exception, IOException {  EncryptionKey dkey=null;  int encPartKeyType=rep.encPart.getEType();  Integer encPartKvno=rep.encPart.kvno;  try {    dkey=EncryptionKey.findKey(encPartKeyType,encPartKvno,Krb5Util.keysFromJavaxKeyTab(ktab,cname));  } catch (  KrbException ke) {    if (ke.returnCode() == Krb5.KRB_AP_ERR_BADKEYVER) {      dkey=EncryptionKey.findKey(encPartKeyType,Krb5Util.keysFromJavaxKeyTab(ktab,cname));    }  }  if (dkey == null) {    throw new KrbException(Krb5.API_INVALID_ARG,"Cannot find key for type/kvno to decrypt AS REP - " + EType.toString(encPartKeyType) + "/"+ encPartKvno);  }  decrypt(dkey,asReq);}  }
class C{  public static void verifyNonNegativeDirSize(int[] sizes){  for (int i=0; i < sizes.length; i++) {    if (sizes[i] < 0) {      throw new IllegalArgumentException(LocalizedStrings.AttributesFactory_DIR_SIZE_CANNOT_BE_NEGATIVE_0.toLocalizedString(Integer.valueOf(sizes[i])));    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void complete(Symbol sym) throws CompletionFailure {  if (!completionEnabled) {    Assert.check((sym.flags() & Flags.COMPOUND) == 0);    sym.completer=this;    return;  }  ClassSymbol c=(ClassSymbol)sym;  ClassType ct=(ClassType)c.type;  Env<AttrContext> env=typeEnvs.get(c);  JCClassDecl tree=(JCClassDecl)env.tree;  boolean wasFirst=isFirst;  isFirst=false;  try {    annotate.enterStart();    JavaFileObject prev=log.useSource(env.toplevel.sourcefile);    DiagnosticPosition prevLintPos=deferredLintHandler.setPos(tree.pos());    try {      halfcompleted.append(env);      c.flags_field|=UNATTRIBUTED;      if (c.owner.kind == PCK) {        memberEnter(env.toplevel,env.enclosing(TOPLEVEL));        todo.append(env);      }      if (c.owner.kind == TYP)       c.owner.complete();      Env<AttrContext> baseEnv=baseEnv(tree,env);      if (tree.extending != null)       typeAnnotate(tree.extending,baseEnv,sym,tree.pos());      for (      JCExpression impl : tree.implementing)       typeAnnotate(impl,baseEnv,sym,tree.pos());      annotate.flush();      Type supertype=(tree.extending != null) ? attr.attribBase(tree.extending,baseEnv,true,false,true) : ((tree.mods.flags & Flags.ENUM) != 0) ? attr.attribBase(enumBase(tree.pos,c),baseEnv,true,false,false) : (c.fullname == names.java_lang_Object) ? Type.noType : syms.objectType;      ct.supertype_field=modelMissingTypes(supertype,tree.extending,false);      ListBuffer<Type> interfaces=new ListBuffer<Type>();      ListBuffer<Type> all_interfaces=null;      Set<Type> interfaceSet=new HashSet<Type>();      List<JCExpression> interfaceTrees=tree.implementing;      for (      JCExpression iface : interfaceTrees) {        Type i=attr.attribBase(iface,baseEnv,false,true,true);        if (i.hasTag(CLASS)) {          interfaces.append(i);          if (all_interfaces != null)           all_interfaces.append(i);          chk.checkNotRepeated(iface.pos(),types.erasure(i),interfaceSet);        } else {          if (all_interfaces == null)           all_interfaces=new ListBuffer<Type>().appendList(interfaces);          all_interfaces.append(modelMissingTypes(i,iface,true));        }      }      if ((c.flags_field & ANNOTATION) != 0) {        ct.interfaces_field=List.of(syms.annotationType);        ct.all_interfaces_field=ct.interfaces_field;      } else {        ct.interfaces_field=interfaces.toList();        ct.all_interfaces_field=(all_interfaces == null) ? ct.interfaces_field : all_interfaces.toList();      }      if (c.fullname == names.java_lang_Object) {        if (tree.extending != null) {          chk.checkNonCyclic(tree.extending.pos(),supertype);          ct.supertype_field=Type.noType;        } else         if (tree.implementing.nonEmpty()) {          chk.checkNonCyclic(tree.implementing.head.pos(),ct.interfaces_field.head);          ct.interfaces_field=List.nil();        }      }      attr.attribAnnotationTypes(tree.mods.annotations,baseEnv);      if (hasDeprecatedAnnotation(tree.mods.annotations))       c.flags_field|=DEPRECATED;      annotateLater(tree.mods.annotations,baseEnv,c,tree.pos());      chk.checkNonCyclicDecl(tree);      attr.attribTypeVariables(tree.typarams,baseEnv);      for (      JCTypeParameter tp : tree.typarams)       typeAnnotate(tp,baseEnv,sym,tree.pos());      if ((c.flags() & INTERFACE) == 0 && !TreeInfo.hasConstructors(tree.defs)) {        List<Type> argtypes=List.nil();        List<Type> typarams=List.nil();        List<Type> thrown=List.nil();        long ctorFlags=0;        boolean based=false;        boolean addConstructor=true;        JCNewClass nc=null;        if (c.name.isEmpty()) {          nc=(JCNewClass)env.next.tree;          if (nc.constructor != null) {            addConstructor=nc.constructor.kind != ERR;            Type superConstrType=types.memberType(c.type,nc.constructor);            argtypes=superConstrType.getParameterTypes();            typarams=superConstrType.getTypeArguments();            ctorFlags=nc.constructor.flags() & VARARGS;            if (nc.encl != null) {              argtypes=argtypes.prepend(nc.encl.type);              based=true;            }            thrown=superConstrType.getThrownTypes();          }        }        if (addConstructor) {          MethodSymbol basedConstructor=nc != null ? (MethodSymbol)nc.constructor : null;          JCTree constrDef=DefaultConstructor(make.at(tree.pos),c,basedConstructor,typarams,argtypes,thrown,ctorFlags,based);          tree.defs=tree.defs.prepend(constrDef);        }      }      VarSymbol thisSym=new VarSymbol(FINAL | HASINIT,names._this,c.type,c);      thisSym.pos=Position.FIRSTPOS;      env.info.scope.enter(thisSym);      if ((c.flags_field & INTERFACE) == 0 && ct.supertype_field.hasTag(CLASS)) {        VarSymbol superSym=new VarSymbol(FINAL | HASINIT,names._super,ct.supertype_field,c);        superSym.pos=Position.FIRSTPOS;        env.info.scope.enter(superSym);      }      if (checkClash && c.owner.kind == PCK && c.owner != syms.unnamedPackage && reader.packageExists(c.fullname)) {        log.error(tree.pos,"clash.with.pkg.of.same.name",Kinds.kindName(sym),c);      }      if (c.owner.kind == PCK && (c.flags_field & PUBLIC) == 0 && !env.toplevel.sourcefile.isNameCompatible(c.name.toString(),JavaFileObject.Kind.SOURCE)) {        c.flags_field|=AUXILIARY;      }    } catch (    CompletionFailure ex) {      chk.completionError(tree.pos(),ex);    } finally {      deferredLintHandler.setPos(prevLintPos);      log.useSource(prev);    }    if (wasFirst) {      try {        while (halfcompleted.nonEmpty()) {          Env<AttrContext> toFinish=halfcompleted.next();          finish(toFinish);          if (allowTypeAnnos) {            typeAnnotations.organizeTypeAnnotationsSignatures(toFinish,(JCClassDecl)toFinish.tree);            typeAnnotations.validateTypeAnnotationsSignatures(toFinish,(JCClassDecl)toFinish.tree);          }        }      }  finally {        isFirst=true;      }    }  }  finally {    annotate.enterDone();  }}  }
class C{  public boolean isEdgeAddable(Edge edge,Graph graph){  return (Edges.isDirectedEdge(edge) || Edges.isNondirectedEdge(edge) || Edges.isUndirectedEdge(edge));}  }
class C{  public RecycledViewRenderer recycleWith(Context ctx,View view){  attachContext(ctx);  _view=view;  return this;}  }
class C{  private String readText(InputNode from) throws Exception {  EventNode event=reader.peek();  while (stack.top() == from) {    if (event.isText()) {      fillText(from);    } else {      break;    }    event=reader.next();    event=reader.peek();  }  return readBuffer(from);}  }
class C{  public static int ESPIPE(){  return Errno.ESPIPE.intValue();}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  private boolean isInsertingSpacesForTab(){  return fProject.getFormatOptions().getConvertTabsToSpaces();}  }
class C{  public boolean isBaseLanguage(){  Object oo=get_Value(COLUMNNAME_IsBaseLanguage);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ServiceCall<Conversation> createConversation(final String dialogId){  Conversation conversation=new Conversation();  conversation.setDialogId(dialogId);  return converse(conversation,null);}  }
class C{  private void zipResults(File resultsDir){  try {    File zipResultFile=new File(resultsDir.getParent(),String.format("%s.zip",resultsDir.getName()));    FileUtil.createZip(resultsDir,zipResultFile);  } catch (  IOException e) {    Log.w(LOG_TAG,String.format("Failed to create zip for %s",resultsDir.getName()));  }}  }
class C{  @Override public void checkProfile(){  log("Checking direct messages.",Level.FINE);  checkDirectMessages();  log("Done checking messages.",Level.FINE);}  }
class C{  @Override @Deprecated public List<LinkedNotebook> listNotebooks() throws EDAMUserException, EDAMSystemException, TException, EDAMNotFoundException {  List<LinkedNotebook> linkedNotebooks=new ArrayList<>();  for (  LinkedNotebook notebook : super.listNotebooks()) {    if (notebook.isSetBusinessId()) {      linkedNotebooks.add(notebook);    }  }  return linkedNotebooks;}  }
class C{  public void close(){  assert mState == State.END_BLOCK;  mState=State.CLOSED;  mOut.close();}  }
class C{  public GenericGF(int primitive,int size){  this.primitive=primitive;  this.size=size;  if (size <= INITIALIZATION_THRESHOLD) {    initialize();  }}  }
class C{  public void fillOval(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling oval: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillOval(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillOval(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillOval(x,y,width,height);}  }
class C{  public ByteList ConstantIntegerInfo(int value){  if (show_bytecode) {    cpool_out.write("\n      ConstantIntegerInfo " + value);  }  Integer num=IntegerPool.getNumber(value);  if (intConstants.containsKey(num)) {    return intConstants.get(num);  }  ByteList bytes=allocBytes(5);  bytes=Int(bytes,value);  intConstants.put(num,bytes);  return bytes;}  }
class C{  public synchronized void listNotGotten(PrintWriter p){  Vector vec=new Vector();  Hashtable all=new Hashtable();  _list(null,false,null,all);  Enumeration e=gotten.keys();  while (e.hasMoreElements())   all.remove(e.nextElement());  e=all.keys();  while (e.hasMoreElements())   vec.addElement(e.nextElement());  Object[] array=new Object[vec.size()];  vec.copyInto(array);  java.util.Collections.sort(vec);  for (int x=0; x < array.length; x++) {    String s=(String)(array[x]);    String v=null;    if (s != null) {      v=(String)(_get(s));      uncheck();    }    if (v == null)     v=UNKNOWN_VALUE;    p.println(s + " = " + v);  }  p.flush();}  }
class C{  public E putObject(final String key,@Nullable final ShareOpenGraphObject value){  this.bundle.putParcelable(key,value);  return (E)this;}  }
class C{  public void add(int index,E element){  hashCodeUpToDate=false;  ensureCapacityInternal(size + 1);  System.arraycopy(elementData,index,elementData,index + 1,size - index);  elementData[index]=element;  size++;}  }
class C{  @Override public boolean insertObjectToGrid(UUID entryNode,String unlocalizedName,Object object){  graphServer.addCargo(new TransportContainer(entryNode,unlocalizedName,object));  return true;}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("UnixPrincipal.name","sun.security.util.AuthResources"));  Object[] source={name};  return form.format(source);}  }
class C{  private void validateBucket2NodeBeforePutInMultiplePartitionedRegion(int startIndexForRegion,int endIndexForRegion) throws Throwable {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  async[0]=vm[0].invokeAsync(validateBucket2NodeBeforePut(startIndexForRegion,endIndexForRegion));  async[1]=vm[1].invokeAsync(validateBucket2NodeBeforePut(startIndexForRegion,endIndexForRegion));  async[2]=vm[2].invokeAsync(validateBucket2NodeBeforePut(startIndexForRegion,endIndexForRegion));  async[3]=vm[3].invokeAsync(validateBucket2NodeBeforePut(startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      LogWriterUtils.getLogWriter().warning("Failure in async invocation on vm " + vm[count] + " with exception "+ async[count].getException());      throw async[count].getException();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.724 -0500",hash_original_method="5B227975880483464D857E333DC9323C",hash_generated_method="0C39C85BC19025CB510FC9F307AE3C08") public HeaderGroup copy(){  HeaderGroup clone=new HeaderGroup();  clone.headers.addAll(this.headers);  return clone;}  }
class C{  public String parseFormula(String formula,Node node){  String subformula;  String restFormula;  Node left;  Node right;  char op;  if (formula == null) {    return null;  }  subformula=parseValue(formula,node);  if (subformula == null || subformula.length() == 0) {    return null;  }  if (subformula.equals(formula)) {    return formula;  }switch (op=subformula.charAt(0)) {case 0:    return null;case ')':  return subformula;case '+':case '*':case '-':case '/':restFormula=subformula.substring(1);subformula=parseValue(restFormula,right=new Node());if (subformula == null ? restFormula != null : !subformula.equals(restFormula)) {left=new Node(node);node.left=left;node.right=right;node.op=op;node.type=Node.OP;return subformula;} else {return formula;}default :return formula;}}  }
class C{  public void save(final ServerConfType conf) throws Exception {  doInTransaction(null);}  }
class C{  public String searchpopup() throws Exception {  executeQuery();  return POPUP_VIEW;}  }
class C{  public void testRecover() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  if (versionMeetsMinimum(5,7) && !versionMeetsMinimum(5,7,5)) {    return;  }  if (versionMeetsMinimum(5,7,1) && !versionMeetsMinimum(5,7,3)) {    return;  }  XAConnection xaConn=null, recoverConn=null;  try {    xaConn=getXAConnection();    Connection c=xaConn.getConnection();    Xid xid=createXid();    XAResource xaRes=xaConn.getXAResource();    xaRes.start(xid,XAResource.TMNOFLAGS);    c.createStatement().execute("SELECT 1");    xaRes.end(xid,XAResource.TMSUCCESS);    xaRes.prepare(xid);    recoverConn=getXAConnection();    XAResource recoverRes=recoverConn.getXAResource();    Xid[] recoveredXids=recoverRes.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN);    assertTrue(recoveredXids != null);    assertTrue(recoveredXids.length > 0);    boolean xidFound=false;    for (int i=0; i < recoveredXids.length; i++) {      if (recoveredXids[i] != null && recoveredXids[i].equals(xid)) {        xidFound=true;        break;      }    }    assertTrue(xidFound);    recoverRes=recoverConn.getXAResource();    recoveredXids=recoverRes.recover(XAResource.TMSTARTRSCAN);    assertTrue(recoveredXids != null);    assertTrue(recoveredXids.length > 0);    xidFound=false;    for (int i=0; i < recoveredXids.length; i++) {      if (recoveredXids[i] != null && recoveredXids[i].equals(xid)) {        xidFound=true;        break;      }    }    assertTrue(xidFound);    recoverRes.recover(XAResource.TMSTARTRSCAN);    recoverRes.recover(XAResource.TMENDRSCAN);    recoverRes.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN);    try {      recoverRes.recover(XAResource.TMSUCCESS);      fail("XAException should have been thrown");    } catch (    XAException xaEx) {      assertEquals(XAException.XAER_INVAL,xaEx.errorCode);    }  }  finally {    if (xaConn != null) {      xaConn.close();    }    if (recoverConn != null) {      recoverConn.close();    }  }}  }
class C{  public static Thread consumeProcessErrorStream(Process self,Appendable error){  Thread thread=new Thread(new TextDumper(self.getErrorStream(),error));  thread.start();  return thread;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatecomment.class,args);}  }
class C{  protected void init(){  status=STATUS_OK;  frameCount=0;  framePointer=-1;  frames=new ArrayList<GifFrame>();  gct=null;}  }
class C{  public double distance(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  @Before public void before() throws Exception {  tmpSolrHome=createTempDir().toFile();  FileUtils.copyDirectory(new File(TEST_HOME()),tmpSolrHome.getAbsoluteFile());  final SortedMap<ServletHolder,String> extraServlets=new TreeMap<>();  final ServletHolder solrRestApi=new ServletHolder("SolrSchemaRestApi",ServerServlet.class);  solrRestApi.setInitParameter("org.restlet.application","org.apache.solr.rest.SolrSchemaRestApi");  extraServlets.put(solrRestApi,"/schema/*");  System.setProperty("managed.schema.mutable","true");  System.setProperty("enable.update.log","false");  createJettyAndHarness(tmpSolrHome.getAbsolutePath(),"solrconfig-managed-schema.xml","schema-rest.xml","/solr",true,extraServlets);}  }
class C{  public UsageLicenseHistory(UsageLicense c){  super(c);  if (c.getSubscription() != null) {    setSubscriptionObjKey(c.getSubscription().getKey());  }  if (c.getUser() != null) {    setUserObjKey(c.getUser().getKey());  }  if (c.getRoleDefinition() != null) {    setRoleDefinitionObjKey(Long.valueOf(c.getRoleDefinition().getKey()));  }}  }
class C{  public static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  private HttpResponse executeDelete(String bucketName,String objectName,Map<String,String> queryParamMap) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  updateRegionCache(bucketName);  HttpResponse response=execute(Method.DELETE,BucketRegionCache.INSTANCE.region(bucketName),bucketName,objectName,null,queryParamMap,null,null,0);  response.body().close();  return response;}  }
class C{  public static non_terminal find(String with_name){  if (with_name == null)   return null; else   return (non_terminal)_all.get(with_name);}  }
class C{  protected void sendUrgentData(int data) throws IOException {  throw new RuntimeException("Sending urgent data is not supported");}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  checkClosed();  return iface.isInstance(this);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.683 -0500",hash_original_method="25439235D86C904EDC7CD1B76214296A",hash_generated_method="1C437CDD5C62F5899CF06D0019BF182B") public void sendKeys(int... keys){  final int count=keys.length;  final Instrumentation instrumentation=getInstrumentation();  for (int i=0; i < count; i++) {    try {      instrumentation.sendKeyDownUpSync(keys[i]);    } catch (    SecurityException e) {    }  }  instrumentation.waitForIdleSync();}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  public StrStrMap(){}  }
class C{  private void addVolumesToProtectionSet(URI protectionSetURI,List<Volume> volumes){  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,protectionSetURI);  StringSet vols=new StringSet();  for (  Volume volume : volumes) {    vols.add(volume.getId().toString());  }  protectionSet.setVolumes(vols);  _dbClient.persistObject(protectionSet);}  }
class C{  public void addRequestProperty(String key,String value){  delegate.addRequestProperty(key,value);}  }
class C{  public void testReadDoesNotBlockUnnecessarily() throws IOException {  PipedInputStream pin=new PipedInputStream();  PipedOutputStream pos=new PipedOutputStream(pin);  pos.write("hello".getBytes("UTF-8"));  InputStreamReader reader=new InputStreamReader(pin);  char[] buffer=new char[1024];  int count=reader.read(buffer);  assertEquals(5,count);}  }
class C{  public void put(int key,int value){  if (key < 0)   Kit.codeBug();  int index=ensureIndex(key,true);  if (ivaluesShift == 0) {    int N=1 << power;    if (keys.length != N * 2) {      int[] tmp=new int[N * 2];      System.arraycopy(keys,0,tmp,0,N);      keys=tmp;    }    ivaluesShift=N;  }  keys[ivaluesShift + index]=value;}  }
class C{  void show(String key){  CARD_LAYOUT.show(this,key);}  }
class C{  public final void writeBytes(String str){  if (this.ignoreWrites)   return;  checkIfWritable();  int strlen=str.length();  if (strlen > 0) {    ensureCapacity(strlen);    if (this.buffer.hasArray()) {      int pos=this.buffer.position();      str.getBytes(0,strlen,this.buffer.array(),this.buffer.arrayOffset() + pos);      this.buffer.position(pos + strlen);    } else {      byte[] bytes=new byte[strlen];      str.getBytes(0,strlen,bytes,0);      this.buffer.put(bytes);    }  }}  }
class C{  public long value(){  return value;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.835 -0500",hash_original_method="3FD8BB870BC89D5588F0560753D4337F",hash_generated_method="8228DE1580FEA319BE05259C1022DB6D") private void interruptWorkers(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      try {        w.thread.interrupt();      } catch (      SecurityException ignore) {      }    }  }  finally {    mainLock.unlock();  }}  }
class C{  public void testUlpNeg(){  String a="-3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.ulp();  String res="1E-45";  int resScale=45;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  return s.toString();}  }
class C{  public boolean cgDeleteStep(URI rpSystem,List<URI> volumeIDs,List<URI> journalVolumeIDs,String token) throws ControllerException {  WorkflowStepCompleter.stepExecuting(token);  _log.info("cgDeleteStep is running");  boolean lockException=false;  try {    if (rpSystem == null) {      _log.error("Protection system not sent into cgDeleteStep");      throw DeviceControllerExceptions.recoverpoint.cgDeleteStepInvalidParam("protection system URI");    }    ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,rpSystem);    if (system == null) {      _log.error("Protection system not in database");      throw DeviceControllerExceptions.recoverpoint.cgDeleteStepInvalidParam("protection system null");    }    if (system.getInactive()) {      _log.error("Protection system set to be deleted");      throw DeviceControllerExceptions.recoverpoint.cgDeleteStepInvalidParam("protection system deleted");    }    if (volumeIDs == null) {      _log.error("Volume IDs list is null");      throw DeviceControllerExceptions.recoverpoint.cgDeleteStepInvalidParam("volume IDs null");    }    if (volumeIDs.isEmpty()) {      _log.error("Volume IDs list is empty");      throw DeviceControllerExceptions.recoverpoint.cgDeleteStepInvalidParam("volume IDs empty");    }    List<Volume> volumes=_dbClient.queryObject(Volume.class,volumeIDs);    if (volumes.isEmpty()) {      _log.info("All volumes already deleted. Not performing RP CG operation");      WorkflowStepCompleter.stepSucceded(token);      return true;    }    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,volumes.get(0).getConsistencyGroup());    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,cg.getId(),system.getId()));    boolean lockAcquired=_workflowService.acquireWorkflowLocks(_workflowService.getWorkflowFromStepId(token),lockKeys,LockTimeoutValue.get(LockType.RP_CG));    if (!lockAcquired) {      lockException=true;      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),String.format("Delete or remove volumes from RP consistency group %s",cg.getCgNameOnStorageSystem(rpSystem)));    }    for (    Volume volume : volumes) {      if (!volume.getConsistencyGroup().equals(cg.getId())) {        _log.error("Not all volumes belong to the same consistency group.");        throw DeviceControllerExceptions.recoverpoint.cgDeleteStepInvalidParam("volumes from different consistency groups");      }    }    ProtectionSet protectionSet=null;    for (    Volume volume : volumes) {      if (!NullColumnValueGetter.isNullNamedURI(volume.getProtectionSet())) {        protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());        break;      }    }    RecoverPointClient rp=RPHelper.getRecoverPointClient(system);    RecoverPointVolumeProtectionInfo volumeProtectionInfo=null;    for (    Volume volume : volumes) {      try {        if (volumeProtectionInfo == null) {          volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(volume.getId(),_dbClient));          VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());          volumeProtectionInfo.setMetroPoint(VirtualPool.vPoolSpecifiesMetroPoint(virtualPool));        }      } catch (      Exception e) {        _log.warn("Looks like the volume(s) we're trying to remove from the RP appliance are no longer associated with a RP CG, continuing delete process.");      }    }    if (volumeProtectionInfo == null) {      _log.warn("Looks like the volume(s) we're trying to remove from the RP appliance are no longer associated with a RP CG, continuing delete process.");      WorkflowStepCompleter.stepSucceded(token);      return true;    }    if (RPHelper.cgSourceVolumesContainsAll(_dbClient,cg.getId(),volumeIDs)) {      rp.deleteCG(volumeProtectionInfo);      if (volumeIDs != null && !volumeIDs.isEmpty()) {        Volume vol=_dbClient.queryObject(Volume.class,volumeIDs.get(0));        if (vol.getConsistencyGroup() != null) {          cg=_dbClient.queryObject(BlockConsistencyGroup.class,vol.getConsistencyGroup());          cg.removeSystemConsistencyGroup(rpSystem.toString(),CG_NAME_PREFIX + cg.getLabel());          _dbClient.updateObject(cg);        }        if (protectionSet == null || protectionSet.getInactive() || protectionSet.getVolumes() == null || protectionSet.getVolumes().isEmpty()) {          _log.info("Cleanup unnecessary as protection set in ViPR is empty or has already been marked for deletion.");        } else {          _log.info("Removing all volume from protection set: " + protectionSet.getLabel());          List<String> removeVolumeIDs=new ArrayList<String>(protectionSet.getVolumes());          cleanupProtectionSetVolumes(protectionSet,removeVolumeIDs,true);        }      }      setProtectionSetStatus(volumeProtectionInfo,ProtectionStatus.DISABLED.toString(),system);    } else {      List<RecoverPointVolumeProtectionInfo> replicationSetsToRemove=new ArrayList<RecoverPointVolumeProtectionInfo>();      List<String> removeVolumeIDs=new ArrayList<String>();      for (      Volume volume : volumes) {        _log.info(String.format("Volume [%s] (%s) needs to have its replication set removed from RP",volume.getLabel(),volume.getId()));        volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(volume.getId(),_dbClient));        replicationSetsToRemove.add(volumeProtectionInfo);        if (!NullColumnValueGetter.isNullURI(volume.getId())) {          removeVolumeIDs.add(volume.getId().toString());        }        List<Volume> targetVolumes=_rpHelper.getTargetVolumes(volume);        for (        Volume targetVol : targetVolumes) {          removeVolumeIDs.add(targetVol.getId().toString());        }      }      _log.info("waiting for 1 min before deleting replication sets");      Thread.sleep(1000 * 60);      rp.deleteReplicationSets(replicationSetsToRemove);      if (journalVolumeIDs.isEmpty()) {        _log.info("There are no journal volumes to be deleted");      } else {        List<Volume> journalVolumes=_dbClient.queryObject(Volume.class,journalVolumeIDs);        for (        Volume journalVolume : journalVolumes) {          String journalWWN=RPHelper.getRPWWn(journalVolume.getId(),_dbClient);          _log.info(String.format("Removing Journal volume - %s : WWN - %s",journalVolume.getLabel(),journalWWN));          volumeProtectionInfo=rp.getProtectionInfoForVolume(journalWWN);          rp.deleteJournalFromCopy(volumeProtectionInfo,journalWWN);          removeVolumeIDs.add(journalVolume.getId().toString());        }      }      cleanupProtectionSetVolumes(protectionSet,removeVolumeIDs,false);    }    WorkflowStepCompleter.stepSucceded(token);    _log.info("cgDeleteStep is complete");    _log.info("Collection RP statistics post CG delete.");    collectRPStatistics(system);  } catch (  Exception e) {    if (lockException) {      ServiceError serviceError=DeviceControllerException.errors.deleteVolumesAborted(volumeIDs.toString(),e);      return stepFailed(token,serviceError,"cgDeleteStep");    } else {      return stepFailed(token,e,"cgDeleteStep");    }  }  return true;}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StorageProviderRestRep updateStorageProvider(@PathParam("id") URI id,StorageProviderUpdateParam param){  StorageProvider storageProvider=_dbClient.queryObject(StorageProvider.class,id);  if (null == storageProvider || storageProvider.getInactive()) {    throw APIException.notFound.unableToFindEntityInURL(id);  } else {    if (param.getName() != null && !param.getName().equals("") && !param.getName().equalsIgnoreCase(storageProvider.getLabel())) {      checkForDuplicateName(param.getName(),StorageProvider.class);      storageProvider.setLabel(param.getName());    }    String existingIPAddress=storageProvider.getIPAddress();    Integer existingPortNumber=storageProvider.getPortNumber();    if ((param.getIpAddress() != null && !param.getIpAddress().equals(existingIPAddress)) || (param.getPortNumber() != null && !param.getPortNumber().equals(existingPortNumber))) {      String ipAddress=(param.getIpAddress() != null) ? param.getIpAddress() : existingIPAddress;      Integer portNumber=(param.getPortNumber() != null) ? param.getPortNumber() : existingPortNumber;      ArgValidator.checkFieldRange(portNumber,1,65535,"port_number");      String providerKey=ipAddress + "-" + portNumber;      List<StorageProvider> providers=CustomQueryUtility.getActiveStorageProvidersByProviderId(_dbClient,providerKey);      if (providers != null && !providers.isEmpty()) {        throw APIException.badRequests.invalidParameterStorageProviderAlreadyRegistered(providerKey);      }      if (!existingIPAddress.equals(param.getIpAddress()) && isOldConnectionAlive(existingIPAddress,existingPortNumber,storageProvider.getInterfaceType()) && (storageProvider.getStorageSystems() != null && !storageProvider.getStorageSystems().isEmpty())) {        throw APIException.badRequests.cannotUpdateProviderIP(existingIPAddress + "-" + existingPortNumber);      }      storageProvider.setIPAddress(ipAddress);      storageProvider.setPortNumber(portNumber);    }    if (param.getUserName() != null && StringUtils.isNotBlank(param.getUserName())) {      storageProvider.setUserName(param.getUserName());    }    if (param.getPassword() != null && StringUtils.isNotBlank(param.getPassword())) {      storageProvider.setPassword(param.getPassword());    }    if (param.getUseSSL() != null) {      storageProvider.setUseSSL(param.getUseSSL());    }    if (param.getInterfaceType() != null) {      ArgValidator.checkFieldValueFromEnum(param.getInterfaceType(),"interface_type",EnumSet.of(StorageProvider.InterfaceType.hicommand,StorageProvider.InterfaceType.smis,StorageProvider.InterfaceType.ibmxiv,StorageProvider.InterfaceType.scaleioapi,StorageProvider.InterfaceType.xtremio,StorageProvider.InterfaceType.ddmc,StorageProvider.InterfaceType.unity));      storageProvider.setInterfaceType(param.getInterfaceType());    }    if (param.getSecondaryUsername() != null) {      ArgValidator.checkFieldNotEmpty(param.getSecondaryUsername(),"secondary_username");      storageProvider.setSecondaryUsername(param.getSecondaryUsername());    }    if (param.getSecondaryPassword() != null) {      ArgValidator.checkFieldNotEmpty(param.getSecondaryPassword(),"secondary_password");      storageProvider.setSecondaryPassword(param.getSecondaryPassword());    }    if (param.getSecondaryURL() != null) {      verifySecondaryParams(param.getSecondaryURL());      storageProvider.setSecondaryURL(param.getSecondaryURL());    }    if (param.getElementManagerURL() != null) {      storageProvider.setElementManagerURL(param.getElementManagerURL());    }    _dbClient.persistObject(storageProvider);  }  auditOp(OperationTypeEnum.UPDATE_STORAGEPROVIDER,true,null,storageProvider.getId().toString(),storageProvider.getLabel(),storageProvider.getIPAddress(),storageProvider.getPortNumber(),storageProvider.getUserName(),storageProvider.getInterfaceType());  return map(storageProvider);}  }
class C{  private Stack createPrefixStack(String prefix){  Stack fs=new Stack();  m_namespaces.put(prefix,fs);  return fs;}  }
class C{  public ActionIconAndNameRenderer(){  super();  setHorizontalAlignment(LEFT);  setIconTextGap(5);  setHorizontalTextPosition(RIGHT);}  }
class C{  public void removeFromCourseOfferings(String courseOfferingId){  int ct=0;  for (Iterator i=this.courseOfferingIds.listIterator(); i.hasNext(); ) {    String co1=i.next().toString();    if (co1.equals(courseOfferingId)) {      i.remove();      this.courseOfferingNames.remove(ct);      this.ownedCourse.remove(ct);      this.resvId.remove(ct);      this.limits.remove(ct);      this.requested.remove(ct);      this.projected.remove(ct);      this.lastTerm.remove(ct);      this.canDelete.remove(ct);      break;    }    ++ct;  }}  }
class C{  public void write(final char chars[],final int start,final int length) throws java.io.IOException {  if (m_writer != null)   m_writer.write(chars,start,length);  int lengthx3=(length << 1) + length;  if (lengthx3 >= buf_length) {    flushBuffer();    setBufferSize(2 * lengthx3);  }  if (lengthx3 > buf_length - count) {    flushBuffer();  }  final int n=length + start;  for (int i=start; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf[count++]=(byte)(c); else     if (c < 0x800) {      buf[count++]=(byte)(0xc0 + (c >> 6));      buf[count++]=(byte)(0x80 + (c & 0x3f));    } else {      buf[count++]=(byte)(0xe0 + (c >> 12));      buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf[count++]=(byte)(0x80 + (c & 0x3f));    }  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public int hashCode(){  return getStringRep().hashCode();}  }
class C{  public void next(){  index++;  cur.advance();  next.advance();}  }
class C{  public final short incrementAndGet(int index){  return this.addAndGet(index,(short)1);}  }
class C{  public static Date parseDate(final String format,final String dateString) throws DSSException {  try {    final SimpleDateFormat sdf=new SimpleDateFormat(format);    final Date date=sdf.parse(dateString);    return date;  } catch (  ParseException e) {    throw new DSSException(e);  }}  }
class C{  private static void d_uarimxx(double[] a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  for (int i=rl, aix=rl * n, cix=rl * 2; i < ru; i++, aix+=n, cix+=2) {    int maxindex=indexmax(a,aix,init,n,builtin);    c[cix + 0]=(double)maxindex + 1;    c[cix + 1]=a[aix + maxindex];  }}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public void testSetNull_int_int() throws SQLException {  PreparedStatement ps=null;  try {    String query="insert into type (BoolVal, IntVal) values ('true', ?);";    ps=conn.prepareStatement(query);    Statement st=null;    try {      ps.setNull(1,Types.INTEGER);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, LongVal) values ('true', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.BIGINT);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, DecVal) values ('true', ?)";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.DECIMAL);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, dateVal) values ('true', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.DATE);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, BlobVal) values ('true', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.BLOB);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, TextVal) values ('true', ?);";    ps=conn.prepareStatement(query);    ps.setNull(1,Types.CHAR);    ps.execute();  }  finally {    try {      ps.close();    } catch (    Exception ee) {    }  }}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  Shape clip=gc.getClip();  SVGClipDescriptor clipDesc=null;  if (clip != null) {    StringBuffer clipPathAttrBuf=new StringBuffer(URL_PREFIX);    GeneralPath clipPath=new GeneralPath(clip);    ClipKey clipKey=new ClipKey(clipPath,generatorContext);    clipDesc=(SVGClipDescriptor)descMap.get(clipKey);    if (clipDesc == null) {      Element clipDef=clipToSVG(clip);      if (clipDef == null)       clipDesc=NO_CLIP; else {        clipPathAttrBuf.append(SIGN_POUND);        clipPathAttrBuf.append(clipDef.getAttributeNS(null,SVG_ID_ATTRIBUTE));        clipPathAttrBuf.append(URL_SUFFIX);        clipDesc=new SVGClipDescriptor(clipPathAttrBuf.toString(),clipDef);        descMap.put(clipKey,clipDesc);        defSet.add(clipDef);      }    }  } else   clipDesc=NO_CLIP;  return clipDesc;}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId) throws SyncException {  init(nodes,thisNodeId,AuthScheme.NO_AUTH,null,null);}  }
class C{  public CLEvent writeBytes(CLQueue queue,long offset,long length,Pointer<?> in,boolean blocking,CLEvent... eventsToWaitFor){}  }
class C{  public ArrayList(){  this.elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA;}  }
class C{  public SiteEntry createSite(String title,String summary,String theme) throws MalformedURLException, IOException, ServiceException {  SiteEntry entry=new SiteEntry();  entry.setTitle(new PlainTextConstruct(title));  entry.setSummary(new PlainTextConstruct(summary));  if (theme != null) {    Theme tt=new Theme();    tt.setValue(theme);    entry.setTheme(tt);  }  return service.insert(new URL(getSiteFeedUrl()),entry);}  }
class C{  public void addContentProposalListener(IContentProposalListener3 listener){  proposalListeners2.add(listener);}  }
class C{  public boolean isHasNoBody(){  return hasNoBody;}  }
class C{  public static boolean resolve(Context context){  boolean enable=resolveEnable(context);  if (!enable) {    AlertDialog alertDialog=createDialog(context);    alertDialog.show();  }  return enable;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.GENERATOR_CONFIGURATION__CONFIGURATIONS:    getConfigurations().clear();  return;}super.eUnset(featureID);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node nodeV;  String value;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  nodeV=nameNode.getFirstChild();  value=nodeV.getNodeValue();  assertEquals("textWithNoMarkupAssert","Roger\n Jones",value);}  }
class C{  public void testTwoStepSqlClientQuery() throws Exception {  try (Ignite client=startGrid("client")){    IgniteCache<Integer,Value> cache=client.cache(null);    List<Cache.Entry<Integer,Value>> all=cache.query(new SqlQuery<Integer,Value>(Value.class,"select * from Value")).getAll();    assertEquals(KEYS,all.size());    for (    Cache.Entry<Integer,Value> entry : all)     entry.getValue().str="after";    check(cache);    QueryCursor<List<?>> qry=cache.query(new SqlFieldsQuery("select _val from Value"));    List<List<?>> all0=qry.getAll();    assertEquals(KEYS,all0.size());    for (    List<?> entry : all0)     ((Value)entry.get(0)).str="after";    check(cache);  } }  }
class C{  public DeleteReferencesResponse clone(){  DeleteReferencesResponse result=new DeleteReferencesResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void log(Level level,String msg,Object[] argArray){  innerLog(level,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  @Override public boolean locationIsLeg(int loc){  return ((loc == Mech.LOC_RLEG) || (loc == Mech.LOC_LLEG) || (loc == Mech.LOC_RARM)|| (loc == Mech.LOC_LARM));}  }
class C{  public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){  verify(cr,null,dump,pw);}  }
class C{  public boolean isNumber(int key){  return get(key) instanceof Number;}  }
class C{  public CurrencyIndicator(String file,boolean gzip) throws IOException, URISyntaxException {  this.file=file;  this.gzip=gzip;  this.currencyListFile=null;}  }
class C{  protected void bindEvents(){}  }
class C{  @Nullable public byte[] read(@Nullable String spaceName,SwapKey key,@Nullable ClassLoader ldr) throws IgniteCheckedException {  assert key != null;  try {    return getSpi().read(spaceName,key,context(ldr));  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to read from swap space [space=" + spaceName + ", key="+ key+ ']',e);  }}  }
class C{  private HashMap<String,HashSet<String>> discoverAllSMBShares(final StorageSystem storageSystem,final List<IsilonAccessZone> isilonAccessZones){  String resumeToken=null;  HashMap<String,HashSet<String>> allShares=new HashMap<String,HashSet<String>>();  URI storageSystemId=storageSystem.getId();  _log.info("discoverAllShares for storage system {} - start",storageSystemId);  try {    IsilonApi isilonApi=getIsilonDevice(storageSystem);    for (    IsilonAccessZone isilonAccessZone : isilonAccessZones) {      do {        IsilonApi.IsilonList<IsilonSMBShare> isilonShares=isilonApi.listShares(resumeToken,isilonAccessZone.getName());        List<IsilonSMBShare> isilonSMBShareList=isilonShares.getList();        HashSet<String> sharesHashSet=null;        for (        IsilonSMBShare share : isilonSMBShareList) {          String path=share.getPath();          String shareId=share.getId();          sharesHashSet=allShares.get(path);          if (null == sharesHashSet) {            sharesHashSet=new HashSet<String>();            sharesHashSet.add(shareId);            allShares.put(path,sharesHashSet);          } else {            sharesHashSet.add(shareId);            allShares.put(path,sharesHashSet);          }          _log.info("Discovered SMB Share name {} and path {}",shareId,path);        }        resumeToken=isilonShares.getToken();      } while (resumeToken != null);      _log.info("discoverd AllShares for access zone {} ",isilonAccessZone.getName());      resumeToken=null;    }    return allShares;  } catch (  IsilonException ie) {    _log.error("discoverAllShares failed. Storage system: {}",storageSystemId,ie);    IsilonCollectionException ice=new IsilonCollectionException("discoverAllShares failed. Storage system: " + storageSystemId);    ice.initCause(ie);    throw ice;  }catch (  Exception e) {    _log.error("discoverAllShares failed. Storage system: {}",storageSystemId,e);    IsilonCollectionException ice=new IsilonCollectionException("discoverAllShares failed. Storage system: " + storageSystemId);    ice.initCause(e);    throw ice;  }}  }
class C{  private boolean isArrowpointAllowed(Node x,Node y){  if (graph.getEndpoint(x,y) == Endpoint.ARROW) {    return true;  }  if (graph.getEndpoint(x,y) == Endpoint.TAIL) {    return false;  }  if (graph.getEndpoint(y,x) == Endpoint.ARROW) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  if (graph.getEndpoint(y,x) == Endpoint.TAIL) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  return graph.getEndpoint(y,x) == Endpoint.CIRCLE;}  }
class C{  public BindParameter(BindType bindType,String systemId,String password,String systemType,TypeOfNumber addrTon,NumberingPlanIndicator addrNpi,String addressRange){  this(bindType,systemId,password,systemType,addrTon,addrNpi,addressRange,InterfaceVersion.IF_34);}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  private ValueGraphVertex findOrCreateVertex(MethodOperand op){  Object name;  if (op.hasTarget()) {    name=op.getTarget();  } else {    name=op.getMemberRef();  }  ValueGraphVertex v=getVertex(name);  if (v == null) {    v=new ValueGraphVertex(op);    v.setLabel(op,0);    graph.addGraphNode(v);    nameMap.put(name,v);  }  return v;}  }
class C{  void clearTransientStateViews(){  if (mTransientStateViews != null) {    mTransientStateViews.clear();  }}  }
class C{  public void testOffsetPredicate(){  OffsetPredicate cleaner=new OffsetPredicate();  assertEquals(cleaner.count(),0);  cleaner.release(10);  assertEquals(cleaner.count(),1);  assertTrue(cleaner.test(0l));  assertFalse(cleaner.test(10l));  assertTrue(cleaner.test(11l));  cleaner.release(2048);  assertEquals(cleaner.count(),2);  assertFalse(cleaner.test(2048l));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (variableSource == null) {    throw new NullPointerException();  }  if (allowedCategories == null) {    throw new NullPointerException();  }}  }
class C{  public InvalidResponseException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void undeploy(){  int[] stamp=new int[1];  while (true) {    boolean undeployed=usage.get(stamp);    if (undeployed)     return;    int r=stamp[0];    if (usage.compareAndSet(false,true,r,r))     return;  }}  }
class C{  public long put(K key,long value){  long previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  K oldKey=(K)_set[index];  _set[index]=key;  _values[index]=value;  if (isNewMapping) {    postInsertHook(oldKey == null);  }  return previous;}  }
class C{  public Door(){}  }
class C{  private ElementCreatorImpl whitelistElements(Collection<ElementKey<?,?>> elementKeys){synchronized (registry) {    if (elementWhitelist == null) {      elementWhitelist=Sets.newHashSet();    }    elementWhitelist.addAll(elementKeys);    registry.dirty();  }  return this;}  }
class C{  public JsonHierarchicalStreamDriver(final NameCoder nameCoder){  super(nameCoder);}  }
class C{  public void cancel(){  mCancelled=true;}  }
class C{  public synchronized void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  if (log.isDebugEnabled()) {    log.debug("write CV=" + CV + " val="+ val);  }  useProgrammer(p);  _progRead=false;  _val=val;  _cv=CV;  progState=COMMANDSENT;  startShortTimer();  tc.sendTamsMessage(TamsMessage.getWriteOpsModeCVMsg(mAddress,CV,val),this);}  }
class C{  public DefaultHttpData(byte[] data,int offset,int length,boolean endOfStream){  this.data=data;  this.offset=offset;  this.length=length;  this.endOfStream=endOfStream;}  }
class C{  public static void reportSegmentCounts(){  LOG.info("Observed segment counts:");  for (  int i : segmentCountMap.keySet()) {    LOG.info(String.format("%4s: %d",String.valueOf(i),segmentCountMap.get(i)));  }}  }
class C{  public ChunkedArraysIterator(final ICloseableIterator<E[]> a){  this(a,null);}  }
class C{  public SimpleSuperMatch mergeIfOverlap(SimpleSuperMatch candidate){  if (this.type != candidate.getType()) {    return null;  }  if (!this.inSameHierarchy(candidate)) {    return null;  }  if (!this.matchesOverlap(candidate,false)) {    return null;  }  int start=(candidate.getLocation().getStart() < this.getLocation().getStart()) ? candidate.getLocation().getStart() : this.getLocation().getStart();  int end=(candidate.getLocation().getEnd() > this.getLocation().getEnd()) ? candidate.getLocation().getEnd() : this.getLocation().getEnd();  this.setLocation(new SimpleLocation(start,end));  this.entries.addAll(candidate.getEntries());  return this;}  }
class C{  @SuppressWarnings("unchecked") private void recreateDBObjects(Class objectClass,boolean logUntranslatableCustomization){  resetDBObjects(objectClass);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"recreateDBObjects",new Object[]{m_objectTypes,m_direction});  m_counterAdd=new Integer(0);  m_totalAdd=new Integer(0);  if (m_sourceMap != null && m_sourceMap.size() > 0) {    for (Iterator<String> it=m_sourceMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      DBObject sourceObj=m_sourceMap.get(key);      installObject(sourceObj,m_sourceMap,logUntranslatableCustomization);    }  }  if (m_targetMap != null && m_targetMap.size() > 0) {    for (Iterator<String> it=m_targetMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      DBObject targetObj=m_targetMap.get(key);      if (targetObj.getCustomizationLevel() > s_parameters.CUSTOMNONE) {        if (m_trackingList.contains(targetObj.getName())) {          DBObject sourceObj=m_sourceMap.get(key);          if (sourceObj != null && targetObj.getCustomizationLevel() > sourceObj.getCustomizationLevel())           m_trackingList.remove(targetObj.getName());        }        installObject(targetObj,m_targetMap,false);      }    }  }  logResults();}  }
class C{  @Override public DefaultAsciiArray withTitle(List<String> titles){  this.titles=titles;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File dest=getFile(stack);  String src=getString(stack);  String filename=getString(stack);  if (filename != null && filename.length() > 0) {    if (src.endsWith(java.io.File.separator))     src=src + filename; else     src=src + java.io.File.separator + filename;  }  if (Sage.DBG)   System.out.println("Requested file copy of " + src + " to "+ dest);  return FileTransfer.getFileTransfer(stack.getUIMgrSafe()).transferFile(src,dest);}  }
class C{  @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  public RelationalTemplate(String string){  super(string);  slots=new HashSet<String>();  for (  Node node : getNodes()) {    slots.addAll(node.getContent().getSlots());    for (    Template relation : node.getRelations()) {      slots.addAll(relation.getSlots());    }  }}  }
class C{  @Override public void METHOD_BEGIN(int access,String className,String methName,String methDesc){  if (conf.CLINIT.equals(methName)) {    CLINIT_BEGIN(className);    return;  }  if (env.topFrame().weInvokedInstrumentedCode() == false) {  }  prepareStackIfNeeded(className,methName,methDesc);  final Frame callerFrame=env.topFrame();  Frame frame;  boolean calleeNeedsThis=false;  if (conf.INIT.equals(methName)) {    Constructor<?> constructor=resolveConstructorOverloading(className,methDesc);    int maxLocals=conf.MAX_LOCALS_DEFAULT;    MemberInfo memberInfo=memberInfos.get(constructor);    if (memberInfo != null)     maxLocals=memberInfo.maxLocals;    frame=new ConstructorFrame(constructor,maxLocals);    calleeNeedsThis=true;    if (callerFrame.weInvokedInstrumentedCode() == false) {      Class<?> clazz=classLoader.getClassForName(className);      Type objectType=Type.getType(clazz);      ReferenceConstant newObject=this.env.heap.buildNewReferenceConstant(objectType);      frame.localsTable.setRefLocal(0,newObject);    }  } else {    Method method=resolveMethodOverloading(className,methName,methDesc);    int maxLocals=conf.MAX_LOCALS_DEFAULT;    MemberInfo memberInfo=memberInfos.get(method);    if (memberInfo != null)     maxLocals=memberInfo.maxLocals;    frame=new MethodFrame(method,maxLocals);    calleeNeedsThis=!Modifier.isStatic(method.getModifiers());  }  if (callerFrame.weInvokedInstrumentedCode() == false) {    env.pushFrame(frame);    return;  }  Class<?>[] paramTypes=getArgumentClasses(methDesc);  final Deque<Operand> params=new LinkedList<Operand>();  Iterator<Operand> it=env.topFrame().operandStack.iterator();  for (int i=paramTypes.length - 1; i >= 0; i--) {    Operand param=it.next();    params.push(param);  }  int index=0;  for (  Operand param : params) {    frame.localsTable.setOperand(index + (calleeNeedsThis ? 1 : 0),param);    if (param instanceof SingleWordOperand)     index+=1; else     if (param instanceof DoubleWordOperand)     index+=2; else {      throw new IllegalStateException("Unknown operand type " + param.getClass().getName());    }  }  if (calleeNeedsThis) {    Operand param=it.next();    ReferenceOperand refOperand=(ReferenceOperand)param;    frame.localsTable.setRefLocal(0,refOperand.getReference());  }  env.pushFrame(frame);}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  if (!isUseParentPaint()) {    JTextComponent editor=this.getComponent();    BETextFieldUI.paintBg(g,0,0,editor.getWidth(),editor.getHeight(),editor.isEnabled(),bg);  }}  }
class C{  public CharLazyValue(CharSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x) throws SQLException {  updateBinaryStream(columnLabel,x,-1);}  }
class C{  protected String attributeValuesString(Instance instance){  StringBuffer text=new StringBuffer();  if (m_Attributes != null) {    m_Attributes.setUpper(instance.numAttributes() - 1);    boolean first=true;    for (int i=0; i < instance.numAttributes(); i++) {      if (m_Attributes.isInRange(i) && i != instance.classIndex()) {        if (!first) {          text.append(m_Delimiter);        }        text.append(instance.toString(i));        first=false;      }    }  }  return text.toString();}  }
class C{  protected String translatedAttributes(String nativeGuid,Map<String,Object> keyMap){  if (keyMap.containsKey(Constants.IS_NEW_SMIS_PROVIDER) && Boolean.valueOf(keyMap.get(Constants.IS_NEW_SMIS_PROVIDER).toString())) {    nativeGuid=nativeGuid.replaceAll(Constants.SMIS_80_STYLE,Constants.SMIS_PLUS_REGEX);  } else {    if (nativeGuid.contains(_symm)) {      nativeGuid=nativeGuid.replace(_symm,_symmetrix);    } else     if (nativeGuid.contains(_clar)) {      nativeGuid=nativeGuid.replace(_clar,_clariion);    }  }  return nativeGuid;}  }
class C{  protected void processTemporal(TemporalMetadata temporal,DatabaseMapping mapping,MetadataClass referenceClass,boolean isForMapKey){  if (temporal == null) {    MetadataAnnotation annotation=new MetadataAnnotation();    annotation.setName("javax.persistence.Temporal");    annotation.addAttribute("value","TIMESTAMP");    temporal=new TemporalMetadata(annotation,this);    setTemporal(temporal,isForMapKey);  }  temporal.process(mapping,this,referenceClass,isForMapKey);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.628 -0500",hash_original_method="90A94F467F11AD2B1AEECA4B5BC07A1D",hash_generated_method="13FC4A3A2DEAA47DAD8328A7A3631F3B") public void writeToParcel(Parcel parcel,int flags){  final boolean oldAllowFds=parcel.pushAllowFds(mAllowFds);  try {    if (mParcelledData != null) {      int length=mParcelledData.dataSize();      parcel.writeInt(length);      parcel.writeInt(0x4C444E42);      parcel.appendFrom(mParcelledData,0,length);    } else {      parcel.writeInt(-1);      parcel.writeInt(0x4C444E42);      int oldPos=parcel.dataPosition();      parcel.writeMapInternal(mMap);      int newPos=parcel.dataPosition();      parcel.setDataPosition(oldPos - 8);      int length=newPos - oldPos;      parcel.writeInt(length);      parcel.setDataPosition(newPos);    }  }  finally {    parcel.restoreAllowFds(oldAllowFds);  }}  }
class C{  public SpkacException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  private HttpResponse sendRequestToXDMS(HttpRequest request) throws PayloadException, NetworkException {  return sendRequestToXDMS(request,new HttpAuthenticationAgent(xdmServerLogin,xdmServerPwd));}  }
class C{  public char[] array(int index){  return buffers[index];}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public long computeFileSizeTotal(){  long byteCount=0;  for (int i=1; i < this.localFileData.length; i+=2) {    byteCount+=localFileData[i].length;  }  return byteCount;}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Error(){}  }
class C{  public static boolean isInDisabledList(String classname){  return DISABLED.contains(classname);}  }
class C{  public static String unescape(String string){  int length=string.length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < length; ++i) {    char c=string.charAt(i);    if (c == '+') {      c=' ';    } else     if (c == '%' && i + 2 < length) {      int d=JSONTokener.dehexchar(string.charAt(i + 1));      int e=JSONTokener.dehexchar(string.charAt(i + 2));      if (d >= 0 && e >= 0) {        c=(char)(d * 16 + e);        i+=2;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  LabelNode generateLabel(TreeNode stn,ModuleNode cm) throws AbortException {  boolean isAssumeProve=false;  if (!inOpDefNode()) {    errors.addError(stn.getLocation(),"Label not in definition or proof step.");    return nullLabelNode;  }  ;  if (noLabelsAllowed()) {    errors.addError(stn.getLocation(),"Label not allowed within scope of declaration in " + "nested ASSUME/PROVE.");    return nullLabelNode;  }  ;  if (!((excStack.empty() || excSpecStack.empty()))) {    errors.addError(stn.getLocation(),"Labels inside EXCEPT clauses are not yet implemented.");    return nullLabelNode;  }  ;  TreeNode[] labelExpChildren=stn.heirs();  pushLS();  LevelNode body;  if (labelExpChildren[2].getKind() == N_AssumeProve) {    body=generateAssumeProve(labelExpChildren[2],cm);    isAssumeProve=true;  } else {    body=generateExpression(labelExpChildren[2],cm);  }  ;  Hashtable ht=popLabelNodeSet();  UniqueString name;  FormalParamNode[] params;  if (labelExpChildren[0].getKind() == N_GeneralId) {    name=labelExpChildren[0].heirs()[1].getUS();    params=new FormalParamNode[0];  } else {    if (labelExpChildren[0].getKind() != N_OpApplication) {      throw new WrongInvocationException("Label has unexpected syntax tree kind.");    }    ;    TreeNode[] opApplChildren=labelExpChildren[0].heirs();    name=opApplChildren[0].heirs()[1].getUS();    TreeNode[] opArgsChildren=opApplChildren[1].heirs();    int numOfParams=(opArgsChildren.length - 1) / 2;    params=new FormalParamNode[numOfParams];    for (int i=0; i < numOfParams; i++) {      TreeNode argSyntaxNode=opArgsChildren[2 * i + 1];      UniqueString argName=argSyntaxNode.heirs()[1].getUS();      SymbolNode argNode=symbolTable.resolveSymbol(argName);      FormalParamNode arg=null;      if (argNode instanceof FormalParamNode) {        arg=(FormalParamNode)argNode;      } else {        errors.addError(argSyntaxNode.getLocation(),"Illegal parameter " + argName.toString() + " of label `"+ name.toString()+ "'.");        arg=new FormalParamNode(argName,0,argSyntaxNode,null,cm);      }      ;      params[i]=arg;    }  }  ;  SemanticNode cg=null;  if (assumeProveDepth > 0) {    cg=currentGoal;  }  ;  LabelNode retVal=new LabelNode(stn,name,params,currentGoal,currentGoalClause,body,isAssumeProve);  retVal.setLabels(ht);  boolean ignore=formalParamsEqual(retVal);  if (!addLabelNodeToSet(retVal)) {    errors.addError(stn.getLocation(),"Duplicate label `" + name.toString() + "'.");  }  ;  return retVal;}  }
class C{  private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {  final Terms terms=context.reader().terms(query.field);  if (terms == null) {    return new WeightOrDocIdSet((DocIdSet)null);  }  final TermsEnum termsEnum=query.getTermsEnum(terms);  assert termsEnum != null;  PostingsEnum docs=null;  final List<TermAndState> collectedTerms=new ArrayList<>();  if (collectTerms(context,termsEnum,collectedTerms)) {    BooleanQuery.Builder bq=new BooleanQuery.Builder();    for (    TermAndState t : collectedTerms) {      final TermContext termContext=new TermContext(searcher.getTopReaderContext());      termContext.register(t.state,context.ord,t.docFreq,t.totalTermFreq);      bq.add(new TermQuery(new Term(query.field,t.term),termContext),Occur.SHOULD);    }    Query q=new ConstantScoreQuery(bq.build());    final Weight weight=searcher.rewrite(q).createWeight(searcher,needsScores,score());    return new WeightOrDocIdSet(weight);  }  DocIdSetBuilder builder=new DocIdSetBuilder(context.reader().maxDoc(),terms);  if (collectedTerms.isEmpty() == false) {    TermsEnum termsEnum2=terms.iterator();    for (    TermAndState t : collectedTerms) {      termsEnum2.seekExact(t.term,t.state);      docs=termsEnum2.postings(docs,PostingsEnum.NONE);      builder.add(docs);    }  }  do {    docs=termsEnum.postings(docs,PostingsEnum.NONE);    builder.add(docs);  } while (termsEnum.next() != null);  return new WeightOrDocIdSet(builder.build());}  }
class C{  public void testMixing() throws Exception {  FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);  ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  for (int i=0; i < 20; i++) {    Document doc=new Document();    if (i < 19 && random().nextBoolean()) {      for (int j=0; j < 50; j++) {        doc.add(new TextField("foo","i have positions",Field.Store.NO));      }    } else {      for (int j=0; j < 50; j++) {        doc.add(new Field("foo","i have no positions",ft));      }    }    iw.addDocument(doc);    iw.commit();  }  if (random().nextBoolean()) {    iw.forceMerge(1);  }  DirectoryReader ir=iw.getReader();  FieldInfos fis=MultiFields.getMergedFieldInfos(ir);  assertEquals(IndexOptions.DOCS_AND_FREQS,fis.fieldInfo("foo").getIndexOptions());  assertFalse(fis.fieldInfo("foo").hasPayloads());  iw.close();  ir.close();  dir.close();}  }
class C{  public void hubHeartbeat(UpdateServerHeartbeat updateServer,UpdateRackHeartbeat updateRack,UpdatePodSystem updatePod,long sourceTime){  RackHeartbeat rack=getCluster().findRack(updateRack.getId());  if (rack == null) {    rack=getRack();  }  updateRack(updateRack);  updateServerStart(updateServer);  updateTargetServers();  PodHeartbeatService podHeartbeat=getPodHeartbeat();  if (podHeartbeat != null && updatePod != null) {    podHeartbeat.updatePodSystem(updatePod);  }  _joinState=_joinState.onHubHeartbeat(this);  updateHeartbeats();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.DEPEND___DEPEND_1:    return getDepend_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,boolean has_order,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);  this.m_order=order;  this.m_multiAllowed=multiAllowed;  this.m_isOrdered=has_order;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.308 -0400",hash_original_method="2CA40CF84E3F91F9DEE97B01BD037D11",hash_generated_method="B76FA6807697DC48B463878C7F5CD84F") boolean isWhiteSpace(char c){  if (('\t' == c) || ('\n' == c) || ('\r' == c)|| ('\u0020' == c))   return true;  return false;}  }
class C{  public void doCopy(){  Clipboard systemClipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  Insets insets=getInsets();  int w=getWidth() - insets.left - insets.right;  int h=getHeight() - insets.top - insets.bottom;  ChartTransferable selection=new ChartTransferable(this.chart,w,h,getMinimumDrawWidth(),getMinimumDrawHeight(),getMaximumDrawWidth(),getMaximumDrawHeight(),true);  systemClipboard.setContents(selection,null);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value_1: ");  result.append(value_1);  result.append(')');  return result.toString();}  }
class C{  public void clearHosts(){  this.portToMac.clear();}  }
class C{  public static TermsQueryBuilder termsQuery(String name,double... values){  return new TermsQueryBuilder(name,values);}  }
class C{  void notifyMemberJoined(Contact newContact){  Contact contact=mMembers.get(newContact.getAddress().getAddress());  if (contact == null) {    mMembers.put(newContact.getAddress().getAddress(),newContact);    for (    GroupMemberListener listener : mMemberListeners) {      listener.onMemberJoined(this,newContact);    }  } else {    contact.setPresence(newContact.getPresence());  }}  }
class C{  @Override public boolean onBackPressed(boolean fromActionBar){  return false;}  }
class C{  public final void testValidateSucceeds(){  PhoneNumberValidator phoneNumberValidator=new PhoneNumberValidator("foo");  assertTrue(phoneNumberValidator.validate(""));  assertTrue(phoneNumberValidator.validate("123456"));  assertTrue(phoneNumberValidator.validate("12345678901234"));  assertTrue(phoneNumberValidator.validate("+1234567890123"));  assertTrue(phoneNumberValidator.validate("+1 1234567890123"));  assertTrue(phoneNumberValidator.validate("+12 123456789"));  assertTrue(phoneNumberValidator.validate("+123 123456"));}  }
class C{  public String filtersTipText(){  return "The base filters to be used.";}  }
class C{  public boolean isSetVersion(){  return EncodingUtils.testBit(__isset_bitfield,__VERSION_ISSET_ID);}  }
class C{  public static double jaccardIndex(final Set<Integer> s1,final Set<Integer> s2){  Set<Integer> intersection=new HashSet<Integer>(s1);  intersection.retainAll(s2);  Set<Integer> union=new HashSet<Integer>(s1);  union.addAll(s2);  if (union.isEmpty()) {    return 0;  }  return (double)intersection.size() / union.size();}  }
class C{  public SparseRank(final long[] bits,final long length){  this(LongArrayBitVector.wrap(bits,length));}  }
class C{  private void addProducedBindings(final TermNode t,final Set<IVariable<?>> producedBindings){  if (t instanceof VarNode) {    producedBindings.add(((VarNode)t).getValueExpression());  } else   if (t instanceof ConstantNode) {    final ConstantNode cNode=(ConstantNode)t;    final Constant<?> c=(Constant<?>)cNode.getValueExpression();    final IVariable<?> var=c.getVar();    if (var != null) {      producedBindings.add(var);    }  }}  }
class C{  protected void onAnimationStarted(){}  }
class C{  public void showCell(int row,int column){  scrollRectToVisible(getCellRect(row,column,true));}  }
class C{  public void selectParameters(List<Parameter> params){  params.add(getParameter(TraitData.TRAIT_SPECIES + "." + POP_MEAN));  if (options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_BIRTH_DEATH) {    params.add(getParameter(TraitData.TRAIT_SPECIES + "." + BirthDeathModelParser.MEAN_GROWTH_RATE_PARAM_NAME));    params.add(getParameter(TraitData.TRAIT_SPECIES + "." + BirthDeathModelParser.RELATIVE_DEATH_RATE_PARAM_NAME));  } else   if (options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_YULE || options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_YULE_CALIBRATION) {    params.add(getParameter(TraitData.TRAIT_SPECIES + "." + YuleModelParser.YULE+ "."+ YuleModelParser.BIRTH_RATE));  }}  }
class C{  @Override public void genNCollisions(int numberAttributes,StringBuilder sb,boolean useNamespace){  try {    String prefix="";    final long startTime=System.nanoTime();    final long endTime;    int exponent=1;    while (numberAttributes > ((int)Math.pow(2,exponent))) {      exponent++;    }    if (useNamespace == true) {      prefix="xmlns:";    }    for (int i=0; i < numberAttributes; i++) {      sb.append(prefix + getCollisionString(i,exponent) + "=\""+ i+ "\" ");    }    endTime=System.nanoTime();    final long duration=endTime - startTime;    double d=duration / 1000000000.0;    System.out.println("Runtime using DJBX33A creating n=" + numberAttributes + " collisions: "+ d+ "seconds");  } catch (  Exception e) {    System.err.println("Error: " + e.getMessage());  }}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public void visitEnum(String name,String desc,String value){  if (this.visitor != null) {    visitor.visitEnum(name,desc,value);  }}  }
class C{  public void reset(){  branchCounter=0;  branchMap.clear();  branchlessMethods.clear();  branchIdMap.clear();  registeredNormalBranches.clear();  registeredSwitches.clear();  registeredDefaultCases.clear();  switchLabels.clear();}  }
class C{  @Override public synchronized void close() throws IOException {  if (!this.closed) {    try {      ChunkedInputStream.exhaustInputStream(this);    }  finally {      this.closed=true;    }  }}  }
class C{  void removePage(MVMap<?,?> map,long pos,int memory){  if (pos == 0) {    unsavedMemory=Math.max(0,unsavedMemory - memory);    return;  }  if (cache != null) {    if (DataUtils.getPageType(pos) == DataUtils.PAGE_TYPE_LEAF) {      cache.remove(pos);    }  }  Chunk c=getChunk(pos);  long version=currentVersion;  if (map == meta && currentStoreVersion >= 0) {    if (Thread.currentThread() == currentStoreThread) {      version=currentStoreVersion;    }  }  registerFreePage(version,c.id,DataUtils.getPageMaxLength(pos),1);}  }
class C{  public CsvWriter flush() throws IOException, CsvException {  write();  writer.flush();  return this;}  }
class C{  public void paint(java.awt.Graphics g){  if (Debug.debugging("link")) {    System.out.println(getName() + "|AmpLinkLayer.paint()");  }  if (extraGraphics != null) {    extraGraphics.render(g);  }  super.paint(g);}  }
class C{  @Override public void run(){  SpanProtos.Span.Builder sbuilder=SpanProtos.Span.newBuilder();  SpanProtos.TimelineAnnotation.Builder tlbuilder=SpanProtos.TimelineAnnotation.newBuilder();  List<Span> dequeuedSpans=new ArrayList<Span>(maxSpanBatchSize);  long errorCount=0;  while (running.get() || queue.size() > 0) {    Span firstSpan=null;    try {      firstSpan=queue.poll(1,TimeUnit.SECONDS);      if (firstSpan != null) {        dequeuedSpans.add(firstSpan);        queue.drainTo(dequeuedSpans,maxSpanBatchSize - 1);      }    } catch (    InterruptedException ie) {    }    startClient();    if (dequeuedSpans.isEmpty()) {      try {        this.mutator.flush();      } catch (      IOException e) {        LOG.error("Failed to flush writes to HBase.");        closeClient();      }      continue;    }    try {      for (      Span span : dequeuedSpans) {        sbuilder.clear().setTraceId(span.getSpanId().getHigh()).setStart(span.getStartTimeMillis()).setStop(span.getStopTimeMillis()).setSpanId(span.getSpanId().getLow()).setProcessId(span.getTracerId()).setDescription(span.getDescription());        if (span.getParents().length == 0) {          sbuilder.setParentId(0);        } else         if (span.getParents().length > 0) {          sbuilder.setParentId(span.getParents()[0].getLow());          if (span.getParents().length > 1) {            LOG.error("error: HBaseSpanReceiver does not support spans " + "with multiple parents.  Ignoring multiple parents for " + span);          }        }        for (        TimelineAnnotation ta : span.getTimelineAnnotations()) {          sbuilder.addTimeline(tlbuilder.clear().setTime(ta.getTime()).setMessage(ta.getMessage()).build());        }        Put put=new Put(Bytes.toBytes(span.getSpanId().getHigh()));        put.addColumn(HBaseSpanReceiver.this.cf,sbuilder.build().toByteArray(),null);        if (span.getParents().length == 0) {          put.addColumn(HBaseSpanReceiver.this.icf,INDEX_TIME_QUAL,Bytes.toBytes(span.getStartTimeMillis()));          put.addColumn(HBaseSpanReceiver.this.icf,INDEX_SPAN_QUAL,sbuilder.build().toByteArray());        }        this.mutator.mutate(put);      }      dequeuedSpans.clear();      errorCount=0;    } catch (    Exception e) {      errorCount+=1;      if (errorCount < MAX_ERRORS) {        try {          queue.addAll(dequeuedSpans);        } catch (        IllegalStateException ex) {          LOG.error("Drop " + dequeuedSpans.size() + " span(s) because writing to HBase failed.");        }      }      closeClient();      try {        Thread.sleep(500);      } catch (      InterruptedException e1) {      }    }  }  closeClient();}  }
class C{  @Override public void profile(){  recordStats();}  }
class C{  public void automaticallyDiscoverSignallingPairs() throws JmriException {  runWhenStablised=false;  jmri.jmrit.display.layoutEditor.LayoutBlockManager lbm=InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class);  if (!lbm.isAdvancedRoutingEnabled()) {    throw new JmriException("advanced routing not enabled");  }  if (!lbm.routingStablised()) {    runWhenStablised=true;    return;  }  Hashtable<NamedBean,ArrayList<NamedBean>> validPaths=lbm.getLayoutBlockConnectivityTools().discoverValidBeanPairs(null,SignalMast.class,LayoutBlockConnectivityTools.MASTTOMAST);  Enumeration<NamedBean> en=validPaths.keys();  firePropertyChange("autoGenerateUpdate",null,("Found " + validPaths.size() + " masts as sources for logic"));  for (  NamedBean nb : InstanceManager.getDefault(jmri.SignalMastManager.class).getNamedBeanList()) {    nb.removeProperty("intermediateSignal");  }  while (en.hasMoreElements()) {    SignalMast key=(SignalMast)en.nextElement();    SignalMastLogic sml=getSignalMastLogic(key);    if (sml == null) {      sml=newSignalMastLogic(key);    }    ArrayList<NamedBean> validDestMast=validPaths.get(key);    for (int i=0; i < validDestMast.size(); i++) {      if (!sml.isDestinationValid((SignalMast)validDestMast.get(i))) {        try {          sml.setDestinationMast((SignalMast)validDestMast.get(i));          sml.useLayoutEditorDetails(true,true,(SignalMast)validDestMast.get(i));          sml.useLayoutEditor(true,(SignalMast)validDestMast.get(i));        } catch (        jmri.JmriException ex) {          log.debug(ex.getLocalizedMessage(),ex);        }      }    }    if (sml.getDestinationList().size() == 1 && sml.getAutoTurnouts(sml.getDestinationList().get(0)).size() == 0) {      key.setProperty("intermediateSignal",true);    }  }  initialise();  firePropertyChange("autoGenerateComplete",null,null);}  }
class C{  public void testExportImportMultipleWithPause_gpx(){  testExportImportMultipleWithPause(TrackFileFormat.GPX);}  }
class C{  public void dispose(){  PluginInterface.instance().removeListener(m_listener);}  }
class C{  private static long computePresentationTime(int frameIndex){  return 132 + frameIndex * 1000000 / FRAME_RATE;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CombinedRangeCategoryPlot result=(CombinedRangeCategoryPlot)super.clone();  result.subplots=(List)ObjectUtilities.deepClone(this.subplots);  for (Iterator it=result.subplots.iterator(); it.hasNext(); ) {    Plot child=(Plot)it.next();    child.setParent(result);  }  ValueAxis rangeAxis=result.getRangeAxis();  if (rangeAxis != null) {    rangeAxis.configure();  }  return result;}  }
class C{  public static void main(String[] args){  System.out.println("Celsius     Fahrenheit     |     Fahrenheit     Celsius\n" + "----------------------------------------------------------");  for (double celsius=40.0, fahrenheit=120.0; celsius >= 31.0; celsius--, fahrenheit-=10) {    System.out.printf("%-12.1f",celsius);    System.out.printf("%-15.1f|",celsiusToFahrenheit(celsius));    System.out.printf("     %-15.1f",fahrenheit);    System.out.printf("%-7.2f\n\n",fahrenheitToCelsius(fahrenheit));  }}  }
class C{  public Builder mergeVarintField(final int number,final int value){  if (number == 0) {    throw new IllegalArgumentException("Zero is not a valid field number.");  }  getFieldBuilder(number).addVarint(value);  return this;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (derivedFeatureID) {case GamlPackage.SEXPERIMENT__NAME:      return GamlPackage.GAML_DEFINITION__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (derivedFeatureID) {default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public ReaderAccessibleInfo(BigIntArray edges,IntToIntPairHashMap nodeInfo){  this.edges=edges;  this.nodeInfo=nodeInfo;}  }
class C{  protected String createUniqueIdentifier(){  return new UID().toString().replace(':','_').replace('-','_');}  }
class C{  @Override synchronized public void engineSetSeed(byte[] seed){  if (state != null) {    digest.update(state);    for (int i=0; i < state.length; i++) {      state[i]=0;    }  }  state=digest.digest(seed);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String nl=System.getProperty("line.separator");  buf.append("              Version: ").append(this.getVersion()).append(nl);  buf.append("             IssuerDN: ").append(this.getIssuerDN()).append(nl);  buf.append("          This update: ").append(this.getThisUpdate()).append(nl);  buf.append("          Next update: ").append(this.getNextUpdate()).append(nl);  buf.append("  Signature Algorithm: ").append(this.getSigAlgName()).append(nl);  byte[] sig=this.getSignature();  buf.append("            Signature: ").append(new String(Hex.encode(sig,0,20))).append(nl);  for (int i=20; i < sig.length; i+=20) {    if (i < sig.length - 20) {      buf.append("                       ").append(new String(Hex.encode(sig,i,20))).append(nl);    } else {      buf.append("                       ").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);    }  }  Extensions extensions=c.getTBSCertList().getExtensions();  if (extensions != null) {    Enumeration e=extensions.oids();    if (e.hasMoreElements()) {      buf.append("           Extensions: ").append(nl);    }    while (e.hasMoreElements()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)e.nextElement();      Extension ext=extensions.getExtension(oid);      if (ext.getExtnValue() != null) {        byte[] octs=ext.getExtnValue().getOctets();        ASN1InputStream dIn=new ASN1InputStream(octs);        buf.append("                       critical(").append(ext.isCritical()).append(") ");        try {          if (oid.equals(Extension.cRLNumber)) {            buf.append(new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.deltaCRLIndicator)) {            buf.append("Base CRL: " + new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.issuingDistributionPoint)) {            buf.append(IssuingDistributionPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.cRLDistributionPoints)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.freshestCRL)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else {            buf.append(oid.getId());            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);          }        } catch (        Exception ex) {          buf.append(oid.getId());          buf.append(" value = ").append("*****").append(nl);        }      } else {        buf.append(nl);      }    }  }  Set set=getRevokedCertificates();  if (set != null) {    Iterator it=set.iterator();    while (it.hasNext()) {      buf.append(it.next());      buf.append(nl);    }  }  return buf.toString();}  }
class C{  public IndexRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notationList;  Node notation;  String notationName;  java.util.Collection actual=new java.util.ArrayList();  java.util.Collection expected=new java.util.ArrayList();  expected.add("notation1");  expected.add("notation2");  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notationList=docType.getNotations();  assertNotNull("notationsNotNull",notationList);  for (int indexN1005B=0; indexN1005B < notationList.getLength(); indexN1005B++) {    notation=(Node)notationList.item(indexN1005B);    notationName=notation.getNodeName();    actual.add(notationName);  }  assertEquals("names",expected,actual);}  }
class C{  @After public void tearDown() throws Exception {  removePlayer(player);}  }
class C{  public boolean isShortcutButton(){  return true;}  }
class C{  private JavascriptCompiler(String sourceText,Map<String,Method> functions){  if (sourceText == null) {    throw new NullPointerException();  }  this.sourceText=sourceText;  this.functions=functions;}  }
class C{  public static boolean equals(float[] field1,float[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  public void writeI18N(String key,Object[] args) throws IOException {  write(getString(i18n,key,args));}  }
class C{  public UdpServer() throws IOException {  NioDatagramAcceptor acceptor=new NioDatagramAcceptor();  acceptor.setHandler(this);  acceptor.bind(new InetSocketAddress(PORT));  System.out.println("Server started...");}  }
class C{  @Override public int graphType(){  return Drawable.TREE;}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN;}  }
class C{  protected double calcEnergyDelta(int index,double oldNodeDistribution,double oldEdgeDistance,double oldEdgeCrossing,double oldBorderLine,double oldEdgeLength,double oldAdditionalFactorsEnergy){  double energyDelta=0.0;  energyDelta+=getNodeDistribution(index) * 2.0;  energyDelta-=oldNodeDistribution * 2.0;  energyDelta+=getBorderline(index);  energyDelta-=oldBorderLine;  energyDelta+=getEdgeDistanceFromNode(index);  energyDelta+=getEdgeDistanceAffectedNodes(index);  energyDelta-=oldEdgeDistance;  energyDelta-=oldEdgeLength;  energyDelta+=getEdgeLengthAffectedEdges(index);  energyDelta-=oldEdgeCrossing;  energyDelta+=getEdgeCrossingAffectedEdges(index);  energyDelta-=oldAdditionalFactorsEnergy;  energyDelta+=getAdditionFactorsEnergy(index);  return energyDelta;}  }
class C{  public String relationReplaceTipText(){  return "The string to replace all matches of the regular expression with.";}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (delegationSuperClassSteps: ");  result.append(delegationSuperClassSteps);  result.append(", delegationTargetIsAbstract: ");  result.append(delegationTargetIsAbstract);  result.append(')');  return result.toString();}  }
class C{  public VaultConfig build() throws VaultException {  if (this.environmentLoader == null) {    this.environmentLoader=new EnvironmentLoader();  }  if (this.address == null) {    final String addressFromEnv=environmentLoader.loadVariable("VAULT_ADDR");    if (addressFromEnv != null) {      this.address=addressFromEnv;    } else {      throw new VaultException("No address is set");    }  }  if (this.token == null && environmentLoader.loadVariable("VAULT_TOKEN") != null) {    this.token=environmentLoader.loadVariable("VAULT_TOKEN");  }  if (this.sslPemUTF8 == null && environmentLoader.loadVariable("VAULT_SSL_CERT") != null) {    final File pemFile=new File(environmentLoader.loadVariable("VAULT_SSL_CERT"));    try (final InputStream input=new FileInputStream(pemFile)){      this.sslPemUTF8=inputStreamToUTF8(input);    } catch (    IOException e) {      throw new VaultException(e);    }  }  if (this.sslVerify == null && environmentLoader.loadVariable("VAULT_SSL_VERIFY") != null) {    this.sslVerify=Boolean.valueOf(environmentLoader.loadVariable("VAULT_SSL_VERIFY"));  }  if (this.openTimeout == null && environmentLoader.loadVariable("VAULT_OPEN_TIMEOUT") != null) {    try {      this.openTimeout=Integer.valueOf(environmentLoader.loadVariable("VAULT_OPEN_TIMEOUT"));    } catch (    NumberFormatException e) {      System.err.printf("The \"VAULT_OPEN_TIMEOUT\" environment variable contains value \"%s\", which cannot be parsed as an integer timeout period.%n",environmentLoader.loadVariable("VAULT_OPEN_TIMEOUT"));    }  }  if (this.readTimeout == null && environmentLoader.loadVariable("VAULT_READ_TIMEOUT") != null) {    try {      this.readTimeout=Integer.valueOf(environmentLoader.loadVariable("VAULT_READ_TIMEOUT"));    } catch (    NumberFormatException e) {      System.err.printf("The \"VAULT_READ_TIMEOUT\" environment variable contains value \"%s\", which cannot be parsed as an integer timeout period.%n",environmentLoader.loadVariable("VAULT_READ_TIMEOUT"));    }  }  return this;}  }
class C{  static float decodeMin(byte[] b,int dimension){  int offset=dimension * BYTES;  return NumericUtils.sortableIntToFloat(NumericUtils.sortableBytesToInt(b,offset));}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  @Override public Collection<? extends Certificate> engineGetCertificates(CertSelector selector) throws CertStoreException {  if (selector == null) {    Set<Certificate> matches=new HashSet<>();    matchX509Certs(new X509CertSelector(),matches);    matches.addAll(otherCertificates);    return matches;  }  if (selector instanceof X509CertSelector == false) {    Set<Certificate> matches=new HashSet<>();    matchX509Certs(selector,matches);    for (    Certificate cert : otherCertificates) {      if (selector.match(cert)) {        matches.add(cert);      }    }    return matches;  }  if (certSubjects.isEmpty()) {    return Collections.<X509Certificate>emptySet();  }  X509CertSelector x509Selector=(X509CertSelector)selector;  X500Principal subject;  X509Certificate matchCert=x509Selector.getCertificate();  if (matchCert != null) {    subject=matchCert.getSubjectX500Principal();  } else {    subject=x509Selector.getSubject();  }  if (subject != null) {    Object entry=certSubjects.get(subject);    if (entry == null) {      return Collections.<X509Certificate>emptySet();    }    if (entry instanceof X509Certificate) {      X509Certificate x509Entry=(X509Certificate)entry;      if (x509Selector.match(x509Entry)) {        return Collections.singleton(x509Entry);      } else {        return Collections.<X509Certificate>emptySet();      }    } else {      @SuppressWarnings("unchecked") List<X509Certificate> list=(List<X509Certificate>)entry;      Set<X509Certificate> matches=new HashSet<>(16);      for (      X509Certificate cert : list) {        if (x509Selector.match(cert)) {          matches.add(cert);        }      }      return matches;    }  }  Set<Certificate> matches=new HashSet<>(16);  matchX509Certs(x509Selector,matches);  return matches;}  }
class C{  @Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){  this.actionMode=mode;  return false;}  }
class C{  public final int size(){  return m_index + 1;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  public static Sector boundingSector(Globe globe,LatLon center,double radius){  double halfDeltaLatRadians=radius / globe.getRadiusAt(center);  double halfDeltaLonRadians=Math.PI * 2;  if (center.getLatitude().cos() > 0)   halfDeltaLonRadians=halfDeltaLatRadians / center.getLatitude().cos();  return new Sector(Angle.fromRadiansLatitude(center.getLatitude().radians - halfDeltaLatRadians),Angle.fromRadiansLatitude(center.getLatitude().radians + halfDeltaLatRadians),Angle.fromRadiansLongitude(center.getLongitude().radians - halfDeltaLonRadians),Angle.fromRadiansLongitude(center.getLongitude().radians + halfDeltaLonRadians));}  }
class C{  public static void verifyExplanation(String q,int doc,float score,boolean deep,Explanation expl){  float value=expl.getValue();  Assert.assertEquals(q + ": score(doc=" + doc+ ")="+ score+ " != explanationScore="+ value+ " Explanation: "+ expl,score,value,explainToleranceDelta(score,value));  if (!deep)   return;  Explanation detail[]=expl.getDetails();  if (expl.getDescription().endsWith("computed from:")) {    return;  }  String descr=expl.getDescription().toLowerCase(Locale.ROOT);  if (descr.startsWith("score based on ") && descr.contains("child docs in range")) {    Assert.assertTrue("Child doc explanations are missing",detail.length > 0);  }  if (detail.length > 0) {    if (detail.length == 1) {      if (expl.getDescription().endsWith("with freq of:") == false && (score >= 0 || expl.getDescription().endsWith("times others of:") == false)) {        verifyExplanation(q,doc,score,deep,detail[0]);      }    } else {      float x=0;      boolean productOf=descr.endsWith("product of:");      boolean sumOf=descr.endsWith("sum of:");      boolean maxOf=descr.endsWith("max of:");      boolean maxTimesOthers=false;      if (!(productOf || sumOf || maxOf)) {        int k1=descr.indexOf("max plus ");        if (k1 >= 0) {          k1+="max plus ".length();          int k2=descr.indexOf(" ",k1);          try {            x=Float.parseFloat(descr.substring(k1,k2).trim());            if (descr.substring(k2).trim().equals("times others of:")) {              maxTimesOthers=true;            }          } catch (          NumberFormatException e) {          }        }      }      Assert.assertTrue(q + ": multi valued explanation description=\"" + descr+ "\" must be 'max of plus x times others' or end with 'product of'"+ " or 'sum of:' or 'max of:' - "+ expl,productOf || sumOf || maxOf|| maxTimesOthers);      float sum=0;      float product=1;      float max=0;      for (int i=0; i < detail.length; i++) {        float dval=detail[i].getValue();        verifyExplanation(q,doc,dval,deep,detail[i]);        product*=dval;        sum+=dval;        max=Math.max(max,dval);      }      float combined=0;      if (productOf) {        combined=product;      } else       if (sumOf) {        combined=sum;      } else       if (maxOf) {        combined=max;      } else       if (maxTimesOthers) {        combined=max + x * (sum - max);      } else {        Assert.assertTrue("should never get here!",false);      }      Assert.assertEquals(q + ": actual subDetails combined==" + combined+ " != value="+ value+ " Explanation: "+ expl,combined,value,explainToleranceDelta(combined,value));    }  }}  }
class C{  private Vector3d computeAvoidance(Tuple3d targetLocation){  double sphereRadius=getSphereRadius();  double observationRadius=sphereRadius * 5;  double avoidRadius=sphereRadius * 5;  boolean useMyRadius=true;  boolean useTheirRadius=true;  double targetDistance=Double.MAX_VALUE;  if (targetLocation != null) {    targetDistance=Geometric.distance(this.getLocation(),targetLocation);    if (useMyRadius)     targetDistance-=sphereRadius;  }  IMovingAgent[] agents=this.getObjectsWithinMyDistance(observationRadius,useMyRadius,useTheirRadius,getSimulation().getMaxSphereRadius(),false,null);  Vector3d avoidVector=new Vector3d();  int i=0;  for (i=0; i < agents.length; i++) {    IMovingAgent agent=agents[i];    if (checkToAvoid(agent)) {      J3dPolar sphericVector=J3dPolar.createFrom(this.getLocation(),agent.getLocation());      double azimuth=sphericVector.azimuth - this.getHeading().azimuth;      double elevation=sphericVector.elevation - this.getHeading().elevation;      if (!((azimuth < Geometric.MINUS_PI_HALF) | (azimuth > Geometric.PI_HALF) | (elevation < Geometric.MINUS_PI_HALF)| elevation > Geometric.PI_HALF)) {        double distance=sphericVector.radius;        if (useTheirRadius)         distance-=agent.getSphereRadius();        if (useMyRadius)         distance-=sphereRadius;        if (distance <= avoidRadius) {          if (distance < targetDistance) {            if (sphericVector.radius != 0.0) {              double s=1 / sphericVector.radius;              if (distance == 0.0)               distance=.00000001;              s/=(distance * distance);              s*=(agent.getSphereRadius() * agent.getSphereRadius());              sphericVector.radius*=s;            }            sphericVector.azimuth+=(azimuth > 0.0) ? Geometric.MINUS_PI_HALF : Geometric.PI_HALF;            if (is3dMode())             sphericVector.elevation+=(elevation > 0.0) ? Geometric.MINUS_PI_HALF : Geometric.PI_HALF;            Vector3d v1=new Vector3d(sphericVector.toCartesian());            avoidVector.add(v1);          }        }      }    }  }  J3dPolar v=J3dPolar.createFrom(avoidVector);  double angleNoise;  angleNoise=Math.toRadians(10 * r.nextGaussian());  v.azimuth=Geometric.clampAngleRadians(v.azimuth + angleNoise);  if (is3dMode()) {    angleNoise=Math.toRadians(10 * r.nextGaussian());    v.elevation=Geometric.clampAngleRadians(v.elevation + angleNoise);  }  avoidVector=new Vector3d(v.toCartesian());  Geometric.normalize(avoidVector);  return avoidVector;}  }
class C{  public static void checkMoveToOK(Resource source,Resource target) throws IOException {  if (!source.exists()) {    throw new IOException("can't move [" + source.getPath() + "] to ["+ target.getPath()+ "], source file does not exist");  }  if (source.isDirectory() && target.isFile())   throw new IOException("can't move [" + source.getPath() + "] directory to ["+ target.getPath()+ "], target is a file");  if (source.isFile() && target.isDirectory())   throw new IOException("can't move [" + source.getPath() + "] file to ["+ target.getPath()+ "], target is a directory");}  }
class C{  public ModularResultant resultant(int p){  int[] fcoeffs=Arrays.copyOf(coeffs,coeffs.length + 1);  IntegerPolynomial f=new IntegerPolynomial(fcoeffs);  int N=fcoeffs.length;  IntegerPolynomial a=new IntegerPolynomial(N);  a.coeffs[0]=-1;  a.coeffs[N - 1]=1;  IntegerPolynomial b=new IntegerPolynomial(f.coeffs);  IntegerPolynomial v1=new IntegerPolynomial(N);  IntegerPolynomial v2=new IntegerPolynomial(N);  v2.coeffs[0]=1;  int da=N - 1;  int db=b.degree();  int ta=da;  int c=0;  int r=1;  while (db > 0) {    c=Util.invert(b.coeffs[db],p);    c=(c * a.coeffs[da]) % p;    a.multShiftSub(b,c,da - db,p);    v1.multShiftSub(v2,c,da - db,p);    da=a.degree();    if (da < db) {      r*=Util.pow(b.coeffs[db],ta - da,p);      r%=p;      if (ta % 2 == 1 && db % 2 == 1) {        r=(-r) % p;      }      IntegerPolynomial temp=a;      a=b;      b=temp;      int tempdeg=da;      da=db;      temp=v1;      v1=v2;      v2=temp;      ta=db;      db=tempdeg;    }  }  r*=Util.pow(b.coeffs[0],da,p);  r%=p;  c=Util.invert(b.coeffs[0],p);  v2.mult(c);  v2.mod(p);  v2.mult(r);  v2.mod(p);  v2.coeffs=Arrays.copyOf(v2.coeffs,v2.coeffs.length - 1);  return new ModularResultant(new BigIntPolynomial(v2),BigInteger.valueOf(r),BigInteger.valueOf(p));}  }
class C{  protected void buildFieldTypes(AbstractSession session){  for (  FieldDefinition field : getFields()) {    if (field.getForeignKeyFieldName() != null) {      addForeignKeyConstraint(buildForeignKeyConstraint(field,session.getPlatform()));    }  }}  }
class C{  public ArraySet(ArraySet<E> set){  this();  if (set != null) {    addAll(set);  }}  }
class C{  @Override public void onAccept(){  if (_request != null) {    System.out.println("OLD_REQUEST: " + _request);  }  _sequenceClose.set(-1);}  }
class C{  @Override public void handleClick(int x,int y,PlotRenderingInfo info){  Rectangle2D dataArea=info.getDataArea();  if (dataArea.contains(x,y)) {    double java2D=0.0;    if (this.orientation == PlotOrientation.HORIZONTAL) {      java2D=x;    } else     if (this.orientation == PlotOrientation.VERTICAL) {      java2D=y;    }    RectangleEdge edge=Plot.resolveRangeAxisLocation(getRangeAxisLocation(),this.orientation);    double value=getRangeAxis().java2DToValue(java2D,info.getDataArea(),edge);    setAnchorValue(value);    setRangeCrosshairValue(value);  }}  }
class C{  boolean matchTree(Node r1,Node r2){  if (r2 == null && r1 == null)   return true;  if (r1 == null || r2 == null)   return false;  if (r1.value != r2.value)   return false;  return (matchTree(r1.left,r2.left) && matchTree(r1.right,r2.right));}  }
class C{  public static boolean hasCombBar(){  return (!AndroidDevices.isPhone() && ((VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) && (VERSION.SDK_INT <= VERSION_CODES.JELLY_BEAN)));}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @Override public void processEvent(SystemEvent se) throws AbortProcessingException {  if (se instanceof PreDestroyViewMapEvent) {    processPreDestroyViewMap(se);  }  if (se instanceof PostConstructViewMapEvent) {    processPostConstructViewMap(se);  }}  }
class C{  public IgniteFutureCancelledException(String msg){  super(msg);}  }
class C{  private void waitHibernateNodeStarted() throws Exception {  long expireTime=System.currentTimeMillis() + RecoveryConstants.RECOVERY_CHECK_TIMEOUT;  while (true) {    informHibernateNodeToReconfigure();    List<String> hibernateNodes=getHibernateNodes();    if (hibernateNodes.isEmpty()) {      log.info("Db node rebuild finished");      break;    }    Thread.sleep(RecoveryConstants.RECOVERY_CHECK_INTERVAL);    if (System.currentTimeMillis() >= expireTime) {      log.error("Hibernate nodes({}) can't get started within the stipulated time({})",hibernateNodes,RecoveryConstants.RECOVERY_CHECK_TIMEOUT);      markRecoveryFailed(RecoveryStatus.ErrorCode.SYNC_FAILED);      throw APIException.internalServerErrors.nodeRebuildFailed();    }  }}  }
class C{  public void testGetF7Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF7Momentary();  assertEquals(expResult,result);}  }
class C{  public RedirectException(String message){  super(message);}  }
class C{  @Override public long position(Clob clobPattern,long start) throws SQLException {  throw unsupported("LOB search");}  }
class C{  public void testPerf3StreamRangeOnly(){  epService.getEPAdministrator().createEPL("create window ST0.win:keepall() as SupportBean_ST0");  epService.getEPAdministrator().createEPL("@Name('I1') insert into ST0 select * from SupportBean_ST0");  epService.getEPAdministrator().createEPL("create window ST1.win:keepall() as SupportBean_ST1");  epService.getEPAdministrator().createEPL("@Name('I2') insert into ST1 select * from SupportBean_ST1");  log.info("Preloading events");  for (int i=0; i < 10000; i++) {    epService.getEPRuntime().sendEvent(new SupportBean_ST0("ST0","ST0",i));    epService.getEPRuntime().sendEvent(new SupportBean_ST1("ST1","ST1",i));  }  log.info("Done preloading");  String epl="select * from SupportBeanRange.std:lastevent() a, ST0 st0, ST1 st1 " + "where st0.p00 between rangeStart and rangeEnd and st1.p10 between rangeStart and rangeEnd";  EPStatement stmt=epService.getEPAdministrator().createEPL(epl);  stmt.addListener(listener);  log.info("Querying");  long startTime=System.currentTimeMillis();  for (int i=0; i < 1000; i++) {    epService.getEPRuntime().sendEvent(new SupportBeanRange("R","R",100,101));    assertEquals(4,listener.getAndResetLastNewData().length);  }  log.info("Done Querying");  long endTime=System.currentTimeMillis();  log.info("delta=" + (endTime - startTime));  assertTrue((endTime - startTime) < 500);  stmt.destroy();}  }
class C{  public boolean dumpVMNamespace(String namespace){  return vmFactory.dumpVMNamespace(namespace);}  }
class C{  public XAtomList(XAtom[] atoms){  init(atoms);}  }
class C{  public EntityListIterator selectListIteratorByCondition(Delegator delegator,ModelEntity modelEntity,EntityCondition whereEntityCondition,EntityCondition havingEntityCondition,Collection<String> fieldsToSelect,List<String> orderBy,EntityFindOptions findOptions) throws GenericEntityException {  if (modelEntity == null) {    return null;  }  ModelViewEntity modelViewEntity=null;  if (modelEntity instanceof ModelViewEntity) {    modelViewEntity=(ModelViewEntity)modelEntity;  }  if (findOptions == null)   findOptions=new EntityFindOptions();  boolean verboseOn=Debug.verboseOn();  if (verboseOn) {    Debug.logVerbose("Doing selectListIteratorByCondition with whereEntityCondition: " + whereEntityCondition,module);  }  List<ModelField> selectFields=new LinkedList<ModelField>();  if (UtilValidate.isNotEmpty(fieldsToSelect)) {    Set<String> tempKeys=new HashSet<String>();    tempKeys.addAll(fieldsToSelect);    Set<String> fieldSetsToInclude=new HashSet<String>();    Set<String> addedFields=new HashSet<String>();    for (    String fieldToSelect : fieldsToSelect) {      if (tempKeys.contains(fieldToSelect)) {        ModelField curField=modelEntity.getField(fieldToSelect);        if (curField != null) {          fieldSetsToInclude.add(curField.getFieldSet());          selectFields.add(curField);          tempKeys.remove(fieldToSelect);          addedFields.add(fieldToSelect);        }      }    }    if (tempKeys.size() > 0) {      throw new GenericModelException("In selectListIteratorByCondition invalid field names specified: " + tempKeys.toString());    }    fieldSetsToInclude.remove("");    if (verboseOn) {      Debug.logInfo("[" + modelEntity.getEntityName() + "]: field-sets to include: "+ fieldSetsToInclude,module);    }    if (UtilValidate.isNotEmpty(fieldSetsToInclude)) {      Iterator<ModelField> fieldIter=modelEntity.getFieldsIterator();      Set<String> extraFields=new HashSet<String>();      Set<String> reasonSets=new HashSet<String>();      while (fieldIter.hasNext()) {        ModelField curField=fieldIter.next();        String fieldSet=curField.getFieldSet();        if (UtilValidate.isEmpty(fieldSet)) {          continue;        }        if (!fieldSetsToInclude.contains(fieldSet)) {          continue;        }        String fieldName=curField.getName();        if (addedFields.contains(fieldName)) {          continue;        }        reasonSets.add(fieldSet);        extraFields.add(fieldName);        addedFields.add(fieldName);        selectFields.add(curField);      }      if (verboseOn) {        Debug.logInfo("[" + modelEntity.getEntityName() + "]: auto-added select fields: "+ extraFields,module);        Debug.logInfo("[" + modelEntity.getEntityName() + "]: auto-added field-sets: "+ reasonSets,module);      }    }  } else {    selectFields=modelEntity.getFieldsUnmodifiable();  }  StringBuilder sqlBuffer=new StringBuilder("SELECT ");  if (findOptions.getDistinct()) {    sqlBuffer.append("DISTINCT ");  }  if (selectFields.size() > 0) {    modelEntity.colNameString(selectFields,sqlBuffer,"",", ","",datasource.getAliasViewColumns());  } else {    sqlBuffer.append("*");  }  List<EntityCondition> viewWhereConditions=null;  List<EntityCondition> viewHavingConditions=null;  List<String> viewOrderByList=null;  if (modelViewEntity != null) {    viewWhereConditions=new LinkedList<EntityCondition>();    viewHavingConditions=new LinkedList<EntityCondition>();    viewOrderByList=new LinkedList<String>();    modelViewEntity.populateViewEntityConditionInformation(modelFieldTypeReader,viewWhereConditions,viewHavingConditions,viewOrderByList,null);  }  sqlBuffer.append(SqlJdbcUtil.makeFromClause(modelEntity,modelFieldTypeReader,datasource));  List<EntityConditionParam> whereEntityConditionParams=new LinkedList<EntityConditionParam>();  makeConditionWhereString(sqlBuffer," WHERE ",modelEntity,whereEntityCondition,viewWhereConditions,whereEntityConditionParams);  if (modelViewEntity != null) {    modelViewEntity.colNameString(modelViewEntity.getGroupBysCopy(selectFields),sqlBuffer," GROUP BY ",", ","",false);  }  List<EntityConditionParam> havingEntityConditionParams=new LinkedList<EntityConditionParam>();  makeConditionHavingString(sqlBuffer," HAVING ",modelEntity,havingEntityCondition,viewHavingConditions,havingEntityConditionParams);  List<String> orderByExpanded=new LinkedList<String>();  if (orderBy != null) {    orderByExpanded.addAll(orderBy);  }  if (viewOrderByList != null) {    orderByExpanded.addAll(viewOrderByList);  }  sqlBuffer.append(SqlJdbcUtil.makeOrderByClause(modelEntity,orderByExpanded,datasource));  makeOffsetString(sqlBuffer,findOptions);  String sql=sqlBuffer.toString();  SQLProcessor sqlP=new SQLProcessor(delegator,helperInfo);  sqlP.prepareStatement(sql,findOptions.getSpecifyTypeAndConcur(),findOptions.getResultSetType(),findOptions.getResultSetConcurrency(),findOptions.getFetchSize(),findOptions.getMaxRows());  if (verboseOn) {    Debug.logVerbose("Setting the whereEntityConditionParams: " + whereEntityConditionParams,module);  }  for (  EntityConditionParam whereEntityConditionParam : whereEntityConditionParams) {    SqlJdbcUtil.setValue(sqlP,whereEntityConditionParam.getModelField(),modelEntity.getEntityName(),whereEntityConditionParam.getFieldValue(),modelFieldTypeReader);  }  if (verboseOn) {    Debug.logVerbose("Setting the havingEntityConditionParams: " + havingEntityConditionParams,module);  }  for (  EntityConditionParam havingEntityConditionParam : havingEntityConditionParams) {    SqlJdbcUtil.setValue(sqlP,havingEntityConditionParam.getModelField(),modelEntity.getEntityName(),havingEntityConditionParam.getFieldValue(),modelFieldTypeReader);  }  long queryStartTime=0;  if (Debug.timingOn()) {    queryStartTime=System.currentTimeMillis();  }  sqlP.executeQuery();  if (Debug.timingOn()) {    long queryEndTime=System.currentTimeMillis();    long queryTotalTime=queryEndTime - queryStartTime;    if (queryTotalTime > 150) {      Debug.logTiming("Ran query in " + queryTotalTime + " milli-seconds: "+ " EntityName: "+ modelEntity.getEntityName()+ " Sql: "+ sql+ " where clause:"+ whereEntityConditionParams,module);    }  }  return new EntityListIterator(sqlP,modelEntity,selectFields,modelFieldTypeReader,this,whereEntityCondition,havingEntityCondition,findOptions.getDistinct());}  }
class C{  public static void consumeProcessOutput(Process self,Appendable output,Appendable error){  consumeProcessOutputStream(self,output);  consumeProcessErrorStream(self,error);}  }
class C{  @Deprecated public static void subtract(String name,double amount) throws UserDoesNotExistException, NoLoanPermittedException {  try {    substract(name,BigDecimal.valueOf(amount));  } catch (  ArithmeticException e) {    logger.log(Level.WARNING,"Failed to substract " + amount + " of balance of "+ name+ ": "+ e.getMessage(),e);  }}  }
class C{  public static <T>void ifPresent(Optional<T> optional,Action1<T> action){  if (optional.isPresent()) {    action.call(optional.get());  }}  }
class C{  void removeSkippedScrap(){  if (mSkippedScrap == null) {    return;  }  final int count=mSkippedScrap.size();  for (int i=0; i < count; i++) {    removeDetachedView(mSkippedScrap.get(i),false);  }  mSkippedScrap.clear();}  }
class C{  public void release(){  super.release();  bean=null;}  }
class C{  public String toString(String encoding) throws UnsupportedEncodingException {  return new String(buf,0,count,encoding);}  }
class C{  @Override public Double put(Long key,Double value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public void resetData(){  super.resetData();  scalarUsedSpaceStream.resetData();  arrayUsedSpaceStream.resetData();  scalarObjectsStream.resetData();  arrayObjectsStream.resetData();  arrayPrimitiveStream.resetData();  refFromImmortalStream.resetData();  totalScalarObjects=0;  totalArrayObjects=0;  totalPrimitives=0;  totalScalarUsedSpace=0;  totalArrayUsedSpace=0;  totalRefFromImmortal=0;}  }
class C{  public StatusInfo(){  this(OK,null);}  }
class C{  public static double det(double x0,double x1,double y0,double y1){  return x0 * y1 - y0 * x1;}  }
class C{  synchronized public void sendX10Sequence(X10Sequence s,SerialListener l){  s.reset();  X10Sequence.Command c;  int devicemask=0;  c=s.getCommand();  if (c == null) {    return;  }  int housecode=c.getHouseCode();  devicemask=setDeviceBit(devicemask,((X10Sequence.Address)c).getAddress());  while (((c=s.getCommand()) != null) && (c.isAddress())) {    if (housecode != ((X10Sequence.Address)c).getHouseCode()) {      log.error("multiple housecodes found: " + housecode + ", "+ c.getHouseCode());      return;    }    devicemask=setDeviceBit(devicemask,((X10Sequence.Address)c).getAddress());  }  if (c == null) {    log.warn("no command");    return;  }  formatAndSend(housecode,devicemask,(X10Sequence.Function)c,l);  while (((c=s.getCommand()) != null) && (c.isFunction())) {    if (housecode != ((X10Sequence.Function)c).getHouseCode()) {      log.error("multiple housecodes found: " + housecode + ", "+ c.getHouseCode());      return;    }    formatAndSend(housecode,devicemask,(X10Sequence.Function)c,l);  }}  }
class C{  int addVert(String name,float x,float y,float z){  int i=nvert;  if (i >= maxvert) {    if (vert == null) {      maxvert=100;      vert=new float[maxvert * 3];      atoms=new Atom[maxvert];    } else {      maxvert*=2;      float nv[]=new float[maxvert * 3];      System.arraycopy(vert,0,nv,0,vert.length);      vert=nv;      Atom na[]=new Atom[maxvert];      System.arraycopy(atoms,0,na,0,atoms.length);      atoms=na;    }  }  Atom a=atomTable.get(name.toLowerCase());  if (a == null) {    a=defaultAtom;  }  atoms[i]=a;  i*=3;  vert[i]=x;  vert[i + 1]=y;  vert[i + 2]=z;  return nvert++;}  }
class C{  @Override public Iterator<Class<? super T>> iterator(){  return createClassList().iterator();}  }
class C{  public void removeTimeChangeListener(TimeChangeListener listener){  timeChangeListeners.remove(listener);}  }
class C{  public static QualifiedName fromName(String type,String name){  return new QualifiedName(TypeName.nameOf(type),name);}  }
class C{  public static void reorderVisually(byte[] levels,Object[] objects){  int len=levels.length;  byte lowestOddLevel=(byte)(NUMLEVELS + 1);  byte highestLevel=0;  for (int i=0; i < len; i++) {    byte level=levels[i];    if (level > highestLevel) {      highestLevel=level;    }    if ((level & 0x01) != 0 && level < lowestOddLevel) {      lowestOddLevel=level;    }  }  while (highestLevel >= lowestOddLevel) {    int i=0;    for (; ; ) {      while (i < len && levels[i] < highestLevel) {        i++;      }      int begin=i++;      if (begin == levels.length) {        break;      }      while (i < len && levels[i] >= highestLevel) {        i++;      }      int end=i - 1;      while (begin < end) {        Object temp=objects[begin];        objects[begin]=objects[end];        objects[end]=temp;        ++begin;        --end;      }    }    --highestLevel;  }}  }
class C{  public Output compile(FileContext context) throws CompilationException {  final ImportStack importStack=new ImportStack();  return adapter.compile(context,importStack);}  }
class C{  private static final void encodeRun(StringBuffer buffer,byte value,int length,byte[] state){  if (length < 4) {    for (int j=0; j < length; ++j) {      if (value == ESCAPE_BYTE)       appendEncodedByte(buffer,ESCAPE_BYTE,state);      appendEncodedByte(buffer,value,state);    }  } else {    if (length == ESCAPE_BYTE) {      if (value == ESCAPE_BYTE)       appendEncodedByte(buffer,ESCAPE_BYTE,state);      appendEncodedByte(buffer,value,state);      --length;    }    appendEncodedByte(buffer,ESCAPE_BYTE,state);    appendEncodedByte(buffer,(byte)length,state);    appendEncodedByte(buffer,value,state);  }}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public void fill(long val){  Arrays.fill(_data,0,_pos,val);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  public void close() throws Exception {  Reference session=local.get();  if (session == null) {    throw new PersistenceException("Session does not exist");  }  int reference=session.clear();  if (reference == 0) {    local.remove();  }}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  public boolean isSupported(String sql){  return true;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (Anonymous_displayColor_1_1: ");  result.append(anonymous_displayColor_1_1);  result.append(", colorValue_1: ");  result.append(colorValue_1);  result.append(')');  return result.toString();}  }
class C{  void connect() throws IOException {  localTcp.connect();  updateLocalClock();}  }
class C{  public InputTextMessageContent build(){  return new InputTextMessageContent(message_text,parse_mode,disable_web_page_preview);}  }
class C{  public static JavaEnvironment current(){  return new JavaEnvironment(getCurrentJavaPath());}  }
class C{  public static int px2dp(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public SQLColumn(SQLTable t,String name){  m_table=t;  m_sName=name;}  }
class C{  public boolean isScrollVisible(){  return isScrollVisible;}  }
class C{  private static boolean isLower8BitRegister(final String register){  return register.equals("al") || register.equals("bl") || register.equals("cl")|| register.equals("dl");}  }
class C{  public final void testHashCode01(){  ECFieldF2m f=new ECFieldF2m(2000);  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  public boolean needsAttention(){  return needsAttention;}  }
class C{  public void animateX(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  private void recurse(final Block root,boolean listMode){  Block block, list;  Line line=root.lines;  if (listMode) {    root.removeListIndent();  }  while (line != null && line.isEmpty) {    line=line.next;  }  if (line == null) {    return;  }  while (line != null) {    final LineType type=line.getLineType();switch (type) {case OTHER:{        final boolean wasEmpty=line.prevEmpty;        while (line != null && !line.isEmpty) {          final LineType t=line.getLineType();          if ((listMode) && (t == LineType.OLIST || t == LineType.ULIST)) {            break;          }          if (t == LineType.FENCED_CODE || t == LineType.BQUOTE) {            break;          }          line=line.next;        }        final BlockType bt;        if (line != null && !line.isEmpty) {          bt=(!wasEmpty) ? BlockType.NONE : BlockType.PARAGRAPH;          root.split(line.previous).type=bt;          root.removeLeadingEmptyLines();        } else {          bt=(listMode && (line == null || !line.isEmpty) && !wasEmpty) ? BlockType.NONE : BlockType.PARAGRAPH;          root.split(line == null ? root.lineTail : line).type=bt;          root.removeLeadingEmptyLines();        }        line=root.lines;        break;      }case BQUOTE:    while (line != null) {      if (!line.isEmpty && (line.prevEmpty && line.leading == 0 && line.getLineType() != LineType.BQUOTE)) {        break;      }      line=line.next;    }  block=root.split(line != null ? line.previous : root.lineTail);block.type=BlockType.BLOCKQUOTE;block.removeSurroundingEmptyLines();block.removeBlockQuotePrefix();this.recurse(block,false);line=root.lines;break;case FENCED_CODE:line=line.next;while (line != null) {if (line.getLineType() == LineType.FENCED_CODE) {break;}line=line.next;}if (line != null) {line=line.next;}block=root.split(line != null ? line.previous : root.lineTail);block.type=BlockType.FENCED_CODE;block.meta=Utils.getMetaFromFence(block.lines.value);block.lines.setEmpty();if (block.lineTail.getLineType() == LineType.FENCED_CODE) {block.lineTail.setEmpty();}block.removeSurroundingEmptyLines();break;case OLIST:case ULIST:while (line != null) {final LineType t=line.getLineType();if (!line.isEmpty && (line.prevEmpty && line.leading == 0 && !(t == LineType.OLIST || t == LineType.ULIST))) {break;}line=line.next;}list=root.split(line != null ? line.previous : root.lineTail);list.type=type == LineType.OLIST ? BlockType.ORDERED_LIST : BlockType.UNORDERED_LIST;list.lines.prevEmpty=false;list.lineTail.nextEmpty=false;list.removeSurroundingEmptyLines();list.lines.prevEmpty=list.lineTail.nextEmpty=false;initListBlock(list);block=list.blocks;while (block != null) {this.recurse(block,true);block=block.next;}list.expandListParagraphs();break;default :line=line.next;break;}}}  }
class C{  protected void appendUintvarInteger(long value){  int i;  long max=SHORT_INTEGER_MAX;  for (i=0; i < 5; i++) {    if (value < max) {      break;    }    max=(max << 7) | 0x7fl;  }  while (i > 0) {    long temp=value >>> (i * 7);    temp=temp & 0x7f;    append((int)((temp | 0x80) & 0xff));    i--;  }  append((int)(value & 0x7f));}  }
class C{  private void prepareDBMetrics(StorageSystem storageSystem,DbClient dbClient,final Map<String,List<String>> dmFsMountMap,final Map<String,Long> dmCapacityMap,final Map<String,List<String>> vdmFsMountMap,final Map<String,Long> vdmCapacityMap){  List<VirtualNAS> modifiedVNas=new ArrayList<VirtualNAS>();  List<PhysicalNAS> modifiedPNas=new ArrayList<PhysicalNAS>();  for (  Entry<String,List<String>> eachNas : dmFsMountMap.entrySet()) {    _logger.info(" Computing metrics for data mover {}  ",eachNas.getKey());    PhysicalNAS pNAS=findPhysicalNasByNativeId(storageSystem,dbClient,eachNas.getKey());    List<VirtualNAS> vNasList=new ArrayList<VirtualNAS>();    if (null != pNAS) {      URIQueryResultList virtualNASUris=new URIQueryResultList();      dbClient.queryByConstraint(ContainmentConstraint.Factory.getVirtualNASByParentConstraint(pNAS.getId()),virtualNASUris);      Long totalDmObjects=0L;      Long totalDmCapacity=0L;      Iterator<URI> virtualNASIter=virtualNASUris.iterator();      while (virtualNASIter.hasNext()) {        VirtualNAS virtualNAS=dbClient.queryObject(VirtualNAS.class,virtualNASIter.next());        if (virtualNAS != null && !virtualNAS.getInactive()) {          vNasList.add(virtualNAS);          int vNasObjects=0;          if (vdmFsMountMap.get(virtualNAS.getNativeId()) != null) {            vNasObjects=vdmFsMountMap.get(virtualNAS.getNativeId()).size();            totalDmObjects=totalDmObjects + vNasObjects;          }          Long vNasCapacity=0L;          if (vdmCapacityMap.get(virtualNAS.getNativeId()) != null) {            vNasCapacity=vdmCapacityMap.get(virtualNAS.getNativeId());            totalDmCapacity=totalDmCapacity + vNasCapacity;          }          StringMap vNasDbMetrics=virtualNAS.getMetrics();          vNasDbMetrics.put(MetricsKeys.storageObjects.name(),String.valueOf(vNasObjects));          vNasDbMetrics.put(MetricsKeys.usedStorageCapacity.name(),String.valueOf(vNasCapacity));          modifiedVNas.add(virtualNAS);        }      }      if (dmFsMountMap.get(pNAS.getNativeId()) != null) {        totalDmObjects=totalDmObjects + dmFsMountMap.get(pNAS.getNativeId()).size();      }      if (dmCapacityMap.get(pNAS.getNativeId()) != null) {        totalDmCapacity=totalDmCapacity + dmCapacityMap.get(pNAS.getNativeId());      }      for (      VirtualNAS vNas : vNasList) {        StringMap vNasDbMetrics=vNas.getMetrics();        long StorageObj=MetricsKeys.getLong(MetricsKeys.storageObjects,vNas.getMetrics());        double percentageLoad=((double)StorageObj / totalDmObjects) * 100;        vNasDbMetrics.put(MetricsKeys.percentLoad.name(),String.valueOf(percentageLoad));      }      StringMap pNasDbMetrics=pNAS.getMetrics();      pNasDbMetrics.put(MetricsKeys.storageObjects.name(),String.valueOf(totalDmObjects));      pNasDbMetrics.put(MetricsKeys.usedStorageCapacity.name(),String.valueOf(totalDmCapacity));      long maxObjects=MetricsKeys.getLong(MetricsKeys.maxStorageObjects,pNasDbMetrics);      long maxCapacity=MetricsKeys.getLong(MetricsKeys.maxStorageCapacity,pNasDbMetrics);      double percentageLoad=((double)totalDmObjects / maxObjects) * 100;      pNasDbMetrics.put(MetricsKeys.percentLoad.name(),String.valueOf(percentageLoad));      if (totalDmObjects >= maxObjects || totalDmCapacity >= maxCapacity) {        pNasDbMetrics.put(MetricsKeys.overLoaded.name(),"true");        for (        VirtualNAS vNas : vNasList) {          StringMap vNasDbMetrics=vNas.getMetrics();          vNasDbMetrics.put(MetricsKeys.overLoaded.name(),"true");        }      } else {        pNasDbMetrics.put(MetricsKeys.overLoaded.name(),"false");        for (        VirtualNAS vNas : vNasList) {          StringMap vNasDbMetrics=vNas.getMetrics();          vNasDbMetrics.put(MetricsKeys.overLoaded.name(),"false");        }      }      modifiedPNas.add(pNAS);    }    if (!modifiedVNas.isEmpty()) {      dbClient.persistObject(modifiedVNas);    }    if (!modifiedPNas.isEmpty()) {      dbClient.persistObject(modifiedPNas);    }  }  return;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public void shadow(){  m_saveCommit=m_commit;  m_isoFrees=new int[m_ints];  for (int i=0; i < m_ints; i++) {    m_isoFrees[i]=m_commit[i] & ~m_live[i];  }  m_commit=m_transients.clone();}  }
class C{  public synchronized void message(XNetReply l){  if (log.isDebugEnabled()) {    log.debug("recieved message: " + l);  }  if (l.isFeedbackBroadcastMessage()) {    int numDataBytes=l.getElement(0) & 0x0f;    for (int i=1; i < numDataBytes; i+=2) {      if ((l.getFeedbackMessageType(i) == 2) && baseaddress == l.getFeedbackEncoderMsgAddr(i) && nibble == (l.getElement(i + 1) & 0x10)) {        if (log.isDebugEnabled()) {          log.debug("Message for sensor " + systemName + " (Address "+ baseaddress+ " position "+ (address - (baseaddress * 8))+ ")");        }        if (statusRequested && l.isUnsolicited()) {          l.resetUnsolicited();          statusRequested=false;        }        if (((l.getElement(i + 1) & nibblebit) != 0) ^ _inverted) {          setOwnState(Sensor.ACTIVE);        } else {          setOwnState(Sensor.INACTIVE);        }      }    }  }  return;}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyString01() throws Exception {  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          PKCS8EncodedKeySpec eks=epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l].getName());          if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {            fail(algName[i][0] + " != " + algName[i][1]);          }        } catch (        InvalidKeyException e) {          fail(algName[i][0] + ", " + algName[i][1]+ ": "+ e);        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public IgniteDeploymentException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  private void groupFind(Node r,int pg){  Edge e;  boolean first=true;  for (int noa=0; (e=r.getChild(noa)) != null; noa++) {    if (e.getTarget().getParent(0) == e) {      if (e.getTarget().getChild(0) != null && e.getTarget().getCVisible()) {        if (first) {          m_groups[pg].m_start=m_groupNum;          first=false;        }        m_groups[pg].m_end=m_groupNum;        m_groups[m_groupNum].m_p=e.getTarget();        m_groups[m_groupNum].m_pg=pg;        m_groupNum++;      }    }  }}  }
class C{  private void testDoubleRange(int precisionStep) throws Exception {  final String field="ascfield" + precisionStep;  final long lower=-1000L, upper=+2000L;  Query tq=LegacyNumericRangeQuery.newDoubleRange(field,precisionStep,NumericUtils.sortableLongToDouble(lower),NumericUtils.sortableLongToDouble(upper),true,true);  TopDocs tTopDocs=searcher.search(tq,1);  assertEquals("Returned count of range query must be equal to inclusive range length",upper - lower + 1,tTopDocs.totalHits);}  }
class C{  public DViewJcePolicy(JDialog parent,JcePolicy jcePolicy) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.jcePolicy=jcePolicy;  initComponents();}  }
class C{  public static String removeAllLineSeparators(String text){  Pattern crlf=Pattern.compile("(\r\n|\r|\n|\n\r)");  Matcher m=crlf.matcher(text);  if (m.find()) {    text=m.replaceAll(" ");  }  return text;}  }
class C{  private void toggleNature(IProject project) throws CoreException {  IProjectDescription description=project.getDescription();  String[] natures=description.getNatureIds();  for (int i=0; i < natures.length; ++i) {    if (JReFrameworkerNature.NATURE_ID.equals(natures[i])) {      String[] newNatures=new String[natures.length - 1];      System.arraycopy(natures,0,newNatures,0,i);      System.arraycopy(natures,i + 1,newNatures,i,natures.length - i - 1);      description.setNatureIds(newNatures);      project.setDescription(description,null);      return;    }  }  String[] newNatures=new String[natures.length + 1];  System.arraycopy(natures,0,newNatures,0,natures.length);  newNatures[natures.length]=JReFrameworkerNature.NATURE_ID;  description.setNatureIds(newNatures);  project.setDescription(description,null);}  }
class C{  public Seek(int playerId,PlayerType.PositionTime value){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("value",value);}  }
class C{  protected AppendResponse checkGlobalIndex(AppendRequest request){  long currentGlobalIndex=context.getGlobalIndex();  long nextGlobalIndex=request.globalIndex();  if (currentGlobalIndex > 0 && nextGlobalIndex > currentGlobalIndex && nextGlobalIndex > context.getLog().lastIndex()) {    context.setGlobalIndex(nextGlobalIndex);    context.reset();  }  if (request.logIndex() != 0) {    return checkPreviousEntry(request);  } else {    return appendEntries(request);  }}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addInvokevirtual(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokevirtual(clazz,name,desc);}  }
class C{  public BufferedOutputStream(OutputStream out){  this(out,8192);}  }
class C{  public boolean isAllow(){  return allow;}  }
class C{  public Cursor newCursor(String storeName) throws UnknownStoreException {  IStore<ByteArray,byte[]> store=getStore(storeName);  int cursorId=rpcService.getTransactionId();  Cursor cursor=new Cursor(cursorId,store.entries());  cursorMap.put(Integer.valueOf(cursorId),cursor);  return cursor;}  }
class C{  public StochasticGradientBoosting(Regressor weakLearner,int maxIterations,double learningRate){  this(weakLearner,maxIterations,learningRate,DEFAULT_TRAINING_PROPORTION);}  }
class C{  public ViewNode createNode(final ViewNode node){  Preconditions.checkNotNull(node,"Error: Node argument can not be null");  if (node instanceof CodeNode) {    final List<INaviInstruction> instructionsList=new ArrayList<INaviInstruction>();    for (    final Instruction instruction : ((CodeNode)node).getInstructions()) {      Preconditions.checkNotNull(instruction,"Error: Instruction list contains a null-element");      instructionsList.add(instruction.getNative());    }    CCodeNode newNode;    try {      newNode=naviView.getContent().createCodeNode(((INaviCodeNode)node.getNative()).getParentFunction(),instructionsList);    } catch (    final MaybeNullException e) {      newNode=naviView.getContent().createCodeNode(null,instructionsList);    }    adjustAttributes(node,newNode);    return cachedNodes.get(newNode);  } else   if (node instanceof FunctionNode) {    final CFunctionNode newNode=naviView.getContent().createFunctionNode(((INaviFunctionNode)node.getNative()).getFunction());    adjustAttributes(node,newNode);    return cachedNodes.get(newNode);  } else   if (node instanceof TextNode) {    final CTextNode newNode=naviView.getContent().createTextNode(((TextNode)node).getComments());    adjustAttributes(node,newNode);    return cachedNodes.get(newNode);  } else   if (node instanceof GroupNode) {    throw new IllegalStateException("Group nodes can not be cloned");  } else {    throw new IllegalStateException("Error: Unknown node type");  }}  }
class C{  BufferLedger associate(final BaseAllocator allocator){  return associate(allocator,true);}  }
class C{  public WrapElement(String wrapString,String paramString,Element e){  this.wrapString=wrapString;  this.paramString=paramString;  this.e=e;}  }
class C{  public static boolean isNativePageUrl(String url,boolean isIncognito){  return nativePageType(url,null,isIncognito) != NativePageType.NONE;}  }
class C{  public static void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text,int textShiftOffset){  FontMetrics fm=SwingUtilities2.getFontMetrics(b,g);  int mnemIndex=b.getDisplayedMnemonicIndex();  if (WindowsLookAndFeel.isMnemonicHidden() == true) {    mnemIndex=-1;  }  XPStyle xp=XPStyle.getXP();  if (xp != null && !(b instanceof JMenuItem)) {    paintXPText(b,g,textRect.x + textShiftOffset,textRect.y + fm.getAscent() + textShiftOffset,text,mnemIndex);  } else {    paintClassicText(b,g,textRect.x + textShiftOffset,textRect.y + fm.getAscent() + textShiftOffset,text,mnemIndex);  }}  }
class C{  public void afterInterestRegistration(){}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  private String uploadFileToBucket(File file) throws Exception {  String s3OutputFileName=String.format("%s.jpg",UUID.randomUUID().toString());  s3Upload.startUpload(s3OutputFileName,file);  return s3OutputFileName;}  }
class C{  public SQLNonTransientException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public DateSorter(boolean ascending){  super(ascending);}  }
class C{  private void updateRange(double x,double y){  mMinX=Math.min(mMinX,x);  mMaxX=Math.max(mMaxX,x);  mMinY=Math.min(mMinY,y);  mMaxY=Math.max(mMaxY,y);}  }
class C{  private Descriptors.FieldDescriptor f(String name){  Descriptors.FieldDescriptor result;  if (extensionRegistry == null) {    result=baseDescriptor.findFieldByName(name);  } else {    result=file.findExtensionByName(name + "_extension");  }  Assert.assertNotNull(result);  return result;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  public static void handleException(Project project,Exception e) throws RuntimeException {  logger.info(e);  if (e instanceof GenerateCodeException) {    Messages.showMessageDialog(project,"Velocity error generating code - see IDEA log for more details (stacktrace should be in idea.log):\n" + e.getMessage(),"Warning",Messages.getWarningIcon());  } else   if (e instanceof PluginException) {    Messages.showMessageDialog(project,"A PluginException was thrown while performing the action - see IDEA log for details (stacktrace should be in idea.log):\n" + e.getMessage(),"Warning",Messages.getWarningIcon());  } else   if (e instanceof RuntimeException) {    Messages.showMessageDialog(project,"An unrecoverable exception was thrown while performing the action - see IDEA log for details (stacktrace should be in idea.log):\n" + e.getMessage(),"Error",Messages.getErrorIcon());    throw (RuntimeException)e;  } else {    Messages.showMessageDialog(project,"An unrecoverable exception was thrown while performing the action - see IDEA log for details (stacktrace should be in idea.log):\n" + e.getMessage(),"Error",Messages.getErrorIcon());    throw new RuntimeException(e);  }}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new RussianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  SkinColorSelector(){  super(new SkinColorSelectionModel());  paletteSelector=new SkinPaletteSelector(getSelectionModel());  add(paletteSelector);}  }
class C{  public boolean isGossipInitialized(){  return gossipInitialized;}  }
class C{  public void startNested(String boundary,String[] headers) throws IOException {  startPart(MimeUtils.mpMixedContentType(boundary),headers);  parts.add(boundary);}  }
class C{  @DSComment("Package priviledge") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.965 -0500",hash_original_method="9BCC1A7457934BC771EBD3626A0DE18B",hash_generated_method="3CBB1FFB63A50C335D002AC2738F9D2B") static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  public static int hashCode(String str){  final char[] chars=str.toCharArray();  int h=0;  for (int i=0; i < chars.length; i++) {    h=31 * h + chars[i];  }  return h;}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append('[');  for (int r=0; r < rows; r++) {    if (r != 0) {      result.append(", ");    }    result.append('[');    for (int c=0; c < columns; c++) {      if (c != 0) {        result.append(", ");      }      result.append(data[r][c] & 0xFF);    }    result.append(']');  }  result.append(']');  return result.toString();}  }
class C{  public void update(User user) throws NotFoundException, ServerException, ConflictException {  requireNonNull(user,"Required non-null user");  userDao.update(new UserImpl(user));}  }
class C{  public static TextEdit reformat(int kind,String source,int offset,int length,int indentationLevel,String lineSeparator,Map<String,String> options){  if (offset < 0 || length < 0 || offset + length > source.length()) {    throw new IllegalArgumentException("offset or length outside of string. offset: " + offset + ", length: "+ length+ ", string size: "+ source.length());  }  return ToolFactory.createCodeFormatter(options,ToolFactory.M_FORMAT_EXISTING).format(kind,source,offset,length,indentationLevel,lineSeparator);}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public Object lookup(String type,String url) throws IOException {  ClassLoader loader=Thread.currentThread().getContextClassLoader();  try {    Class api=Class.forName(type,false,loader);    return _factory.create(api,url);  } catch (  Exception e) {    throw new IOException(String.valueOf(e));  }}  }
class C{  @Alignment private static int stringToAlignment(String alignString){  if (alignString != null) {switch (alignString) {default :case ALIGN_LEFT_STRING:      return ALIGN_LEFT;case ALIGN_RIGHT_STRING:    return ALIGN_RIGHT;case ALIGN_CENTER_STRING:  return ALIGN_CENTER;}}return ALIGN_LEFT;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar){  this(writer,separator,quotechar,escapechar,DEFAULT_LINE_END);}  }
class C{  @Override public SolrInfoMBean put(String key,SolrInfoMBean infoBean){  if (server != null && infoBean != null) {    try {      ObjectName name=getObjectName(key,infoBean);      if (server.isRegistered(name))       server.unregisterMBean(name);      SolrDynamicMBean mbean=new SolrDynamicMBean(coreHashCode,infoBean);      server.registerMBean(mbean,name);    } catch (    Exception e) {      LOG.warn("Failed to register info bean: " + key,e);    }  }  return super.put(key,infoBean);}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mPreview != null) {    mPreview.stop();  }}  }
class C{  protected void validatePrivilegedUser(HttpServletRequest req){  if (!getRemoteUser(req).isPrivileged()) {    throw new WebApplicationException(Status.FORBIDDEN.getReasonPhrase(),Status.FORBIDDEN);  }}  }
class C{  public boolean refreshLookup(){  if (m_lookup == null || m_lookup.getValidation().length() == 0)   return true;  log.fine("(" + m_vo.ColumnName + ")");  m_lookup.refresh();  return m_lookup.isValidated();}  }
class C{  @Override public void resolve(SerializerProvider provider) throws JsonMappingException {  if (_valueTypeIsStatic && _valueSerializer == null) {    _valueSerializer=provider.findValueSerializer(_valueType,_property);  }  if (_keySerializer == null) {    _keySerializer=provider.findKeySerializer(_keyType,_property);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMSetElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  public String toString(){  String result="DD Conditional Estimator. " + m_Estimators.length + " sub-estimators:\n";  for (int i=0; i < m_Estimators.length; i++) {    result+="Sub-estimator " + i + ": "+ m_Estimators[i];  }  return result;}  }
class C{  protected void patch_addContext(Patch patch,String text){  if (text.length() == 0) {    return;  }  String pattern=text.substring(patch.start2,patch.start2 + patch.length1);  int padding=0;  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length() < Match_MaxBits - Patch_Margin - Patch_Margin) {    padding+=Patch_Margin;    pattern=text.substring(Math.max(0,patch.start2 - padding),Math.min(text.length(),patch.start2 + patch.length1 + padding));  }  padding+=Patch_Margin;  String prefix=text.substring(Math.max(0,patch.start2 - padding),patch.start2);  if (prefix.length() != 0) {    patch.diffs.addFirst(new Diff(Operation.EQUAL,prefix));  }  String suffix=text.substring(patch.start2 + patch.length1,Math.min(text.length(),patch.start2 + patch.length1 + padding));  if (suffix.length() != 0) {    patch.diffs.addLast(new Diff(Operation.EQUAL,suffix));  }  patch.start1-=prefix.length();  patch.start2-=prefix.length();  patch.length1+=prefix.length() + suffix.length();  patch.length2+=prefix.length() + suffix.length();}  }
class C{  public SourceRange csp(JCTree tree){  if (tree == null)   return null;  tree.accept(this);  if (result != null) {    positions.put(tree,result);  }  return result;}  }
class C{  public final void cancelOperation(int token){  mWorkerThreadHandler.removeMessages(token);}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case SRuntimePackage.EXECUTION_CONTEXT:    return createExecutionContext();case SRuntimePackage.EXECUTION_EVENT:  return createExecutionEvent();case SRuntimePackage.EXECUTION_VARIABLE:return createExecutionVariable();case SRuntimePackage.COMPOSITE_SLOT:return createCompositeSlot();case SRuntimePackage.REFERENCE_SLOT:return createReferenceSlot();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public KMLSchema(String namespaceURI){  super(namespaceURI);}  }
class C{  public Rational subtract(Rational secondRational){  BigInteger n=(r[0].multiply(secondRational.getDenominator())).subtract(r[1].multiply(secondRational.getNumerator()));  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  public OrganizationRemovedException(){}  }
class C{  public void processStartedOperator(Operator op){  for (  ProcessListener listener : getListenerListCopy()) {    listener.processStartedOperator(this.process,op);  }}  }
class C{  public synchronized NSObject[] allObjects(){  return set.toArray(new NSObject[count()]);}  }
class C{  public StringBuffer toStringBuffer(){  return new StringBuffer(size).append(buffer,0,size);}  }
class C{  public void saveContact(EaseUser user){  DemoDBManager.getInstance().saveContact(user);}  }
class C{  public static Field findStaticField(Class<?> type,String name) throws NoSuchFieldException {  Field field=findField(type,name);  if (!Modifier.isStatic(field.getModifiers())) {    throw new NoSuchFieldException("Field '" + name + "' is not static");  }  return field;}  }
class C{  public void reverse(){  reverse(0,_pos);}  }
class C{  public void javaToNative(Object data,TransferData transferData){  if (data == null || !(validateData(data))) {    return;  }  if (isSupportedType(transferData)) {    ArrayList<RisikoMassnahmenUmsetzung> rMassnahmen=new ArrayList<RisikoMassnahmenUmsetzung>(0);    if (data instanceof RisikoMassnahmenUmsetzung[]) {      RisikoMassnahmenUmsetzung[] rMassnahmenElements=(RisikoMassnahmenUmsetzung[])data;      for (      RisikoMassnahmenUmsetzung b : rMassnahmenElements) {        rMassnahmen.add(b);      }    } else     if (data instanceof RisikoMassnahmenUmsetzung) {      rMassnahmen.add((RisikoMassnahmenUmsetzung)data);    }    ByteArrayOutputStream out=null;    ObjectOutputStream objectOut=null;    try {      out=new ByteArrayOutputStream();      objectOut=new ObjectOutputStream(out);      objectOut.writeObject(rMassnahmen.toArray(new Object[rMassnahmen.size()]));      super.javaToNative(out.toByteArray(),transferData);    } catch (    IOException e) {      LOG.error("Error while serializing object for dnd",e);    } finally {      if (out != null && objectOut != null) {        try {          out.close();          objectOut.close();        } catch (        IOException e) {          LOG.error("Error while closing stream",e);        }      }    }  }}  }
class C{  public <T>T query(Connection conn,String sql,Object param,ResultSetHandler<T> rsh) throws SQLException {  return this.query(conn,sql,new Object[]{param},rsh);}  }
class C{  public Object clone() throws CloneNotSupportedException {  AlgVector v=(AlgVector)super.clone();  v.m_Elements=new double[numElements()];  for (int i=0; i < numElements(); i++) {    v.m_Elements[i]=m_Elements[i];  }  return v;}  }
class C{  @Override public boolean input(Instance instance){  return m_attributeFilter.input(instance);}  }
class C{  private String sizeToString(int size){  StringBuilder builder=new StringBuilder();  ;  if (size < 1024) {    builder.append(size);    builder.append("K");  } else {    double m=size / 1024.00;    builder.append(m);    builder.append("M");  }  return builder.toString();}  }
class C{  public void removeVertex(AtlasVertex vertex){  String vertexString=string(vertex);  LOG.debug("Removing {}",vertexString);  graph.removeVertex(vertex);  LOG.info("Removed {}",vertexString);}  }
class C{  public static void addWatch(Object obj){  debug.instanceAddWatch(obj);}  }
class C{  protected LexicalUnit parseTerm(LexicalUnit prev){  boolean plus=true;  boolean sgn=false;  int line;switch (current) {case LexicalUnits.MINUS:    plus=false;case LexicalUnits.PLUS:  next();sgn=true;default :switch (current) {case LexicalUnits.INTEGER:String sval=scanner.getStringValue();if (!plus) sval="-" + sval;long lVal=Long.parseLong(sval);if (lVal >= Integer.MIN_VALUE && lVal <= Integer.MAX_VALUE) {int iVal=(int)lVal;line=getLineNumber();nextIgnoreSpaces();return CSSLexicalUnit.createInteger(iVal,prev,line);}case LexicalUnits.REAL:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_REAL,number(plus),prev,getLineNumber());case LexicalUnits.PERCENTAGE:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_PERCENTAGE,number(plus),prev,getLineNumber());case LexicalUnits.PT:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_POINT,number(plus),prev,getLineNumber());case LexicalUnits.PC:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_PICA,number(plus),prev,getLineNumber());case LexicalUnits.PX:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_PIXEL,number(plus),prev,getLineNumber());case LexicalUnits.CM:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_CENTIMETER,number(plus),prev,getLineNumber());case LexicalUnits.MM:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_MILLIMETER,number(plus),prev,getLineNumber());case LexicalUnits.IN:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_INCH,number(plus),prev,getLineNumber());case LexicalUnits.EM:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_EM,number(plus),prev,getLineNumber());case LexicalUnits.EX:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_EX,number(plus),prev,getLineNumber());case LexicalUnits.DEG:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_DEGREE,number(plus),prev,getLineNumber());case LexicalUnits.DPI:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_DPI,number(plus),prev,getLineNumber());case LexicalUnits.DPCM:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_DPCM,number(plus),prev,getLineNumber());case LexicalUnits.RAD:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_RADIAN,number(plus),prev,getLineNumber());case LexicalUnits.GRAD:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_GRADIAN,number(plus),prev,getLineNumber());case LexicalUnits.S:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_SECOND,number(plus),prev,getLineNumber());case LexicalUnits.MS:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_MILLISECOND,number(plus),prev,getLineNumber());case LexicalUnits.HZ:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_HERTZ,number(plus),prev,getLineNumber());case LexicalUnits.KHZ:return CSSLexicalUnit.createFloat(LexicalUnit.SAC_KILOHERTZ,number(plus),prev,getLineNumber());case LexicalUnits.DIMENSION:return dimension(plus,prev);case LexicalUnits.FUNCTION:return parseFunction(plus,prev);}if (sgn) {throw createCSSParseException("token",new Object[]{new Integer(current)});}}switch (current) {case LexicalUnits.STRING:String val=scanner.getStringValue();line=getLineNumber();nextIgnoreSpaces();return CSSLexicalUnit.createString(LexicalUnit.SAC_STRING_VALUE,val,prev,line);case LexicalUnits.IDENTIFIER:val=scanner.getStringValue();line=getLineNumber();nextIgnoreSpaces();if (val.equalsIgnoreCase("inherit")) {return CSSLexicalUnit.createSimple(LexicalUnit.SAC_INHERIT,prev,line);} else {return CSSLexicalUnit.createString(LexicalUnit.SAC_IDENT,val,prev,line);}case LexicalUnits.URI:val=scanner.getStringValue();line=getLineNumber();nextIgnoreSpaces();return CSSLexicalUnit.createString(LexicalUnit.SAC_URI,val,prev,line);case LexicalUnits.HASH:return hexcolor(prev);case LexicalUnits.UNICODE_RANGE:val=scanner.getStringValue();line=getLineNumber();nextIgnoreSpaces();return CSSLexicalUnit.createString(LexicalUnit.SAC_UNICODERANGE,val,prev,line);default :throw createCSSParseException("token",new Object[]{new Integer(current)});}}  }
class C{  @Procedure @PerformsWrites @Description("apoc.periodic.rock_n_roll_while('some cypher for knowing when to stop', 'some cypher for iteration', 'some cypher as action on each iteration', 10000) YIELD batches, total - run the action statement in batches over the iterator statement's results in a separate thread. Returns number of batches and total processed rows") public Stream<LoopingBatchAndTotalResult> rock_n_roll_while(@Name("cypherLoop") String cypherLoop,@Name("cypherIterate") String cypherIterate,@Name("cypherAction") String cypherAction,@Name("batchSize") long batchSize){  Stream<LoopingBatchAndTotalResult> allResults=Stream.empty();  Map<String,Object> loopParams=new HashMap<>(1);  Object value=null;  while (true) {    loopParams.put("previous",value);    try (Result result=db.execute(cypherLoop,loopParams)){      value=result.next().get("loop");      if (!Util.toBoolean(value))       return allResults;    }     log.info("starting batched operation using iteration `%s` in separate thread",cypherIterate);    try (Result result=db.execute(cypherIterate)){      Stream<BatchAndTotalResult> oneResult=iterateAndExecuteBatchedInSeparateThread((int)batchSize,false,result,null);      final Object loopParam=value;      allResults=Stream.concat(allResults,oneResult.map(null));    }   }}  }
class C{  public ProgressDialog(){  setUndecorated(true);  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  setAlwaysOnTop(true);  setModal(true);  setResizable(false);  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();  setBounds(screen.width - 450,0,450,200);  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.Y_AXIS));  Component glue=Box.createGlue();  getContentPane().add(glue);  JLabel lblImage=new JLabel("");  lblImage.setAlignmentX(Component.CENTER_ALIGNMENT);  lblImage.setHorizontalAlignment(SwingConstants.CENTER);  lblImage.setIcon(new ImageIcon(ProgressDialog.class.getResource("/tk/wurst_client/updater/resources/wurst_253x64.png")));  getContentPane().add(lblImage);{    lblProgress=new JLabel("<html>\r\n<center>\r\n<h1>Updating...</h1>");    lblProgress.setAlignmentX(Component.CENTER_ALIGNMENT);    lblProgress.setFont(new Font("Verdana",Font.PLAIN,16));    getContentPane().add(lblProgress);    lblProgress.setHorizontalAlignment(SwingConstants.CENTER);  }  Component glue_1=Box.createGlue();  getContentPane().add(glue_1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static final int numberOfUniqueCombinations(Instances D){  HashMap<String,Integer> hm=classCombinationCounts(D);  return hm.size();}  }
class C{  MenuItemImpl(MenuBuilder menu,int group,int id,int categoryOrder,int ordering,CharSequence title,int showAsAction){  mMenu=menu;  mId=id;  mGroup=group;  mCategoryOrder=categoryOrder;  mOrdering=ordering;  mTitle=title;  mShowAsAction=showAsAction;}  }
class C{  public void groupDescendantsIterator(Session session,FDBStoreData storeData){  groupIterator(session,storeData,GroupIteratorBoundary.FIRST_DESCENDANT,GroupIteratorBoundary.LAST_DESCENDANT,Transaction.ROW_LIMIT_UNLIMITED,FDBScanTransactionOptions.NORMAL);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 5:{        addNullToken();        return firstToken;      }case 22:    break;case 13:{    addToken(Token.LITERAL_CHAR);  }case 23:break;case 17:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 24:break;case 16:{start=zzMarkedPos - 2;yybegin(MLC);}case 25:break;case 7:{addToken(Token.WHITESPACE);}case 26:break;case 18:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 27:break;case 11:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 28:break;case 12:{addToken(Token.RESERVED_WORD);}case 29:break;case 3:{addToken(Token.SEPARATOR);}case 30:break;case 19:{addToken(Token.LITERAL_BACKQUOTE);}case 31:break;case 1:{addToken(Token.IDENTIFIER);}case 32:break;case 10:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 33:break;case 15:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 34:break;case 4:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 35:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 36:break;case 14:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 37:break;case 21:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 38:break;case 20:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 39:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 40:break;case 8:{}case 41:break;case 9:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 42:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 174:break;case YYINITIAL:{addNullToken();return firstToken;}case 175:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 176:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Boolean isKerberosToken(){  return kerberosToken;}  }
class C{  public static final Instances mulan2meka(Instances D,int L){  int d=D.numAttributes();  for (int j=0; j < L; j++) {    D.insertAttributeAt(D.attribute(d - 1).copy(D.attribute(d - 1).name() + "-"),0);    for (int i=0; i < D.numInstances(); i++) {      D.instance(i).setValue(0,D.instance(i).value(d));    }    D.deleteAttributeAt(d);  }  return D;}  }
class C{  @Override public void filter(ContainerRequestContext requestContext,ContainerResponseContext responseContext) throws IOException {  if (isCsrfEnabled()) {    final Csrf csrf=csrfInstance.get();    final MultivaluedMap<String,Object> headers=responseContext.getHeaders();    if (!headers.containsKey(csrf.getName())) {      headers.putSingle(csrf.getName(),csrf.getToken());    }  }}  }
class C{  protected Instances[] splitData(Instances data) throws Exception {  Instances[] subsets=new Instances[m_Prop.length];  for (int i=0; i < m_Prop.length; i++) {    subsets[i]=new Instances(data,data.numInstances());  }  for (int i=0; i < data.numInstances(); i++) {    Instance inst=data.instance(i);    if (inst.isMissing(m_Attribute)) {      for (int k=0; k < m_Prop.length; k++) {        if (m_Prop[k] > 0) {          Instance copy=(Instance)inst.copy();          copy.setWeight(m_Prop[k] * inst.weight());          subsets[k].add(copy);        }      }      continue;    }    if (data.attribute(m_Attribute).isNominal()) {      subsets[(int)inst.value(m_Attribute)].add(inst);      continue;    }    if (data.attribute(m_Attribute).isNumeric()) {      subsets[(inst.value(m_Attribute) < m_SplitPoint) ? 0 : 1].add(inst);      continue;    }    throw new IllegalArgumentException("Unknown attribute type");  }  for (int i=0; i < m_Prop.length; i++) {    subsets[i].compactify();  }  return subsets;}  }
class C{  public Rfc822Msg(String msg){  this(msg,Encoding.NONE);}  }
class C{  public GenericDecoder(Reader r){  reader=r;  if (!(r instanceof BufferedReader)) {    reader=new BufferedReader(reader);  }}  }
class C{  private void addStepNumToProof(String stepNum,String[] proofText){  LeafProofNode pfNode=(LeafProofNode)this.proof;  if (pfNode.getOmitted()) {    return;  }  if (((pfNode.getFacts() == null) || (pfNode.getFacts().length == 0)) && ((pfNode.getDefs() == null) || (pfNode.getDefs().length == 0))) {    int i=0;    boolean notDone=true;    while (notDone && (i < proofText.length)) {      int idx=proofText[i].indexOf("OBVIOUS");      if (idx != -1) {        proofText[i]=proofText[i].replaceFirst("OBVIOUS","BY " + stepNum);        notDone=false;      }      i++;    }  } else {    String comesAfter="BY";    if (pfNode.getOnlyFlag()) {      comesAfter="ONLY";    }    String stepNumAdded=stepNum;    if ((pfNode.getFacts() != null) && (pfNode.getFacts().length > 0)) {      stepNumAdded=stepNum + ",";    }    int i=0;    boolean notDone=true;    while (notDone && (i < proofText.length)) {      int idx=proofText[i].indexOf(comesAfter);      if (idx != -1) {        proofText[i]=proofText[i].replaceFirst(comesAfter,comesAfter + " " + stepNumAdded);        notDone=false;      }      i++;    }  }}  }
class C{  private void finishNotification(String status){  mBuilder.setContentTitle(status).setProgress(0,0,false).setSmallIcon(android.R.drawable.stat_sys_upload_done).setContentText("").setTicker(status);  mNotifyManager.notify(NOTIFICATION_ID,mBuilder.build());}  }
class C{  private static Expression createNarrowCastIfNessecary(Expression expression,ITypeBinding expressionType,AST ast,ITypeBinding variableType,boolean is50OrHigher){  PrimitiveType castTo=null;  if (variableType.isEqualTo(expressionType))   return expression;  if (is50OrHigher) {    if (ast.resolveWellKnownType("java.lang.Character").isEqualTo(variableType))     castTo=ast.newPrimitiveType(PrimitiveType.CHAR);    if (ast.resolveWellKnownType("java.lang.Byte").isEqualTo(variableType))     castTo=ast.newPrimitiveType(PrimitiveType.BYTE);    if (ast.resolveWellKnownType("java.lang.Short").isEqualTo(variableType))     castTo=ast.newPrimitiveType(PrimitiveType.SHORT);  }  if (ast.resolveWellKnownType("char").isEqualTo(variableType))   castTo=ast.newPrimitiveType(PrimitiveType.CHAR);  if (ast.resolveWellKnownType("byte").isEqualTo(variableType))   castTo=ast.newPrimitiveType(PrimitiveType.BYTE);  if (ast.resolveWellKnownType("short").isEqualTo(variableType))   castTo=ast.newPrimitiveType(PrimitiveType.SHORT);  if (castTo != null) {    CastExpression cast=ast.newCastExpression();    if (NecessaryParenthesesChecker.needsParentheses(expression,cast,CastExpression.EXPRESSION_PROPERTY)) {      ParenthesizedExpression parenthesized=ast.newParenthesizedExpression();      parenthesized.setExpression(expression);      cast.setExpression(parenthesized);    } else     cast.setExpression(expression);    cast.setType(castTo);    return cast;  }  return expression;}  }
class C{  public void testBackQuoting(){  String input;  String output;  input="blahblah";  output=Utils.backQuoteChars(input);  assertTrue("No backquoting necessary",input.equals(output));  input="\r\n\t'\"%";  output=Utils.backQuoteChars(input);  assertTrue(">" + input + "< restored",input.equals(Utils.unbackQuoteChars(output)));  input="\\r\\n\\t\\'\\\"\\%";  output=Utils.backQuoteChars(input);  assertTrue(">" + input + "< restored",input.equals(Utils.unbackQuoteChars(output)));  input=Utils.joinOptions(new StringToWordVector().getOptions());  output=Utils.backQuoteChars(input);  assertTrue(">" + input + "< restored",input.equals(Utils.unbackQuoteChars(output)));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ReportResult[");  buffer.append("reportQuery = ").append(reportQuery);  buffer.append(", orderBy = ").append(orderBy);  buffer.append(", oldTableName = ").append(oldTableName);  buffer.append(", size = ").append(size);  buffer.append("]");  return buffer.toString();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.SEQUENCE__ELEMENTS:    return ((InternalEList<?>)getElements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.254 -0500",hash_original_method="F65B5EA444DA08358E800CD7B469501A",hash_generated_method="BD84134232A792C8DCFF472DF4074AE7") public RequireHeader createRequireHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("null optionTag");  Require require=new Require();  require.setOptionTag(optionTag);  return require;}  }
class C{  @Override public double[] distributionForInstance(Instance i) throws Exception {  if (m_useDefaultModel) {    return m_ZeroR.distributionForInstance(i);  }  if (m_useNomToBin) {    m_nominalToBinaryFilter.input(i);    m_currentInstance=m_nominalToBinaryFilter.output();  } else {    m_currentInstance=i;  }  m_currentInstance=(Instance)m_currentInstance.copy();  if (m_normalizeAttributes) {    for (int noa=0; noa < m_instances.numAttributes(); noa++) {      if (noa != m_instances.classIndex()) {        if (m_attributeRanges[noa] != 0) {          m_currentInstance.setValue(noa,(m_currentInstance.value(noa) - m_attributeBases[noa]) / m_attributeRanges[noa]);        } else {          m_currentInstance.setValue(noa,m_currentInstance.value(noa) - m_attributeBases[noa]);        }      }    }  }  resetNetwork();  double[] theArray=new double[m_numClasses];  for (int noa=0; noa < m_numClasses; noa++) {    theArray[noa]=m_outputs[noa].outputValue(true);  }  if (m_instances.classAttribute().isNumeric()) {    return theArray;  }  double count=0;  for (int noa=0; noa < m_numClasses; noa++) {    count+=theArray[noa];  }  if (count <= 0) {    return m_ZeroR.distributionForInstance(i);  }  for (int noa=0; noa < m_numClasses; noa++) {    theArray[noa]/=count;  }  return theArray;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.631 -0500",hash_original_method="2C39C4EE153AE592A29CFAA85DAB86CC",hash_generated_method="E99C79249A8D3F08398BEFCA625CCF41") static void computeHash(int[] arrW){  int a=arrW[HASH_OFFSET];  int b=arrW[HASH_OFFSET + 1];  int c=arrW[HASH_OFFSET + 2];  int d=arrW[HASH_OFFSET + 3];  int e=arrW[HASH_OFFSET + 4];  int temp;  for (int t=16; t < 80; t++) {    temp=arrW[t - 3] ^ arrW[t - 8] ^ arrW[t - 14]^ arrW[t - 16];    arrW[t]=(temp << 1) | (temp >>> 31);  }  for (int t=0; t < 20; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | ((~b) & d)) + (e + arrW[t] + 0x5A827999);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=20; t < 40; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0x6ED9EBA1);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=40; t < 60; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | (b & d) | (c & d)) + (e + arrW[t] + 0x8F1BBCDC);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=60; t < 80; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0xCA62C1D6);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  arrW[HASH_OFFSET]+=a;  arrW[HASH_OFFSET + 1]+=b;  arrW[HASH_OFFSET + 2]+=c;  arrW[HASH_OFFSET + 3]+=d;  arrW[HASH_OFFSET + 4]+=e;}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  protected void checkChildType(Node n,boolean replace){switch (n.getNodeType()) {case ELEMENT_NODE:case PROCESSING_INSTRUCTION_NODE:case COMMENT_NODE:case TEXT_NODE:case CDATA_SECTION_NODE:case ENTITY_REFERENCE_NODE:case DOCUMENT_FRAGMENT_NODE:    break;default :  throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,"child.type",new Object[]{new Integer(getNodeType()),getNodeName(),new Integer(n.getNodeType()),n.getNodeName()});}}  }
class C{  public RefreshFailedException(String msg){  super(msg);}  }
class C{  public boolean open(){  File levelFile=new File(levelDir.getAbsolutePath() + "/level.dat");  if (!levelFile.exists())   return false;  try {    GZIPInputStream stream=new GZIPInputStream(new FileInputStream(levelFile));    root=(TAG_Compound)NBT_Tag.make(stream);    stream.close();  } catch (  FileNotFoundException e) {    return false;  }catch (  Exception e) {    Log.error("Error reading level.dat",e,false);    return false;  }  return true;}  }
class C{  protected void validateState(State current){  checkNotNull(current.taskInfo,"taskInfo cannot be null");  checkNotNull(current.taskInfo.stage,"stage cannot be null");  checkNotNull(current.queryPollDelay,"queryPollDelay cannot be null");  checkState(current.queryPollDelay > 0,"queryPollDelay needs to be >= 0");  checkState(current.documentExpirationTimeMicros > 0,"documentExpirationTimeMicros needs to be greater than 0");  if (current.finishedCopies != null) {    checkState(current.finishedCopies >= 0,"finishedCopies needs to be >= 0");  }  if (current.failedOrCancelledCopies != null) {    checkState(current.failedOrCancelledCopies >= 0,"failedOrCanceledCopies needs to be >= 0");  }  if (current.triggeredCopies != null) {    checkState(current.triggeredCopies >= 0,"triggeredCopies needs to be >= 0");  }switch (current.taskInfo.stage) {case STARTED:    checkState(current.taskInfo.subStage != null,"subStage cannot be null");  checkArgument(StringUtils.isNotBlank(current.image),"image not provided");checkArgument(StringUtils.isNotBlank(current.sourceImageDatastore),"sourceImageDatastore not provided");switch (current.taskInfo.subStage) {case UPDATE_DATASTORE_COUNTS:break;case TRIGGER_COPIES:break;case AWAIT_COMPLETION:break;default :checkState(false,"unsupported sub-state: " + current.taskInfo.subStage.toString());}break;case FAILED:case FINISHED:case CANCELLED:checkState(current.taskInfo.subStage == null,"Invalid stage update. subStage must be null");break;default :checkState(false,"cannot process patches in state: " + current.taskInfo.stage.toString());}}  }
class C{  public static void close(@Nullable DatagramSocket rsrc){  if (rsrc != null)   rsrc.close();}  }
class C{  public static String format(int kind,String source,int indentationLevel,String lineSeparator,Map<String,String> options){  TextEdit edit=format2(kind,source,indentationLevel,lineSeparator,options);  if (edit == null) {    return source;  } else {    Document document=new Document(source);    try {      edit.apply(document,TextEdit.NONE);    } catch (    BadLocationException e) {      JavaPlugin.log(e);      Assert.isTrue(false,"Formatter created edits with wrong positions: " + e.getMessage());    }    return document.get();  }}  }
class C{  public static List<Map<String,Object>> calcConversionRates(List<GenericValue> visits,List<GenericValue> orders,String keyFieldName){  List<Map<String,Object>> conversionRates=FastList.newInstance();  for (  GenericValue visit : visits) {    Map<String,Object> reportValue=FastMap.newInstance();    reportValue.put(keyFieldName,visit.getString(keyFieldName));    reportValue.put("visits",visit.getLong("visitId"));    List<GenericValue> ordersForThisKey=EntityUtil.filterByAnd(orders,UtilMisc.toMap(keyFieldName,visit.getString(keyFieldName)));    if ((ordersForThisKey != null) && (ordersForThisKey.size() > 0)) {      GenericValue orderValue=ordersForThisKey.get(0);      reportValue.put("orders",orderValue.getLong("orderId"));      if (orderValue.getDouble("grandTotal") == null) {        reportValue.put("orderAmount",Double.valueOf(0));      } else {        reportValue.put("orderAmount",orderValue.getDouble("grandTotal"));      }      if ((orderValue.getLong("orderId") == null) || (visit.getLong("visitId") == null) || (visit.getLong("visitId").intValue() == 0)) {        reportValue.put("conversionRate",Double.valueOf(0));      } else {        reportValue.put("conversionRate",Double.valueOf(orderValue.getLong("orderId").doubleValue() / visit.getLong("visitId").doubleValue()));      }    } else {      reportValue.put("orders",Long.valueOf(0));      reportValue.put("orderAmount",Double.valueOf(0));      reportValue.put("conversionRate",Double.valueOf(0));    }    conversionRates.add(reportValue);  }  return conversionRates;}  }
class C{  public ConfigProperties(String fileName) throws IOException {  load(fileName);}  }
class C{  protected TokenIterator createTokenIterator(HeaderIterator hit){  return new BasicTokenIterator(hit);}  }
class C{  public static boolean isPHDRMetadataTrackSubDescriptor(byte[] key){  return Arrays.equals(key,StructuralMetadata.PHDR_METADATA_TRACK_SUBDESCRIPTOR);}  }
class C{  @Override public boolean isListenerForSource(Object source){  return (source instanceof UIViewRoot);}  }
class C{  public static void rebind(String name,Remote obj) throws RemoteException, java.net.MalformedURLException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  if (obj == null)   throw new NullPointerException("cannot bind to null");  registry.rebind(parsed.name,obj);}  }
class C{  public DataInputStream(java.io.InputStream in){}  }
class C{  private void openFile(){  stopPreview(true);  mContainerActivity.getFileOperationsHelper().openFile(getFile());  finish();}  }
class C{  private static Vector<CiParameter> parseParameterString(String str){  Vector<CiParameter> retval=new Vector<CiParameter>();  String[] params=str.split(",");  for (  String param : params) {    String[] nameAndDefault=param.split("=");    if (nameAndDefault.length == 1) {      retval.add(new CiParameter(nameAndDefault[0].trim()));    } else     if (nameAndDefault.length == 2) {      retval.add(new CiParameter(nameAndDefault[0].trim(),nameAndDefault[1].trim()));    } else {      assert (false);    }  }  return retval;}  }
class C{  @Uninterruptible private static boolean isAddressAligned(Offset offset){  return (offset.toLong() >> LOG_BYTES_IN_ADDRESS) << LOG_BYTES_IN_ADDRESS == offset.toLong();}  }
class C{  public boolean hasNext(){  return !stack.isEmpty();}  }
class C{  @SuppressWarnings("unchecked") public void createStandardMBean(String implementationClassName,String interfaceClassName,boolean isMXBean,ObjectName name) throws Exception {  Object implementation=Class.forName(implementationClassName).newInstance();  Class<Object> interfaceClass=interfaceClassName == null ? null : (Class<Object>)Class.forName(interfaceClassName);  StandardMBean standardMBean=new StandardMBean(implementation,interfaceClass,isMXBean);  mbeanServer.registerMBean(standardMBean,name);}  }
class C{  public boolean isToIgnoreStudentConflictsWith(Collection<XDistribution> distributions,Long sectionId){  if (distributions == null)   return false;  for (  XDistribution distribution : distributions)   if (distribution.getDistributionType() == XDistributionType.IngoreConflicts && distribution.getSectionIds().contains(getSectionId()) && distribution.getSectionIds().contains(sectionId))   return true;  return false;}  }
class C{  public void loadAddress(Register dst,AArch64Address address,int transferSize){  assert transferSize == 1 || transferSize == 2 || transferSize == 4 || transferSize == 8;  assert dst.getRegisterCategory().equals(CPU);  int shiftAmt=NumUtil.log2Ceil(transferSize);switch (address.getAddressingMode()) {case IMMEDIATE_SCALED:    int scaledImmediate=address.getImmediateRaw() << shiftAmt;  int lowerBits=scaledImmediate & NumUtil.getNbitNumberInt(12);int higherBits=scaledImmediate & ~NumUtil.getNbitNumberInt(12);boolean firstAdd=true;if (lowerBits != 0) {add(64,dst,address.getBase(),lowerBits);firstAdd=false;}if (higherBits != 0) {Register src=firstAdd ? address.getBase() : dst;add(64,dst,src,higherBits);}break;case IMMEDIATE_UNSCALED:int immediate=address.getImmediateRaw();add(64,dst,address.getBase(),immediate);break;case REGISTER_OFFSET:add(64,dst,address.getBase(),address.getOffset(),ShiftType.LSL,address.isScaled() ? shiftAmt : 0);break;case EXTENDED_REGISTER_OFFSET:add(64,dst,address.getBase(),address.getOffset(),address.getExtendType(),address.isScaled() ? shiftAmt : 0);break;case PC_LITERAL:super.adr(dst,address.getImmediateRaw());break;case BASE_REGISTER_ONLY:movx(dst,address.getBase());break;default :throw GraalError.shouldNotReachHere();}}  }
class C{  public boolean equals(Object another){  if (another instanceof PrincipalImpl) {    PrincipalImpl p=(PrincipalImpl)another;    return user.equals(p.toString());  } else   return false;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(TypeToken<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  private void checkState(){  if (!start) {    throw new IllegalStateException("Cannot visit member before visit has been called.");  }  if (end) {    throw new IllegalStateException("Cannot visit member after visitEnd has been called.");  }}  }
class C{  protected Anonymous_linkingOp_3_Impl(){  super();}  }
class C{  public int idMiddleCodeAsValueFromSystemName(String systemName){  int dCode=-1;  if (!iCodes.reset(systemName).matches() || !validSystemNameFormat(systemName,iCodes.group(2).charAt(0))) {  } else {    if (iCodes.groupCount() == 5) {      try {        dCode=Integer.parseInt(iCodes.group(4),16);      } catch (      Exception e) {        log.error("illegal character in high id system name: " + systemName);        return -1;      }    }  }  return dCode;}  }
class C{  public List<Connection> restoreConnections(Context context) throws PersistenceException {  String[] connectionColumns={COLUMN_HOST,COLUMN_port,COLUMN_client_ID,COLUMN_ssl,COLUMN_KEEP_ALIVE,COLUMN_CLEAN_SESSION,COLUMN_TIME_OUT,COLUMN_USER_NAME,COLUMN_PASSWORD,COLUMN_TOPIC,COLUMN_MESSAGE,COLUMN_RETAINED,COLUMN_QOS,_ID};  String sort=COLUMN_HOST;  SQLiteDatabase db=getReadableDatabase();  Cursor c=db.query(TABLE_CONNECTIONS,connectionColumns,null,null,null,null,sort);  ArrayList<Connection> list=new ArrayList<Connection>(c.getCount());  Connection connection=null;  for (int i=0; i < c.getCount(); i++) {    if (!c.moveToNext()) {      throw new PersistenceException("Failed restoring connection - count: " + c.getCount() + "loop iteration: "+ i);    }    Long id=c.getLong(c.getColumnIndexOrThrow(_ID));    String host=c.getString(c.getColumnIndexOrThrow(COLUMN_HOST));    String clientID=c.getString(c.getColumnIndexOrThrow(COLUMN_client_ID));    int port=c.getInt(c.getColumnIndexOrThrow(COLUMN_port));    String username=c.getString(c.getColumnIndexOrThrow(COLUMN_USER_NAME));    String password=c.getString(c.getColumnIndexOrThrow(COLUMN_PASSWORD));    String topic=c.getString(c.getColumnIndexOrThrow(COLUMN_TOPIC));    String message=c.getString(c.getColumnIndexOrThrow(COLUMN_MESSAGE));    int qos=c.getInt(c.getColumnIndexOrThrow(COLUMN_QOS));    int keepAlive=c.getInt(c.getColumnIndexOrThrow(COLUMN_KEEP_ALIVE));    int timeout=c.getInt(c.getColumnIndexOrThrow(COLUMN_TIME_OUT));    boolean cleanSession=c.getInt(c.getColumnIndexOrThrow(COLUMN_CLEAN_SESSION)) == 1 ? true : false;    boolean retained=c.getInt(c.getColumnIndexOrThrow(COLUMN_RETAINED)) == 1 ? true : false;    boolean ssl=c.getInt(c.getColumnIndexOrThrow(COLUMN_ssl)) == 1 ? true : false;    MqttConnectOptions opts=new MqttConnectOptions();    opts.setCleanSession(cleanSession);    opts.setKeepAliveInterval(keepAlive);    opts.setConnectionTimeout(timeout);    opts.setPassword(password != null ? password.toCharArray() : null);    opts.setUserName(username);    if (topic != null) {      opts.setWill(topic,message.getBytes(),qos,retained);    }    connection=Connection.createConnection(clientID,host,port,context,ssl);    connection.addConnectionOptions(opts);    connection.assignPersistenceId(id);    list.add(connection);  }  c.close();  db.close();  return list;}  }
class C{  public Builder detectDiskReads(){  return enable(DETECT_DISK_READ);}  }
class C{  public static Bind createBind(Model model,Variable variable,RDFNode expression){  Bind bind=model.createResource(SP.Bind).as(Bind.class);  if (variable != null) {    bind.addProperty(SP.variable,variable);  }  if (expression != null) {    bind.addProperty(SP.expression,expression);  }  return bind;}  }
class C{  protected void addGlyphPositionAttributes(AttributedString as,Element element,BridgeContext ctx){  if ((!SVGUtilities.matchUserAgent(element,ctx.getUserAgent())) || (!CSSUtilities.convertDisplay(element))) {    return;  }  if (element.getLocalName().equals(SVG_TEXT_PATH_TAG)) {    addChildGlyphPositionAttributes(as,element,ctx);    return;  }  int firstChar=getElementStartIndex(element);  if (firstChar == -1)   return;  int lastChar=getElementEndIndex(element);  if (!(element instanceof SVGTextPositioningElement)) {    addChildGlyphPositionAttributes(as,element,ctx);    return;  }  SVGTextPositioningElement te=(SVGTextPositioningElement)element;  try {    SVGOMAnimatedLengthList _x=(SVGOMAnimatedLengthList)te.getX();    _x.check();    SVGOMAnimatedLengthList _y=(SVGOMAnimatedLengthList)te.getY();    _y.check();    SVGOMAnimatedLengthList _dx=(SVGOMAnimatedLengthList)te.getDx();    _dx.check();    SVGOMAnimatedLengthList _dy=(SVGOMAnimatedLengthList)te.getDy();    _dy.check();    SVGOMAnimatedNumberList _rotate=(SVGOMAnimatedNumberList)te.getRotate();    _rotate.check();    SVGLengthList xs=_x.getAnimVal();    SVGLengthList ys=_y.getAnimVal();    SVGLengthList dxs=_dx.getAnimVal();    SVGLengthList dys=_dy.getAnimVal();    SVGNumberList rs=_rotate.getAnimVal();    int len;    len=xs.getNumberOfItems();    for (int i=0; i < len && firstChar + i <= lastChar; i++) {      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.X,new Float(xs.getItem(i).getValue()),firstChar + i,firstChar + i + 1);    }    len=ys.getNumberOfItems();    for (int i=0; i < len && firstChar + i <= lastChar; i++) {      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.Y,new Float(ys.getItem(i).getValue()),firstChar + i,firstChar + i + 1);    }    len=dxs.getNumberOfItems();    for (int i=0; i < len && firstChar + i <= lastChar; i++) {      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.DX,new Float(dxs.getItem(i).getValue()),firstChar + i,firstChar + i + 1);    }    len=dys.getNumberOfItems();    for (int i=0; i < len && firstChar + i <= lastChar; i++) {      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.DY,new Float(dys.getItem(i).getValue()),firstChar + i,firstChar + i + 1);    }    len=rs.getNumberOfItems();    if (len == 1) {      Float rad=new Float(Math.toRadians(rs.getItem(0).getValue()));      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.ROTATION,rad,firstChar,lastChar + 1);    } else     if (len > 1) {      for (int i=0; i < len && firstChar + i <= lastChar; i++) {        Float rad=new Float(Math.toRadians(rs.getItem(i).getValue()));        as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.ROTATION,rad,firstChar + i,firstChar + i + 1);      }    }    addChildGlyphPositionAttributes(as,element,ctx);  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  public static double nextAfter(final double start,final double direction){  if (direction < start) {    if (start == 0.0) {      return -Double.MIN_VALUE;    }    final long bits=Double.doubleToRawLongBits(start);    return Double.longBitsToDouble(bits + (bits > 0 ? -1 : 1));  } else   if (direction > start) {    final long bits=Double.doubleToRawLongBits(start + 0.0f);    return Double.longBitsToDouble(bits + (bits >= 0 ? 1 : -1));  } else   if (start == direction) {    return direction;  } else {    return start + direction;  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"imul");  if ((instruction.getOperands().size() < 1) || (instruction.getOperands().size() > 3)) {    throw new InternalTranslationException("Error: Argument instruction is not a imul instruction (invalid number of operand)");  }  final List<? extends IOperandTree> operands=instruction.getOperands();  if (operands.size() == 1) {    translate_1(environment,instruction,instructions);  } else   if (operands.size() == 2) {    translate_2(environment,instruction,instructions);  } else {    translate_3(environment,instruction,instructions);  }}  }
class C{  public boolean isIE(){  return isIE;}  }
class C{  public void readFromPacketNBT(NBTTagCompound nbt){  this.readFromNBT(nbt);}  }
class C{  public boolean hasDateExt(){  return hasExtension(GphotoTimestamp.class);}  }
class C{  public RootElement(String localName){  this("",localName);}  }
class C{  public ColladaTraversalContext(){  this.matrixStack=new Stack<Matrix>();  this.matrixStack.push(Matrix.IDENTITY);}  }
class C{  public boolean loadDirectly(Element e) throws Exception {  if (!e.getName().equals("filehistory")) {    throw new Exception("Unexpected element name: " + e.getName());  }  FileHistory rmain=jmri.InstanceManager.getDefault(FileHistory.class);  FileHistory r=loadFileHistory(e);  rmain.addOperation("Load","",r);  return true;}  }
class C{  public void addViewActivationListener(ViewActivationListener listener){  activationListeners.add(listener);}  }
class C{  protected void createArc(DrawContext dc,double radius,Angle leftAzimuth,Angle rightAzimuth,List<Position> positions){  Globe globe=dc.getGlobe();  int intervals=this.getIntervals();  Position center=this.getPosition();  double globeRadius=globe.getRadiusAt(center.getLatitude(),center.getLongitude());  double radiusRadians=radius / globeRadius;  if (leftAzimuth.equals(rightAzimuth)) {    LatLon ll=LatLon.greatCircleEndPosition(center,leftAzimuth.radians,radiusRadians);    positions.add(new Position(ll,0));    return;  }  Angle arcAngle=rightAzimuth.subtract(leftAzimuth);  Angle da=arcAngle.divide(intervals);  for (int i=0; i < intervals + 1; i++) {    double angle=i * da.radians + leftAzimuth.radians;    LatLon ll=LatLon.greatCircleEndPosition(center,angle,radiusRadians);    positions.add(new Position(ll,0));  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.597 -0500",hash_original_method="A96A54ECB7E0243FC9401A9259237DF7",hash_generated_method="B0DFF07F1CCB9ED8CBD3B522463021AE") private void skipToEndOfLine(){  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n') {      pos++;      break;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.164 -0500",hash_original_method="7A337C125E2A540236207D4CECD80A2A",hash_generated_method="6DEA7D44CF6655783252490F3FE401D2") public static OrientedBoundingBox computeOrientedBoundingBox(ArrayList<GesturePoint> originalPoints){  final int count=originalPoints.size();  float[] points=new float[count * 2];  for (int i=0; i < count; i++) {    GesturePoint point=originalPoints.get(i);    int index=i * 2;    points[index]=point.x;    points[index + 1]=point.y;  }  float[] meanVector=computeCentroid(points);  return computeOrientedBoundingBox(points,meanVector);}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TypedElement_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_TypedElement_type_feature","_UI_TypedElement_type"),TypesPackage.Literals.TYPED_ELEMENT__TYPE,true,false,true,null,null,null));}  }
class C{  public StepBreakpointHitParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BPS_HIT);}  }
class C{  public Dimension minimumLayoutSize(Container parent){  return getSize(parent,true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public void changeCursor(Cursor cursor){  super.changeCursor(cursor);  resetMappings();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix09.class,args);}  }
class C{  private void cleanDirtyRegion(float eventX,float eventY){  dirtyRect.left=Math.min(lastTouchX,eventX);  dirtyRect.right=Math.max(lastTouchX,eventX);  dirtyRect.top=Math.min(lastTouchY,eventY);  dirtyRect.bottom=Math.max(lastTouchY,eventY);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.CHANNEL__TO_ENDPOINT:    if (resolve)     return getToEndpoint();  return basicGetToEndpoint();case EipPackage.CHANNEL__FROM_ENDPOINT:if (resolve) return getFromEndpoint();return basicGetFromEndpoint();case EipPackage.CHANNEL__NAME:return getName();case EipPackage.CHANNEL__GUARANTEED:return isGuaranteed();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.REACTION__TRIGGER:    return trigger != null;case SGraphPackage.REACTION__EFFECT:  return effect != null;case SGraphPackage.REACTION__PROPERTIES:return properties != null && !properties.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected Texture syncTexture(DrawContext dc){  Texture texture=this.getTexture(dc);  if (texture == null) {    texture=this.makeTextureWithBackingImage(dc);  } else   if (this.getDirtyRect() != null) {    texture=this.updateTextureWithSubImage(dc,this.getDirtyRect());  }  this.clearDirtyRect();  return texture;}  }
class C{  public ProxySpinnerAdapter(@NonNull final Context context,@NonNull final SpinnerAdapter adapter,@LayoutRes final int hintViewId,@Nullable final CharSequence hint,@Nullable final ColorStateList hintColor){  ensureNotNull(context,"The context may not be null");  ensureNotNull(adapter,"The adapter may not be null");  this.context=context;  this.adapter=adapter;  this.hintViewId=hintViewId;  this.hint=hint;  this.hintColor=hintColor;}  }
class C{  public Vector2 left(){  double temp=this.x;  this.x=this.y;  this.y=-temp;  return this;}  }
class C{  static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  public static void writeBooleanArray(DataOutput out,@Nullable boolean[] arr) throws IOException {  if (arr == null)   out.writeInt(-1); else {    out.writeInt(arr.length);    for (    boolean b : arr)     out.writeBoolean(b);  }}  }
class C{  public ByteString snapshot(){  if (size > Integer.MAX_VALUE) {    throw new IllegalArgumentException("size > Integer.MAX_VALUE: " + size);  }  return snapshot((int)size);}  }
class C{  private void startInterpolatedAnim(float targetValue){  final CircularProgressView progressView=(CircularProgressView)this.findViewById(R.id.circularprogress);  Assert.assertNotNull(progressView);  progressView.setProgress(targetValue,3000);}  }
class C{  private Workflow.Method createValidateVPlexVolumeMethod(URI vplexSystemURI,URI vplexVolumeURI){  return new Workflow.Method(VALIDATE_VPLEX_VOLUME_METHOD,vplexSystemURI,vplexVolumeURI);}  }
class C{  private static void putValue2(){  try {    Region r1=cache.getRegion("/HARegionQueueDUnitTest_region");    r1.put("key-1","value-2");  } catch (  Exception ex) {    fail("failed while region.put()",ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.090 -0500",hash_original_method="F54BC10B0D60AEAE0067D3AFD674BB35",hash_generated_method="2CD5F2779DB8D2401420749A849154DD") public void copyFrom(byte[] d){  mRS.validate();  copy1DRangeFrom(0,mCurrentCount,d);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void handleText(char data[]){  if (data != null) {    if (inscript != 0) {      callback.handleComment(data,getBlockStartPosition());      return;    }    if (inbody != 0 || ((instyle != 0) || ((intitle != 0) && !seentitle))) {      if (debugFlag) {        debug("text:  ->" + new String(data) + "<-"+ " pos: "+ getCurrentPos());      }      callback.handleText(data,getBlockStartPosition());    }  }}  }
class C{  public void notifyDataSetChanged(int id){  final Array<VariableInfo> variables=getAllVariableInfosById(id);  if (variables == null) {    throw new DataBindException("the id = " + id + " haven't bind any data yet,"+ " so can't call notifyDataSetChanged() mMethod !");  }  applyDataInternal(id,null,variables,false);  mTmpVariables.clear();  mDataResolver.clearObjects();}  }
class C{  public float key(){  return _map._set[_index];}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'PICTURE_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket,final int responseCode) throws Throwable {  return doInteraction(clientConnection,serverSocket,responseCode,false);}  }
class C{  public boolean isShardingKey(){  return shardingKey;}  }
class C{  public Instrumenter attachR3Collector(){  includeR3=true;  return this;}  }
class C{  public static void translucentStatusBar(Activity activity){  Window window=activity.getWindow();  window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mContentChild=mContentView.getChildAt(0);  removeFakeStatusBarViewIfExist(activity);  removeMarginTopOfContentChild(mContentChild,getStatusBarHeight(activity));  if (mContentChild != null) {    ViewCompat.setFitsSystemWindows(mContentChild,false);  }}  }
class C{  public static String contentToString(String s){  StringBuffer result=new StringBuffer(s.length());  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '<':      result.append("&lt;");    break;case '>':  result.append("&gt;");break;case '&':result.append("&amp;");break;case '"':result.append("&quot;");break;case '\'':result.append("&apos;");break;default :result.append(c);}}return result.toString();}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  public CSetFunctionBreakpointsAction(final IFilledList<Pair<IDebugger,INaviFunction>> pairs){  super(pairs.size() == 1 ? String.format("Set breakpoint on function '%s'",pairs.get(0).second().getName()) : "Set breakpoints on all selected functions");  m_pairs=pairs;}  }
class C{  private void processRegisteredFilterStatus(){  registeredBtnClicked=!registeredBtnClicked;  processCommonFilterStatus(TargetUpdateStatus.REGISTERED,registeredBtnClicked);}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public void saveRequestProperties(String handleId,Properties properties) throws IOException {  String file=fileHandler.append(getConfigurationDirectory(handleId),"request.properties");  properties.store(fileHandler.getOutputStream(file),null);}  }
class C{  private String[] read(String value,String token){  String[] list=pattern.split(value);  for (int i=0; i < list.length; i++) {    String text=list[i];    if (text != null) {      list[i]=text.trim();    }  }  return list;}  }
class C{  public void renameNodeValue(int nTargetNode,String sValue,String sNewValue){  if (m_bNeedsUndoAction) {    addUndoAction(new RenameValueAction(nTargetNode,sValue,sNewValue));  }  Attribute att=m_Instances.attribute(nTargetNode);  int nCardinality=att.numValues();  ArrayList<String> values=new ArrayList<String>(nCardinality);  for (int iValue=0; iValue < nCardinality; iValue++) {    if (att.value(iValue).equals(sValue)) {      values.add(sNewValue);    } else {      values.add(att.value(iValue));    }  }  replaceAtt(nTargetNode,att.name(),values);}  }
class C{  public static boolean isComposite(String mediaType){  return "message".equalsIgnoreCase(mediaType) || "multipart".equalsIgnoreCase(mediaType);}  }
class C{  public synchronized void notifyBeforeUse(CompositeTransaction ct) throws InvalidSessionHandleStateException {  if (closed)   throw new InvalidSessionHandleStateException("The underlying XA session is closed");  try {    TransactionContext suspended=null;    if (ct != null) {      Iterator<TransactionContext> it=allContexts.iterator();      while (it.hasNext() && suspended == null) {        TransactionContext b=(TransactionContext)it.next();        if (b.isSuspendedInTransaction(ct)) {          suspended=b;        }      }    }    if (suspended != null) {      if (LOGGER.isDebugEnabled())       LOGGER.logDebug(this + ": resuming suspended XA context for transaction " + ct.getTid());      currentContext=suspended;      currentContext.transactionResumed();    } else {      try {        if (LOGGER.isTraceEnabled())         LOGGER.logTrace(this + ": checking XA context for transaction " + ct);        currentContext.checkEnlistBeforeUse(ct);      } catch (      UnexpectedTransactionContextException txBoundaryPassed) {        if (LOGGER.isDebugEnabled())         LOGGER.logDebug(this + ": suspending existing XA context and creating a new one for transaction " + ct);        currentContext.transactionSuspended();        currentContext=new TransactionContext(resource,xaResource);        allContexts.add(currentContext);        try {          currentContext.checkEnlistBeforeUse(ct);        } catch (        UnexpectedTransactionContextException e) {          String msg="Unexpected error in session handle";          LOGGER.logError(msg,e);          throw new InvalidSessionHandleStateException(msg);        }      }    }  } catch (  InvalidSessionHandleStateException e) {    notifySessionErrorOccurred();    throw e;  }}  }
class C{  public static synchronized boolean isVerticalSyncEnabled(){  return verticalSyncEnabled;}  }
class C{  public static void browseUri(String uri){  if (!java.awt.Desktop.isDesktopSupported()) {    System.err.println("Desktop is not supported (fatal)");    System.exit(1);  }  java.awt.Desktop desktop=java.awt.Desktop.getDesktop();  if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {    System.err.println("Desktop doesn't support the browse action (fatal)");    System.exit(1);  }  try {    java.net.URI url=new java.net.URI(uri);    desktop.browse(url);  } catch (  Exception e) {    System.err.println(e.getMessage());  }}  }
class C{  public RankingImageListProvider inDays(int days){  mTime=Integer.toString(days) + "d";  return this;}  }
class C{  public static double[] sample(double v[],Random r){  return threshold(new double[][]{v},r)[0];}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public T caseTypeDefs(TypeDefs object){  return null;}  }
class C{  boolean compareMethods(@Nullable Method a,@Nullable Method b){  if ((a == null) != (b == null)) {    return false;  }  if (a != null && b != null) {    if (!a.equals(b)) {      return false;    }  }  return true;}  }
class C{  public TextSpanLayout createTextLayout(AttributedCharacterIterator aci,int[] charMap,Point2D offset,FontRenderContext frc){  return new FlowGlyphLayout(aci,charMap,offset,frc);}  }
class C{  public Persistence(Context context){  super(context,DATABASE_NAME,null,DATABASE_VERSION);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=m_arg0.execute(xctxt).xstr();  XMLString s2=m_arg1.execute(xctxt).xstr();  int index=s1.indexOf(s2);  return (-1 == index) ? XString.EMPTYSTRING : (XString)s1.substring(index + s2.length());}  }
class C{  public boolean isCanSelfJoin(){  return canSelfJoin;}  }
class C{  public String prompt(String message){  return null;}  }
class C{  public static boolean containNumber(String str){  for (int i=0; i < str.length(); i++) {    if (Character.isDigit(str.charAt(i))) {      return true;    }  }  return false;}  }
class C{  public void mark(int readlimit){  in.mark(readlimit);  if (in.markSupported())   bytesLeftAtMark=bytesLeft;}  }
class C{  boolean popChanged(){  boolean changed=this.changed;  this.changed=false;  return changed;}  }
class C{  public static String descriptorToDot(String descr){  int targetLen=descr.length();  int offset=0;  int arrayDepth=0;  while (targetLen > 1 && descr.charAt(offset) == '[') {    offset++;    targetLen--;  }  arrayDepth=offset;  if (targetLen == 1) {    descr=primitiveTypeLabel(descr.charAt(offset));    offset=0;    targetLen=descr.length();  } else {    if (targetLen >= 2 && descr.charAt(offset) == 'L' && descr.charAt(offset + targetLen - 1) == ';') {      targetLen-=2;      offset++;    }  }  char[] buf=new char[targetLen + arrayDepth * 2];  int i;  for (i=0; i < targetLen; i++) {    char ch=descr.charAt(offset + i);    buf[i]=(ch == '/') ? '.' : ch;  }  while (arrayDepth-- > 0) {    buf[i++]='[';    buf[i++]=']';  }  assert i == buf.length;  return new String(buf);}  }
class C{  @Override public SpeechData concatenate(Value value){  if (value instanceof SpeechData) {    while (!isFinal() || !((SpeechData)value).isFinal()) {      try {        Thread.sleep(50);      } catch (      InterruptedException e) {      }    }    SpeechData newData=new SpeechData(format);    newData.currentPos=currentPos;    newData.write(data);    newData.write(((SpeechData)value).data);    newData.isFinal=true;    return newData;  } else {    throw new RuntimeException("Cannot concatenate SpeechData and " + value.getClass().getCanonicalName());  }}  }
class C{  public static Byte[] nullToEmpty(final Byte[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;  }  return array;}  }
class C{  boolean wouldOverflowMaxOffers(Player player,Offer offer){  Market market=TradeCenterZoneConfigurator.getShopFromZone(player.getZone());  if ((market.countOffersOfPlayer(player) == TradingUtility.MAX_NUMBER_OFF_OFFERS) && market.getExpiredOffers().contains(offer)) {    return true;  }  return false;}  }
class C{  public void addZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.addZoomListener(listener);  }}  }
class C{  public static int canCompleteCircuit(int[] gas,int[] cost){  int restGas=0;  int previous=0;  int start=0;  for (int i=0; i < gas.length; i++) {    restGas+=gas[i] - cost[i];    if (restGas < 0) {      previous+=restGas;      restGas=0;      start=i + 1;    }  }  return previous + restGas >= 0 ? start : -1;}  }
class C{  public IndexCursor toIndexCursor() throws IOException {  return (IndexCursorImpl)toCursor();}  }
class C{  private void numRepetitionsChanged(){  if (m_Exp == null || !m_NumberOfRepetitionsTField.isEnabled())   return;  try {    m_numRepetitions=Integer.parseInt(m_NumberOfRepetitionsTField.getText());  } catch (  NumberFormatException e) {    return;  }  m_Exp.setRunLower(1);  m_Exp.setRunUpper(m_numRepetitions);  m_Support.firePropertyChange("",null,null);}  }
class C{  public boolean noValueInSystem(){  if (this.op == OP_D_DESTROY || this.op == OP_D_INVALIDATE_LD || this.op == OP_D_INVALIDATE) {    return true;  } else   if (getNearSidePendingValue() == Token.INVALID) {    return (this.op >= OP_CREATE_LD && this.op != OP_L_INVALIDATE && this.op != OP_SEARCH_CREATE && this.op != OP_LOCAL_CREATE && this.op != OP_SEARCH_PUT);  } else {    return false;  }}  }
class C{  @Override public void recalculateAllAttributeStatistics(){  List<Attribute> allAttributes=new ArrayList<Attribute>();  Iterator<Attribute> a=getAttributes().allAttributes();  while (a.hasNext()) {    allAttributes.add(a.next());  }  recalculateAttributeStatistics(allAttributes);}  }
class C{  public CipherInputStream(InputStream is,AEADBlockCipher cipher){  this(is,cipher,INPUT_BUF_SIZE);}  }
class C{  @SmallTest public void testStartable(){  Intent startIntent=new Intent();  startIntent.setClass(getContext(),LocalService.class);  startService(startIntent);}  }
class C{  public sun.net.ftp.FtpClient login(String user,char[] password,String account) throws sun.net.ftp.FtpProtocolException, IOException {  if (!isConnected()) {    throw new sun.net.ftp.FtpProtocolException("Not connected yet",FtpReplyCode.BAD_SEQUENCE);  }  if (user == null || user.length() == 0) {    throw new IllegalArgumentException("User name can't be null or empty");  }  tryLogin(user,password);  if (lastReplyCode == FtpReplyCode.NEED_ACCOUNT) {    issueCommandCheck("ACCT " + account);  }  StringBuffer sb=new StringBuffer();  if (serverResponse != null) {    for (    String l : serverResponse) {      if (l != null) {        if (l.length() >= 4 && l.startsWith("230")) {          l=l.substring(4);        }        sb.append(l);      }    }  }  welcomeMsg=sb.toString();  loggedIn=true;  return this;}  }
class C{  public SWFActions tagDefineButton2(int id,boolean trackAsMenu,List buttonRecord2s) throws IOException {  if (tags != null) {    return tags.tagDefineButton2(id,trackAsMenu,buttonRecord2s);  }  return null;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public static final String hostID(DigestURL source){  String s=ResumptionToken.truncatedURL(source);  if (s.endsWith("?"))   s=s.substring(0,s.length() - 1);  if (s.endsWith("/"))   s=s.substring(0,s.length() - 1);  if (s.startsWith("https://"))   s=s.substring(8);  if (s.startsWith("http://"))   s=s.substring(7);  return s.replace('.',hostReplacementChar).replace('/',hostReplacementChar).replace(':',hostReplacementChar);}  }
class C{  public Vector3i add(Vector3i v){  x+=v.x;  y+=v.y;  z+=v.z;  return this;}  }
class C{  public FormStream(){}  }
class C{  private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f){  int s=--size;  RunnableScheduledFuture<?> x=queue[s];  queue[s]=null;  if (s != 0)   siftDown(0,x);  setIndex(f,-1);  return f;}  }
class C{  public static Map<String,Object> updateUserLoginSecurity(DispatchContext ctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String userLoginId=(String)context.get("userLoginId");  String errMsg=null;  if (UtilValidate.isEmpty(userLoginId)) {    userLoginId=loggedInUserLogin.getString("userLoginId");  }  if (!security.hasEntityPermission("PARTYMGR","_UPDATE",loggedInUserLogin) && !security.hasEntityPermission("SECURITY","_UPDATE",loggedInUserLogin)) {    errMsg=UtilProperties.getMessage(resource,"loginservices.not_permission_update_security_info_for_user_login",locale);    return ServiceUtil.returnError(errMsg);  }  GenericValue userLoginToUpdate=null;  try {    userLoginToUpdate=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_read_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  if (userLoginToUpdate == null) {    Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_userlogin_with_id_not_exist",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  boolean wasEnabled=!"N".equals(userLoginToUpdate.get("enabled"));  if (context.containsKey("enabled")) {    userLoginToUpdate.set("enabled",context.get("enabled"),true);  }  if (context.containsKey("disabledDateTime")) {    userLoginToUpdate.set("disabledDateTime",context.get("disabledDateTime"),true);  }  if (context.containsKey("successiveFailedLogins")) {    userLoginToUpdate.set("successiveFailedLogins",context.get("successiveFailedLogins"),true);  }  if (context.containsKey("externalAuthId")) {    userLoginToUpdate.set("externalAuthId",context.get("externalAuthId"),true);  }  if (context.containsKey("userLdapDn")) {    userLoginToUpdate.set("userLdapDn",context.get("userLdapDn"),true);  }  if (context.containsKey("requirePasswordChange")) {    userLoginToUpdate.set("requirePasswordChange",context.get("requirePasswordChange"),true);  }  if (!wasEnabled && "Y".equals(context.get("enabled"))) {    userLoginToUpdate.set("disabledDateTime",null);  }  try {    userLoginToUpdate.store();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TestIntervalCategoryDataset)) {    return false;  }  TestIntervalCategoryDataset that=(TestIntervalCategoryDataset)obj;  if (!getRowKeys().equals(that.getRowKeys())) {    return false;  }  if (!getColumnKeys().equals(that.getColumnKeys())) {    return false;  }  int rowCount=getRowCount();  int colCount=getColumnCount();  for (int r=0; r < rowCount; r++) {    for (int c=0; c < colCount; c++) {      Number v1=getValue(r,c);      Number v2=that.getValue(r,c);      if (v1 == null) {        if (v2 != null) {          return false;        }      } else       if (!v1.equals(v2)) {        return false;      }    }  }  return true;}  }
class C{  public boolean isGoalState(Object state){  return goalTest.isGoalState(state);}  }
class C{  @DSSpec(DSCat.NETWORK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:20.009 -0500",hash_original_method="C11FA4279C0A187DA118461D9F53788F",hash_generated_method="A59DF0CDA78CA80C163B11A00636E787") public boolean requestRouteToHost(int networkType,int hostAddress){  InetAddress inetAddress=NetworkUtils.intToInetAddress(hostAddress);  if (inetAddress == null) {    return false;  }  return requestRouteToHostAddress(networkType,inetAddress);}  }
class C{  public Notification(String title,String message){  super(false);  addParameterToRequest("title",title);  addParameterToRequest("message",message);}  }
class C{  public static char docTypeExt(final String ext){  if (ext == null)   return DT_UNKNOWN;  if (ext.equals("gif"))   return DT_IMAGE;  if (ext.equals("ico"))   return DT_IMAGE;  if (ext.equals("bmp"))   return DT_IMAGE;  if (ext.equals("jpg"))   return DT_IMAGE;  if (ext.equals("jpeg"))   return DT_IMAGE;  if (ext.equals("png"))   return DT_IMAGE;  if (ext.equals("tif"))   return DT_IMAGE;  if (ext.equals("tiff"))   return DT_IMAGE;  if (ext.equals("htm"))   return DT_HTML;  if (ext.equals("html"))   return DT_HTML;  if (ext.equals("txt"))   return DT_TEXT;  if (ext.equals("doc"))   return DT_DOC;  if (ext.equals("rtf"))   return DT_DOC;  if (ext.equals("pdf"))   return DT_PDFPS;  if (ext.equals("ps"))   return DT_PDFPS;  if (ext.equals("mp3"))   return DT_AUDIO;  if (ext.equals("aac"))   return DT_AUDIO;  if (ext.equals("m4a"))   return DT_AUDIO;  if (ext.equals("ogg"))   return DT_AUDIO;  if (ext.equals("wav"))   return DT_AUDIO;  if (ext.equals("wma"))   return DT_AUDIO;  if (ext.equals("avi"))   return DT_MOVIE;  if (ext.equals("mov"))   return DT_MOVIE;  if (ext.equals("qt"))   return DT_MOVIE;  if (ext.equals("mpg"))   return DT_MOVIE;  if (ext.equals("mp4"))   return DT_MOVIE;  if (ext.equals("m4v"))   return DT_MOVIE;  if (ext.equals("mkv"))   return DT_MOVIE;  if (ext.equals("md5"))   return DT_SHARE;  if (ext.equals("mpeg"))   return DT_MOVIE;  if (ext.equals("asf"))   return DT_FLASH;  return DT_UNKNOWN;}  }
class C{  public static Warning validate(int code,Object... args){  return new Warning(Messages.INSTANCE.getValidationWarning(code,args),code);}  }
class C{  protected AbstractLongSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:11.676 -0500",hash_original_method="3B75C101082AA8B5F76E21C5AC0D856A",hash_generated_method="D18BF8D4530C4119F169AC9E5C51ECE3") public void loadAllFromEF(int ef,int extensionEF,Message response){  this.ef=ef;  this.extensionEF=extensionEF;  this.userResponse=response;  phone.mIccFileHandler.loadEFLinearFixedAll(ef,obtainMessage(EVENT_ADN_LOAD_ALL_DONE));}  }
class C{  public Builder filter(MetricFilter filter){  this.filter=filter;  return this;}  }
class C{  public void addBinding(String name,Value value){  assert !bindings.containsKey(name) : "variable already bound: " + name;  setBinding(name,value);}  }
class C{  public void finish() throws Exception {}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final long findNextAlarmTime(ContentResolver cr,long millis){  String selection=ALARM_TIME + ">=" + millis;  String[] projection=new String[]{ALARM_TIME};  Cursor cursor=cr.query(CONTENT_URI,projection,WHERE_FINDNEXTALARMTIME,(new String[]{Long.toString(millis)}),SORT_ORDER_ALARMTIME_ASC);  long alarmTime=-1;  try {    if (cursor != null && cursor.moveToFirst()) {      alarmTime=cursor.getLong(0);    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  return alarmTime;}  }
class C{  public String Frie_Name(String value){  if (value == null || value.length() == 0)   return "";  String retValue=value;  String SQL="SELECT FRIE_Name(?) FROM DUAL";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    pstmt.setString(1,value);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     retValue=rs.getString(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,SQL,e);  }  return retValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.120 -0500",hash_original_method="7CA7069D9943855589356239516DA9AF",hash_generated_method="C42DF4093C8224D281CFC7E1BDDB3B7E") public void clearTestProviderLocation(String provider){  try {    mService.clearTestProviderLocation(provider);  } catch (  RemoteException ex) {    Log.e(TAG,"clearTestProviderLocation: RemoteException",ex);  }}  }
class C{  public JCCompilationUnit TopLevel(List<JCAnnotation> packageAnnotations,JCExpression pid,List<JCTree> defs){  Assert.checkNonNull(packageAnnotations);  for (  JCTree node : defs)   Assert.check(node instanceof JCClassDecl || node instanceof JCImport || node instanceof JCSkip|| node instanceof JCErroneous|| (node instanceof JCExpressionStatement && ((JCExpressionStatement)node).expr instanceof JCErroneous),node.getClass().getSimpleName());  JCCompilationUnit tree=new JCCompilationUnit(packageAnnotations,pid,defs,null,null,null,null);  tree.pos=pos;  return tree;}  }
class C{  @DSSafe(DSCat.IPC_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.123 -0500",hash_original_method="08B10BC0FD4D849356EF434C4A57C456",hash_generated_method="6BD96B9529562207CAD6CD6B1C457CE8") @Override public void handleMessage(Message msg){  if (mBlockMessages) {    return;  }switch (msg.what) {case FRAME_COMPLETED:{      if (mSettings.getSavePassword() && hasPasswordField()) {        WebHistoryItem item=mCallbackProxy.getBackForwardList().getCurrentItem();        if (item != null) {          WebAddress uri=new WebAddress(item.getUrl());          String schemePlusHost=uri.getScheme() + uri.getHost();          String[] up=mDatabase.getUsernamePassword(schemePlusHost);          if (up != null && up[0] != null) {            setUsernamePassword(up[0],up[1]);          }        }      }      if (!JniUtil.useChromiumHttpStack()) {        WebViewWorker.getHandler().sendEmptyMessage(WebViewWorker.MSG_TRIM_CACHE);      }      break;    }case POLICY_FUNCTION:{    nativeCallPolicyFunction(msg.arg1,msg.arg2);    break;  }case ORIENTATION_CHANGED:{  if (mOrientation != msg.arg1) {    mOrientation=msg.arg1;    nativeOrientationChanged(msg.arg1);  }  break;}default :break;}}  }
class C{  protected void onOp(String channel,String sourceNick,String sourceLogin,String sourceHostname,String recipient){}  }
class C{  @Override public int available(){  return this.count - this.pos;}  }
class C{  private void ensureCellIsVisible(int row,int col){  Rectangle cellRect=getCellRect(row,col,false);  if (cellRect != null) {    scrollRectToVisible(cellRect);  }}  }
class C{  @Override public void processConnect(WebSocketChannel channel,WSURI location,String[] protocols){  LOG.entering(CLASS_NAME,"connect",channel);  nextHandler.processConnect(channel,location,protocols);}  }
class C{  public String classFlagTipText(){  return "If set to TRUE, lists the cluster as an extra attribute.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:54.327 -0400",hash_original_method="582FE1D280DC933CD2595A5449ACE973",hash_generated_method="582FE1D280DC933CD2595A5449ACE973") boolean isSupportedFileSuffix(String fileSuffix){  return mFileSuffixList.contains(fileSuffix);}  }
class C{  public void testGetNameWhenOverride(){  WAR war=new WAR("c:/some/path/to/war/test.war");  war.setContext("context");  assertEquals("context",war.getName());}  }
class C{  public DTMException(Throwable e){  super(e.getMessage());  this.containedException=e;  this.locator=null;}  }
class C{  private End end(){  return new End();}  }
class C{  protected String parseString() throws IOException {  StringBuffer sbuf=new StringBuffer();  return parseString(sbuf).toString();}  }
class C{  private Zone showZone(String zoneName,Map<String,String> aliasDatabase,boolean excludeAliases) throws NetworkDeviceControllerException {  Zone zone=new Zone(zoneName);  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.showZone.name.cmd"),zoneName);  sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  ZoneMember member=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.showZoneset.pwwn.match"),MDSDialogProperties.getString("MDSDialog.showZoneset.deviceAlias.match")};  String[] groups=new String[10];  Map<String,String> myAliasDatabase=aliasDatabase == null ? showDeviceAliasDatabase() : aliasDatabase;  if (excludeAliases) {    _log.info("Excluding aliases while getting zone members");  }  for (  String line : lines) {    int index=match(line,regex,groups);    member=new ZoneMember(ZoneMember.ConnectivityMemberType.WWPN);switch (index) {case 0:      member.setAddress(groups[0]);    if (!excludeAliases && groups.length >= 2 && groups[1] != null) {      member.setAlias(groups[1].replace("[","").replace("]",""));    }  zone.getMembers().add(member);break;case 1:if (!excludeAliases) {member.setAlias(groups[0]);member.setAliasType(true);}String pwwn=getDeviceAliasPwwn(groups[0],myAliasDatabase);if (!StringUtils.isEmpty(pwwn)) {member.setAddress(pwwn);}zone.getMembers().add(member);break;}}return zone;}  }
class C{  public static YamlConfiguration readFromFile(File file) throws IOException {  YamlConfiguration yc=new YamlConfiguration();  yc.read(file);  return yc;}  }
class C{  @Override public void classLoaderInit(DynamicClassLoader loader){}  }
class C{  public static boolean bitmapFillModeIsRepeat(BitmapFillNode node){  if (((node.getFileVersion().equalTo(FXGVersion.v1_0)) && node.repeat) || (node.fillMode.equals(FillMode.REPEAT))) {    return true;  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean valid(){  return pos < data.size();}  }
class C{  public void addBcc(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.BCC);}  }
class C{  @Override public void activate(){  resource=getResource();  request=getRequest();  scriptHelper=getSlingScriptHelper();  blogService=scriptHelper.getService(BlogService.class);  ValueMap properties=resource.adaptTo(ValueMap.class);  pageSize=properties.get(PAGE_SIZE_PROPERTY,Integer.class);  currentPage=getCurrentIndex();  totalPages=getTotalPageCount();}  }
class C{  public PublicKeyChecker disableTrust(){  trusted=null;  return this;}  }
class C{  public static double[] randomVector(final int length,final double min,final double max){  double[] returnVector=new double[length];  for (int i=0; i < returnVector.length; i++) {    returnVector[i]=min + Math.random() * Math.abs(max - min);  }  return returnVector;}  }
class C{  private void connect(String urlPath){  try {    JMXServiceURL url=new JMXServiceURL("rmi","",0,urlPath);    this.jmxc=JMXConnectorFactory.connect(url);    this.server=jmxc.getMBeanServerConnection();  } catch (  MalformedURLException e) {  }catch (  IOException e) {    System.err.println("\nCommunication error: " + e.getMessage());    System.exit(1);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tUnsets the class index temporarily before the filter is\n" + "\tapplied to the data.\n" + "\t(default: no)","unset-class-temporarily",1,"-unset-class-temporarily"));  result.addElement(new Option("\tSpecifies list of columns to Discretize. First" + " and last are valid indexes.\n" + "\t(default: first-last)","R",1,"-R <col1,col2-col4,...>"));  result.addElement(new Option("\tInvert matching sense of column indexes.","V",0,"-V"));  result.addElement(new Option("\tOutput binary attributes for discretized attributes.","D",0,"-D"));  return result.elements();}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.container_weather_touchLayout:    skyView.onClickSky();  break;case R.id.container_weather_locationContainer:ManageDialog manageDialog=new ManageDialog();manageDialog.setOnLocationChangedListener(((MainActivity)getActivity()));manageDialog.show(getFragmentManager(),null);break;case R.id.container_weather_location_collect_icon:if (collected) {if (((MainActivity)getActivity()).deleteLocation(location)) {collected=false;collectionIcon.setImageResource(R.drawable.ic_uncollected);}} else {collected=true;((MainActivity)getActivity()).addLocation(location);collectionIcon.setImageResource(R.drawable.ic_collected);}break;}}  }
class C{  public void remove(L listener){  ArgumentChecking.notNull(listener,"listener");  assert listeners.contains(listener) : "listener " + listener + " should already exist in the listener set.";  listeners.remove(listener);}  }
class C{  private Row selectRandomRow(ISqlTransaction tran,Table table){  Row row=null;  String sql=platform.createDmlStatement(DmlType.SELECT_ALL,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),table.getColumns(),null,textColumnExpression).getSql();  if (verbose) {    log.info("Selecting row from " + table.getName());  }  List<Row> rows=queryForRows(tran,sql,null,null);  if (rows.size() != 0) {    int rowNum=getRand().nextInt(rows.size());    row=rows.get(rowNum);  } else {    log.warn("Unable to find a row in table " + table.getName());  }  return row;}  }
class C{  public static final void main(String[] args){  try {    Properties properties=new Properties();    File journal=File.createTempFile("bigdata",".jnl");    log.info(journal.getAbsolutePath());    journal.deleteOnExit();    properties.setProperty(BigdataSail.Options.FILE,journal.getAbsolutePath());    BigdataSail sail=new BigdataSail(properties);    BigdataSailRepository repo=new BigdataSailRepository(sail);    repo.initialize();    BigdataWriter writer=new BigdataWriter(repo);    Collection<BigdataReader> readers=new LinkedList<BigdataReader>();    for (int i=0; i < numReaders; i++) {      readers.add(new BigdataReader(repo));    }    ExecutorService executor=Executors.newCachedThreadPool();    Future writerFuture=executor.submit(writer);    Collection<Future> readerFutures=new LinkedList<Future>();    for (    BigdataReader reader : readers) {      readerFutures.add(executor.submit(reader));    }    writerFuture.get();    for (    BigdataReader reader : readers) {      reader.kill();    }    for (    Future readerFuture : readerFutures) {      readerFuture.get();    }    repo.shutDown();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public Impp(String protocol,String handle){  setUri(protocol,handle);}  }
class C{  public List<? extends PlanElement> calcRoute(final String mainMode,final Facility fromFacility,final Facility toFacility,final double departureTime,final Person person){  Gbl.assertNotNull(fromFacility);  Gbl.assertNotNull(toFacility);  RoutingModule module=routingModules.get(mainMode);  if (module != null) {    final List<? extends PlanElement> trip=module.calcRoute(fromFacility,toFacility,departureTime,person);    if (trip == null) {      throw new NullPointerException("Routing module " + module + " returned a null Trip for main mode "+ mainMode);    }    return trip;  }  throw new UnknownModeException("unregistered main mode |" + mainMode + "|: does not pertain to "+ routingModules.keySet());}  }
class C{  public void paintTextPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  static public void assertNotNull(String message,Object object){  assertTrue(message,object != null);}  }
class C{  public boolean supportsDataManipulationTransactionsOnly() throws SQLException {  return false;}  }
class C{  protected static IJavaElement handleToElement(final String project,final String handle){  return handleToElement(project,handle,true);}  }
class C{  String sourceFormForAnnotation(AnnotationMirror annotationMirror){  StringBuilder sb=new StringBuilder();  new AnnotationSourceFormVisitor().visitAnnotation(annotationMirror,sb);  return sb.toString();}  }
class C{  private void prepare(){  live=new LiveAnalysis(false,true,false,ir.desiredSSAOptions.getExcludeGuards());  live.perform(ir);}  }
class C{  public TermsBuilder include(double[] terms){  if (includePattern != null) {    throw new IllegalArgumentException("include clause must be an array of exact values or a regex, not both");  }  this.includeTerms=doubleArrToStringArr(terms);  return this;}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"New tickets","Fixed tickets"};  List<Date[]> dates=new ArrayList<Date[]>();  List<double[]> values=new ArrayList<double[]>();  int length=titles.length;  for (int i=0; i < length; i++) {    dates.add(new Date[12]);    dates.get(i)[0]=new Date(108,9,1);    dates.get(i)[1]=new Date(108,9,8);    dates.get(i)[2]=new Date(108,9,15);    dates.get(i)[3]=new Date(108,9,22);    dates.get(i)[4]=new Date(108,9,29);    dates.get(i)[5]=new Date(108,10,5);    dates.get(i)[6]=new Date(108,10,12);    dates.get(i)[7]=new Date(108,10,19);    dates.get(i)[8]=new Date(108,10,26);    dates.get(i)[9]=new Date(108,11,3);    dates.get(i)[10]=new Date(108,11,10);    dates.get(i)[11]=new Date(108,11,17);  }  values.add(new double[]{142,123,142,152,149,122,110,120,125,155,146,150});  values.add(new double[]{102,90,112,105,125,112,125,112,105,115,116,135});  length=values.get(0).length;  int[] colors=new int[]{Color.BLUE,Color.GREEN};  PointStyle[] styles=new PointStyle[]{PointStyle.POINT,PointStyle.POINT};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  setChartSettings(renderer,"Project work status","Date","Tickets",dates.get(0)[0].getTime(),dates.get(0)[11].getTime(),50,190,Color.GRAY,Color.LTGRAY);  renderer.setXLabels(0);  renderer.setYLabels(10);  renderer.addYTextLabel(100,"test");  length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    XYSeriesRenderer seriesRenderer=(XYSeriesRenderer)renderer.getSeriesRendererAt(i);    seriesRenderer.setDisplayChartValues(true);  }  renderer.setXRoundedLabels(false);  return ChartFactory.getTimeChartIntent(context,buildDateDataset(titles,dates,values),renderer,"MM/dd/yyyy");}  }
class C{  public void loadDueCounts(){  sortCategories();  ((CategoryAdapter)mRecyclerView.getAdapter()).notifyDueChallengeCountsChanged(mDueChallengeCounts);}  }
class C{  @VisibleForTesting boolean isReportSpeed(){  return reportSpeed;}  }
class C{  public static void warning(final String message){  warning(WarningType.INFO_WARNING,message);}  }
class C{  protected void updateCapabilities(){  CheckBoxListModel model;  model=(CheckBoxListModel)m_List.getModel();  for (  Capability cap : Capability.values()) {    if (model.getChecked(model.indexOf(cap))) {      m_Capabilities.enable(cap);    } else {      m_Capabilities.disable(cap);    }  }}  }
class C{  public WrappedByteBuffer put(byte[] v,int offset,int length){  _autoExpand(length);  for (int i=0; i < length; i++) {    _buf.put(v[offset + i]);  }  return this;}  }
class C{  public String extractUPN(X509Certificate clientCert) throws IdmClientCertificateParsingException, InvalidPrincipalException, IDMException {  String upn=null;  logger.info("Extract and validating subject in client certificate");  Collection<List<?>> altNames;  try {    altNames=clientCert.getSubjectAlternativeNames();  } catch (  CertificateParsingException e) {    logger.error("No subject alternative name found in the cert.");    throw new IdmClientCertificateParsingException("Error in finding cert SAN",e);  }  if (altNames == null) {    logger.error("No subject alternative name found in the cert.");    throw new IdmClientCertificateParsingException("Empty Subject Alternative Names");  }  for (  List<?> altName : altNames) {    Validate.isTrue(altName.size() > 1,"Invalid certicate SAN entry");    Object altNameVal=altName.get(1);    if (Integer.valueOf(IdmClientCertificateValidator.SUBALTNAME_TYPE_OTHERNAME).equals(altName.get(0)) && altNameVal instanceof byte[]) {      byte[] altNameValByte=(byte[])altNameVal;      try {        upn=parseDERString(altNameValByte);      } catch (      Throwable t) {        throw new IdmClientCertificateParsingException("Failed to parse SAN entry with \'OtherName\' type.",t);      }    } else {      String skippedAltName=null;      if (altNameVal instanceof String) {        skippedAltName=(String)altNameVal;      } else       if (altNameVal instanceof byte[]) {        skippedAltName=new String((byte[])altNameVal);      }      logger.debug("Skipping SAN entry of type " + altName.get(0) + " with value: "+ skippedAltName);    }    if (upn != null) {      if (logger.isDebugEnabled()) {        logger.debug("Successfully extracted UPN from SAN entry:" + upn);      }      break;    }  }  if (upn == null) {    throw new IdmClientCertificateParsingException("No UPN entry in Subject Alternative Names extension");  }  return upn;}  }
class C{  private static int unitIndex(int bitIndex){  return bitIndex >> ADDRESS_BITS_PER_UNIT;}  }
class C{  @Override public NClob createNClob() throws SQLException {  try {    int id=getNextId(TraceObject.CLOB);    debugCodeAssign("NClob",TraceObject.CLOB,id,"createNClob()");    checkClosed();    try {      Value v=ValueLobDb.createTempClob(new InputStreamReader(new ByteArrayInputStream(Utils.EMPTY_BYTES)),0);      session.addTemporaryLob(v);      return new JdbcClob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @Deprecated public static void assertNotEquals(String itemName,long notExpected,long actual){  try {    if (notExpected == actual) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  @Override public Item deleteBack(){  Item itemToReturn=getBack();  items[size - 1]=null;  size=size - 1;  return itemToReturn;}  }
class C{  private static final boolean subPartMatch(String p,String t){  return (p == t) || ((null != p) && (p.equals(t)));}  }
class C{  @Deprecated public Long addRoom(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Integer videoPodWidth,Integer videoPodHeight,Integer videoPodXPosition,Integer videoPodYPosition,Integer moderationPanelXPosition,Boolean showWhiteBoard,Integer whiteBoardPanelXPosition,Integer whiteBoardPanelYPosition,Integer whiteBoardPanelHeight,Integer whiteBoardPanelWidth,Boolean showFilesPanel,Integer filesPanelXPosition,Integer filesPanelYPosition,Integer filesPanelHeight,Integer filesPanelWidth) throws AxisFault {  return this.getRoomServiceProxy().addRoom(SID,name,roomtypes_id,comment,numberOfPartizipants,ispublic,videoPodWidth,videoPodHeight,videoPodXPosition,videoPodYPosition,moderationPanelXPosition,showWhiteBoard,whiteBoardPanelXPosition,whiteBoardPanelYPosition,whiteBoardPanelHeight,whiteBoardPanelWidth,showFilesPanel,filesPanelXPosition,filesPanelYPosition,filesPanelHeight,filesPanelWidth);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  @Override protected void onPostCreate(Bundle savedInstanceState){  super.onPostCreate(savedInstanceState);  mDrawerToggle.syncState();}  }
class C{  private int checkShaarli(ShaarliAccount account){  NetworkManager manager=new NetworkManager(account);  try {    if (!manager.retrieveLoginToken()) {      return TOKEN_ERROR;    }    if (!manager.login()) {      return LOGIN_ERROR;    }  } catch (  IOException e) {    mError=e;    return NETWORK_ERROR;  }  return NO_ERROR;}  }
class C{  public static Intent craftIntent(Context context,Playlist playlist,Bitmap hero){  Intent intent=new Intent(context,PlaylistActivity.class);  intent.putExtra(PlaylistViewFragment.KEY_PLAYLIST,playlist.getRef());  Utils.queueBitmap(BITMAP_PLAYLIST_HERO,hero);  return intent;}  }
class C{  public Matrix(double[] data,int columns){  this(data.length / columns,columns);  for (int i=0; i < rows; i++)   for (int j=0; j < columns; j++)   values[i][j]=data[(i * columns) + j];}  }
class C{  public synchronized static TrackDataHub newInstance(Context context){  return new TrackDataHub(context,new TrackDataManager(),MyTracksProviderUtils.Factory.get(context),TARGET_DISPLAYED_TRACK_POINTS);}  }
class C{  public String requestStatistics(){  if (stats != null) {    return stats.requestStatistics();  } else {    return null;  }}  }
class C{  @DSComment("no suspicious activity") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.473 -0500",hash_original_method="251CBAD879CC81CB8B0B43DA249F7406",hash_generated_method="BFCB6019F74FF0DB7DAA3F0B6215B3B1") public final boolean lessEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) <= 0);}  }
class C{  public void copyChars(char[] otherChars,int otherOffset,int otherLength){  grow(otherLength);  System.arraycopy(otherChars,otherOffset,ref.chars,0,otherLength);  ref.length=otherLength;}  }
class C{  public Access acquireReadWriteConnectionAccess() throws InterruptedException {  return accessSemaphore.acquireShared();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.398 -0500",hash_original_method="B58ABDA4F4570A6C6402F324866C9A78",hash_generated_method="E149D03984F42229474A427A65B231B4") public void removeSpeed(){  mSpeed=0.0f;  mHasSpeed=false;}  }
class C{  @SuppressWarnings({"SuspiciousNameCombination"}) protected Position ellipsoidalToGeodetic(Vec4 cart){  if (null == cart) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double X=cart.z;  double Y=cart.x;  double Z=cart.y;  double XXpYY=X * X + Y * Y;  double sqrtXXpYY=Math.sqrt(XXpYY);  double a=this.equatorialRadius;  double ra2=1 / (a * a);  double e2=this.es;  double e4=e2 * e2;  double p=XXpYY * ra2;  double q=Z * Z * (1 - e2)* ra2;  double r=(p + q - e4) / 6;  double h;  double phi;  double evoluteBorderTest=8 * r * r* r + e4 * p * q;  if (evoluteBorderTest > 0 || q != 0) {    double u;    if (evoluteBorderTest > 0) {      double rad1=Math.sqrt(evoluteBorderTest);      double rad2=Math.sqrt(e4 * p * q);      if (evoluteBorderTest > 10 * e2) {        double rad3=Math.cbrt((rad1 + rad2) * (rad1 + rad2));        u=r + 0.5 * rad3 + 2 * r * r / rad3;      } else {        u=r + 0.5 * Math.cbrt((rad1 + rad2) * (rad1 + rad2)) + 0.5 * Math.cbrt((rad1 - rad2) * (rad1 - rad2));      }    } else {      double rad1=Math.sqrt(-evoluteBorderTest);      double rad2=Math.sqrt(-8 * r * r* r);      double rad3=Math.sqrt(e4 * p * q);      double atan=2 * Math.atan2(rad3,rad1 + rad2) / 3;      u=-4 * r * Math.sin(atan)* Math.cos(Math.PI / 6 + atan);    }    double v=Math.sqrt(u * u + e4 * q);    double w=e2 * (u + v - q) / (2 * v);    double k=(u + v) / (Math.sqrt(w * w + u + v) + w);    double D=k * sqrtXXpYY / (k + e2);    double sqrtDDpZZ=Math.sqrt(D * D + Z * Z);    h=(k + e2 - 1) * sqrtDDpZZ / k;    phi=2 * Math.atan2(Z,sqrtDDpZZ + D);  } else {    double rad1=Math.sqrt(1 - e2);    double rad2=Math.sqrt(e2 - p);    double e=Math.sqrt(e2);    h=-a * rad1 * rad2 / e;    phi=rad2 / (e * rad2 + rad1 * Math.sqrt(p));  }  double lambda;  double s2=Math.sqrt(2);  if ((s2 - 1) * Y < sqrtXXpYY + X) {    lambda=2 * Math.atan2(Y,sqrtXXpYY + X);  } else   if (sqrtXXpYY + Y < (s2 + 1) * X) {    lambda=-Math.PI * 0.5 + 2 * Math.atan2(X,sqrtXXpYY - Y);  } else {    lambda=Math.PI * 0.5 - 2 * Math.atan2(X,sqrtXXpYY + Y);  }  return Position.fromRadians(phi,lambda,h);}  }
class C{  public void reschedule(long delay,TimeUnit unit){  boolean needQueue=true;  SingletonTaskWorker stw=null;synchronized (context) {    if (context.taskRunning || context.taskShouldRun) {      if (context.taskRunning) {        if (delay > 0) {          long now=System.nanoTime();          long then=now + TimeUnit.NANOSECONDS.convert(delay,unit);          context.waitingTask.nextschedule=then;        } else {          context.waitingTask.nextschedule=0;        }        needQueue=false;      } else {        context.waitingTask.canceled=true;        context.waitingTask=null;      }    }    context.taskShouldRun=true;    if (needQueue) {      stw=context.waitingTask=new SingletonTaskWorker(this);    }  }  if (needQueue) {    if (delay <= 0)     ses.execute(stw); else     ses.schedule(stw,delay,unit);  }}  }
class C{  private void moveToChannel(VoiceChannel channel,Guild guild) throws SoundPlaybackException {  boolean hasPermissionToSpeak=PermissionUtil.checkPermission(channel,bot.getUserById(bot.getSelfInfo().getId()),Permission.VOICE_SPEAK);  if (hasPermissionToSpeak) {    AudioManager audioManager=bot.getAudioManager(guild);    if (audioManager.isConnected()) {      if (audioManager.isAttemptingToConnect()) {        audioManager.closeAudioConnection();      }      audioManager.moveAudioConnection(channel);    } else {      audioManager.openAudioConnection(channel);    }    int i=0;    int waitTime=100;    int maxIterations=40;synchronized (this) {      while (!audioManager.isConnected()) {        try {          wait(waitTime);          i++;          if (i >= maxIterations) {            break;          }        } catch (        InterruptedException e) {          LOG.warn("Waiting for audio connection was interrupted.");        }      }    }  } else {    throw new SoundPlaybackException("The bot does not have permission to speak in the requested channel: " + channel.getName() + ".");  }}  }
class C{  private String streamAttachment(HttpServletRequest request,HttpServletResponse response){  int R_Request_ID=WebUtil.getParameterAsInt(request,P_REQUEST_ID);  if (R_Request_ID == 0) {    log.fine("No R_Request_ID)");    return "No Request ID";  }  int attachmentIndex=WebUtil.getParameterAsInt(request,P_ATTACHMENT_INDEX);  if (attachmentIndex == 0) {    log.fine("No index)");    return "No Request Attachment index";  }  log.info("R_Request_ID=" + R_Request_ID + " / "+ attachmentIndex);  Properties ctx=JSPEnv.getCtx(request);  MRequest doc=new MRequest(ctx,R_Request_ID,null);  if (doc.getR_Request_ID() != R_Request_ID) {    log.fine("Request not found - R_Request_ID=" + R_Request_ID);    return "Request not found";  }  MAttachment attachment=doc.getAttachment(false);  if (attachment == null) {    log.fine("No Attachment for R_Request_ID=" + R_Request_ID);    return "Request Attachment not found";  }  HttpSession session=request.getSession(true);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu.getAD_User_ID() == doc.getAD_User_ID() || wu.getAD_User_ID() == doc.getSalesRep_ID())   ; else {    log.warning("R_Request_ID=" + R_Request_ID + " Web_User="+ wu.getAD_User_ID()+ " <> AD_User_ID="+ doc.getAD_User_ID()+ " | SalesRep_ID="+ doc.getSalesRep_ID());    return "Your Request not found";  }  return WebUtil.streamAttachment(response,attachment,attachmentIndex);}  }
class C{  public void addRemoteHost(String hostname){  m_remoteHosts.addElement(hostname);}  }
class C{  public boolean canFire(){  return canFire(false);}  }
class C{  public static StdTypeList make(Type type0,Type type1,Type type2){  StdTypeList result=new StdTypeList(3);  result.set(0,type0);  result.set(1,type1);  result.set(2,type2);  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void sendButtonPendingIntentWithUrl(Context context,String url){  assert mCustomButtonPendingIntent != null;  Intent addedIntent=new Intent();  addedIntent.setData(Uri.parse(url));  try {    mCustomButtonPendingIntent.send(context,0,addedIntent,mOnFinished,null);  } catch (  CanceledException e) {    Log.e(TAG,"CanceledException while sending pending intent in custom tab");  }}  }
class C{  public boolean isDrawGraticule(){  return getUTMRenderingParams().isDrawLines();}  }
class C{  public Statement egt(Object value){  return compare(">=",value);}  }
class C{  @Override public void parse(final Cookie cookie,String domain) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (domain == null) {    throw new MalformedCookieException("Missing value for domain attribute");  }  if (domain.trim().equals("")) {    throw new MalformedCookieException("Blank value for domain attribute");  }  domain=domain.toLowerCase();  if (!domain.startsWith(".")) {    domain="." + domain;  }  cookie.setDomain(domain);  cookie.setDomainAttributeSpecified(true);}  }
class C{  public String shortSummary(){  StringBuilder sb=new StringBuilder();  sb.append('[').append(index).append(']').append('[').append(shardId).append(']');  sb.append(", node[").append(currentNodeId).append("], ");  if (relocatingNodeId != null) {    sb.append("relocating [").append(relocatingNodeId).append("], ");  }  if (primary) {    sb.append("[P]");  } else {    sb.append("[R]");  }  sb.append(", v[").append(version).append("]");  if (this.restoreSource != null) {    sb.append(", restoring[" + restoreSource + "]");  }  sb.append(", s[").append(state).append("]");  if (allocationId != null) {    sb.append(", a").append(allocationId);  }  if (this.unassignedInfo != null) {    sb.append(", ").append(unassignedInfo.toString());  }  if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {    sb.append(", expected_shard_size[").append(expectedShardSize).append("]");  }  if (tokenRanges != null && tokenRanges.size() > 0) {    sb.append(", token_ranges=").append(tokenRanges).append("]");  }  return sb.toString();}  }
class C{  public static int quantile(ModifiableDoubleDBIDList data,double quant){  return quantile(data,0,data.size(),quant);}  }
class C{  private void generateTree(AbstractBURS_TreeNode k,BURS_StateCoder burs){  AbstractBURS_TreeNode child1=k.child1;  AbstractBURS_TreeNode child2=k.child2;  if (child1 != null) {    if (child2 != null) {      if (k.isSuperNodeRoot()) {        byte act=action(k.rule(k.getNonTerminal()));        if ((act & BURS_StateCoder.RIGHT_CHILD_FIRST) != 0) {          generateTree(child2,burs);          generateTree(child1,burs);        } else {          generateTree(child1,burs);          generateTree(child2,burs);        }      } else {        generateTree(child1,burs);        generateTree(child2,burs);      }    } else {      generateTree(child1,burs);    }  } else   if (child2 != null) {    generateTree(child2,burs);  }  if (k.isSuperNodeRoot()) {    int nonterminal=k.getNonTerminal();    int rule=k.rule(nonterminal);    burs.code(k,nonterminal,rule);    if (DEBUG)     VM.sysWrite(k + " " + debug(rule)+ "\n");  }}  }
class C{  private boolean isPermutation(int[] perm){  int n=perm.length;  boolean[] onlyOnce=new boolean[n];  for (int i=0; i < n; i++) {    if ((perm[i] < 0) || (perm[i] >= n) || onlyOnce[perm[i]]) {      return false;    }    onlyOnce[perm[i]]=true;  }  return true;}  }
class C{  @Override public boolean acceptSource(final Object source){  return source == null;}  }
class C{  public synchronized boolean seek(long seqno) throws ReplicatorException, InterruptedException {  return seek(seqno,(short)0);}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  private E firstDataItem(){  for (Node p=head; p != null; p=succ(p)) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return LinkedTransferQueue.<E>cast(item);    } else     if (item == null)     return null;  }  return null;}  }
class C{  @Timed @ExceptionMetered @GET public ImmutableList<AutomationSecretResponse> readSecrets(@Auth AutomationClient automationClient,@QueryParam("name") String name){  ImmutableList.Builder<AutomationSecretResponse> responseBuilder=ImmutableList.builder();  if (name != null) {    Optional<Secret> optionalSecret=secretController.getSecretByName(name);    if (!optionalSecret.isPresent()) {      throw new NotFoundException("Secret not found.");    }    Secret secret=optionalSecret.get();    ImmutableList<Group> groups=ImmutableList.copyOf(aclDAO.getGroupsFor(secret));    responseBuilder.add(AutomationSecretResponse.fromSecret(secret,groups));  } else {    List<SanitizedSecret> secrets=secretController.getSanitizedSecrets(null,null);    for (    SanitizedSecret sanitizedSecret : secrets) {      Secret secret=secretController.getSecretById(sanitizedSecret.id()).orElseThrow(null);      ImmutableList<Group> groups=ImmutableList.copyOf(aclDAO.getGroupsFor(secret));      responseBuilder.add(AutomationSecretResponse.fromSecret(secret,groups));    }  }  return responseBuilder.build();}  }
class C{  public void encode(DexFile file){  finishProcessingIfNecessary();  TypeIdsSection typeIds=file.getTypeIds();  int size=table.size();  handlerOffsets=new TreeMap<CatchHandlerList,Integer>();  for (int i=0; i < size; i++) {    handlerOffsets.put(table.get(i).getHandlers(),null);  }  if (handlerOffsets.size() > 65535) {    throw new UnsupportedOperationException("too many catch handlers");  }  ByteArrayAnnotatedOutput out=new ByteArrayAnnotatedOutput();  encodedHandlerHeaderSize=out.writeUleb128(handlerOffsets.size());  for (  Map.Entry<CatchHandlerList,Integer> mapping : handlerOffsets.entrySet()) {    CatchHandlerList list=mapping.getKey();    int listSize=list.size();    boolean catchesAll=list.catchesAll();    mapping.setValue(out.getCursor());    if (catchesAll) {      out.writeSleb128(-(listSize - 1));      listSize--;    } else {      out.writeSleb128(listSize);    }    for (int i=0; i < listSize; i++) {      CatchHandlerList.Entry entry=list.get(i);      out.writeUleb128(typeIds.indexOf(entry.getExceptionType()));      out.writeUleb128(entry.getHandler());    }    if (catchesAll) {      out.writeUleb128(list.get(listSize).getHandler());    }  }  encodedHandlers=out.toByteArray();}  }
class C{  public static String randomString(String sampler,int length){  StringBuilder builder=new StringBuilder(length);  for (int i=0; i < length; i++)   builder.append(sampler.charAt(SEEDED_RANDOM.nextInt(sampler.length())));  return builder.toString();}  }
class C{  public String[] grep(Object[] search){  ArrayList v=new ArrayList();  for (int i=0; i < search.length; i++) {    String s=search[i].toString();    if (match(s)) {      v.add(s);    }  }  String[] ret=new String[v.size()];  v.toArray(ret);  return ret;}  }
class C{  IndexedPropertyDescriptor(Class<?> bean,String base,Method read,Method write,Method readIndexed,Method writeIndexed) throws IntrospectionException {  super(bean,base,read,write);  setIndexedReadMethod0(readIndexed);  setIndexedWriteMethod0(writeIndexed);  setIndexedPropertyType(findIndexedPropertyType(readIndexed,writeIndexed));}  }
class C{  public void injectInstrumentation(Instrumentation instrumentation){  mInstrumentation=instrumentation;}  }
class C{  public boolean ready(){  return true;}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public void addAllOfFromTo(long[] elements,int from,int to){  int bitsPerElem=this.bitsPerElement;  int bitsPerElemMinusOne=bitsPerElem - 1;  long min=this.minValue;  long[] theBits=this.bits;  ensureCapacity(this.size + to - from + 1);  int firstBit=this.size * bitsPerElem;  int i=from;  for (int times=to - from + 1; --times >= 0; ) {    QuickBitVector.putLongFromTo(theBits,elements[i++] - min,firstBit,firstBit + bitsPerElemMinusOne);    firstBit+=bitsPerElem;  }  this.size+=(to - from + 1);}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (o instanceof Column) {    Column other=(Column)o;    if (getSqlName().equals(other.getSqlName())) {      return true;    }  }  return false;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.207 -0500",hash_original_method="7568906165FD370FD5C4296CB4D5FD76",hash_generated_method="B6E6EC8992C1CCA1FC7F07E623B0F6A7") public void bindAllArgsAsStrings(String[] bindArgs){  if (bindArgs == null) {    return;  }  int size=bindArgs.length;  for (int i=0; i < size; i++) {    bindString(i + 1,bindArgs[i]);  }}  }
class C{  public PtNotice updateNotice(PtNotice notice,InputStream fileStream){  final String fileName=notice.getNoticeNo() + ".pdf";  final FileStoreMapper fileStore=fileStoreService.store(fileStream,fileName,"application/pdf",FILESTORE_MODULE_NAME);  notice.setFileStore(fileStore);  notice.setNoticeDate(new Date());  basicPropertyService.update(notice.getBasicProperty());  getSession().flush();  return notice;}  }
class C{  @Nullable private <T>T unmarshal(final byte[] bytes) throws IOException {  if (marshaller != null) {    try {      return marshaller.unmarshal(bytes,getClass().getClassLoader());    } catch (    IgniteCheckedException e) {      throw new IOException(e);    }  }  return null;}  }
class C{  boolean isVariableFieldWidth(){  return variableFieldWidth;}  }
class C{  public static MapBean createMapBean(){  int envWidth=Environment.getInteger(Environment.Width,MapBean.DEFAULT_WIDTH);  int envHeight=Environment.getInteger(Environment.Height,MapBean.DEFAULT_HEIGHT);  if (envWidth <= 0 || envHeight <= 0) {    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();    if (envWidth <= 0) {      envWidth=(int)d.getWidth();    }    if (envHeight <= 0) {      envHeight=(int)d.getHeight();    }  }  return createMapBean(null,new BevelBorder(BevelBorder.LOWERED));}  }
class C{  public boolean isStopping(){  return getState().isStopping();}  }
class C{  public void build(InputIterator iterator,double ramBufferSizeMB) throws IOException {  if (iterator.hasPayloads()) {    throw new IllegalArgumentException("this suggester doesn't support payloads");  }  if (iterator.hasContexts()) {    throw new IllegalArgumentException("this suggester doesn't support contexts");  }  String prefix=getClass().getSimpleName();  Path tempIndexPath=Files.createTempDirectory(prefix + ".index.");  Directory dir=FSDirectory.open(tempIndexPath);  IndexWriterConfig iwc=new IndexWriterConfig(indexAnalyzer);  iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);  iwc.setRAMBufferSizeMB(ramBufferSizeMB);  IndexWriter writer=new IndexWriter(dir,iwc);  FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);  ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);  ft.setOmitNorms(true);  ft.freeze();  Document doc=new Document();  Field field=new Field("body","",ft);  doc.add(field);  totTokens=0;  IndexReader reader=null;  boolean success=false;  count=0;  try {    while (true) {      BytesRef surfaceForm=iterator.next();      if (surfaceForm == null) {        break;      }      field.setStringValue(surfaceForm.utf8ToString());      writer.addDocument(doc);      count++;    }    reader=DirectoryReader.open(writer);    Terms terms=MultiFields.getTerms(reader,"body");    if (terms == null) {      throw new IllegalArgumentException("need at least one suggestion");    }    TermsEnum termsEnum=terms.iterator();    Outputs<Long> outputs=PositiveIntOutputs.getSingleton();    Builder<Long> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);    IntsRefBuilder scratchInts=new IntsRefBuilder();    while (true) {      BytesRef term=termsEnum.next();      if (term == null) {        break;      }      int ngramCount=countGrams(term);      if (ngramCount > grams) {        throw new IllegalArgumentException("tokens must not contain separator byte; got token=" + term + " but gramCount="+ ngramCount+ ", which is greater than expected max ngram size="+ grams);      }      if (ngramCount == 1) {        totTokens+=termsEnum.totalTermFreq();      }      builder.add(Util.toIntsRef(term,scratchInts),encodeWeight(termsEnum.totalTermFreq()));    }    fst=builder.finish();    if (fst == null) {      throw new IllegalArgumentException("need at least one suggestion");    }    writer.rollback();    success=true;  }  finally {    try {      if (success) {        IOUtils.close(reader,dir);      } else {        IOUtils.closeWhileHandlingException(reader,writer,dir);      }    }  finally {      IOUtils.rm(tempIndexPath);    }  }}  }
class C{  public static String staticOption(String option,String value){  try {    return MediaInfoLibrary.INSTANCE.Option(null,new WString(option),new WString(value)).toString();  } catch (  Error e) {    LOGGER.error("Failed to load mediainfo",e);    return "";  }}  }
class C{  private WebSocketInputStream openInputStream(Socket socket) throws WebSocketException {  try {    return new WebSocketInputStream(new BufferedInputStream(socket.getInputStream()));  } catch (  IOException e) {    throw new WebSocketException(WebSocketError.SOCKET_INPUT_STREAM_FAILURE,"Failed to get the input stream of the raw socket: " + e.getMessage(),e);  }}  }
class C{  private boolean isCompleted(RunPhase phase,boolean finished){  boolean ret=false;  if (shouldStop(phase) || (finished && (APITestHarness.getInstance().getAgentRunData().getSimulationTime() <= 0 || APITestHarness.getInstance().hasMetSimulationTime() || APITestHarness.getInstance().isDebug()))) {    ret=true;  }  return ret;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  if (w != null) {    UIManager uiMgr=stack.getUIMgr();    Catbert.Context con;    if (uiMgr == null || uiMgr.getCurrUI() == null)     con=new Catbert.Context(stack.getUIMgr()); else     con=uiMgr.getCurrUI().getUI().getRelatedContext().createChild();    Catbert.ExecutionPosition ep=ZPseudoComp.processChain(w,con,null,null,false);    if (ep != null) {      ep.addToStackFinal(w);    }    return con.get(null);  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  ScrollView rowLayout=null;  if (savedInstanceState == null) {    Log.d(DEBUG_TAG,"Initializing from original arguments");  } else {    Log.d(DEBUG_TAG,"Restoring from savedInstanceState");  }  this.inflater=inflater;  rowLayout=(ScrollView)inflater.inflate(R.layout.tag_form_view,container,false);  boolean displayMRUpresets=((Boolean)getArguments().getSerializable(DISPLAY_MRU_PRESETS)).booleanValue();  focusOnAddress=((Boolean)getArguments().getSerializable(FOCUS_ON_ADDRESS)).booleanValue();  focusTag=getArguments().getString(FOCUS_TAG);  askForName=((Boolean)getArguments().getSerializable(ASK_FOR_NAME)).booleanValue();  if (getUserVisibleHint()) {    Log.d(DEBUG_TAG,"is visible");  }  prefs=new Preferences(getActivity());  if (prefs.getEnableNameSuggestions()) {    names=Application.getNames(getActivity());  }  maxInlineValues=prefs.getMaxInlineValues();  if (displayMRUpresets) {    Log.d(DEBUG_TAG,"Adding MRU prests");    FragmentManager fm=getChildFragmentManager();    FragmentTransaction ft=fm.beginTransaction();    Fragment recentPresetsFragment=fm.findFragmentByTag("recentpresets_fragment");    if (recentPresetsFragment != null) {      ft.remove(recentPresetsFragment);    }    recentPresetsFragment=RecentPresetsFragment.newInstance(((PropertyEditor)getActivity()).getElement());    ft.add(R.id.form_mru_layout,recentPresetsFragment,"recentpresets_fragment");    ft.commit();  }  Log.d(DEBUG_TAG,"onCreateView returning");  return rowLayout;}  }
class C{  public StyledButtonUI(Style style){  this.style=style;}  }
class C{  @Override protected void basicProcess(final DistributionManager dm,final LocalRegion lclRgn){  Assert.assertTrue(this.serialNum != DistributionAdvisor.ILLEGAL_SERIAL);  try {    this.lockRoot=null;    final boolean sendReply=true;    dm.getWaitingThreadPool().execute(destroyOp(dm,lclRgn,sendReply));  } catch (  RejectedExecutionException e) {  }}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  float halfShapeWidth=SHAPE_WIDTH / 2;  canvas.drawRect(x,y - halfShapeWidth,x + SHAPE_WIDTH,y + halfShapeWidth,paint);}  }
class C{  public String toString(){  return Form + "\t" + Lemma+ "\t"+ Lemma+ "\t"+ POS+ "\t"+ POS+ "\t_\t"+ Feats+ "\t"+ headID+ "\t"+ headID+ "\t"+ Deprel+ "\t"+ Deprel;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void testMultivariateMIforRandomVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA_2={0.02886644,0.01071634,0.00186857,-0.00377259,-0.00634851,-0.00863725,-0.01058087,-0.01106348};  System.out.println("Kraskov comparison 3 - multivariate random data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1}),MatrixUtils.selectColumns(data,new int[]{2,3}),kNNs,expectedFromMILCA_2);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public UnicodeReader(InputStream in,String defaultEncoding) throws IOException {  init(in,defaultEncoding);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private MySQLGuacamoleProperties(){}  }
class C{  public static Document createXMLTypeAddress(Document doc,Locale locale){  List nodeList=doc.selectNodes(XPATH_TYPEADDRESSES_TYPEADDRESS);  if ((nodeList != null) && (!nodeList.isEmpty())) {    for (Iterator iterator=nodeList.iterator(); iterator.hasNext(); ) {      Element node=(Element)iterator.next();      String codigoText=((Element)node.selectObject(XML_TYPEADDRESS_CODIGO)).getText();      if (codigoText != null) {        String descripcionText=null;        try {          descripcionText=RBExternUtil.getInstance(locale).getProperty(ROOT_PROPERTY + codigoText);          if ((descripcionText != null) && (!descripcionText.equals(""))) {            Element descriptionElement=(Element)node.selectObject(XML_TYPEADDRESS_DESCRIPCION);            node.remove(descriptionElement);            node.addElement(XML_TYPEADDRESS_DESCRIPCION).add(DocumentHelper.createCDATA(descripcionText));          }        } catch (        Exception e) {          _logger.error("Imposible obtener la descripcion del tipo de direccion telematica con codigo: " + codigoText,e);        }      }    }  }  return doc;}  }
class C{  public synchronized Entry pop() throws IOException {  return po(this.stack.lastKey(),true);}  }
class C{  public static final void readFully(InputStream i,byte b[],int off,int len) throws IOException {  if (len < 0) {    throw new IndexOutOfBoundsException();  }  int n=0;  while (n < len) {    int count=i.read(b,off + n,len - n);    if (count < 0) {      throw new EOFException();    }    n+=count;  }}  }
class C{  private void testMultiStatement(){  MVStore s=MVStore.open(null);  TransactionStore ts=new TransactionStore(s);  ts.init();  Transaction tx;  TransactionMap<String,String> m;  long startUpdate;  tx=ts.begin();  startUpdate=tx.setSavepoint();  m=tx.openMap("test");  m.setSavepoint(startUpdate);  startUpdate=tx.setSavepoint();  m.setSavepoint(startUpdate);  assertTrue(m.trySet("1","Hello",true));  assertTrue(m.trySet("2","World",true));  assertNull(m.get("1"));  assertNull(m.get("2"));  startUpdate=tx.setSavepoint();  m.setSavepoint(startUpdate);  assertEquals("Hello",m.get("1"));  assertEquals("World",m.get("2"));  assertEquals("Hello",m.get("1"));  assertTrue(m.trySet("1",null,true));  assertTrue(m.trySet("2","Hello",true));  assertEquals("World",m.get("2"));  assertTrue(m.trySet("2",null,true));  assertTrue(m.trySet("3","World",true));  assertEquals("Hello",m.get("1"));  assertEquals("World",m.get("2"));  assertNull(m.get("3"));  startUpdate=tx.setSavepoint();  m.setSavepoint(startUpdate);  assertNull(m.get("1"));  assertEquals("Hello",m.get("2"));  assertEquals("World",m.get("3"));  startUpdate=tx.setSavepoint();  m.setSavepoint(startUpdate);  assertTrue(m.trySet("2",null,true));  assertTrue(m.trySet("1","Hello",true));  assertTrue(m.trySet("3",null,true));  assertFalse(m.trySet("1","World",true));  tx.rollbackToSavepoint(startUpdate);  startUpdate=tx.setSavepoint();  m.setSavepoint(startUpdate);  assertNull(m.get("1"));  assertEquals("Hello",m.get("2"));  assertEquals("World",m.get("3"));  tx.commit();  ts.close();  s.close();}  }
class C{  @Deprecated public void addDatasource(String name,String defName,ConsolFun consolFun){  VDef sDef=new VDef(name,defName,consolFun.getVariable());  sources.put(name,sDef);}  }
class C{  public SubReqClientHandler(){}  }
class C{  public static TetradMatrix convertCovToCorr(TetradMatrix m){  for (int i=0; i < m.rows(); i++) {    for (int j=0; j < m.columns(); j++) {      if (Double.isNaN(m.get(i,j))) {        throw new IllegalArgumentException("Please remove or impute missing values.");      }    }  }  return correlation(m);}  }
class C{  public void removeRow(int row){  data.remove(row);  fireTableDataChanged();}  }
class C{  public boolean isFull(){  return getAvailableCapacity() <= 0;}  }
class C{  public static void main(String[] args){  callExit=true;  int lopt=-1;  for (int i=0; i < args.length; ++i)   if (args[i].toLowerCase().endsWith("licence")) {    lopt=i;    System.out.println(LICENCE + "\n");  }  int port=80;  if (args.length > 0 && lopt != 0)   port=Integer.parseInt(args[0]);  if (args.length > 1 && args[1].toLowerCase().endsWith("licence"))   System.out.println(LICENCE + "\n");  NanoHTTPD nh=null;  try {    nh=new NanoHTTPD(port);  } catch (  IOException ioe) {    System.err.println("Couldn't start server:\n" + ioe);    System.exit(-1);  }  nh.myFileDir=new File("");  System.out.println("Now serving files on port " + port + " from \""+ new File(docroot)+ "\"");  System.out.println("Hit Enter to stop.\n");  try {    System.in.read();  } catch (  Throwable t) {  }  ;}  }
class C{  public static void readWholeFile(File file,StringBuilder stringBuilder) throws IOException {  long length=file.length();  MappedByteBuffer in=new FileInputStream(file).getChannel().map(FileChannel.MapMode.READ_ONLY,0,length);  int i=0;  while (i < length)   stringBuilder.append((char)in.get(i++));}  }
class C{  public Builder put(String setting,int value){  put(setting,String.valueOf(value));  return this;}  }
class C{  protected int checkHorizontalKey(int key,String message){  if ((key == LEFT) || (key == CENTER) || (key == RIGHT)|| (key == LEADING)|| (key == TRAILING)) {    return key;  } else {    throw new IllegalArgumentException(message);  }}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  public Future<ReplDBMSHeader> watchForProcessedSequenceNumber(long seqno) throws InterruptedException {  return stages.getLast().watchForProcessedSequenceNumber(seqno,false);}  }
class C{  public static File createGreekTreeRepository() throws Exception {  final File repoRoot=Files.createTempDir();  final File wcRoot=Files.createTempDir();  repoRoot.deleteOnExit();  wcRoot.deleteOnExit();  final CommandLineResult result=UpstreamUtils.executeCommandLine(null,"svnadmin",new String[]{"create",repoRoot.getAbsolutePath()},-1,repoRoot);  handleCLIResult(result);  final CLIOutputWithRevisionResponse coResponse=subversionApi.checkout(dtoFactory.createDto(CheckoutRequest.class).withProjectPath(wcRoot.getAbsolutePath()).withUrl("file:///" + repoRoot.getAbsolutePath()));  assertTrue(coResponse.getRevision() > -1);  final List<String> pathsToAdd=new ArrayList<>();  for (  final String path : GREEK_TREE) {    final File fileForPath=new File(wcRoot,path);    final String[] pathParts=path.split("/");    Files.createParentDirs(fileForPath);    if (!path.endsWith("/") && fileForPath.createNewFile()) {      Files.write(("This is the file '" + pathParts[pathParts.length - 1] + "'.").getBytes(),fileForPath);      pathsToAdd.add(path.substring(1));    }  }  subversionApi.add(dtoFactory.createDto(AddRequest.class).withProjectPath(wcRoot.getAbsolutePath()).withPaths(pathsToAdd).withAddParents(true));  final CLIOutputResponse propResponse=subversionApi.propset(dtoFactory.createDto(PropertySetRequest.class).withValue("user").withProjectPath(wcRoot.getAbsolutePath()).withPath(".").withForce(true).withDepth(Depth.FULLY_RECURSIVE).withName("owner"));  assertTrue(propResponse.getOutput().size() > 0);  final CLIOutputWithRevisionResponse cResponse=subversionApi.commit(dtoFactory.createDto(CommitRequest.class).withProjectPath(wcRoot.getAbsolutePath()).withMessage("Initial commit."));  assertEquals(1L,cResponse.getRevision());  return repoRoot;}  }
class C{  public void removeSTOPretransmissions(int regency){  Set<Integer> timers=requestsTimer.getTimers();  for (  int t : timers) {    if (t <= regency)     requestsTimer.stopSTOP(t);  }}  }
class C{  static private Date parseDate(char[] orig,ParsePosition pos,boolean lenient){  try {    int day=-1;    int month=-1;    int year=-1;    int hours=0;    int minutes=0;    int seconds=0;    int offset=0;    MailDateParser p=new MailDateParser(orig);    p.skipUntilNumber();    day=p.parseNumber();    if (!p.skipIfChar('-')) {      p.skipWhiteSpace();    }    month=p.parseMonth();    if (!p.skipIfChar('-')) {      p.skipWhiteSpace();    }    year=p.parseNumber();    if (year < 50) {      year+=2000;    } else     if (year < 100) {      year+=1900;    }    p.skipWhiteSpace();    hours=p.parseNumber();    p.skipChar(':');    minutes=p.parseNumber();    if (p.skipIfChar(':')) {      seconds=p.parseNumber();    }    try {      p.skipWhiteSpace();      offset=p.parseTimeZone();    } catch (    ParseException pe) {      if (debug) {        System.out.println("No timezone? : '" + new String(orig) + "'");      }    }    pos.setIndex(p.getIndex());    Date d=ourUTC(year,month,day,hours,minutes,seconds,offset,lenient);    return d;  } catch (  Exception e) {    if (debug) {      System.out.println("Bad date: '" + new String(orig) + "'");      e.printStackTrace();    }    pos.setIndex(1);    return null;  }}  }
class C{  public String sqlADAction_updateLinkParameterElement(String vendorName,String catalogName,String schemaName){  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("AD_Element_ID");  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList("AD_Element_ID")),null,new ArrayList<String>(Arrays.asList("UPPER(c.ColumnName)=UPPER(e.ColumnName)")),null,false);  ArrayList<String> values=new ArrayList<String>();  values.add(new StringBuffer("(").append(subQuery).append(")").toString());  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("c.AD_Element_ID IS NULL");  return sql_update(vendorName,catalogName,schemaName,"AD_Process_Para","c",columnNames,values,conditions);}  }
class C{  private static final String convert(double _latitude){  double latitude=Math.abs(_latitude);  int degree=(int)latitude;  latitude*=60;  latitude-=(degree * 60.0d);  int minute=(int)latitude;  latitude*=60;  latitude-=(minute * 60.0d);  int milliSecond=(int)(latitude * 1000.0d);  String sb=String.valueOf(degree) + "/1," + minute+ "/1,"+ milliSecond+ "/1000,";  return sb;}  }
class C{  private JFreeChart createChart(final CategoryDataset dataset){  final JFreeChart chart=ChartFactory.createStackedBarChart("Stacked Bar Chart Demo 4","Category","Value",dataset,PlotOrientation.VERTICAL,true,true,false);  BarRenderer.setDefaultBarPainter(new StandardBarPainter());  GroupedStackedBarRenderer renderer=new GroupedStackedBarRenderer();  KeyToGroupMap map=new KeyToGroupMap("G1");  map.mapKeyToGroup("Product 1 (US)","G1");  map.mapKeyToGroup("Product 1 (Europe)","G1");  map.mapKeyToGroup("Product 1 (Asia)","G1");  map.mapKeyToGroup("Product 1 (Middle East)","G1");  map.mapKeyToGroup("Product 2 (US)","G2");  map.mapKeyToGroup("Product 2 (Europe)","G2");  map.mapKeyToGroup("Product 2 (Asia)","G2");  map.mapKeyToGroup("Product 2 (Middle East)","G2");  map.mapKeyToGroup("Product 3 (US)","G3");  map.mapKeyToGroup("Product 3 (Europe)","G3");  map.mapKeyToGroup("Product 3 (Asia)","G3");  map.mapKeyToGroup("Product 3 (Middle East)","G3");  renderer.setSeriesToGroupMap(map);  renderer.setItemMargin(0.0);  Paint p1=new GradientPaint(0.0f,0.0f,new Color(0x22,0x22,0xFF),0.0f,0.0f,new Color(0x88,0x88,0xFF));  renderer.setSeriesPaint(0,p1);  renderer.setSeriesPaint(4,p1);  renderer.setSeriesPaint(8,p1);  Paint p2=new GradientPaint(0.0f,0.0f,new Color(0x22,0xFF,0x22),0.0f,0.0f,new Color(0x88,0xFF,0x88));  renderer.setSeriesPaint(1,p2);  renderer.setSeriesPaint(5,p2);  renderer.setSeriesPaint(9,p2);  Paint p3=new GradientPaint(0.0f,0.0f,new Color(0xFF,0x22,0x22),0.0f,0.0f,new Color(0xFF,0x88,0x88));  renderer.setSeriesPaint(2,p3);  renderer.setSeriesPaint(6,p3);  renderer.setSeriesPaint(10,p3);  Paint p4=new GradientPaint(0.0f,0.0f,new Color(0xFF,0xFF,0x22),0.0f,0.0f,new Color(0xFF,0xFF,0x88));  renderer.setSeriesPaint(3,p4);  renderer.setSeriesPaint(7,p4);  renderer.setSeriesPaint(11,p4);  renderer.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.HORIZONTAL));  SubCategoryAxis domainAxis=new SubCategoryAxis("Product / Month");  domainAxis.setCategoryMargin(0.05);  domainAxis.addSubCategory("Product 1");  domainAxis.addSubCategory("Product 2");  domainAxis.addSubCategory("Product 3");  CategoryPlot plot=(CategoryPlot)chart.getPlot();  plot.setDomainAxis(domainAxis);  plot.setRenderer(renderer);  plot.setFixedLegendItems(createLegendItems());  return chart;}  }
class C{  private boolean checkTrafficConditions(double currentTime,DgExtensionPoint extensionPoint){  int noCars=0;  for (  SignalData signal : extensionPoint.getSignals()) {    if (signal.getLaneIds() == null || signal.getLaneIds().isEmpty()) {      noCars=this.sensorManager.getNumberOfCarsInDistance(signal.getLinkId(),this.sylviaConfig.getSensorDistanceMeter(),currentTime);      if (noCars > 0) {        return true;      }    } else {      for (      Id<Lane> laneId : signal.getLaneIds()) {        noCars=this.sensorManager.getNumberOfCarsOnLane(signal.getLinkId(),laneId);        if (noCars > 0) {          return true;        }      }    }  }  return false;}  }
class C{  public void handleEvent(Event e){  owner.eventOccurred(this,e);}  }
class C{  public static boolean isFeatureTagPresent(SipMessage msg,String featureTag){  for (  String tag : msg.getFeatureTags()) {    if (tag.contains(featureTag)) {      return true;    }  }  return false;}  }
class C{  public boolean allPrimaryShardsActive(){  return primaryShardsActive() == shards().size();}  }
class C{  public TypedRead<K,V> withWatermarkFn2(SerializableFunction<KafkaRecord<K,V>,Instant> watermarkFn){  checkNotNull(watermarkFn);  return new TypedRead<K,V>(topics,topicPartitions,keyCoder,valueCoder,timestampFn,watermarkFn,consumerFactoryFn,consumerConfig,maxNumRecords,maxReadTime);}  }
class C{  void map(String typeName,Map<String,MapField> featureFieldsmapping) throws FieldMappingException {  try {    Type type=cas.getTypeSystem().getType(typeName);    for (FSIterator<FeatureStructure> iterator=cas.getFSIndexRepository().getAllIndexedFS(type); iterator.hasNext(); ) {      FeatureStructure fs=iterator.next();      for (      String featureName : featureFieldsmapping.keySet()) {        MapField mapField=featureFieldsmapping.get(featureName);        String fieldNameFeature=mapField.getFieldNameFeature();        String fieldNameFeatureValue=fieldNameFeature == null ? null : fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));        String fieldName=mapField.getFieldName(fieldNameFeatureValue);        if (log.isInfoEnabled()) {          log.info("mapping {}@{} to {}",new Object[]{typeName,featureName,fieldName});        }        String featureValue;        if (fs instanceof Annotation && "coveredText".equals(featureName)) {          featureValue=((Annotation)fs).getCoveredText();        } else {          featureValue=fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));        }        if (log.isDebugEnabled()) {          log.debug("writing {} in {}",new Object[]{featureValue,fieldName});        }        document.addField(fieldName,featureValue,1.0f);      }    }  } catch (  Exception e) {    throw new FieldMappingException(e);  }}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public void write(int b){  return;}  }
class C{  public static boolean checkLastModValidators(final HttpServletRequest req,final HttpServletResponse resp,final long lastMod){  try {    final long modifiedSince=req.getDateHeader("If-Modified-Since");    if (modifiedSince != -1L && lastMod <= modifiedSince) {      sendNotModified(resp);      return true;    }    final long unmodifiedSince=req.getDateHeader("If-Unmodified-Since");    if (unmodifiedSince != -1L && lastMod > unmodifiedSince) {      sendPreconditionFailed(resp);      return true;    }  } catch (  IllegalArgumentException iae) {  }  return false;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public boolean usesLocalFiles() throws SQLException {  return false;}  }
class C{  private Drawable tileify(Drawable drawable,boolean clip){  if (drawable instanceof LayerDrawable) {    LayerDrawable background=(LayerDrawable)drawable;    final int N=background.getNumberOfLayers();    Drawable[] outDrawables=new Drawable[N];    for (int i=0; i < N; i++) {      int id=background.getId(i);      outDrawables[i]=tileify(background.getDrawable(i),(id == R.id.progress || id == R.id.secondaryProgress));    }    LayerDrawable newBg=new LayerDrawable(outDrawables);    for (int i=0; i < N; i++) {      newBg.setId(i,background.getId(i));    }    return newBg;  } else   if (drawable instanceof StateListDrawable) {    StateListDrawable in=(StateListDrawable)drawable;    StateListDrawable out=new StateListDrawable();    int numStates=in.getStateCount();    for (int i=0; i < numStates; i++) {      out.addState(in.getStateSet(i),tileify(in.getStateDrawable(i),clip));    }    return out;  } else   if (drawable instanceof BitmapDrawable) {    final Bitmap tileBitmap=((BitmapDrawable)drawable).getBitmap();    if (mSampleTile == null) {      mSampleTile=tileBitmap;    }    final ShapeDrawable shapeDrawable=new ShapeDrawable(getDrawableShape());    final BitmapShader bitmapShader=new BitmapShader(tileBitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);    shapeDrawable.getPaint().setShader(bitmapShader);    return (clip) ? new ClipDrawable(shapeDrawable,Gravity.LEFT,ClipDrawable.HORIZONTAL) : shapeDrawable;  }  return drawable;}  }
class C{  public InstanceContentEvent(long index,Instance instance,boolean isTraining,boolean isTesting){  this.instanceContent=new InstanceContent(index,instance,isTraining,isTesting);}  }
class C{  public static Button createPushButton(Composite parent,String label,Image image,int fill){  Button button=new Button(parent,SWT.PUSH);  button.setFont(parent.getFont());  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData(fill);  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  @Override public void remove(Resource subject,IRI predicate,Value object,Resource... contexts) throws RepositoryException {  if (isAllContext(contexts)) {    super.remove(subject,predicate,object,getRemoveContexts());  } else {    super.remove(subject,predicate,object,contexts);  }}  }
class C{  private void killSuperBlock(SuperBlock sb){  int[] locals=new int[0];  int[] stack=new int[]{TypeInfo.OBJECT("java/lang/Throwable",itsConstantPool)};  for (int i=0; i < itsExceptionTableTop; i++) {    ExceptionTableEntry ete=itsExceptionTable[i];    int eteStart=getLabelPC(ete.itsStartLabel);    int eteEnd=getLabelPC(ete.itsEndLabel);    if ((sb.getStart() >= eteStart && sb.getStart() < eteEnd) || (eteStart >= sb.getStart() && eteStart < sb.getEnd())) {      int handlerPC=getLabelPC(ete.itsHandlerLabel);      SuperBlock handlerSB=getSuperBlockFromOffset(handlerPC);      locals=handlerSB.getLocals();      break;    }  }  sb.merge(locals,locals.length,stack,stack.length,itsConstantPool);  int end=sb.getEnd() - 1;  itsCodeBuffer[end]=(byte)ByteCode.ATHROW;  for (int bci=sb.getStart(); bci < end; bci++) {    itsCodeBuffer[bci]=(byte)ByteCode.NOP;  }}  }
class C{  public ContextNotEmptyException(String explanation){  super(explanation);}  }
class C{  public static void adjustMetaAfterKeypress(Spannable content){  adjust(content,CAP);  adjust(content,ALT);  adjust(content,SYM);  try {    IPowerManager power=IPowerManager.Stub.asInterface(ServiceManager.getService("power"));    if (getMetaState(content,META_SHIFT_ON) <= 0)     power.setKeyboardLight(false,1);    if (getMetaState(content,META_ALT_ON) <= 0)     power.setKeyboardLight(false,2);  } catch (  RemoteException doe) {  }}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public void close() throws IOException {  eof=true;  engine.closeInbound();}  }
class C{  public double measureNumLeaves(){  return m_NumLeaves;}  }
class C{  public ArrayList<TernaryTreeNode> prefixCompletion(TernaryTreeNode root,CharSequence s,int x){  TernaryTreeNode p=root;  ArrayList<TernaryTreeNode> suggest=new ArrayList<>();  while (p != null) {    if (s.charAt(x) < p.splitchar) {      p=p.loKid;    } else     if (s.charAt(x) == p.splitchar) {      if (x == s.length() - 1) {        break;      } else {        x++;      }      p=p.eqKid;    } else {      p=p.hiKid;    }  }  if (p == null)   return suggest;  if (p.eqKid == null && p.token == null)   return suggest;  if (p.eqKid == null && p.token != null) {    suggest.add(p);    return suggest;  }  if (p.token != null) {    suggest.add(p);  }  p=p.eqKid;  Stack<TernaryTreeNode> st=new Stack<>();  st.push(p);  while (!st.empty()) {    TernaryTreeNode top=st.peek();    st.pop();    if (top.token != null) {      suggest.add(top);    }    if (top.eqKid != null) {      st.push(top.eqKid);    }    if (top.loKid != null) {      st.push(top.loKid);    }    if (top.hiKid != null) {      st.push(top.hiKid);    }  }  return suggest;}  }
class C{  public OutputDeviceAssigned(String deviceName,Locale locale){  super(deviceName,locale);}  }
class C{  public boolean hasTimes(){  return super.hasElement(When.KEY);}  }
class C{  public boolean eventGeneratable(EventSetDescriptor esd){  String eventName=esd.getName();  return eventGeneratable(eventName);}  }
class C{  public ModelTransformerFactory(final WroModelFactory decorated){  super(decorated);}  }
class C{  protected void removeEntry(CacheEntry entry){  if (this.entries.remove(entry.key) != null) {    this.currentUsedCapacity.addAndGet(-entry.clientObjectSize);    for (    MemoryCache.CacheListener listener : this.listeners) {      try {        listener.entryRemoved(entry.key,entry.clientObject);      } catch (      Exception e) {        listener.removalException(e,entry.key,entry.clientObject);      }    }  }}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder("[");  ArrayList<String> c=new ArrayList<>();  for (IndexTreePath<E> p=this; p != null; p=p.getParentPath()) {    c.add("@" + index + ":"+ entry.toString());  }  for (int counter=c.size() - 1; counter >= 0; --counter) {    buffer.append(c.get(counter));    if (counter > 0) {      buffer.append(", ");    }  }  buffer.append("]");  return buffer.toString();}  }
class C{  public ToastBuilder message(@StringRes int messageResId){  this.message=context.getString(messageResId);  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocument02.class,args);}  }
class C{  public static IJavaSearchScope create(IJavaElement javaElement,boolean considerVisibility,boolean sourceReferencesOnly) throws JavaModelException {  if (considerVisibility & javaElement instanceof IMember) {    IMember member=(IMember)javaElement;    if (JdtFlags.isPrivate(member)) {      if (member.getCompilationUnit() != null)       return SearchEngine.createJavaSearchScope(new IJavaElement[]{member.getCompilationUnit()}); else       return SearchEngine.createJavaSearchScope(new IJavaElement[]{member});    }  }  IJavaProject javaProject=javaElement.getJavaProject();  return SearchEngine.createJavaSearchScope(getAllScopeElements(javaProject,sourceReferencesOnly),false);}  }
class C{  private static List<String> calculateLocalizedFilenames(String baseName,String extensionWithDot,Locale locale){  List<String> names=new ArrayList<String>();  String language=locale.getLanguage();  String country=locale.getCountry();  String variant=locale.getVariant();  names.add(baseName + extensionWithDot);  if (language.length() + country.length() + variant.length() == 0) {    return names;  }  final StringBuilder temp=new StringBuilder(baseName);  temp.append('_');  temp.append(language);  if (language.length() > 0) {    names.add(temp.toString() + extensionWithDot);  }  if (country.length() + variant.length() == 0) {    return names;  }  temp.append('_');  temp.append(country);  if (country.length() > 0) {    names.add(temp.toString() + extensionWithDot);  }  if (variant.length() == 0) {    return names;  }  temp.append('_');  temp.append(variant);  names.add(temp.toString() + extensionWithDot);  return names;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,boolean has_order,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);  this.m_order=order;  this.m_multiAllowed=multiAllowed;  this.m_isOrdered=has_order;}  }
class C{  public static void growPolygon(float pts[],int len,float amt){  float[] c=centroid(pts,len);  for (int i=0; i < len; i+=2) {    float vx=pts[i] - c[0];    float vy=pts[i + 1] - c[1];    float norm=(float)Math.sqrt(vx * vx + vy * vy);    pts[i]+=amt * vx / norm;    pts[i + 1]+=amt * vy / norm;  }}  }
class C{  public void testSetF17Momentary(){  boolean f17Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF17Momentary(f17Momentary);}  }
class C{  public TypeTokenFilterFactory(Map<String,String> args){  super(args);  stopTypesFiles=require(args,"types");  useWhitelist=getBoolean(args,"useWhitelist",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static Map<String,Object> createAffiliate(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=getPartyId(context);  if (UtilValidate.isNotEmpty(partyId) && partyId.matches("\\d+")) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_digit",locale));  }  if (UtilValidate.isEmpty(partyId)) {    try {      partyId=delegator.getNextSeqId("Party");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_generation_failure",locale));    }  }  GenericValue party=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_no_party_entity",locale));  }  GenericValue affiliate=null;  try {    affiliate=EntityQuery.use(delegator).from("Affiliate").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (affiliate != null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_ID_already_exists",locale));  }  affiliate=delegator.makeValue("Affiliate",UtilMisc.toMap("partyId",partyId));  affiliate.setNonPKFields(context);  affiliate.set("dateTimeCreated",now,false);  try {    delegator.create(affiliate);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_add_affiliate_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("partyId",partyId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  public boolean isSynthetic(){  return false;}  }
class C{  private WebResourceStatistics computeAuditStatisticsFromDb(WebResourceStatistics wrStatistics){  int nbOfPassed=webResourceStatisticsDataService.getResultCountByResultType(webResource.getId(),TestSolution.PASSED).intValue();  int nbOfFailed=webResourceStatisticsDataService.getResultCountByResultType(webResource.getId(),TestSolution.FAILED).intValue();  int nbOfNmi=webResourceStatisticsDataService.getResultCountByResultType(webResource.getId(),TestSolution.NEED_MORE_INFO).intValue();  int nbOfNa=webResourceStatisticsDataService.getResultCountByResultType(webResource.getId(),TestSolution.NOT_APPLICABLE).intValue();  int nbOfDetected=webResourceStatisticsDataService.getResultCountByResultType(webResource.getId(),TestSolution.DETECTED).intValue();  int nbOfSuspected=webResourceStatisticsDataService.getResultCountByResultType(webResource.getId(),TestSolution.SUSPECTED_FAILED).intValue() + webResourceStatisticsDataService.getResultCountByResultType(webResource.getId(),TestSolution.SUSPECTED_PASSED).intValue();  if (nbOfFailed + nbOfNa + nbOfNmi+ nbOfPassed+ nbOfDetected+ nbOfSuspected == 0) {    nbOfFailed=nbOfNa=nbOfNmi=nbOfPassed=nbOfSuspected=nbOfDetected=-1;  }  wrStatistics.setNbOfFailed(nbOfFailed);  wrStatistics.setNbOfInvalidTest(nbOfFailed);  wrStatistics.setNbOfPassed(nbOfPassed);  wrStatistics.setNbOfNmi(nbOfNmi);  wrStatistics.setNbOfNa(nbOfNa);  wrStatistics.setNbOfDetected(nbOfDetected);  wrStatistics.setNbOfSuspected(nbOfSuspected);  wrStatistics.setNbOfNotTested(testSet.size() * nbOfWr - nbOfDetected - nbOfSuspected - nbOfFailed - nbOfNa - nbOfNmi - nbOfPassed);  setWeightedResult(wrStatistics);  wrStatistics.setAudit(audit);  return wrStatistics;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public void deleteStoredToken(){  SharedPreferences.Editor prefsEditor=getSharedPreferences().edit();  prefsEditor.remove(TOKEN_KEY);  prefsEditor.remove(TOKEN_TYPE_KEY);  prefsEditor.remove(ENTITLEMENT_CREDENTIALS_KEY);  prefsEditor.apply();}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == m_HostField) {    ((DefaultListModel)m_List.getModel()).addElement(m_HostField.getText());    m_DeleteBut.setEnabled(true);  } else   if (e.getSource() == m_DeleteBut) {    int[] selected=m_List.getSelectedIndices();    if (selected != null) {      for (int i=selected.length - 1; i >= 0; i--) {        int current=selected[i];        ((DefaultListModel)m_List.getModel()).removeElementAt(current);        if (((DefaultListModel)m_List.getModel()).size() > current) {          m_List.setSelectedIndex(current);        } else {          m_List.setSelectedIndex(current - 1);        }      }    }    if (((DefaultListModel)m_List.getModel()).size() == 0) {      m_DeleteBut.setEnabled(false);    }  }}  }
class C{  public Path createClasspath(){  if (compileClasspath == null) {    compileClasspath=new Path(getProject());  }  return compileClasspath.createPath();}  }
class C{  public void paintFormattedTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:01.811 -0500",hash_original_method="1CCCB741740FE2D73909FD97A8BDB662",hash_generated_method="FDF998D8D13F7B931F0040281BA3C263") public final void init(KeyStore ks) throws KeyStoreException {  spiImpl.engineInit(ks);}  }
class C{  public AbstractPersistentConcurrentOffHeapCache(Factory<? extends PinnableSegment<K,V>> segmentFactory,int concurrency){  super(segmentFactory,concurrency);}  }
class C{  public boolean isFullyConfirmed(){  return getTargetQty().compareTo(getConfirmedQty()) == 0;}  }
class C{  public static void showToast(Context context,String message,int duration,boolean inDebugOnly){  if (duration != Toast.LENGTH_SHORT && duration != Toast.LENGTH_LONG) {    duration=Toast.LENGTH_SHORT;  }  if (message != null) {    if (inDebugOnly && isDebug()) {      Toast.makeText(context,message,duration).show();    } else     if (!inDebugOnly) {      Toast.makeText(context,message,duration).show();    }  }}  }
class C{  public Pair<A,B> newPair(A a,B b){  if (a.equals(outputs1.getNoOutput())) {    a=outputs1.getNoOutput();  }  if (b.equals(outputs2.getNoOutput())) {    b=outputs2.getNoOutput();  }  if (a == outputs1.getNoOutput() && b == outputs2.getNoOutput()) {    return NO_OUTPUT;  } else {    final Pair<A,B> p=new Pair<>(a,b);    assert valid(p);    return p;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnomodificationallowederr.class,args);}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  @Override synchronized public void reset(Date startDate){  init(startDate,this.counter.getType());}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public Statement eliminate(Environment env,Statement s){  if ((s != null) && (labels != null)) {    Statement args[]={s};    s=new CompoundStatement(where,args);    s.labels=labels;  }  return s;}  }
class C{  public boolean isDeclaredCovariantConstructor(){  return declaredCovariantConstructor;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=para[i].getParameterAsInt(); else     if (name.equals("M_Product_Category_ID"))     p_M_Product_Category_ID=para[i].getParameterAsInt(); else     if (name.equals("SetFutureCostTo"))     p_SetFutureCostTo=(String)para[i].getParameter(); else     if (name.equals("M_PriceList_Version_ID"))     p_M_PriceList_Version_ID=para[i].getParameterAsInt(); else     if (name.equals("SetStandardCost"))     p_SetStandardCost=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_Record_ID=getRecord_ID();}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String aggregationType="mean";  int aggregationFactor=2;  int progress, oldProgress;  int rIn, cIn, rOut, cOut, r, c;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  aggregationFactor=Integer.parseInt(args[2]);  aggregationType=args[3].toLowerCase();  if (inputHeader.isEmpty() || outputHeader.isEmpty() || aggregationType.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (aggregationFactor < 2) {    aggregationFactor=2;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    double nodata=input.getNoDataValue();    int nColsIn=input.getNumberColumns();    int nRowsIn=input.getNumberRows();    int nColsOut=(int)((double)nColsIn / aggregationFactor);    int nRowsOut=(int)((double)nRowsIn / aggregationFactor);    double north=input.getNorth();    double south=north - (input.getCellSizeY() * aggregationFactor * nRowsOut);    double west=input.getWest();    double east=west + (input.getCellSizeX() * aggregationFactor * nColsOut);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,north,south,east,west,nRowsOut,nColsOut,input.getDataScale(),input.getDataType(),0,nodata);    output.setPreferredPalette(input.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    if (aggregationType.equals("mean")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            stat=stat / count;            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.equals("sum")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("max")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value > stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("min")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.POSITIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("range")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double min=Double.POSITIVE_INFINITY;          double max=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < min) {                  min=value;                }                if (value > max) {                  max=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,(max - min));          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    }    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static EditShareFragment newInstance(OCShare shareToEdit,OCFile sharedFile,Account account){  EditShareFragment fragment=new EditShareFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_SHARE,shareToEdit);  args.putParcelable(ARG_FILE,sharedFile);  args.putParcelable(ARG_ACCOUNT,account);  fragment.setArguments(args);  return fragment;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public boolean isIn(Vector2 point){  return (point.x > this.min.x && point.x < this.max.x) && (point.y > this.min.y && point.y < this.max.y);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.583 -0500",hash_original_method="84A25E65A73DED1248F34FD8C53BD2A1",hash_generated_method="412AEC39F7625D9BD34A4DF4F1D28F5C") public SAXNotRecognizedException(String message){  super(message);}  }
class C{  public void scanJarFile(){  fileCombo.removeAllItems();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".plots-gsci"))       fileCombo.addItem(nameOfEntry);      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void testToString(){  SecretKey sk=new tmpSecretKey();  KeyStore.SecretKeyEntry ske=new KeyStore.SecretKeyEntry(sk);  assertNotNull("toString() returns null string",ske.toString());}  }
class C{  public final TTEntry probe(long key){  int idx0=h0(key);  TTEntry ent=table[idx0];  if (ent.key == key) {    ent.generation=(byte)generation;    return ent;  }  int idx1=h1(key);  ent=table[idx1];  if (ent.key == key) {    ent.generation=(byte)generation;    return ent;  }  return emptySlot;}  }
class C{  public User(int contextId,String name){  super();  this.id=ID_SOURCE++;  this.contextId=contextId;  this.name=name;}  }
class C{  public void addListener(final IFilterFieldListener listener){  m_listeners.addListener(listener);}  }
class C{  public void appendData(ParsableByteArray buffer,int length){  while (length > 0) {    int thisAppendLength=prepareForAppend(length);    buffer.readBytes(lastAllocation.data,lastAllocation.translateOffset(lastAllocationOffset),thisAppendLength);    lastAllocationOffset+=thisAppendLength;    totalBytesWritten+=thisAppendLength;    length-=thisAppendLength;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.125 -0400",hash_original_method="17F38949B7A4A56647BD97EEE6C9AAD8",hash_generated_method="CC32EABA9B6FF3719BCE49104F003BF5") @Override public View onCreateView(String name,Context context,AttributeSet attrs){  if (!"fragment".equals(name)) {    return super.onCreateView(name,context,attrs);  }  String fname=attrs.getAttributeValue(null,"class");  TypedArray a=context.obtainStyledAttributes(attrs,FragmentTag.Fragment);  if (fname == null) {    fname=a.getString(FragmentTag.Fragment_name);  }  int id=a.getResourceId(FragmentTag.Fragment_id,View.NO_ID);  String tag=a.getString(FragmentTag.Fragment_tag);  a.recycle();  if (!Fragment.isSupportFragmentClass(this,fname)) {    return super.onCreateView(name,context,attrs);  }  View parent=null;  int containerId=parent != null ? parent.getId() : 0;  if (containerId == View.NO_ID && id == View.NO_ID && tag == null) {    throw new IllegalArgumentException(attrs.getPositionDescription() + ": Must specify unique android:id, android:tag, or have a parent with an id for " + fname);  }  Fragment fragment=id != View.NO_ID ? mFragments.findFragmentById(id) : null;  if (fragment == null && tag != null) {    fragment=mFragments.findFragmentByTag(tag);  }  if (fragment == null && containerId != View.NO_ID) {    fragment=mFragments.findFragmentById(containerId);  }  if (FragmentManagerImpl.DEBUG)   Log.v(TAG,"onCreateView: id=0x" + Integer.toHexString(id) + " fname="+ fname+ " existing="+ fragment);  if (fragment == null) {    fragment=Fragment.instantiate(this,fname);    fragment.mFromLayout=true;    fragment.mFragmentId=id != 0 ? id : containerId;    fragment.mContainerId=containerId;    fragment.mTag=tag;    fragment.mInLayout=true;    fragment.mFragmentManager=mFragments;    fragment.onInflate(this,attrs,fragment.mSavedFragmentState);    mFragments.addFragment(fragment,true);  } else   if (fragment.mInLayout) {    throw new IllegalArgumentException(attrs.getPositionDescription() + ": Duplicate id 0x" + Integer.toHexString(id)+ ", tag "+ tag+ ", or parent id 0x"+ Integer.toHexString(containerId)+ " with another fragment for "+ fname);  } else {    fragment.mInLayout=true;    if (!fragment.mRetaining) {      fragment.onInflate(this,attrs,fragment.mSavedFragmentState);    }    mFragments.moveToState(fragment);  }  if (fragment.mView == null) {    throw new IllegalStateException("Fragment " + fname + " did not create a view.");  }  if (id != 0) {    fragment.mView.setId(id);  }  if (fragment.mView.getTag() == null) {    fragment.mView.setTag(tag);  }  return fragment.mView;}  }
class C{  public void testResourceSupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{ResourcePropertySet.RESOURCE}));  configuration.getResources().add(ConfigurationFixtureFactory.createXADataSourceAsResource().buildResource());  configuration.collectUnsupportedResourcesAndThrowException();  assertEquals(1,configuration.getResources().size());}  }
class C{  public T acceptCharset(String value){  return attr("accept-charset",value);}  }
class C{  public Response addOwner(String roomName,String jid){  return restClient.post("chatrooms/" + roomName + "/owners/"+ jid,null,new HashMap<String,String>());}  }
class C{  public static double calculateGiniCoefficient(List<Double> valueList){  int numberOfValues=valueList.size();  double sumOfValues=calculateSum(valueList);  double arithmeticMean=sumOfValues / numberOfValues;  double sumOfAbsoluteDifferences=0.;  for (  double i : valueList) {    for (    double j : valueList) {      double absoulteDifference=Math.abs(i - j);      sumOfAbsoluteDifferences=sumOfAbsoluteDifferences + absoulteDifference;    }  }  double giniCoefficient=sumOfAbsoluteDifferences / (2 * Math.pow(numberOfValues,2) * arithmeticMean);  return giniCoefficient;}  }
class C{  public void start(@NonNull Activity activity){  start(activity,REQUEST_CROP);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void addConnection(Connection connection){  if (connection == null)   throw new IllegalArgumentException("connection cannot be null.");synchronized (connectionsLock) {    Connection[] newConnections=new Connection[connections.length + 1];    newConnections[0]=connection;    System.arraycopy(connections,0,newConnections,1,connections.length);    connections=newConnections;  }  connection.addListener(invokeListener);  if (TRACE)   trace("kryonet","Added connection to ObjectSpace: " + connection);}  }
class C{  @Override public int showDialog(Component parent,String approveButtonText){  if (m_DialogType == UNHANDLED_DIALOG) {    throw new IllegalStateException("Either use showOpenDialog or showSaveDialog!");  } else {    return super.showDialog(parent,approveButtonText);  }}  }
class C{  public StringMapper caseSensitive(Boolean caseSensitive){  this.caseSensitive=caseSensitive;  return this;}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_ResultProducer instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_ResultProducer).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.addElement(mname);    }  }  return newVector.elements();}  }
class C{  @SuppressWarnings("unchecked") @Override public <V extends Vertex>TObjectDoubleHashMap<V> localClusteringCoefficients(Collection<V> vertices){  return (TObjectDoubleHashMap<V>)super.localClusteringCoefficients(SnowballPartitions.<SampledVertex>createSampledPartition((Collection<SampledVertex>)vertices));}  }
class C{  void advance(double realDeltaTime){  boolean isAtRest=isAtRest();  if (isAtRest && mWasAtRest) {    return;  }  double adjustedDeltaTime=realDeltaTime;  if (realDeltaTime > MAX_DELTA_TIME_SEC) {    adjustedDeltaTime=MAX_DELTA_TIME_SEC;  }  mTimeAccumulator+=adjustedDeltaTime;  double tension=mSpringConfig.tension;  double friction=mSpringConfig.friction;  double position=mCurrentState.position;  double velocity=mCurrentState.velocity;  double tempPosition=mTempState.position;  double tempVelocity=mTempState.velocity;  double aVelocity, aAcceleration;  double bVelocity, bAcceleration;  double cVelocity, cAcceleration;  double dVelocity, dAcceleration;  double dxdt, dvdt;  while (mTimeAccumulator >= SOLVER_TIMESTEP_SEC) {    mTimeAccumulator-=SOLVER_TIMESTEP_SEC;    if (mTimeAccumulator < SOLVER_TIMESTEP_SEC) {      mPreviousState.position=position;      mPreviousState.velocity=velocity;    }    aVelocity=velocity;    aAcceleration=(tension * (mEndValue - tempPosition)) - friction * velocity;    tempPosition=position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    bVelocity=tempVelocity;    bAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    cVelocity=tempVelocity;    cAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + cVelocity * SOLVER_TIMESTEP_SEC;    tempVelocity=velocity + cAcceleration * SOLVER_TIMESTEP_SEC;    dVelocity=tempVelocity;    dAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    dxdt=1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);    dvdt=1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);    position+=dxdt * SOLVER_TIMESTEP_SEC;    velocity+=dvdt * SOLVER_TIMESTEP_SEC;  }  mTempState.position=tempPosition;  mTempState.velocity=tempVelocity;  mCurrentState.position=position;  mCurrentState.velocity=velocity;  if (mTimeAccumulator > 0) {    interpolate(mTimeAccumulator / SOLVER_TIMESTEP_SEC);  }  if (isAtRest() || (mOvershootClampingEnabled && isOvershooting())) {    mStartValue=mEndValue;    mCurrentState.position=mEndValue;    setVelocity(0);    isAtRest=true;  }  boolean notifyActivate=false;  if (mWasAtRest) {    mWasAtRest=false;    notifyActivate=true;  }  boolean notifyAtRest=false;  if (isAtRest) {    mWasAtRest=true;    notifyAtRest=true;  }  for (  SpringListener listener : mListeners) {    if (notifyActivate) {      listener.onSpringActivate(this);    }    listener.onSpringUpdate(this);    if (notifyAtRest) {      listener.onSpringAtRest(this);    }  }}  }
class C{  private boolean handleLaunchMode(FragmentManager fragmentManager,SupportFragment toragment,int launchMode){  SupportFragment topFragment=getTopFragment(fragmentManager);  if (topFragment == null)   return false;  Fragment stackToFragment=findStackFragment(toragment.getClass(),fragmentManager,false);  if (stackToFragment == null)   return false;  if (launchMode == SupportFragment.SINGLETOP) {    if (toragment == topFragment || toragment.getClass().getName().equals(topFragment.getClass().getName())) {      handleNewBundle(toragment,stackToFragment);      return true;    }  } else   if (launchMode == SupportFragment.SINGLETASK) {    popToFix(toragment.getClass(),0,fragmentManager);    handleNewBundle(toragment,stackToFragment);    return true;  }  return false;}  }
class C{  @Override public Object pop(){  this.callStack.pop();  return super.pop();}  }
class C{  public synchronized int read() throws IOException {  ensureOpen();  if (chunkPos >= chunkCount) {    if (readAhead(true) <= 0) {      return -1;    }  }  return chunkData[chunkPos++] & 0xff;}  }
class C{  public Vector3 slerp(Vector3 target,float alpha){  float dot=dot(target);  if (dot > 0.99995 || dot < 0.9995) {    this.add(target.tmp().sub(this).mul(alpha));    this.nor();    return this;  }  if (dot > 1)   dot=1;  if (dot < -1)   dot=-1;  float theta0=(float)Math.acos(dot);  float theta=theta0 * alpha;  Vector3 v2=target.tmp().sub(x * dot,y * dot,z * dot);  v2.nor();  return this.mul((float)Math.cos(theta)).add(v2.mul((float)Math.sin(theta))).nor();}  }
class C{  private <H,L>void store(H hashed,L listed,Map<H,LinkedHashSet<L>> map){  LinkedHashSet<L> list=map.get(hashed);  if (list == null) {    list=new LinkedHashSet<>(1);    map.put(hashed,list);  }  if (!list.contains(listed)) {    list.add(listed);  }}  }
class C{  public static int length(final String str){  return str == null ? 0 : str.length();}  }
class C{  private static String H(String data){  try {    MessageDigest digest=MessageDigest.getInstance("MD5");    return toHexString(digest.digest(data.getBytes()));  } catch (  NoSuchAlgorithmException ex) {    throw new RuntimeException("Failed to instantiate an MD5 algorithm",ex);  }}  }
class C{  public ImFactoryImpl(){  super();}  }
class C{  public static List<URI> uris(Collection<String> values){  List<URI> results=new ArrayList<URI>();  if (values != null) {    for (    String value : values) {      URI uri=uri(value);      if (uri != null) {        results.add(uri);      }    }  }  return results;}  }
class C{  public VecBufferSequence(VecBuffer buffer){  this(buffer,DEFAULT_INITIAL_CAPACITY);}  }
class C{  static void clearInstanceCache(){synchronized (INSTANCE_CACHE) {    INSTANCE_CACHE.clear();  }}  }
class C{  public void startEdit(){  newContents=new CustomElementCollection();  if (originalEntry != null) {    newContents.replaceWithLocal(originalEntry.getCustomElements());  }}  }
class C{  static <T>List<T> cast(Iterable<T> iterable){  return (List<T>)iterable;}  }
class C{  public void makePanes(Element root,RosterEntry r){  Element base;  if ((base=root.getChild("programmer")) == null) {    log.error("xml file top element is not programmer");    return;  }  List<Element> paneList=base.getChildren("pane");  if (log.isDebugEnabled()) {    log.debug("will process " + paneList.size() + " pane definitions");  }  for (  Element e : paneList) {    String name=e.getAttribute("name").getValue();    newPane(name,e,modelElem,r);  }}  }
class C{  @Override public Object accept(Visitor v){  return v.visit(this);}  }
class C{  @Override protected void addAxiomStatements() throws SailException {  logger.debug("Inserting axiom statements");  addInferredStatement(RDF.TYPE,RDF.TYPE,RDF.PROPERTY);  addInferredStatement(RDF.SUBJECT,RDF.TYPE,RDF.PROPERTY);  addInferredStatement(RDF.PREDICATE,RDF.TYPE,RDF.PROPERTY);  addInferredStatement(RDF.OBJECT,RDF.TYPE,RDF.PROPERTY);  addInferredStatement(RDF.FIRST,RDF.TYPE,RDF.PROPERTY);  addInferredStatement(RDF.REST,RDF.TYPE,RDF.PROPERTY);  addInferredStatement(RDF.VALUE,RDF.TYPE,RDF.PROPERTY);  addInferredStatement(RDF.NIL,RDF.TYPE,RDF.LIST);  addInferredStatement(RDF.TYPE,RDFS.DOMAIN,RDFS.RESOURCE);  addInferredStatement(RDFS.DOMAIN,RDFS.DOMAIN,RDF.PROPERTY);  addInferredStatement(RDFS.RANGE,RDFS.DOMAIN,RDF.PROPERTY);  addInferredStatement(RDFS.SUBPROPERTYOF,RDFS.DOMAIN,RDF.PROPERTY);  addInferredStatement(RDFS.SUBCLASSOF,RDFS.DOMAIN,RDFS.CLASS);  addInferredStatement(RDF.SUBJECT,RDFS.DOMAIN,RDF.STATEMENT);  addInferredStatement(RDF.PREDICATE,RDFS.DOMAIN,RDF.STATEMENT);  addInferredStatement(RDF.OBJECT,RDFS.DOMAIN,RDF.STATEMENT);  addInferredStatement(RDFS.MEMBER,RDFS.DOMAIN,RDFS.RESOURCE);  addInferredStatement(RDF.FIRST,RDFS.DOMAIN,RDF.LIST);  addInferredStatement(RDF.REST,RDFS.DOMAIN,RDF.LIST);  addInferredStatement(RDFS.SEEALSO,RDFS.DOMAIN,RDFS.RESOURCE);  addInferredStatement(RDFS.ISDEFINEDBY,RDFS.DOMAIN,RDFS.RESOURCE);  addInferredStatement(RDFS.COMMENT,RDFS.DOMAIN,RDFS.RESOURCE);  addInferredStatement(RDFS.LABEL,RDFS.DOMAIN,RDFS.RESOURCE);  addInferredStatement(RDF.VALUE,RDFS.DOMAIN,RDFS.RESOURCE);  addInferredStatement(RDF.TYPE,RDFS.RANGE,RDFS.CLASS);  addInferredStatement(RDFS.DOMAIN,RDFS.RANGE,RDFS.CLASS);  addInferredStatement(RDFS.RANGE,RDFS.RANGE,RDFS.CLASS);  addInferredStatement(RDFS.SUBPROPERTYOF,RDFS.RANGE,RDF.PROPERTY);  addInferredStatement(RDFS.SUBCLASSOF,RDFS.RANGE,RDFS.CLASS);  addInferredStatement(RDF.SUBJECT,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDF.PREDICATE,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDF.OBJECT,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDFS.MEMBER,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDF.FIRST,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDF.REST,RDFS.RANGE,RDF.LIST);  addInferredStatement(RDFS.SEEALSO,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDFS.ISDEFINEDBY,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDFS.COMMENT,RDFS.RANGE,RDFS.LITERAL);  addInferredStatement(RDFS.LABEL,RDFS.RANGE,RDFS.LITERAL);  addInferredStatement(RDF.VALUE,RDFS.RANGE,RDFS.RESOURCE);  addInferredStatement(RDF.ALT,RDFS.SUBCLASSOF,RDFS.CONTAINER);  addInferredStatement(RDF.BAG,RDFS.SUBCLASSOF,RDFS.CONTAINER);  addInferredStatement(RDF.SEQ,RDFS.SUBCLASSOF,RDFS.CONTAINER);  addInferredStatement(RDFS.CONTAINERMEMBERSHIPPROPERTY,RDFS.SUBCLASSOF,RDF.PROPERTY);  addInferredStatement(RDFS.ISDEFINEDBY,RDFS.SUBPROPERTYOF,RDFS.SEEALSO);  addInferredStatement(RDF.XMLLITERAL,RDF.TYPE,RDFS.DATATYPE);  addInferredStatement(RDF.XMLLITERAL,RDFS.SUBCLASSOF,RDFS.LITERAL);  addInferredStatement(RDFS.DATATYPE,RDFS.SUBCLASSOF,RDFS.CLASS);}  }
class C{  public static <E extends Throwable>E withCause(E e,@Nullable Throwable cause){  assert e != null;  if (cause != null)   e.initCause(cause);  return e;}  }
class C{  public boolean isUpdate(){  return (titleID & 0x5000E00000000L) == 0x5000E00000000L;}  }
class C{  private SnmpPduPacket makeGetBulkResponsePdu(SnmpPduBulk req,Object userData){  SnmpVarBind[] respVarBindList;  int L=req.varBindList.length;  int N=Math.max(Math.min(req.nonRepeaters,L),0);  int M=Math.max(req.maxRepetitions,0);  int R=L - N;  if (req.varBindList == null) {    return newValidResponsePdu(req,null);  }  splitBulkRequest(req,N,M,R);  SnmpPduPacket result=executeSubRequest(req,userData);  if (result != null)   return result;  respVarBindList=mergeBulkResponses(N + (M * R));  int m2;  int t=respVarBindList.length;  while ((t > N) && (respVarBindList[t - 1].value.equals(SnmpVarBind.endOfMibView))) {    t--;  }  if (t == N)   m2=N + R; else   m2=N + ((t - 1 - N) / R + 2) * R;  if (m2 < respVarBindList.length) {    SnmpVarBind[] truncatedList=new SnmpVarBind[m2];    for (int i=0; i < m2; i++) {      truncatedList[i]=respVarBindList[i];    }    respVarBindList=truncatedList;  }  return newValidResponsePdu(req,respVarBindList);}  }
class C{  public void printTables(final String description) throws IOException {  System.out.println("-- start printTables() -- " + description);  System.out.println("Reading : " + tIndexer.getCollection().getFullName());  final DBCursor cursor=tIndexer.getCollection().find();  while (cursor.hasNext()) {    final DBObject dbo=cursor.next();    System.out.println(dbo.toString());  }  System.out.println();}  }
class C{  private void dispose(){synchronized (InputContextCallback.class) {    if (sInstance == null) {      mTextAfterCursor=null;      mTextBeforeCursor=null;      mExtractedText=null;      sInstance=this;    }  }}  }
class C{  public static void deployJarsReceivedFromClusterConfiguration(Cache cache,ConfigurationResponse response) throws IOException, ClassNotFoundException {  if (response == null)   return;  String[] jarFileNames=response.getJarNames();  byte[][] jarBytes=response.getJars();  final JarDeployer jarDeployer=new JarDeployer(((GemFireCacheImpl)cache).getDistributedSystem().getConfig().getDeployWorkingDir());  if (jarFileNames != null && jarBytes != null) {    JarClassLoader[] jarClassLoaders=jarDeployer.deploy(jarFileNames,jarBytes);    for (int i=0; i < jarFileNames.length; i++) {      if (jarClassLoaders[i] != null) {        logger.info("Deployed " + (jarClassLoaders[i].getFileCanonicalPath()));      }    }  }}  }
class C{  public boolean isParamValue(){  return (kind & PARAM) != 0;}  }
class C{  public NoteComment(Note note,String text,String nickname,int uid,String action,Date timestamp){  this.note=note;  this.text=text.replaceAll("\\[","");  this.nickname=nickname.replaceAll(",","");  this.uid=uid;  this.action=action;  this.timestamp=timestamp;}  }
class C{  private void handleOnButtonClick(int idx,boolean action){  listener.onButtonClick(idx,action);}  }
class C{  public CTaggedGraphNodeNode(final ZyGraph graph,final NaviNode node){  super(0,graph);  m_node=Preconditions.checkNotNull(node,"IE01799: Node can't be null.");}  }
class C{  protected static void initializeImageRegistry(){  imageRegistry=AngularCLIPlugin.getDefault().getImageRegistry();  imageDescriptors=new HashMap<String,ImageDescriptor>();  registerImage(IMG_ANGULAR2,URL_OBJ + IMG_ANGULAR2 + ".png");  registerImage(IMG_SERVICE,URL_OBJ + IMG_SERVICE + ".png");  registerImage(IMG_NG_SERVE,URL_OBJ + IMG_NG_SERVE + ".gif");  registerImage(IMG_NG_BUILD,URL_OBJ + IMG_NG_BUILD + ".gif");  registerImage(IMG_NG_TEST,URL_OBJ + IMG_NG_TEST + ".png");  registerImage(IMG_NG_E2E,URL_OBJ + IMG_NG_E2E + ".png");}  }
class C{  public static boolean containsOnlyWhitespaces(final char[] chars,final int start,final int length){  final String string=new String(chars,start,length);  final int stringLength=string.length();  for (int index=0; index < stringLength; index++) {    final char character=string.charAt(index);    if (character >= 0x21 && character <= 0x7E) {      return false;    }  }  return true;}  }
class C{  public Address prepareAddress(){  return loadAddress();}  }
class C{  protected ActionMap createActionMap(){  ActionMap map=super.createActionMap();  map.put("save",new EditorActions.SaveAction(false));  map.put("saveAs",new EditorActions.SaveAction(true));  map.put("new",new EditorActions.NewAction());  map.put("open",new EditorActions.OpenAction());  map.put("undo",new EditorActions.HistoryAction(true));  map.put("redo",new EditorActions.HistoryAction(false));  map.put("selectVertices",mxGraphActions.getSelectVerticesAction());  map.put("selectEdges",mxGraphActions.getSelectEdgesAction());  return map;}  }
class C{  public Object eval(String expr){synchronized (this) {    rRequestObject=new Request("eval",expr,null);    return request();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.091 -0400",hash_original_method="9E0DA735A7E1F6A8C723ADDD316FAC17",hash_generated_method="22C3FB5BAC04C1EA364CFD4C5737B43F") private String createDigestResponse(byte[] challenge) throws SaslException {  char[] response;  StringBuffer digestResponse=new StringBuffer(512);  int realmSize;  m_dc=new DigestChallenge(challenge);  m_digestURI=m_protocol + "/" + m_serverName;  if ((m_dc.getQop() & DigestChallenge.QOP_AUTH) == DigestChallenge.QOP_AUTH)   m_qopValue="auth"; else   throw new SaslException("Client only supports qop of 'auth'");  Callback[] callbacks=new Callback[3];  ArrayList realms=m_dc.getRealms();  realmSize=realms.size();  if (realmSize == 0) {    callbacks[0]=new RealmCallback("Realm");  } else   if (realmSize == 1) {    callbacks[0]=new RealmCallback("Realm",(String)realms.get(0));  } else {    callbacks[0]=new RealmChoiceCallback("Realm",(String[])realms.toArray(new String[realmSize]),0,false);  }  callbacks[1]=new PasswordCallback("Password",false);  if (m_authorizationId == null || m_authorizationId.length() == 0)   callbacks[2]=new NameCallback("Name"); else   callbacks[2]=new NameCallback("Name",m_authorizationId);  try {    m_cbh.handle(callbacks);  } catch (  UnsupportedCallbackException e) {    throw new SaslException("Handler does not support" + " necessary callbacks",e);  }catch (  IOException e) {    throw new SaslException("IO exception in CallbackHandler.",e);  }  if (realmSize > 1) {    int[] selections=((RealmChoiceCallback)callbacks[0]).getSelectedIndexes();    if (selections.length > 0)     m_realm=((RealmChoiceCallback)callbacks[0]).getChoices()[selections[0]]; else     m_realm=((RealmChoiceCallback)callbacks[0]).getChoices()[0];  } else   m_realm=((RealmCallback)callbacks[0]).getText();  m_clientNonce=getClientNonce();  m_name=((NameCallback)callbacks[2]).getName();  if (m_name == null)   m_name=((NameCallback)callbacks[2]).getDefaultName();  if (m_name == null)   throw new SaslException("No user name was specified.");  m_HA1=DigestCalcHA1(m_dc.getAlgorithm(),m_name,m_realm,new String(((PasswordCallback)callbacks[1]).getPassword()),m_dc.getNonce(),m_clientNonce);  response=DigestCalcResponse(m_HA1,m_dc.getNonce(),"00000001",m_clientNonce,m_qopValue,"AUTHENTICATE",m_digestURI,true);  digestResponse.append("username=\"");  digestResponse.append(m_authorizationId);  if (0 != m_realm.length()) {    digestResponse.append("\",realm=\"");    digestResponse.append(m_realm);  }  digestResponse.append("\",cnonce=\"");  digestResponse.append(m_clientNonce);  digestResponse.append("\",nc=");  digestResponse.append("00000001");  digestResponse.append(",qop=");  digestResponse.append(m_qopValue);  digestResponse.append(",digest-uri=\"ldap/");  digestResponse.append(m_serverName);  digestResponse.append("\",response=");  digestResponse.append(response);  digestResponse.append(",charset=utf-8,nonce=\"");  digestResponse.append(m_dc.getNonce());  digestResponse.append("\"");  return digestResponse.toString();}  }
class C{  public Mercator(LatLonPoint center,float scale,int width,int height){  super(center,scale,width,height);}  }
class C{  public String maxItsTipText(){  return "Maximum number of iterations to perform.";}  }
class C{  void align() throws IOException {  for (int i=0; i < lmargin; i++)   out.write(" ");}  }
class C{  private void modifyClassInstanceVariable(){  instanceVariable="Modified Instance Variable";  new Thread(null).start();}  }
class C{  public T caseMoreGuards_(MoreGuards_ object){  return null;}  }
class C{  private void init(){  scheduleCleaner();}  }
class C{  public static void test(long n,long N,long low,int chunkSize,int times){  long[] values=new long[chunkSize];  long chunks=n / chunkSize;  cern.colt.Timer timer=new cern.colt.Timer().start();  for (long t=times; --t >= 0; ) {    RandomSampler sampler=new RandomSampler(n,N,low,cern.jet.random.AbstractDistribution.makeDefaultGenerator());    for (long i=0; i < chunks; i++) {      sampler.nextBlock(chunkSize,values,0);    }    int toDo=(int)(n - chunkSize * chunks);    if (toDo > 0) {      sampler.nextBlock(toDo,values,0);    }  }  timer.stop();  System.out.println("single run took " + timer.elapsedTime() / times);  System.out.println("Good bye.\n");}  }
class C{  public static void modelChange_InvoiceLine(SetGetModel m,int changeType){  if (-1 == changeType || TYPE_BEFORE_NEW == changeType || TYPE_BEFORE_CHANGE == changeType) {    boolean isAsset=false;    int assetGroup_ID=0;    isAsset=SetGetUtil.get_AttrValueAsBoolean(m,MInvoiceLine.COLUMNNAME_A_CreateAsset);    int product_id=SetGetUtil.get_AttrValueAsInt(m,MInvoiceLine.COLUMNNAME_M_Product_ID);    if (product_id > 0) {      MProduct prod=MProduct.get(m.getCtx(),product_id);      if (prod.isCreateAsset()) {        isAsset=(prod != null && prod.get_ID() > 0 && prod.isCreateAsset());        assetGroup_ID=prod.getA_Asset_Group_ID();      } else       assetGroup_ID=SetGetUtil.get_AttrValueAsInt(m,MInvoiceLine.COLUMNNAME_A_Asset_Group_ID);    }    m.set_AttrValue(MInvoiceLine.COLUMNNAME_A_CreateAsset,isAsset);    if (isAsset) {      m.set_AttrValue(MInvoiceLine.COLUMNNAME_A_Asset_Group_ID,assetGroup_ID);      m.set_AttrValue("IsFixedAssetInvoice",isAsset);      m.set_AttrValue(MInvoiceLine.COLUMNNAME_A_CreateAsset,"Y");    } else {      m.set_AttrValue(MInvoiceLine.COLUMNNAME_A_Asset_Group_ID,null);      m.set_AttrValue(MInvoiceLine.COLUMNNAME_A_Asset_ID,null);      m.set_AttrValue("IsFixedAssetInvoice",false);    }    if (isAsset && (m instanceof MInvoiceLine)) {      MInvoiceLine line=(MInvoiceLine)m;      if (MInvoiceLine.A_CAPVSEXP_Expense.equals(line.getA_CapvsExp()) && line.getA_Asset_ID() <= 0) {        throw new FillMandatoryException(MInvoiceLine.COLUMNNAME_A_Asset_ID);      }      if (line.getLineNetAmt().signum() == 0) {        throw new FillMandatoryException(MInvoiceLine.COLUMNNAME_QtyEntered,MInvoiceLine.COLUMNNAME_PriceEntered);      }      MProduct product=line.getProduct();      if (product.isStocked() && line.get_ValueAsBoolean("IsFixedAssetInvoice")) {        throw new AssetProductStockedException(product);      }    }  }  if (TYPE_AFTER_NEW == changeType || TYPE_AFTER_CHANGE == changeType || TYPE_AFTER_DELETE == changeType) {    int invoice_id=SetGetUtil.get_AttrValueAsInt(m,MInvoiceLine.COLUMNNAME_C_Invoice_ID);    String sql="UPDATE C_Invoice i SET IsFixedAssetInvoice" + "=(SELECT COALESCE(MAX(il.IsFixedAssetInvoice),'N')" + " FROM C_InvoiceLine il"+ " WHERE il.C_Invoice_ID=i.C_Invoice_ID"+ " AND il." + MInvoiceLine.COLUMNNAME_IsDescription + "='N'"+ ")"+ " WHERE C_Invoice_ID=?";    DB.executeUpdateEx(sql,new Object[]{invoice_id},m.get_TrxName());  }}  }
class C{  private static void collect(final INaviOperandTreeNode currentNode,final List<INaviOperandTreeNode> nodes){  nodes.add(currentNode);  for (  final INaviOperandTreeNode child : currentNode.getChildren()) {    collect(child,nodes);  }}  }
class C{  void updateWindowLocation(){  InputMethodRequests req=handler.getClientInputMethodRequests();  if (req == null) {    return;  }  Point windowLocation=new Point();  Rectangle caretRect=req.getTextLocation(null);  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  Dimension windowSize=compositionWindow.getSize();  final int SPACING=2;  if (caretRect.x + windowSize.width > screenSize.width) {    windowLocation.x=screenSize.width - windowSize.width;  } else {    windowLocation.x=caretRect.x;  }  if (caretRect.y + caretRect.height + SPACING+ windowSize.height > screenSize.height) {    windowLocation.y=caretRect.y - SPACING - windowSize.height;  } else {    windowLocation.y=caretRect.y + caretRect.height + SPACING;  }  compositionWindow.setLocation(windowLocation);}  }
class C{  public static <E,B extends MutableBag<E>>UnmodifiableBag<E> of(B bag){  if (bag == null) {    throw new IllegalArgumentException("cannot create an UnmodifiableBag for null");  }  return new UnmodifiableBag<>(bag);}  }
class C{  final public void println(double v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  @Path("update") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputWithRevisionResponse update(final UpdateRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.update(request);}  }
class C{  public void testBadMethodArgument() throws Exception {  String testClassName=PlaceHolderTest.class.getName();  String invalidMethodName="testNoExist";  String classAndMethod=testClassName + "#" + invalidMethodName;  mInstrumentationTestRunner.onCreate(createBundle(InstrumentationTestRunner.ARGUMENT_TEST_CLASS,classAndMethod));  assertTestRunnerCalledWithExpectedParameters(testClassName,invalidMethodName);}  }
class C{  private AddManagementHostWorkflowService.State buildValidStartState(TaskState.TaskStage stage,@Nullable AddManagementHostWorkflowService.TaskState.SubStage startSubStage){  AddManagementHostWorkflowService.State startState=new AddManagementHostWorkflowService.State();  startState.controlFlags=ControlFlags.CONTROL_FLAG_OPERATION_PROCESSING_DISABLED;  startState.hostServiceLink="hostServiceLink1";  startState.isNewDeployment=false;  startState.deploymentServiceLink="deploymentServiceLink";  if (null != stage) {    startState.taskState=new AddManagementHostWorkflowService.TaskState();    startState.taskState.stage=stage;    startState.taskState.subStage=startSubStage;    if (TaskState.TaskStage.CREATED != stage) {      startState.taskSubStates=new ArrayList<>(AddManagementHostWorkflowService.TaskState.SubStage.values().length);      for (      AddManagementHostWorkflowService.TaskState.SubStage s : AddManagementHostWorkflowService.TaskState.SubStage.values()) {        if (null == startSubStage || startSubStage.ordinal() > s.ordinal()) {          startState.taskSubStates.add(s.ordinal(),TaskState.TaskStage.FINISHED);        } else         if (startSubStage.ordinal() == s.ordinal()) {          startState.taskSubStates.add(s.ordinal(),TaskState.TaskStage.STARTED);        } else {          startState.taskSubStates.add(s.ordinal(),TaskState.TaskStage.CREATED);        }      }    }  }  return startState;}  }
class C{  public static float[] toFloatArray(int[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(float)array[i];  }  return result;}  }
class C{  protected ExpressionAnnotationListImpl(){  super();}  }
class C{  public EventSupport(AbstractNode n){  node=n;}  }
class C{  public void test_ticket_1105_quads_select2() throws Exception {  new TestHelper("ticket_1105_quads_select2","ticket_1105_select2.rq","ticket_1105.trig","ticket_1105.srx").runTest();}  }
class C{  public void findAndUndo(Object someObj){  super.findAndUndo(someObj);  if (someObj instanceof HelpMenuItems) {    Iterator hmiit=((HelpMenuItems)someObj).iterator();    while (hmiit.hasNext()) {      remove((JMenuItem)hmiit.next());    }  }}  }
class C{  @Override public double classifyInstance(Instance instance) throws Exception {  return m_root.classifyInstance(instance);}  }
class C{  public DateMidnight withFields(ReadablePartial partial){  if (partial == null) {    return this;  }  return withMillis(getChronology().set(partial,getMillis()));}  }
class C{  public boolean isMarked(){  return isMarked;}  }
class C{  @ObjectiveCName("startWebAction:") public Command<WebActionDescriptor> startWebAction(final String webAction){  return modules.getExternalModule().startWebAction(webAction);}  }
class C{  public void testUrlValidWithStringAfterSlash(){  setParameterToInitMockMethod("http://myurl.com/myPage",TestSolution.PASSED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public java.lang.Class<?> compileAndLoad(Type type) throws ClassNotFoundException {  ClassLoader loader=compile(type);  return java.lang.Class.forName(type.getName(),false,loader);}  }
class C{  public static String convertToNonBreakingSpaces(int preSpaces,String s){  StringBuilder b=new StringBuilder(preSpaces + s.length());  for (int i=0; i < preSpaces; i++)   b.append('\u00a0');  b.append(s.replace(' ','\u00a0'));  return b.toString();}  }
class C{  public static int sum(int a,int b){  return a + b;}  }
class C{  public EstadoBean(){}  }
class C{  public static AddressFragment newInstance(String token,boolean isSelector,Address selectedAddressForCheckout){  AddressFragment fragment=new AddressFragment();  Bundle args=new Bundle();  args.putString(USER_TOKEN,token);  args.putBoolean(IS_SELECTOR,isSelector);  args.putSerializable(SELECTED_ADDRESS_FOR_CHECKOUT,selectedAddressForCheckout);  fragment.setArguments(args);  return fragment;}  }
class C{  public static Excerpt upcastToGeneratedBuilder(Block block,Metadata metadata,String builder){  return block.declare("base","// Upcast to access private fields; otherwise, oddly, we get an access violation.%n" + "%1$s base = (%1$s) %2$s;",metadata.getGeneratedBuilder(),builder);}  }
class C{  public FacetedPortrayal2D(SimplePortrayal2D[] children,boolean portrayAllChildren){  this.children=children;  this.portrayAllChildren=portrayAllChildren;}  }
class C{  public XSLTTransformParameterSpec(XMLStructure stylesheet){  if (stylesheet == null) {    throw new NullPointerException();  }  this.stylesheet=stylesheet;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(6);  newVector.addElement(new Option("\tSpecifies list of columns to Discretize. First" + " and last are valid indexes.\n" + "\t(default none)","R",1,"-R <col1,col2-col4,...>"));  newVector.addElement(new Option("\tInvert matching sense of column indexes.","V",0,"-V"));  newVector.addElement(new Option("\tOutput binary attributes for discretized attributes.","D",0,"-D"));  newVector.addElement(new Option("\tUse bin numbers rather than ranges for discretized attributes.","Y",0,"-Y"));  newVector.addElement(new Option("\tUse better encoding of split point for MDL.","E",0,"-E"));  newVector.addElement(new Option("\tUse Kononenko's MDL criterion.","K",0,"-K"));  newVector.addElement(new Option("\tPrecision for bin boundary labels.\n\t" + "(default = 6 decimal places).","precision",1,"-precision <integer>"));  return newVector.elements();}  }
class C{  public boolean testPoint(Vector3fc point){  return testPoint(point.x(),point.y(),point.z());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void addAllItems(CnATreeElement elmt){  if (elmt.getEntityType().getId().equals(entityTypeId)) {    addAllSubitems(elmt);  }  for (  CnATreeElement child : elmt.getChildren()) {    addAllItems(child);  }}  }
class C{  public Object createObject(Literal literal){  return lm.createObject(literal);}  }
class C{  public DoubleVector dividedByEquals(DoubleVector v){  for (int i=0; i < size(); i++) {    V[i]/=v.V[i];  }  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.774 -0400",hash_original_method="EEECDB779BCD3F1C16C4BB7414585E36",hash_generated_method="A55EC4CDFFAE64F1B331AEE9E72C7A09") @Override public void flush() throws IOException {  try {    out.flush();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public MAssetDelivery(MAsset asset,EMail email,int AD_User_ID){  super(asset.getCtx(),0,asset.get_TrxName());  setA_Asset_ID(asset.getA_Asset_ID());  setLot(asset.getLot());  setSerNo(asset.getSerNo());  setVersionNo(asset.getVersionNo());  setMovementDate(new Timestamp(System.currentTimeMillis()));  setEMail(email.getTo().toString());  setMessageID(email.getMessageID());  setAD_User_ID(AD_User_ID);  saveEx();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.020 -0400",hash_original_method="50E20DF9BFC1ED04B1C83DE63D7D9AAA",hash_generated_method="1D9F488776202C64DD0494047971780E") private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  private boolean queryCommandState(final String commandIdentifier){  Check.notNull(commandIdentifier,"command");  final StringBuffer cmd=new StringBuffer();  cmd.append("return editor.queryCommandState(\"");  cmd.append(commandIdentifier);  cmd.append("\") || ''");  final Object ret=browser.evaluate(cmd.toString());  if (ret instanceof Boolean == false) {    return false;  }  return ((Boolean)ret).booleanValue();}  }
class C{  static Object unwrap(Object obj){  return (obj instanceof EntryProcessorResourceInjectorProxy) ? ((EntryProcessorResourceInjectorProxy)obj).delegate() : obj;}  }
class C{  @Override public boolean apply(EdgeRenderingProperty property){  if (!property.isVisible) {    return false;  }  if (!property.node1.isVisible || !property.node2.isVisible) {    return false;  }  GL2 gl=scene.gl;  gl.glPushName(property.shapeId);  if (property.strokeWidth > 0.0f) {    gl.glLineWidth(property.strokeWidth);    gl.glColor4f(property.strokeColor.getRed() / 255f,property.strokeColor.getGreen() / 255f,property.strokeColor.getBlue() / 255f,property.strokeColor.getAlpha() / 255f);    NodeRenderingProperty node1=property.node1.isCompletelyCollapsed() ? property.node1.collapsedUnder : property.node1;    NodeRenderingProperty node2=property.node2.isCompletelyCollapsed() ? property.node2.collapsedUnder : property.node2;    Point2D middle=((Arrow)property.shape).linkShapes(gl,new Point2D.Float(property.p1X * GLScene.FACTOR,property.p1Y * GLScene.FACTOR),new Point2D.Float(property.p2X * GLScene.FACTOR,property.p2Y * GLScene.FACTOR),node1.shape,node2.shape,property.deviation);    if (property.isTextVisible) {      paintLabel(property,middle);    }  }  gl.glPopName();  return true;}  }
class C{  public static TermsQueryBuilder termsQuery(String name,long... values){  return new TermsQueryBuilder(name,values);}  }
class C{  public SphereFunction(float radius){  this(new Sphere(new Vec3D(),radius));}  }
class C{  protected void handleMergeNode(MergeNode merge){}  }
class C{  static public MembershipManager newMembershipManager(DistributedMembershipListener listener,DistributionConfig config,RemoteTransportConfig transport,DMStats stats){  return services.newMembershipManager(listener,config,transport,stats);}  }
class C{  public IllformedLocaleException(String message){  super(message);}  }
class C{  public boolean same(MimeType other){  if (this == other)   return true;  return getTypeNotNull().equals(other.getTypeNotNull()) && getSubtypeNotNull().equals(other.getSubtypeNotNull());}  }
class C{  public void initDiskCache(){synchronized (mDiskCacheLock) {    if (mDiskLruCache == null || mDiskLruCache.isClosed()) {      File diskCacheDir=mCacheParams.diskCacheDir;      if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {        if (!diskCacheDir.exists()) {          diskCacheDir.mkdirs();        }        if (getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {          try {            mDiskLruCache=DiskLruCache.open(diskCacheDir,1,1,mCacheParams.diskCacheSize);            if (debug) {              Log.d(TAG,"Disk cache initialized");            }          } catch (          final IOException e) {            mCacheParams.diskCacheDir=null;            Log.e(TAG,"initDiskCache - " + e);          }        }      }    }    mDiskCacheStarting=false;    mDiskCacheLock.notifyAll();  }}  }
class C{  public TypeCastTree buildTypeCast(TypeMirror type,ExpressionTree expr){  return maker.TypeCast((Type)type,(JCTree.JCExpression)expr);}  }
class C{  private Command processPacketInMessage(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  OFMatch match=new OFMatch();  match.loadFromPacket(pi.getPacketData(),pi.getInPort());  Long sourceMac=Ethernet.toLong(match.getDataLayerSource());  Long destMac=Ethernet.toLong(match.getDataLayerDestination());  Short vlan=match.getDataLayerVirtualLan();  if ((destMac & 0xfffffffffff0L) == 0x0180c2000000L) {    if (log.isTraceEnabled()) {      log.trace("ignoring packet addressed to 802.1D/Q reserved addr: switch {} vlan {} dest MAC {}",new Object[]{sw,vlan,HexString.toHexString(destMac)});    }    return Command.STOP;  }  if ((sourceMac & 0x010000000000L) == 0) {    this.addToPortMap(sw,sourceMac,vlan,pi.getInPort());  }  Short outPort=getFromPortMap(sw,destMac,vlan);  if (outPort == null) {    this.writePacketOutForPacketIn(sw,pi,OFPort.OFPP_FLOOD.getValue());  } else   if (outPort == match.getInputPort()) {    log.trace("ignoring packet that arrived on same port as learned destination:" + " switch {} vlan {} dest MAC {} port {}",new Object[]{sw,vlan,HexString.toHexString(destMac),outPort});  } else {    match.setWildcards(((Integer)sw.getAttribute(IOFSwitch.PROP_FASTWILDCARDS)).intValue() & ~OFMatch.OFPFW_IN_PORT & ~OFMatch.OFPFW_DL_VLAN& ~OFMatch.OFPFW_DL_SRC& ~OFMatch.OFPFW_DL_DST& ~OFMatch.OFPFW_NW_SRC_MASK& ~OFMatch.OFPFW_NW_DST_MASK);    this.pushPacket(sw,match,pi,outPort);    this.writeFlowMod(sw,OFFlowMod.OFPFC_ADD,OFPacketOut.BUFFER_ID_NONE,match,outPort);    if (LEARNING_SWITCH_REVERSE_FLOW) {      this.writeFlowMod(sw,OFFlowMod.OFPFC_ADD,-1,match.clone().setDataLayerSource(match.getDataLayerDestination()).setDataLayerDestination(match.getDataLayerSource()).setNetworkSource(match.getNetworkDestination()).setNetworkDestination(match.getNetworkSource()).setTransportSource(match.getTransportDestination()).setTransportDestination(match.getTransportSource()).setInputPort(outPort),match.getInputPort());    }  }  return Command.CONTINUE;}  }
class C{  public void incrementAt(final int index,final double val){  this.matrix.incrementAt(index,0,val);}  }
class C{  public UnsupportedHttpVersionException(){  super();}  }
class C{  public void testRemoveIllegal() throws ChessParseError {  Position pos=TextIO.readFEN("8/3k4/8/2n1rpP1/1P6/1NB5/2QP4/R3K2R w KQ f6 0 1");  List<String> strMoves=getMoveList(pos,true);  assertTrue(strMoves.contains("Qc2-e4"));  assertTrue(strMoves.contains("Bc3xe5"));  assertTrue(strMoves.contains("Ke1-d1"));  assertTrue(strMoves.contains("Ke1-f1"));  assertTrue(strMoves.contains("Ke1-f2"));  assertEquals(5,strMoves.size());}  }
class C{  public static void registerBuiltInTypeScope(BuiltInTypeScope scope,ResourceSet context){  if (EcoreUtil.getAdapter(context.eAdapters(),BuiltInTypeScope.class) != null) {    throw new IllegalStateException("Attempt to install adapter for BuiltInTypeScope twice");  }  BuiltInTypeScopeAccess adapter=new BuiltInTypeScopeAccess(scope);  context.eAdapters().add(adapter);}  }
class C{  public FileSequenceDescriptor(String filePattern,String extension,int numDigits,int start){  this.filePattern=filePattern;  this.extension=extension;  this.numDigits=numDigits;  this.start=start;}  }
class C{  private void doubleBufferingChanged0(JRootPane rootPane){  BufferInfo info;synchronized (this) {    while (showing) {      try {        wait();      } catch (      InterruptedException ie) {      }    }    info=getBufferInfo(rootPane.getParent());    if (painting && bufferInfo == info) {      disposeBufferOnEnd=true;      info=null;    } else     if (info != null) {      bufferInfos.remove(info);    }  }  if (info != null) {    info.dispose();  }}  }
class C{  private static String urn(final String user){  return String.format("urn:basic:%s",user);}  }
class C{  void bfs(Map<String,List<String>> map,Map<String,Integer> dist,String start,String end,Set<String> dict){  Queue<String> q=new LinkedList<String>();  q.offer(start);  dict.add(start);  dict.add(end);  dist.put(start,0);  for (  String s : dict)   map.put(s,new ArrayList<String>());  while (!q.isEmpty()) {    String word=q.poll();    List<String> expansion=expand(word,dict);    for (    String next : expansion) {      map.get(next).add(word);      if (!dist.containsKey(next)) {        dist.put(next,dist.get(word) + 1);        q.offer(next);      }    }  }}  }
class C{  private void hideErrorMessages(){  setErrorMessage(null);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public void disableNot(Capability c){  m_NotCapabilities.disable(c);}  }
class C{  public static Matrix fromModelLookAt(Vec4 eye,Vec4 center,Vec4 up){  if (eye == null || center == null || up == null) {    throw new IllegalArgumentException("Vec4 Is Null");  }  if (eye.distanceTo3(center) <= EPSILON) {    throw new IllegalArgumentException("Eye And Center Invalid");  }  Vec4 forward=center.subtract3(eye);  Vec4 f=forward.normalize3();  Vec4 s=up.cross3(f);  s=s.normalize3();  if (s.getLength3() <= EPSILON) {    throw new IllegalArgumentException("Up And Line Of Sight Invalid");  }  Vec4 u=f.cross3(s);  u=u.normalize3();  Matrix mAxes=new Matrix(s.x,u.x,f.x,0.0,s.y,u.y,f.y,0.0,s.z,u.z,f.z,0.0,0.0,0.0,0.0,1.0,true);  Matrix mEye=Matrix.fromTranslation(eye.x,eye.y,eye.z);  return mEye.multiply(mAxes);}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public DenseMatrix(final int rows,final int cols){  super(rows,cols);  this.numCols=cols;  this.values=new double[this.getElementCount()];}  }
class C{  @Override public void clear(){  readerAccessibleInfo.array.reset();  size=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.389 -0500",hash_original_method="EA3441215E7ACDF721D34D006EDC791B",hash_generated_method="CBDD520D6DB2631112CE08685ED4E80A") public long size(){  return size;}  }
class C{  private void openLogFile(boolean truncate) throws IOException {  try {    close();  } catch (  IOException e) {  }  logName=versionName(logfilePrefix);  try {    log=(logClassConstructor == null ? new LogFile(logName,"rw") : logClassConstructor.newInstance(logName,"rw"));  } catch (  Exception e) {    throw (IOException)new IOException("unable to construct LogFile instance").initCause(e);  }  if (truncate) {    initializeLogFile();  }}  }
class C{  public VersionedValue(VersionedValue other){  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  public void overrideButton(String button,boolean override){  LOG.i("App","WARNING: Volume Button Default Behavior will be overridden.  The volume event will be fired!");  if (button.equals("volumeup")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_UP,override);  } else   if (button.equals("volumedown")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_DOWN,override);  }}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  @Override public void BIPUSH(int value){  IntegerConstant intConstant=ExpressionFactory.buildNewIntegerConstant(value);  env.topFrame().operandStack.pushBv32(intConstant);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,jo,null);  }  return jo;}  }
class C{  PorterDuffColorFilter updateTintFilter(PorterDuffColorFilter tintFilter,ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  tintFilter=new PorterDuffColorFilter(color,tintMode);  return tintFilter;}  }
class C{  final void signal(){synchronized (this) {    if (state == State.READY) {      state=State.SIGNALLED;      watcher.enqueueKey(this);    }  }}  }
class C{  private void removeViewModel(){  if (!mModelRemoved) {    ViewModelProvider.getInstance().removeViewModel(mViewModelId);    mViewModel.onViewModelDestroyed();    mModelRemoved=true;    mAlreadyCreated=false;  }}  }
class C{  private Element disableLazyLoaders(Element anElement) throws Exception {  ByteArrayOutputStream myBuffer=new ByteArrayOutputStream();  ObjectOutputStream myObjectOutputStream=new ObjectOutputStream(myBuffer);  myObjectOutputStream.writeObject(anElement);  myObjectOutputStream.close();  myBuffer.close();  ObjectInputStream myObjectInputStream=new ObjectInputStream(new ByteArrayInputStream(myBuffer.toByteArray()));  Element myResult=(Element)myObjectInputStream.readObject();  myObjectInputStream.close();  return myResult;}  }
class C{  public void inputMethodTextChanged(InputMethodEvent e){  ((InputMethodListener)a).inputMethodTextChanged(e);  ((InputMethodListener)b).inputMethodTextChanged(e);}  }
class C{  @Override public void writeBatch() throws IOException {  Instances instances=getInstances();  if (instances == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  if (m_DataBaseConnection == null) {    throw new IOException("No database has been set up.");  }  setRetrieval(BATCH);  try {    if (!m_DataBaseConnection.isConnected()) {      connectToDatabase();    }    setWriteMode(WRITE);    writeStructure();    for (int i=0; i < instances.numInstances(); i++) {      writeInstance(instances.instance(i));    }    m_DataBaseConnection.disconnectFromDatabase();    setWriteMode(WAIT);    resetStructure();    m_count=1;  } catch (  Exception ex) {    printException(ex);  }}  }
class C{  public Duration plusDays(long daysToAdd){  return plus(Math.multiplyExact(daysToAdd,SECONDS_PER_DAY),0);}  }
class C{  @RequestProcessing(value="/admin/product/{productId}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showProduct(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String productId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/product.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject product=productQueryService.getProduct(productId);  dataModel.put(Product.PRODUCT,product);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  private void adaptWidth(){  adapter.setWidth(width);  if (rootView != null) {    rootView.setWidth(width);    rootView.requestLayout();  }}  }
class C{  private void requestStreamCompression(String method){  try {    writer.write("<compress xmlns='http://jabber.org/protocol/compress'>");    writer.write("<method>" + method + "</method></compress>");    writer.flush();  } catch (  IOException e) {    notifyConnectionError(e);  }}  }
class C{  private void expandToObject(Object template,int occurrence){  Object realElement=steppingTreeInputController.getElement(template,occurrence,getTreeViewer().getFilters());  if (null != realElement) {    ((DeferredTreeViewer)getTreeViewer()).expandToObjectAndSelect(realElement,0);  }}  }
class C{  @Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);  this.containerPosX=(this.width - this.xSize) / 2;  this.containerPosY=(this.height - this.ySize) / 2;  this.drawTexturedModalRect(containerPosX,containerPosY,0,0,this.xSize,this.ySize);  this.radarCenter=new Vector2(this.containerPosX + this.xSize / 3 - 10,this.containerPosY + this.ySize / 2 + 4);  this.radarMapRadius=TileRadarStation.MAX_DETECTION_RANGE / 71f;  this.info="";  this.info2="";  if (this.tileEntity.getEnergy() >= tileEntity.ENERGY_USAGE) {    int range=4;    for (    Entity entity : this.tileEntity.detectedEntities) {      Vector2 position=new Vector2(radarCenter.x + (entity.posX - this.tileEntity.xCoord) / this.radarMapRadius,radarCenter.y - (entity.posZ - this.tileEntity.zCoord) / this.radarMapRadius);      if (entity instanceof EntityMissile) {        if (this.tileEntity.isMissileGoingToHit((EntityMissile)entity)) {          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_RED_DOT);        } else {          FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);        }      } else {        FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_YELLOW_DOT);      }      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);      Vector2 minPosition=position.clone();      minPosition.add(-range);      Vector2 maxPosition=position.clone();      maxPosition.add(range);      if (new Rectangle(minPosition,maxPosition).isIn(this.mousePosition)) {        this.info=entity.getCommandSenderName();        if (entity instanceof EntityPlayer) {          this.info="\u00a71" + this.info;        }        if (entity instanceof EntityMissile) {          if (((EntityMissile)entity).targetVector != null) {            this.info2="(" + (int)((EntityMissile)entity).targetVector.xPos + ", "+ (int)((EntityMissile)entity).targetVector.zPos+ ")";          }        }      }    }    range=2;    for (    TileEntity jiQi : this.tileEntity.detectedTiles) {      Vector2 position=new Vector2(this.radarCenter.x + (jiQi.xCoord - this.tileEntity.xCoord) / this.radarMapRadius,this.radarCenter.y - (jiQi.zCoord - this.tileEntity.zCoord) / this.radarMapRadius);      FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE_WHITE_DOT);      this.drawTexturedModalRect(position.intX(),position.intY(),0,0,2,2);      Vector2 minPosition=position.clone();      minPosition.add(-range);      Vector2 maxPosition=position.clone();      maxPosition.add(range);      if (new Rectangle(minPosition,maxPosition).isIn(this.mousePosition)) {        if (jiQi.getBlockType() != null) {          if (jiQi.getBlockType() instanceof BlockMachine) {            this.info=BlockMachine.getJiQiMing(jiQi);          } else {            this.info=jiQi.getBlockType().getLocalizedName();          }        }      }    }  }}  }
class C{  public static byte[] decodeBase64(final byte[] base64Data){  return new Base64().decode(base64Data);}  }
class C{  public void testFloatValueNegMaxValue(){  byte[] a={0,-1,-1,-1,0,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == -Float.MAX_VALUE);}  }
class C{  public static <O>CQNParser<O> forPojo(Class<O> pojoClass){  return new CQNParser<O>(pojoClass);}  }
class C{  @Override public boolean hasNext(){  return this.resultIterator.hasNext();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (condition: ");  result.append(condition);  result.append(')');  return result.toString();}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  final Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public QueryImpl(ResultSet result,int maxrow,String name,TimeZone tz) throws PageException {  this.name=name;  long start=System.nanoTime();  try {    fillResult(this,null,null,null,result,maxrow,false,false,tz);  } catch (  SQLException e) {    throw new DatabaseException(e,null);  }catch (  IOException e) {    throw Caster.toPageException(e);  }  exeTime=System.nanoTime() - start;}  }
class C{  public int numGeneratedSequences(){  return gralComponents.size();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private Animation loadAnimation(int anim,int duration){  Animation animation=AnimationUtils.loadAnimation(getContext(),anim);  animation.setDuration(duration);  return animation;}  }
class C{  @SuppressWarnings("deprecation") protected void stopAttributeSelection(){  if (m_RunThread != null) {    m_RunThread.interrupt();    m_RunThread.stop();  }}  }
class C{  public void connectionHardReset(){  resetBondedDevices();  try {    if (mBluetoothAdapter != null) {      if (mBluetoothAdapter.isEnabled()) {        mBluetoothAdapter.disable();        Log.d(LOG_TAG,"Bluetooth disabled");      }      mBluetoothAdapter.enable();      Log.d(LOG_TAG,"Bluetooth enabled");    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String completeIt(){  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  if (DOCACTION_Prepare.equals(getDocAction())) {    setProcessed(false);    return DocAction.STATUS_InProgress;  }  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  getLines(true,null);  log.info(toString());  StringBuffer info=new StringBuffer();  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    if (info.length() > 0)     info.append(" - ");    info.append(valid);    m_processMsg=info.toString();    return DocAction.STATUS_Invalid;  }  setProcessed(true);  m_processMsg=info.toString();  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public void showAddMealDialog(View view){  DialogFragment dialog=AddMealDialogFragment.newInstance();  dialog.show(MainActivity.this.getFragmentManager(),"AddMealDialogFragment");}  }
class C{  public Task<StorageSystemRestRep> update(URI id,StorageSystemUpdateRequestParam input){  return putTask(input,getIdUrl(),id);}  }
class C{  public Request body(Object bean){  Objects.requireNonNull(bean);  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  try (OutputStreamWriter writer=new OutputStreamWriter(buffer);JsonWriterImpl jsonWriter=new JsonWriterImpl(writer)){    jsonWriter.write(bean);  } catch (  IOException e) {    throw new RuntimeException(e);  }  _body=buffer.toByteArray();  _type="application/json";  return this;}  }
class C{  public Token(){}  }
class C{  public static void output(){  Debug.output("");}  }
class C{  @Override public OutlierResult run(Database db,Relation<V> relation){  DBIDs ids=relation.getDBIDs();  SimilarityQuery<V> sq=db.getSimilarityQuery(relation,kernelFunction);  KernelMatrix kernelMatrix=new KernelMatrix(sq,relation,ids);  WritableDoubleDataStore abodvalues=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  DoubleMinMax minmaxabod=new DoubleMinMax();  MeanVariance s=new MeanVariance();  KNNHeap nn=DBIDUtil.newHeap(k);  for (DBIDIter pA=ids.iter(); pA.valid(); pA.advance()) {    final double simAA=kernelMatrix.getSimilarity(pA,pA);    nn.clear();    for (DBIDIter nB=relation.iterDBIDs(); nB.valid(); nB.advance()) {      if (DBIDUtil.equal(nB,pA)) {        continue;      }      double simBB=kernelMatrix.getSimilarity(nB,nB);      double simAB=kernelMatrix.getSimilarity(pA,nB);      double sqdAB=simAA + simBB - simAB - simAB;      if (!(sqdAB > 0.)) {        continue;      }      nn.insert(sqdAB,nB);    }    KNNList nl=nn.toKNNList();    s.reset();    DoubleDBIDListIter iB=nl.iter(), iC=nl.iter();    for (; iB.valid(); iB.advance()) {      double sqdAB=iB.doubleValue();      double simAB=kernelMatrix.getSimilarity(pA,iB);      if (!(sqdAB > 0.)) {        continue;      }      for (iC.seek(iB.getOffset() + 1); iC.valid(); iC.advance()) {        double sqdAC=iC.doubleValue();        double simAC=kernelMatrix.getSimilarity(pA,iC);        if (!(sqdAC > 0.)) {          continue;        }        double simBC=kernelMatrix.getSimilarity(iB,iC);        double numerator=simBC - simAB - simAC + simAA;        double div=1. / (sqdAB * sqdAC);        s.put(numerator * div,Math.sqrt(div));      }    }    final double abof=s.getNaiveVariance();    minmaxabod.put(abof);    abodvalues.putDouble(pA,abof);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("Angle-Based Outlier Degree","abod-outlier",abodvalues,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new InvertedOutlierScoreMeta(minmaxabod.getMin(),minmaxabod.getMax(),0.0,Double.POSITIVE_INFINITY);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public void selectGraphic(OMGraphic graphic){  if (graphic != null) {    graphic.select();    graphic.regenerate(proj);    selectedGraphics.add(graphic);  }}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,ThreadFactory threadFactory){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,threadFactory,null);}  }
class C{  public void test_SelectUnionItself() throws SQLException {  String sql="SELECT b.cnum, b.cname" + " FROM " + DatabaseCreator.CUSTOMERS_TABLE + " a, "+ DatabaseCreator.CUSTOMERS_TABLE+ " b"+ " WHERE a.snum = 1002"+ " AND b.city = a.city";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,String> value=new HashMap<Integer,String>();  value.put(2003,"Liu");  value.put(2004,"Grass");  value.put(2008,"Cisneros");  while (result.next()) {    int key=result.getInt("cnum");    String val=result.getString("cname");    assertTrue("wrong value of cnum field",value.containsKey(key));    assertEquals("wrong value of cname field",value.get(key),val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public void updateAndTestCounter(OFMessage ofm,String type){  validateCounter(type,0);  counters.updateWriteStats(ofm);  counters.updateWriteStats(ofm);  counters.updateReadStats(ofm);  counters.updateReadStats(ofm);  validateCounter(type,2);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (abort()) {    return;  }  mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  setEnabled(false);  try {    CreateNewReceivingAddressDialog createNewReceivingAddressDialog=new CreateNewReceivingAddressDialog(super.bitcoinController,mainFrame,receiveBitcoinPanel);    createNewReceivingAddressDialog.setVisible(true);  }  finally {    setEnabled(true);    mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }  if (receiveBitcoinPanel != null && receiveBitcoinPanel.getLabelTextArea() != null) {    receiveBitcoinPanel.getLabelTextArea().requestFocusInWindow();  }}  }
class C{  public boolean hasEmail(){  return super.hasAttribute(EMAIL);}  }
class C{  public ReportSlaveIDResponse(){  super();  setFunctionCode(Modbus.REPORT_SLAVE_ID);}  }
class C{  public Iterator<Widget> iterateWidgets(){  return widgets.values().iterator();}  }
class C{  public String toString(){  return toldTriples + " stmts added in " + ((double)loadTime.estimate_get()) / 1000d + " secs, rate= " + triplesPerSecond() + ", commitLatency=" + commitTime.estimate_get() + "ms" + (closureStats.elapsed.estimate_get() != 0L ? "\n" + closureStats.toString() : "");}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.GETTER_DECLARATION___GET_DEFINED_ACCESSOR:    return getDefinedAccessor();}return super.eInvoke(operationID,arguments);}  }
class C{  public static Timestamp firstOf(Timestamp p_dateTime,String XX){  Timestamp time=p_dateTime;  if (time == null)   time=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(time);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  if ("MM".equals(XX))   cal.set(Calendar.DAY_OF_MONTH,1); else   if ("DY".equals(XX))   cal.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY); else   if ("Q".equals(XX)) {    cal.set(Calendar.DAY_OF_MONTH,1);    int mm=cal.get(Calendar.MONTH);    if (mm < Calendar.APRIL)     cal.set(Calendar.MONTH,Calendar.JANUARY); else     if (mm < Calendar.JULY)     cal.set(Calendar.MONTH,Calendar.APRIL); else     if (mm < Calendar.OCTOBER)     cal.set(Calendar.MONTH,Calendar.JULY); else     cal.set(Calendar.MONTH,Calendar.OCTOBER);  }  return new Timestamp(cal.getTimeInMillis());}  }
class C{  public void transfer(OMGraphic from,OMGraphic to){  setFrom(from);  setTo(to);}  }
class C{  public void updateRequestByAddingReplaceVarPairNodeSpecific(ParallelTask task,Map<String,StrStrMap> replacementVarMapNodeSpecific){  Map<String,NodeReqResponse> taskResult=task.getParallelTaskResult();  for (  Entry<String,NodeReqResponse> entry : taskResult.entrySet()) {    String fqdn=entry.getKey();    StrStrMap replacementVarMapForThisNode=replacementVarMapNodeSpecific.get(fqdn);    if (replacementVarMapForThisNode == null) {      logger.info("replacementVarMapForThisNode is null in " + " for host " + fqdn);      continue;    }    for (    Entry<String,String> entryReplaceMap : replacementVarMapForThisNode.getMap().entrySet()) {      String replaceVarKey=entryReplaceMap.getKey();      String replaceVarValue=entryReplaceMap.getValue();      NodeReqResponse nodeReqResponse=entry.getValue();      if (replaceVarKey.equalsIgnoreCase(PcConstants.NA)) {        logger.info("Replace NA means to disable this item." + PcDateUtils.getNowDateTimeStrStandard());        nodeReqResponse.getRequestParameters().put(PcConstants.NODE_REQUEST_EXECUTE_MSG,PcConstants.NODE_REQUEST_EXECUTE_MSG_DETAIL_REPLACEMENT_VAR_VALUE_NA);        nodeReqResponse.getRequestParameters().put(PcConstants.NODE_REQUEST_WILL_EXECUTE,Boolean.toString(false));      } else {        nodeReqResponse.getRequestParameters().put(PcConstants.NODE_REQUEST_PREFIX_REPLACE_VAR + replaceVarKey,replaceVarValue);        if (replacementVarMapForThisNode.getMap().keySet().contains(PcConstants.NA)) {          nodeReqResponse.getRequestParameters().put(PcConstants.NODE_REQUEST_WILL_EXECUTE,Boolean.toString(false));        } else {          nodeReqResponse.getRequestParameters().put(PcConstants.NODE_REQUEST_WILL_EXECUTE,Boolean.toString(true));        }      }    }  }}  }
class C{  public static boolean hasEvaluationExpression(@NotNull XValue value){  Promise<String> promise=value.calculateEvaluationExpression();  if (promise.getState() == Promise.State.PENDING)   return true;  if (promise instanceof Getter) {    return ((Getter)promise).get() != null;  }  return true;}  }
class C{  public final int readUnsignedShort() throws IOException {  mPosition+=2;  d.readFully(w,0,2);  return ((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  public synchronized void clear(){  mSeries.clear();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addLaunchConfiguration(LaunchConfiguration launchConfiguration){synchronized (privateInstanceLock) {    for (    LaunchConfiguration lc : launchConfigurations) {      if (lc.equals(launchConfiguration)) {        return;      }    }    launchConfigurations.add(launchConfiguration);  }  WebAppDebugModelEvent<LaunchConfiguration> launchedEvent=new WebAppDebugModelEvent<LaunchConfiguration>(launchConfiguration);  fireLaunchConfigurationLaunched(launchedEvent);  removeAllAssociatedTerminatedLaunchConfigsExceptMostRecent(launchConfiguration);}  }
class C{  public Date parseDate(String str){  try {    return dateFormat.parse(str);  } catch (  java.text.ParseException e) {    throw new RuntimeException(e);  }}  }
class C{  public EqualsResult append(final float lhs,final float rhs){  if (!isEqual) {    return this;  }  return append(Float.floatToIntBits(lhs),Float.floatToIntBits(rhs));}  }
class C{  protected void process(String tenantId,List<S> items,int retryCount) throws Exception {  ProcessingUnit<S,T> pu=new ProcessingUnit<S,T>();  pu.setProcessor(getProcessor());  pu.setRetryCount(retryCount);  pu.setResultHandler(null);  pu.setRetryHandler(null);  pu.handle(tenantId,items);}  }
class C{  public boolean isUncheckedException(boolean includeSupertype){  return this == TypeBinding.NULL;}  }
class C{  public synchronized boolean hasInverseRelationship(Vertex type,Vertex target){  Relationship relationship=getRelationship(type,target);  return (relationship != null) && (relationship.isInverse());}  }
class C{  public void mouseReleased(MouseEvent e){synchronized (mouseLock) {    mousePressed=false;  }}  }
class C{  public static void copyRecursive(Resource src,Resource trg,ResourceFilter filter) throws IOException {  if (!src.exists())   return;  if (src.isDirectory()) {    if (!trg.exists())     trg.createDirectory(true);    Resource[] files=filter == null ? src.listResources() : src.listResources(filter);    for (int i=0; i < files.length; i++) {      copyRecursive(files[i],trg.getRealResource(files[i].getName()),filter);    }  } else   if (src.isFile()) {    touch(trg);    IOUtil.copy(src,trg);  }}  }
class C{  public void out(DataOutputStream dos) throws IOException {  dos.writeUTF("float");  dos.writeInt(columns);  dos.writeInt(rows);  dos.writeInt(data.length);  for (int i=0; i < data.length; i++) {    dos.writeFloat(data[i]);  }}  }
class C{  public void testSetF10(){  boolean f10=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF10(f10);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup3 needs to be implemented if invoked");}  }
class C{  public static byte toByte(NibbleArray nibbles,int start){  return toByte(nibbles.get(start),nibbles.get(start + 1));}  }
class C{  public boolean test(Instances data){  return test(data,0,data.numAttributes() - 1);}  }
class C{  private CloneUtils(){}  }
class C{  @Override public void sendPrivateText(final String text){  sendPrivateText(getServerNotificationType(clientVersion),text);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnomodificationallowederrEE.class,args);}  }
class C{  private TvShowSubtitleChooserModel(){  name=BUNDLE.getString("chooser.nothingfound");}  }
class C{  public void lockStoreBeforeBackup(){  getDiskInitFile().lockForBackup();}  }
class C{  private void checkSearch(String inputGraph,String outputGraph){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  PcLocal pc=new PcLocal(independence);  Graph resultGraph=pc.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  resultGraph=GraphUtils.replaceNodes(resultGraph,trueGraph.getNodes());  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  public MiniDrawer withOnMiniDrawerItemClickListener(BaseDrawerAdapter.OnClickListener onMiniDrawerItemClickListener){  this.mOnMiniDrawerItemClickListener=onMiniDrawerItemClickListener;  return this;}  }
class C{  public void testFloatValuePositive1(){  String a="27467238";  float result=2.7467238E7f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public void ruleR6R7(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacents=graph.getAdjacentNodes(b);    if (adjacents.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacents.size(),2);    for (int[] choice=cg.next(); choice != null; choice=cg.next()) {      Node a=adjacents.get(choice[0]);      Node c=adjacents.get(choice[1]);      if (graph.isAdjacentTo(a,c)) {        continue;      }      if (!(graph.getEndpoint(b,a) == Endpoint.TAIL)) {        continue;      }      if (!(graph.getEndpoint(c,b) == Endpoint.CIRCLE)) {        continue;      }      if (graph.getEndpoint(a,b) == Endpoint.TAIL) {        graph.setEndpoint(c,b,Endpoint.TAIL);        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        changeFlag=true;      }      if (graph.getEndpoint(a,b) == Endpoint.CIRCLE) {        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        graph.setEndpoint(c,b,Endpoint.TAIL);        changeFlag=true;      }    }  }}  }
class C{  public int red(){  return (int)scalar.val[0];}  }
class C{  void syncLoadFromFile(){  final int READ_FAILED=0;  final int READ_OK=1;  final int READ_BACKUP=2;  int result=READ_FAILED;  Progress.showDialog(Application.mainActivity,Progress.PROGRESS_LOADING);  if (getDelegator().readFromFile()) {    viewBox.setBorders(getDelegator().getLastBox());    result=READ_OK;  }  Progress.dismissDialog(Application.mainActivity,Progress.PROGRESS_LOADING);  if (result != READ_FAILED) {    Log.d("Logic","syncLoadfromFile: File read correctly");    View map=Application.mainActivity.getCurrentFocus();    try {      viewBox.setRatio((float)map.getWidth() / (float)map.getHeight());    } catch (    Exception e) {      try {        viewBox.setBorders(new BoundingBox(-180.0,-GeoMath.MAX_LAT,180.0,GeoMath.MAX_LAT));      } catch (      OsmException e1) {        e1.printStackTrace();      }    }    DataStyle.updateStrokes(STROKE_FACTOR / viewBox.getWidth());    loadEditingState(true);    map.invalidate();    UndoStorage.updateIcon();    if (result == READ_BACKUP) {      Toast.makeText(Application.mainActivity,R.string.toast_used_backup,Toast.LENGTH_LONG).show();    }  } else {    Log.d("Logic","syncLoadfromFile: File read failed");    Toast.makeText(Application.mainActivity,R.string.toast_state_file_failed,Toast.LENGTH_LONG).show();  }}  }
class C{  public boolean isStuckProgress(){  return isStuckProgress;}  }
class C{  private boolean isAllocationEqTotal() throws Exception {  boolean allocationEqTotal=true;  for (int j=0; j < m_runLines.length; j++) {    MDistributionRunLine runLine=m_runLines[j];    if (runLine.isActualMinGtTotal())     throw new Exception("Line " + runLine.getLine() + " Sum of Min Qty="+ runLine.getActualMin()+ " is greater than Total Qty="+ runLine.getTotalQty());    if (allocationEqTotal && !runLine.isActualAllocationEqTotal())     allocationEqTotal=false;  }  log.info("=" + allocationEqTotal);  return allocationEqTotal;}  }
class C{  public Boolean isLoginBySSLThumbprintSupported(){  return loginBySSLThumbprintSupported;}  }
class C{  public boolean canShow(ShareContent content,Mode mode){  return canShowImpl(content,(mode == Mode.AUTOMATIC) ? BASE_AUTOMATIC_MODE : mode);}  }
class C{  public static boolean isDefault(EObject element){  FDPropertyDecl decl=getPropertyDecl(element);  FDComplexValue value=getDefault(decl);  if (value != null && value.getSingle() != null) {    FDValue single=value.getSingle();    if (FDModelUtils.isEnumerator(single))     return FDModelUtils.getEnumerator(single) == element; else     return single == element;  }  return false;}  }
class C{  private int move(MStorage target){  log.info(target.toString());  BigDecimal qty=target.getQtyOnHand().negate();  MMovement mh=null;  MStorage[] sources=getSources(target.getM_Product_ID(),target.getM_Locator_ID());  if (sources.length > 0) {    mh=new MMovement(getCtx(),0,get_TrxName());    mh.setAD_Org_ID(target.getAD_Org_ID());    mh.setC_DocType_ID(p_C_DocType_ID);    mh.setDescription(getName());    if (!mh.save())     return 0;  } else {    return 0;  }  int lines=0;  for (int i=0; i < sources.length; i++) {    MStorage source=sources[i];    MMovementLine ml=new MMovementLine(mh);    ml.setM_Product_ID(target.getM_Product_ID());    ml.setM_LocatorTo_ID(target.getM_Locator_ID());    ml.setM_AttributeSetInstanceTo_ID(target.getM_AttributeSetInstance_ID());    ml.setM_Locator_ID(source.getM_Locator_ID());    ml.setM_AttributeSetInstance_ID(source.getM_AttributeSetInstance_ID());    BigDecimal qtyMove=qty;    if (qtyMove.compareTo(source.getQtyOnHand()) > 0)     qtyMove=source.getQtyOnHand();    ml.setMovementQty(qtyMove);    lines++;    ml.setLine(lines * 10);    if (!ml.save())     return 0;    qty=qty.subtract(qtyMove);    if (qty.signum() <= 0)     break;  }  mh.processIt(MMovement.ACTION_Complete);  mh.saveEx();  addLog(0,null,new BigDecimal(lines),"@M_Movement_ID@ " + mh.getDocumentNo() + " ("+ MRefList.get(getCtx(),MMovement.DOCSTATUS_AD_Reference_ID,mh.getDocStatus(),get_TrxName())+ ")");  eliminateReservation(target);  return lines;}  }
class C{  public String validateLanguage(String AD_Language){  String sql="SELECT * " + "FROM AD_Language " + "WHERE AD_Language=?";  MLanguage language=null;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setString(1,AD_Language);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     language=new MLanguage(m_ctx,rs,null);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.toString();  }  if (language == null) {    log.log(Level.SEVERE,"Language does not exist: " + AD_Language);    return "Language does not exist: " + AD_Language;  }  if (language.isActive()) {    if (language.isBaseLanguage())     return "";  } else {    log.log(Level.SEVERE,"Language not active or not system language: " + AD_Language);    return "Language not active or not system language: " + AD_Language;  }  log.info("Start Validating ... " + language);  language.maintain(true);  return "";}  }
class C{  public boolean isModified(){  return !CauchoUtil.getFullVersion().equals(_version);}  }
class C{  public static String javaUtilRegexEscape(String s){  if (s.indexOf("\\E") == -1) {    return "\\Q" + s + "\\E";  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    sb.append('\\');    sb.append(s.charAt(i));  }  return sb.toString();}  }
class C{  final void reject(Runnable command){  handler.rejectedExecution(command,this);}  }
class C{  public boolean isAskForPassword(){  return askForPassword;}  }
class C{  public void play(){  animation.play();}  }
class C{  public WFPanel(){  this(null,WORKFLOW_WhereClause,-1);}  }
class C{  public boolean onTarget(double tolerance){  return m_lastInput != Double.NaN && Math.abs(m_lastInput - m_desired) < tolerance;}  }
class C{  public boolean isPanEnabled(){  return isPanXEnabled() || isPanYEnabled();}  }
class C{  @Override public WildcardQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1) {    throw new IllegalStateException();  }  sentRequestMillis=System.currentTimeMillis();}  }
class C{  private boolean startProcess(String ProcedureName,ProcessInfo processInfo,Trx trx,boolean managedTrx){  int AD_PInstance_ID=processInfo.getAD_PInstance_ID();  log.info(ProcedureName + "(" + AD_PInstance_ID+ ")");  return ProcessUtil.startDatabaseProcedure(processInfo,ProcedureName,trx,managedTrx);}  }
class C{  public PublishingToMarketplaceNotPermittedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean addFrame(BufferedImage im){  if ((im == null) || !started) {    return false;  }  boolean ok=true;  try {    if (!sizeSet) {      setSize(im.getWidth(),im.getHeight());    }    image=im;    getImagePixels();    analyzePixels();    if (firstFrame) {      writeLSD();      writePalette();      if (repeat >= 0) {        writeNetscapeExt();      }    }    writeGraphicCtrlExt();    writeImageDesc();    if (!firstFrame) {      writePalette();    }    writePixels();    firstFrame=false;  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  public void removeResponseListener(ActionListener<NetworkEvent> a){  if (actionListeners == null) {    return;  }  actionListeners.removeListener(a);  if (actionListeners.getListenerCollection() == null || actionListeners.getListenerCollection().size() == 0) {    actionListeners=null;  }}  }
class C{  public NodeCollection(){}  }
class C{  public void onStart(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onStart();    }  }}  }
class C{  public ClientMessage receiveMessage(String queueName){  return receiveMessage(SimpleString.toSimpleString(queueName));}  }
class C{  public static boolean isEmpty(Object object){  return x.len(object) == 0;}  }
class C{  void stop(){  if (log.isDebugEnabled())   log.debug("Stopping deployment communication.");  busyLock.block();  ctx.io().removeMessageListener(TOPIC_CLASSLOAD,peerLsnr);}  }
class C{  public static void main(String[] args){  String root=null;  String number=null;  String firstId=null;  String networkFile=null;  String output=null;  String carFile=null;  String finalFile=null;  if (args.length == 5) {    root=args[0];    number=args[1];    firstId=args[2];    networkFile=args[3];    output=args[4];  } else   if (args.length == 7) {    root=args[0];    number=args[1];    firstId=args[2];    networkFile=args[3];    output=args[4];    carFile=args[5];    finalFile=args[6];  } else {    throw new IllegalArgumentException("Incorrect number of arguments.");  }  Scenario sNew=ScenarioUtils.createScenario(ConfigUtils.createConfig());  PopulationFactory pf=sNew.getPopulation().getFactory();  NetworkReaderMatsimV1 nr=new NetworkReaderMatsimV1(sNew.getNetwork());  nr.readFile(networkFile);  XY2Links xy=new XY2Links(sNew.getNetwork(),null);  int id=Integer.parseInt(firstId);  log.info("Reading commercial vehicle plans files from " + root);  List<Scenario> listSc=new ArrayList<Scenario>(10);  for (int i=1; i <= 10; i++) {    String filename=root + "plansGauteng5000_Sample" + i+ ".xml";    Scenario s=ScenarioUtils.createScenario(ConfigUtils.createConfig());    PopulationReader pr=new PopulationReader(s);    pr.readFile(filename);    listSc.add(s);  }  Random r=MatsimRandom.getRandom();  log.info("Create " + number + " commercial vehicle agents.");  int counter=0;  while (counter < Integer.parseInt(number)) {    int rList=(int)Math.round(r.nextDouble() * 9);    List<Id<Person>> agentIds=new ArrayList<>();    Set<Id<Person>> Ids=listSc.get(rList).getPopulation().getPersons().keySet();    for (    Id<Person> id2 : Ids) {      agentIds.add(id2);    }    int rId=(int)Math.floor(r.nextDouble() * agentIds.size());    Person p=pf.createPerson(Id.create(id,Person.class));    Plan plan=listSc.get(rList).getPopulation().getPersons().get(agentIds.get(rId)).getSelectedPlan();    xy.run(plan);    p.addPlan(plan);    sNew.getPopulation().addPerson(p);    counter++;    id++;  }  log.info("Created " + counter + " commercial vehicles (Done)");  List<Id<Person>> listIds=new ArrayList<>();  for (  Id<Person> i : sNew.getPopulation().getPersons().keySet()) {    if (listIds.contains(i)) {      log.error("The Id " + i.toString() + " already exists!");    } else {      listIds.add(i);    }  }  PopulationWriter pw=new PopulationWriter(sNew.getPopulation(),sNew.getNetwork());  pw.write(output);  if (carFile != null) {    log.info("Combining car and commercial vehicles.");    Scenario car=ScenarioUtils.createScenario(ConfigUtils.createConfig());    PopulationReader pr=new PopulationReader(car);    pr.readFile(carFile);    for (    Id idCar : car.getPopulation().getPersons().keySet()) {      Person carPerson=car.getPopulation().getPersons().get(idCar);      xy.run(carPerson);      sNew.getPopulation().addPerson(carPerson);    }    PopulationWriter pw2=new PopulationWriter(sNew.getPopulation(),sNew.getNetwork());    pw2.write(finalFile);  }  log.info("---------------------------------------");  log.info("              COMPLETED");  log.info("=======================================");}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  protected static int LEA_SHIFT(Operand op,int trueCost,int falseCost){  if (op.isIntConstant()) {    int val=IV(op);    if (val >= 0 && val <= 3) {      return trueCost;    }  }  return falseCost;}  }
class C{  public TreeRTGCeibaRosea(){  super();  length=16f;  branch=5;  verStart=0.32f;  verRand=0.1f;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.996 -0500",hash_original_method="81A7E4EE2F08FBBD96C14DB561A7E449",hash_generated_method="377B7C76F20CFA7DA93BEAD5B14F9315") public final static String formatProtocolVersion(final ProtocolVersion version,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.appendProtocolVersion(null,version).toString();}  }
class C{  void add(Interval interval){  add(interval.getStart(),interval.getEnd());}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean removeAndCloseReceiver(SpanReceiver receiver){  if (!removeReceiver(receiver)) {    return false;  }  try {    LOG.trace(toString() + ": closing receiver " + receiver.toString());    receiver.close();  } catch (  Throwable t) {    LOG.error(toString() + ": error closing " + receiver.toString(),t);  }  return true;}  }
class C{  public void testBug17898() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug17898","(param1 VARCHAR(50), OUT param2 INT)\nBEGIN\nDECLARE rtn INT;\n" + "SELECT 1 INTO rtn;\nSET param2=rtn;\nEND");  CallableStatement cstmt=this.conn.prepareCall("{CALL testBug17898('foo', ?)}");  cstmt.registerOutParameter(1,Types.INTEGER);  cstmt.execute();  assertEquals(1,cstmt.getInt(1));  cstmt.clearParameters();  cstmt.registerOutParameter("param2",Types.INTEGER);  cstmt.execute();  assertEquals(1,cstmt.getInt(1));}  }
class C{  public void after(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  for (  UpdateHandler handler : handlers) {    handler.after(oldProps,newProps);  }}  }
class C{  public IgfsEvent(IgfsPath path,ClusterNode node,int type){  super(node,"IGFS event.",type);  this.path=path;}  }
class C{  protected final void transitionToHaltingState(){  mSmHandler.transitionTo(mSmHandler.mHaltingState);}  }
class C{  public long toTotalMonths(){  return years * 12L + months;}  }
class C{  public A(){}  }
class C{  public Object findCell00(String id,Map params,String returnType){  ReadonlyTranSession session=transactionManager.openDelayReadTran();  try {    return session.findCell00(id,params,returnType);  }  finally {    session.close();  }}  }
class C{  private boolean tryRemoveUnreachableKeys(SimplifierTool tool){  if (!(value().stamp() instanceof IntegerStamp)) {    return false;  }  IntegerStamp integerStamp=(IntegerStamp)value().stamp();  if (integerStamp.isUnrestricted()) {    return false;  }  List<KeyData> newKeyDatas=new ArrayList<>(keys.length);  ArrayList<AbstractBeginNode> newSuccessors=new ArrayList<>(blockSuccessorCount());  for (int i=0; i < keys.length; i++) {    if (integerStamp.contains(keys[i])) {      newKeyDatas.add(new KeyData(keys[i],keyProbabilities[i],addNewSuccessor(keySuccessor(i),newSuccessors)));    }  }  if (newKeyDatas.size() == keys.length) {    return false;  } else   if (newKeyDatas.size() == 0) {    tool.addToWorkList(defaultSuccessor());    graph().removeSplitPropagate(this,defaultSuccessor());    return true;  } else {    int newDefaultSuccessor=addNewSuccessor(defaultSuccessor(),newSuccessors);    double newDefaultProbability=keyProbabilities[keyProbabilities.length - 1];    doReplace(tool,value(),newKeyDatas,newSuccessors,newDefaultSuccessor,newDefaultProbability);    return true;  }}  }
class C{  public void startHardwareClock(Date now){  setTime(now);  return;}  }
class C{  private void enqueue(Node<E> node){  last=last.next=node;}  }
class C{  public ECKey decrypt(KeyParameter aesKey) throws KeyCrypterException {  final KeyCrypter crypter=getKeyCrypter();  if (crypter == null)   throw new KeyCrypterException("No key crypter available");  return decrypt(crypter,aesKey);}  }
class C{  public Review clear(){  restaurantId=0L;  type=null;  userId=0L;  comments=null;  rating=0;  writtenOn=null;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int num=getInt(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null) {synchronized (tun) {      tun.getRemoteInfo(remoteName);      tun.setChannelDigits(num);      tun.saveChanges();    }  }  return null;}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  void initState(){  mIndex=-1;  mWho=null;  mAdded=false;  mRemoving=false;  mResumed=false;  mFromLayout=false;  mInLayout=false;  mRestored=false;  mBackStackNesting=0;  mFragmentManager=null;  mActivity=null;  mFragmentId=0;  mContainerId=0;  mTag=null;  mHidden=false;  mDetached=false;  mRetaining=false;  mLoaderManager=null;  mLoadersStarted=false;  mCheckedForLoaderManager=false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.SINGLE_ASSOCIATION_END___MULTIPLICITY_1:    return getMultiplicity_1();case UmplePackage.SINGLE_ASSOCIATION_END___TYPE_1:  return getType_1();case UmplePackage.SINGLE_ASSOCIATION_END___ROLE_NAME_1:return getRoleName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void findAllKdContainers(int kindOfDistance,Operator operator) throws ProcessStoppedException {  for (int i=0; i < this.getNumberOfObjects(); i++) {    if (operator != null) {      operator.checkForStop();    }    this.findKdistanceContainers(this.listOfObjects.elementAt(i),kindOfDistance);  }}  }
class C{  public static Pointer to(byte values[]){  return new Pointer(ByteBuffer.wrap(values));}  }
class C{  public CaseWhenThenExpression add(Expression when,Expression then){  int size=this.getChildren().size();  if (size % 2 == 0) {    this.addChild(when);    this.addChild(then);  } else {    this.getChildren().add(this.getChildren().size() - 1,when);    this.getChildren().add(this.getChildren().size() - 1,then);  }  return this;}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  @SuppressWarnings("unchecked") private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  this.id=(Integer)stream.readObject();  this.lhs=(NonTerminal)stream.readObject();  this.rhs=(List<Symbol>)stream.readObject();  deserializeReduceAction(stream);  this.lastTerminal=(Terminal)stream.readObject();  this.rhsSizeWithoutEpsilon=(Integer)stream.readObject();  this.hashCode=(Integer)stream.readObject();}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  public Pos3D diff(Pos3D pos){  return new Pos3D(xPos - pos.xPos,yPos - pos.yPos,zPos - pos.zPos);}  }
class C{  @Override public int hashCode(){  return getName().hashCode();}  }
class C{  public KernelPoints(KernelTrick k,int points,double errorTolerance,boolean mergeGrams){  if (points < 1)   throw new IllegalArgumentException("Number of points must be positive, not " + points);  this.k=k;  this.errorTolerance=errorTolerance;  this.points=new ArrayList<KernelPoint>(points);  this.points.add(new KernelPoint(k,errorTolerance));  this.points.get(0).setMaxBudget(maxBudget);  this.points.get(0).setBudgetStrategy(budgetStrategy);  for (int i=1; i < points; i++)   addNewKernelPoint();}  }
class C{  public BinaryPoint(String name,byte[] packedPoint,IndexableFieldType type){  super(name,packedPoint,type);  if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {    throw new IllegalArgumentException("packedPoint is length=" + packedPoint.length + " but type.pointDimensionCount()="+ type.pointDimensionCount()+ " and type.pointNumBytes()="+ type.pointNumBytes());  }}  }
class C{  public void loadStructures(Set<Method> dynamicMethodsToWrite){  for (  Field configuredField : getListOfFields(configuredClass)) {    String targetFieldName=configReader.retrieveTargetFieldName(configuredField);    if (targetFieldName == THE_FIELD_IS_NOT_CONFIGURED)     continue;    boolean isNestedMapping=isNestedMapping(targetFieldName);    Field targetField=null;    NestedMappingInfo nestedMappingInfo=null;    if (isNestedMapping)     try {      nestedMappingInfo=loadNestedMappingInformation(xml,targetClass,targetFieldName,sourceClass,destinationClass,configuredField);      targetField=nestedMappingInfo.getLastNestedField();    } catch (    InvalidNestedMappingException e) {      Error.invalidNestedMapping(configuredClass,configuredField,targetClass,e.getMessage(),e.getMessages().get(InvalidNestedMappingException.FIELD));    } else     targetField=retrieveField(targetClass,targetFieldName);    MappedField configuredMappedField=new MappedField(configuredField);    MappedField targetMappedField=isNestedMapping ? nestedMappingInfo.getLastNestedMappedField() : new MappedField(targetField);    MappedField destinationMappedField=isDestConfigured ? configuredMappedField : targetMappedField;    MappedField sourceMappedField=isDestConfigured ? targetMappedField : configuredMappedField;    Field destinationField=isDestConfigured ? configuredField : targetField;    Field sourceField=isDestConfigured ? targetField : configuredField;    if (isNestedMapping)     configReader.loadAccessors(nestedMappingInfo.getLastNestedClass(),configuredMappedField,targetMappedField); else     configReader.loadAccessors(configuredMappedField,targetMappedField);    boolean isUndefined=false;    try {      isUndefined=operationAnalyzer.isUndefined(destinationField,sourceField);    } catch (    Exception e) {      Error.badConversion(destinationField,destinationClass,sourceField,sourceClass,e.getMessage());    }    if (isUndefined)     Error.undefinedMapping(destinationField,destinationClass,sourceField,sourceClass);    InfoOperation info=operationAnalyzer.getInfo();    OperationType operationType=info.getOperationType();    AGeneralOperation operation=OperationFactory.getOperation(operationType);    if (operationType.isBasic())     simpleOperations.add((ASimpleOperation)operation);    if (operationType.isComplex())     complexOperations.add(((AComplexOperation)operation).setDestinationClass(defineStructure(destinationMappedField.getValue(),sourceMappedField.getValue())));    if (operationType.isRecursive())     ((ARecursiveOperation)operation).setDynamicMethodsToWrite(dynamicMethodsToWrite).setXml(xml).setConfigChosen(isNull(info.getConfigChosen()) ? configurationChosen : info.getConfigChosen());    operation.setDestinationField(destinationMappedField).setSourceField(sourceMappedField).setInfoOperation(info).setNestedMappingInfo(nestedMappingInfo);    boolean isAvoidSet=false;    boolean isConversion=info.getOperationType().isAConversion();    if (isConversion)     isAvoidSet=conversionAnalyzer.getMethod().isAvoidSet();    if (!isNestedMapping || targetClass != destinationClass)     if (isAvoidSet)     verifyGetterMethods(destinationClass,destinationMappedField); else     verifiesAccessorMethods(destinationClass,destinationMappedField);    if (!isNestedMapping || targetClass != sourceClass)     verifyGetterMethods(sourceClass,sourceMappedField);    findSetterMethods(sourceClass,sourceMappedField);    operation.avoidDestinationSet(isAvoidSet);    if (isConversion) {      conversionHandler.load(conversionAnalyzer).from(sourceMappedField).to(destinationMappedField);      if (conversionHandler.toBeCreated())       dynamicMethodsToWrite.add(conversionHandler.loadMethod());      operation.setConversionMethod(conversionHandler.getMethod()).setMemberShip(conversionHandler.getMembership());    }  }  if (simpleOperations.isEmpty() && complexOperations.isEmpty())   Error.absentRelationship(configuredClass,targetClass);}  }
class C{  public void add(final ConversationStates state,final Collection<String> triggerStrings,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action){  engine.add(state,triggerStrings,condition,secondary,nextState,reply,action);}  }
class C{  public void listTypes() throws SQLException {  ResultSet rs=m_md.getTypeInfo();  while (rs.next()) {    log.info("");    dump(rs);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public StrBuilder append(final double value){  return append(String.valueOf(value));}  }
class C{  public SketchesException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Object loginUser(String SID,String userOrEmail,String userpass,RoomClient currentClient,Boolean storePermanent){  try {    log.debug("Login user SID : " + SID + " Stored Permanent :"+ storePermanent);    String hql="SELECT c from Users AS c " + "WHERE " + "(c.login LIKE :userOrEmail OR c.adresses.email LIKE :userOrEmail  ) "+ "AND c.deleted <> :deleted";    TypedQuery<Users> query=em.createQuery(hql,Users.class);    query.setParameter("userOrEmail",userOrEmail);    query.setParameter("deleted","true");    List<Users> ll=query.getResultList();    log.debug("debug SIZE: " + ll.size());    if (ll.size() == 0) {      return new Long(-10);    } else {      Users users=ll.get(0);      users=this.refreshUserObject(users);      if (manageCryptStyle.getInstanceOfCrypt().verifyPassword(userpass,users.getPassword())) {        log.info("chsum OK: " + users.getUser_id());        Boolean bool=sessionManagement.updateUser(SID,users.getUser_id(),storePermanent,users.getLanguage_id());        if (bool == null) {          return new Long(-1);        } else         if (!bool) {          return new Long(-35);        }        if (users.getStatus() != null && users.getStatus().equals(0)) {          return -41L;        }        users.setUserlevel(getUserLevel(users.getLevel_id()));        updateLastLogin(users);        if (currentClient != null) {          currentClient.setUser_id(users.getUser_id());        }        log.debug("loginUser " + users.getOrganisation_users());        if (!users.getOrganisation_users().isEmpty()) {          log.debug("loginUser size " + users.getOrganisation_users().size());        } else {          throw new Exception("No Organization assigned to user");        }        return users;      } else {        return new Long(-11);      }    }  } catch (  Exception ex2) {    log.error("[loginUser]: ",ex2);  }  return new Long(-1);}  }
class C{  public boolean forwardIfCurrentAndNoVarExt(String str){  int c=pos;  if (forwardIfCurrent(str)) {    if (!isCurrentBetween('a','z') && !isCurrentBetween('0','9') && !isCurrent('_'))     return true;  }  pos=c;  return false;}  }
class C{  public ColumnMapper mapperFor(TableId tableId,Column column){  ColumnId id=new ColumnId(tableId,column.name());  Optional<MapperRule> matchingRule=rules.stream().filter(null).findFirst();  if (matchingRule.isPresent()) {    return matchingRule.get().mapper;  }  return null;}  }
class C{  public boolean isExt(){  boolean isExt=false;  if (getType() == ArchiveFldType.LONG_TEXT)   isExt=true;  return isExt;}  }
class C{  public static float[] join(float[]... arrays){  if (arrays.length == 0) {    return new float[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  float[] array : arrays) {    length+=array.length;  }  float[] result=new float[length];  length=0;  for (  float[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public boolean isConnected(){  return isConnected;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.UNSCHEDULE_TIME_EVENT__TIME_EVENT:    return timeEvent != null;}return super.eIsSet(featureID);}  }
class C{  protected void verifySubscriber(DataSource<Object> dataSource,DataSource<Object> underlyingDataSource,int expected){switch (expected) {case NO_INTERACTIONS:    verifyNoMoreInteractionsAll();  break;case ON_NEW_RESULT:mInOrder.verify(mDataSubscriber).onNewResult(dataSource);verifyNoMoreInteractionsAll();break;case ON_FAILURE:mInOrder.verify(underlyingDataSource).getFailureCause();mInOrder.verify(mDataSubscriber).onFailure(dataSource);verifyNoMoreInteractionsAll();break;case ON_CANCELLATION:verify(mDataSubscriber).onCancellation(dataSource);verifyNoMoreInteractionsAll();break;}}  }
class C{  public void disable() throws IOException {  if (!isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("true");    configuration.save();  }  FMLCommonHandler.instance().bus().unregister(this);}  }
class C{  public void testAddContextParamToDocumentWithTheSameContextParam() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <context-param>" + "    <param-name>param</param-name>"+ "    <param-value>value</param-value>"+ "  </context-param>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  ContextParam contextParamElement=new ContextParam((WebXmlTag)webXml.getDescriptorType().getTagByName("context-param"),"param","value");  try {    webXml.addTag(contextParamElement);    fail("Expected IllegalStateException");  } catch (  IllegalStateException ise) {  }}  }
class C{  private void paintCanvas(final PaintEvent e){  final Rectangle clientArea=((Canvas)e.widget).getClientArea();  final GC gc=e.gc;  handleFadeIn();  handleFadeOut();  drawBackground(clientArea,gc);  drawTicker(clientArea,gc);  drawText(clientArea,gc);}  }
class C{  private void initializeActivity(Bundle savedInstanceState){  if (savedInstanceState == null) {    this.userId=getIntent().getIntExtra(INTENT_EXTRA_PARAM_USER_ID,-1);    addFragment(R.id.fl_fragment,UserDetailsFragment.newInstance(this.userId),UserDetailsFragment.TAG);  } else {    this.userId=savedInstanceState.getInt(INSTANCE_STATE_PARAM_USER_ID);  }}  }
class C{  public final boolean at(char c,CharSequence csq){  return index < csq.length() ? csq.charAt(index) == c : false;}  }
class C{  public Object clone() throws CloneNotSupportedException {  OneStepIterator clone=(OneStepIterator)super.clone();  if (m_iterator != null) {    clone.m_iterator=m_iterator.cloneIterator();  }  return clone;}  }
class C{  public StaxWriter(final QNameMap qnameMap,final XMLStreamWriter out,final boolean writeEnclosingDocument,final boolean namespaceRepairingMode,final NameCoder nameCoder) throws XMLStreamException {  super(nameCoder);  this.qnameMap=qnameMap;  this.out=out;  this.writeEnclosingDocument=writeEnclosingDocument;  this.namespaceRepairingMode=namespaceRepairingMode;  if (writeEnclosingDocument) {    out.writeStartDocument();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SEQUATIONS__NAME:    setName((String)newValue);  return;case GamlPackage.SEQUATIONS__EQUATIONS:getEquations().clear();getEquations().addAll((Collection<? extends S_Assignment>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  public void start(long docId){  reader=new Reader(serverUUID,eventBus,docId);  readerThread=new Thread(reader);  readerThread.start();}  }
class C{  public static final void readFully(InputStream is,byte[] buffer,int offset,int len) throws IOException {  int temp;  while (len > 0) {    temp=is.read(buffer,offset,len);    if (temp == -1)     throw new EOFException("Cannot read all " + len + " bytes needed to form this token!");    offset+=temp;    len-=temp;  }}  }
class C{  public DbSchemaEjbGenerator(GeneratedTables genTables,SchemaElement schemaElement,CollectionType collectionType,boolean useColumnNamesInRelationships,boolean useDefaults,boolean generateUnresolvedRelationships){  this.schemaElement=schemaElement;  this.genTables=genTables;  this.colectionType=collectionType;  this.useColumNamesInRelations=useColumnNamesInRelationships;  this.generateUnresolvedRelationships=generateUnresolvedRelationships;  this.useDefaults=useDefaults;  tablesReferecedByOtherTables=getTablesReferecedByOtherTables(schemaElement);  primaryKeyIsForeignKeyTables=getTablesReferencesOtherTablesWithPrimaryKeyMatch(schemaElement);  buildCMPSet();}  }
class C{  public int rob(TreeNode root){  int[] res=dfs(root);  return Math.max(res[0],res[1]);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(4);  state=testNode.hasAttribute("domestic");  assertFalse("throw_False",state);}  }
class C{  @Override protected void onUnload(){  super.onUnload();  shim.removeFromParent();}  }
class C{  public static void editAce(@Required String id){  String type=ShareACLForm.extractTypeFromId(id);  String name=ShareACLForm.extractNameFromId(id);  String domain=ShareACLForm.extractDomainFromId(id);  String fileSystem=ShareACLForm.extractFileSystemFromId(id);  String shareName=ShareACLForm.extractShareNameFromId(id);  String permission=ShareACLForm.extractPermissionFromId(id);  if ("null".equals(domain)) {    domain="";  }  ShareACLForm shareACL=new ShareACLForm();  shareACL.type=type;  shareACL.name=name;  shareACL.domain=domain;  shareACL.permission=permission;  renderArgs.put("permissionOptions",StringOption.options(new String[]{"Read","Change","FullControl"}));  renderArgs.put("fileSystemId",uri(fileSystem));  ViPRCoreClient client=BourneUtil.getViprClient();  FileShareRestRep restRep=client.fileSystems().get(uri(fileSystem));  renderArgs.put("fileSystemName",restRep.getName());  renderArgs.put("shareName",shareName);  renderArgs.put("TYPE",type.toUpperCase());  render(shareACL);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Instruction addInstruction(final Instruction instruction){  Preconditions.checkNotNull(instruction,"Error: Instruction argument can not be null");  m_node.addInstruction(instruction.getNative(),null);  return instruction;}  }
class C{  public static String hashToString(byte[] hash){  StringBuilder buf=new StringBuilder();  for (  byte b : hash) {    buf.append(HEX_CHARS[(b >> 4) & 0xF]);    buf.append(HEX_CHARS[b & 0xF]);  }  return buf.toString();}  }
class C{  public static boolean close(Closeable stream){  if (stream != null) {    try {      stream.close();      return true;    } catch (    IOException e) {      Log.e(LogUtil.TAG,"Error closing stream",e);    }  }  return false;}  }
class C{  public static boolean isBetweenInclusive(Date selectedDate,Calendar startCal,Calendar endCal){  Calendar selectedCal=Calendar.getInstance();  selectedCal.setTime(selectedDate);  return sameDate(selectedCal,startCal) || selectedCal.after(startCal) && selectedCal.before(endCal);}  }
class C{  protected boolean hasColumn(String name){  return getColumnNumber(name) != -1;}  }
class C{  public void checkpointEnd(){  if (!_isWhileCheckpoint) {    throw new IllegalStateException();  }  _isWhileCheckpoint=false;  byte[] headerBuffer=_headerBuffer;  BitsUtil.writeInt16(headerBuffer,0,CHECKPOINT_END);  writeImpl(headerBuffer,0,2);  flush();  _lastCheckpointEnd=_index - _startAddress;  writeTail(_os);}  }
class C{  public void addFieldBuffered(VEditor editor,GridField mField){  wrap=mField != null ? !mField.isSameLine() : false;  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);  prevEditor=editor;  prevField=mField;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static void logStatus(CoreException ce){  getPluginInstance().getLog().log(ce.getStatus());}  }
class C{  protected synchronized void commitPages(IProgressMonitor monitor,boolean onSave){  for (int i=0; i < getPageCount(); i++) {    if (pages.get(i) instanceof BasicFormPage) {      BasicFormPage page=(BasicFormPage)pages.get(i);      if (page.isInitialized()) {        page.commit(onSave);      }    }  }}  }
class C{  public GameTurn removeFirstTurnFor(Entity entity){  assert (phase != Phase.PHASE_MOVEMENT);  for (int i=turnIndex; i < turnVector.size(); i++) {    GameTurn turn=turnVector.elementAt(i);    if (turn.isValidEntity(entity,this)) {      turnVector.removeElementAt(i);      return turn;    }  }  return null;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new AbsListView.LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public Vertex createPunctuation(String text,Vertex meaning,Network network){  Vertex word=createWord(text,meaning,network,Primitive.PUNCTUATION);  return word;}  }
class C{  public void testFirst() throws Exception {  int upper=10;  Range index=getRange("first",upper);  assertEquals("first",index.getRanges());  assertEquals(1,index.getSelection().length);  assertEquals(0,index.getSelection()[0]);}  }
class C{  public static UserDTO update(UserDTO newUserDTO){  UserDTO existingUser=findById(newUserDTO.getId());  if (existingUser != null) {    BeanUtils.copyProperties(newUserDTO,existingUser,"password");    existingUser.setAuthorities(authorities.get(existingUser.getProfile()));  }  return null;}  }
