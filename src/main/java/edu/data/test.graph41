class C{  public static <T>T result(Future<T> result) throws IOException {  return result(result,Duration.Top());}  }
class C{  private static double computeCorrelationDistanceBetweenSeries(String seriesA,String seriesB,Table<String,String,Double> seriesAndClass2Value){  final Set<String> classes=seriesAndClass2Value.columnKeySet();  final ArrayList<Double> xValues=new ArrayList<>(classes.size());  final ArrayList<Double> yValues=new ArrayList<>(classes.size());  for (  String className : classes) {    xValues.add(seriesAndClass2Value.get(seriesA,className));    yValues.add(seriesAndClass2Value.get(seriesB,className));  }  return 1 - Correlation.computePersonsCorrelationCoefficent(classes.size(),xValues,yValues);}  }
class C{  public OpenForReadResult openForRead(Uri uri) throws IOException {  return openForRead(uri,false);}  }
class C{  public static double[] convolve(final double[] signal1,final double[] signal2){  if (signal1 == null || signal2 == null)   throw new NullPointerException("Received null argument");  if (signal1.length != signal2.length)   throw new IllegalArgumentException("Arrays must be equal length");  int N=signal1.length;  assert MathUtils.isPowerOfTwo(N);  double[] fft1=new double[N];  System.arraycopy(signal1,0,fft1,0,N);  double[] fft2=new double[N];  System.arraycopy(signal2,0,fft2,0,N);  realTransform(fft1,false);  realTransform(fft2,false);  fft1[0]=fft1[0] * fft2[0];  fft1[1]=fft1[1] * fft2[1];  for (int i=2; i < N; i+=2) {    double tmp=fft1[i];    fft1[i]=fft1[i] * fft2[i] - fft1[i + 1] * fft2[i + 1];    fft1[i + 1]=tmp * fft2[i + 1] + fft1[i + 1] * fft2[i];  }  realTransform(fft1,true);  return fft1;}  }
class C{  public InfoBarLayout(Context context,InfoBarView infoBarView,int iconResourceId,Bitmap iconBitmap,CharSequence message){  super(context);  mInfoBarView=infoBarView;  Resources res=getResources();  mMargin=res.getDimensionPixelOffset(R.dimen.infobar_margin);  mIconSize=res.getDimensionPixelSize(R.dimen.infobar_icon_size);  mMinWidth=res.getDimensionPixelSize(R.dimen.infobar_min_width);  mAccentColor=ApiCompatibilityUtils.getColor(res,R.color.infobar_accent_blue);  mCloseButton=new ImageButton(context);  mCloseButton.setId(R.id.infobar_close_button);  mCloseButton.setImageResource(R.drawable.btn_close);  TypedArray a=getContext().obtainStyledAttributes(new int[]{R.attr.selectableItemBackground});  Drawable closeButtonBackground=a.getDrawable(0);  a.recycle();  mCloseButton.setBackground(closeButtonBackground);  mCloseButton.setPadding(mMargin,mMargin,mMargin,mMargin);  mCloseButton.setOnClickListener(this);  mCloseButton.setContentDescription(res.getString(R.string.infobar_close));  mCloseButton.setLayoutParams(new LayoutParams(0,-mMargin,-mMargin,-mMargin));  if (iconResourceId != 0 || iconBitmap != null) {    mIconView=new ImageView(context);    if (iconResourceId != 0) {      mIconView.setImageResource(iconResourceId);    } else     if (iconBitmap != null) {      mIconView.setImageBitmap(iconBitmap);    }    mIconView.setLayoutParams(new LayoutParams(0,0,mMargin / 2,0));    mIconView.getLayoutParams().width=mIconSize;    mIconView.getLayoutParams().height=mIconSize;    mIconView.setFocusable(false);  }  mMessageTextView=(TextView)LayoutInflater.from(context).inflate(R.layout.infobar_text,null);  mMessageTextView.setText(message,TextView.BufferType.SPANNABLE);  mMessageTextView.setMovementMethod(LinkMovementMethod.getInstance());  mMessageTextView.setLinkTextColor(mAccentColor);  mMessageView=mMessageTextView;}  }
class C{  public boolean isAcontains(BitSet H){  BitSet M=((BitSet)A.clone());  M.and(H);  return M.cardinality() == H.cardinality();}  }
class C{  public RInteroperator() throws IOException {  Process p=Runtime.getRuntime().exec("R --help");  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  public PhotosGetAllCommentsQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public void paint(Graphics g){  g.translate(0,-visibleRow * getRowHeight());  super.paint(g);}  }
class C{  public PlacesGetTypesQuery(VkApiClient client,UserActor actor){  super(client,"places.getTypes",Utils.buildParametrizedType(List.class,Types.class));  accessToken(actor.getAccessToken());}  }
class C{  public static boolean isGpsEnabled(Context context){  LocationManager lm=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  return lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}  }
class C{  public byte[] decrypt(final byte[] input){  if (input == null || input.length == 0) {    return input;  }  try {    BufferedBlockCipher cipher=getCipher(false);    byte[] bytes=Base64.getDecoder().decode(input);    byte[] output=new byte[cipher.getOutputSize(bytes.length)];    int length=cipher.processBytes(bytes,0,bytes.length,output,0);    length+=cipher.doFinal(output,length);    return Arrays.copyOfRange(output,0,length);  } catch (  Exception e) {    throw new IllegalStateException("Decryption error!",e);  }}  }
class C{  public static String toString(Entry entry){  if (entry == null)   return "null";  Field[] fields=fieldInfo(entry);  StringBuffer str=new StringBuffer(entry.getClass().getName());  str.append('(');  for (int i=0; i < fields.length; i++) {    try {      Field f=fields[i];      if (i > 0)       str.append(',');      str.append(f.getName());      str.append('=');      str.append(f.get(entry));    } catch (    IllegalAccessException e) {      throw new AssertionError(e);    }  }  str.append(')');  return str.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeExtendDuration_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200420,value0,skillname);}  }
class C{  public AbstractColumn(Class columnType){  this(columnType,null);}  }
class C{  public MithraTransaction startOrContinueTransaction() throws MithraTransactionException {  return this.startOrContinueTransaction(defaultTransactionStyle);}  }
class C{  public static S2LatLngRect fromCenterSize(S2LatLng center,S2LatLng size){  return fromPoint(center).expanded(size.mul(0.5));}  }
class C{  private void drawYAxisTicksSqrt(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double maxValue=getChartData().getRangeY().get2().doubleValue();  double yFactor=(y0 - y1) / Math.sqrt(maxValue);  double value=0;  double previousY=-100000;  int mantisse=0;  int exponent=0;  while (value <= maxValue) {    if (maxDisplayedYValue != null && value > maxDisplayedYValue)     break;    double yPos=y0 - (value > 0 ? Math.sqrt(value) : 0) * yFactor;    if ((mantisse <= 1 || mantisse == 5) && Math.abs(yPos - previousY) >= 20) {      String label="" + (long)value;      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      previousY=yPos;      int x=leftMargin - (int)(labelSize.getWidth() + 3);      int y=(int)(yPos + labelSize.getHeight() / 2.0);      gc.setColor(Color.BLACK);      gc.drawString(label,x,y);      if (gridStyle == GridStyle.BELOW) {        gc.setColor(Color.LIGHT_GRAY);        gc.drawLine(x0,(int)Math.round(yPos),x1,(int)Math.round(yPos));      }    }    if (mantisse < 9)     mantisse++; else {      mantisse=1;      exponent++;    }    value=mantisse * Math.pow(10,exponent);  }  String axisLabel=getChartData().getCountsLabel() + " (sqrt scale)";  Dimension labelSize=Basic.getStringSize(gc,axisLabel,gc.getFont()).getSize();  int x=10;  int y=(y0 + y1) / 2 - labelSize.width;  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  drawString(gc,axisLabel,x,y,Math.PI / 2);}  }
class C{  private Utilities(){}  }
class C{  public void mergeCluster(Cluster xCluster){  if (xCluster == null) {    throw new NullPointerException("Input cluster should not be null");  }  ArrayList<String> xDataPoints=xCluster.getAllDataPoints();  Iterator<String> it=xDataPoints.iterator();  while (it.hasNext()) {    this.dataPoints.add(it.next());  }  this.clusterSize=this.dataPoints.size();}  }
class C{  void logCurrentState(@Nullable ContentViewCore cvc){  if (cvc == null || !ContextualSearchFieldTrial.isEnabled(cvc.getContext())) {    return;  }  ContextualSearchUma.logPreferenceState();  int promoTapsRemaining=getPromoTapsRemaining();  if (promoTapsRemaining >= 0)   ContextualSearchUma.logPromoTapsRemaining(promoTapsRemaining);  DisableablePromoTapCounter promoTapCounter=getPromoTapCounter();  boolean wasOpened=!promoTapCounter.isEnabled();  int count=promoTapCounter.getCount();  if (wasOpened) {    ContextualSearchUma.logPromoTapsBeforeFirstOpen(count);  } else {    ContextualSearchUma.logPromoTapsForNeverOpened(count);  }}  }
class C{  protected String[] do_upload_file(byte cmd,String group_name,String master_filename,String prefix_name,String file_ext_name,long file_size,UploadCallback callback,NameValuePair[] meta_list) throws IOException, MyException {  byte[] header;  byte[] ext_name_bs;  String new_group_name;  String remote_filename;  boolean bNewConnection;  Socket storageSocket;  byte[] sizeBytes;  byte[] hexLenBytes;  byte[] masterFilenameBytes;  boolean bUploadSlave;  int offset;  long body_len;  bUploadSlave=((group_name != null && group_name.length() > 0) && (master_filename != null && master_filename.length() > 0) && (prefix_name != null));  if (bUploadSlave) {    bNewConnection=this.newUpdatableStorageConnection(group_name,master_filename);  } else {    bNewConnection=this.newWritableStorageConnection(group_name);  }  try {    storageSocket=this.storageServer.getSocket();    ext_name_bs=new byte[ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN];    Arrays.fill(ext_name_bs,(byte)0);    if (file_ext_name != null && file_ext_name.length() > 0) {      byte[] bs=file_ext_name.getBytes(ClientGlobal.g_charset);      int ext_name_len=bs.length;      if (ext_name_len > ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN) {        ext_name_len=ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN;      }      System.arraycopy(bs,0,ext_name_bs,0,ext_name_len);    }    if (bUploadSlave) {      masterFilenameBytes=master_filename.getBytes(ClientGlobal.g_charset);      sizeBytes=new byte[2 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE];      body_len=sizeBytes.length + ProtoCommon.FDFS_FILE_PREFIX_MAX_LEN + ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN+ masterFilenameBytes.length+ file_size;      hexLenBytes=ProtoCommon.long2buff(master_filename.length());      System.arraycopy(hexLenBytes,0,sizeBytes,0,hexLenBytes.length);      offset=hexLenBytes.length;    } else {      masterFilenameBytes=null;      sizeBytes=new byte[1 + 1 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE];      body_len=sizeBytes.length + ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + file_size;      sizeBytes[0]=(byte)this.storageServer.getStorePathIndex();      offset=1;    }    hexLenBytes=ProtoCommon.long2buff(file_size);    System.arraycopy(hexLenBytes,0,sizeBytes,offset,hexLenBytes.length);    OutputStream out=storageSocket.getOutputStream();    header=ProtoCommon.packHeader(cmd,body_len,(byte)0);    byte[] wholePkg=new byte[(int)(header.length + body_len - file_size)];    System.arraycopy(header,0,wholePkg,0,header.length);    System.arraycopy(sizeBytes,0,wholePkg,header.length,sizeBytes.length);    offset=header.length + sizeBytes.length;    if (bUploadSlave) {      byte[] prefix_name_bs=new byte[ProtoCommon.FDFS_FILE_PREFIX_MAX_LEN];      byte[] bs=prefix_name.getBytes(ClientGlobal.g_charset);      int prefix_name_len=bs.length;      Arrays.fill(prefix_name_bs,(byte)0);      if (prefix_name_len > ProtoCommon.FDFS_FILE_PREFIX_MAX_LEN) {        prefix_name_len=ProtoCommon.FDFS_FILE_PREFIX_MAX_LEN;      }      if (prefix_name_len > 0) {        System.arraycopy(bs,0,prefix_name_bs,0,prefix_name_len);      }      System.arraycopy(prefix_name_bs,0,wholePkg,offset,prefix_name_bs.length);      offset+=prefix_name_bs.length;    }    System.arraycopy(ext_name_bs,0,wholePkg,offset,ext_name_bs.length);    offset+=ext_name_bs.length;    if (bUploadSlave) {      System.arraycopy(masterFilenameBytes,0,wholePkg,offset,masterFilenameBytes.length);      offset+=masterFilenameBytes.length;    }    out.write(wholePkg);    if ((this.errno=(byte)callback.send(out)) != 0) {      return null;    }    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,-1);    this.errno=pkgInfo.errno;    if (pkgInfo.errno != 0) {      return null;    }    if (pkgInfo.body.length <= ProtoCommon.FDFS_GROUP_NAME_MAX_LEN) {      throw new MyException("body length: " + pkgInfo.body.length + " <= "+ ProtoCommon.FDFS_GROUP_NAME_MAX_LEN);    }    new_group_name=new String(pkgInfo.body,0,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN).trim();    remote_filename=new String(pkgInfo.body,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN,pkgInfo.body.length - ProtoCommon.FDFS_GROUP_NAME_MAX_LEN);    String[] results=new String[2];    results[0]=new_group_name;    results[1]=remote_filename;    if (meta_list == null || meta_list.length == 0) {      return results;    }    int result=0;    try {      result=this.set_metadata(new_group_name,remote_filename,meta_list,ProtoCommon.STORAGE_SET_METADATA_FLAG_OVERWRITE);    } catch (    IOException ex) {      result=5;      throw ex;    } finally {      if (result != 0) {        this.errno=(byte)result;        this.delete_file(new_group_name,remote_filename);        return null;      }    }    return results;  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  private void validatePTCLoginForm(){  mUsernameView.setError(null);  mPasswordView.setError(null);  String username=mUsernameView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (TextUtils.isEmpty(password)) {    mPasswordView.setError(getString(R.string.error_field_required));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(username)) {    mUsernameView.setError(getString(R.string.error_field_required));    focusView=mUsernameView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mNianticManager.login(username,password,mNianticLoginListener);  }}  }
class C{  protected void loadAndRun(final MqttSpyDaemonConfiguration configuration) throws SpyException {  final DaemonMqttConnectionDetails connectionSettings=configuration.getConnection();  configureMqtt(connectionSettings);  runScripts(connectionSettings.getBackgroundScript(),connectionSettings.getTestCases(),connectionSettings.getRunningMode());}  }
class C{  public void saveWaveAsFile(String filename){  WaveHeader waveHeader=wave.getWaveHeader();  int byteRate=waveHeader.getByteRate();  int audioFormat=waveHeader.getAudioFormat();  int sampleRate=waveHeader.getSampleRate();  int bitsPerSample=waveHeader.getBitsPerSample();  int channels=waveHeader.getChannels();  long chunkSize=waveHeader.getChunkSize();  long subChunk1Size=waveHeader.getSubChunk1Size();  long subChunk2Size=waveHeader.getSubChunk2Size();  int blockAlign=waveHeader.getBlockAlign();  try {    FileOutputStream fos=new FileOutputStream(filename);    fos.write(WaveHeader.RIFF_HEADER.getBytes());    fos.write(new byte[]{(byte)(chunkSize),(byte)(chunkSize >> 8),(byte)(chunkSize >> 16),(byte)(chunkSize >> 24)});    fos.write(WaveHeader.WAVE_HEADER.getBytes());    fos.write(WaveHeader.FMT_HEADER.getBytes());    fos.write(new byte[]{(byte)(subChunk1Size),(byte)(subChunk1Size >> 8),(byte)(subChunk1Size >> 16),(byte)(subChunk1Size >> 24)});    fos.write(new byte[]{(byte)(audioFormat),(byte)(audioFormat >> 8)});    fos.write(new byte[]{(byte)(channels),(byte)(channels >> 8)});    fos.write(new byte[]{(byte)(sampleRate),(byte)(sampleRate >> 8),(byte)(sampleRate >> 16),(byte)(sampleRate >> 24)});    fos.write(new byte[]{(byte)(byteRate),(byte)(byteRate >> 8),(byte)(byteRate >> 16),(byte)(byteRate >> 24)});    fos.write(new byte[]{(byte)(blockAlign),(byte)(blockAlign >> 8)});    fos.write(new byte[]{(byte)(bitsPerSample),(byte)(bitsPerSample >> 8)});    fos.write(WaveHeader.DATA_HEADER.getBytes());    fos.write(new byte[]{(byte)(subChunk2Size),(byte)(subChunk2Size >> 8),(byte)(subChunk2Size >> 16),(byte)(subChunk2Size >> 24)});    fos.write(wave.getBytes());    fos.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static void main(String[] args){  OkHttpClient http=new OkHttpClient();  PokemonGo go=new PokemonGo(http);  try {    go.login(new PtcCredentialProvider(http,ExampleLoginDetails.LOGIN,ExampleLoginDetails.PASSWORD));    List<Pokemon> pidgeys=go.getInventories().getPokebank().getPokemonByPokemonId(PokemonIdOuterClass.PokemonId.PIDGEY);    if (pidgeys.size() > 0) {      Pokemon pest=pidgeys.get(0);      pest.debug();      ReleasePokemonResponseOuterClass.ReleasePokemonResponse.Result result=pest.transferPokemon();      Log.i("Main","Transfered Pidgey result:" + result);    } else {      Log.i("Main","You have no pidgeys :O");    }  } catch (  LoginFailedException|RemoteServerException e) {    Log.e("Main","Failed to login. Invalid credentials or server issue: ",e);  }}  }
class C{  @BeforeClass public void retrieveOAuthToken(){  given().auth().preemptive().basic("oauth","gimmeatoken").when().get("/v1/oauth2/token").then().log().body();}  }
class C{  public AudioGetRecommendationsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public boolean isReadAheadIdle(int idleReaderErrorThreshold,TimeUnit timeUnit){  return (lastEntryProcessTime.elapsed(timeUnit) > idleReaderErrorThreshold);}  }
class C{  private MediaNotificationInfo(String title,boolean isPaused,String origin,int tabId,boolean isPrivate,int icon,int actions,int id,MediaNotificationListener listener){  this.title=title;  this.isPaused=isPaused;  this.origin=origin;  this.tabId=tabId;  this.isPrivate=isPrivate;  this.icon=icon;  this.mActions=actions;  this.id=id;  this.listener=listener;}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  width=w;  height=h;}  }
class C{  public MidiFileFormat(int type,float divisionType,int resolution,int bytes,long microseconds){  this.type=type;  this.divisionType=divisionType;  this.resolution=resolution;  this.byteLength=bytes;  this.microsecondLength=microseconds;  this.properties=null;}  }
class C{  @Override public void write(LogRecord record) throws IOException {  getLedgerWriter(record.getTransactionId(),false).write(record);}  }
class C{  public static Alarm buildCreateBasicAlarm(Properties properties){  if (properties == null) {    properties=new Properties();  }  Alarm alarm=Alarm.create("faultFamily","faultMember",1337,new ValueCondition(Integer.class,1)).build();  alarm.setDataTagId(100L);  properties.setProperty("faultFamily","faultFamily");  properties.setProperty("faultMember","faultMember");  properties.setProperty("faultCode","1337");  properties.setProperty("alarmCondition",new ValueCondition(Integer.class,1).getXMLCondition());  properties.setProperty("dataTagId","100");  return alarm;}  }
class C{  public Color mul(Color color){  this.r*=color.r;  this.g*=color.g;  this.b*=color.b;  this.a*=color.a;  clamp();  return this;}  }
class C{  public NVTASCIIWriter(OutputStream stream,String charsetName) throws IOException {  this.stream=stream;  this.writer=new OutputStreamWriter(stream,charsetName);}  }
class C{  public AirMapStatusRequirementNotice(){}  }
class C{  @Override protected void checkFeature(String featureId) throws XMLConfigurationException {  if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {    final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();    if (suffixLength == Constants.DYNAMIC_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.DYNAMIC_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE.length() && featureId.endsWith(Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.VALIDATE_CONTENT_MODELS_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_CONTENT_MODELS_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.LOAD_DTD_GRAMMAR_FEATURE.length() && featureId.endsWith(Constants.LOAD_DTD_GRAMMAR_FEATURE)) {      return;    }    if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() && featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {      return;    }    if (suffixLength == Constants.VALIDATE_DATATYPES_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_DATATYPES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.PARSER_SETTINGS.length() && featureId.endsWith(Constants.PARSER_SETTINGS)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }  }  super.checkFeature(featureId);}  }
class C{  public static boolean canChangeEquip(Player player){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canChangeEquip.ordinal()]) {    if (!restrictions.canChangeEquip(player)) {      return false;    }  }  return true;}  }
class C{  @Override public synchronized Edge addEdge(Vertex vHead,Vertex vTail) throws Exception {  Vertex vH=null, vT=null;  boolean bVertexMissed=false;  if ((vH=locateVertex(vHead)) == null) {    add(vH=vHead);    bVertexMissed=true;  }  if ((vT=locateVertex(vTail)) == null) {    add(vT=vTail);    bVertexMissed=true;  }  Edge e=null;  if (eclLocator == null) {    if (!bVertexMissed)     e=utils.locateDirectedEdgeInGraph(this,vH,vT);  } else {    if (!bVertexMissed)     e=eclLocator.locateDirectedEdgeInGraph(this,vH,vT);  }  if (e == null) {    e=super.addEdge(vH,vT);    if (eclLocator != null)     eclLocator.addedEdge(e);  }  return e;}  }
class C{  private static int makeHash(int npcId,int level){  return npcId << 8 | level;}  }
class C{  public static void writeFloat(DataOutputStream dos,boolean isBigEndian,float val) throws IOException {  if (!isBigEndian) {    writeLittleEndianFloat(dos,val);  } else {    dos.writeFloat(val);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_ATTACK(int num1,String value0){  return new SM_SYSTEM_MESSAGE(1210006,num1,value0);}  }
class C{  public PhotosSearchQuery(VkApiClient client,UserActor actor){  super(client,"photos.search",SearchResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void handleClick(long time,float x,float y){  mHasDetectedTouchGesture=true;  if (isCoordinateInsideBasePage(x,y)) {    closePanel(StateChangeReason.BASE_PAGE_TAP,true);  } else   if (isCoordinateInsideBar(x,y) && !onInterceptBarClick()) {    handleBarClick(time,x,y);  }}  }
class C{  @Override public int daysCompleteTheTask(){  int k=0;  for (int i=1; i <= daysOfCurrentMonth(); i++) {    k+=data[i] ? 1 : 0;  }  return k;}  }
class C{  @Override public boolean isSelected(){  return ClassificationManager.isActiveMapper(cName,mapType);}  }
class C{  public DiphoneUnitSelector(URL url) throws IOException {  if (url == null) {    throw new IOException("Can't load unit database");  }  boolean binary=url.getPath().endsWith(".bin");  diphoneDatabase=new DiphoneUnitDatabase(url,binary);}  }
class C{  @Override public void warning(SAXParseException e) throws SAXException {}  }
class C{  protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  int start=0;  if (str.charAt(0) == '-') {    start=1;  }  int sign=findUTCSign(str,start,len);  final int length=((sign == -1) ? len : sign) - start;  if (length < 4) {    throw new RuntimeException("Year must have 'CCYY' format");  } else   if (length > 4 && str.charAt(start) == '0') {    throw new RuntimeException("Leading zeros are required if the year value would otherwise have fewer than four digits; otherwise they are forbidden");  }  if (sign == -1) {    date.year=parseIntYear(str,len);  } else {    date.year=parseIntYear(str,sign);    getTimeZone(str,date,sign,len);  }  date.month=MONTH;  date.day=1;  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);  }  date.position=0;  return date;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200840,skillcaster,skillname);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  for (  int counter : counters) {    buffer.append("[" + counter + "]");  }  return buffer.toString();}  }
class C{  public static void addListener(InputListener listener){  listeners.add(listener);}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  private Map<Integer,Fraction> generateAbsent(){  Map<Integer,Fraction> generated=new HashMap<Integer,Fraction>();  do {    generated.putAll(generate());    for (    Integer key : javaMap.keySet())     generated.remove(key);  } while (generated.size() < 100);  return generated;}  }
class C{  public Result useItemInHand(){  return useItemInHand;}  }
class C{  public void attachTo(ImmersiveEffect effect) throws RuntimeException {  if (mEffect != null) {    throw new RuntimeException("Previous effect is still attached, call detach() first");  }  mEffect=effect;  mEffect.addParameter(mParameter);}  }
class C{  NewProjectDescriptor withName(@NotNull String name){  myName=name;  return this;}  }
class C{  protected boolean removeSubtree(E comparable){  if (comparable == null)   return false;  if (this.root == null)   return false;  BinarySearchTreeNode<E> node=this.root;  while (node != null) {    int diff=comparable.compareTo(node.comparable);    if (diff < 0) {      node=node.left;    } else     if (diff > 0) {      node=node.right;    } else {      if (node.comparable.equals(comparable)) {        if (node.isLeftChild()) {          node.parent.left=null;        } else {          node.parent.right=null;        }        this.size-=this.size(node);        if (this.selfBalancing)         this.balanceTree(node.parent);        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  private static void handleBuildException(BuildException e,CompileContext context,String stdErr) throws ProjectBuildException {  Iterable<PatternAwareOutputParser> parsers=JpsServiceManager.getInstance().getExtensions(PatternAwareOutputParser.class);  Collection<Message> compilerMessages=new BuildOutputParser(parsers).parseGradleOutput(stdErr);  if (!compilerMessages.isEmpty()) {    boolean hasError=false;    for (    Message message : compilerMessages) {      if (message.getKind() == Message.Kind.ERROR) {        hasError=true;      }      for (      CompilerMessage compilerMessage : AndroidGradleJps.createCompilerMessages(message)) {        context.processMessage(compilerMessage);      }    }    if (hasError) {      return;    }  }  if (!stdErr.isEmpty()) {    context.processMessage(createCompilerErrorMessage(stdErr));  } else {    ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);    try {      e.printStackTrace(new PrintStream(out));      String message="Internal error:" + SystemProperties.getLineSeparator() + out.toString();      context.processMessage(createCompilerErrorMessage(message));    }  finally {      try {        Closeables.close(out,true);      } catch (      IOException e1) {        LOG.debug(e1);      }    }  }  throw new ProjectBuildException(e.getMessage());}  }
class C{  boolean hasDependencies(View child){  final LayoutParams lp=(LayoutParams)child.getLayoutParams();  if (lp.mAnchorView != null) {    return true;  }  final int childCount=getChildCount();  for (int i=0; i < childCount; i++) {    final View other=getChildAt(i);    if (other == child) {      continue;    }    if (lp.dependsOn(this,child,other)) {      return true;    }  }  return false;}  }
class C{  private static void redirectBranch(Unit node,Unit oldTarget,Unit newTarget){  for (  UnitBox targetBox : node.getUnitBoxes()) {    Unit target=targetBox.getUnit();    if (target == oldTarget)     targetBox.setUnit(newTarget);  }}  }
class C{  public void addStmt(Stmt node){  List<Stmt> list=(parent == null || state == null) ? getStmtListNoTransform() : getStmtList();  list.addChild(node);}  }
class C{  protected void startSplitBrainController() throws RemoteException {  if (_splitBrainController != null)   return;  ElectionEntry splitBrainTemplate=_electTemplate.clone();  splitBrainTemplate.setState(State.ACTIVE);  _splitBrainController=new SplitBrainController(splitBrainTemplate,this);}  }
class C{  public ActionList(Visualization vis){  super(vis);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_A_TO_B(String skillcaster,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201269,skillcaster,skillname,skilltarget);}  }
class C{  public void removeAllLimitLines(){  mLimitLines.clear();}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public IonObjectReader(Class typeClass){  this(typeClass,new IonObjectReaderConfiguratorNopImpl());}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static void onscreen(EntityPlayer player,String message,String... formatArguments){  NotifyImplementation.instance.doSendOnscreenMessage(player,message,formatArguments);}  }
class C{  private void analyzeClass(SootClass sootClass,SootClass lifecycleElement){  if (sootClass.getName().startsWith("android.") || sootClass.getName().startsWith("java."))   return;  analyzeClassInterfaceCallbacks(sootClass,sootClass,lifecycleElement);}  }
class C{  public static X509Certificate loadX509Certificate(final String certificateFile) throws IOException, CertificateException {  final CertificateFactory cf=CertificateFactory.getInstance("X.509");  final InputStream inputStream=FileUtils.loadFileByName(certificateFile);  final X509Certificate certificate=(X509Certificate)cf.generateCertificate(inputStream);  inputStream.close();  return certificate;}  }
class C{  public FormField(Context context,AttributeSet attrs){  super(context,attrs);  initAttrs(context,TEXT,R.drawable.ic_slick_user,"Username");}  }
class C{  @RequestMapping(value="/register",method=RequestMethod.POST,produces={MediaType.APPLICATION_JSON_VALUE,MediaType.TEXT_PLAIN_VALUE}) @Timed public ResponseEntity<?> registerAccount(@Valid @RequestBody ManagedUserDTO managedUserDTO,HttpServletRequest request){  HttpHeaders textPlainHeaders=new HttpHeaders();  textPlainHeaders.setContentType(MediaType.TEXT_PLAIN);  return userRepository.findOneByLogin(managedUserDTO.getLogin().toLowerCase()).map(null).orElseGet(null);}  }
class C{  private void mapDatabase(FileInputStream is) throws IOException {  FileChannel fc=is.getChannel();  mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());  mbb.load();  loadDatabaseHeader(mbb);}  }
class C{  @ObjectiveCName("clear:") void clear(Message message){  Actions action;  String name;  if (message.action == Actions.ACK) {    action=Actions.getAction(message.data[0]);    name=message.data[1];  } else {    action=message.action;    name=message.data[0];  }  String uniqueName=this.getUniqueName(message.topic,action,name);  if (!this.clear(uniqueName)) {    this.client.onError(message.topic,Event.UNSOLICITED_MESSAGE,message.raw);  }}  }
class C{  protected GroupsGetBannedQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private int readSample(){  int sample=(int)inputBuffer[pos + offsetHigh];  sample=(sample << 8) | ((int)inputBuffer[pos + offsetLow] & 0xff);  pos+=sampleSize;  return sample;}  }
class C{  synchronized public void memorizeCert(@NonNull X509Certificate[] chain) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {  for (  X509Certificate cert : chain) {    String alias=cert.getSubjectDN().getName();    keyStore.setCertificateEntry(alias,cert);  }  initTrustManager();  FileOutputStream fos=new FileOutputStream(options.store);  keyStore.store(fos,options.storePassword.toCharArray());  fos.flush();  fos.close();}  }
class C{  protected Len rdbLoadLen() throws IOException {  boolean isencoded=false;  int rawByte=in.read();  int type=(rawByte & 0xc0) >> 6;  int value;switch (type) {case REDIS_RDB_ENCVAL:    isencoded=true;  value=rawByte & 0x3f;break;case REDIS_RDB_6BITLEN:value=rawByte & 0x3f;break;case REDIS_RDB_14BITLEN:value=((rawByte & 0x3F) << 8) | in.read();break;case REDIS_RDB_32BITLEN:value=in.readInt(4,false);break;default :throw new AssertionError("Un-except len-type:" + type);}return new Len(value,isencoded);}  }
class C{  private static BitMatrix convertByteMatrixToBitMatrix(ByteMatrix matrix){  int matrixWidgth=matrix.getWidth();  int matrixHeight=matrix.getHeight();  BitMatrix output=new BitMatrix(matrixWidgth,matrixHeight);  output.clear();  for (int i=0; i < matrixWidgth; i++) {    for (int j=0; j < matrixHeight; j++) {      if (matrix.get(i,j) == 1) {        output.set(i,j);      }    }  }  return output;}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  @deprecated protected void subFormat(StringBuffer buf,char ch,int count,int beginOffset,FieldPosition pos,Calendar cal){  int maxIntCount=Integer.MAX_VALUE;  int bufstart=buf.length();  TimeZone tz=cal.getTimeZone();  long date=cal.getTimeInMillis();  String result=null;  int patternCharIndex=-1;  if (('A' <= ch) && (ch <= 'z')) {    patternCharIndex=PATTERN_CHAR_TO_INDEX[(ch - '@')];  }  if (patternCharIndex == -1) {    throw new IllegalArgumentException("Illegal pattern character '" + ch + "' in \""+ this.pattern+ '"');  }  int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];  int value=cal.get(field);  NumberFormat currentNumberFormat=getNumberFormat(ch);switch (patternCharIndex) {case 0:    if (count == 5) {      safeAppend(this.formatData.narrowEras,value,buf);    } else     if (count == 4) {      safeAppend(this.formatData.eraNames,value,buf);    } else {      safeAppend(this.formatData.eras,value,buf);    }  break;case 1:if (count == 2) {  zeroPaddingNumber(currentNumberFormat,buf,value,2,2);} else {  zeroPaddingNumber(currentNumberFormat,buf,value,count,Integer.MAX_VALUE);}break;case 2:if (cal.getType().equals("hebrew")) {boolean isLeap=HebrewCalendar.isLeapYear(cal.get(1));if ((isLeap) && (value == 6) && (count >= 3)) {value=13;}if ((!isLeap) && (value >= 6) && (count < 3)) {value--;}}if (count == 5) {safeAppend(this.formatData.narrowMonths,value,buf);} else if (count == 4) {safeAppend(this.formatData.months,value,buf);} else if (count == 3) {safeAppend(this.formatData.shortMonths,value,buf);} else {zeroPaddingNumber(currentNumberFormat,buf,value + 1,count,Integer.MAX_VALUE);}break;case 4:if (value == 0) {zeroPaddingNumber(currentNumberFormat,buf,cal.getMaximum(11) + 1,count,Integer.MAX_VALUE);} else {zeroPaddingNumber(currentNumberFormat,buf,value,count,Integer.MAX_VALUE);}break;case 8:this.numberFormat.setMinimumIntegerDigits(Math.min(3,count));this.numberFormat.setMaximumIntegerDigits(Integer.MAX_VALUE);if (count == 1) {value/=100;} else if (count == 2) {value/=10;}FieldPosition p=new FieldPosition(-1);this.numberFormat.format(value,buf,p);if (count > 3) {this.numberFormat.setMinimumIntegerDigits(count - 3);this.numberFormat.format(0L,buf,p);}break;case 19:if (count < 3) {zeroPaddingNumber(currentNumberFormat,buf,value,count,Integer.MAX_VALUE);} else {value=cal.get(7);}break;case 9:if (count == 5) {safeAppend(this.formatData.narrowWeekdays,value,buf);} else if (count == 4) {safeAppend(this.formatData.weekdays,value,buf);} else {safeAppend(this.formatData.shortWeekdays,value,buf);}break;case 14:safeAppend(this.formatData.ampms,value,buf);break;case 15:if (value == 0) {zeroPaddingNumber(currentNumberFormat,buf,cal.getLeastMaximum(10) + 1,count,Integer.MAX_VALUE);} else {zeroPaddingNumber(currentNumberFormat,buf,value,count,Integer.MAX_VALUE);}break;case 17:if (count < 4) {result=tzFormat().format(TimeZoneFormat.Style.SPECIFIC_SHORT_COMMONLY_USED,tz,date);} else {result=tzFormat().format(TimeZoneFormat.Style.SPECIFIC_LONG,tz,date);}buf.append(result);break;case 23:if (count < 4) {result=tzFormat().format(TimeZoneFormat.Style.RFC822,tz,date);} else {result=tzFormat().format(TimeZoneFormat.Style.LOCALIZED_GMT,tz,date);}buf.append(result);break;case 24:if (count == 1) {result=tzFormat().format(TimeZoneFormat.Style.GENERIC_SHORT,tz,date);} else if (count == 4) {result=tzFormat().format(TimeZoneFormat.Style.GENERIC_LONG,tz,date);}buf.append(result);break;case 25:if (count < 3) {zeroPaddingNumber(currentNumberFormat,buf,value,1,Integer.MAX_VALUE);} else {value=cal.get(7);if (count == 5) {safeAppend(this.formatData.standaloneNarrowWeekdays,value,buf);} else if (count == 4) {safeAppend(this.formatData.standaloneWeekdays,value,buf);} else safeAppend(this.formatData.standaloneShortWeekdays,value,buf);}break;case 26:if (count == 5) {safeAppend(this.formatData.standaloneNarrowMonths,value,buf);} else if (count == 4) {safeAppend(this.formatData.standaloneMonths,value,buf);} else if (count == 3) {safeAppend(this.formatData.standaloneShortMonths,value,buf);} else {zeroPaddingNumber(currentNumberFormat,buf,value + 1,count,Integer.MAX_VALUE);}break;case 27:if (count >= 4) {safeAppend(this.formatData.quarters,value / 3,buf);} else if (count == 3) {safeAppend(this.formatData.shortQuarters,value / 3,buf);} else {zeroPaddingNumber(currentNumberFormat,buf,value / 3 + 1,count,Integer.MAX_VALUE);}break;case 28:if (count >= 4) {safeAppend(this.formatData.standaloneQuarters,value / 3,buf);} else if (count == 3) {safeAppend(this.formatData.standaloneShortQuarters,value / 3,buf);} else {zeroPaddingNumber(currentNumberFormat,buf,value / 3 + 1,count,Integer.MAX_VALUE);}break;case 29:if (count == 1) {result=tzFormat().format(TimeZoneFormat.Style.SPECIFIC_SHORT,tz,date);} else if (count == 4) {result=tzFormat().format(TimeZoneFormat.Style.GENERIC_LOCATION,tz,date);}buf.append(result);break;case 3:case 5:case 6:case 7:case 10:case 11:case 12:case 13:case 16:case 18:case 20:case 21:case 22:default :zeroPaddingNumber(currentNumberFormat,buf,value,count,Integer.MAX_VALUE);}if (pos.getBeginIndex() == pos.getEndIndex()) {if (pos.getField() == PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex]) {pos.setBeginIndex(beginOffset);pos.setEndIndex(beginOffset + buf.length() - bufstart);} else if (pos.getFieldAttribute() == PATTERN_INDEX_TO_DATE_FORMAT_ATTRIBUTE[patternCharIndex]) {pos.setBeginIndex(beginOffset);pos.setEndIndex(beginOffset + buf.length() - bufstart);}}}  }
class C{  public String tokenizeOneLine(String line){  List<String> list=new ArrayList<String>();  list.add(line);  JavaRDD<String> input=jsc.parallelize(list);  JavaRDD<String> output=tokenize(input);  return output.first();}  }
class C{  public static DownloadQueue newDownloadQueue(int threadPoolSize){  return NoHttp.newDownloadQueue(OkHttpRestConnection.getInstance(),threadPoolSize);}  }
class C{  public <T extends Fragment>T into(T fragment){  fragment.setArguments(get());  return fragment;}  }
class C{  public static boolean isConstantPlusExpressionAttribute(String attributeValue){  if (attributeValue.length() > 0) {    if (attributeValue.startsWith("${") && attributeValue.endsWith("}")) {      String expression=attributeValue.substring(2,attributeValue.length() - 1);      if (!expression.contains("${")) {        return true;      }    }    FlexibleStringExpander fse=FlexibleStringExpander.getInstance(attributeValue);    return FlexibleStringExpander.containsConstant(fse);  }  return true;}  }
class C{  @Override public void testStart(TestInfo testInfo){  throw new UnsupportedOperationException();}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new Opt(),2);}  }
class C{  public void moveViewToX(float xValue){  Runnable job=MoveViewJob.getInstance(mViewPortHandler,xValue,0f,getTransformer(AxisDependency.LEFT),this);  addViewportJob(job);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public Project withDefaults(){  setOpenSource(false);  return this;}  }
class C{  public RenderPanelImpl(boolean isDoubleBuffered){  super(isDoubleBuffered);}  }
class C{  public boolean isSuper(){  for (  UserAuthorityGroup group : userAuthorityGroups) {    if (group.isSuper()) {      return true;    }  }  return false;}  }
class C{  public static final Optional<File> findSteamVRManifest(final ArrayList<File> indexedSteamFolders){  for (  final File f : indexedSteamFolders) {    final File currentFile=new File(f.getAbsolutePath() + SteamConstants.STEAM_VR_APPS_MANIFEST_FILE_LOCATION);    if (currentFile.exists())     return Optional.ofNullable(currentFile);  }  return Optional.empty();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public boolean isToTop(){  return toTop;}  }
class C{  public FileExistsException(String message){  super(message);}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  private void parseBinOpExpression(int prec){  PsiBuilder.Marker marker=builder.mark();  parseNonTupleExpression(prec + 1);  while (true) {    if (!atBinaryOperator(prec)) {      marker.drop();      return;    }    parseNonTupleExpression(prec + 1);    marker.done(BuildElementTypes.BINARY_OP_EXPRESSION);    marker=marker.precede();  }}  }
class C{  static <T>boolean hasExtension(Map<String,Object> vendorExtensions,String extensionName,Class<T> clazz,DiagCollector diagCollector){  if (vendorExtensions != null) {    Object extensionValue=vendorExtensions.get(extensionName);    if (extensionValue != null) {      if (clazz.isInstance(extensionValue)) {        return true;      } else {        diagCollector.addDiag(Diag.error(new SimpleLocation(extensionName),"Extension %s has invalid type. Valid type is %s",extensionName,clazz.getName()));        return false;      }    }  }  return false;}  }
class C{  @SubscribeEvent public void onFOVUpdate(FOVUpdateEvent event){  if (!BWConfig.hardcoreHunger)   return;  EntityPlayer player=event.getEntity();  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;  float modifier=EntityPlayerExt.getHealthAndExhaustionModifier(player);  float f=1.0F;  if (player.capabilities.isFlying) {    f*=1.1F;  }  IAttributeInstance iattributeinstance=player.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);  double oldAttributeValue=iattributeinstance.getAttributeValue() / modifier;  f=(float)((double)f * ((oldAttributeValue / (double)player.capabilities.getWalkSpeed() + 1.0D) / 2.0D));  if (player.capabilities.getWalkSpeed() == 0.0F || Float.isNaN(f) || Float.isInfinite(f)) {    f=1.0F;  }  if (player.isHandActive() && player.getActiveItemStack() != null && player.getActiveItemStack().getItem() == Items.BOW) {    int i=player.getItemInUseMaxCount();    float f1=(float)i / 20.0F;    if (f1 > 1.0F) {      f1=1.0F;    } else {      f1=f1 * f1;    }    f*=1.0F - f1 * 0.15F;  }  event.setNewfov(f);}  }
class C{  protected void updateActionBarTitleAndHomeButton(OCFile chosenFile){  String title=getString(R.string.default_display_name_for_root_folder);  boolean inRoot;  inRoot=(chosenFile == null || (chosenFile.isFolder() && chosenFile.getParentId() == FileDataStorageManager.ROOT_PARENT_ID));  if (!inRoot) {    title=chosenFile.getFileName();  }  updateActionBarTitleAndHomeButtonByString(title);}  }
class C{  public static WebSiteProperties from(HttpServletRequest request,String webSiteId) throws GenericEntityException {  Assert.notNull("webSiteId",webSiteId);  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue webSiteValue=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteId).cache().queryOne();  if (webSiteValue != null) {    return from(request,webSiteValue);  } else {    throw new GenericEntityException("Scipio: Could not find WebSite for webSiteId '" + webSiteId + "'");  }}  }
class C{  private void mapPortBindingProperties(ContainerState containerState,Map<String,Object> networkSettings){  if (networkSettings == null) {    return;  }  Map<String,List<Map<String,String>>> portMap=getMap(networkSettings,DOCKER_CONTAINER_NETWORK_SETTINGS_PORTS_PROP_NAME);  if (containerState.ports == null) {    containerState.ports=new ArrayList<PortBinding>();  }  if (portMap != null) {    List<DockerPortMapping> portMappings=DockerPortMapping.fromMap(portMap);    containerState.ports=portMappings.stream().map(null).collect(Collectors.toList());  }}  }
class C{  public void rebuildStructure(IDexUnit unit,Signature sig){  logger.info("methodSizeBar " + methodSizeBar);  logger.info("matchedInstusPercentageBar " + matchedInstusPercentageBar);  logger.info("Signature matching 1 start...");  final long startTime=System.currentTimeMillis();  matchingVerOne(unit,sig);  final long endTime=System.currentTimeMillis();  logger.info("Signature matching 1 start completed! (Execution Time: " + (endTime - startTime) / 1000 + "s)");  logger.info("******************************************************************");  logger.info("Signature matching 2 start...");  final long startTime1=System.currentTimeMillis();  if (Thread.currentThread().isInterrupted()) {    return;  }  matchingVerTwo(unit,sig);  final long endTime1=System.currentTimeMillis();  logger.info("Signature matching 2 start completed! (Execution Time: " + (endTime1 - startTime1) / 1000 + "s)");  moveExceptionalClasses(unit);  storeAllMatchedMethods_new_orgPath(unit);  storeAllMatchedClasses_new_orgPath(unit);}  }
class C{  public boolean showDialog(String text){  populate(text);  setVisible(true);  return okButtonPressed;}  }
class C{  public VideoRemoveFromAlbumQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public static String[] jsonArrayStringToList(String jsonString){  String modString=jsonString.replaceFirst("\\[","");  modString=modString.replaceFirst("\\]","");  modString=modString.replaceAll("\"","");  return modString.split("\\s*,\\s*");}  }
class C{  public static boolean certificateNeedsRenewal(List<String> domains,Secret secret){  val isExpiring=certificateIsExpiring(secret);  val domainsChanged=haveDomainsChanged(domains,secret);  return (isExpiring || domainsChanged);}  }
class C{  private static CsvSchema buildCsvHeaders(List<String> columns){  CsvSchema.Builder builder=CsvSchema.builder();  columns.stream().forEachOrdered(null);  return builder.setUseHeader(true).build();}  }
class C{  public boolean isApplicable(){  CompareWindow viewer=(CompareWindow)getParent();  return viewer != null && viewer.getJList().getSelectedValuesList().size() >= 1;}  }
class C{  public void onProgressBarFinished(){}  }
class C{  public VideoGetUserVideosQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static Fall handle(EntityLivingBase living,float distance,float damageMultiplier){  Fall event=new Fall(living,distance,damageMultiplier);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("void set(java.lang.Object,java.lang.Object)")) {    java_lang_reflect_Field_set(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object get(java.lang.Object)")) {    java_lang_reflect_Field_get(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static String modifyCart(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  ShoppingCart cart=getCartObject(request);  Locale locale=UtilHttp.getLocale(request);  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Security security=(Security)request.getAttribute("security");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(null,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String removeSelectedFlag=request.getParameter("removeSelected");  String selectedItems[]=request.getParameterValues("selectedItem");  boolean removeSelected=("true".equals(removeSelectedFlag) && selectedItems != null && selectedItems.length > 0);  result=cartHelper.modifyCart(security,userLogin,paramMap,removeSelected,selectedItems,locale);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  private void addMissingToTree(String unclassifiedNodeLabel,int unclassifiedNodeId,String labelFormat,final int maxId){  Node unclassified=null;  for (int id=1; id <= maxId; id++) {    if (!containsId(id)) {      if (unclassified == null) {        unclassified=newNode();        Edge before=null;        for (Edge e=getRoot().getFirstOutEdge(); e != null; e=getRoot().getNextOutEdge(e)) {          Node w=e.getTarget();          Integer wid=(Integer)w.getInfo();          if (wid < 0) {            before=e;            break;          }        }        if (before != null)         newEdge(getRoot(),before,unclassified,null,Edge.BEFORE,Edge.AFTER,null); else         newEdge(getRoot(),unclassified);        unclassified.setInfo(unclassifiedNodeId);        addId2Node(unclassifiedNodeId,unclassified);        name2IdMap.put(unclassifiedNodeLabel,unclassifiedNodeId);      }      Node v=newNode(id);      newEdge(unclassified,v);      name2IdMap.put(String.format(labelFormat,id),id);      addId2Node(id,v);    }  }}  }
class C{  public void showDetailsArea(int location){  DisplayArea displayArea=getDisplayArea(location);  if (displayArea != null)   displayArea.setVisible(true);}  }
class C{  public float length(){  return FastMath.sqrt(lengthSquared());}  }
class C{  public static String join(Object[] elements){  return (join(elements," "));}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  public final Observable<T> readNullable(final Object group){  return Observable.defer(null).onErrorResumeNext(null);}  }
class C{  @Override public void postEvent(EventLogEvent event){}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigTransformation copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigTransformation(fieldConfigBase.getCommonData(),this.editButtonText,this.clearButtonText);  }  return copy;}  }
class C{  public AudioAddAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  @Override public long incrementAndGet(){  throw new UnsupportedOperationException();}  }
class C{  public void addDataPoint(double value){  if (this.data.size() == dataPointLimit) {    this.data.poll();  }  this.data.add(new DataPoint(value));  if (value > this.max)   this.max=value;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCFPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201004,skilltarget,num0,skillcaster,skillname);}  }
class C{  @PostConstruct public void init(){  cache.acquireWriteLockOnKey(clusterInitializedKey);  try {    if (!skipCachePreloading && cacheMode.equalsIgnoreCase("single")) {      cache.removeAll();    }    if (cache.get(clusterInitializedKey) == null) {      this.put(clusterInitializedKey,Boolean.TRUE);    }  }  finally {    cache.releaseWriteLockOnKey(clusterInitializedKey);  }}  }
class C{  public void clearSharing(boolean clearUser){  if (clearUser) {    user=null;  }  publicAccess=AccessStringHelper.DEFAULT;  externalAccess=false;  if (userGroupAccesses != null) {    userGroupAccesses.clear();  }}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static boolean canBeRenderedAsArray(Object elem){  if (isSupportedArray(elem))   return true;  if (elem instanceof Collection) {    Collection<?> c=(Collection<?>)elem;    if (c.isEmpty()) {      return false;    } else {      return !isUniformCollection(c,CompositeData.class) && !isUniformCollection(c,TabularData.class);    }  }  if (elem instanceof Map) {    return !(elem instanceof TabularData);  }  return false;}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public void clear(){synchronized (lruCacheMap) {    lruCacheMap.clear();  }}  }
class C{  public void substract(ResourceQuota quota){  this.msgRateIn-=quota.msgRateIn;  this.msgRateOut-=quota.msgRateOut;  this.bandwidthIn-=quota.bandwidthIn;  this.bandwidthOut-=quota.bandwidthOut;  this.memory-=quota.memory;}  }
class C{  long write(OutputStream out) throws IOException {  if (contentType.equals("application/x-macbinary")) {    out=new MacBinaryDecoderOutputStream(out);  }  long size=0;  int read;  byte[] buf=new byte[8 * 1024];  while ((read=partInput.read(buf)) != -1) {    out.write(buf,0,read);    size+=read;  }  return size;}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public static IOFileFilter prefixFileFilter(String prefix){  return new PrefixFileFilter(prefix);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public EmptyType fullCopy(){  EmptyType tree=(EmptyType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void initializeConsole(final boolean smartscroll){  textArea.setEditable(false);  textArea.setLineWrap(true);  textArea.setWrapStyleWord(true);  jsp=new JScrollPane(textArea);  jsp.setPreferredSize(new Dimension(Integer.MAX_VALUE,textAreaHeight));  if (smartscroll) {    new SmartScroller(jsp);  }  add(jsp,BorderLayout.SOUTH);  globalSettings.getLogController().setTextArea(textArea);}  }
class C{  public RollbackRecord(long txNum){  this.txNum=txNum;  this.lsn=null;}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.province_line_border));  paint.setStrokeWidth((float)3);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  public GeneralRuntimeException(Throwable nested){  super();  this.nested=nested;}  }
class C{  private void determineGeometryType(GeometryType type){  Class<?> bindingType=type.getBinding();  dsInfo.setGeometryType(GeometryTypeMapping.getGeometryType(bindingType));}  }
class C{  protected String nextToken() throws IOException, CatalogException {  String token="";  int ch, nextch;  if (!tokenStack.empty()) {    return (String)tokenStack.pop();  }  while (true) {    ch=catfile.read();    while (ch <= ' ') {      ch=catfile.read();      if (ch < 0) {        return null;      }    }    nextch=catfile.read();    if (nextch < 0) {      return null;    }    if (ch == '-' && nextch == '-') {      ch=' ';      nextch=nextChar();      while ((ch != '-' || nextch != '-') && nextch > 0) {        ch=nextch;        nextch=nextChar();      }      if (nextch < 0) {        throw new CatalogException(CatalogException.UNENDED_COMMENT,"Unterminated comment in catalog file; EOF treated as end-of-comment.");      }    } else {      stack[++top]=nextch;      stack[++top]=ch;      break;    }  }  ch=nextChar();  if (ch == '"' || ch == '\'') {    int quote=ch;    while ((ch=nextChar()) != quote) {      char[] chararr=new char[1];      chararr[0]=(char)ch;      String s=new String(chararr);      token=token.concat(s);    }    return token;  } else {    while (ch > ' ') {      nextch=nextChar();      if (ch == '-' && nextch == '-') {        stack[++top]=ch;        stack[++top]=nextch;        return token;      } else {        char[] chararr=new char[1];        chararr[0]=(char)ch;        String s=new String(chararr);        token=token.concat(s);        ch=nextch;      }    }    return token;  }}  }
class C{  public boolean equals(Object obj){  return (obj instanceof ClientMaxPrincipal && Constraint.equal(principals,((ClientMaxPrincipal)obj).principals));}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=getItemHeight() / 2;  centerDrawable.setBounds(0,center - offset,getWidth(),center + offset);  centerDrawable.draw(canvas);}  }
class C{  public ThreadDump(File file,DataSource master){  super(file,ThreadDumpSupport.getInstance().getCategory(),master);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  void detect(DynamicAABBTreeLeaf<E,T> node,DynamicAABBTreeNode root,BroadphaseFilter<E,T> filter,List<BroadphasePair<E,T>> pairs){  if (node.aabb.overlaps(root.aabb)) {    if (root.left == null) {      @SuppressWarnings("unchecked") DynamicAABBTreeLeaf<E,T> leaf=(DynamicAABBTreeLeaf<E,T>)root;      if (!leaf.tested && leaf.collidable != node.collidable) {        if (filter.isAllowed(node.collidable,node.fixture,leaf.collidable,leaf.fixture)) {          BroadphasePair<E,T> pair=new BroadphasePair<E,T>(node.collidable,node.fixture,leaf.collidable,leaf.fixture);          pairs.add(pair);        }      }      return;    }    if (root.left != null)     detect(node,root.left,filter,pairs);    if (root.right != null)     detect(node,root.right,filter,pairs);  }}  }
class C{  public Map<String,Object> asJson(){  return ImmutableMap.<String,Object>of(Intrinsic.TABLE,_table,Intrinsic.ID,_id);}  }
class C{  @Override public int validate(QName[] children,int offset,int length){switch (fOperator) {case XMLContentSpec.CONTENTSPECNODE_LEAF:    if (length == 0)     return 0;  if (children[offset].rawname != fFirstChild.rawname) {    return 0;  }if (length > 1) return 1;break;case XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE:if (length == 1) {if (children[offset].rawname != fFirstChild.rawname) {return 0;}}if (length > 1) return 1;break;case XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE:if (length > 0) {for (int index=0; index < length; index++) {if (children[offset + index].rawname != fFirstChild.rawname) {return index;}}}break;case XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE:if (length == 0) return 0;for (int index=0; index < length; index++) {if (children[offset + index].rawname != fFirstChild.rawname) {return index;}}break;case XMLContentSpec.CONTENTSPECNODE_CHOICE:if (length == 0) return 0;if ((children[offset].rawname != fFirstChild.rawname) && (children[offset].rawname != fSecondChild.rawname)) {return 0;}if (length > 1) return 1;break;case XMLContentSpec.CONTENTSPECNODE_SEQ:if (length == 2) {if (children[offset].rawname != fFirstChild.rawname) {return 0;}if (children[offset + 1].rawname != fSecondChild.rawname) {return 1;}} else {if (length > 2) {return 2;}return length;}break;default :throw new RuntimeException("ImplementationMessages.VAL_CST");}return -1;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void toAllInRadius(WorldServer world,Vec3d pos,double radius){  double maxDistance=radius * radius + radius * radius + radius * radius;  toAll(world.getPlayers(EntityPlayerMP.class,null));}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(2).putShort(get(rowNumber)).array();}  }
class C{  @MediumTest public void testPreconditions(){  assertNotNull(mTextView1);  assertNotNull(mTextView2);}  }
class C{  public DHCPMessage(byte[] ibuf,InetAddress inServername){  initialize();  internalize(ibuf);  this.destination_IP=inServername;  this.gPort=SERVER_PORT;}  }
class C{  public Builder keyboard(Boolean keyboard){  return this;}  }
class C{  @Override public void addListener(DataSourceUpdatedInterface listener){  if (!listenerList.contains(listener)) {    listenerList.add(listener);    if (getGeometryType() != GeometryTypeEnum.UNKNOWN) {      notifyDataSourceLoaded();    }  }}  }
class C{  @Override public void onClick(View v){  LogUtil.e("position = " + position);  new BossZoomHelper((Activity)context,bossJumpView,400);}  }
class C{  public LazyMetadataValue(Plugin owningPlugin,CacheStrategy cacheStrategy,Callable<Object> lazyValue){  super(owningPlugin);  Validate.notNull(cacheStrategy,"cacheStrategy cannot be null");  Validate.notNull(lazyValue,"lazyValue cannot be null");  this.internalValue=new SoftReference<Object>(null);  this.lazyValue=lazyValue;  this.cacheStrategy=cacheStrategy;}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  result.append("\nConfigurationChangeEventReport:\n");  if (error != null) {    result.append("Error:\n");    result.append(error);  } else {    for (    ChangeReport changeReport : changeReports) {      result.append(changeReport.toString());    }  }  return result.toString();}  }
class C{  protected MarketReorderAlbumsQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean isLockSubject(){  return false;}  }
class C{  public int double_set_old(){  String s=soot.PhaseOptions.getString(options,"double-set-old");  if (s.equalsIgnoreCase("hash"))   return double_set_old_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_old_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_old_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_old_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_old_heintze;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-old");}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/SignalThrowingEventListenerTest.globalSignal.bpmn20.xml","org/activiti/engine/test/api/event/SignalThrowingEventListenerTest.globalSignalExternalProcess.bpmn20.xml"}) public void testGlobalSignal() throws Exception {  SignalThrowingEventListener listener=null;  try {    listener=new SignalThrowingEventListener();    listener.setSignalName("Signal");    listener.setProcessInstanceScope(false);    processEngineConfiguration.getEventDispatcher().addEventListener(listener,ActivitiEventType.TASK_ASSIGNED);    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("globalSignalProcess");    assertNotNull(processInstance);    ProcessInstance externalProcess=runtimeService.startProcessInstanceByKey("globalSignalProcessExternal");    assertNotNull(processInstance);    externalProcess=runtimeService.createProcessInstanceQuery().processInstanceId(externalProcess.getId()).singleResult();    assertNotNull(externalProcess);    Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();    assertNotNull(task);    taskService.setAssignee(task.getId(),"kermit");    externalProcess=runtimeService.createProcessInstanceQuery().processInstanceId(externalProcess.getId()).singleResult();    assertNull(externalProcess);    task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();    assertNotNull(task);    assertEquals("kermit",task.getAssignee());  }  finally {    processEngineConfiguration.getEventDispatcher().removeEventListener(listener);  }}  }
class C{  private void insertTargetF0Values() throws Exception {  NodeList phoneNodes;  try {    phoneNodes=getPhoneNodes();  } catch (  Exception e) {    Log.d(Mary.LOG,new Exception("Could not get the phone Nodes from the Document",e).toString());    throw new Exception("Could not get the phone Nodes from the Document",e);  }  int totalNumberOfFrames=getNumberOfFrames();  ProsodyElementHandler elementHandler=new ProsodyElementHandler();  double[] f0Targets=elementHandler.getF0Contour(phoneNodes,totalNumberOfFrames);  int f0TargetStartIndex=0;  for (  Phone phone : phones) {    int numberOfLeftUnitFrames=phone.getNumberOfLeftUnitFrames();    int f0TargetMidIndex=f0TargetStartIndex + numberOfLeftUnitFrames;    double[] leftF0Targets=ArrayUtils.subarray(f0Targets,f0TargetStartIndex,f0TargetMidIndex);    phone.setLeftTargetF0Values(leftF0Targets);    int numberOfRightUnitFrames=phone.getNumberOfRightUnitFrames();    int f0TargetEndIndex=f0TargetMidIndex + numberOfRightUnitFrames;    double[] rightF0Targets=ArrayUtils.subarray(f0Targets,f0TargetMidIndex,f0TargetEndIndex);    phone.setRightTargetF0Values(rightF0Targets);    f0TargetStartIndex=f0TargetEndIndex;  }  return;}  }
class C{  public static boolean AM(long packedDateTime){  return PackedLocalTime.AM(time(packedDateTime));}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set showGroups=");  final boolean show=np.getBoolean();  final String style;  if (np.peekMatchIgnoreCase("style")) {    np.matchIgnoreCase("style=");    style=np.getWordMatchesIgnoringCase("ellipses convexHulls");  } else   style="ellipses";  np.matchIgnoreCase(";");  final ClusterViewer viewer=getViewer();  if (style.equalsIgnoreCase("ellipses"))   viewer.getPcoaTab().setShowGroupsAsEllipses(show); else   viewer.getPcoaTab().setShowGroupsAsConvexHulls(show);  try {    if (show)     viewer.getPcoaTab().computeConvexHullsAndEllipsesForGroups(viewer.getGroup2Nodes());    viewer.updateView(IDirector.ENABLE_STATE);  } catch (  Exception ex) {    Basic.caught(ex);  }}  }
class C{  public boolean adjustValue(K key,int amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  private synchronized void doLoadRanking(){  ResourceUnitRanking.setCpuUsageByMsgRate(this.realtimeCpuLoadFactor);  String hostname=pulsar.getAdvertisedAddress();  String strategy=this.getLoadBalancerPlacementStrategy();  log.info("doLoadRanking - load balancing strategy: {}",strategy);  if (!currentLoadReports.isEmpty()) {synchronized (resourceUnitRankings) {      Map<Long,Set<ResourceUnit>> newSortedRankings=Maps.newTreeMap();      Map<ResourceUnit,ResourceUnitRanking> newResourceUnitRankings=new HashMap<>();      for (      Map.Entry<ResourceUnit,LoadReport> entry : currentLoadReports.entrySet()) {        ResourceUnit resourceUnit=entry.getKey();        LoadReport loadReport=entry.getValue();        Set<String> loadedBundles=loadReport.getBundles();        Set<String> preAllocatedBundles=null;        if (resourceUnitRankings.containsKey(resourceUnit)) {          preAllocatedBundles=resourceUnitRankings.get(resourceUnit).getPreAllocatedBundles();          preAllocatedBundles.removeAll(loadedBundles);        } else {          preAllocatedBundles=new HashSet<>();        }        ResourceQuota allocatedQuota=getTotalAllocatedQuota(loadedBundles);        ResourceQuota preAllocatedQuota=getTotalAllocatedQuota(preAllocatedBundles);        ResourceUnitRanking ranking=new ResourceUnitRanking(loadReport.getSystemResourceUsage(),loadedBundles,allocatedQuota,preAllocatedBundles,preAllocatedQuota);        newResourceUnitRankings.put(resourceUnit,ranking);        double loadPercentage=ranking.getEstimatedLoadPercentage();        long maxCapacity=ranking.estimateMaxCapacity(pulsar.getLocalZkCacheService().getResourceQuotaCache().getDefaultQuota());        long finalRank=0;        if (strategy.equals(LOADBALANCER_STRATEGY_LLS)) {          finalRank=(long)loadPercentage;        } else {          double idleRatio=(100 - loadPercentage) / 100;          finalRank=(long)(maxCapacity * idleRatio * idleRatio);        }        if (!newSortedRankings.containsKey(finalRank)) {          newSortedRankings.put(finalRank,new HashSet<ResourceUnit>());        }        newSortedRankings.get(finalRank).add(entry.getKey());        if (log.isDebugEnabled()) {          log.debug("Added Resource Unit [{}] with Rank [{}]",entry.getKey().getResourceId(),finalRank);        }        if (resourceUnit.getResourceId().contains(hostname)) {          updateLoadBalancingMetrics(hostname,finalRank,ranking);        }      }      this.sortedRankings.set(newSortedRankings);      this.resourceUnitRankings=newResourceUnitRankings;    }  } else {    log.info("Leader broker[{}] No ResourceUnits to rank this run, Using Old Ranking",pulsar.getWebServiceAddress());  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  return compareTo(cp);}  }
class C{  @SuppressWarnings("rawtypes") public static Map<String,String> parseKeyAndValueToMap(JSONObject sourceObj){  if (sourceObj == null) {    return null;  }  Map<String,String> keyAndValueMap=new HashMap<String,String>();  for (Iterator iter=sourceObj.keys(); iter.hasNext(); ) {    String key=(String)iter.next();    MapUtil.putMapNotEmptyKey(keyAndValueMap,key,getString(sourceObj,key,""));  }  return keyAndValueMap;}  }
class C{  public float smallestAngleBetween(Vector2f otherVector){  float dotProduct=dot(otherVector);  float angle=FastMath.acos(dotProduct);  return angle;}  }
class C{  @Override public void revertToDefaultValue(){  Date currentDate=new Date();  populateField(currentDate);}  }
class C{  public AemSidekick expandSectionIfCollapsed(SidekickSection sidekickSections){  final WebElement section=getSectionByName(sidekickSections.getSectionName());  bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandSection(section),Timeouts.SMALL);  return this;}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  public static boolean isStarted(String timePhaseName){  RequestLog current=RLOG.get();  TimedPhase timePhase=current.times.get(timePhaseName);  return timePhase != null && timePhase.isStarted();}  }
class C{  @Override public XSObject itemByName(String namespace,String localName){  for (int i=0; i < fNSNum; i++) {    if (isEqual(namespace,fNamespaces[i])) {      XSTypeDefinition type=(XSTypeDefinition)fMaps[i].get(localName);      if (type != null && type.getTypeCategory() == fType) {        return type;      }      return null;    }  }  return null;}  }
class C{  protected ApplicationDescriptor(Application application){  this(application,ApplicationTypeFactory.getApplicationTypeFor(application),POSITION_AT_THE_END);}  }
class C{  public MaxCountExceededException(Number max){  this(LocalizedFormats.MAX_COUNT_EXCEEDED,max);}  }
class C{  public ZWaveMultiInstanceCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public void resetClearedState(){  this._cleared=false;}  }
class C{  private void initPresenter(){  this.collectionsPresenter=new CollectionsImplementor(collectionsModel,this);  this.pagerPresenter=new PagerImplementor(this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);}  }
class C{  public static double log(double base,double x){  return Math.log(x) / Math.log(base);}  }
class C{  public void removeFiles(Collection<OCFile> files,boolean onlyLocalCopy){  for (  OCFile file : files) {    Intent service=new Intent(mFileActivity,OperationsService.class);    service.setAction(OperationsService.ACTION_REMOVE);    service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());    service.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());    service.putExtra(OperationsService.EXTRA_REMOVE_ONLY_LOCAL,onlyLocalCopy);    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);  }  mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_a_moment));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_A_TO_SELF(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200745,skilltarget,skillcaster,skillname);}  }
class C{  public boolean containsKey(K key){  return contains(key);}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public void addAccount(Activity activity,int result){  activity.startActivityForResult(createAddAccountIntent(),result);}  }
class C{  public boolean isEmpty(){  return height < 0;}  }
class C{  @Override public int size(){  return mSize;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENCHANT_ITEM_CANCELED(String value0){  return new SM_SYSTEM_MESSAGE(1300457,value0);}  }
class C{  public void changeBrightness(int value){  this.brightness+=value;}  }
class C{  public boolean isValid(long startTime,long dateTime){  long testTime=startTime;  if (testTime == dateTime)   return true;  while (testTime < dateTime) {    testTime=next(startTime,testTime,1);    if (testTime == dateTime)     return true;  }  return false;}  }
class C{  public static Bitmap createScaledBitmap(Bitmap bitmap,float scaleFactor){  Matrix m=new Matrix();  m.setRectToRect(new RectF(0,0,bitmap.getWidth(),bitmap.getHeight()),new RectF(0,0,bitmap.getWidth() * scaleFactor,bitmap.getHeight() * scaleFactor),Matrix.ScaleToFit.CENTER);  return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,true);}  }
class C{  public boolean isDOMDerivedFrom(String ancestorNS,String ancestorName,int derivationMethod){  if (ancestorName == null)   return false;  if (ancestorNS != null && ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA) && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE) && (derivationMethod == DERIVATION_RESTRICTION && derivationMethod == DERIVATION_EXTENSION)) {    return true;  }  if ((derivationMethod & DERIVATION_RESTRICTION) != 0) {    if (isDerivedByRestriction(ancestorNS,ancestorName,derivationMethod,this)) {      return true;    }  }  if ((derivationMethod & DERIVATION_EXTENSION) != 0) {    if (isDerivedByExtension(ancestorNS,ancestorName,derivationMethod,this)) {      return true;    }  }  if ((((derivationMethod & DERIVATION_LIST) != 0) || ((derivationMethod & DERIVATION_UNION) != 0)) && ((derivationMethod & DERIVATION_RESTRICTION) == 0) && ((derivationMethod & DERIVATION_EXTENSION) == 0)) {    if (ancestorNS.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA) && ancestorName.equals(SchemaSymbols.ATTVAL_ANYTYPE)) {      ancestorName=SchemaSymbols.ATTVAL_ANYSIMPLETYPE;    }    if (!(fName.equals(SchemaSymbols.ATTVAL_ANYTYPE) && fTargetNamespace.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA))) {      if (fBaseType != null && fBaseType instanceof XSSimpleTypeDecl) {        return ((XSSimpleTypeDecl)fBaseType).isDOMDerivedFrom(ancestorNS,ancestorName,derivationMethod);      } else       if (fBaseType != null && fBaseType instanceof XSComplexTypeDecl) {        return ((XSComplexTypeDecl)fBaseType).isDOMDerivedFrom(ancestorNS,ancestorName,derivationMethod);      }    }  }  if (((derivationMethod & DERIVATION_EXTENSION) == 0) && (((derivationMethod & DERIVATION_RESTRICTION) == 0) && ((derivationMethod & DERIVATION_LIST) == 0) && ((derivationMethod & DERIVATION_UNION) == 0))) {    return isDerivedByAny(ancestorNS,ancestorName,derivationMethod,this);  }  return false;}  }
class C{  public boolean field_based(){  return soot.PhaseOptions.getBoolean(options,"field-based");}  }
class C{  public void OMTG_ENV_005_Webview_Remote(View view){  Intent intent=new Intent(this,OMTG_ENV_005_WebView_Remote.class);  startActivity(intent);}  }
class C{  public void orderTracks(List<String> newOrder) throws InvalidCommandLineException {  LinkedHashMap<String,Track> newTrackSet=new LinkedHashMap<String,Track>();  for (  String query : newOrder) {    List<String> x=new ArrayList<String>();    x.add(query);    List<Track> trList=this.matchTracks(x,true);    for (    Track xtrack : trList) {      if (!newTrackSet.containsKey(xtrack.getFileTag())) {        newTrackSet.put(xtrack.getFileTag(),xtrack);      }    }  }  for (  String x : this.trackSet.keySet()) {    if (!newTrackSet.containsKey(x)) {      newTrackSet.put(x,this.trackSet.get(x));    }  }  if (this.trackSet.size() != newTrackSet.size()) {    throw new RuntimeException("\nReordered track has " + newTrackSet.size() + " tracks. Expected "+ this.trackSet.size());  }  for (  String x : this.trackSet.keySet()) {    if (!newTrackSet.containsKey(x)) {      throw new RuntimeException("\nReordered track does not contain " + x);    }  }  this.trackSet=newTrackSet;}  }
class C{  public static void checkBinomial(final int n,final int k) throws MathIllegalArgumentException {  if (n < k) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,k,n,true);  }  if (n < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.BINOMIAL_NEGATIVE_PARAMETER,n);  }}  }
class C{  public void pushRect(Rect rect,int color){  if (mFirstPush) {    mRectangles.clear();    mFirstPush=false;  }  mRectangles.add(new Pair<Rect,Integer>(rect,color));  invalidate();}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        spannable.setSpan(new ImageSpan(context,entry.getValue()),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  public static boolean isSupported(){  return Build.VERSION.SDK_INT >= 9;}  }
class C{  public CatalogException(int type){  super("Catalog Exception " + type);  this.exceptionType=type;  this.exception=null;}  }
class C{  @Override public void computeTargetFeatures(Target target){  FeatureVector fv=targetFeatureComputer.computeFeatureVector(target);  target.setFeatureVector(fv);}  }
class C{  public UnknownLeaseException(){  super();}  }
class C{  @Override public void startGroup(Augmentations augs) throws XNIException {  fMixed=false;  if (fDTDGrammar != null)   fDTDGrammar.startGroup(augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.startGroup(augs);  }}  }
class C{  public static boolean haveCache(){  return maryCache != null;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg,String path){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg,path);}  }
class C{  public void uninitialize(){  for (  TabModel model : mTabModelSelector.getModels()) {    model.removeObserver(mTabModelObserver);  }  mTabModelSelector.removeObserver(mTabModelSelectorObserver);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((colourButton != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof Color) {      Color newValue=(Color)undoRedoObject.getNewValue();      colourButton.setColour(newValue);      valueUpdated();    }  }}  }
class C{  public static int toPx(float dpValue){  Resources resources=Resources.getSystem();  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dpValue,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public boolean has(String key){  validateKey(key);  Entry entry;synchronized (mDiskCacheLock) {    entry=mLruEntries.get(key);  }  return entry != null && entry.isReadable() && entry.getCleanFile().exists();}  }
class C{  private void assertString(String expected) throws CharacterCodingException {  byte[] input=expected.getBytes(StandardCharsets.UTF_8);  int i=0;  int j=0;  while (i < input.length) {    while (!feeder.isFull() && i < input.length) {      feeder.feed(input[i]);      ++i;    }    while (feeder.hasInput()) {      assertEquals(expected.charAt(j),feeder.nextInput());      ++j;    }  }  assertEquals(expected.length(),j);  assertFalse(feeder.hasInput());  assertFalse(feeder.isFull());}  }
class C{  public static double fro(Zmat A){  A.getProperties();  return Norm.fro(A,A.bx,A.rx,A.bx,A.cx);}  }
class C{  public static void addSLDOutputListener(SLDOutputInterface sldOutput){  for (  String key : symbolRenderPanelMap.keySet()) {    RenderSymbolInterface render=symbolRenderPanelMap.get(key);    render.addSLDOutputListener(sldOutput);  }}  }
class C{  protected void replaceWithNull(Unit u){  if (u instanceof IfStmt) {    ConditionExpr expr=(ConditionExpr)((IfStmt)u).getCondition();    if (isZeroComparison(expr)) {      expr.setOp2(NullConstant.v());      Debug.printDbg("[null] replacing with null in ",u);      Debug.printDbg(" new u: ",u);    }  } else   if (u instanceof AssignStmt) {    AssignStmt s=(AssignStmt)u;    Value v=s.getRightOp();    if ((v instanceof IntConstant && ((IntConstant)v).value == 0) || (v instanceof LongConstant && ((LongConstant)v).value == 0)) {      if (!(s.getLeftOp() instanceof InstanceFieldRef) || ((InstanceFieldRef)s.getLeftOp()).getField().getType() instanceof RefLikeType) {        s.setRightOp(NullConstant.v());        Debug.printDbg("[null] replacing with null in ",u);        Debug.printDbg(" new u: ",u);      }    }  }}  }
class C{  public boolean drain(){  timer.stop("AudioOutput");  return true;}  }
class C{  public DragControl(String action,boolean fixOnMouseOver){  this.repaint=false;  this.fixOnMouseOver=fixOnMouseOver;  this.action=action;}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public TreeLayout(String group){  super(group);}  }
class C{  public void initializeDefaultPreferences(){  IEclipsePreferences node=new DefaultScope().getNode(SVNUIPlugin.ID);  node.put(ISVNUIConstants.PREF_CONSOLE_COMMAND_COLOR,StringConverter.asString(new RGB(0,0,0)));  node.put(ISVNUIConstants.PREF_CONSOLE_MESSAGE_COLOR,StringConverter.asString(new RGB(0,0,255)));  node.put(ISVNUIConstants.PREF_CONSOLE_ERROR_COLOR,StringConverter.asString(new RGB(255,0,0)));  node.putBoolean(ISVNUIConstants.PREF_SHOW_COMMENTS,true);  node.putBoolean(ISVNUIConstants.PREF_WRAP_COMMENTS,true);  node.putBoolean(ISVNUIConstants.PREF_SHOW_PATHS,true);  node.putInt(ISVNUIConstants.PREF_AFFECTED_PATHS_MODE,ISVNUIConstants.MODE_FLAT);  node.putInt(ISVNUIConstants.PREF_AFFECTED_PATHS_LAYOUT,ISVNUIConstants.LAYOUT_HORIZONTAL);  node.putBoolean(ISVNUIConstants.PREF_CONSOLE_SHOW_ON_MESSAGE,false);  node.putBoolean(ISVNUIConstants.PREF_CONSOLE_SHOW_ON_ERROR,true);  node.putBoolean(ISVNUIConstants.PREF_CONSOLE_LIMIT_OUTPUT,true);  node.putInt(ISVNUIConstants.PREF_CONSOLE_HIGH_WATER_MARK,500000);  node.put(ISVNUIConstants.PREF_FILETEXT_DECORATION,SVNDecoratorConfiguration.DEFAULT_FILETEXTFORMAT);  node.put(ISVNUIConstants.PREF_FOLDERTEXT_DECORATION,SVNDecoratorConfiguration.DEFAULT_FOLDERTEXTFORMAT);  node.put(ISVNUIConstants.PREF_PROJECTTEXT_DECORATION,SVNDecoratorConfiguration.DEFAULT_PROJECTTEXTFORMAT);  node.put(ISVNUIConstants.PREF_ADDED_FLAG,SVNDecoratorConfiguration.DEFAULT_ADDED_FLAG);  node.put(ISVNUIConstants.PREF_DIRTY_FLAG,SVNDecoratorConfiguration.DEFAULT_DIRTY_FLAG);  node.put(ISVNUIConstants.PREF_EXTERNAL_FLAG,SVNDecoratorConfiguration.DEFAULT_EXTERNAL_FLAG);  node.putBoolean(ISVNUIConstants.PREF_SHOW_EXTERNAL_DECORATION,true);  node.putBoolean(ISVNUIConstants.PREF_SHOW_ADDED_DECORATION,true);  node.putBoolean(ISVNUIConstants.PREF_SHOW_HASREMOTE_DECORATION,true);  node.putBoolean(ISVNUIConstants.PREF_SHOW_DIRTY_DECORATION,true);  node.putBoolean(ISVNUIConstants.PREF_SHOW_NEWRESOURCE_DECORATION,true);  node.putBoolean(ISVNUIConstants.PREF_CALCULATE_DIRTY,true);  node.putBoolean(ISVNUIConstants.PREF_USE_FONT_DECORATORS,false);  node.putBoolean(ISVNUIConstants.PREF_SHOW_SYNCINFO_AS_TEXT,false);  node.putBoolean(ISVNUIConstants.PREF_PROMPT_ON_MIXED_TAGS,true);  node.putBoolean(ISVNUIConstants.PREF_PROMPT_ON_SAVING_IN_SYNC,true);  node.putInt(ISVNUIConstants.PREF_SAVE_DIRTY_EDITORS,ISVNUIConstants.OPTION_PROMPT);  node.putBoolean(ISVNUIConstants.PREF_SHOW_COMPARE_REVISION_IN_DIALOG,false);  node.putBoolean(ISVNUIConstants.PREF_SHOW_UNADDED_RESOURCES_ON_COMMIT,true);  node.putBoolean(ISVNUIConstants.PREF_SELECT_UNADDED_RESOURCES_ON_COMMIT,true);  node.putBoolean(ISVNUIConstants.PREF_REMOVE_UNADDED_RESOURCES_ON_REPLACE,true);  node.putBoolean(ISVNUIConstants.PREF_COMMIT_SET_DEFAULT_ENABLEMENT,false);  node.put(ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_WARNINGS,MessageDialogWithToggle.ALWAYS);  node.put(ISVNUIConstants.PREF_ALLOW_COMMIT_WITH_ERRORS,MessageDialogWithToggle.PROMPT);  node.putBoolean(ISVNUIConstants.PREF_UPDATE_TO_HEAD_IGNORE_EXTERNALS,false);  node.putBoolean(ISVNUIConstants.PREF_UPDATE_TO_HEAD_ALLOW_UNVERSIONED_OBSTRUCTIONS,true);  node.putInt(ISVNUIConstants.PREF_UPDATE_TO_HEAD_CONFLICT_HANDLING_TEXT_FILES,ISVNConflictResolver.Choice.postpone);  node.putInt(ISVNUIConstants.PREF_UPDATE_TO_HEAD_CONFLICT_HANDLING_BINARY_FILES,ISVNConflictResolver.Choice.postpone);  node.putInt(ISVNUIConstants.PREF_UPDATE_TO_HEAD_CONFLICT_HANDLING_PROPERTIES,ISVNConflictResolver.Choice.postpone);  node.putInt(ISVNUIConstants.PREF_UPDATE_TO_HEAD_CONFLICT_HANDLING_TREE_CONFLICTS,ISVNConflictResolver.Choice.postpone);  node.putBoolean(ISVNUIConstants.PREF_USE_JAVAHL_COMMIT_HACK,true);  node.put(ISVNUIConstants.PREF_SVNINTERFACE,"javahl");  node.put(ISVNUIConstants.PREF_SVNCONFIGDIR,"");  node.putBoolean(ISVNUIConstants.PREF_FETCH_CHANGE_PATH_ON_DEMAND,false);  node.putInt(ISVNUIConstants.PREF_LOG_ENTRIES_TO_FETCH,25);  node.putBoolean(ISVNUIConstants.PREF_STOP_ON_COPY,false);  node.putBoolean(ISVNUIConstants.PREF_MERGE_USE_EXTERNAL,false);  node.putBoolean(ISVNUIConstants.PREF_SUGGEST_MERGE_SOURCES,true);  node.put(ISVNUIConstants.PREF_MERGE_PROGRAM_LOCATION,"");  node.put(ISVNUIConstants.PREF_MERGE_PROGRAM_PARAMETERS,"");  node.put(ISVNUIConstants.PREF_USE_QUICKDIFFANNOTATE,MessageDialogWithToggle.PROMPT);  node.putInt(ISVNUIConstants.PREF_MENU_ICON_SET,ISVNUIConstants.MENU_ICON_SET_DEFAULT);  node.putInt(ISVNUIConstants.PREF_COMMENTS_TO_SAVE,10);}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){  switchState(ERROR,errorImageDrawable,errorTextContent,errorButtonText,onClickListener,skipIds);}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,SampleActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.mipmap.ic_launcher).setContentTitle("FCM Message").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public static double positiveDistance(double a,double b){  double d=b - a;  if (d >= 0) {    return d;  }  return (b + S2.M_PI) - (a - S2.M_PI);}  }
class C{  public CrashCountException(String reason){  super(reason);}  }
class C{  public UrlSpaceConfigurer credentials(String userName,String password){  return securityConfig(new SecurityConfig(userName,password));}  }
class C{  public PetFeedResult processFeedResult(PetFeedProgress progress,FoodType foodType,int itemLevel,int playerLevel){  PetRewards rewardGroup=null;  for (  PetRewards rewards : getFood()) {    if (rewards.getType() == foodType) {      rewardGroup=rewards;      break;    }  }  if (rewardGroup == null) {    return null;  }  int maxFeedCount=1;  if (rewardGroup.isLoved()) {    progress.setIsLovedFeeded();  } else {    maxFeedCount=fullCount;  }  PetFeedCalculator.updatePetFeedProgress(progress,itemLevel,maxFeedCount);  if (progress.getHungryLevel() != PetHungryLevel.FULL) {    return null;  }  return PetFeedCalculator.getReward(maxFeedCount,rewardGroup,progress,playerLevel);}  }
class C{  public In(String name){  if (name == null)   throw new NullPointerException("argument is null");  try {    File file=new File(name);    if (file.exists()) {      FileInputStream fis=new FileInputStream(file);      scanner=new Scanner(new BufferedInputStream(fis),CHARSET_NAME);      scanner.useLocale(LOCALE);      return;    }    URL url=getClass().getResource(name);    if (url == null) {      url=new URL(name);    }    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + name);  }}  }
class C{  public boolean contains(double x,double y,double w,double h){  if (npoints <= 0 || !bounds.intersects(x,y,w,h)) {    return false;  }  updateComputingPath();  return closedPath.contains(x,y,w,h);}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  public Long2IntegerBinMap(String fileName) throws IOException, CanceledException {  final File file=new File(fileName);  if (!file.exists())   throw new IOException("No such file: " + file);  if (!file.canRead())   throw new IOException("Can't read file: " + file);  if (!isBinFile(fileName))   throw new IOException("Wrong magic number: " + file);  try {    reader=new IntFileGetterMappedMemory(file);  } catch (  IOException ex) {    System.err.println("Opening file: " + file);    reader=new IntFileGetterRandomAccess(file);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GenericClassDecl fullCopy(){  GenericClassDecl tree=(GenericClassDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Value mapKey(Value key,Value val){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  public static boolean isEditableType(String type){  return editableTypes.contains(type);}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public static void adoptPet(Player player,int eggObjId,int petId,String name,int decorationId){  int eggId=player.getInventory().getItemByObjId(eggObjId).getItemId();  ItemTemplate template=DataManager.ITEM_DATA.getItemTemplate(eggId);  if (!validateAdoption(player,template,petId)) {    return;  }  if (!player.getInventory().decreaseByObjectId(eggObjId,1)) {    return;  }  int expireTime=template.getActions().getAdoptPetAction().getExpireMinutes() != 0 ? (int)((System.currentTimeMillis() / 1000) + template.getActions().getAdoptPetAction().getExpireMinutes() * 60) : 0;  addPet(player,petId,name,decorationId,expireTime);}  }
class C{  @SuppressWarnings("unchecked") public LinkedTreeMap(){  this((Comparator<? super K>)NATURAL_ORDER);}  }
class C{  protected Bindings createBindings(VariableScope variableScope,boolean storeScriptVariables){  return scriptBindingsFactory.createBindings(variableScope,storeScriptVariables);}  }
class C{  private boolean mustUpdateCoordinates(){  boolean mustUpdate=(zScores.size() == 0);  if (previousTranspose != isTranspose()) {    mustUpdate=true;  }  if (!mustUpdate && scalingType == ChartViewer.ScalingType.ZSCORE && getChartData().getNumberOfClasses() > 0 && getChartData().getNumberOfSeries() > 0 && zScores.size() == 0) {    mustUpdate=true;  }  if (previousTranspose != isTranspose()) {    previousTranspose=isTranspose();    previousClusterSeries=false;    previousClusterClasses=false;  }  if (!mustUpdate && classNames != null) {    final ArrayList<String> currentClasses=new ArrayList<>(getChartData().getClassNames());    if (!previousClasses.equals(currentClasses)) {      mustUpdate=true;      previousClasses.clear();      previousClasses.addAll(currentClasses);    }  }  if (!mustUpdate && seriesNames != null) {    final ArrayList<String> currentSamples=new ArrayList<>(getChartData().getSeriesNames());    if (!previousSamples.equals(currentSamples)) {      mustUpdate=true;      previousSamples.clear();      previousSamples.addAll(currentSamples);    }  }  if (!mustUpdate) {    if (!previousClusterClasses && viewer.getClassesList().isDoClustering())     mustUpdate=true;  }  if (!mustUpdate) {    if (!previousClusterSeries && viewer.getSeriesList().isDoClustering())     mustUpdate=true;  }  return mustUpdate;}  }
class C{  @Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augmentations) throws XNIException {}  }
class C{  public void addSourcePath(PathPart pathPart){  sourcePath.add(pathPart);  pathPart.program=this;}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ViewerBase;}  }
class C{  @Override public <I>void hear(TypeLiteral<I> typeLiteral,final TypeEncounter<I> typeEncounter){  if (typeLiteral.getRawType().isAnnotationPresent(PageObject.class)) {    typeEncounter.register(new PageObjectInjectorListener(typeEncounter));  }}  }
class C{  private void showDescriptionLine(Spannable str,int textColor){  if (mContentsView.mTextLine2.getVisibility() != VISIBLE) {    mContentsView.mTextLine2.setVisibility(VISIBLE);  }  mContentsView.mTextLine2.setTextColor(textColor);  mContentsView.mTextLine2.setText(str,BufferType.SPANNABLE);}  }
class C{  @Override public String toString(){  return "FileDeleteStrategy[" + name + "]";}  }
class C{  @Override public XSModel toXSModel(){  return new XSModelImpl(new SchemaGrammar[]{this});}  }
class C{  public boolean needsUpdatingWhileSaving(){  return mNeedsUpdating;}  }
class C{  @Override public final void processValue(final SourceDataTagValue sourceDataTagValue) throws JMSException {  if (LOGGER.isTraceEnabled()) {    LOGGER.trace("pushing SourceDataTagValue into proxy buffer");  }  highPriorityBuffer.push(sourceDataTagValue);}  }
class C{  static Process forkProcess(Command command,File directory) throws IOException {  command.beforeExecute();  Process process=forkProcess(directory,command.getCommand());  redirectOutputStream(process,command.getOutputStreamRedirection(),command);  if (_logger.isDebugEnabled())   redirectOutputStream(process,System.out,command);  command.afterExecute(process);  return process;}  }
class C{  private SocketChannel createSocket(String host,int port) throws IOException {  SocketChannel sockChannel=SocketChannel.open();  sockChannel.configureBlocking(true);  m_Address=new InetSocketAddress(host,port);  LRMIUtilities.initNewSocketProperties(sockChannel);  return sockChannel;}  }
class C{  public ExecuteTaskSpaceOperationResult(){}  }
class C{  public static Settings init(String tag){  printer=new LoggerPrinter();  return printer.init(tag);}  }
class C{  public ObjectFactory(){}  }
class C{  public static StatefulHash md5(){  return Hashes.createStateful(SimpleHashParameters.MD5);}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4);}  }
class C{  @Override public Supervised clone(){  try {    AbstractSupervisedCacheObject cacheObject=(AbstractSupervisedCacheObject)super.clone();    if (this.statusTime != null) {      cacheObject.statusTime=(Timestamp)this.statusTime.clone();    }    return cacheObject;  } catch (  CloneNotSupportedException e) {    throw new RuntimeException("Exception caught in cloning Supervised object - this should not happen!",e);  }}  }
class C{  public Config(String file){  this(new File(CONFIG_DIR,file.contains(".") ? file : file.concat(".conf")));}  }
class C{  public void closeSharedIterator(){  _sharedObjectListLock.writeLock().lock();  try {    _numberOfConsumers--;    if (_closed)     return;    if (_sourceIteratorExhausted || _numberOfConsumers == 0) {      if (_logger.isLoggable(Level.FINEST))       _logger.finest("closed shared iterator source [" + _identifier + "]");      triggerClosedEvent();      if (_sourceDataIterator != null) {        _sharedObjectListLock.writeLock().lock();        try {          _sourceDataIterator.close();        }  finally {          _sharedObjectListLock.writeLock().unlock();        }      }      _closed=true;    }  }  finally {    _sharedObjectListLock.writeLock().unlock();  }}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  int srcWidth=srcSize.getWidth();  int srcHeight=srcSize.getHeight();  int targetWidth=maxBitmapSize.getWidth();  int targetHeight=maxBitmapSize.getHeight();  int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201026,skillcaster,skilltarget,skillname);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  private void computeTabTiltHelper(long time,RectF stackRect){  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;  final float parentWidth=stackRect.width();  final float parentHeight=stackRect.height();  final float overscrollPercent=computeOverscrollPercent();  if (mOverviewAnimationType == OverviewAnimationType.START_PINCH || mOverviewAnimationType == OverviewAnimationType.DISCARD || mOverviewAnimationType == OverviewAnimationType.FULL_ROLL || mOverviewAnimationType == OverviewAnimationType.TAB_FOCUSED || mOverviewAnimationType == OverviewAnimationType.UNDISCARD || mOverviewAnimationType == OverviewAnimationType.DISCARD_ALL) {  } else   if (mPinch0TabIndex >= 0 || overscrollPercent == 0.0f || mOverviewAnimationType == OverviewAnimationType.REACH_TOP) {    for (int i=0; i < mStackTabs.length; ++i) {      StackTab stackTab=mStackTabs[i];      LayoutTab layoutTab=stackTab.getLayoutTab();      layoutTab.setTiltX(0,0);      layoutTab.setTiltY(0,0);    }  } else   if (overscrollPercent < 0) {    if (mOverScrollCounter >= OVERSCROLL_FULL_ROLL_TRIGGER) {      startAnimation(time,OverviewAnimationType.FULL_ROLL);      mOverScrollCounter=0;      setScrollTarget(MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false)),false);    } else {      float tilt=0;      if (overscrollPercent < -OVERSCROLL_TOP_SLIDE_PCTG) {        float scaledOverscroll=(overscrollPercent + OVERSCROLL_TOP_SLIDE_PCTG) / (1 - OVERSCROLL_TOP_SLIDE_PCTG);        tilt=mUnderScrollAngleInterpolator.getInterpolation(-scaledOverscroll) * -mMaxOverScrollAngle * BACKWARDS_TILT_SCALE;      }      float pivotOffset=0;      LayoutTab topTab=mStackTabs[mStackTabs.length - 1].getLayoutTab();      pivotOffset=portrait ? topTab.getScaledContentHeight() / 2 + topTab.getY() : topTab.getScaledContentWidth() / 2 + topTab.getX();      for (int i=0; i < mStackTabs.length; ++i) {        StackTab stackTab=mStackTabs[i];        LayoutTab layoutTab=stackTab.getLayoutTab();        if (portrait) {          layoutTab.setTiltX(tilt,pivotOffset - layoutTab.getY());        } else {          layoutTab.setTiltY(LocalizationUtils.isLayoutRtl() ? -tilt : tilt,pivotOffset - layoutTab.getX());        }      }    }  } else {    float tilt=mOverScrollAngleInterpolator.getInterpolation(overscrollPercent) * mMaxOverScrollAngle;    float offset=mOverscrollSlideInterpolator.getInterpolation(overscrollPercent) * mMaxOverScrollSlide;    for (int i=0; i < mStackTabs.length; ++i) {      StackTab stackTab=mStackTabs[i];      LayoutTab layoutTab=stackTab.getLayoutTab();      if (portrait) {        float adjust=MathUtils.clamp((layoutTab.getY() / parentHeight) + 0.50f,0,1);        layoutTab.setTiltX(tilt * adjust,layoutTab.getScaledContentHeight() / 3);        layoutTab.setY(layoutTab.getY() + offset);      } else       if (LocalizationUtils.isLayoutRtl()) {        float adjust=MathUtils.clamp(-(layoutTab.getX() / parentWidth) + 0.50f,0,1);        layoutTab.setTiltY(-tilt * adjust,layoutTab.getScaledContentWidth() * 2 / 3);        layoutTab.setX(layoutTab.getX() - offset);      } else {        float adjust=MathUtils.clamp((layoutTab.getX() / parentWidth) + 0.50f,0,1);        layoutTab.setTiltY(tilt * adjust,layoutTab.getScaledContentWidth() / 3);        layoutTab.setX(layoutTab.getX() + offset);      }    }  }}  }
class C{  public FriendsGetRequestsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("chart wordCount kmer=");  int kmer=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase("step=");  int step=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase("mindepth=");  int mindepth=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase(";");  AlignmentViewer alignmentViewer=(AlignmentViewer)getViewer();  DiversityPlotViewer viewer=new DiversityPlotViewer((Director)getDir(),alignmentViewer,kmer,step,mindepth);  getDir().addViewer(viewer);  viewer.setVisible(true);}  }
class C{  protected static void deleteFile(@Nonnull final File file){  Check.notNull(file,"file");  Check.stateIsTrue(!file.exists() || file.delete(),"Cannot delete file '%s'.",file.getPath());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP_VITAL_MAKEUP_BONUS(String value0,long num1,long num2,long num3){  return new SM_SYSTEM_MESSAGE(1400344,value0,num1,num2,num3);}  }
class C{  public int cloneNode(int nodeIndex,boolean deep){  int nchunk=nodeIndex >> CHUNK_SHIFT;  int nindex=nodeIndex & CHUNK_MASK;  int nodeType=fNodeType[nchunk][nindex];  int cloneIndex=createNode((short)nodeType);  int cchunk=cloneIndex >> CHUNK_SHIFT;  int cindex=cloneIndex & CHUNK_MASK;  setChunkValue(fNodeName,fNodeName[nchunk][nindex],cchunk,cindex);  setChunkValue(fNodeValue,fNodeValue[nchunk][nindex],cchunk,cindex);  setChunkValue(fNodeURI,fNodeURI[nchunk][nindex],cchunk,cindex);  int extraIndex=fNodeExtra[nchunk][nindex];  if (extraIndex != -1) {    if (nodeType != Node.ATTRIBUTE_NODE && nodeType != Node.TEXT_NODE) {      extraIndex=cloneNode(extraIndex,false);    }    setChunkIndex(fNodeExtra,extraIndex,cchunk,cindex);  }  if (deep) {    int prevIndex=-1;    int childIndex=getLastChild(nodeIndex,false);    while (childIndex != -1) {      int clonedChildIndex=cloneNode(childIndex,deep);      insertBefore(cloneIndex,clonedChildIndex,prevIndex);      prevIndex=clonedChildIndex;      childIndex=getRealPrevSibling(childIndex,false);    }  }  return cloneIndex;}  }
class C{  public void print(PrintWriter output,NumberFormat format,int width){  output.println();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      String s=format.format(A[i][j]);      int padding=Math.max(1,width - s.length());      for (int k=0; k < padding; k++)       output.print(' ');      output.print(s);    }    output.println();  }  output.println();}  }
class C{  public CheckpointRecord(BasicLogRecord rec){  int txCount=(Integer)rec.nextVal(INTEGER).asJavaVal();  this.lsn=rec.getLSN();  this.txNums=new ArrayList<Long>();  for (int i=0; i < txCount; i++) {    txNums.add((Long)rec.nextVal(BIGINT).asJavaVal());  }}  }
class C{  public LaguerreSolver(double relativeAccuracy,double absoluteAccuracy,double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_REJECT_INVITATION(String value0){  return new SM_SYSTEM_MESSAGE(1301005,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_SKILL_LEVEL(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1300590,value1,value0);}  }
class C{  @Override public void clearNodes(){  super.clearNodes();  getPlugin().getUserManager().giveDefaultIfNeeded(this,false);}  }
class C{  public WishlistComponentCursor queryWishlistsComponent(){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_WISHLIST_COMPONENT;  qh.Columns=null;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  SQLiteQueryBuilder qb=builderWishlistComponent();  Cursor cursor=qb.query(getWritableDatabase(),qh.Columns,qh.Selection,qh.SelectionArgs,qh.GroupBy,qh.Having,qh.OrderBy,qh.Limit);  return new WishlistComponentCursor(cursor);}  }
class C{  public static String s1(int v){  char[] result=new char[3];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 2; i++) {    result[2 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  boolean isSterile(){  if ((access_flags & ACC_PUBLIC) != 0 && (access_flags & ACC_FINAL) == 0)   return false;  return true;}  }
class C{  public LocalVariableTable_attribute findLocalVariableTable(){  int i;  for (i=0; i < attributes_count; i++) {    if (attributes[i] instanceof LocalVariableTable_attribute)     return (LocalVariableTable_attribute)(attributes[i]);  }  return null;}  }
class C{  public Set<UserDefinedAction> areGesturesRegistered(Collection<MouseGesture> gesture){  Set<MouseGesture> collisions=new HashSet<>(actionMap.keySet());  collisions.retainAll(gesture);  Set<UserDefinedAction> output=new HashSet<>();  for (  MouseGesture collision : collisions) {    output.add(actionMap.get(collision));  }  return output;}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  public V resultAt(N stmt,D value){  return val.get(stmt,value);}  }
class C{  public boolean isEmpty(){  final Segment<K,V>[] segments=this.segments;  int[] mc=new int[segments.length];  int mcsum=0;  for (int i=0; i < segments.length; ++i) {    if (segments[i].count != 0)     return false; else     mcsum+=mc[i]=segments[i].modCount;  }  if (mcsum != 0) {    for (int i=0; i < segments.length; ++i) {      if (segments[i].count != 0 || mc[i] != segments[i].modCount)       return false;    }  }  return true;}  }
class C{  @PostConstruct public void init(){  LOGGER.info("Initializing SubEquipment cache...");  commonInit();  doPostConfigurationOfSubEquipmentControlTags();  LOGGER.info("... SubEquipment cache initialization complete.");}  }
class C{  private static String filterCriteriaRebuilder(String input){  String[] split=input.split("\\$");  StringBuilder builder=new StringBuilder(input);  if (split.length <= 3)   builder.append("$").append(IssueCounter.GROUP_TOTAL);  return builder.toString();}  }
class C{  void renamedAttrNode(Attr oldAt,Attr newAt){}  }
class C{  @Override public void put(long index,int value){  index<<=2;  if (index < fileLength) {    final ByteBuffer buf=buffers[getWhichBuffer(index)];    int indexBuffer=getIndexInBuffer(index);    buf.put(indexBuffer++,(byte)(value >> 24));    buf.put(indexBuffer++,(byte)(value >> 16));    buf.put(indexBuffer++,(byte)(value >> 8));    buf.put(indexBuffer,(byte)(value));  } else {    throw new ArrayIndexOutOfBoundsException("" + index);  }}  }
class C{  public static void copy(byte[] input,Writer output,String encoding) throws IOException {  ByteArrayInputStream in=new ByteArrayInputStream(input);  copy(in,output,encoding);}  }
class C{  @ManagedOperation(description="Notifies all Tag cache listeners (status confirmation). Refresh supervision status after this call!") public void notifyAllTagCacheListeners(){  LOGGER.info("Recovery task: notifying all tag listeners.");  for (  Long key : controlTagCache.getKeys()) {    controlTagCache.acquireWriteLockOnKey(key);    try {      ControlTag controlTag=controlTagCache.getCopy(key);      long eventTime=System.currentTimeMillis();      controlTagCache.notifyListenerStatusConfirmation(controlTag,eventTime);    }  finally {      controlTagCache.releaseWriteLockOnKey(key);    }  }  for (  Long key : dataTagCache.getKeys()) {    dataTagCache.acquireWriteLockOnKey(key);    try {      DataTag dataTag=dataTagCache.getCopy(key);      long eventTime=System.currentTimeMillis();      dataTagCache.notifyListenerStatusConfirmation(dataTag,eventTime);    }  finally {      dataTagCache.releaseWriteLockOnKey(key);    }  }  LOGGER.info("Recovery task: finished notifying all tag listeners.");}  }
class C{  public static double max(double a,double b){  return (a >= b) ? a : b;}  }
class C{  public void readMail(Player player,int letterId){  Letter letter=player.getMailbox().getLetterFromMailbox(letterId);  if (letter == null) {    log.warn("Cannot read mail " + player.getObjectId() + " "+ letterId);    return;  }  PacketSendUtility.sendPacket(player,new SM_MAIL_SERVICE(player,letter,letter.getTimeStamp().getTime()));  letter.setReadLetter();}  }
class C{  public CatalogEntry(String name,Vector args) throws CatalogException {  Integer iType=(Integer)entryTypes.get(name);  if (iType == null) {    throw new CatalogException(CatalogException.INVALID_ENTRY_TYPE);  }  int type=iType.intValue();  try {    Integer iArgs=(Integer)entryArgs.get(type);    if (iArgs.intValue() != args.size()) {      throw new CatalogException(CatalogException.INVALID_ENTRY);    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new CatalogException(CatalogException.INVALID_ENTRY_TYPE);  }  entryType=type;  this.args=args;}  }
class C{  public static Map<String,Object> authOrderPaymentPreference(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  BigDecimal overrideAmount=(BigDecimal)context.get("overrideAmount");  if (overrideAmount != null) {    if (overrideAmount.compareTo(BigDecimal.ZERO) < 0) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentAmountIsNegative",UtilMisc.toMap("overrideAmount",overrideAmount),locale));    }    if (overrideAmount.compareTo(BigDecimal.ZERO) == 0) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentAmountIsZero",UtilMisc.toMap("overrideAmount",overrideAmount),locale));    }  }  GenericValue orderHeader=null;  GenericValue orderPaymentPreference=null;  try {    orderPaymentPreference=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();    orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader",false);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  BigDecimal totalRemaining=orh.getOrderGrandTotal();  Long procAttempt=orderPaymentPreference.getLong("processAttempt");  if (procAttempt == null) {    procAttempt=Long.valueOf(0);  }  orderPaymentPreference.set("processAttempt",Long.valueOf(procAttempt.longValue() + 1));  try {    orderPaymentPreference.store();    orderPaymentPreference.refresh();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale));  }  boolean reAuth=false;  if (orderPaymentPreference.get("statusId") != null && "PAYMENT_AUTHORIZED".equals(orderPaymentPreference.getString("statusId"))) {    reAuth=true;  }  BigDecimal transAmount=null;  if (overrideAmount != null) {    transAmount=overrideAmount;  } else {    transAmount=orderPaymentPreference.getBigDecimal("maxAmount");  }  transAmount=transAmount.setScale(decimals,rounding);  if ((transAmount != null) && (transAmount.compareTo(BigDecimal.ZERO) <= 0)) {    Map<String,Object> results=ServiceUtil.returnSuccess();    results.put("finished",Boolean.TRUE);    results.put("errors",Boolean.FALSE);    return results;  }  try {    Map<String,Object> authPaymentResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);    if (authPaymentResult != null) {      BigDecimal thisAmount=(BigDecimal)authPaymentResult.get("processAmount");      try {        boolean processResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);        if (processResult) {          Map<String,Object> results=ServiceUtil.returnSuccess();          results.put("messages",authPaymentResult.get("customerRespMsgs"));          results.put("processAmount",thisAmount);          results.put("finished",Boolean.TRUE);          results.put("errors",Boolean.FALSE);          results.put("authCode",authPaymentResult.get("authCode"));          return results;        } else {          boolean needsNsfRetry=needsNsfRetry(orderPaymentPreference,authPaymentResult,delegator);          if (needsNsfRetry) {          }          if (!needsNsfRetry) {            if (UtilValidate.isNotEmpty(orderHeader.getString("autoOrderShoppingListId"))) {              GenericValue productStore=orderHeader.getRelatedOne("ProductStore",false);              if ("Y".equals(productStore.getString("autoOrderCcTryOtherCards"))) {                List<GenericValue> otherPaymentMethodAndCreditCardList=null;                String billToPartyId=null;                GenericValue billToParty=orh.getBillToParty();                if (billToParty != null) {                  billToPartyId=billToParty.getString("partyId");                } else {                }                if (UtilValidate.isNotEmpty(billToPartyId)) {                  otherPaymentMethodAndCreditCardList=EntityQuery.use(delegator).from("PaymentMethodAndCreditCard").where("partyId",billToPartyId,"paymentMethodTypeId","CREDIT_CARD").filterByDate().queryList();                }                if (UtilValidate.isNotEmpty(otherPaymentMethodAndCreditCardList)) {                  for (                  GenericValue otherPaymentMethodAndCreditCard : otherPaymentMethodAndCreditCardList) {                    orderPaymentPreference.set("paymentMethodId",otherPaymentMethodAndCreditCard.getString("paymentMethodId"));                    Map<String,Object> authRetryResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);                    try {                      boolean processRetryResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);                      if (processRetryResult) {                        orderPaymentPreference.store();                        Map<String,Object> results=ServiceUtil.returnSuccess();                        results.put("messages",authRetryResult.get("customerRespMsgs"));                        results.put("processAmount",thisAmount);                        results.put("finished",Boolean.TRUE);                        results.put("errors",Boolean.FALSE);                        return results;                      }                    } catch (                    GeneralException e) {                      String errMsg="Error saving and processing payment authorization results: " + e.toString();                      Debug.logError(e,errMsg + "; authRetryResult: " + authRetryResult,module);                      Map<String,Object> results=ServiceUtil.returnSuccess();                      results.put(ModelService.ERROR_MESSAGE,errMsg);                      results.put("finished",Boolean.FALSE);                      results.put("errors",Boolean.TRUE);                      return results;                    }                  }                }              }            }          }          Map<String,Object> results=ServiceUtil.returnSuccess();          results.put("messages",authPaymentResult.get("customerRespMsgs"));          results.put("finished",Boolean.FALSE);          results.put("errors",Boolean.FALSE);          return results;        }      } catch (      GeneralException e) {        String errMsg="Error saving and processing payment authorization results: " + e.toString();        Debug.logError(e,errMsg + "; authPaymentResult: " + authPaymentResult,module);        Map<String,Object> results=ServiceUtil.returnSuccess();        results.put(ModelService.ERROR_MESSAGE,errMsg);        results.put("finished",Boolean.FALSE);        results.put("errors",Boolean.TRUE);        return results;      }    } else {      String errMsg="Invalid Order Payment Preference: maxAmount is 0";      Debug.logInfo(errMsg,module);      Map<String,Object> results=ServiceUtil.returnSuccess();      results.put("finished",Boolean.FALSE);      results.put("errors",Boolean.TRUE);      results.put(ModelService.ERROR_MESSAGE,errMsg);      orderPaymentPreference.set("statusId","PAYMENT_CANCELLED");      try {        orderPaymentPreference.store();      } catch (      GenericEntityException e) {        Debug.logError(e,"ERROR: Problem setting OrderPaymentPreference status to CANCELLED",module);      }      return results;    }  } catch (  GeneralException e) {    Debug.logError(e,"Error processing payment authorization",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentCannotBeAuthorized",UtilMisc.toMap("errroString",e.toString()),locale));  }}  }
class C{  public Iterator<Edge> edgesOutOf(Unit u){  return new TargetsOfUnitIterator(u);}  }
class C{  public PollsAddVoteQuery addVote(UserActor actor,int pollId,int answerId){  return new PollsAddVoteQuery(getClient(),actor,pollId,answerId);}  }
class C{  private Object readResolve(){  return forName(name);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CONNECTION_STATUS(String value0){  return new SM_SYSTEM_MESSAGE(1390134,value0);}  }
class C{  @Override public MaryData process(MaryData d) throws Exception {  return d;}  }
class C{  public static <T extends BaseFragment>T newInstance(Class<T> fragmentClazz,Bundle args){  T fragment=null;  try {    fragment=fragmentClazz.newInstance();    fragment.setArguments(args);  } catch (  java.lang.InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }  return fragment;}  }
class C{  IEntryCacheInfo insertEntryToCache(Context context,IEntryHolder entryHolder,boolean newEntry,TypeData typeData,boolean pin){  if (typeData == null)   typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());  final IEntryCacheInfo pEntry=!entryHolder.isOffHeapEntry() ? EntryCacheInfoFactory.createEntryCacheInfo(entryHolder,typeData.numberOfBackRefs(),pin,getEngine()) : ((IOffHeapEntryHolder)entryHolder).getOffHeapResidentPart();  context.setWriteResult(null);  try {    if (newEntry)     entryHolder.setunStable(true);    final boolean consider_fifo=newEntry && typeData.isFifoSupport();    final boolean fifo_notification_for_nonfifo=newEntry && !typeData.isFifoSupport() && context.getNotifyNewEntry() != null && _templatesManager.anyNotifyFifoForNonFifoTypePerOperation(entryHolder.getServerTypeDesc(),SpaceOperations.WRITE);    if (consider_fifo || fifo_notification_for_nonfifo) {      boolean nofify_fifo=fifo_notification_for_nonfifo || (_templatesManager.anyNotifyFifoWriteTemplates() && context.getNotifyNewEntry() != null);      if (nofify_fifo)       context.setRecentFifoObject(new FifoBackgroundRequest(context.getOperationID(),true,!fifo_notification_for_nonfifo,entryHolder,null,context.isFromReplication(),SpaceOperations.WRITE,entryHolder.getXidOriginatedTransaction(),context.getNotifyNewEntry())); else       context.setRecentFifoObject(new FifoBackgroundRequest(context.getOperationID(),false,true,entryHolder,null,context.isFromReplication(),SpaceOperations.WRITE,entryHolder.getXidOriginatedTransaction(),null));    }    if (consider_fifo || (entryHolder.isOffHeapEntry() && newEntry && typeData.getFifoGroupingIndex() != null)) {      typeData.setFifoOrderFieldsForEntry(entryHolder);    }    return internalInsertEntryToCache(context,entryHolder,newEntry,typeData,pEntry,pin);  }  finally {    if (newEntry)     entryHolder.setunStable(false);  }}  }
class C{  public Selection isEqualTo(DateColumn column){  Selection results=new BitmapBackedSelection();  int i=0;  IntIterator intIterator=column.intIterator();  for (  int next : data) {    if (next == intIterator.nextInt()) {      results.add(i);    }    i++;  }  return results;}  }
class C{  public void addLocators(LookupLocator[] locators){  locatorDisc.addLocators(locators);}  }
class C{  public void drop(){  if (logger.isLoggable(Level.FINEST))   logger.finest("Terminating GigaSpacesFaultDetectionHandler " + "Thread");  keepAlive=false;  interrupt();}  }
class C{  public String process(Item item) throws ProcessException {  String name=item.getFeatures().getString("name");  return Integer.toString(rail(name.length()));}  }
class C{  public DisjointSets(int numElements){  array=new int[numElements];  Arrays.fill(array,-1);}  }
class C{  public void back(){  if (--pos == -1) {    pos=0;  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  @Override public void revertToDefaultValue(){  if (colourButton != null) {    oldValueObj=this.defaultValue;    colourButton.populate(this.defaultValue);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_USE_ITEM_DURING_PATH_FLYING(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300048,descriptionId);}  }
class C{  public static <T>void unpublishService(String url) throws RpcException {  try {    ServicePublisher.unpublishService(url);  } catch (  RegistryException e) {    throw new RpcException("error while unpublishing service:" + url,e);  }}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public Buffer(byte[] bytes){  this.bytes=bytes;  this.count=(bytes == null) ? 0 : bytes.length;}  }
class C{  public static AudioFileFormat.Type findTargetType(String strExtension){  AudioFileFormat.Type[] aTypes=AudioSystem.getAudioFileTypes();  for (int i=0; i < aTypes.length; i++) {    if (aTypes[i].getExtension().equals(strExtension)) {      return aTypes[i];    }  }  return null;}  }
class C{  public void destroyView() throws CanceledException {  dir.getDocument().getSampleSelection().removeSampleSelectionListener(selectionListener);  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());  dir.removeViewer(this);  frame.dispose();}  }
class C{  public void testSortByVirtualFieldStraight() throws Exception {  deleteAllDocs();  send("addDocument","{fields: {id: 0, boost: 1.0}}");  send("addDocument","{fields: {id: 1, boost: 2.0}}");  send("search","{query: MatchAllDocsQuery, sort: {fields: [{field: logboost}]}, retrieveFields: [id]}");  assertEquals(2,getInt("totalHits"));  assertEquals(0,getInt("hits[0].fields.id"));  assertEquals(1,getInt("hits[1].fields.id"));  assertEquals(0.0f,getFloat("hits[0].fields.sortFields.logboost"),.0001f);  assertEquals(.6931f,getFloat("hits[1].fields.sortFields.logboost"),.0001f);}  }
class C{  @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals){  AuthorizationInfo authorizationInfo=getUncachedAuthorizationInfoFromPrincipals(principals);  Cache<String,AuthorizationInfo> internalAuthorizationCache=getAvailableInternalAuthorizationCache();  if (internalAuthorizationCache != null) {    for (    PrincipalWithRoles principal : getPrincipalsFromPrincipalCollection(principals)) {      if (internalAuthorizationCache.get(principal.getInternalId()) == null) {        cacheAuthorizationInfoByInternalId(principal.getInternalId(),authorizationInfo);      }    }  }  return authorizationInfo;}  }
class C{  public String toString(){  return "QueueBrowser for the session:" + m_session.toString();}  }
class C{  public static Map<String,Object> convertDocument(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl="file:///" + context.get("filenameFrom");  String stringConvertedFile="file:///" + context.get("filenameTo");  String filterName="file:///" + context.get("filterName");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    OpenOfficeWorker.convertOODocToFile(xmulticomponentfactory,stringUrl,stringConvertedFile,filterName);    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }}  }
class C{  public void componentResized(ComponentEvent ev){  viewer.setSize(viewer.getSize());}  }
class C{  static double[] loadExpFracA(){  return EXP_FRAC_A.clone();}  }
class C{  private void createUI(int noOfRows){  setLayout(new BorderLayout());  int xPos=0;  int width=BasePanel.FIELD_PANEL_WIDTH - xPos - 20;  int height=BasePanel.WIDGET_HEIGHT * (noOfRows - 1);  this.setBounds(0,0,width,height);  textField=new JTextArea();  textField.setBounds(xPos,BasePanel.WIDGET_HEIGHT,width,height);  Font font=textField.getFont();  Font updatedFont=new Font(font.getFontName(),font.getStyle(),FONT_SIZE);  textField.setFont(updatedFont);  textField.setEditable(true);  JScrollPane scroll=new JScrollPane(textField);  scroll.setAutoscrolls(true);  add(scroll,BorderLayout.CENTER);}  }
class C{  V readValueUnderLock(IHashEntry<K,V> e){  lock();  try {    return _h.value(e);  }  finally {    unlock();  }}  }
class C{  public ViewActionMenu(int rank,@NotNull String menuName,@Nullable Icon icon,@NotNull List<ViewAction> actions){  super(rank,icon,menuName);  myActions=actions;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public WallEditQuery markAsAds(Boolean value){  return unsafeParam("mark_as_ads",value);}  }
class C{  public static float unQuantize(short s,float fMin,float fRange){  return ((float)(((s) + 32768.0) * fRange / 65535.0 - fMin));}  }
class C{  public boolean similarTo(Object o){  if (o == null) {    return false;  }  if (!(o instanceof SemanticConcept)) {    return false;  }  SemanticConcept otherConcept=(SemanticConcept)o;  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);  synset_intersection.retainAll(otherConcept.synsets);  if (!synset_intersection.isEmpty()) {    return true;  }  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);  concept_intersection.retainAll(otherConcept.concepts);  return !concept_intersection.isEmpty();}  }
class C{  public IntArrayList top(int n){  IntArrayList top=new IntArrayList();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  public static final Segment scale(Segment segment,double scale){  if (segment == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  final double length=segment.getLength() * scale * 0.5;  Vector2 n=segment.vertices[0].to(segment.vertices[1]);  n.normalize();  n.multiply(length);  return new Segment(segment.center.sum(n.x,n.y),segment.center.difference(n.x,n.y));}  }
class C{  public static boolean isWindowsXPLookAndFeel(){  return UIUtils.isWindowsXPLookAndFeel();}  }
class C{  public String removeReferenceHeaderFromBlastMatch(String blastText){  int index=blastText.indexOf("Length");  if (index == -1)   index=blastText.indexOf("Score");  if (index > 0)   return blastText.substring(index); else   return blastText;}  }
class C{  public static void appendContentPrefix(HttpServletRequest request,Appendable urlBuffer,String webSiteId) throws IOException {  if (request == null) {    Debug.logWarning("Request was null in appendContentPrefix; this probably means this was used where it shouldn't be, like using ofbizContentUrl in a screen rendered through a service; using best-bet behavior: standard prefix from url.properties (no WebSite or security setting known)",module);    String prefix=UtilProperties.getPropertyValue("url","content.url.prefix.standard");    if (prefix != null) {      urlBuffer.append(prefix.trim());    }    return;  }  GenericValue webSite;  if (webSiteId != null && webSiteId.length() > 0) {    webSite=WebSiteWorker.findWebSite((Delegator)request.getAttribute("delegator"),webSiteId);  } else {    webSite=WebSiteWorker.getWebSite(request);  }  String forwardedProto=request.getHeader("X-Forwarded-Proto");  boolean isForwardedSecure=UtilValidate.isNotEmpty(forwardedProto) && "HTTPS".equals(forwardedProto.toUpperCase());  boolean isSecure=request.isSecure() || isForwardedSecure;  appendContentPrefix(webSite,isSecure,urlBuffer);}  }
class C{  private void requestAddNodesStop(){  enqueue(new AddNodeMessageClass().doRequestStop());  logger.debug("ZWave controller end inclusion");}  }
class C{  @SuppressWarnings("unused") public void enableLastSlideAlphaExitTransition(boolean enableAlphaExitTransition){  adapter.addEmptySlide(new LastEmptySlideFragment());}  }
class C{  protected UsersGetNearbyQuery longitude(float value){  return unsafeParam("longitude",value);}  }
class C{  @Override public void startDTD(XMLLocator locator,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>startDTD");    if (DEBUG_BASEURI) {      System.out.println("   expandedSystemId: " + locator.getExpandedSystemId());      System.out.println("   baseURI:" + locator.getBaseSystemId());    }  }  fInDTD=true;  if (locator != null) {    fBaseURIStack.push(locator.getBaseSystemId());  }  if (fDeferNodeExpansion || fDocumentImpl != null) {    fInternalSubset=new StringBuffer(1024);  }}  }
class C{  public boolean isTransformationApplied(){  return applyTransformation;}  }
class C{  private static FingerLock createInstance(@NonNull String keyName){  FingerLock fragment=new FingerLock();  Bundle arguments=new Bundle();  arguments.putString(ARG_KEY_NAME,keyName);  fragment.setArguments(arguments);  return fragment;}  }
class C{  public Polynomial(int order){  this.coeffs=new double[order + 1];}  }
class C{  @Override protected void runChild(Runner runner,RunNotifier notifier){  ParentRunner<?> pr=(ParentRunner<?>)runner;  ClassLoader cl=null;  try {    cl=Thread.currentThread().getContextClassLoader();    Thread.currentThread().setContextClassLoader(pr.getTestClass().getJavaClass().getClassLoader());    super.runChild(runner,notifier);  }  finally {    Thread.currentThread().setContextClassLoader(cl);  }}  }
class C{  @SuppressWarnings("unchecked") public static Object eval(String expression,Map<String,Object> context) throws CompilationFailedException {  Object o;  if (expression == null || expression.equals("")) {    Debug.logError("Groovy Evaluation error. Empty expression",module);    return null;  }  if (Debug.verboseOn()) {    Debug.logVerbose("Evaluating -- " + expression,module);    Debug.logVerbose("Using Context -- " + context,module);  }  try {    GroovyShell shell=new GroovyShell(getBinding(context));    o=shell.evaluate(StringUtil.convertOperatorSubstitutions(expression));    if (Debug.verboseOn()) {      Debug.logVerbose("Evaluated to -- " + o,module);    }    Binding binding=shell.getContext();    context.putAll(binding.getVariables());  } catch (  CompilationFailedException e) {    Debug.logError(e,"Groovy Evaluation error.",module);    throw e;  }  return o;}  }
class C{  public static String formatBigFraction(final BigFraction f){  return getImproperInstance().format(f);}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  public static Map<String,Object> addListToSolrIndex(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {  HttpSolrClient client=null;  Map<String,Object> result;  Boolean treatConnectErrorNonFatal=(Boolean)context.get("treatConnectErrorNonFatal");  try {    Collection<SolrInputDocument> docs=new ArrayList<SolrInputDocument>();    List<Map<String,Object>> fieldList=UtilGenerics.<Map<String,Object>>checkList(context.get("fieldList"));    if (fieldList.size() > 0) {      Debug.logInfo("Solr: Generating and adding " + fieldList.size() + " documents to solr index",module);      for (Iterator<Map<String,Object>> fieldListIterator=fieldList.iterator(); fieldListIterator.hasNext(); ) {        SolrInputDocument doc1=SolrUtil.generateSolrDocument(fieldListIterator.next());        if (Debug.verboseOn()) {          Debug.logVerbose("Solr: Indexing document: " + doc1.toString(),module);        }        docs.add(doc1);      }      if (UtilValidate.isNotEmpty(context.get("core"))) {        client=new HttpSolrClient(SolrUtil.solrUrl + "/" + context.get("core"));      } else {        client=new HttpSolrClient(SolrUtil.solrFullUrl);      }      client.add(docs);      client.commit();    } else {      Debug.logInfo("Solr: No documents to index",module);    }    final String statusStr="Added " + fieldList.size() + " documents to solr index";    Debug.logInfo("Solr: " + statusStr,module);    result=ServiceUtil.returnSuccess(statusStr);  } catch (  MalformedURLException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());    result.put("errorType","urlError");  }catch (  SolrServerException e) {    if (e.getCause() != null && e.getCause() instanceof ConnectException) {      final String statusStr="Failure connecting to solr server to commit product list; products not updated";      if (Boolean.TRUE.equals(treatConnectErrorNonFatal)) {        Debug.logWarning(e,"Solr: " + statusStr,module);        result=ServiceUtil.returnFailure(statusStr);      } else {        Debug.logError(e,"Solr: " + statusStr,module);        result=ServiceUtil.returnError(statusStr);      }      result.put("errorType","connectError");    } else {      Debug.logError(e,e.getMessage(),module);      result=ServiceUtil.returnError(e.toString());      result.put("errorType","solrServerError");    }  }catch (  IOException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());    result.put("errorType","ioError");  } finally {    try {      if (UtilValidate.isNotEmpty(client))       client.close();    } catch (    IOException e) {      result=ServiceUtil.returnError(e.toString());      result.put("errorType","ioError");    }  }  return result;}  }
class C{  public void onCompletion(MediaPlayer player){  Log.d(LOG_TAG,"on completion is calling stopped");  this.setState(STATE.MEDIA_STOPPED);}  }
class C{  public int optInt(int index){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return 0;  if (token.type == LazyNode.VALUE_NULL)   return 0;  return token.getIntValue(cbuf);}  }
class C{  public void createSets(){  createSets(true,1.0,false);}  }
class C{  public List<ShoppingCartItem> items(){  List<ShoppingCartItem> result=FastList.newInstance();  result.addAll(cartLines);  return result;}  }
class C{  private void insertTestData(List<? extends MithraDataObject> dataObjects,Object source){  if (dataObjects != null && !dataObjects.isEmpty()) {    MithraDataObject firstData=dataObjects.get(0);    RelatedFinder finder=firstData.zGetMithraObjectPortal().getFinder();    ((MithraAbstractDatabaseObject)finder.getMithraObjectPortal().getDatabaseObject()).insertData(Arrays.asList(finder.getPersistentAttributes()),dataObjects,source);    finder.getMithraObjectPortal().clearQueryCache();  }}  }
class C{  public boolean continueExecuting(){  return this.mate.isEntityAlive() && isWillingToMate(mate) && this.spawnBabyDelay < 60;}  }
class C{  public ArrowIcon(int direction,boolean isPressedView){  this(DEFAULT_SIZE,direction,isPressedView);}  }
class C{  private void startDrawFragment(){  changeToFragment(DrawFragment.newInstance(imageUri));}  }
class C{  private float[] loadBitmapData(Bitmap bitmap){  final int[] pixels=new int[width * height];  bitmap.getPixels(pixels,0,width,0,0,width,height);  bitmap.recycle();  final float[] heightmapVertices=new float[width * height * POSITION_COMPONENT_COUNT];  int offset=0;  for (int row=0; row < height; row++) {    for (int col=0; col < width; col++) {      final float xPosition=((float)col / (float)(width - 1)) - 0.5f;      final float yPosition=(float)Color.red(pixels[(row * height) + col]) / (float)255;      final float zPosition=((float)row / (float)(height - 1)) - 0.5f;      heightmapVertices[offset++]=xPosition;      heightmapVertices[offset++]=yPosition;      heightmapVertices[offset++]=zPosition;    }  }  return heightmapVertices;}  }
class C{  private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("TestStretchToMinimumMaximum"));  options.put("minValue",ff.literal("1.0"));  options.put("maxValue",ff.literal("5.0"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  public boolean isOpaqueCube(IBlockState state){  return false;}  }
class C{  public static void main(String[] arguments){  final Knock024A ab=new Knock024B();  System.out.println(ab.getString());}  }
class C{  public FileUtils(){  super();}  }
class C{  @Override public String toString(){  return this.getClass().getSimpleName() + ": Includes fields with these names: " + whitelist.toString();}  }
class C{  public Rotation toRotation(){  return new Rotation(q0.getReal(),q1.getReal(),q2.getReal(),q3.getReal(),false);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static void drawCircledText(Graphics2D g,Font font,String text,int x,int y){  Graphics2D g2=(Graphics2D)g.create();  g2.setFont(font);  FontMetrics fm=g2.getFontMetrics();  int padding=4;  Rectangle2D bounds=fm.getStringBounds(text,g2);  double th=bounds.getHeight();  double tw=bounds.getWidth();  float radius=(float)(Math.max(th,tw) / 2f + padding);  Ellipse2D.Float circle=new Ellipse2D.Float(x - radius,y - radius,2 * radius + 1,2 * radius + 1);  g2.fill(circle);  g2.setColor(Color.BLACK);  g2.drawString(text,(int)(x - tw / 2),(y + fm.getAscent() / 2));  if (DEBUG) {    g2.setColor(Color.RED);    g2.drawLine(x - 50,y,x + 50,y);    g2.drawLine(x,y - 50,x,y + 50);  }  g2.dispose();}  }
class C{  RestMethod analyzeMethod(Method method,HttpAttribute httpConfig){  RestMethod restMethod=createSpecialMethod(method,httpConfig);  if (restMethod == null) {    MethodMatcher matcher=null;    for (    MethodPattern pattern : RestPatterns.METHOD_PATTERNS) {      matcher=new MethodMatcher(pattern,method,httpConfig);      if (matcher.matches) {        break;      }      matcher=null;    }    if (matcher != null) {      restMethod=matcher.createRestMethod();    } else {      diagnose(method,httpConfig);      restMethod=createCustomMethod(method,httpConfig,"");    }  }  String collectionName=restMethod.getRestCollectionName();  CollectionAttribute collection=collectionMap.get(collectionName);  if (collection == null) {    collection=new CollectionAttribute(aspect.getModel(),collectionName);    collectionMap.put(collectionName,collection);  }  RestMethod oldMethod=collection.addMethod(restMethod);  if (oldMethod != null) {    aspect.lintWarning(METHOD_SHADOWED_RULE_NAME,restMethod.getBaseMethod(),"REST method '%s' from rpc method '%s' at '%s' on collection '%s' is shadowed by REST " + "method of same name from this rpc. The original method will not be available in " + "REST discovery and derived artifacts.",oldMethod.getRestMethodName(),oldMethod.getBaseMethod().getFullName(),oldMethod.getBaseMethod().getLocation().getDisplayString(),oldMethod.getRestCollectionName());  }  return restMethod;}  }
class C{  public boolean hasLure(){  try {    return hasLure(false);  } catch (  LoginFailedException|RemoteServerException e) {  }  return false;}  }
class C{  public static Map<String,Object> checkUpdatePrunRoutingTask(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  String routingTaskId=(String)context.get("routingTaskId");  if (!UtilValidate.isEmpty(productionRunId) && !UtilValidate.isEmpty(routingTaskId)) {    ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);    if (productionRun.exist()) {      if (!"PRUN_CREATED".equals(productionRun.getGenericValue().getString("currentStatusId")) && !"PRUN_SCHEDULED".equals(productionRun.getGenericValue().getString("currentStatusId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunPrinted",locale));      }      Timestamp estimatedStartDate=(Timestamp)context.get("estimatedStartDate");      Timestamp pRestimatedStartDate=productionRun.getEstimatedStartDate();      if (pRestimatedStartDate.after(estimatedStartDate)) {        try {          dispatcher.runSync("updateProductionRun",UtilMisc.toMap("productionRunId",productionRunId,"estimatedStartDate",estimatedStartDate,"userLogin",userLogin));        } catch (        GenericServiceException e) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingTaskStartDateBeforePRun",locale));        }      }      Long priority=(Long)context.get("priority");      List<GenericValue> pRRoutingTasks=productionRun.getProductionRunRoutingTasks();      boolean first=true;      for (Iterator<GenericValue> iter=pRRoutingTasks.iterator(); iter.hasNext(); ) {        GenericValue routingTask=iter.next();        if (priority.equals(routingTask.get("priority")) && !routingTaskId.equals(routingTask.get("workEffortId")))         return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingRoutingTaskSeqIdAlreadyExist",locale));        if (routingTaskId.equals(routingTask.get("workEffortId"))) {          routingTask.set("estimatedSetupMillis",((BigDecimal)context.get("estimatedSetupMillis")).doubleValue());          routingTask.set("estimatedMilliSeconds",((BigDecimal)context.get("estimatedMilliSeconds")).doubleValue());          if (first) {            if (!estimatedStartDate.equals(pRestimatedStartDate)) {              productionRun.setEstimatedStartDate(estimatedStartDate);            }          }          if (!priority.equals(routingTask.get("priority"))) {            routingTask.set("priority",priority);            if (!productionRun.store()) {              Debug.logError("productionRun.store(), in routingTask.priority update, fail for productionRunId =" + productionRunId,module);              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));            }            productionRun.clearRoutingTasksList();          }        }        if (first)         first=false;      }      productionRun.setEstimatedCompletionDate(productionRun.recalculateEstimatedCompletionDate(priority,estimatedStartDate));      if (productionRun.store()) {        return ServiceUtil.returnSuccess();      } else {        Debug.logError("productionRun.store() fail for productionRunId =" + productionRunId,module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));      }    }    Debug.logError("no productionRun for productionRunId =" + productionRunId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));  }  Debug.logError("service updateProductionRun call with productionRunId empty",module);  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));}  }
class C{  public Builder normalize(String column,Normalize type,DataAnalysis da){  ColumnAnalysis ca=da.getColumnAnalysis(column);  if (!(ca instanceof NumericalColumnAnalysis))   throw new IllegalStateException("Column \"" + column + "\" analysis is not numerical. "+ "Column is not numerical?");  NumericalColumnAnalysis nca=(NumericalColumnAnalysis)ca;  double min=nca.getMinDouble();  double max=nca.getMaxDouble();  double mean=nca.getMean();  double sigma=nca.getSampleStdev();switch (type) {case MinMax:    return transform(new MinMaxNormalizer(column,min,max));case MinMax2:  return transform(new MinMaxNormalizer(column,min,max,-1,1));case Standardize:return transform(new StandardizeNormalizer(column,mean,sigma));case SubtractMean:return transform(new SubtractMeanNormalizer(column,mean));case Log2Mean:return transform(new Log2Normalizer(column,mean,min,0.5));case Log2MeanExcludingMin:long countMin=nca.getCountMinValue();double meanExMin;if (ca.getCountTotal() - countMin == 0) {if (ca.getCountTotal() == 0) {log.warn("Normalizing with Log2MeanExcludingMin but 0 records present in analysis");} else {log.warn("Normalizing with Log2MeanExcludingMin but all records are the same value");}meanExMin=mean;} else {meanExMin=(mean * ca.getCountTotal() - countMin * min) / (ca.getCountTotal() - countMin);}return transform(new Log2Normalizer(column,meanExMin,min,0.5));default :throw new RuntimeException("Unknown/not implemented normalization type: " + type);}}  }
class C{  private static void buildRangeSet(List<String> entries,Interval interval,Map<String,RangeSet<DateTime>> container){  entries.stream().map(null).forEach(null);}  }
class C{  private void findClassLayoutMappings(){  Iterator<MethodOrMethodContext> rmIterator=Scene.v().getReachableMethods().listener();  while (rmIterator.hasNext()) {    SootMethod sm=rmIterator.next().method();    if (!sm.isConcrete())     continue;    for (    Unit u : sm.retrieveActiveBody().getUnits())     if (u instanceof Stmt) {      Stmt stmt=(Stmt)u;      if (stmt.containsInvokeExpr()) {        InvokeExpr inv=stmt.getInvokeExpr();        if (invokesSetContentView(inv)) {          for (          Value val : inv.getArgs())           if (val instanceof IntConstant) {            IntConstant constVal=(IntConstant)val;            Set<Integer> layoutIDs=this.layoutClasses.get(sm.getDeclaringClass().getName());            if (layoutIDs == null) {              layoutIDs=new HashSet<Integer>();              this.layoutClasses.put(sm.getDeclaringClass().getName(),layoutIDs);            }            layoutIDs.add(constVal.value);          }        }      }    }  }}  }
class C{  private static Entry[] concat(Entry[] attrs1,Entry[] attrs2){  Entry[] nattrs=new Entry[attrs1.length + attrs2.length];  System.arraycopy(attrs1,0,nattrs,0,attrs1.length);  System.arraycopy(attrs2,0,nattrs,attrs1.length,attrs2.length);  return nattrs;}  }
class C{  public SoftReferenceSymbolTableConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public static Style createNewStyle(){  Style style=styleFactory.createStyle();  style.setName("New Style");  return style;}  }
class C{  public List<ModelEntity> induceModelFromDb(Collection<String> messages){  ExecutorService executor=Executors.newFixedThreadPool(datasourceInfo.getMaxWorkerPoolSize());  TreeSet<String> tableNames=this.getTableNames(messages);  Map<String,Map<String,ColumnCheckInfo>> colInfo=getColumnInfo(tableNames,true,messages,executor);  List<ModelEntity> newEntList=new LinkedList<ModelEntity>();  boolean isCaseSensitive=getIsCaseSensitive(messages);  for (  String tableName : new TreeSet<String>(colInfo.keySet())) {    Map<String,ColumnCheckInfo> colMap=colInfo.get(tableName);    ModelEntity newEntity=new ModelEntity(tableName,colMap,modelFieldTypeReader,isCaseSensitive);    newEntList.add(newEntity);  }  executor.shutdown();  return newEntList;}  }
class C{  public static void fullSchemaChecking(XSGrammarBucket grammarBucket,SubstitutionGroupHandler SGHandler,CMBuilder cmBuilder,XMLErrorReporter errorReporter){  SchemaGrammar[] grammars=grammarBucket.getGrammars();  for (int i=grammars.length - 1; i >= 0; i--) {    SGHandler.addSubstitutionGroup(grammars[i].getSubstitutionGroups());  }  XSParticleDecl fakeDerived=new XSParticleDecl();  XSParticleDecl fakeBase=new XSParticleDecl();  fakeDerived.fType=XSParticleDecl.PARTICLE_MODELGROUP;  fakeBase.fType=XSParticleDecl.PARTICLE_MODELGROUP;  for (int g=grammars.length - 1; g >= 0; g--) {    XSGroupDecl[] redefinedGroups=grammars[g].getRedefinedGroupDecls();    SimpleLocator[] rgLocators=grammars[g].getRGLocators();    for (int i=0; i < redefinedGroups.length; ) {      XSGroupDecl derivedGrp=redefinedGroups[i++];      XSModelGroupImpl derivedMG=derivedGrp.fModelGroup;      XSGroupDecl baseGrp=redefinedGroups[i++];      XSModelGroupImpl baseMG=baseGrp.fModelGroup;      fakeDerived.fValue=derivedMG;      fakeBase.fValue=baseMG;      if (baseMG == null) {        if (derivedMG != null) {          reportSchemaError(errorReporter,rgLocators[i / 2 - 1],"src-redefine.6.2.2",new Object[]{derivedGrp.fName,"rcase-Recurse.2"});        }      } else       if (derivedMG == null) {        if (!fakeBase.emptiable()) {          reportSchemaError(errorReporter,rgLocators[i / 2 - 1],"src-redefine.6.2.2",new Object[]{derivedGrp.fName,"rcase-Recurse.2"});        }      } else {        try {          particleValidRestriction(fakeDerived,SGHandler,fakeBase,SGHandler);        } catch (        XMLSchemaException e) {          String key=e.getKey();          reportSchemaError(errorReporter,rgLocators[i / 2 - 1],key,e.getArgs());          reportSchemaError(errorReporter,rgLocators[i / 2 - 1],"src-redefine.6.2.2",new Object[]{derivedGrp.fName,key});        }      }    }  }  XSComplexTypeDecl[] types;  SimpleLocator[] ctLocators;  boolean further, fullChecked;  int keepType;  SymbolHash elemTable=new SymbolHash();  for (int i=grammars.length - 1, j; i >= 0; i--) {    keepType=0;    fullChecked=grammars[i].fFullChecked;    types=grammars[i].getUncheckedComplexTypeDecls();    ctLocators=grammars[i].getUncheckedCTLocators();    for (j=0; j < types.length; j++) {      if (!fullChecked) {        if (types[j].fParticle != null) {          elemTable.clear();          try {            checkElementDeclsConsistent(types[j],types[j].fParticle,elemTable,SGHandler);          } catch (          XMLSchemaException e) {            reportSchemaError(errorReporter,ctLocators[j],e.getKey(),e.getArgs());          }        }      }      if (types[j].fBaseType != null && types[j].fBaseType != SchemaGrammar.fAnyType && types[j].fDerivedBy == XSConstants.DERIVATION_RESTRICTION && (types[j].fBaseType instanceof XSComplexTypeDecl)) {        XSParticleDecl derivedParticle=types[j].fParticle;        XSParticleDecl baseParticle=((XSComplexTypeDecl)(types[j].fBaseType)).fParticle;        if (derivedParticle == null) {          if (baseParticle != null && !baseParticle.emptiable()) {            reportSchemaError(errorReporter,ctLocators[j],"derivation-ok-restriction.5.3.2",new Object[]{types[j].fName,types[j].fBaseType.getName()});          }        } else         if (baseParticle != null) {          try {            particleValidRestriction(types[j].fParticle,SGHandler,((XSComplexTypeDecl)(types[j].fBaseType)).fParticle,SGHandler);          } catch (          XMLSchemaException e) {            reportSchemaError(errorReporter,ctLocators[j],e.getKey(),e.getArgs());            reportSchemaError(errorReporter,ctLocators[j],"derivation-ok-restriction.5.4.2",new Object[]{types[j].fName});          }        } else {          reportSchemaError(errorReporter,ctLocators[j],"derivation-ok-restriction.5.4.2",new Object[]{types[j].fName});        }      }      XSCMValidator cm=types[j].getContentModel(cmBuilder,true);      further=false;      if (cm != null) {        try {          further=cm.checkUniqueParticleAttribution(SGHandler);        } catch (        XMLSchemaException e) {          reportSchemaError(errorReporter,ctLocators[j],e.getKey(),e.getArgs());        }      }      if (!fullChecked && further)       types[keepType++]=types[j];    }    if (!fullChecked) {      grammars[i].setUncheckedTypeNum(keepType);      grammars[i].fFullChecked=true;    }  }}  }
class C{  public void java_lang_Class_getComponentType(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  @deprecated public static int matchAfter(CharSequence a,CharSequence b,int aIndex,int bIndex){  int i=aIndex;  int j=bIndex;  int alen=a.length();  int blen=b.length();  for (; (i < alen) && (j < blen); j++) {    char ca=a.charAt(i);    char cb=b.charAt(j);    if (ca != cb) {      break;    }    i++;  }  int result=i - aIndex;  if ((result != 0) && (!onCharacterBoundary(a,i)) && (!onCharacterBoundary(b,j))) {    result--;  }  return result;}  }
class C{  public long parseLongHexadecimal(){  ASTNode$State state=state();  try {    long val=0;    if (digits.length() > 16) {      for (int i=0; i < digits.length() - 16; i++)       if (digits.charAt(i) != '0')       throw new NumberFormatException("");    }    for (int i=0; i < digits.length(); i++) {      int c=digits.charAt(i);      if (c >= 'a' && c <= 'f')       c=c - 'a' + 10; else       c=c - '0';      val=val * 16 + c;    }    return val;  }  finally {  }}  }
class C{  @Override public void endConditional(Augmentations augs) throws XNIException {}  }
class C{  @BeforeClass protected void init(){  LOGGER.info("Init: " + this.getClass().getName());  setPropertyFromSystemProperty("application.name","application-name");  setPropertyFromSystemProperty("experiment.prefix","experiment-prefix");  setPropertyFromSystemProperty("experiment.count","experiment-count");  setPropertyFromSystemProperty("page.name","page-name");  setPropertyFromSystemProperty("buckets.prefix","buckets-prefix");  setPropertyFromSystemProperty("buckets.in.experiment","buckets-in-experiment");  setPropertyFromSystemProperty("mutualexclusions","mutualexclusions");  applicationName=appProperties.getProperty("application-name",applicationName);  experimentPrefix=appProperties.getProperty("experiment-prefix",experimentPrefix);  experimentCount=Integer.valueOf(appProperties.getProperty("experiment-count",String.valueOf(experimentCount)));  pageName=appProperties.getProperty("page-name",Constants.DEFAULT_PAGE_NAME);  bucketPrefix=appProperties.getProperty("bucket-prefix",bucketPrefix);  bucketCount=Integer.valueOf(appProperties.getProperty("buckets-in-experiment",String.valueOf(bucketCount)));  mutualExclusive=Boolean.valueOf(appProperties.getProperty("mutualexclusions",String.valueOf(mutualExclusive)));  LOGGER.info("KVP used: applicationName=" + applicationName);  LOGGER.info("KVP used: experimentCount=" + experimentCount);  LOGGER.info("KVP used: bucketCount=" + bucketCount);  LOGGER.info("KVP used: pageName=" + pageName);  LOGGER.info("KVP used: experimentPrefix=" + experimentPrefix);  LOGGER.info("KVP used: bucketPrefix=" + bucketPrefix);  application=ApplicationFactory.createApplication().setName(applicationName);  page=PageFactory.createPage().setName(pageName);  experiments=new ArrayList<>(experimentCount);  ExperimentFactory.createExperiment().setSerializationStrategy(new DefaultNameExclusionStrategy("creationTime","modificationTime"));}  }
class C{  public static boolean saveConfig(FunktionConfig config,File file) throws IOException {  createObjectMapper().writeValue(file,config);  return true;}  }
class C{  @Override public Collection<SerialMessage> initialize(boolean refresh){  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();  if (refresh == true || initialiseDone == false) {    result.add(this.getSupportedMessage());  }  return result;}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  private void onFetchVideosInfoError(Exception ex){  Log.e(TAG,"Error fetching videos from " + getResources().getString(R.string.videos_url) + ", Exception: "+ ex.toString());  Toast.makeText(getContext(),"Error fetching videos from json file",Toast.LENGTH_LONG).show();}  }
class C{  public PrefuseTableModel(Table table){  m_table=table;}  }
class C{  @Ignore("go/studio-builder/builders/ubuntu-studio-master-dev-uitests/builds/273") @Test public void testCreateNewTheme() throws IOException {  guiTest.importSimpleApplication();  ThemeEditorFixture themeEditor=ThemeEditorGuiTestUtils.openThemeEditor(guiTest.ideFrame());  JComboBoxFixture themesComboBox=themeEditor.getThemesComboBox();  String selectedTheme=themesComboBox.selectedItem();  assertNotNull(selectedTheme);  themesComboBox.selectItem("Create New Theme");  NewStyleDialogFixture newStyleDialog=NewStyleDialogFixture.find(guiTest.robot());  newStyleDialog.clickCancel();  themeEditor.waitForThemeSelection(selectedTheme);  themesComboBox.selectItem("Create New Theme");  newStyleDialog=NewStyleDialogFixture.find(guiTest.robot());  JTextComponentFixture newNameTextField=newStyleDialog.getNewNameTextField();  JComboBoxFixture parentComboBox=newStyleDialog.getParentComboBox();  parentComboBox.requireSelection("AppTheme");  String[] parentsArray=parentComboBox.contents();  assertThat(parentsArray).hasLength(6);  assertThat(parentsArray[0]).isEqualTo("AppTheme");  assertThat(parentsArray[2]).isEqualTo("Theme.AppCompat.Light.NoActionBar");  assertThat(parentsArray[3]).isEqualTo("Theme.AppCompat.NoActionBar");  assertThat(parentsArray[5]).isEqualTo("Show all themes");  assertThat(parentsArray[1]).startsWith("javax.swing.JSeparator");  assertThat(parentsArray[4]).startsWith("javax.swing.JSeparator");  parentComboBox.selectItem("Theme.AppCompat.NoActionBar");  newNameTextField.requireText("Theme.AppTheme.NoActionBar");  parentComboBox.selectItem("Show all themes");  ThemeSelectionDialogFixture themeSelectionDialog=ThemeSelectionDialogFixture.find(guiTest.robot());  JTreeFixture categoriesTree=themeSelectionDialog.getCategoriesTree();  JListFixture themeList=themeSelectionDialog.getThemeList();  categoriesTree.clickRow(5);  themeList.clickItem(0);  themeList.requireSelection("android:Theme.Holo");  themeSelectionDialog.clickOk();  parentComboBox.requireSelection("android:Theme.Holo");  newNameTextField.requireText("Theme.AppTheme");  newNameTextField.deleteText().enterText("NewTheme");  newStyleDialog.clickOk();  themeEditor.waitForThemeSelection("NewTheme");  ThemeEditorTableFixture themeEditorTable=themeEditor.getPropertiesTable();  TableCell parentCell=row(0).column(0);  assertEquals("android:Theme.Holo",themeEditorTable.getComboBoxSelectionAt(parentCell));  themeEditor.focus();  guiTest.ideFrame().invokeMenuPath("Window","Editor Tabs","Select Previous Tab");  EditorFixture editor=guiTest.ideFrame().getEditor();  assertThat(editor.getCurrentFileContents()).contains("name=\"AppTheme");  editor.moveBetween("","name=\"NewTheme");  assertThat(editor.getCurrentLine().trim()).isEqualTo("<style name=\"NewTheme\" parent=\"android:Theme.Holo\" />");  guiTest.ideFrame().invokeMenuPath("Window","Editor Tabs","Select Next Tab");  guiTest.ideFrame().invokeMenuPath("Edit","Undo Create new style NewTheme");  themeEditor.waitForThemeSelection("AppTheme");  guiTest.ideFrame().invokeMenuPath("Window","Editor Tabs","Select Previous Tab");  assertThat(editor.getCurrentFileContents()).doesNotContain("name=\"NewTheme");}  }
class C{  public void addSubEquipmentIds(final Collection<Long> subEquipmentIds){  for (  Long subEquipmentId : subEquipmentIds) {    addSubEquipmentId(subEquipmentId);  }}  }
class C{  public static int findHighestMajorVersion(Collection<Throwable> list){  int result=0;  for (  Throwable t : list) {    if (t instanceof InconvertibleClassError) {      InconvertibleClassError error=(InconvertibleClassError)t;      result=Math.max(result,error.getMajor());    }  }  return result;}  }
class C{  public boolean isPluginEnabled(Plugin plugin){  if ((plugin != null) && (plugins.contains(plugin))) {    return plugin.isEnabled();  } else {    return false;  }}  }
class C{  public void accept(){  if (processed) {    return;  }  skype.acceptContactRequest(this);  processed=true;}  }
class C{  public void add(final double[] lhs,final int lhsOffset,final double[] rhs,final int rhsOffset,final double[] result,final int resultOffset){  for (int i=0; i < getSize(); ++i) {    result[resultOffset + i]=lhs[lhsOffset + i] + rhs[rhsOffset + i];  }}  }
class C{  static <TypeOfValue>boolean arrayContains(final TypeOfValue[] array,final TypeOfValue value){  for (  final TypeOfValue arrayValue : array) {    if (arrayValue == value || (arrayValue != null && arrayValue.equals(value))) {      return true;    }  }  return false;}  }
class C{  Node previousNode(Node node){  Node result;  if (node == fRoot)   return null;  result=node.getPreviousSibling();  if (result == null) {    result=node.getParentNode();    return result;  }  if (result.hasChildNodes() && !(!fEntityReferenceExpansion && result != null && result.getNodeType() == Node.ENTITY_REFERENCE_NODE)) {    while (result.hasChildNodes()) {      result=result.getLastChild();    }  }  return result;}  }
class C{  private BSPTree<Euclidean1D> childBefore(BSPTree<Euclidean1D> node){  if (isDirect(node)) {    return node.getMinus();  } else {    return node.getPlus();  }}  }
class C{  public ClassPathTestDataLocator(Class<?> classContext){  super(classContext);  this.classLoader=classContext.getClassLoader();}  }
class C{  public ByteArray(byte[] buf,int offset,int length){  this.buf=buf;  this.offset=offset;  this.length=length;}  }
class C{  @VisibleForTesting protected static void releaseWakeLock(){  ThreadUtils.assertOnUiThread();  if (sWakeLock != null && sWakeLock.isHeld())   sWakeLock.release();}  }
class C{  private Stream<String> resolve(String template,Stream<File> files){  Stream<Json> json=files.map(null);  return partitionedStream(json.iterator()).map(null).map(null);}  }
class C{  public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(url),entity),contentType,responseHandler,context);}  }
class C{  public AccountGetInfoQuery(VkApiClient client,UserActor actor){  super(client,"account.getInfo",Info.class);  accessToken(actor.getAccessToken());}  }
class C{  @ObjectiveCName("parse:client:") static List<Message> parse(String message,DeepstreamClientAbstract client){  List<Message> messages=new ArrayList<>();  String[] rawMessages=message.split(MS);  Message parsedMessage;  for (  String rawMessage : rawMessages) {    parsedMessage=parseMessage(rawMessage,client);    if (parsedMessage != null) {      messages.add(parsedMessage);    }  }  return messages;}  }
class C{  public synchronized boolean wasDoubleClicked(){  return this.value == 2;}  }
class C{  public static Alarm buildCreateAllFieldsAlarm(Long id,Properties properties){  if (properties == null) {    properties=new Properties();  }  Alarm alarm=Alarm.create("faultFamily","faultMember",1337,new ValueCondition(Integer.class,1)).id(id).metadata(Metadata.builder().addMetadata("testMetadata",11).build()).build();  alarm.setDataTagId(100L);  properties.setProperty("faultFamily","faultFamily");  properties.setProperty("faultMember","faultMember");  properties.setProperty("faultCode","1337");  properties.setProperty("dataTagId","100");  properties.setProperty("alarmCondition",new ValueCondition(Integer.class,1).getXMLCondition());  properties.setProperty("metadata",Metadata.toJSON(Metadata.builder().addMetadata("testMetadata",11).build()));  return alarm;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public boolean mustAlias(Local val1,Local val2,Stmt position){  if (val1 == val2)   return true;  if (!(val1.getType() instanceof RefLikeType) || !(val2.getType() instanceof RefLikeType))   return false;  LocalMustAliasAnalysis lmaa=strongAliasAnalysis.getUnchecked(cfg.getMethodOf(position));  return lmaa.mustAlias(val1,position,val2,position);}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/api/drops/cancel") public CancelDropConfig cancelDrop(@RequestBody CancelDropConfig cancelDropConfig) throws Exception {  PollableFuture cancelDropFuture=dropService.cancelDrop(cancelDropConfig.getDropId(),PollableTask.INJECT_CURRENT_TASK);  cancelDropConfig.setPollableTask(cancelDropFuture.getPollableTask());  return cancelDropConfig;}  }
class C{  public RotationControl(){  this(Control.LEFT_MOUSE_BUTTON);}  }
class C{  protected void firePrePaint(Graphics2D g){  if (m_painters != null && m_painters.size() > 0) {    Object[] lstnrs=m_painters.getArray();    for (int i=0; i < lstnrs.length; ++i) {      try {        ((PaintListener)lstnrs[i]).prePaint(this,g);      } catch (      Exception e) {        s_logger.warning("Exception thrown by PaintListener: " + e + "\n"+ StringLib.getStackTrace(e));      }    }  }}  }
class C{  private static boolean inStringArray(String value,String[] stringArray){  for (int i=0; i < stringArray.length; i++) {    if (stringArray[i].equals(value)) {      return true;    }  }  return false;}  }
class C{  public static Map<String,String> strToMap(String str,boolean trim){  return strToMap(str,"|",trim);}  }
class C{  public static float clamp(float value,float a,float b){  float min=(a > b) ? b : a;  float max=(a > b) ? a : b;  if (value < min) {    value=min;  } else   if (value > max) {    value=max;  }  return value;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public SiteAdminPage createNewPageReusingDialog(String title,String templateName){  createPageWindow.createPage(title,templateName);  grid.waitForLoaderNotPresent();  return this;}  }
class C{  synchronized void flushOperations(RTEditText editor){  Stack<Operation> undoStack=getUndoStack(editor);  Stack<Operation> redoStack=getRedoStack(editor);  undoStack.clear();  redoStack.clear();}  }
class C{  public CompletableFuture<Void> disconnect(){  if (!closeFuture.isDone()) {    log.info("Disconnecting producer: {}",this);    cnx.ctx().executor().execute(null);  }  return closeFuture;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PrimitiveTypeAccess fullCopy(){  PrimitiveTypeAccess tree=(PrimitiveTypeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void remove(Vertex v) throws Exception {  if (hVertexTypes.containsKey(v))   hVertexTypes.remove(v);  super.remove(v);}  }
class C{  public UsersSearchQuery status(UsersSearchRelation value){  return unsafeParam("status",value);}  }
class C{  public void tag(List<String> sentences,String outputFileName,OutputFormat outputFormat){  List<Row> rows=new LinkedList<Row>();  for (  String sentence : sentences) {    rows.add(RowFactory.create(sentence));  }  StructType schema=new StructType(new StructField[]{new StructField("sentence",DataTypes.StringType,false,Metadata.empty())});  SQLContext sqlContext=new SQLContext(jsc);  DataFrame input=sqlContext.createDataFrame(rows,schema);  tag(input,outputFileName,outputFormat);}  }
class C{  public VideoGetAlbumsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static int convertToColorInt(String argb,boolean useAlpha) throws NumberFormatException {  if (argb.startsWith("#")) {    argb=argb.replace("#","");  }  int alpha=-1, red=-1, green=-1, blue=-1;  if (argb.length() == 8) {    alpha=Integer.parseInt(argb.substring(0,2),16);    red=Integer.parseInt(argb.substring(2,4),16);    green=Integer.parseInt(argb.substring(4,6),16);    blue=Integer.parseInt(argb.substring(6,8),16);  } else   if (argb.length() == 6) {    alpha=255;    red=Integer.parseInt(argb.substring(0,2),16);    green=Integer.parseInt(argb.substring(2,4),16);    blue=Integer.parseInt(argb.substring(4,6),16);  }  return Color.argb(useAlpha ? alpha : -1,red,green,blue);}  }
class C{  public long parseLongDecimal(){  ASTNode$State state=state();  try {    long val=0;    long prev=0;    for (int i=0; i < digits.length(); i++) {      prev=val;      int c=digits.charAt(i);      if (c >= '0' && c <= '9')       c=c - '0'; else       throw new NumberFormatException("");      val=val * 10 + c;      if (val < prev) {        boolean negMinValue=i == (digits.length() - 1) && isNegative() && val == Long.MIN_VALUE;        if (!negMinValue)         throw new NumberFormatException("");      }    }    if (val == Long.MIN_VALUE)     return val;    if (val < 0)     throw new NumberFormatException("");    return isNegative() ? -val : val;  }  finally {  }}  }
class C{  @Override public void skippedEntity(String name) throws SAXException {  return;}  }
class C{  public IterativeLegendreGaussIntegrator(final int n,final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  this(n,DEFAULT_RELATIVE_ACCURACY,DEFAULT_ABSOLUTE_ACCURACY,minimalIterationCount,maximalIterationCount);}  }
class C{  public static int utf8Length(String string){  CharacterIterator iter=new StringCharacterIterator(string);  char ch=iter.first();  int size=0;  while (ch != CharacterIterator.DONE) {    if ((ch >= 0xD800) && (ch < 0xDC00)) {      char trail=iter.next();      if ((trail > 0xDBFF) && (trail < 0xE000)) {        size+=4;      } else {        size+=3;        iter.previous();      }    } else     if (ch < 0x80) {      size++;    } else     if (ch < 0x800) {      size+=2;    } else {      size+=3;    }    ch=iter.next();  }  return size;}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public void pause(){}  }
class C{  public PhotosSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  @NotNull public RecognizeDomainSpecificContentInImageAction recognizeDomainSpecificContentInImage(@NotNull List<DomainSpecificDetails> model,@NotNull InputStream image){  return new RecognizeDomainSpecificContentInImageAction(cognitiveContext,model,image);}  }
class C{  public AllocDotField findAllocDotField(AllocNode an,SparkField field){  return an.dot(field);}  }
class C{  public Peer(String peerId,InetSocketAddress address){  this.peerId=peerId;  this.address=address;  this.lastSendTime=System.currentTimeMillis();  this.creationTime=System.currentTimeMillis();}  }
class C{  protected VideoGetQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  protected Element insertBoundary(Element token,String tone,int bi){  Element boundary=null;  Log.d(Mary.LOG,"insertBoundary: after token `" + MaryDomUtils.tokenText(token) + "', tone "+ tone+ ", bi "+ bi);  Document doc=token.getOwnerDocument();  TreeWalker tw=((DocumentTraversal)doc).createTreeWalker(DomUtils.getAncestor(token,MaryXML.SENTENCE),NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.BOUNDARY,MaryXML.TOKEN),false);  tw.setCurrentNode(token);  Element next=(Element)tw.nextNode();  if (next != null && next.getTagName().equals(MaryXML.BOUNDARY)) {    boundary=next;  } else   if (isPunctuation(token)) {    tw.setCurrentNode(token);    Element prev=(Element)tw.previousNode();    if (prev != null && prev.getTagName().equals(MaryXML.BOUNDARY)) {      boundary=prev;    }  }  if (boundary != null && boundary.getParentNode().equals(token.getParentNode())) {    if (tone != null) {      String tagTone=boundary.getAttribute("tone");      if (tagTone.equals("") || !tone.equals("unknown") && tagTone.equals("unknown")) {        boundary.setAttribute("tone",tone);      }    }    if (bi > 0) {      String tagBIString=boundary.getAttribute("breakindex");      if (tagBIString.equals("") || tagBIString.equals("unknown")) {        boundary.setAttribute("breakindex",String.valueOf(bi));      }    }  } else {    if (token.getParentNode() == null) {      return null;    }    Element eIn=(Element)token.getParentNode();    Element eBefore=DomUtils.getNextSiblingElement(token);    Element mtu=(Element)DomUtils.getHighestLevelAncestor(token,MaryXML.MTU);    if (mtu != null) {      if (DomUtils.isLastOfItsKindIn(token,mtu)) {        eIn=(Element)mtu.getParentNode();        eBefore=DomUtils.getNextSiblingElement(mtu);      } else {        return null;      }    }    boundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);    if (tone != null) {      boundary.setAttribute("tone",tone);    }    if (bi > 0) {      boundary.setAttribute("breakindex",String.valueOf(bi));    }    eIn.insertBefore(boundary,eBefore);  }  return boundary;}  }
class C{  public synchronized boolean putRequest(int messageId,RequestResponseHandler handler){  if (map.containsKey(messageId)) {    return false;  }  map.put(messageId,handler);  return true;}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException ignored) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  Bundle bundle=new Bundle();  if (name != null && !name.isEmpty()) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        int phoneTypeColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && !number.isEmpty()) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          int type=phonesCursor.getInt(phoneTypeColumn);          bundle.putInt(Contents.PHONE_TYPE_KEYS[foundPhone],type);          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && !data.isEmpty()) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && !email.isEmpty()) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  public boolean open_nesting(){  return soot.PhaseOptions.getBoolean(options,"open-nesting");}  }
class C{  public void validate(){  byte dlsnVersion=getDlsnVersion();  Preconditions.checkArgument(dlsnVersion >= DLSN.VERSION0 && dlsnVersion <= DLSN.VERSION1,"Unknown dlsn version " + dlsnVersion);  Preconditions.checkArgument(getServerThreads() > 0,"Invalid number of server threads : " + getServerThreads());  Preconditions.checkArgument(getServerShardId() >= 0,"Invalid server shard id : " + getServerShardId());}  }
class C{  public Decider(INSECTDB dbRepository){  Repository=dbRepository;  CategoryEvidenceCount=new Distribution<String>();}  }
class C{  public static double stringSimilarity(String... strings){  if (strings == null)   return 0;  Counter<String> counter=new Counter<>();  Counter<String> counter2=new Counter<>();  for (int i=0; i < strings[0].length(); i++)   counter.incrementCount(String.valueOf(strings[0].charAt(i)),1.0);  for (int i=0; i < strings[1].length(); i++)   counter2.incrementCount(String.valueOf(strings[1].charAt(i)),1.0);  Set<String> v1=counter.keySet();  Set<String> v2=counter2.keySet();  Set<String> both=SetUtils.intersection(v1,v2);  double scalar=0, norm1=0, norm2=0;  for (  String k : both)   scalar+=counter.getCount(k) * counter2.getCount(k);  for (  String k : v1)   norm1+=counter.getCount(k) * counter.getCount(k);  for (  String k : v2)   norm2+=counter2.getCount(k) * counter2.getCount(k);  return scalar / Math.sqrt(norm1 * norm2);}  }
class C{  protected void initialise(double[] impulseResponse,int sliceLen){  denumeratorCoefficients=new double[impulseResponse.length];  System.arraycopy(impulseResponse,0,denumeratorCoefficients,0,impulseResponse.length);  if (!MathUtils.isPowerOfTwo(impulseResponse.length + sliceLen))   throw new IllegalArgumentException("Impulse response length plus slice length must be a power of two");  this.impulseResponseLength=impulseResponse.length;  this.sliceLength=sliceLen;  transformedIR=new double[sliceLen + impulseResponse.length];  System.arraycopy(impulseResponse,0,transformedIR,0,impulseResponse.length);  FFT.realTransform(transformedIR,false);}  }
class C{  private static int indexOf(Object o,Object[] elements,int index,int fence){  if (o == null) {    for (int i=index; i < fence; i++)     if (elements[i] == null)     return i;  } else {    for (int i=index; i < fence; i++)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  @Override public void removeListener(DataSourceUpdatedInterface listener){}  }
class C{  public static Element firstChildElement(Element element){  if (element == null)   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE) {        Element childElement=(Element)node;        return childElement;      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  public static String toString(long l){  StringBuilder sb=new StringBuilder();  for (int i=0; i < 13; i++) {    int t=(int)(l & 0x1f);    l=l >> 5;    sb.append(chars[t]);  }  return sb.reverse().toString();}  }
class C{  public MetadataXmlProvider(File metadataFile,File workingDir) throws XmlParsingException, FileNotFoundException {  this.workingDir=workingDir;  this.dpp=loadDpp(metadataFile);}  }
class C{  public void destroy(){  if (this.player != null) {    if ((this.state == STATE.MEDIA_RUNNING) || (this.state == STATE.MEDIA_PAUSED)) {      this.player.stop();      this.setState(STATE.MEDIA_STOPPED);    }    this.player.release();    this.player=null;  }  if (this.recorder != null) {    this.stopRecording();    this.recorder.release();    this.recorder=null;  }}  }
class C{  public static Cursor query(ContentResolver cr){  return cr.query(CONTENT_URI,PROJECTION,WHERE,WHERE_ARGS,SORT_ORDER);}  }
class C{  private StyledLayerDescriptor createTestPoint(URL url){  StyleBuilder sb=new StyleBuilder();  StyleFactory styleFactory=sb.getStyleFactory();  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  NamedLayer namedLayer=styleFactory.createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=styleFactory.createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=styleFactory.createRule();  fts.rules().add(rule);  PointSymbolizer point=styleFactory.createPointSymbolizer();  rule.symbolizers().add(point);  Graphic graphic=createGraphic(url,styleFactory);  point.setGraphic(graphic);  return sld;}  }
class C{  private static float lerp(float a,float b,float t){  return a + (b - a) * t;}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  public boolean isInvul(){  return invul;}  }
class C{  public void encoding(){  if (allNum != num + rsNum) {    throw new IllegalArgumentException("the addition of data disk num and checksum disk num should equal to allNum");  }  int cols, rows;  int[] factors;  int[] vdm;  int z=rsNum, n=0;  char[][] buffer;  n=num;  cols=n;  rows=z + n;  factors=new int[n];  buffer=new char[n][stripe_unit_size];  for (int i=0; i < n; i++) {    for (int l=0; l < stripe_unit_size; l++) {      buffer[i][l]=rs[i][l];    }  }  for (int i=0; i < n; i++) {    factors[i]=1;  }  vdm=gf_make_dispersal_matrix(rows,cols);  for (int iByte=0; iByte < stripe_unit_size; iByte++) {    for (int iRow=num; iRow < allNum; iRow++) {      int value=0;      for (int c=0; c < num; c++) {        value^=multiply((char)vdm[iRow * num + c],rs[c][iByte]);      }      rs[iRow][iByte]=(char)value;    }  }}  }
class C{  public UserNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  protected ChangeListener createListener(){  return new RangeSliderChangeListener();}  }
class C{  private void loadMusic(){  getSupportLoaderManager().initLoader(MUSIC_LOADER_ID,null,this);}  }
class C{  public boolean isApplicable(){  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOCAL_TIME(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390145,value0,value1);}  }
class C{  public void proceed(String username,String password){  this.handler.proceed(username,password);}  }
class C{  public PartialUniqueIndex(String indexName,Extractor[] extractors,int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  this.extractors=extractors;  hashStrategy=ExtractorBasedHashStrategy.create(this.extractors);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=new Entry[capacity];  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  private void initRecyclerview(){  mRecyclerView.setLayoutManager(new GridLayoutManager(this,3));  mPicAdapter=new PicAdapter();  for (int i=0; i < names.length; i++) {    mPicAdapter.add(new Item(images[i],names[i],textDescription));  }  mRecyclerView.setAdapter(mPicAdapter);  ItemTouchHelper.Callback callback=new CustomItHelperCallback(this);  ItemTouchHelper touchHelper=new ItemTouchHelper(callback);  touchHelper.attachToRecyclerView(mRecyclerView);}  }
class C{  public ContextPermission(String name){  super(name);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("select what=previous;");}  }
class C{  public Timer(){  this("unnamed");}  }
class C{  public void put(String key,String value){  parameters.put(key,value);}  }
class C{  private BaseUtility(){}  }
class C{  private void checkDeclaredElements(DTDGrammar grammar){  int elementIndex=grammar.getFirstElementDeclIndex();  XMLContentSpec contentSpec=new XMLContentSpec();  while (elementIndex >= 0) {    int type=grammar.getContentSpecType(elementIndex);    if (type == XMLElementDecl.TYPE_CHILDREN || type == XMLElementDecl.TYPE_MIXED) {      checkDeclaredElements(grammar,elementIndex,grammar.getContentSpecIndex(elementIndex),contentSpec);    }    elementIndex=grammar.getNextElementDeclIndex(elementIndex);  }}  }
class C{  protected void addOnPropertyChangedCallback(Observable.OnPropertyChangedCallback callback){  onPropertyChangedCallbacks.add(callback);  getViewModel().addOnPropertyChangedCallback(callback);}  }
class C{  public PhotosGetByIdQueryWithExtended photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  public static StorableTimeFence inInterval(long startTimeMillis,long stopTimeMillis){  return new StorableTimeFence(ABSOLUTE,null,startTimeMillis,stopTimeMillis);}  }
class C{  protected ExecuteStorageFunctionQuery funcV(Integer value){  return unsafeParam("func_v",value);}  }
class C{  @Override public boolean supports(Class<?> clazz){  boolean result=ActionConfig.class.equals(clazz);  LOG.debug("Supports class: " + clazz + ", "+ result);  return result;}  }
class C{  @Override public final void putAll(Map<? extends String,? extends Object> m){  for (  String s : m.keySet()) {    set(s,m.get(s));  }}  }
class C{  protected void sendPacket(AionServerPacket msg){  getConnection().sendPacket(msg);}  }
class C{  private Unit copyBlock(Block block){  Map<Unit,List<Trap>> traps=getTraps();  Set<Trap> openedTraps=new HashSet<Trap>();  Map<Trap,Trap> copiedTraps=new HashMap<Trap,Trap>();  Chain<Unit> unitChain=body.getUnits();  Unit tail=block.getTail();  Unit immediateSucc=unitChain.getSuccOf(tail);  Unit newGoto=insertGotoAfter(tail,immediateSucc);  Unit last=newGoto;  boolean first=true;  Unit copiedHead=null;  for (Unit currentUnit=block.getHead(); currentUnit != newGoto; currentUnit=(Unit)unitChain.getSuccOf(currentUnit)) {    last=insertCloneAfter(unitChain,last,currentUnit);    if (first) {      first=false;      copiedHead=last;    }    List<Trap> currentTraps=traps.get(currentUnit);    if (currentTraps != null) {      for (      Trap trap : currentTraps) {        if (trap.getBeginUnit() == currentUnit) {          Trap copiedTrap=(Trap)trap.clone();          copiedTrap.setBeginUnit(last);          copiedTraps.put(trap,copiedTrap);          openedTraps.add(copiedTrap);          body.getTraps().insertAfter(copiedTrap,trap);        }        if (trap.getEndUnit() == currentUnit) {          Trap copiedTrap=copiedTraps.get(trap);          if (copiedTrap == null) {            copiedTrap=(Trap)trap.clone();            copiedTrap.setBeginUnit(copiedHead);            body.getTraps().insertAfter(copiedTrap,trap);          } else {            openedTraps.remove(copiedTrap);          }          copiedTrap.setEndUnit(last);        }      }    }  }  Iterator<Trap> openedIterator=openedTraps.iterator();  while (openedIterator.hasNext()) {    openedIterator.next().setEndUnit(last);  }  return copiedHead;}  }
class C{  public PulsarAdmin(URL serviceUrl,ClientConfiguration pulsarConfig) throws PulsarClientException {  this.auth=pulsarConfig != null ? pulsarConfig.getAuthentication() : null;  LOG.debug("created: serviceUrl={}, authMethodName={}",serviceUrl,auth != null ? auth.getAuthMethodName() : null);  ClientConfig httpConfig=new ClientConfig();  httpConfig.property(ClientProperties.FOLLOW_REDIRECTS,true);  httpConfig.property(ClientProperties.ASYNC_THREADPOOL_SIZE,8);  ClientBuilder clientBuilder=ClientBuilder.newBuilder().withConfig(httpConfig).register(JacksonConfigurator.class).register(JacksonFeature.class);  if (pulsarConfig != null && pulsarConfig.isUseTls()) {    try {      SSLContext sslCtx=null;      X509Certificate trustCertificates[]=SecurityUtility.loadCertificatesFromPemFile(pulsarConfig.getTlsTrustCertsFilePath());      AuthenticationDataProvider authData=pulsarConfig.getAuthentication().getAuthData();      if (authData.hasDataForTls()) {        sslCtx=SecurityUtility.createSslContext(pulsarConfig.isTlsAllowInsecureConnection(),trustCertificates,authData.getTlsCertificates(),authData.getTlsPrivateKey());      } else {        sslCtx=SecurityUtility.createSslContext(pulsarConfig.isTlsAllowInsecureConnection(),trustCertificates);      }      clientBuilder.sslContext(sslCtx);    } catch (    Exception e) {      throw new PulsarClientException.InvalidConfigurationException(e.getMessage());    }  }  this.client=clientBuilder.build();  this.serviceUrl=serviceUrl;  WebTarget root=client.target(serviceUrl.toString());  web=root.path("/admin");  if (auth != null) {    auth.start();  }  this.clusters=new ClustersImpl(web,auth);  this.brokers=new BrokersImpl(web,auth);  this.brokerStats=new BrokerStatsImpl(web,auth);  this.properties=new PropertiesImpl(web,auth);  this.namespaces=new NamespacesImpl(web,auth);  this.persistentTopics=new PersistentTopicsImpl(web,auth);  this.resourceQuotas=new ResourceQuotasImpl(web,auth);  this.lookups=new LookupImpl(root,auth,pulsarConfig.isUseTls());}  }
class C{  private void requestForDownload(OCFile file){  Intent i=new Intent(mContext,FileDownloader.class);  i.putExtra(FileDownloader.EXTRA_ACCOUNT,mAccount);  i.putExtra(FileDownloader.EXTRA_FILE,file);  mContext.startService(i);  mTransferWasRequested=true;}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  public static String mapToStr(Map<? extends Object,? extends Object> map){  if (map == null)   return null;  StringBuilder buf=new StringBuilder();  boolean first=true;  for (  Map.Entry<? extends Object,? extends Object> entry : map.entrySet()) {    Object key=entry.getKey();    Object value=entry.getValue();    if (!(key instanceof String) || !(value instanceof String))     continue;    String encodedName=null;    try {      encodedName=URLEncoder.encode((String)key,"UTF-8");    } catch (    UnsupportedEncodingException e) {      Debug.logError(e,module);    }    String encodedValue=null;    try {      encodedValue=URLEncoder.encode((String)value,"UTF-8");    } catch (    UnsupportedEncodingException e) {      Debug.logError(e,module);    }    if (first)     first=false; else     buf.append("|");    buf.append(encodedName);    buf.append("=");    buf.append(encodedValue);  }  return buf.toString();}  }
class C{  protected void normalizeDocument(CoreDocumentImpl document,DOMConfigurationImpl config){  fDocument=document;  fConfiguration=config;  fAllWhitespace=false;  fNamespaceValidation=false;  String xmlVersion=fDocument.getXmlVersion();  String schemaType=null;  String[] schemaLocations=null;  fSymbolTable=(SymbolTable)fConfiguration.getProperty(DOMConfigurationImpl.SYMBOL_TABLE);  fNamespaceContext.reset();  fNamespaceContext.declarePrefix(XMLSymbols.EMPTY_STRING,null);  if ((fConfiguration.features & DOMConfigurationImpl.VALIDATE) != 0) {    String schemaLang=(String)fConfiguration.getProperty(DOMConfigurationImpl.JAXP_SCHEMA_LANGUAGE);    if (schemaLang != null && schemaLang.equals(Constants.NS_XMLSCHEMA)) {      schemaType=XMLGrammarDescription.XML_SCHEMA;      fValidationHandler=CoreDOMImplementationImpl.singleton.getValidator(schemaType,xmlVersion);      fConfiguration.setFeature(DOMConfigurationImpl.SCHEMA,true);      fConfiguration.setFeature(DOMConfigurationImpl.SCHEMA_FULL_CHECKING,true);      fNamespaceValidation=true;      fPSVI=((fConfiguration.features & DOMConfigurationImpl.PSVI) != 0) ? true : false;    } else {      schemaType=XMLGrammarDescription.XML_DTD;      if (schemaLang != null) {        schemaLocations=(String[])fConfiguration.getProperty(DOMConfigurationImpl.JAXP_SCHEMA_SOURCE);      }      fConfiguration.setDTDValidatorFactory(xmlVersion);      fValidationHandler=CoreDOMImplementationImpl.singleton.getValidator(schemaType,xmlVersion);      fPSVI=false;    }    fConfiguration.setFeature(DOMConfigurationImpl.XERCES_VALIDATION,true);    fDocument.clearIdentifiers();    if (fValidationHandler != null) {      ((XMLComponent)fValidationHandler).reset(fConfiguration);    }  } else {    fValidationHandler=null;  }  fErrorHandler=(DOMErrorHandler)fConfiguration.getParameter(Constants.DOM_ERROR_HANDLER);  if (fValidationHandler != null) {    fValidationHandler.setDocumentHandler(this);    fValidationHandler.startDocument(new SimpleLocator(fDocument.fDocumentURI,fDocument.fDocumentURI,-1,-1),fDocument.encoding,fNamespaceContext,null);    fValidationHandler.xmlDecl(fDocument.getXmlVersion(),fDocument.getXmlEncoding(),fDocument.getXmlStandalone() ? "yes" : "no",null);  }  try {    if (schemaType == XMLGrammarDescription.XML_DTD) {      processDTD(xmlVersion,schemaLocations != null ? schemaLocations[0] : null);    }    Node kid, next;    for (kid=fDocument.getFirstChild(); kid != null; kid=next) {      next=kid.getNextSibling();      kid=normalizeNode(kid);      if (kid != null) {        next=kid;      }    }    if (fValidationHandler != null) {      fValidationHandler.endDocument(null);      fValidationHandler.setDocumentHandler(null);      CoreDOMImplementationImpl.singleton.releaseValidator(schemaType,xmlVersion,fValidationHandler);      fValidationHandler=null;    }  } catch (  RuntimeException e) {    if (fValidationHandler != null) {      fValidationHandler.setDocumentHandler(null);      CoreDOMImplementationImpl.singleton.releaseValidator(schemaType,xmlVersion,fValidationHandler);      fValidationHandler=null;    }    if (e == abort) {      return;    }    throw e;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InvulnerableWing_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201221,skillcaster,skilltarget,skillname);}  }
class C{  public TableIterator iterator(){  return iterator(rows());}  }
class C{  private void write(char c) throws SAXException {  try {    output.write(c);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public void loadingFinished(){  mLoadTracker.loadingFinished();}  }
class C{  public boolean equals(BasicBlock b){  return (this == b);}  }
class C{  public AudioSetBroadcastQuery targetIds(List<Integer> value){  return unsafeParam("target_ids",value);}  }
class C{  public static void callNumber(Context context,String phoneNumber){  openDialerActivityWithAction(context,phoneNumber,Intent.ACTION_CALL);}  }
class C{  public RMIExtendedSocketFactory(InetAddress inetAddress){  this.hostInetAddress=inetAddress;}  }
class C{  boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public void clearSticky(){  int size=headComponentStack.size();  while (size > 0 && headerViewStack.size() == size) {    WXCell headComponent=headComponentStack.pop();    View headerView=headerViewStack.pop();    ((ViewGroup)getParent()).removeView(headerView);    headComponent.recoverySticky();  }}  }
class C{  public static float readFloat(byte[] bytes){  return ByteBuffer.wrap(bytes).getFloat();}  }
class C{  public static Histogram joinHistogram(Histogram hist1,Histogram hist2,String fldName1,String fldName2){  Histogram prodHist=ProductPlan.productHistogram(hist1,hist2);  Set<String> group=new HashSet<String>();  group.add(fldName1);  group.add(fldName2);  return SelectPlan.joinFieldsHistogram(prodHist,group);}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  private static void expandLargeNumber(String numberString,String order,int numberZeroes,WordRelation wordRelation,Item tokenItem){  int numberDigits=numberString.length();  int i=numberDigits - numberZeroes;  String part=numberString.substring(0,i);  Item oldTail=wordRelation.getTail();  expandNumber(part,wordRelation,tokenItem);  if (wordRelation.getTail() == oldTail) {    expandNumberAt(numberString,i,wordRelation,tokenItem);  } else {    wordRelation.addWord(tokenItem,order);    expandNumberAt(numberString,i,wordRelation,tokenItem);  }}  }
class C{  private View nextFromLimitedList(){  int size=mScrapList.size();  RecyclerView.ViewHolder closest=null;  int closestDistance=Integer.MAX_VALUE;  for (int i=0; i < size; i++) {    RecyclerView.ViewHolder viewHolder=mScrapList.get(i);    if (!mIsPreLayout && viewHolder.isRemoved()) {      continue;    }    final int distance=(viewHolder.getPosition() - mCurrentPosition) * mItemDirection;    if (distance < 0) {      continue;    }    if (distance < closestDistance) {      closest=viewHolder;      closestDistance=distance;      if (distance == 0) {        break;      }    }  }  if (closest != null) {    mCurrentPosition=closest.getPosition() + mItemDirection;    return closest.itemView;  }  return null;}  }
class C{  public GroupsGetInvitedUsersQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @SuppressLint("DefaultLocale") public void elementType(String name,int model,int memberOf,int flags){  ElementType e=new ElementType(name,model,memberOf,flags,this);  theElementTypes.put(name.toLowerCase(),e);  if (memberOf == M_ROOT)   theRoot=e;}  }
class C{  public final boolean isAlternatingDevice(){  return (myAlternate & CFG_DEVICE) != 0;}  }
class C{  public static void showWarning(Object parentIgnored,String message){  showNotification(title,message,Mode.warning,Pos.BOTTOM_LEFT,60000);}  }
class C{  private List<String> splitIntoAllophoneList(String allophoneString,boolean includeStressAndSyllableMarkers){  List<String> phones=new ArrayList<String>();  boolean haveSeenNucleus=false;  for (int i=0; i < allophoneString.length(); i++) {    String one=allophoneString.substring(i,i + 1);    if (getIgnoreChars().contains(one)) {      if (includeStressAndSyllableMarkers)       phones.add(one);      continue;    } else     if (one.equals(" ")) {      continue;    }    Allophone ph=null;    for (int l=maxAllophoneSymbolLength; l >= 1; l--) {      if (i + l <= allophoneString.length()) {        String s=allophoneString.substring(i,i + l);        ph=getAllophone(s);        if (ph != null) {          i+=l - 1;          break;        }      }    }    if (ph != null) {      phones.add(ph.name());    } else {      throw new IllegalArgumentException("Found unknown symbol `" + allophoneString.charAt(i) + "' in phonetic string `"+ allophoneString+ "' -- ignoring.");    }  }  return phones;}  }
class C{  public static void deleteAircraft(AirMapAircraft aircraft,AirMapCallback<Void> listener){  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());  AirMap.getClient().delete(url,new VoidCallback(listener));}  }
class C{  @Override public final void confirmEquipmentStateIncorrect(){  confirmEquipmentStateIncorrect(null);}  }
class C{  Object computeResult() throws JobException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(PrepareAndCommitJob.class.getName(),"computeResult");  }  try {    if (!isCompleted(0))     throw new ResultNotReadyException("Cannot compute result " + "since there are jobs pending");  } catch (  JobNotStartedException jnse) {    throw new ResultNotReadyException("Cannot compute result since" + " jobs were not created");  }  int prepstate=NOTCHANGED;  prepstate=((Integer)results[0]).intValue();  Integer result=new Integer(prepstate);  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(PrepareAndCommitJob.class.getName(),"computeResult",result);  }  return result;}  }
class C{  protected void configurePipeline(){  if (fCurrentDVFactory != fDatatypeValidatorFactory) {    fCurrentDVFactory=fDatatypeValidatorFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fDTDScanner) {    fCurrentDTDScanner=fDTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);    setProperty(DTD_PROCESSOR,fDTDProcessor);  }  fDTDScanner.setDTDHandler(fDTDProcessor);  fDTDProcessor.setDTDSource(fDTDScanner);  fDTDProcessor.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fDTDProcessor);  }  fDTDScanner.setDTDContentModelHandler(fDTDProcessor);  fDTDProcessor.setDTDContentModelSource(fDTDScanner);  fDTDProcessor.setDTDContentModelHandler(fDTDContentModelHandler);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.setDTDContentModelSource(fDTDProcessor);  }  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fNamespaceScanner) {      fCurrentScanner=fNamespaceScanner;      setProperty(DOCUMENT_SCANNER,fNamespaceScanner);      setProperty(DTD_VALIDATOR,fDTDValidator);    }    fNamespaceScanner.setDTDValidator(fDTDValidator);    fNamespaceScanner.setDocumentHandler(fDTDValidator);    fDTDValidator.setDocumentSource(fNamespaceScanner);    fDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fDTDValidator);    }    fLastComponent=fDTDValidator;  } else {    if (fNonNSScanner == null) {      fNonNSScanner=new XMLDocumentScannerImpl();      fNonNSDTDValidator=new XMLDTDValidator();      addComponent(fNonNSScanner);      addComponent(fNonNSDTDValidator);    }    if (fCurrentScanner != fNonNSScanner) {      fCurrentScanner=fNonNSScanner;      setProperty(DOCUMENT_SCANNER,fNonNSScanner);      setProperty(DTD_VALIDATOR,fNonNSDTDValidator);    }    fNonNSScanner.setDocumentHandler(fNonNSDTDValidator);    fNonNSDTDValidator.setDocumentSource(fNonNSScanner);    fNonNSDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fNonNSDTDValidator);    }    fLastComponent=fNonNSDTDValidator;  }}  }
class C{  public void verifyProcessDefinitionsDoNotShareKeys(Collection<ProcessDefinitionEntity> processDefinitions){  Set<String> keySet=new LinkedHashSet<String>();  for (  ProcessDefinitionEntity processDefinition : processDefinitions) {    if (keySet.contains(processDefinition.getKey())) {      throw new ActivitiException("The deployment contains process definitions with the same key (process id attribute), this is not allowed");    }    keySet.add(processDefinition.getKey());  }}  }
class C{  public static void send(Fragment fragment,int requestCode,String... permissions){  with(fragment).requestCode(requestCode).permission(permissions).send();}  }
class C{  public RangePredicate(Expression middle,Expression left,Expression right,Comparator cmp){  this(IN_IN,middle,left,right,cmp);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_AUCTION_FAIL(int address){  return new SM_SYSTEM_MESSAGE(1401270,address);}  }
class C{  public GroupsSetCallbackSettingsQuery photoCommentNew(Boolean value){  return unsafeParam("photo_comment_new",value);}  }
class C{  @Override public boolean hasField(String fldName){  return ts.hasField(fldName) || s.hasField(fldName);}  }
class C{  public void scale(Vector3D v){  scale(v.get(0),v.get(1),v.get(2));}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof CarbonDimension)) {    return false;  }  CarbonDimension other=(CarbonDimension)obj;  if (columnSchema == null) {    if (other.columnSchema != null) {      return false;    }  } else   if (!columnSchema.equals(other.columnSchema)) {    return false;  }  return true;}  }
class C{  private void deleteFinal(TableJson json,Storage storage){  Delta delta=json.newDeleteStorage(storage);  Audit audit=new AuditBuilder().set("_op","doDeleteFinal").set("_uuid",storage.getUuidString()).build();  updateTableMetadata(json.getTable(),delta,audit,InvalidationScope.LOCAL);}  }
class C{  public void onSuccess(int statusCode,JSONArray response){  onSuccess(response);}  }
class C{  public HectorCassandraClientConfigurer hosts(String hosts){  this.hosts=hosts;  return this;}  }
class C{  public static String decompressForGzip(byte[] compressed){  final int BUFFER_SIZE=compressed.length;  GZIPInputStream gis=null;  ByteArrayInputStream is=null;  try {    is=new ByteArrayInputStream(compressed);    gis=new GZIPInputStream(is,BUFFER_SIZE);    StringBuilder string=new StringBuilder();    byte[] data=new byte[BUFFER_SIZE];    int bytesRead;    while ((bytesRead=gis.read(data)) != -1) {      string.append(new String(data,0,bytesRead,"UTF-8"));    }    return string.toString();  } catch (  IOException e) {    e.printStackTrace();  } finally {    okhttp3.internal.Util.closeQuietly(gis);    okhttp3.internal.Util.closeQuietly(is);  }  return null;}  }
class C{  public int indexType(){  return idxType;}  }
class C{  public static void addAcceptableFilterID(EntryArrivedRemoteEvent theEvent,String filterID){  theEvent.addAcceptableFilterID(filterID);}  }
class C{  public JobNotFoundException(Throwable cause){  super(cause);}  }
class C{  public VideoEditCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  public void updateScreen(){  if (this.mc.playerController.isInCreativeMode()) {    this.mc.displayGuiScreen(new GuiContainerCreative(this.mc.thePlayer));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_REJECT_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1400563,value0);}  }
class C{  public void dump(){  diphone.dump();}  }
class C{  public boolean isSelected(){  return getViewer() != null && getViewer().getPcoaTab() != null && getViewer().getPcoaTab().isFlipV();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set description=");  String description=np.getWordRespectCase();  np.matchIgnoreCase(";");  getDoc().getSampleAttributeTable().put(getDoc().getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute,description);  getDoc().setDirty(true);}  }
class C{  public static float exp(float fValue){  return (float)Math.exp(fValue);}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  @Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){  Calendar cal=getCalendar();  dateTimeUnit.setMonth(1);  dateTimeUnit.setDay(1);  List<Period> periods=Lists.newArrayList();  int year=dateTimeUnit.getYear();  while (dateTimeUnit.getYear() == year) {    periods.add(createPeriod(dateTimeUnit,cal));    dateTimeUnit=cal.plusMonths(dateTimeUnit,1);  }  return periods;}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public void addPage(@NonNull List<MODEL> items){  setAutoNotifyDataSetChanged(false);  addAll(items);  setAutoNotifyDataSetChanged(true);  onNewItemsAdded(items.size());  notifyItemRangeInsertedIfNeed(size() - (items.size() + getHeadersCount()),items.size());}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public boolean types_for_sites(){  return soot.PhaseOptions.getBoolean(options,"types-for-sites");}  }
class C{  public void findClosestConnection(ViewTransform viewTransform,float x,float y,ConnectionCandidate candidate,boolean mousePress){  if (mWidget instanceof Guideline) {    float distance;    Guideline guideline=(Guideline)mWidget;    ConstraintAnchor anchor=guideline.getAnchor();    ConstraintHandle handle=constraintHandle(anchor);    if (handle == null) {      return;    }    if (guideline.getOrientation() == Guideline.VERTICAL) {      distance=(handle.getDrawX() - x) * (handle.getDrawX() - x);    } else {      distance=(handle.getDrawY() - y) * (handle.getDrawY() - y);    }    distance=viewTransform.getSwingDimensionF(distance);    if (distance < candidate.distance) {      candidate.anchorTarget=anchor;      candidate.distance=distance;    }  } else   if (mWidget instanceof ConstraintWidgetContainer) {    for (    ConstraintHandle handle : mConstraintHandles) {      ConstraintAnchor anchor=handle.getAnchor();      if (anchor.getType() == ConstraintAnchor.Type.CENTER_X || anchor.getType() == ConstraintAnchor.Type.CENTER_Y) {        continue;      }      float distance=0;      boolean computed=false;      if (!mousePress && anchor.isSideAnchor()) {        if (!anchor.isVerticalAnchor()) {          if (y >= mWidget.getDrawY() && y <= mWidget.getDrawBottom()) {            distance=(handle.getDrawX() - x) * (handle.getDrawX() - x);            computed=true;          }        } else {          if (x >= mWidget.getDrawX() && x <= mWidget.getDrawRight()) {            distance=(handle.getDrawY() - y) * (handle.getDrawY() - y);            computed=true;          }        }      }      if (!computed) {        distance=(handle.getDrawX() - x) * (handle.getDrawX() - x) + (handle.getDrawY() - y) * (handle.getDrawY() - y);      }      distance=viewTransform.getSwingDimensionF(distance);      if (distance < candidate.distance) {        candidate.anchorTarget=anchor;        candidate.distance=distance;      }    }  } else {    for (    ConstraintHandle handle : mConstraintHandles) {      ConstraintAnchor anchor=handle.getAnchor();      float distance=(handle.getDrawX() - x) * (handle.getDrawX() - x) + (handle.getDrawY() - y) * (handle.getDrawY() - y);      if (anchor.getType() == ConstraintAnchor.Type.CENTER_X || anchor.getType() == ConstraintAnchor.Type.CENTER_Y) {        continue;      }      if (anchor.getType() == ConstraintAnchor.Type.BASELINE) {        if (!anchor.getOwner().hasBaseline()) {          continue;        }        ConstraintWidget widget=anchor.getOwner();        int minX=widget.getDrawX();        int maxX=widget.getDrawRight();        float d=Math.abs(handle.getDrawY() - y);        if (x >= minX && x <= maxX && d < 3) {          distance=d * d;        }      }      distance=viewTransform.getSwingDimensionF(distance);      if (distance <= candidate.distance) {        if (candidate.anchorTarget == null || candidate.anchorTarget.getPriorityLevel() < anchor.getPriorityLevel()) {          candidate.anchorTarget=anchor;          candidate.distance=distance;        }      }    }  }}  }
class C{  private void do_pts_interval_merge(){  for (  HeapInsIntervalManager him : new_pts.values()) {    him.mergeFigures(Parameters.max_pts_budget);  }}  }
class C{  public void finishPhases(){  if (paddleTransformer != null) {    paddleTransformer().finishPhases();  }}  }
class C{  private void onFetchVideosInfoSuccess(JSONObject jsonObj){  try {    String videoRowsJson=jsonObj.getString(TAG_CATEGORY);    VideoRow[] videoRows=new Gson().fromJson(videoRowsJson,VideoRow[].class);    for (    VideoRow videoRow : videoRows) {      if (!categoryVideosMap.containsKey(videoRow.getCategory())) {        categoryVideosMap.put(videoRow.getCategory(),new ArrayList<VideoCard>());      }      categoryVideosMap.get(videoRow.getCategory()).addAll(videoRow.getVideos());      mAdapter.addAll(mAdapter.size(),videoRow.getVideos());      startEntranceTransition();    }  } catch (  JSONException ex) {    Log.e(TAG,"A JSON error occurred while fetching videos: " + ex.toString());  }}  }
class C{  protected ResultObjectProvider executeQuery(Executor ex,ClassMetaData classMetaData,ClassMetaData[] types,boolean subClasses,ExpressionFactory[] factories,QueryExpressions[] expressions,Object[] parameters,Range range){  final JpaQueryExecutor executor=JpaQueryExecutorFactory.newExecutor(expressions[0],classMetaData,parameters);  try {    return executor.execute(_store);  } catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  protected Status(){}  }
class C{  private void transfer(Entry[] src,Entry[] dest){  for (int j=0; j < src.length; ++j) {    Entry e=src[j];    src[j]=null;    while (e != null) {      Entry next=e.next;      Object key=e.get();      if (key == null || (timeToLive > 0 && ((TimedEntry)e).isExpired(timeToLive))) {        e.next=null;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  public void clearSelection(){  Iterator<Integer> iterator=selectedItems.iterator();  while (iterator.hasNext()) {    int i=iterator.next();    iterator.remove();    Log.v(TAG,"clearSelection notifyItemChanged on position " + i);    notifyItemChanged(i);  }}  }
class C{  public boolean isApplicable(){  ExtractReadsViewer viewer=(ExtractReadsViewer)getParent();  return viewer != null && viewer.getMode().equals(ClassificationType.Taxonomy.toString());}  }
class C{  public String toXML(){  StringBuffer result=new StringBuffer(200);  result.append("  <Configuration>\n");  result.append("  <id>");  result.append(this.id);  result.append("</id>\n");  result.append("  <name>");  result.append(this.name);  result.append("</name>\n");  result.append("  <description>");  result.append(this.description);  result.append("</description>\n");  result.append("  <author>");  result.append(this.author);  result.append("</author>\n");  result.append("  <creation-date>");  result.append(this.creationDate.toString());  result.append("</creation-date>\n");  result.append("  </Configuration>\n");  return result.toString();}  }
class C{  public AppsGetCatalogQuery returnFriends(Boolean value){  return unsafeParam("return_friends",value);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    try {      camera.autoFocus(autoFocusCallback);    } catch (    RuntimeException re) {      Log.w(TAG,"Unexpected exception while focusing",re);    }  }}  }
class C{  private void del(VisibleObject object,boolean isOutOfRange){  if (knownObjects.remove(object.getObjectId()) != null) {    if (knownPlayers != null) {      knownPlayers.remove(object.getObjectId());    }    delVisualObject(object,isOutOfRange);  }}  }
class C{  protected Set<D> computeReturnFlowFunction(FlowFunction<D> retFunction,D d1,D d2,N callSite,Collection<D> callerSideDs){  return retFunction.computeTargets(d2);}  }
class C{  public int print(Graphics gc0,PageFormat format,int pagenumber) throws PrinterException {  if (pagenumber == 0) {    Graphics2D gc=((Graphics2D)gc0);    Dimension dim=frame.getContentPane().getSize();    int image_w=dim.width;    int image_h=dim.height;    double paper_x=format.getImageableX() + 1;    double paper_y=format.getImageableY() + 1;    double paper_w=format.getImageableWidth() - 2;    double paper_h=format.getImageableHeight() - 2;    double scale_x=paper_w / image_w;    double scale_y=paper_h / image_h;    double scale=(scale_x <= scale_y) ? scale_x : scale_y;    double shift_x=paper_x + (paper_w - scale * image_w) / 2.0;    double shift_y=paper_y + (paper_h - scale * image_h) / 2.0;    gc.translate(shift_x,shift_y);    gc.scale(scale,scale);    gc.setStroke(new BasicStroke(1.0f));    gc.setColor(Color.BLACK);    frame.getContentPane().paint(gc);    return Printable.PAGE_EXISTS;  } else   return Printable.NO_SUCH_PAGE;}  }
class C{  private void initModel(){  this.pagerManageModel=new PagerManageObject(0);  AuthManager.getInstance().addOnWriteDataListener(this);  if (AuthManager.getInstance().getState() == AuthManager.FREEDOM_STATE) {    AuthManager.getInstance().refreshPersonalProfile();  }}  }
class C{  protected VideoGetAlbumsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private static String replaceTextAndTags(final SubstringFormatterDetails details,final String text,final String input,final String output){  String convertedText=text;  if (details.isKeepTags()) {    convertedText=convertedText.replace(input,output);  } else {    convertedText=convertedText.replace(details.getStartTag() + input + details.getEndTag(),output);  }  return convertedText;}  }
class C{  protected void renumberColumns(){  Iterator iter=m_names.iterator();  for (int idx=0; iter.hasNext(); ++idx) {    String name=(String)iter.next();    ColumnEntry e=(ColumnEntry)m_entries.get(name);    e.colnum=idx;  }}  }
class C{  public void generateCompressFiles() throws Exception {  String pwd=new File("src/test/resources").getCanonicalPath();  String inputFile=pwd + "/data.csv";  FileInputStream input=new FileInputStream(inputFile);  Configuration conf=new Configuration();  String outputFile=pwd + "/data.csv.gz";  FileOutputStream output=new FileOutputStream(outputFile);  GzipCodec gzip=new GzipCodec();  gzip.setConf(conf);  CompressionOutputStream outputStream=gzip.createOutputStream(output);  int i=-1;  while ((i=input.read()) != -1) {    outputStream.write(i);  }  outputStream.close();  input.close();  input=new FileInputStream(inputFile);  outputFile=pwd + "/data.csv.bz2";  output=new FileOutputStream(outputFile);  BZip2Codec bzip2=new BZip2Codec();  bzip2.setConf(conf);  outputStream=bzip2.createOutputStream(output);  i=-1;  while ((i=input.read()) != -1) {    outputStream.write(i);  }  outputStream.close();  input.close();  input=new FileInputStream(inputFile);  outputFile=pwd + "/data.csv.snappy";  output=new FileOutputStream(outputFile);  SnappyCodec snappy=new SnappyCodec();  snappy.setConf(conf);  outputStream=snappy.createOutputStream(output);  i=-1;  while ((i=input.read()) != -1) {    outputStream.write(i);  }  outputStream.close();  input.close();  input=new FileInputStream(inputFile);  outputFile=pwd + "/data.csv.lz4";  output=new FileOutputStream(outputFile);  Lz4Codec lz4=new Lz4Codec();  lz4.setConf(conf);  outputStream=lz4.createOutputStream(output);  i=-1;  while ((i=input.read()) != -1) {    outputStream.write(i);  }  outputStream.close();  input.close();}  }
class C{  public TypeVariable typeVariable(SootClass sootClass){  return typeVariable(hierarchy.typeNode(sootClass.getType()));}  }
class C{  public AsyncServerRequest(RequestType type,GeneratedMessage req){  this(type,req,false);}  }
class C{  public boolean isShowDeleteButton(){  return mShowDeleteButton;}  }
class C{  public void testImportSubProjectWithCustomLocation() throws IOException, ConfigurationException {  VirtualFile projectRoot=createProjectWithSubprojects(Collections.singletonMap(pathToGradleName(SAMPLE_PROJECT_NAME),SAMPLE_PROJECT_PATH));  Map<String,VirtualFile> subProjects=moduleListToMap(GradleModuleImporter.getRelatedProjects(projectRoot,getProject()));  assertEquals(1,subProjects.size());  VirtualFile moduleLocation=projectRoot.findFileByRelativePath(SAMPLE_PROJECT_PATH);  assert moduleLocation != null;  assertEquals(moduleLocation,subProjects.get(pathToGradleName(SAMPLE_PROJECT_NAME)));  GradleModuleImporter.importModules(this,subProjects,getProject(),null);  assertModuleImported(getProject(),SAMPLE_PROJECT_NAME,moduleLocation);}  }
class C{  public ProcessingUnitContainer createContainer() throws CannotCreateContainerException {  addConfigLocation(getJettyPuResource());  if (getClusterInfo() != null) {    ClusterInfoParser.guessSchema(getClusterInfo());  }  final ResourceApplicationContext applicationContext=initApplicationContext();  ClassLoader origClassLoader=Thread.currentThread().getContextClassLoader();  JettyHolder jettyHolder=null;  List<FreePortGenerator.PortHandle> portHandles=new ArrayList<FreePortGenerator.PortHandle>();  try {    try {      ClassLoaderHelper.setContextClassLoader(getJeeClassLoader(),true);    } catch (    Exception e) {    }    applicationContext.refresh();    jettyHolder=initJettyHolder(applicationContext,portHandles);    initJettyJmx(jettyHolder);    String[] filesToResolve=new String[]{"WEB-INF/web.xml","WEB-INF/jetty-web.xml","WEB-INF/jetty6-web.xml","WEB-INF/web-jetty.xml"};    for (    String fileToResolve : filesToResolve) {      try {        BeanLevelPropertiesUtils.resolvePlaceholders(getBeanLevelProperties(),new File(getDeployPath(),fileToResolve));      } catch (      IOException e) {        throw new CannotCreateContainerException("Failed to resolve properties on " + fileToResolve,e);      }    }  }  finally {    ClassLoaderHelper.setContextClassLoader(origClassLoader,true);  }  try {    setCurrentApplicationContext(applicationContext);    setCurrentBeanLevelProperties(getBeanLevelProperties());    setCurrentClusterInfo(getClusterInfo());    CommonClassLoader.getInstance().setDisableSmartGetUrl(true);    WebAppContext webAppContext=initWebAppContext(applicationContext);    HandlerContainer container=jettyHolder.getServer();    ContextHandlerCollection contextHandlerContainer=null;    Handler[] contexts=jettyHolder.getServer().getChildHandlersByClass(ContextHandlerCollection.class);    if (contexts != null && contexts.length > 0) {      contextHandlerContainer=(ContextHandlerCollection)contexts[0];    } else {      while (container != null) {        if (container instanceof HandlerWrapper) {          HandlerWrapper wrapper=(HandlerWrapper)container;          Handler handler=wrapper.getHandler();          if (handler == null)           break;          if (handler instanceof HandlerContainer)           contextHandlerContainer=(ContextHandlerCollection)handler; else           throw new IllegalStateException("No container");        }        throw new IllegalStateException("No container");      }    }    contextHandlerContainer.addHandler(webAppContext);    if (container.isStarted() || container.isStarting()) {      origClassLoader=Thread.currentThread().getContextClassLoader();      try {        ClassLoaderHelper.setContextClassLoader(getJeeClassLoader(),true);        webAppContext.start();      } catch (      Exception e) {        throw new CannotCreateContainerException("Failed to start web app context",e);      } finally {        ClassLoaderHelper.setContextClassLoader(origClassLoader,true);      }    }    if (webAppContext.getUnavailableException() != null) {      throw new CannotCreateContainerException("Failed to start web app context",webAppContext.getUnavailableException());    }    if (webAppContext.isFailed()) {      throw new CannotCreateContainerException("Failed to start web app context (exception should be logged)");    }    JettyProcessingUnitContainer processingUnitContainer=new JettyProcessingUnitContainer(applicationContext,webAppContext,contextHandlerContainer,jettyHolder,portHandles);    logger.info("Deployed web application [" + processingUnitContainer.getJeeDetails().getDescription() + "]");    return processingUnitContainer;  } catch (  Exception e) {    try {      jettyHolder.stop();    } catch (    Exception e1) {      logger.debug("Failed to stop jetty after an error occured, ignoring",e);    }    if (e instanceof CannotCreateContainerException) {      throw ((CannotCreateContainerException)e);    }    throw new CannotCreateContainerException("Failed to start web application",e);  } finally {    setCurrentApplicationContext(null);    setCurrentBeanLevelProperties(null);    setCurrentClusterInfo(null);    CommonClassLoader.getInstance().setDisableSmartGetUrl(false);  }}  }
class C{  @Override public RealVector solve(final RealVector b){  return pseudoInverse.operate(b);}  }
class C{  public EqException(final String descr){  this(-1,descr);}  }
class C{  public GroupsEditManagerQuery contactEmail(String value){  return unsafeParam("contact_email",value);}  }
class C{  @Override public boolean isValueLineVariableLength(){  return mValueLineVariableLength;}  }
class C{  public static int subAndCheck(int x,int y){  long s=(long)x - (long)y;  if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {    throw new ArithmeticException("overflow: subtract");  }  return (int)s;}  }
class C{  public StorageSetQuery value(String value){  return unsafeParam("value",value);}  }
class C{  public BeforeExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ALARM_REMAIN_PLAYTIME(String value0){  return new SM_SYSTEM_MESSAGE(1400049,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200868,skillcaster,num0,skillname);}  }
class C{  public void stopAnimations(){  if (animatorSet != null) {    isStopSearchingAnim=true;    animatorSet.end();    animatorSet.cancel();  }}  }
class C{  @Override public void onCompletion(MediaPlayer mp){  Log_OC.v(TAG,"completed");  if (mp != null) {    mVideoPreview.seekTo(0);  }  mMediaController.updatePausePlay();}  }
class C{  protected String cmd(){  return cmd;}  }
class C{  public Object clone(){  Body b=new JimpleBody(getMethod());  b.importBodyContentsFrom(this);  return b;}  }
class C{  public boolean canGetInt(){  return canGet(int.class);}  }
class C{  public PhotosGetAlbumsQuery albumIds(Integer... value){  return unsafeParam("album_ids",value);}  }
class C{  static boolean lessEqual(Object v1,Object v2){  v1=maybeConvertToString(v1);  v2=maybeConvertToString(v2);  if (Objects.equals(v1,v2)) {    return true;  }  return less(v1,v2);}  }
class C{  public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public static long toSeconds(BigInteger eu,BigFraction unitsInSec){  BigFraction editUnits=new BigFraction(eu);  return editUnits.divide(unitsInSec).longValue();}  }
class C{  private boolean isRemoteServerConfigured(Configuration config){  String url=(String)systemSettingManager.getSystemSetting(SettingKey.REMOTE_INSTANCE_URL);  String username=(String)systemSettingManager.getSystemSetting(SettingKey.REMOTE_INSTANCE_USERNAME);  String password=(String)systemSettingManager.getSystemSetting(SettingKey.REMOTE_INSTANCE_PASSWORD);  if (isEmpty(url)) {    log.info("Remote server URL not set");    return false;  }  if (isEmpty(username) || isEmpty(password)) {    log.info("Remote server username or password not set");    return false;  }  return true;}  }
class C{  public AirMapTrafficProperties(JSONObject propertiesJson){  constructFromJson(propertiesJson);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParMethodAccess fullCopy(){  ParMethodAccess tree=(ParMethodAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void expandAllNodes(JTree tree,TreePath parentPath){  TreeNode node=(TreeNode)parentPath.getLastPathComponent();  for (int i=0; i < node.getChildCount(); i++) {    expandAllNodes(tree,parentPath.pathByAddingChild(node.getChildAt(i)));  }  tree.expandPath(parentPath);}  }
class C{  protected boolean isValidQuery(String query){  if (query == null) {    return true;  }  return QUERY_PATTERN.matcher(query).matches();}  }
class C{  protected void addLanguageVariables(BundleContext context,Language language){  if (languageVariablesNotAdded) {    languageVariablesNotAdded=false;    try {      URL resourceURL=context.getBundle().getResource("conf/Language-ext.properties");      PropertyResourceBundle resourceBundle=new PropertyResourceBundle(resourceURL.openStream());      Map<String,String> languageVariables=new HashMap<String,String>();      for (      String key : resourceBundle.keySet()) {        languageVariables.put(key,resourceBundle.getString(key));      }      addLanguageVariables(languageVariables,language);    } catch (    IOException e) {      Logger.warn(this,"Exception while registering language variables",e);    }  }}  }
class C{  public BoardGetTopicsQueryWithExtended order(BoardGetTopicsOrder value){  return unsafeParam("order",value);}  }
class C{  public static final byte rollLeft(final byte in,final int count){  int tmp=(int)in & 0xFF;  tmp=tmp << (count % 8);  return (byte)((tmp & 0xFF) | (tmp >> 8));}  }
class C{  public void listDirectory(OCFile directory,boolean onlyOnDevice){  FileDataStorageManager storageManager=mContainerActivity.getStorageManager();  if (storageManager != null) {    if (directory == null) {      if (mFile != null) {        directory=mFile;      } else {        directory=storageManager.getFileByPath("/");        if (directory == null)         return;      }    }    if (!directory.isFolder()) {      Log_OC.w(TAG,"You see, that is not a directory -> " + directory.toString());      directory=storageManager.getFileById(directory.getParentId());    }    mAdapter.swapDirectory(directory,storageManager,onlyOnDevice);    if (mFile == null || !mFile.equals(directory)) {      mCurrentListView.setSelection(0);    }    mFile=directory;    updateLayout();  }}  }
class C{  @GET @Path("manual-header") @Produces("text/plain") public Response withHeader(){  Response.ResponseBuilder builder=Response.ok("hello world");  builder.header("custom","value");  DKIMSignature signature=new DKIMSignature();  signature.setSelector("test");  signature.setDomain("samplezone.org");  signature.addHeader("custom");  builder.header(DKIMSignature.DKIM_SIGNATURE,signature);  return builder.build();}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  public void sendToFilterModuleByDynamicTimedeadbandFilterer(final SourceDataTag currentSourceDataTag,final ValueUpdate update,final SourceDataTagQuality quality,final int filterType){  doSendToFilterModule(currentSourceDataTag,update,quality,true,filterType);}  }
class C{  public void writeByte(int position,byte b){  if (position < 0 || position >= Page.pageSize) {    throw new PageException("readByte is out of bounds of page");  }  pageData.put(position,b);}  }
class C{  public static void dismiss(Context context){  try {    if (context instanceof Activity) {      if (((Activity)context).isFinishing()) {        loadDialog=null;        return;      }    }    if (loadDialog != null && loadDialog.isShowing()) {      Context loadContext=loadDialog.getContext();      if (loadContext != null && loadContext instanceof Activity) {        if (((Activity)loadContext).isFinishing()) {          loadDialog=null;          return;        }      }      loadDialog.dismiss();      loadDialog=null;    }  } catch (  Exception e) {    e.printStackTrace();    loadDialog=null;  }}  }
class C{  @Override public void beforeTextChanged(CharSequence s,int start,int count,int after){}  }
class C{  @Parameters(name="{index}: {0}") public static Collection<Object[]> data(){  final List<Object[]> list=new ArrayList<Object[]>();  list.add(new Object[]{new LoginData(USER,PASS),LoginType.PTC,true,false});  list.add(new Object[]{new LoginData(USER,EMPTY),LoginType.PTC,false,false});  list.add(new Object[]{new LoginData(EMPTY,PASS),LoginType.PTC,false,false});  list.add(new Object[]{new LoginData(EMPTY,EMPTY),LoginType.PTC,false,false});  list.add(new Object[]{new LoginData(USER,null),LoginType.PTC,false,false});  list.add(new Object[]{new LoginData(null,PASS),LoginType.PTC,false,false});  list.add(new Object[]{new LoginData(null,null),LoginType.PTC,false,false});  list.add(new Object[]{new LoginData(TOKEN),LoginType.GOOGLE_AUTH,false,true});  list.add(new Object[]{new LoginData(null),LoginType.GOOGLE_AUTH,false,false});  list.add(new Object[]{new LoginData(EMPTY),LoginType.GOOGLE_AUTH,false,false});  list.add(new Object[]{new LoginData(USER,PASS,TOKEN),LoginType.ALL,true,true});  list.add(new Object[]{new LoginData(EMPTY,EMPTY,EMPTY),LoginType.ALL,false,false});  list.add(new Object[]{new LoginData(null,null,null),LoginType.ALL,false,false});  list.add(new Object[]{new LoginData(USER,PASS,EMPTY),LoginType.ALL,true,false});  list.add(new Object[]{new LoginData(USER,PASS,null),LoginType.ALL,true,false});  list.add(new Object[]{new LoginData(EMPTY,EMPTY,TOKEN),LoginType.ALL,false,true});  list.add(new Object[]{new LoginData(null,null,TOKEN),LoginType.ALL,false,true});  return list;}  }
class C{  public static String extractHostId(String hostId){  AssertUtil.assertNotNull(hostId,"hostId");  int idx=hostId.indexOf(HOST_ID_TENANT_SEPARATOR);  String id=hostId;  if (idx != -1) {    id=hostId.substring(idx + HOST_ID_TENANT_SEPARATOR.length());  }  return id;}  }
class C{  private boolean useEquipmentConditionsCheck(){  Conditions useEquipConditions=skillTemplate.getUseEquipmentconditions();  return useEquipConditions != null ? useEquipConditions.validate(this) : true;}  }
class C{  public static boolean isGenericTypeAnnotedWithPageObject(Field field){  Class<?> genericType=PageObjectProviderHelper.getGenericType(field);  return genericType != null && genericType.isAnnotationPresent(PageObject.class);}  }
class C{  public DefaultFieldMatrixChangingVisitor(final T zero){  this.zero=zero;}  }
class C{  public boolean contains(ScoutCandidateGroup candidate){  return mRect.contains(candidate.mRect);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffMental_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201255,skillcaster,skillname);}  }
class C{  public static int expandRoman(String roman){  int value=0;  for (int p=0; p < roman.length(); p++) {    char c=roman.charAt(p);    if (c == 'X') {      value+=10;    } else     if (c == 'V') {      value+=5;    } else     if (c == 'I') {      if (p + 1 < roman.length()) {        char p1=roman.charAt(p + 1);        if (p1 == 'V') {          value+=4;          p++;        } else         if (p1 == 'X') {          value+=9;          p++;        } else {          value+=1;        }      } else {        value+=1;      }    }  }  return value;}  }
class C{  public static final void isCommentWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){  if (datavalue == null || (datavalue.length() == 0)) {    return;  }  char[] dataarray=datavalue.toCharArray();  int datalength=dataarray.length;  if (isXML11Version) {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XML11Char.isXML11Invalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInComment",new Object[]{Integer.toString(dataarray[i - 1],16)});        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"DashDashInComment",null);        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      }    }  } else {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XMLChar.isInvalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInComment",new Object[]{Integer.toString(dataarray[i - 1],16)});        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"DashDashInComment",null);        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");      }    }  }}  }
class C{  @Override public synchronized boolean onTouchEvent(MotionEvent event){  if (!isEnabled())   return false;  final int action=event.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_DOWN:    mActivePointerId=event.getPointerId(event.getPointerCount() - 1);  pointerIndex=event.findPointerIndex(mActivePointerId);float mDownMotionX=event.getX(pointerIndex);pressedThumb=evalPressedThumb(mDownMotionX);if (pressedThumb == null) return super.onTouchEvent(event);touchDown(event.getX(pointerIndex),event.getY(pointerIndex));setPressed(true);invalidate();onStartTrackingTouch();trackTouchEvent(event);attemptClaimDrag();break;case MotionEvent.ACTION_MOVE:if (pressedThumb != null) {if (mIsDragging) {touchMove(event.getX(pointerIndex),event.getY(pointerIndex));trackTouchEvent(event);}if (onRangeSeekbarChangeListener != null) {onRangeSeekbarChangeListener.valueChanged(getSelectedMinValue(),getSelectedMaxValue());}}break;case MotionEvent.ACTION_UP:if (mIsDragging) {trackTouchEvent(event);onStopTrackingTouch();setPressed(false);touchUp(event.getX(pointerIndex),event.getY(pointerIndex));if (onRangeSeekbarFinalValueListener != null) {onRangeSeekbarFinalValueListener.finalValue(getSelectedMinValue(),getSelectedMaxValue());}} else {onStartTrackingTouch();trackTouchEvent(event);onStopTrackingTouch();}pressedThumb=null;invalidate();if (onRangeSeekbarChangeListener != null) {onRangeSeekbarChangeListener.valueChanged(getSelectedMinValue(),getSelectedMaxValue());}break;case MotionEvent.ACTION_POINTER_DOWN:{break;}case MotionEvent.ACTION_POINTER_UP:invalidate();break;case MotionEvent.ACTION_CANCEL:if (mIsDragging) {onStopTrackingTouch();setPressed(false);touchUp(event.getX(pointerIndex),event.getY(pointerIndex));}invalidate();break;}return true;}  }
class C{  @Override public void schedule(String jobName,String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime,int maxRetry,String eventId) throws GenericServiceException {  Transaction suspendedTransaction=null;  try {    boolean beganTransaction=false;    suspendedTransaction=TransactionUtil.suspend();    try {      beganTransaction=TransactionUtil.begin();      try {        getJobManager().schedule(jobName,poolName,serviceName,context,startTime,frequency,interval,count,endTime,maxRetry,eventId);        if (Debug.verboseOn()) {          Debug.logVerbose("[LocalDispatcher.schedule] : Current time : " + (new Date()).getTime(),module);          Debug.logVerbose("[LocalDispatcher.schedule] : Runtime      : " + startTime,module);          Debug.logVerbose("[LocalDispatcher.schedule] : Frequency    : " + frequency,module);          Debug.logVerbose("[LocalDispatcher.schedule] : Interval     : " + interval,module);          Debug.logVerbose("[LocalDispatcher.schedule] : Count        : " + count,module);          Debug.logVerbose("[LocalDispatcher.schedule] : EndTime      : " + endTime,module);          Debug.logVerbose("[LocalDispatcher.schedule] : MaxRetry     : " + maxRetry,module);          Debug.logVerbose("[LocalDispatcher.schedule] : Event ID     : " + eventId,module);        }      } catch (      JobManagerException jme) {        throw new GenericServiceException(jme.getMessage(),jme);      }    } catch (    Exception e) {      String errMsg="General error while scheduling job";      Debug.logError(e,errMsg,module);      try {        TransactionUtil.rollback(beganTransaction,errMsg,e);      } catch (      GenericTransactionException gte1) {        Debug.logError(gte1,"Unable to rollback transaction",module);      }    } finally {      try {        TransactionUtil.commit(beganTransaction);      } catch (      GenericTransactionException gte2) {        Debug.logError(gte2,"Unable to commit scheduled job",module);      }    }  } catch (  GenericTransactionException gte) {    Debug.logError(gte,"Error suspending transaction while scheduling job",module);  } finally {    if (suspendedTransaction != null) {      try {        TransactionUtil.resume(suspendedTransaction);      } catch (      GenericTransactionException gte3) {        Debug.logError(gte3,"Error resuming suspended transaction after scheduling job",module);      }    }  }}  }
class C{  private static void createTmpFile(CompletableFuture<NewFile> fileCreation,Path destDir,List<TSData> files){  LOG.log(Level.FINE,"starting temporary file creation...");  try {    Collections.sort(files,Comparator.comparing(null));    final FileChannel fd=FileUtil.createTempFile(destDir,"monsoon-",".optimize-tmp");    try {      final DateTime begin;      try (ToXdrTables output=new ToXdrTables(fd,Compression.DEFAULT_OPTIMIZED)){        while (!files.isEmpty()) {          TSData tsdata=files.remove(0);          if (fileCreation.isCancelled())           throw new IOException("aborted due to canceled execution");          output.addAll(tsdata);        }        begin=new DateTime(output.getHdrBegin(),DateTimeZone.UTC);        if (fileCreation.isCancelled())         throw new IOException("aborted due to canceled execution");      }       if (fileCreation.isCancelled())       throw new IOException("aborted due to canceled execution");      INSTALL_POOL.execute(null);    } catch (    Error|RuntimeException|IOException ex) {      try {        fd.close();      } catch (      Error|RuntimeException|IOException ex1) {        ex.addSuppressed(ex1);      }      throw ex;    }  } catch (  Error|RuntimeException|IOException ex) {    LOG.log(Level.WARNING,"temporary file for optimization failure",ex);synchronized (OUTSTANDING) {      OUTSTANDING.remove(fileCreation);    }    fileCreation.completeExceptionally(ex);  }}  }
class C{  private void bitmapUpdated(){  ConfigurationManager configurationManager=myFacet.getConfigurationManager(false);  if (configurationManager != null) {    IAndroidTarget target=configurationManager.getTarget();    if (target != null) {      Module module=myFacet.getModule();      AndroidTargetData targetData=AndroidTargetData.getTargetData(target,module);      if (targetData != null) {        targetData.clearLayoutBitmapCache(module);      }    }  }}  }
class C{  public FormScalingUtil(Class clazz,float scaleFactor){  this.myClazz=clazz;  this.myScaleFactor=scaleFactor;}  }
class C{  public boolean canZoomOutMoreY(){  return (mScaleY > mMinScaleY);}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  theSet.add(obj4);  return theSet;}  }
class C{  private int addDEPHeads(NLPNode[] dTree,CTTree cTree){  int currId, headId, size=dTree.length, rootCount=0;  CTNode cNode, ante;  NLPNode dNode;  String label;  for (currId=1; currId < size; currId++) {    dNode=dTree[currId];    cNode=cTree.getToken(currId - 1);    headId=cNode.getC2DInfo().getTerminalHead().getTokenID() + 1;    if (currId == headId) {      dNode.setDependencyHead(dTree[0],DEPTagEn.DEP_ROOT);      rootCount++;    } else {      label=cNode.getC2DInfo().getLabel();      if (cNode.isConstituentTagAny(S_MARK) && cNode.getParent().isConstituentTag(PTBTag.C_SBAR))       label=DEPTagEn.DEP_MARK;      dNode.setDependencyHead(dTree[headId],label);    }    if ((ante=cNode.getAntecedent()) != null)     dNode.addSecondaryHead(getNLPNode(dTree,ante),DEPTagEn.DEP2_REF);  }  return rootCount;}  }
class C{  public boolean hasProgramIncidentStartDate(){  return programIncidentStartDate != null;}  }
class C{  public static IBlockState handle(World world,IBlockState state,BlockPos pos){  xyz.openmodloader.event.impl.BlockEvent.Place event=new xyz.openmodloader.event.impl.BlockEvent.Place(world,state,pos);  return OpenModLoader.getEventBus().post(event) ? event.getBlockState() : null;}  }
class C{  public void clear(){  id2row.clear();  clearSelection();  while (model.getRowCount() > 0)   model.removeRow(model.getRowCount() - 1);  model.getDataVector().clear();}  }
class C{  public boolean isValid(String value){  if (value == null) {    return false;  }  for (int i=0; i < patterns.length; i++) {    if (patterns[i].matcher(value).matches()) {      return true;    }  }  return false;}  }
class C{  public void scale(Vector3f scale){  m00*=scale.getX();  m10*=scale.getX();  m20*=scale.getX();  m30*=scale.getX();  m01*=scale.getY();  m11*=scale.getY();  m21*=scale.getY();  m31*=scale.getY();  m02*=scale.getZ();  m12*=scale.getZ();  m22*=scale.getZ();  m32*=scale.getZ();}  }
class C{  public static String charToString(int value){  return (String.valueOf(Character.toChars(value)));}  }
class C{  public static String operationCodeToString(Integer code){  return fieldsMap.get(code);}  }
class C{  public EvolutionResult(PokemonGo api,EvolvePokemonResponseOuterClass.EvolvePokemonResponse proto){  this.proto=proto;  this.pokemon=new Pokemon(api,proto.getEvolvedPokemonData());}  }
class C{  public static SimplifiedIntervalList collectBucketedIntervalsIntersectingIntervalList(SimplifiedIntervalList supplyIntervals,SimplifiedIntervalList bucketedIntervals,Granularity granularity){  Iterable<Interval> bucketedIterable=granularity.intervalsIterable(bucketedIntervals);  Predicate<Interval> isIntersecting=new SimplifiedIntervalList.SkippingIntervalPredicate(supplyIntervals,null,false);  return StreamSupport.stream(bucketedIterable.spliterator(),false).filter(isIntersecting).collect(SimplifiedIntervalList.getCollector());}  }
class C{  public GSQueueConnectionFactoryImpl(IJSpace space,IMessageConverter messageConverter) throws JMSException {  super(space,messageConverter);}  }
class C{  public GroupsEditPlaceQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"groups.editPlace",EditPlaceResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  private void postBufferAccess(){  _lock.lock();  try {    if (--_bufferUseCount == 0) {      _flushReady.signalAll();    }  }  finally {    _lock.unlock();  }}  }
class C{  public AdsGetSuggestionsQueryWithRegions country(Integer value){  return unsafeParam("country",value);}  }
class C{  public double secondsSinceLast(){  return (timeSinceLast()) / 1000.0;}  }
class C{  public static boolean isAtLeastJava16(){  return getMajorJavaVersion() >= JAVA_16;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_ATE_FOOD_2(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400621,value0,value1);}  }
class C{  public IteratorBuilder iteratorScope(IteratorScope iteratorScope){  iteratorConfig.setIteratorScope(iteratorScope);  return this;}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public boolean updateCursor(@NotNull ScreenView screenView,@AndroidCoordinate int x,@AndroidCoordinate int y){  return false;}  }
class C{  public void loadFromFile(String fileName) throws IOException {  clear();  System.err.print("Loading " + Basic.getFileNameWithoutPath(fileName) + ": ");  try (BufferedReader r=new BufferedReader(new InputStreamReader(ResourceManager.getFileAsStream(fileName)))){    read(r,true);  }   for (Node v=getFirstNode(); v != null; v=v.getNext()) {    if (Basic.isInteger(getLabel(v))) {      int id=Integer.parseInt(getLabel(v));      setInfo(v,id);      addId2Node(id,v);      if (v.getInDegree() > 1)       System.err.println("Reticulate node: " + id);    } else     throw new IOException("Node has illegal label: " + getLabel(v));  }  if (id2Node.get(IdMapper.UNASSIGNED_ID) == null) {    Node v=newNode();    addId2Node(IdMapper.UNASSIGNED_ID,v);    name2IdMap.put(IdMapper.UNASSIGNED_LABEL,IdMapper.UNASSIGNED_ID);    name2IdMap.setRank(IdMapper.UNASSIGNED_ID,0);    newEdge(getRoot(),v);  }  setInfo(getANode(IdMapper.UNASSIGNED_ID),IdMapper.UNASSIGNED_ID);  if (id2Node.get(IdMapper.LOW_COMPLEXITY_ID) == null) {    Node v=newNode();    addId2Node(IdMapper.LOW_COMPLEXITY_ID,v);    name2IdMap.put(IdMapper.LOW_COMPLEXITY_LABEL,IdMapper.LOW_COMPLEXITY_ID);    name2IdMap.setRank(IdMapper.LOW_COMPLEXITY_ID,0);    newEdge(getRoot(),v);  }  setInfo(getANode(IdMapper.LOW_COMPLEXITY_ID),IdMapper.LOW_COMPLEXITY_ID);  if (id2Node.get(IdMapper.NOHITS_ID) == null) {    Node v=newNode();    addId2Node(IdMapper.NOHITS_ID,v);    name2IdMap.put(IdMapper.NOHITS_LABEL,IdMapper.NOHITS_ID);    name2IdMap.setRank(IdMapper.NOHITS_ID,0);    newEdge(getRoot(),v);  }  setInfo(getANode(IdMapper.NOHITS_ID),IdMapper.NOHITS_ID);  if (getName().equals(Classification.Taxonomy)) {    Integer taxId=name2IdMap.get("Bacteria");    if (taxId > 0)     name2IdMap.setRank(taxId,127);    taxId=name2IdMap.get("Archaea");    if (taxId > 0)     name2IdMap.setRank(taxId,127);    taxId=name2IdMap.get("Eukaryota");    if (taxId > 0)     name2IdMap.setRank(taxId,127);  }  LCAAddressing.computeAddresses(this,id2Address,address2Id);  System.err.println(String.format("%,9d",getNumberOfNodes()));}  }
class C{  private boolean handleVirtualOpcode(String owner,String name,String desc,boolean itf){  if (DEBUG) {    System.out.println("Virtual Method : " + name + ":"+ desc+ ":"+ itf+ ":"+ isStatic);  }  AccessRight accessRight=getMethodAccessRight(owner,name,desc);  if (accessRight == AccessRight.PUBLIC) {    return false;  }  pushMethodRedirectArgumentsOnStack(name,desc);  invokeStatic(RUNTIME_TYPE,Method.getMethod("Object invokeProtectedMethod(Object, Object[], Class[], String)"));  handleReturnType(desc);  return true;}  }
class C{  public MonsterDamageCursor queryMonsterDamage(long id){  return mHelper.queryMonsterDamage(id);}  }
class C{  private void startComponents(boolean spaceIsPrimary){  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {    ISpaceComponentsHandler handler=iterator.next();    handler.startComponents(spaceIsPrimary);  }}  }
class C{  public static Bitmap cropBitmap(Bitmap bitmap,float[] points,int degreesRotated,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY){  Rect rect=getRectFromPoints(points,bitmap.getWidth(),bitmap.getHeight(),fixAspectRatio,aspectRatioX,aspectRatioY);  Matrix matrix=new Matrix();  matrix.setRotate(degreesRotated,bitmap.getWidth() / 2,bitmap.getHeight() / 2);  Bitmap result=Bitmap.createBitmap(bitmap,rect.left,rect.top,rect.width(),rect.height(),matrix,true);  if (result == bitmap) {    result=bitmap.copy(bitmap.getConfig(),false);  }  if (degreesRotated % 90 != 0) {    result=cropForRotatedImage(result,points,rect,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);  }  return result;}  }
class C{  public int size(){  return listOfFileData.size();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_MAGIC_OTHER_FRIENDLY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1240220,skilltarget,skillcaster);}  }
class C{  public boolean isLogSegmentSequenceNumberValidationEnabled(){  return this.getBoolean(BKDL_LOGSEGMENT_SEQUENCE_NUMBER_VALIDATION_ENABLED,BKDL_LOGSEGMENT_SEQUENCE_NUMBER_VALIDATION_ENABLED_DEFAULT);}  }
class C{  public static Collection<Menu> filterAccess(List<Menu> list,User me){  if (list == null) {    return null;  }  Map<Integer,Menu> map=new TreeMap<Integer,Menu>();  for (  Menu m : list) {    String access=m.getAccess();    boolean has=false;    if (X.isEmpty(access)) {      has=true;    }    if (!has && me != null) {      if (access.indexOf("|") > 0) {        String[] ss=access.split("\\|");        if (me.hasAccess(ss)) {          has=true;        }      } else       if (access.indexOf("&") > 0) {        String[] ss=access.split("\\&");        for (        String s : ss) {          if (!me.hasAccess(s)) {            has=false;            break;          }        }      } else       if (me.hasAccess(access)) {        has=true;      }    }    if (has) {      int seq=m.getSeq();      while (map.containsKey(seq))       seq++;      map.put(seq,m);    }  }  return map.values();}  }
class C{  public void removeClassLoaderStateListener(Long classLoaderKey,IClassLoaderCacheStateListener listener){  ClassLoaderContext classLoaderContext=_classLoaders.get(classLoaderKey);  if (classLoaderContext == null)   return;  classLoaderContext.removeListener(listener);}  }
class C{  public URI(){}  }
class C{  private SimpleGroupPath(List<String> path){  path_=unmodifiableList(new ArrayList<>(path));}  }
class C{  public static int arraySize(final int expected,final float f){  final long s=Math.max(2,nextPowerOfTwo((long)Math.ceil(expected / f)));  if (s > (1 << 30))   throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor "+ f+ ")");  return (int)s;}  }
class C{  public boolean pageScroll(int direction){  boolean toRight=direction == View.FOCUS_RIGHT;  int width=getWidth();  if (toRight) {    mTempRect.left=getScrollX() + width;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      if (mTempRect.left + width > view.getRight()) {        mTempRect.left=view.getRight() - width;      }    }  } else {    mTempRect.left=getScrollX() - width;    if (mTempRect.left < 0) {      mTempRect.left=0;    }  }  mTempRect.right=mTempRect.left + width;  return scrollAndFocus(direction,mTempRect.left,mTempRect.right);}  }
class C{  public ScrollableContainer(JComponent view){  this(view,VERTICAL_SCROLLBAR_AS_NEEDED,HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  public SparseFieldMatrix(final Field<T> field){  super(field);  rows=0;  columns=0;  entries=new OpenIntToFieldHashMap<T>(field);}  }
class C{  public static void open(File file) throws IOException {  Desktop.getDesktop().open(file);}  }
class C{  protected boolean isPunctuation(Element token){  if (token == null)   throw new NullPointerException("Received null token");  if (!token.getTagName().equals(MaryXML.TOKEN))   throw new IllegalArgumentException("Expected <" + MaryXML.TOKEN + "> element, got <"+ token.getTagName()+ ">");  String tokenText=MaryDomUtils.tokenText(token);  return tokenText.equals(",") || tokenText.equals(".") || tokenText.equals("?")|| tokenText.equals("!")|| tokenText.equals(":")|| tokenText.equals(";");}  }
class C{  protected ContentCreateOptions newContentCreateOptions(DocumentMetadata meta){  ContentCreateOptions opt=(ContentCreateOptions)options.clone();  if (meta != null) {    if (opt.getQuality() == 0) {      opt.setQuality(meta.quality);    }    HashSet<String> colSet=new HashSet<String>(meta.collectionsList);    if (opt.getCollections() != null) {      for (      String s : opt.getCollections()) {        colSet.add(s);      }    }    opt.setCollections(colSet.toArray(new String[colSet.size()]));    HashSet<ContentPermission> pSet=new HashSet<ContentPermission>(meta.permissionsList);    if (opt.getPermissions() != null) {      for (      ContentPermission p : opt.getPermissions()) {        pSet.add(p);      }    }    opt.setPermissions(pSet.toArray(new ContentPermission[pSet.size()]));    opt.setMetadata(meta.meta);  }  return opt;}  }
class C{  public static String factoryLinkByStateLink(String stateLink){  if (null == stateLink) {    return null;  }  List<RegistryEntry> list=entries.stream().filter(null).collect(Collectors.toList());  if (list.isEmpty()) {    return null;  }  return list.get(0).stateFactoryLink;}  }
class C{  public void put(int i,double real,double imag){  re[i]=real;  im[i]=imag;}  }
class C{  public ClusterUnitSelector(URL url,ClusterUnitNamer unitNamer) throws IOException {  if (url == null) {    throw new IOException("Can't load cluster unit database");  }  boolean binary=url.getPath().endsWith(".bin");  clunitDB=new ClusterUnitDatabase(url,binary);  this.unitNamer=unitNamer;}  }
class C{  public TextEditor replaceAll(Pattern pattern,Replacement replacement){  Matcher m=pattern.matcher(text);  int lastIndex=0;  StringBuilder sb=new StringBuilder();  while (m.find()) {    sb.append(text.subSequence(lastIndex,m.start()));    sb.append(replacement.replacement(m));    lastIndex=m.end();  }  sb.append(text.subSequence(lastIndex,text.length()));  text=sb;  return this;}  }
class C{  public static Map<String,Object> findOrdersFull(DispatchContext dctx,Map<String,? extends Object> context){  return findOrders(dctx,context,true);}  }
class C{  @VisibleForTesting static OMAInfo parseDownloadDescriptor(InputStream is){  try {    XmlPullParserFactory factory=XmlPullParserFactory.newInstance();    factory.setNamespaceAware(true);    XmlPullParser parser=factory.newPullParser();    parser.setInput(is,null);    int eventType=parser.getEventType();    String currentAttribute=null;    OMAInfo info=new OMAInfo();    StringBuilder sb=null;    List<String> attributeList=new ArrayList<String>(Arrays.asList(OMA_TYPE,OMA_SIZE,OMA_OBJECT_URI,OMA_INSTALL_NOTIFY_URI,OMA_NEXT_URL,OMA_DD_VERSION,OMA_NAME,OMA_DESCRIPTION,OMA_VENDOR,OMA_INFO_URL,OMA_ICON_URI,OMA_INSTALL_PARAM));    while (eventType != XmlPullParser.END_DOCUMENT) {      if (eventType == XmlPullParser.START_DOCUMENT) {        if (!info.isEmpty())         return null;      } else       if (eventType == XmlPullParser.START_TAG) {        String tagName=parser.getName();        if (attributeList.contains(tagName)) {          if (currentAttribute != null) {            Log.w(TAG,"Nested attributes was found in the download descriptor");            return null;          }          sb=new StringBuilder();          currentAttribute=tagName;        }      } else       if (eventType == XmlPullParser.END_TAG) {        if (currentAttribute != null) {          if (!currentAttribute.equals(parser.getName())) {            Log.w(TAG,"Nested attributes was found in the download descriptor");            return null;          }          info.addAttributeValue(currentAttribute,sb.toString().trim());          currentAttribute=null;          sb=null;        }      } else       if (eventType == XmlPullParser.TEXT) {        if (currentAttribute != null) {          sb.append(parser.getText());        }      }      eventType=parser.next();    }    return info;  } catch (  XmlPullParserException e) {    Log.w(TAG,"Failed to parse download descriptor.",e);    return null;  }catch (  IOException e) {    Log.w(TAG,"Failed to read download descriptor.",e);    return null;  }}  }
class C{  private static double sinQ(double xa,double xb){  int idx=(int)((xa * 8.0) + 0.5);  final double epsilon=xa - EIGHTHS[idx];  final double sintA=SINE_TABLE_A[idx];  final double sintB=SINE_TABLE_B[idx];  final double costA=COSINE_TABLE_A[idx];  final double costB=COSINE_TABLE_B[idx];  double sinEpsA=epsilon;  double sinEpsB=polySine(epsilon);  final double cosEpsA=1.0;  final double cosEpsB=polyCosine(epsilon);  final double temp=sinEpsA * HEX_40000000;  double temp2=(sinEpsA + temp) - temp;  sinEpsB+=sinEpsA - temp2;  sinEpsA=temp2;  double result;  double a=0;  double b=0;  double t=sintA;  double c=a + t;  double d=-(c - a - t);  a=c;  b+=d;  t=costA * sinEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  b=b + sintA * cosEpsB + costA * sinEpsB;  b=b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;  if (xb != 0.0) {    t=((costA + costB) * (cosEpsA + cosEpsB) - (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;    c=a + t;    d=-(c - a - t);    a=c;    b+=d;  }  result=a + b;  return result;}  }
class C{  @Override public final void finalize(){  if (LOG.isDebugEnabled()) {    LOG.debug("finalize() - Removing the references to the fallbackManager and the dataRecoveryThread");  }  dataRecovery.stop();  dataRecovery=null;  fallbackManager.finalize();}  }
class C{  public final Observable.Transformer<T,T> readWithLoader(final Object group){  return null;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public NelderMeadSimplex(final int n,double sideLength,final double rho,final double khi,final double gamma,final double sigma){  super(n,sideLength);  this.rho=rho;  this.khi=khi;  this.gamma=gamma;  this.sigma=sigma;}  }
class C{  @Override public Point3D clone() throws CloneNotSupportedException {  return new Point3D(this);}  }
class C{  public BooleanProperty showProperty(){  return show;}  }
class C{  public ClearModifiers add(ClearModifiers modifiers){  return createIfNeeded(super.add(modifiers));}  }
class C{  private void writeUnknownOrDroppedTable(int offset,Exception e){  byte[] exceptionBytes=JsonHelper.asJson(e).getBytes(Charsets.UTF_8);  _buffer.position(offset);  _buffer.putInt(e instanceof UnknownTableException ? UNKNOWN : DROPPED);  _buffer.putInt(exceptionBytes.length);  _buffer.put(exceptionBytes);}  }
class C{  public JsonObject add(String name,long value){  add(name,Json.value(value));  return this;}  }
class C{  public INDArray asMatrix(BufferedImage image){  if (channels == 3) {    return toBgr(image);  } else {    image=scalingIfNeed(image,true);    int w=image.getWidth();    int h=image.getHeight();    INDArray ret=Nd4j.create(h,w);    for (int i=0; i < h; i++) {      for (int j=0; j < w; j++) {        ret.putScalar(new int[]{i,j},image.getRGB(i,j));      }    }    return ret;  }}  }
class C{  public ChangeModifiers(ChangeModifiers modifiers1,ChangeModifiers modifiers2,ChangeModifiers modifiers3){  super(modifiers1,modifiers2,modifiers3);}  }
class C{  private void splitOn(String... columnNames){  List<Column> columns=sortedOriginal.columns(columnNames);  int byteSize=getByteSize(columns);  byte[] currentKey=null;  String currentStringKey=null;  TemporaryView view;  Selection selection=new BitmapBackedSelection();  for (int row=0; row < sortedOriginal.rowCount(); row++) {    ByteBuffer byteBuffer=ByteBuffer.allocate(byteSize);    String newStringKey="";    for (int col=0; col < columnNames.length; col++) {      if (col > 0) {        newStringKey=newStringKey + SPLIT_STRING;      }      Column c=sortedOriginal.column(columnNames[col]);      String groupKey=sortedOriginal.get(sortedOriginal.columnIndex(c),row);      newStringKey=newStringKey + groupKey;      byteBuffer.put(c.asBytes(row));    }    byte[] newKey=byteBuffer.array();    if (row == 0) {      currentKey=newKey;      currentStringKey=newStringKey;    }    if (!Arrays.equals(newKey,currentKey)) {      currentKey=newKey;      view=new TemporaryView(sortedOriginal,selection);      view.setName(currentStringKey);      currentStringKey=newStringKey;      addViewToSubTables(view);      selection=new BitmapBackedSelection();      selection.add(row);    } else {      selection.add(row);    }  }  if (!selection.isEmpty()) {    view=new TemporaryView(sortedOriginal,selection);    view.setName(currentStringKey);    addViewToSubTables(view);  }}  }
class C{  public static void logPromoTapsRemaining(int promoTapsRemaining){  if (promoTapsRemaining >= 0) {    RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoTapsRemaining",promoTapsRemaining);  }}  }
class C{  public TeamsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  protected PhotosReorderAlbumsQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public static boolean isNumeric(String value){  return value != null && DOUBLE_VALIDATOR.isValid(value,LOCALE) && NUMERIC_PATTERN.matcher(value).matches() && value.length() < NUMBER_MAX_LENGTH;}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public Rectangle[] computeGaps(){  ArrayList<Rectangle> ret=new ArrayList<>();  Rectangle gap=new Rectangle();  for (int i=0; i < mRectList.length; i++) {    Rectangle rectangleA=mRectList[i];    for (int j=i + 1; j < mRectList.length; j++) {      Rectangle rectangleB=mRectList[j];      boolean viable=calculateGap(rectangleA,rectangleB,gap);      if (viable) {        for (int k=0; k < mRectList.length; k++) {          if (k != j && k != i) {            if (gap.intersects(mRectList[k])) {              viable=false;              break;            }          }        }      }      if (viable) {        ret.add(new Rectangle(gap));      }    }  }  return ret.toArray(new Rectangle[ret.size()]);}  }
class C{  public static <R>Observable<R> ifThen(BooleanSupplier condition,ObservableSource<? extends R> then,Scheduler scheduler){  return ifThen(condition,then,Observable.<R>empty().subscribeOn(scheduler));}  }
class C{  private int readSkipWs() throws IOException {  for (; ; ) {    int c=_in.read();    if (c == -1 || c > ' ') {      return c;    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("addSample");  Set<Pair<String,String>> sampleAndSources=new HashSet<>();  do {    String sampleName="ALL";    if (np.peekMatchIgnoreCase("sample")) {      np.matchIgnoreCase("sample=");      sampleName=np.getWordRespectCase();    }    np.matchIgnoreCase("source=");    String source=np.getWordFileNamePunctuation();    sampleAndSources.add(new Pair<>(sampleName,source));  } while (np.peekMatchAnyTokenIgnoreCase("sample source"));  boolean overwrite=false;  if (np.peekMatchIgnoreCase("overwrite")) {    np.matchIgnoreCase("overwrite=");    overwrite=np.getBoolean();  }  np.matchIgnoreCase(";");  final SamplesViewer samplesViewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);  if (samplesViewer != null)   samplesViewer.getSamplesTable().getDataGrid().save(samplesViewer.getSampleAttributeTable(),null);  LinkedList<String> skipped=new LinkedList<>();  Document doc=((Director)getDir()).getDocument();  int count=0;  for (  Pair<String,String> pair : sampleAndSources) {    String sampleName=pair.get1();    String source=pair.get2();    if (Basic.isInteger(source)) {      Director sourceDir=(Director)ProjectManager.getProject(Basic.parseInt(source));      if (sourceDir == null)       throw new IOException("Document not found (pid=" + source + ")");      if (!sampleName.equalsIgnoreCase("ALL") && !sourceDir.getDocument().getSampleNames().contains(sampleName))       throw new IOException("Sample not found in document (pid=" + source + "): "+ sampleName);      if (sampleName.equalsIgnoreCase("ALL")) {        for (        String sample : sourceDir.getDocument().getSampleNames()) {          if (!overwrite && doc.getSampleNames().contains(sample)) {            skipped.add(sample);          } else {            doc.addSample(sample,sourceDir.getDocument());            count++;          }        }      } else {        if (!overwrite && doc.getSampleNames().contains(sampleName)) {          skipped.add(sampleName);        } else {          doc.addSample(sampleName,sourceDir.getDocument());          count++;        }      }    } else {      if (!(new File(source)).isFile())       throw new IOException("File not found: " + source);      Director sourceDir=Director.newProject();      try {        sourceDir.executeImmediately("open file='" + source + "';update;",sourceDir.getMainViewer().getCommandManager());        if (!sampleName.equalsIgnoreCase("ALL") && !sourceDir.getDocument().getSampleNames().contains(sampleName))         throw new IOException("Sample not found in document (pid=" + source + "): "+ sampleName);        if (sampleName.equalsIgnoreCase("ALL")) {          for (          String sample : sourceDir.getDocument().getSampleNames()) {            if (!overwrite && doc.getSampleNames().contains(sample)) {              skipped.add(sample);            } else {              doc.addSample(sample,sourceDir.getDocument());              count++;            }          }        } else {          if (!overwrite && doc.getSampleNames().contains(sampleName)) {            skipped.add(sampleName);          } else {            doc.addSample(sampleName,sourceDir.getDocument());            count++;          }        }      }  finally {        sourceDir.close();      }    }  }  if (skipped.size() > 0) {    NotificationsInSwing.showWarning(getViewer().getFrame(),String.format("Skipped %d samples because their names are already present, e.g.: %s",skipped.size(),skipped.iterator().next()));  }  if (count > 0) {    doc.setDirty(true);    if (samplesViewer != null)     samplesViewer.getSamplesTable().getDataGrid().load(doc.getSampleAttributeTable());    try {      doc.processReadHits();      NotificationsInSwing.showInformation(getViewer().getFrame(),String.format("Added %d reads to file '%s'",count,doc.getMeganFile().getName()));    } catch (    CanceledException e) {      Basic.caught(e);    }    ((Director)getDir()).getMainViewer().setDoReInduce(true);  }}  }
class C{  public static TableModel findPragmaTableInfo(String tableName,SQLiteDatabase db){  if (isTableExists(tableName,db)) {    List<String> uniqueColumns=findUniqueColumns(tableName,db);    TableModel tableModelDB=new TableModel();    tableModelDB.setTableName(tableName);    String checkingColumnSQL="pragma table_info(" + tableName + ")";    Cursor cursor=null;    try {      cursor=db.rawQuery(checkingColumnSQL,null);      if (cursor.moveToFirst()) {        do {          ColumnModel columnModel=new ColumnModel();          String name=cursor.getString(cursor.getColumnIndexOrThrow("name"));          String type=cursor.getString(cursor.getColumnIndexOrThrow("type"));          boolean nullable=cursor.getInt(cursor.getColumnIndexOrThrow("notnull")) != 1;          boolean unique=uniqueColumns.contains(name);          String defaultValue=cursor.getString(cursor.getColumnIndexOrThrow("dflt_value"));          columnModel.setColumnName(name);          columnModel.setColumnType(type);          columnModel.setIsNullable(nullable);          columnModel.setIsUnique(unique);          if (defaultValue != null) {            defaultValue=defaultValue.replace("'","");          } else {            defaultValue="";          }          columnModel.setDefaultValue(defaultValue);          tableModelDB.addColumnModel(columnModel);        } while (cursor.moveToNext());      }    } catch (    Exception e) {      e.printStackTrace();      throw new DatabaseGenerateException(e.getMessage());    } finally {      if (cursor != null) {        cursor.close();      }    }    return tableModelDB;  } else {    throw new DatabaseGenerateException(DatabaseGenerateException.TABLE_DOES_NOT_EXIST_WHEN_EXECUTING + tableName);  }}  }
class C{  public Application createJmxApplication(String connectionString,String displayName,EnvironmentProvider provider,boolean persistent) throws JmxApplicationException {  String username=getUsername(provider);  String suggestedName=JmxApplicationProvider.getSuggestedName(displayName,connectionString,username);  return createJmxApplicationImpl(connectionString,displayName,suggestedName,provider,persistent,false);}  }
class C{  public void clearDeclinedPaymentMethods(Delegator delegator){  String orderId=this.getOrderId();  if (UtilValidate.isNotEmpty(orderId)) {    try {      List<GenericValue> declinedPaymentMethods=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderId",orderId,"statusId","PAYMENT_DECLINED").queryList();      if (!UtilValidate.isEmpty(declinedPaymentMethods)) {        List<String> paymentMethodIdsToRemove=new ArrayList<String>();        for (        GenericValue opp : declinedPaymentMethods) {          paymentMethodIdsToRemove.add(opp.getString("paymentMethodId"));        }        clearPaymentMethodsById(paymentMethodIdsToRemove);      }    } catch (    GenericEntityException ex) {      Debug.logError("Unable to remove declined payment methods from cart due to " + ex.getMessage(),module);      return;    }  }}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public static boolean isSupported(DataFlavor source,DataFlavor destination){  if (supportedMap.isEmpty()) {    populateSupportedMap();  }  List<DataFlavor> list=supportedMap.get(destination);  if (list != null) {    return list.contains(source);  }  return false;}  }
class C{  private TakeModifiers(){}  }
class C{  public Builder addScanRange(String groupId,String tokenRangeId,ScanRange scanRange){  ImmutableList.Builder<ScanRange> tokenRangeScanRanges=_scanRangesByGroupAndAndTokenRange.get(groupId,tokenRangeId);  if (tokenRangeScanRanges == null) {    tokenRangeScanRanges=ImmutableList.builder();    _scanRangesByGroupAndAndTokenRange.put(groupId,tokenRangeId,tokenRangeScanRanges);  }  tokenRangeScanRanges.add(scanRange);  return this;}  }
class C{  public boolean hasColumn(String columnName){  Integer idx=columnNamesIndex.get(columnName);  return idx != null;}  }
class C{  public static <T>Response<T> startRequestSync(IParserRequest<T> request){  return startRequestSync(DiskCacheStore.INSTANCE,request);}  }
class C{  public static void insertMagicString(JTextComponent target,int dot,String toInsert) throws BadLocationException {  Document doc=target.getDocument();  if (toInsert.indexOf('|') >= 0) {    int ofst=toInsert.indexOf('|');    int ofst2=toInsert.indexOf('|',ofst + 1);    toInsert=toInsert.replace("|","");    doc.insertString(dot,toInsert,null);    dot=target.getCaretPosition();    final int strLength=toInsert.length();    if (ofst2 > 0) {      target.select(dot + ofst - strLength,dot + ofst2 - strLength - 1);    } else {      target.setCaretPosition(dot + ofst - strLength);    }  } else {    doc.insertString(dot,toInsert,null);  }}  }
class C{  public String writeDataFile() throws DataFileException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  writeDataFile(bos);  String outString=bos.toString();  try {    if (bos != null)     bos.close();  } catch (  IOException e) {    Debug.logWarning(e,module);  }  return outString;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  void consolidateWithShadowEntry(TypeData pType,IEntryCacheInfo pmaster,boolean restoreOriginalValues,boolean onError){  ShadowEntryHolder shadowEh=pmaster.getEntryHolder(this).getShadow();  int numIndexsesUpdated=0;  IEntryData deleteEntryData;  IEntryData keptEntryData;  ArrayList<IObjectInfo<IEntryCacheInfo>> deleteBackrefs;  if (restoreOriginalValues) {    deleteEntryData=pmaster.getEntryHolder(this).getEntryData();    if (shadowEh.getNumOfLeaseUpdates() > 0) {      _leaseManager.unregister(pmaster,deleteEntryData.getExpirationTime());      pmaster.setLeaseManagerListRefAndPosition(shadowEh.getLeaseManagerListRef(),shadowEh.getLeaseManagerPosition());    }    pType.prepareForUpdatingIndexValues(this,pmaster,shadowEh.getEntryData());    deleteBackrefs=pmaster.getBackRefs();    keptEntryData=shadowEh.getEntryData();    pmaster.setBackRefs(shadowEh.getBackRefs());    pmaster.getEntryHolder(this).restoreUpdateXtnRollback(shadowEh.getEntryData());  } else {    if (shadowEh.getNumOfLeaseUpdates() > 0)     _leaseManager.unregister(shadowEh,shadowEh.getEntryData().getExpirationTime());    deleteBackrefs=shadowEh.getBackRefs();    IEntryHolder keptEh=pmaster.getEntryHolder(this);    keptEntryData=keptEh.getEntryData();    deleteEntryData=shadowEh.getEntryData();    keptEh.setOtherUpdateUnderXtnEntry(null);  }  int refpos=1;  if (pType.hasIndexes()) {    final TypeDataIndex[] indexes=pType.getIndexes();    for (    TypeDataIndex index : indexes) {      if (index.disableIndexUsageForOperation(pType,pmaster.getLatestIndexCreationNumber()))       continue;      numIndexsesUpdated++;      Object deleteValue=index.getIndexValue(deleteEntryData);      boolean useOnError=onError && shadowEh.getNumOfIndexesUpdated() < numIndexsesUpdated;      if (useOnError) {        try {          refpos=index.consolidateIndexValueOnXtnEnd(pmaster.getEntryHolder(this),pmaster,index.getIndexValue(keptEntryData),deleteValue,deleteBackrefs,refpos,true);        } catch (        Exception ex) {        }      } else       refpos=index.consolidateIndexValueOnXtnEnd(pmaster.getEntryHolder(this),pmaster,index.getIndexValue(keptEntryData),deleteValue,deleteBackrefs,refpos,false);    }    for (    QueryExtensionIndexManagerWrapper queryExtensionIndexManager : pType.getForeignQueriesHandlers()) {      try {        queryExtensionIndexManager.removeEntry(new SpaceServerEntryImpl(pmaster,this),restoreOriginalValues ? QueryExtensionIndexRemoveMode.ON_XTN_UPDATED_ROLLBACK : QueryExtensionIndexRemoveMode.ON_XTN_UPDATED_COMMIT,deleteEntryData.getVersion());      } catch (      Exception ex) {        throw new RuntimeException("Remove entry to foreign index failed",ex);      }    }  }  shadowEh.setDeleted(true);}  }
class C{  public Principal(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,450,300);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  contentPane.setLayout(new BorderLayout(0,0));  setContentPane(contentPane);}  }
class C{  public static void e(String tag,String msg){  if (LOG_ENABLE) {    Log.e(tag,buildMsg(msg));  }}  }
class C{  public Iterator<Edge> edgesInto(MethodOrMethodContext m){  return new CallersOfMethodIterator(m);}  }
class C{  private void pushAnnotatorsRef(String values){  annotatorsRef.push(annotatorsRef.peek());  setAnnotatorsRef(values);}  }
class C{  private List<InputSplit> readEntries(JsonReader reader,JobConf job) throws IOException {  List<Path> paths=new ArrayList<Path>();  Gson gson=DynamoDBUtil.getGson();  reader.beginArray();  while (reader.hasNext()) {    ExportManifestEntry entry=gson.fromJson(reader,ExportManifestEntry.class);    paths.add(new Path(entry.url));  }  reader.endArray();  log.info("Number of S3 files: " + paths.size());  if (paths.size() == 0) {    return Collections.emptyList();  }  int filesPerSplit=(int)Math.ceil((double)(paths.size()) / Math.min(MAX_NUM_SPLITS,paths.size()));  int numSplits=(int)Math.ceil((double)(paths.size()) / filesPerSplit);  long[] fileMaxLengths=new long[filesPerSplit];  Arrays.fill(fileMaxLengths,Long.MAX_VALUE / filesPerSplit);  long[] fileStarts=new long[filesPerSplit];  Arrays.fill(fileStarts,0);  List<InputSplit> splits=new ArrayList<InputSplit>(numSplits);  for (int i=0; i < numSplits; i++) {    int start=filesPerSplit * i;    int end=filesPerSplit * (i + 1);    if (i == (numSplits - 1)) {      end=paths.size();    }    Path[] pathsInOneSplit=paths.subList(start,end).toArray(new Path[end - start]);    CombineFileSplit combineFileSplit=new CombineFileSplit(job,pathsInOneSplit,fileStarts,fileMaxLengths,new String[0]);    splits.add(combineFileSplit);  }  return splits;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200306,skillname);}  }
class C{  protected SchemaGrammar findGrammar(XSDDescription desc,boolean ignoreConflict){  SchemaGrammar sg=fGrammarBucket.getGrammar(desc.getTargetNamespace());  if (sg == null) {    if (fGrammarPool != null) {      sg=(SchemaGrammar)fGrammarPool.retrieveGrammar(desc);      if (sg != null) {        if (!fGrammarBucket.putGrammar(sg,true,ignoreConflict)) {          reportSchemaWarning("GrammarConflict",null,null);          sg=null;        }      }    }  }  return sg;}  }
class C{  protected void addOnPropertyChangedCallback(Observable.OnPropertyChangedCallback callback){  onPropertyChangedCallbacks.add(callback);  getViewModel().addOnPropertyChangedCallback(callback);}  }
class C{  public void execute(final LoaderTask task){  tasks.add(task);  processQueue();}  }
class C{  public static PinnedKeyspaceBuilder pin(Keyspace keyspace){  return new PinnedKeyspaceBuilder(keyspace);}  }
class C{  @NotNull private static byte[] createRealJarArchive() throws IOException {  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  Closer closer=Closer.create();  Manifest manifest=new Manifest();  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");  JarOutputStream jar=closer.register(new JarOutputStream(buffer,manifest));  try {    jar.putNextEntry(new JarEntry("/dummy.txt"));    jar.write(TOP_LEVEL_BUILD_GRADLE.getBytes());    closer.close();    return buffer.toByteArray();  } catch (  IOException e) {    closer.close();    throw closer.rethrow(e);  }}  }
class C{  private void processSplit(Node v,NodeArray node2taxa,int outGroupTaxonId,Split split,PhyloTree tree){  BitSet partB=split.getPartNotContainingTaxon(outGroupTaxonId);  double weight=split.getWeight();  boolean done=false;  while (!done) {    List edgesToPush=new LinkedList();    for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {      Node w=f.getTarget();      BitSet nodeSet=(BitSet)node2taxa.get(w);      if (nodeSet.intersects(partB))       edgesToPush.add(f);    }    if (edgesToPush.size() == 1) {      Edge f=(Edge)edgesToPush.get(0);      v=f.getTarget();    } else     if (edgesToPush.size() > 1) {      Node u=tree.newNode();      node2taxa.set(u,partB);      Edge h=tree.newEdge(v,u);      tree.setWeight(h,weight);      for (      Object anEdgesToPush1 : edgesToPush) {        Edge f=(Edge)anEdgesToPush1;        Node w=f.getTarget();        Edge g=tree.newEdge(u,w);        tree.setWeight(g,tree.getWeight(f));      }      for (      Object anEdgesToPush : edgesToPush) {        Edge f=(Edge)anEdgesToPush;        tree.deleteEdge(f);      }      done=true;    } else {      throw new RuntimeException("0 taxa in splitsToTreeRec");    }  }}  }
class C{  public boolean isSyllableBoundary(List syllablePhones,String[] wordPhones,int currentWordPhone){  if (currentWordPhone >= wordPhones.length) {    return true;  } else   if (isSilence(wordPhones[currentWordPhone])) {    return true;  } else   if (!hasVowel(wordPhones,currentWordPhone)) {    return false;  } else   if (!hasVowel(syllablePhones)) {    return false;  } else   if (isVowel(wordPhones[currentWordPhone])) {    return true;  } else   if (currentWordPhone == (wordPhones.length - 1)) {    return false;  } else {    int p, n, nn;    p=getSonority((String)syllablePhones.get(syllablePhones.size() - 1));    n=getSonority(wordPhones[currentWordPhone]);    nn=getSonority(wordPhones[currentWordPhone + 1]);    return (p <= n) && (n <= nn);  }}  }
class C{  public static boolean canCreateMP3(){  return AudioSystem.isConversionSupported(getMP3AudioFormat(),Voice.AF22050);}  }
class C{  public InvalidConfigurationException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Heal_TO_ME(int num0){  return new SM_SYSTEM_MESSAGE(1201198,num0);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  @Override public void removeEntryIndexedField(IEntryHolder eh,Object fieldValue,IEntryCacheInfo pEntry,IObjectInfo oi){  if (_index.isUniqueIndex()) {    if (!getUniqueEntriesStore().remove(fieldValue,pEntry))     ;{      Object other=_index.considerValueClone() ? _index.cloneIndexValue(fieldValue,pEntry.getEntryHolder(_index.getCacheManager())) : fieldValue;      if (other != fieldValue && (fieldValue.hashCode() != other.hashCode() || !fieldValue.equals(other) || ((Comparable)fieldValue).compareTo((Comparable)other) != 0))       throw new RuntimeException("Entry Class: " + pEntry.getClassName() + " - Wrong hashCode() or equals() or Comparable.compareTo() implementation of "+ fieldValue.getClass()+ " class field, or field value changed while entry stored in space.");    }  } else {    removeNonUniqueIndexedField(eh,fieldValue,pEntry,oi);  }}  }
class C{  public RecognitionRequest addCustomOperation(String customOperation){  operations.add(customOperation);  return this;}  }
class C{  @Override public boolean accept(File dir,String name){  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {      return true;    }  }  return false;}  }
class C{  public SQLProcessor(Delegator delegator,GenericHelperInfo helperInfo){  this.delegator=delegator;  this.helperInfo=helperInfo;  this._manualTX=true;}  }
class C{  protected void createRenderers(CombinedChart chart,ChartAnimator animator,ViewPortHandler viewPortHandler){  mRenderers.clear();  DrawOrder[] orders=chart.getDrawOrder();  for (  DrawOrder order : orders) {switch (order) {case BAR:      if (chart.getBarData() != null)       mRenderers.add(new BarChartRenderer(chart,animator,viewPortHandler));    break;case BUBBLE:  if (chart.getBubbleData() != null)   mRenderers.add(new BubbleChartRenderer(chart,animator,viewPortHandler));break;case LINE:if (chart.getLineData() != null) mRenderers.add(new LineChartRenderer(chart,animator,viewPortHandler));break;case CANDLE:if (chart.getCandleData() != null) mRenderers.add(new CandleStickChartRenderer(chart,animator,viewPortHandler));break;case SCATTER:if (chart.getScatterData() != null) mRenderers.add(new ScatterChartRenderer(chart,animator,viewPortHandler));break;}}}  }
class C{  public PhotosPutTagQuery putTag(UserActor actor,int photoId,int userId){  return new PhotosPutTagQuery(getClient(),actor,photoId,userId);}  }
class C{  protected CascadedTable(){  this(TableTuple.class);}  }
class C{  public boolean isNOWriteLeaseMode(){  return m_NOWriteLeaseMode;}  }
class C{  private UByte(String value) throws NumberFormatException {  this.value=rangeCheck(Short.parseShort(value));}  }
class C{  public LessSpacePredicate(Comparable<?> expectedValue,Comparator<?> comparator){  super(expectedValue,comparator);}  }
class C{  public GoogleAutoCredentialProvider(OkHttpClient httpClient,String username,String password) throws LoginFailedException, RemoteServerException {  this.gpsoauth=new Gpsoauth(httpClient);  this.username=username;  this.tokenInfo=login(username,password);  this.time=new SystemTimeImpl();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_GIVEUP(String value0){  return new SM_SYSTEM_MESSAGE(1300618,value0);}  }
class C{  private static int calculateInSampleSizeByMaxTextureSize(int width,int height){  int inSampleSize=1;  if (mMaxTextureSize == 0) {    mMaxTextureSize=getMaxTextureSize();  }  if (mMaxTextureSize > 0) {    while ((height / inSampleSize) > mMaxTextureSize || (width / inSampleSize) > mMaxTextureSize) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  public void sync() throws CanceledException {  if (!inSync) {    inSync=true;    setChartTitle(cName + " rarefaction plot for " + doc.getTitle());    for (    String name : doc.getSampleNames()) {      ((Plot2DDrawer)getChartDrawer()).setShowLines(name,true);      ((Plot2DDrawer)getChartDrawer()).setShowDots(name,true);    }    Map<String,Collection<Pair<Number,Number>>> name2counts=computeCounts(doc,1,parentViewer,doc.getProgressListener());    IPlot2DData chartData=(IPlot2DData)getChartData();    chartData.clear();    chartData.setDataSetName(doc.getTitle());    for (    String name : doc.getSampleNames())     chartData.setDataForSeries(name,name2counts.get(name));    getChartData().setSeriesLabel("Number of reads sampled from leaves");    getChartData().setCountsLabel("Number of leaves in " + cName + " tree");    super.sync();    inSync=false;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ShapeChange_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200712,skillcaster,value0,skillname);}  }
class C{  public String[] computeAlignment(String query){  if (getCigar().getCigarElements().size() == 0) {    return new String[]{"No alignment","mapQ=0 (not uniquely mapped)",""};  }  final String[] pair=computeAlignmentPair(query);  if (pair[0].equals("No alignment"))   return pair;  final String gappedQuerySequence=pair[0];  final String gappedReferenceSequence=pair[1];  final StringBuilder midBuffer=new StringBuilder();  int top=Math.min(gappedQuerySequence.length(),gappedReferenceSequence.length());switch (mode) {case BlastX:case BlastP:    for (int i=0; i < top; i++) {      byte a=(byte)gappedQuerySequence.charAt(i);      byte b=(byte)gappedReferenceSequence.charAt(i);      if (Character.isLetter(a) && Character.isLetter(b)) {        if (a == b)         midBuffer.append((char)a); else         if (BlosumMatrix.getBlosum62().getScore(a,b) > 0)         midBuffer.append('+'); else         midBuffer.append(' ');      } else       midBuffer.append(" ");    }  break;default :case BlastN:for (int i=0; i < top; i++) {  if (Character.isLetter(gappedQuerySequence.charAt(i)) && gappedQuerySequence.charAt(i) == gappedReferenceSequence.charAt(i))   midBuffer.append("|"); else   if (isGap(gappedQuerySequence.charAt(i)) || isGap(gappedReferenceSequence.charAt(i)))   midBuffer.append(" "); else   midBuffer.append(" ");}}return new String[]{gappedQuerySequence,midBuffer.toString(),gappedReferenceSequence};}  }
class C{  public static VideoQuality determineClosestSupportedResolution(Camera.Parameters parameters,VideoQuality quality){  VideoQuality v=quality.clone();  int minDist=Integer.MAX_VALUE;  String supportedSizesStr="Supported resolutions: ";  List<Size> supportedSizes=parameters.getSupportedPreviewSizes();  for (Iterator<Size> it=supportedSizes.iterator(); it.hasNext(); ) {    Size size=it.next();    supportedSizesStr+=size.width + "x" + size.height+ (it.hasNext() ? ", " : "");    int dist=Math.abs(quality.resX - size.width);    if (dist < minDist) {      minDist=dist;      v.resX=size.width;      v.resY=size.height;    }  }  Log.v(TAG,supportedSizesStr);  if (quality.resX != v.resX || quality.resY != v.resY) {    Log.v(TAG,"Resolution modified: " + quality.resX + "x"+ quality.resY+ "->"+ v.resX+ "x"+ v.resY);  }  return v;}  }
class C{  public final void removeDescription(final Object pValue){  if (pValue != null) {    this.descriptions.remove(pValue);  }}  }
class C{  public static Schema schemaFor(List<String> fieldNames,List<String> fieldTypes){  FieldAssembler<Schema> assembler=SchemaBuilder.record("t").fields();  for (int i=0; i < fieldNames.size(); i++) {    String fieldName=compatibleFieldName(fieldNames.get(i));    String fieldType=fieldTypes.get(i);switch (fieldType) {case "string":      assembler=assembler.optionalString(fieldName);    break;case "float":  assembler=assembler.optionalFloat(fieldName);break;case "double":assembler=assembler.optionalDouble(fieldName);break;case "int":assembler=assembler.optionalInt(fieldName);break;case "long":assembler=assembler.optionalLong(fieldName);break;case "boolean":assembler=assembler.optionalBoolean(fieldName);break;default :throw new RuntimeException("Unsupported provided field type: " + fieldType);}}return assembler.endRecord();}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml","org/activiti/engine/test/api/event/simpleProcess.bpmn20.xml"}) public void testProcessDefinitionScopedListener() throws Exception {  ProcessDefinition firstDefinition=repositoryService.createProcessDefinitionQuery().deploymentId(deploymentIdFromDeploymentAnnotation).processDefinitionKey("oneTaskProcess").singleResult();  assertNotNull(firstDefinition);  ProcessDefinition secondDefinition=repositoryService.createProcessDefinitionQuery().deploymentId(deploymentIdFromDeploymentAnnotation).processDefinitionKey("simpleProcess").singleResult();  assertNotNull(firstDefinition);  TestActivitiEventListener listener=new TestActivitiEventListener();  BpmnModel bpmnModel=repositoryService.getBpmnModel(firstDefinition.getId());  assertNotNull(bpmnModel);  ((ActivitiEventSupport)bpmnModel.getEventSupport()).addEventListener(listener);  ProcessInstance processInstance=runtimeService.startProcessInstanceById(firstDefinition.getId());  assertNotNull(processInstance);  assertFalse(listener.getEventsReceived().isEmpty());  listener.clearEventsReceived();  ProcessInstance otherInstance=runtimeService.startProcessInstanceById(secondDefinition.getId());  assertNotNull(otherInstance);  assertTrue(listener.getEventsReceived().isEmpty());}  }
class C{  public static ResourcesPoet create(){  init();  Document document=sDocumentBuilder.newDocument();  Element resources=document.createElement(ELEMENT_RESOURCES);  document.appendChild(resources);  return create(document,resources);}  }
class C{  private void beforeName() throws IOException {  int context=peek();  if (context == NONEMPTY_OBJECT) {    out.write(',');  } else   if (context != EMPTY_OBJECT) {    throw new IllegalStateException("Nesting problem.");  }  newline();  replaceTop(DANGLING_NAME);}  }
class C{  public static Sort of(String name,SortType type){  return new Sort(name,type);}  }
class C{  public ExpressionSubPanel(ExpressionFilterInterface parent){  this.parent=parent;  createUI();}  }
class C{  public final void writeInt(final int i){  baos.write((byte)(i & 0xFF));  baos.write((byte)((i >>> 8) & 0xFF));  baos.write((byte)((i >>> 16) & 0xFF));  baos.write((byte)((i >>> 24) & 0xFF));}  }
class C{  @Override public String toString(){  return getName() + "=" + "\""+ getValue()+ "\"";}  }
class C{  default String entityRole(String resourceId){  return "has-" + resourceId + "-owner";}  }
class C{  public VideoGetCatalogQuery(VkApiClient client,UserActor actor){  super(client,"video.getCatalog",GetCatalogResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private int endOfList(ASTNode stmtList){  ASTNode child=stmtList.getLastChildNode();  while (child != null) {    IElementType type=child.getElementType();    if (type != TokenType.WHITE_SPACE && type != BuildToken.fromKind(TokenKind.NEWLINE)) {      return child.getTextRange().getEndOffset();    }    child=child.getTreePrev();  }  return stmtList.getTextRange().getEndOffset();}  }
class C{  public void interrupt(){  _interrupted=true;  for (  SingleProducer producer : _producers.values()) {    Iterator threads=producer.orderedThreadEventsMap.values().iterator();    while (threads.hasNext()) {      LockSupport.unpark((Thread)threads.next());      threads.remove();    }  }}  }
class C{  public String checkin(IResource[] resources,final String comment,boolean keepLocks,final int depth,IProgressMonitor progress) throws TeamException {  CheckinResourcesCommand command=new CheckinResourcesCommand(getSVNWorkspaceRoot(),resources,depth,comment,keepLocks);  command.run(progress);  return command.getPostCommitError();}  }
class C{  public void updateCurrentParsys(String parsys){  scenarioContext.add(ContextKeys.CURRENT_PARSYS,parsys);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyNot(String propertyName,ISpacePredicate predicate){  return property(propertyName,not(predicate));}  }
class C{  public void addResDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myResDirectories.add(directory);}  }
class C{  public static void clearRegistry(){  registry.clear();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200479,skillcaster,skilltarget,skillname);}  }
class C{  public static void validateInputParameters(ImfUtilityInputParameters inputParameters) throws ArgumentValidationException {  File impDirectory=inputParameters.getImpDirectoryFile();  if (impDirectory == null) {    throw new ArgumentValidationException("IMP directory must be specified either as a command line argument or in config.xml");  }  if (!impDirectory.isDirectory()) {    throw new ArgumentValidationException(String.format("IMP directory '%s' must be an existing folder",impDirectory.getAbsolutePath()));  }  File cplFile=inputParameters.getCplFile();  if (cplFile == null) {    throw new ArgumentValidationException("CPL file must be specified either as a command line argument or in config.xml");  }  if (!cplFile.isFile()) {    throw new ArgumentValidationException(String.format("CPL file '%s' must be an existing file",cplFile.getAbsolutePath()));  }  File workingDir=inputParameters.getWorkingDirFile();  if (workingDir == null) {    throw new ArgumentValidationException("Working directory must be specified either as a command line argument or in config.xml");  }}  }
class C{  boolean removeDisplay(Display display){  return m_displays.remove(display);}  }
class C{  protected boolean hasXIncludeNamespace(QName element){  return element.uri == XINCLUDE_NS_URI || fNamespaceContext.getURI(element.prefix) == XINCLUDE_NS_URI;}  }
class C{  public static boolean isEmptyTag(String tagName){  return isElement(tagName,EMPTY);}  }
class C{  public Size(int width,int height){  mWidth=width;  mHeight=height;}  }
class C{  public RandomAdaptor(RandomGenerator randomGenerator){  MathUtils.checkNotNull(randomGenerator);  this.randomGenerator=randomGenerator;}  }
class C{  public static final Vector2[] cleanse(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointArray"));  List<Vector2> pointList=Arrays.asList(points);  List<Vector2> resultList=Geometry.cleanse(pointList);  Vector2[] result=new Vector2[resultList.size()];  resultList.toArray(result);  return result;}  }
class C{  @Override public boolean isCancelable(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_INPUT(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400008,value1,value0);}  }
class C{  public boolean node_elim_opt(){  return soot.PhaseOptions.getBoolean(options,"node-elim-opt");}  }
class C{  public String makeLinkAuto(HttpServletRequest request,HttpServletResponse response,String url,Boolean absPath,Boolean interWebapp,String webSiteId,Boolean controller,Boolean fullPath,Boolean secure,Boolean encode){  boolean absControlPathChecked=false;  boolean absContextPathChecked=false;  if (interWebapp == null) {    interWebapp=Boolean.FALSE;  }  if (absPath == null) {    if (interWebapp) {      if (webSiteId != null && !webSiteId.isEmpty()) {        absPath=false;      } else {        absPath=true;      }    } else {      absPath=false;    }  }  WebappInfo webappInfo=null;  if (interWebapp) {    if (webSiteId != null && !webSiteId.isEmpty()) {      try {        webappInfo=WebAppUtil.getWebappInfoFromWebsiteId(webSiteId);      } catch (      Exception e) {        Debug.logError(e,module);        return null;      }    } else {      try {        webappInfo=WebAppUtil.getWebappInfoFromPath(url);      } catch (      Exception e) {        Debug.logError(e,"Scipio: Could not get webapp info from absolute path '" + url + "'",module);        return null;      }      absContextPathChecked=true;    }  } else {    try {      webappInfo=WebAppUtil.getWebappInfoFromRequest(request);    } catch (    Exception e) {      Debug.logError(e,"Scipio: Could not get webapp info from request (url: " + url + ")",module);      return null;    }  }  String contextPath=webappInfo.getContextRoot();  if (!contextPath.endsWith("/")) {    contextPath+="/";  }  String controlPath=null;  if (controller == null) {    if (absPath) {      controlPath=WebAppUtil.getControlServletPathSafeSlash(webappInfo);      controller=(controlPath != null && url.startsWith(controlPath));      absControlPathChecked=true;    } else {      controller=Boolean.TRUE;    }  }  if (controller && controlPath == null) {    controlPath=WebAppUtil.getControlServletPathSafeSlash(webappInfo);    if (controlPath == null) {      Debug.logError("Scipio: In makeLinkAuto, trying to make a controller " + "link for a webapp that has no valid controller (" + webappInfo.getName() + ")",module);      return null;    }  }  if (absPath) {    if (controller) {      if (!absControlPathChecked) {        if (!url.startsWith(controlPath)) {          Debug.logError("Scipio: In makeLinkAuto, trying to make a controller " + "link using absolute path url, but prefix does not match (url: " + url + ", control path: "+ controlPath+ ")",module);          return null;        }        absControlPathChecked=true;      }    } else {      if (!absContextPathChecked) {        if (!url.startsWith(contextPath)) {          Debug.logError("Scipio: In makeLinkAuto, trying to make a webapp " + "link using absolute path url, but context root does not match (url: " + url + ", context path: "+ contextPath+ ")",module);          return null;        }        absContextPathChecked=true;      }    }  }  String relUrl;  if (absPath) {    if (controller) {      relUrl=url.substring(controlPath.length());    } else {      relUrl=url.substring(contextPath.length());    }  } else {    relUrl=url;  }  return makeLink(request,response,relUrl,interWebapp,webappInfo,controller,fullPath,secure,encode);}  }
class C{  public void afterOperationsBatchSynchronization(OperationsBatchData batchData){}  }
class C{  public static void checkAndCreatePersistNode(ZooKeeper zkc,String path) throws KeeperException, InterruptedException {  if (zkc.exists(path,false) == null) {    try {      zkc.create(path,new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);      LOG.info("created znode, path={}",path);    } catch (    Exception e) {      LOG.warn("create znode failed, path={} : {}",path,e.getMessage(),e);    }  }}  }
class C{  public void removeDetailsView(DetailsView detailsView){  DisplayArea displayArea=getDisplayArea(detailsView.getTab());  if (displayArea != null)   displayArea.removeTab(detailsView.getTab());}  }
class C{  public boolean removeByObject(T obj){  lock.lock();  try {    return removeByObject_impl(obj);  }  finally {    lock.unlock();  }}  }
class C{  public LeafNode locateLeaf(DataType key,boolean findFirst){  throw new BPlusTreeException("Not Implemented");}  }
class C{  public VideoAddQuery targetId(Integer value){  return unsafeParam("target_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysHit_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200633,skillcaster,skillname);}  }
class C{  public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){  String type=String.format("multifield#%s#%s",index,itemType);  String label=String.format("%s#%s",multifieldLabel,itemLabel);  config.add(new ConfigurationEntry(currentTab,type,label,value));  return this;}  }
class C{  @Override protected void configurePipeline(){  super.configurePipeline();  fDTDScanner.setDTDHandler(fDTDProcessor);  fDTDProcessor.setDTDSource(fDTDScanner);  fDTDProcessor.setDTDHandler(fXIncludeHandler);  fXIncludeHandler.setDTDSource(fDTDProcessor);  fXIncludeHandler.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fXIncludeHandler);  }  XMLDocumentSource prev=null;  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    prev=fSchemaValidator.getDocumentSource();  } else {    prev=fLastComponent;    fLastComponent=fXIncludeHandler;  }  XMLDocumentHandler next=prev.getDocumentHandler();  prev.setDocumentHandler(fXIncludeHandler);  fXIncludeHandler.setDocumentSource(prev);  if (next != null) {    fXIncludeHandler.setDocumentHandler(next);    next.setDocumentSource(fXIncludeHandler);  }}  }
class C{  @NotNull public static ResizePolicy none(){  return ourNone;}  }
class C{  private FilenameUtils(){  super();}  }
class C{  public AWSIotTimeoutException(String message){  super(message);}  }
class C{  @Override public int size(){  int size=0;  for (Node<E> node=top.get(); node != null; node=node.next) {    if (node.get() != null) {      size++;    }  }  return size;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public MulticastRequest(String host,int port,String[] groups,ServiceID[] serviceIDs){  groups=(groups != null) ? (String[])groups.clone() : new String[0];  serviceIDs=(serviceIDs != null) ? (ServiceID[])serviceIDs.clone() : new ServiceID[0];  if (host == null || Arrays.asList(groups).contains(null) || Arrays.asList(serviceIDs).contains(null)) {    throw new NullPointerException();  }  if (port < 0 || port > 0xFFFF) {    throw new IllegalArgumentException("port out of range: " + port);  }  this.host=host;  this.port=port;  this.groups=groups;  this.serviceIDs=serviceIDs;}  }
class C{  public SourceSinkDefinition(SootMethodAndClass am,Set<AccessPathTuple> baseObjects,Set<AccessPathTuple>[] parameters,Set<AccessPathTuple> returnValues){  this.method=am;  this.baseObjects=baseObjects == null || baseObjects.isEmpty() ? null : baseObjects;  this.parameters=parameters;  this.returnValues=returnValues == null || returnValues.isEmpty() ? null : returnValues;}  }
class C{  public boolean canAddComponents(@Nullable List<NlComponent> toAdd,@NotNull NlComponent receiver,@Nullable NlComponent before){  if (before != null && before.getParent() != receiver) {    return false;  }  Object parentHandler=receiver.getViewHandler();  if (!(parentHandler instanceof ViewGroupHandler)) {    return false;  }  final ViewGroupHandler groupHandler=(ViewGroupHandler)parentHandler;  if (toAdd == null || toAdd.isEmpty()) {    return false;  }  for (  NlComponent component : toAdd) {    if (!groupHandler.acceptsChild(receiver,component)) {      return false;    }    ViewHandler handler=ViewHandlerManager.get(getProject()).getHandler(component);    if (handler != null && !handler.acceptsParent(receiver,component)) {      return false;    }    NlComponent same=receiver;    while (same != null) {      if (same == component) {        return false;      }      same=same.getParent();    }  }  return true;}  }
class C{  public BigReal(BigInteger val,MathContext mc){  d=new BigDecimal(val,mc);}  }
class C{  public static void checkConditionsCorrect(String... conditions){  if (conditions != null) {    int conditionsSize=conditions.length;    if (conditionsSize > 0) {      String whereClause=conditions[0];      int placeHolderSize=BaseUtility.count(whereClause,"?");      if (conditionsSize != placeHolderSize + 1) {        throw new DataSupportException(DataSupportException.UPDATE_CONDITIONS_EXCEPTION);      }    }  }}  }
class C{  public static boolean isFlagged(CharSequence text,int index){  if (index > INVALID_INDEX && index < text.length()) {    char c=text.charAt(index);    return c == SPACE || c == NEW_LINE || c == BOLD_FLAG || c == ITALIC_FLAG || c == STRIKE_FLAG;  }  return true;}  }
class C{  public static Optional<String[]> lookup(long code){  String[] desc=DESCRIPTIONS.get(code & 0xFFFF0000);  return Optional.ofNullable(desc);}  }
class C{  public String readString() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(65);    int type=this.dataIn.read();    if (type == _NULL) {      return null;    }    if (type == _STRING) {      return this.dataIn.readUTF();    }    if (type == _LONG) {      return Long.toString(this.dataIn.readLong());    }    if (type == _INT) {      return Integer.toString(this.dataIn.readInt());    }    if (type == _SHORT) {      return Short.toString(this.dataIn.readShort());    }    if (type == _BYTE) {      return Byte.toString(this.dataIn.readByte());    }    if (type == _FLOAT) {      return Float.toString(this.dataIn.readFloat());    }    if (type == _DOUBLE) {      return Double.toString(this.dataIn.readDouble());    }    if (type == _BOOLEAN) {      return Boolean.toString(this.dataIn.readBoolean());    }    if (type == _CHAR) {      return Character.toString(this.dataIn.readChar());    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a String type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  public LaguerreSolver(double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  public String inputDigit(char nextChar){  currentOutput=inputDigitWithOptionToRememberPosition(nextChar,false);  return currentOutput;}  }
class C{  private ColumnModel convertFieldToColumnModel(Field field){  String columnType=null;  String fieldType=field.getType().getName();  for (  OrmChange ormChange : typeChangeRules) {    columnType=ormChange.object2Relation(fieldType);    if (columnType != null) {      break;    }  }  boolean nullable=true;  boolean unique=false;  String defaultValue="";  Column annotation=field.getAnnotation(Column.class);  if (annotation != null) {    nullable=annotation.nullable();    unique=annotation.unique();    defaultValue=annotation.defaultValue();  }  ColumnModel columnModel=new ColumnModel();  columnModel.setColumnName(field.getName());  columnModel.setColumnType(columnType);  columnModel.setIsNullable(nullable);  columnModel.setIsUnique(unique);  columnModel.setDefaultValue(defaultValue);  return columnModel;}  }
class C{  private java.util.concurrent.Future<?> schedule(Runnable runnable,long delayMs){  closeLock.readLock().lock();  try {    if (closed) {      return null;    } else     if (delayMs > 0) {      return executorService.schedule(runnable,delayMs,TimeUnit.MILLISECONDS);    } else {      return executorService.submit(runnable);    }  } catch (  RejectedExecutionException ree) {    logger.error("Failed to schedule task {} in {} ms : ",new Object[]{runnable,delayMs,ree});    return null;  } finally {    closeLock.readLock().unlock();  }}  }
class C{  public static boolean isCategoryChildOf(ServletRequest request,String parentProductCategoryId,String productCategoryId){  return isCategoryChildOf((Delegator)request.getAttribute("delegator"),(LocalDispatcher)request.getAttribute("dispatcher"),parentProductCategoryId,productCategoryId);}  }
class C{  public AdsGetSuggestionsQueryWithRegions ids(String value){  return unsafeParam("ids",value);}  }
class C{  public static DoubleBuffer createDoubleBuffer(int size){  DoubleBuffer buf=ByteBuffer.allocateDirect(8 * size).order(ByteOrder.nativeOrder()).asDoubleBuffer();  buf.clear();  if (trackDirectMemory) {    trackingHash.put(buf,ref);  }  return buf;}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  private void initialize(Builder builder){  if (builder.prefs != null && !builder.flavors.isEmpty()) {    mPreferences=builder.prefs;    mFlavors=new ArrayList<>(builder.flavors);    if (builder.defaultFlavor != null) {      mDefaultFlavorIndex=mFlavors.indexOf(builder.defaultFlavor);    }    mSugarCone=new SugarCone();    mInitialized=true;  } else {    throw new IllegalStateException("SharedPreferences and at least one flavor must be set");  }}  }
class C{  @JsonIgnore public QueryContext fork(){  return new QueryContext(new HashMap<>(contextMap),this.totalQueries);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_BAN_ME(String value0){  return new SM_SYSTEM_MESSAGE(1300979,value0);}  }
class C{  public GroupsSetCallbackSettingsQuery wallReplyEdit(Boolean value){  return unsafeParam("wall_reply_edit",value);}  }
class C{  public CASCDistanceCalculator(String sPathToCasc) throws IOException {  PathToCasc=sPathToCasc;  Process p=Runtime.getRuntime().exec(PathToCasc);  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  public static int netType(Context context){  int type=NETWORK_TYPE_NONE;  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo mobileInfo=cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  NetworkInfo wifiInfo=cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  if (null != mobileInfo && mobileInfo.isConnected()) {    TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);    int netType=tm.getNetworkType();switch (netType) {case TelephonyManager.NETWORK_TYPE_GPRS:case TelephonyManager.NETWORK_TYPE_EDGE:case TelephonyManager.NETWORK_TYPE_CDMA:case TelephonyManager.NETWORK_TYPE_1xRTT:case TelephonyManager.NETWORK_TYPE_IDEN:      type=NETWORK_TYPE_2G;    break;case TelephonyManager.NETWORK_TYPE_UMTS:case TelephonyManager.NETWORK_TYPE_EVDO_0:case TelephonyManager.NETWORK_TYPE_EVDO_A:case TelephonyManager.NETWORK_TYPE_HSDPA:case TelephonyManager.NETWORK_TYPE_HSUPA:case TelephonyManager.NETWORK_TYPE_HSPA:default :  type=NETWORK_TYPE_2G;break;}}if (null != wifiInfo && wifiInfo.isConnected()) {type=NETWORK_TYPE_WIFI;}return type;}  }
class C{  public boolean start(OutputStream os){  if (os == null)   return false;  boolean ok=true;  closeStream=false;  out=os;  try {    writeString("GIF89a");  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public MarketReorderAlbumsQuery(VkApiClient client,UserActor actor,int ownerId,int albumId){  super(client,"market.reorderAlbums",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  albumId(albumId);}  }
class C{  public int createDeferredProcessingInstruction(String target,String data){  int nodeIndex=createNode(Node.PROCESSING_INSTRUCTION_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeName,target,chunk,index);  setChunkValue(fNodeValue,data,chunk,index);  return nodeIndex;}  }
class C{  public ViewsFinder excludeView(final View... views){  FunctionUtils.checkParameterArrayIsNotNull("views",views);  viewFilters.add(new ExcluderViewFilter(views));  return this;}  }
class C{  public static ProbeItemDescriptor continuousFillItem(String name,String description,ItemValueFormatter formatter){  return continuousItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,null,DEFAULT_COLOR);}  }
class C{  private static int capacity(int expectedSize){  if (expectedSize < 3) {    checkNonnegative(expectedSize,"expectedSize");    return expectedSize + 1;  }  if (expectedSize < MAX_POWER_OF_TWO) {    return (int)((float)expectedSize / 0.75F + 1.0F);  }  return Integer.MAX_VALUE;}  }
class C{  public static Map<String,IChartDrawer> createChartDrawers(){synchronized (allSupportedChartDrawers) {    final boolean fillAllSupportedDrawers=(allSupportedChartDrawers.size() == 0);    final Map<String,IChartDrawer> name2DrawerInstance=new HashMap<>();    for (    Object object : PluginClassLoader.getInstances(paths,IChartDrawer.class)) {      if (object instanceof IChartDrawer) {        final IChartDrawer drawer=(IChartDrawer)object;        if (!(drawer instanceof MultiChartDrawer) && drawer.isEnabled()) {          name2DrawerInstance.put(drawer.getChartDrawerName(),drawer);          if (fillAllSupportedDrawers && !(object instanceof Plot2DDrawer))           allSupportedChartDrawers.add(drawer.getChartDrawerName());        }      }    }    return name2DrawerInstance;  }}  }
class C{  public RegexFileFilter(String pattern){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=Pattern.compile(pattern);}  }
class C{  @RequestMapping(value=ClientUris.CONFIG_PULLING,method=RequestMethod.POST) public void pulling(@RequestParam("configs") String configs,HttpServletRequest req,HttpServletResponse resp){  ClientSession client=ClientContext.get();  assert client != null;  if (Strings.isNullOrEmpty(configs)) {    return;  }  Map<String,String> pullingConfigs=JsonUtil.INSTANCE.fromJson(configs,JsonUtil.MAP_STR_STR_TYPE);  pullingSupport.pulling(client,pullingConfigs,req,resp);}  }
class C{  public String toJson() throws JsonGenerationException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.writeValueAsString(this);}  }
class C{  public boolean isRepeatable(){  return false;}  }
class C{  public static boolean wildcardSimilar(ItemStack template,ItemStack stranger){  if (template == null || stranger == null) {    return template == stranger;  }  if (template.getItemDamage() == WILDCARD_DAMAGE) {    return template.getItem() == stranger.getItem();  }  return similar(template,stranger);}  }
class C{  public ArrayList<S2CellId> cellIds(){  return cellIds;}  }
class C{  public static byte[] loadImageFile(File imageLoc) throws IOException {  FileInputStream fis=new FileInputStream(imageLoc);  byte[] read=new byte[fis.available()];  fis.read(read);  fis.close();  return read;}  }
class C{  public BoolValueProperty hiddenFromStructureDialog(){  return myHiddenFromStructureDialog;}  }
class C{  public boolean isAllPermissionsAtOnce(){  return mAllAtOnce;}  }
class C{  public boolean contains(Object o){  Object[] elements=getArray();  return indexOf(o,elements,0,elements.length) >= 0;}  }
class C{  public double[] guess(){  return new double[]{norm,mean,sigma};}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("move attribute=");  Set<String> attributes=new HashSet<>();  while (!np.peekMatchIgnoreCase("direction=")) {    String attribute=np.getWordRespectCase();    attributes.add(attribute);  }  np.matchIgnoreCase("direction=");  String direction=np.getWordMatchesIgnoringCase("left right");  np.matchIgnoreCase(";");  if (attributes.size() > 0) {    final SamplesViewer viewer=((SamplesViewer)getViewer());    viewer.getSamplesTable().moveColumns(direction.equalsIgnoreCase("left"),attributes.toArray(new String[attributes.size()]));  }}  }
class C{  public int writeAnnotation(Annotation annotation){  int off=data.position();  writeByte(annotation.visibility);  writeEncodedArray(annotation.encodedAnnotation);  return off;}  }
class C{  public PhotosSaveMessagesPhotoQuery hash(String value){  return unsafeParam("hash",value);}  }
class C{  @Override public void removeAttributeNS(String namespaceURI,String localName){  if (ownerDocument.errorChecking && isReadOnly()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);  }  if (needsSyncData()) {    synchronizeData();  }  if (attributes == null) {    return;  }  attributes.safeRemoveNamedItemNS(namespaceURI,localName);}  }
class C{  private void notifyFailedSynchronization(){  NotificationCompat.Builder notificationBuilder=createNotificationBuilder();  boolean needsToUpdateCredentials=(mLastFailedResult != null && ResultCode.UNAUTHORIZED.equals(mLastFailedResult.getCode()));  if (needsToUpdateCredentials) {    Intent updateAccountCredentials=new Intent(getContext(),AuthenticatorActivity.class);    updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,getAccount());    updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);    updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);    updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);    notificationBuilder.setTicker(i18n(R.string.sync_fail_ticker_unauthorized)).setContentTitle(i18n(R.string.sync_fail_ticker_unauthorized)).setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT)).setContentText(i18n(R.string.sync_fail_content_unauthorized,getAccount().name));  } else {    notificationBuilder.setTicker(i18n(R.string.sync_fail_ticker)).setContentTitle(i18n(R.string.sync_fail_ticker)).setContentText(i18n(R.string.sync_fail_content,getAccount().name));  }  showNotification(R.string.sync_fail_ticker,notificationBuilder);}  }
class C{  public void moveCartItem(int fromIndex,int toIndex){  if (toIndex < fromIndex) {    cartLines.add(toIndex,cartLines.remove(fromIndex));  } else   if (toIndex > fromIndex) {    cartLines.add(toIndex - 1,cartLines.remove(fromIndex));  }}  }
class C{  public void clear(){  vPreviousDecisions.clear();}  }
class C{  public AutoIncrementer(final int start){  this.nextId=start;}  }
class C{  protected void clearLastReceivedHeaders(){  getTestFilter().clearLastReceivedHeaders();}  }
class C{  public Action0 onSchedule(Action0 action){  return action;}  }
class C{  public AdsGetBudgetQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getBudget",Integer.class);  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  public static String encodeHighLevel(String msg){  return encodeHighLevel(msg,SymbolShapeHint.FORCE_NONE,null,null);}  }
class C{  @Override public String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {  if (locale == null) {    locale=Locale.getDefault();  }  if (locale != fLocale) {    fResourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.XPointerMessages",locale);    fLocale=locale;  }  String msg=fResourceBundle.getString(key);  if (arguments != null) {    try {      msg=java.text.MessageFormat.format(msg,arguments);    } catch (    Exception e) {      msg=fResourceBundle.getString("FormatFailed");      msg+=" " + fResourceBundle.getString(key);    }  }  if (msg == null) {    msg=fResourceBundle.getString("BadMessageKey");    throw new MissingResourceException(msg,"mf.org.apache.xerces.impl.msg.XPointerMessages",key);  }  return msg;}  }
class C{  public boolean saveLegendImage(StyledLayerDescriptor sld,File destinationFolder,String layerName,String heading,String filename,List<String> filenameList){  boolean ok=false;  Map<String,BufferedImage> imageMap=LegendManager.getInstance().createLegend(sld,heading,filename,legendOptionData.splitSymbolizers());  if (imageMap != null) {    for (    String name : imageMap.keySet()) {      BufferedImage image=imageMap.get(name);      if (image != null) {        try {          String legendFilename;          if (name == null) {            legendFilename=layerName + "." + LegendManager.getLegendImageFormat();          } else {            legendFilename=String.format("%s_%s.%s",layerName,name,LegendManager.getLegendImageFormat());          }          File fileToSave=new File(destinationFolder,legendFilename);          filenameList.add(fileToSave.getAbsolutePath());          ok=saveGridImage(image,getLegendImageFormat(),fileToSave,legendOptionData.getDpi());        } catch (        IOException e) {          ConsoleManager.getInstance().exception(this,e);        }      }    }  }  return ok;}  }
class C{  public boolean showNotificationsSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS;}  }
class C{  private void algorithmDouglasPeucker(List<Entry> entries,double epsilon,int start,int end){  if (end <= start + 1) {    return;  }  int maxDistIndex=0;  double distMax=0;  Entry firstEntry=entries.get(start);  Entry lastEntry=entries.get(end);  for (int i=start + 1; i < end; i++) {    double dist=calcAngleBetweenLines(firstEntry,lastEntry,firstEntry,entries.get(i));    if (dist > distMax) {      distMax=dist;      maxDistIndex=i;    }  }  if (distMax > epsilon) {    keep[maxDistIndex]=true;    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);  }}  }
class C{  protected PhotosSaveMessagesPhotoQuery photo(String value){  return unsafeParam("photo",value);}  }
class C{  private boolean dynomiteRedisPing(Jedis dynomiteJedis){  if (dynomiteJedis.ping().equals("PONG") == false) {    logger.warn("Pinging Dynomite failed");    return false;  }  logger.info("Dynomite is up and running");  return true;}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public SM_NICKNAME_CHECK_RESPONSE(int value){  this.value=value;}  }
class C{  @Override public void addField(DataSourceFieldInterface dataSourceField){  if (dataSourceField != null) {    if (connectedToDataSourceFlag == false) {      SLDDataInterface sldData=this.editorFileInterface.getSLDData();      List<DataSourceFieldInterface> fieldList=sldData.getFieldList();      if (fieldList == null) {        fieldList=new ArrayList<DataSourceFieldInterface>();        sldData.setFieldList(fieldList);      }      fieldList.add(dataSourceField);      createInternalDataSource();    }  }}  }
class C{  @SuppressFBWarnings("DM_EXIT") @VisibleForTesting void prepareNativeLibraries(){  try {    BrowserStartupController.get(getApplicationContext(),LibraryProcessType.PROCESS_BROWSER).startBrowserProcessesSync(false);  } catch (  ProcessInitException e) {    Log.e(TAG,"ProcessInitException while starting the browser process");    System.exit(-1);  }}  }
class C{  public static SecretKeys keys(String keysStr) throws InvalidKeyException {  String[] keysArr=keysStr.split(":");  if (keysArr.length != 2) {    throw new IllegalArgumentException("Cannot parse aesKey:hmacKey");  } else {    byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS);    if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + AES_KEY_LENGTH_BITS + " bytes");    }    byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS);    if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + HMAC_KEY_LENGTH_BITS + " bytes");    }    return new SecretKeys(new SecretKeySpec(confidentialityKey,0,confidentialityKey.length,CIPHER),new SecretKeySpec(integrityKey,HMAC_ALGORITHM));  }}  }
class C{  private void reverseColourRamp(boolean isSelected){  int selectedIndex=rampComboBox.getSelectedIndex();  setPopulating(true);  List<ValueComboBoxData> dataList=populateColourRamps(isSelected);  rampComboBox.initialiseSingle(dataList);  rampComboBox.setSelectedIndex(selectedIndex);  setPopulating(false);}  }
class C{  public static double abs(Z z){  double are, aim, rho;  are=Math.abs(z.re);  aim=Math.abs(z.im);  if (are + aim == 0)   return 0;  if (are >= aim) {    rho=aim / are;    return are * Math.sqrt(1 + rho * rho);  } else {    rho=are / aim;    return aim * Math.sqrt(1 + rho * rho);  }}  }
class C{  private void openCounterDataOutputStream() throws DataFallbackException {  if (dOutput == null) {    if (LOG.isDebugEnabled())     LOG.debug("openDataOutputStream() ; Opening the writer for the " + counterFile.getName() + " file");    try {      dOutput=new BufferedWriter(new FileWriter(counterFile));    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    }  }}  }
class C{  @Override public boolean contains(Object o){  return backedSet.contains(o);}  }
class C{  public static NumericEntityEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  public void toString(StringBuffer sb){  sb.append(indent() + "try (");  for (  ResourceDeclaration resource : getResourceList()) {    sb.append(resource.toString());  }  sb.append(") ");  getBlock().toString(sb);  for (  CatchClause cc : getCatchClauseList()) {    sb.append(" ");    cc.toString(sb);  }  if (hasFinally()) {    sb.append(" finally ");    getFinally().toString(sb);  }}  }
class C{  public UsersGetFollowersQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){  super(client,"users.getFollowers",GetFollowersFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  @Override public void invalidate(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){  carbonLRUCache.remove(getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),CacheType.FORWARD_DICTIONARY));}  }
class C{  private WelcomeOptions(){}  }
class C{  @Override public String toString(){  return length > 0 ? new String(ch,offset,length) : "";}  }
class C{  public Project toEntity(ProjectDTO dto,int depth){  if (dto == null) {    return null;  }  Project project=new Project();  project.setId(dto.id);  project.setName(dto.name);  project.setUrl(dto.url);  project.setOpenSource(dto.openSource);  if (depth-- > 0) {    project.setAuthor(authorDTOService.toEntity(dto.author,depth));  }  return project;}  }
class C{  public boolean findFirst(String regularExpression){  return findAndUncollapseNext(regularExpression,false,false) > 0;}  }
class C{  protected boolean readMethods(DataInputStream d) throws IOException {  method_info mi;  int i;  methods=new method_info[methods_count];  for (i=0; i < methods_count; i++) {    mi=new method_info();    mi.access_flags=d.readUnsignedShort();    mi.name_index=d.readUnsignedShort();    mi.descriptor_index=d.readUnsignedShort();    mi.attributes_count=d.readUnsignedShort();    if (mi.attributes_count > 0) {      mi.attributes=new attribute_info[mi.attributes_count];      readAttributes(d,mi.attributes_count,mi.attributes);      for (int j=0; j < mi.attributes_count; j++) {        if (mi.attributes[j] instanceof Code_attribute) {          mi.code_attr=(Code_attribute)mi.attributes[j];          break;        }      }    }    methods[i]=mi;  }  return true;}  }
class C{  public static boolean recordLoadMetadata(int loadCount,LoadMetadataDetails loadMetadataDetails,CarbonLoadModel loadModel,String loadStatus,String startLoadTime) throws IOException {  boolean status=false;  String metaDataFilepath=loadModel.getCarbonDataLoadSchema().getCarbonTable().getMetaDataFilepath();  AbsoluteTableIdentifier absoluteTableIdentifier=loadModel.getCarbonDataLoadSchema().getCarbonTable().getAbsoluteTableIdentifier();  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());  String tableStatusPath=carbonTablePath.getTableStatusFilePath();  SegmentStatusManager segmentStatusManager=new SegmentStatusManager(absoluteTableIdentifier);  ICarbonLock carbonLock=segmentStatusManager.getTableStatusLock();  try {    if (carbonLock.lockWithRetries()) {      LOGGER.info("Acquired lock for table" + loadModel.getDatabaseName() + "."+ loadModel.getTableName()+ " for table status updation");      LoadMetadataDetails[] listOfLoadFolderDetailsArray=segmentStatusManager.readLoadMetadata(metaDataFilepath);      String loadEnddate=readCurrentTime();      loadMetadataDetails.setTimestamp(loadEnddate);      loadMetadataDetails.setLoadStatus(loadStatus);      loadMetadataDetails.setLoadName(String.valueOf(loadCount));      loadMetadataDetails.setLoadStartTime(startLoadTime);      List<LoadMetadataDetails> listOfLoadFolderDetails=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      if (null != listOfLoadFolderDetailsArray) {        for (        LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {          listOfLoadFolderDetails.add(loadMetadata);        }      }      listOfLoadFolderDetails.add(loadMetadataDetails);      segmentStatusManager.writeLoadDetailsIntoFile(tableStatusPath,listOfLoadFolderDetails.toArray(new LoadMetadataDetails[listOfLoadFolderDetails.size()]));      status=true;    } else {      LOGGER.error("Not able to acquire the lock for Table status updation for table " + loadModel.getDatabaseName() + "."+ loadModel.getTableName());    }  }  finally {    if (carbonLock.unlock()) {      LOGGER.info("Table unlocked successfully after table status updation" + loadModel.getDatabaseName() + "."+ loadModel.getTableName());    } else {      LOGGER.error("Unable to unlock Table lock for table" + loadModel.getDatabaseName() + "."+ loadModel.getTableName()+ " during table status updation");    }  }  return status;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_CASH_REWARD_CASH_UNLIMITED(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400716,value0,value1);}  }
class C{  @Override public void createUI(){  int xPos=getXPos();  FieldPanel fieldPanel=createFieldPanel(xPos,BasePanel.WIDGET_HEIGHT * NO_OF_ROWS,getLabel());  inlineGML=new InlineGMLPreviewPanel(this,NO_OF_ROWS);  inlineFeature=new InlineFeaturePanel(this,NO_OF_ROWS);  tabbedPane=new JTabbedPane(JTabbedPane.TOP);  tabbedPane.addTab(Localisation.getString(FieldConfigBase.class,"FieldConfigInlineFeature.feature"),null,inlineFeature,Localisation.getString(FieldConfigBase.class,"FieldConfigInlineFeature.feature.tooltip"));  tabbedPane.addTab(Localisation.getString(FieldConfigBase.class,"FieldConfigInlineFeature.gml"),null,inlineGML,Localisation.getString(FieldConfigBase.class,"FieldConfigInlineFeature.gml.tooltip"));  tabbedPane.setBounds(0,0,inlineGML.getWidth(),inlineGML.getHeight());  fieldPanel.add(tabbedPane);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),0);  setChild(new List(),1);}  }
class C{  public boolean follows(E a,E b){  return innerChain.follows(a,b);}  }
class C{  public void addImportDecl(ImportDecl node){  List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();  list.addChild(node);}  }
class C{  public String toString(){  return getName();}  }
class C{  public <T>T inject(Class<T> clazz){  return inject(clazz,new FramePath());}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static void checkAdditionCompatible(final AnyMatrix left,final AnyMatrix right) throws MathIllegalArgumentException {  if ((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension())) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH_2x2,left.getRowDimension(),left.getColumnDimension(),right.getRowDimension(),right.getColumnDimension());  }}  }
class C{  public static boolean isNetworkConnected(Context context){  if (null == context) {    return false;  }  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  if (connectivityManager != null) {    NetworkInfo info=connectivityManager.getActiveNetworkInfo();    if (info != null && info.isConnected()) {      if (info.getState() == NetworkInfo.State.CONNECTED) {        return true;      }    }  }  return false;}  }
class C{  public List<Node> find(String name,Node current){  List<Node> nodesFound=new ArrayList<>();  if (name != null && !name.isEmpty() && current != null) {    if (name.equals(current.getName())) {      nodesFound.add(current);    }    if (!current.isLeaf()) {      nodesFound.addAll(((Directory)current).getChildren(name));    }  }  return nodesFound;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_SKILL(String value0){  return new SM_SYSTEM_MESSAGE(1300589,value0);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public String toFastA(boolean includeUnalignedChars,int minRow,int minLayoutCol,int maxRow,int maxLayoutCol){  StringWriter w=new StringWriter();  if (!getRowCompressor().isEnabled()) {    final Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);    maxRow=Math.min(maxRow,getNumberOfSequences() - 1);    for (int read=minRow; read <= maxRow; read++) {      String readName=getName(read);      if (readName.startsWith(">"))       w.write(readName + "\n"); else       w.write(">" + readName + "\n");      Lane lane=getLane(read);      int jc=0;      int jumped=0;      for (int layoutCol=minLayoutCol; layoutCol <= maxLayoutCol; layoutCol++) {        while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {          jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);          jc++;        }        int trueCol=layoutCol + jumped;        if (trueCol < getLength()) {          if (includeUnalignedChars && lane.hasUnalignedCharAt(trueCol)) {            char ch=lane.getUnalignedCharAt(trueCol);            w.write(ch);          } else {            if (trueCol >= lane.getFirstNonGapPosition() && trueCol <= lane.getLastNonGapPosition()) {              char ch=lane.charAt(trueCol);              if (ch == 0)               ch='-';              if (ch != ' ')               w.write(ch);            } else {              if (!isTranslate() || (trueCol % 3) == 0)               w.write('-');            }          }        }      }      w.write("\n");    }  } else {    maxRow=Math.min(maxRow,getRowCompressor().getNumberRows() - 1);    final Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);    int minTrueCol=gapColumnContractor.getTotalJumpBeforeLayoutColumn(minLayoutCol) + minLayoutCol;    int maxTrueCol=gapColumnContractor.getTotalJumpBeforeLayoutColumn(maxLayoutCol - 1) + maxLayoutCol;    for (int row=minRow; row <= maxRow; row++) {      int lastPos=minTrueCol - 1;      for (      int read : rowCompressor.getCompressedRow2Reads(row)) {        int jc=0;        int jumped=0;        Lane lane=getLane(read);        if (minTrueCol <= lane.getLastNonGapPosition() && maxTrueCol >= lane.getFirstNonGapPosition()) {          int startTrueCol=Math.max(minTrueCol,lane.getFirstNonGapPosition());          int endTrueCol=Math.min(maxTrueCol,lane.getLastNonGapPosition());          while (lastPos < startTrueCol - (isTranslate() ? 1 : 1)) {            if (!translate || (lastPos % 3) == 0)             w.write("-");            lastPos++;          }          for (int layoutCol=minLayoutCol; layoutCol <= maxLayoutCol; layoutCol++) {            while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {              jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);              jc++;            }            int trueCol=layoutCol + jumped;            if (trueCol >= startTrueCol && trueCol <= endTrueCol) {              if (includeUnalignedChars && lane.hasUnalignedCharAt(trueCol)) {                char ch=lane.getUnalignedCharAt(trueCol);                w.write(ch);              } else               if (!isTranslate() || trueCol < lane.getLastNonGapPosition() - 2) {                char ch=lane.charAt(trueCol);                if (ch == 0)                 ch='-';                if (ch != ' ')                 w.write(ch);              }              lastPos++;            }          }        }      }      while (lastPos < maxTrueCol) {        if (!translate || (lastPos % 3) == 0)         w.write("-");        lastPos++;      }      w.write("\n");    }  }  return w.toString();}  }
class C{  public Author withDefaults(){  setCivility(Civility.MR);  return this;}  }
class C{  public boolean accept(File dir,String name){  return true;}  }
class C{  public AccountLookupContactsQuery(VkApiClient client,UserActor actor,AccountLookupContactsService service){  super(client,"account.lookupContacts",LookupResult.class);  accessToken(actor.getAccessToken());  service(service);}  }
class C{  protected String normalizeVersion(String version){  Pattern regex=Pattern.compile("^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:\\.(\\d+)| +rc(\\d+))?");  Matcher m=regex.matcher(version);  if (m != null && m.lookingAt()) {    StringBuilder normal=new StringBuilder();    for (int i=1; i <= 4; i++) {      int v=0;      if (i == 4 && i < m.groupCount() && m.group(i) == null && m.group(i + 1) != null) {        i++;      }      if (m.group(i) != null) {        try {          v=Integer.parseInt(m.group(i));        } catch (        Exception ignore) {        }      }      if (i > 1) {        normal.append('.');      }      normal.append(v);    }    return normal.toString();  }  throw new IllegalArgumentException("Bad version: " + version);}  }
class C{  public void selectionChanged(ISelection selection){  if (selection == null) {    selection=StructuredSelection.EMPTY;  }  if (delegate != null) {    delegate.selectionChanged(this,selection);  }}  }
class C{  public String namespace(String name,boolean attribute){  int colon=name.indexOf(':');  if (colon == -1) {    return attribute ? "" : theSchema.getURI();  }  String prefix=name.substring(0,colon);  if (prefix.equals("xml")) {    return "http://www.w3.org/XML/1998/namespace";  } else {    return ("urn:x-prefix:" + prefix).intern();  }}  }
class C{  private static boolean isDigit(char ch){  return '0' <= ch && ch <= '9';}  }
class C{  public static Permission with(Fragment fragment){  return new ImplPermission(fragment);}  }
class C{  public EntityQuery where(EntityCondition entityCondition){  this.whereEntityCondition=entityCondition;  return this;}  }
class C{  private Node traverseNode(Node n,boolean isFullySelected,boolean isLeft,int how){  if (isFullySelected) {    return traverseFullySelected(n,how);  }  final short nodeType=n.getNodeType();  if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.COMMENT_NODE || nodeType == Node.PROCESSING_INSTRUCTION_NODE) {    return traverseCharacterDataNode(n,isLeft,how);  }  return traversePartiallySelected(n,how);}  }
class C{  public boolean indexExists(String tableName,String columnName){  try {    resolveIndexFromName(tableName,columnName);  } catch (  DatabaseException e) {    return false;  }  return true;}  }
class C{  public CascadedTable(Table parent,Predicate rowFilter,ColumnProjection colFilter){  this(parent,rowFilter,colFilter,TableTuple.class);}  }
class C{  public AsyncCatchOptions usePokeball(Pokeball pokeBall){  this.pokeBall=pokeBall;  return this;}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  K oldKeys[]=(K[])_set;  short oldVals[]=_values;  _set=new Object[newCapacity];  Arrays.fill(_set,FREE);  _values=new short[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != FREE && oldKeys[i] != REMOVED) {      K o=oldKeys[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[(-index - 1)],o);      }      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  public InstanceOfExpr newInstanceOfExpr(Value op1,Type t){  return new JInstanceOfExpr(op1,t);}  }
class C{  public int passes(){  return soot.PhaseOptions.getInt(options,"passes");}  }
class C{  @Override public CompletableFuture<Void> close(){  CompletableFuture<Void> closeFuture=new CompletableFuture<>();  lock.writeLock().lock();  try {    if (!isFenced) {      isFenced=true;    } else {      log.warn("[{}] Topic is already being closed or deleted",topic);      closeFuture.completeExceptionally(new TopicFencedException("Topic is already fenced"));      return closeFuture;    }  }  finally {    lock.writeLock().unlock();  }  List<CompletableFuture<Void>> futures=Lists.newArrayList();  replicators.forEach(null);  producers.forEach(null);  subscriptions.forEach(null);  FutureUtil.waitForAll(futures).thenRun(null).exceptionally(null);  return closeFuture;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201145,value0);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public ClientRequestReport(final int pTotalOperations,final int pCurrentOperation,final int pTotalParts,final int pCurrentPart,final String pDescription){  reportType=ReportType.PROGRESS;  this.currentPart=pCurrentPart;  this.totalParts=pTotalParts;  this.progressDescription=pDescription;  this.totalOperations=pTotalOperations;  this.currentOperation=pCurrentOperation;  this.requestStatus=null;  this.errorMessage=null;}  }
class C{  private boolean matches(String selector,String name){  if (selector.equals("*")) {    return true;  }  if (selector.endsWith(".*")) {    return name.startsWith(selector.substring(0,selector.length() - 1));  }  return name.equals(selector);}  }
class C{  private DataSourcePropertiesInterface processDataSource(String layerName,JsonElement dataSourcePropertiesElement){  Map<String,String> propertyMap=new LinkedHashMap<String,String>();  if (dataSourcePropertiesElement != null) {    JsonObject dsObj=dataSourcePropertiesElement.getAsJsonObject();    JsonElement typeElement=dsObj.get(DatasourceKeys.TYPE);    if (typeElement != null) {      propertyMap.put(DatasourceKeys.TYPE,typeElement.getAsString());    }    JsonElement pathElement=dsObj.get(DatasourceKeys.PATH);    if (pathElement != null) {      propertyMap.put(DatasourceKeys.PATH,pathElement.getAsString());    }    JsonObject properties=dsObj.getAsJsonObject(DatasourceKeys.PROPERTIES);    if (properties != null) {      for (      Map.Entry<String,JsonElement> field : properties.entrySet()) {        propertyMap.put(field.getKey(),field.getValue().getAsString());      }    }  }  DataSourcePropertiesInterface dataSourceProperties=DataSourceManager.getInstance().convert(propertyMap);  return dataSourceProperties;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignDivExpr fullCopy(){  AssignDivExpr tree=(AssignDivExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean isDisaggregation(PeriodType aggregationPeriodType,PeriodType dataPeriodType){  return dataPeriodType != null && aggregationPeriodType != null && aggregationPeriodType.getFrequencyOrder() < dataPeriodType.getFrequencyOrder();}  }
class C{  @NotNull public List<Face> findEmotionFaces(@NotNull InputStream image){  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,image).withResult();}  }
class C{  @Nonnull @Override public String toVersionString(){  return toVersionString(groups) + extension;}  }
class C{  public void pause(){}  }
class C{  public TrapUnitGraph(Body body){  super(body);  int size=unitChain.size();  if (Options.v().time())   Timers.v().graphTimer.start();  unitToSuccs=new HashMap<Unit,List<Unit>>(size * 2 + 1,0.7f);  unitToPreds=new HashMap<Unit,List<Unit>>(size * 2 + 1,0.7f);  buildUnexceptionalEdges(unitToSuccs,unitToPreds);  buildExceptionalEdges(unitToSuccs,unitToPreds);  makeMappedListsUnmodifiable(unitToSuccs);  makeMappedListsUnmodifiable(unitToPreds);  buildHeadsAndTails();  if (Options.v().time())   Timers.v().graphTimer.end();  soot.util.PhaseDumper.v().dumpGraph(this,body);}  }
class C{  @Override protected void configurePipeline(){  setProperty(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  configureDTDPipeline();  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    fProperties.put(NAMESPACE_BINDER,fNamespaceBinder);    fScanner=fNamespaceScanner;    fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);    if (fDTDValidator != null) {      fProperties.put(DTD_VALIDATOR,fDTDValidator);      fNamespaceScanner.setDTDValidator(fDTDValidator);      fNamespaceScanner.setDocumentHandler(fDTDValidator);      fDTDValidator.setDocumentSource(fNamespaceScanner);      fDTDValidator.setDocumentHandler(fDocumentHandler);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fDTDValidator);      }      fLastComponent=fDTDValidator;    } else {      fNamespaceScanner.setDocumentHandler(fDocumentHandler);      fNamespaceScanner.setDTDValidator(null);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fNamespaceScanner);      }      fLastComponent=fNamespaceScanner;    }  } else {    fScanner=fNonNSScanner;    fProperties.put(DOCUMENT_SCANNER,fNonNSScanner);    if (fNonNSDTDValidator != null) {      fProperties.put(DTD_VALIDATOR,fNonNSDTDValidator);      fNonNSScanner.setDocumentHandler(fNonNSDTDValidator);      fNonNSDTDValidator.setDocumentSource(fNonNSScanner);      fNonNSDTDValidator.setDocumentHandler(fDocumentHandler);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fNonNSDTDValidator);      }      fLastComponent=fNonNSDTDValidator;    } else {      fScanner.setDocumentHandler(fDocumentHandler);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fScanner);      }      fLastComponent=fScanner;    }  }  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    if (fSchemaValidator == null) {      fSchemaValidator=new XMLSchemaValidator();      fProperties.put(SCHEMA_VALIDATOR,fSchemaValidator);      addComponent(fSchemaValidator);      if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {        XSMessageFormatter xmft=new XSMessageFormatter();        fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,xmft);      }    }    fLastComponent.setDocumentHandler(fSchemaValidator);    fSchemaValidator.setDocumentSource(fLastComponent);    fSchemaValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fSchemaValidator);    }    fLastComponent=fSchemaValidator;  }}  }
class C{  public TrapezoidIntegrator(final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,TRAPEZOID_MAX_ITERATIONS_COUNT);  }}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigDate copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigDate(getCommonData());  }  return copy;}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public HttpClient(String url,Map<String,Object> parameters){  this.url=url;  this.parameters=parameters;}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static final Authentication create(String authPluginClassName,Map<String,String> authParams) throws UnsupportedAuthenticationException {  try {    if (isNotBlank(authPluginClassName)) {      Class<?> authClass=Class.forName(authPluginClassName);      Authentication auth=(Authentication)authClass.newInstance();      auth.configure(authParams);      return auth;    } else {      return new AuthenticationDisabled();    }  } catch (  Throwable t) {    throw new UnsupportedAuthenticationException(t);  }}  }
class C{  public void removeObject(VisibleObject object){  allObjects.remove(object.getObjectId());  if (object instanceof SiegeNpc) {    SiegeNpc siegeNpc=(SiegeNpc)object;    Collection<SiegeNpc> locSpawn=localSiegeNpcs.get(siegeNpc.getSiegeId());    if (!GenericValidator.isBlankOrNull(locSpawn)) {      locSpawn.remove(siegeNpc);    }  }  if (object.getSpawn() instanceof BaseSpawnTemplate) {    BaseSpawnTemplate bst=(BaseSpawnTemplate)object.getSpawn();    int baseId=bst.getId();    baseNpc.get(baseId).remove((Npc)object);  }  if (object instanceof Npc) {    allNpcs.remove(object.getObjectId());  }  if (object instanceof Player) {    allPlayers.remove((Player)object);  }}  }
class C{  public CompositePredicate(){}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  protected void send_download_package(String group_name,String remote_filename,long file_offset,long download_bytes) throws IOException {  byte[] header;  byte[] bsOffset;  byte[] bsDownBytes;  byte[] groupBytes;  byte[] filenameBytes;  byte[] bs;  int groupLen;  bsOffset=ProtoCommon.long2buff(file_offset);  bsDownBytes=ProtoCommon.long2buff(download_bytes);  groupBytes=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];  bs=group_name.getBytes(ClientGlobal.g_charset);  filenameBytes=remote_filename.getBytes(ClientGlobal.g_charset);  Arrays.fill(groupBytes,(byte)0);  if (bs.length <= groupBytes.length) {    groupLen=bs.length;  } else {    groupLen=groupBytes.length;  }  System.arraycopy(bs,0,groupBytes,0,groupLen);  header=ProtoCommon.packHeader(ProtoCommon.STORAGE_PROTO_CMD_DOWNLOAD_FILE,bsOffset.length + bsDownBytes.length + groupBytes.length+ filenameBytes.length,(byte)0);  byte[] wholePkg=new byte[header.length + bsOffset.length + bsDownBytes.length+ groupBytes.length+ filenameBytes.length];  System.arraycopy(header,0,wholePkg,0,header.length);  System.arraycopy(bsOffset,0,wholePkg,header.length,bsOffset.length);  System.arraycopy(bsDownBytes,0,wholePkg,header.length + bsOffset.length,bsDownBytes.length);  System.arraycopy(groupBytes,0,wholePkg,header.length + bsOffset.length + bsDownBytes.length,groupBytes.length);  System.arraycopy(filenameBytes,0,wholePkg,header.length + bsOffset.length + bsDownBytes.length+ groupBytes.length,filenameBytes.length);  this.storageServer.getSocket().getOutputStream().write(wholePkg);}  }
class C{  public SQLSchemaMigrator migrate(Loader loader){  loader.addToQueue(migrate());  loader.flush();  loader.waitToFinish();  return this;}  }
class C{  public PlacesCheckinQuery checkin(UserActor actor){  return new PlacesCheckinQuery(getClient(),actor);}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public Node load(BufferedReader reader,FeatureDefinition featDefinition) throws IOException {  cleadReader();  featDef=featDefinition;  openBrackets=0;  String line=reader.readLine();  if (line.equals("")) {    line=reader.readLine();  }  while (line != null) {    if (!line.startsWith(";;") && !line.equals("")) {      parseAndAdd(line);    }    line=reader.readLine();  }  if (openBrackets != 0) {    throw new IOException("Error loading CART: bracket mismatch");  }  if (rootNode instanceof DecisionNode)   ((DecisionNode)rootNode).countData();  return rootNode;}  }
class C{  @Override public boolean next() throws RemoteException {  try {    return s.next();  } catch (  RuntimeException e) {    rconn.rollback();    throw e;  }}  }
class C{  public void removeField(FieldConfigBase fieldConfig){  if (fieldConfig != null) {    Map<FieldIdEnum,FieldConfigBase> panelMap=fieldConfigMap.get(panelId);    if (panelMap != null) {      panelMap.remove(fieldConfig.getFieldId());    }  }}  }
class C{  private void activateToggleSkill(){  PacketSendUtility.sendPacket((Player)effector,new SM_SKILL_ACTIVATION(getSkillId(),true));}  }
class C{  private void initDefaultValues(){  myName.set(getUniqueId(null));  myDiagonalScreenSize.set(5.0);  myScreenResolutionWidth.set(1080);  myScreenResolutionHeight.set(1920);  myRamStorage.set(new Storage(2,Storage.Unit.GiB));  myHasHardwareButtons.set(false);  myHasHardwareKeyboard.set(false);  myNavigation.setValue(Navigation.NONAV);  mySupportsPortrait.set(true);  mySupportsLandscape.set(true);  myHasFrontCamera.set(true);  myHasBackCamera.set(true);  myHasAccelerometer.set(true);  myHasGyroscope.set(true);  myHasGps.set(true);  myHasProximitySensor.set(true);}  }
class C{  public void launch(){  mTabCountAtLaunch=ChromeApplication.getDocumentTabModelSelector().getTotalTabCount();  final Activity parentActivity=ActivityDelegate.getActivityForTabId(mParentId);  mLaunchedId=ChromeLauncherActivity.launchDocumentInstance(parentActivity,mIsIncognito,mAsyncParams);  if (mLaunchedId == Tab.INVALID_TAB_ID) {    Log.e(TAG,"Failed to launch document.");    finishLaunch();  } else {    mTimestampAtLaunch=SystemClock.elapsedRealtime();    run();  }}  }
class C{  public void run(){  PrintStream pOut=null;  if (OutFile.length() != 0) {    try {      pOut=new PrintStream(OutFile);    } catch (    FileNotFoundException fnfe) {      System.err.println("Cannot output to selected file:\n" + fnfe.getMessage());      System.exit(1);    }  }  doOptimizedEval(OutputSemaphore,pOut,NMin,NMax,Dist,SummaryDir,ModelDir,Threads,DocumentClass,ComparatorClass,Silent,Progress);  if (pOut != null)   pOut.close();}  }
class C{  public void requestHardReset(){  sendQueue.clear();  recvQueue.clear();  SerialMessage msg=new ControllerSetDefaultMessageClass().doRequest();  msg.attempts=1;  enqueue(msg);  zwaveNodes.clear();  enqueue(new SerialApiGetInitDataMessageClass().doRequest());  logger.debug("ZWave controller hard reset");}  }
class C{  public LogException(String s,Throwable ex){  super(s);  initCause(null);  detail=ex;}  }
class C{  public int elementAt(int depth){  return fData[depth];}  }
class C{  public boolean ignore_wrong_staticness(){  return soot.PhaseOptions.getBoolean(options,"ignore-wrong-staticness");}  }
class C{  public VideoGetUserVideosQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public Vec2d(Vec2d v){  set(v);}  }
class C{  public Matrix(int m,int n){  this.m=m;  this.n=n;  A=new double[m][n];}  }
class C{  @Nullable public WorkspacePath workspacePathForSafe(File absoluteFile){  if (isInWorkspace(absoluteFile)) {    return workspacePathFor(absoluteFile);  }  return null;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  @Override public Iterator<byte[]> read(long startOffset,long endOffset) throws IOException {  List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks=readDictionaryMetadataFile();  List<ColumnDictionaryChunk> columnDictionaryChunks=read(carbonDictionaryColumnMetaChunks,startOffset,endOffset);  Iterator<byte[]> columnDictionaryChunkWrapper=new ColumnDictionaryChunkIterator(columnDictionaryChunks);  return columnDictionaryChunkWrapper;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TObjectLongHashMap)) {    return false;  }  TObjectLongHashMap that=(TObjectLongHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public void deleteKey(String publicKey){  this.api.deleteApiByPublicKey(publicKey);}  }
class C{  public void flushAll(long txNum){  bufferPool.flushAll(txNum);}  }
class C{  public void checkAndNotify(){  for (  FileAlterationListener listener : listeners) {    listener.onStart(this);  }  File rootFile=rootEntry.getFile();  if (rootFile.exists()) {    checkAndNotify(rootEntry,rootEntry.getChildren(),listFiles(rootFile));  } else   if (rootEntry.isExists()) {    checkAndNotify(rootEntry,rootEntry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);  } else {  }  for (  FileAlterationListener listener : listeners) {    listener.onStop(this);  }}  }
class C{  public boolean containsBafBody(){  Iterator<SootMethod> methodIt=methodIterator();  while (methodIt.hasNext()) {    SootMethod m=methodIt.next();    if (m.hasActiveBody() && m.getActiveBody() instanceof soot.baf.BafBody) {      return true;    }  }  return false;}  }
class C{  public SimpleDelegatingTask(Task<T> task){  this.task=task;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  if (getParent() instanceof OverlapGraphViewer) {    final OverlapGraphViewer overlapGraphViewer=(OverlapGraphViewer)getParent();    final GraphView graphView=overlapGraphViewer.getGraphView();    final NodeMap<String> node2ReadNameMap=overlapGraphViewer.getNode2ReadNameMap();    final Set<String> previousSelection=ProjectManager.getPreviouslySelectedNodeLabels();    if (previousSelection.size() > 0) {      Graph graph=graphView.getGraph();      NodeSet toSelect=new NodeSet(graph);      for (Node v=graph.getFirstNode(); v != null; v=graph.getNextNode(v)) {        String label=node2ReadNameMap.get(v);        if (label != null && previousSelection.contains(label))         toSelect.add(v);      }      if (toSelect.size() > 0) {        graphView.setSelected(toSelect,true);        graphView.repaint();      }    }  }}  }
class C{  public SimpleStringProperty scriptProperty(){  return this.script;}  }
class C{  public void hideDetailsArea(int location){  DisplayArea displayArea=getDisplayArea(location);  if (displayArea != null)   displayArea.setVisible(false);}  }
class C{  @SuppressWarnings("fallthrough") private String nextUnquotedValue() throws IOException {  StringBuilder builder=null;  int i=0;  findNonLiteralCharacter:   while (true) {    for (; pos + i < limit; i++) {switch (buffer[pos + i]) {case '/':case '\\':case ';':case '#':case '=':        checkLenient();case '{':case '}':case '[':case ']':case ':':case ',':case ' ':case '\t':case '\f':case '\r':case '\n':      break findNonLiteralCharacter;  }}if (i < buffer.length) {  if (fillBuffer(i + 1)) {    continue;  } else {    break;  }}if (builder == null) {  builder=new StringBuilder();}builder.append(buffer,pos,i);pos+=i;i=0;if (!fillBuffer(1)) {  break;}}String result;if (builder == null) {result=new String(buffer,pos,i);} else {builder.append(buffer,pos,i);result=builder.toString();}pos+=i;return result;}  }
class C{  private static String formattedLocationFromGoogleResponse(final JSONObject json){  final JSONArray matches=json.optJSONArray(GoogleKey.RESULTS);  String formattedLocation=null;  if (matches != null && matches.length() > 0) {    formattedLocation=matches.getJSONObject(0).optString(GoogleKey.FORMATTED_ADDRESS);  }  return formattedLocation;}  }
class C{  private static void addQuarterArc(Path2D.Float path,float x1,float y1,float x2,float y2,float curvature,boolean verticalStart){  boolean down=y1 < y2;  boolean left=x1 > x2;  float cx1=0;  float cy1=0;  float cx2=0;  float cy2=0;  if (verticalStart) {    cx1=x1;    cy2=y2;    if (left) {      cx2=x1 - curvature;    } else {      cx2=x1 + curvature;    }    if (down) {      cy1=y2 - curvature;    } else {      cy1=y2 + curvature;    }  } else {    cx2=x2;    cy1=y1;    if (left) {      cx1=x2 + curvature;    } else {      cx1=x2 - curvature;    }    if (down) {      cy2=y1 + curvature;    } else {      cy2=y1 - curvature;    }  }  path.curveTo(cx1,cy1,cx2,cy2,x2,y2);}  }
class C{  @Override public PolynomialSplineFunction interpolate(double[] xvals,double[] yvals) throws MathIllegalArgumentException {  if (xvals == null || yvals == null) {    throw new NullArgumentException();  }  MathArrays.checkEqualLength(xvals,yvals);  if (xvals.length < MINIMUM_NUMBER_POINTS) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_POINTS,xvals.length,MINIMUM_NUMBER_POINTS,true);  }  MathArrays.checkOrder(xvals);  final int numberOfDiffAndWeightElements=xvals.length - 1;  final double[] differences=new double[numberOfDiffAndWeightElements];  final double[] weights=new double[numberOfDiffAndWeightElements];  for (int i=0; i < differences.length; i++) {    differences[i]=(yvals[i + 1] - yvals[i]) / (xvals[i + 1] - xvals[i]);  }  for (int i=1; i < weights.length; i++) {    weights[i]=FastMath.abs(differences[i] - differences[i - 1]);  }  final double[] firstDerivatives=new double[xvals.length];  for (int i=2; i < firstDerivatives.length - 2; i++) {    final double wP=weights[i + 1];    final double wM=weights[i - 1];    if (Precision.equals(wP,0.0) && Precision.equals(wM,0.0)) {      final double xv=xvals[i];      final double xvP=xvals[i + 1];      final double xvM=xvals[i - 1];      firstDerivatives[i]=(((xvP - xv) * differences[i - 1]) + ((xv - xvM) * differences[i])) / (xvP - xvM);    } else {      firstDerivatives[i]=((wP * differences[i - 1]) + (wM * differences[i])) / (wP + wM);    }  }  firstDerivatives[0]=differentiateThreePoint(xvals,yvals,0,0,1,2);  firstDerivatives[1]=differentiateThreePoint(xvals,yvals,1,0,1,2);  firstDerivatives[xvals.length - 2]=differentiateThreePoint(xvals,yvals,xvals.length - 2,xvals.length - 3,xvals.length - 2,xvals.length - 1);  firstDerivatives[xvals.length - 1]=differentiateThreePoint(xvals,yvals,xvals.length - 1,xvals.length - 3,xvals.length - 2,xvals.length - 1);  return interpolateHermiteSorted(xvals,yvals,firstDerivatives);}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HostileUp_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200835,skillcaster,value0,skillname);}  }
class C{  public void sync() throws CanceledException {  if (!inSync) {    inSync=true;    String dataSetName="Data";    ((Plot2DDrawer)getChartDrawer()).setShowLines(dataSetName,false);    ((Plot2DDrawer)getChartDrawer()).setShowDots(dataSetName,true);    ((Plot2DDrawer)getChartDrawer()).setUseJitter(dataSetName,true);    getChartColorManager().setSampleColor(dataSetName,Color.GRAY);    setShowLegend("none");    String graphName="Menten Kinetics";    ((Plot2DDrawer)getChartDrawer()).setShowLines(graphName,true);    ((Plot2DDrawer)getChartDrawer()).setShowDots(graphName,false);    IPlot2DData chartData=(IPlot2DData)getChartData();    chartData.clear();    LinkedList<Pair<Number,Number>> values=new LinkedList<>();    SortedMap<Number,Number> rank2percentage=new TreeMap<>();    WordCountAnalysis.apply(alignmentViewer.getAlignment(),kmer,step,mindepth,((Director)dir).getDocument().getProgressListener(),values,rank2percentage);    Single<Integer> extrapolatedCount=new Single<>();    LinkedList<Pair<Number,Number>> mentenKinetics=WordCountAnalysis.computeMentenKinetics(values,extrapolatedCount);    chartData.setDataForSeries(graphName,mentenKinetics);    getChartColorManager().setSampleColor(graphName,Color.BLUE);    if (extrapolatedCount.get() != null && extrapolatedCount.get() > 0) {      LinkedList<Pair<Number,Number>> exCount=new LinkedList<>();      Pair<Number,Number> range=chartData.getRangeX();      exCount.add(new Pair<Number,Number>(range.getFirst(),extrapolatedCount.get()));      exCount.add(new Pair<Number,Number>(range.getSecond(),extrapolatedCount.get()));      chartData.setDataForSeries("Extrapolation",exCount);      ((Plot2DDrawer)getChartDrawer()).setShowLines("Extrapolation",true);      ((Plot2DDrawer)getChartDrawer()).setShowDots("Extrapolation",false);      getChartColorManager().setSampleColor("Extrapolation",ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);    }    double predicted=0;    if (mentenKinetics.size() > 0)     predicted=mentenKinetics.getLast().getSecond().doubleValue();    chartData.setDataForSeries(dataSetName,values);    getStatusbar().setText1("Size: " + values.size());    Pair<Float,Float> averageNandK=WordCountAnalysis.computeAverageNandK(values);    getStatusbar().setText2(String.format("Average diversity ratio: %.1f/%.1f = %.1f. Distinct genomes: min=%d extrapolation=%d",averageNandK.get2(),averageNandK.get1(),averageNandK.get1() > 0 ? averageNandK.get2() / averageNandK.get1() : 0,(int)Math.round(predicted),extrapolatedCount.get()));    getChartData().setSeriesLabel("Number of sequences (n)");    getChartData().setCountsLabel("Number of distinct sequences (k)");    super.sync();    inSync=false;  }}  }
class C{  public ClarifaiClient() throws ClarifaiException {  this(getEnvironmentVariable("CLARIFAI_APP_ID"),getEnvironmentVariable("CLARIFAI_APP_SECRET"));}  }
class C{  public synchronized void removeAllFor(String nodeId){  RoutesMap rl=forwardTable.remove(nodeId);  if (rl == null) {    Set<String> targets=inverseTable.remove(nodeId);    if (targets != null) {      for (      String to : targets) {        RoutesMap trl=forwardTable.get(to);        if (trl != null) {          trl.remove(nodeId);          if (trl.size() == 0) {            forwardTable.remove(to);          }        }      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SKIN_CHANGE_TIME_LEFT(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400482,value1,value0);}  }
class C{  protected String[] upload_file(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final byte cmd=ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE;  return this.upload_file(cmd,group_name,local_filename,file_ext_name,meta_list);}  }
class C{  @Override public Filter createFilter(){  return new DisjointExtended();}  }
class C{  public long skip(long n) throws IOException {  long totalSkipped=0;  long skipped;  while (totalSkipped < n) {    skipped=in.skip(n - totalSkipped);    if (totalSkipped == -1)     throw new IOException("skip not supported"); else     if (skipped == 0)     return 0; else     totalSkipped+=totalSkipped + skipped;  }  if (firstRead)   firstRead=false;  return totalSkipped;}  }
class C{  public Builder maxZoom(Number maxZoom){  this.maxZoom=maxZoom;  return this;}  }
class C{  public void addCategoryLimitations(boolean include,String... categoryVelocityVarNames){  query.append(" " + (include ? "+" : "-") + "(");  for (  String categoryVelocityVarName : categoryVelocityVarNames) {    query.append("categories:" + escapeValue(categoryVelocityVarName) + " ");  }  query.append(")");}  }
class C{  public static void splitTexts(String sFile){  try {    FileReader frIn=new FileReader(sFile);    BufferedReader brIn=new BufferedReader(frIn);    String sText="";    String sLine;    while ((sLine=brIn.readLine()) != null) {      sText+=sLine;    }    String[] sSplitLine=sText.split("\\s*#[0-9]+\\s*-{8,}\\s*\\S*\\s*-{8,}\\s*|\\s*-{8,}\\s*\\S*\\s*-{8,}\\s*");    sText="";    for (int iCnt=0; iCnt < sSplitLine.length; iCnt++) {      sText=sSplitLine[iCnt];      if (sText.length() > 0) {        FileWriter fwOut=new FileWriter(sFile + iCnt);        System.out.println("TEXT " + iCnt + ":\n"+ sText+ "\n\n");        fwOut.write(sText);        fwOut.close();      }    }    frIn.close();    brIn.close();  } catch (  FileNotFoundException fnfE) {    System.err.println(fnfE.getMessage());    fnfE.printStackTrace();    System.exit(1);  }catch (  IOException ioe) {    System.err.println(ioe.getMessage());    ioe.printStackTrace();    System.exit(2);  }}  }
class C{  public double mannWhitneyUTest(final double[] x,final double[] y) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  ensureDataConformance(x,y);  final double Umax=mannWhitneyU(x,y);  final double Umin=(long)x.length * y.length - Umax;  return calculateAsymptoticPValue(Umin,x.length,y.length);}  }
class C{  public static Tuple min(Iterator tuples,String field){  return min(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public boolean isPerLogicalSubjectLockObject(boolean isEvictable){  return !isEvictable;}  }
class C{  public IdentifyFacesAction identifyFaces(List<String> faceIds,String personGroupId,int maxNumOfCandidatesReturned){  Validation.validateArray(faceIds,1,10,new ParameterValidationException("faceIds","length must be between 1 & 10"));  Validation.validateInt(maxNumOfCandidatesReturned,5,new ParameterValidationException("maxNumOfCandidatesReturned","maxNumOfCandidatesReturned must be between 1 & 5"));  return new IdentifyFacesAction(cognitiveContext,faceIds,personGroupId,maxNumOfCandidatesReturned);}  }
class C{  public static String bind(String id,String binding1,String binding2){  return bind(id,new String[]{binding1,binding2});}  }
class C{  public int removeStack(int amount){  stack-=amount;  if (stack < 0) {    int remainder=stack * -1;    stack=0;    return remainder;  }  return 0;}  }
class C{  public static String forgotPassword(HttpServletRequest request,HttpServletResponse response){  if ((UtilValidate.isNotEmpty(request.getParameter("GET_PASSWORD_HINT"))) || (UtilValidate.isNotEmpty(request.getParameter("GET_PASSWORD_HINT.x")))) {    return showPasswordHint(request,response);  } else   if ((UtilValidate.isNotEmpty(request.getParameter("EMAIL_PASSWORD"))) || (UtilValidate.isNotEmpty(request.getParameter("EMAIL_PASSWORD.x")))) {    return emailPassword(request,response);  } else {    return "success";  }}  }
class C{  private void reloadNewConfiguration(){  boolean wasPlaying=isPlaying();  setWeather(currentWeather,currentWeather == Constants.weatherStatus.RAIN ? rainTime : snowTime,fadeOutTime,currentWeather == Constants.weatherStatus.RAIN ? rainParticles : snowParticles);  if (wasPlaying)   startAnimation();}  }
class C{  public void pause(){  Future<?> fillFuture;synchronized (this) {    if (_paused && _fillFuture == null) {      return;    }    _paused=true;    fillFuture=_fillFuture;  }  if (fillFuture != null) {    try {      fillFuture.get();    } catch (    Throwable t) {      _log.error("Unexpected exception waiting for queue pause to complete: {}",_name,t);    }synchronized (this) {      if (fillFuture == _fillFuture) {        _fillFuture=null;      }    }  }}  }
class C{  public SM_RECONNECT_KEY(int key){  this.key=key;}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  public static String addCategoryDefaults(HttpServletRequest request,HttpServletResponse response){  String itemGroupNumber=request.getParameter("itemGroupNumber");  String categoryId=request.getParameter("category_id");  String catalogId=CatalogWorker.getCurrentCatalogId(request);  ShoppingCart cart=getCartObject(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  BigDecimal totalQuantity;  Locale locale=UtilHttp.getLocale(request);  result=cartHelper.addCategoryDefaults(catalogId,categoryId,itemGroupNumber);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    totalQuantity=(BigDecimal)result.get("totalQuantity");    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("totalQuantity",UtilFormatOut.formatQuantity(totalQuantity.doubleValue()));    request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.add_category_defaults",messageMap,locale));    return "success";  }}  }
class C{  public ResourceUnit findBrokerForPlacement(Multimap<Long,ResourceUnit> finalCandidates){  if (finalCandidates.isEmpty()) {    return null;  }  log.debug("Total Final Candidates selected - [{}]",finalCandidates.size());  int totalAvailability=0;  for (  Map.Entry<Long,ResourceUnit> candidateOwner : finalCandidates.entries()) {    totalAvailability+=candidateOwner.getKey().intValue();  }  ResourceUnit selectedRU=null;  if (totalAvailability <= 0) {    return Iterables.get(finalCandidates.get(0L),rand.nextInt(finalCandidates.size()));  }  int weightedSelector=rand.nextInt(totalAvailability);  log.debug("Generated Weighted Selector Number - [{}] ",weightedSelector);  int weightRangeSoFar=0;  for (  Map.Entry<Long,ResourceUnit> candidateOwner : finalCandidates.entries()) {    weightRangeSoFar+=candidateOwner.getKey();    if (weightedSelector < weightRangeSoFar) {      selectedRU=candidateOwner.getValue();      log.debug(" Weighted Round Robin Selected RU - [{}]",candidateOwner.getValue().getResourceId());      break;    }  }  return selectedRU;}  }
class C{  public static byte[] readInputStreamToByteArray(InputStream is) throws IOException {  ByteArrayOutputStream bos=null;  try {    bos=new ByteArrayOutputStream();    readInputStream(bos,is);  }  finally {    if (null != bos) {      bos.close();    }  }  if (null != bos) {    return bos.toByteArray();  }  return null;}  }
class C{  public void removeBites(){  setImageDrawable(drawableChomp);  bitesTakenMap=new HashMap<>();  for (  int direction : BITE_DIRECTIONS_LIST) {    bitesTakenMap.put(direction,0);  }  hasAllBitesTaken=false;  numBitesForOneDirection=(imageCircleRadius * 2) / biteRadius;}  }
class C{  public void apply(ProgressListener progressListener) throws CanceledException {  this.progressListener=progressListener;  progressListener.setTasks("Resampling statistical test","setup");  System.err.println("Starting random sampling comparison test...");  System.err.println("Resampling size: " + getOptionResamplingSize());  System.err.println("Repeatitions: " + getOptionRepeatitions());  System.err.println("Left " + getOptionLeftPercentile() + ", right "+ getOptionRightPercentile());  Set<Integer> genelist=unionOfInputs.keySet();  int[] sample1=new int[unionOfInputs.size()];  int[] sample2=new int[unionOfInputs.size()];  int count1=0;  for (  Integer s1 : genelist) {    sample1[count1++]=unionOfInputs.get(s1)[0];  }  int count2=0;  for (  Integer s2 : genelist) {    sample2[count2++]=unionOfInputs.get(s2)[1];  }  double[] median=computeMedians(sample1,sample2,resamplingSize,repeatitions);  int[][] p05_95=computePercentileLimits(useSecond ? sample2 : sample1,resamplingSize,repeatitions,p_left,p_right);  System.err.println("########################");  for (int i=0; i < median.length; i++) {    System.err.println("m_" + i + " "+ median[i]+ "  "+ "p05_"+ i+ " "+ p05_95[i][0]+ "  "+ "p95_"+ i+ " "+ p05_95[i][1]+ "  "+ "p50_"+ i+ " "+ p05_95[i][2]);  }  Result[] differ=compareMedianToPercentilslimits(median,p05_95);  int count3=0;  for (  Integer s3 : genelist) {    System.err.println("scale value of " + s3 + " pushed into the result");    resultOfScalevalue.put(s3,differ[count3++].scale);  }}  }
class C{  public ASPECT_RATIO findAspectRatio(int w,int h){  int primes[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};  int w_lcd=w, h_lcd=h;  for (  int i : primes) {    while (w_lcd >= i && h_lcd >= i && w_lcd % i == 0 && h_lcd % i == 0) {      w_lcd/=i;      h_lcd/=i;    }  }  for (  PixelSizeToAspectRatio aspectRatio : aspectRatios) {    if (w_lcd == aspectRatio.width && h_lcd == aspectRatio.height)     return aspectRatio.aspectRatio;  }  return (ASPECT_RATIO._UNIQUE);}  }
class C{  private static void paintHorizontalCenterConstraint(NlGraphics graphics,Rectangle sourceBounds,Rectangle targetBounds){  graphics.useStyle(GUIDELINE_DASHED);  graphics.drawLine(centerX(targetBounds),targetBounds.y,centerX(targetBounds),y2(targetBounds));  graphics.useStyle(GUIDELINE);  graphics.drawLine(centerX(sourceBounds),sourceBounds.y,centerX(sourceBounds),y2(sourceBounds));}  }
class C{  public void updateReductionStatistics(){  DataReductionProxySettings config=DataReductionProxySettings.getInstance();  DataReductionStatsPreference statsPref=(DataReductionStatsPreference)getPreferenceScreen().findPreference(PREF_DATA_REDUCTION_STATS);  long original[]=config.getOriginalNetworkStatsHistory();  long received[]=config.getReceivedNetworkStatsHistory();  statsPref.setReductionStats(config.getDataReductionLastUpdateTime(),getNetworkStatsHistory(original,DAYS_IN_CHART),getNetworkStatsHistory(received,DAYS_IN_CHART));}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  Log.e(TAG,"onMeasure(" + View.MeasureSpec.toString(widthMeasureSpec) + ", "+ View.MeasureSpec.toString(heightMeasureSpec)+ ")");  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  Log.e(TAG,"mCurrentAspectRatio " + mCurrentAspectRatio);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    Log.e(TAG,String.format("measure size: %d %d %d %d",widthSpecMode,widthSpecSize,heightSpecMode,heightSpecSize));    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      Log.e(TAG,"AT_MOST");      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {Log.e(TAG,"both EXACTLY");width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {Log.e(TAG,"width EXACTLY");width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {Log.e(TAG,"height EXACTLY");height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {Log.e(TAG,"neither the width nor the height are fixed, try to use actual video size");width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {Log.e(TAG,"no size yet, just adopt the given spec sizes");}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int width=display.getWidth();  int height=display.getHeight();  if (width < height) {    Log.i(TAG,"Display reports portrait orientation; assuming this is incorrect");    int temp=width;    width=height;    height=temp;  }  screenResolution=new Point(height,width);  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,new Point(width,height),false);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  @VisibleForTesting ExponentialBackoffScheduler createBackoffScheduler(String prefPackage,Context context,long base,long max){  return new ExponentialBackoffScheduler(prefPackage,context,base,max);}  }
class C{  private void adjustLeftRightByAspectRatio(RectF rect,RectF bounds,float aspectRatio){  rect.inset((rect.width() - rect.height() * aspectRatio) / 2,0);  if (rect.left < bounds.left) {    rect.offset(bounds.left - rect.left,0);  }  if (rect.right > bounds.right) {    rect.offset(bounds.right - rect.right,0);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParameterDeclaration fullCopy(){  ParameterDeclaration tree=(ParameterDeclaration)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public AudioGetQuery needUser(Boolean value){  return unsafeParam("need_user",value);}  }
class C{  @SuppressWarnings("unused") public void addSlide(SlideFragment slideFragment){  adapter.addItem(slideFragment);}  }
class C{  public void init$Children(){}  }
class C{  public static void delete(W q){  Helper.delete(q,AuthToken.class);}  }
class C{  public int read() throws IOException {  if (frameSize != 1) {    throw new IOException("cannot read a single byte if frame size > 1");  }  byte[] data=new byte[1];  int temp=read(data);  if (temp <= 0) {    return -1;  }  return data[0] & 0xFF;}  }
class C{  public static <K,T,V>MultiDimensionalMap<K,T,V> newHashBackedMap(){  return new MultiDimensionalMap<>(new HashMap<Pair<K,T>,V>());}  }
class C{  @SuppressLint("NewApi") void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  public void testCorpusFile(){  byte[] inputBytes=("title\0one\0\0id\000123\0\0content\0body\0text\0\0\0" + "title\0two\0\0id\000456\0\0content\0some\0more\0body\0text\0\0\0" + "\0").getBytes(StandardCharsets.UTF_8);  ByteArrayInputStream input=new ByteArrayInputStream(inputBytes);  ByteArrayOutputStream output=new ByteArrayOutputStream();  DocumentProcessor processor=new DocumentProcessor(output);  CorpusFile corpus=new CorpusFile(input);  corpus.process(processor);  byte[] outputBytes=output.toByteArray();  assertTrue(Arrays.equals(outputBytes,inputBytes));}  }
class C{  public boolean normalize(){  ArrayList<S2CellId> output=new ArrayList<S2CellId>(cellIds.size());  output.ensureCapacity(cellIds.size());  Collections.sort(cellIds);  for (  S2CellId id : this) {    int size=output.size();    if (!output.isEmpty() && output.get(size - 1).contains(id)) {      continue;    }    while (!output.isEmpty() && id.contains(output.get(output.size() - 1))) {      output.remove(output.size() - 1);    }    while (output.size() >= 3) {      size=output.size();      if ((output.get(size - 3).id() ^ output.get(size - 2).id() ^ output.get(size - 1).id()) != id.id()) {        break;      }      long mask=id.lowestOnBit() << 1;      mask=~(mask + (mask << 1));      long idMasked=(id.id() & mask);      if ((output.get(size - 3).id() & mask) != idMasked || (output.get(size - 2).id() & mask) != idMasked || (output.get(size - 1).id() & mask) != idMasked || id.isFace()) {        break;      }      output.remove(size - 1);      output.remove(size - 2);      output.remove(size - 3);      id=id.parent();    }    output.add(id);  }  if (output.size() < size()) {    initRawSwap(output);    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_ALREADYUNSEAL(String value0){  return new SM_SYSTEM_MESSAGE(1400830,value0);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public BlockId currentBlk(){  return blk;}  }
class C{  public void toOrigin(){  this.translation.zero();}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)((float)Math.ceil(result));}  }
class C{  public void java_net_InetAddressImpl_getHostByAddr(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public NotRegexSpacePredicate(String pattern){  super(pattern,null);  if (pattern == null)   throw new IllegalArgumentException("Argument 'pattern' cannot be null.");}  }
class C{  private void addPortBindings(CommandInput input,PortBinding[] portBindings){  Map<String,Map<String,String>> exposedPortsMap=new HashMap<>();  input.withProperty(DOCKER_CONTAINER_EXPOSED_PORTS_PROP_NAME,exposedPortsMap);  Map<String,Object> hostConfig=getOrAddMap(input,DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME);  Map<String,List<Map<String,String>>> portBindingsMap=new HashMap<>();  hostConfig.put(DOCKER_CONTAINER_PORT_BINDINGS_PROP_NAME,portBindingsMap);  for (  PortBinding portBinding : portBindings) {    exposedPortsMap.put(portBinding.containerPort,Collections.emptyMap());    DockerPortMapping mapping=DockerPortMapping.fromString(portBinding.toString());    Map<String,List<Map<String,String>>> portDetails=mapping.toMap();    portBindingsMap.putAll(portDetails);  }}  }
class C{  protected byte[] padBuffer(){  int length=BLOCK_LENGTH - (int)(count % BLOCK_LENGTH);  if (length == 0) {    length=BLOCK_LENGTH;  }  byte[] pad=new byte[length];  for (int i=0; i < length; i++) {    pad[i]=(byte)length;  }  return pad;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParseName fullCopy(){  ParseName tree=(ParseName)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void onWebsocketPong(WebSocket conn,Framedata f){}  }
class C{  public SourceContextAndPath extendPath(Abstraction abs,boolean trackPath){  if (abs == null)   return this;  if (abs.getCurrentStmt() == null && abs.getCorrespondingCallSite() == null)   return this;  if (abs.getCorrespondingCallSite() == null && !trackPath)   return this;  if (this.path != null)   for (  Abstraction a : this.path)   if (a == abs)   return null;  SourceContextAndPath scap=clone();  if (trackPath && abs.getCurrentStmt() != null) {    if (scap.path == null)     scap.path=new ArrayList<Abstraction>();    scap.path.add(0,abs);  }  if (abs.getCorrespondingCallSite() != null && abs.getCorrespondingCallSite() != abs.getCurrentStmt()) {    if (scap.callStack == null)     scap.callStack=new ArrayList<Stmt>();    scap.callStack.add(0,abs.getCorrespondingCallSite());  }  return scap;}  }
