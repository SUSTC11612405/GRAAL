class C{  public EsriPointList(int initialCapacity){  super(initialCapacity);}  }
class C{  public AllAccessExporter(String input,byte[] cpData) throws NoSuchAlgorithmException, NoSuchPaddingException, IOException {  mCipher=Cipher.getInstance("AES/CTR/NoPadding");  mKeySpec=new SecretKeySpec(cpData,"AES");  mInput=new FileInputStream(input);  mMagicNumber=new byte[4];  if (mInput.read(mMagicNumber) != 4)   mMagicNumber=null;}  }
class C{  int numHeaders(){  return (dataStart / 128);}  }
class C{  public int dequeue(){  int v=elements[0];  int[] temp=new int[elements.length];  System.arraycopy(elements,1,temp,0,size);  elements=temp;  size--;  return v;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.COMMENT___INLINE_COMMENT_1:    getInlineComment_1().clear();  return;case UmplePackage.COMMENT___MULTILINE_COMMENT_1:getMultilineComment_1().clear();return;}super.eUnset(featureID);}  }
class C{  @Action(value="/receipts/challan-viewChallan") @ValidationErrorPage(value=ERROR) @SkipValidation public String viewChallan(){  if (challanId == null)   receiptHeader=receiptHeaderService.findById(receiptId,false); else   receiptHeader=(ReceiptHeader)persistenceService.findByNamedQuery(CollectionConstants.QUERY_RECEIPT_BY_CHALLANID,Long.valueOf(challanId));  setLoginDept();  loadReceiptDetails();  return VIEW;}  }
class C{  public EclipseRunner outsideJvmRunner(Project project) throws IOException {  return null;}  }
class C{  public DateMidnight withMillis(long newMillis){  Chronology chrono=getChronology();  newMillis=checkInstant(newMillis,chrono);  return (newMillis == getMillis() ? this : new DateMidnight(newMillis,chrono));}  }
class C{  @NotNull public <T>List<T> findAll(@NotNull Class<T> cl,@NotNull @SQL String sql,Object... args){  return findAll(cl,SqlQuery.query(sql,args));}  }
class C{  @Nonnull public List<T_ENTITY> findForIds(@Nonnull List<Integer> ids){  String prefix="x";  NamedParameter parameter=new NamedParameter(BaseEntity.PROPERTY_ID,"id",ids);  StringBuilder sb=new StringBuilder();  sb.append(buildQlSelect(prefix)).append(startWhere()).append(buildWhereClause(Operation.IN,prefix,parameter));  return listWithJQL(sb.toString(),parameter);}  }
class C{  public JsonObject add(String name,int value){  add(name,Json.value(value));  return this;}  }
class C{  public void addNotify(){  super.addNotify();  textArea.addCaretListener(listener);  textArea.addPropertyChangeListener(RSyntaxTextArea.PARSER_NOTICES_PROPERTY,listener);  textArea.addPropertyChangeListener(RSyntaxTextArea.MARK_OCCURRENCES_PROPERTY,listener);  textArea.addPropertyChangeListener(RSyntaxTextArea.MARKED_OCCURRENCES_CHANGED_PROPERTY,listener);  refreshMarkers();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public PortUserError(Port port,int code,Object... arguments){  super(port.getPorts().getOwner().getOperator(),code,arguments);  this.port=port;}  }
class C{  public void onAccountsUpdated(Account[] accounts){}  }
class C{  public static boolean isAccountResetByEndUser(){  return RegistryFactory.getFactory().readBoolean(REGISTRY_RCS_ACCOUNT_MANUALY_DELETED,false);}  }
class C{  @Override protected void onPostCreate(@Nullable Bundle savedInstanceState){  mPermissionRequest=PermissionRequest.with(this).permissions(Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE).rationale(R.string.permission_read_write_rationale).granted(R.string.permission_read_write_granted).denied(R.string.permission_read_write_denied).snackbar((ViewGroup)findViewById(android.R.id.content)).submit();  super.onPostCreate(savedInstanceState);}  }
class C{  public static boolean isAudio(String mimeType){  if (mimeType != null) {    if (mimeType.startsWith("audio/"))     return true; else     return false;  } else   return false;}  }
class C{  public static AppletListener remove(AppletListener l,AppletListener oldl){  return removeInternal(l,oldl);}  }
class C{  public static void writeln(ObjectReference o,boolean flush){  write(o);  writelnWithFlush(flush);}  }
class C{  @SuppressWarnings("cast") @Override public void clear(){  if (status != DequeStatus.Empty) {    int cursor=front;    do {      elements[cursor]=null;      cursor=circularBiggerPos(cursor);    } while (cursor != rear);    status=DequeStatus.Empty;  }  front=rear=0;  modCount=0;}  }
class C{  private void resetSerializerBase(){  this.m_attributes.clear();  this.m_CdataElems=null;  this.m_cdataTagOpen=false;  this.m_docIsEmpty=true;  this.m_doctypePublic=null;  this.m_doctypeSystem=null;  this.m_doIndent=false;  this.m_elemContext=new ElemContext();  this.m_indentAmount=0;  this.m_inEntityRef=false;  this.m_inExternalDTD=false;  this.m_mediatype=null;  this.m_needToCallStartDocument=true;  this.m_needToOutputDocTypeDecl=false;  if (m_OutputProps != null)   this.m_OutputProps.clear();  if (m_OutputPropsDefault != null)   this.m_OutputPropsDefault.clear();  if (this.m_prefixMap != null)   this.m_prefixMap.reset();  this.m_shouldNotWriteXMLHeader=false;  this.m_sourceLocator=null;  this.m_standalone=null;  this.m_standaloneWasSpecified=false;  this.m_StringOfCDATASections=null;  this.m_tracer=null;  this.m_transformer=null;  this.m_version=null;}  }
class C{  private void cmd_file(){  Media imageFile=null;  try {    imageFile=Fileupload.get();    if (imageFile == null)     return;  } catch (  InterruptedException e) {    log.warning(e.getLocalizedMessage());    return;  }  String fileName=imageFile.getName();  try {    InputStream is=imageFile.getStreamData();    AImage aImage=new AImage(fileName,is);    image.setContent(aImage);    is.close();  } catch (  Exception e) {    log.log(Level.WARNING,"load image",e);    return;  }  fileButton.setLabel(imageFile.getName());  invalidate();  if (m_mImage == null)   m_mImage=MImage.get(Env.getCtx(),0);  m_mImage.setName(fileName);  m_mImage.setImageURL(fileName);  if (image.getContent() != null)   m_mImage.setBinaryData(image.getContent().getByteData()); else   m_mImage.setBinaryData(null);}  }
class C{  public void addWeapon(WeaponAttackAction attack){  final Entity entity=this.boardView1.game.getEntity(attack.getEntityId());  final WeaponType wtype=(WeaponType)entity.getEquipment(attack.getWeaponId()).getType();  final String roll=attack.toHit(this.boardView1.game).getValueAsString();  final String table=attack.toHit(this.boardView1.game).getTableDesc();  weaponDescs.add(wtype.getName() + Messages.getString("BoardView1.needs") + roll+ " "+ table);}  }
class C{  public void gotoOffset(final long offset){  Preconditions.checkNotNull(m_dataProvider,"Error: No data provider active");  if (getCurrentOffset() == offset) {    if (!isPositionVisible(getSelectionStart())) {      scrollToPosition(getSelectionStart());    }    return;  }  long realOffset;  if (offset < m_baseAddress) {    realOffset=offset;  } else {    realOffset=offset - m_baseAddress;  }  if ((realOffset < 0) || (realOffset >= m_dataProvider.getDataLength())) {    throw new IllegalArgumentException("Error: Invalid offset");  }  setCurrentPosition(2 * realOffset);}  }
class C{  public void addTunerConfiguration(TunerConfiguration config){  if (!mTunerConfigurations.contains(config) && config.getUniqueID() != null && config.getName() != null) {    mTunerConfigurations.add(config);    int index=mTunerConfigurations.indexOf(config);    fireTableRowsInserted(index,index);    broadcast(new TunerConfigurationEvent(config,Event.ADD));  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  FilesDao.createTable(db,ifNotExists);  InjectorDbDao.createTable(db,ifNotExists);}  }
class C{  public boolean findUniqueBoolean(@NotNull @SQL String sql,Object... args){  return findUniqueBoolean(SqlQuery.query(sql,args));}  }
class C{  public LinkedHashSet(){  super(16,.75f,true);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="mu";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private static void executeDecisionTask(String taskToken,List<HistoryEvent> events) throws Throwable {  List<Decision> decisions=new ArrayList<Decision>();  String workflow_input=null;  int scheduled_activities=0;  int open_activities=0;  boolean activity_completed=false;  String result=null;  System.out.println("Executing the decision task for the history events: [");  for (  HistoryEvent event : events) {    System.out.println("  " + event);switch (event.getEventType()) {case "WorkflowExecutionStarted":      workflow_input=event.getWorkflowExecutionStartedEventAttributes().getInput();    break;case "ActivityTaskScheduled":  scheduled_activities++;break;case "ScheduleActivityTaskFailed":scheduled_activities--;break;case "ActivityTaskStarted":scheduled_activities--;open_activities++;break;case "ActivityTaskCompleted":open_activities--;activity_completed=true;result=event.getActivityTaskCompletedEventAttributes().getResult();break;case "ActivityTaskFailed":open_activities--;break;case "ActivityTaskTimedOut":open_activities--;break;}}System.out.println("]");if (activity_completed) {decisions.add(new Decision().withDecisionType(DecisionType.CompleteWorkflowExecution).withCompleteWorkflowExecutionDecisionAttributes(new CompleteWorkflowExecutionDecisionAttributes().withResult(result)));} else {if (open_activities == 0 && scheduled_activities == 0) {ScheduleActivityTaskDecisionAttributes attrs=new ScheduleActivityTaskDecisionAttributes().withActivityType(new ActivityType().withName(HelloTypes.ACTIVITY).withVersion(HelloTypes.ACTIVITY_VERSION)).withActivityId(UUID.randomUUID().toString()).withInput(workflow_input);decisions.add(new Decision().withDecisionType(DecisionType.ScheduleActivityTask).withScheduleActivityTaskDecisionAttributes(attrs));} else {}}System.out.println("Exiting the decision task with the decisions " + decisions);swf.respondDecisionTaskCompleted(new RespondDecisionTaskCompletedRequest().withTaskToken(taskToken).withDecisions(decisions));}  }
class C{  public boolean isIdGenerated(){  return getIdAnnotations().stream().anyMatch(null);}  }
class C{  public static ServiceFault toServiceFault(Throwable t){  ResponseHeader rh=new ResponseHeader();  ServiceFault result=new ServiceFault(rh);  rh.setServiceResult(t instanceof ServiceResultException ? ((ServiceResultException)t).getStatusCode() : new StatusCode(StatusCodes.Bad_InternalError));  rh.setTimestamp(new DateTime());  List<String> stringTable=new ArrayList<String>();  DiagnosticInfo di=null;  while (t != null) {    if (di == null) {      rh.setServiceDiagnostics(di=new DiagnosticInfo());    } else {      di.setInnerDiagnosticInfo(di=new DiagnosticInfo());    }    di.setStringTable(stringTable);    di.setLocalizedTextStr(t instanceof ServiceResultException ? t.getMessage() : t.toString());    StringWriter sw=new StringWriter(100);    PrintWriter pw=new PrintWriter(sw);    for (    StackTraceElement e : t.getStackTrace())     pw.println("\tat " + e);    di.setAdditionalInfo(sw.toString());    di.setInnerStatusCode(t instanceof ServiceResultException ? ((ServiceResultException)t).getStatusCode() : new StatusCode(StatusCodes.Bad_InternalError));    t=t.getCause();  }  rh.setStringTable(stringTable.toArray(new String[stringTable.size()]));  return result;}  }
class C{  public boolean baseIsLeftToRight(){  return (getParaLevel() == Bidi.DIRECTION_LEFT_TO_RIGHT);}  }
class C{  private void writeSequenceRegionPart(final Protein protein,final int sequenceLength,final String md5,final String proteinIdFromGetorf) throws IOException {  for (  OpenReadingFrame orf : protein.getOpenReadingFrames()) {    final NucleotideSequence nucleotideSequence=orf.getNucleotideSequence();    final StringBuilder concatenatedNucSeqIdentifiers=new StringBuilder();    for (    final NucleotideSequenceXref nucleotideSequenceXref : nucleotideSequence.getCrossReferences()) {      String nucleotideSequenceXrefId=nucleotideSequenceXref.getIdentifier();      for (      ProteinXref proteinXref : protein.getCrossReferences()) {        String strippedProteinId=XrefParser.stripOfFinalUnderScore(proteinXref.getIdentifier());        if ((nucleotideSequenceXrefId.equals(strippedProteinId))) {          if (concatenatedNucSeqIdentifiers.length() > 0) {            concatenatedNucSeqIdentifiers.append(VALUE_SEPARATOR);          }          concatenatedNucSeqIdentifiers.append(nucleotideSequenceXrefId);        }      }    }    String concatenatedNucSeqIdentifiersStr=concatenatedNucSeqIdentifiers.toString();    if (concatenatedNucSeqIdentifiersStr.length() > 0) {      setNucleotideId(concatenatedNucSeqIdentifiersStr);      super.gffWriter.write("##sequence-region " + concatenatedNucSeqIdentifiersStr + " 1 "+ nucleotideSequence.getSequence().length());      super.gffWriter.write(getNucleicAcidLine(nucleotideSequence));      String proteinIdForGFF=buildProteinIdentifier(orf);      proteinIdForGFF=getValidGFF3SeqId(proteinIdForGFF);      addFASTASeqToMap(proteinIdForGFF,protein.getSequence());      super.gffWriter.write(getORFLine(orf,proteinIdFromGetorf,proteinIdForGFF,sequenceLength));      super.gffWriter.write(getPolypeptideLine(sequenceLength,proteinIdForGFF,md5));    } else {      throw new IllegalStateException("Cannot find the ORF object that maps to protein with PK / MD5: " + protein.getId() + " / "+ protein.getMd5());    }  }}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  @SuppressWarnings("deprecation") private static ValueSource buildFilterSource(IndexSchema schema,String expressionString,int sourceType){  String[] arguments=ExpressionFactory.getArguments(expressionString);  if (arguments.length != 2) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid arguments were given for \"" + AnalyticsParams.FILTER + "\".");  }  ValueSource delegateSource=buildSourceTree(schema,arguments[0],sourceType);  if (delegateSource == null) {    return null;  }  Object defaultObject;  ValueSource src=delegateSource;  if (delegateSource instanceof FilterFieldSource) {    src=((FilterFieldSource)delegateSource).getRootSource();  }  if (src instanceof IntFieldSource) {    try {      defaultObject=new Integer(arguments[1]);    } catch (    NumberFormatException e) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value " + arguments[1] + " cannot be converted into an integer.",e);    }  } else   if (src instanceof DateFieldSource || src instanceof MultiDateFunction) {    defaultObject=DateMathParser.parseMath(null,arguments[1]);  } else   if (src instanceof LongFieldSource) {    try {      defaultObject=new Long(arguments[1]);    } catch (    NumberFormatException e) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value " + arguments[1] + " cannot be converted into a long.",e);    }  } else   if (src instanceof FloatFieldSource) {    try {      defaultObject=new Float(arguments[1]);    } catch (    NumberFormatException e) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value " + arguments[1] + " cannot be converted into a float.",e);    }  } else   if (src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction || src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {    try {      defaultObject=new Double(arguments[1]);    } catch (    NumberFormatException e) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value " + arguments[1] + " cannot be converted into a double.",e);    }  } else {    defaultObject=arguments[1];  }  return new FilterFieldSource(delegateSource,defaultObject);}  }
class C{  public SerializableList(final Deserializer deserializer,final ObjectDeserializer<T> elementDeserializer){  super(deserializer,elementDeserializer);}  }
class C{  void decRefWhileHandlingException(Collection<String> files){  assert locked();  Set<String> toDelete=new HashSet<>();  for (  final String file : files) {    try {      if (decRef(file)) {        toDelete.add(file);      }    } catch (    Throwable t) {    }  }  try {    deleteFiles(toDelete);  } catch (  Throwable t) {  }}  }
class C{  private void removeCycles2(int nindex,int visited[]){  visited[nindex]=2;  for (int i=0; i < graphMatrix[nindex].length; i++) {    if (graphMatrix[nindex][i] == DIRECTED) {      if (visited[i] == 0) {        removeCycles2(i,visited);        visited[i]=1;      } else       if (visited[i] == 2) {        if (nindex == i) {          graphMatrix[nindex][i]=0;        } else         if (graphMatrix[i][nindex] == DIRECTED) {          graphMatrix[i][nindex]=DOUBLE;          graphMatrix[nindex][i]=-DOUBLE;        } else {          graphMatrix[i][nindex]=REVERSED;          graphMatrix[nindex][i]=-REVERSED;        }      }    }  }}  }
class C{  protected void registerValidatorAttributes(){  addAttributeProcessor(new CustomValidatorLmlAttribute(),"validator","validate","method","action","check");  addAttributeProcessor(new ErrorMessageLmlAttribute(),"error","errorMsg","errorMessage","formError");  addAttributeProcessor(new HideOnEmptyInputLmlAttribute(),"hideOnEmpty","hideErrorOnEmpty");  addAttributeProcessor(new GreaterOrEqualLmlAttribute(),"orEqual","allowEqual","greaterOrEqual");  addAttributeProcessor(new GreaterThanLmlAttribute(),"value","min","greaterThan");  addAttributeProcessor(new LesserOrEqualLmlAttribute(),"orEqual","allowEqual","lesserOrEqual");  addAttributeProcessor(new LesserThanLmlAttribute(),"value","max","lesserThan");  addAttributeProcessor(new FormSuccessMessageLmlAttribute(),"success","successMsg","successMessage");  addAttributeProcessor(new TreatDisabledFieldsAsValidLmlAttribute(),"treatDisabledFieldsAsValid","disabledValid");  addAttributeProcessor(new DisableOnFormErrorLmlAttribute(),"disableOnError","disableOnFormError","formDisable");  addAttributeProcessor(new ErrorMessageLabelLmlAttribute(),"errorMessage","errorLabel","errorMsgLabel","errorMessageLabel");  addAttributeProcessor(new RequireCheckedLmlAttribute(),"requireChecked","formChecked","notCheckedError","uncheckedError");  addAttributeProcessor(new RequireUncheckedLmlAttribute(),"requireUnchecked","requireNotChecked","formUnchecked","checkedError");}  }
class C{  public final float tanFOV(){  return ((float)Math.tan(Math.toRadians(_fovY * 0.5)));}  }
class C{  public static IndexColumn create(Index index,Column column,IndexColumn indexColumn,int position){  return create(index,column,position,indexColumn.ascending,indexColumn.indexedLength);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  for (int i=0; i < userFormat.lineSeparator.length(); i++) {    char ch=userFormat.lineSeparator.charAt(i);switch (ch) {case '\r':      buffer.append("\\r");    break;case '\n':  buffer.append("\\n");break;case '\t':buffer.append("\\t");break;default :buffer.append("[" + ((int)ch) + "]");break;}}return ("XMLOutputter[omitDeclaration = " + false + ", "+ "encoding = "+ CharsetToolkit.UTF8+ ", "+ "omitEncoding = "+ false+ ", "+ "indent = '"+ "\t"+ "'"+ ", "+ "expandEmptyElements = "+ userFormat.expandEmptyElements+ ", "+ "lineSeparator = '"+ buffer.toString()+ "', "+ "textMode = "+ userFormat.mode+ "]");}  }
class C{  static void releaseSearchBuffer(SearchBuffer sb){  sb.empty();  searchBuffers.push(sb);}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public static boolean invertM(float[] mInv,int mInvOffset,float[] m,int mOffset){  final float src0=m[mOffset + 0];  final float src4=m[mOffset + 1];  final float src8=m[mOffset + 2];  final float src12=m[mOffset + 3];  final float src1=m[mOffset + 4];  final float src5=m[mOffset + 5];  final float src9=m[mOffset + 6];  final float src13=m[mOffset + 7];  final float src2=m[mOffset + 8];  final float src6=m[mOffset + 9];  final float src10=m[mOffset + 10];  final float src14=m[mOffset + 11];  final float src3=m[mOffset + 12];  final float src7=m[mOffset + 13];  final float src11=m[mOffset + 14];  final float src15=m[mOffset + 15];  final float atmp0=src10 * src15;  final float atmp1=src11 * src14;  final float atmp2=src9 * src15;  final float atmp3=src11 * src13;  final float atmp4=src9 * src14;  final float atmp5=src10 * src13;  final float atmp6=src8 * src15;  final float atmp7=src11 * src12;  final float atmp8=src8 * src14;  final float atmp9=src10 * src12;  final float atmp10=src8 * src13;  final float atmp11=src9 * src12;  final float dst0=(atmp0 * src5 + atmp3 * src6 + atmp4 * src7) - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);  final float dst1=(atmp1 * src4 + atmp6 * src6 + atmp9 * src7) - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);  final float dst2=(atmp2 * src4 + atmp7 * src5 + atmp10 * src7) - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);  final float dst3=(atmp5 * src4 + atmp8 * src5 + atmp11 * src6) - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);  final float dst4=(atmp1 * src1 + atmp2 * src2 + atmp5 * src3) - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);  final float dst5=(atmp0 * src0 + atmp7 * src2 + atmp8 * src3) - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);  final float dst6=(atmp3 * src0 + atmp6 * src1 + atmp11 * src3) - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);  final float dst7=(atmp4 * src0 + atmp9 * src1 + atmp10 * src2) - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);  final float btmp0=src2 * src7;  final float btmp1=src3 * src6;  final float btmp2=src1 * src7;  final float btmp3=src3 * src5;  final float btmp4=src1 * src6;  final float btmp5=src2 * src5;  final float btmp6=src0 * src7;  final float btmp7=src3 * src4;  final float btmp8=src0 * src6;  final float btmp9=src2 * src4;  final float btmp10=src0 * src5;  final float btmp11=src1 * src4;  final float dst8=(btmp0 * src13 + btmp3 * src14 + btmp4 * src15) - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);  final float dst9=(btmp1 * src12 + btmp6 * src14 + btmp9 * src15) - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);  final float dst10=(btmp2 * src12 + btmp7 * src13 + btmp10 * src15) - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);  final float dst11=(btmp5 * src12 + btmp8 * src13 + btmp11 * src14) - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);  final float dst12=(btmp2 * src10 + btmp5 * src11 + btmp1 * src9) - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);  final float dst13=(btmp8 * src11 + btmp0 * src8 + btmp7 * src10) - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);  final float dst14=(btmp6 * src9 + btmp11 * src11 + btmp3 * src8) - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);  final float dst15=(btmp10 * src10 + btmp4 * src8 + btmp9 * src9) - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);  final float det=src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;  if (det == 0.0f) {    return false;  }  final float invdet=1.0f / det;  mInv[mInvOffset]=dst0 * invdet;  mInv[1 + mInvOffset]=dst1 * invdet;  mInv[2 + mInvOffset]=dst2 * invdet;  mInv[3 + mInvOffset]=dst3 * invdet;  mInv[4 + mInvOffset]=dst4 * invdet;  mInv[5 + mInvOffset]=dst5 * invdet;  mInv[6 + mInvOffset]=dst6 * invdet;  mInv[7 + mInvOffset]=dst7 * invdet;  mInv[8 + mInvOffset]=dst8 * invdet;  mInv[9 + mInvOffset]=dst9 * invdet;  mInv[10 + mInvOffset]=dst10 * invdet;  mInv[11 + mInvOffset]=dst11 * invdet;  mInv[12 + mInvOffset]=dst12 * invdet;  mInv[13 + mInvOffset]=dst13 * invdet;  mInv[14 + mInvOffset]=dst14 * invdet;  mInv[15 + mInvOffset]=dst15 * invdet;  return true;}  }
class C{  public DataTablePairwiseMatrixExtractionAdapter(NumericalMatrix matrix,String[] rowNames,String[] columnNames,String[] tableColumnNames){  this(matrix,rowNames,columnNames,tableColumnNames,true);}  }
class C{  public String generateFileName(){  return new UniqueTestId().id + "_" + getCurrentTestClassName()+ "_"+ getCurrentTestMethodName()+ "_"+ getCurrentTestMethodLineNumber();}  }
class C{  private BooleanBinding lastFmLoginButtonDisableBinding(){  return Bindings.createBooleanBinding(null,lastFmUsernameTextField.textProperty(),lastFmPasswordField.textProperty());}  }
class C{  public void messageAcked(MessageType type,Short nodeId){  if (nodeId == null)   return;  if (!windowedTypes.contains(type))   return;  MessageWindow mw=messageWindows.get(nodeId);  if (mw == null)   return;  int pending=mw.pending.decrementAndGet();  if (pending < MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      mw.full.signalAll();    }  finally {      mw.lock.unlock();    }  }}  }
class C{  protected <T extends SpatialComparable>void strPartition(List<T> objs,int start,int end,int depth,int dims,int maxEntries,SpatialSingleMeanComparator c,List<List<T>> ret){  final int p=(int)Math.ceil((end - start) / (double)maxEntries);  final int s=(int)Math.ceil(Math.pow(p,1.0 / (dims - depth)));  final double len=end - start;  for (int i=0; i < s; i++) {    int s2=start + (int)((i * len) / s);    int e2=start + (int)(((i + 1) * len) / s);    if (e2 < end) {      c.setDimension(depth);      QuickSelect.quickSelect(objs,c,s2,end,e2);    }    if (depth + 1 == dims) {      ret.add(objs.subList(s2,e2));    } else {      strPartition(objs,s2,e2,depth + 1,dims,maxEntries,c,ret);    }  }}  }
class C{  private static void resetCredentialsCommand() throws SQLException {  System.out.println("*** RESET ADMIN CREDENTIALS TO admin / admin ***");  JDBCDataSource dataSource=new JDBCDataSource();  dataSource.setUrl("jdbc:hsqldb:hsql://localhost:" + System.getProperty("dbport") + "/data");  dataSource.setUser("sa");  dataSource.setPassword("");  Connection connection=dataSource.getConnection();  PreparedStatement preparedStatement=connection.prepareStatement("update monit_configuration set admin_username = 'admin', admin_password = '$2a$10$UHdpe.t2Xr3npu1AcDygO.FkiK5Ki4SmUU8oW.gD8liApMG4yDqw6'");  preparedStatement.executeUpdate();  preparedStatement.close();  connection.close();}  }
class C{  public boolean isAsterisk(){  return asterisk;}  }
class C{  public ProtocolCodecException(String message,Throwable cause){  super(message,cause);}  }
class C{  public RedundancyLogger(PRHARedundancyProvider prhaRedundancyProvider){  super(prhaRedundancyProvider);  PartitionedRegion baseRegion=ColocationHelper.getLeaderRegion(redundancyProvider.prRegion);  List<PartitionedRegion> colocatedRegions=ColocationHelper.getColocatedChildRegions(baseRegion);  List<RegionStatus> allRegions=new ArrayList<RegionStatus>(colocatedRegions.size() + 1);  if (baseRegion.getDataPolicy().withPersistence()) {    allRegions.add(new RegionStatus(baseRegion));  }  for (  PartitionedRegion region : colocatedRegions) {    if (region.getDataPolicy().withPersistence()) {      allRegions.add(new RegionStatus(region));    }  }  this.regions=Collections.unmodifiableList(allRegions);  this.allBucketsRecoveredFromDisk=redundancyProvider.getAllBucketsRecoveredFromDiskLatch();  this.membershipChanged=true;  addListeners();}  }
class C{  public void actionPerformed(ActionEvent ae){  long currentTime=System.nanoTime() / 1000000;  long totalTime=currentTime - cycleStart;  if (totalTime > CYCLE_TIME) {    cycleStart=currentTime;  }  float fraction=(float)totalTime / CYCLE_TIME;  fraction=Math.min(1.0f,fraction);  fraction=1 - Math.abs(1 - (2 * fraction));  animate(fraction);}  }
class C{  static public SerialLightManager instance(){  if (_instance == null) {    _instance=new SerialLightManager();  }  return _instance;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getUserDao() : null;}  }
class C{  public void testNegPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1,127,-10,-57,-101,-1,-1,-2,-2,-91,-2,31,-1,-11,125,-22,-83,30,95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (SerialAddress.validSystemNameConfig(systemName,'L'));}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static boolean isNetworkAvailable(Context context){  boolean available=false;  if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET) == PackageManager.PERMISSION_GRANTED) {    ConnectivityManager connMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo netInfo=connMgr.getActiveNetworkInfo();    available=netInfo != null && netInfo.isConnected();  }  return available;}  }
class C{  public static boolean validatePercent(String value){  try {    int intValue=Integer.parseInt(value);    if (intValue < 0 || intValue > 100) {      return false;    }  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(cfbV,0,cfbOutV,0);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);  }  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);  System.arraycopy(out,outOff,cfbV,cfbV.length - blockSize,blockSize);  return blockSize;}  }
class C{  @Override protected SoftwareModuleMetadata createMetadata(final SoftwareModule entity,final String key,final String value){  final SoftwareModuleMetadata swMetadata=softwareManagement.createSoftwareModuleMetadata(entityFactory.generateSoftwareModuleMetadata(entity,key,value));  setSelectedEntity(swMetadata.getSoftwareModule());  eventBus.publish(this,new MetadataEvent(MetadataUIEvent.CREATE_SOFTWARE_MODULE_METADATA,swMetadata));  return swMetadata;}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  public AsyncStatusUpdate(ZulipActivity activity){  super((ZulipApp)activity.getApplication());  this.context=activity;  setProperty(STATUS,"active");}  }
class C{  public void endArray(A array){}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEPopupMenuUI();}  }
class C{  public static boolean resolveIntent(Context context,Intent intent,boolean allowSelfOpen){  try {    boolean activityResolved=false;    ResolveInfo info=context.getPackageManager().resolveActivity(intent,0);    if (info != null) {      final String packageName=context.getPackageName();      if (info.match != 0) {        if (allowSelfOpen || !packageName.equals(info.activityInfo.packageName)) {          activityResolved=true;        }      } else {        List<ResolveInfo> handlers=context.getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);        if (handlers != null && !handlers.isEmpty()) {          activityResolved=true;          boolean canSelfOpen=false;          boolean hasPdfViewer=false;          for (          ResolveInfo resolveInfo : handlers) {            String pName=resolveInfo.activityInfo.packageName;            if (packageName.equals(pName)) {              canSelfOpen=true;            } else             if (PDF_VIEWER.equals(pName)) {              String filename=intent.getData().getLastPathSegment();              if ((filename != null && filename.endsWith(PDF_SUFFIX)) || PDF_MIME.equals(intent.getType())) {                intent.setClassName(pName,resolveInfo.activityInfo.name);                hasPdfViewer=true;                break;              }            }          }          if ((canSelfOpen && !allowSelfOpen) && !hasPdfViewer) {            activityResolved=false;          }        }      }    }    return activityResolved;  } catch (  RuntimeException e) {    logTransactionTooLargeOrRethrow(e,intent);  }  return false;}  }
class C{  public static ExpirationDatePickerDialogFragment newInstance(OCFile file,long chosenDateInMillis){  Bundle arguments=new Bundle();  arguments.putParcelable(ARG_FILE,file);  arguments.putLong(ARG_CHOSEN_DATE_IN_MILLIS,chosenDateInMillis);  ExpirationDatePickerDialogFragment dialog=new ExpirationDatePickerDialogFragment();  dialog.setArguments(arguments);  return dialog;}  }
class C{  public boolean logModified(Logger log){  return _depend.logModified(log) || _jarDepend.logModified(log);}  }
class C{  public byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {  try {    return Aes256.calculateChecksum(key,usage,data,0,size);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  public static boolean isEditableType(String type){  return editableTypes.contains(type);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.STANDALONE_BLOCK__BLOCK:    return basicSetBlock(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static boolean isDouble(String s){  try {    Double.parseDouble(s);    return true;  } catch (  NumberFormatException nfe) {    return false;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:    getRegions().clear();  return;}super.eUnset(featureID);}  }
class C{  public void addExitTime(double time){  if (exitTimes == null) {    return;  }  if (time < 0) {    time=0.0;  }  exitTimes.add(Double.valueOf(time));}  }
class C{  @SuppressWarnings("unchecked") public Iterable<T> findAll(){  Query query=PMF.get().getPersistenceManager().newQuery(Video.class);  Object rslt=query.execute();  return (Collection<T>)rslt;}  }
class C{  private void focusSpinnerIfNecessary(){  Component fo=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  if (spinner.isRequestFocusEnabled() && (fo == null || !SwingUtilities.isDescendingFrom(fo,spinner))) {    Container root=spinner;    if (!root.isFocusCycleRoot()) {      root=root.getFocusCycleRootAncestor();    }    if (root != null) {      FocusTraversalPolicy ftp=root.getFocusTraversalPolicy();      Component child=ftp.getComponentAfter(root,spinner);      if (child != null && SwingUtilities.isDescendingFrom(child,spinner)) {        child.requestFocus();      }    }  }}  }
class C{  @SuppressWarnings("unchecked") TypeToken(Type type){  this.type=$Gson$Types.canonicalize($Gson$Preconditions.checkNotNull(type));  this.rawType=(Class<? super T>)$Gson$Types.getRawType(this.type);  this.hashCode=this.type.hashCode();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String(StringBuilder sb){  if (sb == null) {    throw new NullPointerException();  }  this.offset=0;  this.count=sb.length();  this.value=new char[this.count];  sb.getChars(0,this.count,this.value,0);}  }
class C{  public static Result evaluateModel(MultiLabelClassifier h,Instances D) throws Exception {  return evaluateModelPrequentialBasic(h,D,20,1.0,"PCut1","3");}  }
class C{  public void waitWithHandshake(){  schedLock.lockWithHandshake();  while (!open) {    schedLock.waitWithHandshake();  }  schedLock.unlock();}  }
class C{  public static int javaVersion(final int major,final int minor,final int micro){  return (major << 16) + (minor << 8) + micro;}  }
class C{  public IdmCertificate(X509Certificate certificate,CertificateType type){  ValidateUtil.validateNotNull(certificate,"certificate");  ValidateUtil.validateNotNull(type,"type");  this.cert=certificate;  this.certType=type;}  }
class C{  public EventObject(Object source){  if (source == null) {    throw new IllegalArgumentException("source == null");  }  this.source=source;}  }
class C{  public Response(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public AudioTrack(){  this(null,AudioManager.STREAM_MUSIC);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.376 -0500",hash_original_method="16F26E6B49FE203D5A6C49E570EC8B0F",hash_generated_method="CA14A5F3B64850E8A1A6CE5E8406B180") public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseHeaderElement(buffer,cursor);}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  public static void copyLocalToHdfs(final Path localInputPath,final Path hdfsOutputPath,final Configuration configuration) throws IOException {  final FileSystem fs=FileSystem.get(configuration);  fs.copyFromLocalFile(localInputPath,hdfsOutputPath);}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  protected final void putChar(final int charInt,final String mappedChar){  if (diffs == null) {    diffs=new String[maxCharCount];  }  diffs[charInt]=mappedChar;  if (!hasEncoding && !isCID) {    if (StandardFonts.getUnicodeName(mappedChar) != null) {      putMappedChar(charInt,mappedChar);    } else     if (!isHex) {      nonStandardMappings.put(mappedChar,charInt);    }  }}  }
class C{  private void displayComments(List<Api.Comment> comments){  this.comments=ImmutableList.copyOf(comments);  commentsAdapter.set(comments,VoteService.NO_VOTES,feedItem.user());  long commentId=getArguments().getLong(ARG_AUTOSCROLL_COMMENT_ID,0);  if (commentId > 0) {    scrollToComment(commentId);  }  voteService.getCommentVotes(comments).filter(null).onErrorResumeNext(empty()).compose(bindToLifecycleAsync()).subscribe(null);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof CardPermission == false) {    return false;  }  CardPermission other=(CardPermission)obj;  return this.getName().equals(other.getName()) && (this.mask == other.mask);}  }
class C{  public static char lastChar(String str){  if (str == null || str.length() == 0)   return 0;  return str.charAt(str.length() - 1);}  }
class C{  private boolean matchInSameDirection(Coordinate p0,Coordinate p1,Coordinate ep0,Coordinate ep1){  if (!p0.equals(ep0))   return false;  if (CGAlgorithms.computeOrientation(p0,p1,ep1) == CGAlgorithms.COLLINEAR && Quadrant.quadrant(p0,p1) == Quadrant.quadrant(ep0,ep1))   return true;  return false;}  }
class C{  public void removeAllChildren(){  for (int i=getChildCount() - 1; i >= 0; i--) {    remove(i);  }}  }
class C{  @Override void showValues(){  final StringBuilder values=new StringBuilder("[");  values.append(ObjectUtils.showMixedValuesAsString(objectArray.toArray(),""));  values.append(" ]");  System.out.println(padding + "values=" + values);}  }
class C{  public StreetPath(StreetRouter.State lastState,StreetRouter streetRouter,LegMode mode,TransportNetwork transportNetwork){  this(lastState,transportNetwork);  if (mode == LegMode.BICYCLE_RENT) {    StreetRouter.State endCycling=getStates().getFirst();    StreetRouter bicycle=streetRouter.previousRouter;    lastState=bicycle.getStateAtVertex(endCycling.vertex);    if (lastState != null) {      lastState.isBikeShare=endCycling.isBikeShare;      add(lastState);      StreetRouter first=bicycle.previousRouter;      StreetRouter.State startCycling=getStates().getFirst();      lastState=first.getStateAtVertex(startCycling.vertex);      if (lastState != null) {        lastState.isBikeShare=startCycling.isBikeShare;        add(lastState);      } else {        LOG.warn("Start to cycle path missing");      }    } else {      LOG.warn("Cycle to cycle path not found");    }  } else   if (mode == LegMode.CAR_PARK) {    StreetRouter.State carPark=getStates().getFirst();    StreetRouter.State carState=streetRouter.previousRouter.getStateAtVertex(carPark.vertex);    if (carState != null) {      add(carState);    } else {      LOG.warn("Missing CAR part of CAR_PARK trip in streetRouter!");    }  } else {    LOG.error("Unknown Mode in streetpath:{}",mode);    throw new RuntimeException("Unknown mode!");  }}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  public CRLException(){  super();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RoundedTransformationBuilder cornerRadiusBottomLeftDp(float radiusDp){  mCornerRadius[2]=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radiusDp,mDisplayMetrics);  return this;}  }
class C{  private Query makeRecentQuery(final int currentPageNum,final int fetchSize){  final Query ret=new Query().addSort(Keys.OBJECT_ID,SortDirection.DESCENDING).setPageSize(fetchSize).setCurrentPageNum(currentPageNum);  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(Article.ARTICLE_STATUS,FilterOperator.EQUAL,Article.ARTICLE_STATUS_C_VALID));  filters.add(new PropertyFilter(Article.ARTICLE_TYPE,FilterOperator.NOT_EQUAL,Article.ARTICLE_TYPE_C_DISCUSSION));  filters.add(new PropertyFilter(Article.ARTICLE_TYPE,FilterOperator.NOT_EQUAL,Article.ARTICLE_TYPE_C_JOURNAL_PARAGRAPH));  ret.setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));  return ret;}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  static long[] buildMap(UnicodeSpec[] data,SpecialCaseMap[] specialMaps,PropList propList){  long[] result;  if (bLatin1 == true) {    result=new long[256];  } else {    result=new long[1 << 16];  }  int k=0;  int codePoint=plane << 16;  UnicodeSpec nonCharSpec=new UnicodeSpec();  for (int j=0; j < data.length && k < result.length; j++) {    if (data[j].codePoint == codePoint) {      result[k]=buildOne(codePoint,data[j],specialMaps);      ++k;      ++codePoint;    } else     if (data[j].codePoint > codePoint) {      if (data[j].name.endsWith("Last>")) {        while (codePoint < data[j].codePoint && k < result.length) {          result[k]=buildOne(codePoint,data[j],specialMaps);          ++k;          ++codePoint;        }      } else {        while (codePoint < data[j].codePoint && k < result.length) {          result[k]=buildOne(codePoint,nonCharSpec,specialMaps);          ++k;          ++codePoint;        }      }      k=data[j].codePoint & 0xFFFF;      codePoint=data[j].codePoint;      result[k]=buildOne(codePoint,data[j],specialMaps);      ++k;      ++codePoint;    } else {      System.out.println("An error has occured during spec mapping.");      System.exit(0);    }  }  codePoint=(plane << 16) | k;  while (k < result.length) {    result[k]=buildOne(codePoint,nonCharSpec,specialMaps);    ++k;    ++codePoint;  }  addExProp(result,propList,"Other_Lowercase",maskOtherLowercase);  addExProp(result,propList,"Other_Uppercase",maskOtherUppercase);  addExProp(result,propList,"Other_Alphabetic",maskOtherAlphabetic);  addExProp(result,propList,"Ideographic",maskIdeographic);  return result;}  }
class C{  private static boolean matchWildCards(String name,String template){  int wildcardIdx=template.indexOf("*");  if (wildcardIdx == -1)   return name.equals(template);  boolean isBeginning=true;  String beforeWildcard="";  String afterWildcard=template;  while (wildcardIdx != -1) {    beforeWildcard=afterWildcard.substring(0,wildcardIdx);    afterWildcard=afterWildcard.substring(wildcardIdx + 1);    int beforeStartIdx=name.indexOf(beforeWildcard);    if ((beforeStartIdx == -1) || (isBeginning && beforeStartIdx != 0)) {      return false;    }    isBeginning=false;    name=name.substring(beforeStartIdx + beforeWildcard.length());    wildcardIdx=afterWildcard.indexOf("*");  }  return name.endsWith(afterWildcard);}  }
class C{  protected boolean include(Iterable<String> path,String name) throws IOException, LexerException {  for (  String dir : path) {    VirtualFile file=filesystem.getFile(dir,name);    if (include(file))     return true;  }  VirtualFile file=filesystem.getFile(name);  if (include(file))   return true;  return false;}  }
class C{  public IntegerPolynomial(BigIntPolynomial p){  coeffs=new int[p.coeffs.length];  for (int i=0; i < p.coeffs.length; i++) {    coeffs[i]=p.coeffs[i].intValue();  }}  }
class C{  private void initializeContext(AccessProfile accessProfile){  _keyMap.put(Constants._serialID,accessProfile.getserialID());  _keyMap.put(Constants.dbClient,_dbClient);  if (_networkDeviceController != null) {    _keyMap.put(Constants.networkDeviceController,_networkDeviceController);  }  _keyMap.put(Constants._nativeGUIDs,Sets.newHashSet());  _keyMap.put(Constants._Stats,new LinkedList<Stat>());  _keyMap.put(Constants.ACCESSPROFILE,accessProfile);  _keyMap.put(Constants.PROPS,accessProfile.getProps());  _keyMap.put(Constants._TimeCollected,accessProfile.getCurrentSampleTime());}  }
class C{  public void add(ClassDefItem clazz){  classDefs.add(clazz);}  }
class C{  public static boolean isXML11NCName(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public void printParameterEntityReference(char[] name) throws IOException {  printCharacter('%');  printCharacters(name);  printCharacter(';');}  }
class C{  public void clear(){  cache=null;  count=0;}  }
class C{  private LoadHolder isCurrentServerMostLoaded(ServerLocation currentServer,Map groupServers){  final LoadHolder currentLH=(LoadHolder)groupServers.get(currentServer);  if (currentLH == null)   return null;  final float currentLoad=currentLH.getLoad();  for (Iterator itr=groupServers.entrySet().iterator(); itr.hasNext(); ) {    Map.Entry next=(Entry)itr.next();    ServerLocation location=(ServerLocation)next.getKey();    if (location.equals(currentServer)) {      continue;    }    LoadHolder nextLoadReference=(LoadHolder)next.getValue();    float nextLoad=nextLoadReference.getLoad();    if (nextLoad > currentLoad) {      return null;    }  }  return currentLH;}  }
class C{  public WaferMapPlot(WaferMapDataset dataset,WaferMapRenderer renderer){  super();  this.orientation=PlotOrientation.VERTICAL;  this.dataset=dataset;  if (dataset != null) {    dataset.addChangeListener(this);  }  this.renderer=renderer;  if (renderer != null) {    renderer.setPlot(this);    renderer.addChangeListener(this);  }}  }
class C{  public static int roll1D100(){  return rand.nextInt(100) + 1;}  }
class C{  public String toString(){  if (m_CovarianceInverse == null) {    return "No covariance inverse\n";  }  return "Mahalanovis Distribution. Mean = " + Utils.doubleToString(m_ValueMean,4,2) + "  ConditionalOffset = "+ Utils.doubleToString(m_ConstDelta,4,2)+ "\n"+ "Covariance Matrix: Determinant = "+ m_Determinant+ "  Inverse:\n"+ m_CovarianceInverse;}  }
class C{  public GroovyScript(Document doc){  super(doc);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_2__VALUE_1:    setValue_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static String post(String apiKey,String deviceRegistrationId,Map<String,String> params) throws IOException {  StringBuilder postBody=new StringBuilder();  postBody.append("registration_id").append("=").append(deviceRegistrationId);  Set<String> keys=params.keySet();  for (  String key : keys) {    String value=params.get(key);    postBody.append("&").append("data.").append(key).append("=").append(URLEncoder.encode(value,"UTF-8"));  }  byte[] postData=postBody.toString().getBytes("UTF-8");  URL url=new URL("https://android.googleapis.com/gcm/send");  HttpsURLConnection.setDefaultHostnameVerifier(new CustomizedHostnameVerifier());  HttpsURLConnection conn=(HttpsURLConnection)url.openConnection();  conn.setDoOutput(true);  conn.setUseCaches(false);  conn.setRequestMethod("POST");  conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");  conn.setRequestProperty("Content-Length",Integer.toString(postData.length));  conn.setRequestProperty("Authorization","key=" + apiKey);  OutputStream out=conn.getOutputStream();  out.write(postData);  out.close();  int responseCode=conn.getResponseCode();  if (responseCode == 200) {    String response=conn.getResponseMessage();    return response;  } else {    System.err.println(responseCode + ": " + conn.getResponseMessage());  }  return null;}  }
class C{  private void performRPExportIngestion(IngestionRequestContext parentRequestContext,RecoverPointVolumeIngestionContext volumeContext,UnManagedVolume unManagedVolume,Volume volume){  _logger.info("starting RecoverPoint export ingestion for volume {}",volume.forDisplay());  Project project=volumeContext.getProject();  ProtectionSystem protectionSystem=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());  List<UnManagedExportMask> unManagedRPExportMasks=findUnManagedRPExportMask(protectionSystem,unManagedVolume);  if (unManagedRPExportMasks.isEmpty()) {    _logger.error("Could not find any unmanaged export masks associated with volume: " + unManagedVolume.getLabel());    throw IngestionException.exceptions.noUnManagedExportMaskFound(unManagedVolume.getNativeGuid());  }  Map<String,VirtualArray> internalSiteToVarrayMap=new HashMap<String,VirtualArray>();  internalSiteToVarrayMap.put(volume.getInternalSiteName(),volumeContext.getVarray(unManagedVolume));  boolean metropoint=RPHelper.isMetroPointVolume(_dbClient,volume);  if (metropoint) {    VplexVolumeIngestionContext vplexVolumeContext=((RpVplexVolumeIngestionContext)volumeContext.getVolumeContext()).getVplexVolumeIngestionContext();    for (    String associatedVolumeIdStr : vplexVolumeContext.getAssociatedVolumeIds(volume)) {      Volume associatedVolume=VolumeIngestionUtil.findVolume(_dbClient,vplexVolumeContext.getBlockObjectsToBeCreatedMap(),vplexVolumeContext.getDataObjectsToBeUpdatedMap(),associatedVolumeIdStr);      String internalSiteName=associatedVolume.getInternalSiteName();      if (!internalSiteToVarrayMap.containsKey(internalSiteName)) {        internalSiteToVarrayMap.put(internalSiteName,_dbClient.queryObject(VirtualArray.class,associatedVolume.getVirtualArray()));      }    }  }  for (  Entry<String,VirtualArray> entry : internalSiteToVarrayMap.entrySet()) {    String internalSiteName=entry.getKey();    VirtualArray virtualArray=entry.getValue();    UnManagedExportMask em=null;    if (metropoint) {      String vplexCluster=ConnectivityUtil.getVplexClusterForVarray(virtualArray.getId(),storageSystem.getId(),_dbClient);      for (      UnManagedExportMask exportMask : unManagedRPExportMasks) {        for (        String portUri : exportMask.getKnownStoragePortUris()) {          StoragePort port=_dbClient.queryObject(StoragePort.class,URI.create(portUri));          if (port != null && !port.getInactive()) {            String vplexClusterForMask=ConnectivityUtil.getVplexClusterOfPort(port);            if (vplexCluster.equals(vplexClusterForMask)) {              em=exportMask;              break;            }          }        }        if (em != null) {          break;        }      }      if (em == null) {        for (        UnManagedExportMask exportMask : unManagedRPExportMasks) {          if (exportMask.getMaskingViewPath().contains("cluster-" + vplexCluster)) {            em=exportMask;            break;          }        }      }    } else {      em=unManagedRPExportMasks.get(0);    }    boolean isJournalExport=false;    if (em.getMaskName().toLowerCase().contains(VolumeIngestionUtil.RP_JOURNAL)) {      isJournalExport=true;    }    String exportGroupGeneratedName=RPHelper.generateExportGroupName(protectionSystem,storageSystem,internalSiteName,virtualArray,isJournalExport);    ExportGroup exportGroup=VolumeIngestionUtil.verifyExportGroupExists(parentRequestContext,exportGroupGeneratedName,project.getId(),em.getKnownInitiatorUris(),virtualArray.getId(),_dbClient);    boolean exportGroupCreated=false;    if (null == exportGroup) {      exportGroupCreated=true;      Integer numPaths=em.getZoningMap().size();      _logger.info("Creating Export Group with label {}",em.getMaskName());      exportGroup=RPHelper.createRPExportGroup(exportGroupGeneratedName,virtualArray,project,numPaths,isJournalExport);    }    if (null != exportGroup) {      ExportGroup loadedExportGroup=parentRequestContext.findExportGroup(exportGroup.getLabel(),project.getId(),virtualArray.getId(),null,null);      if (null != loadedExportGroup) {        exportGroup=loadedExportGroup;      }    }    volumeContext.setExportGroup(exportGroup);    volumeContext.setExportGroupCreated(exportGroupCreated);    volumeContext.getRpExportGroupMap().put(exportGroup,exportGroupCreated);    List<Initiator> initiators=new ArrayList<Initiator>();    Iterator<Initiator> initiatorItr=_dbClient.queryIterativeObjects(Initiator.class,URIUtil.toURIList(em.getKnownInitiatorUris()));    while (initiatorItr.hasNext()) {      initiators.add(initiatorItr.next());    }    volumeContext.setDeviceInitiators(initiators);    IngestExportStrategy ingestStrategy=ingestStrategyFactory.buildIngestExportStrategy(unManagedVolume);    volume=ingestStrategy.ingestExportMasks(unManagedVolume,volume,volumeContext);    if (null == volume) {      throw IngestionException.exceptions.generalVolumeException(unManagedVolume.getLabel(),"check the logs for more details");    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public Code39Reader(){  this(false);}  }
class C{  public void usage(){  info(StringUtils.wrap(helpMap.get("launcher"),80,"\t"));  info("\n\nSTART\n\n");  help(Command.START);  info("STATUS\n\n");  help(Command.STATUS);  info("STOP\n\n");  help(Command.STOP);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public AccessTokensBuilder tokenVerifierMcbConfig(MCBConfig config){  checkLock();  this.tokenVerifierMcbConfig=notNull("tokenVerifierMcbConfig",config);  return this;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public Boolean isSmartCardAuthenticationEnabled(){  return smartCardAuthenticationEnabled;}  }
class C{  ArrayList<WeightedPath> seeAllPaths(ArrayList<WeightedPath> start_paths,boolean forward,boolean backward,IGame game,TreeMap<PathState,WeightedPath> pathmap){  final String METHOD_NAME="seeAllPaths(ArrayList<WeightedPath>, boolean, boolean, IGame, TreeMap<PathState, WeightedPath>)";  owner.methodBegin(getClass(),METHOD_NAME);  try {    ArrayList<WeightedPath> next_steps=new ArrayList<WeightedPath>();    for (    WeightedPath sp : start_paths) {      List<MovePath> nextmoves=sp.path.getNextMoves(backward,forward);      for (      MovePath p : nextmoves) {        if (!p.getLastStep().isLegal(p)) {          continue;        }        if (p.getLastStep().getType() == MovePath.MoveStepType.GET_UP) {          if (p.getLastStep().getMpUsed() > sp.path.getEntity().getRunMP()) {            continue;          }        }        PathState mystate=new PathState(p);        WeightedPath other_wp=pathmap.get(mystate);        if (other_wp != null) {          if (other_wp.path.getMpUsed() <= p.getMpUsed()) {            continue;          }        }        PathSearcher.WeightedPath nextpath=new PathSearcher.WeightedPath(p,ranker.rankPath(p,game).rank);        pathmap.put(mystate,nextpath);        next_steps.add(nextpath);      }    }    if (next_steps.size() != 0) {      ArrayList<WeightedPath> all_paths=seeAllPaths(next_steps,forward,backward,game,pathmap);      all_paths.addAll(start_paths);      return all_paths;    }    return start_paths;  }  finally {    owner.methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  @Override public void dbgPrintDetail(){  Log.writeln("--vvv-- Free List --vvv--");  if (currentUnits > 0) {    for (int i=-heads; i <= currentUnits; i++) {      dbgPrintEntry(i);    }  }  Log.writeln("--^^^-- Free List --^^^--");}  }
class C{  public void openDrawer(){  if (mSlideView == null) {    throw new IllegalArgumentException("Drawer not found");  }  if (mFirstLayout) {    final LayoutParams lp=(LayoutParams)mSlideView.getLayoutParams();    lp.onScreen=1.f;    lp.knownOpen=true;    updateChildrenImportantForAccessibility(mSlideView,true);  } else {    mDragHelper.smoothSlideViewTo(mSlideView,mExpandWidth,mSlideView.getTop());  }  invalidate();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the year: ");  String year=input.nextLine();  System.out.print("Enter the gender: ");  String gender=input.nextLine();  System.out.print("Enter the name: ");  String name=input.nextLine();  ArrayList<String> list=new ArrayList<>();  try {    java.net.URL url=new java.net.URL("http://www.cs.armstrong.edu/liang/data/babynamesranking" + year + ".txt");    input=new Scanner(url.openStream());    while (input.hasNext()) {      for (int i=0; i < 5; i++) {        list.add(i,input.next());      }      if (list.get(gender(gender)).equals(name)) {        System.out.println(name + " is ranked #" + list.get(0)+ " in year "+ year);        System.exit(0);      }      list.clear();    }  } catch (  java.net.MalformedURLException ex) {    System.out.println("Invalid URL");  }catch (  java.io.IOException ex) {    System.out.println("I/O Errors: no such file");  }  System.out.println("The name " + name + " is not ranked in year "+ year);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public String positiveIndexTipText(){  return "Set the index of binary valued attributes that is to be considered" + " the positive index. Has no effect for sparse data (in this case" + " the first index (i.e. non-zero values) is always treated as "+ " positive. Also has no effect for unary valued attributes (i.e."+ " when using the Weka Apriori-style format for market basket data,"+ " which uses missing value \"?\" to indicate"+ " absence of an item.";}  }
class C{  public Object readReference(Type target){  return getReference(buf.getUnsignedShort());}  }
class C{  public final boolean peekOrTrue(){  return (m_index > -1) ? m_values[m_index] : true;}  }
class C{  public boolean visit(UndoEdit edit){  return visitNode(edit);}  }
class C{  public CActionDeleteSelectedNodes(final ZyGraph graph,final boolean showIcon){  super("Delete Selected Nodes");  m_graph=Preconditions.checkNotNull(graph,"IE02816: graph argument can not be null");  if (showIcon) {    putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/deleteselectednodes_up.png")));  }  putValue(SHORT_DESCRIPTION,HotKeys.GRAPH_DELETE_SELECTED_NODES_HK.getDescription());  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_DELETE_SELECTED_NODES_HK.getKeyStroke());}  }
class C{  public ColladaFormat(String ns){  super(ns);}  }
class C{  public final void clearPassword(){  Arrays.fill(password,'?');  password=null;}  }
class C{  private List<String> leftShiftCommonVars(final List<String> commonVars,final Collection<String> allVars){  checkNotNull(commonVars);  checkNotNull(allVars);  final List<String> shifted=Lists.newArrayList(commonVars);  for (  final String var : allVars) {    if (!shifted.contains(var)) {      shifted.add(var);    }  }  return shifted;}  }
class C{  public void list(PrintWriter out){  out.println("-- listing properties --");  Hashtable<String,Object> h=new Hashtable<>();  enumerate(h);  for (Enumeration<String> e=h.keys(); e.hasMoreElements(); ) {    String key=e.nextElement();    String val=(String)h.get(key);    if (val.length() > 40) {      val=val.substring(0,37) + "...";    }    out.println(key + "=" + val);  }}  }
class C{  void removePlayer(IEntity player){  Member member=memberList.getMember(player.getName());  if (member != null) {    member.setPresent(false);    memberList.memberChanged(member);  }}  }
class C{  public String makeServiceCall(String url,int method){  return this.makeServiceCall(url,method,null);}  }
class C{  public <T extends List,V>String[] methodThatHasTypeParameters(T param1,V param2){  return null;}  }
class C{  private <TDevice>ListenableFuture<TDevice> openDevice(Lifetime requestLifetime,CameraDeviceKey key,CameraDeviceActionProvider<TDevice> provider){  final SingleDeviceLifecycle<TDevice,CameraDeviceKey> deviceLifecycle;  final ListenableFuture<TDevice> result;synchronized (mDeviceLock) {    mLogger.d("[openDevice()] open(cameraId: '" + key + "')");    cancelShutdown();    if (mCurrentDevice == null) {      mLogger.d("[openDevice()] No existing request. Creating a new device.");      deviceLifecycle=createLifecycle(key,provider);      mCurrentDevice=deviceLifecycle;      result=deviceLifecycle.createRequest(requestLifetime);      deviceLifecycle.open();      mActiveCameraDeviceTracker.onCameraOpening(key.getCameraId());    } else     if (mCurrentDevice.getId().equals(key)) {      mLogger.d("[openDevice()] Existing request with the same id.");      deviceLifecycle=(SingleDeviceLifecycle<TDevice,CameraDeviceKey>)mCurrentDevice;      clearTargetDevice();      result=deviceLifecycle.createRequest(requestLifetime);      deviceLifecycle.open();      mActiveCameraDeviceTracker.onCameraOpening(key.getCameraId());    } else {      mLogger.d("[openDevice()] Existing request with a different id.");      mCurrentDevice.close();      deviceLifecycle=createLifecycle(key,provider);      clearTargetDevice();      mTargetDevice=deviceLifecycle;      result=deviceLifecycle.createRequest(requestLifetime);    }    mLogger.d("[openDevice()] Returning future.");    return result;  }}  }
class C{  private char map(char ch){  int index=ch - 'A';  if (index < 0 || index >= this.getSoundexMapping().length) {    throw new IllegalArgumentException("The character is not mapped: " + ch);  }  return this.getSoundexMapping()[index];}  }
class C{  public void endRemoveAll(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(removeAllInProgressId,-1);  int endRemoveAllId;  if (timedOut) {    endRemoveAllId=removeAllTimedOutId;  } else   if (failed) {    endRemoveAllId=removeAllFailedId;  } else {    endRemoveAllId=removeAllId;  }  this.stats.incInt(endRemoveAllId,1);  this.stats.incLong(removeAllDurationId,duration);}  }
class C{  private void processToManyRelations(QueryObject<?> queryObject) throws IllegalQueryStateException {  List<Entity> loadedEntities=entityLoaders.getEntitiesForQueryObject(queryObject);  if (loadedEntities.isEmpty()) {    return;  }  for (  Entity loadedEntity : loadedEntities) {    for (    ToManyNode toManyNode : loadedEntity.getChildren(ToManyNode.class)) {      if (findJoin(toManyNode.getName(),queryObject) != null) {        toManyNode.setFetched(true);      }    }  }  for (  QJoin join : queryObject.getJoins()) {    processToManyRelations(join.getTo());  }}  }
class C{  @Override public void download(PLIFileDownloader fileDownloader){  if (fileDownloader != null) {synchronized (mDownloaders) {      mDownloaders.add(fileDownloader);      this.start();    }  }}  }
class C{  protected int dp2px(Context context,int dpVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dpVal,context.getResources().getDisplayMetrics());}  }
class C{  public List<TriggerKey> selectMisfiredTriggersInGroupInState(Connection conn,String groupName,String state,long ts) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_MISFIRED_TRIGGERS_IN_GROUP_IN_STATE));    ps.setBigDecimal(1,new BigDecimal(String.valueOf(ts)));    ps.setString(2,groupName);    ps.setString(3,state);    rs=ps.executeQuery();    LinkedList<TriggerKey> list=new LinkedList<TriggerKey>();    while (rs.next()) {      String triggerName=rs.getString(COL_TRIGGER_NAME);      list.add(triggerKey(triggerName,groupName));    }    return list;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public static void writeXMLDocument(Document doc,String filename){  try {    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer;    transformer=transformerFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    DOMSource source=new DOMSource(doc);    StreamResult result=new StreamResult(new File(filename));    transformer.transform(source,result);    log.fine("writing operation to " + filename + " successful!");  } catch (  TransformerConfigurationException e) {    log.warning(e.getMessage());  }catch (  TransformerException e) {    log.warning(e.getMessage());  }}  }
class C{  @Override public void endWindow(){  HashMap<K,V> tuples=new HashMap<K,V>();  HashMap<K,Integer> ctuples=new HashMap<K,Integer>();  HashMap<K,Double> dtuples=new HashMap<K,Double>();  HashMap<K,Integer> ituples=new HashMap<K,Integer>();  HashMap<K,Float> ftuples=new HashMap<K,Float>();  HashMap<K,Long> ltuples=new HashMap<K,Long>();  HashMap<K,Short> stuples=new HashMap<K,Short>();  for (  Map.Entry<K,MutableDouble> e : sums.entrySet()) {    K key=e.getKey();    MutableDouble val=e.getValue();    tuples.put(key,getValue(val.doubleValue()));    dtuples.put(key,val.doubleValue());    ituples.put(key,val.intValue());    ftuples.put(key,val.floatValue());    ltuples.put(key,val.longValue());    stuples.put(key,val.shortValue());    MutableInt c=counts.get(e.getKey());    if (c != null) {      ctuples.put(key,c.toInteger());    }  }  sum.emit(tuples);  sumDouble.emit(dtuples);  sumInteger.emit(ituples);  sumLong.emit(ltuples);  sumShort.emit(stuples);  sumFloat.emit(ftuples);  count.emit(ctuples);  clearCache();}  }
class C{  CircularProgressDrawable(int size,int ringWidth,int outlineColor,int ringColor){  this.progress=0;  this.outlineColor=outlineColor;  this.ringColor=ringColor;  this.paint=new Paint();  this.paint.setAntiAlias(true);  this.ringWidth=ringWidth;  this.arcElements=new RectF();  this.indeterminate=false;  sizeBounds=new Rect(0,0,size,size);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static List to_list(Object[] array){  List list=new ArrayList();  for (int i=0; i < array.length; i++) {    list.add(array[i]);  }  return list;}  }
class C{  private void stopSketchStateTimeout(){  if (sketchStateTimeout != null) {    sketchStateTimeout.cancel();    sketchStateTimeout=null;  }}  }
class C{  public VersionedValue(VersionedValue other){  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  protected void testsWithoutClass(boolean weighted,boolean multiInstance){  boolean PNom=canPredict(true,false,false,false,false,multiInstance,NO_CLASS)[0];  boolean PNum=canPredict(false,true,false,false,false,multiInstance,NO_CLASS)[0];  boolean PStr=canPredict(false,false,true,false,false,multiInstance,NO_CLASS)[0];  boolean PDat=canPredict(false,false,false,true,false,multiInstance,NO_CLASS)[0];  boolean PRel;  if (!multiInstance) {    PRel=canPredict(false,false,false,false,true,multiInstance,NO_CLASS)[0];  } else {    PRel=false;  }  if (PNom || PNum || PStr|| PDat|| PRel) {    if (weighted) {      instanceWeights(PNom,PNum,PStr,PDat,PRel,multiInstance,NO_CLASS);    }    canHandleZeroTraining(PNom,PNum,PStr,PDat,PRel,multiInstance,NO_CLASS);    boolean handleMissingPredictors=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,NO_CLASS,true,false,20)[0];    if (handleMissingPredictors) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,NO_CLASS,true,false,100);    }    correctBuildInitialisation(PNom,PNum,PStr,PDat,PRel,multiInstance,NO_CLASS);    datasetIntegrity(PNom,PNum,PStr,PDat,PRel,multiInstance,NO_CLASS,handleMissingPredictors,false);  }}  }
class C{  public int mate(int v){  validate(v);  return mate[v];}  }
class C{  public int update(Instance instance){  return updateTableRow(Instance.uri,instance);}  }
class C{  public void minimize(TestSuiteChromosome suite,boolean minimizePerTest){  startTime=System.currentTimeMillis();  String strategy=Properties.SECONDARY_OBJECTIVE;  if (strategy.contains(":"))   strategy=strategy.substring(0,strategy.indexOf(':'));  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Result_Size,suite.size());  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Result_Length,suite.totalLengthOfTestCases());  logger.info("Minimization Strategy: " + strategy + ", "+ suite.size()+ " tests");  suite.clearMutationHistory();  if (minimizePerTest)   minimizeTests(suite); else   minimizeSuite(suite);  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Minimized_Size,suite.size());  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Minimized_Length,suite.totalLengthOfTestCases());}  }
class C{  public static void touch(File file) throws IOException {  checkNotNull(file);  if (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis())) {    throw new IOException("Unable to update modification time of " + file);  }}  }
class C{  public BwProvisionerSimple(long bw){  super(bw);  setBwTable(new HashMap<String,Long>());}  }
class C{  public void moveSouth(double amount){  if (!isBlocked()) {    setY(getY() + (float)amount);  }}  }
class C{  public void actionPerformed(ActionEvent e){  Component comp=(this.knowledgeEditable instanceof Component) ? (Component)this.knowledgeEditable : null;  File file=EditorUtils.getSaveFile("knowledge","txt",comp,false,"Save Knowledge...");  if (file != null) {    try {      FileWriter writer=new FileWriter(file);      IKnowledge knowledge=this.knowledgeEditable.getKnowledge();      Knowledge.saveKnowledge(knowledge,writer);      writer.close();      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Saved knowledge as " + file.getAbsoluteFile() + ".");    } catch (    IOException e1) {      String message=e1.getMessage() == null ? e1.getClass().getName() : e1.getMessage();      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),message);    }  }}  }
class C{  public ReceiveFileTransfer acceptAndTransfer(File destination) throws IOException {  ReceiveFileTransfer transfer=accept(destination);  transfer.transfer();  return transfer;}  }
class C{  public boolean grabInput(){  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {    grabLog.fine("Grab input on {0}",this);  }  XToolkit.awtLock();  try {    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {      grabLog.fine("    Already Grabbed");      return true;    }    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);    final int ownerEvents=1;    if (!XToolkit.getSunAwtDisableGrab()) {      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);      if (ptrGrab != XConstants.GrabSuccess) {        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);        XAwtState.setGrabWindow(null);        grabLog.fine("    Grab Failure - mouse");        return false;      }      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);      if (keyGrab != XConstants.GrabSuccess) {        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);        XAwtState.setGrabWindow(null);        grabLog.fine("    Grab Failure - keyboard");        return false;      }    }    if (prevGrabWindow != null) {      prevGrabWindow.ungrabInputImpl();    }    XAwtState.setGrabWindow(this);    grabLog.fine("    Grab - success");    return true;  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  public ReturnVoidStmt newReturnVoidStmt(){  return new JReturnVoidStmt();}  }
class C{  public void put(final E key,final double count,final boolean keepHigher){  if (keepHigher && entries.containsKey(key)) {    final double oldCount=entries.get(key);    if (count > oldCount) {      entries.put(key,count);    }  } else {    entries.put(key,count);  }  dirty=true;}  }
class C{  private Boolean saveAllTracks(){  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getTrackCursor(null,null,TracksColumns._ID);    if (cursor == null) {      return false;    }    totalCount=cursor.getCount();    for (int i=0; i < totalCount; i++) {      if (isCancelled()) {        return false;      }      cursor.moveToPosition(i);      Track track=myTracksProviderUtils.createTrack(cursor);      if (track != null && saveTracks(new Track[]{track})) {        successCount++;      }      publishProgress(i + 1,totalCount);    }    return true;  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public TextTable(int rows,int columns){  if (rows <= 0 || columns <= 0) {    throw new IllegalArgumentException();  }  this.tokens=new String[rows][columns];  for (int i=0; i < tokens.length; i++) {    for (int j=0; j < tokens[0].length; j++) {      tokens[i][j]="";    }  }}  }
class C{  public SwaggerWebAppFraction addWebContent(String content){  if (content == null)   return this;  if (content.equals(""))   return this;  File maybeFile=new File(content);  if (!maybeFile.exists()) {    try {      this.webContent=Swarm.artifact(content);    } catch (    Exception e) {      e.printStackTrace();    }  } else   if (maybeFile.isDirectory()) {    try {      this.webContent=loadFromDirectory(maybeFile);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    this.webContent=ShrinkWrap.createFromZipFile(JARArchive.class,maybeFile);  }  return this;}  }
class C{  private void enableService(){  ServiceDiscoveryManager manager=ServiceDiscoveryManager.getInstanceFor(this.connection);  if (!manager.includesFeature(NAMESPACE)) {    manager.addFeature(NAMESPACE);  }}  }
class C{  protected void checkChildType(Node n,boolean replace){switch (n.getNodeType()) {case ELEMENT_NODE:case PROCESSING_INSTRUCTION_NODE:case COMMENT_NODE:case TEXT_NODE:case CDATA_SECTION_NODE:case ENTITY_REFERENCE_NODE:case DOCUMENT_FRAGMENT_NODE:    break;default :  throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,"child.type",new Object[]{new Integer(getNodeType()),getNodeName(),new Integer(n.getNodeType()),n.getNodeName()});}}  }
class C{  public static void main(final String[] args){  final String text="Test-Text mit & um zyklische &uuml; &amp; Ersetzungen auszuschliessen";  final String txet=unicode2html(text,true);  System.out.println(txet);  System.out.println(html2unicode(txet));  if (html2unicode(txet).equals(text)) {    System.out.println("correct");  }  final String text2="encodeUnicode2xml: & \" < >";  System.out.println(text2);  System.out.println(unicode2xml(text2,true));  final String text3="space&nbsp;t&auml;st";  System.out.println(text3);  System.out.println(html2unicode(text3));}  }
class C{  private LegendItem createContinuousLegendItem(PlotInstance plotInstance,Set<PlotDimension> dimensionSet,double minValue,double maxValue,DateFormat dateFormat){  PlotConfiguration plotConfiguration=plotInstance.getCurrentPlotConfigurationClone();  PlotDimension dimension=dimensionSet.iterator().next();  DefaultDimensionConfig dimensionConfig=(DefaultDimensionConfig)plotConfiguration.getDimensionConfig(dimension);  DimensionConfigData dimensionConfigData=plotInstance.getPlotData().getDimensionConfigData(dimensionConfig);  String label="";  if (dimension == PlotDimension.COLOR) {    ColorProvider colorProvider=dimensionConfigData.getColorProvider();    if (!colorProvider.supportsNumericalValues()) {      throw new RuntimeException("Color provider for continuous legend item does not support numerical values.");    }    final int width=50;    final int height=10;    float fractions[]=new float[width];    Color colors[]=new Color[width];    for (int i=0; i < width; ++i) {      float fraction=i / (width - 1.0f);      double fractionValue;      if (colorProvider instanceof ContinuousColorProvider && ((ContinuousColorProvider)colorProvider).isColorMinMaxValueDifferentFromOriginal(((ContinuousColorProvider)colorProvider).getMinValue(),((ContinuousColorProvider)colorProvider).getMaxValue())) {        fractionValue=((ContinuousColorProvider)colorProvider).getMinValue() + fraction * (((ContinuousColorProvider)colorProvider).getMaxValue() - ((ContinuousColorProvider)colorProvider).getMinValue());      } else {        fractionValue=minValue + fraction * (maxValue - minValue);      }      colors[i]=colorProvider.getColorForValue(fractionValue);      fractions[i]=fraction;    }    LinearGradientPaint shapeFillPaint=new LinearGradientPaint(new Point(0,0),new Point(width,0),fractions,colors,CycleMethod.REPEAT);    Rectangle itemShape=new Rectangle(width,height);    if (colorProvider instanceof ContinuousColorProvider) {      return createFlankedShapeLegendItem(label,((ContinuousColorProvider)colorProvider).getMinValue(),((ContinuousColorProvider)colorProvider).getMaxValue(),itemShape,shapeFillPaint,true,dateFormat);    } else {      return createFlankedShapeLegendItem(label,minValue,maxValue,itemShape,shapeFillPaint,true,dateFormat);    }  } else   if (dimension == PlotDimension.SHAPE) {    return null;  } else   if (dimension == PlotDimension.SIZE) {    SizeProvider sizeProvider=dimensionConfigData.getSizeProvider();    if (!sizeProvider.supportsNumericalValues()) {      throw new RuntimeException("Size provider for continuous legend item does not support numerical values.");    }    double minScalingFactor=sizeProvider.getMinScalingFactor();    double maxScalingFactor=sizeProvider.getMaxScalingFactor();    ContinuousSizeProvider legendSizeProvider=new ContinuousSizeProvider(minScalingFactor,maxScalingFactor,MIN_LEGEND_ITEM_SCALING_FACTOR,MAX_LEGEND_ITEM_SCALING_FACTOR,false);    int legendItemCount=4;    Area composedShape=new Area();    Shape originalShape=UNDEFINED_SHAPE;    if (dimensionSet.contains(PlotDimension.SIZE) && dimensionSet.size() == 1) {      originalShape=UNDEFINED_SHAPE_AND_COLOR;    }    double maxHeight=originalShape.getBounds().getHeight() * MAX_LEGEND_ITEM_SCALING_FACTOR;    for (int i=0; i < legendItemCount; ++i) {      double fraction=minScalingFactor + ((double)i / legendItemCount * (maxScalingFactor - minScalingFactor));      double legendScalingFactor=legendSizeProvider.getScalingFactorForValue(fraction);      double composedWidth=composedShape.getBounds().getWidth();      AffineTransform t=new AffineTransform();      t.scale(legendScalingFactor,legendScalingFactor);      Shape shape=t.createTransformedShape(originalShape);      t=new AffineTransform();      double shapeWidth=shape.getBounds().getWidth();      double shapeHeight=shape.getBounds().getHeight();      t.translate(composedWidth + shapeWidth * .1,(maxHeight - shapeHeight) / 2.0);      t.translate(-shape.getBounds().getMinX(),-shape.getBounds().getMinY());      shape=t.createTransformedShape(shape);      composedShape.add(new Area(shape));    }    return createFlankedShapeLegendItem(label,minValue,maxValue,composedShape,UNDEFINED_COLOR_PAINT,false,dateFormat);  } else {    throw new RuntimeException("Unsupported dimension. Execution path should never reach this line.");  }}  }
class C{  public String numFoldsTipText(){  return "Number of folds for cross-validation.";}  }
class C{  public void add(Feature feature){  this.features.add(feature);}  }
class C{  @Override public void processEvent(final Event event){  boolean doProcess=true;  for (  EventFilter f : this.filters) {    if (!f.doProcessEvent(event)) {      doProcess=false;      break;    }  }  if (doProcess) {    super.processEvent(event);  }}  }
class C{  void processLoad(Instruction s){  HeapOperand<?>[] A1=ssa.getHeapUses(s);  HeapOperand<?>[] A2=ssa.getHeapDefs(s);  if ((A1.length != 1) || (A2.length != 1)) {    throw new OptimizingCompilerException("IndexPropagation.processLoad: load instruction defs or uses multiple heap variables?");  }  int valueNumber=-1;  if (GetField.conforms(s)) {    Object address=GetField.getRef(s);    valueNumber=valueNumbers.getValueNumber(address);  } else {    valueNumber=0;  }  if (IRTools.mayBeVolatileFieldLoad(s) || ir.options.READS_KILL) {    addUpdateObjectDefEquation(A2[0].getHeapVariable(),A1[0].getHeapVariable(),valueNumber);  } else {    addUpdateObjectUseEquation(A2[0].getHeapVariable(),A1[0].getHeapVariable(),valueNumber);  }}  }
class C{  public JsonObject remove(String name){  if (name == null) {    throw new NullPointerException("name is null");  }  int index=indexOf(name);  if (index != -1) {    table.remove(index);    names.remove(index);    values.remove(index);  }  return this;}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 9:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 8:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 7:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 6:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 5:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 4:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 3:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 11:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 10:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  protected void connectionFailed(Channel failedChannel,IOException cause){  failureCause=IOExceptionSupport.create(cause);  channel=failedChannel;  connected.set(false);  connectLatch.countDown();}  }
class C{  public boolean isMultiple(){  return is_multiple;}  }
class C{  public void map(L leftValue,R rightValue){  R oldRight=tableLeft.remove(leftValue);  if (oldRight != null) {    tableRight.remove(oldRight);  } else {    L oldLeft=tableRight.remove(rightValue);    if (oldLeft != null) {      tableLeft.remove(oldLeft);    }  }  tableLeft.put(leftValue,rightValue);  tableRight.put(rightValue,leftValue);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static Injector createInjector(Stage stage,Iterable<? extends Module> modules){  return new InjectorBuilder().stage(stage).addModules(modules).build();}  }
class C{  public static int invokeGetter(Object obj,String methodName,int defaultValue){  try {    Method method=obj.getClass().getMethod(methodName,new Class[0]);    Object result=method.invoke(obj,new Object[0]);    return ((Integer)result).intValue();  } catch (  NoSuchMethodException e) {    return defaultValue;  }catch (  IllegalAccessException e) {    return defaultValue;  }catch (  InvocationTargetException e) {    return defaultValue;  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public TextNode createTextNode(final ArrayList<IComment> comments){  Preconditions.checkNotNull(comments,"Error: Text argument can not be null");  final CTextNode newTextNode=naviView.getContent().createTextNode(comments);  return (TextNode)cachedNodes.get(newTextNode);}  }
class C{  public Period withMonths(int months){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.MONTH_INDEX,values,months);  return new Period(values,getPeriodType());}  }
class C{  protected void diff_charsToLines(LinkedList<Diff> diffs,List<String> lineArray){  StringBuilder text;  for (  Diff diff : diffs) {    text=new StringBuilder();    for (int y=0; y < diff.text.length(); y++) {      text.append(lineArray.get(diff.text.charAt(y)));    }    diff.text=text.toString();  }}  }
class C{  private final void writeQuickFullUTF(String str,int strlen) throws IOException {  int utfSizeIdx=this.buffer.position();  this.buffer.position(utfSizeIdx + 2);  for (int i=0; i < strlen; i++) {    int c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      this.buffer.put((byte)c);    } else     if (c > 0x07FF) {      this.buffer.put((byte)(0xE0 | ((c >> 12) & 0x0F)));      this.buffer.put((byte)(0x80 | ((c >> 6) & 0x3F)));      this.buffer.put((byte)(0x80 | ((c >> 0) & 0x3F)));    } else {      this.buffer.put((byte)(0xC0 | ((c >> 6) & 0x1F)));      this.buffer.put((byte)(0x80 | ((c >> 0) & 0x3F)));    }  }  int utflen=this.buffer.position() - (utfSizeIdx + 2);  if (utflen > 65535) {    this.buffer.position(utfSizeIdx);    throw new UTFDataFormatException();  }  this.buffer.putShort(utfSizeIdx,(short)utflen);}  }
class C{  public PersistentSearchControl(int changeTypes,boolean changesOnly,boolean returnControls,boolean criticality) throws IOException {  super(OID,criticality,null);  this.changeTypes=changeTypes;  this.changesOnly=changesOnly;  this.returnControls=returnControls;  super.value=setEncodedValue();}  }
class C{  public int size(){  return iTypes.length;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  @Override public void onServiceConnected(Messenger m){  mRemoteService=DownloaderServiceMarshaller.CreateProxy(m);  mRemoteService.onClientUpdated(mDownloaderClientStub.getMessenger());}  }
class C{  protected Object next(){  int i=0;  char[] c;  try {    i=st.nextToken();  } catch (  IOException e) {    Debug.error("NetMapReader: " + e.toString() + " in toktest\n");  }  if ((i == StreamTokenizer.TT_EOF) || (i == 0))   return EOF;  if (i == StreamTokenizer.TT_WORD)   return new Symbol(st.sval,1);  if ((i == '\'') || (i == '\"'))   return st.sval;  if (i == StreamTokenizer.TT_NUMBER)   return new Double(st.nval);  if ((i == '(') || (i == '[') || (i == '{'))   return LP;  if ((i == ')') || (i == ']') || (i == '}'))   return RP;  c=new char[1];  c[0]=(char)i;  return new Symbol(new String(c),2);}  }
class C{  void addProducer(final MessageProducer producer){  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("addProducer(" + producer + ")");  }synchronized (producers) {    producers.add(producer);  }}  }
class C{  private static void printMBeans(MBeanServerConnection mbsc) throws Exception {  ObjectName filterName=new ObjectName("java.lang:*");  Set<ObjectName> set=mbsc.queryNames(filterName,null);  if (set.size() == 0) {    throw new RuntimeException("(ERROR) No MBean found with filter " + filterName);  }  System.out.println("---- MBeans found in domain java.lang :");  for (Iterator<ObjectName> iter=set.iterator(); iter.hasNext(); ) {    System.out.println(iter.next().toString());  }  System.out.println("\n");}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInInitialState);  assertTrue(!stateErrors.errorInInitialStateAfterReset);  assertTrue(!stateErrors.errorInInitialStateAfterStop);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInPreparedState);  assertTrue(stateErrors.errorInRecordingState);  assertTrue(stateErrors.errorInDataSourceConfiguredState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3){  return construct(e1,e2,e3);}  }
class C{  public static void log(final String message,final Throwable t){  getDefault().getLog().log(new Status(ERROR,PLUGIN_ID,Strings.nullToEmpty(message),t));}  }
class C{  public void bindModel(Object sender,MODEL model){  super.bindModel(model);}  }
class C{  public FileTypeEntity createFileTypeEntity(String fileTypeCode,String fileTypeDescription){  FileTypeEntity fileTypeEntity=new FileTypeEntity();  fileTypeEntity.setCode(fileTypeCode);  fileTypeEntity.setDescription(fileTypeDescription);  return fileTypeDao.saveAndRefresh(fileTypeEntity);}  }
class C{  public static boolean isImportElement(Node node){  return node.getNodeType() == Node.ELEMENT_NODE && UiBinderConstants.UI_BINDER_XML_NAMESPACE.equals(node.getNamespaceURI()) && UiBinderConstants.UI_BINDER_IMPORT_ELEMENT_NAME.equalsIgnoreCase(node.getLocalName());}  }
class C{  public synchronized void pressStop(){  if (getPlayState() != PS_STOPPED) {    killPlayThread();    simulation.finish();    stopAllInspectors(true);    setPlayState(PS_STOPPED);    if (getIncrementSeedOnStop()) {      randomSeed=(int)(randomSeed + 1);    }  }}  }
class C{  public static void revealEditText(EditText text){  int cx=text.getRight() - 30;  int cy=text.getBottom() - 60;  int finalRadius=Math.max(text.getWidth(),text.getHeight());  Animator anim=ViewAnimationUtils.createCircularReveal(text,cx,cy,0,finalRadius);  text.setVisibility(View.VISIBLE);  anim.start();}  }
class C{  @Override public void defineField(String fieldName,Type fieldType){  if (fields.containsKey(fieldName)) {    throw new RuntimeException("Type " + getName() + " already contains a field called "+ fieldName);  }  int offset=fieldType.isObject() ? referenceFields++ : dataFields++;  Field field=new Field(fieldName,fieldType,offset);  fields.put(fieldName,field);}  }
class C{  public static byte[] encode(final byte[] data) throws IOException {  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();  GZIPOutputStream gzOut=null;  try {    gzOut=new GZIPOutputStream(byteOut);    gzOut.write(data);    gzOut.close();    byteOut.close();    return byteOut.toByteArray();  }  finally {    gzOut.close();    byteOut.close();  }}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public SupportedCurrency(String currencyCode){  this();  setCurrency(Currency.getInstance(currencyCode));}  }
class C{  public synchronized boolean isUseQuotes(){  return useQuotes;}  }
class C{  public DoubleMatrix2D like2D(int rows,int columns){  return new SparseDoubleMatrix2D(rows,columns);}  }
class C{  void zkInit() throws Exception {  form=new WMergeUI(this);  form.appendChild(mainLayout);  mainLayout.setHeight("100%");  mainLayout.setWidth("100%");  South south=new South();  mainLayout.appendChild(south);  south.appendChild(confirmPanel);  confirmPanel.addActionListener(this);  Rows rows=centerLayout.newRows();  CenterPanel.appendChild(centerLayout);  Center center=new Center();  mainLayout.appendChild(center);  center.appendChild(CenterPanel);  Row row=rows.newRow();  row.appendChild(new Label());  row.appendChild(mergeFromLabel);  row.appendChild(mergeToLabel);  mergeFromLabel.setText(Msg.getMsg(Env.getCtx(),"MergeFrom"));  mergeFromLabel.setStyle("font-weight: bold");  mergeToLabel.setText(Msg.getMsg(Env.getCtx(),"MergeTo"));  mergeToLabel.setStyle("font-weight: bold");  for (int i=0; i < m_label.length; i++) {    row=rows.newRow();    row.appendChild(m_label[i]);    row.appendChild(m_from[i].getComponent());    row.appendChild(m_to[i].getComponent());  }}  }
class C{  public static int emit(List<ForgeDirection> sides,FluidStack stack,TileEntity from){  if (stack == null) {    return 0;  }  List<IFluidHandler> availableAcceptors=new ArrayList<IFluidHandler>();  IFluidHandler[] possibleAcceptors=getConnectedAcceptors(from);  for (int i=0; i < possibleAcceptors.length; i++) {    IFluidHandler handler=possibleAcceptors[i];    if (handler != null && handler.canFill(ForgeDirection.getOrientation(i).getOpposite(),stack.getFluid())) {      availableAcceptors.add(handler);    }  }  Collections.shuffle(availableAcceptors);  int toSend=stack.amount;  int prevSending=toSend;  if (!availableAcceptors.isEmpty()) {    int divider=availableAcceptors.size();    int remaining=toSend % divider;    int sending=(toSend - remaining) / divider;    for (    IFluidHandler acceptor : availableAcceptors) {      int currentSending=sending;      if (remaining > 0) {        currentSending++;        remaining--;      }      ForgeDirection dir=ForgeDirection.getOrientation(Arrays.asList(possibleAcceptors).indexOf(acceptor)).getOpposite();      toSend-=acceptor.fill(dir,new FluidStack(stack.getFluid(),currentSending),true);    }  }  return prevSending - toSend;}  }
class C{  private void dropFragmentsTo(long absolutePosition){  int relativePosition=(int)(absolutePosition - totalBytesDropped);  int fragmentIndex=relativePosition / fragmentLength;  for (int i=0; i < fragmentIndex; i++) {    fragmentPool.releaseDirect(dataQueue.remove());    totalBytesDropped+=fragmentLength;  }}  }
class C{  private void removeListener(JmriSimplePropertyListener listener){  String msg=null;  NamedBean nb;  NamedBeanHandle<?> namedBeanHandle;  try {switch (listener.getType()) {case LISTENER_TYPE_FASTCLOCK:      Timebase tb=InstanceManager.getDefault(jmri.Timebase.class);    tb.removeMinuteChangeListener(listener);  return;case LISTENER_TYPE_ENTRYEXIT:NamedBean ex=jmri.InstanceManager.getDefault(jmri.jmrit.signalling.EntryExitPairs.class).getBySystemName(listener.getDevName());if (ex == null) {msg="entryexit";break;}ex.addPropertyChangeListener(listener);return;default :namedBeanHandle=listener.getNamedBean();if (namedBeanHandle == null) {switch (listener.getType()) {case LISTENER_TYPE_SENSOR:msg="sensor";break;case LISTENER_TYPE_TURNOUT:msg="turnout";break;case LISTENER_TYPE_LIGHT:msg="light";break;case LISTENER_TYPE_CONDITIONAL:msg="conditional";break;case LISTENER_TYPE_SIGNALHEAD:msg="signalhead";break;case LISTENER_TYPE_SIGNALMAST:msg="signalmast";break;case LISTENER_TYPE_MEMORY:msg="memory";break;case LISTENER_TYPE_WARRANT:msg="warrant";break;case LISTENER_TYPE_OBLOCK:msg="oblock";break;case LISTENER_TYPE_ENTRYEXIT:msg="entry exit";break;default :msg="unknown";}break;}nb=(NamedBean)namedBeanHandle.getBean();nb.removePropertyChangeListener(listener);return;}} catch (Throwable t) {log.error("Bad name for listener on \"" + listener.getDevName() + "\": "+ t);}log.error("Bad name for " + msg + " listener on \""+ listener.getDevName()+ "\" when removing");}  }
class C{  private void checkWithMatDef(){  matDefEntries.clear();  boolean params=false;  int level=0;  if (matDef != null && matDef.isValid()) {    try {      for (      String defLine : matDef.asLines()) {        defLine=MaterialUtils.trimLine(defLine.trim());        if (defLine.startsWith("MaterialParameters ") || defLine.startsWith("MaterialParameters\t") || defLine.startsWith("MaterialParameters{") && level == 1) {          params=true;        }        if (defLine.indexOf("{") != -1) {          level++;        }        if (defLine.indexOf("}") != -1) {          level--;          if (params) {            params=false;          }        }        if (level == 2 && params) {          for (int i=0; i < variableTypes.length; i++) {            String string=variableTypes[i];            if (defLine.startsWith(string)) {              String name=MaterialUtils.trimName(defLine.replaceFirst(string,""));              matDefEntries.add(name);              MaterialProperty prop=materialParameters.get(name);              if (prop == null) {                prop=new MaterialProperty();                prop.setName(name);                prop.setValue("");                materialParameters.put(prop.getName(),prop);              }              prop.setType(string);            }          }        }      }    } catch (    IOException ex) {      Exceptions.printStackTrace(ex);    }  } else {    Logger.getLogger(EditableMaterialFile.class.getName()).log(Level.WARNING,"Could not read MaterialDef!");  }  for (Iterator<Map.Entry<String,MaterialProperty>> it=materialParameters.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<String,MaterialProperty> entry=it.next();    if (!matDefEntries.contains(entry.getKey())) {      it.remove();    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void drawGraphAxes(){  int top=frame_y + border_width_;  int bottom=frame_y + frame_height_ - border_width_;  int left=frame_x + border_width_;  int right=frame_x + frame_width_ - border_width_;  String min_year_string=GetStringDateFromFloat(min_year_);  String max_year_string=GetStringDateFromFloat(max_year_);  OMLine year_axis=createPlotLine(left,bottom,right,bottom,plot_color_);  OMLine temp_axis=createPlotLine(left,top,left,bottom,plot_color_);  OMText year_min_label=createLabel(min_year_string + " ",left,bottom + 10);  OMText year_max_label=createLabel(max_year_string + " ",right - 30,bottom + 10);  OMText temp_min_label=createLabel(min_temp_ + " ",left,bottom,plot_color_,OMText.JUSTIFY_RIGHT);  OMText temp_max_label=createLabel(max_temp_ + " ",left,top,plot_color_,OMText.JUSTIFY_RIGHT);  OMText temp_axis_label=createLabel("Temp",left,frame_y + (frame_height_ / 2),plot_color_,OMText.JUSTIFY_RIGHT);  OMText year_axis_label=createLabel("Year",frame_x + (frame_width_ / 2),bottom + 15);  OMRect background=new OMRect(frame_x,frame_y,frame_x + frame_width_,frame_y + frame_height_);  background.setFillPaint(graph_bg_color);  background.setLinePaint(graph_bg_color);  year_axis.putAttribute(OMGraphic.APP_OBJECT,this);  temp_axis.putAttribute(OMGraphic.APP_OBJECT,this);  plot_background_.add(background);  plot_background_.add(year_axis);  plot_background_.add(temp_axis);  plot_background_.add(temp_axis_label);  plot_background_.add(year_axis_label);  plot_background_.add(year_min_label);  plot_background_.add(year_max_label);  plot_background_.add(temp_min_label);  plot_background_.add(temp_max_label);  plot_graphics_.add(plot_background_);  axes_displayed_=true;}  }
class C{  public boolean isFragmentArray(){  return isFragmentArray;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private static void verifyDigestsImplicitly(InputStream in) throws IOException {  byte[] buffer=new byte[BUF_SIZE];  while (in.read(buffer,0,buffer.length) != -1) {  }}  }
class C{  protected AbstractConnPool createConnectionPool(final HttpParams params){  AbstractConnPool acp=new ConnPoolByRoute(connOperator,params);  boolean conngc=true;  if (conngc) {    acp.enableConnectionGC();  }  return acp;}  }
class C{  public Ed25519GroupElement scalarMultiply(final Ed25519EncodedFieldElement a){  Ed25519GroupElement g;  int i;  final byte[] e=toRadix16(a);  Ed25519GroupElement h=Ed25519Group.ZERO_P3;  for (i=1; i < 64; i+=2) {    g=this.select(i / 2,e[i]);    h=h.precomputedAdd(g).toP3();  }  h=h.dbl().toP2().dbl().toP2().dbl().toP2().dbl().toP3();  for (i=0; i < 64; i+=2) {    g=this.select(i / 2,e[i]);    h=h.precomputedAdd(g).toP3();  }  return h;}  }
class C{  public static MessagingFraction createDefaultFraction(EnhancedServerConsumer config){  return new MessagingFraction().defaultServer(config);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) private AutoInstallsLayout createWorkspaceLoaderFromAppRestriction(){  if (!Utilities.ATLEAST_JB_MR2) {    return null;  }  Context ctx=getContext();  UserManager um=(UserManager)ctx.getSystemService(Context.USER_SERVICE);  Bundle bundle=um.getApplicationRestrictions(ctx.getPackageName());  if (bundle == null) {    return null;  }  String packageName=bundle.getString(RESTRICTION_PACKAGE_NAME);  if (packageName != null) {    try {      Resources targetResources=ctx.getPackageManager().getResourcesForApplication(packageName);      return AutoInstallsLayout.get(ctx,packageName,targetResources,mOpenHelper.mAppWidgetHost,mOpenHelper);    } catch (    NameNotFoundException e) {      Log.e(TAG,"Target package for restricted profile not found",e);      return null;    }  }  return null;}  }
class C{  private void addInlineValueInputPatch(boolean isShadow,int i,int inlineRowIdx,int blockFromX,InputView inputView,ViewPoint inputLayoutOrigin){  final int cutoutX=blockFromX + inputLayoutOrigin.x + inputView.getInlineInputX();  final int cutoutY=inputLayoutOrigin.y + mBlockTopPadding;  mHelper.setPointMaybeFlip(mInputConnectorOffsets.get(i),cutoutX + mPatchManager.mInlineInputStartPadding + mPatchManager.mOutputConnectorWidth,cutoutY + mPatchManager.mInlineInputTopPadding);  if (inlineRowIdx > 0) {    fillRectBySize(cutoutX,inputLayoutOrigin.y,inputView.getTotalChildWidth(),mBlockTopPadding);    finishFillRect();  }  final NinePatchDrawable inputDrawable=getColoredPatchDrawable(isShadow ? R.drawable.value_input_inline_shadow : R.drawable.value_input_inline);  final NinePatchDrawable connectionHighlightDrawable=mPatchManager.getPatchDrawable(R.drawable.value_input_inline_connection);  mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,cutoutX,cutoutY,cutoutX + inputView.getTotalChildWidth(),cutoutY + inputView.getTotalChildHeight());  inputDrawable.setBounds(tempRect);  connectionHighlightDrawable.setBounds(tempRect);  mBlockPatches.add(inputDrawable);  mInputConnectionHighlightPatches.set(i,connectionHighlightDrawable);  final int cutoutEndX=cutoutX + inputView.getTotalChildWidth();  final int cutoutEndY=inputLayoutOrigin.y + inputView.getRowHeight();  fillRect(cutoutX,cutoutY + inputView.getTotalChildHeight(),cutoutEndX,cutoutEndY);  fillRect(cutoutEndX,inputLayoutOrigin.y,inputLayoutOrigin.x + inputView.getMeasuredWidth(),cutoutEndY);  final int nextI=i + 1;  if ((nextI == mInputCount) || (mInputViews.get(nextI).getInput().getType() == Input.TYPE_STATEMENT)) {    final int patchX=blockFromX + mInlineRowWidth.get(inlineRowIdx) - mPatchManager.mBlockTotalPaddingX;    final int patchY=inputLayoutOrigin.y + (inlineRowIdx > 0 ? 0 : mBlockTopPadding);    final int patchRight=patchX + mPatchManager.mBlockEndPadding;    final NinePatchDrawable blockFillDrawable=getColoredPatchDrawable(isShadow ? R.drawable.dummy_input_shadow : R.drawable.dummy_input);    final NinePatchDrawable blockFillBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.dummy_input_border);    mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,patchX,patchY,patchRight,cutoutEndY);    blockFillDrawable.setBounds(tempRect);    blockFillBorderDrawable.setBounds(tempRect);    mBlockPatches.add(blockFillDrawable);    mBlockBorderPatches.add(blockFillBorderDrawable);    fillRect(inputLayoutOrigin.x + mPatchManager.mBlockStartPadding + inputView.getMeasuredWidth(),patchY,patchX,cutoutEndY);  }}  }
class C{  public Message messageForRegistrant(){  Handler h=getHandler();  if (h == null) {    clear();    return null;  } else {    Message msg=h.obtainMessage();    msg.what=what;    msg.obj=userObj;    return msg;  }}  }
class C{  public UnaryTupleOperator(TupleExpr arg){  setArg(arg);}  }
class C{  public void write(ExceptionlessOutputStream out){  super.write(out);  POSBaselineLearner.write(out,firstCapitalized);  POSBaselineLearner.write(out,notFirstCapitalized);}  }
class C{  public void sortChildrenByNode(Comparator<TreeNode<T>> comparator){  Collections.sort(children,comparator);  for (  TreeNode<T> child : children) {    child.sortChildrenByNode(comparator);  }}  }
class C{  protected boolean isPatchMethod(ODataRequest.Method method){  return ODataRequest.Method.PATCH.equals(method);}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.radius);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + HashUtilities.hashCodeForPaint(this.backgroundPaint);  result=37 * result + HashUtilities.hashCodeForPaint(this.foregroundPaint);  result=37 * result + this.stroke.hashCode();  return result;}  }
class C{  public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());}  }
class C{  public FBUserManager(){  super();}  }
class C{  protected Expression gte(int opPos) throws TransformerException {  return compileOperation(new Gte(),opPos);}  }
class C{  public boolean isIntersection(Type pt){  return pt != null && pt.isIntersection() && pt.getSatisfiedTypes().size() > 1;}  }
class C{  public final boolean strictdefault(){  return (getFlags() & F_STRICTDEFAULT) != 0;}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public GF2Vector(int length,int[] v){  if (length < 0) {    throw new ArithmeticException("negative length");  }  this.length=length;  int size=(length + 31) >> 5;  if (v.length != size) {    throw new ArithmeticException("length mismatch");  }  this.v=IntUtils.clone(v);  int r=length & 0x1f;  if (r != 0) {    this.v[size - 1]&=(1 << r) - 1;  }}  }
class C{  public void finest(String msg){  log(Level.FINEST,msg);}  }
class C{  private static int parseNumber(CharSequence offsetId,int pos,boolean precededByColon){  if (precededByColon && offsetId.charAt(pos - 1) != ':') {    throw new DateTimeException("Invalid ID for ZoneOffset, colon not found when expected: " + offsetId);  }  char ch1=offsetId.charAt(pos);  char ch2=offsetId.charAt(pos + 1);  if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {    throw new DateTimeException("Invalid ID for ZoneOffset, non numeric characters found: " + offsetId);  }  return (ch1 - 48) * 10 + (ch2 - 48);}  }
class C{  public void initOrganizarUDocsExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  ClientInvocation cli=getInvocationStack(request).getLastClientInvocation();  cli.setAsReturnPoint(true);  setInTemporalSession(request,DepositoConstants.HAY_CAMBIOS_SIN_GUARDAR,Boolean.FALSE);  OrganizacionUDocsForm formulario=(OrganizacionUDocsForm)form;  String idUnidadInstalacion=formulario.getIdUinstalacion();  GestorEstructuraDepositoBI depositoBI=getGestorEstructuraDepositoBI(request);  UInsDepositoVO uinsDepositoVO=depositoBI.getUinsEnDeposito(idUnidadInstalacion);  ActionErrors errors=new ActionErrors();  removeInTemporalSession(request,DepositoConstants.LISTA_UDOCS_EN_CAJA);  List listaUdocs=depositoBI.getUDocsValidadasEnUInstalacion(formulario.getIdUinstalacion());  setListUDocs(request,listaUdocs);  if (MarcaUtilUI.isUnidadInstalacionBloqueada(uinsDepositoVO.getMarcasBloqueo())) {    errors.add(Constants.ERROR_UINSTALACION_BLOQUEADA_NO_ORGANIZAR,new ActionError(Constants.ERROR_UINSTALACION_BLOQUEADA_NO_ORGANIZAR));    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mappings.findForward("listado_udocs"));    return;  } else {    List listaIdsUdocs=new ArrayList();    Iterator it=listaUdocs.iterator();    while (it.hasNext()) {      UDocEnUiDepositoVO udoc=(UDocEnUiDepositoVO)it.next();      listaIdsUdocs.add(udoc.getIdunidaddoc());    }    if (!ListUtils.isEmpty(listaIdsUdocs)) {      GestorEstructuraDepositoBI depositoService=getGestionDespositoBI(request);      int[] estados=Constants.ESTADOS_DETALLES_EN_PRESTAMOS;      List uDocsNoDisponibles=depositoService.getUDocsEnPrestamoByEstado(listaIdsUdocs,estados);      if (!ListUtils.isEmpty(uDocsNoDisponibles)) {        String uDocsMessage=obtenerMensajeDeUnidadesNoDisponibles(listaUdocs,uDocsNoDisponibles);        errors.add(Constants.ERROR_UDOCS_EN_PRESTAMOS,new ActionError(Constants.ERROR_UDOCS_EN_PRESTAMOS,uDocsMessage));        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mappings.findForward("listado_udocs"));        return;      }    }  }  formulario.resetInInit();  setReturnActionFordward(request,ActionForwardUtils.getActionForward(request,"organizarUDocs"));}  }
class C{  private static final void quicksort(GeoTimeSerie gts,int low,int high,boolean reversed){  if (0 == gts.values) {    return;  }  int i=low, j=high;  long pivot=gts.ticks[low + (high - low) / 2];  while (i <= j) {    while ((!reversed && gts.ticks[i] < pivot) || (reversed && gts.ticks[i] > pivot)) {      i++;    }    while ((!reversed && gts.ticks[j] > pivot) || (reversed && gts.ticks[j] < pivot)) {      j--;    }    if (i <= j) {      long tmplong=gts.ticks[i];      gts.ticks[i]=gts.ticks[j];      gts.ticks[j]=tmplong;      if (null != gts.locations) {        tmplong=gts.locations[i];        gts.locations[i]=gts.locations[j];        gts.locations[j]=tmplong;      }      if (null != gts.elevations) {        tmplong=gts.elevations[i];        gts.elevations[i]=gts.elevations[j];        gts.elevations[j]=tmplong;      }      if (TYPE.LONG == gts.type) {        tmplong=gts.longValues[i];        gts.longValues[i]=gts.longValues[j];        gts.longValues[j]=tmplong;      } else       if (TYPE.DOUBLE == gts.type) {        double tmpdouble=gts.doubleValues[i];        gts.doubleValues[i]=gts.doubleValues[j];        gts.doubleValues[j]=tmpdouble;      } else       if (TYPE.STRING == gts.type) {        String tmpstring=gts.stringValues[i];        gts.stringValues[i]=gts.stringValues[j];        gts.stringValues[j]=tmpstring;      } else       if (TYPE.BOOLEAN == gts.type) {        boolean tmpboolean=gts.booleanValues.get(i);        gts.booleanValues.set(i,gts.booleanValues.get(j));        gts.booleanValues.set(j,tmpboolean);      }      i++;      j--;    }  }  if (low < j) {    quicksort(gts,low,j,reversed);  }  if (i < high) {    quicksort(gts,i,high,reversed);  }}  }
class C{  public String validateQuery(String request,String... tests) throws Exception {  String res=query(request);  return validateXPath(res,tests);}  }
class C{  public void addExtension(String extension){  if (!extension.startsWith("."))   extension="." + extension;  extensions.add(extension.toLowerCase());}  }
class C{  public void queue(String entity,String event,String key){  if (broadcastEvents == null)   return;  try {    counter.incrementAndGet();    broadcastEvents.putFirst(new BroadcastEvent(entity,event,key));  } catch (  Exception e) {    counter.decrementAndGet();    logger.error("error putting BroadcastEvent",e);  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static float findRequiredSwModuleExtraWidth(final float newBrowserWidth){  return newBrowserWidth > SPUIDefinitions.REQ_MIN_UPLOAD_BROWSER_WIDTH ? (newBrowserWidth - SPUIDefinitions.REQ_MIN_UPLOAD_BROWSER_WIDTH) : 0;}  }
class C{  public HostAddress(String fqdn,int port){  this(fqdn);  if (port < 0 || port > 65535)   throw new IllegalArgumentException("DNS SRV records weight must be a 16-bit unsiged integer (i.e. between 0-65535. Port was: " + port);  this.port=port;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  private TimeDescription parseTimeDescription(){  TimeDescription td=new TimeDescription();  td.timeActive=getLine(bin);  td.repeatTimes=new Vector<>();  while (getToken(bin,"r=")) {    String repeatTime=getLine(bin);    td.repeatTimes.addElement(repeatTime);  }  return td;}  }
class C{  private void addToClassPool(final Path location){  if (!location.toFile().exists())   throw new IllegalArgumentException("The location '" + location + "' does not exist!");  try {    final Method method=URLClassLoader.class.getDeclaredMethod("addURL",URL.class);    method.setAccessible(true);    method.invoke(urlClassLoader,location.toUri().toURL());  } catch (  Exception e) {    throw new IllegalArgumentException("The location '" + location + "' could not be loaded to the class path!",e);  }}  }
class C{  public boolean isFixedTopicSet(){  return fixedTopicSet;}  }
class C{  public boolean okToSend(){  return (true);}  }
class C{  public void testNextAllTerms() throws Exception {  List<String> termsList=new ArrayList<>();  termsList.addAll(Arrays.asList(commonTerms));  termsList.addAll(Arrays.asList(mediumTerms));  termsList.addAll(Arrays.asList(rareTerms));  String terms[]=termsList.toArray(new String[0]);  for (int minNrShouldMatch=1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {    Scorer expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);    Scorer actual=scorer(terms,minNrShouldMatch,Mode.SCORER);    assertNext(expected,actual);    expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);    actual=scorer(terms,minNrShouldMatch,Mode.BULK_SCORER);    assertNext(expected,actual);  }}  }
class C{  public static BindingsConfigurationProvider doBind(BindingsConfigurationProvider provider){  return provider.bind(SchemaManager.class,MemorySchemaManager.class).bind(Store.class,MemoryStore.class).bind(IndexStatisticsService.class,MemoryIndexStatisticsService.class).bind(TransactionService.class,MemoryTransactionService.class);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public AbLevelChart(AbLevelSeriesDataset mDataset,AbLevelSeriesRenderer mRenderer){  super();  this.mDataset=mDataset;  this.mRenderer=mRenderer;  this.measureWidth=mRenderer.getWidth();  this.measureHeight=mRenderer.getHeight();}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.745 -0500",hash_original_method="15DFE7F1F24F7739B7BEC1E53A5655D9",hash_generated_method="A51DBBACDC7D08538567B9F2381DBF56") public void parseForMethod(GenericDeclaration genericDecl,String signature,Class<?>[] rawExceptionTypes){  setInput(genericDecl,signature);  if (!eof) {    parseMethodTypeSignature(rawExceptionTypes);  } else {    if (genericDecl instanceof Method) {      Method m=(Method)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=new ListOfTypes(m.getParameterTypes());      this.exceptionTypes=new ListOfTypes(m.getExceptionTypes());      this.returnType=m.getReturnType();    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=ListOfTypes.EMPTY;      this.exceptionTypes=ListOfTypes.EMPTY;      this.returnType=void.class;    }  }}  }
class C{  public E remove(){  E o=poll();  if (null == o) {    throw new NoSuchElementException();  }  return o;}  }
class C{  public void startAsServer(){}  }
class C{  public boolean isSetTaskState(){  return this.taskState != null;}  }
class C{  public static String escapeCsvData(String data){  ByteArrayOutputStream out=new ByteArrayOutputStream();  CsvWriter writer=new CsvWriter(new OutputStreamWriter(out),',');  writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);  try {    writer.write(data);    writer.close();    out.close();  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public static ActorSystem system(){  return mainSystem;}  }
class C{  public boolean boolValue(){  if (type == BOOLEAN)   return boolValue; else   return longValue != 0;}  }
class C{  private void checkRemarks() throws Exception {  int index;  if (_remarks != null) {    index=_remarks.indexOf("\"");    if (index > -1)     AdminException.throwException(VolumeListErrorCodes.EC_LISTVOL_REMARKS_EXIST_QUOTES);  }}  }
class C{  public static Random createRandom(){  return createRandom(0L);}  }
class C{  protected final void storeState(){  storedLogLikelihood=logLikelihood;}  }
class C{  protected String instanceToString(Instance inst){  StringBuffer result;  Instance outInst;  int i;  String field;  result=new StringBuffer();  if (inst instanceof SparseInstance) {    outInst=new DenseInstance(inst.weight(),inst.toDoubleArray());    outInst.setDataset(inst.dataset());  } else {    outInst=inst;  }  for (i=0; i < outInst.numAttributes(); i++) {    if (i > 0) {      result.append(m_FieldSeparator);    }    if (outInst.isMissing(i)) {      field=m_MissingValue;    } else {      field=outInst.toString(i,m_MaxDecimalPlaces);    }    if (m_FieldSeparator.length() == 1 && (field.indexOf(m_FieldSeparator) > -1) && !field.startsWith("'") && !field.endsWith("'")) {      field="'" + field + "'";    }    result.append(field);  }  return result.toString();}  }
class C{  public void removeHostWhenNotInUse(String hostPortPair) throws SQLException {  if (this.hostRemovalGracePeriod <= 0) {    removeHost(hostPortPair);    return;  }  int timeBetweenChecks=this.hostRemovalGracePeriod > 1000 ? 1000 : this.hostRemovalGracePeriod;synchronized (this) {    addToGlobalBlacklist(hostPortPair,System.currentTimeMillis() + this.hostRemovalGracePeriod + timeBetweenChecks);    long cur=System.currentTimeMillis();    while (System.currentTimeMillis() < cur + this.hostRemovalGracePeriod) {      this.hostsToRemove.add(hostPortPair);      if (!hostPortPair.equals(this.currentConnection.getHostPortPair())) {        removeHost(hostPortPair);        return;      }      try {        Thread.sleep(timeBetweenChecks);      } catch (      InterruptedException e) {      }    }  }  removeHost(hostPortPair);}  }
class C{  public static String write(POSBaseLineCounter counter){  Gson gson=new GsonBuilder().create();  return gson.toJson(counter);}  }
class C{  static void unregister(final Object value){  if (value != null) {    final Map<Object,Object> m=getRegistry();    if (m != null) {      m.remove(value);      if (m.isEmpty()) {        REGISTRY.remove();      }    }  }}  }
class C{  public static WorkflowAnnotations lookupProcessAnnotations(ExecutionUnit process){  return (WorkflowAnnotations)process.getUserData(KEY_PROCESS_ANNOTATION);}  }
class C{  private CProjectTreeNode<?> findNode(){  return findProjectContainerNode(CProjectTreeNodeHelpers.findDatabaseNode(getProjectTree(),database));}  }
class C{  public boolean isLocked(){  return world.isLocked();}  }
class C{  @Override public void reduce(Text key,Iterable<IntWritable> vals,Context ctx) throws IOException, InterruptedException {  int sum=0;  for (  IntWritable val : vals)   sum+=val.get();  q.add(immutableEntry(sum,key.toString()));}  }
class C{  protected char[] normalize(final char[] path) throws URIException {  if (path == null) {    return null;  }  String normalized=new String(path);  if (normalized.startsWith("./")) {    normalized=normalized.substring(1);  } else   if (normalized.startsWith("../")) {    normalized=normalized.substring(2);  } else   if (normalized.startsWith("..")) {    normalized=normalized.substring(2);  }  int index=-1;  while ((index=normalized.indexOf("/./")) != -1) {    normalized=normalized.substring(0,index) + normalized.substring(index + 2);  }  if (normalized.endsWith("/.")) {    normalized=normalized.substring(0,normalized.length() - 1);  }  int startIndex=0;  while ((index=normalized.indexOf("/../",startIndex)) != -1) {    final int slashIndex=normalized.lastIndexOf('/',index - 1);    if (slashIndex >= 0) {      normalized=normalized.substring(0,slashIndex) + normalized.substring(index + 3);    } else {      startIndex=index + 3;    }  }  if (normalized.endsWith("/..")) {    final int slashIndex=normalized.lastIndexOf('/',normalized.length() - 4);    if (slashIndex >= 0) {      normalized=normalized.substring(0,slashIndex + 1);    }  }  while ((index=normalized.indexOf("/../")) != -1) {    final int slashIndex=normalized.lastIndexOf('/',index - 1);    if (slashIndex >= 0) {      break;    } else {      normalized=normalized.substring(index + 3);    }  }  if (normalized.endsWith("/..")) {    final int slashIndex=normalized.lastIndexOf('/',normalized.length() - 4);    if (slashIndex < 0) {      normalized="/";    }  }  return normalized.toCharArray();}  }
class C{  private void readIntoBuffer(InputStream is) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  bSize=0;  while (true) {    int n=is.read(b,bSize,b.length - bSize);    if (n == -1) {      break;    }    bSize+=n;    if (bSize >= b.length) {      byte[] c=new byte[b.length << 2];      System.arraycopy(b,0,c,0,b.length);      b=c;    }  }}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.changedUpdate(e,a,f);synchronized (this) {    state|=RELOAD_FLAG | RELOAD_IMAGE_FLAG;  }  preferenceChanged(null,true,true);}  }
class C{  public void testWhitespaceBug2() throws Exception {  Document doc=DocumentHelper.createDocument();  Element root=doc.addElement("root");  Element meaning=root.addElement("meaning");  meaning.addText("to li");  meaning.addText("ve");  OutputFormat format=new OutputFormat();  format.setEncoding("UTF-8");  format.setIndentSize(4);  format.setNewlines(true);  format.setTrimText(true);  format.setExpandEmptyElements(true);  StringWriter buffer=new StringWriter();  XMLWriter writer=new XMLWriter(buffer,format);  writer.write(doc);  String xml=buffer.toString();  log(xml);  Document doc2=DocumentHelper.parseText(xml);  String text=doc2.valueOf("/root/meaning");  String expected="to live";  assertEquals("valueOf() returns the correct text padding",expected,text);  assertEquals("getText() returns the correct text padding",expected,doc2.getRootElement().element("meaning").getText());}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  int to=toffset;  int tlim=this.length();  int po=0;  int pc=prefix.length();  if ((toffset < 0) || (toffset > tlim - pc)) {    return false;  }  while (--pc >= 0) {    if (this.charAt(to) != prefix.charAt(po)) {      return false;    }    to++;    po++;  }  return true;}  }
class C{  public static Collection<Feature> all(){  return enums.all();}  }
class C{  @Override public void write(final String filename){  this.writeStartPlans(filename);  this.writePersons();  this.writeEndPlans();  counter.printCounter();  counter.reset();  log.info("Population written to: " + filename);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.internalEntityDecl(name,value);}  }
class C{  protected Map<String,Object> propertiesToMap(Properties p){  Map<String,Object> theMap=new HashMap<>();  for (  Map.Entry<Object,Object> entry : p.entrySet()) {    String key=entry.getKey().toString();    Object val=entry.getValue().toString();    theMap.put(key,val);  }  return theMap;}  }
class C{  private Collection<WebResource> createUrlListFromProcessResultList(Collection<ProcessResult> processResultList,List<DefiniteResult> netResultList){  Collection<WebResource> pagesWithDuplicate=new HashSet<>();  Map<String,Collection<WebResource>> urlListWithRelCanonical=new HashMap<>();  for (  ProcessResult processResult : processResultList) {    String canonicalValue=getCanonicalValue(processResult);    WebResource wr=processResult.getSubject();    if (StringUtils.isNotBlank(canonicalValue)) {      if (urlListWithRelCanonical.containsKey(canonicalValue)) {        urlListWithRelCanonical.get(canonicalValue).add(wr);      } else {        Collection<WebResource> wrs=new ArrayList<>();        wrs.add(wr);        urlListWithRelCanonical.put(canonicalValue,wrs);      }    } else {      pagesWithDuplicate.add(wr);    }  }  if (pagesWithDuplicate.size() == 1) {    String canonicalUrl=pagesWithDuplicate.iterator().next().getURL();    if (urlListWithRelCanonical.size() == 1) {      String canonicalValue=urlListWithRelCanonical.keySet().iterator().next();      if (StringUtils.equalsIgnoreCase(canonicalUrl,canonicalValue)) {        netResultList.addAll(createResultAtPageLevel(urlListWithRelCanonical.get(canonicalValue),TestSolution.PASSED,0,null));        netResultList.add(createResultAtPageLevel(pagesWithDuplicate.iterator().next(),TestSolution.PASSED,0,null));        return Collections.<WebResource>emptyList();      } else {        pagesWithDuplicate.addAll(urlListWithRelCanonical.get(canonicalValue));      }    } else {      for (      String entry : urlListWithRelCanonical.keySet()) {        if (!StringUtils.equalsIgnoreCase(entry,canonicalUrl)) {          pagesWithDuplicate.addAll(urlListWithRelCanonical.get(entry));        } else {          netResultList.addAll(createResultAtPageLevel(urlListWithRelCanonical.get(entry),TestSolution.PASSED,0,null));        }      }    }  } else {    Collection<String> urlsWithDuplicate=getUrlsFromWebResources(pagesWithDuplicate);    for (    String entry : urlListWithRelCanonical.keySet()) {      if (!urlsWithDuplicate.contains(entry)) {        pagesWithDuplicate.addAll(urlListWithRelCanonical.get(entry));      } else {        netResultList.addAll(createResultAtPageLevel(urlListWithRelCanonical.get(entry),TestSolution.PASSED,0,null));      }    }  }  return pagesWithDuplicate;}  }
class C{  public Vector3f zero(){  x=y=z=0;  return this;}  }
class C{  public ScatterRenderer(){  this.seriesShapesFilled=new BooleanList();  this.baseShapesFilled=true;  this.useFillPaint=false;  this.drawOutlines=false;  this.useOutlinePaint=false;  this.useSeriesOffset=true;  this.itemMargin=0.20;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static EGL wrap(EGL egl,int configFlags,Writer log){  if (log != null) {    egl=new EGLLogWrapper(egl,configFlags,log);  }  return egl;}  }
class C{  public static String toString(long[] v,String sep,int offset){  int p=nextSetBit(v,0);  if (p < 0) {    return "";  }  StringBuilder buf=new StringBuilder();  buf.append(p + offset);  for (p=nextSetBit(v,p + 1); p >= 0; p=nextSetBit(v,p + 1)) {    buf.append(sep).append(p + offset);  }  return buf.toString();}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("MBean Name:").append("\n  ").append(name.getCanonicalName()).append("\n  ");  if (!listAttributeDescriptions().isEmpty()) {    buf.append("\nAttributes:");    for (    String attrDesc : listAttributeDescriptions()) {      buf.append("\n  ").append(attrDesc);    }  }  if (!listOperationDescriptions().isEmpty()) {    buf.append("\nOperations:");    for (    String attrDesc : listOperationDescriptions()) {      buf.append("\n  ").append(attrDesc);    }  }  return buf.toString();}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=next();    if (c == '/') {switch (next()) {case '/':        do {          c=next();        } while (c != '\n' && c != '\r' && c != 0);      break;case '*':    for (; ; ) {      c=next();      if (c == 0) {        throw syntaxError("Unclosed comment.");      }      if (c == '*') {        if (next() == '/') {          break;        }        back();      }    }  break;default :back();return '/';}} else if (c == '#') {do {c=next();} while (c != '\n' && c != '\r' && c != 0);} else if (c == 0 || c > ' ') {return c;}}}  }
class C{  public RectangleRegionParser(Element element) throws RegionException {  String minValue=element.getAttributeValue("min");  if (minValue == null) {    throw new MissingRegionAttributeException("min",element);  }  double[] coords=Numbers.parseCoordinates(minValue);  if (coords == null || coords.length != 2) {    throw new InvalidRegionAttributeException("min",element);  }  Vector min=new Vector(coords[0],Double.NEGATIVE_INFINITY,coords[1]);  String maxValue=element.getAttributeValue("max");  if (maxValue == null) {    throw new MissingRegionAttributeException("max",element);  }  coords=Numbers.parseCoordinates(maxValue);  if (coords == null || coords.length != 2) {    throw new InvalidRegionAttributeException("max",element);  }  Vector max=new Vector(coords[0],Double.POSITIVE_INFINITY,coords[1]);  cuboid=Cuboid.between(min,max);}  }
class C{  private void removeUnusedLabels(MethodNode method){  Set<LabelNode> usedLabels=new HashSet<LabelNode>();  for (ListIterator<?> lit=method.instructions.iterator(); lit.hasNext(); ) {    AbstractInsnNode insn=(AbstractInsnNode)lit.next();    if (insn.getType() == JUMP_INSN) {      JumpInsnNode jumpInsn=(JumpInsnNode)insn;      usedLabels.add(jumpInsn.label);    } else     if (insn.getType() == TABLESWITCH_INSN) {      TableSwitchInsnNode tableSwitchInsn=(TableSwitchInsnNode)insn;      for (Iterator<?> it=tableSwitchInsn.labels.iterator(); it.hasNext(); ) {        LabelNode labelNode=(LabelNode)it.next();        if (labelNode != null) {          usedLabels.add(labelNode);        }      }    } else     if (insn.getType() == LOOKUPSWITCH_INSN) {      LookupSwitchInsnNode loopupSwitchInsn=(LookupSwitchInsnNode)insn;      for (Iterator<?> it=loopupSwitchInsn.labels.iterator(); it.hasNext(); ) {        LabelNode labelNode=(LabelNode)it.next();        if (labelNode != null) {          usedLabels.add(labelNode);        }      }    }  }  for (ListIterator<?> lit=method.instructions.iterator(); lit.hasNext(); ) {    AbstractInsnNode insn=(AbstractInsnNode)lit.next();    if (insn.getType() == LABEL) {      if (!usedLabels.contains(insn)) {        lit.remove();      }    }  }}  }
class C{  public static void copy(File from,Charset charset,Appendable to) throws IOException {  asCharSource(from,charset).copyTo(to);}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.FULL_TYPE_REFERENCE;}  }
class C{  public sun.net.ftp.FtpClient changeToParentDirectory() throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("CDUP");  return this;}  }
class C{  void preAddChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.preAddChildEvent(node,child,property);  }  finally {    reenableEvents();  }}  }
class C{  private String collapseSlashes(String path){  int length=path.length();  if (length < 3)   return path;  if (path.indexOf("//",1) == -1)   return path;  char[] result=new char[path.length()];  int count=0;  boolean hasPrevious=false;  char[] characters=path.toCharArray();  for (int index=0; index < characters.length; index++) {    char c=characters[index];    if (c == SEPARATOR) {      if (hasPrevious) {        if (device == null && index == 1) {          result[count]=c;          count++;        }      } else {        hasPrevious=true;        result[count]=c;        count++;      }    } else {      hasPrevious=false;      result[count]=c;      count++;    }  }  return new String(result,0,count);}  }
class C{  public boolean equals(Object that){  if (!this.getClass().equals(that.getClass()))   return false;  Class<?> myclass=this.getClass();  Class<?> hisclass=that.getClass();  while (true) {    Field[] fields=myclass.getDeclaredFields();    Field[] hisfields=hisclass.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      Field g=hisfields[i];      int modifier=f.getModifiers();      if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)       continue;      Class<?> fieldType=f.getType();      String fieldName=f.getName();      if (fieldName.compareTo("stringRepresentation") == 0) {        continue;      }      if (fieldName.compareTo("indentation") == 0) {        continue;      }      try {        if (fieldType.isPrimitive()) {          String fname=fieldType.toString();          if (fname.compareTo("int") == 0) {            if (f.getInt(this) != g.getInt(that))             return false;          } else           if (fname.compareTo("short") == 0) {            if (f.getShort(this) != g.getShort(that))             return false;          } else           if (fname.compareTo("char") == 0) {            if (f.getChar(this) != g.getChar(that))             return false;          } else           if (fname.compareTo("long") == 0) {            if (f.getLong(this) != g.getLong(that))             return false;          } else           if (fname.compareTo("boolean") == 0) {            if (f.getBoolean(this) != g.getBoolean(that))             return false;          } else           if (fname.compareTo("double") == 0) {            if (f.getDouble(this) != g.getDouble(that))             return false;          } else           if (fname.compareTo("float") == 0) {            if (f.getFloat(this) != g.getFloat(that))             return false;          }        } else         if (g.get(that) == f.get(this))         continue; else         if (f.get(this) == null && g.get(that) != null)         return false; else         if (g.get(that) == null && f.get(that) != null)         return false; else         if (!f.get(this).equals(g.get(that)))         return false;      } catch (      IllegalAccessException ex1) {        InternalErrorHandler.handleException(ex1);      }    }    if (myclass.equals(NetObject.class))     break; else {      myclass=myclass.getSuperclass();      hisclass=hisclass.getSuperclass();    }  }  return true;}  }
class C{  public boolean hasPobox(){  return super.hasElement(PoBox.KEY);}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static int sum(int a,int b){  return a + b;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder().append('[');  for (int i=0; i < occupiedBits; i++) {    if (i > 0)     sb.append(", ");    sb.append(bitSet.get(i));  }  return sb.append(']').toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String convert(final String expression){  return infixToPostFix(new CustomTokenizer(expression));}  }
class C{  private void putOrderedSet(byte tag,DerEncoder[] set,Comparator<byte[]> order) throws IOException {  DerOutputStream[] streams=new DerOutputStream[set.length];  for (int i=0; i < set.length; i++) {    streams[i]=new DerOutputStream();    set[i].derEncode(streams[i]);  }  byte[][] bufs=new byte[streams.length][];  for (int i=0; i < streams.length; i++) {    bufs[i]=streams[i].toByteArray();  }  Arrays.<byte[]>sort(bufs,order);  DerOutputStream bytes=new DerOutputStream();  for (int i=0; i < streams.length; i++) {    bytes.write(bufs[i]);  }  write(tag,bytes);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  private void normalise(){  if (iF > 0.0) {    while (iF > iHalfRange) {      iF*=iRangeInv;      iE++;    }    while (iF < iHalfRangeInv) {      iF*=iRange;      iE--;    }  } else   if (iF < 0.0) {    while (iF < -iHalfRange) {      iF*=iRangeInv;      iE++;    }    while (iF > -iHalfRangeInv) {      iF*=iRange;      iE--;    }  } else {    iE=-iInfExp;  }  if (iCheckOF) {    if (Math.abs(iE) > iInfExp) {      System.out.println("BFloat: exponent overflow");    }  }}  }
class C{  void initWrite(){  data=store.createData();  data.writeByte((byte)Page.TYPE_STREAM_DATA);  data.writeShortInt(0);  data.writeInt(trunk);  data.writeInt(logKey);  remaining=store.getPageSize() - data.length();}  }
class C{  public static <K,V extends Comparable<V>>Map<K,V> sortMapDescendingByValue(Map<K,V> unsortMap){  List<Map.Entry<K,V>> list=new LinkedList<>(unsortMap.entrySet());  Collections.sort(list,null);  Map<K,V> sortedMap=new LinkedHashMap<>();  for (  Map.Entry<K,V> entry : list) {    sortedMap.put(entry.getKey(),entry.getValue());  }  return sortedMap;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public void print(){  for (int i=0; i < sentence.size(); ++i) {    sentence.get(i).print();  }  System.out.print("\n");}  }
class C{  public BikeCustomizedOsmNetworkReader_Unequil(final Network network,final CoordinateTransformation transformation,final boolean useHighwayDefaults){  this.network=network;  this.transform=transformation;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults(1,"motorway",2,120.0 / 3.6,1.0,2000,true);    this.setHighwayDefaults(1,"motorway_link",1,80.0 / 3.6,1.0,1500,true);    this.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,1.0,2000);    this.setHighwayDefaults(2,"trunk_link",1,50.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary",1,80.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary_link",1,60.0 / 3.6,1.0,1500);    this.setHighwayDefaults(4,"secondary",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(4,"secondary_link",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(5,"tertiary",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(5,"tertiary_link",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"minor",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"unclassified",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"residential",1,30.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300);    this.setHighwayDefaults(7,"track",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(7,"cycleway",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"service",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"path",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"pedestrian",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"footway",1,10.0 / 3.6,1.0,50);  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private LineSegment flatten(int start,int end){  Coordinate p0=linePts[start];  Coordinate p1=linePts[end];  LineSegment newSeg=new LineSegment(p0,p1);  remove(line,start,end);  outputIndex.add(newSeg);  return newSeg;}  }
class C{  protected List<URI> load(final InputStream in) throws SAXException, IOException {  SAXParser saxParser;  final SAXParserFactory factory=SAXParserFactory.newInstance();  try {    saxParser=factory.newSAXParser();  } catch (  final ParserConfigurationException ex) {    throw new SAXException(ex);  }  groups=new LinkedList<URI>();  saxParser.parse(in,this);  return groups;}  }
class C{  public void normalizeParameters(){  if (Op.matches(type(0),Op.NULL)) {    argument[0]=new FullArgument(Op.FPUREG,8,1);    argument[1]=new FullArgument(Op.FPUREG,8,0);    return;  }  if (Op.matches(type(1),Op.NULL)) {    shiftParam(0,1);    argument[0]=new FullArgument(Op.FPUREG,8,0);    return;  }  if (Op.matches(type(0),Op.FPUQUALI)) {    shiftParam(1,0);    argument[1]=new FullArgument(Op.FPUREG,8,0);  }}  }
class C{  private void verifySnapshotSessionIsForConsistencyGroup(BlockSnapshotSession snapSession,BlockConsistencyGroup consistencyGroup){  URI snapSessionCGURI=snapSession.getConsistencyGroup();  if ((NullColumnValueGetter.isNullURI(snapSessionCGURI)) || (!snapSessionCGURI.equals(consistencyGroup.getId()))) {    throw APIException.badRequests.snapshotSessionIsNotForConsistencyGroup(snapSession.getLabel(),consistencyGroup.getLabel());  }}  }
class C{  @GET @Path("reindex") @Consumes("text/plain") public Response reindexProject(@QueryParam("projectpath") String projectPath) throws JavaModelException {  manager.reindexProject(model.getJavaProject(projectPath));  return Response.ok().build();}  }
class C{  public NamingEvent(EventContext source,int type,Binding newBd,Binding oldBd,Object changeInfo){  super(source);  this.type=type;  oldBinding=oldBd;  newBinding=newBd;  this.changeInfo=changeInfo;}  }
class C{  public static int[] copyOf(int[] original,int newLength){  int[] copy=new int[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public void loadScale(float x,float y){  loadIdentity();  mMat[0]=x;  mMat[3]=y;}  }
class C{  public void clear(){  setForeground(Color.WHITE);  fill();  reset();}  }
class C{  public ParameterBlock(Vector<Object> sources){  setSources(sources);}  }
class C{  protected Geometry transformMultiPolygon(MultiPolygon geom,Geometry parent){  Geometry rawGeom=super.transformMultiPolygon(geom,parent);  return createValidArea(rawGeom);}  }
class C{  private void performHighlightDrag(MotionEvent e){  Highlight h=mChart.getHighlightByTouchPoint(e.getX(),e.getY());  if (h != null && !h.equalTo(mLastHighlighted)) {    mLastHighlighted=h;    mChart.highlightTouch(h);  }}  }
class C{  public static boolean isVMwareVapp(){  boolean isEnabled=false;  try {    if (!PlatformUtils.isVMwareVapp()) {      isEnabled=true;    }  } catch (  IllegalStateException ise) {    Logger.warn("Could not determine platform.");  }  return isEnabled;}  }
class C{  private static boolean writeList(final File listFile,final String out){  BufferedWriter bw=null;  try {    bw=new BufferedWriter(new PrintWriter(new FileWriter(listFile)));    bw.write(out);    bw.close();    return true;  } catch (  final IOException e) {    return false;  } finally {    if (bw != null) {      try {        bw.close();      } catch (      final Exception e) {      }    }  }}  }
class C{  public SortField(String field,Type type){  initFieldType(field,type);}  }
class C{  @Override public boolean hasActiveShield(int location,boolean rear){switch (location) {case Mech.LOC_CT:case Mech.LOC_HEAD:    if (rear) {      return false;    }  if (hasActiveShield(Mech.LOC_LARM) || hasActiveShield(Mech.LOC_RARM)) {    return true;  }return false;case Mech.LOC_LARM:case Mech.LOC_LT:case Mech.LOC_LLEG:return hasActiveShield(Mech.LOC_LARM);default :return hasActiveShield(Mech.LOC_RARM);}}  }
class C{  @Override public Form retrieveImpl(String uuid,RequestContext context,long snapshotTime) throws ResponseException {  return formService.getFormByUuid(uuid);}  }
class C{  private TextIO(){}  }
class C{  private void writeIndexTrailer(IndexOutput indexOut,long dirStart) throws IOException {  indexOut.writeLong(dirStart);}  }
class C{  static void logRGB(byte[] r,byte[] g,byte[] b){  StringBuffer buff=new StringBuffer(100);  int nColors=r.length;  for (int i=0; i < nColors; i++) {    String rgbStr="(" + (r[i] + 128) + ','+ (g[i] + 128)+ ','+ (b[i] + 128)+ "),";    buff.append(rgbStr);  }  System.out.println("RGB:" + nColors + buff);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0].ordinal() >= State.main_region_B.ordinal() && stateVector[0].ordinal() <= State.main_region_B_r1_E__region0_F.ordinal();case main_region_B_r1_C:return stateVector[0] == State.main_region_B_r1_C;case main_region_B_r1_D:return stateVector[0] == State.main_region_B_r1_D;case main_region_B_r1_E:return stateVector[0].ordinal() >= State.main_region_B_r1_E.ordinal() && stateVector[0].ordinal() <= State.main_region_B_r1_E__region0_F.ordinal();case main_region_B_r1_E__region0_F:return stateVector[0] == State.main_region_B_r1_E__region0_F;default :return false;}}  }
class C{  @Override public Sprite createRegion(final int x,final int y,final int width,final int height,final Object ref){  return new TileSprite(this,x,y,width,height,ref);}  }
class C{  private double distanceD2(double[] f,double d1){  return Math.sqrt(Math.pow(normVector(f),2) - Math.pow(d1,2));}  }
class C{  public static File camoDir(){  return new File(imagesDir(),DEFAULT_DIR_NAME_CAMO);}  }
class C{  void foo(){}  }
class C{  @SuppressWarnings({"UnusedParameters"}) public BitmapDrawable(Resources res,java.io.InputStream is){  this(new BitmapState(BitmapFactory.decodeStream(is)),null);  mBitmapState.mTargetDensity=mTargetDensity;  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + is);  }}  }
class C{  public static boolean isValidIPv4(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ".";  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf('.',start)) > start) {    if (octets == 4) {      return false;    }    try {      octet=Integer.parseInt(temp.substring(start,pos));    } catch (    NumberFormatException ex) {      return false;    }    if (octet < 0 || octet > 255) {      return false;    }    start=pos + 1;    octets++;  }  return octets == 4;}  }
class C{  private void showCustomToast(String message,int duration){  LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View view=inflater.inflate(R.layout.toast_view,null);  TextView tv=(TextView)view.findViewById(R.id.message);  tv.setText(message);  Toast t=new Toast(this);  t.setView(view);  t.setDuration(duration);  t.setGravity(Gravity.CENTER,0,0);  t.show();}  }
class C{  private void initWebViewSettings(){  WebSettings webSettings=mWebView.getSettings();  webSettings.setJavaScriptEnabled(true);  webSettings.setSupportZoom(true);  webSettings.setBuiltInZoomControls(true);  webSettings.setUseWideViewPort(true);  webSettings.setLoadWithOverviewMode(true);  webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);  webSettings.setAllowFileAccess(true);  webSettings.setLoadsImagesAutomatically(true);  webSettings.setNeedInitialFocus(true);  mWebView.requestFocusFromTouch();  mWebView.setWebViewClient(mWebViewClient);  mWebView.setWebChromeClient(mWebChromeClient);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  AbstractXYItemLabelGenerator clone=(AbstractXYItemLabelGenerator)super.clone();  if (this.xFormat != null) {    clone.xFormat=(NumberFormat)this.xFormat.clone();  }  if (this.yFormat != null) {    clone.yFormat=(NumberFormat)this.yFormat.clone();  }  if (this.xDateFormat != null) {    clone.xDateFormat=(DateFormat)this.xDateFormat.clone();  }  if (this.yDateFormat != null) {    clone.yDateFormat=(DateFormat)this.yDateFormat.clone();  }  return clone;}  }
class C{  public ParsableByteArray(){}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public final AC growPrio(int p){  return growPrio(p,curIx);}  }
class C{  public static PdxType execute(ExecutablePool pool,int pdxId){  AbstractOp op=new GetPDXTypeByIdOpImpl(pdxId);  return (PdxType)pool.execute(op);}  }
class C{  public PreparedStatementWrapper(Connection con,String sql,String[] columnNames) throws SQLException {  m_sql=sql;  m_ps=con.prepareStatement(m_sql,columnNames);}  }
class C{  public static FXGParser createDefaultParserForMobile(){  return new FXGSAXParser(FXG_PROFILE_MOBILE);}  }
class C{  public WhiteNode(Quadrant quadrant,QuadTreeNode parent){  super(quadrant,parent);}  }
class C{  public void update(int[] data){  if ((data == null) || (data.length == 0)) {    return;  }  updateWithHash(hash(data,DEFAULT_UPDATE_SEED));}  }
class C{  public E remove(int index){  RangeCheck(index);  modCount++;  E oldValue=elementData[index];  int numMoved=size - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--size]=null;  return oldValue;}  }
class C{  public static Timestamp parseTimestampInUTC(String value){  return new Timestamp(DATE_TIME_FORMATTER.parseMillis(value));}  }
class C{  protected String adminShutdown(){  server.shutdown();  return "admin.jsp";}  }
class C{  public Object exec(List arguments){  if (arguments.size() == 0) {    return new SimpleScalar("Empty list provided");  } else   if (arguments.size() > 1) {    return new SimpleScalar("Argument size is: " + arguments.size());  } else {    return new SimpleScalar("Single argument value is: " + arguments.get(0));  }}  }
class C{  protected ExpressionImpl(){  super();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__SEQUENCE:  return SEQUENCE_EDEFAULT == null ? sequence != null : !SEQUENCE_EDEFAULT.equals(sequence);}return super.eIsSet(featureID);}  }
class C{  public static DateBuilder newDateInTimezone(TimeZone tz){  return new DateBuilder(tz);}  }
class C{  @Override public void filter(final IScope scope,final IShape source,final Collection<? extends IShape> results){  final IAgent sourceAgent=source == null ? null : source.getAgent();  results.remove(sourceAgent);  final Iterator<? extends IShape> it=results.iterator();  while (it.hasNext()) {    final IShape s=it.next();    final IAgent a=s.getAgent();    if (a == null || a.dead() || a.getPopulation() != this && (a.getPopulation().getType().getContentType() != this.getType().getContentType() || !this.contains(a))) {      it.remove();    }  }}  }
class C{  public TestCheckGenerator createTestCheckGenerator(VisibilityPredicate visibility,ContractSet contracts,MultiMap<Type,TypedOperation> observerMap,Set<TypedOperation> excludeAsObservers){  ExceptionPredicate isInvalid=new ExceptionBehaviorPredicate(BehaviorType.INVALID);  TestCheckGenerator testGen=new ValidityCheckingVisitor(isInvalid,!GenInputsAbstract.ignore_flaky_tests);  ExceptionPredicate isError=new ExceptionBehaviorPredicate(BehaviorType.ERROR);  ContractCheckingVisitor contractVisitor=new ContractCheckingVisitor(contracts,isError);  testGen=new ExtendGenerator(testGen,contractVisitor);  if (!GenInputsAbstract.no_regression_tests) {    ExceptionPredicate isExpected=new AlwaysFalseExceptionPredicate();    boolean includeAssertions=true;    if (GenInputsAbstract.no_regression_assertions) {      includeAssertions=false;    } else {      isExpected=new ExceptionBehaviorPredicate(BehaviorType.EXPECTED);    }    ExpectedExceptionCheckGen expectation;    expectation=new ExpectedExceptionCheckGen(visibility,isExpected);    RegressionCaptureVisitor regressionVisitor;    regressionVisitor=new RegressionCaptureVisitor(expectation,observerMap,excludeAsObservers,includeAssertions);    testGen=new ExtendGenerator(testGen,regressionVisitor);  }  return testGen;}  }
class C{  public Annotation(final int startOffset,final int endOffset,@NotNull HighlightSeverity severity,final String message,String tooltip){  assert startOffset <= endOffset : startOffset + ":" + endOffset;  assert startOffset >= 0 : "Start offset must not be negative: " + startOffset;  myStartOffset=startOffset;  myEndOffset=endOffset;  myMessage=message;  myTooltip=tooltip;  mySeverity=severity;}  }
class C{  public static TestSuite addAll(String superclass,Vector<String> packages){  return addAll(getClassnames(superclass,packages));}  }
class C{  public GameEntityChangeEvent(final Object source,final Entity entity,final Vector<UnitLocation> movePath){  super(source,entity);  oldEntity=null;  this.movePath=movePath;}  }
class C{  void clear(LocalRegion region,RegionVersionVector rvv){  getDiskStore().clear(region,this,rvv);}  }
class C{  public Partial withMaximumValue(){  return setCopy(getMaximumValue());}  }
class C{  public void refine(RVMType targetClass){  this.target=targetClass.findVirtualMethod(memRef.getName(),memRef.getDescriptor());  setPreciseTarget();}  }
class C{  private static String samplesToString(String[] sampleArray){  String result=null;  if (sampleArray.length > 0) {    result=sampleArray[0];    for (int i=1; i < sampleArray.length; i++) {      result+="; ";      result+=sampleArray[i];    }  }  return result;}  }
class C{  public OMGraphic createGraphic(int renderType,int lineType){  OMGraphic g=null;switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    g=new OMDecoratedSpline(new double[0],OMGraphic.RADIANS,lineType);  break;case (OMGraphic.RENDERTYPE_OFFSET):g=new OMSpline(90f,-180f,new int[0],OMDecoratedSpline.COORDMODE_ORIGIN);break;default :g=new OMDecoratedSpline(new int[0]);}((OMSpline)g).setDoShapes(true);return g;}  }
class C{  public NceConsistRosterMenu(String pMenuName,int pMenuType,Component pWho){  super(pMenuName);  ResourceBundle rb=ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle");  Frame newFrame=new Frame();  AbstractAction printAction=new PrintNceConsistRosterAction(rb.getString("MenuItemPrint"),newFrame,false);  printAction.setEnabled(false);  AbstractAction previewAction=new PrintNceConsistRosterAction(rb.getString("MenuItemPreview"),newFrame,true);  printAction.setEnabled(false);  add(printAction);  add(previewAction);switch (pMenuType) {case MAINMENU:    printAction.setEnabled(true);  previewAction.setEnabled(true);break;case SELECTMENU:printAction.setEnabled(true);previewAction.setEnabled(true);break;case ENTRYMENU:printAction.setEnabled(true);previewAction.setEnabled(true);break;default :log.error("RosterMenu constructed without a valid menuType parameter: " + pMenuType);}}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static String sequenceNameFor(final String voucherType,final String fiscalPeriodName){  return new StringBuilder().append(DEFAULT_SEQUENCE_PREFIX).append(voucherType).append(ApplicationSequenceNumberGenerator.WORD_SEPARATOR_FOR_NAME).append(fiscalPeriodName).toString();}  }
class C{  public boolean hasChanges(){  return getDelegator().hasChanges();}  }
class C{  @Override public boolean addEdge(E e,V v1,V v2,EdgeType edgeType){  if (delegate.getVertices().contains(v1) == false) {    throw new IllegalArgumentException("Tree must already contain " + v1);  }  if (delegate.getVertices().contains(v2)) {    throw new IllegalArgumentException("Tree must not already contain " + v2);  }  return delegate.addEdge(e,v1,v2,edgeType);}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  public MaterialEditText duration(long duration){  ANIMATION_DURATION=duration;  return this;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Px<T> instance(){  return (Px<T>)INSTANCE;}  }
class C{  public static int charToGsm(char c){  try {    return charToGsm(c,false);  } catch (  EncodeException ex) {    return sCharsToGsmTables[0].get(' ',' ');  }}  }
class C{  public void testJoinGroupOrderExplainHint01() throws Exception {  final ASTContainer container=new TestHelper("explainHints-joingrouporder01","explainHints-joingrouporder01.rq","explainHints.trig","explainHints-joingrouporder01.srx").runTest();  assertCarriesExactlyOneExplainHintOfType(container.getOptimizedAST(),JoinOrderExplainHint.class);}  }
class C{  public boolean init(String cfgFileName){  confFile=new File(cfgFileName);  if (confFile.exists()) {    try {      cfg=new Configuration(confFile);      if (!this.conlist.isEmpty())       this.conlist.clear();      Iterator<Entry> it=cfg.entryIterator();      while (it.hasNext()) {        Entry cfgentry=it.next();        if (cfgentry.enabled()) {          String name=cfgentry.key();          String url=cfgentry.getValue();          if (url != null && !url.isEmpty()) {            if (url.startsWith("cfgfile:")) {              String[] parts=url.split(":");              if (parts[1].equalsIgnoreCase("solrconnector")) {                SolrFederateSearchConnector sfc=new SolrFederateSearchConnector();                if (sfc.init(name,confFile.getParent() + "/federatecfg/" + parts[2])) {                  conlist.add(sfc);                }              } else {                ConcurrentLog.config("FederateSearchManager","Init error in configuration of: " + url);              }            } else {              OpenSearchConnector osd;              osd=new OpenSearchConnector();              if (osd.init(name,url)) {                conlist.add(osd);              }            }          }        }      }    } catch (    IOException ex) {      ConcurrentLog.logException(ex);    }  }  return true;}  }
class C{  public int syncContentTextures(){  int size=Math.min(contentTextures.size(),contentBitmaps.size());  for (int i=0; i < size; i++)   contentTextures.get(i).setPixels(contentBitmaps.get(i));  return size;}  }
class C{  private void clearCaches(){  sumCache=null;  varianceCache=null;  minCache=null;  maxCache=null;}  }
class C{  public static MultiClassificationPerformance newInstance(String name){  for (int i=0; i < NAMES.length; i++) {    if (NAMES[i].equals(name)) {      return new MultiClassificationPerformance(i);    }  }  return null;}  }
class C{  protected final Tuple addInternal(Tuple t){  if (m_tuples.add(t)) {    return t;  } else {    return null;  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  protected float blurRadiusAt(int x,int y,int width,int height){  return (float)x / width;}  }
class C{  public SparseCharArray(){  this(10);}  }
class C{  public void addVariable(String key,String value,boolean allowOverride){  String result=null;  if (value.length() < 1) {    result=this.processString(key,value);  } else   if (ValidationUtil.isFunction(value)) {    result=this.processFunction(key,value);  } else {    result=this.processString(key,value);  }  VariableValue variableValue=this.variables.get(key);  if (variableValue == null || variableValue.allowOverride) {    this.variables.put(key,new VariableValue(result,allowOverride));    context.set(key,result);  }}  }
class C{  private IndexMetaData markAsUpgraded(IndexMetaData indexMetaData){  Settings settings=Settings.builder().put(indexMetaData.getSettings()).put(IndexMetaData.SETTING_VERSION_UPGRADED,Version.CURRENT).build();  return IndexMetaData.builder(indexMetaData).settings(settings).build();}  }
class C{  public boolean isBIT_TEST(){switch (value) {case BIT_TEST:case NO_BIT_TEST:    return true;default :  return false;}}  }
class C{  public SampleModel createSubsetSampleModel(int bands[]){  int newBandOffsets[]=new int[bands.length];  for (int i=0; i < bands.length; i++) {    newBandOffsets[i]=bandOffsets[bands[i]];  }  return new PixelInterleavedSampleModel(this.dataType,width,height,this.pixelStride,scanlineStride,newBandOffsets);}  }
class C{  void addItem(PropertyEditor.Item item){  final Node label=item.createLabel();  label.getStyleClass().add("property-label");  GridPane.setValignment(label,VPos.TOP);  final Node editor=item.createEditor();  editor.getStyleClass().add("property-editor");  GridPane.setValignment(editor,VPos.CENTER);  addRow(index.getAndIncrement(),label,editor);  items.add(item);}  }
class C{  private boolean isTriangleErodedCompletely(Coordinate[] triangleCoord,double bufferDistance){  Triangle tri=new Triangle(triangleCoord[0],triangleCoord[1],triangleCoord[2]);  Coordinate inCentre=tri.inCentre();  double distToCentre=CGAlgorithms.distancePointLine(inCentre,tri.p0,tri.p1);  return distToCentre < Math.abs(bufferDistance);}  }
class C{  public static double coerce(double min,double max,double value){  return (value > max) ? max : (value < min) ? min : value;}  }
class C{  private double calcLevelThreshold(double maxCoeff){  return Math.pow(2.0,Math.floor(Math.log(maxCoeff) / Math.log(2.0)) - 1.0);}  }
class C{  public boolean canSendEmailNotification(long ts,String reason,int emailAlertIntervalMinutes){  boolean toSend=false;  if (this.lastEmailAlertTime == -1L)   toSend=true; else   if (!reason.equalsIgnoreCase(this.lastEmailAlertReason))   toSend=true; else   if (ts >= this.lastEmailAlertTime + emailAlertIntervalMinutes * 60000)   toSend=true;  if (toSend) {    this.lastEmailAlertTime=ts;    this.lastEmailAlertReason=reason;  }  return toSend;}  }
class C{  protected ColorType(String description){  if (description == null) {    throw new NullPointerException("ColorType must have a valid description");  }  this.description=description;synchronized (ColorType.class) {    this.index=nextID++;  }}  }
class C{  public boolean isCallerSensitive(){  return testAllFlags(CALLER_SENSITIVE);}  }
class C{  public static boolean hasNativeWebContent(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  if (!supportsWebActions(node)) {    return false;  }  AccessibilityNodeInfoCompat parent=node.getParent();  if (supportsWebActions(parent)) {    if (parent != null) {      parent.recycle();    }    return true;  }  if (parent != null) {    parent.recycle();  }  return node.getChildCount() > 0;}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Can't remove keys from KeyStore");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private String s3KeyPrefixFormat(String string){  return string.toLowerCase().replace('_','-');}  }
class C{  public static MesosCluster loadCluster(String clusterId,MesosClusterFactory factory){  return new MesosCluster(clusterId,factory);}  }
class C{  public final void onRetrievePlaces(final View view){  if (geoLocationHelper.getCurrentLocation() == null) {    Log.i(TAG,"Location service not available.");  }  new ListOfPlacesAsyncRetriever().execute(geoLocationHelper.getCurrentLocation());}  }
class C{  public void append(StringBuffer buffer,String fieldName,double[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public void loadingStateChanged(boolean isLoading){  if (mReloadMenuItem != null) {    mReloadMenuItem.getIcon().setLevel(isLoading ? RELOAD_BUTTON_LEVEL_STOP_LOADING : RELOAD_BUTTON_LEVEL_RELOAD);    mReloadMenuItem.setTitle(isLoading ? R.string.accessibility_btn_stop_loading : R.string.accessibility_btn_refresh);  }}  }
class C{  public static void buildCustomerTable(Connection conn){  try {    Statement stmt=conn.createStatement();    stmt.execute("CREATE TABLE Customer" + "( CustomerNumber CHAR(10) NOT NULL PRIMARY KEY, " + "  Name CHAR(25),"+ "  Address CHAR(25),"+ "  City CHAR(12),"+ "  State CHAR(2),"+ "  Zip CHAR(5) )");    stmt.executeUpdate("INSERT INTO Customer VALUES" + "('101', 'Downtown Cafe', '17 N. Main Street'," + " 'Asheville', 'NC', '55515')");    stmt.executeUpdate("INSERT INTO Customer VALUES" + "('102', 'Main Street Grocery'," + " '110 E. Main Street',"+ " 'Canton', 'NC', '55555')");    stmt.executeUpdate("INSERT INTO Customer VALUES" + "('103', 'The Coffee Place', '101 Center Plaza'," + " 'Waynesville', 'NC', '55516')");  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T cloneDeep(T value){  if (value instanceof List) {    return (T)cloneList((List<?>)value);  }  if (value instanceof Set) {    return (T)cloneSet((Set<?>)value);  }  if (value instanceof Map) {    return (T)cloneMap((Map<?,?>)value);  }  if (value instanceof Cloneable || value.getClass().isArray()) {    return (T)cloneReflective(value);  }  return value;}  }
class C{  @Override public void unload(final Player admin,final List<String> args){  final Class<?>[] signature=new Class<?>[]{Player.class,List.class};  final Object[] params=new Object[]{admin,args};  try {    final Method theMethod=script.getClass().getMethod("unload",signature);    theMethod.invoke(script,params);  } catch (  final Exception e) {    logger.error(e,e);    setMessage(e.getMessage());  }  super.unload(admin,args);}  }
class C{  public EncryptionKey(EncryptionKey key) throws KrbCryptoException {  keyValue=Confounder.bytes(key.keyValue.length);  for (int i=0; i < keyValue.length; i++) {    keyValue[i]^=key.keyValue[i];  }  keyType=key.keyType;  try {    if ((keyType == EncryptedData.ETYPE_DES_CBC_MD5) || (keyType == EncryptedData.ETYPE_DES_CBC_CRC)) {      if (!DESKeySpec.isParityAdjusted(keyValue,0)) {        keyValue=Des.set_parity(keyValue);      }      if (DESKeySpec.isWeak(keyValue,0)) {        keyValue[7]=(byte)(keyValue[7] ^ 0xF0);      }    }    if (keyType == EncryptedData.ETYPE_DES3_CBC_HMAC_SHA1_KD) {      if (!DESedeKeySpec.isParityAdjusted(keyValue,0)) {        keyValue=Des3.parityFix(keyValue);      }      byte[] oneKey=new byte[8];      for (int i=0; i < keyValue.length; i+=8) {        System.arraycopy(keyValue,i,oneKey,0,8);        if (DESKeySpec.isWeak(oneKey,0)) {          keyValue[i + 7]=(byte)(keyValue[i + 7] ^ 0xF0);        }      }    }  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  String speechVar=system.getSettings().userSpeech;  if (updatedVars.contains(speechVar) && state.hasChanceNode(speechVar) && !isPaused) {    Value speechVal=system.getContent(speechVar).toDiscrete().getBest();    if (speechVal instanceof SpeechData) {      (new Thread(new RecognitionProcess((SpeechData)speechVal))).start();    }  }}  }
class C{  private Class<?> serializerToClass(String value){  try {    return Thread.currentThread().getContextClassLoader().loadClass(value);  } catch (  ClassNotFoundException e) {    throw new ConfigurationException("unknown serializable type: " + value);  }}  }
class C{  @SuppressWarnings("unchecked") public BinaryVector copy(){  BinaryVector copy=new BinaryVector(dimension);  copy.bitSet=(FixedBitSet)bitSet.clone();  if (!isSparse)   copy.votingRecord=(ArrayList<FixedBitSet>)votingRecord.clone();  return copy;}  }
class C{  protected XMLSignatureInput enginePerformTransform(XMLSignatureInput input,OutputStream os,Transform transformObject) throws TransformationException {  try {    Element xpathElement=XMLUtils.selectDsNode(transformObject.getElement().getFirstChild(),Constants._TAG_XPATH,0);    if (xpathElement == null) {      Object exArgs[]={"ds:XPath","Transform"};      throw new TransformationException("xml.WrongContent",exArgs);    }    Node xpathnode=xpathElement.getChildNodes().item(0);    String str=XMLUtils.getStrFromNode(xpathnode);    input.setNeedsToBeExpanded(needsCircumvent(str));    if (xpathnode == null) {      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Text must be in ds:Xpath");    }    XPathFactory xpathFactory=XPathFactory.newInstance();    XPathAPI xpathAPIInstance=xpathFactory.newXPathAPI();    input.addNodeFilter(new XPathNodeFilter(xpathElement,xpathnode,str,xpathAPIInstance));    input.setNodeSet(true);    return input;  } catch (  DOMException ex) {    throw new TransformationException("empty",ex);  }}  }
class C{  public static short toShort(NibbleArray nibbles){  return toShort(nibbles.get(0),nibbles.get(1),nibbles.get(2),nibbles.get(3));}  }
class C{  public boolean isNullable(){  return nullable;}  }
class C{  public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (!processUpdates) {    deviceListeners.clearListeners();  }  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;  IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,switchDPID,switchPort,new Date()));  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      deviceListeners.addListener("device",listener);    }  }  return res;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    Loger.debug(String.format("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key)));  }}  }
class C{  private void writeFlowModToSwitch(DatapathId dpid,OFFlowMod flowMod){  IOFSwitch ofSwitch=switchService.getSwitch(dpid);  if (ofSwitch == null) {    if (log.isDebugEnabled()) {      log.debug("Not deleting key {} :: switch {} not connected",dpid.toString());    }    return;  }  writeFlowModToSwitch(ofSwitch,flowMod);}  }
class C{  public static String xmlText(String text){  return xmlText(text,false);}  }
class C{  public int[][] generateDistinctRandomPerturbations(int n,int numberOfPerturbations){  int maxPossibleNumPerturbations=0;  try {    maxPossibleNumPerturbations=MathsUtils.factorialCheckBounds(n);    if (numberOfPerturbations > maxPossibleNumPerturbations) {      numberOfPerturbations=maxPossibleNumPerturbations;      return generateAllDistinctPerturbations(n);    }  } catch (  Exception e) {  }  int[][] sets=new int[numberOfPerturbations][n];  Vector<Integer> availableChoices=new Vector<Integer>();  for (int i=0; i < n; i++) {    availableChoices.add(new Integer(i));  }  Vector<Integer> thisSet=new Vector<Integer>();  Hashtable<Vector<Integer>,Integer> chosenSets=new Hashtable<Vector<Integer>,Integer>();  for (int s=0; s < numberOfPerturbations; s++) {    for (; ; ) {      availableChoices.addAll(thisSet);      thisSet.clear();      for (int q=0; q < n; q++) {        int randIndex=random.nextInt(n - q);        Integer nextSelection=availableChoices.remove(randIndex);        sets[s][q]=nextSelection.intValue();      }      for (int q=0; q < n; q++) {        thisSet.add(new Integer(sets[s][q]));      }      if (chosenSets.get(thisSet) == null) {        chosenSets.put(thisSet,new Integer(0));        break;      }    }  }  return sets;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.110 -0500",hash_original_method="6F02B2C09ACF8BBAEA47573C8A17837E",hash_generated_method="3866773FC1B57104D50AFF562FA0371C") synchronized boolean restoreState(Bundle inState){  boolean success=(inState != null);  if (success) {    success=inState.containsKey("ssl-error-handler");    if (success) {      mSslPrefTable=inState.getBundle("ssl-error-handler");    }  }  return success;}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  public static ColorModel createComponentColorModel(SampleModel sm){  int type=sm.getDataType();  int bands=sm.getNumBands();  ComponentColorModel cm=null;  if (type == DataBuffer.TYPE_BYTE) {switch (bands) {case 1:      cm=colorModelGray8;    break;case 2:  cm=colorModelGrayAlpha8;break;case 3:cm=colorModelRGB8;break;case 4:cm=colorModelRGBA8;break;}} else if (type == DataBuffer.TYPE_USHORT) {switch (bands) {case 1:cm=colorModelGray16;break;case 2:cm=colorModelGrayAlpha16;break;case 3:cm=colorModelRGB16;break;case 4:cm=colorModelRGBA16;break;}} else if (type == DataBuffer.TYPE_INT) {switch (bands) {case 1:cm=colorModelGray32;break;case 2:cm=colorModelGrayAlpha32;break;case 3:cm=colorModelRGB32;break;case 4:cm=colorModelRGBA32;break;}}return cm;}  }
class C{  public void translate(int x,int y){  mGraphics.translate(x,y);}  }
class C{  public void reconstructFromSceneVo(CompositeItemVO vo){  initSceneView(vo);}  }
class C{  public int interpreteNonfatal(final EvolutionState state,LambdaTree theTree){  if (theTree.infinite) {    return -1;  }  int naturalNumber=0;  GPNode iter=theTree.child;  if (iter == null || !NodeCheck.checkForTypeNonfatal(state,iter,"L")) {    return -1;  }  iter=iter.children[0];  if (!NodeCheck.checkForTypeNonfatal(state,iter,"L")) {    return -1;  }  iter=iter.children[0];  if (NodeCheck.checkForIndexNonfatal(state,iter,1)) {    return 0;  }  if (!NodeCheck.checkForTypeNonfatal(state,iter,"P")) {    return -1;  }  int numberOfP=iter.depth() - 1;  for (int i=0; i < numberOfP - 1; i++) {    GPNode lkid=iter.children[0];    if (!NodeCheck.checkForIndexNonfatal(state,lkid,2)) {      return -1;    }    naturalNumber++;    iter=iter.children[1];    if (!NodeCheck.checkForTypeNonfatal(state,iter,"P")) {      return -1;    }  }  GPNode lkid=iter.children[0];  if (!NodeCheck.checkForIndexNonfatal(state,lkid,2)) {    return -1;  }  naturalNumber++;  GPNode rkid=iter.children[1];  if (!NodeCheck.checkForIndexNonfatal(state,rkid,1)) {    return -1;  }  return naturalNumber;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public AnchorUpdateControl(Layout[] layout,String action,boolean overItem){  m_layouts=(Layout[])layout.clone();  m_action=action;  m_anchorOverItem=overItem;}  }
class C{  public int extractIntData(byte[] pachSourceData,int nMaxBytes,MutableInt pnConsumedBytes){switch (pszFormatString.charAt(0)) {case 'A':case 'I':case 'R':case 'S':case 'C':    String dataString=extractStringData(pachSourceData,nMaxBytes,pnConsumedBytes);  if (dataString.length() == 0) {    return 0;  }try {  return Double.valueOf(dataString).intValue();} catch (NumberFormatException nfe) {  if (Debug.debugging("iso8211")) {    Debug.output("DDFSubfieldDefinition.extractIntData: number format problem: " + dataString);  }  return 0;}case 'B':case 'b':byte[] abyData=new byte[4];if (nFormatWidth > nMaxBytes) {Debug.error("DDFSubfieldDefinition: format width is greater than max bytes for int");return 0;}if (pnConsumedBytes != null) {pnConsumedBytes.value=nFormatWidth;}System.arraycopy(pachSourceData,0,abyData,0,nFormatWidth);switch (eBinaryFormat) {case DDFBinaryFormat.UInt:case DDFBinaryFormat.SInt:case DDFBinaryFormat.FloatReal:return (int)pszFormatString.charAt(0) == 'B' ? MoreMath.BuildIntegerBE(abyData) : MoreMath.BuildIntegerLE(abyData);case DDFBinaryFormat.NotBinary:case DDFBinaryFormat.FPReal:case DDFBinaryFormat.FloatComplex:return 0;}break;default :return 0;}return 0;}  }
class C{  private void initScrollbar(){  m_scrollbar.addAdjustmentListener(m_listener);  m_bottomScrollbar.addAdjustmentListener(m_listener);  add(m_scrollbar,BorderLayout.EAST);  add(m_bottomScrollbar,BorderLayout.SOUTH);}  }
class C{  private void dumpAll() throws FileNotFoundException {  Iterator<RPClass> itr=RPClass.iterator();  while (itr.hasNext()) {    RPClass rpclass=itr.next();    dump(rpclass);  }}  }
class C{  public void emitCodeBody(ResolvedJavaMethod installedCodeOwner,CompilationResultBuilder crb,LIR lir){  crb.emit(lir);}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  protected void updateEntryInfoFromTabState(Entry entry,TabState tabState){  entry.currentUrl=tabState.getVirtualUrlFromState();}  }
class C{  public Metadata extract(Metadata metadata){  _metadata=metadata;  if (_data == null)   return _metadata;  XmpDirectory directory=getXmpDirectory();  if (_data.length <= 30)   return _metadata;  if (!isXmpSegment(_data)) {    directory.addError("XMP data segment doesn't begin with " + XMP_IDENTIFIER.substring(0,XMP_IDENTIFIER.length() - 1));    return _metadata;  }  try {    directory.setString(XmpDirectory.TAG_XML_DOC,new String(_data,29,_data.length - 29,"UTF-8"));  } catch (  UnsupportedEncodingException e) {    directory.addError(e.toString());  }  return metadata;}  }
class C{  private void addGroups(List<String> batchList,List<Group> groupsToAdd) throws SQLException {  String addStatement="INSERT INTO " + GROUPS_TABLE + " ("+ "GROUP_NAME, "+ "GROUP_TYPE, "+ "DATA_TYPE, "+ "RULE_INTERNAL_ID, "+ "EVALUATION_ORDER) "+ "VALUES ('%s', %d, %d, %d, %d)";  for (  Group group : groupsToAdd) {    int ruid=getRid(group.getRuleName());    batchList.add(String.format(addStatement,group.getName(),group.getGroupType().getValue(),group.getDataType().getValue(),ruid,group.getEvaluationOrder()));  }}  }
class C{  protected void prependMessage(String s){  if (s == null)   return;  if (message == null)   message=s; else   message=s + " : " + message;}  }
class C{  private static String convertInt(AbstractStringBuilder sb,int i){  boolean negative=false;  String quickResult=null;  if (i < 0) {    negative=true;    i=-i;    if (i < 100) {      if (i < 0) {        quickResult="-2147483648";      } else {        quickResult=SMALL_NEGATIVE_VALUES[i];        if (quickResult == null) {          SMALL_NEGATIVE_VALUES[i]=quickResult=i < 10 ? stringOf('-',ONES[i]) : stringOf('-',TENS[i],ONES[i]);        }      }    }  } else {    if (i < 100) {      quickResult=SMALL_NONNEGATIVE_VALUES[i];      if (quickResult == null) {        SMALL_NONNEGATIVE_VALUES[i]=quickResult=i < 10 ? stringOf(ONES[i]) : stringOf(TENS[i],ONES[i]);      }    }  }  if (quickResult != null) {    if (sb != null) {      sb.append0(quickResult);      return null;    }    return quickResult;  }  int bufLen=11;  char[] buf=(sb != null) ? BUFFER.get() : new char[bufLen];  int cursor=bufLen;  while (i >= (1 << 16)) {    int q=(int)((0x51EB851FL * i) >>> 37);    int r=i - 100 * q;    buf[--cursor]=ONES[r];    buf[--cursor]=TENS[r];    i=q;  }  while (i != 0) {    int q=(0xCCCD * i) >>> 19;    int r=i - 10 * q;    buf[--cursor]=DIGITS[r];    i=q;  }  if (negative) {    buf[--cursor]='-';  }  if (sb != null) {    sb.append0(buf,cursor,bufLen - cursor);    return null;  } else {    return new String(cursor,bufLen - cursor,buf);  }}  }
class C{  public Coord4D(Entity entity){  xCoord=(int)entity.posX;  yCoord=(int)entity.posY;  zCoord=(int)entity.posZ;  dimensionId=entity.worldObj.provider.dimensionId;}  }
class C{  public long markAllocations() throws IllegalStateException {  if (tid != Thread.currentThread().getId())   throw new AssertionError("AllocationMeasure must not be used over more than 1 thread.");  long mark1=((threadAllocatedBytes() - BYTES_USED_TO_MEASURE) - allocated.get());  allocated.set(threadAllocatedBytes());  return mark1;}  }
class C{  public void disposeRasterizerResources(){  releaseTiles(idleTileWorkerCacheList);}  }
class C{  public CTextInputField(final CAbstractCriterium criterium,final AbstractFormatter formatter){  super(formatter);  m_criterium=criterium;  addKeyListener(m_textFieldListener);}  }
class C{  private void shutdown(){  mLock.lock();  try {    if (!mIsShutdown) {      mIsShutdown=true;      mLogger.i("Shutting down the device lifecycle for: " + mDeviceKey);      mOpenDevice=null;      mDeviceState=DeviceState.CLOSED;      mTargetState=TargetState.CLOSED;      closeRequest();      mDeviceLifetime.close();      mShutdownListener.onShutdown(mDeviceKey);    } else {      mLogger.w("Shutdown was called multiple times!");    }  }  finally {    mLock.unlock();  }}  }
class C{  public boolean arrowScrollVertically(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getVerticalMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump,getWidth(),getHeight())) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollYDeltaToGetChildRectOnScreen(mTempRect);    doScrollY(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {      scrollDelta=getScrollY();    } else     if (direction == View.FOCUS_DOWN) {      if (getChildCount() > 0) {        int daBottom=getChildAt(0).getBottom();        int screenBottom=getScrollY() + getHeight() - getPaddingBottom();        if (daBottom - screenBottom < maxJump) {          scrollDelta=daBottom - screenBottom;        }      }    }    if (scrollDelta == 0) {      return false;    }    doScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  private void validateSettings(){  enableZipEncodingCheckBox.setSelected(controller.isZipCompressionEnabled());}  }
class C{  public T casePropertyMethodDeclaration(PropertyMethodDeclaration object){  return null;}  }
class C{  public static void main(String[] args){  runDataGenerator(new SubspaceCluster(),args);}  }
class C{  public static boolean isScaleEnabled(){  return scaleEnabled;}  }
class C{  private Object readPrimitive(InputNode node,Instance value) throws Exception {  Class type=value.getType();  Object result=primitive.read(node,type);  if (type != null) {    value.setInstance(result);  }  return result;}  }
class C{  void ensurePadding(){  final int N=mLayerState.mNum;  if (mPaddingL != null && mPaddingL.length >= N) {    return;  }  mPaddingL=new int[N];  mPaddingT=new int[N];  mPaddingR=new int[N];  mPaddingB=new int[N];}  }
class C{  public CustomUpdate(final Network network,final String script){  this.network=network;  this.scriptString=script;  init();}  }
class C{  public int deleteParent(int nParent,Instances _Instances){  int iParent=0;  while ((m_nParents[iParent] != nParent) && (iParent < m_nNrOfParents)) {    iParent++;  }  int iParent2=-1;  if (iParent < m_nNrOfParents) {    iParent2=iParent;  }  if (iParent < m_nNrOfParents) {    while (iParent < m_nNrOfParents - 1) {      m_nParents[iParent]=m_nParents[iParent + 1];      iParent++;    }    m_nNrOfParents--;    m_nCardinalityOfParents/=_Instances.attribute(nParent).numValues();  }  return iParent2;}  }
class C{  public void testExclude() throws Exception {  IgniteSpringHelper spring=SPRING.create(false);  Collection<IgniteConfiguration> cfgs=spring.loadConfigurations(cfgLocation,"fileSystemConfiguration","typeMetadata").get1();  assertNotNull(cfgs);  assertEquals(1,cfgs.size());  IgniteConfiguration cfg=cfgs.iterator().next();  assertEquals(1,cfg.getCacheConfiguration().length);  assertNull(cfg.getCacheConfiguration()[0].getTypeMetadata());  assertNull(cfg.getFileSystemConfiguration());  cfgs=spring.loadConfigurations(cfgLocation,"keyType").get1();  assertNotNull(cfgs);  assertEquals(1,cfgs.size());  cfg=cfgs.iterator().next();  assertEquals(1,cfg.getCacheConfiguration().length);  Collection<CacheTypeMetadata> typeMetadatas=cfg.getCacheConfiguration()[0].getTypeMetadata();  assertEquals(1,typeMetadatas.size());  assertNull(typeMetadatas.iterator().next().getKeyType());}  }
class C{  public final void finalAppend(String s,boolean unaryNegKludge){  if (unaryNegKludge && s.equals("-")) {    compoundID.append("-.");  } else {    compoundID.append(s);  }  compoundIDUS=UniqueString.uniqueStringOf(compoundID.toString());  fullyQualifiedOp=symbolTable.resolveSymbol(Operators.resolveSynonym(compoundIDUS));  if (fullyQualifiedOp == null && compoundIDUS != S_at) {    errors.addError(treeNode.getLocation(),"Could not find declaration or definition of symbol '" + UniqueString.uniqueStringOf(compoundID.toString()) + "'.");  }}  }
class C{  public static List<URI> ensureOneSnapshotPerReplicationGroup(List<URI> snapshotURIs,DbClient dbClient){  List<URI> filteredSnapshotURIs=new ArrayList<>();  Set<String> replicationGroups=new HashSet<>();  Iterator<BlockSnapshot> snapshotIter=dbClient.queryIterativeObjects(BlockSnapshot.class,snapshotURIs);  while (snapshotIter.hasNext()) {    BlockSnapshot snapshot=snapshotIter.next();    String repGrpInstance=snapshot.getReplicationGroupInstance();    if (replicationGroups.contains(repGrpInstance)) {      continue;    }    replicationGroups.add(repGrpInstance);    filteredSnapshotURIs.add(snapshot.getId());  }  return filteredSnapshotURIs;}  }
class C{  public void detachMirrorDevice(URI vplexURI,URI vplexMirrorURI,URI promotedVolumeURI,boolean discard,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexURI,_dbClient);    VplexMirror vplexMirror=getDataObject(VplexMirror.class,vplexMirrorURI,_dbClient);    Volume sourceVplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);    if (vplexMirror.getDeviceLabel() != null) {      if (null == sourceVplexVolume.getAssociatedVolumes() || sourceVplexVolume.getAssociatedVolumes().isEmpty()) {        _log.error("VPLEX volume {} has no backend volumes.",sourceVplexVolume.forDisplay());        throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(sourceVplexVolume.forDisplay());      }      if (sourceVplexVolume.getAssociatedVolumes().size() > 1) {        client.detachLocalMirrorFromDistributedVirtualVolume(sourceVplexVolume.getDeviceLabel(),vplexMirror.getDeviceLabel(),discard);      } else {        client.detachMirrorFromLocalVirtualVolume(sourceVplexVolume.getDeviceLabel(),vplexMirror.getDeviceLabel(),discard);      }      recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.DETACH_VOLUME_MIRROR.getEvType(true),Operation.Status.ready,OperationTypeEnum.DETACH_VOLUME_MIRROR.getDescription());    } else {      _log.info("It seems vplex mirror {} was never created, so move to the next step for cleanup.",vplexMirror.getLabel());    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception detaching Vplex Mirror {} ",vplexMirrorURI + vae.getMessage(),vae);    if (promotedVolumeURI != null) {      Volume volume=_dbClient.queryObject(Volume.class,promotedVolumeURI);      _dbClient.markForDeletion(volume);    }    recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.DETACH_VOLUME_MIRROR.getEvType(true),Operation.Status.error,OperationTypeEnum.DETACH_VOLUME_MIRROR.getDescription());    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception detaching Vplex Mirror {} ",vplexMirrorURI + ex.getMessage(),ex);    if (promotedVolumeURI != null) {      Volume volume=_dbClient.queryObject(Volume.class,promotedVolumeURI);      _dbClient.markForDeletion(volume);    }    String opName=ResourceOperationTypeEnum.DETACH_VPLEX_LOCAL_MIRROR.getName();    ServiceError serviceError=VPlexApiException.errors.detachMirrorFailed(opName,ex);    recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.DETACH_VOLUME_MIRROR.getEvType(true),Operation.Status.error,OperationTypeEnum.DETACH_VOLUME_MIRROR.getDescription());    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public void addCharset(FontFace face,int fromChar,int count){  int remaining=count;  for (int i=fromChar; remaining > 0 && i < Character.MAX_VALUE; i++) {    char c=(char)i;    GlyphEntry ge=addChar(face,c);    if (ge != null) {      remaining--;    }  }}  }
class C{  public PCAResult processCovarMatrix(double[][] covarMatrix){  EigenvalueDecomposition evd=new EigenvalueDecomposition(covarMatrix);  return processEVD(evd);}  }
class C{  public boolean isInRadius(Vector3 vec){  return isInRadius(vec.x,vec.y,vec.z);}  }
class C{  public static void putRepProc(final String replayKey,final RepProcessor repProc,final MpqParser mpqParser){  final ByteArrayOutputStream bout=new ByteArrayOutputStream(3000);  try (final DataOutputStream out=new DataOutputStream(new DeflaterOutputStream(bout))){    writeByteArray(mpqParser.getUserData().userData,out);    writeByteArray(mpqParser.getFile(RepContent.DETAILS),out);    writeByteArray(mpqParser.getFile(RepContent.INIT_DATA),out);    writeByteArray(mpqParser.getFile(RepContent.ATTRIBUTES_EVENTS),out);    writeByteArray(mpqParser.getFile(RepContent.MESSAGE_EVENTS),out);    for (    final User u : repProc.originalUsers) {      out.writeInt(u.leaveLoop);      out.writeInt(u.lastCmdLoop);      out.writeInt(u.apmActions);      out.writeInt(u.spmActions);      out.writeInt(u.sq);      out.writeInt(u.startDirection);      out.writeDouble(u.supplyCappedPercent);    }  } catch (  final Exception e) {    Env.LOGGER.error("Error writing replay to replay processor cache, replayKey: " + replayKey,e);  }  PM.put(replayKey,bout.toByteArray());}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public XMPPError(int code){  this.code=code;  this.message=null;}  }
class C{  public boolean isGenClass(SootClass clz){  return genClasses.contains(clz.getName());}  }
class C{  public BufferedImage createIcon(String sidc,AVList params){  if (sidc == null) {    String msg=Logging.getMessage("nullValue.SymbolCodeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  SymbolCode symbolCode=new SymbolCode(sidc);  BufferedImage image=null;  boolean mustDrawFill=this.mustDrawFill(symbolCode,params);  boolean mustDrawIcon=this.mustDrawIcon(symbolCode,params);  boolean mustDrawFrame=this.mustDrawFrame(symbolCode,params);  if (mustDrawFrame || mustDrawIcon) {    if (mustDrawFill && mustDrawFrame)     image=this.drawFill(symbolCode,params,null);    if (mustDrawFrame)     image=this.drawFrame(symbolCode,params,image);    if (mustDrawIcon)     image=this.drawIcon(symbolCode,params,image);  }  if (image == null)   image=this.drawCircle(symbolCode,params,image);  return image;}  }
class C{  public static String cnl(){  return cnl;}  }
class C{  public void replaceStopFacilityInRoute(TransitRoute transitRoute,TransitStopFacility toReplace,TransitStopFacility replaceWith){  TransitRouteStop routeStopToReplace=transitRoute.getStop(toReplace);  if (routeStopToReplace != null) {    routeStopToReplace.setStopFacility(replaceWith);    refreshTransitRoute(transitRoute);  } else {    throw new IllegalArgumentException("StopFacility " + toReplace.getId() + " not found in TransitRoute "+ transitRoute.getId());  }}  }
class C{  public AbstractContext(URI inputPath,URI outputPath,Options options){  this.inputPath=inputPath;  this.outputPath=outputPath;  this.options=options;}  }
class C{  public static boolean isNativeBrowserAvailable(){synchronized (nativeTestLock) {    if (testedForNativeBrowser == false) {      final Shell shell=new Shell();      try {        if (WindowSystem.isCurrentWindowSystem(WindowSystem.CARBON)) {          try {            final String headless=System.getProperty("java.awt.headless");            if ("true".equalsIgnoreCase(headless)) {              log.info("Not using AWT browser (java.awt.headless=true), falling back to SWT browser");              nativeBrowserAvailable=true;            } else {              final Composite dummyComposite=new Composite(shell,SWT.EMBEDDED);              final Frame dummyAwtFrame=SWT_AWT.new_Frame(dummyComposite);              if (dummyAwtFrame == null) {                log.info("Could not instantiate AWT browser, falling back to SWT browser");                nativeBrowserAvailable=true;              } else {                log.info("AWT browser is available, preferring it.  Set java.awt.headless=true to use SWT browser.");                nativeBrowserAvailable=false;              }            }          } catch (          final Throwable t) {            log.info("Could not instantiate AWT browser, falling back to SWT browser",t);            nativeBrowserAvailable=true;          }        } else {          try {            final Browser browser=new Browser(shell,SWT.NONE);            browser.dispose();            log.info("SWT Browser found during isNativeBrowserAvailable() check");            nativeBrowserAvailable=true;          } catch (          final Throwable t) {            log.info("SWT Browser not usable during isNativeBrowserAvailable() check",t);            nativeBrowserAvailable=false;          }        }      }  finally {        shell.dispose();        testedForNativeBrowser=true;      }    }    return nativeBrowserAvailable;  }}  }
class C{  public SingletonSortedSetDocValues(SortedDocValues in){  if (in.docID() != -1) {    throw new IllegalStateException("iterator has already been used: docID=" + in.docID());  }  this.in=in;}  }
class C{  public boolean isBoolean(String key){  Object val=get(key);  return val instanceof Boolean;}  }
class C{  public static final Parameter base(){  return new Parameter(P_SELECT);}  }
class C{  protected StringBuffer applyRules(final Calendar calendar,final StringBuffer buf){  return printer.applyRules(calendar,buf);}  }
class C{  public TypeVariable createTypeVariable(){  TypeVariableImpl typeVariable=new TypeVariableImpl();  return typeVariable;}  }
class C{  static boolean isAlphanum(final int c){  return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z')|| c == '_' || c == '$' || c == '\\' || c > 126);}  }
class C{  private void updateBackendVolume(BlockConsistencyGroup cg,Volume backendVolume,DbClient dbClient){  if (backendVolume != null) {    String backendCG=cg.getCgNameOnStorageSystem(backendVolume.getStorageController());    if (backendCG != null && !backendCG.isEmpty()) {      log.info("updating the volume {} replicationgroup {}",backendVolume.getLabel(),backendCG);      backendVolume.setReplicationGroupInstance(backendCG);      dbClient.updateObject(backendVolume);    }  }}  }
class C{  public void process(final Set<RawProtein<PIRSFHmmer2RawMatch>> rawMatches,final String subFamilyMatchesFilePath,final String subFamilyMapFilePath,final Resource subFamilyMapFileResource) throws IOException {  final Map<String,PirsfDatRecord> pirsfDatRecordMap=pirsfDatFileInfoHolder.getData();  final Map<String,String> subfamToSuperFamMap=subfamilyFileParser.parse(subFamilyMapFileResource);  Map<String,PIRSFHmmer2RawMatch> proteinIdBestMatchMap=new HashMap<String,PIRSFHmmer2RawMatch>();  for (  RawProtein<PIRSFHmmer2RawMatch> protein : rawMatches) {    String proteinId=protein.getProteinIdentifier();    PIRSFHmmer2RawMatch bestMatch=doSubfamilyFiltering(protein,pirsfDatRecordMap,subfamToSuperFamMap);    if (bestMatch != null) {      proteinIdBestMatchMap.put(proteinId,bestMatch);    }  }  PirsfFileUtil.writeProteinBestMatchesToFile(subFamilyMatchesFilePath,proteinIdBestMatchMap);}  }
class C{  public void addRemoveTimeNanos(long duration){  rmvTimeNanos.addAndGet(duration);  if (delegate != null)   delegate.addRemoveTimeNanos(duration);}  }
class C{  public void shutdown(){  if (periodicTask != null) {    periodicTask.shutdown();    periodicTask=null;  }  if (timerTaskExecutor != null) {    timerTaskExecutor.shutdown();    timerTaskExecutor=null;  }}  }
class C{  protected void sequence_Arguments_LeftHandSideExpression_IndexedAccessExpression_1_2_1_0_ParameterizedCallExpression_1_2_0_0_ParameterizedPropertyAccessExpression_1_2_2_0_TaggedTemplateString_1_2_3_0_0(ISerializationContext context,ParameterizedCallExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void flushRequestOutputStream() throws IOException {  LOG.trace("enter HttpConnection.flushRequestOutputStream()");  assertOpen();  outputStream.flush();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static int[] lookupClasses(){  Class<?> annotationMemberArrayClazz;  try {    annotationFactoryClazz=Class.forName("org.apache.harmony.lang.annotation.AnnotationFactory");    annotationMemberClazz=Class.forName("org.apache.harmony.lang.annotation.AnnotationMember");    annotationMemberArrayClazz=Class.forName("[Lorg.apache.harmony.lang.annotation.AnnotationMember;");  } catch (  ClassNotFoundException e) {    return null;  }  Field fieldField;  try {    elementsField=annotationFactoryClazz.getDeclaredField("elements");    elementsField.setAccessible(true);    nameField=annotationMemberClazz.getDeclaredField("name");    nameField.setAccessible(true);    valueField=annotationMemberClazz.getDeclaredField("value");    valueField.setAccessible(true);    fieldField=DatabaseFieldSample.class.getDeclaredField("field");  } catch (  SecurityException e) {    return null;  }catch (  NoSuchFieldException e) {    return null;  }  DatabaseField databaseField=fieldField.getAnnotation(DatabaseField.class);  InvocationHandler proxy=Proxy.getInvocationHandler(databaseField);  if (proxy.getClass() != annotationFactoryClazz) {    return null;  }  try {    Object elements=elementsField.get(proxy);    if (elements == null || elements.getClass() != annotationMemberArrayClazz) {      return null;    }    Object[] elementArray=(Object[])elements;    int[] configNums=new int[elementArray.length];    for (int i=0; i < elementArray.length; i++) {      String name=(String)nameField.get(elementArray[i]);      configNums[i]=configFieldNameToNum(name);    }    return configNums;  } catch (  IllegalAccessException e) {    return null;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  protected void errPrintln(String msg){  System.err.println(msg);}  }
class C{  public String toString(){  String result;  lalr_transition tr;  result="lalr_state [" + index() + "]: "+ _items+ "\n";  for (tr=transitions(); tr != null; tr=tr.next()) {    result+=tr;    result+="\n";  }  return result;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  for (int i=0, len=currentSection.activeHandlers.size(); i < len; i++)   ((ContentHandler)(currentSection.activeHandlers.elementAt(i))).characters(ch,start,length);}  }
class C{  boolean configuring(){  return configuring > 0;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public long[] longArrayValue(){  lb.position(0);  long[] l=new long[lb.limit()];  lb.get(l);  return l;}  }
class C{  public static int compareFloats(String float1,String float2){  float1=normalizeFloat(float1);  float2=normalizeFloat(float2);  return compareCanonicalFloats(float1,float2);}  }
class C{  private static void test_getResourceAsStream(Configuration config) throws Exception {  createInstanceAndCallStaticMethod(config,"test.TestMethods","test_getResourceAsStream");}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  for (  CLIQUEInterval interval : intervals) {    result.append(interval).append(' ');  }  return result.toString();}  }
class C{  private static Object unwrap(Object object){  if (object instanceof Reflect) {    return ((Reflect)object).get();  }  return object;}  }
class C{  public SnackbarBuilder iconMarginStartRes(@DimenRes int iconMarginStartResId){  return iconMarginStart(context.getResources().getDimensionPixelSize(iconMarginStartResId));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TENUM__AST_ELEMENT:    if (resolve)     return getAstElement();  return basicGetAstElement();case TypesPackage.TENUM__EXTERNAL:return isExternal();case TypesPackage.TENUM__LITERALS:return getLiterals();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void fine(String msg){  log(Level.FINE,msg);}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  public StringList(Iterable<String> iter){  this(10);  for (  String s : iter) {    append(s);  }}  }
class C{  public EntityMappingModel createEntityMappingModel(){  EntityMappingModelImpl entityMappingModel=new EntityMappingModelImpl();  return entityMappingModel;}  }
class C{  @Inline public final Address pop(){  if (checkDequeue(1)) {    return uncheckedDequeue();  } else {    return Address.zero();  }}  }
class C{  private Ref orOp() throws PageException {  Ref ref=andOp();  while (cfml.isValidIndex() && (cfml.forwardIfCurrent("||") || cfml.forwardIfCurrent("or"))) {    cfml.removeSpace();    ref=new Or(ref,andOp());  }  return ref;}  }
class C{  private List<Variable> applyDegreeHeuristic(List<Variable> vars,Assignment assignment,CSP csp){  List<Variable> result=new ArrayList<Variable>();  int maxDegree=Integer.MIN_VALUE;  for (  Variable var : vars) {    int degree=0;    for (    Constraint constraint : csp.getConstraints(var)) {      Variable neighbor=csp.getNeighbor(var,constraint);      if (!assignment.hasAssignmentFor(neighbor) && csp.getDomain(neighbor).size() > 1)       ++degree;    }    if (degree >= maxDegree) {      if (degree > maxDegree) {        result.clear();        maxDegree=degree;      }      result.add(var);    }  }  return result;}  }
class C{  public static byte[] encode(BufferedImage image,String format) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format);  return imageEncoder.encode(image);}  }
class C{  public SpherePortrayal3D(Color color){  this(color,1f);}  }
class C{  @Override public void close() throws IOException {  OutputStreamToInputStreamPipe.this.finishWriting();}  }
class C{  protected void waitForDownloadToStart(long dlRequest) throws Exception {  Cursor cursor=getCursor(dlRequest);  try {    int columnIndex=cursor.getColumnIndex(DownloadManager.COLUMN_STATUS);    int value=cursor.getInt(columnIndex);    int currentWaitTime=0;    while (value != DownloadManager.STATUS_RUNNING && (value != DownloadManager.STATUS_FAILED) && (value != DownloadManager.STATUS_SUCCESSFUL)) {      Log.i(LOG_TAG,"Waiting for download to start...");      currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for download to start!");      cursor.requery();      assertTrue(cursor.moveToFirst());      columnIndex=cursor.getColumnIndex(DownloadManager.COLUMN_STATUS);      value=cursor.getInt(columnIndex);    }    assertFalse("Download failed immediately after start",value == DownloadManager.STATUS_FAILED);  }  finally {    cursor.close();  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void addRange(final long min,final long max,final int shift){  final BytesRefBuilder minBytes=new BytesRefBuilder(), maxBytes=new BytesRefBuilder();  longToPrefixCoded(min,shift,minBytes);  longToPrefixCoded(max,shift,maxBytes);  addRange(minBytes.get(),maxBytes.get());}  }
class C{  @SuppressWarnings("unchecked") protected Response doDATA(SMTPSession session,String argument){  MailEnvelope env=createEnvelope(session,(MailAddress)session.getAttachment(SMTPSession.SENDER,ProtocolSession.State.Transaction),new ArrayList<MailAddress>((Collection<MailAddress>)session.getAttachment(SMTPSession.RCPT_LIST,ProtocolSession.State.Transaction)));  session.setAttachment(MAILENV,env,ProtocolSession.State.Transaction);  session.pushLineHandler(lineHandler);  return DATA_READY;}  }
class C{  public static boolean isSorted(int[] array){  if (array == null || array.length < 2) {    return true;  }  int previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final int current=array[i];    if (new Integer(previous).compareTo(current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  @Override public void close(){synchronized (this) {    if (mIsClosed) {      return;    }    mIsClosed=true;  }  mSharedReference.deleteReference();}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.FUNCTION_EXPRESSION___IS_ARROW_FUNCTION:    return isArrowFunction();case N4JSPackage.FUNCTION_EXPRESSION___GET_ANNOTATIONS:  return getAnnotations();case N4JSPackage.FUNCTION_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CODE_INJECTION___BEFORE_CODE_1:    getBeforeCode_1().clear();  return;case UmplePackage.CODE_INJECTION___AFTER_CODE_1:getAfterCode_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static void removeCachedFile(File f){  String path=f.getPath();  if (cachedFilesMap.containsKey(path)) {    cachedFilesMap.remove(path);    if (logger.isTraceEnabled())     logger.trace("Remove CachedFile: " + path);  } else {    if (logger.isTraceEnabled())     logger.trace("Remove CachedFile (not found): " + path);  }}  }
class C{  public static Transformer createTransformer(){  TransformerFactory transformerFactory=TransformerFactory.newInstance();  try {    return transformerFactory.newTransformer();  } catch (  TransformerConfigurationException e) {    String message=Logging.getMessage("XML.TransformerConfigurationException");    Logging.logger().finest(message);    throw new WWRuntimeException(e);  }}  }
class C{  public static NSObject parse(InputStream in) throws ParseException, IOException {  byte[] buf=PropertyListParser.readAll(in);  in.close();  return parse(buf);}  }
class C{  public boolean isValidNewState(String newState){  String[] options=getNewStateOptions();  for (int i=0; i < options.length; i++) {    if (options[i].equals(newState))     return true;  }  return false;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private int lookForSuggestion(String prevWord,String currentWord){  for (int i=1; i < currentWord.length(); i++) {    if (i == 1) {      if (sh.isDefaultNextSuggestion(prevWord,currentWord.substring(0,i),currentWord)) {        return i;      }    } else {      if (sh.isDefaultNextCorrection(prevWord,currentWord.substring(0,i),currentWord)) {        return i;      }    }  }  return currentWord.length();}  }
class C{  public boolean equals(Object o1){  try {    AxisAngle4f a2=(AxisAngle4f)o1;    return (this.x == a2.x && this.y == a2.y && this.z == a2.z && this.angle == a2.angle);  } catch (  NullPointerException e2) {    return false;  }catch (  ClassCastException e1) {    return false;  }}  }
class C{  void onUsbMassStorageConnectionChanged(boolean connected){}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressNonDecimalMaxMin(DataType compDataType,DataType actualDataType){switch (compDataType) {case DATA_BYTE:    return new UnCompressNonDecimalMaxMinByte();case DATA_SHORT:  return new UnCompressNonDecimalMaxMinShort();case DATA_INT:return new UnCompressNonDecimalMaxMinInt();case DATA_LONG:return new UnCompressNonDecimalMaxMinLong();case DATA_FLOAT:return new UnCompressNonDecimalMaxMinFloat();default :return new UnCompressNonDecimalMaxMinDefault();}}  }
class C{  public void waitForReady(long how_long) throws IOException {  long since=System.currentTimeMillis();synchronized (state_mutex) {    while (true) {      if (state == State.DEMO) {        return;      } else       if (state == State.ERROR || state == State.DISCONNECTED) {        throw new IOException("Connection Error");      } else       if ((System.currentTimeMillis() - since) >= how_long) {        try {          disconnect();        } catch (        IOException e) {        }        throw new IOException("Timeout connecting to ARDrone");      }      long p=Math.min(how_long - (System.currentTimeMillis() - since),how_long);      if (p > 0) {        try {          state_mutex.wait(p);        } catch (        InterruptedException e) {        }      }    }  }}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  public static boolean safeEquals(Object o1,Object o2){  if (o1 == o2) {    return true;  }  if (o1 == null || o2 == null) {    return false;  }  return o1.equals(o2);}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public char read(){  char chr=_content[_index++];  return CharUtils.isWhiteSpace(chr) ? ' ' : chr;}  }
class C{  public void addFrom(Address address){  _fromList.add(address);}  }
class C{  public PercentileRanksBuilder percentiles(double... values){  this.values=values;  return this;}  }
class C{  public void writeToLogArea(MultivariateDistribution distrib){  String distribStr=distrib.toString().replace("\n","\n<br>");  distribStr=StringUtils.getHtmlRendering(distribStr);  logArea.setText("<html><font size=\"4\" face=\"helvetica\">" + distribStr + "</font></html>");}  }
class C{  public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos){  return nodeBlockMapping(blockInfos,-1);}  }
class C{  public boolean configure(Object nd,JScrollPane tv,JTree tree,TreePath path,int row){  setLastRendereredObject(nd);  setLastRenderedScrollPane(tv);  Component renderer=null;  bg=tree.getBackground();  boolean sel=tree.isSelectionEmpty() ? false : tree.getSelectionModel().isPathSelected(path);  boolean exp=tree.isExpanded(path);  boolean leaf=!exp && tree.getModel().isLeaf(nd);  boolean lead=path.equals(tree.getSelectionModel().getLeadSelectionPath());  renderer=tree.getCellRenderer().getTreeCellRendererComponent(tree,nd,sel,exp,leaf,row,lead);  if (renderer != null) {    setComponent(renderer);  }  return true;}  }
class C{  public void incrementIteration(){  iteration++;}  }
class C{  public void clear(int fromIndex,int toIndex){  if (fromIndex < 0)   throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  if (toIndex < 0)   throw new IndexOutOfBoundsException("toIndex < 0: " + toIndex);  if (fromIndex > toIndex) {    throw new IndexOutOfBoundsException("fromIndex: " + fromIndex + " > toIndex: "+ toIndex);  }  int startUnitIndex=unitIndex(fromIndex);  if (startUnitIndex >= unitsInUse)   return;  int endUnitIndex=unitIndex(toIndex);  if (startUnitIndex == endUnitIndex) {    long bitMask=(1L << (toIndex & BIT_INDEX_MASK)) - (1L << (fromIndex & BIT_INDEX_MASK));    bits[startUnitIndex]&=~bitMask;    if (bits[unitsInUse - 1] == 0)     recalculateUnitsInUse();    return;  }  long bitMask=bitsLeftOf(fromIndex & BIT_INDEX_MASK);  bits[startUnitIndex]&=~bitMask;  if (endUnitIndex - startUnitIndex > 1) {    for (int i=startUnitIndex + 1; i < endUnitIndex; i++) {      if (i < unitsInUse)       bits[i]=0;    }  }  if (endUnitIndex < unitsInUse) {    bitMask=bitsRightOf(toIndex & BIT_INDEX_MASK);    bits[endUnitIndex]&=~bitMask;  }  if (bits[unitsInUse - 1] == 0)   recalculateUnitsInUse();}  }
class C{  static int highestOneBit(int i){  i|=(i >> 1);  i|=(i >> 2);  i|=(i >> 4);  i|=(i >> 8);  i|=(i >> 16);  return (i & ~(i >>> 1));}  }
class C{  public void validate() throws UserDefinedMetricsException {  StringBuilder sb=new StringBuilder();  boolean valid=true;  if (!Metric.isAlphaNumericUnderscoreNotNull(name,20)) {    valid=false;    sb.append("udm name " + name + " is not valid. Please use alphanumeric and underscore with max length of 20. ");  }  if ("SQL".equalsIgnoreCase(source)) {    if (sql == null || sql.isEmpty()) {      sb.append("Please provide customized SQL. ");      valid=false;    } else {      sql=sql.trim();      if (!sql.toLowerCase().startsWith("select") || sql.indexOf(';') >= 0) {        sb.append("The SQL statement must start with select and no semi column is allowed. ");        valid=false;      }    }  }  if ("key".equalsIgnoreCase(this.udmType) && (keyCol == null || keyCol.isEmpty())) {    valid=false;    sb.append("For case of Multiple Rows, Multiple Metrics Per Row, With a Key Column, please provide a valid key column name. ");  }  if ("row".equalsIgnoreCase(this.udmType) && (nameCol == null || nameCol.isEmpty() || valueCol.isEmpty() || valueCol.isEmpty())) {    valid=false;    sb.append("For case of Multiple Rows, One Row One Metric, Key Value Pairs, please provide column names to extract metric names and values.");  }  for (  Metric m : this.metrics) {    if (!Metric.isAlphaNumericUnderscoreNotNull(m.getName(),32)) {      valid=false;      sb.append("udm metric name " + m.getName() + " is not valid. Please use alphanumeric and underscore with max length of 32. ");    }  }  if (!valid) {    throw new UserDefinedMetricsException(sb.toString());  }}  }
class C{  public void stopDiscovery(){  if (mDiscoveryStarted) {    mDiscoveryStarted=false;    mDiscoveryTimer.cancel();    mNsdManager.stopServiceDiscovery(mDiscoveryListener);    if (mNsdListener != null)     mNsdListener.onNsdDiscoveryFinished();  }}  }
class C{  private void closeStartIfNecessary() throws IOException {  if (closeStart) {    writer.write(">");    closeStart=false;  }}  }
class C{  public static boolean isWindows7OS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("windows") && osName.contains("7");}  }
class C{  public boolean isNoTransform(){  return noTransform;}  }
class C{  private void forceSelectedTraceEdit(){  int selectedRowIndex=getSelectedRow();  if (selectedRowIndex > -1) {    assert 0 <= selectedRowIndex && selectedRowIndex < gcTraceSet.size();    table.editCellAt(selectedRowIndex,0);  }}  }
class C{  @Override public boolean isDirty(){  return false;}  }
class C{  public static SyntaxScheme load(Font baseFont,InputStream in) throws IOException {  if (baseFont == null) {    baseFont=RSyntaxTextArea.getDefaultFont();  }  return XmlParser.load(baseFont,in);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForJavaScriptAttributeTag instance=new ForJavaScriptAttributeTag();  String value="<div>\"\'";  String expected="<div>\\x22\\x27";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  void recievedConcurrent(MessageBase msg){  InetAddress ip=msg.getOrigin().getAddress();  Key id=msg.getID();  Optional<RPCCall> associatedCall=Optional.ofNullable(msg.getAssociatedCall());  Optional<Key> expectedId=associatedCall.map(null);  Optional<Pair<KBucket,KBucketEntry>> entryByIp=bucketForIP(ip);  if (entryByIp.isPresent()) {    KBucket oldBucket=entryByIp.get().a;    KBucketEntry oldEntry=entryByIp.get().b;    if (oldEntry.getAddress().getPort() != msg.getOrigin().getPort())     return;    if (!oldEntry.getID().equals(id)) {      if (associatedCall.isPresent()) {        DHT.logInfo("force-removing routing table entry " + oldEntry + " because ID-change was detected; new ID:"+ msg.getID());        oldBucket.removeEntryIfBad(oldEntry,true);        RPCServer srv=msg.getServer();        tryPingMaintenance(oldBucket,"checking sibling bucket entries after ID change was detected",srv,null);        if (oldEntry.verifiedReachable()) {          return;        }      } else {        return;      }    }  }  KBucket bucketById=routingTableCOW.entryForId(id).bucket;  Optional<KBucketEntry> entryById=bucketById.findByIPorID(null,id);  if (entryById.isPresent() && !entryById.get().getAddress().getAddress().equals(ip))   return;  if (!entryById.isPresent() && expectedId.isPresent() && !expectedId.get().equals(id))   return;  KBucketEntry newEntry=new KBucketEntry(msg.getOrigin(),id);  msg.getVersion().ifPresent(null);  if (!associatedCall.isPresent() && updateAndCheckThrottle(newEntry.getAddress().getAddress())) {    refreshOnly(newEntry);    return;  }  associatedCall.ifPresent(null);  boolean trustedAndNotPresent=!entryById.isPresent() && msg.getType() == Type.RSP_MSG && trustedNodes.stream().anyMatch(null);  Set<InsertOptions> opts=EnumSet.noneOf(InsertOptions.class);  if (trustedAndNotPresent)   opts.addAll(EnumSet.of(FORCE_INTO_MAIN_BUCKET,REMOVE_IF_FULL));  if (msg.getType() == Type.RSP_MSG)   opts.add(RELAXED_SPLIT);  insertEntry(newEntry,opts);  if (msg.getType() == Type.RSP_MSG) {    bucketById.notifyOfResponse(msg);  }  num_receives++;}  }
class C{  public FilterFileChooserDescriptor(final String title,final String description,final FileFilter filter){  super(true,false,true,true,false,false);  setTitle(title);  setDescription(description);  _fileFilter=filter;}  }
class C{  private void initializeScheme(String p_uriSpec) throws MalformedURIException {  int uriSpecLen=p_uriSpec.length();  int index=0;  String scheme=null;  char testChar='\0';  while (index < uriSpecLen) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {      break;    }    index++;  }  scheme=p_uriSpec.substring(0,index);  if (scheme.length() == 0) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_INURI,null));  } else {    setScheme(scheme);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SessionChannel createSessionChannel(String endpointUrl) throws ServiceResultException {  return createSessionChannel(endpointUrl,endpointUrl);}  }
class C{  @NonNull public static Animator fadeIn(float duration){  return alpha(1,duration);}  }
class C{  public void update(T object){  currentSession().update(object);}  }
class C{  public CharClasses(int maxCharCode){  if (maxCharCode < 0 || maxCharCode > 0xFFFF)   throw new IllegalArgumentException();  maxCharUsed=(char)maxCharCode;  classes=new Vector();  classes.addElement(new IntCharSet(new Interval((char)0,maxChar)));}  }
class C{  public void testCleanupOffheapAfterCacheDestroyOffheapTiered() throws Exception {  memoryMode=OFFHEAP_TIERED;  evictionPlc=null;  checkCleanupOffheapAfterCacheDestroy();}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  public static long readLongWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_LONG)   state.output.fatal("Line " + d.lineNumber + " has no long after preamble '"+ preamble+ "'\n-->"+ d.data);  return (long)(d.l);}  }
class C{  public String maxNumCandidateCanopiesToHoldInMemory(){  return "The maximum number of candidate canopies to retain in main memory during training. " + "T2 distance and data characteristics determine how many candidate " + "canopies are formed before periodic and final pruning are performed. There "+ "may not be enough memory available if T2 is set too low.";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int extraGroupArgs=curNumberOfParameters - 2;  final java.util.ArrayList extraArgs=new java.util.ArrayList();  while (extraGroupArgs-- > 0)   extraArgs.add(stack.pop());  String groupMethName=getString(stack);  Object dataObj=stack.pop();  Object[] linearData;  if (dataObj instanceof java.util.Collection)   linearData=((java.util.Collection)dataObj).toArray(); else   if (dataObj instanceof java.util.Map)   linearData=((java.util.Map)dataObj).keySet().toArray(); else   linearData=(Object[])dataObj;  java.util.Map groupedMap=new java.util.LinkedHashMap();  if (linearData != null && linearData.length > 0) {    if ("GetShowYear".equals(groupMethName)) {      for (int i=0; i < linearData.length; i++) {        Show s=getShowObj(linearData[i]);        Object currKey=(s == null) ? null : s.getYear();        java.util.Vector currVec=(java.util.Vector)groupedMap.get(currKey);        if (currVec == null)         groupedMap.put(currKey,currVec=new java.util.Vector());        currVec.add(linearData[i]);      }    } else     if ("GetShowTitle".equals(groupMethName) || "GetAiringTitle".equals(groupMethName)) {      for (int i=0; i < linearData.length; i++) {        Show s=getShowObj(linearData[i]);        Object currKey=(s == null) ? null : s.getTitle();        java.util.Vector currVec=(java.util.Vector)groupedMap.get(currKey);        if (currVec == null)         groupedMap.put(currKey,currVec=new java.util.Vector());        currVec.add(linearData[i]);      }    } else     if ("GetShow".equals(groupMethName)) {      for (int i=0; i < linearData.length; i++) {        Show s=getShowObj(linearData[i]);        java.util.Vector currVec=(java.util.Vector)groupedMap.get(s);        if (currVec == null)         groupedMap.put(s,currVec=new java.util.Vector());        currVec.add(linearData[i]);      }    } else     if ("GetShowCategory".equals(groupMethName)) {      for (int i=0; i < linearData.length; i++) {        Show s=getShowObj(linearData[i]);        Object currKey=(s == null) ? null : s.getCategory();        java.util.Vector currVec=(java.util.Vector)groupedMap.get(currKey);        if (currVec == null)         groupedMap.put(currKey,currVec=new java.util.Vector());        currVec.add(linearData[i]);      }    } else     if ("Categories".equals(groupMethName)) {      java.util.Map breakdownMap=new java.util.HashMap();      String[] noBreaks=new String[]{""};      for (int i=0; i < linearData.length; i++) {        Show s=getShowObj(linearData[i]);        String currKey=(s == null) ? null : s.getCategory();        String[] currBreaks;        if (currKey == null || currKey.length() == 0)         currBreaks=noBreaks; else {          currBreaks=(String[])breakdownMap.get(currKey);          if (currBreaks == null) {            java.util.StringTokenizer toker=new java.util.StringTokenizer(currKey,";,");            currBreaks=new String[toker.countTokens()];            int x=0;            while (toker.hasMoreTokens())             currBreaks[x++]=toker.nextToken().trim();            breakdownMap.put(currKey,currBreaks);          }        }        java.util.Vector currVec;        for (int j=0; j < currBreaks.length; j++) {          currVec=(java.util.Vector)groupedMap.get(currBreaks[j]);          if (currVec == null)           groupedMap.put(currBreaks[j],currVec=new java.util.Vector());          currVec.add(linearData[i]);        }        if (s != null) {          String newKey=s.getSubCategory();          if (newKey != null && newKey.length() > 0 && !newKey.equals(currKey)) {            currBreaks=(String[])breakdownMap.get(newKey);            if (currBreaks == null) {              java.util.StringTokenizer toker=new java.util.StringTokenizer(newKey,";,");              currBreaks=new String[toker.countTokens()];              int x=0;              while (toker.hasMoreTokens())               currBreaks[x++]=toker.nextToken().trim();              breakdownMap.put(newKey,currBreaks);            }            for (int j=0; j < currBreaks.length; j++) {              currVec=(java.util.Vector)groupedMap.get(currBreaks[j]);              if (currVec == null)               groupedMap.put(currBreaks[j],currVec=new java.util.Vector());              currVec.add(linearData[i]);            }          }          if (s.getNumCategories() > 2) {            java.util.HashSet usedCats=Pooler.getPooledHashSet();            usedCats.add(currKey);            usedCats.add(newKey);            String[] altTestCats=s.getCategories();            for (int k=2; k < altTestCats.length; k++) {              if (usedCats.add(altTestCats[k])) {                currBreaks=(String[])breakdownMap.get(altTestCats[k]);                if (currBreaks == null) {                  java.util.StringTokenizer toker=new java.util.StringTokenizer(altTestCats[k],";,");                  currBreaks=new String[toker.countTokens()];                  int x=0;                  while (toker.hasMoreTokens())                   currBreaks[x++]=toker.nextToken().trim();                  breakdownMap.put(altTestCats[k],currBreaks);                }                for (int j=0; j < currBreaks.length; j++) {                  currVec=(java.util.Vector)groupedMap.get(currBreaks[j]);                  if (currVec == null)                   groupedMap.put(currBreaks[j],currVec=new java.util.Vector());                  currVec.add(linearData[i]);                }              }            }          }        }      }    } else     if ("GetAlbumForFile".equals(groupMethName)) {      Wizard wiz=Wizard.getInstance();      for (int i=0; i < linearData.length; i++) {        MediaFile mf=getMediaFileObj(linearData[i]);        Object currKey=(mf == null || !mf.isMusic()) ? null : wiz.getCachedAlbumForMediaFile(mf);        java.util.Vector currVec=(java.util.Vector)groupedMap.get(currKey);        if (currVec == null)         groupedMap.put(currKey,currVec=new java.util.Vector());        currVec.add(linearData[i]);      }    } else {      sage.jep.function.PostfixMathCommandI groupMeth=(sage.jep.function.PostfixMathCommandI)Catbert.getAPI().get(groupMethName);      for (int i=0; i < linearData.length; i++) {        stack.push(linearData[i]);        for (int k=extraArgs.size() - 1; k >= 0; k--)         stack.push(extraArgs.get(k));        groupMeth.setCurNumberOfParameters(1 + extraArgs.size());        groupMeth.run(stack);        Object currKey=stack.pop();        java.util.Vector currVec=(java.util.Vector)groupedMap.get(currKey);        if (currVec == null)         groupedMap.put(currKey,currVec=new java.util.Vector());        currVec.add(linearData[i]);      }    }  }  return (groupedMap);}  }
class C{  public static void execute(Connection con,boolean keepAlive) throws Exception {  AbstractOp op=new CloseConnectionOpImpl(keepAlive);  try {    con.execute(op);  } catch (  EOFException e) {  }}  }
class C{  private void clearList(){  model.clear();}  }
class C{  private Item createTrophyHelmet(final Player player){  final Item helmet=SingletonRepository.getEntityManager().getItem("trophy helmet");  helmet.setBoundTo(player.getName());  helmet.put("def",1);  helmet.setInfoString(player.getName());  helmet.setPersistent(true);  helmet.setDescription("This is " + player.getName() + "'s grand prize for Deathmatch winners. Wear it with pride.");  player.equipOrPutOnGround(helmet);  return helmet;}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(3);  newVector.addElement("measureAttributesUsed");  newVector.addElement("measureNumIterations");  return newVector.elements();}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  private static int doTextSearch(final Object element,final String lineText,final int lineCounter,final String localSearchString,final int startPosition,final boolean caseSensitive,final List<SearchResult> results){  final int index=lineText.indexOf(caseSensitive ? localSearchString : localSearchString.toLowerCase(),startPosition);  if (index == -1) {    return -1;  } else {    results.add(new SearchResult(element,lineCounter,index,localSearchString.length()));    return index + localSearchString.length();  }}  }
class C{  void revisitNode(final Node n,final DijkstraNodeData data,final RouterPriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  pendingNodes.remove(n);  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  public static boolean isOSX(){  return System.getProperty("mrj.version") != null;}  }
class C{  public String mime(){  final String tmpstr=get(CONTENT_TYPE,"application/octet-stream");  final int pos=tmpstr.indexOf(';');  if (pos > 0) {    return tmpstr.substring(0,pos).trim();  } else {    return tmpstr;  }}  }
class C{  public void registerInput(String varName,JavaRDD<String> rdd,String format,long rlen,long clen) throws DMLRuntimeException {  registerInput(varName,rdd.mapToPair(new ConvertStringToLongTextPair()),format,rlen,clen,-1,null);}  }
class C{  public RequestCreator rotate(float degrees,float pivotX,float pivotY){  data.rotate(degrees,pivotX,pivotY);  return this;}  }
class C{  public void addSource(TilePipe tilePipe,TileEntity tile,ForgeDirection dir){  networks.get(tilePipe.getNetworkID()).addSource(tile,dir.getOpposite());}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public static File searchFile(String name) throws FileNotFoundException {  File file=searchFile(new File(applicationRoot),name);  if (isNull(file))   Error.fileNotFound(name);  return file;}  }
class C{  public Boolean isValue(){  return value;}  }
class C{  @CanIgnoreReturnValue public Stopwatch stop(){  long tick=ticker.read();  checkState(isRunning,"This stopwatch is already stopped.");  isRunning=false;  elapsedNanos+=tick - startTick;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RecoverPointCGResponse createCG(CGRequestParams request,boolean metropoint,boolean attachAsClean) throws RecoverPointException {  if (null == _endpoint.toASCIIString()) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  RecoverPointCGResponse response=new RecoverPointCGResponse();  ConsistencyGroupUID cgUID=null;  try {    int cgSuffix=0;    String cgName=request.getCgName();    while (doesCgExist(request.getCgName())) {      request.setCgName(String.format("%s-%d",cgName,++cgSuffix));    }    Map<String,ClusterUID> clusterIdCache=new HashMap<String,ClusterUID>();    List<ClusterUID> prodSites=getProdSites(request,clusterIdCache);    StringBuffer sb=new StringBuffer();    for (    ClusterUID prodSite : prodSites) {      sb.append(prodSite.getId());      sb.append(" ");    }    logger.info("RecoverPointClient: Creating recoverPoint consistency group " + request.getCgName() + " for endpoint: "+ _endpoint.toASCIIString()+ " and production sites: "+ sb.toString());    Map<Long,ConsistencyGroupCopyUID> productionCopiesUID=new HashMap<Long,ConsistencyGroupCopyUID>();    Map<Long,ConsistencyGroupCopyUID> nonProductionCopiesUID=new HashMap<Long,ConsistencyGroupCopyUID>();    FullConsistencyGroupPolicy fullConsistencyGroupPolicy=configureCGPolicy(request,prodSites,clusterIdCache,productionCopiesUID,nonProductionCopiesUID);    logger.info("Adding cg, copies and links for CG: " + request.getCgName());    functionalAPI.validateAddConsistencyGroupAndCopies(fullConsistencyGroupPolicy);    cgUID=functionalAPI.addConsistencyGroupAndCopies(fullConsistencyGroupPolicy);    response.setCgId(cgUID.getId());    ConsistencyGroupSettingsChangesParam cgSettingsParam=configureCGSettingsChangeParams(request,cgUID,prodSites,clusterIdCache,productionCopiesUID,nonProductionCopiesUID,attachAsClean);    logger.info("Adding journals and rsets for CG " + request.getCgName());    functionalAPI.setConsistencyGroupSettings(cgSettingsParam);    RecoverPointImageManagementUtils rpiMgmt=new RecoverPointImageManagementUtils();    logger.info("Waiting for links to become active for CG " + request.getCgName());    rpiMgmt.waitForCGLinkState(functionalAPI,cgUID,RecoverPointImageManagementUtils.getPipeActiveState(functionalAPI,cgUID));    logger.info(String.format("Consistency group %s has been created.",request.getCgName()));    response.setReturnCode(RecoverPointReturnCode.SUCCESS);    return response;  } catch (  Exception e) {    if (cgUID != null) {      try {        RecoverPointUtils.cleanupCG(functionalAPI,cgUID);      } catch (      Exception e1) {        logger.error("Error removing CG " + request.getCgName() + " after create CG failure");        logger.error(e1.getMessage(),e1);      }    }    throw RecoverPointException.exceptions.failedToCreateConsistencyGroup(request.getCgName(),getCause(e));  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static GraphRequest newPostOpenGraphActionRequest(AccessToken accessToken,JSONObject openGraphAction,Callback callback){  if (openGraphAction == null) {    throw new FacebookException("openGraphAction cannot be null");  }  String type=openGraphAction.optString("type");  if (Utility.isNullOrEmpty(type)) {    throw new FacebookException("openGraphAction must have non-null 'type' property");  }  String path=String.format(MY_ACTION_FORMAT,type);  return GraphRequest.newPostRequest(accessToken,path,openGraphAction,callback);}  }
class C{  @Override public boolean test(Object receiver,String property,Object[] args,Object expectedValue){  if (IS_TYPESCRIPT_PROJECT_PROPERTY.equals(property)) {    return testIsTypeScriptProject(receiver);  } else   if (HAS_TYPESCRIPT_BUILDER_PROPERTY.equals(property)) {    return testHasTypeScriptBuilder(receiver);  } else   if (CAN_ADD_TO_BUILDPATH_PROPERTY.equals(property)) {    return testCanAddToBuildPath(receiver);  } else   if (CAN_REMOVE_TO_BUILDPATH_PROPERTY.equals(property)) {    return testCanRemoveToBuildPath(receiver);  } else   if (CAN_RUN_COMPILE_PROPERTY.equals(property)) {    return testCanRunCompile(receiver);  }  return false;}  }
class C{  public boolean isFillViewportY(){  return mFillViewportY;}  }
class C{  public void refresh(){  super.refresh();  updateCheckpoints();}  }
class C{  public void addContentTable(String title,Image image,int cols,String[] headers,List<String[]> rows){  createRowHeading(title,image);  if (null != title) {    copyStringBuilder.append(title);  }  Table table=toolkit.createTable(contentComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.VIRTUAL);  table.setHeaderVisible(true);  TableWrapData tableWrapData=new TableWrapData(TableWrapData.FILL);  tableWrapData.colspan=this.columns;  tableWrapData.maxWidth=CONTENT_CONTROL_MAX_WIDTH;  tableWrapData.maxHeight=CONTENT_TABLE_MAX_HEIGHT;  table.setLayoutData(tableWrapData);  for (int i=0; i < cols; i++) {    TableColumn tableColumn=new TableColumn(table,SWT.LEFT);    tableColumn.setResizable(true);    if (i < headers.length) {      tableColumn.setText(headers[i]);    }  }  for (  String[] row : rows) {    new TableItem(table,SWT.NONE).setText(row);    copyStringBuilder.append('\t');    for (int i=0; i < row.length; i++) {      copyStringBuilder.append(row[i]);      if (i < (row.length - 1)) {        copyStringBuilder.append('\t');      }    }    copyStringBuilder.append('\n');  }  for (  TableColumn column : table.getColumns()) {    column.pack();  }}  }
class C{  default FutureOperations<T> futureOperations(final Executor exec){  return traversable().futureOperations(exec);}  }
class C{  public static XmlOrderedResult ordered(){  return new XmlOrderedResult(true,"");}  }
class C{  private void insertElementAt(int value,int at){  if (at == m_firstFree)   addElement(value); else   if (at > m_firstFree) {    int index=at >>> m_SHIFT;    if (index >= m_map.length) {      int newsize=index + m_numblocks;      int[][] newMap=new int[newsize][];      System.arraycopy(m_map,0,newMap,0,m_map.length);      m_map=newMap;    }    int[] block=m_map[index];    if (null == block)     block=m_map[index]=new int[m_blocksize];    int offset=at & m_MASK;    block[offset]=value;    m_firstFree=offset + 1;  } else {    int index=at >>> m_SHIFT;    int maxindex=m_firstFree >>> m_SHIFT;    ++m_firstFree;    int offset=at & m_MASK;    int push;    while (index <= maxindex) {      int copylen=m_blocksize - offset - 1;      int[] block=m_map[index];      if (null == block) {        push=0;        block=m_map[index]=new int[m_blocksize];      } else {        push=block[m_blocksize - 1];        System.arraycopy(block,offset,block,offset + 1,copylen);      }      block[offset]=value;      value=push;      offset=0;      ++index;    }  }}  }
class C{  public MutualInfoFS(int featureCount,NumericalHandeling numericHandling){  super();  setFeatureCount(featureCount);  setHandling(numericHandling);}  }
class C{  public LinearGradientPaint(Point2D start,Point2D end,float[] fractions,Color[] colors){  this(start,end,fractions,colors,NO_CYCLE,SRGB);}  }
class C{  public Vertex createArticle(String text,Vertex meaning,Network network){  Vertex word=createWord(text,meaning,network,Primitive.ARTICLE);  return word;}  }
class C{  public InputStream openStream() throws IOException {  if (((Closeable)stream).isClosed()) {    throw new ItemSkippedException();  }  return stream;}  }
class C{  public void testAddSharedClasspathWorksWithNoPreviousPath() throws Exception {  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  container.setFileHandler(fileHandler);  container.addSharedClasspath(TEST_FILE);  assertEquals(1,container.getSharedClasspath().length);  assertEquals(TEST_FILE,container.getSharedClasspath()[0]);}  }
class C{  public void verEnCuadroExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=getServiceRepository(request);  GestionCuadroClasificacionBI cuadroBI=services.lookupGestionCuadroClasificacionBI();  String id=request.getParameter(Constants.ID);  if (!puedeAccederUsuarioAElemento(request,id)) {    goLastClientExecuteLogic(mappings,form,request,response);    return;  }  ElementoCuadroClasificacionVO elementoCF=cuadroBI.getElementoCuadroClasificacion(id);  if (elementoCF != null) {    setInTemporalSession(request,FondosConstants.LISTA_CACHEADA_KEY,"1");    List elements=null;    Object lista=getFromTemporalSession(request,FondosConstants.LISTA_ELEMENTOS_CF);    if (lista instanceof PaginatedList) {      PaginatedList paginatedList=(PaginatedList)lista;      if (paginatedList != null) {        elements=paginatedList.getList();      }    } else {      elements=(List)lista;    }    Map mapVisitedElements=(Map)getFromTemporalSession(request,FondosConstants.MAP_ELEMENTOS_CF_VISITADOS);    if ((elements != null) && (!elements.isEmpty())) {      ListIterator it=elements.listIterator();      while (it.hasNext()) {        ElementoCFPO element=(ElementoCFPO)it.next();        if (element.getId().equals(id)) {          element.setRowStyle(IVisitedRowVO.CSS_FILA_CARGADA);          if (mapVisitedElements != null)           mapVisitedElements.put(id,id);          break;        }      }    }    if (!DisplayTagUtils.isPaginating(request) && !DisplayTagUtils.isSorting(request)) {      ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.VER_EN_CUADRO,request);      invocation.setVisibleInNavigationToolBar(false);    }    ActionRedirect ret=new ActionRedirect(mappings.findForward("verEnCuadro"));    ret.addParameter("itemID",id);    setReturnActionFordward(request,ret);  } else {    obtenerErrores(request,true).add(ActionErrors.GLOBAL_ERROR,new ActionError(Constants.ERRORS_FONDOS_ELEMENTO_NO_EXISTE));    goBackExecuteLogic(mappings,form,request,response);  }}  }
class C{  @Override public void caretUpdate(CaretEvent event){  setButtons();}  }
class C{  public Float remove(Float key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public void receiveResultqueryAssociatedCapabilityForFileSystem(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForFileSystemResponse result){}  }
class C{  private boolean validateSelectStatements(String qry,AST ast,List<AST> selectStatements){  for (  AST selectStatement : selectStatements) {    if (!checkRangeStatements(selectStatement)) {      if (LOG.isDebugEnabled()) {        ASTPrinter printer=new ASTPrinter(HqlTokenTypes.class);        String tree=printer.showAsString(ast,"verinice HQL Query String Representation");        LOG.debug("Checking if following hql is allowed:\n" + tree + "\n\n"+ qry);      }      return false;    }  }  return true;}  }
class C{  void decryptBlock(byte[] cipher,int cipherOffset,byte[] plain,int plainOffset){  expandedKey=key3;  decrypting=true;  cipherBlock(cipher,cipherOffset,buf1,0);  expandedKey=key2;  decrypting=false;  cipherBlock(buf1,0,buf2,0);  expandedKey=key1;  decrypting=true;  cipherBlock(buf2,0,plain,plainOffset);}  }
class C{  public JcaX509ExtensionUtils() throws NoSuchAlgorithmException {  super(new SHA1DigestCalculator(MessageDigest.getInstance("SHA1")));}  }
class C{  public void waitForInvocation(long msecWait,int numberOfNewEvents){  long startTime=System.currentTimeMillis();  while (true) {synchronized (this) {      if ((System.currentTimeMillis() - startTime) > msecWait) {        throw new RuntimeException("No events or less then the number of expected events received, expected " + numberOfNewEvents + " received "+ current.size());      }      if (current.size() >= numberOfNewEvents) {        return;      }    }    try {      Thread.sleep(50);    } catch (    InterruptedException e) {      return;    }  }}  }
class C{  public void removeListener(final IDebuggerListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sxdtdx");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public Builder nodeId(UUID nodeId){  impl.nodeId=nodeId;  return this;}  }
class C{  public Builder withDatastore(){  rule.withDatastore=true;  return this;}  }
class C{  private static String applyReplacements(String source,RangeMap<Integer,String> replacements){  RangeSet<Integer> fixedRanges=TreeRangeSet.create();  StringBuilder sb=new StringBuilder(source);  int offset=0;  for (  Map.Entry<Range<Integer>,String> replacement : replacements.asMapOfRanges().entrySet()) {    Range<Integer> range=replacement.getKey();    String replaceWith=replacement.getValue();    int start=offset + range.lowerEndpoint();    int end=offset + range.upperEndpoint();    sb.replace(start,end,replaceWith);    if (!replaceWith.isEmpty()) {      fixedRanges.add(Range.closedOpen(start,end));    }    offset+=replaceWith.length() - (range.upperEndpoint() - range.lowerEndpoint());  }  String result=sb.toString();  if (!fixedRanges.isEmpty()) {    try {      result=new Formatter().formatSource(result,fixedRanges.asRanges());    } catch (    FormatterException e) {    }  }  return result;}  }
class C{  @Override public void initialize(){switch (simPaneCtrl.getParamValueIndex(PARAM_ENV)) {case 0:    env=new VacuumEnvironment();  break;case 1:env=new NondeterministicVacuumEnvironment();break;}agent=null;switch (simPaneCtrl.getParamValueIndex(PARAM_AGENT)) {case 0:agent=new TableDrivenVacuumAgent();break;case 1:agent=new ReflexVacuumAgent();break;case 2:agent=new SimpleReflexVacuumAgent();break;case 3:agent=new ModelBasedReflexVacuumAgent();break;case 4:agent=createNondeterministicVacuumAgent();break;}if (env != null && agent != null) {envViewCtrl.initialize(env);env.addEnvironmentView(envViewCtrl);env.addAgent(agent);if (agent instanceof NondeterministicVacuumAgent) {((NondeterministicVacuumAgent)agent).setProblem(createNondeterministicProblem());}}}  }
class C{  private void checkMaxIterations(final int maxIterations){  QL.require(maxIterations > 0,"Expected maxIterations must be greater 0");}  }
class C{  public static void generateConfiguration(InputStream input,OutputStream output,File destination) throws IOException {  requireArgument(input != null,"Input stream cannot be null.");  requireArgument(output != null,"Output stream cannot be null.");  requireArgument(destination != null,"Destination cannot be null.");  requireArgument(!destination.exists(),"The destination file already exists.");  BufferedReader in=new BufferedReader(new InputStreamReader(input,Charset.forName("UTF-8")));  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(output,Charset.forName("UTF-8")));  SystemConfiguration config=new SystemConfiguration(new Properties());  for (  Property property : Property.values()) {    if (!Property.BUILD.equals(property) && !Property.VERSION.equals(property)) {      String name=property.key();      do {        String defaultValue=config.getValue(property);        out.write(MessageFormat.format("Enter value for ''{0}'' ",name));        if (defaultValue != null) {          out.write(MessageFormat.format("'(default = '{0}')': ",config.getValue(property)));        }        out.flush();        String value=in.readLine();        if (value != null && !value.trim().isEmpty()) {          config.put(name,value);        } else         if (defaultValue != null) {          config.put(name,defaultValue);        }      } while (config.getValue(property) == null);    }  }  try (OutputStreamWriter fileWriter=new OutputStreamWriter(new FileOutputStream(destination),Charset.forName("UTF-8"))){    config.store(fileWriter,"Argus local configuration");    out.write(MessageFormat.format("Configuration saved to {0}.",destination.getAbsolutePath()));  } }  }
class C{  protected void doPaintAction(int texIndex,Image image,Vector2f uv,boolean dragged,float radius,boolean erase,float fadeFalloff){  Vector2f texuv=new Vector2f();  ColorRGBA color=ColorRGBA.Black;  float width=image.getWidth();  float height=image.getHeight();  int minx=(int)Math.max(0,(uv.x * width - radius * width));  int maxx=(int)Math.min(width,(uv.x * width + radius * width));  int miny=(int)Math.max(0,(uv.y * height - radius * height));  int maxy=(int)Math.min(height,(uv.y * height + radius * height));  float radiusSquared=radius * radius;  float radiusFalloff=radiusSquared * fadeFalloff;  for (int y=miny; y < maxy; y++) {    for (int x=minx; x < maxx; x++) {      texuv.set((float)x / width,(float)y / height);      float dist=texuv.distanceSquared(uv);      if (dist < radiusSquared) {        manipulatePixel(image,x,y,color,false);        float intensity=(1.0f - (dist / radiusSquared)) * fadeFalloff;        if (erase) {switch (texIndex) {case 0:            color.r-=intensity;          break;case 1:        color.g-=intensity;      break;case 2:    color.b-=intensity;  break;case 3:color.a-=intensity;break;}} else {switch (texIndex) {case 0:color.r+=intensity;break;case 1:color.g+=intensity;break;case 2:color.b+=intensity;break;case 3:color.a+=intensity;break;}}color.clamp();manipulatePixel(image,x,y,color,true);}}}image.getData(0).rewind();}  }
class C{  public MovAvgBuilder predict(int numPredictions){  this.predict=numPredictions;  return this;}  }
class C{  @Override public int available(){  return mPooledByteBuffer.size() - mOffset;}  }
class C{  public static void saveAsGnuStepASCII(NSArray root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists() && !parent.mkdirs()) {    throw new IOException("The output directory does not exist and could not be created.");  }  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toGnuStepASCIIPropertyList());  w.close();}  }
class C{  public void dynInit(){  disableToDeliver();  prepareTable(issue);  issue.autoSize();  issue.getModel().addTableModelListener(this);  issue.setRowCount(0);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="north: " + String.valueOf(wbr.getNorth());      out.println(str1);      str1="south: " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="east: " + String.valueOf(wbr.getEast());      out.println(str1);      str1="west: " + String.valueOf(wbr.getWest());      out.println(str1);      str1="rows: " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="cols: " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public <T>Future<T> submit(Callable<T> task){  return executor.submit(task);}  }
class C{  public String invertSelectionTipText(){  return "If enabled the selection of the columns is inverted.";}  }
class C{  public boolean isAppInForeground(){  ActivityManager manager=(ActivityManager)getSystemService(ACTIVITY_SERVICE);  List<ActivityManager.RunningTaskInfo> runningTaskInfo=manager.getRunningTasks(1);  ComponentName componentInfo=runningTaskInfo.get(0).topActivity;  return componentInfo.getPackageName().contains("org.denovogroup.murmur");}  }
class C{  public void define(final HGHandle atomHandle,final Object instance){  define(atomHandle,instance,(byte)0);}  }
class C{  boolean isVarArgs(){  return (getVMMethod().getModifiers() & Modifier.VARARGS) != 0;}  }
class C{  private void exportDBTables(Connection con) throws AdeException {  logger.debug("Starting to export tables to DB.");  final String fileNamesQueryStr=DB_QUERY_FOR_FILENAMES;  Statement statement=null;  ResultSet rs=null;  PreparedStatement ps=null;  try {    statement=getStatement(con);    rs=executeQuery(statement,fileNamesQueryStr);    while (rs != null && rs.next()) {      final String tableName=rs.getString(1);      final String ffdcFileName=formFFDCDBExportedTableFileName(tableName);      final File f=new File(ffdcFileName);      if (f.exists()) {        f.delete();      }      if (!tableName.equals(MESSAGE_SUMMARIES_TABLE)) {        logger.debug("Exporting table  " + tableName + " to file "+ ffdcFileName);        ps=con.prepareStatement(DB_QUERY_TO_EXPORT_DB_FILE);        ps.setString(1,null);        ps.setString(2,tableName);        ps.setString(3,ffdcFileName);        ps.setString(4,",");        ps.setString(5,null);        ps.setString(6,null);        ps.execute();      } else {        readMessageSummariesTable(con);      }    }  } catch (  SQLException e) {    throw new AdeExtInternalException("Got an SQL exception=" + e);  }catch (  AdeException e) {    throw e;  } finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {        logger.error("Exception in closing result set.",e);      }    }    if (statement != null) {      try {        statement.close();      } catch (      SQLException e) {        logger.error("Exception in closing statement.",e);      }    }    if (ps != null) {      try {        ps.close();      } catch (      SQLException e) {        logger.error("Exception in closing statement.",e);      }    }  }}  }
class C{  public Thread spawnThread(){  Thread thread=new Thread(this);  thread.start();  return thread;}  }
class C{  public ArrayAccess newArrayAccess(){  ArrayAccess result=new ArrayAccess(this);  return result;}  }
class C{  String catalogCond(String columnName,String catalog){  if (catalog == null && connection.nullCatalogMeansCurrent) {    catalog="";  }  if (catalog == null) {    return "(1 = 1)";  }  if (catalog.equals("")) {    return "(ISNULL(database()) OR (" + columnName + " = database()))";  }  return "(" + columnName + " = "+ escapeQuote(catalog)+ ")";}  }
class C{  public Builder InlineNewTag(String tag){  InlineNewTag=tag;  return this;}  }
class C{  public boolean isStrict(){  return strict;}  }
class C{  @Provides @Config("sheetLockTimeout") public static Duration provideSheetLockTimeout(){  return Duration.standardHours(1);}  }
class C{  @Transactional public void addPointExchangeNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_POINT_EXCHANGE);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=point_exchange] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public OMWarpingImage(int[] pix,int width,int height,GeoCoordTransformation transform,WorldFile worldfile){  setWarp(pix,width,height,transform,worldfile);}  }
class C{  public void test_getInstanceLjava_lang_String01() throws NoSuchAlgorithmException {  for (  String validValue : getValidValues()) {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(validValue);    assertTrue("Not TrustManagerFactory object",trustMF instanceof TrustManagerFactory);    assertEquals("Invalid algorithm",trustMF.getAlgorithm(),validValue);  }}  }
class C{  public static double swap(double value){  long longValue=Double.doubleToLongBits(value);  longValue=swap(longValue);  return Double.longBitsToDouble(longValue);}  }
class C{  public T caseGroup(Group object){  return null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.265 -0500",hash_original_method="6A3B211FACF5438B3BC1ECD3BFD1BA43",hash_generated_method="544C0D3DAB56E3314810F0B4B486C230") public ParserAdapter() throws SAXException {  String driver=System.getProperty("org.xml.sax.parser");  try {    setup(ParserFactory.makeParser());  } catch (  ClassNotFoundException e1) {    throw new SAXException("Cannot find SAX1 driver class " + driver,e1);  }catch (  IllegalAccessException e2) {    throw new SAXException("SAX1 driver class " + driver + " found but cannot be loaded",e2);  }catch (  InstantiationException e3) {    throw new SAXException("SAX1 driver class " + driver + " loaded but cannot be instantiated",e3);  }catch (  ClassCastException e4) {    throw new SAXException("SAX1 driver class " + driver + " does not implement org.xml.sax.Parser");  }catch (  NullPointerException e5) {    throw new SAXException("System property org.xml.sax.parser not specified");  }}  }
class C{  public void generate() throws FileNotFoundException, IOException {  TreeMap<String,byte[]> all=new TreeMap<String,byte[]>();  for (  Class<?> clazz : mInjectClasses) {    String name=classToEntryPath(clazz);    InputStream is=ClassLoader.getSystemResourceAsStream(name);    ClassReader cr=new ClassReader(is);    byte[] b=transform(cr,true);    name=classNameToEntryPath(transformName(cr.getClassName()));    all.put(name,b);  }  for (  Entry<String,ClassReader> entry : mDeps.entrySet()) {    ClassReader cr=entry.getValue();    byte[] b=transform(cr,true);    String name=classNameToEntryPath(transformName(cr.getClassName()));    all.put(name,b);  }  for (  Entry<String,ClassReader> entry : mKeep.entrySet()) {    ClassReader cr=entry.getValue();    byte[] b=transform(cr,true);    String name=classNameToEntryPath(transformName(cr.getClassName()));    all.put(name,b);  }  mLog.info("# deps classes: %d",mDeps.size());  mLog.info("# keep classes: %d",mKeep.size());  mLog.info("# renamed     : %d",mRenameCount);  createJar(new FileOutputStream(mOsDestJar),all);  mLog.info("Created JAR file %s",mOsDestJar);}  }
class C{  public boolean isUnique(){  return unique;}  }
class C{  public ResultSet executeQuery(String sql){  try {    return conn.createStatement().executeQuery(sql);  } catch (  SQLException e) {    throw new RuntimeException(e);  }}  }
class C{  public static double[][] loadTextFile(InputStream str,boolean flipY) throws RuntimeException, IOException {  double[][] vals=loadTextFile(str);  if (flipY) {    for (int i=0; i < vals.length; i++) {      int height=vals[i].length;      for (int j=0; j < height / 2; j++) {        double temp=vals[i][j];        vals[i][j]=vals[i][height - j + 1];        vals[i][height - j + 1]=temp;      }    }  }  return vals;}  }
class C{  private boolean testModeBasedOnVendors(){  boolean result=true;  String sourceVendor="";  String targetVendor="";  if (m_sourceVendor.getSelectedItem() != null)   sourceVendor=m_sourceVendor.getSelectedItem().toString().trim();  if (m_targetVendor.getSelectedItem() != null)   targetVendor=m_targetVendor.getSelectedItem().toString().trim();  if (m_modeUpgrade.isSelected()) {    if (!sourceVendor.equalsIgnoreCase(targetVendor))     result=false;  }  return result;}  }
class C{  public static String formatQuantity(int quantity){  return formatQuantity((double)quantity);}  }
class C{  public int read(final int length) throws DecodingException {  if (length > 31) {    throw ErrorFactory.createDecodingException(ErrorKeys.DIFFTOOL_DECODING_VALUE_OUT_OF_RANGE,"more than maximum length: " + length);  }  int v, b=0;  for (int i=length - 1; i >= 0; i--) {    v=readBit();    if (v == -1) {      if (i != length - 1) {        throw ErrorFactory.createDecodingException(ErrorKeys.DIFFTOOL_DECODING_UNEXPECTED_END_OF_STREAM);      }      return -1;    }    b|=v << i;  }  return b;}  }
class C{  public static Intent createGetContentIntent(){  final Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.setType("*/*");  intent.addCategory(Intent.CATEGORY_OPENABLE);  return intent;}  }
class C{  public K uiCallback(boolean uiCallback){  this.uiCallback=uiCallback;  return self();}  }
class C{  public void execute(String stmt) throws SQLException {  conn.createStatement().execute(stmt);}  }
class C{  public void endEntity(String name) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endEntity: " + name);  if (null != m_lexicalHandler) {    m_lexicalHandler.endEntity(name);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:50.390 -0500",hash_original_method="BC145A1DE2472995676ED9A315FB0956",hash_generated_method="171409CD29A7B7D5AD18DD4C394534AC") private static boolean equalsHandlesNulls(Object a,Object b){  return (a == null) ? (b == null) : a.equals(b);}  }
class C{  void repaint(Component cmp){  if (isCellRenderer() || cmp.getWidth() <= 0 || cmp.getHeight() <= 0 || paintLockImage != null) {    return;  }  Component parent=getParent();  if (parent != null && parent.isVisible()) {    parent.repaint(cmp);  }}  }
class C{  LocoNetMessage createReadPacket(){  LocoNetMessage m=new LocoNetMessage(6);  m.setElement(0,0xDF);  m.setElement(1,0x00);  m.setElement(2,0x00);  m.setElement(3,0x00);  m.setElement(4,0x00);  return m;}  }
class C{  private void validatePattern(String template){  boolean quote=false;  int next, last=-1, count=0;  final int patternLength=template.length();  for (int i=0; i < patternLength; i++) {    next=(template.charAt(i));    if (next == '\'') {      if (count > 0) {        validatePatternCharacter((char)last);        count=0;      }      if (last == next) {        last=-1;      } else {        last=next;      }      quote=!quote;      continue;    }    if (!quote && (last == next || (next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z'))) {      if (last == next) {        count++;      } else {        if (count > 0) {          validatePatternCharacter((char)last);        }        last=next;        count=1;      }    } else {      if (count > 0) {        validatePatternCharacter((char)last);        count=0;      }      last=-1;    }  }  if (count > 0) {    validatePatternCharacter((char)last);  }  if (quote) {    throw new IllegalArgumentException("Unterminated quote");  }}  }
class C{  public static boolean existsCost(MCostDetail cost){  if (cost.getCostAmt().add(cost.getCostAdjustment()).add(cost.getCostAmtLL()).add(cost.getCostAdjustmentLL()).signum() == 0)   return false; else   return true;}  }
class C{  public Object convert(Object valueToConvert) throws IllegalArgumentException {  if (null == valueToConvert) {    return (null);  }  return valueToConvert.toString();}  }
class C{  public void cacheAuthorizationContext(Service s,String token,AuthorizationContext ctx){  if (!this.isPrivilegedService(s)) {    throw new RuntimeException("Service not allowed to cache authorization token");  }synchronized (this.state) {    this.authorizationContextCache.put(token,ctx);    addUserToken(this.userLinktoTokenMap,ctx.getClaims().getSubject(),token);  }}  }
class C{  public String snapshotIQLicenseInfo() throws IsilonException, JSONException {  ClientResponse resp=null;  String licenseStatus="Unknown";  try {    resp=_client.get(_baseUrl.resolve(URI_SNAPSHOTIQ_LICENSE_INFO));    JSONObject jsonResp=resp.getEntity(JSONObject.class);    if (jsonResp.has("status")) {      licenseStatus=jsonResp.get("status").toString();    }  } catch (  Exception e) {    throw IsilonException.exceptions.unableToConnect(_baseUrl,e);  } finally {    if (resp != null) {      resp.close();    }  }  sLogger.info("Isilon snapshotIQ license status is  {}",licenseStatus);  return licenseStatus;}  }
class C{  public static void openShareDialog(Context context,String title,@SuppressWarnings("SameParameterValue") String uri,String shareText,String shareSubject){  Intent share=new Intent(Intent.ACTION_SEND);  share.setType("text/plain");  share.putExtra(Intent.EXTRA_TEXT,shareText);  share.putExtra(Intent.EXTRA_SUBJECT,shareSubject);  if (!TextUtils.isEmpty(uri)) {    share.setType("image/*");    share.putExtra(Intent.EXTRA_STREAM,Uri.parse(uri));  }  context.startActivity(Intent.createChooser(share,title));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toCSV(){  StringBuilder sb=new StringBuilder();  boolean firstValue=true;  Set<String> fields=new LinkedHashSet<String>();  fields.add("NFE");  if (data.containsKey("Elapsed Time")) {    fields.add("Elapsed Time");  }  fields.addAll(keySet());  for (  String field : fields) {    if (!firstValue) {      sb.append(", ");    }    sb.append(StringEscapeUtils.escapeCsv(field));    firstValue=false;  }  for (int i=0; i < size("NFE"); i++) {    sb.append(Settings.NEW_LINE);    firstValue=true;    for (    String field : fields) {      if (!firstValue) {        sb.append(", ");      }      sb.append(StringEscapeUtils.escapeCsv(get(field,i).toString()));      firstValue=false;    }  }  return sb.toString();}  }
class C{  public void shape(PShape shape,float x,float y){  if (shape.isVisible()) {    pushMatrix();    if (shapeMode == CENTER) {      translate(x - shape.getWidth() / 2,y - shape.getHeight() / 2);    } else     if ((shapeMode == CORNER) || (shapeMode == CORNERS)) {      translate(x,y);    }    shape.draw(this);    popMatrix();  }}  }
class C{  public Iterator iterateChildren(){  return this.children.iterator();}  }
class C{  public static MarkerAnnotation makeMarkerAnnotation(char[][] name,ASTNode source){  long pos=(long)source.sourceStart << 32 | source.sourceEnd;  TypeReference typeRef=new QualifiedTypeReference(name,new long[]{pos,pos,pos});  setGeneratedBy(typeRef,source);  MarkerAnnotation ann=new MarkerAnnotation(typeRef,(int)(pos >> 32));  ann.declarationSourceEnd=ann.sourceEnd=ann.statementEnd=(int)pos;  setGeneratedBy(ann,source);  return ann;}  }
class C{  String readLine() throws IOException {  StringBuilder sb=new StringBuilder();  int c;  while ((c=in.read()) != '\n') {    if (c < 0) {      throw new IOException("End-of-file");    }    sb.append((char)c);  }  return sb.toString().trim();}  }
class C{  public void onDestroy(){}  }
class C{  public static <T1,T2,T3,T4,T5,R>QuadFunction<T2,T3,T4,T5,R> partial5(final T1 t1,final QuintFunction<T1,T2,T3,T4,T5,R> quintFunc){  return null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(')');  return result.toString();}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  private static void prettyPrintXml(final String bucketName,final String content){  Source xmlInput=new StreamSource(new StringReader(content));  StreamResult xmlOutput=new StreamResult(new StringWriter());  try {    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,"testing.dtd");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    System.out.println("\nBucket listing for " + bucketName + ":\n");    System.out.println(xmlOutput.getWriter().toString());  } catch (  TransformerException e) {    e.printStackTrace();  }}  }
class C{  protected static final long makeKey(int i1,int i2){  return (i1 < i2) ? ((((long)i1) << 32) | i2) : ((((long)i2) << 32) | i1);}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static <K,V>MapCoder<K,V> of(Coder<K> keyCoder,Coder<V> valueCoder){  return new MapCoder<>(keyCoder,valueCoder);}  }
class C{  public synchronized void startPolling(){  m_scheduler.scheduleAtFixedRate(m_notificationPoller,0,500,TimeUnit.MILLISECONDS);}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public DoubleProperty amplitudeProperty(){  return amplitude;}  }
class C{  public static void assertSpinLoopAllJettyAreRunning(MiniSolrCloudCluster cluster) throws InterruptedException {  final int numServers=cluster.getJettySolrRunners().size();  int numRunning=0;  for (int i=5; 0 <= i; i--) {    numRunning=0;    for (    JettySolrRunner jetty : cluster.getJettySolrRunners()) {      if (jetty.isRunning()) {        numRunning++;      }    }    if (numServers == numRunning) {      return;    } else     if (0 == i) {      break;    }    Thread.sleep(Math.min((numServers - numRunning) * 100,1000));  }  assertEquals("giving up waiting for all jetty instances to be running",numServers,numRunning);}  }
class C{  public void testNoPreemptiveAuth() throws Exception {  startServer(47500);  fetchPage("/noauth.jsp",200);}  }
class C{  public QueryBuilder key(Optional<String> key){  this.key=key;  return this;}  }
class C{  public void resetToCheckpoint(){  if (checkPoint != -1) {    current_item=checkPoint;  }  checkPoint=-1;}  }
class C{  private void updateHAParametersForVirtualPool(VirtualPool vPool,VirtualPoolHighAvailabilityParam haParam){  StringMap haVarrayVpoolMap=vPool.getHaVarrayVpoolMap();  if (haParam != null) {    vPool.setMetroPoint(haParam.getMetroPoint());  }  if (haParam.getAutoCrossConnectExport() != null) {    vPool.setAutoCrossConnectExport(haParam.getAutoCrossConnectExport());  }  if (vPool.getHighAvailability() != null && haParam.getType() != null && !vPool.getHighAvailability().equals(haParam.getType())) {    checkIfVpoolIsSetAsContinuousCopiesVpool(vPool);  } else   if (vPool.getHighAvailability() == null && haParam.getType() != null && (haParam.getType().equals(VirtualPool.HighAvailabilityType.vplex_local.name()) || haParam.getType().equals(VirtualPool.HighAvailabilityType.vplex_distributed.name()))) {    checkIfVpoolIsSetAsContinuousCopiesVpool(vPool);  } else   if (vPool.getHighAvailability() != null && (vPool.getHighAvailability().equals(VirtualPool.HighAvailabilityType.vplex_local.name()) || vPool.getHighAvailability().equals(VirtualPool.HighAvailabilityType.vplex_distributed.name())) && (haParam.getType() == null || String.valueOf(haParam.getType()).isEmpty())) {    checkIfVpoolIsSetAsContinuousCopiesVpool(vPool);  }  if ((haParam.getType() == null || String.valueOf(haParam.getType()).isEmpty()) && (haParam.getHaVirtualArrayVirtualPool() == null || String.valueOf(haParam.getHaVirtualArrayVirtualPool()).isEmpty())) {    _log.info("Removing HA from vPool");    if (vPool.getHighAvailability() != null) {      vPool.setHighAvailability(NullColumnValueGetter.getNullStr());    }    if ((haVarrayVpoolMap != null) && (!haVarrayVpoolMap.isEmpty())) {      haVarrayVpoolMap.remove(haVarrayVpoolMap.keySet().iterator().next());      vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());    }  }  if (haParam.getType() != null && !String.valueOf(haParam.getType()).isEmpty()) {    vPool.setHighAvailability(haParam.getType());    if ((haParam.getType().equals(VirtualPool.HighAvailabilityType.vplex_local.name())) && (haVarrayVpoolMap != null) && (!haVarrayVpoolMap.isEmpty())) {      haVarrayVpoolMap.remove(haVarrayVpoolMap.keySet().iterator().next());      vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());    }  }  if (haParam.getHaVirtualArrayVirtualPool() != null) {    if (haParam.getHaVirtualArrayVirtualPool().getVirtualArray() == null && haParam.getHaVirtualArrayVirtualPool().getVirtualPool() == null) {      if ((haVarrayVpoolMap != null) && (!haVarrayVpoolMap.isEmpty())) {        haVarrayVpoolMap.remove(haVarrayVpoolMap.keySet().iterator().next());        vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());        if (vPool.getHighAvailability() != null && vPool.getHighAvailability().equals(VirtualPool.HighAvailabilityType.vplex_distributed.name())) {          vPool.setHighAvailability(NullColumnValueGetter.getNullStr());        }      }    } else {      String haVpoolId=NullColumnValueGetter.getNullURI().toString();      if (haParam.getHaVirtualArrayVirtualPool().getVirtualPool() != null) {        if (!haParam.getHaVirtualArrayVirtualPool().getVirtualPool().toString().isEmpty()) {          haVpoolId=haParam.getHaVirtualArrayVirtualPool().getVirtualPool().toString();          if (NullColumnValueGetter.isNotNullValue(haVpoolId)) {            if ((haVarrayVpoolMap == null) || (haVarrayVpoolMap.isEmpty())) {              verifyNewHAVpoolForHAVpoolUpdate(vPool,haVpoolId);            } else {              String currentHAVpoolId=haVarrayVpoolMap.get(haVarrayVpoolMap.keySet().iterator().next());              if (!NullColumnValueGetter.isNotNullValue(currentHAVpoolId)) {                verifyNewHAVpoolForHAVpoolUpdate(vPool,haVpoolId);              } else               if (!haVpoolId.equals(currentHAVpoolId)) {                verifyNewHAVpoolForHAVpoolUpdate(vPool,haVpoolId);              }            }          }        }      }      if (haParam.getHaVirtualArrayVirtualPool().getVirtualArray() != null) {        if ((haVarrayVpoolMap != null) && (!haVarrayVpoolMap.isEmpty())) {          String haVarray=haVarrayVpoolMap.keySet().iterator().next();          if (!haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString().equals(haVarray)) {            haVarrayVpoolMap.remove(haVarray);            vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());          }          haVarrayVpoolMap.put(haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString(),haVpoolId);          if (haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite() != null && haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite()) {            vPool.setHaVarrayConnectedToRp(haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString());          } else {            vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());          }        } else         if (haVarrayVpoolMap == null) {          haVarrayVpoolMap=new StringMap();          haVarrayVpoolMap.put(haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString(),haVpoolId);          vPool.setHaVarrayVpoolMap(haVarrayVpoolMap);          if (haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite() != null && haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite()) {            vPool.setHaVarrayConnectedToRp(haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString());          } else {            vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());          }        } else {          haVarrayVpoolMap.put(haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString(),haVpoolId);          if (haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite() != null && haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite()) {            vPool.setHaVarrayConnectedToRp(haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString());          } else {            vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());          }        }      } else       if ((haParam.getHaVirtualArrayVirtualPool().getVirtualPool() != null) && (haVarrayVpoolMap != null) && (!haVarrayVpoolMap.isEmpty())) {        String haVarray=haVarrayVpoolMap.keySet().iterator().next();        haVarrayVpoolMap.put(haVarray,haVpoolId);        if (haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite() != null && haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite()) {          vPool.setHaVarrayConnectedToRp(haParam.getHaVirtualArrayVirtualPool().getVirtualArray().toString());        } else {          vPool.setHaVarrayConnectedToRp(NullColumnValueGetter.getNullStr());        }      }    }  }}  }
class C{  public SVGFeMergeElementBridge(){}  }
class C{  protected void installViewListeners(View p){  p.addPropertyChangeListener(viewListener);}  }
class C{  private static boolean closeViews(final List<? extends INaviView> views){  for (  final INaviView view : new FilledList<INaviView>(views)) {    if (view.isLoaded() && !view.close()) {      return false;    }  }  return true;}  }
class C{  public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){  int flags=0;  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;  Pattern p=Pattern.compile(regex,flags);  Matcher m=p.matcher(original);  StringBuffer newSB=new StringBuffer();  boolean result=m.find();  while (result) {    m.appendReplacement(newSB,replace);    result=m.find();  }  m.appendTail(newSB);  return newSB;}  }
class C{  public boolean shouldExclude(final Path path){  return matches(path,excludeMatchers);}  }
class C{  @Override protected int calcAttackValue(){  int[] payload=waa.getBombPayload();  if (null == payload) {    return 0;  }  int nbombs=0;  for (int i=0; i < payload.length; i++) {    nbombs+=payload[i];  }  if (bDirect) {    nbombs=Math.min(nbombs + (toHit.getMoS() / 3),nbombs * 2);  }  if (bGlancing) {    nbombs=(int)Math.floor(nbombs / 2.0);  }  return nbombs;}  }
class C{  protected void configureGwtProject(MavenProject mavenProject,IProgressMonitor monitor){  String gwtVersion=null;  List<Dependency> dependencies=mavenProject.getDependencies();  for (  Dependency dependency : dependencies) {    boolean hasGwtGroupId=GWTMavenRuntime.MAVEN_GWT_GROUP_ID.equals(dependency.getGroupId());    boolean hasGwtUserArtivactId=GWTMavenRuntime.MAVEN_GWT_USER_ARTIFACT_ID.equals(dependency.getArtifactId());    boolean hasGwtUserServletId=GWTMavenRuntime.MAVEN_GWT_SERVLET_ARTIFACT_ID.equals(dependency.getArtifactId());    if (hasGwtGroupId && (hasGwtUserArtivactId || hasGwtUserServletId)) {      gwtVersion=dependency.getVersion();      Activator.log("MavenProjectConfigurator, Maven: Setting up Gwt Project. hasGwtGroupId=" + hasGwtGroupId + " hasGwtUser="+ hasGwtUserArtivactId+ " hasGwtUserServletId="+ hasGwtUserServletId);      break;    }  }  Activator.log("MavenProjectConfigurator, Maven: gwtVersion=" + gwtVersion);  resolveGwtDevJar(mavenProject,monitor,gwtVersion);}  }
class C{  public String startlistfile(){  return startlistfile;}  }
class C{  public AuthenticationException(String message){  super(message);}  }
class C{  public float parseFloat(){  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;switch (current) {case '-':    mantPos=false;case '+':  current=read();}m1: switch (current) {default :return Float.NaN;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;case '.':case 'e':case 'E':break m1;default :return 0.0f;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);return 0.0f;}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :if (!mantRead) {return 0.0f;}break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}switch (current) {case 'e':case 'E':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '-':expPos=false;case '+':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}return buildFloat(mant,exp);}  }
class C{  public static Appearance appearanceForImage(Image image,boolean opaque){  Appearance appearance=appearanceForColor(Color.black);  if (!opaque) {    TransparencyAttributes tta=new TransparencyAttributes(TransparencyAttributes.BLENDED,1.0f);    tta.setCapability(TransparencyAttributes.ALLOW_VALUE_WRITE);    tta.setCapability(TransparencyAttributes.ALLOW_VALUE_READ);    appearance.setTransparencyAttributes(tta);  }  appearance.setTexture(new TextureLoader(image,TextureLoader.BY_REFERENCE,null).getTexture());  TextureAttributes ta=new TextureAttributes();  ta.setTextureMode(TextureAttributes.REPLACE);  PolygonAttributes pa=new PolygonAttributes();  pa.setCullFace(PolygonAttributes.CULL_NONE);  appearance.setPolygonAttributes(pa);  appearance.setTextureAttributes(ta);  return appearance;}  }
class C{  public void loadFilters(Match match,Collection<Filter> filters){  filters.stream().filter(null).forEach(null);}  }
class C{  ECFieldF2mDomainParams(final int m,final BigInteger rp,final int[] ks,final Exception expectedException){  this.m=m;  this.rp=rp;  this.ks=ks;  this.x=expectedException;}  }
class C{  void invoke(Macro macro,Map namedArgs,List positionalArgs,List bodyParameterNames,TemplateElement[] childBuffer) throws TemplateException, IOException {  if (macro == Macro.DO_NOTHING_MACRO) {    return;  }  pushElement(macro);  try {    final Macro.Context macroCtx=macro.new Context(this,childBuffer,bodyParameterNames);    setMacroContextLocalsFromArguments(macroCtx,macro,namedArgs,positionalArgs);    final Macro.Context prevMacroCtx=currentMacroContext;    currentMacroContext=macroCtx;    final LocalContextStack prevLocalContextStack=localContextStack;    localContextStack=null;    final Namespace prevNamespace=currentNamespace;    currentNamespace=(Namespace)macroToNamespaceLookup.get(macro);    try {      macroCtx.sanityCheck(this);      visit(macro.getChildBuffer());    } catch (    ReturnInstruction.Return re) {    }catch (    TemplateException te) {      handleTemplateException(te);    } finally {      currentMacroContext=prevMacroCtx;      localContextStack=prevLocalContextStack;      currentNamespace=prevNamespace;    }  }  finally {    popElement();  }}  }
class C{  public boolean isCellEditable(EventObject evt){  if (evt instanceof MouseEvent) {    return ((MouseEvent)evt).getClickCount() >= 2;  }  return true;}  }
class C{  protected Column addColumn(ResultSet rs,String columnName) throws SQLException {  return new Column(columnName,rs.getInt("DATA_TYPE"));}  }
class C{  public InvalidPropertiesFormatException(String message){  super(message);}  }
class C{  private TransitSchedule mergeTouchingTransitRoutes(Scenario scenario,String outputDirectory){  final String UNDERLINE="_____";  Logger log=Logger.getLogger(TransitScheduleSimplifier.class);  log.info("starting simplify method for given transit schedule...");  log.info("transit routes within a transit line that overlap at least at one stop facility will be merged...");  TransitScheduleFactoryImpl factory=new TransitScheduleFactoryImpl();  this.transitSchedule=scenario.getTransitSchedule();  mergedSchedule=factory.createTransitSchedule();  for (  TransitStopFacility facility : transitSchedule.getFacilities().values()) {    mergedSchedule.addStopFacility(facility);  }  Map<Id<TransitLine>,TransitLine> transitLines=transitSchedule.getTransitLines();  int routesCounter=0;  int mergedRoutesCounter=0;  Iterator<TransitLine> transitLineIterator=transitLines.values().iterator();  while (transitLineIterator.hasNext()) {    this.checkedFacilities=new ArrayList<TransitStopFacility>();    TransitLine transitLine=transitLineIterator.next();    if (transitLine.getRoutes().size() <= 0) {      continue;    }    TransitLine mergedTransitLine=factory.createTransitLine(transitLine.getId());    Map<Id<TransitRoute>,TransitRoute> transitRoutes=transitLine.getRoutes();    routesCounter+=transitRoutes.size();    TransitRoute currentTransitRoute=null;    PriorityQueue<Id<TransitRoute>> uncheckedRoutes=new PriorityQueue<Id<TransitRoute>>();    uncheckedRoutes.addAll(transitRoutes.keySet());    List<TransitStopFacility> checkedFacilities=new ArrayList<TransitStopFacility>();    boolean reduced=false;    boolean breakpoint=false;    int n=1;    while (uncheckedRoutes.size() > 0) {      currentTransitRoute=transitRoutes.get(uncheckedRoutes.poll());      Set<Id<TransitRoute>> endedTransitRoutes=new HashSet<Id<TransitRoute>>();      if (currentTransitRoute.getDepartures().size() > 0) {        String id=currentTransitRoute.getId().toString();        String prevId=null;        LinkedList<TransitStopFacility> drivenStops=new LinkedList<TransitStopFacility>();        TransitStopFacility lastFacility=null;        for (int i=0; i < currentTransitRoute.getStops().size(); i++) {          TransitRouteStop stop=currentTransitRoute.getStops().get(i);          TransitStopFacility currentFacility=stop.getStopFacility();          drivenStops.addLast(currentFacility);          if (checkedFacilities.contains(currentFacility)) {            if (drivenStops.size() < 2) {              drivenStops=new LinkedList<TransitStopFacility>();              id=currentTransitRoute.getId().toString();              continue;            } else {              breakpoint=true;            }          }          for (          TransitRoute transitRoute : transitRoutes.values()) {            if (!transitRoute.equals(currentTransitRoute) && transitRoutesHaveSameDirection(currentTransitRoute,transitRoute) && !endedTransitRoutes.contains(transitRoute.getId())) {              if (transitRoute.getStop(currentFacility) != null) {                id+=UNDERLINE + transitRoute.getId().toString();              } else {                if (prevId != null) {                  if (prevId.contains(transitRoute.getId().toString())) {                    endedTransitRoutes.add(transitRoute.getId());                    drivenStops.remove(currentFacility);                    reduced=true;                  }                }              }            }          }          if (prevId != null && drivenStops.size() > 1) {            if (!prevId.equals(id) || i >= currentTransitRoute.getStops().size() - 1 || breakpoint) {              mergedTransitLine.addRoute(createNewMergedRoute((prevId + "===" + n),drivenStops,scenario,factory,transitRoutes));              n++;              mergedRoutesCounter++;              drivenStops=new LinkedList<TransitStopFacility>();              if (reduced) {                i--;                checkedFacilities.remove(lastFacility);                reduced=false;              }              i--;            }          } else           if (prevId != null && drivenStops.size() <= 1) {            if (!prevId.equals(id) || i >= currentTransitRoute.getStops().size() - 1 || breakpoint) {              drivenStops=new LinkedList<TransitStopFacility>();              id=currentTransitRoute.getId().toString();            }          }          prevId=id;          id=currentTransitRoute.getId().toString();          if (i < 0) {            checkedFacilities.add(currentTransitRoute.getStops().get(i + 1).getStopFacility());            lastFacility=currentTransitRoute.getStops().get(i + 1).getStopFacility();          } else {            checkedFacilities.add(currentTransitRoute.getStops().get(i).getStopFacility());            lastFacility=currentTransitRoute.getStops().get(i).getStopFacility();          }          breakpoint=false;        }      }    }    mergedSchedule.addTransitLine(mergedTransitLine);  }  log.info("number of initial transit routes: " + routesCounter);  String diff=routesCounter > mergedRoutesCounter ? Integer.toString(mergedRoutesCounter - routesCounter) : "+" + Integer.toString(mergedRoutesCounter - routesCounter);  log.info("number of merged transit routes: " + mergedRoutesCounter + " ( "+ diff+ " )");  log.info("writing simplified transit schedule to " + outputDirectory);  new TransitScheduleWriter(mergedSchedule).writeFile(outputDirectory);  log.info("... done.");  return mergedSchedule;}  }
class C{  @Override public void apply(JFreeChart chart){  ParamChecks.nullNotPermitted(chart,"chart");  TextTitle title=chart.getTitle();  if (title != null) {    title.setFont(this.extraLargeFont);    title.setPaint(this.titlePaint);  }  int subtitleCount=chart.getSubtitleCount();  for (int i=0; i < subtitleCount; i++) {    applyToTitle(chart.getSubtitle(i));  }  chart.setBackgroundPaint(this.chartBackgroundPaint);  Plot plot=chart.getPlot();  if (plot != null) {    applyToPlot(plot);  }}  }
class C{  public DeviceAutomator launchApp(Intent intent,long timeout){  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);  getContext().startActivity(intent);  mDevice.wait(hasObject(By.pkg(intent.getPackage()).depth(0)),timeout);  return this;}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(PANEL_NAME);  regexesPanel=new MultipleRegexesOptionsPanel(View.getSingleton().getSessionDialog());  this.add(getPanelSession(),getPanelSession().getName());}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchPreferenceStyle);}  }
class C{  public void clear(){  reset((AccessibilityNodeInfoCompat)null);}  }
class C{  public boolean onUseWrench(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){  return false;}  }
class C{  private XYDataset createDataset2(){  XYSeries series2=new XYSeries("Series 3");  series2.add(10.0,16853.2);  series2.add(20.0,19642.3);  series2.add(30.0,18253.5);  series2.add(40.0,15352.3);  series2.add(50.0,13532.0);  series2.add(100.0,12635.3);  series2.add(110.0,13998.2);  series2.add(120.0,11943.2);  series2.add(130.0,16943.9);  series2.add(140.0,17843.2);  series2.add(150.0,16495.3);  series2.add(160.0,17943.6);  series2.add(170.0,18500.7);  series2.add(180.0,19595.9);  return new XYSeriesCollection(series2);}  }
class C{  public void searchLocationsAtLocation(InstagramAPIResponseCallback<ArrayList<IGLocation>> callback,IGLocation location,int distanceInMeters){  Call<IGAPIResponse> call=instagramAPIService.searchLocation(location.getLatitude(),location.getLongitude(),distanceInMeters,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<ArrayList<IGLocation>>(){  }.getType()));}  }
class C{  public static synchronized void unregister(PurchaseObserver observer){  sPurchaseObserver=null;}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:test","sa","");  Statement stat=conn.createStatement();  stat.execute("CREATE TABLE TEST(ID INT)");  stat.execute("CREATE ALIAS TRIGGER_SET FOR \"" + TriggerPassData.class.getName() + ".setTriggerData\"");  stat.execute("CREATE TRIGGER T1 " + "BEFORE INSERT ON TEST " + "FOR EACH ROW CALL \"" + TriggerPassData.class.getName() + "\"");  stat.execute("CALL TRIGGER_SET('T1', 'Hello')");  stat.execute("INSERT INTO TEST VALUES(1)");  stat.execute("CALL TRIGGER_SET('T1', 'World')");  stat.execute("INSERT INTO TEST VALUES(2)");  stat.close();  conn.close();}  }
class C{  public void walk(Visitor<Operator> visitor){  visitor.visit(this);}  }
class C{  public void updateRSAConfigFiles(TenantInformation tenantInfo,RSAAgentConfig rsaConfig) throws Exception {  Validate.notNull(tenantInfo,"tenantInfo");  String tenantName=tenantInfo.getTenant().getName();  Validate.notEmpty(tenantName,"tenantName");  ClassLoader classLoader=getClass().getClassLoader();  InputStream templateStrm=classLoader.getResourceAsStream(RSA_API_PROPERTIES_TEMPLATE);  Validate.notNull(templateStrm,"rsa_api.properties resource not found");  File tenantConfigDir=ensureTenantConfigDirExist(tenantName);  File tenantConfigFile=new File(tenantConfigDir,RSA_API_PROPERTIES_NAME);  BufferedReader br=new BufferedReader(new InputStreamReader(templateStrm));  String lines="";  String siteID=_clusterID;  RSAAMInstanceInfo instInfo=rsaConfig.get_instMap().get(siteID);  if (instInfo == null) {    return;  }  String line;  try {    line=br.readLine();    String ls=System.getProperty("line.separator");    while (line != null) {      String[] attrVal=line.split("=");      if (attrVal == null || attrVal.length < 1) {        continue;      }      String attr=attrVal[0].replace("#","");      String newLine;switch (attr) {case RSA_AGENT_NAME:        newLine=RSA_AGENT_NAME + "=" + instInfo.get_agentName()+ ls;      lines+=newLine;    break;case SDCONF_LOC:{    byte[] sdConfBytes=instInfo.get_sdconfRec();    Validate.notNull(sdConfBytes);    File sdConfFile=new File(tenantConfigDir,SD_CONF_NAME);    sdConfFile.delete();    String sdConfFilePath=sdConfFile.getAbsolutePath();    FileOutputStream fos;    try {      fos=new FileOutputStream(sdConfFilePath);    } catch (    IOException e) {      logger.error("Can not create or open sdconf.rec: " + sdConfFilePath,e);      throw e;    }    try {      fos.write(sdConfBytes);    } catch (    IOException e) {      logger.error("Can not write to sdconf.rec: " + sdConfFilePath,e);      throw e;    } finally {      fos.close();    }    newLine=SDCONF_LOC + "=" + sdConfFilePath+ ls;    lines+=StringEscapeUtils.escapeJava(newLine);    break;  }case SDOPTS_LOC:{  byte[] sdOptsBytes=instInfo.get_sdoptsRec();  if (sdOptsBytes == null) {    newLine="#" + SDOPTS_LOC + "="+ ls;    lines+=newLine;    break;  }  File sdOptsFile=new File(tenantConfigDir,SD_OPTS_NAME);  sdOptsFile.delete();  String sdOptsFilePath=sdOptsFile.getAbsolutePath();  FileOutputStream fos;  try {    fos=new FileOutputStream(sdOptsFilePath);  } catch (  IOException e) {    logger.error("Can not create or open sdopts.rec: " + sdOptsFilePath,e);    throw e;  }  try {    fos.write(sdOptsBytes);  } catch (  IOException e) {    logger.error("Can not write to sdopts.rec: " + sdOptsFilePath,e);    throw e;  } finally {    fos.close();  }  newLine=SDOPTS_LOC + "=" + sdOptsFilePath;  lines+=StringEscapeUtils.escapeJava(newLine);  break;}case RSA_LOG_LEVEL:newLine=RSA_LOG_LEVEL + "=" + rsaConfig.get_logLevel()+ ls;lines+=newLine;break;case RSA_LOG_FILE_SIZE:newLine=RSA_LOG_FILE_SIZE + "=" + rsaConfig.get_logFileSize()+ "MB"+ ls;lines+=newLine;break;case RSA_LOG_FILE_COUNT:newLine=RSA_LOG_FILE_COUNT + "=" + rsaConfig.get_maxLogFileCount()+ ls;lines+=newLine;break;case RSA_CONNECTION_TIMEOUT:newLine=RSA_CONNECTION_TIMEOUT + "=" + rsaConfig.get_connectionTimeOut()+ ls;lines+=newLine;break;case RSA_READ_TIMEOUT:newLine=RSA_READ_TIMEOUT + "=" + rsaConfig.get_readTimeOut()+ ls;lines+=newLine;break;case RSA_ENC_ALGLIST:Set<String> encSet=rsaConfig.get_rsaEncAlgList();Validate.notNull(encSet);String[] encArray=encSet.toArray(new String[encSet.size()]);newLine=RSA_ENC_ALGLIST + "=";if (encArray.length > 0) {newLine+=encArray[0];}for (int i=1; i < encArray.length; i++) {newLine+=("," + encArray[i]);}newLine+=ls;lines+=newLine;break;case RSA_AGENT_PLATFORM:newLine=RSA_AGENT_PLATFORM + "=";if (SystemUtils.IS_OS_LINUX) {newLine=RSA_AGENT_PLATFORM + "=linux" + ls;} else {newLine=RSA_AGENT_PLATFORM + "=windows" + ls;}lines+=newLine;break;case RSA_CONFIG_DATA_LOC:newLine=RSA_CONFIG_DATA_LOC + "=" + tenantConfigDir.getAbsolutePath()+ ls;lines+=StringEscapeUtils.escapeJava(newLine);break;case SDNDSCRT_LOC:File sdndscrtLoc=new File(tenantConfigDir,"secureid");newLine=RSA_CONFIG_DATA_LOC + "=" + sdndscrtLoc.getAbsolutePath()+ ls;lines+=StringEscapeUtils.escapeJava(newLine);break;case RSA_LOG_FILE:String ssoConfigDir=IdmUtils.getIdentityServicesLogDir();File rsaLogFile=new File(ssoConfigDir,RSA_SECUREID_LOG_NAME);newLine=RSA_LOG_FILE + "=" + rsaLogFile.getAbsolutePath()+ ls;lines+=StringEscapeUtils.escapeJava(newLine);break;default :lines+=(line + ls);}line=br.readLine();}} catch (IOException e) {logger.error("Fail to read from rsa_api.properties resource stream",e);throw new IDMException("Unable to generate rsa_api property file",e);}FileWriter fw;try {fw=new FileWriter(tenantConfigFile);} catch (IOException e) {logger.error("Fail to create rsa_api.properties file",e);throw new IDMException("Unable to generate rsa_api property file",e);}BufferedWriter out=new BufferedWriter(fw);try {tenantInfo.get_rsaConfigFilesLock().writeLock().lock();out.write(lines.toString());} catch (IOException e) {logger.error("Fail to write to rsa_api.properties file",e);throw new IDMException("Unable to generate rsa_api property file",e);} finally {try {out.close();} catch (IOException e) {tenantInfo.get_rsaConfigFilesLock().writeLock().unlock();logger.error("Fail to close to rsa_api.properties file BufferWriter",e);throw new IDMException("Unable to generate rsa_api property file",e);}tenantInfo.get_rsaConfigFilesLock().writeLock().unlock();}}  }
class C{  private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (diff_main)");  }  LinkedList<Diff> diffs;  if (text1.equals(text2)) {    diffs=new LinkedList<Diff>();    if (text1.length() != 0) {      diffs.add(new Diff(Operation.EQUAL,text1));    }    return diffs;  }  int commonlength=diff_commonPrefix(text1,text2);  String commonprefix=text1.substring(0,commonlength);  text1=text1.substring(commonlength);  text2=text2.substring(commonlength);  commonlength=diff_commonSuffix(text1,text2);  String commonsuffix=text1.substring(text1.length() - commonlength);  text1=text1.substring(0,text1.length() - commonlength);  text2=text2.substring(0,text2.length() - commonlength);  diffs=diff_compute(text1,text2,checklines,deadline);  if (commonprefix.length() != 0) {    diffs.addFirst(new Diff(Operation.EQUAL,commonprefix));  }  if (commonsuffix.length() != 0) {    diffs.addLast(new Diff(Operation.EQUAL,commonsuffix));  }  diff_cleanupMerge(diffs);  return diffs;}  }
class C{  public Element store(Object o){  DccLocoAddress p=(DccLocoAddress)o;  Element element=new Element("dcclocoaddress");  if (p != null) {    element.setAttribute("number","" + p.getNumber());    if (p.isLongAddress()) {      element.setAttribute("longaddress","yes");    } else {      element.setAttribute("longaddress","no");    }  } else {    element.setAttribute("number","");    element.setAttribute("longaddress","no");  }  return element;}  }
class C{  public void transformCombined(Iterable<FeatureVector> combined){  if (combinedTransform != null && combined != null) {    combinedTransform.doTransform(combined);  }}  }
class C{  protected Object notifyInternal(final ProceedingJoinPoint pjp,final boolean newPerson) throws Throwable {  final Object[] args=pjp.getArgs();  final RegisteredPerson registeredPerson=(RegisteredPerson)args[0];  final Shop shop=(Shop)args[1];  final String token=!newPerson ? (String)args[2] : null;  if (registeredPerson instanceof Customer && ((Customer)registeredPerson).isGuest()) {    return pjp.proceed();  }  final String generatedPassword;  final String generatedPasswordHash;  final String generatedToken;  final Date generatedTokenExpiry;  if (newPerson) {    if (StringUtils.isNotBlank(registeredPerson.getPassword())) {      generatedPassword=registeredPerson.getPassword();    } else {      generatedPassword=phrazeGenerator.getNextPassPhrase();    }    generatedPasswordHash=passwordHashHelper.getHash(generatedPassword);    generatedToken=null;    generatedTokenExpiry=null;  } else {    if (StringUtils.isNotBlank(token)) {      if (!isCallcenterToken(shop,token)) {        if (!token.equals(registeredPerson.getAuthToken()) || registeredPerson.getAuthTokenExpiry() == null || new Date().after(registeredPerson.getAuthTokenExpiry())) {          throw new BadCredentialsException(Constants.PASSWORD_RESET_AUTH_TOKEN_INVALID);        }      }      generatedPassword=phrazeGenerator.getNextPassPhrase();      generatedPasswordHash=passwordHashHelper.getHash(generatedPassword);      generatedToken=null;      generatedTokenExpiry=null;    } else {      generatedPassword=null;      generatedPasswordHash=registeredPerson.getPassword();      generatedToken=phrazeGenerator.getNextPassPhrase();      generatedTokenExpiry=determineExpiryTime(shop);    }  }  final RegistrationMessage registrationMessage=createRegistrationMessage(newPerson,registeredPerson,shop,generatedPassword,generatedPasswordHash,generatedToken,generatedTokenExpiry,newPerson ? "customer-registered" : "customer-change-password");  sendNotification(registrationMessage);  ShopCodeContext.getLog(this).info("Person message was send to queue {}",registrationMessage);  return pjp.proceed();}  }
class C{  public static LinkedHashSet<String> sortMatching(final PrefixMatcher matcher,Collection<String> _names){  ProgressManager.checkCanceled();  if (matcher.getPrefix().isEmpty()) {    return ContainerUtil.newLinkedHashSet(_names);  }  List<String> sorted=new ArrayList<String>();  for (  String name : _names) {    if (matcher.prefixMatches(name)) {      sorted.add(name);    }  }  ProgressManager.checkCanceled();  Collections.sort(sorted,String.CASE_INSENSITIVE_ORDER);  ProgressManager.checkCanceled();  LinkedHashSet<String> result=new LinkedHashSet<String>();  for (  String name : sorted) {    if (matcher.isStartMatch(name)) {      result.add(name);    }  }  ProgressManager.checkCanceled();  result.addAll(sorted);  return result;}  }
class C{  String generateSharedPrefsString(){  return String.valueOf(mDownloadId) + "," + mInstallNotifyURI;}  }
class C{  public HttpStreamsServerHandler(List<ChannelHandler> dependentHandlers){  super(HttpRequest.class,HttpResponse.class);  this.dependentHandlers=dependentHandlers;}  }
class C{  public synchronized void removeXTextLabel(double x){  mXTextLabels.remove(x);}  }
class C{  private TransitStopFacility[] multiplyStop(TransitStopFacility stopFacility,int numberOfCopies){  TransitStopFacility[] facilities=new TransitStopFacility[numberOfCopies + 1];  facilities[0]=stopFacility;  for (int i=1; i <= numberOfCopies; i++) {    Id<TransitStopFacility> idNewFacility=Id.create(stopFacility.getId().toString() + "_" + i,TransitStopFacility.class);    TransitStopFacility newFacility=this.scheduleFactory.createTransitStopFacility(idNewFacility,stopFacility.getCoord(),stopFacility.getIsBlockingLane());    newFacility.setName(stopFacility.getName());    facilities[i]=newFacility;  }  return facilities;}  }
class C{  public boolean animateState(State newState){  State prevState=mState;  if (mState != newState) {    mState=newState;    mPropertyAnimator=cancelAnimator(mPropertyAnimator);    mPropertyAnimator=new AnimatorSet();    mPropertyAnimator.playTogether(ObjectAnimator.ofFloat(this,"desaturation",newState.desaturation),ObjectAnimator.ofFloat(this,"brightness",newState.brightness));    mPropertyAnimator.setInterpolator(newState.interpolator);    mPropertyAnimator.setDuration(getDurationForStateChange(prevState,newState));    mPropertyAnimator.setStartDelay(getStartDelayForStateChange(prevState,newState));    mPropertyAnimator.start();    return true;  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_2__MORE_CODE_1:    return ((InternalEList<?>)getMoreCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void createPartitionedSubRegion(List vmList,boolean firstCreationFlag){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(createSubRegion(firstCreationFlag,PARTITIONED_REGION));  }}  }
class C{  @ValidationErrorPage(value="new") @Action(value="/bills/bulkBillGeneration-generateBills") public String generateBills(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("generateBills method started for zone " + zoneId + " and ward number :"+ wardId);  BulkBillGeneration bulkBill=null;  String wardMessage="";  final Module module=moduleService.getModuleByName(PropertyTaxConstants.PTMODULENAME);  final Installment currentInstall=installmentDao.getInsatllmentByModuleForGivenDate(module,new Date());  final List<BulkBillGeneration> bbgList=billService.getBulkBill(zoneId,wardId,currentInstall);  if (bbgList != null && !bbgList.isEmpty())   bulkBill=bbgList.get(0);  if (bulkBill == null) {    bulkBill=billService.saveBulkBill(zoneId,wardId,currentInstall);    if (wardId != null && wardId != -1)     wardMessage=", Ward " + bulkBill.getWard().getName();    setAckMessage("Bill generation scheduled for zone " + bulkBill.getZone().getName() + wardMessage+ " and for Installment "+ currentInstall.getDescription()+ ", you can check the bill generation status using ");  } else {    if (wardId != null && wardId != -1)     wardMessage=", Ward " + bulkBill.getWard().getName();    setAckMessage("Bill generation already scheduled for zone " + bulkBill.getZone().getName() + wardMessage+ " and for Installment "+ currentInstall.getDescription()+ ", you can check the bill generation status after some time using ");  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("generateBills method started for zone " + zoneId + " and ward number :"+ wardId);  return RESULT_ACK;}  }
class C{  public static int writeLEInt(byte[] b,int off,int val){  b[off + 0]=(byte)((val) & 0xff);  b[off + 1]=(byte)((val >> 8) & 0xff);  b[off + 2]=(byte)((val >> 16) & 0xff);  b[off + 3]=(byte)((val >> 24) & 0xff);  return 4;}  }
class C{  private int parseCmd(String cmd){  if (cmd == null || cmd.length() < 3)   return ERROR;  int blank=cmd.indexOf(' ');  if (blank < 0)   blank=cmd.length();  if (blank < 3)   return ERROR;  String s=cmd.substring(0,blank);  if (cmd.length() > blank + 1)   arg=cmd.substring(blank + 1,cmd.length()); else   arg=null;  for (int i=0; i < cmds.length; i++) {    if (s.equalsIgnoreCase(cmds[i]))     return i + 1;  }  return ERROR;}  }
class C{  public DestinationWrapper<Topic> lookupTopic(String uri,TopicSession session) throws JMSException, NamingException {  if (usingJNDI) {    return lookupTopicFromJNDI(uri);  } else {    return new DestinationWrapper<Topic>(uri,session.createTopic(uri));  }}  }
class C{  private int compareVersionParts(String version1,String version2){  int compare=0;  Integer v1;  Integer v2;  try {    v1=version1 != null ? Integer.parseInt(version1) : 0;  } catch (  NumberFormatException e) {    v1=0;  }  try {    v2=version2 != null ? Integer.parseInt(version2) : 0;  } catch (  NumberFormatException e) {    v2=0;  }  if (v1 > v2) {    compare=1;  } else   if (v1 < v2) {    compare=-1;  } else {    compare=0;  }  return compare;}  }
class C{  public DBMinimalFFDCDataCollector(){  super();}  }
class C{  protected DataOutput(Output output,Serializer serializer){  this.output=output;  this.serializer=serializer;  buffer=output.getBuffer();}  }
class C{  public static OnTheFlyMarginalCalculator serializableInstance(){  return new OnTheFlyMarginalCalculator(BayesPm.serializableInstance(),DataUtils.discreteSerializableInstance());}  }
class C{  @Override public void handlePatch(Operation patch){  State currentState=getState(patch);  State patchState=patch.getBody(State.class);  currentState.taskInfo=patchState.taskInfo;  patch.complete();}  }
class C{  public static Account createSyncAccount(Context context,String name){  Account newAccount=new Account(name,ACCOUNT_TYPE);  AccountManager accountManager=(AccountManager)context.getSystemService(Context.ACCOUNT_SERVICE);  if (accountManager.addAccountExplicitly(newAccount,null,null)) {  } else {  }  return newAccount;}  }
class C{  public void add(Algorithm algorithm){  algorithms.add(algorithm);}  }
class C{  public void stopRecording(){  if (valueWriter != null) {    valueWriter.close();    valueWriter=null;  }  recording=false;  this.getParentNetwork().fireGroupParametersChanged(this);  this.getParentNetwork().fireGroupChanged(this,"Recording Stopped");}  }
class C{  GzipOrRawInputStream(final InputStream raw,final int bufferSize) throws IOException {  super(null);  final byte[] header=new byte[GZIP_HEADER.length];  final PushbackInputStream input=new PushbackInputStream(raw,2);  int size=0;  while (size < header.length) {    int octet=input.read();    if (octet == -1)     break;    header[size]=(byte)octet;    size++;  }  assert size <= 2;  input.unread(header,0,size);  if (size == 2 && Arrays.equals(header,GZIP_HEADER)) {    in=new GZIPInputStream(input,bufferSize);  } else {    in=input;  }}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public static final boolean isEsmeDeliveryAcknowledgement(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_ESME_DELIVERY_ACK);}  }
class C{  @Override public void updateProgress(float value){  final int size=mTransitionList.size();  for (int i=0; i < size; i++) {    mTransitionList.get(i).updateProgress(value);  }}  }
class C{  @Override public String toString(){  return String.format("Flow graph [%d nodes, %d edges]",nodeCount(),edgeCount());}  }
class C{  public boolean canDisplay(char c){  return awtFont.canDisplay(c);}  }
class C{  public long term(){  return term;}  }
class C{  public boolean match(IfStatement node,Object other){  if (!(other instanceof IfStatement)) {    return false;  }  IfStatement o=(IfStatement)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getThenStatement(),o.getThenStatement()) && safeSubtreeMatch(node.getElseStatement(),o.getElseStatement()));}  }
class C{  public static AlertDialog buildAlert(Context context,Integer title,Integer msg,Integer ok,Integer cancel,DialogInterface.OnClickListener lOk,DialogInterface.OnClickListener lCancel){  AlertDialog.Builder builder=new AlertDialog.Builder(context);  if (title != null)   builder.setTitle(title);  if (msg != null)   builder.setMessage(msg);  if (ok != null)   builder.setPositiveButton(ok,lOk);  if (cancel != null)   builder.setNegativeButton(cancel,lCancel);  return builder.create();}  }
class C{  public static void clear(Image img){  Graphics g=img.getGraphics();  try {    if (g instanceof Graphics2D) {      ((Graphics2D)g).setComposite(AlphaComposite.Clear);    } else {      g.setColor(new Color(0,0,0,0));    }    g.fillRect(0,0,img.getWidth(null),img.getHeight(null));  }  finally {    g.dispose();  }}  }
class C{  public void testLongValue(){  LongAccumulator ai=new LongAccumulator(null,0L);  assertEquals(0,ai.longValue());  ai.accumulate(1);  assertEquals(1,ai.longValue());}  }
class C{  private void printOutDefinedIPs(List<String> definedIPs){  List<String> ipList=new ArrayList<>();  for (  String ip : definedIPs) {    if (ip.indexOf(':') != -1) {      ipList.add("|- IPv6: " + ip);    } else {      ipList.add("|- IPv4: " + ip);    }  }  Collections.sort(ipList);  for (  String ip : ipList) {    log.info(ip);  }}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Can I resolve " + element.getTagName() + "?");  }  Element[] x509childNodes=null;  XMLX509SubjectName x509childObject[]=null;  if (!XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_X509DATA)) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"I can't");    }    return null;  }  x509childNodes=XMLUtils.selectDsNodes(element.getFirstChild(),Constants._TAG_X509SUBJECTNAME);  if (!((x509childNodes != null) && (x509childNodes.length > 0))) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"I can't");    }    return null;  }  try {    if (storage == null) {      Object exArgs[]={Constants._TAG_X509SUBJECTNAME};      KeyResolverException ex=new KeyResolverException("KeyResolver.needStorageResolver",exArgs);      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"",ex);      }      throw ex;    }    x509childObject=new XMLX509SubjectName[x509childNodes.length];    for (int i=0; i < x509childNodes.length; i++) {      x509childObject[i]=new XMLX509SubjectName(x509childNodes[i],baseURI);    }    Iterator<Certificate> storageIterator=storage.getIterator();    while (storageIterator.hasNext()) {      X509Certificate cert=(X509Certificate)storageIterator.next();      XMLX509SubjectName certSN=new XMLX509SubjectName(element.getOwnerDocument(),cert);      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"Found Certificate SN: " + certSN.getSubjectName());      }      for (int i=0; i < x509childObject.length; i++) {        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,"Found Element SN:     " + x509childObject[i].getSubjectName());        }        if (certSN.equals(x509childObject[i])) {          if (log.isLoggable(java.util.logging.Level.FINE)) {            log.log(java.util.logging.Level.FINE,"match !!! ");          }          return cert;        }        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,"no match...");        }      }    }    return null;  } catch (  XMLSecurityException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"XMLSecurityException",ex);    }    throw new KeyResolverException("generic.EmptyMessage",ex);  }}  }
class C{  private void extendPluginMenu(final IGraphMenuPlugin plugin){  try {    final List<JComponent> menuItems=plugin.extendPluginMenu(m_model.getGraphFrame());    if (menuItems != null) {      for (      final JComponent menuItem : menuItems) {        add(menuItem);      }    }  } catch (  final Exception exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="E00085: " + "Plugin caused an unexpected exception";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The plugin %s caused an unexpected exception.",plugin.getName()),new String[]{"The plugin contains a bug."},new String[]{"The plugin probably behaves erroneously from this point on but it remains active"});    NaviErrorDialog.show(m_model.getParent(),innerMessage,innerDescription,exception);  }}  }
class C{  protected InternalScopeImpl(){  super();}  }
class C{  public static SourceLineAnnotation fromVisitedMethod(PreorderVisitor visitor){  SourceLineAnnotation sourceLines=getSourceAnnotationForMethod(visitor.getDottedClassName(),visitor.getMethodName(),visitor.getMethodSig());  return sourceLines;}  }
class C{  protected void sendExecute(final int operation,final RowValue parameters) throws IOException, SQLException {  assert operation == WireProtocolConstants.op_execute || operation == WireProtocolConstants.op_execute2 : "Needs to be called with operation op_execute or op_execute2";  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(operation);  xdrOut.writeInt(getHandle());  xdrOut.writeInt(getTransaction().getHandle());  if (parameters != null && parameters.getCount() > 0) {    final RowDescriptor parameterDescriptor=getParameterDescriptor();    xdrOut.writeBuffer(calculateBlr(parameterDescriptor,parameters));    xdrOut.writeInt(0);    xdrOut.writeInt(1);    writeSqlData(parameterDescriptor,parameters);  } else {    xdrOut.writeBuffer(null);    xdrOut.writeInt(0);    xdrOut.writeInt(0);  }  if (operation == WireProtocolConstants.op_execute2) {    final RowDescriptor fieldDescriptor=getFieldDescriptor();    xdrOut.writeBuffer(fieldDescriptor != null && fieldDescriptor.getCount() > 0 ? calculateBlr(fieldDescriptor) : null);    xdrOut.writeInt(0);  }}  }
class C{  private static IllegalArgumentException ex(String format,Object... args){  return new IllegalArgumentException(String.format(format,args));}  }
class C{  public Node parse(File file) throws IOException, SAXException {  InputSource input=new InputSource(new FileInputStream(file));  input.setSystemId("file://" + file.getAbsolutePath());  getXMLReader().parse(input);  return parent;}  }
class C{  public void add(RegularTimePeriod period,BigDecimal relativeStrengthIndex){  if (!this.isEmpty()) {    RelativeStrengthIndexItem item0=(RelativeStrengthIndexItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new RelativeStrengthIndexItem(period,relativeStrengthIndex),true);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer(super.toString());  buf.append(" children=[");  for (int i=0; i < children.length; i++) {    if (i != 0) {      buf.append(" ");    }    buf.append(children[i].toString());  }  buf.append("]");  return buf.toString();}  }
class C{  public SignerInfoGenerator build(ContentSigner contentSigner,X509CertificateHolder certHolder) throws OperatorCreationException {  SignerIdentifier sigId=new SignerIdentifier(new IssuerAndSerialNumber(certHolder.toASN1Structure()));  SignerInfoGenerator sigInfoGen=createGenerator(contentSigner,sigId);  sigInfoGen.setAssociatedCertificate(certHolder);  return sigInfoGen;}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(7);  newVector.addElement(new Option("\tThe index of the class attribute.\n" + "\t(default last)","c",1,"-c <class index>"));  newVector.addElement(new Option("\tThe name of the arff file used for the decomposition.","t",1,"-t <name of arff file>"));  newVector.addElement(new Option("\tThe number of instances placed in the training pool.\n" + "\tThe remainder will be used for testing. (default 100)","T",1,"-T <training pool size>"));  newVector.addElement(new Option("\tThe random number seed used.","s",1,"-s <seed>"));  newVector.addElement(new Option("\tThe number of training repetitions used.\n" + "\t(default 50)","x",1,"-x <num>"));  newVector.addElement(new Option("\tTurn on debugging output.","D",0,"-D"));  newVector.addElement(new Option("\tFull class name of the learner used in the decomposition.\n" + "\teg: weka.classifiers.bayes.NaiveBayes","W",1,"-W <classifier class name>"));  if ((m_Classifier != null) && (m_Classifier instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to learner " + m_Classifier.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_Classifier).listOptions()));  }  return newVector.elements();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.985 -0500",hash_original_method="732CF49E361007DEE3B2FC2D605BF87E",hash_generated_method="3DA719908B1BF7B8EB9660CF8C565B13") private boolean validateNonNegativeInt(String name,int value){  boolean retVal;  if (value < 0) {    Log.e(LOG_TAG,name + " bad value: is < 0");    retVal=false;  } else {    retVal=true;  }  if (DBG)   log("validateNonNegative: " + name + ", "+ value+ ", "+ retVal);  return retVal;}  }
class C{  public void markUsed(long pos,int length){  int start=getBlock(pos);  int blocks=getBlockCount(length);  set.set(start,start + blocks);}  }
class C{  public final void addVetoableChangeListener(VetoableChangeListener listener){  vcs.addVetoableChangeListener(listener);}  }
class C{  protected TypeParameterImpl(){  super();}  }
class C{  public List query(double x){  return query(x,x);}  }
class C{  public MqttSourceConnectorConfig(Map<String,String> properties){  super(config,properties);  log.info("Initialize transform process properties");}  }
class C{  public Exchange advanced(){  return exchange;}  }
class C{  public boolean isWordOperation(ResolvedJavaMethod targetMethod){  final boolean isObjectAccess=objectAccessType.equals(targetMethod.getDeclaringClass());  final boolean isBarrieredAccess=barrieredAccessType.equals(targetMethod.getDeclaringClass());  if (isObjectAccess || isBarrieredAccess) {    assert targetMethod.getAnnotation(Operation.class) != null : targetMethod + " should be annotated with @" + Operation.class.getSimpleName();    return true;  }  return isWord(targetMethod.getDeclaringClass());}  }
class C{  private ListMultimap<String,URI> groupStoragePoolsByStorageSystem(Set<String> allPoolUris,String copyMode){  Set<String> columnNames=new HashSet<String>();  columnNames.add(STORAGE_DEVICE);  columnNames.add(SUPPORTED_COPY_TYPES);  String copyType=getPoolCopyTypeFromCopyModes(copyMode);  Collection<StoragePool> storagePools=_objectCache.getDbClient().queryObjectFields(StoragePool.class,columnNames,new ArrayList<URI>(Collections2.transform(allPoolUris,CommonTransformerFunctions.FCTN_STRING_TO_URI)));  ListMultimap<String,URI> storageToPoolMap=ArrayListMultimap.create();  for (  StoragePool pool : storagePools) {    if (pool.getSupportedCopyTypes() == null || !pool.getSupportedCopyTypes().contains(copyType)) {      _logger.debug("Skipping the storage pool {} as it does not supports copy type",pool.getNativeGuid());      continue;    }    storageToPoolMap.put(pool.getStorageDevice().toString(),pool.getId());  }  return storageToPoolMap;}  }
class C{  public void testEntrySetUsesComparatorOnly(){  Map<String,String> map=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  map.put("ABC","a");  assertTrue(map.entrySet().contains(new SimpleEntry<String,String>("abc","a")));  assertTrue(map.entrySet().remove(new SimpleEntry<String,String>("abc","a")));  assertEquals(0,map.size());}  }
class C{  public void validate(File file) throws SAXException, IOException {  validate(new StreamSource(file));}  }
class C{  public X509Data itemX509Data(int i) throws XMLSecurityException {  if (x509Datas != null) {    return x509Datas.get(i);  }  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_X509DATA,i);  if (e != null) {    return new X509Data(e,this.baseURI);  }  return null;}  }
class C{  public void registerMediaButtonEventReceiverForCalls(ComponentName c){  if (mContext.checkCallingPermission("android.permission.MODIFY_PHONE_STATE") != PackageManager.PERMISSION_GRANTED) {    Log.e(TAG,"Invalid permissions to register media button receiver for calls");    return;  }synchronized (mRCStack) {    mMediaReceiverForCalls=c;  }}  }
class C{  public static void fail(){  fail(null);}  }
class C{  public void response(Response response){synchronized (this) {    this.response=response;    this.stauts=Status.DONE;    this.notifyAll();  }}  }
class C{  public synchronized void initScriptsFramework(String framework){  Message msg=mJSHandler.obtainMessage();  msg.obj=framework;  msg.what=WXJSBridgeMsgType.INIT_FRAMEWORK;  msg.setTarget(mJSHandler);  msg.sendToTarget();}  }
class C{  public void googleSearch(){  String query=mProfileName;  if (isArtist()) {    query=mArtistName;  } else   if (isAlbum()) {    query=mProfileName + " " + mArtistName;  }  final Intent googleSearch=new Intent(Intent.ACTION_WEB_SEARCH);  googleSearch.putExtra(SearchManager.QUERY,query);  startActivity(googleSearch);}  }
class C{  public boolean satisfiesBoundaries(TypeVariable<?> typeVariable,Map<TypeVariable<?>,Type> typeMap){  boolean isAssignable=true;  Map<TypeVariable<?>,Type> ownerVariableMap=getTypeVariableMap();  for (  Type bound : typeVariable.getBounds()) {    if (bound instanceof ParameterizedType) {      Class<?> boundClass=GenericTypeReflector.erase(bound);      if (boundClass.isAssignableFrom(rawClass)) {        Map<TypeVariable<?>,Type> xmap=TypeUtils.determineTypeArguments(rawClass,(ParameterizedType)bound);        ownerVariableMap.putAll(xmap);      }    }  }  ownerVariableMap.putAll(typeMap);  boolean changed=true;  while (changed) {    changed=false;    for (    TypeVariable<?> var : ownerVariableMap.keySet()) {      if (ownerVariableMap.get(var) instanceof TypeVariable<?>) {        TypeVariable<?> value=(TypeVariable<?>)ownerVariableMap.get(var);        if (ownerVariableMap.containsKey(value)) {          Type other=ownerVariableMap.get(value);          if (var != other && value != other) {            ownerVariableMap.put(var,other);            changed=true;          }        } else {        }      } else {      }    }  }  GenericClass concreteClass=new GenericClass(GenericUtils.replaceTypeVariables(type,ownerVariableMap));  for (  Type theType : typeVariable.getBounds()) {    if (GenericTypeReflector.erase(theType).equals(Enum.class)) {      if (isEnum()) {        continue;      } else {        isAssignable=false;        break;      }    }    Type boundType=GenericUtils.replaceTypeVariables(theType,ownerVariableMap);    boundType=GenericUtils.replaceTypeVariable(boundType,typeVariable,getType());    boundType=GenericUtils.replaceTypeVariablesWithWildcards(boundType);    if (!concreteClass.isAssignableTo(boundType) && !(boundType instanceof WildcardType)) {      if (GenericTypeReflector.erase(boundType).isAssignableFrom(getRawClass())) {        Type instanceType=GenericTypeReflector.getExactSuperType(boundType,getRawClass());        if (instanceType == null) {          isAssignable=false;          break;        }        boundType=GenericUtils.replaceTypeVariable(theType,typeVariable,instanceType);        if (GenericClass.isAssignable(boundType,instanceType)) {          continue;        } else {        }      }      isAssignable=false;      break;    }  }  return isAssignable;}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public boolean bit(String key,boolean exist){  Object value=super.get(key);  if (value == null) {    return false;  } else   if (value instanceof Boolean) {    return ((Boolean)value).booleanValue();  } else   if (value instanceof String) {    if (exist)     return true;    String s=(String)value;    if (s.equalsIgnoreCase("true") || s.equalsIgnoreCase("on") || s.equalsIgnoreCase("yes"))     return true;    return false;  }  throw new ClassCastException();}  }
class C{  public static void writeAffinityFunctionContext(AffinityFunctionContext affCtx,BinaryRawWriterEx writer,PlatformContext ctx){  assert affCtx != null;  assert writer != null;  assert ctx != null;  ctx.writeNodes(writer,affCtx.currentTopologySnapshot());  writer.writeInt(affCtx.backups());  writer.writeLong(affCtx.currentTopologyVersion().topologyVersion());  writer.writeInt(affCtx.currentTopologyVersion().minorTopologyVersion());  ctx.writeEvent(writer,affCtx.discoveryEvent());  List<List<ClusterNode>> prevAssignment=((GridAffinityFunctionContextImpl)affCtx).prevAssignment();  if (prevAssignment == null)   writer.writeInt(-1); else {    writer.writeInt(prevAssignment.size());    for (    List<ClusterNode> part : prevAssignment)     ctx.writeNodes(writer,part);  }}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>ContainsPredicate<T> contains(Property<? extends Collection<T>> collectionProperty,Variable variable){  NullArgumentException.validateNotNull("Variable",variable);  return new ContainsPredicate(property(collectionProperty),variable);}  }
class C{  public static final void assertExp(boolean b){  assertExp(b,"");}  }
class C{  public static <T>Set<T> plus(Set<T> left,Iterable<T> right){  return (Set<T>)plus((Collection<T>)left,asCollection(right));}  }
class C{  public ULLMapIter(){  _cur=_list;}  }
class C{  public BalancedBinaryNode<K,V> pred(BalancedBinaryNode<K,V> n){  if (root == null) {    return null;  }  if (n.left != null) {    n=n.left;    while (n.right != null) {      n=n.right;    }    return n;  }  while (n != root && n == n.parent.left) {    n=n.parent;  }  if (n == root) {    return null;  }  return n.parent;}  }
class C{  @HLEFunction(nid=0x6FF40ACC,version=150) public int sceRtcGetTick(ScePspDateTime time,TPointer64 ticksAddr){  Calendar cal=new GregorianCalendar(time.year,time.month - 1,time.day,time.hour,time.minute,time.second);  cal.set(Calendar.MILLISECOND,time.microsecond / 1000);  cal.setTimeZone(ScePspDateTime.GMT);  long ticks=rtcMagicOffset + (cal.getTimeInMillis() * 1000L) + (time.microsecond % 1000);  ticksAddr.setValue(ticks);  if (log.isDebugEnabled()) {    log.debug(String.format("sceRtcGetTick returning %d",ticks));  }  return 0;}  }
class C{  public HGStore(String database,HGConfiguration config){  databaseLocation=database;  this.config=config;  this.impl=config.getStoreImplementation();  impl.startup(this,config);  transactionManager=new HGTransactionManager(impl.getTransactionFactory());  if (!config.isTransactional())   transactionManager.disable();}  }
class C{  public void after(){  try {    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {      Trace.beginSection("Taking logcat");    }    ProcessBuilder processBuilder=new ProcessBuilder();    processBuilder.command("logcat","-d","-f",PerfTestingUtils.getTestFile(mTestClass,mTestName,"logcat.log").getAbsolutePath());    processBuilder.redirectErrorStream();    Process process=processBuilder.start();    process.waitFor();    if (process.exitValue() != 0) {      Log.e(LOG_TAG,"Error exit value while extracting logcat, exitValue=" + process.exitValue());    }  } catch (  Exception ignored) {    Log.e(LOG_TAG,"Error while extracting logcat",ignored);  } finally {    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {      Trace.endSection();    }  }}  }
class C{  protected JButton createCancelButton(){  BuddyButton btn=new BuddyButton();  return btn;}  }
class C{  private void updateTitles(int state){  String mainTitle=makeTitle(channels.getActiveTab(),state);  String trayTooltip=makeTitle(channels.getLastActiveChannel(),state);  trayIcon.setTooltipText(trayTooltip);  if (client.settings.getBoolean("simpleTitle")) {    setTitle("Chatty");  } else {    setTitle(mainTitle);  }  Map<Channel,JDialog> popoutChannels=channels.getPopoutChannels();  for (  Channel channel : popoutChannels.keySet()) {    String title=makeTitle(channel,state);    popoutChannels.get(channel).setTitle(title);  }}  }
class C{  public void resetOffset(boolean doRecursive){  if (parentNode != null) {    positionVector=Vec3.createVectorHelper(0,0,parentNode.length);    parentNode.setVectorRotations(positionVector);    positionVector.xCoord+=parentNode.positionVector.xCoord;    positionVector.yCoord+=parentNode.positionVector.yCoord;    positionVector.zCoord+=parentNode.positionVector.zCoord;  }  if (doRecursive && !childNodes.isEmpty()) {    for (    Bone childNode : childNodes) {      childNode.resetOffset(doRecursive);    }  }}  }
class C{  public final void writeFloat(float v){  writeInt(Float.floatToIntBits(v));}  }
class C{  public void start(){  try {    copyResources();    LDAPServerConfigurationBuilder configurationBuilder=new LDAPServerConfigurationBuilder(getLdapConfigurationFile());    configurationBuilder.buildConfigurations();    boolean embeddedLDAPEnabled=configurationBuilder.isEmbeddedLDAPEnabled();    if (embeddedLDAPEnabled) {      LDAPConfiguration ldapConfiguration=configurationBuilder.getLdapConfiguration();      setSchemaLocation();      setWorkingDirectory(ldapConfiguration);      startLdapServer(ldapConfiguration);      this.ldapServer.changeConnectionUserPassword(configurationBuilder.getConnectionPassword());      PartitionManager partitionManager=this.ldapServer.getPartitionManager();      PartitionInfo defaultPartitionInfo=configurationBuilder.getPartitionConfigurations();      boolean defaultPartitionAlreadyExisted=partitionManager.partitionDirectoryExists(defaultPartitionInfo.getPartitionId());      if (!defaultPartitionAlreadyExisted) {        partitionManager.addPartition(defaultPartitionInfo);        if (kdcServer == null) {          kdcServer=DirectoryServiceFactory.createKDCServer(DirectoryServiceFactory.LDAPServerType.APACHE_DIRECTORY_SERVICE);        }        kdcServer.kerberizePartition(configurationBuilder.getPartitionConfigurations(),this.ldapServer);      } else {        partitionManager.initializeExistingPartition(defaultPartitionInfo);      }      if (configurationBuilder.isKdcEnabled()) {        startKDC(configurationBuilder.getKdcConfigurations());      }      if (log.isDebugEnabled()) {        log.debug("apacheds-server started.");      }    } else {      log.info("Embedded LDAP is disabled.");    }  } catch (  FileNotFoundException e) {    String errorMessage="Could not start the embedded-ldap. ";    log.error(errorMessage,e);  }catch (  DirectoryServerException e) {    String errorMessage="Could not start the embedded-ldap. ";    log.error(errorMessage,e);  }catch (  EmbeddingLDAPException e) {    String errorMessage="Could not start the embedded-ldap. ";    log.error(errorMessage,e);  }catch (  Exception e) {    String errorMessage="An unknown exception occurred while starting LDAP server. ";    log.error(errorMessage,e);  }catch (  Throwable e) {    String errorMessage="An unknown error occurred while starting LDAP server. ";    log.error(errorMessage,e);  }}  }
class C{  void populateListView(ArrayList<Note> note){  noteAdapter=new NoteAdapter(this,R.layout.listview_item_row,note);  listView.setAdapter(noteAdapter);}  }
class C{  private void loadVolumeLevels(SQLiteDatabase db){  SQLiteStatement stmt=null;  try {    stmt=db.compileStatement("INSERT OR IGNORE INTO system(name,value)" + " VALUES(?,?);");    loadSetting(stmt,Settings.System.VOLUME_MUSIC,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_MUSIC]);    loadSetting(stmt,Settings.System.VOLUME_RING,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_RING]);    loadSetting(stmt,Settings.System.VOLUME_SYSTEM,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_SYSTEM]);    loadSetting(stmt,Settings.System.VOLUME_VOICE,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_VOICE_CALL]);    loadSetting(stmt,Settings.System.VOLUME_ALARM,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_ALARM]);    loadSetting(stmt,Settings.System.VOLUME_NOTIFICATION,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_NOTIFICATION]);    loadSetting(stmt,Settings.System.VOLUME_BLUETOOTH_SCO,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_BLUETOOTH_SCO]);    int ringerModeAffectedStreams=(1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM)| (1 << AudioManager.STREAM_SYSTEM_ENFORCED);    if (!mContext.getResources().getBoolean(com.android.internal.R.bool.config_voice_capable)) {      ringerModeAffectedStreams|=(1 << AudioManager.STREAM_MUSIC);    }    loadSetting(stmt,Settings.System.MODE_RINGER_STREAMS_AFFECTED,ringerModeAffectedStreams);    loadSetting(stmt,Settings.System.MUTE_STREAMS_AFFECTED,((1 << AudioManager.STREAM_MUSIC) | (1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION)| (1 << AudioManager.STREAM_SYSTEM)));  }  finally {    if (stmt != null)     stmt.close();  }  loadVibrateWhenRingingSetting(db);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean contains(Interval other){  return this.start <= other.start && this.end >= other.end;}  }
class C{  public MatrixSeries(String name,int rows,int columns){  super(name);  this.data=new double[rows][columns];  zeroAll();}  }
class C{  public boolean intersects(RectHV that){  return this.xmax >= that.xmin && this.ymax >= that.ymin && that.xmax >= this.xmin && that.ymax >= this.ymin;}  }
class C{  public static boolean isValidWWNAlias(String address){  boolean valid=false;  if (address != null) {    String alias=address.trim();    Pattern aliasPattern=Pattern.compile(WWN_ALIAS_PATTERN);    Matcher matcher=aliasPattern.matcher(alias);    valid=matcher.matches() && matcher.group(0).length() == alias.length();  }  return valid;}  }
class C{  @Override public boolean receiveImage(ImageToProcess img,TaskImageContainer task,boolean blockUntilImageRelease,boolean closeOnImageRelease,Optional<Runnable> runnableWhenDone) throws InterruptedException {  Set<TaskImageContainer> passTasks=new HashSet<TaskImageContainer>(1);  passTasks.add(task);  return receiveImage(img,passTasks,blockUntilImageRelease,closeOnImageRelease,runnableWhenDone);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://ecommerce.org/schema";  String qualifiedName="prefix:myDoc";  String publicId="http://www.localhost.com";  String systemId="myDoc.dtd";  Document doc;  DOMImplementation domImpl;  DocumentType newType=null;  String nodeName;  String nodeValue;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newType=domImpl.createDocumentType(qualifiedName,publicId,systemId);  nodeName=newType.getNodeName();  assertEquals("nodeName","prefix:myDoc",nodeName);  nodeValue=newType.getNodeValue();  assertNull("nodeValue",nodeValue);}  }
class C{  public ZapToggleButton(String text,boolean selected){  super(text,null,selected);}  }
class C{  public static ExprBoolean toExprBoolean(Expression left,Expression right,int operation){  return new OPDecision(left,right,operation);}  }
class C{  private Builder(com.linkedin.camus.example.records.DummyLog other){  super(com.linkedin.camus.example.records.DummyLog.SCHEMA$);  if (isValidValue(fields()[0],other.id)) {    this.id=(java.lang.Long)data().deepCopy(fields()[0].schema(),other.id);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.logTime)) {    this.logTime=(java.lang.Long)data().deepCopy(fields()[1].schema(),other.logTime);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.muchoStuff)) {    this.muchoStuff=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[2].schema(),other.muchoStuff);    fieldSetFlags()[2]=true;  }}  }
class C{  private void initFile(File local){  if (!local.exists()) {    return;  }  int counter=0;  if (local.isDirectory()) {    for (    File file : local.listFiles()) {      if (file.getName().toLowerCase().endsWith(".htm") && file.isFile()) {        String mnemo=file.getName().toLowerCase().replace(".htm","");        if (!exists(mnemo)) {          addToCache(file,mnemo);          counter++;        }      }    }  }  try {    System.out.println("+ " + String.valueOf(counter) + "\thelp text(s) from:\t"+ local.getCanonicalPath());  } catch (  IOException ignored) {  }}  }
class C{  public void start(){  removeCallbacks(counter);  post(counter);}  }
class C{  protected void clearEvents(){}  }
class C{  private void update(XmlCursor cursor,ObjArray declarations){  cursor.push();  while (cursor.toNextToken().isAnyAttr()) {    if (cursor.isNamespace()) {      javax.xml.namespace.QName name=cursor.getName();      String prefix=name.getLocalPart();      String uri=name.getNamespaceURI();      declareNamespace(prefix,uri,declarations);    }  }  cursor.pop();  processName(cursor,declarations);  cursor.push();  boolean hasNext=cursor.toFirstAttribute();  while (hasNext) {    processName(cursor,declarations);    hasNext=cursor.toNextAttribute();  }  cursor.pop();}  }
class C{  public Property monthOfYear(){  return new Property(this,MONTH_OF_YEAR);}  }
class C{  public void onRedButtonClick(View v){  if (isSubscribed()) {    centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.redbutton));    update();  } else {    generateSubscribeDialog();  }}  }
class C{  public void writeBinaryCovarionModel(XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix();  writer.writeComment("The Binary covarion model");  writer.writeOpenTag(BinaryCovarionModelParser.COVARION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "bcov")});  if (model.getFrequencyPolicy() == FrequencyPolicyType.EMPIRICAL) {    List<AbstractPartitionData> partitions=options.getDataPartitions(model);    Alignment alignment=((PartitionData)partitions.get(0)).getAlignment();    double[] frequencies=alignment.getStateFrequencies();    writer.writeOpenTag(FrequencyModelParser.FREQUENCIES);    writer.writeTag(ParameterParser.PARAMETER,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "frequencies"),new Attribute.Default<String>(ParameterParser.VALUE,frequencies[0] + " " + frequencies[1])},true);    writer.writeCloseTag(FrequencyModelParser.FREQUENCIES);  } else {    writeFrequencyModelBinary(writer,model,prefix);  }  writeParameter(BinaryCovarionModelParser.HIDDEN_FREQUENCIES,prefix + "hfrequencies",2,0.5,0.0,1.0,writer);  writeParameter(BinaryCovarionModelParser.ALPHA,"bcov.alpha",model,writer);  writeParameter(BinaryCovarionModelParser.SWITCHING_RATE,"bcov.s",model,writer);  writer.writeCloseTag(BinaryCovarionModelParser.COVARION_MODEL);}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0) {    throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE);  } else   curLexState=lexState;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  synchronized void close(){  expire(System.currentTimeMillis());  closed=true;}  }
class C{  public String consumeWord(){  int start=pos;  while (matchesWord())   pos++;  return queue.substring(start,pos);}  }
class C{  public PlaceNameLayerBulkDownloader(PlaceNameLayer layer,Sector sector,double resolution,FileStore fileStore,BulkRetrievalListener listener){  super(layer,sector,resolution,fileStore,listener);  this.layer=layer;}  }
class C{  public void test_addEdges_correctRejection_001(){  final int CAPACITY=5;  TxDag dag=new TxDag(CAPACITY);  Object tx1="tx1";  Object tx2="tx2";  dag.addEdges(tx1,new Object[]{tx2});  try {    dag.addEdges(tx1,new Object[]{tx2});    fail("Expecting exception: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    log.info("Expected exception: " + ex);  }}  }
class C{  public static boolean checkVirtualPoolValidForUnManagedFileSystem(DbClient dbClient,VirtualPool vPool,URI unManagedFileSystemUri){  UnManagedFileSystem unManagedFileSystem=dbClient.queryObject(UnManagedFileSystem.class,unManagedFileSystemUri);  if (unManagedFileSystem != null) {    StringSet vPoolProtocols=vPool.getProtocols();    if (unManagedFileSystem.getHasNFSAcl() && !vPoolProtocols.contains("NFSv4")) {      _logger.warn("UnManaged FileSystem {} has NFS ACLs, But vPool protocol(s) are {}, Hence skipping filesystem.",unManagedFileSystem.getLabel(),vPoolProtocols);      return false;    }  }  return true;}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof DateTimeSyntax && value.equals(((DateTimeSyntax)object).value));}  }
class C{  public boolean isEmpty(){  return selection.isEmpty();}  }
class C{  protected final void finalize(){}  }
class C{  private ArrayList createNodeList(int nCount){  ArrayList nodeList=new ArrayList(nCount);  for (int i=0; i < nCount; i++) {    nodeList.add(createNode(i));  }  return nodeList;}  }
class C{  public StatechartSpecificationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void resetSelectAttributes(){  OMGraphicList list=getList();  if (list != null) {    for (    OMGraphic omg : list) {      selectedDrawingAttributes.setTo(omg);    }    repaint();  }}  }
class C{  public static short toShortValue(char c){  return (short)c;}  }
class C{  static Summary summarize(List<Exception> exceptions){  final Exception exception=popMostCommon(groupByType(exceptions));  if (exception instanceof SecurityException) {    return Summary.PERMISSION;  }  if (exception instanceof RetrofitError) {    final RetrofitError retrofitError=(RetrofitError)exception;    if (retrofitError.getKind().equals(RetrofitError.Kind.HTTP)) {      final Response response=retrofitError.getResponse();      final int status=response == null ? 0 : response.getStatus();      final ApiError apiError=TwitterApiException.readApiError(retrofitError);      final int errorCode=apiError == null ? 0 : apiError.getCode();      if (status == 400 && errorCode == 214) {        return Summary.BAD_REQUEST;      }      if (status == 400 && errorCode == 215) {        return Summary.BAD_AUTHENTICATION;      }      if (status == 401 && errorCode == 135) {        return Summary.TIMESTAMP_OUT_OF_BOUNDS;      }      if (status == 413) {        return Summary.ENTITY_TOO_LARGE;      }      if (status == 429 && errorCode == 88) {        return Summary.RATE_LIMIT;      }      if (status == 500) {        return Summary.INTERNAL_SERVER;      }      if (status == 503) {        return Summary.SERVER_UNAVAILABLE;      }    } else     if (retrofitError.getKind().equals(RetrofitError.Kind.NETWORK)) {      return Summary.NETWORK;    } else     if (retrofitError.getKind().equals(RetrofitError.Kind.CONVERSION)) {      return Summary.PARSING;    }  }  return Summary.UNEXPECTED;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.594 -0500",hash_original_method="B29AC2188DE994EDE68B3EFDD85B41F1",hash_generated_method="C9E4B079ADF87AC96205F417C0149E3E") private String auditTransactions(ConcurrentHashMap transactionsMap,long a_nLeakedTransactionTimer){  String auditReport="  Leaked transactions:\n";  int leakedTransactions=0;  long currentTime=System.currentTimeMillis();  LinkedList transactionsList=new LinkedList(transactionsMap.values());  Iterator it=transactionsList.iterator();  while (it.hasNext()) {    SIPTransaction sipTransaction=(SIPTransaction)it.next();    if (sipTransaction != null) {      if (sipTransaction.auditTag == 0) {        sipTransaction.auditTag=currentTime;      } else {        if (currentTime - sipTransaction.auditTag >= a_nLeakedTransactionTimer) {          leakedTransactions++;          TransactionState transactionState=sipTransaction.getState();          SIPRequest origRequest=sipTransaction.getOriginalRequest();          String origRequestMethod=(origRequest != null ? origRequest.getMethod() : null);          String transactionReport=sipTransaction.getClass().getName() + ", state: " + (transactionState != null ? transactionState.toString() : "null")+ ", OR: "+ (origRequestMethod != null ? origRequestMethod : "null");          auditReport+="    " + transactionReport + "\n";          removeTransaction(sipTransaction);          if (isLoggingEnabled())           stackLogger.logDebug("auditTransactions: leaked " + transactionReport);        }      }    }  }  if (leakedTransactions > 0) {    auditReport+="    Total: " + Integer.toString(leakedTransactions) + " leaked transactions detected and removed.\n";  } else {    auditReport=null;  }  return auditReport;}  }
class C{  PriceModel convertToPriceModel(List<String> priceModelData,Map<ContextKey,ContextValue<?>> context) throws BillingException {  PriceModel priceModel=new PriceModel(UUID.fromString(priceModelData.get(0)));  priceModel.setContext(context);  for (int i=1; i <= priceModelData.size() - 4; i++) {    String localeText=priceModelData.get(i);    String fileType=priceModelData.get(++i);    String fileName=priceModelData.get(++i);    String tag=priceModelData.get(++i);    if (localeText != null && fileType != null && fileName != null && tag != null) {      byte[] priceModelFile=getPriceModelFile(fileName);      if (priceModelFile != null) {        Locale locale=new Locale(localeText);        PriceModelContent content=new PriceModelContent();        content.setContentType(fileType);        content.setTag(tag);        content.setContent(priceModelFile);        content.setFilename(fileName);        priceModel.put(locale,content);      }    }  }  if (priceModel.getLocales().size() > 0) {    return priceModel;  } else {    return null;  }}  }
class C{  public boolean writeFileEntries(IClasspathEntry[] newClasspath,IClasspathEntry[] referencedEntries,IPath newOutputLocation) throws JavaModelException {  if (!this.project.isAccessible())   return false;  Map unknownElements=new HashMap();  IClasspathEntry[][] fileEntries=readFileEntries(unknownElements);  if (fileEntries[0] != JavaProject.INVALID_CLASSPATH && areClasspathsEqual(newClasspath,newOutputLocation,fileEntries[0]) && (referencedEntries == null || areClasspathsEqual(referencedEntries,fileEntries[1]))) {    return false;  }  try {    setSharedProperty(JavaProject.CLASSPATH_FILENAME,encodeClasspath(newClasspath,referencedEntries,newOutputLocation,true,unknownElements));    return true;  } catch (  CoreException e) {    throw new JavaModelException(e);  }}  }
class C{  public IPRangeNode findFast(InetAddress iaddr){  IPRangeNode needle, parent;  needle=new IPRangeNode(iaddr,iaddr);  int pos=Collections.binarySearch(list,needle,IPRangeNode.comparerRange);  if (pos > -1) {    parent=list.get(pos);    return parent.findFast(iaddr);  }  int tests=2;  pos=Math.abs(pos);  pos=Math.max(0,pos - tests);  int max=Math.min(pos + tests,list.size());  for (; pos < max; pos++) {    if (list.get(pos).isInRange(iaddr)) {      parent=list.get(pos);      return parent.findFast(iaddr);    }  }  return null;}  }
class C{  @Override public void createSnapshot(Volume reqVolume,List<URI> snapshotURIs,String snapshotType,Boolean createInactive,Boolean readOnly,String taskId){  boolean vplex=RPHelper.isVPlexVolume(reqVolume,_dbClient);  ProtectionSystem protectionSystem=_dbClient.queryObject(ProtectionSystem.class,reqVolume.getProtectionController());  URI storageControllerURI=null;  if (vplex) {    Volume backendVolume=vplexBlockServiceApiImpl.getVPLEXSnapshotSourceVolume(reqVolume);    storageControllerURI=backendVolume.getStorageController();  } else {    storageControllerURI=reqVolume.getStorageController();  }  if (reqVolume.getProtectionController() != null && (snapshotType.equalsIgnoreCase(BlockSnapshot.TechnologyType.RP.toString()) || reqVolume.getPersonality().equals(Volume.PersonalityTypes.TARGET.toString()))) {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageControllerURI);    RPController controller=getController(RPController.class,protectionSystem.getSystemType());    controller.createSnapshot(protectionSystem.getId(),storageSystem.getId(),snapshotURIs,createInactive,readOnly,taskId);  } else {    if (vplex) {      super.createSnapshot(vplexBlockServiceApiImpl.getVPLEXSnapshotSourceVolume(reqVolume),snapshotURIs,snapshotType,createInactive,readOnly,taskId);    } else {      super.createSnapshot(reqVolume,snapshotURIs,snapshotType,createInactive,readOnly,taskId);    }  }}  }
class C{  AccessTimeObjectHolder<V> peekHolder(K key){  kvUtil.verifyKeyNotNull(key);  return gatedHolder(objects.get(key));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  int[] parents=new int[z.size()];  for (int j=0; j < parents.length; j++) {    parents[j]=covMatrix.getVariables().indexOf(z.get(j));  }  int i=covMatrix.getVariables().indexOf(x);  TetradMatrix matrix2D=covMatrix.getMatrix();  double variance=matrix2D.get(i,i);  if (parents.length > 0) {    TetradMatrix Czz=matrix2D.getSelection(parents,parents);    TetradMatrix inverse;    try {      inverse=Czz.inverse();    } catch (    Exception e) {      return true;    }    TetradVector Cyz=matrix2D.getColumn(i);    Cyz=Cyz.viewSelection(parents);    TetradVector b=inverse.times(Cyz);    variance-=Cyz.dotProduct(b);  }  return variance < 1e-20;}  }
class C{  public JTicker(TickerModel model){  this(model,new DefaultTickerRenderer());}  }
class C{  public void testComplexNamespacePublicDependency() throws Exception {  FileDescriptorProto fooProto=FileDescriptorProto.newBuilder().setName("bar.proto").setPackage("a.b.c.d.bar.shared").addEnumType(EnumDescriptorProto.newBuilder().setName("MyEnum").addValue(EnumValueDescriptorProto.newBuilder().setName("BLAH").setNumber(1))).build();  FileDescriptorProto barProto=FileDescriptorProto.newBuilder().setName("foo.proto").addDependency("bar.proto").setPackage("a.b.c.d.foo.shared").addMessageType(DescriptorProto.newBuilder().setName("MyMessage").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_REPEATED).setTypeName("bar.shared.MyEnum").setName("MyField").setNumber(1))).build();  FileDescriptor fooFile=Descriptors.FileDescriptor.buildFrom(fooProto,new FileDescriptor[0]);  FileDescriptor barFile=Descriptors.FileDescriptor.buildFrom(barProto,new FileDescriptor[]{fooFile});  assertNotNull(barFile);  List<Descriptor> msglist=barFile.getMessageTypes();  assertNotNull(msglist);  assertTrue(msglist.size() == 1);  Descriptor desc=msglist.get(0);  if (desc.getName().equals("MyMessage")) {    assertNotNull(desc.getFields());    List<FieldDescriptor> fieldlist=desc.getFields();    assertNotNull(fieldlist);    assertTrue(fieldlist.size() == 1);    FieldDescriptor field=fieldlist.get(0);    assertTrue(field.getType() == FieldDescriptor.Type.ENUM);    assertTrue(field.getEnumType().getName().equals("MyEnum"));    assertTrue(field.getEnumType().getFile().getName().equals("bar.proto"));    assertTrue(field.getEnumType().getFile().getPackage().equals("a.b.c.d.bar.shared"));  }}  }
class C{  public void check(final int api){}  }
class C{  private void initialise(){  try {    maskByteRange=new int[noOfCol][];    maxKeys=new byte[noOfCol][];    for (int i=0; i < noOfCol; i++) {      maskByteRange[i]=getMaskByteRange(i);      long[] maxKey=new long[noOfCol];      maxKey[i]=Long.MAX_VALUE;      maxKeys[i]=keyGenerator.generateKey(maxKey);    }  } catch (  KeyGenException e) {    LOGGER.error(e,"Key generation failed while evaulating column group min max");  }}  }
class C{  public void pushEnclosingMethod(MethodNode methodNode){  enclosingMethods.addFirst(methodNode);}  }
class C{  private void initializeGameGrid(){  gameGrid.clear();  locations.clear();  for (  Integer x : gridOperator.getTraverseX()) {    for (    Integer y : gridOperator.getTraverseY()) {      Location thisloc=new Location(x,y);      locations.add(thisloc);      gameGrid.put(thisloc,null);    }  }}  }
class C{  public String onRead(ProjectState project,String value){  return value;}  }
class C{  public String analyzer(){  return analyzer.name();}  }
class C{  private LirsEntry queueFront(){  LirsEntry front=header.nextInQueue;  return (front == header) ? null : front;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.861 -0500",hash_original_method="5446B591236758FE1022AC56CCF4E7CA",hash_generated_method="9C4D4A982224BB1AC65996BF330FC39F") public ActivityChooserView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public RepublishResponse Republish(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,UnsignedInteger RetransmitSequenceNumber) throws ServiceFaultException, ServiceResultException {  RepublishRequest req=new RepublishRequest(RequestHeader,SubscriptionId,RetransmitSequenceNumber);  return (RepublishResponse)channel.serviceRequest(req);}  }
class C{  public MapStream<K,V> filterKey(Predicate<? super K> predicate){  return filter(null);}  }
class C{  public synchronized HttpConnection createConnection(final HostConfiguration hostConfiguration){  final HostConnectionPool hostPool=getHostPool(hostConfiguration,true);  if (LOG.isDebugEnabled()) {    LOG.debug("Allocating new connection, hostConfig=" + hostConfiguration);  }  final HttpConnectionWithReference connection=new HttpConnectionWithReference(hostConfiguration);  connection.getParams().setDefaults(params);  connection.setHttpConnectionManager(MultiThreadedHttpConnectionManager.this);  numConnections++;  hostPool.numConnections++;  storeReferenceToConnection(connection,hostConfiguration,this);  return connection;}  }
class C{  public LabelNode rangeLabel(final LabelNode l){  return rangeTable.get(l);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public void clipRect(int x,int y,int width,int height){  g.clipRect(x,y,width,height);}  }
class C{  public void readLine(final String line){  if (line != null) {    String[] tabs=line.split(",");    if (tabs[4].equals("L")) {      tabs[4]="H";    }    if (tabs[7].equals("L")) {      tabs[7]="H";    }    String tripId=tabs[0] + "-" + tabs[1]+ "-"+ tabs[2];    String mode=tabs[16];    if (!this.tmpTripId.equals(tripId) && mode.equals("0")) {      String personId=tabs[0] + "-" + tabs[1]+ "-"+ tabs[17];      String hhldId=tabs[0];      double endTime;      try {        if (this.tmpPersonId.equals(personId)) {          Plan pl=this.pop.getPersons().get(Id.create(personId,Person.class)).getSelectedPlan();          endTime=convertTime(tabs[3]);          double dur=endTime - this.tmpEndTime;          Leg leg=PopulationUtils.createAndAddLeg(((Plan)pl),(String)TransportMode.car);          leg.setDepartureTime(convertTime(this.tmpTabs[3]));          Coord tmpCoord;          if ((tabs[4].equals("H")) && this.tmpGotH) {            tmpCoord=this.tmpHome;          } else           if ((tabs[4].equals("H")) && !this.tmpGotH) {            tmpCoord=getRandomCoordInZone(Id.create(tabs[6],Zone.class));            this.tmpHome=tmpCoord;            this.tmpGotH=true;          } else {            tmpCoord=getRandomCoordInZone(Id.create(tabs[6],Zone.class));          }          this.tmpType=tabs[7];          final Coord coord=tmpCoord;          Activity act=PopulationUtils.createAndAddActivityFromCoord(((Plan)pl),(String)tabs[4],coord);          act.setEndTime(convertTime(tabs[3]));          act.setMaximumDuration(dur);        } else {          if (!this.pop.getPersons().isEmpty()) {            Person p=this.pop.getPersons().get(Id.create(this.tmpPersonId,Person.class));            Plan tmpPl=p.getSelectedPlan();            Leg leg=PopulationUtils.createAndAddLeg(((Plan)tmpPl),(String)TransportMode.car);            leg.setDepartureTime(convertTime(this.tmpTabs[3]));            Coord tmpCoord2;            if ((this.tmpTabs[7].equals("H")) && this.tmpGotH) {              tmpCoord2=this.tmpHome;            } else             if ((this.tmpTabs[7].equals("H")) && !this.tmpGotH) {              tmpCoord2=getRandomCoordInZone(Id.create(this.tmpTabs[9],Zone.class));              this.tmpHome=tmpCoord2;              this.tmpGotH=true;            } else {              tmpCoord2=getRandomCoordInZone(Id.create(this.tmpTabs[9],Zone.class));              this.count2+=1;              System.out.println(this.tmpPersonId);            }            final Coord coord=tmpCoord2;            Activity lastAct=PopulationUtils.createAndAddActivityFromCoord(((Plan)tmpPl),(String)this.tmpTabs[7],coord);          }          Person p=PopulationUtils.getFactory().createPerson(Id.create(personId,Person.class));          Plan pl=PopulationUtils.createPlan(p);          endTime=convertTime(tabs[3]);          this.tmpType=tabs[4];          Coord tmpCoord3;          if (!this.tmpHhldId.equals(hhldId) && this.tmpType.equals("H")) {            this.tmpHome=getRandomCoordInZone(Id.create(tabs[6],Zone.class));            tmpCoord3=this.tmpHome;            this.tmpGotH=true;          } else           if (this.tmpHhldId.equals(hhldId) && this.tmpType.equals("H")) {            tmpCoord3=this.tmpHome;            this.tmpGotH=true;          } else           if (this.tmpHhldId.equals(hhldId) && !this.tmpType.equals("H")) {            tmpCoord3=getRandomCoordInZone(Id.create(tabs[6],Zone.class));            this.tmpGotH=true;            this.count1+=1;            System.out.println(personId);          } else {            tmpCoord3=getRandomCoordInZone(Id.create(tabs[6],Zone.class));            this.tmpGotH=false;            this.count1+=1;            System.out.println(personId);          }          final Coord coord=tmpCoord3;          Activity homeAct=PopulationUtils.createAndAddActivityFromCoord(pl,(String)tabs[4],coord);          homeAct.setEndTime(convertTime(tabs[3]));          p.addPlan(pl);          this.pop.addPerson(p);        }        this.tmpPersonId=personId;        this.tmpHhldId=hhldId;        this.tmpEndTime=endTime;        this.tmpTabs=tabs;        this.tmpTripId=tripId;        if (this.tmpTabs[4].equals("L")) {          this.tmpTabs[4]="H";        }        if (this.tmpTabs[7].equals("L")) {          this.tmpTabs[7]="H";        }      } catch (      Exception e) {        e.printStackTrace();      }    }  } else {    Person p=this.pop.getPersons().get(Id.create(this.tmpPersonId,Person.class));    Plan tmpPl=p.getSelectedPlan();    Leg leg=PopulationUtils.createAndAddLeg(((Plan)tmpPl),(String)TransportMode.car);    leg.setDepartureTime(convertTime(this.tmpTabs[3]));    Coord tmpCoord2;    if ((this.tmpTabs[7].equals("H")) && this.tmpGotH) {      tmpCoord2=this.tmpHome;    } else     if ((this.tmpTabs[7].equals("H")) && !this.tmpGotH) {      tmpCoord2=getRandomCoordInZone(Id.create(this.tmpTabs[9],Zone.class));      this.tmpHome=tmpCoord2;      this.tmpGotH=true;    } else {      tmpCoord2=getRandomCoordInZone(Id.create(this.tmpTabs[9],Zone.class));      this.count2+=1;      System.out.println(this.tmpPersonId);    }    final Coord coord=tmpCoord2;    Activity lastAct=PopulationUtils.createAndAddActivityFromCoord(((Plan)tmpPl),(String)this.tmpTabs[7],coord);    System.out.println("# of chains that do not start at home: " + this.count1);    System.out.println("# of chains that do not end at home: " + this.count2);  }}  }
class C{  public PointMutation(double probability){  super();  this.probability=probability;}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();switch (c) {case 0:case '\n':case '\r':      throw syntaxError("Unterminated string");case '\\':    c=next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(next(4),16));break;case 'x':sb.append((char)Integer.parseInt(next(2),16));break;default :sb.append(c);}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  public void incOperationCount(){  this.operationCount++;}  }
class C{  default void addInterface(char[] buffer,int offset,int length){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.PRESENCE__MANDATORY:    setMandatory(MANDATORY_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public String toString(){  String s=super.toString() + "BasicConstraints:[\n";  s+=((ca) ? ("  CA:true") : ("  CA:false")) + "\n";  if (pathLen >= 0) {    s+="  PathLen:" + pathLen + "\n";  } else {    s+="  PathLen: undefined\n";  }  return (s + "]\n");}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return typeChecks;}  }
class C{  public String readProperty() throws IOException {  StringBuffer buffer=new StringBuffer();  try {    while (true) {      String line=readLine().trim();      if ((line.length() != 0) && (line.charAt(0) != '#')) {        if (line.endsWith("\\")) {          line=line.substring(0,line.length() - 1);          buffer.append(line);        } else {          buffer.append(line);          break;        }      }    }  } catch (  NullPointerException e) {    return null;  }  return buffer.toString();}  }
class C{  public GutterIconInfo addLineTrackingIcon(int line,Icon icon) throws BadLocationException {  int offs=textArea.getLineStartOffset(line);  return addOffsetTrackingIcon(offs,icon);}  }
class C{  public void start() throws IgniteCheckedException {  for (  GridComponent comp : this)   comp.start();}  }
class C{  public void update(Instance ins) throws Exception {  if (m_Instances == null)   throw new Exception("No instances supplied yet. Cannot update without" + "supplying a set of instances first.");  m_DistanceFunction.update(ins);}  }
class C{  public OverlayOp(Geometry g0,Geometry g1){  super(g0,g1);  graph=new PlanarGraph(new OverlayNodeFactory());  geomFact=g0.getFactory();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEPopupMenuSeparatorUI();}  }
class C{  public static byte[] canonicalize(String algorithmUri,Node node) throws Exception {  return Canonicalizer.getInstance(algorithmUri).canonicalizeSubtree(node);}  }
class C{  public static BufferedImage cropImage(BufferedImage image,int cropWidth,int cropHeight){  BufferedImage retImg=null;  int width=0;  int height=0;  width=image.getWidth();  height=image.getHeight();  retImg=new BufferedImage(cropWidth,cropHeight,BufferedImage.TYPE_INT_RGB);  for (int i=0; i < cropWidth; i++) {    for (int j=0; j < cropHeight; j++) {      if (i < width && j < height) {        retImg.setRGB(i,j,image.getRGB(i,j));      } else {        retImg.setRGB(i,j,0);      }    }  }  return retImg;}  }
class C{  public void addColumn(DefaultTableColumn column){  column.setModelIndex(columnModel.getColumnCount());  columnModel.addColumn(column);}  }
class C{  private void closeInputStream(InputStream in){  try {    in.close();  } catch (  Exception e) {  }}  }
class C{  public NokiaOperatorLogo(byte[] bitmapData,int mcc,int mnc,boolean discardHeaders){  super(SmsPort.NOKIA_OPERATOR_LOGO,SmsPort.ZERO);  discardNokiaHeaders_=discardHeaders;  bitmapData_=bitmapData;  mcc_=mcc;  mnc_=mnc;}  }
class C{  public static <L extends Lock>void lockInterruptiblyAll(L... locks) throws InterruptedException {  Deque<L> stack=new LinkedList<>();  try {    for (    L lock : locks) {      lock.lockInterruptibly();      stack.push(lock);    }  } catch (  InterruptedException|RuntimeException e) {    unlockAll(stack);    throw e;  }}  }
class C{  public void undiscoverable(BluetoothAdapter adapter){  int mask=BluetoothReceiver.SCAN_MODE_CONNECTABLE_FLAG;  if (!adapter.isEnabled()) {    fail("undiscoverable() bluetooth not enabled");  }  int scanMode=adapter.getScanMode();  if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  assertEquals(BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE,scanMode);  long start=System.currentTimeMillis();  assertTrue(adapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE));  while (System.currentTimeMillis() - start < DISCOVERABLE_UNDISCOVERABLE_TIMEOUT) {    scanMode=adapter.getScanMode();    if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE && (receiver.getFiredFlags() & mask) == mask) {      writeOutput(String.format("undiscoverable() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("undiscoverable() timeout: scanMode=%d (expected %d), flags=0x%x " + "(expected 0x%x)",scanMode,BluetoothAdapter.SCAN_MODE_CONNECTABLE,firedFlags,mask));}  }
class C{  public static @CheckForNull JavaClassAndMethod findMethod(JavaClass javaClass,String methodName,String methodSig){  return findMethod(javaClass,methodName,methodSig,ANY_METHOD);}  }
class C{  public Approximator(ApproximatorType type,double tolerance){  setup(type,tolerance);}  }
class C{  public static Object extractTypeChecked(List<Object> args,int i,Class clazz,Function<List<Object>,Object> extractFunc){  if (args.size() < i + 1) {    return null;  } else   if (clazz.isInstance(args.get(i))) {    return extractFunc.apply(args);  } else {    return null;  }}  }
class C{  public static TempBuffer createSmall(){  return new TempBuffer(TempBuffers.createSmall());}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_setting)   return;  String cmd=e.getActionCommand();  log.config(cmd);  this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (e.getSource() == comboZoom)   cmd_zoom(); else   if (e.getSource() == comboReport)   cmd_report(); else   if (e.getSource() == comboDrill)   cmd_drill(); else   if (e.getSource() == summary) {    m_reportEngine.setSummary(summary.isSelected());    cmd_report();  } else   if (cmd.equals("First"))   setPage(1); else   if (cmd.equals("PreviousPage") || cmd.equals("Previous"))   setPage(m_pageNo - 1); else   if (cmd.equals("NextPage") || cmd.equals("Next"))   setPage(m_pageNo + 1); else   if (cmd.equals("Last"))   setPage(m_pageMax); else   if (cmd.equals("Find"))   cmd_find(); else   if (cmd.equals("Export"))   cmd_export(); else   if (cmd.equals("Print"))   cmd_print(); else   if (cmd.equals("SendMail"))   cmd_sendMail(); else   if (cmd.equals("Archive"))   cmd_archive(); else   if (cmd.equals("PrintCustomize"))   cmd_customize(); else   if (cmd.equals("PageSetup"))   cmd_pageSetup(); else   if (cmd.equals("Translate"))   cmd_translate(); else   if (cmd.equals("End"))   dispose(); else   if (e.getSource() == m_ddM)   cmd_window(m_ddQ); else   if (e.getSource() == m_daM)   cmd_window(m_daQ); else   if (!AEnv.actionPerformed(e.getActionCommand(),m_WindowNo,this))   log.log(Level.SEVERE,"unknown action=" + e.getActionCommand());  this.setCursor(Cursor.getDefaultCursor());}  }
class C{  public boolean applyOptions() throws IOException {  URLHandlerSettings.AUDIO_PLAYER.setValue(_playerField.getText());  return false;}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener l){  m_Support.removePropertyChangeListener(l);}  }
class C{  public GemFireException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected GeoPoint[] findCrossings(final PlanetModel planetModel,final Plane q,final Membership[] bounds,final Membership[] moreBounds){  final double lineVectorX=y * q.z - z * q.y;  final double lineVectorY=z * q.x - x * q.z;  final double lineVectorZ=x * q.y - y * q.x;  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {    return NO_POINTS;  }  double x0;  double y0;  double z0;  final double denomYZ=this.y * q.z - this.z * q.y;  final double denomXZ=this.x * q.z - this.z * q.x;  final double denomXY=this.x * q.y - this.y * q.x;  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {      return NO_POINTS;    }    final double denom=1.0 / denomYZ;    x0=0.0;    y0=(-this.D * q.z - this.z * -q.D) * denom;    z0=(this.y * -q.D + this.D * q.y) * denom;  } else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {      return NO_POINTS;    }    final double denom=1.0 / denomXZ;    x0=(-this.D * q.z - this.z * -q.D) * denom;    y0=0.0;    z0=(this.x * -q.D + this.D * q.x) * denom;  } else {    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {      return NO_POINTS;    }    final double denom=1.0 / denomXY;    x0=(-this.D * q.y - this.y * -q.D) * denom;    y0=(this.x * -q.D + this.D * q.x) * denom;    z0=0.0;  }  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;  final double BsquaredMinus=B * B - 4.0 * A * C;  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {    return NO_POINTS;  } else   if (BsquaredMinus > 0.0) {    final double inverse2A=1.0 / (2.0 * A);    final double sqrtTerm=Math.sqrt(BsquaredMinus);    final double t1=(-B + sqrtTerm) * inverse2A;    final double t2=(-B - sqrtTerm) * inverse2A;    final double point1X=lineVectorX * t1 + x0;    final double point1Y=lineVectorY * t1 + y0;    final double point1Z=lineVectorZ * t1 + z0;    final double point2X=lineVectorX * t2 + x0;    final double point2Y=lineVectorY * t2 + y0;    final double point2Z=lineVectorZ * t2 + z0;    boolean point1Valid=true;    boolean point2Valid=true;    for (    final Membership bound : bounds) {      if (!bound.isWithin(point1X,point1Y,point1Z)) {        point1Valid=false;        break;      }    }    if (point1Valid) {      for (      final Membership bound : moreBounds) {        if (!bound.isWithin(point1X,point1Y,point1Z)) {          point1Valid=false;          break;        }      }    }    for (    final Membership bound : bounds) {      if (!bound.isWithin(point2X,point2Y,point2Z)) {        point2Valid=false;        break;      }    }    if (point2Valid) {      for (      final Membership bound : moreBounds) {        if (!bound.isWithin(point2X,point2Y,point2Z)) {          point2Valid=false;          break;        }      }    }    if (point1Valid && point2Valid) {      return new GeoPoint[]{new GeoPoint(point1X,point1Y,point1Z),new GeoPoint(point2X,point2Y,point2Z)};    }    if (point1Valid) {      return new GeoPoint[]{new GeoPoint(point1X,point1Y,point1Z)};    }    if (point2Valid) {      return new GeoPoint[]{new GeoPoint(point2X,point2Y,point2Z)};    }    return NO_POINTS;  } else {    return NO_POINTS;  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public SIPResponse createResponse(int statusCode,String reasonPhrase){  SIPResponse newResponse;  Iterator headerIterator;  SIPHeader nextHeader;  newResponse=new SIPResponse();  try {    newResponse.setStatusCode(statusCode);  } catch (  ParseException ex) {    throw new IllegalArgumentException("Bad code " + statusCode);  }  if (reasonPhrase != null)   newResponse.setReasonPhrase(reasonPhrase); else   newResponse.setReasonPhrase(SIPResponse.getReasonPhrase(statusCode));  headerIterator=getHeaders();  while (headerIterator.hasNext()) {    nextHeader=(SIPHeader)headerIterator.next();    if (nextHeader instanceof From || nextHeader instanceof To || nextHeader instanceof ViaList|| nextHeader instanceof CallID|| (nextHeader instanceof RecordRouteList && mustCopyRR(statusCode))|| nextHeader instanceof CSeq|| nextHeader instanceof TimeStamp) {      try {        newResponse.attachHeader((SIPHeader)nextHeader.clone(),false);      } catch (      SIPDuplicateHeaderException e) {        e.printStackTrace();      }    }  }  if (MessageFactoryImpl.getDefaultServerHeader() != null) {    newResponse.setHeader(MessageFactoryImpl.getDefaultServerHeader());  }  if (newResponse.getStatusCode() == 100) {    newResponse.getTo().removeParameter("tag");  }  ServerHeader server=MessageFactoryImpl.getDefaultServerHeader();  if (server != null) {    newResponse.setHeader(server);  }  return newResponse;}  }
class C{  public void responseReceived(BOSHMessageEvent event){  AbstractBody body=event.getBody();  if (body != null) {    try {      if (connection.sessionID == null) {        connection.sessionID=body.getAttribute(BodyQName.create(BOSHConnection.BOSH_URI,"sid"));      }      if (connection.authID == null) {        connection.authID=body.getAttribute(BodyQName.create(BOSHConnection.BOSH_URI,"authid"));      }      final XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();      parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);      parser.setInput(new StringReader(body.toXML()));      int eventType=parser.getEventType();      do {        eventType=parser.next();        if (eventType == XmlPullParser.START_TAG) {          if (parser.getName().equals("body")) {          } else           if (parser.getName().equals("message")) {            connection.processPacket(PacketParserUtils.parseMessage(parser));          } else           if (parser.getName().equals("iq")) {            connection.processPacket(PacketParserUtils.parseIQ(parser,connection));          } else           if (parser.getName().equals("presence")) {            connection.processPacket(PacketParserUtils.parsePresence(parser));          } else           if (parser.getName().equals("challenge")) {            final String challengeData=parser.nextText();            connection.getSASLAuthentication().challengeReceived(challengeData);            connection.processPacket(new Challenge(challengeData));          } else           if (parser.getName().equals("success")) {            connection.send(ComposableBody.builder().setNamespaceDefinition("xmpp",BOSHConnection.XMPP_BOSH_NS).setAttribute(BodyQName.createWithPrefix(BOSHConnection.XMPP_BOSH_NS,"restart","xmpp"),"true").setAttribute(BodyQName.create(BOSHConnection.BOSH_URI,"to"),connection.getServiceName()).build());            connection.getSASLAuthentication().authenticated();            connection.processPacket(new Success(parser.nextText()));          } else           if (parser.getName().equals("features")) {            parseFeatures(parser);          } else           if (parser.getName().equals("failure")) {            if ("urn:ietf:params:xml:ns:xmpp-sasl".equals(parser.getNamespace(null))) {              final Failure failure=PacketParserUtils.parseSASLFailure(parser);              connection.getSASLAuthentication().authenticationFailed();              connection.processPacket(failure);            }          } else           if (parser.getName().equals("error")) {            throw new XMPPException(PacketParserUtils.parseStreamError(parser));          }        }      } while (eventType != XmlPullParser.END_DOCUMENT);    } catch (    Exception e) {      if (connection.isConnected()) {        connection.notifyConnectionError(e);      }    }  }}  }
class C{  @OnError public void onError(Session session,Throwable t){  callInternal("onError",session,t.getMessage());  logger.error(t.getMessage(),t);}  }
class C{  public void removeGeometry(final MasonGeometry g){  geometries.remove(g);  needToRebuildIndex=true;}  }
class C{  public byte[] encryptSeq(byte[] baseKey,int usage,byte[] checksum,byte[] plaintext,int start,int len) throws GeneralSecurityException, KrbCryptoException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  byte[] salt=new byte[4];  byte[] kSeq=getHmac(baseKey,salt);  kSeq=getHmac(kSeq,checksum);  Cipher cipher=Cipher.getInstance("ARCFOUR");  SecretKeySpec secretKey=new SecretKeySpec(kSeq,"ARCFOUR");  cipher.init(Cipher.ENCRYPT_MODE,secretKey);  byte[] output=cipher.doFinal(plaintext,start,len);  return output;}  }
class C{  private static boolean isIndexType(String typeSignature){  return Signature.SIG_INT.equals(typeSignature) || Signature.SIG_LONG.equals(typeSignature) || Signature.SIG_SHORT.equals(typeSignature)|| Signature.SIG_BYTE.equals(typeSignature)|| Signature.SIG_CHAR.equals(typeSignature);}  }
class C{  public void addCategories(Categories categories){  addProperty(categories);}  }
class C{  protected void putAll(List<LabelLayout> value,String... keys){  for (  String sidc : keys) {    this.layouts.put(sidc,value);  }}  }
class C{  public static Date clearTime(final Date self){  Calendar calendar=Calendar.getInstance();  calendar.setTime(self);  clearTimeCommon(calendar);  self.setTime(calendar.getTime().getTime());  return self;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public ServiceChangedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static String removeStyleFromComment(final String comment){  if (comment == null) {    throw new IllegalArgumentException("comment must not be null!");  }  String newComment=comment.replaceAll(ANNOTATION_HTML_FORMATTING_START_REGEX,"");  newComment=newComment.replaceAll(ANNOTATION_HTML_FORMATTING_END_REGEX,"");  newComment=newComment.replaceAll(ANNOTATION_HTML_FORMATTING_MISC_DIV_START,"");  newComment=newComment.replaceAll(ANNOTATION_HTML_FORMATTING_MISC_DIV_END,"");  newComment=newComment.replaceAll(ANNOTATION_HTML_NEWLINE_SIGNAL,"<br/>");  newComment=newComment.replaceAll("\n","");  newComment=newComment.replaceAll("\\s+"," ");  newComment=newComment.trim();  return newComment;}  }
class C{  public static void updateMediaDBInBackground(Context context,String why,String[] oldPathNames,String[] newPathNames){  if (isGuiThread()) {    MediaScanner scanTask=new MediaScanner(context.getApplicationContext(),why + " from completed new AsycTask");    scanTask.execute(oldPathNames,newPathNames);  } else {    int modifyCount=MediaScanner.updateMediaDatabase_Android42(context.getApplicationContext(),oldPathNames,newPathNames);    if (modifyCount > 0) {      MediaScanner.notifyChanges(context,why + " within current non-gui-task");    }  }}  }
class C{  public void addMarker(AxisEnum axis,double position,Paint paint,int width){  addMarker(axis,position,paint,width,new float[]{1});}  }
class C{  public void unSubscribeTriggers() throws MonitorServiceException, TriggerNotSubscribedException {  unsubscribeTrigger(appId);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int handlerPc(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.handlerPc;}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  public TemplateModelIterator iterator() throws TemplateModelException {synchronized (this) {    if (accessed) {      throw new TemplateModelException("This collection is stateful and can not be iterated over the" + " second time.");    }    accessed=true;  }  return this;}  }
class C{  @SuppressWarnings("fallthrough") private void nodeSetMinusCommentNodes(Node node,List<Node> nodeSet,Node prevSibling){switch (node.getNodeType()) {case Node.ELEMENT_NODE:    nodeSet.add(node);  NamedNodeMap attrs=node.getAttributes();if (attrs != null) {  for (int i=0, len=attrs.getLength(); i < len; i++) {    nodeSet.add(attrs.item(i));  }}Node pSibling=null;for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {nodeSetMinusCommentNodes(child,nodeSet,pSibling);pSibling=child;}break;case Node.DOCUMENT_NODE:pSibling=null;for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {nodeSetMinusCommentNodes(child,nodeSet,pSibling);pSibling=child;}break;case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:if (prevSibling != null && (prevSibling.getNodeType() == Node.TEXT_NODE || prevSibling.getNodeType() == Node.CDATA_SECTION_NODE)) {return;}nodeSet.add(node);break;case Node.PROCESSING_INSTRUCTION_NODE:nodeSet.add(node);break;case Node.COMMENT_NODE:if (withComments) {nodeSet.add(node);}}}  }
class C{  @Override public synchronized void doDeleteChild(BaseSolrResource endpoint,String childId){  String key=getIgnoreCase() ? childId.toLowerCase(Locale.ROOT) : childId;  if (!managedWords.contains(key))   throw new SolrException(ErrorCode.NOT_FOUND,String.format(Locale.ROOT,"%s not found in %s",childId,getResourceId()));  managedWords.remove(key);  storeManagedData(managedWords);  log.info("Removed word: {}",key);}  }
class C{  public boolean handle(IGame.Phase phase,Vector<Report> returnedReports){  if (!cares(phase)) {    return true;  }  Vector<Report> vPhaseReport=new Vector<Report>();  boolean heatAdded=false;  int numAttacks=1;  if (game.getOptions().booleanOption("uac_tworolls") && ((wtype.getAmmoType() == AmmoType.T_AC_ULTRA) || (wtype.getAmmoType() == AmmoType.T_AC_ULTRA_THB)) && !weapon.curMode().equals("Single")) {    numAttacks=2;  }  Entity entityTarget=(target.getTargetType() == Targetable.TYPE_ENTITY) ? (Entity)target : null;  final boolean targetInBuilding=Compute.isInBuilding(game,entityTarget);  final boolean bldgDamagedOnMiss=targetInBuilding && !(target instanceof Infantry) && ae.getPosition().distance(target.getPosition()) <= 1;  if (entityTarget != null) {    ae.setLastTarget(entityTarget.getId());    ae.setLastTargetDisplayName(entityTarget.getDisplayName());  }  Building bldg=game.getBoard().getBuildingAt(target.getPosition());  String number=nweapons > 1 ? " (" + nweapons + ")" : "";  for (int i=numAttacks; i > 0; i--) {    Report r=new Report(3115);    r.indent();    r.newlines=0;    r.subject=subjectId;    r.add(wtype.getName() + number);    if (entityTarget != null) {      if ((wtype.getAmmoType() != AmmoType.T_NA) && (weapon.getLinked() != null) && (weapon.getLinked().getType() instanceof AmmoType)) {        AmmoType atype=(AmmoType)weapon.getLinked().getType();        if (atype.getMunitionType() != AmmoType.M_STANDARD) {          r.messageId=3116;          r.add(atype.getSubMunitionName());        }      }      r.addDesc(entityTarget);    } else {      r.messageId=3120;      r.add(target.getDisplayName(),true);    }    vPhaseReport.addElement(r);    if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {      r=new Report(3135);      r.subject=subjectId;      r.add(toHit.getDesc());      vPhaseReport.addElement(r);      returnedReports.addAll(vPhaseReport);      return false;    } else     if (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL) {      r=new Report(3140);      r.newlines=0;      r.subject=subjectId;      r.add(toHit.getDesc());      vPhaseReport.addElement(r);    } else     if (toHit.getValue() == TargetRoll.AUTOMATIC_SUCCESS) {      r=new Report(3145);      r.newlines=0;      r.subject=subjectId;      r.add(toHit.getDesc());      vPhaseReport.addElement(r);    } else {      r=new Report(3150);      r.newlines=0;      r.subject=subjectId;      r.add(toHit.getValue());      vPhaseReport.addElement(r);    }    r=new Report(3155);    r.newlines=0;    r.subject=subjectId;    r.add(roll);    vPhaseReport.addElement(r);    bMissed=roll < toHit.getValue();    if (game.getOptions().booleanOption("tacops_glancing_blows")) {      if (roll == toHit.getValue()) {        bGlancing=true;        r=new Report(3186);        r.subject=ae.getId();        r.newlines=0;        vPhaseReport.addElement(r);      } else {        bGlancing=false;      }    } else {      bGlancing=false;    }    toHit.setMoS(roll - Math.max(2,toHit.getValue()));    bDirect=game.getOptions().booleanOption("tacops_direct_blow") && ((toHit.getMoS() / 3) >= 1) && (entityTarget != null);    if (bDirect) {      r=new Report(3189);      r.subject=ae.getId();      r.newlines=0;      vPhaseReport.addElement(r);    }    Vector<Report> dmgPerHitReport=new Vector<>();    nDamPerHit=calcDamagePerHit();    if (!heatAdded) {      addHeat();      heatAdded=true;    }    attackValue=calcAttackValue();    boolean missReported=doChecks(vPhaseReport);    if (missReported) {      bMissed=true;    }    if (specialResolution(vPhaseReport,entityTarget) && (i < 2)) {      returnedReports.addAll(vPhaseReport);      return false;    }    if (bMissed && !missReported) {      if (game.getOptions().booleanOption("uac_tworolls") && ((wtype.getAmmoType() == AmmoType.T_AC_ULTRA) || (wtype.getAmmoType() == AmmoType.T_AC_ULTRA_THB)) && (i == 2)) {        reportMiss(vPhaseReport,true);      } else {        reportMiss(vPhaseReport);      }      if (!handleSpecialMiss(entityTarget,bldgDamagedOnMiss,bldg,vPhaseReport) && (i < 2)) {        returnedReports.addAll(vPhaseReport);        return false;      }    }    int nCluster=calcnCluster();    int id=vPhaseReport.size();    int hits=calcHits(vPhaseReport);    if (target.isAirborne() || game.getBoard().inSpace()) {      while (vPhaseReport.size() > id) {        vPhaseReport.removeElementAt(vPhaseReport.size() - 1);      }      int[] aeroResults=calcAeroDamage(entityTarget,vPhaseReport);      hits=aeroResults[0];      nCluster=aeroResults[1];    }    if (bMissed && id != vPhaseReport.size()) {      vPhaseReport.get(id - 1).newlines--;      vPhaseReport.get(id).indent(2);      vPhaseReport.get(vPhaseReport.size() - 1).newlines++;    }    if (!bMissed) {      vPhaseReport.addAll(dmgPerHitReport);      int bldgAbsorbs=0;      if (targetInBuilding && (bldg != null) && (toHit.getThruBldg() == null)) {        bldgAbsorbs=bldg.getAbsorbtion(target.getPosition());      }      if (targetInBuilding && (bldg != null) && (toHit.getThruBldg() != null)&& (entityTarget instanceof Infantry)) {        if (ae.getElevation() != entityTarget.getElevation()) {          int dmgClass=wtype.getInfantryDamageClass();          int nDamage;          if (dmgClass < WeaponType.WEAPON_BURST_1D6) {            nDamage=nDamPerHit * Math.min(nCluster,hits);          } else {            nDamage=-wtype.getDamage(nRange) * Math.min(nCluster,hits);          }          bldgAbsorbs=(int)Math.round(nDamage * bldg.getInfDmgFromInside());        } else {          bldgAbsorbs=Integer.MIN_VALUE;        }      }      if (hits == 0) {        r=new Report(3365);        r.subject=subjectId;        vPhaseReport.addElement(r);      }      while (hits > 0) {        int nDamage;        if ((target.getTargetType() == Targetable.TYPE_HEX_TAG) || (target.getTargetType() == Targetable.TYPE_BLDG_TAG)) {          int priority=1;          EquipmentMode mode=(weapon.curMode());          if (mode != null) {            if (mode.getName() == "1-shot") {              priority=1;            } else             if (mode.getName() == "2-shot") {              priority=2;            } else             if (mode.getName() == "3-shot") {              priority=3;            } else             if (mode.getName() == "4-shot") {              priority=4;            }          }          TagInfo info=new TagInfo(ae.getId(),target.getTargetType(),target,priority,false);          game.addTagInfo(info);          r=new Report(3390);          r.subject=subjectId;          vPhaseReport.addElement(r);          hits=0;        }        if ((target.getTargetType() == Targetable.TYPE_HEX_IGNITE) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE)) {          handleIgnitionDamage(vPhaseReport,bldg,hits);          hits=0;        }        if (target.getTargetType() == Targetable.TYPE_HEX_CLEAR) {          nDamage=nDamPerHit * hits;          handleClearDamage(vPhaseReport,bldg,nDamage);          hits=0;        }        if (target.getTargetType() == Targetable.TYPE_BUILDING) {          nDamage=nDamPerHit * hits;          handleBuildingDamage(vPhaseReport,bldg,nDamage,target.getPosition());          hits=0;        }        if (entityTarget != null) {          handleEntityDamage(entityTarget,vPhaseReport,bldg,hits,nCluster,bldgAbsorbs);          server.creditKill(entityTarget,ae);          hits-=nCluster;          firstHit=false;        }      }    } else {      if (bldgDamagedOnMiss) {        r=new Report(6429);        r.indent(2);        r.subject=ae.getId();        r.newlines--;        vPhaseReport.add(r);        int nDamage=nDamPerHit * hits;        boolean savedSalvo=bSalvo;        bSalvo=true;        handleBuildingDamage(vPhaseReport,bldg,nDamage,target.getPosition());        bSalvo=savedSalvo;        hits=0;      }    }    if (game.getOptions().booleanOption("uac_tworolls") && ((wtype.getAmmoType() == AmmoType.T_AC_ULTRA) || (wtype.getAmmoType() == AmmoType.T_AC_ULTRA_THB)) && (i == 2)) {      if (isJammed) {        r=new Report(9905);        r.indent();        r.subject=ae.getId();        vPhaseReport.addElement(r);        i--;      } else {        r=new Report(9900);        r.indent();        r.subject=ae.getId();        vPhaseReport.addElement(r);        if (null != ae.getCrew()) {          roll=ae.getCrew().rollGunnerySkill();        } else {          roll=Compute.d6(2);        }      }    }  }  Report.addNewline(vPhaseReport);  insertAttacks(phase,vPhaseReport);  returnedReports.addAll(vPhaseReport);  return false;}  }
class C{  public void drawShape(int x,int y,int w,int h,Map<String,Object> style){  Color penColor=mxUtils.getColor(style,mxConstants.STYLE_STROKECOLOR);  float penWidth=mxUtils.getFloat(style,mxConstants.STYLE_STROKEWIDTH,1);  int pw=(int)Math.ceil(penWidth * scale);  if (g.hitClip(x - pw,y - pw,w + 2 * pw,h + 2 * pw)) {    boolean shadow=mxUtils.isTrue(style,mxConstants.STYLE_SHADOW,false);    Color fillColor=mxUtils.getStyleFillColor(style);    Paint fillPaint=getFillPaint(new Rectangle(x,y,w,h),fillColor,style);    if (penWidth > 0) {      setStroke(penWidth,style);    }    String shape=mxUtils.getString(style,mxConstants.STYLE_SHAPE,"");    if (shape.equals(mxConstants.SHAPE_IMAGE)) {      String img=getImageForStyle(style);      if (img != null) {        drawImage(x,y,w,h,img);      }    } else     if (shape.equals(mxConstants.SHAPE_LINE)) {      if (penColor != null) {        g.setColor(penColor);        String direction=mxUtils.getString(style,mxConstants.STYLE_DIRECTION,mxConstants.DIRECTION_EAST);        if (direction.equals(mxConstants.DIRECTION_EAST) || direction.equals(mxConstants.DIRECTION_WEST)) {          int mid=(int)(y + h / 2);          drawLine(x,mid,x + w,mid);        } else {          int mid=(int)(x + w / 2);          drawLine(mid,y,mid,y + h);        }      }    } else     if (shape.equals(mxConstants.SHAPE_ELLIPSE)) {      drawOval(x,y,w,h,fillColor,fillPaint,penColor,shadow);    } else     if (shape.equals(mxConstants.SHAPE_DOUBLE_ELLIPSE)) {      drawOval(x,y,w,h,fillColor,fillPaint,penColor,shadow);      int inset=(int)((3 + penWidth) * scale);      x+=inset;      y+=inset;      w-=2 * inset;      h-=2 * inset;      drawOval(x,y,w,h,null,null,penColor,false);    } else     if (shape.equals(mxConstants.SHAPE_RHOMBUS)) {      drawRhombus(x,y,w,h,fillColor,fillPaint,penColor,shadow);    } else     if (shape.equals(mxConstants.SHAPE_CYLINDER)) {      drawCylinder(x,y,w,h,fillColor,fillPaint,penColor,shadow);    } else     if (shape.equals(mxConstants.SHAPE_ACTOR)) {      drawActor(x,y,w,h,fillColor,fillPaint,penColor,shadow);    } else     if (shape.equals(mxConstants.SHAPE_CLOUD)) {      drawCloud(x,y,w,h,fillColor,fillPaint,penColor,shadow);    } else     if (shape.equals(mxConstants.SHAPE_TRIANGLE)) {      String direction=mxUtils.getString(style,mxConstants.STYLE_DIRECTION,"");      drawTriangle(x,y,w,h,fillColor,fillPaint,penColor,shadow,direction);    } else     if (shape.equals(mxConstants.SHAPE_HEXAGON)) {      String direction=mxUtils.getString(style,mxConstants.STYLE_DIRECTION,"");      drawHexagon(x,y,w,h,fillColor,fillPaint,penColor,shadow,direction);    } else {      drawRect(x,y,w,h,fillColor,fillPaint,penColor,shadow,mxUtils.isTrue(style,mxConstants.STYLE_ROUNDED));      if (shape.equals(mxConstants.SHAPE_LABEL)) {        String img=getImageForStyle(style);        if (img != null) {          String imgAlign=mxUtils.getString(style,mxConstants.STYLE_IMAGE_ALIGN,mxConstants.ALIGN_CENTER);          String imgValign=mxUtils.getString(style,mxConstants.STYLE_IMAGE_VERTICAL_ALIGN,mxConstants.ALIGN_MIDDLE);          int imgWidth=(int)(mxUtils.getInt(style,mxConstants.STYLE_IMAGE_WIDTH,mxConstants.DEFAULT_IMAGESIZE) * scale);          int imgHeight=(int)(mxUtils.getInt(style,mxConstants.STYLE_IMAGE_HEIGHT,mxConstants.DEFAULT_IMAGESIZE) * scale);          int spacing=(int)(mxUtils.getInt(style,mxConstants.STYLE_SPACING,2) * scale);          int imgX=x;          if (imgAlign.equals(mxConstants.ALIGN_LEFT)) {            imgX+=spacing;          } else           if (imgAlign.equals(mxConstants.ALIGN_RIGHT)) {            imgX+=w - imgWidth - spacing;          } else {            imgX+=(w - imgWidth) / 2;          }          int imgY=y;          if (imgValign.equals(mxConstants.ALIGN_TOP)) {            imgY+=spacing;          } else           if (imgValign.equals(mxConstants.ALIGN_BOTTOM)) {            imgY+=h - imgHeight - spacing;          } else {            imgY+=(h - imgHeight) / 2;          }          drawImage(imgX,imgY,imgWidth,imgHeight,img);        }      }    }  }}  }
class C{  void incrementSchema(String schemaName){  if (schemaName != null) {    Integer count=dbMap.get(schemaName);    if (count == null)     dbMap.put(schemaName,1); else     dbMap.put(schemaName,count.intValue() + 1);  }  lastDb=schemaName;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.490 -0500",hash_original_method="03CE776E3230E83E55C388557E1A9516",hash_generated_method="08C306E2B08338F1F176FE99F997CDA4") public boolean initializeMulticastFiltering(){  try {    mService.initializeMulticastFiltering();    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static boolean isIPv6HexCompressedAddress(final String input){  int colonCount=0;  for (int i=0; i < input.length(); i++) {    if (input.charAt(i) == ':') {      colonCount++;    }  }  return colonCount <= 7 && IPV6_HEX_COMPRESSED_PATTERN.matcher(input).matches();}  }
class C{  @Override public int executeUpdate() throws SQLException {  connection.lock.lock();  try {    super.execute();    retrieveOutputResult();    if (executionResult != null && executionResult.getResultSet() == null) {      return 0;    }    return getUpdateCount();  }  finally {    connection.lock.unlock();  }}  }
class C{  @Override public void deleteGroupChats(){  mImService.tryToDeleteGroupChats();}  }
class C{  public void configureDefaultHeaders(final Map<String,String> map){}  }
class C{  public ExtendedPatternFormatter(final String format,final int callStackOffset){  super(format);  m_callStackOffset=callStackOffset;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void update(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  if (settings.getBoolean(BLUE_BUTTON,false)) {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchblue));  } else {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchbluelocked));  }  if (settings.getBoolean(PURPLE_BUTTON,false)) {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurple));  } else {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurplelocked));  }  if (settings.getBoolean(GREEN_BUTTON,false)) {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreen));  } else {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreenlocked));  }  numClicks=settings.getInt(NUM_CLICKS,5);  clicksLeft.setText("" + numClicks);}  }
class C{  private void updateGraphType(final IViewNode<?> node){  if (m_graphType == GraphType.MIXED_GRAPH) {    if (getNodeCount() == 1) {      if (node instanceof INaviCodeNode) {        setGraphType(GraphType.FLOWGRAPH);      } else       if (node instanceof INaviFunctionNode) {        setGraphType(GraphType.CALLGRAPH);      }    }  } else   if (m_graphType == GraphType.CALLGRAPH) {    if (node instanceof INaviCodeNode) {      setGraphType(GraphType.MIXED_GRAPH);    }  } else {    if (node instanceof INaviFunctionNode) {      setGraphType(GraphType.MIXED_GRAPH);    }  }}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  final Attribute stringifyMatchRuleDesc(Attributes matchRuleDefAttrs) throws NamingException {  Attribute matchRuleDescAttr=new BasicAttribute(MATCHRULEDESC_ATTR_ID);  matchRuleDescAttr.add(matchRuleDef2MatchRuleDesc(matchRuleDefAttrs));  return matchRuleDescAttr;}  }
class C{  private CustomDdlEntity createCustomDdlEntity(BusinessObjectFormatEntity businessObjectFormatEntity,CustomDdlCreateRequest request){  CustomDdlEntity customDdlEntity=new CustomDdlEntity();  customDdlEntity.setBusinessObjectFormat(businessObjectFormatEntity);  customDdlEntity.setCustomDdlName(request.getCustomDdlKey().getCustomDdlName());  customDdlEntity.setDdl(request.getDdl());  return customDdlEntity;}  }
class C{  public void optimize(){  info("Performing an OPTIMIZE to " + solrUrl + "...");  doGet(appendParam(solrUrl.toString(),"optimize=true"));}  }
class C{  public static Manifest generateEmptyManifest(){  Manifest manifest=new Manifest();  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");  return manifest;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.047 -0500",hash_original_method="BC9D2F22217346E354BF7BFC78A2D0C2",hash_generated_method="DDBAE1C6053AAADDEEB81EF120BBEB14") @DSVerified public Dialog(Context context){  this(context,0,true);}  }
class C{  public void disconnectPort(SpeedoPortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected LnPortController");  }  controller=null;}  }
class C{  @SuppressWarnings("unchecked") @Action(value="/voucher/common-ajaxLoadBanksAccountsWithAssignedCheques") public String ajaxLoadBanksAccountsWithAssignedCheques(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Starting ajaxLoadBanksAccountsWithAssignedCheques...");  try {    accNumList=new ArrayList<Bankaccount>();    StringBuffer queryString=new StringBuffer();    queryString=queryString.append("select bankaccount.accountnumber as accountnumber,bankaccount.accounttype as accounttype,cast(bankaccount.id as integer) as id,coa.glcode as glCode ,bank.name as bankName" + " from  voucherheader vh,chartofaccounts coa,Bank bank,Bankbranch bankBranch,Bankaccount bankaccount,paymentheader ph,  " + "egf_instrumentvoucher eiv,egf_instrumentheader ih,egw_status egws ").append("where ph.voucherheaderid=vh.id and coa.id=bankaccount.glcodeid and vh.id=eiv.VOUCHERHEADERID and ").append("  eiv.instrumentheaderid=ih.id and egws.id=ih.id_status and egws.moduletype='Instrument' and egws.description='New' ").append("and ih.instrumenttype=(select id from egf_instrumenttype where upper(type)=:type) and ispaycheque='1' ").append(" and bank.isactive=true  and bankBranch.isactive=true and bankaccount.isactive=true ").append(" and bank.id = bankBranch.bankid and bankBranch.id = bankaccount.branchid and bankaccount.branchid=" + branchId + "  and bankaccount.type in ('RECEIPTS_PAYMENTS','PAYMENTS') and vh.voucherdate <= :date");    queryString=queryString.append(" and ph.bankaccountnumberid=bankaccount.id  order by vh.voucherdate desc");    if (type == null || type.equalsIgnoreCase(""))     type="CHEQUE";    final List<Object[]> bankAccounts=persistenceService.getSession().createSQLQuery(queryString.toString()).setDate("date",getAsOnDate()).setString("type",type).list();    if (LOGGER.isDebugEnabled())     LOGGER.debug("Bank list size is " + bankAccounts.size());    final List<String> addedBanks=new ArrayList<String>();    for (    final Object[] account : bankAccounts) {      final String accountNumberAndType=account[0] != null ? account[0].toString() : "" + "-" + account[4] != null ? account[4].toString() : "";      if (!addedBanks.contains(accountNumberAndType)) {        final Bankaccount bankaccount=new Bankaccount();        bankaccount.setAccountnumber(account[0] != null ? account[0].toString() : "");        bankaccount.setId(Long.valueOf(account[2] != null ? account[2].toString() : ""));        final CChartOfAccounts chartofaccounts=new CChartOfAccounts();        chartofaccounts.setGlcode(account[3] != null ? account[3].toString() : "");        final Bankbranch branch=new Bankbranch();        final Bank bank=new Bank();        bank.setName(account[4].toString());        branch.setBank(bank);        bankaccount.setBankbranch(branch);        bankaccount.setChartofaccounts(chartofaccounts);        addedBanks.add(accountNumberAndType);        accNumList.add(bankaccount);      }    }  } catch (  final HibernateException e) {    LOGGER.error("Exception occured while getting the data for bank dropdown " + e.getMessage(),new HibernateException(e.getMessage()));  }catch (  final Exception e) {    LOGGER.error("Exception occured while getting the data for bank dropdown " + e.getMessage(),new Exception(e.getMessage()));  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Completed ajaxLoadBanksAccountsWithAssignedCheques.");  return "bankAccNum";}  }
class C{  private static String regexErrorMessage(String s,int expectedGroups,int actualGroups){  return "regex \"" + s + "\" has "+ actualGroups+ " groups, but "+ expectedGroups+ " groups are needed.";}  }
class C{  public boolean hasBatchOperation(){  return hasExtension(BatchOperation.class);}  }
class C{  private boolean checkPendingTradeOffer(Player partner){  if (partner.getTradeState() == TradeState.OFFERING_TRADE) {    return player.getName().equals(partner.getTradePartner());  }  return false;}  }
class C{  public void mutableMultiply(double c){  if (Double.isNaN(c) || Double.isInfinite(c))   throw new IllegalArgumentException("multiplier must be a real value, not " + c);  if (getBasisSize() == 0)   return;  sqrdNorm*=c * c;  alpha.getVecView().mutableMultiply(c);}  }
class C{  public boolean skipField(final int tag) throws IOException {switch (WireFormatNano.getTagWireType(tag)) {case WireFormatNano.WIRETYPE_VARINT:    readInt32();  return true;case WireFormatNano.WIRETYPE_FIXED64:readRawLittleEndian64();return true;case WireFormatNano.WIRETYPE_LENGTH_DELIMITED:skipRawBytes(readRawVarint32());return true;case WireFormatNano.WIRETYPE_START_GROUP:skipMessage();checkLastTagWas(WireFormatNano.makeTag(WireFormatNano.getTagFieldNumber(tag),WireFormatNano.WIRETYPE_END_GROUP));return true;case WireFormatNano.WIRETYPE_END_GROUP:return false;case WireFormatNano.WIRETYPE_FIXED32:readRawLittleEndian32();return true;default :throw InvalidProtocolBufferNanoException.invalidWireType();}}  }
class C{  public BinaryExpression(Token t,Expression lhs,Operator op,Expression rhs){  super(t);  this.lhs=lhs;  this.op=op;  this.rhs=rhs;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoUserRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_pwd = ").append(m_pwd);  buffer.append(", m_deptId = ").append(m_deptId);  buffer.append(", m_stat = ").append(m_stat);  buffer.append(", m_numBadCnts = ").append(m_numBadCnts);  buffer.append(", m_pwdLastUpdts = ").append(m_pwdLastUpdts);  buffer.append(", m_pwdMbc = ").append(m_pwdMbc);  buffer.append(", m_pwdVpCheck = ").append(m_pwdVpCheck);  buffer.append("]");  return buffer.toString();}  }
class C{  protected int decodeLinePrefix(PushbackInputStream inStream,OutputStream outStream) throws IOException {  int i;  int nLen, nSeq;  byte xtmp[];  int c;  crc.value=0;  while (true) {    c=inStream.read(tmp,0,1);    if (c == -1) {      throw new CEStreamExhausted();    }    if (tmp[0] == '*') {      break;    }  }  lineAndSeq.reset();  decodeAtom(inStream,lineAndSeq,2);  xtmp=lineAndSeq.toByteArray();  nLen=xtmp[0] & 0xff;  nSeq=xtmp[1] & 0xff;  if (nSeq != sequence) {    throw new CEFormatException("UCDecoder: Out of sequence line.");  }  sequence=(sequence + 1) & 0xff;  return (nLen);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeByte(groupFormed ? (byte)1 : (byte)0);  dest.writeByte(isGroupOwner ? (byte)1 : (byte)0);  if (groupOwnerAddress != null) {    dest.writeByte((byte)1);    dest.writeByteArray(groupOwnerAddress.getAddress());  } else {    dest.writeByte((byte)0);  }}  }
class C{  protected void reshapeArrow(ControlPointMarker controlPoint,Position terrainPosition){  if (controlPoint == null)   return;  Arrow arrow=(Arrow)this.getShape();  Globe globe=this.getWwd().getModel().getGlobe();  Vec4 delta=this.computeControlPointDelta(this.getPreviousPosition(),terrainPosition);  Vec4 markerPoint=globe.computeEllipsoidalPointFromLocation(controlPoint.getPosition());  Position markerPosition=globe.computePositionFromEllipsoidalPoint(markerPoint.add3(delta));  arrow.setLocations(arrow.getLocations()[0],markerPosition);}  }
class C{  private void save(char ch){  updateCoordinates(ch);  _saved.append(ch);}  }
class C{  public static byte[] decrypt(CipherTextIvMac civ,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(civ.getIv(),civ.getCipherText());  byte[] computedMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  if (constantTimeEq(computedMac,civ.getMac())) {    Cipher aesCipherForDecryption=Cipher.getInstance(CIPHER_TRANSFORMATION);    aesCipherForDecryption.init(Cipher.DECRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(civ.getIv()));    return aesCipherForDecryption.doFinal(civ.getCipherText());  } else {    throw new GeneralSecurityException("MAC stored in civ does not match computed MAC.");  }}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  CheckContext newctx=new CheckContext(ctx,this);  vset=expr.checkValue(env,newctx,reach(env,vset),exp);  Type switchType=expr.type;  expr=convert(env,newctx,Type.tInt,expr);  Hashtable tab=new Hashtable();  boolean hasDefault=false;  Vset vs=DEAD_END;  for (int i=0; i < args.length; i++) {    Statement s=args[i];    if (s.op == CASE) {      vs=s.check(env,newctx,vs.join(vset.copy()),exp);      Expression lbl=((CaseStatement)s).expr;      if (lbl != null) {        if (lbl instanceof IntegerExpression) {          Integer Ivalue=(Integer)(((IntegerExpression)lbl).getValue());          int ivalue=Ivalue.intValue();          if (tab.get(lbl) != null) {            env.error(s.where,"duplicate.label",Ivalue);          } else {            tab.put(lbl,s);            boolean overflow;switch (switchType.getTypeCode()) {case TC_BYTE:              overflow=(ivalue != (byte)ivalue);            break;case TC_SHORT:          overflow=(ivalue != (short)ivalue);        break;case TC_CHAR:      overflow=(ivalue != (char)ivalue);    break;default :  overflow=false;}if (overflow) {env.error(s.where,"switch.overflow",Ivalue,switchType);}}} else {if (!lbl.isConstant() || lbl.getType() != Type.tInt) {env.error(s.where,"const.expr.required");}}} else {if (hasDefault) {env.error(s.where,"duplicate.default");}hasDefault=true;}} else {vs=s.checkBlockStatement(env,newctx,vs,exp);}}if (!vs.isDeadEnd()) {newctx.vsBreak=newctx.vsBreak.join(vs);}if (hasDefault) vset=newctx.vsBreak;return ctx.removeAdditionalVars(vset);}  }
class C{  public void addChild(SimpleNode n){  insertChild(n,getChildCount());}  }
class C{  public final boolean isFocusable(){  return true;}  }
class C{  public SIPIfMatchParser(String etag){  super(etag);}  }
class C{  @Override protected void updateMessageID() throws MessagingException {  if (getMessageID() == null)   super.updateMessageID();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void shrink(){  resize(size);}  }
class C{  public Object clone(){  try {    OutputProperties cloned=(OutputProperties)super.clone();    cloned.m_properties=(Properties)cloned.m_properties.clone();    return cloned;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.010 -0500",hash_original_method="5A323B6ADA47CBA0330A8558101AA838",hash_generated_method="E9967153966BAB91FFBB75CD16C1808C") public static void closeQuietly(AutoCloseable closeable){}  }
class C{  public void clear(){  dict.clear();}  }
class C{  public void cleanUp(){  Utils.LOGD(TAG,"cleanUp() ...");  mContext.stopService(new Intent(mContext,WclWearableListenerService.class));  if (!mWatchedCapabilities.isEmpty()) {    String[] capabilities=mWatchedCapabilities.toArray(new String[mWatchedCapabilities.size()]);    removeCapabilities(capabilities);  }  mWearConsumers.clear();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public int size(){  return map.size();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.124 -0500",hash_original_method="5577B21C22C8702738A871739D038C15",hash_generated_method="D1DCB3056D2414B4C27AA873251B546E") @Override protected void finalize() throws IOException {}  }
class C{  public boolean isRemoteDestSupported(){  return remoteDestSupported;}  }
class C{  public synchronized void okToUseGui(){  if (!okToUseGui) {    okToUseGui=true;synchronized (children) {      for (Iterator i=children.keySet().iterator(); i.hasNext(); ) {        Visibility v=getChildVisibility(i.next());        if (v != null)         v.okToUseGui();      }    }  }}  }
class C{  public void refreshView(){}  }
class C{  public Map<InternalDistributedMember,byte[]> dumpStacks(Set recipients,@SuppressWarnings("hiding") boolean useNative,boolean returnStacks){  this.op=operationType.DUMP_STACK;  this.useNative=useNative;  Set recips=new HashSet(recipients);  DistributedMember me=originDm.getDistributionManagerId();  if (recips.contains(me)) {    recips.remove(me);  }  CollectingReplyProcessor<byte[]> cp=null;  if (returnStacks) {    cp=new CollectingReplyProcessor<byte[]>(originDm,recips);    this.processorId=cp.getProcessorId();  }  originDm.putOutgoing(this);  if (cp != null) {    try {      cp.waitForReplies();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }    return cp.getResults();  }  return null;}  }
class C{  public Class<? extends CancelIndicatorBaseExtractor> bindCancelIndicatorExtractor(){  return CancelIndicatorUiExtractor.class;}  }
class C{  public void testDivideBigDecimalScaleRoundingModeUP(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=-15;  int newScale=31;  RoundingMode rm=RoundingMode.UP;  String c="-5.00000E-26";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  hasAttributes=element.hasAttributes();  assertTrue("hasAttributes",hasAttributes);}  }
class C{  public final CC minHeight(String size){  ver.setSize(LayoutUtil.derive(ver.getSize(),ConstraintParser.parseUnitValue(size,false),null,null));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.105 -0400",hash_original_method="6D0558ABAF46F03E8D1BCE08013CEDF0",hash_generated_method="E03DB9F442D2B1551D11089662D93F5B") public X509CRLImpl(byte[] encoding) throws IOException {  this((CertificateList)CertificateList.ASN1.decode(encoding));}  }
class C{  public static boolean isChinese(int codePoint){  return codePoint >= ChineseLanguageConstants.CHINESE_START && codePoint <= ChineseLanguageConstants.CHINESE_END;}  }
class C{  @Override public String toString(){  if (stackTrace == null) {    return super.toString();  }  return stackTrace;}  }
class C{  private static String encode(byte[] source,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,0,len,alphabet);  int outLen=outBuff.length;  while (!doPadding && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public String toString(){  return this.headerPartitionOP1A.toString();}  }
class C{  private static List<File> writeJUnitTests(String output_dir,List<ExecutableSequence> seqList,List<String> additionalJUnitClasses,String junitClassname){  List<File> files=new ArrayList<>();  if (!seqList.isEmpty()) {    List<List<ExecutableSequence>> seqPartition=CollectionsExt.chunkUp(new ArrayList<>(seqList),testsperfile);    JunitFileWriter jfw=new JunitFileWriter(output_dir,junit_package_name,junitClassname);    files.addAll(jfw.writeJUnitTestFiles(seqPartition));    if (GenInputsAbstract.junit_reflection_allowed) {      files.add(jfw.writeSuiteFile(additionalJUnitClasses));    } else {      files.add(jfw.writeDriverFile());    }  } else {    System.out.println("No tests were created. No JUnit class created.");  }  if (!GenInputsAbstract.noprogressdisplay) {    System.out.println();  }  for (  File f : files) {    if (!GenInputsAbstract.noprogressdisplay) {      System.out.println("Created file: " + f.getAbsolutePath());    }  }  return files;}  }
class C{  public void writeULong(long ul) throws IOException {  this.write((byte)((ul >> 24) & 0xff));  this.write((byte)((ul >> 16) & 0xff));  this.write((byte)((ul >> 8) & 0xff));  this.write((byte)(ul & 0xff));}  }
class C{  protected void verifyInt(Cursor cursor,String columnName,int expected){  int index=cursor.getColumnIndex(columnName);  int actual=cursor.getInt(index);  assertEquals(expected,actual);}  }
class C{  private void importZielobjekte(final IProgressMonitor monitor){  Activator.inheritVeriniceContextState();  ImportTask importTask=new ImportTask(dialog.isBausteine(),dialog.isMassnahmenPersonen(),dialog.isZielObjekteZielobjekte(),dialog.isSchutzbedarf(),dialog.isRollen(),dialog.isKosten(),dialog.isUmsetzung(),dialog.isBausteinPersonen());  long importTaskStart=System.currentTimeMillis();  importTask.execute(ImportTask.TYPE_SQLSERVER,new EclipseProgressMonitorDelegator(monitor));  if (LOG.isDebugEnabled()) {    LOG.debug("Time for ImportTask:\t" + String.valueOf((System.currentTimeMillis() - importTaskStart) / 1000) + " seconds");  }  sourceId=importTask.getSourceId();}  }
class C{  private boolean verifyWidthInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    float width=Float.parseFloat(inputString);    if (width <= 0.0) {      textField.setForeground(Color.RED);      return false;    }  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  public void execute(String sql,Object[] bindArgs,int connectionFlags){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags)) {    return;  }  acquireConnection(sql,connectionFlags);  try {    mConnection.execute(sql,bindArgs);  }  finally {    releaseConnection();  }}  }
class C{  public Collection<File> findPaths(final DigestURL url,final String ext){  for (int i=0; i < 100; i++) {    Collection<File> paths=findPaths(url,i,ext);    if (paths.size() > 0)     return paths;  }  return new ArrayList<>(0);}  }
class C{  private T insertCacheObject(){  T cachedObject=ModelInflater.inflate(this,tableDetails);  objectCache.put(getPosition(),new SoftReference<T>(cachedObject));  return cachedObject;}  }
class C{  public OptionGroup(){  this(null);}  }
class C{  public void replace(String statement) throws CannotCompileException {  try {    replace2(statement);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public void appendAssignment(VariableReference var,ArrayReference array,int index){  ArrayIndex arrayIndex=new ArrayIndex(tc,array,index);  AssignmentStatement stmt=new AssignmentStatement(tc,var,arrayIndex);  tc.addStatement(stmt);}  }
class C{  public BeanFactoryObj(Object bean){  this.bean=bean;}  }
class C{  public static long CRC32(byte[] packet){  final CRC32 crc=new CRC32();  crc.reset();  crc.update(packet);  return crc.getValue();}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.553 -0500",hash_original_method="1CE43F20E63C9B7E63DE59186E96F9C3",hash_generated_method="3190AE531435AD6F4E7B61C43FE32679") public void print(float fnum){  print(String.valueOf(fnum));}  }
class C{  public void resetContactCapabilitiesForContentSharing(ContactId contact) throws PayloadException, NetworkException, ContactManagerException {  try {    Capabilities capabilities=mContactManager.getContactCapabilities(contact);    if (capabilities == null || (!capabilities.isImageSharingSupported() && !capabilities.isVideoSharingSupported())) {      return;    }    CapabilitiesBuilder capaBuilder=new CapabilitiesBuilder(capabilities);    capaBuilder.setImageSharing(false);    capaBuilder.setVideoSharing(false);    capabilities=capaBuilder.build();    mContactManager.setContactCapabilities(contact,capabilities);    onReceivedCapabilities(contact,capabilities);  } catch (  FileAccessException e) {    throw new PayloadException("Failed to reset content share capabilities for contact : " + contact,e);  }}  }
class C{  public boolean isLoaded(HGHandle handle){  if (handle instanceof HGPersistentHandle)   return cache.get(handle.getPersistent()) != null; else   return ((HGLiveHandle)handle).getRef() != null;}  }
class C{  protected boolean isIncomingDiscoveryAllowed(DatapathId sw,OFPort port,boolean isStandard){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.LOCAL)   return false;  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",sw.toString(),port.getPortNumber());    }    return false;  }  return true;}  }
class C{  public void animateY(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
