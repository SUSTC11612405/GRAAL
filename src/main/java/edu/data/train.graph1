class C{  public CheckRef createCheckRef(){  CheckRefImpl checkRef=new CheckRefImpl();  return checkRef;}  }
class C{  public static <T1,T2,R>Supplier<R> partial2(final T1 t1,final T2 t2,final BiFunction<T1,T2,R> biFunc){  return null;}  }
class C{  @Override protected void endBody() throws IOException {  PrintStream out=getPrintStream();  out.println(endBodyText);}  }
class C{  private void updateView(){  if (!hasEditor()) {    return;  }  ViewEditor editor=getEditor();  relationSetEditor.updateTable(editor.getBuiltinAnalysisPlugins());  relationSetEditor.selectRelations(editor.getDisplayRelations());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CONSTRAINT_BODY___CONSTRAINT_EXPR_1:    return ((InternalEList<?>)getConstraintExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTRAINT_BODY___ANONYMOUS_CONSTRAINT_BODY_11:  return ((InternalEList<?>)getAnonymous_constraintBody_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void unionRE(Nonterminal nt,RE re){  RE old=getRE(nt);  try {    setRE(nt,old.union(re));  } catch (  InterruptedException e) {    throw new RuntimeException();  }}  }
class C{  private void closeConnection(IConnection conn){  try {    if (conn != null && conn.isOpen())     conn.close();  } catch (  OdaException e) {    e.printStackTrace();  }}  }
class C{  public DefaultNominator(Agent parentAgent){  this.parentAgent=parentAgent;  logger=new Logger(classLogger,parentAgent.getLogger());  parentAgent.addStateChangeListener(this);}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    current=it.next().getInput();  }}  }
class C{  public static int uninstallSilent(Context context,String packageName,boolean isKeepData){  if (packageName == null || packageName.length() == 0) {    return DELETE_FAILED_INVALID_PACKAGE;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm uninstall").append(isKeepData ? " -k " : " ").append(packageName.replace(" ","\\ "));  ShellUtil.CommandResult commandResult=ShellUtil.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return DELETE_SUCCEEDED;  }  Logger.e(new StringBuilder().append("uninstallSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return DELETE_FAILED_INTERNAL_ERROR;  }  if (commandResult.errorMsg.contains("Permission denied")) {    return DELETE_FAILED_PERMISSION_DENIED;  }  return DELETE_FAILED_INTERNAL_ERROR;}  }
class C{  @AfterClass public static void teardownAfterClass(){  MockStendlRPWorld.reset();}  }
class C{  public final void info(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,null);  }}  }
class C{  @Override public boolean execute(final Player player,final List<String> args){  return load(player,args);}  }
class C{  public boolean isClosingHtmlTag(){  return this.htmlTagIndex != -1 && (this.htmlTagIndex & JAVADOC_CLOSED_TAG) != 0;}  }
class C{  protected void appendMove(Game game,int halfMoveNumber){  int currentRow=halfMoveNumber / 2;  if (halfMoveNumber % 2 != 0) {    movesTable.setText(currentRow,1,GameUtils.convertSanToUseUnicode(game.getMoveList().get(halfMoveNumber).toString(),false));  } else {    int moveNumber=currentRow + 1;    movesTable.appendRow(new String[]{String.valueOf(moveNumber) + ") " + GameUtils.convertSanToUseUnicode(game.getMoveList().get(halfMoveNumber).toString(),true),""});  }}  }
class C{  public boolean isReversal(){  return m_IsReversal;}  }
class C{  @Override public byte[] convertIndexToRGB(final byte[] data){  final byte[] newdata=new byte[3 * 256];  int inpLen=domain.length / 2;  int palLen=data.length / inpLen;  float[] inputs=new float[inpLen];  float[] operand;  int p=0, pp=0, tt;  for (int i=0, ii=Math.min(256,palLen); i < ii; i++) {    for (int j=0; j < inpLen; j++) {      inputs[j]=(data[p++] & 0xff) / 255f;    }    operand=colorMapper.getOperandFloat(inputs);    altCS.setColor(operand,operand.length);    tt=altCS.getColor().getRGB();    newdata[pp++]=(byte)((tt >> 16) & 0xff);    newdata[pp++]=(byte)((tt >> 8) & 0xff);    newdata[pp++]=(byte)(tt & 0xff);  }  return newdata;}  }
class C{  private void createECOMConnection(CimConnectionInfo connectionInfo) throws Exception {  String hostAndPort=generateConnectionCacheKey(connectionInfo.getHost(),connectionInfo.getPort());  s_logger.info("Creating connection to ECOM provider on host/port {}",hostAndPort);  try {    EcomConnection connection=new EcomConnection(connectionInfo,_listener,_configuration.getIndicationFilterMap());    connection.connect(_configuration.getSubscriptionsIdentifier(),_configuration.getDeleteStaleSubscriptionsOnConnect());    _connections.put(hostAndPort,connection);    connectionLastTouch.put(hostAndPort,System.currentTimeMillis());  } catch (  Exception e) {    throw new Exception(MessageFormatter.format("Failed creating connection to ECOM provider on host/port {}",hostAndPort).getMessage(),e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected AbstractStoringPageFile(int pageSize){  this.emptyPages=new Stack<>();  this.nextPageID=0;  this.pageSize=pageSize;}  }
class C{  public RandomPartition(double proba){  this.proba=proba;  random=new Random();}  }
class C{  protected NamedNodeMap createAttributes(){  return new ExtendedNamedNodeHashMap();}  }
class C{  public ValidatorITCase(String name){  super(name);}  }
class C{  public Point(Point p){  this(p.x,p.y);}  }
class C{  public static void initialiseListOfSupportedEbookFormats(){  if (EBookFormat.getSupportedFormats() != null) {    return;  }  List<EBookFormat> supportedFormats=new LinkedList<EBookFormat>();  InputStream is=ConfigurationManager.getResourceAsStream(Constants.MIMETYPES_FILENAME);  assert is != null;  Scanner scanner=new Scanner(is);  String line;  try {    while (scanner.hasNextLine()) {      line=scanner.nextLine();      if (line.length() == 0 || line.charAt(0) == '#') {        continue;      }      Scanner lineScanner=new Scanner(line);      String formatType=null;      if (lineScanner.hasNext())       formatType=lineScanner.next();      String mimeType=null;      if (lineScanner.hasNext())       mimeType=lineScanner.next();      if (Helper.isNullOrEmpty(formatType) || Helper.isNullOrEmpty(mimeType)) {        logger.error("Invalid line in Mimetypes file '" + line + "'");        continue;      }      supportedFormats.add(new EBookFormat(formatType,mimeType));    }    scanner.close();    is.close();  } catch (  Exception e) {  }  EBookFormat.setSupportedFormats(supportedFormats);}  }
class C{  public void readRawBinary(BinaryRawReader reader) throws BinaryObjectException {  affKey=BinaryUtils.readIgniteUuid(reader);  status=reader.readInt();  startOff=reader.readLong();  endOff=reader.readLong();}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  @Override public String toString(){  return "Cursor: " + index;}  }
class C{  public void removeThemeRefreshListener(ActionListener l){  if (themelisteners == null) {    return;  }  themelisteners.removeListener(l);}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  public void fillFieldValues(List<SynapseUpdateRule> ruleList){  OjaRule synapseRef=(OjaRule)ruleList.get(0);  if (!NetworkUtils.isConsistent(ruleList,OjaRule.class,"getNormalizationFactor")) {    tfNormalize.setText(SimbrainConstants.NULL_STRING);  } else {    tfNormalize.setText(Double.toString(synapseRef.getNormalizationFactor()));  }  if (!NetworkUtils.isConsistent(ruleList,OjaRule.class,"getLearningRate")) {    tfLearningRate.setText(SimbrainConstants.NULL_STRING);  } else {    tfLearningRate.setText(Double.toString(synapseRef.getLearningRate()));  }}  }
class C{  void clear(){  zoneInfo.zoneChanged();}  }
class C{  @SuppressWarnings({"SimplifiableIfStatement","IfMayBeConditional"}) public void finish(){  boolean sync;  if (!F.isEmpty(dhtMap) || !F.isEmpty(nearMap))   sync=finish(dhtMap,nearMap); else   if (!commit && !F.isEmpty(tx.lockTransactionNodes()))   sync=rollbackLockTransactions(tx.lockTransactionNodes()); else   sync=false;  markInitialized();  if (!sync)   onComplete();}  }
class C{  public static double pow(double x,double y){  final double lns[]=new double[2];  if (y == 0.0) {    return 1.0;  }  if (x != x) {    return x;  }  if (x == 0) {    long bits=Double.doubleToRawLongBits(x);    if ((bits & 0x8000000000000000L) != 0) {      long yi=(long)y;      if (y < 0 && y == yi && (yi & 1) == 1) {        return Double.NEGATIVE_INFINITY;      }      if (y > 0 && y == yi && (yi & 1) == 1) {        return -0.0;      }    }    if (y < 0) {      return Double.POSITIVE_INFINITY;    }    if (y > 0) {      return 0.0;    }    return Double.NaN;  }  if (x == Double.POSITIVE_INFINITY) {    if (y != y) {      return y;    }    if (y < 0.0) {      return 0.0;    } else {      return Double.POSITIVE_INFINITY;    }  }  if (y == Double.POSITIVE_INFINITY) {    if (x * x == 1.0) {      return Double.NaN;    }    if (x * x > 1.0) {      return Double.POSITIVE_INFINITY;    } else {      return 0.0;    }  }  if (x == Double.NEGATIVE_INFINITY) {    if (y != y) {      return y;    }    if (y < 0) {      long yi=(long)y;      if (y == yi && (yi & 1) == 1) {        return -0.0;      }      return 0.0;    }    if (y > 0) {      long yi=(long)y;      if (y == yi && (yi & 1) == 1) {        return Double.NEGATIVE_INFINITY;      }      return Double.POSITIVE_INFINITY;    }  }  if (y == Double.NEGATIVE_INFINITY) {    if (x * x == 1.0) {      return Double.NaN;    }    if (x * x < 1.0) {      return Double.POSITIVE_INFINITY;    } else {      return 0.0;    }  }  if (x < 0) {    if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {      return pow(-x,y);    }    if (y == (long)y) {      return ((long)y & 1) == 0 ? pow(-x,y) : -pow(-x,y);    } else {      return Double.NaN;    }  }  double ya;  double yb;  if (y < 8e298 && y > -8e298) {    double tmp1=y * HEX_40000000;    ya=y + tmp1 - tmp1;    yb=y - ya;  } else {    double tmp1=y * 9.31322574615478515625E-10;    double tmp2=tmp1 * 9.31322574615478515625E-10;    ya=(tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;    yb=y - ya;  }  final double lores=log(x,lns);  if (Double.isInfinite(lores)) {    return lores;  }  double lna=lns[0];  double lnb=lns[1];  double tmp1=lna * HEX_40000000;  double tmp2=lna + tmp1 - tmp1;  lnb+=lna - tmp2;  lna=tmp2;  final double aa=lna * ya;  final double ab=lna * yb + lnb * ya + lnb * yb;  lna=aa + ab;  lnb=-(lna - aa - ab);  double z=1.0 / 120.0;  z=z * lnb + (1.0 / 24.0);  z=z * lnb + (1.0 / 6.0);  z=z * lnb + 0.5;  z=z * lnb + 1.0;  z*=lnb;  final double result=exp(lna,z,null);  return result;}  }
class C{  public static Dcsn cs_qr(Dcs A,Dcss S){  double Rx[], Vx[], Ax[], x[], Beta[];  int i, k, p, n, vnz, p1, top, m2, len, col, rnz, s[], leftmost[], Ap[], Ai[], parent[], Rp[], Ri[], Vp[], Vi[], w[], pinv[], q[];  Dcs R, V;  Dcsn N;  if (!Dcs_util.CS_CSC(A) || S == null)   return (null);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  q=S.q;  parent=S.parent;  pinv=S.pinv;  m2=S.m2;  vnz=S.lnz;  rnz=S.unz;  leftmost=S.leftmost;  w=new int[m2 + n];  x=new double[m2];  N=new Dcsn();  s=w;  int s_offset=m2;  for (k=0; k < m2; k++)   x[k]=0;  N.L=V=Dcs_util.cs_spalloc(m2,n,vnz,true,false);  N.U=R=Dcs_util.cs_spalloc(m2,n,rnz,true,false);  N.B=Beta=new double[n];  Rp=R.p;  Ri=R.i;  Rx=R.x;  Vp=V.p;  Vi=V.i;  Vx=V.x;  for (i=0; i < m2; i++)   w[i]=-1;  rnz=0;  vnz=0;  for (k=0; k < n; k++) {    Rp[k]=rnz;    Vp[k]=p1=vnz;    w[k]=k;    Vi[vnz++]=k;    top=n;    col=q != null ? q[k] : k;    for (p=Ap[col]; p < Ap[col + 1]; p++) {      i=leftmost[Ai[p]];      for (len=0; w[i] != k; i=parent[i]) {        s[s_offset + (len++)]=i;        w[i]=k;      }      while (len > 0)       s[s_offset + (--top)]=s[s_offset + (--len)];      i=pinv[Ai[p]];      x[i]=Ax[p];      if (i > k && w[i] < k) {        Vi[vnz++]=i;        w[i]=k;      }    }    for (p=top; p < n; p++) {      i=s[s_offset + p];      Dcs_happly.cs_happly(V,i,Beta[i],x);      Ri[rnz]=i;      Rx[rnz++]=x[i];      x[i]=0;      if (parent[i] == k)       vnz=Dcs_scatter.cs_scatter(V,i,0,w,null,k,V,vnz);    }    for (p=p1; p < vnz; p++) {      Vx[p]=x[Vi[p]];      x[Vi[p]]=0;    }    Ri[rnz]=k;    double[] beta=new double[1];    beta[0]=Beta[k];    Rx[rnz++]=Dcs_house.cs_house(Vx,p1,beta,vnz - p1);    Beta[k]=beta[0];  }  Rp[n]=rnz;  Vp[n]=vnz;  return N;}  }
class C{  public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public JSONArray optJSONArray(String key){  Object o=opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @org.hamcrest.Factory public static org.hamcrest.Matcher<Double> equalTo(final Double value){  return equalTo(value,10);}  }
class C{  public ChartViewer(JFreeChart chart){  this(chart,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.087 -0500",hash_original_method="B33F4935D7EC88037EE2967518A095D3",hash_generated_method="94868AEDB16628F241D8220AA3C50090") @DSSpec(DSCat.IO) public static String sha512Hex(InputStream data) throws IOException {  return Hex.encodeHexString(sha512(data));}  }
class C{  public VirtualMachineError(java.lang.String s){  super(s);}  }
class C{  public Response onCommand(POP3Session session,Request request){  if (session.getHandlerState() == POP3Session.TRANSACTION) {    stat(session);    return POP3Response.OK;  } else {    return POP3Response.ERR;  }}  }
class C{  public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception {  ProtonServerSenderContext protonSender=serverSenders.get(consumer);  if (protonSender != null) {    return protonSender.deliverMessage(message,deliveryCount);  }  return 0;}  }
class C{  public static void rollbackConnection(@Nullable Connection rsrc,@Nullable IgniteLogger log){  if (rsrc != null)   try {    rsrc.rollback();  } catch (  SQLException e) {    warn(log,"Failed to rollback JDBC connection: " + e.getMessage());  }}  }
class C{  public void stop(int taskId){  this.readTasks.get(taskId).stop();}  }
class C{  public TypeEraseFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  protected void makeRegionData(DrawContext dc){  this.currentData=(RegionData)this.regionDataCache.getEntry(dc.getGlobe());  if (this.currentData == null) {    this.currentData=this.createCacheEntry(dc);    this.regionDataCache.addEntry(this.currentData);  }  if (dc.getFrameTimeStamp() != this.getCurrentData().getFrameNumber()) {    if (this.mustRegenerateData(dc)) {      this.doMakeRegionData(dc);      this.getCurrentData().restartTimer(dc);      this.getCurrentData().setGlobeStateKey(dc.getGlobe().getGlobeStateKey(dc));      this.getCurrentData().setVerticalExaggeration(dc.getVerticalExaggeration());    }    this.getCurrentData().setFrameNumber(dc.getFrameTimeStamp());  }}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_Values == null) {    determineValues(getInputFormat());    setOutputFormat();  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @Override public void environmentConfigure(EnvironmentClassLoader loader) throws ConfigException {}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  if (par2 >= 36 && par2 <= height - 57)   if (par1 >= width / 2 + 140 || par1 <= width / 2 - 126)   altList.elementClicked(-1,false,0,0);  super.mouseClicked(par1,par2,par3);}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  tabBase=alloc.x;  Graphics2D g2d=(Graphics2D)g;  host=(RSyntaxTextArea)getContainer();  int ascent=host.getMaxAscent();  int fontHeight=host.getLineHeight();  int n=getViewCount();  int x=alloc.x + getLeftInset();  int y=alloc.y + getTopInset();  Rectangle clip=g.getClipBounds();  for (int i=0; i < n; i++) {    tempRect.x=x + getOffset(X_AXIS,i);    tempRect.y=y + getOffset(Y_AXIS,i);    tempRect.width=getSpan(X_AXIS,i);    tempRect.height=getSpan(Y_AXIS,i);    if (tempRect.intersects(clip)) {      View view=getView(i);      drawView(g2d,alloc,view,fontHeight,tempRect.y + ascent);    }  }}  }
class C{  @Override public final void wakeUp() throws AdeException {  super.wakeUp();  createUsageVariables();}  }
class C{  public Term(String fld,String text){  this(fld,new BytesRef(text));}  }
class C{  HeapArrayOfDoublesQuickSelectSketch(final int nomEntries,final int lgResizeFactor,final float samplingProbability,final int numValues,final long seed){  super(numValues,seed);  nomEntries_=ceilingPowerOf2(nomEntries);  lgResizeFactor_=lgResizeFactor;  samplingProbability_=samplingProbability;  theta_=(long)(Long.MAX_VALUE * (double)samplingProbability);  final int startingCapacity=1 << startingSubMultiple(Integer.numberOfTrailingZeros(ceilingPowerOf2(nomEntries) * 2),ResizeFactor.getRF(lgResizeFactor),MIN_LG_ARR_LONGS);  keys_=new long[startingCapacity];  values_=new double[startingCapacity * numValues];  lgCurrentCapacity_=Integer.numberOfTrailingZeros(startingCapacity);  setRebuildThreshold();}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  private static Class<?> toJavaType(DbColumn col){  boolean nullable=col.nullable();  boolean unsigned=col.unsigned();switch (col.type()) {case BIT:case BOOLEAN:    return nullable ? Boolean.class : boolean.class;case TINYINT:  return unsigned ? (nullable ? Short.class : short.class) : (nullable ? Byte.class : byte.class);case SMALLINT:return unsigned ? (nullable ? Integer.class : int.class) : (nullable ? Short.class : short.class);case INTEGER:return unsigned ? (nullable ? Long.class : long.class) : (nullable ? Integer.class : int.class);case BIGINT:return nullable ? Long.class : long.class;case REAL:return nullable ? Float.class : float.class;case FLOAT:case DOUBLE:return nullable ? Double.class : double.class;case NUMERIC:case DECIMAL:return BigDecimal.class;case CHAR:case VARCHAR:case LONGVARCHAR:case NCHAR:case NVARCHAR:case LONGNVARCHAR:case CLOB:case NCLOB:case SQLXML:return String.class;case DATE:return java.sql.Date.class;case TIME:return java.sql.Time.class;case TIMESTAMP:return java.sql.Timestamp.class;default :return Object.class;}}  }
class C{  public Token createToken(){  Token token=tokenList[currentFreeToken];  token.text=null;  token.type=Token.NULL;  token.offset=-1;  token.setNextToken(null);  currentFreeToken++;  if (currentFreeToken == size)   augmentTokenList();  return token;}  }
class C{  private static synchronized int increment(){  return cyclicCounter++;}  }
class C{  public SSHFPRecord(Name name,int dclass,long ttl,int alg,int digestType,byte[] fingerprint){  super(name,Type.SSHFP,dclass,ttl);  this.alg=checkU8("alg",alg);  this.digestType=checkU8("digestType",digestType);  this.fingerprint=fingerprint;}  }
class C{  protected Control createDialogArea(Composite composite){  list=new List(composite,SWT.SINGLE | SWT.V_SCROLL | SWT.RESIZE);  setList();  list.addSelectionListener(new ShowDeclarationsSelectionListener(EditorUtil.getTLAEditorWithFocus()));  list.addKeyListener(new ShowDeclarationsKeyListener(this));  list.setSelection(0);  return list;}  }
class C{  public HelloMinecraftLookAndFeel() throws ParseException {  this(DEFAULT_SETTINGS);}  }
class C{  private static Schema loadWsTrustSchema(){  try {    Schema wsTrustSchema=Util.loadXmlSchemaFromResource(ResponseUnmarshaller.class,WS_TRUST_1_3_SCHEMA);    return wsTrustSchema;  } catch (  IllegalArgumentException e) {    LoggerFactory.getLogger(SamlTokenImpl.class).error(String.format("Schema resource `%s' is missing.",WS_TRUST_1_3_SCHEMA),e);    throw new RuntimeException(String.format("Schema resource `%s' is missing.",WS_TRUST_1_3_SCHEMA),e);  }catch (  SAXException e) {    LoggerFactory.getLogger(ResponseUnmarshaller.class).error(ERR_LOADING_WS_TRUST_SCHEMA,e);    throw new RuntimeException(ERR_LOADING_WS_TRUST_SCHEMA,e);  }}  }
class C{  public TestProgressBar(Composite parent,int style){  super(parent,style);  colorSkipped=new Color(Display.getCurrent(),230,232,235);  colorPassed=new Color(Display.getCurrent(),198,242,177);  colorFailed=new Color(Display.getCurrent(),242,188,177);  colorError=new Color(Display.getCurrent(),242,188,177);  colorFixme=new Color(Display.getCurrent(),177,231,242);  addPaintListener(null);  addDisposeListener(null);}  }
class C{  public DigesterOutputStream(MessageDigest md,boolean buffer){  this.md=md;  this.buffer=buffer;  if (buffer) {    bos=new UnsyncByteArrayOutputStream();  }}  }
class C{  public static String format(double[] v,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  int width=w + 1;  StringBuilder msg=new StringBuilder();  msg.append('\n');  for (int i=0; i < v.length; i++) {    String s=format.format(v[i]);    int padding=Math.max(1,width - s.length());    for (int k=0; k < padding; k++) {      msg.append(' ');    }    msg.append(s);  }  return msg.toString();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Deprecated public void showDoneButton(boolean showDone){  setProgressButtonEnabled(showDone);}  }
class C{  public void onReloadPreferences(){  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);  boolean enableTapDetection=false;  if (!settings.getString(mContext.getString(R.string.pref_shortcut_single_tap_key),mContext.getString(R.string.pref_shortcut_single_tap_default)).equals(mContext.getString(R.string.shortcut_value_unassigned))) {    enableTapDetection=true;  }  if (!settings.getString(mContext.getString(R.string.pref_shortcut_double_tap_key),mContext.getString(R.string.pref_shortcut_double_tap_default)).equals(mContext.getString(R.string.shortcut_value_unassigned))) {    enableTapDetection=true;    mIntegratedTapDetector.setMaxDoubleTapSpacingNanos(DOUBLE_TAP_SPACING_NANOS);  } else {    mIntegratedTapDetector.setMaxDoubleTapSpacingNanos(0);  }  if (settings.getString(mContext.getString(R.string.pref_tap_sensitivity_key),mContext.getString(R.string.pref_tap_sensitivity_default)).equals(mContext.getString(R.string.tap_sensitivity_value_lowest))) {    mIntegratedTapDetector.setTapDetectionQuality(IntegratedTapDetector.TAP_QUALITY_HIGHEST);  }  if (settings.getString(mContext.getString(R.string.pref_tap_sensitivity_key),mContext.getString(R.string.pref_tap_sensitivity_default)).equals(mContext.getString(R.string.tap_sensitivity_value_low))) {    mIntegratedTapDetector.setTapDetectionQuality(IntegratedTapDetector.TAP_QUALITY_HIGH);  }  if (settings.getString(mContext.getString(R.string.pref_tap_sensitivity_key),mContext.getString(R.string.pref_tap_sensitivity_default)).equals(mContext.getString(R.string.tap_sensitivity_value_medium))) {    mIntegratedTapDetector.setTapDetectionQuality(IntegratedTapDetector.TAP_QUALITY_MEDIUM);  }  if (settings.getString(mContext.getString(R.string.pref_tap_sensitivity_key),mContext.getString(R.string.pref_tap_sensitivity_default)).equals(mContext.getString(R.string.tap_sensitivity_value_high))) {    mIntegratedTapDetector.setTapDetectionQuality(IntegratedTapDetector.TAP_QUALITY_LOW);  }  mIntegratedTapDetector.setDoubleTapDetectionQuality(IntegratedTapDetector.TAP_QUALITY_LOW);  if (enableTapDetection) {    mIntegratedTapDetector.start();  } else {    mIntegratedTapDetector.stop();  }}  }
class C{  protected void calcAngularBounds(NodeItem r){  if (m_prevRoot == null || !m_prevRoot.isValid() || r == m_prevRoot) {    m_prevRoot=r;    return;  }  NodeItem p=m_prevRoot;  while (true) {    NodeItem pp=(NodeItem)p.getParent();    if (pp == r) {      break;    } else     if (pp == null) {      m_prevRoot=r;      return;    }    p=pp;  }  double dt=0;  Iterator iter=sortedChildren(r);  while (iter.hasNext()) {    Node n=(Node)iter.next();    if (n == p)     break;    dt+=((Params)n.get(PARAMS)).width;  }  double rw=((Params)r.get(PARAMS)).width;  double pw=((Params)p.get(PARAMS)).width;  dt=-MathLib.TWO_PI * (dt + pw / 2) / rw;  m_theta1=dt + Math.atan2(p.getY() - r.getY(),p.getX() - r.getX());  m_theta2=m_theta1 + MathLib.TWO_PI;  m_prevRoot=r;}  }
class C{  public void validateNameString(String name){  if (StringUtils.isEmpty(name) || NullColumnValueGetter.getNullStr().equalsIgnoreCase(name)) {    throw APIException.badRequests.requiredParameterMissingOrEmpty("name");  }}  }
class C{  private Node tryAppend(Node s,boolean haveData){  for (Node t=tail, p=t; ; ) {    Node n, u;    if (p == null && (p=head) == null) {      if (casHead(null,s))       return s;    } else     if (p.cannotPrecede(haveData))     return null; else     if ((n=p.next) != null)     p=p != t && t != (u=tail) ? (t=u) : (p != n) ? n : null; else     if (!p.casNext(null,s))     p=p.next; else {      if (p != t) {        while ((tail != t || !casTail(t,s)) && (t=tail) != null && (s=t.next) != null && (s=s.next) != null && s != t)         ;      }      return p;    }  }}  }
class C{  public UnconditionalFlowInfo mitigateNullInfoOf(FlowInfo flowInfo){  if ((this.tagBits & NULL_FLAG_MASK) == 0) {    return flowInfo.unconditionalInits();  }  long m, m1, nm1, m2, nm2, m3, a2, a3, a4, s1, s2, ns2, s3, ns3, s4, ns4;  boolean newCopy=false;  UnconditionalFlowInfo source=flowInfo.unconditionalInits();  m1=(s1=source.nullBit1) & (s3=source.nullBit3) & (s4=source.nullBit4)& ((a2=this.nullBit2) | (a4=this.nullBit4));  m2=s1 & (s2=this.nullBit2) & (s3 ^ s4)& ((a3=this.nullBit3) | a4);  m3=s1 & (s2 & (ns3=~s3) & (ns4=~s4)& (a3 | a4) | (ns2=~s2) & s3 & ns4& (a2 | a4) | ns2 & ns3 & s4& (a2 | a3));  if ((m=(m1 | m2 | m3)) != 0) {    newCopy=true;    source=source.unconditionalCopy();    source.nullBit1&=~m;    source.nullBit2&=(nm1=~m1) & ((nm2=~m2) | a4);    source.nullBit3&=(nm1 | a2) & nm2;    source.nullBit4&=nm1 & nm2;    long x=~this.nullBit1 & a2 & a3& a4;    if (x != 0) {      source.nullBit1&=~x;      source.nullBit2|=x;      source.nullBit3|=x;      source.nullBit4|=x;    }  }  if (this.extra != null && source.extra != null) {    int length=this.extra[2].length, sourceLength=source.extra[0].length;    if (sourceLength < length) {      length=sourceLength;    }    for (int i=0; i < length; i++) {      m1=(s1=source.extra[1 + 1][i]) & (s3=source.extra[3 + 1][i]) & (s4=source.extra[4 + 1][i])& ((a2=this.extra[2 + 1][i]) | (a4=this.extra[4 + 1][i]));      m2=s1 & (s2=this.extra[2 + 1][i]) & (s3 ^ s4)& ((a3=this.extra[3 + 1][i]) | a4);      m3=s1 & (s2 & (ns3=~s3) & (ns4=~s4)& (a3 | a4) | (ns2=~s2) & s3 & ns4& (a2 | a4) | ns2 & ns3 & s4& (a2 | a3));      if ((m=(m1 | m2 | m3)) != 0) {        if (!newCopy) {          newCopy=true;          source=source.unconditionalCopy();        }        source.extra[1 + 1][i]&=~m;        source.extra[2 + 1][i]&=(nm1=~m1) & ((nm2=~m2) | a4);        source.extra[3 + 1][i]&=(nm1 | a2) & nm2;        source.extra[4 + 1][i]&=nm1 & nm2;      }    }  }  return source;}  }
class C{  public void testCertificateFactory01() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertificateFactory certF=CertificateFactory.getInstance(validValues[i]);    assertEquals("Incorrect type: ",validValues[i],certF.getType());  }}  }
class C{  private void applyFonts(Composite composite){  Dialog.applyDialogFont(composite);  if (titleLabel != null) {    Font font=titleLabel.getFont();    FontData[] fontDatas=font.getFontData();    for (int i=0; i < fontDatas.length; i++) {      fontDatas[i].setStyle(SWT.BOLD);    }    titleFont=new Font(titleLabel.getDisplay(),fontDatas);    titleLabel.setFont(titleFont);  }  if (infoLabel != null) {    Font font=infoLabel.getFont();    FontData[] fontDatas=font.getFontData();    for (int i=0; i < fontDatas.length; i++) {      fontDatas[i].setHeight(fontDatas[i].getHeight() * 9 / 10);    }    infoFont=new Font(infoLabel.getDisplay(),fontDatas);    infoLabel.setFont(infoFont);  }}  }
class C{  public static String toStringPretty(JsonElement jsonElt){  return toStringPretty(jsonElt,0);}  }
class C{  protected void deleteLinksOnPort(NodePortTuple npt,String reason){  List<Link> eraseList=new ArrayList<Link>();  if (this.portLinks.containsKey(npt)) {    if (log.isTraceEnabled()) {      log.trace("handlePortStatus: Switch {} port #{} " + "removing links {}",new Object[]{npt.getNodeId().toString(),npt.getPortId(),this.portLinks.get(npt)});    }    eraseList.addAll(this.portLinks.get(npt));    deleteLinks(eraseList,reason);  }}  }
class C{  private Token parseSimpleToken(final Token token,int ch) throws IOException {  while (true) {    if (readEndOfLine(ch)) {      token.type=EORECORD;      break;    } else     if (isEndOfFile(ch)) {      token.type=EOF;      token.isReady=true;      break;    } else     if (isDelimiter(ch)) {      token.type=TOKEN;      break;    } else     if (isEscape(ch)) {      final int unescaped=readEscape();      if (unescaped == Constants.END_OF_STREAM) {        token.content.append((char)ch).append((char)in.getLastChar());      } else {        token.content.append((char)unescaped);      }      ch=in.read();    } else {      token.content.append((char)ch);      ch=in.read();    }  }  if (ignoreSurroundingSpaces) {    trimTrailingSpaces(token.content);  }  return token;}  }
class C{  public void updateHeader(Header header){  if (header == null) {    return;  }  for (int i=0; i < this.headers.size(); i++) {    Header current=(Header)this.headers.get(i);    if (current.getName().equalsIgnoreCase(header.getName())) {      this.headers.set(i,header);      return;    }  }  this.headers.add(header);}  }
class C{  public static <S,A extends Action>Map<S,A> initialPolicyVector(MarkovDecisionProcess<S,A> mdp){  Map<S,A> pi=new LinkedHashMap<S,A>();  List<A> actions=new ArrayList<A>();  for (  S s : mdp.states()) {    actions.clear();    actions.addAll(mdp.actions(s));    if (actions.size() > 0) {      pi.put(s,Util.selectRandomlyFromList(actions));    }  }  return pi;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double[] maskX={1,1,1,0,-1,-1,-1,0};  double[] maskY={1,0,-1,-1,-1,0,1,1};  int numPixelsInFilter;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    numPixelsInFilter=8;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BooleanCondition must(Condition... conditions){  must=add(must,conditions);  return this;}  }
class C{  public static final String toBitString(double d[]){  StringBuilder sb=new StringBuilder(d.length);  for (  double b : d) {    sb.append((int)Math.round(b));  }  return sb.toString();}  }
class C{  public void doStoreFront(HtmlPage storeFront) throws Exception {  HtmlSubmitInput button=null;  HtmlTableDataCell cell=null;  String description=null, moreButton=null;  Iterator iter=null;  boolean found=false;  int i;  assertNotNull(storeFront);  List cells=getAllElementsOfGivenClass(storeFront,null,HtmlTableDataCell.class), buttons=getAllElementsOfGivenClass(storeFront,null,HtmlSubmitInput.class);  for (i=0; i < carBundles.length; i++) {    iter=cells.iterator();    description=carBundles[i].getString("description").trim();    while (iter.hasNext()) {      cell=(HtmlTableDataCell)iter.next();      if (-1 != cell.asText().indexOf(description)) {        if (LOGGER.isLoggable(Level.FINE)) {          LOGGER.fine("Found description " + description + ".");        }        found=true;        break;      }    }  }  assertTrue("Did not find description: " + description,found);  iter=buttons.iterator();  moreButton=resources.getString("moreButton").trim();  while (iter.hasNext()) {    button=(HtmlSubmitInput)iter.next();    assertTrue(-1 != button.asText().indexOf(moreButton));    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.fine("Button text of " + moreButton + " confirmed.");    }    doCarDetail((HtmlPage)button.click());  }}  }
class C{  public void showMessage(String str){  ArgumentChecking.notNull(str,"str");  updateLabel(str,false,MESSAGE_FG_COLOR,MESSAGE_BG_COLOR);}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  @Override public int hashCode(){  if (triple == null) {    return getDerivation().hashCode();  } else {    return triple.hashCode();  }}  }
class C{  public synchronized void store(THLEvent event,boolean commit) throws ReplicatorException, InterruptedException {  assertWritable();  long maxSeqno=diskLog.getMaxSeqno();  long eventSeqno=event.getSeqno();  short eventFragno=event.getFragno();  if (eventSeqno < maxSeqno) {    throw new LogConsistencyException("Attempt to write new log record with lower seqno value: current max seqno=" + maxSeqno + " attempted new seqno="+ eventSeqno);  } else   if (eventSeqno == maxSeqno && eventFragno <= lastFragno) {    throw new LogConsistencyException("Attempt to write new log record with equal or lower fragno: seqno=" + eventSeqno + " previous stored fragno="+ lastFragno+ " attempted new fragno="+ eventFragno);  }  if (this.cursor == null) {    try {      LogFile lastFile=diskLog.openLastFile(false);      cursor=new LogCursor(lastFile,event.getSeqno());      if (logger.isDebugEnabled()) {        logger.debug("Creating new log cursor: thread=" + Thread.currentThread() + " file="+ lastFile.getFile().getName()+ " seqno="+ event.getSeqno());      }    } catch (    ReplicatorException e) {      throw new THLException("Failed to open log last log file",e);    }  }  LogFile dataFile=cursor.getLogFile();  if (logger.isDebugEnabled()) {    logger.debug("Using log file for writing: " + dataFile.getFile().getName());  }  try {    if (dataFile.getLength() > logFileSize && event.getFragno() == 0) {      dataFile=diskLog.rotate(dataFile,event.getSeqno());      cursor.release();      cursor=new LogCursor(dataFile,event.getSeqno());    }    LogEventReplWriter eventWriter=new LogEventReplWriter(event,eventSerializer,doChecksum,dataFile.getFile());    LogRecord logRecord=eventWriter.write();    dataFile.writeRecord(logRecord,logFileSize);    diskLog.setMaxSeqno(event.getSeqno());    if (event.getLastFrag())     lastFragno=-1; else     lastFragno=event.getFragno();    if (commit) {      dataFile.flush();    }  } catch (  IOException e) {    throw new THLException("Error while writing to log file: name=" + dataFile.getFile().getName(),e);  }}  }
class C{  private String encodeAttributeValue(final String attributeValue){  if (attributeValue == null) {    return null;  }  int len=attributeValue.length();  boolean encode=false;  for (int pos=0; pos < len; pos++) {    char ch=attributeValue.charAt(pos);    if (ch == '<') {      encode=true;      break;    } else     if (ch == '>') {      encode=true;      break;    } else     if (ch == '\"') {      encode=true;      break;    } else     if (ch == '&') {      encode=true;      break;    }  }  if (encode) {    StringBuilder bf=new StringBuilder();    for (int pos=0; pos < len; pos++) {      char ch=attributeValue.charAt(pos);      if (ch == '<') {        bf.append("&lt;");      } else       if (ch == '>') {        bf.append("&gt;");      } else       if (ch == '\"') {        bf.append("&quot;");      } else       if (ch == '&') {        bf.append("&amp;");      } else {        bf.append(ch);      }    }    return bf.toString();  }  return attributeValue;}  }
class C{  @Bean public ViewResolver jspViewResolver(){  InternalResourceViewResolver resolver=new InternalResourceViewResolver();  resolver.setPrefix("/WEB-INF/jsp/");  resolver.setSuffix(".jsp");  return resolver;}  }
class C{  protected final void endOfInput(boolean streamCancelled) throws IOException {  if (cacheRequest != null) {    cacheBody.close();  }  httpEngine.release(streamCancelled);}  }
class C{  public RevisionMetadata parseMetadataNodeList(String revId,NodeList nlEntries,ImmutableList<Revision> parents){  String author="None";  DateTime date=new DateTime(0L);  String description="None";  for (int i=0; i < nlEntries.getLength(); i++) {    Node currNode=nlEntries.item(i);    if (currNode.getNodeName().equals("author")) {      author=currNode.getTextContent();    }    if (currNode.getNodeName().equals("date")) {      date=ISODateTimeFormat.dateTime().parseDateTime(currNode.getTextContent());    }    if (currNode.getNodeName().equals("msg")) {      description=currNode.getTextContent();    }  }  return RevisionMetadata.builder().id(revId).author(author).date(date).description(description).withParents(parents).build();}  }
class C{  @SuppressWarnings("unchecked") public Set<S> children(){  return children;}  }
class C{  public h5 addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static long[] convertToLongArray(final byte[] vals){  checkSource(vals.length,8);  final long[] dest=new long[vals.length / 8];  convertToLongArrayInternal(vals,0,vals.length,dest,0);  return dest;}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  private void firePEPListeners(String from,PEPEvent event){  PEPListener[] listeners=null;synchronized (pepListeners) {    listeners=new PEPListener[pepListeners.size()];    pepListeners.toArray(listeners);  }  for (int i=0; i < listeners.length; i++) {    listeners[i].eventReceived(from,event);  }}  }
class C{  public MethodNode popEnclosingMethod(){  return enclosingMethods.removeFirst();}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  public StringLiteral createStringLiteral(){  StringLiteralImpl stringLiteral=new StringLiteralImpl();  return stringLiteral;}  }
class C{  public SyntheticMethodBinding(MethodBinding overridenMethodToBridge,MethodBinding targetMethod,SourceTypeBinding declaringClass){  this.declaringClass=declaringClass;  this.selector=overridenMethodToBridge.selector;  this.modifiers=(targetMethod.modifiers | ClassFileConstants.AccBridge | ClassFileConstants.AccSynthetic) & ~(ClassFileConstants.AccSynchronized | ClassFileConstants.AccAbstract | ClassFileConstants.AccNative| ClassFileConstants.AccFinal| ExtraCompilerModifiers.AccGenericSignature);  this.tagBits|=(TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);  this.returnType=overridenMethodToBridge.returnType;  this.parameters=overridenMethodToBridge.parameters;  this.thrownExceptions=overridenMethodToBridge.thrownExceptions;  this.targetMethod=targetMethod;  this.purpose=SyntheticMethodBinding.BridgeMethod;  SyntheticMethodBinding[] knownAccessMethods=declaringClass.syntheticMethods();  int methodId=knownAccessMethods == null ? 0 : knownAccessMethods.length;  this.index=methodId;}  }
class C{  public static void start(){  start(Thread.currentThread().getContextClassLoader());}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public AbstractMRMessage createInitPacket(){  return null;}  }
class C{  public Observable<String> exerciseZip(Observable<String> a,Observable<String> b){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  protected void tearDown(){}  }
class C{  static String mapLibraryName(String libname){  String libSuffix;  if (VM.BuildForLinux || VM.BuildForSolaris) {    libSuffix=".so";  } else   if (VM.BuildForOsx) {    libSuffix=".jnilib";  } else {    libSuffix=".a";  }  return "lib" + libname + libSuffix;}  }
class C{  public void removeActionListener(ActionListener a){  if (actionListeners == null) {    return;  }  actionListeners.removeListener(a);  if (!actionListeners.hasListeners()) {    actionListeners=null;  }}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  updateSize();}  }
class C{  protected void sequence_FunctionFacet(ISerializationContext context,Facet semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static URL urlFromString(String location){  return urlFromString(location,null,true);}  }
class C{  public static List<? extends Node> evaluateXPath(Document doc,String path) throws XPathExpressionException {  XPathFactory factory=XPathFactory.newInstance();  XPath xpath=factory.newXPath();  xpath.setNamespaceContext(new NamespaceResolver(doc));  XPathExpression expr=xpath.compile(path);  NodeList nodes=(NodeList)expr.evaluate(doc,XPathConstants.NODESET);  List<Node> nodelist=new ArrayList<Node>();  for (int i=0; i < nodes.getLength(); ++i) {    nodelist.add(nodes.item(i));  }  LOG.trace(String.format("Evaluated XPath: %s and found %s",path,nodeListToString(nodelist)));  return nodelist;}  }
class C{  @HLEFunction(nid=0x8DB83FDC,version=150) public int sceNetAdhocctlGetPeerInfo(pspNetMacAddress macAddress,int size,TPointer peerInfoAddr){  checkInitialized();  int result=SceKernelErrors.ERROR_NET_ADHOC_NO_ENTRY;  if (sceNetAdhoc.isMyMacAddress(macAddress.macAddress)) {    SceNetAdhocctlPeerInfo peerInfo=new SceNetAdhocctlPeerInfo();    peerInfo.nickName=sceUtility.getSystemParamNickname();    peerInfo.macAddress=new pspNetMacAddress(Wlan.getMacAddress());    peerInfo.timestamp=getCurrentTimestamp();    peerInfo.write(peerInfoAddr);    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocctlGetPeerInfo for own MAC address, returning %s",peerInfo));    }    result=0;  } else {    for (    AdhocctlPeer peer : peers) {      if (macAddress.equals(peer.macAddress)) {        SceNetAdhocctlPeerInfo peerInfo=new SceNetAdhocctlPeerInfo();        peerInfo.nickName=peer.nickName;        peerInfo.macAddress=new pspNetMacAddress(peer.macAddress);        peerInfo.timestamp=peer.timestamp;        peerInfo.write(peerInfoAddr);        if (log.isDebugEnabled()) {          log.debug(String.format("sceNetAdhocctlGetPeerInfo returning %s",peerInfo));        }        result=0;        break;      }    }  }  if (result != 0) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocctlGetPeerInfo returning 0x%08X",result));    }  }  return result;}  }
class C{  public NodeSet(){  m_blocksize=32;  m_mapSize=0;}  }
class C{  public static void printUsage(final Options options,final OutputStream out){  final PrintWriter writer=new PrintWriter(out);  final HelpFormatter usageFormatter=new HelpFormatter();  usageFormatter.printUsage(writer,80,"Usage: hadoop jar <jar name> " + ReplicationJob.class.getName(),options);  writer.flush();}  }
class C{  public boolean contains(final int x){  int i=d;  while (i-- != 0)   if (!bits.getBoolean(hash(x,i)))   return false;  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.108 -0500",hash_original_method="6B2B571AE4F377CE25FA9B4608683BF5",hash_generated_method="285A23FFDABA1DF6F6F9408346D12FBB") public String encode(){  String retval=headerName + COLON;  if (optionTag != null)   retval+=SP + optionTag;  retval+=NEWLINE;  return retval;}  }
class C{  public void minx(int parseInt){  minx=parseInt;}  }
class C{  public boolean IsPostPiEmpty(){  return this.postPi.isEmpty();}  }
class C{  @Override public boolean removeLastOccurrence(Object o){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public Builder<KType,VType> putAll(Map<KType,VType> map){  for (  Map.Entry<KType,VType> entry : map.entrySet()) {    this.map.put(entry.getKey(),entry.getValue());  }  return this;}  }
class C{  public static ByteBuffer wrap(byte[] bytes){  return ByteBuffer.wrap(bytes).order(DEFAULT_BYTE_ORDER);}  }
class C{  public void println(){  System.err.println(prefix + ":");}  }
class C{  public void authorizeComplete(String pin) throws FacebookException {  AccessToken token=this.connection.getOAuthAccessToken(pin);  setToken(token.getToken());  User user=this.connection.getMe();  this.userName=user.getId();  if (token.getExpires() != null) {    this.tokenExpiry=new Date(System.currentTimeMillis() + (token.getExpires() * 1000));  }  this.profileName=user.getName();  try {    this.page="";    ResponseList<Account> accounts=this.connection.getAccounts();    this.pages=new ArrayList<>();    if (accounts != null) {      for (      Account account : accounts) {        this.page=account.getName();        this.pages.add(account.getName());      }    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public <T>void visit(final Class<? super T> type) throws HandleException {  checkArgument(type != null,"Type to be visited cannot be null");  if (LOGGER.isLoggable(Level.FINER)) {    LOGGER.finer("  Visit class: " + type);  }  if (type.getPackage() != null && type.getPackage().getName().startsWith(JAVA_PACKAGE)) {    return;  }  handle(type);  handle(type.getDeclaredFields());  handle(type.getDeclaredMethods());  visit((Class<? super T>)type.getSuperclass());}  }
class C{  public static String encode(String str) throws RuntimeException {  byte[] bytes=str.getBytes();  byte[] encoded=encode(bytes);  try {    return new String(encoded,"ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }}  }
class C{  public void clearInputs(){  unCache();  for (  TransactionInput input : inputs) {    input.setParent(null);  }  inputs.clear();  this.length=this.unsafeBitcoinSerialize().length;}  }
class C{  private void determineSyntaxAndEncoding(String absFileName,JarFile jarFile,String jspConfigPageEnc) throws JasperException, IOException {  isXml=false;  boolean isExternal=false;  boolean revert=false;  JspConfig jspConfig=ctxt.getOptions().getJspConfig();  JspProperty jspProperty=jspConfig.findJspProperty(absFileName);  if (jspProperty.isXml() != null) {    isXml=JspUtil.booleanValue(jspProperty.isXml());    isExternal=true;  } else   if (absFileName.endsWith(".jspx") || absFileName.endsWith(".tagx")) {    isXml=true;    isExternal=true;  }  if (isExternal && !isXml) {    sourceEnc=jspConfigPageEnc;    if (sourceEnc != null) {      return;    }    sourceEnc="ISO-8859-1";  } else {    Object[] ret=XMLEncodingDetector.getEncoding(absFileName,jarFile,ctxt,err);    sourceEnc=(String)ret[0];    if (((Boolean)ret[1]).booleanValue()) {      isEncodingSpecifiedInProlog=true;    }    if (ret[2] != null && ((Boolean)ret[2]).booleanValue()) {      hasBom=true;    }    if (!isXml && sourceEnc.equalsIgnoreCase("utf-8") && !hasBom) {      sourceEnc="ISO-8859-1";      revert=true;    }  }  if (isXml) {    return;  }  JspReader jspReader=null;  try {    jspReader=new JspReader(ctxt,absFileName,sourceEnc,jarFile,err);  } catch (  FileNotFoundException ex) {    throw new JasperException(ex);  }  jspReader.setSingleFile(true);  Mark startMark=jspReader.mark();  if (!isExternal) {    jspReader.reset(startMark);    if (hasJspRoot(jspReader)) {      isXml=true;      if (revert)       sourceEnc="UTF-8";      return;    } else {      isXml=false;    }  }  if (!hasBom) {    sourceEnc=jspConfigPageEnc;  }  if (sourceEnc == null) {    sourceEnc=getPageEncodingForJspSyntax(jspReader,startMark);    if (sourceEnc == null) {      sourceEnc="ISO-8859-1";      isDefaultPageEncoding=true;    }  }}  }
class C{  public FastAdapterDialog<Item> withTitle(@StringRes int titleRes){  setTitle(titleRes);  return this;}  }
class C{  private String buildToolTip(final CTaggedGraphNodesContainerNode node){  final StringBuilder tooltip=new StringBuilder("<html>");  boolean first=true;  for (  final NaviNode graphnode : node.getGraphNodes()) {    if (!first) {      tooltip.append("<br>");    }    tooltip.append(CNodesDisplayString.getDisplayString(graphnode));    first=false;  }  return tooltip + "</html>";}  }
class C{  private void stateData(){  Log.d(TAG,"Santa is online.");  updateNavigation();  scheduleUIUpdate();  long time=SantaPreferences.getCurrentTime();  AbstractLaunch launchSanta=mCardAdapter.getLauncher(CardAdapter.SANTA);  if (time > mFirstDeparture && time < OFFLINE_SANTA_FINALARRIVAL) {    enableTrackerMode(true);    if (mFlagSwitchOff) {      launchSanta.setState(AbstractLaunch.STATE_DISABLED);    } else     if (time > mFinalArrival) {      launchSanta.setState(AbstractLaunch.STATE_DISABLED);    } else {      launchSanta.setState(AbstractLaunch.STATE_READY);    }  } else   if (time < mFirstDeparture) {    startCountdown(mFirstDeparture);    launchSanta.setState(AbstractLaunch.STATE_LOCKED);  } else {    launchSanta.setState(AbstractLaunch.STATE_FINISHED);    stopCountdown();    enableTrackerMode(false);  }}  }
class C{  public final int type(){  return m_Type;}  }
class C{  public ProtomechBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  this.bayNumber=bayNumber;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.STATEMENT;}  }
class C{  @RequestMapping(value="podcasts_by_frequency",method=RequestMethod.POST) public String updatePodcastsWithFrequency(@ModelAttribute("updatePodcastsByFrequencyForm") UpdatePodcastsByFrequencyForm updatePodcastsByFrequencyForm,BindingResult bindingResult,ModelMap model){  if (bindingResult.hasErrors()) {    return "redirect:/admin";  }  LOG.debug("------ executing updatePodcastsWithFrequency -----");  Integer podcastsUpdateFrequencyCode=updatePodcastsByFrequencyForm.getUpdateFrequency() != null ? updatePodcastsByFrequencyForm.getUpdateFrequency().getCode() : null;  if (podcastsUpdateFrequencyCode == null) {    Integer.valueOf(configBean.get("PODCAST_FREQUENCY_TYPE_TO_UPDATE"));  }  Integer totalNumberOfPodcasts=null;  totalNumberOfPodcasts=readService.getNumberOfPodcastsWithUpdateFrequency(podcastsUpdateFrequencyCode);  Integer numberOfWorkerThreads=updatePodcastsByFrequencyForm.getNumberOfWorkingThreads();  if (numberOfWorkerThreads == null) {    numberOfWorkerThreads=Integer.valueOf(configBean.get("NO_WORKER_THREADS_FOR_UPDATE_ALL_PODCASTS"));  }  if (numberOfWorkerThreads == null) {    numberOfWorkerThreads=DEFAULT_NO_WORKER_THREADS_FOR_UPDATE_ALL_PODCASTS;  }  Integer mod=totalNumberOfPodcasts % numberOfWorkerThreads;  Integer chunkSize=totalNumberOfPodcasts / numberOfWorkerThreads;  for (int i=0; i < numberOfWorkerThreads; i++) {    int startRow=i * chunkSize;    if (i == numberOfWorkerThreads - 1) {      chunkSize=chunkSize + mod;      LOG.debug("Thread[" + i + "] - ["+ startRow+ ","+ chunkSize+ "]");      Future<String> future=batchUpdateService.updatePodcastsFromRange(startRow,chunkSize,podcastsUpdateFrequencyCode);    } else {      batchUpdateService.updatePodcastsFromRange(startRow,chunkSize,podcastsUpdateFrequencyCode);    }  }  return "redirect:/admin/update/batch";}  }
class C{  public void removeListener(final SelectionListener listener1){  if (this.listener == listener1)   this.listener=null;}  }
class C{  public CompositePersistence(Persistence<O,A> primaryPersistence,Persistence<O,A> secondaryPersistence,List<? extends Persistence<O,A>> additionalPersistences){  validatePersistenceArguments(primaryPersistence,secondaryPersistence,additionalPersistences);  this.primaryPersistence=primaryPersistence;  this.secondaryPersistence=secondaryPersistence;  this.additionalPersistences=additionalPersistences;}  }
class C{  public PKCS10 createCSRequest(Device device,KeyPair keyPair) throws KeyStoreException {  X500Name x500Name=createX500NameForDevice(device);  PKCS10 request=null;  try {    request=new PKCS10(keyPair.getPublic());    Signature signature=Signature.getInstance("MD5withRSA");    signature.initSign(keyPair.getPrivate());    request.encodeAndSign(x500Name,signature);  } catch (  Exception e) {    throw new KeyStoreException("Unable to create CSR request",e);  }  return request;}  }
class C{  public void syncAll(){  m_vmasvc.sync(m_nid,0L,0L,true);}  }
class C{  private void stripTimings(){  long limit=System.currentTimeMillis() - TIMING_TTL_MILLIS;  int endIndex=0;  for (; endIndex < myTimings.size(); endIndex++) {    if (myTimings.get(endIndex) > limit) {      break;    }  }  if (endIndex > 0) {    myTimings.remove(0,endIndex);  }}  }
class C{  @Override public FileLock tryLock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public UsageException(final String message){  super(message);}  }
class C{  public BasicEffect ground(Assignment grounding){  return this;}  }
class C{  public UDPMasterTerminal(){}  }
class C{  public static void cropAll(String[] strings){  for (int i=0; i < strings.length; i++) {    String string=strings[i];    if (string != null) {      string=crop(strings[i]);    }    strings[i]=string;  }}  }
class C{  public void updateControllerConnections(IOFSwitchBackend sw,OFControllerRole role1,OFBsnControllerConnectionState state1,String uri1,OFControllerRole role2,OFBsnControllerConnectionState state2,String uri2){  OFBsnControllerConnection connection1=factory.buildBsnControllerConnection().setAuxiliaryId(OFAuxId.MAIN).setRole(role1).setState(state1).setUri(uri1).build();  OFBsnControllerConnection connection2=factory.buildBsnControllerConnection().setAuxiliaryId(OFAuxId.MAIN).setRole(role2).setState(state2).setUri(uri2).build();  List<OFBsnControllerConnection> connections=new ArrayList<OFBsnControllerConnection>();  connections.add(connection1);  connections.add(connection2);  OFBsnControllerConnectionsReply reply=factory.buildBsnControllerConnectionsReply().setConnections(connections).build();  sw.updateControllerConnections(reply);}  }
class C{  @Override public void draw(){  background(0);  stereoPosition(cameraPositionX,cameraPositionY,cameraPositionZ,0f,0f,-1f,0f,1f,0f);}  }
class C{  public URI(String scheme,String host,String path,String fragment) throws URISyntaxException {  this(scheme,null,host,-1,path,null,fragment);}  }
class C{  public Label(double... c){  this(coordToString(c),AbstractDrawer.DEFAULT_COLOR,c);}  }
class C{  private void scaleStmt(ColumnFormat cf) throws ParserException, IOException {  match(SCALE);  Token t=matchOne(scaleKeyWords);  cf.setScale(Scale.toScale(t.sval));  String scaleString=t.sval;  log(pdebug,"Parsed: scale -> " + scaleString);}  }
class C{  public double predicted(){  return m_Predicted;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.056 -0500",hash_original_method="61478AA9F56747991020142C67580FB8",hash_generated_method="F44C74B35137AEFCC17E0B0D490721CE") @Override public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public IteratorSpliterator(Iterator<? extends T> iterator,int characteristics){  this.collection=null;  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public static String[] toStringArray(Array array,String defaultValue){  String[] arr=new String[array.size()];  for (int i=0; i < arr.length; i++) {    arr[i]=Caster.toString(array.get(i + 1,defaultValue),defaultValue);  }  return arr;}  }
class C{  protected Texture updateTextureWithSubImage(DrawContext dc,Rectangle rect){  Texture texture=this.getTexture(dc);  if (texture == null) {    String msg=Logging.getMessage("nullValue.TextureIsNull");    Logging.logger().warning(msg);    return null;  }  if (!this.isUseMipMaps() || texture.isUsingAutoMipmapGeneration()) {    BufferedImage backingImage=(BufferedImage)this.rectPacker.getBackingStore();    BufferedImage subImage=backingImage.getSubimage(rect.x,rect.y,rect.width,rect.height);    GL gl=dc.getGL();    TextureData subTextureData=AWTTextureIO.newTextureData(gl.getGLProfile(),subImage,false);    texture.updateSubImage(gl,subTextureData,0,rect.x,rect.y);  } else {    BufferedImage backingImage=(BufferedImage)this.rectPacker.getBackingStore();    GL gl=dc.getGL();    texture.updateImage(gl,AWTTextureIO.newTextureData(gl.getGLProfile(),backingImage,this.isUseMipMaps()));    this.setTextureParameters(dc);  }  return texture;}  }
class C{  public void rotateY(double degrees){  Transform3D other=new Transform3D();  other.rotY(degrees * Math.PI / 180);  transform(other);}  }
class C{  public static long doubleToLong(double value){  return (long)(value / DEGREE_TOLERANCE);}  }
class C{  public @CheckReturnValue boolean containsProperty(T prop){  return map.keySet().contains(prop);}  }
class C{  private CGlobalEdgeCommentSynchronizer(){}  }
class C{  protected void assertAsCollection(Object collectionObject,int count){  Collection collection=DefaultTypeTransformation.asCollection(collectionObject);  assertTrue("Collection is not null",collection != null);  assertEquals("Collection size",count,collection.size());  assertIterator("collections iterator",collection.iterator(),count);  assertIterator("InvokerHelper.asIterator",InvokerHelper.asIterator(collectionObject),count);  assertIterator("InvokerHelper.asIterator(InvokerHelper.asCollection)",InvokerHelper.asIterator(collection),count);  assertIterator("InvokerHelper.asIterator(InvokerHelper.asIterator)",InvokerHelper.asIterator(InvokerHelper.asIterator(collectionObject)),count);}  }
class C{  private void readResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  Header header=response.getFirstHeader("Content-Disposition");  if (header != null) {    innerState.mHeaderContentDisposition=header.getValue();  }  header=response.getFirstHeader("Content-Location");  if (header != null) {    innerState.mHeaderContentLocation=header.getValue();  }  header=response.getFirstHeader("ETag");  if (header != null) {    innerState.mHeaderETag=header.getValue();  }  String headerTransferEncoding=null;  header=response.getFirstHeader("Transfer-Encoding");  if (header != null) {    headerTransferEncoding=header.getValue();  }  String headerContentType=null;  header=response.getFirstHeader("Content-Type");  if (header != null) {    headerContentType=header.getValue();    if (!headerContentType.equals("application/vnd.android.obb")) {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect Mime type");    }  }  if (headerTransferEncoding == null) {    header=response.getFirstHeader("Content-Length");    if (header != null) {      innerState.mHeaderContentLength=header.getValue();      long contentLength=Long.parseLong(innerState.mHeaderContentLength);      if (contentLength != -1 && contentLength != mInfo.mTotalBytes) {        Log.e(Constants.TAG,"Incorrect file size delivered.");      }    }  } else {    if (Constants.LOGVV) {      Log.v(Constants.TAG,"ignoring content-length because of xfer-encoding");    }  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Content-Disposition: " + innerState.mHeaderContentDisposition);    Log.v(Constants.TAG,"Content-Length: " + innerState.mHeaderContentLength);    Log.v(Constants.TAG,"Content-Location: " + innerState.mHeaderContentLocation);    Log.v(Constants.TAG,"ETag: " + innerState.mHeaderETag);    Log.v(Constants.TAG,"Transfer-Encoding: " + headerTransferEncoding);  }  boolean noSizeInfo=innerState.mHeaderContentLength == null && (headerTransferEncoding == null || !headerTransferEncoding.equalsIgnoreCase("chunked"));  if (noSizeInfo) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"can't know size of download, giving up");  }}  }
class C{  public String readString(int length) throws IOException {  byte[] array=new byte[length];  readFully(array);  String s=new String(array);  return s.trim();}  }
class C{  public TextOutputCallback(int messageType,String message){  if ((messageType != INFORMATION && messageType != WARNING && messageType != ERROR) || message == null || message.length() == 0)   throw new IllegalArgumentException();  this.messageType=messageType;  this.message=message;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.939 -0500",hash_original_method="24BC54E57520E50B51FEB9301490242D",hash_generated_method="FAE9CEF2DB2F0021A995BEA229699877") public JWebCoreJavaBridge(){  nativeConstructor();}  }
class C{  public boolean isCallableConstructor(){  final EObject parent=this.eContainer();  boolean _xifexpression=false;  if ((parent instanceof ContainerType<?>)) {    TMethod _callableCtor=((ContainerType<?>)parent).getCallableCtor();    _xifexpression=(_callableCtor == this);  } else {    _xifexpression=false;  }  return _xifexpression;}  }
class C{  public final double min(){  double min=Double.POSITIVE_INFINITY;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (min > fieldxy[z])       min=fieldxy[z];    }  }  return min;}  }
class C{  public static Date round(final Date date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar gval=Calendar.getInstance();  gval.setTime(date);  modify(gval,field,ModifyType.ROUND);  return gval.getTime();}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return SubRegionResponse.create(dm,this.getSender(),this.getRegion(dm.getSystem()));}  }
class C{  public static void load(final NiFiProperties properties) throws IOException, ClassNotFoundException {  if (initialized.getAndSet(true)) {    throw new IllegalStateException("Extensions class loaders have already been loaded.");  }  final ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();  ClassLoader currentContextClassLoader=Thread.currentThread().getContextClassLoader();  final Map<String,ClassLoader> extensionDirectoryClassLoaderLookup=new LinkedHashMap<>();  final Map<String,ClassLoader> narIdClassLoaderLookup=new HashMap<>();  final File frameworkWorkingDirectory=properties.getFrameworkWorkingDirectory();  final File extensionsWorkingDirectory=properties.getExtensionsWorkingDirectory();  FileUtils.ensureDirectoryExistAndCanAccess(frameworkWorkingDirectory);  FileUtils.ensureDirectoryExistAndCanAccess(extensionsWorkingDirectory);  final List<File> narWorkingDirContents=new ArrayList<>();  final File[] frameworkWorkingDirContents=frameworkWorkingDirectory.listFiles();  if (frameworkWorkingDirContents != null) {    narWorkingDirContents.addAll(Arrays.asList(frameworkWorkingDirContents));  }  final File[] extensionsWorkingDirContents=extensionsWorkingDirectory.listFiles();  if (extensionsWorkingDirContents != null) {    narWorkingDirContents.addAll(Arrays.asList(extensionsWorkingDirContents));  }  if (!narWorkingDirContents.isEmpty()) {    final List<NarDetails> narDetails=new ArrayList<>();    for (    final File unpackedNar : narWorkingDirContents) {      final NarDetails narDetail=getNarDetails(unpackedNar);      if (narDetail.getNarId() == null) {        logger.warn("No NAR Id found. Skipping: " + unpackedNar.getAbsolutePath());        continue;      }      narDetails.add(narDetail);    }    int narCount;    do {      narCount=narDetails.size();      for (final Iterator<NarDetails> narDetailsIter=narDetails.iterator(); narDetailsIter.hasNext(); ) {        final NarDetails narDetail=narDetailsIter.next();        final String narDependencies=narDetail.getNarDependencyId();        ClassLoader narClassLoader=null;        if (narDependencies == null) {          narClassLoader=createNarClassLoader(narDetail.getNarWorkingDirectory(),currentContextClassLoader);        } else         if (narIdClassLoaderLookup.containsKey(narDetail.getNarDependencyId())) {          narClassLoader=createNarClassLoader(narDetail.getNarWorkingDirectory(),narIdClassLoaderLookup.get(narDetail.getNarDependencyId()));        }        if (narClassLoader != null) {          extensionDirectoryClassLoaderLookup.put(narDetail.getNarWorkingDirectory().getCanonicalPath(),narClassLoader);          narIdClassLoaderLookup.put(narDetail.getNarId(),narClassLoader);          narDetailsIter.remove();        }      }    } while (narCount != narDetails.size());    for (    final NarDetails narDetail : narDetails) {      logger.warn(String.format("Unable to resolve required dependency '%s'. Skipping NAR %s",narDetail.getNarDependencyId(),narDetail.getNarWorkingDirectory().getAbsolutePath()));    }  }  frameworkClassLoader.set(narIdClassLoaderLookup.get(FRAMEWORK_NAR_ID));  extensionClassLoaders.set(new LinkedHashMap<>(extensionDirectoryClassLoaderLookup));}  }
class C{  public CsvInfo(){}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void execute() throws Exception {  startUp();  generateQueryId();  CloseableHttpAsyncClient client=getClient();  client.start();  Pair<String,InputStream> requestInput=getRequestInput();  try (InputStream is=requestInput.getRight()){    sentRequest=new Message(is,requestInput.getLeft());  }   AsyncHttpSender sender=new AsyncHttpSender(client);  sender.addHeader(HEADER_HASH_ALGO_ID,DEFAULT_DIGEST_ALGORITHM_ID);  requestInput=getRequestInput();  try (InputStream is=requestInput.getRight()){    for (    Entry<String,String> e : requestHeaders.entrySet()) {      sender.addHeader(e.getKey(),e.getValue());    }    if ("post".equalsIgnoreCase(httpMethod)) {      sender.doPost(new URI(url),is,CHUNKED_LENGTH,requestInput.getLeft());    } else {      sender.doGet(new URI(url));    }    sender.waitForResponse(DEFAULT_CLIENT_TIMEOUT);  }   try {    receivedResponse=new Message(sender.getResponseContent(),sender.getResponseContentType());    if (sentRequest != null && sentRequest.getSoap() != null && sentRequest.getSoap() instanceof SoapMessageImpl && ((SoapMessageImpl)sentRequest.getSoap()).isAsync() && !requestHeaders.containsKey(SoapUtils.X_IGNORE_ASYNC)) {      sentResponse=receivedResponse;    }  }  finally {    sender.close();    client.close();    closeDown();  }  if (failed) {    throw new Exception("Test failed in previous stage");  }  log.debug("Validating SOAP message\n{}",receivedResponse.getSoap().getXml());  if (receivedResponse.isFault()) {    log.debug("Validating fault: {}, {}",((SoapFault)receivedResponse.getSoap()).getCode(),((SoapFault)receivedResponse.getSoap()).getString());    validateFaultResponse(receivedResponse);    return;  }  if (!receivedResponse.isResponse()) {    throw new Exception("Received SOAP message is not a response");  }  if (sentResponse != null && !checkConsistency(sentResponse,receivedResponse)) {    throw new Exception("Received response is not the same as sent response");  }  log.debug("Validating normal response");  validateNormalResponse(receivedResponse);}  }
class C{  public boolean isInverted(){  return lng.isInverted();}  }
class C{  private void validateLogicalShardId(final long logicalShardId){  if (logicalShardId < MIN_LOGICAL_SHARD_ID || logicalShardId > MAX_LOGICAL_SHARD_ID) {    throw new InvalidLogicalShardIdException("The logical shard ID set in Redis is less than " + String.valueOf(MIN_LOGICAL_SHARD_ID) + " or is greater than the supported maximum of "+ String.valueOf(MAX_LOGICAL_SHARD_ID));  }}  }
class C{  public boolean foo(String x,String y){  if (x != null)   return foo_bar0(x); else   if (y != null)   return foo_bar1(y); else   return false;}  }
class C{  public static void ensureOutputDirectory(final File directory){  if (!directory.exists()) {    if (!directory.mkdirs()) {      throw new NoTalkbackSlimException(ErrorType.DIRECTORY_NOT_CREATED,directory.getPath());    }  } else {    if (!directory.isDirectory()) {      throw new NoTalkbackSlimException(ErrorType.NOT_A_DIRECTORY,directory.getPath());    }  }}  }
class C{  private static void delete(File f){  if (f.isDirectory()) {    for (    File c : f.listFiles()) {      delete(c);    }  }  if (!f.delete()) {    PrintStream err=System.err;    err.println("Failed to delete file: " + f);  }}  }
class C{  public static void putShortLE(byte[] arr,long off,short val){  if (UNALIGNED)   UNSAFE.putShort(arr,off,Short.reverseBytes(val)); else   putShortByByte(arr,off,val,false);}  }
class C{  public static void incNumWorkers(){  incNumWorkers(1);}  }
class C{  private void buildAddressSelectionPopUp(){  final CAddressSelectionDialog dlg=new CAddressSelectionDialog(m_parent,m_modules);  dlg.setVisible(true);  final INaviModule result=dlg.getSelectionResult();  final IAddress address=new CAddress(Long.parseLong(getText(),16));  ZyZoomHelpers.zoomToAddress(m_graph,address,result,true);}  }
class C{  public boolean isFinal(){  return ffinal;}  }
class C{  protected void writeFormStreamData(OutputStream writer) throws IOException {  Set<String> keys=mParamKeyValues.keySet();  for (  String key : keys) {    List<Object> values=mParamKeyValues.getValues(key);    for (    Object value : values) {      if (!isCanceled()) {        if (value != null && value instanceof String) {          if (!(writer instanceof CounterOutputStream))           Logger.i(key + "=" + value);          writeFormString(writer,key,value.toString());        } else         if (value != null && value instanceof Binary) {          if (!(writer instanceof CounterOutputStream))           Logger.i(key + " is Binary");          writeFormBinary(writer,key,(Binary)value);        }        writer.write("\r\n".getBytes());      }    }  }  writer.write((endBoundary).getBytes());}  }
class C{  public static <E>Set<E> constrainedSet(Set<E> set,Constraint<? super E> constraint){  return new ConstrainedSet<E>(set,constraint);}  }
class C{  private void extractMessages(){  Intent lInvokingIntent=getIntent();  String lMsgInit=lInvokingIntent.getStringExtra(MSG_INIT);  if (lMsgInit != null) {    mMsgInit=lMsgInit;  }  String lMsgDetect=lInvokingIntent.getStringExtra(MSG_DETECT);  if (lMsgDetect != null) {    mMsgDetect=lMsgDetect;  }  String lMsgPlaylist=lInvokingIntent.getStringExtra(MSG_PLAYLIST);  if (lMsgPlaylist != null) {    mMsgPlaylist=lMsgPlaylist;  }  String lMsgToken=lInvokingIntent.getStringExtra(MSG_TOKEN);  if (lMsgToken != null) {    mMsgToken=lMsgToken;  }  String lMsgLoBand=lInvokingIntent.getStringExtra(MSG_LO_BAND);  if (lMsgLoBand != null) {    mMsgLowBand=lMsgLoBand;  }  String lMsgHiBand=lInvokingIntent.getStringExtra(MSG_HI_BAND);  if (lMsgHiBand != null) {    mMsgHiBand=lMsgHiBand;  }  String lMsgErrTitle=lInvokingIntent.getStringExtra(MSG_ERROR_TITLE);  if (lMsgErrTitle != null) {    mMsgErrorTitle=lMsgErrTitle;  }  String lMsgErrMsg=lInvokingIntent.getStringExtra(MSG_ERROR_MSG);  if (lMsgErrMsg != null) {    mMsgError=lMsgErrMsg;  }}  }
class C{  private CNameListGenerators(){}  }
class C{  public CCheckBox(Action a){  super(a);  init();}  }
class C{  public static ZyLabelContent buildContent(final INaviTextNode node){  Preconditions.checkNotNull(node,"IE01700: Node argument can not be null");  final ZyLabelContent content=new ZyLabelContent(null);  buildContent(content,node);  return content;}  }
class C{  protected void layoutSouth(DockWrapper base,int x,int y,int maxwidth,int maxheight){  for (Iterator iter=base.getDockedWrappers().iterator(); iter.hasNext(); ) {    DockWrapper dw=(DockWrapper)iter.next();    Dimension d=dw.getPreferredSize();    int w=min(d.width,maxwidth);    int h=min(d.height,maxheight);    dw.setBounds(x,y - h,w,h);    if (!dw.canOcclude()) {      updateBottom(backgroundBounds,y - h);    }    updateBottom(occludingBounds,y - h);    layoutSouth(dw,x,y - h,maxwidth,maxheight - h);    x+=w;    maxwidth-=w;  }}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void cancel(){  mCancellationRequested.set(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.756 -0500",hash_original_method="3F955D64051D380D89135CF7B70C1F05",hash_generated_method="0EC25BC15D68F1E59DA0282A4EDDD537") public void reqGetReconnectIntent(){  Message response=sendMessageSynchronously(REQ_GET_RECONNECT_INTENT);  if (DBG)   log("reqGetReconnectIntent");}  }
class C{  public void finished(){  m_printstream.flush();}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  private void computeSnaps(Collection segStrings,Collection snapPts){  for (Iterator i0=segStrings.iterator(); i0.hasNext(); ) {    NodedSegmentString ss=(NodedSegmentString)i0.next();    computeSnaps(ss,snapPts);  }}  }
class C{  public DotGraph(String graphname){  this.graphname=graphname;  this.isSubGraph=false;  this.nodes=new HashMap<String,DotGraphNode>(100);  this.drawElements=new LinkedList<Renderable>();  this.attributes=new LinkedList<DotGraphAttribute>();}  }
class C{  public static LayersBuilder with(Layer... layers){  return new LayersBuilder(Arrays.asList(layers));}  }
class C{  @DSComment("Layout info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:46.937 -0500",hash_original_method="E6336A158C939972C1CFCFE234B123CF",hash_generated_method="77CD180C6E32DEBAEFF64B715469A756") public void addRule(int verb,int anchor){  mRules[verb]=anchor;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private Finalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  this.queue=queue;  this.finalizableReferenceClassReference=new WeakReference<Class<?>>(finalizableReferenceClass);  this.frqReference=frqReference;}  }
class C{  void dispose(){  stroking=0;  if (!USE_CACHE_HARD_REF) {    hardRefArrayCaches=null;  }  if (dirty) {    this.nPCPathIterator.dispose();    this.nPQPathIterator.dispose();    this.dasher.dispose();    this.stroker.dispose();    dirty=false;  }}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append("Token[");switch (ttype) {case TT_EOF:    result.append("EOF");  break;case TT_EOL:result.append("EOL");break;case TT_NUMBER:result.append("n=");result.append(nval);break;case TT_WORD:result.append(sval);break;default :if (ttype == TT_UNKNOWN || tokenTypes[ttype] == TOKEN_QUOTE) {result.append(sval);} else {result.append('\'');result.append((char)ttype);result.append('\'');}}result.append("], line ");result.append(lineNumber);return result.toString();}  }
class C{  public ConstExpConstModel(Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Parameter timeParameter,Parameter epochParameter,boolean useNumericalIntegrator,Type units){  this(ConstExpConstModelParser.CONST_EXP_CONST_MODEL,N0Parameter,N1Parameter,growthRateParameter,timeParameter,epochParameter,useNumericalIntegrator,units);}  }
class C{  public void put(String key,File files[]) throws FileNotFoundException {  put(key,files,null,null);}  }
class C{  public void testMoveRenameFileSourceAndDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,DIR_NEW),null);  igfs.rename(FILE,FILE_NEW);  checkExist(igfs,SUBDIR,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  protected boolean parseNameTest(PsiBuilder builder){  if (builder.getTokenType() == XPathTokenTypes.STAR) {    return parseWildcard(builder);  } else   if (builder.getTokenType() == XPathTokenTypes.NCNAME) {    builder.advanceLexer();    if (builder.getTokenType() == XPathTokenTypes.COL) {      builder.advanceLexer();      if (builder.getTokenType() != XPathTokenTypes.STAR) {        if (builder.getTokenType() != XPathTokenTypes.NCNAME) {          builder.error("* or NCName expected");        } else {          builder.advanceLexer();        }      } else {        builder.advanceLexer();      }    }    return true;  }  return false;}  }
class C{  private void deleteConfig(HttpServletRequest request,InstructionalOfferingConfigEditForm frm) throws Exception {  org.hibernate.Session hibSession=null;  Transaction tx=null;  try {    InstrOfferingConfigDAO iocDao=new InstrOfferingConfigDAO();    hibSession=iocDao.getSession();    tx=hibSession.beginTransaction();    Long configId=frm.getConfigId();    InstrOfferingConfig ioc=iocDao.get(configId);    InstructionalOffering io=ioc.getInstructionalOffering();    deleteSubpart(request,hibSession,ioc,new HashMap());    io.removeConfiguration(ioc);    io.computeLabels(hibSession);    if (!ioc.isUnlimitedEnrollment().booleanValue())     io.setLimit(new Integer(io.getLimit().intValue() - ioc.getLimit().intValue()));    ChangeLog.addChange(hibSession,sessionContext,io,io.getCourseName() + " [" + ioc.getName()+ "]",ChangeLog.Source.INSTR_CFG_EDIT,ChangeLog.Operation.DELETE,io.getControllingCourseOffering().getSubjectArea(),null);    Event.deleteFromEvents(hibSession,ioc);    Exam.deleteFromExams(hibSession,ioc);    hibSession.saveOrUpdate(io);    String className=ApplicationProperty.ExternalActionInstrOffrConfigChange.value();    ExternalInstrOffrConfigChangeAction configChangeAction=null;    if (className != null && className.trim().length() > 0) {      configChangeAction=(ExternalInstrOffrConfigChangeAction)(Class.forName(className).newInstance());      if (!configChangeAction.validateConfigChangeCanOccur(io,hibSession)) {        throw new Exception("Configuration change violates rules for Add On, rolling back the change.");      }    }    hibSession.flush();    tx.commit();    hibSession.refresh(io);    if (configChangeAction != null) {      configChangeAction.performExternalInstrOffrConfigChangeAction(io,hibSession);    }  } catch (  Exception e) {    try {      if (tx != null && tx.isActive())       tx.rollback();    } catch (    Exception e1) {    }    Debug.error(e);    throw (e);  }}  }
class C{  private void loadProfile(String userId,String name){  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);  startActivity(userProfileIntent);}  }
class C{  int doFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  return cipher.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public boolean isOverwriteMode(){  return !isInserting;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public javax.naming.Binding nextElement(){  try {    return next();  } catch (  NamingException ne) {    throw new NoSuchElementException();  }}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public void cancel(){  cancelled=true;}  }
class C{  public void findAndInit(Object someObj){  super.findAndInit(someObj);  if (someObj instanceof MapBean || someObj instanceof InformationDelegator) {    drawingTool.findAndInit(someObj);  }  if (someObj instanceof MouseDelegator) {    setMouseDelegator((MouseDelegator)someObj);    drawingTool.findAndInit(someObj);  }  if (someObj instanceof OMGraphicDeleteTool) {    ((OMGraphicDeleteTool)someObj).findAndInit(getDrawingTool());  }}  }
class C{  public PaymentGatewayPayPoint(){  System.setProperty("java.protocol.handler.pkgs","com.sun.net.ssl.internal.www.protocol");  Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());  m_sCommerceID=AppConfig.getInstance().getProperty("payment.commerceid");  AltEncrypter cypher=new AltEncrypter("cypherkey" + AppConfig.getInstance().getProperty("payment.commerceid"));  this.m_sCommercePassword=cypher.decrypt(AppConfig.getInstance().getProperty("payment.commercepassword").substring(6));  m_bTestMode=AppConfig.getInstance().getBoolean("payment.testmode");  m_sCurrency=(Locale.getDefault().getCountry().isEmpty()) ? Currency.getInstance("EUR").getCurrencyCode() : Currency.getInstance(Locale.getDefault()).getCurrencyCode();}  }
class C{  public void init() throws IOException {  mailbox.connect();  this.initialized=true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.TYPE_REF;}  }
class C{  public final Exercise.Type type(){  return type;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette("spectrum.pal");    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getValue(row,col);if (z != noData) {z=outputImage.getValue(row,col);outputImage.setValue(row,col,Math.sqrt(z) * gridRes);} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public JavaType constructSimpleType(Class<?> rawType,JavaType[] parameterTypes){  TypeVariable<?>[] typeVars=rawType.getTypeParameters();  if (typeVars.length != parameterTypes.length) {    throw new IllegalArgumentException("Parameter type mismatch for " + rawType.getName() + ": expected "+ typeVars.length+ " parameters, was given "+ parameterTypes.length);  }  String[] names=new String[typeVars.length];  for (int i=0, len=typeVars.length; i < len; ++i) {    names[i]=typeVars[i].getName();  }  JavaType resultType=new SimpleType(rawType,names,parameterTypes,null,null);  return resultType;}  }
class C{  @Override public void entityChanged(final Object property){  super.entityChanged(property);  if (property == Chest.PROP_OPEN) {    proceedChangedState(entity);    openChanged=true;  }}  }
class C{  public DragGestureRecognizer createDefaultDragGestureRecognizer(Component c,int actions,DragGestureListener dgl){  return Toolkit.getDefaultToolkit().createDragGestureRecognizer(MouseDragGestureRecognizer.class,this,c,actions,dgl);}  }
class C{  public PipedReader(PipedWriter src) throws IOException {  this(src,DEFAULT_PIPE_SIZE);}  }
class C{  public static File ensureLogDirectoryExists(){  if (mLogDirectory == null) {    return null;  }  if (!mLogDirectory.exists()) {    mLogDirectory.mkdirs();  }  return mLogDirectory;}  }
class C{  public String stem(String s){  if (stem(s.toCharArray(),s.length()))   return toString(); else   return s;}  }
class C{  protected boolean err(){  return status != STATUS_OK;}  }
class C{  public DeleteRequest parent(String parent){  if (routing == null) {    routing=parent;  }  return this;}  }
class C{  public AndQueryBuilder add(QueryBuilder filterBuilder){  filters.add(filterBuilder);  return this;}  }
class C{  public static boolean match(String s,String... sa){  for (  String st : sa) {    if (st.equalsIgnoreCase(s))     return true;  }  return false;}  }
class C{  public static void text(double x,double y,String text){  if (text == null)   throw new NullPointerException();  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(text);  int hs=metrics.getDescent();  offscreen.drawString(text,(float)(xs - ws / 2.0),(float)(ys + hs));  draw();}  }
class C{  static void extractGenericsConnections(Map<String,GenericsType> connections,ClassNode type,ClassNode target){  if (target == null || type == target || !isUsingGenericsOrIsArrayUsingGenerics(target))   return;  if (type == null || type == UNKNOWN_PARAMETER_TYPE)   return;  if (type.isArray() && target.isArray()) {    extractGenericsConnections(connections,type.getComponentType(),target.getComponentType());  } else   if (target.isGenericsPlaceHolder() || type.equals(target) || !implementsInterfaceOrIsSubclassOf(type,target)) {    if (target.isGenericsPlaceHolder()) {      connections.put(target.getGenericsTypes()[0].getName(),new GenericsType(type));    } else {      extractGenericsConnections(connections,type.getGenericsTypes(),target.getGenericsTypes());    }  } else {    Map<String,ClassNode> genSpec=GenericsUtils.createGenericsSpec(type);    ClassNode superClass=getNextSuperClass(type,target);    if (superClass != null) {      ClassNode corrected;      if (missesGenericsTypes(type)) {        corrected=superClass.getPlainNodeReference();      } else {        corrected=GenericsUtils.correctToGenericsSpecRecurse(genSpec,superClass);      }      extractGenericsConnections(connections,corrected,target);    } else {      throw new GroovyBugError("The type " + type + " seems not to normally extend "+ target+ ". Sorry, I cannot handle this.");    }  }}  }
class C{  public FunctionInvocationTargetException(Throwable cause){  super(cause);}  }
class C{  private CharSequence formatDuration(long millis){  if (millis >= DateUtils.HOUR_IN_MILLIS) {    int hours=(int)TimeUnit.MILLISECONDS.toHours(millis + TimeUnit.MINUTES.toMillis(30));    return resources.getQuantityString(R.plurals.dl__duration_hours,hours,hours);  } else   if (millis >= DateUtils.MINUTE_IN_MILLIS) {    int minutes=(int)TimeUnit.MILLISECONDS.toMinutes(millis + TimeUnit.SECONDS.toMillis(30));    return resources.getQuantityString(R.plurals.dl__duration_minutes,minutes,minutes);  } else {    int seconds=(int)TimeUnit.MILLISECONDS.toSeconds(millis + 500);    return resources.getQuantityString(R.plurals.dl__duration_seconds,seconds,seconds);  }}  }
class C{  public double[][] rankedAttributes() throws Exception {  if (m_attributeRanking == null) {    throw new Exception("Ranking has not been performed");  }  return m_attributeRanking;}  }
class C{  public void endAdding(GL10 gl){  checkState(STATE_ADDING,STATE_INITIALIZED);  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);  GLUtils.texImage2D(GL10.GL_TEXTURE_2D,0,mBitmap,0);  mBitmap.recycle();  mBitmap=null;  mCanvas=null;}  }
class C{  public static void verifyVirtualPoolChangeForTechRefresh(VirtualPool srcVpool,VirtualPool tgtVpool){  String[] exclude=new String[]{PROTOCOLS,PROVISIONING_TYPE,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,MATCHED_POOLS,INVALID_MATCHED_POOLS,ASSIGNED_STORAGE_POOLS,LABEL,DESCRIPTION,STATUS,TAGS,CREATION_TIME,NON_DISRUPTIVE_EXPANSION};  if (!VirtualPoolChangeAnalyzer.analyzeChanges(srcVpool,tgtVpool,null,exclude,null).isEmpty()) {    throw APIException.badRequests.vPoolChangeNotValid(srcVpool.getId(),tgtVpool.getId());  }}  }
class C{  public DocumentQuery(URL feedUrl){  super(feedUrl);}  }
class C{  static <T>List<T> cast(Iterable<T> iterable){  return (List<T>)iterable;}  }
class C{  private void addAttributesButtonsTo(JToolBar bar,DrawingEditor editor){  JButton b;  b=bar.add(new PickAttributesAction(editor));  b.setFocusable(false);  b=bar.add(new ApplyAttributesAction(editor));  b.setFocusable(false);  bar.addSeparator();  addColorButtonsTo(bar,editor);  bar.addSeparator();  addStrokeButtonsTo(bar,editor);  bar.addSeparator();  ButtonFactory.addFontButtonsTo(bar,editor);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ChannelInfo) {    ChannelInfo other=(ChannelInfo)o;    if (this.channelId != null) {      if (this.channelId.equals(other.channelId))       return true;    } else     if (this.channelName != null && this.channelNumber != null) {      return this.channelName.equals(other.channelName) && this.channelNumber.equals(other.channelNumber) && this.majorNumber == other.majorNumber && this.minorNumber == other.minorNumber;    }    Log.d(Util.T,"Could not compare channel values, no data to compare against");    Log.d(Util.T,"This channel info: \n" + this.rawData.toString());    Log.d(Util.T,"Other channel info: \n" + other.rawData.toString());    return false;  }  return super.equals(o);}  }
class C{  static public String format(byte[] p){  return jmri.util.StringUtil.hexStringFromBytes(p);}  }
class C{  private void closeConnectionQuietly(){  if (connection != null) {    try {      connection.disconnect();    } catch (    Exception e) {      Log.e(TAG,"Unexpected error while disconnecting",e);    }    connection=null;  }}  }
class C{  public void updateEllipse(float latPoint,float lonPoint,float majorAxisSpan,float minorAxisSpan,int units,float rotationAngle,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkEllipse.write(latPoint,lonPoint,majorAxisSpan,minorAxisSpan,units,rotationAngle,properties,link.dos);}  }
class C{  @Override public void addTemporaryTopic(final TemporaryTopic temp){  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("addTemporaryTopic(" + temp + ")");  }synchronized (tempTopics) {    tempTopics.add(temp);  }}  }
class C{  @operator(value=ZERO,concept={IConcept.EQUATION,IConcept.MATH},doc=@doc("An internal placeholder function")) public static Double f(final IScope scope,final IExpression var){  return Double.NaN;}  }
class C{  private void exportExcel(){  RModel model=table.getRModel();  if (model == null) {    return;  }  try {    RModelExcelExporter exporter=new RModelExcelExporter((RModel)model);    exporter.export(null,null);  } catch (  Exception e) {    ADialog.error(0,this,"Error",e.getLocalizedMessage());    if (CLogMgt.isLevelFinest())     e.printStackTrace();  }}  }
class C{  @Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){  if (!isCurrentlyLoading) {    return;  }  LOG.d(TAG,"CordovaWebViewClient.onReceivedError: Error code=%s Description=%s URL=%s",errorCode,description,failingUrl);  if (errorCode == WebViewClient.ERROR_UNSUPPORTED_SCHEME) {    parentEngine.client.clearLoadTimeoutTimer();    if (view.canGoBack()) {      view.goBack();      return;    } else {      super.onReceivedError(view,errorCode,description,failingUrl);    }  }  parentEngine.client.onReceivedError(errorCode,description,failingUrl);}  }
class C{  static final public boolean parseBoolean(int what){  return (what != 0);}  }
class C{  public void onSurfaceDestroyed(){  if (DEBUG)   Log.v(TAG,"onSurfaceDestroyed:");  if (mDrawer != null) {    mDrawer.release();    mDrawer=null;  }  if (mSTexture != null) {    mSTexture.release();    mSTexture=null;  }  release();}  }
class C{  public SequenceIndex(){  mBins=new TreeMap<>();  mLinearIndex=new long[5];}  }
class C{  private void sequenceCommand(CommandRequest request,ServerSessionContext session,CompletableFuture<CommandResponse> future){  if (request.sequence() > session.nextRequestSequence()) {    session.registerRequest(request.sequence(),null);  } else {    applyCommand(request,session,future);  }}  }
class C{  public cudaChannelFormatDesc(){}  }
class C{  public boolean isSelected(ButtonModel m){  return (m == selection);}  }
class C{  private boolean scheduleNext(){  final String tag="Scheduled session[" + taskid + "]";  try {    LOG.finer(tag + ": scheduling next session for " + delayBeforeNext+ "ms");    if (cancelled || !notifyStateChange(SCHEDULED,"scan-scheduled")) {      LOG.finer(tag + " stopped: do not reschedule");      return false;    }    final SessionTask nextTask=new SessionTask(delayBeforeNext);    if (!scheduleSession(nextTask,delayBeforeNext))     return false;    LOG.finer(tag + ": next session successfully scheduled");  } catch (  Exception x) {    if (LOG.isLoggable(Level.FINEST)) {      LOG.log(Level.FINEST,tag + " failed to schedule next session: " + x,x);    } else     if (LOG.isLoggable(Level.FINE)) {      LOG.fine(tag + " failed to schedule next session: " + x);    }  }  return true;}  }
class C{  public Process exec(String prog,String[] envp) throws java.io.IOException {  return exec(prog,envp,null);}  }
class C{  @Override public void put(byte[] tableKey,StreamSource rowSource,Result<Boolean> result){  putImpl(tableKey,rowSource,PutType.PUT,result);}  }
class C{  public static void changeToTheme(Activity activity){  activity.finish();  activity.startActivity(new Intent(activity,activity.getClass()));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  this.length=(short)(8 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort((short)this.sourcePort.getPort());  bb.putShort((short)this.destinationPort.getPort());  bb.putShort(this.length);  bb.putShort(this.checksum);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.UDP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      accumulation+=((ipv4.getSourceAddress().getInt() >> 16) & 0xffff) + (ipv4.getSourceAddress().getInt() & 0xffff);      accumulation+=((ipv4.getDestinationAddress().getInt() >> 16) & 0xffff) + (ipv4.getDestinationAddress().getInt() & 0xffff);      accumulation+=ipv4.getProtocol().getIpProtocolNumber() & 0xff;      accumulation+=this.length & 0xffff;    }    for (int i=0; i < this.length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (this.length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(6,this.checksum);  }  return data;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(toString(getClass()));  buffer.append("[UseDefault=");  buffer.append(isUseDefault());  buffer.append(", UseLocaleFormat=");  buffer.append(useLocaleFormat);  if (pattern != null) {    buffer.append(", Pattern=");    buffer.append(pattern);  }  if (locale != null) {    buffer.append(", Locale=");    buffer.append(locale);  }  buffer.append(']');  return buffer.toString();}  }
class C{  public static boolean isCompleted(Operation op){  return (null == op || null == op.getCompletion());}  }
class C{  public void firePropertyChange(java.beans.PropertyChangeEvent propertyChangeEvent){  if (propertyChangeEvent == null) {    String msg=Logging.getMessage("nullValue.PropertyChangeEventIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.getChangeSupport().firePropertyChange(propertyChangeEvent);}  }
class C{  void add(RuleRec rec){  list.add(rec);}  }
class C{  protected void pack(){  Component component=getComponent();  if (component instanceof Window) {    ((Window)component).pack();  }}  }
class C{  public ManagerServiceImpl(final GenericDAO<Manager,Long> genericDao){  super(genericDao);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Tradingdays findTradingdaysByDateRange(final ZonedDateTime startDate,final ZonedDateTime endDate) throws PersistentModelException {  return m_tradingdayHome.findTradingdaysByDateRange(startDate,endDate);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.033 -0500",hash_original_method="ECD2E5721BC163A0054AA741832C3882",hash_generated_method="14A5AF88A2506E99D7DB3789702FBF82") private static void modifyFieldIfSet(final Field field,final TypedProperties properties,final String propertyName){  if (field.getType() == java.lang.String.class) {    int stringInfo=properties.getStringInfo(propertyName);switch (stringInfo) {case TypedProperties.STRING_SET:      break;case TypedProperties.STRING_NULL:    try {      field.set(null,null);    } catch (    IllegalAccessException ex) {      throw new IllegalArgumentException("Cannot set field for " + propertyName,ex);    }  return;case TypedProperties.STRING_NOT_SET:return;case TypedProperties.STRING_TYPE_MISMATCH:throw new IllegalArgumentException("Type of " + propertyName + " "+ " does not match field type ("+ field.getType()+ ")");default :throw new IllegalStateException("Unexpected getStringInfo(" + propertyName + ") return value "+ stringInfo);}}Object value=properties.get(propertyName);if (value != null) {if (!fieldTypeMatches(field,value.getClass())) {throw new IllegalArgumentException("Type of " + propertyName + " ("+ value.getClass()+ ") "+ " does not match field type ("+ field.getType()+ ")");}try {field.set(null,value);} catch (IllegalAccessException ex) {throw new IllegalArgumentException("Cannot set field for " + propertyName,ex);}}}  }
class C{  public OptionsBean obtenerTiposInformesCombo(Entidad entidad) throws RPAdminException {  MultiEntityContextHolder.setEntity(entidad.getIdentificador());  OptionsBean options=new OptionsBean();  ResourceBundle rs=ResourceBundle.getBundle("ieci.tecdoc.sgm.rpadmin.manager.tipoInforme");  Enumeration keys=rs.getKeys();  while (keys.hasMoreElements()) {    OptionBean option=new OptionBean();    String key=keys.nextElement().toString();    String value=rs.getString(key);    option.setCodigo(key);    option.setDescripcion(value);    options.add(option);  }  return options;}  }
class C{  public IteratorSpliterator(Iterator<? extends T> iterator,long size,int characteristics){  this.collection=null;  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  public KMLPolygonImpl(KMLTraversalContext tc,KMLPlacemark placemark,KMLAbstractGeometry geom){  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (placemark == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.parent=placemark;  KMLPolygon polygon=(KMLPolygon)geom;  this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  String altMode=polygon.getAltitudeMode();  if (!WWUtil.isEmpty(altMode)) {    if ("relativeToGround".equals(altMode))     this.setAltitudeMode(WorldWind.RELATIVE_TO_GROUND); else     if ("absolute".equals(altMode))     this.setAltitudeMode(WorldWind.ABSOLUTE);  }  KMLLinearRing outerBoundary=polygon.getOuterBoundary();  if (outerBoundary != null) {    Position.PositionList coords=outerBoundary.getCoordinates();    if (coords != null && coords.list != null)     this.setOuterBoundary(outerBoundary.getCoordinates().list);  }  Iterable<? extends KMLLinearRing> innerBoundaries=polygon.getInnerBoundaries();  if (innerBoundaries != null) {    for (    KMLLinearRing ring : innerBoundaries) {      Position.PositionList coords=ring.getCoordinates();      if (coords != null && coords.list != null)       this.addInnerBoundary(ring.getCoordinates().list);    }  }  if (placemark.getName() != null)   this.setValue(AVKey.DISPLAY_NAME,placemark.getName());  if (placemark.getDescription() != null)   this.setValue(AVKey.DESCRIPTION,placemark.getDescription());  if (placemark.getSnippetText() != null)   this.setValue(AVKey.SHORT_DESCRIPTION,placemark.getSnippetText());  this.setValue(AVKey.CONTEXT,this.parent);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,Value arg){  return new JSpecialInvokeExpr(base,method,Arrays.asList(new Value[]{arg}));}  }
class C{  public Builder(String headVar){  this.headVar=headVar;  table=new HashMap<Assignment,CategoricalTable.Builder>();}  }
class C{  @Override public int removeAllByHostHashes(final Set<String> hosthashes){  for (  String h : hosthashes) {    if (this.hostHash.equals(h)) {      int s=this.size();      this.clear();      return s;    }  }  return 0;}  }
class C{  public RESTLoginCommandImpl(final ShoppingCartCommandRegistry registry,final CustomerService customerService,final ShopService shopService,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final CartRepository cartRepository){  super(registry,customerService,shopService,priceService,pricingPolicyProvider,productService);  this.cartRepository=cartRepository;}  }
class C{  public File configFile(String path){  return dataFile(CONFIG_DIR + "/" + path);}  }
class C{  public ImageCacheParams(File rootDirectory,int maxCacheSizeInBytes){  diskCacheDir=rootDirectory;  memCacheSize=maxCacheSizeInBytes;}  }
class C{  public boolean shouldRemoteUiBeVisible(int state,int idleReason) throws TransientNetworkDisconnectionException, NoConnectionException {switch (state) {case MediaStatus.PLAYER_STATE_PLAYING:case MediaStatus.PLAYER_STATE_PAUSED:case MediaStatus.PLAYER_STATE_BUFFERING:    return true;case MediaStatus.PLAYER_STATE_IDLE:  if (!isRemoteStreamLive()) {    return false;  }return idleReason == MediaStatus.IDLE_REASON_CANCELED;default :break;}return false;}  }
class C{  @Ignore public void testIngestTemplateThreaded(){  File temp=null;  try {    temp=File.createTempFile("testFile2","csv");  } catch (  IOException e) {    e.printStackTrace();    fail();  }  ByteBuffer data=sourceBuffer.asReadOnlyBuffer();  Pipe linesRing=new Pipe(linesRingConfig);  Pipe fieldsRing=new Pipe(fieldsRingConfig);  Pipe flatFileRing=new Pipe(flatFileRingConfig);  GraphManager gm=new GraphManager();  LineSplitterByteBufferStage lineSplitter=new LineSplitterByteBufferStage(gm,data,linesRing);  FieldSplitterStage fieldSplitter=new FieldSplitterStage(gm,linesRing,fieldsRing);  MetaMessagesToCSVStage csvBuilderStage=new MetaMessagesToCSVStage(gm,fieldsRing,flatFileRing);  FileChannel outputFileChannel;  try {    outputFileChannel=new RandomAccessFile(temp,"rws").getChannel();  } catch (  FileNotFoundException e1) {    throw new RuntimeException(e1);  }  FileWriteStage fileWriter=new FileWriteStage(gm,flatFileRing,outputFileChannel);  StageScheduler ss=new ThreadPerStageScheduler(gm);  ss.startup();  boolean ok=ss.awaitTermination(10,TimeUnit.SECONDS);  assertEquals("File size does not match:" + temp.getAbsolutePath(),sourceBuffer.remaining(),temp.length());  byte[] expected=new byte[sourceBuffer.remaining()];  byte[] rebuilt=new byte[sourceBuffer.remaining()];  try {    InputStream testStream=SmallCSVParseTest.class.getResourceAsStream(TEST_FILE);    testStream.read(expected);    testStream.close();  } catch (  Exception e) {    e.printStackTrace();    fail();  }  try {    InputStream builtStream=new FileInputStream(temp);    builtStream.read(rebuilt);    builtStream.close();  } catch (  Exception e) {    e.printStackTrace();    fail();  }}  }
class C{  public T caseTClass(TClass object){  return null;}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  public boolean connect(){  try {    mService.clientConnect(mClientIf,mDevice.getAddress(),false);    return true;  } catch (  RemoteException e) {    Log.e(TAG,"",e);    return false;  }}  }
class C{  public static boolean injectIterationCount(double iterations,boolean condition){  return injectBranchProbability(1. - 1. / iterations,condition);}  }
class C{  public FilterExprIterator(){  super(null);}  }
class C{  private static String createLibraryPrefix(){  OSType osType=calculateOS();switch (osType) {case ANDROID:case APPLE:case LINUX:case SUN:    return "lib";case WINDOWS:  return "";default :break;}return "";}  }
class C{  public static void showException(final Throwable exception){  final Dialog dialog=new Dialog();  dialog.setTitle(ResourceManager.getLabel(ResourceManager.EXCEPTION));  final String msg=exception.getMessage();  final String className=exception.getClass().getName();  final boolean noMessage=msg == null || msg.trim().length() == 0;  dialog.getMessageArea().setTitle(noMessage ? className : msg).setText(noMessage ? "" : className).setIcon(Display.getCurrent().getSystemImage(SWT.ICON_ERROR)).setException(exception);  dialog.getFooterArea().setExpanded(true);  dialog.setButtonType(OpalDialogType.CLOSE);  dialog.show();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  Graph graph=new EdgeListGraphSingleConnections(test.getVariables());  sepsets=new SepsetMap();  sepsets.setReturnEmptyIfNotSet(true);  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  Map<Node,Set<Node>> adjacencies=new ConcurrentSkipListMap<>();  List<Node> nodes=graph.getNodes();  for (  Node node : nodes) {    adjacencies.put(node,new HashSet<Node>());  }  double alpha=test.getAlpha();  for (double _alpha=0.9; _alpha > alpha; _alpha/=2.0) {    System.out.println("_alpha = " + _alpha);    searchAtDepth0(nodes,test,adjacencies);    test.setAlpha(_alpha);    boolean didIt=false;    for (int d=didIt ? 1 : 0; d <= _depth; d++) {      boolean more;      more=searchAtDepth(nodes,test,adjacencies,d);      if (!more) {        break;      }    }  }  test.setAlpha(alpha);  if (verbose) {    out.println("Finished with search, constructing Graph...");  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  if (verbose) {    out.println("Finished constructing Graph.");  }  if (verbose) {    this.logger.log("info","Finishing Fast Adjacency Search.");  }  return graph;}  }
class C{  public final ADFContext push(ADFContext obj){  if (onStack == stack.length) {    ADFContext[] newstack=new ADFContext[stack.length * 2];    System.arraycopy(stack,0,newstack,0,stack.length);    stack=newstack;  }  stack[onStack++]=obj;  return obj;}  }
class C{  void modCenter(int modulus){  mod(modulus);  for (int j=0; j < coeffs.length; j++) {    while (coeffs[j] < modulus / 2) {      coeffs[j]+=modulus;    }    while (coeffs[j] >= modulus / 2) {      coeffs[j]-=modulus;    }  }}  }
class C{  public Gateway createGateway(){  GatewayImpl gateway=new GatewayImpl();  return gateway;}  }
class C{  private void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredBranches,double fitness){  if (coveredBranches > maxCoveredBranches) {    maxCoveredBranches=coveredBranches;    logger.info("(Branches) Best individual covers " + coveredBranches + "/"+ (totalBranches * 2)+ " branches");    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredBranches + "/"+ (totalBranches * 2)+ " branches");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  public boolean isBuilt(){  return _built;}  }
class C{  public ConditionalRoute createConditionalRoute(){  ConditionalRouteImpl conditionalRoute=new ConditionalRouteImpl();  return conditionalRoute;}  }
class C{  public String toString(){  return "TerminalFactory for type " + type + " from provider "+ provider.getName();}  }
class C{  public UnitName createUnitName(){  UnitNameImpl unitName=new UnitNameImpl();  return unitName;}  }
class C{  protected String doIt() throws Exception {  log.info("M_Product_ID=" + p_M_Product_ID);  if (p_M_Product_ID == 0)   throw new AdempiereUserError("@NotFound@: @M_Product_ID@ = " + p_M_Product_ID);  MProduct product=MProduct.get(getCtx(),p_M_Product_ID);  if (product.get_ID() != p_M_Product_ID)   throw new AdempiereUserError("@NotFound@: @M_Product_ID@ = " + p_M_Product_ID);  if (MCostDetail.processProduct(product,get_TrxName()))   return "@OK@";  return "@Error@";}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public Complex cos(){  return new Complex(Math.cos(re) * Math.cosh(im),-Math.sin(re) * Math.sinh(im));}  }
class C{  public void close() throws SQLException {  this.closed=true;  for (  Connection c : this.serverConnections.values()) {    try {      c.close();    } catch (    SQLException ex) {    }  }}  }
class C{  public String plus(Object value){  return this.theString + value;}  }
class C{  public String showAttributes(){  DataSortedTableModel model;  ListSelectorDialog dialog;  int i;  JList list;  String name;  int result;  if (!isPanelSelected()) {    return null;  }  list=new JList(getCurrentPanel().getAttributes());  dialog=new ListSelectorDialog(getParentFrame(),list);  result=dialog.showDialog();  if (result == ListSelectorDialog.APPROVE_OPTION) {    model=(DataSortedTableModel)getCurrentPanel().getTable().getModel();    name=list.getSelectedValue().toString();    i=model.getAttributeColumn(name);    JTableHelper.scrollToVisible(getCurrentPanel().getTable(),0,i);    getCurrentPanel().getTable().setSelectedColumn(i);    return name;  } else {    return null;  }}  }
class C{  @Override public void mouseReleased(MouseEvent event){  if (event.getSource() == getComponentDecreaseSpinnerButton()) {    decreaseTimer.stop();  } else {    increaseTimer.stop();  }}  }
class C{  private static String thresholdsToString(String[] thresholdArray){  String result=null;  if (thresholdArray.length > 0) {    result=thresholdArray[0];    for (int i=1; i < thresholdArray.length; i++) {      result+="; ";      result+=thresholdArray[i];    }  }  return result;}  }
class C{  public boolean willOpenInForeground(TabLaunchType type,boolean isNewTabIncognito){  if (type == TabLaunchType.FROM_RESTORE)   return false;  return type != TabLaunchType.FROM_LONGPRESS_BACKGROUND || (!mTabModelSelector.isIncognitoSelected() && isNewTabIncognito);}  }
class C{  @Override public void messageSent(final NextFilter nextFilter,final IoSession session,final WriteRequest writeRequest) throws Exception {  if (writeRequest.getMessage() != null && writeRequest.getMessage() instanceof ProxyHandshakeIoBuffer) {    return;  }  nextFilter.messageSent(session,writeRequest);}  }
class C{  protected void writeTableComment(Table table,StringBuilder ddl){  printComment("-----------------------------------------------------------------------",ddl);  printComment(getFullyQualifiedTableNameShorten(table),ddl);  printComment("-----------------------------------------------------------------------",ddl);  println(ddl);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.158 -0500",hash_original_method="3CB703BA4BBEFDD58F8198A538C651FA",hash_generated_method="CF855BD0B8B8C8AFFCD8B68DE31A2318") public SparseIntArray(){  this(10);}  }
class C{  public void clearUnused(){  Log log=getLog();  try {    if (session == null)     session=new StorageScopeEngine(factory,log,new StorageScopeCleaner[]{new FileStorageScopeCleaner(Scope.SCOPE_SESSION,null),new DatasourceStorageScopeCleaner(Scope.SCOPE_SESSION,null)});    if (client == null)     client=new StorageScopeEngine(factory,log,new StorageScopeCleaner[]{new FileStorageScopeCleaner(Scope.SCOPE_CLIENT,null),new DatasourceStorageScopeCleaner(Scope.SCOPE_CLIENT,null)});    storeUnusedStorageScope(factory,Scope.SCOPE_CLIENT);    storeUnusedStorageScope(factory,Scope.SCOPE_SESSION);    clearUnusedMemoryScope(factory,Scope.SCOPE_CLIENT);    clearUnusedMemoryScope(factory,Scope.SCOPE_SESSION);    session.clean();    client.clean();    clearUnusedApplications(factory);  } catch (  Throwable t) {    error(t);  }}  }
class C{  void seed(){  for (int j=0; j <= sentLen - 1; j++) {    if (pGrammar.hasRuleForSpan(j,j,input.distance(j,j))) {      if (null == pGrammar.getTrieRoot()) {        throw new RuntimeException("trie root is null");      }      addDotItem(pGrammar.getTrieRoot(),j,j,null,null,new SourcePath());    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>Matcher<T> any(){  return Any.ANY;}  }
class C{  public static void scaleM(double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[mi]*=x;    m[4 + mi]*=y;    m[8 + mi]*=z;  }}  }
class C{  private static byte[] readClass(final InputStream is) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  byte[] b=new byte[is.available()];  int len=0;  while (true) {    int n=is.read(b,len,b.length - len);    if (n == -1) {      if (len < b.length) {        byte[] c=new byte[len];        System.arraycopy(b,0,c,0,len);        b=c;      }      return b;    }    len+=n;    if (len == b.length) {      int last=is.read();      if (last < 0) {        return b;      }      byte[] c=new byte[b.length + 1000];      System.arraycopy(b,0,c,0,len);      c[len++]=(byte)last;      b=c;    }  }}  }
class C{  public GridCacheVersion mappedVersion(int idx){  return mappedVers == null ? null : mappedVers[idx];}  }
class C{  private String addStyleName(String style){  if (styleNameMapping == null) {    return style;  }  StringBuilder sb=null;  for (int counter=style.length() - 1; counter >= 0; counter--) {    if (!isValidCharacter(style.charAt(counter))) {      if (sb == null) {        sb=new StringBuilder(style);      }      sb.setCharAt(counter,'a');    }  }  String mappedName=(sb != null) ? sb.toString() : style;  while (styleNameMapping.get(mappedName) != null) {    mappedName=mappedName + 'x';  }  styleNameMapping.put(style,mappedName);  return mappedName;}  }
class C{  private Organization validateForOnBehalfUserCreation(String organizationId,String password,PlatformUser currentUser) throws ObjectNotFoundException, OperationNotPermittedException {  ArgumentValidator.notNull("organizationId",organizationId);  ArgumentValidator.notNull("password",password);  Organization customer=new Organization();  customer.setOrganizationId(organizationId);  customer=(Organization)dm.getReferenceByBusinessKey(customer);  if (!currentUser.getOrganization().isActingOnBehalf(customer)) {    OperationNotPermittedException onpe=new OperationNotPermittedException();    logger.logWarn(Log4jLogger.SYSTEM_LOG,onpe,LogMessageIdentifier.WARN_USER_CREATE_CUSTOMER_FAILED,currentUser.getUserId(),currentUser.getOrganization().getOrganizationId(),customer.getOrganizationId());    throw onpe;  }  return customer;}  }
class C{  public long nextLong(){  return org.evosuite.runtime.Random.nextLong();}  }
class C{  public static boolean deleteFileWithBackup(Path file,String datasource){  String fn=file.toAbsolutePath().toString();  if (!fn.startsWith(datasource)) {    LOGGER.warn("could not delete file '" + fn + "': datasource '"+ datasource+ "' does not match");    return false;  }  if (Files.isDirectory(file)) {    LOGGER.warn("could not delete file '" + fn + "': file is a directory!");    return false;  }  fn=fn.replace(datasource,datasource + FileSystems.getDefault().getSeparator() + Constants.BACKUP_FOLDER);  try {    Path backup=Paths.get(fn);    if (!Files.exists(backup.getParent())) {      Files.createDirectories(backup.getParent());    }    Files.deleteIfExists(backup);    return moveFileSafe(file,backup);  } catch (  IOException e) {    LOGGER.warn("Could not delete file: " + e.getMessage());    return false;  }}  }
class C{  public static byte[] internalize(Name name){  return internalize(name.getByteArray(),name.getByteOffset(),name.getByteLength());}  }
class C{  @Override public String toString(){  if (length == 0) {    return "FacetLabel: []";  }  String[] parts=new String[length];  System.arraycopy(components,0,parts,0,length);  return "FacetLabel: " + Arrays.toString(parts);}  }
class C{  protected void init(){  if (initialized)   return;  Map<String,Class<? extends FXGNode>> elementNodes=new HashMap<String,Class<? extends FXGNode>>(DEFAULT_FXG_1_0_NODES.size() + 4);  elementNodes.putAll(DEFAULT_FXG_1_0_NODES);  elementNodesByURI=new HashMap<String,Map<String,Class<? extends FXGNode>>>(1);  elementNodesByURI.put(FXG_NAMESPACE,elementNodes);  HashSet<String> skippedElements=new HashSet<String>(1);  skippedElements.add(FXG_PRIVATE_ELEMENT);  skippedElementsByURI=new HashMap<String,Set<String>>(1);  skippedElementsByURI.put(FXG_NAMESPACE,skippedElements);  initialized=true;}  }
class C{  public final double calculateTreeLogLikelihood(Tree tree){  int[] n=new int[size];  int nTips=tree.getExternalNodeCount();  preCalculation(tree);  int index=size - 1;  double t=t(index);  double g=g(index,x0,t);  double logP=Math.log(g);  for (int i=0; i < tree.getInternalNodeCount(); i++) {    double x=tree.getNodeHeight(tree.getInternalNode(i));    index=index(x);    double contrib=Math.log(birth(birthChanges ? index : 0) * g(index,x,t(index)));    logP+=contrib;    t=t(index);    g=g(index,x,t);  }  for (int i=0; i < nTips; i++) {    double y=tree.getNodeHeight(tree.getExternalNode(i));    index=index(y);    double contrib=Math.log(psi(samplingChanges ? index : 0)) - Math.log(g(index,y,t(index)));    ;    logP+=contrib;  }  for (int j=0; j < size - 1; j++) {    double contrib=0;    double time=t(j + 1);    n[j]=lineageCountAtTime(time,tree);    if (n[j] > 0) {      contrib+=n[j] * Math.log(g(j,time,t(j)));    }    logP+=contrib;  }  return logP;}  }
class C{  public Boolean sismember(final byte[] key,final byte[] member){  checkIsInMulti();  client.sismember(key,member);  return client.getIntegerReply() == 1;}  }
class C{  Type attribTree(JCTree tree,Env<AttrContext> env,ResultInfo resultInfo){  Env<AttrContext> prevEnv=this.env;  ResultInfo prevResult=this.resultInfo;  try {    this.env=env;    this.resultInfo=resultInfo;    tree.accept(this);    if (tree == breakTree && resultInfo.checkContext.deferredAttrContext().mode == AttrMode.CHECK) {      throw new BreakAttr(copyEnv(env));    }    return result;  } catch (  CompletionFailure ex) {    tree.type=syms.errType;    return chk.completionError(tree.pos(),ex);  } finally {    this.env=prevEnv;    this.resultInfo=prevResult;  }}  }
class C{  @Override public void initialize(){  super.initialize();  DefaultLookup.setDefaultLookup(new SynthDefaultLookup());  setStyleFactory(factory);  KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(_handler);}  }
class C{  private float spacing(WrapMotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return FloatMath.sqrt(x * x + y * y);}  }
class C{  protected void parseHeaderLine(String line) throws IOException {  int len=2;  int n=line.indexOf(": ");  if (n == -1) {    len=1;    n=line.indexOf(':');    if (n == -1)     return;  }  String key=line.substring(0,n);  String val=line.substring(n + len);  List<String> list=headers.get(key);  if (list != null) {    list.add(val);  } else {    list=new ArrayList<String>();    list.add(val);    headers.put(key,list);  }}  }
class C{  public MediaSize(float x,float y,int units){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  sizeVector.add(this);}  }
class C{  public void fill(int rgb){  g.fill(rgb);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof AnnotationMember) {    AnnotationMember that=(AnnotationMember)obj;    if (name.equals(that.name) && tag == that.tag) {      if (tag == ARRAY) {        return equalArrayValue(that.value);      } else       if (tag == ERROR) {        return false;      } else {        return value.equals(that.value);      }    }  }  return false;}  }
class C{  private void init(final AttributeSet attrs,final int defStyleAttr,final int defStyleRes){  final TypedArray attributes=getContext().obtainStyledAttributes(attrs,R.styleable.DotIndicator,defStyleAttr,defStyleRes);  final int defaultSelectedDotDiameterPx=DimensionHelper.dpToPx(getContext(),DEFAULT_SELECTED_DOT_DIAMETER_DP);  final int defaultUnselectedDotDiameterPx=DimensionHelper.dpToPx(getContext(),DEFAULT_UNSELECTED_DOT_DIAMETER_DP);  final int defaultSpacingBetweenDotsPx=DimensionHelper.dpToPx(getContext(),DEFAULT_SPACING_BETWEEN_DOTS_DP);  numberOfDots=attributes.getInt(R.styleable.DotIndicator_numberOfDots,DEFAULT_NUMBER_OF_DOTS);  selectedDotIndex=attributes.getInt(R.styleable.DotIndicator_selectedDotIndex,DEFAULT_SELECTED_DOT_INDEX);  unselectedDotDiameterPx=attributes.getDimensionPixelSize(R.styleable.DotIndicator_unselectedDotDiameter,defaultUnselectedDotDiameterPx);  selectedDotDiameterPx=attributes.getDimensionPixelSize(R.styleable.DotIndicator_selectedDotDiameter,defaultSelectedDotDiameterPx);  unselectedDotColor=attributes.getColor(R.styleable.DotIndicator_unselectedDotColor,DEFAULT_UNSELECTED_DOT_COLOR);  selectedDotColor=attributes.getColor(R.styleable.DotIndicator_selectedDotColor,DEFAULT_SELECTED_DOT_COLOR);  spacingBetweenDotsPx=attributes.getDimensionPixelSize(R.styleable.DotIndicator_spacingBetweenDots,defaultSpacingBetweenDotsPx);  dotTransitionDuration=attributes.getDimensionPixelSize(R.styleable.DotIndicator_dotTransitionDuration,DEFAULT_DOT_TRANSITION_DURATION_MS);  attributes.recycle();  setLayoutParams(new LayoutParams(MATCH_PARENT,MATCH_PARENT));  setGravity(Gravity.CENTER);  reflectParametersInView();}  }
class C{  public void block(){  lock.writeLock();}  }
class C{  @Override public boolean appendTasks(ImageToProcess img,Set<TaskImageContainer> tasks){  int countImageRefs=numPropagatedImageReferences(img,tasks);  if (img != null) {    incrementSemaphoreReferenceCount(img,countImageRefs);  }  incrementTaskDone(tasks);  scheduleTasks(tasks);  return true;}  }
class C{  Account(){  id=0;  balance=0;  annualInterestRate=0;  dateCreated=new Date();}  }
class C{  private void createLogoutEvent(Session session){  if (session.getUserToken() != null && session.getUserToken().length() == 0) {    GatheredEvent event=new GatheredEvent();    event.setActor(session.getPlatformUserId());    event.setType(EventType.PLATFORM_EVENT);    event.setEventId(PlatformEventIdentifier.USER_LOGOUT_FROM_SERVICE);    event.setOccurrenceTime(System.currentTimeMillis());    event.setSubscriptionTKey(session.getSubscriptionTKey().longValue());    try {      evtMgmt.recordEvent(event);    } catch (    DuplicateEventException e) {      logger.logDebug(e.getMessage());    }  }}  }
class C{  public void clear(){  ref.length=0;}  }
class C{  public static TupleSchema of(String name,TupleSlot... slots){  checkNotNull(name,"name must not be null");  checkNotNull(slots,"slots must not be null");  Map<String,Integer> slotLookup=IntStream.range(0,slots.length).collect(null,null,null);  checkArgument(slots.length == slotLookup.size(),"Slot names are not unique");  return new TupleSchema(name,slots,slotLookup);}  }
class C{  boolean isPrivileged(){  return isPrivileged;}  }
class C{  public Iterable<FunctionImport> build(FactoryLookup lookup){  List<FunctionImport> builder=new ArrayList<>();  for (  FunctionImportImpl.Builder functionImportBuilder : functionImportBuilders) {    EntitySet entitySet=lookup.getEntitySet(functionImportBuilder.getEntitySetName());    Function function=lookup.getFunction(functionImportBuilder.getFunctionName());    if (entitySet == null && function.isBound()) {      throw new IllegalArgumentException("Could not find EntitySet with name: " + functionImportBuilder.getEntitySetName());    }    functionImportBuilder.setEntitySet(entitySet);    functionImportBuilder.setFunction(function);    builder.add(functionImportBuilder.build());  }  return Collections.unmodifiableList(builder);}  }
class C{  public boolean isEnabled(){  if (source instanceof Component) {    return ((Component)source).isEnabled();  } else   if (source instanceof MenuItem) {    return ((MenuItem)source).isEnabled();  } else {    return true;  }}  }
class C{  @SuppressWarnings("unchecked") public ClusterUpdateSettingsRequest transientSettings(Map source){  try {    XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);    builder.map(source);    transientSettings(builder.string());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }  return this;}  }
class C{  private void layoutComponents(){  setLayout(new GridBagLayout());  setBorder(new CompoundBorder(new TitledBorder(DISPLAY_NAME),new EmptyBorder(6,6,6,6)));  setToolTipText(DESCRIPTION);  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  add(new JLabel("Minimum value"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(minimumValue,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Maximum value"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(maximumValue,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  c.weighty=1.0f;  add(Box.createGlue(),c);}  }
class C{  public int addMultiNewarray(CtClass clazz,int[] dimensions){  int len=dimensions.length;  for (int i=0; i < len; ++i)   addIconst(dimensions[i]);  growStack(len);  return addMultiNewarray(clazz,len);}  }
class C{  public int transcribe(IPoint[] hull,int offset){  int idx=offset;  int sz=points.size();  for (int i=0; i < sz; i++) {    hull[idx++]=points.get(i);  }  return idx;}  }
class C{  public void editTracks(){  List<Track> trackSelection=getRootController().getSelectedTracks();  if (!trackSelection.isEmpty()) {    boolean[] edit={true};    if (trackSelection.size() > 1) {      String alertHeader="Are you sure you want to edit multiple files?";      Alert alert=createAlert("",alertHeader,"",AlertType.CONFIRMATION);      Optional<ButtonType> result=alert.showAndWait();      result.ifPresent(null);    }    if (edit[0]) {      if (editStage == null) {        editStage=initStage(EDIT_LAYOUT,"Edit");        ((EditController)controllers.get(EDIT_LAYOUT)).setStage(editStage);      }      showStage(editStage);      LOG.debug("Showing edit stage");    }  }}  }
class C{  public ReadMemoryReply(final int packetId,final int errorCode,final IAddress address,final byte[] data){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(address,"IE01066: Address argument can not be null");    Preconditions.checkNotNull(data,"IE01067: Data argument can not be null");  } else {    if (address != null) {      throw new IllegalArgumentException("IE01068: Address argument must be null");    }    if (data != null) {      throw new IllegalArgumentException("IE01069: Data argument must be null");    }  }  startAddress=address;  memoryData=data == null ? null : data.clone();}  }
class C{  public static CompileStates instance(Context context){  CompileStates instance=context.get(compileStatesKey);  if (instance == null) {    instance=new CompileStates(context);  }  return instance;}  }
class C{  @Override public void stateChanged(ChangeEvent e){  if (e.getSource() == this.acceptCheckBox) {    this.acceptButton.setEnabled(this.acceptCheckBox.isSelected());  }}  }
class C{  public void addPoint(Vector3 point1,Vector3 controlPoint,Vector3 point2){  mPoint1=point1;  mControlPoint=controlPoint;  mPoint2=point2;}  }
class C{  @Override public void sendErrorStatus(String errorStatus) throws IOException {  this.sendMessage(OPERATIONS + ": " + errorStatus+ "\n");}  }
class C{  private boolean selectID(int nodeID,boolean show){  if (m_root == null)   return false;  log.config("NodeID=" + nodeID + ", Show="+ show+ ", root="+ m_root);  MTreeNode node=m_root.findNode(nodeID);  if (node != null) {    TreePath treePath=new TreePath(node.getPath());    log.config("Node=" + node + ", Path="+ treePath.toString());    tree.setSelectionPath(treePath);    if (show) {      tree.makeVisible(treePath);      tree.scrollPathToVisible(treePath);    }    return true;  }  log.info("Node not found; ID=" + nodeID);  return false;}  }
class C{  public ProductTypeServiceImpl(final GenericDAO<ProductType,Long> productTypeDao){  super(productTypeDao);}  }
class C{  public int size(){  return data.size();}  }
class C{  @Override public void createUntamperedRequest(){  CollisionDJBX33A DJBX33A=new CollisionDJBX33A();  String untampered=UtilHashDoS.generateUntampered(DJBX33A,optionNumberAttributes.getValue(),optionUseNamespaces.isOn());  String soapMessage=this.getOptionTextAreaSoapMessage().getValue();  String soapMessageFinal=this.getOptionTextAreaSoapMessage().replacePlaceholderWithPayload(soapMessage,untampered);  Map<String,String> httpHeaderMap=new HashMap<String,String>();  for (  Map.Entry<String,String> entry : getOriginalRequestHeaderFields().entrySet()) {    httpHeaderMap.put(entry.getKey(),entry.getValue());  }  this.setUntamperedRequestObject(httpHeaderMap,getOriginalRequest().getEndpoint(),soapMessageFinal);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.main);  mHanler=new Handler();  setVolumeControlStream(AudioManager.STREAM_VOICE_CALL);  if (!Engine.getInstance().isStarted()) {    startActivityForResult(new Intent(this,ScreenSplash.class),Main.RC_SPLASH);    return;  }  Bundle bundle=savedInstanceState;  if (bundle == null) {    Intent intent=getIntent();    bundle=intent == null ? null : intent.getExtras();  }  if (bundle != null && bundle.getInt("action",Main.ACTION_NONE) != Main.ACTION_NONE) {    handleAction(bundle);  } else   if (mScreenService != null) {    mScreenService.show(ScreenHome.class);  }}  }
class C{  public static String readInputStream(InputStream in) throws IOException {  BufferedReader br=new BufferedReader(new InputStreamReader(in));  char[] buffer=new char[INITIAL_READ_BUFFER_SIZE];  StringBuilder sb=new StringBuilder();  int readCount;  while ((readCount=br.read(buffer)) != -1) {    sb.append(buffer,0,readCount);  }  return sb.toString();}  }
class C{  @Override public ClusterSearchShardsRequest indices(String... indices){  if (indices == null) {    throw new IllegalArgumentException("indices must not be null");  } else {    for (int i=0; i < indices.length; i++) {      if (indices[i] == null) {        throw new IllegalArgumentException("indices[" + i + "] must not be null");      }    }  }  this.indices=indices;  return this;}  }
class C{  @Override protected DeLiCluEntry createRootEntry(){  return new DeLiCluDirectoryEntry(0,null,false,true);}  }
class C{  public final void close(){  try {    this.dataOut.flush();    if (this.trace) {      this.traceDataOut.flush();    }  } catch (  IOException ignore) {  }  try {    outStream.close();    if (this.trace) {      this.traceOutStream.close();    }  } catch (  IOException ex) {    throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_CLOSE_STATARCHIVER_FILE.toLocalizedString(),ex);  }  if (getSampleCount() == 0) {    deleteFileIfPossible(new File(getArchiveName()));  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  RecommendEntityDao.createTable(db,ifNotExists);}  }
class C{  public ContentDispositionHeader createContentDispositionHeader(String contentDisposition) throws ParseException {  if (contentDisposition == null)   throw new NullPointerException("null arg contentDisposition");  ContentDisposition c=new ContentDisposition();  c.setDispositionType(contentDisposition);  return c;}  }
class C{  public int encodeBase64Partial(int bits,int outputBytes,byte[] buffer,int outPtr){  buffer[outPtr++]=_base64ToAsciiB[(bits >> 18) & 0x3F];  buffer[outPtr++]=_base64ToAsciiB[(bits >> 12) & 0x3F];  if (_usesPadding) {    byte pb=(byte)_paddingChar;    buffer[outPtr++]=(outputBytes == 2) ? _base64ToAsciiB[(bits >> 6) & 0x3F] : pb;    buffer[outPtr++]=pb;  } else {    if (outputBytes == 2) {      buffer[outPtr++]=_base64ToAsciiB[(bits >> 6) & 0x3F];    }  }  return outPtr;}  }
class C{  public final boolean isProxy(){  return flags[PROXY_TICKET_FLAG];}  }
class C{  public OracleException(String message,Throwable cause,int errorCode){  super(message,cause);  this.errorCode=errorCode;}  }
class C{  public HandlerSubscriber(EventExecutor executor){  this(executor,DEFAULT_LOW_WATERMARK,DEFAULT_HIGH_WATERMARK);}  }
class C{  protected Intersection findClosestIntersection(LatLonPoint latLon){  Intersection inter=(Intersection)interQuadTree.get(latLon.getY(),latLon.getX());  if (inter == null)   logger.warning("no intersection at " + latLon);  return inter;}  }
class C{  public void addSpokenFlag(int flag){  final int flags=mMetadata.getInt(KEY_METADATA_SPEECH_FLAGS,0);  mMetadata.putInt(KEY_METADATA_SPEECH_FLAGS,flags | flag);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.434 -0500",hash_original_method="A949ED7F371D2CEC2724714D98F74A81",hash_generated_method="A35FEC8DECEC7FCDFB70A09E65B2BE34") protected SIPTransactionStack(StackMessageFactory messageFactory){  this();  this.sipMessageFactory=messageFactory;}  }
class C{  private static Result<?> decodeVariableHeader(ByteBuf buffer,MqttFixedHeader mqttFixedHeader){switch (mqttFixedHeader.messageType()) {case CONNECT:    return decodeConnectionVariableHeader(buffer);case CONNACK:  return decodeConnAckVariableHeader(buffer);case SUBSCRIBE:case UNSUBSCRIBE:case SUBACK:case UNSUBACK:case PUBACK:case PUBREC:case PUBCOMP:case PUBREL:return decodePacketIdVariableHeader(buffer);case PUBLISH:return decodePublishVariableHeader(buffer,mqttFixedHeader);default :return new Result<>(null,0);}}  }
class C{  public String multivalEncode(String value){  return value.replaceAll("\\\\","\\\\\\\\").replaceAll(",","\\\\,");}  }
class C{  public UrlModuleSourceProvider(Iterable<URI> privilegedUris,Iterable<URI> fallbackUris,UrlConnectionExpiryCalculator urlConnectionExpiryCalculator,UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider){  this.privilegedUris=privilegedUris;  this.fallbackUris=fallbackUris;  this.urlConnectionExpiryCalculator=urlConnectionExpiryCalculator;  this.urlConnectionSecurityDomainProvider=urlConnectionSecurityDomainProvider;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, KeyManagementException {  try {    SSLContext.getInstance(null,mProv.getName());    fail("NoSuchAlgorithmException or NullPointerException should be thrown " + "(protocol is null)");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      SSLContext.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        SSLContext.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (protocol: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  SSLContext sslC;  for (int i=0; i < validValues.length; i++) {    sslC=SSLContext.getInstance(validValues[i],mProv.getName());    assertTrue("Not instanceof SSLContext object",sslC instanceof SSLContext);    assertEquals("Incorrect protocol",sslC.getProtocol(),validValues[i]);    assertEquals("Incorrect provider",sslC.getProvider().getName(),mProv.getName());    checkSSLContext(sslC);  }}  }
class C{  public WrappedByteBuffer putLong(long v){  _autoExpand(8);  _buf.putLong(v);  return this;}  }
class C{  private void verifyMigrationDone(String version){  CoordinatorClient coordinator=getCoordinator();  Assert.assertEquals(MigrationStatus.DONE,coordinator.getMigrationStatus());  String checkpoint=getCheckpoint(version);  Assert.assertNull(checkpoint);}  }
class C{  public RepaintManager(ImageRenderer r){  renderer=r;}  }
class C{  public void testMaxNegZero(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  int aSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 0);}  }
class C{  static int[] convertMidTerms(int[] k){  int[] res=new int[3];  if (k.length == 1) {    res[0]=k[0];  } else {    if (k.length != 3) {      throw new IllegalArgumentException("Only Trinomials and pentanomials supported");    }    if (k[0] < k[1] && k[0] < k[2]) {      res[0]=k[0];      if (k[1] < k[2]) {        res[1]=k[1];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[1];      }    } else     if (k[1] < k[2]) {      res[0]=k[1];      if (k[0] < k[2]) {        res[1]=k[0];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[0];      }    } else {      res[0]=k[2];      if (k[0] < k[1]) {        res[1]=k[0];        res[2]=k[1];      } else {        res[1]=k[1];        res[2]=k[0];      }    }  }  return res;}  }
class C{  public boolean isBufferDirty(){  return true;}  }
class C{  public int fetchInteger(int tag) throws BerException {  int result=0;  final int backup=next;  try {    if (fetchTag() != tag) {      throw new BerException();    }    result=fetchIntegerValue();  } catch (  BerException e) {    next=backup;    throw e;  }  return result;}  }
class C{  protected void drawImage(int x,int y,int w,int h,String image){  Image img=loadImage(image);  if (img != null) {    g.drawImage(img,x,y,w,h,null);  }}  }
class C{  @UnpreemptibleNoWarn("The caller is prepared to lose control when it allocates a lock") static void growLocks(int id){  int spineId=id >> LOG_LOCK_CHUNK_SIZE;  if (spineId >= LOCK_SPINE_SIZE) {    VM.sysFail("Cannot grow lock array greater than maximum possible index");  }  for (int i=chunksAllocated; i <= spineId; i++) {    if (locks[i] != null) {      continue;    }    Lock[] newChunk=new Lock[LOCK_CHUNK_SIZE];    lockAllocationMutex.lock();    if (locks[i] == null) {      locks[i]=newChunk;      chunksAllocated++;    }    lockAllocationMutex.unlock();  }}  }
class C{  public PLCubicPanorama(){  super();}  }
class C{  public GetResponseMessage(GetResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }}  }
class C{  public static String printDateTime(LocalDateTime datetime){  return dfISO8601.print(datetime);}  }
class C{  @Override public SignatureLibraryRelease parse() throws IOException {  final SignatureLibraryRelease release=new SignatureLibraryRelease(this.getSignatureLibrary(),this.getReleaseVersionNumber());  final Model model1=new Model(SIGNALP_SIGNATURE_NAME1,SIGNALP_SIGNATURE_NAME1,null,null);  final Signature.Builder builder1=new Signature.Builder(SIGNALP_SIGNATURE_NAME1);  final Signature signature1=builder1.name(SIGNALP_SIGNATURE_NAME1).model(model1).signatureLibraryRelease(release).build();  release.addSignature(signature1);  final Model model2=new Model(SIGNALP_SIGNATURE_NAME2,SIGNALP_SIGNATURE_NAME2,null,null);  final Signature.Builder builder2=new Signature.Builder(SIGNALP_SIGNATURE_NAME2);  final Signature signature2=builder2.name(SIGNALP_SIGNATURE_NAME2).model(model2).signatureLibraryRelease(release).build();  release.addSignature(signature2);  return release;}  }
class C{  public Frame(int locals,int stack){  this.locals=new Type[locals];  this.stack=new Type[stack];}  }
class C{  public void enlarge(double scale){  double latMargin=scale * (lat2 - lat1);  double lngMargin=scale * (lng2 - lng1);  lat1-=latMargin;  lat2+=latMargin;  lng1-=lngMargin;  lng2+=lngMargin;}  }
class C{  public void exportCode(JavaClass source,JavaClass target) throws Exception {  ExportAnalyzer analyzer=new ExportAnalyzer(source,target);  CodeEnhancer visitor=new CodeEnhancer(source,this);  visitor.analyze(analyzer,false);  visitor.update();}  }
class C{  protected void drawFollow(Graphics g,Point2D[] pts,boolean reverse){  LinkedList points=new LinkedList();  if (reverse) {    for (int i=pts.length - 1; i >= 0; i--)     points.add(pts[i]);  } else {    for (int i=0; i < pts.length; i++)     points.add(pts[i]);  }  LinkedList polysegment=new LinkedList();  int l, x1, y1, x2, y2;  String c;  Point2D p1, p2;  double angle;  for (int i=0; i < text.length(); i++) {    c=text.substring(i,i + 1);    l=metrics.stringWidth(c);    if (points.isEmpty())     break;    LineUtil.retrievePoints(l,points,polysegment);    p1=(Point2D)polysegment.getFirst();    x1=(int)p1.getX();    y1=(int)p1.getY();    p2=(Point2D)polysegment.getLast();    x2=(int)p2.getX();    y2=(int)p2.getY();    angle=Math.atan2(y2 - y1,x2 - x1);    drawAngledString(g,c,x1,y1,angle);  }}  }
class C{  public TacticalGraphicSymbol(String sidc){  super();  init(sidc);}  }
class C{  public static TestDiagnosticLine fromDiagnosticFileLine(String diagnosticLine){  final String trimmedLine=diagnosticLine.trim();  if (trimmedLine.startsWith("#") || trimmedLine.isEmpty()) {    return new TestDiagnosticLine("",-1,diagnosticLine,EMPTY);  }  TestDiagnostic diagnostic=fromDiagnosticFileString(diagnosticLine);  return new TestDiagnosticLine("",diagnostic.getLineNumber(),diagnosticLine,Arrays.asList(diagnostic));}  }
class C{  public void appendTextString(byte[] textString){  if (null == textString) {    throw new NullPointerException("Text-string is null.");  }  if (null == mData) {    mData=new byte[textString.length];    System.arraycopy(textString,0,mData,0,textString.length);  } else {    ByteArrayOutputStream newTextString=new ByteArrayOutputStream();    try {      newTextString.write(mData);      newTextString.write(textString);    } catch (    IOException e) {      e.printStackTrace();      throw new NullPointerException("appendTextString: failed when write a new Text-string");    }    mData=newTextString.toByteArray();  }}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private void updateAlias(JLabel label,Alias alias){  if (alias != null) {    label.setText(alias.getName());    String icon=alias.getIconName();    if (icon != null) {      label.setIcon(mSettingsManager.getImageIcon(icon,SettingsManager.DEFAULT_ICON_SIZE));    } else {      label.setIcon(null);    }  } else {    label.setText("");    label.setIcon(null);  }}  }
class C{  public boolean verifyReader(){  return this.verifyReader;}  }
class C{  private static void launchDebugger(String dmlScriptStr,String fnameOptConfig,Map<String,String> argVals,boolean parsePyDML) throws ParseException, IOException, DMLRuntimeException, DMLDebuggerException, LanguageException, HopsException, LopsException {  DMLDebuggerProgramInfo dbprog=new DMLDebuggerProgramInfo();  DMLConfig conf=DMLConfig.readConfigurationFile(fnameOptConfig);  ConfigurationManager.setGlobalConfig(conf);  AParserWrapper parser=AParserWrapper.createParser(parsePyDML);  DMLProgram prog=parser.parse(DML_FILE_PATH_ANTLR_PARSER,dmlScriptStr,argVals);  DMLTranslator dmlt=new DMLTranslator(prog);  dmlt.liveVariableAnalysis(prog);  dmlt.validateParseTree(prog);  dmlt.constructHops(prog);  dmlt.rewriteHopsDAG(prog);  dmlt.constructLops(prog);  dbprog.rtprog=prog.getRuntimeProgram(conf);  try {    initHadoopExecution(conf);    DMLDebugger SystemMLdb=new DMLDebugger(dbprog,dmlScriptStr);    SystemMLdb.runSystemMLDebugger();  }  finally {    cleanupHadoopExecution(conf);  }}  }
class C{  public static VMRequest highFraction(float frac){  if (VM.HEAP_LAYOUT_64BIT) {    return common64Bit(true);  }  return new VMRequest(REQUEST_FRACTION,Address.zero(),Extent.zero(),frac,true);}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_trainInstances == null) {    text.append("CFS subset evaluator has not been built yet\n");  } else {    text.append("\tCFS Subset Evaluator\n");    if (m_missingSeparate) {      text.append("\tTreating missing values as a separate value\n");    }    if (m_locallyPredictive) {      text.append("\tIncluding locally predictive attributes\n");    }  }  return text.toString();}  }
class C{  private void unwrapData() throws IgniteCheckedException, SSLException {  if (log.isDebugEnabled())   log.debug("Unwrapping received data: " + ses);  inNetBuf.flip();  SSLEngineResult res=unwrap0();  inNetBuf.compact();  checkStatus(res);  renegotiateIfNeeded(res);}  }
class C{  public static ceylon.language.meta.declaration.Module findLoadedModule(String name,String version){  com.redhat.ceylon.model.typechecker.model.Module module=moduleManager.findLoadedModule(name,version);  return module != null ? getOrCreateMetamodel(null,module,null,true) : null;}  }
class C{  public void endBoolean(boolean value){}  }
class C{  public static Organization toVendor(VOOrganization voOrganization) throws ValidationException {  validateVendorMandatoryFields(voOrganization);  return toCustomer(voOrganization);}  }
class C{  public UnaryOperator createUnaryOperatorFromString(EDataType eDataType,String initialValue){  UnaryOperator result=UnaryOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  @Override public final void updateCursorBoxOnScreen(final int[] rectParams,final int outlineColor){  if (options.getDisplayView() != Display.SINGLE_PAGE) {    return;  }  pages.updateCursorBoxOnScreen(rectParams,outlineColor,getPageNumber(),x_size,y_size);}  }
class C{  public boolean isCritical(){  return criticality;}  }
class C{  public JCTree.JCCompilationUnit parse(JavaFileObject filename){  JavaFileObject prev=log.useSource(filename);  try {    JCTree.JCCompilationUnit t=parse(filename,readSource(filename));    if (t.endPositions != null)     log.setEndPosTable(filename,t.endPositions);    return t;  }  finally {    log.useSource(prev);  }}  }
class C{  public static double[] toDoubleArray(final long[] array){  double[] values=new double[array.length];  for (int i=0; i < array.length; i++)   values[i]=array[i];  return values;}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case DomPackage.TAG_DEFINITION:    return convertTagDefinitionToString(eDataType,instanceValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  String formatRomanDigit(int level,int digit){  String result="";  if (digit == 9) {    result=result + romanChars[level][0];    result=result + romanChars[level + 1][0];    return result;  } else   if (digit == 4) {    result=result + romanChars[level][0];    result=result + romanChars[level][1];    return result;  } else   if (digit >= 5) {    result=result + romanChars[level][1];    digit-=5;  }  for (int i=0; i < digit; i++) {    result=result + romanChars[level][0];  }  return result;}  }
class C{  public CProjectContainer(final IDatabase database,final INaviProject project){  m_database=Preconditions.checkNotNull(database,"IE01785: database argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE01786: project argument can not be null");  m_addressSpace=null;  m_provider=new ProjectTraceProvider(m_project);  m_debuggerProvider=new DebuggerProvider(new ProjectTargetSettings(m_project));  if (m_project.isLoaded()) {    updateProjectDebuggers();  }  m_project.addListener(m_listener);  if (m_project.isLoaded()) {    for (    final INaviAddressSpace addressSpace : m_project.getContent().getAddressSpaces()) {      initializeAddressSpaceListeners(addressSpace);    }  }}  }
class C{  public VNXeCommandResult createConsistencyGroup(ConsistencyGroupCreateParam createParam){  _url=URL_CREATE;  return postRequestSync(createParam);}  }
class C{  public static String doThrustCheck(MovePath md,Client client){  StringBuffer nagReport=new StringBuffer();  List<TargetRoll> psrList=new ArrayList<TargetRoll>();  if (client.getGame().useVectorMove()) {    return nagReport.toString();  }  final Entity entity=md.getEntity();  if (!(entity instanceof Aero)) {    return nagReport.toString();  }  EntityMovementType overallMoveType=EntityMovementType.MOVE_NONE;  Aero a=(Aero)entity;  PilotingRollData rollTarget;  overallMoveType=md.getLastStepMovementType();  int thrustUsed=0;  int j=0;  for (final Enumeration<MoveStep> i=md.getSteps(); i.hasMoreElements(); ) {    final MoveStep step=i.nextElement();    j++;    if ((step.getDistance() == 0) && (md.length() != j)) {      thrustUsed+=step.getMp();    } else {      if ((step.getDistance() == 0) && (md.length() == j)) {        thrustUsed+=step.getMp();      }      rollTarget=a.checkThrustSI(thrustUsed,overallMoveType);      checkNag(rollTarget,nagReport,psrList);      int hits=entity.getCrew().getHits();      int health=6 - hits;      if (thrustUsed > (2 * health)) {        int targetroll=2 + (thrustUsed - (2 * health)) + (2 * hits);        nagReport.append(Messages.getString("MovementDisplay.addNag",new Object[]{Integer.toString(targetroll),"Thrust exceeded twice pilot's health in single hex"}));      }      thrustUsed=0;    }  }  return nagReport.toString();}  }
class C{  public IterationWrapper(Iteration<? extends E,? extends X> iter){  assert iter != null;  wrappedIter=iter;}  }
class C{  public void testReservePassiveAvailabilityChange() throws Throwable {  createServers(3);  CopycatServer passive=createServer(nextMember(Member.Type.PASSIVE));  passive.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  CopycatServer reserve=createServer(nextMember(Member.Type.RESERVE));  reserve.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(10000,2);  reserve.cluster().member(passive.cluster().member().address()).onStatusChange(null);  passive.shutdown().thenRun(null);  await(10000,2);}  }
class C{  public void stop(){  if (isRunning()) {    unscheduleSelf(this);  }}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  private static XYDataset createDataset(){  TimeSeries s1=new TimeSeries("L&G European Index Trust");  s1.add(new Month(2,2001),181.8);  s1.add(new Month(3,2001),167.3);  s1.add(new Month(4,2001),153.8);  s1.add(new Month(5,2001),167.6);  s1.add(new Month(6,2001),158.8);  s1.add(new Month(7,2001),148.3);  s1.add(new Month(8,2001),153.9);  s1.add(new Month(9,2001),142.7);  s1.add(new Month(10,2001),123.2);  s1.add(new Month(11,2001),131.8);  s1.add(new Month(12,2001),139.6);  s1.add(new Month(1,2002),142.9);  s1.add(new Month(2,2002),138.7);  s1.add(new Month(3,2002),137.3);  s1.add(new Month(4,2002),143.9);  s1.add(new Month(5,2002),139.8);  s1.add(new Month(6,2002),137.0);  s1.add(new Month(7,2002),132.8);  TimeSeries s2=new TimeSeries("L&G UK Index Trust");  s2.add(new Month(2,2001),129.6);  s2.add(new Month(3,2001),123.2);  s2.add(new Month(4,2001),117.2);  s2.add(new Month(5,2001),124.1);  s2.add(new Month(6,2001),122.6);  s2.add(new Month(7,2001),119.2);  s2.add(new Month(8,2001),116.5);  s2.add(new Month(9,2001),112.7);  s2.add(new Month(10,2001),101.5);  s2.add(new Month(11,2001),106.1);  s2.add(new Month(12,2001),110.3);  s2.add(new Month(1,2002),111.7);  s2.add(new Month(2,2002),111.0);  s2.add(new Month(3,2002),109.6);  s2.add(new Month(4,2002),113.2);  s2.add(new Month(5,2002),111.6);  s2.add(new Month(6,2002),108.8);  s2.add(new Month(7,2002),101.6);  TimeSeriesCollection dataset=new TimeSeriesCollection();  dataset.addSeries(s1);  dataset.addSeries(s2);  return dataset;}  }
class C{  public void globalInit() throws Exception {  computeRotationTime();  InterProcessLock lock=null;  try {    lock=_coordinator.getLock(DISTRIBUTED_KEY_TOKEN_LOCK);    lock.acquire();    if (!doesConfigExist()) {      TokenKeysBundle bundle=TokenKeysBundle.createNewTokenKeysBundle();      createOrUpdateBundle(bundle);      updateCachedTokenKeys(bundle);    } else {      updateCachedKeys();      _log.debug("Token keys configuration exists, loaded keys");      _log.debug("Current token key {}",_cachedTokenKeysBundle.getCurrentKeyEntry());    }    keyRotationExecutor.scheduleWithFixedDelay(new KeyRotationThread(),0,_keyRotationIntervalInMsecs,TimeUnit.MILLISECONDS);  } catch (  Exception ex) {    _log.error("Exception during initialization of TokenKeyGenerator",ex);  } finally {    try {      if (lock != null) {        lock.release();      }    } catch (    Exception ex) {      _log.error("Could not release the lock during TokenKeyGenerator.init()");      throw ex;    }  }}  }
class C{  public Builder addInClause(String fieldName,Collection<String> itemNames,Occurance occurance){  if (itemNames.size() == 1) {    return addFieldClause(fieldName,itemNames.iterator().next(),occurance);  }  Query.Builder inClause=Query.Builder.create(occurance);  for (  String itemName : itemNames) {    inClause.addFieldClause(fieldName,itemName,Occurance.SHOULD_OCCUR);  }  return addClause(inClause.build());}  }
class C{  private void injectForBroadcastReceiver(SootField brField,SootField intentField){  SootMethod onReceive=Scene.v().getMethod("<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>");  logger.info("Adding onReceive call in Harness for Field {}",brField);  Local compLocal=Jimple.v().newLocal("_$injectinterapp_comp_local_" + localID++,brField.getType());  Harness.v().addLocalToMain(compLocal);  Local intentLocal=Jimple.v().newLocal("_$injectinterapp_intent_local_" + localID++,intentField.getType());  Harness.v().addLocalToMain(intentLocal);  Stmt compLocalAssign=Jimple.v().newAssignStmt(compLocal,Jimple.v().newStaticFieldRef(brField.makeRef()));  Harness.v().addStmtToEndOfMainLoop(compLocalAssign);  Stmt intentAssign=Jimple.v().newAssignStmt(intentLocal,Jimple.v().newStaticFieldRef(intentField.makeRef()));  Harness.v().addStmtToEndOfMainLoop(intentAssign);  Local contextLocal=Jimple.v().newLocal("_$injectinterapp_content_local_" + localID++,intentField.getType());  Harness.v().addLocalToMain(contextLocal);  SootField contextField=Scene.v().getSootClass("droidsafe.runtime.DroidSafeAndroidRuntime").getFieldByName("context");  Stmt contextAssign=Jimple.v().newAssignStmt(contextLocal,Jimple.v().newStaticFieldRef(contextField.makeRef()));  Harness.v().addStmtToEndOfMainLoop(contextAssign);  List<Value> args=new LinkedList<Value>();  args.add(contextLocal);  args.add(intentLocal);  Stmt onReceiveCall=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(compLocal,onReceive.makeRef(),args));  Harness.v().addStmtToEndOfMainLoop(onReceiveCall);  RCFG.v().ignoreInvokeForOutputEvents(onReceiveCall);}  }
class C{  public boolean hasActiveEvent(){  return activeEvent;}  }
class C{  private static boolean caselessCompare(char a,char b){  return Character.toLowerCase(a) == Character.toLowerCase(b);}  }
class C{  public static void clickToolbarCollapseButton(){  onView(withContentDescription("Collapse")).perform(click());}  }
class C{  public static JsonValue parse(Reader reader) throws IOException {  if (reader == null) {    throw new NullPointerException("reader is null");  }  return new JsonParser(reader).parse();}  }
class C{  public static Map<String,Object> sendMail(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  String communicationEventId=(String)context.get("communicationEventId");  String orderId=(String)context.get("orderId");  Locale locale=(Locale)context.get("locale");  if (communicationEventId != null) {    Debug.logInfo("SendMail Running, for communicationEventId : " + communicationEventId,module);  }  Map<String,Object> results=ServiceUtil.returnSuccess();  String subject=(String)context.get("subject");  subject=FlexibleStringExpander.expandString(subject,context);  String partyId=(String)context.get("partyId");  String body=(String)context.get("body");  List<Map<String,Object>> bodyParts=UtilGenerics.checkList(context.get("bodyParts"));  GenericValue userLogin=(GenericValue)context.get("userLogin");  results.put("communicationEventId",communicationEventId);  results.put("partyId",partyId);  results.put("subject",subject);  if (UtilValidate.isNotEmpty(orderId)) {    results.put("orderId",orderId);  }  if (UtilValidate.isNotEmpty(body)) {    body=FlexibleStringExpander.expandString(body,context);    results.put("body",body);  }  if (UtilValidate.isNotEmpty(bodyParts)) {    results.put("bodyParts",bodyParts);  }  results.put("userLogin",userLogin);  String sendTo=(String)context.get("sendTo");  String sendCc=(String)context.get("sendCc");  String sendBcc=(String)context.get("sendBcc");  String redirectAddress=EntityUtilProperties.getPropertyValue("general.properties","mail.notifications.redirectTo",delegator);  if (UtilValidate.isNotEmpty(redirectAddress)) {    String originalRecipients=" [To: " + sendTo + ", Cc: "+ sendCc+ ", Bcc: "+ sendBcc+ "]";    subject+=originalRecipients;    sendTo=redirectAddress;    sendCc=null;    sendBcc=null;    if (subject.length() > 255) {      subject=subject.substring(0,255);    }  }  String sendFrom=(String)context.get("sendFrom");  String sendType=(String)context.get("sendType");  String port=(String)context.get("port");  String socketFactoryClass=(String)context.get("socketFactoryClass");  String socketFactoryPort=(String)context.get("socketFactoryPort");  String socketFactoryFallback=(String)context.get("socketFactoryFallback");  String sendVia=(String)context.get("sendVia");  String authUser=(String)context.get("authUser");  String authPass=(String)context.get("authPass");  String messageId=(String)context.get("messageId");  String contentType=(String)context.get("contentType");  Boolean sendPartial=(Boolean)context.get("sendPartial");  Boolean isStartTLSEnabled=(Boolean)context.get("startTLSEnabled");  boolean useSmtpAuth=false;  if (sendType == null || sendType.equals("mail.smtp.host")) {    sendType="mail.smtp.host";    if (UtilValidate.isEmpty(sendVia)) {      sendVia=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.relay.host","localhost",delegator);    }    if (UtilValidate.isEmpty(authUser)) {      authUser=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.auth.user",delegator);    }    if (UtilValidate.isEmpty(authPass)) {      authPass=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.auth.password",delegator);    }    if (UtilValidate.isNotEmpty(authUser)) {      useSmtpAuth=true;    }    if (UtilValidate.isEmpty(port)) {      port=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.port",delegator);    }    if (UtilValidate.isEmpty(socketFactoryPort)) {      socketFactoryPort=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.port",delegator);    }    if (UtilValidate.isEmpty(socketFactoryClass)) {      socketFactoryClass=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.class",delegator);    }    if (UtilValidate.isEmpty(socketFactoryFallback)) {      socketFactoryFallback=EntityUtilProperties.getPropertyValue("general.properties","mail.smtp.socketFactory.fallback","false",delegator);    }    if (sendPartial == null) {      sendPartial=EntityUtilProperties.propertyValueEqualsIgnoreCase("general.properties","mail.smtp.sendpartial","true",delegator) ? true : false;    }    if (isStartTLSEnabled == null) {      isStartTLSEnabled=EntityUtilProperties.propertyValueEqualsIgnoreCase("general.properties","mail.smtp.starttls.enable","true",delegator);    }  } else   if (sendVia == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendMissingParameterSendVia",locale));  }  if (contentType == null) {    contentType="text/html";  }  if (UtilValidate.isNotEmpty(bodyParts)) {    contentType="multipart/mixed";  }  results.put("contentType",contentType);  Session session;  MimeMessage mail;  try {    Properties props=System.getProperties();    props.put(sendType,sendVia);    if (UtilValidate.isNotEmpty(port)) {      props.put("mail.smtp.port",port);    }    if (UtilValidate.isNotEmpty(socketFactoryPort)) {      props.put("mail.smtp.socketFactory.port",socketFactoryPort);    }    if (UtilValidate.isNotEmpty(socketFactoryClass)) {      props.put("mail.smtp.socketFactory.class",socketFactoryClass);      Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());    }    if (UtilValidate.isNotEmpty(socketFactoryFallback)) {      props.put("mail.smtp.socketFactory.fallback",socketFactoryFallback);    }    if (useSmtpAuth) {      props.put("mail.smtp.auth","true");    }    if (sendPartial != null) {      props.put("mail.smtp.sendpartial",sendPartial ? "true" : "false");    }    if (isStartTLSEnabled) {      props.put("mail.smtp.starttls.enable","true");    }    session=Session.getInstance(props);    boolean debug=EntityUtilProperties.propertyValueEqualsIgnoreCase("general.properties","mail.debug.on","Y",delegator);    session.setDebug(debug);    mail=new MimeMessage(session);    if (messageId != null) {      mail.setHeader("In-Reply-To",messageId);      mail.setHeader("References",messageId);    }    mail.setFrom(new InternetAddress(sendFrom));    mail.setSubject(subject,"UTF-8");    mail.setHeader("X-Mailer","Apache OFBiz, The Apache Open For Business Project");    mail.setSentDate(new Date());    mail.addRecipients(Message.RecipientType.TO,sendTo);    if (UtilValidate.isNotEmpty(sendCc)) {      mail.addRecipients(Message.RecipientType.CC,sendCc);    }    if (UtilValidate.isNotEmpty(sendBcc)) {      mail.addRecipients(Message.RecipientType.BCC,sendBcc);    }    if (UtilValidate.isNotEmpty(bodyParts)) {      MimeMultipart mp=new MimeMultipart();      Debug.logInfo(bodyParts.size() + " multiparts found",module);      for (      Map<String,Object> bodyPart : bodyParts) {        Object bodyPartContent=bodyPart.get("content");        MimeBodyPart mbp=new MimeBodyPart();        if (bodyPartContent instanceof String) {          Debug.logInfo("part of type: " + bodyPart.get("type") + " and size: "+ bodyPart.get("content").toString().length(),module);          mbp.setText((String)bodyPartContent,"UTF-8",((String)bodyPart.get("type")).substring(5));        } else         if (bodyPartContent instanceof byte[]) {          ByteArrayDataSource bads=new ByteArrayDataSource((byte[])bodyPartContent,(String)bodyPart.get("type"));          Debug.logInfo("part of type: " + bodyPart.get("type") + " and size: "+ ((byte[])bodyPartContent).length,module);          mbp.setDataHandler(new DataHandler(bads));        } else         if (bodyPartContent instanceof DataHandler) {          mbp.setDataHandler((DataHandler)bodyPartContent);        } else {          mbp.setDataHandler(new DataHandler(bodyPartContent,(String)bodyPart.get("type")));        }        String fileName=(String)bodyPart.get("filename");        if (fileName != null) {          mbp.setFileName(fileName);        }        mp.addBodyPart(mbp);      }      mail.setContent(mp);      mail.saveChanges();    } else {      if (contentType.startsWith("text")) {        mail.setText(body,"UTF-8",contentType.substring(5));      } else {        mail.setContent(body,contentType);      }      mail.saveChanges();    }  } catch (  MessagingException e) {    Debug.logError(e,"MessagingException when creating message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    Debug.logError("Email message that could not be created to [" + sendTo + "] had context: "+ context,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendMessagingException",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));  }catch (  IOException e) {    Debug.logError(e,"IOExcepton when creating message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    Debug.logError("Email message that could not be created to [" + sendTo + "] had context: "+ context,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendIOException",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));  }  String mailEnabled=EntityUtilProperties.getPropertyValue("general.properties","mail.notifications.enabled","N",delegator);  if (!"Y".equalsIgnoreCase(mailEnabled)) {    Debug.logImportant("Mail notifications disabled in general.properties; mail with subject [" + subject + "] not sent to addressee ["+ sendTo+ "]",module);    Debug.logVerbose("What would have been sent, the addressee: " + sendTo + " subject: "+ subject+ " context: "+ context,module);    results.put("messageWrapper",new MimeMessageWrapper(session,mail));    return results;  }  Transport trans=null;  try {    trans=session.getTransport("smtp");    if (!useSmtpAuth) {      trans.connect();    } else {      trans.connect(sendVia,authUser,authPass);    }    trans.sendMessage(mail,mail.getAllRecipients());    results.put("messageWrapper",new MimeMessageWrapper(session,mail));    results.put("messageId",mail.getMessageID());    trans.close();  } catch (  SendFailedException e) {    Debug.logError(e,"[ADDRERR] Address error when sending message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    List<SMTPAddressFailedException> failedAddresses=new LinkedList<SMTPAddressFailedException>();    Exception nestedException=null;    while ((nestedException=e.getNextException()) != null && nestedException instanceof MessagingException) {      if (nestedException instanceof SMTPAddressFailedException) {        SMTPAddressFailedException safe=(SMTPAddressFailedException)nestedException;        Debug.logError("Failed to send message to [" + safe.getAddress() + "], return code ["+ safe.getReturnCode()+ "], return message ["+ safe.getMessage()+ "]",module);        failedAddresses.add(safe);        break;      }    }    Boolean sendFailureNotification=(Boolean)context.get("sendFailureNotification");    if (sendFailureNotification == null || sendFailureNotification) {      sendFailureNotification(ctx,context,mail,failedAddresses);      results.put("messageWrapper",new MimeMessageWrapper(session,mail));      try {        results.put("messageId",mail.getMessageID());        trans.close();      } catch (      MessagingException e1) {        Debug.logError(e1,module);      }    } else {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendAddressError",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));    }  }catch (  MessagingException e) {    Debug.logError(e,"[CON] Connection error when sending message to [" + sendTo + "] from ["+ sendFrom+ "] cc ["+ sendCc+ "] bcc ["+ sendBcc+ "] subject ["+ subject+ "]",module);    Debug.logError("Email message that could not be sent to [" + sendTo + "] had context: "+ context,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendConnectionError",UtilMisc.toMap("sendTo",sendTo,"sendFrom",sendFrom,"sendCc",sendCc,"sendBcc",sendBcc,"subject",subject),locale));  }  return results;}  }
class C{  public void appendBytes(byte[] bs,int start,int len){  elems=ArrayUtils.ensureCapacity(elems,length + len);  System.arraycopy(bs,start,elems,length,len);  length+=len;}  }
class C{  private void startScrolling(){  if (!isScrollingPerformed) {    isScrollingPerformed=true;    notifyScrollingListenersAboutStart();  }}  }
class C{  public void onProgressData(byte[] responseBody){  Log.d(LOG_TAG,"onProgressData(byte[]) was not overriden, but callback was received");}  }
class C{  public void writeAttribute(String name,String value,String prefix) throws Exception {  if (last != Tag.START) {    throw new NodeException("Start element required");  }  write(' ');  write(name,prefix);  write('=');  write('"');  escape(value);  write('"');}  }
class C{  private Border createNonRolloverToggleBorder(){  UIDefaults table=UIManager.getLookAndFeelDefaults();  return new CompoundBorder(new BasicBorders.RadioButtonBorder(table.getColor("ToggleButton.shadow"),table.getColor("ToggleButton.darkShadow"),table.getColor("ToggleButton.light"),table.getColor("ToggleButton.highlight")),new BasicBorders.RolloverMarginBorder());}  }
class C{  public int toReal(){  return _real;}  }
class C{  private void addParsedAsAnnotations(final JCas jCas,final int offset,final Parse parsed){  final String type=parsed.getType();  if (OpenNLPParser.PHRASE_TYPES.contains(type)) {    final Span span=parsed.getSpan();    final PhraseChunk phraseChunk=new PhraseChunk(jCas);    phraseChunk.setBegin(offset + span.getStart());    phraseChunk.setEnd(offset + span.getEnd());    phraseChunk.setChunkType(parsed.getType());    addToJCasIndex(phraseChunk);  }  Arrays.stream(parsed.getChildren()).forEach(null);}  }
class C{  public static boolean isLocalContentUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return FrescoUri.LOCAL_CONTENT_SCHEME.equals(scheme);}  }
class C{  public XPathSubsetContentSelector(ContentManager cm,XBLOMContentElement content,Element bound,String selector){  super(cm,content,bound);  parseSelector(selector);}  }
class C{  protected RestClient newPortalClient(){  URI baseUri=URI.create(String.format("%s://%s:%s",protocol,host,portalPort));  return new RestClient(baseUri,this);}  }
class C{  public int mainInit(final String[] args,final OutputStream out,final PrintStream err){  if (mCli == null) {    throw new RuntimeException("Incorrectly configured module");  }  return mCli.mainInit(args,out,err);}  }
class C{  public Matrix sample_X(Matrix Z){  Matrix P_X=prob_X(Z);  return MatrixUtils.sample(P_X,m_R);}  }
class C{  public void reportTable(HSSFWorkbook book,LinkedList<ReportTO> data,HSSFSheet sheet,int fila){  HSSFRow row;  HSSFFont font=book.createFont();  font.setFontHeightInPoints((short)10);  font.setFontName(HSSFFont.FONT_ARIAL);  HSSFRichTextString text;  Iterator<ReportTO> itRep=data.iterator();  Boolean newRow=false;  sheet.setColumnWidth((short)0,(short)(13 * 256));  sheet.setColumnWidth((short)1,(short)(60 * 256));  for (int i=2; i < (cols); i++) {    sheet.setColumnWidth((short)i,(short)(15 * 256));  }  HSSFCellStyle cellStyle=book.createCellStyle();  HSSFCellStyle cellStyleD=book.createCellStyle();  HSSFCellStyle cellStyleN=book.createCellStyle();  while (itRep.hasNext()) {    short col=0;    ReportTO rpt=itRep.next();    if (!newRow) {      cellStyle=book.createCellStyle();      cellStyleD=book.createCellStyle();      cellStyleN=book.createCellStyle();    }    newRow=false;    if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("T")) {      row=sheet.createRow(fila++);      HSSFFont fontT=book.createFont();      fontT.setFontHeightInPoints((short)12);      fontT.setFontName(HSSFFont.FONT_ARIAL);      fontT.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);      HSSFCellStyle cellStyleT=book.createCellStyle();      cellStyleT.setWrapText(true);      cellStyleT.setAlignment(HSSFCellStyle.ALIGN_CENTER);      cellStyleT.setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);      cellStyleT.setFont(fontT);      Region region=new Region(fila - 1,(short)0,fila - 1,endRegion);      sheet.addMergedRegion(region);      text=new HSSFRichTextString(rpt.getDescription());      HSSFCell cellT=row.createCell(col);      cellT.setCellStyle(cellStyleT);      cellT.setCellValue(text);      newRow=true;    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("L")) {      cellStyle.setWrapText(true);      cellStyle.setBorderTop(HSSFCellStyle.BORDER_MEDIUM);      cellStyle.setBottomBorderColor((short)8);      cellStyleD.setWrapText(true);      cellStyleD.setBorderTop(HSSFCellStyle.BORDER_MEDIUM);      cellStyleD.setBottomBorderColor((short)8);      cellStyleN.setWrapText(true);      cellStyleN.setBorderTop(HSSFCellStyle.BORDER_MEDIUM);      cellStyleN.setBottomBorderColor((short)8);      newRow=true;    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("X")) {      cellStyle.setWrapText(true);      cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);      cellStyle.setBorderTop(HSSFCellStyle.BORDER_MEDIUM);      cellStyle.setBottomBorderColor((short)8);      newRow=true;    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("Z")) {      cellStyle.setWrapText(true);      cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);      cellStyle.setBorderTop(HSSFCellStyle.BORDER_DOUBLE);      cellStyle.setBottomBorderColor((short)8);      row=sheet.createRow(fila++);      ReportTO rptD=new ReportTO();      putRow(cellStyle,cellStyleD,cellStyleN,sheet,row,fila,rptD);      cellStyle=book.createCellStyle();      newRow=true;    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("D")) {      cellStyleD.setWrapText(true);      cellStyleD.setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);      cellStyleD.setBorderTop(HSSFCellStyle.BORDER_MEDIUM);      cellStyleD.setBottomBorderColor((short)8);      newRow=true;    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("S")) {      row=sheet.createRow(fila++);      newRow=true;    } else     if (rpt.getTablevel() != null && rpt.getTablevel() > 0) {      row=sheet.createRow(fila++);      String jerarchy="";      for (int i=1; i <= rpt.getTablevel(); i++) {        jerarchy=jerarchy + "   ";      }      Region region=new Region(fila - 1,(short)0,fila - 1,endRegion);      sheet.addMergedRegion(region);      text=new HSSFRichTextString(jerarchy + rpt.getDescription());      HSSFCell cellJ=row.createCell(col);      cellJ.setCellValue(text);      newRow=true;    } else {      row=sheet.createRow(fila++);      putRow(cellStyle,cellStyleD,cellStyleN,sheet,row,fila,rpt);    }  }}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  int width=drawable.getIntrinsicWidth();  int height=drawable.getIntrinsicHeight();  Bitmap bitmap=Bitmap.createBitmap(width,height,drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,width,height);  drawable.draw(canvas);  return bitmap;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() % right.num());}  }
class C{  public static void isTrue(boolean val){  if (!val)   throw new IllegalArgumentException("Must be true");}  }
class C{  private String pad(int n){  return n < 10 ? "0" + n : n + "";}  }
class C{  public static String toJSONString(Collection collection){  final StringWriter writer=new StringWriter();  try {    writeJSONString(collection,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected Map<String,Object> itemToEntityResponse(String root_url){  return super.toEntityResponse(root_url);}  }
class C{  private void drawDiscete(DiscreteUncertainObject uo,MarkerLibrary ml,int cnum,double size){  final int e=uo.getNumberSamples();  final double ssize=size * Math.sqrt(e);  for (int i=0; i < e; i++) {    final NumberVector s=uo.getSample(i);    if (s == null) {      continue;    }    double[] v=proj.fastProjectDataToRenderSpace(s);    if (v[0] != v[0] || v[1] != v[1]) {      continue;    }    ml.useMarker(svgp,layer,v[0],v[1],cnum,uo.getWeight(i) * ssize);  }}  }
class C{  private void checkSetup(){synchronized (TransactionManagerImp.class) {    txmgr_=TransactionManagerImp.getTransactionManager();    if (txmgr_ == null) {      UserTransactionService uts=new UserTransactionServiceImp();      uts.init();      txmgr_=TransactionManagerImp.getTransactionManager();    }  }}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  protected void sendPrepare(final String statementText) throws SQLException, IOException {  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(WireProtocolConstants.op_prepare_statement);  xdrOut.writeInt(getTransaction().getHandle());  xdrOut.writeInt(getHandle());  xdrOut.writeInt(getDatabase().getConnectionDialect());  xdrOut.writeString(statementText,getDatabase().getEncoding());  xdrOut.writeBuffer(getStatementInfoRequestItems());  xdrOut.writeInt(getDefaultSqlInfoSize());}  }
class C{  private void writeNetBuffer() throws IgniteCheckedException {  try {    ch.write(outNetBuf);  } catch (  IOException e) {    throw new IgniteCheckedException("Failed to write byte to socket.",e);  }}  }
class C{  public Vector2f interpolate(Vector2f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;  return this;}  }
class C{  public Compactor minorIndex(long index){  this.minorIndex=Math.max(this.minorIndex,index);  Segment segment=segments.segment(minorIndex);  if (segment != null) {    compactIndex=segment.firstIndex();  }  return this;}  }
class C{  public static BatchStatus createCreatedStatus(){  BatchStatus retval=new BatchStatus();  retval.setCode(HttpURLConnection.HTTP_CREATED);  retval.setReason("Created");  return retval;}  }
class C{  public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseNameValuePair(buffer,cursor);}  }
class C{  public void dismissSuggestions(){  if (mSuggestionsListView.getVisibility() == VISIBLE) {    mSuggestionsListView.setVisibility(GONE);  }}  }
class C{  private static boolean tagExists(final String tagTitle,final List<JSONObject> tags) throws JSONException {  for (  final JSONObject tag : tags) {    if (tag.getString(Tag.TAG_TITLE).equals(tagTitle)) {      return true;    }  }  return false;}  }
class C{  public Second(){  this(new Date());}  }
class C{  private void launchReport(KeyNamePair pp){  MPrintFormat pf=MPrintFormat.get(Env.getCtx(),pp.getKey(),false);  launchReport(pf);}  }
class C{  public static Class<?> loadClassWithout(ClassLoader loader,String className) throws ClassNotFoundException {  MBEANSERVER_LOGGER.logp(Level.FINEST,DefaultLoaderRepository.class.getName(),"loadClassWithout",className);  return load(loader,className);}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public void removeGenClass(SootClass clz){  genClasses.remove(clz.getName());}  }
class C{  public boolean isMultipleAssignmentDeclaration(){  return getLeftExpression() instanceof TupleExpression;}  }
class C{  public Bindings addOptComponent(String property,Class<? extends IValidatable> clazz,JToggleButton c){  return addOptComponent(property,clazz,c,false);}  }
class C{  public LUDecomposition lu(){  return new LUDecomposition(this);}  }
class C{  public static void addCombinerRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addCombinerRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  static void forceSetFactory2(LayoutInflater inflater,LayoutInflater.Factory2 factory){  if (!sCheckedField) {    try {      sLayoutInflaterFactory2Field=LayoutInflater.class.getDeclaredField("mFactory2");      sLayoutInflaterFactory2Field.setAccessible(true);    } catch (    NoSuchFieldException e) {      Log.e(TAG,"forceSetFactory2 Could not find field 'mFactory2' on class " + LayoutInflater.class.getName() + "; inflation may have unexpected results.",e);    }    sCheckedField=true;  }  if (sLayoutInflaterFactory2Field != null) {    try {      sLayoutInflaterFactory2Field.set(inflater,factory);    } catch (    IllegalAccessException e) {      Log.e(TAG,"forceSetFactory2 could not set the Factory2 on LayoutInflater " + inflater + "; inflation may have unexpected results.",e);    }  }}  }
class C{  public static XmlJmapper readAtRuntime(String xmlPath) throws MalformedURLException, IOException {  return toXmlJmapper(xmlPath,loadResource(xmlPath));}  }
class C{  protected double computeEyeDistance(DrawContext dc,ShapeData shapeData){  double minDistance=Double.MAX_VALUE;  Vec4 eyePoint=dc.getView().getEyePoint();  for (  Vec4 point : shapeData.getOuterBoundaryInfo().capVertices) {    double d=point.add3(shapeData.getReferencePoint()).distanceTo3(eyePoint);    if (d < minDistance)     minDistance=d;  }  return minDistance;}  }
class C{  private <T extends DataObject>void updateInactiveField(Class<T> clazz,List<URI> keyList){  DbClient dbClient=getDbClient();  log.info("update inactive field for class: {}",clazz.getSimpleName());  T object;  for (  URI key : keyList) {    try {      object=clazz.newInstance();      object.setId(key);      object.setInactive(false);    } catch (    Exception e) {      log.error("create new object of class({}) failed. e=",clazz.getSimpleName(),e);      throw new IllegalStateException(e);    }    dbClient.updateAndReindexObject(object);    log.info("Update the inactive field of object(cf={}, id={}) to false",object.getClass().getName(),object.getId());  }}  }
class C{  public int compareTo(Object other){  if (!(other instanceof Resource)) {    throw new SwcException.NotAResource(other.getClass().getName());  }  Resource r=(Resource)other;  return getName().compareTo(r.getName());}  }
class C{  public static void main(String[] args) throws InterruptedException {  Counter counter;  final int total=10000;  Thread[] threads=new Thread[total];  for (  Method method : Method.values()) {    counter=new Counter();    for (int i=0; i < threads.length; i++) {      threads[i]=new Thread(new Incrementer(counter,method));      threads[i].start();    }    for (int i=0; i < threads.length; i++) {      threads[i].join();    }switch (method) {case TwoStatements:case OneStatement:      if (counter.total >= total) {        System.out.format("unlikely event: method %s: total: %d%n",method,counter.total);      }    break;case SynchronizedMethod:case SynchronizedBlock:case Semaphore:case SemaphoreTry:case Lock:  assert counter.total == total;break;case AtomicInteger:assert counter.atomicTotal.get() == total;break;}}Counter.reentrantOuter();Counter.reentrantOuterBlock();Counter.reentrantOuterLock();}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  puid=null;  op=null;  name=null;  canLookup=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.642 -0500",hash_original_method="8F0255C2E086694196AF7CFC36B7EF43",hash_generated_method="7E35C8E7189C135682BC48CACE7EFA68") public boolean isMinInfoReady(){  return mIsMinInfoReady;}  }
class C{  public Name(byte[] encoding) throws IOException {  DerInputStream in=new DerInputStream(encoding);  if (in.getEndOffset() != encoding.length) {    throw new IOException("Wrong content length");  }  ASN1.decode(in);  this.rdn=(List<List<AttributeTypeAndValue>>)in.content;}  }
class C{  public double[][] distributionsForInstances(Instances insts) throws Exception {  if (getClassifier() instanceof BatchPredictor) {    Instances filteredInsts=Filter.useFilter(insts,m_Filter);    if (filteredInsts.numInstances() != insts.numInstances()) {      throw new WekaException("FilteredClassifier: filter has returned more/less instances than required.");    }    return ((BatchPredictor)getClassifier()).distributionsForInstances(filteredInsts);  } else {    double[][] result=new double[insts.numInstances()][insts.numClasses()];    for (int i=0; i < insts.numInstances(); i++) {      result[i]=distributionForInstance(insts.instance(i));    }    return result;  }}  }
class C{  @Override public UserProjectObject copy(){  return new UserProjectObject(this);}  }
class C{  public void addLogListener(LogListener l){  super.addLogListener(l);  for (  DatasetProvider provider : m_Providers)   provider.addLogListener(l);}  }
class C{  public static void closeSilently(Closeable out){  if (out != null) {    try {      trace("closeSilently",null,out);      out.close();    } catch (    Exception e) {    }  }}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof VolumeDataset)) {    return false;  }  VolumeDataset that=(VolumeDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static <U extends Key<?>>KeyMatcher<U> keyEquals(U compareTo){  return new KeyMatcher<U>(compareTo);}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  @Override public void execute() throws MojoExecutionException {  getLog().debug("Creating output directory \"" + outputDirectory + "\".");  java.nio.file.Path outputDirectoryPath=Paths.get(outputDirectory.toURI());  if (!Files.exists(outputDirectoryPath)) {    try {      Files.createDirectories(outputDirectoryPath);    } catch (    IOException e) {      throw new MojoExecutionException("Unable to create directory for output path \"" + outputDirectoryPath + "\".",e);    }  }  Swagger swagger=getSwagger();  ModelClassFinder modelClassFinder=new ModelClassFinder(getLog(),modelJavaPackage,modelErrorClassName);  RestControllerProcessor restControllerProcessor=new RestControllerProcessor(getLog(),swagger,restJavaPackage,tagPatternParameter,modelClassFinder.getModelErrorClass());  XsdParser xsdParser=null;  if (xsdName != null) {    xsdParser=new XsdParser(xsdName);  }  new DefinitionGenerator(getLog(),swagger,restControllerProcessor.getExampleClassNames(),modelClassFinder.getModelClasses(),xsdParser);  createYamlFile(swagger);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (nivelAcceso < 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_NIVEL_ACCESO,request.getLocale())));  }  if ((nivelAcceso == NivelAcceso.RESTRINGIDO) && StringUtils.isBlank(idLCA)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_LISTA_CONTROL_ACCESO,request.getLocale())));  }  return errors;}  }
class C{  @Override public Object readReply(Class expectedClass) throws Throwable {  int tag=read();  if (tag == 'R')   return readObject(expectedClass); else   if (tag == 'F') {    HashMap map=(HashMap)readObject(HashMap.class);    throw prepareFault(map);  } else {    StringBuilder sb=new StringBuilder();    sb.append((char)tag);    try {      int ch;      while ((ch=read()) >= 0) {        sb.append((char)ch);      }    } catch (    IOException e) {      log.log(Level.FINE,e.toString(),e);    }    throw error("expected hessian reply at " + codeName(tag) + "\n"+ sb);  }}  }
class C{  @POST @Path("send") @Consumes(MediaType.APPLICATION_JSON) public Response sendMail(EmailBeanDto emailBean){  File tempDir=null;  try {    MimeMessage message=new MimeMessage(sessionHolder.getMailSession());    Multipart contentPart=new MimeMultipart();    MimeBodyPart bodyPart=new MimeBodyPart();    bodyPart.setText(emailBean.getBody(),"UTF-8",getSubType(emailBean.getMimeType()));    contentPart.addBodyPart(bodyPart);    if (emailBean.getAttachments() != null) {      tempDir=Files.createTempDir();      for (      AttachmentDto attachmentDto : emailBean.getAttachments()) {        byte[] attachmentContent=Base64.getDecoder().decode(attachmentDto.getContent());        File attachmentFile=new File(tempDir,attachmentDto.getFileName());        Files.write(attachmentContent,attachmentFile);        MimeBodyPart attachmentPart=new MimeBodyPart();        attachmentPart.attachFile(attachmentFile);        attachmentPart.setContentID("<" + attachmentDto.getContentId() + ">");        contentPart.addBodyPart(attachmentPart);      }    }    message.setContent(contentPart);    message.setSubject(emailBean.getSubject(),"UTF-8");    message.setFrom(new InternetAddress(emailBean.getFrom(),true));    message.addRecipients(Message.RecipientType.TO,InternetAddress.parse(emailBean.getTo()));    if (emailBean.getReplyTo() != null) {      message.setReplyTo(InternetAddress.parse(emailBean.getReplyTo()));    }    LOG.info("Sending from {} to {} with subject {}",emailBean.getFrom(),emailBean.getTo(),emailBean.getSubject());    Transport.send(message);    LOG.debug("Mail send");  } catch (  MessagingException|IOException e) {    LOG.error(e.getLocalizedMessage());    throw new WebApplicationException(e);  } finally {    if (tempDir != null) {      try {        FileUtils.deleteDirectory(tempDir);      } catch (      IOException exception) {        LOG.error(exception.getMessage());      }    }  }  return Response.ok().build();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static String checkNotNullOrBlank(String value,String errorMessage,Object... args){  checkNotNull(value,errorMessage,args);  String trimmed=value.trim();  if (trimmed.isEmpty()) {    throw new IllegalArgumentException(String.format(errorMessage,args));  }  return trimmed;}  }
class C{  public boolean hasTrait(String ns,String ln){  return false;}  }
class C{  @Override public synchronized void acceptTrainingSet(TrainingSetEvent e){  try {    m_Saver=makeCopy();  } catch (  Exception ex) {    if (m_logger != null) {      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");      m_logger.logMessage("[Saver] " + statusMessagePrefix() + " unable to copy saver. "+ ex.getMessage());    }  }  passEnvOnToSaver();  m_fileName=sanitizeFilename(e.getTrainingSet().relationName());  m_dataSet=e.getTrainingSet();  if (e.isStructureOnly() && m_isDBSaver && ((DatabaseSaver)m_SaverTemplate).getRelationForTableName()) {    ((DatabaseSaver)m_Saver).setTableName(m_fileName);  }  if (!e.isStructureOnly()) {    if (!m_isDBSaver) {      try {        m_Saver.setDirAndPrefix(m_fileName,"_training_" + e.getSetNumber() + "_of_"+ e.getMaxSetNumber());      } catch (      Exception ex) {        System.out.println(ex);      }    } else {      ((DatabaseSaver)m_Saver).setRelationForTableName(false);      String setName=((DatabaseSaver)m_Saver).getTableName();      setName=setName.replaceFirst("_[tT][rR][aA][iI][nN][iI][nN][gG]_[0-9]+_[oO][fF]_[0-9]+","");      ((DatabaseSaver)m_Saver).setTableName(setName + "_training_" + e.getSetNumber()+ "_of_"+ e.getMaxSetNumber());    }    saveBatch();    System.out.println("... training set " + e.getSetNumber() + " of "+ e.getMaxSetNumber()+ " for relation "+ m_fileName+ " saved.");  }}  }
class C{  public boolean contains(final short[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  public int hashCode(){  return 83 + start + 7 * end + (negated ? 1 : 0);}  }
class C{  @BeforeClass public static void beforeClass(){  PlayerTestHelper.generateNPCRPClasses();  MockStendlRPWorld.get();}  }
class C{  public void requestDestroyed(ServletRequestEvent event){  try {    ServletRequest request=event.getServletRequest();    for (Enumeration e=request.getAttributeNames(); e.hasMoreElements(); ) {      String beanName=(String)e.nextElement();      handleAttributeEvent(beanName,request.getAttribute(beanName),ELUtils.Scope.REQUEST);    }    WebConfiguration config=WebConfiguration.getInstance(event.getServletContext());    if (config.isOptionEnabled(WebConfiguration.BooleanWebContextInitParameter.EnableAgressiveSessionDirtying)) {      syncSessionScopedBeans(request);    }    boolean distributable=config.isOptionEnabled(EnableDistributable);    if (distributable) {      HttpSession session=((HttpServletRequest)request).getSession(false);      if (session != null && session.getAttribute(ACTIVE_VIEW_MAPS) != null) {        session.setAttribute(ACTIVE_VIEW_MAPS,session.getAttribute(ACTIVE_VIEW_MAPS));      }    }  } catch (  Throwable t) {    FacesContext context=new InitFacesContext(event.getServletContext());    ExceptionQueuedEventContext eventContext=new ExceptionQueuedEventContext(context,t);    context.getApplication().publishEvent(context,ExceptionQueuedEvent.class,eventContext);    context.getExceptionHandler().handle();  } finally {    ApplicationAssociate.setCurrentInstance(null);  }}  }
class C{  public void testFailoverAutoFallBack() throws Exception {  Set<String> downedHosts=new HashSet<String>();  downedHosts.add(HOST_1);  downedHosts.add(HOST_3);  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  props.setProperty("queriesBeforeRetryMaster","10");  props.setProperty("secondsBeforeRetryMaster","1");  for (  boolean autoCommit : new boolean[]{true,false}) {    Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props,downedHosts);    Statement testStmt=null;    try {      testConn.setAutoCommit(autoCommit);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.dontDownHost(HOST_1);      UnreliableSocketFactory.dontDownHost(HOST_3);      long startTime=System.currentTimeMillis();      boolean hostSwitched=false;      do {        assertSingleValueQuery(testStmt,"SELECT 1",1L);        if (autoCommit) {          if (!hostSwitched && UnreliableSocketFactory.getHostFromLastConnection().equals(HOST_1_OK)) {            hostSwitched=true;          }          if (hostSwitched) {            assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());          } else {            assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());          }        } else {          assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());        }        try {          Thread.sleep(100);        } catch (        InterruptedException e) {        }      } while (System.currentTimeMillis() - startTime < 2000);      UnreliableSocketFactory.downHost(HOST_2);      if (autoCommit) {        assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      } else {        assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());        assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);        assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      }      assertConnectionsHistory(HOST_2_OK,HOST_1_OK);    }  finally {      if (testStmt != null) {        testStmt.close();      }      if (testConn != null) {        testConn.close();      }    }  }  props.setProperty("queriesBeforeRetryMaster","0");  props.setProperty("secondsBeforeRetryMaster","0");  for (  boolean autoCommit : new boolean[]{true,false}) {    Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props,downedHosts);    Statement testStmt=null;    try {      testConn.setAutoCommit(autoCommit);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.dontDownHost(HOST_1);      UnreliableSocketFactory.dontDownHost(HOST_3);      for (int i=0; i < 55; i++) {        assertSingleValueQuery(testStmt,"SELECT 1",1L);        assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      }      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.dontDownHost(HOST_2);      UnreliableSocketFactory.downHost(HOST_3);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertConnectionsHistory(HOST_2_OK,HOST_3_OK,HOST_1_OK);    }  finally {      if (testStmt != null) {        testStmt.close();      }      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  @Deprecated public static GamaRuntimeException error(final String s){  return error(s,GAMA.getRuntimeScope());}  }
class C{  public Class load(String type) throws Exception {  ClassLoader loader=getClassLoader();  if (loader == null) {    loader=getCallerClassLoader();  }  return loader.loadClass(type);}  }
class C{  private double euclideanDistance(DoubleArrayListWritable v1,DoubleArrayListWritable v2,int dim){  double distance=0.0;  for (int i=0; i < dim; i++) {    distance+=math.pow(v1.get(i).get() - v2.get(i).get(),2);  }  return math.sqrt(distance);}  }
class C{  private List<FacetResult> facetsWithSearch() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);  List<FacetResult> results=new ArrayList<>();  Facets facets=new FastTaxonomyFacetCounts(taxoReader,config,fc);  results.add(facets.getTopChildren(10,"Author"));  results.add(facets.getTopChildren(10,"Publish Date"));  indexReader.close();  taxoReader.close();  return results;}  }
class C{  public boolean wasAtRest(){  return mWasAtRest;}  }
class C{  protected CIMObjectPath createSubscription(CimFilterInfo filterInfo) throws WBEMException, ConnectionManagerException {  CIMObjectPath filterPath;  if (filterInfo instanceof CimManagedFilterInfo) {    filterPath=createFilter((CimManagedFilterInfo)filterInfo);  } else {    filterPath=getInstance(CimConstants.CIM_FILTER_NAME,filterInfo.getName()).getObjectPath();  }  s_logger.trace("filterPath :{}",filterPath);  CIMProperty<?> filterProp=new CIMProperty<CIMObjectPath>(CimConstants.SUBSCRIPTION_PROP_FILTER,new CIMDataType(CimConstants.CIM_FILTER_NAME),filterPath);  CIMProperty<?> handlerProp=new CIMProperty<CIMObjectPath>(CimConstants.SUBSCRIPTION_PROP_HANDLER,new CIMDataType(CimConstants.CIM_HANDLER_NAME),getHandler());  s_logger.trace("filterProp :{}",filterProp);  s_logger.trace("handlerProp :{}",handlerProp);  CIMProperty<?>[] subscriptionProperties=new CIMProperty[]{filterProp,handlerProp};  CIMObjectPath subscriptionPath=createInstance(CimConstants.CIM_SUBSCRIPTION_NAME,subscriptionProperties);  _subscriptionPaths.add(subscriptionPath);  s_logger.trace("subscriptionPath :{}",subscriptionPath);  return subscriptionPath;}  }
class C{  private void updatePopulation(int[] ids){  List<Integer> archivedIds=new ArrayList<Integer>();  for (  int id : ids) {    archivedIds.add(id);  }  solutions.keySet().retainAll(archivedIds);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void initializeSparseSlider(){  sparsitySlider.setMajorTickSpacing(10);  sparsitySlider.setMinorTickSpacing(2);  sparsitySlider.setPaintTicks(true);  Hashtable<Integer,JLabel> labelTable2=new Hashtable<Integer,JLabel>();  labelTable2.put(new Integer(0),new JLabel("0%"));  labelTable2.put(new Integer(100),new JLabel("100%"));  sparsitySlider.setLabelTable(labelTable2);  sparsitySlider.setPaintLabels(true);}  }
class C{  public boolean isStereo(){  return (channelMode != 3);}  }
class C{  @Override public Overlay buildOverlay(MapView map,Style defaultStyle,Styler styler,KmlPlacemark kmlPlacemark,KmlDocument kmlDocument){  Marker marker=new Marker(map);  marker.setTitle(kmlPlacemark.mName);  marker.setSnippet(kmlPlacemark.mDescription);  marker.setSubDescription(kmlPlacemark.getExtendedDataAsText());  marker.setPosition(getPosition());  marker.setRelatedObject(this);  if (styler == null) {    applyDefaultStyling(marker,defaultStyle,kmlPlacemark,kmlDocument,map);  } else   styler.onPoint(marker,kmlPlacemark,this);  return marker;}  }
class C{  public static boolean startsWithIgnoreCase(String searchIn,String searchFor){  return startsWithIgnoreCase(searchIn,0,searchFor);}  }
class C{  public void removeListener(ColorMapListener listener){  if (listener == null)   return;  listeners.remove(listener);}  }
class C{  public T adwordsId(String value){  setString(ADWORDS_ID,value);  return (T)this;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x9E8AAF8D,version=271) public int sceUsbCamGetZoom(TPointer32 zoomAddr){  zoomAddr.setValue(zoom);  return 0;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.OPERATION_SOURCE__OPERATION:    if (resolve)     return getOperation();  return basicGetOperation();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean screenshot(Activity activity,String filePath){  View decorView=activity.getWindow().getDecorView();  decorView.setDrawingCacheEnabled(true);  decorView.buildDrawingCache();  Bitmap bitmap=decorView.getDrawingCache();  File imagePath=new File(filePath);  FileOutputStream fos=null;  try {    fos=new FileOutputStream(imagePath);    bitmap.compress(Bitmap.CompressFormat.JPEG,100,fos);    fos.flush();    return true;  } catch (  Exception e) {    e.printStackTrace();  } finally {    try {      fos.close();      if (null != bitmap) {        bitmap.recycle();        bitmap=null;      }    } catch (    Exception e) {    }    decorView.destroyDrawingCache();    decorView.setDrawingCacheEnabled(false);  }  return false;}  }
class C{  private Counter<String> computeGradient(List<Datum> dataset,Counter<String> weights,int batchSize){  Counter<String> gradient=new ClassicCounter<String>(weights.keySet().size());  for (  Datum datum : dataset) {    double sum=0;    for (    String feature : datum.vX.keySet()) {      sum+=weights.getCount(feature) * datum.vX.getCount(feature);    }    double expSum, derivativeIncrement;    if (datum.label == Label.NEGATIVE) {      expSum=Math.exp(sum);      derivativeIncrement=1.0 / (1.0 + (1.0 / expSum));    } else {      expSum=Math.exp(-sum);      derivativeIncrement=-1.0 / (1.0 + (1.0 / expSum));    }    for (    String feature : datum.vX.keySet()) {      double g=datum.vX.getCount(feature) * derivativeIncrement;      gradient.incrementCount(feature,g);    }  }  if (this.l2Regularization && dataset.size() > 0) {    final Set<String> features=new HashSet<String>(weights.keySet());    features.addAll(gradient.keySet());    final double dataFraction=dataset.size() / ((double)2 * xi * tuneSetSize);    final double scaledSigmaSquared=sigmaSq / dataFraction;    for (    String key : features) {      double x=weights.getCount(key);      gradient.incrementCount(key,x / scaledSigmaSquared);    }  }  return gradient;}  }
class C{  public void testSizingWithWidthConstraint(){  RectangleConstraint constraint=new RectangleConstraint(10.0,new Range(10.0,10.0),LengthConstraintType.FIXED,0.0,new Range(0.0,0.0),LengthConstraintType.NONE);  BlockContainer container=new BlockContainer(new BorderArrangement());  BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);  Graphics2D g2=image.createGraphics();  container.add(new EmptyBlock(5.0,6.0));  Size2D size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(6.0,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(15.0,16.0));  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(16.0,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.RIGHT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(7.0,20.0));  container.add(new EmptyBlock(8.0,45.6),RectangleEdge.RIGHT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0));  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0));  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);  container.add(new EmptyBlock(5.4,3.2),RectangleEdge.RIGHT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0));  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3));  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3));  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);  container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(9.0,10.0));  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(14.0,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(45.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0));  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3));  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.RIGHT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3));  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);  container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(9.0,10.0));  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(12.0,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(65.6,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3));  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(77.9,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(77.9,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);  container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);  container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(9.0,10.0));  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(16.0,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(21.0,12.3),RectangleEdge.LEFT);  container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);  container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(77.9,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);  container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);  container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(9.0,10.0));  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(16.0,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);  container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);  container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(14.0,size.height,EPSILON);  container.clear();  container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);  container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);  container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);  container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);  container.add(new EmptyBlock(9.0,10.0));  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(16.0,size.height,EPSILON);  container.clear();  size=container.arrange(g2,constraint);  assertEquals(10.0,size.width,EPSILON);  assertEquals(0.0,size.height,EPSILON);}  }
class C{  private void receivedFollowerOrSubscriberCount(FollowerInfo followerInfo){  if (followerInfo.requestError) {    return;  }  StreamInfo streamInfo=api.getStreamInfo(followerInfo.stream,null);  boolean changed=false;  if (followerInfo.type == Follower.Type.SUBSCRIBER) {    changed=streamInfo.setSubscriberCount(followerInfo.total);  } else   if (followerInfo.type == Follower.Type.FOLLOWER) {    changed=streamInfo.setFollowerCount(followerInfo.total);  }  if (changed && streamInfo.isValid()) {    streamStatusWriter.streamStatus(streamInfo);  }}  }
class C{  public FrameSlot findOrAddFrameSlot(Object identifier,FrameSlotKind kind){  FrameSlot result=findFrameSlot(identifier);  if (result != null) {    return result;  }  return addFrameSlot(identifier,kind);}  }
class C{  private static boolean isValidVersionNumber(final String version){  if (version == null) {    return false;  }  final String[] parts=version.split("\\.");  if (parts.length != 3) {    return false;  }  for (  final String part : parts) {    if (!Convert.isDecString(part)) {      return false;    }  }  return true;}  }
class C{  @ObjectiveCName("isInAppNotificationsEnabled") public boolean isInAppNotificationsEnabled(){  return modules.getSettingsModule().isInAppEnabled();}  }
class C{  @Override public void intervalAdded(ListDataEvent event){  calculatePositionArray();  setPreferredSize(calculatePreferredSize());}  }
class C{  public static MaterialColor fromInt(@ColorInt int color){  return new MaterialColor(color);}  }
class C{  public void shouldHandleThrowingFutureCallable(){  assertThrows(null,ExecutionException.class,IllegalArgumentException.class);  assertThrows(null,ExecutionException.class,IllegalArgumentException.class);  assertThrows(null,ExecutionException.class,IllegalArgumentException.class);}  }
class C{  public CategoricalColumn(){  super(ColumnType.CATEGORICAL);}  }
class C{  @MethodDesc(description="Starts the replicator service",usage="start") public void start(boolean forceOffline) throws Exception {  try {    handleEventSynchronous(new StartEvent());    if (sm.getState().getName().equals("OFFLINE:NORMAL")) {      boolean autoEnabled=new Boolean(properties.getBoolean(ReplicatorConf.AUTO_ENABLE));      if (!forceOffline && autoEnabled) {        logger.info("Replicator auto-enabling is engaged; going online automatically");        online();      }    }  } catch (  Exception e) {    logger.error("Start operation failed",e);    throw new Exception("Start operation failed: " + e.getMessage());  }  this.doneLatch=new CountDownLatch(1);}  }
class C{  Alerter(AlertService service,int timeout,AtomicInteger jobCounter){  this.service=service;  this.timeout=timeout;  this.jobCounter=jobCounter;}  }
class C{  private void removeAnyCallbacks(){  if (mPerformSearchRunnable != null) {    mHandler.removeCallbacks(mPerformSearchRunnable);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.GATEWAY__NAME:    return getName();case EipPackage.GATEWAY__TO_CHANNELS:  return getToChannels();case EipPackage.GATEWAY__FROM_CHANNELS:return getFromChannels();}return super.eGet(featureID,resolve,coreType);}  }
class C{  static void appendDate(StringBuilder buff,long dateValue){  int y=DateTimeUtils.yearFromDateValue(dateValue);  int m=DateTimeUtils.monthFromDateValue(dateValue);  int d=DateTimeUtils.dayFromDateValue(dateValue);  if (y > 0 && y < 10000) {    StringUtils.appendZeroPadded(buff,4,y);  } else {    buff.append(y);  }  buff.append('-');  StringUtils.appendZeroPadded(buff,2,m);  buff.append('-');  StringUtils.appendZeroPadded(buff,2,d);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.006 -0400",hash_original_method="FFD73B06BFF281953B16F54803697DC3",hash_generated_method="9914BD0B75BD9C1F8FA2F0E0462B401B") protected FalseFileFilter(){}  }
class C{  @Inline public static boolean fits(Word val,int bits){  Word o=val.rsha(bits - 1);  return (o.isZero() || o.isMax());}  }
class C{  public static Map<String,Object> removeDuplicateScrumRevision(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  String repositoryRoot=(String)context.get("repositoryRoot");  Map<String,Object> result=ServiceUtil.returnSuccess();  try {    List<EntityCondition> exprsAnd=FastList.newInstance();    String revisionLink=repositoryRoot.substring(repositoryRoot.lastIndexOf("svn/") + 4,repositoryRoot.length()) + "&revision=";    exprsAnd.add(EntityCondition.makeCondition("workEffortContentTypeId",EntityOperator.EQUALS,"TASK_SUB_INFO"));    exprsAnd.add(EntityCondition.makeCondition("contentTypeId",EntityOperator.EQUALS,"DOCUMENT"));    exprsAnd.add(EntityCondition.makeCondition("drObjectInfo",EntityOperator.LIKE,revisionLink + "%"));    List<GenericValue> workEffortDataResourceList=EntityQuery.use(delegator).from("WorkEffortAndContentDataResource").where(exprsAnd).queryList();    if (UtilValidate.isNotEmpty(workEffortDataResourceList)) {      Debug.logInfo("Total Content Size ============== >>>>>>>>>>> " + workEffortDataResourceList.size(),module);      Set<String> keys=FastSet.newInstance();      Set<GenericValue> exclusions=FastSet.newInstance();      for (      GenericValue workEffort : workEffortDataResourceList) {        String drObjectInfo=workEffort.getString("drObjectInfo");        if (keys.contains(drObjectInfo)) {          exclusions.add(workEffort);        } else {          keys.add(drObjectInfo);        }      }      Debug.logInfo("Remove size ============== >>>>>>>>>>> " + exclusions.size(),module);      if (UtilValidate.isNotEmpty(exclusions)) {        for (        GenericValue contentResourceMap : exclusions) {          Debug.logInfo("Remove contentId ============== >>>>>>>>>>> " + contentResourceMap.getString("contentId"),module);          GenericValue dataResourceMap=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",contentResourceMap.getString("dataResourceId")).queryOne();          GenericValue contentMap=EntityQuery.use(delegator).from("Content").where("contentId",contentResourceMap.getString("contentId")).queryOne();          contentMap.removeRelated("WorkEffortContent");          contentMap.removeRelated("ContentRole");          contentMap.remove();          dataResourceMap.removeRelated("DataResourceRole");          dataResourceMap.remove();        }      }    }  } catch (  GenericEntityException entityEx) {    entityEx.printStackTrace();    return ServiceUtil.returnError(entityEx.getMessage());  }  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void checkCapture(GenericClassType genericClassType,ReferenceType paramType,ReferenceType actualArgType,List<TypedOperation> genericOperations){  InstantiatedType finalType=genericClassType.instantiate(actualArgType);  InstantiatedType instantiatedType=sourceType.instantiate(paramType);  Substitution<ReferenceType> substitution=instantiatedType.getTypeSubstitution();  for (  TypedOperation op : genericOperations) {    InstantiatedType argumentType=getArgumentType(op).apply(substitution);    InstantiatedType convertedArgumentType=argumentType.applyCaptureConversion();    List<TypeVariable> arguments=convertedArgumentType.getTypeParameters();    if (arguments.size() > 0) {      Substitution<ReferenceType> wcSubst=Substitution.forArgs(arguments,actualArgType);      convertedArgumentType=convertedArgumentType.apply(wcSubst);    }    if (op.hasWildcardTypes()) {      assertEquals("should be instantiated type for method " + op.getName() + " argument.",finalType,convertedArgumentType);    } else {      assertEquals("should not be converted " + op.getName(),argumentType,convertedArgumentType);    }  }}  }
class C{  public static synchronized LogStream switchLog(final File newLog){  if (sLogStream != null) {    userLog("Switching logfile to:" + newLog.getAbsolutePath());    final File file=sLogStream.file();    if (newLog.equals(file)) {      return sLogStream;    }    sLogStream.removeLog();  }  if (!newLog.getParentFile().exists()) {    if (!newLog.getParentFile().mkdirs()) {      throw new RuntimeException("Unable to create directory for log file.");    }  }  sLogStream=new LogFile(newLog);  sLogClosed=false;  logEnvironment();  return sLogStream;}  }
class C{  protected SimState(MersenneTwisterFast random,Schedule schedule){  this(0,random,schedule);}  }
class C{  public void addEditor(){  removeEditor();  editor=comboBox.getEditor().getEditorComponent();  if (editor != null) {    configureEditor();    comboBox.add(editor);    if (comboBox.isFocusOwner()) {      editor.requestFocusInWindow();    }  }}  }
class C{  public void init(int value){  if (value == -1) {    throw new IllegalArgumentException("IntConstant cannot be initialized with a value of -1");  }synchronized (this) {    if (this.value != -1) {      throw new IllegalStateException("IntConstant already initialized!");    }    this.value=value;  }}  }
class C{  public StAndrewsSimulation(long seed){  super(seed);}  }
class C{  public AuthenticationNotSupportedException(){  super();}  }
class C{  public synchronized void addMemberAsync(Contact contact){  notifyMemberJoined(contact);}  }
class C{  public Record(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  @Override protected void makeCastlingMove(Move move){  FischerRandomUtils.makeCastlingMove(this,move,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.081 -0500",hash_original_method="0309B89A8A5C20FB439CB65AA9DE3FAA",hash_generated_method="0309B89A8A5C20FB439CB65AA9DE3FAA") void enforceSealed(){  if (!isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on a not sealed instance.");  }}  }
class C{  public void unload(){  GLES20.glDeleteShader(mVShaderHandle);  GLES20.glDeleteShader(mFShaderHandle);  GLES20.glDeleteProgram(mProgram);}  }
class C{  default <T>T newInstance(Class<T> concreteClass){  try {    return concreteClass.newInstance();  } catch (  Exception ex) {    throw new UncheckedException(ex);  }}  }
class C{  @Override public boolean createFrom(final IScope scope,final List<Map<String,Object>> inits,final Integer max,final Object input,final Arguments init,final CreateStatement statement){  final GamaGridFile file=(GamaGridFile)input;  final int num=max == null ? file.length(scope) : CmnFastMath.min(file.length(scope),max);  for (int i=0; i < num; i++) {    final IShape g=file.get(scope,i);    final Map map=g.getOrCreateAttributes();    map.put(IKeyword.SHAPE,g);    statement.fillWithUserInit(scope,map);    inits.add(map);  }  return true;}  }
class C{  protected void processFiles(String ext,boolean recursive,File outDir,serverObjects post,File[] inFiles,List<File> processedFiles,Map<String,Throwable> failures) throws IOException {  for (  File inFile : inFiles) {    if (inFile.isDirectory()) {      if (recursive) {        File subDir=new File(outDir,inFile.getName());        subDir.mkdirs();        processFiles(ext,recursive,subDir,post,inFile.listFiles(),processedFiles,failures);      }    } else {      processedFiles.add(inFile);      processFile(ext,outDir,post,failures,inFile);    }  }}  }
class C{  private void languageComboChanged(){  String langName=(String)languageCombo.getSelectedItem();  Language language=Language.getLanguage(langName);  Language.setLoginLanguage(language);  Env.setContext(m_ctx,Env.LANGUAGE,language.getAD_Language());  Locale loc=language.getLocale();  Locale.setDefault(loc);  this.setLocale(loc);  res=ResourceBundle.getBundle(RESOURCE,loc);  this.setTitle(res.getString("Login"));  hostLabel.setText(res.getString("Host"));  userLabel.setText(res.getString("User"));  userLabel.setToolTipText(res.getString("EnterUser"));  passwordLabel.setText(res.getString("Password"));  passwordLabel.setToolTipText(res.getString("EnterPassword"));  languageLabel.setText(res.getString("Language"));  languageLabel.setToolTipText(res.getString("SelectLanguage"));  roleLabel.setText(res.getString("Role"));  clientLabel.setText(res.getString("Client"));  orgLabel.setText(res.getString("Organization"));  dateLabel.setText(res.getString("Date"));  warehouseLabel.setText(res.getString("Warehouse"));  printerLabel.setText(res.getString("Printer"));  defaultPanel.setToolTipText(res.getString("Defaults"));  connectionPanel.setToolTipText(res.getString("Connection"));  txt_NotConnected=res.getString("NotConnected");  txt_NoDatabase=res.getString("DatabaseNotFound");  txt_UserPwdError=res.getString("UserPwdError");  txt_RoleError=res.getString("RoleNotFound");  txt_LoggedIn=res.getString("Authorized");  loginTabPane.setTitleAt(0,res.getString("Connection"));  loginTabPane.setTitleAt(1,res.getString("Defaults"));  confirmPanel.getOKButton().setToolTipText(res.getString("Ok"));  confirmPanel.getCancelButton().setToolTipText(res.getString("Cancel"));  dateField.setFormat();  dateField.setValue(new Timestamp(System.currentTimeMillis()));  if (m_connectionOK) {    this.setTitle(hostField.getDisplay());    statusBar.setStatusLine(txt_LoggedIn);  } else {    this.setTitle(res.getString("Login"));    statusBar.setStatusLine(txt_NotConnected,true);  }}  }
class C{  @Override protected void prepare(){  AD_User_ID=Env.getAD_User_ID(getCtx());  p_Record_ID=getRecord_ID();  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("WM_Area_Type_ID")) {      p_WM_Area_Type_ID=para.getParameterAsInt();    } else     if (name.equals("WM_Section_Type_ID")) {      p_WM_Section_Type_ID=para.getParameterAsInt();    } else     if (name.equals("DeliveryRule")) {      p_DeliveryRule=(String)para.getParameter();    } else     if (name.equals("DocAction")) {      p_DocAction=(String)para.getParameter();    } else     if (name.equals("C_DocType_ID")) {      p_C_DocType_ID=para.getParameterAsInt();    } else     if (name.equals("M_Locator_ID")) {      p_M_Locator_ID=para.getParameterAsInt();      m_locator=new MLocator(getCtx(),p_M_Locator_ID,get_TrxName());    } else     if (name.equals("IsPrintPickList")) {      p_IsPrintPickList="Y".equals(para.getParameter());    } else     if (name.equals("IsCreateSupply")) {      p_IsCreateSupply="Y".equals(para.getParameter());    } else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private void buildSpellTables(){  try {    final SpellGroupsXMLLoader loader=new SpellGroupsXMLLoader(new URI("/data/conf/spells.xml"));    List<DefaultSpell> loadedDefaultSpells=loader.load();    for (    DefaultSpell defaultSpell : loadedDefaultSpells) {      addSpell(defaultSpell);    }  } catch (  Exception e) {    LOGGER.error("spells.xml could not be loaded",e);  }}  }
class C{  public LogEventReplReader(LogRecord logRecord,Serializer serializer,boolean checkCRC) throws ReplicatorException {  this.logRecord=logRecord;  this.serializer=serializer;  this.checkCRC=checkCRC;  try {    load();  } catch (  IOException e) {    throw new THLException("I/O error while loading log record header: offset=" + logRecord.getOffset(),e);  }}  }
class C{  public static IndexKeyRange bounded(IndexRowType indexRowType,IndexBound lo,boolean loInclusive,IndexBound hi,boolean hiInclusive){  if (lo == null || hi == null) {    throw new IllegalArgumentException("IndexBound arguments must not be null");  }  return new IndexKeyRange(indexRowType,lo,loInclusive,hi,hiInclusive,IndexKind.CONVENTIONAL);}  }
class C{  @Override public void updateRef(int columnIndex,Ref x) throws SQLException {  throw unsupported("ref");}  }
class C{  public NavigationModel(String id){  super(id);}  }
class C{  @NotNull default B append(double d) throws BufferOverflowException {  BytesInternal.append((StreamingDataOutput)this,d);  return (B)this;}  }
class C{  @Entrypoint @UnpreemptibleNoWarn static void deliverHardwareException(int trapCode,Word trapInfo){  if (VM.verboseSignalHandling)   VM.sysWriteln("delivering hardware exception");  RVMThread myThread=RVMThread.getCurrentThread();  if (VM.verboseSignalHandling)   VM.sysWriteln("we have a thread = ",Magic.objectAsAddress(myThread));  if (VM.verboseSignalHandling)   VM.sysWriteln("it's in state = ",myThread.getExecStatus());  AbstractRegisters exceptionRegisters=myThread.getExceptionRegisters();  if (VM.verboseSignalHandling)   VM.sysWriteln("we have exception registers = ",Magic.objectAsAddress(exceptionRegisters));  if ((trapCode == TRAP_STACK_OVERFLOW || trapCode == TRAP_JNI_STACK) && myThread.getStack().length < (StackFrameLayout.getMaxStackSize() >> LOG_BYTES_IN_ADDRESS) && !myThread.hasNativeStackFrame()) {    if (trapCode == TRAP_JNI_STACK) {      RVMThread.resizeCurrentStack(myThread.getStackLength() + StackFrameLayout.getJNIStackGrowthSize(),exceptionRegisters);    } else {      RVMThread.resizeCurrentStack(myThread.getStackLength() + StackFrameLayout.getStackGrowthSize(),exceptionRegisters);    }    if (VM.VerifyAssertions)     VM._assert(exceptionRegisters.getInUse());    exceptionRegisters.setInUse(false);    Magic.restoreHardwareExceptionState(exceptionRegisters);    if (VM.VerifyAssertions)     VM._assert(NOT_REACHED);  }  if (canForceGC()) {    System.gc();  }  if (!VM.sysFailInProgress()) {    Address fp=exceptionRegisters.getInnermostFramePointer();    int compiledMethodId=Magic.getCompiledMethodID(fp);    if (compiledMethodId != StackFrameLayout.getInvisibleMethodID()) {      CompiledMethod compiledMethod=CompiledMethods.getCompiledMethod(compiledMethodId);      Address ip=exceptionRegisters.getInnermostInstructionAddress();      Offset instructionOffset=compiledMethod.getInstructionOffset(ip);      if (compiledMethod.isWithinUninterruptibleCode(instructionOffset)) {switch (trapCode) {case TRAP_NULL_POINTER:          VM.sysWriteln("\nFatal error: NullPointerException within uninterruptible region.");        break;case TRAP_ARRAY_BOUNDS:      VM.sysWriteln("\nFatal error: ArrayIndexOutOfBoundsException within uninterruptible region (index was ",trapInfo.toInt(),").");    break;case TRAP_DIVIDE_BY_ZERO:  VM.sysWriteln("\nFatal error: DivideByZero within uninterruptible region.");break;case TRAP_STACK_OVERFLOW:case TRAP_JNI_STACK:VM.sysWriteln("\nFatal error: StackOverflowError within uninterruptible region.");break;case TRAP_CHECKCAST:VM.sysWriteln("\nFatal error: ClassCastException within uninterruptible region.");break;case TRAP_MUST_IMPLEMENT:VM.sysWriteln("\nFatal error: IncompatibleClassChangeError within uninterruptible region.");break;case TRAP_STORE_CHECK:VM.sysWriteln("\nFatal error: ArrayStoreException within uninterruptible region.");break;case TRAP_UNREACHABLE_BYTECODE:VM.sysWriteln("\nFatal error: Reached a bytecode that was determined to be unreachable within uninterruptible region.");break;default :VM.sysWriteln("\nFatal error: Unknown hardware trap within uninterruptible region.");break;}VM.sysWriteln("trapCode = ",trapCode);VM.sysWriteln("trapInfo = ",trapInfo.toAddress());VM.sysFail("Exiting virtual machine due to uninterruptibility violation.");}}}Throwable exceptionObject;switch (trapCode) {case TRAP_NULL_POINTER:exceptionObject=new java.lang.NullPointerException();break;case TRAP_ARRAY_BOUNDS:exceptionObject=new java.lang.ArrayIndexOutOfBoundsException(trapInfo.toInt());break;case TRAP_DIVIDE_BY_ZERO:exceptionObject=new java.lang.ArithmeticException();break;case TRAP_STACK_OVERFLOW:case TRAP_JNI_STACK:exceptionObject=new java.lang.StackOverflowError();break;case TRAP_CHECKCAST:exceptionObject=new java.lang.ClassCastException();break;case TRAP_MUST_IMPLEMENT:exceptionObject=new java.lang.IncompatibleClassChangeError();break;case TRAP_STORE_CHECK:exceptionObject=new java.lang.ArrayStoreException();break;case TRAP_UNREACHABLE_BYTECODE:exceptionObject=new java.lang.InternalError(UNREACHABLE_BC_MESSAGE);break;default :exceptionObject=new java.lang.UnknownError();RVMThread.traceback("UNKNOWN ERROR");break;}VM.disableGC();deliverException(exceptionObject,exceptionRegisters);}  }
class C{  public static BigInteger[] transformRawSignature(byte[] raw) throws IOException {  BigInteger[] output=new BigInteger[2];  output[0]=new BigInteger(1,Arrays.copyOfRange(raw,0,32));  output[1]=new BigInteger(1,Arrays.copyOfRange(raw,32,64));  return output;}  }
class C{  public static void println(Object self,Object value){  if (self instanceof Writer) {    final PrintWriter pw=new GroovyPrintWriter((Writer)self);    pw.println(value);  } else {    System.out.println(InvokerHelper.toString(value));  }}  }
class C{  protected void checkProcessorVersion(Hashtable h){  if (null == h)   h=new Hashtable();  try {    final String XALAN1_VERSION_CLASS="org.apache.xalan.xslt.XSLProcessorVersion";    Class clazz=ObjectFactory.findProviderClass(XALAN1_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    StringBuffer buf=new StringBuffer();    Field f=clazz.getField("PRODUCT");    buf.append(f.get(null));    buf.append(';');    f=clazz.getField("LANGUAGE");    buf.append(f.get(null));    buf.append(';');    f=clazz.getField("S_VERSION");    buf.append(f.get(null));    buf.append(';');    h.put(VERSION + "xalan1",buf.toString());  } catch (  Exception e1) {    h.put(VERSION + "xalan1",CLASS_NOTPRESENT);  }  try {    final String XALAN2_VERSION_CLASS="org.apache.xalan.processor.XSLProcessorVersion";    Class clazz=ObjectFactory.findProviderClass(XALAN2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    StringBuffer buf=new StringBuffer();    Field f=clazz.getField("S_VERSION");    buf.append(f.get(null));    h.put(VERSION + "xalan2x",buf.toString());  } catch (  Exception e2) {    h.put(VERSION + "xalan2x",CLASS_NOTPRESENT);  }  try {    final String XALAN2_2_VERSION_CLASS="org.apache.xalan.Version";    final String XALAN2_2_VERSION_METHOD="getVersion";    final Class noArgs[]=new Class[0];    Class clazz=ObjectFactory.findProviderClass(XALAN2_2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(XALAN2_2_VERSION_METHOD,noArgs);    Object returnValue=method.invoke(null,new Object[0]);    h.put(VERSION + "xalan2_2",(String)returnValue);  } catch (  Exception e2) {    h.put(VERSION + "xalan2_2",CLASS_NOTPRESENT);  }}  }
class C{  public void deinstall(JEditorPane c){  c.removeCaretListener(inputAttributeUpdater);  c.removePropertyChangeListener(inputAttributeUpdater);  currentRun=null;  currentParagraph=null;}  }
class C{  public void dismissAndSwitch(){  final int numIcons=mIcons.length;  RecentTag tag=null;  for (int i=0; i < numIcons; i++) {    if (mIcons[i].getVisibility() != View.VISIBLE) {      break;    }    if (i == 0 || mIcons[i].hasFocus()) {      tag=(RecentTag)mIcons[i].getTag();      if (mIcons[i].hasFocus()) {        break;      }    }  }  if (tag != null) {    switchTo(tag);  }  dismiss();}  }
class C{  public byte toReal(){  return _real;}  }
class C{  public void updateParameterInfo(@NotNull final PyArgumentList arglist,@NotNull final UpdateParameterInfoContext context){  if (context.getParameterOwner() != arglist) {    context.removeHint();    return;  }  List<PyExpression> flat_args=PyUtil.flattenedParensAndLists(arglist.getArguments());  int alleged_cursor_offset=context.getOffset();  final TextRange argListTextRange=arglist.getTextRange();  if (!argListTextRange.contains(alleged_cursor_offset) && arglist.getText().endsWith(")")) {    context.removeHint();    return;  }  PsiFile file=context.getFile();  CharSequence chars=file.getViewProvider().getContents();  int offset=-1;  for (  PyExpression arg : flat_args) {    TextRange range=arg.getTextRange();    int left=CharArrayUtil.shiftBackward(chars,range.getStartOffset() - 1," \t\r\n");    int right=CharArrayUtil.shiftForwardCarefully(chars,range.getEndOffset()," \t\r\n");    if (arg.getParent() instanceof PyListLiteralExpression || arg.getParent() instanceof PyTupleExpression) {      right=CharArrayUtil.shiftForward(chars,range.getEndOffset()," \t\r\n])");    }    if (left <= alleged_cursor_offset && right >= alleged_cursor_offset) {      offset=range.getStartOffset();      break;    }  }  context.setCurrentParameter(offset);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.915 -0500",hash_original_method="E54E1790034E06C2564EA8F8D322C604",hash_generated_method="4A4D6596F1AA464E59CD29757B0A54BF") @Deprecated public SslError(int error,SslCertificate certificate){  this(error,certificate,"");}  }
class C{  private static boolean hasXMPHeader(byte[] data){  if (data.length < XMP_HEADER_SIZE) {    return false;  }  try {    byte[] header=new byte[XMP_HEADER_SIZE];    System.arraycopy(data,0,header,0,XMP_HEADER_SIZE);    if (new String(header,"UTF-8").equals(XMP_HEADER)) {      return true;    }  } catch (  UnsupportedEncodingException e) {    return false;  }  return false;}  }
class C{  public ButtonFactory(ResourceBundle rb,ActionMap am){  super(rb);  actions=am;}  }
class C{  private void updateRangesFields(){  fRanges=(mask & ~(1 << 31));  fContextual=((mask & (1 << 31)) != 0);  if (fContextual) {    fRanges=(mask & ~(1 << 31));    fDefaultContextIndex=key;  } else {    fRanges=mask;    fSingleRangeIndex=key;  }}  }
class C{  public void startCountdown(int sec){  mCountdownView.startCountDown(sec);}  }
class C{  public long readLongFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Long)getPrimitive(node)).longValue();}  }
class C{  public static ZeroConfService create(String type,String name,int port,int weight,int priority,HashMap<String,String> properties){  ZeroConfService s;  if (ZeroConfService.services().containsKey(ZeroConfService.key(type,name))) {    s=ZeroConfService.services().get(ZeroConfService.key(type,name));    log.debug("Using existing ZeroConfService {}",s.key());  } else {    properties.put("version",jmri.Version.name());    properties.put("jmri",jmri.Version.getCanonicalVersion());    properties.put("node",NodeIdentity.identity());    s=new ZeroConfService(ServiceInfo.create(type,name,port,weight,priority,properties));    log.debug("Creating new ZeroConfService {} with properties {}",s.key(),properties);  }  return s;}  }
class C{  public void cancelChallanReceiptOnCreation(final ReceiptHeader receiptHeader){  final ReceiptHeader receiptHeaderToBeCancelled=receiptHeaderService.findById(receiptHeader.getReceiptHeader().getId(),false);  receiptHeaderToBeCancelled.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED));  receiptHeaderService.persist(receiptHeaderToBeCancelled);}  }
class C{  public static double nextDouble(double value,boolean increment){  return increment ? nextDouble(value) : previousDouble(value);}  }
class C{  private void checkSourceVersionCompatibility(Source source,Log log){  SourceVersion procSourceVersion=processor.getSupportedSourceVersion();  if (procSourceVersion.compareTo(Source.toSourceVersion(source)) < 0) {    log.warning("proc.processor.incompatible.source.version",procSourceVersion,Wrappers.unwrapProcessorClass(processor).getName(),source.name);  }}  }
class C{  void openPolicy(String filename) throws FileNotFoundException, PolicyParser.ParsingException, KeyStoreException, CertificateException, InstantiationException, MalformedURLException, IOException, NoSuchAlgorithmException, IllegalAccessException, NoSuchMethodException, UnrecoverableKeyException, NoSuchProviderException, ClassNotFoundException, PropertyExpander.ExpandException, InvocationTargetException {  newWarning=false;  policyEntries=new Vector<PolicyEntry>();  parser=new PolicyParser();  warnings=new Vector<String>();  setPolicyFileName(null);  clearKeyStoreInfo();  if (filename == null) {    modified=false;    return;  }  setPolicyFileName(filename);  parser.read(new FileReader(filename));  openKeyStore(parser.getKeyStoreUrl(),parser.getKeyStoreType(),parser.getKeyStoreProvider(),parser.getStorePassURL());  Enumeration<PolicyParser.GrantEntry> enum_=parser.grantElements();  while (enum_.hasMoreElements()) {    PolicyParser.GrantEntry ge=enum_.nextElement();    if (ge.signedBy != null) {      String signers[]=parseSigners(ge.signedBy);      for (int i=0; i < signers.length; i++) {        PublicKey pubKey=getPublicKeyAlias(signers[i]);        if (pubKey == null) {          newWarning=true;          MessageFormat form=new MessageFormat(getMessage("Warning.A.public.key.for.alias.signers.i.does.not.exist.Make.sure.a.KeyStore.is.properly.configured."));          Object[] source={signers[i]};          warnings.addElement(form.format(source));        }      }    }    ListIterator<PolicyParser.PrincipalEntry> prinList=ge.principals.listIterator(0);    while (prinList.hasNext()) {      PolicyParser.PrincipalEntry pe=prinList.next();      try {        verifyPrincipal(pe.getPrincipalClass(),pe.getPrincipalName());      } catch (      ClassNotFoundException fnfe) {        newWarning=true;        MessageFormat form=new MessageFormat(getMessage("Warning.Class.not.found.class"));        Object[] source={pe.getPrincipalClass()};        warnings.addElement(form.format(source));      }    }    Enumeration<PolicyParser.PermissionEntry> perms=ge.permissionElements();    while (perms.hasMoreElements()) {      PolicyParser.PermissionEntry pe=perms.nextElement();      try {        verifyPermission(pe.permission,pe.name,pe.action);      } catch (      ClassNotFoundException fnfe) {        newWarning=true;        MessageFormat form=new MessageFormat(getMessage("Warning.Class.not.found.class"));        Object[] source={pe.permission};        warnings.addElement(form.format(source));      }catch (      InvocationTargetException ite) {        newWarning=true;        MessageFormat form=new MessageFormat(getMessage("Warning.Invalid.argument.s.for.constructor.arg"));        Object[] source={pe.permission};        warnings.addElement(form.format(source));      }      if (pe.signedBy != null) {        String signers[]=parseSigners(pe.signedBy);        for (int i=0; i < signers.length; i++) {          PublicKey pubKey=getPublicKeyAlias(signers[i]);          if (pubKey == null) {            newWarning=true;            MessageFormat form=new MessageFormat(getMessage("Warning.A.public.key.for.alias.signers.i.does.not.exist.Make.sure.a.KeyStore.is.properly.configured."));            Object[] source={signers[i]};            warnings.addElement(form.format(source));          }        }      }    }    PolicyEntry pEntry=new PolicyEntry(this,ge);    policyEntries.addElement(pEntry);  }  modified=false;}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public static short[] toShortArray(int[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(short)array[i];  }  return result;}  }
class C{  public void deleteThreadVars() throws IOException {  print("deleteThreadVars",null);}  }
class C{  public static void main(String[] args){  try {    File testF=new File(new File(System.getProperty("user.dir")),"testOut.zip");    OutputZipper oz=new OutputZipper(testF);    oz.zipit("Here is some test text to be zipped","testzip");    oz.zipit("Here is a second entry to be zipped","testzip2");    oz.finished();  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public void createOffspring(Turkanian parent){  if (parent.energy <= birthEnergy) {    return;  }  Turkanian offspring=new Turkanian(this,parent.x,parent.y);  parent.energy-=birthEnergy;  offspring.energy=0;  agents.add(offspring);  agentGrid.setObjectLocation(offspring,offspring.x,offspring.y);  schedule.scheduleOnce(offspring);}  }
class C{  public static <T>Supplier<T> prevNoDupSupplier(final Cursor cursor,ByteArrayConverter<T> converter){  DatabaseEntry key=new DatabaseEntry();  DatabaseEntry data=new DatabaseEntry();  return null;}  }
class C{  private static void enableObjectAddressRemapper(){  Magic.setObjectAddressRemapper(BootImageObjectAddressRemapper.getInstance());}  }
class C{  public void transformNode(int node) throws TransformerException {  setExtensionsTable(getStylesheet());synchronized (m_serializationHandler) {    m_hasBeenReset=false;    XPathContext xctxt=getXPathContext();    DTM dtm=xctxt.getDTM(node);    try {      pushGlobalVars(node);      StylesheetRoot stylesheet=this.getStylesheet();      int n=stylesheet.getGlobalImportCount();      for (int i=0; i < n; i++) {        StylesheetComposed imported=stylesheet.getGlobalImport(i);        int includedCount=imported.getIncludeCountComposed();        for (int j=-1; j < includedCount; j++) {          Stylesheet included=imported.getIncludeComposed(j);          included.runtimeInit(this);          for (ElemTemplateElement child=included.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {            child.runtimeInit(this);          }        }      }      DTMIterator dtmIter=new org.apache.xpath.axes.SelfIteratorNoPredicate();      dtmIter.setRoot(node,xctxt);      xctxt.pushContextNodeList(dtmIter);      try {        this.applyTemplateToNode(null,null,node);      }  finally {        xctxt.popContextNodeList();      }      if (null != m_serializationHandler) {        m_serializationHandler.endDocument();      }    } catch (    Exception se) {      while (se instanceof org.apache.xml.utils.WrappedRuntimeException) {        Exception e=((org.apache.xml.utils.WrappedRuntimeException)se).getException();        if (null != e)         se=e;      }      if (null != m_serializationHandler) {        try {          if (se instanceof org.xml.sax.SAXParseException)           m_serializationHandler.fatalError((org.xml.sax.SAXParseException)se); else           if (se instanceof TransformerException) {            TransformerException te=((TransformerException)se);            SAXSourceLocator sl=new SAXSourceLocator(te.getLocator());            m_serializationHandler.fatalError(new org.xml.sax.SAXParseException(te.getMessage(),sl,te));          } else {            m_serializationHandler.fatalError(new org.xml.sax.SAXParseException(se.getMessage(),new SAXSourceLocator(),se));          }        } catch (        Exception e) {        }      }      if (se instanceof TransformerException) {        m_errorHandler.fatalError((TransformerException)se);      } else       if (se instanceof org.xml.sax.SAXParseException) {        m_errorHandler.fatalError(new TransformerException(se.getMessage(),new SAXSourceLocator((org.xml.sax.SAXParseException)se),se));      } else {        m_errorHandler.fatalError(new TransformerException(se));      }    } finally {      this.reset();    }  }}  }
class C{  @Override protected RdKNNEntry createRootEntry(){  return new RdKNNDirectoryEntry(0,null,Double.NaN);}  }
class C{  public static byte[] readBytes(Path self) throws IOException {  return Files.readAllBytes(self);}  }
class C{  public void showURLInBrowser(final URL url){  try {    if (Desktop.isDesktopSupported())     try {      Desktop.getDesktop().browse(url.toURI());      return;    } catch (    final Exception e) {    }    String[] cmdArray=null;    if (LEnv.OS == OpSys.WINDOWS) {      cmdArray=new String[]{"rundll32","url.dll,FileProtocolHandler",url.toString()};    } else {      final String[] browsers={"firefox","google-chrome","opera","konqueror","epiphany","mozilla","netscape"};      for (      final String browser : browsers)       if (Runtime.getRuntime().exec(new String[]{"which",browser}).waitFor() == 0) {        cmdArray=new String[]{browser,url.toString()};        break;      }    }    if (cmdArray != null)     Runtime.getRuntime().exec(cmdArray);  } catch (  final Exception e) {    LEnv.LOGGER.info("Failed to open URL: " + url,e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addInputProducer(PValue expandedInput,TransformTreeNode producer){  checkState(!finishedSpecifying);  inputs.put(expandedInput,producer);}  }
class C{  public Clustering<Model> run(Relation<Model> relation){  HashMap<Model,ModifiableDBIDs> modelMap=new HashMap<>();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    Model model=relation.get(iditer);    ModifiableDBIDs modelids=modelMap.get(model);    if (modelids == null) {      modelids=DBIDUtil.newHashSet();      modelMap.put(model,modelids);    }    modelids.add(iditer);  }  Clustering<Model> result=new Clustering<>("By Model Clustering","bymodel-clustering");  for (  Entry<Model,ModifiableDBIDs> entry : modelMap.entrySet()) {    final Model model=entry.getKey();    final ModifiableDBIDs ids=entry.getValue();    final String name=(model instanceof GeneratorInterface) ? ((GeneratorInterface)model).getName() : model.toString();    Cluster<Model> c=new Cluster<>(name,ids,model);    if (noisepattern != null && noisepattern.matcher(name).find()) {      c.setNoise(true);    }    result.addToplevelCluster(c);  }  return result;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(Type.string(covered));  sb.append(" ");  sb.append(alg);  sb.append(" ");  sb.append(labels);  sb.append(" ");  sb.append(origttl);  sb.append(" ");  if (Options.check("multiline"))   sb.append("(\n\t");  sb.append(FormattedTime.format(expire));  sb.append(" ");  sb.append(FormattedTime.format(timeSigned));  sb.append(" ");  sb.append(footprint);  sb.append(" ");  sb.append(signer);  if (Options.check("multiline")) {    sb.append("\n");    sb.append(base64.formatString(signature,64,"\t",true));  } else {    sb.append(" ");    sb.append(base64.toString(signature));  }  return sb.toString();}  }
class C{  private boolean isModel(JavaContext context,Node classDeclaration){  String classFilePackage=PackageManager.getPackage(context,classDeclaration);  return classFilePackage.contains(".models.");}  }
class C{  public void addPlugin(final IPlugin<IPluginInterface> plugin){  Preconditions.checkNotNull(plugin,"Error: Plugin argument can not be null");  m_registry.addPlugin(plugin);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(count);  for (int index=table.length - 1; index >= 0; index--) {    Entry entry=table[index];    while (entry != null) {      s.writeObject(entry.key);      s.writeObject(entry.value);      entry=entry.next;    }  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  tokenBox.mouseClicked(par1,par2,par3);  if (tokenBox.isFocused()) {    errorText="";    helpText="";  }}  }
class C{  public Object call(Object object,String name,Object[] args) throws BSFException {  if (object == null) {    try {      object=interpreter.get("global");    } catch (    EvalError e) {      throw new BSFException("bsh internal error: " + e.toString());    }  }  if (object instanceof bsh.This) {    try {      return ((bsh.This)object).invokeMethod(name,args);    } catch (    InterpreterError e) {      throw new BSFException("BeanShell interpreter internal error: " + e);    }catch (    TargetError e2) {      throw new BSFException("The application script threw an exception: " + e2.getTarget());    }catch (    EvalError e3) {      throw new BSFException("BeanShell script error: " + e3);    }  } else {    throw new BSFException("Cannot invoke method: " + name + ". Object: "+ object+ " is not a BeanShell scripted object.");  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.536 -0500",hash_original_method="55F676D436FF1EC67ECC1C028E81ED27",hash_generated_method="AC9FD73229CF68305BF944740C6C29B7") private View moveSelection(int delta,int childrenTop,int childrenBottom){  final int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  final int numColumns=mNumColumns;  final int verticalSpacing=mVerticalSpacing;  int oldRowStart;  int rowStart;  int rowEnd=-1;  if (!mStackFromBottom) {    oldRowStart=(selectedPosition - delta) - ((selectedPosition - delta) % numColumns);    rowStart=selectedPosition - (selectedPosition % numColumns);  } else {    int invertedSelection=mItemCount - 1 - selectedPosition;    rowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    rowStart=Math.max(0,rowEnd - numColumns + 1);    invertedSelection=mItemCount - 1 - (selectedPosition - delta);    oldRowStart=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    oldRowStart=Math.max(0,oldRowStart - numColumns + 1);  }  final int rowDelta=rowStart - oldRowStart;  final int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,rowStart);  final int bottomSelectionPixel=getBottomSelectionPixel(childrenBottom,fadingEdgeLength,numColumns,rowStart);  mFirstPosition=rowStart;  View sel;  View referenceView;  if (rowDelta > 0) {    final int oldBottom=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getBottom();    sel=makeRow(mStackFromBottom ? rowEnd : rowStart,oldBottom + verticalSpacing,true);    referenceView=mReferenceView;    adjustForBottomFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  } else   if (rowDelta < 0) {    final int oldTop=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getTop();    sel=makeRow(mStackFromBottom ? rowEnd : rowStart,oldTop - verticalSpacing,false);    referenceView=mReferenceView;    adjustForTopFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  } else {    final int oldTop=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getTop();    sel=makeRow(mStackFromBottom ? rowEnd : rowStart,oldTop,true);    referenceView=mReferenceView;  }  if (!mStackFromBottom) {    fillUp(rowStart - numColumns,referenceView.getTop() - verticalSpacing);    adjustViewsUpOrDown();    fillDown(rowStart + numColumns,referenceView.getBottom() + verticalSpacing);  } else {    fillDown(rowEnd + numColumns,referenceView.getBottom() + verticalSpacing);    adjustViewsUpOrDown();    fillUp(rowStart - 1,referenceView.getTop() - verticalSpacing);  }  return sel;}  }
class C{  public synchronized void clear(){  super.clear();  mValue.clear();  initRange();}  }
class C{  public static void fill(int[][][] matrix,int value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    int cols=matrix[r].length;    for (int c=0; c < cols; c++) {      int height=matrix[r][c].length;      for (int h=0; h < height; h++) {        matrix[r][c][h]=value;      }    }  }}  }
class C{  @Override public int hashCode(){  if (m_RecalcHashCode) {    m_HashCode=toString().hashCode();    m_RecalcHashCode=false;  }  return m_HashCode;}  }
class C{  @Override public int intValue(){  return value;}  }
class C{  public DefaultDeployableFactory(ClassLoader classLoader){  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.WAR,WAR.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.EJB,EJB.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.EAR,EAR.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.SAR,SAR.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.RAR,RAR.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.FILE,File.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.BUNDLE,Bundle.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.HAR,HAR.class);  registerDeployable(DEFAULT_CONTAINER_ID,DeployableType.AOP,AOP.class);  AbstractFactoryRegistry.register(classLoader,this);}  }
class C{  public VarInt(long value){  this.value=value;  originallyEncodedSize=getSizeInBytes();}  }
class C{  public void makeClass(Vector v,boolean caseless){  makeClass(new IntCharSet(v),caseless);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList deactivateSnapshot(@PathParam("id") URI id,@DefaultValue("FULL") @QueryParam("type") String type){  _log.info("Executing {} snapshot delete for snapshot {}",type,id);  String opStage=null;  boolean successStatus=true;  String taskId=UUID.randomUUID().toString();  TaskList response=new TaskList();  BlockSnapshot snap=(BlockSnapshot)queryResource(id);  List<Class<? extends DataObject>> excludeTypes=new ArrayList<Class<? extends DataObject>>();  excludeTypes.add(BlockSnapshotSession.class);  if (VolumeDeleteTypeEnum.VIPR_ONLY.name().equals(type)) {    excludeTypes.add(ExportGroup.class);    excludeTypes.add(ExportMask.class);  }  ArgValidator.checkReference(BlockSnapshot.class,id,checkForDelete(snap,excludeTypes));  if (!VolumeDeleteTypeEnum.VIPR_ONLY.name().equals(type)) {    opStage=AuditLogManager.AUDITOP_BEGIN;    URIQueryResultList snapSessionURIs=new URIQueryResultList();    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getLinkedTargetSnapshotSessionConstraint(id),snapSessionURIs);    Iterator<URI> snapSessionURIsIter=snapSessionURIs.iterator();    if (snapSessionURIsIter.hasNext()) {      _log.info("Snapshot is linked target for a snapshot session");      SnapshotSessionUnlinkTargetsParam param=new SnapshotSessionUnlinkTargetsParam();      List<SnapshotSessionUnlinkTargetParam> targetInfoList=new ArrayList<SnapshotSessionUnlinkTargetParam>();      SnapshotSessionUnlinkTargetParam targetInfo=new SnapshotSessionUnlinkTargetParam(id,Boolean.TRUE);      targetInfoList.add(targetInfo);      param.setLinkedTargets(targetInfoList);      response.getTaskList().add(getSnapshotSessionManager().unlinkTargetVolumesFromSnapshotSession(snapSessionURIsIter.next(),param,OperationTypeEnum.DELETE_VOLUME_SNAPSHOT));      return response;    }    if (snap.getInactive()) {      _log.info("Snapshot is already inactive");      Operation op=new Operation();      op.ready("The snapshot has already been deleted");      op.setResourceType(ResourceOperationTypeEnum.DELETE_VOLUME_SNAPSHOT);      _dbClient.createTaskOpStatus(BlockSnapshot.class,snap.getId(),taskId,op);      response.getTaskList().add(toTask(snap,taskId,op));      return response;    }  }  StorageSystem device=_dbClient.queryObject(StorageSystem.class,snap.getStorageController());  List<BlockSnapshot> snapshots=new ArrayList<BlockSnapshot>();  final URI cgId=snap.getConsistencyGroup();  if (!NullColumnValueGetter.isNullURI(cgId) && !NullColumnValueGetter.isNullValue(snap.getReplicationGroupInstance())) {    snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snap,_dbClient);  } else {    snapshots.add(snap);  }  Volume parentVolume=_permissionsHelper.getObjectById(snap.getParent(),Volume.class);  checkForPendingTasks(Arrays.asList(parentVolume.getTenant().getURI()),snapshots);  for (  BlockSnapshot snapshot : snapshots) {    Operation snapOp=_dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),taskId,ResourceOperationTypeEnum.DELETE_VOLUME_SNAPSHOT);    response.getTaskList().add(toTask(snapshot,taskId,snapOp));  }  try {    BlockServiceApi blockServiceApiImpl=BlockService.getBlockServiceImpl(parentVolume,_dbClient);    blockServiceApiImpl.deleteSnapshot(snap,snapshots,taskId,type);  } catch (  APIException|InternalException e) {    successStatus=false;    String errorMsg=String.format("Exception attempting to delete snapshot %s: %s",snap.getId(),e.getMessage());    _log.error(errorMsg);    for (    TaskResourceRep taskResourceRep : response.getTaskList()) {      taskResourceRep.setState(Operation.Status.error.name());      taskResourceRep.setMessage(errorMsg);      _dbClient.error(BlockSnapshot.class,taskResourceRep.getResource().getId(),taskId,e);    }  }catch (  Exception e) {    successStatus=false;    String errorMsg=String.format("Exception attempting to delete snapshot %s: %s",snap.getId(),e.getMessage());    _log.error(errorMsg);    ServiceCoded sc=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    for (    TaskResourceRep taskResourceRep : response.getTaskList()) {      taskResourceRep.setState(Operation.Status.error.name());      taskResourceRep.setMessage(sc.getMessage());      _dbClient.error(BlockSnapshot.class,taskResourceRep.getResource().getId(),taskId,sc);    }  }  auditOp(OperationTypeEnum.DELETE_VOLUME_SNAPSHOT,successStatus,opStage,id.toString(),snap.getLabel(),snap.getParent().getName(),device.getId().toString());  return response;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public CataclysmicDemographicModel(Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Parameter timeParameter,Type units,boolean useSpike){  this(CataclysmicDemographicModelParser.CATACLYSM_MODEL,N0Parameter,N1Parameter,growthRateParameter,timeParameter,units,useSpike);}  }
class C{  public <T extends SuperModel>boolean insert(T model){  Object[] objects=model.getInsertSql();  return execSQL(objects[0].toString(),Arrays.copyOfRange(objects,1,objects.length));}  }
class C{  public void update(byte[] in,int off,int len){  contentDigest.update(in,off,len);}  }
class C{  PostscriptGraphics(PostscriptGraphics copy){  m_extent=new Rectangle(copy.m_extent);  m_printstream=copy.m_printstream;  m_localGraphicsState=new GraphicsState(copy.m_localGraphicsState);  m_psGraphicsState=copy.m_psGraphicsState;}  }
class C{  public boolean isParameterized(){  EList<TypeRef> _typeArgs=this.getTypeArgs();  boolean _isEmpty=_typeArgs.isEmpty();  return (!_isEmpty);}  }
class C{  public ConstraintIntervalType createConstraintIntervalTypeFromString(EDataType eDataType,String initialValue){  ConstraintIntervalType result=ConstraintIntervalType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  private Optional<FeedItem> findLastVisibleFeedItem(Set<ContentType> contentType){  List<FeedItem> items=feedAdapter.getFeed().getItems();  return getRecyclerViewLayoutManager().<Optional<FeedItem>>transform(null).get();}  }
class C{  public TaskBuilder single(){  this.type=TaskType.SINGLE;  return this;}  }
class C{  public static double mean(Iterator tuples,String field){  try {    int count=0;    double sum=0;    while (tuples.hasNext()) {      sum+=((Tuple)tuples.next()).getDouble(field);      ++count;    }    return sum / count;  } catch (  Exception e) {    return Double.NaN;  }}  }
class C{  @Override public void onPageScrollStateChanged(int page){}  }
class C{  public static boolean exitableTerrain(int terrType){  boolean exitableTerrainType=false;  for (int i=0; i < Terrains.exitableTerrains.length; i++) {    exitableTerrainType|=terrType == Terrains.exitableTerrains[i];  }  return exitableTerrainType;}  }
class C{  private static CTutorial loadTutorial(final File file) throws ParserConfigurationException, SAXException, IOException {  String name="";  String description="";  final List<CTutorialStep> steps=new ArrayList<CTutorialStep>();  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  final DocumentBuilder builder=factory.newDocumentBuilder();  final Document document=builder.parse(file);  final NodeList nodes=document.getFirstChild().getChildNodes();  for (int i=0; i < nodes.getLength(); ++i) {    final Node node=nodes.item(i);    final String nodeName=node.getNodeName();    if ("name".equals(nodeName)) {      name=node.getTextContent();    } else     if ("description".equals(nodeName)) {      description=node.getTextContent();    } else     if ("steps".equals(nodeName)) {      steps.addAll(readSteps(node));    }  }  return new CTutorial(name,description,steps);}  }
class C{  public void readFromNBT(NBTTagCompound nbt){  this.cheese=EnumCheeseType.loadFromNBT(nbt);  this.cheeseStage=EnumCheeseStage.loadFromNBT(nbt);  if (nbt.hasKey("age")) {    this.age=nbt.getInteger("age");  }  if (nbt.hasKey("slices")) {    this.slices=nbt.getInteger("slices");  }  if (nbt.hasKey("slices_max")) {    this.slicesMax=nbt.getInteger("slices_max");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.390 -0500",hash_original_method="344907C67A02819CC7A230367AD45761",hash_generated_method="4B06F00DE2D9425181B65C93B3228913") @Override protected int computeHorizontalScrollRange(){  final int count=getChildCount();  final int contentWidth=getWidth() - mPaddingLeft - mPaddingRight;  if (count == 0) {    return contentWidth;  }  int scrollRange=getChildAt(0).getRight();  final int scrollX=mScrollX;  final int overscrollRight=Math.max(0,scrollRange - contentWidth);  if (scrollX < 0) {    scrollRange-=scrollX;  } else   if (scrollX > overscrollRight) {    scrollRange+=scrollX - overscrollRight;  }  return scrollRange;}  }
class C{  public DateBuilder inLocale(Locale locale){  this.lc=locale;  return this;}  }
class C{  public IgniteThread(GridWorker worker){  this(DFLT_GRP,worker.gridName(),worker.name(),worker,GRP_IDX_UNASSIGNED);}  }
class C{  void convertRequireToImportStatements(Node n,String fullLocalName,String requiredNamespace){  if (!namespaceToModule.containsKey(requiredNamespace)) {    compiler.report(JSError.make(n,GentsErrorManager.GENTS_MODULE_PASS_ERROR,String.format("Module %s does not exist.",requiredNamespace)));    return;  }  String localName=nameUtil.lastStepOfName(fullLocalName);  FileModule module=namespaceToModule.get(requiredNamespace);  String moduleSuffix=nameUtil.lastStepOfName(requiredNamespace);  String backupName=moduleSuffix.equals(localName) ? moduleSuffix + "Exports" : moduleSuffix;  if (module.shouldUseOldSyntax()) {    Node importNode=new Node(Token.IMPORT,IR.empty(),Node.newString(Token.NAME,localName),Node.newString("goog:" + requiredNamespace));    nodeComments.replaceWithComment(n,importNode);    compiler.reportCodeChange();    registerLocalSymbol(n.getSourceFileName(),fullLocalName,requiredNamespace,localName);    return;  }  String referencedFile=pathUtil.getImportPath(n.getSourceFileName(),module.file);  boolean imported=false;  if (module.importedNamespacesToSymbols.containsKey(requiredNamespace)) {    Node importSpec=new Node(Token.IMPORT_SPEC,IR.name(moduleSuffix));    if (!moduleSuffix.equals(localName)) {      importSpec.addChildToBack(IR.name(localName));    }    Node importNode=new Node(Token.IMPORT,IR.empty(),new Node(Token.IMPORT_SPECS,importSpec),Node.newString(referencedFile));    n.getParent().addChildBefore(importNode,n);    nodeComments.moveComment(n,importNode);    imported=true;    registerLocalSymbol(n.getSourceFileName(),fullLocalName,requiredNamespace,localName);    localName=backupName;  }  if (module.providesObjectChildren.get(requiredNamespace).size() > 0) {    Node importNode=new Node(Token.IMPORT,IR.empty(),Node.newString(Token.IMPORT_STAR,localName),Node.newString(referencedFile));    n.getParent().addChildBefore(importNode,n);    nodeComments.moveComment(n,importNode);    imported=true;    for (    String child : module.providesObjectChildren.get(requiredNamespace)) {      if (!valueRewrite.contains(n.getSourceFileName(),child)) {        String fileName=n.getSourceFileName();        registerLocalSymbol(fileName,fullLocalName + '.' + child,requiredNamespace + '.' + child,localName + '.' + child);      }    }  }  if (!imported) {    Node importNode=new Node(Token.IMPORT,IR.empty(),IR.empty(),Node.newString(referencedFile));    n.getParent().addChildBefore(importNode,n);    nodeComments.moveComment(n,importNode);  }  n.getParent().removeChild(n);  compiler.reportCodeChange();}  }
class C{  @VisibleForTesting public void clearPendingInvalidations(Context context){  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();  editor.putString(DELAYED_ACCOUNT_NAME,null);  editor.putStringSet(DELAYED_INVALIDATIONS,null);  editor.apply();}  }
class C{  public static int parseCodePoint(String s) throws NumberFormatException {  return Integer.parseInt(s,16);}  }
class C{  public final boolean hasIndex(){  return (index >= 0);}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  final int blockLen=lineLen * 3 / 4;  if (blockLen <= 0) {    throw new IllegalArgumentException();  }  final int lines=(iLen + blockLen - 1) / blockLen;  final int bufLen=(iLen + 2) / 3 * 4 + lines * lineSeparator.length();  final StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    final int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.ROUTE__OWNED_ENDPOINTS:    getOwnedEndpoints().clear();  getOwnedEndpoints().addAll((Collection<? extends Endpoint>)newValue);return;case EipPackage.ROUTE__OWNED_CHANNELS:getOwnedChannels().clear();getOwnedChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.ROUTE__NAME:setName((String)newValue);return;case EipPackage.ROUTE__EXCHANGE_TYPE:setExchangeType((ExchangeType)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void write(int c){  buf.append((char)c);}  }
class C{  public void initialize(EngineStatusCallback engineStatusCallback){  this.statusEventHandler.initialize(engineStatusCallback);  this.outputEventHandler.initialize(engineStatusCallback);}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public static OutputLimitClause create(OutputLimitSelector selector,double frequency){  return new OutputLimitClause(selector,frequency);}  }
class C{  public static boolean isHeadMissing(final VcsException e){  @NonNls final String errorText="fatal: bad revision 'HEAD'\n";  return e.getMessage().equals(errorText);}  }
class C{  private String compute(String left,Boolean right){  if (left == null && right == null) {    return null;  }  return (left == null ? "" : left) + (right == null ? "" : right);}  }
class C{  public boolean isNamespaceAware(){  return _isNamespaceAware;}  }
class C{  public void remove(int fieldNumber){  int i=binarySearch(fieldNumber);  if (i >= 0 && mData[i] != DELETED) {    mData[i]=DELETED;    mGarbage=true;  }}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD_TypeRef_TypeRefWithModifiers(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.149 -0500",hash_original_method="A22563797EE8B98D8D2C96F4FC0F2C77",hash_generated_method="EB9D53584F352AD6AC60DCC4EDA82399") public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){  Cursor ret=new DSCursor(DSOnlyType.NOT_USED);  ret.addTaint(db.getTaint());  ret.addTaint(projectionIn.getTaint());  ret.addTaint(projectionIn[0].getTaint());  ret.addTaint(selection.getTaint());  ret.addTaint(selectionArgs.getTaint());  ret.addTaint(selectionArgs[0].getTaint());  ret.addTaint(groupBy.getTaint());  ret.addTaint(having.getTaint());  ret.addTaint(sortOrder.getTaint());  ret.addTaint(limit.getTaint());  return ret;}  }
class C{  public PayloadItem(E payloadExt){  super();  if (payloadExt == null)   throw new IllegalArgumentException("payload cannot be 'null'");  payload=payloadExt;}  }
class C{  public void testNegPos(){  String numA="-27384627835298756289327365";  String numB="0";  String res="-27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void initializeTrie(Context context,int fileResource){  TrieNode startInsertionNode=mRoot;  InputStream stream=context.getResources().openRawResource(fileResource);  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(stream,"UTF-8"));    String input;    while ((input=reader.readLine()) != null) {      for (int i=0; i < input.length(); i++) {        startInsertionNode=insertSymbol(startInsertionNode,input.charAt(i));      }    }  } catch (  IOException e) {    LogUtils.log(this,Log.ERROR,"Unable to read PPMTrie input file: %1$s",e.toString());  } finally {    try {      if (reader != null) {        reader.close();      }    } catch (    IOException e) {      LogUtils.log(this,Log.ERROR,"Unable to close input file: %1$s",e.toString());    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.891 -0500",hash_original_method="7045B1DBF21073AA43E994CE221E4094",hash_generated_method="7045B1DBF21073AA43E994CE221E4094") ObjectStreamField(String signature,String name){  if (name == null) {    throw new NullPointerException();  }  this.name=name;  this.typeString=signature.replace('.','/').intern();  defaultResolve();  this.isDeserialized=true;}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  Object[] set=_map._set;  int i=_index;  while (i-- > 0 && (set[i] == null || set[i] == TObjectHash.REMOVED))   ;  return i;}  }
class C{  public static ArrayList<BaseQuestion> returnChatList(String jsonFile){  ArrayList<BaseQuestion> questions=new ArrayList<BaseQuestion>();  RestAPI api=RestAPI.getAPI();  questions=api.getChatQuestions(jsonFile);  return questions;}  }
class C{  public int numElements() throws Exception {  if (m_Classifier instanceof PartitionGenerator)   return ((PartitionGenerator)m_Classifier).numElements(); else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");}  }
class C{  @Override protected Instance process(Instance instance) throws Exception {  m_Remove.input(instance);  return m_Remove.output();}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 1) {    BufferedImage firstImage=ImageIO.read(new File(args[0]));    ImageOutputStream output=new FileImageOutputStream(new File(args[args.length - 1]));    GifSequenceWriter writer=new GifSequenceWriter(output,firstImage.getType(),1,false);    writer.writeToSequence(firstImage);    for (int i=1; i < args.length - 1; i++) {      BufferedImage nextImage=ImageIO.read(new File(args[i]));      writer.writeToSequence(nextImage);    }    writer.close();    output.close();  } else {    System.out.println("Usage: java GifSequenceWriter [list of gif files] [output file]");  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (index < 0) {    throw new IllegalStateException();  }  if (lag < 0) {    throw new IllegalStateException();  }}  }
class C{  public boolean markAsRead(String smsNumber){  try {    ContentResolver cr=_context.getContentResolver();    ContentValues values=new ContentValues();    values.put("read","1");    cr.update(SMS_INBOX_CONTENT_URI,values," address='" + smsNumber + "'",null);    return true;  } catch (  Exception e) {    Log.w("markAsRead() exception:",e);    return false;  }}  }
class C{  public CategoryAxis3D(String label){  super(label);}  }
class C{  @Override public int compare(Triplet<byte[],UserLeafNode,Operation> p1,Triplet<byte[],UserLeafNode,Operation> p2){  byte[] buf1=p1.getValue0();  byte[] buf2=p2.getValue0();  if (buf1.length < 3 || buf2.length < 3) {    throw new RuntimeException("bad byte array length");  }  for (int i=0; i < 3; i++) {    if (buf1[i] > buf2[i]) {      return 1;    } else     if (buf1[i] < buf2[i]) {      return -1;    }  }  Operation op1=p1.getValue2();  Operation op2=p2.getValue2();  if (op1 instanceof Register) {    return 1;  }  if (op2 instanceof Register) {    return -1;  }  if (op1 instanceof KeyChange && op2 instanceof KeyChange) {    return (((KeyChange)op1).getCounter() > ((KeyChange)op2).getCounter()) ? 1 : -1;  }  return 0;}  }
class C{  private void parsePublicUserIdentity(Node node){  String publicUserIdentity=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (publicUserIdentity == null) {        if ((publicUserIdentity=getValueByParamName("Public_User_Identity",childnode,TYPE_TXT)) != null) {          String username=extractUserNamePart(publicUserIdentity.trim());          PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(username);          if (number == null) {            if (sLogger.isActivated()) {              sLogger.error("Invalid public user identity '" + username + "'");            }            mRcsSettings.setUserProfileImsUserName(null);          } else {            ContactId contact=ContactUtil.createContactIdFromValidatedData(number);            mRcsSettings.setUserProfileImsUserName(contact);          }        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  @Override public void clearUndo(){  ((DataSortedTableModel)m_TableData.getModel()).clearUndo();}  }
class C{  public static List<org.oscm.internal.vo.VOParameterOption> convertToUpVOParameterOption(List<org.oscm.vo.VOParameterOption> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOParameterOption> newVO=new ArrayList<org.oscm.internal.vo.VOParameterOption>();  for (  org.oscm.vo.VOParameterOption tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public void traceFieldNotStaticInHostJdk(){  traceNulledWord(": field not static in host jdk");}  }
class C{  public SwitchPreference(Context context){  super(context,null);}  }
class C{  private void publishTextRecord(final LogRecord record){  try {    logpane.publish(record);  } catch (  Exception e) {    throw new RuntimeException("Error writing a log-like message.",e);  }}  }
class C{  public static final List<String> combine(Collection<String> list,String... args){  List<String> ret=new ArrayList<String>(list);  for (  String s : args) {    ret.add(s);  }  return ret;}  }
class C{  public void clear(){  try {    skip(size);  } catch (  EOFException e) {    throw new AssertionError(e);  }}  }
class C{  public static String fromUTF8(byte[] bytes){  try {    return new String(bytes,ENCODING_UTF8);  } catch (  UnsupportedEncodingException e) {    throw new AssertionError(e);  }}  }
class C{  private void analyzeFiles(Set<String> fileNames) throws CLIArgumentParserException, IOException {  ColorSettings colorSettings=new ColorSettings(configuration.shouldColorOutput(),configuration.shouldInvertColorOutput());  Formatter formatter=configuration.getFormatter(colorSettings);  Severity maxSeverity=configuration.getMaxSeverity();  ConstructLengths constructLengths=configuration.parseConstructLengths();  Set<Rules> enabledRules=configuration.getEnabledRules();  numberOfFilesBeforePurge=configuration.numberOfFilesBeforePurge();  List<File> files=fileNames.parallelStream().map(null).collect(Collectors.toList());  formatter.printProgressInfo(String.format("Analyzing %s:%n",Formatter.pluralize(fileNames.size(),"file","files")));  files.parallelStream().forEach(null);  formatter.printProgressInfo(String.format("%n"));  printersForAllFiles.forEach(null);  formatter.displaySummary(fileNames.size(),numSkippedFiles.get(),numErrors.get(),numWarnings.get());  handleErrorViolations(formatter,numErrors.get());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ENUM___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.ENUM___STATE_NAME_1:setStateName_1(STATE_NAME_1_EDEFAULT);return;case UmplePackage.ENUM___ANONYMOUS_ENUM_11:getAnonymous_enum_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  private synchronized boolean isSelectedTrackRecording(){  return trackDataHub != null && trackDataHub.isSelectedTrackRecording();}  }
class C{  public byte[] filter(byte[] buffer,int offset,int len){  byte[] slices=getSlices(buffer,offset,len);  if (null == slices) {    return null;  }  int insertionPoint=findInsertionPoint(slices);  if (insertionPoint >= 0) {    return buffer;  }  if (-1 == insertionPoint) {    if (hasHinting) {      return Arrays.copyOf(this.rangekeys,this.bounds[1]);    } else {      return null;    }  }  if (-nranges - 1 == insertionPoint) {    if (hasHinting) {      return EMPTY_BYTE_ARRAY;    } else {      return null;    }  }  if (-(insertionPoint + 1) % 2 == 0) {    if (hasHinting) {      int hintOffset=this.slicesLength * (-(insertionPoint + 1));      return Arrays.copyOfRange(this.rangekeys,hintOffset,this.bounds[1]);    } else {      return null;    }  }  return buffer;}  }
class C{  private JPanel createPhotoframe(){  JPanel pf=NPComponentUtils.createPanel_root(NPIconFactory.getInstance().getPhotoframeBg(),new Insets(13,15,15,15));  pf.setLayout(new BorderLayout());  pf.setOpaque(false);  return pf;}  }
class C{  @SuppressWarnings("deprecation") void insertIntoHoveringConnection(final Operator operator){  OutputPort hoveringConnectionSource=model.getHoveringConnectionSource();  if (hoveringConnectionSource == null) {    return;  }  InputPort oldDest=hoveringConnectionSource.getDestination();  oldDest.lock();  hoveringConnectionSource.lock();  try {    InputPort bestInputPort=null;    MetaData md=hoveringConnectionSource.getMetaData();    if (md != null) {      for (      InputPort inCandidate : operator.getInputPorts().getAllPorts()) {        if (!inCandidate.isConnected() && inCandidate.isInputCompatible(md,CompatibilityLevel.PRE_VERSION_5)) {          bestInputPort=inCandidate;          break;        }      }    } else {      for (      InputPort inCandidate : operator.getInputPorts().getAllPorts()) {        if (!inCandidate.isConnected()) {          bestInputPort=inCandidate;          break;        }      }    }    if (bestInputPort != null) {      hoveringConnectionSource.disconnect();      connect(hoveringConnectionSource,bestInputPort);      if (RapidMinerGUI.getMainFrame().VALIDATE_AUTOMATICALLY_ACTION.isSelected()) {        hoveringConnectionSource.getPorts().getOwner().getOperator().transformMetaData();        operator.transformMetaData();      }      OutputPort bestOutput=null;      for (      OutputPort outCandidate : operator.getOutputPorts().getAllPorts()) {        if (!outCandidate.isConnected()) {          md=outCandidate.getMetaData();          if (md != null && oldDest.isInputCompatible(md,CompatibilityLevel.PRE_VERSION_5)) {            bestOutput=outCandidate;            break;          }        }      }      if (bestOutput == null) {        for (        OutputPort outCandidate : operator.getOutputPorts().getAllPorts()) {          if (!outCandidate.isConnected()) {            bestOutput=outCandidate;            break;          }        }      }      if (bestOutput != null) {        connect(bestOutput,oldDest);      }    }  }  finally {    oldDest.unlock();    hoveringConnectionSource.unlock();    model.setHoveringConnectionSource(null);  }}  }
class C{  protected void unhandledMessageReceived(OFMessage m){  switchManagerCounters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected message");    log.debug(msg);  }}  }
class C{  public static int sanitizeInt(int flags){  if (((flags & OFMatch.OFPFW_NW_SRC_MASK) >> OFMatch.OFPFW_NW_SRC_SHIFT) > 32) {    flags=(flags & ~OFMatch.OFPFW_NW_SRC_MASK) | OFMatch.OFPFW_NW_SRC_ALL;  }  if (((flags & OFMatch.OFPFW_NW_DST_MASK) >> OFMatch.OFPFW_NW_DST_SHIFT) > 32) {    flags=(flags & ~OFMatch.OFPFW_NW_DST_MASK) | OFMatch.OFPFW_NW_DST_ALL;  }  return flags;}  }
class C{  public ToHitData(TargetRollModifier targetRollModifier){  this(targetRollModifier.getValue(),targetRollModifier.getDesc());}  }
class C{  @Override public void testSendReceive() throws Exception {  super.testSendReceive();  messages.clear();  consumer2.setMessageListener(this);  assertMessagesAreReceived();  LOG.info("" + data.length + " messages(s) received, closing down connections");}  }
class C{  public void changeState(boolean newState){  if (log.isDebugEnabled()) {    log.debug("Change state to " + newState);  }  isOn=newState;  this.setSelected(isOn);  for (int i=0; i < listeners.size(); i++) {    listeners.get(i).notifyFunctionStateChanged(identity,isOn);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.SHIFT_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.SHIFT_EXPRESSION__OPERATOR:  return getOperator();case ExpressionsPackage.SHIFT_EXPRESSION__RIGHT_OPERAND:return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public String toString(){  String result=toString;  if (result == null) {    result=computeToString();    toString=result;  }  return result;}  }
class C{  public static Border createBevelBorder(int type,Color highlightOuter,Color highlightInner,Color shadowOuter,Color shadowInner){  return new BevelBorder(type,highlightOuter,highlightInner,shadowOuter,shadowInner);}  }
class C{  public boolean canUserModifyEntry(User user,Entry entry,boolean isAdmin){  return canUserSeeEntry(user,entry,isAdmin);}  }
class C{  public Shape3DPortrayal3D(Geometry geometry,Appearance appearance){  this(new Shape3D(geometry),appearance);}  }
class C{  public MessageProducer createProducer(Session session,Destination destination) throws JMSException {  MessageProducer producer=session.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  return producer;}  }
class C{  public static AppEventsLogger newLogger(Context context){  return new AppEventsLogger(context,null,null);}  }
class C{  private boolean haveShownMessageBefore(UpdateMessage msg){  if (!msg.isShownOnce())   return false;  loadSeenMessages();  if (_seenMessages == null || _seenMessages.size() == 0 || !_seenMessages.contains(msg)) {    if (_seenMessages == null)     _seenMessages=new HashSet<>();    _seenMessages.add(msg);    saveSeenMessages();    return false;  }  return true;}  }
class C{  public <T>JsonArray<T> createListDtoFromJson(String json,Class<T> dtoInterface){  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final List<JsonElement> list=gson.fromJson(json,listTypeCache.getUnchecked(JsonElement.class));  final List<T> result=new ArrayList<>(list.size());  for (  JsonElement e : list) {    result.add(dtoProvider.fromJson(e));  }  return new JsonArrayImpl<>(result);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SimpleProtein(String ac,String id,String name,int length,String md5,String crc64,boolean isProteinFragment){  this.ac=ac;  this.id=id;  this.name=name;  this.length=length;  this.md5=md5;  this.crc64=crc64;  this.taxId=null;  this.taxScienceName=null;  this.taxFullName=null;  this.isProteinFragment=isProteinFragment;}  }
class C{  public VfsStream(){}  }
class C{  public synchronized Map<String,Class<T>> compile(final Map<String,CharSequence> classes,final DiagnosticCollector<JavaFileObject> diagnosticsList) throws CharSequenceCompilerException {  List<JavaFileObject> sources=new ArrayList<>();  for (  Map.Entry<String,CharSequence> entry : classes.entrySet()) {    String qualifiedClassName=entry.getKey();    CharSequence javaSource=entry.getValue();    if (javaSource != null) {      final int dotPos=qualifiedClassName.lastIndexOf('.');      final String className=dotPos == -1 ? qualifiedClassName : qualifiedClassName.substring(dotPos + 1);      final String packageName=dotPos == -1 ? "" : qualifiedClassName.substring(0,dotPos);      final JavaFileObjectImpl source=new JavaFileObjectImpl(className,javaSource);      sources.add(source);      javaFileManager.putFileForInput(StandardLocation.SOURCE_PATH,packageName,className + JAVA_EXTENSION,source);    }  }  final JavaCompiler.CompilationTask task=compiler.getTask(null,javaFileManager,diagnostics,options,null,sources);  final Boolean result=task.call();  if (result == null || !result) {    StringBuilder cause=new StringBuilder("\n");    for (    Diagnostic d : diagnostics.getDiagnostics()) {      cause.append(d).append(" ");    }    throw new CharSequenceCompilerException("Compilation failed. Causes: " + cause,classes.keySet(),diagnostics);  }  try {    Map<String,Class<T>> compiled=new HashMap<>();    for (    String qualifiedClassName : classLoader.classNames()) {      final Class<T> newClass=loadClass(qualifiedClassName);      compiled.put(qualifiedClassName,newClass);    }    return compiled;  } catch (  ClassNotFoundException|SecurityException|IllegalArgumentException e) {    throw new CharSequenceCompilerException(classes.keySet(),e,diagnostics);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.428 -0500",hash_original_method="C7335716F5A5FE392DFA727356C682DF",hash_generated_method="A329A8E4FAEC9FF6A4525B62EAF0DCD3") public void addOptionHandler(TelnetOptionHandler opthand) throws InvalidTelnetOptionException {  super.addOptionHandler(opthand);}  }
class C{  public StateMachineConfigurationBuilder(){  super();}  }
class C{  public RowSetEvent(RowSet source){  super(source);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MoveStaticMembersDescriptor(){  super(IJavaRefactorings.MOVE_STATIC_MEMBERS);}  }
class C{  public boolean isActivated() throws RcsGenericException {  if (sAccurateLog) {    Log.d(LOG_TAG,"isActivated: Request()");  }  Bundle result=queryRcsStackByIntent(new Intent(Intents.Service.ACTION_GET_ACTIVATION_MODE));  boolean activated=result.getBoolean(Intents.Service.EXTRA_GET_ACTIVATION_MODE,false);  if (sAccurateLog) {    Log.d(LOG_TAG,"isActivated: Response() -> " + activated + " (in "+ result.getLong(TIME_SPENT,-1)+ "ms)");  }  return activated;}  }
class C{  public void init(boolean encrypting,byte[] key){  this.doEncrypt=encrypting;  this.workingKey=key;  setKey(this.workingKey);}  }
class C{  public static CTutorialDialog instance(){  return m_instance;}  }
class C{  public void play(URL url,String name){  AudioClip clip=getAudioClip(url,name);  if (clip != null) {    clip.play();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.211 -0500",hash_original_method="D2E29F254410117CE819574854BB79EC",hash_generated_method="9E7D819F4E7FE83734719AA0B6321B58") public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeFooter(v)) {      if (mDataSetObserver != null) {        mDataSetObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  @AfterClass public static void closeTemporaryStore() throws InterruptedException {  if (temporaryStore == null) {    return;  }  ExecutorService executorService=temporaryStore.getExecutorService();  temporaryStore.close();  QueryEngine queryEngine=QueryEngineFactory.getInstance().getExistingQueryController(temporaryStore);  if (queryEngine != null) {    queryEngine.shutdownNow();  }  SynchronizedHardReferenceQueueWithTimeout.stopStaleReferenceCleaner();  executorService.awaitTermination(20,TimeUnit.SECONDS);  temporaryStore=null;}  }
class C{  public static boolean isSvnBuild(){  return getBuild().equalsIgnoreCase("svn") ? true : false;}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  XSLTElementProcessor elemProcessor=getCurrentProcessor();  XSLTElementDef def=elemProcessor.getElemDef();  if (def.getType() != XSLTElementDef.T_PCDATA)   elemProcessor=def.getProcessorFor(null,"text()");  if (null == elemProcessor) {    if (!XMLCharacterRecognizer.isWhiteSpace(ch,start,length))     error(XSLMessages.createMessage(XSLTErrorResources.ER_NONWHITESPACE_NOT_ALLOWED_IN_POSITION,null),null);  } else   elemProcessor.characters(this,ch,start,length);}  }
class C{  protected void sendProgrammingReply(ProgListener p,int value,int status){  int delay=20;  if (!mServiceMode) {    delay=100;  }  NotifyDelay r=new NotifyDelay(delay,p,value,status);  r.start();}  }
class C{  public Bag(){  first=null;  n=0;}  }
class C{  public boolean isSuperclassOf(ReferenceBinding otherType){  while ((otherType=otherType.superclass()) != null) {    if (otherType.isEquivalentTo(this))     return true;  }  return false;}  }
class C{  public void addPinger(Pinger pinger){  if (!mPingers.contains(pinger)) {    mPingers.add(pinger);    notifyDataSetChanged();  }}  }
class C{  void selectType(Environment env,Context ctx,int tm){  if ((left.type == Type.tString) && !right.type.isType(TC_VOID)) {    type=Type.tString;    return;  } else   if ((right.type == Type.tString) && !left.type.isType(TC_VOID)) {    type=Type.tString;    return;  }  super.selectType(env,ctx,tm);}  }
class C{  public BatchUpdateException(Throwable cause){  this((cause == null ? null : cause.toString()),null,0,(int[])null,cause);}  }
class C{  public static DistinguishedNameException convertToApi(org.oscm.internal.types.exception.DistinguishedNameException oldEx){  return convertExceptionToApi(oldEx,DistinguishedNameException.class);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2));}  }
class C{  public boolean saveParameters(){  log.config("");  if (!validateParameters())   return false;  for (int i=0; i < m_mFields.size(); i++) {    WEditor editor=(WEditor)m_wEditors.get(i);    WEditor editor2=(WEditor)m_wEditors2.get(i);    Object result=editor.getValue();    Object result2=null;    if (editor2 != null)     result2=editor2.getValue();    MPInstancePara para=new MPInstancePara(Env.getCtx(),m_processInfo.getAD_PInstance_ID(),i);    GridField mField=(GridField)m_mFields.get(i);    para.setParameterName(mField.getColumnName());    if (result instanceof Timestamp || result2 instanceof Timestamp) {      para.setP_Date((Timestamp)result);      if (editor2 != null && result2 != null)       para.setP_Date_To((Timestamp)result2);    } else     if (result instanceof Integer || result2 instanceof Integer) {      if (result != null) {        Integer ii=(Integer)result;        para.setP_Number(ii.intValue());      }      if (editor2 != null && result2 != null) {        Integer ii=(Integer)result2;        para.setP_Number_To(ii.intValue());      }    } else     if (result instanceof BigDecimal || result2 instanceof BigDecimal) {      para.setP_Number((BigDecimal)result);      if (editor2 != null && result2 != null)       para.setP_Number_To((BigDecimal)result2);    } else     if (result instanceof Boolean) {      Boolean bb=(Boolean)result;      String value=bb.booleanValue() ? "Y" : "N";      para.setP_String(value);    } else {      if (result != null)       para.setP_String(result.toString());      if (editor2 != null && result2 != null)       para.setP_String_To(result2.toString());    }    para.setInfo(editor.getDisplay());    if (editor2 != null)     para.setInfo_To(editor2.getDisplay());    para.saveEx();    log.fine(para.toString());  }  return true;}  }
class C{  public TrieNode find(String suffix){  TrieNode result;  Character c;  String newSuffix;  TrieNode child;  c=suffix.charAt(0);  newSuffix=suffix.substring(1);  child=m_Children.get(c);  if (child == null) {    result=null;  } else   if (newSuffix.length() == 0) {    result=child;  } else {    result=child.find(newSuffix);  }  return result;}  }
class C{  private void processTokenResponse(String responseCode,String result){  String refreshToken;  String accessToken;  int timeToExpireSecond;  try {    IdentityProxy identityProxy=IdentityProxy.getInstance();    if (Constants.REQUEST_SUCCESSFUL.equals(responseCode)) {      JSONObject response=new JSONObject(result);      try {        accessToken=response.getString(Constants.ACCESS_TOKEN);        refreshToken=response.getString(Constants.REFRESH_TOKEN);        timeToExpireSecond=Integer.parseInt(response.getString(Constants.EXPIRE_LABEL));        Token token=new Token();        Date date=new Date();        String currentDate=dateFormat.format(date);        token.setDate(currentDate);        token.setRefreshToken(refreshToken);        token.setAccessToken(accessToken);        token.setExpired(false);        SharedPreferences mainPref=IdentityProxy.getInstance().getContext().getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);        Editor editor=mainPref.edit();        editor.putString(Constants.ACCESS_TOKEN,accessToken);        editor.putString(Constants.REFRESH_TOKEN,refreshToken);        editor.putString(USERNAME_LABEL,info.getUsername());        long expiresIn=date.getTime() + (timeToExpireSecond * 1000);        Date expireDate=new Date(expiresIn);        String strDate=dateFormat.format(expireDate);        token.setDate(strDate);        editor.putString(Constants.DATE_LABEL,strDate);        editor.commit();        identityProxy.receiveAccessToken(responseCode,Constants.SUCCESS_RESPONSE,token);      } catch (      JSONException e) {        Log.e(TAG,"Invalid JSON format",e);      }    } else     if (responseCode != null) {      if (Constants.INTERNAL_SERVER_ERROR.equals(responseCode)) {        identityProxy.receiveAccessToken(responseCode,result,null);      } else {        JSONObject mainObject=new JSONObject(result);        String errorDescription=mainObject.getString(Constants.ERROR_DESCRIPTION_LABEL);        identityProxy.receiveAccessToken(responseCode,errorDescription,null);      }    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON",e);  }}  }
class C{  @Deprecated public static long checksum(final byte[] data){  return FitsCheckSum.checksum(data);}  }
class C{  private void grow(){  if (keys == null || nkeys >= keys.length) {    String[] nk=new String[nkeys + 4];    String[] nv=new String[nkeys + 4];    if (keys != null)     System.arraycopy(keys,0,nk,0,nkeys);    if (values != null)     System.arraycopy(values,0,nv,0,nkeys);    keys=nk;    values=nv;  }}  }
class C{  public Analyzer showAggregate(){  showAggregate=true;  return this;}  }
class C{  public static int ECHRNG(){  return 44;}  }
class C{  public void createDecSpecificInfoDescriptor(MP4DataStream bitstream) throws IOException {  decSpecificDataOffset=bitstream.getOffset();  dsid=new byte[size];  for (int b=0; b < size; b++) {    dsid[b]=(byte)bitstream.readBytes(1);    readed++;  }  decSpecificDataSize=size - readed;}  }
class C{  public AsynchronousIndexWriteConfiguration(){}  }
class C{  public void displayState(String state){  updateSize();  if (log.isDebugEnabled()) {    if (getSignalMast() == null) {      log.debug("Display state " + state + ", disconnected");    } else {      log.debug("Display state " + state + " for "+ getSignalMast().getSystemName());    }  }  if (isText()) {    if (getSignalMast().getHeld()) {      if (isText()) {        super.setText(Bundle.getMessage("Held"));      }      return;    } else     if (getLitMode() && !getSignalMast().getLit()) {      super.setText(Bundle.getMessage("Dark"));      return;    }    super.setText(state);  }  if (isIcon()) {    if ((state != null) && (getSignalMast() != null)) {      String s=getSignalMast().getAppearanceMap().getImageLink(state,useIconSet);      if ((getSignalMast().getHeld()) && (getSignalMast().getAppearanceMap().getSpecificAppearance(jmri.SignalAppearanceMap.HELD) != null)) {        s=getSignalMast().getAppearanceMap().getImageLink("$held",useIconSet);      } else       if (getLitMode() && !getSignalMast().getLit() && (getSignalMast().getAppearanceMap().getImageLink("$dark",useIconSet) != null)) {        s=getSignalMast().getAppearanceMap().getImageLink("$dark",useIconSet);      }      if (s.equals("")) {        return;      }      if (!s.contains("preference:")) {        s=s.substring(s.indexOf("resources"));      }      if (_iconMap == null) {        getIcons();      }      NamedIcon n=_iconMap.get(s);      super.setIcon(n);      updateSize();      setSize(n.getIconWidth(),n.getIconHeight());    }  } else {    super.setIcon(null);  }  return;}  }
class C{  private void withStaticallyMockedEnvironmentAndFileApis() throws IOException {  mockStatic(Environment.class,File.class);  when(Environment.getExternalStorageDirectory()).thenReturn(mDirectory);  when(File.createTempFile(anyString(),anyString(),eq(mDirectory))).thenReturn(mImageFile);}  }
class C{  public static boolean isImageFileCompatible(File f){  boolean result=true;  try {    BufferedImage img=ImageIO.read(f);    ColorLayout cl=new ColorLayout();    cl.extract(img);  } catch (  Exception e) {    result=false;  }  return result;}  }
class C{  public <T>T read(Class<? extends T> type,Reader source,boolean strict) throws Exception {  return read(type,NodeBuilder.read(source),strict);}  }
class C{  public static Pointer to(float values[]){  return new Pointer(FloatBuffer.wrap(values));}  }
class C{  public InvocationSequenceData(Timestamp timeStamp,long platformIdent,long sensorTypeIdent,long methodIdent){  super(timeStamp,platformIdent,sensorTypeIdent,methodIdent);}  }
class C{  public RedundantBranchElimination(){  super("RedundantBranchElimination",new OptimizationPlanElement[]{new OptimizationPlanAtomicElement(new EnsureSSA()),new OptimizationPlanAtomicElement(new GlobalValueNumber()),new OptimizationPlanAtomicElement(new RBE())});}  }
class C{  public void alignItemsInColumns(int columns[]){  ArrayList<Integer> rows=new ArrayList<Integer>();  for (int i=0; i < columns.length; i++) {    rows.add(columns[i]);  }  int height=-5;  int row=0, rowHeight=0, columnsOccupied=0, rowColumns;  for (int i=0; i < children_.size(); i++) {    CCMenuItem item=(CCMenuItem)children_.get(i);    assert row < rows.size() : "Too many menu items for the amount of rows/columns.";    rowColumns=rows.get(row);    assert rowColumns != 0 : "Can't have zero columns on a row";    rowHeight=(int)Math.max(rowHeight,item.getContentSize().height);    ++columnsOccupied;    if (columnsOccupied >= rowColumns) {      height+=rowHeight + 5;      columnsOccupied=0;      rowHeight=0;      ++row;    }  }  assert columnsOccupied != 0 : "Too many rows/columns for available menu items.";  CGSize winSize=CCDirector.sharedDirector().winSize();  row=0;  rowHeight=0;  rowColumns=0;  float w=0, x=0, y=height / 2;  for (int i=0; i < children_.size(); i++) {    CCMenuItem item=(CCMenuItem)children_.get(i);    if (rowColumns == 0) {      rowColumns=rows.get(row);      w=winSize.width / (1 + rowColumns);      x=w;    }    rowHeight=Math.max(rowHeight,(int)item.getContentSize().height);    item.setPosition(CGPoint.make(x - winSize.width / 2,y - item.getContentSize().height / 2));    x+=w + 10;    ++columnsOccupied;    if (columnsOccupied >= rowColumns) {      y-=rowHeight + 5;      columnsOccupied=0;      rowColumns=0;      rowHeight=0;      ++row;    }  }}  }
class C{  public void testUrlEncoderEncodesNonPrintableNonAsciiCharacters() throws Exception {  assertEquals("%00",URLEncoder.encode("\u0000","UTF-8"));  assertEquals("%00",URLEncoder.encode("\u0000"));  assertEquals("%E2%82%AC",URLEncoder.encode("\u20AC","UTF-8"));  assertEquals("%E2%82%AC",URLEncoder.encode("\u20AC"));  assertEquals("%F0%A0%AE%9F",URLEncoder.encode("\ud842\udf9f","UTF-8"));  assertEquals("%F0%A0%AE%9F",URLEncoder.encode("\ud842\udf9f"));}  }
class C{  public ServiceCall<TranslationResult> translate(final String text,final Language source,final Language target){  return translate(Collections.singletonList(text),source,target);}  }
class C{  public static void displayImage(Context context,String url,ImageView image){  ImageLoader loader=getImageLoader(context);  ImageAware imageAware=new ImageViewAware(image,false);  loader.displayImage(url,imageAware);}  }
class C{  public static ImageSource resource(int resId){  return new ImageSource(resId);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isLocalFile());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.AUTO_TRANSITION___AUTO_TRANSITION_BLOCK_1:    getAutoTransitionBlock_1().clear();  getAutoTransitionBlock_1().addAll((Collection<? extends AutoTransitionBlock_>)newValue);return;case UmplePackage.AUTO_TRANSITION___ACTIVITY_1:getActivity_1().clear();getActivity_1().addAll((Collection<? extends Activity_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void load(Reader reader,G g) throws IOException {  this.current_graph=g;  this.graph_factory=null;  initializeData();  clearData();  parse(reader);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  private void addSubCollectionField(NutchDocument doc,String url){  for (  String collname : CollectionManager.getCollectionManager(getConf()).getSubCollections(url)) {    doc.add(FIELD_NAME,collname);  }}  }
class C{  public String toString(){  if (null != m_value) {    return (m_value.toString());  } else   if (null != m_invalidValue) {    return m_invalidValue;  } else {    return "";  }}  }
class C{  public org.apache.nutch.storage.Host.Builder clearMetadata(){  metadata=null;  fieldSetFlags()[0]=false;  return this;}  }
class C{  public String format(String str,Object... objs){  return MessageFormatter.format(str,objs).getMessage();}  }
class C{  private void tryToAddDataPoint(){  if (traceData.size() == traceData.getBufferSize() && plotMode == PlotMode.N_STOP)   return;switch (updateMode) {case X_OR_Y:    if ((chronological && currentYDataChanged) || (!chronological && (currentXDataChanged || currentYDataChanged)))     addDataPoint();  break;case X_AND_Y:if ((chronological && currentYDataChanged) || (!chronological && (currentXDataChanged && currentYDataChanged))) addDataPoint();break;case X:if ((chronological && currentYDataChanged) || (!chronological && currentXDataChanged)) addDataPoint();break;case Y:if (currentYDataChanged) addDataPoint();break;case TRIGGER:default :break;}}  }
class C{  private View makeAndAddHorizontalView(int position,int offset,int x,boolean fromLeft){  View child;  if (!mDataChanged) {    child=mRecycler.get(position);    if (child != null) {      int childLeft=child.getLeft();      mRightMost=Math.max(mRightMost,childLeft + child.getMeasuredWidth());      mLeftMost=Math.min(mLeftMost,childLeft);      setUpHorizontalChild(child,offset,x,fromLeft);      return child;    }  }  child=mAdapter.getView(position,null,this);  setUpHorizontalChild(child,offset,x,fromLeft);  return child;}  }
class C{  public final void print(double d) throws IOException {  print(String.valueOf(d));}  }
class C{  public int size(){  return nodes.size();}  }
class C{  protected void finalize() throws Throwable {  this.systemID=null;  this.encapsulatedException=null;  super.finalize();}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public void testPing() throws Exception {  testServlet("/ping-test");  testServlet("/ping-test-URL-path");}  }
class C{  protected void releaseBeanContextResources(){  super.releaseBeanContextResources();  releaseAllDelegatedServices();  proxy=null;}  }
class C{  public BaseCheckBox(String label){  this();  setText(label);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.EXPORT_SPECIFIER__ELEMENT:    setElement((IdentifierRef)null);  return;case N4JSPackage.EXPORT_SPECIFIER__ALIAS:setAlias(ALIAS_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public Object clone(){  DefaultMutableTreeNode newNode;  try {    newNode=(DefaultMutableTreeNode)super.clone();    newNode.children=null;    newNode.parent=null;  } catch (  CloneNotSupportedException e) {    throw new Error(e.toString());  }  return newNode;}  }
class C{  public TransactionOutput addOutput(BigInteger value,ECKey pubkey){  return addOutput(new TransactionOutput(params,this,value,pubkey));}  }
class C{  public static long index(final int segment,final int displacement){  return start(segment) + displacement;}  }
class C{  private void dropTables(SQLiteDatabase paramSQLiteDatabase){  for (  String table : sTables) {    try {      paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table);    } catch (    Exception localException) {      localException.printStackTrace();    }  }}  }
class C{  static public void assertNotSame(Object expected,Object actual){  assertNotSame(null,expected,actual);}  }
class C{  @Override public void process(Number tuple){  RMin.this.process(tuple);}  }
class C{  protected Context createContext(HttpServletRequest request,HttpServletResponse response){  VelocityContext context=new VelocityContext();  context.put(REQUEST,request);  context.put(RESPONSE,response);  return context;}  }
class C{  public static ArrayModifiableDBIDs[] partitionsFromIntegerLabels(DBIDs ids,IntegerDataStore assignment,int k){  int[] sizes=new int[k];  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    sizes[assignment.intValue(iter)]+=1;  }  ArrayModifiableDBIDs[] clusters=new ArrayModifiableDBIDs[k];  for (int i=0; i < k; i++) {    clusters[i]=DBIDUtil.newArray(sizes[i]);  }  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    clusters[assignment.intValue(iter)].add(iter);  }  return clusters;}  }
class C{  private static String resovlePropConfigFile(String prop){  if (prop != null && prop.startsWith("file://")) {    try {      String filePath=prop.substring(7);      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filePath),"UTF-8"));      StringBuffer sb=new StringBuffer();      String str=br.readLine();      while (str != null) {        sb.append(str);        str=br.readLine();      }      return sb.toString();    } catch (    IOException e) {      System.err.println("read classpath failed!");      throw new RuntimeException(" read classpath failed ",e);    }  }  return prop;}  }
class C{  public Matrix4f translationRotateScaleInvert(Vector3fc translation,Quaternionfc quat,Vector3fc scale){  return translationRotateScaleInvert(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  public String closureClassName(){  return cloClsName;}  }
class C{  public static void charge(int slotID,IStrictEnergyStorage storer){  IInventory inv=(TileEntityContainerBlock)storer;  if (inv.getStackInSlot(slotID) != null && storer.getEnergy() > 0) {    if (inv.getStackInSlot(slotID).getItem() instanceof IEnergizedItem) {      storer.setEnergy(storer.getEnergy() - EnergizedItemManager.charge(inv.getStackInSlot(slotID),storer.getEnergy()));    } else     if (MekanismUtils.useIC2() && inv.getStackInSlot(slotID).getItem() instanceof IElectricItem) {      double sent=ElectricItem.manager.charge(inv.getStackInSlot(slotID),(int)(storer.getEnergy() * general.TO_IC2),4,true,false) * general.FROM_IC2;      storer.setEnergy(storer.getEnergy() - sent);    } else     if (MekanismUtils.useRF() && inv.getStackInSlot(slotID).getItem() instanceof IEnergyContainerItem) {      ItemStack itemStack=inv.getStackInSlot(slotID);      IEnergyContainerItem item=(IEnergyContainerItem)inv.getStackInSlot(slotID).getItem();      int itemEnergy=(int)Math.round(Math.min(Math.sqrt(item.getMaxEnergyStored(itemStack)),item.getMaxEnergyStored(itemStack) - item.getEnergyStored(itemStack)));      int toTransfer=(int)Math.round(Math.min(itemEnergy,(storer.getEnergy() * general.TO_TE)));      storer.setEnergy(storer.getEnergy() - (item.receiveEnergy(itemStack,toTransfer,false) * general.FROM_TE));    }  }}  }
class C{  public ZkBinLogStateConfig build(){  ZkBinLogStateConfig zkBinLogStateConfig=new ZkBinLogStateConfig(this);  return zkBinLogStateConfig;}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public TermNode right(){  return (TermNode)super.getRequiredProperty(Annotations.RIGHT);}  }
class C{  private void advanceIfCurrentPieceFullyRead(){  if (currentPiece != null && currentPieceIndex == currentPieceSize) {    currentPieceOffsetInRope+=currentPieceSize;    currentPieceIndex=0;    if (pieceIterator.hasNext()) {      currentPiece=pieceIterator.next();      currentPieceSize=currentPiece.size();    } else {      currentPiece=null;      currentPieceSize=0;    }  }}  }
class C{  private MapSettings(){  this(megamek.common.preference.PreferenceManager.getClientPreferences().getBoardWidth(),megamek.common.preference.PreferenceManager.getClientPreferences().getBoardHeight(),megamek.common.preference.PreferenceManager.getClientPreferences().getMapWidth(),megamek.common.preference.PreferenceManager.getClientPreferences().getMapHeight());}  }
class C{  public void addElement(int value){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.addElement(value);}  }
class C{  public DefaultStateContext(Stage stage,Message<E> message,MessageHeaders messageHeaders,ExtendedState extendedState,Transition<S,E> transition,StateMachine<S,E> stateMachine,State<S,E> source,State<S,E> target,Exception exception){  this.stage=stage;  this.message=message;  this.messageHeaders=messageHeaders;  this.extendedState=extendedState;  this.transition=transition;  this.stateMachine=stateMachine;  this.source=source;  this.target=target;  this.exception=exception;  this.sources=null;  this.targets=null;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus modifyInstance(String instanceId,ProvisioningSettings currentSettings,ProvisioningSettings newSettings) throws APPlatformException {  LOGGER.info("modifyInstance({})",LogAndExceptionConverter.getLogText(instanceId,currentSettings));  try {    newSettings.getParameters().put(PropertyHandler.STACK_NAME,currentSettings.getParameters().get(PropertyHandler.STACK_NAME));    PropertyHandler ph=new PropertyHandler(newSettings);    ph.setState(FlowState.MODIFICATION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(newSettings.getParameters());    return result;  } catch (  Exception t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.MODIFICATION);  }}  }
class C{  public void addDisconnectedEventListener(Executor executor,PeerDisconnectedEventListener listener){  disconnectedEventListeners.add(new ListenerRegistration(listener,executor));}  }
class C{  public static Object invokeMethod(Object instance,Class<?> clazz,String methodName,Object... arguments) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {  return getMethod(clazz,methodName,DataType.getPrimitive(arguments)).invoke(instance,arguments);}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  timeStarted=System.currentTimeMillis();  dateStarted=new Date(timeStarted);  if (log.isInfoEnabled()) {    log.info("|-CMR Management Service active...");  }}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Sender";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("Id",id);  bdr.addSimpleElement("Name",name);  bdr.addSimpleElement("FirstName",firstName);  bdr.addSimpleElement("SurName",surName);  bdr.addSimpleElement("SurName2",surName2);  bdr.addSimpleElement("EMail",email);  bdr.addSimpleElement("Certificate_Issuer",certificateIssuer);  bdr.addSimpleElement("Certificate_SN",certificateSN);  bdr.addSimpleElement("InQualityOf",inQuality);  bdr.addSimpleElement("Social_Name",socialName);  bdr.addSimpleElement("CIF",CIF);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}/notifications/{notificationId}") @Description("Deletes a notification having the given ID if it is associated with the given alert ID.  Associated triggers are not deleted from the alert.") public Response deleteNotificationsById(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,@PathParam("notificationId") BigInteger notificationId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (notificationId == null || notificationId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Notification Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));  List<Notification> listNotification=new ArrayList<Notification>(alert.getNotifications());  Iterator<Notification> it=listNotification.iterator();  while (it.hasNext()) {    Notification notification=it.next();    if (notification.getId().equals(notificationId)) {      it.remove();      alert.setNotifications(listNotification);      alert.setModifiedBy(getRemoteUser(req));      alertService.updateAlert(alert);      return Response.status(Status.OK).build();    }  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  protected static IJavaElement handleToElement(final String project,final String handle,final boolean check){  return handleToElement(null,project,handle,check);}  }
class C{  public MetadataOmittedITCase(String name){  super(name);}  }
class C{  @Deprecated public static Header[] parseHeaders(final InputStream is) throws IOException, HttpException {  LOG.trace("enter HeaderParser.parseHeaders(InputStream, String)");  return parseHeaders(is,"US-ASCII");}  }
class C{  public boolean containsJoint(Joint joint){  return this.joints.contains(joint);}  }
class C{  private Builder(){  super(com.wipro.ats.bdre.imcrawler.mr.Contents.SCHEMA$);}  }
class C{  @Override public boolean supportsCreateDB(){  return false;}  }
class C{  public ByteBuffer put(int index,byte b){  byteArray.set(index,b);  return this;}  }
class C{  private boolean isParentProperty(MetaProperty metaProperty){  return parentProperty != null && metaProperty.getName().equals(parentProperty);}  }
class C{  public void store(String filenameToSave,String comments) throws FileNotFoundException, FileAlreadyExistsException {  if (StringUtils.isEmpty(filenameToSave)) {    throw new FileNotFoundException();  }  if (filenameToSave.equals(filename)) {    throw new FileAlreadyExistsException(filenameToSave);  }  FileWriter fileWriter=null;  BufferedWriter bufferedWriter=null;  try {    fileWriter=new FileWriter(filenameToSave,false);    bufferedWriter=new BufferedWriter(fileWriter);    prop.store(bufferedWriter,comments);  } catch (  IOException e) {    logger.error("Fail on store properties.",e);  } finally {    IOUtils.closeQuite(fileWriter);    IOUtils.closeQuite(bufferedWriter);  }}  }
class C{  private void closeRemoteResources(){  if (reader != null) {    try {      reader.close();    } catch (    final IOException ignore) {    }    reader=null;  }  if (writer != null) {    writer.close();    writer=null;  }  if (socketOutstream != null) {    try {      socketOutstream.close();    } catch (    final IOException ignore) {    }    socketOutstream=null;  }  if (socketInstream != null) {    try {      socketInstream.close();    } catch (    final IOException ignore) {    }    socketInstream=null;  }  if (socket != null) {    try {      socket.close();    } catch (    final IOException ignore) {    }    socket=null;  }}  }
class C{  public void delete(String key){  mStorage.deleteIfExists(key);}  }
class C{  public boolean containsFieldValues(Object[] fieldValues){  return this.contents.contains(fieldValues);}  }
class C{  public RingOfLife(){  super("emerald ring","ring","emerald-ring",null);  put("amount",1);}  }
class C{  public TimeoutException(){}  }
class C{  private boolean processEsbSystemMonitorMessage(String payload){  boolean messageProcessed=false;  try {    sqsNotificationEventService.processSystemMonitorNotificationEvent(payload);    messageProcessed=true;  } catch (  Exception e) {    LOGGER.debug("Failed to process message from the JMS queue for a system monitor request. jmsQueueName=\"{}\" jmsMessagePayload={}",HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING,payload,e);  }  return messageProcessed;}  }
class C{  public void updateCredentials(String login,String password){  sharedPreferences.edit().putString(application.getString(R.string.shared_prefs_login),login).putString(application.getString(R.string.shared_prefs_password),password).apply();}  }
class C{  public static boolean isNotEmpty(String[] array){  return array != null && array.length > 0;}  }
class C{  @Override public String toString(){  StringBuilder outputString=new StringBuilder();  HashSet<String> printed_keys=new HashSet<>();  for (int i=0; i < DENSE_FEATURE_NAMES.size(); i++) {    outputString.append(String.format("%s=%.3f ",DENSE_FEATURE_NAMES.get(i),getDense(i)));    printed_keys.add(DENSE_FEATURE_NAMES.get(i));  }  ArrayList<String> keys=new ArrayList<>(sparseFeatures.keySet());  Collections.sort(keys);  keys.stream().filter(null).forEach(null);  return outputString.toString().trim();}  }
class C{  public Bundler putShortArray(String key,short[] value){  bundle.putShortArray(key,value);  return this;}  }
class C{  public int hashCode(){  return getName().hashCode() + 31 * mask;}  }
class C{  public static Number sign(Number a){  if (isFloatingPoint(a)) {    return Math.signum(a.doubleValue());  } else {    return Long.signum(a.longValue());  }}  }
class C{  public double[][] convertToDoubleMatrix(InputStream input,int rows,int cols) throws IOException {  double[][] ret=null;  try {    ReaderTextCell reader=(ReaderTextCell)MatrixReaderFactory.createMatrixReader(InputInfo.TextCellInputInfo);    MatrixBlock mb=reader.readMatrixFromInputStream(input,rows,cols,ConfigurationManager.getBlocksize(),ConfigurationManager.getBlocksize(),(long)rows * cols);    ret=DataConverter.convertToDoubleMatrix(mb);  } catch (  DMLRuntimeException rex) {    throw new IOException(rex);  }  return ret;}  }
class C{  FileMenu(){  super(I18n.tr("&File"));  MENU.add(createMenuItem(new FileMenuActions.SendFileAction()));  MENU.addSeparator();  MENU.add(createMenuItem(new FileMenuActions.OpenMagnetTorrentAction()));  MENU.add(createMenuItem(new FileMenuActions.CreateTorrentAction()));  if (!OSUtils.isMacOSX()) {    MENU.addSeparator();    MENU.add(createMenuItem(new FileMenuActions.CloseAction()));    MENU.add(createMenuItem(new FileMenuActions.ExitAction()));  }}  }
class C{  public static String deviceToText(int hByte,int lByte){  int mask=0x01;  int x=lByte;  StringBuilder dev=new StringBuilder();  for (int i=8; i > 0; i--) {    if ((x & mask) != 0) {      dev.append(" " + i);    }    mask=mask << 1;  }  mask=0x01;  x=hByte;  for (int i=16; i > 8; i--) {    if ((x & mask) != 0) {      dev.append(" " + i);    }    mask=mask << 1;  }  return dev.toString();}  }
class C{  final float sloppyFreq() throws IOException {  ensureFreq();  return freq;}  }
class C{  public void testNynorskStemming() throws Exception {  Reader reader=new StringReader("gut guten gutar gutane gutens gutanes");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("NorwegianMinimalStem","variant","nn").create(stream);  assertTokenStreamContents(stream,new String[]{"gut","gut","gut","gut","gut","gut"});}  }
class C{  @Override @Inline public void processNode(ObjectReference object){  buffer.insert(object.toAddress());}  }
class C{  public int computePastValue(int[][][] data,int rowNumber,int columnNumber,int t){  int pastVal=0;  for (int p=0; p < k; p++) {    pastVal*=base;    pastVal+=data[t - k + 1 + p][rowNumber][columnNumber];  }  return pastVal;}  }
class C{  public NTLMException(int errorCode,String msg){  super(msg);  this.errorCode=errorCode;}  }
class C{  public static Trellis orderTrellis(Trellis trel,double I[][],Random rand){  int L=I.length;  int Y[]=new int[L];  ArrayList<Integer> list=new ArrayList<Integer>();  for (  int i : trel.indices) {    list.add(new Integer(i));  }  Y[0]=list.remove(rand.nextInt(L));  for (int j=1; j < L; j++) {    double max_w=-1.;    int j_=-1;    for (    int j_prop : list) {      double w=trel.weight(Y,j,j_prop,I);      if (w >= max_w) {        max_w=w;        j_=j_prop;      }    }    list.remove(new Integer(j_));    Y[j]=j_;  }  trel=new Trellis(Y,trel.WIDTH,trel.TYPE);  return trel;}  }
class C{  @Override public boolean hasName(){  log.log(Level.FINE,"hasName(): {0}",event == START_ELEMENT || event == END_ELEMENT);  return event == START_ELEMENT || event == END_ELEMENT;}  }
class C{  public boolean isListenInBackground(){  return listenInBackground;}  }
class C{  private void readObject(){}  }
class C{  public static boolean isLongCategory(ClassNode type){  return type == long_TYPE || isIntCategory(type);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public CViewsTableRenderer(final IViewsTable table,final IViewContainer container){  this.container=Preconditions.checkNotNull(container,"IE02032: Container argument can't be null");  this.table=Preconditions.checkNotNull(table,"IE02351: table argument can not be null");  if (starImage == null) {    try {      starImage=new ImageIcon(CMain.class.getResource("data/star.png").toURI().toURL()).getImage();    } catch (    MalformedURLException|URISyntaxException e) {    }  }  CWindowManager.instance().addListener(listener);  for (  final CGraphWindow window : CWindowManager.instance().getOpenWindows()) {    window.addListener(panelListener);  }}  }
class C{  public void output(OutputStream out){  m_html.output(out);}  }
class C{  protected void sequence_ParameterizedTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static ArchiveAccess createArchiveAccess(){  return new ArchiveAccessImpl();}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void testAnalyse(){  System.out.println("analyse");  AuditCommandImpl instance=null;}  }
class C{  public void put(final String key,final int value){  pageLookup.put(key,value);}  }
class C{  public static long estimateMemory(long nrows,long ncols,double sparsity){  double cnnz=Math.max(SparseRow.initialCapacity,Math.ceil(sparsity * ncols));  double rlen=Math.min(nrows,Math.ceil(sparsity * nrows * ncols));  double size=16;  size+=rlen * (116 + cnnz * 12);  size+=32 + nrows * 8d;  return (long)Math.min(size,Long.MAX_VALUE);}  }
class C{  static boolean isWhiteSpace(char ch){  return ((ch == ' ') || (ch == '\n') || (ch == '\t')|| (ch == 10)|| (ch == 13));}  }
class C{  protected double measureHermitianOverlap(ComplexVector other){  other.toCartesian();  double result=0;  double norm1=0;  double norm2=0;  for (int i=0; i < dimension * 2; ++i) {    result+=coordinates[i] * other.coordinates[i];    norm1+=coordinates[i] * coordinates[i];    norm2+=other.coordinates[i] * other.coordinates[i];  }  return result / Math.sqrt(norm1 * norm2);}  }
class C{  protected void baselineLayout(int targetSpan,int axis,int[] offsets,int[] spans){  int totalAscent=(int)(targetSpan * getAlignment(axis));  int totalDescent=targetSpan - totalAscent;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    float align=v.getAlignment(axis);    float viewSpan;    if (v.getResizeWeight(axis) > 0) {      float minSpan=v.getMinimumSpan(axis);      float maxSpan=v.getMaximumSpan(axis);      if (align == 0.0f) {        viewSpan=Math.max(Math.min(maxSpan,totalDescent),minSpan);      } else       if (align == 1.0f) {        viewSpan=Math.max(Math.min(maxSpan,totalAscent),minSpan);      } else {        float fitSpan=Math.min(totalAscent / align,totalDescent / (1.0f - align));        viewSpan=Math.max(Math.min(maxSpan,fitSpan),minSpan);      }    } else {      viewSpan=v.getPreferredSpan(axis);    }    offsets[i]=totalAscent - (int)(viewSpan * align);    spans[i]=(int)viewSpan;  }}  }
class C{  public void validateBusinessObjectDataStatusInformation(BusinessObjectDataKey expectedBusinessObjectDataKey,String expectedBusinessObjectDataStatus,BusinessObjectDataStatusInformation businessObjectDataStatusInformation){  assertNotNull(businessObjectDataStatusInformation);  assertEquals(expectedBusinessObjectDataKey,businessObjectDataStatusInformation.getBusinessObjectDataKey());  assertEquals(expectedBusinessObjectDataStatus,businessObjectDataStatusInformation.getStatus());}  }
class C{  @Override public boolean add(E value){  final int hash;  int index;  if (value == null) {    hash=0;    index=indexOfNull();  } else {    hash=value.hashCode();    index=indexOf(value,hash);  }  if (index >= 0) {    return false;  }  index=~index;  if (mSize >= mHashes.length) {    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);    if (DEBUG)     Log.d(TAG,"add: grow from " + mHashes.length + " to "+ n);    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(n);    if (mHashes.length > 0) {      if (DEBUG)       Log.d(TAG,"add: copy 0-" + mSize + " to 0");      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);      System.arraycopy(oarray,0,mArray,0,oarray.length);    }    freeArrays(ohashes,oarray,mSize);  }  if (index < mSize) {    if (DEBUG)     Log.d(TAG,"add: move " + index + "-"+ (mSize - index)+ " to "+ (index + 1));    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);    System.arraycopy(mArray,index,mArray,index + 1,mSize - index);  }  mHashes[index]=hash;  mArray[index]=value;  mSize++;  return true;}  }
class C{  public ArrowNeedle(boolean isArrowAtTop){  this.isArrowAtTop=isArrowAtTop;}  }
class C{  public void deHalfOp(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't remove halfop on null user");  setMode("-h " + user.getNick());}  }
class C{  @Override public String address(Class<?> api,String address){  Objects.requireNonNull(address);  if (address.isEmpty()) {    address=addressDefault(api);  }  int slash=address.indexOf("/");  if (address.endsWith(":") && slash < 0) {    address+="//";  }  int p=address.indexOf("://");  int q=-1;  if (p > 0) {    q=address.indexOf('/',p + 3);  }  if (address.indexOf('{') > 0) {    return addressBraces(api,address);  }  boolean isPrefix=address.startsWith("session:") || address.startsWith("pod:");  if (address.isEmpty() || p > 0 && q < 0 && isPrefix) {    if (Vault.class.isAssignableFrom(api)) {      TypeRef itemRef=TypeRef.of(api).to(Vault.class).param("T");      Class<?> assetClass=itemRef.rawClass();      address=address + "/" + apiAddress(assetClass);    } else {      address=address + "/" + apiAddress(api);    }  }  return address;}  }
class C{  private void checkOrMarkPrivateAccess(Expression source,MethodNode mn){  if (mn == null) {    return;  }  ClassNode declaringClass=mn.getDeclaringClass();  ClassNode enclosingClassNode=typeCheckingContext.getEnclosingClassNode();  if (declaringClass != enclosingClassNode || typeCheckingContext.getEnclosingClosure() != null) {    int mods=mn.getModifiers();    boolean sameModule=declaringClass.getModule() == enclosingClassNode.getModule();    String packageName=declaringClass.getPackageName();    if (packageName == null) {      packageName="";    }    if ((Modifier.isPrivate(mods) && sameModule)) {      addPrivateFieldOrMethodAccess(source,declaringClass,StaticTypesMarker.PV_METHODS_ACCESS,mn);    } else     if (Modifier.isProtected(mods) && !packageName.equals(enclosingClassNode.getPackageName()) && !implementsInterfaceOrIsSubclassOf(enclosingClassNode,declaringClass)) {      ClassNode cn=enclosingClassNode;      while ((cn=cn.getOuterClass()) != null) {        if (implementsInterfaceOrIsSubclassOf(cn,declaringClass)) {          addPrivateFieldOrMethodAccess(source,cn,StaticTypesMarker.PV_METHODS_ACCESS,mn);          break;        }      }    }  }}  }
class C{  public static void zipAndEncryptAll(File inZipFile,File outFile,String password,AESEncrypter encrypter) throws IOException {  AesZipFileEncrypter enc=new AesZipFileEncrypter(outFile,encrypter);  try {    enc.addAll(inZipFile,password);  }  finally {    enc.close();  }}  }
class C{  void resetCache(Panel boundaryPanel,DragContext context){  ArrayList<Candidate> list=new ArrayList<Candidate>();  if (context.draggable != null) {    WidgetArea boundaryArea=new WidgetArea(boundaryPanel,null);    for (    DropController dropController : dropControllerList) {      Candidate candidate=new Candidate(dropController);      Widget dropTarget=candidate.getDropTarget();      if (DOM.isOrHasChild(context.draggable.getElement(),dropTarget.getElement())) {        continue;      }      if (candidate.getTargetArea().intersects(boundaryArea)) {        list.add(candidate);      }    }  }  sortedCandidates=list.toArray(new Candidate[list.size()]);  Arrays.sort(sortedCandidates);}  }
class C{  public static void main(String[] args){  ArrayList<String> tmpArgs=new ArrayList<String>(Arrays.asList(args));  int numThreads=1;  for (int i=0; i < tmpArgs.size() - 1; i++) {    if (tmpArgs.get(i).equals("-t")) {      try {        numThreads=Integer.parseInt(tmpArgs.get(i + 1));        tmpArgs.remove(i + 1);        tmpArgs.remove(i);      } catch (      NumberFormatException e) {        System.err.println("Invalid number of threads.");        System.err.println(e.getStackTrace());      }    }  }  logger.info("Number of threads:{}",numThreads);  args=tmpArgs.toArray(new String[0]);  StringBuilder cliString=new StringBuilder();  for (int i=0; i < args.length; i++) {    cliString.append(" ").append(args[i]);  }  logger.debug("Command line string = {}",cliString.toString());  System.out.println("Command line string = " + cliString.toString());  Task task=null;  try {    task=(Task)ClassOption.cliStringToObject(cliString.toString(),Task.class,null);    logger.info("Sucessfully instantiating {}",task.getClass().getCanonicalName());  } catch (  Exception e) {    logger.error("Fail to initialize the task",e);    System.out.println("Fail to initialize the task" + e);    return;  }  task.setFactory(new ThreadsComponentFactory());  task.init();  ThreadsEngine.submitTopology(task.getTopology(),numThreads);}  }
class C{  public void testKeyPairGenerator11() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  int[] keys={-10000,-1024,-1,0,10000};  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  SecureRandom random=new SecureRandom();  AlgorithmParameterSpec aps=null;  for (int i=0; i < kpg.length; i++) {    for (int j=0; j < keys.length; j++) {      try {        kpg[i].initialize(keys[j]);        kpg[i].initialize(keys[j],random);      } catch (      InvalidParameterException e) {      }    }    try {      kpg[i].initialize(aps);      kpg[i].initialize(aps,random);    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public ObjectMatrix2D like2D(int rows,int columns){  return new SparseObjectMatrix2D(rows,columns);}  }
class C{  public int connectSrcHandlerToPackageSync(Context srcContext,Handler srcHandler,String dstPackageName,String dstClassName){  if (DBG)   log("connect srcHandler to dst Package & class E");  mConnection=new AsyncChannelConnection();  mSrcContext=srcContext;  mSrcHandler=srcHandler;  mSrcMessenger=new Messenger(srcHandler);  mDstMessenger=null;  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setClassName(dstPackageName,dstClassName);  boolean result=srcContext.bindService(intent,mConnection,Context.BIND_AUTO_CREATE);  if (DBG)   log("connect srcHandler to dst Package & class X result=" + result);  return result ? STATUS_SUCCESSFUL : STATUS_BINDING_UNSUCCESSFUL;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos != count) {      return str.charAt(pos++);    }    return -1;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean canBuildFormatter(){  return isFormatter(getFormatter());}  }
class C{  public void unsetMatchColumn(int[] columnIdxes) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static boolean areColinear(Vec4 a,Vec4 b,Vec4 c){  if (a == null || b == null || c == null) {    String msg=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 ab=b.subtract3(a).normalize3();  Vec4 bc=c.subtract3(b).normalize3();  return Math.abs(ab.dot3(bc)) > 0.999;}  }
class C{  protected void reset(Point treePoint){  this.drawPoint.x=this.bounds.x + treePoint.x;  this.drawPoint.y=this.bounds.y + treePoint.y;  this.screenBounds=new Rectangle(this.drawPoint.x,this.drawPoint.y,this.bounds.width,this.bounds.height);  int pickX=this.pickBounds.x + treePoint.x;  int pickY=this.pickBounds.y + treePoint.y;  this.pickScreenBounds=new Rectangle(pickX,pickY,this.pickBounds.width,this.pickBounds.height);}  }
class C{  public SimpleName newSimpleName(String identifier){  if (identifier == null) {    throw new IllegalArgumentException();  }  SimpleName result=new SimpleName(this);  result.setIdentifier(identifier);  return result;}  }
class C{  public double unweightedMacroFmeasure(){  return m_delegate.unweightedMacroFmeasure();}  }
class C{  public HadoopJobHistoryNodeExtractor(Properties prop) throws Exception {  this.serverURL=prop.getProperty(Constant.AZ_HADOOP_JOBHISTORY_KEY);  String CURRENT_DIR=System.getProperty("user.dir");  String WH_HOME=System.getenv("WH_HOME");  String USER_HOME=System.getenv("HOME") + "/.kerberos";  String ETC="/etc";  String TMP="/var/tmp" + "/.kerberos";  String[] allPositions=new String[]{CURRENT_DIR,WH_HOME,USER_HOME,TMP};  for (  String possition : allPositions) {    String gssFileName=possition + "/gss-jaas.conf";    File gssFile=new File(gssFileName);    if (gssFile.exists()) {      logger.debug("find gss-jaas.conf file in : {}",gssFile.getAbsolutePath());      System.setProperty("java.security.auth.login.config",gssFile.getAbsolutePath());      break;    } else {      logger.debug("can't find here: {}",gssFile.getAbsolutePath());    }  }  for (  String possition : allPositions) {    String krb5FileName=possition + "/krb5.conf";    File krb5File=new File(krb5FileName);    if (krb5File.exists()) {      logger.debug("find krb5.conf file in : {}",krb5File.getAbsolutePath());      System.setProperty("java.security.krb5.conf",krb5File.getAbsolutePath());      break;    } else {      logger.debug("can't find here: {}",krb5File.getAbsolutePath());    }  }  if (System.getProperty("java.security.auth.login.config") == null || System.getProperty("java.security.krb5.conf") == null) {    throw new Exception("Can't find java security config files");  }  if (logger.isTraceEnabled()) {    System.setProperty("sun.security.krb5.debug","true");  } else {    System.setProperty("sun.security.krb5.debug","false");  }  System.setProperty("javax.security.auth.useSubjectCredsOnly","false");  System.setProperty("java.security.krb5.realm",prop.getProperty("krb5.realm"));  System.setProperty("java.security.krb5.kdc",prop.getProperty("krb5.kdc"));  PoolingHttpClientConnectionManager cm=new PoolingHttpClientConnectionManager();  cm.setMaxTotal(200);  cm.setDefaultMaxPerRoute(100);  CredentialsProvider credsProvider=new BasicCredentialsProvider();  credsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials("DUMMY",null));  Lookup<AuthSchemeProvider> authRegistry=RegistryBuilder.<AuthSchemeProvider>create().register(AuthSchemes.SPNEGO,new SPNegoSchemeFactory()).build();  httpClient=HttpClients.custom().setDefaultCredentialsProvider(credsProvider).setDefaultAuthSchemeRegistry(authRegistry).setConnectionManager(cm).build();}  }
class C{  public Interval withDurationBeforeEnd(ReadableDuration duration){  long durationMillis=DateTimeUtils.getDurationMillis(duration);  if (durationMillis == toDurationMillis()) {    return this;  }  Chronology chrono=getChronology();  long endMillis=getEndMillis();  long startMillis=chrono.add(endMillis,durationMillis,-1);  return new Interval(startMillis,endMillis,chrono);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Projection create(Properties props) throws ProjectionException {  try {    LatLonPoint llp=convertToLLP((Point2D)props.get(ProjectionFactory.CENTER));    float scale=PropUtils.floatFromProperties(props,ProjectionFactory.SCALE,10000000);    int height=PropUtils.intFromProperties(props,ProjectionFactory.HEIGHT,100);    int width=PropUtils.intFromProperties(props,ProjectionFactory.WIDTH,100);    return new Mercator(llp,scale,width,height);  } catch (  Exception e) {    if (Debug.debugging("proj")) {      Debug.output("MercatorLoader: problem creating Mercator projection " + e.getMessage());    }  }  throw new ProjectionException("MercatorLoader: problem creating Mercator projection");}  }
class C{  @Override public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){  XYPlot subplot=findSubplot(info,source);  if (subplot != null) {    subplot.zoomRangeAxes(lowerPercent,upperPercent,info,source);  } else {    for (    XYPlot p : this.subplots) {      p.zoomRangeAxes(lowerPercent,upperPercent,info,source);    }  }}  }
class C{  private void startReconcilingPositions(){  presenter.addAllPositions(removedPositions);  removedPositionCount=removedPositions.size();}  }
class C{  public void actionPerformed(ActionEvent e){  log.info("Cmd=" + e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  }  saveSelection();  if (selection != null && selection.size() > 0 && m_selectionActive && m_DD_Order_ID != null && m_MovementDate != null)   generateMovements(); else   dispose();}  }
class C{  UniformModel(final int numOutcomes){  mNumOutcomes=numOutcomes;}  }
class C{  public int lengthOfLastWord(String s){  if (s == null || s.length() == 0)   return 0;  int len=s.length();  int count=0;  for (int i=len - 1; i >= 0; i--) {    if (s.charAt(i) != ' ')     count++;    if (s.charAt(i) == ' ' && count != 0)     return count;  }  return count;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void trace(String msg,Throwable t){}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public ListIterator<VariableMapElement> iterator(){  return list.listIterator(0);}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_NOTIFICATIONS_URI_PREFIX + "/namespaces/{namespace}/notificationNames/{notificationName}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_NOTIFICATION_REGISTRATIONS_PUT) public BusinessObjectDataNotificationRegistration updateBusinessObjectDataNotificationRegistration(@PathVariable("namespace") String namespace,@PathVariable("notificationName") String notificationName,@RequestBody BusinessObjectDataNotificationRegistrationUpdateRequest request){  return businessObjectDataNotificationRegistrationService.updateBusinessObjectDataNotificationRegistration(new NotificationRegistrationKey(namespace,notificationName),request);}  }
class C{  boolean isDimming(){  return mTargetAlpha != 0;}  }
class C{  public static StringSet declaredSymbolsInScopeSet(ModuleNode module,Location loc){  StringSet result=new StringSet();  addDeclaredSymbolsInScopeSet(result,module,loc);  return result;}  }
class C{  private final void increaseConcentration(double by){  setConcentration(getConcentration() + by);}  }
class C{  public PostProcessor(int fboWidth,int fboHeight,boolean useDepth,boolean useAlphaChannel,boolean use32Bits){  this(fboWidth,fboHeight,useDepth,useAlphaChannel,use32Bits,TextureWrap.ClampToEdge,TextureWrap.ClampToEdge);}  }
class C{  public static void main(String[] args){  ComparableCircle comparableCircle1=new ComparableCircle(12.5);  ComparableCircle comparableCircle2=new ComparableCircle(18.3);  System.out.println("\nComparableCircle1:");  System.out.println(comparableCircle1);  System.out.println("\nComparableCircle2:");  System.out.println(comparableCircle2);  System.out.println((comparableCircle1.compareTo(comparableCircle2) == 1 ? "\nComparableCircle1 " : "\nComparableCircle2 ") + "is the larger of the two Circles");}  }
class C{  public FilterQuery track(final String[] track){  this.track=track;  return this;}  }
class C{  public static PolygonRDD SpatialRangeQueryUsingIndex(PolygonRDD polygonRDD,Envelope envelope,Integer condition){  if (polygonRDD.indexedRDDNoId == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDDNoId is null");  }  JavaRDD<Polygon> result=polygonRDD.indexedRDDNoId.mapPartitions(new PolygonRangeFilterUsingIndex(envelope));  return new PolygonRDD(result);}  }
class C{  public byte[] analyzeWavData(InputStream i){  try {    int headSize=44, metaDataSize=48;    byte[] data=IOUtils.toByteArray(i);    if (data.length < headSize) {      throw new IOException("Wrong Wav header");    }    if (this.sampleRate == 0 && data.length > 28) {      this.sampleRate=readInt(data,24);    }    int destPos=headSize + metaDataSize;    int rawLength=data.length - destPos;    byte[] d=new byte[rawLength];    System.arraycopy(data,destPos,d,0,rawLength);    return d;  } catch (  IOException e) {    Log.e(TAG,"Error while formatting header");  }  return new byte[0];}  }
class C{  public Quaterniond scale(double factor){  return scale(factor,this);}  }
class C{  private void handleDispose(){  if (infoFont != null && !infoFont.isDisposed()) {    infoFont.dispose();  }  infoFont=null;  if (titleFont != null && !titleFont.isDisposed()) {    titleFont.dispose();  }  titleFont=null;}  }
class C{  public String prepareTable(ColumnInfo[] layout,String from,String where,boolean multiSelection,String tableName,boolean addAccessSQL){  int columnIndex=0;  StringBuffer sql=new StringBuffer("SELECT ");  setLayout(layout);  clearColumns();  setColorColumn(-1);  setMultiSelection(multiSelection);  for (columnIndex=0; columnIndex < layout.length; columnIndex++) {    if (columnIndex > 0) {      sql.append(", ");    }    sql.append(layout[columnIndex].getColSQL());    if (layout[columnIndex].isKeyPairCol()) {      sql.append(",").append(layout[columnIndex].getKeyPairColSQL());    }    addColumn(layout[columnIndex]);    if (layout[columnIndex].isColorColumn()) {      setColorColumn(columnIndex);    }    if (layout[columnIndex].getColClass() == IDColumn.class) {      setKeyColumnIndex(columnIndex);    }  }  for (columnIndex=0; columnIndex < layout.length; columnIndex++) {    setColumnClass(columnIndex,layout[columnIndex].getColClass(),layout[columnIndex].isReadOnly(),layout[columnIndex].getColHeader());  }  sql.append(" FROM ").append(from);  sql.append(" WHERE ").append(where);  if (from.length() == 0) {    return sql.toString();  }  if (addAccessSQL) {    String finalSQL=MRole.getDefault().addAccessSQL(sql.toString(),tableName,MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);    logger.finest(finalSQL);    return finalSQL;  } else {    return sql.toString();  }}  }
class C{  public ReadInputRegistersRequest(int ref,int count){  super();  setFunctionCode(Modbus.READ_INPUT_REGISTERS);  setDataLength(4);  setReference(ref);  setWordCount(count);}  }
class C{  protected void correlatedPointAddedCallback(int correlatedTimeStep){  boolean sourceMatches=false;  if (Math.abs(sourceObs - source[correlatedTimeStep]) <= kernelWidthSourceInUse) {    countPastSource++;    sourceMatches=true;  }  if (Math.abs(destNextObs - destNext[correlatedTimeStep]) <= kernelWidthsInUse[0]) {    countNextPast++;    if (sourceMatches) {      countNextPastSource++;    }  }}  }
class C{  public void showFab(float translationX,float translationY){  setFabAnchor(translationX,translationY);  if (!isSheetVisible()) {    fab.show(translationX,translationY);  }}  }
class C{  @Override public void add(Permission permission){  if (!(permission instanceof PackagePermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a " + "readonly PermissionCollection");  PackagePermission pp=(PackagePermission)permission;  String name=pp.getName();  PackagePermission existing=(PackagePermission)permissions.get(name);  if (existing != null) {    int oldMask=existing.getMask();    int newMask=pp.getMask();    if (oldMask != newMask) {      permissions.put(name,new PackagePermission(name,oldMask | newMask));    }  } else {    permissions.put(name,permission);  }  if (!all_allowed) {    if (name.equals("*"))     all_allowed=true;  }}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  public void queryGreaterThan(String type,int index,String value,int page,int limit,int visibilityScope,CloudResponse<CloudObject[]> response){  try {    queryImpl(type,value,index,page,limit,visibilityScope,2,0,false,false,false,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  public static byte[] parseSchemeSpecificData(byte[] atom,UUID uuid){  Pair<UUID,byte[]> parsedAtom=parsePsshAtom(atom);  if (parsedAtom == null) {    return null;  }  if (uuid != null && !uuid.equals(parsedAtom.first)) {    Log.w(TAG,"UUID mismatch. Expected: " + uuid + ", got: "+ parsedAtom.first+ ".");    return null;  }  return parsedAtom.second;}  }
class C{  private boolean termFilter(Term term,String[] desiredFields,int minFreq,int maxFreq,int maxNonAlphabet,boolean filterNumbers,int minTermLength){  if (filterNumbers) {    try {      Double.parseDouble(term.text());      return false;    } catch (    Exception e) {    }  }  return termFilter(term,desiredFields,minFreq,maxFreq,maxNonAlphabet,minTermLength);}  }
class C{  protected String int2singlealphaCount(long val,CharArrayWrapper table){  int radix=table.getLength();  if (val > radix) {    return getZeroString();  } else   return (new Character(table.getChar((int)val - 1))).toString();}  }
class C{  public void componentHidden(final ComponentEvent e){  setVisible(false);}  }
class C{  protected Position computeMainLabelPosition(DrawContext dc,TacticalGraphicLabel label,Position midpoint,Position posB){  Globe globe=dc.getGlobe();  Vec4 pMid=globe.computePointFromPosition(midpoint);  Vec4 pB=globe.computePointFromPosition(posB);  Vec4 normal=globe.computeSurfaceNormalAtPoint(pMid);  Vec4 vMB=pB.subtract3(pMid);  Vec4 eyePoint=dc.getView().getEyePoint();  double pixelSize=dc.getView().computePixelSizeAtDistance(eyePoint.distanceTo3(pMid));  Rectangle labelBounds=label.getBounds(dc);  double labelDiagonal=labelBounds != null ? Math.hypot(labelBounds.width,labelBounds.height) : 0d;  double pixelDistance=labelDiagonal / 2.0;  Vec4 perpendicular=vMB.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(this.getWidth() / 2.0 + pixelDistance * pixelSize);  Vec4 pLabel=pMid.add3(perpendicular);  return globe.computePositionFromPoint(pLabel);}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  public void updateTableEntity(TableEntity tableEntity,boolean commit){  SolrInputDocument doc=new SolrInputDocument();  doc.setField(ID,tableEntity.getFqdn());  doc.setField(TYPE,TYPE_TABLE);  doc.setField(DATABASE_NAME,tableEntity.getDatabaseName());  doc.setField(TABLE_NAME,tableEntity.getTableName());  doc.setField(FIELDS,tableEntity.getFieldNames());  doc.setField(TRANSFORMATION,tableEntity.getTransformationType().split(" -> ")[0]);  doc.setField(EXPORTS,tableEntity.getExportNames());  doc.setField(STORAGE_FORMAT,tableEntity.getStorageFormat());  doc.setField(MATERIALIZE_ONCE,tableEntity.isMaterializeOnce());  doc.setField(EXTERNAL,tableEntity.isExternalTable());  doc.setField(CREATED_AT,tableEntity.getCreatedAt());  doc.setField(OWNER,tableEntity.getTableOwner());  doc.setField(DESCRIPTION,tableEntity.getTableDescription());  doc.setField(TAXONOMIES,tableEntity.getTaxonomyNames());  doc.setField(CATEGORIES,tableEntity.getCategoryNames());  doc.setField(CATEGORIE_OBJECTSS,tableEntity.getCategoryObjectNames());  doc.setField(TAGS,tableEntity.getTags());  doc.setField(STATUS,tableEntity.getStatus());  if (tableEntity.getComment() != null) {    doc.setField(DOCUMENTATION,tableEntity.getComment().getPlainText());    String comments="";    for (    CommentEntity comment : tableEntity.getComments()) {      if (!comments.isEmpty()) {        comments+="     ";      }      comments+=comment.getUsername() + ": " + comment.getPlainText();    }    if (!comments.isEmpty()) {      doc.setField(COMMENTS,comments);    }  }  addDocument(doc);  if (commit) {    commit();  }}  }
class C{  private ArrayDBIDs initialSet(DBIDs sampleSet,int k,Random random){  return DBIDUtil.ensureArray(DBIDUtil.randomSample(sampleSet,k,random));}  }
class C{  private byte[] blockFragmentizerSafe(long blockIdx) throws IOException {  try {    try {      return block(blockIdx);    } catch (    IgfsCorruptedFileException e) {      if (log.isDebugEnabled())       log.debug("Failed to fetch file block [path=" + path + ", fileInfo="+ fileInfo+ ", blockIdx="+ blockIdx+ ", errMsg="+ e.getMessage()+ ']');      if (fileInfo != null && fileInfo.fileMap() != null && !fileInfo.fileMap().ranges().isEmpty()) {        IgfsEntryInfo newInfo=igfsCtx.meta().info(fileInfo.id());        if (newInfo == null)         throw new IgfsPathNotFoundException("Failed to read file block (file was concurrently " + "deleted) [path=" + path + ", blockIdx="+ blockIdx+ ']');        fileInfo=newInfo;        locCache.clear();        if (log.isDebugEnabled())         log.debug("Updated input stream file info after block fetch failure [path=" + path + ", fileInfo="+ fileInfo+ ']');        return block(blockIdx);      }      throw new IOException(e.getMessage(),e);    }  } catch (  IgniteCheckedException e) {    throw new IOException(e.getMessage(),e);  }}  }
class C{  public ReplacableProperties loadProperties(){  ReplacableProperties propertiesBeingLoaded=new ReplacableProperties();  try (InputStream propertiesToLoad=PlayOnLinuxContext.class.getClassLoader().getResourceAsStream(this.getPropertyFileName())){    propertiesBeingLoaded.load(propertiesToLoad);  } catch (  PlayOnLinuxException|IOException e) {    throw new PlayOnLinuxRuntimeException("Cannot load properties",e);  }  return propertiesBeingLoaded;}  }
class C{  public ThumbnailParameterBuilder fitWithinDimensions(boolean fit){  this.fitWithinDimensions=fit;  return this;}  }
class C{  private boolean isBoundsEnforced(){  return boundsEnforced;}  }
class C{  @SuppressWarnings("unchecked") public JdbcData(Connection connection,String table,boolean buffered){  this.connection=connection;  this.table=table;  setBuffered(buffered);  try {    setColumnTypes(getJdbcColumnTypes());  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public void dispatch(){  try {    if (catchExceptions) {      try {        runnable.run();      } catch (      Throwable t) {        if (t instanceof Exception) {          exception=(Exception)t;        }        throwable=t;      }    } else {      runnable.run();    }  }  finally {    finishedDispatching(true);  }}  }
class C{  public void lock(){  lockPositions(true);  this.locked=true;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void trace(String format,Object arg1,Object arg2){}  }
class C{  public static String makeKey(String host,int port,String transport){  return new StringBuffer(host).append(":").append(port).append("/").append(transport).toString().toLowerCase();}  }
class C{  protected void buildSettings(){  SETTINGS=SEARCH_SETTINGS;}  }
class C{  public void testNoElementThrowsException(){  try {    util.selectElementMatchingXPath("app-deployment",testElement);    fail("should have thrown an exception");  } catch (  ElementNotFoundException e) {    assertEquals(testElement,e.getSearched());  }}  }
class C{  public String replace(final StringBuffer source,final int offset,final int length){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(length).append(source,offset,length);  substitute(buf,0,length);  return buf.toString();}  }
class C{  public Builder addKernel(Script.KernelID k){  if (mLines.size() != 0) {    throw new RSInvalidStateException("Kernels may not be added once connections exist.");  }  if (findNode(k) != null) {    return this;  }  mKernelCount++;  Node n=findNode(k.mScript);  if (n == null) {    n=new Node(k.mScript);    mNodes.add(n);  }  n.mKernels.add(k);  return this;}  }
class C{  @Override public void unregisterVASACertificate(String existingCertificate) throws InvalidCertificate, InvalidSession, StorageFault {  final String methodName="unregisterVASACertificate(): ";  log.debug(methodName + "Entry with input existingCertificate[" + (existingCertificate != null ? "***" : null)+ "]");  try {    _sslUtil.checkHttpRequest(true,true);    X509Certificate x509Cert=(X509Certificate)_sslUtil.buildCertificate(existingCertificate);    SimpleTimeCounter counter=new SimpleTimeCounter("unregisterVASACertificate");    unregisterCertificate(x509Cert);    counter.stop();  } catch (  InvalidSession is) {    log.error(methodName + "invalid session",is);    throw is;  }catch (  InvalidCertificate ic) {    log.error(methodName + "invalid certificate",ic);    throw ic;  }catch (  StorageFault sf) {    log.error(methodName + "storage fault occured ",sf);    throw sf;  }catch (  Exception e) {    log.error(methodName + "unknown exception",e);    throw FaultUtil.StorageFault("runtime ",e);  }  log.debug(methodName + "Exit");}  }
class C{  K key(){  return key;}  }
class C{  private void clearListSelection(){  _pathList.clearSelection();  int state=_block.getState() & ~OBlock.ALLOCATED;  _block.pseudoPropertyChange("state",Integer.valueOf(0),Integer.valueOf(state));  _length.setText("");}  }
class C{  public static String[] stringArrayFromString(String string,char delimiter){  List<String> result=new ArrayList<String>(10);  if (StringUtils.isNotBlank(string)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(string,String.valueOf(delimiter),false);    while (tok.hasMoreTokens()) {      String token=tok.nextToken();      result.add(token);    }  }  return result.toArray(new String[0]);}  }
class C{  public boolean startsWith(XMLString prefix){  return startsWith(prefix,0);}  }
class C{  public boolean isEnableMove(){  return this.enableMove;}  }
class C{  public String toString(){  return "[Certificate Exception: " + getMessage() + "]";}  }
class C{  public DistributionLocatorId(int port,String bindAddress){  this(port,bindAddress,null);}  }
class C{  @Override public double kurtosis(){  QL.require(sampleNumber_ > 3,UNSUFFICIENT_SAMPLE_NUMBER_3);  double m=mean();  double v=variance();  double c=(sampleNumber_ - 1.0) / (sampleNumber_ - 2.0);  c*=(sampleNumber_ - 1.0) / (sampleNumber_ - 3.0);  c*=3.0;  if (v == 0)   return c;  double result=fourthPowerSum_ / sampleWeight_;  result-=4.0 * m * (cubicSum_ / sampleWeight_);  result+=6.0 * m * m* (quadraticSum_ / sampleWeight_);  result-=3.0 * m * m* m* m;  result/=v * v;  result*=sampleNumber_ / (sampleNumber_ - 1.0);  result*=sampleNumber_ / (sampleNumber_ - 2.0);  result*=(sampleNumber_ + 1.0) / (sampleNumber_ - 3.0);  return result - c;}  }
class C{  public void testSneakyFieldTypes() throws Exception {  TypeFactory tf=TypeFactory.defaultInstance();  Field field=SneakyBean.class.getDeclaredField("intMap");  JavaType type=tf.constructType(field.getGenericType());  assertTrue(type instanceof MapType);  MapType mapType=(MapType)type;  assertEquals(tf.constructType(Integer.class),mapType.getKeyType());  assertEquals(tf.constructType(Long.class),mapType.getContentType());  field=SneakyBean.class.getDeclaredField("longList");  type=tf.constructType(field.getGenericType());  assertTrue(type instanceof CollectionType);  CollectionType collectionType=(CollectionType)type;  assertEquals(tf.constructType(Long.class),collectionType.getContentType());}  }
class C{  public LambdaContainer(LambdaBlock wrapper,int arity){  super();  this.loadFXML("LambdaContainer");  this.wrapper=wrapper;  attachedBlocks=new HashSet<>();  this.args=new ArrayList<>();  for (int i=0; i < arity; i++) {    this.args.add(new BinderAnchor(this,wrapper,new Binder("a_" + i)));  }  this.res=new ResultAnchor(this,wrapper,Optional.empty());  this.argSpace.getChildren().addAll(this.args);  this.resSpace.getChildren().add(this.res);  TouchContext context=new TouchContext(this,false);  context.setPanningAction(null);}  }
class C{  public void mouseDragged(final MouseEvent e){  if (drawingWalls) {    draggingPoint=e.getPoint();    repaint();  }  if (selectedEntity != null) {    final Point test=new Point(e.getPoint().x + distanceX,e.getPoint().y + distanceY);    final Rectangle testRect=new Rectangle((int)test.getX(),(int)test.getY(),selectedEntity.getWidth(),selectedEntity.getHeight());    testRect.grow(-5,-5);    if (getBounds().contains((testRect.getBounds()))) {      selectedEntity.setX(test.x);      selectedEntity.setY(test.y);      repaint();    }  }}  }
class C{  private void fillNewTags(final Map<String,Object> dataModel) throws Exception {  dataModel.put(Common.NEW_TAGS,tagQueryService.getNewTags(Symphonys.getInt("newTagsCnt")));}  }
class C{  public void listaTiposDocumentosExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_VITALES_VER_TIPOS_DOCUMENTOS,request);  request.setAttribute(DocumentosVitalesConstants.TIPOS_DOCUMENTOS_VITALES_KEY,getGestionDocumentosVitalesBI(request).getTiposDocumentosVitales());  setReturnActionFordward(request,mappings.findForward("ver_tipos"));}  }
class C{  public MicroPipelineManager(final String processingNodeId,final ComponentRepository componentRepository,final int maxNumberOfThreads) throws RequiredInputMissingException {  if (componentRepository == null)   throw new RequiredInputMissingException("Missing required component repository");  if (StringUtils.isBlank(processingNodeId))   throw new RequiredInputMissingException("Missing required processing node identifier");  this.processingNodeId=StringUtils.lowerCase(StringUtils.trim(processingNodeId));  this.microPipelineFactory=new MicroPipelineFactory(this.processingNodeId,componentRepository);  if (maxNumberOfThreads == 1)   this.executorService=Executors.newSingleThreadExecutor(); else   if (maxNumberOfThreads > 1)   this.executorService=Executors.newFixedThreadPool(maxNumberOfThreads); else   this.executorService=Executors.newCachedThreadPool();}  }
class C{  @Override public void close(){  _client.destroy();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static LoggingFraction createDefaultLoggingFraction(Level level){  return new LoggingFraction().applyDefaults(level);}  }
class C{  public void init() throws ServletException {}  }
class C{  public static synchronized Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public Quaterniond rotateLocalX(double angle){  return rotateLocalX(angle,this);}  }
class C{  DrmConstraintInfo(){  count=-1;  startDate=-1;  endDate=-1;  interval=-1;}  }
class C{  private InstrumentationNode cloneWithNewTarget(ValueNode newTarget,VirtualizerTool tool){  InstrumentationNode clone=new InstrumentationNode(newTarget,anchored,weakDependencies.size(),stateBefore);  clone.instrumentationGraph=instrumentationGraph;  for (int i=0; i < weakDependencies.size(); i++) {    ValueNode input=weakDependencies.get(i);    if (!(input instanceof VirtualObjectNode)) {      ValueNode alias=tool.getAlias(input);      if (alias instanceof VirtualObjectNode) {        clone.weakDependencies.initialize(i,alias);        continue;      }    }    clone.weakDependencies.initialize(i,input);  }  return clone;}  }
class C{  public SaveAsAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("SaveAsAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.ALT_MASK));  putValue(LONG_DESCRIPTION,res.getString("SaveAsAction.statusbar"));  putValue(NAME,res.getString("SaveAsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SaveAsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SaveAsAction.image")))));}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public StatementBuilder(String string){  builder=new StringBuilder(string);}  }
class C{  private void relocateFromHeaders(ByteBuffer f,SceModule module,int baseAddress,Elf32 elf,int elfOffset) throws IOException {  int i=0;  for (  Elf32ProgramHeader phdr : elf.getProgramHeaderList()) {    if (phdr.getP_type() == 0x700000A0L) {      int RelCount=phdr.getP_filesz() / Elf32Relocate.sizeof();      if (log.isDebugEnabled()) {        log.debug(String.format("PH#%d: relocating %d entries",i,RelCount));      }      f.position(elfOffset + phdr.getP_offset());      relocateFromBuffer(f,module,baseAddress,elf,RelCount,true);      return;    } else     if (phdr.getP_type() == 0x700000A1L) {      if (log.isDebugEnabled()) {        log.debug(String.format("Type 0x700000A1 PH#%d: relocating A1 entries, size=0x%X",i,phdr.getP_filesz()));      }      f.position(elfOffset + phdr.getP_offset());      relocateFromBufferA1(f,elf,baseAddress,i,phdr.getP_filesz());      return;    }    i++;  }  for (  Elf32SectionHeader shdr : elf.getSectionHeaderList()) {    if (mustRelocate(elf,shdr)) {      int RelCount=shdr.getSh_size() / Elf32Relocate.sizeof();      if (log.isDebugEnabled()) {        log.debug(shdr.getSh_namez() + ": relocating " + RelCount+ " entries");      }      f.position(elfOffset + shdr.getSh_offset());      relocateFromBuffer(f,module,baseAddress,elf,RelCount,shdr.getSh_type() != Elf32SectionHeader.SHT_REL);    }  }}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.812 -0400",hash_original_method="F5106D0386D3020336DFAB8E81694EB1",hash_generated_method="19EBF7A8C1F496ACA7BB8F658932423D") private void onAgentCancel(){  Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_CANCEL);  mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);  mHandler.sendMessageDelayed(mHandler.obtainMessage(EVENT_AGENT_CANCEL),1500);  return;}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public void addOutMessage(final String address){}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("The remove  operation is not supported by this Iterator.");}  }
class C{  @PostMapping(consumes="multipart/form-data") public ResponseEntity<FileInfo> uploadFile(@RequestParam("file") MultipartFile file,@RequestParam(required=false) String name,HttpServletRequest request){  try {    if (Strings.isNullOrEmpty(name)) {      name=file.getOriginalFilename();    }    long size=file.getSize();    FileDescriptor fd=createFileDescriptor(name,size);    InputStream is=file.getInputStream();    uploadToMiddleware(is,fd);    saveFileDescriptor(fd);    return createFileInfoResponseEntity(request,fd);  } catch (  Exception e) {    log.error("File upload failed",e);    throw new RestAPIException("File upload failed","File upload failed",HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  static double ensureNonNegative(double value){  checkArgument(!isNaN(value));  if (value > 0.0) {    return value;  } else {    return 0.0;  }}  }
class C{  public v4ParserException(){}  }
class C{  void log(String msg){  System.err.println(msg);}  }
class C{  @After public void tearDown() throws Exception {  Locale.setDefault(this.savedLocale);}  }
class C{  public void multiply(Matrix2f rhs){  Matrix2f tmp=new Matrix2f();  tmp.loadMultiply(this,rhs);  load(tmp);}  }
class C{  public Quaternionf mul(float qx,float qy,float qz,float qw){  set(w * qx + x * qw + y * qz - z * qy,w * qy - x * qz + y * qw + z * qx,w * qz + x * qy - y * qx + z * qw,w * qw - x * qx - y * qy - z * qz);  return this;}  }
class C{  public JRangeSlider createRangeSlider(int orientation,int direction){  return new JRangeSlider(m_model,orientation,direction);}  }
class C{  private JPopupMenu createOperatorPopupMenu(){  JPopupMenu menu=new JPopupMenu();  menu.add(EXPAND_ALL_ACTION);  menu.add(COLLAPSE_ALL_ACTION);  menu.addSeparator();  String name="Tree";  if (mainFrame.getProcess().getProcessLocation() != null) {    name=mainFrame.getProcess().getProcessLocation().getShortName();  }  menu.add(PrintingTools.makeExportPrintMenu(this,name));  return menu;}  }
class C{  public final LC rightToLeft(){  setLeftToRight(Boolean.FALSE);  return this;}  }
class C{  private boolean removeOrMaterializeIf(SimplifierTool tool){  assert trueSuccessor().hasNoUsages() && falseSuccessor().hasNoUsages();  if (trueSuccessor().next() instanceof AbstractEndNode && falseSuccessor().next() instanceof AbstractEndNode) {    AbstractEndNode trueEnd=(AbstractEndNode)trueSuccessor().next();    AbstractEndNode falseEnd=(AbstractEndNode)falseSuccessor().next();    AbstractMergeNode merge=trueEnd.merge();    if (merge == falseEnd.merge() && trueSuccessor().anchored().isEmpty() && falseSuccessor().anchored().isEmpty()) {      PhiNode singlePhi=null;      int distinct=0;      for (      PhiNode phi : merge.phis()) {        ValueNode trueValue=phi.valueAt(trueEnd);        ValueNode falseValue=phi.valueAt(falseEnd);        if (trueValue != falseValue) {          distinct++;          singlePhi=phi;        }      }      if (distinct == 0) {        removeThroughFalseBranch(tool);        return true;      } else       if (distinct == 1) {        ValueNode trueValue=singlePhi.valueAt(trueEnd);        ValueNode falseValue=singlePhi.valueAt(falseEnd);        ConditionalNode conditional=canonicalizeConditionalCascade(trueValue,falseValue);        if (conditional != null) {          singlePhi.setValueAt(trueEnd,conditional);          removeThroughFalseBranch(tool);          return true;        }      }    }  }  if (trueSuccessor().next() instanceof ReturnNode && falseSuccessor().next() instanceof ReturnNode) {    ReturnNode trueEnd=(ReturnNode)trueSuccessor().next();    ReturnNode falseEnd=(ReturnNode)falseSuccessor().next();    ValueNode trueValue=trueEnd.result();    ValueNode falseValue=falseEnd.result();    ValueNode value=null;    if (trueValue != null) {      if (trueValue == falseValue) {        value=trueValue;      } else {        value=canonicalizeConditionalCascade(trueValue,falseValue);        if (value == null) {          return false;        }      }    }    ReturnNode newReturn=graph().add(new ReturnNode(value));    replaceAtPredecessor(newReturn);    GraphUtil.killCFG(this);    return true;  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void resize(int c){  int[] newItems=new int[c];  for (int i=0; i < items.length; i+=1) {    newItems[i]=items[i];  }  items=newItems;}  }
class C{  public static double calculateRSquared(Instances data,double ssr) throws Exception {  double yMean=data.meanOrMode(data.classIndex());  double tss=0.0;  for (int i=0; i < data.numInstances(); i++) {    tss+=(data.instance(i).value(data.classIndex()) - yMean) * (data.instance(i).value(data.classIndex()) - yMean);  }  double rsq=1 - (ssr / tss);  return rsq;}  }
class C{  public final void testSetCaseSensitivity(){  Case caseSensitivity=Case.UPPERCASE;  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.CASE_INSENSITIVE,true);  characterOrNumberValidator.setCaseSensitivity(caseSensitivity);  assertEquals(caseSensitivity,characterOrNumberValidator.getCaseSensitivity());}  }
class C{  @Util public static void resetAdminTenantId(){  session.put(TENANT_ID,Security.getUserInfo().getTenant());}  }
class C{  public void closeAllFiles(){  while (m_TabbedPane.getTabCount() > 0) {    if (!saveChanges(true)) {      return;    }    m_TabbedPane.removeTabAt(getCurrentIndex());    updateFrameTitle();    System.gc();  }}  }
class C{  @Override public final int size(){  return (int)Math.max((tail.get() - head.get()),0);}  }
class C{  public RAkELdTest(String name){  super(name);}  }
class C{  public static void main(String[] args){  try {    int fdNum=Integer.parseInt(args[0],10);    int targetSdkVersion=Integer.parseInt(args[1],10);    if (fdNum != 0) {      try {        FileDescriptor fd=ZygoteInit.createFileDescriptor(fdNum);        DataOutputStream os=new DataOutputStream(new FileOutputStream(fd));        os.writeInt(Process.myPid());        os.close();        IoUtils.closeQuietly(fd);      } catch (      IOException ex) {        Slog.d(TAG,"Could not write pid of wrapped process to Zygote pipe.",ex);      }    }    ZygoteInit.preload();    String[] runtimeArgs=new String[args.length - 2];    System.arraycopy(args,2,runtimeArgs,0,runtimeArgs.length);    RuntimeInit.wrapperInit(targetSdkVersion,runtimeArgs);  } catch (  ZygoteInit.MethodAndArgsCaller caller) {    caller.run();  }}  }
class C{  private final void completeConstruction(){  if (mDbg)   mSm.log("completeConstruction: E");  int maxDepth=0;  for (  StateInfo si : mStateInfo.values()) {    int depth=0;    for (StateInfo i=si; i != null; depth++) {      i=i.parentStateInfo;    }    if (maxDepth < depth) {      maxDepth=depth;    }  }  if (mDbg)   mSm.log("completeConstruction: maxDepth=" + maxDepth);  mStateStack=new StateInfo[maxDepth];  mTempStateStack=new StateInfo[maxDepth];  setupInitialStateStack();  sendMessageAtFrontOfQueue(obtainMessage(SM_INIT_CMD,mSmHandlerObj));  if (mDbg)   mSm.log("completeConstruction: X");}  }
class C{  private void createTestImage(){  mInitialImage=new byte[3 * mSize / 2];  for (int i=0; i < mSize; i++) {    mInitialImage[i]=(byte)(40 + i % 199);  }  for (int i=mSize; i < 3 * mSize / 2; i+=2) {    mInitialImage[i]=(byte)(40 + i % 200);    mInitialImage[i + 1]=(byte)(40 + (i + 99) % 200);  }}  }
class C{  public void addCascaded(Component comp,Integer layer){  this.add(comp,layer);  if (comp instanceof JInternalFrame) {    this.cascade(comp);  }  this.moveToFront(comp);}  }
class C{  private static void dualPivotQuicksort(long[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  long ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    long t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    long t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    long t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    long t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    long t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  long pivot1=ae2;  a[e2]=a[left];  long pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public void onSeekComplete(MediaPlayer mp){  Log.d(TAG,"onSeekComplete");  stopLoading();  if (lastState != null) {switch (lastState) {case STARTED:{        start();        break;      }case PLAYBACKCOMPLETED:{      currentState=State.PLAYBACKCOMPLETED;      break;    }case PREPARED:{    currentState=State.PREPARED;    break;  }}}if (this.seekCompleteListener != null) this.seekCompleteListener.onSeekComplete(mp);}  }
class C{  public int computeWordValue(Vertex word){  int value=2;  int count=0;  if (word.instanceOf(Primitive.NOUN)) {    value=value + 12;    count++;  }  if (word.instanceOf(Primitive.ADJECTIVE)) {    value=value + 6;    count++;  }  if (word.instanceOf(Primitive.INTERJECTION)) {    value=value + 6;    count++;  }  if (word.instanceOf(Primitive.VERB)) {    value=value + 4;    count++;  }  if (word.instanceOf(Primitive.QUESTION)) {    value=value + 3;    count++;  }  if (word.instanceOf(Primitive.ADVERB)) {    value=value + 2;    count++;  }  if (count == 0) {    Collection<Relationship> meanings=word.getRelationships(Primitive.MEANING);    if (meanings != null) {      for (      Relationship relation : meanings) {        Vertex meaning=relation.getTarget();        if (meaning.instanceOf(Primitive.THING)) {          value=value + 12;        } else         if (meaning.instanceOf(Primitive.DESCRIPTION)) {          value=value + 6;        } else         if (meaning.instanceOf(Primitive.INTERJECTION)) {          value=value + 6;        } else         if (meaning.instanceOf(Primitive.ACTION)) {          value=value + 4;        } else         if (meaning.instanceOf(Primitive.QUESTION)) {          value=value + 3;        } else {          value=value + 2;        }      }      value=value / meanings.size();    } else {      value=value + 4;    }  } else {    value=value / count;  }  if (word.instanceOf(Primitive.PUNCTUATION) || (word.instanceOf(Primitive.ARTICLE))) {    value=1;  }  if (word.instanceOf(Primitive.KEYWORD)) {    value=25;  }  return value;}  }
class C{  public TenantResource tenant(){  return tenant;}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4){  List<E> list=new ArrayList<>();  list.add(e1);  list.add(e2);  list.add(e3);  list.add(e4);  return list;}  }
class C{  @Deprecated public BitmapDrawable(){  mBitmapState=new BitmapState((Bitmap)null);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String l_szRequestID=null;  HttpSession sess=request.getSession(true);  sess.setMaxInactiveInterval(WebEnv.TIMEOUT);  ctx=getCtx();  if (sess.getAttribute("ctx") != null)   ctx=(Properties)sess.getAttribute("ctx");  WebSessionCtx wsc=(WebSessionCtx)sess.getAttribute(WebSessionCtx.NAME);  if (wsc != null) {    String mode=WebUtil.getParameter(request,"Mode");    if (mode != null && mode.equals("RequestNew")) {      l_szRequestID=Request.createRequest(request,ctx);    } else     if (mode != null && mode.equals("RequestChange")) {      l_szRequestID=Request.changeRequest(request,ctx);    }  }  String url=request.getParameter("ForwardTo") + l_szRequestID;  if (!url.startsWith("/"))   url="/" + url;  response.sendRedirect(url);}  }
class C{  public short convertIndexToLocation(int index){  if (index == 0)   return 0;  if (index <= currentNumLocals) {    return currentCompiledMethod.getGeneralLocalLocation(index - 1);  } else {    return currentCompiledMethod.getGeneralStackLocation(index - 1 - currentNumLocals);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void load(String filename,G g) throws IOException {  load(new FileReader(filename),g);}  }
class C{  public MockNioSession(){}  }
class C{  public void reduceNetworkCapacity(String outputFilename,double fraction){  log.info("Changing the network capacity. Multiplying by " + fraction);  int counter=0;  int multiplier=1;  for (  Id<Link> id : sc.getNetwork().getLinks().keySet()) {    double old=sc.getNetwork().getLinks().get(id).getCapacity();    sc.getNetwork().getLinks().get(id).setCapacity(old * fraction);    if (++counter == multiplier) {      log.info("   Links adapted: " + counter);      multiplier*=2;    }  }  log.info("   Links adapted: " + counter + " (Done)");  NetworkWriter nw=new NetworkWriter(sc.getNetwork());  nw.write(outputFilename);}  }
class C{  public static boolean isDangerous(double d){  return Double.isInfinite(d) || Double.isNaN(d) || d == 0.0;}  }
class C{  static public void saveData(Context context,String key,String val){  context.getSharedPreferences(PREF_APP,Context.MODE_PRIVATE).edit().putString(key,val).apply();}  }
class C{  private String createChoiceWithFictionalProgressXML(String choiceId,String choiceDescription,String nextMomentId,boolean depleteWeaponCharge,boolean incrementNumEnemiesDefeated,String progressDescription,String iconResourceName){  String xml="";  xml+="<choice ";  xml+="id='" + choiceId + "' >";  xml+="<description>" + choiceDescription + "</description>";  xml+=createNextMomentXml(nextMomentId);  xml+="<outcome ";  xml+="deplete_weapon='" + Boolean.toString(depleteWeaponCharge) + "' ";  xml+="increment_enemies='" + Boolean.toString(incrementNumEnemiesDefeated) + "' />";  xml+=createFictionalProgressXml(progressDescription);  if (iconResourceName != null) {    xml+=createIconXML(iconResourceName);  }  xml+="</choice>";  return xml;}  }
class C{  public static void sort(char[] a){  sort1(a,0,a.length);}  }
class C{  private void addOrUpdateNode(AStarNode newNode){  boolean found=false;  for (  AStarNode toUpdate : closedNodes) {    if (newNode.equals(toUpdate)) {      toUpdate.updateDistance(newNode.getG(),newNode.parent);      found=true;      break;    }  }  if (!found) {    openQueue.offer(newNode);  }}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  if (extns == null) {    return false;  }  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);  return !extns.isEmpty();}  }
class C{  public void test_MultipleAccessToSeveralTables() throws SQLException {  threadPool.runTask(createTask1(1));  threadPool.runTask(createTask2(2));  threadPool.runTask(createTask3(3));}  }
class C{  synchronized void releaseLocalIdOnDisk(String localId){  MapEntry entry=getMapEntry(localId);  entry.retainCount--;  if (entry.retainCount > 0) {    putMapEntry(localId,entry);  } else {    removeMapEntry(localId);  }}  }
class C{  public CCriteriumWrapper(final ICriteriumCreator creator){  super(creator);}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(false);}  }
class C{  public boolean springBackX(int start,int min,int max){  mScrollerX.mMode=FLING_MODE;  return mScrollerX.springback(start,min,max);}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public PersianCharFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean hasPercentComplete(){  return hasExtension(PercentComplete.class);}  }
class C{  private void prohibitLandrushIfExactlyOneSunrise(Registry registry) throws UncontestedSunriseApplicationBlockedInLandrushException {  if (registry.getTldState(now) == TldState.LANDRUSH) {    ImmutableSet<DomainApplication> applications=loadActiveApplicationsByDomainName(targetId,now);    if (applications.size() == 1 && getOnlyElement(applications).getPhase().equals(LaunchPhase.SUNRISE)) {      throw new UncontestedSunriseApplicationBlockedInLandrushException();    }  }}  }
class C{  private void resetNamePatternSection(){  disposeOptionalControls(NAME_PATTERN_ID);  validationManager.validationRemoved(NAME_PATTERN_TEXT);  validationManager.validationRemoved(REGULAR_EXPRESSION_TEXT);  useRegexForNameRadioButton.setSelection(false);  useStringValueAsNameRadioButton.setSelection(true);  useDefaultPattern=true;}  }
class C{  public static PurityResult checkPurity(Tree statement,AnnotationProvider annoProvider,boolean assumeSideEffectFree){  PurityCheckerHelper helper=new PurityCheckerHelper(annoProvider,assumeSideEffectFree);  PurityResult res=helper.scan(statement,new PurityResult());  return res;}  }
class C{  public Node buildTreeFull(Class<?> type,int depth){  if (depth == 0) {    return PRNG.nextItem(listAvailableTerminals(type)).copyNode();  } else {    Node node=PRNG.nextItem(listAvailableFunctions(type)).copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      node.setArgument(i,buildTreeFull(node.getArgumentType(i),depth - 1));    }    return node;  }}  }
class C{  private static void sort(DefaultListModel model){  Object[] elements=model.toArray();  Arrays.sort(elements);  model.clear();  for (  Object element : elements) {    model.addElement(element);  }}  }
class C{  protected boolean handleMarkSeenNotPermanent(MimeMessage aMessage) throws MessagingException {  return aMessage.isSet(Flags.Flag.SEEN);}  }
class C{  public PatternsRequestCondition(String[] patterns,HttpRequestPathHelper pathHelper,PathMatcher pathMatcher,boolean useSuffixPatternMatch,boolean useTrailingSlashMatch,Set<String> extensions){  this(asList(patterns),pathHelper,pathMatcher,useSuffixPatternMatch,useTrailingSlashMatch,extensions);}  }
class C{  public DataAsyncHttpResponseHandler(){  super();}  }
class C{  public DDFSubfield(DDFSubfieldDefinition ddfsd,Object value){  setDefn(ddfsd);  setValue(value);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  static void testBytes(int numBytes,long expectedCount,long start,long lim) throws UnsupportedEncodingException {  Random rnd=new Random();  byte[] bytes=new byte[numBytes];  if (lim == -1) {    lim=1L << (numBytes * 8);  }  long count=0;  long countRoundTripped=0;  for (long byteChar=start; byteChar < lim; byteChar++) {    long tmpByteChar=byteChar;    for (int i=0; i < numBytes; i++) {      bytes[bytes.length - i - 1]=(byte)tmpByteChar;      tmpByteChar=tmpByteChar >> 8;    }    ByteString bs=ByteString.copyFrom(bytes);    boolean isRoundTrippable=bs.isValidUtf8();    String s=new String(bytes,"UTF-8");    byte[] bytesReencoded=s.getBytes("UTF-8");    boolean bytesEqual=Arrays.equals(bytes,bytesReencoded);    if (bytesEqual != isRoundTrippable) {      outputFailure(byteChar,bytes,bytesReencoded);    }    assertEquals(isRoundTrippable,Utf8.isValidUtf8(bytes));    assertEquals(isRoundTrippable,Utf8.isValidUtf8(bytes,0,numBytes));    int i=rnd.nextInt(numBytes);    int j=rnd.nextInt(numBytes);    if (j < i) {      int tmp=i;      i=j;      j=tmp;    }    int state1=Utf8.partialIsValidUtf8(Utf8.COMPLETE,bytes,0,i);    int state2=Utf8.partialIsValidUtf8(state1,bytes,i,j);    int state3=Utf8.partialIsValidUtf8(state2,bytes,j,numBytes);    if (isRoundTrippable != (state3 == Utf8.COMPLETE)) {      System.out.printf("state=%04x %04x %04x i=%d j=%d%n",state1,state2,state3,i,j);      outputFailure(byteChar,bytes,bytesReencoded);    }    assertEquals(isRoundTrippable,(state3 == Utf8.COMPLETE));    ByteString rope=RopeByteString.newInstanceForTest(bs.substring(0,i),RopeByteString.newInstanceForTest(bs.substring(i,j),bs.substring(j,numBytes)));    assertSame(RopeByteString.class,rope.getClass());    ByteString[] byteStrings={bs,bs.substring(0,numBytes),rope};    for (    ByteString x : byteStrings) {      assertEquals(isRoundTrippable,x.isValidUtf8());      assertEquals(state3,x.partialIsValidUtf8(Utf8.COMPLETE,0,numBytes));      assertEquals(state1,x.partialIsValidUtf8(Utf8.COMPLETE,0,i));      assertEquals(state1,x.substring(0,i).partialIsValidUtf8(Utf8.COMPLETE,0,i));      assertEquals(state2,x.partialIsValidUtf8(state1,i,j - i));      assertEquals(state2,x.substring(i,j).partialIsValidUtf8(state1,0,j - i));      assertEquals(state3,x.partialIsValidUtf8(state2,j,numBytes - j));      assertEquals(state3,x.substring(j,numBytes).partialIsValidUtf8(state2,0,numBytes - j));    }    ByteString ropeADope=RopeByteString.newInstanceForTest(bs,bs.substring(0,numBytes));    assertEquals(isRoundTrippable,ropeADope.isValidUtf8());    if (isRoundTrippable) {      countRoundTripped++;    }    count++;    if (byteChar != 0 && byteChar % 1000000L == 0) {      logger.info("Processed " + (byteChar / 1000000L) + " million characters");    }  }  logger.info("Round tripped " + countRoundTripped + " of "+ count);  assertEquals(expectedCount,countRoundTripped);}  }
class C{  public void addParameterValues(final String requestParameterName,final Object... requestParameterValues){  if (requestParameterValues != null) {    for (    final Object requestParameterValue : requestParameterValues) {      getParameters().add(requestParameterName,requestParameterValue);    }  }}  }
class C{  public String globalInfo(){  return "An instance filter that assumes instances form time-series data and " + "replaces attribute values in the current instance with the difference " + "between the current value and the equivalent attribute attribute value "+ "of some previous (or future) instance. For instances where the time-shifted "+ "value is unknown either the instance may be dropped, or missing values "+ "used. Skips the class attribute if it is set.";}  }
class C{  protected CCBitmapFontAtlas(CharSequence theString,String fntFile){  super((parsed=FNTConfigLoadFile(fntFile)).atlasName,theString.length());  configuration_=parsed;  opacity_=255;  color_=new ccColor3B(ccColor3B.ccWHITE);  contentSize_=CGSize.zero();  opacityModifyRGB_=textureAtlas_.getTexture().hasPremultipliedAlpha();  anchorPoint_=CGPoint.ccp(0.5f,0.5f);  string_=new TextBuilder();  setString(theString);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public X509Name(String dirName,X509NameEntryConverter converter){  this(DefaultReverse,DefaultLookUp,dirName,converter);}  }
class C{  void fireMonitorsUpdatedEvents(){  ArrayList registered=null;  VmEvent ev=null;synchronized (listeners) {    registered=(ArrayList)listeners.clone();  }  for (Iterator i=registered.iterator(); i.hasNext(); ) {    VmListener l=(VmListener)i.next();    if (ev == null) {      ev=new VmEvent(this);    }    l.monitorsUpdated(ev);  }}  }
class C{  private void exportGuideLine(Project aProject,File aCopyDir) throws IOException {  File guidelineDir=new File(aCopyDir + GUIDELINES_FOLDER);  FileUtils.forceMkdir(guidelineDir);  File annotationGuidlines=repository.getGuidelinesFile(aProject);  if (annotationGuidlines.exists()) {    for (    File annotationGuideline : annotationGuidlines.listFiles()) {      FileUtils.copyFileToDirectory(annotationGuideline,guidelineDir);    }  }}  }
class C{  public boolean hasChild(String name){  return (getChild(name) != null);}  }
class C{  public static double value(double x){  if ((x >= 0) && (x <= epsilon)) {    return 0.0;  }  if ((x < 0) && (-x <= epsilon)) {    return 0.0;  }  return x;}  }
class C{  public static void updateComponentTreeUI(@Nullable Component c){  if (c == null)   return;  for (  Component component : uiTraverser().postOrderTraversal(c)) {    if (component instanceof JComponent)     ((JComponent)component).updateUI();  }  c.invalidate();  c.validate();  c.repaint();}  }
class C{  void addTopLevel(String key,JFrame frame){  if (frame != this) {    toplevels.put(key,frame);  }}  }
class C{  protected void resultSetLogError(String message,Throwable error){  Logger.sqlErrorLog(message,error);}  }
class C{  private boolean validate(Class type,InputNode node,Session session) throws Exception {  return validate(type,node,new Source(strategy,support,session));}  }
