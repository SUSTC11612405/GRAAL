class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  bufferInput((Instance)instance.copy());  if (isFirstBatchDone()) {    Instances inst=new Instances(getInputFormat());    inst=process(inst);    for (int i=0; i < inst.numInstances(); i++) {      push(inst.instance(i));    }    flushInput();  }  return m_FirstBatchDone;}  }
class C{  public void undoInsert() throws SQLException {  checkCursor();  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }  Row currentRow=(Row)getCurrentRow();  if (currentRow.getInserted() == true) {    rvh.remove(cursorPos - 1);    --numRows;    notifyRowChanged();  } else {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.illegalop").toString());  }}  }
class C{  public static void prepopulateClient() throws Exception {  doEntryOperations(primaryPrefix);  doEntryOperations(secondaryPrefix);}  }
class C{  private void findMatchableNodes(Element element){  processMatchableNode(element);  Element enclosing=element.getEnclosingElement();  while (enclosing != null) {    if (enclosing.getKind() == ElementKind.CLASS || enclosing.getKind() == ElementKind.INTERFACE) {      TypeElement current=(TypeElement)enclosing;      while (current != null) {        processMatchableNode(current);        for (        TypeMirror intf : current.getInterfaces()) {          Element interfaceElement=typeUtils().asElement(intf);          processMatchableNode(interfaceElement);          findMatchableNodes(interfaceElement);        }        TypeMirror theSuper=current.getSuperclass();        current=(TypeElement)typeUtils().asElement(theSuper);      }    }    enclosing=enclosing.getEnclosingElement();  }}  }
class C{  private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {  iInstant=(MutableDateTime)oos.readObject();  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();  iField=type.getField(iInstant.getChronology());}  }
class C{  public boolean hasInterestedBytes(){  return hasInterestedBytes(5);}  }
class C{  public ImageIcon(URL location){  this(location,location.toExternalForm());}  }
class C{  private static <T>T intToEnum(Class<?> cls,Integer value) throws ReflectiveOperationException {  Object[] values=(Object[])cls.getMethod("values").invoke(null,(Object[])null);  return (T)values[value];}  }
class C{  public static int toIPv4Address(String ipAddress){  if (ipAddress == null)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  int result=0;  for (int i=0; i < 4; ++i) {    int oct=Integer.valueOf(octets[i]);    if (oct > 255 || oct < 0)     throw new IllegalArgumentException("Octet values in specified" + " IPv4 address must be 0 <= value <= 255");    result|=oct << ((3 - i) * 8);  }  return result;}  }
class C{  private ExprCfg parseCondExpr(ExprCfg test){  ExprCfg left=parseExpr();  ExprToken token=scanToken();  if (token != ExprToken.COLON) {    throw error(L.l("Expected ':' at {0}.  Conditional syntax is 'expr ? expr : expr'.",token));  }  ExprCfg right=parseTerm();  while (true) {    token=scanToken();switch (token) {case EQ:case NE:case LT:case GT:case LE:case GE:case MATCHES:      right=parseCmpExpr(token,right,parseTerm());    break;default :  unreadToken();return new ExprCfgCond(test,left,right);}}}  }
class C{  public ResourceFilter folders(){  return addKind(Kind.FOLDERS);}  }
class C{  public ClustreamClustererAdapter(org.apache.samoa.moa.clusterers.Clusterer learner,Instances dataset){  this.learner=learner.copy();  this.isInit=false;  this.dataset=dataset;}  }
class C{  public static QueryExp anySubString(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,new StringValueExp("*" + escapeString(s.getValue()) + "*"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.453 -0500",hash_original_method="6FEDE2ECE3E4B773BADE3DEA30808B9D",hash_generated_method="7302537741E84B1619DFC382DA6A24A1") public void onReachedMaxAppCacheSize(long spaceNeeded,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  if (mWebChromeClient == null) {    quotaUpdater.updateQuota(0);    return;  }  Message msg=obtainMessage(REACHED_APPCACHE_MAXSIZE);  HashMap<String,Object> map=new HashMap();  map.put("spaceNeeded",spaceNeeded);  map.put("totalUsedQuota",totalUsedQuota);  map.put("quotaUpdater",quotaUpdater);  msg.obj=map;  sendMessage(msg);}  }
class C{  public static byte[] serialize(ClusterMetrics metrics){  byte[] buf=new byte[METRICS_SIZE];  serialize(buf,0,metrics);  return buf;}  }
class C{  public static int lastIndexOfWhitespace(String src,int startIndex,int endIndex){  int total=src.length() - 1;  if (total < 0) {    return -1;  }  if (startIndex >= total) {    startIndex=total;  }  if (endIndex < 0) {    endIndex=0;  }  for (int i=startIndex; i >= endIndex; i--) {    if (Character.isWhitespace(src.charAt(i))) {      return i;    }  }  return -1;}  }
class C{  public boolean canInsertItem(int slot,ItemStack stack,int par){  return this.isItemValidForSlot(slot,stack);}  }
class C{  public void sendMessage(SIPMessage message,InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {  if (message == null || receiverAddress == null)   throw new IllegalArgumentException("Null argument");  Socket sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),receiverAddress,receiverPort,"TLS",message,retry,this);  if (sock != mySock && sock != null) {    try {      if (mySock != null)       mySock.close();    } catch (    IOException ex) {    }    mySock=sock;    this.myClientInputStream=mySock.getInputStream();    Thread mythread=new Thread(this);    mythread.setDaemon(true);    mythread.setName("TLSMessageChannelThread");    mythread.start();  }}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  boolean DEBUG_FINE=logger.isLoggable(Level.FINE);  if (projection == null) {    if (DEBUG_FINE) {      logger.fine(getName() + ": prepare called with null projection");    }    return new OMGraphicList();  }  if (spatialIndex == null) {    if (DEBUG_FINE) {      logger.fine(getName() + ": spatialIndex is null!");    }    OMGraphicList list=getList();    if (list != null) {      list.generate(projection,true);      return list;    } else {      return new OMGraphicList();    }  }  Point2D ul=projection.getUpperLeft();  Point2D lr=projection.getLowerRight();  double ulLat=ul.getY();  double ulLon=ul.getX();  double lrLat=lr.getY();  double lrLon=lr.getX();  OMGraphicList list=new OMGraphicList();  if (ProjMath.isCrossingDateline(ulLon,lrLon,projection.getScale())) {    if (DEBUG_FINE) {      logger.fine("ShapeLayer.computeGraphics(): Dateline is on screen");    }    double ymin=Math.min(ulLat,lrLat);    double ymax=Math.max(ulLat,lrLat);    try {      list=spatialIndex.getOMGraphics(ulLon,ymin,180.0d,ymax,list,drawingAttributes,projection,coordTransform);      list=spatialIndex.getOMGraphics(-180.0d,ymin,lrLon,ymax,list,drawingAttributes,projection,coordTransform);    } catch (    InterruptedIOException iioe) {      list=null;    }catch (    IOException ex) {      if (DEBUG_FINE) {        ex.printStackTrace();      }    }catch (    FormatException fe) {      if (DEBUG_FINE) {        fe.printStackTrace();      }    }catch (    NullPointerException npe) {      if (DEBUG_FINE) {        npe.printStackTrace();      }    }  } else {    double xmin=Math.min(ulLon,lrLon);    double xmax=Math.max(ulLon,lrLon);    double ymin=Math.min(ulLat,lrLat);    double ymax=Math.max(ulLat,lrLat);    try {      list=spatialIndex.getOMGraphics(xmin,ymin,xmax,ymax,list,drawingAttributes,projection,coordTransform);    } catch (    InterruptedIOException iioe) {      list=null;    }catch (    java.io.IOException ex) {      if (DEBUG_FINE) {        ex.printStackTrace();      }    }catch (    FormatException fe) {      if (DEBUG_FINE) {        fe.printStackTrace();      }    }catch (    NullPointerException npe) {      if (DEBUG_FINE) {        npe.printStackTrace();      }    }  }  return list;}  }
class C{  private void handlePopupEvent(final Event event){switch (event.type) {case SWT.Paint:    final Rectangle listRect=this.popup.getBounds();  final Color black=getDisplay().getSystemColor(SWT.COLOR_BLACK);event.gc.setForeground(black);event.gc.drawRectangle(0,0,listRect.width - 1,listRect.height - 1);break;case SWT.Close:event.doit=false;hidePopupWindow(false);break;case SWT.Deactivate:hidePopupWindow(false);break;case SWT.Dispose:if (this.keyListener != null) {this.label.removeKeyListener(this.keyListener);}break;}}  }
class C{  public jMatrix times(double s){  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=s * A[i][j];    }  }  return X;}  }
class C{  private void enqueue(final HttpServerRequest request,HttpRequest queuedRequest,final String queue){  enqueue(request,queuedRequest,queue,null);}  }
class C{  private void catchup(boolean checkState){  StreamAction state=getServiceState();  boolean canCatchup=true;  if (!checkState) {    Log.d(LOG_TAG,"catchup  without checking state ");  } else {    Log.d(LOG_TAG,"catchup with state " + state + " CurrentActivity "+ VectorApp.getCurrentActivity());    canCatchup=(state == StreamAction.CATCHUP) || (state == StreamAction.PAUSE) || ((StreamAction.START == state) && (null == VectorApp.getCurrentActivity()));  }  if (canCatchup) {    if (mSessions != null) {      for (      MXSession session : mSessions) {        session.catchupEventStream();      }    } else {      Log.e(LOG_TAG,"catchup no session");    }    setServiceState(StreamAction.CATCHUP);  } else {    Log.d(LOG_TAG,"No catchup is triggered because there is already a running event thread");  }}  }
class C{  public TextEditor trim(){  text=new StringBuilder(text.toString().trim());  return this;}  }
class C{  public void testAddTooManyIndexesDir() throws Exception {  Directory dir=newDirectory(random(),NoLockFactory.INSTANCE);  Document doc=new Document();  IndexWriter w=new IndexWriter(dir,new IndexWriterConfig(null));  for (int i=0; i < 100000; i++) {    w.addDocument(doc);  }  w.forceMerge(1);  w.commit();  w.close();  MockDirectoryWrapper dir2=newMockDirectory();  w=new IndexWriter(dir2,new IndexWriterConfig(null));  w.commit();  dir2.setMaxSizeInBytes(dir2.sizeInBytes() + 65536);  Directory dirs[]=new Directory[1 + (IndexWriter.MAX_DOCS / 100000)];  for (int i=0; i < dirs.length; i++) {    dirs[i]=new FilterDirectory(dir){    };  }  try {    w.addIndexes(dirs);    fail("didn't get expected exception");  } catch (  IllegalArgumentException expected) {  }catch (  IOException fakeDiskFull) {    final Exception e;    if (fakeDiskFull.getMessage() != null && fakeDiskFull.getMessage().startsWith("fake disk full")) {      e=new RuntimeException("test failed: IW checks aren't working and we are executing addIndexes");      e.addSuppressed(fakeDiskFull);    } else {      e=fakeDiskFull;    }    throw e;  }  w.close();  dir.close();  dir2.close();}  }
class C{  public SQLTimeoutException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public Blade basePackage(String basePackage){  applicationConfig.setBasePackage(basePackage);  return this;}  }
class C{  private Base64(){}  }
class C{  protected void executeCommandLine() throws CommandException {  if (log.isDebugEnabled()) {    log.debug("Executing: " + getLoggableCommandLine());  }  output=commandExecutor.executeCommand(this);  if (log.isTraceEnabled()) {    if (output.getExitValue() != 0) {      log.trace("ExitValue: " + output.getExitValue());    }    if (StringUtils.isNotEmpty(output.getStdout())) {      log.trace("Stdout: " + output.getStdout());    }    if (StringUtils.isNotEmpty(output.getStderr())) {      log.trace("Stderr: " + output.getStderr());    }  }}  }
class C{  public void testMergeOneServletIntoDocumentWithMultipleServlets() throws Exception {  String srcXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s2</servlet-name>"+ "    <servlet-class>sclass2</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s3</servlet-name>"+ "    <servlet-class>sclass3</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s4</servlet-name>"+ "    <servlet-class>sclass4</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  List<String> servletNames=WebXmlUtils.getServletNames(srcWebXml);  assertEquals(4,servletNames.size());  assertEquals("s1",servletNames.get(0));  assertEquals("s2",servletNames.get(1));  assertEquals("s3",servletNames.get(2));  assertEquals("s4",servletNames.get(3));}  }
class C{  void addKnownObject(ParseObject object){synchronized (mutex) {    knownObjects.add(object);  }}  }
class C{  int node(char opcode,int opdata){  ensure(RE.nodeSize);  instruction[lenInstruction]=opcode;  instruction[lenInstruction + RE.offsetOpdata]=(char)opdata;  instruction[lenInstruction + RE.offsetNext]=0;  lenInstruction+=RE.nodeSize;  return lenInstruction - RE.nodeSize;}  }
class C{  private static void saveTemplate(File parentDir,FileTemplateBase template,final String lineSeparator) throws IOException {  final File templateFile=new File(parentDir,encodeFileName(template.getName(),template.getExtension()));  FileOutputStream fileOutputStream;  try {    fileOutputStream=new FileOutputStream(templateFile);  } catch (  FileNotFoundException e) {    FileUtil.delete(templateFile);    fileOutputStream=new FileOutputStream(templateFile);  }  OutputStreamWriter outputStreamWriter=new OutputStreamWriter(fileOutputStream,CharsetToolkit.UTF8_CHARSET);  String content=template.getText();  if (!lineSeparator.equals("\n")) {    content=StringUtil.convertLineSeparators(content,lineSeparator);  }  outputStreamWriter.write(content);  outputStreamWriter.close();  fileOutputStream.close();}  }
class C{  public void testModPowException(){  byte aBytes[]={1,2,3,4,5,6,7};  byte eBytes[]={1,2,3,4,5};  byte mBytes[]={1,2,3};  int aSign=1;  int eSign=1;  int mSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger exp=new BigInteger(eSign,eBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  try {    aNumber.modPow(exp,modulus);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }  try {    BigInteger.ZERO.modPow(new BigInteger("-1"),new BigInteger("10"));    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public XBoolean(Boolean b){  super();  m_val=b.booleanValue();  setObject(b);}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof JobMediaSheets;}  }
class C{  public RedisKey refreshDomainData(AppContext ctx,DomainPK domainPk) throws ScopeException {  Project project=ProjectManager.INSTANCE.getProject(ctx,domainPk.getParent());  Domain domain=ProjectManager.INSTANCE.getDomain(ctx,domainPk);  Universe universe=new Universe(ctx,project);  Space space=universe.S(domain);  try {    Table table=space.getTable();    String uuid=universe.getTableUUID(table);    if (uuid != null) {      RedisCacheManager.getInstance().refresh(uuid);      table.refresh();    }  } catch (  ScopeException e) {    logger.error("failed to refresh table for domain " + domain,e);  }  RedisCacheManager.getInstance().refresh(domainPk.toUUID());  RedisKey key=RedisCacheManager.getInstance().getKey(domainPk.toUUID());  try {    DomainHierarchyManager.INSTANCE.invalidate(domainPk);  } catch (  InterruptedException e) {  }  return key;}  }
class C{  public static void addFilter(WebXml webXml,String filterName,String filterClass){  WebXmlTag tag=(WebXmlTag)webXml.getDescriptorType().getTagByName("filter");  Filter filter=new Filter(tag,filterName,filterClass);  webXml.addTag(filter);}  }
class C{  List<String> parseDatePattern(String pattern){  List<String> tokens=new Vector<String>();  String tmp=null;  int plen=pattern.length();  for (int i=0; i < plen; i++) {    char ch=pattern.charAt(i);    if (ch == EXPLICIT_LITERAL) {      int n=pattern.indexOf(EXPLICIT_LITERAL,i + 1);      if (n != -1) {        if (tmp != null) {          tokens.add(tmp.charAt(0) + tmp);          tmp=null;        }        tokens.add(LITERAL_LETTER + pattern.substring(i + 1,n));      }      i=n;      continue;    }    boolean isValid=PATTERN_LETTERS.indexOf(ch) != -1;    if (isValid == false) {      if (tmp != null) {        tokens.add(tmp.charAt(0) + tmp);        tmp=null;      }      int n;      for (n=i; n < plen; n++) {        ch=pattern.charAt(n);        if (PATTERN_LETTERS.indexOf(ch) != -1) {          break;        }        if (isAlpha(ch)) {          throw new IllegalArgumentException("Illegal pattern character: " + ch);        }      }      tokens.add(LITERAL_LETTER + pattern.substring(i,n));      i=n - 1;      continue;    }    if (tmp == null) {      tmp=String.valueOf(ch);      continue;    } else     if (ch == tmp.charAt(0)) {      tmp+=ch;    } else {      tokens.add(tmp.charAt(0) + tmp);      tmp=String.valueOf(ch);    }  }  if (tmp != null) {    tokens.add(tmp.charAt(0) + tmp);  }  return tokens;}  }
class C{  protected final void init(ProjectTypeDef type) throws ProjectTypeConstraintException {  initRecursively(type,type.getId());  if (!type.factoriesToOverride.isEmpty()) {    overrideFactories(type);  }  this.projectTypes.put(type.getId(),type);  LOG.debug("Project Type registered: " + type.getId());}  }
class C{  public static boolean isOptionScanningEnabled(Context context){  String optionScanKey=context.getString(R.string.option_scanning_key);  String scanPref=PreferenceManager.getDefaultSharedPreferences(context).getString(context.getString(R.string.pref_scanning_methods_key),context.getString(R.string.pref_scanning_methods_default));  return TextUtils.equals(scanPref,optionScanKey);}  }
class C{  private void removeGapsWithEdgeConcentration(int nodesLevel[]){  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;  int tempCnt=1;  for (int n=0; n < temp; n++) {    for (int i=0; i < temp2; i++) {      if (graphMatrix[n][i] > 0) {        if (nodesLevel[i] > nodesLevel[n] + 1) {          int tempLevel=nodesLevel[n];          boolean tempNodePresent=false;          int k=temp;          int tempnode=n;          while (tempLevel < nodesLevel[i] - 1) {            tempNodePresent=false;            for (; k < graphMatrix.length; k++) {              if (graphMatrix[tempnode][k] > 0) {                tempNodePresent=true;                break;              }            }            if (tempNodePresent) {              tempnode=k;              k=k + 1;              tempLevel++;            } else {              if (tempnode != n) {                tempnode=k - 1;              }              break;            }          }          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;          }          if (tempNodePresent) {            graphMatrix[tempnode][i]=graphMatrix[n][i];            graphMatrix[i][tempnode]=-graphMatrix[n][i];            graphMatrix[n][i]=0;            graphMatrix[i][n]=0;            continue;          }          int len=graphMatrix.length;          int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)];          int level=nodesLevel[tempnode] + 1;          copyMatrix(graphMatrix,tempMatrix);          String s1=new String("S" + tempCnt++);          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));          int temp3[]=new int[nodeLevels[level].length + 1];          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);          temp3[temp3.length - 1]=m_nodes.size() - 1;          nodeLevels[level]=temp3;          temp3=new int[m_nodes.size() + 1];          System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);          temp3[m_nodes.size() - 1]=level;          nodesLevel=temp3;          level++;          int m;          for (m=len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) {            String s2=new String("S" + tempCnt++);            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));            temp3=new int[nodeLevels[level].length + 1];            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);            temp3[temp3.length - 1]=m_nodes.size() - 1;            nodeLevels[level]=temp3;            temp3=new int[m_nodes.size() + 1];            System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);            temp3[m_nodes.size() - 1]=level;            nodesLevel=temp3;            level++;            tempMatrix[m][m + 1]=tempMatrix[n][i];            if (m > len) {              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];            }          }          tempMatrix[m][i]=tempMatrix[n][i];          tempMatrix[tempnode][len]=tempMatrix[n][i];          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];          tempMatrix[i][m]=-1 * tempMatrix[n][i];          if (m > len) {            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];          }          tempMatrix[n][i]=0;          tempMatrix[i][n]=0;          graphMatrix=tempMatrix;        } else {          graphMatrix[i][n]=-1 * graphMatrix[n][i];        }      }    }  }}  }
class C{  public CarrierSlaServiceImpl(final GenericDAO<CarrierSla,Long> genericDao){  super(genericDao);}  }
class C{  public static Builder builder(){  return new Builder(new ConnectResponse());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__OPERATOR:setOperator((AdditiveOperator)newValue);return;case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void flushExternalFileCache(){  existingExternalFiles=new HashSet<>();  existingExternalConfirmedFiles=new HashSet<>();}  }
class C{  public boolean addWorkflowStepsToRemoveBackendVolumes(Workflow workflow,String waitFor,StorageSystem storage,URI exportGroupURI,List<URI> blockObjectList) throws DeviceControllerException {  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);  boolean stepsAdded=false;  Map<String,ExportMask> exportMasks=new HashMap<String,ExportMask>();  Map<String,List<URI>> maskToVolumes=new HashMap<String,List<URI>>();  List<ExportMask> egExportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup);  for (  ExportMask mask : egExportMasks) {    if (mask == null || mask.getInactive()) {      continue;    }    exportMasks.put(mask.getId().toString(),mask);    maskToVolumes.put(mask.getId().toString(),new ArrayList<URI>());  }  for (  URI blockObjectURI : blockObjectList) {    for (    ExportMask mask : exportMasks.values()) {      if (mask.hasVolume(blockObjectURI)) {        maskToVolumes.get(mask.getId().toString()).add(blockObjectURI);      } else {        _log.info(String.format("ExportMask %s (%s) does not contain volume %s",mask.getMaskName(),mask.getId(),blockObjectURI));      }    }  }  String previousStepId=waitFor;  for (  ExportMask mask : exportMasks.values()) {    List<URI> volumes=maskToVolumes.get(mask.getId().toString());    if (volumes.isEmpty()) {      _log.info("No volumes to remove for Export Mask: " + mask.getId());      continue;    }    previousStepId=waitFor;    verifyExportMaskOnSystem(mask,storage);    if (mask.getCreatedBySystem()) {      _log.info(String.format("Generating unzoning step for ExportMask %s",mask.getMaskName()));      List<URI> maskURIs=Collections.singletonList(mask.getId());      List<NetworkZoningParam> zoningParams=NetworkZoningParam.convertExportMasksToNetworkZoningParam(exportGroup.getId(),maskURIs,_dbClient);      Workflow.Method zoneRemoveMethod=_networkDeviceController.zoneExportRemoveVolumesMethod(zoningParams,volumes);      previousStepId=workflow.createStep(ZONING_STEP,String.format("Removing zones for ExportMask %s",mask.getMaskName()),previousStepId,nullURI,"network-system",_networkDeviceController.getClass(),zoneRemoveMethod,zoneRemoveMethod,null);    } else {      _log.info(String.format("ExportMask %s not created by ViPR; no unzoning step",mask.getMaskName()));    }    String stepId=workflow.createStepId();    ExportTaskCompleter exportTaskCompleter;    exportTaskCompleter=new ExportMaskOnlyRemoveVolumeCompleter(exportGroup.getId(),mask.getId(),volumes,stepId);    VplexBackEndMaskingOrchestrator orca=getOrch(storage);    List<URI> initiatorURIs=new ArrayList<>();    if (mask.getInitiators() != null) {      initiatorURIs=new ArrayList<URI>(Collections2.transform(mask.getInitiators(),CommonTransformerFunctions.FCTN_STRING_TO_URI));    }    Workflow.Method removeVolumesMethod=orca.deleteOrRemoveVolumesFromExportMaskMethod(storage.getId(),exportGroup.getId(),mask.getId(),volumes,initiatorURIs,exportTaskCompleter);    workflow.createStep(EXPORT_STEP,String.format("Removing volume from ExportMask %s",mask.getMaskName()),previousStepId,storage.getId(),storage.getSystemType(),orca.getClass(),removeVolumesMethod,removeVolumesMethod,stepId);    _log.info(String.format("Generated remove volume from ExportMask %s for volumes %s",mask.getMaskName(),volumes));    stepsAdded=true;  }  return stepsAdded;}  }
class C{  public MultiPartFormOutputStream(final OutputStream os,final String boundary){  if (os == null) {    throw new IllegalArgumentException("Output stream is required.");  }  if (boundary == null || boundary.length() == 0) {    throw new IllegalArgumentException("Boundary stream is required.");  }  this.out=new DataOutputStream(os);  this.boundary=boundary;}  }
class C{  private void updateBfsPath(String[] list){  if (list == null) {    list=new String[0];  }  PodsConfig podsConfig=parseConfig(list);  if (podsConfig != null) {    updatePodConfig(podsConfig);  }  updatePods();  if (podsConfig != null && podsConfig.isBaseModified()) {    _podsServiceImpl.updateConfig();  }}  }
class C{  public MvpPresenter(MvpView mvpView){  this.mvpView=mvpView;  user=new User();}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  private void checkEvents(THLParallelReadQueue prq,int expectedEvents,int expectedCtrlEvents,long lastSeqno) throws InterruptedException {  int events=0;  int ctrlEvents=0;  boolean lastFrag=true;  while (prq.peek() != null) {    ReplEvent event=prq.take();    if (event instanceof ReplDBMSEvent) {      lastFrag=((ReplDBMSEvent)event).getLastFrag();    }    logger.info("Found event: seqno=" + event.getSeqno() + " lastFrag="+ lastFrag+ " type="+ event.getClass().getSimpleName());    Assert.assertTrue("Checking for increasing seqno: current seqno=" + event.getSeqno() + " last seqno="+ lastSeqno,event.getSeqno() >= lastSeqno);    lastSeqno=event.getSeqno();    if (event instanceof ReplDBMSEvent)     events++; else     if (event instanceof ReplControlEvent) {      ctrlEvents++;      Assert.assertEquals("Ensure control event generated after last frag: last seqno=" + lastSeqno + " lastFrag="+ lastFrag,true,lastFrag);    }  }  Assert.assertEquals("Check count of returned events",expectedEvents,events);  Assert.assertEquals("Check count of returned ctrl events",expectedCtrlEvents,ctrlEvents);}  }
class C{  public void mouseClicked(MouseEvent e){  if (AWTEventMonitor.mouseListener_private != null) {    AWTEventMonitor.mouseListener_private.mouseClicked(e);  }}  }
class C{  public Event doWaitTimeout(long timeout){  Event e=null;  long towait=0;  long endtime=-1;  boolean usetimeout=(timeout > 0);  if (usetimeout) {    endtime=System.nanoTime() + timeout * 1000 * 1000;  }  if (networkThread.getDone())   return null;  while (e == null) {    if (usetimeout) {      towait=(endtime - System.nanoTime());      if (towait <= 0) {        break;      }    } else {      if (timeout == 0) {        return latestEvents.poll();      }    }    try {      if (usetimeout) {        e=latestEvents.poll(towait,TimeUnit.NANOSECONDS);      } else {        e=latestEvents.take();      }    } catch (    InterruptedException e1) {    }    if (e != null && e.t == EType.KILLSENDER) {      return null;    }    if (networkThread.getDone())     return null;  }  return e;}  }
class C{  CompoundInterval copy(Register r){  CompoundInterval result=new CompoundInterval(r);  for (Iterator<BasicInterval> i=iterator(); i.hasNext(); ) {    BasicInterval b=i.next();    result.add(b);  }  return result;}  }
class C{  protected void engineInit(SecureRandom random){  this.random=random;}  }
class C{  public JsonPrimitive(Character c){  setValue(c);}  }
class C{  public CRLDistributionPointsExtension(boolean isCritical,List<DistributionPoint> distributionPoints) throws IOException {  this(PKIXExtensions.CRLDistributionPoints_Id,isCritical,distributionPoints,NAME);}  }
class C{  public byte[] toByteArray(final ArrayOfItemsSerDe<T> serDe){  return toByteArray(false,serDe);}  }
class C{  public static void touch(File file) throws IOException {  checkNotNull(file);  if (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis())) {    throw new IOException("Unable to update modification time of " + file);  }}  }
class C{  @SuppressWarnings("rawtypes") public ReplaceBOp(final IValueExpression<? extends IV> var,final IValueExpression<? extends IV> pattern,final IValueExpression<? extends IV> replacement,final IValueExpression<? extends IV> flags,final GlobalAnnotations globals){  this(new BOp[]{var,pattern,replacement,flags},anns(pattern,flags,globals));}  }
class C{  public static boolean isThreadingEnabled(){  try {    MBeanServer mbeanServer=new Registry().getMBeanServer();    ObjectName threadingOName=new ObjectName("java.lang:type=Threading");    Set<ObjectInstance> threading=mbeanServer.queryMBeans(threadingOName,null);    return threading != null && !threading.isEmpty();  } catch (  MalformedObjectNameException e) {    logger.trace("",e);    return false;  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenMisc[");  buffer.append("m_fdrName = ").append(m_fdrName);  buffer.append(", m_volListType = ").append(m_volListType);  buffer.append(", m_volListId = ").append(m_volListId);  buffer.append("]");  return buffer.toString();}  }
class C{  public ReflectorLoader(ClassLoader parent){  super(parent);  delegatationLoader=getClass().getClassLoader();}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public CZoomToAddressAction(final ZyGraph graph,final IAddress offset,final INaviModule module){  super(String.format("Zoom to instruction %s",offset.toHexString()));  m_graph=graph;  m_offset=offset;  m_module=module;}  }
class C{  public static int allSubDiagonal(int[][] m){  int[] count=new int[2];  count[0]=0;  count[1]=0;  for (int i=0, j=m.length - 1; i < m.length; i++, j--) {    count[m[i][j]]++;    if (count[0] == m.length)     return 0;    if (count[1] == m.length)     return 1;  }  return -1;}  }
class C{  public TemplateException(Throwable cause){  super(cause);}  }
class C{  private boolean olderDocumentsExists(String queryString,SolrQueryRequest req,SolrQueryResponse rsp) throws SyntaxError, IOException {  String defType=req.getParams().get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);  QParser queryParser=QParser.getParser(queryString,defType,req);  Query query=queryParser.getQuery();  TotalHitCountCollector totalHitCountCollector=new TotalHitCountCollector();  req.getSearcher().search(query,totalHitCountCollector);  rsp.add("query",String.format("%s:[* TO NOW-%s]",queryField,timeSeriesAge));  rsp.add("queryTechnical",queryString);  rsp.add("removedDocuments",totalHitCountCollector.getTotalHits());  return totalHitCountCollector.getTotalHits() != 0;}  }
class C{  public FBBlob(GDSHelper c,long blob_id,FBObjectListener.BlobListener blobListener){  this(c,false,blobListener);  this.blob_id=blob_id;}  }
class C{  public void updateTime(String columnName,java.sql.Time x) throws SQLException {  updateTime(findColumn(columnName),x);}  }
class C{  public TerminalRow(int columns,long style){  mColumns=columns;  mText=new char[(int)(SPARE_CAPACITY_FACTOR * columns)];  mStyle=new long[columns];  clear(style);}  }
class C{  public static String toString(double[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public void search(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().search();}  }
class C{  public LTMatrix(String mname,int nrows){  super(mname,nrows);}  }
class C{  public static ApiException wrapMessage(ResultStat stat,String message){  return new ApiException(stat,message);}  }
class C{  public static TextEditGroup findTextEditGroup(TextEditBasedChange change,TextEdit edit){  for (  TextEditGroup group : getTextEditGroups(change.getChangeGroups())) {    for (    TextEdit curEdit : group.getTextEdits()) {      if (edit == curEdit) {        return group;      }    }  }  return null;}  }
class C{  public void addUdocsExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  RelacionEntregaVO relacionEntrega=(RelacionEntregaVO)request.getSession().getAttribute(TransferenciasConstants.RELACION_KEY);  TipoTransferencia tipoTransferencia=TipoTransferencia.getTipoTransferencia(relacionEntrega.getTipotransferencia());  UnidadDocumentalForm udocForm=(UnidadDocumentalForm)form;  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  removeInTemporalSession(request,TransferenciasConstants.CONTADOR_UNIDADES_DOCUMENTALES);  removeInTemporalSession(request,TransferenciasConstants.ORDEN_UDOC);  removeInTemporalSession(request,TransferenciasConstants.POSICION_UDOC);  int unidadesDocRe=services.lookupGestionRelacionesBI().getCountUnidadesDocRe(relacionEntrega.getId());  setInTemporalSession(request,TransferenciasConstants.CONTADOR_UNIDADES_DOCUMENTALES,new Integer(unidadesDocRe));  String[] udocsSelected=udocForm.getSelectedUdoc();  InfoAsignacionUdocs infoAsignacionUdocs=(InfoAsignacionUdocs)getFromTemporalSession(request,TransferenciasConstants.ASIGNACION_UDOC2UI);  int uDocPos;  if (udocsSelected == null || udocsSelected.length == 0)   uDocPos=services.lookupGestionRelacionesBI().getCountUnidadesDocRe(relacionEntrega.getId()) + 1; else {    UnidadDocumentalVO uDoc=services.lookupGestionRelacionesBI().getUnidadDocumental(udocsSelected[0]);    uDocPos=infoAsignacionUdocs.getUdocsRelacion().indexOf(uDoc) + 1;    setInTemporalSession(request,TransferenciasConstants.ORDEN_UDOC,new Integer(uDoc.getOrden()));  }  setInTemporalSession(request,TransferenciasConstants.POSICION_UDOC,new Integer(uDocPos));  if (tipoTransferencia.equals(TipoTransferencia.ORDINARIA)) {    if (relacionEntrega.getIdprocedimiento() != null)     udocForm.setProcedimiento(relacionEntrega.getIdprocedimiento());    if (relacionEntrega.getIdseriedestino() != null)     udocForm.setSerie(relacionEntrega.getIdseriedestino());    listarExpedientesExecuteLogic(mappings,form,request,response);  } else {    GestionCuadroClasificacionBI cuadroBI=services.lookupGestionCuadroClasificacionBI();    String idDescriptor=relacionEntrega.getIddescrorgproductor();    if (!udocForm.getMantenerInformacion().equals("1") && (idDescriptor != null) && (!idDescriptor.equals(Constants.STRING_EMPTY))) {      GestionRelacionesEntregaBI relacionesBI=services.lookupGestionRelacionesBI();      OrganoProductorVO organoProductorVO=relacionesBI.getOrganoProductor(idDescriptor);      if (organoProductorVO != null) {        udocForm.setIdProductor(organoProductorVO.getId());        udocForm.setNombreProductor(organoProductorVO.getNombre());      } else {        GestionDescripcionBI descripcionBI=services.lookupGestionDescripcionBI();        DescriptorVO descriptorVO=descripcionBI.getDescriptor(idDescriptor);        if (descriptorVO != null) {          udocForm.setIdProductor(descriptorVO.getId());          udocForm.setNombreProductor(descriptorVO.getNombre());        }      }    }    setInTemporalSession(request,TransferenciasConstants.banderaEdicionCreacion,"C");    int subtipo=cuadroBI.getSubtipo(relacionEntrega.getIdNivelDocumental());    if (!udocForm.getMantenerInformacion().equals("1")) {      cargarDatosRevisionUdoc(request,services,udocForm,relacionEntrega.getId(),subtipo);    }    nuevaUnidadDocumentalExecuteLogic(mappings,request,subtipo);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_moreCode_1_();}  }
class C{  private boolean shouldInform(LocalClientInfo info){  long now=System.currentTimeMillis();  if (now < _nextAllowedTime)   return false;  Long allowed=BUG_TIMES.get(info.getParsedBug());  return allowed == null || now >= allowed.longValue();}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public boolean chainIsNotPinned(List<X509Certificate> chain){  for (  X509Certificate cert : chain) {    String fingerprint=getFingerprint(cert);    if (pinnedFingerprints.contains(fingerprint)) {      return false;    }  }  logPinFailure(chain);  return enforcing;}  }
class C{  public boolean isTopLevelPage(URL url){  String path=getPathWithoutSuffix(url).replaceAll("/+$","");  return path.length() == 0 && url.getQuery() == null;}  }
class C{  @Override public void write(BinaryRawWriterEx writer,Object obj,Throwable err){  if (err == null) {    writer.writeBoolean(false);    writer.writeObjectDetached(obj);  } else {    writer.writeBoolean(true);    PlatformUtils.writeError(err,writer);  }}  }
class C{  public OnLineStatistics(){  this(0,0,0,0,0);}  }
class C{  public static boolean hasGingerbread(){  return Build.VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD;}  }
class C{  public CoalesceExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  static public PVector add(PVector v1,PVector v2){  return add(v1,v2,null);}  }
class C{  static public PVector random2D(){  return random2D(null,null);}  }
class C{  public AppWidgetProviderInfo(Parcel in){  if (0 != in.readInt()) {    this.provider=new ComponentName(in);  }  this.minWidth=in.readInt();  this.minHeight=in.readInt();  this.minResizeWidth=in.readInt();  this.minResizeHeight=in.readInt();  this.updatePeriodMillis=in.readInt();  this.initialLayout=in.readInt();  this.initialKeyguardLayout=in.readInt();  if (0 != in.readInt()) {    this.configure=new ComponentName(in);  }  this.label=in.readString();  this.icon=in.readInt();  this.previewImage=in.readInt();  this.autoAdvanceViewId=in.readInt();  this.resizeMode=in.readInt();  this.widgetCategory=in.readInt();}  }
class C{  public BulkUserImportExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  private void checkAxisIndices(List indices){  if (indices == null) {    return;  }  int count=indices.size();  if (count == 0) {    throw new IllegalArgumentException("Empty list not permitted.");  }  HashSet set=new HashSet();  for (int i=0; i < count; i++) {    Object item=indices.get(i);    if (!(item instanceof Integer)) {      throw new IllegalArgumentException("Indices must be Integer instances.");    }    if (set.contains(item)) {      throw new IllegalArgumentException("Indices must be unique.");    }    set.add(item);  }}  }
class C{  public MapColorsFilter(){  this(0xffffffff,0xff000000);}  }
class C{  public static int loadShader(int type,String shaderCode){  int shader=GLES20.glCreateShader(type);  checkGlError("glCreateShader type=" + type);  GLES20.glShaderSource(shader,shaderCode);  GLES20.glCompileShader(shader);  int[] compiled=new int[1];  GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);  if (compiled[0] == 0) {    Log.e(TAG,"Could not compile shader " + type + ":");    Log.e(TAG," " + GLES20.glGetShaderInfoLog(shader));    GLES20.glDeleteShader(shader);    shader=0;  }  return shader;}  }
class C{  public final ContentProviderResult[] applyBatch(Uri uri,ArrayList<ContentProviderOperation> operations) throws OperationApplicationException {  ContentProviderClient contentProviderClient=null;  try {    contentProviderClient=mContentResolver.acquireContentProviderClient(uri);    return contentProviderClient.getLocalContentProvider().applyBatch(operations);  }  finally {    if (contentProviderClient != null) {      contentProviderClient.release();    }  }}  }
class C{  public long manhattanDistance(final Int2D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y);}  }
class C{  private static String hrefEncodeURI(String raw){  StringBuffer buf=null;  loop:   for (int i=0; i < raw.length(); i++) {    char c=raw.charAt(i);switch (c) {case '\'':case '"':case '<':case '>':      buf=new StringBuffer(raw.length() << 1);    break loop;}}if (buf == null) {return raw;}for (int i=0; i < raw.length(); i++) {char c=raw.charAt(i);switch (c) {case '"':  buf.append("%22");continue;case '\'':buf.append("%27");continue;case '<':buf.append("%3C");continue;case '>':buf.append("%3E");continue;default :buf.append(c);}}return buf.toString();}  }
class C{  public List<School> schools(){  return schools;}  }
class C{  private static String selectAssociatedFile(final Window parent){  final CFileChooser chooser=new CFileChooser();  chooser.setDialogTitle("Select the input file");  if (chooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {    return chooser.getSelectedFile().getAbsolutePath();  }  return null;}  }
class C{  public void testDocumentBoostOmitNorms() throws Exception {  XmlDoc xml=new XmlDoc();  xml.xml="<doc boost=\"3.0\">" + "<field name=\"id\">2</field>" + "<field name=\"title_stringNoNorms\">mytitle</field>"+ "</doc>";  assertNull(h.validateUpdate(add(xml,new String[0])));}  }
class C{  protected void assertSame(String regexp) throws IOException {  RegexpQuery smart=new RegexpQuery(new Term(fieldName,regexp),RegExp.NONE);  DumbRegexpQuery dumb=new DumbRegexpQuery(new Term(fieldName,regexp),RegExp.NONE);  TopDocs smartDocs=searcher1.search(smart,25);  TopDocs dumbDocs=searcher2.search(dumb,25);  CheckHits.checkEqual(smart,smartDocs.scoreDocs,dumbDocs.scoreDocs);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static long interleaveBits(long x,long y){  long c=0;  for (byte b=31; b >= 0; b--) {    c=(c << 1) | ((x >> b) & 1);    c=(c << 1) | ((y >> b) & 1);  }  return c;}  }
class C{  public void addCustomUser(User user){  tableModel.addUser(user);}  }
class C{  @Override protected void initialize(){  super.initialize();  m_PlotShapes=new ArrayList<Integer>();  m_PlotSizes=new ArrayList<Object>();  m_Classifier=null;  m_ClassIndex=-1;  m_Evaluation=null;  m_SaveForVisualization=true;  m_MinimumPlotSizeNumeric=ExplorerDefaults.getClassifierErrorsMinimumPlotSizeNumeric();  m_MaximumPlotSizeNumeric=ExplorerDefaults.getClassifierErrorsMaximumPlotSizeNumeric();}  }
class C{  public OrderAssemblerImpl(final OrderNumberGenerator orderNumberGenerator,final GenericDAO genericDAO,final CustomerService customerService,final ShopService shopService,final ProductSkuService productSkuService,final OrderAddressFormatter addressFormatter,final PromotionCouponService promotionCouponService,final AddressService addressService){  this.promotionCouponService=promotionCouponService;  this.entityFactory=genericDAO.getEntityFactory();  this.orderNumberGenerator=orderNumberGenerator;  this.customerService=customerService;  this.addressService=addressService;  this.shopService=shopService;  this.productSkuService=productSkuService;  this.addressFormatter=addressFormatter;}  }
class C{  protected void success(){}  }
class C{  public Class<V> valueType(){  return valueType;}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  private void checkForFinishActivity(){  String url=getIntent().getStringExtra(ARG_URL);  if (!webView.canGoBack() && (url.startsWith("https://www.steamgifts.com/go/") || url.startsWith("https://www.steamgifts.com/user/id/")))   finish();}  }
class C{  private void openConnector() throws ReplicatorException, InterruptedException, ConfigurationException {  ConnectUriManager uriManager=new ConnectUriManager(uriList);  logger.info("Opening connection to master: " + uriManager.toString() + " preferred role="+ preferredRole+ " preferred role timeout="+ preferredRoleTimeout);  String currentUri=null;  long rollTimeoutMillis=System.currentTimeMillis() + (preferredRoleTimeout * 1000);  long iterations=0;  long retryIntervalMillis=500;  long nextIntervalStartMillis=System.currentTimeMillis() + retryIntervalMillis;  for (; ; ) {    try {      try {        currentUri=uriManager.next();        conn=(Connector)PluginLoader.load(pluginContext.getReplicatorProperties().getString(ReplicatorConf.THL_PROTOCOL,ReplicatorConf.THL_PROTOCOL_DEFAULT,false));        conn.setURI(currentUri);        conn.setResetPeriod(resetPeriod);        conn.setHeartbeatMillis(heartbeatMillis);        conn.setLastEventId(this.lastEventId);        conn.setRemoteLogin(remoteLogin);        conn.setRemotePassword(remotePassword);        if (this.lastEvent == null || this.checkSerialization == false) {          conn.setLastSeqno(-1);          conn.setLastEpochNumber(-1);        } else {          conn.setLastSeqno(lastEvent.getSeqno());          conn.setLastEpochNumber(lastEvent.getEpochNumber());        }        conn.configure(pluginContext);        conn.prepare(pluginContext);      } catch (      ReplicatorException e) {        throw new THLException("Error while initializing plug-in ",e);      }      conn.connect();      String masterRole=conn.getServerCapability(Protocol.ROLE);      if (preferredRole == null) {        logger.info("Connection is accepted");        break;      } else       if (preferredRole.equals(masterRole)) {        logger.info("Connection is accepted by role match against master: preferredRole=" + preferredRole + " masterRole="+ masterRole);        break;      } else       if (uriManager.getIterations() > 0 && System.currentTimeMillis() > rollTimeoutMillis) {        logger.info("Connection is accepted after roll search timed out: preferredRole=" + preferredRole + " masterRole="+ masterRole+ " iterations="+ uriManager.getIterations());        break;      } else {        closeConnector();      }    } catch (    SocketTimeoutException e) {      timeoutCount++;      prepareRetry(uriManager);    }catch (    IOException e) {      prepareRetry(uriManager);    } finally {      if (conn == null && uriManager.getIterations() > iterations) {        if (logger.isDebugEnabled()) {          logger.debug("Unable to find acceptable connection; new round: iterations=" + iterations + " retryInterval="+ (retryIntervalMillis / 1000));        }        iterations=uriManager.getIterations();        long sleepMillis=nextIntervalStartMillis - System.currentTimeMillis();        if (sleepMillis > 0)         Thread.sleep(sleepMillis);        if (retryIntervalMillis < (this.retryInterval * 1000)) {          retryIntervalMillis=Math.min(retryInterval * 1000,retryIntervalMillis * 2);        }        nextIntervalStartMillis=System.currentTimeMillis() + retryIntervalMillis;      }    }  }  pluginContext.setPipelineSource(currentUri);  logger.info("Connected to master on uri=" + currentUri + " after "+ attemptCount+ " retries");  attemptCount=0;  timeoutCount=0;  pluginContext.getEventDispatcher().put(new InSequenceNotification());}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1) private Response<BitmapDrawable> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    if (Utils.hasGingerbreadMR1()) {      decodeOptions.inPreferQualityOverSpeed=PREFER_QUALITY_OVER_SPEED;    }    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    BitmapDrawable drawable;    if (Utils.hasHoneycomb()) {      drawable=new BitmapDrawable(mResources,bitmap);    } else {      drawable=new RecyclingBitmapDrawable(mResources,bitmap);    }    return Response.success(drawable,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  private void validate(Detail detail) throws Exception {  Class type=detail.getType();  builder.commit(type);  builder.validate(type);}  }
class C{  public GF2nElement squareRoot(){  GF2nONBElement result=new GF2nONBElement(this);  result.squareRootThis();  return result;}  }
class C{  public boolean updateTopicList(String topicName){  return mqttMgr.updateComboBoxList(topic,topicName);}  }
class C{  public void addTopic(final String[] words){  String word;  for (  final String w : words) {    word=w.toLowerCase();    if (word.length() > 2 && "http_html_php_ftp_www_com_org_net_gov_edu_index_home_page_for_usage_the_and_zum_der_die_das_und_the_zur_bzw_mit_blog_wiki_aus_bei_off".indexOf(word) < 0 && !this.query.getQueryGoal().containsInclude(word) && lettermatch.matcher(word).matches() && !Switchboard.badwords.contains(word) && !Switchboard.stopwords.contains(word)) {      this.ref.inc(word);    }  }}  }
class C{  public Class loadClass(final String className,final boolean resolveIt) throws ClassNotFoundException {  Class result;synchronized (this) {    logln(">>" + threadName() + ">load "+ className);    loadedClasses.addElement(className);    result=findLoadedClass(className);    if (result == null) {      final byte[] classData=getClassData(className);      if (classData == null) {        logln("Loading system class: " + className);        result=loadFromSystem(className);      } else {        result=defineClass(classData,0,classData.length);        if (result == null) {          result=loadFromSystem(className);        }      }      if ((result != null) && resolveIt) {        resolveClass(result);      }    }  }  for (int i=classesToWaitFor.length - 1; i >= 0; --i) {    if (className.equals(classesToWaitFor[i])) {      rendezvous();      break;    }  }  logln("<<" + threadName() + "<load "+ className);  return result;}  }
class C{  @Override public boolean onJsPrompt(WebView view,String url,String message,String defaultValue,JsPromptResult result){  super.onJsPrompt(view,url,message,defaultValue,result);  result.confirm(JsBridge.callJava(view,message));  return true;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"C_OrderLine"));    return false;  }  if (getC_BPartner_ID() == 0 || getC_BPartner_Location_ID() == 0 || getM_Warehouse_ID() == 0 || getC_Currency_ID() == 0)   setOrder(getParent());  if (m_M_PriceList_ID == 0)   setHeaderInfo(getParent());  if (!newRecord && (is_ValueChanged("M_Product_ID") || is_ValueChanged("M_Warehouse_ID"))) {    if (!canChangeWarehouse())     return false;  }  if (getC_Charge_ID() != 0 && getM_Product_ID() != 0)   setM_Product_ID(0);  if (getM_Product_ID() == 0)   setM_AttributeSetInstance_ID(0); else {    if (m_productPrice == null && Env.ZERO.compareTo(getPriceActual()) == 0 && Env.ZERO.compareTo(getPriceList()) == 0)     setPrice();    if (m_productPrice == null)     getProductPricing(m_M_PriceList_ID);    if (!m_productPrice.isCalculated()) {      throw new ProductNotOnPriceListException(m_productPrice,getLine());    }  }  if (getC_UOM_ID() == 0 && (getM_Product_ID() != 0 || getPriceEntered().compareTo(Env.ZERO) != 0 || getC_Charge_ID() != 0)) {    int C_UOM_ID=MUOM.getDefault_UOM_ID(getCtx());    if (C_UOM_ID > 0)     setC_UOM_ID(C_UOM_ID);  }  if (newRecord || is_ValueChanged("QtyEntered"))   setQtyEntered(getQtyEntered());  if (newRecord || is_ValueChanged("QtyOrdered"))   setQtyOrdered(getQtyOrdered());  if (m_IsSOTrx && getM_AttributeSetInstance_ID() != 0 && (newRecord || is_ValueChanged("M_Product_ID") || is_ValueChanged("M_AttributeSetInstance_ID")|| is_ValueChanged("M_Warehouse_ID"))) {    MProduct product=getProduct();    if (product.isStocked()) {      int M_AttributeSet_ID=product.getM_AttributeSet_ID();      boolean isInstance=M_AttributeSet_ID != 0;      if (isInstance) {        MAttributeSet mas=MAttributeSet.get(getCtx(),M_AttributeSet_ID);        isInstance=mas.isInstanceAttribute();      }      if (isInstance) {        MStorage[] storages=MStorage.getWarehouse(getCtx(),getM_Warehouse_ID(),getM_Product_ID(),getM_AttributeSetInstance_ID(),M_AttributeSet_ID,false,null,true,get_TrxName());        BigDecimal qty=Env.ZERO;        for (int i=0; i < storages.length; i++) {          if (storages[i].getM_AttributeSetInstance_ID() == getM_AttributeSetInstance_ID())           qty=qty.add(storages[i].getQtyOnHand());        }        if (getQtyOrdered().compareTo(qty) > 0) {          log.warning("Qty - Stock=" + qty + ", Ordered="+ getQtyOrdered());          log.saveError("QtyInsufficient","=" + qty);          return false;        }      }    }  }  if (Env.ZERO.compareTo(getFreightAmt()) != 0)   setFreightAmt(Env.ZERO);  if (getC_Tax_ID() == 0)   setTax();  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 FROM C_OrderLine WHERE C_Order_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getC_Order_ID());    setLine(ii);  }  setLineNetAmt();  setDiscount();  return true;}  }
class C{  public void copyInheritedValuesFromParent(final FormObject parentObj){  if (parentObj == null) {    return;  }  if (pageNumber == -1 && parentObj.pageNumber != -1) {    pageNumber=parentObj.pageNumber;  }  if (rawAS == null) {    rawAS=parentObj.rawAS;  }  if (rawDA == null) {    rawDA=parentObj.rawDA;  }  if (rawDV == null) {    rawDV=parentObj.rawDV;  }  if (rawJS == null) {    rawJS=parentObj.rawJS;  }  if (rawNM == null) {    rawNM=parentObj.rawNM;  }  if (rawTM == null) {    rawTM=parentObj.rawTM;  }  if (rawTU == null) {    rawTU=parentObj.rawTU;  }  if (rawV == null) {    rawV=parentObj.rawV;  }  if (parentObj.T == null && parentObj.rawT != null) {    parentObj.T=StringUtils.getTextString(parentObj.rawT,false);  }  if (parentObj.T != null) {    if (T == null && rawT != null) {      T=StringUtils.getTextString(rawT,false);    }    if (T != null && !T.contains(parentObj.T)) {      T=parentObj.T + '.' + T;      rawT=StringUtils.toBytes(T);    }  }  if (A == null) {    A=parentObj.A;  }  if (AA == null) {    AA=parentObj.AA;  }  if (AP == null) {    AP=parentObj.AP;  }  if (D == null) {    D=parentObj.D;  }  if (OC == null) {    OC=parentObj.OC;  }  if (C == null) {    C=(parentObj.C == null) ? null : parentObj.C.clone();  }  if (QuadPoints == null) {    QuadPoints=(parentObj.QuadPoints == null) ? null : parentObj.QuadPoints.clone();  }  if (InkList == null) {    InkList=(parentObj.InkList == null) ? null : parentObj.InkList.clone();  }  if (Rect == null) {    Rect=(parentObj.Rect == null) ? null : parentObj.Rect.clone();  }  if (F == -1) {    F=parentObj.F;  }  if (Ff == -1) {    Ff=parentObj.Ff;  }  if (Q == -1) {    Q=parentObj.Q;  }  if (MaxLen == -1) {    MaxLen=parentObj.MaxLen;  }  if (FT == -1) {    FT=parentObj.FT;  }  if (TI == -1) {    TI=parentObj.TI;  }  if (flags == null) {    flags=(parentObj.flags == null) ? null : parentObj.flags.clone();  }  if (Opt == null) {    Opt=(parentObj.Opt == null) ? null : parentObj.Opt.clone();  }  if (CO == null) {    CO=(parentObj.CO == null) ? null : parentObj.CO.clone();  }  if (textString == null) {    textString=parentObj.textString;  }  if (OptString == null) {    OptString=parentObj.OptString;  }  if (selectedItem == null) {    selectedItem=parentObj.selectedItem;  }}  }
class C{  void clear(){  setTOP(false);  size=0;  numbers=null;}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case N4JSPackage.N4_GETTER_DECLARATION__OWNER:    return eInternalContainer().eInverseRemove(this,N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW,N4ClassifierDefinition.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public Token createToken(final char[] line,final int beg,final int end,final int startOffset,final int type){  Token token=tokenList[currentFreeToken];  token.set(line,beg,end,startOffset,type);  currentFreeToken++;  if (currentFreeToken == size)   augmentTokenList();  return token;}  }
class C{  public boolean isEnabled(){  return cmember.isEnabled();}  }
class C{  public static void fill(Object[] array,int start,int end,Object value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public Agent(){  this(Level.INFO,null);}  }
class C{  private InstrumentationClassFinder buildClasspathClassLoader(){  final StringBuffer classPathBuffer=new StringBuffer();  final Project project=getProject();  final Path cp=new Path(project);  appendPath(cp,getBootclasspath());  cp.setLocation(getDestdir().getAbsoluteFile());  appendPath(cp,getClasspath());  appendPath(cp,getSourcepath());  appendPath(cp,getSrcdir());  if (getIncludeantruntime()) {    cp.addExisting(cp.concatSystemClasspath("last"));  }  boolean shouldInclude=getIncludejavaruntime();  if (!shouldInclude) {    if (project != null) {      final String propValue=project.getProperty(PROPERTY_INSTRUMENTATION_INCLUDE_JAVA_RUNTIME);      shouldInclude=!("false".equalsIgnoreCase(propValue) || "no".equalsIgnoreCase(propValue));    } else {      shouldInclude=true;    }  }  if (shouldInclude) {    cp.addJavaRuntime();  }  cp.addExtdirs(getExtdirs());  final String[] pathElements=cp.list();  for (int i=0; i < pathElements.length; i++) {    final String pathElement=pathElements[i];    classPathBuffer.append(File.pathSeparator);    classPathBuffer.append(pathElement);  }  final String classPath=classPathBuffer.toString();  log("classpath=" + classPath,Project.MSG_VERBOSE);  try {    return createInstrumentationClassFinder(classPath);  } catch (  MalformedURLException e) {    fireError(e.getMessage());    return null;  }}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  public double predict_char_prob(int n){  return predict_char_prob("<s>",n);}  }
class C{  public static byte[] values(Byte[] array){  byte[] dest=new byte[array.length];  for (int i=0; i < array.length; i++) {    Byte v=array[i];    if (v != null) {      dest[i]=v.byteValue();    }  }  return dest;}  }
class C{  protected PDFPaint(int p){  this.mainPaint=new Paint();  mainPaint.setColor(p);  mainPaint.setAntiAlias(s_doAntiAlias);}  }
class C{  protected double computeDetailThreshold(){  double detailThreshold=20;  double rangeDetailThreshold=40;  detailThreshold+=this.getDetailHint() * rangeDetailThreshold;  return detailThreshold;}  }
class C{  public static boolean isSet(String property){  return property != null && !property.isEmpty();}  }
class C{  public CharSequence loadLabel(PackageManager pm){  return mReceiver.loadLabel(pm);}  }
class C{  public void disableCurlLogging(){  curlConfiguration=null;}  }
class C{  public boolean shouldTickerStart(){  if (!tickerEnabled) {    return false;  }  Style style=getStyle();  int txtW=style.getFont().stringWidth(getText());  int textSpaceW=getAvaliableSpaceForText();  return txtW > textSpaceW && textSpaceW > 0;}  }
class C{  public OverarchingLocation(){  this.services=new HashMap<String,Locations>();}  }
class C{  private void placer(Node r,int l){  Edge e;  l++;  m_levelNode[l]++;  r.setCenter(m_levelNode[l] * m_levels[l]);  r.setTop(l * m_yRatio);  for (int noa=0; (e=r.getChild(noa)) != null && r.getCVisible(); noa++) {    placer(e.getTarget(),l);  }}  }
class C{  boolean expansionFilesDelivered(){  for (  XAPKFile xf : xAPKS) {    String fileName=Helpers.getExpansionAPKFileName(this,xf.mIsMain,xf.mFileVersion);    if (!Helpers.doesFileExist(this,fileName,xf.mFileSize,false))     return false;  }  return true;}  }
class C{  public static int readHexInt(HashMap<String,? extends Object> map,String key,int defaultValue){  Object v=map.get(key);  if (v == null) {    return defaultValue;  } else   if (v instanceof Integer) {    return (Integer)v;  }  try {    return (int)Long.parseLong((String)v,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",v,e);  }}  }
class C{  public static void connect(){  if (++refCount == 1) {    codeScanner=new VelocityCodeScanner();    stringScanner=new VelocityStringScanner();    doubleClickStrategy=new VelocityDoubleClickStrategy();  }}  }
class C{  public PrincipalId addPersonUser(String tenantName,String userName,PersonDetail detail,byte[] hashedPassword,String hashingAlgorithm) throws Exception {  return getService().addUser(tenantName,userName,detail,hashedPassword,hashingAlgorithm,this.getServiceContext());}  }
class C{  public static double[][] convertToDoubleArray(int[][] vals){  double[][] ret=new double[vals.length][];  for (int i=0; i < vals.length; i++) {    int[] valsi=vals[i];    double[] reti=ret[i]=new double[valsi.length];    for (int j=0; j < valsi.length; j++)     reti[j]=valsi[j];  }  return ret;}  }
class C{  public Word(String f,int start,int end){  this(f,null,null,start,end);}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  public SkuAttributesSectionView(final String id,Pair<String,List<Pair<String,String>>> headKeyValues){  super(id);  this.headKeyValues=headKeyValues;}  }
class C{  private ArrayList<LinkedDimGroup>[] divideIntoLinkedGroups(boolean isRows){  boolean fromEnd=!(isRows ? lc.isTopToBottom() : LayoutUtil.isLeftToRight(lc,container));  TreeSet<Integer> primIndexes=isRows ? rowIndexes : colIndexes;  TreeSet<Integer> secIndexes=isRows ? colIndexes : rowIndexes;  DimConstraint[] primDCs=(isRows ? rowConstr : colConstr).getConstaints();  @SuppressWarnings("unchecked") ArrayList<LinkedDimGroup>[] groupLists=new ArrayList[primIndexes.size()];  int gIx=0;  for (  int i : primIndexes) {    DimConstraint dc;    if (i >= -MAX_GRID && i <= MAX_GRID) {      dc=primDCs[i >= primDCs.length ? primDCs.length - 1 : i];    } else {      dc=DOCK_DIM_CONSTRAINT;    }    ArrayList<LinkedDimGroup> groupList=new ArrayList<LinkedDimGroup>(4);    groupLists[gIx++]=groupList;    for (    Integer ix : secIndexes) {      Cell cell=isRows ? getCell(i,ix) : getCell(ix,i);      if (cell == null || cell.compWraps.size() == 0) {        continue;      }      int span=(isRows ? cell.spany : cell.spanx);      if (span > 1) {        span=convertSpanToSparseGrid(i,span,primIndexes);      }      boolean isPar=(cell.flowx == isRows);      if ((isPar == false && cell.compWraps.size() > 1) || span > 1) {        int linkType=isPar ? LinkedDimGroup.TYPE_PARALLEL : LinkedDimGroup.TYPE_SERIAL;        LinkedDimGroup lg=new LinkedDimGroup("p," + ix,span,linkType,!isRows,fromEnd);        lg.setCompWraps(cell.compWraps);        groupList.add(lg);      } else {        for (int cwIx=0; cwIx < cell.compWraps.size(); cwIx++) {          CompWrap cw=cell.compWraps.get(cwIx);          boolean rowBaselineAlign=(isRows && lc.isTopToBottom() && dc.getAlignOrDefault(!isRows) == UnitValue.BASELINE_IDENTITY);          boolean isBaseline=isRows && cw.isBaselineAlign(rowBaselineAlign);          String linkCtx=isBaseline ? "baseline" : null;          boolean foundList=false;          for (int glIx=0, lastGl=groupList.size() - 1; glIx <= lastGl; glIx++) {            LinkedDimGroup group=groupList.get(glIx);            if (group.linkCtx == linkCtx || linkCtx != null && linkCtx.equals(group.linkCtx)) {              group.addCompWrap(cw);              foundList=true;              break;            }          }          if (foundList == false) {            int linkType=isBaseline ? LinkedDimGroup.TYPE_BASELINE : LinkedDimGroup.TYPE_PARALLEL;            LinkedDimGroup lg=new LinkedDimGroup(linkCtx,1,linkType,!isRows,fromEnd);            lg.addCompWrap(cw);            groupList.add(lg);          }        }      }    }  }  return groupLists;}  }
class C{  public void removeAllAddresses(){  addresses.clear();}  }
class C{  public static int max(int... values){  int maxValue=Integer.MIN_VALUE;  for (  int i : values) {    if (i > maxValue) {      maxValue=i;    }  }  return maxValue;}  }
class C{  public T caseRegularExpressionLiteral(RegularExpressionLiteral object){  return null;}  }
class C{  private String commandAdd(String[] parameters){  if (parameters.length == 1) {    String name=parameters[0].trim();    if (add(name,"") == null) {      return "Added '" + name + "'.";    }    return "Didn't add '" + name + "' (already present).";  } else   if (parameters.length == 2) {    String name=parameters[0].trim();    String categoriesString=parameters[1].trim();    Set<String> categories=getCategoriesFromString(categoriesString);    AddressbookEntry previous=get(name);    clearSomewhatUniqueCategories(categories);    AddressbookEntry result=add(name,categories);    if (result == null) {      return "Added '" + name + "' with categories "+ "'"+ categoriesString+ "'.";    }    Set<String> resultCategories=result.getCategories();    if (previous.getCategories().equals(resultCategories)) {      return "Didn't change '" + name + "', categories already "+ categoriesToString(resultCategories)+ ".";    }    return "Changed '" + name + "', categories now "+ categoriesToString(result.getCategories())+ ".";  } else {    return "Add: Invalid number of parameters.";  }}  }
class C{  void preModify(HashMapEntry<K,V> e){}  }
class C{  public ClassLoader compile(Type... types){  ClassFilePreprocessor[] cfps=this.postprocessors.toArray(new ClassFilePreprocessor[0]);  DirectedClassLoader dcl=new DirectedClassLoader(cfps);  for (  Type t : types) {    for (    Map.Entry<String,File> each : compileHierarchy(t).entrySet()) {      dcl.setLocationFor(each.getKey(),each.getValue());    }  }  return dcl;}  }
class C{  protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){  ButtonModel model=menuItem.getModel();  if (model.isArmed())   super.paintBackground(g,menuItem,bgColor); else {    CompiereColor bg=CompiereColor.getDefaultBackground();    bg.paint(g,menuItem);  }}  }
class C{  private void init(){  if (params.fastFp) {    fp=new IntegerPolynomial(params.N);    fp.coeffs[0]=1;  } else {    fp=t.toIntegerPolynomial().invertF3();  }}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  private boolean processEMailParameter(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String email=WebUtil.getParameter(request,"EMail");  if (email == null || email.length() == 0)   return false;  int AD_Client_ID=-1;  try {    AD_Client_ID=Integer.parseInt(email);  } catch (  Exception e) {    log.warning("Parsing: " + email + " - "+ e.toString());  }  if (AD_Client_ID < 0) {    m_message=new p();    m_message.addElement("No EMail: " + email);    return false;  }  MClient client=MClient.get(new Properties(),AD_Client_ID);  log.info("Test: " + client);  m_message=new p();  m_message.addElement(client.getName() + ": " + client.testEMail());  return false;}  }
class C{  public static boolean textContainsQName(String text,String qname){  int index=text.indexOf(qname);  while (index >= 0) {    if ((index == 0 || !isQNameCharacter(text.charAt(index - 1))) && (index + qname.length() == text.length() || !isQNameCharacter(text.charAt(index + qname.length())))) {      return true;    }    index=text.indexOf(qname,index + 1);  }  return false;}  }
class C{  private long acquireRead(boolean interruptible,long deadline){  WNode node=null, p;  for (int spins=-1; ; ) {    WNode h;    if ((h=whead) == (p=wtail)) {      for (long m, s, ns; ; ) {        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L))         return ns; else         if (m >= WBIT) {          if (spins > 0) {            if (ThreadLocalRandom.current().nextInt() >= 0)             --spins;          } else {            if (spins == 0) {              WNode nh=whead, np=wtail;              if ((nh == h && np == p) || (h=nh) != (p=np))               break;            }            spins=SPINS;          }        }      }    }    if (p == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(RMODE,p); else     if (h == p || p.mode != RMODE) {      if (node.prev != p)       node.prev=p; else       if (U.compareAndSwapObject(this,WTAIL,p,node)) {        p.next=node;        break;      }    } else     if (!U.compareAndSwapObject(p,WCOWAIT,node.cowait=p.cowait,node))     node.cowait=null; else {      for (; ; ) {        WNode pp, c;        Thread w;        if ((h=whead) != null && (c=h.cowait) != null && U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);        if (h == (pp=p.prev) || h == p || pp == null) {          long m, s, ns;          do {            if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L))             return ns;          } while (m < WBIT);        }        if (whead == h && p.prev == pp) {          long time;          if (pp == null || h == p || p.status > 0) {            node=null;            break;          }          if (deadline == 0L)           time=0L; else           if ((time=deadline - System.nanoTime()) <= 0L)           return cancelWaiter(node,p,false);          Thread wt=Thread.currentThread();          U.putObject(wt,PARKBLOCKER,this);          node.thread=wt;          if ((h != pp || (state & ABITS) == WBIT) && whead == h && p.prev == pp)           U.park(false,time);          node.thread=null;          U.putObject(wt,PARKBLOCKER,null);          if (interruptible && Thread.interrupted())           return cancelWaiter(node,p,true);        }      }    }  }  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long m, s, ns;        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L)) {          WNode c;          Thread w;          whead=node;          node.prev=null;          while ((c=node.cowait) != null) {            if (U.compareAndSwapObject(node,WCOWAIT,c,c.cowait) && (w=c.thread) != null)             U.unpark(w);          }          return ns;        } else         if (m >= WBIT && ThreadLocalRandom.current().nextInt() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) == WBIT) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);      }    }  }}  }
class C{  public static void main(String[] args){  new NamedEntityTagger(args);}  }
class C{  public static void checkSpeedTestResult(final SpeedTestSocket socket,final Waiter waiter,final long packetSize,final long packetSizeExpected,final BigDecimal transferRateBps,final BigDecimal transferRateOps,final boolean download,final boolean isRepeat){  SpeedTestReport report;  if (download) {    report=socket.getLiveDownloadReport();  } else {    report=socket.getLiveUploadReport();  }  testReportNotEmpty(waiter,report,packetSize,false,isRepeat);  if (!isRepeat) {    waiter.assertTrue(report.getProgressPercent() == 100);    waiter.assertEquals(packetSize,packetSizeExpected);  }  waiter.assertNotNull(transferRateBps);  waiter.assertNotNull(transferRateOps);  waiter.assertTrue(transferRateBps.intValue() > 0);  waiter.assertTrue(transferRateBps.intValue() > 0);  final float check=transferRateOps.multiply(new BigDecimal("8")).floatValue();  waiter.assertTrue(((transferRateBps.floatValue() + 0.1) >= check) && ((transferRateBps.floatValue() - 0.1) <= check));  if (!isRepeat) {    waiter.assertEquals(report.getTransferRateBit(),transferRateBps);    waiter.assertEquals(report.getTransferRateOctet(),transferRateOps);    waiter.assertEquals(report.getTotalPacketSize(),packetSize);    waiter.assertEquals(report.getTemporaryPacketSize(),packetSize);  }}  }
class C{  public WinInfraredReceive(){  super();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void updateScreen(){  ipBox.updateCursorCounter();  ((GuiButton)buttonList.get(0)).displayString=state.isRunning() ? "Cancel" : "Search";  ipBox.setEnabled(!state.isRunning());  maxThreadsBox.setEnabled(!state.isRunning());  ((GuiButton)buttonList.get(0)).enabled=MiscUtils.isInteger(maxThreadsBox.getText()) && !ipBox.getText().isEmpty();}  }
class C{  protected void dumpService(){synchronized (this.grantTokens) {    StringBuffer buffer=new StringBuffer();    buffer.append("DLockGrantor.dumpService() for ").append(this);    buffer.append("\n").append(this.grantTokens.size()).append(" grantTokens\n");    for (Iterator iter=this.grantTokens.entrySet().iterator(); iter.hasNext(); ) {      Map.Entry entry=(Map.Entry)iter.next();      buffer.append("    ").append(entry.getKey()).append(": ");      DLockGrantToken token=(DLockGrantToken)entry.getValue();      buffer.append(token.toString()).append("\n");    }    logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.TESTING,buffer));    logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.TESTING,"\nreadLockCountMap:\n" + readLockCountMap));  }}  }
class C{  public void processXForm(String xml,String pathName,boolean propagateErrors,HttpServletRequest request) throws Exception {  String xmlOriginal=xml;  Patient patient=null;  try {    Document doc=db.parse(IOUtils.toInputStream(xml,XformConstants.DEFAULT_CHARACTER_ENCODING));    Element root=doc.getDocumentElement();    if (DOMUtil.isPatientDoc(doc)) {      patient=saveNewPatient(root,getCreator(doc),propagateErrors,request);      if (patient == null)       saveFormInError(xml,pathName,null); else {        saveNewPatientEncounterIfAny(patient,root,pathName,propagateErrors);        if (!isRemoteFormEntry()) {          saveFormInArchive(xml,pathName);        }      }    } else     if (DOMUtil.isEncounterDoc(doc))     submitXForm(doc,xml,pathName,true,propagateErrors); else {      NodeList list=doc.getDocumentElement().getChildNodes();      for (int index=0; index < list.getLength(); index++) {        Node node=list.item(index);        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;        if (DOMUtil.isPatientElementDoc((Element)node)) {          patient=saveNewPatient((Element)node,getCreator(doc),propagateErrors,request);          if (patient == null) {            saveFormInError(xml,pathName,null);            return;          }        } else {          setNewPatientId((Element)node,patient.getPatientId());          Document encounterDoc=createNewDocFromNode(db,(Element)node);          xml=XformsUtil.doc2String(encounterDoc);          submitXForm(encounterDoc,xml,pathName,false,propagateErrors);        }      }      saveFormInArchive(xmlOriginal,pathName);    }  } catch (  Exception e) {    log.error(e.getMessage(),e);    if (patient != null)     Context.getPatientService().purgePatient(patient);    saveFormInError(xmlOriginal,pathName,null);    throw e;  }}  }
class C{  public SharedObjectMessage(String name,int version,boolean persistent){  this(null,name,version,persistent);}  }
class C{  public Jerry end(){  return parent;}  }
class C{  @Transactional public void save(Check check){  if (isRangeCheck(check)) {    int low=getLowRange(check);    int high=getHighRange(check);    String originalName=check.getName();    String originalUrl=check.getUrl();    for (int i=low; i <= high; i++) {      check.setName(originalName);      check.setUrl(originalUrl);      replaceRange(check,i,low,high);      check.setId(0);      entityManager.persist(check);      entityManager.flush();      entityManager.clear();    }  } else {    checkRepository.save(check);  }}  }
class C{  public static void assertThrows(final Consumer<Void> consumer,final Class<?> exceptionClass){  assertThrows(consumer,exceptionClass,null);}  }
class C{  @Override public List<Map<String,String>> taskConfigs(int maxTasks){  List<Map<String,String>> taskConfigs=new ArrayList<>(1);  Map<String,String> taskProps=new HashMap<>(mConfigProperties);  taskConfigs.add(taskProps);  return taskConfigs;}  }
class C{  private void executeDoiWorkflow(Resource resource,BigDecimal version,BigDecimal versionReplaced,BaseAction action) throws PublicationException {  if (resource.getDoi() != null && resource.isPubliclyAvailable() && (resource.getIdentifierStatus().equals(IdentifierStatus.PUBLIC_PENDING_PUBLICATION) || resource.getIdentifierStatus().equals(IdentifierStatus.PUBLIC))) {    if (resource.getIdentifierStatus().equals(IdentifierStatus.PUBLIC_PENDING_PUBLICATION)) {      if (resource.isAlreadyAssignedDoi()) {        doReplaceDoi(resource,version,versionReplaced);        String msg=action.getText("manage.overview.publishing.doi.publish.newMajorVersion.replaces",new String[]{resource.getDoi().toString()});        log.info(msg);        action.addActionMessage(msg);      } else {        doRegisterDoi(resource,null);        String msg=action.getText("manage.overview.publishing.doi.publish.newMajorVersion",new String[]{resource.getDoi().toString()});        log.info(msg);        action.addActionMessage(msg);      }    } else {      doUpdateDoi(resource);      String msg=action.getText("manage.overview.publishing.doi.publish.newMinorVersion",new String[]{resource.getDoi().toString()});      log.info(msg);      action.addActionMessage(msg);    }  }}  }
class C{  public ToStringBuilder append(final String fieldName,final char value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public FlightNumber(){  super(FLIGHTNUMBER_REGEX,2,false,1.0f);}  }
class C{  public static int[] prepareRowIndicesMax(int iCols,double vmb[],BinaryOperator bOp) throws DMLRuntimeException {  int[] vixCumSum=null;  int[] vix=new int[iCols];  if (!(bOp.fn instanceof NotEquals)) {    for (int i=0; i < iCols; i++)     vix[i]=i;    SortUtils.sortByValueStable(0,iCols,vmb,vix);  }  if (bOp.fn instanceof LessThan || bOp.fn instanceof LessThanEquals || bOp.fn instanceof GreaterThan|| bOp.fn instanceof GreaterThanEquals) {    boolean bPrimeCumSum=false;    if (bOp.fn instanceof LessThan || bOp.fn instanceof LessThanEquals)     bPrimeCumSum=true;    double dvix[]=new double[vix.length];    if (bPrimeCumSum)     for (int i=0; i < vix.length; i++)     dvix[vix.length - 1 - i]=vix[i]; else     for (int i=0; i < vix.length; i++)     dvix[i]=vix[i];    MatrixBlock mbix=DataConverter.convertToMatrixBlock(dvix,true);    UnaryOperator u_op=new UnaryOperator(Builtin.getBuiltinFnObject(Builtin.BuiltinCode.CUMMAX));    MatrixBlock mbResult=(MatrixBlock)mbix.unaryOperations(u_op,new MatrixBlock());    vixCumSum=DataConverter.convertToIntVector(mbResult);    if (bPrimeCumSum)     for (int i=0; i < (vixCumSum.length + 1) / 2; i++) {      int iTemp=vixCumSum[vixCumSum.length - 1 - i];      vixCumSum[vixCumSum.length - 1 - i]=vixCumSum[i];      vixCumSum[i]=iTemp;    }    adjustRowIndicesMax(vixCumSum,vmb,bOp);  } else   if (bOp.fn instanceof Equals || bOp.fn instanceof NotEquals) {    adjustRowIndicesMax(vix,vmb,bOp);    vixCumSum=vix;  }  return vixCumSum;}  }
class C{  private static Map<String,Object> loadZoneInfoMap(InputStream in) throws IOException {  Map<String,Object> map=new ConcurrentHashMap<String,Object>();  DataInputStream din=new DataInputStream(in);  try {    readZoneInfoMap(din,map);  }  finally {    try {      din.close();    } catch (    IOException ex) {    }  }  map.put("UTC",new SoftReference<DateTimeZone>(DateTimeZone.UTC));  return map;}  }
class C{  private synchronized void damageRange(Position pos0,Position pos1){  if (component == null) {    p0.clear();    lastDoc=null;    return;  }  boolean addToQueue=p0.isEmpty();  Document curDoc=component.getDocument();  if (curDoc != lastDoc) {    if (!p0.isEmpty()) {      p0.clear();      p1.clear();    }    lastDoc=curDoc;  }  p0.add(pos0);  p1.add(pos1);  if (addToQueue) {    SwingUtilities.invokeLater(this);  }}  }
class C{  @Dimension(unit=Dimension.PX) public static int dpToPxInt(@Dimension(unit=Dimension.DP) float dp){  return (int)dpToPx(dp);}  }
class C{  public void onStart(long id,TaskImage input,TaskImage result,TaskInfo.Destination aDestination){  TaskInfo job=new TaskInfo(id,input,result,aDestination);  final ImageProcessorListener listener=mImageTaskManager.getProxyListener();  listener.onStart(job);}  }
class C{  public Modulo2Equation(final int c){  variables=new IntArrayList();  this.c=c;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static Timestamp calculateDateDue(Timestamp DocDate,int FixMonthDay,int FixMonthOffset,int FixMonthCutoff){  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(DocDate);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  int maxDayCut=cal.getActualMaximum(Calendar.DAY_OF_MONTH);  if (FixMonthCutoff > maxDayCut)   cal.set(Calendar.DAY_OF_MONTH,maxDayCut); else   cal.set(Calendar.DAY_OF_MONTH,FixMonthCutoff);  if (DocDate.after(cal.getTime()))   FixMonthOffset+=1;  cal.add(Calendar.MONTH,FixMonthOffset);  int maxDay=cal.getActualMaximum(Calendar.DAY_OF_MONTH);  if (FixMonthDay > maxDay)   cal.set(Calendar.DAY_OF_MONTH,maxDay); else   if (FixMonthDay >= 30 && maxDay > FixMonthDay)   cal.set(Calendar.DAY_OF_MONTH,maxDay); else   cal.set(Calendar.DAY_OF_MONTH,FixMonthDay);  java.util.Date temp=cal.getTime();  return new Timestamp(temp.getTime());}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix2D other){  if (other instanceof SelectedSparseDoubleMatrix2D) {    SelectedSparseDoubleMatrix2D otherMatrix=(SelectedSparseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseDoubleMatrix2D) {    SparseDoubleMatrix2D otherMatrix=(SparseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") protected void notifyInstanceAvailable(InstanceEvent e){  Vector<InstanceListener> l;synchronized (this) {    l=(Vector<InstanceListener>)m_instanceListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptInstance(e);    }  }}  }
class C{  public static Builder builder(QueryResponse response){  return new Builder(response);}  }
class C{  public void addLineData(int inputStartLine,String inputFileName,int inputLineCount,int outputStartLine,int outputLineIncrement){  int fileIndex=filePathList.indexOf(inputFileName);  if (fileIndex == -1)   throw new IllegalArgumentException("inputFileName: " + inputFileName);  if (outputStartLine == 0)   return;  LineInfo li=new LineInfo();  li.setInputStartLine(inputStartLine);  li.setInputLineCount(inputLineCount);  li.setOutputStartLine(outputStartLine);  li.setOutputLineIncrement(outputLineIncrement);  if (fileIndex != lastFileID)   li.setLineFileID(fileIndex);  lastFileID=fileIndex;  lineData.add(li);}  }
class C{  public void checkTree(){  Map<TreeNode,TreeNode> nodes=this.useIdentity ? new IdentityHashMap<TreeNode,TreeNode>() : new HashMap<TreeNode,TreeNode>();  addUniqueNodes(nodes,tree.getRoot());}  }
class C{  public static long secureRandomLong(){  SecureRandom sr=getSecureRandom();synchronized (sr) {    return sr.nextLong();  }}  }
class C{  public static int bytesToInt(byte high,byte low){  return ((high & 0xFF) << 8) | (low & 0xFF);}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    HashMap<K,V> stuples=new HashMap<K,V>();    for (    Map.Entry<K,Double> e : mergedTuple.entrySet()) {      stuples.put(e.getKey(),getValue(e.getValue()));    }    mergedport.emit(stuples);    mergedTuple=new HashMap<K,Double>();  }}  }
class C{  public static boolean isThisHostIP(final String hostName){  if ((hostName == null) || (hostName.isEmpty()))   return false;  if (hostName.indexOf(':') > 0)   return false;  return isThisHostIP(Domains.dnsResolve(hostName));}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static TypeRefsFactory init(){  try {    TypeRefsFactory theTypeRefsFactory=(TypeRefsFactory)EPackage.Registry.INSTANCE.getEFactory(TypeRefsPackage.eNS_URI);    if (theTypeRefsFactory != null) {      return theTypeRefsFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new TypeRefsFactoryImpl();}  }
class C{  public MotionBlurFilter(){}  }
class C{  public short startTransaction(EntityManager em){  if (em != null) {    em.getTransaction().begin();  }  return 1;}  }
class C{  public long stop(){  final long elapsedNanos=clock.getTick() - startTime;  timer.update(elapsedNanos,TimeUnit.NANOSECONDS);  return elapsedNanos;}  }
class C{  @Override protected void withBindHolder(vholder holder,String data,int position){  holder.tv.setText(data);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD",justification="Only applicable in client DS and in that case too multiple instances do not modify it at the same time.") public void updateID(DistributedMember idm){  HeapDataOutputStream hdos=new HeapDataOutputStream(256,Version.CURRENT);  try {    DataSerializer.writeObject(idm,hdos);  } catch (  IOException e) {    throw new InternalGemFireException("Unable to serialize member: " + this.memberId,e);  }  this.identity=hdos.toByteArray();  if (this.memberId != null && this.memberId == systemMemberId) {    systemMemberId=idm;  }  this.memberId=idm;  this._toString=null;}  }
class C{  private static String parseIdentifierEscape(String stmt,int offset){  StringBuilder sb=new StringBuilder();  loop:   for (++offset; offset < stmt.length(); ++offset) {    char c=stmt.charAt(offset);    if (c == '`') {      if (offset + 1 < stmt.length() && stmt.charAt(offset + 1) == '`') {        ++offset;        sb.append('`');      } else {        break loop;      }    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public SVGOMGlyphRefElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void addPhotoToList(AbelanaClient.PhotoListType photoListType,PhotoInfo photoInfo){  getPhotoList(photoListType).add(photoInfo);}  }
class C{  public GridClientConfiguration(){}  }
class C{  public void skipBytes(long totalNumBytesToSkip) throws IOException {  if ((this.position + totalNumBytesToSkip) > bytes.length) {    throw new IOException(String.format("Cannot skip %d bytes from zero-index position %d as total length = %d",totalNumBytesToSkip,this.position,bytes.length));  }  this.position+=totalNumBytesToSkip;}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  private SimpleItypeConfig search(String id,Vector indx,boolean clearErrorFlags){  Vector sp=(Vector)sessionContext.getAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME);  if (sp == null || sp.size() == 0)   return null;  SimpleItypeConfig result=null;  for (int i=0; i < sp.size(); i++) {    SimpleItypeConfig sic=(SimpleItypeConfig)sp.elementAt(i);    indx.clear();    indx.addElement("" + i);    if (clearErrorFlags)     sic.setHasError(false);    result=searchR(sic,id,clearErrorFlags);    if (result != null)     break;  }  if (clearErrorFlags)   sessionContext.setAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME,sp);  return result;}  }
class C{  private void renderImage(){  BufferedImage bgImage=segmentImages[0][0];  int w=bgImage.getWidth();  int h=bgImage.getHeight();  BufferedImage result=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  Graphics g=result.getGraphics();  g.drawImage(bgImage,0,0,null);  int byteNumber=0;  for (  byte bValue : manualValues) {    if (byteNumber > 0 && byteNumber < 14) {      for (int bitNumber=0; bitNumber < 8; bitNumber++) {        if (Format.isBitSet(bValue,bitNumber)) {          BufferedImage img=segmentImages[byteNumber][bitNumber];          if (img != null) {            g.drawImage(img,0,0,null);          }        }      }    }    byteNumber+=1;  }  imagePanel.setImage(result);  imagePanel.repaint();}  }
class C{  public void saveProperties(){  throw new GemFireIOException("saveProperties is no longer supported for security reasons");}  }
class C{  @Override public final void add(T item){  mData.add(item);  int location=mData.size() - 1;  if (hasHeaderView())   location++;  notifyItemInserted(location);  notifyDataSetHasChanged();}  }
class C{  void recalcMinMaxVersionTimestamp(){  if (versionTimestamps == null)   throw new UnsupportedOperationException();  final int nkeys=keys.nkeys;  long min=Long.MAX_VALUE;  long max=Long.MIN_VALUE;  for (int i=0; i < nkeys; i++) {    final long t=versionTimestamps[i];    if (t < min)     min=t;    if (t > max)     max=t;  }  minimumVersionTimestamp=min;  maximumVersionTimestamp=max;}  }
class C{  public void write(short x){  writeByte((x >>> 8) & 0xff);  writeByte((x >>> 0) & 0xff);}  }
class C{  private double[][] threshold(int metric,double threshold){  int count=0;  for (int i=0; i < metrics.length; i++) {    if (metrics[i][metric] >= threshold) {      count++;    }  }  double[][] result=new double[count][];  count=0;  for (int i=0; i < metrics.length; i++) {    if (metrics[i][metric] >= threshold) {      result[count]=parameters[i];      count++;    }  }  return result;}  }
class C{  public int determineInsertionIndex(TabLaunchType type,int position,Tab newTab){  if (linkClicked(type)) {    position=determineInsertionIndex(type,newTab);  }  if (willOpenInForeground(type,newTab.isIncognito())) {    forgetAllOpeners();  }  return position;}  }
class C{  @HLEFunction(nid=0x8754ECB8,version=150) public int sceMp4TrackSampleBufAvailableSize(int mp4,TPointer trackAddr,@CanBeNull TPointer32 writableSamplesAddr,@CanBeNull TPointer32 writableBytesAddr){  SceMp4TrackSampleBuf track=new SceMp4TrackSampleBuf();  track.read(trackAddr);  writableSamplesAddr.setValue(track.bufSamples.getWritableSpace());  writableBytesAddr.setValue(track.bufBytes.getWritableSpace());  int result=0;  if (writableSamplesAddr.getValue() < 0 || writableBytesAddr.getValue() < 0) {    result=SceKernelErrors.ERROR_MP4_NO_AVAILABLE_SIZE;  }  if (log.isDebugEnabled()) {    log.debug(String.format("sceMp4TrackSampleBufAvailableSize returning writableSamples=0x%X, writableBytes=0x%X, result=0x%08X",writableSamplesAddr.getValue(),writableBytesAddr.getValue(),result));  }  return result;}  }
class C{  private static String convertParamList(final ArrayList<String> params){  StringBuilder paramList=new StringBuilder();  if (params != null) {    for (    String str : params) {      paramList.append(str).append(", ");    }    if (params.size() > 0) {      paramList.delete(paramList.length() - 2,paramList.length());    }  }  return paramList.toString();}  }
class C{  public Vertex checkRelationTargetForAllWords(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,Vertex left,Vertex right,Vertex relation,Collection<Relationship> words){  if (words != null && !right.instanceOf(Primitive.WORD)) {    Set<Vertex> processed=new HashSet<Vertex>();    processed.add(right);    for (    Relationship word : words) {      Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);      if (otherMeanings != null) {        for (        Relationship meaning : otherMeanings) {          if (!processed.contains(meaning.getTarget())) {            processed.add(meaning.getTarget());            if (left.hasOrInheritsRelationship(relation,meaning.getTarget())) {              return network.createVertex(Primitive.TRUE);            } else             if (left.hasOrInheritsInverseRelationship(relation,meaning.getTarget())) {              return network.createVertex(Primitive.FALSE);            }          }        }      }    }  }  return null;}  }
class C{  public void mode(String mode){  bot.sendIRC().mode(serverUser.getNick(),mode);}  }
class C{  static public void assertSame(String message,Object expected,Object actual){  if (expected == actual)   return;  failNotSame(message,expected,actual);}  }
class C{  public AbstractSymbol(Font font,Dimension2D symbolSize){  this.font=font;  this.symbolSize=symbolSize;}  }
class C{  @Override public synchronized CloneableIterator<byte[]> keys(final boolean up,final boolean rotating) throws IOException {  this.flushBuffer();  return super.keys(up,rotating);}  }
class C{  public IDevice learnEntity(MacAddress macAddress,VlanVid vlan,IPv4Address ipv4Address,IPv6Address ipv6Address,DatapathId switchDPID,OFPort switchPort,boolean processUpdates){  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (!processUpdates) {    deviceListeners.clearListeners();  }  IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,ipv6Address,switchDPID,switchPort,new Date()));  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      deviceListeners.addListener("device",listener);    }  }  return res;}  }
class C{  public synchronized JSONObject buyProduct(final String productId,final String userId,final int num){  final JSONObject ret=Results.falseResult();  try {    if (num < 0 || num > 99) {      ret.put(Keys.MSG,langPropsService.get("invalidOrderStatusLabel"));      return ret;    }    final JSONObject product=productRepository.get(productId);    if (Product.PRODUCT_STATUS_C_ONSHELF != product.optInt(Product.PRODUCT_STATUS)) {      ret.put(Keys.MSG,langPropsService.get("productOffShelfLabel"));      return ret;    }    if (product.optInt(Product.PRODUCT_COUNT) < 1) {      ret.put(Keys.MSG,langPropsService.get("productSellOutLabel"));      return ret;    }    if (num > product.optInt(Product.PRODUCT_COUNT)) {      ret.put(Keys.MSG,langPropsService.get("insufficientProductCountLabel"));      return ret;    }    final double price=product.optDouble(Product.PRODUCT_PRICE);    final int point=(int)Math.floor(price * Symphonys.getInt("pointExchangeUnit"));    if (point * num < 0) {      ret.put(Keys.MSG,langPropsService.get("invalidOrderStatusLabel"));      return ret;    }    final JSONObject user=userRepository.get(userId);    final int balance=user.optInt(UserExt.USER_POINT);    if (balance - point * num < Symphonys.getInt("pointExchangeMin")) {      String msg=langPropsService.get("exchangeMinLabel");      msg=msg.replace("{point}",Symphonys.get("pointExchangeMin"));      ret.put(Keys.MSG,langPropsService.get("insufficientBalanceLabel") + langPropsService.get("colonLabel") + msg);      return ret;    }    int sellCount=0;    for (int i=0; i < num; i++) {      final JSONObject order=new JSONObject();      order.put(Order.ORDER_POINT,point);      order.put(Order.ORDER_PRICE,price);      order.put(Order.ORDER_PRODUCT_NAME,product.optString(Product.PRODUCT_NAME));      order.put(Order.ORDER_PRODUCT_CATEGORY,product.optString(Product.PRODUCT_CATEGORY));      order.put(Order.ORDER_BUYER_ID,userId);      final String orderId=orderMgmtService.addOrder(order);      final boolean succ=null != pointtransferMgmtService.transfer(userId,"sys",Pointtransfer.TRANSFER_TYPE_C_BUY_PRODUCT,point,orderId);      ret.put(Keys.STATUS_CODE,succ);      if (!succ) {        LOGGER.log(Level.ERROR,"Order [id=" + orderId + "] failed");        return ret;      }      sellCount++;    }    if (sellCount > 0) {      final Transaction transaction=productRepository.beginTransaction();      try {        final int remainCount=product.optInt(Product.PRODUCT_COUNT);        product.put(Product.PRODUCT_COUNT,remainCount - sellCount);        productRepository.update(productId,product);        transaction.commit();      } catch (      final Exception e) {        if (null != transaction && transaction.isActive()) {          transaction.rollback();        }        LOGGER.log(Level.ERROR,"Decreas product count failed",e);      }    }  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Buys product failed",e);    ret.put(Keys.MSG,e.getMessage());  }  return ret;}  }
class C{  public void onPackageAppeared(String packageName,int reason){}  }
class C{  public void maxy(int parseInt){  maxy=parseInt;  tileBoundsSet=true;}  }
class C{  public synchronized static KeyTab create() throws IOException, RealmException {  String dname=getDefaultTabName();  return create(dname);}  }
class C{  public void segment(String target) throws JSONException, UnirestException, IOException {  this.words.clear();  String body=new JSONArray(new String[]{target}).toString();  HttpResponse<JsonNode> jsonResponse=Unirest.post(this.TAG_URL).queryString("space_mode",this.spaceMode).queryString("oov_level",this.oovLevel).queryString("t2s",this.t2s).queryString("special_char_conv",this.specialCharConv).header("Accept","application/json").header("X-Token",this.BOSONNLP_API_TOKEN).body(body).asJson();  makeToken(jsonResponse.getBody());}  }
class C{  public boolean isRecOrArgForAPICall(IAllocNode an){  return apiCallNodes.contains(an);}  }
class C{  public static void timeEnd(Object... msg){  if (LuaViewConfig.isDebug()) {    Log.d(DEFAULT_PREFIX,"[end] " + (Debug.threadCpuTimeNanos() - time) / 1000000 + " " + (Debug.threadCpuTimeNanos() - time) + " " + getMsg(msg));  }}  }
class C{  public void testCertPathValidator06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathValidator.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  public static boolean call(PageContext pc) throws PageException {  return pc.getParentPageContext() != null;}  }
class C{  public Arg(String aName,String desc,int expectedNumberOfArguments,boolean expectDashedArguments){  name=aName;  description=desc;  numExpectedValues=expectedNumberOfArguments;  c=name.charAt(0);  dashedArguments=expectDashedArguments;}  }
class C{  public EarliestnessComputation(UnitGraph unitGraph,UpSafetyAnalysis upSafe,DownSafetyAnalysis downSafe,SideEffectTester sideEffect,FlowSet set){  unitToEarliest=new HashMap<Unit,FlowSet>(unitGraph.size() + 1,0.7f);  Iterator unitIt=unitGraph.iterator();  while (unitIt.hasNext()) {    Unit currentUnit=(Unit)unitIt.next();    FlowSet earliest=(FlowSet)set.emptySet();    unitToEarliest.put(currentUnit,earliest);    FlowSet downSafeSet=((FlowSet)downSafe.getFlowBefore(currentUnit)).clone();    List predList=unitGraph.getPredsOf(currentUnit);    if (predList.size() == 0) {      earliest.union(downSafeSet);    } else {      Iterator predIt=predList.iterator();      while (predIt.hasNext()) {        Unit predecessor=(Unit)predIt.next();{          Iterator downSafeIt=downSafeSet.iterator();          while (downSafeIt.hasNext()) {            EquivalentValue equiVal=(EquivalentValue)downSafeIt.next();            Value avail=equiVal.getValue();            if (avail instanceof FieldRef) {              if (sideEffect.unitCanWriteTo(predecessor,avail)) {                earliest.add(equiVal);                downSafeIt.remove();              }            } else {              Iterator usesIt=avail.getUseBoxes().iterator();              while (usesIt.hasNext()) {                Value use=((ValueBox)usesIt.next()).getValue();                if (sideEffect.unitCanWriteTo(predecessor,use)) {                  earliest.add(equiVal);                  downSafeIt.remove();                  break;                }              }            }          }        }{          Iterator downSafeIt=downSafeSet.iterator();          while (downSafeIt.hasNext()) {            EquivalentValue equiVal=(EquivalentValue)downSafeIt.next();            FlowSet preDown=(FlowSet)downSafe.getFlowBefore(predecessor);            FlowSet preUp=(FlowSet)upSafe.getFlowBefore(predecessor);            if (!preDown.contains(equiVal) && !preUp.contains(equiVal)) {              earliest.add(equiVal);              downSafeIt.remove();            }          }        }      }    }  }}  }
class C{  public JPanel createHorizontalPanel(boolean threeD){  JPanel p=N9ComponentFactory.createPanel_style1(null).setDrawBg(threeD);  p.setLayout(new BoxLayout(p,BoxLayout.X_AXIS));  p.setAlignmentY(TOP_ALIGNMENT);  p.setAlignmentX(LEFT_ALIGNMENT);  if (threeD) {    p.setBorder(loweredBorder);  }  p.setOpaque(false);  return p;}  }
class C{  public Path subpath(int startIndex,int endIndex){  Vector<PathElement> list;  int i;  list=new Vector<PathElement>();  for (i=startIndex; i < endIndex; i++)   list.add(get(i));  return new Path(list);}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public static String toString(Object object){  return toString(object,null,false,false,null);}  }
class C{  public void incrementElementsCount(int amount){  if (this.maxElements <= 0) {    return;  }  this.elements+=amount;  if (this.elements > this.maxElements) {    throw new RuntimeException("Tried to read NBT tag with too many elements, " + this.elements + " > "+ this.maxElements);  }}  }
class C{  public boolean removeTradestrategy(Tradestrategy tradestrategy){  for (ListIterator<Tradestrategy> itemIter=this.tradestrategies.listIterator(); itemIter.hasNext(); ) {    Tradestrategy item=itemIter.next();    if (item.equals(tradestrategy)) {      itemIter.remove();      return true;    }  }  return false;}  }
class C{  public TDoubleMap(Functionality<T> keyFunc,int expectedSize){  this.keyFunc=keyFunc;  this.mapType=MapType.HASH_TABLE;  this.locked=false;  this.num=0;  allocate(getCapacity(num,false));  this.numCollisions=0;}  }
class C{  @Override public boolean supportsNamedParameters(){  debugCodeCall("supportsNamedParameters");  return false;}  }
class C{  public ExtendedClientConfiguration withLargePayloadSupportEnabled(AmazonS3 s3,String s3BucketName){  setLargePayloadSupportEnabled(s3,s3BucketName);  return this;}  }
class C{  public String normalizeDocLengthTipText(){  return "If true then document length is normalized according " + "to the settings for norm and lnorm";}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.268 -0500",hash_original_method="894B7941A639354EFA5A1447EF61D132",hash_generated_method="085C53C5C1B90EEB9084DA90BFC3A5E8") @Deprecated public static boolean isJavaLetter(char c){  return isJavaIdentifierStart(c);}  }
class C{  public boolean mousePressed(MouseEvent e){  if (Debug.debugging("eomg")) {    Debug.output("GraphicStateMachine|undefined state|mousePressed = " + graphic.getGraphic().getRenderType());  }  if (graphic.getGraphic().getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {    graphic.getStateMachine().setOffsetNeeded(true);    Debug.message("eomg","GraphicStateMachine|undefined state| *offset needed*");  }  graphic.getStateMachine().setEdit();  return getMapMouseListenerResponse();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public Point2D transform(Point2D graphPoint){  if (graphPoint == null)   return null;  Point2D viewCenter=getViewCenter();  double viewRadius=getViewRadius();  double ratio=getRatio();  Point2D viewPoint=delegate.transform(graphPoint);  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double theta=polar.getTheta();  double radius=polar.getRadius();  if (radius > viewRadius)   return viewPoint;  double mag=magnification;  radius*=mag;  radius=Math.min(radius,viewRadius);  Point2D projectedPoint=PolarPoint.polarToCartesian(theta,radius);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return translatedBack;}  }
class C{  public boolean isFixed(){  return minSmallest == minLargest && maxSmallest == maxLargest;}  }
class C{  private void clearParametersSelectedRole(){  int paramNum=pricedParametersOfSelectedRole.length;  for (int i=0; i < paramNum; i++) {    if (pricedParametersOfSelectedRole[i].getPricedParameter() != null) {      pricedParametersOfSelectedRole[i].getPricedParameter().setPricePerUser(BigDecimal.ZERO);    }    if (pricedParametersOfSelectedRole[i].getPricedOption() != null) {      pricedParametersOfSelectedRole[i].getPricedOption().setPricePerUser(BigDecimal.ZERO);    }  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public String provideUid(){  return "uid";}  }
class C{  private void startTcpProtocol() throws IgniteCheckedException {  startProtocol(new GridTcpRestProtocol(ctx));}  }
class C{  public boolean stateStackPop(){  Hashtable h;  try {    h=(Hashtable)stateStack.pop();  } catch (  EmptyStackException e) {    lparen=0;    SwitchTo(DEFAULT);    return false;  }  if (debugPrint)   System.out.println(" stack pop (" + stateStack.size() + ") : lparen="+ ((Integer)h.get("lparen")).intValue()+ " newstate="+ ((Integer)h.get("lexstate")).intValue());  lparen=((Integer)h.get("lparen")).intValue();  rparen=((Integer)h.get("rparen")).intValue();  SwitchTo(((Integer)h.get("lexstate")).intValue());  return true;}  }
class C{  private void ifNotEqJmp(MethodVisitor mv,int param,int value,Label label){  mv.visitVarInsn(ILOAD,param);  if (value == 0) {    mv.visitJumpInsn(IFNE,label);  } else   if (value == 1) {    mv.visitInsn(ICONST_1);    mv.visitJumpInsn(IF_ICMPNE,label);  } else   if (value == 2) {    mv.visitInsn(ICONST_2);    mv.visitJumpInsn(IF_ICMPNE,label);  } else   if (value == 3) {    mv.visitInsn(ICONST_3);    mv.visitJumpInsn(IF_ICMPNE,label);  } else   if (value == 4) {    mv.visitInsn(ICONST_4);    mv.visitJumpInsn(IF_ICMPNE,label);  } else   if (value == 5) {    mv.visitInsn(ICONST_5);    mv.visitJumpInsn(IF_ICMPNE,label);  } else   if (value >= 6) {    mv.visitIntInsn(BIPUSH,value);    mv.visitJumpInsn(IF_ICMPNE,label);  } else {    throw new RuntimeException("non supported negative values");  }}  }
class C{  public static void unlink(final NaviNode sourceNode,final NaviNode targetNode){  sourceNode.m_children.remove(targetNode);  targetNode.m_parents.remove(sourceNode);}  }
class C{  public void startMouseCapture(EventTarget target,boolean sendAll,boolean autoRelease){  mouseCaptureTarget=target;  mouseCaptureSendAll=sendAll;  mouseCaptureAutoRelease=autoRelease;}  }
class C{  @Deployment public static Archive<?> createTestArchive(){  return ShrinkWrap.create(WebArchive.class).addClass(Quotes.class).setWebXML(Paths.get("src/main/webapp/WEB-INF/web.xml").toFile());}  }
class C{  public final int offset(){  return _offset;}  }
class C{  protected boolean isEnterpriseEdition(){  return Util.isEnterpriseEdition(((MySQLConnection)this.conn).getServerVersion());}  }
class C{  static void __gl_meshZapFace(GLUface fZap){  GLUhalfEdge eStart=fZap.anEdge;  GLUhalfEdge e, eNext, eSym;  GLUface fPrev, fNext;  eNext=eStart.Lnext;  do {    e=eNext;    eNext=e.Lnext;    e.Lface=null;    if (e.Sym.Lface == null) {      if (e.Onext == e) {        KillVertex(e.Org,null);      } else {        e.Org.anEdge=e.Onext;        Splice(e,e.Sym.Lnext);      }      eSym=e.Sym;      if (eSym.Onext == eSym) {        KillVertex(eSym.Org,null);      } else {        eSym.Org.anEdge=eSym.Onext;        Splice(eSym,eSym.Sym.Lnext);      }      KillEdge(e);    }  } while (e != eStart);  fPrev=fZap.prev;  fNext=fZap.next;  fNext.prev=fPrev;  fPrev.next=fNext;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof ValueDataset) {    ValueDataset vd=(ValueDataset)obj;    return ObjectUtilities.equal(this.value,vd.getValue());  }  return false;}  }
class C{  private static boolean discardStream(HttpEngine httpEngine,InputStream responseBodyIn){  Connection connection=httpEngine.connection;  if (connection == null)   return false;  Socket socket=connection.getSocket();  if (socket == null)   return false;  try {    int socketTimeout=socket.getSoTimeout();    socket.setSoTimeout(DISCARD_STREAM_TIMEOUT_MILLIS);    try {      Util.skipAll(responseBodyIn);      return true;    }  finally {      socket.setSoTimeout(socketTimeout);    }  } catch (  IOException e) {    return false;  }}  }
class C{  public void disconnect(){  if (mTargetConnection == null) {    return;  }  Connection target=mTargetConnection;  disconnectInternal();  target.disconnectInternal();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public LayersPanel(LayerHandler lHandler){  this();  setLayerHandler(lHandler);}  }
class C{  protected void initialize(){  if (m_sorter.getBufferSize() != null && m_sorter.getBufferSize().length() > 0) {    m_buffSize.setText(m_sorter.getBufferSize());  }  if (m_sorter.getTempDirectory() != null && m_sorter.getTempDirectory().length() > 0) {    m_tempDir.setText(m_sorter.getTempDirectory());  }  String sString=m_sorter.getSortDetails();  m_listModel=new DefaultListModel();  m_list.setModel(m_listModel);  if (sString != null && sString.length() > 0) {    String[] parts=sString.split("@@sort-rule@@");    if (parts.length > 0) {      m_upBut.setEnabled(true);      m_downBut.setEnabled(true);      for (      String sPart : parts) {        Sorter.SortRule s=new Sorter.SortRule(sPart);        m_listModel.addElement(s);      }    }    m_list.repaint();  }  if (m_sorter.getConnectedFormat() != null) {    Instances incoming=m_sorter.getConnectedFormat();    m_attCombo.removeAllItems();    for (int i=0; i < incoming.numAttributes(); i++) {      m_attCombo.addItem(incoming.attribute(i).name());    }  }}  }
class C{  @Override public void onClick(View v){  hide();}  }
class C{  private static boolean isEmpty(BufferedImage image){  DataBufferInt buf=(DataBufferInt)image.getRaster().getDataBuffer();  int[] data=buf.getData();  for (  int color : data) {    int alpha=color & 0xFF000000;    if (alpha != 0) {      return false;    }  }  return true;}  }
class C{  public boolean isEventForked(String ename){  if (isLoggingEnabled()) {    stackLogger.logDebug("isEventForked: " + ename + " returning "+ this.forkedEvents.contains(ename));  }  return this.forkedEvents.contains(ename);}  }
class C{  public boolean copyArea(SunGraphics2D sg2d,int x,int y,int w,int h,int dx,int dy){  return true;}  }
class C{  void resetCaches(){  this.cachedNextLinkId=null;  this.cachedRouteLinkIds=null;  this.cachedDestinationLinkId=null;  PlanElement currentPlanElement=this.getPlanElements().get(this.currentPlanElementIndex);  if (currentPlanElement instanceof Leg) {    this.currentLeg=((Leg)currentPlanElement);    this.cachedRouteLinkIds=null;    Route route=currentLeg.getRoute();    if (route == null) {      log.error("The agent " + this.getId() + " has no route in its leg. Removing the agent from the simulation.");      this.state=MobsimAgent.State.ABORT;      return;    }    this.cachedDestinationLinkId=route.getEndLinkId();  } else {    this.calculateAndSetDepartureTime((Activity)this.getCurrentPlanElement());  }}  }
class C{  private boolean refresh(){  final String logSender=observer + "#refresh";  final String contrName=((contributor != null) ? contributor.getName() : null);  updateLocalInfo();  Vector peers=null;synchronized (cache) {    peers=new Vector(cache.values());    if (contrName != null)     peers.remove(cache.get(contrName));  }  Collections.shuffle(peers);  if (peers.isEmpty()) {    Logger.debug(logSender,"no peers in cache");    return false;  }  cacheCollection=null;  commandCollection=null;  IRequest answer=null;  Address peer=null;  for (int i=0; i < peers.size(); ++i) {    if (!shouldLive)     return false;    peer=((ContributionBox)peers.get(i)).contributor;    Logger.debug(logSender,"asking " + peer);    answer=observer.fireMessage(peer,"collectiveUpdate-" + name,this);    while (answer.getStatus() == IRequest.WAITING) {      try {        Thread.sleep(100);      } catch (      Exception e) {      }    }    if (answer.getStatus() == IRequest.DONE)     break;    Logger.debug(logSender,"not accessable: " + peer);  }  if (answer.getStatus() != IRequest.DONE) {    Logger.debug(logSender,"no accessable peers");    observer.collectiveUpdated(null);    return false;  } else {    Collective c=(Collective)answer.getInfo("reply");    if (contributor != null) {      cache.remove(contributor.getName());      c.cache.remove(contributor.getName());    }    cache.remove(peer.name);    c.cache.remove(peer.name);    repairSenderAddress(c,peer);    merge(c);    observer.collectiveUpdated((ContributionBox)cache.get(c.myContribution.contributor.name));    return true;  }}  }
class C{  protected void performDismiss(@NonNull final View view,final int position){  mDismissedViews.add(view);  mDismissedPositions.add(position);  ValueAnimator animator=ValueAnimator.ofInt(view.getHeight(),1).setDuration(mDismissAnimationTime);  animator.addUpdateListener(new DismissAnimatorUpdateListener(view));  animator.addListener(new DismissAnimatorListener());  animator.start();  mActiveDismissCount++;}  }
class C{  public JPEGWriter(){  super();}  }
class C{  public static void playOrPause(){  try {    if (musicPlaybackService != null) {      if (musicPlaybackService.isPlaying()) {        musicPlaybackService.pause();      } else {        musicPlaybackService.play();      }    }  } catch (  final Exception ignored) {  }}  }
class C{  public static String resolveVariables(String input,Map<String,String> props,boolean includeSysProps){  final int NORMAL=0;  final int SEEN_DOLLAR=1;  final int IN_BRACKET=2;  if (input == null) {    return input;  }  if (!includeSysProps && (props == null || props.size() == 0)) {    return input;  }  char[] chars=input.toCharArray();  StringBuffer buffer=new StringBuffer();  boolean properties=false;  int state=NORMAL;  int start=0;  for (int i=0; i < chars.length; ++i) {    char c=chars[i];    if (c == '$' && state != IN_BRACKET) {      state=SEEN_DOLLAR;    } else     if (c == '{' && state == SEEN_DOLLAR) {      buffer.append(input.substring(start,i - 1));      state=IN_BRACKET;      start=i - 1;    } else     if (state == SEEN_DOLLAR) {      state=NORMAL;    } else     if (c == '}' && state == IN_BRACKET) {      if (start + 2 == i) {        buffer.append("${}");      } else {        String value=null;        String key=input.substring(start + 2,i);        if (props != null) {          String sValue=props.get(key);          value=sValue == null || sValue.length() == 0 ? null : sValue;        }        if (value == null && includeSysProps) {          value=System.getProperty(key);        }        if (value != null) {          properties=true;          buffer.append(value);        }      }      start=i + 1;      state=NORMAL;    }  }  if (properties == false) {    return input;  }  if (start != chars.length) {    buffer.append(input.substring(start,chars.length));  }  return buffer.toString();}  }
class C{  public static void printQueryResults(List<?> res){  if (res == null || res.isEmpty())   System.out.println("Query result set is empty."); else {    for (    Object row : res) {      if (row instanceof List) {        System.out.print("(");        List<?> l=(List)row;        for (int i=0; i < l.size(); i++) {          Object o=l.get(i);          if (o instanceof Double || o instanceof Float)           System.out.printf("%.2f",o); else           System.out.print(l.get(i));          if (i + 1 != l.size())           System.out.print(',');        }        System.out.println(')');      } else       System.out.println("  " + row);    }  }}  }
class C{  public ColladaLibrary(String ns){  super(ns);}  }
class C{  public void addListener(final IFilterDialogListener listener){  m_listeners.addListener(listener);}  }
class C{  public void onGoToSleepStarted(int reason){  if (DEBUG) {    Slog.d(TAG,"onGoToSleepStarted");  }synchronized (mLock) {    mLastGoToSleepReason=reason;  }}  }
class C{  public java.lang.Object lookupLink(Name name) throws NamingException {  return lookup(name);}  }
class C{  private boolean allowSpecificUnitSelection(final Collection<Unit> units,final Route route,boolean mustQueryUser,final Match<Collection<Unit>> matchCriteria){  final List<Unit> candidateUnits=getFirstSelectedTerritory().getUnits().getMatches(getMovableMatch(route,units));  if (!mustQueryUser) {    final Set<UnitCategory> categories=UnitSeperator.categorize(candidateUnits,mustMoveWithDetails.getMustMoveWith(),true,false);    for (    final UnitCategory category1 : categories) {      if (category1.getMovement() == 0) {        continue;      }      for (      final UnitCategory category2 : categories) {        if (category2.getMovement() == 0) {          continue;        }        if (category1 != category2 && category1.getType() == category2.getType() && !category1.equals(category2)) {          if (units.containsAll(category1.getUnits()) && units.containsAll(category2.getUnits())) {            continue;          }          if (!Util.intersection(category1.getUnits(),units).isEmpty() || !Util.intersection(category2.getUnits(),units).isEmpty()) {            mustQueryUser=true;          }        }      }    }  }  if (mustQueryUser) {    final List<Unit> defaultSelections=new ArrayList<>(units.size());    if (route.isLoad()) {      final Collection<Unit> transportsToLoad=new ArrayList<>(getTransportsToLoad(route,units,false));      defaultSelections.addAll(TransportUtils.mapTransports(route,units,transportsToLoad).keySet());    } else {      defaultSelections.addAll(units);    }    sortUnitsToMove(candidateUnits,route);    final UnitChooser chooser=new UnitChooser(candidateUnits,defaultSelections,mustMoveWithDetails.getMustMoveWith(),true,false,getGameData(),false,getMap().getUIContext(),matchCriteria);    final String text="Select units to move from " + getFirstSelectedTerritory() + ".";    final int option=JOptionPane.showOptionDialog(getTopLevelAncestor(),chooser,text,JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);    if (option != JOptionPane.OK_OPTION) {      units.clear();      return false;    }    units.clear();    units.addAll(chooser.getSelected(false));  }  final List<Unit> unitsCopy=new ArrayList<>(units);  for (  final Unit unit : unitsCopy) {    final Collection<Unit> forced=mustMoveWithDetails.getMustMoveWith().get(unit);    if (forced != null) {      for (      final Unit dependent : forced) {        if (unitsCopy.indexOf(dependent) == -1) {          units.add(dependent);        }      }    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SimpleProtein parseMatchDataOutput(Resource resource){  Collection<MatchDataRecord> records=readInMatchDataFromResource(resource);  return createSimpleProtein(records);}  }
class C{  public static Transformer newTransformer(Source source) throws TransformerConfigurationException {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer(source);  transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");  transformer.setOutputProperty(OutputKeys.VERSION,"1.0");  transformer.setOutputProperty(OutputKeys.METHOD,"xml");  return transformer;}  }
class C{  public double[] computeLocalOfPreviousObservations() throws Exception {  return computeLocalUsingPreviousObservations(null,null,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    try {      retval=notations.removeNamedItemNS("http://www.w3.org/1999/xhtml","alpha");      fail("throw_NO_MOD_OR_NOT_FOUND_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 7:        break;case 8:      break;default :    throw ex;}}}}  }
class C{  public Bundler(){  this(null);}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){}  }
class C{  public FeatureGen(Option option,Data data,Dictionary dict){  this.option=option;  this.data=data;  this.dict=dict;}  }
class C{  public void clear(){  MBR=new Envelope();  drawX=drawY=0;}  }
class C{  public void add(Inferno round,int hits){  if (hits < 0) {    throw new IllegalArgumentException("InfernoTracker can't track negative hits. ");  }switch (round.getHeatPerRound()) {case 6:    this.turnsLeftToBurn+=round.getBurnRoundsPerHit() * hits;  break;case 10:this.turnsIVLeftToBurn+=round.getBurnRoundsPerHit() * hits;break;default :throw new IllegalArgumentException("Unknown Inferno round added to the InfernoTracker.");}}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  this.random=random;}  }
class C{  private <A2,B2>boolean addStep(Class<A2> from,Class<B2> to,Transform<A2,B2> step){  requireNonNull(from);  requireNonNull(to);  requireNonNull(step);  if (end == null || from.equals(end)) {    if (steps.contains(step)) {      return false;    } else {      steps.add(step);      end=to;      return true;    }  } else {    throw new IllegalArgumentException("Transform " + step + " has a different entry class ("+ from+ ") than the last class in the current build ("+ end+ ").");  }}  }
class C{  public void deleteRow() throws SQLException {  checkCursor();  ((Row)getCurrentRow()).setDeleted();  ++numDeleted;  notifyRowChanged();}  }
class C{  private static int skipCommentsAndQuotes(char[] statement,int position){  for (int i=0; i < START_SKIP.length; i++) {    if (statement[position] == START_SKIP[i].charAt(0)) {      boolean match=true;      for (int j=1; j < START_SKIP[i].length(); j++) {        if (!(statement[position + j] == START_SKIP[i].charAt(j))) {          match=false;          break;        }      }      if (match) {        int offset=START_SKIP[i].length();        for (int m=position + offset; m < statement.length; m++) {          if (statement[m] == STOP_SKIP[i].charAt(0)) {            boolean endMatch=true;            int endPos=m;            for (int n=1; n < STOP_SKIP[i].length(); n++) {              if (m + n >= statement.length) {                return statement.length;              }              if (!(statement[m + n] == STOP_SKIP[i].charAt(n))) {                endMatch=false;                break;              }              endPos=m + n;            }            if (endMatch) {              return endPos + 1;            }          }        }        return statement.length;      }    }  }  return position;}  }
class C{  public static final String toXml(Simulation simulation){  World world=simulation.getWorld();  Camera camera=simulation.getCamera();  List<SandboxRay> rays=simulation.getRays();  StringBuilder sb=new StringBuilder();  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  sb.append("<Simulation xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.dyn4j.org/Sandbox/sandbox.xsd\" version=\"" + Sandbox.VERSION + "\">");  sb.append(XmlGenerator.toXml());  sb.append("<Camera>");  sb.append("<Scale>").append(camera.getScale()).append("</Scale>");  sb.append(XmlGenerator.toXml(camera.getTranslation(),"Translation"));  sb.append("</Camera>");  sb.append("<Rays>");  int rSize=rays.size();  for (int i=0; i < rSize; i++) {    SandboxRay ray=rays.get(i);    sb.append(XmlGenerator.toXml(ray));  }  sb.append("</Rays>");  sb.append("<World>");  sb.append("<Name>").append(world.getUserData()).append("</Name>");  sb.append(XmlGenerator.toXml(world.getSettings()));  sb.append("<BroadphaseDetector>").append(world.getBroadphaseDetector().getClass().getSimpleName()).append("</BroadphaseDetector>");  sb.append("<NarrowphaseDetector>").append(world.getNarrowphaseDetector().getClass().getSimpleName()).append("</NarrowphaseDetector>");  sb.append("<ManifoldSolver>").append(world.getManifoldSolver().getClass().getSimpleName()).append("</ManifoldSolver>");  sb.append("<TimeOfImpactDetector>").append(world.getTimeOfImpactDetector().getClass().getSimpleName()).append("</TimeOfImpactDetector>");  sb.append(XmlGenerator.toXml(world.getGravity(),"Gravity"));  if (world.getBounds() instanceof AxisAlignedBounds) {    AxisAlignedBounds bounds=(AxisAlignedBounds)world.getBounds();    sb.append("<Bounds>").append("<Width>").append(bounds.getWidth()).append("</Width>").append("<Height>").append(bounds.getHeight()).append("</Height>").append(XmlGenerator.toXml(bounds.getTranslation(),"Translation")).append("</Bounds>");  }  sb.append("<Bodies>");  int bSize=world.getBodyCount();  for (int i=0; i < bSize; i++) {    SandboxBody body=(SandboxBody)world.getBody(i);    sb.append(XmlGenerator.toXml(body));  }  sb.append("</Bodies>");  sb.append("<Joints>");  int jSize=world.getJointCount();  for (int i=0; i < jSize; i++) {    Joint joint=world.getJoint(i);    sb.append(XmlGenerator.toXml(joint));  }  sb.append("</Joints>");  sb.append("</World>");  sb.append("</Simulation>");  return sb.toString();}  }
class C{  public BridgeContext createBridgeContext(SVGOMDocument doc){  if (doc.isSVG12()) {    return new SVG12BridgeContext(getUserAgent(),getDocumentLoader());  }  return new BridgeContext(getUserAgent(),getDocumentLoader());}  }
class C{  public static void addSolarEvaporationRecipe(FluidStack input,FluidStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addSolarEvaporationRecipe",FluidStack.class,FluidStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isEmptySimplePath(BlockNode start,BlockNode end){  if (start == end && start.getInstructions().isEmpty()) {    return true;  }  if (!start.getInstructions().isEmpty() || start.getCleanSuccessors().size() != 1) {    return false;  }  BlockNode block=getNextBlock(start);  while (block != null && block != end && block.getCleanSuccessors().size() < 2 && block.getPredecessors().size() == 1 && block.getInstructions().isEmpty()) {    block=getNextBlock(block);  }  return block == end;}  }
class C{  public boolean contains(MyRectangle2D r){  return getDistance(y,r.getY()) + r.getHeight() / 2 <= height / 2 && getDistance(x,r.getX()) + r.getWidth() / 2 <= width / 2 && height / 2 + r.getHeight() / 2 <= height && width / 2 + r.getWidth() / 2 <= width;}  }
class C{  public void testEncode() throws Exception {  byte[] expectedReturn=msgFixture.mappedAddress;  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  byte[] actualReturn=addressAttribute.encode();  assertTrue("AddressAttribute.encode() did not " + "properly encode a sample attribute",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public static OrderType newInstance(String value){  final OrderType returnInstance=new OrderType();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  private TableNames(){}  }
class C{  public static RuleSetConstraints constraintsFor(final String constraintsName,final EvolutionState state){  RuleSetConstraints myConstraints=(RuleSetConstraints)(((RuleInitializer)state.initializer).ruleSetConstraintRepository.get(constraintsName));  if (myConstraints == null)   state.output.error("The rule constraints \"" + constraintsName + "\" could not be found.");  return myConstraints;}  }
class C{  public boolean update(DBObject sourceObj){  s_logger.log(Level.FINE,"updateThisObject",new Object[]{getObjectType(),m_name,m_parent.getDirection()});  Savepoint sp=m_parent.setSavepoint("update object");  boolean result=m_interface.updateObject(s_parameters,s_logger,s_dbEngine,m_parent,m_name,m_headers,m_contents,sourceObj);  m_parent.releaseSavepoint(sp);  return result;}  }
class C{  public void testGcdSecondZero(){  byte aBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  byte bBytes[]={0};  int aSign=1;  int bSign=1;  byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void stop(){  started=false;  if (service != null) {    service.stop();  }}  }
class C{  public Element store(Object o){  Element element=new Element("perform");  element.setAttribute("name",((StartupModel)o).getName());  element.setAttribute("type","Button");  element.setAttribute("class",this.getClass().getName());  Element property=new Element("property");  property.setAttribute("name","script");  property.setAttribute("value",FileUtil.getPortableFilename(((ScriptButtonModel)o).getScript()));  element.addContent(property);  return element;}  }
class C{  public void addAll(String key,List<?> objects){  if (key == null) {    throw new IllegalArgumentException("Key cannot be null");  }  if (values.containsKey(key)) {    SabresValue sabresValue=values.get(key);    if (!(sabresValue instanceof ListValue)) {      throw new IllegalArgumentException("Add operations are only permitted on list values");    }    ListValue listValue=(ListValue)sabresValue;    for (    Object o : objects) {      listValue.add(o);    }  } else {    put(key,objects);  }}  }
class C{  public static int sizeOf(long value){  if (value < 0)   return 9;  if (value < 253)   return 1;  if (value <= 0xFFFFL)   return 3;  if (value <= 0xFFFFFFFFL)   return 5;  return 9;}  }
class C{  void advance(double realDeltaTime){  boolean isAtRest=isAtRest();  if (isAtRest && mWasAtRest) {    return;  }  double adjustedDeltaTime=realDeltaTime;  if (realDeltaTime > MAX_DELTA_TIME_SEC) {    adjustedDeltaTime=MAX_DELTA_TIME_SEC;  }  mTimeAccumulator+=adjustedDeltaTime;  double tension=mSpringConfig.tension;  double friction=mSpringConfig.friction;  double position=mCurrentState.position;  double velocity=mCurrentState.velocity;  double tempPosition=mTempState.position;  double tempVelocity=mTempState.velocity;  double aVelocity, aAcceleration;  double bVelocity, bAcceleration;  double cVelocity, cAcceleration;  double dVelocity, dAcceleration;  double dxdt, dvdt;  while (mTimeAccumulator >= SOLVER_TIMESTEP_SEC) {    mTimeAccumulator-=SOLVER_TIMESTEP_SEC;    if (mTimeAccumulator < SOLVER_TIMESTEP_SEC) {      mPreviousState.position=position;      mPreviousState.velocity=velocity;    }    aVelocity=velocity;    aAcceleration=(tension * (mEndValue - tempPosition)) - friction * velocity;    tempPosition=position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    bVelocity=tempVelocity;    bAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5;    tempVelocity=velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5;    cVelocity=tempVelocity;    cAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    tempPosition=position + cVelocity * SOLVER_TIMESTEP_SEC;    tempVelocity=velocity + cAcceleration * SOLVER_TIMESTEP_SEC;    dVelocity=tempVelocity;    dAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;    dxdt=1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);    dvdt=1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);    position+=dxdt * SOLVER_TIMESTEP_SEC;    velocity+=dvdt * SOLVER_TIMESTEP_SEC;  }  mTempState.position=tempPosition;  mTempState.velocity=tempVelocity;  mCurrentState.position=position;  mCurrentState.velocity=velocity;  if (mTimeAccumulator > 0) {    interpolate(mTimeAccumulator / SOLVER_TIMESTEP_SEC);  }  if (isAtRest() || (mOvershootClampingEnabled && isOvershooting())) {    mStartValue=mEndValue;    mCurrentState.position=mEndValue;    setVelocity(0);    isAtRest=true;  }  boolean notifyActivate=false;  if (mWasAtRest) {    mWasAtRest=false;    notifyActivate=true;  }  boolean notifyAtRest=false;  if (isAtRest) {    mWasAtRest=true;    notifyAtRest=true;  }  for (  SpringListener listener : mListeners) {    if (notifyActivate) {      listener.onSpringActivate(this);    }    listener.onSpringUpdate(this);    if (notifyAtRest) {      listener.onSpringAtRest(this);    }  }}  }
class C{  private void finishLaunch(){  mCurrentRunnable=null;  if (mQueue.size() != 0) {    mCurrentRunnable=mQueue.remove(0);    mCurrentRunnable.launch();  }}  }
class C{  private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  public static float nextUp(final float a){  return nextAfter(a,Float.POSITIVE_INFINITY);}  }
class C{  public int length(){  return toString().length();}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public static void appendText(InputConnection connection,String newText){  if (connection == null) {    return;  }  connection.finishComposingText();  CharSequence charBeforeCursor=connection.getTextBeforeCursor(1,0);  if (charBeforeCursor != null && !charBeforeCursor.equals(" ") && (charBeforeCursor.length() > 0)) {    newText=" " + newText;  }  connection.setComposingText(newText,1);}  }
class C{  public static IPath generateArtifactPath(IPath repositoryBase,String groupId,String version,String artifactId,String artifactNameSuffix){  if (repositoryBase == null || repositoryBase.isEmpty()) {    return null;  }  if (StringUtilities.isEmpty(groupId) || StringUtilities.isEmpty(version) || StringUtilities.isEmpty(artifactId)|| StringUtilities.isEmpty(artifactNameSuffix)) {    return null;  }  return repositoryBase.append(groupId.replace('.','/')).append(artifactId).append(version).append(artifactId + '-' + version+ artifactNameSuffix);}  }
class C{  public void addProperty(Property property){  if (properties == null) {    properties=new ArrayList<Property>();  }  properties.add(property);}  }
class C{  public List<VirtualArrayRestRep> findByConnectedHost(URI hostId,ResourceFilter<VirtualArrayRestRep> filter){  return search().byHost(hostId).filter(filter).run();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.CONSTRAINT_RULE__CONSTRAINTS:    getConstraints().clear();  return;}super.eUnset(featureID);}  }
class C{  public static boolean isNullOrEmpty(final String str){  return null == str || str.isEmpty();}  }
class C{  public static long encodeZigZag64(final long n){  return (n << 1) ^ (n >> 63);}  }
class C{  public URIHandler createURIHandler(URIConverter converter){  return createURIHandler(classLoader,converter);}  }
class C{  private void startWindow(int AD_Workbench_ID,int AD_Window_ID){  AWindow frame=(AWindow)Env.showWindow(AD_Window_ID);  if (frame != null) {    m_menu.getWindowManager().add(frame);    return;  }  if (Ini.isPropertyBool(Ini.P_SINGLE_INSTANCE_PER_WINDOW)) {    frame=m_menu.getWindowManager().find(AD_Window_ID);    if (frame != null) {      frame.toFront();      return;    }  }  SwingUtilities.invokeLater(m_updatePB);  frame=new AWindow(m_menu.getGraphicsConfiguration());  boolean OK=false;  if (AD_Workbench_ID != 0)   OK=frame.initWorkbench(AD_Workbench_ID); else   OK=frame.initWindow(AD_Window_ID,null);  if (!OK)   return;  SwingUtilities.invokeLater(m_updatePB);  if (Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED)) {    AEnv.showMaximized(frame);  }  SwingUtilities.invokeLater(m_updatePB);  if (!(Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED))) {    frame.validate();    AEnv.showCenterScreen(frame);  }  m_menu.getWindowManager().add(frame);  frame=null;}  }
class C{  public static String formatAmount(double amount,Locale locale){  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getInstance(locale);  nf.setMinimumFractionDigits(2);  nf.setMaximumFractionDigits(2);  return nf.format(amount);}  }
class C{  public boolean isSelected(){  return m_selected;}  }
class C{  private void inflateLayout(Context context){  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  inflater.inflate(R.layout.compound_follow,this,true);  followButton=(ImageView)findViewById(R.id.follow_button);  unfollowButton=(ImageView)findViewById(R.id.unfollow_button);}  }
class C{  public final void testGetPublicExponent(){  RSAKeyGenParameterSpec rkgps=new RSAKeyGenParameterSpec(512,BigInteger.valueOf(0L));  assertEquals(0,rkgps.getPublicExponent().intValue());}  }
class C{  public boolean isNoEmitHelpers(){  return noEmitHelpers;}  }
class C{  private String sendMessage(String endpoint,String msg){  LOGGER.config(null);  String returnValue="-1";  try {    WebSocketContainer container=ContainerProvider.getWebSocketContainer();    String uri=serviceUrl + endpoint;    Session session=container.connectToServer(this,URI.create(uri));    session.getBasicRemote().sendText(msg != null ? msg : "");    returnValue=session.getId();  } catch (  DeploymentException|IOException ex) {    LOGGER.warning(ex.getMessage());  }  return returnValue;}  }
class C{  public void insert(final FluoClient fluo,final Collection<RyaStatement> triples,final Optional<String> visibility){  checkNotNull(fluo);  checkNotNull(triples);  checkNotNull(visibility);  try (Transaction tx=fluo.newTransaction()){    for (    final RyaStatement triple : triples) {      try {        tx.set(Bytes.of(spoFormat(triple)),FluoQueryColumns.TRIPLES,Bytes.of(visibility.or("")));      } catch (      final TripleRowResolverException e) {        log.error("Could not convert a Triple into the SPO format: " + triple);      }    }    tx.commit();  } }  }
class C{  public void testDateEscapeSequenceWithWhitespaces() throws Exception {  check("'2016-08-26'","{ d '2016-08-26'}");  check("'2016-08-26'","{   d  '2016-08-26'}");  check("'2016-08-26'","{ \n d\n'2016-08-26'}");}  }
class C{  public boolean removeIncidentEdge(Edge edge){  return getIncidentEdges().remove(edge);}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsMultimap(DataflowRunner runner,View.AsMultimap<K,V> transform){  this.runner=runner;}  }
class C{  @Override public boolean isEmpty(){  return (heapSize == 0);}  }
class C{  public DataSourceIterator(){  col=0;  row=0;}  }
class C{  public void addSubTree(int index,List<Node> children){  List<NodeDescriptor> nodeDescriptors=convertTreeNodesHelper(children);  roots.addChildren(index,nodeDescriptors);  List<Node> nodes=new ArrayList<>();  for (  NodeDescriptor child : nodeDescriptors) {    nodes.add(child.getNode());  }  if (!nodes.isEmpty()) {    fireEvent(new StoreAddEvent(index,nodes));  }}  }
class C{  public Marketplace(String marketplaceId){  this();  setMarketplaceId(marketplaceId);}  }
class C{  public void close(){  super.close();  CloseableUtils.tryToClose(mSocketServer);}  }
class C{  public FastByteArrayOutputStream(int initialSize){  buf=new byte[initialSize];  bumpLen=DEFAULT_BUMP_SIZE;}  }
class C{  public void initPresentation(){  createHelpWindow();}  }
class C{  public boolean isDST(){  return _isDaylightTime;}  }
class C{  public void test_HA3(){}  }
class C{  public static String toOriginalString(List<FeatureLabel> sentence){  StringBuilder text=new StringBuilder();  for (int i=0, sz=sentence.size(); i < sz; i++) {    FeatureLabel iw=sentence.get(i);    text.append(iw.before());    text.append(iw.current());    if (i == sz - 1) {      text.append(iw.after());    }  }  return text.toString();}  }
class C{  public void putT61String(String s) throws IOException {  writeString(s,DerValue.tag_T61String,"ISO-8859-1");}  }
class C{  public void writeString(String headerName) throws IOException {  byte[] bytes=headerName.getBytes("UTF-8");  writeInt(bytes.length,PREFIX_8_BITS,0);  out.write(bytes);}  }
class C{  public static <T>AddQuery<T> start(T query,long correlationId,String type,Object additionalData){  return new AddQuery(RequestData.builder().query(query).correlationId(correlationId).type(type).additionalData(additionalData).build());}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK) {    m_script.setScript(editor.getText());    dispose();  } else   if (e.getSource() == bCancel) {    m_script.setScript(m_origScript);    dispose();  } else   if (e.getSource() == bProcess)   actionProcess(); else   if (e.getSource() == bValidate)   actionValidate(); else   if (e.getSource() == bHelp) {    Help h=new Help(this,Msg.getMsg(Env.getCtx(),"ScriptHelp"),getClass().getResource("Script.html"));    h.setVisible(true);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public IndTestKciMatlab(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  List<Node> nodes=dataSet.getVariables();  this.variables=Collections.unmodifiableList(nodes);  setAlpha(alpha);  this.dataSet=dataSet;  data=this.dataSet.getDoubleData();  _data=data.toArray();  nodeMap=new HashMap<>();  for (int i=0; i < nodes.size(); i++) {    nodeMap.put(nodes.get(i),i);  }  numTests=0;}  }
class C{  public static Date stringToDate(String date) throws ParseException, IllegalArgumentException {  SimpleDateFormat simpleDateFormat;  Pattern pattern;  Locale.setDefault(Locale.US);  pattern=Pattern.compile("[A-Z][a-z]{2} [0-9]{1,2} ([0-9]{2}:){1,2}[0-9]{2} [0-9]{4} [A-Z]{3}");  if (pattern.matcher(date).matches()) {    simpleDateFormat=new SimpleDateFormat("MMM d HH:mm:ss yyy ZZZ");    return simpleDateFormat.parse(date);  }  pattern=Pattern.compile("[A-Z][a-z]{2} [A-Z][a-z]{2} [0-9]{1,2} ([0-9]{2}:){1,2}[0-9]{2} [A-Z]{3,4} [0-9]{4}");  if (pattern.matcher(date).matches()) {    simpleDateFormat=new SimpleDateFormat("EEE MMM d HH:mm:ss ZZZ yyyy");    return simpleDateFormat.parse(date);  }  throw new IllegalArgumentException("Unknown date format.");}  }
class C{  public synchronized boolean recheckOffline(){  return recheckOffline != -1 && System.currentTimeMillis() - recheckOffline > RECHECK_OFFLINE_DELAY;}  }
class C{  private void update(EnumerationContext ctx){  logInfo("Updating Local VMs");  AtomicInteger numOfUpdates=new AtomicInteger(ctx.computeStates.size());  ctx.computeStates.forEach(null);}  }
class C{  public boolean isStdOutAppend(){  return stdOutAppend;}  }
class C{  @IgniteIgnore(value="https://issues.apache.org/jira/browse/IGNITE-590",forceFailure=true) public void testIdleConnection() throws Exception {  int srvsCnt=4;  for (int i=0; i < srvsCnt; i++)   runServer(i,false);  GridClient client=client();  try {    assertEquals(1,srvs[0].getConnectCount());    Thread.sleep(35000);    assertEquals(1,srvs[0].getDisconnectCount());    for (int i=1; i < srvsCnt; i++)     assertEquals(0,srvs[i].getConnectCount());    srvs[0].resetCounters();    client.compute().refreshTopology(false,false);    assertEquals(1,srvs[0].getConnectCount());    for (int i=1; i < srvsCnt; i++)     assertEquals(0,srvs[i].getConnectCount());  }  finally {    GridClientFactory.stop(client.id());  }}  }
class C{  public MultiwayMinPQ(int d){  if (d < 2)   throw new IllegalArgumentException("Dimension should be 2 or over");  this.d=d;  order=1;  keys=(Key[])new Comparable[d << 1];  comp=new MyComparator();}  }
class C{  public byte[] decrypt(byte[] crypt){  int[] buffer=new int[crypt.length / 4];  pack(crypt,buffer,0);  unbrew(buffer);  return unpack(buffer,1,buffer[0]);}  }
class C{  public static boolean isStateEnabled(int pname){  if (EnableQueryStates) {    return pipelineState.isEnabled(pname);  }  return false;}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  putAllImpl(map);}  }
class C{  public static Bitmap scaleBitmap(String path,ContentResolver mContentResolver,int maxSize){  Uri uri=Uri.fromFile(new File(path));  InputStream in=null;  try {    final int IMAGE_MAX_SIZE=maxSize;    in=mContentResolver.openInputStream(uri);    BitmapFactory.Options o=new BitmapFactory.Options();    o.inJustDecodeBounds=true;    BitmapFactory.decodeStream(in,null,o);    in.close();    int scale=1;    while ((o.outWidth * o.outHeight) * (1 / Math.pow(scale,2)) > IMAGE_MAX_SIZE) {      scale++;    }    LogCS.d("LOG","scale = " + scale + ", orig-width: "+ o.outWidth+ ", orig-height: "+ o.outHeight);    Bitmap b=null;    in=mContentResolver.openInputStream(uri);    if (scale > 1) {      scale--;      o=new BitmapFactory.Options();      o.inSampleSize=scale;      b=BitmapFactory.decodeStream(in,null,o);      int height=b.getHeight();      int width=b.getWidth();      LogCS.d("LOG","1th scale operation dimenions - width: " + width + ", height: "+ height);      double y=Math.sqrt(IMAGE_MAX_SIZE / (((double)width) / height));      double x=(y / height) * width;      Bitmap scaledBitmap=Bitmap.createScaledBitmap(b,(int)x,(int)y,true);      b.recycle();      b=scaledBitmap;      System.gc();    } else {      b=BitmapFactory.decodeStream(in);    }    in.close();    LogCS.d("LOG","bitmap size - width: " + b.getWidth() + ", height: "+ b.getHeight());    return b;  } catch (  IOException e) {    Log.e("LOG",e.getMessage(),e);    return null;  }}  }
class C{  public boolean isSparse(){  return false;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public boolean isTransient(){  return false;}  }
class C{  int nextUid(){  return m_docOrderCount++;}  }
class C{  public boolean isWakeOnLanSupported(){  return wakeOnLanSupported;}  }
class C{  private ResponseMessage upload() throws IOException {  long start=resume ? getNextStartByteFromServer() : 0L;  while (uploader.getUploadState().equals(UploadState.IN_PROGRESS)) {    long length=Math.min((uploader.getData().length() - start),uploader.getChunkSize());    HttpURLConnection connection=urlConnectionFactory.create(uploader.getUrl());    connection.setDoOutput(true);    connection.setDoInput(true);    connection.setRequestMethod(uploader.getHttpRequestMethod().toString());    setHeaders(connection,start,length);    OutputStream out=connection.getOutputStream();    try {      writeSlice(start,length,out);      out.close();switch (connection.getResponseCode()) {case 308:        String range=connection.getHeaderField("Range");      if (range != null) {        start=getNextByteIndexFromRangeHeader(range);      } else {        start=start + length;      }    String location=connection.getHeaderField("Location");  if (location != null) {    uploader.setUrl(new URL(location));  }uploader.getBackoffPolicy().reset();break;case 503:if (!uploader.isPaused()) {start=getNextStartByteFromServer();uploader.addNumBytesUploaded(-length);try {long backoffMs=uploader.getBackoffPolicy().getNextBackoffMs();if (backoffMs == BackoffPolicy.STOP) {  uploader.pause();} else {  Thread.sleep(backoffMs);}} catch (InterruptedException e) {}}break;default :uploader.setUploadState(UploadState.COMPLETE);uploader.sendCompletionNotification();uploader.getBackoffPolicy().reset();return new ResponseMessage(connection.getContentLength(),connection.getInputStream());}} catch (ServerException e) {if (!uploader.isPaused()) {start=getNextStartByteFromServer();}}catch (IOException e) {uploader.setUploadState(UploadState.CLIENT_ERROR);}}return null;}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(ActiveMQActivation.class.getName()).append('(');  buffer.append("spec=").append(spec.getClass().getName());  buffer.append(" mepf=").append(endpointFactory.getClass().getName());  buffer.append(" active=").append(deliveryActive.get());  if (spec.getDestination() != null) {    buffer.append(" destination=").append(spec.getDestination());  }  buffer.append(" transacted=").append(isDeliveryTransacted);  buffer.append(')');  return buffer.toString();}  }
class C{  public void actionPerformed(ActionEvent e){  if (ACTION_DISPOSE.equals(e.getActionCommand())) {    Object source=e.getSource();    while (source != null) {      if (source instanceof Window) {        ((Window)source).dispose();        return;      }      if (source instanceof Container)       source=((Container)source).getParent(); else       source=null;    }  } else   System.out.println("Action: " + e);}  }
class C{  public final int addAndGet(int delta){  for (; ; ) {    int current=get();    int next=current + delta;    if (compareAndSet(current,next))     return next;  }}  }
class C{  public static double matAvgDiff(Mat mat1,Mat mat2){  assertFalse("genMat is empty",mat1.empty());  assertFalse("gripMat is empty",mat2.empty());  assertTrue("Mat size is not equal. gencols: " + mat1.cols() + " gripcols: "+ mat2.cols()+ " genrows: "+ mat1.rows()+ " griprows: "+ mat2.rows(),mat1.cols() == mat2.cols() && mat1.rows() == mat2.rows());  assertTrue("Mats have different number of channels",mat1.channels() == mat2.channels());  assertTrue("Mats have different Types. Mat1 is type: " + mat1.type() + " Mat 2 is type: "+ mat2.type(),mat1.type() == mat2.type());  Mat diff=new Mat();  Core.absdiff(mat1,mat2,diff);  double matDiff=0;  for (int row=0; row < diff.rows(); row++) {    for (int col=0; col < diff.cols(); col++) {      double[] pixVal=diff.get(row,col);      double total=0;      for (      double val : pixVal) {        total+=val * val;      }      matDiff+=Math.sqrt(total);    }  }  return matDiff / (diff.rows() * diff.cols());}  }
class C{  public String toXMLBIF03(ArrayList<Integer> nodes){  StringBuffer text=new StringBuffer();  text.append(getBIFHeader());  text.append("\n");  text.append("\n");  text.append("<BIF VERSION=\"0.3\">\n");  text.append("<NETWORK>\n");  text.append("<NAME>" + XMLNormalize(m_Instances.relationName()) + "</NAME>\n");  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    text.append("<VARIABLE TYPE=\"nature\">\n");    text.append("<NAME>" + XMLNormalize(m_Instances.attribute(nNode).name()) + "</NAME>\n");    for (int iValue=0; iValue < m_Instances.attribute(nNode).numValues(); iValue++) {      text.append("<OUTCOME>" + XMLNormalize(m_Instances.attribute(nNode).value(iValue)) + "</OUTCOME>\n");    }    text.append("<PROPERTY>position = (" + getPositionX(nNode) + ","+ getPositionY(nNode)+ ")</PROPERTY>\n");    text.append("</VARIABLE>\n");  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    text.append("<DEFINITION>\n");    text.append("<FOR>" + XMLNormalize(m_Instances.attribute(nNode).name()) + "</FOR>\n");    for (int iParent=0; iParent < m_ParentSets[nNode].getNrOfParents(); iParent++) {      text.append("<GIVEN>" + XMLNormalize(m_Instances.attribute(m_ParentSets[nNode].getParent(iParent)).name()) + "</GIVEN>\n");    }    text.append("<TABLE>\n");    for (int iParent=0; iParent < m_ParentSets[nNode].getCardinalityOfParents(); iParent++) {      for (int iValue=0; iValue < m_Instances.attribute(nNode).numValues(); iValue++) {        text.append(m_Distributions[nNode][iParent].getProbability(iValue));        text.append(' ');      }      text.append('\n');    }    text.append("</TABLE>\n");    text.append("</DEFINITION>\n");  }  text.append("</NETWORK>\n");  text.append("</BIF>\n");  return text.toString();}  }
class C{  protected MouseInputListener createMouseInputListener(){  return new MouseInputHandler();}  }
class C{  private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());  if (table == null || table.getTableId() != tableEvent.getTableId()) {    prepareMetadataConnection();    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);    if (table != null) {      table.setTableId(tableEvent.getTableId());      metadataCache.store(table);    }  } else   if (logger.isDebugEnabled())   logger.debug("Table " + tableEvent.getDatabaseName() + "."+ tableEvent.getTableName()+ " found in cache.");  if (table == null) {    logger.warn("No metadata found for table " + tableEvent.getDatabaseName() + "."+ tableEvent.getTableName());  } else {    tableEvent.setTable(table);  }}  }
class C{  public DailyTimeIntervalTriggerImpl(String name,String group,Date startTime,Date endTime,TimeOfDay startTimeOfDay,TimeOfDay endTimeOfDay,IntervalUnit intervalUnit,int repeatInterval){  super(name,group);  setStartTime(startTime);  setEndTime(endTime);  setRepeatIntervalUnit(intervalUnit);  setRepeatInterval(repeatInterval);  setStartTimeOfDay(startTimeOfDay);  setEndTimeOfDay(endTimeOfDay);}  }
class C{  protected void fillPostingType(Listbox cb){  int AD_Reference_ID=125;  ValueNamePair[] pt=MRefList.getList(Env.getCtx(),AD_Reference_ID,true);  for (int i=0; i < pt.length; i++) {    cb.appendItem(pt[i].getName(),pt[i]);  }}  }
class C{  @Override public boolean onKeyPreIme(int keyCode,KeyEvent event){  if (TextUtils.isEmpty(getText().toString()) && keyCode == KeyEvent.KEYCODE_DEL)   return true; else   return super.onKeyPreIme(keyCode,event);}  }
class C{  public boolean hasClass(String className){  return getCache().mapClassToCP.containsKey(className);}  }
class C{  public GitConflictException(String message){  super(message);}  }
class C{  protected PackagingUnit(){}  }
class C{  public int nextSeed(){  return RandomSeedTable.getSeedAtRowColumn(row++,column);}  }
class C{  public boolean isMemberOfSystemGroup(String tenantName,PrincipalId principalId,String groupName) throws Exception {  return getService().isMemberOfSystemGroup(tenantName,principalId,groupName,this.getServiceContext());}  }
class C{  public void testDeployAopStatically() throws Exception {  Deployable aop=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-aop"),DeployableType.AOP);  getLocalContainer().getConfiguration().addDeployable(aop);  getLocalContainer().start();  assertEquals(State.STARTED,getContainer().getState());  MBeanServerConnection server=createMBeanServerConnection();  ObjectName objectName=ObjectName.getInstance(JBOSSAOP_ASPECTMANAGER_OBJECT_NAME);  String pointcuts=(String)server.invoke(objectName,"pointcuts",new Object[]{},new String[]{});  getLogger().debug("Registered aop pointcuts: " + pointcuts.toString(),this.getClass().getName());  assertTrue("Dummy cargo aop pointcut not found",pointcuts.contains("cargoTestDataSimpleAop"));  getLocalContainer().stop();}  }
class C{  public InvalidRequestException(String message){  this(message,null);}  }
class C{  public AbstractQuote(Ticker ticker,QuoteType type,ZonedDateTime timeStamp){  this.ticker=ticker;  this.type=type;  this.timeStamp=timeStamp;}  }
class C{  public int diff_xIndex(LinkedList<Diff> diffs,int loc){  int chars1=0;  int chars2=0;  int last_chars1=0;  int last_chars2=0;  Diff lastDiff=null;  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      chars1+=aDiff.text.length();    }    if (aDiff.operation != Operation.DELETE) {      chars2+=aDiff.text.length();    }    if (chars1 > loc) {      lastDiff=aDiff;      break;    }    last_chars1=chars1;    last_chars2=chars2;  }  if (lastDiff != null && lastDiff.operation == Operation.DELETE) {    return last_chars2;  }  return last_chars2 + (loc - last_chars1);}  }
class C{  public static boolean equalsWithThrowable(ErThrowable erThrowable,Throwable throwable){  if (!erThrowable.getDetailMessage().equals(throwable.getMessage())) {    return false;  }  for (int i=0; i < erThrowable.getStackTraceElements().length; i++) {    StackTraceElement el=throwable.getStackTrace()[i];    ErStackTraceElement rel=erThrowable.getStackTraceElements()[i];    if (!equalsStackTraceElements(rel,el)) {      return false;    }  }  return true;}  }
class C{  public RequestHandle put(String url,ResponseHandlerInterface responseHandler){  return put(null,url,null,responseHandler);}  }
class C{  public static String makeArgument(final String propertyName,final String value){  return "-D" + propertyName + "="+ value;}  }
class C{  public void printRuleSet(final EvolutionState state,final int log){  printRuleSet(state,log,Output.V_VERBOSE);}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public ResourceServerDTO add(ResourceServerDTO resourceServerDTO){  try {    ResourceServer resourceServer=ResourceServerMapper.getResourceServer(resourceServerDTO);    getIDMClient().addResourceServer(this.tenant,resourceServer);    return ResourceServerMapper.getResourceServerDTO(getIDMClient().getResourceServer(this.tenant,resourceServer.getName()));  } catch (  NoSuchTenantException e) {    logger.debug("Failed to add resource server for tenant '{}' due to missing tenant",this.tenant,e);    throw new NotFoundException(this.sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException e) {    logger.debug("Failed to add resource server for tenant '{}' due to a client side error",this.tenant,e);    throw new BadRequestException(this.sm.getString("res.resourceserver.create.failed",resourceServerDTO.getName(),this.tenant),e);  }catch (  Exception e) {    logger.error("Failed to add resource server for tenant '{}' due to a server side error",this.tenant,e);    throw new InternalServerErrorException(this.sm.getString("ec.500"),e);  }}  }
class C{  public static SolrDocumentList docListToSolrDocumentList(DocList docs,SolrIndexSearcher searcher,Set<String> fields,Map<SolrDocument,Integer> ids) throws IOException {  IndexSchema schema=searcher.getSchema();  SolrDocumentList list=new SolrDocumentList();  list.setNumFound(docs.matches());  list.setMaxScore(docs.maxScore());  list.setStart(docs.offset());  DocIterator dit=docs.iterator();  while (dit.hasNext()) {    int docid=dit.nextDoc();    Document luceneDoc=searcher.doc(docid,fields);    SolrDocument doc=new SolrDocument();    for (    IndexableField field : luceneDoc) {      if (null == fields || fields.contains(field.name())) {        SchemaField sf=schema.getField(field.name());        doc.addField(field.name(),sf.getType().toObject(field));      }    }    if (docs.hasScores() && (null == fields || fields.contains("score"))) {      doc.addField("score",dit.score());    }    list.add(doc);    if (ids != null) {      ids.put(doc,new Integer(docid));    }  }  return list;}  }
class C{  private TagNode findElement(ITagNodeCondition condition,boolean isRecursive){  if (condition != null) {    for (    Object item : children) {      if (item instanceof TagNode) {        TagNode currNode=(TagNode)item;        if (condition.satisfy(currNode)) {          return currNode;        } else         if (isRecursive) {          TagNode inner=currNode.findElement(condition,isRecursive);          if (inner != null) {            return inner;          }        }      }    }  }  return null;}  }
class C{  public PhotoFeed(BaseFeed<?,?> sourceFeed){  super(sourceFeed);  getCategories().add(PhotoData.PHOTO_CATEGORY);  this.delegate=new PhotoDataImpl(this);}  }
class C{  public SamRegionRestriction(String restriction){  super(restriction);}  }
class C{  public RuleCase(Condition condition,RuleOutput output){  this.condition=condition;  this.output=output;}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  public XYSeries(String title,int scaleNumber){  mTitle=title;  mScaleNumber=scaleNumber;  initRange();}  }
class C{  public long tryConvertToReadLock(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break; else       if (m < RFULL) {        if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))         return next;      } else       if ((next=tryIncReaderOverflow(s)) != 0L)       return next;    } else     if (m == WBIT) {      if (a != m)       break;      state=next=s + (WBIT + RUNIT);      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a != 0L && a < WBIT)     return stamp; else     break;  }  return 0L;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public boolean contains(char ch){  for (Iterator it=set.iterator(); it.hasNext(); ) {    CharRange range=(CharRange)it.next();    if (range.contains(ch)) {      return true;    }  }  return false;}  }
class C{  public Writer write(Writer writer) throws JSONException {  try {    boolean b=false;    int len=length();    writer.write('[');    for (int i=0; i < len; i+=1) {      if (b) {        writer.write(',');      }      Object v=get(i);      if (v instanceof JSONObject) {        ((JSONObject)v).write(writer);      } else       if (v instanceof JSONArray) {        ((JSONArray)v).write(writer);      } else {        writer.write(JSONObject.valueToString(v));      }      b=true;    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.835 -0500",hash_original_method="1E5C167C76FF3FF0E5E9EED4F2394FD5",hash_generated_method="ECB6544B74373497ABBCEAA760E25BB2") public synchronized final void incrementProgressBy(int diff){  setProgress(mProgress + diff);}  }
class C{  public HtmlDocumentBuilder(DOMImplementation implementation){  this(implementation,XmlViolationPolicy.ALTER_INFOSET);}  }
class C{  public void toggleVisibility(String type){  Map<String,Boolean> visibilityMap=getVisibilityMap();  Boolean visibility=visibilityMap.get(type);  if (visibility != null)   visibilityMap.put(type,!visibility.booleanValue());}  }
class C{  public static float toPixelFromDIP(double value){  return toPixelFromDIP((float)value);}  }
class C{  public SlowAvailableExpressions(Body b){  SlowAvailableExpressionsAnalysis analysis=new SlowAvailableExpressionsAnalysis(new ExceptionalUnitGraph(b));{    unitToPairsAfter=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToPairsBefore=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsAfter=new HashMap<Unit,Chain>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsBefore=new HashMap<Unit,Chain>(b.getUnits().size() * 2 + 1,0.7f);    Iterator unitIt=b.getUnits().iterator();    while (unitIt.hasNext()) {      Unit s=(Unit)unitIt.next();      FlowSet set=(FlowSet)analysis.getFlowBefore(s);      List<UnitValueBoxPair> pairsBefore=new ArrayList<UnitValueBoxPair>();      List<UnitValueBoxPair> pairsAfter=new ArrayList<UnitValueBoxPair>();      Chain equivsBefore=new HashChain();      Chain equivsAfter=new HashChain();      List setAsList=set.toList();      Iterator si=setAsList.iterator();      while (si.hasNext()) {        Value v=(Value)si.next();        Stmt containingStmt=analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        EquivalentValue ev=new EquivalentValue(v);        pairsBefore.add(p);        if (!equivsBefore.contains(ev))         equivsBefore.add(ev);      }      unitToPairsBefore.put(s,pairsBefore);      unitToEquivsBefore.put(s,equivsBefore);      set=(FlowSet)analysis.getFlowAfter(s);      setAsList=set.toList();      si=setAsList.iterator();      while (si.hasNext()) {        Value v=(Value)si.next();        Stmt containingStmt=analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        EquivalentValue ev=new EquivalentValue(v);        pairsAfter.add(p);        if (!equivsAfter.contains(ev))         equivsAfter.add(ev);      }      unitToPairsAfter.put(s,pairsAfter);      unitToEquivsAfter.put(s,equivsAfter);    }  }}  }
class C{  @Override public void process(ArrayList<K> tuple){  processTuple(tuple);}  }
class C{  private void refill() throws IOException {  if (eof)   return;  int bytesRead=in.read(inputBuffer);  boolean success;  if (bytesRead == -1) {    eof=true;    success=coder.process(EMPTY,0,0,true);  } else {    success=coder.process(inputBuffer,0,bytesRead,false);  }  if (!success) {    throw new Base64DataException("bad base-64");  }  outputEnd=coder.op;  outputStart=0;}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar='z';  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (int c='0'; c <= '9'; c++) {    octets[c]=true;  }  for (int c='A'; c <= 'Z'; c++) {    octets[c]=true;  }  for (int c='a'; c <= 'z'; c++) {    octets[c]=true;  }  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  public boolean forEachValue(TIntProcedure procedure){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  @Override public void process() throws MigrationCallbackException {  DbClient dbClient=getDbClient();  try {    List<URI> smisProviderURIList=dbClient.queryByType(SMISProvider.class,true);    Iterator<SMISProvider> smisProviderListIterator=dbClient.queryIterativeObjects(SMISProvider.class,smisProviderURIList);    while (smisProviderListIterator.hasNext()) {      SMISProvider smisProvider=smisProviderListIterator.next();      StorageProvider newStorageProvider=createNewStorageProviderInstance(smisProvider);      dbClient.createObject(newStorageProvider);      StringSet storageSystemSet=smisProvider.getStorageSystems();      if (storageSystemSet != null) {        for (        String strStorageSystem : storageSystemSet) {          URI storageSystemURI=URI.create(strStorageSystem);          StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageSystemURI);          updateStorageProvidersforStorageSystems(dbClient,storageSystem,smisProvider,newStorageProvider);          smisProvider.setInactive(true);          dbClient.persistObject(smisProvider);        }      }    }    List<URI> storageSystemURIs=dbClient.queryByType(StorageSystem.class,true);    Iterator<StorageSystem> storageSystemIter=dbClient.queryIterativeObjects(StorageSystem.class,storageSystemURIs);    while (storageSystemIter.hasNext()) {      StorageSystem storageSystem=storageSystemIter.next();      if (DiscoveredDataObject.Type.vplex.name().equals(storageSystem.getSystemType())) {        createStorageProviderForVPlexSystem(storageSystem);      }    }  } catch (  Exception e) {    log.error("Exception occured while migrating SMISProvider CF to StorageProvider");    log.error(e.getMessage(),e);  }}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height / 2;  int halfWidth=width / 2;  int deltaY=Math.max(1,height / (MAX_MODULES * 8));  int deltaX=Math.max(1,width / (MAX_MODULES * 8));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 2);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth / 2);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 4);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  public UnsatisfiedLinkError(String s){  super(s);}  }
class C{  public IntegerMap<ProductionRule> waitForPurchase(final boolean bid){  return m_purchasePanel.waitForPurchase(bid);}  }
class C{  public void load(Element element,Object o){  Editor ed=null;  BlockContentsIcon l;  if (o instanceof LayoutEditor) {    ed=(LayoutEditor)o;    l=new jmri.jmrit.display.layoutEditor.BlockContentsIcon("   ",(LayoutEditor)ed);  } else   if (o instanceof jmri.jmrit.display.Editor) {    ed=(Editor)o;    l=new BlockContentsIcon("",ed);  } else {    log.error("Unrecognizable class - " + o.getClass().getName());    return;  }  String name;  Attribute attr=element.getAttribute("blockcontents");  if (attr == null) {    log.error("incorrect information for a block contents; must use block name");    ed.loadFailed();    return;  } else {    name=attr.getValue();  }  loadTextInfo(l,element);  Block m=jmri.InstanceManager.getDefault(jmri.BlockManager.class).getBlock(name);  if (m != null) {    l.setBlock(name);  } else {    log.error("Block named '" + attr.getValue() + "' not found.");    ed.loadFailed();  }  Attribute a=element.getAttribute("selectable");  if (a != null && a.getValue().equals("yes")) {    l.setSelectable(true);  } else {    l.setSelectable(false);  }  List<Element> items=element.getChildren("blockstate");  for (int i=0; i < items.size(); i++) {    Element item=items.get(i);    String iconName=item.getAttribute("icon").getValue();    NamedIcon icon=NamedIcon.getIconByName(iconName);    if (icon == null) {      icon=ed.loadFailed("Memory " + name,iconName);      if (icon == null) {        log.info("Memory \"" + name + "\" icon removed for url= "+ iconName);      }    }    if (icon != null) {      String keyValue=item.getAttribute("value").getValue();      l.addKeyAndIcon(icon,keyValue);    }  }  ed.putItem(l);  loadCommonAttributes(l,Editor.MEMORIES,element);  int x=0;  int y=0;  try {    x=element.getAttribute("x").getIntValue();    y=element.getAttribute("y").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert positional attribute");  }  l.setOriginalLocation(x,y);  l.displayState();}  }
class C{  protected static List<HostScsiDiskPartition> listPartitions(Datastore datastore){  List<HostScsiDiskPartition> partitions=Lists.newArrayList();  if (datastore.getInfo() instanceof VmfsDatastoreInfo) {    HostVmfsVolume volume=((VmfsDatastoreInfo)datastore.getInfo()).getVmfs();    addItems(partitions,volume.getExtent());  }  return partitions;}  }
class C{  public JMapper(final Class<D> destination,final Class<S> source,final ChooseConfig config,final String xml){  try {    if (isNull(destination))     Error.nullMappedClass("Destination");    if (isNull(source))     Error.nullMappedClass("Source");    if (destination.isInterface())     Error.interfaceClass("Destination");    if (source.isInterface())     Error.interfaceClass("Source");    this.mapper=createMapper(from(source).to(destination).analyzing(config).presentIn(xml));  } catch (  Throwable e) {    JmapperLog.ERROR(e);  }}  }
class C{  public String estimatorTypeTipText(){  return "The density estimator to use.";}  }
class C{  public boolean addMouseListener(final MapMouseListener listener){  if (listener == null) {    throw new IllegalArgumentException("The argument must not be null");  }  return listeners.add(listener);}  }
class C{  public OIDCClientDTO registerClient(URI redirectURI) throws AuthException {  return registerClient(redirectURI,redirectURI,redirectURI);}  }
class C{  public SigemException(String message){  this(message,null);}  }
class C{  public Word plus(Offset w2){  return null;}  }
class C{  public ServerCommit acquire(OperationEntry entry,ServerSessionContext session,long timestamp){  ServerCommit commit=pool.poll();  if (commit == null) {    commit=new ServerCommit(this,log);  }  commit.reset(entry,session,timestamp);  return commit;}  }
class C{  public void testLibraryPathSearchOrder() throws IOException {  File tmp=new File(System.getProperty("java.io.tmpdir"));  File systemLibPath=new File(tmp,"systemLibPath");  File applicationLibPath=new File(tmp,"applicationLibPath");  makeTempFile(systemLibPath,"libduplicated.so");  File applicationLib=makeTempFile(applicationLibPath,"libduplicated.so");  System.setProperty("java.library.path",systemLibPath.toString());  PathClassLoader pathClassLoader=new PathClassLoader(applicationLibPath.toString(),applicationLibPath.toString(),getClass().getClassLoader());  String path=pathClassLoader.findLibrary("duplicated");  assertEquals(applicationLib.toString(),path);}  }
class C{  public LessThanOrEqual(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  public DoubleVector(double v[]){  if (v == null) {    V=new double[0];    setSize(0);  } else {    V=v;    setSize(v.length);  }}  }
class C{  public static boolean testAarAar(Vector2dc minA,Vector2dc maxA,Vector2dc minB,Vector2dc maxB){  return testAarAar(minA.x(),minA.y(),maxA.x(),maxA.y(),minB.x(),minB.y(),maxB.x(),maxB.y());}  }
class C{  public boolean remove(P model){  return getModelStore().remove(model);}  }
class C{  protected Range findRangeBounds(XYDataset dataset,boolean includeInterval){  if (dataset == null) {    return null;  }  if (getDataBoundsIncludesVisibleSeriesOnly()) {    List visibleSeriesKeys=new ArrayList();    int seriesCount=dataset.getSeriesCount();    for (int s=0; s < seriesCount; s++) {      if (isSeriesVisible(s)) {        visibleSeriesKeys.add(dataset.getSeriesKey(s));      }    }    Range xRange=null;    XYPlot p=getPlot();    if (p != null) {      ValueAxis xAxis=null;      int index=p.getIndexOf(this);      if (index >= 0) {        xAxis=this.plot.getDomainAxisForDataset(index);      }      if (xAxis != null) {        xRange=xAxis.getRange();      }    }    if (xRange == null) {      xRange=new Range(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);    }    return DatasetUtilities.findRangeBounds(dataset,visibleSeriesKeys,xRange,includeInterval);  }  return DatasetUtilities.findRangeBounds(dataset,includeInterval);}  }
class C{  private void addPreferenceOptions(final List<String> opts,IPreferenceStore store){  String argStr=store.getString(CheckerPreferences.PREF_CHECKER_ARGS);  List<OptionLine> optionlines=OptionLine.parseOptions(argStr);  for (  final OptionLine optLine : optionlines) {    if (optLine.isActive()) {      opts.add(optLine.getArgument());    }  }}  }
class C{  @Inline @Override public final long longRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getLongAtOffset(objref.toObject(),offset.toOffset());}  }
class C{  public void close(){  connection.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.776 -0500",hash_original_method="304E01512ABEE5D32E29AD105C8F9759",hash_generated_method="E555224E61F1C778AAEA4DCB3127EC03") public int decode(String data,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b2=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b3=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b4=decodingTable[data.charAt(i++)];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;    i=nextI(data,i,finish);  }  length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1));  return length;}  }
class C{  private byte[] assembleSenderReportPacket(){  final int FIXED_HEADER_SIZE=4;  byte V_P_RC=(byte)((RtcpPacket.VERSION << 6) | (RtcpPacket.PADDING << 5) | (0x00));  byte ss[]=RtcpPacketUtils.longToBytes(mRtcpSession.SSRC,4);  byte PT[]=RtcpPacketUtils.longToBytes(RtcpPacket.RTCP_SR,1);  byte NTP_Timestamp[]=RtcpPacketUtils.longToBytes(mRtcpSession.currentTime(),8);  short randomOffset=(short)Math.abs(mRand.nextInt() & 0x000000FF);  byte RTP_Timestamp[]=RtcpPacketUtils.longToBytes((long)mRtcpSession.tc + randomOffset,4);  byte SenderPacketCount[]=RtcpPacketUtils.longToBytes(mRtcpSession.packetCount,4);  byte SenderOctetCount[]=RtcpPacketUtils.longToBytes(mRtcpSession.octetCount,4);  byte receptionReportBlocks[]=new byte[0];  receptionReportBlocks=RtcpPacketUtils.append(receptionReportBlocks,assembleRTCPReceptionReport());  byte receptionReports=(byte)(receptionReportBlocks.length / 24);  V_P_RC=(byte)(V_P_RC | (byte)(receptionReports & 0x1F));  byte length[]=RtcpPacketUtils.longToBytes((FIXED_HEADER_SIZE + ss.length + NTP_Timestamp.length+ RTP_Timestamp.length+ SenderPacketCount.length+ SenderOctetCount.length+ receptionReportBlocks.length) / 4 - 1,2);  byte rtcpSRPacket[]=new byte[1];  rtcpSRPacket[0]=V_P_RC;  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,PT);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,length);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,ss);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,NTP_Timestamp);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,RTP_Timestamp);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,SenderPacketCount);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,SenderOctetCount);  rtcpSRPacket=RtcpPacketUtils.append(rtcpSRPacket,receptionReportBlocks);  return rtcpSRPacket;}  }
class C{  void checkSubcomponent(BEGraphNode node){  int slen=currentOOS.getCheckState().length;  int alen=currentOOS.getCheckAction().length;  boolean[] AEStateRes=new boolean[currentPEM.AEState.length];  boolean[] AEActionRes=new boolean[currentPEM.AEAction.length];  boolean[] promiseRes=new boolean[currentOOS.getPromises().length];  ObjectStack stack=new MemObjectStack(metadir,"subcomstack");  node.incNumber();  stack.push(node);  while (stack.size() != 0) {    BEGraphNode curNode=(BEGraphNode)stack.pop();    for (int i=0; i < currentPEM.AEState.length; i++) {      if (!AEStateRes[i]) {        int idx=currentPEM.AEState[i];        AEStateRes[i]=curNode.getCheckState(idx);      }    }    int nsz=curNode.nextSize();    for (int i=0; i < nsz; i++) {      BEGraphNode node1=curNode.nextAt(i);      long num=node1.getNumber();      if (num >= thirdNum) {        for (int j=0; j < currentPEM.AEAction.length; j++) {          if (!AEActionRes[j]) {            int idx=currentPEM.AEAction[j];            AEActionRes[j]=curNode.getCheckAction(slen,alen,i,idx);          }        }      }      if (num == thirdNum) {        node1.incNumber();        stack.push(node1);      }    }    for (int i=0; i < currentOOS.getPromises().length; i++) {      LNEven promise=currentOOS.getPromises()[i];      TBPar par=curNode.getTNode(currentOOS.getTableau()).getPar();      if (par.isFulfilling(promise)) {        promiseRes[i]=true;      }    }  }  thirdNum+=2;  for (int i=0; i < currentPEM.AEState.length; i++) {    if (!AEStateRes[i]) {      return;    }  }  for (int i=0; i < currentPEM.AEAction.length; i++) {    if (!AEActionRes[i]) {      return;    }  }  for (int i=0; i < currentOOS.getPromises().length; i++) {    if (!promiseRes[i]) {      return;    }  }  try {    printErrorTrace(node);  } catch (  IOException e) {    MP.printError(EC.GENERAL,"printing an error trace",e);  }  throw new LiveException("LiveCheck: Found error trace.");}  }
class C{  public StandardXYItemLabelGenerator(String formatString,DateFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public static DefaultTableModel leftShift(DefaultTableModel self,Object row){  if (row == null) {    self.addRow((Object[])null);    return self;  }  self.addRow(buildRowData(self,row));  return self;}  }
class C{  public boolean isGradientEnabled(){  return mGradientEnabled;}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  OneStepIterator clone=(OneStepIterator)super.cloneWithReset();  clone.m_iterator=m_iterator;  return clone;}  }
class C{  protected ControllerCommand(Controller sharedController,Runnable initializer,Requirable... requirements){  this(0.0,sharedController,initializer,requirements);}  }
class C{  public boolean isClientIPExist(String clientIP){  if (StringUtils.isBlank(clientIP)) {    return false;  }  InvalidLogins invLogins=null;  try {    invLogins=(InvalidLogins)_distDataManager.getData(getZkPath(clientIP),false);  } catch (  Exception ex) {    _log.error("Unexpected exception",ex);  }  if (null == invLogins) {    _log.debug("{} doesn't in zk",clientIP);    return false;  } else {    return true;  }}  }
class C{  public void clear(){  size=0;}  }
class C{  public void animateX(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easing);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  private String createHeader(int AD_Table_ID,StringBuffer sb,StringBuffer mandatory){  String tableName="";  int accessLevel=0;  String sql="SELECT TableName, AccessLevel FROM AD_Table WHERE AD_Table_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      tableName=rs.getString(1);      accessLevel=rs.getInt(2);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (tableName == null)   throw new RuntimeException("TableName not found for ID=" + AD_Table_ID);  String accessLevelInfo=accessLevel + " ";  if (accessLevel >= 4)   accessLevelInfo+="- System ";  if (accessLevel == 2 || accessLevel == 3 || accessLevel == 6 || accessLevel == 7)   accessLevelInfo+="- Client ";  if (accessLevel == 1 || accessLevel == 3 || accessLevel == 5 || accessLevel == 7)   accessLevelInfo+="- Org ";  String className="I_" + tableName;  StringBuffer start=new StringBuffer().append(COPY).append("package ").append(packageName).append(";").append(NL);  if (!packageName.equals("org.compiere.model")) {    addImportClass("org.compiere.model.*");  }  addImportClass(java.math.BigDecimal.class);  addImportClass(org.compiere.util.KeyNamePair.class);  createImports(start);  start.append("/** Generated Interface for ").append(tableName).append("\n").append(" *  @author Adempiere (generated) \n").append(" *  @version ").append(Adempiere.MAIN_VERSION).append(NL).append(" */\n").append("public interface ").append(className).append(" {").append("\n").append("    /** TableName=").append(tableName).append(" */\n").append("    public static final String Table_Name = \"").append(tableName).append("\";\n").append("    /** AD_Table_ID=").append(AD_Table_ID).append(" */\n").append("    public static final int Table_ID = MTable.getTable_ID(Table_Name);\n").append("    KeyNamePair Model = new KeyNamePair(Table_ID, Table_Name);\n").append("    /** AccessLevel = ").append(accessLevelInfo).append("\n").append("     */\n").append("    BigDecimal accessLevel = BigDecimal.valueOf(").append(accessLevel).append(");\n").append("    /** Load Meta Data */\n");  StringBuffer end=new StringBuffer("}");  sb.insert(0,start);  sb.append(end);  return className;}  }
class C{  public byte[] timetag(){  return Bytes.toBytes(timetag);}  }
class C{  public boolean exists(String path){  try {    return curator.checkExists().forPath(path) != null;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void testTransformMessage() throws Exception {  assertTrue("Transforming a BytesMessage message into an ActiveMQBytesMessage",ActiveMQMessageTransformation.transformMessage(new ActiveMQBytesMessage(),null) instanceof ActiveMQBytesMessage);  assertTrue("Transforming a MapMessage message to an ActiveMQMapMessage",ActiveMQMessageTransformation.transformMessage(new ActiveMQMapMessage(),null) instanceof ActiveMQMapMessage);  assertTrue("Transforming an ObjectMessage message to an ActiveMQObjectMessage",ActiveMQMessageTransformation.transformMessage(new ActiveMQObjectMessage(),null) instanceof ActiveMQObjectMessage);  assertTrue("Transforming a StreamMessage message to an ActiveMQStreamMessage",ActiveMQMessageTransformation.transformMessage(new ActiveMQStreamMessage(),null) instanceof ActiveMQStreamMessage);  assertTrue("Transforming a TextMessage message to an ActiveMQTextMessage",ActiveMQMessageTransformation.transformMessage(new ActiveMQTextMessage(),null) instanceof ActiveMQTextMessage);  assertTrue("Transforming an ActiveMQMessage message to an ActiveMQMessage",ActiveMQMessageTransformation.transformMessage(new ActiveMQMessage(),null) instanceof ActiveMQMessage);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 3)   reportWrongNumberArgs();}  }
class C{  public void removeSourceFolderFromIndex(JavaProject javaProject,IPath sourceFolder,char[][] inclusionPatterns,char[][] exclusionPatterns){  if (this.jobEnd > this.jobStart) {    IndexRequest request=new IndexAllProject(javaProject,this);    if (isJobWaiting(request))     return;  }  request(new RemoveFolderFromIndex(sourceFolder,inclusionPatterns,exclusionPatterns,javaProject,this));}  }
class C{  protected void closeDatabases(final DefaultBiIndexImpl indexImpl) throws NoSuchFieldException, IllegalAccessException {  final Field firstDatabaseField=indexImpl.getClass().getSuperclass().getDeclaredField(DATABASE_FIELD_NAME);  firstDatabaseField.setAccessible(true);  final Database firstDatabase=(Database)firstDatabaseField.get(indexImpl);  if (firstDatabase != null) {    firstDatabase.close();  }  final Field secondDatabaseField=indexImpl.getClass().getDeclaredField(SECONDARY_DATABASE_FIELD_NAME);  secondDatabaseField.setAccessible(true);  final Database secondDatabase=((Database)secondDatabaseField.get(indexImpl));  if (secondDatabase != null) {    secondDatabase.close();  }}  }
class C{  public static boolean isServerActive(){  boolean contactAgain=s_server == null && s_serverTries == 0;  boolean ok=CConnection.get().isAppsServerOK(contactAgain);  if (ok) {    s_serverTries=0;    return true;  }  if (s_serverTries > 1)   return false;  CLogMgt.enable(false);  try {    s_serverTries++;    log.config("try #" + s_serverTries);    ok=CConnection.get().isAppsServerOK(true);    if (ok)     s_serverTries=0;  } catch (  Exception ex) {    ok=false;    s_server=null;  }  CLogMgt.enable(true);  return ok;}  }
class C{  protected void initSystemColorDefaults(UIDefaults table){  String[] defaultSystemColors={"desktop","#005C5C","activeCaption","#000080","activeCaptionText","#FFFFFF","activeCaptionBorder","#C0C0C0","inactiveCaption","#808080","inactiveCaptionText","#C0C0C0","inactiveCaptionBorder","#C0C0C0","window","#FFFFFF","windowBorder","#000000","windowText","#000000","menu","#C0C0C0","menuPressedItemB","#000080","menuPressedItemF","#FFFFFF","menuText","#000000","text","#C0C0C0","textText","#000000","textHighlight","#000080","textHighlightText","#FFFFFF","textInactiveText","#808080","control","#C0C0C0","controlText","#000000","controlHighlight","#C0C0C0","controlLtHighlight","#FFFFFF","controlShadow","#808080","controlDkShadow","#000000","scrollbar","#E0E0E0","info","#FFFFE1","infoText","#000000"};  loadSystemColors(table,defaultSystemColors,isNativeLookAndFeel());}  }
class C{  private HashMap<String,List<StorageHADomain>> discoverVdmPortGroups(StorageSystem system,Set<StorageHADomain> movers) throws VNXFileCollectionException, VNXException {  HashMap<String,List<StorageHADomain>> portGroups=new HashMap();  List<StorageHADomain> newPortGroups=new ArrayList<StorageHADomain>();  List<StorageHADomain> existingPortGroups=new ArrayList<StorageHADomain>();  _logger.info("Start vdm port group discovery for storage system {}",system.getId());  List<VirtualNAS> newNasServers=new ArrayList<VirtualNAS>();  List<VirtualNAS> existingNasServers=new ArrayList<VirtualNAS>();  List<VNXVdm> vdms=getVdmPortGroups(system);  _logger.debug("Number VDM found: {}",vdms.size());  VNXFileSshApi sshDmApi=new VNXFileSshApi();  sshDmApi.setConnParams(system.getIpAddress(),system.getUsername(),system.getPassword());  for (  VNXVdm vdm : vdms) {    StorageHADomain portGroup=null;    StringSet protocols=new StringSet();    if (null == vdm) {      _logger.debug("Null vdm in list of port groups.");      continue;    }    URIQueryResultList results=new URIQueryResultList();    String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,vdm.getVdmName(),NativeGUIDGenerator.ADAPTER);    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid),results);    Iterator<URI> iter=results.iterator();    while (iter.hasNext()) {      StorageHADomain tmpGroup=_dbClient.queryObject(StorageHADomain.class,iter.next());      if (tmpGroup != null && !tmpGroup.getInactive() && tmpGroup.getStorageDeviceURI().equals(system.getId())) {        portGroup=tmpGroup;        _logger.debug("Found duplicate {} ",vdm.getVdmName());        break;      }    }    Map<String,String> vdmIntfs=sshDmApi.getVDMInterfaces(vdm.getVdmName());    Set<String> intfs=null;    if (vdmIntfs != null) {      intfs=vdmIntfs.keySet();    }    if (vdmIntfs == null || intfs.isEmpty()) {      _logger.info("Ignoring VDM {} because no NFS interfaces found via ssh query",vdm.getVdmName());    } else {      _logger.info("Process VDM {} because  interfaces found {}",vdm.getVdmName(),vdmIntfs.keySet().size());    }    for (    String intf : intfs) {      String vdmCapability=vdmIntfs.get(intf);      _logger.info("Interface {} capability [{}]",vdm.getVdmName() + ":" + intf,vdmCapability);      if (vdmCapability.contains("cifs")) {        _logger.info("{} has CIFS Enabled since interfaces are found ",vdm.getVdmName(),intf + ":" + vdmCapability);        protocols.add(StorageProtocol.File.CIFS.name());      }      if (vdmCapability.contains("vdm")) {        _logger.info("{} has NFS Enabled since interfaces are found ",vdm.getVdmName(),intf + ":" + vdmCapability);        protocols.add(StorageProtocol.File.NFS.name());      }    }    List<VNXCifsServer> cifsServers=getCifServers(system,vdm.getVdmId(),"true");    CifsServerMap cifsServersMap=new CifsServerMap();    for (    VNXCifsServer cifsServer : cifsServers) {      _logger.info("Cifs Server {} for {} ",cifsServer.getName(),vdm.getVdmName());      if (!cifsServer.getInterfaces().isEmpty()) {        _logger.info("{} has CIFS Enabled since interfaces are found ",vdm.getVdmName(),cifsServer.getName() + ":" + cifsServer.getInterfaces());        protocols.add(StorageProtocol.File.CIFS.name());        NasCifsServer nasCifsServer=new NasCifsServer();        nasCifsServer.setId(cifsServer.getId());        nasCifsServer.setInterfaces(cifsServer.getInterfaces());        nasCifsServer.setMoverIdIsVdm(cifsServer.getMoverIdIsVdm());        nasCifsServer.setName(cifsServer.getName());        nasCifsServer.setType(cifsServer.getType());        nasCifsServer.setDomain(cifsServer.getDomain());        cifsServersMap.put(cifsServer.getName(),nasCifsServer);      }    }    if (protocols.isEmpty()) {      _logger.info("Ignoring VDM {} because no NFS/CIFS interfaces found ",vdm.getVdmName());      continue;    }    if (portGroup == null) {      portGroup=new StorageHADomain();      portGroup.setId(URIUtil.createId(StorageHADomain.class));      portGroup.setNativeGuid(adapterNativeGuid);      portGroup.setStorageDeviceURI(system.getId());      portGroup.setAdapterName(vdm.getVdmName());      portGroup.setName(vdm.getVdmId());      portGroup.setFileSharingProtocols(protocols);      portGroup.setVirtual(true);      portGroup.setAdapterType(StorageHADomain.HADomainType.VIRTUAL.toString());      StorageHADomain matchingParentMover=getMatchingMoverById(movers,vdm.getMoverId());      if (null != matchingParentMover) {        portGroup.setParentHADomainURI(matchingParentMover.getId());      } else {        _logger.info("Matching parent DataMover {} for {} not found ",vdm.getMoverId(),vdm.getVdmName());      }      _logger.info("Found Vdm {} at {}",vdm.getVdmName(),vdm.getVdmId() + "@" + vdm.getMoverId());      newPortGroups.add(portGroup);    } else {      portGroup.setFileSharingProtocols(protocols);      existingPortGroups.add(portGroup);    }    VirtualNAS existingNas=findvNasByNativeId(system,vdm.getVdmId());    if (existingNas != null) {      existingNas.setProtocols(protocols);      existingNas.setCifsServersMap(cifsServersMap);      existingNas.setNasState(vdm.getState());      existingNas.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      PhysicalNAS parentNas=findPhysicalNasByNativeId(system,vdm.getMoverId());      if (parentNas != null) {        existingNas.setParentNasUri(parentNas.getId());      }      existingNasServers.add(existingNas);    } else {      VirtualNAS vNas=createVirtualNas(system,vdm);      if (vNas != null) {        vNas.setProtocols(protocols);        vNas.setCifsServersMap(cifsServersMap);        newNasServers.add(vNas);      }    }  }  List<VirtualNAS> discoveredVNasServers=new ArrayList<VirtualNAS>();  if (existingNasServers != null && !existingNasServers.isEmpty()) {    _logger.info("discoverVdmPortGroups - modified VirtualNAS servers size {}",existingNasServers.size());    _dbClient.persistObject(existingNasServers);    discoveredVNasServers.addAll(existingNasServers);  }  if (newNasServers != null && !newNasServers.isEmpty()) {    _logger.info("discoverVdmPortGroups - new VirtualNAS servers size {}",newNasServers.size());    _dbClient.createObject(newNasServers);    discoveredVNasServers.addAll(newNasServers);  }  DiscoveryUtils.checkVirtualNasNotVisible(discoveredVNasServers,_dbClient,system.getId());  _logger.info("Vdm Port group discovery for storage system {} complete.",system.getId());  for (  StorageHADomain newDomain : newPortGroups) {    _logger.debug("New Storage Domain : {} : {}",newDomain.getNativeGuid(),newDomain.getAdapterName() + ":" + newDomain.getId());  }  for (  StorageHADomain domain : existingPortGroups) {    _logger.debug("Old Storage Domain : {} : {}",domain.getNativeGuid(),domain.getAdapterName() + ":" + domain.getId());  }  portGroups.put(NEW,newPortGroups);  portGroups.put(EXISTING,existingPortGroups);  return portGroups;}  }
class C{  public static void close(@Nullable Selector rsrc,@Nullable IgniteLogger log){  if (rsrc != null)   try {    if (rsrc.isOpen())     rsrc.close();  } catch (  IOException e) {    warn(log,"Failed to close resource: " + e.getMessage());  }}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  @Override public boolean isPrimary(){  for (int i=0; i < numRows; i++) {    if (!monitors[i].isPrimary())     return false;  }  return true;}  }
class C{  void optimize(){  if (gmtOffsets.size() == 1) {    transitions=null;    usedRuleRecs=null;    setDSTType(NO_DST);    return;  }  for (int i=0; i < (transitions.size() - 2); i++) {    if (transitions.get(i) == transitions.get(i + 1)) {      transitions.remove(i);      offsets.remove(i);      dstOffsets.remove(i);      i--;    }  }  for (int i=0; i < (transitions.size() - 2); i++) {    if (offsets.get(i) == offsets.get(i + 1) && dstOffsets.get(i) == dstOffsets.get(i + 1)) {      transitions.remove(i + 1);      offsets.remove(i + 1);      dstOffsets.remove(i + 1);      i--;    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.266 -0500",hash_original_method="F7577C4689C2BEF45089F3ACFFDAD03A",hash_generated_method="4A7C26FF6BC25598CE98DB0AB0B67AF4") public static boolean isJavaIdentifierStart(int codePoint){  if (codePoint < 64) {    return ((codePoint + '$') == 1);  } else   if (codePoint < 128) {    return 1 == ((0x7fffffe87fffffeL & (1L << (codePoint - 64))) + 0);  }  int type=getType(codePoint);  return ((codePoint) == 1);}  }
class C{  public static final long BuildLongLE(byte bytevec[]){  return BuildLongLE(bytevec,0);}  }
class C{  public boolean verifyServerEvidenceMessage(BigInteger serverM2) throws CryptoException {  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {    throw new CryptoException("Impossible to compute and verify M2: " + "some data are missing from the previous operations (A,M1,S)");  }  BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S);  if (computedM2.equals(serverM2)) {    this.M2=serverM2;    return true;  }  return false;}  }
class C{  public static String stripInitialWhitespace(String s){  int i=0;  while ((i < s.length()) && charInString(s.charAt(i),whitespace))   i++;  return s.substring(i);}  }
class C{  public static Join left(SqlTable<?> table,Property<?>... usingColumns){  return new Join(table,JoinType.LEFT,usingColumns);}  }
class C{  public static long pipeAllLimited(InputStream inStr,long limit,OutputStream outStr) throws IOException {  long total=0;  byte[] bs=new byte[BUFFER_SIZE];  int numRead;  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {    total+=numRead;    if (total > limit) {      throw new StreamOverflowException("Data Overflow");    }    outStr.write(bs,0,numRead);  }  return total;}  }
class C{  @Deprecated public boolean supportsAWT(){  return isAWTAvailable;}  }
class C{  private void search(Episode episode,String token,XMLRPCCallback callback){  try {    XMLRPCClient client=new XMLRPCClient(new URL(mApiUrl),mUserAgent);    Map<String,String> option=new HashMap<>();    option.put("imdbid",episode.imdbId.replace("tt",""));    option.put("season",String.format(Locale.US,"%d",episode.season));    option.put("episode",String.format(Locale.US,"%d",episode.episode));    option.put("sublanguageid","all");    client.callAsync(callback,"SearchSubtitles",token,new Object[]{option});  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public BurlapServiceException(String message,String code,Object detail){  super(message,code,detail);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void put(Integer node,double time){  map.put(node,time);}  }
class C{  public Feature(int label,int cp){  FeatureInit(label,cp);}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public String significanceLevelTipText(){  return "Significance level. Significance test (confidence metric only).";}  }
class C{  public CuboidClipboard(Vector size){  checkNotNull(size);  MainUtil.warnDeprecated(BlockArrayClipboard.class);  origin=new Vector();  offset=new Vector();  this.size=size;  this.dx=size.getBlockX();  this.dxz=dx * size.getBlockZ();  ids=new byte[dx * size.getBlockZ() * ((size.getBlockY() + 15) >> 4)][];  nbtMap=new HashMap<>();}  }
class C{  @Override public boolean removeFromWorld(){  zone.remove(npc);  board.clear();  zone.remove(board);  return true;}  }
class C{  public static EntityQuery use(Delegator delegator){  return new EntityQuery(delegator);}  }
class C{  public <T>T mapTo(final String path,final Class<T> mappingClass,final JBBPMapperCustomFieldProcessor customFieldProcessor,final int flags){  return JBBPMapper.map(this,path,mappingClass,customFieldProcessor,flags);}  }
class C{  public NodeBase find(Envelope searchEnv){  int subnodeIndex=getSubnodeIndex(searchEnv,centrex,centrey);  if (subnodeIndex == -1)   return this;  if (subnode[subnodeIndex] != null) {    Node node=subnode[subnodeIndex];    return node.find(searchEnv);  }  return this;}  }
class C{  public synchronized Iterator<E> iterator(){  return new Itr();}  }
class C{  public Model walkSAT(Set<Clause> clauses,double p,int maxFlips){  assertLegalProbability(p);  Model model=randomAssignmentToSymbolsInClauses(clauses);  for (int i=0; i < maxFlips || maxFlips < 0; i++) {    if (model.satisfies(clauses)) {      return model;    }    Clause clause=randomlySelectFalseClause(clauses,model);    if (random.nextDouble() < p) {      model=model.flip(randomlySelectSymbolFromClause(clause));    } else {      model=flipSymbolInClauseMaximizesNumberSatisfiedClauses(clause,clauses,model);    }  }  return null;}  }
class C{  public SensorNode(final VisionWorld visionWorld,final Sensor sensor){  super(visionWorld,sensor);}  }
class C{  public void receiveNotification(SipRequest notify) throws PayloadException, NetworkException {  if (!isNotifyForThisSubscriber(notify)) {    return;  }  if (logger.isActivated()) {    logger.debug("New watcher-info notification received");  }  byte[] content=notify.getContentBytes();  if (content != null) {    try {      InputSource input=new InputSource(new ByteArrayInputStream(content));      WatcherInfoParser parser=new WatcherInfoParser(input);      WatcherInfoDocument watcherinfo=parser.getWatcherInfo();      if (watcherinfo != null) {        for (        Watcher watcher : watcherinfo.getWatcherList()) {          String uri=watcher.getUri();          PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(uri);          if (number == null) {            if (logger.isActivated()) {              logger.warn("Invalid URI '" + uri + "'");            }            continue;          }          ContactId contact=ContactUtil.createContactIdFromValidatedData(number);          String status=watcher.getStatus();          String event=watcher.getEvent();          if ((status != null) && (event != null)) {            if (status.equalsIgnoreCase("pending")) {              getImsModule().getPresenceService().handlePresenceSharingInvitation(contact);            }            getImsModule().getPresenceService().handlePresenceSharingNotification(contact,status,event);          }        }      }    } catch (    ParserConfigurationException e) {      throw new PayloadException("Can't parse watcher-info notification!",e);    }catch (    SAXException e) {      throw new PayloadException("Can't parse watcher-info notification!",e);    }catch (    IOException e) {      throw new NetworkException("Can't parse watcher-info notification!",e);    }  }  SubscriptionStateHeader stateHeader=(SubscriptionStateHeader)notify.getHeader(SubscriptionStateHeader.NAME);  if ((stateHeader != null) && stateHeader.getState().equalsIgnoreCase("terminated")) {    if (logger.isActivated()) {      logger.info("Watcher-info subscription has been terminated by server");    }    terminatedByServer();  }}  }
class C{  public void deleteSnapshot(String snapshotId){  _log.info("CinderApi - start deleteSnapshot");  String deleteSnapshotUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_DELETE_SNAPSHOT,new Object[]{endPoint.getCinderTenantId(),snapshotId});  ClientResponse deleteResponse=getClient().delete(URI.create(deleteSnapshotUri));  String s=deleteResponse.getEntity(String.class);  _log.debug("Got the response {}",s);  if (deleteResponse.getStatus() == ClientResponse.Status.NOT_FOUND.getStatusCode()) {    throw CinderException.exceptions.snapshotNotFound(snapshotId);  }  if (deleteResponse.getStatus() != ClientResponse.Status.ACCEPTED.getStatusCode()) {    throw CinderException.exceptions.snapshotDeleteFailed(s);  }  _log.info("CinderApi - end deleteSnapshot");}  }
class C{  public TraceRegister(final String name,final IAddress value,final byte[] memory){  registerName=Preconditions.checkNotNull(name,"IE00730: name argument can not be null");  registerValue=Preconditions.checkNotNull(value,"IE00731: value argument can not be null");  memoryPointedToByRegister=Preconditions.checkNotNull(memory.clone(),"Error: memory.clone() argument can not be null");}  }
class C{  public SparseMatrix(int rows,int cols){  this.rows=new SparseVector[rows];  for (int i=0; i < rows; i++)   this.rows[i]=new SparseVector(cols);}  }
class C{  public boolean hasConverts(String attributeName){  return m_converts.containsKey(attributeName);}  }
class C{  public T caseThisTarget(ThisTarget object){  return null;}  }
class C{  public Mountain(){  super();}  }
class C{  public static boolean verifyVCFIntegrity(File vcfLoc,byte[] hmacToCheck,char[] password) throws FileNotFoundException, IOException {  byte[] vCardBytes=IOUtils.toByteArray(new FileInputStream(vcfLoc));  return verifyVCFIntegrity(vCardBytes,hmacToCheck,password);}  }
class C{  @ExceptionHandler(ConstraintViolationException.class) @ResponseStatus(value=HttpStatus.BAD_REQUEST) public Map<String,Object> handleConstraintViolationException(ConstraintViolationException ex){  Collection<FieldError> errors=FieldError.getErrors(ex.getConstraintViolations());  log.warn("ConstraintViolationException: " + errors.toString());  return LemonUtil.mapOf("exception","ConstraintViolationException","errors",errors);}  }
class C{  @SuppressForbidden(reason="System.out required: command line tool") public static void main(java.lang.String[] args) throws Exception {  int ins=get(0,args[0]);  int del=get(1,args[0]);  int rep=get(2,args[0]);  int nop=get(3,args[0]);  for (int i=1; i < args.length; i++) {    Diff diff=new Diff(ins,del,rep,nop);    String charset=System.getProperty("egothor.stemmer.charset","UTF-8");    try (LineNumberReader in=new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]),Charset.forName(charset)))){      for (String line=in.readLine(); line != null; line=in.readLine()) {        try {          line=line.toLowerCase(Locale.ROOT);          StringTokenizer st=new StringTokenizer(line);          String stem=st.nextToken();          System.out.println(stem + " -a");          while (st.hasMoreTokens()) {            String token=st.nextToken();            if (token.equals(stem) == false) {              System.out.println(stem + " " + diff.exec(token,stem));            }          }        } catch (        java.util.NoSuchElementException x) {        }      }    }   }}  }
class C{  private void readMoreChars() throws IOException {  if (availableCapacity(charBuffer) == 0) {    if (charBuffer.position() > 0) {      charBuffer.compact().flip();    } else {      charBuffer=grow(charBuffer);    }  }  int limit=charBuffer.limit();  int numChars=reader.read(charBuffer.array(),limit,availableCapacity(charBuffer));  if (numChars == -1) {    endOfInput=true;  } else {    charBuffer.limit(limit + numChars);  }}  }
class C{  public void onEnterElementConsumed(String uri,String localName,String qname,Attributes atts) throws SAXException {  attStack.push(currentAtts=new AttributesImpl(atts));  nsEffectiveStack.push(new Integer(nsEffectivePtr));  nsEffectivePtr=namespaces.size();}  }
class C{  private static String makeHTML(final Action action){  if (action == null) {    throw new IllegalArgumentException("action must not be null!");  }  String name=(String)action.getValue(Action.NAME);  if (name == null || name.trim().isEmpty()) {    return "";  }  if (name.contains("<") || name.contains(">")) {    return name;  }  URL iconUrl=null;  if (action instanceof ResourceAction) {    String iconName=((ResourceAction)action).getIconName();    if (iconName != null) {      iconUrl=Tools.getResource("icons/16/" + iconName);    }  }  if (iconUrl != null) {    return String.format(TEMPLATE_ICON_HTML,iconUrl.toString(),name);  } else {    if (Boolean.parseBoolean(String.valueOf(action.getValue(PROPERTY_BOLD)))) {      return String.format(TEMPLATE_HTML_BOLD,name);    } else {      return String.format(TEMPLATE_HTML,name);    }  }}  }
class C{  public static byte[] decodeChecked(String input) throws ParseException {  byte[] decoded=decode(input);  if (decoded.length < 4) {    throw new ParseException("Input too short",0);  }  byte[] data=Arrays.copyOfRange(decoded,0,decoded.length - 4);  byte[] checksum=Arrays.copyOfRange(decoded,decoded.length - 4,decoded.length);  byte[] actualChecksum=Arrays.copyOfRange(hashTwice(data),0,4);  if (!Arrays.equals(checksum,actualChecksum)) {    throw new ParseException("Checksum does not validate",0);  }  return data;}  }
class C{  public synchronized Map<K,V> buildHashMap(){  checkMemoryManager();  return new OffHeapHashMap<K,V>(memoryManager,hashCapacity,keySerializer,valueSerializer);}  }
class C{  public void buildTree(final EvolutionState state,final int thread){  GPInitializer initializer=((GPInitializer)state.initializer);  child=constraints(initializer).init.newRootedTree(state,constraints(initializer).treetype,thread,this,constraints(initializer).functionset,0,GPNodeBuilder.NOSIZEGIVEN);}  }
class C{  private RunnableScheduledFuture<?> peekExpired(){  RunnableScheduledFuture<?> first=queue[0];  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  public static byte[] toAsciiBytes(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_ascii=new byte[raw.length << 3];  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if ((raw[ii] & BITS[bits]) == 0) {        l_ascii[jj - bits]='0';      } else {        l_ascii[jj - bits]='1';      }    }  }  return l_ascii;}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return exp.apply(name) == false;}  }
class C{  @Override public int executeUpdate() throws SQLException {  try {    debugCodeCall("executeUpdate");    checkClosedForWrite();    batchIdentities=null;    try {      return executeUpdateInternal();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MultiwayMinPQ(Comparator<Key> comparator,int d){  if (d < 2)   throw new IllegalArgumentException("Dimension should be 2 or over");  this.d=d;  order=1;  keys=(Key[])new Comparable[d << 1];  comp=comparator;}  }
class C{  public ArrayLongCompressed(long[] longs){  this(longs,0,longs.length);}  }
class C{  public ClientMessage sendMessageWithProperties(SimpleString address,String body,Map<String,Object> properties){  ClientMessage message=createMessageWithProperties(body,properties);  sendMessage(address,message);  return message;}  }
class C{  boolean readCommandFile(File f){  BufferedReader inFile=null;  try {    if (f.canRead()) {      MessageOutput.println("*** Reading commands from",f.getPath());      inFile=new BufferedReader(new FileReader(f));      String ln;      while ((ln=inFile.readLine()) != null) {        StringTokenizer t=new StringTokenizer(ln);        if (t.hasMoreTokens()) {          executeCommand(t);        }      }    }  } catch (  IOException e) {  } finally {    if (inFile != null) {      try {        inFile.close();      } catch (      Exception exc) {      }    }  }  return inFile != null;}  }
class C{  @VisibleForTesting protected URI replaceIdTokenWithPlaceholder(URI logoutUri) throws IllegalArgumentException, URISyntaxException, UnsupportedEncodingException {  String placeholderValue="";  String keyToMatch=URLDecoder.decode(LOGOUT_URL_ID_TOKEN_START,"UTF-8");  final String urlQuery=logoutUri.getQuery();  if (urlQuery == null) {    throw new IllegalArgumentException(String.format("Logout URL %s has invalid format",logoutUri.toString()));  }  final String[] queryParams=urlQuery.split("&");  for (  String param : queryParams) {    final String[] pairs=param.split("=");    if (pairs[0].equals(keyToMatch)) {      placeholderValue=pairs[1];      break;    }  }  if (placeholderValue == "") {    throw new IllegalArgumentException(String.format("Logout URL %s has invalid format",logoutUri.toString()));  }  String logoutStr=logoutUri.toString();  return new URI(logoutStr.replace(placeholderValue,LOGOUT_URL_ID_TOKEN_PLACEHOLDER));}  }
class C{  public void primitivePaint(Graphics2D g2d){  Shape clip=g2d.getClip();  if (clip != null && !(clip instanceof GeneralPath)) {    g2d.setClip(new GeneralPath(clip));  }  textPainter.paint(this,g2d);}  }
class C{  public static Annotation findFirstQualifierInAnnotations(Field field){  return findFirstQualifierInAnnotations(field.getAnnotations());}  }
class C{  public void print(String x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  static int checkDesc(final String desc,final int start,final boolean canBeVoid){  if (desc == null || start >= desc.length()) {    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");  }  int index;switch (desc.charAt(start)) {case 'V':    if (canBeVoid) {      return start + 1;    } else {      throw new IllegalArgumentException("Invalid descriptor: " + desc);    }case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':  return start + 1;case '[':index=start + 1;while (index < desc.length() && desc.charAt(index) == '[') {++index;}if (index < desc.length()) {return checkDesc(desc,index,false);} else {throw new IllegalArgumentException("Invalid descriptor: " + desc);}case 'L':index=desc.indexOf(';',start);if (index == -1 || index - start < 2) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}try {checkInternalName(desc,start + 1,index,null);} catch (IllegalArgumentException unused) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}return index + 1;default :throw new IllegalArgumentException("Invalid descriptor: " + desc);}}  }
class C{  public MRequestAction(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  @Override public boolean isAllowedToInitiateGroupChat() throws RemoteException {  try {    if (!mRcsSettings.isGroupChatActivated()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot initiate group chat as group chat feature is not supported.");      }      return false;    }    if (!mRcsSettings.getMyCapabilities().isImSessionSupported()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot initiate group chat as IM capabilities are not supported for self.");      }      return false;    }    if (!ServerApiUtils.isImsConnected()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot initiate group chat as IMS is not connected.");      }      return false;    }    return true;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public boolean hasListeners(String propertyName){  for (  PropertyChangeListener p : listeners) {    if (!(p instanceof PropertyChangeListenerProxy) || Objects.equal(propertyName,((PropertyChangeListenerProxy)p).getPropertyName())) {      return true;    }  }  return false;}  }
class C{  public CAddressSpaceConfiguration(final CAddressSpace addressSpace,final AddressSpaceConfigurationBackend provider,final int addressSpaceId,final String name,final String description,final Date creationDate,final Date modificationDate,final DebuggerTemplate debuggerTemplate){  m_addressSpace=addressSpace;  m_provider=provider;  m_id=addressSpaceId;  m_name=name;  m_description=description;  m_creationDate=new Date(creationDate.getTime());  m_modificationDate=new Date(modificationDate.getTime());  m_debuggerTemplate=debuggerTemplate;}  }
class C{  private void carpetBomb(){  List<Block> blocks=new ArrayList<>();  getController().getWorkspace().getToolboxContents().getAllBlocksRecursive(blocks);  for (int i=0; i < blocks.size(); i++) {    Block copiedModel=blocks.get(i).deepCopy();    copiedModel.setPosition((int)(Math.random() * CARPET_SIZE) - CARPET_SIZE / 2,(int)(Math.random() * CARPET_SIZE) - CARPET_SIZE / 2);    mController.addRootBlock(copiedModel);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void clear(){  metadata.clear();}  }
class C{  public void createSubUsageScenario07() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(2.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO07_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO07_PERUNIT_WEEK",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(1.3);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","12");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","21");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","31");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.6);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","41");  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.weeksToMillis(1.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.terminateSubscription(basicSetup.getSupplierAdminKey(),subDetails,"");  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO07_PERUNIT_WEEK",subDetails);}  }
class C{  public void createNodePartials(int nodeIndex){  this.partials[0][nodeIndex]=new BigDecimal[partialsSize];  this.partials[1][nodeIndex]=new BigDecimal[partialsSize];}  }
class C{  public static String toString(ByteBuffer buffer,Charset charset){  return toString(buffer,buffer.remaining(),charset);}  }
class C{  public void resetGUI(){  String interString;  if (lineColorItem == null) {    interString=i18n.get(DrawingAttributes.class,"lineColorItem","Change Edge Color");    lineColorItem=new JMenuItem(interString);    lineColorItem.setActionCommand(LineColorCommand);    lineColorItem.addActionListener(this);    interString=i18n.get(DrawingAttributes.class,"lineColorItem",I18n.TOOLTIP,"Change edge color for rendering.");    lineColorItem.setToolTipText(interString);  }  if (fillColorItem == null) {    interString=i18n.get(DrawingAttributes.class,"fillColorItem","Change Fill Color");    fillColorItem=new JMenuItem(interString);    fillColorItem.setActionCommand(FillColorCommand);    fillColorItem.addActionListener(this);    interString=i18n.get(DrawingAttributes.class,"fillColorItem",I18n.TOOLTIP,"Change fill color for rendering.");    fillColorItem.setToolTipText(interString);  }  if (selectColorItem == null) {    interString=i18n.get(DrawingAttributes.class,"selectColorItem","Change Highlight Edge Color");    selectColorItem=new JMenuItem(interString);    selectColorItem.setActionCommand(SelectColorCommand);    selectColorItem.addActionListener(this);    interString=i18n.get(DrawingAttributes.class,"selectColorItem",I18n.TOOLTIP,"Change highlight edge color rendered during selection.");    selectColorItem.setToolTipText(interString);  }  if (mattingColorItem == null) {    interString=i18n.get(DrawingAttributes.class,"mattingColorItem","Change Matted Edge Color");    mattingColorItem=new JMenuItem(interString);    mattingColorItem.setActionCommand(MattingColorCommand);    mattingColorItem.addActionListener(this);    interString=i18n.get(DrawingAttributes.class,"mattingColorItem",I18n.TOOLTIP,"Change the color of the border around the edge.");    mattingColorItem.setToolTipText(interString);  }  if (mattedCheckBox == null) {    interString=i18n.get(DrawingAttributes.class,"mattedEnableItem","Enable Matting on Edge");    mattedEnabledItem=new JCheckBoxMenuItem(interString,matted);    mattedEnabledItem.setActionCommand(MattedCommand);    mattedEnabledItem.addActionListener(this);    interString=i18n.get(DrawingAttributes.class,"mattedEnableItem",I18n.TOOLTIP,"Enable/Disable matting on edge.");    mattedEnabledItem.setToolTipText(interString);  }  if (stroke instanceof BasicStroke) {    BasicStrokeEditorMenu tmpbse=getBasicStrokeEditor();    if (tmpbse != null) {      tmpbse.setBasicStroke((BasicStroke)stroke);    }  }}  }
class C{  protected long runLogModules(final Connection connection,final SessionStateLite sessionStateLite,final Set<ReadEntity> readEntities,final Set<WriteEntity> writeEntities,final UserGroupInformation userGroupInformation) throws Exception {  long auditLogId=new AuditCoreLogModule(connection,sessionStateLite,readEntities,writeEntities,userGroupInformation).run();  new ObjectLogModule(connection,sessionStateLite,readEntities,writeEntities,auditLogId).run();  new MapRedStatsLogModule(connection,sessionStateLite,auditLogId).run();  return auditLogId;}  }
class C{  public AsciiTable(Header hdr) throws FitsException {  this.nRows=hdr.getIntValue(NAXIS2);  this.nFields=hdr.getIntValue(TFIELDS);  this.rowLen=hdr.getIntValue(NAXIS1);  this.types=new Class[this.nFields];  this.offsets=new int[this.nFields];  this.lengths=new int[this.nFields];  this.nulls=new String[this.nFields];  for (int i=0; i < this.nFields; i+=1) {    this.offsets[i]=hdr.getIntValue(TBCOLn.n(i + 1)) - 1;    String s=hdr.getStringValue(TFORMn.n(i + 1));    if (this.offsets[i] < 0 || s == null) {      throw new FitsException("Invalid Specification for column:" + (i + 1));    }    s=s.trim();    char c=s.charAt(0);    s=s.substring(1);    if (s.indexOf('.') > 0) {      s=s.substring(0,s.indexOf('.'));    }    this.lengths[i]=Integer.parseInt(s);switch (c) {case 'A':      this.types[i]=String.class;    break;case 'I':  if (this.lengths[i] > MAX_INTEGER_LENGTH) {    this.types[i]=long.class;  } else {    this.types[i]=int.class;  }break;case 'F':case 'E':this.types[i]=float.class;break;case 'D':this.types[i]=double.class;break;default :throw new FitsException("could not parse column type of ascii table");}this.nulls[i]=hdr.getStringValue(TNULLn.n(i + 1));if (this.nulls[i] != null) {this.nulls[i]=this.nulls[i].trim();}}}  }
class C{  public static Date parse(String isodate) throws InvalidDateException {  Calendar calendar=getCalendar(isodate);  return calendar.getTime();}  }
class C{  @Override public String toString(){  return "cudaResourceDesc[" + createString(",") + "]";}  }
class C{  public static String toBase64(long value){  int low=(int)(value & 0xffffffff);  int high=(int)(value >> 32);  StringBuilder sb=new StringBuilder();  boolean haveNonZero=base64Append(sb,(high >> 28) & 0xf,false);  haveNonZero=base64Append(sb,(high >> 22) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(high >> 16) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(high >> 10) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(high >> 4) & 0x3f,haveNonZero);  int v=((high & 0xf) << 2) | ((low >> 30) & 0x3);  haveNonZero=base64Append(sb,v,haveNonZero);  haveNonZero=base64Append(sb,(low >> 24) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(low >> 18) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(low >> 12) & 0x3f,haveNonZero);  base64Append(sb,(low >> 6) & 0x3f,haveNonZero);  base64Append(sb,low & 0x3f,true);  return sb.toString();}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public void addEventListener(AbstractPeerEventListener listener){  addBlocksDownloadedEventListener(Threading.USER_THREAD,listener);  addChainDownloadStartedEventListener(Threading.USER_THREAD,listener);  addConnectedEventListener(Threading.USER_THREAD,listener);  addDisconnectedEventListener(Threading.USER_THREAD,listener);  addGetDataEventListener(Threading.USER_THREAD,listener);  addOnTransactionBroadcastListener(Threading.USER_THREAD,listener);  addPreMessageReceivedEventListener(Threading.USER_THREAD,listener);}  }
class C{  public static Texture createTexture(Image image){  Texture texture=null;  if (image == null) {    texture=TextureState.getDefaultTexture();  } else {    texture=TextureManager.loadFromImage(image,Texture.MinificationFilter.BilinearNoMipMaps);  }  texture.setApply(ApplyMode.Modulate);  return (texture);}  }
class C{  private static int computeAnonymousPosition(IDocument document,int offset,String partitioning,int max){  JavaHeuristicScanner scanner=new JavaHeuristicScanner(document);  int pos=offset;  int length=max;  int scanTo=scanner.scanForward(pos,length,'}');  if (scanTo == -1)   scanTo=length;  int closingParen=findClosingParenToLeft(scanner,pos) - 1;  boolean hasNewToken=looksLikeAnonymousClassDef(document,partitioning,scanner,pos);  int openingParen=-1;  while (true) {    int startScan=closingParen + 1;    closingParen=scanner.scanForward(startScan,scanTo,')');    if (closingParen == -1) {      if (hasNewToken && openingParen != -1)       return openingParen + 1;      break;    }    openingParen=scanner.findOpeningPeer(closingParen - 1,'(',')');    if (openingParen < 1)     break;    if (openingParen > pos)     continue;    if (looksLikeAnonymousClassDef(document,partitioning,scanner,openingParen - 1))     return closingParen + 1;  }  return -1;}  }
class C{  public void writeField(final String name,final short value) throws java.io.IOException {  writeField(name,Short.toString(value));}  }
class C{  public String div(float value){  BigDecimal divisor=new BigDecimal(value);  return amount.divide(divisor,RoundingMode.HALF_EVEN).toString();}  }
class C{  public void testLongValue(){  DoubleAdder ai=new DoubleAdder();  assertEquals(0,ai.longValue());  ai.add(1.0);  assertEquals(1,ai.longValue());}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  tmp.write(key.getEncoded());  out.write(tmp.toByteArray());}  }
class C{  @Override public Object visit(Constant c){  return ConstantPool.acquire(c.value);}  }
class C{  public static int titleToNumber(String s){  if (s == null || s.length() == 0)   return 0;  int res=0;  for (int i=0; i < s.length(); i++) {    res=res * 26 + (s.charAt(i) - '@');  }  return res;}  }
class C{  public static Float convertFontStretch(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.FONT_STRETCH_INDEX);  String s=v.getStringValue();switch (s.charAt(0)) {case 'u':    if (s.charAt(6) == 'c') {      return TextAttribute.WIDTH_CONDENSED;    } else {      return TextAttribute.WIDTH_EXTENDED;    }case 'e':  if (s.charAt(6) == 'c') {    return TextAttribute.WIDTH_CONDENSED;  } else {    if (s.length() == 8) {      return TextAttribute.WIDTH_SEMI_EXTENDED;    } else {      return TextAttribute.WIDTH_EXTENDED;    }  }case 's':if (s.charAt(6) == 'c') {  return TextAttribute.WIDTH_SEMI_CONDENSED;} else {  return TextAttribute.WIDTH_SEMI_EXTENDED;}default :return TextAttribute.WIDTH_REGULAR;}}  }
class C{  private void updateProgress(int progressVal){  progressBar.setValue(progressVal);}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  mFile=getStorageManager().getFileByPath(mRemotePath);  try {    if (!isValidNewName()) {      return new RemoteOperationResult(ResultCode.INVALID_LOCAL_FILE_NAME);    }    String parent=(new File(mFile.getRemotePath())).getParent();    parent=(parent.endsWith(OCFile.PATH_SEPARATOR)) ? parent : parent + OCFile.PATH_SEPARATOR;    mNewRemotePath=parent + mNewName;    if (mFile.isFolder()) {      mNewRemotePath+=OCFile.PATH_SEPARATOR;    }    if (getStorageManager().getFileByPath(mNewRemotePath) != null) {      return new RemoteOperationResult(ResultCode.INVALID_OVERWRITE);    }    RenameRemoteFileOperation operation=new RenameRemoteFileOperation(mFile.getFileName(),mFile.getRemotePath(),mNewName,mFile.isFolder());    result=operation.execute(client);    if (result.isSuccess()) {      if (mFile.isFolder()) {        getStorageManager().moveLocalFile(mFile,mNewRemotePath,parent);      } else {        saveLocalFile();      }    }  } catch (  IOException e) {    Log_OC.e(TAG,"Rename " + mFile.getRemotePath() + " to "+ ((mNewRemotePath == null) ? mNewName : mNewRemotePath)+ ": "+ ((result != null) ? result.getLogMessage() : ""),e);  }  return result;}  }
class C{  public boolean shouldUpdate(){  boolean val=false;  boolean up=false;synchronized (updateLock) {    up=updateOnce;  }  if (up)   val=true; else   if (updateRule == Display2D.UPDATE_RULE_ALWAYS)   val=true; else   if (updateRule == Display2D.UPDATE_RULE_STEPS) {    long step=simulation.state.schedule.getSteps();    val=(lastStep < 0 || stepInterval == 0 || step - lastStep >= stepInterval || lastStep % stepInterval >= step % stepInterval);    if (val)     lastStep=step;  } else   if (updateRule == Display2D.UPDATE_RULE_WALLCLOCK_TIME) {    long wall=System.currentTimeMillis();    val=(lastWall == 0 || wallInterval == 0 || wall - lastWall >= wallInterval || lastWall % wallInterval >= wall % wallInterval);    if (val)     lastWall=wall;  } else   if (updateRule == Display2D.UPDATE_RULE_INTERNAL_TIME) {    double time=simulation.state.schedule.getTime();    val=(lastTime == 0 || timeInterval == 0 || time - lastTime >= timeInterval || lastTime % timeInterval >= time % timeInterval);    if (val)     lastTime=time;  }synchronized (updateLock) {    updateOnce=false;  }  return val;}  }
class C{  public PostAddToViewEvent(UIComponent component){  super(component);}  }
class C{  public MyMap remove(int position){  MyMap mm=null;  if (position >= 0 && position < getItemCount()) {    mm=myMaps.remove(position);    notifyItemRemoved(position);  }  return mm;}  }
class C{  public boolean isShowing(){  return mShowing;}  }
class C{  public boolean isEmpty(){  return termList == null || termList.size() == 0;}  }
class C{  public AsyncResponse(){}  }
class C{  public Distance3DOp(Geometry g0,Geometry g1){  this(g0,g1,0.0);}  }
class C{  public boolean isNormalsEnabled(){  return (showNormals);}  }
class C{  private void addOwnConstraints(StaticDefinitions staticDefs,EntitySpec entitySpec,Class<?> entityDefinitionClass,boolean b){  for (  FieldValuePair<UniqueConstraintSpec> fieldValue : getStaticFieldValues(entityDefinitionClass,UniqueConstraintSpec.class)) {    entitySpec.add(fieldValue.value);  }}  }
class C{  public static void safeInvokeLater(Runnable runnable){  if (EventQueue.isDispatchThread())   runnable.run(); else   SwingUtilities.invokeLater(runnable);}  }
class C{  public void writeString(String string) throws IOException {  if (writingStartTag) {    writer.write('>');    writingStartTag=false;  }  writer.write(string);}  }
class C{  public void appendName(Name name){  appendBytes(name.getByteArray(),name.getByteOffset(),name.getByteLength());}  }
class C{  private boolean hasPendingHintedHandoff(InetAddress endpoint){  List<String> endpointsWithPendingHints=HintedHandOffManager.instance.listEndpointsPendingHints();  if (endpointsWithPendingHints.isEmpty()) {    log.info("Skip data sync status check. No pending hinted handoff logs");    return false;  }  log.info("Pending hinted hand off logs found at {}",endpointsWithPendingHints);  UUID hostId=Gossiper.instance.getHostId(endpoint);  final ByteBuffer hostIdBytes=ByteBuffer.wrap(UUIDGen.decompose(hostId));  DecoratedKey epkey=StorageService.getPartitioner().decorateKey(hostIdBytes);  Token.TokenFactory tokenFactory=StorageService.getPartitioner().getTokenFactory();  String token=tokenFactory.toString(epkey.getToken());  for (  String unsyncedEndpoint : endpointsWithPendingHints) {    if (token.equals(unsyncedEndpoint)) {      log.info("Unsynced data found for : {}",endpoint);      return true;    }  }  return false;}  }
class C{  void updateCursor(){  if (model.getHoveringOperator() != null || model.getHoveringPort() != null) {    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));  } else {    setCursor(Cursor.getDefaultCursor());  }}  }
class C{  public CRemoveGroupAction(final INaviView view,final CGroupNode node){  super("Remove Group");  m_graph=view;  m_node=node;}  }
class C{  public void cancelOnDemandSync(){  ContentResolver.cancelSync(SyncAccountService.getAccount(),Contracts.CONTENT_AUTHORITY);  if (!isSyncPending() && !isSyncActive()) {    LOG.i("Sync was canceled before it began -- immediately firing SyncCanceledEvent.");    mEventBus.post(new SyncCanceledEvent());  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Role_ID") && i == 0)     m_AD_Role_ID_From=para[i].getParameterAsInt(); else     if (name.equals("AD_Role_ID") && i == 1)     m_AD_Role_ID_To=para[i].getParameterAsInt(); else     if (name.equals("AD_Client_ID"))     m_AD_Client_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_Org_ID"))     m_AD_Org_ID=para[i].getParameterAsInt();  }}  }
class C{  public void testMultiValuedField() throws IOException {  Directory indexStore=newDirectory();  IndexWriter writer=new IndexWriter(indexStore,newIndexWriterConfig(new MockAnalyzer(random())));  for (int i=0; i < 5; i++) {    Document doc=new Document();    doc.add(new StringField("string","a" + i,Field.Store.NO));    doc.add(new StringField("string","b" + i,Field.Store.NO));    writer.addDocument(doc);  }  writer.forceMerge(1);  writer.close();  Sort sort=new Sort(new SortField("string",SortField.Type.STRING),SortField.FIELD_DOC);  IndexReader reader=UninvertingReader.wrap(DirectoryReader.open(indexStore),Collections.singletonMap("string",Type.SORTED));  IndexSearcher searcher=new IndexSearcher(reader);  expectThrows(IllegalStateException.class,null);  reader.close();  indexStore.close();}  }
class C{  public GemFireSecurityException(final String message){  this(message,null);}  }
class C{  private void register(final String prefixSingular,final String prefixPlural,final String noun){  prefixMap.put(noun,new PrefixEntry(noun,prefixSingular,prefixPlural));  registerPrefix(prefixSingular,prefixPlural);}  }
class C{  @Override public void onBackPressed(){  if (!containerAsHandlesBack.onBackPressed())   super.onBackPressed();}  }
class C{  public void read(ByteCodeParser in) throws IOException {  int length=in.readInt();  _maxStack=in.readShort();  _maxLocals=in.readShort();  int codeLength=in.readInt();  _code=new byte[codeLength];  in.read(_code,0,codeLength);  int exnCount=in.readShort();  for (int i=0; i < exnCount; i++) {    ExceptionItem exn=new ExceptionItem();    exn.setStart(in.readShort() & 0xffff);    exn.setEnd(in.readShort() & 0xffff);    exn.setHandler(in.readShort() & 0xffff);    exn.setType(in.readShort() & 0xffff);    _exceptions.add(exn);  }  int attrCount=in.readShort();  for (int i=0; i < attrCount; i++) {    Attribute attr=in.parseAttribute();    _attributes.add(attr);  }}  }
class C{  private synchronized static void log(int logType,String tag,String message,int methodCount){  if (settings.logLevel == LogLevel.NONE) {    return;  }  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  public static Boolean[] toObject(final boolean[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;  }  final Boolean[] result=new Boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? Boolean.TRUE : Boolean.FALSE;  }  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.OPERATION__PARAMETERS:    getParameters().clear();  return;}super.eUnset(featureID);}  }
class C{  private void recordThreadInfo() throws InterruptedException {  final long startTime=System.currentTimeMillis();  final ThreadMXBean mbean=ManagementFactory.getThreadMXBean();  final ThreadInfo[] items=mbean.dumpAllThreads(false,false);  for (  ThreadInfo item : items) {    final long id=item.getThreadId();    final long cpuTimeTotal=mbean.getThreadCpuTime(id);    final Long cpuDelta=cpuTimeById.diff(id,cpuTimeTotal);    final long userTimeTotal=mbean.getThreadUserTime(id);    final Long userTimeDelta=userTimeById.diff(id,userTimeTotal);    final long blockedCountTotal=item.getBlockedCount();    final Long blockedCountDelta=blockedCountById.diff(id,blockedCountTotal);    final long blockedTimeTotal=Math.max(0L,item.getBlockedTime());    final Long blockedTimeDelta=blockedTimeById.diff(id,blockedTimeTotal);    final long waitCountTotal=item.getWaitedCount();    final Long waitCountDelta=waitCountById.diff(id,waitCountTotal);    final long waitTimeTotal=Math.max(0L,item.getWaitedTime());    final Long waitTimeDelta=waitTimeById.diff(id,waitTimeTotal);    final ThreadDetails stat=new ThreadDetails(cpuDelta,userTimeDelta,blockedCountDelta,blockedTimeDelta,waitCountDelta,waitTimeDelta,item.getThreadState());    final Stack filteredStack=new Stack(item.getStackTrace()).applyFilter(stackFilter);    if (threadFilter.useThread(filteredStack,stat)) {      recordThreadInfo(filteredStack,stat);    }  }  final long elapsed=System.currentTimeMillis() - startTime;  dumpTimeSum+=elapsed;  dumpCount++;}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public WKBHexFileReader(String filename,WKBReader wkbReader){  this(new File(filename),wkbReader);}  }
class C{  public void nominate(){  this.isNominated=true;  getParentComponent().getParentStream().firePairPropertyChange(this,IceMediaStream.PROPERTY_PAIR_NOMINATED,false,true);}  }
class C{  public static Object invokeExactMethod(final Object object,final String methodName,Object[] args,Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {  if (args == null) {    args=ArrayUtils.EMPTY_OBJECT_ARRAY;  }  if (parameterTypes == null) {    parameterTypes=ArrayUtils.EMPTY_CLASS_ARRAY;  }  Method method=MethodUtils.getAccessibleMethod(object.getClass(),methodName,parameterTypes);  if (method == null) {    throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: "+ object.getClass().getName());  }  return method.invoke(object,args);}  }
class C{  public T onchange(String value){  return attr("onchange",value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonenodefalse.class,args);}  }
class C{  private Object readResolve(){  if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {    return new MonthDay(this,getChronology().withUTC());  }  return this;}  }
class C{  protected boolean storeEventData(@NonNull Collection<ActEvent> eventSet,@NonNull File storage){  throw new UnsupportedOperationException();}  }
class C{  protected void describeEntailmentRegime(){  if (!tripleStore.isQuads())   return;  final URI entailmentRegime;  final Axioms axioms=tripleStore.getAxioms();  if (axioms == null || axioms instanceof NoAxioms) {    entailmentRegime=SD.simpleEntailment;  } else   if (axioms instanceof OwlAxioms) {    entailmentRegime=SD.rdfsEntailment;  } else   if (axioms instanceof RdfsAxioms) {    entailmentRegime=SD.rdfsEntailment;  } else {    entailmentRegime=null;  }  if (entailmentRegime != null)   g.add(aService,SD.entailmentRegime,entailmentRegime);}  }
class C{  public BinaryBlockFrame(DataFrame dataFrame,long numRows,long numCols){  this(dataFrame,new FrameMetadata(numRows,numCols,ConfigurationManager.getBlocksize(),ConfigurationManager.getBlocksize()));}  }
class C{  public void addHeaderView(View view){  mHeaderViews.add(view);}  }
class C{  public List<ReferenceType> allClasses() throws NoSessionException {  ensureActiveSession();  return vm().allClasses();}  }
class C{  public Function(final Module module,final INaviFunction function){  m_module=Preconditions.checkNotNull(module,"Error: Module argument can not be null");  m_function=Preconditions.checkNotNull(function,"Error: Function argument can't be null");  if (function.isLoaded()) {    convertData();  }  function.addListener(m_listener);}  }
class C{  public void clear(){  modCount++;  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  public Builder backupStrategy(BackupStrategy backupStrategy){  this.backupStrategy=backupStrategy;  return this;}  }
class C{  public synchronized void addSeries(int index,XYSeries series){  mSeries.add(index,series);}  }
class C{  public static String[] breakUp(String s,int columns){  Vector<String> result;  String line;  BreakIterator boundary;  int boundaryStart;  int boundaryEnd;  String word;  String punctuation;  int i;  String[] lines;  result=new Vector<String>();  punctuation=" .,;:!?'\"";  lines=s.split("\n");  for (i=0; i < lines.length; i++) {    boundary=BreakIterator.getWordInstance();    boundary.setText(lines[i]);    boundaryStart=boundary.first();    boundaryEnd=boundary.next();    line="";    while (boundaryEnd != BreakIterator.DONE) {      word=lines[i].substring(boundaryStart,boundaryEnd);      if (line.length() >= columns) {        if (word.length() == 1) {          if (punctuation.indexOf(word.charAt(0)) > -1) {            line+=word;            word="";          }        }        result.add(line);        line="";      }      line+=word;      boundaryStart=boundaryEnd;      boundaryEnd=boundary.next();    }    if (line.length() > 0) {      result.add(line);    }  }  return result.toArray(new String[result.size()]);}  }
class C{  public void close() throws IOException {  try {    if (!started) {      handler.startDocument();      if (!icalendarElementExists) {        start(ICALENDAR);      }    }    if (!icalendarElementExists) {      end(ICALENDAR);    }    handler.endDocument();  } catch (  SAXException e) {    throw new IOException(e);  }  if (writer != null) {    writer.close();  }}  }
class C{  public ContextedException(final String message,final Throwable cause,ExceptionContext context){  super(message,cause);  if (context == null) {    context=new DefaultExceptionContext();  }  exceptionContext=context;}  }
class C{  public void requestFocus(){  m_text.requestFocus();}  }
class C{  public Map<List<String>,List<Double>> result(){  Map<List<String>,List<Double>> result=new HashMap<List<String>,List<Double>>();  for (  Map.Entry<GroupbyKey,List<Function>> entry : this.group2FunctionMap.entrySet()) {    List<Double> values=new ArrayList<Double>();    for (    Function f : entry.getValue()) {      values.add(f.result());    }    GroupbyKey key=entry.getKey();    List<BytesWritable> list1=key.getValue();    List<String> list2=new ArrayList<String>();    for (    BytesWritable e : list1) {      list2.add(new String(e.copyBytes()));    }    result.put(list2,values);  }  return result;}  }
class C{  public static IndexSearcher wrapUnderlyingReader(Random random,final IndexSearcher s,final int edge) throws IOException {  IndexReader r=s.getIndexReader();  IndexReader[] readers=new IndexReader[]{edge < 0 ? r : new MultiReader(),new MultiReader(),new FCInvisibleMultiReader(edge < 0 ? emptyReader(4) : new MultiReader(),new MultiReader(),0 == edge ? r : new MultiReader()),0 < edge ? new MultiReader() : emptyReader(7),new MultiReader(),new FCInvisibleMultiReader(0 < edge ? new MultiReader() : emptyReader(5),new MultiReader(),0 < edge ? r : new MultiReader())};  IndexSearcher out=LuceneTestCase.newSearcher(new FCInvisibleMultiReader(readers));  out.setSimilarity(s.getSimilarity(true));  return out;}  }
class C{  public static Text createText(Composite parent,int style,int hspan){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  private static BigInteger toUnsignedBigInteger(long i){  if (i >= 0L)   return BigInteger.valueOf(i); else {    int upper=(int)(i >>> 32);    int lower=(int)i;    return (BigInteger.valueOf(Integer.toUnsignedLong(upper))).shiftLeft(32).add(BigInteger.valueOf(Integer.toUnsignedLong(lower)));  }}  }
class C{  void rollback(){  checkValid();  conn.prepareCommand("ROLLBACK TO SAVEPOINT " + getName(name,savepointId),Integer.MAX_VALUE).executeUpdate();}  }
class C{  private void init(double[] ratio,int size,PartitionBuilder builder){  LogService.getRoot().log(Level.FINE,"com.rapidminer.example.set.Partition.creating_new_partition_using",builder.getClass().getName());  elements=builder.createPartition(ratio,size);  init(elements,ratio.length);}  }
class C{  private void sub(LongPolynomial2 b){  if (b.coeffs.length > coeffs.length) {    coeffs=Arrays.copyOf(coeffs,b.coeffs.length);  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]=(0x0800000800000L + coeffs[i] - b.coeffs[i]) & 0x7FF0007FFL;  }}  }
class C{  private Logical(){}  }
class C{  public ReadOnlyKeysRaba(final int size,final byte[][] a){  this(0,size,a.length,a);}  }
class C{  public void fixStrictRouting(SIPRequest req){  RouteList routes=req.getRouteHeaders();  Route first=(Route)routes.getFirst();  SipUri firstUri=(SipUri)first.getAddress().getURI();  routes.removeFirst();  AddressImpl addr=new AddressImpl();  addr.setAddess(req.getRequestURI());  Route route=new Route(addr);  routes.add(route);  req.setRequestURI(firstUri);  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("post: fixStrictRouting" + req);  }}  }
class C{  public static CodedInputByteBufferNano newInstance(final byte[] buf){  return newInstance(buf,0,buf.length);}  }
class C{  private void validationRuleColumn(Column[] columns){  if (tableRouter != null) {    for (    RuleColumn ruleCol : tableRouter.getRuleColumns()) {      Column matched=null;      for (      Column column : columns) {        String colName=column.getName();        if (colName.equalsIgnoreCase(ruleCol.getName())) {          matched=column;          break;        }      }      if (matched == null) {        throw DbException.throwInternalError("The rule column " + ruleCol + " does not exist in "+ getName()+ " table.");      }    }  }}  }
class C{  @Override public SignatureLibraryRelease parse() throws IOException {  final SignatureLibraryRelease release=new SignatureLibraryRelease(this.getSignatureLibrary(),this.getReleaseVersionNumber());  final Signature.Builder builder=new Signature.Builder(COILS_SIGNATURE_NAME);  final Signature signature=builder.name(COILS_SIGNATURE_NAME).signatureLibraryRelease(release).build();  release.addSignature(signature);  return release;}  }
class C{  public PopupHandler(StateViewer viewer){  super(InputEvent.BUTTON3_MASK);  this.viewer=viewer;  Settings settings=viewer.getSystem().getSettings();  speechVars=Arrays.asList(settings.userSpeech,settings.systemSpeech);  audio=viewer.getSystem().getModule(AudioModule.class);}  }
class C{  public boolean isShowGridX(){  return mShowGridX;}  }
class C{  public String toString(){  return label.toString();}  }
class C{  public ExecutionContext(Object[] bindArguments,Cache cache){  this.bindArguments=bindArguments;  this.cache=cache;}  }
class C{  public void addToHistory(String text){  comboBox.addItem(text);  comboBox.setPreferredSize(new Dimension(0,comboBox.getPreferredSize().height));}  }
class C{  private static void verifyGetDistance(S2LatLngRect a,S2LatLngRect b){  S1Angle distance1=bruteForceDistance(a,b);  S1Angle distance2=a.getDistance(b);  assertEquals(distance1.radians(),distance2.radians(),1e-10);}  }
class C{  public final char readChar(){  int ch1=read();  int ch2=read() & 0xFF;  return (char)((ch1 << 8) + (ch2 << 0));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.165 -0500",hash_original_method="36CC389463C4EECA1FFAD848C8F58415",hash_generated_method="62D8E0A4D8CCC7877B84B1CF12FFBF67") public void translateRectInScreenToAppWinFrame(Rect rect){  rect.scale(applicationInvertedScale);}  }
class C{  protected void doNewState(int oldState,int newState){  LocoNetMessage l=new LocoNetMessage(4);  l.setOpCode(LnConstants.OPC_SW_REQ);  int hiadr=(mBit - 1) / 128;  int loadr=(mBit - 1) - hiadr * 128;  if (newState == ON) {    hiadr|=0x30;  } else   if (newState == OFF) {    hiadr|=0x10;  } else {    log.warn("illegal state requested for Light: " + getSystemName());    hiadr|=0x10;  }  l.setElement(1,loadr);  l.setElement(2,hiadr);  tc.sendLocoNetMessage(l);}  }
class C{  public static <T>Source<T> ntimesThen(int n,Source<T> lhs,Source<T> rhs){  return choose(null,null,null,lhs,rhs);}  }
class C{  private static void addInitiator(Map<String,Initiator> initiatorMap,Map<String,Set<String>> directorToInitiators,Map<String,URI> initiatorIdToNetwork,String director,String wwn,String net){  Initiator initiator=new Initiator();  initiator.setId(URI.create(director + "-" + wwn));  initiator.setLabel(director + "-" + wwn);  initiator.setInitiatorPort(wwn);  initiatorMap.put(initiator.getId().toString(),initiator);  if (directorToInitiators.get(director) == null) {    directorToInitiators.put(director,new HashSet<String>());  }  URI netURI=URI.create(net);  directorToInitiators.get(director).add(initiator.getId().toString());  initiatorIdToNetwork.put(initiator.getId().toString(),netURI);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.value.readFields(in);}  }
class C{  public void test_entrySet_remove(){  Hashtable<String,String> hashtable=new Hashtable<String,String>();  hashtable.put("my.nonexistent.prop","AAA");  hashtable.put("parse.error","BBB");  Iterator<Map.Entry<String,String>> iterator=hashtable.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry entry=iterator.next();    final Object value=entry.getValue();    if (value.equals("AAA")) {      iterator.remove();    }  }  assertFalse(hashtable.containsKey("my.nonexistent.prop"));}  }
class C{  public boolean doWindowDeActivated(){  return true;}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  public boolean isEncryptionEnabled(){  if (isDeviceAdminActive()) {switch (devicePolicyManager.getStorageEncryptionStatus()) {case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:      return true;case DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE:    return false;case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVATING:  return false;default :return false;}}return false;}  }
class C{  public static IsNullValue pathSensitiveNullValue(){  return instanceByFlagsList[0][CHECKED_NULL];}  }
class C{  public String replacePathSeparator(String urlSegment){  if ('/' != pathSeparator) {    return urlSegment.replace('/',pathSeparator);  }  return urlSegment;}  }
class C{  @Override public void cronScheduleTask(Task task,CronTrigger cronTrigger) throws TException {  try {    schedule(new TaskPojo(task),new CronTriggerPojo(cronTrigger));  } catch (  ServiceException e) {    throw new TException(e);  }}  }
class C{  @Inject protected PreferencesManagerImpl(UserProfileServiceClient userProfileService){  this.persistedPreferences=new HashMap<>();  this.changedPreferences=new HashMap<>();  this.userProfileService=userProfileService;}  }
class C{  private static void eliminarDocumentosByIdMatter(int idMatter,DbConnection db) throws Exception {  SicresDocumentoTipoAsuntoDatos tipoAsuntoDocumentosDatos=new SicresDocumentoTipoAsuntoDatos();  tipoAsuntoDocumentosDatos.setIdMatter(idMatter);  tipoAsuntoDocumentosDatos.deleteByIdMatter(db);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int next(){  int eType;  int node=_currentNode;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (node != DTM.NULL && _exptype(node) != nodeType) {      node=_nextsib(node);    }  } else {    while (node != DTM.NULL) {      eType=_exptype(node);      if (eType < DTM.NTYPES) {        if (eType == nodeType) {          break;        }      } else       if (m_expandedNameTable.getType(eType) == nodeType) {        break;      }      node=_nextsib(node);    }  }  if (node == DTM.NULL) {    _currentNode=DTM.NULL;    return DTM.NULL;  } else {    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public boolean hasSize2(){  return size2 != null;}  }
class C{  @ApiMethod(httpMethod="PUT") public final CheckIn updateCheckIn(final CheckIn checkin,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  ofy().save().entity(checkin).now();  return checkin;}  }
class C{  @Override public void insertBack(int x){  if (size == items.length) {    resize((int)(size * 1.01));  }  items[size]=x;  size=size + 1;}  }
class C{  public Builder crs(String crs){  if (crs != null && !validParamChars.containsOnly(crs)) {    throw Messages.INSTANCE.getIllegalArgumentException(24);  }  this.crs=crs;  return this;}  }
class C{  void registerNamespaceToGlobalScope(String namespace){  providesObjectChildren.put(namespace,new LinkedHashSet<String>());  if (isJsLibrary) {    maybeAddExport(NodeUtil.newQName(compiler,namespace));  }  fileToModule.put(file,this);  namespaceToModule.put(namespace,this);}  }
class C{  public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);  return String.format("%s+%s+PORT+%s",splitedString[0],splitedString[1],portNetworkId);}  }
class C{  private int qtreeEncode(ByteBuffer outfile,LongBuffer a,int n,int nqx,int nqy,int nbitplanes){  int log2n, i, k, bit, b, nqmax, nqx2, nqy2, nx, ny;  long bmax;  byte[] scratch, buffer;  nqmax=nqx > nqy ? nqx : nqy;  log2n=log2n(nqmax);  if (nqmax > 1 << log2n) {    log2n+=1;  }  nqx2=(nqx + 1) / 2;  nqy2=(nqy + 1) / 2;  bmax=(nqx2 * nqy2 + 1) / 2;  scratch=new byte[(int)(2 * bmax)];  buffer=new byte[(int)bmax];  bitplane_done:   for (bit=nbitplanes - 1; bit >= 0; bit--) {    b=0;    this.bitbuffer=0;    this.bitsToGo3=0;    qtreeOnebit(a,n,nqx,nqy,scratch,bit);    nx=nqx + 1 >> 1;    ny=nqy + 1 >> 1;    b=bufcopy(scratch,nx * ny,buffer,b,bmax);    if (b >= bmax) {      writeBdirect(outfile,a,n,nqx,nqy,scratch,bit);      continue bitplane_done;    }    for (k=1; k < log2n; k++) {      qtreeReduce(scratch,ny,nx,ny,scratch);      nx=nx + 1 >> 1;      ny=ny + 1 >> 1;      b=bufcopy(scratch,nx * ny,buffer,b,bmax);      if (b >= bmax) {        writeBdirect(outfile,a,n,nqx,nqy,scratch,bit);        continue bitplane_done;      }    }    outputNybble(outfile,NYBBLE_MASK);    if (b == 0) {      if (this.bitsToGo3 > 0) {        outputNbits(outfile,this.bitbuffer & (1 << this.bitsToGo3) - 1,this.bitsToGo3);      } else {        outputNbits(outfile,CODE[0],NCODE[0]);      }    } else {      if (this.bitsToGo3 > 0) {        outputNbits(outfile,this.bitbuffer & (1 << this.bitsToGo3) - 1,this.bitsToGo3);      }      for (i=b - 1; i >= 0; i--) {        outputNbits(outfile,buffer[i],BITS_OF_1_BYTE);      }    }  }  return 0;}  }
class C{  public final void shift(int from,int to,Instance instance) throws Exception {  int classIndex;  double weight;  classIndex=(int)instance.classValue();  weight=instance.weight();  m_perClassPerBag[from][classIndex]-=weight;  m_perClassPerBag[to][classIndex]+=weight;  m_perBag[from]-=weight;  m_perBag[to]+=weight;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static boolean asBoolean(Object[] array){  return array.length > 0;}  }
class C{  private void addGrantEntry(PolicyParser.GrantEntry ge,KeyStore keyStore,PolicyInfo newInfo){  if (debug != null) {    debug.println("Adding policy entry: ");    debug.println("  signedBy " + ge.signedBy);    debug.println("  codeBase " + ge.codeBase);    if (ge.principals != null) {      for (      PolicyParser.PrincipalEntry pppe : ge.principals) {        debug.println("  " + pppe.toString());      }    }  }  try {    CodeSource codesource=getCodeSource(ge,keyStore,newInfo);    if (codesource == null)     return;    if (replacePrincipals(ge.principals,keyStore) == false)     return;    PolicyEntry entry=new PolicyEntry(codesource,ge.principals);    Enumeration<PolicyParser.PermissionEntry> enum_=ge.permissionElements();    while (enum_.hasMoreElements()) {      PolicyParser.PermissionEntry pe=enum_.nextElement();      try {        expandPermissionName(pe,keyStore);        Permission perm;        if (pe.permission.equals("javax.security.auth.PrivateCredentialPermission") && pe.name.endsWith(" self")) {          pe.name=pe.name.substring(0,pe.name.indexOf("self")) + SELF;        }        if (pe.name != null && pe.name.indexOf(SELF) != -1) {          Certificate certs[];          if (pe.signedBy != null) {            certs=getCertificates(keyStore,pe.signedBy,newInfo);          } else {            certs=null;          }          perm=new SelfPermission(pe.permission,pe.name,pe.action,certs);        } else {          perm=getInstance(pe.permission,pe.name,pe.action);        }        entry.add(perm);        if (debug != null) {          debug.println("  " + perm);        }      } catch (      ClassNotFoundException cnfe) {        Certificate certs[];        if (pe.signedBy != null) {          certs=getCertificates(keyStore,pe.signedBy,newInfo);        } else {          certs=null;        }        if (certs != null || pe.signedBy == null) {          Permission perm=new UnresolvedPermission(pe.permission,pe.name,pe.action,certs);          entry.add(perm);          if (debug != null) {            debug.println("  " + perm);          }        }      }catch (      java.lang.reflect.InvocationTargetException ite) {        MessageFormat form=new MessageFormat(ResourcesMgr.getString(POLICY + ".error.adding.Permission.perm.message"));        Object[] source={pe.permission,ite.getTargetException().toString()};        System.err.println(form.format(source));      }catch (      Exception e) {        MessageFormat form=new MessageFormat(ResourcesMgr.getString(POLICY + ".error.adding.Permission.perm.message"));        Object[] source={pe.permission,e.toString()};        System.err.println(form.format(source));      }    }    newInfo.policyEntries.add(entry);  } catch (  Exception e) {    MessageFormat form=new MessageFormat(ResourcesMgr.getString(POLICY + ".error.adding.Entry.message"));    Object[] source={e.toString()};    System.err.println(form.format(source));  }  if (debug != null)   debug.println();}  }
class C{  protected final IllegalArgumentException buildObjectContractViolation(Object o1,Object o2,String extra){  return new IllegalArgumentException("Equal objects must have equal hashcodes. " + "During rehashing, Trove discovered that the following two objects claim " + "to be equal (as in java.lang.Object.equals()) but their hashCodes (or "+ "those calculated by your TObjectHashingStrategy) are not equal."+ "This violates the general contract of java.lang.Object.hashCode().  See "+ "bullet point two in that method's documentation. object #1 =" + objectInfo(o1) + "; object #2 ="+ objectInfo(o2)+ "\n"+ extra);}  }
class C{  @Override public boolean createFrom(final IScope scope,final List<Map<String,Object>> inits,final Integer max,final Object source,final Arguments init,final CreateStatement statement){  final IList<Map> syntheticPopulation=(IList<Map>)source;  final int num=max == null ? syntheticPopulation.length(scope) - 1 : CmnFastMath.min(syntheticPopulation.length(scope) - 1,max);  for (int i=1; i < num; i++) {    final Map genstarInit=syntheticPopulation.get(i);    statement.fillWithUserInit(scope,genstarInit);    inits.add(genstarInit);  }  return true;}  }
class C{  public String nodeLabel(){  StringBuilder sb=new StringBuilder();  for (int c=0; c <= TicTacToeBoard.MaxC; c++) {    sb.append("{");    for (int r=0; r <= TicTacToeBoard.MaxR; r++) {      char val=board.get(c,r);      if (val == TicTacToeBoard.EMPTY) {        sb.append(" ");      } else {        sb.append(val);      }      if (r <= TicTacToeBoard.MaxR - 1) {        sb.append("|");      }    }    sb.append("}");    if (c <= TicTacToeBoard.MaxC - 1) {      sb.append("|");    }  }  return sb.toString();}  }
class C{  @Override protected boolean doCheckState(){  String fileName=getTextControl().getText();  fileName=fileName.trim();  if (fileName.length() == 0 && !isEmptyStringAllowed()) {    return false;  }  return true;}  }
class C{  public void windowOpened(WindowEvent e){  System.out.println("Loading card images...");  cardImages=CardImagesLoader.getDeck(e.getWindow());}  }
class C{  public TupleKeyValue of(T value){  checkNotNull(value,"value must not be null");  return new TupleKeyValue(this,value);}  }
class C{  public ByteBandedRaster(SampleModel sampleModel,Point origin){  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  private void parseOutput(@NotNull String output,@NotNull GitHandler handler) throws VcsException {  VcsRevisionNumber head=getHead();  final String[] split=output.split("\u0000");  for (int pos=0; pos < split.length; pos++) {    String line=split[pos];    if (StringUtil.isEmptyOrSpaces(line)) {      continue;    }    if (line.length() < 4) {      throwGFE("Line is too short.",handler,output,line,'0','0');    }    final String xyStatus=line.substring(0,2);    final String filepath=line.substring(3);    final char xStatus=xyStatus.charAt(0);    final char yStatus=xyStatus.charAt(1);switch (xStatus) {case ' ':      if (yStatus == 'M') {        reportModified(filepath,head);      } else       if (yStatus == 'D') {        reportDeleted(filepath,head);      } else       if (yStatus == 'T') {        reportTypeChanged(filepath,head);      } else       if (yStatus == 'U') {        reportConflict(filepath,head);      } else {        throwYStatus(output,handler,line,xStatus,yStatus);      }    break;case 'M':  if (yStatus == ' ' || yStatus == 'M' || yStatus == 'T') {    reportModified(filepath,head);  } else   if (yStatus == 'D') {    reportDeleted(filepath,head);  } else {    throwYStatus(output,handler,line,xStatus,yStatus);  }break;case 'C':pos+=1;case 'A':if (yStatus == 'M' || yStatus == ' ' || yStatus == 'T') {reportAdded(filepath);} else if (yStatus == 'D') {} else if (yStatus == 'U' || yStatus == 'A') {reportConflict(filepath,head);} else {throwYStatus(output,handler,line,xStatus,yStatus);}break;case 'D':if (yStatus == 'M' || yStatus == ' ' || yStatus == 'T') {reportDeleted(filepath,head);} else if (yStatus == 'U') {reportConflict(filepath,head);} else if (yStatus == 'D') {} else {throwYStatus(output,handler,line,xStatus,yStatus);}break;case 'U':if (yStatus == 'U' || yStatus == 'A' || yStatus == 'D' || yStatus == 'T') {reportConflict(filepath,head);} else {throwYStatus(output,handler,line,xStatus,yStatus);}break;case 'R':pos+=1;String oldFilename=split[pos];if (yStatus == 'D') {reportDeleted(filepath,head);} else if (yStatus == ' ' || yStatus == 'M' || yStatus == 'T') {reportRename(filepath,oldFilename,head);} else {throwYStatus(output,handler,line,xStatus,yStatus);}break;case 'T':if (yStatus == ' ' || yStatus == 'M') {reportTypeChanged(filepath,head);} else if (yStatus == 'D') {reportDeleted(filepath,head);} else {throwYStatus(output,handler,line,xStatus,yStatus);}break;case '?':throwGFE("Unexpected unversioned file flag.",handler,output,line,xStatus,yStatus);break;case '!':throwGFE("Unexpected ignored file flag.",handler,output,line,xStatus,yStatus);default :throwGFE("Unexpected symbol as xStatus.",handler,output,line,xStatus,yStatus);}}}  }
class C{  @Override public int doFinal(final byte[] out,final int outOff) throws BadCiphertextException {  complete_=true;  int written=contentCryptoHandler_.doFinal(out,outOff);  updateTrailingSignature(out,outOff,written);  if (cryptoAlgo_.getTrailingSignatureLength() > 0) {    try {      CiphertextFooters footer=new CiphertextFooters(trailingSig_.sign());      byte[] fBytes=footer.toByteArray();      System.arraycopy(fBytes,0,out,outOff + written,fBytes.length);      return written + fBytes.length;    } catch (    final SignatureException ex) {      throw new AwsCryptoException(ex);    }  } else {    return written;  }}  }
class C{  public static <T>T newDto(Class<T> dtoInterface){  return getInstance().createDto(dtoInterface);}  }
class C{  public Vector predict(NNExample nne){  return processInput(nne.getInput());}  }
class C{  @Override public boolean isPhraseAligned(SampledRule rule,int ei,int fi,RelativePos pos){  assert (fi >= -1 && ei >= -1);  assert (fi <= rule.sentencePair.sourceLength() && ei <= rule.sentencePair.targetLength()) : String.format("%d %d %d %d",fi,rule.sentencePair.sourceLength(),ei,rule.sentencePair.targetLength());  if (fi == -1 && ei == -1)   return true;  if (fi == -1 || ei == -1)   return false;  if (fi == rule.sentencePair.sourceLength() && ei == rule.sentencePair.targetLength())   return true;  if (fi == rule.sentencePair.sourceLength() || ei == rule.sentencePair.targetLength())   return false;  return rule.sentencePair.isSourceUnaligned(fi) ? false : ArrayMath.indexOf(ei,rule.sentencePair.f2e(fi)) >= 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens01.class,args);}  }
class C{  public static void rotateTo(Vector3d v,double angle){  double length=v.length();  v.x=length * Math.cos(angle);  v.y=length * Math.sin(angle);}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);}}  }
class C{  private boolean tableExists(Table t) throws SQLException {  String sql="SELECT * FROM pg_tables WHERE schemaname='" + t.getSchema() + "' and tablename='"+ t.getName()+ "'";  Statement stmt=dbConn.createStatement();  ResultSet res=stmt.executeQuery(sql);  if (res.next())   return true; else   return false;}  }
class C{  public static boolean contains(byte[] self,Object value){  for (  byte next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  public static int hash(ByteBuffer buf,int seed){  ByteOrder byteOrder=buf.order();  buf.order(ByteOrder.LITTLE_ENDIAN);  int m=0x5bd1e995;  int r=24;  int h=seed ^ buf.remaining();  int k;  while (buf.remaining() >= 4) {    k=buf.getInt();    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }  if (buf.remaining() > 0) {    ByteBuffer finish=ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN);    finish.put(buf).rewind();    h^=finish.getInt();    h*=m;  }  h^=h >>> 13;  h*=m;  h^=h >>> 15;  buf.order(byteOrder);  return h;}  }
class C{  public void push(int value){  this.i++;  if (this.i >= this.N)   throw new InternalError("Cannot push stack!");  this.v[this.i]=value;}  }
class C{  public WeakHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  }  if (initialCapacity > MAXIMUM_CAPACITY) {    initialCapacity=MAXIMUM_CAPACITY;  }  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  }  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=new Entry[capacity];  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  private static void processZkCmdArgs(String[] args){  if (args[0].trim().equalsIgnoreCase(Command.PATH.name()) || args[0].trim().equalsIgnoreCase(Command.SET.name())) {    if (args[args.length - 1].trim().equalsIgnoreCase(WITH_DATA) || args[args.length - 1].trim().equalsIgnoreCase(HOST_ARG) || args[args.length - 1].trim().matches(REGEX_IP)|| args[args.length - 1].trim().startsWith("-")) {      throw new IllegalArgumentException("The path substring is missing");    }    path=args[args.length - 1];  }  for (int i=1; i < args.length; i++) {    if (args[i].equalsIgnoreCase(WITH_DATA)) {      withData=true;    }    if (args[i].equalsIgnoreCase(HOST_ARG)) {      if (args.length - 1 == i || !args[i + 1].trim().matches(REGEX_IP)) {        throw new IllegalArgumentException("Empty or Wrong IP address!");      }      host=args[i + 1];      i++;    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:26.827 -0500",hash_original_method="010F4DD19A92034627C31D97E026477A",hash_generated_method="3A402C5C0641CAA4728B7DF4E6CF9B56") public void run(){  while (this.isRunning) {    try {synchronized (this) {        while (sipStack.maxConnections != -1 && this.nConnections >= sipStack.maxConnections) {          try {            this.wait();            if (!this.isRunning)             return;          } catch (          InterruptedException ex) {            break;          }        }        this.nConnections++;      }      Socket newsock=sock.accept();      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Accepting new connection!");      incomingTlsMessageChannels.add(new TLSMessageChannel(newsock,sipStack,this));    } catch (    SocketException ex) {      if (this.isRunning) {        sipStack.getStackLogger().logError("Fatal - SocketException occured while Accepting connection",ex);        this.isRunning=false;        break;      }    }catch (    SSLException ex) {      this.isRunning=false;      sipStack.getStackLogger().logError("Fatal - SSSLException occured while Accepting connection",ex);      break;    }catch (    IOException ex) {      sipStack.getStackLogger().logError("Problem Accepting Connection",ex);      continue;    }catch (    Exception ex) {      sipStack.getStackLogger().logError("Unexpected Exception!",ex);    }  }}  }
class C{  public MIFLoader(BufferedReader br,boolean accurate,float textVisible,float pointVisible){  super();  this.br=br;  this.accurate=accurate;  this.pointVisible=pointVisible;  this.textVisible=textVisible;}  }
class C{  ClassicTokenizerImpl(java.io.Reader in){  this.zzReader=in;}  }
class C{  public void addTrack(int position,SoundCloudTrack track){  mTracks.add(position,track);}  }
class C{  public T enabled(boolean enabled){  if (view != null) {    view.setEnabled(enabled);  }  return self();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int endOffs=Utilities.getWordEnd(target,offs);      if (select) {        target.moveCaretPosition(endOffs);      } else {        target.setCaretPosition(endOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public void testConstructorNegativeParties2(){  try {    new Phaser(new Phaser(),-1);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  protected BasicBlock(String className,String methodName){  if (className == null || methodName == null)   throw new IllegalArgumentException("null given");  this.className=className;  this.methodName=methodName;  this.isAuxiliaryBlock=true;}  }
class C{  public long nextId(){  return _idGenerator.get();}  }
class C{  public TriangleMesh clear(){  vertices.clear();  faces.clear();  bounds=null;  numVertices=0;  numFaces=0;  uniqueVertexID=0;  return this;}  }
class C{  public SendableAudioMessage build(){  return new SendableAudioMessage(audio,duration,performer,title,replyTo,replyMarkup,disableNotification,caption);}  }
class C{  protected HttpURL(){}  }
class C{  private void generateReportIfNeeded(long inputTime) throws AdeException {  final DateTime inputDateTimeStartOfDay=new DateTime(inputTime).withZone(s_outTimeZone).withTimeAtStartOfDay();  final int daysSinceLastReported=Days.daysBetween(m_lastReportDateTimeBegin,inputDateTimeStartOfDay).getDays();  if (daysSinceLastReported < 1) {    return;  }  boolean createReport=false;  boolean resetData=false;switch (m_reportFrequency) {case MONTHLY:{      final boolean monthChangedSinceLastReported=m_lastReportDateTimeBegin.getMonthOfYear() != inputDateTimeStartOfDay.getMonthOfYear() || m_lastReportDateTimeBegin.getYear() != inputDateTimeStartOfDay.getYear();      if (monthChangedSinceLastReported) {        createReport=true;        resetData=true;      } else {        resetData=false;        final boolean monthChangedSinceProcessingStarted=m_processingStartDateTime.getMonthOfYear() != inputDateTimeStartOfDay.getMonthOfYear() || m_processingStartDateTime.getYear() != inputDateTimeStartOfDay.getYear();        if (!monthChangedSinceProcessingStarted) {          createReport=true;        }      }      break;    }case DAYS:{    if (daysSinceLastReported >= m_reportFrequency.getDays()) {      createReport=true;      resetData=true;    } else {      resetData=false;      final int daysSinceStarted=Days.daysBetween(m_processingStartDateTime,inputDateTimeStartOfDay).getDays();      if (daysSinceStarted <= m_reportFrequency.getDays()) {        createReport=true;      }    }    break;  }default :break;}if (createReport) {generateReport(getYesterdayEndOfDay(inputDateTimeStartOfDay));m_lastReportDateTimeBegin=inputDateTimeStartOfDay;if (resetData) {initOverallStatsForAllIntervals();}}}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {  String arg="";  if (node == null) {    rsvc.error("#include() error :  null argument");    return false;  }  Object value=node.value(context);  if (value == null) {    rsvc.error("#include() error :  null argument");    return false;  }  arg=value.toString();  Resource resource=null;  try {    resource=rsvc.getContent(arg,getInputEncoding(context));  } catch (  ResourceNotFoundException rnfe) {    rsvc.error("#include(): cannot find resource '" + arg + "', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ")");    throw rnfe;  }catch (  Exception e) {    rsvc.error("#include(): arg = '" + arg + "', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ") : "+ e);  }  if (resource == null)   return false;  writer.write((String)resource.getData());  return true;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof DelegationPermission))   return false;synchronized (this) {    for (    Permission x : perms) {      if (x.implies(permission))       return true;    }  }  return false;}  }
class C{  public void addTotalDistance(double distance){  totalDistance+=distance;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type_1: ");  result.append(type_1);  result.append(", roleName_1: ");  result.append(roleName_1);  result.append(')');  return result.toString();}  }
class C{  @Override public void endWindow(){  if (columnGroupIndexes.size() == 0) {    rows=new ArrayList<Map<String,Object>>();    return;  }  HashMap<MultiKeyCompare,ArrayList<Map<String,Object>>> groups=new HashMap<MultiKeyCompare,ArrayList<Map<String,Object>>>();  for (  Map<String,Object> row : rows) {    MultiKeyCompare key=new MultiKeyCompare();    for (    ColumnIndex index : columnGroupIndexes) {      key.addCompareKey(row.get(index.getColumn()));    }    ArrayList<Map<String,Object>> subRows;    if (groups.containsKey(key)) {      subRows=groups.get(key);    } else {      subRows=new ArrayList<Map<String,Object>>();      groups.put(key,subRows);    }    subRows.add(row);  }  for (  Map.Entry<MultiKeyCompare,ArrayList<Map<String,Object>>> entry : groups.entrySet()) {    ArrayList<Map<String,Object>> subRows=entry.getValue();    Map<String,Object> result=new HashMap<String,Object>();    for (    ColumnIndex index : columnGroupIndexes) {      index.filter(subRows.get(0),result);    }    for (    FunctionIndex aggregate : aggregates) {      try {        aggregate.filter(subRows,result);      } catch (      Exception e) {        e.printStackTrace();      }    }    boolean isValidHaving=true;    for (    HavingCondition condition : havingConditions) {      try {        isValidHaving&=condition.isValidAggregate(subRows);      } catch (      Exception e) {        e.printStackTrace();        return;      }    }    if (isValidHaving) {      outport.emit(result);    }  }  rows=new ArrayList<Map<String,Object>>();}  }
class C{  public boolean tryPut(K key,V value){  DataUtils.checkArgument(value != null,"The value may not be null");  return trySet(key,value,false);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MUser[").append(get_ID()).append(",Name=").append(getName()).append(",EMailUserID=").append(getEMailUser()).append("]");  return sb.toString();}  }
class C{  public void addToForwardList(EntryPoint ep){  if (ep != null) {    mForwardEntryPoints.add(ep);  }}  }
class C{  public void createKey(String keyName,boolean invalidatedByBiometricEnrollment){  try {    mKeyStore.load(null);    KeyGenParameterSpec.Builder builder=new KeyGenParameterSpec.Builder(keyName,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_CBC).setUserAuthenticationRequired(true).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {      builder.setInvalidatedByBiometricEnrollment(invalidatedByBiometricEnrollment);    }    mKeyGenerator.init(builder.build());    mKeyGenerator.generateKey();  } catch (  NoSuchAlgorithmException|InvalidAlgorithmParameterException|CertificateException|IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isPreserveWhitespace(){  return preserveWhitespace;}  }
class C{  public void paintPanelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Task uploadImage(FileBody fileBody,String replicationType) throws IOException {  String path=getBasePath();  HttpResponse response=this.restClient.upload(path,fileBody,ImmutableMap.of("IMAGEREPLICATION",replicationType));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  private AtEmbed processEmbed(String key,String value){  int lineNumber=(lines.get(key)).intValue();  String propertiesPath=getPropertyFileName();  AtEmbed atEmbed=AtEmbed.create(symbolTable.perCompileData,source,value,propertiesPath,lineNumber,"_embed_properties_");  if (atEmbed != null) {    atEmbeds.put(atEmbed.getPropName(),atEmbed);  }  return atEmbed;}  }
class C{  @SmallTest public void testPreconditions(){}  }
class C{  private void cmd_sendMail(){  String to="";  MUser from=MUser.get(Env.getCtx(),Env.getAD_User_ID(Env.getCtx()));  String subject=m_reportEngine.getName();  String message="";  File attachment=null;  try {    attachment=File.createTempFile("mail",".pdf");    m_reportEngine.getPDF(attachment);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  new EMailDialog(this,Msg.getMsg(Env.getCtx(),"SendMail"),from,to,subject,message,attachment);}  }
class C{  @DSComment("Normal UI operations") @DSSafe(DSCat.GUI) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.094 -0500",hash_original_method="56193535E50A3F40F9A982269CAB09AB",hash_generated_method="C1C767320A8926BE0D8A6C4125075685") public View findNextFocusFromRect(ViewGroup root,Rect focusedRect,int direction){  return findNextFocus(root,null,focusedRect,direction);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_eventDefinition_1_();}  }
class C{  private static String prependIfMissing(final String str,final CharSequence prefix,final boolean ignoreCase,final CharSequence... prefixes){  if (str == null || isEmpty(prefix) || startsWith(str,prefix,ignoreCase)) {    return str;  }  if (prefixes != null && prefixes.length > 0) {    for (    final CharSequence p : prefixes) {      if (startsWith(str,p,ignoreCase)) {        return str;      }    }  }  return prefix.toString() + str;}  }
class C{  public static SystemConfig create(){  final SystemConfig r=new SystemConfig();  r.singleton=new SystemConfig.Key();  return r;}  }
class C{  @JavascriptInterface public void showAboutGank(){  DialogUtil.showCustomDialog(getActivity(),getFragmentManager(),getString(R.string.action_about_gank),"about_gank_site.html","site");}  }
class C{  public void addContextType(TemplateContextType contextType){  fContextTypes.put(contextType.getId(),contextType);}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println("Compute runnable example started.");    IgniteCompute compute=ignite.compute();    for (    final String word : "Print words using runnable".split(" ")) {      compute.run(null);    }    System.out.println();    System.out.println(">>> Finished printing words using runnable execution.");    System.out.println(">>> Check all nodes for output (this node is also part of the cluster).");  } }  }
class C{  void awaitFinish() throws OperationCanceledException {  try {    try {      if (inFile.exists()) {        inFile.deleteMarkers(PROBLEM_MARKER_TYPE,false,IResource.DEPTH_INFINITE);      }    } catch (    CoreException e1) {      throw new RuntimeException(e1);    }    byte[] bb=future.get();    if (bb != null) {      try {        if (outFile.exists()) {          outFile.setContents(new ByteArrayInputStream(bb),false,true,null);        } else {          outFile.create(new ByteArrayInputStream(bb),true,null);        }        outFile.setDerived(true,null);      } catch (      CoreException e) {        throw new ExecutionException(e);      }    }  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }catch (  ExecutionException e) {    if (e.getCause() instanceof OperationCanceledException) {      throw (OperationCanceledException)e.getCause();    }    try {      if (inFile.exists()) {        IMarker marker=inFile.createMarker(PROBLEM_MARKER_TYPE);        marker.setAttribute(IMarker.MESSAGE,"Error while exporting Umlet diagram: " + e.getCause().getMessage());        marker.setAttribute(IMarker.SEVERITY,IMarker.SEVERITY_ERROR);      }    } catch (    CoreException e1) {      throw new RuntimeException(e1);    }  }}  }
class C{  public static SimpleDateFormat makeInputFormatter(){  SimpleDateFormat fmt=new SimpleDateFormat(DEFAULT_IFORMAT);  fmt.setTimeZone(GMT_ZONE);  return (fmt);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public IPoint[] compute(IPoint[] points){  int n=points.length;  if (n < 3) {    return points;  }  boolean internal[]=new boolean[n];  int leftMostX=n - 2;  double nx=points[n - 1].getX();  double ox=points[leftMostX].getX();  if (nx < ox) {    leftMostX=n - 1;  } else   if (nx == ox) {    if (FloatingPoint.lesser(points[n - 1].getY(),points[leftMostX].getY())) {      leftMostX=n - 1;    }  }  for (int i=0; i < n - 2; i++) {    nx=points[i].getX();    ox=points[leftMostX].getX();    if (nx < ox) {      leftMostX=i;    } else     if (nx == ox) {      if (FloatingPoint.lesser(points[i].getY(),points[leftMostX].getY())) {        leftMostX=i;      }    }    for (int j=i + 1; j < n - 1; j++) {      for (int k=j + 1; k < n; k++) {        for (int m=0; m < n; m++) {          if (m == i || m == j || m == k)           continue;          if (!internal[m]) {            if (internalPoint(points,m,i,j,k)) {              internal[m]=true;            }          }        }      }    }  }  double angle[]=new double[n];  int numOnHull=0;  for (int i=0; i < n; i++) {    if (internal[i])     continue;    numOnHull++;    if (i != leftMostX) {      angle[i]=compute(points,leftMostX,i);    }  }  if (numOnHull == 0) {    if (points[0].getX() == points[1].getX()) {      IPoint minY=points[0];      IPoint maxY=points[0];      for (int i=1; i < points.length; i++) {        double y=points[i].getY();        if (y < minY.getY()) {          minY=points[i];        }        if (y > maxY.getY()) {          maxY=points[i];        }      }      return new IPoint[]{minY,maxY};    } else {      IPoint minX=points[0];      IPoint maxX=points[0];      for (int i=1; i < points.length; i++) {        double x=points[i].getX();        if (x < minX.getX()) {          minX=points[i];        }        if (x > maxX.getX()) {          maxX=points[i];        }      }      return new IPoint[]{minX,maxX};    }  }  IPoint[] hull=new IPoint[numOnHull];  hull[0]=points[leftMostX];  angle[leftMostX]=2 * Math.PI;  for (int i=1; i < numOnHull; i++) {    double min=2 * Math.PI;    int minP=-1;    for (int j=0; j < n; j++) {      if (internal[j])       continue;      if (angle[j] < min) {        min=angle[j];        minP=j;      }    }    hull[i]=points[minP];    angle[minP]=2 * Math.PI;  }  return hull;}  }
class C{  public FLVReader(FileChannel channel) throws IOException {  if (null == channel) {    log.warn("Reader was passed a null channel");    log.debug("{}",org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(this));  }  if (!channel.isOpen()) {    log.warn("Reader was passed a closed channel");    return;  }  this.channel=channel;  channelSize=channel.size();  if (channel.position() > 0) {    log.debug("Channel position: {}",channel.position());    channel.position(0);  }  fillBuffer();  postInitialize();}  }
class C{  public JaxRsApplication(){  packages("org.podcastpedia.api");  EncodingFilter.enableFor(this,GZipEncoder.class);}  }
class C{  public static void silentCloseInputStream(InputStream is){  try {    if (is != null) {      is.close();    }  } catch (  IOException e) {    Log.w(LOG_TAG,"Cannot close input stream",e);  }}  }
class C{  private IdentityGenerator(IdentityBuilder builder){  _timeBits=builder.timeBits();  _isRandom=builder.isRandom();  int nodeBits=builder.nodeBits();  _timeOffset=64 - _timeBits;  _node=Long.reverse(builder.node()) >>> _timeBits;  _sequenceBits=_timeOffset;  _sequenceMask=(1L << _sequenceBits) - 1;  _sequenceRandomMask=(1L << (_sequenceBits - nodeBits - 2)) - 1;  _sequenceIncrement=1;}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  private static void displayAltOcspSite(AlternativeOCSPList alternativeOCSPList){  System.out.println("[");  displayParamNameAndValue("site",alternativeOCSPList.get_siteID());  for (  AlternativeOCSP altOCSP : alternativeOCSPList.get_ocspList()) {    System.out.println("    [");    displayParamNameAndValue("    OCSP url",altOCSP.get_responderURL().toString());    X509Certificate cert=altOCSP.get_responderSigningCert();    displayParamNameAndValue("    OCSP signing CA cert",(cert != null) ? "binary value]" : "not set");    System.out.println("    ]");  }  System.out.println("]");}  }
class C{  public void addColumn(String name,Class type,Object defaultValue){  throw new UnsupportedOperationException();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void uncheckSubTree(TreePath path){  removeFromCheckedPathsSet(path);  removeFromGreyedPathsSet(path);  Object node=path.getLastPathComponent();  int childrenNumber=this.model.getChildCount(node);  for (int childIndex=0; childIndex < childrenNumber; childIndex++) {    TreePath childPath=path.pathByAddingChild(this.model.getChild(node,childIndex));    uncheckSubTree(childPath);  }}  }
class C{  public static NbtOutputStream writeCompressed(NbtTag tag,File file,boolean append) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new GZIPOutputStream(new FileOutputStream(file,append)));  out.write(tag);  return out;}  }
class C{  @Inline public ObjectReference nurseryTraceObject(TransitiveClosure trace,ObjectReference object,int allocator){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!defrag.inDefrag());  if (ObjectHeader.isMatureObject(object))   return object; else   if (PREFER_COPY_ON_NURSERY_GC)   return traceObjectWithOpportunisticCopy(trace,object,allocator,true); else   return fastTraceObject(trace,object);}  }
class C{  public ArtifactStoreException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public BytesReference source(){  return source;}  }
class C{  public int hashCode(){  return 127 * factor.hashCode() + lag;}  }
class C{  public Vec3 cross(Vec3 a,Vec3 b){  if (a == null || b == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","cross","missingVector"));  }  this.x=a.y * b.z - a.z * b.y;  this.y=a.z * b.x - a.x * b.z;  this.z=a.x * b.y - a.y * b.x;  return this;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  protected void writePixels() throws IOException {  LZWEncoder encoder=new LZWEncoder(width,height,indexedPixels,colorDepth);  encoder.encode(out);}  }
class C{  private void endCompoundChange(ISourceViewer viewer){  if (viewer instanceof ITextViewerExtension)   ((ITextViewerExtension)viewer).getRewriteTarget().endCompoundChange();}  }
class C{  public static ResetHealthStatusResponse create(DistributionManager dm,InternalDistributedMember recipient,int id){  ResetHealthStatusResponse m=new ResetHealthStatusResponse();  m.setRecipient(recipient);{    HealthMonitor hm=dm.getHealthMonitor(recipient);    if (hm.getId() == id) {      hm.resetStatus();    }  }  return m;}  }
class C{  public Builder(){}  }
class C{  public String toValue(){  return value;}  }
class C{  public static InlineQueryResultMpeg4GifBuilder builder(){  return new InlineQueryResultMpeg4GifBuilder();}  }
class C{  public void print(double d){  return;}  }
class C{  private void utah(int row,int col,int pos){  module(row - 2,col - 2,pos,1);  module(row - 2,col - 1,pos,2);  module(row - 1,col - 2,pos,3);  module(row - 1,col - 1,pos,4);  module(row - 1,col,pos,5);  module(row,col - 2,pos,6);  module(row,col - 1,pos,7);  module(row,col,pos,8);}  }
class C{  public static int radioChoice(final String title,final String text,final int defaultSelection,final String... values){  return radioChoice(null,title,text,defaultSelection,values);}  }
class C{  public java.lang.StringBuffer reverse(){  internal=internal.reverse();  return this;}  }
class C{  private void unregisterName(final String name){  final ConversationContext ctx=new ConversationContext();  ctx.setMergeExpressions(false);  final Sentence parsed=ConversationParser.parse(name,ctx);  if (parsed.expressions.size() > 1) {    Expression firstExpr=parsed.expressions.get(0);    String firstWord=firstExpr.getOriginal().toLowerCase();    Set<CompoundName> nameSet=compoundNames.get(firstWord);    if (nameSet != null) {      for (      CompoundName compName : nameSet) {        if (compName.matches(parsed.expressions,0)) {          nameSet.remove(compName);          if (nameSet.isEmpty()) {            compoundNames.remove(firstWord);          }          break;        }      }    }  }  for (  Expression expr : parsed.expressions) {    if (expr.isDynamic()) {      words.remove(expr.getNormalized());    }  }}  }
class C{  public KdNode insert(Coordinate p){  return insert(p,null);}  }
class C{  public void clear(float r,float g,float b,float a){  this.clear(r,g,b,a,1.0D);}  }
class C{  public DateTime(long instant,Chronology chronology){  super(instant,chronology);}  }
class C{  @Override public boolean onTouch(View v,MotionEvent event){switch (event.getAction()) {case MotionEvent.ACTION_MOVE:    float rawX=event.getRawX();  float rawY=event.getRawY();LinearLayout parent=(LinearLayout)findViewById(R.id.multi_globe_content);LinearLayout.LayoutParams layout1=(LinearLayout.LayoutParams)one.getLayoutParams();LinearLayout.LayoutParams layout2=(LinearLayout.LayoutParams)two.getLayoutParams();LinearLayout.LayoutParams layout3=(LinearLayout.LayoutParams)splitter.getLayoutParams();int weightSum;if (deviceOrientation == Configuration.ORIENTATION_LANDSCAPE) {weightSum=parent.getWidth();layout1.weight=Math.min(Math.max(0f,rawX - (splitterWeight / 2f)),weightSum - splitterWeight);layout2.weight=Math.min(Math.max(0f,weightSum - layout1.weight - splitterWeight),weightSum - splitterWeight);parent.setWeightSum(weightSum);} else {int origin[]=new int[2];parent.getLocationOnScreen(origin);float y=rawY - origin[1];weightSum=parent.getHeight();layout2.weight=Math.min(Math.max(0f,y - (splitterWeight / 2f)),weightSum - splitterWeight);layout1.weight=Math.min(Math.max(0f,weightSum - layout2.weight - splitterWeight),weightSum - splitterWeight);parent.setWeightSum(weightSum);}layout3.weight=splitterWeight;one.setLayoutParams(layout1);two.setLayoutParams(layout2);splitter.setLayoutParams(layout3);break;}return false;}  }
class C{  @Override public void flush(){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected List<Attribute> createAttributeList(){  return new BeanAttributeList(this);}  }
class C{  protected void saveArtifactProperties(Artifact artToDownload,Version verToDownload,Path pathToBinaries) throws IOException {  Map<String,String> propertiesMap=artToDownload.getProperties(verToDownload);  Path pathToPropertiesFile=pathToBinaries.getParent().resolve(Artifact.ARTIFACT_PROPERTIES_FILE_NAME);  Properties properties=new Properties();  properties.putAll(propertiesMap);  try (OutputStream out=newOutputStream(pathToPropertiesFile)){    properties.store(out,null);  } }  }
class C{  public void testSplit2(){  SplittableRandom sr=new SplittableRandom(12345);  for (int reps=0; reps < REPS; ++reps) {    SplittableRandom sc=sr.split();    int i=0;    while (i < NCALLS && sr.nextLong() == sc.nextLong())     ++i;    assertTrue(i < NCALLS);  }}  }
class C{  public static final double[] sigma(double v[]){  double u[]=new double[v.length];  for (int j=0; j < v.length; j++) {    u[j]=sigma(v[j]);  }  return u;}  }
class C{  @Override public void sessionDestroyed(HttpSessionEvent event){  try {    BssClient.logoutUser(event.getSession());  } catch (  NumberFormatException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static void fixJavaKerberos(){  try {    Field loggerField=AbstractSaslImpl.class.getDeclaredField("logger");    loggerField.setAccessible(true);    java.util.logging.Logger logger=(java.util.logging.Logger)loggerField.get(null);    if (logger == null) {      logger=java.util.logging.Logger.getLogger("javax.security.sasl");      setFinalStatic(loggerField,logger);    }    logger.setLevel(Level.OFF);  } catch (  Exception e) {    Logger.error("Error trying to fix Kerberos connection",e);  }}  }
class C{  private void addPrizes(StendhalRPZone zone){  int idx=getCorners().indexOf(getStartPosition());  for (int i=1; i <= 3; i+=2) {    Item prize=SingletonRepository.getEntityManager().getItem(Rand.rand(prizes));    Point location=getCorners().get((idx + i) % 4);    prize.setPosition(location.x,location.y);    zone.add(prize,true);  }}  }
class C{  public static Exception refreshCache(PrintStream... progress){  Exception problem=null;  if (CACHE_URL == null) {    return null;  }  PACKAGE_MANAGER.setPackageRepositoryURL(REP_URL);  String cacheDir=WEKA_HOME.toString() + File.separator + "repCache";  try {    for (    PrintStream p : progress) {      p.println("Refresh in progress. Please wait...");    }    byte[] zip=PACKAGE_MANAGER.getRepositoryPackageMetaDataOnlyAsZip(progress);    ZipInputStream zis=new ZipInputStream(new ByteArrayInputStream(zip));    ZipEntry ze;    final byte[] buff=new byte[1024];    while ((ze=zis.getNextEntry()) != null) {      if (ze.isDirectory()) {        new File(cacheDir,ze.getName()).mkdir();        continue;      }      BufferedOutputStream bo=new BufferedOutputStream(new FileOutputStream(new File(cacheDir,ze.getName())));      while (true) {        int amountRead=zis.read(buff);        if (amountRead == -1) {          break;        }        bo.write(buff,0,amountRead);      }      bo.close();    }  } catch (  Exception e) {    e.printStackTrace();    CACHE_URL=null;    try {      DefaultPackageManager.deleteDir(new File(cacheDir),System.out);    } catch (    Exception e1) {      e1.printStackTrace();    }    return e;  }  return problem;}  }
class C{  protected void broadcast(SquelchState state){  if (mSquelchStateListener != null && !mSquelchLocked) {    mSquelchStateListener.receive(state);  }}  }
class C{  final public void println(float v){  Writer out=this.out;  if (out == null)   return;  String s=String.valueOf(v);  try {    out.write(s,0,s.length());    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static UndertowFraction createDefaultFraction(String path,String password,String alias){  return createDefaultFraction().enableHTTPS(path,password,alias);}  }
class C{  public void registerService(String desiredServiceName,String serviceType){  int port=findAvaiablePort();  if (port == 0)   return;  mRegisteredServiceInfo=new NsdServiceInfo();  mRegisteredServiceInfo.setServiceName(desiredServiceName);  mRegisteredServiceInfo.setServiceType(serviceType);  mRegisteredServiceInfo.setPort(port);  mRegistrationListener=new NsdListenerRegistration(this);  mNsdManager.registerService(mRegisteredServiceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() == Conversation.TYPE_SERVER) {    throw new CommandException(service.getString(R.string.close_server_window));  }  if (params.length == 1) {    if (conversation.getType() == Conversation.TYPE_CHANNEL) {      service.getConnection(server.getId()).partChannel(conversation.getName());    }    if (conversation.getType() == Conversation.TYPE_QUERY) {      server.removeConversation(conversation.getName());      Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_REMOVE,server.getId(),conversation.getName());      service.sendBroadcast(intent);    }  }}  }
class C{  int lanso(SMat A,int iterations,int dimensions,double endl,double endr,double[] ritz,double[] bnd,double[][] wptr,int[] neigp,int n){  double[] alf, eta, oldeta, bet, wrk;  int ll, neig, j=0, intro=0, last, i, l, id3, first;  boolean ENOUGH;  alf=wptr[6];  eta=wptr[7];  oldeta=wptr[8];  bet=wptr[9];  wrk=wptr[5];  double[] ref_rnm=new double[]{0d};  double[] ref_tol=new double[]{0d};  stpone(A,wptr,ref_rnm,ref_tol,n);  double tol=ref_tol[0];  double rnm=ref_rnm[0];  if (0 == rnm || 0 != ierr)   return 0;  eta[0]=eps1;  oldeta[0]=eps1;  ll=0;  first=1;  last=svd_imin(dimensions + svd_imax(8,dimensions),iterations);  ENOUGH=false;  while (!ENOUGH) {    if (rnm <= tol)     rnm=0.0;    int[] ref_ll=new int[]{ll};    boolean[] ref_ENOUGH=new boolean[]{ENOUGH};    double[] ref2_rnm=new double[]{rnm};    double[] ref2_tol=new double[]{tol};    j=lanczos_step(A,first,last,wptr,alf,eta,oldeta,bet,ref_ll,ref_ENOUGH,ref2_rnm,ref2_tol,n);    ll=ref_ll[0];    ENOUGH=ref_ENOUGH[0];    tol=ref2_tol[0];    rnm=ref2_rnm[0];    if (ENOUGH)     j=j - 1; else     j=last - 1;    first=j + 1;    bet[j + 1]=rnm;    l=0;    for (int id2=0; id2 < j; id2++) {      if (l > j)       break;      for (i=l; i <= j; i++)       if (0 == bet[i + 1])       break;      if (i > j)       i=j;      svd_dcopy(i - l + 1,alf,l,1,ritz,l,-1);      svd_dcopy(i - l,bet,l + 1,1,wrk,l + 1,-1);      imtqlb(i - l + 1,ritz,wrk,bnd,l);      if (0 != ierr) {        svd_error("svdLAS2: imtqlb failed to converge (ierr = %ld)\n",ierr);        svd_error("  l = %ld  i = %ld\n",l,i);        for (id3=l; id3 <= i; id3++)         svd_error("  %ld  %lg  %lg  %lg\n",id3,ritz[id3],wrk[id3],bnd[id3]);      }      for (id3=l; id3 <= i; id3++)       bnd[id3]=rnm * fabs(bnd[id3]);      l=i + 1;    }    svd_dsort2((j + 1) / 2,j + 1,ritz,bnd);    boolean[] ref2_ENOUGH=new boolean[]{ENOUGH};    neig=error_bound(ref2_ENOUGH,endl,endr,ritz,bnd,j,tol);    ENOUGH=ref2_ENOUGH[0];    neigp[0]=neig;    if (neig < dimensions) {      if (0 == neig) {        last=first + 9;        intro=first;      } else       last=first + svd_imax(3,1 + ((j - intro) * (dimensions - neig)) / neig);      last=svd_imin(last,iterations);    } else     ENOUGH=true;    ENOUGH=ENOUGH || first >= iterations;  }  store(n,storeVals.STORQ,j,wptr[1]);  return j;}  }
class C{  public AssistantExecutionManager(){}  }
class C{  @Override public void error(String message){  JOptionPane.showMessageDialog(this,message,"Error",JOptionPane.ERROR_MESSAGE);}  }
class C{  public int mostLikely(){  int top=0;  for (int i=1; i < probabilities.length; i++) {    if (probabilities[i] > probabilities[top])     top=i;  }  return top;}  }
class C{  public static void addColTimes(double[][] matrix,int diag,int fromRow,int col,double factor){  int rows=matrix.length;  double[] r=null;  for (int row=fromRow; row < rows; row++) {    r=matrix[row];    r[col]-=factor * r[diag];  }}  }
class C{  public static <E>ImmutableList<E> copyOf(E[] elements){switch (elements.length) {case 0:    return ImmutableList.of();case 1:  return new SingletonImmutableList<E>(elements[0]);default :return new RegularImmutableList<E>(checkElementsNotNull(elements.clone()));}}  }
class C{  public String toString(){  return "color=" + getColor() + ",media="+ getMedia()+ ",orientation-requested="+ getOrientationRequested()+ ",origin="+ getOrigin()+ ",print-quality="+ getPrintQuality()+ ",printer-resolution=["+ printerResolution[0]+ ","+ printerResolution[1]+ ","+ printerResolution[2]+ "]";}  }
class C{  public DUpgradeCryptoStrength(JFrame parent){  super(parent,res.getString("DUpgradeCryptoStrength.Title"),Dialog.ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  private void variableTypeChanged(int itemType){  int testType=_curVariable.getType();  if (log.isDebugEnabled()) {    log.debug("variableTypeChanged: itemType= " + itemType + ", testType= "+ testType);  }  _variableNamePanel.setVisible(false);  _variableStatePanel.setVisible(false);  _variableComparePanel.setVisible(false);  _variableSignalPanel.setVisible(false);  _variableData1Panel.setVisible(false);  _variableData2Panel.setVisible(false);  _variableStateBox.removeAllItems();  _variableNameField.removeActionListener(variableSignalHeadNameListener);  _variableNameField.removeActionListener(variableSignalMastNameListener);  _variableStateBox.removeActionListener(variableSignalTestStateListener);switch (itemType) {case Conditional.TYPE_NONE:    return;case Conditional.ITEM_TYPE_SENSOR:  _variableNamePanel.setToolTipText(rbx.getString("NameHintSensor"));for (int i=0; i < Conditional.ITEM_TO_SENSOR_TEST.length; i++) {  _variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_SENSOR_TEST[i]));}_variableStatePanel.setVisible(true);_variableNamePanel.setVisible(true);break;case Conditional.ITEM_TYPE_TURNOUT:_variableNamePanel.setToolTipText(rbx.getString("NameHintTurnout"));for (int i=0; i < Conditional.ITEM_TO_LIGHT_TEST.length; i++) {_variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_TURNOUT_TEST[i]));}_variableNamePanel.setVisible(true);_variableStatePanel.setVisible(true);break;case Conditional.ITEM_TYPE_LIGHT:_variableNamePanel.setToolTipText(rbx.getString("NameHintLight"));for (int i=0; i < Conditional.ITEM_TO_LIGHT_TEST.length; i++) {_variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_LIGHT_TEST[i]));}_variableStatePanel.setVisible(true);_variableNamePanel.setVisible(true);break;case Conditional.ITEM_TYPE_SIGNALHEAD:_variableNameField.addActionListener(variableSignalHeadNameListener);_variableStateBox.addActionListener(variableSignalTestStateListener);loadJComboBoxWithSignalAspects(_variableSignalBox,_variableNameField.getText().trim());for (int i=0; i < Conditional.ITEM_TO_SIGNAL_HEAD_TEST.length; i++) {_variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_SIGNAL_HEAD_TEST[i]));}_variableNamePanel.setToolTipText(rbx.getString("NameHintSignal"));_variableNamePanel.setVisible(true);_variableStatePanel.setVisible(true);if (testType == Conditional.TYPE_SIGNAL_HEAD_APPEARANCE_EQUALS) {_variableSignalPanel.setVisible(true);} else {_variableSignalPanel.setVisible(false);}break;case Conditional.ITEM_TYPE_SIGNALMAST:_variableNameField.addActionListener(variableSignalMastNameListener);_variableStateBox.addActionListener(variableSignalTestStateListener);loadJComboBoxWithMastAspects(_variableSignalBox,_variableNameField.getText().trim());for (int i=0; i < Conditional.ITEM_TO_SIGNAL_MAST_TEST.length; i++) {_variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_SIGNAL_MAST_TEST[i]));}_variableNamePanel.setToolTipText(rbx.getString("NameHintSignalMast"));_variableNamePanel.setVisible(true);_variableStatePanel.setVisible(true);if (testType == Conditional.TYPE_SIGNAL_MAST_ASPECT_EQUALS) {_variableSignalPanel.setVisible(true);} else {_variableSignalPanel.setVisible(false);}break;case Conditional.ITEM_TYPE_MEMORY:JPanel p=(JPanel)_variableData1Panel.getComponent(0);JLabel l=(JLabel)p.getComponent(0);if ((testType == Conditional.TYPE_MEMORY_COMPARE) || (testType == Conditional.TYPE_MEMORY_COMPARE_INSENSITIVE)) {l.setText(rbx.getString("LabelMemoryValue"));_variableData1Panel.setToolTipText(rbx.getString("DataHintMemory"));} else {l.setText(rbx.getString("LabelLiteralValue"));_variableData1Panel.setToolTipText(rbx.getString("DataHintValue"));}_variableNamePanel.setToolTipText(rbx.getString("NameHintMemory"));_variableNamePanel.setVisible(true);_variableData1Panel.setToolTipText(rbx.getString("DataHintMemory"));_variableData1Panel.setVisible(true);_variableComparePanel.setVisible(true);break;case Conditional.ITEM_TYPE_CONDITIONAL:_variableNamePanel.setToolTipText(rbx.getString("NameHintConditional"));for (int i=0; i < Conditional.ITEM_TO_CONDITIONAL_TEST.length; i++) {_variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_CONDITIONAL_TEST[i]));}_variableNamePanel.setVisible(true);_variableStatePanel.setVisible(true);break;case Conditional.ITEM_TYPE_WARRANT:_variableNamePanel.setToolTipText(rbx.getString("NameHintWarrant"));for (int i=0; i < Conditional.ITEM_TO_WARRANT_TEST.length; i++) {_variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_WARRANT_TEST[i]));}_variableNamePanel.setVisible(true);_variableStatePanel.setVisible(true);break;case Conditional.ITEM_TYPE_CLOCK:p=(JPanel)_variableData1Panel.getComponent(0);l=(JLabel)p.getComponent(0);l.setText(rbx.getString("LabelStartTime"));_variableData1Panel.setToolTipText(rbx.getString("DataHintTime"));_variableData1Panel.setVisible(true);_variableData2Panel.setVisible(true);break;case Conditional.ITEM_TYPE_OBLOCK:_variableNamePanel.setToolTipText(rbx.getString("NameHintOBlock"));_variableNamePanel.setVisible(true);_variableStateBox.removeAllItems();Iterator<String> names=OBlock.getLocalStatusNames();while (names.hasNext()) {_variableStateBox.addItem(names.next());}_variableStatePanel.setVisible(true);break;case Conditional.ITEM_TYPE_ENTRYEXIT:_variableNameField.setText(_curVariable.getName());for (int i=0; i < Conditional.ITEM_TO_ENTRYEXIT_TEST.length; i++) {_variableStateBox.addItem(ConditionalVariable.getStateString(Conditional.ITEM_TO_ENTRYEXIT_TEST[i]));}_variableStatePanel.setVisible(true);_variableNamePanel.setVisible(true);break;default :break;}_variableStateBox.setMaximumSize(_variableStateBox.getPreferredSize());}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public ClassPath insertClassPath(String pathname) throws NotFoundException {  return source.insertClassPath(pathname);}  }
class C{  public synchronized float recordFailure(){  ringBitSet.setNextBit(true);  return getFailureRate();}  }
class C{  public String[] readAllStrings(){  String[] tokens=WHITESPACE_PATTERN.split(readAll());  if (tokens.length == 0 || tokens[0].length() > 0)   return tokens;  String[] decapitokens=new String[tokens.length - 1];  for (int i=0; i < tokens.length - 1; i++)   decapitokens[i]=tokens[i + 1];  return decapitokens;}  }
class C{  public void assertSplit(long suggestedStart,long suggestedLen,long expStart,long expLen,byte[] data,byte[]... delims) throws Exception {  write(data);  IgfsByteDelimiterRecordResolver rslvr=resolver(delims);  IgfsFileRange split;  try (IgfsInputStream is=read()){    split=rslvr.resolveRecords(igfs,is,split(suggestedStart,suggestedLen));  }   assert split != null : "Split is null.";  assert split.start() == expStart : "Incorrect start [expected=" + expStart + ", actual="+ split.start()+ ']';  assert split.length() == expLen : "Incorrect length [expected=" + expLen + ", actual="+ split.length()+ ']';}  }
class C{  public void testMaxEqual(){  String a="8478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="8478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="8478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.max(bNumber));}  }
class C{  public static Point2D findDistancedPoint(double t,Point2D sp,Point2D c1,Point2D c2,Point2D ep){  double d=1 - t;  double dCube=d * d * d;  double dSqr=d * d;  double tCube=t * t * t;  double tSqr=t * t;  double xCoord=(dCube * sp.getX()) + (3 * t * dSqr* c1.getX()) + (3 * tSqr * d* c2.getX())+ (tCube * ep.getX());  double yCoord=(dCube * sp.getY()) + (3 * t * dSqr* c1.getY()) + (3 * tSqr * d* c2.getY())+ (tCube * ep.getY());  return new Point2D.Double(xCoord,yCoord);}  }
class C{  public void writeNFO(){  List<TvShowEpisode> episodesInNfo=new ArrayList<>(1);  LOGGER.debug("write nfo: " + getTvShow().getTitle() + " S"+ getSeason()+ "E"+ getEpisode());  for (  MediaFile mf : getMediaFiles(MediaFileType.VIDEO)) {    List<TvShowEpisode> eps=new ArrayList<TvShowEpisode>(TvShowList.getInstance().getTvEpisodesByFile(tvShow,mf.getFile()));    for (    TvShowEpisode ep : eps) {      if (!episodesInNfo.contains(ep)) {        episodesInNfo.add(ep);      }    }  }  TvShowEpisodeToXbmcNfoConnector.setData(episodesInNfo);}  }
class C{  @PUT @Path("password") public void updatePassword(APIUserPasswordUpdate userPasswordUpdate,@Context HttpServletRequest request) throws GuacamoleException {  Credentials credentials=new Credentials();  credentials.setUsername(user.getIdentifier());  credentials.setPassword(userPasswordUpdate.getOldPassword());  credentials.setRequest(request);  credentials.setSession(request.getSession(true));  try {    AuthenticationProvider authProvider=userContext.getAuthenticationProvider();    if (authProvider.authenticateUser(credentials) == null)     throw new GuacamoleSecurityException("Permission denied.");  } catch (  GuacamoleCredentialsException e) {    throw new GuacamoleSecurityException("Permission denied.");  }  user.setPassword(userPasswordUpdate.getNewPassword());  directory.update(user);}  }
class C{  public boolean isPowerOn(){  return powerOn;}  }
class C{  public static Database open(File mdbFile) throws IOException {  return new DatabaseBuilder(mdbFile).open();}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] contents){  if (elementCount > contents.length) {    return null;  }  System.arraycopy(elementData,0,contents,0,elementCount);  if (elementCount < contents.length) {    contents[elementCount]=null;  }  return contents;}  }
class C{  private Targetable chooseTarget(Coords pos){  final IGame game=clientgui.getClient().getGame();  final Entity ce=ce();  Targetable choice=null;  ArrayList<Targetable> targets=new ArrayList<Targetable>();  for (  Entity ent : game.getEntitiesVector(pos)) {    if (!ce.equals(ent)) {      targets.add(ent);    }  }  Building bldg=clientgui.getClient().getGame().getBoard().getBuildingAt(pos);  if (bldg != null) {    targets.add(new BuildingTarget(pos,clientgui.getClient().getGame().getBoard(),false));  }  if (targets.size() == 1) {    choice=targets.get(0);  } else   if (targets.size() > 1) {    String input=(String)JOptionPane.showInputDialog(clientgui,Messages.getString("MovementDisplay.ChooseTargetDialog.message",new Object[]{pos.getBoardNum()}),Messages.getString("MovementDisplay.ChooseTargetDialog.title"),JOptionPane.QUESTION_MESSAGE,null,SharedUtility.getDisplayArray(targets),null);    choice=SharedUtility.getTargetPicked(targets,input);  }  return choice;}  }
class C{  public Type3Message(Type2Message type2){  setFlags(getDefaultFlags(type2));  setWorkstation(getDefaultWorkstation());  String domain=getDefaultDomain();  setDomain(domain);  String user=getDefaultUser();  setUser(user);  String password=getDefaultPassword();switch (LM_COMPATIBILITY) {case 0:case 1:    setLMResponse(getLMResponse(type2,password));  setNTResponse(getNTResponse(type2,password));break;case 2:byte[] nt=getNTResponse(type2,password);setLMResponse(nt);setNTResponse(nt);break;case 3:case 4:case 5:byte[] clientChallenge=new byte[8];RANDOM.nextBytes(clientChallenge);setLMResponse(getLMv2Response(type2,domain,user,password,clientChallenge));break;default :setLMResponse(getLMResponse(type2,password));setNTResponse(getNTResponse(type2,password));}}  }
class C{  @Override public void instanceIsPassive(){  LOG.info("Reacting to passive state: shutting down Kafka consumers.");  stop();}  }
class C{  String prepareCategoryRestriction() throws ObjectNotFoundException {  StringBuffer buffer=new StringBuffer();  categoryId=listCriteria.getCategoryId();  if (categoryId != null) {    checkIfCategoryExists(categoryId);    buffer.append(" AND EXISTS (");    buffer.append(" SELECT p.tkey");    buffer.append("   FROM category c, categorytocatalogentry ctce, catalogentry ce");    buffer.append("  WHERE c.categoryid = :categoryId");    buffer.append("    AND c.marketplacekey = :marketplaceKey");    buffer.append("    AND c.tkey = ctce.category_tkey");    buffer.append("    AND ctce.catalogentry_tkey = ce.tkey");    buffer.append("    AND (ce.product_tkey = p.tkey OR (ce.product_tkey = p.template_tkey AND p.type = 'CUSTOMER_TEMPLATE'))");    buffer.append(" )");  }  return buffer.toString();}  }
class C{  public static Disposition valueOf(int value){  Disposition entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + State.class.getName() + ""+ value+ "!");}  }
class C{  public final void storeWifiScanResults(final PositionRecord begin,final PositionRecord end,final ArrayList<WifiRecord> wifis){  if (wifis == null || wifis.size() == 0) {    return;  } else {    Log.d(TAG,"Inserting " + wifis.size() + " wifis with "+ begin+ end+ " positions");  }  final ArrayList<ContentProviderOperation> operations=new ArrayList<>();  operations.add(ContentProviderOperation.newInsert(ContentProvider.CONTENT_URI_POSITION).withValue(Schema.COL_LATITUDE,begin.getLatitude()).withValue(Schema.COL_LONGITUDE,begin.getLongitude()).withValue(Schema.COL_ALTITUDE,begin.getAltitude()).withValue(Schema.COL_TIMESTAMP,begin.getOpenBmapTimestamp()).withValue(Schema.COL_ACCURACY,begin.getAccuracy()).withValue(Schema.COL_BEARING,begin.getBearing()).withValue(Schema.COL_SPEED,begin.getSpeed()).withValue(Schema.COL_SESSION_ID,begin.getSession()).withValue(Schema.COL_SOURCE,begin.getSource()).build());  operations.add(ContentProviderOperation.newInsert(ContentProvider.CONTENT_URI_POSITION).withValue(Schema.COL_LATITUDE,end.getLatitude()).withValue(Schema.COL_LONGITUDE,end.getLongitude()).withValue(Schema.COL_ALTITUDE,end.getAltitude()).withValue(Schema.COL_TIMESTAMP,end.getOpenBmapTimestamp()).withValue(Schema.COL_ACCURACY,end.getAccuracy()).withValue(Schema.COL_BEARING,end.getBearing()).withValue(Schema.COL_SPEED,end.getSpeed()).withValue(Schema.COL_SESSION_ID,end.getSession()).withValue(Schema.COL_SOURCE,end.getSource()).build());  for (  final WifiRecord wifi : wifis) {    operations.add(ContentProviderOperation.newInsert(ContentProvider.CONTENT_URI_WIFI).withValue(Schema.COL_BSSID,wifi.getBssid()).withValue(Schema.COL_SSID,wifi.getSsid()).withValue(Schema.COL_MD5_SSID,wifi.getMd5Ssid()).withValue(Schema.COL_CAPABILITIES,wifi.getCapabilities()).withValue(Schema.COL_FREQUENCY,wifi.getFrequency()).withValue(Schema.COL_LEVEL,wifi.getLevel()).withValue(Schema.COL_TIMESTAMP,wifi.getOpenBmapTimestamp()).withValueBackReference(Schema.COL_BEGIN_POSITION_ID,0).withValueBackReference(Schema.COL_END_POSITION_ID,1).withValue(Schema.COL_SESSION_ID,wifi.getSessionId()).withValue(Schema.COL_KNOWN_WIFI,wifi.getCatalogStatusInt()).build());  }  try {    final ContentProviderResult[] results=contentResolver.applyBatch("org.openbmap.provider",operations);  } catch (  final RemoteException e) {    Log.e(TAG,e.toString(),e);  }catch (  final OperationApplicationException e) {    Log.e(TAG,e.toString(),e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void validateActiveFullCopyCount(BlockObject fcSourceObj,int numRequested,int otherCount,DbClient dbClient){  List<Volume> undetachedFullCopies=getUndetachedFullCopiesForSource(fcSourceObj,dbClient);  int currentCount=undetachedFullCopies.size() + otherCount;  URI systemURI=fcSourceObj.getStorageController();  StorageSystem system=dbClient.queryObject(StorageSystem.class,systemURI);  int maxCount=Integer.MAX_VALUE;  if (system != null) {    maxCount=BlockFullCopyManager.getMaxFullCopiesForSystemType(system.getSystemType());  }  if ((numRequested + currentCount) > maxCount) {    throw APIException.badRequests.maxFullCopySessionLimitExceeded(fcSourceObj.getId(),maxCount - currentCount);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.501 -0500",hash_original_method="51201694E0EE76265BF39848EF10BE9C",hash_generated_method="49E6B3D175AEB85C0CC035D6E473FA9A") public boolean isSecure(){  return false;}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  private void checkBuffer(int needBytes) throws IOException {  if (!this.doingInput && this.bufferPointer.bufferOffset > 0) {    flush();  }  this.doingInput=true;  if (this.bufferPointer.bufferOffset + needBytes < this.bufferPointer.bufferLength) {    return;  }  int len=this.bufferPointer.bufferLength - this.bufferPointer.bufferOffset;  this.fileOffset+=this.bufferPointer.bufferOffset;  if (len > 0) {    System.arraycopy(this.bufferPointer.buffer,this.bufferPointer.bufferOffset,this.bufferPointer.buffer,0,len);  }  needBytes-=len;  this.bufferPointer.bufferLength=len;  this.bufferPointer.bufferOffset=0;  while (needBytes > 0) {    len=this.randomAccessFile.read(this.bufferPointer.buffer,this.bufferPointer.bufferLength,this.bufferPointer.buffer.length - this.bufferPointer.bufferLength);    if (len < 0) {      throw new EOFException();    }    needBytes-=len;    this.bufferPointer.bufferLength+=len;  }}  }
class C{  @Transactional public void createUser(String username,String email,String fullname,String password,boolean admin,String group){  if (!isAuthenticated()) {    return;  }  UserEntity user=new UserEntity();  user.setUsername(username);  user.setEmail(email);  user.setFullname(fullname);  user.setPasswordHash(sha256(password));  user.setUsergroup(group);  user.setFavourites(Collections.<String>emptyList());  if (admin) {    user.setUserrole(Role.ROLE_ADMIN);  } else {    user.setUserrole(Role.ROLE_USER);  }  userEntityRepository.save(user);  LOG.info("User '{}' has created a new user '{}'",getUser().getUsername(),username);}  }
class C{  public static <E>SortedSet<E> constrainedSortedSet(SortedSet<E> sortedSet,Constraint<? super E> constraint){  return new ConstrainedSortedSet<E>(sortedSet,constraint);}  }
class C{  public void testNestedNegationRewriting(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final FunctionNode filterANot1=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o")}));    final FunctionNode filterANot2=FunctionNode.NOT(filterANot1);    final FunctionNode filterANot3=FunctionNode.NOT(filterANot2);    final FunctionNode filterBNot1=FunctionNode.NOT(new FunctionNode(FunctionRegistry.EQ,null,new ValueExpressionNode[]{new VarNode("s"),new VarNode("o")}));    final FunctionNode filterBNot2=FunctionNode.NOT(filterBNot1);    final FunctionNode filterBNot3=FunctionNode.NOT(filterBNot2);    final FunctionNode filterBNot4=FunctionNode.NOT(filterBNot3);    final FilterNode filterNode=new FilterNode(FunctionNode.NOT(FunctionNode.AND(filterANot3,filterBNot4)));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final FunctionNode bound=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o")});    final FunctionNode neq=new FunctionNode(FunctionRegistry.NE,null,new ValueExpressionNode[]{new VarNode("s"),new VarNode("o")});    FilterNode filterNode=new FilterNode(FunctionNode.OR(bound,neq));    assertTrue(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof PolynomialFunction2D)) {    return false;  }  PolynomialFunction2D that=(PolynomialFunction2D)obj;  return Arrays.equals(this.coefficients,that.coefficients);}  }
class C{  private void pdagWithBk(Graph graph,IKnowledge knowledge){  MeekRules rules=new MeekRules();  rules.setKnowledge(knowledge);  rules.orientImplied(graph);}  }
class C{  public String businessObjectDataEntityAltKeyToString(BusinessObjectDataEntity businessObjectDataEntity){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectDataEntity.getBusinessObjectFormat();  return businessObjectDataKeyToString(businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode(),businessObjectFormatEntity.getBusinessObjectDefinition().getName(),businessObjectFormatEntity.getUsage(),businessObjectFormatEntity.getFileType().getCode(),businessObjectFormatEntity.getBusinessObjectFormatVersion(),businessObjectDataEntity.getPartitionValue(),getSubPartitionValues(businessObjectDataEntity),businessObjectDataEntity.getVersion());}  }
class C{  public T caseThisArgProvider(ThisArgProvider object){  return null;}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mSignalStrength);  dest.writeInt(mBitErrorRate);}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  @CanExecute public boolean canExecute(){  return false;}  }
class C{  private void findChangesInPositioning(IJavaElement element,int depth){  if (depth >= this.maxDepth || this.added.contains(element) || this.removed.contains(element))   return;  if (!isPositionedCorrectly(element)) {    this.delta.changed(element,IJavaElementDelta.F_REORDER);  }  if (element instanceof IParent) {    JavaElementInfo info=null;    try {      info=(JavaElementInfo)((JavaElement)element).getElementInfo();    } catch (    JavaModelException npe) {      return;    }    IJavaElement[] children=info.getChildren();    if (children != null) {      int length=children.length;      for (int i=0; i < length; i++) {        findChangesInPositioning(children[i],depth + 1);      }    }  }}  }
class C{  public Point3d(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void finish(){  stepCounter=20;  stepSizeMultiplier=3;  timer.setDelay(15);}  }
class C{  public String closeToTipText(){  return "The number values are checked for whether they are too close to " + "and get replaced by a default.";}  }
class C{  public boolean isPubKeyMine(byte[] pubkey){  return findKeyFromPubKey(pubkey) != null;}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  if (core == null) {    core=new RSACoreEngine();  }  core.init(forEncryption,param);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.983 -0500",hash_original_method="42220754D208F7633D722D928E4FD163",hash_generated_method="608AB390C1A12B16DEDCCA342E1016AE") @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @Override public int read() throws IOException {synchronized (lock) {    if (!isOpen()) {      throw new IOException("InputStreamReader is closed");    }    char[] buf=new char[1];    return read(buf,0,1) != -1 ? buf[0] : -1;  }}  }
class C{  public Pair<String,String> compareXml(String oldXml,String newXml){  if (oldXml == null && newXml == null) {    return null;  }  if (oldXml == null) {    return new Pair<String,String>(null,newXml);  }  if (newXml == null) {    return new Pair<String,String>(oldXml,null);  }  SAXBuilder saxBuilder=new SAXBuilder();  saxBuilder.setReuseParser(true);  Document oldDocument=null, newDocument=null;  try {    oldDocument=saxBuilder.build(new StringReader(oldXml));    newDocument=saxBuilder.build(new StringReader(newXml));  } catch (  Exception ex) {    System.err.println("Invalid XML content:\n " + oldXml + "\n and: \n"+ newXml);  }  if (oldDocument == null || newDocument == null) {    return null;  }  return XmlDiff.compareXml(oldDocument,newDocument);}  }
class C{  protected void removeAllCommands(){  commands.removeAllElements();  int behavior=getCommandBehavior();  if (behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_RIGHT || behavior == Display.COMMAND_BEHAVIOR_ICS) {    if (getTitleComponent() != null) {      getTitleComponent().getParent().removeAll();    }    getTitleAreaContainer().removeAll();    getTitleAreaContainer().addComponent(BorderLayout.CENTER,getTitleComponent());    removeAll();    initTitleBarStatus();    return;  }  updateCommands();}  }
class C{  public OsmNetworkReader(final Network network,final CoordinateTransformation transformation,final boolean useHighwayDefaults){  this.network=network;  this.transform=transformation;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults(1,"motorway",2,120.0 / 3.6,1.0,2000,true);    this.setHighwayDefaults(1,"motorway_link",1,80.0 / 3.6,1.0,1500,true);    this.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,1.0,2000);    this.setHighwayDefaults(2,"trunk_link",1,50.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary",1,80.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary_link",1,60.0 / 3.6,1.0,1500);    this.setHighwayDefaults(4,"secondary",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(5,"tertiary",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"minor",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"unclassified",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"residential",1,30.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300);  }}  }
class C{  public boolean isUserRunning(int userid){  try {    return ActivityManagerNative.getDefault().isUserRunning(userid,false);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public boolean decodeIntegerValue(int startIndex){  if (decodeShortInteger(startIndex) == true) {    return true;  }  return decodeLongInteger(startIndex);}  }
class C{  @Override public int hashCode(){  int hash=_rawURI.hashCode();  if (_rawHost != null) {    hash=hash * 65521 + _rawHost.hashCode();  }  hash=hash * 65521 + _port;  return hash;}  }
class C{  public void firePropertyChange(String propertyName,double oldValue,double newValue){}  }
class C{  public static Gas readFromNBT(NBTTagCompound nbtTags){  if (nbtTags == null || nbtTags.hasNoTags()) {    return null;  }  return GasRegistry.getGas(nbtTags.getString("gasName"));}  }
class C{  @Override public boolean doesGuiPauseGame(){  return false;}  }
class C{  @Override @Inline public final void collectionPhase(short phaseId,boolean primary){  if (DEBUG) {    Log.write("--Phase Mutator.");    Log.writeln(Phase.getName(phaseId));  }  if (phaseId == SSGCspy.PREPARE) {    gcspyGatherData(SSGCspy.BEFORE_COLLECTION);    super.collectionPhase(phaseId,primary);    return;  }  if (phaseId == SSGCspy.RELEASE) {    gcspyGatherData(SSGCspy.SEMISPACE_COPIED);    super.collectionPhase(phaseId,primary);    gcspyGatherData(SSGCspy.AFTER_COLLECTION);    return;  }  super.collectionPhase(phaseId,primary);}  }
class C{  protected boolean down(TextView widget,Spannable buffer){  return false;}  }
class C{  private long skipByReading(final long n) throws IOException {  long toSkip=n;  int len;  while (toSkip > 0) {    len=is.read(buffer,0,(int)Math.min(buffer.length,toSkip));    if (len > 0)     toSkip-=len; else     break;  }  return n - toSkip;}  }
class C{  @SuppressWarnings("unchecked") public <X>EventMapperFunctor<E,X,X> rememberLast(@SuppressWarnings("unused") final Class<X> __){  return ((EventMapperFunctor<E,X,X>)this).does(null);}  }
class C{  public void clear(int capacity){  _data=new long[capacity];  _pos=0;}  }
class C{  public String toString(){  return state.toString();}  }
class C{  public WebSocket removeHeaders(String name){  mHandshakeBuilder.removeHeaders(name);  return this;}  }
class C{  protected IssueCommentsEntry insertComment(String issueId,IssueCommentsEntry entry) throws IOException, ServiceException {  return insertComment(makeCommentsFeedUrl(issueId),entry);}  }
class C{  public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  VolumeDataset volumeDataset=(VolumeDataset)dataset;  VolumeItem volumeItem=(VolumeItem)volumeDataset.getSeries(series).getDataItem(item);  if (volumeItem.isSide()) {    this.color=Color.GREEN;  } else {    this.color=Color.RED;  }  double value0;  double value1;  if (this.getUseYInterval()) {    value0=volumeDataset.getStartYValue(series,item);    value1=volumeDataset.getEndYValue(series,item);  } else {    value0=this.getBase();    value1=volumeDataset.getYValue(series,item);  }  if (Double.isNaN(value0) || Double.isNaN(value1)) {    return;  }  if (value0 <= value1) {    if (!rangeAxis.getRange().intersects(value0,value1)) {      return;    }  } else {    if (!rangeAxis.getRange().intersects(value1,value0)) {      return;    }  }  double translatedValue0=rangeAxis.valueToJava2D(value0,dataArea,plot.getRangeAxisEdge());  double translatedValue1=rangeAxis.valueToJava2D(value1,dataArea,plot.getRangeAxisEdge());  double bottom=Math.min(translatedValue0,translatedValue1);  double top=Math.max(translatedValue0,translatedValue1);  double startX=volumeItem.getPeriod().getFirstMillisecond();  if (Double.isNaN(startX)) {    return;  }  double endX=volumeItem.getPeriod().getLastMillisecond();  if (Double.isNaN(endX)) {    return;  }  if (startX <= endX) {    if (!domainAxis.getRange().intersects(startX,endX)) {      return;    }  } else {    if (!domainAxis.getRange().intersects(endX,startX)) {      return;    }  }  if (this.getBarAlignmentFactor() >= 0.0 && this.getBarAlignmentFactor() <= 1.0) {    double x=volumeDataset.getXValue(series,item);    double interval=endX - startX;    startX=x - interval * this.getBarAlignmentFactor();    endX=startX + interval;  }  RectangleEdge location=plot.getDomainAxisEdge();  double translatedStartX=domainAxis.valueToJava2D(startX,dataArea,location);  double translatedEndX=domainAxis.valueToJava2D(endX,dataArea,location);  double translatedWidth=Math.max(1,Math.abs(translatedEndX - translatedStartX));  RectangleEdge domainEdge=plot.getDomainAxisEdge();  double xx=domainAxis.valueToJava2D(startX,dataArea,domainEdge);  if (getMargin() > 0.0) {    double cut=translatedWidth * getMargin();    translatedWidth=translatedWidth - cut;  }  Rectangle2D bar=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    bottom=Math.max(bottom,dataArea.getMinX());    top=Math.min(top,dataArea.getMaxX());    bar=new Rectangle2D.Double(bottom,xx,top - bottom,translatedWidth);  } else   if (orientation == PlotOrientation.VERTICAL) {    bottom=Math.max(bottom,dataArea.getMinY());    top=Math.min(top,dataArea.getMaxY());    bar=new Rectangle2D.Double(xx - (translatedWidth / 2),bottom,translatedWidth,top - bottom);  }  boolean positive=(value1 > 0.0);  boolean inverted=rangeAxis.isInverted();  RectangleEdge barBase;  if (orientation == PlotOrientation.HORIZONTAL) {    if (positive && inverted || !positive && !inverted) {      barBase=RectangleEdge.RIGHT;    } else {      barBase=RectangleEdge.LEFT;    }  } else {    if (positive && !inverted || !positive && inverted) {      barBase=RectangleEdge.BOTTOM;    } else {      barBase=RectangleEdge.TOP;    }  }  if (getShadowsVisible()) {    this.getBarPainter().paintBarShadow(g2,this,series,item,bar,barBase,!this.getUseYInterval());  }  this.getBarPainter().paintBar(g2,this,series,item,bar,barBase);  if (isItemLabelVisible(series,item)) {    XYItemLabelGenerator generator=getItemLabelGenerator(series,item);    drawItemLabel(g2,dataset,series,item,plot,generator,bar,value1 < 0.0);  }  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  double transX1=domainAxis.valueToJava2D(x1,dataArea,location);  double transY1=rangeAxis.valueToJava2D(y1,dataArea,plot.getRangeAxisEdge());  int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);  int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);  updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,plot.getOrientation());  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    String tip=null;    XYToolTipGenerator generator=getToolTipGenerator(series,item);    if (generator != null) {      tip=generator.generateToolTip(dataset,series,item);    }    XYItemEntity entity=new XYItemEntity(bar,dataset,series,item,tip,null);    entities.add(entity);  }}  }
class C{  public final static String formatHeaderElement(final HeaderElement elem,boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatHeaderElement(null,elem,quote).toString();}  }
class C{  public Blood(final String clazz,final int amount){  String myClass=clazz;  if (myClass == null) {    myClass="red";  }  setRPClass("blood");  put("type","blood");  setEntityClass(myClass);  put("amount",amount);  SingletonRepository.getTurnNotifier().notifyInSeconds(DEGRADATION_TIMEOUT,this.turnlistener);}  }
class C{  public boolean hasParams(){  return !cookieParams.isEmpty() || !urlParams.isEmpty() || !formParams.isEmpty();}  }
class C{  @Synchronized("accessLock") public void close(){  mainMap.clear();  for (  UserChannelMap<U,C> curLevelMap : levelsMap.values())   curLevelMap.clear();  channelNameMap.clear();  privateUsers.clear();  userNickMap.clear();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.541 -0500",hash_original_method="39A6E49D71A514B448DAD14BF952A265",hash_generated_method="04E6AC5DE73619CBEFDA60351FDE1B9C") public final void sendMessageDelayed(int what,Object obj,long delayMillis){  if (mSmHandler == null)   return;  mSmHandler.sendMessageDelayed(obtainMessage(what,obj),delayMillis);}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  public void execute(Object parent){  mxGraphHierarchyModel model=layout.getModel();  nestedBestRanks=new mxGraphAbstractHierarchyCell[model.ranks.size()][];  for (int i=0; i < nestedBestRanks.length; i++) {    mxGraphHierarchyRank rank=model.ranks.get(new Integer(i));    nestedBestRanks[i]=new mxGraphAbstractHierarchyCell[rank.size()];    rank.toArray(nestedBestRanks[i]);  }  iterationsWithoutImprovement=0;  currentBestCrossings=calculateCrossings(model);  for (int i=0; i < maxIterations && iterationsWithoutImprovement < maxNoImprovementIterations; i++) {    weightedMedian(i,model);    transpose(i,model);    int candidateCrossings=calculateCrossings(model);    if (candidateCrossings < currentBestCrossings) {      currentBestCrossings=candidateCrossings;      iterationsWithoutImprovement=0;      for (int j=0; j < nestedBestRanks.length; j++) {        mxGraphHierarchyRank rank=model.ranks.get(new Integer(j));        Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();        for (int k=0; k < rank.size(); k++) {          mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();          nestedBestRanks[j][cell.getGeneralPurposeVariable(j)]=cell;        }      }    } else {      iterationsWithoutImprovement++;      for (int j=0; j < nestedBestRanks.length; j++) {        mxGraphHierarchyRank rank=model.ranks.get(new Integer(j));        Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();        for (int k=0; k < rank.size(); k++) {          mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();          cell.setGeneralPurposeVariable(j,k);        }      }    }    if (currentBestCrossings == 0) {      break;    }  }  Map<Integer,mxGraphHierarchyRank> ranks=new LinkedHashMap<Integer,mxGraphHierarchyRank>(model.maxRank + 1);  mxGraphHierarchyRank[] rankList=new mxGraphHierarchyRank[model.maxRank + 1];  for (int i=0; i < model.maxRank + 1; i++) {    rankList[i]=new mxGraphHierarchyRank();    ranks.put(new Integer(i),rankList[i]);  }  for (int i=0; i < nestedBestRanks.length; i++) {    for (int j=0; j < nestedBestRanks[i].length; j++) {      rankList[i].add(nestedBestRanks[i][j]);    }  }  model.ranks=ranks;}  }
class C{  public static boolean uninstallNormal(Context context,String packageName){  if (packageName == null || packageName.length() == 0) {    return false;  }  Intent i=new Intent(Intent.ACTION_DELETE,Uri.parse(new StringBuilder(32).append("package:").append(packageName).toString()));  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  private File findBaselineForThisMember(File baselineParentDir){  File baselineDir=null;  for (  DiskStoreImpl diskStore : cache.listDiskStoresIncludingRegionOwned()) {    baselineDir=FileUtil.find(baselineParentDir,".*" + diskStore.getBackupDirName() + "$");    if (null != baselineDir) {      break;    }  }  if (null != baselineDir) {    baselineDir=baselineDir.getParentFile().getParentFile();  }  return baselineDir;}  }
class C{  public static final java.lang.String readUTF(java.io.DataInput in) throws java.io.IOException {  return decodeUTF(in.readUnsignedShort(),in);}  }
class C{  public long writeLongSkewedGolomb(final long x,final long b) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (b < 0)   throw new IllegalArgumentException("The modulus " + b + " is negative");  if (b == 0) {    if (x != 0)     throw new IllegalArgumentException("The modulus is 0, but the argument is " + x);    return 0;  }  final long i=Fast.mostSignificantBit(x / b + 1);  final long l=writeLongUnary(i);  final long M=((1 << i + 1) - 1) * b;  final long m=(M / (2 * b)) * b;  return l + writeLongMinimalBinary(x - m,M - m);}  }
class C{  public void testFormatNull(){  mFReal=new FormatReal(2,2);  try {    mStrBuff=mFReal.format(null,0.0d);    fail("should throw exception");  } catch (  final RuntimeException e) {  }}  }
class C{  protected static int parseShortInteger(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  return temp & 0x7F;}  }
class C{  public static <I,A>Parser<I,A> option(Parser<I,A> p,A x){  return or(p,retn(x));}  }
class C{  public static void add(List<String> options,char option,boolean value){  add(options,"" + option,value);}  }
class C{  public static int uniform(int n){  if (n <= 0)   throw new IllegalArgumentException("Parameter N must be positive");  return random.nextInt(n);}  }
class C{  private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {  iInstant=(DateTime)oos.readObject();  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();  iField=type.getField(iInstant.getChronology());}  }
class C{  public void focusGained(FocusEvent e){  if (log.isDebugEnabled()) {    log.debug("focusGained");  }  enterField();}  }
class C{  public static double squarePointsToInch(double area){  return area / (POINT_POSTSCRIPT * POINT_POSTSCRIPT);}  }
class C{  public DataSource createCustomVolumeNameDataSource(Project project,TenantOrg tenant,String volumeLabel,String volumeWWN,String exportName,String configName){  List<DataObject> dataObjectsList=new ArrayList<>();  dataObjectsList.add(project);  dataObjectsList.add(tenant);  Volume volume=new Volume();  volume.setLabel(volumeLabel);  volume.setWWN(volumeWWN);  dataObjectsList.add(volume);  Map<String,String> computedValueMap=new HashMap<String,String>();  if (exportName != null) {    computedValueMap.put(CustomConfigConstants.CUSTOM_VOLUME_EXPORT_NAME,exportName);  }  DataObject[] dataObjects=new DataObject[dataObjectsList.size()];  return createDataSource(configName,dataObjectsList.toArray(dataObjects),computedValueMap);}  }
class C{  public GenericEntry addOwnerToGroup(String groupId,String ownerName) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("email",ownerName);  return insert(new URL(baseDomainUrl + groupId + "/owner"),entry);}  }
class C{  public Viennet4(){  super(2,3,3);}  }
class C{  public static void drawToPng(final File dest,final AnnotatedTypeMirror type){  try {    final File dotFile=File.createTempFile(dest.getName(),".dot");    drawToDot(dotFile,type);    execDotToPng(dotFile,dest);  } catch (  Exception exc) {    throw new RuntimeException(exc);  }}  }
class C{  public static ValidationProfile defaultProfile(){  return ValidationProfileImpl.defaultInstance();}  }
class C{  public OutlierResult run(Database database,Relation<N> nrel,Relation<? extends NumberVector> relation){  assert (RelationUtil.dimensionality(relation) == 1) : "TrimmedMean can only process one-dimensional data sets.";  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,nrel);  WritableDoubleDataStore errors=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP);  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Computing trimmed means",relation.size(),LOG) : null;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DBIDs neighbors=npred.getNeighborDBIDs(iditer);    int num=0;    double[] values=new double[neighbors.size()];    for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {      values[num]=relation.get(iter).doubleValue(0);      num++;    }    final double tm;    if (num > 0) {      int left=(int)Math.floor(p * (num - 1));      int right=(int)Math.floor((1 - p) * (num - 1));      Arrays.sort(values,0,num);      Mean mean=new Mean();      for (int i=left; i <= right; i++) {        mean.put(values[i]);      }      tm=mean.getMean();    } else {      tm=relation.get(iditer).doubleValue(0);    }    errors.putDouble(iditer,relation.get(iditer).doubleValue(0) - tm);    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  if (LOG.isVerbose()) {    LOG.verbose("Computing median error.");  }  double median_dev_from_median;{    double[] ei=new double[relation.size()];{      int i=0;      for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {        ei[i]=errors.doubleValue(iditer);        i++;      }    }    double median_i=QuickSelect.median(ei);    for (int i=0; i < ei.length; i++) {      ei[i]=Math.abs(ei[i] - median_i);    }    median_dev_from_median=QuickSelect.median(ei);  }  if (LOG.isVerbose()) {    LOG.verbose("Normalizing scores.");  }  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double score=Math.abs(errors.doubleValue(iditer)) * 0.6745 / median_dev_from_median;    scores.putDouble(iditer,score);    minmax.put(score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("TrimmedMean","Trimmed Mean Score",scores,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher,BlockCipherPadding padding){  this.cipher=cipher;  this.padding=padding;  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  public void onComplete(final Consumer<OnComplete> fn){  this.forXOf=fn;  if (done) {    fn.accept(buildOnComplete());  }}  }
class C{  public void hleKernelThreadEnterWaitState(int waitType,int waitId,IWaitStateChecker waitStateChecker,int timeoutAddr,boolean callbacks){  hleKernelThreadEnterWaitState(currentThread,waitType,waitId,waitStateChecker,timeoutAddr,callbacks);}  }
class C{  public boolean isLeaf(){  return getModel().isLeaf(this.getValue());}  }
class C{  private void testRange(int precisionStep) throws Exception {  String field="field" + precisionStep;  int count=3000;  int lower=(distance * 3 / 2) + startOffset, upper=lower + count * distance + (distance / 3);  LegacyNumericRangeQuery<Integer> q=LegacyNumericRangeQuery.newIntRange(field,precisionStep,lower,upper,true,true);  for (byte i=0; i < 2; i++) {    TopDocs topDocs;    String type;switch (i) {case 0:      type=" (constant score filter rewrite)";    q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);  topDocs=searcher.search(q,noDocs,Sort.INDEXORDER);break;case 1:type=" (constant score boolean rewrite)";q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);topDocs=searcher.search(q,noDocs,Sort.INDEXORDER);break;default :return;}ScoreDoc[] sd=topDocs.scoreDocs;assertNotNull(sd);assertEquals("Score doc count" + type,count,sd.length);Document doc=searcher.doc(sd[0].doc);assertEquals("First doc" + type,2 * distance + startOffset,doc.getField(field).numericValue().intValue());doc=searcher.doc(sd[sd.length - 1].doc);assertEquals("Last doc" + type,(1 + count) * distance + startOffset,doc.getField(field).numericValue().intValue());}}  }
class C{  public static <S extends HasCellOverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellOverEvent event=new CellOverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public static void checkFieldUriType(final URI uri,final Class<? extends DataObject> type,final String fieldName){  checkFieldNotNull(uri,fieldName);  if (!URIUtil.isValid(uri)) {    throw APIException.badRequests.invalidParameterURIInvalid(fieldName,uri);  }  if (!URIUtil.isType(uri,type)) {    throw APIException.badRequests.invalidParameterURIWrongType(fieldName,uri,type.getSimpleName());  }}  }
class C{  public KeyDeclaration(Stylesheet parentNode,int docOrderNumber){  m_parentNode=parentNode;  setUid(docOrderNumber);}  }
class C{  @Override public void beginTransaction(){  throw new UnsupportedOperationException("Transaction Unsupported.");}  }
class C{  private boolean lock(long timeoutMs) throws InterruptedException {  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"lock: grabbing semaphore with timeout " + timeoutMs,new Throwable());  }  boolean acquireSem=mLock.tryAcquire(timeoutMs,TimeUnit.MILLISECONDS);  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"lock: grabbed semaphore status " + acquireSem);  }  return acquireSem;}  }
class C{  public SuperLiteral createSuperLiteral(){  SuperLiteralImpl superLiteral=new SuperLiteralImpl();  return superLiteral;}  }
class C{  @Bean public CacheManager listHotZonesCacheManager(){  CacheBuilder<Object,Object> cacheBuilder=CacheBuilder.newBuilder().expireAfterWrite(1,TimeUnit.HOURS).maximumSize(1000);  GuavaCacheManager cacheManager=new GuavaCacheManager("listHotZones");  cacheManager.setCacheBuilder(cacheBuilder);  return cacheManager;}  }
class C{  public final void openPdfFile(final String filename) throws PdfException {  final RandomAccessBuffer pdf_datafile;  try {    pdf_datafile=new RandomAccessFileBuffer(filename,"r");    objectReader.init(pdf_datafile);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " accessing file");    throw new PdfException("Exception " + e + " accessing file");  }}  }
class C{  public void forEach(Allocation ain,Allocation aout){  if (mDirty) {    mDirty=false;    mTables.copyFromUnchecked(mCache);  }  forEach(0,ain,aout,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.438 -0500",hash_original_method="B1D6BF5FEA5681AEA45EA9D4CACD9FB8",hash_generated_method="65DE6943DC8D1CBB326759FF376924A8") public String encodeBody(){  String retval=Integer.toString(expires);  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  private static final MediaCodecInfo selectAudioCodec(final String mimeType){  if (DEBUG)   Log.v(TAG,"selectAudioCodec:");  MediaCodecInfo result=null;  final int numCodecs=MediaCodecList.getCodecCount();  LOOP:   for (int i=0; i < numCodecs; i++) {    final MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    final String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (DEBUG)       Log.i(TAG,"supportedType:" + codecInfo.getName() + ",MIME="+ types[j]);      if (types[j].equalsIgnoreCase(mimeType)) {        if (result == null) {          result=codecInfo;          break LOOP;        }      }    }  }  return result;}  }
class C{  public void addListener(final ITextNodeListener listener){  m_listeners.addListener(listener);}  }
class C{  public void initProcessAnnotations(Iterable<? extends Processor> processors){  if (options.isSet(PROC,"none")) {    processAnnotations=false;  } else   if (procEnvImpl == null) {    procEnvImpl=JavacProcessingEnvironment.instance(context);    procEnvImpl.setProcessors(processors);    processAnnotations=procEnvImpl.atLeastOneProcessor();    if (processAnnotations) {      options.put("save-parameter-names","save-parameter-names");      reader.saveParameterNames=true;      keepComments=true;      genEndPos=true;      if (!taskListener.isEmpty())       taskListener.started(new TaskEvent(TaskEvent.Kind.ANNOTATION_PROCESSING));      deferredDiagnosticHandler=new Log.DeferredDiagnosticHandler(log);    } else {      procEnvImpl.close();    }  }}  }
class C{  public WorkspaceImpl startWorkspace(String workspaceId,@Nullable String envName,@Nullable Boolean restore) throws NotFoundException, ServerException, ConflictException {  requireNonNull(workspaceId,"Required non-null workspace id");  final WorkspaceImpl workspace=workspaceDao.get(workspaceId);  final String restoreAttr=workspace.getAttributes().get(AUTO_RESTORE_FROM_SNAPSHOT);  final boolean autoRestore=restoreAttr == null ? defaultAutoRestore : parseBoolean(restoreAttr);  final boolean snapshotExists=!getSnapshot(workspaceId).isEmpty();  return performAsyncStart(workspace,envName,firstNonNull(restore,autoRestore) && snapshotExists);}  }
class C{  public MutableInt(){  super();}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  @Override public void focusGained(FocusEvent e){  spinner.repaint();}  }
class C{  public RoundedTextNode createFilterNode(String filterName,String value){  RoundedTextNode newNode=new RoundedTextNode(125,45,new Point(10,280),filterName);  newNode.setTextLine2(value);  newNode.setIsCloseable(true);  newNode.setBorder(2);  newNode.setBackgroundColor(FILTER_COLOR);  newNode.setFontColor(FILTER_FONT_COLOR);  newNode.setMovable(true);  return newNode;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.132 -0500",hash_original_method="E93BEE50684598E86CF4860142BFC855",hash_generated_method="5E58DC0AD70210253ADAC11CE7F86386") public void close() throws IOException {  super.close();  __socket.close();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.255 -0500",hash_original_method="FE7A975C42B0FF6EDFA670F841892F5F",hash_generated_method="4C1E1EBB936BB0413D89F4C4BAF42B1E") public static boolean isISOControl(int c){  return ((c) == 1);}  }
class C{  @Override public boolean isAtomicOperation(){  return false;}  }
class C{  public static final boolean isSmeManualAckRequested(byte registeredDelivery){  return isSmeAck(registeredDelivery,SMPPConstant.REGDEL_SME_MANUAL_ACK_REQUESTED);}  }
class C{  private static String stripHTMLTagPairs(String s){  String[] tags={"applet","APPLET","style","STYLE","script","SCRIPT"};  for (  final String tag : tags) {    final String beginTag="<" + tag;    final String endTag="</" + tag + ">";    int begin=0;    while (begin < s.length() && (begin=s.indexOf(beginTag,begin)) >= 0) {      final int end;      if ((end=s.indexOf(endTag,begin + beginTag.length())) > 0) {        s=s.substring(0,begin) + s.substring(end + endTag.length());      } else {        s=s.substring(0,begin);      }    }  }  return s;}  }
class C{  public static int convertLongToInt(long l){  if (l <= Integer.MIN_VALUE) {    return Integer.MIN_VALUE;  } else   if (l >= Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else {    return (int)l;  }}  }
class C{  public NumberDocumentFilter(JTextComponent comp,boolean defaultZero){  this.comp=comp;  this.defaultZero=defaultZero;}  }
class C{  public FieldAnalysisRequest(String uri){  super(METHOD.GET,uri);}  }
class C{  public static boolean isOrSubOf(Class<?> objectClass,String parentName) throws ClassNotFoundException {  Class<?> parentClass=loadClass(parentName);  return isOrSubOf(objectClass,parentClass);}  }
class C{  public CipherInputStream(InputStream is,BufferedBlockCipher cipher,int bufSize){  super(is);  this.bufferedBlockCipher=cipher;  this.inBuf=new byte[bufSize];  this.skippingCipher=(cipher instanceof SkippingCipher) ? (SkippingCipher)cipher : null;}  }
class C{  private int stripSourceRoute(String address,int pos){  if (pos < address.length()) {    if (address.charAt(pos) == '@') {      int i=address.indexOf(':');      if (i != -1) {        pos=i + 1;      }    }  }  return pos;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof MatrixNode) {    if (translateSet || scaleSet || rotationSet)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildMatrixNode");    matrix=(MatrixNode)child;  } else   if (child instanceof GradientEntryNode) {    if (entries == null) {      entries=new ArrayList<GradientEntryNode>(4);    } else     if (entries.size() >= GRADIENT_ENTRIES_MAX_INCLUSIVE) {      FXGLog.getLogger().log(FXGLogger.WARN,"InvalidLinearGradientStrokeNumElements",null,getDocumentName(),startLine,startColumn);      return;    }    entries.add((GradientEntryNode)child);  } else {    super.addChild(child);  }}  }
class C{  public void testExportImportOne_gpx(){  testExportImportOne(TrackFileFormat.GPX);}  }
class C{  public void free(long pos,int length){  freeSpace.free(pos,length);}  }
class C{  public static Product createProductResaleCopy(Product productTemplate,Organization vendor,DataService mgr) throws NonUniqueBusinessKeyException {  Product resaleCopy=createProductResaleCopy(productTemplate,vendor,null,mgr);  return resaleCopy;}  }
class C{  public DoubleMatrix1D make(cern.colt.list.AbstractDoubleList values){  int size=values.size();  DoubleMatrix1D vector=make(size);  for (int i=size; --i >= 0; )   vector.set(i,values.get(i));  return vector;}  }
class C{  @Override public void registerChunkAutoReclaim(MemChunkHolder<A> mholder){  m_chunkcollector.register(mholder);}  }
class C{  @SuppressWarnings("deprecation") public MimeMultipart generate(MimeBodyPart content) throws CertStoreException, NoSuchAlgorithmException, NoSuchProviderException, SMIMEException {  SMIMESignedGenerator generator=createGenerator();  return generator.generate(content,"BC");}  }
class C{  public CqQuery newCq(String queryString,CqAttributes cqAttributes) throws QueryInvalidException, CqException {  ClientCQ cq=null;  try {    cq=(ClientCQ)getCqService().newCq(null,queryString,cqAttributes,this.pool,false);  } catch (  CqExistsException cqe) {    if (logger.isDebugEnabled()) {      logger.debug("Unable to createCq. Error :{}",cqe.getMessage(),cqe);    }  }  return cq;}  }
class C{  @Override public boolean isConsistent(DatapathId oldSw,OFPort oldPort,DatapathId newSw,OFPort newPort){  return isConsistent(oldSw,oldPort,newSw,newPort,true);}  }
class C{  public OrganizationAlreadyBannedException(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:01.980 -0500",hash_original_method="C87731FA15F0C601F30AE5E2B46DBDCA",hash_generated_method="BF88C3E53333B37FCC8C650181AD6C8B") @Override public String toString(){  return getClass().getName() + "[attribute=" + myAttribute+ ", field="+ myField+ ", beginIndex="+ beginIndex+ ", endIndex="+ endIndex+ "]";}  }
class C{  @Override public void onTabUnselected(ActionBar.Tab tab,FragmentTransaction ft){  Bundle tabHolder=(Bundle)tab.getTag();  String fragmentTag=tabHolder.getString(KEY_FRAGMENT_TAG,"");  Log.d(LOG_TAG,"## onTabUnselected() FragTag=" + fragmentTag);  saveUiTabContext(tab);  if (fragmentTag.equals(TAG_FRAGMENT_PEOPLE_ROOM_DETAILS)) {    if (null != mRoomDetailsMembersFragment) {      ft.detach(mRoomDetailsMembersFragment);    }  } else   if (fragmentTag.equals(TAG_FRAGMENT_SETTINGS_ROOM_DETAIL)) {    onTabUnselectedSettingsFragment();  } else   if (fragmentTag.equals(TAG_FRAGMENT_FILES_DETAILS)) {    if (null != mSearchFilesFragment) {      mSearchFilesFragment.cancelCatchingRequests();      ft.detach(mSearchFilesFragment);    }  } else {    Log.w(LOG_TAG,"## onTabUnselected() unknown tab selected!!");  }}  }
class C{  public boolean remove(Marker marker){  Collection collection=mAllMarkers.get(marker);  return collection != null && collection.remove(marker);}  }
class C{  public Collection<EmbeddedServiceLoader> embeddedServiceLoaders(){  return embeddedServiceLoaders;}  }
class C{  private String bPartnerOwnership(){  log.info("bPartnerOwnership - C_BP_Group_ID=" + p_C_BP_Group_ID + ", C_BPartner_ID="+ p_C_BPartner_ID);  String set=" SET AD_Org_ID=" + p_AD_Org_ID;  if (p_C_BP_Group_ID > 0)   set+=" WHERE EXISTS (SELECT * FROM C_BPartner bp WHERE bp.C_BPartner_ID=x.C_BPartner_ID AND bp.C_BP_Group_ID=" + p_C_BP_Group_ID + ")"; else   set+=" WHERE C_BPartner_ID=" + p_C_BPartner_ID;  set+=" AND AD_Client_ID=" + getAD_Client_ID() + " AND AD_Org_ID<>"+ p_AD_Org_ID;  log.fine("bPartnerOwnership - " + set);  String sql="UPDATE C_BPartner x " + set;  int no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_BPartner_ID"));  sql="UPDATE C_BP_Customer_Acct x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_AcctSchema_ID"));  sql="UPDATE C_BP_Employee_Acct x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_AcctSchema_ID"));  sql="UPDATE C_BP_Vendor_Acct x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_AcctSchema_ID"));  sql="UPDATE C_BPartner_Location x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_BPartner_Location_ID"));  sql="UPDATE AD_User x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"AD_User_ID"));  sql="UPDATE C_BP_BankAccount x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_BP_BankAccount_ID"));  return "";}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  if (!map.isEmpty()) {    putAllImpl(map);  }}  }
class C{  private List<Recommendation> performArrayAffinityPlacement(String varrayId,VirtualPoolCapabilityValuesWrapper capabilities,List<StoragePool> candidatePools,boolean inCG){  Map<URI,Double> arrayToHostWeightMap=new HashMap<URI,Double>();  Map<URI,Set<URI>> preferredPoolMap=null;  boolean canUseNonPreferred=false;  if (capabilities.getArrayAffinity()) {    String computeIdStr=capabilities.getCompute();    preferredPoolMap=getPreferredPoolMap(computeIdStr,arrayToHostWeightMap);    _log.info("ArrayAffinity - preferred arrays for {} - {}",computeIdStr,arrayToHostWeightMap);    int limit=Integer.valueOf(_customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.HOST_RESOURCE_MAX_NUM_OF_ARRAYS,CustomConfigConstants.GLOBAL_KEY,null));    canUseNonPreferred=preferredPoolMap.keySet().size() < limit;  } else {    preferredPoolMap=new HashMap<URI,Set<URI>>();    canUseNonPreferred=true;  }  _log.info("ArrayAffinity - allow non preferred array {}",canUseNonPreferred);  Map<URI,List<StoragePool>> candidatePoolMap=groupPoolsByArray(candidatePools,canUseNonPreferred,arrayToHostWeightMap.keySet());  if (candidatePoolMap == null || candidatePoolMap.isEmpty()) {    throw APIException.badRequests.noCandidateStoragePoolsForArrayAffinity();  }  List<StorageSystem> candidateSystems=_dbClient.queryObject(StorageSystem.class,candidatePoolMap.keySet());  List<StoragePool> poolList=new ArrayList<StoragePool>();  for (  List<StoragePool> pools : candidatePoolMap.values()) {    poolList.addAll(pools);  }  _log.info("ArrayAffinity - compute port metrics");  Map<URI,Double> arrayToAvgPortMetricsMap=_portMetricsProcessor.computeStoragePoolsAvgPortMetrics(poolList);  Collections.sort(candidateSystems,new StorageSystemArrayAffinityComparator(arrayToHostWeightMap,candidatePoolMap,arrayToAvgPortMetricsMap));  _log.info("ArrayAffinity - sorted candidate systems {}",Joiner.on(',').join(Collections2.transform(candidateSystems,CommonTransformerFunctions.fctnDataObjectToID())));  for (  StorageSystem system : candidateSystems) {    URI systemURI=system.getId();    List<StoragePool> availablePools=candidatePoolMap.get(system.getId());    StoragePoolCapacityComparator poolComparator=new StoragePoolCapacityComparator();    Collections.sort(availablePools,poolComparator);    Set<URI> preferredPoolURIs=preferredPoolMap.get(systemURI);    List<StoragePool> preferredPools=new ArrayList<StoragePool>();    List<StoragePool> nonPreferredPools=new ArrayList<StoragePool>();    for (    StoragePool pool : availablePools) {      if (preferredPoolURIs != null && preferredPoolURIs.contains(pool.getId())) {        preferredPools.add(pool);      } else {        nonPreferredPools.add(pool);      }    }    List<StoragePool> secondaryPools=new ArrayList<StoragePool>();    if (inCG && Type.ibmxiv.name().equals(system.getSystemType())) {      if (preferredPools.isEmpty()) {        if (!nonPreferredPools.isEmpty()) {          secondaryPools.add(nonPreferredPools.get(0));        }      } else {        preferredPools=Arrays.asList(preferredPools.get(0));        if (!nonPreferredPools.isEmpty() && poolComparator.compare(nonPreferredPools.get(0),preferredPools.get(0)) < 0) {          secondaryPools.add(nonPreferredPools.get(0));        }      }    } else {      if (!nonPreferredPools.isEmpty()) {        secondaryPools.addAll(preferredPools);        secondaryPools.addAll(nonPreferredPools);      }    }    if (!preferredPools.isEmpty()) {      _log.info("ArrayAffinity - preferred pools {}",Joiner.on(',').join(preferredPools));      List<Recommendation> recommendations=getRecommendedPools(varrayId,preferredPools,capabilities,false);      if (!recommendations.isEmpty()) {        return recommendations;      } else {        _log.info("ArrayAffinity - no recommended pools found from perferred pools");      }    }    if (!secondaryPools.isEmpty()) {      _log.info("ArrayAffinity - secondary pools {}",Joiner.on(',').join(secondaryPools));      List<Recommendation> recommendations=getRecommendedPools(varrayId,availablePools,capabilities,false);      if (!recommendations.isEmpty()) {        return recommendations;      } else {        _log.info("ArrayAffinity - no recommended pools found from secondary pools");      }    }  }  return new ArrayList<Recommendation>();}  }
class C{  private void removeRemainingBreakpoints(){  ProgressDialog.show(parent,"Removing remaining breakpoints ...",new CleanupThread());}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  protected DropTargetAutoScroller(Component c,Point p){  super();  component=c;  autoScroll=(Autoscroll)component;  Toolkit t=Toolkit.getDefaultToolkit();  Integer initial=Integer.valueOf(100);  Integer interval=Integer.valueOf(100);  try {    initial=(Integer)t.getDesktopProperty("DnD.Autoscroll.initialDelay");  } catch (  Exception e) {  }  try {    interval=(Integer)t.getDesktopProperty("DnD.Autoscroll.interval");  } catch (  Exception e) {  }  timer=new Timer(interval.intValue(),this);  timer.setCoalesce(true);  timer.setInitialDelay(initial.intValue());  locn=p;  prev=p;  try {    hysteresis=((Integer)t.getDesktopProperty("DnD.Autoscroll.cursorHysteresis")).intValue();  } catch (  Exception e) {  }  timer.start();}  }
class C{  protected void pageEntered(){  if (LOG.isDebugEnabled()) {    LOG.debug("Page entered...");  }  try {    loadAndShowMapping();  } catch (  Exception e) {    LOG.error("Error while loading mappings.",e);    showError(Messages.UnifyPageMapping_3);  }}  }
class C{  public void updatePathsUsingPanel(LayoutEditor panel){  if (panel == null) {    log.error("Null panel in call to updatePathsUsingPanel");    return;  }  ArrayList<LayoutConnectivity> c=panel.auxTools.getConnectivityList(_instance);  updateBlockPaths(c,panel);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[34];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 26; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }      }    }  }  for (int i=0; i < 34; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  @Override public GitClient git(){  return null;}  }
class C{  public static void addMetallurgicInfuserRecipe(InfuseType infuse,int amount,ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addMetallurgicInfuserRecipe",InfuseType.class,Integer.TYPE,ItemStack.class,ItemStack.class);    m.invoke(null,infuse,amount,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public Map<String,String> environment(){  String base64=toStringBase64();  if (base64 == null || base64.length() == 0) {    return Collections.emptyMap();  }  Map<String,String> environment=Maps.newHashMap();  environment.put(BaggageUtils.BAGGAGE_ENVIRONMENT_VARIABLE,base64);  return environment;}  }
class C{  public Element store(){  Element e=new Element(Xml.LOCATION);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  e.setAttribute(Xml.LOCATION_ID,getNameId());  e.setAttribute(Xml.SEQUENCE_ID,Integer.toString(getSequenceId()));  e.setAttribute(Xml.TRAIN_DIRECTION,Integer.toString(getTrainDirection()));  e.setAttribute(Xml.MAX_TRAIN_LENGTH,Integer.toString(getMaxTrainLength()));  e.setAttribute(Xml.GRADE,Double.toString(getGrade()));  e.setAttribute(Xml.MAX_CAR_MOVES,Integer.toString(getMaxCarMoves()));  e.setAttribute(Xml.RANDOM_CONTROL,getRandomControl());  e.setAttribute(Xml.PICKUPS,isPickUpAllowed() ? Xml.YES : Xml.NO);  e.setAttribute(Xml.DROPS,isDropAllowed() ? Xml.YES : Xml.NO);  e.setAttribute(Xml.WAIT,Integer.toString(getWait()));  e.setAttribute(Xml.DEPART_TIME,getDepartureTime());  e.setAttribute(Xml.TRAIN_ICON_X,Integer.toString(getTrainIconX()));  e.setAttribute(Xml.TRAIN_ICON_Y,Integer.toString(getTrainIconY()));  e.setAttribute(Xml.COMMENT,getComment());  return e;}  }
class C{  protected Node previousSibling(Node n,Node root){  while (true) {    if (n == root) {      return null;    }    Node result=n.getPreviousSibling();    if (result == null) {      result=n.getParentNode();      if (result == null || result == root) {        return null;      }      if (acceptNode(result) == NodeFilter.FILTER_SKIP) {        n=result;        continue;      }      return null;    }switch (acceptNode(result)) {case NodeFilter.FILTER_ACCEPT:      return result;case NodeFilter.FILTER_SKIP:    Node t=lastChild(result);  if (t != null) {    return t;  }default :n=result;continue;}}}  }
class C{  @Override public void angularObjectUpdate(String name,String noteId,String paragraphId,String object) throws TException {  AngularObjectRegistry registry=interpreterGroup.getAngularObjectRegistry();  AngularObject ao=registry.get(name,noteId,paragraphId);  if (ao == null) {    logger.debug("Angular object {} not exists",name);    return;  }  if (object == null) {    ao.set(null,false);    return;  }  Object oldObject=ao.get();  Object value=null;  if (oldObject != null) {    try {      value=gson.fromJson(object,oldObject.getClass());      ao.set(value,false);      return;    } catch (    Exception e) {      logger.debug(e.getMessage(),e);    }  }  if (value == null) {    try {      value=gson.fromJson(object,new TypeToken<Map<String,Object>>(){      }.getType());    } catch (    Exception e) {      logger.debug(e.getMessage(),e);    }  }  if (value == null) {    value=gson.fromJson(object,String.class);  }  ao.set(value,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.128 -0500",hash_original_method="6CCC5EFA22CA085040CD9EF339EE900B",hash_generated_method="3514BA2F00721A401864AF704468CAD9") protected void map(){  TransactionState realState=getRealState();  if (realState == null || realState == TransactionState.TRYING) {    if (isInviteTransaction() && !this.isMapped && sipStack.getTimer() != null) {      this.isMapped=true;      sipStack.getTimer().schedule(new SendTrying(),200);    } else {      isMapped=true;    }  }  sipStack.removePendingTransaction(this);}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd.equals("Cut")) {    consoleTextArea.cut();  } else   if (cmd.equals("Copy")) {    consoleTextArea.copy();  } else   if (cmd.equals("Paste")) {    consoleTextArea.paste();  }}  }
class C{  public boolean isSetTotal_lba_blocks(){  return EncodingUtils.testBit(__isset_bitfield,__TOTAL_LBA_BLOCKS_ISSET_ID);}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  try {    propertyChangeSupport.firePropertyChange(propertyName,oldValue,newValue);  } catch (  AssertionError e) {  }}  }
class C{  protected void testsPerClassType(int classType,boolean weighted,boolean multiInstance){  boolean PNom=canPredict(true,false,false,false,false,multiInstance,classType)[0];  boolean PNum=canPredict(false,true,false,false,false,multiInstance,classType)[0];  boolean PStr=canPredict(false,false,true,false,false,multiInstance,classType)[0];  boolean PDat=canPredict(false,false,false,true,false,multiInstance,classType)[0];  boolean PRel;  if (!multiInstance) {    PRel=canPredict(false,false,false,false,true,multiInstance,classType)[0];  } else {    PRel=false;  }  if (PNom || PNum || PStr|| PDat|| PRel) {    if (weighted) {      instanceWeights(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    }    if (classType == Attribute.NOMINAL) {      canHandleNClasses(PNom,PNum,PStr,PDat,PRel,multiInstance,4);    }    if (!multiInstance) {      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,0);      canHandleClassAsNthAttribute(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,1);    }    canHandleZeroTraining(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    boolean handleMissingPredictors=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,20)[0];    if (handleMissingPredictors) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,true,false,100);    }    boolean handleMissingClass=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,20)[0];    if (handleMissingClass) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,false,true,100);    }    correctSearchInitialisation(PNom,PNum,PStr,PDat,PRel,multiInstance,classType);    datasetIntegrity(PNom,PNum,PStr,PDat,PRel,multiInstance,classType,handleMissingPredictors,handleMissingClass);  }}  }
class C{  @Interruptible public static void printStatsPlain(){  if (Options.printPhaseStats.getValue())   printPhases();  printTotals();}  }
class C{  @Override public void updateAfterDelete(int oldNcol,Header hdr) throws FitsException {  hdr.addValue(NAXIS1,this.rowLen);}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("LOF",3) : null;  DBIDs ids=relation.getDBIDs();  LOG.beginStep(stepprog,1,"Materializing nearest-neighbor sets.");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,relation,getDistanceFunction(),k);  LOG.beginStep(stepprog,2,"Computing Local Reachability Densities (LRD).");  WritableDoubleDataStore lrds=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  computeLRDs(knnq,ids,lrds);  LOG.beginStep(stepprog,3,"Computing Local Outlier Factors (LOF).");  WritableDoubleDataStore lofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_DB);  DoubleMinMax lofminmax=new DoubleMinMax();  computeLOFScores(knnq,ids,lrds,lofs,lofminmax);  LOG.setCompleted(stepprog);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Local Outlier Factor","lof-outlier",lofs,ids);  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(lofminmax.getMin(),lofminmax.getMax(),0.0,Double.POSITIVE_INFINITY,1.0);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  protected void writeToRowFromAggregateForUpdate(AbstractRecord record,WriteObjectQuery query,Object attributeValue) throws DescriptorException {  if (attributeValue == null) {    if (this.isNullAllowed) {      if (backupAttributeValueIsNull(query)) {      } else {        writeNullReferenceRow(record);      }    } else {      throw DescriptorException.nullForNonNullAggregate(query.getObject(),this);    }  } else   if ((query.getBackupClone() != null) && ((getMatchingBackupAttributeValue(query,attributeValue) == null) || !(attributeValue.getClass().equals(getMatchingBackupAttributeValue(query,attributeValue).getClass())))) {    getObjectBuilder(attributeValue,query.getSession()).buildRow(record,attributeValue,query.getSession(),WriteType.UPDATE);  } else   if (!query.getSession().isClassReadOnly(attributeValue.getClass())) {    WriteObjectQuery clonedQuery=(WriteObjectQuery)query.clone();    clonedQuery.setObject(attributeValue);    if (query.getSession().isUnitOfWork()) {      Object backupAttributeValue=getMatchingBackupAttributeValue(query,attributeValue);      if (backupAttributeValue == null) {        backupAttributeValue=getObjectBuilder(attributeValue,query.getSession()).buildNewInstance();      }      clonedQuery.setBackupClone(backupAttributeValue);    }    getObjectBuilder(attributeValue,query.getSession()).buildRowForUpdate(record,clonedQuery);  }}  }
class C{  public static String TO_DATE(Timestamp day){  return TO_DATE(day,true);}  }
class C{  private static void sendBugReportWithMail(Context context){  Bitmap screenShot=takeScreenshot();  if (null != screenShot) {    try {      String path=MediaStore.Images.Media.insertImage(context.getContentResolver(),screenShot,"screenshot-" + new Date(),null);      Uri screenUri=null;      if (null == path) {        try {          File file=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),"screenshot-" + new Date() + ".jpg");          FileOutputStream out=new FileOutputStream(file);          screenShot.compress(Bitmap.CompressFormat.JPEG,100,out);          screenUri=Uri.fromFile(file);        } catch (        Exception e) {          Log.e(LOG_TAG,"sendBugReport : " + e.getLocalizedMessage());        }      } else {        screenUri=Uri.parse(path);      }      String message=buildBugReportMessage(context);      ArrayList<Uri> attachmentUris=new ArrayList<>();      if (null != screenUri) {        attachmentUris.add(screenUri);      }      String errorLog=LogUtilities.getLogCatError();      String debugLog=LogUtilities.getLogCatDebug();      errorLog+="\n\n\n\n\n\n\n\n\n\n------------------ Debug logs ------------------\n\n\n\n\n\n\n\n";      errorLog+=debugLog;      try {{          ByteArrayOutputStream os=new ByteArrayOutputStream();          GZIPOutputStream gzip=new GZIPOutputStream(os);          gzip.write(errorLog.getBytes());          gzip.finish();          File debugLogFile=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),"logs-" + new Date() + ".gz");          FileOutputStream fos=new FileOutputStream(debugLogFile);          os.writeTo(fos);          os.flush();          os.close();          attachmentUris.add(Uri.fromFile(debugLogFile));        }        ArrayList<File> logsList=LogUtilities.getLogsFileList();        long marker=System.currentTimeMillis();        for (        File file : logsList) {          ByteArrayOutputStream bos=new ByteArrayOutputStream();          GZIPOutputStream glogzip=new GZIPOutputStream(bos);          FileInputStream inputStream=new FileInputStream(file);          byte[] buffer=new byte[1024 * 10];          int len;          while ((len=inputStream.read(buffer)) != -1) {            glogzip.write(buffer,0,len);          }          glogzip.finish();          File storedLogFile=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),marker + "-" + file.getName()+ ".gz");          FileOutputStream flogOs=new FileOutputStream(storedLogFile);          bos.writeTo(flogOs);          flogOs.flush();          flogOs.close();          attachmentUris.add(Uri.fromFile(storedLogFile));        }      } catch (      IOException e) {        Log.e(LOG_TAG,"" + e);      }      Intent emailIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts("mailto","rageshake@riot.im",null));      emailIntent.putExtra(Intent.EXTRA_SUBJECT,"Mail subject");      List<ResolveInfo> resolveInfos=context.getPackageManager().queryIntentActivities(emailIntent,0);      if ((null == resolveInfos) || (0 == resolveInfos.size())) {        Log.e(LOG_TAG,"Cannot send bug report because there is no application to send emails");        return;      }      Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      intent.setType("text/html");      intent.putExtra(Intent.EXTRA_EMAIL,new String[]{"rageshake@riot.im"});      intent.putExtra(Intent.EXTRA_SUBJECT,"Vector bug report");      intent.putExtra(Intent.EXTRA_TEXT,message);      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,attachmentUris);      context.startActivity(intent);    } catch (    Exception e) {      Log.e(LOG_TAG,"" + e);    }  }}  }
class C{  public String generateSanitizedId(){  String result=generateId();  result=result.replace(':','-');  result=result.replace('_','-');  result=result.replace('.','-');  return result;}  }
class C{  private void printRouteList(){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("this : " + this);    sipStack.getStackLogger().logDebug("printRouteList : " + this.routeList.encode());  }}  }
class C{  public final void recoverRegionsThatAreReady(){  persistentOplogs.recoverRegionsThatAreReady();}  }
class C{  public PsiElementResolveResult(@NotNull PsiElement element){  this(element,true);}  }
class C{  public String formatShortDateTime(Date date){  return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(date);}  }
class C{  public static int search(double[] a,double target){  for (int i=0; i < a.length; i++) {    if (a[i] == target) {      return i;    }  }  return -1;}  }
class C{  private static boolean isCharacterBased(final Object data){  return (data instanceof Character || data instanceof CharSequence);}  }
class C{  static void clearThreadLocalMap(){  rawJsonMap.get().clear();}  }
class C{  private void initRepeat(final boolean isDownload){  mRepeatDownload=isDownload;  mFirstDownloadRepeat=isDownload;  mRepeatUpload=!isDownload;  mFirstUploadRepeat=!isDownload;  initRepeatVars();}  }
class C{  boolean DD(int v1,int v2){  if ((v1 == -1) || (v2 == -1)) {    return false;  }  GVCongruenceClass class1=B.get(v1);  GVCongruenceClass class2=B.get(v2);  Object label1=class1.getLabel();  Object label2=class2.getLabel();  if (isConstant(label1) && !isConstant(label2)) {    return false;  }  if (!isConstant(label1) && isConstant(label2)) {    return false;  }  if (isConstant(label1)) {    return (v1 != v2);  }  if (isBornAtAllocation(label1)) {    if (isBornAtAllocation(label2)) {      return (v1 != v2);    } else     if (class2.containsParameter()) {      return true;    }  } else {    if (isBornAtAllocation(label2)) {      if (class1.containsParameter()) {        return true;      }    }  }  if (NO_PARAM_ALIAS) {    if (v1 != v2) {      if (class1.containsParameter()) {        if (class2.containsParameter()) {          return true;        }      }    }  }  return false;}  }
class C{  public static String staticOption(String option){  return staticOption(option,"");}  }
class C{  private void displaySitePermissions(){  addPreferencesFromResource(R.xml.single_website_preferences);  ListAdapter preferences=getPreferenceScreen().getRootAdapter();  for (int i=0; i < preferences.getCount(); ++i) {    Preference preference=(Preference)preferences.getItem(i);    if (PREF_SITE_TITLE.equals(preference.getKey())) {      preference.setTitle(mSite.getTitle());    } else     if (PREF_CLEAR_DATA.equals(preference.getKey())) {      long usage=mSite.getTotalUsage();      if (usage > 0) {        Context context=preference.getContext();        preference.setTitle(String.format(context.getString(R.string.origin_settings_storage_usage_brief),Formatter.formatShortFileSize(context,usage)));        ((ClearWebsiteStorage)preference).setConfirmationListener(this);      } else {        getPreferenceScreen().removePreference(preference);      }    } else     if (PREF_RESET_SITE.equals(preference.getKey())) {      preference.setOnPreferenceClickListener(this);    } else     if (PREF_CAMERA_CAPTURE_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getCameraPermission());    } else     if (PREF_COOKIES_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getCookiePermission());    } else     if (PREF_FULLSCREEN_PERMISSION.equals(preference.getKey())) {      preference.setEnabled(false);      setUpListPreference(preference,mSite.getFullscreenPermission());    } else     if (PREF_JAVASCRIPT_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getJavaScriptPermission());    } else     if (PREF_LOCATION_ACCESS.equals(preference.getKey())) {      setUpLocationPreference(preference);    } else     if (PREF_MIC_CAPTURE_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getMicrophonePermission());    } else     if (PREF_MIDI_SYSEX_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getMidiPermission());    } else     if (PREF_POPUP_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getPopupPermission());    } else     if (PREF_PROTECTED_MEDIA_IDENTIFIER_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getProtectedMediaIdentifierPermission());    } else     if (PREF_PUSH_NOTIFICATIONS_PERMISSION.equals(preference.getKey())) {      setUpListPreference(preference,mSite.getPushNotificationPermission());    }  }  PreferenceScreen preferenceScreen=getPreferenceScreen();  SiteSettingsCategory categoryWithWarning=getWarningCategory();  if (categoryWithWarning == null) {    getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING));    getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_EXTRA));    getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_DIVIDER));  } else {    Preference osWarning=preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING);    Preference osWarningExtra=preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_EXTRA);    categoryWithWarning.configurePermissionIsOffPreferences(osWarning,osWarningExtra,getActivity(),false);    if (osWarning.getTitle() == null) {      getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING));    } else     if (osWarningExtra.getTitle() == null) {      getPreferenceScreen().removePreference(preferenceScreen.findPreference(PREF_OS_PERMISSIONS_WARNING_EXTRA));    }  }  if (!hasUsagePreferences()) {    Preference heading=preferenceScreen.findPreference(PREF_USAGE);    preferenceScreen.removePreference(heading);  }  if (!hasPermissionsPreferences()) {    Preference heading=preferenceScreen.findPreference(PREF_PERMISSIONS);    preferenceScreen.removePreference(heading);  }}  }
class C{  public double localScore(int i,int parent){  double residualVariance=getCovariances().getValue(i,i);  int n=getSampleSize();  int p=1;  final double covXX=getCovariances().getValue(parent,parent);  if (covXX == 0) {    if (isVerbose()) {      out.println("Dividing by zero");    }    return Double.NaN;  }  double covxxInv=1.0 / covXX;  double covxy=getCovariances().getValue(i,parent);  double b=covxxInv * covxy;  residualVariance-=covxy * b;  if (residualVariance <= 0) {    if (isVerbose()) {      out.println("Nonpositive residual varianceY: resVar / varianceY = " + (residualVariance / getCovariances().getValue(i,i)));    }    return Double.NaN;  }  double c=getPenaltyDiscount();  return score(residualVariance,n,logn,p,c);}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  private void processTable(int xl,int xr,int[] table){  int size=table.length;  for (int s=0; s < size; s+=2) {    xl^=P[0];    for (int i=1; i < ROUNDS; i+=2) {      xr^=F(xl) ^ P[i];      xl^=F(xr) ^ P[i + 1];    }    xr^=P[ROUNDS + 1];    table[s]=xr;    table[s + 1]=xl;    xr=xl;    xl=table[s];  }}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public ArrowBuf newArrowBuf(int offset,int length,BufferManager manager){  allocator.assertOpen();  final ArrowBuf buf=new ArrowBuf(bufRefCnt,this,underlying,manager,allocator.getAsByteBufAllocator(),offset,length,false);  if (BaseAllocator.DEBUG) {    historicalLog.recordEvent("ArrowBuf(BufferLedger, BufferAllocator[%s], UnsafeDirectLittleEndian[identityHashCode == " + "%d](%s)) => ledger hc == %d",allocator.name,System.identityHashCode(buf),buf.toString(),System.identityHashCode(this));synchronized (buffers) {      buffers.put(buf,null);    }  }  return buf;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.BITWISE_XOR_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.BITWISE_XOR_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public XCalElement append(String name){  return new XCalElement(append(name,(String)null));}  }
class C{  public <T>DrawingAttributeAction(DrawingEditor editor,AttributeKey<T> key,@Nullable T value,@Nullable Icon icon){  this(editor,key,value,null,icon);}  }
class C{  public RecursiveExpansionRootHandler(final HttpServerRequest req,Buffer data,Set<String> finalOriginalParams){  this.req=req;  this.data=data;  this.finalOriginalParams=finalOriginalParams;}  }
class C{  protected synchronized void availableHost(int hostNum){  if (hostNum >= 0) {    if (m_remoteHostFailureCounts[hostNum] < MAX_FAILURES) {      m_remoteHostsQueue.push(new Integer(hostNum));    } else {      notifyListeners(false,true,false,"Max failures exceeded for host " + ((String)m_remoteHosts.elementAt(hostNum)) + ". Removed from host list.");      m_removedHosts++;    }  }  if (m_failedCount == (MAX_FAILURES * m_remoteHosts.size())) {    abortExperiment();    notifyListeners(false,true,true,"Experiment aborted! Max failures " + "exceeded on all remote hosts.");    return;  }  if ((getSplitByDataSet() && (m_baseExperiment.getDatasets().size() == m_finishedCount)) || (!getSplitByDataSet() && ((getRunUpper() - getRunLower() + 1) == m_finishedCount))) {    notifyListeners(false,true,false,"Experiment completed successfully.");    notifyListeners(false,true,true,postExperimentInfo());    return;  }  if (checkForAllFailedHosts()) {    return;  }  if (m_experimentAborted && (m_remoteHostsQueue.size() + m_removedHosts) == m_remoteHosts.size()) {    notifyListeners(false,true,true,"Experiment aborted. All remote tasks " + "finished.");  }  if (!m_subExpQueue.empty() && !m_experimentAborted) {    if (!m_remoteHostsQueue.empty()) {      int availHost, waitingExp;      try {        availHost=((Integer)m_remoteHostsQueue.pop()).intValue();        waitingExp=((Integer)m_subExpQueue.pop()).intValue();        launchNext(waitingExp,availHost);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }}  }
class C{  public void changeUpDown(float radians){  manualDirectionController.changeUpDown(radians);}  }
class C{  public boolean isCollided(){  return s_collided;}  }
class C{  public boolean matches(InventoryCrafting crafting,World world){  final List<ItemStack> recipeList=new ArrayList<ItemStack>(this.recipeItems);  for (int i=0; i < 3; ++i) {    for (int j=0; j < 3; ++j) {      final ItemStack actual=crafting.getStackInRowAndColumn(j,i);      if (actual != null) {        boolean flag=false;        final Iterator<ItemStack> iterator=recipeList.iterator();        while (iterator.hasNext()) {          final ItemStack expected=iterator.next();          if (comparator.equals(expected,actual)) {            flag=true;            recipeList.remove(expected);            break;          }        }        if (!flag) {          return false;        }      }    }  }  return recipeList.isEmpty();}  }
class C{  public boolean isType(){  return testAllFlags(IS_TYPE);}  }
class C{  public void resetRootsStream(){  rootsStream.resetData();  totalRoots=0;}  }
class C{  public void put(String key,int value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  static FileChannel newFileChannel(String pathForWindows,String pathToCheck,Set<? extends OpenOption> options,long pSecurityDescriptor) throws WindowsException {  Flags flags=Flags.toFlags(options);  if (!flags.read && !flags.write) {    if (flags.append) {      flags.write=true;    } else {      flags.read=true;    }  }  if (flags.read && flags.append)   throw new IllegalArgumentException("READ + APPEND not allowed");  if (flags.append && flags.truncateExisting)   throw new IllegalArgumentException("APPEND + TRUNCATE_EXISTING not allowed");  FileDescriptor fdObj=open(pathForWindows,pathToCheck,flags,pSecurityDescriptor);  return FileChannelImpl.open(fdObj,pathForWindows,flags.read,flags.write,flags.append,null);}  }
class C{  @Override public boolean format(AccessibilityEvent event,TalkBackService context,Utterance utterance){  if (event.getEventType() == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED && EventState.getInstance().hasEvent(EventState.EVENT_SKIP_FOCUS_PROCESSING_AFTER_GRANULARITY_MOVE,SKIP_GRANULARITY_MOVE_FOCUS_TIMEOUT)) {    EventState.getInstance().clearEvent(EventState.EVENT_SKIP_FOCUS_PROCESSING_AFTER_GRANULARITY_MOVE);    return true;  }  final AccessibilityRecordCompat record=AccessibilityEventCompat.asRecord(event);  final AccessibilityNodeInfoCompat sourceNode=record.getSource();  final AccessibilityNodeInfoCompat focusedNode=getFocusedNode(event.getEventType(),sourceNode);  if ((sourceNode != null) && (focusedNode == null)) {    AccessibilityNodeInfoUtils.recycleNodes(sourceNode);    return false;  }  LogUtils.log(this,Log.VERBOSE,"Announcing node: %s",focusedNode);  addDescription(utterance,focusedNode,event,sourceNode);  addFeedback(utterance,focusedNode);  utterance.getMetadata().putInt(Utterance.KEY_METADATA_QUEUING,DEFAULT_QUEUING_MODE);  utterance.addSpokenFlag(FeedbackItem.FLAG_ADVANCE_CONTINUOUS_READING);  AccessibilityNodeInfoUtils.recycleNodes(sourceNode,focusedNode);  return true;}  }
class C{  public Differences compare(final String controlFilename,final String testFilename) throws SAXException, IOException {  File control=new File(controlFilename);  File test=new File(testFilename);  return compare(control,test);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null)   displayFrame.dispose();  displayFrame=null;  display=null;}  }
class C{  public TicketTaxInfo(TaxInfo tax){  this.tax=tax;  subtotal=0.0;  taxtotal=0.0;}  }
class C{  public void removeEpochs(int limit){  epochsLock.lock();  for (  Integer key : (Integer[])epochs.keySet().toArray(new Integer[0])) {    if (key > limit) {      Epoch epoch=epochs.remove(key);      epoch.setRemoved();    }  }  epochsLock.unlock();}  }
class C{  private EventReader provide(XMLEventReader source) throws Exception {  return new StreamReader(source);}  }
class C{  public boolean isPrintHeader(){  return m_printHeader;}  }
class C{  private String readNodeAddress(){  String addr="";  addr=(String)nodeAddrField.getSelectedItem();  if (addr.equals("FF FF ") || addr.equals("FF FE ")) {    addr=(String)nodeAddr64Field.getSelectedItem();  }  return (addr);}  }
class C{  public HttpResponse send(Notification notification) throws NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IllegalBlockSizeException, BadPaddingException, NoSuchProviderException, InvalidAlgorithmParameterException, IOException, InvalidKeySpecException, JoseException {  BaseEncoding base64url=BaseEncoding.base64Url();  Encrypted encrypted=encrypt(notification.getPayload(),notification.getUserPublicKey(),notification.getUserAuth(),notification.getPadSize());  byte[] dh=Utils.savePublicKey((ECPublicKey)encrypted.getPublicKey());  byte[] salt=encrypted.getSalt();  HttpClient httpClient=HttpClients.createDefault();  HttpPost httpPost=new HttpPost(notification.getEndpoint());  httpPost.addHeader("TTL",String.valueOf(notification.getTTL()));  Map<String,String> headers=new HashMap<>();  if (notification.hasPayload()) {    headers.put("Content-Type","application/octet-stream");    headers.put("Content-Encoding","aesgcm");    headers.put("Encryption","keyid=p256dh;salt=" + base64url.omitPadding().encode(salt));    headers.put("Crypto-Key","keyid=p256dh;dh=" + base64url.encode(dh));    httpPost.setEntity(new ByteArrayEntity(encrypted.getCiphertext()));  }  if (notification.isGcm()) {    if (gcmApiKey == null) {      throw new IllegalStateException("An GCM API key is needed to send a push notification to a GCM endpoint.");    }    headers.put("Authorization","key=" + gcmApiKey);  }  if (vapidEnabled() && !notification.isGcm()) {    JwtClaims claims=new JwtClaims();    claims.setAudience(notification.getOrigin());    claims.setExpirationTimeMinutesInTheFuture(12 * 60);    claims.setSubject(subject);    JsonWebSignature jws=new JsonWebSignature();    jws.setHeader("typ","JWT");    jws.setHeader("alg","ES256");    jws.setPayload(claims.toJson());    jws.setKey(privateKey);    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.ECDSA_USING_P256_CURVE_AND_SHA256);    headers.put("Authorization","Bearer " + jws.getCompactSerialization());    byte[] pk=Utils.savePublicKey((ECPublicKey)publicKey);    if (headers.containsKey("Crypto-Key")) {      headers.put("Crypto-Key",headers.get("Crypto-Key") + ";p256ecdsa=" + base64url.omitPadding().encode(pk));    } else {      headers.put("Crypto-Key","p256ecdsa=" + base64url.encode(pk));    }  }  for (  Map.Entry<String,String> entry : headers.entrySet()) {    httpPost.addHeader(new BasicHeader(entry.getKey(),entry.getValue()));  }  return httpClient.execute(httpPost);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public BusMovement(BusMovement proto){  super(proto);  this.controlSystem=proto.controlSystem;  this.id=nextID++;  controlSystem.registerBus(this);  startMode=true;}  }
class C{  private void add(final TileSetDefinition tsdef,Color color,Composite blend){  String ref=tsdef.getSource();  final int baseindex=tsdef.getFirstGid();  if (ref.startsWith("../../")) {    ref=ref.substring(6);  }  final int mapsize=tiles.size();  if (mapsize > baseindex) {    logger.debug("Tileset base index mismatch (" + mapsize + " > "+ baseindex+ "): "+ ref);    for (int i=baseindex; i < mapsize; i++) {      tiles.remove(baseindex);    }  } else   if (mapsize < baseindex) {    logger.debug("Tileset base index mismatch (" + mapsize + " < "+ baseindex+ "): "+ ref);    for (int i=mapsize; i < baseindex; i++) {      tiles.add(null);    }  }  String realRef;  if ((color != null) && (blend != null)) {    realRef=store.createModifiedRef(ref,color,blend);  } else {    realRef=ref;  }  Tileset tileset=tilesetsLoaded.get(realRef);  if (tileset == null) {    tileset=new SpriteTileset(store,baseFolder + ref,color,blend);    tilesetsLoaded.put(realRef,tileset);  }  final int size=tileset.getSize();  tiles.ensureCapacity(baseindex + size);  for (int i=0; i < size; i++) {    tiles.add(tileset.getSprite(i));  }  final TilesetAnimationMap tsam=animationMap.get(ref);  if (tsam != null) {    for (int i=0; i < size; i++) {      final Sprite sprite=tsam.getSprite(tileset,i);      if (sprite != null) {        tiles.set(baseindex + i,sprite);      }    }  }}  }
class C{  public void doRun(String branch){  if (not(isBuildable()).apply(job)) {    LOG.debug("Job {} is disabled, but trigger run!",isNull(job) ? "<no job>" : job.getFullName());    return;  }  if (!isSupportedTriggerMode(getTriggerMode())) {    LOG.warn("Trigger mode {} is not supported yet ({})",getTriggerMode(),job.getFullName());    return;  }  GitHubBranchRepository localRepository=job.getAction(GitHubBranchRepository.class);  if (isNull(localRepository)) {    LOG.warn("Can't get repository info, maybe project {} misconfigured?",job.getFullName());    return;  }  List<GitHubBranchCause> causes;  try (LoggingTaskListenerWrapper listener=new LoggingTaskListenerWrapper(getPollingLogAction().getPollingLogFile(),UTF_8)){    long startTime=System.currentTimeMillis();    listener.debug("Running GitHub Branch trigger check for {} on {}",getDateTimeInstance().format(new Date(startTime)),localRepository.getFullName());    causes=readyToBuildCauses(localRepository,listener,branch);    localRepository.saveQuietly();    long duration=System.currentTimeMillis() - startTime;    listener.info(FINISH_MSG + " for {} at {}. Duration: {}ms",localRepository.getFullName(),getDateTimeInstance().format(new Date()),duration);  } catch (  Exception e) {    LOG.error("Can't process check: {}",e);    return;  }  from(causes).filter(new JobRunnerForBranchCause(job,this)).toSet();}  }
class C{  public synchronized boolean add(BufferedImage image){  if (!isRunning)   return false;{    try {      encoderClass.getMethod("add",new Class[]{BufferedImage.class}).invoke(encoder,new Object[]{image});    } catch (    Exception ex) {      ex.printStackTrace();      return false;    }  }  return true;}  }
class C{  public void onDeployed(Class<?> cls){}  }
class C{  public static _JobStatusEnum fromString(final String value) throws SOAPSerializationException {  return (_JobStatusEnum)Enumeration.fromString(value,_JobStatusEnum.VALUES_TO_INSTANCES);}  }
class C{  public void saveExtraData(){}  }
class C{  private void remove(final IProgressOperation operation){  m_progressPanel.remove(operation.getProgressPanel());  if (m_progressPanel.getComponentCount() == 0) {    setVisible(false);  }}  }
class C{  protected void notifyScanFinished(){  for (  ScanListener l : listeners)   l.scanFinished(contextId);}  }
class C{  public static final void show(Window owner,World world){  EditWorldDialog ewd=new EditWorldDialog(owner,world);  ewd.setLocationRelativeTo(owner);  ewd.setVisible(true);  if (!ewd.canceled) {synchronized (world) {      ewd.pnlWorld.setWorld(world);    }  }}  }
class C{  public String typeName(){  return "methodtype";}  }
class C{  public void initializeReference(Object conc_ref,ReferenceExpression symb_ref){  if (conc_ref != null) {    if (!symb_ref.isInitialized()) {      symb_ref.initializeReference(conc_ref);      int identityHashCode=System.identityHashCode(conc_ref);      nonNullRefs.put(identityHashCode,symb_ref);    }  }}  }
class C{  @Override public StringVal copy(){  return new StringVal(str);}  }
class C{  private final void escapeAndAdd(StringBuffer sb,String text){  int count=text.length();  for (int i=0; i < count; i++) {    char ch=text.charAt(i);switch (ch) {case '\t':      sb.append("\\tab");    while ((++i < count) && text.charAt(i) == '\t') {      sb.append("\\tab");    }  sb.append(' ');i--;break;case '\\':case '{':case '}':sb.append('\\').append(ch);break;default :sb.append(ch);break;}}}  }
class C{  public void start(){  try {    if (!_lifecycle.toActive()) {      return;    }  } catch (  Exception e) {    throw ConfigException.wrap(e);  }}  }
class C{  public static double[] copy(double[] M){  double[] array=new double[M.length];  System.arraycopy(M,0,array,0,M.length);  return array;}  }
class C{  private void removeVoPayment(PaymentInfoType type){  List<VOPaymentType> voPaymentTypes=getSelectedOrganization().getPaymentTypes();  for (  VOPaymentType voPaymentType : voPaymentTypes) {    if (voPaymentType.getPaymentTypeId().equals(type.name())) {      voPaymentTypes.remove(voPaymentType);      return;    }  }}  }
class C{  @Override public String toString(){  return "CUcontext[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public static PlayerSession createFromSocketWithOptions(Socket s,IDebuggerCallbacks debuggerCallbacks,SessionManager sessionManager) throws IOException {  DProtocol proto=DProtocol.createFromSocket(s,sessionManager);  return createFromSocketHelper(s,debuggerCallbacks,proto);}  }
class C{  public double stx(final double x){  if (x >= 0) {    if (x < width)     return x;    return x - width;  }  return x + width;}  }
class C{  public static void log(final String message,final Throwable t){  getDefault().getLog().log(new Status(ERROR,PLUGIN_ID,nullToEmpty(message),t));}  }
class C{  private Point drawVerticalKnob(final GC gc,final int value,final boolean upper){  final float pixelSize=computePixelSizeForVerticalSlider();  final int y=(int)(pixelSize * value);  Image image;  if (upper) {    if (upperHover) {      image=dragInProgress ? vSliderDrag : vSliderHover;    } else     if (lastSelected == SELECTED_KNOB.UPPER) {      image=vSliderSelected;    } else {      image=vSlider;    }  } else {    if (lowerHover) {      image=dragInProgress ? vSliderDrag : vSliderHover;    } else     if (lastSelected == SELECTED_KNOB.LOWER) {      image=vSliderSelected;    } else {      image=vSlider;    }  }  if (isEnabled()) {    gc.drawImage(image,getClientArea().width / 2 - 8,y + 2);  } else {    final Image temp=new Image(getDisplay(),image,SWT.IMAGE_DISABLE);    gc.drawImage(temp,getClientArea().width / 2 - 8,y + 2);    temp.dispose();  }  return new Point(getClientArea().width / 2 - 8,y + 2);}  }
class C{  int addVert(float x,float y,float z){  int i=nvert;  if (i >= maxvert) {    if (vert == null) {      maxvert=100;      vert=new float[maxvert * 3];    } else {      maxvert*=2;      float nv[]=new float[maxvert * 3];      System.arraycopy(vert,0,nv,0,vert.length);      vert=nv;    }  }  i*=3;  vert[i]=x;  vert[i + 1]=y;  vert[i + 2]=z;  return nvert++;}  }
class C{  public static <T>Set<T> minus(Set<T> self,Iterable<?> removeMe){  return minus(self,asCollection(removeMe));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.521 -0400",hash_original_method="9017606445C39E6E789668F0FD93EBB4",hash_generated_method="7F949D70DE8890E2486953302F54E3C4") private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  public IonIndependenceFacts(Node x,Node y,Collection<List<Node>> z){  if (x == null || y == null || z == null) {    throw new NullPointerException();  }  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @Nullable public static String fetchValue(Class commandClazz){  try {    Command command=(Command)InjectorBootstrap.INJECTOR.getInstance(commandClazz);    String value=command.execute().trim();    if (value.isEmpty()) {      return null;    }    return value;  } catch (  CommandException e) {    return null;  }}  }
class C{  public static void wait(Object lock,long timeout){  try {synchronized (lock) {      lock.wait(timeout);    }  } catch (  InterruptedException e) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean addToRecyclerBlackList(ItemStack aRecycledStack){  if (aRecycledStack == null)   return false;  try {    ic2.api.recipe.Recipes.recyclerBlacklist.add(new RecipeInputItemStack(aRecycledStack));  } catch (  Throwable e) {  }  return true;}  }
class C{  private static WriterHandler createWriterHandler(AbstractWriter writer){  if (writer instanceof BulkMessageWriter) {    return new WriterHandler((BulkMessageWriter<JSONObject>)writer);  } else   if (writer instanceof MessageWriter) {    return new WriterHandler((MessageWriter<JSONObject>)writer);  } else {    throw new IllegalStateException("Unable to create parser bolt: writer must be a MessageWriter or a BulkMessageWriter");  }}  }
class C{  private byte[] shortenSecretKey(final byte[] longKey){  try {    final byte[] shortenedKey=new byte[8];    System.arraycopy(longKey,0,shortenedKey,0,shortenedKey.length);    return shortenedKey;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public void startElement(String qName) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(qName);}  }
class C{  public void removeAllListeners(){  if (listeners != null) {    listeners.clear();  }}  }
class C{  public TextParserX(){  m_nullTextString="";  m_nullNumberString="";  m_nullDateTimeString="";  m_decimalSeparator=',';  m_datetimePattern="dd-MM-yyyy HH:mm:ss";  m_datePattern="dd-MM-yyyy";  m_timePattern="HH:mm:ss";}  }
class C{  public int optInt(String key,int defaultValue){  try {    return getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public MenuBar(){  super();  categories=new HashMap<String,JMenu>();  nameMap=new HashMap<String,Action>();}  }
class C{  protected void tearDown() throws Exception {  File file;  file=new File(m_ExportFilenameData);  if (file.exists())   file.delete();  m_ExportFilenameData=null;  super.tearDown();}  }
class C{  public void tableChanged(TableModelEvent e){  int rowsSelected=0;  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     rowsSelected++;  }  statusBar.setStatusDB(" " + rowsSelected + " ");}  }
class C{  public boolean isCube(){  return size().getX() == size().getY() && size().getY() == size().getZ();}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("glassfish2x",DeployerType.INSTALLED,GlassFish2xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("glassfish3x",DeployerType.INSTALLED,GlassFish3xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("glassfish3x",DeployerType.REMOTE,GlassFish3xRemoteDeployer.class);  deployerFactory.registerDeployer("glassfish4x",DeployerType.INSTALLED,GlassFish4xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("glassfish4x",DeployerType.REMOTE,GlassFish4xRemoteDeployer.class);}  }
class C{  public static BinaryMessage correctPDU2(BinaryMessage message){  return correctPDU(message,PDU2_CHECKSUMS,320);}  }
class C{  @SuppressWarnings("RedundantCast") public Drawable colorUnknownDrawable(@Nullable Drawable drawable,int color){  if (drawable instanceof DrawableWrapper || drawable instanceof android.support.v7.graphics.drawable.DrawableWrapper) {    drawable=DrawableCompat.wrap(drawable);    DrawableCompat.setTint(drawable,color);    DrawableCompat.setTintMode(drawable,PorterDuff.Mode.SRC_ATOP);    drawable=DrawableCompat.unwrap(drawable);    return drawable;  } else {    try {      Drawable copy=drawable.getConstantState().newDrawable();      copy.mutate();      copy.setColorFilter(color,SRC_ATOP);      return copy;    } catch (    Exception e) {      if (drawable != null) {        Log.d(LOG_TAG,"Failed to color unknown drawable: " + drawable.getClass().getSimpleName());      }      return drawable;    }  }}  }
