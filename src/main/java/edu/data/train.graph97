class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public DerValue(byte stringTag,String value) throws IOException {  data=init(stringTag,value);}  }
class C{  public static void write(Id parcelID,double freeSpeedAccessibility,double carAccessibility,double bikeAccessibility,double walkAccessibility){  try {    assert (UrbanSimParcelCSVWriter.parcelWriter != null);    parcelWriter.write(parcelID + "," + freeSpeedAccessibility+ ","+ carAccessibility+ ","+ bikeAccessibility+ ","+ walkAccessibility);    parcelWriter.newLine();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public String title(){  return title;}  }
class C{  private void buildLines(){  while (!nodeEdgeStack.empty()) {    HalfEdge e=(HalfEdge)nodeEdgeStack.pop();    if (MarkHalfEdge.isMarked(e))     continue;    buildLine(e);  }}  }
class C{  public FixedWidthTextTableWriter(String location) throws DataIOException {  this(FixedWidthTextTableSchema.load(location));}  }
class C{  private static void recurseWrapContent(View nodeView,boolean relayoutAllNodes){  if (nodeView.getVisibility() == View.GONE) {    return;  }  LayoutParams layoutParams=nodeView.getLayoutParams();  boolean isWrapWidth=(layoutParams.width == LayoutParams.WRAP_CONTENT) || relayoutAllNodes;  boolean isWrapHeight=(layoutParams.height == LayoutParams.WRAP_CONTENT) || relayoutAllNodes;  if (isWrapWidth || isWrapHeight) {    boolean changed=false;    int right=nodeView.getRight();    int bottom=nodeView.getBottom();    if (isWrapWidth && nodeView.getMeasuredWidth() > 0) {      right=nodeView.getLeft() + nodeView.getMeasuredWidth();      changed=true;    }    if (isWrapHeight && nodeView.getMeasuredHeight() > 0) {      bottom=nodeView.getTop() + nodeView.getMeasuredHeight();      changed=true;    }    if (changed) {      nodeView.layout(nodeView.getLeft(),nodeView.getTop(),right,bottom);    }  }  if (nodeView instanceof ViewGroup) {    ViewGroup nodeGroup=(ViewGroup)nodeView;    for (int i=0; i < nodeGroup.getChildCount(); i++) {      recurseWrapContent(nodeGroup.getChildAt(i),relayoutAllNodes);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void generateMov(final ITranslationEnvironment environment,final long baseOffset,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  long reilOffset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final TranslationResult loadSource=Helpers.translateOperand(environment,reilOffset,operands.get(1),true);  instructions.addAll(loadSource.getInstructions());  reilOffset=baseOffset + instructions.size();  final TranslationResult loadDest=Helpers.translateOperand(environment,reilOffset,operands.get(0),false);  instructions.addAll(loadDest.getInstructions());  reilOffset=baseOffset + instructions.size();  Helpers.writeBack(environment,reilOffset,operands.get(0),loadSource.getRegister(),loadDest.getSize(),loadDest.getAddress(),loadDest.getType(),instructions);}  }
class C{  public BitmapPool(MemoryTrimmableRegistry memoryTrimmableRegistry,PoolParams poolParams,PoolStatsTracker poolStatsTracker){  super(memoryTrimmableRegistry,poolParams,poolStatsTracker);  initialize();}  }
class C{  public final boolean haveDrawOffer(){  return tree.currentNode.playerAction.equals("draw offer");}  }
class C{  public double gamma(final double spot){  QL.require(spot > 0.0,"positive spot value required");  final double DforwardDs=forward / spot;  final double temp=stdDev * spot;  final double DalphaDs=dAlpha_dD1 / temp;  final double DbetaDs=dBeta_dD2 / temp;  final double D2alphaDs2=-DalphaDs / spot * (1 + D1 / stdDev);  final double D2betaDs2=-DbetaDs / spot * (1 + D2 / stdDev);  final double temp2=D2alphaDs2 * forward + 2.0 * DalphaDs * DforwardDs + D2betaDs2 * x + 2.0 * DbetaDs * dX_dS;  return discount * temp2;}  }
class C{  public String type(){  return this.type;}  }
class C{  public AssignableControl(String prefString){  String[] strings=prefString.split("/");  if (strings.length < 3) {    throw new IllegalStateException("preference string malformed");  }  button=ControllerButton.valueOf(strings[0]);  command=Command.valueOf(strings[1]);  delay=Integer.parseInt(strings[2]);switch (command) {case PLAY_ANIMATION:    anim=Animation.valueOf(strings[3]);  duration=Integer.parseInt(strings[4]);break;case PLAY_LED:led=LED.valueOf(strings[3]);frequency=Float.parseFloat(strings[4]);duration=Integer.parseInt(strings[5]);break;case RECORD_VIDEO:case TAKE_SNAPSHOT:try {recFile=new File(strings[3].replace('?',File.separatorChar));} catch (Exception e) {}break;}this.prefString=prefString;}  }
class C{  public ServiceCall<InputStream> synthesize(final String text,final Voice voice){  return synthesize(text,voice,null);}  }
class C{  public MessageEntry(){  super(KEY);  addCategory(CATEGORY);}  }
class C{  public boolean applyOptions() throws IOException {  for (  Map.Entry<JCheckBox,LimeAssociationOption> entry : associations.entrySet()) {    LimeAssociationOption option=entry.getValue();    if (entry.getKey().isSelected()) {      option.setAllowed(true);      option.setEnabled(true);    } else {      if (option.isEnabled())       option.setAllowed(false);      option.setEnabled(false);    }  }  DialogOption value=DialogOption.INVALID;  if (always.isSelected())   value=DialogOption.YES; else   if (never.isSelected())   value=DialogOption.NO;  QuestionsHandler.GRAB_ASSOCIATIONS.setValue(value.toInt());  return false;}  }
class C{  DescendantIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  int firstStepPos=OpMap.getFirstChildPos(opPos);  int stepType=compiler.getOp(firstStepPos);  boolean orSelf=(OpCodes.FROM_DESCENDANTS_OR_SELF == stepType);  boolean fromRoot=false;  if (OpCodes.FROM_SELF == stepType) {    orSelf=true;  } else   if (OpCodes.FROM_ROOT == stepType) {    fromRoot=true;    int nextStepPos=compiler.getNextStepPos(firstStepPos);    if (compiler.getOp(nextStepPos) == OpCodes.FROM_DESCENDANTS_OR_SELF)     orSelf=true;  }  int nextStepPos=firstStepPos;  while (true) {    nextStepPos=compiler.getNextStepPos(nextStepPos);    if (nextStepPos > 0) {      int stepOp=compiler.getOp(nextStepPos);      if (OpCodes.ENDOP != stepOp)       firstStepPos=nextStepPos; else       break;    } else     break;  }  if ((analysis & WalkerFactory.BIT_CHILD) != 0)   orSelf=false;  if (fromRoot) {    if (orSelf)     m_axis=Axis.DESCENDANTSORSELFFROMROOT; else     m_axis=Axis.DESCENDANTSFROMROOT;  } else   if (orSelf)   m_axis=Axis.DESCENDANTORSELF; else   m_axis=Axis.DESCENDANT;  int whatToShow=compiler.getWhatToShow(firstStepPos);  if ((0 == (whatToShow & (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_ELEMENT | DTMFilter.SHOW_PROCESSING_INSTRUCTION))) || (whatToShow == DTMFilter.SHOW_ALL))   initNodeTest(whatToShow); else {    initNodeTest(whatToShow,compiler.getStepNS(firstStepPos),compiler.getStepLocalName(firstStepPos));  }  initPredicateInfo(compiler,firstStepPos);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:31.594 -0500",hash_original_method="C914D7E35A4624471549A0AE16D24940",hash_generated_method="F0548958B40A83AA883C615982816527") public static boolean isEmergencyMessage(int id){  return id >= MESSAGE_ID_PWS_FIRST_IDENTIFIER && id <= MESSAGE_ID_PWS_LAST_IDENTIFIER;}  }
class C{  private void generateConverterMethodCodeForListOfVO(BufferedWriter out,String voName,String version,String packageNameTarget,String packageNameSource) throws IOException {  String voNameUpper=upperFirstLetter(voName);  out.write("/**\n");  out.write("* Convert list of " + voName + ".\n");  out.write("* @param oldVO List of VO to convert.\n");  out.write("* @return Converted list of VO.\n");  out.write("*/\n");  out.write("public static List<" + packageNameTarget + "."+ voName+ "> convertTo"+ version+ voNameUpper+ "(List<"+ packageNameSource+ "."+ voName+ "> oldVO) {\n");  out.write("if (oldVO == null) {return null;}\n");  out.write("List<" + packageNameTarget + "."+ voName+ "> newVO = new ArrayList<"+ packageNameTarget+ "."+ voName+ ">();\n");  out.write("for (" + packageNameSource + "."+ voName+ " tmp : oldVO) { newVO.add(convertTo"+ version+ "(tmp)); }");  out.write("return newVO;\n");  out.write("}\n");}  }
class C{  public boolean isSetGetRequest(){  return this.getRequest != null;}  }
class C{  public static String join(final Iterator<?> iterator,final String separator){  if (iterator == null) {    return null;  }  if (!iterator.hasNext()) {    return "";  }  final Object first=iterator.next();  if (!iterator.hasNext()) {    return first == null ? null : first.toString();  }  final StringBuilder buf=new StringBuilder(256);  if (first != null) {    buf.append(first);  }  while (iterator.hasNext()) {    if (separator != null) {      buf.append(separator);    }    final Object obj=iterator.next();    if (obj != null) {      buf.append(obj);    }  }  return buf.toString();}  }
class C{  public static Integer parse(String ipString){  return Ip4.intHash(ipString);}  }
class C{  private void onCancelClicked(){  this.finish();}  }
class C{  private String str(Object o){  if (o instanceof String) {    return o.toString().replace("\"","\\\"");  }  if (o instanceof URI) {    return '<' + o.toString() + '>';  }  if (o instanceof XMLGregorianCalendar) {    XMLGregorianCalendar c=(XMLGregorianCalendar)o;    StringBuilder sb=new StringBuilder();    sb.append('"');    sb.append(c.toXMLFormat());    sb.append("\"^^<xsd:dateTime>");    return sb.toString();  }  if (o instanceof Literal) {    Literal l=(Literal)o;    StringBuilder sb=new StringBuilder(l.getLabel().length() * 2);    sb.append('"');    sb.append(l.getLabel().replace("\\","\\\\").replace("\"","\\\"").replace("\n","\\n"));    sb.append('"');    if (l.getLanguage() != null) {      sb.append('@');      sb.append(l.getLanguage());    } else     if (!l.getDatatype().equals(XMLSchema.STRING)) {      sb.append("^^<");      sb.append(l.getDatatype());      sb.append(">");    }    return sb.toString();  }  if (o instanceof BNode) {    return "_:" + ((BNode)o).getID();  }  throw new RuntimeException("I have no idea what do to with a " + o.getClass());}  }
class C{  private static void replaceWithBackup(File from,File to){  if (!from.canRead())   exit("Failed to read source file '" + from.getAbsolutePath() + "'.",null);  println("Replacing file '" + to.getAbsolutePath() + "'.");  try {    U.copy(from,renameToBak(to),true);  } catch (  IOException e) {    exit("Failed to replace file '" + to.getAbsolutePath() + "'.",e);  }}  }
class C{  public C2_DTLZ2(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress;  double z, zn, previousZ;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxDist=0;  int subgridSize=0;  int neighbourhoodMaxDist=0;  int neighbourhoodSubgridSize=0;  boolean isLowest;  double aSmallValue;  int a, r, c, i, j, k, n, cn, rn;  int numNoFlowCells;  double largeVal=Float.MAX_VALUE;  int visitedCells;  boolean atLeastOneSourceCell;  boolean flag;  int b=0;  double costAccumVal;  double cost1, cost2;  double newcostVal;  double maxCost=largeVal;  boolean useMaxCost=false;  boolean solutionFound;  double[] dist=new double[8];  int[] backLinkDir={4,5,6,7,0,1,2,3};  int numUnsolvedCells=0;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodMaxDist=Integer.parseInt(args[2]);  neighbourhoodSubgridSize=2 * neighbourhoodMaxDist + 1;  if (!args[3].toLowerCase().equals("not specified")) {    maxCost=Double.parseDouble(args[3]);    useMaxCost=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  Long startTime=System.currentTimeMillis();  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    String shortName=DEM.getShortHeaderFile();    double cellSizeX=DEM.getCellSizeX();    double cellSizeY=DEM.getCellSizeY();    double minCellSize=Math.min(cellSizeX,cellSizeY);    double diagCellSize=Math.sqrt(cellSizeX * cellSizeX + cellSizeY * cellSizeY);    dist[0]=diagCellSize / minCellSize;    dist[1]=cellSizeX / minCellSize;    dist[2]=diagCellSize / minCellSize;    dist[3]=cellSizeY / minCellSize;    dist[4]=diagCellSize / minCellSize;    dist[5]=cellSizeX / minCellSize;    dist[6]=diagCellSize / minCellSize;    dist[7]=cellSizeY / minCellSize;    FileUtilities.copyFile(new File(inputHeader),new File(outputHeader));    FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(outputHeader.replace(".dep",".tas")));    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw");    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    if (args.length == 5 && !args[4].toLowerCase().equals("not specified")) {      aSmallValue=Double.parseDouble(args[4]);    }    double[][] LNDecrementValue=new double[neighbourhoodSubgridSize][neighbourhoodSubgridSize];    for (r=0; r < neighbourhoodSubgridSize; r++) {      for (c=0; c < neighbourhoodSubgridSize; c++) {        j=Math.abs(c - neighbourhoodMaxDist);        k=Math.abs(r - neighbourhoodMaxDist);        LNDecrementValue[r][c]=(j + k) * aSmallValue;      }    }    DEM.close();    ArrayList<DepGridCell> pq2=new ArrayList<>();    updateProgress("Loop 1 of 2:",-1);    for (row=1; row < (rows - 1); row++) {      for (col=1; col < (cols - 1); col++) {        z=output.getValue(row,col);        if (z != noData) {          isLowest=true;          for (a=0; a < 8; a++) {            cn=col + dX[a];            rn=row + dY[a];            zn=output.getValue(rn,cn);            if (zn < z && zn != noData) {              isLowest=false;              break;            }          }          if (isLowest) {            pq2.add(new DepGridCell(row,col,z));          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    numNoFlowCells=pq2.size();    int oneHundredthOfNumNoFlowCells=(int)(numNoFlowCells / 100);    updateProgress("Loop 2 of 2:",-1);    Long startTimeLoop2=System.currentTimeMillis();    DepGridCell cell=new DepGridCell(-1,-1,largeVal);    visitedCells=0;    n=0;    progress=0;    do {      cell=pq2.get(visitedCells);      col=cell.col;      row=cell.row;      z=cell.z;      isLowest=true;      for (a=0; a < 8; a++) {        cn=col + dX[a];        rn=row + dY[a];        zn=output.getValue(rn,cn);        if (zn < z && zn != noData) {          isLowest=false;          break;        }      }      if (isLowest) {        maxDist=neighbourhoodMaxDist;        subgridSize=neighbourhoodSubgridSize;        double[][] cost=new double[subgridSize][subgridSize];        double[][] accumulatedcost=new double[subgridSize][subgridSize];        int[][] backLink=new int[subgridSize][subgridSize];        atLeastOneSourceCell=false;        for (r=-maxDist; r <= maxDist; r++) {          for (c=-maxDist; c <= maxDist; c++) {            zn=output.getValue(row + r,col + c);            j=c + maxDist;            k=r + maxDist;            if ((zn + LNDecrementValue[k][j]) < z && zn != noData) {              cost[k][j]=0;              accumulatedcost[k][j]=0;              atLeastOneSourceCell=true;            } else             if ((zn + LNDecrementValue[k][j]) >= z) {              cost1=(zn - z) + LNDecrementValue[k][j];              if (cost1 <= maxCost) {                cost[k][j]=cost1;              } else {                cost[k][j]=largeVal;              }              accumulatedcost[k][j]=largeVal;            } else {              cost[k][j]=noData;              accumulatedcost[k][j]=noData;            }            backLink[k][j]=(int)noData;          }        }        cost[maxDist][maxDist]=0;        accumulatedcost[maxDist][maxDist]=largeVal;        if (atLeastOneSourceCell) {          PriorityQueue<CostDistCell> activeCellList=new PriorityQueue<>(maxDist * 4);          for (r=0; r < subgridSize; r++) {            for (c=0; c < subgridSize; c++) {              if (accumulatedcost[r][c] == largeVal) {                cost1=cost[r][c];                for (a=0; a < 8; a++) {                  cn=c + dX[a];                  rn=r + dY[a];                  if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                    if (accumulatedcost[rn][cn] == 0) {                      cost2=cost[rn][cn];                      newcostVal=(cost1 + cost2) / 2 * dist[a];                      activeCellList.add(new CostDistCell(r,c,newcostVal,a));                    }                  }                }              }            }          }          if (activeCellList.size() > 0) {            do {              CostDistCell cdCell=activeCellList.poll();              if (cdCell != null) {                r=cdCell.row;                c=cdCell.col;                costAccumVal=cdCell.aCost;                if (accumulatedcost[r][c] > costAccumVal) {                  accumulatedcost[r][c]=costAccumVal;                  backLink[r][c]=cdCell.backLink;                  cost1=cost[r][c];                  for (a=0; a < 8; a++) {                    cn=c + dX[a];                    rn=r + dY[a];                    if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                      cost2=cost[rn][cn];                      newcostVal=costAccumVal + (cost1 + cost2) / 2 * dist[a];                      if (newcostVal < accumulatedcost[rn][cn]) {                        activeCellList.add(new CostDistCell(rn,cn,newcostVal,backLinkDir[a]));                      }                    }                  }                }              } else {                activeCellList.clear();              }            } while (activeCellList.size() > 0);            solutionFound=true;            if (useMaxCost) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  if (cost[r][c] == largeVal) {                    solutionFound=false;                  }                } else {                  flag=false;                }              } while (flag);            }            if (solutionFound) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  col=col + dX[b];                  row=row + dY[b];                  zn=output.getValue(row,col);                  if (zn > (previousZ - aSmallValue)) {                    output.setValue(row,col,previousZ - aSmallValue);                  }                  previousZ=output.getValue(row,col);                } else {                  flag=false;                }              } while (flag);            } else {              numUnsolvedCells++;            }          } else {            numUnsolvedCells++;          }        } else {          numUnsolvedCells++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      visitedCells++;      n++;      if (n == oneHundredthOfNumNoFlowCells || (visitedCells % 500 == 0)) {        if (n == oneHundredthOfNumNoFlowCells) {          n=0;          progress++;        }        long secPassed=(System.currentTimeMillis() - startTimeLoop2) / 1000;        long secRemaining=(long)(secPassed * ((double)numNoFlowCells / visitedCells) - secPassed);        String timeRemaining=String.format("%02d:%02d:%02d:%02d",secRemaining / 86400,(secRemaining % 86400) / 3600,(secRemaining % 3600) / 60,(secRemaining % 60));        updateProgress("Solved " + df.format((visitedCells - numUnsolvedCells)) + " pits (Est. time remaining "+ timeRemaining+ "):",progress);      }    } while (visitedCells < numNoFlowCells);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    Long endTime=System.currentTimeMillis();    returnData(outputHeader);    String results="Depression Breaching Results:\n";    results+="Input DEM:\t" + shortName + "\n";    results+="Output DEM:\t" + output.getShortHeaderFile() + "\n";    results+="Solved Pit Cells:\t" + df.format(visitedCells - numUnsolvedCells);    results+="\nUnsolved Pit Cells:\t" + df.format(numUnsolvedCells);    results+="\nMax distance:\t" + neighbourhoodMaxDist;    if (useMaxCost) {      results+="\nMax Elev. Decrement:\t" + maxCost;    }    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    results+="\nDuration:\t" + duration;    returnData(results);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean methodMatches(String methodName){  String targetMethod=Properties.TARGET_METHOD;  if (!targetMethod.isEmpty() && methodName.equals(targetMethod))   return true;  final String targetMethodList=Properties.TARGET_METHOD_LIST;  if (!targetMethodList.isEmpty()) {    String[] targetMethods=targetMethodList.split(":");    for (    String targetMethodInList : targetMethods) {      if (methodName.equals(targetMethodInList))       return true;    }  }  final String targetMethodPrefix=Properties.TARGET_METHOD_PREFIX;  if (!targetMethodPrefix.isEmpty() && methodName.startsWith(targetMethodPrefix))   return true;  final boolean noMethodTargetSpecified=targetMethod.isEmpty() && targetMethodList.isEmpty() && targetMethodPrefix.isEmpty();  return noMethodTargetSpecified;}  }
class C{  protected <R extends T>R createResult(Class<R> resultImplClass) throws ContentCreationException {  try {    return resultImplClass.newInstance();  } catch (  IllegalAccessException iae) {    throw new IllegalStateException("Can't create parse target",iae);  }catch (  InstantiationException ie) {    throw new IllegalStateException("Can't create parse target",ie);  }}  }
class C{  public void testDetectLanguagePt(){  LOGGER.debug("detectLanguage pt");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "pt.wikipedia.org-wiki-Acessibilidade_Web_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("pt",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("pt",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("pt",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public TemplatesHandler newTemplatesHandler() throws TransformerConfigurationException {  return new StylesheetHandler(this);}  }
class C{  public static <T>Map<String,T> mergeMaps(Collection<ActionType> actionTypes,Function<ActionType,Map<String,T>> transformFunction){  Collection<Map<String,T>> values=Collections2.transform(actionTypes,transformFunction);  Map<String,T> result=new HashMap<>();  for (  Map<String,T> map : values) {    result.putAll(map);  }  return result;}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  public final Object[] toArray(){  Object[][][] field=this.field;  Object[][] fieldx=null;  Object[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  Object[] vals=new Object[width * height * length];  int i=0;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        vals[i++]=fieldxy[z];      }    }  }  return vals;}  }
class C{  public DefaultBeginHyphenAttributeCondition(String localName,String namespaceURI,boolean specified,String value){  super(localName,namespaceURI,specified,value);}  }
class C{  public void test_getModulus() throws Exception {  KeyFactory gen=KeyFactory.getInstance("RSA");  final BigInteger n=BigInteger.valueOf(3233);  final BigInteger d=BigInteger.valueOf(2753);  final BigInteger e=BigInteger.valueOf(17);  RSAKey key=null;  key=(RSAKey)gen.generatePrivate(new RSAPrivateKeySpec(n,d));  assertEquals("invalid modulus",n,key.getModulus());  key=(RSAKey)gen.generatePublic(new RSAPublicKeySpec(n,e));  assertEquals("invalid modulus",n,key.getModulus());}  }
class C{  public boolean isEmpty(){  return sessionId == null && attrName == null && ageFrom == null && ageTo == null && idleTimeFrom == null && idleTimeTo == null && lastIp == null;}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  try {    if (shouldIndent())     indent();    final java.io.Writer writer=m_writer;    writer.write('&');    writer.write(name);    writer.write(';');  } catch (  IOException e) {    throw new SAXException(e);  }  if (m_tracer != null)   super.fireEntityReference(name);}  }
class C{  public boolean isAbsolute(LocPathIterator path){  int analysis=path.getAnalysisBits();  boolean isAbs=(WalkerFactory.isSet(analysis,WalkerFactory.BIT_ROOT) || WalkerFactory.isSet(analysis,WalkerFactory.BIT_ANY_DESCENDANT_FROM_ROOT));  if (isAbs) {    isAbs=m_absPathChecker.checkAbsolute(path);  }  return isAbs;}  }
class C{  public AccountHeaderBuilder addProfiles(@NonNull IProfile... profiles){  if (this.mProfiles == null) {    this.mProfiles=new ArrayList<>();  }  Collections.addAll(this.mProfiles,IdDistributor.checkIds(profiles));  return this;}  }
class C{  private void initializeActionBar(){  Resources res=getResources();  AppCompatActivity activity=(AppCompatActivity)fragment.getActivity();  Toolbar toolbar=(Toolbar)findViewById(R.id.custom_action_bar);  toolbarTitle=(TextView)findViewById(R.id.toolbar_title);  toolbarTitle.setTextColor(theme.getProductTitleColor(res));  appBarLayout=(AppBarLayout)findViewById(R.id.app_bar);  CoordinatorLayout.LayoutParams layoutParams=(CoordinatorLayout.LayoutParams)appBarLayout.getLayoutParams();  layoutParams.setBehavior(new ScrollFlingAppBarLayoutBehavior());  appBarLayout.setLayoutParams(layoutParams);  appBarLayout.addOnOffsetChangedListener(this);  actionBar=activity.getSupportActionBar();  actionBar.setDisplayHomeAsUpEnabled(true);  actionBar.setElevation(8);  homeDrawable=R.drawable.ic_close_white_24dp;  if (imageAreaIsExpanded) {    setActionBarIconBack();  } else {    setActionBarIconClose();  }}  }
class C{  public static boolean isLafAqua(){  ensureValidCache();  if (cachedIsLafAqua == null) {    cachedIsLafAqua=Boolean.valueOf(computeIsLafAqua());  }  return cachedIsLafAqua.booleanValue();}  }
class C{  public Boolean isFeatureCapabilitiesSupported(){  return featureCapabilitiesSupported;}  }
class C{  private float dpToPx(float dp){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getContext().getResources().getDisplayMetrics());}  }
class C{  public Source<List<T>> ofSize(int size){  return ofSizeBetween(size,size);}  }
class C{  public void clearTickLabelSections(){  tickLabelSections.clear();  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  public boolean defineMethodHashCode(SymbolResolver resolver){  return isDefiningMethod("hashCode",Collections.emptyList(),resolver);}  }
class C{  @SuppressWarnings("unchecked") public static List<Boolean> toList(boolean[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  protected void addItem(JPanel p,JComponent c,int x,int y){  GridBagConstraints gc=new GridBagConstraints();  gc.gridx=x;  gc.gridy=y;  gc.weightx=100.0;  gc.weighty=100.0;  p.add(c,gc);}  }
class C{  public Instances resampleWithWeights(Random random){  return resampleWithWeights(random,false);}  }
class C{  public void evictMasterEntity(BaseGenericIdEntity entity,@Nullable EntityAttributeChanges changes){  MetaClass metaClass=metadata.getClassNN(entity.getClass());  for (  MetaProperty property : metaClass.getProperties()) {    if (!property.getRange().isClass() || property.getRange().getCardinality().isMany())     continue;    MetaProperty inverseProp=property.getInverse();    if (inverseProp == null || !inverseProp.getRange().getCardinality().isMany())     continue;    if (metadata.getTools().isCacheable(property.getRange().asClass())) {      if (changes != null) {        for (        String attributeName : changes.getAttributes()) {          if (property.getName().equals(attributeName)) {            evictEntity(changes.getOldValue(attributeName));            break;          }        }      } else {        Object masterEntity=entity.getValue(property.getName());        evictEntity(masterEntity);      }    }  }}  }
class C{  public final void deVoice(String channel,String nick){  this.setMode(channel,"-v " + nick);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public final void packFiles(final String[] strFileNames,final String strDestinationFile) throws JIPSyntaxErrorException, FileNotFoundException, IOException {  List fileList=List.NIL;  for (  String file : strFileNames) {    fileList=new List(Atom.createAtom(file),fileList);  }  Pack2.pack(fileList,strDestinationFile,this);}  }
class C{  public boolean hasOriginalStartTime(){  return super.hasElement(When.KEY);}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  BigInteger e=k;  BigInteger h=e.multiply(BigInteger.valueOf(3));  ECPoint neg=p.negate();  ECPoint R=p;  for (int i=h.bitLength() - 2; i > 0; --i) {    R=R.twice();    boolean hBit=h.testBit(i);    boolean eBit=e.testBit(i);    if (hBit != eBit) {      R=R.add(hBit ? p : neg);    }  }  return R;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public void addMVTypedSet(TypedSet mvSet,String comment,String attributeName){  if (mvSet.getValueCount() != 0) {    if (comment != null && !(comment.length() == 0)) {      tlaBuffer.append(COMMENT).append(comment).append(ATTRIBUTE).append(attributeName).append(CR);    }    tlaBuffer.append("CONSTANTS").append(CR).append(mvSet.toStringWithoutBraces());    tlaBuffer.append(CR).append(SEP).append(CR).append(CR);    if (comment != null && !(comment.length() == 0)) {      cfgBuffer.append(COMMENT).append(comment).append(CR);    }    cfgBuffer.append("CONSTANTS").append(CR);    String mv;    for (int i=0; i < mvSet.getValueCount(); i++) {      mv=mvSet.getValue(i);      cfgBuffer.append(mv).append(EQ).append(mv).append(CR);    }  }}  }
class C{  private void releasePowerLock(){  if (mWakeLock != null && mWakeLock.isHeld()) {    Log.i(TAG,"Releasing wakelock " + WAKELOCK_NAME);    mWakeLock.release();  }  mWakeLock=null;}  }
class C{  public boolean isVersion(int i){  return versions[i];}  }
class C{  public static float svgHorizontalCoordinateToObjectBoundingBox(String s,String attr,Context ctx){  return svgToObjectBoundingBox(s,attr,HORIZONTAL_LENGTH,ctx);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public int calculatePartition(int splitno,int numPartitions){  final int partitionSize=(int)(Math.ceil((double)numSplits / (double)numPartitions));  return splitno / partitionSize;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatanomodificationallowederr.class,args);}  }
class C{  public <T>T read(Class<? extends T> type,Reader source) throws Exception {  return read(type,source,true);}  }
class C{  public boolean drawFeatures(VPFFeatureWarehouse warehouse,LatLonPoint ll1,LatLonPoint ll2,float dpplat,float dpplon){  boolean didSomething=false;  TableHolder tables=new TableHolder(this);  List<String> featureList=warehouse.getFeatures();  for (  String currentFeature : featureList) {    char featureType=whatFeatureType(warehouse,currentFeature);    if (featureType == SKIP_FEATURETYPE) {      continue;    }    if (Debug.debugging("vpf")) {      Debug.output("CoverageTable getting " + currentFeature + " features");    }    FeatureClassInfo fci=getFeatureClassInfo(currentFeature);    int fciFeatureIDCol=fci.whatColumn(DcwRecordFile.ID_COLUMN_NAME);    if ((fci == null) || (cat == null) || currentFeature == null) {      continue;    }    if (drawFeaturesFromThematicIndex(fci,warehouse,tables,ll1,ll2,dpplat,dpplon,currentFeature,featureType)) {      didSomething=true;      continue;    }    boolean needToFindOurselves=true;    TilingAdapter fciTilingAdapter=fci.getTilingAdapter();    if (fciTilingAdapter == null) {      continue;    }    TileDirectory currentTile=null;    int oldTileID=-2;    try {      int getrow=1;      for (List<Object> fcirow=new ArrayList<Object>(); fci.getRow(fcirow,getrow++); ) {        if (Debug.debugging("vpfdetail")) {          Debug.output("CoverageTable new feature " + fcirow);        }        int tileID=fciTilingAdapter.getTileId(fcirow);        if (tileID != oldTileID) {          tables.close();          if (Debug.debugging("vpf.tile")) {            Debug.output("CoverageTable.drawFeatures(): opening new tile (" + tileID + ")");          }          currentTile=(tileID == -1) ? new TileDirectory() : cat.getTileWithID(tileID);          if (currentTile == null) {            Debug.error("VPFLayer|CoverageTable.drawFeatures: null tile from bogus ID (" + tileID + ") from "+ fci.filename+ ", skipping...");            continue;          }          if ((tileID == -1) || currentTile.inRegion(ll1.getLatitude(),ll2.getLatitude(),ll2.getLongitude(),ll1.getLongitude())) {            String libraryname="";            if (cat != null) {              libraryname=cat.libraryname;            }            if (!warehouse.needToFetchTileContents(libraryname,currentFeature,currentTile)) {              if (Debug.debugging("vpf")) {                Debug.output("CoverageTable: Loaded Cached List for " + currentFeature + " and "+ currentTile.getPath());              }              continue;            }            if (Debug.debugging("vpf.tile")) {              Debug.output("CoverageTable: Drawing " + featureType + " features for "+ currentTile);            }            tables.setTables(featureType,currentTile);            if (needToFindOurselves) {              needToFindOurselves=false;              tables.findYourself(fci);            }          } else {            tables.close();          }          oldTileID=tileID;        }        int primitiveID=fciTilingAdapter.getPrimId(fcirow);        int featureID=((Number)fcirow.get(fciFeatureIDCol)).intValue();        if (tables.drawFeature(primitiveID,warehouse,ll1,ll2,dpplat,dpplon,currentFeature,featureID) != null) {          didSomething=true;        }      }    } catch (    FormatException f) {      if (Debug.debugging("vpf.FormatException")) {        Debug.output("CoverageTable: Creating table: " + f.getClass() + " "+ f.getMessage());      }    }    fci.close();  }  tables.close();  return didSomething;}  }
class C{  public void countSegment(Coordinate p1,Coordinate p2){  if (p1.x < p.x && p2.x < p.x)   return;  if (p.x == p2.x && p.y == p2.y) {    isPointOnSegment=true;    return;  }  if (p1.y == p.y && p2.y == p.y) {    double minx=p1.x;    double maxx=p2.x;    if (minx > maxx) {      minx=p2.x;      maxx=p1.x;    }    if (p.x >= minx && p.x <= maxx) {      isPointOnSegment=true;    }    return;  }  if (((p1.y > p.y) && (p2.y <= p.y)) || ((p2.y > p.y) && (p1.y <= p.y))) {    double x1=p1.x - p.x;    double y1=p1.y - p.y;    double x2=p2.x - p.x;    double y2=p2.y - p.y;    double xIntSign=RobustDeterminant.signOfDet2x2(x1,y1,x2,y2);    if (xIntSign == 0.0) {      isPointOnSegment=true;      return;    }    if (y2 < y1)     xIntSign=-xIntSign;    if (xIntSign > 0.0) {      crossingCount++;    }  }}  }
class C{  public static List<Path> listFilesOnly(Path directory){  List<Path> fileNames=new ArrayList<>();  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(directory)){    for (    Path path : directoryStream) {      if (Utils.isRegularFile(path)) {        String fn=path.getFileName().toString().toUpperCase();        if (!skipFolders.contains(fn) && !fn.matches(skipRegex) && !TvShowModuleManager.SETTINGS.getTvShowSkipFolders().contains(path.toFile().getAbsolutePath())) {          fileNames.add(path.toAbsolutePath());        } else {          LOGGER.debug("Skipping: " + path);        }      }    }  } catch (  IOException ex) {  }  return fileNames;}  }
class C{  public void testLegacyLong() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyLongField("value",3000000000L,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_LONG));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("3000000000",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public static void isNonEmpty(ExampleSet es) throws OperatorException {  if (es.size() == 0) {    throw new UserError(null,117);  }}  }
class C{  public void readConfiguration(InputStream ins) throws IOException, SecurityException {  checkPermission();  reset();  props.load(ins);  String names[]=parseClassNames("config");  for (int i=0; i < names.length; i++) {    String word=names[i];    try {      Class<?> clz=ClassLoader.getSystemClassLoader().loadClass(word);      clz.newInstance();    } catch (    Exception ex) {      System.err.println("Can't load config class \"" + word + "\"");      System.err.println("" + ex);    }  }  setLevelsOnExistingLoggers();  Map<Object,Integer> listeners=null;synchronized (listenerMap) {    if (!listenerMap.isEmpty())     listeners=new HashMap<>(listenerMap);  }  if (listeners != null) {    assert Beans.isBeansPresent();    Object ev=Beans.newPropertyChangeEvent(LogManager.class,null,null,null);    for (    Map.Entry<Object,Integer> entry : listeners.entrySet()) {      Object listener=entry.getKey();      int count=entry.getValue().intValue();      for (int i=0; i < count; i++) {        Beans.invokePropertyChange(listener,ev);      }    }  }synchronized (this) {    initializedGlobalHandlers=false;  }}  }
class C{  public int resumeDownload(long... ids){  initResumeMethod();  if (resumeDownload == null) {    return -1;  }  try {    return ((Integer)resumeDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public void shutdown(){  sched.shutdown();}  }
class C{  public void addActionListener(ActionListener listener){  forwardProjectionButton.addActionListener(listener);  backProjectionButton.addActionListener(listener);}  }
class C{  public Link(Vector2 point1,Vector2 point2){  super(point1,point2);}  }
class C{  public AlwaysEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected void mapRecipients(Map<MailAddress,String> recipientsMap) throws MessagingException {  Collection<MailAddress> recipients=recipientsMap.keySet();  for (  MailAddress source : recipients) {    String user=source.getLocalPart().toLowerCase();    String domain=source.getDomain().toLowerCase();    String targetString=RecipientRewriteTableUtil.getTargetString(user,domain,mappings);    if (targetString != null) {      recipientsMap.put(source,targetString);    }  }}  }
class C{  private boolean compareAndDecrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect - 1);}  }
class C{  public static void reverse(final char[] buffer,final int start,final int len){  if (len < 2)   return;  int end=(start + len) - 1;  char frontHigh=buffer[start];  char endLow=buffer[end];  boolean allowFrontSur=true, allowEndSur=true;  final int mid=start + (len >> 1);  for (int i=start; i < mid; ++i, --end) {    final char frontLow=buffer[i + 1];    final char endHigh=buffer[end - 1];    final boolean surAtFront=allowFrontSur && Character.isSurrogatePair(frontHigh,frontLow);    if (surAtFront && (len < 3)) {      return;    }    final boolean surAtEnd=allowEndSur && Character.isSurrogatePair(endHigh,endLow);    allowFrontSur=allowEndSur=true;    if (surAtFront == surAtEnd) {      if (surAtFront) {        buffer[end]=frontLow;        buffer[--end]=frontHigh;        buffer[i]=endHigh;        buffer[++i]=endLow;        frontHigh=buffer[i + 1];        endLow=buffer[end - 1];      } else {        buffer[end]=frontHigh;        buffer[i]=endLow;        frontHigh=frontLow;        endLow=endHigh;      }    } else {      if (surAtFront) {        buffer[end]=frontLow;        buffer[i]=endLow;        endLow=endHigh;        allowFrontSur=false;      } else {        buffer[end]=frontHigh;        buffer[i]=endHigh;        frontHigh=frontLow;        allowEndSur=false;      }    }  }  if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {    buffer[end]=allowFrontSur ? endLow : frontHigh;  }}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  @Override protected void doPost(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isReadable(getServletContext(),req,resp)) {    return;  }  if (req.getRequestURI().endsWith("/tx")) {    doCreateTx(req,resp);    return;  } else   if (req.getParameter(ATTR_PREPARE) != null) {    doPrepareTx(req,resp);  } else   if (req.getParameter(ATTR_ABORT) != null) {    doAbortTx(req,resp);  } else   if (req.getParameter(ATTR_COMMIT) != null) {    doCommitTx(req,resp);  } else   if (req.getParameter(ATTR_STATUS) != null) {    doStatusTx(req,resp);  } else {    buildAndCommitResponse(resp,HttpServletResponse.SC_BAD_REQUEST,MIME_TEXT_HTML,"Unknown transaction management request");  }}  }
class C{  public int other(int vertex){  if (vertex == v)   return w; else   if (vertex == w)   return v; else   throw new IllegalArgumentException("Illegal endpoint");}  }
class C{  @Override public void cacheResponse(Request request,Response response){  if (!enabled) {    return;  }  ResponseCode code=response.getCode();  if (ResponseCode.isSuccess(code)) {    CacheKey cacheKey=null;    try {      cacheKey=CacheKey.fromContentTypeOption(request);    } catch (    URISyntaxException e) {      LOGGER.warning("Cannot create the cache key: " + e.getMessage());    }    if (code == ResponseCode.CREATED || code == ResponseCode.DELETED || code == ResponseCode.CHANGED) {      invalidateRequest(cacheKey);    } else     if (code == ResponseCode.VALID) {      Long maxAgeOption=response.getOptions().getMaxAge();      if (maxAgeOption != null) {        Response cachedResponse=responseCache.getUnchecked(cacheKey);        long newCurrentTime=response.getTimestamp();        long newMaxAge=maxAgeOption.longValue();        cachedResponse.getOptions().setMaxAge(newMaxAge);        cachedResponse.setTimestamp(newCurrentTime);        LOGGER.finer("Updated cached response");      } else {        LOGGER.warning("No max-age option set in response: " + response);      }    } else     if (code == ResponseCode.CONTENT) {      Long maxAgeOption=response.getOptions().getMaxAge();      if (maxAgeOption == null) {        response.getOptions().setMaxAge(OptionNumberRegistry.Defaults.MAX_AGE);      }      if (maxAgeOption > 0) {        try {          Response responseInserted=responseCache.get(cacheKey);          if (responseInserted != null) {            LOGGER.finer("Cached response");          } else {            LOGGER.warning("Failed to insert the response in the cache");          }        } catch (        Exception e) {          LOGGER.log(Level.WARNING,"Exception while inserting the response in the cache",e);        }      } else {        invalidateRequest(request);      }    } else {      LOGGER.severe("Code not recognized: " + code);    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void go(){  rmiHost=ReplicatorConf.RMI_DEFAULT_HOST;  rmiPort=serviceProps.getInt(ReplicatorConf.RMI_PORT,ReplicatorConf.RMI_DEFAULT_PORT,false);  rmiPort=new Integer(System.getProperty(ReplicatorConf.RMI_PORT,String.valueOf(rmiPort))).intValue();  service=null;  String command=null;  String curArg=null;  try {    while (argvIterator.hasNext()) {      curArg=argvIterator.next();      if ("-host".equals(curArg))       rmiHost=argvIterator.next(); else       if ("-port".equals(curArg))       rmiPort=Integer.parseInt(argvIterator.next()); else       if ("-verbose".equals(curArg))       verbose=true; else       if ("-service".equals(curArg))       service=argvIterator.next(); else       if ("-retry".equals(curArg)) {        String nextVal=argvIterator.peek();        if (nextVal == null || (nextVal.length() == 0) || !Character.isDigit(nextVal.charAt(0))) {        } else {          try {            connectDelay=Integer.parseInt(nextVal);            argvIterator.next();          } catch (          NumberFormatException e) {          }        }      } else       if (AuthenticationInfo.SECURITY_CONFIG_FILE_LOCATION.equals(curArg)) {        securityPropertiesFileLocation=argvIterator.next();      } else       if (curArg.startsWith("-")) {        fatal("Unrecognized global option: " + curArg,null);      } else {        command=curArg;        break;      }    }    try {      this.authenticationInfo=SecurityHelper.loadAuthenticationInformation(securityPropertiesFileLocation);      if (verbose) {        CLUtils.print(SecurityHelper.printSecuritySummary(authenticationInfo));      }      PasswordManager passwordManager=new PasswordManager(this.authenticationInfo,ClientApplicationType.RMI_JMX);      String goodPassword=passwordManager.getEncryptedPasswordForUser(this.authenticationInfo.getUsername());      this.authenticationInfo.setPassword(goodPassword);    } catch (    ConfigurationException ce) {      logger.debug(MessageFormat.format("Configuration error: {0}",ce.getMessage()));    }catch (    ServerRuntimeException sre) {      logger.debug(MessageFormat.format("Could not get authentication information : {0}",sre.getMessage()));    }  } catch (  NumberFormatException e) {    fatal("Bad numeric argument for " + curArg,null);  }catch (  ArrayIndexOutOfBoundsException e) {    fatal("Missing value for " + curArg,null);  }  if (command != null && command.equals(Commands.HELP)) {    printHelp();    System.exit(0);  }  try {    try {      connect();    } catch (    ServerRuntimeException e) {      fatal("Connection failed: " + e.getMessage(),e);    }    if (command == null)     fatal("No command entered: try 'help' to get a list",null); else     if (command.equals(Commands.SERVICES))     doServices(); else     if (command.equals(Commands.START))     fatal("This command has been renamed, use '" + Commands.LOAD + "'",null); else     if (command.equals(Commands.STOP))     fatal("This command has been renamed, use '" + Commands.UNLOAD + "'",null); else     if (command.equals(Commands.LOAD))     doLoadService(); else     if (command.equals(Commands.UNLOAD))     doUnloadService(); else     if (command.equals(Commands.RESET))     doResetService(); else     if (command.equals(Commands.SHUTDOWN))     doShutdown(); else     if (command.equals(Commands.KILL))     doKill(); else     if (command.equals(Commands.ONLINE))     doOnline(); else     if (command.equals(Commands.OFFLINE))     doOffline(); else     if (command.equals(Commands.OFFLINE_DEFERRED))     doOfflineDeferred(); else     if (command.equals(Commands.WAIT))     doWait(); else     if (command.equals(Commands.CHECK))     doCheck(); else     if (command.equals(Commands.HEARTBEAT))     doHeartbeat(); else     if (command.equals(Commands.FLUSH))     doFlush(); else     if (command.equals(Commands.PURGE))     doPurge(); else     if (command.equals(Commands.CONFIGURE))     doConfigure(); else     if (command.equals(Commands.SETROLE))     doSetRole(); else     if (command.equals(Commands.CLEAR))     doClearDynamic(); else     if (command.equals(Commands.BACKUP))     doBackup(); else     if (command.equals(Commands.RESTORE))     doRestore(); else     if (command.equals(Commands.STATS))     doStatus(); else     if (command.equals(Commands.PROPERTIES))     doProperties(); else     if (command.equals(Commands.CLIENTS))     doClients(); else     if (command.equals(Commands.HELP))     printHelp(); else     if (command.equals(Commands.VERSION))     printVersion(); else     if (command.equals(Commands.CAPABILITIES))     doCapabilities(); else     if (command.equals(Commands.SHARD)) {      doShardCommand();    } else     fatal("Unknown command, try 'help' to get a list: '" + command,null);  } catch (  ConnectException e) {    if (expectLostConnection)     println("RMI connection lost!"); else     fatal("RMI connection lost!",e);  }catch (  RemoteException e) {    if (expectLostConnection)     println("Replicator appears to be stopped"); else {      fatal("Fatal RMI communication error: " + e.getMessage(),e);    }  }catch (  Exception e) {    fatal("Operation failed: " + e.getMessage(),e);  }catch (  Throwable t) {    fatal("Fatal error: " + t.getMessage(),t);  }}  }
class C{  public static boolean isFile(Resource file){  if (file.exists())   return file.isFile();  Resource parent=file.getParentResource();  return parent.mkdirs() && file.createNewFile();}  }
class C{  public synchronized int usedEntries(){  return map.size();}  }
class C{  public SpannableStringBuilder(){  this("");}  }
class C{  public JSONStringer endObject() throws JSONException {  return close(Scope.EMPTY_OBJECT,Scope.NONEMPTY_OBJECT,"}");}  }
class C{  public SafeObjectInputStream(boolean isWhitelist) throws IOException {  super();  this.config.setWhitelisting(isWhitelist);  this.config.setBlacklisting(!isWhitelist);}  }
class C{  public ParameterAnnotationsAttribute(ConstPool cp,String attrname,byte[] info){  super(cp,attrname,info);}  }
class C{  public UnweightedGraph(V[] vertices,int[][] edges){  super(vertices,edges);}  }
class C{  public RegionAttributesCreation(CacheCreation cc,RegionAttributes attrs,boolean defaults){  this.cacheListeners=new ArrayList(Arrays.asList(attrs.getCacheListeners()));  this.gatewaySenderIds=new HashSet<String>(attrs.getGatewaySenderIds());  this.asyncEventQueueIds=new HashSet<String>(attrs.getAsyncEventQueueIds());  this.cacheLoader=attrs.getCacheLoader();  this.cacheWriter=attrs.getCacheWriter();  this.entryIdleTimeout=attrs.getEntryIdleTimeout();  this.customEntryIdleTimeout=attrs.getCustomEntryIdleTimeout();  this.entryTimeToLive=attrs.getEntryTimeToLive();  this.customEntryTimeToLive=attrs.getCustomEntryTimeToLive();  this.initialCapacity=attrs.getInitialCapacity();  this.keyConstraint=attrs.getKeyConstraint();  this.valueConstraint=attrs.getValueConstraint();  this.loadFactor=attrs.getLoadFactor();  this.regionIdleTimeout=attrs.getRegionIdleTimeout();  this.regionTimeToLive=attrs.getRegionTimeToLive();  this.scope=attrs.getScope();  this.statisticsEnabled=attrs.getStatisticsEnabled();  this.ignoreJTA=attrs.getIgnoreJTA();  this.concurrencyLevel=attrs.getConcurrencyLevel();  this.concurrencyChecksEnabled=attrs.getConcurrencyChecksEnabled();  this.earlyAck=attrs.getEarlyAck();  this.diskStoreName=attrs.getDiskStoreName();  if (this.diskStoreName == null) {    this.diskWriteAttributes=attrs.getDiskWriteAttributes();    this.diskDirs=attrs.getDiskDirs();    this.diskSizes=attrs.getDiskDirSizes();  } else {    this.diskWriteAttributes=null;    this.diskDirs=null;    this.diskSizes=null;  }  this.isDiskSynchronous=attrs.isDiskSynchronous();  this.indexMaintenanceSynchronous=attrs.getIndexMaintenanceSynchronous();  this.partitionAttributes=attrs.getPartitionAttributes();  this.membershipAttributes=attrs.getMembershipAttributes();  this.subscriptionAttributes=attrs.getSubscriptionAttributes();  this.dataPolicy=attrs.getDataPolicy();  this.evictionAttributes=(EvictionAttributesImpl)attrs.getEvictionAttributes();  this.id=null;  this.refid=null;  this.enableSubscriptionConflation=attrs.getEnableSubscriptionConflation();  this.publisher=attrs.getPublisher();  this.enableAsyncConflation=attrs.getEnableAsyncConflation();  this.poolName=attrs.getPoolName();  this.multicastEnabled=attrs.getMulticastEnabled();  this.cloningEnabled=attrs.getCloningEnabled();  this.compressor=attrs.getCompressor();  this.offHeap=attrs.getOffHeap();  if (attrs instanceof UserSpecifiedRegionAttributes) {    UserSpecifiedRegionAttributes nonDefault=(UserSpecifiedRegionAttributes)attrs;    this.requiresPoolName=nonDefault.requiresPoolName;    if (!defaults) {      initHasFields(nonDefault);    }  } else   if (!defaults) {    setAllHasFields(true);  }}  }
class C{  public VCardReader(Reader reader){  this(reader,VCardVersion.V2_1);}  }
class C{  public void unload(final String assetPath){  if (assetManager.isLoaded(assetPath) || scheduledAssets.contains(assetPath)) {    assetManager.unload(assetPath);  } else   if (eagerAssetManager.isLoaded(assetPath)) {    eagerAssetManager.unload(assetPath);  }}  }
class C{  public void addListener(final ITraceLoggerListener listener){  listeners.addListener(listener);}  }
class C{  public String toString(){  String s=this.getClass().getName() + " " + this.name+ "\n"+ this.n+ " // <- Total # rows\n";  for (int r=0; r < this.n; r++) {    for (int c=0; c <= r; c++) {      s=s + this.getDoubleValue(r,c) + " ";    }    s=s + "\n";  }  return s;}  }
class C{  public static byte[] readAll(InputStream inStr) throws IOException {  ByteArrayOutputStream buf=new ByteArrayOutputStream();  pipeAll(inStr,buf);  return buf.toByteArray();}  }
class C{  public AttachReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> segmentForHash(int h){  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  return (Segment<K,V>)UNSAFE.getObjectVolatile(segments,u);}  }
class C{  public void add(String name,String altName,int type,boolean takesArg){  add(new CmdLineOption(name,altName,type,takesArg));}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new ItalianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public boolean readBoolean(){  String s=readString();  if (s.equalsIgnoreCase("true"))   return true;  if (s.equalsIgnoreCase("false"))   return false;  if (s.equals("1"))   return true;  if (s.equals("0"))   return false;  throw new InputMismatchException();}  }
class C{  public void insertBefore(E toInsert,E point){  point.redirectJumpsToThisTo(toInsert);  innerChain.insertBefore(toInsert,point);}  }
class C{  public BestSumReadTrimmer(int qualityThreshold){  mQualityThreshold=qualityThreshold;}  }
class C{  private String fileToString(File file) throws IOException {  InputStream in=new BufferedInputStream(new FileInputStream(file),1024);  Reader reader;  in.mark(3);  int byte1=in.read();  int byte2=in.read();  if (byte1 == 0xFF && byte2 == 0xFE) {    reader=new InputStreamReader(in,"UTF-16LE");  } else   if (byte1 == 0xFF && byte2 == 0xFF) {    reader=new InputStreamReader(in,"UTF-16BE");  } else {    int byte3=in.read();    if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF) {      reader=new InputStreamReader(in,"UTF-8");    } else {      in.reset();      reader=new InputStreamReader(in);    }  }  StringWriter out=new StringWriter();  char[] buffer=new char[1024];  int count;  while ((count=reader.read(buffer)) != -1) {    out.write(buffer,0,count);  }  in.close();  return out.toString();}  }
class C{  private void updateWaveFileSize() throws IOException {  ByteBuffer buffer=getUnsignedIntegerBuffer(mFileChannel.size() - 8);  mFileChannel.write(buffer,4);  ByteBuffer buffer2=getUnsignedIntegerBuffer(mFileChannel.size() - 44);  mFileChannel.write(buffer2,40);}  }
class C{  public static Composite createComposite(Composite parent,Font font,int style,int columns,int hspan,int fill,int marginwidth,int marginheight){  Composite g=new Composite(parent,style);  GridLayout layout=new GridLayout(columns,false);  layout.marginWidth=marginwidth;  layout.marginHeight=marginheight;  g.setLayout(layout);  g.setFont(font);  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  public String toString(){  return chars;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public static void transformCriteria(Properties formProperties,InputStream xslIs,Result result) throws SAXException, IOException, ParserConfigurationException, TransformerException {  dbf.setNamespaceAware(true);  DocumentBuilder builder=dbf.newDocumentBuilder();  org.w3c.dom.Document xslDoc=builder.parse(xslIs);  DOMSource ds=new DOMSource(xslDoc);  Transformer transformer=null;synchronized (tFactory) {    transformer=tFactory.newTransformer(ds);  }  transformCriteria(formProperties,transformer,result);}  }
class C{  public void forEach(Consumer<Event> eventConsumer){  events.forEach(eventConsumer);}  }
class C{  public void testSetScaleSame(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=18;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.equals(aNumber));}  }
class C{  public synchronized void add(double x,double y){  while (mXY.get(x) != null) {    x+=getPadding();  }  mXY.put(x,y);  updateRange(x,y);}  }
class C{  private void processStorageSystemResponse(StorageSystem system,StorageArray array){  system.setFirmwareVersion(array.getControllerVersion());  String arrayIpAddress=null;  if (null != array.getName() && array.getName().contains(HDSConstants.AT_THE_RATE_SYMBOL)) {    arrayIpAddress=HDSUtils.extractIpAddress(array.getName(),2,HDSConstants.AT_THE_RATE_SYMBOL);  } else {    int length=array.getDescription().split(HDSConstants.SPACE_STR).length - 1;    arrayIpAddress=HDSUtils.extractIpAddress(array.getDescription(),length,HDSConstants.SPACE_STR);  }  system.setIpAddress(arrayIpAddress);  system.setLabel(array.getName());  system.setReachableStatus(Boolean.TRUE);  system.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());  system.setAutoTieringEnabled(Boolean.TRUE);  _dbClient.persistObject(system);}  }
class C{  private void drawWind(Canvas canvas,float y,float xOffset){  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);  float time=mLoadingAnimationTime;  if (mLastAnimationTime - mLoadingAnimationTime > 0) {    mInverseDirection=true;    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;  } else {    mNewWindSet=true;    mInverseDirection=false;  }  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;  float xEnd=x + mWindLineWidth;  canvas.drawLine(x,y,xEnd,y,mWindPaint);}  }
class C{  public final static byte[] writeInt(int v){  return writeInt(v,new byte[4],0);}  }
class C{  public static void printError(Throwable err,int code,Response response){  if (null == isDev) {    isDev=Blade.$().isDev();  }  try {    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    final PrintWriter writer=new PrintWriter(baos);    if (isDev) {      writer.println(String.format(HTML,err.getClass() + " : " + err.getMessage()));      writer.println();      err.printStackTrace(writer);      writer.println(END);    } else {      if (code == 404) {        String view404=ViewSettings.$().getView404();        if (StringKit.isNotBlank(view404)) {          response.render(view404);          return;        } else {          writer.write(err.getMessage());        }      } else {        String view500=ViewSettings.$().getView500();        if (StringKit.isNotBlank(view500)) {          response.render(view500);          return;        } else {          writer.write(Const.INTERNAL_ERROR);        }      }    }    writer.close();    response.status(code);    InputStream body=new ByteArrayInputStream(baos.toByteArray());    print(body,response.writer());  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static void validateDataSource(String configuration,DataSourceFixture dataSourceFixture,String name) throws Exception {  if (dataSourceFixture.url == null) {    XMLAssert.assertXpathNotExists("//data-source[@name='" + name + "']/@url",configuration);  } else {    XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.url,"//data-source[@name='" + name + "']/@url",configuration);  }  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.username,"//data-source[@name='" + name + "']/@username",configuration);  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.password,"//data-source[@name='" + name + "']/@password",configuration);  Properties driverProperties=dataSourceFixture.buildDataSource().getConnectionProperties();  if (driverProperties != null) {    Iterator<?> i=driverProperties.keySet().iterator();    while (i.hasNext()) {      String propertyName=i.next().toString();      XMLAssert.assertXpathEvaluatesTo(driverProperties.getProperty(propertyName),"//data-source[@name='" + name + "']/property[@name='"+ propertyName+ "']/@value",configuration);    }  }  XMLAssert.assertXpathEvaluatesTo("30","//data-source[@name='" + name + "']/@inactivity-timeout",configuration);}  }
class C{  public boolean createPS(File file){  try {    return createPS(new FileOutputStream(file));  } catch (  FileNotFoundException fnfe) {    log.log(Level.SEVERE,"(f) - " + fnfe.toString());  }catch (  Exception e) {    log.log(Level.SEVERE,"(f)",e);  }  return false;}  }
class C{  public SnmpNull(int t){  tag=t;}  }
class C{  private CRelocationNotifier(){}  }
class C{  public void finish() throws IOException {  if (this.finished) {    return;  }  this.finished=true;  this.archiveStream.close();}  }
class C{  public static boolean useScreenAutoBrightnessAdjustmentFeature(){  return true;}  }
class C{  public MonitorInteractionWriter(UimaMonitor monitor){  this.monitor=monitor;}  }
class C{  public final void sendMessageDelayed(int what,int arg1,int arg2,long delayMillis){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageDelayed(obtainMessage(what,arg1,arg2),delayMillis);}  }
class C{  private Comparators(){}  }
class C{  private void changePortalName(){  Portal portal=_portalList.getSelectedValue();  String oldName=null;  if (portal != null) {    oldName=portal.getName();  }  String name=_portalName.getText();  if (portal == null || name == null || name.trim().length() == 0) {    JOptionPane.showMessageDialog(this,Bundle.getMessage("changePortalName",Bundle.getMessage("buttonChangeName")),Bundle.getMessage("makePortal"),JOptionPane.INFORMATION_MESSAGE);    return;  }  String msg=portal.setName(name);  if (msg == null) {    _parent.changePortalName(oldName,name);    _portalList.dataChange();  } else {    JOptionPane.showMessageDialog(this,msg,Bundle.getMessage("makePortal"),JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  private static int[] escapePacket(int[] packet){  int escapeBytes=0;  for (int i=1; i < packet.length; i++) {    if (isSpecialByte(packet[i])) {      log.debug("escapeFrameData: packet byte requires escaping byte " + ByteUtils.toBase16(packet[i]));      escapeBytes++;    }  }  if (escapeBytes == 0) {    return packet;  } else {    log.debug("packet requires escaping");    int[] escapePacket=new int[packet.length + escapeBytes];    int pos=1;    escapePacket[0]=SpecialByte.START_BYTE.getValue();    for (int i=1; i < packet.length; i++) {      if (isSpecialByte(packet[i])) {        escapePacket[pos]=SpecialByte.ESCAPE.getValue();        escapePacket[++pos]=0x20 ^ packet[i];        log.debug("escapeFrameData: xor'd byte is 0x" + Integer.toHexString(escapePacket[pos]));      } else {        escapePacket[pos]=packet[i];      }      pos++;    }    return escapePacket;  }}  }
class C{  private String deleteEntry(String... id){  try {    maps.delete(makeUri(id));    return null;  } catch (  Throwable t) {    return t.getMessage();  }}  }
class C{  public boolean canMultithread(){  return targetInformation.getDebuggerOptions().canMultithread();}  }
class C{  public int next(){  final int node=_currentNode;  if (node != NULL) {    _currentNode=getNextAttributeIdentity(node);    return returnNode(makeNodeHandle(node));  }  return NULL;}  }
class C{  @Override public String toString(){  return "POInfo[" + getTableName() + ",AD_Table_ID="+ getAD_Table_ID()+ "]";}  }
class C{  public void handleAsUnexpected(){  Throwable c=getCause();  if (c == null) {    throw new InternalGemFireException(LocalizedStrings.ReplyException_UNEXPECTED_EXCEPTION_ON_MEMBER_0.toLocalizedString(getSender()),this);  }  if (c instanceof RuntimeException) {    fixUpRemoteEx(c);    throw (RuntimeException)c;  }  if (c instanceof Error) {    fixUpRemoteEx(c);    throw (Error)c;  }  if (c instanceof ClassNotFoundException) {    throw new SerializationException("Class not found",c);  }  throw new InternalGemFireException(LocalizedStrings.ReplyException_UNEXPECTED_EXCEPTION_ON_MEMBER_0.toLocalizedString(getSender()),c);}  }
class C{  private int countAboveThreshold(int[][] mat,double threshold){  int ret=0;  for (int i=0; i < mat.length; i++) {    int[] row=mat[i];    for (int j=0; j < row.length; j++) {      if (row[j] >= threshold) {        ret++;      }    }  }  return ret;}  }
class C{  protected int readBlock(){  blockSize=read();  int n=0;  if (blockSize > 0) {    try {      int count=0;      while (n < blockSize) {        count=in.read(block,n,blockSize - n);        if (count == -1)         break;        n+=count;      }    } catch (    IOException e) {    }    if (n < blockSize) {      status=STATUS_FORMAT_ERROR;    }  }  return n;}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){  Raptor.getInstance().getPreferences().setValue(service.getConnector().getShortName() + "-" + PreferenceKeys.SEEK_TABLE_QUADRANT,newQuadrant);}  }
class C{  @Override protected void initFinish(){  super.initFinish();  System.out.println("\nWelcome to the WEKA SimpleCLI\n\n" + "Enter commands in the textfield at the bottom of \n" + "the window. Use the up and down arrows to move \n"+ "through previous commands.\n"+ "Command completion for classnames and files is \n"+ "initiated with <Tab>. In order to distinguish \n"+ "between files and classnames, file names must \n"+ "be either absolute or start with '." + File.separator + "' or '~/'\n"+ "(the latter is a shortcut for the home directory).\n"+ "<Alt+BackSpace> is used for deleting the text\n"+ "in the commandline in chunks.\n");  try {    runCommand("help");  } catch (  Exception e) {  }  loadHistory();}  }
class C{  public Workflow.Method zoneExportAddInitiatorsMethod(URI exportGroupURI,Map<URI,List<URI>> exportMasksToInitiators){  return new Workflow.Method("zoneExportAddInitiators",exportGroupURI,exportMasksToInitiators);}  }
class C{  public static Offset topCenter(){  return new Offset(WorldWind.OFFSET_FRACTION,0.5,WorldWind.OFFSET_FRACTION,1.0);}  }
class C{  private void trackPlayerLeave(final Map<Integer,List<Integer>> teamMemberListMap,final int playerId){  if (teamMemberListMap.size() <= 1)   return;  final int team=usersByPlayerId[playerId].slot.teamId;  final List<Integer> memberList=teamMemberListMap.get(team);  memberList.remove(new Integer(playerId));  if (memberList.isEmpty()) {    teamMemberListMap.remove(team);    setTeamDeducedResult(team,Result.DEFEAT);    if (teamMemberListMap.size() == 1) {      final int winnerTeam=teamMemberListMap.keySet().iterator().next();      teamMemberListMap.remove(winnerTeam);      setTeamDeducedResult(winnerTeam,Result.VICTORY);    }  }}  }
class C{  public static String fullVersion(){  return version("full");}  }
class C{  public static String convert(final Object value){  return ConverterBean.getInstance().convert(value);}  }
class C{  public void test_getContent() throws IOException {  URLConnection conn=new URL("http://www.apache.org").openConnection();  Class[] classes={Foo.class,String.class};  ContentHandler handler=new ContentHandlerImpl();  ((ContentHandlerImpl)handler).setContent(new Foo());  Object content=handler.getContent(conn,classes);  assertEquals("Foo",((Foo)content).getFoo());  ((ContentHandlerImpl)handler).setContent(new FooSub());  content=handler.getContent(conn,classes);  assertEquals("FooSub",((Foo)content).getFoo());  Class[] classes2={FooSub.class,String.class};  ((ContentHandlerImpl)handler).setContent(new Foo());  content=handler.getContent(conn,classes2);  assertNull(content);}  }
class C{  private void populateCache(){  if (fContributionCache == null || fIdCache == null) {    fContributionCache=new HashMap(32);    fIdCache=new HashMap(32);    Map<String,String> contributions=CheRefactoringContributions.getRefactoringContributions();    contributions.forEach(null);  }}  }
class C{  public boolean retainEntries(TIntIntProcedure procedure){  boolean modified=false;  byte[] states=_states;  int[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public JCAnnotation Annotation(Attribute a){  return annotationBuilder.translate((Attribute.Compound)a);}  }
class C{  public T caseStatement(Statement object){  return null;}  }
class C{  default B addEffects(final FireworkMeta src){  final List<FireworkEffect> effects=src.getEffects();  if ((effects == null) || effects.isEmpty()) {    return this.getBuilder();  }  this.meta().addEffects(effects);  return this.getBuilder();}  }
class C{  public static boolean rectIntersects(final double aMinLat,final double aMaxLat,final double aMinLon,final double aMaxLon,final double bMinLat,final double bMaxLat,final double bMinLon,final double bMaxLon){  return !((aMaxLon < bMinLon || aMinLon > bMaxLon || aMaxLat < bMinLat || aMinLat > bMaxLat));}  }
class C{  public void addServiceName(String name){  if (name != null) {    this.serviceNameSet.add(name);  }}  }
class C{  public static void writeStats(TLCServer server,Date processStart,Date computationStart,Date computationEnd,Date processEnd){  File sFile;  File wFile;  final String path=System.getProperty(TLCStatistics.class.getName() + ".path");  if (path != null) {    sFile=new File(path + File.separator + "server.csv");    wFile=new File(path + File.separator + "worker.csv");  } else {    sFile=new File("server.csv");    wFile=new File("worker.csv");  }  try {    sFile.createNewFile();    wFile.createNewFile();    serverStats(server,sFile,processStart,computationStart,computationEnd,processEnd);    workerStats(server,wFile);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @SuppressWarnings("rawtypes") public int loadClasses(){  File directory;  FilenameFilter classFilter;  String[] classFiles;  directory=new File(PlugInDirectory);  classFilter=null;  if ((classFiles=directory.list(classFilter)) == null) {    System.err.println("Nothing to load.");    return -1;  }  for (int index=0; index < classFiles.length; ++index) {    try {      final URL url=new URL("jar:file:" + PlugInDirectory + "/"+ classFiles[index]+ "!/");      final URLClassLoader ucl=new URLClassLoader(new URL[]{url});      final JarFile jar=new JarFile(PlugInDirectory + "/" + classFiles[index]);      Enumeration enumeration;      String tmp="";      enumeration=jar.entries();      while (enumeration.hasMoreElements()) {        tmp=enumeration.nextElement().toString();        if (tmp.length() > 6 && tmp.substring(tmp.length() - 6).compareTo(".class") == 0) {          tmp=tmp.substring(0,tmp.length() - 6);          tmp=tmp.replaceAll("/",".");          System.out.println("class " + tmp);          ucl.loadClass(tmp);        }      }    } catch (    final Exception e) {      System.err.println("Unable to create instance of the class \"" + classFiles[index] + "\"");      System.err.println("Unable to create instance of the class \"" + e);      return -1;    }  }  return 0;}  }
class C{  public void testNullOrEmptyUserLibs() throws Exception {  assert parse(null).isEmpty();  assert parse("").isEmpty();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.307 -0500",hash_original_method="968A2928C62BC7FCD22DA53EF68519F2",hash_generated_method="A1337444E5DDD8166BCC5747E4B6D72D") private Object scanOnTimeout(Node node){  Object y;  for (int j=arena.length - 1; j >= 0; --j) {    Slot slot=arena[j];    if (slot != null) {      while ((y=slot.get()) != null) {        if (slot.compareAndSet(y,null)) {          Node you=(Node)y;          if (you.compareAndSet(null,node.item)) {            LockSupport.unpark(you.waiter);            return you.item;          }        }      }    }  }  return CANCEL;}  }
class C{  protected void sendFunctionGroup1(){  byte[] result=jmri.NmraPacket.function0Through4Packet(address.getNumber(),address.isLongAddress(),getF0(),getF1(),getF2(),getF3(),getF4());  EasyDccMessage m=new EasyDccMessage(4 + 3 * result.length);  int i=0;  m.setElement(i++,'S');  m.setElement(i++,' ');  m.setElement(i++,'0');  m.setElement(i++,'1');  for (int j=0; j < result.length; j++) {    m.setElement(i++,' ');    m.addIntAsTwoHex(result[j] & 0xFF,i);    i=i + 2;  }  tc.sendEasyDccMessage(m,null);}  }
class C{  public static ItemStack asBukkitCopy(net.minecraft.item.ItemStack original){  if (original == null) {    return new ItemStack(Material.AIR);  }  return asCraftMirror(copyNMSStack(original,original.stackSize));}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public static void storeGraphDocument(IFile file,GraphDocument graph) throws CoreException {  INSTANCE.insertGraphDocument(file,graph);}  }
class C{  public void copyDatabaseToSdCard(){  FileTools.fileCopy(getTempDatabasePath(),Environment.getExternalStorageDirectory() + "/music.db");}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(DIGITAL_SIGNATURE)) {    set(0,false);  } else   if (name.equalsIgnoreCase(NON_REPUDIATION)) {    set(1,false);  } else   if (name.equalsIgnoreCase(KEY_ENCIPHERMENT)) {    set(2,false);  } else   if (name.equalsIgnoreCase(DATA_ENCIPHERMENT)) {    set(3,false);  } else   if (name.equalsIgnoreCase(KEY_AGREEMENT)) {    set(4,false);  } else   if (name.equalsIgnoreCase(KEY_CERTSIGN)) {    set(5,false);  } else   if (name.equalsIgnoreCase(CRL_SIGN)) {    set(6,false);  } else   if (name.equalsIgnoreCase(ENCIPHER_ONLY)) {    set(7,false);  } else   if (name.equalsIgnoreCase(DECIPHER_ONLY)) {    set(8,false);  } else {    throw new IOException("Attribute name not recognized by" + " CertAttrSet:KeyUsage.");  }  encodeThis();}  }
class C{  public Bundle toBundle(){  Bundle b=new Bundle();  b.putString(EXTRAS_FROM_ADDRESS,fromAddress);  b.putString(EXTRAS_MESSAGE_BODY,messageBody);  b.putLong(EXTRAS_TIMESTAMP,timestamp);  b.putString(EXTRAS_CONTACT_ID,contactId);  b.putString(EXTRAS_CONTACT_LOOKUP,contactLookupKey);  b.putString(EXTRAS_CONTACT_NAME,contactName);  b.putInt(EXTRAS_UNREAD_COUNT,unreadCount);  b.putLong(EXTRAS_THREAD_ID,threadId);  b.putInt(EXTRAS_MESSAGE_TYPE,messageType);  b.putBoolean(EXTRAS_NOTIFY,notify);  b.putInt(EXTRAS_REMINDER_COUNT,reminderCount);  b.putLong(EXTRAS_MESSAGE_ID,messageId);  b.putBoolean(EXTRAS_EMAIL_GATEWAY,fromEmailGateway);  return b;}  }
class C{  @Override public PLRotation clone(){  return new PLRotation(pitch,yaw,roll);}  }
class C{  public StorageException(Throwable cause){  super(cause);}  }
class C{  public ObjectIdentifier(String strOid){  this.oid=toIntArray(strOid);  this.soid=strOid;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public HashSet<CollectData> selectCollects(int regency,int cid){  HashSet<SignedObject> c=collects.get(regency);  if (c == null)   return null;  return normalizeCollects(getSignedCollects(c),cid,regency);}  }
class C{  public PreviewInfoJson validateConfigs(String pipelineName,String rev,Long timeout) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling validateConfigs");  }  String path="/v1/pipeline/{pipelineName}/validate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  queryParams.addAll(apiClient.parameterToPairs("","timeout",timeout));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PreviewInfoJson>(){  };  return apiClient.invokeAPI(path,"GET",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public Entry(int address,Disposition disposition,RegisterSpec spec){  if (address < 0) {    throw new IllegalArgumentException("address < 0");  }  if (disposition == null) {    throw new NullPointerException("disposition == null");  }  try {    if (spec.getLocalItem() == null) {      throw new NullPointerException("spec.getLocalItem() == null");    }  } catch (  NullPointerException ex) {    throw new NullPointerException("spec == null");  }  this.address=address;  this.disposition=disposition;  this.spec=spec;  this.type=CstType.intern(spec.getType());}  }
class C{  public void clear(){  objects.clear();}  }
class C{  public AsyncResult WriteAsync(WriteRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  private static void applyUidSecurityPolicy(Arguments args,Credentials peer,String peerSecurityContext) throws ZygoteSecurityException {  int peerUid=peer.getUid();  if (peerUid == 0) {  } else   if (peerUid == Process.SYSTEM_UID) {    String factoryTest=SystemProperties.get("ro.factorytest");    boolean uidRestricted;    uidRestricted=!(factoryTest.equals("1") || factoryTest.equals("2"));    if (uidRestricted && args.uidSpecified && (args.uid < Process.SYSTEM_UID)) {      throw new ZygoteSecurityException("System UID may not launch process with UID < " + Process.SYSTEM_UID);    }  } else {    if (args.uidSpecified || args.gidSpecified || args.gids != null) {      throw new ZygoteSecurityException("App UIDs may not specify uid's or gid's");    }  }  if (args.uidSpecified || args.gidSpecified || args.gids != null) {    boolean allowed=SELinux.checkSELinuxAccess(peerSecurityContext,peerSecurityContext,"zygote","specifyids");    if (!allowed) {      throw new ZygoteSecurityException("Peer may not specify uid's or gid's");    }  }  if (!args.uidSpecified) {    args.uid=peer.getUid();    args.uidSpecified=true;  }  if (!args.gidSpecified) {    args.gid=peer.getGid();    args.gidSpecified=true;  }}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  public static EmptyMessage newRST(Message message){  EmptyMessage rst=new EmptyMessage(Type.RST);  rst.setDestination(message.getSource());  rst.setDestinationPort(message.getSourcePort());  rst.setMID(message.getMID());  return rst;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof IMultiPoint) {    IMultiPoint imp=(IMultiPoint)o;    if (imp.dimensionality() != dimensionality)     return false;    if (imp instanceof Hyperpoint) {      Hyperpoint other=(Hyperpoint)imp;      for (int i=1; i <= dimensionality; i++) {        if (!FloatingPoint.same(other.values[i - 1],values[i - 1])) {          return false;        }      }    } else {      for (int i=1; i <= dimensionality; i++) {        if (!FloatingPoint.same(imp.getCoordinate(i),values[i - 1])) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return AA;case 2:  return AB;default :return null;}}  }
class C{  static public void addOperator(UniqueString name,Operator op){  DefinitionTable.put(name,op);}  }
class C{  public static int hashSearch(final long[] hashTable,final int lgArrLongs,final long hash){  if (hash == 0) {    throw new SketchesArgumentException("Given hash cannot be zero: " + hash);  }  final int arrayMask=(1 << lgArrLongs) - 1;  final int stride=getStride(hash,lgArrLongs);  int curProbe=(int)(hash & arrayMask);  while (hashTable[curProbe] != 0) {    if (hashTable[curProbe] == hash)     return curProbe;    curProbe=(curProbe + stride) & arrayMask;  }  return -1;}  }
class C{  public boolean retainAll(Collection collection){  boolean changed=false;  int size=size();  Iterator it=iterator();  while (it.hasNext()) {    Object object=it.next();    if (!collection.contains(object)) {      it.remove();      changed=true;    }  }  return changed;}  }
class C{  protected void readZ(ByteBuffer buffer){  double[] zArray=ShapefileUtils.readDoubleArray(buffer,1);  this.z=zArray[0];}  }
class C{  protected void drawHorizontalGrid(){  Path p=new Path();  for (int i=0; i < mYLegend.length; i++) {    log("drawHorizontalGrid -- the index is " + i + " mYLegend["+ i+ "] is "+ mYLegend[i]);    p.reset();    p.moveTo(0,mYLegend[i]);    p.lineTo(mDeltaX,mYLegend[i]);    transformPath(p);    mDrawCanvas.drawPath(p,mGridPaint);  }  if (!isDrawOutline) {    mDrawCanvas.drawLine(mOffsetLeft,getHeight() - mOffsetBottom,getWidth() - mOffsetRight,getHeight() - mOffsetBottom,mGridPaint);  }}  }
class C{  public static boolean isSparkVersionSupported(String sparkVersion){  return compareVersion(sparkVersion,MLContext.SYSTEMML_MINIMUM_SPARK_VERSION) >= 0;}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLengthList(null,SVG_X_ATTRIBUTE,getDefaultXValue(),true,SVGOMAnimatedLength.HORIZONTAL_LENGTH);  y=createLiveAnimatedLengthList(null,SVG_Y_ATTRIBUTE,getDefaultYValue(),true,SVGOMAnimatedLength.VERTICAL_LENGTH);  dx=createLiveAnimatedLengthList(null,SVG_DX_ATTRIBUTE,"",true,SVGOMAnimatedLength.HORIZONTAL_LENGTH);  dy=createLiveAnimatedLengthList(null,SVG_DY_ATTRIBUTE,"",true,SVGOMAnimatedLength.VERTICAL_LENGTH);  rotate=createLiveAnimatedNumberList(null,SVG_ROTATE_ATTRIBUTE,"",true);}  }
class C{  static AxesWalker loadOneWalker(WalkingIterator lpi,Compiler compiler,int stepOpCodePos) throws javax.xml.transform.TransformerException {  AxesWalker firstWalker=null;  int stepType=compiler.getOp(stepOpCodePos);  if (stepType != OpCodes.ENDOP) {    firstWalker=createDefaultWalker(compiler,stepType,lpi,0);    firstWalker.init(compiler,stepOpCodePos,stepType);  }  return firstWalker;}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public Configuration buildForServer(String hostname,int port){  return new Builder(this).addServer(hostname,port).buildConfiguration();}  }
class C{  public static StorageArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageArray object=new StorageArray();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageArray".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageArray)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list2=new java.util.ArrayList();    java.util.ArrayList list6=new java.util.ArrayList();    java.util.ArrayList list7=new java.util.ArrayList();    java.util.ArrayList list8=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alternateName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list2.add(null);        reader.next();      } else {        list2.add(reader.getElementText());      }      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alternateName").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list2.add(null);              reader.next();            } else {              list2.add(reader.getElementText());            }          } else {            loopDone2=true;          }        }      }      object.setAlternateName((java.lang.String[])list2.toArray(new java.lang.String[list2.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","arrayName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setArrayName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","firmware").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFirmware(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","modelId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setModelId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedBlock").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list6.add(null);        reader.next();      } else {        list6.add(reader.getElementText());      }      boolean loopDone6=false;      while (!loopDone6) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone6=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedBlock").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list6.add(null);              reader.next();            } else {              list6.add(reader.getElementText());            }          } else {            loopDone6=true;          }        }      }      object.setSupportedBlock((java.lang.String[])list6.toArray(new java.lang.String[list6.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedFileSystem").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list7.add(null);        reader.next();      } else {        list7.add(reader.getElementText());      }      boolean loopDone7=false;      while (!loopDone7) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone7=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedFileSystem").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list7.add(null);              reader.next();            } else {              list7.add(reader.getElementText());            }          } else {            loopDone7=true;          }        }      }      object.setSupportedFileSystem((java.lang.String[])list7.toArray(new java.lang.String[list7.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedProfile").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list8.add(null);        reader.next();      } else {        list8.add(reader.getElementText());      }      boolean loopDone8=false;      while (!loopDone8) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone8=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedProfile").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list8.add(null);              reader.next();            } else {              list8.add(reader.getElementText());            }          } else {            loopDone8=true;          }        }      }      object.setSupportedProfile((java.lang.String[])list8.toArray(new java.lang.String[list8.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","vendorId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setVendorId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  s=getExifWriterStream(exifOutFileName);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();  s.close();}  }
class C{  public void add(Matcher matcher){  matchers.add(matcher);}  }
class C{  public void createWeekScenarioBug10265_UpgradeAndParChange() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-23 00:00:00"));  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS2,3,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"BUG10265_UPG_PARCHG",serviceDetails,basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-25 00:00:00"),"MAX_FOLDER_NUMBER","3");  VOServiceDetails perUnitService=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG_SERVICE2",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS3,2,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,perUnitService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.copyParametersAndUpgradeSubscription(basicSetup.getCustomerAdminKey(),subDetails,perUnitService);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-01 00:00:00"),"MAX_FOLDER_NUMBER","5");  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-01 07:00:00"),"MAX_FOLDER_NUMBER","7");  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-02 12:00:00"),"MAX_FOLDER_NUMBER","4");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-03 07:00:00"));  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG",upgradedSubDetails);}  }
class C{  public static ParameterType makeFileParameterType(ParameterHandler parameterHandler,String parameterName,String fileExtension,PortProvider portProvider){  final ParameterTypeFile fileParam=new ParameterTypeFile(parameterName,"Name of the file to write the data in.",true,new String[]{fileExtension});  fileParam.setExpert(false);  fileParam.registerDependencyCondition(new PortConnectedCondition(parameterHandler,portProvider,true,false));  return fileParam;}  }
class C{  public List<String> toNameValueBlock(){  Set<String> names=new HashSet<String>();  List<String> result=new ArrayList<String>();  for (int i=0; i < namesAndValues.size(); i+=2) {    String name=namesAndValues.get(i).toLowerCase(Locale.US);    String value=namesAndValues.get(i + 1);    if (name.equals("connection") || name.equals("host") || name.equals("keep-alive")|| name.equals("proxy-connection")|| name.equals("transfer-encoding")) {      continue;    }    if (names.add(name)) {      result.add(name);      result.add(value);      continue;    }    for (int j=0; j < result.size(); j+=2) {      if (name.equals(result.get(j))) {        result.set(j + 1,result.get(j + 1) + "\0" + value);        break;      }    }  }  return result;}  }
class C{  public CRemoveAllAction(final CCriteriumTree tree){  super("Remove All");  m_tree=tree;}  }
class C{  public void assertSameValuesAnyOrder(int[] expected,int[] actual){  assertEquals("length",expected.length,actual.length);  final int len=expected.length;  Set values=new HashSet();  for (int i=0; i < len; i++) {    values.add(Integer.valueOf(expected[i]));  }  if (values.size() != expected.length) {    throw new AssertionError("duplicate values in 'expected'.");  }  for (int i=0; i < len; i++) {    int value=actual[i];    if (!values.remove(Integer.valueOf(value))) {      fail("actual[" + i + "]="+ value+ ", but that value is not in expected[].");    }  }}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  public CActionSelect(final ZyGraph graph,final TraceList list){  super("Select");  m_graph=Preconditions.checkNotNull(graph,"IE01287: Graph argument can not be null");  m_list=Preconditions.checkNotNull(list,"IE01288: Trace list argument can't be null");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.804 -0400",hash_original_method="04EA67B3A82204BBE7F5B271F46DC797",hash_generated_method="EEC7700D81C7AA480D18016D7AD00B66") @Override public boolean accept(File file){  return file.canRead();}  }
class C{  @Override public void beginHandshake() throws SSLException {  if (engine_was_closed) {    throw new SSLException("Engine has already been closed.");  }  if (!peer_mode_was_set) {    throw new IllegalStateException("Client/Server mode was not set");  }  if (!handshake_started) {    handshake_started=true;    if (getUseClientMode()) {      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      handshakeProtocol=new ServerHandshakeImpl(this);    }    appData=new SSLEngineAppData();    alertProtocol=new AlertProtocol();    recProtIS=new SSLBufferedInput();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,recProtIS,appData);  }  handshakeProtocol.start();}  }
class C{  public X509Principal(String dirName){  super(dirName);}  }
class C{  private void buildTabs(){  SearchTab searchTab=new SearchTab();  TransfersTab transfersTab=new TransfersTab(getBTDownloadMediator());  LibraryTab libraryTab=new LibraryTab(getLibraryMediator());  TABS.put(Tabs.SEARCH,searchTab);  TABS.put(Tabs.TRANSFERS,transfersTab);  TABS.put(Tabs.LIBRARY,libraryTab);  SearchTransfersTab searchTransfers=new SearchTransfersTab(searchTab,transfersTab);  TABS.put(Tabs.SEARCH_TRANSFERS,searchTransfers);  TABBED_PANE.setPreferredSize(new Dimension(10000,10000));  addTabs(UI_SEARCH_TRANSFERS_SPLIT_VIEW.getValue());  TABBED_PANE.setRequestFocusEnabled(false);}  }
class C{  public Composite basicGetOwner(){  if (eContainerFeatureID() != DomPackage.CONTENT_NODE__OWNER)   return null;  return (Composite)eInternalContainer();}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public int read(byte[] bytes) throws IOException {  return read(bytes,0,bytes.length);}  }
class C{  public double computeAverageLocal(int states[][],int destCol,int[] sourcesAbsolute){  initialise();  addObservations(states,destCol,sourcesAbsolute);  return computeAverageLocalOfObservations();}  }
class C{  public long[] array(int index){  return buffers[index];}  }
class C{  public static void badConversion(Field destinationField,Class<?> destinationClass,Field sourceField,Class<?> sourceClass,String plus){  throw new UndefinedMappingException(MSG.INSTANCE.message(undefinedMappingException,destinationField.getName(),destinationClass.getSimpleName(),sourceField.getName(),sourceClass.getSimpleName()) + ". More information: " + plus);}  }
class C{  public char first(){  if (max > off) {    return chars[pos=off];  }  return DONE;}  }
class C{  public void followRedirects(boolean followRedirects){  this.followRedirects=followRedirects;}  }
class C{  public void testIsOverflow(){  assertFalse(CoderResult.UNDERFLOW.isOverflow());  assertTrue(CoderResult.OVERFLOW.isOverflow());  assertFalse(CoderResult.malformedForLength(1).isOverflow());  assertFalse(CoderResult.unmappableForLength(1).isOverflow());}  }
class C{  public PropertyListWriter(AppBundleProperties bundleProperties){  this.bundleProperties=bundleProperties;}  }
class C{  private void disableProximityBrowsing(){  if (hasAnyHiddenNodes()) {    unhideEverything();    deleteProximityBrowsingNodes();    updateViews();  }}  }
class C{  public void addURL(int index,URL url){  if (containsURL(url))   return;  super.addURL(url);  URL[] newURLs=new URL[_urls.length + 1];  for (int i=0; i < index; i++) {    newURLs[i]=_urls[i];  }  newURLs[index]=url;  for (int i=index + 1; i < newURLs.length; i++) {    newURLs[i]=_urls[i - 1];  }  _urls=newURLs;}  }
class C{  public static Map<String,Object> updateProductionRun(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  if (!UtilValidate.isEmpty(productionRunId)) {    ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);    if (productionRun.exist()) {      if (!"PRUN_CREATED".equals(productionRun.getGenericValue().getString("currentStatusId")) && !"PRUN_SCHEDULED".equals(productionRun.getGenericValue().getString("currentStatusId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunPrinted",locale));      }      BigDecimal quantity=(BigDecimal)context.get("quantity");      if (quantity != null && quantity.compareTo(productionRun.getQuantity()) != 0) {        productionRun.setQuantity(quantity);      }      Timestamp estimatedStartDate=(Timestamp)context.get("estimatedStartDate");      if (estimatedStartDate != null && !estimatedStartDate.equals(productionRun.getEstimatedStartDate())) {        productionRun.setEstimatedStartDate(estimatedStartDate);      }      String workEffortName=(String)context.get("workEffortName");      if (workEffortName != null) {        productionRun.setProductionRunName(workEffortName);      }      String description=(String)context.get("description");      if (description != null) {        productionRun.setDescription(description);      }      String facilityId=(String)context.get("facilityId");      if (facilityId != null) {        productionRun.getGenericValue().set("facilityId",facilityId);      }      boolean updateEstimatedOrderDates=productionRun.isUpdateCompletionDate();      if (productionRun.store()) {        if (updateEstimatedOrderDates && "PRUN_SCHEDULED".equals(productionRun.getGenericValue().getString("currentStatusId"))) {          try {            dispatcher.runSync("setEstimatedDeliveryDates",UtilMisc.toMap("userLogin",userLogin));          } catch (          GenericServiceException e) {            Debug.logError(e,"Problem calling the setEstimatedDeliveryDates service",module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));          }        }        return ServiceUtil.returnSuccess();      } else {        Debug.logError("productionRun.store() fail for productionRunId =" + productionRunId,module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));      }    }    Debug.logError("no productionRun for productionRunId =" + productionRunId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));  }  Debug.logError("service updateProductionRun call with productionRunId empty",module);  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotUpdated",locale));}  }
class C{  public static ContainerDatacenter createDatacenter(String name,Class<? extends ContainerDatacenter> datacenterClass,List<ContainerHost> hostList,ContainerVmAllocationPolicy vmAllocationPolicy,ContainerAllocationPolicy containerAllocationPolicy,String experimentName,double schedulingInterval,String logAddress,double VMStartupDelay,double ContainerStartupDelay) throws Exception {  String arch="x86";  String os="Linux";  String vmm="Xen";  double time_zone=10.0D;  double cost=3.0D;  double costPerMem=0.05D;  double costPerStorage=0.001D;  double costPerBw=0.0D;  ContainerDatacenterCharacteristics characteristics=new ContainerDatacenterCharacteristics(arch,os,vmm,hostList,time_zone,cost,costPerMem,costPerStorage,costPerBw);  ContainerDatacenter datacenter=new PowerContainerDatacenterCM(name,characteristics,vmAllocationPolicy,containerAllocationPolicy,new LinkedList<Storage>(),schedulingInterval,experimentName,logAddress,VMStartupDelay,ContainerStartupDelay);  return datacenter;}  }
class C{  public GeoBoundingBoxQueryBuilder type(String type){  this.type=type;  return this;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public Wine createPrefix(String version,String distribution) throws CancelException {  return this.createPrefix(version,distribution,DEFAULT_ARCHITECTURE.name());}  }
class C{  protected Messages(){}  }
class C{  private void deleteFile(){  if (sLogger.isActivated()) {    sLogger.debug("Delete incomplete received image");  }  try {    getContent().deleteFile();  } catch (  IOException e) {    if (sLogger.isActivated()) {      sLogger.error("Can't delete received image",e);    }  }}  }
class C{  public NotificationChain basicSetAnnotationList(ExpressionAnnotationList newAnnotationList,NotificationChain msgs){  ExpressionAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addRaster(float lt,float ln,String url,LinkProperties properties) throws IOException {  LinkRaster.write(lt,ln,url,properties,link.dos);}  }
class C{  public void enterLock(long id) throws InterruptedException {  lock(id).lockInterruptibly();}  }
class C{  private void refreshState(){  updateSummaries();  rebuildProfileList();  rebuildCreditCardList();}  }
class C{  public HGHandle add(Object atom,HGHandle type,int flags){  if (eventManager.dispatch(this,new HGAtomProposeEvent(atom,type,flags)) == HGListener.Result.cancel)   return null;  HGHandle result;  if (atom instanceof HGLink) {    HGLink link=(HGLink)atom;    Object value=link;    if (link instanceof HGValueLink)     value=((HGValueLink)link).getValue();    result=addLink(value,type,link,(byte)flags);  } else   result=addNode(atom,type,(byte)flags);  if (atom instanceof HGGraphHolder)   ((HGGraphHolder)atom).setHyperGraph(this);  if (atom instanceof HGHandleHolder)   ((HGHandleHolder)atom).setAtomHandle(result);  eventManager.dispatch(this,new HGAtomAddedEvent(result,"HyperGraph.add"));  return result;}  }
class C{  public static void main(String[] args) throws Exception {  final int procs=intArg(args,"procs",Runtime.getRuntime().availableProcessors());  final int forkPolicy=policyArg(args,"forkPolicy",DYNAMIC);  ForkJoinPool g=new ForkJoinPool(procs);  System.out.println("Integrating from " + start + " to "+ end+ " forkPolicy = "+ forkPolicy);  long lastTime=System.nanoTime();  for (int reps=intArg(args,"reps",10); reps > 0; reps--) {    double a;    if (forkPolicy == SERIAL)     a=SQuad.computeArea(g,start,end); else     if (forkPolicy == FORK)     a=FQuad.computeArea(g,start,end); else     a=DQuad.computeArea(g,start,end);    long now=System.nanoTime();    double s=(double)(now - lastTime) / NPS;    lastTime=now;    System.out.printf("Calls/sec: %12d",(long)(calls / s));    System.out.printf(" Time: %7.3f",s);    System.out.printf(" Area: %12.1f",a);    System.out.println();  }  System.out.println(g);  g.shutdown();}  }
class C{  protected void writeLocalFileHeader(ZipArchiveEntry ze,byte[] originalData) throws IOException {  boolean encodable=zipEncoding.canEncode(ze.getName());  ByteBuffer name=getName(ze);  if (createUnicodeExtraFields != UnicodeExtraFieldPolicy.NEVER) {    addUnicodeExtraFields(ze,encodable,name);  }  offsets.put(ze,Long.valueOf(written));  writeOut(LFH_SIG);  written+=WORD;  final int zipMethod=ze.getMethod();  final byte[] verAndShit=getVersionNeededToExtractAndGeneralPurposeBits(zipMethod,!encodable && fallbackToUTF8,hasZip64Extra(ze));  writeOut(verAndShit);  written+=WORD;  writeOut(ZipShort.getBytes(zipMethod));  written+=SHORT;  writeOut(ZipUtil.toDosTime(ze.getTime()));  written+=WORD;  entry.localDataStart=written;  if (zipMethod == DEFLATED || raf != null) {    writeOut(LZERO);    if (hasZip64Extra(entry.entry)) {      writeOut(ZipLong.ZIP64_MAGIC.getBytes());      writeOut(ZipLong.ZIP64_MAGIC.getBytes());    } else {      writeOut(LZERO);      writeOut(LZERO);    }  } else {    writeOut(ZipLong.getBytes(ze.getCrc()));    byte[] size=ZipLong.ZIP64_MAGIC.getBytes();    if (!hasZip64Extra(ze)) {      size=ZipLong.getBytes(ze.getSize());    }    writeOut(size);    writeOut(size);  }  written+=12;  int length=name.limit();  if (originalData != null) {    length+=originalData.length;  }  writeOut(ZipShort.getBytes(length));  written+=SHORT;  byte[] extra=ze.getLocalFileDataExtra();  writeOut(ZipShort.getBytes(extra.length));  written+=SHORT;  writeOut(name.array(),name.arrayOffset(),name.limit() - name.position());  written+=name.limit();  writeOut(extra);  written+=extra.length;  entry.dataStart=written;}  }
class C{  @Override public void accept(Partition<T,K,LinkedList<T>> partition,T tuple){  submitNextTuple(partition);}  }
class C{  public static String toHexString(byte[] b){  StringBuffer sb=new StringBuffer();  for (int i=0; i < b.length; i++) {    sb.append(HexUtil.HEX_CHARS.charAt(b[i] >>> 4 & 0x0F));    sb.append(HexUtil.HEX_CHARS.charAt(b[i] & 0x0F));  }  return sb.toString();}  }
class C{  protected void openVisibleInstances(Instances insts) throws Exception {  PlotData2D tempd=new PlotData2D(insts);  tempd.setPlotName(insts.relationName());  tempd.addInstanceNumberAttribute();  m_plot.m_plot2D.removeAllPlots();  addPlot(tempd);  Component parent=getParent();  while (parent != null) {    if (parent instanceof JFrame) {      ((JFrame)parent).setTitle("Weka Classifier Visualize: " + insts.relationName() + " (display only)");      break;    } else {      parent=parent.getParent();    }  }}  }
class C{  public void addCompatibleContextType(String contextTypeId){  if (fCompatibleContextTypeIds == null)   fCompatibleContextTypeIds=new HashSet<String>();  fCompatibleContextTypeIds.add(contextTypeId);}  }
class C{  public static boolean processAuthHeader(OkAuthenticator authenticator,int responseCode,RawHeaders responseHeaders,RawHeaders successorRequestHeaders,Proxy proxy,URL url) throws IOException {  String responseField;  String requestField;  if (responseCode == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";    requestField="Authorization";  } else   if (responseCode == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";    requestField="Proxy-Authorization";  } else {    throw new IllegalArgumentException();  }  List<Challenge> challenges=parseChallenges(responseHeaders,responseField);  if (challenges.isEmpty()) {    return false;  }  Credential credential=responseHeaders.getResponseCode() == HTTP_PROXY_AUTH ? authenticator.authenticateProxy(proxy,url,challenges) : authenticator.authenticate(proxy,url,challenges);  if (credential == null) {    return false;  }  successorRequestHeaders.set(requestField,credential.getHeaderValue());  return true;}  }
class C{  public static boolean writeFile(String filePath,String content){  return writeFile(filePath,content,false);}  }
class C{  public long size(){  return left.length() + right.length();}  }
class C{  public boolean isModal(){  return mModal;}  }
class C{  protected void printComment(Writer out,Comment comment) throws IOException {  out.write("<!--");  out.write(comment.getText());  out.write("-->");}  }
class C{  protected boolean isTcpNoDelayChanged(){  return true;}  }
class C{  @Override protected void discoverHost(Host host,HostStateChange changes){  VCenterAPI api=createVCenterAPI(host);  try {    List<HostSystem> hostSystems=api.listAllHostSystems();    if (null != hostSystems && !hostSystems.isEmpty()) {      HostSystem hostSystem=hostSystems.get(0);      Host targetHost=null;      HostHardwareInfo hw=hostSystem.getHardware();      String uuid=null;      if (hw != null && hw.systemInfo != null && StringUtils.isNotBlank(hw.systemInfo.uuid)) {        uuid=hw.systemInfo.uuid;        if (KNOWN_DUPLICATE_UUID.equalsIgnoreCase(uuid)) {          info("Host " + hostSystem.getName() + " contains a known non-unique UUID");        }        targetHost=findHostByUuid(uuid);        checkDuplicateHost(host,targetHost);      }      if (targetHost == null) {        targetHost=host;      }      targetHost.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());      targetHost.setDiscoverable(true);      if (targetHost.getId() == null) {        targetHost.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      }      targetHost.setOsVersion(hostSystem.getConfig().getProduct().getVersion());      if (null != uuid) {        targetHost.setUuid(uuid);        save(targetHost);      }      DiscoveryStatusUtils.markAsProcessing(getModelClient(),targetHost);      try {        discoverHost(hostSystem,targetHost,changes);        DiscoveryStatusUtils.markAsSucceeded(getModelClient(),targetHost);      } catch (      RuntimeException e) {        warn(e,"Problem discovering host %s",targetHost.getLabel());        DiscoveryStatusUtils.markAsFailed(getModelClient(),targetHost,e.getMessage(),e);      }    }  }  finally {    api.logout();  }}  }
class C{  public AssertionValidationException(String message,ReasonEnum reason,Throwable cause){  super(message,cause);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public void putNull(){  putNull(NullTag);}  }
class C{  @HLEFunction(nid=0x68DA9E36,version=150,checkInsideInterrupt=true,checkDispatchThreadEnabled=true) public int sceKernelDelayThreadCB(int micros){  hleKernelDelayThread(micros,true);  return 0;}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.544 -0500",hash_original_method="42BD69B2114459AD691B3AEBDAE73546",hash_generated_method="C285A4D23EAB85D82915D70E1F66F84C") public Message sendMessageSynchronously(int what){  Message msg=Message.obtain();  msg.what=what;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public void openPopupMenu(MenuBarItem item){  if (lockLayer == null) {    int top=getAbsoluteTop() + getOffsetHeight();    lockLayer=new MenuLockLayer(this,top);  }  item.openPopupMenu(lockLayer);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  @Override public BigdataBNode rdfId(){  return sid;}  }
class C{  public JythonScript(){  super();}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  public List findUsuarios(String tipoUsuario,String searchTokenNombre,String searchTokenApellidos){  return usuarioDBEntity.findUsuarios(tipoUsuario,searchTokenNombre,searchTokenApellidos);}  }
class C{  public void removeComponent(Component component){synchronized (components) {    components.remove(component.getComponentID());  }  component.free();}  }
class C{  public synchronized void addTargets(List<NotificationTarget> targets) throws IllegalArgumentException {  if (targets == null)   throw new IllegalArgumentException("Target list is null");  notificationTargets.addAll(targets);}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data[i++]];    i=nextI(data,i,finish);    b2=decodingTable[data[i++]];    i=nextI(data,i,finish);    b3=decodingTable[data[i++]];    i=nextI(data,i,finish);    b4=decodingTable[data[i++]];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;    i=nextI(data,i,finish);  }  outLen+=decodeLastBlock(out,(char)data[end - 4],(char)data[end - 3],(char)data[end - 2],(char)data[end - 1]);  return outLen;}  }
class C{  private StageCleaner(){}  }
class C{  @Override protected Object recoverFromMismatchedToken(@SuppressWarnings("hiding") IntStream input,int ttype,BitSet follow) throws RecognitionException {  RecognitionException e=null;  if (mismatchIsUnwantedToken(input,ttype)) {    e=new UnwantedTokenException(ttype,input);    beginResync();    input.consume();    endResync();    reportError(e);    Object matchedSymbol=getCurrentInputSymbol(input);    input.consume();    return matchedSymbol;  }  if (mismatchIsMissingToken(input,follow)) {    Object inserted=getMissingSymbol(input,e,ttype,follow);    e=new MissingTokenException(ttype,input,inserted);    reportError(e);    return null;  }  e=new MismatchedTokenException(ttype,input);  throw e;}  }
class C{  private int minRegLevel(int a,int b){  return numberSharedLevels(pf[a].hilbert,pf[b].hilbert);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesUpdater == null) {    throw new NullPointerException();  }}  }
class C{  public byte[] toByteArray(){  return Arrays.copyOf(buf,cnt);}  }
class C{  @SuppressWarnings("unchecked") private Object readResultAndUpdateEntry(PlatformContext ctx,MutableEntry entry,BinaryRawReaderEx reader){  byte state=reader.readByte();switch (state) {case ENTRY_STATE_VALUE_SET:    entry.setValue(reader.readObjectDetached());  break;case ENTRY_STATE_REMOVED:entry.remove();break;case ENTRY_STATE_ERR_BINARY:Object nativeErr=reader.readObjectDetached();assert nativeErr != null;throw new EntryProcessorException("Failed to execute native cache entry processor.",ctx.createNativeException(nativeErr));case ENTRY_STATE_ERR_STRING:String errMsg=reader.readString();assert errMsg != null;throw new EntryProcessorException("Failed to execute native cache entry processor: " + errMsg);default :assert state == ENTRY_STATE_INTACT;}return reader.readObjectDetached();}  }
class C{  @Override public Object remove(Object key){  Entry tab[]=table;  if (key != null) {    int hash=System.identityHashCode(key);    int index=(hash & 0x7FFFFFFF) % tab.length;    for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {      if ((e.hash == hash) && key == e.key) {        modCount++;        if (prev != null)         prev.next=e.next; else         tab[index]=e.next;        count--;        Object oldValue=e.value;        e.value=null;        return oldValue;      }    }  } else {    for (Entry e=tab[0], prev=null; e != null; prev=e, e=e.next) {      if (e.key == null) {        modCount++;        if (prev != null)         prev.next=e.next; else         tab[0]=e.next;        count--;        Object oldValue=e.value;        e.value=null;        return oldValue;      }    }  }  return null;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(this.property).append(":");  for (  Part p : this.parts) {    sb.append(p.toString()).append(",");  }  sb.deleteCharAt(sb.length() - 1);  sb.append(";");  if (CSSMin.debugLogging) {    LOG.info(sb.toString());  }  return sb.toString();}  }
class C{  @Entrypoint static void arraycopy(Object src,int srcPos,Object dst,int dstPos,int len){  if (src == null || dst == null) {    RuntimeEntrypoints.raiseNullPointerException();  } else   if ((src instanceof char[]) && (dst instanceof char[])) {    RVMArray.arraycopy((char[])src,srcPos,(char[])dst,dstPos,len);  } else   if ((src instanceof Object[]) && (dst instanceof Object[])) {    RVMArray.arraycopy((Object[])src,srcPos,(Object[])dst,dstPos,len);  } else   if ((src instanceof byte[]) && (dst instanceof byte[])) {    RVMArray.arraycopy((byte[])src,srcPos,(byte[])dst,dstPos,len);  } else   if ((src instanceof boolean[]) && (dst instanceof boolean[])) {    RVMArray.arraycopy((boolean[])src,srcPos,(boolean[])dst,dstPos,len);  } else   if ((src instanceof short[]) && (dst instanceof short[])) {    RVMArray.arraycopy((short[])src,srcPos,(short[])dst,dstPos,len);  } else   if ((src instanceof int[]) && (dst instanceof int[])) {    RVMArray.arraycopy((int[])src,srcPos,(int[])dst,dstPos,len);  } else   if ((src instanceof long[]) && (dst instanceof long[])) {    RVMArray.arraycopy((long[])src,srcPos,(long[])dst,dstPos,len);  } else   if ((src instanceof float[]) && (dst instanceof float[])) {    RVMArray.arraycopy((float[])src,srcPos,(float[])dst,dstPos,len);  } else   if ((src instanceof double[]) && (dst instanceof double[])) {    RVMArray.arraycopy((double[])src,srcPos,(double[])dst,dstPos,len);  } else {    RuntimeEntrypoints.raiseArrayStoreException();  }}  }
class C{  int findMinGrandChild(int index){  int leftChildIndex=getLeftChildIndex(index);  if (leftChildIndex < 0) {    return -1;  }  return findMin(getLeftChildIndex(leftChildIndex),4);}  }
class C{  public PaymentDataException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public void moveToInsertRow() throws SQLException {  checkUpdatable();  rowUpdater.moveToInsertRow();}  }
class C{  private Map<UUID,int[]> assignReducers(Collection<HadoopInputSplit> splits,HadoopMapReducePlanTopology top,Mappers mappers,int reducerCnt){  Map<UUID,Integer> reducers=assignReducers0(top,splits,mappers,reducerCnt);  int cnt=0;  Map<UUID,int[]> res=new HashMap<>(reducers.size());  for (  Map.Entry<UUID,Integer> reducerEntry : reducers.entrySet()) {    int[] arr=new int[reducerEntry.getValue()];    for (int i=0; i < arr.length; i++)     arr[i]=cnt++;    res.put(reducerEntry.getKey(),arr);  }  assert reducerCnt == cnt : reducerCnt + " != " + cnt;  return res;}  }
class C{  public void removeJoinLeaveListener(JoinLeaveListener observer){synchronized (this.listenersLock) {    final Set oldListeners=this.listeners;    if (oldListeners.contains(observer)) {      final Set newListeners=new HashSet(oldListeners);      if (newListeners.remove(observer)) {        this.listeners=newListeners;      }    }  }}  }
class C{  void reset(final RWWriteCacheService cache){  if (m_addr == 0)   return;  for (int i=0; i < m_live.length; i++) {    final int startBit=i * 32;    if (m_saveCommit == null) {      final int chkbits=m_transients[i] & ~m_commit[i];      clearCacheBits(cache,startBit,chkbits);      m_live[i]=m_commit[i];      m_transients[i]=m_commit[i];    } else {      final int chkbits=m_commit[i] & ~m_saveCommit[i];      clearCacheBits(cache,startBit,chkbits);      m_live[i]|=m_isoFrees[i];      m_transients[i]=m_commit[i] | m_live[i];    }  }  if (m_saveCommit != null) {    m_isoFrees=new int[m_ints];  }}  }
class C{  public CellWrapper(Object cell){  this.cell=cell;}  }
class C{  @Dev public PlayerOwnsItemIncludingBankCondition(final String itemName,@Dev(defaultValue="1") final int amount){  this.itemName=checkNotNull(itemName);  this.amount=amount;}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,ObjectLink value){  this(ContentFormat.TLV,objectId,objectInstanceId,resourceId,value);}  }
class C{  public void addFace(Vertex[] verts,Vertex[] norms,UV[] uv,Transform trans,String mtl){  if (uv == null) {    if (verts.length != 4)     throw new IllegalArgumentException("Default texture coordinates are only defined for quads.");    uv=new UV[]{new UV(0,0),new UV(1,0),new UV(1,1),new UV(0,1)};  }  Face face=new Face();  face.uvs=uv.clone();  face.material=mtl;  face.vertices=verts.clone();  if (norms != null) {    face.norms=norms.clone();  }  if (trans != null) {    face=trans.multiply(face);  }  face.chunk_idx=chunk_idx_count;  if (Options.optimiseGeometry) {    optimisedFaces.add(face);  } else {    faces.add(face);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void processClientMembership(String senderId,String clientId,String clientHost,int eventType){  logger.info(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystemJmxImpl_PROCESSING_CLIENT_MEMBERSHIP_EVENT_0_FROM_1_FOR_2_RUNNING_ON_3,new String[]{ClientMembershipMessage.getEventTypeString(eventType),senderId,clientId,clientHost}));  try {    SystemMemberJmx systemMemberJmx=null;    CacheVm[] cacheVms=getCacheVms();    for (    CacheVm cacheVm : cacheVms) {      if (cacheVm.getId().equals(senderId) && cacheVm instanceof CacheServerJmxImpl) {        systemMemberJmx=(CacheServerJmxImpl)cacheVm;        break;      }    }    if (systemMemberJmx == null) {      SystemMember[] appVms=getSystemMemberApplications();      for (      SystemMember appVm : appVms) {        if (appVm.getId().equals(senderId) && appVm instanceof SystemMemberJmxImpl) {          systemMemberJmx=(SystemMemberJmxImpl)appVm;          break;        }      }    }    if (systemMemberJmx != null) {      systemMemberJmx.handleClientMembership(clientId,eventType);    }  } catch (  AdminException e) {    logger.error(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystemJmxImpl_FAILED_TO_PROCESS_CLIENT_MEMBERSHIP_FROM_0_FOR_1,new Object[]{senderId,clientId}),e);    return;  }catch (  RuntimeOperationsException e) {    logger.warn(e.getMessage(),e);  }}  }
class C{  public void connect(String mac){}  }
class C{  private void addReplaceHistory(String c){  if (StringUtils.isBlank(c)) {    return;  }  for (int i=0; i < cbReplace.getItemCount(); i++) {    if (((String)cbReplace.getItemAt(i)).equals(c)) {      return;    }  }  cbReplace.insertItemAt(c,0);  if (cbReplace.getItemCount() > 25) {    for (int i=25; i < cbReplace.getItemCount(); )     cbReplace.removeItemAt(i);  }  tfReplaceEditor.setText((String)cbReplace.getItemAt(0));}  }
class C{  public void ensureContains(FormatField field){  for (  FormatField f : getFormatLines()) {    if (f.getId().equals(field.getId())) {      if (f.getType() == field.getType() && f.getNumber().equals(field.getNumber())) {        return;      } else {        throw new VcfFormatException("A VCF FORMAT field " + field.getId() + " which is incompatible is already present in the VCF header.");      }    }  }  addFormatField(field);}  }
class C{  public void writeAll(List<String[]> allLines){  for (  String[] line : allLines) {    writeNext(line);  }}  }
class C{  @Override public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException, ServletException {  final HttpServletRequest request=(HttpServletRequest)req;  final HttpServletResponse response=(HttpServletResponse)res;  String authorization=request.getHeader("Authorization");  String reCaptcha=request.getHeader("ReCaptcha");  String ip=request.getRemoteAddr();  if (authorization == null || !authorization.startsWith("Basic ") || !reCaptchaProperties.isEnabled()) {    chain.doFilter(request,response);    return;  }  if (reCaptcha == null || "[object Object]".equals(reCaptcha) || "null".equals(reCaptcha)) {    response.setStatus(401);    return;  }  if (!checkCaptcha(reCaptcha,ip).getSuccess()) {    response.setStatus(401);    return;  }  chain.doFilter(request,response);}  }
class C{  public static void e(String tag,String message,Exception exception){  if (sIsLogEnabled) {    Log.e(tag,getContent(getCurrentStackTraceElement()) + "\n>" + exception.getMessage()+ "\n>"+ exception.getStackTrace()+ "   "+ message);    exception.printStackTrace();  }}  }
class C{  public void addRequestProperty(String key,String value){  jarFileURLConnection.addRequestProperty(key,value);}  }
class C{  private synchronized void removeChannelFromHistory(String channel){  channel=prepareChannel(channel);  if (channel != null) {    settings.mapRemove(HISTORY_SETTING,channel);  }}  }
class C{  private void innerScan(HilbertFeatures hf,final int i,final int maxcount){  final O p=hf.relation.get(hf.pf[i].id);  int a=i, b=i;  int level=h, levela=h, levelb=h;  for (int count=0; count < maxcount; count++) {    final int c;    if (a == 0) {      levelb=Math.min(levelb,hf.pf[b].level);      b++;      c=b;    } else     if (b >= capital_n - 1) {      a--;      levela=Math.min(levela,hf.pf[a].level);      c=a;    } else     if (hf.pf[a - 1].level >= hf.pf[b].level) {      a--;      levela=Math.min(levela,hf.pf[a].level);      c=a;    } else {      levelb=Math.min(levelb,hf.pf[b].level);      b++;      c=b;    }    if (!hf.pf[i].nn_keys.contains(hf.pf[c].id)) {      hf.pf[i].insert(hf.pf[c].id,distq.distance(p,hf.pf[c].id),k);      if (hf.pf[i].nn.size() == k) {        if (hf.pf[i].sum_nn < omega_star) {          break;        }        final int mlevel=Math.max(levela,levelb);        if (mlevel < level) {          level=mlevel;          final double delta=hf.minDistLevel(hf.pf[i].id,level);          if (delta >= hf.pf[i].nn.peek().doubleValue()) {            break;          }        }      }    }  }  double br=hf.boxRadius(i,a - 1,b + 1);  double newlb=0.0;  double newub=0.0;  for (ObjectHeap.UnsortedIter<DoubleDBIDPair> iter=hf.pf[i].nn.unsortedIter(); iter.valid(); iter.advance()) {    DoubleDBIDPair entry=iter.get();    newub+=entry.doubleValue();    if (entry.doubleValue() <= br) {      newlb+=entry.doubleValue();    }  }  if (newlb > hf.pf[i].lbound) {    hf.pf[i].lbound=newlb;  }  if (newub < hf.pf[i].ubound) {    hf.pf[i].ubound=newub;  }}  }
class C{  public boolean isComplete(){  return isComplete_;}  }
class C{  private void makeMatch(short colorsTotal,CTEntry[] ct){  if (colorsTotal == ct.length) {    ct_=ct;    colorsTotal_=colorsTotal;  } else {    if (ct.length > colorsTotal) {      colorsTotal_=(short)ct.length;      ct_=ct;    } else {      ct_=new CTEntry[colorsTotal];      for (int i=0; i < ct.length; i++)       ct_[i]=ct[i];    }  }}  }
class C{  public final Flux<T> onErrorResumeWith(Function<? super Throwable,? extends Publisher<? extends T>> fallback){  return onAssembly(new FluxResume<>(this,fallback));}  }
class C{  public void blob(byte[] blob) throws IOException {  writeBytes(blob);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.PARAMETER__BUILT_IN_FACET_KEY:    return BUILT_IN_FACET_KEY_EDEFAULT == null ? builtInFacetKey != null : !BUILT_IN_FACET_KEY_EDEFAULT.equals(builtInFacetKey);}return super.eIsSet(featureID);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (a == null)   return new Long(0);  Watched w=Wizard.getInstance().getWatch(a);  if (w != null)   return new Long(w.getWatchStart());  if (stack.getUIMgrSafe() != null && stack.getUIMgrSafe().getVideoFrame().hasFile()) {    MediaFile mf=stack.getUIMgrSafe().getVideoFrame().getCurrFile();    if (mf != null && mf.getContentAiring() == a)     return new Long(mf.getRecordTime());  }  return new Long(0);}  }
class C{  public void removeAllHintIcons(){  this.mHintIconArray.clear();  this.mHintIcons.removeAllViews();}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public URI resolve(URI uri){  if (isOpaque() || uri.isAbsolute()) {    return uri;  }  String thatPath=uri.getPath();  String thatQuery=uri.getQuery();  String thatAuthority=uri.getAuthority();  String thatFragment=uri.getFragment();  try {    if (thatFragment != null && (uri.getScheme() == null && thatPath == null && thatQuery == null && thatAuthority == null)) {      return new URI(getScheme(),getAuthority(),getPath(),getQuery(),thatFragment);    }    if (thatAuthority != null) {      return new URI(getScheme(),thatAuthority,thatPath,thatQuery,thatFragment);    }    if (thatPath != null && thatPath.charAt(0) == PATH_SEPARATOR) {      return new URI(getScheme(),getAuthority(),thatPath,thatQuery,thatFragment);    }    String thisPath=getPath();    if (thisPath != null) {      int index=thisPath.lastIndexOf(PATH_SEPARATOR);      if (index != -1) {        thisPath=thisPath.substring(index);      }    }    thisPath+=PATH_SEPARATOR + thatPath;    return new URI(getScheme(),getAuthority(),thisPath,thatQuery,thatFragment).normalize();  } catch (  URISyntaxException use) {    throw new IllegalArgumentException(use.getMessage());  }}  }
class C{  private AttributeRule(String name,Class c){  this.name=name;  this.c=c;  this.optional=false;}  }
class C{  public void afterEmitSetter(JavaFileWriter writer,PropertyGenerator propertyGenerator,MethodDeclarationParameters setterParams) throws IOException {}  }
class C{  public static void M_RequisitionLine(MRequisitionLine rl){  MPPMRP mrp=getQuery(rl,null,null).firstOnly();  MRequisition r=rl.getParent();  if (mrp == null) {    mrp=new MPPMRP(rl.getCtx(),0,rl.get_TrxName());    mrp.setM_Requisition_ID(rl.getM_Requisition_ID());    mrp.setM_RequisitionLine_ID(rl.getM_RequisitionLine_ID());  }  mrp.setM_Requisition(r);  mrp.setAD_Org_ID(rl.getAD_Org_ID());  mrp.setName("MRP");  mrp.setDescription(rl.getDescription());  mrp.setM_Product_ID(rl.getM_Product_ID());  mrp.setC_BPartner_ID(rl.getC_BPartner_ID());  mrp.setPriority(rl.getParent().getPriorityRule());  mrp.setQty(rl.getQty().subtract(rl.getQtyOrdered()));  mrp.saveEx();}  }
class C{  public void decrementMaxForwards() throws TooManyHopsException {  if (maxForwards > 0)   maxForwards--; else   throw new TooManyHopsException("has already reached 0!");}  }
class C{  private void positionAndSizeAsIcon(){  if (!(getParent() instanceof DragLayer))   return;  setScaleX(0.8f);  setScaleY(0.8f);  setAlpha(0f);  mState=STATE_SMALL;}  }
class C{  public void updateStatus(int percent){  ClientState state=ClientState.SEARCH;  ClientStateInformation information=new ClientStateInformation(state);  information.setCoverage(currentCoverage);  information.setProgress(percent);  information.setIteration(iteration);  ClientServices.getInstance().getClientNode().changeState(state,information);  lastProgress=percent;  lastCoverage=currentCoverage;}  }
class C{  private void alterSyntax(){  m_st.resetSyntax();  m_st.wordChars('\u0000','\u00ff');  m_st.slashStarComments(false);  m_st.slashSlashComments(false);  m_st.ordinaryChar('\n');  m_st.ordinaryChar('\r');}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double slopeExponentValue=0;  double SCAExponent=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      SCAExponent=Double.parseDouble(args[i]);    } else     if (i == 4) {      slopeExponentValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (SCAExponent < 0.1) {      SCAExponent=0.1;    }    if (SCAExponent > 20) {      SCAExponent=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("spectrum.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          z=(SCAExponent + 1) * Math.pow((area[col] / 22.13),SCAExponent) * Math.pow((Math.sin(Math.toRadians(slope[col])) / 0.0896),slopeExponentValue);          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public void connection_connectAfter(ConnectionProxy connection){  connectionLog("{conn-" + connection.getId() + "} connected");}  }
class C{  public static void resetRefreshWait(){  System.getProperties().remove("p2p.gossipRefreshRate");}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public boolean offer(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.offer(e);    if (q.peek() == e) {      leader=null;      available.signal();    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  public HCardParser(Document document){  this(document,null);}  }
class C{  public void addTree(Tree tree){  samples++;  List<Clade> clades=new ArrayList<Clade>();  List<Clade> parentClades=new ArrayList<Clade>();  getClades(tree,tree.getRoot(),parentClades,clades);  for (  Clade c : clades) {    if (cladeProbabilities.containsKey(c.getBits())) {      Clade tmp=cladeProbabilities.get(c.getBits());      tmp.addHeight(c.getHeight());    } else {      c.addHeight(c.getHeight());      cladeProbabilities.put(c.getBits(),c);    }  }}  }
class C{  public Reporter newReporter(String systemName,String userName){  return (Reporter)newNamedBean(systemName,userName);}  }
class C{  protected boolean containsInOutput(String find){  return containsInOutput(find,true);}  }
class C{  public Tradestrategy findTradestrategyById(final Tradestrategy tradestrategy) throws PersistentModelException {  if (null == tradestrategy.getIdTradeStrategy())   throw new PersistentModelException("Please save Tradestrategy for symbol: " + tradestrategy.getContract().getSymbol());  Tradestrategy instance=m_tradestrategyHome.findById(tradestrategy.getIdTradeStrategy());  if (null == instance)   throw new PersistentModelException("Tradestrategy not found for id: " + tradestrategy.getIdTradeStrategy());  instance.setStrategyData(tradestrategy.getStrategyData());  return instance;}  }
class C{  public static void dumpHeader(Object ref){  if (GENERATE_GC_TRACE) {    VM.sysWrite(" OID=",getOID(ref));    VM.sysWrite(" LINK=",getLink(ref));    VM.sysWrite(" DEATH=",getDeathTime(ref));  }}  }
class C{  public static LuaViewDialog create(Context context){  return new LuaViewDialog(context,android.R.style.Theme_Translucent_NoTitleBar);}  }
class C{  void listMethods(){  int i;  for (i=0; i < methods_count; i++) {    G.v().out.println(methods[i].prototype(constant_pool));  }}  }
class C{  public List<AggregationOperation> makeAggregationOp(){  List<AggregationOperation> op=new ArrayList<>();  if (getFilterRabbits() != null && !getFilterRabbits().isEmpty()) {    logger.trace("rabbit " + getFilterRabbits());    op.add(new MatchOperation(Criteria.where("rabbitId").in(getFilterRabbits())));  }  if (getFilterLevels().size() > 0) {    logger.trace("levels " + getFilterLevels());    op.add(new MatchOperation(Criteria.where("loggingEvent.level").in(getFilterLevels())));  }  Criteria dateCriteria=null;  if (getFilterBeginDate() != null) {    logger.trace("loggingEventDateInt gte " + getFilterBeginDate());    dateCriteria=Criteria.where("loggingEventDateInt").gte(getFilterBeginDate());  }  if (getFilterEndDate() != null) {    if (dateCriteria == null) {      logger.trace("loggingEventDateInt lte " + getFilterEndDate());      dateCriteria=Criteria.where("loggingEventDateInt").lte(getFilterEndDate());    } else {      logger.trace("loggingEventDateInt lte " + getFilterEndDate());      dateCriteria=dateCriteria.andOperator(Criteria.where("loggingEventDateInt").lte(getFilterEndDate()));    }  }  if (dateCriteria != null) {    op.add(new MatchOperation(dateCriteria));  }  if (group != null) {    logger.debug("group > " + group);    String[] fieldsStr=new String[group.size()];    for (int i=0; i < group.size(); i++) {      fieldsStr[i]=group.get(i);    }    Fields files=Fields.fields(fieldsStr);    op.add(new GroupOperation(files).count().as("count"));    op.add(new SortOperation(new Sort(Sort.Direction.ASC,fieldsStr)));  }  return op;}  }
class C{  public boolean isDomainCrosshairLockedOnData(){  return this.domainCrosshairLockedOnData;}  }
class C{  public void unregister(StateCallback<S> callback){  phlux.unregister(key,callback);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tan(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final long crc64Long(String in){  if (in == null || in.length() == 0) {    return 0;  }  return crc64Long(getBytes(in));}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  @Override public void onDestroy(){  super.onDestroy();  getOps().close();}  }
class C{  public boolean isOrder(){  return getC_OrderLine_ID() != 0;}  }
class C{  int positionOfItem(Item item){  int offset=0;  for (  List<?> section : mSections) {    int index=section.indexOf(item);    if (index != -1) {      return offset + index;    }    offset+=section.size();  }  return -1;}  }
class C{  private boolean execute(){  final String tag="Scheduled session[" + taskid + "]";  try {    if (cancelled) {      LOG.finer(tag + " cancelled: done");      return false;    }    if (!notifyStateChange(RUNNING,"scan-running")) {      LOG.finer(tag + " stopped: done");      return false;    }    scanAllDirectories();  } catch (  Exception x) {    if (LOG.isLoggable(Level.FINEST)) {      LOG.log(Level.FINEST,tag + " failed to scan: " + x,x);    } else     if (LOG.isLoggable(Level.FINE)) {      LOG.fine(tag + " failed to scan: " + x);    }  }  return true;}  }
class C{  public DemoPagerAdapter(FragmentManager fm){  super(fm);}  }
class C{  void doLayout(){  layout.layoutContainer(this);  int count=getComponentCount();  for (int i=0; i < count; i++) {    Component c=getComponentAt(i);    if (c instanceof Container) {      ((Container)c).layoutContainer();    } else {      c.laidOut();    }  }  laidOut();  if (Form.activePeerCount > 0) {    onParentPositionChange();  }}  }
class C{  @Override public void restoreGroupSnapshots(StorageSystem storage,URI volume,URI snapshotURI,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshotURI));    final BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshotURI);    final String consistencyGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(snapshotObj,_dbClient);    storage=findProviderFactory.withGroup(storage,consistencyGroupName).find();    if (storage == null) {      ServiceError error=DeviceControllerErrors.smis.noConsistencyGroupWithGivenName();      taskCompleter.error(_dbClient,error);      return;    }    final String snapshotGroupName=snapshotObj.getReplicationGroupInstance();    final CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,consistencyGroupName,snapshotGroupName);    final CIMInstance groupSynchronizedInstance=_helper.checkExists(storage,groupSynchronized,false,false);    List<BlockSnapshot> snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshotObj,_dbClient);    if (groupSynchronizedInstance != null) {      if (snapshotObj.getNeedsCopyToTarget()) {        _log.info("Consistency group {} snapshots require copy-to-target",consistencyGroupName);        List<URI> snapshotList=new ArrayList<URI>();        for (        BlockSnapshot snapshot : snapshots) {          snapshotList.add(snapshot.getId());        }        internalGroupSnapCopyToTarget(storage,snapshotObj,snapshotList);      }      CIMObjectPath settingsPathFromOutputArg=null;      String copyState=groupSynchronizedInstance.getPropertyValue(SmisConstants.CP_COPY_STATE).toString();      if (!String.valueOf(SmisConstants.INACTIVE_VALUE).equalsIgnoreCase(copyState)) {        CIMArgument[] deactivateGroupInput=_helper.getDeactivateSnapshotSynchronousInputArguments(groupSynchronized);        CIMArgument[] outArgs=new CIMArgument[5];        _helper.callModifyReplica(storage,deactivateGroupInput,outArgs);        settingsPathFromOutputArg=(CIMObjectPath)outArgs[0].getValue();      }      final boolean isSynchronizationAspectSet=snapshotObj.getSettingsGroupInstance() != null;      final CIMObjectPath settingsPath=isSynchronizationAspectSet ? _helper.getSettingsDefineStateForSourceGroup(storage,snapshotObj.getSettingsGroupInstance()) : settingsPathFromOutputArg;      if (!isSynchronizationAspectSet) {        CIMObjectPath syncPath=(CIMObjectPath)settingsPath.getKey(SmisConstants.CP_SETTING_DATA).getValue();        String instanceId=(String)syncPath.getKey(SmisConstants.CP_INSTANCE_ID).getValue();        for (        BlockSnapshot it : snapshots) {          it.setSettingsGroupInstance(instanceId);        }        _dbClient.persistObject(snapshots);      }      CIMArgument[] restoreInput=_helper.getRestoreFromSettingsStateInputArguments(settingsPath,false);      CIMObjectPath cimJob=_helper.callModifySettingsDefineState(storage,restoreInput);      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockRestoreSnapshotJob(cimJob,storage.getId(),taskCompleter)));    } else {      taskCompleter.ready(_dbClient);    }  } catch (  Exception e) {    String message=String.format("Generic exception when trying to restoring snapshots from consistency group on array %s",storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreGroupSnapshots",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public Bag(Bag other){  if (other == null) {    numObjs=0;    objs=new Object[1];  } else {    numObjs=other.numObjs;    objs=new Object[numObjs];    System.arraycopy(other.objs,0,objs,0,numObjs);  }}  }
class C{  public void showMigrationCling(){  mIsVisible=true;  mLauncher.hideWorkspaceSearchAndHotseat();  ViewGroup root=(ViewGroup)mLauncher.findViewById(R.id.launcher);  View inflated=mInflater.inflate(R.layout.migration_cling,root);  inflated.findViewById(R.id.cling_dismiss_migration_copy_apps).setOnClickListener(this);  inflated.findViewById(R.id.cling_dismiss_migration_use_default).setOnClickListener(this);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.006 -0400",hash_original_method="F77A4F330ECF7476CC7AF200B57EFA7F",hash_generated_method="5AEDC89A183EF5E6538093DA8AE2F21F") public boolean add(E e){  return offer(e);}  }
class C{  protected WikibaseUris uris(){  return uris;}  }
class C{  BigDecimal billPriceModel(final BillingInput billingInput,final PriceModelInput priceModelInput,final PriceModelsType priceModelsType,final BillingResult result){  BigDecimal overallPriceModelCosts=ZERO_NORMALIZED;  if (priceModelInput.isChargeablePriceModel() && !priceModelInput.isFreePriceModel()) {    final PriceModelType priceModelType=assembler.initializePriceModelType(billingInput,priceModelInput,priceModelsType);    final BigDecimal oneTimeFeeCosts=calculateOnetimeFeeCosts(priceModelInput,priceModelType);    final BigDecimal eventCosts=new EventCalculator(bdr,localizer).calculateEventCosts(billingInput,priceModelInput,result,priceModelType);    final BigDecimal costsForPeriodUsage=calculatePeriodCosts(billingInput,priceModelInput,priceModelType);    final BigDecimal costsForUsers=calculateUserCosts(billingInput,priceModelInput,priceModelType);    final BigDecimal costsForParameters=calculateParameterCosts(billingInput,priceModelInput,priceModelType);    overallPriceModelCosts=eventCosts.add(costsForPeriodUsage).add(costsForUsers).add(oneTimeFeeCosts).add(costsForParameters).setScale(PriceConverter.NORMALIZED_PRICE_SCALING,RoundingMode.HALF_UP);    priceModelType.getPriceModelCosts().setAmount(overallPriceModelCosts);  }  return overallPriceModelCosts;}  }
class C{  public Matrix3f mult(Matrix3f mat){  return mult(mat,null);}  }
class C{  public Instant plusMillis(long millisToAdd){  return plus(millisToAdd / 1000,(millisToAdd % 1000) * 1000_000);}  }
class C{  public static boolean nullable(String name,String cls){  return !"_KEY".equalsIgnoreCase(name) && !"_VAL".equalsIgnoreCase(name) && !(boolean.class.getName().equals(cls) || byte.class.getName().equals(cls) || short.class.getName().equals(cls)|| int.class.getName().equals(cls)|| long.class.getName().equals(cls)|| float.class.getName().equals(cls)|| double.class.getName().equals(cls));}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public void onEvent(MovieResponse response){  if (response.getResults() != null) {    mSearchedMovies=response.getResults();    SearchMovieAdapter adapter=new SearchMovieAdapter(getActivity(),mSearchedMovies);    mSearchListView.setAdapter(adapter);  }}  }
class C{  private void stringSourceSelectionChanged(){  int idx=stringSourceSelectionCombo.getSelectionIndex();  MatchingRuleType newSelection=MatchingRuleType.values()[idx];  if (newSelection.equals(stringSourceSelection)) {    return;  }  resetStringValueSection();  searchDepthSpinner.setEnabled(true);  searchInTraceCheckBox.setEnabled(true);  stringSourceSelection=newSelection;switch (stringSourceSelection) {case HTTP_PARAMETER:    createHttpParameterControls();  break;case METHOD_PARAMETER:createMethodParameterControls();break;case HTTP_URI:case IP:searchDepthSpinner.setEnabled(false);searchInTraceCheckBox.setEnabled(false);searchInTraceCheckBox.setSelection(false);break;case METHOD_SIGNATURE:case HTTP_REQUEST_METHOD:default :break;}if (!initializationPhase) {markDirty();}mainComposite.layout(true,true);}  }
class C{  public JMenuItem createJMenuItem(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  return createJMenuItem(name,null);}  }
class C{  protected XYMultipleSeriesDataset buildDateDataset(String[] titles,List<Date[]> xValues,List<double[]> yValues){  XYMultipleSeriesDataset dataset=new XYMultipleSeriesDataset();  int length=titles.length;  for (int i=0; i < length; i++) {    TimeSeries series=new TimeSeries(titles[i]);    Date[] xV=xValues.get(i);    double[] yV=yValues.get(i);    int seriesLength=xV.length;    for (int k=0; k < seriesLength; k++) {      series.add(xV[k],yV[k]);    }    dataset.addSeries(series);  }  return dataset;}  }
class C{  @POST @Consumes({MediaType.MULTIPART_FORM_DATA}) @Produces({MediaType.APPLICATION_JSON}) public String addNewClientImage(@PathParam("entity") final String entityName,@PathParam("entityId") final Long entityId,@HeaderParam("Content-Length") final Long fileSize,@FormDataParam("file") final InputStream inputStream,@FormDataParam("file") final FormDataContentDisposition fileDetails,@FormDataParam("file") final FormDataBodyPart bodyPart){  validateEntityTypeforImage(entityName);  ContentRepositoryUtils.validateClientImageNotEmpty(fileDetails.getFileName());  ContentRepositoryUtils.validateImageMimeType(bodyPart.getMediaType().toString());  final CommandProcessingResult result=this.imageWritePlatformService.saveOrUpdateImage(entityName,entityId,fileDetails.getFileName(),inputStream,fileSize);  return this.toApiJsonSerializer.serialize(result);}  }
class C{  public ToStringBuilder append(String fieldName,long[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public JBBPOut Bool(final boolean value,final JBBPBitOrder bitOrder) throws IOException {  assertNotEnded();  if (this.processCommands) {    this.outStream.write(value ? bitOrder == JBBPBitOrder.MSB0 ? 0x80 : 1 : 0);  }  return this;}  }
class C{  private void printHeader(){  write("# Scenario " + getScenarioName());  write("# " + SYNTAX);}  }
class C{  static public int minute(){  time.setToNow();  return time.minute;}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  protected void registerARQFunction(Function spinFunction){  FunctionFactory oldFF=FunctionRegistry.get().get(spinFunction.getURI());  if (oldFF == null || oldFF instanceof SPINFunctionFactory) {    SPINFunctionFactory newFF=SPINFunctionDrivers.get().create(spinFunction);    if (newFF != null) {      FunctionRegistry.get().put(spinFunction.getURI(),newFF);    }  }}  }
class C{  public MultiplexingDatagramSocket(SocketAddress bindaddr) throws SocketException {  super(bindaddr);}  }
class C{  int processRow(int[] rowCounters,int rowNumber,int rowHeight,int[] codewords,int next) throws FormatException {  int width=bitMatrix.getWidth();  int columnNumber=0;  long symbol=0;  for (int i=0; i < width; i+=MODULES_IN_SYMBOL) {    if (i + MODULES_IN_SYMBOL > rowCounters.length) {      throw FormatException.getFormatInstance();    }    for (int mask=MODULES_IN_SYMBOL - 1; mask >= 0; mask--) {      if (rowCounters[i + (MODULES_IN_SYMBOL - 1 - mask)] >= rowHeight >>> 1) {        symbol|=1L << mask;      }    }    if (columnNumber > 0) {      int cw=getCodeword(symbol);      if (cw < 0 && i < width - MODULES_IN_SYMBOL) {        if (eraseCount >= erasures.length) {          throw FormatException.getFormatInstance();        }        erasures[eraseCount]=next;        next++;        eraseCount++;      } else {        codewords[next++]=cw;      }    } else {      int cw=getCodeword(symbol);      if (ecLevel < 0) {        if (rowNumber % 3 == 1) {          leftColumnECData=cw;        }      }    }    symbol=0;    columnNumber++;  }  if (columnNumber > 1) {    --next;    if (ecLevel < 0) {      if (rowNumber % 3 == 2) {        rightColumnECData=codewords[next];        if (rightColumnECData == leftColumnECData && leftColumnECData != 0) {          ecLevel=((rightColumnECData % 30) - rows % 3) / 3;        }      }    }    codewords[next]=0;  }  return next;}  }
class C{  public int totalShards(){  return totalShards;}  }
class C{  public void startFactoryServiceSynchronously(Class factoryClass,String path) throws Throwable {  if (!FactoryService.class.isAssignableFrom(factoryClass)) {    throw new IllegalArgumentException("Service " + factoryClass.getName() + " is not FactoryService");  }  for (  ServiceHost host : hosts) {    Operation post=Operation.createPost(UriUtils.buildUri(host,path));    OperationLatch syncPost=new OperationLatch(post);    host.startService(post,(FactoryService)factoryClass.newInstance());    syncPost.awaitOperationCompletion();  }}  }
class C{  public static ImageSource uri(String uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  if (!uri.contains("://")) {    if (uri.startsWith("/")) {      uri=uri.substring(1);    }    uri=FILE_SCHEME + uri;  }  return new ImageSource(Uri.parse(uri));}  }
class C{  public String format(String s){  int indent=0;  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char currentChar=s.charAt(i);    if (currentChar == '<') {      char nextChar=s.charAt(i + 1);      if (nextChar == '/')       indent-=indentNumChars;      if (!singleLine)       sb.append(this.createIndentation(indent));      if (nextChar != '?' && nextChar != '!' && nextChar != '/')       indent+=indentNumChars;      singleLine=false;    }    sb.append(currentChar);    if (currentChar == '>') {      if (s.charAt(i - 1) == '/') {        indent-=indentNumChars;        sb.append(NEW_LINE);      } else {        int nextStartElementPos=s.indexOf('<',i);        if (nextStartElementPos > i + 1) {          String textBetweenElements=s.substring(i + 1,nextStartElementPos);          if (textBetweenElements.replaceAll("(\n|\r\n|\r)","").length() == 0) {            sb.append(textBetweenElements + NEW_LINE);          } else {            sb.append(textBetweenElements);            singleLine=true;          }          i=nextStartElementPos - 1;        } else {          sb.append(NEW_LINE);        }      }    }  }  return sb.toString();}  }
class C{  private void showHelpAbout(){  HelpAboutDialog aboutDialog=new HelpAboutDialog(this);  aboutDialog.setVisible(true);}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  private boolean isInternalEvent(int type){  return type == DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT || F.contains(EVTS_DISCOVERY_ALL,type);}  }
class C{  public void cancel(){  for (int c; ; ) {    if ((c=ctl) == DISABLED)     break; else     if ((c & ACTIVE) != 0) {      if (U.compareAndSwapInt(this,CTL,c,c | (CONSUME | ERROR)))       break;    } else     if (U.compareAndSwapInt(this,CTL,c,DISABLED)) {      detach();      break;    }  }}  }
class C{  @Override public void postProcess() throws IOException {  super.compute();  for (  Map<String,StatsCollector[]> f : fieldFacetCollectors.values()) {    for (    StatsCollector[] arr : f.values()) {      for (      StatsCollector b : arr) {        b.compute();      }    }  }  basicsAndFieldFacetsComputed=true;  final Filter filter=docs.getTopFilter();  if (rangeFacets != null) {    processRangeFacets(filter);  }  if (queryFacets != null) {    processQueryFacets(filter);  }}  }
class C{  private Pair<String,TtmlRegion> parseRegionAttributes(XmlPullParser xmlParser){  String regionId=ParserUtil.getAttributeValue(xmlParser,TtmlNode.ATTR_ID);  String regionOrigin=ParserUtil.getAttributeValue(xmlParser,TtmlNode.ATTR_TTS_ORIGIN);  String regionExtent=ParserUtil.getAttributeValue(xmlParser,TtmlNode.ATTR_TTS_EXTENT);  if (regionOrigin == null || regionId == null) {    return null;  }  float position=Cue.DIMEN_UNSET;  float line=Cue.DIMEN_UNSET;  Matcher originMatcher=PERCENTAGE_COORDINATES.matcher(regionOrigin);  if (originMatcher.matches()) {    try {      position=Float.parseFloat(originMatcher.group(1)) / 100.f;      line=Float.parseFloat(originMatcher.group(2)) / 100.f;    } catch (    NumberFormatException e) {      Log.w(TAG,"Ignoring region with malformed origin: '" + regionOrigin + "'",e);      position=Cue.DIMEN_UNSET;    }  }  float width=Cue.DIMEN_UNSET;  if (regionExtent != null) {    Matcher extentMatcher=PERCENTAGE_COORDINATES.matcher(regionExtent);    if (extentMatcher.matches()) {      try {        width=Float.parseFloat(extentMatcher.group(1)) / 100.f;      } catch (      NumberFormatException e) {        Log.w(TAG,"Ignoring malformed region extent: '" + regionExtent + "'",e);      }    }  }  return position != Cue.DIMEN_UNSET ? new Pair<>(regionId,new TtmlRegion(position,line,Cue.LINE_TYPE_FRACTION,width)) : null;}  }
class C{  public static int lookup(String text,int filter){  int type=UNKNOWN;  if (LOOKUP.containsKey(text)) {    type=LOOKUP.get(text);    if (filter != UNKNOWN && !ofType(type,filter)) {      type=UNKNOWN;    }  }  return type;}  }
class C{  public NATURAL_INNER_JOIN NATURAL_INNER_JOIN(String tableToJoin){  return new NATURAL_INNER_JOIN(this,tableToJoin);}  }
class C{  public boolean isAtRegistrar(){  return isAtElement(RDE_REGISTRAR_URI,"registrar");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.163 -0400",hash_original_method="163C0E8552BE001665F5737CD9B03924",hash_generated_method="F7D46E1AB332CAA86439784D1039C269") public static int min(int i1,int i2){  return Math.min(i1,i2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:59.503 -0500",hash_original_method="3FF3F0D6B4FEA69386DC61191DDF3D5F",hash_generated_method="1D24F1133F093A6851F8D3448F35CAA7") public void recordData(long start,long end,NetworkStats.Entry entry){  if (entry.rxBytes < 0 || entry.rxPackets < 0 || entry.txBytes < 0 || entry.txPackets < 0 || entry.operations < 0) {    throw new IllegalArgumentException("tried recording negative data");  }  if (entry.rxBytes == 0 && entry.rxPackets == 0 && entry.txBytes == 0 && entry.txPackets == 0 && entry.operations == 0) {    return;  }  ensureBuckets(start,end);  long duration=end - start;  final int startIndex=getIndexAfter(end);  for (int i=startIndex; i >= 0; i--) {    final long curStart=bucketStart[i];    final long curEnd=curStart + bucketDuration;    if (curEnd < start)     break;    if (curStart > end)     continue;    final long overlap=Math.min(curEnd,end) - Math.max(curStart,start);    if (overlap <= 0)     continue;    final long fracRxBytes=entry.rxBytes * overlap / duration;    final long fracRxPackets=entry.rxPackets * overlap / duration;    final long fracTxBytes=entry.txBytes * overlap / duration;    final long fracTxPackets=entry.txPackets * overlap / duration;    final long fracOperations=entry.operations * overlap / duration;    addLong(activeTime,i,overlap);    addLong(rxBytes,i,fracRxBytes);    entry.rxBytes-=fracRxBytes;    addLong(rxPackets,i,fracRxPackets);    entry.rxPackets-=fracRxPackets;    addLong(txBytes,i,fracTxBytes);    entry.txBytes-=fracTxBytes;    addLong(txPackets,i,fracTxPackets);    entry.txPackets-=fracTxPackets;    addLong(operations,i,fracOperations);    entry.operations-=fracOperations;    duration-=overlap;  }}  }
class C{  public static final double max(double[] a){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < a.length; ++i) {    if (a[i] > max)     max=a[i];  }  return max;}  }
class C{  public static void writeFormLog(final String message,final boolean print){  if (print) {    System.out.println("[forms] " + message);  }  writeLog("[forms] " + message);}  }
class C{  TestScanner(JavaFileObject file){  this.file=file;}  }
class C{  private void sendTapEvent(BitSet bitset,Shift shift,boolean decision){  if (mSymbolEventTap != null) {    SymbolEvent event=new SymbolEvent(bitset.get(0,mSymbolLength),mSymbolLength,decision,shift);    mSymbolEventTap.receive(event);  }}  }
class C{  public void mouseReleased(MouseEvent e){  if (!e.isConsumed() && shouldHandleRelease && SwingUtilities.isLeftMouseButton(e)) {    adjustCaretAndFocus(e);  }}  }
class C{  public PropertiesFormat(final String name,final Collection<String> mimeTypes,final Charset charset,final Collection<String> fileExtensions){  super(name,mimeTypes,charset,fileExtensions);}  }
class C{  private SystemMember findFirstRunningMember(){synchronized (this.cacheServerSet) {    SERVERS:     for (Iterator iter=this.cacheServerSet.iterator(); iter.hasNext(); ) {      Future future=(Future)iter.next();      SystemMember member=null;      for (; ; ) {        checkCancellation();        boolean interrupted=Thread.interrupted();        try {          member=(SystemMember)future.get();          break;        } catch (        InterruptedException ex) {          interrupted=true;          continue;        }catch (        CancellationException ex) {          continue SERVERS;        }catch (        ExecutionException ex) {          handle(ex);          return null;        } finally {          if (interrupted) {            Thread.currentThread().interrupt();          }        }      }      if (isRunning(member)) {        return member;      }    }  }synchronized (this.applicationSet) {    APPS:     for (Iterator iter=this.applicationSet.iterator(); iter.hasNext(); ) {      Future future=(Future)iter.next();      SystemMember member=null;      for (; ; ) {        checkCancellation();        boolean interrupted=Thread.interrupted();        try {          member=(SystemMember)future.get();          break;        } catch (        InterruptedException ex) {          interrupted=true;          continue;        }catch (        CancellationException ex) {          continue APPS;        }catch (        ExecutionException ex) {          handle(ex);          return null;        } finally {          if (interrupted) {            Thread.currentThread().interrupt();          }        }      }      if (isRunning(member)) {        return member;      }    }  }  return null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case KEYS:return isSetKeys();}throw new IllegalStateException();}  }
class C{  private Token simpleTokenLexer(Token tkn,int c) throws IOException {  for (; ; ) {    if (isEndOfLine(c)) {      tkn.type=TT_EORECORD;      tkn.isReady=true;      break;    } else     if (isEndOfFile(c)) {      tkn.type=TT_EOF;      tkn.isReady=true;      break;    } else     if (c == strategy.getDelimiter()) {      tkn.type=TT_TOKEN;      tkn.isReady=true;      break;    } else     if (c == '\\' && strategy.getUnicodeEscapeInterpretation() && in.lookAhead() == 'u') {      tkn.content.append((char)unicodeEscapeLexer(c));    } else     if (c == strategy.getEscape()) {      tkn.content.append((char)readEscape(c));    } else {      tkn.content.append((char)c);    }    c=in.read();  }  if (strategy.getIgnoreTrailingWhitespaces()) {    tkn.content.trimTrailingWhitespace();  }  return tkn;}  }
class C{  protected void processUpdates(Queue<DeviceUpdate> updates){  if (updates == null)   return;  DeviceUpdate update=null;  while (null != (update=updates.poll())) {    if (logger.isTraceEnabled()) {      logger.trace("Dispatching device update: {}",update);    }    if (update.change == DeviceUpdate.Change.DELETE) {      deviceSyncManager.removeDevice(update.device);    } else {      deviceSyncManager.storeDevice(update.device);    }    List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();    notifyListeners(listeners,update);  }}  }
class C{  public QuadraticProbe(int tableSize,float c1,float c2){  super(tableSize);  this.c1=c1;  this.c2=c2;}  }
class C{  public OneToOneFileTransferDeleteTask(FileTransferServiceImpl fileTransferService,InstantMessagingService imService,LocalContentResolver contentResolver,ContactId contact){  super(contentResolver,FileTransferData.CONTENT_URI,FileTransferData.KEY_FT_ID,FileTransferData.KEY_CONTACT,SELECTION_ONETOONE_FILETRANSFER_BY_CHATID,contact.toString());  mFileTransferService=fileTransferService;  mImService=imService;}  }
class C{  public UserModificationConstraintException(String message){  super(message);}  }
class C{  public boolean isAllowDecimals(){  return allowDecimals;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean requiresAST(){  return fRequiresAST;}  }
class C{  @Override public boolean load(Element shared,Element perNode){  boolean result=true;  int x=0;  int y=0;  int height=400;  int width=300;  try {    x=shared.getAttribute("x").getIntValue();    y=shared.getAttribute("y").getIntValue();    height=shared.getAttribute("height").getIntValue();    width=shared.getAttribute("width").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert ControlPanelEditor's attribute");    result=false;  }  String name="Control Panel";  if (shared.getAttribute("name") != null) {    name=shared.getAttribute("name").getValue();  }  if (jmri.jmrit.display.PanelMenu.instance().isPanelNameUsed(name)) {    log.warn("File contains a panel with the same name ({}) as an existing panel",name);    result=false;  }  ControlPanelEditor panel=new ControlPanelEditor(name);  panel.getTargetFrame().setVisible(false);  jmri.jmrit.display.PanelMenu.instance().addEditorPanel(panel);  Attribute a;  boolean value=true;  if ((a=shared.getAttribute("editable")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllEditable(value);  value=true;  if ((a=shared.getAttribute("positionable")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllPositionable(value);  value=true;  if ((a=shared.getAttribute("showtooltips")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllShowTooltip(value);  value=true;  if ((a=shared.getAttribute("controlling")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllControlling(value);  value=false;  if ((a=shared.getAttribute("hide")) != null && a.getValue().equals("yes")) {    value=true;  }  panel.setShowHidden(value);  value=true;  if ((a=shared.getAttribute("panelmenu")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setPanelMenuVisible(value);  value=true;  if ((a=shared.getAttribute("shapeSelect")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setShapeSelect(value);  if ((a=shared.getAttribute("state")) != null) {    try {      int xState=a.getIntValue();      panel.setExtendedState(xState);    } catch (    org.jdom2.DataConversionException e) {      log.error("failed to convert ControlPanelEditor's extended State");      result=false;    }  }  String state="both";  if ((a=shared.getAttribute("scrollable")) != null) {    state=a.getValue();  }  panel.setScroll(state);  try {    int red=shared.getAttribute("redBackground").getIntValue();    int blue=shared.getAttribute("blueBackground").getIntValue();    int green=shared.getAttribute("greenBackground").getIntValue();    panel.setBackgroundColor(new Color(red,green,blue));  } catch (  org.jdom2.DataConversionException e) {    log.warn("Could not parse color attributes!");  }catch (  NullPointerException e) {  }  Element icons=shared.getChild("icons");  shared.removeChild("icons");  panel.initView();  List<Element> items=shared.getChildren();  for (  Element item : items) {    String adapterName=item.getAttribute("class").getValue();    log.debug("load via {}",adapterName);    try {      XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();      adapter.load(item,panel);      if (!panel.loadOK()) {        result=false;      }    } catch (    Exception e) {      log.error("Exception while loading {}: {}",item.getName(),e.getMessage(),e);      result=false;    }  }  if (icons != null) {    HashMap<String,NamedIcon> portalIconMap=new HashMap<String,NamedIcon>();    portalIconMap.put(PortalIcon.VISIBLE,loadIcon("visible",icons,panel));    portalIconMap.put(PortalIcon.PATH,loadIcon("path_edit",icons,panel));    portalIconMap.put(PortalIcon.HIDDEN,loadIcon("hidden",icons,panel));    portalIconMap.put(PortalIcon.TO_ARROW,loadIcon("to_arrow",icons,panel));    portalIconMap.put(PortalIcon.FROM_ARROW,loadIcon("from_arrow",icons,panel));    panel.setDefaultPortalIcons(portalIconMap);  }  panel.disposeLoadData();  panel.pack();  panel.setAllEditable(panel.isEditable());  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerUser(panel);  }  panel.getTargetFrame().setLocation(x,y);  panel.getTargetFrame().setSize(width,height);  panel.setTitle();  panel.getTargetFrame().setVisible(true);  panel.loadComplete();  return result;}  }
class C{  public InetAddress discoverHost(int udpPort,int timeoutMillis){  DatagramSocket socket=null;  try {    socket=new DatagramSocket();    broadcast(udpPort,socket);    socket.setSoTimeout(timeoutMillis);    DatagramPacket packet=new DatagramPacket(new byte[0],0);    try {      socket.receive(packet);    } catch (    SocketTimeoutException ex) {      if (INFO)       info("kryonet","Host discovery timed out.");      return null;    }    if (INFO)     info("kryonet","Discovered server: " + packet.getAddress());    return packet.getAddress();  } catch (  IOException ex) {    if (ERROR)     error("kryonet","Host discovery failed.",ex);    return null;  } finally {    if (socket != null)     socket.close();  }}  }
class C{  public static Task<ParseUser> logInInBackground(){  return ParseUser.logInWithInBackground(AUTH_TYPE,getAuthData());}  }
class C{  public static String hashpw(String password,String salt){  BCrypt B;  String real_salt;  byte passwordb[], saltb[], hashed[];  char minor=(char)0;  int rounds, off=0;  StringBuilder rs=new StringBuilder();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2')   throw new IllegalArgumentException("Invalid salt version");  if (salt.charAt(2) == '$')   off=3; else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$')     throw new IllegalArgumentException("Invalid salt revision");    off=4;  }  if (salt.charAt(off + 2) > '$')   throw new IllegalArgumentException("Missing salt rounds");  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  try {    passwordb=(password + (minor >= 'a' ? "\000" : "")).getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    throw new AssertionError("UTF-8 is not supported");  }  saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);  B=new BCrypt();  hashed=B.crypt_raw(passwordb,saltb,rounds,(int[])bf_crypt_ciphertext.clone());  rs.append("$2");  if (minor >= 'a')   rs.append(minor);  rs.append("$");  if (rounds < 10)   rs.append("0");  if (rounds > 30) {    throw new IllegalArgumentException("rounds exceeds maximum (30)");  }  rs.append(Integer.toString(rounds));  rs.append("$");  rs.append(encode_base64(saltb,saltb.length));  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));  return rs.toString();}  }
class C{  public IndexRequest ttl(Long ttl) throws ElasticsearchGenerationException {  if (ttl == null) {    this.ttl=-1;    return this;  }  if (ttl <= 0) {    throw new IllegalArgumentException("TTL value must be > 0. Illegal value provided [" + ttl + "]");  }  this.ttl=ttl;  return this;}  }
class C{  @Nullable public T_ENTITY findRevision(int id,int revisionNumber){  T_ENTITY result=null;  try {    begin();    AuditReader reader=AuditReaderFactory.get(getEntityManager());    result=reader.find(entityClass,id,revisionNumber);    commit();  } catch (  NoResultException e) {    rollback();    LOG.warn("No result for revision " + revisionNumber + " with id of "+ id);  } finally {    cleanup();  }  return result;}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    DataFilter filter=new CaseExpander();    DataSet newDataSet=filter.filter(dataSet);    DataModelList list=new DataModelList();    list.add(newDataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a tabular data set.");  }}  }
class C{  public DeflaterInputStream(InputStream in){  this(in,new Deflater());  usesDefaultDeflater=true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void makeButtonForVisible(int anum,int apos){  final double xpos=getVisibleAxisX(apos) - buttonsize * .5;  Element border=svgp.svgRect(xpos,ypos,buttonsize,buttonsize);  SVGUtil.addCSSClass(border,SAV_BORDER);  layer.appendChild(border);  SVGPath path=new SVGPath();  final double qs=controlsize * .5;  final double cs=controlsize * .125;  path.moveTo(xpos + cs,ypos + cs);  path.relativeLineTo(qs,qs);  path.relativeMoveTo(0,-qs);  path.relativeLineTo(-qs,qs);  Element cross=path.makeElement(svgp);  SVGUtil.addCSSClass(cross,SAV_CROSS);  layer.appendChild(cross);  Element rect=svgp.svgRect(xpos,ypos,buttonsize,buttonsize);  SVGUtil.addCSSClass(rect,SAV_BUTTON);  addEventListener(rect,anum);  layer.appendChild(rect);}  }
class C{  public boolean isClosed(){synchronized (closeLock) {    return closed;  }}  }
class C{  public static String extractClassname(String fullname){  return fullname.replaceFirst("^.*[.]","");}  }
class C{  protected void parseKeyBits() throws IOException, InvalidKeyException {  encode();}  }
class C{  public void close() throws SQLException {  if (resultSet != null) {    resultSet.close();  }}  }
class C{  private void parseOsmElement(final String name,final Attributes atts) throws OsmParseException {  try {    long osmId=Long.parseLong(atts.getValue("id"));    String version=atts.getValue("version");    long osmVersion=version == null ? 0 : Long.parseLong(atts.getValue("version"));    String action=atts.getValue("action");    byte status=OsmElement.STATE_UNCHANGED;    if (action != null) {      if (action.equalsIgnoreCase("modify")) {        status=OsmElement.STATE_MODIFIED;        if (osmId < 0) {          status=OsmElement.STATE_CREATED;        }      } else       if (action.equalsIgnoreCase("delete")) {        status=OsmElement.STATE_DELETED;      }    }    if (isNode(name)) {      int lat=(int)(Double.valueOf(atts.getValue("lat")) * 1E7);      int lon=(int)(Double.valueOf(atts.getValue("lon")) * 1E7);      currentNode=OsmElementFactory.createNode(osmId,osmVersion,status,lat,lon);    } else     if (isWay(name)) {      currentWay=OsmElementFactory.createWay(osmId,osmVersion,status);      if (nodeIndex == null) {        nodeIndex=storage.getNodeIndex();      }    } else     if (isRelation(name)) {      currentRelation=OsmElementFactory.createRelation(osmId,osmVersion,status);      if (nodeIndex == null) {        nodeIndex=storage.getNodeIndex();      }      if (wayIndex == null) {        wayIndex=storage.getWayIndex();      }    } else {      throw new OsmParseException("Unknown element " + name);    }  } catch (  NumberFormatException e) {    throw new OsmParseException("Element unparsable");  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  this.mSharedPreferences=getSharedPreferences(Constants.SHARED_PREFS,MODE_PRIVATE);  if (!this.mSharedPreferences.contains(Constants.USER_NAME)) {    Intent intent=new Intent(this,LoginActivity.class);    startActivity(intent);    finish();    return;  }  this.username=this.mSharedPreferences.getString(Constants.USER_NAME,"");  this.mCallNumET=(EditText)findViewById(R.id.call_num);  this.mUsernameTV=(TextView)findViewById(R.id.main_username);  this.mUsernameTV.setText(this.username);}  }
class C{  public IntegrationRuntimeException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override protected void commitToInput(){  AbstractClassSensorAssignment<?> assignment=getInput();  if (null != assignment) {    assignment.setInterf(interfaceButton.getSelection());    assignment.setSuperclass(superclassButton.getSelection());    assignment.setClassName(classText.getText());    if (StringUtils.isNotBlank(annotationText.getText())) {      assignment.setAnnotation(annotationText.getText());    } else {      assignment.setAnnotation(null);    }  }}  }
class C{  public static double dotProduct(double[] v,double[] u) throws Exception {  if (v.length != u.length) {    throw new Exception("Number of entries of v " + v.length + " does not match the number of entries of u "+ u.length);  }  double result=0;  for (int r=0; r < v.length; r++) {    result+=v[r] * u[r];  }  return result;}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public final void println(char[] buf,int offset,int length) throws IOException {  print(buf,offset,length);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  public ResumableHttpFileUploader build() throws IOException {  return new ResumableHttpFileUploader(this);}  }
class C{  public boolean equals(Object obj){  return compareTo(obj) == 0;}  }
class C{  static String buildKeySelection(int selectionCount){  String[] list=new String[selectionCount];  Arrays.fill(list,"?");  return KEY_COLUMN + " IN (" + TextUtils.join(", ",list)+ ")";}  }
class C{  public static int indexOf(double[] array,double[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  public boolean isValid(IGameState gameState){  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  if (col < 0)   return false;  if (col >= board.numColumns())   return false;  if (row < 0)   return false;  if (row >= board.numRows())   return false;  return board.isClear(col,row);}  }
class C{  public void testAbstractMethodPy3AddMeta(){  setLanguageLevel(LanguageLevel.PYTHON34);  checkAbstract(".my_method",".my_class_method");}  }
class C{  @Override public void close() throws IOException {  OutputStream stream=getStream();  if (stream == null) {    return;  }synchronized (stream) {    stream.flush();  }}  }
class C{  public PilotingRollData checkBogDown(MoveStep step,IHex curHex,Coords lastPos,Coords curPos,boolean isPavementStep){  PilotingRollData roll=new PilotingRollData(getId(),5,"entering boggy terrain");  int bgMod=curHex.getBogDownModifier(getMovementMode(),false);  final boolean onBridge=(curHex.terrainLevel(Terrains.BRIDGE) > 0) && (getElevation() == curHex.terrainLevel(Terrains.BRIDGE_ELEV));  if (!lastPos.equals(curPos) && (bgMod != TargetRoll.AUTOMATIC_SUCCESS) && (step.getMovementType(false) != EntityMovementType.MOVE_JUMP)&& (getMovementMode() != EntityMovementMode.HOVER)&& (getMovementMode() != EntityMovementMode.VTOL)&& (getMovementMode() != EntityMovementMode.WIGE)&& (step.getElevation() == 0)&& !isPavementStep&& !onBridge) {    roll.append(new PilotingRollData(getId(),bgMod,"avoid bogging down"));  } else {    roll.addModifier(TargetRoll.CHECK_FALSE,"Check false: Not entering bog-down terrain, " + "or jumping/hovering over such terrain");  }  return roll;}  }
class C{  public static void addActors(final Stage stage,final Iterable<Actor> actors){  if (actors != null) {    for (    final Actor actor : actors) {      stage.addActor(actor);    }  }}  }
class C{  public static void add(boolean expression,StringBuffer sb,String msg){  if (expression)   sb.append(msg);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (extendsName_1: ");  result.append(extendsName_1);  result.append(')');  return result.toString();}  }
class C{  @Override public float[] computeStitch(final float[] subinput){  return compute(subinput);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void writeDataToCsv(CsvFileSet fileSet,CsvKey key,String dataPrefix,int lines) throws Exception {  for (int i=0; i < lines; i++) {    CsvFile csvFile=fileSet.getCsvFile(key);    CsvWriter writer=csvFile.getWriter();    writer.put("tungsten_opcode","I");    writer.put("tungsten_seqno",new Integer(i).toString());    writer.put("tungsten_commit_timestamp",new Timestamp(System.currentTimeMillis()).toString());    writer.put("id","88");    writer.put("mydata",dataPrefix + i);    writer.flush();  }}  }
class C{  public void generateCode(BlockScope currentScope){}  }
class C{  private SpeechletResponse handleWhosThereIntent(final Session session){  String speechOutput="", repromptText="";  if (session.getAttributes().containsKey(SESSION_STAGE)) {    if ((Integer)session.getAttribute(SESSION_STAGE) == KNOCK_KNOCK_STAGE) {      int jokeID=(Integer)session.getAttribute(SESSION_JOKE_ID);      speechOutput=JOKE_LIST.get(jokeID).setup;      session.setAttribute(SESSION_STAGE,SETUP_STAGE);      repromptText="You can ask, " + speechOutput + " who?";    } else {      session.setAttribute(SESSION_STAGE,KNOCK_KNOCK_STAGE);      speechOutput="That's not how knock knock jokes work! <break time=\"0.3s\" /> Knock knock";      repromptText="You can ask who's there.";    }  } else {    speechOutput="Sorry, I couldn't correctly retrieve the joke. You can say, tell me a joke.";    repromptText="You can say, tell me a joke.";  }  return newAskResponse("<speak>" + speechOutput + "</speak>",true,repromptText,false);}  }
class C{  private static void d_uacmxx(double[] a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  Arrays.fill(c,init);  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n)   builtinAgg(a,c,aix,n,builtin);}  }
class C{  public void put(String key,ParseText text,ParseData data){  parseMap.put(new Text(key),new ParseImpl(text,data,key.equals(originalUrl)));}  }
class C{  public int hashCode(){  return a.hashCode() + b.hashCode();}  }
class C{  @Override public void executeScript(List<ScriptCommand> configurationScript){  String newLine=System.getProperty("line.separator");  StringBuffer buffer=new StringBuffer();  for (  ScriptCommand configuration : configurationScript) {    buffer.append(configuration.readScript());    buffer.append(newLine);  }  getLogger().debug("Sending CLI script: " + newLine + buffer.toString(),this.getClass().getName());  try {    File tempFile=File.createTempFile("jboss-",".cli");    tempFile.deleteOnExit();    getFileHandler().writeTextFile(tempFile.getAbsolutePath(),buffer.toString(),null);    executeScriptFiles(Arrays.asList(tempFile.getAbsolutePath()));  } catch (  IOException e) {    throw new CargoException("Cannot create temporary CLI script file.",e);  }}  }
class C{  public SparseDoubleVector(double[] values) throws IllegalArgumentException {  this.dimensionality=values.length;  int size=0;{    for (int i=0; i < values.length; i++) {      if (values[i] != 0.0f) {        size++;      }    }  }  this.indexes=new int[size];  this.values=new double[size];{    int pos=0;    for (int i=0; i < values.length; i++) {      double value=values[i];      if (value != 0.0f) {        this.indexes[pos]=i;        this.values[pos]=value;        pos++;      }    }  }}  }
class C{  public String lookup(String key){  if (map == null) {    return null;  }  Object obj=map.get(key);  if (obj == null) {    return StringUtils.EMPTY;  }  return obj.toString();}  }
class C{  public URI rdf(String entityId){  URIBuilder builder=builder();  builder.setPath(String.format(Locale.ROOT,"/wiki/Special:EntityData/%s.ttl",entityId));  builder.addParameter("nocache",Long.toString(new Date().getTime()));  builder.addParameter("flavor","dump");  return build(builder);}  }
class C{  public static Element createDSctx(Document doc,String prefix,String namespace){  if ((prefix == null) || (prefix.trim().length() == 0)) {    throw new IllegalArgumentException("You must supply a prefix");  }  Element ctx=doc.createElementNS(null,"namespaceContext");  ctx.setAttributeNS(Constants.NamespaceSpecNS,"xmlns:" + prefix.trim(),namespace);  return ctx;}  }
class C{  public static double nanosToMillis(long c){  return (c) / 1e6;}  }
class C{  private boolean usingCookies(){  return PropertyUtils.getProperty(config,Properties.REDIRECT_SCOPE_COOKIES,false);}  }
class C{  public static Object parse(String s){  StringReader in=new StringReader(s);  return parse(in);}  }
class C{  public static String map2TypeForConfig(String type){  if (type.equals("DB_LINK"))   return "DATABASE LINK";  if (type.equals("PROCOBJ"))   return "JOB";  return type.replace("_"," ");}  }
class C{  public static void drain(InputStream inStr) throws IOException {  byte[] bs=new byte[BUFFER_SIZE];  while (inStr.read(bs,0,bs.length) >= 0) {  }}  }
class C{  public static short toShortValue(double d){  return (short)d;}  }
class C{  public static void main(String[] args){  try {  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Reference(String className){  this.className=className;  addrs=new Vector<>();}  }
class C{  public boolean isBasicMap(){  return false;}  }
class C{  protected void numericalLayout(TupleSet ts){  if (!m_modelSet) {    m_dist[0]=DataLib.min(ts,m_field).getDouble(m_field);    m_dist[1]=DataLib.max(ts,m_field).getDouble(m_field);    double lo=m_dist[0], hi=m_dist[1];    if (m_model == null) {      m_model=new NumberRangeModel(lo,hi,lo,hi);    } else {      ((NumberRangeModel)m_model).setValueRange(lo,hi,lo,hi);    }  } else {    m_dist[0]=((Number)m_model.getLowValue()).doubleValue();    m_dist[1]=((Number)m_model.getHighValue()).doubleValue();  }  Iterator iter=m_vis.items(m_group,m_filter);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    double v=item.getDouble(m_field);    double f=MathLib.interp(m_scale,v,m_dist);    set(item,f);  }}  }
class C{  public void initialize(int nodeCount,int patternCount,int matrixCount,boolean integrateCategories){  this.nodeCount=nodeCount;  this.patternCount=patternCount;  this.matrixCount=matrixCount;  this.integrateCategories=integrateCategories;  if (integrateCategories) {    partialsSize=patternCount * stateCount * matrixCount;  } else {    partialsSize=patternCount * stateCount;  }  partials=new BigDecimal[2][nodeCount][];  currentMatricesIndices=new int[nodeCount];  storedMatricesIndices=new int[nodeCount];  currentPartialsIndices=new int[nodeCount];  storedPartialsIndices=new int[nodeCount];  states=new int[nodeCount][];  for (int i=0; i < nodeCount; i++) {    partials[0][i]=null;    partials[1][i]=null;    states[i]=null;  }  matrixSize=stateCount * stateCount;  matrices=new BigDecimal[2][nodeCount][matrixCount * matrixSize];}  }
class C{  private static byte[] longToByteArray(long l){  byte[] retVal=new byte[8];  for (int i=0; i < 8; i++) {    retVal[i]=(byte)l;    l>>=8;  }  return retVal;}  }
class C{  @Override public void openElement(String tagName){  int count=0;  NodeList list=current.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if ((node instanceof Element) && ((Element)node).getTagName().equals(tagName)) {      current=node;      return;    }  }  throw new IllegalArgumentException("element not found:" + tagName);}  }
class C{  public static ResultCollector<?,?> executeFunction(final Function function,Object args,final DistributedMember targetMember){  Execution execution=null;  if (args != null) {    execution=FunctionService.onMember(targetMember).withArgs(args);  } else {    execution=FunctionService.onMember(targetMember);  }  ((AbstractExecution)execution).setIgnoreDepartedMembers(true);  return execution.execute(function);}  }
class C{  public void destroy(){  context.removeVisualizationListener(this);  context.removeResultListener(this);  for (  Entry<VisualizationTask,Visualization> v : taskmap.entrySet()) {    Visualization vis=v.getValue();    if (vis != null) {      vis.destroy();    }  }  taskmap.clear();}  }
class C{  public void quickPop(int n){  m_firstFree-=n;}  }
class C{  public List<PropertyBean> makeListTipoNivelesIsad(){  List<PropertyBean> listaTiposNivelesIsad=new ArrayList<PropertyBean>();  listaTiposNivelesIsad.add(getPropertyBean(TipoNiveles.CLASIFICADOR_DE_FONDOS_VALUE));  listaTiposNivelesIsad.add(getPropertyBean(TipoNiveles.FONDOS_VALUE));  listaTiposNivelesIsad.add(getPropertyBean(TipoNiveles.CLASIFICADOR_DE_SERIES_VALUE));  listaTiposNivelesIsad.add(getPropertyBean(TipoNiveles.SERIE_VALUE));  listaTiposNivelesIsad.add(getPropertyBean(TipoNiveles.CLASIFICADOR_UNIDAD_DOCUMENTAL_VALUE));  listaTiposNivelesIsad.add(getPropertyBean(TipoNiveles.UNIDAD_DOCUMENTAL_VALUE));  return listaTiposNivelesIsad;}  }
class C{  public InputStream openSchema(String name) throws IOException {  return openResource(name);}  }
class C{  public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){  if (org == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);}  }
class C{  public void peekAddr(GPR reg,int idx){  asm.emitLAddr(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_ADDRESS + (idx << LOG_BYTES_IN_STACKSLOT),FP);}  }
class C{  private void createMgmtUsersProperties(){  if (!getUsers().isEmpty()) {    StringBuilder managementToken=new StringBuilder("# JBoss mgmt-users.properties file generated by CARGO\n");    for (    User user : getUsers()) {      managementToken.append(WildFlyUserUtils.generateUserPasswordLine(user,"ManagementRealm"));    }    getFileHandler().writeTextFile(getFileHandler().append(getHome(),"/configuration/mgmt-users.properties"),managementToken.toString(),"UTF-8");  }}  }
class C{  protected void verifyAuthorizedInTenantOrg(URI tenantId,StorageOSUser user){  if (!(tenantId.toString().equals(user.getTenantId()) || isSystemAdminOrMonitorUser() || _permissionsHelper.userHasGivenRole(user,tenantId,Role.TENANT_ADMIN))) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }}  }
class C{  public String tojstring(){  return array[index].tojstring();}  }
class C{  public void compressBlockDXT1(ColorBlock4x4 colorBlock,DXTCompressionAttributes attributes,BlockDXT1 dxtBlock){  if (colorBlock == null) {    String message=Logging.getMessage("nullValue.ColorBlockIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dxtBlock == null) {    String message=Logging.getMessage("nullValue.DXTBlockIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.chooseMinMaxColors(colorBlock,attributes,this.minColor,this.maxColor);  int color0=short565FromColor32(this.maxColor);  int color1=short565FromColor32(this.minColor);  if (color0 < color1) {    int tmp=color0;    color0=color1;    color1=tmp;  }  computeColorPalette4(color0,color1,this.palette);  dxtBlock.color0=color0;  dxtBlock.color1=color1;  dxtBlock.colorIndexMask=computePaletteIndices4(colorBlock,this.palette);}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  int len=in.readInt();  byte addr[]=new byte[len];  in.readFully(addr);  InetAddress inetAddr=InetAddress.getByAddress(addr);  int port=in.readInt();  this.hostName=DataSerializer.readString(in);  int flags=in.readUnsignedByte();  boolean sbEnabled=(flags & NPD_ENABLED_BIT) != 0;  boolean elCoord=(flags & COORD_ENABLED_BIT) != 0;  this.isPartial=(flags & PARTIAL_ID_BIT) != 0;  this.dcPort=in.readInt();  this.vmPid=in.readInt();  this.vmKind=in.readInt();  this.vmViewId=in.readInt();  this.groups=DataSerializer.readStringArray(in);  this.name=DataSerializer.readString(in);  this.uniqueTag=DataSerializer.readString(in);  String durableId=DataSerializer.readString(in);  int durableTimeout=DataSerializer.readInteger(in).intValue();  this.durableClientAttributes=new DurableClientAttributes(durableId,durableTimeout);  readVersion(flags,in);  netMbr=MemberFactory.newNetMember(inetAddr,port,sbEnabled,elCoord,version,new MemberAttributes(dcPort,vmPid,vmKind,vmViewId,name,groups,durableClientAttributes));  if (this.version >= Version.GFE_90.ordinal()) {    try {      netMbr.readAdditionalData(in);    } catch (    java.io.EOFException e) {    }  }  Assert.assertTrue(this.vmKind > 0);}  }
class C{  public static String searchReplace(String inputString,String searchString,String replaceString){  int i=inputString.indexOf(searchString);  if (i == -1) {    return inputString;  }  String r="";  r+=inputString.substring(0,i) + replaceString;  if (i + searchString.length() < inputString.length()) {    r+=searchReplace(inputString.substring(i + searchString.length()),searchString,replaceString);  }  return r;}  }
class C{  public int length(){  return ref.length;}  }
class C{  public static void doRedirects(){  loggerImpl.doRedirects();}  }
class C{  private String[] splitSeparator(String sep,String s){  Vector v=new Vector();  int tokenStart=0;  int tokenEnd=0;  while ((tokenEnd=s.indexOf(sep,tokenStart)) != -1) {    v.addElement(s.substring(tokenStart,tokenEnd));    tokenStart=tokenEnd + 1;  }  v.addElement(s.substring(tokenStart));  String[] retVal=new String[v.size()];  v.copyInto(retVal);  return retVal;}  }
class C{  public CompiereColor(String textureURL,Color taint,float compositeAlpha){  if (textureURL == null || taint == null)   throw new java.lang.IllegalArgumentException(EXCEPTION_TEXT);  m_type=TYPE_TEXTURE;  setTextureURL(textureURL);  m_primaryColor=taint;  m_compositeAlpha=compositeAlpha;}  }
class C{  public ServiceChannel createServiceChannel(String connectUrl,String endpointUri) throws ServiceResultException {  return new ServiceChannel(createSecureChannel(connectUrl,endpointUri));}  }
class C{  public static int decode(byte[] data,OutputStream out) throws IOException {  int outLen=0;  byte[] cache=new byte[INPUT_BYTES_PER_CHUNK];  int cachedBytes=0;  for (  byte b : data) {    final byte d=DECODING_TABLE[MASK_BYTE_UNSIGNED & b];    if (d == INVALID_BYTE) {      continue;    }    cache[cachedBytes++]=d;    if (cachedBytes == INPUT_BYTES_PER_CHUNK) {      final byte b1=cache[0];      final byte b2=cache[1];      final byte b3=cache[2];      final byte b4=cache[3];      if (b1 == PAD_BYTE || b2 == PAD_BYTE) {        throw new IOException("Invalid Base64 input: incorrect padding, first two bytes cannot be padding");      }      out.write((b1 << 2) | (b2 >> 4));      outLen++;      if (b3 != PAD_BYTE) {        out.write((b2 << 4) | (b3 >> 2));        outLen++;        if (b4 != PAD_BYTE) {          out.write((b3 << 6) | b4);          outLen++;        }      } else       if (b4 != PAD_BYTE) {        throw new IOException("Invalid Base64 input: incorrect padding, 4th byte must be padding if 3rd byte is");      }      cachedBytes=0;    }  }  if (cachedBytes != 0) {    throw new IOException("Invalid Base64 input: truncated");  }  return outLen;}  }
class C{  public double toNumber(org.w3c.dom.Node n){  int nodeHandle=getDTMHandleFromNode(n);  DTM dtm=getDTM(nodeHandle);  XString xobj=(XString)dtm.getStringValue(nodeHandle);  return xobj.num();}  }
class C{  public SetGetAdd(){  onlyInclude=null;}  }
class C{  public byte[] encrypt(FacesContext facesContext,byte[] bytes){  byte[] securedata=null;  try {    SecureRandom rand=new SecureRandom();    byte[] iv=new byte[16];    rand.nextBytes(iv);    IvParameterSpec ivspec=new IvParameterSpec(iv);    Cipher encryptCipher=Cipher.getInstance(CIPHER_CODE);    SecretKey secKey=getSecretKey(facesContext);    encryptCipher.init(Cipher.ENCRYPT_MODE,secKey,ivspec);    Mac encryptMac=Mac.getInstance(MAC_CODE);    encryptMac.init(secKey);    encryptMac.update(iv);    byte[] encdata=encryptCipher.doFinal(bytes);    byte[] macBytes=encryptMac.doFinal(encdata);    byte[] tmp=concatBytes(macBytes,iv);    securedata=concatBytes(tmp,encdata);  } catch (  NoSuchAlgorithmException|NoSuchPaddingException|InvalidKeyException|InvalidAlgorithmParameterException|IllegalStateException|IllegalBlockSizeException|BadPaddingException e) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,"Unexpected exception initializing encryption." + "  No encryption will be performed.",e);    }    return null;  }  return securedata;}  }
class C{  private synchronized QueueElement dequeue() throws InterruptedException {  while (tail == null)   wait();  QueueElement elt=tail;  tail=elt.prev;  if (tail == null) {    head=null;  } else {    tail.next=null;  }  elt.prev=elt.next=null;  return elt;}  }
class C{  public void notifyStartedExecutionOf(Description description){  testsExecutionStatus.executionStarted(description);  testTreeViewer.setInput(this.dataRoot);}  }
class C{  protected SnmpCachedData updateCachedDatas(Object userData){  long[] id=JvmThreadingImpl.getThreadMXBean().getAllThreadIds();  final long time=System.currentTimeMillis();  SnmpOid indexes[]=new SnmpOid[id.length];  final TreeMap<SnmpOid,Object> table=new TreeMap<>(SnmpCachedData.oidComparator);  for (int i=0; i < id.length; i++) {    log.debug("","Making index for thread id [" + id[i] + "]");    SnmpOid oid=makeOid(id[i]);    table.put(oid,oid);  }  return new SnmpCachedData(time,table);}  }
class C{  @Override public void verifyText(VerifyEvent event){  Text text=(Text)getCellEditor().getControl();  String oldText=text.getText();  String leftText=oldText.substring(0,event.start);  String rightText=oldText.substring(event.end,oldText.length());  GC gc=new GC(text);  if (leftText == null)   leftText="";  if (rightText == null)   rightText="";  String s=leftText + event.text + rightText;  Point size=gc.textExtent(leftText + event.text + rightText);  gc.dispose();  if (size.x != 0)   size=text.computeSize(size.x,SWT.DEFAULT); else {    size.x=size.y;  }  getCellEditor().getControl().setSize(size.x,size.y);}  }
class C{  public static <T>T min(Iterable<T> items){  T answer=null;  for (  T value : items) {    if (value != null) {      if (answer == null || ScriptBytecodeAdapter.compareLessThan(value,answer)) {        answer=value;      }    }  }  return answer;}  }
class C{  public void rotateToDirection(float xRot,float yRot,float zRot){  glPanel.rotateToDirection(xRot,yRot,zRot);}  }
class C{  public CountIndexTask(final String termText,final int termNdx,final int numTerms,final boolean prefixMatch,final double queryTermWeight,final FullTextIndex<V> searchEngine){  super(termText,termNdx,numTerms,prefixMatch,queryTermWeight,searchEngine);  if (log.isDebugEnabled())   log.debug("termText=[" + termText + "], prefixMatch="+ prefixMatch+ ", queryTermWeight="+ queryTermWeight+ "\nfromKey="+ BytesUtil.toString(fromKey)+ "\n  toKey="+ BytesUtil.toString(toKey));  rangeCount=searchEngine.getIndex().rangeCount(fromKey,toKey);}  }
class C{  @Override public void run(){  final Thread myThread=currentThread();  final int index;synchronized (this) {    index=lastDirectiveIndex;    checkState(runState == PAUSED_AT_GO_TO || runState == CANCEL_REQUESTED,"Illegal call of Runnable.run()");    lastDirectiveIndex=-1;    if (checkCancellationLocked()) {      return;    }    runState=RUNNING;    currentThread=myThread;  }  runFlowFrom(continueFromGoTo(directives,index),true);  Thread.interrupted();synchronized (this) {    if (currentThread == myThread) {      currentThread=null;    }  }}  }
class C{  protected void onDeleteComplete(int token,Object cookie,int result){  if (localLOGV) {    Log.d(TAG,"########## default onDeleteComplete");  }}  }
class C{  public void deletePerspective(final String name){  if (perspectives.containsKey(name)) {    deletePerspective(perspectives.get(name));  }}  }
class C{  public Node parse(String uri) throws IOException, SAXException {  InputSource is=new InputSource(uri);  getXMLReader().parse(is);  return parent;}  }
class C{  public BasicHDU<?>[] read() throws FitsException {  readToEnd();  int size=getNumberOfHDUs();  if (size == 0) {    return new BasicHDU<?>[0];  }  return this.hduList.toArray(new BasicHDU<?>[size]);}  }
class C{  static Diamond buildDiamond(BasicBlock bb){  if (bb.getNumberOfNormalOut() != 2)   return null;  Enumeration<BasicBlock> outNodes=bb.getNormalOut();  BasicBlock out1=outNodes.nextElement();  BasicBlock out2=outNodes.nextElement();  int out1In=out1.getNumberOfIn();  int out2In=out2.getNumberOfIn();  if (out1In == 1 && out2In == 1) {    if (out1.getNumberOfNormalOut() == 1 && out2.getNumberOfNormalOut() == 1) {      BasicBlock b1=out1.getNormalOut().nextElement();      BasicBlock b2=out2.getNormalOut().nextElement();      if (b1 == b2) {        return fourElementDiamond(bb,out1,out2,b1);      }    }  } else   if (out1In == 1) {    if (out1.getNumberOfNormalOut() == 1) {      BasicBlock b1=out1.getNormalOut().nextElement();      if (b1 == out2) {        return threeElementDiamond(bb,out1,out2);      }    }  } else   if (out2In == 1) {    if (out2.getNumberOfNormalOut() == 1) {      BasicBlock b2=out2.getNormalOut().nextElement();      if (b2 == out1) {        return threeElementDiamond(bb,out2,out1);      }    }  }  return null;}  }
class C{  public void addViewAndShow(View view){  mRelativeLayout.addView(view);  mOverlay.show();}  }
class C{  private void runReadTest(byte[] input,CompressionMode mode) throws IOException {  runReadTest(input,mode,mode);}  }
class C{  @JsonCreator public static TriggerType fromString(String name){  for (  TriggerType t : TriggerType.values()) {    if (t.toString().equalsIgnoreCase(name)) {      return t;    }  }  throw new IllegalArgumentException("Trigger Type does not exist.");}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("The WbXmlEventReader is not modifiable!");}  }
class C{  public Observable<ReactiveXCameraData> oneShotRequest(){  return new TakeOneShotRequest(reactiveXCamera).get();}  }
class C{  public ResidualsWrapper(DataWrapper data,DagWrapper dagWrapper,Parameters params){  DataModelList list=data.getDataModelList();  DataModelList newList=new DataModelList();  for (  DataModel dataModel : list) {    if (!(dataModel instanceof DataSet)) {      throw new IllegalArgumentException("The data must be a rectangular dataset");    }    DataSet dataSet=(DataSet)dataModel;    Graph dag=dagWrapper.getGraph();    dataSet=RegressionUtils.residuals(dataSet,dag);    newList.add(dataSet);  }  this.setDataModel(newList);  this.setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Parent data in which each column has been replaced by its regression residuals.",getDataModelList());}  }
class C{  public void removeField(SootField f){  checkLevel(SIGNATURES);  if (!f.isDeclared() || f.getDeclaringClass() != this)   throw new RuntimeException("did not declare: " + f.getName());  fields.remove(f);  f.isDeclared=false;}  }
class C{  private void resetSelectionStates(){  mSelectionType=SelectionType.UNDETERMINED;  mSelectedText=null;  mWasTapGestureDetected=false;}  }
class C{  public static boolean raycast(Ray ray,double maxLength,Segment segment,Transform transform,Raycast raycast){  Vector2 p0=ray.getStart();  Vector2 d0=ray.getDirectionVector();  Vector2 p1=transform.getTransformed(segment.getPoint1());  Vector2 p2=transform.getTransformed(segment.getPoint2());  Vector2 d1=p1.to(p2);  if (segment.contains(p0,transform))   return false;  Vector2 p0ToP1=p1.difference(p0);  double num=d1.cross(p0ToP1);  double den=d1.cross(d0);  if (Math.abs(den) <= Epsilon.E) {    Vector2 n=d0.cross(1.0);    double nDotP0=n.dot(p0);    double nDotP1=n.dot(p1);    if (Math.abs(nDotP0 - nDotP1) < Epsilon.E) {      double d0DotP0=d0.dot(p0);      double d0DotP1=d0.dot(p1);      double d0DotP2=d0.dot(p2);      if (d0DotP1 < 0.0 || d0DotP2 < 0.0) {        return false;      }      double d=0.0;      Vector2 p=null;      if (d0DotP1 < d0DotP2) {        d=d0DotP1 - d0DotP0;        p=p1.copy();      } else {        d=d0DotP2 - d0DotP0;        p=p2.copy();      }      if (maxLength > 0.0 && d > maxLength) {        return false;      }      raycast.distance=d;      raycast.point=p;      raycast.normal=d0.getNegative();      return true;    } else {      return false;    }  }  double t=num / den;  if (t < 0.0) {    return false;  }  if (maxLength > 0.0 && t > maxLength) {    return false;  }  double s=(t * d0.x + p0.x - p1.x) / d1.x;  if (s < 0.0 || s > 1.0) {    return false;  }  Vector2 p=d0.product(t).add(p0);  Vector2 l=p1.to(p2);  l.normalize();  l.right();  double lDotD=l.dot(d0);  if (lDotD > 0.0) {    l.negate();  }  raycast.point=p;  raycast.normal=l;  raycast.distance=t;  return true;}  }
class C{  public void defineLocalValue() throws IOException {  print("defineLocalValue",null);}  }
class C{  private void removeConsist(String message){  List<String> header=Arrays.asList(message.split("<;>"));  Consist consist=null;  try {    consist=manager.getConsist(stringToDcc(header.get(1)));    while (!consist.getConsistList().isEmpty()) {      DccLocoAddress loco=consist.getConsistList().get(0);      if (log.isDebugEnabled()) {        log.debug("Remove loco: " + loco + ", from consist: "+ consist.getConsistAddress().toString());      }      consist.remove(loco);    }  } catch (  NullPointerException noCon) {    log.warn("Consist: " + header.get(1) + " not found. Cannot delete.");    return;  }  try {    manager.delConsist(stringToDcc(header.get(1)));  } catch (  NullPointerException noCon) {    log.warn("Consist: " + header.get(1) + " not found. Cannot delete.");    return;  }  writeFile();}  }
class C{  @Override public void clear(){  Entry tab[]=table;  modCount++;  for (int index=tab.length; --index >= 0; ) {    tab[index]=null;  }  count=0;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static long toLongValue(char c){  return c;}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  public static String toJSON(Object obj) throws AppCatalogException {  try {    ObjectMapper mapper=new ObjectMapper();    return mapper.writeValueAsString(obj);  } catch (  JsonMappingException e) {    throw new AppCatalogException("Error occurred while mapping class to json",e);  }catch (  JsonGenerationException e) {    throw new AppCatalogException("Error occurred while generating json",e);  }catch (  IOException e) {    throw new AppCatalogException("Error occurred while reading the stream",e);  }}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  private static ConstantOperand boxConstantObjectAsOperand(Object x,TypeReference t){  if (VM.VerifyAssertions)   VM._assert(!t.isUnboxedType());  if (x == null) {    throw new Error("Field of type: " + t + " is null");  }  if (t.isIntType()) {    return IC((Integer)x);  } else   if (t.isBooleanType()) {    return IC((Boolean)x ? 1 : 0);  } else   if (t.isByteType()) {    return IC((Byte)x);  } else   if (t.isCharType()) {    return IC((Character)x);  } else   if (t.isShortType()) {    return IC((Short)x);  } else   if (t.isLongType()) {    return LC((Long)x);  } else   if (t.isFloatType()) {    return FC((Float)x);  } else   if (t.isDoubleType()) {    return DC((Double)x);  } else   if (x instanceof String) {    x=((String)x).intern();    return new ObjectConstantOperand(x,Offset.zero());  } else   if (x instanceof Class) {    return new ObjectConstantOperand(x,Offset.zero());  } else {    return new ObjectConstantOperand(x,Offset.zero());  }}  }
class C{  public GraphNodeLocked(Node modelNode){  setModelNode(modelNode);  if (modelNode.getNodeType() != NodeType.LATENT) {    throw new IllegalArgumentException("GraphNodeLatent requires " + "a GraphNode of type NodeType.LATENT.");  }  setDisplayComp(new LatentDisplayComp(modelNode.getName()));}  }
class C{  @Override public void sessionCreated(NextFilter nextFilter,IoSession session) throws Exception {  if (profileSessionCreated) {    long start=timeNow();    nextFilter.sessionCreated(session);    long end=timeNow();    sessionCreatedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionCreated(session);  }}  }
class C{  public static boolean verify(String signedRequestHex,String stringToSign,Certificate certificate) throws DecoderException, InvalidKeyException, SignatureException {  return verify(signedRequestHex,stringToSign,certificate.getPublicKey());}  }
class C{  public IgniteInternalFuture<?> awaitAckAsync(UUID nodeId){  TxFinishSync sync=nodeMap.get(nodeId);  if (sync == null)   return null;  return sync.awaitAckAsync();}  }
class C{  private static String makeName(String str,int start,int end) throws ParseException {  String name=str.substring(start,end);  if (!Naming.isNcname(name))   throw new ParseException("invalid_name");  return name;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(getArg0AsString(xctxt).length());}  }
class C{  public void writeAll(List<String[]> allLines){  for (  String[] line : allLines) {    writeNext(line);  }}  }
class C{  public static int findNonMarkNorOtherCharacter(String text,int column){  if (column + 1 >= text.length()) {    return text.length() + 1;  }  MatchResult match=RegExpUtils.findMatchAfterIndex(UnicodeUtils.regexpNotMarkOrOtherExcludingTabAndNewline,text,column);  if (match == null) {    return text.length() + 1;  } else {    return match.getIndex();  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @LogMessageDoc(level="ERROR",message="Failed to clear all flows on switch {switch}",explanation="An I/O error occured while trying send " + "topology discovery packet",recommendation=LogMessageDoc.CHECK_SWITCH) public void doMultiActionPacketOut(byte[] packetData,IOFSwitch sw,Set<OFPort> ports,FloodlightContext cntx){  if (ports == null)   return;  if (packetData == null || packetData.length <= 0)   return;  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  for (  OFPort p : ports) {    actions.add(sw.getOFFactory().actions().output(p,0));  }  pob.setActions(actions);  pob.setBufferId(OFBufferId.NO_BUFFER);  pob.setInPort(OFPort.ZERO);  pob.setData(packetData);  if (log.isTraceEnabled()) {    log.trace("write broadcast packet on switch-id={} " + "interaces={} packet-data={} packet-out={}",new Object[]{sw.getId(),ports,packetData,pob.build()});  }  sw.write(pob.build(),LogicalOFMessageCategory.MAIN);}  }
class C{  public Graph search(List<Node> nodes){  TetradLogger.getInstance().log("info","Starting TimeSeriesLagSearch.");  TetradLogger.getInstance().log("info","Independence test = " + independenceTest + ".");  long startTime=System.currentTimeMillis();  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List<Node> allNodes=getIndependenceTest().getVariables();  if (!allNodes.containsAll(nodes)) {    throw new IllegalArgumentException("All of the given nodes must " + "be in the domain of the independence test provided.");  }  graph=new EdgeListGraph(nodes);  graph.fullyConnect(Endpoint.TAIL);  Fas fas=new Fas(graph,getIndependenceTest());  fas.setKnowledge(getKnowledge());  fas.setDepth(0);  fas.search();  orientUnshieldedTriples(knowledge,getIndependenceTest(),3);  TetradLogger.getInstance().log("graph","\nReturning this graph: " + graph);  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - startTime;  TetradLogger.getInstance().log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  TetradLogger.getInstance().log("info","Finishing CPC algorithm.");  logTriples();  TetradLogger.getInstance().flush();  return graph;}  }
class C{  public synchronized int size(){  return elementCount;}  }
class C{  public void requestSent(){  Log.v(LOGTAG,"TestEventHandler:requestSent()");  expects[TEST_REQUEST_SENT]=false;  eventsReceived[TEST_REQUEST_SENT]=true;  if (notExpecting[TEST_REQUEST_SENT]) {    expectDetails.append("Request sent event received but not expected");    expectDetails.append("\r\n");  }  if (useLowLevel) {    if (delayResponse) {synchronized (syncObj) {        syncObj.notifyAll();      }    } else {    }  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sin(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean computeCircleThroughPoints(Vec4 p0,Vec4 p1,Vec4 p2,Vec4[] centerOut,Vec4[] axisOut,double[] radiusOut){  if (p0 == null || p1 == null || p2 == null) {    String msg=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 v0=p1.subtract3(p0);  Vec4 v1=p2.subtract3(p1);  Vec4 v2=p2.subtract3(p0);  double d0=v0.dot3(v2);  double d1=-v0.dot3(v1);  double d2=v1.dot3(v2);  double t0=d1 + d2;  double t1=d0 + d2;  double t2=d0 + d1;  double e0=d0 * t0;  double e1=d1 * t1;  double e2=d2 * t2;  double max_e=Math.max(Math.max(e0,e1),e2);  double min_e=Math.min(Math.min(e0,e1),e2);  double E=e0 + e1 + e2;  double tolerance=1e-6;  if (Math.abs(E) <= tolerance * (max_e - min_e))   return false;  double radiusSquared=0.5d * t0 * t1* t2 / E;  if (radiusSquared < 0d)   return false;  double radius=Math.sqrt(radiusSquared);  Vec4 center=p0.multiply3(e0 / E);  center=center.add3(p1.multiply3(e1 / E));  center=center.add3(p2.multiply3(e2 / E));  Vec4 axis=v2.cross3(v0);  axis=axis.normalize3();  if (centerOut != null)   centerOut[0]=center;  if (axisOut != null)   axisOut[0]=axis;  if (radiusOut != null)   radiusOut[0]=radius;  return true;}  }
class C{  protected Paint buildGradient(Element paintElement,Element paintedElement,GraphicsNode paintedNode,MultipleGradientPaint.CycleMethodEnum spreadMethod,MultipleGradientPaint.ColorSpaceEnum colorSpace,AffineTransform transform,Color[] colors,float[] offsets,BridgeContext ctx){  String x1Str=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_X1_ATTRIBUTE,ctx);  if (x1Str.length() == 0) {    x1Str=SVG_LINEAR_GRADIENT_X1_DEFAULT_VALUE;  }  String y1Str=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_Y1_ATTRIBUTE,ctx);  if (y1Str.length() == 0) {    y1Str=SVG_LINEAR_GRADIENT_Y1_DEFAULT_VALUE;  }  String x2Str=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_X2_ATTRIBUTE,ctx);  if (x2Str.length() == 0) {    x2Str=SVG_LINEAR_GRADIENT_X2_DEFAULT_VALUE;  }  String y2Str=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_Y2_ATTRIBUTE,ctx);  if (y2Str.length() == 0) {    y2Str=SVG_LINEAR_GRADIENT_Y2_DEFAULT_VALUE;  }  short coordSystemType;  String s=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_GRADIENT_UNITS_ATTRIBUTE,ctx);  if (s.length() == 0) {    coordSystemType=SVGUtilities.OBJECT_BOUNDING_BOX;  } else {    coordSystemType=SVGUtilities.parseCoordinateSystem(paintElement,SVG_GRADIENT_UNITS_ATTRIBUTE,s,ctx);  }  SVGContext bridge=BridgeContext.getSVGContext(paintedElement);  if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX && bridge instanceof AbstractGraphicsNodeBridge) {    Rectangle2D bbox=((AbstractGraphicsNodeBridge)bridge).getBBox();    if (bbox != null && bbox.getWidth() == 0 || bbox.getHeight() == 0) {      return null;    }  }  if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX) {    transform=SVGUtilities.toObjectBBox(transform,paintedNode);  }  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,paintElement);  Point2D p1=SVGUtilities.convertPoint(x1Str,SVG_X1_ATTRIBUTE,y1Str,SVG_Y1_ATTRIBUTE,coordSystemType,uctx);  Point2D p2=SVGUtilities.convertPoint(x2Str,SVG_X2_ATTRIBUTE,y2Str,SVG_Y2_ATTRIBUTE,coordSystemType,uctx);  if (p1.getX() == p2.getX() && p1.getY() == p2.getY()) {    return colors[colors.length - 1];  } else {    return new LinearGradientPaint(p1,p2,offsets,colors,spreadMethod,colorSpace,transform);  }}  }
class C{  protected DisplayComposer drawer(@NonNull Drawer drawer){  mDrawer=drawer;  return new DisplayComposer();}  }
class C{  public ButtonColors(Color top,Color left,Color edge,Color shadow,Color interior){  this.top=top;  this.left=left;  this.edge=edge;  this.shadow=shadow;  this.interior=interior;}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  AxisState state;  if (!isVisible()) {    state=new AxisState(cursor);    List ticks=refreshTicks(g2,state,dataArea,edge);    state.setTicks(ticks);    return state;  }  state=drawTickMarksAndLabels(g2,cursor,plotArea,dataArea,edge);  if (getAttributedLabel() != null) {    state=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,state);  } else {    state=drawLabel(getLabel(),g2,plotArea,dataArea,edge,state);  }  createAndAddEntity(cursor,state,dataArea,edge,plotState);  return state;}  }
class C{  public synchronized void postDeregister(){  if (timer != null) {    try {      timer.cancel();    } catch (    Exception x) {      if (LOG.isLoggable(Level.FINEST))       LOG.log(Level.FINEST,"Failed to cancel timer",x); else       if (LOG.isLoggable(Level.FINE))       LOG.fine("Failed to cancel timer: " + x);    } finally {      timer=null;    }  }}  }
class C{  public int indexOfAnyBut(final CharSet s){  return indexOfAnyOf(s,0);}  }
class C{  private void validateDistributedEvictionAttributes(final EvictionAttributes prconfEa){  final EvictionAttributes ea=pr.getAttributes().getEvictionAttributes();  Assert.assertTrue(ea != null);  Assert.assertTrue(prconfEa != null);  final boolean equivAlgoAndAction=ea.getAlgorithm().equals(prconfEa.getAlgorithm()) && ea.getAction().equals(prconfEa.getAction());  if (!equivAlgoAndAction) {    throw new IllegalStateException("For Partitioned Region " + pr.getFullPath() + " the configured EvictionAttributes "+ ea+ EVICTION_ATTRIBUTES_ARE_INCOMPATIBLE_MESSAGE+ prconfEa);  } else {    if (ea.getAction().isLocalDestroy()) {      if (!ea.getAlgorithm().isLRUHeap() && ea.getMaximum() != prconfEa.getMaximum()) {        logger.warn(LocalizedMessage.create(LocalizedStrings.PartitionedRegion_0_EVICTIONATTRIBUTES_1_DO_NOT_MATCH_WITH_OTHER_2,new Object[]{pr.getFullPath(),ea,prconfEa}));      }    }  }}  }
class C{  protected void computeSubdivisions(DrawContext dc,ShapeData shapeData){  int minDivisions=0;  int maxDivisions=6;  if (shapeData.getExtent() != null) {    for (int divisions=minDivisions; divisions <= maxDivisions; divisions++) {      this.subdivisions=divisions;      if (this.sufficientDetail(dc,divisions,shapeData))       break;    }  }}  }
class C{  public void initExtensionFileConfig(){  List list=_document.selectNodes(ConfigurationExtensionFileKeys.KEY_EXTENSIONS_FILES_CONFIGURATION);  if (list != null && !list.isEmpty()) {    extensionFileConfig=new HashMap();    FileExtensionConf fileConfig=null;    for (Iterator it=list.iterator(); it.hasNext(); ) {      Element element=(Element)it.next();      fileConfig=getFileConfig(element);      extensionFileConfig.put(fileConfig.getExtension(),fileConfig);    }  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public int coveredLength(String sequence){  final MergedIntervals mergedIntervals=mSequences.get(sequence);  return mergedIntervals == null ? 0 : mergedIntervals.totalLength();}  }
class C{  public static TermIterator create(JCas jcas,String featurePath,boolean convertToLowercase) throws AnalysisEngineProcessException {  try {    return new TermIterator(FeaturePathFactory.select(jcas.getCas(),featurePath),convertToLowercase);  } catch (  FeaturePathException e) {    throw new AnalysisEngineProcessException(e);  }}  }
class C{  @Override public E pollLast(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public String formatPhone(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  log.info("");  Integer location_int=(Integer)mField.getValue();  String phone_frm=null;  if (location_int != null)   phone_frm=DB.getSQLValueString(null,"SELECT ExpressionPhone FROM C_Country c, C_Location l WHERE c.C_Country_ID = l.C_Country_ID AND l.C_location_ID = ?",location_int);  GridField fPhone=mTab.getField(MBPartnerLocation.COLUMNNAME_Phone);  MColumn colPhone=null;  if (fPhone != null)   colPhone=MColumn.get(Env.getCtx(),fPhone.getAD_Column_ID());  GridField fPhone2=mTab.getField(MBPartnerLocation.COLUMNNAME_Phone2);  MColumn colPhone2=null;  if (fPhone2 != null)   colPhone2=MColumn.get(Env.getCtx(),fPhone2.getAD_Column_ID());  GridField fFax=mTab.getField(MBPartnerLocation.COLUMNNAME_Fax);  MColumn colFax=null;  if (fFax != null)   colFax=MColumn.get(Env.getCtx(),fFax.getAD_Column_ID());  if (colPhone != null && (colPhone.getVFormat() == null || colPhone.getVFormat().length() == 0))   fPhone.setVFormat(phone_frm);  if (colPhone2 != null && (colPhone2.getVFormat() == null || colPhone2.getVFormat().length() == 0))   fPhone2.setVFormat(phone_frm);  if (colFax != null && (colFax.getVFormat() == null || colFax.getVFormat().length() == 0))   fFax.setVFormat(phone_frm);  return "";}  }
class C{  public boolean isOnConstraint(){  return isOnConstraint;}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public void read(DataInputStream in) throws IOException {  if (in.readInt() != FILE_VERSION) {  }  String[] names=new String[in.readShort()];  for (int i=0; i < names.length; i++) {    names[i]=in.readUTF();  }  int num=in.readShort();  for (int i=0; i < num; i++) {    short nameId=in.readShort();    int type=in.readByte();    String name=in.readUTF();    defEntity(names[nameId],type | GENERAL,name);  }  num=in.readShort();  for (int i=0; i < num; i++) {    short nameId=in.readShort();    int type=in.readByte();    byte flags=in.readByte();    ContentModel m=readContentModel(in,names);    String[] exclusions=readNameArray(in,names);    String[] inclusions=readNameArray(in,names);    AttributeList atts=readAttributeList(in,names);    defElement(names[nameId],type,((flags & 0x01) != 0),((flags & 0x02) != 0),m,exclusions,inclusions,atts);  }}  }
class C{  public Position(){  squares=new int[64];  for (int i=0; i < 64; i++)   squares[i]=Piece.EMPTY;  whiteMove=true;  castleMask=0;  epSquare=-1;  halfMoveClock=0;  fullMoveCounter=1;  hashKey=computeZobristHash();  wKingSq=bKingSq=-1;}  }
class C{  private int countOfMode(boolean data){  int count=0;  for (Node p=head; p != null; ) {    if (!p.isMatched()) {      if (p.isData != data)       return 0;      if (++count == Integer.MAX_VALUE)       break;    }    Node n=p.next;    if (n != p)     p=n; else {      count=0;      p=head;    }  }  return count;}  }
class C{  public static String duplicate(String source,int copies){  StringBuffer buf=new StringBuffer();  for (int i=0; i < copies; i++) {    buf.append(source);  }  return buf.toString();}  }
class C{  private static File createTempFile(String tempSubdirectoryName,String name) throws IOException {  String tempDirName=System.getProperty("java.io.tmpdir");  File tempSubDirectory=new File(tempDirName + File.separator + tempSubdirectoryName);  if (!tempSubDirectory.exists()) {    boolean createdDirectory=tempSubDirectory.mkdirs();    if (!createdDirectory) {      throw new IOException("Could not create directory for temporary file: " + tempSubDirectory);    }  }  String tempFileName=tempSubDirectory + File.separator + name;  File tempFile=new File(tempFileName);  return tempFile;}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> subSet(E start,E end){  return subSet(start,true,end,false);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrrMu.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="mu";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public void testGetAuditDataService(){  System.out.println("getAuditDataService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  AuditDataService result=instance.getAuditDataService();  assertEquals(mockAuditDataService,result);  setVerifyMode();}  }
class C{  public void addChild(ParseTreeNode child){  children.add(child);  child.setParent(this);}  }
class C{  public SVGOMAnimatedInteger(AbstractElement elt,String ns,String ln,int val){  super(elt,ns,ln);  defaultValue=val;}  }
class C{  @Nullable public GridNearTxRemote startNearRemoteTx(ClassLoader ldr,UUID nodeId,GridDhtTxPrepareRequest req) throws IgniteCheckedException {  if (!F.isEmpty(req.nearWrites())) {    GridNearTxRemote tx=ctx.tm().nearTx(req.version());    if (tx == null) {      tx=new GridNearTxRemote(ctx,req.topologyVersion(),ldr,nodeId,req.nearNodeId(),req.version(),null,req.system(),req.policy(),req.concurrency(),req.isolation(),req.isInvalidate(),req.timeout(),req.nearWrites(),req.txSize(),req.subjectId(),req.taskNameHash());      tx.writeVersion(req.writeVersion());      if (!tx.empty()) {        tx=ctx.tm().onCreated(null,tx);        if (tx == null || !ctx.tm().onStarted(tx))         throw new IgniteTxRollbackCheckedException("Attempt to start a completed transaction: " + tx);      }    } else     tx.addEntries(ldr,req.nearWrites());    tx.ownedVersions(req.owned());    tx.prepare();    if (req.last())     tx.state(PREPARED);    return tx;  }  return null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  void show(int layer,float alpha,long duration){  if (DEBUG)   Slog.v(TAG,"show: layer=" + layer + " alpha="+ alpha+ " duration="+ duration);  if (mDimSurface == null) {    Slog.e(TAG,"show: no Surface");    mTargetAlpha=mAlpha=0;    return;  }  final DisplayInfo info=mDisplayContent.getDisplayInfo();  final int dw=(int)(info.logicalWidth * 1.5);  final int dh=(int)(info.logicalHeight * 1.5);  final float xPos=-1 * dw / 6;  final float yPos=-1 * dh / 6;  if (mLastDimWidth != dw || mLastDimHeight != dh || mLayer != layer) {    try {      mDimSurface.setPosition(xPos,yPos);      mDimSurface.setSize(dw,dh);      mDimSurface.setLayer(layer);    } catch (    RuntimeException e) {      Slog.w(TAG,"Failure setting size or layer",e);    }    mLastDimWidth=dw;    mLastDimHeight=dh;    mLayer=layer;  }  long curTime=SystemClock.uptimeMillis();  final boolean animating=isAnimating();  if ((animating && (mTargetAlpha != alpha || durationEndsEarlier(duration))) || (!animating && mAlpha != alpha)) {    if (duration <= 0) {      setAlpha(alpha);    } else {      mStartAlpha=mAlpha;      mStartTime=curTime;      mDuration=duration;    }  }  if (DEBUG)   Slog.v(TAG,"show: mStartAlpha=" + mStartAlpha + " mStartTime="+ mStartTime);  mTargetAlpha=alpha;}  }
class C{  public void checkClientTrusted(X509Certificate[] chain,String authType){}  }
class C{  public boolean upField(EditorState editorState){  return upField(editorState,editorState.getCurrentField());}  }
class C{  public void doAbout(){  try {    StringBuffer message=new StringBuffer();    message.append("Product version: ");    message.append(ConfigProperties.getPropAsString("component.name.version"));    message.append("\nBuild Label:     ");    message.append(ConfigProperties.getPropAsString("component.name.base"));    message.append("\nBuild Time:      ");    message.append(ConfigProperties.getPropAsString("component.name.date"));    JOptionPane.showMessageDialog(this,message,"About Help",JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    this.setErrorMessage("Could not load about help.",ex.getMessage(),ex);  }}  }
class C{  public int flags(){  return pattern.flags();}  }
class C{  public RowSpec(Size size){  super(DEFAULT,size,NO_GROW);}  }
class C{  public OpenProjectEvent(String projectName){  this.projectName=projectName;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.NAMED_IMPORT_SPECIFIER;}  }
class C{  final long fullyRelease(Node node){  boolean failed=true;  try {    long savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      if (bis != null)       bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  final public void println(float v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void infoCode(String java){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,module,lineSeparator + "/**/" + java,null);  }}  }
class C{  public BusinessObjectDataKey createBusinessObjectDataKeyFromEntity(BusinessObjectDataEntity businessObjectDataEntity){  BusinessObjectDataKey businessObjectDataKey=new BusinessObjectDataKey();  businessObjectDataKey.setNamespace(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getNamespace().getCode());  businessObjectDataKey.setBusinessObjectDefinitionName(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getName());  businessObjectDataKey.setBusinessObjectFormatUsage(businessObjectDataEntity.getBusinessObjectFormat().getUsage());  businessObjectDataKey.setBusinessObjectFormatFileType(businessObjectDataEntity.getBusinessObjectFormat().getFileType().getCode());  businessObjectDataKey.setBusinessObjectFormatVersion(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectFormatVersion());  businessObjectDataKey.setPartitionValue(businessObjectDataEntity.getPartitionValue());  businessObjectDataKey.setSubPartitionValues(getSubPartitionValues(businessObjectDataEntity));  businessObjectDataKey.setBusinessObjectDataVersion(businessObjectDataEntity.getVersion());  return businessObjectDataKey;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPORTABLE_ELEMENT;}  }
class C{  protected void removeFromMapping(){  if (path != null) {    removeMapping(this);    for (int counter=getChildCount() - 1; counter >= 0; counter--)     ((FHTreeStateNode)getChildAt(counter)).removeFromMapping();  }}  }
class C{  private void rebuildCriteriumCacheMenu(){  m_previousCriteriaMenu.removeAll();  m_previousCriteriaMenu.setVisible(true);  for (  final CCachedExpressionTree tree : m_criteriumCache.getTrees()) {    m_previousCriteriaMenu.add(new JMenuItem(new CExecuteCachedCriterium(m_model.getGraph(),tree)));  }}  }
class C{  void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/redirect/",new RedirectHandler());  HttpContext ctx1=httpServer.createContext("/doStuff/",new HasAuthHandler());  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  public void subscribe(CimConnection cimConnection) throws Exception {  s_logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  s_logger.debug("Subscription Identifier for subscribe action :{}",_configuration.getSubscriptionsIdentifier());  cimConnection.subscribeForIndications(_configuration.getSubscriptionsIdentifier());  s_logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  void launchExternal(String url){  Intent popup=new Intent(sContext,GeoPopup.class);  popup.putExtra("url",url);  popup.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  sContext.startActivity(popup);}  }
class C{  void readLOG() throws IOException {  while (true) {    String S=isr.readLine();    if (S == null)     return;    if (S.startsWith("EOL"))     return;  }}  }
class C{  public static void assertNotNull(Object object){  assertNotNull(object,"");}  }
class C{  public static boolean isIndependentPooledAverage(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  double sum=0.0;  int numTests=0;  for (  IndependenceTest independenceTest : independenceTests) {    if (missingVariable(x,y,condSet,independenceTest))     continue;    List<Node> localCondSet=new ArrayList<>();    for (    Node node : condSet) {      localCondSet.add(independenceTest.getVariable(node.getName()));    }    independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);    double p=independenceTest.getPValue();    if (Double.isNaN(p))     continue;    sum+=p;    numTests++;  }  return (sum / numTests > alpha);}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public boolean isValid(){  return mCRC[0] == CRC.PASSED || mCRC[0] == CRC.CORRECTED;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.thermometerStroke,stream);  SerialUtilities.writePaint(this.thermometerPaint,stream);  SerialUtilities.writePaint(this.valuePaint,stream);  SerialUtilities.writePaint(this.mercuryPaint,stream);  SerialUtilities.writeStroke(this.subrangeIndicatorStroke,stream);  SerialUtilities.writeStroke(this.rangeIndicatorStroke,stream);  for (int i=0; i < 3; i++) {    SerialUtilities.writePaint(this.subrangePaint[i],stream);  }}  }
class C{  public void addTokensToFilterChain(FilterChain filterChain,Map<String,String> map){  for (  Map.Entry<String,String> entry : map.entrySet()) {    addTokenToFilterChain(filterChain,entry.getKey(),entry.getValue());  }}  }
class C{  public void testCase6(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={3,4,5,6,7,8,9};  byte rBytes[]={2,2,2,2,2,2,2};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void constructLopsQuantile() throws HopsException, LopsException {  if (_op != OpOp3.QUANTILE && _op != OpOp3.INTERQUANTILE)   throw new HopsException("Unexpected operation: " + _op + ", expecting "+ OpOp3.QUANTILE+ " or "+ OpOp3.INTERQUANTILE);  ExecType et=optFindExecType();  if (et == ExecType.MR) {    CombineBinary combine=CombineBinary.constructCombineLop(OperationTypes.PreSort,getInput().get(0).constructLops(),getInput().get(1).constructLops(),DataType.MATRIX,getValueType());    SortKeys sort=SortKeys.constructSortByValueLop(combine,SortKeys.OperationTypes.WithWeights,DataType.MATRIX,getValueType(),et);    ExecType et_pick=(getInput().get(2).getDataType() == DataType.SCALAR ? ExecType.CP : ExecType.MR);    PickByCount pick=new PickByCount(sort,getInput().get(2).constructLops(),getDataType(),getValueType(),(_op == Hop.OpOp3.QUANTILE) ? PickByCount.OperationTypes.VALUEPICK : PickByCount.OperationTypes.RANGEPICK,et_pick,false);    combine.getOutputParameters().setDimensions(getInput().get(0).getDim1(),getInput().get(0).getDim2(),getInput().get(0).getRowsInBlock(),getInput().get(0).getColsInBlock(),getInput().get(0).getNnz());    sort.getOutputParameters().setDimensions(getInput().get(0).getDim1(),getInput().get(0).getDim2(),getInput().get(0).getRowsInBlock(),getInput().get(0).getColsInBlock(),getInput().get(0).getNnz());    setOutputDimensions(pick);    setLineNumbers(pick);    setLops(pick);  } else {    SortKeys sort=SortKeys.constructSortByValueLop(getInput().get(0).constructLops(),getInput().get(1).constructLops(),SortKeys.OperationTypes.WithWeights,getInput().get(0).getDataType(),getInput().get(0).getValueType(),et);    PickByCount pick=new PickByCount(sort,getInput().get(2).constructLops(),getDataType(),getValueType(),(_op == Hop.OpOp3.QUANTILE) ? PickByCount.OperationTypes.VALUEPICK : PickByCount.OperationTypes.RANGEPICK,et,true);    sort.getOutputParameters().setDimensions(getInput().get(0).getDim1(),getInput().get(0).getDim2(),getInput().get(0).getRowsInBlock(),getInput().get(0).getColsInBlock(),getInput().get(0).getNnz());    setOutputDimensions(pick);    setLineNumbers(pick);    setLops(pick);  }}  }
class C{  protected boolean isSamePlant(Block block){  return block == this;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(hasSystem() ? getSystem() : "SYSTEM");  sb.append("_");  sb.append(hasSite() ? getSite() : "SITE");  sb.append("_");  sb.append(getName());  return sb.toString();}  }
class C{  public CSKLRBatch(double eta,KernelTrick kernel,double R,CSKLR.UpdateMode mode,CacheMode cacheMode){  super(kernel,cacheMode);  setEta(eta);  setR(R);  setMode(mode);}  }
class C{  private XNetMessage loadChars() throws java.io.IOException {  int i;  byte char1;  char1=readByteProtected(inpipe);  int len=(char1 & 0x0f) + 2;  if ((char1 & 0xff) == Z21Constants.LAN_X_GET_TURNOUT_INFO) {    len=4;  }  XNetMessage msg=new XNetMessage(len);  msg.setElement(0,char1 & 0xFF);  for (i=1; i < len; i++) {    char1=readByteProtected(inpipe);    msg.setElement(i,char1 & 0xFF);  }  return msg;}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  public RowCount(){}  }
class C{  public void update(GMSSRandom gmssRandom,byte[] leaf){  if (this.isFinished) {    System.err.println("No more update possible for treehash instance!");    return;  }  if (!this.isInitialized) {    System.err.println("Treehash instance not initialized before update");    return;  }  byte[] help=new byte[this.messDigestTree.getDigestSize()];  int helpHeight=-1;  gmssRandom.nextSeed(this.seedActive);  if (this.firstNode == null) {    this.firstNode=leaf;    this.firstNodeHeight=0;  } else {    help=leaf;    helpHeight=0;    while (this.tailLength > 0 && helpHeight == ((Integer)heightOfNodes.lastElement()).intValue()) {      byte[] toBeHashed=new byte[this.messDigestTree.getDigestSize() << 1];      System.arraycopy(this.tailStack.lastElement(),0,toBeHashed,0,this.messDigestTree.getDigestSize());      this.tailStack.removeElementAt(this.tailStack.size() - 1);      this.heightOfNodes.removeElementAt(this.heightOfNodes.size() - 1);      System.arraycopy(help,0,toBeHashed,this.messDigestTree.getDigestSize(),this.messDigestTree.getDigestSize());      messDigestTree.update(toBeHashed,0,toBeHashed.length);      help=new byte[messDigestTree.getDigestSize()];      messDigestTree.doFinal(help,0);      helpHeight++;      this.tailLength--;    }    this.tailStack.addElement(help);    this.heightOfNodes.addElement(Integers.valueOf(helpHeight));    this.tailLength++;    if (((Integer)heightOfNodes.lastElement()).intValue() == this.firstNodeHeight) {      byte[] toBeHashed=new byte[this.messDigestTree.getDigestSize() << 1];      System.arraycopy(this.firstNode,0,toBeHashed,0,this.messDigestTree.getDigestSize());      System.arraycopy(this.tailStack.lastElement(),0,toBeHashed,this.messDigestTree.getDigestSize(),this.messDigestTree.getDigestSize());      this.tailStack.removeElementAt(this.tailStack.size() - 1);      this.heightOfNodes.removeElementAt(this.heightOfNodes.size() - 1);      messDigestTree.update(toBeHashed,0,toBeHashed.length);      this.firstNode=new byte[messDigestTree.getDigestSize()];      messDigestTree.doFinal(this.firstNode,0);      this.firstNodeHeight++;      this.tailLength=0;    }  }  if (this.firstNodeHeight == this.maxHeight) {    this.isFinished=true;  }}  }
class C{  public RemoteScheduler(String schedId,String host,int port){  this.schedId=schedId;  this.rmiHost=host;  this.rmiPort=port;}  }
class C{  public long startTime(){  return DistributionStats.getStatTime();}  }
class C{  public static File zip(String path) throws IOException {  File file=new File(path);  if (!file.exists()) {    return null;  }  return zip(file);}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public static void sort(Comparable[] a,int lo,int hi){  for (int i=lo; i <= hi; i++) {    for (int j=i; j > lo && less(a[j],a[j - 1]); j--) {      exch(a,j,j - 1);    }  }  assert isSorted(a,lo,hi);}  }
class C{  public void currentState(long state,Model currentModel){  currentState=state;  if (loggers != null) {    for (    Logger logger : loggers) {      logger.log(state);    }  }}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(4);  newVector.addElement("measureExtraArcs");  newVector.addElement("measureMissingArcs");  newVector.addElement("measureReversedArcs");  newVector.addElement("measureDivergence");  newVector.addElement("measureBayesScore");  newVector.addElement("measureBDeuScore");  newVector.addElement("measureMDLScore");  newVector.addElement("measureAICScore");  newVector.addElement("measureEntropyScore");  return newVector.elements();}  }
class C{  public static final double[][] minusEquals(final double[][] m1,final double[][] m2){  final int columndimension=getColumnDimensionality(m1);  assert (getRowDimensionality(m1) == getRowDimensionality(m2) && columndimension == getColumnDimensionality(m2)) : ERR_MATRIX_DIMENSIONS;  for (int i=0; i < m1.length; i++) {    for (int j=0; j < columndimension; j++) {      m1[i][j]-=m2[i][j];    }  }  return m1;}  }
class C{  public TtmlStyle inherit(TtmlStyle ancestor){  return inherit(ancestor,false);}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void updateHostIOLimitBandwidth(WBEMClient client,CIMObjectPath storageGroupPath,Integer hostIOLimitBandwidth) throws WBEMException {  if (hostIOLimitBandwidth == null) {    return;  }  _log.info("Attempting to update Host IO Limit Bandwidth for Storage Group : {} to {}",storageGroupPath.toString(),hostIOLimitBandwidth);  CIMPropertyFactory factoryRef=(CIMPropertyFactory)ControllerServiceImpl.getBean("CIMPropertyFactory");  CIMInstance toUpdate=new CIMInstance(storageGroupPath,new CIMProperty[]{factoryRef.uint32(EMC_MAX_BANDWIDTH,hostIOLimitBandwidth)});  _log.debug("Params: " + toUpdate.toString());  client.modifyInstance(toUpdate,new String[]{EMC_MAX_BANDWIDTH});}  }
class C{  public StoreScheduler(){  times=new SegmentTree<StoredIntervalsNode<T>>(min,max,StoredIntervalsNode.getConstructor());}  }
class C{  private void initData(){  this.nameList=new ArrayList<>();  List<Location> locationList=DatabaseHelper.getInstance(this).readLocation();  for (  Location l : locationList) {    nameList.add(l.location);  }  this.location=new Location(nameList.get(0),null);  this.weatherUtils=new WeatherUtils();  this.locationUtils=new LocationUtils(this);}  }
class C{  public static Properties initialize(URI uri,Configuration conf) throws IOException, ConfigurationParseException {  String host=Utils.getHost(uri);  Properties props=new Properties();  if (!Utils.validSchema(uri)) {    props.setProperty(SWIFT_AUTH_METHOD_PROPERTY,PUBLIC_ACCESS);  } else {    String container=Utils.getContainerName(host);    String service=Utils.getServiceName(host);    String prefix=SWIFT_SERVICE_PREFIX + service;    String prefix2D=SWIFT2D_SERVICE_PREFIX + service;    props.setProperty(SWIFT_CONTAINER_PROPERTY,container);    Utils.updateProperty(conf,prefix2D,prefix,AUTH_URL,props,SWIFT_AUTH_PROPERTY,true);    Utils.updateProperty(conf,prefix2D,prefix,USERNAME,props,SWIFT_USERNAME_PROPERTY,true);    Utils.updateProperty(conf,prefix2D,prefix,PASSWORD,props,SWIFT_PASSWORD_PROPERTY,true);    Utils.updateProperty(conf,prefix2D,prefix,AUTH_METHOD,props,SWIFT_AUTH_METHOD_PROPERTY,false);    Utils.updateProperty(conf,prefix2D,prefix,BLOCK_SIZE,props,SWIFT_BLOCK_SIZE_PROPERTY,false);    Utils.updateProperty(conf,prefix2D,prefix,FMODE_DELETE_TEMP_DATA,props,FMODE_AUTOMATIC_DELETE_PROPERTY,false);    Utils.updateProperty(conf,prefix2D,prefix,PUBLIC,props,SWIFT_PUBLIC_PROPERTY,false);    String authMethod=props.getProperty(SWIFT_AUTH_METHOD_PROPERTY,KEYSTONE_V3_AUTH);    props.setProperty(SWIFT_AUTH_METHOD_PROPERTY,authMethod);    if (authMethod.equals(KEYSTONE_V3_AUTH)) {      Utils.updateProperty(conf,prefix2D,prefix,TENANT,props,SWIFT_TENANT_PROPERTY,false);      Utils.updateProperty(conf,prefix2D,prefix,REGION,props,SWIFT_REGION_PROPERTY,true);      props.setProperty(SWIFT_PROJECT_ID_PROPERTY,props.getProperty(SWIFT_TENANT_PROPERTY));      props.setProperty(SWIFT_USER_ID_PROPERTY,props.getProperty(SWIFT_USERNAME_PROPERTY));    } else     if (authMethod.equals("basic")) {      Utils.updateProperty(conf,prefix2D,prefix,REGION,props,SWIFT_REGION_PROPERTY,false);      Utils.updateProperty(conf,prefix2D,prefix,TENANT,props,SWIFT_TENANT_PROPERTY,false);    } else {      Utils.updateProperty(conf,prefix2D,prefix,REGION,props,SWIFT_REGION_PROPERTY,false);      Utils.updateProperty(conf,prefix2D,prefix,TENANT,props,SWIFT_TENANT_PROPERTY,true);    }  }  return props;}  }
class C{  public static int hash(int seed,short[] shortArray){  if (shortArray == null) {    return 0;  }  for (  short aShort : shortArray) {    seed=hash(seed,aShort);  }  return seed;}  }
class C{  public ConstExpConstModel(String name,Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Parameter timeParameter,Parameter epochParameter,boolean useNumericalIntegrator,Type units){  super(name);  if (N1Parameter != null && growthRateParameter != null) {    throw new RuntimeException("Only one of N1 and growthRate can be specified");  }  constExpConst=new ConstExpConst((N1Parameter != null ? ConstExpConst.Parameterization.ANCESTRAL_POPULATION_SIZE : ConstExpConst.Parameterization.GROWTH_RATE),useNumericalIntegrator,units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.N1Parameter=N1Parameter;  this.growthRateParameter=growthRateParameter;  if (N1Parameter != null) {    addVariable(N1Parameter);    N1Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  } else {    addVariable(growthRateParameter);    growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  }  this.timeParameter=timeParameter;  addVariable(timeParameter);  timeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.epochParameter=epochParameter;  addVariable(epochParameter);  epochParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  setUnits(units);}  }
class C{  public void putFieldLength(long length){  if (length < 251) {    putByte((byte)length);  } else   if (length < 65536L) {    ensureCapacity(3);    putByte((byte)252);    putInt16((int)length);  } else   if (length < 16777216L) {    ensureCapacity(4);    putByte((byte)253);    putInt24((int)length);  } else {    ensureCapacity(9);    putByte((byte)254);    putLong(length);  }}  }
class C{  public boolean validate(VeraPDFXMPNode node,String typeName){  String type=getSimplifiedType(typeName);  for (  ArrayTypeValidator.ArrayTypeEnum entr : ArrayTypeValidator.ArrayTypeEnum.values()) {    String prefix=entr.getType() + " ";    if (type.startsWith(prefix)) {      return this.arrayValidators.get(entr.getType()).isCorresponding(node,type.substring(prefix.length()));    }  }  return this.validators.containsKey(type) && this.validators.get(type).isCorresponding(node);}  }
class C{  public final int token(){  return token;}  }
class C{  public void close() throws GenericDataSourceException {  if (_manualTX) {    if (Debug.verboseOn())     Debug.logVerbose("SQLProcessor:close() calling commit : _manualTX=" + _manualTX,module);    commit();  }  _sql=null;  if (_rs != null) {    try {      _rs.close();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:close() result close : _manualTX=" + _manualTX,module);    } catch (    SQLException sqle) {      Debug.logWarning(sqle.getMessage(),module);    }    _rs=null;  }  if (_ps != null) {    try {      _ps.close();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:close() preparedStatement close : _manualTX=" + _manualTX,module);    } catch (    SQLException sqle) {      Debug.logWarning(sqle.getMessage(),module);    }    _ps=null;  }  if ((_connection != null) && _bDeleteConnection) {    try {      _connection.close();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:close() connection close : _manualTX=" + _manualTX,module);    } catch (    SQLException sqle) {      Debug.logWarning(sqle.getMessage(),module);    }    _connection=null;  }}  }
class C{  public Builder end(){  if (ends.isEmpty())   throw new IllegalStateException("No pending tag/section to close.");  html.a(ends.pop());  return this;}  }
class C{  protected synchronized void deleteExpiredEntries(){  if (maxLifetime <= 0) {    return;  }  LinkedListNode node=ageList.getLast();  if (node == null) {    return;  }  long expireTime=System.currentTimeMillis() - maxLifetime;  while (expireTime > node.timestamp) {    if (remove(node.object,true) == null) {      System.err.println("Error attempting to remove(" + node.object.toString() + ") - cacheObject not found in cache!");      node.remove();    }    node=ageList.getLast();    if (node == null) {      return;    }  }}  }
class C{  public static List<ImmutablePort> immutablePortListOf(Collection<OFPhysicalPort> ports){  if (ports == null) {    throw new NullPointerException("Port list must not be null");  }  ArrayList<ImmutablePort> immutablePorts=new ArrayList<ImmutablePort>(ports.size());  for (  OFPhysicalPort p : ports)   immutablePorts.add(fromOFPhysicalPort(p));  return immutablePorts;}  }
class C{  public boolean drag(float x,float y){  if (!checkClicked(x,y)) {    setPressed(false);    return false;  }  return isPressed();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  private static void addKeyword(String text,int type){  KEYWORDS.add(text);  addTranslation(text,type);}  }
class C{  protected static double eclipticToEquatorialAscension(double lambda,double beta){  double sin_e=Math.sin(MEAN_OBLIQUITY_OF_EPOCH);  double cos_e=Math.cos(MEAN_OBLIQUITY_OF_EPOCH);  return Math.atan2(Math.sin(lambda) * cos_e - Math.tan(beta) * sin_e,Math.cos(lambda));}  }
class C{  public void periodicProcessing() throws PayloadException, NetworkException, ContactManagerException {  if (sLogger.isActivated()) {    sLogger.info("Execute new capabilities update");  }  Set<ContactId> contacts=mContatManager.getAllContactsFromRcsContactProvider();  for (  ContactId contact : contacts) {    requestContactCapabilities(contact);  }  startTimer(System.currentTimeMillis(),mRcsSettings.getCapabilityPollingPeriod());}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public void saveScene(ProjectContext context,Scene scene){  try {    String sceneDir=FilenameUtils.concat(context.path + "/" + ProjectManager.PROJECT_SCENES_DIR,scene.getName() + "." + ProjectManager.PROJECT_SCENE_EXTENSION);    Output output=new Output(new FileOutputStream(sceneDir));    SceneDescriptor descriptor=DescriptorConverter.convert(scene);    kryo.writeObject(output,descriptor);    output.flush();    output.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public final Flux<T> repeat(long numRepeat,BooleanSupplier predicate){  return defer(null);}  }
class C{  public boolean isClinit(){  return this == CLINIT;}  }
class C{  public CtMethod(CtClass returnType,String mname,CtClass[] parameters,CtClass declaring){  this(null,declaring);  ConstPool cp=declaring.getClassFile2().getConstPool();  String desc=Descriptor.ofMethod(returnType,parameters);  methodInfo=new MethodInfo(cp,mname,desc);  setModifiers(Modifier.PUBLIC | Modifier.ABSTRACT);}  }
class C{  public static int count(String str,char a){  int count=0;  for (int i=0; i < str.length(); i++) {    if (a == str.charAt(i))     count++;  }  return count;}  }
class C{  public static Color convertStopColor(Element e,float opacity,BridgeContext ctx){  Value v=getComputedStyle(e,SVGCSSEngine.STOP_COLOR_INDEX);  Value o=getComputedStyle(e,SVGCSSEngine.STOP_OPACITY_INDEX);  opacity*=PaintServer.convertOpacity(o);  if (v.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {    return PaintServer.convertColor(v,opacity);  } else {    return PaintServer.convertRGBICCColor(e,v.item(0),(ICCColor)v.item(1),opacity,ctx);  }}  }
class C{  public MultiPaneWindow(String name,String treeFile,String menubarFile,String toolbarFile){  super(name);  buildGUI(treeFile,menubarFile,toolbarFile);  pack();}  }
class C{  private void generateHTMLReport(String inputFileName,String outputFileName) throws IOException {  LagReader reader=new LagReader(inputFileName);  LagHTMLWriter writer=new LagHTMLWriter(outputFileName);  writer.writeHeader();  int[] times=reader.readTurnOverflowRelative();  while (times != null) {    writer.writeTurnOverflows(times);    times=reader.readTurnOverflowRelative();  }  writer.writeFooter();  reader.close();  writer.close();}  }
class C{  private void showAuthCommonErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_authentication_error),getResources().getString(R.string.error_for_all_unknown_authentication_failures),getResources().getString(R.string.button_ok),null);}  }
class C{  public boolean removeAnnotation(final Annotation annotation){  final boolean result=annotationList.remove(annotation);  if (!annotation.isFree())   annotation.getTrace().getDataProvider().removeDataProviderListener(annotation);  if (result) {    remove(annotation);    revalidate();    changeSupport.firePropertyChange("annotationList",annotation,null);  }  return result;}  }
class C{  public void focusLost(FocusEvent e){  if (e.getSource() == getEditor().getEditorComponent()) {    final ComboBoxEditor editor=getEditor();    final Object item=editor.getItem();    if (!e.isTemporary() && item != null && !item.equals(getSelectedItem()))     actionPerformed(new ActionEvent(editor,0,"",EventQueue.getMostRecentEventTime(),0));  }  repaint();}  }
class C{  public static Number cosh(Number a){  return Math.cosh(a.doubleValue());}  }
class C{  public SetSlipThread(SlipTurnoutIcon aSlip){  s=aSlip;}  }
class C{  @Override protected void keyTyped(char par1,int par2){}  }
class C{  protected CacheConfiguration cacheConfiguration(){  CacheConfiguration cacheCfg=new CacheConfiguration();  cacheCfg.setName(null);  cacheCfg.setCacheMode(CacheMode.PARTITIONED);  cacheCfg.setRebalanceMode(CacheRebalanceMode.SYNC);  CacheAtomicityMode atomicityMode=enumProperty(PROP_ATOMICITY_MODE,CacheAtomicityMode.class);  if (atomicityMode != null)   cacheCfg.setAtomicityMode(atomicityMode);  CacheWriteSynchronizationMode writeSyncMode=enumProperty(PROP_WRITE_SYNC_MODE,CacheWriteSynchronizationMode.class);  if (writeSyncMode != null)   cacheCfg.setWriteSynchronizationMode(writeSyncMode);  cacheCfg.setBackups(intProperty(PROP_BACKUPS));  return cacheCfg;}  }
class C{  void resetUpdate(){  update=null;}  }
class C{  public CommandIterator(final List commands,final Command command,final boolean forward){  if (commands == null || command == null)   throw new IllegalArgumentException();  fIterator=forward ? commands.iterator() : new ReverseListIterator(commands.listIterator(commands.size()));  fCommand=command;  fForward=forward;}  }
class C{  private void parseInputConfig(final Node node,final ConfigSettings config){  String name, value;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_WIKIPEDIA_ENCODING)) {      value=nnode.getChildNodes().item(0).getNodeValue();      config.setConfigParameter(ConfigurationKeys.WIKIPEDIA_ENCODING,value);    } else     if (name.equals(KEY_MODE_SURROGATES)) {      SurrogateModes oValue=SurrogateModes.parse(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.MODE_SURROGATES,oValue);    } else     if (name.equals(SUBSECTION_ARCHIVE)) {      parseInputArchive(nnode,config);    }  }}  }
class C{  public boolean harvesterEquals(CandidateHarvester harvester){  return this.harvester.equals(harvester);}  }
class C{  public boolean isUp(){  return ((flags & BUTTON_UP) != 0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public byte[] engineGenerateSeed(int numBytes){  return fillData(new byte[numBytes]);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TSTRUCT_GETTER;}  }
class C{  public static boolean areBordersEqual(double border1,double border2){  return Math.abs(border1 - border2) <= 1;}  }
class C{  public void apply(){  setSpeedMap();  setNXdata();}  }
class C{  public boolean isSslStarted(IoSession session){  SslHandler sslHandler=(SslHandler)session.getAttribute(SSL_HANDLER);  if (sslHandler == null) {    return false;  }synchronized (sslHandler) {    return !sslHandler.isOutboundDone();  }}  }
class C{  void removeBytes(int offs,int len){  model.removeBytes(offs,len);}  }
class C{  public static void checkInstancesDeleted(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIdsToDelete,ArrayList<Boolean> deletionFlags) throws Throwable {  AWSEnumerationAsyncHandler enumerationHandler=new AWSEnumerationAsyncHandler(host,AWSEnumerationAsyncHandler.MODE.CHECK_TERMINATION,null,deletionFlags,null,null,null);  DescribeInstancesRequest request=new DescribeInstancesRequest().withInstanceIds(instanceIdsToDelete);  client.describeInstancesAsync(request,enumerationHandler);  host.waitFor("Waiting to get response from AWS ",null);}  }
class C{  public static void main(final String[] args){  Iterator<String> it=ArrayIterator.iterator(new String[]{"one","two","three"});  while (it.hasNext()) {    System.out.println(it.next());  }}  }
class C{  public ColumnVector multiply(final ColumnVector vector){  if (this.numCols != vector.size()) {    throw new IllegalArgumentException("vector size and matrix column count must be equal");  }  final double[] result=new double[this.numRows];  final double[] rawVector=vector.getRaw();  for (int i=0; i < this.numRows; i++) {    final double[] rowValues=this.values[i];    final int[] rowCols=this.cols[i];    final int size=this.maxIndices[i];    double dot=0.0;    for (int j=0; j < size; j++) {      dot+=rowValues[j] * rawVector[rowCols[j]];    }    result[i]=dot;  }  return new ColumnVector(result);}  }
class C{  public void initBenchmarks(){  super.initBenchmarks();  benchmarkEmbeddedHelper=new CompilerBenchmarkHelper(getName());  benchmarkEmbeddedHelper.initBenchmarks();  intfc.setHelper(benchmarkEmbeddedHelper,true);  implc.setHelper(benchmarkEmbeddedHelper,true);}  }
class C{  public MaterializeBuilder withTranslucentStatusBarProgrammatically(boolean translucentStatusBarProgrammatically){  this.mTranslucentStatusBarProgrammatically=translucentStatusBarProgrammatically;  return this;}  }
class C{  public static <E>BOpContext<E> newMock(final IRunningQuery runningQuery,final IBigdataFederation<?> fed,final IIndexManager localIndexManager,final int partitionId,final BOpStats stats,final PipelineOp op,final boolean lastInvocation,final ICloseableIterator<E[]> source,final IBlockingBuffer<E[]> sink,final IBlockingBuffer<E[]> sink2){  return new BOpContext<>(runningQuery,fed,localIndexManager,partitionId,stats,op,lastInvocation,source,sink,sink2);}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  @Override public void redo() throws CannotUndoException {  undoOrRedoInProgress=true;  try {    super.redo();  }  finally {    undoOrRedoInProgress=false;    updateActions();  }}  }
class C{  public SignerSigningKey(String keyId){  if (keyId == null) {    throw new IllegalArgumentException("KeyId is must not be null");  }  this.keyId=keyId;}  }
class C{  private Object readResolve(){  return ToStringStyle.SIMPLE_STYLE;}  }
class C{  public void mouseExited(MouseEvent e){  JComponent c=(JComponent)e.getSource();  c.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static double geoHashCellWidth(int level){  assert level >= 0;  return EARTH_EQUATOR / (1L << ((((level + 1) / 2) * 3) + ((level / 2) * 2)));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    String[] srv=((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsGetRoots();    java.io.File[] rv=new java.io.File[(srv == null) ? 0 : srv.length];    for (int i=0; i < rv.length; i++)     rv[i]=new java.io.File(srv[i]);    return rv;  } else   return java.io.File.listRoots();}  }
class C{  public static int reflectionCompare(final Object lhs,final Object rhs){  return reflectionCompare(lhs,rhs,false,null);}  }
class C{  protected void logErrorDisconnect(OFErrorMsg error){  logError(error);  mainConnection.disconnect();}  }
class C{  protected DenseDoubleMatrix3D(int slices,int rows,int columns,double[] elements,int sliceZero,int rowZero,int columnZero,int sliceStride,int rowStride,int columnStride){  setUp(slices,rows,columns,sliceZero,rowZero,columnZero,sliceStride,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.bool(xctxt) && m_right.bool(xctxt));}  }
class C{  private List<Variable> applyMRVHeuristic(CSP csp,Assignment assignment){  List<Variable> result=new ArrayList<Variable>();  int mrv=Integer.MAX_VALUE;  for (  Variable var : csp.getVariables()) {    if (!assignment.hasAssignmentFor(var)) {      int num=csp.getDomain(var).size();      if (num <= mrv) {        if (num < mrv) {          result.clear();          mrv=num;        }        result.add(var);      }    }  }  return result;}  }
class C{  public List<Map<Integer,BitmapGlyphInfo>> generateLocaList(){  List<BitmapSizeTable.Builder> sizeBuilderList=this.getSizeList();  List<Map<Integer,BitmapGlyphInfo>> locaList=new ArrayList<Map<Integer,BitmapGlyphInfo>>(sizeBuilderList.size());  int sizeIndex=0;  for (  BitmapSizeTable.Builder sizeBuilder : sizeBuilderList) {    if (DEBUG) {      System.out.printf("size table = %d%n",sizeIndex++);    }    Map<Integer,BitmapGlyphInfo> locaMap=sizeBuilder.generateLocaMap();    locaList.add(locaMap);  }  return locaList;}  }
class C{  public static int poisson(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Parameter lambda must be positive");  if (Double.isInfinite(lambda))   throw new IllegalArgumentException("Parameter lambda must not be infinite");  int k=0;  double p=1.0;  double L=Math.exp(-lambda);  do {    k++;    p*=uniform();  } while (p >= L);  return k - 1;}  }
class C{  public boolean addToAsynchronousRegistry(AsynchronousSteppable stop){  if (stop == null)   return false;synchronized (asynchronousLock) {    if (cleaningAsynchronous)     return false;    asynchronous.add(stop);    return true;  }}  }
class C{  public void lifecycleEvent(long ptr,int evt){  enter();  try {    PlatformCallbackUtils.lifecycleEvent(envPtr,ptr,evt);  }  finally {    leave();  }}  }
class C{  public boolean isMetaphoneEqual(String str1,String str2){  return metaphone(str1).equals(metaphone(str2));}  }
class C{  public JarClassLoader(){}  }
class C{  protected void buildSubstitutableProperties(){  for (  String propName : coreProperties.stringPropertyNames()) {    String propValue=coreProperties.getProperty(propName);    if (!isUserDefinedProperty(propName))     propName=SOLR_CORE_PROP_PREFIX + propName;    substitutableProperties.setProperty(propName,propValue);  }  substitutableProperties.setProperty("solr.core.instanceDir",instanceDir.toAbsolutePath().toString());}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){}  }
class C{  public static void initializeDefaultValues(IPreferenceStore store){  ColorRegistry registry=PlatformUI.getWorkbench().getThemeManager().getCurrentTheme().getColorRegistry();  setDefaultAndFireEvent(store,PreferenceConstants.EDITOR_TYPESCRIPT_DECORATOR_COLOR,findRGB(registry,ITypeScriptThemeConstants.EDITOR_TYPESCRIPT_DECORATOR_COLOR,new RGB(100,100,100)));  store.setDefault(PreferenceConstants.EDITOR_TYPESCRIPT_DECORATOR_BOLD,false);  store.setDefault(PreferenceConstants.EDITOR_TYPESCRIPT_DECORATOR_ITALIC,false);  setDefaultAndFireEvent(store,PreferenceConstants.EDITOR_JSX_TAG_BORDER_COLOR,findRGB(registry,ITypeScriptThemeConstants.EDITOR_JSX_TAG_BORDER_COLOR,new RGB(0,128,128)));  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_BORDER_BOLD,false);  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_BORDER_ITALIC,false);  setDefaultAndFireEvent(store,PreferenceConstants.EDITOR_JSX_TAG_NAME_COLOR,findRGB(registry,ITypeScriptThemeConstants.EDITOR_JSX_TAG_NAME_COLOR,new RGB(63,127,127)));  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_NAME_BOLD,false);  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_NAME_ITALIC,false);  setDefaultAndFireEvent(store,PreferenceConstants.EDITOR_JSX_TAG_ATTRIBUTE_NAME_COLOR,findRGB(registry,ITypeScriptThemeConstants.EDITOR_JSX_TAG_ATTRIBUTE_NAME_COLOR,new RGB(127,0,127)));  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_ATTRIBUTE_NAME_BOLD,false);  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_ATTRIBUTE_NAME_ITALIC,false);  setDefaultAndFireEvent(store,PreferenceConstants.EDITOR_JSX_TAG_ATTRIBUTE_VALUE_COLOR,findRGB(registry,ITypeScriptThemeConstants.EDITOR_JSX_TAG_ATTRIBUTE_VALUE_COLOR,new RGB(42,0,255)));  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_ATTRIBUTE_VALUE_BOLD,false);  store.setDefault(PreferenceConstants.EDITOR_JSX_TAG_ATTRIBUTE_VALUE_ITALIC,true);}  }
class C{  private synchronized <T extends Object>T execute(IDbOperation<?> op){synchronized (helper) {    T result;    try {      result=(T)op.requestExecute(helper.getDatabase());    } catch (    SQLiteException e) {      op.getCallback().sendException(e);      logger.error(e,true);      result=(T)op.getDefaultValue();    }    return result;  }}  }
class C{  public boolean isTruncated(){  return isTruncated;}  }
class C{  public final void verifyValidModelVersion(IModelMetaData metaData) throws AdeUsageException {  if (metaData.getAdeVersion().compareTo(LAST_ADE_VERSION_FOR_WHICH_MODEL_FILES_ARE_READABLE_BY_CURRENT_VERSION) < 0) {    throw new AdeUsageException(String.format("Model internal id %s is a " + "version %s model, and can no longer be used. Only models from " + "version %s can be used",metaData.getModelInternalId(),metaData.getAdeVersion(),LAST_ADE_VERSION_FOR_WHICH_MODEL_FILES_ARE_READABLE_BY_CURRENT_VERSION));  }}  }
class C{  public CInsertTagAction(final JFrame parent,final ITagManager tagManager,final TreeNode<CTag> tag,final String name){  super("Insert Tag");  m_parent=parent;  m_tagManager=tagManager;  m_parentTag=tag;  m_name=name;  putValue(MNEMONIC_KEY,(int)"HK_MENU_INSERT_TAG".charAt(0));}  }
class C{  public static Color convertToColor(String cssValue){  Color col=null;  if (cssValue != null && !cssValue.isEmpty()) {    if (cssValue.startsWith("#")) {      col=Color.decode(cssValue);    } else {      if (cssValue.startsWith("rgb")) {        col=handleRGBColor(cssValue);      } else {        col=handleNamedColor(cssValue.toLowerCase());      }    }  }  return col;}  }
class C{  private long hash(final short[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  Object addMarkedOccurrenceHighlight(int start,int end,MarkOccurrencesHighlightPainter p) throws BadLocationException {  Document doc=textArea.getDocument();  TextUI mapper=textArea.getUI();  HighlightInfo i=new LayeredHighlightInfo();  i.painter=p;  i.p0=doc.createPosition(start);  i.p1=doc.createPosition(end - 1);  markedOccurrences.add(i);  mapper.damageRange(textArea,start,end);  return i;}  }
class C{  @ObjectiveCName("requestUploadStateWithRid:withCallback:") public void requestUploadState(long rid,UploadFileCallback callback){  modules.getFilesModule().requestUploadState(rid,callback);}  }
class C{  @Override public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof String)) {    throw new EncoderException("Parameter supplied to Soundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  public static void testLoadWords() throws Exception {  Bot bot=Bot.createInstance();  try {    bot.memory().createMemory("wiktionary1000");  } catch (  Exception alreadyExists) {  }  bot.shutdown();  DatabaseMemory.DATABASE_URL="jdbc:postgresql:wiktionary1000";  DatabaseMemory.DATABASE_TEST_URL="jdbc:postgresql:wiktionary1000";  DatabaseMemory.RECREATE_DATABASE=true;  bot=Bot.createInstance();  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://en.wiktionary.org/wiki/Category:1000_English_basic_words"));  bot.shutdown();}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.INTERNAL_SCOPE;}  }
class C{  public CTabbedPane(int tabPlacement){  super(tabPlacement);  init();}  }
class C{  public void moveTo(int offset){  cursor=offset;}  }
class C{  public KafkaNotification(Configuration applicationProperties) throws AtlasException {  super(applicationProperties);  Configuration subsetConfiguration=ApplicationProperties.getSubsetConfiguration(applicationProperties,PROPERTY_PREFIX);  properties=ConfigurationConverter.getProperties(subsetConfiguration);  properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");  properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringSerializer");  properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringDeserializer");  properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,"org.apache.kafka.common.serialization.StringDeserializer");  properties.put(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG,"roundrobin");  properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"smallest");}  }
class C{  int startIndex(){  int len=getNumDataElements();  for (int i=0; i < len; i++) {    if ((getElement(i) & 0xFF) != 0xFF) {      return i;    }  }  return -1;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void onChooseDelete(){  if (editingMyData != null) {    myDataList.remove(editingMyData);    pigeonholeView.deleteEditingObject();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MarkerAxisBand)) {    return false;  }  MarkerAxisBand that=(MarkerAxisBand)obj;  if (this.topOuterGap != that.topOuterGap) {    return false;  }  if (this.topInnerGap != that.topInnerGap) {    return false;  }  if (this.bottomInnerGap != that.bottomInnerGap) {    return false;  }  if (this.bottomOuterGap != that.bottomOuterGap) {    return false;  }  if (!ObjectUtilities.equal(this.font,that.font)) {    return false;  }  if (!ObjectUtilities.equal(this.markers,that.markers)) {    return false;  }  return true;}  }
class C{  public static int convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return MISSING_VALUE;  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Integer.parseInt(matcher.replaceAll(""));}  }
class C{  public int compareTo(XMLString anotherString){  return m_str.compareTo(anotherString.toString());}  }
class C{  public static void log(final String msg){  if (DEBUG) {    System.out.println("Config:" + msg);  }}  }
class C{  public DiskStoreStats(StatisticsFactory f,String name){  this.stats=f.createAtomicStatistics(type,name);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_create_widget_week_doneButton:    SharedPreferences.Editor editor=getSharedPreferences(getString(R.string.sp_widget_week_setting),MODE_PRIVATE).edit();  editor.putString(getString(R.string.key_location),location.location);editor.putBoolean(getString(R.string.key_show_card),showCardSwitch.isChecked());editor.putBoolean(getString(R.string.key_black_text),blackTextSwitch.isChecked());editor.apply();Intent intent=getIntent();Bundle extras=intent.getExtras();int appWidgetId=0;if (extras != null) {appWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);}Intent resultValue=new Intent();resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);setResult(RESULT_OK,resultValue);Intent service=new Intent(this,WidgetWeekService.class);startService(service);finish();break;}}  }
class C{  public boolean showParameter(){  return parameter;}  }
class C{  @Override public void removeStatement(UpdateContext op,Resource subj,URI pred,Value obj,Resource... contexts) throws SailException {  throw new SailException(ERR_OPENRDF_QUERY_MODEL);}  }
class C{  public void clearBindings(){  if (mBindArgs != null) {    Arrays.fill(mBindArgs,null);  }}  }
class C{  private static Object copy(Object bean){  try {    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    final Marshaller m=createMarshaller();    m.marshal(bean,baos);    final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());    return createUnmarshaller().unmarshal(bais);  } catch (  JAXBException x) {    final IllegalArgumentException iae=new IllegalArgumentException("Failed to write SessionConfigBean: " + x,x);    throw iae;  }}  }
class C{  public boolean endsWith(CharSegment cb){  if (cb == null)   return false;  int strlen=cb._length;  if (_length < strlen)   return false;  char[] buffer=_buffer;  int offset=_offset + _length - strlen;  char[] cbBuffer=cb._buffer;  int cbOffset=cb._offset;  while (--strlen >= 0) {    if (buffer[offset + strlen] != cbBuffer[cbOffset + strlen])     return false;  }  return true;}  }
class C{  void handleClient() throws IOException {  InputStream is=new BufferedInputStream(s.getInputStream());  PrintStream ps=new PrintStream(s.getOutputStream());  int nread=0;  s.setSoTimeout(mTimeout);  s.setTcpNoDelay(true);  do {    nread=parseStatusLine(is);    if (requestMethod != UNKNOWN_METHOD) {      nread=readHeaders(is);      if (headers.get(requestHeaders[REQ_CONTENT_LENGTH]) != null) {        nread=readContent(is);      }    } else {      if (nread > 0) {        ps.print(HTTP_VERSION_STRING + " " + HTTP_BAD_METHOD+ " unsupported method type: ");        ps.write(buf,0,5);        ps.write(EOL);        ps.flush();      } else {      }      if (!keepAlive || nread <= 0) {        headers.clear();        readStarted=false;        log("SOCKET CLOSED");        s.close();        return;      }    }    testNum=-1;    printStatus(ps);    printHeaders(ps);    psWriteEOL(ps);    if (redirectCode == -1) {switch (requestMethod) {case GET_METHOD:        if ((testNum < 0) || (testNum > TestWebData.tests.length - 1)) {          send404(ps);        } else {          sendFile(ps);        }      break;case HEAD_METHOD:    break;case POST_METHOD:  if ((testNum > 0) || (testNum < TestWebData.tests.length - 1)) {    sendFile(ps);  }break;default :break;}} else {switch (redirectCode) {case 301:psPrint(ps,TestWebData.testServerResponse[TestWebData.REDIRECT_301]);break;case 302:psPrint(ps,TestWebData.testServerResponse[TestWebData.REDIRECT_302]);break;case 303:psPrint(ps,TestWebData.testServerResponse[TestWebData.REDIRECT_303]);break;case 307:psPrint(ps,TestWebData.testServerResponse[TestWebData.REDIRECT_307]);break;default :break;}}ps.flush();readStarted=false;headers.clear();} while (keepAlive);log("SOCKET CLOSED");s.close();}  }
class C{  private void outputInstructions(){  BasicBlockList blocks=method.getBlocks();  int[] order=this.order;  int len=order.length;  for (int i=0; i < len; i++) {    int nextI=i + 1;    int nextLabel=(nextI == order.length) ? -1 : order[nextI];    outputBlock(blocks.labelToBlock(order[i]),nextLabel);  }}  }
class C{  public OptionGroup addOption(Option option){  optionMap.put(option.getKey(),option);  return this;}  }
class C{  public static void assertExceptions(final Exception occurred,final Class<?> expectedClass,final String... expectedMessageParts){  assertEquals(occurred.getClass(),expectedClass);  final String actualMessage=occurred.getMessage();  final List<String> parts=Arrays.asList(expectedMessageParts);  for (  final String currentPart : parts)   assertTrue(String.format("Actual exception's message [%s] does not contain [%s] text.",actualMessage,currentPart),actualMessage.contains(currentPart));}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  for (int i=0; i < m_lines.size(); i++) {    WFLine line=(WFLine)m_lines.get(i);    line.paint(g);  }  if (m_dragged && m_draggedNode != null) {    Point loc=m_draggedNode.getLocation();    String text="(" + loc.x + ","+ loc.y+ ")";    Graphics2D g2D=(Graphics2D)g;    Font font=new Font("Dialog",Font.PLAIN,10);    g2D.setColor(Color.magenta);    TextLayout layout=new TextLayout(text,font,g2D.getFontRenderContext());    loc.x+=m_draggedNode.getWidth();    loc.y+=layout.getAscent();    layout.draw(g2D,loc.x,loc.y);  }}  }
class C{  public NotificationChain basicSetStatement(Expression newStatement,NotificationChain msgs){  Expression oldStatement=statement;  statement=newStatement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION__STATEMENT,oldStatement,newStatement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void openAccountManagementScreen(Context applicationContext,Profile profile,int serviceType){  Intent intent=PreferencesLauncher.createIntentForSettingsPage(applicationContext,AccountManagementFragment.class.getName());  Bundle arguments=new Bundle();  arguments.putInt(SHOW_GAIA_SERVICE_TYPE_EXTRA,serviceType);  intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT_ARGUMENTS,arguments);  applicationContext.startActivity(intent);}  }
class C{  public Sinh(){  super(Number.class,Number.class);}  }
class C{  public int mapIndex(int index){  return tableIndexMap[index];}  }
class C{  public void stop(JobNodeBean node){  if (node instanceof ActJobNodeBean) {    ActJobNodeBean jobNode=(ActJobNodeBean)node;    controller.stopJob(jobNode.getId());  } else   if (node instanceof VMNodeBean) {    VMNodeBean agentNode=(VMNodeBean)node;    controller.stopAgent(agentNode.getId());  }}  }
class C{  protected final void sendMessageAtFrontOfQueue(int what,int arg1){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageAtFrontOfQueue(obtainMessage(what,arg1));}  }
class C{  @Override public boolean hasDependency(){  return getReferenceDescriptor().hasDependencyOnParts();}  }
class C{  public PreparedScript prepareScript(String script,String[] inputs,String[] outputs,boolean parsePyDML) throws DMLException {  return prepareScript(script,new HashMap<String,String>(),inputs,outputs,parsePyDML);}  }
class C{  public static void logSelectionIsValid(boolean isSelectionValid){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchSelectionValid",isSelectionValid ? SELECTION_VALID : SELECTION_INVALID,SELECTION_BOUNDARY);}  }
class C{  private boolean compareNumber(Number valueObj,String value1,String value2){  BigDecimal valueObjB=null;  BigDecimal value1B=null;  BigDecimal value2B=null;  try {    if (valueObj instanceof BigDecimal)     valueObjB=(BigDecimal)valueObj; else     if (valueObj instanceof Integer)     valueObjB=new BigDecimal(((Integer)valueObj).intValue()); else     valueObjB=new BigDecimal(String.valueOf(valueObj));  } catch (  Exception e) {    log.fine("compareNumber - valueObj=" + valueObj + " - "+ e.toString());    return compareString(valueObj,value1,value2);  }  try {    value1B=new BigDecimal(value1);    value2B=new BigDecimal(value2);  } catch (  Exception e) {    log.fine("compareNumber - value1=" + value1 + " - "+ e.toString());    return compareString(valueObj,value1,value2);  }  String op=getOperation();  if (OPERATION_Eq.equals(op))   return value1B.compareTo(value2B) == 0; else   if (OPERATION_Gt.equals(op))   return value1B.compareTo(value2B) > 0; else   if (OPERATION_GtEq.equals(op))   return value1B.compareTo(value2B) >= 0; else   if (OPERATION_Le.equals(op))   return value1B.compareTo(value2B) < 0; else   if (OPERATION_LeEq.equals(op))   return value1B.compareTo(value2B) <= 0; else   if (OPERATION_Like.equals(op))   return value1B.compareTo(value2B) == 0; else   if (OPERATION_NotEq.equals(op))   return value1B.compareTo(value2B) != 0; else   if (OPERATION_Sql.equals(op))   throw new IllegalArgumentException("SQL not Implemented"); else   if (OPERATION_X.equals(op)) {    if (value1B.compareTo(value2B) < 0)     return false;    try {      value2B=new BigDecimal(String.valueOf(value2));      return value1B.compareTo(value2B) <= 0;    } catch (    Exception e) {      log.fine("compareNumber - value2=" + value2 + " - "+ e.toString());      return false;    }  }  throw new IllegalArgumentException("Unknown Operation=" + op);}  }
class C{  private static void edgeSplitPredecessors(SsaMethod result){  ArrayList<SsaBasicBlock> blocks=result.getBlocks();  for (int i=blocks.size() - 1; i >= 0; i--) {    SsaBasicBlock block=blocks.get(i);    if (nodeNeedsUniquePredecessor(block)) {      block.insertNewPredecessor();    }  }}  }
class C{  public NetworkComponent(final String name){  super(name);  init();}  }
class C{  protected TransportUnit(){}  }
class C{  public void init(CipherParameters params) throws IllegalArgumentException {  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    cipher.init(true,ivParam.getParameters());  } else {    reset();    cipher.init(true,params);  }}  }
class C{  public Executor addEnv(String name,String value){  this.env.put(name,value);  return this;}  }
class C{  @Override protected void commitToInput(){  JmxBeanSensorAssignment assignment=getInput();  if (null != assignment) {    assignment.setDomain(domainText.getText());    assignment.setObjectNameParameters(new HashMap<>(parametersMap));    if (allAttributesButton.getSelection()) {      assignment.setAttributes(Collections.<String>emptySet());    } else {      assignment.setAttributes(new HashSet<>(attributesSet));    }  }}  }
class C{  public StaticSentence(Session s,String sentence,SerializerWrite serwrite,SerializerRead serread){  this(s,new NormalBuilder(sentence),serwrite,serread);}  }
class C{  public LiteralOperand clone(){  LiteralOperand result=new LiteralOperand();  result.Value=Value;  return result;}  }
class C{  private void sendEMail(HttpServletRequest request,WebUser wu,String listName,boolean subscribe){  String msg=JSPEnv.sendEMail(request,wu,subscribe ? MMailMsg.MAILMSGTYPE_Subscribe : MMailMsg.MAILMSGTYPE_UnSubscribe,new Object[]{listName,wu.getName(),listName});}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public synchronized void addFailureException(Throwable t){  this.failureExceptions.add(t);}  }
class C{  public LabelWrapper(int lineLength){  this.lineLength=lineLength;}  }
class C{  @SuppressWarnings("rawtypes") @Override public LiteralExtensionIV createIV(final Value value){  if (value instanceof Literal == false)   throw new IllegalArgumentException("Value not a literal");  return createIV(litSerializer.toComponents(value.stringValue()));}  }
class C{  public static String normalizeInet6Address(String ip6String){  if (ip6String == null) {    return null;  }  String parts[]=ip6String.split(":",8 + 2);  if (parts.length > 1 && parts[parts.length - 1].length() > 0 && parts[parts.length - 1].indexOf('.') > 0) {    final int[] octets=parseInet4Address(parts[parts.length - 1]);    if (octets != null) {      String[] parts2=new String[parts.length + 1];      System.arraycopy(parts,0,parts2,0,parts.length - 1);      parts2[parts2.length - 2]=Integer.toHexString(octets[0] * 256 + octets[1]);      parts2[parts2.length - 1]=Integer.toHexString(octets[2] * 256 + octets[3]);      parts=parts2;    }  }  if (parts.length < 3 || parts.length > 8 + 1) {    return null;  }  int index=-1;  for (int i=1; i < parts.length - 1; i++) {    if (parts[i].length() > 4) {      return null;    } else     if (parts[i].length() == 0) {      if (index != -1) {        return null;      }      index=i;    }  }  if (parts[0].length() > 4 || parts[0].length() == 0 && index != 1) {    return null;  }  if (parts[parts.length - 1].length() > 4 || parts[parts.length - 1].length() == 0 && index != parts.length - 2) {    return null;  }  if (index == -1 && parts.length != 8) {    return null;  }  int hextets[]=new int[8];  for (int i=0; i < parts.length; i++) {    try {      final int block=parts[i].length() == 0 ? 0 : Integer.parseInt(parts[i],0x10);      if (block > 0xffff || block < 0) {        return null;      }      if (index == -1 || i < index) {        hextets[i]=block;      } else {        hextets[i + 8 - parts.length]=block;      }    } catch (    NumberFormatException e) {      return null;    }  }  if (index != -1) {    for (int i=0; i < 8 - parts.length; i++) {      hextets[index + i]=0;    }  }  int longestIndex=-1;  int longestLength=0;  for (int i=0, k=-1, l=0; i < 8; i++) {    if (hextets[i] == 0) {      if (k == -1) {        k=i;        l=1;      } else {        l++;      }      if (l > longestLength) {        longestIndex=k;        longestLength=l;      }    } else {      k=-1;    }  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < 8; i++) {    if (longestIndex == -1 || i < longestIndex) {      if (i > 0) {        sb.append(':');      }      sb.append(Integer.toHexString(hextets[i]).toLowerCase());    } else     if (i == longestIndex) {      sb.append(":");      if (i + longestLength == 8) {        sb.append(':');      }    } else     if (longestIndex != -1 && i > longestIndex && i < longestIndex + longestLength) {      continue;    } else {      sb.append(':');      sb.append(Integer.toHexString(hextets[i]).toLowerCase());    }  }  return sb.toString();}  }
class C{  public void testBadStreamBounds(){  ThreadLocalRandom r=ThreadLocalRandom.current();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  testDoubleBadOriginBound(null);}  }
class C{  public LoggingEventJsonSerde(){  this(false);}  }
class C{  private Bitmap drawableToBitmap(Drawable drawable){  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  int width=drawable.getIntrinsicWidth();  width=width > 0 ? width : 1;  int height=drawable.getIntrinsicHeight();  height=height > 0 ? height : 1;  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  public static void addRowTimes(double[][] matrix,int diag,int fromCol,int row,double factor){  int cols=matrix[0].length;  double[] d=matrix[diag];  double[] r=matrix[row];  for (int col=fromCol; col < cols; col++) {    r[col]-=factor * d[col];  }}  }
class C{  protected void encodeBufferSuffix(OutputStream aStream) throws IOException {}  }
class C{  private void doUndeleteDOI(DOI doi,Resource resource,URI target) throws UndeletNotAllowedException {  Preconditions.checkNotNull(registrationManager.getDoiService());  Preconditions.checkNotNull(doi);  Preconditions.checkNotNull(resource);  Preconditions.checkNotNull(target);  try {    DoiData doiData=registrationManager.getDoiService().resolve(doi);    if (doiData != null && doiData.getStatus() != null) {      if (doiData.getStatus().equals(DoiStatus.DELETED)) {        LOG.info("Undeleting deleted DOI: " + doi.toString() + "...");        DataCiteMetadata dataCiteMetadata=DataCiteMetadataBuilder.createDataCiteMetadata(doi,resource);        registrationManager.getDoiService().register(doi,target,dataCiteMetadata);        String msg=getText("manage.overview.publishing.doi.undelete.success",new String[]{doi.toString()});        LOG.info(msg);        addActionMessage(msg);      } else {        throw new UndeletNotAllowedException(UndeletNotAllowedException.Reason.DOI_NOT_DELETED,getText("manage.overview.publishing.doi.undelete.failed.badStatus",new String[]{doi.toString(),doiData.getStatus().toString()}));      }    } else {      throw new UndeletNotAllowedException(UndeletNotAllowedException.Reason.DOI_DOES_NOT_EXIST,getText("manage.overview.publishing.doi.undelete.failed.notResolved",new String[]{doi.toString()}));    }  } catch (  DoiException e) {    throw new UndeletNotAllowedException(UndeletNotAllowedException.Reason.DOI_REGISTRATION_AGENCY_ERROR,getText("manage.overview.publishing.doi.undelete.failed.exception",new String[]{doi.toString(),e.getMessage()}));  }}  }
class C{  public boolean showCard(String tag){  return showCard(tag,true);}  }
class C{  public TagTransformation(String sourceTag,String destTag,boolean preserveSourceAttributes){  this.sourceTag=sourceTag.toLowerCase();  if (destTag == null) {    this.destTag=null;  } else {    this.destTag=Utils.isValidXmlIdentifier(destTag) ? destTag.toLowerCase() : sourceTag;  }  this.preserveSourceAttributes=preserveSourceAttributes;}  }
class C{  public ConvertedExperiment convert(){  return sixpack.convert(this,null);}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  listenerList.remove(listener);}  }
class C{  private Utils(){}  }
class C{  public static String buildGeolocDocument(Geoloc geoloc,String contact,String msgId,long timestamp){  String expire=DateUtils.encodeDate(geoloc.getExpiration());  String label=geoloc.getLabel();  if (label == null) {    label="";  }  return "<?xml version=\"1.0\" encoding=\"" + UTF8_STR + "\"?>"+ CRLF+ "<rcsenvelope xmlns=\"urn:gsma:params:xml:ns:rcs:rcs:geolocation\""+ " xmlns:rpid=\"urn:ietf:params:xml:ns:pidf:rpid\""+ " xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\""+ " xmlns:gml=\"http://www.opengis.net/gml\""+ " xmlns:gs=\"http://www.opengis.net/pidflo/1.0\""+ " entity=\""+ contact+ "\">"+ CRLF+ "<rcspushlocation id=\""+ msgId+ "\" label=\""+ label+ "\" >"+ "<rpid:place-type rpid:until=\""+ expire+ "\">"+ "</rpid:place-type>"+ CRLF+ "<rpid:time-offset rpid:until=\""+ expire+ "\"></rpid:time-offset>"+ CRLF+ "<gp:geopriv>"+ CRLF+ "<gp:location-info>"+ CRLF+ "<gs:Circle srsName=\"urn:ogc:def:crs:EPSG::4326\">"+ CRLF+ "<gml:pos>"+ geoloc.getLatitude()+ " "+ geoloc.getLongitude()+ "</gml:pos>"+ CRLF+ "<gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\">"+ geoloc.getAccuracy()+ "</gs:radius>"+ CRLF+ "</gs:Circle>"+ CRLF+ "</gp:location-info>"+ CRLF+ "<gp:usage-rules>"+ CRLF+ "<gp:retention-expiry>"+ expire+ "</gp:retention-expiry>"+ CRLF+ "</gp:usage-rules>"+ CRLF+ "</gp:geopriv>"+ CRLF+ "<timestamp>"+ DateUtils.encodeDate(timestamp)+ "</timestamp>"+ CRLF+ "</rcspushlocation>"+ CRLF+ "</rcsenvelope>"+ CRLF;}  }
class C{  public void replyToMessage(Message srcMsg,int what,int arg1,int arg2){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  replyToMessage(srcMsg,msg);}  }
class C{  public DiscreteVariable(String name,int numCategories){  super(name);  setCategories(numCategories);  setCategoryNamesDisplayed(false);}  }
class C{  public Intent execute(Context context){  CategorySeries category=new CategorySeries("Weight indic");  category.add("Current",75);  category.add("Minimum",65);  category.add("Maximum",90);  DialRenderer renderer=new DialRenderer();  renderer.setChartTitleTextSize(20);  renderer.setLabelsTextSize(15);  renderer.setLegendTextSize(15);  renderer.setMargins(new int[]{20,30,15,0});  SimpleSeriesRenderer r=new SimpleSeriesRenderer();  r.setColor(Color.BLUE);  renderer.addSeriesRenderer(r);  r=new SimpleSeriesRenderer();  r.setColor(Color.rgb(0,150,0));  renderer.addSeriesRenderer(r);  r=new SimpleSeriesRenderer();  r.setColor(Color.GREEN);  renderer.addSeriesRenderer(r);  renderer.setLabelsTextSize(10);  renderer.setLabelsColor(Color.WHITE);  renderer.setShowLabels(true);  renderer.setVisualTypes(new DialRenderer.Type[]{Type.ARROW,Type.NEEDLE,Type.NEEDLE});  renderer.setMinValue(0);  renderer.setMaxValue(150);  return ChartFactory.getDialChartIntent(context,category,renderer,"Weight indicator");}  }
class C{  public static void put(ByteBuffer buffer,int tag){  if (tag < 1 || tag > 99999)   throw new IllegalArgumentException("Too large tag");  byte b1=(byte)('0' + tag % 10);  tag/=10;  if (tag != 0) {    byte b2=(byte)('0' + tag % 10);    tag/=10;    if (tag != 0) {      byte b3=(byte)('0' + tag % 10);      tag/=10;      if (tag != 0) {        byte b4=(byte)('0' + tag % 10);        tag/=10;        if (tag != 0) {          byte b5=(byte)('0' + tag % 10);          buffer.put(b5);        }        buffer.put(b4);      }      buffer.put(b3);    }    buffer.put(b2);  }  buffer.put(b1);  buffer.put(EQUALS);}  }
class C{  private CTagEvaluator(){}  }
class C{  public boolean hasIndex(){  return (index >= 0);}  }
class C{  public boolean isUseAgeFrom(){  return ageFromSec != null;}  }
class C{  private NettyChannelContext selectHttp11Context(Operation request,NettyChannelGroup group){  NettyChannelContext context=group.availableChannels.poll();  NettyChannelContext badContext=null;synchronized (group) {    if (context == null) {      int limit=getConnectionLimitPerTag(group.getKey().connectionTag);      if (group.inUseChannels.size() >= limit) {        group.pendingRequests.add(request);        return null;      }      context=new NettyChannelContext(group.getKey(),NettyChannelContext.Protocol.HTTP11);      context.setOpenInProgress(true);    }    if (context.getChannel() != null && !context.getChannel().isOpen()) {      badContext=context;      context=new NettyChannelContext(group.getKey(),NettyChannelContext.Protocol.HTTP11);      context.setOpenInProgress(true);    }    group.inUseChannels.add(context);  }  closeBadChannelContext(badContext);  context.updateLastUseTime();  return context;}  }
class C{  @Override public Vertex parseTemplate(Vertex formula,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  String name="Template(";  stream.skipWhitespace();  ensureNext('"',stream);  int position=stream.getPosition();  String text=stream.nextStringDoubleQuotes();  Map<String,Vertex> cache=elements.get(FORMULA);  if (formula == null && cache != null) {    formula=cache.get(text);    if (formula != null) {      return formula;    }  }  try {    TextStream formulaStream=new TextStream(text);    if (formula == null) {      formula=network.createInstance(Primitive.FORMULA);    }    if (cache != null) {      cache.put(text,formula);    }    String token=formulaStream.nextWord();    char peek=formulaStream.peek();    int index=0;    Vertex space=network.createVertex(Primitive.SPACE);    formula.addRelationship(Primitive.TYPE,space);    while ((token != null) && ((!token.equals("\\") || (peek == '"')))) {      Vertex word=null;      if (token.equals("\\") && (peek == '"')) {        token=formulaStream.nextWord();      } else       if (token.endsWith("\\") && (peek == '"')) {        token=token.substring(0,token.length() - 1);      }      if (token.equals("{")) {        word=parseElement(formulaStream,elements,debug,network);        formulaStream.skipWhitespace();        if (formulaStream.peek() == ';') {          Vertex expression=network.createVertex();          expression.addRelationship(Primitive.INSTANTIATION,Primitive.EXPRESSION);          expression.addRelationship(Primitive.OPERATOR,Primitive.DO);          expression.addRelationship(Primitive.DO,word,Integer.MAX_VALUE);          while (formulaStream.peek() == ';') {            formulaStream.skip();            formulaStream.skipWhitespace();            if (formulaStream.peek() == '}') {              break;            }            word=parseElement(formulaStream,elements,debug,network);            expression.addRelationship(Primitive.DO,word,Integer.MAX_VALUE);            formulaStream.skipWhitespace();          }          word=expression;        }        ensureNext('}',formulaStream);      } else {        word=network.createWord(token);      }      formula.addRelationship(Primitive.WORD,word,index);      if (formulaStream.skipWhitespace()) {        index++;        formula.addRelationship(Primitive.WORD,space,index);      }      token=formulaStream.nextWord();      peek=formulaStream.peek();      index++;    }  } catch (  SelfParseException exception) {    int newPosition=stream.getPosition();    stream.setPosition(position);    int column=exception.getColumnNumber();    exception.initFromStream(stream);    exception.setColumnNumber(position + column);    stream.setPosition(newPosition);    throw exception;  }  formula.setName(name + "\"" + text+ "\")");  return formula;}  }
class C{  public SnackbarBuilder message(@StringRes int messageResId){  this.message=context.getString(messageResId);  return this;}  }
class C{  public void addBaseTimelineException(Date date){  addBaseTimelineException(getTime(date));}  }
class C{  public boolean strip(File infile,File outfile){  if (infile == null)   throw new NullPointerException("Strip: infile cannot ne null");  if (!infile.exists() || !infile.isFile())   throw new IllegalArgumentException("Strip: infile does not exist or is not a file: " + infile);  System.out.println("Stripping file: " + infile);  if (infile.equals(outfile))   outfile=null;  boolean tempfile=false;  if (outfile == null) {    try {      outfile=File.createTempFile("strip",".txt");    } catch (    IOException ioe) {      System.err.println(ioe);      return false;    }    tempfile=true;  }  try {    if (VERBOSE)     System.out.println("Creating: " + outfile);    outfile.createNewFile();  } catch (  IOException ioe) {    System.err.println(ioe);    return false;  }  if (!outfile.exists() || !outfile.canWrite())   throw new IllegalArgumentException("Strip output file cannot be created or written: " + outfile);  if (!copy(infile,outfile))   return false;  if (tempfile) {    if (VERBOSE)     System.out.print("Renaming original: " + infile);    if (!infile.renameTo(new File(infile.getAbsolutePath() + ".bak")))     System.err.println("Could not rename original file: " + infile);    if (VERBOSE)     System.out.println(" - Renaming: " + outfile + " to: "+ infile);    if (!outfile.renameTo(infile))     System.err.println("Could not rename " + outfile + " to: "+ infile);  }  return true;}  }
class C{  public boolean isSortedColumnAscending(){  return ((DataLineModel<?,?>)dataModel).isSortAscending();}  }
class C{  public VPlexBackendManager(DbClient dbClient,VPlexDeviceController vplexDeviceController,BlockDeviceController blockDeviceController,BlockStorageScheduler blockStorageScheduler,NetworkDeviceController networkDeviceController,URI projectURI,URI tenantURI,VPlexApiLockManager vplexApiLockManager,CoordinatorClient coordinator){  this._dbClient=dbClient;  this._vplexDeviceController=vplexDeviceController;  this._blockDeviceController=blockDeviceController;  this._blockStorageScheduler=blockStorageScheduler;  this._networkDeviceController=networkDeviceController;  this._projectURI=projectURI;  this._tenantURI=tenantURI;  this._vplexApiLockManager=vplexApiLockManager;  this._coordinator=coordinator;}  }
class C{  public FSImageWriter(String imageFormat){  this.imageFormat=imageFormat;  this.writeCompressionMode=ImageWriteParam.MODE_COPY_FROM_METADATA;  this.writeCompressionType=null;  this.writeCompressionQuality=1.0f;}  }
class C{  @Override public void mouseMoved(MouseEvent e){}  }
class C{  public void testTimedInvokeAny2() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      e.invokeAny(new ArrayList<Callable<String>>(),MEDIUM_DELAY_MS,MILLISECONDS);      shouldThrow();    } catch (    IllegalArgumentException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public int numArguments(){  return m_NumArguments;}  }
class C{  private Model lookup(Expression path) throws Exception {  Expression target=path.getPath(0,1);  if (path.isPath()) {    return root.lookup(target);  }  return root;}  }
class C{  public PerDirectorySuite(Class<?> klass) throws Throwable {  super(klass,Collections.<Runner>emptyList());  final TestClass testClass=getTestClass();  final Class<?> javaTestClass=testClass.getJavaClass();  final List<List<File>> parametersList=getParametersList(testClass);  for (  List<File> parameters : parametersList) {    runners.add(new PerParameterSetTestRunner(javaTestClass,parameters));  }}  }
class C{  public static Throwable shouldFail(Class clazz,Closure code){  Throwable th=null;  try {    code.call();  } catch (  GroovyRuntimeException gre) {    th=ScriptBytecodeAdapter.unwrap(gre);  }catch (  Throwable e) {    th=e;  }  if (th == null) {    fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName());  } else   if (!clazz.isInstance(th)) {    fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName()+ ", instead got Exception "+ th);  }  return th;}  }
class C{  public double receiveEnergy(Type source,final double quantity,ForgeDirection from){  double used=quantity;  if (source == Type.ENGINE) {    if (used < minEnergyReceived) {      return 0;    } else     if (used > maxEnergyReceived) {      used=maxEnergyReceived;    }  }  updateSources(from);  used-=used * getPerdition().getTaxPercent();  used=addEnergy(used);  applyWork();  if (source == Type.ENGINE && type.eatsEngineExcess()) {    used=Math.min(quantity,maxEnergyReceived);  }  averageReceivedPower=(averageReceivedPower * ROLLING_AVERAGE_NUMERATOR + used) * ROLLING_AVERAGE_DENOMINATOR;  return used;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  super.endElement(handler,uri,localName,rawName);  handler.popElemTemplateElement();  handler.popStylesheet();}  }
class C{  public String toPropertiesAsString(){  Properties p=toProperties(true);  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  pw.println(LocalizedStrings.AgentConfigImpl_AGENT_CONFIGURATION.toLocalizedString());  Enumeration e=p.propertyNames();  while (e.hasMoreElements()) {    String pn=(String)e.nextElement();    String pv=p.getProperty(pn);    pw.println("  " + pn + " = "+ pv);  }  pw.close();  return sw.toString();}  }
class C{  @Override public boolean isLocationProhibited(Coords c,int currElevation){  if (!game.getBoard().contains(c)) {    return true;  }  IHex hex=game.getBoard().getHex(c);  if (hex.containsTerrain(Terrains.IMPASSABLE)) {    return true;  }  if (hex.containsTerrain(Terrains.MAGMA)) {    return true;  }  if (hex.containsTerrain(Terrains.SPACE) && doomedInSpace()) {    return true;  }  if (isHidden()) {    if (hex.containsTerrain(Terrains.PAVEMENT) || hex.containsTerrain(Terrains.ROAD)) {      return true;    }    if ((hex.terrainLevel(Terrains.BRIDGE_ELEV) == currElevation) && hex.containsTerrain(Terrains.BRIDGE)) {      return true;    }    if (hex.containsTerrain(Terrains.WATER) && (currElevation == 0)) {      return true;    }  }  if (hex.containsTerrain(Terrains.MAGMA)) {    return true;  }  if (getMovementMode() == EntityMovementMode.WHEELED) {    if (hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.ROUGH) || hex.containsTerrain(Terrains.RUBBLE)|| hex.containsTerrain(Terrains.JUNGLE)|| (hex.terrainLevel(Terrains.SNOW) > 1)|| (hex.terrainLevel(Terrains.GEYSER) == 2)) {      return true;    }  }  if (getMovementMode() == EntityMovementMode.TRACKED) {    if ((hex.terrainLevel(Terrains.WOODS) > 1) || hex.containsTerrain(Terrains.JUNGLE) || (hex.terrainLevel(Terrains.ROUGH) > 1)|| (hex.terrainLevel(Terrains.RUBBLE) > 5)) {      return true;    }  }  if (getMovementMode() == EntityMovementMode.HOVER) {    if (hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.JUNGLE) || (hex.terrainLevel(Terrains.ROUGH) > 1)|| (hex.terrainLevel(Terrains.RUBBLE) > 5)) {      return true;    }  }  if ((hex.terrainLevel(Terrains.WATER) > 0) && !hex.containsTerrain(Terrains.ICE)) {    if ((getMovementMode() == EntityMovementMode.HOVER) || (getMovementMode() == EntityMovementMode.INF_UMU) || (getMovementMode() == EntityMovementMode.VTOL)) {      return false;    }    return true;  }  return false;}  }
class C{  public static <R,T extends Throwable>R lockAndThen(ReentrantLock lock,ExceptionalCallable<R,T> code) throws T {  final R ret;  if (lock.isHeldByCurrentThread()) {    ret=code.call();  } else {    lock.lock();    try {      ret=code.call();    }  finally {      lock.unlock();    }  }  return ret;}  }
class C{  static String[] split(String s,char c){  int count=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == c)     count++;  }  String[] result=new String[count + 1];  int n=0;  int last=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == c) {      result[n++]=s.substring(last,i);      last=i + 1;    }  }  result[n]=s.substring(last,s.length());  return result;}  }
class C{  public static void fft(double[] data,int nn,boolean inverse){  int n, mmax, m, j, istep, i;  double wtemp, wr, wpr, wpi, wi, theta;  double tempr, tempi;  final double radians;  if (inverse) {    radians=2.0 * Math.PI;  } else {    radians=-2.0 * Math.PI;  }  n=nn << 1;  j=1;  for (i=1; i < n; i+=2) {    if (j > i) {      swap(data,j - 1,i - 1);      swap(data,j,i);    }    m=nn;    while (m >= 2 && j > m) {      j-=m;      m>>=1;    }    j+=m;  }  mmax=2;  while (n > mmax) {    istep=mmax << 1;    theta=radians / mmax;    wtemp=Math.sin(0.5 * theta);    wpr=-2.0 * wtemp * wtemp;    wpi=Math.sin(theta);    wr=1.0;    wi=0.0;    for (m=1; m < mmax; m+=2) {      for (i=m; i <= n; i+=istep) {        j=i + mmax;        tempr=wr * data[j - 1] - wi * data[j];        tempi=wr * data[j] + wi * data[j - 1];        data[j - 1]=data[i - 1] - tempr;        data[j]=data[i] - tempi;        data[i - 1]+=tempr;        data[i]+=tempi;      }      wtemp=wr;      wr+=wr * wpr - wi * wpi;      wi+=wi * wpr + wtemp * wpi;    }    mmax=istep;  }}  }
class C{  public int size(){  return count;}  }
class C{  @Override public void process(Map<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    processTuple(e.getKey());  }}  }
class C{  public boolean equals(Object interval){  if (intervals == null) {    return false;  }  return intervals.contains(interval);}  }
class C{  protected boolean shouldUpdateStyleOnEvent(PropertyChangeEvent ev){  String eName=ev.getPropertyName();  if ("name" == eName || "componentOrientation" == eName) {    return true;  }  if ("ancestor" == eName && ev.getNewValue() != null) {    return shouldUpdateStyleOnAncestorChanged();  }  return false;}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_11:    return ((InternalEList<?>)getAnonymous_beforeCode_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_21:  return ((InternalEList<?>)getAnonymous_beforeCode_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void testParseXML() throws Exception {  String curDir=System.getProperty("user.dir");  File baseDir=new File(curDir);  System.out.println("current dir = " + curDir);  System.out.flush();  visitAllDirsAndFiles(new File(baseDir,xmlDir));  for (  Object file : list) {    try {      SAXParserFactory factory=SAXParserFactory.newInstance();      factory.setNamespaceAware(true);      factory.setValidating(true);      SAXParser saxParser=factory.newSAXParser();      System.out.println("XML file to be parsed : file://" + file.toString());      System.out.flush();      saxParser.parse(new InputSource(new FileInputStream(file.toString())),new XHTMLResolvingHandler());      System.out.println("parsing complete.");      System.out.flush();    } catch (    Exception e) {      System.out.println("Parse error for " + file.toString() + " "+ e.toString());      System.out.flush();      fail();    }  }}  }
class C{  public void resizeCache(int max_size){  CacheObject[] oldObjs=objs;  if (max_size != objs.length && max_size > 0) {    objs=new CacheObject[max_size];  }  for (int i=0; i < objs.length; i++) {    if (i >= oldObjs.length) {      break;    }    DTEDCacheObject dco=(DTEDCacheObject)oldObjs[i];    if (dco == null) {      objs[i]=null;      continue;    }    DTEDFrame frame=(DTEDFrame)(dco.obj);    dco.cachedTime=0;    if (frame == null) {      Debug.output("DTEDFrameCache: No Frame for key!");      continue;    }    if (oldObjs == objs) {      continue;    }    if (i < oldObjs.length) {      objs[i]=oldObjs[i];    } else {      objs[i]=null;    }  }  oldObjs=null;}  }
class C{  public String format(final List<String> names,final String connectedName){  requireNonNull(names);  requireNonNull(connectedName);  final int connectedIndex=names.indexOf(connectedName);  final StringBuilder formatted=new StringBuilder("Rya instance names:\n");  for (int i=0; i < names.size(); i++) {    if (i == connectedIndex) {      formatted.append(" * ");    } else {      formatted.append("   ");    }    formatted.append(names.get(i)).append("\n");  }  return formatted.toString();}  }
class C{  public V remove(Object key){  Entry<K,V> e=removeEntryForKey(key);  return (e == null ? null : e.value);}  }
class C{  public GenericProxyFactory methodSpecialTimeoutMillis(String methodName,long timeoutMillis){  methodsSpecialTimeoutMillis.put(methodName,timeoutMillis);  return this;}  }
class C{  protected final void fireServiceRevoked(Class serviceClass,boolean revokeNow){  Object[] copy;  BeanContextServiceRevokedEvent bcsre=new BeanContextServiceRevokedEvent(getBeanContextServicesPeer(),serviceClass,revokeNow);synchronized (bcsListeners) {    copy=bcsListeners.toArray();  }  for (int i=0; i < copy.length; i++) {    ((BeanContextServicesListener)copy[i]).serviceRevoked(bcsre);  }}  }
class C{  public Collection<MailAddress> match(Mail mail) throws MessagingException {  try {    MimeMessage message=mail.getMessage();    if (matchFound(message)) {      return mail.getRecipients();    } else {      return null;    }  } catch (  Exception e) {    if (isDebug) {      log("Malformed message",e);    }    throw new MessagingException("Malformed message",e);  }}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public final boolean greaterEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) >= 0);}  }
class C{  public JRegisterView(final IRegisterModel registerModel){  Preconditions.checkNotNull(registerModel,"Error: Argument registerModel can't be null");  registerModel.addListener(m_listener);  setFocusable(true);  setOpaque(true);  initializeListeners();  m_registerModel=registerModel;  updateLongestRegisterName();  setBackground(m_backgroundColor);  updatePreferredSize();}  }
class C{  public synchronized CompletableFuture<Void> closeAsync(){  if (closeFuture.get() != null)   return closeFuture.get();  logger.info("Signalled closing of connection pool on {} with core size of {}",host,minPoolSize);  announceAllAvailableConnection();  final CompletableFuture<Void> future=killAvailableConnections();  closeFuture.set(future);  return future;}  }
class C{  protected void onOverrideUrlLoadingAndLaunchIntent(){  if (getWebContents() == null)   return;  if (shouldCloseContentsOnOverrideUrlLoadingAndLaunchIntent()) {    mActivity.getTabModelSelector().closeTab(this);  } else   if (mTabRedirectHandler.isOnNavigation()) {    int lastCommittedEntryIndexBeforeNavigation=mTabRedirectHandler.getLastCommittedEntryIndexBeforeStartingNavigation();    if (getLastCommittedEntryIndex() > lastCommittedEntryIndexBeforeNavigation) {      mClearAllForwardHistoryRequired=true;      getWebContents().getNavigationController().goToNavigationIndex(lastCommittedEntryIndexBeforeNavigation);    }  }}  }
class C{  @SuppressWarnings("cast") @Override public boolean contains(final Object obj){  if (null != obj) {    Iterator<E> it=new ArrayDequeIterator<E>();    while (it.hasNext()) {      if (obj.equals((E)it.next())) {        return true;      }    }  }  return false;}  }
class C{  public static void delete(String path){  FilePath.get(path).delete();}  }
class C{  public boolean intersectsInterior(Sector that){  if (that == null)   return false;  if (that.maxLongitude.degrees <= this.minLongitude.degrees)   return false;  if (that.minLongitude.degrees >= this.maxLongitude.degrees)   return false;  if (that.maxLatitude.degrees <= this.minLatitude.degrees)   return false;  if (that.minLatitude.degrees >= this.maxLatitude.degrees)   return false;  return true;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof SerializableImpl)) {    return false;  }  SerializableImpl other=(SerializableImpl)o;  return this.byteField == other.byteField && this.shortField == other.shortField && this.intField == other.intField && this.longField == other.longField && this.floatField == other.floatField && this.doubleField == other.doubleField && this.charField == other.charField && this.booleanField == other.booleanField && this.byteFieldPrim == other.byteFieldPrim && this.shortFieldPrim == other.shortFieldPrim && this.intFieldPrim == other.intFieldPrim && this.longFieldPrim == other.longFieldPrim && this.floatFieldPrim == other.floatFieldPrim && this.doubleFieldPrim == other.doubleFieldPrim && this.charFieldPrim == other.charFieldPrim && this.booleanFieldPrim == other.booleanFieldPrim && this.unsignedByteField == other.unsignedByteField && this.unsignedShortField == other.unsignedShortField && (this.stringField == null || this.stringField.equals(other.stringField)) && (this.objectField == null || this.objectField.equals(other.objectField)) && true;}  }
class C{  public long insertWifiKey(WifiNetwork wifiNetwork){  SQLiteDatabase db=dbHelper.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(WifiKeysContract.WifiKeys.COLUMN_NAME_SSID,wifiNetwork.getSsid());  values.put(WifiKeysContract.WifiKeys.COLUMN_NAME_AUTH_TYPE,wifiNetwork.getAuthType().name());  values.put(WifiKeysContract.WifiKeys.COLUMN_NAME_KEY,wifiNetwork.getKey());  return db.insert(WifiKeysContract.WifiKeys.TABLE_NAME,null,values);}  }
class C{  public static void flushCachedRefs(){  java.util.Vector chain=new java.util.Vector();  try {    while (true) {      int[] hungry=new int[65536];      chain.addElement(hungry);    }  } catch (  OutOfMemoryError e) {  }}  }
class C{  public void writeArrayValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  jg.writeRaw(',');  _arrayIndenter.writeIndentation(jg,_nesting);}  }
class C{  protected static Collection<OFMessage> pruneInvalidMessages(Iterable<OFMessage> msgList,Collection<OFMessage> valid,OFVersion swVersion,boolean isActive){  if (isActive) {    valid.addAll(IterableUtils.toCollection(msgList));    return Collections.emptyList();  } else {    Set<OFType> invalidSlaveMsgs=invalidSlaveMsgsByOFVersion.get(swVersion);    List<OFMessage> invalid=new ArrayList<OFMessage>();    Iterator<OFMessage> itr=msgList.iterator();    while (itr.hasNext()) {      OFMessage m=itr.next();      if (invalidSlaveMsgs.contains(m.getType())) {        invalid.add(m);      } else {        valid.add(m);      }    }    return invalid;  }}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getMessageDao() : null;}  }
class C{  public double[] toDoubleArray(){  double[] newValues=new double[m_AttValues.length];  System.arraycopy(m_AttValues,0,newValues,0,m_AttValues.length);  return newValues;}  }
class C{  public IntermediateImages(){  try {    URL url=getClass().getResource("images/BB.jpg");    picture=ImageIO.read(url);    scaleW=(int)(SCALE_FACTOR * picture.getWidth());    scaleH=(int)(SCALE_FACTOR * picture.getHeight());  } catch (  Exception e) {    System.out.println("Problem reading image file: " + e);    System.exit(0);  }}  }
class C{  static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {  File[] files=file.listFiles();  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);}  }
class C{  static OptimizedObjectOutputStream out() throws IgniteInterruptedCheckedException {  if (outPool != null) {    try {      return outPool.take();    } catch (    InterruptedException e) {      throw new IgniteInterruptedCheckedException("Failed to take output object stream from pool (thread interrupted).",e);    }  } else   return holder().acquireOut();}  }
class C{  @Override public void draw(Graphics2D g){  BezierFigure f=getOwner();  int size=f.getNodeCount();  boolean isClosed=f.isClosed();  Color fillColor;  Color strokeColor;  if (getEditor().getTool().supportsHandleInteraction()) {    fillColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_FILL_COLOR);    strokeColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_STROKE_COLOR);  } else {    fillColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_FILL_COLOR_DISABLED);    strokeColor=(Color)getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_NODE_HANDLE_STROKE_COLOR_DISABLED);  }  if (size > index) {    BezierPath.Node v=f.getNode(index);    if (v.mask == 0 || index == 0 && v.mask == BezierPath.C1_MASK && !isClosed || index == size - 1 && v.mask == BezierPath.C2_MASK && !isClosed) {      drawRectangle(g,fillColor,strokeColor);    } else     if (v.mask == BezierPath.C1_MASK || v.mask == BezierPath.C2_MASK || index == 0 && !isClosed || index == size - 1 && !isClosed) {      drawDiamond(g,fillColor,strokeColor);    } else {      drawCircle(g,fillColor,strokeColor);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public LabelView(Context context,AttributeSet attrs){  super(context,attrs);  initLabelView();  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.LabelView);  CharSequence s=a.getString(R.styleable.LabelView_text);  if (s != null) {    setText(s.toString());  }  setTextColor(a.getColor(R.styleable.LabelView_textColor,0xFF000000));  int textSize=a.getDimensionPixelOffset(R.styleable.LabelView_textSize,0);  if (textSize > 0) {    setTextSize(textSize);  }  a.recycle();}  }
class C{  public void update(byte[] input,int offset,int len){  if (input == null) {    throw new IllegalArgumentException("No input buffer given");  }  if (input.length - offset < len) {    throw new IllegalArgumentException("Input buffer too short");  }  engineUpdate(input,offset,len);  state=IN_PROGRESS;}  }
class C{  public final LC gridGapX(String boundsSize){  setGridGapX(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  private static CtClass[] toCtClass(Class<?>... classes) throws Exception {  ClassPool cp=ClassPool.getDefault();  if (isEmpty(classes) || isNull(classes[0]))   return null;  CtClass[] parameters=new CtClass[classes.length];  for (int i=0; i < classes.length; i++)   parameters[i]=cp.get(classes[i].getName());  return parameters;}  }
class C{  private void formatTo(StringBuilder buf,String s){  if (s == null || s.length() == 0) {    return;  }  if (buf.length() > 0) {    buf.append(' ');  }  int escape=0;  for (int i=0, l=s.length(); i < l; i++) {    char c=s.charAt(i);    if (c == '\\') {      escape|=8;    } else     if (c <= ' ' || c >= 128 || c == '<' || c == '>' || c == '|' || c == '$') {      escape|=1;    } else     if (c == '"') {      escape|=2;    } else     if (c == '\'') {      escape|=4;    }  }  if (escape == 0) {    buf.append(s);  } else   if ((escape & 10) == 0) {    buf.append('"').append(s).append('"');  } else   if ((escape & 12) == 0) {    buf.append('\'').append(s).append('\'');  } else {    buf.append('"');    for (int i=0, l=s.length(); i < l; i++) {      char c=s.charAt(i);      if (c == '"' || c == '\\' || c == '$') {        buf.append('\\');      }      buf.append(c);    }    buf.append('"');  }}  }
class C{  public void add(StochasticOscillatorItem dataItem,boolean notify){  if (!this.isEmpty()) {    StochasticOscillatorItem item0=(StochasticOscillatorItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.251 -0500",hash_original_method="DB127BCAFE6AA42D44BF28FF8E448923",hash_generated_method="DB127BCAFE6AA42D44BF28FF8E448923") void append(byte[] xml) throws SAXException {  append(xml,0,xml.length);}  }
class C{  public DoubleVector sqrt(){  DoubleVector v=new DoubleVector(size());  for (int i=0; i < size(); i++) {    v.V[i]=Math.sqrt(V[i]);  }  return v;}  }
class C{  public synchronized void addListener(final IUserManagerListener listener){  listeners.addListener(listener);}  }
class C{  private static boolean contains(int[] array,int length,int value){  for (int iter=0; iter < length; iter++) {    if (array[iter] == value) {      return true;    }  }  return false;}  }
class C{  public static boolean shouldInstrument(String className,String methodName){  if (isTargetClassName(className))   return true;  if (Properties.INSTRUMENT_PARENT) {    if (inheritanceTree.getSuperclasses(Properties.TARGET_CLASS).contains(className))     return true;  }  if (Properties.INSTRUMENT_CONTEXT) {    CallGraph callGraph=callGraphs.get(Properties.TARGET_CLASS);    if (callGraph != null && callGraph.isCalledMethod(className,methodName)) {      if (Properties.INSTRUMENT_LIBRARIES || DependencyAnalysis.isTargetProject(className))       return true;    }  }  return false;}  }
class C{  @Override public Value concatenate(Value v){  if (v instanceof ArrayVal) {    double[] newvals=new double[array.length + ((ArrayVal)v).getArray().length];    for (int i=0; i < array.length; i++) {      newvals[i]=array[i];    }    for (int i=0; i < ((ArrayVal)v).getArray().length; i++) {      newvals[array.length + i]=((ArrayVal)v).getArray()[i];    }    return new ArrayVal(newvals);  } else   if (v instanceof NoneVal) {    return this;  } else {    Set<Value> corresponding=Arrays.stream(array).mapToObj(null).collect(Collectors.toSet());    return (new SetVal(corresponding)).concatenate(v);  }}  }
class C{  private static double v2Length(Point2D.Double a){  return Math.sqrt(v2SquaredLength(a));}  }
class C{  public static int verifyVersionDetails(String minimumSupportedVersion,String version){  if (minimumSupportedVersion == null) {    throw new IllegalArgumentException("minimum supported version received cannot be null");  } else   if (version == null) {    throw new IllegalArgumentException("discovered version received cannot be null");  }  version=version.trim();  String[] versionToVerifyWith=Pattern.compile("[\\.|\\)|\\(| ]|(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)",Pattern.DOTALL).split(minimumSupportedVersion);  String[] versionProvided=Pattern.compile("[\\.|\\)|\\(| ]|(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)",Pattern.DOTALL).split(version);  versionToVerifyWith[0]=versionToVerifyWith[0].replaceFirst("^0*","");  versionProvided[0]=versionProvided[0].replaceFirst("^0*","");  int i=0;  while (i < versionProvided.length && i < versionToVerifyWith.length && versionProvided[i].equals(versionToVerifyWith[i])) {    i++;  }  if (i < versionProvided.length && i < versionToVerifyWith.length) {    int length=(versionToVerifyWith[i].length() > versionProvided[i].length()) ? versionToVerifyWith[i].length() : versionProvided[i].length();    if (versionToVerifyWith[i].length() > versionProvided[i].length()) {      versionProvided[i]=String.format("%" + length + 's',versionProvided[i]);    } else {      versionToVerifyWith[i]=String.format("%" + length + 's',versionToVerifyWith[i]);    }    int diff=versionProvided[i].compareTo(versionToVerifyWith[i]);    return diff < 0 ? -1 : diff == 0 ? 0 : 1;  }  return versionProvided.length < versionToVerifyWith.length ? -1 : versionProvided.length == versionToVerifyWith.length ? 0 : 1;}  }
class C{  private void zkLoad(){  List<String> znodes=null;  try {    znodes=this.subsCurator.getChildren().forPath(this.subsZnodeRoot);    for (    String znode : znodes) {      byte[] data=this.subsCurator.getData().forPath(znode);      if (null != AES_ZK_SUBS) {        data=CryptoUtils.unwrap(AES_ZK_SUBS,data);      }      if (null == data) {        LOG.error("Ignoring invalid znode data for " + znode);        continue;      }      TDeserializer deser=new TDeserializer(new TCompactProtocol.Factory());      GeoDirectorySubscriptions gds=new GeoDirectorySubscriptions();      deser.deserialize(gds,data);      if (this.name.equals(gds.getName())) {        continue;      }      if (0 == gds.getSubscriptionsSize()) {        continue;      }      for (      Entry<String,Set<String>> entry : gds.getSubscriptions().entrySet()) {        if (!this.selectors.containsKey(entry.getKey())) {          this.selectors.put(entry.getKey(),entry.getValue());        } else {          this.selectors.get(entry.getKey()).addAll(entry.getValue());        }      }      if (znode.contains(this.name + "-" + this.id+ "-")) {        this.currentSubsZnodes.add(znode);      }    }  } catch (  Exception e) {    LOG.error("Error while loading subscriptions",e);    throw new RuntimeException(e);  }}  }
class C{  public boolean isDoubleTapToZoomEnabled(){  return mDoubleTapToZoomEnabled;}  }
class C{  public boolean isNonNull(){  return false;}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public static long readLELong(byte[] b,int off){  return (((b[off + 0] & 0xffL)) | ((b[off + 1] & 0xffL) << 8) | ((b[off + 2] & 0xffL) << 16)| ((b[off + 3] & 0xffL) << 24)| ((b[off + 4] & 0xffL) << 32)| ((b[off + 5] & 0xffL) << 40)| ((b[off + 6] & 0xffL) << 48)| ((b[off + 7] & 0xffL) << 56));}  }
class C{  public synchronized Class<T> compile(final String qualifiedClassName,final CharSequence javaSource,final DiagnosticCollector<JavaFileObject> diagnosticsList,final Class<?>... types) throws CharSequenceCompilerException, ClassCastException {  if (diagnosticsList != null)   diagnostics=diagnosticsList; else   diagnostics=new DiagnosticCollector<>();  Map<String,CharSequence> classes=new HashMap<>(1);  classes.put(qualifiedClassName,javaSource);  Map<String,Class<T>> compiled=compile(classes,diagnosticsList);  Class<T> newClass=compiled.get(qualifiedClassName);  return castable(newClass,types);}  }
class C{  public DockEvent(Object source,EventTarget target,EventType<? extends DockEvent> eventType,double x,double y,double screenX,double screenY,PickResult pickResult){  this(source,target,eventType,x,y,screenX,screenY,pickResult,null);}  }
class C{  public static int gray(int v,int a){  return rgba(v,v,v,a);}  }
class C{  public double[][] reverseEigenVectors(int n){  double[][] eigenVectors=new double[eigenPairs.length][n];  for (int i=0; i < n; i++) {    EigenPair eigenPair=eigenPairs[eigenPairs.length - 1 - i];    VMath.setCol(eigenVectors,i,eigenPair.getEigenvector());  }  return eigenVectors;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.337 -0500",hash_original_method="0D8BD958281DF75319EA682F9725E83E",hash_generated_method="5BDEA4CA0D4C51812B024F4FD22876A5") public EmulatedFields(ObjectStreamField[] fields,ObjectStreamField[] declared){  buildSlots(fields);  declaredFields=declared;}  }
class C{  protected void deleteIcon(){  if (_selectedIcon == null) {    return;  }  if (_iconMap.remove(_selectedIcon.getName()) != null) {    removeIconFamiliesPanel();    addIconsToPanel(_iconMap);    deleteIconButton.setEnabled(false);    validate();  }}  }
class C{  public void selectOldPhoto(){  removeFromCache();  if (isArtist()) {    mTabCarousel.setArtistProfileHeader(this,mArtistName);  } else   if (isAlbum()) {    mTabCarousel.setAlbumProfileHeader(this,mProfileName,mArtistName);  } else {    mTabCarousel.setPlaylistOrGenreProfileHeader(this,mProfileName);  }}  }
class C{  @Override public void onReceivedHttpAuthRequest(WebView view,HttpAuthHandler handler,String host,String realm){  AuthenticationToken token=this.getAuthenticationToken(host,realm);  if (token != null) {    handler.proceed(token.getUserName(),token.getPassword());    return;  }  PluginManager pluginManager=this.parentEngine.pluginManager;  if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(null,new CordovaHttpAuthHandler(handler),host,realm)) {    parentEngine.client.clearLoadTimeoutTimer();    return;  }  super.onReceivedHttpAuthRequest(view,handler,host,realm);}  }
class C{  public JavaDBStorageEngine(String name,ConnectionPoolDataSource dataSource) throws PersistException {  super();  this.name=name;  this.dbTableName=name.replace('.','_');  this.dataSource=dataSource;  try {    initTable();  } catch (  SQLException sqle) {    throw new PersistException("Could not initialize persistent storage",sqle);  }}  }
class C{  public ScaleCASPDII(String sPortPrinter){  m_sPortScale=sPortPrinter;  m_out=null;  m_in=null;  m_iStatusScale=SCALE_READY;  m_dWeightBuffer=0.0;  m_dWeightDecimals=1.0;}  }
class C{  public String convertStatement(String oraStatement){  String retValue[]=m_convert.convert(oraStatement);  if (retValue.length == 0)   return oraStatement;  if (retValue == null) {    log.log(Level.SEVERE,("DB_MySQL.convertStatement - Not Converted (" + oraStatement + ") - "+ m_convert.getConversionError()));    throw new IllegalArgumentException("DB_MySQL.convertStatement - Not Converted (" + oraStatement + ") - "+ m_convert.getConversionError());  }  if (retValue.length != 1) {    log.log(Level.SEVERE,("DB_MySQL.convertStatement - Convert Command Number=" + retValue.length + " ("+ oraStatement+ ") - "+ m_convert.getConversionError()));    throw new IllegalArgumentException("DB_MySQL.convertStatement - Convert Command Number=" + retValue.length + " ("+ oraStatement+ ") - "+ m_convert.getConversionError());  }  if (!oraStatement.equals(retValue[0]) && retValue[0].indexOf("AD_Error") == -1)   log.log(Level.ALL,"MySQL =>" + retValue[0] + "<= <"+ oraStatement+ ">");  Convert.logMigrationScript(oraStatement,null,retValue[0]);  return retValue[0];}  }
class C{  public static <T extends DataObject>List<T> queryActiveResourcesByConstraint(DbClient dbClient,Class<T> clazz,Constraint constraint){  URIQueryResultList list=new URIQueryResultList();  dbClient.queryByConstraint(constraint,list);  Iterator<T> resultsIt=dbClient.queryIterativeObjects(clazz,list);  List<T> objects=new ArrayList<T>();  while (resultsIt.hasNext()) {    T obj=resultsIt.next();    if (!obj.getInactive()) {      objects.add(obj);    }  }  return objects;}  }
class C{  @Override public boolean updateElevation(QuadTree quadTree){  endpointA.updateElevation(quadTree);  endpointB.updateElevation(quadTree);  return (false);}  }
class C{  public String send(){  try {    log.debug("Message sending in progress");    log.debug("  To: " + recipients);    log.debug("  Subject: " + subject);    Transport.send(setMessageBody(getMessage()));    return "success";  } catch (  Exception ex) {    log.error("[mail send] ",ex);    return "Error" + ex;  }}  }
class C{  public int hashCode(){  int myPosition=position;  int hash=0;  while (myPosition < limit) {    hash=hash + get(myPosition++);  }  return hash;}  }
class C{  public static byte[] changeEncoding(byte[] byteArray,Charset charsetFrom,Charset charsetTo){  ByteBuffer inputBuffer=ByteBuffer.wrap(byteArray);  CharBuffer data=charsetFrom.decode(inputBuffer);  ByteBuffer outputBuffer=charsetTo.encode(data);  return outputBuffer.array();}  }
class C{  public static Comparator<File> fileComparator(){  return FILE_COMPARATOR;}  }
class C{  public AutoAssignChecker(TargetFilterQueryManagement targetFilterQueryManagement,TargetManagement targetManagement,DeploymentManagement deploymentManagement,PlatformTransactionManager transactionManager){  this.targetFilterQueryManagement=targetFilterQueryManagement;  this.targetManagement=targetManagement;  this.deploymentManagement=deploymentManagement;  final DefaultTransactionDefinition def=new DefaultTransactionDefinition();  def.setName("autoAssignDSToTargets");  def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);  transactionTemplate=new TransactionTemplate(transactionManager,def);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public ThrowStatement toThrow(){  final ThrowStatement $=ast.newThrowStatement();  $.setExpression(inner);  return $;}  }
class C{  public boolean handlesNullPrefixes(){  return false;}  }
class C{  private static void replaceCollapsedByEclipseSourceRoots(Element libElement,Library.ModifiableModel modifiableModel){  String[] srcUrlsFromClasspath=modifiableModel.getUrls(OrderRootType.SOURCES);  LOG.assertTrue(srcUrlsFromClasspath.length <= 1);  final String eclipseUrl=srcUrlsFromClasspath.length > 0 ? srcUrlsFromClasspath[0] : null;  for (  Element r : libElement.getChildren(SRCROOT_ATTR)) {    final String url=r.getAttributeValue("url");    final String bindAttr=r.getAttributeValue(SRCROOT_BIND_ATTR);    boolean notBind=bindAttr != null && !Boolean.parseBoolean(bindAttr);    if (notBind) {      modifiableModel.addRoot(url,OrderRootType.SOURCES);    } else     if (eclipseUrl != null && areUrlsPointTheSame(url,eclipseUrl) && !Comparing.strEqual(url,eclipseUrl)) {      modifiableModel.addRoot(url,OrderRootType.SOURCES);      if (srcUrlsFromClasspath != null && srcUrlsFromClasspath.length == 1) {        modifiableModel.removeRoot(eclipseUrl,OrderRootType.SOURCES);        srcUrlsFromClasspath=null;      }    }  }}  }
class C{  public Object read(InputNode node) throws Exception {  InputNode next=node.getNext();  Class expect=type.getType();  if (next == null) {    return null;  }  if (next.isEmpty()) {    return null;  }  return root.read(next,expect);}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + HashUtilities.hashCodeForPaint(this.paint);  result=37 * result + HashUtilities.hashCodeForPaint(this.backgroundPaint);  result=37 * result + HashUtilities.hashCodeForPaint(this.outlinePaint);  result=37 * result + this.outlineStroke.hashCode();  return result;}  }
class C{  public static RawHeaders fromMultimap(Map<String,List<String>> map,boolean response) throws IOException {  if (!response)   throw new UnsupportedOperationException();  RawHeaders result=new RawHeaders();  for (  Entry<String,List<String>> entry : map.entrySet()) {    String fieldName=entry.getKey();    List<String> values=entry.getValue();    if (fieldName != null) {      for (      String value : values) {        result.addLenient(fieldName,value);      }    } else     if (!values.isEmpty()) {      result.setStatusLine(values.get(values.size() - 1));    }  }  return result;}  }
class C{  public static String generate(final Map<BigInteger,Set<ResolvedFunction>> resolvedAddresses){  assert resolvedAddresses != null;  final StringBuffer buffer=new StringBuffer();  buffer.append("Resolved the following indirect calls:\n");  for (  final Entry<BigInteger,Set<ResolvedFunction>> element : sort(resolvedAddresses.entrySet())) {    final BigInteger start=element.getKey();    final Set<ResolvedFunction> targets=element.getValue();    buffer.append(String.format("%08X ->\n",start.longValue()));    for (    final ResolvedFunction target : targets) {      if (target.getFunction() != null) {        final Function function=target.getFunction();        final Address functionAddress=function.getAddress();        final String functionName=function.getModule().getName() + "!" + function.getName();        buffer.append(String.format("  %08X (%s)\n",functionAddress.toLong(),functionName));      } else       if (target.getMemoryModule() != null) {        final MemoryModule module=target.getMemoryModule();        final Address functionAddress=target.getAddress();        final String functionName=module.getName() + "!???";        buffer.append(String.format("  %08X (%s)\n",functionAddress.toLong(),functionName));      } else {        final Address address=target.getAddress();        buffer.append(String.format("  %s (%s)\n",address.toHexString().toUpperCase(),"???!???"));      }    }  }  return buffer.toString();}  }
class C{  public boolean canBeInstrumented(){  if (isWithinConstructor() && proceedsOwnConstructorInvocation()) {    return false;  }  return true;}  }
class C{  private String createString(String f){  return "name=" + createString(name) + f+ "totalGlobalMem="+ totalGlobalMem+ f+ "sharedMemPerBlock="+ sharedMemPerBlock+ f+ "regsPerBlock="+ regsPerBlock+ f+ "warpSize="+ warpSize+ f+ "memPitch="+ memPitch+ f+ "maxThreadsPerBlock="+ maxThreadsPerBlock+ f+ "maxThreadsDim="+ Arrays.toString(maxThreadsDim)+ f+ "maxGridSize="+ Arrays.toString(maxGridSize)+ f+ "clockRate="+ clockRate+ f+ "totalConstMem="+ totalConstMem+ f+ "major="+ major+ f+ "minor="+ minor+ f+ "textureAlignment="+ textureAlignment+ f+ "texturePitchAlignment="+ texturePitchAlignment+ f+ "deviceOverlap="+ deviceOverlap+ f+ "multiProcessorCount="+ multiProcessorCount+ f+ "kernelExecTimeoutEnabled="+ kernelExecTimeoutEnabled+ f+ "integrated="+ integrated+ f+ "canMapHostMemory="+ canMapHostMemory+ f+ "computeMode="+ cudaComputeMode.stringFor(computeMode)+ f+ "maxTexture1D="+ maxTexture1D+ f+ "maxTexture1DMipmap="+ maxTexture1DMipmap+ f+ "maxTexture1DLinear="+ maxTexture1DLinear+ f+ "maxTexture2D="+ Arrays.toString(maxTexture2D)+ f+ "maxTexture2DMipmap="+ Arrays.toString(maxTexture2DMipmap)+ f+ "maxTexture2DLinear="+ Arrays.toString(maxTexture2DLinear)+ f+ "maxTexture2DGather="+ Arrays.toString(maxTexture2DGather)+ f+ "maxTexture3D="+ Arrays.toString(maxTexture3D)+ f+ "maxTexture3DAlt="+ Arrays.toString(maxTexture3DAlt)+ f+ "maxTextureCubemap="+ maxTextureCubemap+ f+ "maxTexture1DLayered="+ Arrays.toString(maxTexture1DLayered)+ f+ "maxTexture2DLayered="+ Arrays.toString(maxTexture2DLayered)+ f+ "maxTextureCubemapLayered="+ Arrays.toString(maxTextureCubemapLayered)+ f+ "maxSurface1D="+ maxSurface1D+ f+ "maxSurface2D="+ Arrays.toString(maxSurface2D)+ f+ "maxSurface3D="+ Arrays.toString(maxSurface3D)+ f+ "maxSurface1DLayered="+ Arrays.toString(maxSurface1DLayered)+ f+ "maxSurface2DLayered="+ Arrays.toString(maxSurface2DLayered)+ f+ "maxSurfaceCubemap="+ maxSurfaceCubemap+ f+ "maxSurfaceCubemapLayered="+ Arrays.toString(maxSurfaceCubemapLayered)+ f+ "surfaceAlignment="+ surfaceAlignment+ f+ "concurrentKernels="+ concurrentKernels+ f+ "ECCEnabled="+ ECCEnabled+ f+ "pciBusID="+ pciBusID+ f+ "pciDeviceID="+ pciDeviceID+ f+ "pciDomainID="+ pciDomainID+ f+ "tccDriver="+ tccDriver+ f+ "asyncEngineCount="+ asyncEngineCount+ f+ "unifiedAddressing="+ unifiedAddressing+ f+ "memoryClockRate="+ memoryClockRate+ f+ "memoryBusWidth="+ memoryBusWidth+ f+ "l2CacheSize="+ l2CacheSize+ f+ "maxThreadsPerMultiProcessor="+ maxThreadsPerMultiProcessor+ f+ "streamPrioritiesSupported="+ streamPrioritiesSupported+ f+ "globalL1CacheSupported="+ globalL1CacheSupported+ f+ "localL1CacheSupported="+ localL1CacheSupported+ f+ "sharedMemPerMultiprocessor="+ sharedMemPerMultiprocessor+ f+ "regsPerMultiprocessor="+ regsPerMultiprocessor+ f+ "managedMemory="+ managedMemory+ f+ "isMultiGpuBoard="+ isMultiGpuBoard+ f+ "multiGpuBoardGroupID="+ multiGpuBoardGroupID+ f+ "hostNativeAtomicSupported="+ hostNativeAtomicSupported+ f+ "singleToDoublePrecisionPerfRatio="+ singleToDoublePrecisionPerfRatio+ f+ "pageableMemoryAccess="+ pageableMemoryAccess+ f+ "concurrentManagedAccess="+ concurrentManagedAccess+ f;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:27.656 -0500",hash_original_method="607044CE64B6D03D5A8C48CB0A47A2B4",hash_generated_method="7AA0CE63318E300FCF20DD78AB8B805B") public SSLSocketFactory(javax.net.ssl.SSLSocketFactory socketfactory){  super();  this.sslcontext=null;  this.socketfactory=socketfactory;  this.nameResolver=null;}  }
class C{  protected static byte[][] parseDirectives(byte[] buf,String[] keyTable,List<byte[]> realmChoices,int realmIndex) throws SaslException {  byte[][] valueTable=new byte[keyTable.length][];  ByteArrayOutputStream key=new ByteArrayOutputStream(10);  ByteArrayOutputStream value=new ByteArrayOutputStream(10);  boolean gettingKey=true;  boolean gettingQuotedValue=false;  boolean expectSeparator=false;  byte bch;  int i=skipLws(buf,0);  while (i < buf.length) {    bch=buf[i];    if (gettingKey) {      if (bch == ',') {        if (key.size() != 0) {          throw new SaslException("Directive key contains a ',':" + key);        }        i=skipLws(buf,i + 1);      } else       if (bch == '=') {        if (key.size() == 0) {          throw new SaslException("Empty directive key");        }        gettingKey=false;        i=skipLws(buf,i + 1);        if (i < buf.length) {          if (buf[i] == '"') {            gettingQuotedValue=true;            ++i;          }        } else {          throw new SaslException("Valueless directive found: " + key.toString());        }      } else       if (isLws(bch)) {        i=skipLws(buf,i + 1);        if (i < buf.length) {          if (buf[i] != '=') {            throw new SaslException("'=' expected after key: " + key.toString());          }        } else {          throw new SaslException("'=' expected after key: " + key.toString());        }      } else {        key.write(bch);        ++i;      }    } else     if (gettingQuotedValue) {      if (bch == '\\') {        ++i;        if (i < buf.length) {          value.write(buf[i]);          ++i;        } else {          throw new SaslException("Unmatched quote found for directive: " + key.toString() + " with value: "+ value.toString());        }      } else       if (bch == '"') {        ++i;        gettingQuotedValue=false;        expectSeparator=true;      } else {        value.write(bch);        ++i;      }    } else     if (isLws(bch) || bch == ',') {      extractDirective(key.toString(),value.toByteArray(),keyTable,valueTable,realmChoices,realmIndex);      key.reset();      value.reset();      gettingKey=true;      gettingQuotedValue=expectSeparator=false;      i=skipLws(buf,i + 1);    } else     if (expectSeparator) {      throw new SaslException("Expecting comma or linear whitespace after quoted string: \"" + value.toString() + "\"");    } else {      value.write(bch);      ++i;    }  }  if (gettingQuotedValue) {    throw new SaslException("Unmatched quote found for directive: " + key.toString() + " with value: "+ value.toString());  }  if (key.size() > 0) {    extractDirective(key.toString(),value.toByteArray(),keyTable,valueTable,realmChoices,realmIndex);  }  return valueTable;}  }
class C{  public void update(World world,BlockPos pos){}  }
class C{  public void save(){  try {    Response response=sl.findService(PricingService.class).saveOperatorRevenueShare(model.getSelectedTemplateKey(),model.getOperatorRevenueShare());    ui.handle(response,INFO_SAVED);  } catch (  ObjectNotFoundException e) {    model.setSelectedTemplateKey(0L);    ui.handleException(e);  }catch (  ValidationException|ServiceOperationException|ConcurrentModificationException e) {    ui.handleException(e);  }}  }
class C{  public static String arrayToCommaDelimitedString(Object[] strings){  if (strings == null) {    return "";  }  StringBuilder builder=new StringBuilder();  for (int i=0; i < strings.length; i++) {    if (i > 0) {      builder.append(",");    }    builder.append(String.valueOf(strings[i]));  }  return builder.toString();}  }
class C{  public void testPathModeSecondaryNoCfg() throws Exception {  pathModes(F.t("dir",PROXY));  String errMsg=null;  try {    startUp();  } catch (  IgniteException e) {    errMsg=e.getCause().getCause().getMessage();  }  assertTrue(errMsg.startsWith("Grid configuration parameter invalid: secondaryFileSystem cannot be null when mode is not PRIMARY"));}  }
class C{  public static boolean isStrictfp(int flags){  return (flags & AccStrictfp) != 0;}  }
class C{  public RequestOptions build(){  return new RequestOptions(normalizeString(this.apiKey),normalizeString(this.apiVersion),this.test);}  }
class C{  public void irvineHash(final long in0){  long in=in0;  for (int k=0; k < 8; k++) {    irvineHash((int)(in & 0xFF));    in=in >>> 8;  }}  }
class C{  public static String format(String pattern,Object argument){  return format(pattern,new Object[]{argument});}  }
class C{  private static String hexify(float f){  int bits=Float.floatToIntBits(f);  return (" (0x" + java.lang.Integer.toHexString(bits) + ")");}  }
class C{  public SnappyCompressor(){}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.ManagerServiceImpl.resetPassword(..))") public Object doResetPassword(final ProceedingJoinPoint pjp) throws Throwable {  setPassword((Manager)pjp.getArgs()[0]);  return pjp.proceed();}  }
class C{  public static long toAddress(Object obj){  Object[] array=new Object[]{obj};  long baseOffset=unsafe.arrayBaseOffset(Object[].class);  return normalize(unsafe.getInt(array,baseOffset));}  }
class C{  protected JMenuItem createColumnMenuItem(ActionListener listener,DataLineModel<?,?> model,LimeJTable table,int i){  Object id=model.getColumnId(i);  String name=model.getColumnName(i);  JCheckBoxMenuItem item=new SkinCheckBoxMenuItem(name,table.isColumnVisible(id));  item.putClientProperty(COLUMN_ID,id);  item.addActionListener(listener);  return item;}  }
class C{  public static ExceptionBuilder notFound(){  return new ExceptionBuilder(Status.NOT_FOUND);}  }
class C{  @Override public String toString(){  return in.toString();}  }
class C{  public Date engineGetCreationDate(String alias){  Date date=null;  Object entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry != null) {    if (entry instanceof TrustedCertEntry) {      date=new Date(((TrustedCertEntry)entry).date.getTime());    } else     if (entry instanceof PrivateKeyEntry) {      date=new Date(((PrivateKeyEntry)entry).date.getTime());    } else {      date=new Date(((SecretKeyEntry)entry).date.getTime());    }  }  return date;}  }
class C{  public static int pxToSp(Context context,float px){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(px / fontScale + 0.5f);}  }
class C{  public X509Certificate generate(X500Name subject,X500Name issuer,long validity,PublicKey publicKey,PrivateKey privateKey,SignatureType signatureType,BigInteger serialNumber) throws CryptoException {  return generate(subject,issuer,validity,publicKey,privateKey,signatureType,serialNumber,null,new BouncyCastleProvider());}  }
class C{  public void addCharset(char[] chars){  addCharset(defaultFace,chars);}  }
class C{  public static boolean testRayAar(Vector2fc origin,Vector2fc dir,Vector2fc min,Vector2fc max){  return testRayAar(origin.x(),origin.y(),dir.x(),dir.y(),min.x(),min.y(),max.x(),max.y());}  }
class C{  public static <T>T findById(Context context,Class<T> object,long id){  return QuantumFlux.findByPrimaryKey(object,id);}  }
class C{  public static byte[] intToBytes(int val){  byte[] arr=new byte[4];  arr[0]=(byte)(val >>> 24);  arr[1]=(byte)(val >>> 16);  arr[2]=(byte)(val >>> 8);  arr[3]=(byte)(val);  return arr;}  }
class C{  public TransitRouteContainer(TransitRoute r,double countsInterval,int maxSlice){  this.id=r.getId();  this.boarding=new Counts();  this.alighting=new Counts();  this.capacity=new Counts();  this.totalPax=new Counts();  this.occupancy=new Counts();  this.interval=countsInterval;  this.maxSlice=maxSlice;  for (int i=0; i < r.getStops().size(); i++) {    TransitRouteStop s=r.getStops().get(i);    create(this.boarding,Id.create(i,Link.class),s.getStopFacility().getId(),0.,0.);    create(this.alighting,Id.create(i,Link.class),s.getStopFacility().getId(),0.,0.);    create(this.capacity,Id.create(i,Link.class),s.getStopFacility().getId(),0.,0.);    create(this.totalPax,Id.create(i,Link.class),s.getStopFacility().getId(),0.,0.);    create(this.occupancy,Id.create(i,Link.class),s.getStopFacility().getId(),0.,0.);  }}  }
class C{  public PaymentProcessedOrderEventHandlerImpl(final PaymentProcessorFactory paymentProcessorFactory){  this.paymentProcessorFactory=paymentProcessorFactory;}  }
class C{  public ClassPool(ClassPool parent){  this.classes=new Hashtable(INIT_HASH_SIZE);  this.source=new ClassPoolTail();  this.parent=parent;  if (parent == null) {    CtClass[] pt=CtClass.primitiveTypes;    for (int i=0; i < pt.length; ++i)     classes.put(pt[i].getName(),pt[i]);  }  this.cflow=null;  this.compressCount=0;  clearImportedPackages();}  }
class C{  public boolean isFinished(){  try {    OrderStatus status=OrderStatus.valueOf(order.getOrderStatus());switch (status) {case CANCELLED:case PARTIAL_SUCCESS:case REJECTED:case SUCCESS:case ERROR:      return true;default :    return false;}} catch (RuntimeException e) {return false;}}  }
class C{  public void appendNewline(){  document.append("\\par");  document.append('\n');  lastWasControlWord=false;}  }
class C{  public void testIsURLEncoded(){  System.out.println("isURLEncoded");  String data="This%20is%20a%20test%20string%20with%20special%20chars%20like%20ths%3A%20%2f@%5E%26%2a%28%28%29%7B%7D%7B%3A%3B";  boolean result=Encoding.isURLEncoded(data);  assertTrue(result);  data=" /!@#$*()[]{}";  result=Encoding.isURLEncoded(data);  assertFalse(result);}  }
class C{  public void add(Type t){  Trace.trace(Trace.Item.PARSER,"defining type %s",t);  if (table.containsKey(t.getName()))   throw new RuntimeException("Type " + t.getName() + " already defined");  table.put(t.getName(),t);}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,tex);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  private void iflow_create(SecuritySpecification spec){  String separator="|";  String slash="/";  StringBuffer sb=new StringBuffer();  for (  Map.Entry<Method,List<Method>> eventBlock : spec.getEventBlocks().entrySet()) {    String entryPoint=String.format("Entry Point: %s (%s)\n\n",eventBlock.getKey().getSignature(),eventBlock.getKey().getDeclSourceLocation());    StringBuffer flows=new StringBuffer();    boolean hasFlow=false;    for (    Method outputEvent : eventBlock.getValue()) {      boolean isSink=outputEvent.getSinkInfoKinds().size() > 0;      if (!isSink)       continue;      Map<InfoKind,Set<Stmt>> iflows=outputEvent.getImplicitFlows();      StringBuilder tmpBuilder=new StringBuilder();      tmpBuilder.append(eventBlock.getKey().getSignature()).append(separator);      tmpBuilder.append("{");      tmpBuilder.append(outputEvent.getSignature()).append(slash);      tmpBuilder.append(outputEvent.getSinkInfoKinds().iterator().next()).append(slash);      boolean firstLine=true;      for (      SourceLocationTag tag : outputEvent.getLines()) {        if (!firstLine)         tmpBuilder.append(",");        tmpBuilder.append(tag);        firstLine=false;      }      tmpBuilder.append("}");      tmpBuilder.append("<=");      String flowPrefix=tmpBuilder.toString().replaceAll("_ds_method_clone_\\d+","");      if (iflows != null && !iflows.isEmpty()) {        hasFlow=true;        flows.append(String.format("Sink: %s\n",outputEvent.getSignature()));        flows.append("Lines: \n");        flows.append("Implicit Sources: \n");        for (        Map.Entry<InfoKind,Set<Stmt>> source : iflows.entrySet()) {          for (          Stmt stmt : source.getValue()) {            flows.append(String.format("\t%s (%s)\n",stmt,source.getKey()));            SourceLocationTag locationTag=SootUtils.getSourceLocation(stmt);            String lineNumber="";            if (locationTag != null)             lineNumber=locationTag.toString();            SootMethodRef method=stmt.getInvokeExpr().getMethodRef();            tmpBuilder=new StringBuilder();            tmpBuilder.append(String.format("{%s%s%s%s%s/%s}",method,slash,source.getKey(),slash,lineNumber,"IMPLICIT"));            String flowLine=flowPrefix + tmpBuilder;            formattedFlowSet.add(flowLine);          }        }      }    }    if (hasFlow) {      sb.append(entryPoint);      sb.append(flows);      sb.append("\n");    }  }  sb.append("\n");  for (  String flow : formattedFlowSet) {    sb.append("FLOW:").append(flow).append("\n\n");  }  sb.append("\n");  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + IFLOW_FILE_NAME);    fw.write(sb.toString());    fw.close();  } catch (  IOException e) {  }}  }
class C{  protected String doIt() throws Exception {  log.info("C_InvoiceBatch_ID=" + p_C_InvoiceBatch_ID + ", DocAction="+ p_DocAction);  if (p_C_InvoiceBatch_ID == 0)   throw new AdempiereUserError("C_InvoiceBatch_ID = 0");  MInvoiceBatch batch=new MInvoiceBatch(getCtx(),p_C_InvoiceBatch_ID,get_TrxName());  if (batch.get_ID() == 0)   throw new AdempiereUserError("@NotFound@: @C_InvoiceBatch_ID@ - " + p_C_InvoiceBatch_ID);  if (batch.isProcessed())   throw new AdempiereUserError("@Processed@");  if (batch.getControlAmt().signum() != 0 && batch.getControlAmt().compareTo(batch.getDocumentAmt()) != 0)   throw new AdempiereUserError("@ControlAmt@ <> @DocumentAmt@");  MInvoiceBatchLine[] lines=batch.getLines(false);  for (int i=0; i < lines.length; i++) {    MInvoiceBatchLine line=lines[i];    if (line.getC_Invoice_ID() != 0 || line.getC_InvoiceLine_ID() != 0)     continue;    if ((m_oldDocumentNo != null && !m_oldDocumentNo.equals(line.getDocumentNo())) || m_oldC_BPartner_ID != line.getC_BPartner_ID() || m_oldC_BPartner_Location_ID != line.getC_BPartner_Location_ID())     completeInvoice();    if (m_invoice == null) {      m_invoice=new MInvoice(batch,line);      if (!m_invoice.save())       throw new AdempiereUserError("Cannot save Invoice");      m_oldDocumentNo=line.getDocumentNo();      m_oldC_BPartner_ID=line.getC_BPartner_ID();      m_oldC_BPartner_Location_ID=line.getC_BPartner_Location_ID();    }    if (line.isTaxIncluded() != m_invoice.isTaxIncluded()) {      throw new AdempiereUserError("Line " + line.getLine() + " TaxIncluded inconsistent");    }    MInvoiceLine invoiceLine=new MInvoiceLine(m_invoice);    invoiceLine.setDescription(line.getDescription());    invoiceLine.setC_Charge_ID(line.getC_Charge_ID());    invoiceLine.setQty(line.getQtyEntered());    invoiceLine.setPrice(line.getPriceEntered());    invoiceLine.setC_Tax_ID(line.getC_Tax_ID());    invoiceLine.setTaxAmt(line.getTaxAmt());    invoiceLine.setLineNetAmt(line.getLineNetAmt());    invoiceLine.setLineTotalAmt(line.getLineTotalAmt());    if (!invoiceLine.save()) {      throw new AdempiereUserError("Cannot save Invoice Line");    }    line.setC_Invoice_ID(m_invoice.getC_Invoice_ID());    line.setC_InvoiceLine_ID(invoiceLine.getC_InvoiceLine_ID());    line.saveEx();  }  completeInvoice();  batch.setProcessed(true);  batch.saveEx();  return "#" + m_count;}  }
class C{  public BigInteger calculateSessionKey() throws CryptoException {  if ((this.S == null) || (this.M1 == null) || (this.M2 == null)) {    throw new CryptoException("Impossible to compute Key: " + "some data are missing from the previous operations (S,M1,M2)");  }  this.Key=SRP6Util.calculateKey(digest,N,S);  return Key;}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  static public void assertEquals(boolean expected,boolean actual){  assertEquals(null,expected,actual);}  }
class C{  private void restoreData(){  Map<String,?> map=preferenceUtils.getAll();  Set<String> strings=map.keySet();  for (  String string : strings) {    if (string.startsWith(SharedPreferenceUtils.keyTestMode)) {      preferenceUtils.restoreKey(string);    }  }  refreshKeyValues();}  }
class C{  protected void textLineImpl(char buffer[],int start,int stop,float x,float y){  for (int index=start; index < stop; index++) {    textCharImpl(buffer[index],x,y);    x+=textWidth(buffer[index]);  }}  }
class C{  public boolean removeProperty(String key,boolean defaultValue){  String x=removeProperty(key,null);  return x == null ? defaultValue : Boolean.parseBoolean(x);}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  @SuppressLint("SimpleDateFormat") private void processTokenResponse(String responseCode,String result){  String refreshToken;  String accessToken;  int timeToExpireSecond;  IdentityProxy identityProxy=IdentityProxy.getInstance();  try {    if (Constants.REQUEST_SUCCESSFUL.equals(responseCode)) {      JSONObject response=new JSONObject(result);      refreshToken=response.getString(Constants.REFRESH_TOKEN);      accessToken=response.getString(Constants.ACCESS_TOKEN);      timeToExpireSecond=Integer.parseInt(response.getString(Constants.EXPIRE_LABEL));      token.setRefreshToken(refreshToken);      token.setAccessToken(accessToken);      SharedPreferences mainPref=IdentityProxy.getInstance().getContext().getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);      Editor editor=mainPref.edit();      editor.putString(Constants.REFRESH_TOKEN,refreshToken);      editor.putString(Constants.ACCESS_TOKEN,accessToken);      Date date=new Date();      long expiresIN=date.getTime() + (timeToExpireSecond * 1000);      Date expireDate=new Date(expiresIN);      String strDate=dateFormat.format(expireDate);      token.setDate(strDate);      editor.putString(Constants.DATE_LABEL,strDate);      editor.commit();      identityProxy.receiveNewAccessToken(responseCode,Constants.SUCCESS_RESPONSE,token);    } else     if (responseCode != null) {      if (result != null) {        JSONObject responseBody=new JSONObject(result);        String errorDescription=responseBody.getString(Constants.ERROR_DESCRIPTION_LABEL);        identityProxy.receiveNewAccessToken(responseCode,errorDescription,token);      }    }  } catch (  JSONException e) {    identityProxy.receiveNewAccessToken(responseCode,null,token);    Log.e(TAG,"Invalid JSON." + e);  }}  }
class C{  @Override public void pullToRefresh(){}  }
class C{  private void addOutgoingChatMessage(ChatMessage msg,Status status) throws PayloadException, NetworkException {  String msgId=msg.getMessageId();  long timestampSent=msg.getTimestampSent();  long deliveryExpiration=getDeliveryExpirationTime(timestampSent);  mMessagingLog.addOutgoingOneToOneChatMessage(msg,status,ReasonCode.UNSPECIFIED,deliveryExpiration);  if (deliveryExpiration != 0) {    mImService.getDeliveryExpirationManager().scheduleOneToOneChatMessageDeliveryTimeoutAlarm(mContact,msgId,deliveryExpiration);  }}  }
class C{  public void remove(T item){  if (set.remove(item)) {    fireContentsChanged(this,0,getSize() - 1);  }}  }
class C{  public void addIntersections(LineIntersector li,int segmentIndex,int geomIndex){  for (int i=0; i < li.getIntersectionNum(); i++) {    addIntersection(li,segmentIndex,geomIndex,i);  }}  }
class C{  public static float[] spatialSampling(Gesture gesture,int bitmapSize,boolean keepAspectRatio){  final float targetPatchSize=bitmapSize - 1;  float[] sample=new float[bitmapSize * bitmapSize];  Arrays.fill(sample,0);  RectF rect=gesture.getBoundingBox();  final float gestureWidth=rect.width();  final float gestureHeight=rect.height();  float sx=targetPatchSize / gestureWidth;  float sy=targetPatchSize / gestureHeight;  if (keepAspectRatio) {    float scale=sx < sy ? sx : sy;    sx=scale;    sy=scale;  } else {    float aspectRatio=gestureWidth / gestureHeight;    if (aspectRatio > 1) {      aspectRatio=1 / aspectRatio;    }    if (aspectRatio < SCALING_THRESHOLD) {      float scale=sx < sy ? sx : sy;      sx=scale;      sy=scale;    } else {      if (sx > sy) {        float scale=sy * NONUNIFORM_SCALE;        if (scale < sx) {          sx=scale;        }      } else {        float scale=sx * NONUNIFORM_SCALE;        if (scale < sy) {          sy=scale;        }      }    }  }  float preDx=-rect.centerX();  float preDy=-rect.centerY();  float postDx=targetPatchSize / 2;  float postDy=targetPatchSize / 2;  final ArrayList<GestureStroke> strokes=gesture.getStrokes();  final int count=strokes.size();  int size;  float xpos;  float ypos;  for (int index=0; index < count; index++) {    final GestureStroke stroke=strokes.get(index);    float[] strokepoints=stroke.points;    size=strokepoints.length;    final float[] pts=new float[size];    for (int i=0; i < size; i+=2) {      pts[i]=(strokepoints[i] + preDx) * sx + postDx;      pts[i + 1]=(strokepoints[i + 1] + preDy) * sy + postDy;    }    float segmentEndX=-1;    float segmentEndY=-1;    for (int i=0; i < size; i+=2) {      float segmentStartX=pts[i] < 0 ? 0 : pts[i];      float segmentStartY=pts[i + 1] < 0 ? 0 : pts[i + 1];      if (segmentStartX > targetPatchSize) {        segmentStartX=targetPatchSize;      }      if (segmentStartY > targetPatchSize) {        segmentStartY=targetPatchSize;      }      plot(segmentStartX,segmentStartY,sample,bitmapSize);      if (segmentEndX != -1) {        if (segmentEndX > segmentStartX) {          xpos=(float)Math.ceil(segmentStartX);          float slope=(segmentEndY - segmentStartY) / (segmentEndX - segmentStartX);          while (xpos < segmentEndX) {            ypos=slope * (xpos - segmentStartX) + segmentStartY;            plot(xpos,ypos,sample,bitmapSize);            xpos++;          }        } else         if (segmentEndX < segmentStartX) {          xpos=(float)Math.ceil(segmentEndX);          float slope=(segmentEndY - segmentStartY) / (segmentEndX - segmentStartX);          while (xpos < segmentStartX) {            ypos=slope * (xpos - segmentStartX) + segmentStartY;            plot(xpos,ypos,sample,bitmapSize);            xpos++;          }        }        if (segmentEndY > segmentStartY) {          ypos=(float)Math.ceil(segmentStartY);          float invertSlope=(segmentEndX - segmentStartX) / (segmentEndY - segmentStartY);          while (ypos < segmentEndY) {            xpos=invertSlope * (ypos - segmentStartY) + segmentStartX;            plot(xpos,ypos,sample,bitmapSize);            ypos++;          }        } else         if (segmentEndY < segmentStartY) {          ypos=(float)Math.ceil(segmentEndY);          float invertSlope=(segmentEndX - segmentStartX) / (segmentEndY - segmentStartY);          while (ypos < segmentStartY) {            xpos=invertSlope * (ypos - segmentStartY) + segmentStartX;            plot(xpos,ypos,sample,bitmapSize);            ypos++;          }        }      }      segmentEndX=segmentStartX;      segmentEndY=segmentStartY;    }  }  return sample;}  }
class C{  public boolean mouseReleased(MouseEvent e){  if (wantsEvents()) {    if (omdtmm != null) {      omdtmm.mouseReleased(e);      return true;    } else {      return false;    }  } else {    return super.mouseReleased(e);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.440 -0500",hash_original_method="6C5EDA37A43755FDD4D913859A366E87",hash_generated_method="A8F57EBF26CA195968C557CB45DEC795") static public void assertNotSame(Object expected,Object actual){  assertNotSame(null,expected,actual);}  }
class C{  public void calcMaxDistances(boolean mobile){}  }
class C{  public static void clear(){  final AsyncContext context=getContext();  final boolean forceSetSecurity=forceSetSecurityContext(context);  if (forceSetSecurity) {    SecurityContextHolder.clearContext();  }  ctx.set(null);}  }
class C{  public void addExtraInput(){  BinderAnchor arg=new BinderAnchor(this,wrapper,new Binder("a_" + this.args.size()));  this.args.add(arg);  this.argSpace.getChildren().add(arg);  this.wrapper.initiateConnectionChanges();}  }
class C{  public static boolean areRegexpModifiersValid(String flags){  final int GROUP=1;  final int CASE_INSENSITIVE=2;  final int MULTILINE=4;  int seen=0;  for (int i=0, n=flags.length(); i < n; ++i) {    char flag=flags.charAt(i);    int flagMask;switch (flag) {case 'g':      flagMask=GROUP;    break;case 'i':  flagMask=CASE_INSENSITIVE;break;case 'm':flagMask=MULTILINE;break;default :return false;}if ((seen & flagMask) != 0) {return false;}seen=seen | flagMask;}return true;}  }
class C{  public AttributeProductFilter(final String id,final long categoryId,final NavigationContext navigationContext){  super(id,categoryId,navigationContext);  if (categoryId > 0L) {    final String selectedLocale=getLocale().getLanguage();    filteredNavigationByAttribute=getCategory().getNavigationByAttributes() == null ? false : getCategory().getNavigationByAttributes();    final Long productType=categoryServiceFacade.getCategoryProductTypeId(categoryId,ShopCodeContext.getShopId());    if (filteredNavigationByAttribute && productType != null) {      setNavigationRecords(attributeFilteredNavigationSupport.getFilteredNavigationRecords(getNavigationContext(),selectedLocale,productType));    }  }}  }
class C{  public LastReqEntry(DerValue encoding) throws Asn1Exception, IOException {  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  DerValue der;  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    lrType=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  lrValue=KerberosTime.parse(encoding.getData(),(byte)0x01,false);  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  public static Filter parse(JsonElement filterElt,Set<String> filterFields) throws FilterParseException {  String name=Utils.getFieldValueAsString(filterElt,"name");  String opStr=Utils.getFieldValueAsString(filterElt,"type");  if (opStr == null)   throw new FilterParseException("Missing \"type\" property in\n " + filterElt);  FilterType op=FilterType.parse(opStr);  FilterPred pred=FilterPred.parse(filterElt,filterFields);  JsonElement enabledElt=Utils.getFieldValue(filterElt,"enabled");  if (enabledElt != null && enabledElt.isJsonPrimitive()) {    boolean enabled=enabledElt.getAsBoolean();    return new Filter(name,op,pred,enabled);  } else {    return new Filter(name,op,pred);  }}  }
class C{  public boolean isUpdatable(){  return this.isUpdatable;}  }
class C{  public static <FF extends FileFormat>Optional<FF> matchMIMEType(String mimeType,Iterable<FF> fileFormats){  for (  FF fileFormat : fileFormats) {    if (fileFormat.hasDefaultMIMEType(mimeType)) {      return Optional.of(fileFormat);    }  }  for (  FF fileFormat : fileFormats) {    if (fileFormat.hasMIMEType(mimeType)) {      return Optional.of(fileFormat);    }  }  return Optional.empty();}  }
class C{  public DeleteRawModifiedDetails clone(){  DeleteRawModifiedDetails result=new DeleteRawModifiedDetails();  result.NodeId=NodeId;  result.IsDeleteModified=IsDeleteModified;  result.StartTime=StartTime;  result.EndTime=EndTime;  return result;}  }
class C{  public boolean is(String fault,String action){  int mask=getAction(action).intValue();  int bits=get(fault).intValue();  boolean set=((bits & mask) == mask) ? true : false;  return set;}  }
class C{  public static boolean isBetween(final float x,final float a,final float b,final float offset){  return (a > b) ? x <= a + offset && x >= b - offset : x <= b + offset && x >= a - offset;}  }
class C{  public void testMoreDocs() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter riw=new RandomIndexWriter(random(),dir);  for (int i=0; i < 100; i++) {    Document doc=new Document();    doc.add(new TextField("eng",new BugReproTokenStream()));    riw.addDocument(doc);  }  riw.close();  dir.close();}  }
class C{  public static boolean send(String msg,String to,Context ctx){  return send(new XmppMsg(msg),to,ctx);}  }
class C{  public Source<String> numericBetween(int startInclusive,int endInclusive){  ArgumentAssertions.checkArguments(startInclusive <= endInclusive,"There are no Integer values to be generated between startInclusive (%s) and endInclusive (%s)",startInclusive,endInclusive);  return Compositions.weightWithValues(Strings.boundedNumericStrings(startInclusive,endInclusive),Integer.toString(endInclusive),Integer.toString(startInclusive));}  }
class C{  public static byte[] encode(byte[] binaryData){  if (binaryData == null) {    binaryData=EMPTY_BYTE_ARRAY;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  if (fewerThan24bits != 0) {    encodedData=new byte[(numberTriplets + 1) * 4];  } else {    encodedData=new byte[numberTriplets * 4];  }  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    encodedIndex=i * 4;    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];  }  dataIndex=i * 3;  encodedIndex=i * 4;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  return encodedData;}  }
class C{  public static void applyStatusLblStyle(final Table targetTable,final Button pinBtn,final Object itemId){  final Item item=targetTable.getItem(itemId);  if (item != null) {    final TargetUpdateStatus updateStatus=(TargetUpdateStatus)item.getItemProperty(SPUILabelDefinitions.VAR_TARGET_STATUS).getValue();    pinBtn.removeStyleName("statusIconRed statusIconBlue statusIconGreen statusIconYellow statusIconLightBlue");    if (updateStatus == TargetUpdateStatus.ERROR) {      pinBtn.addStyleName("statusIconRed");    } else     if (updateStatus == TargetUpdateStatus.UNKNOWN) {      pinBtn.addStyleName("statusIconBlue");    } else     if (updateStatus == TargetUpdateStatus.IN_SYNC) {      pinBtn.addStyleName("statusIconGreen");    } else     if (updateStatus == TargetUpdateStatus.PENDING) {      pinBtn.addStyleName("statusIconYellow");    } else     if (updateStatus == TargetUpdateStatus.REGISTERED) {      pinBtn.addStyleName("statusIconLightBlue");    }  }}  }
class C{  public static URI resolve(final URI baseURI,final String reference){  return URIUtils.resolve(baseURI,URI.create(reference));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.THIS_TARGET;}  }
class C{  public Double zscore(final String key,final String member){  checkIsInMulti();  client.zscore(key,member);  final String score=client.getBulkReply();  return (score != null ? new Double(score) : null);}  }
class C{  public void clear(){  modCount++;  header.next=header.previous=header;  size=0;}  }
class C{  public MovAvgBuilder modelBuilder(MovAvgModelBuilder modelBuilder){  this.modelBuilder=modelBuilder;  return this;}  }
class C{  private boolean pluginFile(String name){  for (  final File file : new File("plugins").listFiles()) {    if (file.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  public void done() throws IOException {  offsets.add(new int[]{lastPtr,0});  tagout.flush();  byte[] contents=tagWriter.bytes.toByteArray();  tagWriter.out=null;  tagWriter.bytes=null;  for (Iterator enumerator=offsets.iterator(); enumerator.hasNext(); ) {    int[] offInfo=(int[])enumerator.next();    int ptr=offInfo[0];    int off=offInfo[1];    byte[] offbytes=OutStream.uintTo2Bytes(off);    contents[ptr]=offbytes[0];    contents[ptr + 1]=offbytes[1];  }  tagWriter.tags.tag(tagWriter.tagType,true,contents);}  }
class C{  public void changePalette(){  int mapNum;  int mapAreaNum;  int layerNum;  if (selectedMapAndLayer[0] != -1) {    mapNum=selectedMapAndLayer[0];    mapAreaNum=selectedMapAndLayer[2];    layerNum=selectedMapAndLayer[1];    selectedMapAndLayer[0]=-1;    selectedMapAndLayer[1]=-1;    selectedMapAndLayer[2]=-1;  } else {    mapNum=activeMap;    mapAreaNum=openMaps.get(mapNum).getActiveMapAreaElementNumber();    if (mapAreaNum < 0) {      showFeedback(messages.getString("NoMapAreas"));      return;    }    layerNum=openMaps.get(mapNum).getActiveMapArea().getActiveLayerOverlayNumber();  }  if (mapAreaNum < 0) {    showFeedback(messages.getString("NoMapAreas"));    return;  }  MapArea ma=openMaps.get(mapNum).getMapAreaByElementNum(mapAreaNum);  if (ma == null) {    return;  }  if (ma.getLayer(layerNum).getLayerType() == MapLayerType.RASTER) {    RasterLayerInfo rli=(RasterLayerInfo)ma.getLayer(layerNum);    String palette=rli.getPaletteFile();    boolean isReversed=rli.isPaletteReversed();    double nonlinearity=rli.getNonlinearity();    PaletteChooser chooser=new PaletteChooser(this,true,paletteDirectory,palette,isReversed,nonlinearity);    chooser.setSize(300,300);    chooser.setVisible(true);    String newPaletteFile=chooser.getValue();    chooser.dispose();    if (newPaletteFile != null) {      if (!newPaletteFile.equals("") && !newPaletteFile.equals("createNewPalette")) {        rli.setPaletteFile(newPaletteFile);        rli.update();        refreshMap(true);      } else       if (newPaletteFile.equals("createNewPalette")) {        PaletteManager pm=new PaletteManager(paletteDirectory,bundle);        pm.setVisible(true);      }    }  }}  }
class C{  private static void writeSpaces(Writer out,int amt) throws IOException {  while (amt > 0) {    out.write(' ');    amt--;  }}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String cfOrZf=environment.getNextVariableString();  instructions.add(ReilHelpers.createOr(offset,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,cfOrZf));  return new Pair<OperandSize,String>(OperandSize.BYTE,cfOrZf);}  }
class C{  private int jjStopAtPos(int pos,int kind){  jjmatchedKind=kind;  jjmatchedPos=pos;  return pos + 1;}  }
class C{  public Vector cross(Vector other){  return new Vector(y * other.z - z * other.y,z * other.x - x * other.z,x * other.y - y * other.x);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public DOMStorableInputOutputFormat(DOMFactory factory,String description,String fileExtension,String mimeType){  this.factory=factory;  this.description=description;  this.fileExtension=fileExtension;  this.mimeType=mimeType;  try {    this.dataFlavor=new DataFlavor(mimeType);  } catch (  ClassNotFoundException ex) {    InternalError error=new InternalError("Unable to create data flavor for mime type:" + mimeType);    error.initCause(ex);    throw error;  }}  }
class C{  private void validateVPLEXBlockSnapshotsForExport(List<URI> blockObjURIs){  for (  URI blockObjectURI : blockObjURIs) {    if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);      if (!CustomQueryUtility.getActiveVolumeByNativeGuid(_dbClient,snapshot.getNativeGuid()).isEmpty()) {        throw APIException.badRequests.cantExportSnapshotExposedAsVPLEXVolume(snapshot.getLabel());      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.003 -0500",hash_original_method="1B6721CDE2ACB08F36930EE6F2223D82",hash_generated_method="9C4816941FFBE11092DD2C5B2DA9AF83") public static boolean invertM(float[] mInv,int mInvOffset,float[] m,int mOffset){  final float src0=m[mOffset + 0];  final float src4=m[mOffset + 1];  final float src8=m[mOffset + 2];  final float src12=m[mOffset + 3];  final float src1=m[mOffset + 4];  final float src5=m[mOffset + 5];  final float src9=m[mOffset + 6];  final float src13=m[mOffset + 7];  final float src2=m[mOffset + 8];  final float src6=m[mOffset + 9];  final float src10=m[mOffset + 10];  final float src14=m[mOffset + 11];  final float src3=m[mOffset + 12];  final float src7=m[mOffset + 13];  final float src11=m[mOffset + 14];  final float src15=m[mOffset + 15];  final float atmp0=src10 * src15;  final float atmp1=src11 * src14;  final float atmp2=src9 * src15;  final float atmp3=src11 * src13;  final float atmp4=src9 * src14;  final float atmp5=src10 * src13;  final float atmp6=src8 * src15;  final float atmp7=src11 * src12;  final float atmp8=src8 * src14;  final float atmp9=src10 * src12;  final float atmp10=src8 * src13;  final float atmp11=src9 * src12;  final float dst0=(atmp0 * src5 + atmp3 * src6 + atmp4 * src7) - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);  final float dst1=(atmp1 * src4 + atmp6 * src6 + atmp9 * src7) - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);  final float dst2=(atmp2 * src4 + atmp7 * src5 + atmp10 * src7) - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);  final float dst3=(atmp5 * src4 + atmp8 * src5 + atmp11 * src6) - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);  final float dst4=(atmp1 * src1 + atmp2 * src2 + atmp5 * src3) - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);  final float dst5=(atmp0 * src0 + atmp7 * src2 + atmp8 * src3) - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);  final float dst6=(atmp3 * src0 + atmp6 * src1 + atmp11 * src3) - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);  final float dst7=(atmp4 * src0 + atmp9 * src1 + atmp10 * src2) - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);  final float btmp0=src2 * src7;  final float btmp1=src3 * src6;  final float btmp2=src1 * src7;  final float btmp3=src3 * src5;  final float btmp4=src1 * src6;  final float btmp5=src2 * src5;  final float btmp6=src0 * src7;  final float btmp7=src3 * src4;  final float btmp8=src0 * src6;  final float btmp9=src2 * src4;  final float btmp10=src0 * src5;  final float btmp11=src1 * src4;  final float dst8=(btmp0 * src13 + btmp3 * src14 + btmp4 * src15) - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);  final float dst9=(btmp1 * src12 + btmp6 * src14 + btmp9 * src15) - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);  final float dst10=(btmp2 * src12 + btmp7 * src13 + btmp10 * src15) - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);  final float dst11=(btmp5 * src12 + btmp8 * src13 + btmp11 * src14) - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);  final float dst12=(btmp2 * src10 + btmp5 * src11 + btmp1 * src9) - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);  final float dst13=(btmp8 * src11 + btmp0 * src8 + btmp7 * src10) - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);  final float dst14=(btmp6 * src9 + btmp11 * src11 + btmp3 * src8) - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);  final float dst15=(btmp10 * src10 + btmp4 * src8 + btmp9 * src9) - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);  final float det=src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;  if (det == 0.0f) {    return false;  }  final float invdet=1.0f / det;  mInv[mInvOffset]=dst0 * invdet;  mInv[1 + mInvOffset]=dst1 * invdet;  mInv[2 + mInvOffset]=dst2 * invdet;  mInv[3 + mInvOffset]=dst3 * invdet;  mInv[4 + mInvOffset]=dst4 * invdet;  mInv[5 + mInvOffset]=dst5 * invdet;  mInv[6 + mInvOffset]=dst6 * invdet;  mInv[7 + mInvOffset]=dst7 * invdet;  mInv[8 + mInvOffset]=dst8 * invdet;  mInv[9 + mInvOffset]=dst9 * invdet;  mInv[10 + mInvOffset]=dst10 * invdet;  mInv[11 + mInvOffset]=dst11 * invdet;  mInv[12 + mInvOffset]=dst12 * invdet;  mInv[13 + mInvOffset]=dst13 * invdet;  mInv[14 + mInvOffset]=dst14 * invdet;  mInv[15 + mInvOffset]=dst15 * invdet;  return true;}  }
class C{  public BandPassBuilder passFrequencyBegin(int passFrequency){  mPassFrequencyBegin=passFrequency;  return this;}  }
class C{  private boolean hasTag(final ITreeNode<CTag> tag){  return (tag == getRootTag()) || BreadthFirstSorter.getSortedList(getRootTag()).contains(tag);}  }
class C{  private static QueryTask.QuerySpecification buildQuerySpec(final Class childClass,final QueryTask.Query... additionalClauses){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(childClass));  QueryTask.QuerySpecification spec=new QueryTask.QuerySpecification();  spec.query.addBooleanClause(kindClause);  for (  QueryTask.Query clause : additionalClauses) {    spec.query.addBooleanClause(clause);  }  return spec;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster numInflowingStreamCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,noData);    numInflowingStreamCells.isTemporaryFile=true;    byte numNeighbouringStreamCells=0;    double currentValue=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            output.setValue(row,col,1);            numInflowingStreamCells.setValue(row,col,-1);          } else {            output.setValue(row,col,0);            numInflowingStreamCells.setValue(row,col,numNeighbouringStreamCells);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (numInflowingStreamCells.getValue(row,col) == -1) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              if (c > 7) {                showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                return;              }              x+=dX[c];              y+=dY[c];              if (streams.getValue(y,x) <= 0) {                flag=false;              } else {                currentValue=numInflowingStreamCells.getValue(y,x) - 1;                numInflowingStreamCells.setValue(y,x,currentValue);                if (currentValue > 0) {                  flag=false;                }                currentValue=output.getValue(y,x);                output.setValue(y,x,z + currentValue);              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    numInflowingStreamCells.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String formatMessage(LogRecord record){  return super.formatMessage(record);}  }
class C{  protected WMouseDragGestureRecognizer(DragSource ds){  this(ds,null);}  }
class C{  public static AcquisitionFragment newInstance(){  AcquisitionFragment fragment=new AcquisitionFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.013 -0400",hash_original_method="A6FF6BAA687449B5D708D91F3B130233",hash_generated_method="2BBC16748E8C5AA7B537D446C6B17B61") public final void error(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,null);  }}  }
class C{  public void cleanUp(){  if (globalHotkeys != null) {    globalHotkeys.cleanUp();  }}  }
class C{  public static int uninstallSilent(Context context,String packageName,boolean isKeepData){  if (packageName == null || packageName.length() == 0) {    return DELETE_FAILED_INVALID_PACKAGE;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm uninstall").append(isKeepData ? " -k " : " ").append(packageName.replace(" ","\\ "));  CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return DELETE_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("uninstallSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return DELETE_FAILED_INTERNAL_ERROR;  }  if (commandResult.errorMsg.contains("Permission denied")) {    return DELETE_FAILED_PERMISSION_DENIED;  }  return DELETE_FAILED_INTERNAL_ERROR;}  }
class C{  private void glueCore(LimeWireCore limeWireCore){  limeWireCore.getLimeCoreGlue().install();}  }
class C{  private String formatType(Object typeRep){  StringTokenizer tokenizer=new StringTokenizer(typeRep.toString(),"()<>[], ",true);  StringBuilder sb=new StringBuilder();  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if (token.length() == 1 || token.lastIndexOf('.') == -1)     sb.append(token); else {      int index=token.lastIndexOf('.');      sb.append(token.substring(index + 1));    }  }  return sb.toString();}  }
class C{  protected void addStepPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Call_step_feature"),getString("_UI_PropertyDescriptor_description","_UI_Call_step_feature","_UI_Call_type"),SexecPackage.Literals.CALL__STEP,true,false,true,null,null,null));}  }
class C{  protected <T>Reference<T> toReference(int type,T referent,int hash){switch (type) {case SOFT:    return new SoftRef<T>(hash,referent,parent.queue);case WEAK:  return new WeakRef<T>(hash,referent,parent.queue);default :throw new Error("Attempt to create hard reference in ReferenceMap!");}}  }
class C{  public static <T>Stack<T> stack(){  return new Stack<T>();}  }
class C{  public Builder(){}  }
class C{  public Builder singleShot(long shotId){  showcaseView.setSingleShot(shotId);  return this;}  }
class C{  public synchronized void removeElementAt(int index){  modCount++;  if (index >= elementCount) {    throw new ArrayIndexOutOfBoundsException(index + " >= " + elementCount);  } else   if (index < 0) {    throw new ArrayIndexOutOfBoundsException(index);  }  int j=elementCount - index - 1;  if (j > 0) {    System.arraycopy(elementData,index + 1,elementData,index,j);  }  elementCount--;  elementData[elementCount]=null;}  }
class C{  public void paint(Graphics g){  if (isVisible()) {    try {      RTextArea textArea=getTextArea();      g.setColor(textArea.getCaretColor());      TextUI mapper=textArea.getUI();      Rectangle r=mapper.modelToView(textArea,getDot());      validateWidth(r);      r.height-=2;switch (style) {case BLOCK_STYLE:        g.setXORMode(Color.WHITE);      g.fillRect(r.x,r.y,r.width,r.height);    break;case BLOCK_BORDER_STYLE:  g.drawRect(r.x,r.y,r.width - 1,r.height);break;case UNDERLINE_STYLE:g.setXORMode(Color.WHITE);int y=r.y + r.height;g.drawLine(r.x,y,r.x + r.width - 1,y);break;default :case VERTICAL_LINE_STYLE:g.drawLine(r.x,r.y,r.x,r.y + r.height);break;case THICK_VERTICAL_LINE_STYLE:g.drawLine(r.x,r.y,r.x,r.y + r.height);r.x++;g.drawLine(r.x,r.y,r.x,r.y + r.height);break;}} catch (BadLocationException ble) {ble.printStackTrace();}}}  }
class C{  public boolean sideVisible(ForgeDirection side,IBlockAccess world){  return world.isAirBlock(xCoord + side.offsetX,yCoord + side.offsetY,zCoord + side.offsetZ);}  }
class C{  @SuppressLint("InlinedApi") private void testADTS() throws IllegalStateException, IOException {  setAudioEncoder(MediaRecorder.AudioEncoder.AAC);  try {    Field name=MediaRecorder.OutputFormat.class.getField("AAC_ADTS");    setOutputFormat(name.getInt(null));  } catch (  Exception ignore) {    setOutputFormat(6);  }  String key=PREF_PREFIX + "aac-" + mQuality.samplingRate;  if (mSettings != null) {    if (mSettings.contains(key)) {      String[] s=mSettings.getString(key,"").split(",");      mQuality.samplingRate=Integer.valueOf(s[0]);      mConfig=Integer.valueOf(s[1]);      mChannel=Integer.valueOf(s[2]);      return;    }  }  final String TESTFILE=Environment.getExternalStorageDirectory().getPath() + "/spydroid-test.adts";  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    throw new IllegalStateException("No external storage or external storage not ready !");  }  byte[] buffer=new byte[9];  mMediaRecorder=new MediaRecorder();  mMediaRecorder.setAudioSource(mAudioSource);  mMediaRecorder.setOutputFormat(mOutputFormat);  mMediaRecorder.setAudioEncoder(mAudioEncoder);  mMediaRecorder.setAudioChannels(1);  mMediaRecorder.setAudioSamplingRate(mQuality.samplingRate);  mMediaRecorder.setAudioEncodingBitRate(mQuality.bitRate);  mMediaRecorder.setOutputFile(TESTFILE);  mMediaRecorder.setMaxDuration(1000);  mMediaRecorder.prepare();  mMediaRecorder.start();  try {    Thread.sleep(2000);  } catch (  InterruptedException e) {  }  mMediaRecorder.stop();  mMediaRecorder.release();  mMediaRecorder=null;  File file=new File(TESTFILE);  RandomAccessFile raf=new RandomAccessFile(file,"r");  while (true) {    if ((raf.readByte() & 0xFF) == 0xFF) {      buffer[0]=raf.readByte();      if ((buffer[0] & 0xF0) == 0xF0)       break;    }  }  raf.read(buffer,1,5);  mSamplingRateIndex=(buffer[1] & 0x3C) >> 2;  mProfile=((buffer[1] & 0xC0) >> 6) + 1;  mChannel=(buffer[1] & 0x01) << 2 | (buffer[2] & 0xC0) >> 6;  mQuality.samplingRate=AUDIO_SAMPLING_RATES[mSamplingRateIndex];  mConfig=mProfile << 11 | mSamplingRateIndex << 7 | mChannel << 3;  Log.i(TAG,"MPEG VERSION: " + ((buffer[0] & 0x08) >> 3));  Log.i(TAG,"PROTECTION: " + (buffer[0] & 0x01));  Log.i(TAG,"PROFILE: " + AUDIO_OBJECT_TYPES[mProfile]);  Log.i(TAG,"SAMPLING FREQUENCY: " + mQuality.samplingRate);  Log.i(TAG,"CHANNEL: " + mChannel);  raf.close();  if (mSettings != null) {    Editor editor=mSettings.edit();    editor.putString(key,mQuality.samplingRate + "," + mConfig+ ","+ mChannel);    editor.commit();  }  if (!file.delete())   Log.e(TAG,"Temp file could not be erased");}  }
class C{  public ServiceFaultyMultipart(){  requestFileName="getstate.query";  responseFile="faulty-multipart.query";  responseContentType="multipart/related; " + "boundary=jetty771207119h3h10dty; charset=utf-8";}  }
class C{  protected boolean isTrueOrUnknown(ConditionExpression expr){  if (expr instanceof ConstantExpression) {    Boolean value=getBooleanObject((ConstantExpression)expr);    return ((value == null) || (value == Boolean.TRUE));  } else   if (expr instanceof LogicalFunctionCondition) {    LogicalFunctionCondition lfun=(LogicalFunctionCondition)expr;    String fname=lfun.getFunction();    if ("and".equals(fname)) {      return (isTrueOrUnknown(lfun.getLeft()) && isTrueOrUnknown(lfun.getRight()));    } else     if ("or".equals(fname)) {      return (isTrueOrUnknown(lfun.getLeft()) || isTrueOrUnknown(lfun.getRight()));    } else     if ("not".equals(fname)) {      return isFalseOrUnknown(lfun.getOperand());    }  } else   if (expr instanceof ComparisonCondition) {    return isIdempotentEquality((ComparisonCondition)expr);  }  return false;}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public WordIterator(){  this(Locale.getDefault());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.TIME_EVENT__PERIODIC:    setPeriodic((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void main(String[] args){  try {    File rootFolder=GeneratorUtils.getRootFolder(args);    System.out.println(" ------------------------------------------------------------------------ ");    System.out.println(String.format("Searching for GinModules in %s",rootFolder.getAbsolutePath()));    System.out.println(" ------------------------------------------------------------------------ ");    findGinModules(rootFolder);    generateExtensionManager(rootFolder);  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(1);  }}  }
class C{  public void putBool(String key,boolean value){  if (key != null) {    mPreferences.edit().putBoolean(key,value).apply();  }}  }
class C{  public double samplingthreshold(){  return samplingthreshold;}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index){  this.changeBufferData(bufferInfo,newData,index,false);}  }
class C{  public static boolean canConnect(TileEntity tileEntity,ForgeDirection side){  if (tileEntity instanceof ITubeConnection && (!(tileEntity instanceof ITransmitterTile) || TransmissionType.checkTransmissionType(((ITransmitterTile)tileEntity).getTransmitter(),TransmissionType.GAS))) {    if (((ITubeConnection)tileEntity).canTubeConnect(side.getOpposite())) {      return true;    }  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.FUNCTION__ACTION:    return basicSetAction(null,msgs);case GamlPackage.FUNCTION__PARAMETERS:  return basicSetParameters(null,msgs);case GamlPackage.FUNCTION__ARGS:return basicSetArgs(null,msgs);case GamlPackage.FUNCTION__TYPE:return basicSetType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static IMethod findMethod(IMethodBinding method,IType type) throws JavaModelException {  method=method.getMethodDeclaration();  IMethod[] candidates=type.getMethods();  for (int i=0; i < candidates.length; i++) {    IMethod candidate=candidates[i];    if (candidate.getElementName().equals(method.getName()) && sameParameters(method,candidate)) {      return candidate;    }  }  return null;}  }
class C{  public int compareTo(Object o){  Envelope env=(Envelope)o;  if (isNull()) {    if (env.isNull())     return 0;    return -1;  } else {    if (env.isNull())     return 1;  }  if (minx < env.minx)   return -1;  if (minx > env.minx)   return 1;  if (miny < env.miny)   return -1;  if (miny > env.miny)   return 1;  if (maxx < env.maxx)   return -1;  if (maxx > env.maxx)   return 1;  if (maxy < env.maxy)   return -1;  if (maxy > env.maxy)   return 1;  return 0;}  }
class C{  public static String toShortString(Collection<? extends ClusterNode> ns){  SB sb=new SB("Grid nodes [cnt=" + ns.size());  for (  ClusterNode n : ns)   sb.a(", ").a(toShortString(n));  return sb.a(']').toString();}  }
class C{  public void refreshWidgetView(){  SharedPreferences sharedPreferences;  String locationName;  sharedPreferences=getSharedPreferences(getString(R.string.sp_widget_day_setting),Context.MODE_PRIVATE);  locationName=sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local));  if (weatherFragment.location.location.equals(locationName)) {    WidgetDayService.refreshWidgetView(this,weatherFragment.location.weather);  }  sharedPreferences=getSharedPreferences(getString(R.string.sp_widget_week_setting),Context.MODE_PRIVATE);  locationName=sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local));  if (weatherFragment.location.location.equals(locationName)) {    WidgetWeekService.refreshWidgetView(this,weatherFragment.location.weather);  }  sharedPreferences=getSharedPreferences(getString(R.string.sp_widget_day_week_setting),Context.MODE_PRIVATE);  locationName=sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local));  if (weatherFragment.location.location.equals(locationName)) {    WidgetDayWeekService.refreshWidgetView(this,weatherFragment.location.weather);  }  sharedPreferences=getSharedPreferences(getString(R.string.sp_widget_clock_day_setting),Context.MODE_PRIVATE);  locationName=sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local));  if (weatherFragment.location.location.equals(locationName)) {    WidgetClockDayService.refreshWidgetView(this,weatherFragment.location.weather);  }  sharedPreferences=getSharedPreferences(getString(R.string.sp_widget_clock_day_center_setting),Context.MODE_PRIVATE);  locationName=sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local));  if (weatherFragment.location.location.equals(locationName)) {    WidgetClockDayCenterService.refreshWidgetView(this,weatherFragment.location.weather);  }  sharedPreferences=getSharedPreferences(getString(R.string.sp_widget_clock_day_week_setting),Context.MODE_PRIVATE);  locationName=sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local));  if (weatherFragment.location.location.equals(locationName)) {    WidgetClockDayWeekService.refreshWidgetView(this,weatherFragment.location.weather);  }}  }
class C{  public void registerFactory(String name,String groupName,Factory factory){  getProxyBuilder().factories.put(name,factory);  getRegistrationGroup(groupName).add(name);  factory.onFactoryRegistration(this,name,groupName);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public void addInput(File file) throws IOException {  addInput(new FileLexerSource(file));}  }
class C{  private void startStoppedChanged(){  clock.setStartStopped(startStoppedCheckBox.isSelected());  changed=true;}  }
class C{  @Override public byte[] listDirectory(String path) throws RemoteException {  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  final File directory=new File(path);  final File[] files=directory.listFiles();  final Parcel out=Parcel.obtain();  if (files == null) {    out.writeInt(0);  } else {    out.writeInt(files.length);    for (    final File file : files) {      out.writeString(file.getAbsolutePath());      out.writeString(file.getName());      out.writeInt(file.isDirectory() ? 1 : 0);      if (file.isFile()) {        out.writeInt(1);        out.writeLong(file.length());      } else {        out.writeInt(0);      }    }  }  return out.marshall();}  }
class C{  @Override public boolean first() throws SQLException {  try {    debugCodeCall("first");    checkClosed();    if (result.getRowId() < 0) {      return nextRow();    }    resetResult();    return nextRow();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public TLongObjectHashMap(){  _hashingStrategy=this;}  }
class C{  @Override public Iterable<DiscoveryNode> discoverNodes(){  EndpointsList list=client.endpoints().inNamespace(namespace).withLabel(label,labelValue).list();  if (list == null || list.getItems() == null || list.getItems().isEmpty()) {    getLogger().info("No endpoints for service " + " in namespace " + namespace + " with label: "+ label+ " or `vertx-cluster=true`, look for endpoints in namespace without specific label");    return Optional.ofNullable(client.endpoints().inNamespace(namespace).list()).orElse(new EndpointsList("",Collections.emptyList(),"",new ListMeta())).getItems().stream().map(null).flatMap(null).flatMap(null).map(null).collect(Collectors.toList());  }  return list.getItems().stream().map(null).flatMap(null).flatMap(null).map(null).collect(Collectors.toList());}  }
class C{  public int hash(byte[] bytes){  hash.reset();  hash.update(bytes);  return hash.getIntValue() & 0x7fffffff;}  }
class C{  public List<GroupbyKeyValue> groupbyKeyValues(){  List<GroupbyKeyValue> results=new ArrayList<GroupbyKeyValue>();  for (  Map.Entry<GroupbyKey,List<Function>> entry : this.group2FunctionMap.entrySet()) {    GroupbyValue value=new GroupbyValue();    for (    Function f : entry.getValue()) {      value.add(new DoubleWritable(f.result()));      value.addMeta(f.count());    }    results.add(new GroupbyKeyValue(entry.getKey(),value));  }  return results;}  }
class C{  public ParallelAnimator(){  interpolator=null;  duration=0;  combinableList=new ArrayList<Combinable>();  listener=null;}  }
class C{  public void tagShowFrame() throws IOException {  if (tags != null) {    tags.tagShowFrame();  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getVariables() == null) {    throw new NullPointerException();  }  if (knowledge == null) {    throw new NullPointerException();  }  if (sampleSize < -1) {    throw new IllegalStateException();  }  if (selectedVariables == null) {    selectedVariables=new HashSet<>();  }}  }
class C{  public void afterEmitSchema(JavaFileWriter writer) throws IOException {}  }
class C{  public boolean isUseAgeTo(){  return ageToSec != null;}  }
class C{  public void mark() throws IOException {  input.mark(HeaderCard.FITS_HEADER_CARD_SIZE);  markedPhysicalCardsRead=physicalCardsRead;}  }
class C{  public FormatsException(){}  }
class C{  public void futureFloatResult(long futPtr,float res){  enter();  try {    PlatformCallbackUtils.futureFloatResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  public static boolean isDynamicWebProject(IProject project) throws CoreException {  return FacetedProjectFramework.hasProjectFacet(project,"jst.web",null);}  }
class C{  public DataUri(DataUri original){  this(original.contentType,(original.data == null) ? null : original.data.clone(),original.text);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public ArrayAdapter(){  this(null);}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  protected boolean hasInfoArea(){  return infoText != null;}  }
class C{  public boolean isSold(){  Object oo=get_Value(COLUMNNAME_IsSold);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void add(Clockable clockable,int clockableCallbackHandlerChip,boolean enabled,boolean precise){  boolean found=false;  for (  ClockableEntry entry : entries) {    if (entry.clockable == clockable) {      entry.enabled=true;      found=true;      break;    }  }  if (!found) {    entries.add(new ClockableEntry(clockable,clockableCallbackHandlerChip,enabled,precise));  }  requestResheduling();}  }
class C{  public FocusEvent(Component source,int id,boolean temporary,Component opposite){  super(source,id);  this.temporary=temporary;  this.opposite=opposite;}  }
class C{  public static double toDoublePow2(long m,int n){  if (m == 0)   return 0.0;  if (m == Long.MIN_VALUE)   return toDoublePow2(Long.MIN_VALUE >> 1,n + 1);  if (m < 0)   return -toDoublePow2(-m,n);  int bitLength=MathLib.bitLength(m);  int shift=bitLength - 53;  long exp=1023L + 52 + n+ shift;  if (exp >= 0x7FF)   return Double.POSITIVE_INFINITY;  if (exp <= 0) {    if (exp <= -54)     return 0.0;    return toDoublePow2(m,n + 54) / 18014398509481984L;  }  long bits=(shift > 0) ? (m >> shift) + ((m >> (shift - 1)) & 1) : m << -shift;  if (((bits >> 52) != 1) && (++exp >= 0x7FF))   return Double.POSITIVE_INFINITY;  bits&=0x000fffffffffffffL;  bits|=exp << 52;  return Double.longBitsToDouble(bits);}  }
class C{  public void pauseAll(){synchronized (lock) {    List<String> names=getTriggerGroupNames();    for (    String name : names) {      pauseTriggers(GroupMatcher.triggerGroupEquals(name));    }  }}  }
class C{  public TStructMethod createTStructMethod(){  TStructMethodImpl tStructMethod=new TStructMethodImpl();  return tStructMethod;}  }
class C{  public static double cosQuick(double angle){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.cos(angle) : Math.cos(angle);  }  return cosTab[((int)(Math.abs(angle) * SIN_COS_INDEXER + 0.5)) & (SIN_COS_TABS_SIZE - 2)];}  }
class C{  public double totalCount(){  if (!dirty) {    return cacheTotal;  }  double total=0.0;  for (  final Map.Entry<E,Double> entry : entries.entrySet()) {    total+=entry.getValue();  }  cacheTotal=total;  dirty=false;  return total;}  }
class C{  public int readInt() throws IOException, EOFException {  this.readFully(this.temp,0,4);  int res=temp[0];  res<<=8;  res|=(temp[1] & 0xff);  res<<=8;  res|=(temp[2] & 0xff);  res<<=8;  res|=(temp[3] & 0xff);  return res;}  }
class C{  protected void encodeRecursive(FacesContext context,UIComponent component) throws IOException {  if (!component.isRendered()) {    return;  }  component.encodeBegin(context);  if (component.getRendersChildren()) {    component.encodeChildren(context);  } else {    Iterator<UIComponent> kids=getChildren(component);    while (kids.hasNext()) {      UIComponent kid=kids.next();      encodeRecursive(context,kid);    }  }  component.encodeEnd(context);}  }
class C{  public static int indexOfAny(String str,String[] searchStrs){  if ((str == null) || (searchStrs == null)) {    return -1;  }  int sz=searchStrs.length;  int ret=Integer.MAX_VALUE;  int tmp=0;  for (int i=0; i < sz; i++) {    tmp=str.indexOf(searchStrs[i]);    if (tmp == -1) {      continue;    }    if (tmp < ret) {      ret=tmp;    }  }  return (ret == Integer.MAX_VALUE) ? -1 : ret;}  }
class C{  protected void loadChildren(ViewFactory f){  Element e=getElement();  int n=e.getElementCount();  if (n > 0) {    View[] added=new View[n];    for (int i=0; i < n; i++)     added[i]=new WrappedLine(e.getElement(i));    replace(0,0,added);  }}  }
class C{  protected void initScenes(){  CGSize s=CCDirector.sharedDirector().winSize();  inScene.setPosition(0,-s.height);}  }
class C{  private void scanField(InputStream is) throws IOException {  is.skip(6);  int attributesCount=readShort(is);  for (int i=0; i < attributesCount; i++) {    scanAttributeForAnnotation(is);  }}  }
class C{  public PrincipalId updatePersonUserDetail(String tenantName,String userName,PersonDetail detail) throws Exception {  return getService().updatePersonUserDetail(tenantName,userName,detail,this.getServiceContext());}  }
class C{  public synchronized boolean internalHasRelationship(Vertex type,Vertex target){  Map<Relationship,Relationship> relationships=getRelationships().get(type);  if (relationships == null) {    return false;  }  boolean b=relationships.containsKey(new BasicRelationship(this,type,target));  if (b) {    return b;  }  return b;}  }
class C{  public FileDataSource(){}  }
class C{  private static String marshal(String args){  if (args != null) {    StringBuffer target=new StringBuffer();    StringBuffer source=new StringBuffer(args);    String keyReg="[Pp][Ee][Rr][Mm][Ii][Ss][Ss][Ii][Oo][Nn]=";    String keyStr="permission=";    String reg=keyReg + "[a-zA-Z_$][a-zA-Z0-9_$]*([.][a-zA-Z_$][a-zA-Z0-9_$]*)*";    Pattern pattern=Pattern.compile(reg);    Matcher matcher=pattern.matcher(source);    StringBuffer left=new StringBuffer();    while (matcher.find()) {      String matched=matcher.group();      target.append(matched.replaceFirst(keyReg,keyStr));      target.append("  ");      matcher.appendReplacement(left,"");    }    matcher.appendTail(left);    source=left;    keyReg="[Cc][Oo][Dd][Ee][Bb][Aa][Ss][Ee]=";    keyStr="codebase=";    reg=keyReg + "[^, ;]*";    pattern=Pattern.compile(reg);    matcher=pattern.matcher(source);    left=new StringBuffer();    while (matcher.find()) {      String matched=matcher.group();      target.append(matched.replaceFirst(keyReg,keyStr));      target.append("  ");      matcher.appendReplacement(left,"");    }    matcher.appendTail(left);    source=left;    target.append(source.toString().toLowerCase(Locale.ENGLISH));    return target.toString();  }  return null;}  }
