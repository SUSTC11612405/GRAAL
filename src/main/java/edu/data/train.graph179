class C{  @ApiOperation(value="Send a heartbeat for the single engine") @RequestMapping(value="/engine/heartbeat",method=RequestMethod.PUT) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void putHeartbeat(@ApiParam(value="This the password for the nodeId being passed in.  The password is stored in the node_security table.") @RequestParam(value=WebConstants.SECURITY_TOKEN) String securityToken,@RequestBody Heartbeat heartbeat){  if (securityVerified(heartbeat.getNodeId(),getSymmetricEngine(),securityToken)) {    putHeartbeat(getSymmetricEngine().getEngineName(),securityToken,heartbeat);  } else {    throw new NotAllowedException();  }}  }
class C{  public static X509CertPath fromBytes(final byte[] encodedPath){  try {    CertificateFactory factory=CertificateFactory.getInstance(TYPE_X509);    CertPath certPath=factory.generateCertPath(new ByteArrayInputStream(encodedPath),"PkiPath");    return new X509CertPath(certPath);  } catch (  CertificateException e) {    throw new IllegalArgumentException("byte array does not contain X.509 certificate path");  }}  }
class C{  public boolean isSubResourceScanned(){  return isSubResourceScanned;}  }
class C{  private String addAliasToIdentifier(String where,String alias){  String sqlkey="AND,OR,FROM,WHERE,JOIN,BY,GROUP,IN,INTO,SELECT,NOT,SET,UPDATE,DELETE,HAVING,IS,NULL,EXISTS,BETWEEN,LIKE,INNER,OUTER";  StringTokenizer st=new StringTokenizer(where);  String result="";  String token="";  int o=-1;  while (true) {    token=st.nextToken();    String test=token.startsWith("(") ? token.substring(1) : token;    if (sqlkey.indexOf(test) == -1) {      token=token.trim();      if (o != -1)       result=result + " " + token; else {        result=result + " ";        StringBuffer t=new StringBuffer();        for (int i=0; i < token.length(); i++) {          char c=token.charAt(i);          if (isOperator(c)) {            if (t.length() > 0) {              if (c == '(')               result=result + t.toString(); else               if (isIdentifier(t.toString()) && t.toString().indexOf('.') == -1)               result=result + alias + "."+ t.toString(); else               result=result + t.toString();              t=new StringBuffer();            }            result=result + c;          } else {            t.append(c);          }        }        if (t.length() > 0) {          if ("SELECT".equalsIgnoreCase(t.toString().toUpperCase())) {            o=0;            result=result + t.toString();          } else           if (isIdentifier(t.toString()) && t.toString().indexOf('.') == -1)           result=result + alias + "."+ t.toString(); else           result=result + t.toString();        }      }      if (o != -1) {        for (int i=0; i < token.length(); i++) {          char c=token.charAt(i);          if (c == '(')           o++;          if (c == ')')           o--;        }      }    } else {      result=result + " " + token;      if ("SELECT".equalsIgnoreCase(test)) {        o=0;      }    }    if (!st.hasMoreElements())     break;  }  return result;}  }
class C{  public StringBuilder stem(CharSequence word){  CharSequence cmd=stemmer.getLastOnPath(word);  if (cmd == null)   return null;  buffer.setLength(0);  buffer.append(word);  Diff.apply(buffer,cmd);  if (buffer.length() > 0)   return buffer; else   return null;}  }
class C{  public void dumpSizes() throws SQLException, BlockStoreException {  maybeConnect();  Statement s=conn.get().createStatement();  long size=0;  long totalSize=0;  int count=0;  ResultSet rs=s.executeQuery("SELECT name, value FROM settings");  while (rs.next()) {    size+=rs.getString(1).length();    size+=rs.getBytes(2).length;    count++;  }  rs.close();  System.out.printf("Settings size: %d, count: %d, average size: %f%n",size,count,(double)size / count);  totalSize+=size;  size=0;  count=0;  rs=s.executeQuery("SELECT chainWork, header FROM headers");  while (rs.next()) {    size+=28;    size+=rs.getBytes(1).length;    size+=4;    size+=rs.getBytes(2).length;    count++;  }  rs.close();  System.out.printf("Headers size: %d, count: %d, average size: %f%n",size,count,(double)size / count);  totalSize+=size;  size=0;  count=0;  rs=s.executeQuery("SELECT txOutChanges, transactions FROM undoableBlocks");  while (rs.next()) {    size+=28;    size+=4;    byte[] txOutChanges=rs.getBytes(1);    byte[] transactions=rs.getBytes(2);    if (txOutChanges == null)     size+=transactions.length; else     size+=txOutChanges.length;    count++;  }  rs.close();  System.out.printf("Undoable Blocks size: %d, count: %d, average size: %f%n",size,count,(double)size / count);  totalSize+=size;  size=0;  count=0;  long scriptSize=0;  rs=s.executeQuery("SELECT value, scriptBytes FROM openOutputs");  while (rs.next()) {    size+=32;    size+=4;    size+=4;    size+=rs.getBytes(1).length;    size+=rs.getBytes(2).length;    scriptSize+=rs.getBytes(2).length;    count++;  }  rs.close();  System.out.printf("Open Outputs size: %d, count: %d, average size: %f, average script size: %f (%d in id indexes)%n",size,count,(double)size / count,(double)scriptSize / count,count * 8);  totalSize+=size;  System.out.println("Total Size: " + totalSize);  s.close();}  }
class C{  public static void findSetterMethods(Class<?> clazz,MappedField... fields){  try {    verifySetterMethods(clazz,fields);  } catch (  Exception e) {  }}  }
class C{  public void refresh(Callback<TimelineResult<T>> cb){  delegate.refresh(cb);}  }
class C{  public PeerAddress(InetAddress addr){  this(addr,MainNetParams.get().getPort());}  }
class C{  public static IMethod findSimilarMethod(IMethod method,IMethod[] methods) throws JavaModelException {  boolean isConstructor=method.isConstructor();  for (int i=0; i < methods.length; i++) {    IMethod otherMethod=methods[i];    if (otherMethod.isConstructor() == isConstructor && method.isSimilar(otherMethod))     return otherMethod;  }  return null;}  }
class C{  public EcuDataPv(){  super();  this.setKeyAttribute(FIELDS[0]);}  }
class C{  public JSONArray put(Collection value){  this.put(new JSONArray(value));  return this;}  }
class C{  @Override public void run(){  amIActive=true;  int progress, oldProgress, col, row;  int n, j;  double x, y, z, z1, z2;  double length;  double distMultiplier=1.0;  Object[] rowData;  int count=0;  double[][] points;  int[] partData;  int startingPointInPart, endingPointInPart;  int i, numParts, numPoints, recNum, part, p;  int outletNum=1;  int featureNum=0;  List<KdTree.Entry<Integer>> results;  List<KdTree.Entry<Integer>> resultsLakes;  double[] entry;  KdTree<Integer> pointsTree;  whitebox.geospatialfiles.shapefile.PolyLine wbGeometry;  if (args.length < 5) {    showFeedback("Plugin parameters have not been set.");    return;  }  String streamsFile=args[0];  String demFile=args[1];  String lakesFile=args[2];  String outputFile=args[3];  double snapDistance=Double.parseDouble(args[4]);  try {    WhiteboxRaster dem=new WhiteboxRaster(demFile,"r");    dem.setForceAllDataInMemory(true);    double nodata=dem.getNoDataValue();    int rows=dem.getNumberRows();    int cols=dem.getNumberColumns();    if (dem.getXYUnits().toLowerCase().contains("deg")) {      double midLat=(dem.getNorth() - dem.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        midLat=Math.toRadians(midLat);        double a=6378137.0;        double b=6356752.314;        double e2=(a * a - b * b) / (a * a);        double num=(Math.PI * a * Math.cos(midLat));        double denum=(180 * Math.sqrt((1 - e2 * Math.sin(midLat) * Math.sin(midLat))));        double longDegDist=(num / denum);        double latDegDist=111132.954 - 559.822 * Math.cos(2.0 * midLat) + 1.175 * Math.cos(4.0 * midLat);        distMultiplier=(longDegDist + latDegDist) / 2.0;        snapDistance=snapDistance / distMultiplier;      }    }    snapDistance=snapDistance * snapDistance;    ShapeFile input=new ShapeFile(streamsFile);    ShapeType shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("The input shapefile should be of a POLYLINE ShapeType.");      return;    }    int numFeatures=input.getNumberOfRecords();    ShapeFile lakes;    boolean lakesUsed=false;    int numLakes=0;    KdTree<Integer> lakesTree=new KdTree.SqrEuclid<>(2,null);    int[] lakesNodeIDs=new int[0];    if (!lakesFile.toLowerCase().contains("not specified")) {      lakes=new ShapeFile(lakesFile);      shapeType=lakes.getShapeType();      if (shapeType.getBaseType() != ShapeType.POLYGON) {        showFeedback("The input lakes shapefile should be of a Polygon ShapeType.");        return;      }      lakesUsed=true;      numLakes=lakes.getNumberOfRecords();      lakesNodeIDs=new int[numLakes];      for (i=0; i < numLakes; i++) {        lakesNodeIDs[i]=-1;      }      lakesTree=lakes.getKdTree();    }    DBFField[] fields=new DBFField[11];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(6);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("OUTLET");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("TUCL");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    fields[3]=new DBFField();    fields[3].setName("MAXUPSDIST");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(10);    fields[3].setDecimalCount(3);    fields[4]=new DBFField();    fields[4].setName("DS_NODES");    fields[4].setDataType(DBFField.DBFDataType.NUMERIC);    fields[4].setFieldLength(6);    fields[4].setDecimalCount(0);    fields[5]=new DBFField();    fields[5].setName("DIST2MOUTH");    fields[5].setDataType(DBFField.DBFDataType.NUMERIC);    fields[5].setFieldLength(10);    fields[5].setDecimalCount(3);    fields[6]=new DBFField();    fields[6].setName("STRAHLER");    fields[6].setDataType(DBFField.DBFDataType.NUMERIC);    fields[6].setFieldLength(6);    fields[6].setDecimalCount(0);    fields[7]=new DBFField();    fields[7].setName("SHREVE");    fields[7].setDataType(DBFField.DBFDataType.NUMERIC);    fields[7].setFieldLength(10);    fields[7].setDecimalCount(3);    fields[8]=new DBFField();    fields[8].setName("MAINSTEM");    fields[8].setDataType(DBFField.DBFDataType.NUMERIC);    fields[8].setFieldLength(1);    fields[8].setDecimalCount(0);    fields[9]=new DBFField();    fields[9].setName("TRIB_ID");    fields[9].setDataType(DBFField.DBFDataType.NUMERIC);    fields[9].setFieldLength(6);    fields[9].setDecimalCount(0);    fields[10]=new DBFField();    fields[10].setName("DISCONT");    fields[10].setDataType(DBFField.DBFDataType.NUMERIC);    fields[10].setFieldLength(4);    fields[10].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE,fields);    fields=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(6);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("TYPE");    fields[1].setDataType(DBFField.DBFDataType.STRING);    fields[1].setFieldLength(14);    ShapeFile outputNodes=new ShapeFile(outputFile.replace(".shp","_nodes.shp"),ShapeType.POINT,fields);    updateProgress("Pre-processing",0);    int rowsLessOne=rows - 1;    int nc;    int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};    int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};    BooleanBitArray2D isEdgeCell=new BooleanBitArray2D(rows,cols);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=dem.getValue(row,col);        if (z != nodata) {          for (nc=0; nc < 8; nc++) {            if (dem.getValue(row + dY[nc],col + dX[nc]) == nodata) {              isEdgeCell.setValue(row,col,true);              break;            }          }        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress("Finding DEM edge cells:",progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    int numLinks=0;    int totalVertices=0;    for (    ShapeFileRecord record : input.records) {      numLinks+=record.getGeometry().getParts().length;      totalVertices+=record.getGeometry().getPoints().length;    }    PriorityQueue<EndPoint> streamQueue=new PriorityQueue<>(totalVertices);    links=new Link[numLinks];    boolean[] crossesDemEdge=new boolean[numLinks];    boolean[] isFeatureMapped=new boolean[numLinks];    pointsTree=new KdTree.SqrEuclid<>(2,null);    boolean crossesValidData;    boolean crossesNodata;    boolean edgeValue1, edgeValue2;    featureNum=-1;    oldProgress=-1;    int currentEndPoint=0;    int k=0;    for (    ShapeFileRecord record : input.records) {      recNum=record.getRecordNumber();      points=record.getGeometry().getPoints();      numPoints=points.length;      partData=record.getGeometry().getParts();      numParts=partData.length;      for (part=0; part < numParts; part++) {        featureNum++;        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1] - 1;        } else {          endingPointInPart=numPoints - 1;        }        length=0;        for (i=startingPointInPart + 1; i <= endingPointInPart; i++) {          length+=distMultiplier * Math.sqrt((points[i][0] - points[i - 1][0]) * (points[i][0] - points[i - 1][0]) + (points[i][1] - points[i - 1][1]) * (points[i][1] - points[i - 1][1]));        }        crossesValidData=false;        crossesNodata=false;        for (i=startingPointInPart; i <= endingPointInPart; i++) {          row=dem.getRowFromYCoordinate(points[i][1]);          col=dem.getColumnFromXCoordinate(points[i][0]);          z=dem.getValue(row,col);          if (z != nodata) {            crossesValidData=true;            isFeatureMapped[featureNum]=true;          }          if (isEdgeCell.getValue(row,col)) {            crossesNodata=true;          }          if (z == nodata) {            crossesNodata=true;          }        }        if (crossesNodata && crossesValidData) {          crossesDemEdge[featureNum]=true;        }        row=dem.getRowFromYCoordinate(points[startingPointInPart][1]);        col=dem.getColumnFromXCoordinate(points[startingPointInPart][0]);        z1=dem.getValue(row,col);        edgeValue1=isEdgeCell.getValue(row,col);        row=dem.getRowFromYCoordinate(points[endingPointInPart][1]);        col=dem.getColumnFromXCoordinate(points[endingPointInPart][0]);        z2=dem.getValue(row,col);        edgeValue2=isEdgeCell.getValue(row,col);        if (isFeatureMapped[featureNum]) {          x=points[startingPointInPart][0];          y=points[startingPointInPart][1];          entry=new double[]{x,y};          pointsTree.addPoint(entry,currentEndPoint);          EndPoint e1=new EndPoint(currentEndPoint,featureNum,x,y,z1);          endPoints.add(e1);          x=points[endingPointInPart][0];          y=points[endingPointInPart][1];          entry=new double[]{x,y};          pointsTree.addPoint(entry,currentEndPoint + 1);          EndPoint e2=new EndPoint(currentEndPoint + 1,featureNum,x,y,z2);          endPoints.add(e2);          if (crossesDemEdge[featureNum]) {            EndPoint e3=e1;            if (z1 == nodata && z2 != nodata) {              e3=e1;            } else             if (z2 == nodata && z1 != nodata) {              e3=e2;            } else {              if (edgeValue1 && (!edgeValue2 && z2 != nodata)) {                e3=e1;              } else               if (edgeValue2 && (!edgeValue1 && z1 != nodata)) {                e3=e2;              } else {                if (z1 < z2 && z2 != nodata) {                  e3=e1;                } else                 if (z2 < z1 && z1 != nodata) {                  e3=e2;                }              }            }            streamQueue.add(e3);            e3.outflowingNode=true;          }          links[featureNum]=new Link(featureNum,currentEndPoint,currentEndPoint + 1,length);          currentEndPoint+=2;        }      }      progress=(int)(100f * recNum / numFeatures);      if (progress != oldProgress) {        updateProgress("Characterizing nodes (loop 1 of 2):",progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    isEdgeCell=null;    boolean[] visitedEndPoint=new boolean[endPoints.size()];    EndPoint e, e2;    progress=-1;    for (i=0; i < endPoints.size(); i++) {      if (!visitedEndPoint[i]) {        e=endPoints.get(i);        x=e.x;        y=e.y;        z=e.z;        entry=new double[]{x,y};        results=pointsTree.neighborsWithinRange(entry,snapDistance);        if (!results.isEmpty()) {          if (results.size() == 1 && lakesUsed && !e.outflowingNode) {            visitedEndPoint[i]=true;            resultsLakes=lakesTree.neighborsWithinRange(entry,snapDistance);            if (!resultsLakes.isEmpty()) {              int lakeNum=(int)resultsLakes.get(0).value;              int nodeNum=lakesNodeIDs[lakeNum];              if (nodeNum != -1) {                nodes.get(nodeNum).addPoint(i);                endPoints.get(i).nodeID=nodeNum;              } else {                Node node=new Node();                node.addPoint(i);                endPoints.get(i).nodeID=nodes.size();                lakesNodeIDs[lakeNum]=nodes.size();                nodes.add(node);              }            } else {              Node node=new Node();              node.addPoint(i);              endPoints.get(i).nodeID=nodes.size();              nodes.add(node);              visitedEndPoint[i]=true;            }          } else {            Node node=new Node();            for (j=0; j < results.size(); j++) {              currentEndPoint=(int)results.get(j).value;              node.addPoint(currentEndPoint);              visitedEndPoint[currentEndPoint]=true;              endPoints.get(currentEndPoint).nodeID=nodes.size();            }            nodes.add(node);          }        }      }      progress=(int)(100f * i / endPoints.size());      if (progress != oldProgress) {        updateProgress("Characterizing nodes (loop 2 of 2):",progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    Node node;    Link link;    int epNum;    int numDownstreamNodes;    double distToOutlet;    int numPopped=0;    int outletID;    int outletLinkID;    oldProgress=-1;    while (!streamQueue.isEmpty()) {      numPopped++;      e=streamQueue.poll();      link=links[e.linkID];      numDownstreamNodes=link.numDownstreamNodes;      distToOutlet=link.distToOutlet;      outletID=link.outlet;      if (outletID == -1) {        links[e.linkID].outlet=outletNum;        outletID=outletNum;        outletNum++;        links[e.linkID].isOutletLink=true;        links[e.linkID].outletLinkID=e.linkID;        whitebox.geospatialfiles.shapefile.Point pointOfInterest=new whitebox.geospatialfiles.shapefile.Point(e.x,e.y);        rowData=new Object[2];        rowData[0]=new Double(e.nodeID);        rowData[1]="outlet";        outputNodes.addRecord(pointOfInterest,rowData);      }      outletLinkID=links[e.linkID].outletLinkID;      node=nodes.get(endPoints.get(e.endPointID).nodeID);      for (      int epNum2 : node.points) {        e2=endPoints.get(epNum2);        if (links[e2.linkID].outlet == -1) {          links[e2.linkID].outlet=outletID;          links[e2.linkID].outletLinkID=outletLinkID;          links[e2.linkID].numDownstreamNodes=numDownstreamNodes + 1;          links[e2.linkID].distToOutlet=distToOutlet + links[e2.linkID].length;          links[e2.linkID].addOutflowingLink(link.index);          streamQueue.add(e2);          e2.outflowingNode=true;        }      }      epNum=link.getOtherEndPoint(e.endPointID);      node=nodes.get(endPoints.get(epNum).nodeID);      for (      int epNum2 : node.points) {        e2=endPoints.get(epNum2);        if (links[e2.linkID].outlet == -1) {          links[e2.linkID].outlet=outletID;          links[e2.linkID].outletLinkID=outletLinkID;          links[e2.linkID].numDownstreamNodes=numDownstreamNodes + 1;          links[e2.linkID].distToOutlet=distToOutlet + links[e2.linkID].length;          links[e2.linkID].addOutflowingLink(link.index);          streamQueue.add(e2);          e2.outflowingNode=true;        } else         if (links[e2.linkID].outlet == outletID && e2.linkID != e.linkID && e2.outflowingNode) {          links[e2.linkID].addOutflowingLink(link.index);          whitebox.geospatialfiles.shapefile.Point pointOfInterest=new whitebox.geospatialfiles.shapefile.Point(e2.x,e2.y);          rowData=new Object[2];          rowData[0]=new Double(e2.nodeID);          rowData[1]="diffluence";          outputNodes.addRecord(pointOfInterest,rowData);        } else         if (links[e2.linkID].outlet != outletID) {          whitebox.geospatialfiles.shapefile.Point pointOfInterest=new whitebox.geospatialfiles.shapefile.Point(e2.x,e2.y);          rowData=new Object[2];          rowData[0]=new Double(e2.nodeID);          rowData[1]="joined head";          outputNodes.addRecord(pointOfInterest,rowData);        }      }      progress=(int)(100f * numPopped / endPoints.size());      if (progress != oldProgress) {        updateProgress("Priority flood:",progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    int[] numInflowingLinks=new int[numLinks];    for (    Link lk : links) {      if (lk != null) {        for (        int dsl : lk.outflowingLinks) {          numInflowingLinks[dsl]++;          links[dsl].addInflowingLink(lk.index);        }      }    }    LinkedList<Integer> stack=new LinkedList<>();    int currentTribNum=1;    for (i=0; i < numLinks; i++) {      if (numInflowingLinks[i] == 0 && isFeatureMapped[i]) {        if (links[i].outlet != -1) {          stack.push(i);          links[i].shreveOrder=1;          links[i].tribID=currentTribNum;          currentTribNum++;        }      }    }    while (!stack.isEmpty()) {      int currentLinkIndex=stack.pop();      links[currentLinkIndex].tucl+=links[currentLinkIndex].length;      links[currentLinkIndex].maxUpstreamDist+=links[currentLinkIndex].length;      int numOutflows=links[currentLinkIndex].outflowingLinks.size();      for (      int dsl : links[currentLinkIndex].outflowingLinks) {        links[dsl].tucl+=links[currentLinkIndex].tucl / numOutflows;        links[dsl].shreveOrder+=links[currentLinkIndex].shreveOrder / numOutflows;        if (links[currentLinkIndex].maxUpstreamDist > links[dsl].maxUpstreamDist) {          links[dsl].maxUpstreamDist=links[currentLinkIndex].maxUpstreamDist;        }        numInflowingLinks[dsl]--;        if (numInflowingLinks[dsl] == 0) {          stack.push(dsl);          if (links[dsl].inflowingLinks.size() > 1) {            double largestTUCL=0;            int tribOfLargestTUCL=-1;            double furthestHead=0;            int tribOfFurthestHead=-1;            for (            int usl : links[dsl].inflowingLinks) {              if (links[usl].tucl > largestTUCL) {                largestTUCL=links[usl].tucl;                tribOfLargestTUCL=links[usl].tribID;              }              if (links[usl].maxUpstreamDist > furthestHead) {                furthestHead=links[usl].maxUpstreamDist;                tribOfFurthestHead=links[usl].tribID;              }            }            links[dsl].tribID=tribOfFurthestHead;          } else           if (links[dsl].inflowingLinks.size() == 1) {            links[dsl].tribID=links[currentLinkIndex].tribID;          }        }      }    }    numInflowingLinks=new int[numLinks];    for (    Link lk : links) {      if (lk != null) {        for (        int dsl : lk.outflowingLinks) {          numInflowingLinks[dsl]++;        }      }    }    stack=new LinkedList<>();    for (i=0; i < numLinks; i++) {      if (numInflowingLinks[i] == 0 && isFeatureMapped[i]) {        stack.push(i);        links[i].strahlerOrder=1;      }    }    while (!stack.isEmpty()) {      int currentLinkIndex=stack.pop();      if (links[currentLinkIndex].outlet != -1) {        if (links[links[currentLinkIndex].outletLinkID].tribID == links[currentLinkIndex].tribID) {          links[currentLinkIndex].isMainstem=true;        }      }      for (      int dsl : links[currentLinkIndex].outflowingLinks) {        numInflowingLinks[dsl]--;        if (numInflowingLinks[dsl] == 0) {          stack.push(dsl);          if (links[dsl].inflowingLinks.size() > 1) {            i=0;            int largestOrder=0;            int tribIDLargestOrder=-1;            int secondLargestOrder=0;            int tribIDSecondLargestOrder=-1;            for (            int usl : links[dsl].inflowingLinks) {              if (links[usl].strahlerOrder >= largestOrder) {                secondLargestOrder=largestOrder;                tribIDSecondLargestOrder=tribIDLargestOrder;                largestOrder=links[usl].strahlerOrder;                tribIDLargestOrder=links[usl].tribID;              }            }            if (largestOrder == secondLargestOrder && tribIDLargestOrder != tribIDSecondLargestOrder) {              links[dsl].strahlerOrder=largestOrder + 1;            } else {              links[dsl].strahlerOrder=largestOrder;            }          } else           if (links[dsl].inflowingLinks.size() == 1) {            links[dsl].strahlerOrder=links[currentLinkIndex].strahlerOrder;          }        }      }    }    int[] outParts={0};    k=0;    PointsList pointsList;    featureNum=-1;    oldProgress=-1;    for (    ShapeFileRecord record : input.records) {      recNum=record.getRecordNumber();      points=record.getGeometry().getPoints();      numPoints=points.length;      partData=record.getGeometry().getParts();      numParts=partData.length;      for (part=0; part < numParts; part++) {        featureNum++;        if (isFeatureMapped[featureNum]) {          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1] - 1;          } else {            endingPointInPart=numPoints - 1;          }          pointsList=new PointsList();          for (i=startingPointInPart; i <= endingPointInPart; i++) {            pointsList.addPoint(points[i][0],points[i][1]);          }          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(outParts,pointsList.getPointsArray());          rowData=new Object[11];          rowData[0]=new Double(k);          link=links[featureNum];          rowData[1]=new Double(link.outlet);          rowData[2]=link.tucl;          rowData[3]=link.maxUpstreamDist;          rowData[4]=new Double(link.numDownstreamNodes);          rowData[5]=link.distToOutlet;          rowData[6]=new Double(link.strahlerOrder);          rowData[7]=new Double(link.shreveOrder);          if (link.isMainstem) {            rowData[8]=1.0;          } else {            rowData[8]=0.0;          }          rowData[9]=new Double(link.tribID);          if (link.outlet != -1) {            rowData[10]=0.0;          } else {            rowData[10]=1.0;          }          output.addRecord(wbGeometry,rowData);          k++;        }      }      progress=(int)(100f * recNum / numFeatures);      if (progress != oldProgress) {        updateProgress("Saving output:",progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.write();    outputNodes.write();    dem.close();    pluginHost.updateProgress("Displaying output vector:",0);    String paletteDirectory=pluginHost.getResourcesDirectory() + "palettes" + File.separator;    VectorLayerInfo vli=new VectorLayerInfo(outputFile,paletteDirectory,255,-1);    vli.setPaletteFile(paletteDirectory + "qual.pal");    vli.setOutlinedWithOneColour(false);    vli.setFillAttribute("OUTLET");    vli.setPaletteScaled(false);    vli.setRecordsColourData();    pluginHost.returnData(vli);  } catch (  OutOfMemoryError oe) {    showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    showFeedback("An error has occurred during operation. See log file for details.");    logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    pluginComplete();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.416 -0500",hash_original_method="68C6754D41E6DE24B60EFC88A41FDF20",hash_generated_method="6D544EC8491E760D52C3029F0A93F4D4") public void put(String key,Long value){  mValues.put(key,value);}  }
class C{  public double classify(Instance x,double ypred[]) throws Exception {  Instance x_=transform(x,ypred);  return Utils.maxIndex(h.distributionForInstance(x_));}  }
class C{  public static synchronized BaseApplication context(){  return (BaseApplication)_context;}  }
class C{  public void addStable(Boolean s){  stable.add(s);}  }
class C{  public ImageData createImage(Dimension imageSize,RGB background){  Display device=Display.getDefault();  if (imageSize == null || imageSize.width <= 0 || imageSize.height <= 0)   imageSize=new Dimension(16,16);  Image image=new Image(device,imageSize.width,imageSize.height);  Rectangle rect=new Rectangle(0,0,imageSize.width,imageSize.height);  paintImage(image,rect,background);  ImageData imgData=image.getImageData();  image.dispose();  return imgData;}  }
class C{  public Tan(){  super("tan",1);}  }
class C{  @Override protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  public AttributeSet copyAttributes(){  AttributeSet[] as=getAttributes();  MutableAttributeSet a=new SimpleAttributeSet();  int n=0;  for (int i=as.length - 1; i >= 0; i--) {    a.addAttributes(as[i]);  }  return a;}  }
class C{  private void initMessageKey(ClassEnum classEnum){  String result=getMessageKey();  if (classEnum != null) {    String enumName=classEnum.toString();    enumName=enumName.substring(enumName.lastIndexOf(".") + 1);    result+="." + enumName;  }  setMessageKey(result);}  }
class C{  public void customReplace(String name,CharSequence original,CharSequence after){  custom(name,null);}  }
class C{  @Override public synchronized void close(){  int s=this.size();  File f=this.table.heapFile;  this.table.close();  if (s == 0)   f.delete();}  }
class C{  private int checkIndexObjects() throws ConnectionException {  CheckType checkType=CheckType.INDEX_OBJECTS;  helper.logMessage("\nStart to check INDEX data that the related object records are missing.\n",false,toConsole);  DbConsistencyStatus status=getStatusFromZk();  Collection<IndexAndCf> resumeIdxCfs=resumeFromWorkingPoint(checkType,status.getWorkingPoint());  int totalCorruptCount=0;  for (  IndexAndCf indexAndCf : resumeIdxCfs) {    int corruptCount=helper.checkIndexingCF(indexAndCf,toConsole);    status=getStatusFromZk();    if (!toConsole && isCancelled(status)) {      cancel(status);    }    if (!toConsole) {      status.update(this.totalCount,checkType.name(),indexAndCf.generateKey(),corruptCount);      persistStatus(status);    }    totalCorruptCount+=corruptCount;  }  DbCheckerFileWriter.close();  String msg=String.format("\nFinish to check INDEX records: totally checked %d indices " + "and %d corrupted rows found.\n",resumeIdxCfs.size(),totalCorruptCount);  helper.logMessage(msg,false,toConsole);  return totalCorruptCount;}  }
class C{  public static synchronized boolean isGrantRootPermission(){  Process process=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec("su");    os=new DataOutputStream(process.getOutputStream());    os.writeBytes("exit\n");    os.flush();    int exitValue=process.waitFor();    if (exitValue == 0) {      return true;    } else {      return false;    }  } catch (  Exception e) {    return false;  } finally {    try {      if (os != null) {        os.close();      }      process.destroy();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private GroupCellSeriesData recursivelyGetSeriesDataForAllGroupCells(Vector<PlotDimension> dimensions,int dimensionIdx,GroupCellKey groupCellKey,GroupCellSeriesData dataForAllGroupCells){  if (groupCellKey == null) {    groupCellKey=new GroupCellKey();  }  if (dataForAllGroupCells == null) {    dataForAllGroupCells=new GroupCellSeriesData();  }  if (dimensionIdx < dimensions.size()) {    PlotDimension currentDimension=dimensions.get(dimensionIdx);    DefaultDimensionConfig currentDimensionConfig=(DefaultDimensionConfig)plotInstance.getCurrentPlotConfigurationClone().getDimensionConfig(currentDimension);    DimensionConfigData currentDimensionConfigData=plotInstance.getPlotData().getDimensionConfigData(currentDimensionConfig);    int nextDimensionIdx=dimensionIdx + 1;    List<ValueRange> allValueGroups=currentDimensionConfigData.getGroupingModel();    if (allValueGroups == null) {      recursivelyGetSeriesDataForAllGroupCells(dimensions,nextDimensionIdx,groupCellKey,dataForAllGroupCells);    } else {      for (      ValueRange group : allValueGroups) {        groupCellKey.setRangeForDimension(currentDimension,group);        recursivelyGetSeriesDataForAllGroupCells(dimensions,nextDimensionIdx,groupCellKey,dataForAllGroupCells);      }    }  } else {    DefaultDimensionConfig xDimensionConfig=valueSource.getDomainConfig();    DimensionConfigData xDimensionConfigData=plotInstance.getPlotData().getDimensionConfigData(xDimensionConfig);    List<ValueRange> xValueGroups=xDimensionConfigData.getGroupingModel();    if (xValueGroups == null) {      groupCellKey.removeRangeForDimension(PlotDimension.DOMAIN);      DataTable dataForCurrentCell=getDataTableForGroupCell(groupCellKey);      if (dataForCurrentCell != null) {        int valueCountInCell=dataForCurrentCell.getRowNumber();        GroupCellData groupCellData=new GroupCellData();        Vector<PlotDimension> allDimensions=new Vector<DimensionConfig.PlotDimension>(dimensions.size() + 2);        allDimensions.addAll(dimensions);        allDimensions.add(PlotDimension.SELECTED);        allDimensions.add(PlotDimension.DOMAIN);        allDimensions.add(PlotDimension.VALUE);        for (        SeriesUsageType usageType : valueSource.getDefinedUsageTypes()) {          groupCellData.initDataForUsageType(usageType,allDimensions,valueCountInCell);        }        DataTable dataTable=plotInstance.getPlotData().getDataTable(valueSource.isSamplingSuggested());        int currentRowIdx=0;        for (        DataTableRow row : dataForCurrentCell) {          for (          SeriesUsageType usageType : valueSource.getDefinedUsageTypes()) {            Map<PlotDimension,double[]> dataForUsageType=groupCellData.getDataForUsageType(usageType);            for (            PlotDimension dimension : dimensions) {              DimensionConfig dimensionConfig=plotInstance.getCurrentPlotConfigurationClone().getDimensionConfig(dimension);              int columnIdx=DataTableColumn.getColumnIndex(dataTable,dimensionConfig.getDataTableColumn());              dataForUsageType.get(dimension)[currentRowIdx]=row.getValue(columnIdx);            }            double yValue=row.getValue(dataTableColumnIdxMap.get(usageType));            double xValue=row.getValue(DataTableColumn.getColumnIndex(dataTable,valueSource.getDomainConfig().getDataTableColumn()));            dataForUsageType.get(PlotDimension.SELECTED)[currentRowIdx]=1;            dataForUsageType.get(PlotDimension.VALUE)[currentRowIdx]=yValue;            dataForUsageType.get(PlotDimension.DOMAIN)[currentRowIdx]=xValue;          }          ++currentRowIdx;        }        dataForAllGroupCells.addGroupCell(new GroupCellKeyAndData((GroupCellKey)groupCellKey.clone(),groupCellData));      }    } else {      int valueCountInCell=xValueGroups.size();      GroupCellData groupCellData=new GroupCellData();      Vector<PlotDimension> allDimensions=new Vector<DimensionConfig.PlotDimension>(dimensions.size() + 2);      allDimensions.addAll(dimensions);      allDimensions.add(PlotDimension.SELECTED);      allDimensions.add(PlotDimension.DOMAIN);      allDimensions.add(PlotDimension.VALUE);      for (      SeriesUsageType usageType : valueSource.getDefinedUsageTypes()) {        groupCellData.initDataForUsageType(usageType,allDimensions,valueCountInCell);      }      for (      SeriesUsageType usageType : valueSource.getDefinedUsageTypes()) {        int xGroupIdx=0;        Map<PlotDimension,double[]> dataForUsageType=groupCellData.getDataForUsageType(usageType);        for (        ValueRange group : xValueGroups) {          groupCellKey.setRangeForDimension(PlotDimension.DOMAIN,group);          for (          PlotDimension dimension : dimensions) {            ValueRange valueRange=groupCellKey.getRangeForDimension(dimension);            double value=Double.NaN;            if (valueRange != null) {              value=valueRange.getValue();            }            dataForUsageType.get(dimension)[xGroupIdx]=value;          }          dataForUsageType.get(PlotDimension.SELECTED)[xGroupIdx]=1;          double y=getAggregatedValueForGroupCell(usageType,groupCellKey);          if (xDimensionConfig.getGrouping().isCategorical()) {            dataForUsageType.get(PlotDimension.DOMAIN)[xGroupIdx]=group.getValue();          } else {            dataForUsageType.get(PlotDimension.DOMAIN)[xGroupIdx]=group.getValue();          }          dataForUsageType.get(PlotDimension.VALUE)[xGroupIdx]=y;          ++xGroupIdx;        }      }      groupCellKey.removeRangeForDimension(PlotDimension.DOMAIN);      dataForAllGroupCells.addGroupCell(new GroupCellKeyAndData((GroupCellKey)groupCellKey.clone(),groupCellData));    }  }  return dataForAllGroupCells;}  }
class C{  public static String toString(Date date){  String string;synchronized (format) {    string=format.format(date);  }  return string;}  }
class C{  protected String radiusesTipText(){  return "The upper and lower boundary for the radius of the clusters.";}  }
class C{  public UnicodeTranslatorSurePOS(){}  }
class C{  public void prepare(){  try {    if (state == State.INITIALIZING) {      if (rUncompressed) {        if ((audioRecorder.getState() == AudioRecord.STATE_INITIALIZED) & (filePath != null)) {          randomAccessWriter=new RandomAccessFile(filePath,"rw");          randomAccessWriter.setLength(0);          randomAccessWriter.writeBytes("RIFF");          randomAccessWriter.writeInt(0);          randomAccessWriter.writeBytes("WAVE");          randomAccessWriter.writeBytes("fmt ");          randomAccessWriter.writeInt(Integer.reverseBytes(16));          randomAccessWriter.writeShort(Short.reverseBytes((short)1));          randomAccessWriter.writeShort(Short.reverseBytes(nChannels));          randomAccessWriter.writeInt(Integer.reverseBytes(sRate));          randomAccessWriter.writeInt(Integer.reverseBytes(sRate * bSamples * nChannels / 8));          randomAccessWriter.writeShort(Short.reverseBytes((short)(nChannels * bSamples / 8)));          randomAccessWriter.writeShort(Short.reverseBytes(bSamples));          randomAccessWriter.writeBytes("data");          randomAccessWriter.writeInt(0);          buffer=new byte[framePeriod * bSamples / 8 * nChannels];          state=State.READY;        } else {          state=State.ERROR;        }      } else {        mediaRecorder.prepare();        state=State.READY;      }    } else {      release();      state=State.ERROR;    }  } catch (  Exception e) {    state=State.ERROR;  }}  }
class C{  @NonNull public static Date localDateToDate(@NonNull LocalDate localDate,@NonNull ZoneId zoneId){  return DateTimeUtils.toDate(localDate.atStartOfDay(zoneId).toInstant());}  }
class C{  private static void zipDir(File dir,ZipOutputStream zos,String prefix){  File[] entries=dir.listFiles();  for (int i=0; i < entries.length; i++) {    if (entries[i].isDirectory()) {      ZipEntry zi=new ZipEntry(prefix + "/" + entries[i].getName()+ "/");      try {        zos.putNextEntry(zi);        zos.closeEntry();      } catch (      IOException ioex) {        ioex.printStackTrace();      }      zipDir(entries[i],zos,prefix + "/" + entries[i].getName());    } else {      FileInputStream fis=null;      try {        fis=new FileInputStream(entries[i]);        ZipEntry zi=new ZipEntry(prefix + "/" + entries[i].getName());        zos.putNextEntry(zi);        copystream(fis,zos);        zos.closeEntry();      } catch (      FileNotFoundException ex) {        ex.printStackTrace();      }catch (      IOException ioex) {        ioex.printStackTrace();      } finally {        try {          if (fis != null)           fis.close();        } catch (        Exception e) {        }      }    }  }}  }
class C{  public InvalidCommandLengthException(String message,Throwable cause){  super(message,cause);}  }
class C{  private boolean areSeriesDisjoint(XYDataset x_dataset){  int l_minuendItemCount=x_dataset.getItemCount(0);  double l_minuendFirst=x_dataset.getXValue(0,0);  double l_minuendLast=x_dataset.getXValue(0,l_minuendItemCount - 1);  int l_subtrahendItemCount=x_dataset.getItemCount(1);  double l_subtrahendFirst=x_dataset.getXValue(1,0);  double l_subtrahendLast=x_dataset.getXValue(1,l_subtrahendItemCount - 1);  return ((l_minuendLast < l_subtrahendFirst) || (l_subtrahendLast < l_minuendFirst));}  }
class C{  public String mostOfString(){  String typeName="";switch (type) {case BUILTIN:    typeName="BUILTIN";  break;case NUMBER:typeName="NUMBER";break;case STRING:typeName="STRING";break;case IDENT:typeName="IDENT";break;case OTHER:typeName="OTHER";break;case REP_CHAR:typeName="REP_CHAR";break;case LEFT_DQUOTE:typeName="LEFT_DQUOTE";break;case RIGHT_DQUOTE:typeName="RIGHT_DQUOTE";break;case VERB:typeName="VERB";break;case TEX:typeName="TEX";break;};String str="\"" + string + "\"";if (string == null) {str="null";};String result="[str |-> " + str + ",\t type |-> "+ typeName+ ",\t col |-> "+ column+ ",\t width |-> "+ getWidth();if (isTLA) {result=result + ",\t isTLA |-> true";};if (isAmbiguous) {result=result + ",\t isAmbig |-> true";};return result;}  }
class C{  public String toStringSummary(){  return new ResultMatrixPlainText(this).toStringSummary();}  }
class C{  public boolean isInGroup(VisualItem item,String group){  if (ALL_ITEMS.equals(group)) {    return true;  }  if (item.getGroup() == group) {    return true;  }  TupleSet tset=getGroup(group);  return (tset == null ? false : tset.containsTuple(item));}  }
class C{  private void systemExit(int status){  try {    databaseCleaner.closeDatabaseCleaner();    LOGGER.debug("Ending");  } catch (  Exception e) {    e.printStackTrace();  } finally {    cleanUpWorkingDirectory();    if (status != 0) {      System.err.println("InterProScan analysis failed. Exception thrown by SingleSeqOptimisedBlackBoxMaster. Check the log file for details");    }    System.exit(status);  }  System.exit(status);}  }
class C{  private void parseBoldAndItalicSpans(SpanManager sm,Span line,List<Span> boldSpans,List<Span> italicSpans){  parseQuotedSpans(sm,line,boldSpans,"'''");  parseQuotedSpans(sm,line,italicSpans,"''");  int openTag=sm.indexOf("''",line);  if (openTag != -1) {    Span qs=new Span(openTag,line.getEnd());    if (calculateSrcSpans) {      qs.setSrcSpan(new SrcSpan(sm.getSrcPos(openTag),sm.getSrcPos(line.getEnd())));    }    if (sm.indexOf("'''",openTag,openTag + 3) != -1) {      boldSpans.add(qs);      sm.delete(openTag,openTag + 3);    } else {      italicSpans.add(qs);      sm.delete(openTag,openTag + 2);    }  }}  }
class C{  public URI createTenant(KeystoneTenant tenant){  TenantOrgRestRep tenantResp=_internalTenantServiceClient.createTenant(_keystoneUtilsService.prepareTenantParam(tenant));  return tenantResp.getId();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!(obj instanceof DefaultPolarItemRenderer)) {    return false;  }  DefaultPolarItemRenderer that=(DefaultPolarItemRenderer)obj;  if (!this.seriesFilled.equals(that.seriesFilled)) {    return false;  }  if (this.drawOutlineWhenFilled != that.drawOutlineWhenFilled) {    return false;  }  if (!ObjectUtilities.equal(this.fillComposite,that.fillComposite)) {    return false;  }  if (this.useFillPaint != that.useFillPaint) {    return false;  }  if (!ShapeUtilities.equal(this.legendLine,that.legendLine)) {    return false;  }  if (this.shapesVisible != that.shapesVisible) {    return false;  }  if (this.connectFirstAndLastPoint != that.connectFirstAndLastPoint) {    return false;  }  if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) {    return false;  }  if (!ObjectUtilities.equal(this.baseToolTipGenerator,that.baseToolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.urlGenerator,that.urlGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,that.legendItemToolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemURLGenerator,that.legendItemURLGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public MersenneTwisterUniformRng(final int seed){  mt=new int[N];  setSeed(seed);}  }
class C{  public NullIcon(int width,int height){  m_iWidth=width;  m_iHeight=height;}  }
class C{  public SlowedProgressBar(Context context){  super(context,null);}  }
class C{  private Document generate(VCard... vcards) throws TemplateException {  HCardPage template=new HCardPage();  for (  VCard vcard : vcards) {    template.add(vcard);  }  return Jsoup.parse(template.write());}  }
class C{  public JCExpression QualIdent(Symbol sym){  return isUnqualifiable(sym) ? Ident(sym) : Select(QualIdent(sym.owner),sym);}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  public void interrupt(){  timer.cancel();  removeScriptingListeners(document.getDocumentElement());  removeDocumentListeners();}  }
class C{  public boolean isRectangle(){  float[] tmpPointsBuf=createFloatArrayFromPool(6);  boolean[] tmpCornersBuf=createBoolArrayFromPool(4);  Iterator it=createIteratorFromPool(this,null);  Rectangle bounds=createRectFromPool();  try {    getBounds(bounds);    if (tmpPointsBuf.length != 6) {      throw new RuntimeException("points buffer must be length 6");    }    float[] buf=tmpPointsBuf;    if (tmpCornersBuf.length != 4) {      throw new RuntimeException("corners buffer must be length 4");    }    boolean[] corners=tmpCornersBuf;    int prevX=0;    int prevY=0;    while (!it.isDone()) {      int type=it.currentSegment(buf);      if (type != PathIterator.SEG_CLOSE && type != PathIterator.SEG_LINETO && type != PathIterator.SEG_MOVETO) {        return false;      }      int x=(int)buf[0];      int y=(int)buf[1];      if (type == PathIterator.SEG_LINETO && !(x == prevX || y == prevY)) {        return false;      }      if (x != bounds.getX() && y != bounds.getY() && x != bounds.getX() + bounds.getWidth() && y != bounds.getY() + bounds.getHeight()) {        return false;      }      for (int i=0; i < 4; i++) {        if (corners[i]) {          continue;        }switch (i) {case 0:          corners[i]=(x == bounds.getX() && y == bounds.getY());        break;case 1:      corners[i]=(x == bounds.getX() + bounds.getWidth() && y == bounds.getY());    break;case 2:  corners[i]=(x == bounds.getX() + bounds.getWidth() && y == bounds.getY() + bounds.getHeight());break;case 3:corners[i]=(x == bounds.getX() && y == bounds.getY() + bounds.getHeight());break;}}prevX=x;prevY=y;it.next();}return corners[0] && corners[1] && corners[2]&& corners[3];}  finally {recycle(tmpPointsBuf);recycle(tmpCornersBuf);recycle(it);recycle(bounds);}}  }
class C{  public boolean isYspaceFor(float height){  return (getYspace() - height) >= 0f;}  }
class C{  public static int test(int a){  return Math.abs(a);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.636 -0500",hash_original_method="FEE9D772AE5D3D19558CCEFFB0D8835C",hash_generated_method="0C8169242869498E87B1B7CB9AD5D6CC") public boolean useBadgeIcon(){  return 1 == ((mSearchMode & SEARCH_MODE_BADGE_ICON) + mIconId);}  }
class C{  public void testDeletePathMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),paths(FILE));  create(igfs,null,null);  igfs.delete(SUBDIR,true);  checkExist(igfs,DIR);  checkNotExist(igfs,igfsSecondary,SUBDIR,SUBSUBDIR,FILE);}  }
class C{  public static File unitsDir(){  lock.readLock().lock();  try {    return (units_dir != null) ? units_dir : new File(dataDir(),DEFAULT_DIR_NAME_UNITS);  }  finally {    lock.readLock().unlock();  }}  }
class C{  private static boolean verifyFileVersion(LittleEndianDataInputStream ledis) throws IOException {  return ((ledis.readInt() & FILE_VERSION_CRITICAL_MASK) <= (FILE_VERSION_32 & FILE_VERSION_CRITICAL_MASK));}  }
class C{  public static String write(POSMikheevCounter counter){  return POSBaseLineCounter.write(counter);}  }
class C{  public Intersection(Vec4 intersectionPoint,boolean isTangent){  if (intersectionPoint == null) {    throw new IllegalArgumentException("Intersection Point Is Null");  }  this.intersectionPoint=intersectionPoint;  this.isTangent=isTangent;}  }
class C{  public static int kthSmallest(int k,int[] A,int[] B){  k-=1;  int lenA=A.length;  int lenB=B.length;  if (k < 0 || k > lenA + lenB - 1)   return -1;  if (k == 0)   return A[0] < B[0] ? A[0] : B[0];  if (k == lenA + lenB - 1)   return A[lenA - 1] < B[lenB - 1] ? B[lenB - 1] : A[lenA - 1];  int i=0;  int j=0;  while (i + j < k) {    if (A[i] < B[j] && i < A.length) {      i++;    } else     if (A[i] >= B[j] && j < B.length) {      j++;    }    if (i + j == k && A[i] < B[j]) {      return A[i];    } else     if (i + j == k && A[i] >= B[j]) {      return B[j];    }  }  return -1;}  }
class C{  boolean isDependentOnAnyIterator(CompiledValue cv){  return !getDependencySet(cv,true).isEmpty();}  }
class C{  public void addWorkspaceComponent(final WorkspaceComponent component){  LOGGER.debug("adding component: " + component);  componentList.add(component);  component.setWorkspace(this);  component.setChangedSinceLastSave(false);  this.setWorkspaceChanged(true);  if (component.getName().equalsIgnoreCase("")) {    if (componentNameIndices.get(component.getClass()) == null) {      componentNameIndices.put(component.getClass(),1);    } else {      int index=componentNameIndices.get(component.getClass());      componentNameIndices.put(component.getClass(),index + 1);    }    component.setName(component.getSimpleName() + componentNameIndices.get(component.getClass()));  }  fireWorkspaceComponentAdded(component);}  }
class C{  public void handlePopupMenu(MouseEvent e){  TreePath path=tree.getUI().getClosestPathForLocation(tree,e.getPoint().x,e.getPoint().y);  if (path != null) {    tree.setSelectionPath(path);    popup.show(tree,e.getX(),e.getY());  }}  }
class C{  public int write(final Protein protein) throws IOException {  checkEntryHierarchy();  if (entryHierarchy != null) {    for (    ProteinXref xref : protein.getCrossReferences()) {      final SimpleProtein simpleProtein=SimpleProtein.valueOf(protein,xref,entryHierarchy);      if (simpleProtein != null) {        final SimpleHash model=buildModelMap(simpleProtein,entryHierarchy);        Writer writer=null;        try {          final Template temp=freeMarkerConfig.getTemplate(freeMarkerTemplate);          checkTempDirectory(tempDirectory);          if (!tempDirectory.endsWith(File.separator)) {            tempDirectory=tempDirectory + File.separator;          }          UrlFriendlyIdGenerator gen=UrlFriendlyIdGenerator.getInstance();          String urlFriendlyId=gen.generate(xref.getIdentifier());          final Path newResultFile=Paths.get(tempDirectory + urlFriendlyId + ".svg");          resultFiles.add(newResultFile);          writer=Files.newBufferedWriter(newResultFile,characterSet);          temp.process(model,writer);          writer.flush();        } catch (        TemplateException e) {          e.printStackTrace();        }catch (        IOException e) {          e.printStackTrace();        } finally {          if (writer != null) {            writer.close();          }        }      }    }  }  return 0;}  }
class C{  public TDoubleFloatHashMap(int initialCapacity,float loadFactor,TDoubleHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  try {    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  @Override public void onDownloadStateChanged(int newState){  setState(newState);  boolean showDashboard=true;  boolean showCellMessage=false;  boolean paused;  boolean indeterminate;switch (newState) {case IDownloaderClient.STATE_IDLE:    paused=false;  indeterminate=true;break;case IDownloaderClient.STATE_CONNECTING:case IDownloaderClient.STATE_FETCHING_URL:showDashboard=true;paused=false;indeterminate=true;break;case IDownloaderClient.STATE_DOWNLOADING:paused=false;showDashboard=true;indeterminate=false;break;case IDownloaderClient.STATE_FAILED_CANCELED:case IDownloaderClient.STATE_FAILED:case IDownloaderClient.STATE_FAILED_FETCHING_URL:case IDownloaderClient.STATE_FAILED_UNLICENSED:paused=true;showDashboard=false;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_NEED_CELLULAR_PERMISSION:case IDownloaderClient.STATE_PAUSED_WIFI_DISABLED_NEED_CELLULAR_PERMISSION:showDashboard=false;paused=true;indeterminate=false;showCellMessage=true;break;case IDownloaderClient.STATE_PAUSED_BY_REQUEST:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_ROAMING:case IDownloaderClient.STATE_PAUSED_SDCARD_UNAVAILABLE:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_COMPLETED:showDashboard=false;paused=false;indeterminate=false;validateXAPKZipFiles();return;default :paused=true;indeterminate=true;showDashboard=true;}int newDashboardVisibility=showDashboard ? View.VISIBLE : View.GONE;if (mDashboard.getVisibility() != newDashboardVisibility) {mDashboard.setVisibility(newDashboardVisibility);}int cellMessageVisibility=showCellMessage ? View.VISIBLE : View.GONE;if (mCellMessage.getVisibility() != cellMessageVisibility) {mCellMessage.setVisibility(cellMessageVisibility);}mPB.setIndeterminate(indeterminate);setButtonPausedState(paused);}  }
class C{  private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];  int tries=100;  while (tries-- > 0) {    for (int i=0; i < ambiguousIndexCount.length; i++) {      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];    }    try {      return decodeCodewords(codewords,ecLevel,erasureArray);    } catch (    ChecksumException ignored) {    }    if (ambiguousIndexCount.length == 0) {      throw ChecksumException.getChecksumInstance();    }    for (int i=0; i < ambiguousIndexCount.length; i++) {      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {        ambiguousIndexCount[i]++;        break;      } else {        ambiguousIndexCount[i]=0;        if (i == ambiguousIndexCount.length - 1) {          throw ChecksumException.getChecksumInstance();        }      }    }  }  throw ChecksumException.getChecksumInstance();}  }
class C{  String[] calculateCssClasses(int[] times){  String[] cssClasses=new String[times.length];  int firstIdx=0;  int secondIdx=0;  int highest=0;  int secondHighest=0;  for (int i=0; i < times.length; i++) {    if (times[i] > highest) {      secondIdx=firstIdx;      firstIdx=i;      secondHighest=highest;      highest=times[i];    } else     if (times[i] > secondHighest) {      secondIdx=i;      secondHighest=times[i];    }  }  cssClasses[secondIdx]="second";  cssClasses[firstIdx]="first";  return cssClasses;}  }
class C{  public void sendUserMessage(Severity severity,String message,Throwable exception){}  }
class C{  public static <T>String traverseCollection(Collection<T> c){  if (!isEmpty(c)) {    int len=c.size();    StringBuilder builder=new StringBuilder(len);    int i=0;    for (    T t : c) {      if (t == null) {        continue;      }      builder.append(t.toString());      i++;      if (i < len) {        builder.append(DELIMITER);      }    }    return builder.toString();  }  return null;}  }
class C{  public void status() throws Exception {  System.out.println("STATUS OF " + name.toUpperCase());  try {    StringBuffer sb=new StringBuffer();    if (x.getAnonymityState()) {      sb.append("anon, ");    }    if (x.getConfState()) {      sb.append("conf, ");    }    if (x.getCredDelegState()) {      sb.append("deleg, ");    }    if (x.getIntegState()) {      sb.append("integ, ");    }    if (x.getMutualAuthState()) {      sb.append("mutual, ");    }    if (x.getReplayDetState()) {      sb.append("rep det, ");    }    if (x.getSequenceDetState()) {      sb.append("seq det, ");    }    if (x instanceof ExtendedGSSContext) {      if (((ExtendedGSSContext)x).getDelegPolicyState()) {        sb.append("deleg policy, ");      }    }    System.out.println("Context status of " + name + ": "+ sb.toString());    System.out.println(x.getSrcName() + " -> " + x.getTargName());  } catch (  Exception e) {    ;  }  if (s != null) {    System.out.println("====== START SUBJECT CONTENT =====");    for (    Principal p : s.getPrincipals()) {      System.out.println("    Principal: " + p);    }    for (    Object o : s.getPublicCredentials()) {      System.out.println("    " + o.getClass());      System.out.println("        " + o);    }    System.out.println("====== Private Credentials Set ======");    for (    Object o : s.getPrivateCredentials()) {      System.out.println("    " + o.getClass());      if (o instanceof KerberosTicket) {        KerberosTicket kt=(KerberosTicket)o;        System.out.println("        " + kt.getServer() + " for "+ kt.getClient());      } else       if (o instanceof KerberosKey) {        KerberosKey kk=(KerberosKey)o;        System.out.print("        " + kk.getKeyType() + " "+ kk.getVersionNumber()+ " "+ kk.getAlgorithm()+ " ");        for (        byte b : kk.getEncoded()) {          System.out.printf("%02X",b & 0xff);        }        System.out.println();      } else       if (o instanceof Map) {        Map map=(Map)o;        for (        Object k : map.keySet()) {          System.out.println("        " + k + ": "+ map.get(k));        }      } else {        System.out.println("        " + o);      }    }    System.out.println("====== END SUBJECT CONTENT =====");  }  if (x != null && x instanceof ExtendedGSSContext) {    if (x.isEstablished()) {      ExtendedGSSContext ex=(ExtendedGSSContext)x;      Key k=(Key)ex.inquireSecContext(InquireType.KRB5_GET_SESSION_KEY);      if (k == null) {        throw new Exception("Session key cannot be null");      }      System.out.println("Session key is: " + k);      boolean[] flags=(boolean[])ex.inquireSecContext(InquireType.KRB5_GET_TKT_FLAGS);      if (flags == null) {        throw new Exception("Ticket flags cannot be null");      }      System.out.println("Ticket flags is: " + Arrays.toString(flags));      String authTime=(String)ex.inquireSecContext(InquireType.KRB5_GET_AUTHTIME);      if (authTime == null) {        throw new Exception("Auth time cannot be null");      }      System.out.println("AuthTime is: " + authTime);      if (!x.isInitiator()) {        AuthorizationDataEntry[] ad=(AuthorizationDataEntry[])ex.inquireSecContext(InquireType.KRB5_GET_AUTHZ_DATA);        System.out.println("AuthzData is: " + Arrays.toString(ad));      }    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ntst");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Override protected InfixExpression createCorrectOddnessCheck(ASTRewrite rewrite,Expression numberExpression){  Assert.isNotNull(rewrite);  Assert.isNotNull(numberExpression);  final AST ast=rewrite.getAST();  InfixExpression correctOddnessCheck=ast.newInfixExpression();  InfixExpression remainderExp=ast.newInfixExpression();  correctOddnessCheck.setLeftOperand(remainderExp);  correctOddnessCheck.setOperator(NOT_EQUALS);  correctOddnessCheck.setRightOperand(ast.newNumberLiteral("0"));  remainderExp.setLeftOperand((Expression)rewrite.createMoveTarget(numberExpression));  remainderExp.setOperator(REMAINDER);  remainderExp.setRightOperand(ast.newNumberLiteral("2"));  return correctOddnessCheck;}  }
class C{  protected void addViolation(RuleContext ctx,DelphiRuleViolation violation){  ctx.getReport().addRuleViolation(violation);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public int onPut(Operation operation){  return ResponseCodes.OBEX_HTTP_NOT_IMPLEMENTED;}  }
class C{  private static byte[] priCrypt(byte[] msg,BigInteger n,BigInteger exp) throws BadPaddingException {  BigInteger c=parseMsg(msg,n);  BlindingRandomPair brp=null;  BigInteger m;  if (ENABLE_BLINDING) {    brp=getBlindingRandomPair(null,exp,n);    c=c.multiply(brp.u).mod(n);    m=c.modPow(exp,n);    m=m.multiply(brp.v).mod(n);  } else {    m=c.modPow(exp,n);  }  return toByteArray(m,getByteLength(n));}  }
class C{  public void updateStatus(EntityManager em,InstanceStatus status){  if (isDeleted()) {    return;  }  if (status != null) {    if (getServiceAccessInfo() == null && status.getAccessInfo() != null) {      setServiceAccessInfo(status.getAccessInfo());    } else     if (getServiceAccessInfo() != null && status.getAccessInfo() != null && !getServiceAccessInfo().equals(status.getAccessInfo())) {      setServiceAccessInfo(status.getAccessInfo());    }    if (getRunWithTimer() != status.getRunWithTimer()) {      setRunWithTimer(status.getRunWithTimer());      if (getRunWithTimer() == false) {        setLocked(false);      }    }    em.persist(this);  }}  }
class C{  public boolean isAcceptable(GeneralName gname){  if (this.tag != gname.getTag()) {    return false;  }switch (this.tag) {case RFC822_NAME:    return ((String)gname.getName()).toLowerCase(Locale.US).endsWith(((String)name).toLowerCase(Locale.US));case DNS_NAME:  String dns=(String)name;String _dns=(String)gname.getName();if (dns.equalsIgnoreCase(_dns)) {return true;} else {return _dns.toLowerCase(Locale.US).endsWith("." + dns.toLowerCase(Locale.US));}case UR_ID:String uri=(String)name;int begin=uri.indexOf("://") + 3;int end=uri.indexOf('/',begin);String host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);uri=(String)gname.getName();begin=uri.indexOf("://") + 3;end=uri.indexOf('/',begin);String _host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);if (host.startsWith(".")) {return _host.toLowerCase(Locale.US).endsWith(host.toLowerCase(Locale.US));} else {return host.equalsIgnoreCase(_host);}case IP_ADDR:byte[] address=(byte[])name;byte[] _address=(byte[])gname.getName();int length=address.length;if (length != 4 && length != 8 && length != 16 && length != 32) {return false;}int _length=_address.length;if (length == _length) {return Arrays.equals(address,_address);} else if (length == 2 * _length) {for (int i=0; i < _address.length; i++) {int octet=_address[i] & 0xff;int min=address[i] & 0xff;int max=address[i + _length] & 0xff;if ((octet < min) || (octet > max)) {return false;}}return true;} else {return false;}case DIR_NAME:case X400_ADDR:case OTHER_NAME:case EDIP_NAME:case REG_ID:return Arrays.equals(getEncoded(),gname.getEncoded());default :}return true;}  }
class C{  public void test_startWriteStop1() throws InterruptedException, ExecutionException, TimeoutException {  final H masterStats=new H();  final BlockingBuffer<KVO<O>[]> masterBuffer=new BlockingBuffer<KVO<O>[]>(masterQueueCapacity);  final M master=new M(masterStats,masterBuffer,executorService);  final FutureTask<H> ft=new FutureTask<H>(master);  masterBuffer.setFuture(ft);  executorService.submit(ft);  final KVO<O>[] a=new KVO[]{new KVO<O>(new byte[]{1},new byte[]{2},null),new KVO<O>(new byte[]{1},new byte[]{3},null)};  masterBuffer.add(a);  masterBuffer.close();  masterBuffer.getFuture().get(5L,TimeUnit.SECONDS);  assertEquals("elementsIn",a.length,masterStats.elementsIn.get());  assertEquals("chunksIn",1,masterStats.chunksIn.get());  assertEquals("elementsOut",a.length,masterStats.elementsOut.get());  assertEquals("chunksOut",1,masterStats.chunksOut.get());  assertEquals("partitionCount",1,masterStats.getMaximumPartitionCount());{    final HS subtaskStats=masterStats.getSubtaskStats(new L(1));    assertNotNull(subtaskStats);    assertEquals("chunksOut",1,subtaskStats.chunksOut.get());    assertEquals("elementsOut",2,subtaskStats.elementsOut.get());  }  assertEquals("subtaskStartCount",1,masterStats.subtaskStartCount.get());  assertEquals("subtaskEndCount",1,masterStats.subtaskEndCount.get());}  }
class C{  public CharAtom(char c,String textStyle){  this.c=c;  this.textStyle=textStyle;}  }
class C{  public void subscribe(String sku){  throw new RuntimeException("Unsupported");}  }
class C{  public long longValue(){  return numericValue().longValue();}  }
class C{  private void writeCacheXml(final String dirPath,final Configuration configuration) throws IOException {  String fullPath=FilenameUtils.concat(dirPath,configuration.getCacheXmlFileName());  FileUtils.writeStringToFile(new File(fullPath),configuration.getCacheXmlContent(),"UTF-8");}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  if (intent != null && intent.hasExtra(EXTRA_TRACK_PREVIEW_URL) && intent.getStringExtra(EXTRA_TRACK_PREVIEW_URL) != null) {    setTrackPreviewUrl(intent.getStringExtra(EXTRA_TRACK_PREVIEW_URL));    onPlayAudio(0);  }  return START_STICKY;}  }
class C{  public OverLIBToolTipTagFragmentGenerator(){  super();}  }
class C{  protected String determineCommonPrefix(String currentPrefix){  String result;  String newPrefix;  if (!isRoot() && (getChar() != STOP)) {    newPrefix=currentPrefix + getChar();  } else {    newPrefix=currentPrefix;  }  if (m_Children.size() == 1) {    result=((TrieNode)getChildAt(0)).determineCommonPrefix(newPrefix);  } else {    result=newPrefix;  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.919 -0500",hash_original_method="588A1CECAAE48251BC4F5156DD9C9A13",hash_generated_method="CEBFB24A422FFCDC1E0BF9115BA5B2CE") public String toPattern(){  return dform.toPattern();}  }
class C{  private boolean uploadAllTrackPoints(Fusiontables fusiontables,String tableId,Track track) throws IOException {  int numberOfPoints=track.getNumberOfPoints();  List<Location> locations=new ArrayList<Location>(MAX_POINTS_PER_UPLOAD);  Location lastValidLocation=null;  boolean sentStartMarker=false;  int readCount=0;  LocationIterator locationIterator=null;  try {    locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(trackId,-1L,false,MyTracksProviderUtils.DEFAULT_LOCATION_FACTORY);    while (locationIterator.hasNext()) {      Location location=locationIterator.next();      locations.add(location);      if (LocationUtils.isValidLocation(location)) {        lastValidLocation=location;      }      if (!sentStartMarker && lastValidLocation != null) {        String name=context.getString(R.string.marker_label_start,track.getName());        createNewPoint(fusiontables,tableId,name,"",lastValidLocation,MARKER_TYPE_START);        sentStartMarker=true;      }      readCount++;      if (readCount % MAX_POINTS_PER_UPLOAD == 0) {        if (!prepareAndUploadPoints(fusiontables,tableId,track,locations,false)) {          Log.d(TAG,"Unable to upload points");          return false;        }        updateProgress(readCount,numberOfPoints);        locations.clear();      }    }    if (!prepareAndUploadPoints(fusiontables,tableId,track,locations,true)) {      Log.d(TAG,"Unable to upload points");      return false;    }    if (lastValidLocation != null) {      String name=context.getString(R.string.marker_label_end,track.getName());      DescriptionGenerator descriptionGenerator=new DescriptionGeneratorImpl(context);      String description=descriptionGenerator.generateTrackDescription(track,null,null,true);      createNewPoint(fusiontables,tableId,name,description,lastValidLocation,MARKER_TYPE_END);    }    return true;  }  finally {    if (locationIterator != null) {      locationIterator.close();    }  }}  }
class C{  public int size(){  return mSize;}  }
class C{  private void sendError(String status,String msg) throws InterruptedException {  sendResponse(status,MIME_PLAINTEXT,null,new ByteArrayInputStream(msg.getBytes()));  throw new InterruptedException();}  }
class C{  public void testErrorFlagNumeric(){  performTest(true,false,false,true,false);}  }
class C{  public void createStdPeriods(Locale locale){  createStdPeriods(locale,null,null);}  }
class C{  public static void writeConfigFile(OutputStream outputStream,File searchDir) throws SQLException, IOException {  List<Class<?>> classList=new ArrayList<Class<?>>();  findAnnotatedClasses(classList,searchDir,0);  writeConfigFile(outputStream,classList.toArray(new Class[classList.size()]));}  }
class C{  static InterpretedFunction createScript(InterpreterData idata,Object staticSecurityDomain){  InterpretedFunction f;  f=new InterpretedFunction(idata,staticSecurityDomain);  return f;}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  if (delegate != null) {    return delegate.scan(clazz);  }  return null;}  }
class C{  @Override public Range findDomainBounds(XYDataset dataset){  if (dataset == null) {    return null;  }  Range r=DatasetUtilities.findDomainBounds(dataset,false);  if (r == null) {    return null;  }  return new Range(r.getLowerBound() + this.xOffset,r.getUpperBound() + this.blockWidth + this.xOffset);}  }
class C{  public void addCc(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.CC);}  }
class C{  public boolean isSelected(){  if (selectedIndex != -1)   return true;  return false;}  }
class C{  private void doneRemote(IgniteTxEntry txEntry,GridCacheVersion baseVer,Collection<GridCacheVersion> committedVers,Collection<GridCacheVersion> rolledbackVers,Collection<GridCacheVersion> pendingVers){  while (true) {    GridDistributedCacheEntry entry=(GridDistributedCacheEntry)txEntry.cached();    try {      GridCacheVersion doneVer=txEntry.explicitVersion() != null ? txEntry.explicitVersion() : xidVer;      entry.doneRemote(doneVer,baseVer,pendingVers,committedVers,rolledbackVers,isSystemInvalidate());      break;    } catch (    GridCacheEntryRemovedException ignored) {      assert entry.obsoleteVersion() != null;      if (log.isDebugEnabled())       log.debug("Replacing obsolete entry in remote transaction [entry=" + entry + ", tx="+ this+ ']');      txEntry.cached(txEntry.context().cache().entryEx(txEntry.key(),topologyVersion()));    }  }}  }
class C{  public static ArrayList<ItemBean> addToMMovementList(Properties ctx,ArrayList<ItemBean> items,ArrayList itemsToBeAdded,boolean ifAdd) throws ProductNotOnPriceListException, OperationException {  Iterator iter=itemsToBeAdded.iterator();  ItemBean itemBean;  ItemBean foundItemBean;  while (iter.hasNext()) {    itemBean=(ItemBean)iter.next();    foundItemBean=findItem(itemBean,items);    if (foundItemBean == null)     items.add(itemBean); else {      itemBean.updateQuantityToMove(foundItemBean,itemBean,ifAdd);      int finalQty=foundItemBean.getQtyToMove().intValue();      if (finalQty == 0) {        deleteItemFromList(items,foundItemBean.getProductId());      } else {        MMovementManager.setNoOfPack(ctx,foundItemBean);      }    }  }  return items;}  }
class C{  private void emitImplicitConversion(BasicType ptype,Class<?> pclass,Object arg){  assert (basicType(pclass) == ptype);  if (pclass == ptype.basicTypeClass() && ptype != L_TYPE)   return;switch (ptype) {case L_TYPE:    if (VerifyType.isNullConversion(Object.class,pclass,false)) {      if (PROFILE_LEVEL > 0)       emitReferenceCast(Object.class,arg);      return;    }  emitReferenceCast(pclass,arg);return;case I_TYPE:if (!VerifyType.isNullConversion(int.class,pclass,false)) emitPrimCast(ptype.basicTypeWrapper(),Wrapper.forPrimitiveType(pclass));return;}throw newInternalError("bad implicit conversion: tc=" + ptype + ": "+ pclass);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:02.562 -0500",hash_original_method="7D240E99D6029C73158519B20A0F21EF",hash_generated_method="94762D1C307E5FEE551265262BD093BF") public static byte[] unsafeArray(ByteBuffer b){  return ((HeapByteBuffer)b).backingArray;}  }
class C{  public synchronized void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  log.debug("write CV={} val={}",CV,val);  MrcMessage msg=MrcMessage.getPOM(addressLo,addressHi,CV,val);  useProgrammer(p);  _progRead=false;  progState=POMCOMMANDSENT;  _val=val;  _cv=CV;  startShortTimer();  tc.sendMrcMessage(msg);}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  private void createTestDatabaseEntities(List<String> subPartitionValues){  for (int businessObjectFormatVersion=INITIAL_FORMAT_VERSION; businessObjectFormatVersion < NUMBER_OF_FORMAT_VERSIONS; businessObjectFormatVersion++) {    businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(NAMESPACE,BDEF_NAME,FORMAT_USAGE_CODE,FORMAT_FILE_TYPE_CODE,businessObjectFormatVersion,FORMAT_DESCRIPTION,businessObjectFormatVersion == SECOND_FORMAT_VERSION,PARTITION_KEY);    for (int businessObjectDataVersion=INITIAL_DATA_VERSION; businessObjectDataVersion < NUMBER_OF_DATA_VERSIONS_PER_FORMAT_VERSION; businessObjectDataVersion++) {      businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(NAMESPACE,BDEF_NAME,FORMAT_USAGE_CODE,FORMAT_FILE_TYPE_CODE,businessObjectFormatVersion,PARTITION_VALUE,subPartitionValues,businessObjectDataVersion,businessObjectDataVersion == SECOND_DATA_VERSION,BDATA_STATUS);    }  }}  }
class C{  public void startUpload(final String hostname,final int port,final String uri,final int fileSizeOctet,final int reportInterval){  initReportTask(reportInterval,false);  mTask.setReportInterval(true);  startUpload(hostname,port,uri,fileSizeOctet);}  }
class C{  public long stop(){  long stopTime=System.currentTimeMillis();  long timeTaken=stopTime - startTime;  log.debug("TIMER STOPPED: " + name);  log.debug("TIME TAKEN: " + name + ": "+ (timeTaken / 1000.0));  return timeTaken;}  }
class C{  protected Object evaluateLeftEqualsRight(StructuredContent element,String lvalue,String rvalue){  return null;}  }
class C{  public ResponseTimeMetric createMetric(){  return new ResponseTimeMetric();}  }
class C{  @Override public String globalInfo(){  return "The Binary Relevance Method.\n" + "See also MULAN framework:\n" + "http://mulan.sourceforge.net";}  }
class C{  public void send(final OutputStream os) throws IOException {  PacketOutputStream pos=(PacketOutputStream)os;  pos.startPacket(0);  pos.write(Packet.COM_QUIT);  pos.finishPacketWithoutRelease(true);  pos.releaseBuffer();}  }
class C{  private void updateRadioLinks(){  m_advanceDataSetFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());  m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());  if (m_Exp != null) {    if (!m_GeneratorPropertyPanel.getEditorActive()) {      m_Exp.setAdvanceDataSetFirst(true);    } else {      m_Exp.setAdvanceDataSetFirst(m_advanceDataSetFirst.isSelected());    }  }}  }
class C{  public boolean isDefaultSelected(){  return p_isDefaultSelected;}  }
class C{  public boolean hasChecksumExt(){  return hasExtension(GphotoChecksum.class);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  private void computeXML(){  StringBuilder stringBuilder=new StringBuilder("<" + this.getElementName() + " xmlns='"+ this.getNamespace()+ "'>");  if (imageSha1 == null) {    stringBuilder.append("<photo/>");  } else {    stringBuilder.append("<photo>" + imageSha1 + "</photo>");  }  stringBuilder.append("</" + this.getElementName() + ">");  this.xmlString=stringBuilder.toString();}  }
class C{  public boolean hasExtensionsWithDeps(){  return !extensionsWithDeps.isEmpty();}  }
class C{  public static void muteCurrentOutAndErrStream(){  if (alreadyMuted) {    return;  }  ByteArrayOutputStream byteStream=new ByteArrayOutputStream();  PrintStream outStream=new PrintStream(byteStream);  latestOut=System.out;  latestErr=System.err;  System.setOut(outStream);  System.setErr(outStream);  alreadyMuted=true;}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  public SymMatrixF(String mname,int nrows){  super(mname,nrows);}  }
class C{  protected AbstractMatrix2D vDice(){  super.vDice();  int[] tmp=rowOffsets;  rowOffsets=columnOffsets;  columnOffsets=tmp;  this.isNoView=false;  return this;}  }
class C{  @RequestProcessing(value="/notifications/commented",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showCommentedNotifications(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject currentUser=userQueryService.getCurrentUser(request);  if (null == currentUser) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/notifications/commented.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final String userId=currentUser.optString(Keys.OBJECT_ID);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("commentedNotificationsCnt");  final int windowSize=Symphonys.getInt("commentedNotificationsWindowSize");  final JSONObject result=notificationQueryService.getCommentedNotifications(userId,pageNum,pageSize);  @SuppressWarnings("unchecked") final List<JSONObject> commentedNotifications=(List<JSONObject>)result.get(Keys.RESULTS);  dataModel.put(Common.COMMENTED_NOTIFICATIONS,commentedNotifications);  fillNotificationCount(userId,dataModel);  notificationMgmtService.makeRead(commentedNotifications);  final int recordCnt=result.getInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)recordCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public static String modifyDrmFwLockFileExtension(String filename){  if (filename == null) {    return null;  }  int extensionIndex=filename.lastIndexOf(".");  if (extensionIndex != -1) {    filename=filename.substring(0,extensionIndex);  }  return filename.concat(EXTENSION_INTERNAL_FWDL);}  }
class C{  final public int read(final byte[] a,final int aoff,final int alen) throws IOException {  if (alen == 0) {    return 0;  }  final int remaining=limit - off;  if (remaining == 0) {    return -1;  }  final int n=remaining < alen ? remaining : alen;  System.arraycopy(buf,this.off,a,aoff,n);  this.off+=n;  return n;}  }
class C{  public static LauncherBuilder create(){  return new LauncherBuilder();}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  @Override public Object callableStatement_getObject(FilterChain chain,CallableStatementProxy statement,int parameterIndex) throws SQLException {  Object obj=chain.callableStatement_getObject(statement,parameterIndex);  if (obj instanceof ResultSetProxy) {    resultSetOpenAfter((ResultSetProxy)obj);  }  return obj;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.644 -0400",hash_original_method="BDEAC3261A0130C537F32DBF8B23BF4C",hash_generated_method="862631A0B455984DC9E0554CAA320EE8") public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  public CodecException(String arg0){  super(arg0);}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  private void tred2(){  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V[i - 1][j];        V[i][j]=0.0;        V[j][i]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      if (f > 0) {        g=-g;      }      e[i]=scale * g;      h=h - f * g;      d[i - 1]=f - g;      for (int j=0; j < i; j++) {        e[j]=0.0;      }      for (int j=0; j < i; j++) {        f=d[j];        V[j][i]=f;        g=e[j] + V[j][j] * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V[k][j] * d[k];          e[k]+=V[k][j] * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V[k][j]-=(f * e[k] + g * d[k]);        }        d[j]=V[i - 1][j];        V[i][j]=0.0;      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V[n - 1][i]=V[i][i];    V[i][i]=1.0;    double h=d[i + 1];    if (h != 0.0) {      for (int k=0; k <= i; k++) {        d[k]=V[k][i + 1] / h;      }      for (int j=0; j <= i; j++) {        double g=0.0;        for (int k=0; k <= i; k++) {          g+=V[k][i + 1] * V[k][j];        }        for (int k=0; k <= i; k++) {          V[k][j]-=g * d[k];        }      }    }    for (int k=0; k <= i; k++) {      V[k][i + 1]=0.0;    }  }  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];    V[n - 1][j]=0.0;  }  V[n - 1][n - 1]=1.0;  e[0]=0.0;}  }
class C{  public JSONArray put(boolean value){  put(Boolean.valueOf(value));  return this;}  }
class C{  public String toString(){  return s[0] + "|" + s[1];}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          curv=Zxx * Zxx + 2 * Zxy * Zxy + Zyy * Zyy;          outputFile.setValue(row,col,curv * radToDeg * 100);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected double evaluate(int id1,int id2,Instance inst1) throws Exception {  if (id1 == id2) {    return 1.0;  } else {    double precalc1;    if (id1 == -1) {      precalc1=dotProd(inst1,inst1);    } else {      precalc1=m_kernelPrecalc[id1];    }    Instance inst2=m_data.instance(id2);    double squaredDifference=-2.0 * dotProd(inst1,inst2) + precalc1 + m_kernelPrecalc[id2];    double intermediate=m_factor * Math.sqrt(squaredDifference);    double result=1.0 / Math.pow(1.0 + intermediate * intermediate,getOmega());    return result;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public boolean isBusy(){  return (m_filterThread != null);}  }
class C{  @Override public void cleanup(){  page=null;  state=null;  stack=null;  globalDirtyRegion=null;  lastShape=null;}  }
class C{  void resizeSendBuffer(int new_size){  m_sbuf_len=new_size;  m_sbuf.setCapacity(new_size);}  }
class C{  private StringBuilder makeDescription(Cluster<?> c){  StringBuilder buf=new StringBuilder();  buf.append("<div>");  buf.append(c.getNameAutomatic());  buf.append("<br />");  buf.append("Size: " + c.size());  buf.append("</div>");  return buf;}  }
class C{  public static void checkAllocations(FileWriter fw) throws Exception {  for (  SootClass clazz : Scene.v().getApplicationClasses()) {    if (clazz.isInterface() || clazz.getName().equals(Harness.HARNESS_CLASS_NAME) || clazz.getName().equals("edu.mit.csail.droidsafe.DroidSafeCalls"))     continue;    if (API.v().isSystemClass(clazz))     continue;    for (    SootMethod meth : clazz.getMethods()) {      if (meth.isConcrete() && PTABridge.v().isReachableMethod(meth)) {        try {          checkInvokes(meth,meth.retrieveActiveBody(),fw);        } catch (        Exception ex) {          logger.info("Exception retrieving method body {}",ex);          continue;        }      }    }  }}  }
class C{  public NotificationObject(){  super();}  }
class C{  public <T>T addDesignation(Object entity,Class<T> concept) throws RepositoryException {  if (entity instanceof RDFObjectBehaviour) {    RDFObjectBehaviour support=(RDFObjectBehaviour)entity;    Object delegate=support.getBehaviourDelegate();    if (delegate != entity) {      return addDesignation(delegate,concept);    }  }  Resource resource=findResource(entity);  Set<URI> types=new HashSet<URI>(4);  getTypes(entity.getClass(),types);  addConcept(resource,concept,types);  RDFObject bean=of.createObject(resource,types);  assert assertConceptRecorded(bean,concept);  return (T)cache(bean);}  }
class C{  public ExecutionError(@Nullable String message,@Nullable Error cause){  super(message,cause);}  }
class C{  public DD trunc(){  if (isNaN())   return NaN;  if (isPositive())   return floor(); else   return ceil();}  }
class C{  public void reset(){  m_index=0;}  }
class C{  @Override protected void createMenus(JMenuBar menuBar,WindowInterface wi){  super.createMenus(menuBar,wi);  developmentMenu(menuBar,wi);  menuBar.add(new jmri.jmris.ServerMenu());}  }
class C{  public boolean shouldCheckWhitespace(){  return null != m_whiteSpaceInfoList;}  }
class C{  public Map<AppliedPTransform<?,?,?>,Map<StructuralKey<?>,FiredTimers>> extractFiredTimers(){  forceRefresh();  Map<AppliedPTransform<?,?,?>,Map<StructuralKey<?>,FiredTimers>> fired=watermarkManager.extractFiredTimers();  return fired;}  }
class C{  public int size(){  return _pos;}  }
class C{  public static String unbackQuoteChars(String string){  return unbackQuoteChars(string,new String[]{"\\\\","\\'","\\t","\\n","\\r","\\\""},new char[]{'\\','\'','\t','\n','\r','"'});}  }
class C{  public Negater(){  super();}  }
class C{  public final LC insets(String top,String left,String bottom,String right){  insets=new UnitValue[]{ConstraintParser.parseUnitValue(top,false),ConstraintParser.parseUnitValue(left,true),ConstraintParser.parseUnitValue(bottom,false),ConstraintParser.parseUnitValue(right,true)};  return this;}  }
class C{  private void launchZoom(final ZoomInfoFactory.ZoomInfo zoomInfo){  final int AD_Window_ID=zoomInfo.windowId;  final MQuery query=zoomInfo.query;  logger.info("AD_Window_ID=" + AD_Window_ID + " - "+ query);  AWindow frame=new AWindow();  if (!frame.initWindow(AD_Window_ID,query))   return;  AEnv.addToWindowManager(frame);  if (Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED)) {    AEnv.showMaximized(frame);  } else {    AEnv.showCenterScreen(frame);  }  frame=null;}  }
class C{  public static int compare(Date left,boolean right){  return compare(left,right ? 1D : 0D);}  }
class C{  public int readNext(int offset,boolean ignoreComments) throws CoreException {  setOffset(offset);  return readNext(ignoreComments);}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragEnter(dsde);  }  getDragSource().processDragEnter(dsde);  updateCurrentCursor(getSourceActions(),dsde.getTargetActions(),ENTER);}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  x=in.readFloat();  y=in.readFloat();}  }
class C{  @Override public int chooseCapabilities(CapabilitiesImmutable desired,List<? extends CapabilitiesImmutable> available,int windowSystemRecommendedChoice){  if (desired instanceof GLCapabilities && ((GLCapabilities)desired).getStereo()) {    return this.chooseStereoCapabilities(desired,available,windowSystemRecommendedChoice);  }  return super.chooseCapabilities(desired,available,windowSystemRecommendedChoice);}  }
class C{  public void addTreeSelectionListener(TreeSelectionListener x){  listenerList.add(TreeSelectionListener.class,x);}  }
class C{  private void requestContactCapabilities(ContactId contact) throws PayloadException, NetworkException, ContactManagerException {  Capabilities capabilities=mContatManager.getContactCapabilities(contact);  boolean locActivated=sLogger.isActivated();  if (capabilities == null) {    if (locActivated) {      sLogger.debug("No capability exist for ".concat(contact.toString()));    }    mImsService.getOptionsManager().requestCapabilities(contact);    return;  }  if (isCapabilityRefreshRequired(capabilities.getTimestampOfLastResponse(),mRcsSettings)) {    if (locActivated) {      sLogger.debug("Capabilities have expired for ".concat(contact.toString()));    }    if (capabilities.isPresenceDiscoverySupported()) {      mImsService.getAnonymousFetchManager().requestCapabilities(contact);    } else {      mImsService.getOptionsManager().requestCapabilities(contact);    }  } else {    if (locActivated) {      sLogger.debug("Capabilities exist for ".concat(contact.toString()));    }  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  protected void configureTransport(){  TransportsConfiguration trpConfig=YAMLTransportConfigurationBuilder.build();  Set<ListenerConfiguration> listenerConfigurations=trpConfig.getListenerConfigurations();  NettyTransportContextHolder nettyTransportContextHolder=NettyTransportContextHolder.getInstance();  nettyTransportContextHolder.setHandlerExecutor(new HandlerExecutor());  for (  ListenerConfiguration listenerConfiguration : listenerConfigurations) {    NettyListener listener=new NettyListener(listenerConfiguration);    transportManager.registerTransport(listener);    nettyTransportContextHolder.setMessageProcessor(new MSF4JMessageProcessor(listenerConfiguration.getId(),msRegistry));  }}  }
class C{  public static void transferContent(Player player,List<TransferContent> contents){  if (rpman != null) {    List<TransferContent> allContent=new LinkedList<TransferContent>(contents);    List<TransferContent> temp=dataProvider.getData(player.getClientVersion());    if (temp != null) {      allContent.addAll(temp);    }    rpman.transferContent(player,allContent);  } else {    logger.warn("rpmanager not found");  }}  }
class C{  private void limpar(){  Campo.limpar(txtObservacao);}  }
class C{  private void fixSpannedWithSpaces(SpannableStringBuilder builder,int widthMeasureSpec,int heightMeasureSpec){  long startFix=System.currentTimeMillis();  FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightMeasureSpec);  if (result.fixed) {    removeUnneededSpaces(widthMeasureSpec,heightMeasureSpec,builder,result);  } else {    fallbackToString(widthMeasureSpec,heightMeasureSpec);  }  if (BuildConfig.DEBUG) {    long fixDuration=System.currentTimeMillis() - startFix;    Log.d(HtmlTextView.TAG,"fixSpannedWithSpaces() duration in ms: " + fixDuration);  }}  }
class C{  public static InputStream inputStream(String uri) throws IOException {  if (uri.equals("-")) {    return ForbiddenOk.systemDotIn();  }  InputStream stream;  if (!uri.contains(":/")) {    stream=new BufferedInputStream(new FileInputStream(uri));  } else {    stream=URI.create(uri).toURL().openStream();  }  if (uri.endsWith(".gz")) {    stream=new GZIPInputStream(stream);  }  return stream;}  }
class C{  public NoVocabulary(){}  }
class C{  public void deleteRecords(){  List<Map> results=db.view("_all_docs").includeDocs(true).query(Map.class);  int recordsDeleted=0;  for (  Map record : results) {    String id=(String)record.get("_id");    Response response=db.remove(record);    id=response.getId();    LOGGER.info("DELETE: Record with the following _id was deleted: " + id);    recordsDeleted++;  }  LOGGER.info("Number of records to deleted: " + recordsDeleted);}  }
class C{  @Override public void release() throws Exception {  if (!locksToDelete.isEmpty() || lockColumn != null) {    MutationBatch m=keyspace.prepareMutationBatch().setConsistencyLevel(consistencyLevel);    fillReleaseMutation(m,false);    m.execute();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.230 -0500",hash_original_method="0D6C1F8897C50F2325542C54551DAF6A",hash_generated_method="C0F44909E0B5955DCDF981ADDD47B6F6") private String pickEncoding(InputSource inputSource){  Reader reader=inputSource.getCharacterStream();  if (reader != null) {    return CHARACTER_ENCODING;  }  String encoding=inputSource.getEncoding();  return encoding == null ? DEFAULT_ENCODING : encoding;}  }
class C{  protected void insertText(final String text,final NotificationType type){  ChatTextSink dest=new ChatTextSink(textPane.getDocument());  StyleSet set=new StyleSet(StyleContext.getDefaultStyleContext(),getStyle(type.getColor(),type.getStyleDescription()));  set.setAttribute(StyleConstants.Foreground,type.getColor());  formatter.format(text,set,dest);}  }
class C{  protected final void LONG_MUL(Instruction s,RegisterOperand result,Operand value1,Operand value2){  if (value2.isRegister()) {    if (VM.VerifyAssertions)     opt_assert(Binary.getResult(s).similar(result) && Binary.getVal1(s).similar(value1) && Binary.getVal2(s).similar(value2));    EMIT(s);  } else {    if ((value2.similar(result)) || value1.isLongConstant()) {      Operand temp=value1;      value1=value2;      value2=temp;    }    if (VM.VerifyAssertions)     opt_assert(value1.isRegister() && value2.isLongConstant());    Register lhsReg=result.getRegister();    Register lowlhsReg=regpool.getSecondReg(lhsReg);    LongConstantOperand rhs2=(LongConstantOperand)value2;    Register rhsReg1=value1.asRegister().getRegister();    Register lowrhsReg1=regpool.getSecondReg(rhsReg1);    int high2=rhs2.upper32();    int low2=rhs2.lower32();    if (high2 == -1) {      if (low2 == 0) {        if (VM.VerifyAssertions)         opt_assert(lhsReg != lowrhsReg1);        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,new RegisterOperand(lhsReg,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0))));      } else       if (low2 == 1) {        if (lowlhsReg != lowrhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        }        if (lhsReg != rhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SUB,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowlhsReg,TypeReference.Int))));      } else {        if (lhsReg != rhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(lhsReg,TypeReference.Int),IC(low2))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SUB,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),IC(low2))));        EMIT(CPOS(s,MIR_Multiply.create(IA32_MUL,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));      }    } else     if (high2 == 0) {      if (low2 == -1) {        Register tmp=regpool.getInteger();        if (lowlhsReg != lowrhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,new RegisterOperand(lowlhsReg,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));      } else {        if (lhsReg != rhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(lhsReg,TypeReference.Int),IC(low2))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),IC(low2))));        EMIT(CPOS(s,MIR_Multiply.create(IA32_MUL,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));      }    } else     if (high2 == 1) {      if (low2 == -1) {        Register tmp=regpool.getInteger();        if (lowlhsReg != lowrhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));        EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,new RegisterOperand(lowlhsReg,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));      } else       if (low2 == 0) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0))));      } else       if (low2 == 1) {        if (lowlhsReg != lowrhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        }        if (lhsReg != rhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowlhsReg,TypeReference.Int))));      } else {        if (lhsReg != rhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(lhsReg,TypeReference.Int),IC(low2))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),IC(low2))));        EMIT(CPOS(s,MIR_Multiply.create(IA32_MUL,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));      }    } else {      if (low2 == -1) {        Register tmp=regpool.getInteger();        if (lowlhsReg != lowrhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(tmp,TypeReference.Int),IC(1))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(tmp,TypeReference.Int),IC(high2))));        EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,new RegisterOperand(lowlhsReg,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));      } else       if (low2 == 0) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(lhsReg,TypeReference.Int),IC(high2))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0))));      } else       if (low2 == 1) {        if (lowlhsReg != lowrhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        }        if (lhsReg != rhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        Register tmp=regpool.getInteger();        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(tmp,TypeReference.Int),IC(high2))));        EMIT(CPOS(s,MIR_Move.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));      } else {        if (lhsReg != rhsReg1) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(lhsReg,TypeReference.Int),IC(low2))));        Register tmp=regpool.getInteger();        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_IMUL2,new RegisterOperand(tmp,TypeReference.Int),IC(high2))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),IC(low2))));        EMIT(CPOS(s,MIR_Multiply.create(IA32_MUL,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));      }    }  }}  }
class C{  private void clearTenantACLs(Class<? extends DataObjectWithACLs> clazz,URI tenantId,String specifier){  PermissionsKey permissionKey;  if (StringUtils.isNotBlank(specifier)) {    permissionKey=new PermissionsKey(PermissionsKey.Type.TENANT,tenantId.toString(),specifier);  } else {    permissionKey=new PermissionsKey(PermissionsKey.Type.TENANT,tenantId.toString());  }  URIQueryResultList resultURIs=new URIQueryResultList();  Constraint aclConstraint=ContainmentPermissionsConstraint.Factory.getObjsWithPermissionsConstraint(permissionKey.toString(),clazz);  _dbClient.queryByConstraint(aclConstraint,resultURIs);  List<URI> ids=new ArrayList<URI>();  for (  URI result : resultURIs) {    ids.add(result);  }  Iterator<? extends DataObjectWithACLs> objectIter=_dbClient.queryIterativeObjects(clazz,ids);  if ((objectIter != null) && (objectIter.hasNext())) {    List<DataObjectWithACLs> objectList=new ArrayList<DataObjectWithACLs>();    while (objectIter.hasNext()) {      objectList.add(objectIter.next());    }    for (    DataObjectWithACLs object : objectList) {      _log.info("Removing USE ACL for deleted subtenant {} from object {}",tenantId,object.getId());      object.removeAcl(permissionKey.toString(),ACL.USE.toString());    }    _dbClient.updateAndReindexObject(objectList);  }}  }
class C{  public SignFromHallOfFameLoader(Sign sign,String introduction,String fametype,int max,boolean ascending,boolean lineBreaks){  this.sign=sign;  this.introduction=introduction;  this.handle=new ResultHandle();  this.lineBreaks=lineBreaks;  DBCommand command=new ReadCharactersFromHallOfFameCommand(fametype,max,ascending);  DBCommandQueue.get().enqueueAndAwaitResult(command,handle);}  }
class C{  VerticalAction(String name,TextAction verticalAction,TextAction beginEndAction){  super(name);  this.verticalAction=verticalAction;  this.beginEndAction=beginEndAction;}  }
class C{  public void disable(){  toState(State.DISABLED);  _firstSuccessTime=0;}  }
class C{  public static void runModule(String module,String version,String runClass,String... arguments){  instance().run(module,version,runClass,arguments);}  }
class C{  public ParameterAnnotationsAttribute(ConstPool cp,String attrname,byte[] info){  super(cp,attrname,info);}  }
class C{  public boolean tryConsume(final char c){  if (startsWith(c)) {    skipChars(1);    return true;  }  return false;}  }
class C{  public static BigDecimal adjustQty(MCost cost,BigDecimal Qty,Timestamp dateAcct,String trxName){  if (Qty.signum() == 0)   return Env.ZERO;  MCostQueue[] costQ=getQueue(cost,dateAcct,trxName);  BigDecimal costAmt=Env.ZERO;  BigDecimal remainingQty=Qty;  for (int i=0; i < costQ.length; i++) {    MCostQueue queue=costQ[i];    if (remainingQty.signum() < 0) {      BigDecimal oldQty=queue.getCurrentQty();      BigDecimal newQty=oldQty.subtract(remainingQty);      queue.setCurrentQty(newQty);      queue.saveEx();      s_log.fine("Qty=" + remainingQty + "(!), ASI="+ queue.getM_AttributeSetInstance_ID()+ " - "+ oldQty+ " -> "+ newQty);      BigDecimal lastPrice=queue.getCurrentCostPrice();      costAmt=costAmt.add(lastPrice.multiply(remainingQty));      return costAmt;    }    if (queue.getCurrentQty().signum() > 0) {      BigDecimal reduction=remainingQty;      if (reduction.compareTo(queue.getCurrentQty()) > 0)       reduction=queue.getCurrentQty();      BigDecimal oldQty=queue.getCurrentQty();      BigDecimal newQty=oldQty.subtract(reduction);      queue.setCurrentQty(newQty);      queue.saveEx();      s_log.fine("Qty=" + reduction + ", ASI="+ queue.getM_AttributeSetInstance_ID()+ " - "+ oldQty+ " -> "+ newQty);      remainingQty=remainingQty.subtract(reduction);      BigDecimal lastPrice=queue.getCurrentCostPrice();      costAmt=costAmt.add(reduction.multiply(lastPrice));      if (remainingQty.signum() == 0) {        return costAmt;      }    }  }  s_log.fine("RemainingQty=" + remainingQty);  if (remainingQty.signum() != 0) {    throw new CostInsufficientQtyException(cost.getM_Product_ID(),cost.getM_AttributeSetInstance_ID(),Qty,remainingQty);  }  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.677 -0500",hash_original_method="B4C70E997EC0CC2FE1FB1672C0894635",hash_generated_method="21CC7EDAE46841C772E9773A5857CEF0") private static boolean matchTrunkPrefix(String a,int len){  boolean found;  found=false;  for (int i=0; i < len; i++) {    char c=a.charAt(i);    if (c == '0' && !found) {      found=true;    } else     if (isNonSeparator(c)) {      return false;    }  }  return found;}  }
class C{  public boolean useHostHarvester(){  if (useHostHarvester == null) {    useHostHarvester=StackProperties.getBoolean(StackProperties.USE_DYNAMIC_HOST_HARVESTER,true);  }  return useHostHarvester;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public static Array trimItems(Array arr) throws PageException {  Key[] keys=CollectionUtil.keys(arr);  for (int i=0; i < keys.length; i++) {    arr.setEL(keys[i],Caster.toString(arr.get(keys[i],null)).trim());  }  return arr;}  }
class C{  public SymmetricDirichlet(double alpha,int dim){  setAlpha(alpha);  setDimension(dim);}  }
class C{  public static Double createDouble(final String str){  if (str == null) {    return null;  }  return Double.valueOf(str);}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(getGraphics2D(g));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static float lerp(float a,float b,float t){  return a + (b - a) * t;}  }
class C{  public String[] validBaudRates(){  return new String[]{"19,200 bps"};}  }
class C{  public void onSnackbarSwiped(Snackbar snackbar){}  }
class C{  private static boolean equalsHandlesNulls(Object a,Object b){  return (a == null) ? (b == null) : a.equals(b);}  }
class C{  private void addUserGroupsToUserGroupList(BasePermissionsHelper permissionsHelper,String domain,StorageOSUserDAO storageOSUser){  if (StringUtils.isBlank(domain)) {    _log.error("Invalid domain {} to search user group",domain);    return;  }  List<UserGroup> userGroupList=permissionsHelper.getAllUserGroupForDomain(domain);  if (CollectionUtils.isEmpty(userGroupList)) {    _log.debug("Cannot find user mappings for the domain {}",domain);    return;  }  for (  UserGroup userGroup : userGroupList) {    if (userGroup != null) {      if (permissionsHelper.matchUserAttributesToUserGroup(storageOSUser,userGroup)) {        _log.debug("Adding user group {} to the user",userGroup.getLabel());        storageOSUser.addGroup(userGroup.getLabel());      }    } else {      _log.info("Invalid user group returned while searching db with domain {}",domain);    }  }}  }
class C{  public boolean inIncludeSegments(){  if (getSegmentNumberRelativeToGroup() < SegmentedTimeline.this.segmentsIncluded) {    return !inExceptionSegments();  } else {    return false;  }}  }
class C{  public Builder withSsl(){  return withSsl(true);}  }
class C{  public Point(Coordinate coordinate,PrecisionModel precisionModel,int SRID){  super(new GeometryFactory(precisionModel,SRID));  init(getFactory().getCoordinateSequenceFactory().create(coordinate != null ? new Coordinate[]{coordinate} : new Coordinate[]{}));}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if ("editorClosing".equals(e.getPropertyName())) {    firePropertyChange("editorClosing",null,getName());  }  if ("closeFrame".equals(e.getPropertyName())) {    firePropertyChange("closeFrame",null,null);  }  if ("modelChanged".equals(e.getPropertyName())) {    firePropertyChange("modelChanged",e.getOldValue(),e.getNewValue());  }}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public void add(IPoint p){  points.add(p);}  }
class C{  public void adaptHeightToChildren(){  DividableGridAdapter adapter=(DividableGridAdapter)getAdapter();  if (adapter != null) {    int height=getPaddingTop() + getPaddingBottom();    for (int i=0; i < adapter.getCount(); i+=adapter.getColumnCount()) {      AbstractItem item=adapter.getItem(i);      if (item instanceof Divider) {        height+=getResources().getDimensionPixelSize(TextUtils.isEmpty(item.getTitle()) ? R.dimen.bottom_sheet_divider_height : R.dimen.bottom_sheet_divider_title_height);      } else {        height+=getResources().getDimensionPixelSize(adapter.getStyle() == BottomSheet.Style.GRID ? R.dimen.bottom_sheet_grid_item_size : R.dimen.bottom_sheet_list_item_height);      }    }    ViewGroup.LayoutParams params=getLayoutParams();    params.height=height;    setLayoutParams(params);    requestLayout();  }}  }
class C{  public KeySet createFromParcel(Parcel source){  return readFromParcel(source);}  }
class C{  public static void loadDatastores(TestEnvironment cloudstore,int numDatastores) throws Throwable {  for (int i=0; i < numDatastores; i++) {    DatastoreService.State datastore=new DatastoreService.State();    String datastoreId=new UUID(0,i).toString();    datastore.id=datastoreId;    datastore.name=datastoreId;    datastore.documentSelfLink=datastoreId;    datastore.type="SHARED_VMFS";    datastore.tags=new HashSet<>();    Operation result=cloudstore.sendPostAndWait(DatastoreServiceFactory.SELF_LINK,datastore);    assertThat(result.getStatusCode(),is(200));    logger.debug("Created a datastore document: {}",Utils.toJson(false,false,datastore));  }}  }
class C{  private static void printDataTable(GaData gaData){  if (gaData.getTotalResults() > 0) {    System.out.println("Data Table:");    for (    ColumnHeaders header : gaData.getColumnHeaders()) {      System.out.format("%-32s",header.getName());    }    System.out.println();    for (    List<String> rowValues : gaData.getRows()) {      for (      String value : rowValues) {        System.out.format("%-32s",value);      }      System.out.println();    }  } else {    System.out.println("No data");  }}  }
class C{  public T download(String url,File target,AjaxCallback<File> cb){  cb.url(url).type(File.class).targetFile(target);  return ajax(cb);}  }
class C{  public DefaultTableModel(int rowCount,int columnCount){  this(newVector(columnCount),rowCount);}  }
class C{  public void send(String message){}  }
class C{  protected boolean redirectEdgeSource(E edge,V node){  if (!(containsVertex(node) && containsEdge(edge)))   throw new IllegalArgumentException("edge and node must be present in this graph");  V edgeTarget=graph.getEdgeTarget(edge);  if (!graph.removeEdge(edge))   return false;  if (!addEdge(node,edgeTarget,edge))   return false;  return true;}  }
class C{  public boolean isAssignableFrom(Class cl){  return _rawClass.isAssignableFrom(cl);}  }
class C{  public static long selectIncludingZeros(final long[] arr,final int pivot){  int arrSize=arr.length;  int adj=pivot - 1;  return select(arr,0,arrSize - 1,adj);}  }
class C{  protected void compareByteArrays(byte[] actual,byte[] expected){  assertEquals(actual.length,expected.length);  int length=actual.length;  for (int i=0; i < length; ++i) {    if (actual[i] != expected[i]) {      fail("Byte arrays are not equal.");    }  }}  }
class C{  public DebugAddress(){  super(Options.set,"Debug Address","Specify an address at runtime for use in debugging",Address.zero());}  }
class C{  public File(String pathname){  if (pathname == null) {    throw new NullPointerException();  }  this.path=fs.normalize(pathname);  this.prefixLength=fs.prefixLength(this.path);}  }
class C{  public double maxY(){  return Math.max(p0.y,p1.y);}  }
class C{  private static <T>List<T> castList(List<?> list,Class<T> castTo){  List<T> casted=new ArrayList<T>(list.size());  for (  Object object : list) {    casted.add(castTo.cast(object));  }  return Collections.unmodifiableList(casted);}  }
class C{  void processMessage(final RegistrationMessage registrationMessage) throws Exception {  final Map<String,Object> model=new HashMap<String,Object>();  model.put("password",registrationMessage.getPassword());  model.put("authToken",registrationMessage.getAuthToken());  model.put("salutation",registrationMessage.getSalutation());  model.put("firstName",registrationMessage.getFirstname());  model.put("lastName",registrationMessage.getLastname());  model.put("middleName",registrationMessage.getMiddlename());  model.put("shopUrl",registrationMessage.getShopUrl());  model.put("shopName",registrationMessage.getShopName());  model.put("additionalData",registrationMessage.getAdditionalData());  final Mail mail=mailService.getGenericDao().getEntityFactory().getByIface(Mail.class);  mailComposer.composeMessage(mail,registrationMessage.getShopCode(),registrationMessage.getLocale(),registrationMessage.getMailTemplatePathChain(),registrationMessage.getTemplateName(),registrationMessage.getShopMailFrom(),registrationMessage.getEmail(),null,null,model);  mailService.create(mail);}  }
class C{  public void compress(){  addArg("compress");}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  @Override public void onPurchaseUpdatesResponse(final PurchaseUpdatesResponse purchaseUpdatesResponse){  Log.v(TAG,"onPurchaseUpdatesRecived recieved: Response -" + purchaseUpdatesResponse);  Log.v(TAG,"PurchaseUpdatesRequestStatus:" + purchaseUpdatesResponse.getPurchaseUpdatesRequestStatus());  Log.v(TAG,"RequestID:" + purchaseUpdatesResponse.getRequestId());  new PurchaseUpdatesAsyncTask().execute(purchaseUpdatesResponse);}  }
class C{  public void optimize(){  if (dontOptimize) {    lp_solve_objective_value=0;    lp_solve_solution=new double[numVars];    optimized=true;  } else {    try {      File temp=File.createTempFile("ilp-",".mps");      if (dontDeleteFiles)       System.err.println("[IntPgrm] " + temp.getPath());      writeProgram(temp);      executeLPSolve(temp.getAbsolutePath());      if (!dontDeleteFiles)       temp.delete();      optimized=true;    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text") {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public static boolean isMacOS(){  return osname.startsWith("Mac");}  }
class C{  public EditorPaneHTMLHelp(String initialURL,String title){  this(initialURL);  setTitle(title);}  }
class C{  public static void reloadBlacklists(){  final List<BlacklistFile> blacklistFiles=new ArrayList<BlacklistFile>(BlacklistType.values().length);  for (  final BlacklistType supportedBlacklistType : BlacklistType.values()) {    final BlacklistFile blFile=new BlacklistFile(switchboard.getConfig(supportedBlacklistType.toString() + ".BlackLists",switchboard.getConfig("BlackLists.DefaultList","url.default.black")),supportedBlacklistType);    blacklistFiles.add(blFile);  }  Switchboard.urlBlacklist.loadList(blacklistFiles.toArray(new BlacklistFile[blacklistFiles.size()]),"/");  SearchEventCache.cleanupEvents(true);}  }
class C{  public StepObject(boolean deleted){  this.deleted=deleted;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CThreadInformationTableRenderer(final JTable table){  m_table=table;}  }
class C{  private boolean updatePhotoIcon(PhotoIcon photoIcon) throws PayloadException, NetworkException {  boolean result=false;  PhotoIcon currentPhoto=mPresenceInfo.getPhotoIcon();  if ((photoIcon != null) && (photoIcon.getEtag() == null)) {    long maxSize=mRcsSettings.getMaxPhotoIconSize();    if ((maxSize != 0) && (photoIcon.getSize() > maxSize)) {      if (sLogger.isActivated()) {        sLogger.debug("Max photo size achieved");      }      return false;    }    if (sLogger.isActivated()) {      sLogger.info("Upload the photo-icon");    }    result=uploadPhotoIcon(photoIcon);  } else   if ((photoIcon == null) && (currentPhoto != null)) {    if (sLogger.isActivated()) {      sLogger.info("Delete the photo-icon");    }    result=deletePhotoIcon();  } else {    result=true;  }  return result;}  }
class C{  static int findLimit(InputStream in){  if (in instanceof LimitedInputStream) {    return ((LimitedInputStream)in).getRemaining();  } else   if (in instanceof ASN1InputStream) {    return ((ASN1InputStream)in).getLimit();  } else   if (in instanceof ByteArrayInputStream) {    return ((ByteArrayInputStream)in).available();  } else   if (in instanceof FileInputStream) {    try {      FileChannel channel=((FileInputStream)in).getChannel();      long size=(channel != null) ? channel.size() : Integer.MAX_VALUE;      if (size < Integer.MAX_VALUE) {        return (int)size;      }    } catch (    IOException e) {    }  }  if (MAX_MEMORY > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  }  return (int)MAX_MEMORY;}  }
class C{  public BackwardFlowAnalysis(DirectedGraph<N> graph){  super(graph);}  }
class C{  public static ClusterState load(Integer version,byte[] bytes,Set<String> liveNodes,String znode){  if (bytes == null || bytes.length == 0) {    return new ClusterState(version,liveNodes,Collections.<String,DocCollection>emptyMap());  }  Map<String,Object> stateMap=(Map<String,Object>)Utils.fromJSON(bytes);  Map<String,CollectionRef> collections=new LinkedHashMap<>(stateMap.size());  for (  Entry<String,Object> entry : stateMap.entrySet()) {    String collectionName=entry.getKey();    DocCollection coll=collectionFromObjects(collectionName,(Map<String,Object>)entry.getValue(),version,znode);    collections.put(collectionName,new CollectionRef(coll));  }  return new ClusterState(liveNodes,collections,version);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public boolean isImplicitUpperBoundInEffect(){  return (((this.getDeclaredUpperBound() == null) && (this.getDeclaredLowerBound() == null)) && (this.getDeclaredOrImplicitUpperBound() != null));}  }
class C{  public SnmpPdu decodeSnmpPdu() throws SnmpStatusException {  SnmpScopedPduPacket pdu=null;  BerDecoder bdec=new BerDecoder(data);  try {    int type=bdec.getTag();    bdec.openSequence(type);switch (type) {case pduGetRequestPdu:case pduGetNextRequestPdu:case pduInformRequestPdu:case pduGetResponsePdu:case pduSetRequestPdu:case pduV2TrapPdu:case pduReportPdu:      SnmpScopedPduRequest reqPdu=new SnmpScopedPduRequest();    reqPdu.requestId=bdec.fetchInteger();  reqPdu.setErrorStatus(bdec.fetchInteger());reqPdu.setErrorIndex(bdec.fetchInteger());pdu=reqPdu;break;case pduGetBulkRequestPdu:SnmpScopedPduBulk bulkPdu=new SnmpScopedPduBulk();bulkPdu.requestId=bdec.fetchInteger();bulkPdu.setNonRepeaters(bdec.fetchInteger());bulkPdu.setMaxRepetitions(bdec.fetchInteger());pdu=bulkPdu;break;default :throw new SnmpStatusException(snmpRspWrongEncoding);}pdu.type=type;pdu.varBindList=decodeVarBindList(bdec);bdec.closeSequence();} catch (BerException e) {if (SNMP_LOGGER.isLoggable(Level.FINEST)) {SNMP_LOGGER.logp(Level.FINEST,SnmpV3Message.class.getName(),"decodeSnmpPdu","BerException",e);}throw new SnmpStatusException(snmpRspWrongEncoding);}pdu.address=address;pdu.port=port;pdu.msgFlags=msgFlags;pdu.version=version;pdu.msgId=msgId;pdu.msgMaxSize=msgMaxSize;pdu.msgSecurityModel=msgSecurityModel;pdu.contextEngineId=contextEngineId;pdu.contextName=contextName;pdu.securityParameters=securityParameters;if (SNMP_LOGGER.isLoggable(Level.FINER)) {final StringBuilder strb=new StringBuilder().append("Unmarshalled PDU : \n").append("type : ").append(pdu.type).append("\n").append("version : ").append(pdu.version).append("\n").append("requestId : ").append(pdu.requestId).append("\n").append("msgId : ").append(pdu.msgId).append("\n").append("msgMaxSize : ").append(pdu.msgMaxSize).append("\n").append("msgFlags : ").append(pdu.msgFlags).append("\n").append("msgSecurityModel : ").append(pdu.msgSecurityModel).append("\n").append("contextEngineId : ").append(pdu.contextEngineId).append("\n").append("contextName : ").append(pdu.contextName).append("\n");SNMP_LOGGER.logp(Level.FINER,SnmpV3Message.class.getName(),"decodeSnmpPdu",strb.toString());}return pdu;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    for (    XmlFragment frag : fragments) {      frag.visit(v);    }  }}  }
class C{  public static <T,U>U map(T primary,Function<? super T,? extends U> mapper){  if (primary == null) {    return null;  } else {    return mapper.apply(primary);  }}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - dpToPx(4,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  protected AssociationResponse(AssociationRequest assocReq,Association assoc) throws AssociationException {  if (DEBUG)   _log.debug("Creating association response, type: " + assocReq.getType() + " association handle: "+ assoc.getHandle());  if (assocReq.isVersion2())   set("ns",OPENID2_NS);  AssociationSessionType type=assocReq.getType();  setType(type);  setAssocHandle(assoc.getHandle());  Long expiryIn=new Long((assoc.getExpiry().getTime() - System.currentTimeMillis()) / 1000);  setExpire(expiryIn);  if (type.getHAlgorithm() != null) {    DiffieHellmanSession dhSess=DiffieHellmanSession.create(type,assocReq.getDhModulus(),assocReq.getDhGen());    setPublicKey(dhSess.getPublicKey());    setMacKeyEnc(dhSess.encryptMacKey(assoc.getMacKey().getEncoded(),assocReq.getDhPublicKey()));  } else {    setMacKey(new String(Base64.encodeBase64(assoc.getMacKey().getEncoded())));  }}  }
class C{  public void configure(String mimeType,int channelCount,int sampleRate,int pcmEncoding,int specifiedBufferSize){  int channelConfig;switch (channelCount) {case 1:    channelConfig=AudioFormat.CHANNEL_OUT_MONO;  break;case 2:channelConfig=AudioFormat.CHANNEL_OUT_STEREO;break;case 3:channelConfig=AudioFormat.CHANNEL_OUT_STEREO | AudioFormat.CHANNEL_OUT_FRONT_CENTER;break;case 4:channelConfig=AudioFormat.CHANNEL_OUT_QUAD;break;case 5:channelConfig=AudioFormat.CHANNEL_OUT_QUAD | AudioFormat.CHANNEL_OUT_FRONT_CENTER;break;case 6:channelConfig=AudioFormat.CHANNEL_OUT_5POINT1;break;case 7:channelConfig=AudioFormat.CHANNEL_OUT_5POINT1 | AudioFormat.CHANNEL_OUT_BACK_CENTER;break;case 8:channelConfig=C.CHANNEL_OUT_7POINT1_SURROUND;break;default :throw new IllegalArgumentException("Unsupported channel count: " + channelCount);}boolean passthrough=!MimeTypes.AUDIO_RAW.equals(mimeType);int sourceEncoding;if (passthrough) {sourceEncoding=getEncodingForMimeType(mimeType);} else if (pcmEncoding == C.ENCODING_PCM_8BIT || pcmEncoding == C.ENCODING_PCM_16BIT || pcmEncoding == C.ENCODING_PCM_24BIT || pcmEncoding == C.ENCODING_PCM_32BIT) {sourceEncoding=pcmEncoding;} else {throw new IllegalArgumentException("Unsupported PCM encoding: " + pcmEncoding);}if (isInitialized() && this.sourceEncoding == sourceEncoding && this.sampleRate == sampleRate && this.channelConfig == channelConfig) {return;}reset();this.sourceEncoding=sourceEncoding;this.passthrough=passthrough;this.sampleRate=sampleRate;this.channelConfig=channelConfig;targetEncoding=passthrough ? sourceEncoding : C.ENCODING_PCM_16BIT;pcmFrameSize=2 * channelCount;if (specifiedBufferSize != 0) {bufferSize=specifiedBufferSize;} else if (passthrough) {if (targetEncoding == C.ENCODING_AC3 || targetEncoding == C.ENCODING_E_AC3) {bufferSize=(int)(PASSTHROUGH_BUFFER_DURATION_US * 80 * 1024 / C.MICROS_PER_SECOND);} else {bufferSize=(int)(PASSTHROUGH_BUFFER_DURATION_US * 192 * 1024 / C.MICROS_PER_SECOND);}} else {int minBufferSize=android.media.AudioTrack.getMinBufferSize(sampleRate,channelConfig,targetEncoding);Assertions.checkState(minBufferSize != android.media.AudioTrack.ERROR_BAD_VALUE);int multipliedBufferSize=minBufferSize * BUFFER_MULTIPLICATION_FACTOR;int minAppBufferSize=(int)durationUsToFrames(MIN_BUFFER_DURATION_US) * pcmFrameSize;int maxAppBufferSize=(int)Math.max(minBufferSize,durationUsToFrames(MAX_BUFFER_DURATION_US) * pcmFrameSize);bufferSize=multipliedBufferSize < minAppBufferSize ? minAppBufferSize : multipliedBufferSize > maxAppBufferSize ? maxAppBufferSize : multipliedBufferSize;}bufferSizeUs=passthrough ? C.UNKNOWN_TIME_US : framesToDurationUs(pcmBytesToFrames(bufferSize));}  }
class C{  public void testFloatValueNegRounded2(){  byte[] a={-128,1,2,-128,4,5,60,23,1,-3,-5};  int aSign=-1;  float result=-1.5474728E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public int capacity(){  return 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (s != null && s.length() > 0)   newMask=newMask | Agent.KEYWORD_MASK; else   newMask=newMask & (~Agent.KEYWORD_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),a.getPR(),a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),s);    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  private String compute(Boolean left,String right){  if (left == null && right == null) {    return null;  }  return (left == null ? "" : left) + (right == null ? "" : right);}  }
class C{  protected void processElement(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  if (ch != '!') {    XMLUtil.skipTag(reader);    return;  }  str=XMLUtil.read(reader,'%');  ch=str.charAt(0);switch (ch) {case '-':    XMLUtil.skipComment(reader);  break;case '[':this.processConditionalSection(reader,entityResolver);break;case 'E':this.processEntity(reader,entityResolver);break;case 'A':this.processAttList(reader,entityResolver);break;default :XMLUtil.skipTag(reader);}}  }
class C{  @Override public boolean isAllowedToInviteParticipant(ContactId participant) throws RemoteException {  if (participant == null) {    throw new ServerApiIllegalArgumentException("participant must not be null!");  }  if (!isAllowedToInviteParticipants()) {    return false;  }  try {    return isParticipantEligibleToBeInvited(participant) && isParticipantCapableToBeInvited(participant);  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private static String sniffCharacterEncoding(byte[] content){  int length=content.length < CHUNK_SIZE ? content.length : CHUNK_SIZE;  String str="";  try {    str=new String(content,0,length,Charset.forName("ASCII").toString());  } catch (  UnsupportedEncodingException e) {    return null;  }  Matcher metaMatcher=metaPattern.matcher(str);  String encoding=null;  if (metaMatcher.find()) {    Matcher charsetMatcher=charsetPattern.matcher(metaMatcher.group(1));    if (charsetMatcher.find())     encoding=new String(charsetMatcher.group(1));  }  return encoding;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Iterator<T> inorder(){  if (root == null) {    return empty();  }  RightThreadedBinaryNode<T> node=root;  RightThreadedBinaryNode<T> n;  while ((n=node.getLeftSon()) != null) {    node=n;  }  return new ThreadUntilEnd(node);}  }
class C{  private final void notifyConnectionOpened(OFConnection connection){  this.connection=connection;  this.newConnectionListener.connectionOpened(connection,featuresReply);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.EXECUTE_CLAUSE___TRACE_EXECUTE_1:    setTrace_execute_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @Override public String toString(){  return super.toString() + " [" + propertyName+ ","+ oldValue+ ","+ newValue+ "]";}  }
class C{  private double doAcquire(long permitsToAcquire,long currentTime){  readRate.lock();  try {    while (true) {      long nanosPerPermit=this.nanosPerPermit;      long clockDelta=permitsToAcquire * nanosPerPermit;      long lowestAllowedClock=currentTime - backlogSize;      long currentClock=clock.get();      long nextClock=currentClock + clockDelta;      if (nextClock < lowestAllowedClock)       nextClock=lowestAllowedClock;      if (clock.compareAndSet(currentClock,nextClock)) {        if (nextClock > currentTime)         return (nextClock - currentTime) / (double)nanosPerPermit; else         return 0.0;      }    }  }  finally {    readRate.unlock();  }}  }
class C{  public void addRandomRule(final EvolutionState state,final int thread){  Rule newRule=(Rule)(constraints(((RuleInitializer)state.initializer)).rulePrototype.clone());  newRule.reset(state,thread);  addRule(newRule);}  }
class C{  public static String charToString(char[] charArray){  if (charArray == null)   return null;  return new String(charArray);}  }
class C{  public void traverse(EclipseASTVisitor visitor){  if (!this.isCompleteParse() && visitor.getClass().isAnnotationPresent(DeferUntilPostDiet.class))   return;switch (getKind()) {case COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(CompilationUnitDeclaration)get());  ast.traverseChildren(visitor,this);visitor.endVisitCompilationUnit(this,(CompilationUnitDeclaration)get());break;case TYPE:visitor.visitType(this,(TypeDeclaration)get());ast.traverseChildren(visitor,this);visitor.endVisitType(this,(TypeDeclaration)get());break;case FIELD:visitor.visitField(this,(FieldDeclaration)get());ast.traverseChildren(visitor,this);visitor.endVisitField(this,(FieldDeclaration)get());break;case INITIALIZER:visitor.visitInitializer(this,(Initializer)get());ast.traverseChildren(visitor,this);visitor.endVisitInitializer(this,(Initializer)get());break;case METHOD:if (get() instanceof Clinit) return;visitor.visitMethod(this,(AbstractMethodDeclaration)get());ast.traverseChildren(visitor,this);visitor.endVisitMethod(this,(AbstractMethodDeclaration)get());break;case ARGUMENT:AbstractMethodDeclaration method=(AbstractMethodDeclaration)up().get();visitor.visitMethodArgument(this,(Argument)get(),method);ast.traverseChildren(visitor,this);visitor.endVisitMethodArgument(this,(Argument)get(),method);break;case LOCAL:visitor.visitLocal(this,(LocalDeclaration)get());ast.traverseChildren(visitor,this);visitor.endVisitLocal(this,(LocalDeclaration)get());break;case ANNOTATION:switch (up().getKind()) {case TYPE:visitor.visitAnnotationOnType((TypeDeclaration)up().get(),this,(Annotation)get());break;case FIELD:visitor.visitAnnotationOnField((FieldDeclaration)up().get(),this,(Annotation)get());break;case METHOD:visitor.visitAnnotationOnMethod((AbstractMethodDeclaration)up().get(),this,(Annotation)get());break;case ARGUMENT:visitor.visitAnnotationOnMethodArgument((Argument)parent.get(),(AbstractMethodDeclaration)parent.directUp().get(),this,(Annotation)get());break;case LOCAL:visitor.visitAnnotationOnLocal((LocalDeclaration)parent.get(),this,(Annotation)get());break;default :throw new AssertionError("Annotation not expected as child of a " + up().getKind());}break;case STATEMENT:visitor.visitStatement(this,(Statement)get());ast.traverseChildren(visitor,this);visitor.endVisitStatement(this,(Statement)get());break;default :throw new AssertionError("Unexpected kind during node traversal: " + getKind());}}  }
class C{  protected void respawn(){  try {    final Creature newentity=prototypeCreature.getNewInstance();    newentity.setAtk(Rand.randGaussian(newentity.getAtk(),newentity.getAtk() / 10));    newentity.setDef(Rand.randGaussian(newentity.getDef(),newentity.getDef() / 10));    newentity.registerObjectsForNotification(observers);    if (StendhalRPAction.placeat(zone,newentity,x,y)) {      newentity.init();      newentity.setRespawnPoint(this);      creatures.add(newentity);    } else {      notifyDead(newentity);      logger.warn("Could not respawn " + newentity.getName() + " near "+ zone.getName()+ " "+ x+ " "+ y);    }  } catch (  final Exception e) {    logger.error("error respawning entity " + prototypeCreature,e);  }}  }
class C{  public boolean otherMethodWithDiffPrefix(String x,String y){  if (x == y)   return foo(x,y); else   if (x != null)   return foo_bar0(x); else   return foo_bar1(x);}  }
class C{  public static void decline(Connection conn,String room,String inviter,String reason){  Message message=new Message(room);  MUCUser mucUser=new MUCUser();  MUCUser.Decline decline=new MUCUser.Decline();  decline.setTo(inviter);  decline.setReason(reason);  mucUser.setDecline(decline);  message.addExtension(mucUser);  conn.sendPacket(message);}  }
class C{  public void createAccount(){  mAccount=new AccountFactory(mAccountConfig).setHttpClient(httpclient).createAccount();  mAccess=mAccount.getAccess();  if (mRegion != null) {    mAccess.setPreferredRegion(mRegion);  }}  }
class C{  public static void main(String[] args) throws Exception {  try {    startup();  } catch (  Exception fatal) {    log.error("FATAL",fatal);    System.exit(1);  }}  }
class C{  private EscapeSet processMoveResultPseudoInsn(SsaInsn insn){  RegisterSpec result=insn.getResult();  SsaInsn prevSsaInsn=getInsnForMove(insn);  int prevOpcode=prevSsaInsn.getOpcode().getOpcode();  EscapeSet escSet;  RegisterSpec prevSource;switch (prevOpcode) {case RegOps.NEW_INSTANCE:case RegOps.CONST:    escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);  break;case RegOps.NEW_ARRAY:case RegOps.FILLED_NEW_ARRAY:prevSource=prevSsaInsn.getSources().get(0);if (prevSource.getTypeBearer().isConstant()) {escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);escSet.replaceableArray=true;} else {escSet=new EscapeSet(result.getReg(),regCount,EscapeState.GLOBAL);}break;case RegOps.GET_STATIC:escSet=new EscapeSet(result.getReg(),regCount,EscapeState.GLOBAL);break;case RegOps.CHECK_CAST:case RegOps.GET_FIELD:case RegOps.AGET:prevSource=prevSsaInsn.getSources().get(0);int setIndex=findSetIndex(prevSource);if (setIndex != latticeValues.size()) {escSet=latticeValues.get(setIndex);escSet.regSet.set(result.getReg());return escSet;}if (prevSource.getType() == Type.KNOWN_NULL) {escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);} else {escSet=new EscapeSet(result.getReg(),regCount,EscapeState.GLOBAL);}break;default :return null;}latticeValues.add(escSet);return escSet;}  }
class C{  private Map<String,Token> convertTokens(JCas aJCas,TextCorpus aCorpusData){  if (aCorpusData.getTokensLayer() == null) {    return new HashMap<String,Token>();  }  String text=aJCas.getDocumentText();  Token outToken;  int tokenBeginPosition=0;  int tokenEndPosition;  Map<String,Token> tokens=new HashMap<String,Token>();  for (int i=0; i < aCorpusData.getTokensLayer().size(); i++) {    eu.clarin.weblicht.wlfxb.tc.api.Token token=aCorpusData.getTokensLayer().getToken(i);    tokenBeginPosition=text.indexOf(token.getString(),tokenBeginPosition);    tokenEndPosition=text.indexOf(token.getString(),tokenBeginPosition) + token.getString().length();    outToken=new Token(aJCas,tokenBeginPosition,tokenEndPosition);    outToken.addToIndexes();    tokens.put(token.getID(),outToken);    tokenBeginPosition=tokenEndPosition;  }  return tokens;}  }
class C{  public CompositeListener addListener(JAMonListener listener){  if (listener instanceof CompositeListener || !hasListener(listener.getName())) {    listenerList.add(listener);  }  return this;}  }
class C{  public boolean isResolved(){  return xclass != null;}  }
class C{  public static List<AbstractInsnNode> findInvocationsWithParameter(InsnList insnList,Type expectedParamType){  Validate.notNull(insnList);  Validate.notNull(expectedParamType);  Validate.isTrue(expectedParamType.getSort() != Type.METHOD && expectedParamType.getSort() != Type.VOID);  List<AbstractInsnNode> ret=new ArrayList<>();  Iterator<AbstractInsnNode> it=insnList.iterator();  while (it.hasNext()) {    AbstractInsnNode instructionNode=it.next();    Type[] methodParamTypes;    if (instructionNode instanceof MethodInsnNode) {      MethodInsnNode methodInsnNode=(MethodInsnNode)instructionNode;      Type methodType=Type.getType(methodInsnNode.desc);      methodParamTypes=methodType.getArgumentTypes();    } else     if (instructionNode instanceof InvokeDynamicInsnNode) {      InvokeDynamicInsnNode invokeDynamicInsnNode=(InvokeDynamicInsnNode)instructionNode;      Type methodType=Type.getType(invokeDynamicInsnNode.desc);      methodParamTypes=methodType.getArgumentTypes();    } else {      continue;    }    if (Arrays.asList(methodParamTypes).contains(expectedParamType)) {      ret.add(instructionNode);    }  }  return ret;}  }
class C{  public synchronized void curveTo(float x1,float y1,float x2,float y2,float x3,float y3){  checkMoveTo();  path.curveTo(x1,y1,x2,y2,x3,y3);  makeRoom(6);  types[numSeg++]=PathIterator.SEG_CUBICTO;  values[numVals++]=x1;  values[numVals++]=y1;  values[numVals++]=x2;  values[numVals++]=y2;  cx=values[numVals++]=x3;  cy=values[numVals++]=y3;}  }
class C{  public synchronized void reset(){  pos=0;}  }
class C{  public void sendBluetoothAdapterStateChange(int state){  sendMessage(CMD_BLUETOOTH_ADAPTER_STATE_CHANGE,state,0);}  }
class C{  public static boolean isPlaceAction(InventoryAction action){switch (action) {case SWAP_WITH_CURSOR:case PLACE_ONE:case PLACE_ALL:case PLACE_SOME:    return true;}return false;}  }
class C{  public boolean tick(){  if (++ticksExisted % 20 == 0) {    for (    BlockPos pos : BlockPos.getAllInBox(startCoords.add(-RANGE,0,-RANGE),startCoords.add(RANGE,0,RANGE))) {      if (world.getBlockState(pos) == stateToSet)       tickBlock(pos);    }  }  return ticksExisted < 80;}  }
class C{  public static String createDistribution(String sessionID,Integer bookId,List listIdsRegister,Integer userType,Integer userId,String messageForUser,Locale locale,String entidad) throws BookException, DistributionException, SessionException, ValidationException {  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  Validator.validate_Integer(bookId,ValidationException.ATTRIBUTE_BOOK);  StringBuffer result=new StringBuffer();  Transaction tran=null;  try {    boolean distributionManualBookOut=Configurator.getInstance().getPropertyBoolean(ConfigurationKeys.KEY_SERVER_DISTRIBUTION_MANUAL_BOOK_OUT);    if (Repository.getInstance(entidad).isInBook(bookId).booleanValue() || (Repository.getInstance(entidad).isOutBook(bookId).booleanValue() && distributionManualBookOut)) {      Session session=HibernateUtil.currentSession(entidad);      tran=session.beginTransaction();      CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);      if (!cacheBag.containsKey(bookId)) {        throw new BookException(BookException.ERROR_BOOK_NOT_OPEN);      }      AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);      ScrOfic scrOfic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);      lockListFolderDist(session,bookId,listIdsRegister,user,entidad);      result.append(createDistribution(session,sessionID,bookId,2,scrOfic.getDeptid(),userId,userType,messageForUser,listIdsRegister,user,scrOfic,locale,entidad));      HibernateUtil.commitTransaction(tran);    }  } catch (  BookException bE) {    HibernateUtil.rollbackTransaction(tran);    throw bE;  }catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  EventException eE) {    HibernateUtil.rollbackTransaction(tran);    throw eE;  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    log.error("Impossible to create distribution for the session [" + sessionID + "] and bookID ["+ bookId+ "]",e);    throw new DistributionException(DistributionException.ERROR_CANNOT_SAVE_DISTRIBUTION);  } finally {    HibernateUtil.closeSession(entidad);  }  return result.toString();}  }
class C{  public static final double atan(double a){  return ieee754_atan(a);}  }
class C{  private static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public PublicChestSlot(Chest owner){  super(owner);}  }
class C{  private void restoreIcon(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking icon " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  Resource res=unpackProto(new Resource(),buffer,dataSize);  if (DEBUG) {    Log.d(TAG,"unpacked " + res.dpi + " dpi icon");  }  Bitmap icon=BitmapFactory.decodeByteArray(res.data,0,res.data.length);  if (icon == null) {    Log.w(TAG,"failed to unpack icon for " + key.name);  } else {    if (VERBOSE)     Log.v(TAG,"saving restored icon as: " + key.name);    mIconCache.preloadIcon(ComponentName.unflattenFromString(key.name),icon,res.dpi,"",mUserSerial,mIdp);  }}  }
class C{  public String correctCommasAndDecimals(String number){  String correctedNumber=number;  Integer commaCount=StringUtils.countMatches(correctedNumber,',');  Integer periodCount=StringUtils.countMatches(correctedNumber,'.');  if (commaCount > 0 && periodCount > 0) {    try {      correctedNumber=processCommasAndDecimals(correctedNumber,commaCount,periodCount);    } catch (    BaleenException be) {      getMonitor().warn("Unable to parse monetary value '{}'",be);      return null;    }  } else   if (commaCount > 1) {    correctedNumber=correctedNumber.replaceAll(",","");  } else   if (commaCount == 1) {    String[] parts=correctedNumber.split(",");    if (parts[1].length() == 3) {      correctedNumber=correctedNumber.replaceAll(",","");    } else {      correctedNumber=correctedNumber.replaceAll(",",".");    }  } else   if (periodCount > 1) {    correctedNumber=correctedNumber.replaceAll("\\.","");  } else   if (periodCount == 1) {    String[] parts=correctedNumber.split("\\.");    if (parts[1].length() == 3) {      correctedNumber=correctedNumber.replaceAll("\\.","");    }  }  return correctedNumber;}  }
class C{  public void zipIt(String zipFile){  byte[] buffer=new byte[1024];  try {    FileOutputStream fos=new FileOutputStream(zipFile);    ZipOutputStream zos=new ZipOutputStream(fos);    LOGGER.info("Output to Zip : " + zipFile);    for (    String file : this.fileList) {      LOGGER.info("File Added : " + file);      ZipEntry ze=new ZipEntry(file);      zos.putNextEntry(ze);      FileInputStream in=new FileInputStream(sourceDir + File.separator + file);      int len;      while ((len=in.read(buffer)) > 0) {        zos.write(buffer,0,len);      }      in.close();    }    zos.closeEntry();    zos.close();    LOGGER.info("Done");  } catch (  IOException ex) {    LOGGER.info(ex);  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  try {    if (_service == null) {      String className=getInitParameter("service-class");      Class<?> serviceClass=null;      if (className != null) {        ClassLoader loader=Thread.currentThread().getContextClassLoader();        if (loader != null)         serviceClass=Class.forName(className,false,loader); else         serviceClass=Class.forName(className);      } else {        if (getClass().equals(BurlapServlet.class))         throw new ServletException("server must extend BurlapServlet");        serviceClass=getClass();      }      _service=serviceClass.newInstance();      if (_service instanceof BurlapServlet)       ((BurlapServlet)_service).setService(this);      if (_service instanceof Service)       ((Service)_service).init(getServletConfig()); else       if (_service instanceof Servlet)       ((Servlet)_service).init(getServletConfig());    }    if (_apiClass == null) {      String className=getInitParameter("api-class");      if (className != null) {        ClassLoader loader=Thread.currentThread().getContextClassLoader();        if (loader != null)         _apiClass=Class.forName(className,false,loader); else         _apiClass=Class.forName(className);      } else       _apiClass=_service.getClass();    }    _skeleton=new BurlapSkeleton(_service,_apiClass);  } catch (  ServletException e) {    throw e;  }catch (  Exception e) {    throw new ServletException(e);  }}  }
class C{  @Inject public DefaultUserService(AuditService auditService,SystemConfiguration _sysConfig){  super(auditService,_sysConfig);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, java.io.NotActiveException, ClassNotFoundException {  thisX500Name=new X500Name((byte[])s.readObject());}  }
class C{  public static Optional<IExecutionEnvironment> findExecutionEnvironment(String version){  String executionEnvironmentId=getExecutionEnvironmentId(version);  for (  IExecutionEnvironment executionEnvironment : JavaRuntime.getExecutionEnvironmentsManager().getExecutionEnvironments()) {    if (executionEnvironment.getId().equals(executionEnvironmentId)) {      return Optional.of(executionEnvironment);    }  }  return Optional.absent();}  }
class C{  public static boolean checkALCError(ALCdevice alcDevice,String msg){  msg=msg.trim();  if (msg.length() > 0) {    msg=msg + " ";  }switch (alc.alcGetError(alcDevice)) {case ALC.ALC_NO_ERROR:    return false;case ALC.ALC_INVALID_DEVICE:  log.warn(msg + "Invalid device");return true;case ALC.ALC_INVALID_CONTEXT:log.warn(msg + "Invalid context");return true;case ALC.ALC_INVALID_ENUM:log.warn(msg + "Invalid enumerated parameter value");return true;case ALC.ALC_INVALID_VALUE:log.warn(msg + "Invalid parameter value");return true;case ALC.ALC_OUT_OF_MEMORY:log.warn(msg + "Out of memory");return true;default :log.warn(msg + "Unrecognised error occurred");return true;}}  }
class C{  public SavedState(Parcelable parcel,int checkIndex){  super(parcel);  this.checkIndex=checkIndex;}  }
class C{  public WifiDirectPeerNetwork(WifiP2pDevice wifiP2pDevice){  this.wifiP2pDevice=wifiP2pDevice;}  }
class C{  public static final GeoTimeSerie subCycleSerie(GeoTimeSerie gts,long lastbucket,int buckets_per_period,boolean overwrite,GeoTimeSerie subgts) throws WarpScriptException {  if (!isBucketized(gts)) {    throw new WarpScriptException("GTS must be bucketized");  }  if (0 != (gts.lastbucket - lastbucket) % gts.bucketspan) {    throw new WarpScriptException("lasbucket parameter of subCycleSerie method must fall on an actual bucket of the gts input");  }  if (null == subgts) {    subgts=new GeoTimeSerie(lastbucket,(gts.bucketcount - (int)((gts.lastbucket - lastbucket) / gts.bucketspan) - 1) / buckets_per_period + 1,gts.bucketspan * buckets_per_period,(int)Math.max(1.4 * gts.bucketcount,gts.sizehint) / buckets_per_period);  } else {    subgts.values=0;    subgts.type=TYPE.UNDEFINED;    subgts.lastbucket=lastbucket;    subgts.bucketcount=(gts.bucketcount - (int)((gts.lastbucket - lastbucket) / gts.bucketspan) - 1) / buckets_per_period + 1;    subgts.bucketspan=gts.bucketspan * buckets_per_period;  }  if (null == gts.ticks || 0 == gts.values) {    return subgts;  }  Iterator<Long> iter=tickIterator(subgts,true);  long tick;  sort(gts);  int i=gts.values;  while (iter.hasNext()) {    tick=iter.next();    i=Arrays.binarySearch(gts.ticks,0,i,tick);    if (i >= 0) {      setValue(subgts,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,valueAtIndex(gts,i),overwrite);    }  }  return subgts;}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public int fetch(String batchId,int threads,boolean shouldResume,int numTasks) throws Exception {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  LOG.info("FetcherJob: starting at " + sdf.format(start));  if (batchId.equals(Nutch.ALL_BATCH_ID_STR)) {    LOG.info("FetcherJob: fetching all");  } else {    LOG.info("FetcherJob: batchId: " + batchId);  }  run(ToolUtil.toArgMap(Nutch.ARG_BATCH,batchId,Nutch.ARG_THREADS,threads,Nutch.ARG_RESUME,shouldResume,Nutch.ARG_NUMTASKS,numTasks));  long finish=System.currentTimeMillis();  LOG.info("FetcherJob: finished at " + sdf.format(finish) + ", time elapsed: "+ TimingUtil.elapsedTime(start,finish));  return 0;}  }
class C{  private static long CallNonvirtualLongMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualLongMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Long,true);  return Reflection.unwrapLong(returnObj);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append("FIXED");  sb.append("}");  return sb.toString();}  }
class C{  public ReturnException(Object result,RCaller target){  this.result=result;  this.target=target;}  }
class C{  public void increaseValue(String goldValue,String predictedValue,int times){  allGoldLabels.add(goldValue);  allPredictedLabels.add(predictedValue);  for (int i=0; i < times; i++) {    labelSeries.add(predictedValue);  }  if (!map.containsKey(goldValue)) {    map.put(goldValue,new TreeMap<String,Integer>());  }  if (!map.get(goldValue).containsKey(predictedValue)) {    map.get(goldValue).put(predictedValue,0);  }  int currentValue=this.map.get(goldValue).get(predictedValue);  this.map.get(goldValue).put(predictedValue,currentValue + times);  total+=times;  if (goldValue.equals(predictedValue)) {    correct+=times;  }}  }
class C{  @SideOnly(Side.CLIENT) @Override public void renderHUDEffect(int x,int y,PotionEffect effect,Minecraft mc,float alpha){  mc.getTextureManager().bindTexture(iconTexture);  Gui.drawModalRectWithCustomSizedTexture(x + 3,y + 3,0,0,18,18,18,18);}  }
class C{  @Override public synchronized boolean containsAll(Collection<?> collection){  return super.containsAll(collection);}  }
class C{  @Override public HLL clone() throws CloneNotSupportedException {  final int copyExpthresh;  if (explicitAuto) {    copyExpthresh=-1;  } else   if (explicitOff) {    copyExpthresh=0;  } else {    copyExpthresh=BitUtil.leastSignificantBit(explicitThreshold) + 1;  }  final HLL copy=new HLL(log2m,regwidth,copyExpthresh,!sparseOff,type);switch (type) {case EMPTY:    break;case EXPLICIT:  copy.explicitStorage=this.explicitStorage.clone();break;case SPARSE:copy.sparseProbabilisticStorage=this.sparseProbabilisticStorage.clone();break;case FULL:copy.probabilisticStorage=this.probabilisticStorage.clone();break;default :throw new RuntimeException("Unsupported HLL type " + type);}return copy;}  }
class C{  public boolean openFileReader(String fileName){  boolean result=false;  try {    Reader read=new FileReader(fileName);    this.read(read,fileName);    read.close();    result=true;  } catch (  Throwable t) {    JOptionPane.showMessageDialog(this,"Could not save file " + fileName,"Warning",JOptionPane.WARNING_MESSAGE);    result=false;  }  return result;}  }
class C{  @Override public void processView(ViewEngineContext context) throws ViewEngineException {  ScriptEngine scriptEngine=getScriptEngine(context.getView());  Object responseObject;  try {    InputStream inputStream=context.getRequest().getServletContext().getResourceAsStream(resolveView(context));    InputStreamReader reader=new InputStreamReader(inputStream);    Bindings bindings=scriptEngine.createBindings();    bindings.put("models",context.getModels());    responseObject=scriptEngine.eval(reader,bindings);  } catch (  ScriptException exception) {    throw new ViewEngineException("Unable to execute script",exception);  }  try {    context.getResponse().getWriter().print(responseObject.toString());  } catch (  IOException exception) {    throw new ViewEngineException("Unable to write response",exception);  }}  }
class C{  public static boolean applyTo(ImageHolder imageHolder,ImageView imageView){  return applyTo(imageHolder,imageView,null);}  }
class C{  public void drawBoard(Graphics g){  drawer.drawBoard(g,board);}  }
class C{  public DoubleVector buildVector(Collection<String> articleTokens,DoubleVector documentVector){  Map<String,Integer> termCounts=new HashMap<String,Integer>();  for (  String term : articleTokens) {    Integer count=termCounts.get(term);    termCounts.put(term,(count == null || !useTermFreq) ? 1 : count.intValue() + 1);  }  for (  Map.Entry<String,Integer> entry : termCounts.entrySet()) {    Vector termVector=sspace.getVector(entry.getKey());    if (termVector == null) {      continue;    }    add(documentVector,termVector,entry.getValue());  }  return documentVector;}  }
class C{  public int typicalIndsProduced(){  if (maxGeneratable == 0)   maxGeneratable=maxChildProduction();  return maxGeneratable;}  }
class C{  void addDirective(String name,boolean haveQuotedPair){  String value;  int inputIndex;  int valueIndex;  char valueChar;  int type;  if (!haveQuotedPair) {    value=m_directives.substring(m_scanStart,m_curPos);  } else {    StringBuffer valueBuf=new StringBuffer(m_curPos - m_scanStart);    valueIndex=0;    inputIndex=m_scanStart;    while (inputIndex < m_curPos) {      if ('\\' == (valueChar=m_directives.charAt(inputIndex)))       inputIndex++;      valueBuf.setCharAt(valueIndex,m_directives.charAt(inputIndex));      valueIndex++;      inputIndex++;    }    value=new String(valueBuf);  }  if (m_state == STATE_SCANNING_QUOTED_STRING_VALUE)   type=ParsedDirective.QUOTED_STRING_VALUE; else   type=ParsedDirective.TOKEN_VALUE;  m_directiveList.add(new ParsedDirective(name,value,type));}  }
class C{  public static String rawToHex(byte[] buf,int offset,int len){  char[] hexval=new char[len * 2];  int x;  int i, j, k;  j=0;  for (i=offset; i < (len + offset); ++i) {    x=(int)(buf[i]);    k=((x >> 4) & 0xF);    hexval[j++]=(char)((k < 10) ? ('0' + k) : ('A' + k - 10));    k=(x & 0xF);    hexval[j++]=(char)((k < 10) ? ('0' + k) : ('A' + k - 10));  }  return (new String(hexval));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  NodeList clonedList;  Node clonedChild;  String clonedChildName;  NodeList origList;  Node origChild;  String origChildName;  java.util.List result=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  origList=employeeNode.getChildNodes();  for (int indexN10065=0; indexN10065 < origList.getLength(); indexN10065++) {    origChild=(Node)origList.item(indexN10065);    origChildName=origChild.getNodeName();    expected.add(origChildName);  }  clonedNode=employeeNode.cloneNode(true);  clonedList=clonedNode.getChildNodes();  for (int indexN1007B=0; indexN1007B < clonedList.getLength(); indexN1007B++) {    clonedChild=(Node)clonedList.item(indexN1007B);    clonedChildName=clonedChild.getNodeName();    result.add(clonedChildName);  }  assertEquals("clone",expected,result);}  }
class C{  public Response networkResponse(){  return networkResponse;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public Iterator<Entry> entryIterator() throws IOException, FormatException {  return entryIterator(null);}  }
class C{  public boolean isStatic(){  int acc=info.getAccessFlags();  return (acc & AccessFlag.STATIC) != 0;}  }
class C{  public String[] validBaudRates(){  log.debug("validBaudRates should not have been invoked");  return null;}  }
class C{  public VariableValue findVar(String name){  for (int i=0; i < getRowCount(); i++) {    if (name.equals(getItem(i))) {      return getVariable(i);    }    if (name.equals(getLabel(i))) {      return getVariable(i);    }  }  return null;}  }
class C{  public ImageBgPanel(){  this.setOpaque(false);}  }
class C{  public Tasks<VolumeRestRep> swapContinuousCopies(URI id,CopiesParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/swap",id);  return new Tasks<VolumeRestRep>(client,tasks.getTaskList(),BlockMirrorRestRep.class);}  }
class C{  public void rebalanceWithOfflineChildRegion(SerializableRunnable createParentPR,SerializableRunnable createChildPR) throws Throwable {  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  vm0.invoke(createParentPR);  vm1.invoke(createParentPR);  vm0.invoke(createChildPR);  vm1.invoke(createChildPR);  createData(vm0,0,NUM_BUCKETS,"a");  createData(vm0,0,NUM_BUCKETS,"a","region2");  closeCache(vm1);  closeCache(vm0);  AsyncInvocation async0=vm0.invokeAsync(createParentPR);  AsyncInvocation async1=vm1.invokeAsync(createParentPR);  async0.getResult(MAX_WAIT);  async1.getResult(MAX_WAIT);  vm2.invoke(createParentPR);  RebalanceResults rebalanceResults=rebalance(vm2);  assertEquals(0,rebalanceResults.getTotalBucketTransfersCompleted());  async1=vm1.invokeAsync(createChildPR);  async0=vm0.invokeAsync(createChildPR);  AsyncInvocation async2=vm2.invokeAsync(createChildPR);  async0.getResult(MAX_WAIT);  async1.getResult(MAX_WAIT);  async2.getResult(MAX_WAIT);  checkData(vm0,0,NUM_BUCKETS,"a");  checkData(vm0,0,NUM_BUCKETS,"a","region2");  createData(vm0,0,NUM_BUCKETS,"c","region2");}  }
class C{  private Collator createFromRules(String fileName,ResourceLoader loader){  InputStream input=null;  try {    input=loader.openResource(fileName);    String rules=IOUtils.toString(input,"UTF-8");    return new RuleBasedCollator(rules);  } catch (  Exception e) {    throw new RuntimeException(e);  } finally {    IOUtils.closeQuietly(input);  }}  }
class C{  private void loadGTFSFiles(){  try {    timeFormat=new SimpleDateFormat("HH:mm:ss");    BufferedReader reader=null;    String line=null;    int size=roots.length;    stops=new Map[size];    services=new Map[size];    shapes=new Map[size];    routes=new SortedMap[size];    int publicSystemNumber=0;    for (    File root : roots) {      stops[publicSystemNumber]=new HashMap<String,Stop>();      services[publicSystemNumber]=new HashMap<String,Service>();      shapes[publicSystemNumber]=new HashMap<String,Shape>();      routes[publicSystemNumber]=new TreeMap<String,Route>();      for (      GTFSDefinitions gtfs : GTFSDefinitions.values()) {        File file=new File(root.getPath() + "/" + gtfs.fileName);        if (file.exists()) {          reader=new BufferedReader(new FileReader(file));          int[] indices=gtfs.getIndices(reader.readLine());          line=reader.readLine();          while (line != null) {            String[] parts=line.split(",");            Method m=GTFS2MATSimTransitSchedule.class.getMethod(gtfs.getFunction(),new Class[]{String[].class,int[].class,int.class});            m.invoke(this,new Object[]{parts,indices,publicSystemNumber});            line=reader.readLine();          }          reader.close();        }      }      publicSystemNumber++;    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public boolean hasRolloutTargetsReadPermission(){  return hasTargetReadPermission() && permissionService.hasPermission(SpPermission.ROLLOUT_MANAGEMENT);}  }
class C{  public JPAUserFlag(JPAUserFlag flag){  this(flag.getName());}  }
class C{  private final void cleanUpApplicationRecordLocked(ProcessRecord app,boolean restarting,boolean allowRestart,int index){  if (index >= 0) {    mLruProcesses.remove(index);  }  mProcessesToGc.remove(app);  if (app.crashDialog != null && !app.forceCrashReport) {    app.crashDialog.dismiss();    app.crashDialog=null;  }  if (app.anrDialog != null) {    app.anrDialog.dismiss();    app.anrDialog=null;  }  if (app.waitDialog != null) {    app.waitDialog.dismiss();    app.waitDialog=null;  }  app.crashing=false;  app.notResponding=false;  app.resetPackageList();  app.unlinkDeathRecipient();  app.thread=null;  app.forcingToForeground=null;  app.foregroundServices=false;  app.foregroundActivities=false;  app.hasShownUi=false;  app.hasAboveClient=false;  mServices.killServicesLocked(app,allowRestart);  boolean restart=false;  if (!app.pubProviders.isEmpty()) {    Iterator<ContentProviderRecord> it=app.pubProviders.values().iterator();    while (it.hasNext()) {      ContentProviderRecord cpr=it.next();      final boolean always=app.bad || !allowRestart;      if (removeDyingProviderLocked(app,cpr,always) || always) {        restart=true;      }      cpr.provider=null;      cpr.proc=null;    }    app.pubProviders.clear();  }  if (checkAppInLaunchingProvidersLocked(app,false)) {    restart=true;  }  if (!app.conProviders.isEmpty()) {    for (int i=0; i < app.conProviders.size(); i++) {      ContentProviderConnection conn=app.conProviders.get(i);      conn.provider.connections.remove(conn);    }    app.conProviders.clear();  }  if (false) {    for (int i=0; i < mLaunchingProviders.size(); i++) {      ContentProviderRecord cpr=(ContentProviderRecord)mLaunchingProviders.get(i);      if (cpr.connections.size() <= 0 && !cpr.hasExternalProcessHandles()) {synchronized (cpr) {          cpr.launchingApp=null;          cpr.notifyAll();        }      }    }  }  skipCurrentReceiverLocked(app);  if (app.receivers.size() > 0) {    Iterator<ReceiverList> it=app.receivers.iterator();    while (it.hasNext()) {      removeReceiverLocked(it.next());    }    app.receivers.clear();  }  if (mBackupTarget != null && app.pid == mBackupTarget.app.pid) {    if (DEBUG_BACKUP || DEBUG_CLEANUP)     Slog.d(TAG,"App " + mBackupTarget.appInfo + " died during backup");    try {      IBackupManager bm=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));      bm.agentDisconnected(app.info.packageName);    } catch (    RemoteException e) {    }  }  for (int i=mPendingProcessChanges.size() - 1; i >= 0; i--) {    ProcessChangeItem item=mPendingProcessChanges.get(i);    if (item.pid == app.pid) {      mPendingProcessChanges.remove(i);      mAvailProcessChanges.add(item);    }  }  mHandler.obtainMessage(DISPATCH_PROCESS_DIED,app.pid,app.info.uid,null).sendToTarget();  if (restarting) {    return;  }  if (!app.persistent || app.isolated) {    if (DEBUG_PROCESSES || DEBUG_CLEANUP)     Slog.v(TAG,"Removing non-persistent process during cleanup: " + app);    mProcessNames.remove(app.processName,app.uid);    mIsolatedProcesses.remove(app.uid);    if (mHeavyWeightProcess == app) {      mHandler.sendMessage(mHandler.obtainMessage(CANCEL_HEAVY_NOTIFICATION_MSG,mHeavyWeightProcess.userId,0));      mHeavyWeightProcess=null;    }  } else   if (!app.removed) {    if (mPersistentStartingProcesses.indexOf(app) < 0) {      mPersistentStartingProcesses.add(app);      restart=true;    }  }  if ((DEBUG_PROCESSES || DEBUG_CLEANUP) && mProcessesOnHold.contains(app))   Slog.v(TAG,"Clean-up removing on hold: " + app);  mProcessesOnHold.remove(app);  if (app == mHomeProcess) {    mHomeProcess=null;  }  if (app == mPreviousProcess) {    mPreviousProcess=null;  }  if (restart && !app.isolated) {    mProcessNames.put(app.processName,app.uid,app);    startProcessLocked(app,"restart",app.processName);  } else   if (app.pid > 0 && app.pid != MY_PID) {synchronized (mPidsSelfLocked) {      mPidsSelfLocked.remove(app.pid);      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);    }    app.setPid(0);  }}  }
class C{  public void addAllOf(DoubleArrayList xElements,DoubleArrayList yElements,DoubleArrayList zElements){  int listSize=xElements.size();  if (this.size + listSize >= this.capacity)   flush();  this.target.addAllOf(xElements,yElements,zElements);}  }
class C{  private void receivedHelloRequest() throws HandshakeException {  if (state < HandshakeType.HELLO_REQUEST.getCode()) {    startHandshake();  } else {  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.MULTIPLE_IS_A__ANONYMOUS_MULTIPLE_IS_A11:    return ((InternalEList<?>)getAnonymous_multipleIsA_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Object createObjectFromString(String type,String value) throws Exception {  Object result;  if (primitiveToWrapper.containsKey(type)) {    if (type.equals(Character.TYPE.getName())) {      result=new Character(value.charAt(0));    } else {      result=newStringConstructor(((Class<?>)primitiveToWrapper.get(type)).getName(),value);    }  } else   if (type.equals(Character.class.getName())) {    result=new Character(value.charAt(0));  } else   if (Number.class.isAssignableFrom(Utils.getClass(type))) {    result=createNumberFromStringValue(value);  } else   if (value == null || value.equals("null")) {    result=null;  } else {    result=newStringConstructor(type,value);  }  return result;}  }
class C{  public li removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix06.class,args);}  }
class C{  public boolean userCanEditDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int dirMgrId=Defs.NULL_ID;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (dirId == Defs.NULL_ID || dirId == Defs.ROOT_DIR_ID)     dirMgrId=0; else     dirMgrId=this.getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_EDIT,dirMgrId,Defs.NULL_ID,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public Entry(int hash,Object key,int value,Entry next){  this.hash=hash;  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public NetworkRestRep register(URI id){  return client.post(NetworkRestRep.class,getIdUrl() + "/register",id);}  }
class C{  public void call(String name,Object value,@DelegatesTo(StreamingJsonDelegate.class) Closure callable) throws IOException {  if (generator.isExcludingFieldsNamed(name)) {    return;  }  writeName(name);  verifyValue();  writeObject(writer,value,callable,generator);}  }
class C{  private static String buildCertificateAlias(Uri certFile){  File file=new File(certFile.getPath());  String filename=file.getName();  long lastModified=file.lastModified();  int lastDotPosition=filename.lastIndexOf('.');  StringBuilder alias=new StringBuilder();  if (lastDotPosition > 0) {    alias.append(filename.substring(0,lastDotPosition));  } else {    alias.append(filename);  }  return alias.append(lastModified).toString();}  }
class C{  public Collection<Extension> build(Collection<String> urls){  List<Extension> extensions=new LinkedList<Extension>();  for (  String urlAsString : urls) {    try {      Extension e=build(urlAsString);      if (e != null) {        extensions.add(e);      }    } catch (    IOException e) {      LOG.error("Unable to access extension definition defined at " + urlAsString,e);    }catch (    SAXException e) {      LOG.error("Unable to parse extension definition defined at " + urlAsString,e);    }  }  return extensions;}  }
class C{  public void callHandler(String handlerName,String data,CallBackFunction callBack){  doSend(handlerName,data,callBack);}  }
class C{  String decode(String rawField){  String result=rawField;  int offset=result.indexOf("\\u");  while (offset >= 0) {    String before=result.substring(0,offset);    String escaped=result.substring(offset + 2,offset + 6);    String after=result.substring(offset + 6);    result=String.format("%s%c%s",before,Integer.parseInt(escaped,16),after);    offset=result.indexOf("\\u",offset + 1);  }  return result;}  }
class C{  public HashChain(Chain<E> src){  this();  for (  E e : src) {    add(e);  }}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  public Set<JsonUser> syncKnownUsers() throws ExecutionException, InterruptedException, RemoteException, OperationApplicationException {  Set<JsonUser> users=getUsersFromServer();  updateDatabase(users);  return users;}  }
class C{  public Solution(INode initial,INode goal,boolean success){  this(initial,goal,null);  this.success=success;}  }
class C{  public static ComponentUI createUI(JComponent c){  PaletteFontChooserUI ui=new PaletteFontChooserUI((JFontChooser)c);  return ui;}  }
class C{  public void cancelConnectFuture(){  future.cancel();}  }
class C{  @Experimental public void unregisterHook(String event,String replName){  String noteId=interpreterContext.getNoteId();  String className=getClassNameFromReplName(replName);  hooks.unregister(noteId,className,event);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private Object readResolve(){  return ToStringStyle.SIMPLE_STYLE;}  }
class C{  public static SubjectPublicKeyInfo createSubjectPublicKeyInfo(AsymmetricKeyParameter publicKey) throws IOException {  if (publicKey instanceof RSAKeyParameters) {    RSAKeyParameters pub=(RSAKeyParameters)publicKey;    return new SubjectPublicKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption,DERNull.INSTANCE),new RSAPublicKey(pub.getModulus(),pub.getExponent()));  } else   if (publicKey instanceof DSAPublicKeyParameters) {    DSAPublicKeyParameters pub=(DSAPublicKeyParameters)publicKey;    return new SubjectPublicKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_dsa),new ASN1Integer(pub.getY()));  } else   if (publicKey instanceof ECPublicKeyParameters) {    ECPublicKeyParameters pub=(ECPublicKeyParameters)publicKey;    ECDomainParameters domainParams=pub.getParameters();    ASN1Encodable params;    if (domainParams == null) {      params=new X962Parameters(DERNull.INSTANCE);    } else     if (domainParams instanceof ECNamedDomainParameters) {      params=new X962Parameters(((ECNamedDomainParameters)domainParams).getName());    } else {      X9ECParameters ecP=new X9ECParameters(domainParams.getCurve(),domainParams.getG(),domainParams.getN(),domainParams.getH(),domainParams.getSeed());      params=new X962Parameters(ecP);    }    ASN1OctetString p=(ASN1OctetString)new X9ECPoint(pub.getQ()).toASN1Primitive();    return new SubjectPublicKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_ecPublicKey,params),p.getOctets());  } else {    throw new IOException("key parameters not recognised.");  }}  }
class C{  public void repaint(){  repaintPending=true;  if (dirtyRegion != null) {    setDirtyRegion(null);  }  repaint(this);}  }
class C{  public void loadFromProperties(Properties properties){  projected=StringUtil.getBooleanValue(properties,"ProjectionInfo.Projected",false,true);  tiePoint=StringUtil.getDoubleArray(properties,"ProjectionInfo.TiePoint",null,true);  scale=StringUtil.getDoubleArray(properties,"ProjectionInfo.Scale",null,true);  globe=StringUtil.getStringValue(properties,"ProjectionInfo.Globe",null,true);  rasterWidth=StringUtil.getIntegerValue(properties,"ProjectionInfo.RasterWidth",true,0,true);  rasterLength=StringUtil.getIntegerValue(properties,"ProjectionInfo.RasterLength",true,0,true);  datumCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.DatumCode",true,0,false);  ellipsoidCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.DatumCode",true,0,false);  semiMajorAxis=StringUtil.getDoubleValue(properties,"ProjectionInfo.SemiMajorAxis",true,Double.NaN,false);  semiMinorAxis=StringUtil.getDoubleValue(properties,"ProjectionInfo.SemiMinorAxis",true,Double.NaN,false);  inverseFlattening=StringUtil.getDoubleValue(properties,"ProjectionInfo.InverseFlattening",false,Double.NaN,false);  gcsPrimeMeridianLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.GCSPrimeMeridianLon",false,Double.NaN,false);  projCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.ProjectionCode",true,0,false);  pcsCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.ProjectionCoordinateSystemCode",true,0,false);  coordTransformCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.CoordTransformCode",true,0,false);  stdParallel1=StringUtil.getDoubleValue(properties,"ProjectionInfo.StdParallel1",false,Double.NaN,false);  poleLat=(int)(Math.signum(stdParallel1) * 90);  stdParallel2=StringUtil.getDoubleValue(properties,"ProjectionInfo.StdParallel1",false,Double.NaN,false);  naturalOriginLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.NaturalOriginLon",false,Double.NaN,false);  naturalOriginLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.NaturalOriginLat",false,Double.NaN,false);  falseOriginLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseOriginLon",false,Double.NaN,false);  falseOriginLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseOriginLat",false,Double.NaN,false);  falseEasting=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseEasting",false,Double.NaN,false);  falseNorthing=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseNorthing",false,Double.NaN,false);  centerEasting=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterEasting",false,Double.NaN,false);  centerNorthing=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterNorthing",false,Double.NaN,false);  centerLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterLon",false,Double.NaN,false);  centerLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterLat",false,Double.NaN,false);  scaleAtNaturalOrigin=StringUtil.getDoubleValue(properties,"ProjectionInfo.ScaleAtNaturalOrigin",false,Double.NaN,false);  scaleAtCenter=StringUtil.getDoubleValue(properties,"ProjectionInfo.ScaleAtCenter",false,Double.NaN,false);  azimuth=StringUtil.getDoubleValue(properties,"ProjectionInfo.Azimuth",false,Double.NaN,false);  straightVertPoleLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.StraightVertPoleLon",false,Double.NaN,false);  gcsCitation=StringUtil.getStringValue(properties,"ProjectionInfo.GCSCitation",null,false);  pcsCitation=StringUtil.getStringValue(properties,"ProjectionInfo.PCSCitation",null,false);  projLinearUnits=StringUtil.getStringValue(properties,"ProjectionInfo.ProjLinearUnits","meter",false);  if (coordTransformCode == GeoKey.Code_Undefined) {    String citation=(pcsCitation == null ? "" : pcsCitation.toLowerCase());    if (citation.contains("mercator") && (citation.contains("web") || citation.contains("pseudo") || citation.contains("global"))) {      coordTransformCode=GeoKey.Code_CT_Mercator;      if (Double.isNaN(naturalOriginLon))       naturalOriginLon=0;      if (Double.isNaN(falseEasting))       falseEasting=0;      if (Double.isNaN(falseNorthing))       falseNorthing=0;      if (citation.contains("auxiliary") && citation.contains("sphere")) {        if (!Double.isNaN(semiMajorAxis))         semiMinorAxis=semiMajorAxis; else {          semiMajorAxis=SEMI_MAJOR_AXIS[0];          semiMinorAxis=SEMI_MINOR_AXIS[0];        }      }    }  }}  }
class C{  public TokenCollector(Collection<String> tokens){  super();  this.tokens=tokens;}  }
class C{  public double eval(double params[]){  return (params[0] + params[1] + params[2]);}  }
class C{  public void invalidateAll(){  cache.invalidateAll();}  }
class C{  public Token<T> expectTokenOfType(T tt) throws ParseException {  Token<T> t=peek();  if (t.type == tt) {    advance();    return t;  }  throw new ParseException(new Message(MessageType.EXPECTED_TOKEN,t.pos,MessagePart.Factory.valueOf(tt.toString()),MessagePart.Factory.valueOf(t.text)));}  }
class C{  public static boolean checkWifiIsActive(Context context){  ConnectivityManager connec=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  android.net.NetworkInfo wifi=connec.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  if (wifi.isConnected()) {    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.603 -0400",hash_original_method="3877B4E9D2F66FA2C87BEEF6C5069074",hash_generated_method="0D1E682E4447FE2C708D85E7CAD83E18") public Metaphone(){  super();}  }
class C{  public static void saveBrokerIP(Context context,String ip){  SharedPreferences.Editor editor=getSharedPreferences(context).edit();  editor.putString(KEY_BROKER_IP,ip);  editor.commit();}  }
class C{  private static <T>int findParameterPosition(ArgumentsSignature formalsSignature,String suppliedName,int[] resultPermutation,int suppliedIndex,boolean hasVarArgs,RBaseNode callingNode,int varArgIndex,boolean forNextMethod,IntFunction<String> errorString,RBuiltinDescriptor builtin){  int found=MatchPermutation.UNMATCHED;  for (int i=0; i < formalsSignature.getLength(); i++) {    String formalName=formalsSignature.getName(i);    if (formalName == null) {      continue;    }    if (formalName.equals(suppliedName)) {      found=i;      if (resultPermutation[found] != MatchPermutation.UNMATCHED) {        if (builtin != null && builtin.getKind() == RBuiltinKind.PRIMITIVE && hasVarArgs) {          found=MatchPermutation.UNMATCHED;        } else {          throw RError.error(callingNode,RError.Message.FORMAL_MATCHED_MULTIPLE,formalName);        }      }      break;    } else     if (!suppliedName.isEmpty() && formalName.startsWith(suppliedName) && ((varArgIndex != ArgumentsSignature.NO_VARARG && i < varArgIndex) || varArgIndex == ArgumentsSignature.NO_VARARG)) {      if (found >= 0) {        throw RError.error(callingNode,RError.Message.ARGUMENT_MATCHES_MULTIPLE,1 + suppliedIndex);      }      found=i;      if (resultPermutation[found] != MatchPermutation.UNMATCHED) {        throw RError.error(callingNode,RError.Message.FORMAL_MATCHED_MULTIPLE,formalName);      }    }  }  if (found >= 0 || hasVarArgs || forNextMethod) {    return found;  }  throw RError.error(callingNode,RError.Message.UNUSED_ARGUMENT,errorString.apply(suppliedIndex));}  }
class C{  public static String instructionString(CodeIterator iter,int pos,ConstPool pool){  int opcode=iter.byteAt(pos);  if (opcode > opcodes.length || opcode < 0)   throw new IllegalArgumentException("Invalid opcode, opcode: " + opcode + " pos: "+ pos);  String opstring=opcodes[opcode];switch (opcode) {case BIPUSH:    return opstring + " " + iter.byteAt(pos + 1);case SIPUSH:  return opstring + " " + iter.s16bitAt(pos + 1);case LDC:return opstring + " " + ldc(pool,iter.byteAt(pos + 1));case LDC_W:case LDC2_W:return opstring + " " + ldc(pool,iter.u16bitAt(pos + 1));case ILOAD:case LLOAD:case FLOAD:case DLOAD:case ALOAD:case ISTORE:case LSTORE:case FSTORE:case DSTORE:case ASTORE:return opstring + " " + iter.byteAt(pos + 1);case IFEQ:case IFGE:case IFGT:case IFLE:case IFLT:case IFNE:case IFNONNULL:case IFNULL:case IF_ACMPEQ:case IF_ACMPNE:case IF_ICMPEQ:case IF_ICMPGE:case IF_ICMPGT:case IF_ICMPLE:case IF_ICMPLT:case IF_ICMPNE:return opstring + " " + (iter.s16bitAt(pos + 1) + pos);case IINC:return opstring + " " + iter.byteAt(pos + 1)+ ", "+ iter.signedByteAt(pos + 2);case GOTO:case JSR:return opstring + " " + (iter.s16bitAt(pos + 1) + pos);case RET:return opstring + " " + iter.byteAt(pos + 1);case TABLESWITCH:return tableSwitch(iter,pos);case LOOKUPSWITCH:return lookupSwitch(iter,pos);case GETSTATIC:case PUTSTATIC:case GETFIELD:case PUTFIELD:return opstring + " " + fieldInfo(pool,iter.u16bitAt(pos + 1));case INVOKEVIRTUAL:case INVOKESPECIAL:case INVOKESTATIC:return opstring + " " + methodInfo(pool,iter.u16bitAt(pos + 1));case INVOKEINTERFACE:return opstring + " " + interfaceMethodInfo(pool,iter.u16bitAt(pos + 1));case INVOKEDYNAMIC:return opstring + " " + iter.u16bitAt(pos + 1);case NEW:return opstring + " " + classInfo(pool,iter.u16bitAt(pos + 1));case NEWARRAY:return opstring + " " + arrayInfo(iter.byteAt(pos + 1));case ANEWARRAY:case CHECKCAST:return opstring + " " + classInfo(pool,iter.u16bitAt(pos + 1));case WIDE:return wide(iter,pos);case MULTIANEWARRAY:return opstring + " " + classInfo(pool,iter.u16bitAt(pos + 1));case GOTO_W:case JSR_W:return opstring + " " + (iter.s32bitAt(pos + 1) + pos);default :return opstring;}}  }
class C{  public void testGetF10Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF10Momentary();  assertEquals(expResult,result);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toString(){  return toString("");}  }
class C{  public void append(int inner,int outer,int name,int flags){  byte[] data=get();  int len=data.length;  byte[] newData=new byte[len + 8];  for (int i=2; i < len; ++i)   newData[i]=data[i];  int n=ByteArray.readU16bit(data,0);  ByteArray.write16bit(n + 1,newData,0);  ByteArray.write16bit(inner,newData,len);  ByteArray.write16bit(outer,newData,len + 2);  ByteArray.write16bit(name,newData,len + 4);  ByteArray.write16bit(flags,newData,len + 6);  set(newData);}  }
class C{  void mirror(){  for (int x=0; x < bitMatrix.getWidth(); x++) {    for (int y=x + 1; y < bitMatrix.getHeight(); y++) {      if (bitMatrix.get(x,y) != bitMatrix.get(y,x)) {        bitMatrix.flip(y,x);        bitMatrix.flip(x,y);      }    }  }}  }
class C{  public StateMachineTransitionBuilder(){  super();}  }
class C{  OutfitColor(RPObject obj){  for (  String key : parts) {    String val=obj.get("outfit_colors",key);    if (val != null) {      try {        int color=Integer.parseInt(val);        map.put(key,new Color(color));      } catch (      NumberFormatException e) {        Logger.getLogger(OutfitColor.class).warn("Invalid color : " + key + "="+ val);      }    }  }}  }
class C{  protected Anonymous_beforeCode_2_Impl(){  super();}  }
class C{  public boolean isDaylight(){  return daylight;}  }
class C{  public static <T,K,U>Collector<T,?,ImmutableMap<K,U>> toImmutableMap(Function<? super T,? extends K> keyMapper,Function<? super T,? extends U> valueMapper){  return Collector.of(null,null,throwingMerger(),null);}  }
class C{  private boolean validateProduct(MProduct product,String BOMType,String BOMUse){  if (!product.isBOM())   return true;  String restriction="BOMType='" + BOMType + "' AND BOMUse='"+ BOMUse+ "'";  MBOM[] boms=MBOM.getOfProduct(getCtx(),p_M_Product_ID,get_TrxName(),restriction);  if (boms.length != 1) {    log.warning(restriction + " - Length=" + boms.length);    return false;  }  if (m_products.contains(product)) {    log.warning(m_product.getName() + " recursively includes " + product.getName());    return false;  }  m_products.add(product);  log.fine(product.getName());  MBOM bom=boms[0];  MBOMProduct[] BOMproducts=MBOMProduct.getOfBOM(bom);  for (int i=0; i < BOMproducts.length; i++) {    MBOMProduct BOMproduct=BOMproducts[i];    MProduct pp=new MProduct(getCtx(),BOMproduct.getM_BOMProduct_ID(),get_TrxName());    if (pp.isBOM())     return validateProduct(pp,bom.getBOMType(),bom.getBOMUse());  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public <T>T unmarshall(byte[] data,Path schemaPath,Class<T> rootClass) throws JAXBException, IOException, SAXException {  JAXBContext context=JAXBContext.newInstance(rootClass);  Unmarshaller unmarshaller=context.createUnmarshaller();  if (null != schemaPath && Files.exists(schemaPath)) {    SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);    try (InputStream inputStream=Files.newInputStream(schemaPath,StandardOpenOption.READ)){      Schema schema=sf.newSchema(new StreamSource(inputStream));      unmarshaller.setSchema(schema);    }   }  try (InputStream inputStream=new ByteArrayInputStream(data)){    return (T)unmarshaller.unmarshal(inputStream);  } }  }
class C{  public static ShaderProgram compile(String vertexShader,String fragmentShader){  String vert;  String frag;  if (Gdx.app.getType() == Application.ApplicationType.WebGL) {    vert=Gdx.files.internal(vertexShader).readString();    frag=Gdx.files.internal(fragmentShader).readString();  } else {    vert=Gdx.files.classpath(vertexShader).readString();    frag=Gdx.files.classpath(fragmentShader).readString();  }  ShaderProgram program=new ShaderProgram(vert,frag);  if (!program.isCompiled()) {    throw new GdxRuntimeException(program.getLog());  }  return program;}  }
class C{  private AFTPClient actionGetFile() throws PageException, IOException {  required("remotefile",remotefile);  required("localfile",localfile);  AFTPClient client=getClient();  Resource local=ResourceUtil.toResourceExistingParent(pageContext,localfile);  pageContext.getConfig().getSecurityManager().checkFileLocation(local);  if (failifexists && local.exists())   throw new ApplicationException("File [" + local + "] already exist, if you want to overwrite, set attribute failIfExists to false");  OutputStream fos=null;  client.setFileType(getType(local));  boolean success=false;  try {    fos=IOUtil.toBufferedOutputStream(local.getOutputStream());    success=client.retrieveFile(remotefile,fos);  }  finally {    IOUtil.closeEL(fos);    if (!success)     local.delete();  }  writeCfftp(client);  return client;}  }
class C{  public boolean isConnected(){  if (client == null) {    return initialState;  } else {    return client.isConnected();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.218 -0500",hash_original_method="ED18C5488875D7977019974254AC4633",hash_generated_method="76CACD2B4965C51B79A8F0DD96135B8A") public static char lowSurrogate(int codePoint){  return (char)((codePoint & 0x3ff) | 0xdc00);}  }
class C{  @Override public MapsCard subTitle(@NotNull String subTitle){  mSubTitle=subTitle;  isSubTitle=true;  return this;}  }
class C{  private void gotoRequests(){  if (m_request_Menu_ID == 0)   m_request_Menu_ID=237;  (new AMenuStartItem(m_request_Menu_ID,true,Msg.translate(m_ctx,"R_Request_ID"),this)).start();}  }
class C{  protected double[] libsvmToArray(String row){  double[] result;  StringTokenizer tok;  int index;  int max;  String col;  double value;  max=0;  tok=new StringTokenizer(row," \t");  tok.nextToken();  while (tok.hasMoreTokens()) {    col=tok.nextToken();    index=Integer.parseInt(col.substring(0,col.indexOf(":")));    if (index > max)     max=index;  }  tok=new StringTokenizer(row," \t");  result=new double[max + 1];  result[result.length - 1]=Double.parseDouble(tok.nextToken());  while (tok.hasMoreTokens()) {    col=tok.nextToken();    index=Integer.parseInt(col.substring(0,col.indexOf(":")));    value=Double.parseDouble(col.substring(col.indexOf(":") + 1));    result[index - 1]=value;  }  return result;}  }
class C{  public static boolean assertNonCyclicGraph(StructuredGraph graph){  List<Node> order=createOrder(graph);  NodeBitMap visited=graph.createNodeBitMap();  visited.clearAll();  for (  Node node : order) {    if (node instanceof PhiNode && ((PhiNode)node).merge() instanceof LoopBeginNode) {      assert visited.isMarked(((PhiNode)node).valueAt(0));    } else {      for (      Node input : node.inputs()) {        if (!visited.isMarked(input)) {          if (input instanceof FrameState) {          } else {            assert false : "unexpected cycle detected at input " + node + " -> "+ input;          }        }      }    }    visited.mark(node);  }  return true;}  }
class C{  protected void updateNode(NodeRef node){  if (COUNT_TOTAL_OPERATIONS)   totalRateUpdateSingleCount++;  treeTraversalDelegate.updateNode(node);  likelihoodKnown=false;}  }
class C{  public void init(byte[] password,byte[] salt){  super.init(password,salt,1);}  }
class C{  public static String strReplace(final String aOldPattern,final String aNewPattern,final String aInput){  if (aOldPattern == null || aOldPattern.equals("")) {    throw new IllegalArgumentException("Old pattern must have content.");  }  if (aInput == null || aInput.equals("")) {    return aInput;  }  if (aNewPattern == null) {    throw new IllegalArgumentException("New pattern must not null.");  }  if (aNewPattern.equals(aOldPattern))   return aInput;  final StringBuffer result=new StringBuffer();  int startIdx=0;  int idxOld=0;  while ((idxOld=aInput.indexOf(aOldPattern,startIdx)) >= 0) {    result.append(aInput.substring(startIdx,idxOld));    result.append(aNewPattern);    startIdx=idxOld + aOldPattern.length();  }  result.append(aInput.substring(startIdx));  return result.toString();}  }
class C{  public void assertAssignable(Type s,Type t){  assertCastable(s,t,true);}  }
class C{  public void testFailoverSecondsBeforeRetryMaster() throws Exception {  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  for (  boolean setSecondsBeforeRetryMaster : new boolean[]{true,false}) {    if (setSecondsBeforeRetryMaster) {      props.setProperty("secondsBeforeRetryMaster","1");    } else {      props.remove("secondsBeforeRetryMaster");    }    Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props);    Statement testStmt=null;    try {      testConn.setAutoCommit(false);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.downHost(HOST_1);      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt=testConn.createStatement();      long startTime=System.currentTimeMillis();      do {        assertSingleValueQuery(testStmt,"SELECT 1",1L);        assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());        try {          Thread.sleep(200);        } catch (        InterruptedException e) {        }      } while (System.currentTimeMillis() - startTime < 2000);      UnreliableSocketFactory.dontDownHost(HOST_1);      UnreliableSocketFactory.dontDownHost(HOST_2);      UnreliableSocketFactory.downHost(HOST_3);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      if (setSecondsBeforeRetryMaster) {        assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);        assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());        assertConnectionsHistory(HOST_1_OK,HOST_2_FAIL,HOST_3_OK,HOST_1_OK);      } else {        assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);        assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());        assertConnectionsHistory(HOST_1_OK,HOST_2_FAIL,HOST_3_OK,HOST_2_OK);      }    }  finally {      if (testStmt != null) {        testStmt.close();      }      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.502 -0500",hash_original_method="AD8C8F2DD7A3862E32E54CE0FBFF67CE",hash_generated_method="A74DCDCC8CEF665CFAAEBCFA9362ED98") public Intent putExtra(String name,int[] value){  mExtras.put(name,value);  return this;}  }
class C{  public RE(){  this((REProgram)null,MATCH_NORMAL);}  }
class C{  private ChannelInfo parseChannelInfo(String json){  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    String name=(String)root.get("name");    long id=((Number)root.get("_id")).longValue();    String status=(String)root.get("status");    String game=(String)root.get("game");    int views=JSONUtil.getInteger(root,"views",-1);    int followers=JSONUtil.getInteger(root,"followers",-1);    long createdAt=-1;    try {      createdAt=Util.parseTime(JSONUtil.getString(root,"created_at"));    } catch (    java.text.ParseException ex) {      LOGGER.warning("Error parsing ChannelInfo: " + ex);    }    return new ChannelInfo(name,id,status,game,createdAt,followers,views);  } catch (  ParseException ex) {    LOGGER.warning("Error parsing ChannelInfo.");    return null;  }catch (  ClassCastException ex) {    LOGGER.warning("Error parsing ChannelInfo: Unexpected type");    return null;  }}  }
class C{  public boolean isPrimitive(){  return getRawClass().isPrimitive();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.603 -0400",hash_original_method="B607BACF1FB1DD166EC9657B6585798A",hash_generated_method="26D7DDB04E4069EB5D60053F63421958") public NameFileFilter(String[] names,IOCase caseSensitivity){  if (names == null) {    throw new IllegalArgumentException("The array of names must not be null");  }  this.names=new String[names.length];  System.arraycopy(names,0,this.names,0,names.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public static Container west(Component west){  return Container.encloseIn(new BorderLayout(),west,BorderLayout.WEST);}  }
class C{  public static void checkDisplayedNotification(){  if (null != mActiveEventStreamService) {    mActiveEventStreamService.checkNotification();  }}  }
class C{  public void calcPercents(){  if (count == 0) {    logger.info("can't divide by zero");    return;  }  if (subItems != null && !subItems.isEmpty()) {    for (    GraphicLogAnalysisResultItem item : subItems) {      item.setPercent((item.getCount() * 100.0f) / count);      item.calcPercents();    }  }}  }
class C{  public static Integer toInteger(String str) throws PageException {  return Integer.valueOf(toIntValue(str));}  }
class C{  public ShortChunks(final long length){  this(length,CHUNK_BITS);}  }
class C{  public long majflt(){  return Long.parseLong(fields[11]);}  }
class C{  public static void lessThan(long value,long maxValue,String name){  if (value <= 0) {    throw new IllegalArgumentException(name + " should be > 0, current value " + value);  }  if (value > maxValue) {    throw new IllegalArgumentException(name + " should be <= " + maxValue+ ", current value "+ value);  }}  }
class C{  public static boolean equals(Repository rep1,Repository rep2) throws RepositoryException {  Set<Statement> model1, model2;  RepositoryConnection con1=rep1.getConnection();  try {    model1=Iterations.asSet(con1.getStatements(null,null,null,true));  }  finally {    con1.close();  }  RepositoryConnection con2=rep2.getConnection();  try {    model2=Iterations.asSet(con2.getStatements(null,null,null,true));  }  finally {    con2.close();  }  return Models.isomorphic(model1,model2);}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  writeText4Links();  if (!ignoreElement(uri,localName,qName,atts)) {    elementLevel++;    nsSupport.pushContext();    if (forceDTD && !hasOutputDTD) {      startDTD(localName == null ? qName : localName,"","");    }    write('<');    writeName(uri,localName,qName,true);    writeAttributes(atts);    if (elementLevel == 1) {      forceNSDecls();    }    if (!mOmitXHTMLNamespace || !"html".equalsIgnoreCase(localName)) {      writeNSDecls();    }    write('>');    if (htmlMode && (qName.equals("script") || qName.equals("style"))) {      cdataElement=true;    }    if (htmlMode && localName.equals("a")) {      mIgnoreChars=true;    }    super.startElement(uri,localName,qName,atts);  }}  }
class C{  protected final void fireVetoableChange(String propertyName,boolean oldValue,boolean newValue) throws PropertyVetoException {  VetoableChangeSupport aVetoSupport=this.vetoSupport;  if (aVetoSupport == null) {    return;  }  aVetoSupport.fireVetoableChange(propertyName,oldValue,newValue);}  }
class C{  protected void beforeShow(Form f){}  }
class C{  public String bagSizePercentTipText(){  return "Size of each bag, as a percentage of the training set size.";}  }
class C{  public synchronized void resetTexture(){  mTextureIds=null;}  }
class C{  protected void processGraph(){  origNodesSize=m_nodes.size();  graphMatrix=new int[m_nodes.size()][m_nodes.size()];  for (int i=0; i < m_edges.size(); i++) {    graphMatrix[m_edges.get(i).src][m_edges.get(i).dest]=m_edges.get(i).type;  }}  }
class C{  private static int indexOfSegmentName(String filename){  int idx=filename.indexOf('_',1);  if (idx == -1) {    idx=filename.indexOf('.');  }  return idx;}  }
class C{  public T expirementVariant(String value){  setString(EXPERIMENT_VARIANT,value);  return (T)this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.200 -0500",hash_original_method="DB214CB3316FBBF79B84FF393892AF1F",hash_generated_method="F5CFE1D0ECCD78ABD40742E04CEB317E") public boolean clipRegion(Region region){  return clipRegion(region,Region.Op.INTERSECT);}  }
class C{  public void writeSubstitutionSiteModel(PartitionSubstitutionModel model,XMLWriter writer){  DataType dataType=model.getDataType();  String dataTypeDescription=dataType.getDescription();switch (dataType.getType()) {case DataType.NUCLEOTIDES:    if (model.isUnlinkedSubstitutionModel()) {      for (int i=1; i <= model.getCodonPartitionCount(); i++) {switch (model.getNucSubstitutionModel()) {case JC:          writeJCModel(i,writer,model);        break;case HKY:      writeHKYModel(i,writer,model);    break;case TN93:  writeTN93Model(i,writer,model);break;case GTR:writeGTRModel(i,writer,model);break;default :throw new IllegalArgumentException("unknown substition model type");}}} else {switch (model.getNucSubstitutionModel()) {case JC:writeJCModel(-1,writer,model);break;case HKY:writeHKYModel(-1,writer,model);break;case TN93:writeTN93Model(-1,writer,model);break;case GTR:writeGTRModel(-1,writer,model);break;default :throw new IllegalArgumentException("unknown substition model type");}}if (model.getCodonPartitionCount() > 1) {for (int i=1; i <= model.getCodonPartitionCount(); i++) {writeNucSiteModel(i,writer,model);}writer.println();} else {writeNucSiteModel(-1,writer,model);}break;case DataType.AMINO_ACIDS:String aaModel=model.getAaSubstitutionModel().getXMLName();writer.writeComment("The " + aaModel + " substitution model");writer.writeTag(EmpiricalAminoAcidModelParser.EMPIRICAL_AMINO_ACID_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,model.getPrefix() + "aa"),new Attribute.Default<String>("type",aaModel)},true);writeAASiteModel(writer,model);break;case DataType.TWO_STATES:case DataType.COVARION:switch (model.getBinarySubstitutionModel()) {case BIN_DOLLO:return;case BIN_SIMPLE:writeBinarySimpleModel(writer,model);break;case BIN_COVARION:writeBinaryCovarionModel(writer,model);break;}writeTwoStateSiteModel(writer,model);break;case DataType.GENERAL:case DataType.CONTINUOUS:break;case DataType.MICRO_SAT:writeMicrosatSubstModel(model,writer);break;default :throw new IllegalArgumentException("Unknown data type");}}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public boolean addEdge(E e,V v1,V v2,EdgeType edgeType){  return addChild(e,v1,v2,edgeType);}  }
class C{  public double distance(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static boolean isLegalIdentifier(String name){  if (name.isEmpty()) {    return false;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    return false;  }  int i=1;  while (i < name.length()) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      return false;    }    i=i + 1;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.023 -0500",hash_original_method="4EC419240BFE2C77CEA52FEAD03950B4",hash_generated_method="1CF802A9363264A910B48D0AEDA119CA") public static void scaleM(float[] sm,int smOffset,float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int smi=smOffset + i;    int mi=mOffset + i;    sm[smi]=m[mi] * x;    sm[4 + smi]=m[4 + mi] * y;    sm[8 + smi]=m[8 + mi] * z;    sm[12 + smi]=m[12 + mi];  }}  }
class C{  public ResultMatrixCSV(int cols,int rows){  super(cols,rows);}  }
class C{  public static void publish(String topic,Message message){  client().publish(topic,message);}  }
class C{  public void open() throws IOException {  if (!append) {    new File(fileName).delete();  }  try {    mem=new MemoryMappedFile(fileName,fileSize);  } catch (  Exception e) {    throw new IOException("Unable to open the file: " + fileName,e);  }  if (append) {    mem.compareAndSwapLong(Structure.Limit,0,Structure.Data);  } else {    mem.putLongVolatile(Structure.Limit,Structure.Data);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TYPE;case 2:  return HELLO;case 3:return ERROR;case 4:return ECHO_REQUEST;case 5:return ECHO_REPLY;case 6:return GET_REQUEST;case 7:return GET_RESPONSE;case 8:return PUT_REQUEST;case 9:return PUT_RESPONSE;case 10:return DELETE_REQUEST;case 11:return DELETE_RESPONSE;case 12:return SYNC_VALUE;case 13:return SYNC_VALUE_RESPONSE;case 14:return SYNC_OFFER;case 15:return SYNC_REQUEST;case 16:return FULL_SYNC_REQUEST;case 17:return CURSOR_REQUEST;case 18:return CURSOR_RESPONSE;case 19:return REGISTER_REQUEST;case 20:return REGISTER_RESPONSE;case 21:return CLUSTER_JOIN_REQUEST;case 22:return CLUSTER_JOIN_RESPONSE;default :return null;}}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == DelegatingMember.class) {switch (baseFeatureID) {case ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE:      return ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_BASE_TYPE;case ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS:    return ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET:  return ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT:return ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected ElemVariable createGlobalPseudoVarDecl(QName uniquePseudoVarName,StylesheetRoot stylesheetRoot,LocPathIterator lpi) throws org.w3c.dom.DOMException {  ElemVariable psuedoVar=new ElemVariable();  psuedoVar.setIsTopLevel(true);  XPath xpath=new XPath(lpi);  psuedoVar.setSelect(xpath);  psuedoVar.setName(uniquePseudoVarName);  Vector globalVars=stylesheetRoot.getVariablesAndParamsComposed();  psuedoVar.setIndex(globalVars.size());  globalVars.addElement(psuedoVar);  return psuedoVar;}  }
class C{  public Builder from(Context context){  this.context=context;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void updateNClob(String columnLabel,Reader x) throws SQLException {  updateClob(columnLabel,x,-1);}  }
class C{  public void writeln(char[] cbuf) throws IOException {  super.write(cbuf);  newLine();}  }
class C{  private void init(AttributeSet attrs){  if (attrs != null) {    TypedArray styled=getContext().obtainStyledAttributes(attrs,R.styleable.SlideListView);    mAnimationTime=styled.getInteger(R.styleable.SlideListView_slideAnimationTime,0);    mSlideMode=SlideMode.mapIntToValue(styled.getInteger(R.styleable.SlideListView_slideMode,0));    mSlideLeftAction=SlideAction.mapIntToValue(styled.getInteger(R.styleable.SlideListView_slideLeftAction,0));    mSlideRightAction=SlideAction.mapIntToValue(styled.getInteger(R.styleable.SlideListView_slideRightAction,0));    styled.recycle();  }  mTouchListener=new SlideTouchListener(this);  setOnTouchListener(mTouchListener);  setOnScrollListener(mInnerOnScrollListener);  setOnItemClickListener(mInnerOnItemClickListener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:05.756 -0500",hash_original_method="68D301E431D7353AD53EDFB6C8ED3163",hash_generated_method="AF72884F65C02B3183785566EAE60CF1") public void contextDump(){  validate();  nContextDump(0);}  }
class C{  private void subscribe(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String actionTaken=context.getString(R.string.toast_sub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);  System.out.print(actionTaken);}  }
class C{  public static void main(String[] args){  System.out.println("\n The e values for i = 100 to 1000:");  System.out.println("-----------------------------------");  System.out.println(" i                e");  System.out.println("-----------------------------------");  for (BigDecimal i=new BigDecimal("100"); i.compareTo(new BigDecimal("1000")) <= 0; i=i.add(new BigDecimal("100"))) {    System.out.println(i + "    " + getE(i));  }}  }
class C{  private static Map<URI,Set<StoragePort>> generateNetworkToStoragePortsMap(Map<Initiator,List<StoragePort>> existingAssignments){  Map<URI,Set<StoragePort>> network2StoragePortsMap=new HashMap<URI,Set<StoragePort>>();  if (existingAssignments == null) {    return network2StoragePortsMap;  }  for (  List<StoragePort> ports : existingAssignments.values()) {    for (    StoragePort port : ports) {      if (port.getRegistrationStatus().toString().equals(DiscoveredDataObject.RegistrationStatus.REGISTERED.name()) && DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(port.getCompatibilityStatus()) && DiscoveryStatus.VISIBLE.name().equals(port.getDiscoveryStatus())) {        if (network2StoragePortsMap.get(port.getNetwork()) == null) {          network2StoragePortsMap.put(port.getNetwork(),new HashSet<StoragePort>());        }        network2StoragePortsMap.get(port.getNetwork()).add(port);      }    }  }  return network2StoragePortsMap;}  }
class C{  protected Caret createCaret(){  return MotifTextUI.createCaret();}  }
class C{  public static <T>Supplier<T> memoizeWithShortExpiration(Supplier<T> original){  return memoizeForDuration(original,ENVIRONMENT.config().getSingletonCacheRefreshDuration());}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s, task: %s",this.getJobName(),_status.name(),opId));    if (_status == JobStatus.SUCCESS) {      List<LogicalUnit> luList=(List<LogicalUnit>)_javaResult.getBean(HDSConstants.LOGICALUNIT_LIST_BEAN_NAME);      List<String> luObjectIdList=new ArrayList<String>();      if (null != luList && !luList.isEmpty()) {        for (        LogicalUnit lu : luList) {          luObjectIdList.add(lu.getObjectID());        }      }      if (luObjectIdList.size() != count) {        logMsgBuilder.append("\n");        logMsgBuilder.append(String.format("   Failed to create required number %s of meta members for meta head %s, task: %s .",count,metaHead.getLabel(),opId));        _log.error(logMsgBuilder.toString());        setFailedStatus(logMsgBuilder.toString());      } else {        logMsgBuilder.append("\n");        logMsgBuilder.append(String.format("   Created required number %s of meta members for meta head %s, task: %s .",count,metaHead.getLabel(),opId));        metaMembers.addAll(luObjectIdList);        logMsgBuilder.append(String.format("%n Meta member device ID's: %s",metaMembers));        _log.info(logMsgBuilder.toString());      }    } else     if (_status == JobStatus.FAILED) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to create meta members for meta head volume: %s",opId,metaHead.getLabel()));      _log.error(logMsgBuilder.toString());      setFailedStatus(logMsgBuilder.toString());    }  } catch (  Exception e) {    _log.error("Caught an exception while trying to updateStatus for " + this.getJobName(),e);    setErrorStatus("Encountered an internal error during " + this.getJobName() + " job status processing : "+ e.getMessage());  } finally {    metaVolumeTaskCompleter.setLastStepStatus(_status);    if (_status != JobStatus.IN_PROGRESS) {      String opId=metaVolumeTaskCompleter.getVolumeTaskCompleter().getOpId();      WorkflowService.getInstance().storeStepData(opId,metaMembers);      _log.debug("Set meta members for meta volume in WF. Members: {}",metaMembers);    }    if (_status == Job.JobStatus.FAILED || _status == Job.JobStatus.ERROR) {      super.updateStatus(jobContext);    }  }}  }
class C{  public OPTRecord(int payloadSize,int xrcode,int version){  this(payloadSize,xrcode,version,0,null);}  }
class C{  public final static int skipSpaces(final String in,final int start){  int pos=start;  while (pos < in.length() && (in.charAt(pos) == ' ' || in.charAt(pos) == '\n')) {    pos++;  }  return pos < in.length() ? pos : -1;}  }
class C{  public void paintOptionPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public LambdaMapper(final Mapper wrapped){  super(wrapped);}  }
class C{  protected void processView(long newViewId,NetView newView){  if (logger.isDebugEnabled()) {    StringBuilder msg=new StringBuilder(200);    msg.append("Membership: Processing view ");    msg.append(newView);    msg.append("} on ").append(address.toString());    logger.debug(msg);    if (!newView.contains(address)) {      logger.info(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_THE_MEMBER_WITH_ID_0_IS_NO_LONGER_IN_MY_OWN_VIEW_1,new Object[]{address,newView}));    }  }  latestViewWriteLock.lock();  try {    Version version=Version.CURRENT;    for (    final Entry<InternalDistributedMember,Long> internalDistributedMemberLongEntry : surpriseMembers.entrySet()) {      InternalDistributedMember mbr=internalDistributedMemberLongEntry.getKey();      Version itsVersion=mbr.getVersionObject();      if (itsVersion != null && version.compareTo(itsVersion) < 0) {        version=itsVersion;      }    }    for (    InternalDistributedMember mbr : newView.getMembers()) {      Version itsVersion=mbr.getVersionObject();      if (itsVersion != null && itsVersion.compareTo(version) < 0) {        version=mbr.getVersionObject();      }    }    disableMulticastForRollingUpgrade=!version.equals(Version.CURRENT);    if (newViewId < latestViewId) {      return;    }    NetView priorView=latestView;    latestViewId=newViewId;    latestView=new NetView(newView,newView.getViewId());    for (int i=0; i < newView.getMembers().size(); i++) {      InternalDistributedMember m=newView.getMembers().get(i);      boolean wasSurprise=surpriseMembers.remove(m) != null;      suspectedMembers.remove(m);      if (priorView.contains(m) || wasSurprise) {        continue;      }      String authInit=this.services.getConfig().getDistributionConfig().getSecurityPeerAuthInit();      boolean isSecure=authInit != null && authInit.length() != 0;      if (isSecure) {        CountDownLatch currentLatch;        if ((currentLatch=memberLatch.get(m)) != null) {          currentLatch.countDown();        }      }      if (shutdownInProgress()) {        addShunnedMember(m);        continue;      } else {        boolean wasShunned=endShun(m);        if (wasShunned && logger.isDebugEnabled()) {          logger.debug("No longer shunning {} as it is in the current membership view",m);        }      }      logger.info(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_MEMBERSHIP_PROCESSING_ADDITION__0_,m));      try {        listener.newMemberConnected(m);      } catch (      VirtualMachineError err) {        SystemFailure.initiateFailure(err);        throw err;      }catch (      DistributedSystemDisconnectedException e) {      }catch (      Throwable t) {        SystemFailure.checkFailure();        logger.info(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_MEMBERSHIP_FAULT_WHILE_PROCESSING_VIEW_ADDITION_OF__0,m),t);      }    }    for (int i=0; i < priorView.getMembers().size(); i++) {      InternalDistributedMember m=priorView.getMembers().get(i);      if (newView.contains(m)) {        continue;      }      if (surpriseMembers.containsKey(m)) {        continue;      }      try {        removeWithViewLock(m,newView.getCrashedMembers().contains(m) || suspectedMembers.containsKey(m),"departed membership view");      } catch (      VirtualMachineError err) {        SystemFailure.initiateFailure(err);        throw err;      }catch (      Throwable t) {        SystemFailure.checkFailure();        logger.info(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_MEMBERSHIP_FAULT_WHILE_PROCESSING_VIEW_REMOVAL_OF__0,m),t);      }    }    long oldestAllowed=System.currentTimeMillis() - this.surpriseMemberTimeout;    for (Iterator<Map.Entry<InternalDistributedMember,Long>> it=surpriseMembers.entrySet().iterator(); it.hasNext(); ) {      Map.Entry<InternalDistributedMember,Long> entry=it.next();      Long birthtime=entry.getValue();      if (birthtime.longValue() < oldestAllowed) {        it.remove();        InternalDistributedMember m=entry.getKey();        logger.info(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_MEMBERSHIP_EXPIRING_MEMBERSHIP_OF_SURPRISE_MEMBER_0,m));        removeWithViewLock(m,true,"not seen in membership view in " + this.surpriseMemberTimeout + "ms");      } else {        if (!latestView.contains(entry.getKey())) {          latestView.add(entry.getKey());        }      }    }    final long suspectMemberTimeout=180000;    oldestAllowed=System.currentTimeMillis() - suspectMemberTimeout;    for (Iterator it=suspectedMembers.entrySet().iterator(); it.hasNext(); ) {      Map.Entry entry=(Map.Entry)it.next();      Long birthtime=(Long)entry.getValue();      if (birthtime.longValue() < oldestAllowed) {        it.remove();      }    }    try {      listener.viewInstalled(latestView);      startCleanupTimer();    } catch (    DistributedSystemDisconnectedException se) {    }  }  finally {    latestViewWriteLock.unlock();  }}  }
class C{  public boolean hasParameter(String name){  return authParams.getNameValue(name) != null;}  }
class C{  public E putString(final String key,@Nullable final String value){  this.bundle.putString(key,value);  return (E)this;}  }
class C{  private void makeLoopHeader(BciBlock block){  if (!block.isLoopHeader) {    block.isLoopHeader=true;    if (block.isExceptionEntry) {      throw new BailoutException("Loop formed by an exception handler");    }    if (nextLoop >= LOOP_HEADER_MAX_CAPACITY) {      throw new BailoutException("Too many loops in method");    }    assert block.loops == 0;    block.loops=1L << nextLoop;    Debug.log("makeLoopHeader(%s) -> %x",block,block.loops);    if (loopHeaders == null) {      loopHeaders=new BciBlock[LOOP_HEADER_INITIAL_CAPACITY];    } else     if (nextLoop >= loopHeaders.length) {      loopHeaders=Arrays.copyOf(loopHeaders,LOOP_HEADER_MAX_CAPACITY);    }    loopHeaders[nextLoop]=block;    block.loopId=nextLoop;    nextLoop++;  }  assert Long.bitCount(block.loops) == 1;}  }
class C{  public boolean isEffectEdge(double bump){  return bump > 0;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.STATECHART_ROOT__DEF:    setDef((StatechartSpecification)null);  return;}super.eUnset(featureID);}  }
class C{  public void testReceiveResponse() throws Exception {  SimpleResponseCollector collector=new SimpleResponseCollector();  Request bindingRequest=MessageFactory.createBindingRequest();  stunStack.sendRequest(bindingRequest,dummyServerAddress,localAddress,collector);  collector.waitForResponse();  byte response[]=new byte[msgFixture.bindingResponse.length];  System.arraycopy(msgFixture.bindingResponse,0,response,0,response.length);  System.arraycopy(bindingRequest.getTransactionID(),0,response,8,12);  dummyServerSocket.send(new DatagramPacket(response,response.length,localAddress));  collector.waitForResponse();  Response collectedResponse=collector.collectedResponse;  byte expectedReturn[]=response;  byte actualReturn[]=collectedResponse.encode(stunStack);  assertTrue("Received request was not the same as the one that was sent",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public static List<URI> uris(Collection<String> values){  List<URI> results=new ArrayList<URI>();  if (values != null) {    for (    String value : values) {      URI uri=uri(value);      if (uri != null) {        results.add(uri);      }    }  }  return results;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static JFreeChart createChart(){  XYSeries series1=new XYSeries("Series 1");  series1.add(1.0,1.0);  series1.add(2.0,2.0);  series1.add(3.0,3.0);  XYDataset dataset=new XYSeriesCollection(series1);  return ChartFactory.createXYAreaChart("Area Chart","Domain","Range",dataset);}  }
class C{  @NonNull public static Animator color(int from,int to){  return color(from,to,0);}  }
class C{  public static boolean isEmpty(Map<?,?> map){  if (map == null || map.isEmpty() || map.size() == 0) {    return true;  } else {    return false;  }}  }
class C{  public boolean isCheckingNormalization(){  return checkingNormalization;}  }
class C{  private void handleSubmitButton(){  String username=usernameField.getText();  String password=new String(passwordField.getPassword());  if (authenticate(username,password)) {    new ChooseSpreadsheetFrame(service);    dispose();  }}  }
class C{  private void emitListAdd(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getListAdderName(fieldName));  builder.append("(");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),0));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".add(v);\n");  builder.append("    }\n\n");}  }
class C{  @Override public String toString(){  return "JobDetail '" + getFullName() + "':  jobClass: '"+ ((getJobClass() == null) ? null : getJobClass().getName())+ " concurrentExectionDisallowed: "+ isConcurrentExectionDisallowed()+ " persistJobDataAfterExecution: "+ isPersistJobDataAfterExecution()+ " isDurable: "+ isDurable()+ " requestsRecovers: "+ requestsRecovery();}  }
class C{  private void checkLauncherMod(){  if (LConsts.LAUNCHER_VERSION.equals(modules.getLauncherMod().getVersion()))   validateModule(modules.getLauncherMod(),false); else   updateModule(modules.getLauncherMod(),false,false);  acknowledgeModChecked();}  }
class C{  public ShowHistoryAction(TestResultsView view){  super("Show History",IAction.AS_DROP_DOWN_MENU);  this.view=view;  setToolTipText("Show list of recent test sessions.");  setImageDescriptor(TesterUiActivator.getImageDescriptor(TesterUiActivator.ICON_HISTORY));  setMenuCreator(new HistoryMenuCreator());}  }
class C{  private static void printProfiles(Profiles profiles){  System.out.println("\n----- Profiles Collection -----\n");  for (  Profile profile : profiles.getItems()) {    System.out.println("Account ID: " + profile.getAccountId());    System.out.println("Web Property ID: " + profile.getWebPropertyId());    System.out.println("Web Property Internal ID: " + profile.getInternalWebPropertyId());    System.out.println("Profile ID: " + profile.getId());    System.out.println("Profile Name: " + profile.getName());    System.out.println("Profile defaultPage: " + profile.getDefaultPage());    System.out.println("Profile Exclude Query Parameters: " + profile.getExcludeQueryParameters());    System.out.println("Profile Site Search Query Parameters: " + profile.getSiteSearchQueryParameters());    System.out.println("Profile Site Search Category Parameters: " + profile.getSiteSearchCategoryParameters());    System.out.println("Profile Currency: " + profile.getCurrency());    System.out.println("Profile Timezone: " + profile.getTimezone());    System.out.println("Profile Created: " + profile.getCreated());    System.out.println("Profile Updated: " + profile.getUpdated());  }}  }
class C{  private boolean createEv(final Packet p){  if (Cfg.DEBUG) {    Check.ensures(!evidences.containsKey(p.getId()),"evidence already mapped");  }  final byte[] additional=p.getAdditional();  final Evidence evidence=new Evidence(p.getType());  if (evidence.createEvidence(additional)) {    evidences.put(p.getId(),evidence);  }  return true;}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  private Collection<URI> removeDuplicateURIs(Collection<URI> uris){  HashSet<URI> set=new HashSet<URI>();  set.addAll(uris);  return set;}  }
class C{  public static GeoPolygonQueryBuilder geoPolygonQuery(String name){  return new GeoPolygonQueryBuilder(name);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSIONED_VALUE:return isSetVersionedValue();case VALUE:return isSetValue();}throw new IllegalStateException();}  }
class C{  protected String doIt() throws Exception {  CreatePOS();  createAdmin();  return "@OK@";}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.713 -0500",hash_original_method="9BEAEBDCB82386F5F7FA70BDCB71E5C3",hash_generated_method="88EFC201D528182B951D509F3434C52E") @SuppressWarnings("deprecation") @Deprecated public static void runFinalizersOnExit(boolean flag){}  }
class C{  public TemplateBuffer updateBuffer() throws MalformedTreeException, BadLocationException {  checkState();  TemplateVariable[] variables=fBuffer.getVariables();  try {    removeRangeMarkers(fPositions,fDocument,variables);  } catch (  BadPositionCategoryException x) {    Assert.isTrue(false);  }  fBuffer.setContent(fDocument.get(),variables);  fDocument=null;  return fBuffer;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild=null;  Node newChild;  Node child;  String childName;  Node insertedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("newChild");  insertedNode=employeeNode.insertBefore(newChild,refChild);  child=employeeNode.getLastChild();  childName=child.getNodeName();  assertEquals("nodeInsertBeforeRefChildNullAssert1","newChild",childName);}  }
class C{  public void assertGrabPoints(){  int rt=getGraphic().getRenderType();  if (rt != lastRenderType) {    clearGrabPoints();    lastRenderType=rt;  }  if (gpnw == null) {    gpnw=new GrabPoint(-1,-1);    gPoints[NW_POINT_INDEX]=gpnw;  }  if (gpne == null) {    gpne=new GrabPoint(-1,-1);    gPoints[NE_POINT_INDEX]=gpne;  }  if (gpsw == null) {    gpsw=new GrabPoint(-1,-1);    gPoints[SW_POINT_INDEX]=gpsw;  }  if (gpse == null) {    gpse=new GrabPoint(-1,-1);    gPoints[SE_POINT_INDEX]=gpse;  }  if (gpc == null) {    gpc=new OffsetGrabPoint(-1,-1);    gPoints[CENTER_POINT_INDEX]=gpc;    if (getGraphic().getRenderType() != OMGraphic.RENDERTYPE_LATLON) {      gpc.addGrabPoint(gpnw);      gpc.addGrabPoint(gpne);      gpc.addGrabPoint(gpsw);      gpc.addGrabPoint(gpse);    }  }  if (gpo == null) {    gpo=new OffsetGrabPoint(-1,-1);    gPoints[OFFSET_POINT_INDEX]=gpo;    gpo.addGrabPoint(gpc);  }}  }
class C{  private void trace(){  glUseProgram(computeProgram);  glDisable(GL_DEPTH_TEST);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,positionTexture,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,normalTexture,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glUseProgram(0);  frameNumber++;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.733 -0500",hash_original_method="BB906BFFF3DF010D02CEEC7D1D49931B",hash_generated_method="BB906BFFF3DF010D02CEEC7D1D49931B") void onCancel(){  onUp();}  }
class C{  public boolean isCmd(){  return this.cmd;}  }
class C{  public boolean isColumnMandatory(int index){  if (index < 0 || index >= m_columns.length)   return false;  return m_columns[index].IsMandatory;}  }
class C{  public void removeAllRecords(int section){  sections[section]=null;  header.setCount(section,0);}  }
class C{  public boolean equals(Object other){  if (other instanceof parse_action)   return equals((parse_action)other); else   return false;}  }
class C{  public ProcessVar(Map map){  if (map != null) {    putAll(map);  }}  }
class C{  public ChemicalPairOutput(GasStack left,GasStack right){  leftGas=left;  rightGas=right;}  }
class C{  public T take(Object key){  return remove(key);}  }
class C{  public static String login(HttpServletRequest request,HttpServletResponse response){  Element rootElement=getRootElement(request);  String result="error";  if (rootElement != null) {    String className=UtilXml.childElementValue(rootElement,"AuthenticationHandler","org.ofbiz.ldap.openldap.OFBizLdapAuthenticationHandler");    try {      Class<?> handlerClass=Class.forName(className);      InterfaceOFBizAuthenticationHandler authenticationHandler=(InterfaceOFBizAuthenticationHandler)handlerClass.newInstance();      result=authenticationHandler.login(request,response,rootElement);    } catch (    ClassNotFoundException e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }catch (    InstantiationException e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }catch (    IllegalAccessException e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }catch (    NamingException e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }catch (    Exception e) {      Debug.logError(e,"Error calling userLogin service",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);    }  }  if (result.equals("error")) {    boolean useOFBizLoginWhenFail=Boolean.getBoolean(UtilXml.childElementValue(rootElement,"UseOFBizLoginWhenLDAPFail","false"));    if (useOFBizLoginWhenFail) {      return LoginWorker.login(request,response);    }  }  return result;}  }
class C{  public void putTOKEN(long token){  putDWORD(token);}  }
class C{  public String convertShiftOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static long generate(long crc,int ch){  return next(crc,ch);}  }
class C{  public void save(String name){  save(new File(name));}  }
class C{  private String generateRouteHash(ArrayList<TransitStopFacility> stopsToBeServed){  StringBuffer sB=null;  for (  TransitStopFacility transitStopFacility : stopsToBeServed) {    if (sB == null) {      sB=new StringBuffer();      sB.append(transitStopFacility.getId().toString());    } else {      sB.append("-");      sB.append(transitStopFacility.getId().toString());    }  }  return sB.toString();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public ListProviderCreator(SentenceList sent,EditorCreator prov){  this.sent=sent;  this.prov=prov;  params=null;}  }
class C{  public void test_addressing(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final ArrayList<Integer> sizes=new ArrayList<Integer>();    final TreeMap<Long,Integer> paddrs=new TreeMap<Long,Integer>();    for (int i=0; i < 100000; i++) {      final int s=r.nextInt(250) + 1;      sizes.add(s);      final int a=rw.alloc(s,null);      final long pa=rw.physicalAddress(a);      assertTrue(paddrs.get(pa) == null);      paddrs.put(pa,a);    }    for (int i=0; i < 50; i++) {      final int s=r.nextInt(500) + 1;      sizes.add(s);      final int a=rw.alloc(s,null);      final long pa=rw.physicalAddress(a);      paddrs.put(pa,a);    }  }  finally {    store.destroy();  }}  }
class C{  public void prune(){  ConstPool cp=compact0();  ArrayList newAttributes=new ArrayList();  AttributeInfo invisibleAnnotations=getAttribute(AnnotationsAttribute.invisibleTag);  if (invisibleAnnotations != null) {    invisibleAnnotations=invisibleAnnotations.copy(cp,null);    newAttributes.add(invisibleAnnotations);  }  AttributeInfo visibleAnnotations=getAttribute(AnnotationsAttribute.visibleTag);  if (visibleAnnotations != null) {    visibleAnnotations=visibleAnnotations.copy(cp,null);    newAttributes.add(visibleAnnotations);  }  AttributeInfo signature=getAttribute(SignatureAttribute.tag);  if (signature != null) {    signature=signature.copy(cp,null);    newAttributes.add(signature);  }  ArrayList list=methods;  int n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    minfo.prune(cp);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    finfo.prune(cp);  }  attributes=newAttributes;  constPool=cp;}  }
class C{  private static void fixUp(SimpleGroup parent){  for (  SimpleGroup group : parent.group) {    group.parent=parent;    group.database=parent.database;    fixUp(group);  }  for (  SimpleEntry entry : parent.entry) {    entry.database=parent.database;    entry.parent=parent;  }}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public FailureConfig(int numMaxRetries,long numMaxTotalFailAllowed){  this(numMaxRetries,numMaxTotalFailAllowed,new DefaultLogSidelineStrategy());}  }
class C{  public void changeAnimationTime(long animationTime){  stopAnimation();  setAnimationTime(animationTime);  reinitialize();}  }
class C{  public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,String facetField,boolean facetFieldMultivalued,BytesRef facetPrefix,int initialSize){  if (facetFieldMultivalued) {    return new MV(groupField,facetField,facetPrefix,initialSize);  } else {    return new SV(groupField,facetField,facetPrefix,initialSize);  }}  }
class C{  public VFSURIParser(final String fileURI){  this(fileURI,true);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public int register(Import importSource){  int id=registry.size() + 1;  registry.put(id,importSource);  return id;}  }
class C{  public static void error(String trace) throws Error {  log.error(trace);  throw new Error(trace);}  }
class C{  public DERSet(){}  }
class C{  public boolean isString(int key){  return get(key) instanceof String;}  }
class C{  public void startDocument() throws SAXException {  if (delayedPrefixes != null) {    delayedPrefixes.clear();  }  state=STATE_OUTSIDE;  curIndent=0;  if (isDeclarating() && w != null) {    try {      w.write("<?xml version=\"1.0\"");      String enc=getEncoding();      if (enc != null) {        w.write(" encoding=\"");        w.write(enc);        w.write("\"");      }      w.write("?>");      if (isIndenting()) {        String lf=getLineFeed();        if (lf != null) {          w.write(lf);        }      }    } catch (    IOException e) {      throw new SAXException("Failed to write XML declaration: " + e.getMessage(),e);    }  }}  }
class C{  public AttendeeType(){  super(KEY);}  }
class C{  public List<StoragePort> allocatePortsForNetwork(int portsRequested,PortAllocationContext context,boolean checkConnectivity,Collection<StoragePort> previouslyAllocatedPorts,boolean allowFewerPorts) throws PlacementException {  List<StoragePort> allocatedStoragePorts=new ArrayList<StoragePort>();  _log.info(String.format("Attempting to allocate %d storage ports for Initiator Network: %s",new Integer(portsRequested),context._initiatorNetwork.getLabel()));  if (checkConnectivity) {    checkForUnconnectedPorts(context);  }  Set<String> allocatedPorts=new HashSet<String>();  Set<String> allocatedEngines=new HashSet<String>();  Set<String> allocatedDirectorTypes=new HashSet<String>();  Set<String> allocatedDirectors=new HashSet<String>();  Set<String> allocatedCpus=new HashSet<String>();  Set<String> allocatedSwitches=new HashSet<String>();  StoragePort allocatedPort=null;  if (previouslyAllocatedPorts != null) {    for (    StoragePort port : previouslyAllocatedPorts) {      allocatedPort=port;      _log.info(String.format("Previously allocated port %s (%s) (may be reused)",port.getPortName(),port.getPortNetworkId()));      allocatePort(port,allocatedPorts,allocatedEngines,allocatedDirectorTypes,allocatedDirectors,allocatedCpus,allocatedSwitches,allocatedStoragePorts,context);    }    _log.info("Previously allocated engines: " + allocatedEngines.toString());    _log.info("Previously allocated director types: " + allocatedDirectorTypes.toString());    _log.info("Previously allocated directors: " + allocatedDirectors.toString());    _log.info("Previously allocated cpus: " + allocatedCpus.toString());    _log.info("Previously allocated switches: " + allocatedSwitches.toString());    allocatedPort=null;  } else {    allocatedEngines.addAll(context._alreadyAllocatedEngines);    _log.info("Already allocated engines: " + context._alreadyAllocatedEngines.toString());    allocatedDirectorTypes.addAll(context._alreadyAllocatedDirectorTypes);    _log.info("Already allocated director types: " + context._alreadyAllocatedDirectorTypes.toString());    allocatedDirectors.addAll(context._alreadyAllocatedDirectors);    _log.info("Already allocated directors: " + context._alreadyAllocatedDirectors.toString());    allocatedCpus.addAll(context._alreadyAllocatedCpus);    _log.info("Already allocated cpus: " + context._alreadyAllocatedCpus.toString());    allocatedSwitches.addAll(context._alreadyAllocatedSwitches);    _log.info("Already allocated switches: " + context._alreadyAllocatedSwitches.toString());  }  for (int nAllocatedPaths=allocatedPorts.size(); nAllocatedPaths < portsRequested; nAllocatedPaths++) {    Map<String,StoragePort> candidateMap=new HashMap<String,StoragePort>(context._addressToStoragePort);    for (    String wwpn : allocatedPorts) {      candidateMap.remove(wwpn);    }    Set<StoragePort> candidates=new HashSet<StoragePort>(candidateMap.values());    if (candidates.isEmpty()) {      _log.warn(String.format("Cannot allocate any more ports; have already allocated %s ports",allocatedStoragePorts.size()));      if (allocatedStoragePorts.size() < portsRequested && allowFewerPorts == false) {        throw PlacementException.exceptions.cannotAllocateRequestedPorts(context._initiatorNetwork.getLabel(),context._systemName,portsRequested,allocatedStoragePorts.size(),context._addressToStoragePort.keySet().size());      }      break;    }    candidates=filterRule17(candidates,allocatedPort,allocatedPorts,allocatedDirectors,context);    candidates=filterCandidates(candidates,allocatedDirectorTypes,context._directorTypeToStoragePortSet);    candidates=filterCandidates(candidates,allocatedEngines,context._engineToStoragePortSet);    candidates=filterCandidates(candidates,allocatedDirectors,context._directorToStoragePortSet);    candidates=filterCandidates(candidates,allocatedCpus,context._cpuToStoragePortSet);    candidates=filterCandidates(candidates,allocatedSwitches,context._switchNameToStoragePortSet);    allocatedPort=chooseCandidate(candidates,context._storagePortToUsage);    allocatePort(allocatedPort,allocatedPorts,allocatedEngines,allocatedDirectorTypes,allocatedDirectors,allocatedCpus,allocatedSwitches,allocatedStoragePorts,context);    String director=context._storagePortToDirector.get(allocatedPort);    _log.info(String.format("Allocated port %s WWPN %s director %s",allocatedPort.getPortName(),allocatedPort.getPortNetworkId(),director));  }  return allocatedStoragePorts;}  }
class C{  public void addColumn(SchemaColumnDesc col){  columns.add(col);}  }
class C{  private static TraceList createTrace(final JFrame parent,final TraceLogger logger){  try {    final String name=logger.getTraceProvider().generateName();    return logger.getTraceProvider().createTrace(name,"");  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="E00095: " + "Creating the new trace failed";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not create the new trace in the database.",new String[]{"There was a problem with the database connection."},new String[]{"The debugger will not enter trace mode. You can try to start " + "trace mode again after you have resolved the database connection problem."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);    return null;  }}  }
class C{  private boolean hasRolePermission(String application,String action,String entityName,EntityCondition condition,GenericValue userLogin){  if (userLogin == null) {    return false;  }  if (hasEntityPermission(application,action,userLogin)) {    return true;  }  if (entityName == null || condition == null) {    return false;  }  if (hasEntityPermission(application + "_ROLE",action,userLogin)) {    try {      List<GenericValue> roleTest=EntityQuery.use(delegator).from(entityName).where(condition).queryList();      if (!roleTest.isEmpty()) {        return true;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Problems doing role security lookup on entity [" + entityName + "] using ["+ condition+ "]",module);      return false;    }  }  return false;}  }
class C{  public void addValue(BytesRef value) throws IOException {  int hash=hashFunction.hash(value);  if (hash < 0) {    hash=hash * -1;  }  int bloomPos=hash & bloomSize;  filter.set(bloomPos);}  }
class C{  public TdfApiResponse(URI requestURI){  this.requestURI=requestURI;}  }
class C{  public CachingTokenFilter(TokenStream input){  super(input);}  }
class C{  private String[] createAndCacheFeatureNames(String phraseTableName,String[] phraseScoreNames,boolean forceUpdate){  String[] featureNames=Arrays.stream(phraseScoreNames).map(null).toArray(null);  if (forceUpdate)   featureNamesHash.put(phraseTableName,featureNames); else   featureNamesHash.putIfAbsent(phraseTableName,featureNames);  return featureNames;}  }
class C{  public Object contents(Object contents){  return m_Contents=contents;}  }
class C{  public final boolean isCompatibleKey(Key k){  return myKey == k;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.440 -0500",hash_original_method="F5CBF84A3DE853E04B44967F882D7399",hash_generated_method="CA29B005DF8237EBD1379937A892AB35") public void writeUint32(long n){  check(4);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public LoggingListener(){  level=Level.DEBUG;}  }
class C{  @Override public AnswerViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  LayoutInflater myInflater=LayoutInflater.from(parent.getContext());  View customView=myInflater.inflate(android.R.layout.simple_list_item_1,parent,false);  TextView textView=(TextView)customView.findViewById(android.R.id.text1);  textView.setGravity(Gravity.CENTER);  return new AnswerViewHolder(customView);}  }
class C{  boolean isLeaseHeldByCurrentThread(){  return this.thread == Thread.currentThread();}  }
class C{  public static boolean hasMainMethod(IType type) throws JavaModelException {  IMethod[] methods=type.getMethods();  for (int i=0; i < methods.length; i++) {    if (methods[i].isMainMethod()) {      return true;    }  }  return false;}  }
class C{  public void removeLine(final Line line){  if (line.previous == null) {    this.lines=line.next;  } else {    line.previous.next=line.next;  }  if (line.next == null) {    this.lineTail=line.previous;  } else {    line.next.previous=line.previous;  }  line.previous=line.next=null;}  }
class C{  public static final boolean pathMatch(char[] pattern,char[] filepath,boolean isCaseSensitive,char pathSeparator){  if (filepath == null)   return false;  if (pattern == null)   return true;  int pSegmentStart=pattern[0] == pathSeparator ? 1 : 0;  int pLength=pattern.length;  int pSegmentEnd=CharOperation.indexOf(pathSeparator,pattern,pSegmentStart + 1);  if (pSegmentEnd < 0)   pSegmentEnd=pLength;  boolean freeTrailingDoubleStar=pattern[pLength - 1] == pathSeparator;  int fSegmentStart, fLength=filepath.length;  if (filepath[0] != pathSeparator) {    fSegmentStart=0;  } else {    fSegmentStart=1;  }  if (fSegmentStart != pSegmentStart) {    return false;  }  int fSegmentEnd=CharOperation.indexOf(pathSeparator,filepath,fSegmentStart + 1);  if (fSegmentEnd < 0)   fSegmentEnd=fLength;  while (pSegmentStart < pLength && !(pSegmentEnd == pLength && freeTrailingDoubleStar || (pSegmentEnd == pSegmentStart + 2 && pattern[pSegmentStart] == '*' && pattern[pSegmentStart + 1] == '*'))) {    if (fSegmentStart >= fLength)     return false;    if (!CharOperation.match(pattern,pSegmentStart,pSegmentEnd,filepath,fSegmentStart,fSegmentEnd,isCaseSensitive)) {      return false;    }    pSegmentEnd=CharOperation.indexOf(pathSeparator,pattern,pSegmentStart=pSegmentEnd + 1);    if (pSegmentEnd < 0)     pSegmentEnd=pLength;    fSegmentEnd=CharOperation.indexOf(pathSeparator,filepath,fSegmentStart=fSegmentEnd + 1);    if (fSegmentEnd < 0)     fSegmentEnd=fLength;  }  int pSegmentRestart;  if ((pSegmentStart >= pLength && freeTrailingDoubleStar) || (pSegmentEnd == pSegmentStart + 2 && pattern[pSegmentStart] == '*' && pattern[pSegmentStart + 1] == '*')) {    pSegmentEnd=CharOperation.indexOf(pathSeparator,pattern,pSegmentStart=pSegmentEnd + 1);    if (pSegmentEnd < 0)     pSegmentEnd=pLength;    pSegmentRestart=pSegmentStart;  } else {    if (pSegmentStart >= pLength)     return fSegmentStart >= fLength;    pSegmentRestart=0;  }  int fSegmentRestart=fSegmentStart;  checkSegment:   while (fSegmentStart < fLength) {    if (pSegmentStart >= pLength) {      if (freeTrailingDoubleStar)       return true;      pSegmentEnd=CharOperation.indexOf(pathSeparator,pattern,pSegmentStart=pSegmentRestart);      if (pSegmentEnd < 0)       pSegmentEnd=pLength;      fSegmentRestart=CharOperation.indexOf(pathSeparator,filepath,fSegmentRestart + 1);      if (fSegmentRestart < 0) {        fSegmentRestart=fLength;      } else {        fSegmentRestart++;      }      fSegmentEnd=CharOperation.indexOf(pathSeparator,filepath,fSegmentStart=fSegmentRestart);      if (fSegmentEnd < 0)       fSegmentEnd=fLength;      continue checkSegment;    }    if (pSegmentEnd == pSegmentStart + 2 && pattern[pSegmentStart] == '*' && pattern[pSegmentStart + 1] == '*') {      pSegmentEnd=CharOperation.indexOf(pathSeparator,pattern,pSegmentStart=pSegmentEnd + 1);      if (pSegmentEnd < 0)       pSegmentEnd=pLength;      pSegmentRestart=pSegmentStart;      fSegmentRestart=fSegmentStart;      if (pSegmentStart >= pLength)       return true;      continue checkSegment;    }    if (!CharOperation.match(pattern,pSegmentStart,pSegmentEnd,filepath,fSegmentStart,fSegmentEnd,isCaseSensitive)) {      pSegmentEnd=CharOperation.indexOf(pathSeparator,pattern,pSegmentStart=pSegmentRestart);      if (pSegmentEnd < 0)       pSegmentEnd=pLength;      fSegmentRestart=CharOperation.indexOf(pathSeparator,filepath,fSegmentRestart + 1);      if (fSegmentRestart < 0) {        fSegmentRestart=fLength;      } else {        fSegmentRestart++;      }      fSegmentEnd=CharOperation.indexOf(pathSeparator,filepath,fSegmentStart=fSegmentRestart);      if (fSegmentEnd < 0)       fSegmentEnd=fLength;      continue checkSegment;    }    pSegmentEnd=CharOperation.indexOf(pathSeparator,pattern,pSegmentStart=pSegmentEnd + 1);    if (pSegmentEnd < 0)     pSegmentEnd=pLength;    fSegmentEnd=CharOperation.indexOf(pathSeparator,filepath,fSegmentStart=fSegmentEnd + 1);    if (fSegmentEnd < 0)     fSegmentEnd=fLength;  }  return (pSegmentRestart >= pSegmentEnd) || (fSegmentStart >= fLength && pSegmentStart >= pLength) || (pSegmentStart == pLength - 2 && pattern[pSegmentStart] == '*' && pattern[pSegmentStart + 1] == '*')|| (pSegmentStart == pLength && freeTrailingDoubleStar);}  }
class C{  public int tableLength(){  return ByteArray.readU16bit(info,0);}  }
class C{  public TLACodeScanner(){  TLAColorProvider provider=TLAEditorActivator.getDefault().getTLAColorProvider();  IToken keyword=new Token(new TextAttribute(provider.getColor(TLAColorProvider.TLA_KEYWORD),null,SWT.BOLD));  IToken value=new Token(new TextAttribute(provider.getColor(TLAColorProvider.TLA_VALUE)));  IToken other=new Token(new TextAttribute(provider.getColor(TLAColorProvider.TLA_DEFAULT)));  List rules=new ArrayList();  WordRule wordRule=new WordRule(DocumentHelper.getDefaultWordDetector(),other);  for (int i=0; i < ITLAReserveredWords.ALL_VALUES_ARRAY.length; i++) {    wordRule.addWord(ITLAReserveredWords.ALL_VALUES_ARRAY[i],value);  }  for (int i=0; i < ITLAReserveredWords.ALL_WORDS_ARRAY.length; i++) {    wordRule.addWord(ITLAReserveredWords.ALL_WORDS_ARRAY[i],keyword);  }  rules.add(wordRule);  IRule[] result=new IRule[rules.size()];  rules.toArray(result);  setRules(result);}  }
class C{  static private String randomString(String[] values,int length){  StringBuilder output=new StringBuilder(length);  for (int i=0; i < length; i++)   output.append(values[rnd.nextInt(values.length)]);  return output.toString();}  }
class C{  public void delete(String name) throws IOException {  set(getPosition(name),false);  encodeThis();}  }
class C{  public void testUrlValidWithJustParameterCharacter(){  setParameterToInitMockMethod("http://myurl.com/a/b/c/index.html?",TestSolution.PASSED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public static ErrorDetails defaultError(){  return ErrorDetailsImpl.defaultInstance();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendStageProgressPatch(buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public ChooserIntentBuilder priority(Collection<String> packageNames){  ArrayList<String> packageNamesArrayList=packageNames instanceof ArrayList ? (ArrayList<String>)packageNames : new ArrayList<>(packageNames);  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_PRIORITY_PACKAGES,packageNamesArrayList);  return this;}  }
class C{  public int yMax(){  return this.data.readShort(Offset.yMax.offset);}  }
class C{  public LRUCapacityController(int maximumEntries,Region region){  this(maximumEntries,EvictionAction.DEFAULT_EVICTION_ACTION,region);}  }
class C{  protected void _skipString() throws IOException, JsonParseException {  _tokenIncomplete=false;  int inputPtr=_inputPtr;  int inputLen=_inputEnd;  char[] inputBuffer=_inputBuffer;  while (true) {    if (inputPtr >= inputLen) {      _inputPtr=inputPtr;      if (!loadMore()) {        _reportInvalidEOF(": was expecting closing quote for a string value");      }      inputPtr=_inputPtr;      inputLen=_inputEnd;    }    char c=inputBuffer[inputPtr++];    int i=(int)c;    if (i <= INT_BACKSLASH) {      if (i == INT_BACKSLASH) {        _inputPtr=inputPtr;        c=_decodeEscaped();        inputPtr=_inputPtr;        inputLen=_inputEnd;      } else       if (i <= INT_QUOTE) {        if (i == INT_QUOTE) {          _inputPtr=inputPtr;          break;        }        if (i < INT_SPACE) {          _inputPtr=inputPtr;          _throwUnquotedSpace(i,"string value");        }      }    }  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  byte[] encoded=encodeBytesToBytes(source,off,len);  try {    return new String(encoded,PREFERRED_ENCODING);  } catch (  UnsupportedEncodingException uue) {    return new String(encoded);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenMisc[");  buffer.append("m_fdrName = ").append(m_fdrName);  buffer.append(", m_volListType = ").append(m_volListType);  buffer.append(", m_volListId = ").append(m_volListId);  buffer.append("]");  return buffer.toString();}  }
class C{  public PolicyMappingsExtension(){  extensionId=PKIXExtensions.KeyUsage_Id;  critical=false;  maps=Collections.<CertificatePolicyMap>emptyList();}  }
class C{  public File createPDF(){  return createPDF(null);}  }
class C{  public GeoPoint createSurfacePoint(final double x,final double y,final double z){  final double t=Math.sqrt(1.0 / (x * x * inverseAbSquared + y * y * inverseAbSquared + z * z * inverseCSquared));  return new GeoPoint(t * x,t * y,t * z);}  }
class C{  public Hill(){  super();}  }
class C{  public NameValuePair(CstString name,Constant value){  if (name == null) {    throw new NullPointerException("name == null");  }  if (value == null) {    throw new NullPointerException("value == null");  }  this.name=name;  this.value=value;}  }
class C{  private static int checkIdentifier(final String signature,int pos){  if (!Character.isJavaIdentifierStart(getChar(signature,pos))) {    throw new IllegalArgumentException(signature + ": identifier expected at index " + pos);  }  ++pos;  while (Character.isJavaIdentifierPart(getChar(signature,pos))) {    ++pos;  }  return pos;}  }
class C{  public PcPatternRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public void writeDiffFile(final Task<Diff> diff) throws IOException {  int partsCount;  int size=diff.size();  Diff d;  DiffPart p;  RevisionCodecData codec;  this.writer.write(WikipediaXMLKeys.KEY_START_PAGE.getKeyword() + "\r\n");  ArticleInformation header=diff.getHeader();  this.writer.write("\t" + WikipediaXMLKeys.KEY_START_TITLE.getKeyword());  this.writer.write(header.getArticleName());  this.writer.write(WikipediaXMLKeys.KEY_END_TITLE.getKeyword() + "\r\n");  this.writer.write("\t" + WikipediaXMLKeys.KEY_START_ID.getKeyword());  this.writer.write(Integer.toString(header.getArticleId()));  this.writer.write(WikipediaXMLKeys.KEY_END_ID.getKeyword() + "\r\n");  this.writer.write("\t<partCounter>");  this.writer.write(Integer.toString(diff.getPartCounter()));  this.writer.write("</partCounter>\r\n");  for (int i=0; i < size; i++) {    d=diff.get(i);    this.writer.write("\t" + WikipediaXMLKeys.KEY_START_REVISION.getKeyword() + "\r\n");    codec=d.getCodecData();    if (!codec.isConverted()) {      codec.totalSizeInBits();    }    this.writer.write("\t\t<codecData>\r\n");    this.writer.write("\t\t\t<s>" + Integer.toString(codec.getBlocksizeS()) + "</s>\r\n");    this.writer.write("\t\t\t<e>" + Integer.toString(codec.getBlocksizeE()) + "</e>\r\n");    this.writer.write("\t\t\t<b>" + Integer.toString(codec.getBlocksizeB()) + "</b>\r\n");    this.writer.write("\t\t\t<l>" + Integer.toString(codec.getBlocksizeL()) + "</l>\r\n");    this.writer.write("\t\t</codecData>\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_ID.getKeyword());    this.writer.write(Integer.toString(d.getRevisionID()));    this.writer.write(WikipediaXMLKeys.KEY_END_ID.getKeyword() + "\r\n");    this.writer.write("\t\t<revCount>");    this.writer.write(Integer.toString(d.getRevisionCounter()));    this.writer.write("</revCount>\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_TIMESTAMP.getKeyword());    this.writer.write(d.getTimeStamp().toString());    this.writer.write(WikipediaXMLKeys.KEY_END_TIMESTAMP.getKeyword() + "\r\n");    this.writer.write("\t\t<diff>\r\n");    partsCount=d.size();    for (int j=0; j < partsCount; j++) {      p=d.get(j);      this.writer.write("\t\t\t<diffPart>\r\n");      this.writer.write("\t\t\t\t<action>" + p.getAction() + "</action>\r\n");      this.writer.write("\t\t\t\t<start>" + Integer.toString(p.getStart()) + "</start>\r\n");      this.writer.write("\t\t\t\t<end>" + Integer.toString(p.getEnd()) + "</end>\r\n");      if (p.getText() != null) {        this.writer.write("\t\t\t\t<content xml:space=\"preserve\">" + p.getText());        this.writer.write("</content>\r\n");      }      this.writer.write("\t\t\t</diffPart>\r\n");    }    this.writer.write("\t\t</diff>\r\n");    this.writer.write("\t" + WikipediaXMLKeys.KEY_END_REVISION.getKeyword() + "\r\n");  }  this.writer.write(WikipediaXMLKeys.KEY_END_PAGE.getKeyword() + "\r\n");  this.writer.flush();}  }
class C{  private void resetSketchUploadState(){  sketchBlocksToSend=null;  currSketchBlockNum=0;  sketchUploadState=SketchUploadState.INACTIVE;  stopSketchStateTimeout();  stopSketchBlockSendTimeout();}  }
class C{  public void registerTimes(Player player){  if (!player.hasPermission("achievement.count.playedtime"))   return;  String uuid=player.getUniqueId().toString();  if (!plugin.getConnectionListener().getJoinTime().containsKey(uuid)) {    plugin.getConnectionListener().getJoinTime().put(uuid,System.currentTimeMillis());    plugin.getConnectionListener().getPlayTime().put(uuid,plugin.getDb().updateAndGetPlaytime(uuid,0L));  } else {    for (    Integer achievementThreshold : achievementsCache.keySet()) {      if (System.currentTimeMillis() - plugin.getConnectionListener().getJoinTime().get(uuid) + plugin.getConnectionListener().getPlayTime().get(uuid) > achievementThreshold * 3600000L && !achievementsCache.get(achievementThreshold).contains(uuid)) {        if (!plugin.getDb().hasPlayerAchievement(player,plugin.getPluginConfig().getString("PlayedTime." + achievementThreshold + ".Name"))) {          plugin.getAchievementDisplay().displayAchievement(player,"PlayedTime." + achievementThreshold);          plugin.getDb().registerAchievement(player,plugin.getPluginConfig().getString("PlayedTime." + achievementThreshold + ".Name"),plugin.getPluginConfig().getString("PlayedTime." + achievementThreshold + ".Message"));          plugin.getReward().checkConfig(player,"PlayedTime." + achievementThreshold);        }        achievementsCache.put(achievementThreshold,uuid);      }    }  }}  }
class C{  @Override public Optional<UserPrincipal> authenticate(String credentials) throws AuthenticationException {  if (StringUtils.isBlank(credentials)) {    return Optional.empty();  }  String u=this.authenticator.oauth(credentials);  return StringUtils.isBlank(u) ? Optional.empty() : Optional.of(new UserPrincipal(u));}  }
class C{  public PBKDF2Params(byte[] salt,int iterationCount,AlgorithmIdentifier prf){  this(salt,iterationCount);  this.prf=prf;}  }
class C{  public boolean mouseReleased(MouseEvent e){  OMGraphicList omgraphics=getList();  if (omgraphics != null && drillData != null) {    OMGraphic obj=omgraphics.findClosest(e.getX(),e.getY(),4);    if (obj != null) {      int id=((Integer)obj.getAttribute(OMGraphic.APP_OBJECT)).intValue();      fireRequestInfoLine(drillData[id]);      showingInfoLine=true;      return true;    }  }  return false;}  }
class C{  private void removeBookmarkTrackingIcons(){  if (trackingIcons != null) {    for (Iterator i=trackingIcons.iterator(); i.hasNext(); ) {      GutterIconImpl ti=(GutterIconImpl)i.next();      if (ti.getIcon() == bookmarkIcon) {        i.remove();      }    }  }}  }
class C{  public static void assertEqual(int expected,int actual,String errorMessage){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected == actual,errorMessage);}  }
class C{  public static TestInstances forCapabilities(Capabilities c){  TestInstances result;  result=new TestInstances();  if (c.getOwner() instanceof MultiInstanceCapabilitiesHandler) {    Capabilities multi=(Capabilities)((MultiInstanceCapabilitiesHandler)c.getOwner()).getMultiInstanceCapabilities().clone();    multi.setOwner(null);    result=forCapabilities(multi);    result.setMultiInstance(true);  } else {    if (c.handles(Capability.NO_CLASS)) {      result.setClassIndex(NO_CLASS);    } else     if (c.handles(Capability.NOMINAL_CLASS)) {      result.setClassType(Attribute.NOMINAL);    } else     if (c.handles(Capability.BINARY_CLASS)) {      result.setClassType(Attribute.NOMINAL);    } else     if (c.handles(Capability.NUMERIC_CLASS)) {      result.setClassType(Attribute.NUMERIC);    } else     if (c.handles(Capability.DATE_CLASS)) {      result.setClassType(Attribute.DATE);    } else     if (c.handles(Capability.STRING_CLASS)) {      result.setClassType(Attribute.STRING);    } else     if (c.handles(Capability.RELATIONAL_CLASS)) {      result.setClassType(Attribute.RELATIONAL);    }    if (c.handles(Capability.UNARY_CLASS)) {      result.setNumClasses(1);    }    if (c.handles(Capability.BINARY_CLASS)) {      result.setNumClasses(2);    }    if (c.handles(Capability.NOMINAL_CLASS)) {      result.setNumClasses(4);    }    if (c.handles(Capability.NOMINAL_ATTRIBUTES)) {      result.setNumNominal(1);      result.setNumRelationalNominal(1);    } else {      result.setNumNominal(0);      result.setNumRelationalNominal(0);    }    if (c.handles(Capability.NUMERIC_ATTRIBUTES)) {      result.setNumNumeric(1);      result.setNumRelationalNumeric(1);    } else {      result.setNumNumeric(0);      result.setNumRelationalNumeric(0);    }    if (c.handles(Capability.DATE_ATTRIBUTES)) {      result.setNumDate(1);      result.setNumRelationalDate(1);    } else {      result.setNumDate(0);      result.setNumRelationalDate(0);    }    if (c.handles(Capability.STRING_ATTRIBUTES)) {      result.setNumString(1);      result.setNumRelationalString(1);    } else {      result.setNumString(0);      result.setNumRelationalString(0);    }    if (c.handles(Capability.RELATIONAL_ATTRIBUTES)) {      result.setNumRelational(1);    } else {      result.setNumRelational(0);    }  }  return result;}  }
class C{  public Map<String,List<String>> toMultimap(boolean response){  Map<String,List<String>> result=new TreeMap<String,List<String>>(FIELD_NAME_COMPARATOR);  for (int i=0; i < namesAndValues.size(); i+=2) {    String fieldName=namesAndValues.get(i);    String value=namesAndValues.get(i + 1);    List<String> allValues=new ArrayList<String>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (response && statusLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(statusLine)));  } else   if (requestLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(requestLine)));  }  return Collections.unmodifiableMap(result);}  }
class C{  public static void main(String[] args){  int bytesPerLine=16;  if (args.length == 1) {    bytesPerLine=Integer.parseInt(args[0]);  }  int i;  for (i=0; !BinaryStdIn.isEmpty(); i++) {    if (bytesPerLine == 0) {      BinaryStdIn.readChar();      continue;    }    if (i == 0)     StdOut.printf(""); else     if (i % bytesPerLine == 0)     StdOut.printf("\n",i); else     StdOut.print(" ");    char c=BinaryStdIn.readChar();    StdOut.printf("%02x",c & 0xff);  }  if (bytesPerLine != 0)   StdOut.println();  StdOut.println((i * 8) + " bits");}  }
class C{  public static int networkByteOrderToInt(byte[] buf,int start,int count){  if (count > 4) {    throw new IllegalArgumentException("Cannot handle more than 4 bytes");  }  int result=0;  for (int i=0; i < count; i++) {    result<<=8;    result|=(buf[start + i] & 0xff);  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=(Text)titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",textNode);  retval=titleAttr.removeChild(textNode);  value=titleAttr.getValue();  assertEquals("attrValue","",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yes",value);  firstChild=titleAttr.getFirstChild();  assertNull("firstChildNull",firstChild);}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.CONTENT_NODE__OWNER:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwner((Composite)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void testRawBinaryContentStream() throws IOException {  SolrQueryResponse rsp=new SolrQueryResponse();  byte[] data=new byte[TestUtil.nextInt(random(),10,2048)];  random().nextBytes(data);  ByteArrayStream stream=new ByteArrayStream(data,TestUtil.randomUnicodeString(random()));  stream.setContentType(TestUtil.randomSimpleString(random()));  rsp.add(RawResponseWriter.CONTENT,stream);  for (  RawResponseWriter writer : allWriters) {    assertEquals(stream.getContentType(),writer.getContentType(req(),rsp));    ByteArrayOutputStream out=new ByteArrayOutputStream();    writer.write(out,req(),rsp);    assertArrayEquals(data,out.toByteArray());  }}  }
class C{  public void receiveResultrecordEventForInstance(org.oscm.example.client.EventServiceStub.RecordEventForInstanceResponseE result){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.603 -0400",hash_original_method="5611293ED2F0C7E4748ECD14A3071E4F",hash_generated_method="1084A81DC82EBF452F22A0571B4E410E") public NameFileFilter(List<String> names){  this(names,null);}  }
class C{  protected void addIdPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_PackageMember_id_feature"),getString("_UI_PropertyDescriptor_description","_UI_PackageMember_id_feature","_UI_PackageMember_type"),TypesPackage.Literals.PACKAGE_MEMBER__ID,false,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void registerInterestRegistrationListener(InterestRegistrationListener listener){  if (!this.isRunning()) {    throw new IllegalStateException(LocalizedStrings.CacheServerImpl_MUST_BE_RUNNING.toLocalizedString());  }  getCacheClientNotifier().registerInterestRegistrationListener(listener);}  }
class C{  private void restoreNestedVariables(){  if (nestedVars != null) {    Iterator<String> iter=nestedVars.iterator();    while (iter.hasNext()) {      String varName=iter.next();      varName=findAlias(varName);      Object obj=originalNestedVars.get(varName);      if (obj != null) {        invokingJspCtxt.setAttribute(varName,obj);      } else {        invokingJspCtxt.removeAttribute(varName,PAGE_SCOPE);      }    }  }}  }
class C{  public void closeViews(){  helpState.viewData.close();  surfAndLayerState.viewData.close();  mapElementsState.viewData.close();  colorBarsState.viewData.close();  lightingState.viewData.close();  lightPosState.viewData.close();  viewPtState.viewData.close();  for (int i=0; i < mapElementStateList.size(); ++i) {    State state=mapElementStateList.get(i);    ViewData viewData=state.viewData;    if (viewData != null) {      viewData.close();    }  }}  }
class C{  boolean takeIndexWrapped(){  if (isDetached())   return true;  if (itrs.cycles - prevCycles > 1) {    shutdown();    return true;  }  return false;}  }
class C{  public void removeAttribute(String name){  if (name == null || name.length() < 1) {    return;  }synchronized (this.attributes) {    List attributesList=new ArrayList(this.attributes.length);    for (int i=0; i < this.attributes.length; i++) {      if (!name.equals(this.attributes[i].getName())) {        attributesList.add(this.attributes[i]);      }    }    this.attributes=(AttributeInfo[])attributesList.toArray(new AttributeInfo[attributesList.size()]);    setType(this.type);  }}  }
class C{  public void testBug20685022() throws Exception {  if (!isCommunityEdition()) {    return;  }  final Properties props=new Properties();  props.clear();  props.setProperty("useSSL","true");  props.setProperty("requireSSL","true");  props.setProperty("verifyServerCertificate","false");  getConnectionWithProps(props);  props.clear();  props.setProperty("useSSL","true");  props.setProperty("requireSSL","true");  props.setProperty("verifyServerCertificate","true");  props.setProperty("trustCertificateKeyStoreUrl","file:src/testsuite/ssl-test-certs/test-cert-store");  props.setProperty("trustCertificateKeyStoreType","JKS");  props.setProperty("trustCertificateKeyStorePassword","password");  getConnectionWithProps(props);  props.clear();  props.setProperty("useSSL","true");  props.setProperty("requireSSL","true");  props.setProperty("verifyServerCertificate","true");  String trustStorePath="src/testsuite/ssl-test-certs/test-cert-store";  System.setProperty("javax.net.ssl.keyStore",trustStorePath);  System.setProperty("javax.net.ssl.keyStorePassword","password");  System.setProperty("javax.net.ssl.trustStore",trustStorePath);  System.setProperty("javax.net.ssl.trustStorePassword","password");  getConnectionWithProps(props);}  }
class C{  public ExpConstExpDemographicModel(String name,Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Parameter timeParameter,Parameter relTimeParameter,Type units){  super(name);  expConstExp=new ExpConstExpDemographic(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.N1Parameter=N1Parameter;  addVariable(N1Parameter);  N1Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.MIN_VALUE,1));  this.timeParameter=timeParameter;  addVariable(timeParameter);  timeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.MIN_VALUE,1));  this.relTimeParameter=relTimeParameter;  addVariable(relTimeParameter);  relTimeParameter.addBounds(new Parameter.DefaultBounds(1.0,Double.MIN_VALUE,1));  setUnits(units);}  }
class C{  public StartNodeCallableImpl(){  spec=null;  timeout=0;  assert false;}  }
class C{  public final void addElements(int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_firstFree+=numberOfElements;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testMissingLogFile() throws Exception {  File logDir=prepareLogDir("testLogRetention");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.setLogFileSize(3000);  log.setLogRotateMillis(2000);  log.prepare();  writeEventsToLog(log,200);  long lastSeqno=scanLog(log);  assertEquals("scanned to end of log",log.getMaxSeqno(),lastSeqno);  String[] logFileNames=log.getLogFileNames();  int fileCount=logFileNames.length;  assertTrue("More than two logs generated",fileCount > 2);  int middle=(fileCount / 2) + 1;  deleteLogFile(logDir,logFileNames[middle]);  try {    long lastSeqno2=scanLog(log);    throw new Exception("Able to scan a broken log!! last seqno=" + lastSeqno2);  } catch (  LogTimeoutException e) {    logger.info("Caught expected timeout: " + e);  }  log.release();}  }
class C{  void notifyLeaving(Integer id){  firePropertyChange("Leaving",null,id);}  }
class C{  public void openWithHandshake(){  schedLock.lockWithHandshake();  open=true;  schedLock.broadcast();  schedLock.unlock();}  }
class C{  public static JsonArray array(long... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  long value : values) {    array.add(value);  }  return array;}  }
class C{  @SuppressWarnings("unchecked") public Collection<IgniteInternalFuture<T>> futures(){synchronized (sync) {    if (futs == null)     return Collections.emptyList();    if (futs instanceof IgniteInternalFuture)     return Collections.singletonList((IgniteInternalFuture<T>)futs);    return new ArrayList<>((Collection<IgniteInternalFuture<T>>)futs);  }}  }
class C{  public StreamHost addStreamHost(final String JID,final String address,final int port){  StreamHost host=new StreamHost(JID,address);  host.setPort(port);  addStreamHost(host);  return host;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.974 -0400",hash_original_method="9E22246A2C5798ECAD21C20531550DBC",hash_generated_method="E7734C2066D9709C95136379B8B43B15") public FileAlterationObserver(String directoryName,FileFilter fileFilter,IOCase caseSensitivity){  this(new File(directoryName),fileFilter,caseSensitivity);}  }
class C{  private static int calculateNested(CharSequence s,int next,int currentNested){  if (next + 1 > s.length()) {    return -1;  }  if (s.charAt(next) == ' ') {    return calculateNested(s,next + 1,currentNested + 1);  } else {    return currentNested;  }}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public static ListNode deleteDuplicates(ListNode head){  if (head == null || head.next == null)   return head;  ListNode dummyHead=new ListNode(0);  dummyHead.next=head;  ListNode pre=dummyHead;  ListNode cur=head;  while (cur != null) {    while (cur.next != null && cur.val == cur.next.val)     cur=cur.next;    if (pre.next == cur)     pre=pre.next; else     pre.next=cur.next;    cur=cur.next;  }  return dummyHead.next;}  }
class C{  public XhtmlFrameSetDocument appendFrameSet(Element value){  frameset.addElement(value);  return (this);}  }
class C{  public static String addAdditionalParty(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  String partyId=request.getParameter("additionalPartyId");  String roleTypeId[]=request.getParameterValues("additionalRoleTypeId");  List<String> eventList=new LinkedList<String>();  Locale locale=UtilHttp.getLocale(request);  int i;  if (UtilValidate.isEmpty(partyId) || UtilValidate.isEmpty(roleTypeId) || roleTypeId.length < 1) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderPartyIdAndOrRoleTypeIdNotDefined",locale));    return "error";  }  if (request.getAttribute("_EVENT_MESSAGE_LIST_") != null) {    List<String> msg=UtilGenerics.checkList(request.getAttribute("_EVENT_MESSAGE_LIST_"));    eventList.addAll(msg);  }  for (i=0; i < roleTypeId.length; i++) {    try {      cart.addAdditionalPartyRole(partyId,roleTypeId[i]);    } catch (    Exception e) {      eventList.add(e.getLocalizedMessage());    }  }  request.removeAttribute("_EVENT_MESSAGE_LIST_");  request.setAttribute("_EVENT_MESSAGE_LIST_",eventList);  return "success";}  }
class C{  private XYPlot initializeLowerPlot(){  nonHeapMemory=new YIntervalSeriesImproved("non-heap memory");  YIntervalSeriesCollection yIntervalSeriesCollection=new YIntervalSeriesCollection();  yIntervalSeriesCollection.addSeries(nonHeapMemory);  DeviationRenderer renderer=new DeviationRenderer(true,false);  renderer.setBaseShapesVisible(true);  renderer.setSeriesStroke(0,new BasicStroke(3.0f));  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));  final NumberAxis rangeAxis=new NumberAxis("Non-heap / kbytes");  rangeAxis.setRangeType(RangeType.POSITIVE);  SystemInformationData systemData=(SystemInformationData)dataAccessService.getLastDataObject(systemTemplate);  if (systemData != null) {    double maxNonHeapUpperRange;    if (systemData.getMaxNonHeapMemorySize() != -1) {      maxNonHeapUpperRange=systemData.getMaxNonHeapMemorySize() / 1024.0d;    } else     if (systemData.getInitNonHeapMemorySize() != -1) {      maxNonHeapUpperRange=(systemData.getInitNonHeapMemorySize() * 2) / 1024.0d;    } else {      maxNonHeapUpperRange=128 * 1024 * 1024;    }    if (maxNonHeapUpperRange > 0) {      rangeAxis.setRange(0,maxNonHeapUpperRange);      rangeAxis.setAutoRangeMinimumSize(maxNonHeapUpperRange);    }  }  final XYPlot subplot=new XYPlot(yIntervalSeriesCollection,null,rangeAxis,renderer);  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  subplot.setRangeCrosshairVisible(true);  return subplot;}  }
class C{  @InService(PageServiceImpl.class) void create(TableKelp table,PageServiceImpl pageActor) throws IOException {  int rootPid=1;  BlockTree treeBlock=new BlockTree(rootPid);  int leafPid=2;  int nextPid=-1;  BlockLeaf[] blocks=new BlockLeaf[]{new BlockLeaf(leafPid)};  byte[] minKey=new byte[table.getKeyLength()];  byte[] maxKey=new byte[table.getKeyLength()];  Arrays.fill(minKey,(byte)0);  Arrays.fill(maxKey,(byte)0xff);  long sequence=1;  PageLeafImpl leafPage=new PageLeafImpl(leafPid,nextPid,sequence,_table,minKey,maxKey,blocks);  leafPage.setDirty();  treeBlock.insert(minKey,maxKey,leafPid);  BlockTree[] treeBlocks=new BlockTree[]{treeBlock};  PageTree treePage=new PageTree(rootPid,nextPid,sequence,minKey,maxKey,treeBlocks);  treePage.setDirty();  pageActor.addLoadedPage(leafPage);  pageActor.addLoadedPage(treePage);}  }
class C{  protected static void extractOneBest(IndexedReader<String> nbestReader,BufferedWriter onebestWriter,int field) throws IOException {  try {    String prevID=null;    for (    String line : nbestReader) {      if (Regex.commentOrEmptyLine.matches(line)) {        onebestWriter.newLine();        continue;      }      String[] columns=Regex.threeBarsWithSpace.split(line);      String newID=columns[0].trim();      if ("".equals(newID) || newID.startsWith("|||")) {        throw nbestReader.wrapIOException(new IOException("Malformed line, missing segment ID:\n" + line));      }      if (3 > columns.length) {        throw nbestReader.wrapIOException(new IOException("Malformed line, should have at least two \" ||| \":\n" + line));      }      if (null == prevID || !prevID.equals(newID)) {        onebestWriter.write(columns[field],0,columns[field].length());        onebestWriter.newLine();        onebestWriter.flush();        prevID=newID;      }    }  }  finally {    try {      nbestReader.close();    }  finally {      onebestWriter.close();    }  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  private String formatDescription(Dependency dependency,Vulnerability vulnerability){  StringBuilder sb=new StringBuilder();  sb.append("Filename: ").append(dependency.getFileName()).append(" | ");  sb.append("Reference: ").append(vulnerability.getName()).append(" | ");  sb.append("CVSS Score: ").append(vulnerability.getCvssScore()).append(" | ");  if (StringUtils.isNotBlank(vulnerability.getCwe())) {    sb.append("Category: ").append(vulnerability.getCwe()).append(" | ");  }  sb.append(vulnerability.getDescription());  return sb.toString();}  }
class C{  public static ArrayDBIDs ensureArray(DBIDs ids){  if (ids instanceof ArrayDBIDs) {    return (ArrayDBIDs)ids;  } else {    return newArray(ids);  }}  }
class C{  public boolean adjacent(int direction){  return (direction == QuadTreeNode.SOUTH || direction == QuadTreeNode.EAST);}  }
class C{  public void installGooglePlayApp(String code,String data){  String packageName=null;  try {    JSONObject appData=new JSONObject(data);    packageName=(String)appData.get(resources.getString(R.string.intent_extra_package));  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }  resultBuilder.build(code);  triggerGooglePlayApp(packageName);}  }
class C{  public void push(StackablePath... paths){  dispatcher.dispatch(add(History.NAV_TYPE_PUSH,paths));}  }
class C{  protected String sanitizeFilename(String filename){  filename=filename.replaceAll("\\\\","_").replaceAll(":","_").replaceAll("/","_");  filename=Utils.removeSubstring(filename,"weka.filters.supervised.instance.");  filename=Utils.removeSubstring(filename,"weka.filters.supervised.attribute.");  filename=Utils.removeSubstring(filename,"weka.filters.unsupervised.instance.");  filename=Utils.removeSubstring(filename,"weka.filters.unsupervised.attribute.");  filename=Utils.removeSubstring(filename,"weka.clusterers.");  filename=Utils.removeSubstring(filename,"weka.associations.");  filename=Utils.removeSubstring(filename,"weka.attributeSelection.");  filename=Utils.removeSubstring(filename,"weka.estimators.");  filename=Utils.removeSubstring(filename,"weka.datagenerators.");  if (!m_isDBSaver && !m_relationNameForFilename) {    filename="";    try {      if (m_Saver.filePrefix().equals("")) {        m_Saver.setFilePrefix("no-name");      }    } catch (    Exception ex) {      System.err.println(ex);    }  }  return filename;}  }
class C{  protected Element writeCharToXML(Element parent,char o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Character.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Character(o).toString()));  return node;}  }
class C{  @Action(value="/receipts/receipt-saveOnCancel") public String saveOnCancel(){  String instrumentType="";  boolean isInstrumentDeposited=false;  final ReceiptHeader receiptHeaderToBeCancelled=receiptHeaderService.findById(oldReceiptId,false);  LOGGER.info("Receipt Header to be Cancelled : " + receiptHeaderToBeCancelled.getReceiptnumber());  for (  final InstrumentHeader instrumentHeader : receiptHeaderToBeCancelled.getReceiptInstrument())   if (instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_CASH)) {    if (instrumentHeader.getStatusId().getDescription().equals(CollectionConstants.INSTRUMENT_RECONCILED_STATUS)) {      isInstrumentDeposited=true;      break;    }  } else   if (instrumentHeader.getStatusId().getDescription().equals(CollectionConstants.INSTRUMENT_DEPOSITED_STATUS)) {    isInstrumentDeposited=true;    break;  }  if (isInstrumentDeposited) {    populateReceiptModelWithExistingReceiptInfo(receiptHeaderToBeCancelled);    setFundName(receiptHeaderToBeCancelled.getReceiptMisc().getFund().getName());    setServiceName(receiptHeaderToBeCancelled.getService().getName());    populateBankBranchList(true);    setCollectionModesNotAllowed();    return NEW;  } else {    receiptHeaderToBeCancelled.setStatus(statusDAO.getStatusByModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED));    receiptHeaderToBeCancelled.setIsReconciled(false);    receiptHeaderToBeCancelled.setReasonForCancellation(reasonForCancellation);    for (    final InstrumentHeader instrumentHeader : receiptHeaderToBeCancelled.getReceiptInstrument()) {      instrumentHeader.setStatusId(statusDAO.getStatusByModuleAndCode(CollectionConstants.MODULE_NAME_INSTRUMENTHEADER,CollectionConstants.INSTRUMENTHEADER_STATUS_CANCELLED));      instrumentType=instrumentHeader.getInstrumentType().getType();    }    for (    final ReceiptVoucher receiptVoucher : receiptHeaderToBeCancelled.getReceiptVoucher())     receiptHeaderService.createReversalVoucher(receiptVoucher,instrumentType);    receiptHeaderService.persist(receiptHeaderToBeCancelled);    receiptHeaderValues.clear();    receiptHeaderValues.add(receiptHeaderToBeCancelled);    LOGGER.info("Receipt Cancelled with Receipt Number(saveOnCancel): " + receiptHeaderToBeCancelled.getReceiptnumber() + "; Consumer Code: "+ receiptHeaderToBeCancelled.getConsumerCode());  }  target="cancel";  return INDEX;}  }
class C{  public boolean isSystemMember(){  return this.equals(SYSTEM_MEMBER);}  }
class C{  public AttributeTable add(ASN1ObjectIdentifier attrType,ASN1Encodable attrValue){  AttributeTable newTable=new AttributeTable(attributes);  newTable.addAttribute(attrType,new Attribute(attrType,new DERSet(attrValue)));  return newTable;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public RegExp(String s,int syntax_flags) throws IllegalArgumentException {  originalString=s;  flags=syntax_flags;  RegExp e;  if (s.length() == 0)   e=makeString(""); else {    e=parseUnionExp();    if (pos < originalString.length())     throw new IllegalArgumentException("end-of-string expected at position " + pos);  }  kind=e.kind;  exp1=e.exp1;  exp2=e.exp2;  this.s=e.s;  c=e.c;  min=e.min;  max=e.max;  digits=e.digits;  from=e.from;  to=e.to;}  }
class C{  public Collection updateRendering(Collection areas) throws InterruptedException {  renderer.flush(areas);  List rects=new ArrayList(areas.size());  AffineTransform at=renderer.getTransform();  Iterator i=areas.iterator();  while (i.hasNext()) {    Shape s=(Shape)i.next();    s=at.createTransformedShape(s);    Rectangle2D r2d=s.getBounds2D();    int x0=(int)Math.floor(r2d.getX());    int y0=(int)Math.floor(r2d.getY());    int x1=(int)Math.ceil(r2d.getX() + r2d.getWidth());    int y1=(int)Math.ceil(r2d.getY() + r2d.getHeight());    Rectangle r=new Rectangle(x0 - 1,y0 - 1,x1 - x0 + 3,y1 - y0 + 3);    rects.add(r);  }  RectListManager devRLM=null;  try {    devRLM=new RectListManager(rects);    devRLM.mergeRects(COPY_OVERHEAD,COPY_LINE_OVERHEAD);  } catch (  Exception e) {    e.printStackTrace();  }  renderer.repaint(devRLM);  return devRLM;}  }
class C{  public Query intersect(Query query){  if (immutable) {    return fork().intersect(query);  }  addCompoundSelect(CompoundSelect.intersect(query));  return this;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void handleScroll(float distY){  if (getHeight() > 0 && originalImage != null) {    if (scrollY <= originalImage.getHeight() - getHeight()) {      adaptedImage=Bitmap.createBitmap(originalImage,0,(int)-distY,screenWidth,getHeight());      invalidate();    }  }}  }
class C{  public static byte[] readFully(InputStream is,int length,boolean readAll) throws IOException {  byte[] output={};  if (length == -1)   length=Integer.MAX_VALUE;  int pos=0;  while (pos < length) {    int bytesToRead;    if (pos >= output.length) {      bytesToRead=Math.min(length - pos,output.length + 1024);      if (output.length < pos + bytesToRead) {        output=Arrays.copyOf(output,pos + bytesToRead);      }    } else {      bytesToRead=output.length - pos;    }    int cc=is.read(output,pos,bytesToRead);    if (cc < 0) {      if (readAll && length != Integer.MAX_VALUE) {        throw new EOFException("Detect premature EOF");      } else {        if (output.length != pos) {          output=Arrays.copyOf(output,pos);        }        break;      }    }    pos+=cc;  }  return output;}  }
class C{  public boolean isOptOut(){synchronized (optOutLock) {    loadConfiguration();    return config.getNode("mcstats.opt-out").getBoolean();  }}  }
class C{  public int write(Protein protein) throws IOException {  int locationCount=0;  List<String> proteinAcs=getProteinAccessions(protein);  int length=protein.getSequenceLength();  String md5=protein.getMd5();  String date=dmyFormat.format(new Date());  Set<Match> matches=protein.getMatches();  for (  String proteinAc : proteinAcs) {    for (    Match match : matches) {      final Signature signature=match.getSignature();      final String signatureAc=signature.getAccession();      final SignatureLibrary signatureLibrary=signature.getSignatureLibraryRelease().getLibrary();      final String analysis=signatureLibrary.getName();      final String description=signature.getDescription();      Set<Location> locations=match.getLocations();      if (locations != null) {        locationCount+=locations.size();        for (        Location location : locations) {          String score="-";          String status="T";          if (match instanceof SuperFamilyHmmer3Match) {            score=Double.toString(((SuperFamilyHmmer3Match)match).getEvalue());          } else           if (match instanceof PantherMatch) {            score=Double.toString(((PantherMatch)match).getEvalue());          } else           if (match instanceof FingerPrintsMatch) {            score=Double.toString(((FingerPrintsMatch)match).getEvalue());          }          if (location instanceof HmmerLocation) {            score=Double.toString(((HmmerLocation)location).getEvalue());          } else           if (location instanceof BlastProDomMatch.BlastProDomLocation) {            score=Double.toString(((BlastProDomMatch.BlastProDomLocation)location).getEvalue());          } else           if (location instanceof ProfileScanMatch.ProfileScanLocation) {            score=Double.toString(((ProfileScanMatch.ProfileScanLocation)location).getScore());          } else           if (location instanceof RPSBlastMatch.RPSBlastLocation) {            score=Double.toString(((RPSBlastMatch.RPSBlastLocation)location).getEvalue());          }          final List<String> mappingFields=new ArrayList<>();          mappingFields.add(proteinAc);          mappingFields.add(md5);          mappingFields.add(Integer.toString(length));          mappingFields.add(analysis);          mappingFields.add(signatureAc);          mappingFields.add((description == null ? "" : description));          mappingFields.add(Integer.toString(location.getStart()));          mappingFields.add(Integer.toString(location.getEnd()));          mappingFields.add(score);          mappingFields.add(status);          mappingFields.add(date);          if (mapToInterProEntries) {            Entry interProEntry=signature.getEntry();            if (interProEntry != null) {              mappingFields.add(interProEntry.getAccession());              mappingFields.add(interProEntry.getDescription());              if (mapToGO) {                List<GoXref> goXRefs=new ArrayList<>(interProEntry.getGoXRefs());                Collections.sort(goXRefs,new GoXrefComparator());                if (goXRefs.size() > 0) {                  StringBuilder sb=new StringBuilder();                  for (                  GoXref xref : goXRefs) {                    if (sb.length() > 0) {                      sb.append(VALUE_SEPARATOR);                    }                    sb.append(xref.getIdentifier());                  }                  mappingFields.add(sb.toString());                } else {                  mappingFields.add("");                }              }              if (mapToPathway) {                List<PathwayXref> pathwayXRefs=new ArrayList<>(interProEntry.getPathwayXRefs());                Collections.sort(pathwayXRefs,new PathwayXrefComparator());                if (pathwayXRefs.size() > 0) {                  StringBuilder sb=new StringBuilder();                  for (                  PathwayXref xref : pathwayXRefs) {                    if (sb.length() > 0) {                      sb.append(VALUE_SEPARATOR);                    }                    sb.append(xref.getDatabaseName()).append(": ").append(xref.getIdentifier());                  }                  mappingFields.add(sb.toString());                } else {                  mappingFields.add("");                }              }            }          }          this.tsvWriter.write(mappingFields);        }      }    }  }  return locationCount;}  }
class C{  static void svd_daxpy(int n,double da,double[] dx,int incx,double[] dy,int incy){  if (n <= 0 || incx == 0 || incy == 0)   return;  int ix=(incx == 1) ? 0 : n - 1;  int iy=(incy == 1) ? 0 : n - 1;  for (int i=0; i < n; i++) {    dy[iy]+=da * dx[ix];    iy+=incy;    ix+=incx;  }}  }
class C{  private void readStyleElement(IXMLElement elem,HashMap<String,Style> styles) throws IOException {  String styleName=elem.getAttribute("name",STYLE_NAMESPACE,null);  String family=elem.getAttribute("family",STYLE_NAMESPACE,null);  String parentStyleName=elem.getAttribute("parent-style-name",STYLE_NAMESPACE,null);  if (DEBUG) {    System.out.println("ODGStylesReader <style name=" + styleName + " ...>...</>");  }  if (styleName != null) {    Style a=styles.get(styleName);    if (a == null) {      a=new Style();      a.name=styleName;      a.family=family;      a.parentName=parentStyleName;      styles.put(styleName,a);    }    for (    IXMLElement child : elem.getChildren()) {      String ns=child.getNamespace();      String name=child.getName();      if (name.equals("drawing-page-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readDrawingPagePropertiesElement(child,a);      } else       if (name.equals("graphic-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readGraphicPropertiesElement(child,a);      } else       if (name.equals("paragraph-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readParagraphPropertiesElement(child,a);      } else       if (name.equals("text-properties") && (ns == null || ns.equals(STYLE_NAMESPACE))) {        readTextPropertiesElement(child,a);      } else {        if (DEBUG) {          System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> child "+ child);        }      }    }  }}  }
class C{  private ImageElement(URL imageURL){  if (imageURL != null) {    try {      Toolkit tk=Toolkit.getDefaultToolkit();      m_image=tk.getDefaultToolkit().getImage(imageURL);      MediaTracker mediaTracker=new MediaTracker(new Container());      mediaTracker.addImage(m_image,0);      mediaTracker.waitForID(0);    } catch (    Exception e) {      log.log(Level.WARNING,"(byteArray)",e);    }    if (m_image != null)     log.fine("URL=" + imageURL); else     log.log(Level.WARNING,"Not loaded - URL=" + imageURL);  } else   log.severe("ImageURL is NULL");}  }
class C{  protected void updateModel(){  List<ResultKey> selectedResults=getSelectedResults();  List<String> selectedMetrics=getSelectedMetrics();  boolean selectAllResults=false;  boolean selectFirstMetric=false;  if (selectedResults.size() == resultListModel.getSize()) {    selectAllResults=true;  }  if ((selectedMetrics.size() == 0) && (metricListModel.getSize() == 0)) {    selectFirstMetric=true;  }  resultListModel.addAll(controller.getKeys());  for (  ResultKey key : controller.getKeys()) {    for (    Accumulator accumulator : controller.get(key)) {      metricListModel.addAll(accumulator.keySet());    }  }  metricList.getSelectionModel().removeListSelectionListener(this);  metricList.clearSelection();  if (selectFirstMetric) {    metricList.setSelectedIndex(0);  } else {    for (    String metric : selectedMetrics) {      int index=metricListModel.getIndexOf(metric);      metricList.getSelectionModel().addSelectionInterval(index,index);    }  }  metricList.getSelectionModel().addListSelectionListener(this);  resultTable.getSelectionModel().removeListSelectionListener(this);  resultTableModel.fireTableDataChanged();  if (selectAllResults && (selectedResults.size() < resultListModel.getSize())) {    resultTable.getSelectionModel().addSelectionInterval(0,resultListModel.getSize() - 1);  } else {    for (    ResultKey key : selectedResults) {      int index=resultListModel.getIndexOf(key);      resultTable.getSelectionModel().addSelectionInterval(index,index);    }  }  resultTable.getSelectionModel().addListSelectionListener(this);}  }
class C{  public static boolean signalFinish(Context context,Intent originalFireIntent,int resultCode,Bundle vars){  String errorPrefix="signalFinish: ";  boolean okFlag=false;  String completionIntentString=(String)getExtraValueSafe(originalFireIntent,Setting.EXTRA_PLUGIN_COMPLETION_INTENT,String.class,"signalFinish");  if (completionIntentString != null) {    Uri completionIntentUri=null;    try {      completionIntentUri=Uri.parse(completionIntentString);    } catch (    Exception e) {      Log.w(TAG,errorPrefix + "couldn't parse " + completionIntentString);    }    if (completionIntentUri != null) {      try {        Intent completionIntent=Intent.parseUri(completionIntentString,Intent.URI_INTENT_SCHEME);        completionIntent.putExtra(EXTRA_RESULT_CODE,resultCode);        if (vars != null)         completionIntent.putExtra(EXTRA_VARIABLES_BUNDLE,vars);        context.sendBroadcast(completionIntent);        okFlag=true;      } catch (      URISyntaxException e) {        Log.w(TAG,errorPrefix + "bad URI: " + completionIntentUri);      }    }  }  return okFlag;}  }
class C{  public void removeSelection(){  LibraryPlaylistsTableDataLine[] lines=getSelectedLibraryLines();  if (currentPlaylist != null && currentPlaylist.getId() == LibraryDatabase.STARRED_PLAYLIST_ID) {    for (    LibraryPlaylistsTableDataLine line : lines) {      PlaylistItem playlistItem=line.getInitializeObject();      playlistItem.setStarred(false);      playlistItem.save();    }    LibraryMediator.instance().getLibraryExplorer().refreshSelection();  } else {    for (    LibraryPlaylistsTableDataLine line : lines) {      PlaylistItem playlistItem=line.getInitializeObject();      playlistItem.delete();    }    LibraryMediator.instance().getLibraryPlaylists().reselectPlaylist();    clearSelection();  }  super.removeSelection();}  }
class C{  public boolean accept(final File file){  return (file.isDirectory()) || extensions.contains(getExtension(file));}  }
class C{  public Object decode(ProtocolState state,IoBuffer in) throws ProtocolException {  try {    final RTMP rtmp=(RTMP)state;switch (rtmp.getState()) {case RTMP.STATE_CONNECTED:      return decodePacket(rtmp,in);case RTMP.STATE_CONNECT:case RTMP.STATE_HANDSHAKE:    return decodeHandshake(rtmp,in);case RTMP.STATE_ERROR:default :  return null;}} catch (ProtocolException pe) {throw pe;}catch (RuntimeException e) {throw new ProtocolException("Error during decoding",e);}}  }
class C{  public Builder withTaskQueue(){  return withTaskQueue(QUEUE_XML);}  }
class C{  public LocalResult createShallowCopy(Session targetSession){  if (external == null && (rows == null || rows.size() < rowCount)) {    return null;  }  ResultExternal e2=null;  if (external != null) {    e2=external.createShallowCopy();    if (e2 == null) {      return null;    }  }  LocalResult copy=new LocalResult();  copy.maxMemoryRows=this.maxMemoryRows;  copy.session=targetSession;  copy.visibleColumnCount=this.visibleColumnCount;  copy.expressions=this.expressions;  copy.rowId=-1;  copy.rowCount=this.rowCount;  copy.rows=this.rows;  copy.sort=this.sort;  copy.distinctRows=this.distinctRows;  copy.distinct=distinct;  copy.randomAccess=randomAccess;  copy.currentRow=null;  copy.offset=0;  copy.limit=-1;  copy.external=e2;  copy.diskOffset=this.diskOffset;  return copy;}  }
class C{  @Nonnull public BugInstance addString(String value){  add(StringAnnotation.fromRawString(value));  return this;}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  SQLiteDatabase db=mOpenHelper.getReadableDatabase();  if (mUriMatcher.match(uri) == URI_MATCH_SUGGEST) {    String suggestSelection;    String[] myArgs;    if (TextUtils.isEmpty(selectionArgs[0])) {      suggestSelection=null;      myArgs=null;    } else {      String like="%" + selectionArgs[0] + "%";      if (mTwoLineDisplay) {        myArgs=new String[]{like,like};      } else {        myArgs=new String[]{like};      }      suggestSelection=mSuggestSuggestionClause;    }    Cursor c=db.query(sSuggestions,mSuggestionProjection,suggestSelection,myArgs,null,null,ORDER_BY,null);    c.setNotificationUri(getContext().getContentResolver(),uri);    return c;  }  int length=uri.getPathSegments().size();  if (length != 1 && length != 2) {    throw new IllegalArgumentException("Unknown Uri");  }  String base=uri.getPathSegments().get(0);  if (!base.equals(sSuggestions)) {    throw new IllegalArgumentException("Unknown Uri");  }  String[] useProjection=null;  if (projection != null && projection.length > 0) {    useProjection=new String[projection.length + 1];    System.arraycopy(projection,0,useProjection,0,projection.length);    useProjection[projection.length]="_id AS _id";  }  StringBuilder whereClause=new StringBuilder(256);  if (length == 2) {    whereClause.append("(_id = ").append(uri.getPathSegments().get(1)).append(")");  }  if (selection != null && selection.length() > 0) {    if (whereClause.length() > 0) {      whereClause.append(" AND ");    }    whereClause.append('(');    whereClause.append(selection);    whereClause.append(')');  }  Cursor c=db.query(base,useProjection,whereClause.toString(),selectionArgs,null,null,sortOrder,null);  c.setNotificationUri(getContext().getContentResolver(),uri);  return c;}  }
class C{  protected BaseInterval(ReadablePeriod period,ReadableInstant end){  super();  Chronology chrono=DateTimeUtils.getInstantChronology(end);  iChronology=chrono;  iEndMillis=DateTimeUtils.getInstantMillis(end);  if (period == null) {    iStartMillis=iEndMillis;  } else {    iStartMillis=chrono.add(period,iEndMillis,-1);  }  checkInterval(iStartMillis,iEndMillis);}  }
class C{  public double[][] solve(double[][] B){  int mx=B.length;  int nx=B[0].length;  if (mx != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isNonsingular()) {    throw new RuntimeException("Matrix is singular.");  }  double[][] Xmat=VMath.getMatrix(B,piv,0,nx - 1);  solveInplace(Xmat,nx);  return Xmat;}  }
class C{  private void createStopFacilities(){  Map<Id<TransitStopFacility>,TransitStopFacility> stopFacilities=this.transitSchedule.getFacilities();  for (  OsmParser.OsmRelation relation : relations.values()) {    if (stop_area.matches(relation.tags)) {      String stopPostAreaId=relation.tags.get(OsmTag.NAME);      for (      OsmParser.OsmRelationMember member : relation.members) {        if (member.role.equals(OsmValue.STOP)) {          TransitStopFacility newStopFacility=createStopFacilityFromOsmNode(nodes.get(member.refId),stopPostAreaId);          if (!stopFacilities.containsValue(newStopFacility)) {            this.transitSchedule.addStopFacility(newStopFacility);          }        }      }    }  }  for (  OsmParser.OsmNode node : nodes.values()) {    if (stop_position.matches(node.tags)) {      if (!stopFacilities.containsKey(Id.create(node.id,TransitStopFacility.class))) {        this.transitSchedule.addStopFacility(createStopFacilityFromOsmNode(node));      }    }  }}  }
class C{  private String cleanValue(String value){  char[] chars=value.toCharArray();  StringBuffer sb=new StringBuffer();  for (int i=0; i < chars.length; i++) {    char ch=chars[i];    ch=Character.toLowerCase(ch);    if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z'))     sb.append(ch);  }  return sb.toString();}  }
class C{  public T caseBitwiseXorExpression(BitwiseXorExpression object){  return null;}  }
class C{  public JSONArray put(int index,Map<String,Object> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public HiLowEmitter(String name){  super(name);}  }
class C{  public static boolean existMessageInList(FacesContext fc,String msg){  for (Iterator<FacesMessage> i=fc.getMessages(); i.hasNext(); ) {    if (i.next().getDetail().equals(msg)) {      return true;    }  }  return false;}  }
class C{  public Element replaceWith(NewElement newElement){  checkNotRemoved();  notPermittedOnRootElement();  requireNonNull(newElement,"Required not null new element");  insertAfter(newElement);  final Element inserted=getNextSibling();  remove();  return inserted;}  }
class C{  public static void dumpAllServices(){  StringBuffer buffer=new StringBuffer();synchronized (services) {    logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.TESTING,"DLockService.dumpAllServices() - " + services.size() + " services:\n"));    Iterator entries=services.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry entry=(Map.Entry)entries.next();      buffer.append("  " + entry.getKey() + ":\n");      DLockService svc=(DLockService)entry.getValue();      svc.dumpService();      if (svc.isCurrentlyLockGrantor()) {        svc.grantor.dumpService();      }    }  }}  }
class C{  public void removeAttribute(final String name){  if (attrs != null)   attrs.remove(name);}  }
class C{  public List modifiers(){  if (this.modifiers == null) {    unsupportedIn2();  }  return this.modifiers;}  }
class C{  public FilterExprIteratorSimple(Expression expr){  super(null);  m_expr=expr;}  }
class C{  protected InnerBuilder replaceHeaderWithUrl(String url,String key,String value){  addOrReplaceWithUrl(url,key,value,true);  return this;}  }
class C{  public Image imageFor(Entity entity){  return imageFor(entity,-1);}  }
class C{  public boolean equalMapGenParameters(MapSettings other){  if ((boardWidth != other.getBoardWidth()) || (boardHeight != other.getBoardHeight()) || (mapWidth != other.getMapWidth())|| (mapHeight != other.getMapHeight())|| (invertNegativeTerrain != other.getInvertNegativeTerrain())|| (hilliness != other.getHilliness())|| (cliffs != other.getCliffs())|| (range != other.getRange())|| (minWaterSpots != other.getMinWaterSpots())|| (maxWaterSpots != other.getMaxWaterSpots())|| (minWaterSize != other.getMinWaterSize())|| (maxWaterSize != other.getMaxWaterSize())|| (probDeep != other.getProbDeep())|| (minForestSpots != other.getMinForestSpots())|| (maxForestSpots != other.getMaxForestSpots())|| (minForestSize != other.getMinForestSize())|| (maxForestSize != other.getMaxForestSize())|| (probHeavy != other.getProbHeavy())|| (minRoughSpots != other.getMinRoughSpots())|| (maxRoughSpots != other.getMaxRoughSpots())|| (minRoughSize != other.getMinRoughSize())|| (maxRoughSize != other.getMaxRoughSize())|| (minSandSpots != other.getMinSandSpots())|| (maxSandSpots != other.getMaxSandSpots())|| (minSandSize != other.getMinSandSize())|| (maxSandSize != other.getMaxSandSize())|| (minPlantedFieldSpots != other.getMinPlantedFieldSpots())|| (maxPlantedFieldSpots != other.getMaxPlantedFieldSpots())|| (minPlantedFieldSize != other.getMinPlantedFieldSize())|| (maxPlantedFieldSize != other.getMaxPlantedFieldSize())|| (minSwampSpots != other.getMinSwampSpots())|| (maxSwampSpots != other.getMaxSwampSpots())|| (minSwampSize != other.getMinSwampSize())|| (maxSwampSize != other.getMaxSwampSize())|| (minPavementSpots != other.getMinPavementSpots())|| (maxPavementSpots != other.getMaxPavementSpots())|| (minPavementSize != other.getMinPavementSize())|| (maxPavementSize != other.getMaxPavementSize())|| (minRubbleSpots != other.getMinRubbleSpots())|| (maxRubbleSpots != other.getMaxRubbleSpots())|| (minRubbleSize != other.getMinRubbleSize())|| (maxRubbleSize != other.getMaxRubbleSize())|| (minFortifiedSpots != other.getMinFortifiedSpots())|| (maxFortifiedSpots != other.getMaxFortifiedSpots())|| (minFortifiedSize != other.getMinFortifiedSize())|| (maxFortifiedSize != other.getMaxFortifiedSize())|| (minIceSpots != other.getMinIceSpots())|| (maxIceSpots != other.getMaxIceSpots())|| (minIceSize != other.getMinIceSize())|| (maxIceSize != other.getMaxIceSize())|| (probRoad != other.getProbRoad())|| (probInvert != other.getProbInvert())|| (probRiver != other.getProbRiver())|| (probCrater != other.getProbCrater())|| (minRadius != other.getMinRadius())|| (maxRadius != other.getMaxRadius())|| (minCraters != other.getMinCraters())|| (maxCraters != other.getMaxCraters())|| (!theme.equals(other.getTheme()))|| (fxMod != other.getFxMod())|| (cityBlocks != other.getCityBlocks())|| (cityType != other.getCityType())|| (cityMinCF != other.getCityMinCF())|| (cityMaxCF != other.getCityMaxCF())|| (cityMinFloors != other.getCityMinFloors())|| (cityMaxFloors != other.getCityMaxFloors())|| (cityDensity != other.getCityDensity())|| (probFlood != other.getProbFlood())|| (probForestFire != other.getProbForestFire())|| (probFreeze != other.getProbFreeze())|| (probDrought != other.getProbDrought())|| (algorithmToUse != other.getAlgorithmToUse())|| (mountainHeightMin != other.getMountainHeightMin())|| (mountainHeightMax != other.getMountainHeightMax())|| (mountainPeaks != other.getMountainPeaks())|| (mountainStyle != other.getMountainStyle())|| (mountainWidthMin != other.getMountainWidthMin())|| (mountainWidthMax != other.getMountainWidthMax())|| (boardBuildings != other.getBoardBuildings())) {    return false;  }  return true;}  }
class C{  public int closeRoom(String SID,Long room_id,Boolean status) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    log.debug("closeRoom 1 " + room_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      log.debug("closeRoom 2 " + status);      roommanagement.closeRoom(room_id,status);      if (status) {        Map<String,String> message=new HashMap<String,String>();        message.put("message","roomClosed");        scopeApplicationAdapter.sendMessageByRoomAndDomain(room_id,message);      }      return 1;    } else {      return -2;    }  } catch (  Exception err) {    log.error("[closeRoom] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public boolean canForceOrientation(){  return impl.canForceOrientation();}  }
class C{  public void testIntsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.ints(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public void addEvent(ReferenceEvent referenceEvent){  referenceEvents.add(referenceEvent);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.PROVIDED_RUNTIME_LIBRARIES__PROVIDED_RUNTIME_LIBRARIES:    return providedRuntimeLibraries != null && !providedRuntimeLibraries.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void reconfigZKToWritable(){  _log.info("Standby is running in read-only mode due to connection loss with active site. Reconfig coordinatorsvc to writable");  try {    LocalRepository localRepository=LocalRepository.getInstance();    localRepository.reconfigCoordinator("participant");    localRepository.restartCoordinator("participant");  } catch (  Exception ex) {    _log.warn("Unexpected errors during switching back to zk observer. Try again later. {}",ex.toString());  }}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  public static void runMake(File folder){  System.out.println("Running make to build test executables");  try {    Process process=Runtime.getRuntime().exec("make",null,folder);    if (process.waitFor() != 0) {      System.err.println("make exited with an error status (" + process.exitValue() + "), skipping test");      Assume.assumeTrue(false);    }  } catch (  InterruptedException e) {    System.err.println("interrupted while waiting for make to " + "complete, skipping test");    Assume.assumeTrue(false);  }catch (  IOException e) {    System.err.println("unable to run make, skipping test");    Assume.assumeTrue(false);  }}  }
class C{  public Item(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  this();  setEntityClass(clazz);  setEntitySubclass(subclass);  put("name",name);  if (attributes != null) {    for (    final Entry<String,String> entry : attributes.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }  update();}  }
class C{  public HyperBoundingBox(double[] min,double[] max){  if (min.length != max.length) {    throw new IllegalArgumentException("min/max need same dimensionality");  }  this.min=min;  this.max=max;}  }
class C{  public void register(Train train){  Integer oldSize=Integer.valueOf(_trainHashTable.size());  _trainHashTable.put(train.getId(),train);  int id=Integer.parseInt(train.getId());  if (id > _id) {    _id=id;  }  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_trainHashTable.size()));}  }
class C{  static void writeGatheredViolationsToParcel(Parcel p){  ArrayList<ViolationInfo> violations=gatheredViolations.get();  if (violations == null) {    p.writeInt(0);  } else {    p.writeInt(violations.size());    for (int i=0; i < violations.size(); ++i) {      violations.get(i).writeToParcel(p,0);    }    if (LOG_V)     Log.d(TAG,"wrote violations to response parcel; num=" + violations.size());    violations.clear();  }  gatheredViolations.set(null);}  }
class C{  private static Query[] createQueries(List<Object> qs,Analyzer a){  QueryParser qp=new QueryParser(DocMaker.BODY_FIELD,a);  List<Object> queries=new ArrayList<>();  for (int i=0; i < qs.size(); i++) {    try {      Object query=qs.get(i);      Query q=null;      if (query instanceof String) {        q=qp.parse((String)query);      } else       if (query instanceof Query) {        q=(Query)query;      } else {        System.err.println("Unsupported Query Type: " + query);      }      if (q != null) {        queries.add(q);      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return queries.toArray(new Query[0]);}  }
class C{  public boolean isDoNotMonitor(){  return mPriority == DO_NOT_MONITOR;}  }
class C{  public boolean isInfoEnabled(){  return (getLogger().isLoggable(Level.INFO));}  }
class C{  public boolean isReadOnly(){  return m_ReadOnly;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.UNION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING:    return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public DefaultPieDataset(){  this.data=new DefaultKeyedValues();}  }
class C{  private String inflateGzipToString(InputStream is) throws IOException {  GZIPInputStream gis=new GZIPInputStream(is);  ByteArrayOutputStream os=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  while (true) {    int bytesRead=gis.read(buffer);    if (bytesRead == -1)     break;    os.write(buffer,0,bytesRead);  }  return os.toString();}  }
class C{  private static void handleEOD(EncoderContext context,CharSequence buffer){  try {    int count=buffer.length();    if (count == 0) {      return;    }    if (count == 1) {      context.updateSymbolInfo();      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      int remaining=context.getRemainingCharacters();      if (remaining == 0 && available <= 2) {        return;      }    }    if (count > 4) {      throw new IllegalStateException("Count must not exceed 4");    }    int restChars=count - 1;    String encoded=encodeToCodewords(buffer,0);    boolean endOfSymbolReached=!context.hasMoreCharacters();    boolean restInAscii=endOfSymbolReached && restChars <= 2;    if (restChars <= 2) {      context.updateSymbolInfo(context.getCodewordCount() + restChars);      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      if (available >= 3) {        restInAscii=false;        context.updateSymbolInfo(context.getCodewordCount() + encoded.length());      }    }    if (restInAscii) {      context.resetSymbolInfo();      context.pos-=restChars;    } else {      context.writeCodewords(encoded);    }  }  finally {    context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);  }}  }
class C{  private boolean validateMaxThinPoolSubscriptionInput(StoragePool pool,Integer thinPoolSubscriptionPercentageLimit){  if (null != thinPoolSubscriptionPercentageLimit) {    String resType=pool.getSupportedResourceTypes();    if (null == resType) {      _log.error("Supported reousrce type for the storage pool was not set.");      return false;    }    _log.debug("validate pool of type {} for limit of {}.",resType,thinPoolSubscriptionPercentageLimit);    if (resType.equals(StoragePool.SupportedResourceTypes.THICK_ONLY.name())) {      return false;    }  }  return true;}  }
class C{  public static double pointCircleDistanceNM(Geo p1,Geo p2,Geo center){  return Geo.nm(pointCircleDistance(p1,p2,center));}  }
class C{  public void testOneNodeExpireEvent() throws Throwable {  testSessionExpire(1);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.327 -0500",hash_original_method="34245E42F942570AFBDEF6E2A30FB787",hash_generated_method="35BA1DF442634C9B4F2A851D1604FA9B") public void drawTextOnPath(char[] text,int index,int count,Path path,float hOffset,float vOffset,Paint paint){  if (index < 0 || index + count > text.length) {    throw new ArrayIndexOutOfBoundsException();  }  native_drawTextOnPath(mNativeCanvas,text,index,count,path.ni(),hOffset,vOffset,paint.mBidiFlags,paint.mNativePaint);}  }
class C{  public static void loadLibraryFromJar(String path) throws IOException {  if (!path.startsWith("/")) {    throw new IllegalArgumentException("The path has to be absolute (start with '/').");  }  String[] parts=path.split("/");  String filename=(parts.length > 1) ? parts[parts.length - 1] : null;  String prefix="";  String suffix=null;  if (filename != null) {    parts=filename.split("\\.",2);    prefix=parts[0];    suffix=(parts.length > 1) ? "." + parts[parts.length - 1] : null;  }  if (filename == null || prefix.length() < 3) {    throw new IllegalArgumentException("The filename has to be at least 3 characters long.");  }  File temp=File.createTempFile(prefix,suffix);  temp.deleteOnExit();  if (!temp.exists()) {    throw new FileNotFoundException("File " + temp.getAbsolutePath() + " does not exist.");  }  byte[] buffer=new byte[1024];  int readBytes;  InputStream is=NativeUtils.class.getResourceAsStream(path);  if (is == null) {    throw new FileNotFoundException("File " + path + " was not found inside JAR.");  }  OutputStream os=new FileOutputStream(temp);  try {    while ((readBytes=is.read(buffer)) != -1) {      os.write(buffer,0,readBytes);    }  }  finally {    os.close();    is.close();  }  System.load(temp.getAbsolutePath());}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals("Clear")) {    histData.setText("");  } else   if (e.getActionCommand().equals("Close")) {    disableHistory();  }}  }
class C{  public GuacamoleCredentialsException(String message,Throwable cause,CredentialsInfo credentialsInfo){  super(message,cause);  this.credentialsInfo=credentialsInfo;}  }
class C{  public void updateSynapseNodePositions(){  if (networkPanel.isRunning()) {    return;  }  for (  Object node : outlinedObjects.getChildrenReference()) {    ((NeuronNode)node).updateSynapseNodePositions();  }}  }
class C{  @Override public void messageReceived(NextFilter nextFilter,IoSession session,Object message) throws Exception {  LOGGER.debug("Processing a MESSAGE_RECEIVED for session {}",session.getId());  if (!(message instanceof IoBuffer)) {    nextFilter.messageReceived(session,message);    return;  }  IoBuffer in=(IoBuffer)message;  ProtocolDecoder decoder=factory.getDecoder(session);  ProtocolDecoderOutput decoderOut=getDecoderOut(session,nextFilter);  while (in.hasRemaining()) {    int oldPos=in.position();    try {      lock.acquire();      decoder.decode(session,in,decoderOut);      decoderOut.flush(nextFilter,session);    } catch (    Exception e) {      ProtocolDecoderException pde;      if (e instanceof ProtocolDecoderException) {        pde=(ProtocolDecoderException)e;      } else {        pde=new ProtocolDecoderException(e);      }      if (pde.getHexdump() == null) {        int curPos=in.position();        in.position(oldPos);        pde.setHexdump(in.getHexDump());        in.position(curPos);      }      decoderOut.flush(nextFilter,session);      nextFilter.exceptionCaught(session,pde);      if (!(e instanceof RecoverableProtocolDecoderException) || (in.position() == oldPos)) {        break;      }    } finally {      lock.release();    }  }}  }
class C{  public void close(){  if (mLeakedException != null) {    getConnectionManager().shutdown();    mLeakedException=null;  }}  }
class C{  public static void copyExtendedModuleFiles(IFile specRootFile,IPath targetFolderPath,IProgressMonitor monitor,int STEP,IProject project) throws CoreException {  List<String> extendedModules=ToolboxHandle.getExtendedModules(specRootFile.getName());  IFile moduleFile=null;  for (int i=0; i < extendedModules.size(); i++) {    String module=extendedModules.get(i);    if (ToolboxHandle.isUserModule(module)) {      moduleFile=ResourceHelper.getLinkedFile(project,module,false);      if (moduleFile != null) {        moduleFile.copy(targetFolderPath.append(moduleFile.getProjectRelativePath()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,STEP / extendedModules.size()));      }    }  }}  }
class C{  public Attribute attributeSparse(int indexOfIndex){  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  return m_Dataset.attribute(indexOfIndex);}  }
class C{  public static ComputeState provisionMachine(VerificationHost host,URI peerURI,ComputeState vmState,boolean isMock,List<String> instancesToCleanUp) throws Throwable, InterruptedException, TimeoutException {  host.log("Provisioning a single virtual machine on AWS.");  ProvisionComputeTaskState provisionTask=new ProvisionComputeTaskService.ProvisionComputeTaskState();  provisionTask.computeLink=vmState.documentSelfLink;  provisionTask.isMockRequest=isMock;  provisionTask.taskSubStage=ProvisionComputeTaskState.SubStage.CREATING_HOST;  ProvisionComputeTaskService.ProvisionComputeTaskState outTask=TestUtils.doPost(host,provisionTask,ProvisionComputeTaskState.class,createServiceURI(host,peerURI,ProvisionComputeTaskService.FACTORY_LINK));  host.waitForFinishedTask(ProvisionComputeTaskState.class,outTask.documentSelfLink);  ComputeState provisionCompute=getCompute(host,vmState.documentSelfLink);  assertNotNull(provisionCompute);  host.log("Sucessfully provisioned a machine %s ",provisionCompute.id);  instancesToCleanUp.add(provisionCompute.id);  return provisionCompute;}  }
class C{  public static double[][] makeDelayEmbeddingVector(double[] data,int k){  try {    return makeDelayEmbeddingVector(data,k,k - 1,data.length - k + 1);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private String parseLinkDestination(){  String res=match(LINK_DESTINATION_BRACES);  if (res != null) {    if (res.length() == 2) {      return "";    } else {      return Escaping.unescapeString(res.substring(1,res.length() - 1));    }  } else {    res=match(LINK_DESTINATION);    if (res != null) {      return Escaping.unescapeString(res);    } else {      return null;    }  }}  }
class C{  public CarrierScoreStats(Carriers carriers,final String filename,final boolean createPNG) throws UncheckedIOException {  this.carriers=carriers;  this.fileName=filename;  this.createPNG=createPNG;  if (filename.toLowerCase(Locale.ROOT).endsWith(".txt")) {    this.out=IOUtils.getBufferedWriter(filename);  } else {    this.out=IOUtils.getBufferedWriter(filename + ".txt");  }  try {    this.out.write("ITERATION\tavg. EXECUTED\tavg. WORST\tavg. AVG\tavg. BEST\n");  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public String readHeaders() throws MalformedStreamException {  int i=0;  byte b;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  int size=0;  while (i < HEADER_SEPARATOR.length) {    try {      b=readByte();    } catch (    IOException e) {      throw new MalformedStreamException("Stream ended unexpectedly");    }    if (++size > HEADER_PART_SIZE_MAX) {      throw new MalformedStreamException("Header section has more than " + HEADER_PART_SIZE_MAX + " bytes (maybe it is not properly terminated)");    }    if (b == HEADER_SEPARATOR[i]) {      i++;    } else {      i=0;    }    baos.write(b);  }  String headers=null;  if (headerEncoding != null) {    try {      headers=baos.toString(headerEncoding);    } catch (    UnsupportedEncodingException e) {      headers=baos.toString();    }  } else {    headers=baos.toString();  }  return headers;}  }
class C{  private void createListViewAndHolder(){  listview=new ListView(context);  holder=new RelativeLayout(context);  RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT);  holder.setLayoutParams(params);  holder.setGravity(Gravity.CENTER);  holder.setBackgroundColor(HOLDER_BACKGROUND_COLOR);  holder.setVisibility(View.GONE);  listview.setLayoutParams(params);  if (LISTVIEW_DIVIDER_DRAWABLE != null) {    listview.setDivider(LISTVIEW_DIVIDER_DRAWABLE);  }  listview.setDividerHeight(LISTVIEW_DIVIDER_HEIGHT);  listview.setFooterDividersEnabled(LISTVIEW_FOOTER_DIVIDERS_ENABLED);  listview.setHeaderDividersEnabled(LISTVIEW_HEADER_DIVIDERS_ENABLED);  listview.setCacheColorHint(LISTVIEW_CACHE_COLOR_HINT);  listview.setDrawSelectorOnTop(LISTVIEW_DRAW_SELECTOR_ON_TOP);  listview.setScrollingCacheEnabled(LISTVIEW_SCROLLING_CACHE);  listview.setFastScrollEnabled(LISTVIEW_FAST_SCROLL_ENABLED);  listview.setChoiceMode(LISTVIEW_CHOICE_MODE);  if (LISTVIEW_LIST_SELECTOR_DRAWABLE != null) {    listview.setSelector(LISTVIEW_LIST_SELECTOR_DRAWABLE);  }  listview.setTextFilterEnabled(LISTVIEW_TEXT_FILTER_ENABLED);  listview.setSmoothScrollbarEnabled(LISTVIEW_SMOOTH_SCROLLBAR_ENABLED);  listview.setStackFromBottom(LISTVIEW_STACK_FROM_BOTTOM);  listview.setTranscriptMode(LISTVIEW_TRANSCRIPT_MODE);  addView(listview);  addView(holder);}  }
class C{  public VnSyllParser(String syll){  init();  parseVnSyllable(syll);}  }
class C{  @Override public List<Leg> calcRoute(Facility<?> fromFacility,Facility<?> toFacility,double departureTime,Person person){  throw new UnsupportedOperationException("use class own's calcRoute(Leg)! This class probably only works with PlansCalcSubModeDependendTransitRoute...");}  }
class C{  public Element[] stackTraceNoException(int framesToSkip){  if (VM.VerifyAssertions)   VM._assert(framesToSkip >= 0,"Cannot skip negative amount of frames");  int first=firstRealMethod();  first+=framesToSkip;  int last=lastRealMethod(first);  return buildStackTrace(first,last);}  }
class C{  public void testConstrDouble01(){  double a=1.E-1;  int aScale=55;  BigInteger bA=new BigInteger("1000000000000000055511151231257827021181583404541015625");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2){  return contains(value,start,length,new String[]{criteria1,criteria2});}  }
class C{  protected void paintDisabledText(JLabel l,Graphics g,String s,int textX,int textY){  int mnemIndex=l.getDisplayedMnemonicIndex();  g.setColor(UIManager.getColor("Label.disabledForeground"));  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,mnemIndex,textX,textY);}  }
class C{  @Override public String toString(){  return "AttributeWeights (containing weights for " + weightMap.size() + " attributes)";}  }
class C{  public static Test suite(){  return (new TestSuite(JavaTopLevelActionListenerComponentITCase.class));}  }
class C{  public SurfaceSquare(LatLon center,double size,Angle heading){  super(center,size,size,heading);}  }
class C{  @Override public void modelChangedEvent(Model model,Object object,int index){  if (model == mmSubstModel) {    fireParameterChangedEvent();  }}  }
class C{  private static int[] createIntArray(int size,int initialValue){  int[] array=new int[size];  for (int i=0; i < size; ++i) {    array[i]=initialValue;  }  return array;}  }
class C{  public void fadeInLayer(int index){  mTransitionState=TRANSITION_STARTING;  mIsLayerOn[index]=true;  invalidateSelf();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.IF__CHECK:    return basicSetCheck(null,msgs);case SexecPackage.IF__THEN_STEP:  return basicSetThenStep(null,msgs);case SexecPackage.IF__ELSE_STEP:return basicSetElseStep(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public synchronized boolean isChecked(){  return mIsChecked;}  }
class C{  public static Command asCommand(Resource resource){  Query query=asQuery(resource);  if (query != null) {    return query;  } else {    return asUpdate(resource);  }}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  public DDFSubfieldDefinition findSubfieldDefn(String pszMnemonic){  if (paoSubfieldDefns != null) {    for (Iterator it=paoSubfieldDefns.iterator(); pszMnemonic != null && it.hasNext(); ) {      DDFSubfieldDefinition ddfsd=(DDFSubfieldDefinition)it.next();      if (pszMnemonic.equalsIgnoreCase(ddfsd.getName())) {        return ddfsd;      }    }  }  return null;}  }
class C{  public static Node toNode(Object o) throws PageException {  return toXML(o);}  }
class C{  public LcpMonotoneMinimalPerfectHashFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  return new LcpMonotoneMinimalPerfectHashFunction<T>(keys,numKeys,transform,signatureWidth,tempDir);}  }
class C{  private void confirmLowSeqno(THLParallelQueue tpq,long seqno,long waitMillis) throws Exception {  AtomicIntervalGuard<?> intervalGuard=tpq.getIntervalGuard();  long currentSeqno;  long startMillis=System.currentTimeMillis();  while ((currentSeqno=intervalGuard.getLowSeqno()) != seqno) {    if (System.currentTimeMillis() - startMillis > waitMillis)     throw new Exception("Timed out waiting for interval guard to reach expected low seqno: expected seqno=" + seqno + " actual value="+ currentSeqno);    Thread.sleep(100);  }  logger.info("Confirmed low sequence number in interval guard structure: seqno=" + seqno);}  }
class C{  @PostConstruct public void initApplication(){  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  public Node build(){  return new Node(settings.build());}  }
class C{  public static void presignedGetObject_test2() throws Exception {  println("Test: presignedGetObject(String bucketName, String objectName, Integer expires)");  String fileName=createFile(3 * MB);  client.putObject(bucketName,fileName,fileName);  String urlString=client.presignedGetObject(bucketName,fileName,3600);  Request.Builder requestBuilder=new Request.Builder();  Request request=requestBuilder.url(HttpUrl.parse(urlString)).method("GET",null).build();  OkHttpClient transport=new OkHttpClient();  Response response=transport.newCall(request).execute();  if (response != null) {    if (response.isSuccessful()) {      OutputStream os=Files.newOutputStream(Paths.get(fileName + ".downloaded"),StandardOpenOption.CREATE);      ByteStreams.copy(response.body().byteStream(),os);      response.body().close();      os.close();    } else {      String errorXml="";      Scanner scanner=new java.util.Scanner(response.body().charStream()).useDelimiter("\\A");      if (scanner.hasNext()) {        errorXml=scanner.next();      }      println("FAILED",response,errorXml);    }  } else {    println("NO RESPONSE");  }  if (!Arrays.equals(Files.readAllBytes(Paths.get(fileName)),Files.readAllBytes(Paths.get(fileName + ".downloaded")))) {    println("CONTENT DIFFERS");  }  Files.delete(Paths.get(fileName));  Files.delete(Paths.get(fileName + ".downloaded"));  client.removeObject(bucketName,fileName);}  }
class C{  private void hideConversationScope(){  conversationContext.setParameterName("conversationID");}  }
class C{  private static boolean findLeadImage(List<WebImage> candidates,WebText firstContent){  if (candidates.size() == 0)   return false;  Element contentElement=null;  if (firstContent != null) {    contentElement=Element.as(firstContent.getFirstNonWhitespaceTextNode());  }  List<ImageScorer> heuristics=getLeadHeuristics(contentElement);  WebImage bestImage=null;  int bestScore=0;  for (  WebImage i : candidates) {    int curScore=getImageScore(i,heuristics);    if (MINIMUM_ACCEPTED_SCORE <= curScore) {      if (bestImage == null || bestScore < curScore) {        bestImage=i;        bestScore=curScore;      }    }  }  if (bestImage == null)   return false;  bestImage.setIsContent(true);  return true;}  }
class C{  public double stddev(){  return Math.sqrt(this.var());}  }
class C{  private void launchEffects(Player player){  try {    if (additionalEffects)     ParticleEffect.PORTAL.display(0,1,0,0.5f,1000,player.getLocation(),1);  } catch (  Exception e) {    plugin.getLogger().severe("Error while displaying additional particle effects.");  }  if (sound) {    if (version < 9) {      player.getWorld().playSound(player.getLocation(),Sound.valueOf("FIREWORK_BLAST"),1,0.6f);    } else {      player.getWorld().playSound(player.getLocation(),Sound.ENTITY_FIREWORK_LARGE_BLAST,1,0.7f);    }  }}  }
class C{  public int top(){  if (numObjs <= 0)   return 0; else   return objs[numObjs - 1];}  }
class C{  private Object[] loadMethodArguments(final String parametertype[],final String parametervalue[]) throws ApplicationRuntimeException {  Object[] obj_name=null;  try {    if (!parametertype[0].trim().equalsIgnoreCase(EMPTY)) {      obj_name=new Object[parametervalue.length];      for (int i=0; i < parametertype.length; i++)       if (parametertype[i].trim().equalsIgnoreCase("java.lang.Integer"))       obj_name[i]=Integer.valueOf(parametervalue[i]); else       if (parametertype[i].trim().equalsIgnoreCase("java.lang.Double"))       obj_name[i]=Double.valueOf(parametervalue[i]); else       if (parametertype[i].trim().equalsIgnoreCase("java.lang.String"))       obj_name[i]=parametervalue[i]; else       throw new ApplicationRuntimeException("This " + parametertype[i] + " datatype is not supported");    }  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching loadMethodArguments",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching loadMethodArguments",e);  }  return obj_name;}  }
class C{  public void testToArray() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  Object[] o=q.toArray();  for (int i=0; i < o.length; i++)   assertSame(o[i],q.poll());}  }
class C{  public boolean isReducedRedundancyUpgradePossible(){  return reducedRedundancyUpgradePossible;}  }
class C{  public static boolean isCurrentWeek(DateTime date){  DateTime firstDayOfWeekMidnight=DateTime.now(DateTimeZone.getDefault()).withDayOfWeek(Calendar.getInstance(Locale.getDefault()).getMinimum(Calendar.DAY_OF_WEEK)).withTimeAtStartOfDay();  DateTime firstDayOfNextWeek=firstDayOfWeekMidnight.plusDays(7);  return ((firstDayOfWeekMidnight.isEqual(date.getMillis())) || firstDayOfWeekMidnight.isBefore(date.getMillis())) && firstDayOfNextWeek.isAfter(date.getMillis());}  }
class C{  public ContentFilter clone(){  ContentFilter result=new ContentFilter();  if (Elements != null) {    result.Elements=new ContentFilterElement[Elements.length];    for (int i=0; i < Elements.length; i++)     result.Elements[i]=Elements[i].clone();  }  return result;}  }
class C{  public static <T>T deserialize(String filename,Class<T> type){  SerializationMode mode;  try {    mode=SerializationMode.fromFileName(filename);  } catch (  Exception e) {    logger.warn("Serialization mode could not be inferred from {}. Guessing {}",filename,GZ_BIN_EXTENSION);    mode=SerializationMode.BIN_GZ;  }  return deserialize(filename,type,mode);}  }
class C{  int updateBookmarksInTransaction(ContentValues values,String selection,String[] selectionArgs,boolean callerIsSyncAdapter){  int count=0;  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();  final String[] bookmarksProjection=new String[]{Bookmarks._ID,Bookmarks.VERSION,Bookmarks.URL,Bookmarks.TITLE,Bookmarks.IS_FOLDER,Bookmarks.ACCOUNT_NAME,Bookmarks.ACCOUNT_TYPE};  Cursor cursor=db.query(TABLE_BOOKMARKS,bookmarksProjection,selection,selectionArgs,null,null,null);  boolean updatingParent=values.containsKey(Bookmarks.PARENT);  String parentAccountName=null;  String parentAccountType=null;  if (updatingParent) {    long parent=values.getAsLong(Bookmarks.PARENT);    Cursor c=db.query(TABLE_BOOKMARKS,new String[]{Bookmarks.ACCOUNT_NAME,Bookmarks.ACCOUNT_TYPE},"_id = ?",new String[]{Long.toString(parent)},null,null,null);    if (c.moveToFirst()) {      parentAccountName=c.getString(0);      parentAccountType=c.getString(1);    }    c.close();  } else   if (values.containsKey(Bookmarks.ACCOUNT_NAME) || values.containsKey(Bookmarks.ACCOUNT_TYPE)) {  }  try {    String[] args=new String[1];    if (!callerIsSyncAdapter) {      values.put(Bookmarks.DATE_MODIFIED,System.currentTimeMillis());      values.put(Bookmarks.DIRTY,1);    }    boolean updatingUrl=values.containsKey(Bookmarks.URL);    String url=null;    if (updatingUrl) {      url=values.getAsString(Bookmarks.URL);    }    ContentValues imageValues=extractImageValues(values,url);    while (cursor.moveToNext()) {      long id=cursor.getLong(0);      args[0]=Long.toString(id);      String accountName=cursor.getString(5);      String accountType=cursor.getString(6);      if (updatingParent && (!TextUtils.equals(accountName,parentAccountName) || !TextUtils.equals(accountType,parentAccountType))) {        ContentValues newValues=valuesFromCursor(cursor);        newValues.putAll(values);        newValues.remove(Bookmarks._ID);        newValues.remove(Bookmarks.VERSION);        newValues.put(Bookmarks.ACCOUNT_NAME,parentAccountName);        newValues.put(Bookmarks.ACCOUNT_TYPE,parentAccountType);        Uri insertUri=insertInTransaction(Bookmarks.CONTENT_URI,newValues,callerIsSyncAdapter);        long newId=ContentUris.parseId(insertUri);        if (cursor.getInt(4) != 0) {          ContentValues updateChildren=new ContentValues(1);          updateChildren.put(Bookmarks.PARENT,newId);          count+=updateBookmarksInTransaction(updateChildren,Bookmarks.PARENT + "=?",new String[]{Long.toString(id)},callerIsSyncAdapter);        }        Uri uri=ContentUris.withAppendedId(Bookmarks.CONTENT_URI,id);        deleteInTransaction(uri,null,null,callerIsSyncAdapter);        count+=1;      } else {        if (!callerIsSyncAdapter) {          values.put(Bookmarks.VERSION,cursor.getLong(1) + 1);        }        count+=db.update(TABLE_BOOKMARKS,values,"_id=?",args);      }      if (imageValues != null) {        if (!updatingUrl) {          url=cursor.getString(2);          imageValues.put(Images.URL,url);        }        if (!TextUtils.isEmpty(url)) {          args[0]=url;          if (db.update(TABLE_IMAGES,imageValues,Images.URL + "=?",args) == 0) {            db.insert(TABLE_IMAGES,Images.FAVICON,imageValues);          }        }      }    }  }  finally {    if (cursor != null)     cursor.close();  }  return count;}  }
class C{  public static void writeUnsafe(PacketOutputStream out,InputStream is,long length,boolean noBackslashEscapes) throws IOException {  out.writeUnsafe(QUOTE);  byte[] buffer=new byte[1024];  long bytesLeft=length;  int len;  for (; ; ) {    int bytesToRead=(int)Math.min(bytesLeft,buffer.length);    if (bytesToRead == 0) {      break;    }    len=is.read(buffer,0,bytesToRead);    if (len <= 0) {      break;    }    writeBytesEscapedUnsafe(out,buffer,len,noBackslashEscapes);    bytesLeft-=len;  }  out.writeUnsafe(QUOTE);}  }
class C{  private static int addWithoutException(BigDecimal b1,BigDecimal b2,MathContext mc){  if (mc == null)   mc=new MathContext(2,RoundingMode.DOWN);  try {    BigDecimal sum=b1.add(b2,mc);    printAddition(b1,b2,sum.toString());    return 0;  } catch (  ArithmeticException ae) {    printAddition(b1,b2,"Exception!");    return 1;  }}  }
class C{  protected void updateSelectedPathsFromSelectedRows(){  if (!updatingListSelectionModel) {    updatingListSelectionModel=true;    try {      int min=listSelectionModel.getMinSelectionIndex();      int max=listSelectionModel.getMaxSelectionIndex();      clearSelection();      if (min != -1 && max != -1) {        List<TreePath> selectionPaths=new ArrayList<TreePath>();        for (int counter=min; counter <= max; counter++) {          if (listSelectionModel.isSelectedIndex(counter)) {            TreePath selPath=myTree.getPathForRow(counter);            if (selPath != null) {              selectionPaths.add(selPath);            }          }        }        if (!selectionPaths.isEmpty()) {          addSelectionPaths(selectionPaths.toArray(new TreePath[selectionPaths.size()]));        }      }    }  finally {      updatingListSelectionModel=false;    }  }}  }
class C{  public String[] csvStringArray(){  String[] output=new String[this.numRows + 1];  StringBuilder rowString=new StringBuilder(csvFormat(header.get(0)));  for (int i=1; i < numCols; i++) {    rowString.append(",").append(csvFormat(header.get(i)));  }  output[0]=rowString.toString();  for (int i=0; i < numRows; i++) {    List<String> row=data.get(i);    rowString=new StringBuilder(csvFormat(row.get(0)));    for (int j=1; j < numCols; j++) {      rowString.append(",").append(csvFormat(row.get(j)));    }    output[i + 1]=rowString.toString();  }  return output;}  }
class C{  public RemoteExperiment(Experiment base) throws Exception {  setBaseExperiment(base);}  }
class C{  public static Stats of(double... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public static boolean acceptFile(String fileName){  String[] endings=DelphiLanguage.instance.getFileSuffixes();  for (  String ending : endings) {    if (fileName.toLowerCase().endsWith("." + ending)) {      return true;    }  }  return false;}  }
class C{  private CustomInternalN4JSParser collectFollowElements(TokenSource tokens,boolean strict,Set<FollowElement> result){  CustomInternalN4JSParser parser=createParser();  parser.setStrict(strict);  try {    ObservableXtextTokenStream tokenStream=new ObservableXtextTokenStream(tokens,parser);    result.addAll(doGetFollowElements(parser,tokenStream));  } catch (  InfiniteRecursion infinite) {    result.addAll(parser.getFollowElements());  }  return parser;}  }
class C{  public K memCache(boolean cache){  this.memCache=cache;  return self();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static public void notNull(Object arg,String argName){  if (!(arg != null)) {    throw new IllegalArgumentException(String.format("%s should not be null",argName));  }}  }
class C{  public WeightedRandomSampler(int weight,RandomEngine randomGenerator){  if (randomGenerator == null)   randomGenerator=cern.jet.random.AbstractDistribution.makeDefaultGenerator();  this.generator=new Uniform(randomGenerator);  setWeight(weight);}  }
class C{  public CandidateHarvester next() throws NoSuchElementException {  return elementIter.next().getHarvester();}  }
class C{  private CTextEvaluator(){}  }
class C{  public void checkRateLimit(HttpResponse<JsonNode> response,RateLimitType type,Server server) throws RateLimitedException {  if (rateLimitManager.isRateLimited(type,server) && type != RateLimitType.UNKNOWN) {    long retryAfter=rateLimitManager.getRateLimit(type,server);    throw new RateLimitedException("We are rate limited for " + retryAfter + " ms!",retryAfter,type,server,rateLimitManager);  }  if (response != null && response.getBody() != null && !response.getBody().isArray() && response.getBody().getObject().has("retry_after")) {    long retryAfter=response.getBody().getObject().getLong("retry_after");    rateLimitManager.addRateLimit(type,server,retryAfter);    throw new RateLimitedException("We are rate limited for " + retryAfter + " ms (type: "+ type.name()+ ")!",retryAfter,type,server,rateLimitManager);  }}  }
class C{  private void processRefreshSubStages(BlockStorageEnumerationContext aws){switch (aws.refreshSubStage) {case EBS_VOLUMES:    if (aws.pageNo == 1) {      logInfo("Running enumeration service for creation in refresh mode for %s",aws.computeEnumerationRequest.resourceReference);    }  logFine("Processing page %d ",aws.pageNo);aws.pageNo++;if (aws.describeVolumesRequest == null) {creatAWSRequestAndAsyncHandler(aws);}aws.amazonEC2Client.describeVolumesAsync(aws.describeVolumesRequest,aws.resultHandler);break;case S3_BUCKETS:break;default :logSevere("Unknown AWS enumeration stage %s ",aws.refreshSubStage.toString());aws.error=new Exception("Unknown AWS enumeration stage %s");AdapterUtils.sendFailurePatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference,aws.error);break;}}  }
class C{  private void addEntityViews(TextAnnotation ta,ACEDocumentAnnotation docAnnotation,File file){  SpanLabelView entityView=new SpanLabelView(ViewNames.MENTION_ACE,ACEReader.class.getCanonicalName(),ta,1.0f,true);  CoreferenceView corefHeadView=new CoreferenceView(ViewNames.COREF_HEAD,ACEReader.class.getCanonicalName(),ta,1.0f);  CoreferenceView corefExtentView=new CoreferenceView(ViewNames.COREF_EXTENT,ACEReader.class.getCanonicalName(),ta,1.0f);  for (  ACEEntity entity : docAnnotation.entityList) {    List<Constituent> corefMentions=new ArrayList<>(docAnnotation.entityList.size());    List<Constituent> corefMentionHeads=new ArrayList<>(docAnnotation.entityList.size());    for (    ACEEntityMention entityMention : entity.entityMentionList) {      int extentStartTokenId=ta.getTokenIdFromCharacterOffset(entityMention.extentStart);      int extentEndTokenId=ta.getTokenIdFromCharacterOffset(entityMention.extentEnd);      if (extentStartTokenId < 0 || extentEndTokenId < 0 || extentStartTokenId > extentEndTokenId + 1) {        logger.error("Incorrect Extent Token Span for mention - " + entity.id + " "+ entityMention.id);        continue;      }      Constituent extentConstituent=new Constituent(entity.type,ViewNames.MENTION_ACE,ta,extentStartTokenId,extentEndTokenId + 1);      extentConstituent.addAttribute(EntityTypeAttribute,entity.type);      extentConstituent.addAttribute(EntityIDAttribute,entity.id);      extentConstituent.addAttribute(EntityMentionIDAttribute,entityMention.id);      extentConstituent.addAttribute(EntityMentionTypeAttribute,entityMention.type);      extentConstituent.addAttribute(EntityClassAttribute,entity.classEntity);      String entitySubType=(entity.subtype != null) ? entity.subtype : entity.type;      extentConstituent.addAttribute(EntitySubtypeAttribute,entitySubType);      if (entityMention.ldcType != null) {        extentConstituent.addAttribute(EntityMentionLDCTypeAttribute,entityMention.ldcType);      }      extentConstituent.addAttribute(EntityHeadStartCharOffset,entityMention.headStart + "");      extentConstituent.addAttribute(EntityHeadEndCharOffset,entityMention.headEnd + 1 + "");      entityView.addConstituent(extentConstituent);      Constituent corefExtentConstituent=extentConstituent.cloneForNewViewWithDestinationLabel(ViewNames.COREF_EXTENT,entity.id);      corefMentions.add(corefExtentConstituent);      Constituent corefHeadConstituent=getEntityHeadForConstituent(corefExtentConstituent,ta,ViewNames.COREF_HEAD);      if (corefHeadConstituent != null) {        corefMentionHeads.add(corefHeadConstituent);      }    }    Constituent canonicalMention=null;    double[] scores=new double[corefMentions.size()];    for (int i=0; i < corefMentions.size(); i++) {      Constituent cons=corefMentions.get(i);      scores[i]=cons.getConstituentScore();      if (canonicalMention == null || canonicalMention.getSurfaceForm().length() < cons.getSurfaceForm().length()) {        canonicalMention=cons;      }    }    if (corefMentions.size() > 0) {      corefExtentView.addCorefEdges(canonicalMention,corefMentions,scores);    } else {      logger.error("No Entity Mentions found for a given entity - " + entity.id);    }    canonicalMention=null;    scores=new double[corefMentionHeads.size()];    for (int i=0; i < corefMentionHeads.size(); i++) {      Constituent cons=corefMentionHeads.get(i);      scores[i]=cons.getConstituentScore();      if (canonicalMention == null || canonicalMention.getSurfaceForm().length() < cons.getSurfaceForm().length()) {        canonicalMention=cons;      }    }    if (corefMentionHeads.size() > 0) {      corefHeadView.addCorefEdges(canonicalMention,corefMentionHeads,scores);    } else {      logger.error("No Entity Mentions found for a given entity - " + entity.id);    }  }  ta.addView(ViewNames.MENTION_ACE,entityView);  ta.addView(ViewNames.COREF_HEAD,corefHeadView);  ta.addView(ViewNames.COREF_EXTENT,corefExtentView);}  }
class C{  @Override public void onConfiguration(HobbitOps.View view,boolean firstTimeIn){  super.onConfiguration(view,firstTimeIn);  if (firstTimeIn)   mCr=view.getApplicationContext().getContentResolver();}  }
class C{  @Override public void mouseReleased(MouseEvent e){  if (this.panLast != null) {    this.panLast=null;    setCursor(Cursor.getDefaultCursor());  } else   if (this.zoomRectangle != null) {    boolean hZoom, vZoom;    if (this.orientation == PlotOrientation.HORIZONTAL) {      hZoom=this.rangeZoomable;      vZoom=this.domainZoomable;    } else {      hZoom=this.domainZoomable;      vZoom=this.rangeZoomable;    }    boolean zoomTrigger1=hZoom && Math.abs(e.getX() - this.zoomPoint.getX()) >= this.zoomTriggerDistance;    boolean zoomTrigger2=vZoom && Math.abs(e.getY() - this.zoomPoint.getY()) >= this.zoomTriggerDistance;    if (zoomTrigger1 || zoomTrigger2) {      if ((hZoom && (e.getX() < this.zoomPoint.getX())) || (vZoom && (e.getY() < this.zoomPoint.getY()))) {        restoreAutoBounds();      } else {        double x, y, w, h;        Rectangle2D screenDataArea=getScreenDataArea((int)this.zoomPoint.getX(),(int)this.zoomPoint.getY());        double maxX=screenDataArea.getMaxX();        double maxY=screenDataArea.getMaxY();        if (!vZoom) {          x=this.zoomPoint.getX();          y=screenDataArea.getMinY();          w=Math.min(this.zoomRectangle.getWidth(),maxX - this.zoomPoint.getX());          h=screenDataArea.getHeight();        } else         if (!hZoom) {          x=screenDataArea.getMinX();          y=this.zoomPoint.getY();          w=screenDataArea.getWidth();          h=Math.min(this.zoomRectangle.getHeight(),maxY - this.zoomPoint.getY());        } else {          x=this.zoomPoint.getX();          y=this.zoomPoint.getY();          w=Math.min(this.zoomRectangle.getWidth(),maxX - this.zoomPoint.getX());          h=Math.min(this.zoomRectangle.getHeight(),maxY - this.zoomPoint.getY());        }        Rectangle2D zoomArea=new Rectangle2D.Double(x,y,w,h);        zoom(zoomArea);      }      this.zoomPoint=null;      this.zoomRectangle=null;    } else {      Graphics2D g2=(Graphics2D)getGraphics();      if (this.useBuffer) {        repaint();      } else {        drawZoomRectangle(g2,true);      }      g2.dispose();      this.zoomPoint=null;      this.zoomRectangle=null;    }  } else   if (e.isPopupTrigger()) {    if (this.popup != null) {      displayPopupMenu(e.getX(),e.getY());    }  }}  }
class C{  public static final double[] timesMinus(final double[] v1,final double s1,final double[] v2){  final double[] sub=new double[v1.length];  for (int i=0; i < v1.length; i++) {    sub[i]=v1[i] * s1 - v2[i];  }  return sub;}  }
class C{  public void testStringSortMissingFirst() throws Exception {  checkSortMissingFirst("stringdv_missingfirst","a","z");}  }
class C{  Value locate(long startingId,String dottedName,boolean traverseProto) throws PlayerDebugException {  if (dottedName == null)   return null;  StringTokenizer names=new StringTokenizer(dottedName,".");  Value val=getSession().getWorkerSession(m_isolateId).getValue(startingId);  while (names.hasMoreTokens() && val != null)   val=locateForNamed(val.getId(),names.nextToken(),traverseProto).getValue();  return val;}  }
class C{  public TFloatLongHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.661 -0500",hash_original_method="7E2E6D9DD55E11668C618EBE33FB07A0",hash_generated_method="CA3FA9F91E6A875A2B5F08D2451BF398") public int hashCode(){  int result=17;  result=31 * result + first.hashCode();  result=31 * result + second.hashCode();  return result;}  }
class C{  private static Properties createProperties1(){  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  return props;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  JokeCacheDao.createTable(db,ifNotExists);  FreshNewsCacheDao.createTable(db,ifNotExists);  PictureCacheDao.createTable(db,ifNotExists);  SisterCacheDao.createTable(db,ifNotExists);  VideoCacheDao.createTable(db,ifNotExists);}  }
class C{  public void addAttributeSuffixCondition(String namespaceURI,String name,String value){  _specificityC++;  addCondition(Condition.createAttributeSuffixCondition(namespaceURI,name,value));}  }
class C{  public boolean forEachValue(TDoubleProcedure procedure){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public int fetchFate(String key){  for (int i=0; i < Cell.fates.length; i++)   if (Cell.fates[i].equalsIgnoreCase(key))   return i;  System.out.println("Unknown fate: " + key);  return 0;}  }
class C{  static char readChar(IXMLReader reader,char entityChar) throws IOException, XMLParseException {  String str=XMLUtil.read(reader,entityChar);  char ch=str.charAt(0);  if (ch == entityChar) {    XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);  }  return ch;}  }
class C{  public Message build(){  return message;}  }
class C{  StatementPatternNode[] stmtPatternsWithVars(final String... varNames){  final StatementPatternNode[] statementPatterns=new StatementPatternNode[varNames.length];  for (int i=0; i < varNames.length; i++) {    statementPatterns[i]=stmtPatternWithVar(varNames[i],false);  }  return statementPatterns;}  }
class C{  private boolean isFirstGreaterThanLast(Number greater,Number less,NumericalType type){switch (type) {case INTEGER:case BYTE:case SHORT:case LONG:    return (greater.longValue() >= less.longValue());case FLOAT:case DOUBLE:  return (greater.doubleValue() >= less.doubleValue());default :MONITOR_LOGGER.logp(Level.FINEST,GaugeMonitor.class.getName(),"isFirstGreaterThanLast","the threshold type is invalid");return false;}}  }
class C{  public static AccessibilityNodeInfoCompat searchFromInOrderTraversal(Context context,AccessibilityNodeInfoCompat root,NodeFilter filter,int direction){  AccessibilityNodeInfoCompat currentNode=NodeFocusFinder.focusSearch(root,direction);  final HashSet<AccessibilityNodeInfoCompat> seenNodes=new HashSet<AccessibilityNodeInfoCompat>();  while ((currentNode != null) && !seenNodes.contains(currentNode) && !filter.accept(context,currentNode)) {    seenNodes.add(currentNode);    currentNode=NodeFocusFinder.focusSearch(currentNode,direction);  }  AccessibilityNodeInfoUtils.recycleNodes(seenNodes);  return currentNode;}  }
class C{  public SurfacePolyline(){}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/os-install") public TaskResourceRep osInstall(@PathParam("id") URI hostId,OsInstallParam param){  ArgValidator.checkFieldUriType(hostId,Host.class,"id");  ArgValidator.checkFieldNotNull(param.getComputeImage(),"compute_image");  ComputeImage img=queryObject(ComputeImage.class,param.getComputeImage(),true);  ArgValidator.checkEntity(img,param.getComputeImage(),isIdEmbeddedInURL(param.getComputeImage()));  if (!ComputeImageStatus.AVAILABLE.name().equals(img.getComputeImageStatus())) {    throw APIException.badRequests.invalidParameterComputeImageIsNotAvailable(img.getId());  }  Host host=queryObject(Host.class,hostId,true);  ArgValidator.checkEntity(host,hostId,isIdEmbeddedInURL(hostId));  if (host.getComputeElement() == null) {    throw APIException.badRequests.invalidParameterHostHasNoComputeElement();  }  if (!host.getType().equals(Host.HostType.No_OS.name()) && !param.getForceInstallation()) {    throw APIException.badRequests.invalidParameterHostAlreadyHasOs(host.getType());  }  if (!StringUtils.isNotBlank(param.getRootPassword())) {    throw APIException.badRequests.hostPasswordNotSet();  } else {    host.setPassword(param.getRootPassword());    host.setUsername("root");  }  ComputeElement ce=queryObject(ComputeElement.class,host.getComputeElement(),true);  ArgValidator.checkEntity(ce,host.getComputeElement(),isIdEmbeddedInURL(host.getComputeElement()));  if (ce.getUuid() == null) {    throw APIException.badRequests.computeElementHasNoUuid();  }  ComputeSystem cs=queryObject(ComputeSystem.class,ce.getComputeSystem(),true);  ArgValidator.checkEntity(cs,ce.getComputeSystem(),isIdEmbeddedInURL(ce.getComputeSystem()));  verifyImagePresentOnImageServer(cs,img);  if (!StringUtils.isNotBlank(cs.getOsInstallNetwork())) {    throw APIException.badRequests.osInstallNetworkNotSet();  }  if (!cs.getVlans().contains(cs.getOsInstallNetwork())) {    throw APIException.badRequests.osInstallNetworkNotValid(cs.getOsInstallNetwork());  }  URIQueryResultList jobUriList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getComputeImageJobsByHostConstraint(host.getId()),jobUriList);  Iterator<URI> iterator=jobUriList.iterator();  while (iterator.hasNext()) {    ComputeImageJob existingJob=_dbClient.queryObject(ComputeImageJob.class,iterator.next());    if (!existingJob.getInactive() && existingJob.getJobStatus().equals(ComputeImageJob.JobStatus.CREATED.name())) {      throw APIException.badRequests.osInstallAlreadyInProgress();    }  }  String passwordHash=Md5Crypt.md5Crypt(host.getPassword().getBytes());  ComputeImageJob job=new ComputeImageJob();  job.setId(URIUtil.createId(ComputeImageJob.class));  job.setComputeImageId(img.getId());  job.setHostId(host.getId());  job.setPasswordHash(passwordHash);  job.setHostName(param.getHostName());  job.setHostIp(param.getHostIp());  job.setNetmask(param.getNetmask());  job.setGateway(param.getGateway());  job.setNtpServer(param.getNtpServer());  job.setDnsServers(param.getDnsServers());  job.setManagementNetwork(param.getManagementNetwork());  job.setPxeBootIdentifier(ImageServerUtils.uuidFromString(host.getUuid()).toString());  job.setComputeImageServerId(cs.getComputeImageServer());  if (!NullColumnValueGetter.isNullURI(param.getVolume()) || !NullColumnValueGetter.isNullURI(host.getBootVolumeId())) {    Volume vol=null;    if (!NullColumnValueGetter.isNullURI(param.getVolume())) {      vol=queryObject(Volume.class,param.getVolume(),true);      host.setBootVolumeId(vol.getId());    } else {      vol=queryObject(Volume.class,host.getBootVolumeId(),true);    }    job.setVolumeId(vol.getId());    StorageSystem st=queryObject(StorageSystem.class,vol.getStorageController(),true);    if (st != null && DiscoveredDataObject.Type.xtremio.name().equals(st.getSystemType())) {      _log.info("xtremio volume id {}",vol.getNativeId());      job.setBootDevice(vol.getNativeId());    } else {      _log.info("volume id {}",vol.getWWN());      job.setBootDevice(ImageServerUtils.uuidFromString(vol.getWWN()).toString());    }  }  host.setProvisioningStatus(ProvisioningJobStatus.IN_PROGRESS.toString());  _dbClient.persistObject(host);  _dbClient.createObject(job);  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.INSTALL_OPERATING_SYSTEM);  _dbClient.createTaskOpStatus(Host.class,host.getId(),taskId,op);  ImageServerController controller=getController(ImageServerController.class,null);  AsyncTask task=new AsyncTask(Host.class,host.getId(),taskId);  try {    controller.installOperatingSystem(task,job.getId());  } catch (  InternalException e) {    _log.error("Did not install OS due to controller error",e);    job.setJobStatus(ComputeImageJob.JobStatus.FAILED.name());    _dbClient.persistObject(job);    _dbClient.error(Host.class,host.getId(),taskId,e);  }  return toTask(host,taskId,op);}  }
class C{  public boolean isStrictMode(){  return strictMode;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  try {    return readFullyNoClose(in);  }  finally {    in.close();  }}  }
class C{  private void hqr2() throws ArithmeticException {  int nn=this.n;  int n=nn - 1;  int low=0;  int high=nn - 1;  double eps=Math.pow(2.0,-52.0);  double exshift=0.0;  double p=0, q=0, r=0, s=0, z=0, t, w, x, y;  double norm=0.0;  for (int i=0; i < nn; i++) {    if (i < low | i > high) {      d[i]=H[i][i];      e[i]=0.0;    }    for (int j=Math.max(i - 1,0); j < nn; j++) {      norm=norm + Math.abs(H[i][j]);    }  }  int iter=0;  while (n >= low) {    int l=n;    while (l > low) {      s=Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);      if (s == 0.0) {        s=norm;      }      if (Math.abs(H[l][l - 1]) < eps * s) {        break;      }      l--;    }    if (l == n) {      H[n][n]=H[n][n] + exshift;      d[n]=H[n][n];      e[n]=0.0;      n--;      iter=0;    } else     if (l == n - 1) {      w=H[n][n - 1] * H[n - 1][n];      p=(H[n - 1][n - 1] - H[n][n]) / 2.0;      q=p * p + w;      z=Math.sqrt(Math.abs(q));      H[n][n]=H[n][n] + exshift;      H[n - 1][n - 1]=H[n - 1][n - 1] + exshift;      x=H[n][n];      if (q >= 0) {        if (p >= 0) {          z=p + z;        } else {          z=p - z;        }        d[n - 1]=x + z;        d[n]=d[n - 1];        if (z != 0.0) {          d[n]=x - w / z;        }        e[n - 1]=0.0;        e[n]=0.0;        x=H[n][n - 1];        s=Math.abs(x) + Math.abs(z);        p=x / s;        q=z / s;        r=Math.sqrt(p * p + q * q);        p=p / r;        q=q / r;        for (int j=n - 1; j < nn; j++) {          z=H[n - 1][j];          H[n - 1][j]=q * z + p * H[n][j];          H[n][j]=q * H[n][j] - p * z;        }        for (int i=0; i <= n; i++) {          z=H[i][n - 1];          H[i][n - 1]=q * z + p * H[i][n];          H[i][n]=q * H[i][n] - p * z;        }        for (int i=low; i <= high; i++) {          z=V[i][n - 1];          V[i][n - 1]=q * z + p * V[i][n];          V[i][n]=q * V[i][n] - p * z;        }      } else {        d[n - 1]=x + p;        d[n]=x + p;        e[n - 1]=z;        e[n]=-z;      }      n=n - 2;      iter=0;    } else {      x=H[n][n];      y=0.0;      w=0.0;      if (l < n) {        y=H[n - 1][n - 1];        w=H[n][n - 1] * H[n - 1][n];      }      if (iter == 10) {        exshift+=x;        for (int i=low; i <= n; i++) {          H[i][i]-=x;        }        s=Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);        x=y=0.75 * s;        w=-0.4375 * s * s;      }      if (iter == 30) {        s=(y - x) / 2.0;        s=s * s + w;        if (s > 0) {          s=Math.sqrt(s);          if (y < x) {            s=-s;          }          s=x - w / ((y - x) / 2.0 + s);          for (int i=low; i <= n; i++) {            H[i][i]-=s;          }          exshift+=s;          x=y=w=0.964;        }      }      iter=iter + 1;      if (iter > maxIterations)       throw new ArithmeticException(ERROR_STRING);      int m=n - 2;      while (m >= l) {        z=H[m][m];        r=x - z;        s=y - z;        p=(r * s - w) / H[m + 1][m] + H[m][m + 1];        q=H[m + 1][m + 1] - z - r- s;        r=H[m + 2][m + 1];        s=Math.abs(p) + Math.abs(q) + Math.abs(r);        p=p / s;        q=q / s;        r=r / s;        if (m == l) {          break;        }        if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {          break;        }        m--;      }      for (int i=m + 2; i <= n; i++) {        H[i][i - 2]=0.0;        if (i > m + 2) {          H[i][i - 3]=0.0;        }      }      for (int k=m; k <= n - 1; k++) {        boolean notlast=(k != n - 1);        if (k != m) {          p=H[k][k - 1];          q=H[k + 1][k - 1];          r=(notlast ? H[k + 2][k - 1] : 0.0);          x=Math.abs(p) + Math.abs(q) + Math.abs(r);          if (x != 0.0) {            p=p / x;            q=q / x;            r=r / x;          }        }        if (x == 0.0) {          break;        }        s=Math.sqrt(p * p + q * q + r * r);        if (p < 0) {          s=-s;        }        if (s != 0) {          if (k != m) {            H[k][k - 1]=-s * x;          } else           if (l != m) {            H[k][k - 1]=-H[k][k - 1];          }          p=p + s;          x=p / s;          y=q / s;          z=r / s;          q=q / p;          r=r / p;          for (int j=k; j < nn; j++) {            p=H[k][j] + q * H[k + 1][j];            if (notlast) {              p=p + r * H[k + 2][j];              H[k + 2][j]=H[k + 2][j] - p * z;            }            H[k][j]=H[k][j] - p * x;            H[k + 1][j]=H[k + 1][j] - p * y;          }          for (int i=0; i <= Math.min(n,k + 3); i++) {            p=x * H[i][k] + y * H[i][k + 1];            if (notlast) {              p=p + z * H[i][k + 2];              H[i][k + 2]=H[i][k + 2] - p * r;            }            H[i][k]=H[i][k] - p;            H[i][k + 1]=H[i][k + 1] - p * q;          }          for (int i=low; i <= high; i++) {            p=x * V[i][k] + y * V[i][k + 1];            if (notlast) {              p=p + z * V[i][k + 2];              V[i][k + 2]=V[i][k + 2] - p * r;            }            V[i][k]=V[i][k] - p;            V[i][k + 1]=V[i][k + 1] - p * q;          }        }      }    }  }  if (norm == 0.0) {    return;  }  for (n=nn - 1; n >= 0; n--) {    p=d[n];    q=e[n];    if (q == 0) {      int l=n;      H[n][n]=1.0;      for (int i=n - 1; i >= 0; i--) {        w=H[i][i] - p;        r=0.0;        for (int j=l; j <= n; j++) {          r=r + H[i][j] * H[j][n];        }        if (e[i] < 0.0) {          z=w;          s=r;        } else {          l=i;          if (e[i] == 0.0) {            if (w != 0.0) {              H[i][n]=-r / w;            } else {              H[i][n]=-r / (eps * norm);            }          } else {            x=H[i][i + 1];            y=H[i + 1][i];            q=(d[i] - p) * (d[i] - p) + e[i] * e[i];            t=(x * s - z * r) / q;            H[i][n]=t;            if (Math.abs(x) > Math.abs(z)) {              H[i + 1][n]=(-r - w * t) / x;            } else {              H[i + 1][n]=(-s - y * t) / z;            }          }          t=Math.abs(H[i][n]);          if ((eps * t) * t > 1) {            for (int j=i; j <= n; j++) {              H[j][n]=H[j][n] / t;            }          }        }      }    } else     if (q < 0) {      int l=n - 1;      if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {        H[n - 1][n - 1]=q / H[n][n - 1];        H[n - 1][n]=-(H[n][n] - p) / H[n][n - 1];      } else {        cdiv(0.0,-H[n - 1][n],H[n - 1][n - 1] - p,q);        H[n - 1][n - 1]=cdivr;        H[n - 1][n]=cdivi;      }      H[n][n - 1]=0.0;      H[n][n]=1.0;      for (int i=n - 2; i >= 0; i--) {        double ra, sa, vr, vi;        ra=0.0;        sa=0.0;        for (int j=l; j <= n; j++) {          ra=ra + H[i][j] * H[j][n - 1];          sa=sa + H[i][j] * H[j][n];        }        w=H[i][i] - p;        if (e[i] < 0.0) {          z=w;          r=ra;          s=sa;        } else {          l=i;          if (e[i] == 0) {            cdiv(-ra,-sa,w,q);            H[i][n - 1]=cdivr;            H[i][n]=cdivi;          } else {            x=H[i][i + 1];            y=H[i + 1][i];            vr=(d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;            vi=(d[i] - p) * 2.0 * q;            if (vr == 0.0 & vi == 0.0) {              vr=eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x)+ Math.abs(y)+ Math.abs(z));            }            cdiv(x * r - z * ra + q * sa,x * s - z * sa - q * ra,vr,vi);            H[i][n - 1]=cdivr;            H[i][n]=cdivi;            if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {              H[i + 1][n - 1]=(-ra - w * H[i][n - 1] + q * H[i][n]) / x;              H[i + 1][n]=(-sa - w * H[i][n] - q * H[i][n - 1]) / x;            } else {              cdiv(-r - y * H[i][n - 1],-s - y * H[i][n],z,q);              H[i + 1][n - 1]=cdivr;              H[i + 1][n]=cdivi;            }          }          t=Math.max(Math.abs(H[i][n - 1]),Math.abs(H[i][n]));          if ((eps * t) * t > 1) {            for (int j=i; j <= n; j++) {              H[j][n - 1]=H[j][n - 1] / t;              H[j][n]=H[j][n] / t;            }          }        }      }    }  }  for (int i=0; i < nn; i++) {    if (i < low | i > high) {      for (int j=i; j < nn; j++) {        V[i][j]=H[i][j];      }    }  }  for (int j=nn - 1; j >= low; j--) {    for (int i=low; i <= high; i++) {      z=0.0;      for (int k=low; k <= Math.min(j,high); k++) {        z=z + V[i][k] * H[k][j];      }      V[i][j]=z;    }  }}  }
class C{  public void commitEdit() throws ParseException {  JFormattedTextField ftf=getTextField();  ftf.commitEdit();}  }
class C{  public static int moveByWord(String text,int column,boolean forward,boolean returnCursorAtEnd){  int curColumn=column;  int length=text.length();  int direction=forward ? 1 : -1;  boolean farWordEnd=((direction == 1 && returnCursorAtEnd) || (direction == -1 && !returnCursorAtEnd));  boolean foundEarlyMatch=false;  if (!UnicodeUtils.isWhitespace(text.charAt(curColumn))) {    curColumn=skipNonwhitespaceSimilar(text,curColumn,forward);    if (farWordEnd && curColumn - direction != column) {      curColumn-=direction;      foundEarlyMatch=true;    }  }  if (!foundEarlyMatch && curColumn >= 0 && curColumn < length) {    curColumn=skipWhitespace(text,curColumn,forward);    if (farWordEnd && curColumn >= 0 && curColumn < length) {      curColumn=skipNonwhitespaceSimilar(text,curColumn,forward) - direction;    }  }  if (curColumn < 0 || curColumn >= length) {    return -1;  }  return curColumn;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  throw new BadLocationException(pos + " not in range " + p0+ ","+ p1,pos);}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  private boolean init(){  if (implClass.isInterface()) {    env.error("rmic.cant.make.stubs.for.interface",implClass.qualifiedName());    return false;  }  List<ClassDoc> remotesImplemented=new ArrayList<ClassDoc>();  for (ClassDoc cl=implClass; cl != null; cl=cl.superclass()) {    for (    ClassDoc intf : cl.interfaces()) {      if (!remotesImplemented.contains(intf) && intf.subclassOf(env.docRemote())) {        remotesImplemented.add(intf);        if (env.verbose()) {          env.output("[found remote interface: " + intf.qualifiedName() + "]");        }      }    }    if (cl == implClass && remotesImplemented.isEmpty()) {      if (implClass.subclassOf(env.docRemote())) {        env.error("rmic.must.implement.remote.directly",implClass.qualifiedName());      } else {        env.error("rmic.must.implement.remote",implClass.qualifiedName());      }      return false;    }  }  remoteInterfaces=remotesImplemented.toArray(new ClassDoc[remotesImplemented.size()]);  Map<String,Method> methods=new HashMap<String,Method>();  boolean errors=false;  for (  ClassDoc intf : remotesImplemented) {    if (!collectRemoteMethods(intf,methods)) {      errors=true;    }  }  if (errors) {    return false;  }  String[] orderedKeys=methods.keySet().toArray(new String[methods.size()]);  Arrays.sort(orderedKeys);  remoteMethods=new Method[methods.size()];  for (int i=0; i < remoteMethods.length; i++) {    remoteMethods[i]=methods.get(orderedKeys[i]);    if (env.verbose()) {      String msg="[found remote method <" + i + ">: "+ remoteMethods[i].operationString();      ClassDoc[] exceptions=remoteMethods[i].exceptionTypes();      if (exceptions.length > 0) {        msg+=" throws ";        for (int j=0; j < exceptions.length; j++) {          if (j > 0) {            msg+=", ";          }          msg+=exceptions[j].qualifiedName();        }      }      msg+="\n\tname and descriptor = \"" + remoteMethods[i].nameAndDescriptor();      msg+="\n\tmethod hash = " + remoteMethods[i].methodHash() + "]";      env.output(msg);    }  }  interfaceHash=computeInterfaceHash();  return true;}  }
class C{  private void showAlertDialogDeleteSingleNote(){  alertDialogDeleteSingleNote.show();}  }
class C{  private void convert(){  scheduleFactory=schedule.getFactory();  log.info("Converting to MATSim transit schedule");  int counterLines=0;  int counterRoutes=0;  for (  Entry<String,GTFSStop> stopEntry : gtfsStops.entrySet()) {    Coord result=transformation.transform(stopEntry.getValue().getPoint());    TransitStopFacility stopFacility=scheduleFactory.createTransitStopFacility(Id.create(stopEntry.getKey(),TransitStopFacility.class),result,stopEntry.getValue().isBlocks());    stopFacility.setName(stopEntry.getValue().getName());    schedule.addStopFacility(stopFacility);  }  if (usesFrequencies) {    log.info("    Using frequencies.txt to generate departures");  } else {    log.info("    Using stop_times.txt to generate departures");  }  DepartureIds departureIds=new DepartureIds();  for (  GTFSRoute gtfsRoute : gtfsRoutes.values()) {    TransitLine transitLine=scheduleFactory.createTransitLine(Id.create(gtfsRoute.getShortName() + "_" + gtfsRoute.getRouteId(),TransitLine.class));    schedule.addTransitLine(transitLine);    counterLines++;    for (    Trip trip : gtfsRoute.getTrips().values()) {      boolean isService=false;      for (      String serviceId : serviceIds) {        if (trip.getService().equals(services.get(serviceId))) {          isService=true;        }      }      if (isService) {        List<TransitRouteStop> transitRouteStops=new ArrayList<>();        Date startTime=trip.getStopTimes().get(trip.getStopTimes().firstKey()).getArrivalTime();        for (        StopTime stopTime : trip.getStopTimes().values()) {          double arrival=Time.UNDEFINED_TIME, departure=Time.UNDEFINED_TIME;          if (!stopTime.getSeuencePosition().equals(trip.getStopTimes().firstKey())) {            long difference=stopTime.getArrivalTime().getTime() - startTime.getTime();            try {              arrival=Time.parseTime(timeFormat.format(new Date(timeFormat.parse("00:00:00").getTime() + difference)));            } catch (            ParseException e) {              e.printStackTrace();            }          }          if (!stopTime.getSeuencePosition().equals(trip.getStopTimes().lastKey())) {            long difference=stopTime.getDepartureTime().getTime() - startTime.getTime();            try {              departure=Time.parseTime(timeFormat.format(new Date(timeFormat.parse("00:00:00").getTime() + difference)));            } catch (            ParseException e) {              e.printStackTrace();            }          }          TransitRouteStop newTRS=scheduleFactory.createTransitRouteStop(schedule.getFacilities().get(Id.create(stopTime.getStopId(),TransitStopFacility.class)),arrival,departure);          newTRS.setAwaitDepartureTime(defaultAwaitDepartureTime);          transitRouteStops.add(newTRS);        }        if (usesFrequencies) {          TransitRoute newTransitRoute=scheduleFactory.createTransitRoute(Id.create(trip.getId(),TransitRoute.class),null,transitRouteStops,gtfsRoute.getRouteType().name);          for (          Frequency frequency : trip.getFrequencies()) {            for (Date actualTime=(Date)frequency.getStartTime().clone(); actualTime.before(frequency.getEndTime()); actualTime.setTime(actualTime.getTime() + frequency.getSecondsPerDeparture() * 1000)) {              newTransitRoute.addDeparture(scheduleFactory.createDeparture(Id.create(departureIds.getNext(newTransitRoute.getId()),Departure.class),Time.parseTime(timeFormat.format(actualTime))));            }          }          transitLine.addRoute(newTransitRoute);          counterRoutes++;        } else {          boolean routeExistsInTransitLine=false;          for (          TransitRoute transitRoute : transitLine.getRoutes().values()) {            if (transitRoute.getStops().equals(transitRouteStops)) {              transitRoute.addDeparture(scheduleFactory.createDeparture(Id.create(departureIds.getNext(transitRoute.getId()),Departure.class),Time.parseTime(timeFormat.format(startTime))));              routeExistsInTransitLine=true;              break;            }          }          if (!routeExistsInTransitLine) {            TransitRoute newTransitRoute=scheduleFactory.createTransitRoute(Id.create(trip.getId(),TransitRoute.class),null,transitRouteStops,gtfsRoute.getRouteType().name);            newTransitRoute.addDeparture(scheduleFactory.createDeparture(Id.create(departureIds.getNext(newTransitRoute.getId()),Departure.class),Time.parseTime(timeFormat.format(startTime))));            transitLine.addRoute(newTransitRoute);            counterRoutes++;          }        }      }    }  }  vehicles=ScheduleTools.createVehicles(schedule);  log.info("    Created " + counterRoutes + " routes on "+ counterLines+ " lines.");  log.info("    Day " + dateUsed);  log.info("... GTFS converted to an unmapped MATSIM Transit Schedule");  log.info("#############################################################");}  }
class C{  public void clearBuffer() throws IOException {  if (writer == null) {    this.clear();  }}  }
class C{  protected void doAfterScan(){}  }
class C{  @Override public boolean hasEntity(){  return entity != null;}  }
class C{  @MediumTest public void testGoingDownFromFocusableToUnfocusableWhenFocusableIsBelow(){  mListUtil.setSelectedPosition(3);  sendKeys(KeyEvent.KEYCODE_DPAD_DOWN);  assertEquals("selected item position",4,mListView.getSelectedItemPosition());  assertSelectedViewFocus(false);}  }
class C{  public static Object[] ordinalArray(Iterator tuples,String field,Comparator cmp){  HashSet set=new HashSet();  while (tuples.hasNext())   set.add(((Tuple)tuples.next()).get(field));  Object[] o=set.toArray();  Arrays.sort(o,cmp);  return o;}  }
class C{  public void processData() throws IOException {  extractDefs();  fetchRrdData();  fixZeroEndingTimestamp();  chooseOptimalStep();  createTimestamps();  assignTimestampsToSources();  normalizeRrdValues();  calculateNonRrdSources();}  }
class C{  private static boolean isHexNumber(final String value){  int index=value.startsWith("-") ? 1 : 0;  return value.startsWith("0x",index) || value.startsWith("0X",index) || value.startsWith("#",index);}  }
class C{  public HttpVersion(int major,int minor){  super(HTTP,major,minor);}  }
class C{  public static boolean writeFile(String filePath,InputStream stream,boolean append){  return writeFile(filePath != null ? new File(filePath) : null,stream,append);}  }
class C{  public UnsignedShort subtract(UnsignedShort decrement){  return valueOf(getValue() - decrement.getValue());}  }
class C{  @Deprecated public DiskWriteAttributes create(){  return new DiskWriteAttributesImpl(this.props);}  }
class C{  private ArrayList<ArrayList<DBIDs>> buildPartitions(Relation<? extends NumberVector> relation,DBIDs ids,int depth,DimensionSimilarityMatrix matrix){  final int dim=matrix.size();  ArrayList<ArrayList<DBIDs>> subspaceIndex=new ArrayList<>(dim);  SortDBIDsBySingleDimension comp=new VectorUtil.SortDBIDsBySingleDimension(relation);  double[] tmp=new double[ids.size()];  Mean mean=new Mean();  for (int i=0; i < dim; i++) {    final int d=matrix.dim(i);    ArrayList<DBIDs> idx=new ArrayList<>(1 << depth);    ArrayModifiableDBIDs sids=DBIDUtil.newArray(ids);    comp.setDimension(d);    sids.sort(comp);    DBIDArrayIter it=sids.iter();    for (int j=0; j < tmp.length; j++, it.advance()) {      assert (it.valid());      tmp[j]=relation.get(it).doubleValue(d);    }    divide(it,tmp,idx,0,tmp.length,depth,mean);    assert (idx.size() == (1 << depth));    subspaceIndex.add(idx);  }  return subspaceIndex;}  }
class C{  private void checkHelpFeedbackPage(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_help_feedback),true);  assertNotNull(EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.menu_feedback).toUpperCase(Locale.getDefault()),true,false));  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();}  }
class C{  public static String addQuotationMarksIfNeeded(String str){  if (!str.startsWith("\"") && !str.isEmpty())   return "\"" + str + "\"";  return str;}  }
class C{  protected void assertLastTimeNotStartTime(StatisticImpl counter){  assertTrue("Should not have start time the same as last sample time. Start time: " + counter.getStartTime() + " lastTime: "+ counter.getLastSampleTime(),counter.getStartTime() != counter.getLastSampleTime());}  }
class C{  private static void performAttributeSpecificActions(Attribute attribute,byte[] binMessage,int offset,int msgLen) throws StunException {  if (attribute instanceof FingerprintAttribute) {    if (!validateFingerprint((FingerprintAttribute)attribute,binMessage,offset,msgLen)) {      throw new StunException("Wrong value in FINGERPRINT");    }  }}  }
class C{  private void renderBackground(final ExecutionUnit process,final Graphics2D g2,boolean printing){  double width=model.getProcessWidth(process);  double height=model.getProcessHeight(process);  Shape frame=new Rectangle2D.Double(0,0,width,height);  Color currentInnerColor=INNER_COLOR;  g2.setColor(currentInnerColor);  g2.fill(frame);  AffineTransform at=g2.getTransform();  g2.scale(model.getZoomFactor(),model.getZoomFactor());  g2.setColor(PROCESS_TITLE_COLOR);  g2.setFont(PROCESS_FONT);  Operator displayedChain=process.getEnclosingOperator();  if (model.getProcesses().size() == 1) {    g2.drawString(displayedChain.getName(),PROCESS_TITLE_PADDING + 2,PROCESS_FONT.getSize() + PROCESS_TITLE_PADDING);  } else {    g2.drawString(process.getName(),PROCESS_TITLE_PADDING + 2,PROCESS_FONT.getSize() + PROCESS_TITLE_PADDING);  }  g2.setTransform(at);  if (displayedChain.hasBreakpoint()) {    ImageIcon breakpointIcon;    if (displayedChain.getNumberOfBreakpoints() == 1) {      if (displayedChain.hasBreakpoint(BreakpointListener.BREAKPOINT_BEFORE)) {        breakpointIcon=IMAGE_BREAKPOINT_BEFORE_LARGE;      } else       if (displayedChain.hasBreakpoint(BreakpointListener.BREAKPOINT_AFTER)) {        breakpointIcon=IMAGE_BREAKPOINT_AFTER_LARGE;      } else {        breakpointIcon=IMAGE_BREAKPOINT_WITHIN_LARGE;      }    } else {      breakpointIcon=IMAGE_BREAKPOINTS_LARGE;    }    ProcessDrawUtils.getIcon(displayedChain,breakpointIcon).paintIcon(null,g2,(int)width - PROCESS_TITLE_PADDING - IMAGE_BREAKPOINTS_LARGE.getIconWidth(),PROCESS_TITLE_PADDING);  }  boolean dragIndicate=false;  if (drawHighlight && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {switch (RapidMinerGUI.getDragHighlighteMode()) {case FULL:case BORDER:      dragIndicate=true;    break;case NONE:default :  break;}}if (dragIndicate && !printing) {if (RapidMinerGUI.getDragHighlighteMode() == DragHighlightMode.FULL) {MainFrame mainFrame=RapidMinerGUI.getMainFrame();if (mainFrame != null) {  Process currentProcess=mainFrame.getProcess();  if (currentProcess != null) {    ProcessRootOperator rootOperator=currentProcess.getRootOperator();    if (rootOperator != null && rootOperator.getUserData(Tutorial.KEY_USER_DATA_FLAG) != null) {      return;    }  }}Font dragFont;if (width >= 600) {  dragFont=DRAG_FONT_LARGE;} else if (width >= 400) {  dragFont=DRAG_FONT_MEDIUM;} else {  dragFont=DRAG_FONT_SMALL;}int padding=dragFont.getSize() / 3;if (drawHighlight && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged())) {  g2.setFont(dragFont);  Rectangle2D bounds=g2.getFontMetrics().getStringBounds(DROP_HERE,g2);  int x=(int)(width / 2 - bounds.getWidth() / 2);  int y=(int)(height / 2 + bounds.getHeight() / 2);  g2.setColor(DRAG_BG_COLOR);  int rX=x - padding;  int rY=(int)(y - bounds.getHeight() / 2 - padding);  g2.fillRoundRect(rX,rY,(int)(bounds.getWidth() + padding * 2),(int)bounds.getHeight(),RapidLookAndFeel.CORNER_DEFAULT_RADIUS,RapidLookAndFeel.CORNER_DEFAULT_RADIUS);  drawCenteredText(process,g2,dragFont,DROP_HERE,DRAG_FG_COLOR,0);} else if (model.isOperatorSourceHovered()) {  g2.setFont(dragFont);  Rectangle2D bounds=g2.getFontMetrics().getStringBounds(DRAG_HERE,g2);  int x=(int)(width / 2 - bounds.getWidth() / 2);  int y=(int)(height / 2 + bounds.getHeight() / 2);  g2.setColor(DRAG_BG_COLOR);  int rX=x - padding;  int rY=(int)(y - bounds.getHeight() / 2 - padding);  g2.fillRoundRect(rX,rY,(int)(bounds.getWidth() + padding * 2),(int)bounds.getHeight(),RapidLookAndFeel.CORNER_DEFAULT_RADIUS,RapidLookAndFeel.CORNER_DEFAULT_RADIUS);  drawCenteredText(process,g2,dragFont,DRAG_HERE,DRAG_FG_COLOR,0);}}} else if (process.getEnclosingOperator() instanceof ProcessRootOperator && process.getAllInnerOperators().isEmpty() && ((ProcessRootOperator)process.getEnclosingOperator()).getUserData(Tutorial.KEY_USER_DATA_FLAG) == null) {g2.setColor(HINT_COLOR);Font hintFont;if (width >= 700) {hintFont=HINT_FONT_LARGE;} else if (width >= 500) {hintFont=HINT_FONT_MEDIUM;} else {hintFont=HINT_FONT_SMALL;}double offset=hintFont.getSize() * 1.5;drawCenteredText(process,g2,hintFont,HINT_EMPTY_PROCESS_1,HINT_COLOR,-offset);drawCenteredText(process,g2,hintFont,HINT_EMPTY_PROCESS_2,HINT_COLOR,0);drawCenteredText(process,g2,hintFont,HINT_EMPTY_PROCESS_3,HINT_COLOR,offset);}}  }
class C{  public boolean visit(RangeMarker edit){  return visitNode(edit);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @LargeTest public void testStressInsertMovieItems() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final String VideoItemFileName2=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_1_17.mp4";  final String VideoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";  final String[] loggingInfo=new String[1];  int i=0;  writeTestCaseHeader("testStressInsertMovieItems");  final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1",VideoItemFileName1,renderingMode);  mVideoEditor.addMediaItem(mediaItem1);  mediaItem1.setExtractBoundaries(0,10000);  final MediaVideoItem mediaItem2=new MediaVideoItem(mVideoEditor,"m2",VideoItemFileName2,renderingMode);  mVideoEditor.addMediaItem(mediaItem2);  mediaItem2.setExtractBoundaries(0,15000);  getBeginMemory();  for (i=0; i < 50; i++) {    final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3" + i,VideoItemFileName3,renderingMode);    mediaItem3.setExtractBoundaries(0,15000);    mVideoEditor.insertMediaItem(mediaItem3,"m1");    mVideoEditor.moveMediaItem("m2","m3" + i);    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);  for (i=0; i < 50; i++) {    mVideoEditor.removeMediaItem("m3" + i);    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,true,i);    }  }  mVideoEditor.removeMediaItem("m2");  mVideoEditor.removeMediaItem("m1");  getAfterMemory_updateLog(loggingInfo,true,i);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.OBJECT_LITERAL__PROPERTY_ASSIGNMENTS:    return ((InternalEList<?>)getPropertyAssignments()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Object remove(Object oldInstance){  Expression exp=bindings.remove(oldInstance);  return getValue(exp);}  }
class C{  public Object fetchRef(){  try {    return refField.get(this);  } catch (  Exception t) {    throw new HGException(t);  }}  }
class C{  private static <T>FibNode<T> merge(FibNode<T> a,FibNode<T> b){  if (a == b)   return a;  if (a == null)   return b;  if (b == null)   return a;  if (a.key > b.key) {    FibNode<T> tmp=a;    a=b;    b=tmp;  }  FibNode<T> a_right_orig=a.right;  a.right=b.right;  a.right.left=a;  b.right=a_right_orig;  b.right.left=b;  return a;}  }
class C{  public E remove(){  if (list.size() == 0)   return null;  E removedObject=list.get(0);  list.set(0,list.get(list.size() - 1));  list.remove(list.size() - 1);  int currentIndex=0;  while (currentIndex < list.size()) {    int leftChildIndex=2 * currentIndex + 1;    int rightChildIndex=2 * currentIndex + 2;    if (leftChildIndex >= list.size())     break;    int maxIndex=leftChildIndex;    if (rightChildIndex < list.size()) {      if (list.get(maxIndex).compareTo(list.get(rightChildIndex)) < 0) {        maxIndex=rightChildIndex;      }    }    if (list.get(currentIndex).compareTo(list.get(maxIndex)) < 0) {      E temp=list.get(maxIndex);      list.set(maxIndex,list.get(currentIndex));      list.set(currentIndex,temp);      currentIndex=maxIndex;    } else     break;  }  return removedObject;}  }
class C{  public static Message newTelemetryData(final String messageId,final String deviceId,final int temperature){  final Message message=ProtonHelper.message();  message.setMessageId(messageId);  message.setContentType("application/json");  MessageHelper.addDeviceId(message,deviceId);  message.setBody(new Data(new Binary(String.format("{\"temp\" : %d}",temperature).getBytes())));  return message;}  }
class C{  String formatMessage(String text,SaaSApplicationException e,String locale){  if (Strings.isEmpty(text)) {    text=e.getMessageKey();    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_BULK_USER_IMPORT_FAILED,payload.getInfo());  }  MessageFormat mf=new MessageFormat(text,Locale.forLanguageTag(locale));  String errorMessage=mf.format(e.getMessageParams(),new StringBuffer(),null).toString();  return errorMessage;}  }
class C{  public BlockEntropyCalculatorDiscrete(int blocksize,int base){  super(base);  this.blocksize=blocksize;  base_power_blocksize=MathsUtils.power(base,blocksize);  if (blocksize <= 1) {    throw new RuntimeException("Blocksize " + blocksize + " is not > 1 for Block Entropy Calculator");  }  if (blocksize > Math.log(Integer.MAX_VALUE) / log_base) {    throw new RuntimeException("Base and blocksize combination too large");  }  stateCount=new int[MathsUtils.power(base,blocksize)];  maxShiftedValue=new int[base];  for (int v=0; v < base; v++) {    maxShiftedValue[v]=v * MathsUtils.power(base,blocksize - 1);  }}  }
class C{  public GenericProxyFactory addProviderAddress(UnresolvedAddress... addresses){  Collections.addAll(this.addresses,addresses);  return this;}  }
class C{  public synchronized void progressStop(){  if (this.progressDialog != null) {    this.progressDialog.dismiss();    this.progressDialog=null;  }}  }
class C{  public void pauseProgram(){  if (runningThread != null) {    if (runningThread.getState().equals(State.TIMED_WAITING)) {      runningThread.interrupt();    }  }  running=false;  scrollToExecutionMark();}  }
class C{  public boolean deleteBookmark(Bookmark bookmark){  int row=mBookmarkManager.deleteById(bookmark);  if (row != -1) {    return true;  }  return false;}  }
class C{  public void debugPrint(OutputStream out,String prefix,boolean verbose){  Writer w=new OutputStreamWriter(out);  debugPrint(w,prefix,verbose);  try {    w.flush();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  private void connect() throws IOException {  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(FMTURL,host,host,port));  Map<String,Object> env=new HashMap<String,Object>();  if (username != null) {    String[] creds={username,password};    env.put(JMXConnector.CREDENTIALS,creds);  }  jmxc=JMXConnectorFactory.connect(jmxUrl,env);  mbeanServerConn=jmxc.getMBeanServerConnection();  try {    ObjectName name=new ObjectName(SSOBJNAME);    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);    snitchProxy=JMX.newMBeanProxy(mbeanServerConn,new ObjectName("org.apache.cassandra.db:type=EndpointSnitchInfo"),EndpointSnitchInfoMBean.class);    internodeAuthProxy=JMX.newMBeanProxy(mbeanServerConn,new ObjectName(GeoInternodeAuthenticatorMBean.MBEAN_NAME),GeoInternodeAuthenticatorMBean.class);    dbMgrOps=new DbManagerOps(mbeanServerConn);  } catch (  MalformedObjectNameException e) {    throw new RuntimeException("Invalid ObjectName? Please report this as a bug.",e);  }}  }
class C{  private void scheduleCommercial(int length){  Long delay=commercialDelay.getSettingValue();  if (delay == null) {    setCommercialResult("Invalid delay specified.");    clearCommercialButtonsSelection();  } else {    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;    scheduledCommercialLength=length;    update();  }}  }
class C{  public TIntIntHash(int initialCapacity,float loadFactor,int no_entry_key,int no_entry_value){  super(initialCapacity,loadFactor);  this.no_entry_key=no_entry_key;  this.no_entry_value=no_entry_value;}  }
class C{  @Override public void updateState(X509Certificate cert) throws CertificateException, IOException, CertPathValidatorException {  if (cert == null)   return;  X509CertImpl icert=X509CertImpl.toImpl(cert);  if (PKIX.isDSAPublicKeyWithoutParams(icert.getPublicKey())) {    keyParamsNeededFlag=true;  }  this.cert=icert;  issuerDN=cert.getIssuerX500Principal();  if (!X509CertImpl.isSelfIssued(cert)) {    if (!init && cert.getBasicConstraints() != -1) {      traversedCACerts++;    }  }  if (init || !X509CertImpl.isSelfIssued(cert)) {    X500Principal subjName=cert.getSubjectX500Principal();    subjectNamesTraversed.add(X500Name.asX500Name(subjName));    try {      SubjectAlternativeNameExtension subjAltNameExt=icert.getSubjectAlternativeNameExtension();      if (subjAltNameExt != null) {        GeneralNames gNames=subjAltNameExt.get(SubjectAlternativeNameExtension.SUBJECT_NAME);        for (        GeneralName gName : gNames.names()) {          subjectNamesTraversed.add(gName.getName());        }      }    } catch (    IOException e) {      if (debug != null) {        debug.println("ForwardState.updateState() unexpected " + "exception");        e.printStackTrace();      }      throw new CertPathValidatorException(e);    }  }  init=false;}  }
class C{  private boolean isVisible(JsonElement jsonElement){  Map<String,Boolean> visibilityMap=viewPart.getVisibilityMap();  String type=Utils.getObjectType(jsonElement);  if (type != null && visibilityMap.containsKey(type)) {    return visibilityMap.get(type).booleanValue();  }  return true;}  }
class C{  private static int blend_dodge(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=(br == 255) ? 255 : peg((ar << 8) / (255 - br));  int cg=(bg == 255) ? 255 : peg((ag << 8) / (255 - bg));  int cb=(bb == 255) ? 255 : peg((ab << 8) / (255 - bb));  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public void print(){  out.flush();}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  reset();  cipher.init(forEncryption,params);  buf=new byte[cipher.getInputBlockSize() + (forEncryption ? 1 : 0)];  bufOff=0;}  }
class C{  public String toString(){  return "" + m_numericConst;}  }
class C{  private void writeImportsField(SymbolTable symTab){  SymbolTable[] sharedSymTabs=symTab.getImportedTables();  if (sharedSymTabs.length == 0) {    return;  }  final int importsOffset=myBuffer.length - myOffset;  for (int i=sharedSymTabs.length; --i >= 0; ) {    writeImport(sharedSymTabs[i]);  }  writePrefix(TYPE_LIST,myBuffer.length - myOffset - importsOffset);  writeByte((byte)(0x80 | IMPORTS_SID));}  }
class C{  public static Sector parseDegrees(AVList values,int imageWidth,int imageHeight){  if (values == null) {    String message=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (imageWidth <= 0 || imageHeight <= 0) {    String message=Logging.getMessage("generic.InvalidImageSize");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Angle latOrigin=Angle.fromDegrees((Double)values.getValue(WORLD_FILE_Y_LOCATION));  double s=(Double)values.getValue(WORLD_FILE_Y_PIXEL_SIZE);  Angle latOffset=latOrigin.addDegrees((s <= 0 ? s : -s) * imageHeight);  Angle lonOrigin=Angle.fromDegrees((Double)values.getValue(WORLD_FILE_X_LOCATION));  Angle lonOffset=lonOrigin.addDegrees((Double)values.getValue(WORLD_FILE_X_PIXEL_SIZE) * imageWidth);  Angle minLon, maxLon;  if (lonOrigin.degrees < lonOffset.degrees) {    minLon=lonOrigin;    maxLon=lonOffset;  } else {    minLon=lonOffset;    maxLon=lonOrigin;  }  Angle minLat, maxLat;  if (latOrigin.degrees < latOffset.degrees) {    minLat=latOrigin;    maxLat=latOffset;  } else {    minLat=latOffset;    maxLat=latOrigin;  }  Sector sector=new Sector(minLat,maxLat,minLon,maxLon);  if (!sector.isWithinLatLonLimits()) {    String message=Logging.getMessage("generic.SectorNotGeographic");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  return sector;}  }
class C{  @Override public void close() throws IOException {  try {    super.close();  }  finally {    this.outputLogger.flush();  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private static boolean hasLength(final String str){  return hasLength((CharSequence)str);}  }
class C{  public div(String value){  addElement(value);}  }
class C{  public FileLock(File clientDir,String lockFilename) throws Exception {  lockFile=new File(clientDir,lockFilename);  if (ExceptionHelper.isClassAvailable("java.nio.channels.FileLock")) {    try {      this.file=new RandomAccessFile(lockFile,"rw");      Method m=file.getClass().getMethod("getChannel",new Class[]{});      Object channel=m.invoke(file,new Object[]{});      m=channel.getClass().getMethod("tryLock",new Class[]{});      this.fileLock=m.invoke(channel,new Object[]{});    } catch (    NoSuchMethodException nsme) {      this.fileLock=null;    }catch (    IllegalArgumentException iae) {      this.fileLock=null;    }catch (    IllegalAccessException iae) {      this.fileLock=null;    }    if (fileLock == null) {      release();      throw new Exception("Problem obtaining file lock");    }  }}  }
class C{  protected IdentifierRef_IMImpl(){  super();}  }
class C{  @GET @Path("language1") @Produces("text/html") public Response language1(){  return Response.ok(new Viewable("hello.jsp"),"application/xhtml+xml").language("es").build();}  }
class C{  public String createThinVolumes(String systemObjectId,String arrayGroupId,Long luCapacity,int noOfLus,String label,String formatType,String model) throws Exception {  return hdsApiVolumeManager.createThinVolumes(systemObjectId,arrayGroupId,luCapacity,noOfLus,label,formatType,model);}  }
class C{  public static void closeAllSilently(Iterable<Closeable> closeMe){  for (  Closeable c : closeMe) {    try {      c.close();    } catch (    IOException e) {      assert true;    }  }}  }
class C{  private static void putLong(byte[] array,long l,int pos,int numberOfLongBytes){  for (int i=0; i < numberOfLongBytes; ++i) {    array[pos + numberOfLongBytes - i - 1]=(byte)(l >>> (i * 8));  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public String globalInfo(){  return "Generates a single train/test split and calls the appropriate " + "SplitEvaluator to generate some results.";}  }
class C{  public static JFreeChart createXYStepChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset){  return createXYStepChart(title,xAxisLabel,yAxisLabel,dataset,PlotOrientation.VERTICAL,true,true,false);}  }
class C{  public void includeAll(){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=true;  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,long delay,long period){  if (delay < 0)   throw new IllegalArgumentException("Negative delay.");  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,System.currentTimeMillis() + delay,period);}  }
class C{  private void testDoubleProperty(String name,String value,String name2,String value2){  String property=name + NAME_VALUE_DELIM + value+ PIPE_DELIM+ name2+ NAME_VALUE_DELIM+ value2;  final Properties map=PropertyUtils.splitPropertiesOnPipe(property);  assertEquals(2,map.size());  assertEquals(value,map.get(name));  assertEquals(value2,map.get(name2));}  }
class C{  public void update(long value,long timestamp){  rescaleIfNeeded();  lockForRegularUsage();  try {    final double priority=weight(timestamp - startTime) / ThreadLocalRandom.current().nextDouble();    final long newCount=count.incrementAndGet();    if (newCount <= reservoirSize) {      values.put(priority,value);    } else {      Double first=values.firstKey();      if (first < priority) {        if (values.putIfAbsent(priority,value) == null) {          while (values.remove(first) == null) {            first=values.firstKey();          }        }      }    }  }  finally {    unlockForRegularUsage();  }}  }
class C{  public OAuth2SaslClient(String oauthToken,CallbackHandler callbackHandler){  this.oauthToken=oauthToken;  this.callbackHandler=callbackHandler;}  }
class C{  protected boolean edgesAreFiltered(){  Predicate<Context<Graph<V,E>,E>> edgeIncludePredicate=vv.getRenderContext().getEdgeIncludePredicate();  return edgeIncludePredicate != null && edgeIncludePredicate.equals(Predicates.alwaysTrue()) == false;}  }
class C{  public IndexedLagGraph(LagGraph lagGraph){  this(lagGraph,false);}  }
class C{  @Override public DriverTask createVolumes(List<StorageVolume> volumes,StorageCapabilities capabilities){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_CREATE_STORAGE_VOLUMES);  return provHelper.createVolumes(volumes,capabilities,task,this.driverRegistry);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:40.435 -0500",hash_original_method="2F56B6A3D34BA40F73B5A3D4B3835F99",hash_generated_method="14673EDACAD8BEB8AEFAA19627559880") public void clearPath(){  if (mCachedPath != null)   mCachedPath.rewind();}  }
class C{  private void rememberCloneContext(Map<SootMethod,SootMethod> cloneToOrg){  for (  SootMethod clone : cloneToOrg.keySet()) {    SootMethod org=cloneToOrg.get(clone);    clonedMethodsAdded.add(clone);    if (!methodToClonesMap.containsKey(org))     methodToClonesMap.put(org,new LinkedHashSet<SootMethod>());    methodToClonesMap.get(org).add(clone);  }}  }
class C{  @Override public String toString(){  return "GetPostmanMessagesCommand [player=" + player + ", messages="+ messages+ "]";}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof NoProxySelector)) {    return false;  }  return true;}  }
class C{  private void handleError(@NotNull Throwable e,GitOutputConsole console){  String errorMessage=(e.getMessage() != null && !e.getMessage().isEmpty()) ? e.getMessage() : constant.removeFilesFailed();  console.printError(errorMessage);  consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(),console);  notificationManager.notify(constant.removeFilesFailed(),FAIL,FLOAT_MODE);}  }
class C{  public void toEPL(StringWriter writer){  String delimiter="";  for (  OrderByElement element : orderByExpressions) {    writer.write(delimiter);    element.toEPL(writer);    delimiter=", ";  }}  }
class C{  private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  cancelSuperTouch(ev);  if (commitChange) {    boolean newState;    mVelocityTracker.computeCurrentVelocity(1000);    float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=xvel > 0;    } else {      newState=getTargetCheckedState();    }    animateThumbToCheckedState(newState);  } else {    animateThumbToCheckedState(isChecked());  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();  for (int i=0; i < timeEvents.length; i++) {    timeEvents[i]=false;  }}  }
class C{  public byte[] toBinary(){  int maxIndex=1 << BITS_PER_INDEX;  byte[] bin1=ArrayEncoder.encodeModQ(ones,maxIndex);  byte[] bin2=ArrayEncoder.encodeModQ(negOnes,maxIndex);  byte[] bin=Arrays.copyOf(bin1,bin1.length + bin2.length);  System.arraycopy(bin2,0,bin,bin1.length,bin2.length);  return bin;}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  private void beforeValue() throws JSONException {  if (stack.isEmpty()) {    return;  }  Scope context=peek();  if (context == Scope.EMPTY_ARRAY) {    replaceTop(Scope.NONEMPTY_ARRAY);    newline();  } else   if (context == Scope.NONEMPTY_ARRAY) {    out.append(',');    newline();  } else   if (context == Scope.DANGLING_KEY) {    out.append(indent == null ? ":" : ": ");    replaceTop(Scope.NONEMPTY_OBJECT);  } else   if (context != Scope.NULL) {    throw new JSONException("Nesting problem");  }}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public Map<InternalDistributedMember,PersistentMemberID> advisePersistentMembers(){  initializationGate();  Map<InternalDistributedMember,PersistentMemberID> result=new HashMap<InternalDistributedMember,PersistentMemberID>();  Profile[] snapshot=this.profiles;  for (  Profile profile : snapshot) {    CacheProfile cp=(CacheProfile)profile;    if (cp.persistentID != null) {      result.put(cp.getDistributedMember(),cp.persistentID);    }  }  return result;}  }
class C{  protected void fireObjectRemoved(DBIDRef deletion){  fireObjectChanged(deletion,Type.REMOVE);}  }
class C{  private void deleteFamilySet(){  ItemPalette.removeLevel4IconMap(_type,_parent._family,_key);  _family=null;  _parent.updateFamiliesPanel();}  }
class C{  public ActiveState(DownloadInfoRunnable downloadInfoRunnable){  super(downloadInfoRunnable);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Image scaledHeight(int height){  float ratio=((float)height) / ((float)getHeight());  return scaled(Math.max(1,(int)(getWidth() * ratio)),height);}  }
class C{  public static double vectorCoefOfPerpendicularProjection(double x,double y,double v0x,double v0y,double v1x,double v1y){  double vdx=v1x - v0x;  double vdy=v1y - v0y;  double numerator=(x - v0x) * vdx + (y - v0y) * vdy;  double denomenator=vdx * vdx + vdy * vdy;  double r=numerator / denomenator;  return r;}  }
class C{  public bdo addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void close(){  sess.close();}  }
class C{  public SAMLEditor(IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  this.helpers=callbacks.getHelpers();}  }
class C{  default B removeEffects(){  this.meta().removeEffects();  return this.getBuilder();}  }
class C{  public void inserir(Estratigrafia estratigrafia){  try {    String sql="INSERT INTO tb_estratigrafia (formacao, grupo, descricao) VALUES (?, ?, ?) ";    stm=conector.prepareStatement(sql);    stm.setString(1,estratigrafia.getFormacao());    stm.setString(2,estratigrafia.getGrupo());    stm.setString(3,estratigrafia.getDescricao());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao inserir na base de dados estratigrafias! \n" + ex);  }}  }
class C{  public Spider startUrls(List<String> startUrls){  checkIfRunning();  this.startRequests=UrlUtils.convertToRequests(startUrls);  return this;}  }
class C{  public static SamBamSequenceDataSource fromInputFiles(List<File> files,boolean paired,boolean flattenPaired,SamFilter filter){  return new SamBamSequenceDataSource(new FileStreamIterator(files,null),paired,flattenPaired,filter);}  }
class C{  public String addStepsForDetachAndDeleteMirror(Workflow workflow,String waitFor,URI vplexURI,URI mirrorURI,String taskId) throws ControllerException {  try {    String detachStep=workflow.createStepId();    waitFor=workflow.createStep(VPLEX_STEP,String.format("VPlex %s detaching mirror:%n%s",vplexURI,mirrorURI),waitFor,vplexURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),detachMirrorDeviceMethod(vplexURI,mirrorURI,null,true),rollbackMethodNullMethod(),detachStep);    String deleteMirrorStep=workflow.createStepId();    waitFor=workflow.createStep(VPLEX_STEP,String.format("VPlex %s deleting mirror:%n%s",vplexURI,mirrorURI),waitFor,vplexURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),deleteMirrorDeviceMethod(vplexURI,mirrorURI),rollbackDeleteMirrorDeviceMethod(vplexURI,mirrorURI),deleteMirrorStep);    List<URI> exportGroupList=new ArrayList<URI>();    List<URI> backendVolURIs=new ArrayList<URI>();    boolean unexportStepsAdded=false;    VplexMirror mirror=_dbClient.queryObject(VplexMirror.class,mirrorURI);    if (mirror.getAssociatedVolumes() != null) {      for (      String volumeId : mirror.getAssociatedVolumes()) {        URI volumeURI=new URI(volumeId);        Volume volume=_dbClient.queryObject(Volume.class,volumeURI);        if (volume == null || volume.getInactive() == true || volume.getNativeId() == null) {          continue;        }        backendVolURIs.add(volume.getId());      }      if (!backendVolURIs.isEmpty()) {        unexportStepsAdded=vplexAddUnexportVolumeWfSteps(workflow,VPLEX_STEP,backendVolURIs,exportGroupList);      }    }    if (unexportStepsAdded) {      waitFor=UNEXPORT_STEP;      addStepToForgetVolumes(workflow,vplexURI,backendVolURIs,waitFor);    } else {      waitFor=VPLEX_STEP;    }    return waitFor;  } catch (  Exception ex) {    throw VPlexApiException.exceptions.addStepsForDetachAndDeleteMirror(ex);  }}  }
class C{  public boolean isLandingPage(URL url){  if (url.getQuery() != null) {    return false;  } else {    return landingPageSuffix(url) != "";  }}  }
class C{  public final synchronized void replace(SignalProcessor processor){  if (processor == this)   return;  if (processor != null) {    processor.disconnect();    if (mNext != null) {      mNext.mPrev=processor;    }    if (mPrev != null) {      mPrev.mNext=processor;    }    processor.mNext=mNext;    processor.mPrev=mPrev;  } else {    disconnect();  }}  }
class C{  public static boolean isAbsoluteUnit(CSSPrimitiveValue primitive){  short type=0;  type=((CSSPrimitiveValue)primitive).getPrimitiveType();  return isAbsoluteUnit(type);}  }
class C{  public static LocalizedText english(String text){  return new LocalizedText(text,"en");}  }
class C{  JCCompilationUnit read(File file) throws IOException, ParseException {  JavacTool tool=JavacTool.create();  r.errors=0;  Iterable<? extends JavaFileObject> files=fm.getJavaFileObjects(file);  JavacTask task=tool.getTask(pw,fm,r,Collections.<String>emptyList(),null,files);  Iterable<? extends CompilationUnitTree> trees=task.parse();  pw.flush();  if (r.errors > 0)   throw new ParseException(sw.toString());  Iterator<? extends CompilationUnitTree> iter=trees.iterator();  if (!iter.hasNext())   throw new Error("no trees found");  JCCompilationUnit t=(JCCompilationUnit)iter.next();  if (iter.hasNext())   throw new Error("too many trees found");  return t;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  out.writeDouble(m);  out.writeDouble(t);}  }
class C{  public void testIsRelCanonicalPageWithBaseElement1(){  System.out.println("isRelCanonicalPageWithBaseElement");  SSP ssp=new MockSSP();  ssp.setURI(URL + "lol.html");  StringBuilder strb=new StringBuilder();  strb.append("<html>");  strb.append("<head>");  strb.append("<base href=\"http://test.asqatasun.org/\" />");  strb.append("<link rel=\"canonical\" href=\"/lol.html\" />");  strb.append("</head>");  strb.append("</html>");  ssp.setSource(strb.toString());  CrawlerImpl instance=new CrawlerImpl();  assertFalse(instance.isRelCanonicalPage(ssp));}  }
class C{  public void addProvider(String name,ContentProvider provider){  mProviders.put(name,provider);}  }
class C{  public SamlTokenImpl(String xml,JAXBContext jaxbContext,Boolean allowDelegateInNonUpnFormat) throws InvalidTokenException {  this("XML",parseTokenXmlToDom(xml),jaxbContext,allowDelegateInNonUpnFormat);}  }
class C{  public void testIndividualRemoval(){  int numItems=1000;  BasicQuadTree<Integer> tree=new BasicQuadTree<Integer>(5,Sector.FULL_SPHERE,null);  for (int i=1; i <= numItems; i++) {    tree.add(i,new double[]{i % 90,i % 180},Integer.toString(i));  }  for (int i=numItems; i > 0; i--) {    tree.removeByName(Integer.toString(i));    Integer item=tree.getByName(Integer.toString(i));    assertNull("Item not fully removed from tree ",item);  }}  }
class C{  public DeleteMessageBatchResult deleteMessageBatch(String queueUrl,List<DeleteMessageBatchRequestEntry> entries){  DeleteMessageBatchRequest deleteMessageBatchRequest=new DeleteMessageBatchRequest(queueUrl,entries);  return deleteMessageBatch(deleteMessageBatchRequest);}  }
class C{  public static int schemaVersion(final byte versionByte){  return NIBBLE_MASK & (versionByte >>> NIBBLE_BITS);}  }
class C{  public static void installKeybindings(UIDefaults table){  Object fieldInputMap=new UIDefaults.LazyInputMap(new Object[]{"ctrl C",DefaultEditorKit.copyAction,"ctrl V",DefaultEditorKit.pasteAction,"ctrl X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"ctrl LEFT",DefaultEditorKit.previousWordAction,"ctrl KP_LEFT",DefaultEditorKit.previousWordAction,"ctrl RIGHT",DefaultEditorKit.nextWordAction,"ctrl KP_RIGHT",DefaultEditorKit.nextWordAction,"ctrl shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl A",DefaultEditorKit.selectAllAction,"HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"ctrl DELETE",DefaultEditorKit.deleteNextWordAction,"ctrl BACK_SPACE",DefaultEditorKit.deletePrevWordAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"ENTER",JTextField.notifyAction,"ctrl BACK_SLASH","unselect","control shift O","toggle-componentOrientation"});  Object passwordInputMap=new UIDefaults.LazyInputMap(new Object[]{"ctrl C",DefaultEditorKit.copyAction,"ctrl V",DefaultEditorKit.pasteAction,"ctrl X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"ctrl LEFT",DefaultEditorKit.beginLineAction,"ctrl KP_LEFT",DefaultEditorKit.beginLineAction,"ctrl RIGHT",DefaultEditorKit.endLineAction,"ctrl KP_RIGHT",DefaultEditorKit.endLineAction,"ctrl shift LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift RIGHT",DefaultEditorKit.selectionEndLineAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"ctrl A",DefaultEditorKit.selectAllAction,"HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"ENTER",JTextField.notifyAction,"ctrl BACK_SLASH","unselect","control shift O","toggle-componentOrientation"});  Object multilineInputMap=new UIDefaults.LazyInputMap(new Object[]{"ctrl C",DefaultEditorKit.copyAction,"ctrl V",DefaultEditorKit.pasteAction,"ctrl X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"ctrl LEFT",DefaultEditorKit.previousWordAction,"ctrl KP_LEFT",DefaultEditorKit.previousWordAction,"ctrl RIGHT",DefaultEditorKit.nextWordAction,"ctrl KP_RIGHT",DefaultEditorKit.nextWordAction,"ctrl shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl A",DefaultEditorKit.selectAllAction,"HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"UP",DefaultEditorKit.upAction,"KP_UP",DefaultEditorKit.upAction,"DOWN",DefaultEditorKit.downAction,"KP_DOWN",DefaultEditorKit.downAction,"PAGE_UP",DefaultEditorKit.pageUpAction,"PAGE_DOWN",DefaultEditorKit.pageDownAction,"shift PAGE_UP","selection-page-up","shift PAGE_DOWN","selection-page-down","ctrl shift PAGE_UP","selection-page-left","ctrl shift PAGE_DOWN","selection-page-right","shift UP",DefaultEditorKit.selectionUpAction,"shift KP_UP",DefaultEditorKit.selectionUpAction,"shift DOWN",DefaultEditorKit.selectionDownAction,"shift KP_DOWN",DefaultEditorKit.selectionDownAction,"ENTER",DefaultEditorKit.insertBreakAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"ctrl DELETE",DefaultEditorKit.deleteNextWordAction,"ctrl BACK_SPACE",DefaultEditorKit.deletePrevWordAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"TAB",DefaultEditorKit.insertTabAction,"ctrl BACK_SLASH","unselect","ctrl HOME",DefaultEditorKit.beginAction,"ctrl END",DefaultEditorKit.endAction,"ctrl shift HOME",DefaultEditorKit.selectionBeginAction,"ctrl shift END",DefaultEditorKit.selectionEndAction,"ctrl T","next-link-action","ctrl shift T","previous-link-action","ctrl SPACE","activate-link-action","control shift O","toggle-componentOrientation"});  Object[] defaults=new Object[]{"Button.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released","ENTER","pressed","released ENTER","released"}),"CheckBox.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released"}),"ComboBox.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ESCAPE","hidePopup","PAGE_UP","pageUpPassThrough","PAGE_DOWN","pageDownPassThrough","HOME","homePassThrough","END","endPassThrough","DOWN","selectNext","KP_DOWN","selectNext","alt DOWN","togglePopup","alt KP_DOWN","togglePopup","alt UP","togglePopup","alt KP_UP","togglePopup","SPACE","spacePopup","ENTER","enterPressed","UP","selectPrevious","KP_UP","selectPrevious"}),"EditorPane.focusInputMap",multilineInputMap,"FileChooser.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ESCAPE","cancelSelection","F2","editFileName","F5","refresh","BACK_SPACE","Go Up","ENTER","approveSelection","ctrl ENTER","approveSelection"}),"FormattedTextField.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl C",DefaultEditorKit.copyAction,"ctrl V",DefaultEditorKit.pasteAction,"ctrl X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"ctrl LEFT",DefaultEditorKit.previousWordAction,"ctrl KP_LEFT",DefaultEditorKit.previousWordAction,"ctrl RIGHT",DefaultEditorKit.nextWordAction,"ctrl KP_RIGHT",DefaultEditorKit.nextWordAction,"ctrl shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl A",DefaultEditorKit.selectAllAction,"HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"ctrl DELETE",DefaultEditorKit.deleteNextWordAction,"ctrl BACK_SPACE",DefaultEditorKit.deletePrevWordAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"ENTER",JTextField.notifyAction,"ctrl BACK_SLASH","unselect","control shift O","toggle-componentOrientation","ESCAPE","reset-field-edit","UP","increment","KP_UP","increment","DOWN","decrement","KP_DOWN","decrement"}),"InternalFrame.windowBindings",new Object[]{"shift ESCAPE","showSystemMenu","ctrl SPACE","showSystemMenu","ESCAPE","hideSystemMenu"},"List.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl C","copy","ctrl V","paste","ctrl X","cut","COPY","copy","PASTE","paste","CUT","cut","control INSERT","copy","shift INSERT","paste","shift DELETE","cut","UP","selectPreviousRow","KP_UP","selectPreviousRow","shift UP","selectPreviousRowExtendSelection","shift KP_UP","selectPreviousRowExtendSelection","ctrl shift UP","selectPreviousRowExtendSelection","ctrl shift KP_UP","selectPreviousRowExtendSelection","ctrl UP","selectPreviousRowChangeLead","ctrl KP_UP","selectPreviousRowChangeLead","DOWN","selectNextRow","KP_DOWN","selectNextRow","shift DOWN","selectNextRowExtendSelection","shift KP_DOWN","selectNextRowExtendSelection","ctrl shift DOWN","selectNextRowExtendSelection","ctrl shift KP_DOWN","selectNextRowExtendSelection","ctrl DOWN","selectNextRowChangeLead","ctrl KP_DOWN","selectNextRowChangeLead","LEFT","selectPreviousColumn","KP_LEFT","selectPreviousColumn","shift LEFT","selectPreviousColumnExtendSelection","shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl shift LEFT","selectPreviousColumnExtendSelection","ctrl shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl LEFT","selectPreviousColumnChangeLead","ctrl KP_LEFT","selectPreviousColumnChangeLead","RIGHT","selectNextColumn","KP_RIGHT","selectNextColumn","shift RIGHT","selectNextColumnExtendSelection","shift KP_RIGHT","selectNextColumnExtendSelection","ctrl shift RIGHT","selectNextColumnExtendSelection","ctrl shift KP_RIGHT","selectNextColumnExtendSelection","ctrl RIGHT","selectNextColumnChangeLead","ctrl KP_RIGHT","selectNextColumnChangeLead","HOME","selectFirstRow","shift HOME","selectFirstRowExtendSelection","ctrl shift HOME","selectFirstRowExtendSelection","ctrl HOME","selectFirstRowChangeLead","END","selectLastRow","shift END","selectLastRowExtendSelection","ctrl shift END","selectLastRowExtendSelection","ctrl END","selectLastRowChangeLead","PAGE_UP","scrollUp","shift PAGE_UP","scrollUpExtendSelection","ctrl shift PAGE_UP","scrollUpExtendSelection","ctrl PAGE_UP","scrollUpChangeLead","PAGE_DOWN","scrollDown","shift PAGE_DOWN","scrollDownExtendSelection","ctrl shift PAGE_DOWN","scrollDownExtendSelection","ctrl PAGE_DOWN","scrollDownChangeLead","ctrl A","selectAll","ctrl SLASH","selectAll","ctrl BACK_SLASH","clearSelection","SPACE","addToSelection","ctrl SPACE","toggleAndAnchor","shift SPACE","extendTo","ctrl shift SPACE","moveSelectionTo"}),"List.focusInputMap.RightToLeft",new UIDefaults.LazyInputMap(new Object[]{"LEFT","selectNextColumn","KP_LEFT","selectNextColumn","shift LEFT","selectNextColumnExtendSelection","shift KP_LEFT","selectNextColumnExtendSelection","ctrl shift LEFT","selectNextColumnExtendSelection","ctrl shift KP_LEFT","selectNextColumnExtendSelection","ctrl LEFT","selectNextColumnChangeLead","ctrl KP_LEFT","selectNextColumnChangeLead","RIGHT","selectPreviousColumn","KP_RIGHT","selectPreviousColumn","shift RIGHT","selectPreviousColumnExtendSelection","shift KP_RIGHT","selectPreviousColumnExtendSelection","ctrl shift RIGHT","selectPreviousColumnExtendSelection","ctrl shift KP_RIGHT","selectPreviousColumnExtendSelection","ctrl RIGHT","selectPreviousColumnChangeLead","ctrl KP_RIGHT","selectPreviousColumnChangeLead"}),"MenuBar.windowBindings",new Object[]{"F10","takeFocus"},"OptionPane.windowBindings",new Object[]{"ESCAPE","close"},"PasswordField.focusInputMap",passwordInputMap,"PopupMenu.selectedWindowInputMapBindings",new Object[]{"ESCAPE","cancel","DOWN","selectNext","KP_DOWN","selectNext","UP","selectPrevious","KP_UP","selectPrevious","LEFT","selectParent","KP_LEFT","selectParent","RIGHT","selectChild","KP_RIGHT","selectChild","ENTER","return","SPACE","return"},"PopupMenu.selectedWindowInputMapBindings.RightToLeft",new Object[]{"LEFT","selectChild","KP_LEFT","selectChild","RIGHT","selectParent","KP_RIGHT","selectParent"},"RadioButton.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released","RETURN","pressed"}),"RootPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"shift F10","postPopup","CONTEXT_MENU","postPopup"}),"RootPane.defaultButtonWindowKeyBindings",new Object[]{"ENTER","press","released ENTER","release","ctrl ENTER","press","ctrl released ENTER","release"},"ScrollBar.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","positiveUnitIncrement","KP_RIGHT","positiveUnitIncrement","DOWN","positiveUnitIncrement","KP_DOWN","positiveUnitIncrement","PAGE_DOWN","positiveBlockIncrement","LEFT","negativeUnitIncrement","KP_LEFT","negativeUnitIncrement","UP","negativeUnitIncrement","KP_UP","negativeUnitIncrement","PAGE_UP","negativeBlockIncrement","HOME","minScroll","END","maxScroll"}),"ScrollBar.ancestorInputMap.RightToLeft",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","negativeUnitIncrement","KP_RIGHT","negativeUnitIncrement","LEFT","positiveUnitIncrement","KP_LEFT","positiveUnitIncrement"}),"ScrollPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","unitScrollRight","KP_RIGHT","unitScrollRight","DOWN","unitScrollDown","KP_DOWN","unitScrollDown","LEFT","unitScrollLeft","KP_LEFT","unitScrollLeft","UP","unitScrollUp","KP_UP","unitScrollUp","PAGE_UP","scrollUp","PAGE_DOWN","scrollDown","ctrl PAGE_UP","scrollLeft","ctrl PAGE_DOWN","scrollRight","ctrl HOME","scrollHome","ctrl END","scrollEnd"}),"ScrollPane.ancestorInputMap.RightToLeft",new UIDefaults.LazyInputMap(new Object[]{"ctrl PAGE_UP","scrollRight","ctrl PAGE_DOWN","scrollLeft"}),"Slider.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","positiveUnitIncrement","KP_RIGHT","positiveUnitIncrement","DOWN","negativeUnitIncrement","KP_DOWN","negativeUnitIncrement","PAGE_DOWN","negativeBlockIncrement","LEFT","negativeUnitIncrement","KP_LEFT","negativeUnitIncrement","UP","positiveUnitIncrement","KP_UP","positiveUnitIncrement","PAGE_UP","positiveBlockIncrement","HOME","minScroll","END","maxScroll"}),"Slider.focusInputMap.RightToLeft",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","negativeUnitIncrement","KP_RIGHT","negativeUnitIncrement","LEFT","positiveUnitIncrement","KP_LEFT","positiveUnitIncrement"}),"Spinner.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"UP","increment","KP_UP","increment","DOWN","decrement","KP_DOWN","decrement"}),"SplitPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"UP","negativeIncrement","DOWN","positiveIncrement","LEFT","negativeIncrement","RIGHT","positiveIncrement","KP_UP","negativeIncrement","KP_DOWN","positiveIncrement","KP_LEFT","negativeIncrement","KP_RIGHT","positiveIncrement","HOME","selectMin","END","selectMax","F8","startResize","F6","toggleFocus","ctrl TAB","focusOutForward","ctrl shift TAB","focusOutBackward"}),"TabbedPane.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","navigateRight","KP_RIGHT","navigateRight","LEFT","navigateLeft","KP_LEFT","navigateLeft","UP","navigateUp","KP_UP","navigateUp","DOWN","navigateDown","KP_DOWN","navigateDown","ctrl DOWN","requestFocusForVisibleComponent","ctrl KP_DOWN","requestFocusForVisibleComponent","SPACE","selectTabWithFocus"}),"TabbedPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl TAB","navigateNext","ctrl shift TAB","navigatePrevious","ctrl PAGE_DOWN","navigatePageDown","ctrl PAGE_UP","navigatePageUp","ctrl UP","requestFocus","ctrl KP_UP","requestFocus"}),"TableHeader.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","toggleSortOrder","LEFT","selectColumnToLeft","KP_LEFT","selectColumnToLeft","RIGHT","selectColumnToRight","KP_RIGHT","selectColumnToRight","alt LEFT","moveColumnLeft","alt KP_LEFT","moveColumnLeft","alt RIGHT","moveColumnRight","alt KP_RIGHT","moveColumnRight","alt shift LEFT","resizeLeft","alt shift KP_LEFT","resizeLeft","alt shift RIGHT","resizeRight","alt shift KP_RIGHT","resizeRight","ESCAPE","focusTable"}),"Table.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl C","copy","ctrl V","paste","ctrl X","cut","COPY","copy","PASTE","paste","CUT","cut","control INSERT","copy","shift INSERT","paste","shift DELETE","cut","RIGHT","selectNextColumn","KP_RIGHT","selectNextColumn","shift RIGHT","selectNextColumnExtendSelection","shift KP_RIGHT","selectNextColumnExtendSelection","ctrl shift RIGHT","selectNextColumnExtendSelection","ctrl shift KP_RIGHT","selectNextColumnExtendSelection","ctrl RIGHT","selectNextColumnChangeLead","ctrl KP_RIGHT","selectNextColumnChangeLead","LEFT","selectPreviousColumn","KP_LEFT","selectPreviousColumn","shift LEFT","selectPreviousColumnExtendSelection","shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl shift LEFT","selectPreviousColumnExtendSelection","ctrl shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl LEFT","selectPreviousColumnChangeLead","ctrl KP_LEFT","selectPreviousColumnChangeLead","DOWN","selectNextRow","KP_DOWN","selectNextRow","shift DOWN","selectNextRowExtendSelection","shift KP_DOWN","selectNextRowExtendSelection","ctrl shift DOWN","selectNextRowExtendSelection","ctrl shift KP_DOWN","selectNextRowExtendSelection","ctrl DOWN","selectNextRowChangeLead","ctrl KP_DOWN","selectNextRowChangeLead","UP","selectPreviousRow","KP_UP","selectPreviousRow","shift UP","selectPreviousRowExtendSelection","shift KP_UP","selectPreviousRowExtendSelection","ctrl shift UP","selectPreviousRowExtendSelection","ctrl shift KP_UP","selectPreviousRowExtendSelection","ctrl UP","selectPreviousRowChangeLead","ctrl KP_UP","selectPreviousRowChangeLead","HOME","selectFirstColumn","shift HOME","selectFirstColumnExtendSelection","ctrl shift HOME","selectFirstRowExtendSelection","ctrl HOME","selectFirstRow","END","selectLastColumn","shift END","selectLastColumnExtendSelection","ctrl shift END","selectLastRowExtendSelection","ctrl END","selectLastRow","PAGE_UP","scrollUpChangeSelection","shift PAGE_UP","scrollUpExtendSelection","ctrl shift PAGE_UP","scrollLeftExtendSelection","ctrl PAGE_UP","scrollLeftChangeSelection","PAGE_DOWN","scrollDownChangeSelection","shift PAGE_DOWN","scrollDownExtendSelection","ctrl shift PAGE_DOWN","scrollRightExtendSelection","ctrl PAGE_DOWN","scrollRightChangeSelection","TAB","selectNextColumnCell","shift TAB","selectPreviousColumnCell","ENTER","selectNextRowCell","shift ENTER","selectPreviousRowCell","ctrl A","selectAll","ctrl SLASH","selectAll","ctrl BACK_SLASH","clearSelection","ESCAPE","cancel","F2","startEditing","SPACE","addToSelection","ctrl SPACE","toggleAndAnchor","shift SPACE","extendTo","ctrl shift SPACE","moveSelectionTo","F8","focusHeader"}),"Table.ancestorInputMap.RightToLeft",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","selectPreviousColumn","KP_RIGHT","selectPreviousColumn","shift RIGHT","selectPreviousColumnExtendSelection","shift KP_RIGHT","selectPreviousColumnExtendSelection","ctrl shift RIGHT","selectPreviousColumnExtendSelection","ctrl shift KP_RIGHT","selectPreviousColumnExtendSelection","shift RIGHT","selectPreviousColumnChangeLead","shift KP_RIGHT","selectPreviousColumnChangeLead","LEFT","selectNextColumn","KP_LEFT","selectNextColumn","shift LEFT","selectNextColumnExtendSelection","shift KP_LEFT","selectNextColumnExtendSelection","ctrl shift LEFT","selectNextColumnExtendSelection","ctrl shift KP_LEFT","selectNextColumnExtendSelection","ctrl LEFT","selectNextColumnChangeLead","ctrl KP_LEFT","selectNextColumnChangeLead","ctrl PAGE_UP","scrollRightChangeSelection","ctrl PAGE_DOWN","scrollLeftChangeSelection","ctrl shift PAGE_UP","scrollRightExtendSelection","ctrl shift PAGE_DOWN","scrollLeftExtendSelection"}),"TextArea.focusInputMap",multilineInputMap,"TextField.focusInputMap",fieldInputMap,"TextPane.focusInputMap",multilineInputMap,"ToggleButton.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released"}),"ToolBar.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"UP","navigateUp","KP_UP","navigateUp","DOWN","navigateDown","KP_DOWN","navigateDown","LEFT","navigateLeft","KP_LEFT","navigateLeft","RIGHT","navigateRight","KP_RIGHT","navigateRight"}),"Tree.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl C","copy","ctrl V","paste","ctrl X","cut","COPY","copy","PASTE","paste","CUT","cut","control INSERT","copy","shift INSERT","paste","shift DELETE","cut","UP","selectPrevious","KP_UP","selectPrevious","shift UP","selectPreviousExtendSelection","shift KP_UP","selectPreviousExtendSelection","ctrl shift UP","selectPreviousExtendSelection","ctrl shift KP_UP","selectPreviousExtendSelection","ctrl UP","selectPreviousChangeLead","ctrl KP_UP","selectPreviousChangeLead","DOWN","selectNext","KP_DOWN","selectNext","shift DOWN","selectNextExtendSelection","shift KP_DOWN","selectNextExtendSelection","ctrl shift DOWN","selectNextExtendSelection","ctrl shift KP_DOWN","selectNextExtendSelection","ctrl DOWN","selectNextChangeLead","ctrl KP_DOWN","selectNextChangeLead","RIGHT","selectChild","KP_RIGHT","selectChild","LEFT","selectParent","KP_LEFT","selectParent","typed +","expand","typed -","collapse","BACK_SPACE","moveSelectionToParent","PAGE_UP","scrollUpChangeSelection","shift PAGE_UP","scrollUpExtendSelection","ctrl shift PAGE_UP","scrollUpExtendSelection","ctrl PAGE_UP","scrollUpChangeLead","PAGE_DOWN","scrollDownChangeSelection","shift PAGE_DOWN","scrollDownExtendSelection","ctrl shift PAGE_DOWN","scrollDownExtendSelection","ctrl PAGE_DOWN","scrollDownChangeLead","HOME","selectFirst","shift HOME","selectFirstExtendSelection","ctrl shift HOME","selectFirstExtendSelection","ctrl HOME","selectFirstChangeLead","END","selectLast","shift END","selectLastExtendSelection","ctrl shift END","selectLastExtendSelection","ctrl END","selectLastChangeLead","F2","startEditing","ctrl A","selectAll","ctrl SLASH","selectAll","ctrl BACK_SLASH","clearSelection","ctrl LEFT","scrollLeft","ctrl KP_LEFT","scrollLeft","ctrl RIGHT","scrollRight","ctrl KP_RIGHT","scrollRight","SPACE","addToSelection","ctrl SPACE","toggleAndAnchor","shift SPACE","extendTo","ctrl shift SPACE","moveSelectionTo"}),"Tree.focusInputMap.RightToLeft",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","selectParent","KP_RIGHT","selectParent","LEFT","selectChild","KP_LEFT","selectChild"}),"Tree.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ESCAPE","cancel"})};  table.putDefaults(defaults);}  }
class C{  public View create(Element elem){  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty("i18n");  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    return createI18N(elem);  } else {    JTextComponent c=getComponent();    if (c instanceof JTextArea) {      JTextArea area=(JTextArea)c;      View v;      if (area.getLineWrap()) {        v=new WrappedPlainView(elem,area.getWrapStyleWord());      } else {        v=new PlainView(elem);      }      return v;    }  }  return null;}  }
class C{  public Table(TableModel model){  setUIID("Table");  this.model=model;  updateModel();}  }
class C{  public ChemicalPairInput(GasStack left,GasStack right){  leftGas=left;  rightGas=right;}  }
class C{  public static boolean isCSSSpace(char c){  return (c <= 0x0020) && (((((1L << '\t') | (1L << '\n') | (1L << '\r')| (1L << '\f')| (1L << 0x0020)) >> c) & 1L) != 0);}  }
class C{  protected DefaultPointsHandler(){}  }
class C{  public GitHubBranchRepository(GHRepository remoteRepository){  super(remoteRepository);}  }
class C{  public boolean isCompatible(MediaType other){  return other != null && (type.equals(MEDIA_TYPE_WILDCARD) || other.type.equals(MEDIA_TYPE_WILDCARD) || (type.equalsIgnoreCase(other.type) && (subtype.equals(MEDIA_TYPE_WILDCARD) || other.subtype.equals(MEDIA_TYPE_WILDCARD)))|| (type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype)));}  }
class C{  public void idReference(String s) throws ParseException {  id=s;  hasId=true;}  }
class C{  public Object putIfAbsent(String name,Object obj){  if (obj == null)   throw new NullPointerException();  if (_attributes == null)   _attributes=new ConcurrentHashMap<String,Object>(8);  return _attributes.putIfAbsent(name,obj);}  }
class C{  public _MergeOptions(){  super();}  }
class C{  static void poll(WatchService watcher){  try {    for (; ; ) {      WatchKey key=watcher.take();      if (key != null) {        key.pollEvents();        key.reset();      }    }  } catch (  ClosedWatchServiceException expected) {  }catch (  Exception e) {    e.printStackTrace();    failed=true;  }}  }
class C{  public static int ECOMM(){  return 70;}  }
class C{  private SweepGradient_Delegate(float cx,float cy,int colors[],float positions[]){  super(colors,positions);  mJavaPaint=new SweepGradientPaint(cx,cy,mColors,mPositions);}  }
class C{  private void handleAbortRequest() throws IOException {  int code=ResponseCodes.OBEX_HTTP_OK;  HeaderSet request=new HeaderSet();  HeaderSet reply=new HeaderSet();  int length=mInput.read();  length=(length << 8) + mInput.read();  if (length > ObexHelper.MAX_PACKET_SIZE_INT) {    code=ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE;  } else {    for (int i=3; i < length; i++) {      mInput.read();    }    code=mListener.onAbort(request,reply);    Log.v(TAG,"onAbort request handler return value- " + code);    code=validateResponseCode(code);  }  sendResponse(code,null);}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  private void processNeighbors(DoubleDBIDListIter neighbor,ModifiableDBIDs currentCluster,ArrayModifiableDBIDs seeds){  final boolean ismetric=getDistanceFunction().isMetric();  for (; neighbor.valid(); neighbor.advance()) {    if (processedIDs.add(neighbor)) {      if (!ismetric || neighbor.doubleValue() > 0.) {        seeds.add(neighbor);      }    } else     if (!noise.remove(neighbor)) {      continue;    }    currentCluster.add(neighbor);  }}  }
class C{  protected void generateMetaLevel(Instances newData,Random random) throws Exception {  Instances metaData=metaFormat(newData);  m_MetaFormat=new Instances(metaData,0);  for (int j=0; j < m_NumFolds; j++) {    Instances train=newData.trainCV(m_NumFolds,j,random);    super.buildClassifier(train);    buildClassifiers(train);    Instances test=newData.testCV(m_NumFolds,j);    for (int i=0; i < test.numInstances(); i++) {      metaData.add(metaInstance(test.instance(i)));    }  }  m_MetaClassifier.buildClassifier(metaData);}  }
class C{  public void add(boolean priority,CreateMarkerTask c){  lock.lock();  sendEmptyMessage(BLANK);  if (priority) {    mOnScreenCreateMarkerTasks.add(c);  } else {    mCreateMarkerTasks.add(c);  }  lock.unlock();}  }
class C{  public Builder withAcceptBacklog(int acceptBacklog){  properties.setProperty(NettyOptions.ACCEPT_BACKLOG,String.valueOf(Assert.argNot(acceptBacklog,acceptBacklog <= 0,"accept backlog must be positive")));  return this;}  }
class C{  public static void info(final String message){  if (JQuantLib.logger != null) {    JQuantLib.logger.info(message);  } else {    System.err.printf("INFO: %s\n",message);  }}  }
class C{  public static void previousImage(final IdocScanInterface ui){  ElementVO ele=(ElementVO)ui.getFileVO().getListImage().get(ui.getFileVO().getImageSelectIndex());  if (ele.getImageSelectIndex() - 1 < 0) {    ele.setImageSelectIndex(ele.getNumPages() - 1);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() - 1);  }}  }
class C{  public final boolean contains(final int value){  boolean flag=false;  for (int i=0; i < current_item; i++) {    if (items[i] == value) {      i=current_item + 1;      flag=true;    }  }  return flag;}  }
class C{  public String deAllocate(Warrant warrant){  if (_warrant != null) {    if (!_warrant.equals(warrant)) {      if (jmri.InstanceManager.getDefault(WarrantManager.class).getBySystemName(_warrant.getSystemName()) != null) {        String msg="cannot deAllocate. warrant \"" + _warrant.getDisplayName() + "\" owns block \""+ getDisplayName()+ "\"!";        log.error(msg);        return msg;      }    }    try {      removePropertyChangeListener(_warrant);    } catch (    Exception ex) {      log.warn("Perhaps normal? Code not clear.",ex);    }  }  if (_pathName != null) {    OPath path=getPathByName(_pathName);    if (path != null) {      int lockState=Turnout.CABLOCKOUT & Turnout.PUSHBUTTONLOCKOUT;      path.setTurnouts(0,false,lockState,false);      Portal portal=path.getFromPortal();      try {        if (portal != null) {          portal.setState(Portal.UNKNOWN);        }        portal=path.getToPortal();        if (portal != null) {          portal.setState(Portal.UNKNOWN);        }      } catch (      jmri.JmriException ex) {      }    }  }  _warrant=null;  _pathName=null;  _ownsTOs=false;  setState(getState() & ~(ALLOCATED | RUNNING));  return null;}  }
class C{  public boolean differByPerturbation(int gene,int p0,int p1){  return !(expression[p0][gene] == expression[p1][gene] || (expression[p0][gene] == -1 && expression[p1][gene] == 0) || (expression[p1][gene] == -1 && expression[p0][gene] == 0) || (expression[p0][gene] * expression[p1][gene] == 2));}  }
class C{  @Override public void execute(String link){  String uri=UriUtils.sanitizeUri(link);  log.debug("Opening URI {0}",uri);  Window.open(uri,"_blank","");}  }
class C{  public Double toDouble(){  return Double.valueOf(doubleValue());}  }
class C{  public void requestMore(int n){  if (subscriptions.size() == 0) {    throw new IllegalStateException("no subscriptions to request from");  }  subscriptions.get(0).request(n);}  }
class C{  protected void validateHole(BaseLineStringBuilder shell,BaseLineStringBuilder hole){  HashSet exterior=Sets.newHashSet(shell.points);  HashSet interior=Sets.newHashSet(hole.points);  exterior.retainAll(interior);  if (exterior.size() >= 2) {    throw new InvalidShapeException("Invalid polygon, interior cannot share more than one point with the exterior");  }}  }
class C{  public FacebookOperationCanceledException(Throwable throwable){  super(throwable);}  }
class C{  public static void deleteRawModule(final AbstractSQLProvider provider,final INaviRawModule module) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE00529: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE00530: Raw module can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00531: Raw module is not part of this database");  final CConnection connection=provider.getConnection();  NaviLogger.info("Deleting raw module %s",module.getName());  final int moduleId=module.getId();  try {    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_ADDRESS_COMMENTS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_ADDRESS_REFERENCES_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_BASIC_BLOCK_INSTRUCTIONS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_BASIC_BLOCKS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_CALLGRAPH_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_CONTROL_FLOW_GRAPHS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_EXPRESSION_NODES_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_EXPRESSION_SUBSTITUTIONS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_EXPRESSION_TREE_NODES_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_EXPRESSION_TREES_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_FUNCTIONS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_INSTRUCTIONS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_OPERANDS_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_SECTIONS,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_TYPE_INSTACES,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_TYPES,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_BASE_TYPES,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_EXPRESSION_TYPES_TABLE,moduleId));    PostgreSQLHelpers.deleteTable(connection,String.format(CTableNames.RAW_EXPRESSION_TYPE_INSTANCES,moduleId));    PostgreSQLHelpers.deleteById(connection,CTableNames.RAW_MODULES_TABLE,moduleId);  } catch (  final SQLException e) {    CUtilityFunctions.logException(e);  }}  }
class C{  private EventReader provide(InputSource source) throws Exception {  DocumentBuilder builder=factory.newDocumentBuilder();  Document document=builder.parse(source);  return new DocumentReader(document);}  }
class C{  private boolean isNeedDrawShadow(){  if (mImmersiveTitleBarEnabled) {    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT)     return true;    if (CompatibilityUtil.getMIUIVersion() >= 6)     return true;    if (CompatibilityUtil.isFlyme())     return true;  }  return false;}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void actionPerformed(ActionEvent e){  FileDialog chooser=new FileDialog(StdDraw.frame,"Use a .png or .jpg extension",FileDialog.SAVE);  chooser.setVisible(true);  String filename=chooser.getFile();  if (filename != null) {    StdDraw.save(chooser.getDirectory() + File.separator + chooser.getFile());  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(TimePeriodAnchor.START)) {    return TimePeriodAnchor.START;  } else   if (this.equals(TimePeriodAnchor.MIDDLE)) {    return TimePeriodAnchor.MIDDLE;  } else   if (this.equals(TimePeriodAnchor.END)) {    return TimePeriodAnchor.END;  }  return null;}  }
class C{  void finishPacket(ByteBuffer buffer){}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  BinaryInsertion.sort(a);  show(a);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public T caseStatechartSpecification(StatechartSpecification object){  return null;}  }
class C{  public ExpiresHeader createExpiresHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  Expires e=new Expires();  e.setExpires(expires);  return e;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.263 -0400",hash_original_method="69BCB75C298B3958E4BBBB9CEEF789D4",hash_generated_method="82CD08FCC775B8E80097AADB10CADF7B") public boolean offer(E o){  if (o == null) {    throw new NullPointerException("o == null");  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  public String toString(){  String out="";  out+=contentInfo + "\n";  if (version != null)   out+="PKCS7 :: version: " + Debug.toHexString(version) + "\n";  if (digestAlgorithmIds != null) {    out+="PKCS7 :: digest AlgorithmIds: \n";    for (int i=0; i < digestAlgorithmIds.length; i++)     out+="\t" + digestAlgorithmIds[i] + "\n";  }  if (certificates != null) {    out+="PKCS7 :: certificates: \n";    for (int i=0; i < certificates.length; i++)     out+="\t" + i + ".   "+ certificates[i]+ "\n";  }  if (crls != null) {    out+="PKCS7 :: crls: \n";    for (int i=0; i < crls.length; i++)     out+="\t" + i + ".   "+ crls[i]+ "\n";  }  if (signerInfos != null) {    out+="PKCS7 :: signer infos: \n";    for (int i=0; i < signerInfos.length; i++)     out+=("\t" + i + ".  "+ signerInfos[i]+ "\n");  }  return out;}  }
class C{  public SequencesReader left(){  assert mIsPaired;  return mLeft;}  }
class C{  public void removeNeuron(Neuron toDelete){  neuronList.remove(toDelete);  if (isEmpty()) {    delete();  }  resetSubsamplingIndices();}  }
class C{  public boolean isProvidedByRuntime(){  return false;}  }
class C{  @SuppressWarnings("unused") public static DialogOption showYesNoCancelMessage(final String message,final IntSetting defaultValue){  return MessageService.instance().showYesNoCancelMessage(message,defaultValue);}  }
class C{  protected void addMapping(final int hashIndex,final int hashCode,final K key,final V value){  modCount++;  final HashEntry<K,V> entry=createEntry(data[hashIndex],hashCode,key,value);  addEntry(entry,hashIndex);  size++;  checkCapacity();}  }
class C{  @Override public String toString(){  String ret="";  for (int i=0; i < numbers.length; i++) {    if (i > 0)     ret+='.';    ret+=numbers[i];  }  return ret;}  }
class C{  private static boolean nonEmptyIntersection(String[] a,String[] b){  if (a == null || b == null || a.length == 0 || b.length == 0) {    return false;  }  for (  String toFind : a) {    if (contains(b,toFind)) {      return true;    }  }  return false;}  }
class C{  protected void writeImage(Element elem) throws IOException {}  }
class C{  public AspectDiscovery discover(AspectManager manager,AspectItem aspectItem){  List<Aspect> staticAspects=manager.getStaticAspects(aspectItem);  if (staticAspects.isEmpty()) {    return new AspectDiscovery(EnumDiscoveryResult.NONE,null,false);  }  int discoveryCount=this.getDiscoveryCount(aspectItem) + 1;  if (discoveryCount > staticAspects.size()) {    return new AspectDiscovery(EnumDiscoveryResult.END,null,false);  }  Aspect undiscovered=this.getUndiscoveredAspect(staticAspects,this.discoveredStaticAspects.get(aspectItem));  this.addDiscovery(aspectItem,undiscovered.type);  if (discoveryCount == staticAspects.size()) {    this.saveContainer();    return new AspectDiscovery(EnumDiscoveryResult.LAST,undiscovered,true);  } else {    this.saveContainer();    return new AspectDiscovery(EnumDiscoveryResult.NEW,undiscovered,true);  }}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void writeStats(GlowPlayer player){  File file=getPlayerFile(player.getUniqueId());  StatisticMap map=player.getStatisticMap();  JSONObject json=new JSONObject(map.getValues());  try {    FileWriter writer=new FileWriter(file,false);    writer.write(json.toJSONString());    writer.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public File createPDF(File file){  ReportEngine re=ReportEngine.get(getCtx(),ReportEngine.RFQ,getC_RfQResponse_ID());  if (re == null)   return null;  return re.getPDF(file);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.877 -0500",hash_original_method="5C901DFE988DB9E0BABB61B8EF5034CC",hash_generated_method="FD30597EA05804D7010AB66782EB4CBD") private static void applyCapabilitiesSecurityPolicy(Arguments args,Credentials peer) throws ZygoteSecurityException {  if (args.permittedCapabilities == 0 && args.effectiveCapabilities == 0) {    return;  }  if (peer.getUid() == 0) {    return;  }  long permittedCaps;  try {    permittedCaps=ZygoteInit.capgetPermitted(peer.getPid());  } catch (  IOException ex) {    throw new ZygoteSecurityException("Error retrieving peer's capabilities.");  }  if (((~args.permittedCapabilities) & args.effectiveCapabilities) != 0) {    throw new ZygoteSecurityException("Effective capabilities cannot be superset of " + " permitted capabilities");  }  if (((~permittedCaps) & args.permittedCapabilities) != 0) {    throw new ZygoteSecurityException("Peer specified unpermitted capabilities");  }}  }
class C{  public boolean inject(ClassNode cnode){  String interfaceByteName=templateName.replace(".","/");  if (!cnode.interfaces.contains(interfaceByteName)) {    cnode.interfaces.add(interfaceByteName);  }  boolean changed=false;  List<String> names=new LinkedList<>();  for (  MethodNode method : cnode.methods) {    ObfMapping m=new ObfMapping(cnode.name,method.name,method.desc).toRuntime();    names.add(m.s_name + m.s_desc);  }  for (  MethodNode impl : this.methodImplementations) {    if (!impl.name.equals("<init>")) {      if (names.contains(impl.name + impl.desc)) {        continue;      }      ObfMapping mapping=new ObfMapping(cnode.name,impl.name,impl.desc).toRuntime();      MethodNode copy=new MethodNode(impl.access,mapping.s_name,mapping.s_desc,impl.signature,impl.exceptions == null ? null : impl.exceptions.toArray(new String[impl.exceptions.size()]));      ASMHelper.copy(impl,copy);      cnode.methods.add(impl);      changed=true;    }  }  return changed;}  }
class C{  private void sendMove(int inputSource,float dx,float dy){  long now=SystemClock.uptimeMillis();  injectMotionEvent(inputSource,MotionEvent.ACTION_MOVE,now,dx,dy,0.0f);}  }
class C{  public void addPollMessage(TamsMessage tm,TamsListener tl){  tm.setTimeout(100);  boolean found=false;  for (  PollMessage pm : pollQueue) {    if (pm.getListener() == tl && pm.getMessage().toString().equals(tm.toString())) {      log.debug("Message is already in the poll queue so will not add");      found=true;    }  }  if (!found) {    PollMessage pm=new PollMessage(tm,tl);    pollQueue.offer(pm);  }}  }
class C{  public String showSwitchWwn() throws NetworkDeviceControllerException {  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN,SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  StringBuilder buf=new StringBuilder();  sendWaitFor(MDSDialogProperties.getString("MDSDialog.show.wwn.switch.cmd"),defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.show.wwn.switch.match")};  String switchWwn=null;  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      switchWwn=groups[0];    break;}if (switchWwn != null) {  break;}}return switchWwn;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isSriovActive(){  return sriovActive;}  }
class C{  LogSegmentMetadata completeLogSegment(String zkPath,long newLastTxId,int recordCount,long lastEntryId,long lastSlotId,long startSequenceId){  assert this.lastTxId == DistributedLogConstants.INVALID_TXID;  return new Mutator(this).setZkPath(zkPath).setLastDLSN(new DLSN(this.lastDLSN.getLogSegmentSequenceNo(),lastEntryId,lastSlotId)).setLastTxId(newLastTxId).setInprogress(false).setCompletionTime(Utils.nowInMillis()).setRecordCount(recordCount).setStartSequenceId(startSequenceId).build();}  }
class C{  public boolean isL10N(String name){  byte b=((Byte)resourceTypes.get(name)).byteValue();  return b == MAGIC_L10N;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.153 -0500",hash_original_method="1435B67C8334D2AC8987004B54F10264",hash_generated_method="04F91395206B54F10C8CEF6DB25CA04D") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified public boolean dispatchKeyEvent(KeyEvent event){  if ((mOnKeyListener != null) && (mOnKeyListener.onKey(this,event.getKeyCode(),event))) {    return true;  }  if (mWindow.superDispatchKeyEvent(event)) {    return true;  }  return event.dispatch(this,mDecor != null ? mDecor.getKeyDispatcherState() : null,this);}  }
class C{  private static void printXmlMethods(ClassRef cref){  MethodRef[] methods=cref.getMethodArray();  for (int i=0; i < methods.length; i++) {    MethodRef mref=methods[i];    String declClassName=mref.getDeclClassName();    boolean constructor;    constructor=mref.getName().equals("<init>");    if (constructor) {      out.println(IN3 + "<constructor name=\"" + classNameOnly(declClassName)+ "\">");    } else {      out.println(IN3 + "<method name=\"" + mref.getName()+ "\" return=\""+ descriptorToDot(mref.getReturnTypeName())+ "\">");    }    String[] args=mref.getArgumentTypeNames();    for (int j=0; j < args.length; j++) {      out.println(IN4 + "<parameter type=\"" + descriptorToDot(args[j])+ "\"/>");    }    if (constructor) {      out.println(IN3 + "</constructor>");    } else {      out.println(IN3 + "</method>");    }  }}  }
class C{  @Override public void truncate(int size,Comparator<? super Solution> comparator){  if (size() > size) {    sort(new RankComparator());    int maxRank=(Integer)super.get(size - 1).getAttribute(RANK_ATTRIBUTE);    Population front=new Population();    for (int i=0; i < size(); i++) {      int rank=(Integer)get(i).getAttribute(RANK_ATTRIBUTE);      if (rank > maxRank) {        front.add(get(i));      }    }    removeAll(front);    updateIdealPoint();    translateByIdealPoint();    normalizeByIntercepts(calculateIntercepts());    front=new Population();    for (int i=0; i < size(); i++) {      int rank=(Integer)get(i).getAttribute(RANK_ATTRIBUTE);      if (rank == maxRank) {        front.add(get(i));      }    }    removeAll(front);    List<List<Solution>> members=associateToReferencePoint(this);    List<List<Solution>> potentialMembers=associateToReferencePoint(front);    Set<Integer> excluded=new HashSet<Integer>();    while (size() < size) {      List<Integer> minIndices=new ArrayList<Integer>();      int minCount=Integer.MAX_VALUE;      for (int i=0; i < members.size(); i++) {        if (!excluded.contains(i) && (members.get(i).size() <= minCount)) {          if (members.get(i).size() < minCount) {            minIndices.clear();            minCount=members.get(i).size();          }          minIndices.add(i);        }      }      int minIndex=PRNG.nextItem(minIndices);      if (minCount == 0) {        if (potentialMembers.get(minIndex).isEmpty()) {          excluded.add(minIndex);        } else {          Solution minSolution=findSolutionWithMinimumDistance(potentialMembers.get(minIndex),weights.get(minIndex));          add(minSolution);          members.get(minIndex).add(minSolution);          potentialMembers.get(minIndex).remove(minSolution);        }      } else {        if (potentialMembers.get(minIndex).isEmpty()) {          excluded.add(minIndex);        } else {          Solution randSolution=PRNG.nextItem(potentialMembers.get(minIndex));          add(randSolution);          members.get(minIndex).add(randSolution);          potentialMembers.get(minIndex).remove(randSolution);        }      }    }  }}  }
class C{  private void assertCompareException(Literal lit1,Literal lit2,CompareOp op) throws Exception {  try {    boolean returnValue=QueryEvaluationUtil.compareLiterals(lit1,lit2,op);    fail("Did not receive expected ValueExprEvaluationException (return value was " + returnValue + ") for "+ lit1.toString()+ op.getSymbol()+ lit2.toString());  } catch (  ValueExprEvaluationException e) {  }}  }
class C{  public FileConfirmationDialog(@Nullable Project project,DialogType dialogType,@NotNull Path targetPath){  super(project);  this.dialogType=dialogType;switch (dialogType) {case CONFIRM_OVERWRITE:    setTitle(GctBundle.message("appengine.flex.config.destination.overwrite.title"));  warningLabel.setText(GctBundle.message("appengine.flex.config.destination.overwrite"));break;case CONFIRM_CREATE_DIR:setTitle(GctBundle.message("appengine.flex.config.destination.create.dir.title"));warningLabel.setText(GctBundle.message("appengine.flex.config.destination.create.dir"));break;case NOT_DIRECTORY_ERROR:setTitle(GctBundle.message("appengine.flex.config.destination.not.directory.title"));warningLabel.setText(GctBundle.message("appengine.flex.config.destination.not.directory"));break;default :throw new AssertionError();}pathDisplay.setText(targetPath.toString());init();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.437 -0500",hash_original_method="7F96EB9041812BCBDE3CAB21860F0D78",hash_generated_method="176744FB379C063ED5EE004EDB8E802B") public static boolean isEnabled(){  return enabled;}  }
class C{  protected void convertInstance(Instance instance) throws Exception {  Instance inst=null;  if (instance instanceof SparseInstance) {    double[] newVals=new double[instance.numAttributes()];    int[] newIndices=new int[instance.numAttributes()];    double[] vals=instance.toDoubleArray();    int ind=0;    for (int j=0; j < instance.numAttributes(); j++) {      double value;      if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {        if (Double.isNaN(m_MinArray[j]) || (m_MaxArray[j] == m_MinArray[j])) {          value=0;        } else {          value=(vals[j] - m_MinArray[j]) / (m_MaxArray[j] - m_MinArray[j]) * m_Scale + m_Translation;          if (Double.isNaN(value)) {            throw new Exception("A NaN value was generated " + "while normalizing " + instance.attribute(j).name());          }        }        if (value != 0.0) {          newVals[ind]=value;          newIndices[ind]=j;          ind++;        }      } else {        value=vals[j];        if (value != 0.0) {          newVals[ind]=value;          newIndices[ind]=j;          ind++;        }      }    }    double[] tempVals=new double[ind];    int[] tempInd=new int[ind];    System.arraycopy(newVals,0,tempVals,0,ind);    System.arraycopy(newIndices,0,tempInd,0,ind);    inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());  } else {    double[] vals=instance.toDoubleArray();    for (int j=0; j < getInputFormat().numAttributes(); j++) {      if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {        if (Double.isNaN(m_MinArray[j]) || (m_MaxArray[j] == m_MinArray[j])) {          vals[j]=0;        } else {          vals[j]=(vals[j] - m_MinArray[j]) / (m_MaxArray[j] - m_MinArray[j]) * m_Scale + m_Translation;          if (Double.isNaN(vals[j])) {            throw new Exception("A NaN value was generated " + "while normalizing " + instance.attribute(j).name());          }        }      }    }    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);}  }
class C{  public void commandJoinChannel(String channel){  if (channel == null) {    g.printLine("A channel to join needs to be specified.");  } else {    channel=StringUtil.toLowerCase(channel.trim());    c.joinChannel(channel);  }}  }
class C{  public static <DTO>DTO createDtoFromJson(String json,Class<DTO> dtoInterface){  return JsonUtils.createDtoFromJson(json,dtoInterface);}  }
class C{  public boolean addOwnerName(String owner){  if (_ownerList.contains(owner)) {    return false;  }  _ownerList.add(owner);  log.debug("train (" + getName() + ") add car owner "+ owner);  setDirtyAndFirePropertyChange(OWNERS_CHANGED_PROPERTY,_ownerList.size() - 1,_ownerList.size());  return true;}  }
class C{  public Builder extendArray(String setting,String... values){  String oldSingle=remove(setting);  int counter=0;  while (map.containsKey(setting + '.' + counter)) {    ++counter;  }  if (oldSingle != null) {    put(setting + '.' + counter++,oldSingle);  }  for (  String value : values) {    put(setting + '.' + counter++,value);  }  return this;}  }
class C{  private void text(Contact field,Annotation type) throws Exception {  Label label=support.getLabel(field,type);  Expression expression=label.getExpression();  String path=label.getPath();  Model model=root;  if (!expression.isEmpty()) {    model=register(expression);  }  if (texts.get(path) != null) {    throw new TextException("Multiple text annotations in %s",type);  }  resolver.register(label);  model.register(label);  texts.put(path,label);}  }
class C{  public MultiResourceLoader(){  this(new ResourceLoader[0]);}  }
class C{  public URI(String scheme,String userInfo,String host,int port,String path,String query,String fragment) throws URISyntaxException {  if (scheme == null && userInfo == null && host == null && path == null && query == null && fragment == null) {    this.path="";    return;  }  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (userInfo != null || host != null || port != -1) {    uri.append("//");  }  if (userInfo != null) {    USER_INFO_ENCODER.appendEncoded(uri,userInfo);    uri.append('@');  }  if (host != null) {    if (host.indexOf(':') != -1 && host.indexOf(']') == -1 && host.indexOf('[') == -1) {      host="[" + host + "]";    }    uri.append(host);  }  if (port != -1) {    uri.append(':');    uri.append(port);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),true);}  }
class C{  static public void compareGraphs(final String name,final Set<Statement> queryResult,final Set<Statement> expectedResult){  if (!ModelUtil.equals(expectedResult,queryResult)) {    StringBuilder message=new StringBuilder(128);    message.append("\n============ ");    message.append(name);    message.append(" =======================\n");    message.append("Expected result: \n");    for (    Statement st : expectedResult) {      message.append(st.toString());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',name.length(),message);    message.append("========================\n");    message.append("Query result: \n");    for (    Statement st : queryResult) {      message.append(st.toString());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',name.length(),message);    message.append("========================\n");    log.error(message.toString());    fail(message.toString());  }}  }
class C{  public static <T>LazyPVectorX<T> fromIterable(Iterable<T> it){  return fromIterable(Reducers.toPVector(),it);}  }
class C{  private RecordBuffer<R> tryTake(long elapsedWaiting){  RecordBuffer<R> result=null;  if (!retryQueue.isEmpty()) {    result=retryQueue.poll();  } else {    result=neverPubQueue.poll();  }  if (result != null) {    return onTakeSuccess(result,elapsedWaiting);  } else   if (elapsedWaiting > 0) {    return onTakeTimeout(elapsedWaiting);  } else   return null;}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  protected Individual producePrevious(int subpopulation,EvolutionState state,int thread){  if (state.generation == 0) {    return state.population.subpops[subpopulation].individuals[state.random[0].nextInt(state.population.subpops[subpopulation].individuals.length)];  } else {    Population currentPopulation=state.population;    state.population=previousPopulation;    Individual selected=state.population.subpops[subpopulation].individuals[selectionMethodPrev[subpopulation].produce(subpopulation,state,thread)];    state.population=currentPopulation;    return selected;  }}  }
class C{  private ExpressionException invalidPosition(int pos){  return new ExpressionException("Element at position [" + pos + "] doesn't exist in array");}  }
class C{  public Dependencies add(Dependency dependency){  dependencies.add(requireNonNull(dependency,"Required not null dependency"));  if (!isNew()) {    addDependencyToXML(dependency);  }  return this;}  }
class C{  public AuthenticatorException(String msg,List<String> messages){  super(msg,messages);}  }
class C{  public void testCloneComplex(){  final Complex complex=new Complex();  complex.setS("x1");  complex.setX(20);  final Complex clone=cloner.deepClone(complex);  assertEquals(complex.getS(),clone.getS());  assertEquals(complex.getX(),clone.getX());  assertEquals(complex.getL().size(),clone.getL().size());  final Simple simple1=complex.getL().get(0);  final Simple simple2=complex.getL().get(1);  final Simple simple1Clone=clone.getL().get(0);  final Simple simple2Clone=clone.getL().get(1);  assertNotSame(simple1,simple1Clone);  assertNotSame(simple2,simple2Clone);  assertEquals(simple1,simple1Clone);  assertEquals(simple2,simple2Clone);}  }
class C{  @Override public Map<String,Object> contentDescription(URI uri,InputStream inputStream,Map<?,?> options,Map<Object,Object> context) throws IOException {  Map<String,Object> description=super.contentDescription(uri,inputStream,options,context);  if (canHandle(uri)) {    description.put(VALIDITY_PROPERTY,VALID);    description.put(CONTENT_TYPE_PROPERTY,DOCKERFILE_FILE_CONTENT_TYPE);  }  return description;}  }
class C{  public SassColor(){}  }
class C{  private String printXFormat(short x){  String sx=null;  if (x == Short.MIN_VALUE)   sx="8000"; else   if (x < 0) {    String t;    if (x == Short.MIN_VALUE)     t="0"; else {      t=Integer.toString((~(-x - 1)) ^ Short.MIN_VALUE,16);      if (t.charAt(0) == 'F' || t.charAt(0) == 'f')       t=t.substring(16,32);    }switch (t.length()) {case 1:      sx="800" + t;    break;case 2:  sx="80" + t;break;case 3:sx="8" + t;break;case 4:switch (t.charAt(0)) {case '1':sx="9" + t.substring(1,4);break;case '2':sx="a" + t.substring(1,4);break;case '3':sx="b" + t.substring(1,4);break;case '4':sx="c" + t.substring(1,4);break;case '5':sx="d" + t.substring(1,4);break;case '6':sx="e" + t.substring(1,4);break;case '7':sx="f" + t.substring(1,4);break;}break;}} else sx=Integer.toString((int)x,16);return printXFormat(sx);}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public synchronized boolean checkForReschedule(boolean rescheduleOk){  if (!this.allConnections.isEmpty()) {    final long now=System.nanoTime();    for (Iterator it=this.allConnections.iterator(); it.hasNext(); ) {      PooledConnection pc=(PooledConnection)it.next();      if (pc.hasIdleExpired(now,idleTimeoutNanos)) {        continue;      } else       if (pc.shouldDestroy()) {        continue;      } else {        long life=pc.remainingLife(now,lifetimeTimeoutNanos);        if (life > 0) {          if (rescheduleOk) {            startBackgroundLifetimeExpiration(life);            return false;          } else {            return false;          }        } else {          return true;        }      }    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public DataTable(int cols,Class<? extends Comparable<?>> type){  this();  Class<? extends Comparable<?>>[] types=new Class[cols];  Arrays.fill(types,type);  setColumnTypes(types);}  }
class C{  public void updateSearchBarAppWidgetId(Context context,int appWidgetId){}  }
class C{  @Override public void readFromNBT(NBTTagCompound par1NBTTagCompound){  super.readFromNBT(par1NBTTagCompound);  tier=par1NBTTagCompound.getInteger("tier");  launchHeight=par1NBTTagCompound.getShort("launchHeight");}  }
class C{  @CanIgnoreReturnValue K checkKey(@Nullable K key){  return key;}  }
class C{  public T second(){  return second;}  }
class C{  public void connect() throws IOException {  if (DBG)   log("connect() EX");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void stopSearching(){  stopSearching=true;}  }
class C{  public static int binarySearch(short[] array,short value){  return binarySearch(array,0,array.length,value);}  }
class C{  public boolean hasMoreTokens(){  return (currentPosition >= maxPosition) ? false : true;}  }
class C{  private void positionAndSizeAsIcon(){  if (!(getParent() instanceof DragLayer))   return;  setScaleX(0.8f);  setScaleY(0.8f);  setAlpha(0f);  mState=STATE_SMALL;}  }
class C{  public void paste(){  this.checkWidget();  this.text.paste();}  }
class C{  private String resolveTypeInternal(String typeName){  String resolvedName=null;  lookup: {    if (PRIMITIVE_TYPES.contains(typeName)) {      resolvedName=typeName;      break lookup;    }    String outerName=typeName;    String nestedName=typeName.replace('.','$');    int dotpos=typeName.indexOf('.');    if (dotpos >= 0) {      outerName=typeName.substring(0,dotpos);    }    resolvedName=resolveImportedType(typeName,nestedName,true);    if (resolvedName != null) {      break lookup;    }    resolvedName=resolveImportedType(outerName,nestedName,false);    if (resolvedName != null) {      break lookup;    }    if (getPackage() != null) {      resolvedName=resolveFullyQualifiedType(getPackageName() + '.' + typeName);      if (resolvedName != null) {        break lookup;      }    }    resolvedName=resolveFullyQualifiedType(typeName);    if (resolvedName != null) {      break lookup;    }    resolvedName=resolveFromLibrary(getClassNamePrefix() + nestedName);    if (resolvedName != null) {      break lookup;    }    resolvedName=resolveFromLibrary("java.lang." + nestedName);    if (resolvedName != null) {      break lookup;    }    resolvedName=resolveImportedType("*",nestedName,false);    if (resolvedName != null) {      break lookup;    }  }  return resolvedName;}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,String group,String jobName,String jobGroup,Date startTime,Date endTime,int repeatCount,long repeatInterval){  super(name,group,jobName,jobGroup);  setStartTime(startTime);  setEndTime(endTime);  setRepeatCount(repeatCount);  setRepeatInterval(repeatInterval);}  }
class C{  public static GattSerialMessage fromPayload(byte[] payload){  Buffer buffer=new Buffer();  byte[] header=new byte[2];  header[0]=(byte)(payload.length & 0xff);  header[1]=0;  int crc=computeCRC16(header,0,header.length);  crc=computeCRC16(crc,payload,0,payload.length);  buffer.write(header);  buffer.write(payload);  buffer.writeByte(crc & 0xff);  buffer.writeByte((crc >> 8) & 0xff);  return new GattSerialMessage(buffer);}  }
class C{  public static int reverseBytes(int i){  i=((i >>> 8) & 0x00FF00FF) | ((i & 0x00FF00FF) << 8);  return (i >>> 16) | (i << 16);}  }
class C{  public SchemaOrgParser(Element root,TimingInfo timingInfo){  mTimingInfo=timingInfo;  double startTime=DomUtil.getTime();  parse(root);  LogUtil.addTimingInfo(startTime,mTimingInfo,"SchemaOrgParser.parse");}  }
class C{  public void addLayer(Layer layer){  mapBean.add(layer);  try {    layer.setBeanContext(getBeanContext());  } catch (  PropertyVetoException nve) {  }  resetPalette();}  }
class C{  public static void main(String[] args){  Header.printHeader(MonthlyFileSplitter.class.toString(),args);  String rawFolder=args[0];  String outputFolder=args[1];  int numberOfThreads=Integer.parseInt(args[2]);  ExecutorService threadExecutor=Executors.newFixedThreadPool(numberOfThreads);  List<MonthSplitter> jobs=new ArrayList<MonthlyFileSplitter.MonthSplitter>();  List<File> inputFiles=GrainUtils.getRawGpsTraceFiles(rawFolder);  for (  File month : inputFiles) {    String theMonth=month.getName().substring(0,month.getName().indexOf("."));    LOG.info("Processing month: " + theMonth);    String monthFolder=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + theMonth+ "/";    File thisMonthFolder=new File(monthFolder);    if (thisMonthFolder.isDirectory() && thisMonthFolder.exists()) {      LOG.error("Not allowed to delete the output folder " + monthFolder);      LOG.error("The month " + theMonth + " will be skipped!!");    } else {      boolean dir=thisMonthFolder.mkdirs();      if (!dir) {        LOG.error("Could not create the month " + theMonth + "'s folder!!");        LOG.error("The month " + theMonth + " will be skipped!!");      } else {        String[] sa={month.getAbsolutePath(),monthFolder,"0","5","0","2","1","4","3"};        MonthSplitter job=new MonthSplitter(sa);        threadExecutor.execute(job);        jobs.add(job);      }    }  }  threadExecutor.shutdown();  while (!threadExecutor.isTerminated()) {  }  Header.printFooter();}  }
class C{  public static <S extends HasMouseOverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseOverEvent event=new MouseOverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  synchronized void clueless() throws Exception {synchronized (this) {    this.wait();  }}  }
class C{  @SuppressWarnings("serial") public List<?> find(Value value) throws AerospikeException {  Key subKey=makeSubKey(value);  Record record=client.get(this.policy,subKey,ListElementBinName);  if (record != null) {    final Object result=record.getValue(ListElementBinName);    return new ArrayList<Object>(){{        add(result);      }    };  } else {    return null;  }}  }
class C{  public void paintIndeterminate(Graphics g,JComponent c){  super.paintIndeterminate(g,c);  if (!progressBar.isBorderPainted() || (!(g instanceof Graphics2D))) {    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.left + b.right);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  int amountFull=getAmountFull(b,barRectWidth,barRectHeight);  boolean isLeftToRight=MetalUtils.isLeftToRight(c);  int startX, startY, endX, endY;  Rectangle box=null;  box=getBox(box);  startX=b.left;  startY=b.top;  endX=b.left + barRectWidth - 1;  endY=b.top + barRectHeight - 1;  Graphics2D g2=(Graphics2D)g;  g2.setStroke(new BasicStroke(1.f));  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    g2.setColor(MetalLookAndFeel.getControlShadow());    g2.drawLine(startX,startY,endX,startY);    g2.drawLine(startX,startY,startX,endY);    g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());    g2.drawLine(box.x,startY,box.x + box.width - 1,startY);  } else {    g2.setColor(MetalLookAndFeel.getControlShadow());    g2.drawLine(startX,startY,startX,endY);    g2.drawLine(startX,startY,endX,startY);    g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());    g2.drawLine(startX,box.y,startX,box.y + box.height - 1);  }}  }
class C{  public int counter(){  return m_counter;}  }
class C{  public void dispose(){}  }
class C{  public void initializeDistanceFunction(Instances init) throws Exception {  if (m_missingValuesReplacer != null) {    init=Filter.useFilter(init,m_missingValuesReplacer);  }  m_distanceFunction.setInstances(init);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(normalize01.class,args);}  }
class C{  public static void makeCompactGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  ClassCastException exc) {    if (MainFrame.GUI2_DEBUG) {      System.err.println("The first argument to makeCompactGrid must use SpringLayout.");    }    return;  }  Spring x=Spring.constant(initialX);  for (int c=0; c < cols; c++) {    Spring width=Spring.constant(0);    for (int r=0; r < rows; r++) {      width=Spring.max(width,getConstraintsForCell(r,c,parent,cols).getWidth());    }    for (int r=0; r < rows; r++) {      SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setX(x);      constraints.setWidth(width);    }    x=Spring.sum(x,Spring.sum(width,Spring.constant(xPad)));  }  Spring y=Spring.constant(initialY);  for (int r=0; r < rows; r++) {    Spring height=Spring.constant(0);    for (int c=0; c < cols; c++) {      height=Spring.max(height,getConstraintsForCell(r,c,parent,cols).getHeight());    }    for (int c=0; c < cols; c++) {      SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setY(y);      constraints.setHeight(height);    }    y=Spring.sum(y,Spring.sum(height,Spring.constant(yPad)));  }  SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,y);  pCons.setConstraint(SpringLayout.EAST,x);}  }
class C{  @Override public void draw(Graphics sc){  super.draw(sc);  IMultiPoint p=model.getNearest();  if (p == null)   return;  int ht=canvas.getHeight();  double x=p.getCoordinate(1);  double y=ht - p.getCoordinate(2);  IMultiPoint tgt=model.getTarget();  double tx=tgt.getCoordinate(1);  double ty=ht - tgt.getCoordinate(2);  canvas.drawElement(sc,tgt);  canvas.drawElement(sc,p);  sc.setColor(Color.red);  sc.drawLine((int)x,(int)y,(int)tx,(int)ty);  sc.fillOval((int)x - 4,(int)y - 4,8,8);}  }
class C{  @Override protected Blob writeDataToBlob(ResultSet rs,int column,byte[] data) throws SQLException {  Blob blob=rs.getBlob(column);  if (blob == null) {    throw new SQLException("Driver's Blob representation is null!");  }  if (blob instanceof weblogic.jdbc.vendor.oracle.OracleThinBlob) {    ((weblogic.jdbc.vendor.oracle.OracleThinBlob)blob).putBytes(1,data);    return blob;  } else   if (blob.getClass().getPackage().getName().startsWith("weblogic.")) {    try {      Method m=blob.getClass().getMethod("putBytes",new Class[]{long.class,byte[].class});      m.invoke(blob,new Object[]{new Long(1),data});    } catch (    Exception e) {      try {        Method m=blob.getClass().getMethod("setBytes",new Class[]{long.class,byte[].class});        m.invoke(blob,new Object[]{new Long(1),data});      } catch (      Exception e2) {        throw new SQLException("Unable to find putBytes(long,byte[]) or setBytes(long,byte[]) methods on blob: " + e2);      }    }    return blob;  } else {    return super.writeDataToBlob(rs,column,data);  }}  }
class C{  public boolean hasCallEvent(String channel,String from,String to){  boolean hasEvent=false;  if (mChannelCallMap.containsKey(channel)) {    P25CallEvent event=mChannelCallMap.get(channel);    if (to != null && event.getToID() != null && to.contentEquals(event.getToID())) {      if (from != null) {        if (event.getFromID() == null) {          hasEvent=true;        } else         if (from.contentEquals(event.getFromID())) {          hasEvent=true;        }      } else {        hasEvent=true;      }    }  }  return hasEvent;}  }
class C{  public static char binaryToHexDigitMsb0_4bits(final boolean[] src){  return binaryToHexDigitMsb0_4bits(src,0);}  }
class C{  public byte[] booleanRepresentation(int ind,int n){  byte[] rep=new byte[n];  for (int i=0; i < n; i++) {    rep[i]=(byte)0;  }  for (int i=0; i < n; i++) {    int rem=ind % 2;    if (rem == 1) {      rep[n - i - 1]=(byte)1;      ind-=1;    }    ind/=2;  }  return rep;}  }
class C{  public void loadSelfFile(InputStream stream,String encoding,int maxSize,boolean debug,boolean optimize){  Network network=getBot().memory().newMemory();  Vertex language=network.createVertex(getPrimitive());  SelfCompiler compiler=SelfCompiler.getCompiler();  if (!optimize) {    compiler=new SelfCompiler();  }  Vertex stateMachine=compiler.parseStateMachine(stream,debug,network,encoding,maxSize);  SelfCompiler.getCompiler().pin(stateMachine);  language.addRelationship(Primitive.STATE,stateMachine);  network.save();}  }
class C{  public static byte[] generatePublicID(AsymmetricCipherKeyPair id){  return encodeDHPublicKey((DHPublicKeyParameters)id.getPublic());}  }
class C{  protected void releaseManagedConnection() throws IOException {  if (managedConn != null) {    try {      managedConn.releaseConnection();    }  finally {      managedConn=null;    }  }}  }
class C{  private void calculateSunRotation(float _offset,Time time,int canvasWidth,int canvasHeight){  sunPositionX=(float)(canvasWidth / 2 + (canvasWidth / 2 + 200.0f) * Math.cos((2 * Math.PI * time.minute / 60) + _offset - Math.PI / 2));  sunPositionY=(float)(canvasHeight / 2 + (canvasWidth / 2 + 200.0f) * Math.sin((2 * Math.PI * time.minute / 60) + _offset - Math.PI / 2));}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  @Override protected final long free(){  return Memory.free();}  }
class C{  public void addElementToTargetProjectClassPath(String element) throws IllegalArgumentException {  checkIfValidClasspathEntry(element);  getTargetProjectClasspath();  if (targetClassPath == null || targetClassPath.isEmpty()) {    targetClassPath=element;  } else {    if (targetClassPath.contains(element)) {      return;    }    targetClassPath+=File.pathSeparator + element;    Properties.CP=targetClassPath;  }}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  JdbcStatement(JdbcConnection conn){  assert conn != null;  this.conn=conn;}  }
class C{  @Override protected URLConnection openConnection(URL u) throws IOException {  return new JarURLConnectionImpl(u);}  }
class C{  public boolean isHasDays(){  return hasDays;}  }
class C{  public boolean canUploadFile() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    return mApi.canUploadFile();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  private void buildSymetricNaturalJoinDefinition(List<Object> definitions,Domain left,Domain right,ExpressionAST leftAlias,ExpressionAST rightAlias){  try {    if (leftAlias == null)     leftAlias=createReferringExpression(left);    if (rightAlias == null)     rightAlias=createReferringExpression(right);    Table tleft=universe.getTable(left);    Table tright=universe.getTable(right);    Set<String> lnames=addColumnName(tleft);    Set<String> rnames=addColumnName(tright);    lnames.retainAll(rnames);    for (    String name : lnames) {      Column cleft=tleft.findColumnByName(name);      Column cright=tright.findColumnByName(name);      if (cleft != null && cright != null) {        IDomain dleft=cleft.getTypeDomain();        IDomain dright=cright.getTypeDomain();        if (dleft.isInstanceOf(dright) || dright.isInstanceOf(dleft)) {          ExpressionAST eleft=ExpressionMaker.COMPOSE(leftAlias,new ColumnReference(cleft));          ExpressionAST eright=ExpressionMaker.COMPOSE(rightAlias,new ColumnReference(cright));          ExpressionAST equal=ExpressionMaker.EQUAL(eleft,eright);          definitions.add(equal);        }      }    }  } catch (  ScopeException|ExecutionException e1) {  }}  }
class C{  @Override public String toString(){  return CacheControlHeaderParser.toString(this);}  }
class C{  public void testSingleMultiLineStringRoundTrip() throws SAXException, IOException, ParserConfigurationException {  LineStringGenerator pgc=new LineStringGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiLineString pt=(MultiLineString)pg.create();  checkRoundTrip(pt);}  }
class C{  private void processNew(Instruction s){  RegisterOperand result=New.getResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s,0);}  }
class C{  protected String doIt() throws Exception {  log.info("From Bank=" + p_From_C_BankAccount_ID + " - To Bank="+ p_To_C_BankAccount_ID+ " - C_CashBook_ID="+ p_C_CashBook_ID+ " - Amount="+ p_Amount+ " - Name="+ p_Name+ " - Description="+ p_Description+ " - Statement Date="+ p_StatementDate+ " - Date Account="+ p_DateAcct);  if (p_To_C_BankAccount_ID == 0 || p_From_C_BankAccount_ID == 0)   throw new IllegalArgumentException("Banks required");  if (p_Name == null || p_Name.length() == 0)   throw new IllegalArgumentException("Name required");  if (p_To_C_BankAccount_ID == p_From_C_BankAccount_ID)   throw new AdempiereUserError("Banks From and To must be different");  if (!isSameCurrency())   throw new AdempiereUserError("Banks and CashBook must have same currency");  if (p_Amount.compareTo(new BigDecimal(0)) == 0)   throw new AdempiereUserError("Amount required");  if (p_StatementDate == null)   p_StatementDate=Env.getContextAsDate(getCtx(),"#Date");  if (p_StatementDate == null)   p_StatementDate=new Timestamp(System.currentTimeMillis());  if (p_DateAcct == null)   p_DateAcct=p_StatementDate;  generateBankTransfer();  return "@Created@ = " + m_created;}  }
