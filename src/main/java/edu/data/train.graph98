class C{  private void stats(){  long nowMsSinceEpoch=now();  if (lastLogTimestampMsSinceEpoch < 0) {    lastLogTimestampMsSinceEpoch=nowMsSinceEpoch;    return;  }  long deltaMs=nowMsSinceEpoch - lastLogTimestampMsSinceEpoch;  if (deltaMs < LOG_PERIOD.getMillis()) {    return;  }  String messageSkew="unknown";  long minTimestamp=minReceivedTimestampMsSinceEpoch.get(nowMsSinceEpoch);  long maxTimestamp=maxReceivedTimestampMsSinceEpoch.get(nowMsSinceEpoch);  if (minTimestamp < Long.MAX_VALUE && maxTimestamp > Long.MIN_VALUE) {    messageSkew=(maxTimestamp - minTimestamp) + "ms";  }  String watermarkSkew="unknown";  long minWatermark=minWatermarkMsSinceEpoch.get(nowMsSinceEpoch);  long maxWatermark=maxWatermarkMsSinceEpoch.get(nowMsSinceEpoch);  if (minWatermark < Long.MAX_VALUE && maxWatermark > Long.MIN_VALUE) {    watermarkSkew=(maxWatermark - minWatermark) + "ms";  }  String oldestInFlight="no";  String oldestAckId=Iterables.getFirst(inFlight.keySet(),null);  if (oldestAckId != null) {    oldestInFlight=(nowMsSinceEpoch - inFlight.get(oldestAckId).requestTimeMsSinceEpoch) + "ms";  }  LOG.info("Pubsub {} has " + "{} received messages, " + "{} current unread messages, "+ "{} current unread bytes, "+ "{} current in-flight msgs, "+ "{} oldest in-flight, "+ "{} current in-flight checkpoints, "+ "{} max in-flight checkpoints, "+ "{}B/s recent read, "+ "{} recent received, "+ "{} recent extended, "+ "{} recent late extended, "+ "{} recent ACKed, "+ "{} recent NACKed, "+ "{} recent expired, "+ "{} recent message timestamp skew, "+ "{} recent watermark skew, "+ "{} recent late messages, "+ "{} last reported watermark",outer.outer.subscription,numReceived,notYetRead.size(),notYetReadBytes,inFlight.size(),oldestInFlight,numInFlightCheckpoints.get(),maxInFlightCheckpoints,numReadBytes.get(nowMsSinceEpoch) / (SAMPLE_PERIOD.getMillis() / 1000L),numReceivedRecently.get(nowMsSinceEpoch),numExtendedDeadlines.get(nowMsSinceEpoch),numLateDeadlines.get(nowMsSinceEpoch),numAcked.get(nowMsSinceEpoch),numNacked.get(nowMsSinceEpoch),numExpired.get(nowMsSinceEpoch),messageSkew,watermarkSkew,numLateMessages.get(nowMsSinceEpoch),new Instant(lastWatermarkMsSinceEpoch));  lastLogTimestampMsSinceEpoch=nowMsSinceEpoch;}  }
class C{  private Location(){}  }
class C{  public static CompletionTime spanToCompletionTime(SpanCache spanCache,Span span){  CompletionTime completionTime=new CompletionTime();  completionTime.setId(span.getId());  if (span.getTimestamp() != null) {    completionTime.setTimestamp(span.getTimestamp());  }  if (span.getDuration() != null) {    completionTime.setDuration(span.getDuration());  }  completionTime.setOperation(SpanDeriverUtil.deriveOperation(span));  completionTime.getProperties().add(new Property(Constants.PROP_FAULT,SpanDeriverUtil.deriveFault(span)));  completionTime.setHostAddress(span.ipv4());  if (span.service() != null) {    completionTime.getProperties().add(new Property(Constants.PROP_SERVICE_NAME,span.service()));  }  URL url=getUrl(spanCache,span);  if (url == null && span.serverSpan() && spanCache.get(null,SpanUniqueIdGenerator.getClientId(span.getId())) != null) {    return null;  }  if (url != null) {    String uri=span.clientSpan() ? EndpointUtil.encodeClientURI(url.getPath()) : url.getPath();    completionTime.setUri(uri);    completionTime.setEndpointType(url.getProtocol() == null ? null : url.getProtocol().toUpperCase());  } else {    completionTime.setEndpointType("Unknown");  }  completionTime.getProperties().addAll(span.binaryAnnotationMapping().getProperties());  return completionTime;}  }
class C{  public static boolean isInstance(final Object value,final Type type){  if (type == null) {    return false;  }  return value == null ? !(type instanceof Class<?>) || !((Class<?>)type).isPrimitive() : isAssignable(value.getClass(),type,null);}  }
class C{  static String makeSystemName(NamedBeanHandle<Turnout> lowTO,NamedBeanHandle<Turnout> highTO){  return ("IH:SE8c:\"" + lowTO.getName() + "\";\""+ highTO.getName()+ "\"").toUpperCase();}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static void restartActivity(@NonNull Activity activity){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    activity.recreate();  } else {    Intent intent=activity.getIntent();    activity.overridePendingTransition(0,0);    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);    activity.finish();    activity.overridePendingTransition(0,0);    activity.startActivity(intent);  }}  }
class C{  private byte[] replaceInTemplate(Utf8InfoReplacement... replacements){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  TreeSet<Utf8InfoReplacement> sorted=new TreeSet<>();  for (  Utf8InfoReplacement r : replacements) {    if (r.ref != null && r.replacement != null) {      sorted.add(r);    }  }  int from=0;  for (  Utf8InfoReplacement r : sorted) {    baos.write(templateBytes,from,r.ref.index - from);    from=r.ref.index + r.ref.length;    baos.write(r.replacement,0,r.replacement.length);  }  baos.write(templateBytes,from,templateBytes.length - from);  return baos.toByteArray();}  }
class C{  public Boolean isBaseDnForNestedGroupsEnabled(){  return baseDnForNestedGroupsEnabled;}  }
class C{  void injectStall(){  stateTransition(EnumSet.of(RPCState.SENT),RPCState.STALLED);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.442 -0500",hash_original_method="F8D5D10C5F2F8FB1DCC0A3044A3235C3",hash_generated_method="698BE5E5354DC14F82BB3A94A7C5289A") public int available() throws IOException {  return mSocket.available();}  }
class C{  public synchronized void disableAllObjectNames(){  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"disableAllObjectNames");  selectedNames=new Vector<ObjectName>();  deselectedNames=null;  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"disableAllObjectNames");  return;}  }
class C{  public SnackbarWrapper(Snackbar snackbar){  this.snackbar=snackbar;  messageView=(TextView)getView().findViewById(R.id.snackbar_text);  actionView=(Button)getView().findViewById(R.id.snackbar_action);  iconBuilder=SnackbarIconBuilder.builder(snackbar);  context=snackbar.getView().getContext();}  }
class C{  public TournamentSelection(int size,DominanceComparator comparator){  super();  this.size=size;  this.comparator=comparator;}  }
class C{  public void appendToNalUnit(byte[] data,int offset,int limit){  if (!isFilling) {    return;  }  int readLength=limit - offset;  if (buffer.length < bufferLength + readLength) {    buffer=Arrays.copyOf(buffer,(bufferLength + readLength) * 2);  }  System.arraycopy(data,offset,buffer,bufferLength,readLength);  bufferLength+=readLength;  scratch.reset(buffer,bufferLength);  if (scratch.bitsLeft() < 8) {    return;  }  scratch.skipBits(1);  int nalRefIdc=scratch.readBits(2);  scratch.skipBits(5);  if (!scratch.canReadExpGolombCodedNum()) {    return;  }  scratch.readUnsignedExpGolombCodedInt();  if (!scratch.canReadExpGolombCodedNum()) {    return;  }  int sliceType=scratch.readUnsignedExpGolombCodedInt();  if (!detectAccessUnits) {    isFilling=false;    sliceHeader.setSliceType(sliceType);    return;  }  if (!scratch.canReadExpGolombCodedNum()) {    return;  }  int picParameterSetId=scratch.readUnsignedExpGolombCodedInt();  if (pps.indexOfKey(picParameterSetId) < 0) {    isFilling=false;    return;  }  NalUnitUtil.PpsData ppsData=pps.get(picParameterSetId);  NalUnitUtil.SpsData spsData=sps.get(ppsData.seqParameterSetId);  if (spsData.separateColorPlaneFlag) {    if (scratch.bitsLeft() < 2) {      return;    }    scratch.skipBits(2);  }  if (scratch.bitsLeft() < spsData.frameNumLength) {    return;  }  boolean fieldPicFlag=false;  boolean bottomFieldFlagPresent=false;  boolean bottomFieldFlag=false;  int frameNum=scratch.readBits(spsData.frameNumLength);  if (!spsData.frameMbsOnlyFlag) {    if (scratch.bitsLeft() < 1) {      return;    }    fieldPicFlag=scratch.readBit();    if (fieldPicFlag) {      if (scratch.bitsLeft() < 1) {        return;      }      bottomFieldFlag=scratch.readBit();      bottomFieldFlagPresent=true;    }  }  boolean idrPicFlag=nalUnitType == NAL_UNIT_TYPE_IDR;  int idrPicId=0;  if (idrPicFlag) {    if (!scratch.canReadExpGolombCodedNum()) {      return;    }    idrPicId=scratch.readUnsignedExpGolombCodedInt();  }  int picOrderCntLsb=0;  int deltaPicOrderCntBottom=0;  int deltaPicOrderCnt0=0;  int deltaPicOrderCnt1=0;  if (spsData.picOrderCountType == 0) {    if (scratch.bitsLeft() < spsData.picOrderCntLsbLength) {      return;    }    picOrderCntLsb=scratch.readBits(spsData.picOrderCntLsbLength);    if (ppsData.bottomFieldPicOrderInFramePresentFlag && !fieldPicFlag) {      if (!scratch.canReadExpGolombCodedNum()) {        return;      }      deltaPicOrderCntBottom=scratch.readSignedExpGolombCodedInt();    }  } else   if (spsData.picOrderCountType == 1 && !spsData.deltaPicOrderAlwaysZeroFlag) {    if (!scratch.canReadExpGolombCodedNum()) {      return;    }    deltaPicOrderCnt0=scratch.readSignedExpGolombCodedInt();    if (ppsData.bottomFieldPicOrderInFramePresentFlag && !fieldPicFlag) {      if (!scratch.canReadExpGolombCodedNum()) {        return;      }      deltaPicOrderCnt1=scratch.readSignedExpGolombCodedInt();    }  }  sliceHeader.setAll(spsData,nalRefIdc,sliceType,frameNum,picParameterSetId,fieldPicFlag,bottomFieldFlagPresent,bottomFieldFlag,idrPicFlag,idrPicId,picOrderCntLsb,deltaPicOrderCntBottom,deltaPicOrderCnt0,deltaPicOrderCnt1);  isFilling=false;}  }
class C{  public EventReader provide(InputStream source) throws Exception {  return provide(new InputSource(source));}  }
class C{  public static int parseInt(byte[] b,int offset,int length,int base) throws NumberFormatException {  int value=0;  if (length < 0)   length=b.length - offset;  for (int i=0; i < length; i++) {    char c=(char)(0xff & b[offset + i]);    int digit=c - '0';    if (digit < 0 || digit >= base || digit >= 10) {      digit=10 + c - 'A';      if (digit < 10 || digit >= base)       digit=10 + c - 'a';    }    if (digit < 0 || digit >= base)     throw new NumberFormatException(new String(b,offset,length));    value=value * base + digit;  }  return value;}  }
class C{  public void writeToStream(DataOutputStream dos) throws IOException {  for (int c=0; c < 2; c++) {    ArrayList<TimeControlField> tc=(c == 0) ? tcW : tcB;    int nw=tc.size();    dos.writeInt(nw);    for (int i=0; i < nw; i++) {      TimeControlField tcf=tc.get(i);      dos.writeInt(tcf.timeControl);      dos.writeInt(tcf.movesPerSession);      dos.writeInt(tcf.increment);    }  }}  }
class C{  public void validate(){  if (mCardNumberRequired) {    mCardNumber.validate();  }  if (mExpirationRequired) {    mExpiration.validate();  }  if (mCvvRequired) {    mCvv.validate();  }  if (mPostalCodeRequired) {    mPostalCode.validate();  }  if (mMobileNumberRequired) {    mCountryCode.validate();    mMobileNumber.validate();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean dump_intra(){  return soot.PhaseOptions.getBoolean(options,"dump-intra");}  }
class C{  public static ServiceOperationException convertToApi(org.oscm.internal.types.exception.ServiceOperationException oldEx){  return convertExceptionToApi(oldEx,ServiceOperationException.class);}  }
class C{  public Builder field(GraphQLInputObjectField.Builder builder){  this.fields.add(builder.build());  return this;}  }
class C{  public static List<MethodNode> findMethodsWithName(Collection<MethodNode> methodNodes,String name){  Validate.notNull(methodNodes);  Validate.notNull(name);  Validate.noNullElements(methodNodes);  List<MethodNode> ret=new ArrayList<>();  for (  MethodNode methodNode : methodNodes) {    if (methodNode.name.equals(name)) {      ret.add(methodNode);    }  }  return ret;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.756 -0500",hash_original_method="0FD21978EF299D1119588B65FAE6C3BE",hash_generated_method="F9728CB00BE91D5A5FC0C8091EAAA7DA") private void ensureCapacity(int size){}  }
class C{  public final void printPopulation(final EvolutionState state,final int log,final int verbosity){  printPopulation(state,log);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(DialShape.CIRCLE)) {    return DialShape.CIRCLE;  } else   if (this.equals(DialShape.CHORD)) {    return DialShape.CHORD;  } else   if (this.equals(DialShape.PIE)) {    return DialShape.PIE;  }  return null;}  }
class C{  public double globalClusteringCoefficient(Graph graph){  int n_tripples=0;  int n_triangles=0;  for (  Vertex v : graph.getVertices()) {    List<? extends Vertex> n1s=v.getNeighbours();    for (int i=0; i < n1s.size(); i++) {      List<? extends Vertex> n2s=n1s.get(i).getNeighbours();      for (int k=0; k < n2s.size(); k++) {        if (!n2s.get(k).equals(v)) {          n_tripples++;          if (n2s.get(k).getNeighbours().contains(v))           n_triangles++;        }      }    }  }  return n_triangles / (double)n_tripples;}  }
class C{  public void increment(int index,byte value){  data[index]+=value;}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private Map<String,RamlResource> clean(Map<String,RamlResource> publishedResources){  Map<String,RamlResource> cleanedSet=new HashMap<>();  if (publishedResources == null) {    return cleanedSet;  }  for (  Entry<String,RamlResource> resource : publishedResources.entrySet()) {    cleanedSet.put(clean(resource.getKey()),resource.getValue());  }  return cleanedSet;}  }
class C{  public void addCustomTickLabel(final String TICK_LABEL){  if (null == TICK_LABEL)   return;  if (!customTickLabels.contains(TICK_LABEL))   customTickLabels.add(TICK_LABEL);  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  protected static String pre(String str){  return prefix + str;}  }
class C{  public static final void canEncodeImage(ImageWriter writer,ImageTypeSpecifier type) throws IIOException {  ImageWriterSpi spi=writer.getOriginatingProvider();  if (type != null && spi != null && !spi.canEncodeImage(type)) {    throw new IIOException(I18N.getString("ImageUtil2") + " " + writer.getClass().getName());  }}  }
class C{  private void updatePackageSummary(){  new UpdatePackageSummaryTask().execute();}  }
class C{  public static File createTempFile(final String prefix,final String suffix){  File tempFile;  try {    tempFile=File.createTempFile(prefix,suffix);  } catch (  IOException ioException) {    throw new IllegalStateException(ioException);  }  return tempFile;}  }
class C{  public boolean isSet(){  return mParameter.size() > 0;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private void processVolumeSampleList(List<Sample> sampleList,Map<String,Object> keyMap,Map<String,String> volFileMap,List<Stat> statsList){  Iterator<Sample> itemItr=sampleList.iterator();  while (itemItr.hasNext()) {    Sample volSample=itemItr.next();    List<Item> volItems=volSample.getItem();    Iterator<Item> volItemsItr=volItems.iterator();    while (volItemsItr.hasNext()) {      Item volItem=volItemsItr.next();      if (volFileMap.containsKey(volItem.getVolume())) {        String fileSystem=volFileMap.get(volItem.getVolume());        if (null != fileSystem) {          injectBWInOut(fileSystem,keyMap,volItem,statsList);        }      }    }  }}  }
class C{  public void makeNothingCurrent(){  if (!EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  public static void main(String[] args){  if (args.length != 2) {    System.out.println("Usage: java Exercise_13_04 month year");    System.exit(1);  }  Calendar calendar=new GregorianCalendar(Integer.valueOf(args[1]),Integer.valueOf(args[0]) - 1,1);  printHeader(calendar);  for (int i=1; i < calendar.get(Calendar.DAY_OF_WEEK); i++)   System.out.print("    ");  while (calendar.get(Calendar.DATE) < calendar.getActualMaximum(Calendar.DATE)) {    if (calendar.get(Calendar.DAY_OF_WEEK) == 7)     System.out.printf("%4d\n",calendar.get(Calendar.DATE)); else     System.out.printf("%4d",calendar.get(Calendar.DATE));    calendar.add(Calendar.DATE,1);  }  System.out.printf("%4d\n",calendar.get(Calendar.DATE));}  }
class C{  public OpenSecureChannelResponse OpenSecureChannel(OpenSecureChannelRequest req) throws ServiceFaultException, ServiceResultException {  return (OpenSecureChannelResponse)channel.serviceRequest(req);}  }
class C{  private static void addAnalysesAndResults(FunctionValueMap functionValueMap,SolrDocument doc){  int counter=0;  for (int transformation=0; transformation < functionValueMap.sizeOfTransformations(); transformation++) {    ChronixTransformation chronixTransformation=functionValueMap.getTransformation(transformation);    doc.put(counter + "_" + ChronixQueryParams.FUNCTION+ "_"+ chronixTransformation.getType().name().toLowerCase(),chronixTransformation.getArguments());    counter++;  }  for (int aggregation=0; aggregation < functionValueMap.sizeOfAggregations(); aggregation++) {    ChronixAggregation chronixAggregation=functionValueMap.getAggregation(aggregation);    double value=functionValueMap.getAggregationValue(aggregation);    doc.put(counter + "_" + ChronixQueryParams.FUNCTION+ "_"+ chronixAggregation.getType().name().toLowerCase(),value);    if (chronixAggregation.getArguments().length != 0) {      doc.put(counter + "_" + ChronixQueryParams.FUNCTION_ARGUMENTS+ "_"+ chronixAggregation.getType().name().toLowerCase(),chronixAggregation.getArguments());    }    counter++;  }  for (int analysis=0; analysis < functionValueMap.sizeOfAnalyses(); analysis++) {    ChronixAnalysis chronixAnalysis=functionValueMap.getAnalysis(analysis);    boolean value=functionValueMap.getAnalysisValue(analysis);    String identifier=functionValueMap.getAnalysisIdentifier(analysis);    String nameWithLeadingUnderscore;    if (Strings.isNullOrEmpty(identifier)) {      nameWithLeadingUnderscore="_" + chronixAnalysis.getType().name().toLowerCase();    } else {      nameWithLeadingUnderscore="_" + chronixAnalysis.getType().name().toLowerCase() + "_"+ identifier;    }    doc.put(counter + "_" + ChronixQueryParams.FUNCTION+ nameWithLeadingUnderscore,value);    if (chronixAnalysis.getArguments().length != 0) {      doc.put(counter + "_" + ChronixQueryParams.FUNCTION_ARGUMENTS+ nameWithLeadingUnderscore,chronixAnalysis.getArguments());    }    counter++;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.585 -0500",hash_original_method="59A4CBE51FAECBB8E991947ECCA70099",hash_generated_method="D12E2A5527E75FF44873F1FD8DA7F714") public static final int[] readThisIntArrayXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  int num;  try {    num=Integer.parseInt(parser.getAttributeValue(null,"num"));  } catch (  NullPointerException e) {    throw new XmlPullParserException("Need num attribute in byte-array");  }catch (  NumberFormatException e) {    throw new XmlPullParserException("Not a number in num attribute in byte-array");  }  int[] array=new int[num];  int i=0;  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      if (parser.getName().equals("item")) {        try {          array[i]=Integer.parseInt(parser.getAttributeValue(null,"value"));        } catch (        NullPointerException e) {          throw new XmlPullParserException("Need value attribute in item");        }catch (        NumberFormatException e) {          throw new XmlPullParserException("Not a number in value attribute in item");        }      } else {        throw new XmlPullParserException("Expected item tag at: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return array;      } else       if (parser.getName().equals("item")) {        i++;      } else {        throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());      }    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  if (src == null) {    throw new NullPointerException("src image is null");  }  if (dst == null) {    dst=createCompatibleDestRaster(src);  }  if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  }  if (src.getNumBands() != dst.getNumBands()) {    throw new IllegalArgumentException("Number of src bands (" + src.getNumBands() + ") does not match number of "+ " dst bands ("+ dst.getNumBands()+ ")");  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to transform src image");  }  return dst;}  }
class C{  public boolean contains(Object o){  return indexOf(o) >= 0;}  }
class C{  public BaseEventFeed(Class<E> entryClass,BaseFeed<?,?> sourceFeed){  super(entryClass,sourceFeed);  getCategories().add(EventEntry.EVENT_CATEGORY);}  }
class C{  protected void showFragment(CustomFragment fragment){  AppLog.v(this,"showFragment()");  CustomFragment currentTop=(CustomFragment)fm.findFragmentById(R.id.fragment_container);  if (currentTop == null || !currentTop.getFragmentTag().equals(fragment.getFragmentTag())) {    AppLog.v(this,"Fragment was not visible. Replace it.");    fm.beginTransaction().addToBackStack(null).replace(R.id.fragment_container,fragment,fragment.getFragmentTag()).commit();    invalidateOptionsMenu();  } else {    AppLog.v(this,"Fragment was already visible. Do nothing.");  }}  }
class C{  public <T>SimpleModule addAbstractTypeMapping(Class<T> superType,Class<? extends T> subType){  if (_abstractTypes == null) {    _abstractTypes=new SimpleAbstractTypeResolver();  }  _abstractTypes=_abstractTypes.addMapping(superType,subType);  return this;}  }
class C{  public Enumeration<Permission> elements(){  List<Permission> results=new ArrayList<>();synchronized (this) {    for (    List<UnresolvedPermission> l : perms.values()) {synchronized (l) {        results.addAll(l);      }    }  }  return Collections.enumeration(results);}  }
class C{  public HTMLEntities(){  initializeEntitiesTables();}  }
class C{  private int sizeStringToWidth(String string,int width){  int stringLength=string.length();  int k=0;  int l=0;  int i1=-1;  for (boolean flag=false; l < stringLength; ++l) {    char c0=string.charAt(l);switch (c0) {case 10:      --l;    break;case 167:  if (l < stringLength - 1) {    ++l;    char c1=string.charAt(l);    if (c1 != 108 && c1 != 76) {      if (c1 == 114 || c1 == 82) {        flag=false;      }    } else {      flag=true;    }  }break;case 32:i1=l;default :k+=this.getCharWidth(c0);if (flag) {++k;}}if (c0 == 10) {++l;i1=l;break;}if (k > width) {break;}}return l != stringLength && i1 != -1 && i1 < l ? i1 : l;}  }
class C{  public void toXML(Network network,File file){  Writer writer=null;  try {    writer=new FileWriter(file);    writeXML(network,writer);    writer.flush();  } catch (  Exception exception) {    throw new BotException("IO error while writing a network to xml.",exception);  } finally {    try {      writer.close();    } catch (    Exception ignore) {    }  }}  }
class C{  public static void revealInEditor(IProject project,JsonElement jsonElement,boolean activate){  String className=Utils.getSourceClass(jsonElement);  int lineNumber=Utils.getSourceLine(jsonElement);  if (className != null && lineNumber >= 0)   DroidsafePluginUtilities.revealInEditor(project,className,lineNumber,activate);}  }
class C{  public GeoTimeSerie decode(TYPE type){  GeoTimeSerie gts=new GeoTimeSerie(this.count > 0 ? (int)Math.min(Integer.MAX_VALUE,this.count) : Math.max(16,this.buffer.remaining() / 10));  if (null != type) {    gts.setType(type);  }  gts.setMetadata(this.getMetadata());  while (next()) {    GTSHelper.setValue(gts,getTimestamp(),getLocation(),getElevation(),getValue(),false);  }  return gts;}  }
class C{  @Override public void onInsertComplete(int taskId,Object cookie,long insertRowId){}  }
class C{  protected boolean beforeSave(boolean newRecord){  return true;}  }
class C{  protected void replaceShorthandProcessor(final List<String> args){  for (int i=0; i < args.size(); i++) {    final int nextIndex=i + 1;    if (args.size() > nextIndex) {      if (args.get(i).equals("-processor")) {        final String replacement=unshorthandProcessorNames(args.get(nextIndex),getAllCheckerClassNames(),false);        args.remove(nextIndex);        args.add(nextIndex,replacement);      }    }  }}  }
class C{  public void loadDefaults(){  for (Iterator i=(new SolverParameterDefDAO()).findAll().iterator(); i.hasNext(); ) {    SolverParameterDef def=(SolverParameterDef)i.next();    if (!def.isVisible().booleanValue())     continue;    params.put(def.getUniqueId(),def.getDefault());    useDefaults.put(def.getUniqueId(),Boolean.TRUE);  }}  }
class C{  private static int CallStaticObjectMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticObjectMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,null);    return env.pushJNIRef(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public IndicesShardStoresRequest(String... indices){  this.indices=indices;}  }
class C{  private void initComponents(){  toolButtonGroup=new javax.swing.ButtonGroup();}  }
class C{  public boolean isIdleExpire(){  if (!_lifecycle.isActive()) {    return true;  }  long now=getCurrentTimeActual();  long idleExpire=_threadIdleExpireTime.get();  int idleCount=_idleCount.get();  if (_idleMin < idleCount) {    long nextIdleExpire=now + _idleTimeout;    if (_idleMax < idleCount && _idleMin < _idleMax) {      _threadIdleExpireTime.compareAndSet(idleExpire,nextIdleExpire);      return true;    } else     if (idleExpire < now && _threadIdleExpireTime.compareAndSet(idleExpire,nextIdleExpire)) {      return true;    }  }  return false;}  }
class C{  private void testRepeatVarsInit(final RepeatVars repeatVars){  try {    Assert.assertEquals(repeatVars.getStartDateRepeat(),0);    Assert.assertEquals(repeatVars.getRepeatWindows(),0);    Assert.assertEquals(repeatVars.getRepeatPacketSize().intValue(),0);    Assert.assertEquals(repeatVars.getRepeatTempPckSize(),0);    Assert.assertNotNull(repeatVars.getRepeatTransferRateList());    Assert.assertEquals(repeatVars.getRepeatTransferRateList().size(),0);    Assert.assertEquals(repeatVars.isRepeatFinished(),false);  } catch (  IllegalAccessException e) {    Assert.fail(e.getMessage());  }}  }
class C{  public static void printBackToState(final TLCStateInfo currentStateInfo,final long stateNum){  if (TLCGlobals.tool) {    MP.printState(EC.TLC_BACK_TO_STATE,new String[]{"" + stateNum,currentStateInfo.info.toString()},(TLCState)null,-1);  } else {    MP.printMessage(EC.TLC_BACK_TO_STATE,new String[]{"" + stateNum,currentStateInfo.info.toString()});  }}  }
class C{  private void addNewPerspectiveAction(){  Action newPerspectiveAction=new NewPerspectiveAction(RapidMinerGUI.getMainFrame());  newPerspectiveAction.putValue(Action.LARGE_ICON_KEY,null);  newPerspectiveAction.putValue(Action.SMALL_ICON,null);  JMenuItem item=new JMenuItem(newPerspectiveAction);  item.setPreferredSize(new Dimension(item.getPreferredSize().width + 30,item.getPreferredSize().height));  popupMenu.addSeparator();  popupMenu.add(item);}  }
class C{  protected void save(){  RemoteRepository repository=model.getSource();  if (repository == null) {    ConfigurationManager.getInstance().replaceConfigurables(model.getConfigurables(),null);    try {      ConfigurationManager.getInstance().saveConfiguration();    } catch (    ConfigurationException e) {      LogService.getRoot().log(Level.SEVERE,"com.rapidminer.tools.config.gui.ConfigurableController.error_on_save",e);      view.displaySaveErrorDialog();    }  } else {    if (repository.isConnected()) {      try {        repository.resetContentManager();      } catch (      RepositoryException|PasswordInputCanceledException e) {        try {          model.resetConfigurables();          model.resetConnection();        } catch (        RepositoryException e1) {        }        view.collapseRemoteTaskPane(repository.getName());        view.displayConnectionErrorDialog(repository.getName(),repository.getBaseUrl().toString());        return;      }      if (model.isEditingPossible()) {        if (model.hasAdminRights()) {          for (          String typeId : ConfigurationManager.getInstance().getAllTypeIds()) {            HttpURLConnection conn=null;            try {              conn=repository.getHTTPConnection(ConfigurationManager.RM_SERVER_CONFIGURATION_URL_PREFIX + typeId,true);              conn.setRequestMethod("POST");              conn.setDoOutput(true);              conn.setDoInput(true);              conn.setUseCaches(false);              conn.setAllowUserInteraction(false);              conn.setRequestProperty("Content-Type","application/xml");              Document xml=ConfigurationManager.getInstance().getConfigurablesAsXML(typeId,model.getConfigurables(),repository.getName());              XMLTools.stream(xml,conn.getOutputStream(),null);              conn.disconnect();              if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {                if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {                  LogService.getRoot().log(Level.INFO,typeId + ": " + conn.getResponseMessage());                } else                 if (conn.getResponseCode() == HttpURLConnection.HTTP_BAD_METHOD) {                  LogService.log(LogService.getRoot(),Level.WARNING,null,"com.rapidminer.tools.config.gui.ConfigurableController.uploading_configuration_error_server_not_up_to_date",typeId,repository.getName(),conn.getResponseMessage());                  view.displaySaveUploadErrorDialogServerNotUpToDate(repository.getName());                  revertChanges();                  break;                } else {                  LogService.log(LogService.getRoot(),Level.WARNING,new Exception(conn.getResponseMessage()),"com.rapidminer.tools.config.gui.ConfigurableController.uploading_configuration_error",typeId,repository.getName(),conn.getResponseMessage());                  view.displaySaveUploadErrorDialog(typeId,repository.getName(),repository.getBaseUrl().toString());                  revertChanges();                  break;                }              } else {                Document newIdsDoc=XMLTools.parse(conn.getInputStream());                List<Pair<Integer,String>> newIds=ConfigurationManager.newIdsFromXML(newIdsDoc);                for (                Configurable config : model.getConfigurables()) {                  if (config.getTypeId().equals(typeId)) {                    if (config.getId() == -1) {                      for (                      Pair<Integer,String> pair : newIds) {                        if (pair.getSecond().equals(config.getName())) {                          config.setId(pair.getFirst());                        }                      }                    }                  }                }                ConfigurationManager.getInstance().replaceConfigurables(model.getConfigurables(),repository.getName());                LogService.getRoot().log(Level.INFO,"com.rapidminer.tools.config.gui.ConfigurableController.uploading_configuration",typeId);              }            } catch (            IOException|RepositoryException|ConfigurationException|SAXException e) {              revertChanges();              LogService.log(LogService.getRoot(),Level.WARNING,e,"com.rapidminer.tools.config.gui.ConfigurableController.uploading_configuration_error",typeId,repository.getName(),e.toString());              view.displaySaveUploadErrorDialog(typeId,repository.getName(),repository.getBaseUrl().toString());              break;            }catch (            XMLException e) {              revertChanges();              LogService.log(LogService.getRoot(),Level.WARNING,e,"com.rapidminer.tools.config.gui.ConfigurableController.uploading_configuration_error",typeId,repository.getName(),e.toString());              view.displaySaveUploadErrorDialog(typeId,repository.getName(),repository.getBaseUrl().toString());              break;            } finally {              if (conn != null) {                conn.disconnect();              }            }          }        }      }    }  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(REL);  builder.addAttribute(HREF);  builder.addAttribute(READ_ONLY);  builder.addElement(Entry.KEY);}  }
class C{  public void remove(JTaskPaneGroup taskpaneGroup){  unregister(taskpaneGroup);  if (selection == taskpaneGroup) {    selection=null;  }}  }
class C{  private State applyPatch(State current,State patch){  ServiceUtils.logInfo(this,"Moving to stage %s",patch.taskState.stage);  if (patch.nextPageLink == null) {    current.nextPageLink=null;  }  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public void testRequest3(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  s1.sn.request(-1L);  p.submit(1);  p.submit(2);  p.close();  s2.awaitComplete();  assertEquals(2,s2.nexts);  assertEquals(1,s2.completes);  s1.awaitError();  assertEquals(1,s1.errors);  assertTrue(s1.lastError instanceof IllegalArgumentException);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Map<Integer,TestLogyyyymm> selectToMap(){  List<TestLogyyyymm> list=SELECT().selectByExample(this);  Map<Integer,TestLogyyyymm> m=new LinkedHashMap<Integer,TestLogyyyymm>();  for (  TestLogyyyymm x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  public void println(){  javaLine++;  writer.println("");}  }
class C{  public Builder withLogTerm(long term){  request.logTerm=Assert.argNot(term,term < 0,"log term must not be negative");  return this;}  }
class C{  public boolean isInsert(){  return insert;}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void shuffle(ec.util.MersenneTwisterFast random){  int[] objs=this.objs;  int numObjs=this.numObjs;  int obj;  int rand;  for (int x=numObjs - 1; x >= 1; x--) {    rand=random.nextInt(x + 1);    obj=objs[x];    objs[x]=objs[rand];    objs[rand]=obj;  }}  }
class C{  public void addElement(Element e){  items.addElement(e);}  }
class C{  protected void doResumeUpdates(){  Calendar cal=Calendar.getInstance(Locale.getDefault());  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;  mShowWeekNumber=false;  updateHeader();  goTo(mSelectedDay.toMillis(true),false,false,false);  mAdapter.setSelectedDay(mSelectedDay);  mTodayUpdater.run();}  }
class C{  public DataPanel(String filename,AbstractFileLoader... loaders){  this();  loadFile(filename,loaders);}  }
class C{  private Object readResolve(){  return ObjectUtils.NULL;}  }
class C{  protected static float[] convertBaseFrenquency(Element e,BridgeContext ctx){  String s=e.getAttributeNS(null,SVG_BASE_FREQUENCY_ATTRIBUTE);  if (s.length() == 0) {    return new float[]{0.001f,0.001f};  }  float[] v=new float[2];  StringTokenizer tokens=new StringTokenizer(s," ,");  try {    v[0]=SVGUtilities.convertSVGNumber(tokens.nextToken());    if (tokens.hasMoreTokens()) {      v[1]=SVGUtilities.convertSVGNumber(tokens.nextToken());    } else {      v[1]=v[0];    }    if (tokens.hasMoreTokens()) {      throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_BASE_FREQUENCY_ATTRIBUTE,s});    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,e,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_BASE_FREQUENCY_ATTRIBUTE,s});  }  if (v[0] < 0 || v[1] < 0) {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_BASE_FREQUENCY_ATTRIBUTE,s});  }  return v;}  }
class C{  public static float ulp(float x){  if (Float.isInfinite(x)) {    return Float.POSITIVE_INFINITY;  }  return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));}  }
class C{  public static SubsystemSuspensionLevels findBySubsystem(EntityManager em,SubSystem subSystem){  SystemAssert.requireArgument(em != null,"Entity manager can not be null.");  SystemAssert.requireArgument(subSystem != null,"Subsystem cannot be null.");  TypedQuery<SubsystemSuspensionLevels> query=em.createNamedQuery("SubsystemSuspensionLevels.findBySubsystem",SubsystemSuspensionLevels.class);  try {    query.setParameter("subSystem",subSystem);    return query.getSingleResult();  } catch (  NoResultException ex) {    Map<Integer,Long> levels=new HashMap<>();    levels.put(1,60 * 60 * 1000L);    levels.put(2,10 * 60 * 60* 1000L);    levels.put(3,24 * 60 * 60* 1000L);    levels.put(4,3 * 24 * 60* 60* 1000L);    levels.put(5,10 * 24 * 60* 60* 1000L);    SubsystemSuspensionLevels suspensionLevels=new SubsystemSuspensionLevels(null,subSystem,levels);    return em.merge(suspensionLevels);  }}  }
class C{  public ConnectionRegressionTest(String name){  super(name);}  }
class C{  private static InetAddress maskIP(byte[] ip,byte[] mask){  if (ip.length != mask.length) {    throw new IllegalArgumentException("IP address and mask must be of the same length.");  }  if (ip.length != 16) {    throw new IllegalArgumentException("IP address and mask length must be equal to 16.");  }  try {    byte[] maskedIp=new byte[ip.length];    for (int i=0; i < ip.length; i++) {      maskedIp[i]=(byte)(ip[i] & mask[i]);    }    return getByAddress(maskedIp);  } catch (  UnknownHostException e) {    return null;  }}  }
class C{  public void incDeltaFullMessagesSent(){  this._stats.incInt(_deltaFullMessagesSentId,1);}  }
class C{  public static String describeModules(String modules,boolean inFull){  final StringBuffer sb=new StringBuffer(1000);  describeModules_internal(sb,Arrays.asList(modules.split("\\s")),inFull);  return sb.toString();}  }
class C{  public void remove(IoServiceListener listener){  if (listener != null) {    listeners.remove(listener);  }}  }
class C{  public static int parseInt(String string) throws NumberFormatException {  return parseInt(string,10);}  }
class C{  public static int ENAVAIL(){  return 119;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.548 -0400",hash_original_method="A2F044E1F91B3619E7A224DE41EBBC75",hash_generated_method="A078683376BE211FE938BE2561E5A6DF") public Tailer(File file,TailerListener listener){  this(file,listener,DEFAULT_DELAY_MILLIS);}  }
class C{  private static JettyResponseListener checkResponseCode(final String url,final JettyResponseListener response) throws IOException {  final int rc=response.getStatus();  if (rc < 200 || rc >= 300) {    throw new HttpException(rc,"StatusCode=" + rc + ", StatusLine="+ response.getReason()+ ", headers="+ response.getHeaders().toString()+ ", ResponseBody="+ response.getResponseBody());  }  if (log.isDebugEnabled()) {    log.debug("*** Response ***");    log.debug("Status Line: " + response.getReason());  }  return response;}  }
class C{  void heapify(){  for (int i=size / 2; i >= 1; i--)   fixDown(i);}  }
class C{  @SuppressFBWarnings(value="RR_NOT_CHECKED",justification="this read will never return less than the requested length") @Override public void read(ArrayDataInput str) throws FitsException {  if (this.heapSize > 0) {    allocate();    try {      if (str.read(this.heap,0,this.heapSize) < this.heapSize) {        throw new FitsException("Error reading heap, no more data");      }    } catch (    IOException e) {      throw new FitsException("Error reading heap " + e.getMessage(),e);    }  }  this.bstr=null;}  }
class C{  @SuppressWarnings("unchecked") @NotNull public ExternalSystemNode<ExternalProjectPojo> ensureProjectNodeExists(@NotNull ExternalProjectPojo project){  ExternalSystemNode<?> root=getRoot();  for (int i=root.getChildCount() - 1; i >= 0; i--) {    ExternalSystemNode<?> child=root.getChildAt(i);    ExternalSystemNodeDescriptor<?> descriptor=child.getDescriptor();    Object element=descriptor.getElement();    if (element instanceof ExternalProjectPojo) {      ExternalProjectPojo pojo=(ExternalProjectPojo)element;      if (pojo.getPath().equals(project.getPath())) {        if (!pojo.getName().equals(project.getName())) {          pojo.setName(project.getName());          descriptor.setName(project.getName());          nodeChanged(child);        }        return (ExternalSystemNode<ExternalProjectPojo>)child;      }    }  }  ExternalProjectPojo element=new ExternalProjectPojo(project.getName(),project.getPath());  ExternalSystemNodeDescriptor<ExternalProjectPojo> descriptor=descriptor(element,myUiAware.getProjectIcon());  ExternalSystemNode<ExternalProjectPojo> result=new ExternalSystemNode<ExternalProjectPojo>(descriptor);  insertNodeInto(result,root);  return result;}  }
class C{  public static String hash(LatLng point){  BitSet lat=doubleToBits(point.getLatitude(),MAX_LAT);  BitSet lng=doubleToBits(point.getLongitude(),MAX_LNG);  return bitsToHash(interleave(lng,lat));}  }
class C{  public MLCBMaDTest(String name){  super(name);}  }
class C{  public static boolean checkGooglePlayServicesAndShowAlertIfNeeded(@NonNull Activity activity){  int googlePlayServicesStatus=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(activity);  if (googlePlayServicesStatus == ConnectionResult.SUCCESS) {    return true;  }  if (GoogleApiAvailability.getInstance().isUserResolvableError(googlePlayServicesStatus)) {    GoogleApiAvailability.getInstance().getErrorDialog(activity,googlePlayServicesStatus,0).show();  }  return false;}  }
class C{  protected boolean isSupportedContentType(final String contentType){  if (contentType != null) {    for (    final String item : this.legalContentTypes) {      if (item.equals(contentType)) {        return true;      }    }  }  return false;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(getInterfaceName());  dest.writeInt(mLinkAddresses.size());  for (  LinkAddress linkAddress : mLinkAddresses) {    dest.writeParcelable(linkAddress,flags);  }  dest.writeInt(mDnses.size());  for (  InetAddress d : mDnses) {    dest.writeByteArray(d.getAddress());  }  dest.writeString(mDomains);  dest.writeInt(mRoutes.size());  for (  RouteInfo route : mRoutes) {    dest.writeParcelable(route,flags);  }  if (mHttpProxy != null) {    dest.writeByte((byte)1);    dest.writeParcelable(mHttpProxy,flags);  } else {    dest.writeByte((byte)0);  }  ArrayList<LinkProperties> stackedLinks=new ArrayList(mStackedLinks.values());  dest.writeList(stackedLinks);}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  public String validateConfiguredParameters(UpgradeWizardModel model){  JsonObject jsonObject=getJsonResponse(model);  if (!hasValidationError(jsonObject,model)) {    model.setParameterValidationResult(new ParameterValidationResult(false,null));    return null;  } else {    return validateParametersError(model,jsonObject);  }}  }
class C{  public BeanContextServicesSupport(){  super();}  }
class C{  public Socket(){  setImpl();}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option(metaOption(),"M",0,"-M <scheme specification>"));  newVector.addElement(new Option("\tSets the number of cross-validation folds.","X",1,"-X <number of folds>"));  newVector.addAll(Collections.list(super.listOptions()));  if (getMetaClassifier() instanceof OptionHandler) {    newVector.addElement(new Option("","",0,"\nOptions specific to meta classifier " + getMetaClassifier().getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)getMetaClassifier()).listOptions()));  }  return newVector.elements();}  }
class C{  public void pop() throws java.lang.Exception {  if (vstack.empty())   throw new Exception("Internal parser error: pop from empty virtual stack");  vstack.pop();  if (vstack.empty())   get_from_real();}  }
class C{  public final void writeBytes(String str) throws IOException {  byte[] bytes=new byte[str.length()];  for (int index=0; index < str.length(); index++) {    bytes[index]=(byte)(str.charAt(index) & 0xFF);  }  write(bytes);}  }
class C{  public OMAction(int value){  this.value=value;}  }
class C{  public DoubleVector crossProduct(DoubleVector v){  double px=y * v.z - z * v.y;  double py=z * v.x - x * v.z;  double pz=x * v.y - y * v.x;  return new DoubleVector(px,py,pz);}  }
class C{  private Path path(String path){  return Paths.get(workDir + path);}  }
class C{  public static boolean isUrlValid(String url){  return (!url.trim().contains(" "));}  }
class C{  public IfStatement newIfStatement(){  return new IfStatement(this);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String pathInfo=request.getPathInfo();  if (pathInfo == null) {    printError(response,"Unsupported operation");    return;  }  doGetData(request,response);}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  @Override public void modifyVariableId(String oldVarId,String newVarId){  if (this.variable.equals(oldVarId)) {    this.variable=newVarId;  }}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((PLAHeaderViewListAdapter)mAdapter).removeHeader(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static void assertEqual(short expected,short actual){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected == actual);}  }
class C{  void sendBit5Baud(boolean bitValue) throws IOException {  SerialExt.setBreak(bitValue ? 0 : 1);  try {    Thread.sleep(200);  } catch (  InterruptedException e) {    log.error(null,e);  }}  }
class C{  public boolean addLandmark(int x,int y){  return mLandmarkPoints.add(new Point(x,y));}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public static boolean operate(PageContext pc,double scope,String[] varNames){  return _operate(pc,scope,KeyImpl.toKeyArray(varNames),0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RequestLine parseRequestLine(final CharArrayBuffer buffer,final ParserCursor cursor) throws ParseException {  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  if (cursor == null) {    throw new IllegalArgumentException("Parser cursor may not be null");  }  int indexFrom=cursor.getPos();  int indexTo=cursor.getUpperBound();  try {    skipWhitespace(buffer,cursor);    int i=cursor.getPos();    int blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String method=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    skipWhitespace(buffer,cursor);    i=cursor.getPos();    blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String uri=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    ProtocolVersion ver=parseProtocolVersion(buffer,cursor);    skipWhitespace(buffer,cursor);    if (!cursor.atEnd()) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    return createRequestLine(method,uri,ver);  } catch (  IndexOutOfBoundsException e) {    throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));  }}  }
class C{  public ShuffleView(ShuffleViewUser user){  setUser(user);}  }
class C{  public int currentSurface(MavDemo mavdemo){  for (int i=0; i < mavdemo.region.length; i++)   if (mavdemo.region[i].area.contains(x - mavdemo.region[i].originx,y - mavdemo.region[i].originy))   return mavdemo.region[i].surface;  return 0;}  }
class C{  public static String printTimestamp(Timestamp timestamp){  if (timestamp == null) {    return "";  }  return Helper.printTimestamp(timestamp);}  }
class C{  public int log2Chunks(final int log2chunks){  this.chunks=1 << log2chunks;  diskChunkStep=(int)Math.max(DISK_CHUNKS / chunks,1);  virtualDiskChunks=DISK_CHUNKS / diskChunkStep;  if (DEBUG) {    System.err.print("Chunk sizes: ");    double avg=filteredSize / (double)DISK_CHUNKS;    double var=0;    for (int i=0; i < DISK_CHUNKS; i++) {      System.err.print(i + ":" + count[i]+ " ");      var+=(count[i] - avg) * (count[i] - avg);    }    System.err.println();    System.err.println("Average: " + avg);    System.err.println("Variance: " + var / filteredSize);  }  chunkShift=Long.SIZE - log2chunks;  LOGGER.debug("Number of chunks: " + chunks);  LOGGER.debug("Number of disk chunks: " + DISK_CHUNKS);  LOGGER.debug("Number of virtual disk chunks: " + virtualDiskChunks);  return chunkShift;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=WebDoc.createPopup("Report - Post - Not Implemented");  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public Progress(String title,ConnectionRequest request){  this(title,request,false);}  }
class C{  public boolean isClearHistory(){  return clearHistory;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addImage(Image image){  addProperty(image);}  }
class C{  public Buzzword_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_tags=jcas.getRequiredFeatureDE(casType,"tags","uima.cas.StringArray",featOkTst);  casFeatCode_tags=(null == casFeat_tags) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_tags).getCode();}  }
class C{  public Message addContent(String name,String type,String value){  content.put(name,new Content(type,value));  return this;}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  void initializeImpl(){  setBackground(target.getBackground());  setForeground(target.getForeground());  setFont(target.getFont());  setBounds(target.getBounds());  setEnabled(target.isEnabled());}  }
class C{  public void testLast(){  m_Filter=getFilter((m_Instances.numAttributes() - 1) + "-" + m_Instances.numAttributes());  testBuffered();  performTest();}  }
class C{  public synchronized int sendMessageWithClient(Object newMessage){  try {    sendMessageWithClientWithSyncObject(newMessage,true);  } catch (  Exception err) {    log.error("[sendMessageWithClient] ",err);    return -1;  }  return 1;}  }
class C{  public QualifiedType newQualifiedType(Type qualifier,SimpleName name){  QualifiedType result=new QualifiedType(this);  result.setQualifier(qualifier);  result.setName(name);  return result;}  }
class C{  public static void multCol(Matrix A,int j,int start,int to,double c){  for (int i=start; i < to; i++)   A.set(i,j,A.get(i,j) * c);}  }
class C{  public String toString(){  return m_currentPattern;}  }
class C{  public static void copyToClipboard(Context context,String string){  try {    ClipboardManager clipboard=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);    ClipData clip=ClipData.newPlainText("Link",string);    clipboard.setPrimaryClip(clip);    U.showCenteredToast(context,R.string.audio_copied);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isAllResponsesReceived(){  return (waitingCount == 0);}  }
class C{  public void putAll(K key,Collection<V> values){  if (values.isEmpty()) {    return;  }  key=sanitizeKey(key);  List<V> list=map.get(key);  if (list == null) {    list=new ArrayList<V>();    map.put(key,list);  }  list.addAll(values);}  }
class C{  public MemFile(String uri,String id){  super(uri,id);  this.uri=uri;  this.id=id;}  }
class C{  void decomposeFullName(String name,QualifiedNameInfo fullName){  decomposeFullName(name,fullName,"public");}  }
class C{  private String[] splitTfvcCollectionUrl(final String collectionUrl){  final String[] result=new String[2];  if (StringUtils.isEmpty(collectionUrl)) {    return result;  }  final String trimmedUrl=UrlHelper.trimTrailingSeparators(collectionUrl);  final int index=trimmedUrl.lastIndexOf(UrlHelper.URL_SEPARATOR);  if (index >= 0) {    result[0]=trimmedUrl.substring(0,index + 1);    result[1]=trimmedUrl.substring(index + 1);  } else {    result[0]=collectionUrl;    result[1]=StringUtils.EMPTY;  }  return result;}  }
class C{  public DataAccessProxy(Context context,String name,int version){  this(context,name,null,version);}  }
class C{  public static boolean putString(ContentResolver resolver,String name,String value){  return putStringForUser(resolver,name,value,UserHandle.myUserId());}  }
class C{  public void renameAttributeAt(int columnIndex,String newName){  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    addUndoPoint();    m_Data.renameAttribute(columnIndex - 1,newName);    notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));  }}  }
class C{  public static boolean isNaturalOrCraps(int result){  return result == 0 || result == 1;}  }
class C{  private Base64(){}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  public void testValueOfDocType23() throws Exception {  DocType docType=new DocType("web-app",WebXmlVersion.V2_3.getPublicId(),WebXmlVersion.V2_3.getSystemId());  assertEquals(WebXmlVersion.V2_3,WebXmlVersion.valueOf(docType));}  }
class C{  public boolean awaitTermination(long timeout,TimeUnit unit){  isShuttingDown=true;  executorService.shutdown();  try {    boolean cleanExit=executorService.awaitTermination(timeout,unit);    assert (validShutdownState());    return cleanExit;  } catch (  InterruptedException e) {    executorService.shutdownNow();    Thread.currentThread().interrupt();    return true;  }catch (  Throwable e) {    log.error("awaitTermination",e);    return false;  }}  }
class C{  public UniformCrossover(double probability){  this.probability=probability;}  }
class C{  public static void messaged(final Player player){  process(player,TutorialEventType.FIRST_PRIVATE_MESSAGE);}  }
class C{  public static X509CRL loadCRL(final byte[] byteArray){  final ByteArrayInputStream inputStream=new ByteArrayInputStream(byteArray);  final X509CRL crl=loadCRL(inputStream);  return crl;}  }
class C{  public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof VmIdentifier)) {    return false;  }  return uri.equals(((VmIdentifier)object).uri);}  }
class C{  @SuppressWarnings("unchecked") public Map<String,Object> decodeInitData(final byte[] data){  final BitPackedDecoder decoder=new BitPackedDecoder(data,typeInfos);  return (Map<String,Object>)decoder.instance(replayInitDataTypeid);}  }
class C{  public static boolean isChildOf(Resource file,Resource dir){  while (file != null) {    if (file.equals(dir))     return true;    file=file.getParentResource();  }  return false;}  }
class C{  @Override public void fire(Connection conn,Object[] oldRow,Object[] newRow) throws SQLException {  BigDecimal diff=null;  if (newRow != null) {    diff=(BigDecimal)newRow[1];  }  if (oldRow != null) {    BigDecimal m=(BigDecimal)oldRow[1];    diff=diff == null ? m.negate() : diff.subtract(m);  }  PreparedStatement prep=conn.prepareStatement("UPDATE INVOICE_SUM SET AMOUNT=AMOUNT+?");  prep.setBigDecimal(1,diff);  prep.execute();}  }
class C{  public CRemoveFromGroupAction(final NaviNode node){  super("Remove node from group");  Preconditions.checkNotNull(node,"IE00941: Node argument can't be null");  m_node=node;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Pair(Object element,Object match){  this.element=element;  this.match=match;}  }
class C{  public static Boolean isOpen(long id){  Calendar cal=Calendar.getInstance();  int day=Maths.rollover(cal.get(DAY_OF_WEEK) - 2,0,6);  int time=cal.get(HOUR_OF_DAY) * 100 + cal.get(MINUTE);  ContentResolver cr=cr();  Uri uri=Uris.limit(OpenHours.CONTENT_URI,1);  String[] proj={OpenHours.TYPE_ID};  String sel=OpenHours.RESTAURANT_ID + " = ? AND (" + OpenHours.DAY+ " = ? AND "+ OpenHours.TIME+ " <= ? OR "+ OpenHours.DAY+ " < ?)";  String[] args=Elements.toStrings(id,day,time,day);  String order=OpenHours.DAY + " DESC, " + OpenHours.TIME+ " DESC";  int type=Cursors.firstInt(cr.query(uri,proj,sel,args,order));  if (type != Integer.MIN_VALUE) {    return OpenHour.Type.get(type) == OPEN;  } else {    sel=OpenHours.RESTAURANT_ID + " = ?";    args=new String[]{String.valueOf(id)};    type=Cursors.firstInt(cr.query(uri,proj,sel,args,order));    return type != Integer.MIN_VALUE ? OpenHour.Type.get(type) == OPEN : null;  }}  }
class C{  public JSONNode(){  this(null,NodeType.OBJECT);}  }
class C{  @Deprecated public ContentItem charset(String charset){  this.charset=charset;  return this;}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.376 -0500",hash_original_method="C6E435CA3C22ED725F4C5C94B55E086B",hash_generated_method="462547FFF946A9E7DDF12A274E3611A8") public static AccessibilityNodeInfo obtain(){synchronized (sPoolLock) {    if (sPool != null) {      AccessibilityNodeInfo info=sPool;      sPool=sPool.mNext;      sPoolSize--;      info.mNext=null;      info.mIsInPool=false;      return info;    }    return new AccessibilityNodeInfo();  }}  }
class C{  public void insert(T object,int index){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.add(index,object);    } else {      mObjects.add(index,object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public void doCancel(final TradeOrder order){  if (!order.getIsFilled()) {    try {      m_brokerModel.onCancelOrder(order);    } catch (    BrokerModelException ex) {      this.setErrorMessage("Error cancelling Order " + order.getOrderKey(),ex.getMessage(),ex);    }  } else {    this.setStatusBarMessage("Order is filled and cannot be cancelled",BasePanel.INFORMATION);  }}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  public boolean isConnected(final String host,final int port,final int timeoutInMs,final SocketErrorHandler socketErrorHandler){  final Socket socket=new Socket();  return isConnected(socket,host,port,timeoutInMs,socketErrorHandler);}  }
class C{  public LessConstraint(Number constraintValue){  super(constraintValue);}  }
class C{  public AffineTransformation(Coordinate src0,Coordinate src1,Coordinate src2,Coordinate dest0,Coordinate dest1,Coordinate dest2){}  }
class C{  public void writeDataFile(String fileName,byte[] imageData){  try {    Debug.message("imagemaster","ImageMasterHelper: Writing image file " + fileName);    FileOutputStream binFile=new FileOutputStream(fileName);    binFile.write(imageData);    binFile.close();  } catch (  IOException ioe) {    Debug.error("ImageMasterHelper: Error writing image file " + fileName);  }}  }
class C{  public ShortcutInfo(AppInfo info){  super(info);  title=Utilities.trim(info.title);  intent=new Intent(info.intent);  customIcon=false;  flags=info.flags;  isDisabled=info.isDisabled;}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  protected void addIconsToPanel(HashMap<String,NamedIcon> iconMap){  _iconPanel=new JPanel();  Iterator<Entry<String,NamedIcon>> it=iconMap.entrySet().iterator();  while (it.hasNext()) {    Entry<String,NamedIcon> entry=it.next();    NamedIcon icon=new NamedIcon(entry.getValue());    JPanel panel=new JPanel();    String borderName=ItemPalette.convertText(entry.getKey());    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black),borderName));    try {      JLabel label=new IconDragJLabel(new DataFlavor(Editor.POSITIONABLE_FLAVOR),_level);      label.setName(borderName);      label.setToolTipText(icon.getName());      panel.add(label);      if (icon.getIconWidth() < 1 || icon.getIconHeight() < 1) {        label.setText(Bundle.getMessage("invisibleIcon"));        label.setForeground(Color.lightGray);      } else {        icon.reduceTo(50,80,0.2);      }      label.setIcon(icon);      int width=Math.max(100,panel.getPreferredSize().width);      panel.setPreferredSize(new java.awt.Dimension(width,panel.getPreferredSize().height));    } catch (    java.lang.ClassNotFoundException cnfe) {      cnfe.printStackTrace();    }    _iconPanel.add(panel);  }  add(_iconPanel,1);  _iconPanel.addMouseListener(this);}  }
class C{  public static void add(List<String> options,String option,boolean value){  if (value)   options.add("-" + option);}  }
class C{  private MaterializedRelation<ParameterizationFunction> buildDB(int dim,double[][] basis,DBIDs ids,Relation<ParameterizationFunction> relation){  ProxyDatabase proxy=new ProxyDatabase(ids);  SimpleTypeInformation<ParameterizationFunction> type=new SimpleTypeInformation<>(ParameterizationFunction.class);  WritableDataStore<ParameterizationFunction> prep=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_HOT,ParameterizationFunction.class);  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    prep.put(iter,project(basis,relation.get(iter)));  }  if (LOG.isDebugging()) {    LOG.debugFine("db fuer dim " + (dim - 1) + ": "+ ids.size());  }  MaterializedRelation<ParameterizationFunction> prel=new MaterializedRelation<>(type,ids,null,prep);  proxy.addRelation(prel);  return prel;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WZoom.init");}  }
class C{  public void testStop() throws Exception {  Analyzer a=new MockAnalyzer(random(),MockTokenizer.SIMPLE,true,MockTokenFilter.ENGLISH_STOPSET);  assertAnalyzesTo(a,"the quick brown a fox",new String[]{"quick","brown","fox"},new int[]{2,1,2});}  }
class C{  protected void onQueryEviction(Query query,long ramBytesUsed){  assert lock.isHeldByCurrentThread();  this.ramBytesUsed-=ramBytesUsed;}  }
class C{  private static boolean decodeIpv4Suffix(String input,int pos,int limit,byte[] address,int addressOffset){  int b=addressOffset;  for (int i=pos; i < limit; ) {    if (b == address.length)     return false;    if (b != addressOffset) {      if (input.charAt(i) != '.')       return false;      i++;    }    int value=0;    int groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      if (c < '0' || c > '9')       break;      if (value == 0 && groupOffset != i)       return false;      value=(value * 10) + c - '0';      if (value > 255)       return false;    }    int groupLength=i - groupOffset;    if (groupLength == 0)     return false;    address[b++]=(byte)value;  }  if (b != addressOffset + 4)   return false;  return true;}  }
class C{  public IncompatibleComparatorException(Throwable cause){  super(cause);}  }
class C{  public V search(K k){  BalancedBinaryNode<K,V> p=root;  while (p != null) {    int cmp=compare(k,p.key);    if (cmp == 0) {      return p.value;    } else     if (cmp < 0) {      p=p.left;    } else {      p=p.right;    }  }  return null;}  }
class C{  public boolean isVarArrayLength(){  return isArray() && !JBBPUtils.isNumber(this.arraySize);}  }
class C{  public String toString(){  return toString(0);}  }
class C{  public PermissionRequestObject onRational(Func3 rationalFunc){  mRationalFunc=rationalFunc;  return this;}  }
class C{  private void decompose(List<Object> elementPairs,List<Object> printerList,List<Object> parserList){  int size=elementPairs.size();  for (int i=0; i < size; i+=2) {    Object element=elementPairs.get(i);    if (element instanceof DateTimePrinter) {      if (element instanceof Composite) {        addArrayToList(printerList,((Composite)element).iPrinters);      } else {        printerList.add(element);      }    }    element=elementPairs.get(i + 1);    if (element instanceof DateTimeParser) {      if (element instanceof Composite) {        addArrayToList(parserList,((Composite)element).iParsers);      } else {        parserList.add(element);      }    }  }}  }
class C{  public void addPhoto(PhotoEntity photo){  photos.add(photo);}  }
class C{  private void RangeCheck(int index){  if (index >= size)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);}  }
class C{  public static double ulp(final double value){  if (USE_JDK_MATH) {    return Math.ulp(value);  }  final int exponent=getExponent(value);  if (exponent >= MIN_DOUBLE_NORMAL_EXPONENT + 52) {    if (exponent == MAX_DOUBLE_EXPONENT + 1) {      return Math.abs(value);    }    return Double.longBitsToDouble(exponent + (MAX_DOUBLE_EXPONENT - 52L) << 52);  } else {    if (exponent == MIN_DOUBLE_NORMAL_EXPONENT - 1) {      return Double.MIN_VALUE;    }    return Double.longBitsToDouble(1L << exponent - MIN_DOUBLE_NORMAL_EXPONENT);  }}  }
class C{  static private void parseArgs(String[] args){  for (int i=0; i < args.length; i++) {    if (args[i].equals("-v"))     verbose=true; else     if (args[i].equals("-p"))     profile=true; else     file=args[i];  }}  }
class C{  public void addComittedVirtualMemSize(long comittedVirtualMemSize){  this.totalComittedVirtualMemSize+=comittedVirtualMemSize;}  }
class C{  public ProtocolEncoderException(Throwable cause){  super(cause);}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Class expect=type.getType();  if (value != null) {    throw new PersistenceException("Can not read key of %s for %s",expect,entry);  }  return read(node);}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public static void process(Process p,LineConsumer stdout,LineConsumer stderr) throws IOException {  try (BufferedReader inputReader=new BufferedReader(new InputStreamReader(p.getInputStream()));BufferedReader errorReader=new BufferedReader(new InputStreamReader(p.getErrorStream()))){    String line;    while ((line=inputReader.readLine()) != null) {      stdout.writeLine(line);    }    while ((line=errorReader.readLine()) != null) {      stderr.writeLine(line);    }  } }  }
class C{  public void proceed(){  GridClientFutureAdapter<R> fut=GridClientFutureAdapter.this;  assert fut.isDone();  try {    if (lsnr != null)     lsnr.onDone(fut);    T res=null;    if (cb != null)     res=cb.onComplete(fut);    if (chainedFut != null)     chainedFut.onDone(res);  } catch (  GridClientException e) {    if (chainedFut != null)     chainedFut.onDone(e);    if (log.isLoggable(Level.FINE)) {      log.log(Level.FINE,"Failed to notify chained callback due to unhandled client exception" + " [fut=" + fut + ", cb="+ cb+ ", chainedFut="+ chainedFut+ ']',e);    }  }catch (  RuntimeException e) {    if (chainedFut != null)     chainedFut.onDone(e);    log.log(Level.WARNING,"Failed to notify chained callback due to unhandled runtime exception" + " [fut=" + fut + ", cb="+ cb+ ", chainedFut="+ chainedFut+ ']',e);  }catch (  Error e) {    if (chainedFut != null)     chainedFut.onDone(e);    throw e;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void notifyProgress(float progress){  SendDelivery delivery=mDelivery;  SendPacket packet=mPacket;  if (!mDisposed.get() && delivery != null && packet != null && isNotifyProgress(progress)) {    if (progress == PacketFilter.STATUS_START)     delivery.postSendStart(packet); else     if (progress == PacketFilter.STATUS_END)     delivery.postSendCompleted(packet); else     delivery.postSendProgress(packet,progress);  }}  }
class C{  protected Task<Boolean> readState(){  if (stateExtension == null) {    throw new IllegalStateException("Storage extension not available");  }  return stateExtension.readState(reference,state);}  }
class C{  public void append(String text){  if (text == null) {    return;  }  this.append(text.toCharArray());}  }
class C{  public JSONBuffer closeHash(){  if (stack.empty() || stack.peek() != Operand.HASH) {    throw new JSONException("Not in array context when closing.");  }  removeSeparator();  buffer.append("}");  stack.pop();  addSeparator();  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.044 -0400",hash_original_method="C7496FA4B2F55724C4380B6C65031DD0",hash_generated_method="3CCA177989ED5BC8B5BDAEE0BD668B2A") public GraphEnvironment(FrameManager frameManager,GraphReader reader){  super(frameManager);  mGraphReader=reader;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static AttributeMetaData generateAttributeMetaData(ExampleSetMetaData emd,String name,ExpressionType expressionType){  AttributeMetaData newAttribute=null;  AttributeMetaData existingAtt=emd.getAttributeByName(name);  int ontology=expressionType.getAttributeType();  if (ontology == Ontology.BINOMINAL) {    newAttribute=new AttributeMetaData(name,Ontology.BINOMINAL);    HashSet<String> values=new HashSet<>();    values.add("false");    values.add("true");    newAttribute.setValueSet(values,SetRelation.EQUAL);  } else {    newAttribute=new AttributeMetaData(name,ontology);  }  if (existingAtt != null) {    newAttribute.setRole(existingAtt.getRole());  }  return newAttribute;}  }
class C{  @Override public void lock(){  lock(true);}  }
class C{  public Ping(long nonce){  this.nonce=nonce;  this.hasNonce=true;}  }
class C{  void initAdPadding(Display d){}  }
class C{  public CodeAttribute createCode(){  CodeAttribute code=new CodeAttribute();  for (int i=0; i < _attributes.size(); i++) {    Attribute attr=_attributes.get(i);    if (attr instanceof CodeAttribute)     return (CodeAttribute)attr;  }  return null;}  }
class C{  private void onRhythmGroupSet(){  Context context=getContext().getApplicationContext();  if (context instanceof RhythmControl.Host) {    final RhythmDrawable drawable=((RhythmControl.Host)context).getRhythmControl().getGroup(mRhythmGroupIndex).makeDrawable();    doSetRhythmDrawable(drawable);  } else {    throw new ClassCastException(this + " cannot connect to RhythmControl. " + "Check if your Application implements RhythmControl.Host");  }}  }
class C{  @SuppressWarnings("unchecked") public FeaturizedLexicon(short[] numSubStates,Featurizer featurizer,StateSetTreeList trainTrees){  this(numSubStates,featurizer);  ;  init(trainTrees);}  }
class C{  public String user(){  return user;}  }
class C{  protected Hit<V>[] matchExact(final Hit<V>[] hits,final String query){  throw new UnsupportedOperationException();}  }
class C{  @Override public synchronized void addTestSetListener(TestSetListener tsl){  m_testListeners.addElement(tsl);}  }
class C{  public static void stopSampleTune(){  if (sampleTuneThread.isAlive())   sampleTuneThread.terminate();}  }
class C{  @Override public String basePath(){  return "/wm/topology";}  }
class C{  private void paintLabel(EdgeRenderingProperty property,Point2D p){  GL2 gl=scene.gl;  gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_MODULATE);  if (property.textIsDirty) {    property.textTexture=property.textRenderer.getTexture();    property.textIsDirty=false;  }  renderTexture(property.textTexture,p.getX(),p.getY());}  }
class C{  protected Pair<PropositionSymbol,Boolean> findUnitClause(Set<Clause> clauses,Model model){  Pair<PropositionSymbol,Boolean> result=null;  for (  Clause c : clauses) {    if (model.determineValue(c) == null) {      Literal unassigned=null;      if (c.isUnitClause()) {        unassigned=c.getLiterals().iterator().next();      } else {        for (        Literal l : c.getLiterals()) {          Boolean value=model.getValue(l.getAtomicSentence());          if (value == null) {            if (unassigned == null) {              unassigned=l;            } else {              unassigned=null;              break;            }          }        }      }      if (unassigned != null) {        result=new Pair<PropositionSymbol,Boolean>(unassigned.getAtomicSentence(),unassigned.isPositiveLiteral());        break;      }    }  }  return result;}  }
class C{  public CropTransformation(int width,int height,GravityHorizontal gravityHorizontal,GravityVertical gravityVertical){  mWidth=width;  mHeight=height;  mGravityHorizontal=gravityHorizontal;  mGravityVertical=gravityVertical;}  }
class C{  public ResumeParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_RESUME_SUCCESS);}  }
class C{  public boolean isInLimbo(){  return name.get() == Limbo.name.get();}  }
class C{  public static Map createCaseInsensitiveMap(){  return new TreeMap(String.CASE_INSENSITIVE_ORDER);}  }
class C{  public void flush(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();        if (BuildConfig.DEBUG) {          Log.d(TAG,"Disk cache flushed");        }      } catch (      IOException e) {        Log.e(TAG,"flush - " + e);      }    }  }}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  private boolean initInfoTable(){  String sql="SELECT c.ColumnName, t.AD_Table_ID, t.TableName, c.ColumnSql " + "FROM AD_Table t" + " INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID)"+ "WHERE c.AD_Reference_ID=10"+ " AND t.TableName=?"+ " AND EXISTS (SELECT * FROM AD_Field f "+ "WHERE f.AD_Column_ID=c.AD_Column_ID"+ " AND f.IsDisplayed='Y' AND f.IsEncrypted='N' AND f.ObscureType IS NULL) "+ "ORDER BY c.IsIdentifier DESC, c.SeqNo";  int AD_Table_ID=0;  String tableName=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setString(1,p_tableName);    rs=pstmt.executeQuery();    while (rs.next()) {      m_queryColumns.add(rs.getString(1));      String columnSql=rs.getString(4);      if (columnSql != null && columnSql.length() > 0)       m_queryColumnsSql.add(columnSql); else       m_queryColumnsSql.add(rs.getString(1));      if (AD_Table_ID == 0) {        AD_Table_ID=rs.getInt(2);        tableName=rs.getString(3);      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (m_queryColumns.size() == 0) {    log.log(Level.SEVERE,"No query columns found");    return false;  }  log.finest("Table " + tableName + ", ID="+ AD_Table_ID+ ", QueryColumns #"+ m_queryColumns.size());  while (m_queryColumns.size() > 4) {    m_queryColumns.remove(m_queryColumns.size() - 1);    m_queryColumnsSql.remove(m_queryColumnsSql.size() - 1);  }  String title=Msg.translate(Env.getCtx(),tableName + "_ID");  if (title.endsWith("_ID"))   title=Msg.translate(Env.getCtx(),tableName);  setTitle(getTitle() + " " + title);  ArrayList<Info_Column> list=new ArrayList<Info_Column>();  sql="SELECT c.ColumnName, c.AD_Reference_ID, c.IsKey, f.IsDisplayed, c.AD_Reference_Value_ID, c.ColumnSql " + "FROM AD_Column c" + " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID)"+ " INNER JOIN AD_Tab tab ON (t.AD_Window_ID=tab.AD_Window_ID)"+ " INNER JOIN AD_Field f ON (tab.AD_Tab_ID=f.AD_Tab_ID AND f.AD_Column_ID=c.AD_Column_ID) "+ "WHERE t.AD_Table_ID=? "+ " AND (c.IsKey='Y' OR "+ " (f.IsEncrypted='N' AND f.ObscureType IS NULL)) "+ "ORDER BY c.IsKey DESC, f.SeqNo";  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String columnName=rs.getString(1);      int displayType=rs.getInt(2);      boolean isKey=rs.getString(3).equals("Y");      boolean isDisplayed=rs.getString(4).equals("Y");      int AD_Reference_Value_ID=rs.getInt(5);      String columnSql=rs.getString(6);      if (columnSql == null || columnSql.length() == 0)       columnSql=columnName;      StringBuffer colSql=new StringBuffer(columnSql);      Class<?> colClass=null;      if (isKey)       colClass=IDColumn.class; else       if (!isDisplayed)       ; else       if (displayType == DisplayType.YesNo)       colClass=Boolean.class; else       if (displayType == DisplayType.Amount)       colClass=BigDecimal.class; else       if (displayType == DisplayType.Number || displayType == DisplayType.Quantity)       colClass=Double.class; else       if (displayType == DisplayType.Integer)       colClass=Integer.class; else       if (displayType == DisplayType.String || displayType == DisplayType.Text || displayType == DisplayType.Memo)       colClass=String.class; else       if (DisplayType.isDate(displayType))       colClass=Timestamp.class; else       if (displayType == DisplayType.List) {        if (Env.isBaseLanguage(Env.getCtx(),"AD_Ref_List"))         colSql=new StringBuffer("(SELECT l.Name FROM AD_Ref_List l WHERE l.AD_Reference_ID=").append(AD_Reference_Value_ID).append(" AND l.Value=").append(columnSql).append(") AS ").append(columnName); else         colSql=new StringBuffer("(SELECT t.Name FROM AD_Ref_List l, AD_Ref_List_Trl t " + "WHERE l.AD_Ref_List_ID=t.AD_Ref_List_ID AND l.AD_Reference_ID=").append(AD_Reference_Value_ID).append(" AND l.Value=").append(columnSql).append(" AND t.AD_Language='").append(Env.getAD_Language(Env.getCtx())).append("') AS ").append(columnName);        colClass=String.class;      }      if (colClass != null) {        list.add(new Info_Column(Msg.translate(Env.getCtx(),columnName),colSql.toString(),colClass));        log.finest("Added Column=" + columnName);      } else       log.finest("Not Added Column=" + columnName);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (list.size() == 0) {    ADialog.error(p_WindowNo,this,"Error","No Info Columns");    log.log(Level.SEVERE,"No Info for AD_Table_ID=" + AD_Table_ID + " - "+ sql);    return false;  }  log.finest("InfoColumns #" + list.size());  m_generalLayout=new Info_Column[list.size()];  list.toArray(m_generalLayout);  setTableLayout(m_generalLayout);  return true;}  }
class C{  public Matrix3d rotationXYZ(double angleX,double angleY,double angleZ){  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double m_sinX=-sinX;  double m_sinY=-sinY;  double m_sinZ=-sinZ;  double nm11=cosX;  double nm12=sinX;  double nm21=m_sinX;  double nm22=cosX;  double nm00=cosY;  double nm01=nm21 * m_sinY;  double nm02=nm22 * m_sinY;  m20=sinY;  m21=nm21 * cosY;  m22=nm22 * cosY;  m00=nm00 * cosZ;  m01=nm01 * cosZ + nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ;  m11=nm01 * m_sinZ + nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  return this;}  }
class C{  private void onDuplicateClick(){  requestPermissions("1");  requestPermissions("2");}  }
class C{  public static GroovyRowResult toRowResult(ResultSet rs) throws SQLException {  ResultSetMetaData metadata=rs.getMetaData();  Map<String,Object> lhm=new LinkedHashMap<String,Object>(metadata.getColumnCount(),1);  for (int i=1; i <= metadata.getColumnCount(); i++) {    lhm.put(metadata.getColumnLabel(i),rs.getObject(i));  }  return new GroovyRowResult(lhm);}  }
class C{  public void onCancelRealtimeBars(Contract contract){  if (m_realTimeBarsRequests.containsKey(contract.getId())) {    if (m_client.isConnected())     m_client.cancelRealTimeBars(contract.getId());synchronized (m_realTimeBarsRequests) {      m_realTimeBarsRequests.remove(contract.getId());    }  }}  }
class C{  private void add(final long[] triple,final long value) throws IOException {  final int chunk=(int)(triple[0] >>> DISK_CHUNKS_SHIFT);  count[chunk]++;  checkedForDuplicates=false;  if (DEBUG)   System.err.println("Adding " + Arrays.toString(triple));  dos[chunk].writeLong(triple[0]);  dos[chunk].writeLong(triple[1]);  dos[chunk].writeLong(triple[2]);  if (hashMask == 0)   dos[chunk].writeLong(value);  if (filteredSize != -1 && (filter == null || filter.evaluate(triple)))   filteredSize++;  size++;}  }
class C{  public RangeCountProcedure(boolean exact,boolean deleted,byte[] fromKey,byte[] toKey){  super(fromKey,toKey);  if (!exact && deleted)   throw new IllegalArgumentException();  this.exact=exact;  this.deleted=deleted;}  }
class C{  public boolean hasQualityData(){  if (mIsPaired) {    return mLeft.hasQualityData();  } else {    return mSingle.hasQualityData();  }}  }
class C{  public void clear(){}  }
class C{  public boolean srsp(){  return _mySRSP;}  }
class C{  public static boolean isJdbcInterface(Class<?> clazz){  if (Util.isJdbcInterfaceCache.containsKey(clazz)) {    return (Util.isJdbcInterfaceCache.get(clazz));  }  if (clazz.isInterface()) {    try {      if (isJdbcPackage(clazz.getPackage().getName())) {        Util.isJdbcInterfaceCache.putIfAbsent(clazz,true);        return true;      }    } catch (    Exception ex) {    }  }  for (  Class<?> iface : clazz.getInterfaces()) {    if (isJdbcInterface(iface)) {      Util.isJdbcInterfaceCache.putIfAbsent(clazz,true);      return true;    }  }  if (clazz.getSuperclass() != null && isJdbcInterface(clazz.getSuperclass())) {    Util.isJdbcInterfaceCache.putIfAbsent(clazz,true);    return true;  }  Util.isJdbcInterfaceCache.putIfAbsent(clazz,false);  return false;}  }
class C{  public void checkResponse(HttpResponse<JsonNode> response) throws Exception {  String message="";  if (response.getBody() != null && !response.getBody().isArray() && response.getBody().getObject().has("message")) {    message=" " + response.getBody().getObject().getString("message");  }  if (response.getStatus() == 403) {    throw new PermissionsException("Missing permissions!" + message);  }  if (response.getStatus() < 200 || response.getStatus() > 299) {    throw new BadResponseException("Received http status code " + response.getStatus() + " with message "+ response.getStatusText()+ " and body "+ response.getBody(),response.getStatus(),response.getStatusText(),response);  }}  }
class C{  @Override protected void addViolation(RuleContext ctx,DelphiPMDNode node){  super.addViolation(ctx,firstNode);}  }
class C{  protected final void handleResize(final int w,final int h,final boolean updateTarget){  Image oldBB=null;synchronized (getStateLock()) {    if (backBuffer != null) {      oldBB=backBuffer;      backBuffer=getLWGC().createBackBuffer(this);    }  }  getLWGC().destroyBackBuffer(oldBB);  if (updateTarget) {    AWTAccessor.getComponentAccessor().setSize(getTarget(),w,h);  }  postEvent(new ComponentEvent(getTarget(),ComponentEvent.COMPONENT_RESIZED));}  }
class C{  private IExpressionDescription add(final String key,final IExpressionDescription expr){  put(key,expr);  return expr;}  }
class C{  public void shutdown(){  UserTransaction userTransaction=startUserTransaction();  try {    shutdown(userTransaction);  }  finally {    resolveUserTransaction(userTransaction);  }}  }
class C{  public ObjectReference loadObjectReference(){  return new ObjectReference(loadArchitecturalWord());}  }
class C{  public static <E,S extends SortedSet<E>>SynchronizedSortedSet<E> of(S set){  return new SynchronizedSortedSet<>(SortedSetAdapter.adapt(set));}  }
class C{  private static <T>void siftDownComparable(int k,T x,Object[] array,int n){  if (n > 0) {    Comparable<? super T> key=(Comparable<? super T>)x;    int half=n >>> 1;    while (k < half) {      int child=(k << 1) + 1;      Object c=array[child];      int right=child + 1;      if (right < n && ((Comparable<? super T>)c).compareTo((T)array[right]) > 0)       c=array[child=right];      if (key.compareTo((T)c) <= 0)       break;      array[k]=c;      k=child;    }    array[k]=key;  }}  }
class C{  public static Address prepareAddress(Object object,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return Address.max();}  }
class C{  public void modifyContacts(View v){  getOps().modifyContacts();}  }
class C{  public static CCPageTurnTransition transition(float t,CCScene s,boolean back){  return new CCPageTurnTransition(t,s,back);}  }
class C{  @SuppressWarnings("deprecation") public static boolean equals(final Type t1,final Type t2){  if (ObjectUtils.equals(t1,t2)) {    return true;  }  if (t1 instanceof ParameterizedType) {    return equals((ParameterizedType)t1,t2);  }  if (t1 instanceof GenericArrayType) {    return equals((GenericArrayType)t1,t2);  }  if (t1 instanceof WildcardType) {    return equals((WildcardType)t1,t2);  }  return false;}  }
class C{  private boolean remoteStoragePoolsOfSourceType(StorageSystem sourceSystem,ListMultimap<String,URI> remotestorageTypeMap){  if (remotestorageTypeMap != null && !remotestorageTypeMap.isEmpty()) {    List<URI> remoteSystems=remotestorageTypeMap.get(sourceSystem.getSystemType());    if (remoteSystems != null && !remoteSystems.isEmpty()) {      List<StorageSystem> targetSystems=_objectCache.queryObject(StorageSystem.class,remoteSystems);      for (      StorageSystem targetSystem : targetSystems) {        if (!targetSystem.getInactive() && !targetSystem.getNativeGuid().equalsIgnoreCase(sourceSystem.getNativeGuid())) {          return true;        }      }    }  }  return false;}  }
class C{  public static Cursor searchByKeyword(ContentResolver resolver,String keyword){  keyword=keyword + "%";  return resolver.query(Constants.CONTENT_URI,null,"title like ? or artist like ? or album like ?",new String[]{keyword,keyword,keyword},null);}  }
class C{  private Object readResolve(){  return ToStringStyle.NO_FIELD_NAMES_STYLE;}  }
class C{  public void addHandler(Handler handler) throws SecurityException {  handler.getClass();  checkPermission();  handlers.add(handler);}  }
class C{  static public int floor(float x){  return (int)(x + BIG_ENOUGH_FLOOR) - BIG_ENOUGH_INT;}  }
class C{  protected static void createTrigger(Connection conn,String schema,String table) throws SQLException {  createOrDropTrigger(conn,schema,table,true);}  }
class C{  private String resolveOperationDocument(PathOperation operation){  if (config.isSeparatedOperationsEnabled())   return new File(config.getSeparatedOperationsFolder(),this.markupDocBuilder.addFileExtension(normalizeName(operation.getId()))).getPath(); else   return this.markupDocBuilder.addFileExtension(config.getPathsDocument());}  }
class C{  private void deleteSubpart(HttpServletRequest request,org.hibernate.Session hibSession,InstrOfferingConfig ioc,HashMap notDeletedSubparts) throws Exception {  Set s=ioc.getSchedulingSubparts();  HashMap deletedSubparts=new HashMap();  for (Iterator i=s.iterator(); i.hasNext(); ) {    SchedulingSubpart tmpSubpart=(SchedulingSubpart)i.next();    if (notDeletedSubparts.get(tmpSubpart.getUniqueId()) == null) {      Debug.debug("Deleting subpart ... " + tmpSubpart.getUniqueId() + ", "+ tmpSubpart.getItypeDesc());      Set classes=tmpSubpart.getClasses();      for (Iterator j=classes.iterator(); j.hasNext(); ) {        Class_ c=(Class_)j.next();        deleteChildClasses(c,hibSession,1,false);        Class_ pc=c.getParentClass();        if (pc != null) {          pc.getChildClasses().remove(c);          if (notDeletedSubparts.get(pc.getSchedulingSubpart().getUniqueId()) != null)           hibSession.saveOrUpdate(pc);        }        j.remove();      }      SchedulingSubpart parentSubpart=tmpSubpart.getParentSubpart();      if (parentSubpart != null) {        if (parentSubpart.getChildSubparts() != null)         parentSubpart.getChildSubparts().remove(tmpSubpart);        tmpSubpart.setParentSubpart(null);        if (deletedSubparts.get(parentSubpart.getUniqueId()) == null)         hibSession.saveOrUpdate(parentSubpart);      }      Set childSubparts=tmpSubpart.getChildSubparts();      if (childSubparts != null)       Debug.debug("Child subparts exist ... " + childSubparts.size());      tmpSubpart.setChildSubparts(null);      deletedSubparts.put(tmpSubpart.getUniqueId(),tmpSubpart.getUniqueId());      hibSession.delete(tmpSubpart);      i.remove();    }  }  hibSession.saveOrUpdate(ioc);  hibSession.flush();}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=(k1 << 15) | (k1 >>> 17);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  public void startHeadersTransition(boolean withHeaders){  if (!mCanShowHeaders) {    throw new IllegalStateException("Cannot start headers transition");  }  if (isInHeadersTransition() || mShowingHeaders == withHeaders) {    return;  }  startHeadersTransitionInternal(withHeaders);}  }
class C{  private void initializeCommands(){  mCommands[ContactsCommandType.INSERT_COMMAND.ordinal()]=new InsertContactsCommand(this);  mCommands[ContactsCommandType.QUERY_COMMAND.ordinal()]=new QueryContactsCommand(this);  mCommands[ContactsCommandType.MODIFY_COMMAND.ordinal()]=new ModifyContactsCommand(this);  mCommands[ContactsCommandType.DELETE_COMMAND.ordinal()]=new DeleteContactsCommand(this);}  }
class C{  protected MouseMotionListener createListMouseMotionListener(){  return getHandler();}  }
class C{  public ValidateQueryRequest source(Map source){  try {    XContentBuilder builder=XContentFactory.contentBuilder(Requests.CONTENT_TYPE);    builder.map(source);    return source(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  public static void reconcileHLUs(DbClient dbClient,ExportGroup exportGroup,ExportMask exportMask,Map<URI,Integer> volumeMap){  if (exportMask.getCreatedBySystem() && exportMask.getVolumes() != null) {    for (    URI boURI : volumeMap.keySet()) {      String hlu=exportMask.returnVolumeHLU(boURI);      _log.info(String.format("ExportGroup %s (%s) update volume HLU: %s -> %s",exportGroup.getLabel(),exportGroup.getId(),boURI,hlu));      exportGroup.addVolume(boURI,Integer.parseInt(hlu));    }    reconcileExportGroupsHLUs(dbClient,exportGroup);  }}  }
class C{  public EntityNotificationImpl(Referenceable entity,OperationType operationType,List<IStruct> traits) throws AtlasException {  this.entity=entity;  this.operationType=operationType;  this.traits=traits;}  }
class C{  public static int OS2IP(byte[] input,int inOff,int inLen){  if ((input.length == 0) || input.length < inOff + inLen - 1) {    return 0;  }  int result=0;  for (int j=0; j < inLen; j++) {    result|=(input[inOff + j] & 0xff) << (8 * (inLen - j - 1));  }  return result;}  }
class C{  public static @Nullable RequestBody createGzip(final MediaType mediaType,final String body){  ByteArrayOutputStream gzipByteArrayOutputStream=new ByteArrayOutputStream();  try {    OutputStream gzipOutputStream=new GZIPOutputStream(gzipByteArrayOutputStream);    gzipOutputStream.write(body.getBytes());    gzipOutputStream.close();  } catch (  IOException e) {    return null;  }  return RequestBody.create(mediaType,gzipByteArrayOutputStream.toByteArray());}  }
class C{  public long eventIndex(){  return eventIndex;}  }
class C{  public Type2Message(Type1Message type1,byte[] challenge,String target){  this(getDefaultFlags(type1),challenge,(type1 != null && target == null && type1.getFlag(NTLMSSP_REQUEST_TARGET)) ? getDefaultDomain() : target);}  }
class C{  public final void println(int i) throws IOException {  print(i);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  public CloseableIteration<? extends BindingSet,QueryEvaluationException> evaluate(final QueryRoot queryRoot,final Dataset dataset,final BindingSet bindings,final boolean includeInferred) throws SailException {  final ASTContainer astContainer=new ASTContainer(queryRoot);  final QueryRoot originalQuery=astContainer.getOriginalAST();  originalQuery.setIncludeInferred(includeInferred);  try {    flushStatementBuffers(true,true);    return ASTEvalHelper.evaluateTupleQuery(getTripleStore(),astContainer,new QueryBindingSet(bindings),dataset);  } catch (  QueryEvaluationException e) {    throw new SailException(e);  }}  }
class C{  public static int maxInt(float a,float b){  return ceil(max(a,b));}  }
class C{  public CommentObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  private void buildLookupTable(){  final Set<Integer> seen_child_ids=new HashSet<>();  Trie previous_trie=null;  boolean first=true;  for (  final Trie trie : this.tries) {    if (!first) {      if (!haveSameSourceSide(previous_trie,trie) || !haveSameArity(previous_trie,trie)) {        throw new RuntimeException("SliceAggregatingTrie's subtries differ in sourceSide or arity. Was the text grammar sorted insufficiently?");      }    } else {      first=false;    }    previous_trie=trie;    if (trie.hasRules()) {      if (trieWithRules != null) {        throw new RuntimeException("SliceAggregatingTrie can only have one subtrie with rules. Was the text grammar sorted insufficiently?");      }      trieWithRules=trie;    }    final HashMap<Integer,? extends Trie> children=trie.getChildren();    for (    int id : children.keySet()) {      if (seen_child_ids.contains(id)) {        throw new RuntimeException("SliceAggregatingTrie's subtries contain non-disjoint child words. Was the text grammar sorted insufficiently?");      }      seen_child_ids.add(id);      lookup.put(id,children.get(id));    }  }}  }
class C{  public int compareTo(cp_info cp){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Utf8_info cu=(CONSTANT_Utf8_info)cp;  G.v().coffi_CONSTANT_Utf8_info_e1.reset(bytes);  G.v().coffi_CONSTANT_Utf8_info_e2.reset(cu.bytes);  for (; G.v().coffi_CONSTANT_Utf8_info_e1.hasMoreElements() && G.v().coffi_CONSTANT_Utf8_info_e2.hasMoreElements(); ) {    G.v().coffi_CONSTANT_Utf8_info_e1.nextElement();    G.v().coffi_CONSTANT_Utf8_info_e2.nextElement();    if (G.v().coffi_CONSTANT_Utf8_info_e1.c < G.v().coffi_CONSTANT_Utf8_info_e2.c)     return -1;    if (G.v().coffi_CONSTANT_Utf8_info_e2.c < G.v().coffi_CONSTANT_Utf8_info_e1.c)     return 1;  }  if (G.v().coffi_CONSTANT_Utf8_info_e1.hasMoreElements())   return -1;  if (G.v().coffi_CONSTANT_Utf8_info_e2.hasMoreElements())   return 1;  return 0;}  }
class C{  @Override public IList<? extends IAgent> listValue(final IScope scope,final IType contentsType,final boolean copy) throws GamaRuntimeException {  return GamaListFactory.create(scope,contentsType,iterable(scope));}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public boolean isUnresolved(){  return unresolved;}  }
class C{  protected void drawHole(Canvas c){  if (mChart.isDrawHoleEnabled()) {    float transparentCircleRadius=mChart.getTransparentCircleRadius();    float holeRadius=mChart.getHoleRadius();    float radius=mChart.getRadius();    PointF center=mChart.getCenterCircleBox();    if (transparentCircleRadius > holeRadius && mAnimator.getPhaseX() >= 1f && mAnimator.getPhaseY() >= 1f) {      int color=mTransparentCirclePaint.getColor();      mTransparentCirclePaint.setColor(color & 0x60FFFFFF);      mBitmapCanvas.drawCircle(center.x,center.y,radius / 100 * transparentCircleRadius,mTransparentCirclePaint);      mTransparentCirclePaint.setColor(color);    }    mBitmapCanvas.drawCircle(center.x,center.y,radius / 100 * holeRadius,mHolePaint);  }}  }
class C{  public static void main(String... args){  SelfDestructor.startCountdown(60);  String driver="org.h2.Driver";  String url="jdbc:h2:test", user="sa", password="sa";  for (int i=0; i < args.length; i++) {    if ("-url".equals(args[i])) {      url=args[++i];    } else     if ("-driver".equals(args[i])) {      driver=args[++i];    } else     if ("-user".equals(args[i])) {      user=args[++i];    } else     if ("-password".equals(args[i])) {      password=args[++i];    }  }  System.out.println("#Started; driver: " + driver + " url: "+ url+ " user: "+ user+ " password: "+ password);  try {    Class.forName(driver);    System.out.println("#Opening...");    Connection conn=DriverManager.getConnection(url,user,password);    Statement stat=conn.createStatement();    stat.execute("CREATE TABLE IF NOT EXISTS TEST" + "(ID IDENTITY, NAME VARCHAR)");    stat.execute("CREATE TABLE IF NOT EXISTS TEST2" + "(ID IDENTITY, NAME VARCHAR)");    ResultSet rs=stat.executeQuery("SELECT * FROM TEST");    while (rs.next()) {      rs.getLong("ID");      rs.getString("NAME");    }    rs=stat.executeQuery("SELECT * FROM TEST2");    while (rs.next()) {      rs.getLong("ID");      rs.getString("NAME");    }    stat.execute("DROP ALL OBJECTS DELETE FILES");    System.out.println("#Closing with delete...");    conn.close();    System.out.println("#Starting...");    conn=DriverManager.getConnection(url,user,password);    stat=conn.createStatement();    stat.execute("DROP ALL OBJECTS");    stat.execute("CREATE TABLE TEST(ID IDENTITY, NAME VARCHAR)");    stat.execute("CREATE TABLE TEST2(ID IDENTITY, NAME VARCHAR)");    stat.execute("CREATE TABLE TEST_META(ID INT)");    PreparedStatement prep=conn.prepareStatement("INSERT INTO TEST(NAME) VALUES(?)");    PreparedStatement prep2=conn.prepareStatement("INSERT INTO TEST2(NAME) VALUES(?)");    Random r=new Random(0);    for (int i=0; i < 2000; i++) {      if (i == 100) {        System.out.println("#Running...");      }      if (r.nextInt(100) < 10) {        conn.createStatement().execute("ALTER TABLE TEST_META " + "ALTER COLUMN ID INT DEFAULT 10");      }      if (r.nextBoolean()) {        if (r.nextBoolean()) {          prep.setString(1,new String(new char[r.nextInt(30) * 10]));          prep.execute();        } else {          prep2.setString(1,new String(new char[r.nextInt(30) * 10]));          prep2.execute();        }      } else {        if (r.nextBoolean()) {          conn.createStatement().execute("UPDATE TEST SET NAME = NULL");        } else {          conn.createStatement().execute("UPDATE TEST2 SET NAME = NULL");        }      }    }  } catch (  Throwable e) {    e.printStackTrace(System.out);    System.out.println("#Fail: " + e.toString());  }}  }
class C{  public boolean toggleImmediateAlert(final BluetoothDevice device){  final ProximityManager manager=(ProximityManager)getBleManager(device);  return manager.toggleImmediateAlert();}  }
class C{  @Override public int compare(Element element1,Element element2){  if (element1 instanceof JavaScriptElement) {    return compare((JavaScriptElement)element1,element2);  } else   if (element2 instanceof JavaScriptElement) {    return (-1) * compare((JavaScriptElement)element2,element1);  }  return FileSystemNodeComparator.getInstance().compare(element1,element2);}  }
class C{  public static final boolean isRectangleContainingRectangle(Rectangle a,Rectangle b){  return b.x >= a.x && (b.x + b.width) <= (a.x + a.width) && b.y >= a.y && (b.y + b.height) <= (a.y + a.height);}  }
class C{  public DBFField(){  this.dataType=DBFField.DBFDataType.STRING;  this.fieldLength=10;  this.decimalCount=0;}  }
class C{  public static byte[] toUnsignedByteArray(BigInteger bi){  if (bi == null) {    return null;  }  byte[] bb=bi.toByteArray();  if (bb[0] == 0) {    byte[] noZero=new byte[bb.length - 1];    System.arraycopy(bb,1,noZero,0,noZero.length);    return noZero;  } else {    return bb;  }}  }
class C{  void addToCommit(final FixedAllocator allocator){  if (allocator.m_prevCommit == null && m_commitHead != allocator) {    allocator.m_prevCommit=m_commitTail;    if (allocator.m_prevCommit != null) {      allocator.m_prevCommit.m_nextCommit=allocator;      m_commitTail=allocator;    } else {      m_commitHead=m_commitTail=allocator;    }  }}  }
class C{  public MulticastCaptureDevice(){  super();  captureFeatureBits=MMC.MPEG_AV_CAPTURE_MASK;}  }
class C{  public static void main(String[] args) throws FileNotFoundException, IOException {  int maxMoves=500;  NondominatedPopulation results=new Executor().withProblemClass(AntProblem.class,openDataFile(),maxMoves).withAlgorithm("NSGAII").withProperty("populationSize",500).withMaxEvaluations(250000).run();  AntProblem problem=new AntProblem(openDataFile(),maxMoves);  problem.evaluate(results.get(0));  problem.displayLastEvaluation();}  }
class C{  public TerminalPosition withRelative(int deltaColumn,int deltaRow){  return withRelativeRow(deltaRow).withRelativeColumn(deltaColumn);}  }
class C{  public void release(){synchronized (mModifyLock) {    mDetectUrlFileInfoMap.clear();  }}  }
class C{  private static List<LoadMetadataDetails> identifySegmentsToBeMergedBasedOnSegCount(List<LoadMetadataDetails> listOfSegmentsAfterPreserve){  List<LoadMetadataDetails> mergedSegments=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<LoadMetadataDetails> unMergedSegments=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  int[] noOfSegmentLevelsCount=CarbonProperties.getInstance().getCompactionSegmentLevelCount();  int level1Size=0;  int level2Size=0;  boolean first=true;  for (  int levelCount : noOfSegmentLevelsCount) {    if (first) {      level1Size=levelCount;      first=false;    } else {      level2Size=levelCount;      break;    }  }  int unMergeCounter=0;  int mergeCounter=0;  for (  LoadMetadataDetails segment : listOfSegmentsAfterPreserve) {    String segName=segment.getLoadName();    if (segName.endsWith(CarbonCommonConstants.LEVEL2_COMPACTION_INDEX) || (segment.isMajorCompacted() != null && segment.isMajorCompacted().equalsIgnoreCase("true"))) {      continue;    }    if (!isMergedSegment(segName)) {      unMergeCounter++;      unMergedSegments.add(segment);      if (unMergeCounter == (level1Size)) {        return unMergedSegments;      }    } else {      mergeCounter++;      mergedSegments.add(segment);      if (mergeCounter == (level2Size)) {        return mergedSegments;      }    }  }  return new ArrayList<>(0);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(transferable) ? transferable : null);  s.writeObject(SerializationTester.test(listener) ? listener : null);}  }
class C{  public RAMOutputStream(){  this("noname",new RAMFile(),false);}  }
class C{  final public boolean isInlineLiterals(){  return inlineLiterals;}  }
class C{  public void pair(BluetoothAdapter adapter,BluetoothDevice device,int passkey,byte[] pin){  pairOrAcceptPair(adapter,device,passkey,pin,true);}  }
class C{  private void autofocusStateChangeDispatcher(CaptureResult result){  if (result.getFrameNumber() < mLastControlAfStateFrameNumber || result.get(CaptureResult.CONTROL_AF_STATE) == null) {    return;  }  mLastControlAfStateFrameNumber=result.getFrameNumber();  AutoFocusState resultAFState=AutoFocusHelper.stateFromCamera2State(result.get(CaptureResult.CONTROL_AF_STATE));  boolean lensIsStopped=resultAFState == AutoFocusState.ACTIVE_FOCUSED || resultAFState == AutoFocusState.ACTIVE_UNFOCUSED || resultAFState == AutoFocusState.PASSIVE_FOCUSED || resultAFState == AutoFocusState.PASSIVE_UNFOCUSED;  if (mTakePictureWhenLensIsStopped && lensIsStopped) {    mCameraHandler.post(mTakePictureRunnable);    mTakePictureWhenLensIsStopped=false;  }  if (resultAFState != mLastResultAFState && mFocusStateListener != null) {    mFocusStateListener.onFocusStatusUpdate(resultAFState,result.getFrameNumber());  }  mLastResultAFState=resultAFState;}  }
class C{  public ExportTrustedCertificatePublicKeyAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ExportTrustedCertificatePublicKeyAction.statusbar"));  putValue(NAME,res.getString("ExportTrustedCertificatePublicKeyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExportTrustedCertificatePublicKeyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExportTrustedCertificatePublicKeyAction.image")))));}  }
class C{  public PlayerChooser(final PlayerList players,final IUIContext uiContext,final boolean allowNeutral){  this(players,null,uiContext,allowNeutral);}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  if (context == null) {    return false;  }  return isSystemApplication(context.getPackageManager(),packageName);}  }
class C{  private void appendMultiPointText(MultiPoint multiPoint,int level,Writer writer) throws IOException {  if (multiPoint.isEmpty()) {    writer.write("EMPTY");  } else {    writer.write("(");    for (int i=0; i < multiPoint.getNumGeometries(); i++) {      if (i > 0) {        writer.write(", ");        indentCoords(i,level + 1,writer);      }      writer.write("(");      appendCoordinate(((Point)multiPoint.getGeometryN(i)).getCoordinate(),writer);      writer.write(")");    }    writer.write(")");  }}  }
class C{  public boolean findServiceEntry(PrincipalName service){  KeyTabEntry entry;  for (int i=0; i < entries.size(); i++) {    entry=entries.elementAt(i);    if (entry.service.match(service)) {      if (EType.isSupported(entry.keyType)) {        return true;      } else       if (DEBUG) {        System.out.println("Found unsupported keytype (" + entry.keyType + ") for "+ service);      }    }  }  return false;}  }
class C{  public void nextTile(){  if ((x+=TILE_SIZE) >= cache.bboxX1) {    x=cache.bboxX0;    y+=TILE_SIZE;  }}  }
class C{  public static String ToString(double[]... v){  StringBuffer str=new StringBuffer();  for (int i=0; i < v.length; i++) {    if (i >= maxRows) {      str.append(".....................................\n");      break;    }    for (int j=0; j < v[i].length; j++) {      if (j >= maxCols) {        str.append("..... ");        break;      }      str.append(GlobalValues.fmtString.format(v[i][j]) + " ");    }    if (i < v.length - 1)     str.append("\n");  }  return str.toString();}  }
class C{  @HLEFunction(nid=0xE26F226E,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlInit(int stackSize,int priority,@CanBeNull TPointer product){  if (isInitialized) {    return SceKernelErrors.ERROR_NET_ADHOCCTL_ALREADY_INITIALIZED;  }  if (product.isNotNull()) {    adhocctlCurrentType=product.getValue32(0);    adhocctlCurrentAdhocID=product.getStringNZ(4,ADHOC_ID_LENGTH);    if (log.isDebugEnabled()) {      log.debug(String.format("Found product data: type=%d, AdhocID='%s'",adhocctlCurrentType,adhocctlCurrentAdhocID));    }  }  setState(PSP_ADHOCCTL_STATE_DISCONNECTED);  doTerminate=false;  doScan=false;  doDisconnect=false;  ThreadManForUser threadMan=Modules.ThreadManForUserModule;  adhocctlThread=threadMan.hleKernelCreateThread("SceNetAdhocctl",ThreadManForUser.NET_ADHOC_CTL_LOOP_ADDRESS,priority,stackSize,0,0,SysMemUserForUser.USER_PARTITION_ID);  threadMan.hleKernelStartThread(adhocctlThread,0,0,adhocctlThread.gpReg_addr);  networkAdapter.sceNetAdhocctlInit();  isInitialized=true;  return 0;}  }
class C{  private Flags(){}  }
class C{  public byte[] toByteArray(){  byte[] retVal=new byte[getPreambleLongs() << 3];  intoByteArray(retVal,0);  return retVal;}  }
class C{  public final static String createPlaylist(Context context,String playlistName) throws JSONException, IllegalArgumentException {  JSONObject jsonParam=new JSONObject();  JSONArray mutationsArray=new JSONArray();  JSONObject createObject=new JSONObject();  createObject.put("lastModifiedTimestamp","0");  createObject.put("name",playlistName);  createObject.put("creationTimestamp","-1");  createObject.put("type","USER_GENERATED");  createObject.put("deleted",false);  mutationsArray.put(new JSONObject().put("create",createObject));  jsonParam.put("mutations",mutationsArray);  mHttpClient.setUserAgent(mMobileClientUserAgent);  String result=mHttpClient.post(context,"https://www.googleapis.com/sj/v1.1/playlistbatch?alt=json&hl=en_US",new ByteArrayEntity(jsonParam.toString().getBytes()),"application/json");  mHttpClient.setUserAgent(mWebClientUserAgent);  return new JSONObject(result).optJSONArray("mutate_response").getJSONObject(0).optString("id");}  }
class C{  public DefaultMapper(final ClassLoaderReference classLoaderReference){  this.classLoaderReference=classLoaderReference;}  }
class C{  @Override public void visitVertex(StreetRouter.State state){  Integer edgeIdx=state.backEdge;  if (!(edgeIdx == null || edgeIdx == -1)) {    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());    feature.addProperty("weight",state.weight);    feature.addProperty("mode",state.streetMode);    feature.addProperty("backEdge",state.backEdge);    features.add(feature);  }}  }
class C{  protected void handleServerIncident(Event event){  logger.trace("Server incident: {}",event);}  }
class C{  public int readAll(CharBuffer buf,int length) throws IOException {  int len=buf.length();  buf.length(len + length);  int readLength=readAll(buf.buffer(),len,length);  if (readLength < 0)   buf.length(len); else   if (readLength < length)   buf.length(len + readLength);  return length;}  }
class C{  @Override public void clear(){  prepare(null);}  }
class C{  public FgsOrienter(DataSet dataSet){  out.println("GES constructor");  if (dataSet.isDiscrete()) {    DataBox box=new VerticalIntDataBox(dataSet.getNumRows(),dataSet.getNumColumns());    for (int i=0; i < dataSet.getNumRows(); i++) {      for (int j=0; j < dataSet.getNumColumns(); j++) {        box.set(i,j,dataSet.getInt(i,j));      }    }    BoxDataSet dataSet1=new BoxDataSet(box,dataSet.getVariables());    setDataSet(dataSet1);    BDeuScore score=new BDeuScore(dataSet1);    score.setSamplePrior(10);    score.setStructurePrior(0.001);    setDiscreteScore(score);    setStructurePrior(0.001);    setSamplePrior(10.);  } else {    setCovMatrix(new CovarianceMatrixOnTheFly(dataSet));  }  out.println("GES constructor done");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF:    return typeRef != null;}return super.eIsSet(featureID);}  }
class C{  public static Usericon createCustomIcon(Usericon.Type type,String idVersion,String restriction,String fileName,String channel){  try {    URL url=null;    if (fileName != null) {      if (fileName.startsWith("http")) {        url=new URL(fileName);      } else       if (!fileName.trim().isEmpty()) {        Path path=Paths.get(Chatty.getImageDirectory()).resolve(Paths.get(fileName));        url=path.toUri().toURL();      }    }    Usericon.Builder b=new Usericon.Builder(type,SOURCE_CUSTOM);    b.setChannel(channel);    b.setUrl(url);    b.setRestriction(restriction);    b.setFileName(fileName);    b.setBadgeType(BadgeType.parse(idVersion));    return b.build();  } catch (  MalformedURLException|InvalidPathException ex) {    LOGGER.warning("Invalid icon file: " + fileName);  }  return null;}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  private boolean checkAlliedOwnership(final Collection<Territory> listedTerrs,final int numberNeeded,final Collection<PlayerID> players,final GameData data){  int numberMet=0;  boolean satisfied=false;  final Collection<PlayerID> allies=Match.getMatches(data.getPlayerList().getPlayers(),Matches.isAlliedWithAnyOfThesePlayers(players,data));  for (  final Territory listedTerr : listedTerrs) {    if (Matches.isTerritoryOwnedBy(allies).match(listedTerr)) {      numberMet+=1;      if (numberMet >= numberNeeded) {        satisfied=true;        if (!getCountEach()) {          break;        }      }    }  }  if (getCountEach()) {    m_eachMultiple=numberMet;  }  return satisfied;}  }
class C{  public static void UNREACHABLE(String module,String err1) throws OptimizingCompilerException {  throw new OptimizingCompilerException(module,"Executed UNREACHABLE code",err1);}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void update(){  if (wrapper != null) {    control_mode.setText("Control Mode: " + CANTalon.TalonControlMode.valueOf(wrapper.mode).toString());    slotid.setText("Slot ID: " + wrapper.slotid);    follower.setText("Following: " + wrapper.follower);    pvbus.setValue(wrapper.pvbus);    voltage.setValue(wrapper.voltage);    speed.setText("Speed Delta: " + wrapper.speed);    position.setText("Position Delta: " + wrapper.position);  }  repaint();}  }
class C{  public void dispose(){}  }
class C{  @SuppressWarnings("unchecked") public ThrowingMockTokenFilterFactory(Map<String,String> args){  super(args);  String exceptionClassName=args.get("exceptionClassName");  if (exceptionClassName == null) {    throw new RuntimeException("Required parameter exceptionClassName is missing");  }  try {    exceptionClass=(Class<? extends RuntimeException>)Class.forName(exceptionClassName);  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isHandle(String handle){  return clientHandle.equals(handle);}  }
class C{  @Deprecated public Intent newIntent(Context context,Fragment fragment){  return newIntent(context,fragment.getClass(),fragment.getArguments());}  }
class C{  public void writeStartingTree(PartitionTreeModel model,XMLWriter writer){  setModelPrefix(model.getPrefix());switch (model.getStartingTreeType()) {case USER:case UPGMA:    Parameter rootHeight=model.getParameter("treeModel.rootHeight");  writer.writeComment("Construct a starting tree that is compatible with specified clade heights");Attribute[] attributes=(rootHeight.priorType != PriorType.NONE_TREE_PRIOR ? new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + STARTING_TREE),new Attribute.Default<String>(RescaledTreeParser.HEIGHT,"" + rootHeight.getInitial())} : new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + STARTING_TREE)});writer.writeOpenTag(RescaledTreeParser.RESCALED_TREE,attributes);writeSourceTree(model,writer);if (options.taxonSets != null && options.taxonSets.size() > 0 && !options.useStarBEAST) {for (Taxa taxa : options.taxonSets) {Double height=options.taxonSetsHeights.get(taxa);if (height != null) {writer.writeOpenTag(RescaledTreeParser.CLADE,new Attribute.Default<String>(RescaledTreeParser.HEIGHT,height.toString()));writer.writeTag("taxa",new Attribute.Default<String>(XMLParser.IDREF,taxa.getId()),true);writer.writeCloseTag(RescaledTreeParser.CLADE);} else if (options.taxonSetsMono.get(taxa)) {writer.writeOpenTag(RescaledTreeParser.CLADE);writer.writeTag("taxa",new Attribute.Default<String>(XMLParser.IDREF,taxa.getId()),true);writer.writeCloseTag(RescaledTreeParser.CLADE);}}}writer.writeCloseTag(RescaledTreeParser.RESCALED_TREE);break;case RANDOM:String simulatorId=modelPrefix + STARTING_TREE;String taxaId=TaxaParser.TAXA;AbstractPartitionData partition=options.getDataPartitions(model).get(0);if (!options.hasIdenticalTaxa()) {taxaId=partition.getPartitionTreeModel().getPrefix() + TaxaParser.TAXA;}if (partition instanceof PartitionPattern && ((PartitionPattern)partition).getPatterns().hasMask()) {taxaId=partition.getPrefix() + TaxaParser.TAXA;}writer.writeComment("Generate a random starting tree under the coalescent process");if (options.taxonSets != null && options.taxonSets.size() > 0 && !options.useStarBEAST) {writeSubTree(simulatorId,taxaId,options.taxonList,model,writer);} else {writer.writeOpenTag(CoalescentSimulatorParser.COALESCENT_SIMULATOR,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,simulatorId)});writeTaxaRef(taxaId,model,writer);writeInitialDemoModelRef(model,writer);writer.writeCloseTag(CoalescentSimulatorParser.COALESCENT_SIMULATOR);}break;default :throw new IllegalArgumentException("Unknown StartingTreeType");}}  }
class C{  public PositionInvertedIndex(Index index,String structureName,DocumentIndex _doi,Class<? extends IterablePosting> postingClass) throws IOException {  super(index,structureName,_doi,postingClass);}  }
class C{  public static <T>LazySetX<T> fromIterable(Iterable<T> it){  return fromIterable(SetX.<T>defaultCollector(),it);}  }
class C{  public boolean createScopedRequired(){  return false;}  }
class C{  public String subtract(Object... values){  double result=FunctionHandler.getDouble(values[0]);  for (int i=1; i < values.length; i++) {    result-=FunctionHandler.getDouble(values[i]);  }  return Double.toString(result);}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public ContentDispositionParser(String contentDisposition){  super(contentDisposition);}  }
class C{  public static void call(Context context,String number){  Uri uri=Uri.parse("tel:" + number);  Intent intent=new Intent(Intent.ACTION_CALL,uri);  if (ActivityCompat.checkSelfPermission(context,Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {    return;  }  context.startActivity(intent);}  }
class C{  public void finish() throws Exception {}  }
class C{  private static boolean isLoopTag(String tag){  tag=tag.toLowerCase();  return tag.contains("loop") && !(tag.contains("verschenkt") || tag.contains("verkackt"));}  }
class C{  public void test_group07() throws MalformedQueryException {  final String query="prefix lode: <http://linkedevents.org/ontology/>\n" + "prefix dc: <http://purl.org/dc/elements/1.1/>\n" + "prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"+ "select ?event ?eventName ?venue ?photo\n"+ "where {\n"+ "   ?photo lode:illustrate ?event .\n"+ "   {\n"+ "   select ?event ?eventName ?venue\n"+ "   where {\n"+ "         ?event dc:title ?eventName .\n"+ "         ?event lode:atPlace ?venue .\n"+ "         ?venue rdfs:label \"Live Music Hall\" .\n"+ "         }\n"+ "   }\n"+ "}\n"+ "GROUP BY ?event\n";  negativeTest(query);}  }
class C{  public static <S,T>List<T> projectSecond(final List<Pair<S,T>> list){  return list.stream().map(null).collect(Collectors.toList());}  }
class C{  public synchronized int recoveredOperations(){  return recovered;}  }
class C{  private int countToken(String token,String target){  int tokenIndex=0;  int count=0;  while (tokenIndex != -1) {    tokenIndex=target.indexOf(token,tokenIndex);    if (tokenIndex > -1) {      tokenIndex++;      count++;    }  }  return count;}  }
class C{  public void resumeIncomingFileTransfer(FileSharingSession session,boolean isGroup){  if (sLogger.isActivated()) {    sLogger.debug("Handle event incoming file transfer resuming");  }  mFileTransferService.resumeIncomingFileTransfer(session,isGroup);}  }
class C{  public Type basicGetBound(){  return bound;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasNext(){  return !stack.isEmpty();}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.222 -0500",hash_original_method="FE68BA0A4FE7F98468ECE570B1E66422",hash_generated_method="76F37DF4E44B5E50C1438BB5564C4AF2") public void delete(){  mBaseName.delete();  mBackupName.delete();}  }
class C{  public void forEachBlockPosMutableTopDown(Predicate<BlockPos> func){  BlockPos.MutableBlockPos blockPos=new BlockPos.MutableBlockPos();  int baseX=getMinBlockX();  int baseZ=getMinBlockZ();  int blockYMax=getMaxBlockY();  for (int x=0; x < 16; x++) {    for (int z=0; z < 16; z++) {      blockPos.setPos(baseX + x,blockYMax,baseZ + z);      for (int y=15; y >= 0; y--) {        boolean cont=func.test(blockPos);        blockPos.move(EnumFacing.DOWN);        if (!cont) {          break;        }      }    }  }}  }
class C{  public static int ATransOpToXRQuality(int affineTranformOp){switch (affineTranformOp) {case AffineTransformOp.TYPE_NEAREST_NEIGHBOR:    return FAST;case AffineTransformOp.TYPE_BILINEAR:  return GOOD;case AffineTransformOp.TYPE_BICUBIC:return BEST;}return -1;}  }
class C{  @Override public GraphQuery limit(final int limit){  this.limit=limit;  return this;}  }
class C{  @Bean @ConditionalOnProperty(name="edison.status.scheduler.cron") public Scheduler cronScheduler(){  return new CronScheduler(aggregator);}  }
class C{  public boolean isStoreArchiveOnFileSystem(){  Object oo=get_Value(COLUMNNAME_StoreArchiveOnFileSystem);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void transformToShareCard(){  Offer copyPlaceholderOffer=new Offer(offerToAccept);  copyPlaceholderOffer.setShareCard();  copyPlaceholderOffer.setCardIcon(R.drawable.twitter);  copyPlaceholderOffer.setTitle(context.getString(R.string.card_tell_friends));  copyPlaceholderOffer.setBody(context.getString(R.string.card_share_body));  copyPlaceholderOffer.setCostZero();  offers.set(cardPosition,copyPlaceholderOffer);  notifyDataSetChanged();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XNumber xnum=new XNumber((double)getCountOfContextNodeList(xctxt));  return xnum;}  }
class C{  public void onPageStarted(WebView view,String url,Bitmap favicon){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void simulationInitialized(double simStartTimeSeconds){  Tuple<SignalPlan,DgSylviaSignalPlan> plans=this.searchActivePlans();  this.activeSylviaPlan=plans.getSecond();  this.activeSylviaPlan.setFixedTimeCycle(plans.getFirst().getCycleTime());  this.setMaxExtensionTimeInSylviaPlan(plans);  this.calculateExtensionPoints(plans);  if (sylviaPlanDumpCount < 1) {    this.dumpSylviaPlan();    sylviaPlanDumpCount++;  }  this.initializeSensoring();}  }
class C{  public final void add(Action action,Constraints constraint,ActionManager actionManager){  addAction(action,constraint,actionManager);}  }
class C{  public Builder withThemeResId(int themeResId){  this.themeResId=themeResId;  return this;}  }
class C{  @SuppressWarnings({"unused"}) public RequestData addFile(String fieldName,String uploadFile){  addFile(fieldName,uploadFile,null);  return this;}  }
class C{  public XMLString xstr(){  if (null == m_xmlStr)   m_xmlStr=m_DTMXRTreeFrag.getDTM().getStringValue(m_dtmRoot);  return m_xmlStr;}  }
class C{  protected Object configureValue(Object value){  if (value != null) {    if (value instanceof Color) {      return new ColorUIResource((Color)value);    } else     if (value instanceof Font) {      return new FontUIResource((Font)value);    } else     if (value instanceof UIDefaults.LazyValue) {      value=((UIDefaults.LazyValue)value).createValue(null);    } else     if (value instanceof UIDefaults.ActiveValue) {      value=((UIDefaults.ActiveValue)value).createValue(null);    }  }  return value;}  }
class C{  public FacebookException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    BollingerBandsSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public byte[] encode(){  char dataLength=getDataLength();  char type=getAttributeType();  byte binary[]=new byte[HEADER_LENGTH + dataLength + (padding ? ((4 - dataLength % 4) % 4) : 0)];  binary[0]=(byte)(type >> 8);  binary[1]=(byte)(type & 0x00FF);  binary[2]=(byte)(dataLength >> 8);  binary[3]=(byte)(dataLength & 0x00FF);  System.arraycopy(data,0,binary,4,dataLength);  return binary;}  }
class C{  protected boolean hasXYScale(int index){  return ((getFlag(index) & WE_HAVE_AN_X_AND_Y_SCALE) != 0);}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  centerDrawable.setBounds(0,center - offset,getWidth(),center + offset);  centerDrawable.draw(canvas);}  }
class C{  public void deployContext(String path,URL config,URL war,boolean update) throws TomcatManagerException, IOException {  deployContext(path,config,war,update,null);}  }
class C{  public static <T extends NbtSerializable>void register(Function<NbtTagCompound,T> function,Class<T> clazz,Class<? extends T>... clazz2){  Validate.isTrue(NbtSerializable.class.isAssignableFrom(clazz),"Class must implements NbtSerializable");  if (tag.containsKey(clazz)) {    aliases.entrySet().removeIf(null);  }  tag.put(clazz,(Function)function);  for (  Class<? extends T> tClass : clazz2) {    aliases.put(tClass,clazz);  }}  }
class C{  public void executionSuspended(RunnableQueue rq){synchronized (UpdateManager.this) {    if (suspendCalled) {      running=false;      UpdateManagerEvent ev=new UpdateManagerEvent(this,null,null);      fireEvent(suspendedDispatcher,ev);    }  }}  }
class C{  public int readUnsignedShort(){  int result=shiftIntoInt(data,position,2);  position+=2;  return result;}  }
class C{  public boolean userHasGivenRoleInAnyTenant(StorageOSUser user,Role... roles){  if (userHasGivenRole(user,URI.create(user.getTenantId()),roles)) {    return true;  }  Map<String,Collection<String>> allSubtenantRoles=null;  for (  Role role : roles) {    if (isRoleTenantLevel(role.toString())) {      if (allSubtenantRoles == null) {        allSubtenantRoles=getSubtenantRolesForUser(user);      }      for (      Collection<String> subtenantRoles : allSubtenantRoles.values()) {        if (subtenantRoles.contains(role.toString())) {          return true;        }      }    }  }  return false;}  }
class C{  public static String instructionString(CodeIterator iter,int pos,ConstPool pool){  int opcode=iter.byteAt(pos);  if (opcode > opcodes.length || opcode < 0)   throw new IllegalArgumentException("Invalid opcode, opcode: " + opcode + " pos: "+ pos);  String opstring=opcodes[opcode];switch (opcode) {case BIPUSH:    return opstring + " " + iter.byteAt(pos + 1);case SIPUSH:  return opstring + " " + iter.s16bitAt(pos + 1);case LDC:return opstring + " " + ldc(pool,iter.byteAt(pos + 1));case LDC_W:case LDC2_W:return opstring + " " + ldc(pool,iter.u16bitAt(pos + 1));case ILOAD:case LLOAD:case FLOAD:case DLOAD:case ALOAD:case ISTORE:case LSTORE:case FSTORE:case DSTORE:case ASTORE:return opstring + " " + iter.byteAt(pos + 1);case IFEQ:case IFGE:case IFGT:case IFLE:case IFLT:case IFNE:case IFNONNULL:case IFNULL:case IF_ACMPEQ:case IF_ACMPNE:case IF_ICMPEQ:case IF_ICMPGE:case IF_ICMPGT:case IF_ICMPLE:case IF_ICMPLT:case IF_ICMPNE:return opstring + " " + (iter.s16bitAt(pos + 1) + pos);case IINC:return opstring + " " + iter.byteAt(pos + 1)+ ", "+ iter.signedByteAt(pos + 2);case GOTO:case JSR:return opstring + " " + (iter.s16bitAt(pos + 1) + pos);case RET:return opstring + " " + iter.byteAt(pos + 1);case TABLESWITCH:return tableSwitch(iter,pos);case LOOKUPSWITCH:return lookupSwitch(iter,pos);case GETSTATIC:case PUTSTATIC:case GETFIELD:case PUTFIELD:return opstring + " " + fieldInfo(pool,iter.u16bitAt(pos + 1));case INVOKEVIRTUAL:case INVOKESPECIAL:case INVOKESTATIC:return opstring + " " + methodInfo(pool,iter.u16bitAt(pos + 1));case INVOKEINTERFACE:return opstring + " " + interfaceMethodInfo(pool,iter.u16bitAt(pos + 1));case INVOKEDYNAMIC:return opstring + " " + iter.u16bitAt(pos + 1);case NEW:return opstring + " " + classInfo(pool,iter.u16bitAt(pos + 1));case NEWARRAY:return opstring + " " + arrayInfo(iter.byteAt(pos + 1));case ANEWARRAY:case CHECKCAST:return opstring + " " + classInfo(pool,iter.u16bitAt(pos + 1));case WIDE:return wide(iter,pos);case MULTIANEWARRAY:return opstring + " " + classInfo(pool,iter.u16bitAt(pos + 1));case GOTO_W:case JSR_W:return opstring + " " + (iter.s32bitAt(pos + 1) + pos);default :return opstring;}}  }
class C{  public void endCqQueryExecution(long start){  long ts=NanoTimer.getTime();  this._stats.incLong(_cqQueryExecutionTimeId,ts - start);  this._stats.incInt(_cqQueryExecutionInProgressId,-1);  this._stats.incLong(_cqQueryExecutionsCompletedId,1);}  }
class C{  public void testToMonitorString(){  Em18RfidProtocol instance=new Em18RfidProtocol();  String expResult="Reply from EM-18 reader. Tag read 7800656EB6 checksum C5 valid? yes";  assertEquals(expResult,instance.toMonitorString(msgStandalone));}  }
class C{  public static IProject createProject(String projectName) throws CoreException {  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  IProject project=workspaceRoot.getProject(projectName);  if (project.exists()) {    throw new IllegalStateException("Project " + projectName + " already exists in this workspace");  }  IProgressMonitor monitor=new NullProgressMonitor();  BuildPathsBlock.createProject(project,project.getLocationURI(),monitor);  return project;}  }
class C{  public static boolean isHigher8BitRegister(final String register){  return register.equals("ah") || register.equals("bh") || register.equals("ch")|| register.equals("dh");}  }
class C{  public F.Promise<Result> list(){  F.Promise<Set<UnitEntity>> entities=unitSetupService.findAll();  return entities.map(null);}  }
class C{  public void queryServiceUris(EnumSet<ServiceOption> options,boolean matchAllOptions,Operation get,EnumSet<ServiceOption> exclusionOptions){  ServiceDocumentQueryResult r=new ServiceDocumentQueryResult();  loop:   for (  Service s : this.attachedServices.values()) {    if (s.getProcessingStage() != ProcessingStage.AVAILABLE) {      continue;    }    if (s.hasOption(ServiceOption.UTILITY)) {      continue;    }    if (exclusionOptions != null) {      for (      ServiceOption exOp : exclusionOptions) {        if (s.hasOption(exOp)) {          continue loop;        }      }    }    String servicePath=s.getSelfLink();    if (matchAllOptions) {      boolean hasAllOptions=true;      for (      ServiceOption option : options) {        if (option != null && !s.hasOption(option)) {          hasAllOptions=false;          break;        }      }      if (hasAllOptions) {        r.documentLinks.add(servicePath);      }    } else {      for (      ServiceOption option : options) {        if (option != null && s.hasOption(option)) {          r.documentLinks.add(servicePath);          break;        }      }    }  }  r.documentOwner=getId();  get.setBodyNoCloning(r).complete();}  }
class C{  public double nextDouble(double least,double bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextDouble() * (bound - least) + least;}  }
class C{  public void printAttName(char[] space1,char[] name,char[] space2) throws IOException {  printSpaces(space1,false);  writer.write(name);  printSpaces(space2,false);}  }
class C{  private ProximityWaiter(final ZyGraph graph){  m_graph=graph;}  }
class C{  public int size(){  return 0;}  }
class C{  public NearestNeighbour(int k,boolean weighted){  this(k,weighted,new EuclideanDistance());}  }
class C{  public static Object jsFunction_varargs(Context cx,Scriptable thisObj,Object[] args,Function funObj){  StringBuffer buf=new StringBuffer();  buf.append("this = ");  buf.append(Context.toString(thisObj));  buf.append("; args = [");  for (int i=0; i < args.length; i++) {    buf.append(Context.toString(args[i]));    if (i + 1 != args.length)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  @Override public void clear(){  fromList.clear();}  }
class C{  public WeakHashtable(){}  }
class C{  ImmutableSortedMap<K,V> transformBeforeSave(ImmutableSortedMap<K,V> map){  return map;}  }
class C{  public String deletePaymentInfo() throws SaaSApplicationException {  String msgKey=BaseBean.INFO_PAYMENT_INFO_DELETED;  try {    getAccountService().deletePaymentInfo(paymentInfo);  } catch (  ObjectNotFoundException e) {    msgKey=BaseBean.INFO_PAYMENT_INFO_DELETED_CONCURRENTLY;  } finally {    paymentInfoBean.resetCachedPaymentInfo();  }  paymentInfo=null;  addMessage(msgKey);  return BaseBean.OUTCOME_SUCCESS;}  }
class C{  protected List<EvaluationStatistics> fromInstances(Instances data){  List<EvaluationStatistics> result;  EvaluationStatistics stat;  MultiLabelClassifier cls;  String rel;  int i;  int n;  Instance inst;  result=new ArrayList<>();  if (data.attribute(EvaluationStatistics.KEY_CLASSIFIER) == null) {    log("Failed to locate attribute: " + EvaluationStatistics.KEY_CLASSIFIER);    return result;  }  if (data.attribute(EvaluationStatistics.KEY_RELATION) == null) {    log("Failed to locate attribute: " + EvaluationStatistics.KEY_RELATION);    return result;  }  for (i=0; i < data.numInstances(); i++) {    inst=data.instance(i);    try {      cls=OptionUtils.fromCommandLine(MultiLabelClassifier.class,inst.stringValue(data.attribute(EvaluationStatistics.KEY_CLASSIFIER)));      rel=inst.stringValue(data.attribute(EvaluationStatistics.KEY_RELATION));      stat=new EvaluationStatistics(cls,rel,null);      for (n=0; n < inst.numAttributes(); n++) {        if (inst.attribute(n).isNumeric() && !inst.isMissing(n)) {          stat.put(inst.attribute(n).name(),inst.value(n));        }      }      result.add(stat);    } catch (    Exception e) {      handleException("Failed to process instance: " + inst,e);    }  }  return result;}  }
class C{  public String sendUnicodeTextSms(String text,String dest,String sender) throws SmsException, IOException {  SmsTextMessage textMessage=new SmsTextMessage(text,SmsAlphabet.UCS2,SmsMsgClass.CLASS_UNKNOWN);  return sendSms(textMessage,dest,sender);}  }
class C{  public RemoteProductServiceImpl(final DtoProductService dtoProductService,final ReindexService reindexService,final DtoProductCategoryService dtoProductCategoryService,final FederationFacade federationFacade){  super(dtoProductService);  this.reindexService=reindexService;  this.dtoProductCategoryService=dtoProductCategoryService;  this.federationFacade=federationFacade;}  }
class C{  public static String escapeForRegExPattern(String string){  StringBuffer pattern=new StringBuffer(string.length() + 16);  int length=string.length();  for (int i=0; i < length; i++) {    char ch=string.charAt(i);switch (ch) {case '\\':case '(':case ')':case '[':case ']':case '{':case '}':case '.':case '?':case '*':case '+':case '|':case '^':case '$':      pattern.append('\\').append(ch);    break;case '\r':  if (i + 1 < length && string.charAt(i + 1) == '\n')   i++;break;case '\n':pattern.append("\\R");break;case '\t':pattern.append("\\t");break;case '\f':pattern.append("\\f");break;case 0x07:pattern.append("\\a");break;case 0x1B:pattern.append("\\e");break;default :if (0 <= ch && ch < 0x20) {pattern.append("\\x");pattern.append(Integer.toHexString(ch).toUpperCase());} else {pattern.append(ch);}}}return pattern.toString();}  }
class C{  public void addException(String exceptionName){  mExceptionList.add(exceptionName);}  }
class C{  public void testTempQueueCleanup() throws Exception {  bridgeBrokers("BrokerA","BrokerB",false,2);  bridgeBrokers("BrokerB","BrokerC",false,2);  startAllBrokers();  BrokerItem brokerItem=brokers.get("BrokerC");  Connection conn=brokerItem.createConnection();  conn.start();  Session sess=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);  TemporaryQueue tempQ=sess.createTemporaryQueue();  Thread.sleep(5000);  for (Iterator<BrokerItem> i=brokers.values().iterator(); i.hasNext(); ) {    BrokerItem bi=i.next();    assertEquals("No queues on broker " + bi.broker.getBrokerName(),1,bi.broker.getAdminView().getTemporaryQueues().length);  }  tempQ.delete();  Thread.sleep(2000);  for (Iterator<BrokerItem> i=brokers.values().iterator(); i.hasNext(); ) {    BrokerItem bi=i.next();    assertEquals("Temp queue left behind on broker " + bi.broker.getBrokerName(),0,bi.broker.getAdminView().getTemporaryQueues().length);  }}  }
class C{  public void cacheFieldSources(IndexSchema schema){  fieldSources.clear();  for (  SchemaField field : schema.getFields().values()) {    FieldType type=field.getType();    if (type instanceof ExternalFileField) {      ExternalFileField eff=(ExternalFileField)type;      fieldSources.add(eff.getFileFloatSource(field,datadir));      log.info("Adding ExternalFileFieldReloader listener for field {}",field.getName());    }  }}  }
class C{  @Override public NestedQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public JsonLexer(Reader reader){  this.reader=reader instanceof LineColumnReader ? (LineColumnReader)reader : new LineColumnReader(reader);}  }
class C{  public void incrementComplexity(){  if (this.maxComplexity <= 0) {    return;  }  if (++this.complexity > this.maxComplexity) {    throw new RuntimeException("Tried to read NBT tag with too high complexity, " + this.complexity + " > "+ this.maxComplexity);  }}  }
class C{  private boolean isNotInArray(String str,String[] array){  for (int i=0; i < array.length; i++) {    if (str.equals(array[i])) {      return false;    }  }  return true;}  }
class C{  private boolean isAuthenticated(){  return SecurityContextHolder.getContext().getAuthentication() != null;}  }
class C{  private int submitBrokerRequest(Tradestrategy tradestrategy,ZonedDateTime endDate,int totalSumbitted) throws InterruptedException, BrokerModelException {  if (this.brokerModel.isHistoricalDataRunning(tradestrategy.getContract()) || this.isCancelled()) {    _log.error("submitBrokerRequest contract already running: " + tradestrategy.getContract().getSymbol() + " endDate: "+ endDate+ " barSize: "+ tradestrategy.getBarSize()+ " chartDays: "+ tradestrategy.getChartDays());    return totalSumbitted;  }  _log.debug("submitBrokerRequest: " + tradestrategy.getContract().getSymbol() + " endDate: "+ endDate+ " barSize: "+ tradestrategy.getBarSize()+ " chartDays:"+ tradestrategy.getChartDays());  if (contractRequests.containsKey(tradestrategy.getContract().getSymbol())) {    this.brokerModel.onContractDetails(tradestrategy.getContract());    contractRequests.remove(tradestrategy.getContract().getSymbol());  }  this.brokerModel.onBrokerData(tradestrategy,endDate);  totalSumbitted++;  hasSubmittedInSeconds();  if (totalSumbitted > getGrandTotal())   incrementGrandTotal();  int percent=(int)(((double)(totalSumbitted - this.brokerModel.getHistoricalData().size()) / getGrandTotal()) * 100d);  setProgress(percent);  if (((Math.floor(totalSumbitted / 58d) == (totalSumbitted / 58d)) && (totalSumbitted > 0)) && this.brokerModel.isConnected()) {    timerRunning=new AtomicInteger(0);    timer.start();synchronized (lockCoreUtilsTest) {      while (timerRunning.get() / 1000 < 601 && !this.isCancelled()) {        if ((timerRunning.get() % 60000) == 0) {          String message="Please wait " + (10 - (timerRunning.get() / 1000 / 60)) + " minutes as there are more than 60 data requests.";          publish(message);        }        lockCoreUtilsTest.wait();      }    }    timer.stop();    _log.debug("Finished wait 10min wait");  }  if (!this.isCancelled()) {synchronized (this.brokerModel.getHistoricalData()) {      while (this.brokerModel.getHistoricalData().size() > 8) {        this.brokerModel.getHistoricalData().wait();      }    }  }  return totalSumbitted;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isDefaultLinearMotion(){  return defaultLinearMotion;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  return builder.build();}  }
class C{  public double distanceSq(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.016 -0400",hash_original_method="7078C789E755843A9561416BB22BA5B9",hash_generated_method="DDB7932FA33B9D61DB58E3FB65C16177") public final boolean isErrorEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);}  }
class C{  public void select(final int index){  select(index,true);}  }
class C{  private void showSelectedShipping(Shipping shipping){  if (shipping != null && selectedShippingNameTv != null && selectedShippingPriceTv != null) {    selectedShippingNameTv.setText(shipping.getName());    if (shipping.getPrice() != 0) {      selectedShippingPriceTv.setText(shipping.getPriceFormatted());    } else {      selectedShippingPriceTv.setText(getText(R.string.free));    }    orderTotalPrice=shipping.getTotalPrice();    orderTotalPriceTv.setText(shipping.getTotalPriceFormatted());    deliveryPaymentLayout.setVisibility(View.VISIBLE);  } else {    Timber.e("Showing selected shipping with null values.");  }}  }
class C{  private long sizeOfArray(Object obj){  if (obj != null) {    Class ct=obj.getClass().getComponentType();    if (ct.isPrimitive()) {      return Array.getLength(obj) * sizeOfPrimitive(ct);    }    for (int i=0; i < Array.getLength(obj); i++) {      nextQueue.add(Array.get(obj,i));    }  }  return 0;}  }
class C{  public int size(){  int result=size;  if (result < 0) {    int len=specs.length;    result=0;    for (int i=0; i < len; i++) {      if (specs[i] != null) {        result++;      }    }    size=result;  }  return result;}  }
class C{  public void release(){  mLength=0;synchronized (sPool) {    sPool.offer(new SoftReference<Chunk>(this,sQueue));    sPool.notifyAll();  }}  }
class C{  private Multiplication(){}  }
class C{  public List<Integer> lexicalOrder(int n){  List<Integer> res=new ArrayList<>(n);  for (int i=1; i < 10; i++) {    dfs(i,n,res);  }  return res;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.AFTER_EVERY_EVENT___TIMER_1:    return getTimer_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void put(K key,V val){  if (list != null) {    Entry lookup=list.get(key);    if (lookup == null) {      list=new Entry(key,val,list);      size=size + 1;    } else {      lookup.val=val;    }  } else {    list=new Entry(key,val,list);    size=size + 1;  }}  }
class C{  public static void forPortToBeFree(int port){  Wait.until(portChecker(true,port));}  }
class C{  private void trySetIntentForActivePackageAndReceiverInForeground(Intent intent){  IntentUtils.tryToSetExcludeStoppedPackagesFlag(intent);  IntentUtils.tryToSetReceiverForegroundFlag(intent);}  }
class C{  @Override public UpdateResponse add(SolrInputDocument doc) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.add(doc);  if (this.solr1 != null)   ur=this.solr1.add(doc);  return ur;}  }
class C{  public static void rClearLops(Hop hop){  if (hop.getVisited() == VisitStatus.DONE)   return;  if (hop instanceof LiteralOp) {    if (hop.getLops() != null)     hop.getLops().getOutputs().clear();  } else {    hop.resetExecType();    hop.setLops(null);    if (hop.getInput() != null)     for (    Hop c : hop.getInput())     rClearLops(c);  }  hop.setVisited(VisitStatus.DONE);}  }
class C{  protected void copyToOpsw(){  opsw[1]=commonrail.isSelected();  opsw[3]=polarity.isSelected();  opsw[5]=transpond.isSelected();  opsw[6]=rx4connected1.isSelected();  opsw[7]=rx4connected2.isSelected();  opsw[9]=forceoccupied.isSelected();  opsw[10]=section16qualpower.isSelected();  opsw[11]=nomaster.isSelected();  opsw[12]=noterminate.isSelected();  opsw[13]=delayhalfsecond.isSelected();  opsw[19]=highthreshold.isSelected();  opsw[25]=drivefromswitch.isSelected();  opsw[26]=decodefromloconet.isSelected();  opsw[36]=reserved36.isSelected();  opsw[37]=longdelay.isSelected();  opsw[38]=extralongdelay.isSelected();  opsw[39]=transpondtrack.isSelected();  opsw[42]=poweronmsg.isSelected();  opsw[43]=antichatfilt.isSelected();  opsw[44]=antichatsens.isSelected();  opsw[40]=setdefault.isSelected();}  }
class C{  public ProcessRendererController(ProcessRendererView view,ProcessRendererModel model){  this.view=view;  this.model=model;}  }
class C{  public BusinessObjectDataCreateRequest createBusinessObjectDataCreateRequest(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String partitionKey,String partitionValue,String businessObjectDataStatusCode,String storageName,String storageDirectoryPath,List<StorageFile> storageFiles){  BusinessObjectDataCreateRequest businessObjectDataCreateRequest=new BusinessObjectDataCreateRequest();  businessObjectDataCreateRequest.setNamespace(namespaceCode);  businessObjectDataCreateRequest.setBusinessObjectDefinitionName(businessObjectDefinitionName);  businessObjectDataCreateRequest.setBusinessObjectFormatUsage(businessObjectFormatUsage);  businessObjectDataCreateRequest.setBusinessObjectFormatFileType(businessObjectFormatFileType);  businessObjectDataCreateRequest.setBusinessObjectFormatVersion(businessObjectFormatVersion);  businessObjectDataCreateRequest.setPartitionKey(partitionKey);  businessObjectDataCreateRequest.setPartitionValue(partitionValue);  businessObjectDataCreateRequest.setStatus(businessObjectDataStatusCode);  List<StorageUnitCreateRequest> storageUnits=new ArrayList<>();  businessObjectDataCreateRequest.setStorageUnits(storageUnits);  StorageUnitCreateRequest storageUnit=new StorageUnitCreateRequest();  storageUnits.add(storageUnit);  storageUnit.setStorageName(storageName);  if (storageDirectoryPath != null) {    StorageDirectory storageDirectory=new StorageDirectory();    storageUnit.setStorageDirectory(storageDirectory);    storageDirectory.setDirectoryPath(storageDirectoryPath);  }  storageUnit.setStorageFiles(storageFiles);  return businessObjectDataCreateRequest;}  }
class C{  public static Intent newSvcIntent(final Context ctx,final String action,final String message,final String to){  final Intent i=new Intent(action,null,ctx,MainService.class);  if (message != null) {    i.putExtra("message",message);  }  if (to != null) {    i.putExtra("to",to);  }  return i;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(flags);  sb.append(" ");  sb.append(proto);  sb.append(" ");  sb.append(alg);  if (key != null) {    if (Options.check("multiline")) {      sb.append(" (\n");      sb.append(base64.formatString(key,64,"\t",true));      sb.append(" ; key_tag = ");      sb.append(getFootprint());    } else {      sb.append(" ");      sb.append(base64.toString(key));    }  }  return sb.toString();}  }
class C{  AdminReplyProcessor(InternalDistributedSystem system,InternalDistributedMember member){  super(system,member);  this.isCancelled=false;  this.responder=member;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public TriggerItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static String randomAlphanumerical(final int len){  final StringBuilder sb=new StringBuilder(len);  for (int i=0; i < len; i++) {    sb.append(AB.charAt(random.nextInt(AB.length())));  }  return sb.toString();}  }
class C{  private static IPath[] decodePatterns(NamedNodeMap nodeMap,String tag){  String sequence=removeAttribute(tag,nodeMap);  if (!sequence.equals("")) {    char[][] patterns=CharOperation.splitOn('|',sequence.toCharArray());    int patternCount;    if ((patternCount=patterns.length) > 0) {      IPath[] paths=new IPath[patternCount];      int index=0;      for (int j=0; j < patternCount; j++) {        char[] pattern=patterns[j];        if (pattern.length == 0)         continue;        paths[index++]=new Path(new String(pattern));      }      if (index < patternCount)       System.arraycopy(paths,0,paths=new IPath[index],0,index);      return paths;    }  }  return null;}  }
class C{  public void gotoMatchingBracket(){  ISourceViewer sourceViewer=getSourceViewer();  IDocument document=sourceViewer.getDocument();  if (document == null)   return;  IRegion selection=getSignedSelection(sourceViewer);  int selectionLength=Math.abs(selection.getLength());  if (selectionLength > 1) {    setStatusLineErrorMessage(JSDTTypeScriptUIMessages.GotoMatchingBracket_error_invalidSelection);    sourceViewer.getTextWidget().getDisplay().beep();    return;  }  int sourceCaretOffset=selection.getOffset() + selection.getLength();  if (isSurroundedByBrackets(document,sourceCaretOffset))   sourceCaretOffset-=selection.getLength();  IRegion region=fBracketMatcher.match(document,sourceCaretOffset);  if (region == null) {    setStatusLineErrorMessage(JSDTTypeScriptUIMessages.GotoMatchingBracket_error_noMatchingBracket);    sourceViewer.getTextWidget().getDisplay().beep();    return;  }  int offset=region.getOffset();  int length=region.getLength();  if (length < 1)   return;  int anchor=fBracketMatcher.getAnchor();  int targetOffset=(ICharacterPairMatcher.RIGHT == anchor) ? offset + 1 : offset + length;  boolean visible=false;  if (sourceViewer instanceof ITextViewerExtension5) {    ITextViewerExtension5 extension=(ITextViewerExtension5)sourceViewer;    visible=(extension.modelOffset2WidgetOffset(targetOffset) > -1);  } else {    IRegion visibleRegion=sourceViewer.getVisibleRegion();    visible=(targetOffset >= visibleRegion.getOffset() && targetOffset <= visibleRegion.getOffset() + visibleRegion.getLength());  }  if (!visible) {    setStatusLineErrorMessage(JSDTTypeScriptUIMessages.GotoMatchingBracket_error_bracketOutsideSelectedElement);    sourceViewer.getTextWidget().getDisplay().beep();    return;  }  if (selection.getLength() < 0)   targetOffset-=selection.getLength();  sourceViewer.setSelectedRange(targetOffset,selection.getLength());  sourceViewer.revealRange(targetOffset,selection.getLength());}  }
class C{  public CalendarIntervalScheduleBuilder inTimeZone(TimeZone timezone){  this.timeZone=timezone;  return this;}  }
class C{  public Node(Object state,Node parent,Action action,double pathCost){  this(state);  this.parent=parent;  this.action=action;  this.pathCost=pathCost;}  }
class C{  private static void autoImportPackages(PsiJavaFile psiJavaFile,String packageNames) throws IncorrectOperationException {  StringTokenizer tok=new StringTokenizer(packageNames,",");  while (tok.hasMoreTokens()) {    String packageName=tok.nextToken().trim();    if (logger.isDebugEnabled())     logger.debug("Auto importing package: " + packageName);    PsiAdapter.addImportStatement(psiJavaFile,packageName);  }}  }
class C{  public final boolean pop(){  return m_values[m_index--];}  }
class C{  public void normalView(){  sensorMatrixNode.setVisible(true);  sensorMatrixNode.raiseToTop();  sensorMatrixNode.setOffset(0.0d,0.0d);  if (pixelMatrixNode.hasFocus()) {    pixelMatrixNode.setFocus(false);  }  if (!selectionEventHandlerInstalled) {    selectionEventHandlerInstalled=true;    addInputEventListener(selectionEventHandler);  }  centerCamera();}  }
class C{  @Override public void readFromNBT(NBTTagCompound nbt){  super.readFromNBT(nbt);  safetyRange=nbt.getInteger("safetyBanJing");  alarmRange=nbt.getInteger("alarmBanJing");  emitAll=nbt.getBoolean("emitAll");  frequency=nbt.getInteger("frequency");}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static TransferTransaction createTransferWithAttachment(final Account signer,final TransferTransactionAttachment attachment){  return new TransferTransaction(TimeInstant.ZERO,signer,Utils.generateRandomAccount(),Amount.fromNem(111),attachment);}  }
class C{  public void checkAndHandleLastVisibleCellChange(){  final int currentLastVisibleItem=mCurrentFirstVisibleItem + mCurrentVisibleItemCount;  final int previousLastVisibleItem=mPreviousFirstVisibleItem + mPreviousVisibleItemCount;  if (currentLastVisibleItem != previousLastVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      handleCellSwitch();    }  }}  }
class C{  protected void after(){  stop();}  }
class C{  public Matrix3f sub(Matrix3fc subtrahend){  return sub(subtrahend,this);}  }
class C{  @HLEFunction(nid=0x5E3D4B79,version=150) public int sceNetAdhocMatchingSelectTarget(@CheckArgument("checkMatchingId") int matchingId,pspNetMacAddress macAddress,int optLen,@CanBeNull TPointer optData){  return matchingObjects.get(matchingId).selectTarget(macAddress,optLen,optData.getAddress());}  }
class C{  public final boolean isProtected(){  return (this.modifiers & ClassFileConstants.AccProtected) != 0;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public Object[] parameters(){  return parameters;}  }
class C{  public DNSOutgoing addAnswer(DNSIncoming in,InetAddress addr,int port,DNSOutgoing out,DNSRecord rec) throws IOException {  DNSOutgoing newOut=out;  if (newOut == null) {    newOut=new DNSOutgoing(DNSConstants.FLAGS_QR_RESPONSE | DNSConstants.FLAGS_AA,false,in.getSenderUDPPayload());  }  try {    newOut.addAnswer(in,rec);  } catch (  final IOException e) {    newOut.setFlags(newOut.getFlags() | DNSConstants.FLAGS_TC);    newOut.setId(in.getId());    send(newOut);    newOut=new DNSOutgoing(DNSConstants.FLAGS_QR_RESPONSE | DNSConstants.FLAGS_AA,false,in.getSenderUDPPayload());    newOut.addAnswer(in,rec);  }  return newOut;}  }
class C{  public Query<T> limit(long limit){  this.limit=limit;  return this;}  }
class C{  private Map<String,AnnotationMirror> annosInPackage(PackageElement packageElement){  return createImportedAnnotationsMap(ElementFilter.typesIn(packageElement.getEnclosedElements()));}  }
class C{  public Map<Integer,Double> compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  public void updateMessage(int msgId,ContentValues values){  DemoDBManager.getInstance().updateMessage(msgId,values);}  }
class C{  protected void preparePlugin(ReplicatorPlugin plugin,PluginContext context) throws ReplicatorException {  ReplicatorRuntime.preparePlugin(plugin,context);}  }
class C{  public static byte[] tauAdicWNaf(byte mu,ZTauElement lambda,byte width,BigInteger pow2w,BigInteger tw,ZTauElement[] alpha){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 + width : 34 + width;  byte[] u=new byte[maxLength];  BigInteger pow2wMin1=pow2w.shiftRight(1);  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  int i=0;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      BigInteger uUnMod=r0.add(r1.multiply(tw)).mod(pow2w);      byte uLocal;      if (uUnMod.compareTo(pow2wMin1) >= 0) {        uLocal=(byte)uUnMod.subtract(pow2w).intValue();      } else {        uLocal=(byte)uUnMod.intValue();      }      u[i]=uLocal;      boolean s=true;      if (uLocal < 0) {        s=false;        uLocal=(byte)-uLocal;      }      if (s) {        r0=r0.subtract(alpha[uLocal].u);        r1=r1.subtract(alpha[uLocal].v);      } else {        r0=r0.add(alpha[uLocal].u);        r1=r1.add(alpha[uLocal].v);      }    } else {      u[i]=0;    }    BigInteger t=r0;    if (mu == 1) {      r0=r1.add(r0.shiftRight(1));    } else {      r0=r1.subtract(r0.shiftRight(1));    }    r1=t.shiftRight(1).negate();    i++;  }  return u;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.089 -0500",hash_original_method="91605D0E838B38F66B10D351585DF796",hash_generated_method="4B2EDA304ABE6B5B4E367975D6D6E455") public final boolean isRemoteVerificationEnabled(){  return __remoteVerificationEnabled;}  }
class C{  public void showDeselectedState(){  mLabelView.setSelected(false);}  }
class C{  public void addListener(ITLAPMOutputSourceListener listener){  if (!listeners.contains(listener)) {    listeners.add(listener);    for (Iterator it=outputData.iterator(); it.hasNext(); ) {      listener.newData((TLAPMMessage)it.next());    }  }}  }
class C{  @Override public WbXmlContent parse(WbXmlParser parser,byte[] data) throws IOException {  if (data.length != 6) {    throw new IOException("A WV opaque DateTime is always 6 byte in length!");  }  return new WbXmlContent(parseBytes(data));}  }
class C{  public AccountHeaderBuilder withCurrentProfileHiddenInList(boolean currentProfileHiddenInList){  mCurrentHiddenInList=currentProfileHiddenInList;  return this;}  }
class C{  static float toJavaVersionFloat(String version){  return toVersionFloat(toJavaVersionIntArray(version,JAVA_VERSION_TRIM_SIZE));}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (isHeadless()) {    return image;  }  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  protected static long parseIntegerValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  pduDataStream.reset();  if (temp > SHORT_INTEGER_MAX) {    return parseShortInteger(pduDataStream);  } else {    return parseLongInteger(pduDataStream);  }}  }
class C{  protected void visitJSR(int pos,byte[] code) throws BadBytecode {}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Set<Reference> toReferencesList(Vector<Object> referencesParams) throws LivingDocServerException {  Set<Reference> references=new TreeSet<Reference>();  for (  Object referenceParams : referencesParams) {    references.add(toReference((Vector<Object>)referenceParams));  }  return references;}  }
class C{  static int convertToPixels(float value,String unit,boolean isHor,float ref,ContainerWrapper parent,ComponentWrapper comp){  UnitValue uv=(isHor ? HOR_DEFS : VER_DEFS).get(unit);  return uv != null ? Math.round(value * uv.getPixels(ref,parent,comp)) : UnitConverter.UNABLE;}  }
class C{  private boolean isIdocAdmin(){  try {    UserProfile profile=_profiles.getProductProfile(UserDefs.PRODUCT_IDOC);    int prof=profile.getProfile();    if ((prof == UserDefs.PROFILE_MANAGER) || (prof == UserDefs.PROFILE_SUPERUSER)) {      return true;    }  } catch (  Exception e) {  }  return false;}  }
class C{  public void testAsyncRpc_goodResponse(){  Response response=Response.newBuilder().setStrData("Response Data").build();  FakeConnection fakeConnection=new FakeConnection(RPC_REQUEST);  rpcServer.registerService(fakeServiceImpl);  runHandler(fakeConnection);  assertFalse(fakeConnection.closed);  assertNull(fakeConnection.response);  fakeServiceImpl.callback.run(response);  assertTrue(fakeConnection.response.getCallback());  assertEquals(response.toByteString(),fakeConnection.response.getResponseProto());}  }
class C{  public static String removeWhiteSpace(String inputString){  if (WWUtil.isEmpty(inputString)) {    return inputString;  }  return inputString.replaceAll("\\s+","");}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public Number readNumber(Type target){  Number v;  if (currentDataType == AMF3.TYPE_NUMBER) {    v=buf.getDouble();  } else {    v=readAMF3Integer();  }  if (target instanceof Class && Number.class.isAssignableFrom((Class<?>)target)) {    Class cls=(Class)target;    if (!cls.isAssignableFrom(v.getClass())) {    }  }  return v;}  }
class C{  public Token(Object data){  fType=T_OTHER;  fData=data;}  }
class C{  public int lookup(Object key){  return lookup(key,hash(key));}  }
class C{  public FinalStateItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void clearAllHaptics(){  mHaptics.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:48:00.258 -0500",hash_original_method="78F43A087FD65470CED68BD5979667B7",hash_generated_method="A92D4CFE646C2B67AF06261CC970642D") public void finishActivityFromChild(Activity child,int requestCode){  try {    ActivityManagerNative.getDefault().finishSubActivity(mToken,child.mEmbeddedID,requestCode);  } catch (  RemoteException e) {  }}  }
class C{  public static OCSPResp createOCSPResponse(X509Certificate subject,X509Certificate issuer,X509Certificate signer,PrivateKey signerKey,CertificateStatus certStatus,Date thisUpdate,Date nextUpdate) throws Exception {  BasicOCSPRespBuilder builder=new BasicOCSPRespBuilder(new RespID(new X500Name(signer.getSubjectX500Principal().getName())));  CertificateID cid=CryptoUtils.createCertId(subject,issuer);  if (thisUpdate != null) {    builder.addResponse(cid,certStatus,thisUpdate,nextUpdate,null);  } else {    builder.addResponse(cid,certStatus);  }  ContentSigner contentSigner=CryptoUtils.createContentSigner(subject.getSigAlgName(),signerKey);  Object responseObject=builder.build(contentSigner,null,new Date());  OCSPResp resp=new OCSPRespBuilder().build(OCSPRespBuilder.SUCCESSFUL,responseObject);  return resp;}  }
class C{  public static DomainObjectExceptionBeanE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DomainObjectExceptionBeanE object=new DomainObjectExceptionBeanE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","DomainObjectExceptionBean").equals(reader.getName())) {          object.setDomainObjectExceptionBean(DomainObjectExceptionBean.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private static void initializeSpecializedMethod(int id){  if (VM.VerifyAssertions)   VM._assert(id >= 0);  if (VM.VerifyAssertions)   VM._assert(id < numSpecializedMethods);  if (VM.VerifyAssertions)   VM._assert(methods[id] == null);  methods[id]=MemoryManager.createSpecializedMethod(id);}  }
class C{  public final AlertDialog shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    return showDownloadDialog();  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  if (fragment == null) {    activity.startActivity(intent);  } else {    fragment.startActivity(intent);  }  return null;}  }
class C{  protected void buildDrawerSelectionList(){  int selectedPosition=-1;  int position=0;  ArrayList<IDrawerItem> profileDrawerItems=new ArrayList<>();  if (mProfiles != null) {    for (    IProfile profile : mProfiles) {      if (profile == mCurrentProfile) {        if (mCurrentHiddenInList) {          continue;        } else {          selectedPosition=position + mDrawer.getAdapter().getHeaderOffset();        }      }      if (profile instanceof IDrawerItem) {        ((IDrawerItem)profile).withSetSelected(false);        profileDrawerItems.add((IDrawerItem)profile);      }      position=position + 1;    }  }  mDrawer.switchDrawerContent(onDrawerItemClickListener,profileDrawerItems,selectedPosition);}  }
class C{  public FanPane(){  setPadding(new Insets(10,10,10,10));  circle.setStroke(Color.BLACK);  circle.setFill(Color.WHITE);  circle.centerXProperty().bind(widthProperty().divide(2));  circle.centerYProperty().bind(heightProperty().divide(2));  circle.radiusProperty().bind((heightProperty().divide(2)).multiply(.90));  getBlades();  getChildren().addAll(circle,paneForBlades);  fan=new Timeline(new KeyFrame(Duration.millis(50),null));  fan.setCycleCount(Timeline.INDEFINITE);  fan.play();}  }
class C{  @Override protected boolean beforeSave(boolean newRecord){  if (MWorkflow.WORKFLOWTYPE_Manufacturing.equals(getAD_Workflow().getWorkflowType())) {    setAction(MWFNode.ACTION_WaitSleep);    return true;  }  String action=getAction();  if (action.equals(ACTION_WaitSleep))   ; else   if (action.equals(ACTION_AppsProcess) || action.equals(ACTION_AppsReport)) {    if (getAD_Process_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AD_Process_ID"));      return false;    }  } else   if (action.equals(ACTION_AppsTask)) {    if (getAD_Task_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AD_Task_ID"));      return false;    }  } else   if (action.equals(ACTION_DocumentAction)) {    if (getDocAction() == null || getDocAction().length() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"DocAction"));      return false;    }  } else   if (action.equals(ACTION_EMail)) {    if (getR_MailText_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"R_MailText_ID"));      return false;    }  } else   if (action.equals(ACTION_SetVariable)) {    if (getAttributeValue() == null) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AttributeValue"));      return false;    }  } else   if (action.equals(ACTION_SubWorkflow)) {    if (getAD_Workflow_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AD_Workflow_ID"));      return false;    }  } else   if (action.equals(ACTION_UserChoice)) {    if (getAD_Column_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AD_Column_ID"));      return false;    }  } else   if (action.equals(ACTION_UserForm)) {    if (getAD_Form_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AD_Form_ID"));      return false;    }  } else   if (action.equals(ACTION_SmartBrowse)) {    if (getAD_Browse_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AD_Browse_ID"));      return false;    }  } else   if (action.equals(ACTION_UserWindow)) {    if (getAD_Window_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"AD_Window_ID"));      return false;    }  }  return true;}  }
class C{  public Arg(String aName,String desc,int expectedNumberOfArguments){  this(aName,desc,expectedNumberOfArguments,false);}  }
class C{  @Benchmark public void cachedEscapedUnderscoreCoding(){  run();}  }
class C{  public Measurement convert(Reading r,Point3d guess){  this.Xt=guess.x;  this.Yt=guess.y;  this.Zt=guess.z;  return convert(r);}  }
class C{  public List<String> all(VCardDataType dataType){  String dataTypeStr=toLocalName(dataType);  return all(dataTypeStr);}  }
class C{  public boolean showsDescription(){  return SettingsManager.getConfig().getBoolean(category.getConfigPath() + "." + getConfigName()+ ".Show-Description");}  }
class C{  public NoUniqueResultException(String message){  super(message);}  }
class C{  void init(Session session){  primaryIndex=new MVPrimaryIndex(session.getDatabase(),this,getId(),IndexColumn.wrap(getColumns()),IndexType.createScan(true));  indexes.add(primaryIndex);}  }
class C{  public void addBlockToTrash(Block block){  mDeletedBlocks.add(0,block);}  }
class C{  public NodeBuilder client(boolean client){  settings.put("node.client",client);  return this;}  }
class C{  private boolean validateNameSpace(String nameSpace){  boolean validNameSpace=false;  if (nameSpace.equalsIgnoreCase(Discovery_Namespaces.UNMANAGED_CGS.toString()) || nameSpace.equalsIgnoreCase(Discovery_Namespaces.ALL.toString())) {    validNameSpace=true;  }  return validNameSpace;}  }
class C{  private static long parseDurationFromString(String durationStr){  long duration=0;  durationStr=sanitizeDuration(durationStr);  String[] segments=durationStr.split(":");  try {    duration+=Integer.parseInt(segments[0]) * 3_600_000 + Integer.parseInt(segments[1]) * 60_000 + Integer.parseInt(segments[2]) * 1_000;  } catch (  Exception e) {    Timber.e(e,"Unable to parse a duration");  }  return duration;}  }
class C{  public char map(char src){  if (src < 0 || src > 255) {    return (char)0;  }  return (char)(map((byte)src) & 0xff);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapPanelChild && someObj instanceof Component) {    String parentName=((MapPanelChild)someObj).getParentName();    boolean hasNamedParent=parentName != null && parentName.trim().length() != 0;    String myName=getPropertyPrefix();    boolean hasName=myName != null && myName.trim().length() != 0;    @SuppressWarnings("null") boolean makeMyChild=(hasName && hasNamedParent && myName.equalsIgnoreCase(parentName)) || (!hasName && !hasNamedParent);    if (makeMyChild) {      if (Debug.debugging("basic")) {        Debug.output("MapPanel: adding " + someObj.getClass().getName());      }      MapPanelChild mpc=(MapPanelChild)someObj;      addMapPanelChild(mpc);      invalidate();    } else {      if (logger.isLoggable(Level.FINE)) {        logger.fine("MapPanel with name: " + myName + " not adding child ("+ someObj.getClass().getName()+ ") looking for: "+ parentName);      }    }  }  if (someObj instanceof MenuList) {    menuList=(MenuList)someObj;  }}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public static <T>SortedSet<T> sort(SortedSet<T> self){  return self;}  }
class C{  public boolean inInnermostLoop(BasicBlock bb){  LSTNode node=loopMap.get(bb);  return node != null && node.firstOutEdge() == null && node.loop != null;}  }
class C{  public void killAndJoinClientThreads() throws IllegalStateException {  threadStopper.killAndJoinClientThreads();}  }
class C{  private static void paintComponentBoundsImpl(final GuiEditor editor,@NotNull final RadComponent component,final Graphics g){  if (!(component instanceof RadContainer) && !(component instanceof RadNestedForm) && !component.isDragBorder()) {    return;  }  boolean highlightBoundaries=(getDesignTimeInsets(component) > 2);  if (component instanceof RadContainer && !component.isDragBorder()) {    RadContainer container=(RadContainer)component;    if (!highlightBoundaries && (container.getBorderTitle() != null || container.getBorderType() != BorderType.NONE)) {      return;    }  }  final Point point=SwingUtilities.convertPoint(component.getDelegee(),0,0,editor.getRootContainer().getDelegee());  g.translate(point.x,point.y);  try {    if (component.isDragBorder()) {      Graphics2D g2d=(Graphics2D)g;      g2d.setColor(LightColors.YELLOW);      g2d.setStroke(new BasicStroke(2.0f));      g2d.translate(1,1);    } else     if (highlightBoundaries) {      g.setColor(HIGHLIGHTED_BOUNDARY_COLOR);    } else     if (component.isSelected()) {      g.setColor(SELECTED_BOUNDARY_COLOR);    } else {      g.setColor(NON_SELECTED_BOUNDARY_COLOR);    }    g.drawRect(0,0,component.getWidth() - 1,component.getHeight() - 1);    if (component.isDragBorder()) {      g.translate(-1,-1);    }  }  finally {    g.translate(-point.x,-point.y);  }}  }
class C{  public CustomRequest(int method,String url,Class<T> clazz,Map<String,String> headers,Map<String,String> params,Response.Listener<T> listener,Response.ErrorListener errorListener){  super(method,url,errorListener);  this.clazz=clazz;  this.headers=headers;  this.params=params;  this.listener=listener;  this.mRequestBody=null;}  }
class C{  public void testSelfReference() throws Exception {  Bean selfRef=new Bean(null,"self-refs");  Bean first=new Bean(selfRef,"first");  selfRef.assignNext(selfRef);  ObjectMapper m=new ObjectMapper();  Bean[] wrapper=new Bean[]{first};  try {    writeAndMap(m,wrapper);  } catch (  JsonMappingException e) {    verifyException(e,"Direct self-reference leading to cycle");  }}  }
class C{  public void testSetIndexedProperty(){  UnboundBean instance=new UnboundBeanImpl();  instance.setIndexedProperty(INDEXED_PROPERTY,1,NEW_VALUE);  instance.setIndexedProperty(MAPPED_INDEXED,1,NEW_VALUE);  assertEquals(OLD_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  assertNull(instance.getIndexedProperty(MAPPED_INDEXED,0));  assertEquals(NEW_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,1));  assertNull(instance.getIndexedProperty(MAPPED_INDEXED,1));  instance.setIndexedProperty(INDEXED_PROPERTY,0,NEW_VALUE);  instance.setIndexedProperty(MAPPED_INDEXED,0,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  assertNull(instance.getIndexedProperty(MAPPED_INDEXED,0));  assertNull(instance.getIndexedProperty(NEW_PROPERTY,0));  instance.setIndexedProperty(NEW_PROPERTY,0,NEW_VALUE);  assertNull(instance.getIndexedProperty(NEW_PROPERTY,0));}  }
class C{  @Override public <T>AbsTask<T> start(AbsTask<T> task){  TaskProxy<T> proxy=null;  if (task instanceof TaskProxy) {    proxy=(TaskProxy<T>)task;  } else {    proxy=new TaskProxy<T>(task);  }  try {    proxy.doBackground();  } catch (  Throwable ex) {    LogUtil.e(ex.getMessage(),ex);  }  return proxy;}  }
class C{  @Deprecated public int _machine(){  return _machine;}  }
class C{  public static Test suite() throws Exception {  return suite(true);}  }
class C{  public ObjectFactory(){}  }
class C{  public static byte[] encodeArray(final byte[] a,final byte[] dest,final int start,final int length){  for (int k=0; k < length; k++) {switch (a[k + start]) {case (byte)'a':case (byte)'A':      dest[k]=1;    break;case (byte)'c':case (byte)'C':  dest[k]=2;break;case (byte)'g':case (byte)'G':dest[k]=3;break;case (byte)'t':case (byte)'T':dest[k]=4;break;default :dest[k]=0;break;}}return dest;}  }
class C{  public void calculateGridError(){  int length=mGridFrequencyResponse.length;  mGridErrors=new double[length];  for (int i=0; i < length; i++) {    mGridErrors[i]=mGrid.getWeight()[i] * (mGrid.getDesiredResponse()[i] - mGridFrequencyResponse[i]);  }}  }
class C{  private String putSpace(String str){  if (str == null || str.trim().length() == 0)   return "&nbsp;";  return str;}  }
class C{  public Option key(String key){  this.key=key;  return this;}  }
class C{  public static int round(float value){  if (USE_JDK_MATH) {    return Math.round(value);  }  return (int)FastMath.floor(value + 0.5f);}  }
class C{  public boolean isAcceptable(X509Certificate cert){  if (permitted_names == null) {    prepareNames();  }  byte[] bytes=getExtensionValue(cert,"2.5.29.17");  List<GeneralName> names;  try {    names=(bytes == null) ? new ArrayList<GeneralName>(1) : ((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  if ((excluded_names[4] != null) || (permitted_names[4] != null)) {    try {      names.add(new GeneralName(4,cert.getSubjectX500Principal().getName()));    } catch (    IOException e) {    }  }  return isAcceptable(names);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementretrieveallattributes.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedataexceedslength.class,args);}  }
class C{  public static String encode(byte[] a){  if (a == null || a.length == 0) {    return "x";  }  int[] cnt=new int[256];  for (int i=0; i < a.length; i++) {    cnt[a[i] & 0xff]++;  }  int shift=1;  int nEscapes=a.length;  for (int i=1; i < 256; i++) {    if (i == '\'') {      continue;    }    int sum=cnt[i] + cnt[(i + 1) & 0xff] + cnt[(i + '\'') & 0xff];    if (sum < nEscapes) {      nEscapes=sum;      shift=i;      if (nEscapes == 0) {        break;      }    }  }  int outLen=a.length + nEscapes + 1;  StringBuffer out=new StringBuffer(outLen);  out.append((char)shift);  for (int i=0; i < a.length; i++) {    char c=(char)((a[i] - shift) & 0xff);    if (c == 0) {      out.append((char)1);      out.append((char)1);    } else     if (c == 1) {      out.append((char)1);      out.append((char)2);    } else     if (c == '\'') {      out.append((char)1);      out.append((char)3);    } else {      out.append(c);    }  }  return out.toString();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.completePaint,stream);  SerialUtilities.writePaint(this.incompletePaint,stream);}  }
class C{  public boolean addService(Class<?> serviceClass,BeanContextServiceProvider provider){  return addService(serviceClass,provider,true);}  }
class C{  protected void calculateStatesStatesPruning(int[] states1,double[] matrices1,int[] states2,double[] matrices2,double[] partials3){  int v=0;  int u=0;  for (int j=0; j < matrixCount; j++) {    for (int k=0; k < patternCount; k++) {      int w=u;      int state1=states1[k];      int state2=states2[k];      if (state1 < 4 && state2 < 4) {        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=4;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=4;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=4;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=4;      } else       if (state1 < 4) {        partials3[v]=matrices1[w + state1];        v++;        w+=4;        partials3[v]=matrices1[w + state1];        v++;        w+=4;        partials3[v]=matrices1[w + state1];        v++;        w+=4;        partials3[v]=matrices1[w + state1];        v++;        w+=4;      } else       if (state2 < 4) {        partials3[v]=matrices2[w + state2];        v++;        w+=4;        partials3[v]=matrices2[w + state2];        v++;        w+=4;        partials3[v]=matrices2[w + state2];        v++;        w+=4;        partials3[v]=matrices2[w + state2];        v++;        w+=4;      } else {        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;      }    }    u+=matrixSize;  }}  }
class C{  public void addFld(ArchiveTokenFld fld){  m_flds.add(fld);}  }
class C{  @Override public void paintIcon(Component c,Graphics g,int x,int y){  Painter painter=(Painter)UIManager.get(prefix + "[Enabled]." + key);  if (painter != null) {    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;    Graphics2D gfx=(Graphics2D)g;    gfx.translate(x,y);    painter.paint(gfx,jc,width,height);    gfx.translate(-x,-y);  }}  }
class C{  public static boolean startsWith(char s[],int len,String prefix){  final int prefixLen=prefix.length();  if (prefixLen > len)   return false;  for (int i=0; i < prefixLen; i++)   if (s[i] != prefix.charAt(i))   return false;  return true;}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  @Override public Map<String,Set<URI>> findExportMasks(StorageSystem storage,List<String> initiatorNames,boolean mustHaveAllPorts) throws DeviceControllerException {  long startTime=System.currentTimeMillis();  Map<String,Set<URI>> matchingMasks=new HashMap<String,Set<URI>>();  CloseableIterator<CIMInstance> lunMaskingIter=null;  try {    StringBuilder builder=new StringBuilder();    WBEMClient client=_helper.getConnection(storage).getCimClient();    lunMaskingIter=_helper.getClarLunMaskingProtocolControllers(storage);    while (lunMaskingIter.hasNext()) {      CIMInstance instance=lunMaskingIter.next();      String systemName=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_SYSTEM_NAME);      if (!systemName.contains(storage.getSerialNumber())) {        continue;      }      String name=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_ELEMENT_NAME);      CIMProperty<String> deviceIdProperty=(CIMProperty<String>)instance.getObjectPath().getKey(SmisConstants.CP_DEVICE_ID);      Map<String,Integer> volumeWWNs=_helper.getVolumesFromLunMaskingInstance(client,instance);      List<String> initiatorPorts=_helper.getInitiatorsFromLunMaskingInstance(client,instance);      List<String> matchingInitiators=new ArrayList<String>();      for (      String port : initiatorNames) {        String normalizedName=Initiator.normalizePort(port);        if (initiatorPorts.contains(normalizedName)) {          matchingInitiators.add(normalizedName);        }      }      builder.append(String.format("%nXM:%s I:{%s} V:{%s}%n",name,Joiner.on(',').join(initiatorPorts),Joiner.on(',').join(volumeWWNs.keySet())));      if (!matchingInitiators.isEmpty()) {        ExportMask exportMask=ExportMaskUtils.getExportMaskByName(_dbClient,storage.getId(),name);        boolean foundMaskInDb=(exportMask != null);        if (!foundMaskInDb) {          exportMask=new ExportMask();          exportMask.setMaskName(name);          exportMask.setNativeId(deviceIdProperty.getValue());          exportMask.setStorageDevice(storage.getId());          exportMask.setId(URIUtil.createId(ExportMask.class));          exportMask.setCreatedBySystem(false);          List<String> storagePorts=_helper.getStoragePortsFromLunMaskingInstance(client,instance);          List<String> storagePortURIs=ExportUtils.storagePortNamesToURIs(_dbClient,storagePorts);          exportMask.setStoragePorts(storagePortURIs);          builder.append(String.format("   ----> SP { %s }\n" + "         URI{ %s }\n",Joiner.on(',').join(storagePorts),Joiner.on(',').join(storagePortURIs)));        } else {          refreshExportMask(storage,exportMask);          builder.append('\n');        }        exportMask.addToExistingVolumesIfAbsent(volumeWWNs);        exportMask.addToExistingInitiatorsIfAbsent(matchingInitiators);        for (        String port : matchingInitiators) {          Initiator existingInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(port),_dbClient);          if (existingInitiator != null) {            exportMask.addInitiator(existingInitiator);            exportMask.addToUserCreatedInitiators(existingInitiator);            exportMask.removeFromExistingInitiators(existingInitiator);          }        }        for (        String port : initiatorPorts) {          Initiator existingInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(port),_dbClient);          if (existingInitiator != null && !ExportMaskUtils.checkIfDifferentResource(exportMask,existingInitiator)) {            exportMask.addInitiator(existingInitiator);            exportMask.addToUserCreatedInitiators(existingInitiator);            exportMask.removeFromExistingInitiators(existingInitiator);          }        }        if (volumeWWNs != null) {          for (          String wwn : volumeWWNs.keySet()) {            URIQueryResultList results=new URIQueryResultList();            _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeWwnConstraint(wwn.toUpperCase()),results);            if (results != null) {              Iterator<URI> resultsIter=results.iterator();              if (resultsIter.hasNext()) {                Volume volume=_dbClient.queryObject(Volume.class,resultsIter.next());                if (volume != null) {                  Integer hlu=volumeWWNs.get(wwn);                  if (hlu == null) {                    _log.warn(String.format("The HLU for %s could not be found from the provider. Setting this to -1 (Unknown).",wwn));                    hlu=-1;                  }                  exportMask.addVolume(volume.getId(),hlu);                }              }            }          }        }        builder.append(String.format("XM:%s is matching. " + "EI: { %s }, EV: { %s }",name,Joiner.on(',').join(exportMask.getExistingInitiators()),Joiner.on(',').join(exportMask.getExistingVolumes().keySet())));        if (foundMaskInDb) {          ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,exportMask);          _dbClient.updateObject(exportMask);        } else {          _dbClient.createObject(exportMask);        }        for (        String it : matchingInitiators) {          Set<URI> maskURIs=matchingMasks.get(it);          if (maskURIs == null) {            maskURIs=new HashSet<URI>();            matchingMasks.put(it,maskURIs);          }          maskURIs.add(exportMask.getId());        }      }    }    _log.info(builder.toString());  } catch (  Exception e) {    String msg="Error when attempting to query LUN masking information: " + e.getMessage();    _log.error(MessageFormat.format("Encountered an SMIS error when attempting to query existing exports: {0}",msg),e);    throw SmisException.exceptions.queryExistingMasksFailure(msg,e);  } finally {    if (lunMaskingIter != null) {      lunMaskingIter.close();    }    long totalTime=System.currentTimeMillis() - startTime;    _log.info(String.format("findExportMasks took %f seconds",(double)totalTime / (double)1000));  }  return matchingMasks;}  }
class C{  public static long copyAndCloseBoth(InputStream input,OutputStream output) throws IOException {  try (InputStream inputStream=input){    return copyAndCloseOutput(inputStream,output);  } }  }
class C{  protected void removeTransactionHash(SIPTransaction sipTransaction){  SIPRequest sipRequest=sipTransaction.getOriginalRequest();  if (sipRequest == null)   return;  if (sipTransaction instanceof SIPClientTransaction) {    String key=sipTransaction.getTransactionId();    if (isLoggingEnabled()) {      stackLogger.logStackTrace();      stackLogger.logDebug("removing client Tx : " + key);    }    clientTransactionTable.remove(key);  } else   if (sipTransaction instanceof SIPServerTransaction) {    String key=sipTransaction.getTransactionId();    serverTransactionTable.remove(key);    if (isLoggingEnabled()) {      stackLogger.logDebug("removing server Tx : " + key);    }  }}  }
class C{  private void load(File file) throws IOException {  MatrixReader reader=null;  try {    reader=new MatrixReader(file);    A=new double[N];    B=new double[N];    C_A=new double[N][P];    C_B=new double[N][P];    for (int i=0; i < N; i++) {      A[i]=reader.next()[index];      for (int j=0; j < P; j++) {        C_A[i][j]=reader.next()[index];      }      for (int j=0; j < P; j++) {        C_B[i][j]=reader.next()[index];      }      B[i]=reader.next()[index];    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public void removeIinCoBrandNotification(ViewGroup rowView,String fieldId){  View view=rowView.findViewWithTag(VALIDATION_MESSAGE_TAG_PREFIX + fieldId);  if (view != null)   ((ViewGroup)view.getParent()).removeView(view);  removeCoBrandTooltip(rowView.findViewWithTag(COBRAND_TOOLTIP_TAG_PREFIX + fieldId));}  }
class C{  public void startHeartbeat(Database database,String name) throws SQLException {  ArrayList<Column> whereClause=new ArrayList<Column>();  ArrayList<Column> values=new ArrayList<Column>();  Timestamp now=new Timestamp(System.currentTimeMillis());  if (logger.isDebugEnabled())   logger.debug("Processing master heartbeat update: name=" + name + " time="+ now);  hbId.setValue(KEY);  whereClause.add(hbId);  hbSourceTstamp.setValue(now);  hbSalt.setValue(saltValue.getAndIncrement());  hbName.setValue(name);  values.add(hbSourceTstamp);  values.add(hbSalt);  values.add(hbName);  database.update(hbTable,whereClause,values);}  }
class C{  public static TStream<JsonObject> alertFilter(TStream<JsonObject> readingsDetector,int wellId,boolean simulateNormal){  readingsDetector=readingsDetector.filter(null);  return readingsDetector;}  }
class C{  public Assignment(Assignment ass,String var,Value val){  this();  addAssignment(ass);  addPair(var,val);}  }
class C{  public static boolean isUserEntry(Object o){  if (o == null) {    return false;  } else   if (o instanceof PO) {    return false;  } else {    return true;  }}  }
class C{  private void addIp(String ip,SMTPSession session){  long bTime=System.currentTimeMillis() + blockTime;  session.getLogger().debug("Add ip " + ip + " for "+ bTime+ " to blockList");synchronized (blockedIps) {    blockedIps.put(ip,Long.valueOf(bTime));  }}  }
class C{  public void clearElementos(){  elementos.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.074 -0500",hash_original_method="804828DF863853F51815A92894A43F8E",hash_generated_method="D2E7F82E0337CABE39D19F6537A91C59") public static void execApplication(String invokeWith,String niceName,int targetSdkVersion,FileDescriptor pipeFd,String[] args){  StringBuilder command=new StringBuilder(invokeWith);  command.append(" /system/bin/app_process /system/bin --application");  if (niceName != null) {    command.append(" '--nice-name=").append(niceName).append("'");  }  command.append(" com.android.internal.os.WrapperInit ");  command.append(pipeFd != null ? pipeFd.getInt$() : 0);  command.append(' ');  command.append(targetSdkVersion);  Zygote.appendQuotedShellArgs(command,args);  Zygote.execShell(command.toString());}  }
class C{  private String[] alphaMixedNumericSpecial(){  return combineStringArrays(alphaMixedNumeric(),JexlStringFunctions.special);}  }
class C{  public void stopPropagation(){  this.stopPropagation=true;}  }
class C{  static void rotateArray(double[][] a,int size,int x){  int i, j, n, start;  double t1, t2;  if (x == 0)   return;  j=start=0;  t1=a[0][0];  int len=a.length;  for (i=0; i < size; i++) {    n=(j >= x) ? j - x : j + size - x;    t2=a[n % len][n / len];    a[n % len][n / len]=t1;    t1=t2;    j=n;    if (j == start) {      start=++j;      t1=a[j % len][j / len];    }  }}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Set<RawProtein<ProSitePatternRawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  Map<String,RawProtein<ProSitePatternRawMatch>> proteinIdToRawProteinMap=new HashMap<String,RawProtein<ProSitePatternRawMatch>>(rawMatches.size());  for (  RawProtein<ProSitePatternRawMatch> rawMatch : rawMatches) {    proteinIdToRawProteinMap.put(rawMatch.getProteinIdentifier(),rawMatch);  }  Map<String,RawProtein<ProSitePatternRawMatch>> filteredMatches=postProcessor.process(proteinIdToRawProteinMap);  filteredMatchDAO.persist(filteredMatches.values());}  }
class C{  public boolean isFullyConnected(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    if (n.getNodeId() != syncManager.getLocalNodeId() && !isConnected(n.getNodeId())) {      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] missing connection",syncManager.getLocalNodeId(),n.getNodeId());      }      return false;    }  }  return true;}  }
class C{  protected void print(long v) throws IOException {  print(String.valueOf(v));}  }
class C{  public boolean markSupported(){  return src.markSupported();}  }
class C{  private static void deposit(IgniteCache<Integer,Account> cache,int acctId,double amount) throws IgniteException {  try (Transaction tx=Ignition.ignite().transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){    Account acct=cache.get(acctId);    assert acct != null;    acct.update(amount);    cache.put(acctId,acct);    tx.commit();  }   System.out.println();  System.out.println(">>> Transferred amount: $" + amount);}  }
class C{  private static int numSlots(int level){  return 1 << level;}  }
class C{  public ColorBlobDetector(Color color){  setColor(color);}  }
class C{  protected ForkJoinWorkerThread(ForkJoinPool pool){  super("aForkJoinWorkerThread");  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  public HtmlParser(){  this(XmlViolationPolicy.FATAL);}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  public long readLong(){  return ((long)(readInt()) << 32) + (readInt() & 0xffffffffL);}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (maximumSize != UNSET_INT) {    s.add("maximumSize",maximumSize);  }  if (maximumWeight != UNSET_INT) {    s.add("maximumWeight",maximumWeight);  }  if (expireAfterWriteNanos != UNSET_INT) {    s.add("expireAfterWrite",expireAfterWriteNanos + "ns");  }  if (expireAfterAccessNanos != UNSET_INT) {    s.add("expireAfterAccess",expireAfterAccessNanos + "ns");  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  if (valueEquivalence != null) {    s.addValue("valueEquivalence");  }  if (removalListener != null) {    s.addValue("removalListener");  }  return s.toString();}  }
class C{  public void restartGroupChat() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Restart group chat session related to the conversation " + mChatId);  }  ServerApiUtils.testIms();  RestartGroupChatSession session=mImService.restartGroupChatSession(mChatId);  session.addListener(this);  mChatService.addGroupChat(this);  session.startSession();}  }
class C{  public void write(OutputStream out,Integer indent,String xmlVersion) throws TransformerException {  write(out,new XCardOutputProperties(indent,xmlVersion));}  }
class C{  private void startObservation(){  Log_OC.d(TAG,"Loading all kept-in-sync files from database to start watching them");  Cursor cursorOnKeptInSync=getContentResolver().query(ProviderTableMeta.CONTENT_URI,null,ProviderTableMeta.FILE_KEEP_IN_SYNC + " = ?",new String[]{String.valueOf(1)},null);  if (cursorOnKeptInSync != null) {    if (cursorOnKeptInSync.moveToFirst()) {      String localPath="";      String accountName="";      Account account=null;      do {        localPath=cursorOnKeptInSync.getString(cursorOnKeptInSync.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH));        accountName=cursorOnKeptInSync.getString(cursorOnKeptInSync.getColumnIndex(ProviderTableMeta.FILE_ACCOUNT_OWNER));        account=new Account(accountName,MainApp.getAccountType());        if (!AccountUtils.exists(account,this) || localPath == null || localPath.length() <= 0) {          continue;        }        addObservedFile(localPath,account);      } while (cursorOnKeptInSync.moveToNext());    }    cursorOnKeptInSync.close();  }}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  private void channelsChanged(){  boolean channelsPresent=!getChannels().isEmpty();  doneButton.setEnabled(channelsPresent);  int count=getChannels().size();  if (count == 1 && doneButtonTextOneChannel != null) {    doneButton.setText(doneButtonTextOneChannel);  } else {    doneButton.setText(doneButtonText);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.702 -0500",hash_original_method="8C25F325A70D0FB77E33A1A14917611A",hash_generated_method="7B323461C536F7A06E8BB12E6EBDC73D") static synchronized void reset(){  caches.clear();}  }
class C{  public void updateCharacterStream(int columnIndex,java.io.Reader x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  @LargeTest public void testMountSingleEncryptedObbInvalidPassword(){  mFile=createObbFile("bad password@$%#@^*(!&)",R.raw.obb_enc_file100_orig3);  String filePath=mFile.getAbsolutePath();  mountObb(filePath,OBB_FILE_3_PASSWORD,OnObbStateChangeListener.ERROR_COULD_NOT_MOUNT);  unmountObb(filePath,DONT_FORCE);}  }
class C{  public int compareTo(Object o) throws ClassCastException {  ElemTemplateElement ro=(ElemTemplateElement)o;  int roPrecedence=ro.getStylesheetComposed().getImportCountComposed();  int myPrecedence=this.getStylesheetComposed().getImportCountComposed();  if (myPrecedence < roPrecedence)   return -1; else   if (myPrecedence > roPrecedence)   return 1; else   return this.getUid() - ro.getUid();}  }
class C{  public void processValueChange(ValueChangeEvent event){  FacesContext context=FacesContext.getCurrentInstance();  append(context,"ValueChangeEvent(" + event.getComponent().getClientId(context) + ","+ event.getOldValue()+ ","+ event.getNewValue()+ ")");}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1)   return path;  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){  LOG.d(TAG,"Incoming Result. Request code = " + requestCode);  super.onActivityResult(requestCode,resultCode,intent);  cordovaInterface.onActivityResult(requestCode,resultCode,intent);}  }
class C{  public static IPath installTestSdk(Bundle bundle,URL fileUrl){  byte[] buffer=new byte[1024];  IPath sdkRootPath=null;  File output=bundle.getDataFile("");  try (ZipInputStream is=new ZipInputStream(new FileInputStream(new File(FileLocator.toFileURL(fileUrl).getPath())))){    ZipEntry entry=is.getNextEntry();    if (entry != null) {      String rootEntryPath=Path.fromPortableString(entry.getName()).segment(0);      sdkRootPath=Path.fromPortableString(new File(output,rootEntryPath).getAbsolutePath());      if (!sdkRootPath.toFile().exists()) {        while (entry != null) {          IPath fileName=Path.fromPortableString(entry.getName());          if (!"demos".equals(fileName.segment(1)) && !"samples".equals(fileName.segment(1))) {            File newFile=new File(output + File.separator + fileName);            if (!entry.isDirectory()) {              new File(newFile.getParent()).mkdirs();              try (FileOutputStream os=new FileOutputStream(newFile)){                int bytesRead;                while ((bytesRead=is.read(buffer)) > 0) {                  os.write(buffer,0,bytesRead);                }              }             }          }          entry=is.getNextEntry();        }      }    }    is.closeEntry();  } catch (  IOException e) {    throw new IllegalStateException("Unable to install the SDK. fileUrl=" + fileUrl,e);  }  return sdkRootPath;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=Dvfs.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="dvfs";  String vmSelectionPolicy="";  String parameter="";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public boolean isMultiValueConstraint(Class<? extends Annotation> annotationType){  boolean isMultiValueConstraint=false;  final Method method=run(GetMethod.action(annotationType,"value"));  if (method != null) {    Class<?> returnType=method.getReturnType();    if (returnType.isArray() && returnType.getComponentType().isAnnotation()) {      @SuppressWarnings("unchecked") Class<? extends Annotation> componentType=(Class<? extends Annotation>)returnType.getComponentType();      if (isConstraintAnnotation(componentType) || isBuiltinConstraint(componentType)) {        isMultiValueConstraint=true;      } else {        isMultiValueConstraint=false;      }    }  }  return isMultiValueConstraint;}  }
class C{  public void write(final int b) throws IOException {  stream.write(b);}  }
class C{  @SafeVarargs public final GenericFastItemAdapter<Model,Item> addModel(Model... models){  mItemAdapter.addModel(models);  return this;}  }
class C{  public void testForcedSyncFailure_DisplaysSyncError(){  mController.init();  mController.onRefreshRequested();  SyncFinishedEvent event=new SyncFailedEvent();  mFakeEventBus.post(event);  verify(mMockUi).showRefreshError();}  }
class C{  protected synchronized ProjHolder push(ProjHolder proj){  if (backStack == null) {    backStack=new Stack<ProjHolder>();  }  if (backStack.size() >= stackSize) {    backStack.removeElementAt(0);  }  return backStack.push(proj);}  }
class C{  public static List<MgmtTarget> toResponse(final Collection<Target> targets){  if (targets == null) {    return Collections.emptyList();  }  return targets.stream().map(null).collect(Collectors.toList());}  }
class C{  public MemberList<TMember> allMembers(ContainerType<?> type,boolean includeImplicitSuperTypes,boolean includePolyfills){  return allMembers(type,includeImplicitSuperTypes,includePolyfills,true);}  }
class C{  private void addProgrammerBox(){  JPanel pane3a=new JPanel();  pane3a.setLayout(new BoxLayout(pane3a,BoxLayout.X_AXIS));  pane3a.add(new JLabel(Bundle.getMessage("ProgrammerFormat")));  programmerBox=new JComboBox<String>(ProgDefault.findListOfProgFiles());  programmerBox.setSelectedIndex(0);  if (ProgDefault.getDefaultProgFile() != null) {    programmerBox.setSelectedItem(ProgDefault.getDefaultProgFile());  }  pane3a.add(programmerBox);  add(pane3a);}  }
class C{  public boolean test(Object receiver,String property,Object[] args,Object expectedValue){  if ("isCurrentSpec".equals(property)) {    if (receiver != null && receiver instanceof Spec) {      Spec spec=(Spec)receiver;      Spec current=ToolboxHandle.getCurrentSpec();      if (current == spec) {        return true;      }    }  }  return false;}  }
class C{  public static CameraUtil instance(){  return Singleton.INSTANCE;}  }
class C{  public static String loadTextFile(InputStream stream,String encoding,int maxSize){  if (encoding.trim().isEmpty()) {    encoding="UTF-8";  }  StringWriter writer=new StringWriter();  InputStreamReader reader=null;  try {    reader=new InputStreamReader(stream,encoding);    int size=0;    int next=reader.read();    while (next >= 0) {      writer.write(next);      next=reader.read();      if (size > maxSize) {        throw new BotException("File size limit exceeded: " + size + " > "+ maxSize+ " token: "+ next);      }      size++;    }  } catch (  IOException exception) {    throw new BotException("IO Error",exception);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException ignore) {      }    }    if (stream != null) {      try {        stream.close();      } catch (      IOException ignore) {      }    }  }  return writer.toString();}  }
class C{  public CopyOnWriteArraySet(Collection<? extends E> c){  al=new CopyOnWriteArrayList<E>();  al.addAllAbsent(c);}  }
class C{  private static void fakePerlin3dConstructor(Random random){  random.nextDouble();  random.nextDouble();  random.nextDouble();  for (int i=0; i < 256; i++) {    random.nextInt(256 - i);  }}  }
class C{  @Override public void release(){  this.name=null;  this.value=null;}  }
class C{  public static IntegerPolynomial fromBinary3Sves(byte[] data,int N){  return new IntegerPolynomial(ArrayEncoder.decodeMod3Sves(data,N));}  }
class C{  protected DeActivateFor_Impl(){  super();}  }
class C{  public <T extends Layout>Class<T> genLayoutImpl(final Class<T> interfaceCls){  try {    @SuppressWarnings("unchecked") Class<T> implCls=(Class<T>)implClassloader.loadLayoutClass(interfaceCls);    unsafe.ensureClassInitialized(implCls);    Field f=implCls.getDeclaredField("unsafe");    unsafe.putObject(unsafe.staticFieldBase(f),unsafe.staticFieldOffset(f),unsafe);    return implCls;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public Dimension2D(){}  }
class C{  public FileTypeEntity createFileTypeEntity(String fileTypeCode){  return createFileTypeEntity(fileTypeCode,String.format("Description of \"%s\" file type.",fileTypeCode));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.027 -0500",hash_original_method="2DA424A8A87A21D10409F02AA8AEC0E6",hash_generated_method="3A207DA0834E6BC699C9CF6E0EAC2295") public void didReceiveData(byte[] data,int length){synchronized (mDataBuilder) {    mDataBuilder.append(data,0,length);  }}  }
class C{  private void processOutputIntroPage(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String ssAuthUrl=EventPublisher.getSsAuthSubUrl(getCurrentUrl(request) + "?action=acceptAuthSubToken");  request.setAttribute("ssAuthUrl",ssAuthUrl);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher("/WEB-INF/jsp/outputIntroPage.jsp");  dispatcher.forward(request,response);}  }
class C{  protected boolean clearResult(){  if (gotResult) {    gotResult=false;    return true;  }  return false;}  }
class C{  @Override public V remove(Object key){  Entry<K,V> entry=removeEntry(key);  if (entry != null) {    return entry.value;  }  return null;}  }
class C{  public char[] computeUniqueKey(boolean isLeaf){  return constantPoolName();}  }
class C{  public Customer readCustomer(AppContext ctx){  AppContext root=getRootUserContext(ctx.getCustomerId());  return DAOFactory.getDAOFactory().getDAO(Customer.class).readNotNull(root,new CustomerPK(ctx.getCustomerId()));}  }
class C{  public static long decodeZigZag64(final long n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public CoreSpringModuleConfig(){  LOGGER.debug("Security manager is " + (SecurityManagerHelper.isSecurityManagerEnabled() ? "ENABLED" : "DISABLED"));}  }
class C{  public String justAnExample(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  log.info("JustAnExample");  return "";}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public NameClassPair(String name,String className){  this.name=name;  this.className=className;}  }
class C{  public static Long createLong(String str){  if (str == null) {    return null;  }  return Long.valueOf(str);}  }
class C{  public void componentHidden(ComponentEvent e){}  }
class C{  @Override protected void doAction(){  File exportFile=null;  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());    Certificate[] certificates=keyStore.getCertificateChain(alias);    DExportKeyPair dExportKeyPair=new DExportKeyPair(frame,alias,applicationSettings.getPasswordQualityConfig());    dExportKeyPair.setLocationRelativeTo(frame);    dExportKeyPair.setVisible(true);    if (!dExportKeyPair.exportSelected()) {      return;    }    exportFile=dExportKeyPair.getExportFile();    Password exportPassword=dExportKeyPair.getExportPassword();    KeyStore pkcs12=KeyStoreUtil.create(KeyStoreType.PKCS12);    certificates=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(certificates));    pkcs12.setKeyEntry(alias,privateKey,exportPassword.toCharArray(),certificates);    KeyStoreUtil.save(pkcs12,exportFile,exportPassword);    JOptionPane.showMessageDialog(frame,res.getString("ExportKeyPairAction.ExportKeyPairSuccessful.message"),res.getString("ExportKeyPairAction.ExportKeyPair.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  FileNotFoundException ex) {    String message=MessageFormat.format(res.getString("ExportKeyPairAction.NoWriteFile.message"),exportFile);    JOptionPane.showMessageDialog(frame,message,res.getString("ExportKeyPairAction.ExportKeyPair.Title"),JOptionPane.WARNING_MESSAGE);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.CAST_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;case N4JSPackage.CAST_EXPRESSION__TARGET_TYPE_REF:setTargetTypeRef((TypeRef)null);return;}super.eUnset(featureID);}  }
class C{  public static Set<NetworkLite> queryNetworkLites(Collection<URI> uris,DbClient dbClient){  Set<NetworkLite> networks=new HashSet<NetworkLite>();  NetworkLite networkLite=null;  for (  URI uri : uris) {    networkLite=getNetworkLite(uri,dbClient);    if (networkLite != null) {      networks.add(networkLite);    }  }  return networks;}  }
class C{  public RecurrenceProperty(Recurrence recur){  super(recur);}  }
class C{  public void parse(String systemId) throws org.xml.sax.SAXException, IOException {  parse(new InputSource(systemId));}  }
class C{  protected void startTag(Element elem) throws IOException, BadLocationException {  if (synthesizedElement(elem)) {    return;  }  AttributeSet attr=elem.getAttributes();  Object nameAttribute=attr.getAttribute(StyleConstants.NameAttribute);  HTML.Tag name;  if (nameAttribute instanceof HTML.Tag) {    name=(HTML.Tag)nameAttribute;  } else {    name=null;  }  if (name == HTML.Tag.PRE) {    inPre=true;    preEndOffset=elem.getEndOffset();  }  closeOutUnwantedEmbeddedTags(attr);  if (inContent) {    writeLineSeparator();    inContent=false;    newlineOutputed=false;  }  if (completeDoc && name == HTML.Tag.BODY && !wroteHead) {    wroteHead=true;    indentSmart();    write("<head>");    writeLineSeparator();    incrIndent();    writeStyles(((HTMLDocument)getDocument()).getStyleSheet());    decrIndent();    writeLineSeparator();    indentSmart();    write("</head>");    writeLineSeparator();  }  indentSmart();  write('<');  write(elem.getName());  writeAttributes(attr);  write('>');  if (name != HTML.Tag.PRE) {    writeLineSeparator();  }  if (name == HTML.Tag.TEXTAREA) {    textAreaContent(elem.getAttributes());  } else   if (name == HTML.Tag.SELECT) {    selectContent(elem.getAttributes());  } else   if (completeDoc && name == HTML.Tag.BODY) {    writeMaps(((HTMLDocument)getDocument()).getMaps());  } else   if (name == HTML.Tag.HEAD) {    HTMLDocument document=(HTMLDocument)getDocument();    wroteHead=true;    incrIndent();    writeStyles(document.getStyleSheet());    if (document.hasBaseTag()) {      indentSmart();      write("<base href=\"" + document.getBase() + "\">");      writeLineSeparator();    }    decrIndent();  }}  }
class C{  public boolean isValueTypeBoolean(){  return valueType == ParameterValueType.BOOLEAN;}  }
class C{  public boolean valueAt(int index){  return mValues[index];}  }
class C{  public static void schedule(){  model.schedule();}  }
class C{  public Matrix4f(Quaternion q1,Vector3f t1,float s){  m00=(float)(s * (1.0 - 2.0 * q1.y * q1.y - 2.0 * q1.z * q1.z));  m10=(float)(s * (2.0 * (q1.x * q1.y + q1.w * q1.z)));  m20=(float)(s * (2.0 * (q1.x * q1.z - q1.w * q1.y)));  m01=(float)(s * (2.0 * (q1.x * q1.y - q1.w * q1.z)));  m11=(float)(s * (1.0 - 2.0 * q1.x * q1.x - 2.0 * q1.z * q1.z));  m21=(float)(s * (2.0 * (q1.y * q1.z + q1.w * q1.x)));  m02=(float)(s * (2.0 * (q1.x * q1.z + q1.w * q1.y)));  m12=(float)(s * (2.0 * (q1.y * q1.z - q1.w * q1.x)));  m22=(float)(s * (1.0 - 2.0 * q1.x * q1.x - 2.0 * q1.y * q1.y));  m03=t1.x;  m13=t1.y;  m23=t1.z;  m30=0.0f;  m31=0.0f;  m32=0.0f;  m33=1.0f;}  }
class C{  public static Adjacency parseAdjacency(String chr,int pos,String altCall) throws IOException {  int br1=altCall.indexOf('[');  final boolean mateIsForward;  final int br2;  if (br1 >= 0) {    mateIsForward=true;    br2=altCall.indexOf('[',br1 + 1);  } else {    mateIsForward=false;    br1=altCall.indexOf(']');    br2=altCall.indexOf(']',br1 + 1);  }  if (br1 < 0) {    return null;  }  final String errmsg="Invalid .vcf adjacency call: ";  if (br2 < 0) {    throw new IOException(errmsg + altCall);  }  assert 0 <= br1 && br1 < br2 && br2 < altCall.length();  final String matepos;  final String bases;  final boolean isForward;  if (br1 == 0) {    isForward=false;    matepos=altCall.substring(1,br2);    bases=altCall.substring(br2 + 1);  } else {    if (br2 != altCall.length() - 1) {      throw new IOException(errmsg + altCall);    }    isForward=true;    bases=altCall.substring(0,br1);    matepos=altCall.substring(br1 + 1,br2);  }  final String[] mate=matepos.split(":");  if (mate.length != 2) {    throw new IOException(errmsg + altCall);  }  return new Adjacency(chr,pos,isForward,bases,mate[0],Integer.parseInt(mate[1]),mateIsForward);}  }
class C{  public boolean onCurve(int pointIndex){  return ((getFlag(pointIndex) & 0x1) != 0);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  private String createNode(String nodeName,String nodeValue){  return "<" + nodeName + ">"+ nodeValue+ "</"+ nodeName+ ">";}  }
class C{  private void init(){  graphheight=height - (3 * border);  graphwidth=width - (3 * border);  int largestSize=getLargestSize(values);  largest_value_set=values.get(largestSize).getList();  size=largest_value_set.size();  label_size=size - 1;  y_axis_ratio=max_YValue / label_size;  for (int i=0; i < size; i++) {    paint.setTextSize(18);    create_y_axis(i);  }  if (labels != null)   size=labels.size();  if (largest_value_set.get(0).getLabels() != null) {    for (int j=0; j < size + 1; j++)     createX_axis(j);  } else {    label_size=size - 1;    x_axis_ratio=max_XValue / label_size;    for (int j=0; j < size; j++)     createX_axis(j);  }}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean isEmptyString(String string){  if (string == null || "".equals(string.trim())) {    return true;  }  return false;}  }
class C{  public ChunkedHashStore(final TransformationStrategy<? super T> transform,final File tempDir,final int hashWidth,final ProgressLogger pl) throws IOException {  this.transform=transform;  this.pl=pl;  this.tempDir=tempDir;  this.hashMask=hashWidth == 0 ? 0 : -1L >>> Long.SIZE - hashWidth;  file=new File[DISK_CHUNKS];  dos=new DataOutputStream[DISK_CHUNKS];  for (int i=0; i < DISK_CHUNKS; i++) {    dos[i]=new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(file[i]=File.createTempFile(ChunkedHashStore.class.getSimpleName(),String.valueOf(i),tempDir)),OUTPUT_BUFFER_SIZE));    file[i].deleteOnExit();  }  count=new int[DISK_CHUNKS];}  }
class C{  public boolean isMember(CollectorContext context){  for (  CollectorContext c : contexts) {    if (c == context) {      return true;    }  }  return false;}  }
class C{  private void handleFrameAvailable(float[] transform,long timestampNanos){  if (VERBOSE)   Log.d(TAG,"handleFrameAvailable tr=" + transform);  mVideoEncoder.drainEncoder(false);  mInput.setTextureTransformMatrix(transform);  if (filter == null) {    mInput.onDrawFrame(mTextureId,gLCubeBuffer,gLTextureBuffer);  } else {    filter.onDrawFrame(mTextureId,gLCubeBuffer,gLTextureBuffer);  }  mInputWindowSurface.setPresentationTime(timestampNanos);  mInputWindowSurface.swapBuffers();}  }
class C{  public static ParseTreeNode subst(String patternText,Map<String,ParseTreeNode> bindings){  return getPatternNode(patternText).substitute(bindings);}  }
class C{  public ServiceCall<String> convertDocumentToHTML(File document,String mediaType,JsonObject customConfig){  Request request=createConversionRequest(document,mediaType,ConversionTarget.NORMALIZED_HTML,customConfig);  return createServiceCall(request,ResponseConverterUtils.getString());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private static MappedField checkGetAccessor(XML xml,Class<?> aClass,Field nestedField){  MappedField field=new MappedField(nestedField);  xml.fillMappedField(aClass,field);  Annotation.fillMappedField(aClass,field);  verifyGetterMethods(aClass,field);  return field;}  }
class C{  public Assignment renameVar(String oldVar,String newVar){  Assignment newAssign=copy();  if (containsVar(oldVar)) {    Value condVal=newAssign.removePair(oldVar);    newAssign.addPair(newVar,condVal);  }  return newAssign;}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,float fontSize,AttributedCharacterIterator aci){  try {    if (SVG_NAMESPACE_URI.equals(textElement.getNamespaceURI()) && SVG_ALT_GLYPH_TAG.equals(textElement.getLocalName())) {      SVGAltGlyphElementBridge altGlyphBridge=(SVGAltGlyphElementBridge)ctx.getBridge(textElement);      Glyph[] glyphArray=altGlyphBridge.createAltGlyphArray(ctx,textElement,fontSize,aci);      if (glyphArray != null) {        return new SVGGVTGlyphVector(null,glyphArray,frc);      }    }  } catch (  SecurityException e) {    ctx.getUserAgent().displayError(e);    throw e;  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("invalid parameter passed to DESede init - " + params.getClass().getName());  }  byte[] keyMaster=((KeyParameter)params).getKey();  if (keyMaster.length != 24 && keyMaster.length != 16) {    throw new IllegalArgumentException("key size must be 16 or 24 bytes.");  }  this.forEncryption=encrypting;  byte[] key1=new byte[8];  System.arraycopy(keyMaster,0,key1,0,key1.length);  workingKey1=generateWorkingKey(encrypting,key1);  byte[] key2=new byte[8];  System.arraycopy(keyMaster,8,key2,0,key2.length);  workingKey2=generateWorkingKey(!encrypting,key2);  if (keyMaster.length == 24) {    byte[] key3=new byte[8];    System.arraycopy(keyMaster,16,key3,0,key3.length);    workingKey3=generateWorkingKey(encrypting,key3);  } else {    workingKey3=workingKey1;  }}  }
class C{  private Writers(){}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  return core.unwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public PageRank(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weight,double alpha){  super(graph,edge_weight,ScoringUtils.getUniformRootPrior(graph.getVertices()),alpha);}  }
class C{  public T caseImportScope(ImportScope object){  return null;}  }
class C{  private static boolean isScreenDefinition(JSONObject cruxObject) throws JSONException {  if (cruxObject.has("_type")) {    String type=cruxObject.getString("_type");    return (type != null && ViewParser.SCREEN_TYPE.equals(type));  }  return false;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  protected void docType(String name,String pubid,String sysid) throws SAXException {  mHandDtd.notationDecl(name,pubid,sysid);}  }
class C{  protected FinalizablePhantomReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public boolean addAll(@NonNull final Collection<? extends T> collection){  boolean result=mItems.addAll(collection);  notifyDataSetChanged();  return result;}  }
class C{  public synchronized <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    if ("java.sql.Statement".equals(iface.getName()) || "java.sql.Wrapper.class".equals(iface.getName())) {      return iface.cast(this);    }    if (unwrappedInterfaces == null) {      unwrappedInterfaces=new HashMap<Class<?>,Object>();    }    Object cachedUnwrapped=unwrappedInterfaces.get(iface);    if (cachedUnwrapped == null) {      cachedUnwrapped=Proxy.newProxyInstance(this.wrappedStmt.getClass().getClassLoader(),new Class<?>[]{iface},new ConnectionErrorFiringInvocationHandler(this.wrappedStmt));      unwrappedInterfaces.put(iface,cachedUnwrapped);    }    return iface.cast(cachedUnwrapped);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.exceptionInterceptor);  }}  }
class C{  public static void inferStamps(StructuredGraph graph){  for (  Node n : graph.getNodes()) {    if (n instanceof ValuePhiNode) {      ValueNode node=(ValueNode)n;      if (node.stamp() instanceof ObjectStamp) {        assert node.stamp().hasValues() : "We assume all Phi and Proxy stamps are legal before the analysis";        node.setStamp(node.stamp().empty());      }    }  }  boolean stampChanged;  int z=0;  do {    stampChanged=false;    for (    Node n : graph.getNodes()) {      if (n instanceof ValueNode) {        ValueNode node=(ValueNode)n;        if (node.stamp() instanceof ObjectStamp) {          stampChanged|=node.inferStamp();        }      }    }    ++z;  } while (stampChanged && z < 10000);  assert checkNoEmptyStamp(graph);}  }
class C{  @Override public final void insert(final K s,final V v){  this.arc[getPartition(s)].insert(s,v);}  }
class C{  public static JsonUnescaped unescaped(CharSequence text){  return new JsonUnescaped(text);}  }
class C{  public EnumeratedTypeSet(TypeSetEnvironment typeSetEnvironment){  super(typeSetEnvironment);  sCount++;}  }
class C{  private void handleErrorFinish(){  Log.d(TAG,"Lost contact, returning to village.");  Toast.makeText(getApplicationContext(),LOST_CONTACT_STRING,Toast.LENGTH_LONG).show();  returnToStartupActivity();}  }
class C{  public void write(IXMLElement xml,boolean prettyPrint) throws IOException {  this.write(xml,prettyPrint,0,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.679 -0500",hash_original_method="150F076539D3E4866582D984173D26A6",hash_generated_method="A531D84ECA17241A3D1AF6850F807E56") public void addItem(Item item){  if (item == null) {    throw new NullPointerException("item is null");  }  mItems.add(item);}  }
class C{  protected CsvJUnitData(){}  }
class C{  public CLeftTitleRenderer(){  setHorizontalAlignment(RIGHT);  setBackground(CRightTitleComponent.DEFAULT_BACKGROUND_COLOR);}  }
class C{  public InternalSearchHit sourceRef(BytesReference source){  this.source=source;  this.sourceAsBytes=null;  this.sourceAsMap=null;  return this;}  }
class C{  private static String readLine(InputStream inputStream,Charset charset) throws IOException {  byte[] rawdata=readRawLine(inputStream);  if (rawdata == null) {    return null;  }  int len=rawdata.length;  int offset=0;  if (len > 0) {    if (rawdata[len - 1] == '\n') {      offset++;      if (len > 1) {        if (rawdata[len - 2] == '\r') {          offset++;        }      }    }  }  final String result=getString(rawdata,0,len - offset,charset);  return result;}  }
class C{  public static TMCoord fromTM(double easting,double northing,Angle originLatitude,Angle centralMeridian,double falseEasting,double falseNorthing,double scale){  if (originLatitude == null || centralMeridian == null) {    throw new IllegalArgumentException("Angle Is Null");  }  final TMCoordConverter converter=new TMCoordConverter();  double a=converter.getA();  double f=converter.getF();  long err=converter.setTransverseMercatorParameters(a,f,originLatitude.radians,centralMeridian.radians,falseEasting,falseNorthing,scale);  if (err == TMCoordConverter.TRANMERC_NO_ERROR)   err=converter.convertTransverseMercatorToGeodetic(easting,northing);  if (err != TMCoordConverter.TRANMERC_NO_ERROR && err != TMCoordConverter.TRANMERC_LON_WARNING) {    throw new IllegalArgumentException("TM Conversion Error");  }  return new TMCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),easting,northing,originLatitude,centralMeridian,falseEasting,falseNorthing,scale);}  }
class C{  public void testCreateIdForRAR() throws Exception {  RAR rar=createRAR();  String name=deployer.createIdForDeployable(rar);  assertEquals("cargo.war",name);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Class loadClass(String name) throws ClassNotFoundException {  try {    return loadClass(name,false);  } catch (  NoClassDefFoundError e) {    throw new ClassNotFoundException(name);  }}  }
class C{  public void putFloat(String key,float value){  unparcel();  mMap.put(key,value);}  }
class C{  public boolean isStatisticsEnabled(){  return statisticsEnabled;}  }
class C{  public static KeyPair generateKeyPair(KeyPairType keyPairType,int keySize,Provider provider) throws CryptoException {  try {    KeyPairGenerator keyPairGen=null;    if (provider != null) {      keyPairGen=KeyPairGenerator.getInstance(keyPairType.jce(),provider);    } else {      if (keyPairType == RSA) {        keyPairGen=KeyPairGenerator.getInstance(keyPairType.jce(),BOUNCY_CASTLE.jce());      } else {        keyPairGen=KeyPairGenerator.getInstance(keyPairType.jce());      }    }    SecureRandom rand=SecureRandom.getInstance("SHA1PRNG");    keyPairGen.initialize(keySize,rand);    KeyPair keyPair=keyPairGen.generateKeyPair();    return keyPair;  } catch (  GeneralSecurityException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoGenerateKeypair.exception.message"),keyPairType),ex);  }}  }
class C{  public boolean isOnboardKeyGeneration(){  return onboardKeyGeneration;}  }
class C{  public StorageDescriptor(int channelId,long position,long size){  this.channelId=channelId;  this.simpleStorageDescriptor=new SimpleStorageDescriptor(position,(int)size);}  }
class C{  public void mergeElementsRelations(final OsmElement mergeInto,final OsmElement mergeFrom){  ArrayList<Relation> fromRelations=mergeFrom.getParentRelations() != null ? new ArrayList<Relation>(mergeFrom.getParentRelations()) : new ArrayList<Relation>();  ArrayList<Relation> toRelations=mergeInto.getParentRelations() != null ? mergeInto.getParentRelations() : new ArrayList<Relation>();  try {    for (    Relation r : fromRelations) {      if (!toRelations.contains(r)) {        dirty=true;        undo.save(r);        RelationMember rm=r.getMember(mergeFrom);        RelationMember newRm=new RelationMember(rm.getRole(),mergeInto);        r.replaceMember(rm,newRm);        r.updateState(OsmElement.STATE_MODIFIED);        apiStorage.insertElementSafe(r);        mergeInto.addParentRelation(r);        mergeInto.updateState(OsmElement.STATE_MODIFIED);        apiStorage.insertElementSafe(mergeInto);      }    }    recordImagery();  } catch (  StorageException sex) {  }}  }
class C{  default B color(final Color color){  this.meta().setColor(color);  return this.getBuilder();}  }
class C{  public void handleImage(Image image,Element imageElement,SVGGeneratorContext generatorContext){  imageElement.setAttributeNS(null,SVG_WIDTH_ATTRIBUTE,String.valueOf(image.getWidth(null)));  imageElement.setAttributeNS(null,SVG_HEIGHT_ATTRIBUTE,String.valueOf(image.getHeight(null)));  try {    handleHREF(image,imageElement,generatorContext);  } catch (  SVGGraphics2DIOException e) {    try {      generatorContext.errorHandler.handleError(e);    } catch (    SVGGraphics2DIOException io) {      throw new SVGGraphics2DRuntimeException(io);    }  }}  }
class C{  public boolean isOpen(){  return (bfdi != null);}  }
class C{  public Object readBeanInstance(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  String name;  int i;  int x;  int y;  int id;  Object bean;  BeanVisual visual;  BeanInstance beaninst;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  id=-1;  x=0;  y=0;  bean=null;  String customName=null;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_ID)) {      id=readIntFromXML(child);    } else     if (name.equals(VAL_X)) {      x=readIntFromXML(child);    } else     if (name.equals(VAL_Y)) {      y=readIntFromXML(child);    } else     if (name.equals(VAL_CUSTOM_NAME)) {      customName=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_BEAN)) {      bean=invokeReadFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  result=new BeanInstance(m_BeanLayout,bean,x,y,m_vectorIndex);  beaninst=(BeanInstance)result;  if (beaninst.getBean() instanceof weka.gui.beans.Visible) {    visual=((Visible)beaninst.getBean()).getVisual();    visual.setSize(visual.getPreferredSize());    if (visual.getParent() == null) {      ((JPanel)beaninst.getBean()).add(visual);    }  }  if (beaninst.getBean() instanceof BeanCommon && customName != null) {    ((BeanCommon)beaninst.getBean()).setCustomName(customName);  }  if (id == -1) {    for (i=0; i < m_BeanInstances.size(); i++) {      if (m_BeanInstances.get(i) == null) {        id=m_BeanInstancesID.get(i).intValue();        break;      }    }  }  i=m_BeanInstancesID.indexOf(new Integer(id));  m_BeanInstances.set(i,result);  m_CurrentMetaBean=null;  return result;}  }
class C{  public Interval(int start,int end){  this.start=start;  this.end=end;}  }
class C{  public void addRule(@NotNull Rule rule) throws IllegalArgumentException {  Rule existing=myRules.get(rule.symbol);  if (existing != null) {    throw new IllegalArgumentException(String.format("Can't register given wrap rule (%s) within the current line wrap position strategy. Reason: another rule is already " + "registered for it - '%s'",rule,existing));  }  existing=myRules.put(rule.symbol,rule);  assert existing == null;}  }
class C{  public static boolean isFiniteChoice(RegExp re){  RegExp2 r;switch (re.type) {case sym.BAR:{      r=(RegExp2)re;      return isFiniteChoice(r.r1) && isFiniteChoice(r.r2);    }case sym.CONCAT:{    r=(RegExp2)re;    int l1=length(r.r1);    if (l1 < 0)     return false;    int l2=length(r.r2);    return l2 >= 0;  }case sym.STAR:case sym.PLUS:case sym.QUESTION:return false;case sym.CCLASS:case sym.CCLASSNOT:case sym.CHAR:case sym.CHAR_I:return true;case sym.STRING:case sym.STRING_I:{return true;}case sym.TILDE:case sym.BANG:return false;case sym.MACROUSE:return isFiniteChoice(macros.getDefinition((String)((RegExp1)re).content));}throw new Error("Unknown expression type " + re.type + " in "+ re);}  }
class C{  public Field(String name,String type){  this.name=name;  this.type=type;}  }
class C{  @Override public void checkServerTrusted(X509Certificate[] x509Certificates,String string) throws CertificateException {  if (trustManager == null) {    return;  }  trustManager.checkServerTrusted(x509Certificates,string);}  }
class C{  public ByteChunks(final long length,final int chunkBits){  super(length);  assert chunkBits >= 0 && chunkBits <= 30;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  final long ch=(length + mChunkSize - 1) / mChunkSize;  if (ch > Integer.MAX_VALUE) {    throw new RuntimeException("length requested too long length=" + length + " mChunkSize="+ mChunkSize);  }  final int chunks=(int)ch;  mArray=new byte[chunks][];  long left=mLength;  for (int i=0; i < chunks; i++) {    final int assignedLength=left <= mChunkSize ? (int)left : mChunkSize;    assert assignedLength > 0;    mArray[i]=new byte[assignedLength];    left-=assignedLength;  }  assert left == 0;  mTotalLength=mLength;  assert integrity();}  }
class C{  public RepublishResponse clone(){  RepublishResponse result=new RepublishResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.NotificationMessage=NotificationMessage == null ? null : NotificationMessage.clone();  return result;}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now " + "\"stopped\")");}  }
class C{  public boolean supportsAlterTableWithAddColumn() throws SQLException {  return true;}  }
class C{  public HtmlResult(){}  }
class C{  @SuppressWarnings("unchecked") public <T>List<T> list(Class<T> clazz) throws DBException {  final List<T> list;  if (limit > 0) {    list=new ArrayList<T>(limit);  } else {    list=new ArrayList<T>();  }  String sql=buildSQL(null,true);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=createResultSet(pstmt);    while (rs.next()) {      PO o=table.getPO(rs,trxName);      T po;      if (clazz != null && !o.getClass().isAssignableFrom(clazz))       po=POWrapper.create(o,clazz); else       po=(T)o;      list.add(po);      if (limit > 0 && list.size() >= limit) {        log.fine("Limit of " + limit + " reached. Stop.");        break;      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return list;}  }
class C{  public boolean lt(DD y){  return (hi < y.hi) || (hi == y.hi && lo < y.lo);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public boolean readBoolean(){  String s=readString();  if (s.equalsIgnoreCase("true"))   return true;  if (s.equalsIgnoreCase("false"))   return false;  if (s.equals("1"))   return true;  if (s.equals("0"))   return false;  throw new InputMismatchException();}  }
class C{  public void initOptions(){  String username=ConnectionSettings.PROXY_USERNAME.getValue();  String password=ConnectionSettings.PROXY_PASS.getValue();  boolean authenticate=ConnectionSettings.PROXY_AUTHENTICATE.getValue();  PROXY_USERNAME_FIELD.setText(username);  PROXY_PASSWORD_FIELD.setText(password);  CHECK_BOX.setSelected(authenticate);  updateState();}  }
class C{  public void testSnappy() throws Throwable {  checkSnappy();  for (int i=0; i < 2; i++) {    ClassLoader hadoopClsLdr=new HadoopClassLoader(null,"cl-" + i,null,new HadoopHelperImpl());    Class<?> cls=(Class)Class.forName(HadoopSnappyTest.class.getName(),true,hadoopClsLdr);    assertEquals(hadoopClsLdr,cls.getClassLoader());    U.invoke(cls,null,"checkSnappy");  }}  }
class C{  public static void allBernstein(int curveDegree,float t,float scalars[]){  int j, k;  float nt=1 - t;  float saved;  scalars[0]=1;  for (j=1; j <= curveDegree; j++) {    saved=0;    for (k=0; k < j; k++) {      float temp=scalars[k];      scalars[k]=saved + nt * temp;      saved=t * temp;    }    scalars[j]=saved;  }}  }
class C{  public HAPbrpcException(String arg0){  super(arg0);}  }
class C{  public ParameterPanel(int hgap,int vgap){  super();  initialize();  initGUI();  m_GapHorizontal=hgap;  m_GapVertical=vgap;  update();}  }
class C{  protected String paramString(){  String textString=(text != null ? text : "");  String defaultIconString=((defaultIcon != null) && (defaultIcon != this) ? defaultIcon.toString() : "");  String disabledIconString=((disabledIcon != null) && (disabledIcon != this) ? disabledIcon.toString() : "");  String labelForString=(labelFor != null ? labelFor.toString() : "");  String verticalAlignmentString;  if (verticalAlignment == TOP) {    verticalAlignmentString="TOP";  } else   if (verticalAlignment == CENTER) {    verticalAlignmentString="CENTER";  } else   if (verticalAlignment == BOTTOM) {    verticalAlignmentString="BOTTOM";  } else   verticalAlignmentString="";  String horizontalAlignmentString;  if (horizontalAlignment == LEFT) {    horizontalAlignmentString="LEFT";  } else   if (horizontalAlignment == CENTER) {    horizontalAlignmentString="CENTER";  } else   if (horizontalAlignment == RIGHT) {    horizontalAlignmentString="RIGHT";  } else   if (horizontalAlignment == LEADING) {    horizontalAlignmentString="LEADING";  } else   if (horizontalAlignment == TRAILING) {    horizontalAlignmentString="TRAILING";  } else   horizontalAlignmentString="";  String verticalTextPositionString;  if (verticalTextPosition == TOP) {    verticalTextPositionString="TOP";  } else   if (verticalTextPosition == CENTER) {    verticalTextPositionString="CENTER";  } else   if (verticalTextPosition == BOTTOM) {    verticalTextPositionString="BOTTOM";  } else   verticalTextPositionString="";  String horizontalTextPositionString;  if (horizontalTextPosition == LEFT) {    horizontalTextPositionString="LEFT";  } else   if (horizontalTextPosition == CENTER) {    horizontalTextPositionString="CENTER";  } else   if (horizontalTextPosition == RIGHT) {    horizontalTextPositionString="RIGHT";  } else   if (horizontalTextPosition == LEADING) {    horizontalTextPositionString="LEADING";  } else   if (horizontalTextPosition == TRAILING) {    horizontalTextPositionString="TRAILING";  } else   horizontalTextPositionString="";  return super.paramString() + ",defaultIcon=" + defaultIconString+ ",disabledIcon="+ disabledIconString+ ",horizontalAlignment="+ horizontalAlignmentString+ ",horizontalTextPosition="+ horizontalTextPositionString+ ",iconTextGap="+ iconTextGap+ ",labelFor="+ labelForString+ ",text="+ textString+ ",verticalAlignment="+ verticalAlignmentString+ ",verticalTextPosition="+ verticalTextPositionString;}  }
class C{  public Long append(final byte[] key,final byte[] value){  checkIsInMulti();  client.append(key,value);  return client.getIntegerReply();}  }
class C{  public static int findFirst(int[] bits,int idx){  int len=bits.length;  int minBit=idx & 0x1f;  for (int arrayIdx=idx >> 5; arrayIdx < len; arrayIdx++) {    int word=bits[arrayIdx];    if (word != 0) {      int bitIdx=findFirst(word,minBit);      if (bitIdx >= 0) {        return (arrayIdx << 5) + bitIdx;      }    }    minBit=0;  }  return -1;}  }
class C{  public void write(IXMLElement xml) throws IOException {  this.write(xml,false,0,true);}  }
class C{  public boolean isIPad(){  return isIPad;}  }
class C{  public static String random(final int count,final boolean letters,final boolean numbers){  return random(count,0,0,letters,numbers);}  }
class C{  public static Object read(String s){  return EDN_READ_STRING.invoke(s);}  }
class C{  private Map<String,String> makeSinkProps(String topics){  Map<String,String> props=new HashMap<>();  props.put(SinkConnector.TOPICS_CONFIG,topics);  props.put(ConnectorConfig.TASKS_MAX_CONFIG,"2");  props.put(ConnectorConfig.NAME_CONFIG,"test-sink-connector");  props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,IgniteSinkConnector.class.getName());  props.put(IgniteSinkConstants.CACHE_NAME,"testCache");  props.put(IgniteSinkConstants.CACHE_ALLOW_OVERWRITE,"true");  props.put(IgniteSinkConstants.CACHE_CFG_PATH,"example-ignite.xml");  return props;}  }
class C{  public void onServerSentPartialBlockData(int x,int y,int z,float progress){  if (thePlayer == null) {    return;  }  MultiMine.instance().debugPrint("Client received partial Block packet for: [" + x + "|"+ y+ "|"+ z+ "], progress now: "+ progress);  updateLocalPartialBlock(x,y,z,progress);}  }
class C{  public void addException(String exception){  LocalDate exceptionDate=parseDateFormat(exception);  additions.add(exceptionDate);  MapUtils.getSet(exceptionDate,dateStats).remove(this.getId());}  }
class C{  public HARootBlockRequest(final UUID storeUUID){  this(storeUUID,true);}  }
class C{  void viewResolver(ViewResolver<Object> resolver){  _viewResolver=resolver;}  }
class C{  private void buildMetadataLine(SuggestedPodcast addPodcastFormData){  StringBuilder metadataLine=new StringBuilder();  metadataLine.append(addPodcastFormData.getFeedUrl());  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getIdentifier());  metadataLine.append("; ");  if (addPodcastFormData.getCategories() != null) {    String categoriesStr="";    for (    String s : addPodcastFormData.getCategories()) {      categoriesStr+=s + ", ";    }    metadataLine.append(categoriesStr.subSequence(0,categoriesStr.length() - 2));    metadataLine.append("; ");  }  metadataLine.append(addPodcastFormData.getLanguageCode().toString());  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getMediaType().toString());  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getUpdateFrequency().toString());  metadataLine.append("; ");  String suggestedTags=addPodcastFormData.getSuggestedTags();  metadataLine.append(suggestedTags);  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getFacebookPage());  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getTwitterPage());  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getGplusPage());  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getName());  metadataLine.append("; ");  metadataLine.append(addPodcastFormData.getEmail());  addPodcastFormData.setMetadataLine(metadataLine.toString());}  }
class C{  @Override public String isValid(String newText){  int len=newText.length();  return null;}  }
class C{  public String shortName(){  return "e".equals(lastNameCharIndex(0)) && "x".equals(lastNameCharIndex(1)) ? "x" : lastNameCharIndex(0);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_1__CONSTRAINT_BODY_1:    return ((InternalEList<?>)getConstraintBody_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendBar,stream);}  }
class C{  public void increment(long pos,long len){  int blockFrom=(int)(pos / blockSize);  int blockTo=(int)((pos + len) / blockSize) + 1;  capacity(blockTo);  for (int i=blockFrom; i < blockTo; i++)   counters.set(i,counters.get(i) + 1);}  }
class C{  public boolean hasAmount(){  return super.hasAttribute(AMOUNT);}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  KNNQuery<O> knnq=QueryUtil.getKNNQuery(relation,getDistanceFunction(),k);  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_DB);  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    KNNList neighbors=knnq.getKNNForDBID(iter,k);    MeanVariance mv=new MeanVariance();    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(iter,neighbor)) {        continue;      }      mv.put(neighbor.doubleValue());    }    scores.putDouble(iter,mv.getSampleStddev());  }  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0,Double.POSITIVE_INFINITY);  DoubleRelation rel=new MaterializedDoubleRelation(relation.getDBIDs(),"stddev-outlier",scores);  return new OutlierResult(meta,rel);}  }
class C{  private static boolean containsOnlyInheritDoc(Reader reader,int length){  char[] content=new char[length];  try {    reader.read(content,0,length);  } catch (  IOException e) {    return false;  }  return new String(content).trim().equals("{@inheritDoc}");}  }
class C{  protected void readGraphicControlExt(){  read();  int packed=read();  dispose=(packed & 0x1c) >> 2;  if (dispose == 0) {    dispose=1;  }  transparency=(packed & 1) != 0;  delay=readShort() * 10;  transIndex=read();  read();}  }
class C{  private void readRequestData(int byteCount,BytesOutputStream out) throws IOException {  byteCount+=2;  byte inpBuf[]=new byte[byteCount];  readBytes(inpBuf,byteCount);  out.write(inpBuf,0,byteCount);}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public int lookup(Object key,int hash){  Object node;  int hash1=hash ^ (hash >>> 15);  int hash2=(hash ^ (hash << 6)) | 1;  int deleted=-1;  for (int i=hash1 & mask; ; i=(i + hash2) & mask) {    node=objs[i];    if (node == key)     return i;    if (node == null)     return deleted >= 0 ? deleted : i;    if (node == DELETED && deleted < 0)     deleted=i;  }}  }
class C{  public static char gsmExtendedToChar(int gsmChar){  if (gsmChar == GSM_EXTENDED_ESCAPE) {    return ' ';  } else   if (gsmChar >= 0 && gsmChar < 128) {    char c=sLanguageShiftTables[0].charAt(gsmChar);    if (c == ' ') {      return sLanguageTables[0].charAt(gsmChar);    } else {      return c;    }  } else {    return ' ';  }}  }
class C{  public final boolean isVertical(){  return (point1.x == point2.x);}  }
class C{  public static List<CRL> readCRLsFromCert(X509Certificate cert) throws Exception {  List<CRL> crls=new ArrayList<>();  CRLDistributionPointsExtension ext=X509CertImpl.toImpl(cert).getCRLDistributionPointsExtension();  if (ext == null)   return crls;  List<DistributionPoint> distPoints=ext.get(CRLDistributionPointsExtension.POINTS);  for (  DistributionPoint o : distPoints) {    GeneralNames names=o.getFullName();    if (names != null) {      for (      GeneralName name : names.names()) {        if (name.getType() == GeneralNameInterface.NAME_URI) {          URIName uriName=(URIName)name.getName();          for (          CRL crl : loadCRLs(uriName.getName())) {            if (crl instanceof X509CRL) {              crls.add((X509CRL)crl);            }          }          break;        }      }    }  }  return crls;}  }
class C{  public RNode(List<V> points){  this.points=points;  children=new ArrayList<RNode<V>>();  bound=Rectangle.contains(points);}  }
class C{  public GeoTimeSerie(int sizehint){  this.sizehint=sizehint;}  }
class C{  public void onHeadersTransitionStart(boolean withHeaders){}  }
class C{  private static boolean checkForString(final byte[] data,final int offset,final char[] chars){  for (int i=0; i < chars.length; i++) {    if (data[offset + i] != chars[i]) {      return false;    }  }  return true;}  }
class C{  private void validateDuplicateRPBlockSnapshotsForExport(List<URI> blockObjURIs){  Map<URI,List<String>> cgToRpSiteMap=new HashMap<URI,List<String>>();  for (  URI blockObjectURI : blockObjURIs) {    if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);      if (TechnologyType.RP.name().equalsIgnoreCase(snapshot.getTechnologyType()) && !NullColumnValueGetter.isNullURI(snapshot.getConsistencyGroup())) {        List<String> rpSites=cgToRpSiteMap.get(snapshot.getConsistencyGroup());        if (rpSites == null) {          rpSites=new ArrayList<String>();          cgToRpSiteMap.put(snapshot.getConsistencyGroup(),rpSites);        }        if (rpSites.contains(snapshot.getEmInternalSiteName())) {          BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,snapshot.getConsistencyGroup());          String rpCopyName=RPHelper.getCgCopyName(_dbClient,cg,snapshot.getVirtualArray(),false);          throw APIException.badRequests.duplicateRpBookmarkExport(rpCopyName,cg.getLabel());        } else {          rpSites.add(snapshot.getEmInternalSiteName());        }      }    }  }}  }
class C{  public void sendReplEvent(ReplEvent event,boolean forceSend) throws IOException {  if (buffering) {    buffer.add(event);    if (forceSend || buffer.size() >= bufferSize) {      writeMessage(new ProtocolMessage(buffer));      buffer.clear();    }  } else {    writeMessage(new ProtocolReplEvent(event));  }}  }
class C{  private ByteBuffer decode() throws PDFParseException {  buf.rewind();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  while (decode5(baos)) {  }  return ByteBuffer.wrap(baos.toByteArray());}  }
class C{  public boolean isInterface(){  return getRawClass().isAbstract();}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mDevices.size());  for (  WifiP2pDevice device : mDevices.values()) {    dest.writeParcelable(device,flags);  }}  }
class C{  private boolean isSelectionTemplate(){  if (fContext instanceof DocumentTemplateContext) {    DocumentTemplateContext ctx=(DocumentTemplateContext)fContext;    if (ctx.getCompletionLength() > 0) {      return true;    }  }  return false;}  }
class C{  private void writeFileMultipart(DataOutputStream outputStream,Uri file) throws IOException {  String filename=mContent.getName();  long fileSize=mContent.getSize();  String filePartHeader=TWO_HYPENS + BOUNDARY_TAG + LINE_END+ "Content-Disposition: form-data; name=\"File\"; filename=\""+ URLEncoder.encode(filename,UTF8_STR)+ "\""+ LINE_END+ "Content-Type: "+ mContent.getEncoding()+ LINE_END+ "Content-Length: "+ fileSize+ LINE_END+ LINE_END;  outputStream.writeBytes(filePartHeader);  InputStream fileInputStream=null;  try {    fileInputStream=AndroidFactory.getApplicationContext().getContentResolver().openInputStream(file);    int bytesAvailable=fileInputStream.available();    int bufferSize=Math.min(bytesAvailable,CHUNK_MAX_SIZE);    byte[] buffer=new byte[bufferSize];    int bytesRead=fileInputStream.read(buffer,0,bufferSize);    int progress=0;    while (bytesRead > 0 && !isCancelled() && !isPaused()) {      progress+=bytesRead;      outputStream.write(buffer,0,bytesRead);      bytesAvailable=fileInputStream.available();      getListener().onHttpTransferProgress(progress,fileSize);      bufferSize=Math.min(bytesAvailable,CHUNK_MAX_SIZE);      buffer=new byte[bufferSize];      bytesRead=fileInputStream.read(buffer,0,bufferSize);    }  }  finally {    CloseableUtils.tryToClose(fileInputStream);  }  if (!isCancelled()) {    outputStream.writeBytes(LINE_END);  }}  }
class C{  public long extensionCallbackInLongLongOutLong(int typ,long arg1,long arg2){  enter();  try {    return PlatformCallbackUtils.extensionCallbackInLongLongOutLong(envPtr,typ,arg1,arg2);  }  finally {    leave();  }}  }
class C{  private void clearAllTables(){  if (this.sw.getOFFactory().getVersion().compareTo(OFVersion.OF_10) == 0) {    OFFlowDelete deleteFlows=this.factory.buildFlowDelete().build();    this.sw.write(deleteFlows);  } else {    OFFlowDelete deleteFlows=this.factory.buildFlowDelete().setTableId(TableId.ALL).build();    this.sw.write(deleteFlows);    OFGroupDelete delgroup=this.sw.getOFFactory().buildGroupDelete().setGroup(OFGroup.ALL).setGroupType(OFGroupType.ALL).build();    this.sw.write(delgroup);    delgroup.createBuilder().setGroupType(OFGroupType.FF).build();    this.sw.write(delgroup);    delgroup.createBuilder().setGroupType(OFGroupType.INDIRECT).build();    this.sw.write(delgroup);    delgroup.createBuilder().setGroupType(OFGroupType.SELECT).build();    this.sw.write(delgroup);  }}  }
class C{  public static mat4 createPerspective(float fovDegrees,float aspect,float near,float far){  mat4 result=new mat4();  result.perspective(fovDegrees,aspect,near,far);  return result;}  }
class C{  public static void putObjectVolatile(Object obj,long off,Object val){  UNSAFE.putObjectVolatile(obj,off,val);}  }
class C{  @SuppressWarnings("unchecked") public final T masterNodeTimeout(TimeValue timeout){  this.masterNodeTimeout=timeout;  return (T)this;}  }
class C{  public static BlockingQueue<WordReferenceVars> transform(final ReferenceContainer<WordReference> container,final long maxtime,final boolean local){  final LinkedBlockingQueue<WordReferenceVars> vars=new LinkedBlockingQueue<WordReferenceVars>();  if (container.size() <= 100) {    for (    final Row.Entry entry : container) {      try {        vars.put(new WordReferenceVars(new WordReferenceRow(entry),local));      } catch (      final InterruptedException e) {      }    }    try {      vars.put(WordReferenceVars.poison);    } catch (    final InterruptedException e) {    }    return vars;  }  final Thread distributor=new TransformDistributor(container,vars,maxtime,local);  distributor.start();  return vars;}  }
class C{  public void writeShort(short v) throws IOException {  dataOutput.writeShort(v);  offset+=2;}  }
class C{  public boolean hasOutstandingCollection(){  if (getAmtCollected() == null || getAmount().compareTo(getAmtCollected()) > 0) {    return true;  } else {    return false;  }}  }
class C{  public static OrderStatus newInstance(String value){  final OrderStatus returnInstance=new OrderStatus();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public static String composeConnectionName(final String clientId,final List<String> serverURIs){  return composeConnectionName(clientId,serverURIsToString(serverURIs));}  }
class C{  private void readBytes() throws IOException {  InputStream stream=null;  try {    ZipEntry zipEntry=zipFile.getEntry(nameInZip);    stream=zipFile.getZipFile().getInputStream(zipEntry);    bytes=FileUtils.toByteArray(stream);  }  finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException ioException) {      }    }  }}  }
class C{  public static long asLong(String str,long def){  Long l=asLong(str);  return (l == null) ? def : l;}  }
class C{  private void discoverUnmanagedVolumes(AccessProfile accessProfile,VPlexApiClient client,Map<String,VPlexVirtualVolumeInfo> allVirtualVolumes,Map<String,Set<UnManagedExportMask>> volumeToExportMasksMap,Map<String,Set<VPlexStorageViewInfo>> volumeToStorageViewMap,Set<String> recoverPointExportMasks,UnmanagedDiscoveryPerformanceTracker tracker) throws BaseCollectionException {  String statusMessage="Starting discovery of Unmanaged VPLEX Volumes.";  s_logger.info(statusMessage + " Access Profile Details :  IpAddress : " + "PortNumber : {}, namespace : {}",accessProfile.getIpAddress() + accessProfile.getPortNumber(),accessProfile.getnamespace());  URI vplexUri=accessProfile.getSystemId();  StorageSystem vplex=_dbClient.queryObject(StorageSystem.class,vplexUri);  if (null == vplex) {    s_logger.error("No VPLEX Device was found in ViPR for URI: " + vplexUri);    s_logger.error("Unmanaged VPLEX Volume discovery cannot continue.");    return;  }  Set<URI> allUnmanagedVolumes=new HashSet<URI>();  List<UnManagedVolume> newUnmanagedVolumes=new ArrayList<UnManagedVolume>();  List<UnManagedVolume> knownUnmanagedVolumes=new ArrayList<UnManagedVolume>();  List<UnManagedExportMask> unmanagedExportMasksToUpdate=new ArrayList<UnManagedExportMask>();  Map<String,String> backendVolumeGuidToVvolGuidMap=new HashMap<String,String>();  try {    long timer=System.currentTimeMillis();    Map<String,String> volumesToCgs=new HashMap<String,String>();    List<VPlexConsistencyGroupInfo> cgs=client.getConsistencyGroups();    s_logger.info("Found {} Consistency Groups.",cgs.size());    for (    VPlexConsistencyGroupInfo cg : cgs) {      for (      String volumeName : cg.getVirtualVolumes()) {        volumesToCgs.put(volumeName,cg.getName());      }    }    s_logger.info("Volume to Consistency Group Map is: " + volumesToCgs.toString());    tracker.consistencyGroupFetch=System.currentTimeMillis() - timer;    Map<String,String> clusterIdToNameMap=client.getClusterIdToNameMap();    Map<String,String> varrayToClusterIdMap=new HashMap<String,String>();    Map<String,String> distributedDevicePathToClusterMap=VPlexControllerUtils.getDistributedDevicePathToClusterMap(vplexUri,_dbClient);    if (null != allVirtualVolumes) {      List<URI> allVpoolUris=_dbClient.queryByType(VirtualPool.class,true);      Iterator<VirtualPool> vpoolIter=_dbClient.queryIterativeObjects(VirtualPool.class,allVpoolUris);      List<VirtualPool> allVpools=new ArrayList<VirtualPool>();      while (vpoolIter.hasNext()) {        VirtualPool vpool=vpoolIter.next();        if (VirtualPool.vPoolSpecifiesHighAvailability(vpool)) {          allVpools.add(vpool);        }      }      for (      String name : allVirtualVolumes.keySet()) {        timer=System.currentTimeMillis();        s_logger.info("Discovering Virtual Volume {}",name);        String discoveryKillSwitch=ControllerUtils.getPropertyValueFromCoordinator(_coordinator,VplexBackendIngestionContext.DISCOVERY_KILL_SWITCH);        if ("stop".equals(discoveryKillSwitch)) {          s_logger.warn("discovery kill switch was set to stop, " + "so discontinuing unmanaged volume discovery");          return;        }        String discoveryFilter=ControllerUtils.getPropertyValueFromCoordinator(_coordinator,VplexBackendIngestionContext.DISCOVERY_FILTER);        if ((discoveryFilter != null && !discoveryFilter.isEmpty()) && !(name.matches(discoveryFilter))) {          s_logger.warn("name {} doesn't match discovery filter {}",name,discoveryFilter);          continue;        }        VPlexVirtualVolumeInfo info=allVirtualVolumes.get(name);        if (null == info) {          continue;        }        Volume managedVolume=findVirtualVolumeManagedByVipr(info);        UnManagedVolume unmanagedVolume=findUnmanagedVolumeKnownToVipr(info);        if (null == managedVolume) {          s_logger.info("Virtual Volume {} is not managed by ViPR",name);          if (null != unmanagedVolume) {            s_logger.info("Unmanaged Volume {} is already known to ViPR",name);            updateUnmanagedVolume(info,vplex,unmanagedVolume,volumesToCgs,clusterIdToNameMap,varrayToClusterIdMap,distributedDevicePathToClusterMap,backendVolumeGuidToVvolGuidMap,volumeToStorageViewMap,allVpools);            knownUnmanagedVolumes.add(unmanagedVolume);          } else {            s_logger.info("Unmanaged Volume {} is not known to ViPR",name);            unmanagedVolume=createUnmanagedVolume(info,vplex,volumesToCgs,clusterIdToNameMap,varrayToClusterIdMap,distributedDevicePathToClusterMap,backendVolumeGuidToVvolGuidMap,volumeToStorageViewMap,allVpools);            newUnmanagedVolumes.add(unmanagedVolume);          }          boolean nonRpExported=false;          Set<UnManagedExportMask> uems=volumeToExportMasksMap.get(unmanagedVolume.getNativeGuid());          if (uems != null) {            s_logger.info("{} UnManagedExportMasks found in the map for volume {}",uems.size(),unmanagedVolume.getNativeGuid());            for (            UnManagedExportMask uem : uems) {              s_logger.info("   adding UnManagedExportMask {} to UnManagedVolume",uem.getMaskingViewPath());              unmanagedVolume.getUnmanagedExportMasks().add(uem.getId().toString());              uem.getUnmanagedVolumeUris().add(unmanagedVolume.getId().toString());              unmanagedExportMasksToUpdate.add(uem);              for (              String initUri : uem.getKnownInitiatorUris()) {                s_logger.info("   adding known Initiator URI {} to UnManagedVolume",initUri);                unmanagedVolume.getInitiatorUris().add(initUri);                Initiator init=_dbClient.queryObject(Initiator.class,URI.create(initUri));                unmanagedVolume.getInitiatorNetworkIds().add(init.getInitiatorPort());              }              for (              String path : uem.getUnmanagedInitiatorNetworkIds()) {                s_logger.info("   UnManagedExportMask has this initiator unknown to ViPR: {}",path);              }              if (!recoverPointExportMasks.isEmpty() && recoverPointExportMasks.contains(uem.getId().toString())) {                s_logger.info("unmanaged volume {} is an RP volume",unmanagedVolume.getLabel());                unmanagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),TRUE);              } else {                nonRpExported=true;              }            }          }          persistUnManagedExportMasks(null,unmanagedExportMasksToUpdate,false);          if (nonRpExported) {            s_logger.info("unmanaged volume {} is exported to something other than RP.  Marking IS_NONRP_EXPORTED.",unmanagedVolume.getLabel());            unmanagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),TRUE);            unmanagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),TRUE);          } else {            s_logger.info("unmanaged volume {} is not exported OR not exported to something other than RP.  Not marking IS_NONRP_EXPORTED.",unmanagedVolume.getLabel());            unmanagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),FALSE);            unmanagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),FALSE);          }          persistUnManagedVolumes(newUnmanagedVolumes,knownUnmanagedVolumes,false);        } else {          s_logger.info("Virtual Volume {} is already managed by " + "ViPR as Volume URI {}",name,managedVolume.getId());        }        if (null != unmanagedVolume && !unmanagedVolume.getInactive()) {          allUnmanagedVolumes.add(unmanagedVolume.getId());        }        tracker.volumeTimeResults.put(name,System.currentTimeMillis() - timer);        tracker.totalVolumesDiscovered++;        s_logger.info("estimated discovery time remaining: " + tracker.getDiscoveryTimeRemaining());      }    } else {      s_logger.warn("No virtual volumes were found on VPLEX.");    }    persistUnManagedVolumes(newUnmanagedVolumes,knownUnmanagedVolumes,true);    persistUnManagedExportMasks(null,unmanagedExportMasksToUpdate,true);    cleanUpOrphanedVolumes(vplex.getId(),allUnmanagedVolumes);    processBackendClones(vplex.getId(),backendVolumeGuidToVvolGuidMap);  } catch (  Exception ex) {    s_logger.error("An error occurred during VPLEX unmanaged volume discovery",ex);    String vplexLabel=vplexUri.toString();    if (null != vplex) {      vplexLabel=vplex.getLabel();    }    throw VPlexCollectionException.exceptions.vplexUnmanagedVolumeDiscoveryFailed(vplexLabel,ex.toString());  } finally {    if (null != vplex) {      try {        vplex.setLastDiscoveryStatusMessage(statusMessage);        _dbClient.persistObject(vplex);      } catch (      Exception ex) {        s_logger.error("Error while saving VPLEX discovery status message: {} - Exception: {}",statusMessage,ex.getLocalizedMessage());      }    }  }}  }
class C{  private String parametersToQueryString(){  final StringBuilder queryString=new StringBuilder();  final List<Map.Entry<String,String>> params=new ArrayList<Map.Entry<String,String>>(parameters.entrySet());  for (int index=0; index < params.size(); index++) {    if (index > 0) {      queryString.append('&');    }    final String name=params.get(index).getKey();    final String value=params.get(index).getValue();    queryString.append(name).append('=').append(value);  }  return queryString.toString();}  }
class C{  public static PluginInterface instance(){  Preconditions.checkNotNull(instance,"Error: Plugin interface was not yet instantiated");  return instance;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:      return SexecPackage.EXECUTION_NODE__NAME;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private PostgreSQLEdgeSaver(){}  }
class C{  void recordRemoval(ObjectIntHashMap m){}  }
class C{  public Matrix solve(Matrix B){  return (m == n ? (new LUDecomposition(this)).solve(B) : (new QRDecomposition(this)).solve(B));}  }
class C{  public PreparedGeometryIndex(){}  }
class C{  public void saveCurrentBackground(){  if (background.isPresent()) {    savedBackground=Optional.of(background.get());  }}  }
class C{  public static InputStream toInputStream(final String input,final Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  private void createProxy(final Class<L> listenerInterface,final ClassLoader classLoader){  proxy=listenerInterface.cast(Proxy.newProxyInstance(classLoader,new Class[]{listenerInterface},createInvocationHandler()));}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_FINAL:      return TypesPackage.TSTRUCTURAL_TYPE___IS_FINAL;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == SyntaxRelatedTElement.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private long nextPowerOf2(long num){  final long highBit=Long.highestOneBit(num);  return (highBit == num) ? num : highBit << 1;}  }
class C{  void internalSetOutputStream(OutputStream newOs){  this.os=newOs;}  }
class C{  public synchronized ListIterator<E> listIterator(){  return new ListItr(0);}  }
class C{  public void registerWithContext(Context context){}  }
class C{  @SuppressWarnings("unchecked") private void addAttributesAndMethods(Map<String,Object> m,Declaration d,List<TypeParameter> tparms){  Map<String,Map<String,Object>> sub=(Map<String,Map<String,Object>>)m.get(KEY_ATTRIBUTES);  if (sub != null) {    for (    Map.Entry<String,Map<String,Object>> e : sub.entrySet()) {      if (d.getDirectMember(e.getKey(),null,false) == null) {        if (METATYPE_ALIAS.equals(e.getValue().get(KEY_METATYPE))) {          d.getMembers().add(loadTypeAlias(e.getKey(),e.getValue(),(Scope)d,tparms));        }      }    }    for (    Map.Entry<String,Map<String,Object>> e : sub.entrySet()) {      if (d.getDirectMember(e.getKey(),null,false) == null) {        if (!METATYPE_ALIAS.equals(e.getValue().get(KEY_METATYPE))) {          d.getMembers().add(loadAttribute(e.getKey(),e.getValue(),(Scope)d,tparms));        }      }    }  }  sub=(Map<String,Map<String,Object>>)m.get(KEY_METHODS);  if (sub != null) {    for (    Map.Entry<String,Map<String,Object>> e : sub.entrySet()) {      if (d.getDirectMember(e.getKey(),null,false) == null) {        d.getMembers().add(loadMethod(e.getKey(),e.getValue(),(Scope)d,tparms));      }    }  }}  }
class C{  protected float floatSpeed(int lSpeed){  if (lSpeed == 0) {    return 0.f;  } else   if (lSpeed == 1) {    return -1.f;  }  if (getSpeedStepMode() == DccThrottle.SpeedStepMode28) {    if (lSpeed <= 15) {      return 0.f;    }    return (((lSpeed - 12) / 4f) / 28.f);  } else   if (getSpeedStepMode() == DccThrottle.SpeedStepMode14) {    if (lSpeed <= 15) {      return 0.f;    }    return ((lSpeed - 8) / 8f) / 14.f;  } else {    return ((lSpeed - 1) / 126.f);  }}  }
class C{  public CTagTreeNode(final ITreeNode<CTag> tagNode){  m_tagNode=tagNode;  createChildren();}  }
class C{  public String toString(){  return getClassName() + "[" + getObjectName()+ "]";}  }
class C{  protected void onPostExecute(Uri imagePath){  Intent intent=DownloadReceiver.makeDownloadCompleteIntent(imagePath);  DownloadImageActivity.this.sendBroadcast(intent);  Log.d(TAG,"onPostExecute() finishing activity");  DownloadImageActivity.this.finish();}  }
class C{  private Component createSeparator(){  JSeparator sep=new JSeparator(SwingConstants.VERTICAL);  sep.setPreferredSize(new Dimension(2,30));  sep.setMinimumSize(new Dimension(2,30));  return sep;}  }
class C{  public ExternalRefSorter(OfflineSorter sorter) throws IOException {  this.sorter=sorter;  this.input=sorter.getDirectory().createTempOutput(sorter.getTempFileNamePrefix(),"RefSorterRaw",IOContext.DEFAULT);  this.writer=new OfflineSorter.ByteSequencesWriter(this.input);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static int dialDownHeat(Mounted weapon,WeaponType wtype,int range){  int toReturn=wtype.getHeat();  if (!wtype.hasModes()) {    return toReturn;  }  int damage=wtype.getDamage(range);  int newDamage=Compute.dialDownDamage(weapon,wtype,range);  toReturn=Math.max(1,wtype.getHeat() - Math.max(0,damage - newDamage));  return toReturn;}  }
class C{  public void closingCancel(){  if (m_Customizer != null) {    m_Customizer.closingCancel();  }}  }
class C{  protected void decodeImageData(){  int NullCode=-1;  int npix=iw * ih;  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;  if ((pixels == null) || (pixels.length < npix)) {    pixels=new byte[npix];  }  if (prefix == null)   prefix=new short[MaxStackSize];  if (suffix == null)   suffix=new byte[MaxStackSize];  if (pixelStack == null)   pixelStack=new byte[MaxStackSize + 1];  data_size=read();  clear=1 << data_size;  end_of_information=clear + 1;  available=clear + 2;  old_code=NullCode;  code_size=data_size + 1;  code_mask=(1 << code_size) - 1;  for (code=0; code < clear; code++) {    prefix[code]=0;    suffix[code]=(byte)code;  }  datum=bits=count=first=top=pi=bi=0;  for (i=0; i < npix; ) {    if (top == 0) {      if (bits < code_size) {        if (count == 0) {          count=readBlock();          if (count <= 0)           break;          bi=0;        }        datum+=(((int)block[bi]) & 0xff) << bits;        bits+=8;        bi++;        count--;        continue;      }      code=datum & code_mask;      datum>>=code_size;      bits-=code_size;      if ((code > available) || (code == end_of_information))       break;      if (code == clear) {        code_size=data_size + 1;        code_mask=(1 << code_size) - 1;        available=clear + 2;        old_code=NullCode;        continue;      }      if (old_code == NullCode) {        pixelStack[top++]=suffix[code];        old_code=code;        first=code;        continue;      }      in_code=code;      if (code == available) {        pixelStack[top++]=(byte)first;        code=old_code;      }      while (code > clear) {        pixelStack[top++]=suffix[code];        code=prefix[code];      }      first=((int)suffix[code]) & 0xff;      if (available >= MaxStackSize)       break;      pixelStack[top++]=(byte)first;      prefix[available]=(short)old_code;      suffix[available]=(byte)first;      available++;      if (((available & code_mask) == 0) && (available < MaxStackSize)) {        code_size++;        code_mask+=available;      }      old_code=in_code;    }    top--;    pixels[pi++]=pixelStack[top];    i++;  }  for (i=pi; i < npix; i++) {    pixels[i]=0;  }}  }
class C{  public CCNode addChild(CCNode child,int z,float ratioX,float ratioY,float offsetX,float offsetY){  assert child != null : "Argument must be non-null";  CCPointObject obj=new CCPointObject(ratioX,ratioY,offsetX,offsetY);  obj.setChild(child);  parallaxArray_.add(obj);  CGPoint pnt=getPosition();  float x=pnt.x * ratioX + offsetX;  float y=pnt.y * ratioY + offsetY;  child.setPosition(CGPoint.make(x,y));  return super.addChild(child,z,child.getTag());}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzReader == null)   return true;  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  public ServiceConfig(VirtualHost virtualHost,PathMapping pathMapping,Service<?,?> service){  this(virtualHost,pathMapping,service,null);}  }
class C{  private Segment loadMemorySegment(long segmentId,long segmentVersion){  File file=SegmentFile.createSegmentFile(name,storage.directory(),segmentId,segmentVersion);  Buffer buffer=HeapBuffer.allocate(Math.min(DEFAULT_BUFFER_SIZE,storage.maxSegmentSize()),Integer.MAX_VALUE);  SegmentDescriptor descriptor=new SegmentDescriptor(buffer);  Segment segment=new Segment(new SegmentFile(file),buffer.position(SegmentDescriptor.BYTES).slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);  LOGGER.debug("Loaded memory segment: {}",descriptor.id());  return segment;}  }
class C{  private boolean exportGroupMasksContainExportGroupVolume(ExportGroup exportGroup,List<ExportMask> exportMasks){  boolean maskContainsVolume=false;  StringMap egVolumes=exportGroup.getVolumes();  if (egVolumes != null && !egVolumes.isEmpty()) {    for (    ExportMask exportMask : exportMasks) {      StringMap emVolumes=exportMask.getVolumes();      if (emVolumes != null && !emVolumes.isEmpty()) {        Set<String> emVolumeIds=new HashSet<>();        emVolumeIds.addAll(emVolumes.keySet());        emVolumeIds.retainAll(egVolumes.keySet());        if (!emVolumeIds.isEmpty()) {          maskContainsVolume=true;          break;        }      }    }  }  return maskContainsVolume;}  }
class C{  public MongoClientOptions.Builder options(){  return optionBuilder;}  }
class C{  private void redirectEvent(final MenuKeyEvent ev){  Component invoker;  invoker=getInvoker();  if (invoker != null) {    KeyEvent nev;    KeyListener[] listeners;    nev=new KeyEvent(invoker,ev.getID(),ev.getWhen(),ev.getModifiersEx(),ev.getKeyCode(),ev.getKeyChar(),ev.getKeyLocation());    listeners=invoker.getKeyListeners();switch (nev.getID()) {case KeyEvent.KEY_PRESSED:      for (      final KeyListener l : listeners) {        l.keyPressed(nev);      }    break;case KeyEvent.KEY_RELEASED:  for (  final KeyListener l : listeners) {    l.keyReleased(nev);  }break;case KeyEvent.KEY_TYPED:for (final KeyListener l : listeners) {l.keyTyped(nev);}break;default :}ev.consume();}}  }
class C{  @RpcMethod public void startImageSweep(String dataStore,List<InactiveImageDescriptor> images,Long sweepRate,Long timeout,AsyncMethodCallback<Host.AsyncClient.start_image_sweep_call> handler) throws RpcException {  ensureClient();  StartImageSweepRequest request=new StartImageSweepRequest(dataStore,images);  if (null != sweepRate) {    request.setSweep_rate(sweepRate);  }  if (null != timeout) {    request.setTimeout(timeout);  }  try {    logger.info("start_image_sweep target {}, request {}",getHostIp(),request);    clientProxy.setTimeout(START_IMAGE_SWEEP_TIMEOUT_MS);    clientProxy.start_image_sweep(request,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public static double SSmaxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.148 -0500",hash_original_method="E5C6AAA39851A50D9CE3B905BCD5E24D",hash_generated_method="8453B60A26CF7AC876CC2397A298D8CA") private void nativeSetSelection(int start,int end){  addTaint(start);  addTaint(end);}  }
class C{  static void appendVmErgoMessage(boolean isServerClass,String vm){  outBuf=outBuf.append(getLocalizedMessage("java.launcher.ergo.message1",vm));  outBuf=(isServerClass) ? outBuf.append(",\n" + getLocalizedMessage("java.launcher.ergo.message2") + "\n\n") : outBuf.append(".\n\n");}  }
class C{  public void propertyChange(PropertyChangeEvent e){  MTreeNode tn=(MTreeNode)e.getNewValue();  log.info(tn.toString());  if (tn == null)   return;  ListModel model=centerList.getModel();  int size=model.getSize();  int index=-1;  for (index=0; index < size; index++) {    ListItem item=(ListItem)model.getElementAt(index);    if (item.id == tn.getNode_ID())     break;  }  centerList.setSelectedIndex(index);}  }
class C{  public boolean verifySignature(byte[] digest,BigInteger r,BigInteger s){  if (this.forSigning) {    throw new IllegalStateException("not initialised for verifying");  }  ECPublicKeyParameters pubKey=(ECPublicKeyParameters)key;  BigInteger n=pubKey.getParameters().getN();  int nBitLength=n.bitLength();  BigInteger e=new BigInteger(1,digest);  int eBitLength=e.bitLength();  if (eBitLength > nBitLength) {    throw new DataLengthException("input too large for ECNR key.");  }  if (r.compareTo(ECConstants.ONE) < 0 || r.compareTo(n) >= 0) {    return false;  }  if (s.compareTo(ECConstants.ZERO) < 0 || s.compareTo(n) >= 0) {    return false;  }  ECPoint G=pubKey.getParameters().getG();  ECPoint W=pubKey.getQ();  ECPoint P=ECAlgorithms.sumOfTwoMultiplies(G,s,W,r).normalize();  if (P.isInfinity()) {    return false;  }  BigInteger x=P.getAffineXCoord().toBigInteger();  BigInteger t=r.subtract(x).mod(n);  return t.equals(e);}  }
class C{  private static int greatestCommonDivisor(int u,int v){  if (u == 0 || v == 0) {    if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {      throw new ArithmeticException("overflow: gcd is 2^31");    }    return Math.abs(u) + Math.abs(v);  }  if (Math.abs(u) == 1 || Math.abs(v) == 1) {    return 1;  }  if (u > 0) {    u=-u;  }  if (v > 0) {    v=-v;  }  int k=0;  while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {    u/=2;    v/=2;    k++;  }  if (k == 31) {    throw new ArithmeticException("overflow: gcd is 2^31");  }  int t=(u & 1) == 1 ? v : -(u / 2);  do {    while ((t & 1) == 0) {      t/=2;    }    if (t > 0) {      u=-t;    } else {      v=t;    }    t=(v - u) / 2;  } while (t != 0);  return -u * (1 << k);}  }
class C{  public SimpleMqttConnection(final ReconnectionManager reconnectionManager,final String id,final MqttConnectionDetails connectionDetails) throws ConfigurationException {  super(reconnectionManager,new MqttConnectionDetailsWithOptions(id,connectionDetails));}  }
class C{  @Override public boolean add(Hypothesis hyp){  if (!coverages.containsKey((hyp.getCoverage())))   coverages.put(hyp.getCoverage(),new ArrayList<>());  coverages.get(hyp.getCoverage()).add(hyp);  return super.add(hyp);}  }
class C{  public Slack parse(String parse){  this.parse=parse;  return this;}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd) {    return true;  }  return false;}  }
class C{  public void removeFavorite(Emoticon emote){  favorites.remove(createFavorite(emote));  favoritesNotFound.remove(emote.code);}  }
class C{  @Deprecated public boolean isFounder(){  return isOwner;}  }
class C{  @Interruptible public static void printPhasesXml(){  Xml.openTag("mmtk-stats-per-gc");  for (int p=0; p <= phase; p+=2) {    Xml.openTag("phase",false);    Xml.attribute("gc",(p / 2) + 1);    Xml.closeMinorTag();    for (int c=0; c < counters; c++) {      if (!counter[c].isComplex())       if (counter[c].mergePhases()) {        printPhaseStatXml(counter[c],p,Phase.COMBINED);      } else {        printPhaseStatXml(counter[c],p,Phase.MUTATOR);        printPhaseStatXml(counter[c],p,Phase.GC);      }    }    Xml.closeTag("phase");  }  Xml.closeTag("mmtk-stats-per-gc");}  }
class C{  public String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public BukkitChunk_All(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  public void testLess(){  m_Filter=getFilter("ATT2 < 4");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(7,result.numInstances());}  }
class C{  protected TreeNode convert(TreeNode parent,Node node){  TreeNode treeNode=new TreeNode(node.getNodeName(),parent);  NamedNodeMap attributes=node.getAttributes();  if (attributes != null) {    int n=attributes.getLength();    for (int i=0; i < n; i++) {      Node attribute=attributes.item(i);      treeNode.addAttribute(attribute.getNodeName(),attribute.getNodeValue());    }  }  NodeList children=node.getChildNodes();  if (children != null) {    int n=children.getLength();    for (int i=0; i < n; i++) {      Node child=children.item(i);      if (child instanceof Comment)       continue;      if (child instanceof Text) {        String body=((Text)child).getData();        if (body != null) {          body=body.trim();          if (body.length() > 0)           treeNode.setBody(body);        }      } else {        TreeNode treeChild=convert(treeNode,child);      }    }  }  return (treeNode);}  }
class C{  public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  public int typeInfoArray(int pos,int offset,int num,boolean isLocals){  for (int k=0; k < num; k++)   pos=typeInfoArray2(k,pos);  return pos;}  }
class C{  @Override public boolean supportTransaction(){  return false;}  }
class C{  private boolean isPaused(final String crawljob){  final Object[] status=this.sb.crawlJobsStatus.get(crawljob);  boolean pauseEnded=false;synchronized (status[SwitchboardConstants.CRAWLJOB_SYNC]) {    if (((Boolean)status[SwitchboardConstants.CRAWLJOB_STATUS]).booleanValue()) {      try {        status[SwitchboardConstants.CRAWLJOB_SYNC].wait();      } catch (      final InterruptedException e) {        pauseEnded=true;      }    }  }  return pauseEnded;}  }
class C{  protected static ByteBuffer decode(PDFObject dict,ByteBuffer buf,PDFObject params) throws PDFParseException {  buf.rewind();  byte[] ary=new byte[buf.remaining()];  buf.get(ary);  Bitmap img=BitmapFactory.decodeByteArray(ary,0,ary.length);  if (img == null)   throw new PDFParseException("could not decode image of compressed size " + ary.length);  Config conf=img.getConfig();  Log.e("ANDPDF.dctdecode","decoded image type" + conf);  int size=4 * img.getWidth() * img.getHeight();  if (conf == Config.RGB_565)   size=2 * img.getWidth() * img.getHeight();  java.nio.ByteBuffer byteBuf=java.nio.ByteBuffer.allocate(size);  img.copyPixelsToBuffer(byteBuf);  ByteBuffer result=ByteBuffer.fromNIO(byteBuf);  result.rewind();  return result;}  }
class C{  public boolean hasCondition(C condition){  return this.cfd.containsKey(condition);}  }
class C{  @Override public void onInflate(Activity activity,AttributeSet attrs,Bundle savedInstanceState){  super.onInflate(activity,attrs,savedInstanceState);  TypedArray a=activity.obtainStyledAttributes(attrs,R.styleable.FragmentArguments);  mLabel=a.getText(R.styleable.FragmentArguments_android_label);  a.recycle();}  }
class C{  public static Boolean toBoolean(double d){  return d != 0 ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static File createTempDir(File parent){  File temp=new File(parent,Integer.toString(Math.abs(UNSEEDED_RANDOM.nextInt()) % 1000000));  temp.delete();  temp.mkdir();  temp.deleteOnExit();  return temp;}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  public Class<? extends Enum> enumType(){  return enumType;}  }
class C{  private Object readResolve() throws ObjectStreamException {  return INSTANCE;}  }
class C{  public boolean isSealed(){  return sealBase != null;}  }
class C{  public Mbfs(IndependenceTest test,int depth){  if (test == null) {    throw new NullPointerException();  }  if (depth == -1) {    depth=Integer.MAX_VALUE;  }  if (depth < 0) {    throw new IllegalArgumentException("Depth must be >= -1: " + depth);  }  this.test=test;  this.depth=depth;  this.variables=test.getVariables();}  }
class C{  public void handleShiftClick(GlowPlayer player,InventoryView view,int clickedSlot,ItemStack clickedItem){  clickedItem=player.getInventory().tryToFillSlots(clickedItem,8,-1,35,8);  view.setItem(clickedSlot,clickedItem);}  }
class C{  public void deleteMarkedMltsFromDb(){synchronized (this) {    if (mltsToDelete.isEmpty()) {      return;    }  }  try {    GTG.timmyDb.beginTransaction();    TimmyDatastoreAccessor<MediaLocTime> da=new TimmyDatastoreAccessor<MediaLocTime>(GTG.mediaLocTimeTimmyTable);synchronized (this) {      for (      MediaLocTime mlt : mltsToDelete) {        mlt.markDeleted();        da.updateRow(mlt);      }      mltsToDelete.clear();    }    GTG.timmyDb.setTransactionSuccessful();  } catch (  IOException e) {    throw new IllegalStateException(e);  } finally {    try {      GTG.timmyDb.endTransaction();    } catch (    IOException e) {      throw new IllegalStateException(e);    }  }}  }
class C{  private Runtime(){}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SRETURN;}  }
class C{  @BeforeClass public void init() throws Exception {  bufferProperties=new BufferProperties();  bufferProperties.log=mock(Logger.class);  bufferProperties.bytesMaintenancePercentage=0.2f;  bufferProperties.evictionFragmentSizePercentage=0.1f;  bufferProperties.evictionOccupancyPercentage=0.8f;  bufferProperties.indexingTreeCleaningThreads=1;  bufferProperties.indexingWaitTime=500l;  bufferProperties.maxObjectExpansionRate=0.05f;  bufferProperties.maxObjectExpansionRateActiveTillBufferSize=10;  bufferProperties.maxObjectExpansionRateActiveFromOccupancy=0.75f;  bufferProperties.maxOldSpaceOccupancy=0.9f;  bufferProperties.maxOldSpaceOccupancyActiveFromOldGenSize=1024 * 1024 * 100;  bufferProperties.minObjectExpansionRate=0.02f;  bufferProperties.minObjectExpansionRateActiveFromBufferSize=100;  bufferProperties.minObjectExpansionRateActiveTillOccupancy=0.35f;  bufferProperties.minOldSpaceOccupancy=0.2f;  bufferProperties.minOldSpaceOccupancyActiveTillOldGenSize=1024 * 1024 * 200;  bufferProperties.postConstruct();}  }
class C{  public void saveAsJPEG(File file,int width,int height,double quality) throws IOException, TranscoderException {  JPEGTranscoder t=new JPEGTranscoder();  t.addTranscodingHint(JPEGTranscoder.KEY_WIDTH,new Float(width));  t.addTranscodingHint(JPEGTranscoder.KEY_HEIGHT,new Float(height));  t.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(quality));  transcode(file,t);}  }
class C{  public void write(TungstenProperties properties,boolean fsync) throws FileIOException {  String contents;  if (JAVA_PROPERTIES.equals(format)) {    TreeMap<String,String> map=new TreeMap<String,String>(properties.map());    StringBuffer sb=new StringBuffer();    for (    String key : map.keySet()) {      sb.append(String.format("%s=%s\n",key,map.get(key)));    }    contents=sb.toString();  } else   if (JSON.equals(format)) {    try {      contents=properties.toJSON(true);    } catch (    Exception e) {      throw new FileIOException("Unable to convert to JSON: file=" + filePath.toString() + " format="+ format,e);    }  } else {    throw new FileIOException("Unrecognized property output format: file=" + filePath.toString() + " format="+ format);  }  fileIO.write(filePath,contents,charset,fsync);}  }
class C{  public LZ8(){  super(10,2,21,21,4);}  }
class C{  public GitlabHTTPRequestor authenticate(String token,TokenType type,AuthMethod method){  this.apiToken=token;  this.tokenType=type;  this.authMethod=method;  return this;}  }
class C{  public void test_stressBlobBlobHeaderDeferredFrees(){  final Properties properties=new Properties(getProperties());  properties.setProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,"4000");  final int maxFixed=3;  properties.setProperty(RWStore.Options.ALLOCATION_SIZES,"1,2," + maxFixed);  final int maxAlloc=maxFixed * 64;  final int leafEntries=maxAlloc / 8;  final int headerEntries=maxAlloc / 4;  final int threshold=headerEntries * leafEntries;  final int nallocs=threshold << 3;  Journal store=(Journal)getStore(properties);  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    ArrayList<Long> addrs=new ArrayList<Long>();    for (int i=0; i < nallocs; i++) {      addrs.add(bs.write(randomData(45)));    }    store.commit();    for (    long addr : addrs) {      bs.delete(addr);    }    for (int i=0; i < nallocs; i++) {      if (!bs.isCommitted(addrs.get(i))) {        fail("i=" + i + ", addr="+ addrs.get(i));      }    }    store.commit();    Thread.currentThread().sleep(6000);    final long addr2=bs.write(randomData(220));    store.commit();    bs.delete(addr2);    store.commit();    for (int i=0; i < nallocs; i++) {      assertFalse(bs.isCommitted(addrs.get(i)));    }  } catch (  InterruptedException e) {  } finally {    store.destroy();  }}  }
class C{  public EaseOutIn(float a,float p){  this.a=a;  this.p=p;}  }
class C{  public final AssertSubscriber<T> assertContainValues(Set<? extends T> expectedValues){  if (!valuesStorage) {    throw new IllegalStateException("Using assertNoValues() requires enabling values storage");  }  if (expectedValues.size() > values.size()) {    throw new AssertionError("Actual contains fewer elements" + values,null);  }  Iterator<? extends T> expected=expectedValues.iterator();  for (; ; ) {    boolean n2=expected.hasNext();    if (n2) {      T t2=expected.next();      if (!values.contains(t2)) {        throw new AssertionError("The element is not contained in the " + "received resuls" + " = "+ valueAndClass(t2),null);      }    } else {      break;    }  }  return this;}  }
class C{  public boolean containsKey(Object name){  return map.containsKey(name);}  }
class C{  private FoodSource nearFoodSource(){  Object[] objects=this.getObjectsWithinMyDistance(.5,true,true,false);  objects=Filter.filter(objects,FoodSource.class);  FoodSource fs=null;  if (objects.length > 0) {    fs=(FoodSource)objects[r.nextInt(objects.length)];  }  return fs;}  }
class C{  static private void exec(JSONObject object,StringBuilder response) throws JSONException, IllegalArgumentException, IllegalAccessException {  SpydroidApplication application=SpydroidApplication.getInstance();  Context context=application.getApplicationContext();  String action=object.getString("action");  if (action.equals("sounds")) {    Field[] raws=R.raw.class.getFields();    response.append("[");    for (int i=0; i < raws.length - 1; i++) {      response.append("\"" + raws[i].getName() + "\",");    }    response.append("\"" + raws[raws.length - 1].getName() + "\"]");  } else   if (action.equals("screen")) {    response.append(application.applicationForeground ? "\"1\"" : "\"0\"");  } else   if (action.equals("play")) {    Field[] raws=R.raw.class.getFields();    for (int i=0; i < raws.length; i++) {      if (raws[i].getName().equals(object.getString("name"))) {        mSoundPool.load(application,raws[i].getInt(null),0);      }    }    response.append("[]");  } else   if (action.equals("get")) {    final SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(context);    response.append("{\"streamAudio\":" + settings.getBoolean("stream_audio",false) + ",");    response.append("\"audioEncoder\":\"" + (application.audioEncoder == SessionBuilder.AUDIO_AMRNB ? "AMR-NB" : "AAC") + "\",");    response.append("\"streamVideo\":" + settings.getBoolean("stream_video",true) + ",");    response.append("\"videoEncoder\":\"" + (application.videoEncoder == SessionBuilder.VIDEO_H263 ? "H.263" : "H.264") + "\",");    response.append("\"videoResolution\":\"" + application.videoQuality.resX + "x"+ application.videoQuality.resY+ "\",");    response.append("\"videoFramerate\":\"" + application.videoQuality.framerate + " fps\",");    response.append("\"videoBitrate\":\"" + application.videoQuality.bitrate / 1000 + " kbps\"}");  } else   if (action.equals("set")) {    final JSONObject settings=object.getJSONObject("settings");    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);    final Editor editor=prefs.edit();    editor.putBoolean("stream_video",settings.getBoolean("stream_video"));    application.videoQuality=VideoQuality.parseQuality(settings.getString("video_quality"));    editor.putInt("video_resX",application.videoQuality.resX);    editor.putInt("video_resY",application.videoQuality.resY);    editor.putString("video_framerate",String.valueOf(application.videoQuality.framerate));    editor.putString("video_bitrate",String.valueOf(application.videoQuality.bitrate / 1000));    editor.putString("video_encoder",settings.getString("video_encoder").equals("H.263") ? "2" : "1");    editor.putBoolean("stream_audio",settings.getBoolean("stream_audio"));    editor.putString("audio_encoder",settings.getString("audio_encoder").equals("AMR-NB") ? "3" : "5");    editor.commit();    response.append("[]");  } else   if (action.equals("state")) {    Exception exception=application.lastCaughtException;    response.append("{");    if (exception != null) {      String lastError=exception.getMessage();      StackTraceElement[] stack=exception.getStackTrace();      StringBuilder builder=new StringBuilder(exception.getClass().getName() + " : " + lastError+ "||");      for (int i=0; i < stack.length; i++)       builder.append("at " + stack[i].getClassName() + "."+ stack[i].getMethodName()+ " ("+ stack[i].getFileName()+ ":"+ stack[i].getLineNumber()+ ")||");      response.append("\"lastError\":\"" + (lastError != null ? lastError : "unknown error") + "\",");      response.append("\"lastStackTrace\":\"" + builder.toString() + "\",");    }    response.append("\"activityPaused\":\"" + (application.applicationForeground ? "1" : "0") + "\"");    response.append("}");  } else   if (action.equals("clear")) {    application.lastCaughtException=null;    response.append("[]");  } else   if (action.equals("battery")) {    response.append("\"" + application.batteryLevel + "\"");  } else   if (action.equals("buzz")) {    Vibrator vibrator=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);    vibrator.vibrate(300);    response.append("[]");  } else   if (action.equals("volume")) {    AudioManager audio=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);    if (object.has("set")) {      audio.setStreamVolume(AudioManager.STREAM_MUSIC,object.getInt("set"),AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE);      response.append("[]");    } else {      int max=audio.getStreamMaxVolume(AudioManager.STREAM_MUSIC);      int current=audio.getStreamVolume(AudioManager.STREAM_MUSIC);      response.append("{\"max\":" + max + ",\"current\":"+ current+ "}");    }  }}  }
class C{  public static Map<String,Object> retrieveMissingScrumRevision(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String latestRevision=(String)context.get("latestRevision");  String repositoryRoot=(String)context.get("repositoryRoot");  Map<String,Object> result=ServiceUtil.returnSuccess();  try {    if (UtilValidate.isNotEmpty(repositoryRoot) && UtilValidate.isNotEmpty(latestRevision)) {      Integer revision=Integer.parseInt(latestRevision.trim());      for (int i=1; i <= revision; i++) {        String logline=null;        List<String> logMessageList=FastList.newInstance();        String logCommand="svn log -r" + i + " "+ repositoryRoot;        Process logProcess=Runtime.getRuntime().exec(logCommand);        BufferedReader logIn=new BufferedReader(new InputStreamReader(logProcess.getInputStream()));        while ((logline=logIn.readLine()) != null) {          logMessageList.add(logline.toString().trim());        }        if (UtilValidate.isNotEmpty(logMessageList)) {          String userInfo=logMessageList.get(1).replace(" | ",",");          String taskInfo=logMessageList.get(3);          String[] versionInfoTemp=userInfo.split(",");          String user=versionInfoTemp[1];          String taskId=null;          char[] taskInfoList=taskInfo.toCharArray();          int count=0;          for (int j=0; j < taskInfoList.length; j++) {            if (Character.isDigit(taskInfoList[j])) {              count=count + 1;            } else {              count=0;            }            if (count == 5) {              taskId=taskInfo.substring(j - 4,j + 1);            }          }          String revisionLink=repositoryRoot.substring(repositoryRoot.lastIndexOf("svn/") + 4,repositoryRoot.length()) + "&revision=" + i;          Debug.logInfo("Revision Link ============== >>>>>>>>>>> " + revisionLink,module);          if (UtilValidate.isNotEmpty(taskId)) {            String version="R" + i;            List<GenericValue> workeffContentList=EntityQuery.use(delegator).from("WorkEffortAndContentDataResource").where("contentName",version.trim(),"drObjectInfo",revisionLink.trim()).queryList();            List<EntityCondition> exprsAnd=FastList.newInstance();            exprsAnd.add(EntityCondition.makeCondition("workEffortId",EntityOperator.EQUALS,taskId));            List<EntityCondition> exprsOr=FastList.newInstance();            exprsOr.add(EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"SCRUM_TASK_ERROR"));            exprsOr.add(EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"SCRUM_TASK_TEST"));            exprsOr.add(EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"SCRUM_TASK_IMPL"));            exprsOr.add(EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"SCRUM_TASK_INST"));            exprsAnd.add(EntityCondition.makeCondition(exprsOr,EntityOperator.OR));            List<GenericValue> workEffortList=EntityQuery.use(delegator).from("WorkEffort").where(exprsAnd).queryList();            if (UtilValidate.isEmpty(workeffContentList) && UtilValidate.isNotEmpty(workEffortList)) {              Map<String,Object> inputMap=FastMap.newInstance();              inputMap.put("taskId",taskId);              inputMap.put("user",user);              inputMap.put("revisionNumber",Integer.toString(i));              inputMap.put("revisionLink",revisionLink);              inputMap.put("revisionDescription",taskInfo);              inputMap.put("userLogin",userLogin);              Debug.logInfo("inputMap ============== >>>>>>>>>>> " + inputMap,module);              dispatcher.runSync("updateScrumRevision",inputMap);            }          }        }      }    }  } catch (  IOException e) {    e.printStackTrace();    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericEntityException entityEx) {    entityEx.printStackTrace();    return ServiceUtil.returnError(entityEx.getMessage());  }catch (  GenericServiceException serviceEx) {    serviceEx.printStackTrace();    return ServiceUtil.returnError(serviceEx.getMessage());  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.264 -0500",hash_original_method="A6BE2578E6D412634113B39CFD73986F",hash_generated_method="1DAFB44181A2B5C36C4DF9798EEB6703") private View moveSelection(View oldSel,View newSel,int delta,int childrenTop,int childrenBottom){  int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  View sel;  final int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,selectedPosition);  final int bottomSelectionPixel=getBottomSelectionPixel(childrenTop,fadingEdgeLength,selectedPosition);  if (delta > 0) {    oldSel=makeAndAddView(selectedPosition - 1,oldSel.getTop(),true,mListPadding.left,false);    final int dividerHeight=mDividerHeight;    sel=makeAndAddView(selectedPosition,oldSel.getBottom() + dividerHeight,true,mListPadding.left,true);    if (sel.getBottom() > bottomSelectionPixel) {      int spaceAbove=sel.getTop() - topSelectionPixel;      int spaceBelow=sel.getBottom() - bottomSelectionPixel;      int halfVerticalSpace=(childrenBottom - childrenTop) / 2;      int offset=Math.min(spaceAbove,spaceBelow);      offset=Math.min(offset,halfVerticalSpace);      oldSel.offsetTopAndBottom(-offset);      sel.offsetTopAndBottom(-offset);    }    if (!mStackFromBottom) {      fillUp(mSelectedPosition - 2,sel.getTop() - dividerHeight);      adjustViewsUpOrDown();      fillDown(mSelectedPosition + 1,sel.getBottom() + dividerHeight);    } else {      fillDown(mSelectedPosition + 1,sel.getBottom() + dividerHeight);      adjustViewsUpOrDown();      fillUp(mSelectedPosition - 2,sel.getTop() - dividerHeight);    }  } else   if (delta < 0) {    if (newSel != null) {      sel=makeAndAddView(selectedPosition,newSel.getTop(),true,mListPadding.left,true);    } else {      sel=makeAndAddView(selectedPosition,oldSel.getTop(),false,mListPadding.left,true);    }    if (sel.getTop() < topSelectionPixel) {      int spaceAbove=topSelectionPixel - sel.getTop();      int spaceBelow=bottomSelectionPixel - sel.getBottom();      int halfVerticalSpace=(childrenBottom - childrenTop) / 2;      int offset=Math.min(spaceAbove,spaceBelow);      offset=Math.min(offset,halfVerticalSpace);      sel.offsetTopAndBottom(offset);    }    fillAboveAndBelow(sel,selectedPosition);  } else {    int oldTop=oldSel.getTop();    sel=makeAndAddView(selectedPosition,oldTop,true,mListPadding.left,true);    if (oldTop < childrenTop) {      int newBottom=sel.getBottom();      if (newBottom < childrenTop + 20) {        sel.offsetTopAndBottom(childrenTop - sel.getTop());      }    }    fillAboveAndBelow(sel,selectedPosition);  }  return sel;}  }
class C{  protected byte[] generateResponseValue(String authMethod,String digestUriValue,String qopValue,String usernameValue,String realmValue,char[] passwdValue,byte[] nonceValue,byte[] cNonceValue,int nonceCount,byte[] authzidValue) throws NoSuchAlgorithmException, UnsupportedEncodingException, IOException {  MessageDigest md5=MessageDigest.getInstance("MD5");  byte[] hexA1, hexA2;  ByteArrayOutputStream A2, beginA1, A1, KD;  A2=new ByteArrayOutputStream();  A2.write((authMethod + ":" + digestUriValue).getBytes(encoding));  if (qopValue.equals("auth-conf") || qopValue.equals("auth-int")) {    logger.log(Level.FINE,"DIGEST04:QOP: {0}",qopValue);    A2.write(SECURITY_LAYER_MARKER.getBytes(encoding));  }  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"DIGEST05:A2: {0}",A2.toString());  }  md5.update(A2.toByteArray());  byte[] digest=md5.digest();  hexA2=binaryToHex(digest);  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"DIGEST06:HEX(H(A2)): {0}",new String(hexA2));  }  beginA1=new ByteArrayOutputStream();  beginA1.write(stringToByte_8859_1(usernameValue));  beginA1.write(':');  beginA1.write(stringToByte_8859_1(realmValue));  beginA1.write(':');  beginA1.write(stringToByte_8859_1(new String(passwdValue)));  md5.update(beginA1.toByteArray());  digest=md5.digest();  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"DIGEST07:H({0}) = {1}",new Object[]{beginA1.toString(),new String(binaryToHex(digest))});  }  A1=new ByteArrayOutputStream();  A1.write(digest);  A1.write(':');  A1.write(nonceValue);  A1.write(':');  A1.write(cNonceValue);  if (authzidValue != null) {    A1.write(':');    A1.write(authzidValue);  }  md5.update(A1.toByteArray());  digest=md5.digest();  H_A1=digest;  hexA1=binaryToHex(digest);  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"DIGEST08:H(A1) = {0}",new String(hexA1));  }  KD=new ByteArrayOutputStream();  KD.write(hexA1);  KD.write(':');  KD.write(nonceValue);  KD.write(':');  KD.write(nonceCountToHex(nonceCount).getBytes(encoding));  KD.write(':');  KD.write(cNonceValue);  KD.write(':');  KD.write(qopValue.getBytes(encoding));  KD.write(':');  KD.write(hexA2);  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"DIGEST09:KD: {0}",KD.toString());  }  md5.update(KD.toByteArray());  digest=md5.digest();  byte[] answer=binaryToHex(digest);  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"DIGEST10:response-value: {0}",new String(answer));  }  return (answer);}  }
class C{  protected void endTag(String tag){}  }
class C{  @SuppressWarnings("unused") public void removeDecor(Decor decor){  int indexOfRemoved=mDecors.indexOf(decor);  if (indexOfRemoved < 0) {    throw new IllegalArgumentException("Decor is not added to SparkleViewPagerLayout");  }  mDecors.remove(decor);  removeDecorView(decor);}  }
class C{  public void clear(){  clear(DEFAULT_CAPACITY);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CFunctionUpdater(final ZyGraph graph){  m_graph=graph;}  }
class C{  public static byte[] decode(final String base64String){  return new Base64().decode(base64String);}  }
class C{  public static SearchFragment newInstance(String productName){  SearchFragment searchFragment=new SearchFragment();  Bundle args=new Bundle();  args.putString(KEY_PRODUCT_NAME,productName);  searchFragment.setArguments(args);  return searchFragment;}  }
class C{  public static void write(String filename,Object o) throws Exception {  write(new FileOutputStream(filename),o);}  }
class C{  public void testDeadlocksRename() throws Exception {  checkDeadlocksRepeat(5,2,2,2,RENAME_CNT,0,0,0,0);}  }
class C{  private SystemUtil(){}  }
class C{  public void pageSetupDialog(){  if (m_layout == null)   layout();  m_layout.pageSetupDialog(getPrinterJob(m_printerName));  if (m_view != null)   m_view.revalidate();}  }
class C{  public static List<ShapeRecord> rectangle(double startx,double starty,double width,double height,double radiusX,double radiusY,double topLeftRadiusX,double topLeftRadiusY,double topRightRadiusX,double topRightRadiusY,double bottomLeftRadiusX,double bottomLeftRadiusY,double bottomRightRadiusX,double bottomRightRadiusY){  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();  if (radiusX == 0.0) {    radiusY=radiusX=0;  } else   if (radiusY == 0.0) {    radiusY=radiusX;  }  if (radiusX > width / 2.0)   radiusX=width / 2.0;  if (radiusY > height / 2.0)   radiusY=height / 2.0;  double[] topLeftRadius=getCornerRadius(topLeftRadiusX,topLeftRadiusY,radiusX,radiusY,width,height);  topLeftRadiusX=topLeftRadius[0];  topLeftRadiusY=topLeftRadius[1];  double[] topRightRadius=getCornerRadius(topRightRadiusX,topRightRadiusY,radiusX,radiusY,width,height);  topRightRadiusX=topRightRadius[0];  topRightRadiusY=topRightRadius[1];  double[] bottomLeftRadius=getCornerRadius(bottomLeftRadiusX,bottomLeftRadiusY,radiusX,radiusY,width,height);  bottomLeftRadiusX=bottomLeftRadius[0];  bottomLeftRadiusY=bottomLeftRadius[1];  double[] bottomRightRadius=getCornerRadius(bottomRightRadiusX,bottomRightRadiusY,radiusX,radiusY,width,height);  bottomRightRadiusX=bottomRightRadius[0];  bottomRightRadiusY=bottomRightRadius[1];  double c0=0.923879532511;  double c1=0.382683432365;  double c3=0.707106781187;  double rx=bottomRightRadiusX;  double ry=bottomRightRadiusY;  double tx=rx / 0.923879532511;  double ty=ry / 0.923879532511;  double dx, currentx;  double dy, currenty;  dx=startx + width - rx;  dy=starty + height - ry;  shapeRecords.add(move((dx + rx),dy));  currentx=(dx + rx);  currenty=dy;  if (bottomRightRadiusX != 0.0) {    shapeRecords.add(curvedEdge(currentx,currenty,(dx + c0 * tx),(dy + c1 * ty),(dx + c3 * rx),(dy + c3 * ry)));    shapeRecords.add(curvedEdge((dx + c3 * rx),(dy + c3 * ry),(dx + c1 * tx),(dy + c0 * ty),dx,(dy + ry)));    currentx=dx;    currenty=dy + ry;  }  rx=bottomLeftRadiusX;  ry=bottomLeftRadiusY;  tx=rx / 0.923879532511;  ty=ry / 0.923879532511;  dx=startx + rx;  dy=starty + height - ry;  shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy + ry)));  currentx=dx;  currenty=dy + ry;  if (bottomLeftRadiusX != 0.0) {    shapeRecords.add(curvedEdge(currentx,currenty,(dx - c1 * tx),(dy + c0 * ty),(dx - c3 * rx),(dy + c3 * ry)));    shapeRecords.add(curvedEdge((dx - c3 * rx),(dy + c3 * ry),(dx - c0 * tx),(dy + c1 * ty),(dx - rx),dy));    currentx=dx - rx;    currenty=dy;  }  rx=topLeftRadiusX;  ry=topLeftRadiusY;  tx=rx / 0.923879532511;  ty=ry / 0.923879532511;  dx=startx + rx;  dy=starty + ry;  shapeRecords.addAll(straightEdge(currentx,currenty,(dx - rx),dy));  currentx=dx - rx;  currenty=dy;  if (topLeftRadiusX != 0.0) {    shapeRecords.add(curvedEdge(currentx,currenty,(dx - c0 * tx),(dy - c1 * ty),(dx - c3 * rx),(dy - c3 * ry)));    shapeRecords.add(curvedEdge((dx - c3 * rx),(dy - c3 * ry),(dx - c1 * tx),(dy - c0 * ty),dx,(dy - ry)));    currentx=dx;    currenty=dy - ry;  }  rx=topRightRadiusX;  ry=topRightRadiusY;  tx=rx / 0.923879532511;  ty=ry / 0.923879532511;  dx=startx + width - rx;  dy=starty + ry;  shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy - ry)));  currentx=dx;  currenty=dy - ry;  if (topRightRadiusX != 0.0) {    shapeRecords.add(curvedEdge(currentx,currenty,(dx + c1 * tx),(dy - c0 * ty),(dx + c3 * rx),(dy - c3 * ry)));    shapeRecords.add(curvedEdge((dx + c3 * rx),(dy - c3 * ry),(dx + c0 * tx),(dy - c1 * ty),(dx + rx),dy));    currentx=(dx + rx);    currenty=dy;  }  rx=bottomRightRadiusX;  ry=bottomRightRadiusY;  tx=rx / 0.923879532511;  ty=ry / 0.923879532511;  dx=startx + width - rx;  dy=starty + height - ry;  shapeRecords.addAll(straightEdge(currentx,currenty,(dx + rx),dy));  return shapeRecords;}  }
class C{  public static void createClientCache(String host,Integer port) throws Exception {  Bug37210DUnitTest test=new Bug37210DUnitTest();  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  cache=test.createCache(props);  Pool p=PoolManager.createFactory().addServer(host,port.intValue()).setSubscriptionEnabled(true).setThreadLocalConnections(true).setReadTimeout(10000).setSocketBufferSize(32768).setMinConnections(3).setSubscriptionRedundancy(-1).create("Bug37210UnitTestPool");  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setPoolName(p.getName());  RegionAttributes attrs=factory.create();  Region region=cache.createRegion(REGION_NAME,attrs);  region.registerInterest("ALL_KEYS");}  }
class C{  public ModuloAxis(String label,Range fixedRange){  super(label);  this.fixedRange=fixedRange;  this.displayStart=270.0;  this.displayEnd=90.0;}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public NTRUEngine(){}  }
class C{  public boolean verifyKeyedChecksum(byte[] data,int size,byte[] key,byte[] checksum,int usage) throws KrbCryptoException {  byte[] cksum=decryptKeyedChecksum(checksum,key);  byte[] new_data=new byte[size + confounderSize()];  System.arraycopy(cksum,0,new_data,0,confounderSize());  System.arraycopy(data,0,new_data,confounderSize(),size);  try {    if (DESKeySpec.isWeak(key,0)) {      key[7]=(byte)(key[7] ^ 0xF0);    }  } catch (  InvalidKeyException ex) {  }  byte[] ivec=new byte[key.length];  byte[] new_cksum=Des.des_cksum(ivec,new_data,key);  byte[] orig_cksum=new byte[cksumSize() - confounderSize()];  System.arraycopy(cksum,confounderSize(),orig_cksum,0,cksumSize() - confounderSize());  return isChecksumEqual(orig_cksum,new_cksum);}  }
class C{  public void removePopupMenuListener(PopupMenuListener l){  listenerList.remove(PopupMenuListener.class,l);}  }
class C{  public String info(){  Project project=StorageManager.getDatabaseProject();  if (project == null) {    return "No info available";  }  StringBuilder sb=new StringBuilder();  sb.append("Total number of classes in the project: " + ProjectUtil.getNumberTestableClasses(project) + "\n");  sb.append("Number of classes in the project that are testable: " + ProjectUtil.getNumberTestableClasses(project) + "\n");  sb.append("Number of generated test suites: " + ProjectUtil.getNumberGeneratedTestSuites(project) + "\n");  sb.append("Overall coverage: " + ProjectUtil.getOverallCoverage(project) + "\n");  return sb.toString();}  }
class C{  public static void assertException(RuntimeException exception,Runnable expression){  if (verbose) {    log("assertException(" + exception + ", "+ expression+ ")");  }  try {    expression.run();  } catch (  RuntimeException failure) {    if (exception.getClass() != failure.getClass()) {      TestUtils.fail();    }    return;  }  TestUtils.fail();}  }
class C{  private void retrieveExtras(){  Bundle extras=getIntent().getExtras();  selectedPosition=extras.getInt(EXTRA_INDEX,0);}  }
class C{  private void populate(){  populateSpeciesMap();  populateCharacterList();}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public ModuleSource(Reader reader,Object securityDomain,URI uri,URI base,Object validator){  this.reader=reader;  this.securityDomain=securityDomain;  this.uri=uri;  this.base=base;  this.validator=validator;}  }
class C{  @Override public boolean add(E o){  if (null == o) {    throw new NullPointerException();  }  if (offer(o)) {    return true;  }  throw new IllegalStateException();}  }
class C{  public BinaryObjectException(String msg){  super(msg);}  }
class C{  private final void inflate(byte[] deflated,byte[] inflated){  inflater.setInput(deflated);  try {    inflater.inflate(inflated);  } catch (  DataFormatException dfe) {    throw new RuntimeException("TIFFImage17" + ": " + dfe.getMessage());  }  inflater.reset();}  }
class C{  private Set<StoragePort> reduceStoragePortMap(Map<String,Set<StoragePort>> map){  Set<StoragePort> set=new HashSet<StoragePort>();  for (  Set<StoragePort> aSet : map.values()) {    set.addAll(aSet);  }  return set;}  }
class C{  public void flip(){  if (greenlight) {    img=null;    repaint();    img=stop.getImage();  } else {    img=null;    repaint();    img=go.getImage();  }  greenlight=!greenlight;  firePropertyChange("State",!greenlight,greenlight);}  }
class C{  public void propertyChange(final PropertyChangeEvent e){  final String propertyName=e.getPropertyName();  if ("enabled".equals(propertyName)) {    fMenu.setEnabled(((Boolean)e.getNewValue()).booleanValue());    return;  }  if (AccessibleContext.ACCESSIBLE_STATE_PROPERTY.equals(propertyName)) {    if (e.getNewValue() == AccessibleState.ENABLED || e.getOldValue() == AccessibleState.ENABLED) {      final Object newValue=e.getNewValue();      fMenu.setEnabled(newValue == AccessibleState.ENABLED);    }    return;  }  if ("accelerator".equals(propertyName)) {    fMenu.setAccelerator((KeyStroke)e.getNewValue());    return;  }  if (AbstractButton.TEXT_CHANGED_PROPERTY.equals(propertyName)) {    fMenu.setLabel((String)e.getNewValue());    return;  }  if (AbstractButton.ICON_CHANGED_PROPERTY.equals(propertyName)) {    fMenu.setIcon((Icon)e.getNewValue());    return;  }  if (JComponent.TOOL_TIP_TEXT_KEY.equals(propertyName)) {    fMenu.setToolTipText((String)e.getNewValue());    return;  }  if (AquaMenuItemUI.IndeterminateListener.CLIENT_PROPERTY_KEY.equals(propertyName)) {    fMenu.setIndeterminate(AquaMenuItemUI.IndeterminateListener.isIndeterminate((JMenuItem)e.getSource()));    return;  }}  }
class C{  public cudaPointerAttributes(){}  }
class C{  public String lastActionMsg(){  if (m_undoStack.size() == 0) {    return "";  }  return m_undoStack.get(m_undoStack.size() - 1).getRedoMsg();}  }
class C{  public int numParameters(){  return numParameters;}  }
class C{  public long score(){  return this.score;}  }
class C{  private String calculateDiffChangeHeader(TaskAttribute diffTaskAttribute){  String newPath=diffTaskAttribute.getAttribute(AppraiseReviewTaskSchema.DIFF_NEWPATH).getValue();  String oldPath=diffTaskAttribute.getAttribute(AppraiseReviewTaskSchema.DIFF_OLDPATH).getValue();  String type=diffTaskAttribute.getAttribute(AppraiseReviewTaskSchema.DIFF_TYPE).getValue();  ChangeType changeType=ChangeType.MODIFY;  try {    changeType=ChangeType.valueOf(type);  } catch (  Exception e) {  }switch (changeType) {case ADD:    return newPath + " (Added)";case COPY:  return newPath + " (Copied from " + oldPath+ ")";case DELETE:return newPath + " (Deleted)";case RENAME:return newPath + " (was " + oldPath+ ")";case MODIFY:default :return newPath + " (Modified)";}}  }
class C{  public CNodeClickHandler(final CGraphModel model){  m_model=Preconditions.checkNotNull(model,"IE01628: Model argument can not be null");}  }
class C{  public void resume(){  engine.resume();}  }
class C{  private View findFocusableViewInBoundsVertically(boolean topFocus,int top,int bottom){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewTop=view.getTop();    int viewBottom=view.getBottom();    if (top < viewBottom && viewTop < bottom) {      final boolean viewIsFullyContained=(top < viewTop) && (viewBottom < bottom);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(topFocus && viewTop < focusCandidate.getTop()) || (!topFocus && viewBottom > focusCandidate.getBottom());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public PrincipalId authenticate(String tenantName,X509Certificate[] tlsCertChain) throws Exception {  return getService().authenticate(tenantName,tlsCertChain,this.getServiceContext());}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.EXISTENTIAL_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___IS_EXISTENTIAL:  return TypeRefsPackage.EXISTENTIAL_TYPE_REF___IS_EXISTENTIAL;case TypeRefsPackage.TYPE_REF___IS_GENERIC:return TypeRefsPackage.EXISTENTIAL_TYPE_REF___IS_GENERIC;case TypeRefsPackage.TYPE_REF___IS_PARAMETERIZED:return TypeRefsPackage.EXISTENTIAL_TYPE_REF___IS_PARAMETERIZED;case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.EXISTENTIAL_TYPE_REF___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  public boolean isLeapYear(int year){  if (year > changeYear) {    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);  }  return year % 4 == 0;}  }
class C{  public void removeEventListener(MultimediaMessagingSessionListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IMultimediaMessagingSessionListener> weakRef=mMultimediaMessagingSessionListeners.remove(listener);    if (weakRef == null) {      return;    }    IMultimediaMessagingSessionListener multimediaMessagingSessionListener=weakRef.get();    if (multimediaMessagingSessionListener != null) {      mApi.removeEventListener2(multimediaMessagingSessionListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public final LC insetsAll(String allSides){  UnitValue insH=ConstraintParser.parseUnitValue(allSides,true);  UnitValue insV=ConstraintParser.parseUnitValue(allSides,false);  insets=new UnitValue[]{insV,insH,insV,insH};  return this;}  }
class C{  protected void visitRET(int pos,byte[] code) throws BadBytecode {}  }
class C{  public static int run(String[] args,PrintWriter out){  JavapTask t=new JavapTask();  t.setLog(out);  return t.run(args);}  }
class C{  @SuppressWarnings("unchecked") private void expandParentActionRow(final Object parentRowIdx){  final Item item=hierarchicalContainer.getItem(parentRowIdx);  if (null != item) {    final Long actionId=(Long)item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTION_ID_HIDDEN).getValue();    final org.eclipse.hawkbit.repository.model.Action action=deploymentManagement.findActionWithDetails(actionId);    final Pageable pageReq=new PageRequest(0,1000,new Sort(Direction.DESC,ActionStatusFields.ID.getFieldName()));    final Page<ActionStatus> actionStatusList;    if (managementUIState.isActionHistoryMaximized()) {      actionStatusList=deploymentManagement.findActionStatusByActionWithMessages(pageReq,action);    } else {      actionStatusList=deploymentManagement.findActionStatusByAction(pageReq,action);    }    final List<ActionStatus> content=actionStatusList.getContent();    int childIdx=1;    for (    final ActionStatus actionStatus : content) {      final String childId=parentRowIdx + " -> " + childIdx;      final Item childItem=hierarchicalContainer.addItem(childId);      if (null != childItem) {        childItem.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTIVE_HIDDEN).setValue("");        childItem.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_DIST).setValue(action.getDistributionSet().getName() + ":" + action.getDistributionSet().getVersion());        childItem.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_DATETIME).setValue(SPDateTimeUtil.getFormattedDate(actionStatus.getCreatedAt()));        childItem.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_STATUS_HIDDEN).setValue(actionStatus.getStatus());        showOrHideMessage(childItem,actionStatus);        ((Hierarchical)hierarchicalContainer).setChildrenAllowed(childId,false);        ((Hierarchical)hierarchicalContainer).setParent(childId,parentRowIdx);        childIdx++;      }    }  }}  }
class C{  public boolean startsWith(XMLString prefix){  return startsWith(prefix,0);}  }
class C{  public boolean isLeavesForwardToNextYear(){  Object oo=get_Value(COLUMNNAME_IsLeavesForwardToNextYear);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SetParams nx(){  addParam(NX);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void playAtIndexImpl(int index){  Log.d(TAG,"Playing track " + (index + 1) + "/"+ mPlaybackQueue.size());  mCurrentTrack=index;  mNativeSink.setPaused(true);  mShouldFlushBuffers=true;  requestStartPlayback();}  }
class C{  public static long fromInternalToMillis(int internal){  if (internal >= 0)   return internal; else   if (internal == Integer.MIN_VALUE)   return Long.MAX_VALUE;  return -internal * 1000;}  }
class C{  public static void computeApprox(TreeSet<TypeVariableBV> workList) throws TypeException {  while (workList.size() > 0) {    TypeVariableBV var=workList.first();    workList.remove(var);    var.fixApprox(workList);  }}  }
class C{  private Shape createCheckMark(int x,int y,int size){  int markSize=(int)(size * SIZE_MULTIPLIER + 0.5);  int markX=x + (int)(size * X_MULTIPLIER + 0.5);  int markY=y + (int)(size * Y_MULTIPLIER + 0.5);  return shapeGenerator.createCheckMark(markX,markY,markSize,markSize);}  }
class C{  public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonArray.getInt(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  int value=0;  if (!jsonArray.isNull(index)) {    value=jsonArray.getInt(index);  }  return value;}  }
class C{  public void writeTime(long writeTime){  this.writeTime=writeTime;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (varStmtKeyword: ");  result.append(varStmtKeyword);  result.append(')');  return result.toString();}  }
class C{  public synchronized void imageComplete(int status){  grabbing=false;switch (status) {default :case IMAGEERROR:    flags|=ImageObserver.ERROR | ImageObserver.ABORT;  break;case IMAGEABORTED:flags|=ImageObserver.ABORT;break;case STATICIMAGEDONE:flags|=ImageObserver.ALLBITS;break;case SINGLEFRAMEDONE:flags|=ImageObserver.FRAMEBITS;break;}producer.removeConsumer(this);notifyAll();}  }
class C{  public static char[] clone(final char[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public UnchangeableAllowingOnBehalfActingException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public String source_locations_xref(Method m){  String out="";  List<SourceLocationTag> locs=m.getLines();  for (  SourceLocationTag loc : locs) {    String cname=loc.getClz();    int line=loc.getLine();    out+=String.format("<a href=%s#%d class=code target=%s> %s:%d</a><br>",app_source_path(cname),line,TARGET,cname,line);  }  return out;}  }
class C{  private CDatabaseConnector(){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROMISIFY_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static BufferedImage createTranslucentCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public static String escape(String str){  int sz=str.length();  StringBuilder buffer=new StringBuilder(2 * sz);  for (int i=0; i < sz; i++) {    char ch=str.charAt(i);    if (ch > 0xfff) {      buffer.append("\\u" + Integer.toHexString(ch));    } else     if (ch > 0xff) {      buffer.append("\\u0" + Integer.toHexString(ch));    } else     if (ch > 0x7f) {      buffer.append("\\u00" + Integer.toHexString(ch));    } else     if (ch < 32) {switch (ch) {case '\b':        buffer.append('\\');      buffer.append('b');    break;case '\n':  buffer.append('\\');buffer.append('n');break;case '\t':buffer.append('\\');buffer.append('t');break;case '\f':buffer.append('\\');buffer.append('f');break;case '\r':buffer.append('\\');buffer.append('r');break;default :if (ch > 0xf) {buffer.append("\\u00" + Integer.toHexString(ch));} else {buffer.append("\\u000" + Integer.toHexString(ch));}break;}} else {switch (ch) {case '\'':buffer.append('\\');buffer.append('\'');break;case '"':buffer.append('\\');buffer.append('"');break;case '\\':buffer.append('\\');buffer.append('\\');break;default :buffer.append(ch);break;}}}return buffer.toString();}  }
class C{  public static ConnectionPanel createConnectionPanel(final Window parent,final NetworkPanel networkPanel){  ConnectionPanel cp=new ConnectionPanel(parent,networkPanel);  cp.addListeners();  return cp;}  }
class C{  public void add(int index,Object element){  addBefore(element,(index == size ? header : entry(index)));}  }
class C{  protected UnionTypeExpressionImpl(){  super();}  }
class C{  static String uiMessagesPath(Locale locale){  return DbMessages.class.getPackage().getName().replaceAll("\\.","/") + "/Messages_" + locale.toString()+ ".properties";}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.783 -0500",hash_original_method="225BF2AA9DF4D481E4497FC0C844BC07",hash_generated_method="19782F09BA8930DFEC3DA1762203EB56") final int inc(int i){  return (++i == items.length) ? 0 : i;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("UASX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UASX");    translateAll(environment,instruction,"UASX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UADDSUBX");    translateAll(environment,instruction,"UADDSUBX",instructions);  }}  }
class C{  protected boolean isGeoDbsvc(){  return _service.getName().equalsIgnoreCase(Constants.GEODBSVC_NAME);}  }
class C{  public UnresolvedPermissionCollection(){  perms=new HashMap<String,List<UnresolvedPermission>>(11);}  }
class C{  public CProjectTree(final JFrame parent,final CDatabaseManager databaseManager){  Preconditions.checkNotNull(databaseManager,"IE01840: Database manager object can't be null");  m_treeModel=new CProjectTreeModel(this);  setModel(m_treeModel);  CProjectTreeDragHandlerInitializer.initialize(parent,this,databaseManager);  addMouseListener(new InternalMouseListener());  setScrollsOnExpand(false);  setRootVisible(false);  m_rootNode=new CRootNode(this,databaseManager);  m_treeModel.setRoot(m_rootNode);  setCellRenderer(new IconNodeRenderer());  m_popup.add(CActionProxy.proxy(new CAddDatabaseAction(this)));}  }
class C{  public static boolean verifySignature(Signature initializedSignatureEngine,byte[] message,byte[] signature) throws SignatureException {  initializedSignatureEngine.update(message);  return initializedSignatureEngine.verify(signature);}  }
class C{  public String toString(){  return super.toString() + "{leafUtil=" + leafUtilization+ ",nodeUtil="+ nodeUtilization+ ",totalUtil="+ totalUtilization+ "}";}  }
class C{  public boolean processIt(String action){  m_message=null;  m_action=action;  if (ACTION_Unlock.equals(m_action))   return unlockIt();  if (ACTION_Invalidate.equals(m_action))   return invalidateIt();  if (ACTION_Prepare.equals(m_action))   return STATUS_InProgress.equals(prepareIt());  if (ACTION_Approve.equals(m_action))   return approveIt();  if (ACTION_Reject.equals(m_action))   return rejectIt();  if (ACTION_Complete.equals(m_action) || ACTION_WaitComplete.equals(m_action)) {    String status=null;    if (isDrafted() || isInvalid()) {      status=prepareIt();      if (!STATUS_InProgress.equals(status))       return false;    }    status=completeIt();    boolean ok=STATUS_Completed.equals(status) || STATUS_InProgress.equals(status) || STATUS_WaitingPayment.equals(status)|| STATUS_WaitingConfirmation.equals(status);    if (m_document != null && ok) {      ArrayList<PO> docsPostProcess=new ArrayList<PO>();      ;      if (m_document instanceof MInvoice || m_document instanceof MInOut) {        if (m_document instanceof MInvoice) {          docsPostProcess=((MInvoice)m_document).getDocsPostProcess();        }        if (m_document instanceof MInOut) {          docsPostProcess=((MInOut)m_document).getDocsPostProcess();        }      }      if (m_document instanceof PO && docsPostProcess.size() > 0) {        for (        PO docafter : docsPostProcess) {          docafter.setProcessedOn("Processed",true,false);          docafter.saveEx();        }      }      if (STATUS_Completed.equals(status) && MClient.isClientAccountingImmediate()) {        m_document.saveEx();        postIt();        if (m_document instanceof PO && docsPostProcess.size() > 0) {          for (          PO docafter : docsPostProcess) {            @SuppressWarnings("unused") String ignoreError=DocumentEngine.postImmediate(docafter.getCtx(),docafter.getAD_Client_ID(),docafter.get_Table_ID(),docafter.get_ID(),true,docafter.get_TrxName());          }        }      }    }    return ok;  }  if (ACTION_ReActivate.equals(m_action))   return reActivateIt();  if (ACTION_Reverse_Accrual.equals(m_action))   return reverseAccrualIt();  if (ACTION_Reverse_Correct.equals(m_action))   return reverseCorrectIt();  if (ACTION_Close.equals(m_action))   return closeIt();  if (ACTION_Void.equals(m_action))   return voidIt();  if (ACTION_Post.equals(m_action))   return postIt();  return false;}  }
class C{  public void reverse(int from,int to){  if (from == to) {    return;  }  if (from > to) {    throw new IllegalArgumentException("from cannot be greater than to");  }  for (int i=from, j=to - 1; i < j; i++, j--) {    swap(i,j);  }}  }
class C{  public boolean checkLoadDataJobStatus(String jobId) throws AdsException {  if (adsURL == null) {    throw new AdsException(AdsException.ADS_CONN_URL_NOT_SET,"ADS JDBC connection URL was not set.",null);  }  if (userName == null) {    throw new AdsException(AdsException.ADS_CONN_USERNAME_NOT_SET,"ADS JDBC connection user name was not set.",null);  }  if (password == null) {    throw new AdsException(AdsException.ADS_CONN_PASSWORD_NOT_SET,"ADS JDBC connection password was not set.",null);  }  if (schema == null) {    throw new AdsException(AdsException.ADS_CONN_SCHEMA_NOT_SET,"ADS JDBC connection schema was not set.",null);  }  try {    String state=this.checkLoadDataJobStatusWithRetry(jobId);    if (state == null) {      throw new AdsException(AdsException.JOB_NOT_EXIST,"Target job does not exist for id: " + jobId,null);    }    if (state.equals("SUCCEEDED")) {      return true;    } else     if (state.equals("FAILED")) {      throw new AdsException(AdsException.JOB_FAILED,"Target job failed for id: " + jobId,null);    } else {      return false;    }  } catch (  Exception e) {    throw new AdsException(AdsException.OTHER,e.getMessage(),e);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mPreview=(CameraSourcePreview)findViewById(R.id.preview);  mGraphicOverlay=(GraphicOverlay)findViewById(R.id.faceOverlay);  final Button button=(Button)findViewById(R.id.flipButton);  button.setOnClickListener(mFlipButtonListener);  if (savedInstanceState != null) {    mIsFrontFacing=savedInstanceState.getBoolean("IsFrontFacing");  }  int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);  if (rc == PackageManager.PERMISSION_GRANTED) {    createCameraSource();  } else {    requestCameraPermission();  }}  }
class C{  public WriteLock(ZooKeeper zookeeper,String dir,List<ACL> acl){  super(zookeeper);  this.dir=dir;  if (acl != null) {    setAcl(acl);  }  this.zop=new LockZooKeeperOperation();}  }
class C{  public R addParams(String key,InputStream stream,String name){  addParams(key,stream,name,null);  return (R)this;}  }
class C{  public AuthScope(final String host,int port,final String realm,final String scheme){  this.host=(host == null) ? ANY_HOST : host.toLowerCase(Locale.ENGLISH);  this.port=(port < 0) ? ANY_PORT : port;  this.realm=(realm == null) ? ANY_REALM : realm;  this.scheme=(scheme == null) ? ANY_SCHEME : scheme.toUpperCase(Locale.ENGLISH);}  }
class C{  public boolean isMarkAsRemoved(int index){  final View view=getChildAt(index);  if (view instanceof TextView) {    return false;  }  return ((AttendeeItem)view.getTag()).mRemoved;}  }
class C{  protected void resetQueue(){  m_OutputQueue=new Queue();}  }
class C{  public Quaterniond computeWeightedAverage(Quaterniond[] qs,double[] weights,int maxSvdIterations,Quaterniond dest){  double m00=0.0, m01=0.0, m02=0.0;  double m10=0.0, m11=0.0, m12=0.0;  double m20=0.0, m21=0.0, m22=0.0;  for (int i=0; i < qs.length; i++) {    Quaterniond q=qs[i];    double dx=q.x + q.x;    double dy=q.y + q.y;    double dz=q.z + q.z;    double q00=dx * q.x;    double q11=dy * q.y;    double q22=dz * q.z;    double q01=dx * q.y;    double q02=dx * q.z;    double q03=dx * q.w;    double q12=dy * q.z;    double q13=dy * q.w;    double q23=dz * q.w;    m00+=weights[i] * (1.0 - q11 - q22);    m01+=weights[i] * (q01 + q23);    m02+=weights[i] * (q02 - q13);    m10+=weights[i] * (q01 - q23);    m11+=weights[i] * (1.0 - q22 - q00);    m12+=weights[i] * (q12 + q03);    m20+=weights[i] * (q02 + q13);    m21+=weights[i] * (q12 - q03);    m22+=weights[i] * (1.0 - q11 - q00);  }  m[0]=m00;  m[1]=m01;  m[2]=m02;  m[3]=m10;  m[4]=m11;  m[5]=m12;  m[6]=m20;  m[7]=m21;  m[8]=m22;  svdDecomposition3d.svd(m,maxSvdIterations,u,v);  u.mul(v.transpose());  return dest.setFromNormalized(u).normalize();}  }
class C{  public static final <A>CollectionX<A> toConcurrentLazyCollection(final Stream<A> stream){  return toConcurrentLazyCollection(stream.iterator());}  }
class C{  public SAML2AuthnRequestException(String message){  super(message);}  }
class C{  public void testSHAProvider(){  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA");  } catch (  NoSuchAlgorithmException e) {    fail("unexpected exception: " + e);  }  byte[] bytes=new byte[]{1,1,1,1,1};  try {    md.update(bytes,-1,1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    md.update(bytes,1,-1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    md=MessageDigest.getInstance("SHA");  } catch (  NoSuchAlgorithmException e) {    fail("unexpected exception: " + e);  }  try {    md.digest(bytes,0,-1);    fail("No expected DigestException");  } catch (  DigestException e) {  }  try {    md.digest(bytes,-1,0);    fail("No expected DigestException");  } catch (  DigestException e) {  }  try {    md=MessageDigest.getInstance("UnknownDigest");    fail("expected NoSuchAlgorithmException");  } catch (  NoSuchAlgorithmException e) {  }}  }
class C{  public static void deleteTable(final CConnection connection,final String table) throws SQLException {  connection.executeUpdate("DROP TABLE IF EXISTS " + table + " CASCADE",true);}  }
class C{  public DeferredImageReplacedElement(ImageResource imageResource,RepaintListener repaintListener,int w,int h){  this._imageResource=imageResource;  _loaded=false;  this.repaintListener=repaintListener;  if (w == -1 && h == -1) {    _doScaleImage=false;    _targetHeight=1;    _targetWidth=1;  } else {    _doScaleImage=true;    _targetHeight=Math.max(1,h);    _targetWidth=Math.max(1,w);  }  _image=ImageUtil.createCompatibleBufferedImage(_targetWidth,_targetHeight);}  }
class C{  public boolean hasWarnings(){  if (warnings.size() > 0) {    return true;  } else {    return false;  }}  }
class C{  @Override public WXDomObject clone(){  if (sDestroy.get()) {    return null;  }  WXDomObject dom=null;  try {    dom=new WXDomObject();    copyFields(dom);  } catch (  Exception e) {    if (WXEnvironment.isApkDebugable()) {      WXLogUtils.e("WXDomObject clone error: ",e);    }  }  return dom;}  }
class C{  @Override public void show(){  show(0,0);}  }
class C{  public void notifyResponse(int code,Hashtable<String,String> headers){synchronized (this) {    this.receivedResponse=code;    super.notify();  }}  }
class C{  public void resetViews(){  if (mPhotoView != null) {    mPhotoView.resetTransformations();  }}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeFooter(v)) {      if (mDataSetObserver != null) {        mDataSetObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public static File createLocalFile(String baseDirectory,String file,long size) throws IOException {  Path filePath=Paths.get(baseDirectory,file);  filePath.toFile().getParentFile().mkdirs();  RandomAccessFile randomAccessFile=new RandomAccessFile(filePath.toString(),"rw");  randomAccessFile.setLength(size);  randomAccessFile.close();  return filePath.toFile();}  }
class C{  public boolean isCrossFadeEnabled(){  return mCrossFade;}  }
class C{  public void put(String key,double value){  if (value == Double.POSITIVE_INFINITY) {    put(key,"INF");  } else   if (value == Double.NEGATIVE_INFINITY) {    put(key,"-INF");  } else {    put(key,Double.toString(value));  }}  }
class C{  public static Settings init(){  return init(DEFAULT_TAG);}  }
class C{  public static void rename(String url,String newFileName,boolean includedSuffix,OnRenameDownloadFileListener onRenameDownloadFileListener){  getFileDownloadManager().rename(url,newFileName,includedSuffix,onRenameDownloadFileListener);}  }
class C{  public static boolean isCountryInRegion(String lookupCountry,String lookupRegion) throws IOException, SDException {  String regions[]=getCountries(lookupRegion);  for (  String region : regions) {    if (region.equals(lookupCountry)) {      return true;    }  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_activity_2_();}  }
class C{  public static String resolveRepoUrl(Repositories repositories,String repoUrl){  if (repoUrl.startsWith("+")) {    String path=repoUrl.substring(1);    Repositories.Repository repo=repositories.getRepository(path);    if (repo != null) {      repoUrl=repo.getUrl();    }  }  return repoUrl;}  }
class C{  protected MultiProtocolURL(){  this.protocol=null;  this.host=null;  this.hostAddress=null;  this.userInfo=null;  this.path=null;  this.searchpart=null;  this.anchor=null;  this.contentDomain=null;  this.port=-1;}  }
class C{  private static ILaunchConfiguration createNewLaunchConfiguration(IProject project) throws CoreException, OperationCanceledException {  String initialName=calculateLaunchConfigName(project);  ILaunchConfiguration launchConfig=GwtSuperDevModeCodeServerLaunchUtil.createLaunchConfig(initialName,project);  return launchConfig;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.backup_restore);  mFillingGroup=(RadioGroup)findViewById(R.id.filling_group);  mAddMayoCheckbox=(CheckBox)findViewById(R.id.mayo);  mAddTomatoCheckbox=(CheckBox)findViewById(R.id.tomato);  mDataFile=new File(getFilesDir(),HugeBackupActivity.DATA_FILE_NAME);  mBackupManager=new BackupManager(this);  populateUI();}  }
class C{  public static Security noSecBootstap(String serverUri){  return new Security(serverUri,true,3,new byte[0],new byte[0],new byte[0],0);}  }
class C{  public void addColumn(String name,Expression expr){  throw new UnsupportedOperationException();}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  @Override public void enableSessionOnly(){  _state=_state.toSessionOnly();}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AbsoluteOrientation(Model mod1,Model mod2){  model1=mod1;  model2=mod2;  List<Feature> featuresForAbsoluteOrientation=new ArrayList<>(model1.getCommonFeatures(model2));  Matrix m1=createMatrix(featuresForAbsoluteOrientation,model1.getPointMap());  Matrix m2=createMatrix(featuresForAbsoluteOrientation,model2.getPointMap());  Matrix points1=m1.copy();  Matrix points2=m2.copy();  Matrix mean1=CalculateMeanValue(m1);  Matrix mean2=CalculateMeanValue(m2);  normalizeCoordinates(m1,mean1);  normalizeCoordinates(m2,mean2);  scaleFactor=getScaleFactor(m1,m2);  R=rotationMatrix(m1,m2);  T=translationVector(R,mean1,mean2);  error=calculateError(points1,points2);}  }
class C{  public boolean isEqual(UserGroup userGroup){  boolean isEqual=false;  if (!commonCompare(userGroup)) {    return isEqual;  }  if (CollectionUtils.isEmpty(this._attributes) || CollectionUtils.isEmpty(userGroup._attributes) || this._attributes.size() != userGroup._attributes.size()) {    _log.debug("Invalid attributes or attributes size does not match.");    return isEqual;  }  for (  String attributeParamString : this._attributes) {    isEqual=compareUserAttributeParam(userGroup,attributeParamString);    if (!isEqual) {      break;    }  }  return isEqual;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ParameterizedTypeRef createPromiseTypeRef(BuiltInTypeScope scope,TypeArgument successType,TypeArgument failureTypeOrNull){  Objects.requireNonNull(successType);  return createTypeRef(scope.getPromiseType(),isVoid(successType) ? scope.getUndefinedTypeRef() : TypeUtils.copyWithProxies(successType),failureTypeOrNull != null ? TypeUtils.copyWithProxies(failureTypeOrNull) : TypeRefsFactory.eINSTANCE.createWildcard());}  }
class C{  private void restoreSorting(){  int sortIndex=BittorrentSettings.BTMEDIATOR_COLUMN_SORT_INDEX.getValue();  boolean sortOrder=BittorrentSettings.BTMEDIATOR_COLUMN_SORT_ORDER.getValue();  LimeTableColumn column=BTDownloadDataLine.staticGetColumn(sortIndex);  if (sortIndex != -1 && column != null && TablesHandlerSettings.getVisibility(column.getId(),column.getDefaultVisibility()).getValue()) {    DATA_MODEL.sort(sortIndex);    if (!sortOrder) {      DATA_MODEL.sort(sortIndex);    }  } else {    DATA_MODEL.sort(BTDownloadDataLine.DATE_CREATED_COLUMN.getModelIndex());  }}  }
class C{  private static Simulation fromXml(InputSource source) throws ParserConfigurationException, SAXException, IOException {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser parser=factory.newSAXParser();  XmlReader reader=new XmlReader();  parser.parse(source,reader);  Capacity capacity=new Capacity(reader.bodies.size(),reader.joints.size(),10);  World world=new World(capacity);  List<SandboxRay> rays=new ArrayList<SandboxRay>();  Camera camera=new Camera();  world.setSettings(reader.settings);  if (reader.broadphase != null)   world.setBroadphaseDetector(reader.broadphase);  if (reader.narrowphase != null)   world.setNarrowphaseDetector(reader.narrowphase);  if (reader.manifoldSolver != null)   world.setManifoldSolver(reader.manifoldSolver);  if (reader.timeOfImpact != null)   world.setTimeOfImpactDetector(reader.timeOfImpact);  if (reader.gravity != null)   world.setGravity(reader.gravity);  if (reader.bounds != null)   world.setBounds(reader.bounds);  if (reader.worldName != null) {    world.setUserData(reader.worldName);  } else {    world.setUserData(Messages.getString("world.name.default"));  }  for (  SandboxBody body : reader.bodies) {    world.addBody(body);  }  for (  Joint joint : reader.joints) {    world.addJoint(joint);  }  for (  SandboxRay ray : reader.rays) {    rays.add(ray);  }  if (reader.camera != null) {    camera.setScale(reader.camera.getScale());    camera.setTranslation(reader.camera.getTranslation());  }  return new Simulation(camera,rays,world);}  }
class C{  public MediaType withoutParameters(){  return parameters.isEmpty() ? this : create(type,subtype);}  }
class C{  public static void main(String[] args) throws Exception {  UdpClient client=new UdpClient();  long t0=System.currentTimeMillis();  for (int i=0; i <= UdpServer.MAX_RECEIVED; i++) {    Thread.sleep(1);    String str=Integer.toString(i);    byte[] data=str.getBytes();    IoBuffer buffer=IoBuffer.allocate(data.length);    buffer.put(data);    buffer.flip();    session.write(buffer);    if (i % 10000 == 0) {      System.out.println("Sent " + i + " messages");    }  }  long t1=System.currentTimeMillis();  System.out.println("Sent messages delay : " + (t1 - t0));  Thread.sleep(100000);  client.connector.dispose(true);}  }
class C{  private Hop canonicalizeMatrixMultScalarAdd(Hop hi) throws HopsException {  if (hi instanceof BinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=hi.getInput().get(0);    Hop right=hi.getInput().get(1);    if (left.getDataType().isScalar() && right instanceof AggBinaryOp && bop.getOp() == OpOp2.PLUS) {      HopRewriteUtils.removeAllChildReferences(bop);      HopRewriteUtils.addChildReference(bop,right,0);      HopRewriteUtils.addChildReference(bop,left,1);      LOG.debug("Applied canonicalizeMatrixMultScalarAdd1 (line " + hi.getBeginLine() + ").");    } else     if (right.getDataType().isScalar() && left instanceof AggBinaryOp && bop.getOp() == OpOp2.MINUS) {      bop.setOp(OpOp2.PLUS);      HopRewriteUtils.removeChildReferenceByPos(bop,right,1);      HopRewriteUtils.addChildReference(bop,HopRewriteUtils.createBinary(new LiteralOp(0),right,OpOp2.MINUS),1);      LOG.debug("Applied canonicalizeMatrixMultScalarAdd2 (line " + hi.getBeginLine() + ").");    }  }  return hi;}  }
class C{  public boolean subClassOf(Environment env,ClassDeclaration otherClass) throws ClassNotFound {  ClassDeclaration c=getClassDeclaration();  while (c != null) {    if (c.equals(otherClass)) {      return true;    }    c=c.getClassDefinition(env).getSuperClass();  }  return false;}  }
class C{  public static int pixelRange(double p){  return ((p > 255) ? 255 : (p < 0) ? 0 : (int)p);}  }
class C{  public static void addGhoulBootsTexture(Item boots,String res){  addGhoulBootsTexture(boots,new ResourceLocation(res));}  }
class C{  @Override public String toString(){  return "scorer(" + weight + ")["+ super.toString()+ "]";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.803 -0500",hash_original_method="679241DAB133FCD723055BFD98A1C12B",hash_generated_method="62F002EF6010FDC01460CF50CCA393FF") @SuppressWarnings("unchecked") public TwoKeyHashMap(int initialCapacity,float initialLoadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException("initialCapacity should be >= 0");  }  if (initialLoadFactor <= 0) {    throw new IllegalArgumentException("initialLoadFactor should be > 0");  }  loadFactor=initialLoadFactor;  if (initialCapacity == Integer.MAX_VALUE) {    initialCapacity--;  }  arrSize=initialCapacity > 0 ? initialCapacity : 1;  threshold=(int)(arrSize * loadFactor);  arr=new Entry[arrSize + 1];}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String streamsHeader=args[0];  String pointerHeader=args[1];  String outputHeader=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("The remove  operation is not supported by this Iterator.");}  }
class C{  public SimpleViewBehavior(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.EasyCoordinatorView);  mDependViewId=a.getResourceId(R.styleable.EasyCoordinatorView_dependsOn,0);  mDependType=a.getInt(R.styleable.EasyCoordinatorView_dependType,DEPEND_TYPE_WIDTH);  mDependTargetX=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_dependTargetX,UNSPECIFIED_INT);  mDependTargetY=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_dependTargetY,UNSPECIFIED_INT);  mDependTargetWidth=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_dependTargetWidth,UNSPECIFIED_INT);  mDependTargetHeight=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_dependTargetHeight,UNSPECIFIED_INT);  targetX=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_targetX,UNSPECIFIED_INT);  targetY=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_targetY,UNSPECIFIED_INT);  targetWidth=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_targetWidth,UNSPECIFIED_INT);  targetHeight=a.getDimensionPixelOffset(R.styleable.EasyCoordinatorView_targetHeight,UNSPECIFIED_INT);  targetBackgroundColor=a.getColor(R.styleable.EasyCoordinatorView_targetBackgroundColor,UNSPECIFIED_INT);  targetAlpha=a.getFloat(R.styleable.EasyCoordinatorView_targetAlpha,UNSPECIFIED_FLOAT);  targetRotateX=a.getFloat(R.styleable.EasyCoordinatorView_targetRotateX,UNSPECIFIED_FLOAT);  targetRotateY=a.getFloat(R.styleable.EasyCoordinatorView_targetRotateY,UNSPECIFIED_FLOAT);  mAnimationId=a.getResourceId(R.styleable.EasyCoordinatorView_animation,0);  a.recycle();}  }
class C{  public Builder priority(Priority value){switch (value) {case NORMAL:    priority=Constants.MESSAGE_PRIORITY_NORMAL;  break;case HIGH:priority=Constants.MESSAGE_PRIORITY_HIGH;break;}return this;}  }
class C{  public String tag(){  return tag;}  }
class C{  @Override public void prepare(){  image=ImageUtil.createAcceleratedImage(bounds.width,bounds.height);  Graphics graph=image.getGraphics();  graph.drawImage(bv.tileManager.imageFor(entity,facing,-1),0,0,this);  image=bv.getScaledImage(image,false);  graph.dispose();}  }
class C{  @Override public boolean compareValue(int val1,int val2){  return (val1 > val2);}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res++;    }  }  return res;}  }
class C{  public static ComponentListener remove(ComponentListener l,ComponentListener oldl){  return (ComponentListener)removeInternal(l,oldl);}  }
class C{  private String runProcess(MProcess process) throws Exception {  log.info(process.toString());  boolean isReport=(process.isReport() || process.getAD_ReportView_ID() > 0);  int AD_Table_ID=m_model.getAD_Table_ID();  int Record_ID=m_model.getRecord_ID();  MPInstance pInstance=new MPInstance(process,Record_ID);  fillParameter(pInstance);  ProcessInfo pi=new ProcessInfo(process.getName(),process.getAD_Process_ID(),AD_Table_ID,Record_ID);  pi.setAD_User_ID(getAD_User_ID());  pi.setAD_Client_ID(m_model.getAD_Client_ID());  pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());  MUser from=new MUser(getCtx(),pi.getAD_User_ID(),null);  if (!process.processIt(pi,m_trx)) {    int supervisor=m_model.getSupervisor_ID();    if (supervisor > 0) {      MUser user=new MUser(getCtx(),supervisor,null);      boolean email=user.isNotificationEMail();      boolean notice=user.isNotificationNote();      if (email || notice)       ProcessInfoUtil.setLogFromDB(pi);      if (email) {        MClient client=MClient.get(m_model.getCtx(),m_model.getAD_Client_ID());        client.sendEMail(from,user,process.getName(),pi.getSummary() + " " + pi.getLogInfo(),null);      }      if (notice) {        int AD_Message_ID=442;        MNote note=new MNote(getCtx(),AD_Message_ID,supervisor,null);        note.setClientOrg(m_model.getAD_Client_ID(),m_model.getAD_Org_ID());        note.setTextMsg(pi.getSummary());        note.setRecord(MPInstance.Table_ID,pi.getAD_PInstance_ID());        note.saveEx();      }    }  } else {    Integer[] userIDs=m_model.getRecipientAD_User_IDs();    if (userIDs.length > 0) {      ProcessInfoUtil.setLogFromDB(pi);      for (int i=0; i < userIDs.length; i++) {        MUser user=new MUser(getCtx(),userIDs[i].intValue(),null);        boolean email=user.isNotificationEMail();        boolean notice=user.isNotificationNote();        File report=null;        if (isReport) {          ReportEngine re=ReportEngine.get(m_schedulerctx,pi);          if (re == null)           return "Cannot create Report AD_Process_ID=" + process.getAD_Process_ID() + " - "+ process.getName();          report=re.getPDF();        }        if (notice) {          int AD_Message_ID=441;          if (isReport)           AD_Message_ID=884;          MNote note=new MNote(getCtx(),AD_Message_ID,userIDs[i].intValue(),null);          note.setClientOrg(m_model.getAD_Client_ID(),m_model.getAD_Org_ID());          if (isReport) {            note.setTextMsg(m_model.getName());            note.setDescription(m_model.getDescription());            note.setRecord(AD_Table_ID,Record_ID);          } else {            note.setTextMsg(pi.getSummary());            note.setRecord(MPInstance.Table_ID,pi.getAD_PInstance_ID());          }          if (note.save()) {            if (isReport) {              MAttachment attachment=new MAttachment(getCtx(),MNote.Table_ID,note.getAD_Note_ID(),null);              attachment.setClientOrg(m_model.getAD_Client_ID(),m_model.getAD_Org_ID());              attachment.addEntry(report);              attachment.setTextMsg(m_model.getName());              attachment.saveEx();            }          }        }        if (email) {          MClient client=MClient.get(m_model.getCtx(),m_model.getAD_Client_ID());          if (isReport) {            client.sendEMail(from,user,m_model.getName(),m_model.getDescription(),report);          } else {            client.sendEMail(from,user,process.getName(),pi.getSummary() + " " + pi.getLogInfo(),null);          }        }      }    }  }  return pi.getSummary();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Element element;  Node aNode;  boolean hasChild;  Document ownerDocument;  DocumentType docType;  String system;  String name;  NodeList addresses;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  addresses=aNewDoc.getElementsByTagName("emp:address");  element=(Element)addresses.item(0);  assertNotNull("empAddressNotNull",element);  aNode=doc.importNode(element,false);  hasChild=aNode.hasChildNodes();  assertFalse("hasChild",hasChild);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  name=aNode.getNodeName();  assertEquals("nodeName","emp:address",name);}  }
class C{  protected String sourceClass(Attribute c,double[] dist){  if (c.isNominal()) {    return Integer.toString(Utils.maxIndex(dist));  } else {    return Double.toString(dist[0]);  }}  }
class C{  public Instrumenter attachEpsilonProgressCollector(){  includeEpsilonProgress=true;  return this;}  }
class C{  public boolean canSet(String field,Class type){  Column c=getColumn(field);  return (c == null ? false : c.canSet(type));}  }
class C{  public void actionPerformed(ActionEvent e){  final String actionCommand=e.getActionCommand();  String prefix=propertyConsumer.getPropertyPrefix();  if (actionCommand == doneCommand) {    Properties props=collectProperties();    if (!print) {      if (windowSupport != null) {        windowSupport.killWindow();      }      propertyConsumer.setProperties(prefix,props);      if (actionListener != null) {        actionListener.actionPerformed(e);      }    } else {      Set<Entry<Object,Object>> entrySet=props.entrySet();      Iterator<Entry<Object,Object>> it=entrySet.iterator();      while (it.hasNext()) {        Entry<Object,Object> next=it.next();        String val=(String)next.getValue();        System.out.println(next.getKey() + "=" + val);      }    }  } else   if (actionCommand == cancelCommand) {    if (actionListener != null && actionListener != this) {      actionListener.actionPerformed(e);    }    propertyConsumer=null;    if (windowSupport != null) {      windowSupport.killWindow();    }    if (print) {      System.exit(0);    }  }}  }
class C{  private void run(String username,String password) throws AuthenticationException {  for (  String s : WELCOME_MESSAGE) {    out.println(s);  }  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  service.setUserCredentials(username,password);  while (executeCommand(reader)) {  }}  }
class C{  private void addFees(MDunningLevel level){  boolean onlyInvoices=level.isStatement();  MDunningRunEntry[] entries=m_run.getEntries(true,onlyInvoices);  if (entries != null && entries.length > 0) {    for (    MDunningRunEntry element : entries) {      if (level.isShowAllDue() && level.isShowNotDue() && element.getAmt().compareTo(Env.ZERO) < 0)       continue;      MDunningRunLine line=new MDunningRunLine(element);      line.setFee(p_C_Currency_ID,level.getFeeAmt());      if (!line.save())       throw new IllegalStateException("Cannot save MDunningRunLine");      element.setQty(element.getQty().subtract(new BigDecimal(1)));    }  }}  }
class C{  public CorsServiceBuilder shortCircuit(){  shortCircuit=true;  return this;}  }
class C{  public LabelRenderer(String textField){  this.setTextField(textField);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void validateSupportingDeviceStructure(){  _logger.info("validating the supporting device structure of " + getSupportingDeviceName());  VPlexControllerUtils.validateSupportingDeviceStructure(getSupportingDeviceName(),getVplexUri(),_dbClient);}  }
class C{  public static boolean isIgnoredPermission(String permission){  if (permission == null) {    return false;  }  if (getIgnoredPermissions().contains(permission)) {    return true;  }  return false;}  }
class C{  @Override public void process(HashMap<K,Integer> tuple){  if (mergedTuple.isEmpty()) {    mergedTuple.putAll(tuple);    for (    Map.Entry<K,Integer> e : tuple.entrySet()) {      lval=e.getValue();      break;    }  } else {    for (    Map.Entry<K,Integer> e : tuple.entrySet()) {      if ((least && (e.getValue() < lval)) || (!least && (e.getValue() > lval))) {        mergedTuple.clear();        mergedTuple.put(e.getKey(),e.getValue());        break;      }    }  }}  }
class C{  public static int[] normalize(int[] a,int length){  if (a.length >= length) {    return a;  }  while (a.length < length) {    a=expand(a);  }  return a;}  }
class C{  public void compose(final AffineTransform3D m){  final double a00=m00 * m.m00 + m01 * m.m10 + m02 * m.m20;  final double a01=m00 * m.m01 + m01 * m.m11 + m02 * m.m21;  final double a02=m00 * m.m02 + m01 * m.m12 + m02 * m.m22;  final double a03=m00 * m.m03 + m01 * m.m13 + m02 * m.m23 + m03;  final double a10=m10 * m.m00 + m11 * m.m10 + m12 * m.m20;  final double a11=m10 * m.m01 + m11 * m.m11 + m12 * m.m21;  final double a12=m10 * m.m02 + m11 * m.m12 + m12 * m.m22;  final double a13=m10 * m.m03 + m11 * m.m13 + m12 * m.m23 + m13;  final double a20=m20 * m.m00 + m21 * m.m10 + m22 * m.m20;  final double a21=m20 * m.m01 + m21 * m.m11 + m22 * m.m21;  final double a22=m20 * m.m02 + m21 * m.m12 + m22 * m.m22;  final double a23=m20 * m.m03 + m21 * m.m13 + m22 * m.m23 + m23;  m00=a00;  m01=a01;  m02=a02;  m03=a03;  m10=a10;  m11=a11;  m12=a12;  m13=a13;  m20=a20;  m21=a21;  m22=a22;  m23=a23;}  }
class C{  public ColorMatrix(ColorMatrix src){  System.arraycopy(src.mArray,0,mArray,0,20);}  }
class C{  public boolean checkClass(ClassDefinition cdef){  return checkModifier(cdef.getModifiers());}  }
class C{  public void fillPolygon(int xPoints[],int yPoints[],int nPoints){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling polygon: " + " nPoints: "+ nPoints+ " X's: "+ xPoints+ " Y's: "+ yPoints);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillPolygon(xPoints,yPoints,nPoints);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillPolygon(xPoints,yPoints,nPoints);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillPolygon(xPoints,yPoints,nPoints);}  }
class C{  public boolean hasMoreRecords() throws IOException {  row=parser.parseNext();  if (row == null && blockCounter + 1 >= this.csvParserVo.getBlockDetailsList().size()) {    close();    return false;  }  if (row == null) {    initialize();    row=parser.parseNext();  }  return true;}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public static <T>Range<T> closedOpen(T lowerBound,T upperBound){  return range(lowerBound,BoundType.CLOSED,upperBound,BoundType.OPEN);}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  DatosUsuario user=null;  try {    user=UserAdminHelper.getUser(request,oForm);  } catch (  Exception e) {    logger.debug(e);  }  if (user != null) {    ActionErrors oError=new ActionErrors();    oError.add(ActionErrors.GLOBAL_ERROR,new ActionError(USER_EXISTS_KEY));    saveErrors(request,oError);    return mapping.findForward(ERROR_FORWARD);  }  try {    UserAdminHelper.createUser(request,oForm);  } catch (  AutenticacionUsuarioException e) {    logger.error(e);    return mapping.findForward(ERROR_FORWARD);  }  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public AbstractXpAppCompatSpinner(Context context,AttributeSet attrs){  this(context,attrs,R.attr.spinnerStyle);}  }
class C{  protected SVGOMFEPointLightElement(){}  }
class C{  public static URI create(String input){  if (isFile(input) || isURL(input)) {    return URI.create(input);  } else {    return Paths.get(input).toUri();  }}  }
class C{  void lockedQuery(Object key,int operator,Collection results,CompiledValue iterOps,RuntimeIterator indpndntItr,ExecutionContext context,List projAttrib,SelectResults intermediateResults,boolean isIntersection){  throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());}  }
class C{  public TransactionOptimisticException(String msg){  super(msg);}  }
class C{  protected void readHeaders(Object connection) throws IOException {}  }
class C{  public void deleteWorkspaceFiles(){  fileHandler.delete(getWorkspaceDirectory());}  }
class C{  @Override public String toString(){  return (getClass().getSimpleName() + "[" + clusterPort()+ "]");}  }
class C{  public boolean isCrossFaded(){  return mCrossFadeSlidingPaneLayout.isOpen();}  }
class C{  public Builder remove(String key){  map.remove(key);  children.remove(key);  return this;}  }
class C{  private static long lf_delta1(long x){  return lf_S(x,19) ^ lf_S(x,61) ^ lf_R(x,6);}  }
class C{  public InstanceNotAliveException(String message,Throwable cause){  super(message,cause);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.190 -0500",hash_original_method="306FE04DD14403034511108312788846",hash_generated_method="3D28D4DAA15DA59E1E198C43B216F883") public void putValue(String name,Object value){  if (name == null || value == null) {    throw new IllegalArgumentException("name == null || value == null");  }  Object old=values.put(name,value);  if (value instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)value).valueBound(new SSLSessionBindingEvent(this,name));  }  if (old instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)old).valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  static void nextAddress(long ptr,long addr,GridUnsafeMemory mem){  mem.writeLong(ptr + HEADER_NEXT_ADDR_OFF,addr);}  }
class C{  private String safe(String src){  StringBuffer sb=new StringBuffer();  for (int i=0; i < src.length(); i++) {    char c=src.charAt(i);    if (c >= 32 && c < 128) {      sb.append(c);    } else {      sb.append("<" + (int)c + ">");    }  }  return sb.toString();}  }
class C{  public Boolean isGuestAutoLockEnabled(){  return guestAutoLockEnabled;}  }
class C{  public void testGetF12(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF12();  assertEquals(expResult,result);}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean replaceAll(List list,Object oldVal,Object newVal){  boolean result=false;  int size=list.size();  if (size < REPLACEALL_THRESHOLD || list instanceof RandomAccess) {    if (oldVal == null) {      for (int i=0; i < size; i++) {        if (list.get(i) == null) {          list.set(i,newVal);          result=true;        }      }    } else {      for (int i=0; i < size; i++) {        if (oldVal.equals(list.get(i))) {          list.set(i,newVal);          result=true;        }      }    }  } else {    ListIterator itr=list.listIterator();    if (oldVal == null) {      for (int i=0; i < size; i++) {        if (itr.next() == null) {          itr.set(newVal);          result=true;        }      }    } else {      for (int i=0; i < size; i++) {        if (oldVal.equals(itr.next())) {          itr.set(newVal);          result=true;        }      }    }  }  return result;}  }
class C{  public boolean contains(Object child){synchronized (children) {    return children.containsKey(child);  }}  }
class C{  public i addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  void loadClassDefs() throws IOException {  int count=mHeaderItem.classDefsSize;  mClassDefs=new ClassDefItem[count];  seek(mHeaderItem.classDefsOff);  for (int i=0; i < count; i++) {    mClassDefs[i]=new ClassDefItem();    mClassDefs[i].classIdx=readInt();    readInt();    readInt();    readInt();    readInt();    readInt();    readInt();    readInt();  }}  }
class C{  private MessageDigest createMD5Digest() throws NoSuchAlgorithmException {  return MessageDigest.getInstance("MD5");}  }
class C{  public static Motor victor(int channel,DoubleToDoubleFunction speedLimiter){  return new HardwareMotor(new Victor(channel),SPEED_LIMITER);}  }
