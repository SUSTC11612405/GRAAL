class C{  public static QueryBuilder<ParsedTupleQuery> select(){  return new AbstractQueryBuilder<ParsedTupleQuery>(new ParsedTupleQuery());}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.403 -0500",hash_original_method="FAC0E437D1666841C3F351749EE85C53",hash_generated_method="4D0435CC2E5475DDCCDB8B40A240E271") public static boolean compare(Context context,String a,String b){  boolean useStrict=context.getResources().getBoolean(com.android.internal.R.bool.config_use_strict_phone_number_comparation);  return compare(a,b,useStrict);}  }
class C{  public DefaultApiClient(String apiUrl,String secureApiUrl,String consumerKey,String consumerSecret){  setupService(apiUrl,secureApiUrl,consumerKey,consumerSecret,null);}  }
class C{  public static void main(String[] args){  TestRunner.run(SplitterTest.class);}  }
class C{  public int openBufferContinue(byte[] buffer,int size){  return MediaInfoLibrary.INSTANCE.Open_Buffer_Continue(handle,buffer,size);}  }
class C{  @Override public void restoreState(){  updateSiteModel=true;  partialBufferHelper.restoreState();  evolutionaryProcessDelegate.restoreState();  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.restoreState();    int[] tmp=storedScaleBufferIndices;    storedScaleBufferIndices=scaleBufferIndices;    scaleBufferIndices=tmp;  }}  }
class C{  public String deleteThinLogicalUnits(String systemObjectId,Set<String> logicalUnitIdList,String model) throws Exception {  return hdsApiVolumeManager.deleteThinLogicalUnits(systemObjectId,logicalUnitIdList,model);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.DEFAULT_CLAUSE;}  }
class C{  private boolean hasIcon(){  return icon != NO_ICON;}  }
class C{  public void onTerminate(){  sContext.unregisterReceiver(mModel);  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(sContext);  launcherApps.removeOnAppsChangedCallback(mModel);  PackageInstallerCompat.getInstance(sContext).onStop();}  }
class C{  @ApiOperation(value="Removes Factory by its ID",notes="Removes factory based on the Factory ID which is passed in a path parameter") @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=403,message="User not authorized to call this operation"),@ApiResponse(code=404,message="Factory not found"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}") @RolesAllowed("user") public void removeFactory(@ApiParam(value="Factory ID",required=true) @PathParam("id") String id,@Context UriInfo uriInfo) throws ApiException {  final User user=EnvironmentContext.getCurrent().getUser();  if (user == null) {    throw new ForbiddenException("No authenticated user");  }  Factory factory=factoryStore.getFactory(id);  if (factory == null) {    throw new NotFoundException("Factory with id " + id + " is not found.");  }  String userId=user.getId();  factoryEditValidator.validate(factory,userId);  factoryStore.removeFactory(id);}  }
class C{  public static int hash(int hash,int item){  return hash * prime + item;}  }
class C{  public boolean isCompoundOnFlush(){  return compoundOnFlush;}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public List<String> selectCalendars(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_CALENDARS));    rs=ps.executeQuery();    LinkedList<String> list=new LinkedList<String>();    while (rs.next()) {      list.add(rs.getString(1));    }    return list;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  private boolean isServiceProfileDuplicate(List<LsServer> existingLsServers,String serviceProfileNameToUse){  boolean serviceProfileNameIsDuplicate=false;  for (  LsServer lsServer : existingLsServers) {    if (lsServer.getName().equals(serviceProfileNameToUse)) {      serviceProfileNameIsDuplicate=true;      break;    }  }  return serviceProfileNameIsDuplicate;}  }
class C{  public void newLine() throws IOException {  super.newLine();  beginningOfLine=true;}  }
class C{  public String sketchPath(String where){  if (sketchPath == null) {    return where;  }  try {    if (new File(where).isAbsolute())     return where;  } catch (  Exception e) {  }  return activity.getFileStreamPath(where).getAbsolutePath();}  }
class C{  public static void hideView(View view){  if (view != null) {    view.setVisibility(View.GONE);  }}  }
class C{  public Document parse(File file) throws SAXException, IOException {  if (null == file) {    throw new SAXException("empyt file string is sometimes represented as null");  }  Document doc=null;  doc=getDocumentBuilder().parse(file);  return doc;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_S1:    return stateVector[0] == State.main_region_S1;case main_region_S2:  return stateVector[0] == State.main_region_S2;case region2_a:return stateVector[1] == State.region2_a;default :return false;}}  }
class C{  public PrimitiveTypeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  static P11Key convertKey(Token token,Key key,String algo,CK_ATTRIBUTE[] extraAttrs) throws InvalidKeyException {  token.ensureValid();  if (key == null) {    throw new InvalidKeyException("Key must not be null");  }  if (key instanceof SecretKey == false) {    throw new InvalidKeyException("Key must be a SecretKey");  }  long algoType;  if (algo == null) {    algo=key.getAlgorithm();    algoType=getKeyType(algo);  } else {    algoType=getKeyType(algo);    long keyAlgorithmType=getKeyType(key.getAlgorithm());    if (algoType != keyAlgorithmType) {      if ((algoType == PCKK_HMAC) || (algoType == PCKK_SSLMAC)) {      } else {        throw new InvalidKeyException("Key algorithm must be " + algo);      }    }  }  if (key instanceof P11Key) {    P11Key p11Key=(P11Key)key;    if (p11Key.token == token) {      if (extraAttrs != null) {        Session session=null;        try {          session=token.getObjSession();          long newKeyID=token.p11.C_CopyObject(session.id(),p11Key.keyID,extraAttrs);          p11Key=(P11Key)(P11Key.secretKey(session,newKeyID,p11Key.algorithm,p11Key.keyLength,extraAttrs));        } catch (        PKCS11Exception p11e) {          throw new InvalidKeyException("Cannot duplicate the PKCS11 key",p11e);        } finally {          token.releaseSession(session);        }      }      return p11Key;    }  }  P11Key p11Key=token.secretCache.get(key);  if (p11Key != null) {    return p11Key;  }  if ("RAW".equalsIgnoreCase(key.getFormat()) == false) {    throw new InvalidKeyException("Encoded format must be RAW");  }  byte[] encoded=key.getEncoded();  p11Key=createKey(token,encoded,algo,algoType,extraAttrs);  token.secretCache.put(key,p11Key);  return p11Key;}  }
class C{  public static AclScope fromExternalForm(String externalForm){  if (externalForm == null) {    return null;  }  if (externalForm.equals(getTypeIdentifier(Type.DEFAULT))) {    return new AclScope(Type.DEFAULT,null);  }  String[] components=externalForm.split(":");  if (components.length != 2) {    return null;  }  Type type=getType(components[0]);  if (type == null || type == Type.DEFAULT) {    return null;  }  return new AclScope(type,components[1]);}  }
class C{  @Override public void recycle(){}  }
class C{  public void addVariable(final String name,final String value){  assert ((name != null) && (name.length() > 0)) : "The parameter 'name' must not be null or empty";  assert ((value != null) && (value.length() > 0)) : "The parameter 'value' must not be null or empty";  List<String> variables;  if (!this._variables.containsKey(name)) {    variables=new LinkedList<String>();    this._variables.put(name,variables);  } else {    variables=this._variables.get(name);  }  variables.add(value);}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);  layout_progress.setVisibility(View.GONE);  txt_progresstext.setVisibility(View.GONE);}  }
class C{  public GCTraceListenerSet(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Scs cs_transpose(Scs A,boolean values){  int p, q, j, Cp[], Ci[], n, m, Ap[], Ai[], w[];  float Cx[], Ax[];  Scs C;  if (!Scs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  C=Scs_util.cs_spalloc(n,m,Ap[n],values && (Ax != null),false);  w=new int[m];  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (p=0; p < Ap[n]; p++)   w[Ai[p]]++;  Scs_cumsum.cs_cumsum(Cp,w,m);  for (j=0; j < n; j++) {    for (p=Ap[j]; p < Ap[j + 1]; p++) {      Ci[q=w[Ai[p]]++]=j;      if (Cx != null)       Cx[q]=Ax[p];    }  }  return C;}  }
class C{  public void onPutOnGround(final Player player){  onPutOnGround(true);}  }
class C{  static void printThrowable(Throwable theThro,boolean withStack){  try {    if (withStack) {      theThro.printStackTrace(System.out);    }    if (theThro instanceof Exception) {      Exception t=(Exception)theThro;      Method target=null;      String blank=" ";      try {        target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      System.out.println(blank + t.getClass() + "==>"+ t.getMessage());      while (target != null) {        try {          t=(Exception)target.invoke(t,(java.lang.Object[])null);        } catch (        Exception ee) {          t=null;        }        try {          if (t != null) {            blank=blank + "  ";            System.out.println(blank + t.getClass() + "==>"+ t.getMessage());            try {              target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }      try {        target=((Exception)theThro).getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      Throwable err=theThro;      while (target != null) {        try {          err=(Error)target.invoke(err,(java.lang.Object[])null);        } catch (        Exception ee) {          err=null;        }        try {          if (err != null) {            blank=blank + "  ";            System.out.println(blank + err.getClass() + "==>"+ err.getMessage());            if (withStack) {              err.printStackTrace(System.out);            }            try {              target=err.getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }    } else {      System.out.println("Throwable is : " + theThro);    }  } catch (  Throwable x) {    System.out.println("Exception : raised in printException : " + x);  }}  }
class C{  public void trainModelsWithParser(Parser parser){  Chunker.isTraining=true;  for (int i=1; i <= iter; i++) {    LinkedVector ex;    while ((ex=(LinkedVector)parser.next()) != null) {      for (int j=0; j < ex.size(); j++) {        chunker.learn(ex.get(j));      }    }    parser.reset();    chunker.doneWithRound();    System.out.println("Iteration number : " + i);  }  chunker.doneLearning();}  }
class C{  public static Location toLocation(final LatLong latlon){  Location result=new Location(RadioBeacon.PROVIDER_NONE);  result.setLatitude(latlon.latitude);  result.setLongitude(latlon.longitude);  if (!isValidLocation(result,false)) {    throw new IllegalArgumentException("Invalid location");  }  return result;}  }
class C{  public Collection<GraphNode> computeNodes(){  Collection<GraphNode> result=Sets.newHashSet();  Collection<GraphNode> seen=Sets.newHashSet();  LinkedList<CollapseData> queue=Lists.newLinkedList();  for (  CollapseData master : collapsedData.values()) {    queue.add(master);  }  while (!queue.isEmpty()) {    CollapseData data=queue.removeFirst();    GraphNode node=data.getMasterNode();    seen.add(node);    result.add(node);    result.addAll(data.getChildrenNodes());    for (    CollapseData nest : data.getChildrenCollapse()) {      GraphNode child=nest.getMasterNode();      if (!seen.contains(child)) {        queue.add(nest);      }    }  }  return result;}  }
class C{  public void dispatchCUIEvent(Actor actor,CUIEvent event){  checkNotNull(actor);  checkNotNull(event);  if (hasCUISupport) {    actor.dispatchCUIEvent(event);  }}  }
class C{  public int size(){  return fifo.size();}  }
class C{  protected LayerList createLayersFromElement(Element element){  Object o=BasicFactory.create(AVKey.LAYER_FACTORY,element);  if (o instanceof LayerList)   return (LayerList)o;  if (o instanceof Layer)   return new LayerList(new Layer[]{(Layer)o});  if (o instanceof LayerList[]) {    LayerList[] lists=(LayerList[])o;    if (lists.length > 0)     return LayerList.collapseLists((LayerList[])o);  }  return null;}  }
class C{  @Override public void clear(){  for (int i=0; i < array.length(); i++) {    array.set(i,defaultGetKeyReturnValue);  }  size.set(0);}  }
class C{  private void biomeFactor(final int x,final int z,final double addHeight){  float smoothVolatility=0.0F;  float smoothHeight=0.0F;  float biomeWeightSum=0.0F;  final Biome centerBiomeConfig=getCenterBiome(x,z);  final int lookRadius=this.maxSmoothRadius;  for (int nextX=-lookRadius; nextX <= lookRadius; nextX++) {    for (int nextZ=-lookRadius; nextZ <= lookRadius; nextZ++) {      final Biome biome=getOffsetBiome(x,z,nextX,nextZ);      final float biomeHeight=biome.getBaseHeight();      final float biomeVolatility=biome.getHeightVariation();      double biomeWeight=calcBiomeWeight(nextX,nextZ,biomeHeight);      biomeWeight=Math.abs(biomeWeight);      if (biomeHeight > centerBiomeConfig.getBaseHeight()) {        biomeWeight/=2.0F;      }      smoothVolatility+=biomeVolatility * biomeWeight;      smoothHeight+=biomeHeight * biomeWeight;      biomeWeightSum+=biomeWeight;    }  }  smoothVolatility/=biomeWeightSum;  smoothHeight/=biomeWeightSum;  this.biomeVolatility=smoothVolatility * 0.9 + 0.1;  this.biomeVolatility*=4.0 / 3.0;  this.biomeHeight=0.75 / 64.0;  this.biomeHeight+=smoothHeight * 17.0 / 64.0;  this.biomeHeight+=0.2 * addHeight * 17.0 / 64.0;}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  protected String generateSLOPolicyName(String slo,String workload,String avgResponseTime){  String result;  if (workload.equalsIgnoreCase(Constants.NONE)) {    result=String.format("%s SLO (%sms)",slo,avgResponseTime);  } else {    result=String.format("%s SLO %s Workload (%sms)",slo,workload,avgResponseTime);  }  return result;}  }
class C{  public static IntStream newGCspyIntStream(AbstractDriver driver,String name,int minValue,int maxValue,int zeroValue,int defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  return factory.newGCspyIntStream(driver,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);}  }
class C{  public void buildReferenceMaps(NormalMethod method,int[] stackHeights,byte[] localTypes,ReferenceMaps referenceMaps,BuildBB buildBB){  int gcPointCount=buildBB.gcPointCount;  short[] byteToBlockMap=buildBB.byteToBlockMap;  BasicBlock[] basicBlocks=buildBB.basicBlocks;  int jsrCount=buildBB.numJsrs;  byte[][] bbMaps;  int[] blockStkTop;  int currBBNum;  byte[] currBBMap;  int currBBStkTop;  final int currBBStkEmpty;  int paramCount;  PendingRETInfo[] bbPendingRETs=null;  PendingRETInfo currPendingRET;  JSRSubroutineInfo[] JSRSubs=null;  short[] workStk;  boolean[] blockSeen;  ExceptionHandlerMap exceptions;  int[] tryStartPC;  int[] tryEndPC;  int[] tryHandlerPC;  int tryHandlerLength;  int[] reachableHandlerBBNums;  int reachableHandlersCount;  boolean[] handlerProcessed;  boolean handlersAllDone;  BytecodeStream bcodes;  short brBBNum;  final boolean debug=false;  paramCount=method.getParameterWords();  if (!method.isStatic())   paramCount++;  currBBStkEmpty=TemplateCompilerFramework.stackHeightForEmptyBasicBlock(method);  if (debug)   VM.sysWrite("getLocalWords() : " + method.getLocalWords() + "\n");  bcodes=method.getBytecodes();  int numBB=buildBB.bbf.getNumberofBlocks();  bbMaps=new byte[numBB + 1][];  blockStkTop=new int[bbMaps.length];  blockSeen=new boolean[bbMaps.length];  exceptions=method.getExceptionHandlerMap();  if (exceptions != null) {    tryStartPC=exceptions.getStartPC();    tryEndPC=exceptions.getEndPC();    tryHandlerPC=exceptions.getHandlerPC();    tryHandlerLength=tryHandlerPC.length;    reachableHandlerBBNums=new int[tryStartPC.length];    handlerProcessed=new boolean[tryStartPC.length];    if (jsrCount > 0) {      JSRSubs=new JSRSubroutineInfo[jsrCount];      JSRSubNext=0;      bbPendingRETs=new PendingRETInfo[bbMaps.length];    }    handlersAllDone=(tryHandlerLength == 0);    for (int ii=0; ii < reachableHandlerBBNums.length; ii++) {      reachableHandlerBBNums[ii]=-1;    }  } else {    tryHandlerLength=0;    handlersAllDone=true;    tryStartPC=null;    tryEndPC=null;    tryHandlerPC=null;    reachableHandlerBBNums=null;    handlerProcessed=null;  }  reachableHandlersCount=0;  referenceMaps.startNewMaps(gcPointCount,jsrCount,paramCount);  workStk=new short[10 + tryHandlerLength];  workStkTop=0;  workStk[workStkTop]=byteToBlockMap[0];  currBBMap=new byte[method.getOperandWords() + currBBStkEmpty + 1];  TypeReference[] parameterTypes=method.getParameterTypes();  int paramStart;  if (!method.isStatic()) {    currBBMap[0]=REFERENCE;    localTypes[0]=ADDRESS_TYPE;    paramStart=1;  } else {    paramStart=0;  }  for (int i=0; i < parameterTypes.length; i++, paramStart++) {    TypeReference parameterType=parameterTypes[i];    if (parameterType.isReferenceType()) {      localTypes[paramStart]=ADDRESS_TYPE;      currBBMap[paramStart]=REFERENCE;    } else {      currBBMap[paramStart]=NON_REFERENCE;      if (parameterType.getStackWords() == 2) {        if (parameterType.isLongType()) {          localTypes[paramStart]=LONG_TYPE;        } else {          localTypes[paramStart]=DOUBLE_TYPE;        }        paramStart++;      } else       if (parameterType.isFloatType()) {        localTypes[paramStart]=FLOAT_TYPE;      } else       if (parameterType.isIntLikeType()) {        localTypes[paramStart]=INT_TYPE;      } else {        localTypes[paramStart]=ADDRESS_TYPE;      }    }  }  currBBStkTop=currBBStkEmpty;  bbMaps[byteToBlockMap[0]]=currBBMap;  blockStkTop[byteToBlockMap[0]]=currBBStkTop;  referenceMaps.recordStkMap(0,currBBMap,currBBStkTop,false);  currBBMap=new byte[currBBMap.length];  while (workStkTop > -1) {    currBBNum=workStk[workStkTop];    workStkTop--;    boolean inJSRSub=false;    if (bbMaps[currBBNum] != null) {      currBBStkTop=blockStkTop[currBBNum];      for (int k=0; k <= currBBStkTop; k++) {        currBBMap[k]=bbMaps[currBBNum][k];      }      if (jsrCount > 0 && basicBlocks[currBBNum].isInJSR()) {        inJSRSub=true;      }    } else {      VM.sysWrite("BuildReferenceMaps, error: found a block on work stack with");      VM.sysWrite(" no starting map. The block number is ");      VM.sysWrite(basicBlocks[currBBNum].getBlockNumber());      VM.sysWrite("\n");      VM.sysFail("BuildReferenceMaps work stack failure");    }    int start=basicBlocks[currBBNum].getStart();    int end=basicBlocks[currBBNum].getEnd();    if (jsrCount > 0 && inJSRSub) {      currPendingRET=bbPendingRETs[currBBNum];      if (basicBlocks[currBBNum].isTryStart()) {        for (int k=0; k < tryHandlerLength; k++) {          if (tryStartPC[k] == start) {            int handlerBBNum=byteToBlockMap[tryHandlerPC[k]];            bbPendingRETs[handlerBBNum]=new PendingRETInfo(currPendingRET);          }        }      }      if (currPendingRET == null) {        int[] preds=basicBlocks[currBBNum].getPredecessors();        for (int i=0; i < preds.length; i++) {          int predBB=preds[i];          if (bbPendingRETs[predBB] != null) {            currPendingRET=bbPendingRETs[predBB];            break;          }        }      }      if (VM.VerifyAssertions) {        if (currPendingRET == null) {          String msg="No pending return found in block " + currBBNum;          VM._assert(VM.NOT_REACHED,msg);        }      }    } else {      currPendingRET=null;    }    boolean inTryBlock;    if (basicBlocks[currBBNum].isTryBlock()) {      inTryBlock=true;      reachableHandlersCount=0;      for (int i=0; i < tryHandlerLength; i++) {        if (start <= tryEndPC[i] && end >= tryStartPC[i]) {          reachableHandlerBBNums[reachableHandlersCount]=byteToBlockMap[tryHandlerPC[i]];          reachableHandlersCount++;          int handlerBBNum=byteToBlockMap[tryHandlerPC[i]];          if (bbMaps[handlerBBNum] == null) {            bbMaps[handlerBBNum]=new byte[currBBMap.length];            for (int k=0; k <= currBBStkEmpty; k++) {              bbMaps[handlerBBNum][k]=currBBMap[k];            }            bbMaps[handlerBBNum][currBBStkEmpty + 1]=REFERENCE;            blockStkTop[handlerBBNum]=currBBStkEmpty + 1;          } else {            if (inJSRSub && basicBlocks[handlerBBNum].isInJSR()) {              for (int k=0; k <= currBBStkEmpty; k++) {                if (currBBMap[k] == SET_TO_NONREFERENCE && bbMaps[handlerBBNum][k] != SET_TO_NONREFERENCE) {                  handlerProcessed[i]=false;                  bbMaps[handlerBBNum][k]=SET_TO_NONREFERENCE;                }              }            } else             if (inJSRSub) {              for (int k=0; k <= currBBStkEmpty; k++) {                if (currBBMap[k] == SET_TO_NONREFERENCE && bbMaps[handlerBBNum][k] != NON_REFERENCE) {                  handlerProcessed[i]=false;                  bbMaps[handlerBBNum][k]=NON_REFERENCE;                }              }            } else {              for (int k=0; k <= currBBStkEmpty; k++) {                if (currBBMap[k] == NON_REFERENCE && bbMaps[handlerBBNum][k] != NON_REFERENCE) {                  handlerProcessed[i]=false;                  bbMaps[handlerBBNum][k]=NON_REFERENCE;                }              }            }          }        }      }    } else {      inTryBlock=false;    }    boolean processNextBlock=true;    bcodes.reset(start);    while (bcodes.index() <= end) {      int biStart=bcodes.index();      int opcode=bcodes.nextInstruction();      if (stackHeights != null) {        if (VM.VerifyAssertions) {          if (currBBStkTop < currBBStkEmpty) {            String msg="Stack height for current basic block is " + currBBStkTop + " which is less than the stack height for "+ "an empty block ("+ currBBStkEmpty+ ").";            VM._assert(VM.NOT_REACHED,msg);          }        }        stackHeights[biStart]=currBBStkTop;      }      if (debug) {        VM.sysWrite("opcode : " + opcode + "\n");        VM.sysWrite("current map: ");        for (int j=0; j <= currBBStkTop; j++) {          VM.sysWrite(currBBMap[j]);        }        VM.sysWrite("\n");      }switch (opcode) {case JBC_nop:{          break;        }case JBC_aconst_null:{        currBBStkTop++;        currBBMap[currBBStkTop]=REFERENCE;        break;      }case JBC_aload_0:{      int localNumber=0;      currBBStkTop++;      currBBMap[currBBStkTop]=inJSRSub ? REFERENCE : currBBMap[localNumber];      break;    }case JBC_aload_1:{    int localNumber=1;    currBBStkTop++;    currBBMap[currBBStkTop]=inJSRSub ? REFERENCE : currBBMap[localNumber];    break;  }case JBC_aload_2:{  int localNumber=2;  currBBStkTop++;  currBBMap[currBBStkTop]=inJSRSub ? REFERENCE : currBBMap[localNumber];  break;}case JBC_aload_3:{int localNumber=3;currBBStkTop++;currBBMap[currBBStkTop]=inJSRSub ? REFERENCE : currBBMap[localNumber];break;}case JBC_aload:{int localNumber=bcodes.getLocalNumber();currBBStkTop++;currBBMap[currBBStkTop]=inJSRSub ? REFERENCE : currBBMap[localNumber];break;}case JBC_iconst_m1:case JBC_iconst_0:case JBC_iconst_1:case JBC_iconst_2:case JBC_iconst_3:case JBC_iconst_4:case JBC_iconst_5:case JBC_fconst_0:case JBC_fconst_1:case JBC_fconst_2:case JBC_iload_0:case JBC_iload_1:case JBC_iload_2:case JBC_iload_3:case JBC_fload_0:case JBC_fload_1:case JBC_fload_2:case JBC_fload_3:case JBC_bipush:case JBC_iload:case JBC_fload:case JBC_sipush:case JBC_i2l:case JBC_i2d:case JBC_f2l:case JBC_f2d:{currBBStkTop++;currBBMap[currBBStkTop]=NON_REFERENCE;bcodes.skipInstruction();break;}case JBC_lconst_0:case JBC_lconst_1:case JBC_dconst_0:case JBC_dconst_1:case JBC_lload_0:case JBC_lload_1:case JBC_lload_2:case JBC_lload_3:case JBC_dload_0:case JBC_dload_1:case JBC_dload_2:case JBC_dload_3:case JBC_ldc2_w:case JBC_lload:case JBC_dload:{currBBStkTop++;currBBMap[currBBStkTop]=NON_REFERENCE;currBBStkTop++;currBBMap[currBBStkTop]=NON_REFERENCE;bcodes.skipInstruction();break;}case JBC_ldc:{currBBStkTop++;int cpi=bcodes.getConstantIndex();int type=bcodes.getConstantType(cpi);if (type == CP_STRING || type == CP_CLASS) {currBBMap[currBBStkTop]=REFERENCE;} else {currBBMap[currBBStkTop]=NON_REFERENCE;}break;}case JBC_ldc_w:{currBBStkTop++;int cpi=bcodes.getWideConstantIndex();int type=bcodes.getConstantType(cpi);if (type == CP_STRING || type == CP_CLASS) {currBBMap[currBBStkTop]=REFERENCE;} else {currBBMap[currBBStkTop]=NON_REFERENCE;}break;}case JBC_istore:{int index=bcodes.getLocalNumber();if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(index,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[index]|=INT_TYPE;break;}case JBC_fstore:{int index=bcodes.getLocalNumber();if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(index,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[index]|=FLOAT_TYPE;break;}case JBC_lstore:{int index=bcodes.getLocalNumber();if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;currBBMap[index + 1]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;currBBMap[index + 1]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(index,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[index]|=LONG_TYPE;break;}case JBC_dstore:{int index=bcodes.getLocalNumber();if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;currBBMap[index + 1]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;currBBMap[index + 1]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(index,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[index]|=DOUBLE_TYPE;break;}case JBC_astore:{int index=bcodes.getLocalNumber();currBBMap[index]=currBBMap[currBBStkTop];if (inJSRSub) {if (currBBMap[index] == RETURN_ADDRESS) {currPendingRET.updateReturnAddressLocation(index);}if (inTryBlock) {if (currBBMap[index] == REFERENCE) {setHandlersMapsRef(index,reachableHandlerBBNums,reachableHandlersCount,bbMaps);} else {setHandlersMapsReturnAddress(index,reachableHandlerBBNums,reachableHandlersCount,bbMaps);}}}currBBStkTop--;localTypes[index]|=ADDRESS_TYPE;break;}case JBC_istore_0:{if (!inJSRSub) {currBBMap[0]=NON_REFERENCE;} else {currBBMap[0]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(0,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[0]|=INT_TYPE;break;}case JBC_fstore_0:{if (!inJSRSub) {currBBMap[0]=NON_REFERENCE;} else {currBBMap[0]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(0,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[0]|=FLOAT_TYPE;break;}case JBC_istore_1:{if (!inJSRSub) {currBBMap[1]=NON_REFERENCE;} else {currBBMap[1]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(1,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[1]|=INT_TYPE;break;}case JBC_fstore_1:{if (!inJSRSub) {currBBMap[1]=NON_REFERENCE;} else {currBBMap[1]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(1,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[1]|=FLOAT_TYPE;break;}case JBC_istore_2:{if (!inJSRSub) {currBBMap[2]=NON_REFERENCE;} else {currBBMap[2]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(2,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[2]|=INT_TYPE;break;}case JBC_fstore_2:{if (!inJSRSub) {currBBMap[2]=NON_REFERENCE;} else {currBBMap[2]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(2,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[2]|=FLOAT_TYPE;break;}case JBC_istore_3:{if (!inJSRSub) {currBBMap[3]=NON_REFERENCE;} else {currBBMap[3]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(3,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[3]|=INT_TYPE;break;}case JBC_fstore_3:{if (!inJSRSub) {currBBMap[3]=NON_REFERENCE;} else {currBBMap[3]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(3,PrimitiveSize.ONEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop--;localTypes[3]|=FLOAT_TYPE;break;}case JBC_lstore_0:{if (inJSRSub) {currBBMap[0]=NON_REFERENCE;currBBMap[1]=NON_REFERENCE;} else {currBBMap[0]=SET_TO_NONREFERENCE;currBBMap[1]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(0,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[0]|=LONG_TYPE;break;}case JBC_dstore_0:{if (inJSRSub) {currBBMap[0]=NON_REFERENCE;currBBMap[1]=NON_REFERENCE;} else {currBBMap[0]=SET_TO_NONREFERENCE;currBBMap[1]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(0,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[0]|=DOUBLE_TYPE;break;}case JBC_lstore_1:{if (!inJSRSub) {currBBMap[1]=NON_REFERENCE;currBBMap[2]=NON_REFERENCE;} else {currBBMap[1]=SET_TO_NONREFERENCE;currBBMap[2]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(1,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[1]|=LONG_TYPE;break;}case JBC_dstore_1:{if (!inJSRSub) {currBBMap[1]=NON_REFERENCE;currBBMap[2]=NON_REFERENCE;} else {currBBMap[1]=SET_TO_NONREFERENCE;currBBMap[2]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(1,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[1]|=DOUBLE_TYPE;break;}case JBC_lstore_2:{if (!inJSRSub) {currBBMap[2]=NON_REFERENCE;currBBMap[3]=NON_REFERENCE;} else {currBBMap[2]=SET_TO_NONREFERENCE;currBBMap[3]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(2,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[2]|=LONG_TYPE;break;}case JBC_dstore_2:{if (!inJSRSub) {currBBMap[2]=NON_REFERENCE;currBBMap[3]=NON_REFERENCE;} else {currBBMap[2]=SET_TO_NONREFERENCE;currBBMap[3]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(2,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[2]|=DOUBLE_TYPE;break;}case JBC_lstore_3:{if (!inJSRSub) {currBBMap[3]=NON_REFERENCE;currBBMap[4]=NON_REFERENCE;} else {currBBMap[3]=SET_TO_NONREFERENCE;currBBMap[4]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(3,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[3]|=LONG_TYPE;break;}case JBC_dstore_3:{if (!inJSRSub) {currBBMap[3]=NON_REFERENCE;currBBMap[4]=NON_REFERENCE;} else {currBBMap[3]=SET_TO_NONREFERENCE;currBBMap[4]=SET_TO_NONREFERENCE;}if (inTryBlock) {setHandlersMapsNonRef(3,PrimitiveSize.DOUBLEWORD,reachableHandlerBBNums,reachableHandlersCount,inJSRSub,bbMaps);}currBBStkTop=currBBStkTop - 2;localTypes[3]|=DOUBLE_TYPE;break;}case JBC_astore_0:{currBBMap[0]=currBBMap[currBBStkTop];if (inJSRSub) {if (currBBMap[0] == RETURN_ADDRESS) {currPendingRET.updateReturnAddressLocation(0);}if (inTryBlock) {if (currBBMap[0] == REFERENCE) {setHandlersMapsRef(0,reachableHandlerBBNums,reachableHandlersCount,bbMaps);} else {setHandlersMapsReturnAddress(0,reachableHandlerBBNums,reachableHandlersCount,bbMaps);}}}currBBStkTop--;localTypes[0]|=ADDRESS_TYPE;break;}case JBC_astore_1:{currBBMap[1]=currBBMap[currBBStkTop];if (inJSRSub) {if (currBBMap[1] == RETURN_ADDRESS) {currPendingRET.updateReturnAddressLocation(1);}if (inTryBlock) {if (currBBMap[1] == REFERENCE) {setHandlersMapsRef(1,reachableHandlerBBNums,reachableHandlersCount,bbMaps);} else {setHandlersMapsReturnAddress(1,reachableHandlerBBNums,reachableHandlersCount,bbMaps);}}}currBBStkTop--;localTypes[1]|=ADDRESS_TYPE;break;}case JBC_astore_2:{currBBMap[2]=currBBMap[currBBStkTop];if (inJSRSub) {if (currBBMap[2] == RETURN_ADDRESS) {currPendingRET.updateReturnAddressLocation(2);}if (inTryBlock) {if (currBBMap[2] == REFERENCE) {setHandlersMapsRef(2,reachableHandlerBBNums,reachableHandlersCount,bbMaps);} else {setHandlersMapsReturnAddress(2,reachableHandlerBBNums,reachableHandlersCount,bbMaps);}}}currBBStkTop--;localTypes[2]|=ADDRESS_TYPE;break;}case JBC_astore_3:{currBBMap[3]=currBBMap[currBBStkTop];if (inJSRSub) {if (currBBMap[3] == RETURN_ADDRESS) {currPendingRET.updateReturnAddressLocation(3);}if (inTryBlock) {if (currBBMap[3] == REFERENCE) {setHandlersMapsRef(3,reachableHandlerBBNums,reachableHandlersCount,bbMaps);} else {setHandlersMapsReturnAddress(3,reachableHandlerBBNums,reachableHandlersCount,bbMaps);}}}currBBStkTop--;localTypes[3]|=ADDRESS_TYPE;break;}case JBC_dup:{currBBMap[currBBStkTop + 1]=currBBMap[currBBStkTop];currBBStkTop++;break;}case JBC_dup2:{currBBMap[currBBStkTop + 1]=currBBMap[currBBStkTop - 1];currBBMap[currBBStkTop + 2]=currBBMap[currBBStkTop];currBBStkTop=currBBStkTop + 2;break;}case JBC_dup_x1:{currBBMap[currBBStkTop + 1]=currBBMap[currBBStkTop];currBBMap[currBBStkTop]=currBBMap[currBBStkTop - 1];currBBMap[currBBStkTop - 1]=currBBMap[currBBStkTop + 1];currBBStkTop++;break;}case JBC_dup2_x1:{currBBMap[currBBStkTop + 2]=currBBMap[currBBStkTop];currBBMap[currBBStkTop + 1]=currBBMap[currBBStkTop - 1];currBBMap[currBBStkTop]=currBBMap[currBBStkTop - 2];currBBMap[currBBStkTop - 1]=currBBMap[currBBStkTop + 2];currBBMap[currBBStkTop - 2]=currBBMap[currBBStkTop + 1];currBBStkTop=currBBStkTop + 2;break;}case JBC_dup_x2:{currBBMap[currBBStkTop + 1]=currBBMap[currBBStkTop];currBBMap[currBBStkTop]=currBBMap[currBBStkTop - 1];currBBMap[currBBStkTop - 1]=currBBMap[currBBStkTop - 2];currBBMap[currBBStkTop - 2]=currBBMap[currBBStkTop + 1];currBBStkTop++;break;}case JBC_dup2_x2:{currBBMap[currBBStkTop + 2]=currBBMap[currBBStkTop];currBBMap[currBBStkTop + 1]=currBBMap[currBBStkTop - 1];currBBMap[currBBStkTop]=currBBMap[currBBStkTop - 2];currBBMap[currBBStkTop - 1]=currBBMap[currBBStkTop - 3];currBBMap[currBBStkTop - 2]=currBBMap[currBBStkTop + 2];currBBMap[currBBStkTop - 3]=currBBMap[currBBStkTop + 1];currBBStkTop=currBBStkTop + 2;break;}case JBC_swap:{byte temp;temp=currBBMap[currBBStkTop];currBBMap[currBBStkTop]=currBBMap[currBBStkTop - 1];currBBMap[currBBStkTop - 1]=temp;break;}case JBC_pop:case JBC_iadd:case JBC_fadd:case JBC_isub:case JBC_fsub:case JBC_imul:case JBC_fmul:case JBC_fdiv:case JBC_frem:case JBC_ishl:case JBC_ishr:case JBC_iushr:case JBC_lshl:case JBC_lshr:case JBC_lushr:case JBC_iand:case JBC_ior:case JBC_ixor:case JBC_l2i:case JBC_l2f:case JBC_d2i:case JBC_d2f:case JBC_fcmpl:case JBC_fcmpg:{currBBStkTop--;bcodes.skipInstruction();break;}case JBC_irem:case JBC_idiv:{currBBStkTop=currBBStkTop - 2;if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop++;break;}case JBC_ladd:case JBC_dadd:case JBC_lsub:case JBC_dsub:case JBC_lmul:case JBC_dmul:case JBC_ddiv:case JBC_drem:case JBC_land:case JBC_lor:case JBC_lxor:case JBC_pop2:{currBBStkTop=currBBStkTop - 2;break;}case JBC_lrem:case JBC_ldiv:{currBBStkTop=currBBStkTop - 4;if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop=currBBStkTop + 2;break;}case JBC_ineg:case JBC_lneg:case JBC_fneg:case JBC_dneg:case JBC_iinc:case JBC_i2f:case JBC_l2d:case JBC_f2i:case JBC_d2l:case JBC_int2byte:case JBC_int2char:case JBC_int2short:{bcodes.skipInstruction();break;}case JBC_lcmp:case JBC_dcmpl:case JBC_dcmpg:{currBBStkTop=currBBStkTop - 3;break;}case JBC_ifeq:case JBC_ifne:case JBC_iflt:case JBC_ifge:case JBC_ifgt:case JBC_ifle:{int offset=bcodes.getBranchOffset();if (offset <= 0) {if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}}currBBStkTop--;if (offset <= 0) {short fallThruBBNum=byteToBlockMap[biStart + 3];workStk=processBranchBB(fallThruBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);processNextBlock=false;}brBBNum=byteToBlockMap[biStart + offset];workStk=processBranchBB(brBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);break;}case JBC_if_icmpeq:case JBC_if_icmpne:case JBC_if_icmplt:case JBC_if_icmpge:case JBC_if_icmpgt:case JBC_if_icmple:case JBC_if_acmpeq:case JBC_if_acmpne:{int offset=bcodes.getBranchOffset();if (offset <= 0) {if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}}currBBStkTop=currBBStkTop - 2;if (offset <= 0) {short fallThruBBNum=byteToBlockMap[biStart + 3];workStk=processBranchBB(fallThruBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);processNextBlock=false;}brBBNum=byteToBlockMap[biStart + offset];workStk=processBranchBB(brBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);break;}case JBC_ifnull:case JBC_ifnonnull:{int offset=bcodes.getBranchOffset();if (offset <= 0) {if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}}currBBStkTop--;if (offset <= 0) {short fallThruBBNum=byteToBlockMap[biStart + 3];workStk=processBranchBB(fallThruBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);processNextBlock=false;}brBBNum=byteToBlockMap[biStart + offset];workStk=processBranchBB(brBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);break;}case JBC_goto:{int offset=bcodes.getBranchOffset();if (offset <= 0) {if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}}brBBNum=byteToBlockMap[biStart + offset];workStk=processBranchBB(brBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);processNextBlock=false;break;}case JBC_goto_w:{int offset=bcodes.getWideBranchOffset();if (offset <= 0) {if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}}brBBNum=byteToBlockMap[biStart + offset];workStk=processBranchBB(brBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);processNextBlock=false;break;}case JBC_tableswitch:{currBBStkTop--;bcodes.alignSwitch();int def=bcodes.getDefaultSwitchOffset();workStk=processBranchBB(byteToBlockMap[biStart + def],currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);int low=bcodes.getLowSwitchValue();int high=bcodes.getHighSwitchValue();int n=high - low + 1;for (int k=0; k < n; k++) {int offset=bcodes.getTableSwitchOffset(k);workStk=processBranchBB(byteToBlockMap[biStart + offset],currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);}bcodes.skipTableSwitchOffsets(n);processNextBlock=false;break;}case JBC_lookupswitch:{currBBStkTop--;bcodes.alignSwitch();int def=bcodes.getDefaultSwitchOffset();workStk=processBranchBB(byteToBlockMap[biStart + def],currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);int npairs=bcodes.getSwitchLength();for (int k=0; k < npairs; k++) {int offset=bcodes.getLookupSwitchOffset(k);workStk=processBranchBB(byteToBlockMap[biStart + offset],currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);}bcodes.skipLookupSwitchPairs(npairs);processNextBlock=false;break;}case JBC_jsr:{processNextBlock=false;int offset=bcodes.getBranchOffset();if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkEmpty,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkEmpty,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop++;currBBMap[currBBStkTop]=RETURN_ADDRESS;workStk=processJSR(byteToBlockMap[biStart],biStart + offset,byteToBlockMap[biStart + offset],byteToBlockMap[biStart + 3],bbMaps,currBBStkTop,currBBMap,currBBStkEmpty,blockStkTop,bbPendingRETs,currPendingRET,JSRSubs,workStk);break;}case JBC_jsr_w:{processNextBlock=false;int offset=bcodes.getWideBranchOffset();if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkEmpty,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkEmpty,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop++;currBBMap[currBBStkTop]=RETURN_ADDRESS;workStk=processJSR(byteToBlockMap[biStart],biStart + offset,byteToBlockMap[biStart + offset],byteToBlockMap[biStart + 5],bbMaps,currBBStkTop,currBBMap,currBBStkEmpty,blockStkTop,bbPendingRETs,currPendingRET,JSRSubs,workStk);break;}case JBC_ret:{int index=bcodes.getLocalNumber();currBBMap[index]=SET_TO_NONREFERENCE;processNextBlock=false;int subStart=currPendingRET.JSRSubStartByteIndex;int k;for (k=0; k < JSRSubNext; k++) {if (JSRSubs[k].subroutineByteCodeStart == subStart) {JSRSubs[k].newEndMaps(currBBMap,currBBStkTop);break;}}boolean JSRisinJSRSub=bbPendingRETs[currPendingRET.JSRBBNum] != null;workStk=computeJSRNextMaps(currPendingRET.JSRNextBBNum,currBBMap.length,k,JSRisinJSRSub,bbMaps,blockStkTop,JSRSubs,currBBStkEmpty,workStk);if (JSRisinJSRSub && bbPendingRETs[currPendingRET.JSRNextBBNum] == null) {bbPendingRETs[currPendingRET.JSRNextBBNum]=new PendingRETInfo(bbPendingRETs[currPendingRET.JSRBBNum]);}break;}case JBC_invokevirtual:case JBC_invokespecial:{MethodReference target=bcodes.getMethodReference();currBBStkTop=processInvoke(target,biStart,currBBStkTop,currBBMap,false,inJSRSub,referenceMaps,currPendingRET,blockSeen[currBBNum],currBBStkEmpty);break;}case JBC_invokeinterface:{MethodReference target=bcodes.getMethodReference();bcodes.alignInvokeInterface();currBBStkTop=processInvoke(target,biStart,currBBStkTop,currBBMap,false,inJSRSub,referenceMaps,currPendingRET,blockSeen[currBBNum],currBBStkEmpty);break;}case JBC_invokestatic:{MethodReference target=bcodes.getMethodReference();currBBStkTop=processInvoke(target,biStart,currBBStkTop,currBBMap,true,inJSRSub,referenceMaps,currPendingRET,blockSeen[currBBNum],currBBStkEmpty);break;}case JBC_ireturn:case JBC_lreturn:case JBC_freturn:case JBC_dreturn:case JBC_areturn:case JBC_return:{if (VM.UseEpilogueYieldPoints || method.isSynchronized()) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);}processNextBlock=false;break;}case JBC_getstatic:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}TypeReference fieldType=bcodes.getFieldReference().getFieldContentsType();currBBMap[++currBBStkTop]=fieldType.isPrimitiveType() ? NON_REFERENCE : REFERENCE;if (fieldType.getStackWords() == 2) {currBBMap[++currBBStkTop]=NON_REFERENCE;}break;}case JBC_putstatic:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}TypeReference fieldType=bcodes.getFieldReference().getFieldContentsType();currBBStkTop--;if (fieldType.getStackWords() == 2) {currBBStkTop--;}break;}case JBC_getfield:{TypeReference fieldType=bcodes.getFieldReference().getFieldContentsType();if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop--;currBBMap[++currBBStkTop]=fieldType.isPrimitiveType() ? NON_REFERENCE : REFERENCE;if (fieldType.getStackWords() == 2) {currBBMap[++currBBStkTop]=NON_REFERENCE;}break;}case JBC_putfield:{TypeReference fieldType=bcodes.getFieldReference().getFieldContentsType();if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop-=2;if (fieldType.getStackWords() == 2) {currBBStkTop--;}break;}case JBC_checkcast:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}bcodes.skipInstruction();break;}case JBC_instanceof:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBMap[currBBStkTop]=NON_REFERENCE;bcodes.skipInstruction();break;}case JBC_new:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop++;currBBMap[currBBStkTop]=REFERENCE;bcodes.skipInstruction();break;}case JBC_iaload:case JBC_faload:case JBC_baload:case JBC_caload:case JBC_saload:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop--;currBBMap[currBBStkTop]=NON_REFERENCE;break;}case JBC_laload:case JBC_daload:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBMap[currBBStkTop - 1]=NON_REFERENCE;break;}case JBC_aaload:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop--;break;}case JBC_iastore:case JBC_fastore:case JBC_aastore:case JBC_bastore:case JBC_castore:case JBC_sastore:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop=currBBStkTop - 3;break;}case JBC_lastore:case JBC_dastore:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop=currBBStkTop - 4;break;}case JBC_newarray:case JBC_anewarray:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBMap[currBBStkTop]=REFERENCE;bcodes.skipInstruction();break;}case JBC_multianewarray:{bcodes.getTypeReference();int dim=bcodes.getArrayDimension();if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop=currBBStkTop - dim + 1;currBBMap[currBBStkTop]=REFERENCE;break;}case JBC_arraylength:{currBBMap[currBBStkTop]=NON_REFERENCE;break;}case JBC_athrow:{if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}currBBStkTop=currBBStkEmpty + 1;currBBMap[currBBStkTop]=REFERENCE;processNextBlock=false;break;}case JBC_monitorenter:case JBC_monitorexit:{currBBStkTop--;if (!inJSRSub) {referenceMaps.recordStkMap(biStart,currBBMap,currBBStkTop,blockSeen[currBBNum]);} else {referenceMaps.recordJSRSubroutineMap(biStart,currBBMap,currBBStkTop,currPendingRET.returnAddressLocation,blockSeen[currBBNum]);}break;}case JBC_wide:{int widecode=bcodes.getWideOpcode();int index=bcodes.getWideLocalNumber();switch (widecode) {case JBC_iload:case JBC_fload:{currBBStkTop++;currBBMap[currBBStkTop]=NON_REFERENCE;break;}case JBC_lload:case JBC_dload:{currBBStkTop++;currBBMap[currBBStkTop]=NON_REFERENCE;currBBStkTop++;currBBMap[currBBStkTop]=NON_REFERENCE;break;}case JBC_aload:{currBBStkTop++;currBBMap[currBBStkTop]=currBBMap[index];break;}case JBC_istore:{if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;}currBBStkTop--;localTypes[index]|=INT_TYPE;break;}case JBC_fstore:{if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;}currBBStkTop--;localTypes[index]|=FLOAT_TYPE;break;}case JBC_lstore:{if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;currBBMap[index + 1]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;currBBMap[index + 1]=SET_TO_NONREFERENCE;}currBBStkTop=currBBStkTop - 2;localTypes[index]|=LONG_TYPE;break;}case JBC_dstore:{if (!inJSRSub) {currBBMap[index]=NON_REFERENCE;currBBMap[index + 1]=NON_REFERENCE;} else {currBBMap[index]=SET_TO_NONREFERENCE;currBBMap[index + 1]=SET_TO_NONREFERENCE;}currBBStkTop=currBBStkTop - 2;localTypes[index]|=DOUBLE_TYPE;break;}case JBC_astore:{currBBMap[index]=currBBMap[currBBStkTop];currBBStkTop--;localTypes[index]|=ADDRESS_TYPE;break;}case JBC_iinc:{bcodes.getWideIncrement();break;}case JBC_ret:{currBBMap[index]=SET_TO_NONREFERENCE;processNextBlock=false;int subStart=currPendingRET.JSRSubStartByteIndex;int k;for (k=0; k < JSRSubNext; k++) {if (JSRSubs[k].subroutineByteCodeStart == subStart) {JSRSubs[k].newEndMaps(currBBMap,currBBStkTop);break;}}boolean JSRisinJSRSub=bbPendingRETs[currPendingRET.JSRBBNum] != null;workStk=computeJSRNextMaps(currPendingRET.JSRNextBBNum,currBBMap.length,k,JSRisinJSRSub,bbMaps,blockStkTop,JSRSubs,currBBStkEmpty,workStk);if (JSRisinJSRSub && bbPendingRETs[currPendingRET.JSRNextBBNum] == null) {bbPendingRETs[currPendingRET.JSRNextBBNum]=new PendingRETInfo(bbPendingRETs[currPendingRET.JSRBBNum]);}break;}default :if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);}break;}default :{VM.sysFail("Unknown opcode:" + opcode);}}}blockSeen[currBBNum]=true;if (processNextBlock) {short fallThruBBNum=byteToBlockMap[bcodes.index()];workStk=processBranchBB(fallThruBBNum,currBBStkTop,currBBMap,currBBStkEmpty,inJSRSub,bbMaps,blockStkTop,currPendingRET,bbPendingRETs,workStk);}if ((workStkTop == -1) && !handlersAllDone) {int i;for (i=0; i < tryHandlerLength; i++) {if (!handlerProcessed[i] && bbMaps[byteToBlockMap[tryHandlerPC[i]]] != null) break;}if (i == tryHandlerLength) {handlersAllDone=true;} else {int considerIndex=i;while (i != tryHandlerLength) {int tryStart=tryStartPC[considerIndex];int tryEnd=tryEndPC[considerIndex];for (i=0; i < tryHandlerLength; i++) {if (i == considerIndex) continue;if (!handlerProcessed[i] && tryStart <= tryHandlerPC[i] && tryHandlerPC[i] < tryEnd && bbMaps[byteToBlockMap[tryHandlerPC[i]]] != null) {break;}}if (i != tryHandlerLength) {considerIndex=i;}}short blockNum=byteToBlockMap[tryHandlerPC[considerIndex]];handlerProcessed[considerIndex]=true;workStk=addToWorkStk(blockNum,workStk);}}}referenceMaps.recordingComplete();}  }
class C{  static boolean isLong(@NotNull final CommandLineOption o){  return o.getLongOptionNameToken() != null;}  }
class C{  public void appendEnvironmentReport(Node container,Document factory,Hashtable h){  if ((null == container) || (null == factory)) {    return;  }  try {    Element envCheckNode=factory.createElement("EnvironmentCheck");    envCheckNode.setAttribute("version","$Revision: 468646 $");    container.appendChild(envCheckNode);    if (null == h) {      Element statusNode=factory.createElement("status");      statusNode.setAttribute("result","ERROR");      statusNode.appendChild(factory.createTextNode("appendEnvironmentReport called with null Hashtable!"));      envCheckNode.appendChild(statusNode);      return;    }    boolean errors=false;    Element hashNode=factory.createElement("environment");    envCheckNode.appendChild(hashNode);    for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      String keyStr=(String)key;      try {        if (keyStr.startsWith(FOUNDCLASSES)) {          Vector v=(Vector)h.get(keyStr);          errors|=appendFoundJars(hashNode,factory,v,keyStr);        } else {          if (keyStr.startsWith(ERROR)) {            errors=true;          }          Element node=factory.createElement("item");          node.setAttribute("key",keyStr);          node.appendChild(factory.createTextNode((String)h.get(keyStr)));          hashNode.appendChild(node);        }      } catch (      Exception e) {        errors=true;        Element node=factory.createElement("item");        node.setAttribute("key",keyStr);        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));        hashNode.appendChild(node);      }    }    Element statusNode=factory.createElement("status");    statusNode.setAttribute("result",(errors ? "ERROR" : "OK"));    envCheckNode.appendChild(statusNode);  } catch (  Exception e2) {    System.err.println("appendEnvironmentReport threw: " + e2.toString());    e2.printStackTrace();  }}  }
class C{  public void reset(){  System.arraycopy(COLOR_SCHEME.mDefaultColors,0,mCurrentColors,0,TextStyle.NUM_INDEXED_COLORS);}  }
class C{  public Mark selectFirst(TextNode node){  AttributedCharacterIterator aci;  aci=node.getAttributedCharacterIterator();  if (aci == null)   return null;  TextHit textHit=new TextHit(aci.getBeginIndex(),false);  return new BasicTextPainter.BasicMark(node,textHit);}  }
class C{  public boolean isProperty(){  return isProperty;}  }
class C{  public void loadLibrary(final Context context,final String library){  loadLibrary(context,library,null,null);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  Object oldValue=evt.getOldValue();  Object newValue=evt.getNewValue();  if ((oldValue instanceof Document) || (newValue instanceof Document)) {    setDot(0);    if (oldValue != null) {      ((Document)oldValue).removeDocumentListener(this);    }    if (newValue != null) {      ((Document)newValue).addDocumentListener(this);    }  } else   if ("enabled".equals(evt.getPropertyName())) {    Boolean enabled=(Boolean)evt.getNewValue();    if (component.isFocusOwner()) {      if (enabled == Boolean.TRUE) {        if (component.isEditable()) {          setVisible(true);        }        setSelectionVisible(true);      } else {        setVisible(false);        setSelectionVisible(false);      }    }  } else   if ("caretWidth".equals(evt.getPropertyName())) {    Integer newWidth=(Integer)evt.getNewValue();    if (newWidth != null) {      caretWidth=newWidth.intValue();    } else {      caretWidth=-1;    }    repaint();  } else   if ("caretAspectRatio".equals(evt.getPropertyName())) {    Number newRatio=(Number)evt.getNewValue();    if (newRatio != null) {      aspectRatio=newRatio.floatValue();    } else {      aspectRatio=-1;    }    repaint();  }}  }
class C{  public void outputTweet(String tweet){  if (!isEnabled() || !getTweetChats()) {    return;  }  Network network=getBot().memory().newMemory();  Vertex setence=network.createSentence(tweet);  Vertex output=network.createInstance(Primitive.INPUT);  output.setName(tweet);  output.addRelationship(Primitive.INPUT,setence);  output.addRelationship(Primitive.SENSE,getPrimitive());  output.addRelationship(Primitive.SPEAKER,Primitive.SELF);  output.addRelationship(Primitive.INSTANTIATION,Primitive.TWEET);  network.createVertex(Primitive.SELF).addRelationship(Primitive.TWEET,output);  Vertex target=output.mostConscious(Primitive.TARGET);  if (target != null) {    String replyTo=target.mostConscious(Primitive.WORD).getData().toString();    tweet="@" + replyTo + " "+ tweet;  }  network.save();  tweet(tweet,null);}  }
class C{  private void forceProcessingTokensReplication(){  Map<String,Boolean> processing=getProcessingTokens();  Map<String,Boolean> clone=new HashMap<String,Boolean>();  clone.putAll(processing);  session.setAttribute(PROCESSING_TOKENS_ATT,clone);}  }
class C{  public MutableNodeData(final int branchingFactor,final boolean hasVersionTimestamps){  nentries=0;  keys=new MutableKeyBuffer(branchingFactor);  childAddr=new long[branchingFactor + 1];  childEntryCounts=new long[branchingFactor + 1];  this.hasVersionTimestamps=hasVersionTimestamps;  minimumVersionTimestamp=maximumVersionTimestamp=0L;}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer renderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  paint.setAntiAlias(true);  final float stroke=paint.getStrokeWidth();  if (renderer.isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStrokeWidth(renderer.getPointStrokeWidth());    paint.setStyle(Style.STROKE);  }  int length=points.size();switch (renderer.getPointStyle()) {case X:    paint.setStrokeWidth(renderer.getPointStrokeWidth());  for (int i=0; i < length; i+=2) {    drawX(canvas,paint,points.get(i),points.get(i + 1));  }break;case CIRCLE:for (int i=0; i < length; i+=2) {paint.setColor(getSupportColor(renderer,supportSeriesRender,values.get(i + 1)));drawCircle(canvas,paint,points.get(i),points.get(i + 1));}paint.setColor(renderer.getColor());break;case TRIANGLE:float[] path=new float[6];for (int i=0; i < length; i+=2) {paint.setColor(getSupportColor(renderer,supportSeriesRender,values.get(i + 1)));drawTriangle(canvas,paint,path,points.get(i),points.get(i + 1));}paint.setColor(renderer.getColor());break;case SQUARE:for (int i=0; i < length; i+=2) {paint.setColor(getSupportColor(renderer,supportSeriesRender,values.get(i + 1)));drawSquare(canvas,paint,points.get(i),points.get(i + 1));}paint.setColor(renderer.getColor());break;case DIAMOND:path=new float[8];for (int i=0; i < length; i+=2) {paint.setColor(getSupportColor(renderer,supportSeriesRender,values.get(i + 1)));drawDiamond(canvas,paint,path,points.get(i),points.get(i + 1));}paint.setColor(renderer.getColor());break;case POINT:for (int i=0; i < length; i+=2) {paint.setColor(getSupportColor(renderer,supportSeriesRender,values.get(i + 1)));canvas.drawPoint(points.get(i),points.get(i + 1),paint);}paint.setColor(renderer.getColor());break;case CIRCLE_POINT:paint.setStyle(Style.FILL);for (int i=0; i < length; i+=2) {drawCircle(canvas,paint,points.get(i),points.get(i + 1));}for (int i=0; i < length; i+=2) {paint.setColor(getSupportCirclePointColor(renderer,supportSeriesRender,values.get(i + 1)));drawCirclePoint(canvas,paint,points.get(i),points.get(i + 1));}paint.setColor(renderer.getColor());break;}paint.setStrokeWidth(stroke);}  }
class C{  private static Pattern compile(String flregex,String regex,int flags){  int re2Flags=RE2.PERL;  if ((flags & DISABLE_UNICODE_GROUPS) != 0) {    re2Flags&=~RE2.UNICODE_GROUPS;  }  return new Pattern(regex,flags,RE2.compileImpl(flregex,re2Flags,false));}  }
class C{  @CanIgnoreReturnValue public static <T>T readLines(URL url,Charset charset,LineProcessor<T> callback) throws IOException {  return asCharSource(url,charset).readLines(callback);}  }
class C{  public final CharBuffer append(boolean b){  return append(String.valueOf(b));}  }
class C{  RollupWindow(Rectangle rect){  this.rect=rect;  this.windowID=-1;  this.direction=DTVCCDirection.BOTTOM_TO_TOP;}  }
class C{  public QueueException(Throwable cause){  super(cause);}  }
class C{  public void ensureCapacity(int minCapacity){  if (table.length < minCapacity) {    int newCapacity=nextPrime(minCapacity);    rehash(newCapacity);  }}  }
class C{  public static double[][] diagonal(double... c){  double[][] I=new double[c.length][c.length];  for (int i=0; i < I.length; i++)   I[i][i]=c[i];  return I;}  }
class C{  private void resolveReferences(Type base,Events events){  base.cleanUpBackReferences();  addAnnotations(base,base.getAnnotations(),events);  if (base instanceof TypeWithMethods) {    TypeWithMethods typeWithMethods=(TypeWithMethods)base;    resolveMethodReferences(typeWithMethods.getMethods(),events);  }  if (base instanceof ClassType) {    ClassType classType=(ClassType)base;    addSuperclass(classType,classType.getSuperClasses(),events);    addInterface(classType,classType.getRealizedInterfaces(),events);  }  if (base instanceof InterfaceType) {    InterfaceType interfaceType=(InterfaceType)base;    addSuperinterface(interfaceType,interfaceType.getSuperInterfaces(),events);  }}  }
class C{  public AppEngineStop(@NotNull AppEngineHelper helper,@NotNull LoggingHandler loggingHandler,@NotNull AppEngineDeploymentConfiguration deploymentConfiguration,@NotNull UndeploymentTaskCallback callback){  this.helper=helper;  this.loggingHandler=loggingHandler;  this.deploymentConfiguration=deploymentConfiguration;  this.callback=callback;}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  public Bound<T> withShardNameTemplate(String shardTemplate){  return new Bound<>(name,filenamePrefix,filenameSuffix,header,footer,coder,numShards,shardTemplate,validate,writableByteChannelFactory);}  }
class C{  public boolean isTransient(){  return transient_;}  }
class C{  public static String log10(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function log10 : " + params.length);  return "log10(" + params[0] + ")";}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetsystemidnull.class,args);}  }
class C{  private byte[] generateSalt(){  try {    SecureRandom random=SecureRandom.getInstance("SHA1PRNG");    byte[] salt=new byte[8];    random.nextBytes(salt);    return salt;  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return null;}  }
class C{  public WebCookie(String name,String value){  int length=name.length();  for (int i=length - 1; i >= 0; i--) {    char ch=name.charAt(i);    if (ch >= 0x7f || !validChar[ch])     throw new IllegalArgumentException("illegal cookie name: " + name); else     if (ch == '$' && i == 0)     throw new IllegalArgumentException("cookie can't start with '$'");  }  this.name=name;  this.value=value;}  }
class C{  @ObjectiveCName("sendContactWithPeer:withName:withPhones:withEmails:withPhoto:") public void sendContact(@NotNull Peer peer,@NotNull String name,@NotNull ArrayList<String> phones,@NotNull ArrayList<String> emails,@Nullable String base64photo){  modules.getMessagesModule().sendContact(peer,name,phones,emails,base64photo);}  }
class C{  public static int executeIntQuery(String sql) throws AdeException {  return executeIntQuery(sql,AdeInternal.getDefaultConnection(),true);}  }
class C{  public static Set<Asset> resolveAssets(MinecraftDirectory minecraftDir,String assets) throws IOException {  Objects.requireNonNull(minecraftDir);  Objects.requireNonNull(assets);  if (!minecraftDir.getAssetIndex(assets).isFile()) {    return null;  }  try {    return getVersionParser().parseAssetIndex(IOUtils.toJson(minecraftDir.getAssetIndex(assets)));  } catch (  JSONException e) {    throw new IOException("Couldn't parse asset index: " + assets,e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testCreateDiskRegion() throws CacheException {  final String name=this.rtc.getUniqueName();  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  vm0.invoke(createRgnRunnable(name));}  }
class C{  public static @Unsigned short toUnsignedShort(@Unsigned byte b){  return (short)(((int)b) & 0xff);}  }
class C{  public static CloseWatcher pollUnclosed(){  ReferenceQueue<Object> q=queue;  if (q == null) {    return null;  }  while (true) {    CloseWatcher cw=(CloseWatcher)q.poll();    if (cw == null) {      return null;    }    if (refs != null) {      refs.remove(cw);    }    if (cw.closeable != null) {      return cw;    }  }}  }
class C{  protected MetaFile(final File file){  this.aspectRatio=1;  openFile(file);  loadPaddingData();  loadLineSizes();  final int imageWidth=getValueOfVariable("scaleW");  loadCharacterData(imageWidth);  close();}  }
class C{  public static Page create(MVMap<?,?> map,long version,Page source){  Page p=new Page(map,version);  p.keys=source.keys;  p.values=source.values;  p.children=source.children;  p.totalCount=source.totalCount;  p.memory=source.memory;  MVStore store=map.store;  if (store != null) {    store.registerUnsavedPage(p.memory);  }  return p;}  }
class C{  public void add(char ch){  if (b.length <= i) {    b=ArrayUtil.grow(b,i + 1);  }  b[i++]=ch;}  }
class C{  public NumberValidator(@NonNull final CharSequence errorMessage){  super(errorMessage,REGEX);}  }
class C{  protected void customizeFileChooser(JFileChooser chooser){}  }
class C{  public void displayItems() throws IOException, SAXException, ParserConfigurationException {  URL url=new URL(SNIPPETS_FEED + "?bq=" + URLEncoder.encode(QUERY,"UTF-8"));  HttpURLConnection httpConnection=(HttpURLConnection)url.openConnection();  InputStream inputStream=httpConnection.getInputStream();  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser parser=factory.newSAXParser();  parser.parse(inputStream,new DisplayTitlesHandler());}  }
class C{  private void buildRoute(String... routePackages){  Set<ClassInfo> classes=null;  for (int i=0, len=routePackages.length; i < len; i++) {    classes=classReader.getClassByAnnotation(routePackages[i],Controller.class,true);    if (CollectionKit.isNotEmpty(classes)) {      for (      ClassInfo classInfo : classes) {        Class<?> pathClazz=classInfo.getClazz();        this.addRouter(pathClazz);      }    }  }}  }
class C{  public void migrateProperties(){}  }
class C{  public PacketExtensionFilter(String namespace){  this(null,namespace);}  }
class C{  public int writePadding(int index,int count){  return this.writePadding(index,count,(byte)0x00);}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0)   throw new IllegalArgumentException();  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  public String detail(){  if (resource == null) {    return NOT_FOUND;  }  String name=resource.getShortname();  try {    if (getCurrentUser() != null && RequireManagerInterceptor.isAuthorized(getCurrentUser(),resource)) {      version=(version == null) ? findLatestPublishedVersion(resource) : version;      PublicationStatus versionStatus=getPublishedVersionsPublicationStatus(resource,version);      if (versionStatus.equals(PublicationStatus.PRIVATE)) {        String status=getText("resource.status.private");        addActionWarning(getText("portal.resource.warning.notPublic",new String[]{status.toLowerCase()}));      } else       if (resource.getStatus().equals(PublicationStatus.DELETED)) {        String status=getText("resource.status.deleted");        addActionWarning(getText("portal.resource.warning.notPublic",new String[]{status.toLowerCase()}));      }    } else {      if (version == null) {        version=findLatestPublishedPublicVersion(resource);        if (version == null) {          return NOT_ALLOWED;        }      } else {        VersionHistory history=resource.findVersionHistory(version);        if (history == null || history.getPublicationStatus().equals(PublicationStatus.PRIVATE) || history.getPublicationStatus().equals(PublicationStatus.DELETED)) {          return NOT_ALLOWED;        }      }    }    if (resource.getLastPublishedVersionsVersion() != null && version.compareTo(resource.getLastPublishedVersionsVersion()) != 0) {      addActionWarning(getText("portal.resource.warning.notLatest"));    }    eml=loadEmlFromFile(name,version);  } catch (  FileNotFoundException e) {    LOG.error("EML file version #" + getStringVersion() + " for resource "+ name+ " not found");    return NOT_FOUND;  }catch (  IOException e) {    String msg=getText("portal.resource.eml.error.load",new String[]{getStringVersion(),name});    LOG.error(msg);    addActionError(msg);    return ERROR;  }catch (  SAXException e) {    String msg=getText("portal.resource.eml.error.parse",new String[]{getStringVersion(),name});    LOG.error(msg);    addActionError(msg);    return ERROR;  }catch (  ParserConfigurationException e) {    String msg=getText("portal.resource.eml.error.parse",new String[]{getStringVersion(),name});    LOG.error(msg);    addActionError(msg);    return ERROR;  }  finishLoadingDetail(resource,eml,version);  return SUCCESS;}  }
class C{  public static double bachelierBlackFormula(final PlainVanillaPayoff payoff,@Real final double forward,@StdDev final double stddev){  return bachelierBlackFormula(payoff,forward,stddev,1.0);}  }
class C{  private void stringToNominal(ResultSet rs,int i) throws Exception {  while (rs.next()) {    String str=rs.getString(1);    if (!rs.wasNull()) {      Double index=m_nominalIndexes[i - 1].get(str);      if (index == null) {        index=new Double(m_nominalStrings[i - 1].size());        m_nominalIndexes[i - 1].put(str,index);        m_nominalStrings[i - 1].add(str);      }    }  }}  }
class C{  @TargetApi(Build.VERSION_CODES.DONUT) public static boolean isTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;}  }
class C{  public CDefaultProgressOperation(final String description,final boolean indeterminate,final boolean showCancelButton){  m_description=description;  m_progressPanel=new CProgressPanel("",indeterminate,showCancelButton);  m_progressPanel.start();  CGlobalProgressManager.instance().add(this);}  }
class C{  public boolean isTrackIssues(){  Object oo=get_Value(COLUMNNAME_IsTrackIssues);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void paint(SynthContext context,Graphics g){  paintContext=(SeaGlassContext)context;  updateLeadSelectionRow();  Rectangle paintBounds=g.getClipBounds();  Insets insets=tree.getInsets();  TreePath initialPath=getClosestPathForLocation(tree,0,paintBounds.y);  Enumeration paintingEnumerator=treeState.getVisiblePathsFrom(initialPath);  int row=treeState.getRowForPath(initialPath);  int endY=paintBounds.y + paintBounds.height;  TreeModel treeModel=tree.getModel();  SeaGlassContext cellContext=getContext(tree,Region.TREE_CELL);  drawingCache.clear();  setHashColor(context.getStyle().getColor(context,ColorType.FOREGROUND));  if (paintingEnumerator != null) {    boolean done=false;    boolean isExpanded;    boolean hasBeenExpanded;    boolean isLeaf;    Rectangle rowBounds=new Rectangle(0,0,tree.getWidth(),0);    Rectangle bounds;    TreePath path;    TreeCellRenderer renderer=tree.getCellRenderer();    DefaultTreeCellRenderer dtcr=(renderer instanceof DefaultTreeCellRenderer) ? (DefaultTreeCellRenderer)renderer : null;    configureRenderer(cellContext);    while (!done && paintingEnumerator.hasMoreElements()) {      path=(TreePath)paintingEnumerator.nextElement();      if (path != null) {        isLeaf=treeModel.isLeaf(path.getLastPathComponent());        if (isLeaf) {          isExpanded=hasBeenExpanded=false;        } else {          isExpanded=treeState.getExpandedState(path);          hasBeenExpanded=tree.hasBeenExpanded(path);        }        bounds=getPathBounds(tree,path);        rowBounds.y=bounds.y;        rowBounds.height=bounds.height;        paintRow(renderer,dtcr,paintContext,cellContext,g,paintBounds,insets,bounds,rowBounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        if ((bounds.y + bounds.height) >= endY) {          done=true;        }      } else {        done=true;      }      row++;    }    boolean rootVisible=tree.isRootVisible();    TreePath parentPath=initialPath;    parentPath=parentPath.getParentPath();    while (parentPath != null) {      paintVerticalPartOfLeg(g,paintBounds,insets,parentPath);      drawingCache.put(parentPath,Boolean.TRUE);      parentPath=parentPath.getParentPath();    }    done=false;    paintingEnumerator=treeState.getVisiblePathsFrom(initialPath);    while (!done && paintingEnumerator.hasMoreElements()) {      path=(TreePath)paintingEnumerator.nextElement();      if (path != null) {        isLeaf=treeModel.isLeaf(path.getLastPathComponent());        if (isLeaf) {          isExpanded=hasBeenExpanded=false;        } else {          isExpanded=treeState.getExpandedState(path);          hasBeenExpanded=tree.hasBeenExpanded(path);        }        bounds=getPathBounds(tree,path);        parentPath=path.getParentPath();        if (parentPath != null) {          if (drawingCache.get(parentPath) == null) {            paintVerticalPartOfLeg(g,paintBounds,insets,parentPath);            drawingCache.put(parentPath,Boolean.TRUE);          }          paintHorizontalPartOfLeg(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        } else         if (rootVisible && row == 0) {          paintHorizontalPartOfLeg(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        }        if (shouldPaintExpandControl(path,row,isExpanded,hasBeenExpanded,isLeaf)) {          paintExpandControl(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        }        if ((bounds.y + bounds.height) >= endY) {          done=true;        }      } else {        done=true;      }      row++;    }  }  cellContext.dispose();  paintDropLine(g);  rendererPane.removeAll();  paintContext=null;}  }
class C{  public static TetradVector serializableInstance(){  return new TetradVector(0);}  }
class C{  public ObjectStore(){  setProperties();  init();}  }
class C{  private ImageResource initImageResource(){  ImageResource res=new ImageResource();  res.setContentType("de");  res.setImageType(ImageType.SERVICE_IMAGE);  res.setBuffer("value".getBytes());  res.setObjectKey(12L);  return res;}  }
class C{  private void unlockFocus(){  try {    mPreviewBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);    setFlashMode(mPreviewBuilder);    mPreviewSession.capture(mPreviewBuilder.build(),mCaptureCallback,mBackgroundHandler);    mState=STATE_PREVIEW;    mPreviewSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public boolean isOrderBy(){  Object oo=get_Value(COLUMNNAME_IsOrderBy);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSModeled(DSC.SAFE) public String toShortString(){  String str=new String("");  return str;}  }
class C{  public s addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public long updateLastVisitTime(String channelId){  SQLiteDatabase db=getWritableDatabase();  long currentTime=System.currentTimeMillis();  ContentValues values=new ContentValues();  values.put(SubscriptionsTable.COL_LAST_VISIT_TIME,currentTime);  int count=db.update(SubscriptionsTable.TABLE_NAME,values,SubscriptionsTable.COL_CHANNEL_ID + " = ?",new String[]{channelId});  return (count > 0 ? currentTime : -1);}  }
class C{  private V removeFromDataIndexOfKey(int dataIndexOfKey){  int dataSize=this.size << 1;  if (dataIndexOfKey < 0 || dataIndexOfKey >= dataSize) {    return null;  }  V result=valueAtDataIndex(dataIndexOfKey + 1);  Object[] data=this.data;  int moved=dataSize - dataIndexOfKey - 2;  if (moved != 0) {    System.arraycopy(data,dataIndexOfKey + 2,data,dataIndexOfKey,moved);  }  this.size--;  setData(dataSize - 2,null,null);  return result;}  }
class C{  @Pure public byte parseForTypeCode() throws IllegalArgumentException {  if (VM.VerifyAssertions) {    VM._assert(val.length > 0);  }  return val[0];}  }
class C{  public Configurator loadingText(int textRes,int textSize,int textColor){  if (textRes > 0) {    viewLoadingText=textRes;  }  if (textSize > 0) {    viewLoadingTextSize=textSize;  }  if (textColor > 0) {    viewLoadingTextColor=textColor;  }  return this;}  }
class C{  public static void launch(YouTubeVideo youTubeVideo,Context context){  Intent i=new Intent(context,YouTubePlayerActivity.class);  i.putExtra(YouTubePlayerActivity.YOUTUBE_VIDEO_OBJ,youTubeVideo);  context.startActivity(i);}  }
class C{  public void put(String name,PathImpl path){  _pathMap.put(name,path);}  }
class C{  public void testHotDeployRar(){  this.fileHandler.createFile("ram:///test.rar");  RAR rar=(RAR)factory.createDeployable("jonas4x","ram:///test.rar",DeployableType.RAR);  setupAdminHotDeployment();  deployer.deploy(rar);  assertTrue(fileHandler.exists(deployer.getDeployableDir(rar) + "/test.rar"));}  }
class C{  public void onVerificationSmsReceived(final int smsReceiveInterval){  if (ENABLED) {    track("Verification SMS Received",mPropsGenerator.makeVerificationSmsReceivedProps(smsReceiveInterval));  }}  }
class C{  @Override public Object saveView(FacesContext context){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletFullStateManagementStrategy.saveView");  }  Object[] result;  UIViewRoot viewRoot=context.getViewRoot();  Util.checkIdUniqueness(context,viewRoot,new HashSet<>(viewRoot.getChildCount() << 1));  StateContext stateContext=StateContext.getStateContext(context);  saveDynamicActions(context,stateContext,viewRoot);  Object state=saveComponentState(context);  List<TreeNode> treeList=new ArrayList<>(32);  captureChild(treeList,0,viewRoot);  Object[] tree=treeList.toArray();  result=new Object[]{tree,state};  StateContext.release(context);  return result;}  }
class C{  public void run(){  int port=0;  try {    port=Integer.parseInt(hostPort.getText());    ServerSocket serverSocket=new ServerSocket(port);    Socket s=serverSocket.accept();    serverSocket.close();    System.out.println("Accepted peer connection.");    conn=ConnectionFactory.getInstance().createServerConnection(s,0);    conn.addConnectionListener(connectionListener);    board=new Board();    panConnect.setEnabled(false);    panXmit.setEnabled(true);  } catch (  Throwable err) {    err.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.365 -0500",hash_original_method="AF3422E1C079F6B2A15130B45797502F",hash_generated_method="F23B568E45220201E3D8D9529E5C4B1C") @DSSafe(DSCat.SAFE_OTHERS) public boolean isSealed(){  return mSealed;}  }
class C{  public PdfRendererBuilder withFile(File file){  this._file=file;  return this;}  }
class C{  public PcRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  static TBigInteger evenModPow(TBigInteger base,TBigInteger exponent,TBigInteger modulus){  int j=modulus.getLowestSetBit();  TBigInteger q=modulus.shiftRight(j);  TBigInteger x1=oddModPow(base,exponent,q);  TBigInteger x2=pow2ModPow(base,exponent,j);  TBigInteger qInv=modPow2Inverse(q,j);  TBigInteger y=(x2.subtract(x1)).multiply(qInv);  inplaceModPow2(y,j);  if (y.sign < 0) {    y=y.add(TBigInteger.getPowerOfTwo(j));  }  return x1.add(q.multiply(y));}  }
class C{  public TIntLongHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public JsonToken peek() throws IOException {  if (token != null) {    return token;  }switch (peekStack()) {case EMPTY_DOCUMENT:    replaceTop(JsonScope.NONEMPTY_DOCUMENT);  JsonToken firstToken=nextValue();if (!lenient && token != JsonToken.BEGIN_ARRAY && token != JsonToken.BEGIN_OBJECT) {  throw new IOException("Expected JSON document to start with '[' or '{' but was " + token);}return firstToken;case EMPTY_ARRAY:return nextInArray(true);case NONEMPTY_ARRAY:return nextInArray(false);case EMPTY_OBJECT:return nextInObject(true);case DANGLING_NAME:return objectValue();case NONEMPTY_OBJECT:return nextInObject(false);case NONEMPTY_DOCUMENT:try {JsonToken token=nextValue();if (lenient) {return token;}throw syntaxError("Expected EOF");} catch (EOFException e) {return token=JsonToken.END_DOCUMENT;}case CLOSED:throw new IllegalStateException("JsonReader is closed");default :throw new AssertionError();}}  }
class C{  void optimize(boolean parse){  if (parse) {    calculateFakePlan();  } else {    calculateBestPlan();    bestPlan.removeUnusableIndexConditions();  }  TableFilter[] f2=bestPlan.getFilters();  topFilter=f2[0];  for (int i=0; i < f2.length - 1; i++) {    f2[i].addJoin(f2[i + 1],false,false,null);  }  if (parse) {    return;  }  for (  TableFilter f : f2) {    PlanItem item=bestPlan.getItem(f);    f.setPlanItem(item);  }}  }
class C{  public SignatureFile(InputStream is) throws IOException {  this(is,null);}  }
class C{  private Node<T> append(Node<T> appendable){  if (next == null) {    return withNext(appendable);  }  return withNext(next.append(appendable));}  }
class C{  public static String ensureStartingSlash(String path){  Objects.requireNonNull(path,"path must not be null");  return "".equals(path) || path.charAt(0) != '/' ? ("/" + path) : path;}  }
class C{  public static boolean isStrict(int mod){  return (mod & STRICT) != 0;}  }
class C{  public HybridEncryption(){  try {    cipher=Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding");  } catch (  NoSuchAlgorithmException e) {    throw new TorException(e);  }catch (  NoSuchPaddingException e) {    throw new TorException(e);  }}  }
class C{  public boolean isLegacyRenderer(){  return legacyRenderer;}  }
class C{  public static RequestCreator loadImage(String imagePath,Context context){  if (!isDrawableImage(imagePath)) {    return Picasso.with(context).load(new File(imagePath));  } else {    int resourceId=getResourceId(imagePath,context);    RequestCreator requestCreator=requestCache.get(resourceId);    if (requestCreator == null) {      requestCreator=Picasso.with(context).load(resourceId);      requestCache.put(resourceId,requestCreator);    }    return requestCreator;  }}  }
class C{  public void createRelationType(String relationTypeName,RoleInfo[] roleInfoArray) throws IllegalArgumentException, InvalidRelationTypeException {  if (relationTypeName == null || roleInfoArray == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"createRelationType",relationTypeName);  RelationType relType=new RelationTypeSupport(relationTypeName,roleInfoArray);  addRelationTypeInt(relType);  RELATION_LOGGER.exiting(RelationService.class.getName(),"createRelationType");  return;}  }
class C{  public synchronized void reset() throws IOException {  getBufIfOpen();  if (markpos < 0)   throw new IOException("Resetting to invalid mark");  pos=markpos;}  }
class C{  public static Object create(final ConfigurableFactory factory,final ConfigurableFactoryContext ctx,final Class<?> clazz){  Object obj;  obj=factory.create(ctx);  if (clazz.isInstance(obj)) {    return obj;  } else {    return null;  }}  }
class C{  boolean remove(int key){  for (int slot=key & mask; ; slot=(slot + 1) & mask) {    if (freqs[slot] == 0) {      return false;    } else     if (keys[slot] == key) {      final int newFreq=--freqs[slot];      if (newFreq == 0) {        relocateAdjacentKeys(slot);      }      return true;    }  }}  }
class C{  public boolean onTouchEvent(MotionEvent event){  if (mController == null) {    return false;  }  return mController.onTouchEvent(event);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ObdTestFrame(){  ObdProt.VidPvs.addPvChangeListener(this);  ser.setMessageHandler(prt);  prt.addTelegramWriter(ser);  initComponents();  panObdData.setPidPvs(ObdProt.PidPvs);  panObdFreezeFrame.setPidPvs(ObdProt.PidPvs);  panCanData.setPidPvs(ElmProt.canProt.CanPvs);  panCanData.setTitle("CAN Data Graph");  panObdDtc.setTcList(ObdProt.tCodes);  panObdDtc.addActionListener(hdlrCodeButtons);  prt.addPropertyChangeListener(panObdDtc);  prt.addPropertyChangeListener(this);}  }
class C{  public void testMergeInBothWithNodeMergeStrategyWithRightValueOnly() throws Exception {  WebXml srcWebXml=getWebXml("param","value1");  WebXml mergeWebXml=getWebXml("param","value2");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","$right:param-value");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("value2",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  public void writeTo(String zoneID,OutputStream out) throws IOException {  if (out instanceof DataOutput) {    writeTo(zoneID,(DataOutput)out);  } else {    writeTo(zoneID,(DataOutput)new DataOutputStream(out));  }}  }
class C{  public static final boolean login(Context context,String authToken){  if (!TextUtils.isEmpty(authToken)) {    JSONForm form=new JSONForm().close();    GMusicClientCalls.setAuthorizationHeader(authToken);    String response=mHttpClient.post(context,"https://play.google.com/music/listen?hl=en&u=0",new ByteArrayEntity(form.toString().getBytes()),form.getContentType());    if (response != null) {      if (getXtCookieValue() != null) {        return true;      } else {        return false;      }    } else {      return false;    }  } else {    return false;  }}  }
class C{  private void addNeurons(){  double number=Utils.doubleParsable(numNeurons);  if (!Double.isNaN(number)) {    number=(int)number;    Network net=networkPanel.getNetwork();    for (int i=0; i < number; i++) {      addedNeurons.add(new Neuron(net,baseNeuron));    }    networkPanel.addNeuronsToPanel(addedNeurons,selectLayout.getCurrentLayout());  }}  }
class C{  protected void removeDocumentListeners(){  NodeEventTarget et=(NodeEventTarget)document;  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedListener,false);  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedListener,false);  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedListener,false);}  }
class C{  WildcardArgumentWithUpperBound(ParameterBound bound){  super(bound);}  }
class C{  @VisibleForTesting public Block createNextBlock(Address to,long version,long time,int blockHeight){  return createNextBlock(to,version,null,time,pubkeyForTesting,FIFTY_COINS,blockHeight);}  }
class C{  public PutRequestMessage(PutRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersionedValue()) {    this.versionedValue=new VersionedValue(other.versionedValue);  }  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  for (  String pattern : DEFAULT_PATTERNS) {    try {      SimpleDateFormat dateFormat=new SimpleDateFormat(pattern,Locale.ENGLISH);      return dateFormat.parse(dateStr).getTime();    } catch (    ParseException e) {    }  }  LogUtil.e("ParseFailed with:" + dateStr);  return 0;}  }
class C{  public boolean isDisplayBoundingPoints(){  return mDisplayBoundingPoints;}  }
class C{  public XML(File file) throws IOException, ParserConfigurationException, SAXException {  this(file,null);}  }
class C{  public static ChatMessage createGeolocMessage(ContactId remote,Geoloc geoloc,long timestamp,long timestampSent){  String msgId=IdGenerator.generateMessageID();  return new ChatMessage(msgId,remote,geoloc.toString(),MimeType.GEOLOC_MESSAGE,timestamp,timestampSent,null);}  }
class C{  public File createTrainManifestFile(String name){  savePreviousManifestFile(name);  return createFile(getDefaultManifestFilename(name),false);}  }
class C{  public final boolean isProcessExtensionPopupChildren(){  return processExtensionPopupChildren;}  }
class C{  @Override public void insert(byte[] key,final byte[] b) throws IOException {  key=normalizeKey(key);  if (b.length == 0)   return;synchronized (this) {    this.delete(key);    try {      if (putToGap(key,b))       return;    } catch (    final SpaceExceededException e) {    }    assert this.buffer != null;    if (this.buffersize + b.length > this.buffermax || MemoryControl.shortStatus()) {      super.shrinkWithGapsAtEnd();      flushBuffer();      if (b.length > this.buffermax) {        this.add(key,b);      } else {        if (this.buffer != null) {          this.buffer.put(key,b);          this.buffersize+=b.length;        }      }      return;    }    if (this.buffer != null) {      this.buffer.put(key,b);      this.buffersize+=b.length;    }  }}  }
class C{  public ManifestEntryVerifier(Manifest man){  createdDigests=new HashMap<String,MessageDigest>(11);  digests=new ArrayList<MessageDigest>();  manifestHashes=new ArrayList<byte[]>();  this.man=man;}  }
class C{  public OutputBuilder(final ConfigurationDirectory confDirectory,final ConfProxyProperties configuration) throws Exception {  this.confDir=confDirectory;  this.conf=configuration;  setup();}  }
class C{  @Override public StringBuffer format(Date date,StringBuffer toAppendTo,FieldPosition fieldPosition){  this.calendar.setTime(date);  int month=this.calendar.get(Calendar.MONTH);  toAppendTo.append(this.months[month]);  if (this.showYear[month]) {    toAppendTo.append(this.yearFormatter.format(date));  }  return toAppendTo;}  }
class C{  private AlarmEvent activation(AlarmPoint alarm){  AlarmStatus oldStatus=alarm.currentStatus();  if (oldStatus.name(null).equals(AlarmPoint.STATUS_NORMAL)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_ACTIVATED);    return createEvent(alarm.identity().get(),oldStatus,newStatus,AlarmPoint.EVENT_ACTIVATION);  }  return null;}  }
class C{  public static DAOProfile newInstance(String displayName){  final DAOProfile returnInstance=new DAOProfile();  returnInstance.setDisplayName(displayName);  return returnInstance;}  }
class C{  public void resetRowSelection(){  listSelectionModel.clearSelection();  if (selection != null && rowMapper != null) {    int aRow;    int validCount=0;    int[] rows=rowMapper.getRowsForPaths(selection);    for (int counter=0, maxCounter=selection.length; counter < maxCounter; counter++) {      aRow=rows[counter];      if (aRow != -1) {        listSelectionModel.addSelectionInterval(aRow,aRow);      }    }    if (leadIndex != -1 && rows != null) {      leadRow=rows[leadIndex];    } else     if (leadPath != null) {      tempPaths[0]=leadPath;      rows=rowMapper.getRowsForPaths(tempPaths);      leadRow=(rows != null) ? rows[0] : -1;    } else {      leadRow=-1;    }    insureRowContinuity();  } else   leadRow=-1;}  }
class C{  public String loadAndRun(HeliumPackage pkg,Paragraph paragraph){  ApplicationState appState=paragraph.createOrGetApplicationState(pkg);  onLoad(paragraph.getNote().getId(),paragraph.getId(),appState.getId(),appState.getHeliumPackage());  executor.submit(new LoadApplication(appState,pkg,paragraph));  return appState.getId();}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,"text()","text");  charProcessor.setXslTextElement((ElemText)elem);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(elem);  elem.setDOMBackPointer(handler.getOriginatingNode());}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  try {    KeyManagerFactory.getInstance(null,mProv.getName());    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      KeyManagerFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        KeyManagerFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect algorithm",keyMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyMF.getProvider().getName(),mProv.getName());    checkResult(keyMF);  }}  }
class C{  public int doCoverThings(byte aSide,byte aInputRedstone,int aCoverID,int aCoverVariable,ICoverable aTileEntity,long aTimer){  return aCoverVariable;}  }
class C{  @Override public void failure(int requestId,int errorCode,String message){  mProgressWheel.setVisibility(View.GONE);  mCreditTextView.setVisibility(View.VISIBLE);  if (requestId == ApiResponseCodes.CLAIM_REWARD) {    Toast.makeText(getActivity(),"Something went wrong. Please ensure you have at least " + mMinimumClaim + " points and try again.",Toast.LENGTH_SHORT).show();  }}  }
class C{  public RDFParseException(String msg,Throwable t,long lineNo,long columnNo){  super(msg + getLocationString(lineNo,columnNo),t);  this.lineNo=lineNo;  this.columnNo=columnNo;}  }
class C{  public static void main(String[] args){  double start=1;  double end=901;  System.out.println("\ni           m(i)     ");  System.out.println("---------------------");  for (double i=start; i <= end; i+=100) {    System.out.printf("%-12.0f",i);    System.out.printf("%-6.4f\n",estimatePI(i));  }}  }
class C{  public static int isSubdirectoryOf(File pathFile,List directories){  String path=pathFile.toString();  for (int j=0, size=directories.size(); j < size; j++) {    File dirFile=FileUtil.getCanonicalFile((File)directories.get(j));    String dir=dirFile.toString();    if (!pathFile.getParent().equals(dirFile.getParent()) && (path.length() > dir.length() && path.startsWith(dir) || dir.length() > path.length() && dir.startsWith(path))) {      return j;    }  }  return -1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void validateExportRules(ExportRules listExportRules,ExportOperationType type) throws Exception {  if (listExportRules == null) {    _log.info("Missing Export Rules - Ignoring the operation type {} ",type.name());    invalidXMLElementErrorToReport="Missing Export Rules - Ignoring the operation type " + type.name();    return;  }switch (type) {case ADD:{      verifyAddExportRule(listExportRules.getExportRules());      break;    }case MODIFY:{    verifyModifyExportRule(listExportRules.getExportRules());    break;  }case DELETE:{  verifyDeleteExportRule(listExportRules.getExportRules());  break;}}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:14.189 -0400",hash_original_method="0CDAF22FE8B926264B2EE50F31A40E4D",hash_generated_method="1DE1FC7F57EDA183E59ED0084064DA89") public boolean compressToJpeg(Rect rectangle,int quality,OutputStream stream){  Rect wholeImage=new Rect(0,0,mWidth,mHeight);  if (!wholeImage.contains(rectangle)) {    throw new IllegalArgumentException("rectangle is not inside the image");  }  if (quality < 0 || quality > 100) {    throw new IllegalArgumentException("quality must be 0..100");  }  if (stream == null) {    throw new IllegalArgumentException("stream cannot be null");  }  adjustRectangle(rectangle);  int[] offsets=calculateOffsets(rectangle.left,rectangle.top);  return nativeCompressToJpeg(mData,mFormat,rectangle.width(),rectangle.height(),offsets,mStrides,quality,stream,new byte[WORKING_COMPRESS_STORAGE]);}  }
class C{  public void prpUsageMapWithDmyVals(Map<Integer,BoundryWisePropUsgeBean> propUsageIDMap,Map<Integer,BoundryWisePropUsgeBean> propUsag,List<PropertyTypeMaster> propMstrList){  LOGGER.debug("Entered into prpUsageMapWithDmyVals method");  LOGGER.debug("PropertyUsageId Map size : " + (propUsageIDMap != null ? propUsageIDMap.size() : ZERO));  LOGGER.debug("PropertyUsage Map size : " + (propUsag != null ? propUsag.size() : ZERO));  LOGGER.debug("All Property Usage List : " + (propMstrList != null ? propMstrList : ZERO));  for (int propUsge=0; propUsge < propMstrList.size(); propUsge++) {    BoundryWisePropUsgeBean beanWithZeroVal=new BoundryWisePropUsgeBean();    beanWithZeroVal.setArrDmd(ZERO);    beanWithZeroVal.setCurrDmd(ZERO);    beanWithZeroVal.setPropCount(0);    beanWithZeroVal.setTotalDemand(ZERO);    LOGGER.debug("Total Properties : " + beanWithZeroVal.getPropCount() + ", "+ "Arrears Demand : "+ beanWithZeroVal.getArrDmd()+ ", "+ "Current Demand : "+ beanWithZeroVal.getCurrDmd()+ ", "+ "Total Demand : "+ beanWithZeroVal.getTotalDemand());    if (propUsageIDMap == null) {      propUsag.put(propMstrList.get(propUsge).getId().intValue(),beanWithZeroVal);    } else {      propUsageIDMap.put(propMstrList.get(propUsge).getId().intValue(),beanWithZeroVal);    }  }  LOGGER.debug("Exit from prpUsageMapWithDmyVals method");}  }
class C{  @Override public Overlay buildOverlay(MapView map,Style defaultStyle,Styler styler,KmlPlacemark kmlPlacemark,KmlDocument kmlDocument){  FolderOverlay folderOverlay=new FolderOverlay();  for (  KmlGeometry k : mItems) {    Overlay overlay=k.buildOverlay(map,defaultStyle,styler,kmlPlacemark,kmlDocument);    folderOverlay.add(overlay);  }  return folderOverlay;}  }
class C{  BlazeVertex(final BlazeGraph graph,final BigdataURI uri,final BigdataURI label){  super(graph,uri,label);}  }
class C{  @Override public SolrPingResponse ping() throws SolrServerException, IOException {  for (  SolrClient s : this.shards) {    SolrPingResponse spr=s.ping();    if (spr != null)     return spr;  }  return null;}  }
class C{  public static void addEntity(SimEntity e){  SimEvent evt;  if (running) {    evt=new SimEvent(SimEvent.CREATE,clock,1,0,0,e);    future.addEvent(evt);  }  if (e.getId() == -1) {    int id=entities.size();    e.setId(id);    entities.add(e);    entitiesByName.put(e.getName(),e);  }}  }
class C{  public final CC split(){  setSplit(LayoutUtil.INF);  return this;}  }
class C{  public String providePath(){  return "/blockcanary/";}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  public void hide(){  mContentView.setVisibility(View.GONE);}  }
class C{  public void testOperatorIntentFilter(){  boolean result=false;  Context context=mSettings.getApplicationContext();  PackageManager pm=context.getPackageManager();  Intent intent=new Intent(INTENT_OPERATOR_HOOK);  List<ResolveInfo> list=pm.queryIntentActivities(intent,0);  for (  ResolveInfo resolveInfo : list) {    if (resolveInfo.activityInfo.packageName.equals(PACKAGE_NAME)) {      result=true;    }  }  assertTrue("Intent-filter not found",result);}  }
class C{  public void initMouseEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,int detailArg,int screenXArg,int screenYArg,int clientXArg,int clientYArg,short buttonArg,EventTarget relatedTargetArg,String modifiersList){  initUIEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg);  screenX=screenXArg;  screenY=screenYArg;  clientX=clientXArg;  clientY=clientYArg;  button=buttonArg;  relatedTarget=relatedTargetArg;  modifierKeys.clear();  String[] modifiers=split(modifiersList);  for (int i=0; i < modifiers.length; i++) {    modifierKeys.add(modifiers[i]);  }}  }
class C{  public void initMutationNameEventNS(String namespaceURI,String typeArg,boolean canBubbleArg,boolean cancelableArg,Node relatedNodeArg,String prevNamespaceURIArg,String prevNodeNameArg){  initMutationEventNS(namespaceURI,typeArg,canBubbleArg,cancelableArg,relatedNodeArg,null,null,null,(short)0);  this.prevNamespaceURI=prevNamespaceURIArg;  this.prevNodeName=prevNodeNameArg;}  }
class C{  public QueryParams build(){  return new QueryParams(url,cache,queryIdentifier,isAuthenticated,method,activity,fragment,extra);}  }
class C{  public String toString(){  StringBuffer str=new StringBuffer("Address Type: " + addrType + "\n");  str.append("AddressContents: ");  for (int i=0; i < buf.length && i < 32; i++) {    str.append(Integer.toHexString(buf[i]) + " ");  }  if (buf.length >= 32)   str.append(" ...\n");  return (str.toString());}  }
class C{  private void completeInvoice(MInvoice invoice){  if (invoice == null)   return;  invoice.setDocAction(DocAction.ACTION_Prepare);  invoice.processIt(DocAction.ACTION_Prepare);  if (!invoice.save())   new IllegalStateException("Cannot save Invoice");  m_noInvoices++;  addLog(invoice.get_ID(),invoice.getDateInvoiced(),invoice.getGrandTotal(),invoice.getDocumentNo());}  }
class C{  public Matrix3d mul(Matrix3fc right){  return mul(right,this);}  }
class C{  public static void validateVarName(String varName) throws PTQueryException {  if (!validVarName(varName)) {    throw new PTQueryException("Invalid var " + varName);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public Statement asc(){  statement.append(" ASC");  return this;}  }
class C{  @Inline private boolean testAndMark(ObjectReference object,byte value){  Word oldValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    byte markBit=(byte)(oldValue.toInt() & (inNurseryGC ? LOS_BIT_MASK : MARK_BIT));    if (markBit == value)     return false;  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.and(Word.fromIntZeroExtend(LOS_BIT_MASK).not()).or(Word.fromIntZeroExtend(value))));  return true;}  }
class C{  public void detach(){  if (m_allowDetach && null != m_iterators) {    int n=m_iterators.length;    for (int i=0; i < n; i++) {      m_iterators[i].detach();    }    m_iterators=null;  }}  }
class C{  private HeronReefUtils(){}  }
class C{  public ByteArrayBody(final byte[] data,final String filename){  this(data,"application/octet-stream",filename);}  }
class C{  public HllSketch union(HllSketch that){  fields=that.fields.unionInto(fields,updateCallback);  return this;}  }
class C{  public void mergeContributionFromShard(int shardNumber,ResponseBuilder rb,NamedList<Object> value){  assert null != value : "can't merge in null data";  if (!shardHasContributed(shardNumber)) {    sourceShards.set(shardNumber);    count+=PivotFacetHelper.getCount(value);    NamedList<NamedList<NamedList<?>>> stats=PivotFacetHelper.getStats(value);    if (stats != null) {      statsValues=PivotFacetHelper.mergeStats(statsValues,stats,rb._statsInfo);    }    NamedList<Number> shardQueryCounts=PivotFacetHelper.getQueryCounts(value);    if (shardQueryCounts != null) {      queryCounts=PivotFacetHelper.mergeQueryCounts(queryCounts,shardQueryCounts);    }    SimpleOrderedMap<SimpleOrderedMap<Object>> shardRanges=PivotFacetHelper.getRanges(value);    if (shardRanges != null) {      if (rangeCounts == null) {        rangeCounts=new LinkedHashMap<>(shardRanges.size() / 2);      }      RangeFacetRequest.DistribRangeFacet.mergeFacetRangesFromShardResponse(rangeCounts,shardRanges);    }  }  List<NamedList<Object>> shardChildPivots=PivotFacetHelper.getPivots(value);  if (null == childPivot) {    childPivot=PivotFacetField.createFromListOfNamedLists(shardNumber,rb,this,shardChildPivots);  } else {    childPivot.contributeFromShard(shardNumber,rb,shardChildPivots);  }}  }
class C{  WorkerThread(int workerNum,RacingThreadsTest test){  super("WorkerThread-" + workerNum);  this.test=test;  this.workerNum=workerNum;}  }
class C{  private void initialize(Class<ModelType> opsType,RequiredPresenterOps presenter) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mOpsInstance.onCreate(presenter);}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public static AnnotatedTypeMirror replace(AnnotatedTypeMirror type,Map<? extends AnnotatedTypeMirror,? extends AnnotatedTypeMirror> replacementMap){  return new Visitor(replacementMap).visit(type);}  }
class C{  public SQLTimeoutException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  public ScriptExecutorTaskStatus(int count,boolean successful,ScriptMethodResponse failedResponse){  this.count=count;  this.successful=successful;  this.failedResponse=failedResponse;}  }
class C{  public boolean forEachValue(TFloatProcedure procedure){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public static void updateModificationDate(final CConnection connection,final String tableName,final int id) throws CouldntSaveDataException {  Preconditions.checkNotNull(tableName,"IE01486: Table name argument can not be null");  Preconditions.checkNotNull(connection,"IE01858: Connection argument can not be null");  final String query="UPDATE " + tableName + " SET modification_date = NOW() WHERE id = ?";  try (PreparedStatement statement=connection.getConnection().prepareStatement(query)){    statement.setInt(1,id);    statement.executeUpdate();  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public CGAffineTransform(CGAffineTransform t){  this.type=t.type;  this.m00=t.m00;  this.m10=t.m10;  this.m01=t.m01;  this.m11=t.m11;  this.m02=t.m02;  this.m12=t.m12;}  }
class C{  public static Edge partiallyOrientedEdge(Node nodeA,Node nodeB){  return new Edge(nodeA,nodeB,Endpoint.CIRCLE,Endpoint.ARROW);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Collection<Location> orderedLocations(){  TreeSet<Location> tree=new TreeSet<Location>();  for (Iterator<Location> locs=locationIterator(); locs.hasNext(); ) {    Location loc=locs.next();    tree.add(loc);  }  return tree;}  }
class C{  @NoInline private Address allocSlow(Address start,Address end,int align,int offset){  Address rtn=null;  Address card=null;  if (SUPPORT_CARD_SCANNING)   card=getCard(start.plus(CARD_MASK));  if (end.GT(limit)) {    rtn=allocSlowInline(end.diff(start).toInt(),align,offset);    if (SUPPORT_CARD_SCANNING && card.NE(getCard(rtn.plus(CARD_MASK))))     card=getCard(rtn);  } else {    while (internalLimit.LE(end))     internalLimit=internalLimit.plus(STEP_SIZE);    if (internalLimit.GT(limit))     internalLimit=limit;    fillAlignmentGap(cursor,start);    cursor=end;    rtn=start;  }  if (SUPPORT_CARD_SCANNING && !rtn.isZero())   createCardAnchor(card,rtn,end.diff(start).toInt());  return rtn;}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void start(){  gpsBatteryManager.start();}  }
class C{  private static void fixPopupWeight(){  int popupWeight=OurPopupFactory.WEIGHT_MEDIUM;  String property=System.getProperty("idea.popup.weight");  if (property != null)   property=property.toLowerCase(Locale.ENGLISH).trim();  if (SystemInfo.isMacOSLeopard) {    popupWeight=OurPopupFactory.WEIGHT_HEAVY;  } else   if (property == null) {    if (SystemInfo.isWindows) {      popupWeight=OurPopupFactory.WEIGHT_HEAVY;    }  } else {    if ("light".equals(property)) {      popupWeight=OurPopupFactory.WEIGHT_LIGHT;    } else     if ("medium".equals(property)) {      popupWeight=OurPopupFactory.WEIGHT_MEDIUM;    } else     if ("heavy".equals(property)) {      popupWeight=OurPopupFactory.WEIGHT_HEAVY;    } else {      LOG.error("Illegal value of property \"idea.popup.weight\": " + property);    }  }  PopupFactory factory=PopupFactory.getSharedInstance();  if (!(factory instanceof OurPopupFactory)) {    factory=new OurPopupFactory(factory);    PopupFactory.setSharedInstance(factory);  }  PopupUtil.setPopupType(factory,popupWeight);}  }
class C{  public void describe(final EvolutionState state,final Individual ind,final int subpopulation,final int threadnum,final int log){  return;}  }
class C{  public String buildCommandLine(CWLJob job,File workingDir,FilePathMapper filePathMapper,Map<String,Object> config) throws BindingException {  CWLCommandLineTool commandLineTool=(CWLCommandLineTool)job.getApp();  List<Object> commandLineParts=buildCommandLineParts(job,workingDir,filePathMapper);  StringBuilder builder=new StringBuilder();  for (  Object commandLinePart : commandLineParts) {    builder.append(commandLinePart).append(PART_SEPARATOR);  }  String stdin=null;  try {    stdin=commandLineTool.getStdin(job);  } catch (  CWLExpressionException e) {    logger.error("Failed to extract standard input.",e);    throw new BindingException("Failed to extract standard input.",e);  }  if (!StringUtils.isEmpty(stdin)) {    builder.append(PART_SEPARATOR).append("<").append(PART_SEPARATOR).append(stdin);  }  String stdout=null;  try {    stdout=commandLineTool.getStdout(job);  } catch (  CWLExpressionException e) {    logger.error("Failed to extract standard output.",e);    throw new BindingException("Failed to extract standard outputs.",e);  }  if (!StringUtils.isEmpty(stdout)) {    if (!stdout.startsWith("/")) {      try {        String mappedWorkingDir=filePathMapper.map(workingDir.getAbsolutePath(),config);        stdout=new File(mappedWorkingDir,stdout).getAbsolutePath();      } catch (      FileMappingException e) {        throw new BindingException(e);      }    }    builder.append(PART_SEPARATOR).append(">").append(PART_SEPARATOR).append(stdout);  }  String commandLine=normalizeCommandLine(builder.toString());  logger.info("Command line built. CommandLine = {}",commandLine);  return commandLine;}  }
class C{  void purge(int n,int ll,double[] r,double[] q,double[] ra,double[] qa,double[] wrk,double[] eta,double[] oldeta,int step,double[] rnmp,double tol){  double t, tq, tr, reps1;  double rnm=rnmp[0];  int k, iteration, i;  boolean flag;  if (step < ll + 2)   return;  k=svd_idamax(step - (ll + 1),eta,ll,1) + ll;  if (Math.abs(eta[k]) > reps) {    reps1=eps1 / reps;    iteration=0;    flag=true;    while (iteration < 2 && flag) {      if (rnm > tol) {        tq=0.0;        tr=0.0;        for (i=ll; i < step; i++) {          store(n,RETRQ,i,wrk);          t=-svd_ddot(n,qa,1,wrk,1);          tq+=Math.abs(t);          svd_daxpy(n,t,wrk,1,q,1);          t=-svd_ddot(n,ra,1,wrk,1);          tr+=Math.abs(t);          svd_daxpy(n,t,wrk,1,r,1);        }        svd_dcopy(n,q,1,qa,1);        t=-svd_ddot(n,r,1,qa,1);        tr+=Math.abs(t);        svd_daxpy(n,t,q,1,r,1);        svd_dcopy(n,r,1,ra,1);        rnm=Math.sqrt(svd_ddot(n,ra,1,r,1));        if (tq <= reps1 && tr <= reps1 * rnm)         flag=false;      }      iteration++;    }    for (i=ll; i <= step; i++) {      eta[i]=eps1;      oldeta[i]=eps1;    }  }  rnmp[0]=rnm;  return;}  }
class C{  public void showNotification(int id,String tickerText,String contentText,Intent intent){  String title=mApplicationContext.getString(R.string.app_name);  PendingIntent contentIntent=PendingIntent.getActivity(mApplicationContext,0,intent,0);  NotificationCompat.Builder builder=new NotificationCompat.Builder(mApplicationContext).setAutoCancel(true).setContentIntent(contentIntent).setContentTitle(title).setContentText(contentText).setSmallIcon(R.drawable.ic_chrome).setTicker(tickerText).setLocalOnly(true);  Notification notification=new NotificationCompat.BigTextStyle(builder).bigText(contentText).build();  mNotificationManager.notify(id,notification);}  }
class C{  public static boolean is64bit(){  boolean is64bit=false;  if (isWindows()) {    is64bit=(System.getenv("ProgramFiles(x86)") != null);  } else {    is64bit=(OS_ARCH.contains("64"));  }  return is64bit;}  }
class C{  public void update(final Graphics g){  paint(g);}  }
class C{  public static void validateEnvironment(Context ctxt){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    throw new IllegalStateException("App is running on device older than API Level 14");  }  PackageManager pm=ctxt.getPackageManager();  if (!pm.hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY) && !pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {    throw new IllegalStateException("App is running on device that lacks a camera");  }  if (ctxt instanceof CameraActivity) {    try {      ActivityInfo info=pm.getActivityInfo(((CameraActivity)ctxt).getComponentName(),0);      if (info.exported) {        throw new IllegalStateException("A CameraActivity cannot be exported!");      }    } catch (    PackageManager.NameNotFoundException e) {      throw new IllegalStateException("Cannot find this activity!",e);    }  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (ctxt.checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {      throw new IllegalStateException("We do not have the CAMERA permission");    }    if (ctxt instanceof VideoRecorderActivity) {      if (ctxt.checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {        throw new IllegalStateException("We do not have the RECORD_AUDIO permission");      }    }  }}  }
class C{  public List<JCExpression> Types(List<Type> ts){  ListBuffer<JCExpression> lb=new ListBuffer<JCExpression>();  for (List<Type> l=ts; l.nonEmpty(); l=l.tail)   lb.append(Type(l.head));  return lb.toList();}  }
class C{  public void removeListener(ConfigListener listener){synchronized (this.listeners) {    this.listeners.remove(listener);  }}  }
class C{  public void writeMetadata(OutputStream out) throws IOException {  Metadata metadata=new Metadata();  WebMercatorGridPointSet ps=network.getGridPointSet();  metadata.zoom=ps.zoom;  metadata.north=ps.north;  metadata.west=ps.west;  metadata.width=ps.width;  metadata.height=ps.height;  metadata.transportNetwork=request.transportNetworkId;  metadata.transitiveData=new TransitiveNetwork(network.transitLayer);  metadata.request=request.request;  JsonUtilities.objectMapper.writeValue(out,metadata);}  }
class C{  public void start(String messageHeader) throws IOException {  dos.write(messageHeader.getBytes());}  }
class C{  private static int checkTypeVariableSignature(final String signature,int pos){  pos=checkChar('T',signature,pos);  pos=checkIdentifier(signature,pos);  return checkChar(';',signature,pos);}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public void addFeature(int idx,float value){  idxList.add(idx);  valList.add(value);}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  buf[bufOff++]=in;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  return resultLen;}  }
class C{  public void testNumbers() throws Exception {  assertAnalyzesTo(analyzer,"1234",new String[]{"1234"},new int[]{0},new int[]{4},new int[]{1});}  }
class C{  public static Builder builder(){  return new Builder(new LeaveRequest());}  }
class C{  public static boolean deoDexApkLegacy(File odexFile,File classesFile){  classesFile.getParentFile().mkdirs();  File tempSmali=new File(odexFile.getParentFile().getAbsolutePath() + File.separator + odexFile.getName().substring(0,odexFile.getName().lastIndexOf(".odex")));  tempSmali.getParentFile().mkdirs();  String[] cmd={"java",Cfg.getMaxHeadSizeArg(),"-jar",S.getBaksmali(),"-a","" + SessionCfg.getSdk(),"-d",S.getBootTmpDex().getAbsolutePath(),"-x",odexFile.getAbsolutePath(),"-o",tempSmali.getAbsolutePath()};  String[] cmd2={"java",Cfg.getMaxHeadSizeArg(),"-jar",S.getSmali(),"-a","" + SessionCfg.getSdk(),"-o",classesFile.getAbsolutePath(),tempSmali.getAbsolutePath()};  CmdUtils.runCommand(cmd);  CmdUtils.runCommand(cmd2);  FilesUtils.deleteRecursively(tempSmali);  return classesFile.exists();}  }
class C{  public boolean hasType(int type){  return types.contains(type);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void actionPerformed(ActionEvent e){  super.actionPerformed(e);  String command=e.getActionCommand();  if (command == RedrawCmd) {    if (isVisible()) {      doPrepare();    }  }}  }
class C{  public static List<String[]> parseTextRaw(String text){  text=normalizeText(text);  ArrayList<String> sentences1=new ArrayList<>();  if (ParametersForLbjCode.currentParameters.forceNewSentenceOnLineBreaks || ParametersForLbjCode.currentParameters.keepOriginalFileTokenizationAndSentenceSplitting) {    StringTokenizer st=new StringTokenizer(text,"\n");    while (st.hasMoreTokens())     sentences1.add(st.nextToken());  } else   sentences1.add(text);  ArrayList<String> sentences2=new ArrayList<>();  if (!ParametersForLbjCode.currentParameters.keepOriginalFileTokenizationAndSentenceSplitting) {    for (    String aSentences1 : sentences1) {      SentenceSplitter parser=new SentenceSplitter(new String[]{aSentences1});      Sentence s=(Sentence)parser.next();      while (s != null) {        sentences2.add(s.text);        s=(Sentence)parser.next();      }    }  } else   sentences2=sentences1;  ArrayList<String[]> res=new ArrayList<>();  for (  String sentenceText : sentences2) {    if (sentenceText.length() > 0) {      if (sentenceText.charAt(sentenceText.length() - 1) == '.' && !ParametersForLbjCode.currentParameters.keepOriginalFileTokenizationAndSentenceSplitting)       sentenceText=sentenceText.substring(0,sentenceText.length() - 1) + " . ";      String[] sentence=sentenceText.split("[ \\n\\t]");      if (sentence.length > 0) {        if ((!ParametersForLbjCode.currentParameters.keepOriginalFileTokenizationAndSentenceSplitting) && sentence.length == 1 && res.size() > 0 && (sentence[0].equals("\"") || sentence[0].equals("''") || sentence[0].equals("'"))) {          int where=res.size() - 1;          String[] tmp=res.remove(where);          if (tmp == null) {            tmp=new String[0];          }          int len=tmp.length;          String[] newtmp=new String[len + 1];          System.arraycopy(tmp,0,newtmp,0,len);          newtmp[len]=sentence[0];          res.add(newtmp);        } else         res.add(sentence);      }    }  }  return res;}  }
class C{  public StyledArrowButton(int orientation,Style style){  super(orientation,style.getForeground(),style.getForeground(),style.getForeground(),style.getForeground());}  }
class C{  protected static byte[] encodeString(String string){  byte[] encoded=null;  if (encoded == null) {    ByteBuffer buf=AMF.CHARSET.encode(string);    encoded=new byte[buf.limit()];    buf.get(encoded);  }  return encoded;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm buscarTasasForm=(DynaValidatorForm)form;  List oLista=null;  List oLista2=null;  try {    oLista=PagoElectronicoManagerHelper.buscarAutoliquidaciones(request,buscarTasasForm);    oLista2=PagoElectronicoManagerHelper.obtenerListaAutoliquidacionesNIF(request,buscarTasasForm,UserCertificateUtil.getUserData(request));  } catch (  SigemException e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(LISTA_TASAS_KEY,oLista);  request.setAttribute(LIQUIDACIONES_KEY,oLista2);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  private void drawNoxItem(Canvas canvas,int position,float left,float top){  if (noxItemCatalog.isBitmapReady(position)) {    Bitmap bitmap=noxItemCatalog.getBitmap(position);    canvas.drawBitmap(bitmap,left,top,paint);  } else   if (noxItemCatalog.isDrawableReady(position)) {    Drawable drawable=noxItemCatalog.getDrawable(position);    drawNoxItemDrawable(canvas,(int)left,(int)top,drawable);  } else   if (noxItemCatalog.isPlaceholderReady(position)) {    Drawable drawable=noxItemCatalog.getPlaceholder(position);    drawNoxItemDrawable(canvas,(int)left,(int)top,drawable);  }}  }
class C{  public static void d(String msg){  if (null == msg || null == sXLogConfig) {    return;  }  if (allowConsoleLogPrint(LogLevel.D)) {    Log.d(getDefaultTag(),msg);  }  if (allowFileLogPrint(LogLevel.D)) {    FileLogHelper.getInstance().logToFile(msg,null,getDefaultTag(),LogLevel.D);  }}  }
class C{  public InternalStatisticsDisabledException(){}  }
class C{  @Override public void finalizeImage(Image image) throws InternalException {  logger.info("Calling finalizeImage {} on {} {}",image.getImageId(),this.getDatastore(),image.getUploadFolder());  try {    getHostClient().finalizeImage(image.getImageId(),this.getDatastore(),image.getUploadFolder());  } catch (  RpcException|InterruptedException e) {    String errorMsg=String.format("Failed to call HostClient finalize_image %s on %s %s",image.getImageId(),this.getDatastore(),image.getUploadFolder());    throw new InternalException(errorMsg,e);  }}  }
class C{  static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  private void closeDatabase(String dbname,CallbackContext cbc){  DBRunner r=dbrmap.get(dbname);  if (r != null) {    try {      r.q.put(new DBQuery(false,cbc));    } catch (    Exception e) {      if (cbc != null) {        cbc.error("couldn't close database" + e);      }      Log.e(LOG_TAG,"couldn't close database",e);    }  } else {    if (cbc != null) {      cbc.success("couldn't close database");    }  }}  }
class C{  public void overwriteCRS(CoordinateReferenceSystem crs){  this.crs=crs;  this.srid=CRSUtils.getSRID(crs);  for (  Zone<?> zone : zones) {    zone.getGeometry().setSRID(srid);  }}  }
class C{  private boolean hasPasswordTransformationMethod(){  return getTransformationMethod() != null && getTransformationMethod() instanceof PasswordTransformationMethod;}  }
class C{  public static boolean PM(int packedTime){  return packedTime >= NOON;}  }
class C{  public void close(){  if (multicastSocket != null) {    try {      multicastSocket.leaveGroup(multicastGroup,networkInterface);    } catch (    IOException e) {      e.printStackTrace();    }    multicastSocket.close();  }  if (datagramSocket != null) {    datagramSocket.disconnect();    datagramSocket.close();  }}  }
class C{  public static void openUri(Uri uri,Context context){  Intent intent=getIntentOfUri(uri);  context.startActivity(intent);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.ARGUMENT_DEFINITION__TYPE:    setType((Expression)null);  return;case GamlPackage.ARGUMENT_DEFINITION__DEFAULT:setDefault((Expression)null);return;}super.eUnset(featureID);}  }
class C{  @Override protected int computeHorizontalScrollRange(){  return mItemCount;}  }
class C{  static public void writeAttribute(Writer out,char[] buff,String text) throws IOException {  int buffLength=buff.length;  int buffIndex=0;  int length=text.length();  for (int i=0; i < length; i++) {    char ch=text.charAt(i);    if (ch < 0xA0) {      if (ch >= 0x3f) {        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);      } else       if (ch >= 0x27) {        if (ch < 0x3c) {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        } else         if (ch == '>') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&gt;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      } else {        if (ch == '&') {          buffIndex=flushBuffer(out,buff,buffIndex);          if ((i + 1 < length) && (text.charAt(i + 1) == '{')) {            out.write(ch);          } else {            out.write("&amp;");          }        } else         if (ch == '"') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&quot;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      }    } else {      buffIndex=flushBuffer(out,buff,buffIndex);      _writeDecRef(out,ch);    }  }  flushBuffer(out,buff,buffIndex);}  }
class C{  public void testStatementGetString(Connection connection) throws SQLException {  try (Statement statement=connection.createStatement()){    try (ResultSet resultSet=statement.executeQuery(sql)){      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00.000000",resultSet.getString(2));      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00.123000",resultSet.getString(2));      Assert.assertTrue(resultSet.next());      Assert.assertNull(resultSet.getString(2));      Assert.assertFalse(resultSet.next());    }   } }  }
class C{  public CouplingMenuConsumer(final String menuName,final Workspace workspace,final PotentialConsumer consumer){  super(menuName);  this.workspace=workspace;  this.consumer=consumer;  updateMenu();}  }
class C{  public static void makeBooleanMatrixFile(boolean matrix[][],String outputFileName) throws IOException {  int rowSize=matrix.length;  int colSize=matrix[0].length;  createDirectories(outputFileName);  BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));  for (int i=0; i < rowSize; i++) {    for (int j=0; j < colSize; j++) {      if (matrix[i][j] == false) {        out.write("0\t");      } else {        out.write("1\t");      }      if (j == colSize - 1) {        out.write("\n");      }    }  }  out.close();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.PATTERN_CHARACTER__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void onGeofenceResume(int geofenceId,int status){}  }
class C{  private static void dump(Attributes attrs){  if (attrs == null) {    System.out.println("No attributes");  } else {    try {      for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMore(); ) {        Attribute attr=ae.next();        System.out.println("attribute: " + attr.getID());        for (NamingEnumeration<?> e=attr.getAll(); e.hasMore(); System.out.println("    value: " + e.next()))         ;      }    } catch (    NamingException e) {      e.printStackTrace();    }  }}  }
class C{  protected void fadeCrosshairs(){  if (this.crosshairsActive) {    this.crosshairsActive=false;    if (!this.animatorSet.isStarted()) {      this.animatorSet.start();    }  }}  }
class C{  @Override public String toString(){  return a + "[" + start+ ","+ end+ "]";}  }
class C{  public synchronized void close(){  if (isAlive) {    isAlive=false;    taskQueue.clear();    interrupt();  }}  }
class C{  @RequestMapping(value="/SAML2/SSO",method={RequestMethod.GET,RequestMethod.POST}) public void ssoDefaultTenant(Locale locale,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to SP-initiated AuthnRequest handler! " + "The client locale is " + locale.toString() + ", DEFAULT tenant");  sso(locale,Shared.getDefaultTenant(),model,request,response);}  }
class C{  public void preFilterGaeKinds(Query query) throws IllegalArgumentException {  if (!canPreFilterGaeKinds(query)) {    throw new IllegalArgumentException("Cannot pre-filter kinds. Query already contains an inequality filter");  }  FilterPredicate filter;  if (Entities.KIND_METADATA_KIND.equals(query.getKind())) {    filter=new FilterPredicate(Entity.KEY_RESERVED_PROPERTY,LESS_THAN,Entities.createKindKey(ENTITY_PREFIX));  } else {    filter=new FilterPredicate(Entity.KEY_RESERVED_PROPERTY,LESS_THAN,KeyFactory.createKey(ENTITY_PREFIX,1L));  }  List<Query.Filter> filters=Lists.<Query.Filter>newArrayList(filter);  if (query.getFilter() != null) {    filters.add(query.getFilter());    query.setFilter(Query.CompositeFilterOperator.and(filters));  } else {    query.setFilter(filter);  }}  }
class C{  public Observable<BarcodeSearchResult> searchByBarcode(String barcode){  return routes.searchByBarcode(KEY,barcode.trim()).flatMapIterable(null);}  }
class C{  private static String computeCameraIdFromLegacyId(int camera1Id){  return String.valueOf(camera1Id);}  }
class C{  public static String checkNull(String string1){  if (string1 != null)   return string1; else   return "";}  }
class C{  public static Typeface robotoItalic(Context context){  sRobotoItalic=getFontFromRes(R.raw.roboto_italic,context);  return sRobotoItalic;}  }
class C{  public ServiceParameterException(String message){  super(message);}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public ChangePreviewViewerInput(Change change){  Assert.isNotNull(change);  fChange=change;}  }
class C{  private void checkChartSettings(){  boolean needUpdate=false;  if (chartByDistance != PreferencesUtils.isChartByDistance(getActivity())) {    chartByDistance=!chartByDistance;    chartView.setChartByDistance(chartByDistance);    reloadTrackDataHub();    needUpdate=true;  }  if (setSeriesEnabled(ChartView.ELEVATION_SERIES,PreferencesUtils.getBoolean(getActivity(),R.string.chart_show_elevation_key,PreferencesUtils.CHART_SHOW_ELEVATION_DEFAULT))) {    needUpdate=true;  }  boolean chartShowSpeed=PreferencesUtils.getBoolean(getActivity(),R.string.chart_show_speed_key,PreferencesUtils.CHART_SHOW_SPEED_DEFAULT);  if (setSeriesEnabled(ChartView.SPEED_SERIES,chartShowSpeed && reportSpeed)) {    needUpdate=true;  }  if (setSeriesEnabled(ChartView.PACE_SERIES,chartShowSpeed && !reportSpeed)) {    needUpdate=true;  }  if (setSeriesEnabled(ChartView.POWER_SERIES,PreferencesUtils.getBoolean(getActivity(),R.string.chart_show_power_key,PreferencesUtils.CHART_SHOW_POWER_DEFAULT))) {    needUpdate=true;  }  if (setSeriesEnabled(ChartView.CADENCE_SERIES,PreferencesUtils.getBoolean(getActivity(),R.string.chart_show_cadence_key,PreferencesUtils.CHART_SHOW_CADENCE_DEFAULT))) {    needUpdate=true;  }  if (setSeriesEnabled(ChartView.HEART_RATE_SERIES,PreferencesUtils.getBoolean(getActivity(),R.string.chart_show_heart_rate_key,PreferencesUtils.CHART_SHOW_HEART_RATE_DEFAULT))) {    needUpdate=true;  }  if (needUpdate) {    chartView.postInvalidate();  }}  }
class C{  public Model createModel(){  ModelImpl model=new ModelImpl();  return model;}  }
class C{  public void forEach(Allocation aout){  forEach(0,null,aout,null);}  }
class C{  public void testAddressInvalidFormat() throws Exception {  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:"),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:0"),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:-1"),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:111111"),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9999.."),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9999..9998"),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:a"),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:a.."),false);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:a..b"),false);  check(new OdbcConfiguration().setEndpointAddress(":9999"),false);  check(new OdbcConfiguration().setEndpointAddress(":9999..10000"),false);}  }
class C{  public JSONArray(){  super();}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=getWhereClause();  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_Product " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.info("Delete Old Imported =" + no);  }  sql=new StringBuffer("UPDATE I_Product " + "SET AD_Client_ID = COALESCE (AD_Client_ID, ").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID, 0)," + " IsActive = COALESCE (IsActive, 'Y'),"+ " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " ProductType = COALESCE (ProductType, 'I'),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  ModelValidationEngine.get().fireImportValidate(this,null,null,ImportValidator.TIMING_BEFORE_VALIDATE);  sql=new StringBuffer("UPDATE I_Product i " + "SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p" + " WHERE i.BPartner_Value=p.Value AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("BPartner=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid BPartner,' " + "WHERE C_BPartner_ID IS NULL AND BPartner_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid BPartner=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET M_Product_ID=(SELECT M_Product_ID FROM M_Product p" + " WHERE i.UPC=p.UPC AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Product Existing UPC=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET M_Product_ID=(SELECT M_Product_ID FROM M_Product p" + " WHERE i.Value=p.Value AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Product Existing Value=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET M_Product_ID=(SELECT M_Product_ID FROM M_Product_po p" + " WHERE i.C_BPartner_ID=p.C_BPartner_ID"+ " AND i.VendorProductNo=p.VendorProductNo AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Product Existing Vendor ProductNo=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET ProductCategory_Value=(SELECT MAX(Value) FROM M_Product_Category" + " WHERE IsDefault='Y' AND AD_Client_ID=").append(m_AD_Client_ID).append(") " + "WHERE ProductCategory_Value IS NULL AND M_Product_Category_ID IS NULL" + " AND M_Product_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Category Default Value=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET M_Product_Category_ID=(SELECT M_Product_Category_ID FROM M_Product_Category c" + " WHERE i.ProductCategory_Value=c.Value AND i.AD_Client_ID=c.AD_Client_ID) "+ "WHERE ProductCategory_Value IS NOT NULL AND M_Product_Category_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Set Category=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET ProductClass_Value=(SELECT MAX(Value) FROM M_Product_Class" + " WHERE IsDefault='Y' AND AD_Client_ID=").append(m_AD_Client_ID).append(") " + "WHERE ProductClass_Value IS NULL AND M_Product_Class_ID IS NULL" + " AND M_Product_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Class Default Value=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET M_Product_Class_ID=(SELECT M_Product_Class_ID FROM M_Product_Class c" + " WHERE i.ProductClass_Value=c.Value AND i.AD_Client_ID=c.AD_Client_ID) "+ "WHERE ProductClass_Value IS NOT NULL AND M_Product_Class_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Set Class=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET ProductClassification_Value=(SELECT MAX(Value) FROM M_Product_Classification" + " WHERE IsDefault='Y' AND AD_Client_ID=").append(m_AD_Client_ID).append(") " + "WHERE ProductClassification_Value IS NULL AND M_Product_Classification_ID IS NULL" + " AND M_Product_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Classification Default Value=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET M_Product_Classification_ID=(SELECT M_Product_Classification_ID FROM M_Product_Classification c" + " WHERE i.ProductClassification_Value=c.Value AND i.AD_Client_ID=c.AD_Client_ID) "+ "WHERE ProductClassification_Value IS NOT NULL AND M_Product_Classification_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Set Classification=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET ProductGroup_Value=(SELECT MAX(Value) FROM M_Product_Group" + " WHERE IsDefault='Y' AND AD_Client_ID=").append(m_AD_Client_ID).append(") " + "WHERE ProductGroup_Value IS NULL AND M_Product_Group_ID IS NULL" + " AND M_Product_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Group Default Value=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET M_Product_Group_ID=(SELECT M_Product_Group_ID FROM M_Product_Group c" + " WHERE i.ProductGroup_Value=c.Value AND i.AD_Client_ID=c.AD_Client_ID) "+ "WHERE ProductGroup_Value IS NOT NULL AND M_Product_Group_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Set Group=" + no);  String[] strFields=new String[]{"Value","Name","Description","DocumentNote","Help","UPC","SKU","Classification","ProductType","Discontinued","DiscontinuedBy","DiscontinuedAt","ImageURL","DescriptionURL"};  for (int i=0; i < strFields.length; i++) {    sql=new StringBuffer("UPDATE I_Product i " + "SET ").append(strFields[i]).append(" = (SELECT ").append(strFields[i]).append(" FROM M_Product p" + " WHERE i.M_Product_ID=p.M_Product_ID AND i.AD_Client_ID=p.AD_Client_ID) " + "WHERE M_Product_ID IS NOT NULL"+ " AND ").append(strFields[i]).append(" IS NULL" + " AND I_IsImported='N'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    if (no != 0)     log.fine(strFields[i] + " - default from existing Product=" + no);  }  String[] numFields=new String[]{"C_UOM_ID","M_Product_Category_ID","M_Product_Class_ID","M_Product_Classification_ID","M_Product_Group_ID","Volume","Weight","ShelfWidth","ShelfHeight","ShelfDepth","UnitsPerPallet"};  for (int i=0; i < numFields.length; i++) {    sql=new StringBuffer("UPDATE I_PRODUCT i " + "SET ").append(numFields[i]).append(" = (SELECT ").append(numFields[i]).append(" FROM M_Product p" + " WHERE i.M_Product_ID=p.M_Product_ID AND i.AD_Client_ID=p.AD_Client_ID) " + "WHERE M_Product_ID IS NOT NULL"+ " AND (").append(numFields[i]).append(" IS NULL OR ").append(numFields[i]).append("=0)" + " AND I_IsImported='N'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    if (no != 0)     log.fine(numFields[i] + " default from existing Product=" + no);  }  String[] strFieldsPO=new String[]{"UPC","PriceEffective","VendorProductNo","VendorCategory","Manufacturer","Discontinued","DiscontinuedBy","DiscontinuedAt"};  for (int i=0; i < strFieldsPO.length; i++) {    sql=new StringBuffer("UPDATE I_PRODUCT i " + "SET ").append(strFieldsPO[i]).append(" = (SELECT ").append(strFieldsPO[i]).append(" FROM M_Product_PO p" + " WHERE i.M_Product_ID=p.M_Product_ID AND i.C_BPartner_ID=p.C_BPartner_ID AND i.AD_Client_ID=p.AD_Client_ID) " + "WHERE M_Product_ID IS NOT NULL AND C_BPartner_ID IS NOT NULL"+ " AND ").append(strFieldsPO[i]).append(" IS NULL" + " AND I_IsImported='N'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    if (no != 0)     log.fine(strFieldsPO[i] + " default from existing Product PO=" + no);  }  String[] numFieldsPO=new String[]{"C_UOM_ID","C_Currency_ID","PriceList","PricePO","RoyaltyAmt","Order_Min","Order_Pack","CostPerOrder","DeliveryTime_Promised"};  for (int i=0; i < numFieldsPO.length; i++) {    sql=new StringBuffer("UPDATE I_PRODUCT i " + "SET ").append(numFieldsPO[i]).append(" = (SELECT ").append(numFieldsPO[i]).append(" FROM M_Product_PO p" + " WHERE i.M_Product_ID=p.M_Product_ID AND i.C_BPartner_ID=p.C_BPartner_ID AND i.AD_Client_ID=p.AD_Client_ID) " + "WHERE M_Product_ID IS NOT NULL AND C_BPartner_ID IS NOT NULL"+ " AND (").append(numFieldsPO[i]).append(" IS NULL OR ").append(numFieldsPO[i]).append("=0)" + " AND I_IsImported='N'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    if (no != 0)     log.fine(numFieldsPO[i] + " default from existing Product PO=" + no);  }  sql=new StringBuffer("UPDATE I_Product " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid ProdCategory,' " + "WHERE M_Product_Category_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Category=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET X12DE355 = " + "(SELECT MAX(X12DE355) FROM C_UOM u WHERE u.IsDefault='Y' AND u.AD_Client_ID IN (0,i.AD_Client_ID)) "+ "WHERE X12DE355 IS NULL AND C_UOM_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set UOM Default=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET C_UOM_ID = (SELECT C_UOM_ID FROM C_UOM u WHERE u.X12DE355=i.X12DE355 AND u.AD_Client_ID IN (0,i.AD_Client_ID)) " + "WHERE C_UOM_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Set UOM=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid UOM, ' " + "WHERE C_UOM_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid UOM=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET ISO_Code=(SELECT ISO_Code FROM C_Currency c" + " INNER JOIN C_AcctSchema a ON (a.C_Currency_ID=c.C_Currency_ID)"+ " INNER JOIN AD_ClientInfo ci ON (a.C_AcctSchema_ID=ci.C_AcctSchema1_ID)"+ " WHERE ci.AD_Client_ID=i.AD_Client_ID) "+ "WHERE C_Currency_ID IS NULL AND ISO_Code IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Currency Default=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET C_Currency_ID=(SELECT C_Currency_ID FROM C_Currency c" + " WHERE i.ISO_Code=c.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID)) "+ "WHERE C_Currency_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("doIt- Set Currency=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Currency,' " + "WHERE C_Currency_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Currency=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid ProductType,' " + "WHERE ProductType NOT IN ('E','I','R','S')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid ProductType=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Value not unique,' " + "WHERE I_IsImported<>'Y'"+ " AND Value IN (SELECT Value FROM I_Product ii WHERE i.AD_Client_ID=ii.AD_Client_ID GROUP BY Value HAVING COUNT(*) > 1)").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Not Unique Value=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=UPC not unique,' " + "WHERE I_IsImported<>'Y'"+ " AND UPC IN (SELECT UPC FROM I_Product ii WHERE i.AD_Client_ID=ii.AD_Client_ID GROUP BY UPC HAVING COUNT(*) > 1)").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Not Unique UPC=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Mandatory Value,' " + "WHERE Value IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory Value=" + no);  sql=new StringBuffer("UPDATE I_Product " + "SET VendorProductNo=Value " + "WHERE C_BPartner_ID IS NOT NULL AND VendorProductNo IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("VendorProductNo Set to Value=" + no);  sql=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=VendorProductNo not unique,' " + "WHERE I_IsImported<>'Y'"+ " AND C_BPartner_ID IS NOT NULL"+ " AND (C_BPartner_ID, VendorProductNo) IN "+ " (SELECT C_BPartner_ID, VendorProductNo FROM I_Product ii WHERE i.AD_Client_ID=ii.AD_Client_ID GROUP BY C_BPartner_ID, VendorProductNo HAVING COUNT(*) > 1)").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Not Unique VendorProductNo=" + no);  int C_TaxCategory_ID=0;  try {    PreparedStatement pstmt=DB.prepareStatement("SELECT C_TaxCategory_ID FROM C_TaxCategory WHERE IsDefault='Y'" + clientCheck,get_TrxName());    ResultSet rs=pstmt.executeQuery();    if (rs.next())     C_TaxCategory_ID=rs.getInt(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    throw new Exception("TaxCategory",e);  }  log.fine("C_TaxCategory_ID=" + C_TaxCategory_ID);  ModelValidationEngine.get().fireImportValidate(this,null,null,ImportValidator.TIMING_AFTER_VALIDATE);  commitEx();  int noInsert=0;  int noUpdate=0;  int noInsertPO=0;  int noUpdatePO=0;  log.fine("start inserting/updating ...");  sql=new StringBuffer("SELECT * FROM I_Product WHERE I_IsImported='N'").append(clientCheck);  try {    PreparedStatement pstmt_insertProductPO=DB.prepareStatement("INSERT INTO M_Product_PO (M_Product_ID,C_BPartner_ID, " + "AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy," + "IsCurrentVendor,C_UOM_ID,C_Currency_ID,UPC,"+ "PriceList,PricePO,RoyaltyAmt,PriceEffective,"+ "VendorProductNo,VendorCategory,Manufacturer,"+ "Discontinued,DiscontinuedBy, DiscontinuedAt, Order_Min,Order_Pack,"+ "CostPerOrder,DeliveryTime_Promised) "+ "SELECT ?,?, "+ "AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,"+ "'Y',C_UOM_ID,C_Currency_ID,UPC,"+ "PriceList,PricePO,RoyaltyAmt,PriceEffective,"+ "VendorProductNo,VendorCategory,Manufacturer,"+ "Discontinued,DiscontinuedBy, DiscontinuedAt, Order_Min,Order_Pack,"+ "CostPerOrder,DeliveryTime_Promised "+ "FROM I_Product "+ "WHERE I_Product_ID=?",get_TrxName());    PreparedStatement pstmt_setImported=DB.prepareStatement("UPDATE I_Product SET I_IsImported='Y', M_Product_ID=?, " + "Updated=SysDate, Processed='Y' WHERE I_Product_ID=?",get_TrxName());    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      X_I_Product imp=new X_I_Product(getCtx(),rs,get_TrxName());      int I_Product_ID=imp.getI_Product_ID();      int M_Product_ID=imp.getM_Product_ID();      int C_BPartner_ID=imp.getC_BPartner_ID();      boolean newProduct=M_Product_ID == 0;      log.fine("I_Product_ID=" + I_Product_ID + ", M_Product_ID="+ M_Product_ID+ ", C_BPartner_ID="+ C_BPartner_ID);      Boolean saveNeeded=false;      if (imp.getM_Product_Class_ID() == 0 && imp.getProductClass_Value() != null && !imp.getProductClass_Value().isEmpty()) {        String value=imp.getProductClass_Value();        String whereClause="VALUE= '" + value + "'";        X_M_Product_Class pClass=MTable.get(getCtx(),X_M_Product_Class.Table_ID).createQuery(whereClause,get_TrxName()).setOnlyActiveRecords(true).setClient_ID().first();        if (pClass == null) {          pClass=new X_M_Product_Class(getCtx(),0,get_TrxName());          pClass.setValue(imp.getProductClass_Value());          pClass.setName(imp.getProductClass_Value());          pClass.setIsActive(true);          pClass.setIsDefault(false);          pClass.saveEx();        }        imp.setM_Product_Class_ID(pClass.getM_Product_Class_ID());        pClass=null;        saveNeeded=true;      }      if (imp.getM_Product_Classification_ID() == 0 && imp.getProductClassification_Value() != null && !imp.getProductClassification_Value().isEmpty()) {        String value=imp.getProductClassification_Value();        String whereClause="VALUE= '" + value + "'";        X_M_Product_Classification pClassification=MTable.get(getCtx(),X_M_Product_Classification.Table_ID).createQuery(whereClause,get_TrxName()).setOnlyActiveRecords(true).setClient_ID().first();        if (pClassification == null) {          pClassification=new X_M_Product_Classification(getCtx(),0,get_TrxName());          pClassification.setValue(imp.getProductClassification_Value());          pClassification.setName(imp.getProductClassification_Value());          pClassification.setIsActive(true);          pClassification.setIsDefault(false);          pClassification.saveEx();        }        imp.setM_Product_Classification_ID(pClassification.getM_Product_Classification_ID());        pClassification=null;        saveNeeded=true;      }      if (imp.getM_Product_Group_ID() == 0 && imp.getProductGroup_Value() != null && !imp.getProductGroup_Value().isEmpty()) {        String value=imp.getProductGroup_Value();        String whereClause="VALUE= '" + value + "'";        X_M_Product_Group pGroup=MTable.get(getCtx(),X_M_Product_Group.Table_ID).createQuery(whereClause,get_TrxName()).setOnlyActiveRecords(true).setClient_ID().first();        if (pGroup == null) {          pGroup=new X_M_Product_Group(getCtx(),0,get_TrxName());          pGroup.setValue(imp.getProductGroup_Value());          pGroup.setName(imp.getProductGroup_Value());          pGroup.setIsActive(true);          pGroup.setIsDefault(false);          pGroup.saveEx();        }        imp.setM_Product_Group_ID(pGroup.getM_Product_Group_ID());        pGroup=null;        saveNeeded=true;      }      if (saveNeeded)       imp.saveEx();      if (newProduct) {        MProduct product=new MProduct(imp);        product.setC_TaxCategory_ID(C_TaxCategory_ID);        ModelValidationEngine.get().fireImportValidate(this,imp,product,ImportValidator.TIMING_AFTER_IMPORT);        if (product.save()) {          M_Product_ID=product.getM_Product_ID();          log.finer("Insert Product");          noInsert++;        } else {          StringBuffer sql0=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert Product failed")).append("WHERE I_Product_ID=").append(I_Product_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }      } else {        String sqlt="UPDATE M_PRODUCT " + "SET (Value,Name,Description,DocumentNote,Help," + "UPC,SKU,C_UOM_ID,M_Product_Category_ID,Classification,ProductType,"+ "M_Product_Class_ID, M_Product_Classification_ID, M_Product_Group_ID,"+ "Volume,Weight,ShelfWidth,ShelfHeight,ShelfDepth,UnitsPerPallet,"+ "Discontinued,DiscontinuedBy, DiscontinuedAt, Updated,UpdatedBy)= "+ "(SELECT Value,Name,Description,DocumentNote,Help,"+ "UPC,SKU,C_UOM_ID,M_Product_Category_ID,Classification,ProductType,"+ "M_Product_Class_ID, M_Product_Classification_ID, M_Product_Group_ID,"+ "Volume,Weight,ShelfWidth,ShelfHeight,ShelfDepth,UnitsPerPallet,"+ "Discontinued,DiscontinuedBy, DiscontinuedAt, SysDate,UpdatedBy"+ " FROM I_Product WHERE I_Product_ID=" + I_Product_ID + ") "+ "WHERE M_Product_ID="+ M_Product_ID;        PreparedStatement pstmt_updateProduct=DB.prepareStatement(sqlt,get_TrxName());        try {          no=pstmt_updateProduct.executeUpdate();          log.finer("Update Product = " + no);          noUpdate++;        } catch (        SQLException ex) {          log.warning("Update Product - " + ex.toString());          StringBuffer sql0=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Update Product: " + ex.toString())).append("WHERE I_Product_ID=").append(I_Product_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }        pstmt_updateProduct.close();      }      if (C_BPartner_ID != 0) {        no=0;        if (!newProduct) {          String sqlt="UPDATE M_Product_PO " + "SET (IsCurrentVendor,C_UOM_ID,C_Currency_ID,UPC," + "PriceList,PricePO,RoyaltyAmt,PriceEffective,"+ "VendorProductNo,VendorCategory,Manufacturer,"+ "Discontinued,DiscontinuedBy, DiscontinuedAt, Order_Min,Order_Pack,"+ "CostPerOrder,DeliveryTime_Promised,Updated,UpdatedBy)= "+ "(SELECT CAST('Y' AS CHAR),C_UOM_ID,C_Currency_ID,UPC,"+ "PriceList,PricePO,RoyaltyAmt,PriceEffective,"+ "VendorProductNo,VendorCategory,Manufacturer,"+ "Discontinued,DiscontinuedBy, DiscontinuedAt, Order_Min,Order_Pack,"+ "CostPerOrder,DeliveryTime_Promised,SysDate,UpdatedBy"+ " FROM I_Product"+ " WHERE I_Product_ID=" + I_Product_ID + ") "+ "WHERE M_Product_ID="+ M_Product_ID+ " AND C_BPartner_ID="+ C_BPartner_ID;          PreparedStatement pstmt_updateProductPO=DB.prepareStatement(sqlt,get_TrxName());          try {            no=pstmt_updateProductPO.executeUpdate();            log.finer("Update Product_PO = " + no);            noUpdatePO++;          } catch (          SQLException ex) {            log.warning("Update Product_PO - " + ex.toString());            noUpdate--;            rollback();            StringBuffer sql0=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Update Product_PO: " + ex.toString())).append("WHERE I_Product_ID=").append(I_Product_ID);            DB.executeUpdate(sql0.toString(),get_TrxName());            continue;          }          pstmt_updateProductPO.close();        }        if (no == 0) {          pstmt_insertProductPO.setInt(1,M_Product_ID);          pstmt_insertProductPO.setInt(2,C_BPartner_ID);          pstmt_insertProductPO.setInt(3,I_Product_ID);          try {            no=pstmt_insertProductPO.executeUpdate();            log.finer("Insert Product_PO = " + no);            noInsertPO++;          } catch (          SQLException ex) {            log.warning("Insert Product_PO - " + ex.toString());            noInsert--;            rollback();            StringBuffer sql0=new StringBuffer("UPDATE I_Product i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert Product_PO: " + ex.toString())).append("WHERE I_Product_ID=").append(I_Product_ID);            DB.executeUpdate(sql0.toString(),get_TrxName());            continue;          }        }      }      if (p_M_PriceList_Version_ID != 0) {        BigDecimal PriceList=imp.getPriceList();        BigDecimal PriceStd=imp.getPriceStd();        BigDecimal PriceLimit=imp.getPriceLimit();        if (PriceStd.signum() != 0 || PriceLimit.signum() != 0 || PriceList.signum() != 0) {          MProductPrice pp=MProductPrice.get(getCtx(),p_M_PriceList_Version_ID,M_Product_ID,get_TrxName());          if (pp == null)           pp=new MProductPrice(getCtx(),p_M_PriceList_Version_ID,M_Product_ID,get_TrxName());          pp.setPrices(PriceList,PriceStd,PriceLimit);          ModelValidationEngine.get().fireImportValidate(this,imp,pp,ImportValidator.TIMING_AFTER_IMPORT);          pp.saveEx();        }      }      pstmt_setImported.setInt(1,M_Product_ID);      pstmt_setImported.setInt(2,I_Product_ID);      no=pstmt_setImported.executeUpdate();      commitEx();    }    rs.close();    pstmt.close();    pstmt_insertProductPO.close();    pstmt_setImported.close();  } catch (  SQLException e) {  }  sql=new StringBuffer("UPDATE I_Product " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@M_Product_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noUpdate),"@M_Product_ID@: @Updated@");  addLog(0,null,new BigDecimal(noInsertPO),"@M_Product_ID@ @Purchase@: @Inserted@");  addLog(0,null,new BigDecimal(noUpdatePO),"@M_Product_ID@ @Purchase@: @Updated@");  return "";}  }
class C{  public static ByteBuffer createByteBuffer(int elements){  return ByteBuffer.allocateDirect(elements);}  }
class C{  public void removeAllHighlights(){  if (decorators == null) {    return;  }  removeAllHighlights(true);}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject){  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public NotificationChain basicSetProjectDependencies(ProjectDependencies newProjectDependencies,NotificationChain msgs){  ProjectDependencies oldProjectDependencies=projectDependencies;  projectDependencies=newProjectDependencies;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__PROJECT_DEPENDENCIES,oldProjectDependencies,newProjectDependencies);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.718 -0500",hash_original_method="2C162FFAD344A5CDEA9F9F6270AC8B9D",hash_generated_method="7008F5653BFCECB85C70EC2FACC5F89A") public static void register(){  DdmServer.registerHandler(CHUNK_EXIT,mInstance);}  }
class C{  @Override final public boolean isKeyCoder(){  return false;}  }
class C{  protected Node remove(String ns,String nm){  int hash=hashCode(ns,nm) & 0x7FFFFFFF;  int index=hash % table.length;  Entry p=null;  for (Entry e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.match(ns,nm)) {      Node result=e.value;      if (p == null) {        table[index]=e.next;      } else {        p.next=e.next;      }      count--;      return result;    }    p=e;  }  return null;}  }
class C{  protected <T extends ManagedEntity>List<T> searchManagedEntities(ManagedEntity parent,Class<T> type) throws VMWareException {  return searchManagedEntities(parent,type,true);}  }
class C{  private void stopCore() throws PayloadException, NetworkException, ContactManagerException {  if (!mStarted) {    return;  }  mStopping=true;  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.info("Stop the RCS core service");  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {    mBackgroundHandler.getLooper().quitSafely();  } else {    mBackgroundHandler.getLooper().quit();  }  mLocaleManager.stop();  mAddressBookManager.stop();  mImsModule.stop();  mStopping=false;  mStarted=false;  if (logActivated) {    sLogger.info("RCS core service has been stopped with success");  }  sInstance=null;  mListener.onCoreLayerStopped();}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  Instance newInstance=filterInstance(instance);  if (newInstance == null) {    double[] unclassified=null;    if (instance.classAttribute().isNumeric()) {      unclassified=new double[1];      unclassified[0]=Utils.missingValue();    } else {      unclassified=new double[instance.classAttribute().numValues()];    }    return unclassified;  } else {    return m_Classifier.distributionForInstance(newInstance);  }}  }
class C{  public void sendDeployMinefields(Vector<Minefield> minefields){  send(new Packet(Packet.COMMAND_DEPLOY_MINEFIELDS,minefields));}  }
class C{  public void updateTick(){  if (dirty == true) {    updateMarkerElments();    updateTickLabelMaxLength();  }  dirty=false;}  }
class C{  public static Set<?> convertArrayToSet(Object[] source){  Set<Object> set=new HashSet<Object>();  for (  Object element : source) {    set.add(element);  }  return set;}  }
class C{  public boolean isOversizeList(ParserRuleContext ctx,List<? extends ParserRuleContext> siblings,Token separator){  ParserRuleContext first=siblings.get(0);  ParentSiblingListKey pair=new ParentSiblingListKey(ctx,first,separator.getType());  SiblingListStats stats=corpus.rootAndChildListStats.get(pair);  SiblingListStats splitStats=corpus.rootAndSplitChildListStats.get(pair);  boolean oversize=stats == null && splitStats != null;  if (stats != null && splitStats == null) {  }  int len=Trainer.getSiblingsLength(siblings);  if (stats != null && splitStats != null) {    double distToSplit=Math.abs(splitStats.median - len);    double distToSplitSquared=Math.pow(distToSplit,2);    double distToSplitStddevUnits=distToSplitSquared / Math.sqrt(splitStats.variance);    double distToRegular=Math.abs(stats.median - len);    double distToRegularSquared=Math.pow(distToRegular,2);    double distToRegularStddevUnits=distToRegularSquared / Math.sqrt(stats.variance);    float n=splitStats.numSamples + stats.numSamples;    float probSplit=splitStats.numSamples / n;    float probRegular=stats.numSamples / n;    double adjDistToSplit=distToSplitSquared * (1 - probSplit);    double adjDistToRegular=distToRegularSquared * (1 - probRegular);    if (adjDistToSplit < adjDistToRegular) {      oversize=true;    }  }  return oversize;}  }
class C{  SentenceFilteredGrammar(AbstractGrammar baseGrammar,Sentence sentence){  super(OwnerMap.getOwner(baseGrammar.getOwner()),baseGrammar.joshuaConfiguration,baseGrammar.getSpanLimit());  this.baseGrammar=baseGrammar;  this.sentence=sentence;  this.tokens=sentence.getWordIDs();  int origCount=getNumRules(baseGrammar.getTrieRoot());  long startTime=System.currentTimeMillis();  this.filteredTrie=filter(baseGrammar.getTrieRoot());  int filteredCount=getNumRules();  float seconds=(System.currentTimeMillis() - startTime) / 1000.0f;  LOG.debug("Sentence-level filtering of sentence {} ({} -> {} rules) in {} seconds",sentence.id(),origCount,filteredCount,seconds);}  }
class C{  public StyleSheetProcessingInstruction(String data,AbstractDocument owner,StyleSheetFactory f){  ownerDocument=owner;  setData(data);  factory=f;}  }
class C{  public static Number tanh(Number a){  return Math.tanh(a.doubleValue());}  }
class C{  void remove(long qAddr){  lrus[LruStripe.order(qAddr,mem)].remove(qAddr);}  }
class C{  public static DeltaCounter newDeltaCounter(){  return new StateBasedPNDeltaCounter();}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private void cmd_query(){  boolean reports=reportField.isSelected();  KeyNamePair process=(KeyNamePair)processField.getSelectedItem();  KeyNamePair table=(KeyNamePair)tableField.getSelectedItem();  Integer C_BPartner_ID=(Integer)bPartnerField.getValue();  String name=nameQField.getText();  String description=descriptionQField.getText();  String help=helpQField.getText();  KeyNamePair createdBy=(KeyNamePair)createdByQField.getSelectedItem();  Timestamp createdFrom=createdQFrom.getTimestamp();  Timestamp createdTo=createdQTo.getTimestamp();  cmd_query(reports,process,table,C_BPartner_ID,name,description,help,createdBy,createdFrom,createdTo);  panel.setSelectedIndex(1);  m_index=1;  updateVDisplay(false);}  }
class C{  public void addServletMapping(String servletName,String[] urlPatterns){  return;}  }
class C{  public static String[] schedulerCommandArgs(Config config,Config runtime,List<Integer> freePorts){  if (freePorts.size() < PORTS_REQUIRED_FOR_SCHEDULER) {    throw new RuntimeException("Failed to find enough ports for executor");  }  for (  int port : freePorts) {    if (port == -1) {      throw new RuntimeException("Failed to find available ports for executor");    }  }  int httpPort=freePorts.get(0);  List<String> commands=new ArrayList<>();  commands.add("--cluster");  commands.add(Context.cluster(config));  commands.add("--role");  commands.add(Context.role(config));  commands.add("--environment");  commands.add(Context.environ(config));  commands.add("--topology_name");  commands.add(Context.topologyName(config));  commands.add("--topology_bin");  commands.add(Context.topologyBinaryFile(config));  commands.add("--http_port");  commands.add(Integer.toString(httpPort));  return commands.toArray(new String[0]);}  }
class C{  public Generator(Properties props){  this.props=(Properties)props.clone();}  }
class C{  public boolean isSwitchHandshakeComplete(){  if (this.state.channelHandshakeComplete) {    return connection.getListener().isSwitchHandshakeComplete(connection);  } else {    return false;  }}  }
class C{  private boolean checkHopCountPolicy(Message m,ArithmeticCondition ac){  if (ac == null) {    return true;  } else {    return ac.isTrueFor(m.getHopCount());  }}  }
class C{  private static void addLinesToXML(File inFile,Iterable<String> lines) throws IOException {  StringBuilder sb=new StringBuilder();  sb.append("$1");  for (  String l : lines) {    sb.append("\n" + l);  }  String content=contents(inFile);  content=content.replaceAll("(<\\?xml version.*\\?>)",sb.toString());  FileOutputStream fos=new FileOutputStream(inFile);  PrintWriter out=new PrintWriter(fos);  out.print(content);  out.flush();  out.close();}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public static boolean isHAEnabled(Configuration configuration){  boolean ret=false;  if (configuration.containsKey(HAConfiguration.ATLAS_SERVER_HA_ENABLED_KEY)) {    ret=configuration.getBoolean(ATLAS_SERVER_HA_ENABLED_KEY);  } else {    String[] ids=configuration.getStringArray(HAConfiguration.ATLAS_SERVER_IDS);    ret=ids != null && ids.length > 1;  }  return ret;}  }
class C{  public ArrayInitializer newArrayInitializer(){  ArrayInitializer result=new ArrayInitializer(this);  return result;}  }
class C{  public boolean stopx(){  end=U.currentTimeMillis();  if (maxedOut()) {    debug("Timer maxed out [name=" + name + ", duration="+ duration()+ ']');    return false;  }  return true;}  }
class C{  public void removeSubscription(final String topic){synchronized (subscriptionControllers) {    logger.debug("Trying to remove subscription {}",topic);    final MqttSubscription subscription=subscriptionControllers.get(topic).getSubscription();    subscription.getConnection().unsubscribeAndRemove(subscription);    subscription.getStore().cleanUp();    subscriptionControllers.get(topic).onClose();    TabUtils.requestClose(subscriptionControllers.get(topic).getTab());    subscriptionControllers.remove(topic);  }}  }
class C{  public static void remove(final Type type){  threadLocal.get().remove(type);}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  static ShapeDrawable make(int size,int color){  ShapeDrawable indicator=new ShapeDrawable(new OvalShape());  indicator.setIntrinsicWidth(size);  indicator.setIntrinsicHeight(size);  indicator.getPaint().setColor(color);  return indicator;}  }
class C{  public long put(K key,long value){  return put(key,value,false);}  }
class C{  public boolean hasIdAccessor(){  return !m_idAccessors.isEmpty();}  }
class C{  protected void updatePeProvisioning(){  getPeMap().clear();  for (  ContainerPe pe : getPeList()) {    pe.getContainerPeProvisioner().deallocateMipsForAllContainers();  }  Iterator<ContainerPe> peIterator=getPeList().iterator();  ContainerPe pe=peIterator.next();  ContainerPeProvisioner containerPeProvisioner=pe.getContainerPeProvisioner();  double availableMips=containerPeProvisioner.getAvailableMips();  for (  Map.Entry<String,List<Double>> entry : getMipsMap().entrySet()) {    String containerUid=entry.getKey();    getPeMap().put(containerUid,new LinkedList<ContainerPe>());    for (    double mips : entry.getValue()) {      while (mips >= 0.1) {        if (availableMips >= mips) {          containerPeProvisioner.allocateMipsForContainer(containerUid,mips);          getPeMap().get(containerUid).add(pe);          availableMips-=mips;          break;        } else {          containerPeProvisioner.allocateMipsForContainer(containerUid,availableMips);          if (availableMips != 0) {            getPeMap().get(containerUid).add(pe);          }          mips-=availableMips;          if (mips <= 0.1) {            break;          }          if (!peIterator.hasNext()) {            Log.printConcatLine("There is no enough MIPS (",mips,") to accommodate VM ",containerUid);          }          pe=peIterator.next();          containerPeProvisioner=pe.getContainerPeProvisioner();          availableMips=containerPeProvisioner.getAvailableMips();        }      }    }  }}  }
class C{  public String toString(){  return Integer.toString(get());}  }
class C{  public static void logMaxMem(){  logger.info("Max memory was " + maxMemory + " at "+ maxMemTitle);}  }
class C{  @SuppressWarnings("unchecked") @Test public void testConsumingDoFn() throws Exception {  TupleTag<String> purchasesTag=new TupleTag<>();  TupleTag<String> addressesTag=new TupleTag<>();  TupleTag<String> namesTag=new TupleTag<>();  CoGbkResult result1=CoGbkResult.of(purchasesTag,Arrays.asList("3a","3b")).and(addressesTag,Arrays.asList("2a","2b")).and(namesTag,Arrays.asList("1a"));  CoGbkResult result2=CoGbkResult.of(purchasesTag,Arrays.asList("5a","5b")).and(addressesTag,Arrays.asList("4a")).and(namesTag,new ArrayList<String>());  CoGbkResult result3=CoGbkResult.of(purchasesTag,Arrays.asList("7a","7b")).and(addressesTag,new ArrayList<String>()).and(namesTag,new ArrayList<String>());  CoGbkResult result4=CoGbkResult.of(purchasesTag,new ArrayList<String>()).and(addressesTag,Arrays.asList("8a")).and(namesTag,new ArrayList<String>());  List<KV<String,Integer>> results=DoFnTester.of(new CorrelatePurchaseCountForAddressesWithoutNamesFn(purchasesTag,addressesTag,namesTag)).processBundle(KV.of(1,result1),KV.of(2,result2),KV.of(3,result3),KV.of(4,result4));  assertThat(results,containsInAnyOrder(KV.of("4a",2),KV.of("8a",0)));}  }
class C{  @Override public DiscoveryStrategy newDiscoveryStrategy(DiscoveryNode discovery,ILogger logger,Map<String,Comparable> configuration){  return new HazelcastKubernetesDiscoveryStrategy(logger,configuration);}  }
class C{  public SsoRuntimeException(String message,Key messageKey,Throwable cause,Object... messageDetails){  super(message,cause);  _messageKey=messageKey;  _messageDetails=messageDetails;}  }
class C{  public static int countNNZ(double[][] matrix){  int n=0;  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[0].length; j++) {      if (matrix[i][j] != 0)       n++;    }  }  return n;}  }
class C{  public DeferredSubscriptionSubscriber(Subscriber<? super O> subscriber){  this.subscriber=Objects.requireNonNull(subscriber,"subscriber");}  }
class C{  public CloseableImage decodeGif(final EncodedImage encodedImage,final ImageDecodeOptions options,final Bitmap.Config bitmapConfig){  if (sGifAnimatedImageDecoder == null) {    throw new UnsupportedOperationException("To encode animated gif please add the dependency " + "to the animated-gif module");  }  final CloseableReference<PooledByteBuffer> bytesRef=encodedImage.getByteBufferRef();  Preconditions.checkNotNull(bytesRef);  try {    final PooledByteBuffer input=bytesRef.get();    AnimatedImage gifImage=sGifAnimatedImageDecoder.decode(input.getNativePtr(),input.size());    return getCloseableImage(options,gifImage,bitmapConfig);  }  finally {    CloseableReference.closeSafely(bytesRef);  }}  }
class C{  public void affinityFunctionRemoveNode(long ptr,long memPtr){  enter();  try {    PlatformCallbackUtils.affinityFunctionRemoveNode(envPtr,ptr,memPtr);  }  finally {    leave();  }}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  put(key,new Integer(value));  return this;}  }
class C{  @Override protected boolean isZoneLevelResource(){  return true;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#ignorableWhitespace: " + start + ", "+ length);  if (m_contentHandler != null) {    m_contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public void testSingleMultiPolygonManyPointsManyHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(100);  pgc.setNumberHoles(100);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  checkRoundTrip(pt);}  }
class C{  public static void tapMenuKey(ActivityInstrumentationTestCase test){  final Instrumentation inst=test.getInstrumentation();  inst.sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_MENU));  inst.sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_MENU));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.STEREO_TYPE_TARGET__NAME:    setName(NAME_EDEFAULT);  return;case MappingPackage.STEREO_TYPE_TARGET__ATTRIBUTES:getAttributes().clear();return;}super.eUnset(featureID);}  }
class C{  public DeleteKeyAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("DeleteKeyAction.statusbar"));  putValue(NAME,res.getString("DeleteKeyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("DeleteKeyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("DeleteKeyAction.image")))));}  }
class C{  private void canEditCheck(){  canEdit=!profile.isCommonProfile();  if (!canEdit) {    addButton.setEnabled(false);    removeButton.setEnabled(false);    duplicateButton.setEnabled(false);  }}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (decoder != null) {      decoder.reset();    }    decoder=null;    if (in != null) {      in.close();      in=null;    }  }}  }
class C{  private boolean isHookRouteRegistration(HttpServerRequest request){  return request.uri().contains(HOOKS_ROUTE_URI_PART) && HttpMethod.PUT == request.method();}  }
class C{  public static Statement statement(List<Statement> statements,String s,String p,Object o){  Statement st=statement(s,p,o);  statements.add(st);  return st;}  }
class C{  public void fill(BytesRef b,long start){  final int index=(int)(start >> blockBits);  final int offset=(int)(start & blockMask);  final byte[] block=b.bytes=blocks[index];  if ((block[offset] & 128) == 0) {    b.length=block[offset];    b.offset=offset + 1;  } else {    b.length=((block[offset] & 0x7f) << 8) | (block[1 + offset] & 0xff);    b.offset=offset + 2;    assert b.length > 0;  }}  }
class C{  public void notifyRemoved(){synchronized (mObservers) {    for (    DataSetObserverExtended observer : mObservers) {      observer.onRemoved();    }  }}  }
class C{  public CertHashBasedOcspResponder(String host){  SelectChannelConnector ocspConnector=new SelectChannelConnector();  ocspConnector.setName("OcspResponseConnector");  ocspConnector.setPort(SystemProperties.getOcspResponderPort());  ocspConnector.setHost(host);  server.addConnector(ocspConnector);  server.setHandler(new RequestHandler());  server.setThreadPool(new QueuedThreadPool(THREAD_POOL_SIZE));  server.setSendServerVersion(false);}  }
class C{  protected void doUnload() throws IOException {  QueryService querySvc=sessionCache.getCache().getQueryService();  Context context=getTheContext();  if (context == null) {    return;  }  String regionName;  if (getRegionName().startsWith("/")) {    regionName=getRegionName();  } else {    regionName="/" + getRegionName();  }  Query query=querySvc.newQuery("select s.id from " + regionName + " as s where s.contextName = '"+ context.getPath()+ "'");  getLogger().debug("Query: " + query.getQueryString());  SelectResults results;  try {    results=(SelectResults)query.execute();  } catch (  Exception ex) {    getLogger().error("Unable to perform query during doUnload",ex);    return;  }  if (results.isEmpty()) {    getLogger().debug("No sessions to unload for context " + context.getPath());    return;  }  File store=sessionStore(context.getPath());  if (store == null) {    return;  }  if (getLogger().isDebugEnabled()) {    getLogger().debug("Unloading sessions to " + store.getAbsolutePath());  }  FileOutputStream fos=null;  BufferedOutputStream bos=null;  ObjectOutputStream oos=null;  boolean error=false;  try {    fos=new FileOutputStream(store.getAbsolutePath());    bos=new BufferedOutputStream(fos);    oos=new ObjectOutputStream(bos);  } catch (  IOException e) {    error=true;    getLogger().error("Exception unloading sessions",e);    throw e;  } finally {    if (error) {      if (oos != null) {        try {          oos.close();        } catch (        IOException ioe) {        }      }      if (bos != null) {        try {          bos.close();        } catch (        IOException ioe) {        }      }      if (fos != null) {        try {          fos.close();        } catch (        IOException ioe) {        }      }    }  }  ArrayList<DeltaSessionInterface> list=new ArrayList<DeltaSessionInterface>();  Iterator<String> elements=results.iterator();  while (elements.hasNext()) {    String id=elements.next();    DeltaSessionInterface session=(DeltaSessionInterface)findSession(id);    if (session != null) {      list.add(session);    }  }  if (getLogger().isDebugEnabled())   getLogger().debug("Unloading " + list.size() + " sessions");  try {    oos.writeObject(new Integer(list.size()));    for (    DeltaSessionInterface session : list) {      if (session instanceof StandardSession) {        StandardSession standardSession=(StandardSession)session;        standardSession.passivate();        standardSession.writeObjectData(oos);      } else {        throw new IOException("Session should be of type StandardSession");      }    }  } catch (  IOException e) {    getLogger().error("Exception unloading sessions",e);    try {      oos.close();    } catch (    IOException f) {    }    throw e;  }  try {    oos.flush();  }  finally {    try {      oos.close();    } catch (    IOException f) {    }  }  if (getSessionCache().isClientServer()) {    for (    DeltaSessionInterface session : list) {      if (getLogger().isDebugEnabled()) {        getLogger().debug("Locally destroying session " + session.getId());      }      getSessionCache().getOperatingRegion().localDestroy(session.getId());    }  }  if (getLogger().isDebugEnabled()) {    getLogger().debug("Unloading complete");  }}  }
class C{  public void addLocalTempTableIndex(Index index){  if (localTempTableIndexes == null) {    localTempTableIndexes=database.newStringMap();  }  if (localTempTableIndexes.get(index.getName()) != null) {    throw DbException.get(ErrorCode.INDEX_ALREADY_EXISTS_1,index.getSQL());  }  localTempTableIndexes.put(index.getName(),index);}  }
class C{  public void stop() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  stop(null);}  }
class C{  public FolderTokenDocument findById(int id) throws Exception {  int idx;  FolderTokenDocument doc=null;  idx=super.findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  doc=get(idx);  return doc;}  }
class C{  short order(long qAddr){  return LruStripe.order(qAddr,mem);}  }
class C{  @Nullable DebugCounterImpl addCounter(@Nonnull DebugCounterImpl counter){  verifyIsRoot();  ArrayList<String> path=new ArrayList<>();  path.add(counter.getModuleName());  for (  String element : counter.getCounterHierarchy().split(QUOTED_SEP)) {    path.add(element);  }  String newCounterName=path.get(path.size() - 1);  CounterNode parent=lookup(path.subList(0,path.size() - 1));  if (parent == null) {    throw new IllegalArgumentException("Missing hierarchy level for " + "counter: " + counter.getModuleName() + " "+ counter.getCounterHierarchy());  }  if (parent.children.containsKey(newCounterName)) {    CounterNode old=parent.children.get(newCounterName);    old.resetHierarchy();    return old.counter;  } else {    CounterNode newNode=new CounterNode(path,counter);    parent.children.put(newCounterName,newNode);    return null;  }}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new FileInputStream(jpegFileName);    writeExif(is,exifOutFileName);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:16.660 -0500",hash_original_method="A926FB4015A038016094FA9870012FFA",hash_generated_method="02DABE826AC243D7038F9FF00D262515") private boolean ensureValidRect(){  if (mRectIsDirty) {    mRectIsDirty=false;    Rect bounds=getBounds();    float inset=0;    if (mStrokePaint != null) {      inset=mStrokePaint.getStrokeWidth() * 0.5f;    }    final GradientState st=mGradientState;    mRect.set(bounds.left + inset,bounds.top + inset,bounds.right - inset,bounds.bottom - inset);    final int[] colors=st.mColors;    if (colors != null) {      RectF r=mRect;      float x0, x1, y0, y1;      if (st.mGradient == LINEAR_GRADIENT) {        final float level=st.mUseLevel ? (float)getLevel() / 10000.0f : 1.0f;switch (st.mOrientation) {case TOP_BOTTOM:          x0=r.left;        y0=r.top;      x1=x0;    y1=level * r.bottom;  break;case TR_BL:x0=r.right;y0=r.top;x1=level * r.left;y1=level * r.bottom;break;case RIGHT_LEFT:x0=r.right;y0=r.top;x1=level * r.left;y1=y0;break;case BR_TL:x0=r.right;y0=r.bottom;x1=level * r.left;y1=level * r.top;break;case BOTTOM_TOP:x0=r.left;y0=r.bottom;x1=x0;y1=level * r.top;break;case BL_TR:x0=r.left;y0=r.bottom;x1=level * r.right;y1=level * r.top;break;case LEFT_RIGHT:x0=r.left;y0=r.top;x1=level * r.right;y1=y0;break;default :x0=r.left;y0=r.top;x1=level * r.right;y1=level * r.bottom;break;}mFillPaint.setShader(new LinearGradient(x0,y0,x1,y1,colors,st.mPositions,Shader.TileMode.CLAMP));} else if (st.mGradient == RADIAL_GRADIENT) {x0=r.left + (r.right - r.left) * st.mCenterX;y0=r.top + (r.bottom - r.top) * st.mCenterY;final float level=st.mUseLevel ? (float)getLevel() / 10000.0f : 1.0f;mFillPaint.setShader(new RadialGradient(x0,y0,level * st.mGradientRadius,colors,null,Shader.TileMode.CLAMP));} else if (st.mGradient == SWEEP_GRADIENT) {x0=r.left + (r.right - r.left) * st.mCenterX;y0=r.top + (r.bottom - r.top) * st.mCenterY;int[] tempColors=colors;float[] tempPositions=null;if (st.mUseLevel) {tempColors=st.mTempColors;final int length=colors.length;if (tempColors == null || tempColors.length != length + 1) {tempColors=st.mTempColors=new int[length + 1];}System.arraycopy(colors,0,tempColors,0,length);tempColors[length]=colors[length - 1];tempPositions=st.mTempPositions;final float fraction=1.0f / (float)(length - 1);if (tempPositions == null || tempPositions.length != length + 1) {tempPositions=st.mTempPositions=new float[length + 1];}final float level=(float)getLevel() / 10000.0f;for (int i=0; i < length; i++) {tempPositions[i]=i * fraction * level;}tempPositions[length]=1.0f;}mFillPaint.setShader(new SweepGradient(x0,y0,tempColors,tempPositions));}}}return !mRect.isEmpty();}  }
class C{  public static MatFileHeader createHeader(){  return new MatFileHeader(DEFAULT_DESCRIPTIVE_TEXT + (new Date()).toString(),DEFAULT_VERSION,DEFAULT_ENDIAN_INDICATOR);}  }
class C{  public static ChcpError install(final Context context,final String newVersion,final String currentVersion){  if (isInstalling) {    return ChcpError.INSTALLATION_ALREADY_IN_PROGRESS;  }  if (UpdatesLoader.isExecuting()) {    return ChcpError.CANT_INSTALL_WHILE_DOWNLOAD_IN_PROGRESS;  }  final PluginFilesStructure newReleaseFS=new PluginFilesStructure(context,newVersion);  if (!new File(newReleaseFS.getDownloadFolder()).exists() || newVersion.equals(currentVersion)) {    return ChcpError.NOTHING_TO_INSTALL;  }  dispatchBeforeInstallEvent();  final WorkerTask task=new InstallationWorker(context,newVersion,currentVersion);  execute(task);  return ChcpError.NONE;}  }
class C{  public GridClientFutureAdapter(Throwable err){  onDone(null,err);}  }
class C{  public static Object resolvedNewScalar(RVMClass cls){  int allocator=MemoryManager.pickAllocator(cls);  int site=MemoryManager.getAllocationSite(false);  int align=ObjectModel.getAlignment(cls);  int offset=ObjectModel.getOffsetForAlignment(cls,false);  return resolvedNewScalar(cls.getInstanceSize(),cls.getTypeInformationBlock(),cls.hasFinalizer(),allocator,align,offset,site);}  }
class C{  public static boolean isActive(IBlockAccess world,int x,int y,int z){  TileEntity tileEntity=(TileEntity)world.getTileEntity(x,y,z);  if (tileEntity != null) {    if (tileEntity instanceof IActiveState) {      return ((IActiveState)tileEntity).getActive();    }  }  return false;}  }
class C{  public void removeInput(String inputName){  int inputIndex=getParameterIndex(inputName);  _input.remove(inputIndex);  _paramIndexMap.remove(inputName);  for (  Entry<String,Integer> entry : _paramIndexMap.entrySet()) {    if (entry.getValue() > inputIndex) {      _paramIndexMap.put(entry.getKey(),(entry.getValue() - 1));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.405 -0500",hash_original_method="95FF401EAA7EE3F3C9E78290081B0530",hash_generated_method="3AE7400E6A8ADCDFC101452B65121BFE") public SIPDialog(SipProviderImpl sipProvider,SIPResponse sipResponse){  this(sipProvider);  this.sipStack=(SIPTransactionStack)sipProvider.getSipStack();  this.setLastResponse(null,sipResponse);  this.localSequenceNumber=sipResponse.getCSeq().getSeqNumber();  this.originalLocalSequenceNumber=localSequenceNumber;  this.myTag=sipResponse.getFrom().getTag();  this.hisTag=sipResponse.getTo().getTag();  this.localParty=sipResponse.getFrom().getAddress();  this.remoteParty=sipResponse.getTo().getAddress();  this.method=sipResponse.getCSeq().getMethod();  this.callIdHeader=sipResponse.getCallId();  this.serverTransactionFlag=false;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Creating a dialog : " + this);    sipStack.getStackLogger().logStackTrace();  }  this.isBackToBackUserAgent=sipStack.isBackToBackUserAgent;  addEventListener(sipStack);}  }
class C{  public boolean isIgnoreMOTDEnabled(){  return preferences.getBoolean(resources.getString(R.string.key_ignore_motd),Boolean.parseBoolean(resources.getString(R.string.default_ignore_motd)));}  }
class C{  public void apply(Swarm swarm) throws IOException {  applyProperties();  applyConfigurations(swarm);  if (get(HELP)) {    displayVersion(System.err);    System.err.println();    displayHelp(System.err,swarm.hasStageConfig() ? swarm.stageConfig() : null);    System.exit(0);  }  if (get(VERSION)) {    displayVersion(System.err);  }}  }
class C{  @Override public void filter(ContainerRequestContext requestContext,ContainerResponseContext responseContext) throws IOException {  if (isCsrfEnabled()) {    final Csrf csrf=csrfInstance.get();    final MultivaluedMap<String,Object> headers=responseContext.getHeaders();    if (!headers.containsKey(csrf.getName())) {      headers.putSingle(csrf.getName(),csrf.getToken());    }  }}  }
class C{  void handleVolumeKey(int stream,int keycode){  IAudioService audioService=getAudioService();  if (audioService == null) {    return;  }  try {    mBroadcastWakeLock.acquire();    audioService.adjustStreamVolume(stream,keycode == KeyEvent.KEYCODE_VOLUME_UP ? AudioManager.ADJUST_RAISE : AudioManager.ADJUST_LOWER,0);  } catch (  RemoteException e) {    Log.w(TAG,"IAudioService.adjustStreamVolume() threw RemoteException " + e);  } finally {    mBroadcastWakeLock.release();  }}  }
class C{  public boolean testForAndHandlePopupTrigger(MouseEvent e){  boolean ret=false;  if (e.isPopupTrigger()) {    GeometryOfInterest goi=getClickInterest();    if (goi != null) {      goi.setLeftButton(false);      ret=rightClick(goi.getGeometry(),e);    } else {      ret=rightClick(e);    }  }  return ret;}  }
class C{  private File toFile(String fileName){  StringBuilder imageFileName=new StringBuilder();  imageFileName.append(imageId).append(fileName);  return new File(uploadFolder,imageFileName.toString());}  }
class C{  public void resize(int size){  if (buffer != null) {    if (size >= 0 && size < buffer.size()) {      int oldLastIndex=buffer.size() - 1;      int newLastIndex=size - 1;      for (int i=oldLastIndex; i > newLastIndex; i--) {        buffer.remove(i);      }    }  } else {    if (size >= 0 && size < offsets.size()) {      long offset=offsets.get(size);      byteCache.resize(key,offset);      ArrayList<Long> newOffsets=new ArrayList<Long>(size);      for (int i=0; i < size; i++) {        newOffsets.add(offsets.get(i));      }      offsets=newOffsets;    }  }}  }
class C{  public ConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  @Override public boolean isSatisfied(final HashMap<ICondition,Boolean> testedConditions){  return isSatisfied(testedConditions,null);}  }
class C{  public static void checkException(Exception e){  if (e instanceof JPlagException) {    JPlagException je=(JPlagException)e;    System.out.println("JPlagException: " + je.getDescription() + "\n"+ je.getRepair());  } else   if (e instanceof RemoteException) {    RemoteException re=(RemoteException)e;    Throwable cause=re.getCause();    if (cause != null && cause instanceof ClientTransportException) {      cause=((JAXRPCExceptionBase)cause).getLinkedException();      if (cause != null) {        System.out.println("Connection exception: " + cause.getMessage());        return;      }    }    System.out.println("Unexpected RemoteException: " + re.getMessage());    re.printStackTrace();  } else {    System.out.println("Unexpected Exception: " + e.getMessage());    e.printStackTrace();  }}  }
class C{  public byte[] uri2key(final String uri){  return keyBuilder.reset().append(TERM_CODE_URI).append(uri).getKey();}  }
class C{  public static boolean createDirectory(String parentPath,String directoryName){  if ((parentPath == null) || parentPath.isEmpty() || (directoryName == null)|| directoryName.isEmpty()) {    return false;  }  try {    File directory=new File(parentPath + File.separator + directoryName);    boolean doesDirectoryExist=directory.exists();    boolean createDirectorySuccess=true;    if (!doesDirectoryExist) {      createDirectorySuccess=directory.mkdir();    }    return createDirectorySuccess;  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return false;  }}  }
class C{  private void execSerializationTest(String name,int channelCount,String[] shards) throws Exception {  logger.info("##### " + name + " #####");  TungstenProperties conf=helper.generateTHLParallelPipeline(name,channelCount,50,shards.length,false);  runtime=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  THL thl=(THL)pipeline.getStore("thl");  THLParallelQueue tpq=(THLParallelQueue)pipeline.getStore("thl-queue");  InMemoryTransactionalQueue mq=(InMemoryTransactionalQueue)pipeline.getStore("multi-queue");  RandomCommitAction ca=new RandomCommitAction(100);  mq.setCommitAction(ca);  int serialized=0;  String lastShardId=null;  LogConnection conn=thl.connect(false);  for (int i=0; i < shards.length; i++) {    String shardId=shards[i];    ReplDBMSEvent rde=helper.createEvent(i,shardId);    THLEvent thlEvent=new THLEvent(rde.getSourceId(),rde);    conn.store(thlEvent,false);    conn.commit();    if ("#UNKNOWN".equals(shardId) && (lastShardId == null || !lastShardId.equals(shardId))) {      serialized++;    } else     if ("".equals(shardId) && (lastShardId == null || !lastShardId.equals(shardId))) {      serialized++;    } else     if (shardId == null && (lastShardId != null || i == 0)) {      serialized++;    }    lastShardId=shardId;  }  thl.disconnect(conn);  Future<ReplDBMSHeader> committed=pipeline.watchForCommittedSequenceNumber(shards.length - 1,false);  committed.get(10,TimeUnit.SECONDS);  int actualSerialized=getSerializationCount(tpq);  Assert.assertEquals("Checking expected serialization count",serialized,actualSerialized);  int count=0;  for (int i=0; i < shards.length; i++) {    ReplDBMSEvent rde2=mq.get();    long seqno=rde2.getSeqno();    String shardId=rde2.getShardId();    if (logger.isDebugEnabled()) {      logger.debug("Read event: seqno=" + seqno + " shardId="+ shardId);    }    count++;    if ("#UNKNOWN".equals(shardId)) {      Assert.assertEquals("Expected an unknown event: seqno=" + seqno + " shardId="+ shardId,"#UNKNOWN",shardId);    } else {      Assert.assertFalse("Did not expect an unknown event: seqno=" + seqno + " shardId="+ shardId,"#UNKNOWN".equals(shardId));    }  }  Assert.assertEquals("Checking number of events",shards.length,count);}  }
class C{  private void renderImage(){  panel.clear();  if (presentation.getImageResource() != null) {    Image image=new Image(presentationFactory.getPresentation(action).getImageResource());    image.setStyleName(toolbarResources.toolbar().popupButtonIcon());    panel.add(image);  } else   if (presentation.getSVGResource() != null) {    SVGImage image=new SVGImage(presentation.getSVGResource());    image.getElement().setAttribute("class",toolbarResources.toolbar().popupButtonIcon());    panel.add(image);  } else   if (presentation.getHTMLResource() != null) {    FlowPanel icon=new FlowPanel();    icon.setStyleName(toolbarResources.toolbar().iconButtonIcon());    FlowPanel inner=new FlowPanel();    inner.setStyleName(toolbarResources.toolbar().popupButtonIconInner());    inner.getElement().setInnerHTML(presentation.getHTMLResource());    icon.add(inner);    panel.add(inner);  }  InlineLabel caret=new InlineLabel("");  caret.setStyleName(toolbarResources.toolbar().caret());  panel.add(caret);}  }
class C{  public static Id parse(final String str){  final Id r=new Id();  r.fromString(str);  return r;}  }
class C{  private LinkedList<Diff> diff_compute(String text1,String text2,boolean checklines,long deadline){  LinkedList<Diff> diffs=new LinkedList<Diff>();  if (text1.length() == 0) {    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  if (text2.length() == 0) {    diffs.add(new Diff(Operation.DELETE,text1));    return diffs;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  int i=longtext.indexOf(shorttext);  if (i != -1) {    Operation op=(text1.length() > text2.length()) ? Operation.DELETE : Operation.INSERT;    diffs.add(new Diff(op,longtext.substring(0,i)));    diffs.add(new Diff(Operation.EQUAL,shorttext));    diffs.add(new Diff(op,longtext.substring(i + shorttext.length())));    return diffs;  }  if (shorttext.length() == 1) {    diffs.add(new Diff(Operation.DELETE,text1));    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  String[] hm=diff_halfMatch(text1,text2);  if (hm != null) {    String text1_a=hm[0];    String text1_b=hm[1];    String text2_a=hm[2];    String text2_b=hm[3];    String mid_common=hm[4];    LinkedList<Diff> diffs_a=diff_main(text1_a,text2_a,checklines,deadline);    LinkedList<Diff> diffs_b=diff_main(text1_b,text2_b,checklines,deadline);    diffs=diffs_a;    diffs.add(new Diff(Operation.EQUAL,mid_common));    diffs.addAll(diffs_b);    return diffs;  }  if (checklines && text1.length() > 100 && text2.length() > 100) {    return diff_lineMode(text1,text2,deadline);  }  return diff_bisect(text1,text2,deadline);}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  public static void track(Window window){  Preferences prefs=node().node("Windows");  String bounds=prefs.get(window.getName() + ".bounds",null);  if (bounds != null) {    Rectangle rect=(Rectangle)ConverterRegistry.instance().convert(Rectangle.class,bounds);    window.setBounds(rect);  }  window.addComponentListener(windowDimension);}  }
class C{  public static XMLTree from(byte[] xml){  requireNonNull(xml,"Required not null bytes");  return new XMLTree(Arrays.copyOf(xml,xml.length));}  }
class C{  public synchronized int removeStatements(final ISPO[] stmts,final int numStmts) throws SailException {  assertWritableConn();  flushStatementBuffers(true,false);  if (m_listeners != null) {    throw new UnsupportedOperationException();  }  long n=0;  if (getTruthMaintenance()) {    final IChunkedOrderedIterator<ISPO> itr=new ChunkedArrayIterator<ISPO>(numStmts,stmts);    final AbstractTripleStore tempStore=getRetractionBuffer().getStatementStore();    n=tempStore.addStatements(tempStore,true,itr,null);  } else {    if (changeLog == null) {      n=database.removeStatements(stmts,numStmts);    } else {      final IChunkedOrderedIterator<ISPO> itr=database.computeClosureForStatementIdentifiers(new ChunkedArrayIterator<ISPO>(numStmts,stmts));      n=StatementWriter.removeStatements(database,itr,false,changeLog);    }  }  return (int)Math.min(Integer.MAX_VALUE,n);}  }
class C{  protected void fireActionPerformed(){  int modifiers=0;  AWTEvent currentEvent=EventQueue.getCurrentEvent();  if (currentEvent instanceof InputEvent)   modifiers=((InputEvent)currentEvent).getModifiers(); else   if (currentEvent instanceof ActionEvent)   modifiers=((ActionEvent)currentEvent).getModifiers();  ActionEvent ae=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,currentEvent.getClass().getSimpleName(),EventQueue.getMostRecentEventTime(),modifiers);  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(ae);    }  }}  }
class C{  @Override public void onCommit(List<? extends IndexCommit> commits) throws IOException {  log.info("SolrDeletionPolicy.onCommit: commits: {}",new CommitsLoggingInfo(commits));  log.debug("SolrDeletionPolicy.onCommit: commits: {}",new CommitsLoggingDebug(commits));  updateCommits(commits);}  }
class C{  private void switchViews(boolean trackBallSelection){  Event selectedEvent=mSelectedEvent;  mPopup.dismiss();  mLastPopupEventID=INVALID_EVENT_ID;  if (mNumDays > 1) {    if (trackBallSelection) {      if (selectedEvent == null) {        long startMillis=getSelectedTimeInMillis();        long endMillis=startMillis + DateUtils.HOUR_IN_MILLIS;        long extraLong=0;        if (mSelectionAllday) {          extraLong=CalendarController.EXTRA_CREATE_ALL_DAY;        }        mController.sendEventRelatedEventWithExtra(this,EventType.CREATE_EVENT,-1,startMillis,endMillis,-1,-1,extraLong,-1);      } else {        if (mIsAccessibilityEnabled) {          mAccessibilityMgr.interrupt();        }        mController.sendEventRelatedEvent(this,EventType.VIEW_EVENT,selectedEvent.id,selectedEvent.startMillis,selectedEvent.endMillis,0,0,getSelectedTimeInMillis());      }    } else {      if (mSelectedEvents.size() == 1) {        if (mIsAccessibilityEnabled) {          mAccessibilityMgr.interrupt();        }        mController.sendEventRelatedEvent(this,EventType.VIEW_EVENT,selectedEvent.id,selectedEvent.startMillis,selectedEvent.endMillis,0,0,getSelectedTimeInMillis());      }    }  } else {    if (selectedEvent == null) {      long startMillis=getSelectedTimeInMillis();      long endMillis=startMillis + DateUtils.HOUR_IN_MILLIS;      long extraLong=0;      if (mSelectionAllday) {        extraLong=CalendarController.EXTRA_CREATE_ALL_DAY;      }      mController.sendEventRelatedEventWithExtra(this,EventType.CREATE_EVENT,-1,startMillis,endMillis,-1,-1,extraLong,-1);    } else {      if (mIsAccessibilityEnabled) {        mAccessibilityMgr.interrupt();      }      mController.sendEventRelatedEvent(this,EventType.VIEW_EVENT,selectedEvent.id,selectedEvent.startMillis,selectedEvent.endMillis,0,0,getSelectedTimeInMillis());    }  }}  }
class C{  public double distanceSq(Vector other){  return Math.pow(other.x - x,2) + Math.pow(other.y - y,2) + Math.pow(other.z - z,2);}  }
class C{  public void addArchive(ArcDef arcDef){  if (arcDefs.contains(arcDef)) {    throw new IllegalArgumentException("Archive already defined: " + arcDef.dump());  }  arcDefs.add(arcDef);}  }
class C{  public void start(){  asyncPingTask=new AsyncPingTask(this,targetAddress,processCallback);  asyncPingTask.execute();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isRecursiveAttrSet(ElemAttributeSet attrSet){  if (null == m_attrSetStack) {    m_attrSetStack=new Stack();  }  if (!m_attrSetStack.empty()) {    int loc=m_attrSetStack.search(attrSet);    if (loc > -1) {      return true;    }  }  return false;}  }
class C{  public boolean hasVaryAll(){  return varyFields.contains("*");}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if ((data[col] * data[col]) > (z * z)) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void notifyAtTurn(final int turn,final TurnListener turnListener){  if (turnListener == null) {    logger.error("Trying to notify null-object",new Throwable());    return;  }  if (logger.isDebugEnabled()) {    logger.info("Notify at " + turn + " by "+ turnListener);    final StringBuilder st=new StringBuilder();    for (    final StackTraceElement e : Thread.currentThread().getStackTrace()) {      st.append(e);      st.append("\n");    }    logger.info(st);  }  if (turn <= currentTurn) {    logger.error("requested turn " + turn + " is in the past. Current turn is "+ currentTurn,new IllegalArgumentException("turn"));    return;  }synchronized (sync) {    final Integer turnInt=Integer.valueOf(turn);    Set<TurnListener> set=register.get(turnInt);    if (set == null) {      set=new HashSet<TurnListener>();      register.put(turnInt,set);    }    set.add(turnListener);  }}  }
class C{  public ReliableLog(String dirPath,LogHandler handler,boolean pad) throws IOException {  super();  this.Debug=AccessController.doPrivileged(new GetBooleanAction("sun.rmi.log.debug")).booleanValue();  dir=new File(dirPath);  if (!(dir.exists() && dir.isDirectory())) {    if (!dir.mkdir()) {      throw new IOException("could not create directory for log: " + dirPath);    }  }  this.handler=handler;  lastSnapshot=0;  lastLog=0;  getVersion();  if (version == 0) {    try {      snapshot(handler.initialSnapshot());    } catch (    IOException e) {      throw e;    }catch (    Exception e) {      throw new IOException("initial snapshot failed with " + "exception: " + e);    }  }}  }
class C{  public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  g.fillRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  protected DiskStoreAttributesCreation initializePdxDiskStore(GemFireCacheImpl cache){  DiskStoreAttributesCreation pdxRegDSC=null;  if (TypeRegistry.mayNeedDiskStore(cache)) {    String pdxRegDsName=cache.getPdxDiskStore();    if (pdxRegDsName == null) {      pdxRegDsName=DiskStoreFactory.DEFAULT_DISK_STORE_NAME;    }    pdxRegDSC=(DiskStoreAttributesCreation)this.diskStores.get(pdxRegDsName);    if (pdxRegDSC == null) {      if (pdxRegDsName.equals(DiskStoreFactory.DEFAULT_DISK_STORE_NAME)) {        cache.getOrCreateDefaultDiskStore();      }    } else {      createDiskStore(pdxRegDSC,cache);    }  }  return pdxRegDSC;}  }
class C{  public void fireEndEntity(String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   flushMyWriter();}  }
class C{  public static void show(){  MainActivity.showLog(get());}  }
class C{  public void allowTurnoutLock(boolean lock,SignalMast destination){  if (!destList.containsKey(destination)) {    return;  }  destList.get(destination).allowTurnoutLock(lock);}  }
class C{  @Override public void tableChanged(TableModelEvent e){  initializeIndices();  if (isSorted()) {    sort(mSortColumn,mAscending);  }  fireTableChanged(e);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.533 -0500",hash_original_method="3044254AB71061FF974CD0BBDD0D9BC5",hash_generated_method="AB88D3EC467AC5EB0755042C58CA48D6") public void replyToMessage(Message srcMsg,int what,int arg1){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  replyToMessage(srcMsg,msg);}  }
class C{  public static <S extends HasScrolledHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ScrolledEvent event=new ScrolledEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void reset(){synchronized (m_threads) {    for (    final TargetProcessThread thread : m_threads) {      thread.removeListener(m_threadListener);    }    m_threads.clear();  }  fireTableDataChanged();}  }
class C{  public Task<StorageSystemRestRep> add(StorageSystemSMISCreateParam input){  return postTask(input,PathConstants.STORAGE_PROVIDER_URL + "/storage-systems");}  }
class C{  public ToStringBuilder append(String fieldName,char[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public double manhattanDistance(final MutableInt3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  public RightSegmentEdgeAccessor(MultiSegmentReaderAccessibleInfo<BipartiteGraphSegment> readerAccessibleInfo,Int2ObjectMap<ReusableNodeIntIterator> segmentNodeIntIteratorMap,Int2ObjectMap<ReusableInternalIdToLongIterator> segmentInternalIdToLongIteratorMap){  super(readerAccessibleInfo);  this.segmentInternalIdToLongIteratorMap=segmentInternalIdToLongIteratorMap;  this.segmentNodeIntIteratorMap=segmentNodeIntIteratorMap;}  }
class C{  public static String changeIndent(String code,int codeIndentLevel,int tabWidth,int indentWidth,String newIndent,String lineDelim){  return IndentManipulation.changeIndent(code,codeIndentLevel,tabWidth,indentWidth,newIndent,lineDelim);}  }
class C{  public void read(byte[] buf,int offset,int len,int skip){  if ((buf.length - offset) < len) {    throw new IllegalArgumentException("Buffer size of " + buf.length + " is too small for a read of "+ len+ " bytes");  }  if ((available - skip) < len) {    throw new IllegalStateException("Not enough data to read");  }  System.arraycopy(databuf,skipped + skip,buf,offset,len);}  }
class C{  public static MeteringRectangle[] afRegionsForNormalizedCoord(float nx,float ny,final Rect cropRegion,int sensorOrientation){  return regionsForNormalizedCoord(nx,ny,Settings3A.getAutoFocusRegionWidth(),cropRegion,sensorOrientation);}  }
class C{  public static AppEventsLogger newLogger(Context context,String applicationId,Session session){  return new AppEventsLogger(context,applicationId,session);}  }
class C{  public ResultVO errorResp(Logger logger,Throwable e,ErrorType errorType){  return errorResp(logger,e,errorType,errorType.description());}  }
class C{  public MutableDateTime roundHalfFloor(){  iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));  return iInstant;}  }
class C{  public UserStyleDialog(JFrame f){  super(f);  setModal(true);  setTitle(resources.getString("Dialog.title"));  listeners.put("OKButtonAction",new OKButtonAction());  listeners.put("CancelButtonAction",new CancelButtonAction());  getContentPane().add(panel=new Panel());  getContentPane().add(createButtonsPanel(),BorderLayout.SOUTH);  pack();}  }
class C{  private String printLong(long l){  String result;  String str;  int i;  int count;  str=Long.toString(l);  result="";  count=0;  for (i=str.length() - 1; i >= 0; i--) {    count++;    result=str.charAt(i) + result;    if ((count == 3) && (i > 0)) {      result="," + result;      count=0;    }  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS01.class,args);}  }
class C{  public final boolean canHandle(byte[] stegoData){  return false;}  }
class C{  public synchronized SynchronizingStorageEngine register(String storeName,Scope scope,boolean persistent) throws PersistException {  SynchronizingStorageEngine store=localStores.get(storeName);  if (store != null) {    return store;  }  IStorageEngine<ByteArray,byte[]> dstore;  if (persistent) {    if (persistentDataSource == null)     persistentDataSource=JavaDBStorageEngine.getDataSource(dbPath,false);    dstore=new JavaDBStorageEngine(storeName,persistentDataSource);  } else {    dstore=new InMemoryStorageEngine<ByteArray,byte[]>(storeName);  }  store=new SynchronizingStorageEngine(dstore,syncManager,syncManager.debugCounter,scope);  localStores.put(storeName,store);  return store;}  }
class C{  public void writeSecurityToken(BaseGenericIdEntity<?> resultEntity){  Multimap<String,UUID> filtered=BaseEntityInternalAccess.getFilteredData(resultEntity);  JSONObject jsonObject=new JSONObject();  if (filtered != null) {    Set<Map.Entry<String,Collection<UUID>>> entries=filtered.asMap().entrySet();    String[] filteredAttributes=new String[entries.size()];    int i=0;    for (    Map.Entry<String,Collection<UUID>> entry : entries) {      jsonObject.put(entry.getKey(),entry.getValue());      filteredAttributes[i++]=entry.getKey();    }    BaseEntityInternalAccess.setFilteredAttributes(resultEntity,filteredAttributes);  }  String json=jsonObject.toString();  byte[] encrypted;  Cipher cipher=getCipher(Cipher.ENCRYPT_MODE);  try {    encrypted=cipher.doFinal(json.getBytes(StandardCharsets.UTF_8));  } catch (  Exception e) {    throw new RuntimeException("An error occurred while generating security token",e);  }  BaseEntityInternalAccess.setSecurityToken(resultEntity,encrypted);}  }
class C{  private void checkRemarks() throws Exception {  int index;  if (_remarks != null) {    index=_remarks.indexOf("\"");    if (index > -1)     ISicresAdminBasicException.throwException(ISicresAdminVolumeListKeys.EC_LISTVOL_REMARKS_EXIST_QUOTES);  }}  }
class C{  protected void constructRateMap(){  int u, v, i1, j1, k1, i2, j2, k2, ts, tv, non;  byte rateClass;  int[] codon;  int cs1, cs2, aa1, aa2;  int i=0;  rateMap=new byte[rateCount];  for (u=0; u < stateCount; u++) {    codon=codonDataType.getTripletStates(u);    i1=codon[0];    j1=codon[1];    k1=codon[2];    cs1=codonDataType.getState(i1,j1,k1);    aa1=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs1));    for (v=u + 1; v < stateCount; v++) {      ts=0;      tv=0;      non=0;      rateClass=-1;      codon=codonDataType.getTripletStates(v);      i2=codon[0];      j2=codon[1];      k2=codon[2];      cs2=codonDataType.getState(i2,j2,k2);      aa2=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs2));      if (i1 != i2) {        if ((i1 == 0 && i2 == 2) || (i1 == 2 && i2 == 0) || (i1 == 1 && i2 == 3)|| (i1 == 3 && i2 == 1)) {          ts+=1;        } else {          tv+=1;        }      }      if (j1 != j2) {        if ((j1 == 0 && j2 == 2) || (j1 == 2 && j2 == 0) || (j1 == 1 && j2 == 3)|| (j1 == 3 && j2 == 1)) {          ts+=1;        } else {          tv+=1;        }      }      if (k1 != k2) {        if ((k1 == 0 && k2 == 2) || (k1 == 2 && k2 == 0) || (k1 == 1 && k2 == 3)|| (k1 == 3 && k2 == 1)) {          ts+=1;        } else {          tv+=1;        }      }      if (aa1 != aa2) {        non=1;      }switch (ts) {case 0:switch (tv) {case 1:          rateClass=3;        break;case 2:      rateClass=9;    break;case 3:  rateClass=17;break;default :break;}break;case 1:switch (tv) {case 0:rateClass=1;break;case 1:rateClass=7;break;case 2:rateClass=15;break;default :break;}break;case 2:switch (tv) {case 0:rateClass=5;break;case 1:rateClass=13;break;default :break;}break;case 3:rateClass=11;break;default :break;}if (non == 1) {rateClass+=1;}rateMap[i]=rateClass;i++;}}}  }
class C{  private boolean isSecondLineOfStringContinuation(int offset){  try {    int offsetLine=fDocument.getLineOfOffset(offset);    fPosition=offset;    while (true) {      nextToken();switch (fToken) {case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:        skipScope();      break;case Symbols.TokenPLUS:    if ((offsetLine - fLine) > 1) {      return false;    }  break;case Symbols.TokenCOMMA:case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenEQUAL:int stringStartingOffset=fScanner.findNonWhitespaceForwardInAnyPartition(fPosition + 1,JavaHeuristicScanner.UNBOUND);int stringStartingLine=fDocument.getLineOfOffset(stringStartingOffset);if ((offsetLine - stringStartingLine) == 1) {fPosition=stringStartingOffset;return true;} else {return false;}case Symbols.TokenLBRACKET:case Symbols.TokenEOF:if ((offsetLine - fLine) == 1) return true; else return false;}}} catch (BadLocationException e) {Log.error(JavaIndenter.class,e);return false;}}  }
class C{  public static JCExpression skipParens(JCExpression tree){  while (tree.hasTag(PARENS)) {    tree=((JCParens)tree).expr;  }  return tree;}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one images must be specified.");    return;  }  try {    destination=new WhiteboxRaster(destHeader,"rw");    nCols=destination.getNumberColumns();    nRows=destination.getNumberRows();    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    north=destination.getNorth();    south=destination.getSouth();    east=destination.getEast();    west=destination.getWest();    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    outputNoData=destination.getNoDataValue();    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    double[][] imageData=new double[numImages][11];    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();    }    if (resampleMethod.equals("nearest neighbour")) {      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[i][0]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private PNGEncodeParam.Gray createGrayParam(byte[] redPalette,byte[] greenPalette,byte[] bluePalette,byte[] alphaPalette){  PNGEncodeParam.Gray param=new PNGEncodeParam.Gray();  int numTransparent=0;  int grayFactor=255 / ((1 << bitDepth) - 1);  int entries=1 << bitDepth;  for (int i=0; i < entries; i++) {    byte red=redPalette[i];    if ((red != i * grayFactor) || (red != greenPalette[i]) || (red != bluePalette[i])) {      return null;    }    byte alpha=alphaPalette[i];    if (alpha == (byte)0) {      param.setTransparentGray(i);      ++numTransparent;      if (numTransparent > 1) {        return null;      }    } else     if (alpha != (byte)255) {      return null;    }  }  return param;}  }
class C{  public RandomGen(){  random.setSeed(12);}  }
class C{  @Override public void serviceRemoved(ServiceEvent event){synchronized (this) {    _infos.remove(event.getName());    _events.remove(event.getName());  }}  }
class C{  protected ReplacedElement replaceImage(UserAgentCallback uac,LayoutContext context,Element elem,int cssWidth,int cssHeight){  ReplacedElement re=null;  re=lookupImageReplacedElement(elem);  if (re == null) {    Image im=null;    String imageSrc=context.getNamespaceHandler().getImageSourceURI(elem);    if (imageSrc == null || imageSrc.length() == 0) {      XRLog.layout(Level.WARNING,"No source provided for img element.");      re=newIrreplaceableImageElement(cssWidth,cssHeight);    } else {      FSImage fsImage=uac.getImageResource(imageSrc).getImage();      if (fsImage != null) {        im=((AWTFSImage)fsImage).getImage();      }      if (im != null) {        re=new ImageReplacedElement(im,cssWidth,cssHeight);      } else {        re=newIrreplaceableImageElement(cssWidth,cssHeight);      }    }    storeImageReplacedElement(elem,re);  }  return re;}  }
class C{  public final Vec2D floor(){  x=MathUtils.floor(x);  y=MathUtils.floor(y);  return this;}  }
class C{  protected int index(int slice,int row,int column){  return _sliceOffset(_sliceRank(slice)) + _rowOffset(_rowRank(row)) + _columnOffset(_columnRank(column));}  }
class C{  private void processVolume(JobContext jobContext,CIMObjectPath volumePath,String nativeID,URI volumeId,WBEMClient client,DbClient dbClient,StringBuilder logMsgBuilder,Calendar creationTime) throws Exception, IOException, DeviceControllerException, WBEMException {  Volume volume=dbClient.queryObject(Volume.class,volumeId);  CIMInstance volumeInstance=commonVolumeUpdate(dbClient,client,volume,volumePath);  URI storageSystemURI=volume.getStorageController();  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageSystemURI);  if (volume.getIsComposite() && _cimPath != null) {    ArrayList<CIMArgument> list=new ArrayList<CIMArgument>();    CIMArgument<CIMObjectPath> volumeReference=new CIMArgument<CIMObjectPath>(SmisConstants.CP_THE_ELEMENT,CIMDataType.getDataType(volumePath),volumePath);    CIMArgument<UnsignedInteger16> requestType=new CIMArgument<UnsignedInteger16>("RequestType",CIMDataType.UINT16_T,new UnsignedInteger16(2));    list.add(volumeReference);    list.add(requestType);    CIMArgument[] inArgs={};    inArgs=list.toArray(inArgs);    CIMArgument[] outArgs=new CIMArgument[5];    CIMObjectPath elementCompositionServicePath=_cimPath.getElementCompositionSvcPath(storageSystem);    SmisCommandHelper helper=jobContext.getSmisCommandHelper();    StorageSystem forProvider=helper.getStorageSystemForProvider(storageSystem,volume);    helper.invokeMethod(forProvider,elementCompositionServicePath,"GetCompositeElements",inArgs,outArgs);    CIMObjectPath[] metaMembersPaths=(CIMObjectPath[])_cimPath.getFromOutputArgs(outArgs,"OutElements");    CIMObjectPath metaMemberPath=metaMembersPaths[1];    CIMInstance cimVolume=helper.getInstance(forProvider,metaMemberPath,false,false,new String[]{SmisConstants.CP_CONSUMABLE_BLOCKS,SmisConstants.CP_BLOCK_SIZE});    CIMProperty consumableBlocks=cimVolume.getProperty(SmisConstants.CP_CONSUMABLE_BLOCKS);    CIMProperty blockSize=cimVolume.getProperty(SmisConstants.CP_BLOCK_SIZE);    Long size=Long.valueOf(consumableBlocks.getValue().toString()) * Long.valueOf(blockSize.getValue().toString());    volume.setMetaMemberSize(size);    _log.info(String.format("Meta member info: blocks --- %s, block size --- %s, size --- %s .",consumableBlocks.getValue().toString(),blockSize.getValue().toString(),size));  }  specificProcessing(storageSystem,dbClient,client,volume,volumeInstance,volumePath);  dbClient.updateObject(volume);  if (logMsgBuilder.length() != 0) {    logMsgBuilder.append("\n");  }  logMsgBuilder.append(String.format("Created volume successfully .. NativeId: %s, URI: %s",nativeID,getTaskCompleter().getId()));}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  super.startPrefixMapping(prefix,uri);  prefixMapping=new PrefixMapping(prefix,uri,prefixMapping);}  }
class C{  public UTMCoord(Angle latitude,Angle longitude,int zone,String hemisphere,double easting,double northing){  this(latitude,longitude,zone,hemisphere,easting,northing,Angle.fromDegreesLongitude(0.0));}  }
class C{  @Override public String value(){  return value;}  }
class C{  public WrappedIndentingWriter(Writer out,int width,String prefix){  super(out);  if (out == null) {    throw new NullPointerException("out == null");  }  if (width < 0) {    throw new IllegalArgumentException("width < 0");  }  if (prefix == null) {    throw new NullPointerException("prefix == null");  }  this.width=(width != 0) ? width : Integer.MAX_VALUE;  this.maxIndent=width >> 1;  this.prefix=(prefix.length() == 0) ? null : prefix;  bol();}  }
class C{  public void addAggregation(ChronixFunction aggregation){  this.aggregations.add(aggregation);}  }
class C{  private Map<String,List<StoragePool>> discoverStoragePools(StorageSystem system,VNXeApiClient client,StringSet supportedProtocols,List<StoragePool> poolsToMatchWithVpool) throws VNXeException {  Map<String,List<StoragePool>> storagePools=new HashMap<String,List<StoragePool>>();  List<StoragePool> newPools=new ArrayList<StoragePool>();  List<StoragePool> existingPools=new ArrayList<StoragePool>();  _logger.info("Start storage pool discovery for storage system {}",system.getId());  try {    List<VNXePool> pools=client.getPools();    for (    VNXePool vnxePool : pools) {      StoragePool pool=null;      URIQueryResultList results=new URIQueryResultList();      String poolNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,vnxePool.getId(),NativeGUIDGenerator.POOL);      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(poolNativeGuid),results);      boolean isModified=false;      Iterator<URI> it=results.iterator();      if (it.hasNext()) {        StoragePool tmpPool=_dbClient.queryObject(StoragePool.class,it.next());        if (tmpPool.getStorageDevice().equals(system.getId())) {          pool=tmpPool;          _logger.info("Found StoragePool {} at {}",pool.getPoolName(),poolNativeGuid);        }      }      if (pool == null) {        pool=new StoragePool();        pool.setId(URIUtil.createId(StoragePool.class));        pool.setLabel(poolNativeGuid);        pool.setNativeGuid(poolNativeGuid);        pool.setPoolServiceType(PoolServiceType.block_file.toString());        pool.setStorageDevice(system.getId());        pool.setNativeId(vnxePool.getId());        pool.setPoolName(vnxePool.getName());        pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());        pool.setDiscoveryStatus(DiscoveredDataObject.DiscoveryStatus.VISIBLE.name());        pool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THIN_AND_THICK.toString());        pool.setPoolClassName(StoragePool.PoolClassNames.VNXe_Pool.name());        pool.setPoolServiceType(StoragePool.PoolServiceType.block_file.name());        pool.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        _logger.info("Creating new storage pool using NativeGuid : {}",poolNativeGuid);        newPools.add(pool);      } else {        _logger.info("updating the pool: {}",poolNativeGuid);        if (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getProtocols(),supportedProtocols)) {          isModified=true;        }        existingPools.add(pool);      }      Health poolHealth=vnxePool.getHealth();      if (poolHealth != null) {        int value=poolHealth.getValue();        if (value == Health.HealthEnum.OK.getValue() || value == Health.HealthEnum.OK_BUT.getValue()) {          pool.setOperationalStatus(StoragePool.PoolOperationalStatus.READY.name());        } else {          pool.setOperationalStatus(StoragePool.PoolOperationalStatus.NOTREADY.name());        }      }      pool.setProtocols(supportedProtocols);      StringSet raidLevels=new StringSet();      RaidTypeEnum raid=vnxePool.getRaidTypeEnum();      if (raid != null) {        raidLevels.add(vnxePool.getRaidTypeEnum().name());        pool.setSupportedRaidLevels(raidLevels);      }      pool.setAutoTieringEnabled(getPoolAutoTieringEnabled(vnxePool,system));      List<PoolTier> poolTiers=vnxePool.getTiers();      StringSet diskTypes=new StringSet();      if (poolTiers != null) {        for (        PoolTier poolTier : poolTiers) {          List<RaidGroup> raidGroups=poolTier.getRaidGroups();          if (raidGroups != null) {            for (            RaidGroup raidGroup : raidGroups) {              VNXeBase diskGroup=raidGroup.getDiskGroup();              if (diskGroup != null) {                DiskGroup diskgroupObj=client.getDiskGroup(diskGroup.getId());                diskTypes.add(diskgroupObj.getDiskTechnologyEnum().name());              }            }          }        }      }      List<Disk> disks=client.getDisksForPool(vnxePool.getId());      if (disks != null) {        for (        Disk disk : disks) {          if (disk.getDiskTechnologyEnum() != null) {            diskTypes.add(disk.getDiskTechnologyEnum().name());          }        }      }      pool.setSupportedDriveTypes(diskTypes);      double size=vnxePool.getSizeTotal();      if (size > 0) {        pool.setTotalCapacity(VNXeUtils.convertDoubleSizeToViPRLong(size));      }      long free=VNXeUtils.convertDoubleSizeToViPRLong(vnxePool.getSizeFree());      if (free > 0) {        pool.setFreeCapacity(free);        pool.setMaximumThinVolumeSize(free);        pool.setMaximumThickVolumeSize(free);      }      long subscribed=VNXeUtils.convertDoubleSizeToViPRLong(vnxePool.getSizeSubscribed());      pool.setSubscribedCapacity(subscribed);      if (isModified || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getCompatibilityStatus(),DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name()) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveryStatus.VISIBLE.name())) {        poolsToMatchWithVpool.add(pool);      }      pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }  } catch (  VNXeException e) {    _logger.error("Discovery of storage pools failed for storage system {} for {}",system.getId(),e.getMessage());    throw e;  }  for (  StoragePool newPool : newPools) {    _logger.info("New Storage Pool : " + newPool);    _logger.info("New Storage Pool : {} : {}",newPool.getNativeGuid(),newPool.getId());  }  for (  StoragePool pool : existingPools) {    _logger.info("Old Storage Pool : " + pool);    _logger.info("Old Storage Pool : {} : {}",pool.getNativeGuid(),pool.getId());  }  storagePools.put(NEW,newPools);  storagePools.put(EXISTING,existingPools);  _logger.info("Number of pools found {} : ",storagePools.size());  _logger.info("Storage pool discovery for storage system {} complete",system.getId());  return storagePools;}  }
class C{  protected CharFilterFactory charFilterFactory(String name,Version matchVersion,ResourceLoader loader,String... keysAndValues) throws Exception {  return (CharFilterFactory)analysisFactory(CharFilterFactory.lookupClass(name),matchVersion,loader,keysAndValues);}  }
class C{  public static RegionRequest createForGet(CacheInfo c,String path){  RegionRequest m=new RegionRequest();  m.action=GET_REGION;  m.cacheId=c.getId();  m.path=path;  RegionRequest.setFriendlyName(m);  return m;}  }
class C{  public void testConstrInt(){  int a=732546982;  String res="732546982";  int resScale=0;  BigDecimal result=new BigDecimal(a);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public IntentFilter(){  mPriority=0;  mActions=new ArrayList<String>();}  }
class C{  public int executeUpdateDelete(){  acquireReference();  try {    return getSession().executeForChangedRowCount(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public static Uri buildUri(Long id){  return ContentUris.withAppendedId(CONTENT_URI,id);}  }
class C{  public static ModifiableHyperBoundingBox unionTolerant(SpatialComparable mbr1,SpatialComparable mbr2){  if (mbr1 == null && mbr2 == null) {    return null;  }  if (mbr1 == null) {    return new ModifiableHyperBoundingBox(mbr2);  }  if (mbr2 == null) {    return new ModifiableHyperBoundingBox(mbr1);  }  return union(mbr1,mbr2);}  }
class C{  public synchronized void put(final String key,final byte[] value){  if (closed || indexMap.containsKey(key))   return;  try {    final ValueInfo valueInfo=new ValueInfo((int)dataFile.length(),value.length);    dataFile.setLength(valueInfo.pos + value.length);    dataFile.seek(valueInfo.pos);    dataFile.write(value);    indexFile.writeUTF(key);    indexFile.writeInt(valueInfo.pos);    indexFile.writeInt(valueInfo.size);    indexMap.put(key,valueInfo);    pcs.firePropertyChange(null,null,null);  } catch (  final IOException ie) {    Env.LOGGER.error("Error adding new value to persistent map: " + rootFolder,ie);  }}  }
class C{  public void drawString(AttributedCharacterIterator iterator,float x,float y){  mGraphics.drawString(iterator,x,y);}  }
class C{  public static double P_Recall(int Y[][],int Ypred[][],int j){  return P_Recall(MatrixUtils.getCol(Y,j),MatrixUtils.getCol(Ypred,j));}  }
class C{  public Interval(ReadablePeriod period,ReadableInstant end){  super(period,end);}  }
class C{  public NodeList selectNodeList(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodelist();}  }
class C{  private void moveToProperDistance(){  final double dist=leader.squaredDistance(follower);  int range=leader.getPerceptionRange();  if (dist > range + 1) {    follower.setMovement(leader,0,range,dist * 1.5);    follower.setPath(getOneThirdOfPath(follower.getPath()));    follower.pathnotifier.addObserver(this);  } else {    follower.stop();    follower.pathnotifier.deleteObservers();    finish.update(null,null);  }}  }
class C{  public static <T,R>Function<T,R> memoizeFunction(Function1<T,R> fn){  Map<T,R> lazy=new ConcurrentHashMap<>();  return null;}  }
class C{  public SVGFeTileElementBridge(){}  }
class C{  public int previousIndex(){  return tokenPos - 1;}  }
class C{  public static Time convertNanoToTime(long nanos){  long millis=nanos / 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  long ms=getMillis(null,1970,1,1,(int)(h % 24),(int)m,(int)s,(int)millis);  return new Time(ms);}  }
class C{  public SurfaceImage(){}  }
class C{  public static short toShort(byte[] bytes){  return toShort(bytes[0],bytes[1]);}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public final void testGetDropDownView(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertNotNull(proxySpinnerAdapter.getDropDownView(0,null,null));}  }
class C{  public static void main(String... args) throws Exception {  new TestRecoverKillLoop().runTest(Integer.MAX_VALUE);}  }
class C{  static boolean hasGatheredViolations(){  return gatheredViolations.get() != null;}  }
class C{  public TupleTableConfig(final String table,final String rowKeyField){  super(table);  this.tupleRowKeyField=rowKeyField;  this.tupleTimestampField="";  this.columnFamilies=new HashMap<String,Set<String>>();}  }
class C{  public String peekElement(final int i){  if (i < -pointer || i > 0) {    throw new ArrayIndexOutOfBoundsException(i);  }  final int idx=pointer + i - 1;  final String name;  final Integer integer=indexMapStack[idx].get(pathStack[idx]);  final int index=integer.intValue();  if (index > 1) {    final StringBuffer chunk=new StringBuffer(pathStack[idx].length() + 6);    chunk.append(pathStack[idx]).append('[').append(index).append(']');    name=chunk.toString();  } else {    name=pathStack[idx];  }  return name;}  }
class C{  public StringInputStreamSink(String tag,InputStream in,int maxChars){  this.tag=tag;  this.inputStream=in;  if (maxChars <= 0 || maxChars > MAX_CHARS)   this.maxChars=MAX_CHARS; else   this.maxChars=maxChars;}  }
class C{  public Minute(Date time){  this(time,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  public void testGet() throws Exception {  IgniteCache<Long,Long> cache=populate();  for (long i=from; i < to; i++) {    Long val=cache.get(i);    assertNotNull(val);    assertEquals(i,val.longValue());  }  assertEquals(0,swappedCnt.get());  assertEquals(0,offheapedCnt.get());  assertEquals(to - from,unswapedCnt.get() + onheapedCnt.get());  checkEntries(cache);  assertEquals(to - from,unswapedCnt.get() + onheapedCnt.get());}  }
class C{  @Override public boolean isDataFlavorSupported(DataFlavor flavor){  return transferables.containsKey(flavor);}  }
class C{  public Iterator<E> iterator(){  return new Itr(toArray());}  }
class C{  public static String md5(final InputStream in) throws IOException {  return md5(in,1024);}  }
class C{  public CommandLine(){  arguments=new ArrayList<>();}  }
class C{  public static DioriteRandom newRandom(){  return new DioriteRandom();}  }
class C{  public float tf(int freq,int passageLen){  float norm=k1 * ((1 - b) + b * (passageLen / pivot));  return freq / (freq + norm);}  }
class C{  private int effectiveContentLength(){  if (!isLobType(contentColumnType) && contentColumnLength == 0) {switch (contentColumnType) {case (CHAR_CONTENT):      return DEFAULT_VARCHAR2_CONTENT_LENGTH;case (NCHAR_CONTENT):    return DEFAULT_NVARCHAR2_CONTENT_LENGTH;case (RAW_CONTENT):  return DEFAULT_RAW_CONTENT_LENGTH;default :throw new IllegalStateException();}}return contentColumnLength;}  }
class C{  public void log(String errorString,Throwable t){  log.log(errorString,t);}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public static boolean wordMatchesIgnoreCase(String source,String match){  match=match.toLowerCase();  return wordMatchesLowerCase(source,match);}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int deltaX=computeScrollXDeltaToGetChildRectOnScreen(rect);  final int deltaY=computeScrollYDeltaToGetChildRectOnScreen(rect);  final boolean scroll=deltaX != 0 && deltaY != 0;  if (scroll) {    if (immediate) {      scrollBy(deltaX,deltaY);    } else {      smoothScrollBy(deltaX,deltaY);    }  }  return scroll;}  }
class C{  public IsolatedClassLoader deleteLoader(){  IsolatedClassLoader l=loader;  if (loader != null) {    loader.clear();  }  loader=null;  return l;}  }
class C{  private AttributeRule(String name,Class c,boolean optional){  this.name=name;  this.c=c;  this.optional=optional;}  }
class C{  private MinMax retrieveMinMaxCountPK(Database conn,Table table) throws ReplicatorException {  String pkName=table.getPrimaryKey().getColumns().get(0).getName();  String sql=String.format("SELECT MIN(%s),MAX(%s), COUNT(%s) FROM %s",pkName,pkName,pkName,conn.getDatabaseObjectName(table.getSchema()) + '.' + conn.getDatabaseObjectName(table.getName()));  sql+=AbstractChunk.getFlashbackQueryClause(conn,eventId);  Statement st=null;  ResultSet rs=null;  try {    st=conn.createStatement();    rs=st.executeQuery(sql);    if (rs.next()) {      Object min=rs.getObject(1);      Object max=rs.getObject(2);      if (min instanceof Long && max instanceof Long) {        return new MinMax(((Long)min),((Long)max),rs.getLong(3));      } else       if (min instanceof BigDecimal && max instanceof BigDecimal) {        return new MinMax(((BigDecimal)min),((BigDecimal)max),rs.getLong(3));      }      return null;    }  } catch (  Exception e) {    logger.warn("Failed to retrieve min, max and count values for PK " + pkName + " in table "+ conn.getDatabaseObjectName(table.getSchema())+ '.'+ conn.getDatabaseObjectName(table.getName()));  } finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {        e.printStackTrace();      }    }    if (st != null) {      try {        st.close();      } catch (      SQLException e) {        e.printStackTrace();      }    }  }  return null;}  }
class C{  public ArrayIndexOutOfBoundsException(){  super();}  }
class C{  private boolean isZero(float num){  return ((num < ZERO_TOLERANCE) && (num > -1 * ZERO_TOLERANCE));}  }
class C{  public final RenderBuffer putByte(byte x){  unsafe.putByte(curAddress,x);  curAddress+=SIZEOF_BYTE;  return this;}  }
class C{  public sup addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  ICC_Profile(Profile p){  this.cmmProfile=p;}  }
class C{  public void keyReleased(KeyEvent e){  log.finest("Key=" + e.getKeyCode() + " - "+ e.getKeyChar()+ " -> "+ getText());  if (e.getKeyCode() == KeyEvent.VK_ESCAPE)   setText(m_initialText);}  }
class C{  public static BinaryMessage correctPDU1(BinaryMessage message){  return correctPDU(message,PDU1_CHECKSUMS,224);}  }
class C{  public int numArguments(){  return m_NumArguments;}  }
class C{  private void updatePurchasedItem(String productId,int quantity){  if (quantity == 0) {    mDb.delete(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_PRODUCT_ID_COL + "=?",new String[]{productId});    return;  }  ContentValues values=new ContentValues();  values.put(PURCHASED_PRODUCT_ID_COL,productId);  values.put(PURCHASED_QUANTITY_COL,quantity);  mDb.replace(PURCHASED_ITEMS_TABLE_NAME,null,values);}  }
class C{  public void log(java.util.logging.Level level,CharSequence message,Throwable e){  LogRecord rec=new ELKILogRecord(level,message);  rec.setThrown(e);  logger.log(rec);}  }
class C{  public synchronized Relationship removeRelationship(Primitive type,Vertex target){  return removeRelationship(this.network.createVertex(type),target);}  }
class C{  public boolean isArmed(){  return this.controller != null && this.controller.isArmed();}  }
class C{  protected void generateList(@NotNull String prefix,@NotNull StringBuilder sb,@NotNull List<NameDesc> list,@NotNull String tag,boolean align_comments,boolean generate_empty_tags,boolean wrapDescription){  CodeStyleSettings settings=myFormatter.getSettings();  CommonCodeStyleSettings.IndentOptions indentOptions=settings.getIndentOptions(JavaFileType.INSTANCE);  String continuationIndent=new IndentInfo(0,indentOptions.CONTINUATION_INDENT_SIZE,0).generateNewWhiteSpace(indentOptions);  int max=0;  if (align_comments && !wrapDescription) {    for (    NameDesc nd : list) {      int currentLength=nd.name.length();      if (isNull(nd.desc) && !generate_empty_tags)       continue;      if (currentLength > max) {        max=currentLength;      }    }  }  StringBuilder fill=new StringBuilder(prefix.length() + tag.length() + max+ 1);  fill.append(prefix);  StringUtil.repeatSymbol(fill,' ',max + 1 + tag.length());  String wrapParametersPrefix=prefix + continuationIndent;  for (  NameDesc nd : list) {    if (isNull(nd.desc) && !generate_empty_tags)     continue;    if (wrapDescription && !isNull(nd.desc)) {      sb.append(prefix).append(tag).append(nd.name).append("\n");      sb.append(wrapParametersPrefix);      sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc,wrapParametersPrefix));    } else     if (align_comments) {      sb.append(prefix);      sb.append(tag);      sb.append(nd.name);      int spacesNumber=max + 1 - nd.name.length();      StringUtil.repeatSymbol(sb,' ',Math.max(0,spacesNumber));      sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc,fill));    } else {      sb.append(prefix);      String description=(nd.desc == null) ? "" : nd.desc;      sb.append(myFormatter.getParser().formatJDTagDescription(tag + nd.name + " "+ description,prefix));    }  }}  }
class C{  public void testNextDoubleBoundNonPositive(){  SplittableRandom sr=new SplittableRandom();  Runnable[] throwingActions={null,null,null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  public boolean next(){  if (looping == false) {    return false;  }  if (last == true) {    return false;  }  if (count == 0) {    value=start;    first=true;  } else {    value+=step;    first=false;  }  count++;  last=isLastIteration(value + step);  return true;}  }
class C{  public GoogleBaseFeed(){  super(GoogleBaseEntry.class);  googleBaseAttributesExtension=new GoogleBaseAttributesExtension();  addExtension(googleBaseAttributesExtension);}  }
class C{  public MinHash(final int size,final int dict_size){  init(size,dict_size,new Random());}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_CLASS_EXPRESSION___GET_ANNOTATIONS:    return getAnnotations();case N4JSPackage.N4_CLASS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:  return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  private static int bcd(char digit){  if (digit >= '0' && digit <= '9') {    return digit - '0';  }switch (digit) {case '.':    return 10;case '-':  return 11;case '+':return 12;default :return 13;}}  }
class C{  public Jerry first(){  List<Node> result=new NodeList(nodes.length);  if (nodes.length > 0) {    result.add(nodes[0]);  }  return new Jerry(this,result);}  }
class C{  protected Method clone(){  try {    return (Method)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public C upperEndpoint(){  return upperBound.endpoint();}  }
class C{  public void verify(boolean repair,boolean verbose) throws IOException {  boolean headerChanged=false;  long fLen=raf.length();  if (verbose) {    Debug.output("Checking file length...");    System.out.flush();  }  if (fileLength == fLen) {    if (verbose) {      Debug.output("correct.");    }  } else {    if (verbose) {      Debug.output("incorrect (got " + fileLength + ", should be "+ fLen+ ")");    }    if (repair) {      fileLength=fLen;      writeBEInt(header,24,((int)fLen / 2));      headerChanged=true;      if (verbose) {        Debug.output("...repaired.");      }    }  }  raf.seek(100);  ESRIRecord r;  int nRecords=0;  Vector<ESRIRecord> v=new Vector<ESRIRecord>();  ESRIBoundingBox bounds=new ESRIBoundingBox();  long recStart=raf.getFilePointer();  byte intBuf[]=new byte[4];  while ((r=getNextRecord()) != null) {    long recEnd=raf.getFilePointer();    nRecords++;    v.addElement(r);    if (r.getRecordNumber() != nRecords) {      writeBEInt(intBuf,0,nRecords);      raf.seek(recStart);      raf.write(intBuf,0,4);      raf.seek(recEnd);    }    if (fileShapeType == SHAPE_TYPE_NULL) {      Debug.output("updating shape type in header.");      fileShapeType=r.getShapeType();      writeLEInt(header,32,fileShapeType);      headerChanged=true;    }    if (r.getShapeType() != fileShapeType) {      Debug.output("invalid shape type " + r.getShapeType() + ", expecting "+ fileShapeType);    }    bounds.addBounds(r.getBoundingBox());    recStart=recEnd;  }  if (!fileBounds.equals(bounds)) {    Debug.output("adjusting bounds");    Debug.output("from min: " + fileBounds.min);    Debug.output("to min: " + bounds.min);    Debug.output("from max: " + fileBounds.max);    Debug.output("to max: " + bounds.max);    writeBox(header,36,bounds);    headerChanged=true;    fileBounds=bounds;  }  if (headerChanged) {    Debug.output("writing changed header");    raf.seek(0);    raf.write(header,0,100);  }}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/san-aliases") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep updateAliases(WwnAliasUpdateParams updateAliasParam,@PathParam("id") URI id) throws InternalException {  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  ArgValidator.checkFieldNotEmpty(updateAliasParam.getUpdateAliases(),"aliases");  NetworkSystem device=queryResource(id);  String fabricId=updateAliasParam.getFabricId();  if (Type.brocade.toString().equals(device.getSystemType())) {    ArgValidator.checkFieldNotEmpty(fabricId,"fabric-id");  }  String fabricWwn=null;  if (WWNUtility.isValidWWN(fabricId)) {    fabricWwn=fabricId;    fabricId=fabricId.replaceAll(":","");  }  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,device.getId(),task,ResourceOperationTypeEnum.UPDATE_ALIAS);  List<ZoneWwnAliasUpdate> zoneAliasesUpdate=new ArrayList<ZoneWwnAliasUpdate>();  for (  WwnAliasUpdateParam updateAlias : updateAliasParam.getUpdateAliases()) {    validateAlias(updateAlias,false);    if (!StringUtils.isEmpty(updateAlias.getNewAddress())) {      validateWWN(updateAlias.getNewAddress());    }    if (!StringUtils.isEmpty(updateAlias.getNewName())) {      validateWWNAlias(updateAlias.getNewName());    }    zoneAliasesUpdate.add(new ZoneWwnAliasUpdate(updateAlias.getName(),updateAlias.getNewName(),updateAlias.getNewAddress(),updateAlias.getAddress()));    auditOp(OperationTypeEnum.UPDATE_ALIAS,true,AuditLogManager.AUDITOP_BEGIN,updateAlias.getName(),device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  }  NetworkController controller=getNetworkController(device.getSystemType());  controller.updateAliases(device.getId(),fabricId,fabricWwn,zoneAliasesUpdate,task);  return toTask(device,task,op);}  }
class C{  public NewMergedGraphPage(ISelection selection){  super(selection,PAGE_LABEL,"This wizard creates a new dependency graph" + " by merging existing dependency graphs.",createFilename("Merged"));}  }
class C{  static PageStreamTrunk read(PageStore store,Data data,int pageId){  PageStreamTrunk p=new PageStreamTrunk(store,data,pageId);  p.read();  return p;}  }
class C{  public boolean visitUnionPath(ExpressionOwner owner,UnionPathIterator path){  return true;}  }
class C{  public BasicEofSensorWatcher(ManagedClientConnection conn,boolean reuse){  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  managedConn=conn;  attemptReuse=reuse;}  }
class C{  protected void hideProgressDialog(){  if (mProgressDialog != null && mProgressDialog.isShowing()) {    mProgressDialog.dismiss();    mProgressDialog=null;  }}  }
class C{  @Override public void accept(Object source,Throwable t){  if (job == null)   throw new IllegalStateException("A job has not been instantiated");  if (t != null) {    Executable.this.setLastError(t);    job.updateHealth(t);    cleanup();  } else   if (job.getCurrentState() == Job.State.RUNNING && (source == userScheduler || source == userThreads) && !hasActiveTasks()) {    logger.info("No more active user tasks");  }  notifyCompleter();}  }
class C{  public long computeCrc() throws IOException {  if (data == null || crcType == CRC_TYPE_NONE)   computedCrc=0; else   if (crcType == CRC_TYPE_32) {    computedCrc=computeCrc32(data);  } else {    throw new IOException("Invalid crc type: " + crcType);  }  return computedCrc;}  }
class C{  private GridCheckpointManager checkpoints(Ignite ignite){  assert ignite != null;  return ((IgniteKernal)ignite).context().checkpoint();}  }
class C{  public CModule(final int moduleId,final String name,final String comment,final Date creationDate,final Date modificationDate,final String md5,final String sha1,final int functionCount,final int customViewCount,final IAddress fileBase,final IAddress imageBase,final DebuggerTemplate debuggerTemplate,final INaviRawModule rawModule,final int initializationState,final boolean isStared,final SQLProvider provider){  Preconditions.checkArgument(moduleId > 0,"IE00135: Module ID must be larger than 0");  Preconditions.checkNotNull(name,"IE00136: Module Name can not be null");  Preconditions.checkNotNull(comment,"IE00137: Module Comment can not be null");  Preconditions.checkNotNull(creationDate,"IE00139: Module Creation Date can not be null");  Preconditions.checkNotNull(modificationDate,"IE00140: Module Modification Date can not be null");  Preconditions.checkNotNull(md5,"IE00141: Module MD5 hash can not be null");  Preconditions.checkArgument(Convert.isMD5String(md5),"IE00142: Invalid MD5 string");  Preconditions.checkNotNull(sha1,"IE00143: Module SHA1 hash can not be null");  Preconditions.checkArgument(Convert.isSha1String(sha1),"IE00144: Invalid SHA1 string");  Preconditions.checkArgument(functionCount >= 0,"IE00145: Function count can not be negative");  Preconditions.checkArgument(customViewCount >= 0,"IE00146: Custom View Count argument can not be null");  Preconditions.checkNotNull(fileBase,"IE00147: File Base argument can not be null");  Preconditions.checkNotNull(imageBase,"IE00148: Image Base argument can not be null");  Preconditions.checkArgument(!((debuggerTemplate != null) && !debuggerTemplate.inSameDatabase(provider)),"IE00149: Module is not in same database as debugger template argument");  Preconditions.checkNotNull(provider,"IE00150: Invalid SQL provider");  m_configuration=new CModuleConfiguration(this,provider,m_listeners,moduleId,name,comment,creationDate,modificationDate,md5,sha1,fileBase,imageBase,debuggerTemplate,isStared,rawModule);  m_functionCount=functionCount;  m_customViewCount=customViewCount;  m_initializationState=initializationState;  m_provider=provider;}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  @Override protected Network providePreparedNetwork(String path2MATSimNetwork,String path2VissimZoneShp){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  MatsimNetworkReader NetworkReader=new MatsimNetworkReader(scenario.getNetwork());  NetworkReader.readFile(path2MATSimNetwork);  Network network=scenario.getNetwork();  Set<SimpleFeature> features=new HashSet<SimpleFeature>();  features.addAll(ShapeFileReader.getAllFeatures(path2VissimZoneShp));  SHPFileUtils util=new SHPFileUtils();  Geometry cuttingArea=util.mergeGeometries(features);  CoordAnalyzer coordAnalyzer=new CoordAnalyzer(cuttingArea);  Set<Link> linkSet2Remove=new HashSet<Link>();  for (  Link link : network.getLinks().values()) {    if (!coordAnalyzer.isLinkAffected(link)) {      linkSet2Remove.add(link);    }  }  for (  Link link : linkSet2Remove) {    network.removeLink(link.getId());  }  return network;}  }
class C{  public LaunchOption(String version,Authenticator authenticator,MinecraftDirectory minecraftDir) throws IOException {  this(requireVersion(minecraftDir,version),authenticator,minecraftDir);}  }
class C{  public String fetchValue(QName qn){  String value=null;  StringBuffer sb=new StringBuffer();  sb.append("<");  String prefix=qn.getNamespacePrefix();  if ((prefix != null) && (prefix.length() > 0)) {    sb.append(prefix).append(":");  }  sb.append(qn.getName());  String uri=qn.getNamespaceURI();  if ((uri != null) && (uri.length() > 0)) {    sb.append(" xmlns");    if ((prefix != null) && (prefix.length() > 0)) {      sb.append(":").append(prefix);    }    sb.append("=\"").append(uri).append("\"");  }  sb.append("/>");  value=sb.toString();  return value;}  }
class C{  private static int calculateAttributeSizeInBytes(AttributeValue value){  int attrValSize=0;  if (value == null) {    return attrValSize;  }  if (value.getB() != null) {    ByteBuffer b=value.getB();    attrValSize+=b.remaining();  } else   if (value.getS() != null) {    String s=value.getS();    attrValSize+=s.getBytes(UTF8).length;  } else   if (value.getN() != null) {    attrValSize+=MAX_NUMBER_OF_BYTES_FOR_NUMBER;  } else   if (value.getBS() != null) {    List<ByteBuffer> bs=value.getBS();    for (    ByteBuffer b : bs) {      if (b != null) {        attrValSize+=b.remaining();      }    }  } else   if (value.getSS() != null) {    List<String> ss=value.getSS();    for (    String s : ss) {      if (s != null) {        attrValSize+=s.getBytes(UTF8).length;      }    }  } else   if (value.getNS() != null) {    List<String> ns=value.getNS();    for (    String n : ns) {      if (n != null) {        attrValSize+=MAX_NUMBER_OF_BYTES_FOR_NUMBER;      }    }  } else   if (value.getBOOL() != null) {    attrValSize+=1;  } else   if (value.getNULL() != null) {    attrValSize+=1;  } else   if (value.getM() != null) {    for (    Map.Entry<String,AttributeValue> entry : value.getM().entrySet()) {      attrValSize+=entry.getKey().getBytes(UTF8).length;      attrValSize+=calculateAttributeSizeInBytes(entry.getValue());      attrValSize+=BASE_LOGICAL_SIZE_OF_NESTED_TYPES;    }    attrValSize+=LOGICAL_SIZE_OF_EMPTY_DOCUMENT;  } else   if (value.getL() != null) {    List<AttributeValue> list=value.getL();    for (Integer i=0; i < list.size(); i++) {      attrValSize+=calculateAttributeSizeInBytes(list.get(i));      attrValSize+=BASE_LOGICAL_SIZE_OF_NESTED_TYPES;    }    attrValSize+=LOGICAL_SIZE_OF_EMPTY_DOCUMENT;  }  return attrValSize;}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (m_Train.equalHeaders(instance.dataset()) == false) {    throw new Exception("Incompatible instance types\n" + m_Train.equalHeadersMsg(instance.dataset()));  }  if (instance.classIsMissing()) {    return;  }  m_Train.add(instance);  m_NNSearch.update(instance);  m_kNNValid=false;  if ((m_WindowSize > 0) && (m_Train.numInstances() > m_WindowSize)) {    boolean deletedInstance=false;    while (m_Train.numInstances() > m_WindowSize) {      m_Train.delete(0);      deletedInstance=true;    }    if (deletedInstance == true)     m_NNSearch.setInstances(m_Train);  }}  }
class C{  public static List<Graph> generatePatternDags(Graph pattern,boolean orientBidirectedEdges){  if (orientBidirectedEdges) {    pattern=GraphUtils.removeBidirectedOrientations(pattern);  }  return getDagsInPatternMeek(pattern,new Knowledge2());}  }
class C{  public void reConnect(){  if (mBluetoothGatt != null) {    mBluetoothGatt.connect();  }}  }
class C{  public static void drawRoundedCorners(Bitmap src,Bitmap dest,int radius,int clearColor){  clearBitmap(dest,clearColor);  Canvas canvas=new Canvas(dest);  Rect sourceRect=WorkCache.RECT1.get();  Rect destRect=WorkCache.RECT2.get();  sourceRect.set(0,0,src.getWidth(),src.getHeight());  destRect.set(0,0,dest.getWidth(),dest.getHeight());  RectF roundRect=WorkCache.RECTF1.get();  roundRect.set(0,0,dest.getWidth(),dest.getHeight());  Paint paint=WorkCache.PAINT.get();  paint.reset();  paint.setStyle(Paint.Style.FILL);  paint.setColor(Color.RED);  paint.setAntiAlias(true);  canvas.drawRoundRect(roundRect,radius,radius,paint);  paint.reset();  paint.setFilterBitmap(true);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(src,sourceRect,destRect,paint);  canvas.setBitmap(null);}  }
class C{  public boolean execute(INode state){  JumpingSolitaireState jss=(JumpingSolitaireState)state;  jss.filled[from]=false;  jss.filled[over]=false;  jss.filled[to]=true;  return true;}  }
class C{  public void waitForZoneCommit(Integer vsanId) throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN waitForZoneCommit",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.waitForZoneCommit.showzonestatusvsan.cmd"),vsanId.toString());  String[] regex={MDSDialogProperties.getString("MDSDialog.waitForZoneCommit.inprogress.match"),MDSDialogProperties.getString("MDSDialog.waitForZoneCommit.complete.match"),MDSDialogProperties.getString("MDSDialog.waitForZoneCommit.failed.match")};  String[] groups=new String[2];  int retryAttempts=defaultTimeout / MDSDialogProperties.SLEEP_TIME_PER_RETRY + 1;  boolean completed=false;  for (int retrys=0; !completed && retrys < retryAttempts; retrys++) {    try {      Thread.sleep(MDSDialogProperties.SLEEP_TIME_PER_RETRY);    } catch (    InterruptedException ex) {      _log.warn(ex.getLocalizedMessage());    }    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    for (    String line : lines) {      int index=match(line,regex,groups);switch (index) {case 0:        completed=false;      break;case 1:    completed=true;  break;case 2:throw new NetworkDeviceControllerException("Zone Commit failed: " + line);}}}_log.info(MessageFormat.format("Host: {0}, Port: {1} - END waitForZoneCommit",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));}  }
class C{  public static int lookupIndexOnSearchPath(String name){  SearchPath searchPath=RContext.getInstance().stateREnvironment.getSearchPath();  for (int i=0; i < searchPath.size(); i++) {    REnvironment env=searchPath.get(i);    String searchName=env.getSearchName();    if (searchName.equals(name)) {      return i + 1;    }  }  return 0;}  }
class C{  @Deprecated public static String toString(Match match){  return "";}  }
class C{  public boolean hasEulerianCycle(){  return cycle != null;}  }
class C{  public void linkInCodeOrder(BasicBlock bb1,BasicBlock bb2){  if (IR.SANITY_CHECK)   VM._assert(bb1.next == null);  if (IR.SANITY_CHECK)   VM._assert(bb2.prev == null);  bb1.append(bb2);  if (bb1 == _lastNode) {    _lastNode=bb2;  }}  }
class C{  public void handleMessage(Post post){  log.debug("Handle new public post: " + post.toString());}  }
class C{  protected void cleanUpAfterFailedGII(boolean recoverFromDisk){  DiskRegion dskRgn=getDiskRegion();  if (recoverFromDisk && dskRgn != null && dskRgn.isBackup()) {    dskRgn.resetRecoveredEntries(this);    return;  }  if (!this.entries.isEmpty()) {    closeEntries();    if (getDiskRegion() != null) {      getDiskRegion().clear(this,null);    }    getImageState().getLeftMembers();    getImageState().getVersionTags();    if (this.indexManager != null) {      try {        this.indexManager.rerunIndexCreationQuery();      } catch (      Exception ex) {        if (logger.isDebugEnabled()) {          logger.debug("Exception while clearing indexes after GII failure.",ex);        }      }    }  }}  }
class C{  public static String decapitalize(String name){  if (name == null || name.length() == 0) {    return name;  }  if (name.length() > 1 && Character.isUpperCase(name.charAt(1)) && Character.isUpperCase(name.charAt(0))) {    return name;  }  char chars[]=name.toCharArray();  chars[0]=Character.toLowerCase(chars[0]);  return new String(chars);}  }
class C{  @Override public int[] search(ASEvaluation ASEval,Instances data) throws Exception {  int i, j;  if (!(ASEval instanceof AttributeEvaluator)) {    throw new Exception(ASEval.getClass().getName() + " is not a" + "Attribute evaluator!");  }  m_numAttribs=data.numAttributes();  if (ASEval instanceof UnsupervisedAttributeEvaluator) {    m_hasClass=false;  } else {    m_classIndex=data.classIndex();    if (m_classIndex >= 0) {      m_hasClass=true;    } else {      m_hasClass=false;    }  }  if (ASEval instanceof AttributeTransformer) {    data=((AttributeTransformer)ASEval).transformedHeader();    if (m_classIndex >= 0 && data.classIndex() >= 0) {      m_classIndex=data.classIndex();      m_hasClass=true;    }  }  m_startRange.setUpper(m_numAttribs - 1);  if (!(getStartSet().equals(""))) {    m_starting=m_startRange.getSelection();  }  int sl=0;  if (m_starting != null) {    sl=m_starting.length;  }  if ((m_starting != null) && (m_hasClass == true)) {    boolean ok=false;    for (i=0; i < sl; i++) {      if (m_starting[i] == m_classIndex) {        ok=true;        break;      }    }    if (ok == false) {      sl++;    }  } else {    if (m_hasClass == true) {      sl++;    }  }  m_attributeList=new int[m_numAttribs - sl];  m_attributeMerit=new double[m_numAttribs - sl];  for (i=0, j=0; i < m_numAttribs; i++) {    if (!inStarting(i)) {      m_attributeList[j++]=i;    }  }  AttributeEvaluator ASEvaluator=(AttributeEvaluator)ASEval;  for (i=0; i < m_attributeList.length; i++) {    m_attributeMerit[i]=ASEvaluator.evaluateAttribute(m_attributeList[i]);  }  double[][] tempRanked=rankedAttributes();  int[] rankedAttributes=new int[m_attributeList.length];  for (i=0; i < m_attributeList.length; i++) {    rankedAttributes[i]=(int)tempRanked[i][0];  }  return rankedAttributes;}  }
class C{  public static void init(Properties sysProps){  if (env != null) {    env.installProps(sysProps);    return;  }  new Environment(sysProps);  if (Debug.debugging("env"))   env.list(System.out);}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index){  this.changeBufferData(bufferInfo,newData,index,false);}  }
class C{  public static FontImage create(String text,Style s,Font fnt){  FontImage f=new FontImage();  f.backgroundOpacity=s.getBgTransparency();  f.backgroundColor=s.getBgColor();  f.text=text;  f.color=s.getFgColor();  f.opacity=s.getOpacity();  f.fnt=fnt;  int w=Math.max(f.getHeight(),f.fnt.stringWidth(text)) + (f.padding * 2);  f.width=w;  f.height=w;  return f;}  }
class C{  @Override public Boolean approvalLimitCrossed(final MBDetails details){  Boolean result=false;  Double approvedQuantity=0D;  final Double approvedQuantityWithoutPercentage=totalEstimatedQuantity(details.getWorkOrderActivity().getId(),details.getMbHeader() == null ? null : details.getMbHeader().getId(),details.getWorkOrderActivity().getActivity().getId(),details.getWorkOrderActivity().getWorkOrderEstimate().getWorkOrder());  final Double extraPercentage=worksService.getConfigval();  if (extraPercentage.doubleValue() > 0)   approvedQuantity=approvedQuantityWithoutPercentage * (1 + extraPercentage / 100); else   approvedQuantity=approvedQuantityWithoutPercentage;  if (details.getPrevCumlvQuantity() + details.getQuantity() > approvedQuantityWithoutPercentage)   result=true;  if (details.getPrevCumlvQuantity() + details.getQuantity() > approvedQuantity)   result=null;  return result;}  }
class C{  public void updateMemoryHighlight(boolean highlight){  for (  RegisterPanel rp : registerPanels) {    rp.setHighlight(highlight);    rp.update();  }  model.enableHighlighting(highlight);}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  void validateColocation(){  if (this.colocatedRegionName == null) {    return;  }  Cache cache=GemFireCacheImpl.getInstance();  if (cache != null) {    Region<?,?> region=cache.getRegion(this.colocatedRegionName);{      if (region == null) {        throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_REGION_SPECIFIED_IN_COLOCATEDWITH_IS_NOT_PRESENT_IT_SHOULD_BE_CREATED_BEFORE_SETTING_COLOCATED_WITH_THIS_REGION.toLocalizedString());      }      if (!(region instanceof PartitionedRegion)) {        throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_SETTING_THE_ATTRIBUTE_COLOCATEDWITH_IS_SUPPORTED_ONLY_FOR_PARTITIONEDREGIONS.toLocalizedString());      }      PartitionedRegion colocatedRegion=(PartitionedRegion)region;      if (this.getTotalNumBuckets() != colocatedRegion.getPartitionAttributes().getTotalNumBuckets()) {        throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_TOTALNUMBUCKETS_SHOULD_BE_SAME_AS_TOTALNUMBUCKETS_OF_COLOCATED_PARTITIONEDREGION.toLocalizedString());      }      if (this.getRedundancy() != colocatedRegion.getPartitionAttributes().getRedundantCopies()) {        throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_REDUNDANCY_SHOULD_BE_SAME_AS_THE_REDUNDANCY_OF_COLOCATED_PARTITIONEDREGION.toLocalizedString());      }    }  }}  }
class C{  public LockdowndServiceDescriptor startService(String identifier){  if (identifier == null) {    throw new NullPointerException("identifier");  }  LockdowndServiceDescriptorStructOut serviceOut=new LockdowndServiceDescriptorStructOut();  try {    checkResult(LibIMobileDevice.lockdownd_start_service(getRef(),identifier,serviceOut));    return new LockdowndServiceDescriptor(serviceOut.getValue());  }  finally {    LockdowndServiceDescriptorStruct d=serviceOut.getValue();    if (d != null) {      LibIMobileDevice.lockdownd_service_descriptor_free(d);    }    serviceOut.delete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:11.673 -0500",hash_original_method="E52409147EA4C18E8F78BAF12B808BF8",hash_generated_method="F5840CD261EEAED96C05048DE1D667D2") public void loadFromEF(int ef,int extensionEF,int recordNumber,Message response){  this.ef=ef;  this.extensionEF=extensionEF;  this.recordNumber=recordNumber;  this.userResponse=response;  phone.mIccFileHandler.loadEFLinearFixed(ef,recordNumber,obtainMessage(EVENT_ADN_LOAD_DONE));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.338 -0500",hash_original_method="37DF2D00E21001E825743AC7943B033F",hash_generated_method="2FA40809E202F16AD2228E0B91B6701C") public void put(E e) throws InterruptedException {  super.add(e);}  }
class C{  public SoapMessage(Node body,Node header,String soapAction) throws ParserException {  assert body != null;  assert header != null;  assert soapAction != null;  log.debug("Creating SoapMessage from body and header");  this.message=createMessage(body,header);  this.action=soapAction;  try {    this.body=message.getSOAPBody();    this.header=message.getSOAPHeader();  } catch (  SOAPException e) {    throw new ParserException("Cannot init header and body",e);  }}  }
class C{  private static String descriptorToClassName(String s){  if (s.startsWith("[") || !s.startsWith("L"))   return s;  return s.substring(1,s.length() - 1);}  }
class C{  public final static boolean matches(String encryptedPassword,String enteredPassword){  String salt=encryptedPassword.substring(0,3);  String newCrypt=crypt(salt,enteredPassword);  return newCrypt.equals(encryptedPassword);}  }
class C{  protected boolean isXMLName(String s,boolean xml11Version){  if (s == null) {    return false;  }  if (!xml11Version)   return XMLChar.isValidName(s); else   return XML11Char.isXML11ValidName(s);}  }
class C{  public T caseLiteralAnnotationArgument(LiteralAnnotationArgument object){  return null;}  }
class C{  public void provideErrorFeedback(Component component){  super.provideErrorFeedback(component);}  }
class C{  public static final JIPAtom create(final String strName){  return new JIPAtom(Atom.createAtom(strName));}  }
class C{  public long skip(long n) throws java.io.IOException {  return 0l;}  }
class C{  public void startElement(String uri,String lname,String qname,org.xml.sax.Attributes attributes) throws org.xml.sax.SAXException {  if (uri == null) {    String msg=Logging.getMessage("nullValue.URIIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (lname == null) {    String msg=Logging.getMessage("nullValue.LNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (qname == null) {    String msg=Logging.getMessage("nullValue.QNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (attributes == null) {    String msg=Logging.getMessage("nullValue.org.xml.sax.AttributesIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.currentElement != null)   this.currentElement.startElement(uri,lname,qname,attributes); else   this.doStartElement(uri,lname,qname,attributes);}  }
class C{  Set<Class<?>> flattenHierarchy(Class<?> concreteClass){  Set<Class<?>> classes=flattenHierarchyCache.get(concreteClass);  if (classes == null) {    Set<Class<?>> classesCreation=getClassesFor(concreteClass);    classes=flattenHierarchyCache.putIfAbsent(concreteClass,classesCreation);    if (classes == null) {      classes=classesCreation;    }  }  return classes;}  }
class C{  public DrawableLegendItem(LegendItem item){  this.item=item;}  }
class C{  public RemoteServiceDescriptor(String baseUrl,HttpJsonRequestFactory requestFactory) throws IllegalArgumentException {  this.baseUrl=baseUrl;  this.requestFactory=requestFactory;  try {    final URL baseUrlURL=new URL(baseUrl);    final String protocol=baseUrlURL.getProtocol();    if (!(protocol.equals("http") || protocol.equals("https"))) {      throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl));    }  } catch (  MalformedURLException e) {    throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl));  }}  }
class C{  public final boolean within(Element element,boolean toElement){  if (Element.is(element)) {    EventTarget target=toElement ? getRelatedEventTarget() : getEventTarget();    if (Element.is(target)) {      return element.isOrHasChild((Element)target.cast());    }  }  return false;}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv,int offset){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length - offset < 8) {    throw new IllegalArgumentException("iv.length - offset < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,offset,this.iv,0,8);}  }
class C{  @Override public void clear(){  modCount++;  final HashEntry<K,V>[] data=this.data;  for (int i=data.length - 1; i >= 0; i--) {    data[i]=null;  }  size=0;}  }
class C{  public Boolean isDiskUuidEnabled(){  return diskUuidEnabled;}  }
class C{  public final String stringVal(){  if (!hasSpecial) {    return new String(buf,np + 1,sp);  } else {    return new String(sbuf,0,sp);  }}  }
class C{  public void reset(DialogueState state){  recordState(state,CURRENT);  listBox.setSelectedIndex(0);  while (listModel.size() > 2) {    String name=listModel.remove(2);    states.remove(name);  }  visualisation.showBayesianNetwork(state);}  }
class C{  public static NotExists createNotExists(Model model,ElementList elements){  NotExists notExists=model.createResource(SP.NotExists).as(NotExists.class);  notExists.addProperty(SP.elements,elements);  return notExists;}  }
class C{  public static String algString(int alg) throws UnsupportedAlgorithmException {switch (alg) {case Algorithm.RSAMD5:    return "MD5withRSA";case Algorithm.DSA:case Algorithm.DSA_NSEC3_SHA1:  return "SHA1withDSA";case Algorithm.RSASHA1:case Algorithm.RSA_NSEC3_SHA1:return "SHA1withRSA";case Algorithm.RSASHA256:return "SHA256withRSA";case Algorithm.RSASHA512:return "SHA512withRSA";case Algorithm.ECDSAP256SHA256:return "SHA256withECDSA";case Algorithm.ECDSAP384SHA384:return "SHA384withECDSA";default :throw new UnsupportedAlgorithmException(alg);}}  }
class C{  private static void initColorRandomizer() throws IllegalAccessException {  if (randomList == null) {    randomList=new ArrayList<>();  }  if (randomList.size() > 0) {    randomList.clear();  }  int size=getAllColors().size();  for (int i=0; i < size; i++) {    randomList.add(i);  }  Collections.shuffle(randomList);  randomCount=0;}  }
class C{  public static String toString(byte[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void calculateSize(){  Element container=createContainer();  container.getStyle().setOverflow(CSSStyleDeclaration.Overflow.HIDDEN);  int noScrollbarClientHeight=container.getClientHeight();  int noScrollbarClientWidth=container.getClientWidth();  container.getStyle().setOverflow(CSSStyleDeclaration.Overflow.SCROLL);  heightOfHorizontalScrollbar=noScrollbarClientHeight - container.getClientHeight();  widthOfVerticalScrollbar=noScrollbarClientWidth - container.getClientWidth();  DomUtils.removeFromParent(container);}  }
class C{  private void copyAndCacheBitmapDuringRendering(int frameNumber,Bitmap sourceBitmap){  CloseableReference<Bitmap> destBitmapReference=obtainBitmapInternal();  try {    Canvas copyCanvas=new Canvas(destBitmapReference.get());    copyCanvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.SRC);    copyCanvas.drawBitmap(sourceBitmap,0,0,null);    maybeCacheRenderedBitmap(frameNumber,destBitmapReference);  }  finally {    destBitmapReference.close();  }}  }
class C{  public void TOMulticast(byte[] m,int reqId,TOMMessageType reqType){  cs.send(useSignatures,viewController.getCurrentViewProcesses(),new TOMMessage(me,session,reqId,m,viewController.getCurrentViewId(),reqType));}  }
class C{  @SuppressWarnings("UnusedAssignment") private double pop(){  double value=0;  stkPtr--;  stkTypePtr--;  if (stkTypePtr < 0) {    if (LogWriter.isRunningFromIDE) {      throw new RuntimeException("Stack type underflow");    }  } else {    currentType=stackType[stkTypePtr];  }  if (stkPtr < 0) {    if (LogWriter.isRunningFromIDE) {      throw new RuntimeException("Stack underflow");    }  } else {    value=stack[stkPtr];  }  return value;}  }
class C{  public void readSet(ASN1Set set) throws IOException {  if (tag != ASN1Constants.TAG_C_SET) {    throw expected("set");  }  throw new ASN1Exception("Decoding ASN.1 Set type is not supported");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnfirstitem.class,args);}  }
class C{  public int read() throws IOException {  if (bytesLeft > 0) {    int data=in.read();    if (data != -1)     --bytesLeft;    if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) {      RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE,"received byte: '" + ((data & 0x7F) < ' ' ? " " : String.valueOf((char)data)) + "' "+ data);    }    return data;  } else {    RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE,"read past content length");    return -1;  }}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int current=Integer.parseInt(argv[0]);    int max=current;    for (int i=1; i < argv.length; i++) {      current=Integer.parseInt(argv[i]);      if (current > max) {        max=current;      }    }    DiscreteEstimator newEst=new DiscreteEstimator(max + 1,true);    for (int i=0; i < argv.length; i++) {      current=Integer.parseInt(argv[i]);      System.out.println(newEst);      System.out.println("Prediction for " + current + " = "+ newEst.getProbability(current));      newEst.addValue(current,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public void refresh(){  String current=(String)getSelectedItem();  removeAllItems();  setModel(new DefaultComboBoxModel(getPrinterNames()));  if (current != null) {    for (int i=0; i < getItemCount(); i++) {      String item=(String)getItemAt(i);      if (item.equals(current))       setSelectedIndex(i);    }  }}  }
class C{  protected void initUI(){  for (int i=0; i < getComponentCount(); ++i) {    Component c=getComponent(i);    if (!(c instanceof JToggleButton))     continue;    JToggleButton tb=(JToggleButton)c;    tb.removeActionListener(m_lstnr);    if (m_group != null)     m_group.remove(tb);  }  removeAll();  UILib.addStrut(this,m_axis,m_margin);  for (int i=0; i < m_data.getSize(); ++i) {    if (i > 0)     UILib.addStrut(this,m_axis,m_spacing);    Object data=m_data.getElementAt(i);    String label=m_labels == null ? data.toString() : m_labels[i];    JToggleButton tb=null;    if (m_type == CHECKBOX) {      tb=new JCheckBox(label);    } else {      tb=new JRadioButton(label);      m_group.add(tb);    }    tb.putClientProperty("idx",new Integer(i));    tb.addActionListener(m_lstnr);    add(tb);  }  UILib.addStrut(this,m_axis,m_margin);  m_lstnr.valueChanged(null);}  }
class C{  public void addListener(Class<? extends Entity> entityClass,Class<?> listenerClass){  lock.writeLock().lock();  try {    Set<String> set=dynamicListeners.get(entityClass);    if (set == null) {      set=new HashSet<>();      dynamicListeners.put(entityClass,set);    }    set.add(listenerClass.getName());    cache.clear();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static void main(String[] args){  if (args.length != NUM_ARGS) {    System.out.println("Need " + (NUM_ARGS - 1) + " arguments: CONIKS_CLIENTCONFIG CONIKS_CLIENTLOGS and SERVER");    System.out.println("Check run script for more info.");    System.exit(-1);  }  File configFile=null;  try {    configFileName=args[0];    configFile=new File(configFileName);    logPath=args[1];    File logDir=new File(logPath);    if (!configFile.exists() || !logDir.isDirectory()) {      throw new FileNotFoundException();    }    server=args[2];    String opMode=args[NUM_ARGS - 1];    if (opMode.equalsIgnoreCase("full")) {      isFullOp=true;    } else     if (opMode.equalsIgnoreCase("test")) {      isFullOp=false;    } else {      System.out.println("Unknown operation mode: " + opMode);      System.exit(-1);    }  } catch (  FileNotFoundException e) {    System.out.println("The path you entered for CONIKS_CLIENTCONFIG doesn't exist.");    System.exit(-1);  }  ClientMessaging.setIsFullOp(isFullOp);  if (!ClientConfig.readClientConfig(configFile,isFullOp)) {    System.exit(-1);  }  Logging.setup(logPath + "/client-%g","Client");  String cont="y";  Scanner scanner=new Scanner(System.in);  if (isFullOp) {    setDefaultTruststore();  }  users=new HashMap<String,ClientUser>();  while (!cont.equalsIgnoreCase("n")) {    System.out.print("Enter the next operation (or h for help): ");    String op=scanner.next();    if (op.equalsIgnoreCase("h")) {      usage();    } else     if (isValidOperation(op)) {      System.out.print("Enter the number of users for this operation: ");      int numUsers=1;      try {        numUsers=Integer.parseInt(scanner.next());        while (numUsers < 1) {          System.out.println("the number of users must be a positive integer.");          System.out.print("Enter the number of users for this operation: ");          numUsers=Integer.parseInt(scanner.next());        }      } catch (      NumberFormatException e) {        System.out.println("malformed number.");        break;      }      System.out.print("Enter the first user number for this operation: ");      int offset=0;      try {        offset=Integer.parseInt(scanner.next());        while (offset < 0) {          System.out.println("the user number can't be a negative number.");          System.out.print("Enter the first user number for this operation: ");          offset=Integer.parseInt(scanner.next());        }      } catch (      NumberFormatException e) {        System.out.println("malformed number.");        break;      }      doOperation(op,numUsers,offset);      System.out.print("Would you like to perform another operation? [y/n]: ");      cont=scanner.next();      while (!cont.equalsIgnoreCase("y") && !cont.equalsIgnoreCase("n")) {        System.out.print("Please enter y or n: ");        cont=scanner.next();      }    } else {      System.out.println("Unknown operation: " + op);      usage();      break;    }  }  System.out.println("Goodbye.");}  }
class C{  public UAX29URLEmailTokenizer(){  this.scanner=getScanner();}  }
class C{  public TLongIntHashMap(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  private void verifyUpdateAllowed(Update command,DomainResource existingDomain) throws EppException {  verifyNoDisallowedStatuses(existingDomain,UPDATE_DISALLOWED_STATUSES);  verifyOptionalAuthInfoForResource(authInfo,existingDomain);  if (!isSuperuser) {    verifyResourceOwnership(clientId,existingDomain);    verifyClientUpdateNotProhibited(command,existingDomain);    verifyStatusChangesAreClientSettable(command);  }  String tld=existingDomain.getTld();  checkAllowedAccessToTld(getAllowedTlds(),tld);  EppCommandOperations commandOperations=TldSpecificLogicProxy.getUpdatePrice(Registry.get(tld),targetId,clientId,now,eppInput);  FeeTransformCommandExtension feeUpdate=eppInput.getFirstExtensionOfClasses(FEE_UPDATE_COMMAND_EXTENSIONS_IN_PREFERENCE_ORDER);  Money totalCost=commandOperations.getTotalCost();  if (feeUpdate != null) {    validateFeeChallenge(targetId,existingDomain.getTld(),now,feeUpdate,totalCost);  } else   if (!totalCost.isZero()) {    throw new FeesRequiredForNonFreeUpdateException();  }  verifyNotInPendingDelete(command.getInnerAdd().getContacts(),command.getInnerChange().getRegistrant(),command.getInnerAdd().getNameservers());  validateContactsHaveTypes(command.getInnerAdd().getContacts());  validateContactsHaveTypes(command.getInnerRemove().getContacts());  validateRegistrantAllowedOnTld(tld,command.getInnerChange().getRegistrantContactId());  validateNameserversAllowedOnTld(tld,command.getInnerAdd().getNameserverFullyQualifiedHostNames());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.304 -0500",hash_original_method="9121421793EC5D37F14A312213FF0274",hash_generated_method="0E38B803B5F7EA7FC3B7A952B8C48B78") public String toString(){  return this.encode();}  }
class C{  protected static SimpleResultSet createResultSet(boolean data){  SimpleResultSet result=new SimpleResultSet();  if (data) {    result.addColumn(FullText.FIELD_SCHEMA,Types.VARCHAR,0,0);    result.addColumn(FullText.FIELD_TABLE,Types.VARCHAR,0,0);    result.addColumn(FullText.FIELD_COLUMNS,Types.ARRAY,0,0);    result.addColumn(FullText.FIELD_KEYS,Types.ARRAY,0,0);  } else {    result.addColumn(FullText.FIELD_QUERY,Types.VARCHAR,0,0);  }  result.addColumn(FullText.FIELD_SCORE,Types.FLOAT,0,0);  return result;}  }
class C{  public boolean isCellEditable(EventObject e){  return true;}  }
class C{  public OpenApplicationAction(Application app){  super(app);  putValue(Action.NAME,"OSX Open Application");}  }
class C{  public static ContainerDescription fromContainer(IContainer container){  return fromContainer(container,false);}  }
class C{  @Override public List<PendingChange> parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  final List<PendingChange> changes=new ArrayList<PendingChange>(100);  final NodeList nodes=super.evaluateXPath(stdout,"/status/*/pending-change");  if (nodes != null) {    for (int i=0; i < nodes.getLength(); i++) {      final NamedNodeMap attributes=nodes.item(i).getAttributes();      final boolean isCandidate=StringUtils.equalsIgnoreCase(nodes.item(i).getParentNode().getNodeName(),CANDIDATE_TAG);      final Node sourceItem=attributes.getNamedItem("source-item");      changes.add(new PendingChange(attributes.getNamedItem("server-item").getNodeValue(),attributes.getNamedItem("local-item").getNodeValue(),attributes.getNamedItem("version").getNodeValue(),attributes.getNamedItem("owner").getNodeValue(),attributes.getNamedItem("date").getNodeValue(),attributes.getNamedItem("lock").getNodeValue(),attributes.getNamedItem("change-type").getNodeValue(),attributes.getNamedItem("workspace").getNodeValue(),attributes.getNamedItem("computer").getNodeValue(),isCandidate,sourceItem != null ? sourceItem.getNodeValue() : StringUtils.EMPTY));    }  }  return changes;}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  private Object[] initializeCalleeHiearchyRoots(){  List<TreeElement<JsonElement,JsonElement>> roots=new ArrayList<TreeElement<JsonElement,JsonElement>>();  CalleeHierarchy calleeHierarchy=(CalleeHierarchy)fInput;  Collection<JsonElement> rootNodes=calleeHierarchy.getRoots();  for (  JsonElement rootElement : rootNodes) {    if (!Utils.isEmptyJsonObject(rootElement)) {      TreeElement<JsonElement,JsonElement> root=initializeCalleeTree(rootElement);      roots.add(root);    }  }  return roots.toArray();}  }
class C{  private boolean updateStructureOfVar(ConstraintVariable2 v,ParametricStructure type2,TypeOperator op){  if ((type2 == null))   return false;  ParametricStructure vStructure=elemStructure(v);  boolean vStructureUnknown=(vStructure == null);  boolean type2Structured=type2 != ParametricStructure.NONE;  if (vStructureUnknown) {    if (DEBUG_INITIALIZATION)     System.out.println("  setting structure of " + v + " to "+ type2);    setStructureAndPush(v,type2);    return true;  }  boolean vStructured=vStructure != ParametricStructure.NONE;  if (vStructured && !type2Structured) {    if (op == TypeOperator.Equals || op == TypeOperator.SuperType) {      setStructureAndPush(v,type2);      return true;    }  } else   if (vStructured && type2Structured) {    if (!vStructure.getBase().equals(type2.getBase())) {      if (op == TypeOperator.SuperType) {        setStructureAndPush(v,ParametricStructure.NONE);        return true;      }    } else     if (updateStructureOfType(vStructure,type2)) {      fWorkList2.push(v);      return true;    }  }  return false;}  }
class C{  public void addHostkeys(char[] knownHostsData) throws IOException {  initialize(knownHostsData);}  }
class C{  public static void showDownloadStartedNotification(Context context,Episode episode,int queueSize,int level,int bytesDownloaded,int totalBytes){  Notification.Builder builder=getBaseDownloadNotification(context,episode,queueSize,level);  builder.setProgress(totalBytes,bytesDownloaded,false);  Notification notification=builder.build();  getNotificationManager(context).notify(NOTIFICATION_ID_DOWNLOADING,notification);}  }
class C{  public static int binomialRand(int n,double pp){  int j, k;  double am, em, g, p, sq, t, y;  double pc, plog, pclog, en;  p=(pp <= 0.5) ? pp : 1.0 - pp;  am=n * p;  if (p == 0.0) {    k=0;  } else   if (p == 1.0) {    k=n;  } else   if (n < 50) {    k=0;    for (j=0; j < n; j++) {      if (uniformRand() < p) {        k++;      }    }  } else   if (am < 1.0) {    g=Math.exp(-am);    t=1.0;    k=-1;    do {      k++;      t*=uniformRand();    } while (t > g);    if (k > n) {      k=n;    }  } else {    en=n;    g=lngamma(en + 1.0);    pc=1.0 - p;    plog=Math.log(p);    pclog=Math.log(pc);    sq=Math.sqrt(2.0 * am * pc);    do {      do {        y=Math.tan(Math.PI * uniformRand());        em=sq * y + am;      } while ((em < 0.0) || (em >= en + 1.0));      em=Math.floor(em);      t=1.2 * sq * (1.0 + y * y)* Math.exp(g - lngamma(em + 1.0) - lngamma(en - em + 1.0) + em * plog + (en - em) * pclog);    } while (uniformRand() > t);    k=(int)em;  }  if (p != pp) {    k=n - k;  }  return (k);}  }
class C{  public static JSONObject JsonNonResponsePost(String url,String bssid,int serial,JSONObject postJSON){  int port=EspProxyServerImpl.getInstance().getEspProxyServerPort();  HeaderPair jsonHeader=new HeaderPair(HEADER_PROTO_TYPE,"" + EspProxyTask.M_PROTO_JSON);  HeaderPair serialHeader=new HeaderPair(HEADER_TASK_SERIAL,"" + serial);  return executeHttpRequest(url,port,METHOD_POST,bssid,postJSON,true,jsonHeader,serialHeader);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CODE_INJECTION___BEFORE_CODE_1:    return beforeCode_1 != null && !beforeCode_1.isEmpty();case UmplePackage.CODE_INJECTION___AFTER_CODE_1:  return afterCode_1 != null && !afterCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public Point2D.Double translatePoint(Point2D.Double p,TranslationDirection dir){  Point2D.Double p0=constrainPoint((Point2D.Double)p.clone());switch (dir) {case NORTH:case NORTH_WEST:case NORTH_EAST:    p.y=p0.y - height;  break;case SOUTH:case SOUTH_WEST:case SOUTH_EAST:p.y=p0.y + height;break;}switch (dir) {case WEST:case NORTH_WEST:case SOUTH_WEST:p.x=p0.x - width;break;case EAST:case NORTH_EAST:case SOUTH_EAST:p.x=p0.x + width;break;}return p;}  }
class C{  static private String zeros(int n){  if (n < 1)   return "";  char[] buf=new char[n];  for (int i=0; i < n; i++) {    buf[i]='0';  }  return new String(buf);}  }
class C{  public boolean isValid(){  return S2.isUnitLength(axis) && height <= 2;}  }
class C{  public static boolean isXML11Valid(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public Boolean isTLS11(){  return tls11;}  }
class C{  public KrbAsReq(EncryptionKey pakey,KDCOptions options,PrincipalName cname,PrincipalName sname,KerberosTime from,KerberosTime till,KerberosTime rtime,int[] eTypes,HostAddresses addresses) throws KrbException, IOException {  if (options == null) {    options=new KDCOptions();  }  if (options.get(KDCOptions.FORWARDED) || options.get(KDCOptions.PROXY) || options.get(KDCOptions.ENC_TKT_IN_SKEY)|| options.get(KDCOptions.RENEW)|| options.get(KDCOptions.VALIDATE)) {    throw new KrbException(Krb5.KRB_AP_ERR_REQ_OPTIONS);  }  if (options.get(KDCOptions.POSTDATED)) {  } else {    if (from != null)     from=null;  }  if (options.get(KDCOptions.RENEWABLE)) {  } else {    if (rtime != null)     rtime=null;  }  PAData[] paData=null;  if (pakey != null) {    PAEncTSEnc ts=new PAEncTSEnc();    byte[] temp=ts.asn1Encode();    EncryptedData encTs=new EncryptedData(pakey,temp,KeyUsage.KU_PA_ENC_TS);    paData=new PAData[1];    paData[0]=new PAData(Krb5.PA_ENC_TIMESTAMP,encTs.asn1Encode());  }  if (cname.getRealm() == null) {    throw new RealmException(Krb5.REALM_NULL,"default realm not specified ");  }  if (DEBUG) {    System.out.println(">>> KrbAsReq creating message");  }  if (addresses == null && Config.getInstance().useAddresses()) {    addresses=HostAddresses.getLocalAddresses();  }  if (sname == null) {    String realm=cname.getRealmAsString();    sname=PrincipalName.tgsService(realm,realm);  }  if (till == null) {    till=new KerberosTime(0);  }  KDCReqBody kdc_req_body=new KDCReqBody(options,cname,sname,from,till,rtime,Nonce.value(),eTypes,addresses,null,null);  asReqMessg=new ASReq(paData,kdc_req_body);}  }
class C{  public Builder title(String title){  this.title=title;  return this;}  }
class C{  public Attribute export(JavaClass source,JavaClass target){  ConstantPool cp=target.getConstantPool();  cp.addUTF8(getName());  cp.addUTF8(_signature);  return new SignatureAttribute(_signature);}  }
class C{  public final int length(){  return array.length;}  }
class C{  public static byte[] readFullyNoClose(InputStream in) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int count;  while ((count=in.read(buffer)) != -1) {    bytes.write(buffer,0,count);  }  return bytes.toByteArray();}  }
class C{  static String computePropertyNameFromAccessorMethodName(String prefix,String propertyAccessorMethodName){  assert (propertyAccessorMethodName.startsWith(prefix));  String propertyName=propertyAccessorMethodName.substring(prefix.length());  if (propertyName.length() > 0) {    propertyName=propertyName.substring(0,1).toLowerCase() + propertyName.substring(1);  }  return propertyName;}  }
class C{  @Override public void update(Observable observable,Object data){  initLoaderManager();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/register") public InitiatorRestRep registerInitiator(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Initiator.class,"id");  Initiator initiator=_dbClient.queryObject(Initiator.class,id);  ArgValidator.checkEntity(initiator,id,isIdEmbeddedInURL(id));  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(initiator.getRegistrationStatus())) {    initiator.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());    _dbClient.persistObject(initiator);    auditOp(OperationTypeEnum.REGISTER_INITIATOR,true,null,initiator.getId().toString());  }  return map(initiator);}  }
class C{  public boolean isMissing(MinecraftDirectory minecraftDir){  return !minecraftDir.getLibrary(this).isFile();}  }
class C{  private void addPermission(Drive drive,File file) throws IOException {  if (isPublic) {    boolean hasPublic=false;    PermissionList permissionList=drive.permissions().list(file.getId()).execute();    for (    Permission permission : permissionList.getItems()) {      String role=permission.getRole();      if (role.equals("reader") || role.equals("writer")) {        if (permission.getType().equals("anyone")) {          hasPublic=true;          break;        }      }    }    if (!hasPublic) {      Permission permission=new Permission();      permission.setRole("reader");      permission.setType("anyone");      permission.setValue("");      drive.permissions().insert(file.getId(),permission).execute();    }    shareUrl=file.getAlternateLink();  }  if (acl != null) {    for (    String email : acl) {      email=email.trim();      if (!email.equals("")) {        Permission permission=new Permission();        permission.setRole("reader");        permission.setType("user");        permission.setValue(email);        drive.permissions().insert(file.getId(),permission).execute();      }    }  }}  }
class C{  public void elementType(String name,int model,int memberOf,int flags){  ElementType e=new ElementType(name,model,memberOf,flags,this);  theElementTypes.put(name.toLowerCase(),e);  if (memberOf == M_ROOT)   theRoot=e;}  }
class C{  public static void assertNotSame(Object expected,Object actual){  if (verbose) {    log("assertNotSame(" + expected + ", "+ actual+ ")");  }  assertBool(expected != actual);}  }
class C{  public void testFloatSort() throws Exception {  checkSortMissingDefault("floatdv","-1.3","4.2");}  }
class C{  public void createSmokeTerrain(SmokeCloud cloud){  for (  Coords coords : cloud.getCoordsList()) {    IHex smokeHex=game.getBoard().getHex(coords);    if (smokeHex != null) {      if (smokeHex.containsTerrain(Terrains.SMOKE)) {        if (smokeHex.terrainLevel(Terrains.SMOKE) == SmokeCloud.SMOKE_LIGHT) {          smokeHex.removeTerrain(Terrains.SMOKE);          smokeHex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.SMOKE,SmokeCloud.SMOKE_HEAVY));          server.getHexUpdateSet().add(coords);        }      } else       if (cloud.getSmokeLevel() > SmokeCloud.SMOKE_NONE) {        smokeHex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.SMOKE,cloud.getSmokeLevel()));        server.getHexUpdateSet().add(coords);      }    }  }}  }
class C{  private void throwCustomException(int numOfChildViews){  if (numOfChildViews == 1) {    throw new NumberOfFoldingLayoutChildrenException(FOLDING_VIEW_EXCEPTION_MESSAGE);  }}  }
class C{  private void safeDamageRange(final Position p0,final Position p1){  safeDamager.damageRange(p0,p1);}  }
class C{  public PreparedStatement retrieve(String key){  PreparedStatementHolder psh=retrieveExtended(key);  if (psh == null)   return null; else   return psh.getPreparedStatement();}  }
class C{  private static void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2f,y / 2f);}  }
class C{  public void updatePlotProperties(final Plot plot){  plot.setBackgroundPaint(GamaColors.toAwtColor(getBackgroundPaint()));  plot.setOutlinePaint(GamaColors.toAwtColor(getOutlinePaint()));  plot.setOutlineStroke(getOutlineStroke());  if (this.domainAxisPropertyPanel != null) {    Axis domainAxis=null;    if (plot instanceof CategoryPlot) {      final CategoryPlot p=(CategoryPlot)plot;      domainAxis=p.getDomainAxis();    } else     if (plot instanceof XYPlot) {      final XYPlot p=(XYPlot)plot;      domainAxis=p.getDomainAxis();    }    if (domainAxis != null) {      this.domainAxisPropertyPanel.setAxisProperties(domainAxis);    }  }  if (this.rangeAxisPropertyPanel != null) {    Axis rangeAxis=null;    if (plot instanceof CategoryPlot) {      final CategoryPlot p=(CategoryPlot)plot;      rangeAxis=p.getRangeAxis();    } else     if (plot instanceof XYPlot) {      final XYPlot p=(XYPlot)plot;      rangeAxis=p.getRangeAxis();    }    if (rangeAxis != null) {      this.rangeAxisPropertyPanel.setAxisProperties(rangeAxis);    }  }  if (this.plotAppearance.getPlotOrientation() != null) {    if (plot instanceof CategoryPlot) {      final CategoryPlot p=(CategoryPlot)plot;      p.setOrientation(this.plotAppearance.getPlotOrientation());    } else     if (plot instanceof XYPlot) {      final XYPlot p=(XYPlot)plot;      p.setOrientation(this.plotAppearance.getPlotOrientation());    }  }}  }
class C{  private UID(int unique,long time,short count){  this.unique=unique;  this.time=time;  this.count=count;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("InternalDateCriterion ( ").append("operator = ").append(this.operator).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public boolean add(Object o){  processQueue();  return super.add(WeakElement.create(o,this.queue));}  }
class C{  public static boolean isWindows10(){  return osName.indexOf("Windows") > -1 && osVersion.equals("10.0");}  }
class C{  public static DiscoveryContainer<?> readFromNBT(NBTTagCompound nbt){  DiscoveryContainer<?> container=empty();  container.updateFromNBT(nbt,false);  return container;}  }
class C{  public double calcAngle(Entry p1,Entry p2){  float dx=p2.getXIndex() - p1.getXIndex();  float dy=p2.getVal() - p1.getVal();  double angle=Math.atan2(dy,dx) * 180.0 / Math.PI;  return angle;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.771 -0500",hash_original_method="013088ABC431C6F3F4CF96BA31947D05",hash_generated_method="589B79B769FA1AE4B40AF25F9E862625") public AuthenticationException(){  super();}  }
class C{  @SuppressWarnings("unchecked") public void load(byte[] data) throws Exception {  if (data == null) {    return;  }  if (schemaValidator != null) {    try (InputStream in=new ByteArrayInputStream(data)){      validateSchemaWithValidator(in);    }   }  try (InputStream in=new ByteArrayInputStream(data)){    Unmarshaller unmarshaller=jaxbCtx.createUnmarshaller();    root=(JAXBElement<T>)unmarshaller.unmarshal(in);    confType=root.getValue();  } }  }
class C{  public synchronized void internalRemoveRelationship(Vertex type,Vertex target){  Relationship relationship=getRelationship(type,target);  if (relationship != null) {    internalRemoveRelationship(relationship);  }}  }
class C{  public boolean parseArgs(String argv[]){  sourcePathArg=null;  sysClassPathArg=null;  extDirsArg=null;  classPathString=null;  destDir=null;  flags=F_WARNINGS;  tm=System.currentTimeMillis();  classes=new Vector<>();  nowrite=false;  nocompile=false;  keepGenerated=false;  generatorArgs=getArray("generator.args",true);  if (generatorArgs == null) {    return false;  }  generators=new Vector<>();  try {    argv=CommandLine.parse(argv);  } catch (  FileNotFoundException e) {    error("rmic.cant.read",e.getMessage());    return false;  }catch (  IOException e) {    e.printStackTrace(out instanceof PrintStream ? (PrintStream)out : new PrintStream(out,true));    return false;  }  for (int i=0; i < argv.length; i++) {    if (argv[i] != null) {      if (argv[i].equals("-g")) {        flags&=~F_OPT;        flags|=F_DEBUG_LINES | F_DEBUG_VARS;        argv[i]=null;      } else       if (argv[i].equals("-O")) {        flags&=~F_DEBUG_LINES;        flags&=~F_DEBUG_VARS;        flags|=F_OPT | F_DEPENDENCIES;        argv[i]=null;      } else       if (argv[i].equals("-nowarn")) {        flags&=~F_WARNINGS;        argv[i]=null;      } else       if (argv[i].equals("-debug")) {        flags|=F_DUMP;        argv[i]=null;      } else       if (argv[i].equals("-depend")) {        flags|=F_DEPENDENCIES;        argv[i]=null;      } else       if (argv[i].equals("-verbose")) {        flags|=F_VERBOSE;        argv[i]=null;      } else       if (argv[i].equals("-nowrite")) {        nowrite=true;        argv[i]=null;      } else       if (argv[i].equals("-Xnocompile")) {        nocompile=true;        keepGenerated=true;        argv[i]=null;      } else       if (argv[i].equals("-keep") || argv[i].equals("-keepgenerated")) {        keepGenerated=true;        argv[i]=null;      } else       if (argv[i].equals("-show")) {        error("rmic.option.unsupported","-show");        usage();        return false;      } else       if (argv[i].equals("-classpath")) {        if ((i + 1) < argv.length) {          if (classPathString != null) {            error("rmic.option.already.seen","-classpath");            usage();            return false;          }          argv[i]=null;          classPathString=argv[++i];          argv[i]=null;        } else {          error("rmic.option.requires.argument","-classpath");          usage();          return false;        }      } else       if (argv[i].equals("-sourcepath")) {        if ((i + 1) < argv.length) {          if (sourcePathArg != null) {            error("rmic.option.already.seen","-sourcepath");            usage();            return false;          }          argv[i]=null;          sourcePathArg=argv[++i];          argv[i]=null;        } else {          error("rmic.option.requires.argument","-sourcepath");          usage();          return false;        }      } else       if (argv[i].equals("-bootclasspath")) {        if ((i + 1) < argv.length) {          if (sysClassPathArg != null) {            error("rmic.option.already.seen","-bootclasspath");            usage();            return false;          }          argv[i]=null;          sysClassPathArg=argv[++i];          argv[i]=null;        } else {          error("rmic.option.requires.argument","-bootclasspath");          usage();          return false;        }      } else       if (argv[i].equals("-extdirs")) {        if ((i + 1) < argv.length) {          if (extDirsArg != null) {            error("rmic.option.already.seen","-extdirs");            usage();            return false;          }          argv[i]=null;          extDirsArg=argv[++i];          argv[i]=null;        } else {          error("rmic.option.requires.argument","-extdirs");          usage();          return false;        }      } else       if (argv[i].equals("-d")) {        if ((i + 1) < argv.length) {          if (destDir != null) {            error("rmic.option.already.seen","-d");            usage();            return false;          }          argv[i]=null;          destDir=new File(argv[++i]);          argv[i]=null;          if (!destDir.exists()) {            error("rmic.no.such.directory",destDir.getPath());            usage();            return false;          }        } else {          error("rmic.option.requires.argument","-d");          usage();          return false;        }      } else {        if (!checkGeneratorArg(argv,i)) {          usage();          return false;        }      }    }  }  for (int i=0; i < argv.length; i++) {    if (argv[i] != null) {      if (argv[i].startsWith("-")) {        error("rmic.no.such.option",argv[i]);        usage();        return false;      } else {        classes.addElement(argv[i]);      }    }  }  if (generators.size() == 0) {    addGenerator("default");  }  return true;}  }
class C{  public boolean startTimelineRequest(){  return requestInFlight.compareAndSet(false,true);}  }
class C{  @Override public void run(){  while (!stopHide) {    print("\b\b><");    try {      Thread.sleep(10);    } catch (    InterruptedException e) {    }  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public DoubleConstant addDouble(double value){  DoubleConstant entry=getDoubleByValue(value);  if (entry != null)   return entry;  entry=new DoubleConstant(this,_entries.size(),value);  addConstant(entry);  addConstant(null);  return entry;}  }
class C{  public ConnectionProtocol newConnection(ConnectionTcp conn){  throw new UnsupportedOperationException();}  }
class C{  public void succeeded(FrameworkMethod method){}  }
class C{  private void populateActivitiXml(Job job,String processDefinitionId){  job.setActivitiJobXml(activitiService.getProcessModel(processDefinitionId));}  }
class C{  public synchronized static void loadConfigAsClasspathResource(boolean loadAsResource){  WordNetManager.loadAsResource=loadAsResource;}  }
class C{  public void delete(){  m_nodeChooser.dispose();  m_undoHistory.dispose();}  }
class C{  @SuppressWarnings("UnusedDeclaration") public void notifyDataSetChanged(final boolean force){  if (force || !(mDecoratedBaseAdapter instanceof ArrayAdapter<?>)) {    mDecoratedBaseAdapter.notifyDataSetChanged();  }}  }
class C{  private void assertCostInvoice(CostResult costResult,int M_InOutLine_ID,MAcctSchema as,String trxName){  MCost cost=assertCost(costResult);  String whereClause="M_Product_ID=? AND  M_CostElement_ID=? AND M_CostType_ID=? AND M_InOutLine_ID=?";  ArrayList<Object> parameters=new ArrayList();  parameters.add(costResult.M_Product_ID);  parameters.add(cost.getM_CostElement_ID());  parameters.add(cost.getM_CostType_ID());  parameters.add(M_InOutLine_ID);  assertCostDetail(costResult,whereClause,parameters);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public FolderControlContentProvider(final boolean includeFiles,final boolean showDeletedItems){  this.includeFiles=includeFiles;  this.showDeletedItems=showDeletedItems;}  }
class C{  @ObjectiveCName("changeAnimationAutoDownloadEnabled:") public void changeAnimationAutoDownloadEnabled(boolean val){  modules.getSettingsModule().setAnimationAutoDownloadEnabled(val);}  }
class C{  public int add(T item){  data.add(item);  fireTableRowsInserted(data.size(),data.size());  return data.size();}  }
class C{  @Nullable public static <T extends PsiElement>T findReference(@NotNull final PsiElement element,@NotNull final Class<T> expectedClass){  for (  final PsiReference reference : element.getReferences()) {    final T result=as(reference.resolve(),expectedClass);    if (result != null) {      return result;    }  }  return null;}  }
class C{  public GPUImageDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public void rollback() throws SQLException {  Statement st=createStatement();  try {    st.execute("ROLLBACK");  }  finally {    st.close();  }}  }
class C{  private static boolean isStackTraceLikelyConflictive(Throwable throwable,Class<? extends Activity> activityClass){  do {    StackTraceElement[] stackTrace=throwable.getStackTrace();    for (    StackTraceElement element : stackTrace) {      if ((element.getClassName().equals("android.app.ActivityThread") && element.getMethodName().equals("handleBindApplication")) || element.getClassName().equals(activityClass.getName())) {        return true;      }    }  } while ((throwable=throwable.getCause()) != null);  return false;}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  public void restoreExpansionState(JTree tree){  for (int i=0; i < tree.getRowCount(); i++) {    TreePath path=tree.getPathForRow(i);    Object entryObject=path.getLastPathComponent();    if (entryObject instanceof Entry) {      Entry entry=(Entry)entryObject;      String absoluteLocation=entry.getLocation().getAbsoluteLocation();      if (expandedRepositories.contains(absoluteLocation) || expandedNodes.contains(absoluteLocation)) {        tree.expandPath(path);      }    }  }  restoreSelectionPaths(tree);}  }
class C{  public String toString(){  return "null";}  }
class C{  public static DatagramConnection createDatagramConnection(int timeout){  return new AndroidDatagramConnection(timeout);}  }
class C{  public int search(String txt){  int m=pat.length();  int n=txt.length();  int i, j;  for (i=0, j=0; i < n && j < m; i++) {    j=dfa[txt.charAt(i)][j];  }  if (j == m)   return i - m;  return n;}  }
class C{  private DBIDs computeBadMedoids(ArrayDBIDs m_current,ArrayList<PROCLUSCluster> clusters,int threshold){  ModifiableDBIDs badMedoids=DBIDUtil.newHashSet(m_current.size());  int i=0;  for (DBIDIter it=m_current.iter(); it.valid(); it.advance(), i++) {    PROCLUSCluster c_i=clusters.get(i);    if (c_i == null || c_i.objectIDs.size() < threshold) {      badMedoids.add(it);    }  }  return badMedoids;}  }
class C{  public void onReceive(Object message) throws Exception {  if (message instanceof LeaderChanged) {    this.checkAndSetAsLeader(((LeaderChanged)message).getLeader());  } else   if (message instanceof CurrentClusterState) {    this.checkAndSetAsLeader(((CurrentClusterState)message).getLeader());  } else   if (message instanceof Terminated) {    this.router=this.router.removeRoutee(((Terminated)message).actor());    ActorRef r=getContext().actorOf(Props.create(AkkaRedriverWorker.class));    getContext().watch(r);    this.router=this.router.addRoutee(new ActorRefRoutee(r));  } else   if (message instanceof TaskRedriverDetails) {    TaskRedriverDetails redriverDetails=(TaskRedriverDetails)message;switch (redriverDetails.getAction()) {case Register:      logger.debug("Register task : {} for redriver with time : {}",redriverDetails.getTaskId(),redriverDetails.getRedriverDelay());    messageScheduler.addMessage(new ScheduledMessage(redriverDetails.getTaskId(),System.currentTimeMillis() + redriverDetails.getRedriverDelay()));  break;case Deregister:logger.debug("DeRegister task : {} with redriver",redriverDetails.getTaskId());messageScheduler.removeMessage(redriverDetails.getTaskId());break;case Redrive:logger.debug("Redrive task with Id : {} ",redriverDetails.getTaskId());this.router.route(message,getSelf());break;}} else {logger.error("Redriver Task received a message that it cannot process. Message type received is : {}",message.getClass().getName());unhandled(message);}}  }
class C{  private byte convertAnalogValue(float value){  return (byte)((value + 1f) * 127.5f);}  }
class C{  private byte[] decryptContent(final byte[] input,final int off,final int len) throws BadCiphertextException {  final byte[] nonce=currentFrameHeaders_.getNonce();  byte[] contentAad=null;  if (currentFrameHeaders_.isFinalFrame() == true) {    contentAad=Utils.generateContentAad(messageId_,Constants.FINAL_FRAME_STRING_ID,(int)frameNumber_,currentFrameHeaders_.getFrameContentLength());  } else {    contentAad=Utils.generateContentAad(messageId_,Constants.FRAME_STRING_ID,(int)frameNumber_,frameSize_);  }  final CipherHandler cipherHandler=new CipherHandler(decryptionKey_,nonce,contentAad,Cipher.DECRYPT_MODE,cryptoAlgo_);  return cipherHandler.cipherData(input,off,len);}  }
class C{  public static Module forModule(Module module){  return forObject(module);}  }
class C{  void addToJoinMap(URI joinToURI,URI thisURI){  if (joinMap.get(joinToURI) == null) {    joinMap.put(joinToURI,new HashSet<URI>());  }  joinMap.get(joinToURI).add(thisURI);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Instance inst=(Instance)instance.copy();  copyValues(inst,true,inst.dataset(),getOutputFormat());  inst.setDataset(null);  inst.insertAttributeAt(m_Insert.getIndex());  inst.setDataset(getOutputFormat());  push(inst);  return true;}  }
class C{  @Nullable public static <T>T firstNotNull(@Nullable T... vals){  if (vals == null)   return null;  for (  T val : vals) {    if (val != null)     return val;  }  return null;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (((PLA_HeaderViewListAdapter)mAdapter).removeFooter(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public void diff_cleanupEfficiency(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  boolean pre_ins=false;  boolean pre_del=false;  boolean post_ins=false;  boolean post_del=false;  Diff thisDiff=pointer.next();  Diff safeDiff=thisDiff;  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      if (thisDiff.text.length() < Diff_EditCost && (post_ins || post_del)) {        equalities.push(thisDiff);        pre_ins=post_ins;        pre_del=post_del;        lastequality=thisDiff.text;      } else {        equalities.clear();        lastequality=null;        safeDiff=thisDiff;      }      post_ins=post_del=false;    } else {      if (thisDiff.operation == Operation.DELETE) {        post_del=true;      } else {        post_ins=true;      }      if (lastequality != null && ((pre_ins && pre_del && post_ins&& post_del) || ((lastequality.length() < Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0)+ (post_del ? 1 : 0)) == 3))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(thisDiff=new Diff(Operation.INSERT,lastequality));        equalities.pop();        lastequality=null;        if (pre_ins && pre_del) {          post_ins=post_del=true;          equalities.clear();          safeDiff=thisDiff;        } else {          if (!equalities.empty()) {            equalities.pop();          }          if (equalities.empty()) {            thisDiff=safeDiff;          } else {            thisDiff=equalities.lastElement();          }          while (thisDiff != pointer.previous()) {          }          post_ins=post_del=false;        }        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Long && val instanceof Long) {          long k=unwrapKey(key);          long v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public SimpleAddDeleteComboBoxComponent(String title,String addNewDescription,Collection<T> initialItems,ObjectFactory<T> objectFactory,SimpleAddDeleteComboBoxComponentListener<T> listener){  this.addNewDescription=addNewDescription;  this.listener=listener;  this.objectFactory=objectFactory;  this.buildInterface(title,initialItems);}  }
class C{  public static void replaceParking(final Plan plan,Activity targetActivity,ActivityFacilityImpl newParking,MatsimServices controler,Network network){  Activity newParkingActivity=createNewParkingActivity(newParking,network,ParkingRoot.getParkingActivityDuration().getActivityDuration(newParking.getId(),plan.getPerson().getId()));  if (isFirstOrLastActivity(plan,targetActivity)) {    Activity firstActivity=(Activity)plan.getPlanElements().get(0);    Activity lastActivity=(Activity)plan.getPlanElements().get(plan.getPlanElements().size() - 1);    if (!firstActivity.getLinkId().toString().equalsIgnoreCase(lastActivity.getLinkId().toString())) {      throw new Error("first and last activity must be at the same location.");    }    changeNextParking(plan,firstActivity,newParkingActivity);    newParkingActivity=createNewParkingActivity(newParking,network,ParkingRoot.getParkingActivityDuration().getActivityDuration(newParking.getId(),plan.getPerson().getId()));    changePreviousParking(plan,lastActivity,newParkingActivity);  } else {    changePreviousParking(plan,targetActivity,newParkingActivity);    newParkingActivity=createNewParkingActivity(newParking,network,ParkingRoot.getParkingActivityDuration().getActivityDuration(newParking.getId(),plan.getPerson().getId()));    changeNextParking(plan,targetActivity,newParkingActivity);  }  PlanAlgorithm router=getRoutingAlgorithm(controler);  router.run(plan);}  }
class C{  @RequestMapping(value="/{id}") public ModelAndView protein(@PathVariable String id){  return new ModelAndView("protein-structure",buildModelMap(retrieve(id),true));}  }
class C{  private void keys(final Character c,final Node n,final StringBuilder b,final Set<String> vals){  b.append(c);  if (n.set) {    vals.add(b.toString());  }  for (  final Character cc : n.children.keySet()) {    b.setLength(n.level);    keys(cc,n.children.get(cc),b,vals);  }}  }
class C{  boolean closeAll(){  boolean confirmed=true;  Ref<Boolean> noToAll=new Ref<Boolean>(false);  for (  Tab tab : ui.getTabContainer().getTabs()) {    ui.selectTab(tab);    if (!tab.isReadyToBeClosed(noToAll)) {      confirmed=false;      break;    }    if (noToAll.t) {      confirmed=true;      break;    }  }  if (confirmed) {    for (    Tab tab : ui.getTabContainer().getTabs()) {      tab.close(false);    }    return true;  }  return false;}  }
class C{  public Item peek(){  if (isEmpty())   throw new NoSuchElementException("Queue underflow");  return first.item;}  }
class C{  private HttpsProvisioningResult sendFirstRequestsToRequireOTP(ContactId msisdn,String primaryUri,String secondaryUri) throws IOException {  HttpsProvisioningResult result=new HttpsProvisioningResult();  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.debug("Send 1rst HTTPS request to get OTP (msisdn=" + msisdn + ")(retry_count="+ mRetryCount+ ")(waitingOTP="+ mWaitingForOTP+ ")");  }  HttpURLConnection urlConnection=null;  try {    if (msisdn != null && mRetryCount > 0 && mWaitingForOTP) {      mWaitingForOTP=false;      ContactId contact=mRcsSettings.getUserProfileImsUserName();      msisdn=HttpsProvisioningMsisdnInput.getInstance().displayPopupAndWaitResponse(mCtx,contact);      if (!contactIdEquals(contact,msisdn)) {        mRcsSettings.setUserProfileImsUserName(msisdn);      }      if (msisdn == null) {        if (logActivated) {          sLogger.warn("No MSISDN set by end user: cannot authenticate!");        }        result.code=HttpsProvisioningResult.UNKNOWN_MSISDN_CODE;        return result;      }      if (logActivated) {        sLogger.debug("MSISDN set by end user=".concat(msisdn.toString()));      }    }    String smsPortForOTP=HttpsProvisioningSMS.generateSmsPortForProvisioning();    String token=mRcsSettings.getProvisioningToken();    String args=getHttpsRequestArguments(smsPortForOTP,token,msisdn);    String request=primaryUri + args;    urlConnection=executeHttpRequest(true,request);    result.code=urlConnection.getResponseCode();    if (HttpURLConnection.HTTP_OK != result.code && !StringUtils.isEmpty(secondaryUri)) {      request=secondaryUri + args;      urlConnection.disconnect();      urlConnection=null;      urlConnection=executeHttpRequest(true,request);      result.code=urlConnection.getResponseCode();    }switch (result.code) {case HttpURLConnection.HTTP_OK:      if (logActivated) {        sLogger.debug("HTTPS request returns with 200 OK");      }    result.content=readStream(urlConnection.getInputStream());  if (TextUtils.isEmpty(result.content) || result.content.contains(RESULT_CONTENT)) {    if (mRetryCount < RETRY_MAX_COUNT_OTP) {      mRetryCount++;      mWaitingForOTP=true;      result.waitingForSMSOTP=true;      mSmsManager.registerSmsProvisioningReceiver(smsPortForOTP,primaryUri);      HttpsProvisioningService.startRetryAlarm(mCtx,mRetryIntent,OTP_TIME_OUT);    }  }return result;case HttpURLConnection.HTTP_FORBIDDEN:if (logActivated) {sLogger.debug("Request to get OTP failed: Forbidden. MSISDN=" + msisdn);}if (mRetryCount < HttpsProvisioningUtils.RETRY_MAX_COUNT) {mRetryCount++;ContactId contact=mRcsSettings.getUserProfileImsUserName();msisdn=HttpsProvisioningMsisdnInput.getInstance().displayPopupAndWaitResponse(mCtx,contact);if (!contactIdEquals(contact,msisdn)) {mRcsSettings.setUserProfileImsUserName(msisdn);}if (msisdn == null) {if (logActivated) {  sLogger.warn("No MSISDN set by end user: cannot authenticate!");}result.code=HttpsProvisioningResult.UNKNOWN_MSISDN_CODE;return result;}if (logActivated) {sLogger.debug("MSISDN set by end user=".concat(msisdn.toString()));}return sendFirstRequestsToRequireOTP(msisdn,primaryUri,secondaryUri);}case HttpURLConnection.HTTP_UNAVAILABLE:result.retryAfter=getRetryAfter(urlConnection);default :if (logActivated) {sLogger.debug("Request to get OTP failed: code=" + result.code);}return result;}}  finally {if (urlConnection != null) {urlConnection.disconnect();}if (!result.waitingForSMSOTP && HttpURLConnection.HTTP_FORBIDDEN != result.code) {mSmsManager.unregisterSmsProvisioningReceiver();}}}  }
class C{  @Override public <T>T convert(Class<T> cls,Object value){  ObjectMapper mapper=new ObjectMapper();  return mapper.convertValue(value,cls);}  }
class C{  public final TextBuilder append(String str,int start,int end){  if (str == null)   return append("null");  if ((start < 0) || (end < 0) || (start > end)|| (end > str.length()))   throw new IndexOutOfBoundsException("start: " + start + ", end: "+ end+ ", str.length(): "+ str.length());  int newLength=_length + end - start;  while (_capacity < newLength) {    increaseCapacity();  }  for (int i=start, j=_length; i < end; ) {    char[] chars=_high[j >> B1];    int dstBegin=j & M1;    int inc=Math.min(C1 - dstBegin,end - i);    str.getChars(i,(i+=inc),chars,dstBegin);    j+=inc;  }  _length=newLength;  return this;}  }
class C{  public static String convertNewLines(String string){  int index;  StringBuffer newStringBuffer=new StringBuffer();  while ((index=string.indexOf('\n')) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\\');    newStringBuffer.append('n');    if ((index + 1) < string.length()) {      string=string.substring(index + 1);    } else {      string="";    }  }  newStringBuffer.append(string);  string=newStringBuffer.toString();  newStringBuffer=new StringBuffer();  while ((index=string.indexOf('\r')) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\\');    newStringBuffer.append('r');    if ((index + 1) < string.length()) {      string=string.substring(index + 1);    } else {      string="";    }  }  newStringBuffer.append(string);  return newStringBuffer.toString();}  }
class C{  @NotNull private static TextRange formatCommentsInner(@NotNull Project project,@NotNull ASTNode element,@NotNull final TextRange markedRange){  TextRange resultTextRange=markedRange;  final PsiElement elementPsi=element.getPsi();  boolean shouldFormat=markedRange.contains(element.getTextRange());  if (shouldFormat) {    final ASTNode rangeAnchor;    if (elementPsi instanceof PsiDocComment) {      rangeAnchor=element.getTreeParent();    } else {      rangeAnchor=element;    }    TextRange before=rangeAnchor.getTextRange();    new CommentFormatter(project).processComment(element);    int deltaRange=rangeAnchor.getTextRange().getLength() - before.getLength();    resultTextRange=new TextRange(markedRange.getStartOffset(),markedRange.getEndOffset() + deltaRange);  }  if ((shouldFormat && (elementPsi instanceof PsiMethod || elementPsi instanceof PsiField || elementPsi instanceof PsiDocComment)) || markedRange.getEndOffset() < element.getStartOffset()) {    return resultTextRange;  }  ASTNode current=element.getFirstChildNode();  while (current != null) {    if (!(shouldFormat && current.getPsi() instanceof PsiDocComment && elementPsi instanceof PsiClass)) {      resultTextRange=formatCommentsInner(project,current,resultTextRange);    }    current=current.getTreeNext();  }  return resultTextRange;}  }
class C{  public static <T extends Number,V>void show(BackgroundTask<T,V> task,Number total){  show(task,null,null,total,false);}  }
class C{  public final void initSign(PrivateKey privateKey) throws InvalidKeyException {  engineInitSign(privateKey);  state=SIGN;  if (!skipDebug && pdebug != null) {    pdebug.println("Signature." + algorithm + " signing algorithm from: "+ this.provider.getName());  }}  }
class C{  public static CloseIndexRequest closeIndexRequest(String index){  return new CloseIndexRequest(index);}  }
class C{  public String clustererTipText(){  return "The clusterer to assign clusters with.";}  }
class C{  public Strategy withShrinkCycles(int shrinks){  return new Strategy(prng,examples,shrinks,reporter);}  }
class C{  @Override public void stop(ShutdownModeAmp mode){  if (_podContainer != null) {    _podContainer.stop(mode);  }}  }
class C{  void removeHelper(BinaryNode<T> target,BinaryNode<T> parent){  BinaryNode<T> lnode=target.getLeftSon();  BinaryNode<T> rnode=target.getRightSon();  if (lnode == null && rnode == null) {    if (parent == null) {      setRoot(null);      return;    }    if (parent.getLeftSon() == target) {      parent.left=null;    } else {      parent.right=null;    }    return;  }  if (lnode != null && rnode == null) {    if (parent == null) {      setRoot(lnode);      return;    }    if (parent.getLeftSon() == target) {      parent.left=lnode;    } else {      parent.right=lnode;    }    return;  }  if (rnode != null && lnode == null) {    if (parent == null) {      setRoot(rnode);      return;    }    if (parent.getLeftSon() == target) {      parent.left=rnode;    } else {      parent.right=rnode;    }    return;  }  BinaryNode<T> minNode=rnode;  BinaryNode<T> rparent=null;  while (minNode.getLeftSon() != null) {    rparent=minNode;    minNode=minNode.getLeftSon();  }  if (rparent == null) {    target.value=minNode.value;    target.right=minNode.right;    return;  }  T minValue=minNode.value;  removeHelper(minNode,rparent);  target.value=minValue;}  }
class C{  public OutputStream openOutputStream(String file) throws IOException {  return Util.getImplementation().openFileOutputStream(file);}  }
class C{  public List<String> messages(){  List<String> result=Lists.newArrayList();  for (  LogRecord record : records) {    result.add(record.getMessage());  }  return result;}  }
class C{  public synchronized int countAllLike(String filter){  Query query=null;  if (filter.indexOf('*') == -1) {    query=this.entityManager.createQuery("Select count(v) from Vertex v where v.dataValue = :filter");    query.setParameter("filter",filter);  } else {    query=this.entityManager.createQuery("Select count(v) from Vertex v where v.dataValue like :filter");    query.setParameter("filter",filter.replace('*','%'));  }  setHints(query);  return ((Number)query.getSingleResult()).intValue();}  }
class C{  public static boolean isPrimitive(DictionaryTypes2.ModelDesign.DataType dt){  String className=toFullClassName(dt.SymbolicName);  if (dt.Name.equals("Structure"))   className="java.lang.Object";  return isPrimitive(className);}  }
class C{  private IContainer containerForPath(IPath path){  if (path.segmentCount() == 1) {    return workspaceRoot.getProject(path.segment(0));  } else {    return workspaceRoot.getFolder(path);  }}  }
class C{  public Instrumenter attach(Collector collector){  customCollectors.add(collector);  return this;}  }
class C{  public void removeGameListener(GameListener listener){  if (gameListeners == null) {    gameListeners=new Vector<GameListener>();  }  gameListeners.removeElement(listener);}  }
class C{  public AddressServiceImpl(final GenericDAO<Address,Long> genericDao,final OrderAddressFormatter orderAddressFormatter){  super(genericDao);  this.orderAddressFormatter=orderAddressFormatter;}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public static String format(final long millis,final String pattern){  return format(new Date(millis),pattern,null,null);}  }
class C{  public void test_concurrentKBCreateAndDiscovery() throws Exception {  final String namespace=getName();  final Properties properties=getProperties();  Journal jnl=null;  try {    jnl=new Journal(properties);    doConcurrentCreateAndDiscoveryTest(jnl,namespace);  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  public RegionCreation(CacheCreation cache,RegionCreation parent,String name,String refid){  this.cache=cache;  if (parent != null) {    this.fullPath=parent.getFullPath() + SEPARATOR + name;  } else {    this.fullPath=SEPARATOR + name;  }  this.name=name;  this.refid=refid;  this.attrs=new RegionAttributesCreation(this.cache);  if (refid != null) {    this.attrs.setRefid(refid);    this.attrs.inheritAttributes(cache);  }}  }
class C{  public SubscriptionStillActiveException(){  super();}  }
class C{  public void canelAllLoadTask(){  if (executorService != null) {    executorService.shutdownNow();    executorService=null;  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  createDoorAndKey(zone);  attackableAnimal(zone);}  }
class C{  protected void computeAxisValues(float min,float max){  float yMin=min;  float yMax=max;  int labelCount=mYAxis.getLabelCount();  double range=Math.abs(yMax - yMin);  if (labelCount == 0 || range <= 0) {    mYAxis.mEntries=new float[]{};    mYAxis.mEntryCount=0;    return;  }  double rawInterval=range / labelCount;  double interval=Utils.roundToNextSignificant(rawInterval);  double intervalMagnitude=Math.pow(10,(int)Math.log10(interval));  int intervalSigDigit=(int)(interval / intervalMagnitude);  if (intervalSigDigit > 5) {    interval=Math.floor(10 * intervalMagnitude);  }  if (mYAxis.isForceLabelsEnabled()) {    float step=(float)range / (float)(labelCount - 1);    mYAxis.mEntryCount=labelCount;    if (mYAxis.mEntries.length < labelCount) {      mYAxis.mEntries=new float[labelCount];    }    float v=min;    for (int i=0; i < labelCount; i++) {      mYAxis.mEntries[i]=v;      v+=step;    }  } else {    if (mYAxis.isShowOnlyMinMaxEnabled()) {      mYAxis.mEntryCount=2;      mYAxis.mEntries=new float[2];      mYAxis.mEntries[0]=yMin;      mYAxis.mEntries[1]=yMax;    } else {      double first=Math.ceil(yMin / interval) * interval;      double last=Utils.nextUp(Math.floor(yMax / interval) * interval);      double f;      int i;      int n=0;      for (f=first; f <= last; f+=interval) {        ++n;      }      mYAxis.mEntryCount=n;      if (mYAxis.mEntries.length < n) {        mYAxis.mEntries=new float[n];      }      for (f=first, i=0; i < n; f+=interval, ++i) {        mYAxis.mEntries[i]=(float)f;      }    }  }  if (interval < 1) {    mYAxis.mDecimals=(int)Math.ceil(-Math.log10(interval));  } else {    mYAxis.mDecimals=0;  }}  }
class C{  @Override public MinguoDate dateYearDay(int prolepticYear,int dayOfYear){  return new MinguoDate(LocalDate.ofYearDay(prolepticYear + YEARS_DIFFERENCE,dayOfYear));}  }
class C{  public CColorCriterium(final ZyGraph graph){  m_panel=new CColorCriteriumPanel(this,graph);}  }
class C{  public boolean hasNoDragOffset(){  return mViewPortHandler.hasNoDragOffset();}  }
class C{  public static ByteBuffer inputStreamToByteArray(InputStream is,long maxSize) throws IOException {  BAOS bos=new BAOS();  long sz=0;  int next=is.read();  while (next > -1) {    if (++sz > maxSize)     throw new BufferOverflowException();    bos.write(next);    next=is.read();  }  bos.flush();  is.close();  return bos.getByteBuffer();}  }
class C{  private static CalendarEventEntry createQuickAddEvent(CalendarService service,String quickAddContent) throws ServiceException, IOException {  return createEvent(service,null,quickAddContent,null,true,null);}  }
class C{  public GeneralizedSemImParamsEditor(GeneralizedSemIm semIm,Map<Object,EditorWindow> launchedEditors){  this.semIm=semIm;  Map<Object,EditorWindow> launchedEditors1=launchedEditors;  this.semPm=semIm.getSemPm();  freshenDisplay();}  }
class C{  private static int mod(int a,int b){  int n=a / b;  a-=n * b;  if (a < 0)   return a + b;  return a;}  }
class C{  public PrefaceBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Preface.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.content_storage == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Preface.ERROR_DESCRIPTION_PREFIX + "content_storage is null");  }  if (this.operational_pattern == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Preface.ERROR_DESCRIPTION_PREFIX + "operational_pattern is null");  }  if (this.essencecontainers == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Preface.ERROR_DESCRIPTION_PREFIX + "essencecontainers is null");  }}  }
class C{  public LocalLogWriter(int level){  super(level);}  }
class C{  @Override public void updateSQLXML(String columnLabel,SQLXML xmlObject) throws SQLException {  throw unsupported("SQLXML");}  }
class C{  private PDFObject readObject(int objNum,int objGen,boolean numscan,PDFDecrypter decrypter) throws IOException {  int c;  PDFObject obj=null;  while (obj == null) {    while (isWhiteSpace(c=buf.get())) {    }    if (c == '<') {      c=buf.get();      if (c == '<') {        obj=readDictionary(objNum,objGen,decrypter);      } else {        buf.position(buf.position() - 1);        obj=readHexString(objNum,objGen,decrypter);      }    } else     if (c == '(') {      obj=readLiteralString(objNum,objGen,decrypter);    } else     if (c == '[') {      obj=readArray(objNum,objGen,decrypter);    } else     if (c == '/') {      obj=readName();    } else     if (c == '%') {      readLine();    } else     if ((c >= '0' && c <= '9') || c == '-' || c == '+' || c == '.') {      obj=readNumber((char)c);      if (!numscan) {        int startPos=buf.position();        PDFObject testnum=readObject(-1,-1,true,decrypter);        if (testnum != null && testnum.getType() == PDFObject.NUMBER) {          PDFObject testR=readObject(-1,-1,true,decrypter);          if (testR != null && testR.getType() == PDFObject.KEYWORD && testR.getStringValue().equals("R")) {            PDFXref xref=new PDFXref(obj.getIntValue(),testnum.getIntValue());            obj=new PDFObject(this,xref);          } else           if (testR != null && testR.getType() == PDFObject.KEYWORD && testR.getStringValue().equals("obj")) {            obj=readObjectDescription(obj.getIntValue(),testnum.getIntValue(),decrypter);          } else {            buf.position(startPos);          }        } else {          buf.position(startPos);        }      }    } else     if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {      obj=readKeyword((char)c);    } else {      buf.position(buf.position() - 1);      break;    }  }  return obj;}  }
class C{  public PostConstructApplicationEvent(FacesContext facesContext,Application application){  super(facesContext,application);}  }
class C{  public static boolean isValidPMoveStrict(String san){  if (san.length() == 2) {    return FILES.indexOf(san.charAt(0)) != -1 && RANKS.indexOf(san.charAt(1)) != -1;  } else {    return false;  }}  }
class C{  public void clear(){  mRecords.clear();  mCallbacks.onDatasetClear(mBluetoothDevice);}  }
class C{  @Deprecated public static boolean isConcrete(XMethod xmethod){  int accessFlags=xmethod.getAccessFlags();  return (accessFlags & Constants.ACC_ABSTRACT) == 0 && (accessFlags & Constants.ACC_NATIVE) == 0;}  }
class C{  private void ensureFreeBytes(int len){  if (bufsize - offset < len) {    int newsize=bufsize * BUF_GROWTH_FACTOR;    if (newsize - offset < len) {      newsize+=len;    }    byte newbuf[]=new byte[newsize];    System.arraycopy(buf,0,newbuf,0,offset);    buf=newbuf;    bufsize=newsize;  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public void addRequestsFromSTOP(TOMMessage[] requestsFromSTOP){  if (this.requestsFromSTOP == null)   this.requestsFromSTOP=new LinkedList<>();  for (  TOMMessage m : requestsFromSTOP)   this.requestsFromSTOP.add(m);}  }
class C{  public final boolean isDate(){  return (m_Type == DATE);}  }
class C{  public BufferOp(Geometry g,BufferParameters bufParams){  argGeom=g;  this.bufParams=bufParams;}  }
class C{  public void handleNoSelection(){  LAUNCH_ACTION.setEnabled(false);  LAUNCH_OS_ACTION.setEnabled(false);  OPEN_IN_FOLDER_ACTION.setEnabled(false);  SEND_TO_FRIEND_ACTION.setEnabled(false);  CREATE_TORRENT_ACTION.setEnabled(false);  DELETE_ACTION.setEnabled(false);  SEND_TO_ITUNES_ACTION.setEnabled(false);}  }
class C{  public static String mangleClass(Class cl,boolean isFull){  String name=cl.getName();  if (name.equals("boolean") || name.equals("java.lang.Boolean"))   return "boolean"; else   if (name.equals("int") || name.equals("java.lang.Integer") || name.equals("short")|| name.equals("java.lang.Short")|| name.equals("byte")|| name.equals("java.lang.Byte"))   return "int"; else   if (name.equals("long") || name.equals("java.lang.Long"))   return "long"; else   if (name.equals("float") || name.equals("java.lang.Float") || name.equals("double")|| name.equals("java.lang.Double"))   return "double"; else   if (name.equals("java.lang.String") || name.equals("com.caucho.util.CharBuffer") || name.equals("char")|| name.equals("java.lang.Character")|| name.equals("java.io.Reader"))   return "string"; else   if (name.equals("java.util.Date") || name.equals("com.caucho.util.QDate"))   return "date"; else   if (InputStream.class.isAssignableFrom(cl) || name.equals("[B"))   return "binary"; else   if (cl.isArray()) {    return "[" + mangleClass(cl.getComponentType(),isFull);  } else   if (name.equals("org.w3c.dom.Node") || name.equals("org.w3c.dom.Element") || name.equals("org.w3c.dom.Document"))   return "xml"; else   if (isFull)   return name; else {    int p=name.lastIndexOf('.');    if (p > 0)     return name.substring(p + 1); else     return name;  }}  }
class C{  public double distanceSq(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  private void ensureEventOfTechnicalProduct(TechnicalProduct techProd,String eventId) throws ObjectNotFoundException {  for (  Event techProdEvent : techProd.getEvents()) {    if (techProdEvent.getEventIdentifier().equals(eventId)) {      return;    }  }  ObjectNotFoundException e=new ObjectNotFoundException(ClassEnum.EVENT,eventId);  logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_INEXISTENT_OBJECT_WITH_BUSINESS_KEY,ClassEnum.EVENT.name(),eventId);  throw e;}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  setRetrieval(NONE);  try {    if (m_DataBaseConnection != null && m_DataBaseConnection.isConnected()) {      m_DataBaseConnection.disconnectFromDatabase();    }    m_DataBaseConnection=newDatabaseConnection();  } catch (  Exception ex) {    printException(ex);  }  m_URL=m_DataBaseConnection.getDatabaseURL();  m_tableName="";  m_Username=m_DataBaseConnection.getUsername();  m_Password=m_DataBaseConnection.getPassword();  m_count=1;  m_id=false;  m_tabName=true;}  }
class C{  public void addColor(int index,ColorRGB color){  int oldIdx=listOfColors.indexOf(color);  if (oldIdx != -1) {    ListUtility.changeIndex(listOfColors,color,index);  } else {    this.listOfColors.add(index,color);    observeForChanges(color);  }  fireUpdate(this);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  byte[] src=get();  byte[] dest=new byte[src.length];  ConstPool cp=getConstPool();  InnerClassesAttribute attr=new InnerClassesAttribute(newCp,dest);  int n=ByteArray.readU16bit(src,0);  ByteArray.write16bit(n,dest,0);  int j=2;  for (int i=0; i < n; ++i) {    int innerClass=ByteArray.readU16bit(src,j);    int outerClass=ByteArray.readU16bit(src,j + 2);    int innerName=ByteArray.readU16bit(src,j + 4);    int innerAccess=ByteArray.readU16bit(src,j + 6);    if (innerClass != 0)     innerClass=cp.copy(innerClass,newCp,classnames);    ByteArray.write16bit(innerClass,dest,j);    if (outerClass != 0)     outerClass=cp.copy(outerClass,newCp,classnames);    ByteArray.write16bit(outerClass,dest,j + 2);    if (innerName != 0)     innerName=cp.copy(innerName,newCp,classnames);    ByteArray.write16bit(innerName,dest,j + 4);    ByteArray.write16bit(innerAccess,dest,j + 6);    j+=8;  }  return attr;}  }
class C{  public Enumeration enumurateQueue(){  Vector elements=new Vector();synchronized (LOCK) {    Enumeration e=pending.elements();    while (e.hasMoreElements()) {      elements.addElement(e.nextElement());    }  }  return elements.elements();}  }
class C{  @Override public void addChild(FXGNode child){  super.addChild(child);}  }
class C{  synchronized int next(DataOutputBuffer buffer) throws IOException {  try {    int length=readRecordLength();    if (length == -1) {      return -1;    }    int keyLength=in.readInt();    buffer.write(in,length);    return keyLength;  } catch (  ChecksumException e) {    handleChecksumException(e);    return next(buffer);  }}  }
class C{  public static void fill(float[] array,float value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private boolean addGetView_ID(Integer intId){  UISootObject obj=mUiObjectTable.get(intId);  logger.info("addGetView_ID({}:{}) ",intId.toString(),String.format("%x",intId));  if (obj == null) {    logger.warn("Object for id {} does not exist ",String.format("%x",intId));    return false;  }  if (obj.sootField == null) {    logger.warn("No sootfield previously created ");    return false;  }  List<Type> params=new LinkedList<Type>();  params.add(RefType.v("android.content.Context"));  RefType returnType=(RefType)obj.sootField.getType();  SootMethod viewInitMethod=Scene.v().getActiveHierarchy().resolveConcreteDispatch(returnType.getSootClass(),mViewInitMethod);  if (viewInitMethod == null) {    logger.warn("Cannot locate proper constructor for {})",returnType);    return false;  }  String funcName="getView_" + String.format("%x",intId);  SootMethod method=new SootMethod(funcName,params,returnType,Modifier.PUBLIC | Modifier.STATIC);  obj.lookupMethod=method;  mSootClass.addMethod(method);  API.v().addSafeMethod(method);  JimpleBody body=Jimple.v().newBody(method);  method.setActiveBody(body);  Chain<Unit> units=body.getUnits();  Local argContext=Jimple.v().newLocal("_$paramContext",RefType.v("android.content.Context"));  body.getLocals().add(argContext);  Local localView=Jimple.v().newLocal("_$localView",returnType);  body.getLocals().add(localView);  units.add(Jimple.v().newIdentityStmt(argContext,Jimple.v().newParameterRef(RefType.v("android.content.Context"),0)));  FieldRef fieldRef=Jimple.v().newStaticFieldRef(obj.sootField.makeRef());  units.add(Jimple.v().newAssignStmt(localView,fieldRef));  Stmt beforeIf=(Stmt)units.getLast();  Expr newExpr=Jimple.v().newNewExpr((RefType)returnType);  units.add(Jimple.v().newAssignStmt(localView,newExpr));  units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(localView,viewInitMethod.makeRef(),argContext)));  for (  String attrName : obj.attributes.keySet()) {    SootMethod setter=AttributeSetterMap.v().resolveSetter(attrName,returnType.getSootClass());    if (setter == null) {      continue;    }    logger.debug("attr {} => setter {} ",attrName,setter);    Set<String> textSet=new HashSet<String>();    String attrValue=obj.attributes.get(attrName);    if (attrValue.contains("@")) {      String stringName=attrValue;      stringName=stringName.replace("@android:string/","android.R.string.");      stringName=stringName.replace("@string/","string.");      if (mStringToValueSet.containsKey(stringName)) {        logger.debug("{} can be expanded ",stringName);        Set<RString> rstringList=mStringToValueSet.get(stringName);        for (        RString rstring : rstringList) {          if (rstring == null || rstring.value == null)           continue;          textSet.add(rstring.value);        }      } else {        logger.warn("attr {} => {} not in mStringToValueSet ",attrValue,stringName);      }    } else {      textSet.add(attrValue);    }    for (    String text : textSet) {      Expr settingExpr=Jimple.v().newVirtualInvokeExpr(localView,setter.makeRef(),StringConstant.v(text));      Stmt settingStmt=Jimple.v().newInvokeStmt(settingExpr);      logger.debug("text <{}> ",text);      logger.debug("settingText expr {} ",settingExpr);      units.add(settingStmt);    }  }  units.add(Jimple.v().newAssignStmt(fieldRef,localView));  Stmt afterIf=Jimple.v().newReturnStmt(localView);  units.add(afterIf);  ConditionExpr condExpr=Jimple.v().newNeExpr(localView,NullConstant.v());  Stmt condStmt=Jimple.v().newIfStmt(condExpr,afterIf);  logger.debug("condStmt {} ",condStmt);  units.insertAfter(condStmt,beforeIf);  return true;}  }
class C{  public void close(){  this.memberHealth.close();  this.cacheHealth.close();}  }
class C{  public Builder icon(Icon icon){  this.icon=icon;  return this;}  }
class C{  private void addStrokeShape(Shape s){  Shape transShape=getStroke().createStrokedShape(s);  addDrawingRect(transShape.getBounds2D());}  }
class C{  private void loadWallDataToViews(final Cursor cursor){  mGroupIdSelected=cursor.getString(cursor.getColumnIndex(DatabaseColumns.GROUP_ID));  mTagNameSelected=cursor.getString(cursor.getColumnIndex(DatabaseColumns.TAG_NAME));  mTagIdSelected=cursor.getString(cursor.getColumnIndex(DatabaseColumns.TAG_ID));  Logger.i(TAG,"%s","The loaded Group has id=" + mGroupIdSelected + " and tag name= "+ mTagNameSelected);  String name=cursor.getString(cursor.getColumnIndex(DatabaseColumns.USER_NAME));  String message=cursor.getString(cursor.getColumnIndex(DatabaseColumns.MESSAGE));  String groupName=cursor.getString(cursor.getColumnIndex(DatabaseColumns.GROUP_NAME));  String mWallImageUrl=cursor.getString(cursor.getColumnIndex(DatabaseColumns.WALL_IMAGES));  String color=cursor.getString(cursor.getColumnIndex(DatabaseColumns.COLOR));  String city=cursor.getString(cursor.getColumnIndex(DatabaseColumns.CITY));  String country=cursor.getString(cursor.getColumnIndex(DatabaseColumns.COUNTRY));  String address=cursor.getString(cursor.getColumnIndex(DatabaseColumns.ADDRESS));  mMessageEdit.setText(message);  mGocName.setText(groupName.toUpperCase());  if (address != null && !TextUtils.isEmpty(address)) {    mPlaceName.setText(address);    mAddressName=address;    mCityName=city;    mCountryName=country;  }  mCategoryName.setText(mTagNameSelected);  if (mWallImageUrl.equals("")) {    mWallImage.setVisibility(View.GONE);  } else {    mWallImage.setVisibility(View.VISIBLE);    Glide.with(this).load(mWallImageUrl).asBitmap().centerCrop().override(500,300).animate(R.anim.fade_in).placeholder(R.color.snow_light).into(mWallImage);  }  if (color != null && !TextUtils.isEmpty(color)) {    mActionColor=color;    colorizeActionBar(Color.parseColor(mActionColor),mToolbar);    colorizeView(Color.parseColor(mActionColor),mGocFrame);  }  loadSubCategories(mGroupIdSelected);}  }
class C{  public void testCertPathBuilder10() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathBuilder certPB;  for (int i=0; i < invalidValues.length; i++) {    certPB=CertPathBuilder.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",certPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPB.getProvider(),defaultProvider);  }}  }
class C{  public static boolean isSdcardWritable(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    return true;  }  return false;}  }
class C{  public Reader(RecordStream recordStream,DataInputStream in,long startSequenceId){  this(recordStream,in,startSequenceId,true);}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  public long term(){  return term;}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public Sensor createNewSensor(String systemName,String userName){  Sensor s;  String sName=SerialAddress.normalizeSystemName(systemName);  if (sName.equals("")) {    log.error("Invalid Sensor system name - " + systemName);    return null;  }  s=getBySystemName(sName);  if (s != null) {    log.error("Sensor with this name already exists - " + systemName);    return null;  }  String altName=SerialAddress.convertSystemNameToAlternate(sName);  s=getBySystemName(altName);  if (s != null) {    log.error("Sensor with name '" + systemName + "' already exists as '"+ altName+ "'");    return null;  }  int bit=SerialAddress.getBitFromSystemName(sName);  if ((bit <= 0) || (bit >= SENSORSPERNODE)) {    log.error("Sensor bit number, " + Integer.toString(bit) + ", is outside the supported range, 1-"+ Integer.toString(SENSORSPERNODE - 1));    return null;  }  if (userName == null) {    s=new SerialSensor(sName);  } else {    s=new SerialSensor(sName,userName);  }  SerialNode node=SerialAddress.getNodeFromSystemName(sName);  if (node == null) {    log.warn("Sensor " + sName + " refers to an undefined Serial Node.");    return s;  }  node.registerSensor(s,bit - 1);  return s;}  }
class C{  public static char gsmToChar(int gsmChar){  if (gsmChar >= 0 && gsmChar < 128) {    return sLanguageTables[0].charAt(gsmChar);  } else {    return ' ';  }}  }
class C{  public static void initialWarning(String s){  initialWarning(s,null,null);}  }
class C{  public void onClick(View view,String videoId){  setVideoId(videoId);  attachToView(view);}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.LOGICAL_OR_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final void addSeparator(){  add(Separator.getInstance());}  }
class C{  public static String fixedWidth(String str,int width){  String[] lines=split(str,"\n");  return fixedWidth(lines,width);}  }
class C{  public void replaceFile(InputStream inputStreamFile,String fileExt){  m_pathFile=null;  m_inputStreamFile=inputStreamFile;  m_fileExt=fileExt;  m_isUpdateFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  public DataFilterCriteria.Builder<Select<Model>> openBracketAnd(){  return new DataFilterCriteria.Builder<Select<Model>>(this,DataFilterClause.DataFilterConjunction.AND);}  }
class C{  public String evaluationMetricsToOutputTipText(){  return "A comma-separated list of evaluation metrics to output";}  }
class C{  public String numClustersTipText(){  return "set number of clusters";}  }
class C{  public boolean isLabelProperty(Object element,String property){  return false;}  }
class C{  public ServiceV2 prepareNewCinderService(Boolean isCinderv2){  ServiceV2 service=new ServiceV2();  if (isCinderv2) {    service.setName(KeystoneUtils.OPENSTACK_CINDER_V2_NAME);    service.setType(CinderConstants.SERVICE_TYPE_VOLUMEV2);  } else {    service.setName(KeystoneUtils.OPENSTACK_CINDER_V1_NAME);    service.setType(CinderConstants.SERVICE_TYPE_VOLUME);  }  service.setDescription(CinderConstants.SERVICE_DESCRIPTION);  return service;}  }
class C{  protected void onClosed(int position,boolean fromRight){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onClosed(position,fromRight);  }}  }
class C{  private void emitDeserializer(List<Method> getters,StringBuilder builder){  builder.append("    public static ").append(getImplClassName()).append(" fromJsonObject(JSONValue jsonValue) {\n");  builder.append("      return fromJsonObjectInt(jsonValue, true);\n");  builder.append("    }\n");  builder.append("    public static ").append(getImplClassName()).append(" fromJsonObjectInt(JSONValue jsonValue, boolean ").append(COPY_JSONS_PARAM).append(") {\n");  builder.append("      if (jsonValue == null || jsonValue.isNull() != null) {\n");  builder.append("        return null;\n");  builder.append("      }\n\n");  builder.append("      ").append(getImplClassName()).append(" dto = new ").append(getImplClassName()).append("();\n");  if (isCompactJson()) {    for (    Method method : getters) {      emitDeserializeFieldForMethodCompact(method,builder);    }  } else {    builder.append("      JSONObject json = jsonValue.isObject();\n");    for (    Method getter : getters) {      emitDeserializeFieldForMethod(getter,builder);    }  }  builder.append("\n      return dto;\n");  builder.append("    }\n\n");}  }
class C{  public boolean hasBatchInterrupted(){  return hasExtension(BatchInterrupted.class);}  }
class C{  public String toString(){  return this.sourceClipBO.toString();}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append("WriteExecutorService");  sb.append("{ paused=" + paused);  sb.append(", nrunning=" + nrunning);  sb.append(", concurrentTaskCount=" + activeTaskCountWithLocksHeld);  sb.append(", activeTaskSetSize=" + active.size());  sb.append(", nwrites=" + nwrites);  sb.append(", groupCommitFlag=" + groupCommit);  sb.append(", abortFlag=" + abort);  sb.append(", lockHeldByCurrentThread=" + lock.isHeldByCurrentThread());  sb.append(", lockHoldCount=" + lock.getHoldCount());  sb.append(", lockQueueLength=" + lock.getQueueLength());  if (lock.isHeldByCurrentThread()) {    sb.append(", lockWaitQueueLength(unpaused)=" + lock.getWaitQueueLength(unpaused));    sb.append(", lockWaitQueueLength(waiting)=" + lock.getWaitQueueLength(waiting));    sb.append(", lockWaitQueueLength(commit)=" + lock.getWaitQueueLength(commit));  }  sb.append(", activeCount=" + getActiveCount());  sb.append(", queueSize=" + getQueue().size());  sb.append(", poolSize=" + getPoolSize());  sb.append(", largestPoolSize=" + getLargestPoolSize());  sb.append(", maxPoolSize=" + maxPoolSize);  sb.append(", maxRunning=" + maxRunning);  sb.append(", maxCommitLatency=" + maxCommitServiceTime);  sb.append(", maxLatencyUntilCommit=" + maxCommitWaitingTime);  sb.append(", groupCommitCount=" + ngroupCommits);  sb.append(", abortCount=" + naborts);  sb.append(", failedTaskCount=" + failedTaskCount);  sb.append(", successTaskCount=" + successTaskCount);  sb.append(", committedTaskCount=" + committedTaskCount);  sb.append(", overflowCount=" + noverflow);  sb.append("}");  return sb.toString();}  }
class C{  public Executor(Logger logger,String cmd){  this.logger=logger;  this.cmd=cmd;}  }
class C{  public void connectPort(AbstractSerialPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  } else {    log.debug("connectPort invoked");  }  controller=p;}  }
class C{  public static void checkDNS(String dns) throws IOException {  String string=dns.toLowerCase(Locale.US);  int length=string.length();  boolean first_letter=true;  for (int i=0; i < length; i++) {    char ch=string.charAt(i);    if (first_letter) {      if ((ch > 'z' || ch < 'a') && (ch < '0' || ch > '9') && (ch != '*')) {        throw new IOException("DNS name must start with a letter: " + dns);      }      first_letter=false;      continue;    }    if (!((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch == '-')|| (ch == '.')|| (ch == '*'))) {      throw new IOException("Incorrect DNS name: " + dns);    }    if (ch == '.') {      if (string.charAt(i - 1) == '-') {        throw new IOException("Incorrect DNS name: label ends with '-': " + dns);      }      first_letter=true;    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.RETURN_STATEMENT__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  public ContextFreeGrammar(){  super();  rules=new ArrayList<Rule>();  wrapLimit=10;}  }
class C{  public boolean isImageField(){  Object oo=get_Value(COLUMNNAME_IsImageField);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int nextOffset(float wrappingWidth){  return nextOffset(wrappingWidth,limit,false);}  }
class C{  private static void scale(Mat img,double factor){  resize(img,new Size(img.size().width * factor,img.size().height * factor));}  }
class C{  public boolean isReconnectRequired(){  return reconnectRequired;}  }
class C{  public JParamsDatesInterval(){  initComponents();}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB) : getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  void copyTo(KeyState target){  keysPressed.copyTo(target.keysPressed);  target.window=window;  target.modifiers=modifiers;}  }
class C{  private void checkFuel(){  final Entity ce=ce();  if (null == ce) {    return;  }  if (!(ce instanceof Aero)) {    return;  }  Aero a=(Aero)ce;  if (a.getFuel() < 1) {    disableButtons();    butDone.setEnabled(true);    getBtn(MoveCommand.MOVE_NEXT).setEnabled(true);    setForwardIniEnabled(true);    setLaunchEnabled((a.getLaunchableFighters().size() > 0) || (a.getLaunchableSmallCraft().size() > 0) || (a.getLaunchableDropships().size() > 0));    updateRACButton();    updateJoinButton();    updateRecoveryButton();    updateDumpButton();  }  return;}  }
class C{  protected int index(int row,int column){  return this.offset + rowOffsets[rowZero + row * rowStride] + columnOffsets[columnZero + column * columnStride];}  }
class C{  private boolean descendWithPrefix(Arc<Object> arc,BytesRef utf8) throws IOException {  final int max=utf8.offset + utf8.length;  final FST.BytesReader fstReader=automaton.getBytesReader();  for (int i=utf8.offset; i < max; i++) {    if (automaton.findTargetArc(utf8.bytes[i] & 0xff,arc,arc,fstReader) == null) {      return false;    }  }  return true;}  }
class C{  protected static String readFile(String path) throws IOException {  BufferedReader reader=null;  try {    StringBuilder output=new StringBuilder();    reader=new BufferedReader(new FileReader(path));    for (String line=reader.readLine(), newLine=""; line != null; line=reader.readLine()) {      output.append(newLine).append(line);      newLine="\n";    }    return output.toString();  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public String print(String aClassName,String aFieldOrMtdSignature,Tag aTag){  return tagPrinter.print(aClassName,aFieldOrMtdSignature,aTag);}  }
class C{  public void testDynIntSortMissingFirst() throws Exception {  checkSortMissingFirst("dyn_intdv_missingfirst","-1","4");}  }
class C{  public boolean resume(){  if (!super.resume())   return false;  boolean ok=false;  try {    m_server=(AdempiereServer)m_serverClass.newInstance();    m_server.setProcessor(m_processor);    m_server.start();    ok=true;  } catch (  Exception e) {    log.log(Level.SEVERE,"resume",e);    ok=false;  }  if (!ok)   return abort();  log.info("resume - " + ok);  getState();  return ok;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("Atts[");  for (int i=0; i < attributes.size(); i++) {    Att att=attributes.get(i);    sb.append(att.getQName());    sb.append("=");    sb.append(att.getValue());    sb.append("; ");  }  sb.append("]");  return sb.toString();}  }
class C{  List<String> listSnapshots(Collection<String> attrs){  NaElement elem=new NaElement("snapshot-list-info");  elem.addNewChild("volume",name);  NaElement resultElem=null;  try {    resultElem=server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to list snapshot for volume: " + name;    log.error(msg,e);    throw new NetAppException(msg,e);  }  ArrayList<String> snaps=new ArrayList<String>();  for (  NaElement e : (List<NaElement>)resultElem.getChildren()) {    for (    NaElement info : (List<NaElement>)e.getChildren()) {      for (      NaElement info2 : ((List<NaElement>)info.getChildren())) {        String name=info2.getName();        if (attrs == null || attrs.contains(name) || name.equals("name")) {          snaps.add(info2.getContent());        }      }    }  }  return snaps;}  }
class C{  public void applyTransform(){  m.retrieveActiveBody().getUnits().insertAfter(newStmts,insertAfter);  for (  Unit delete : deleteTheseStmts) {    m.retrieveActiveBody().getUnits().remove(delete);  }}  }
class C{  @Override public boolean isInputMethodTarget(){  return true;}  }
class C{  public MimeMultipart generate(MimeMessage message) throws CertStoreException, NoSuchAlgorithmException, NoSuchProviderException, SMIMEException {  SMIMESignedGenerator generator=createGenerator();  return generator.generate(message,"BC");}  }
class C{  public void log(Level logLevel,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  dalvikLogHandler.publish(this,androidTag,logLevel,msg);}  }
class C{  public static <E>ConstantTable<E> of(@Constant E... elements){  return new ConstantTable<E>(Equality.DEFAULT,elements);}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public ImportTask[] makeImportTasks(){  final ImportTask[] importTasks=new ImportTask[size()];  int ix=0;  for (  final ImportItemBase item : getItems()) {    final ImportFolder selectedPath=(ImportFolder)item;    importTasks[ix++]=ImportTaskFactory.createImportTask(selectedPath,importOptions);  }  return importTasks;}  }
class C{  public EventData build(){  if (eventId == null) {    eventId=UUID.randomUUID();  }  checkNotNull(type,"type");  if (data == null) {    data=EmptyArrays.EMPTY_BYTES;  }  if (metadata == null) {    metadata=EmptyArrays.EMPTY_BYTES;  }  return new EventData(this);}  }
class C{  protected static Rectangle2D extendRegion(String dxStr,String dyStr,String dwStr,String dhStr,short unitsType,GraphicsNode filteredNode,Rectangle2D region,UnitProcessor.Context uctx){  float dx, dy, dw, dh;switch (unitsType) {case USER_SPACE_ON_USE:    dx=UnitProcessor.svgHorizontalCoordinateToUserSpace(dxStr,SVG12Constants.SVG_MX_ATRIBUTE,uctx);  dy=UnitProcessor.svgVerticalCoordinateToUserSpace(dyStr,SVG12Constants.SVG_MY_ATRIBUTE,uctx);dw=UnitProcessor.svgHorizontalCoordinateToUserSpace(dwStr,SVG12Constants.SVG_MW_ATRIBUTE,uctx);dh=UnitProcessor.svgVerticalCoordinateToUserSpace(dhStr,SVG12Constants.SVG_MH_ATRIBUTE,uctx);break;case OBJECT_BOUNDING_BOX:Rectangle2D bounds=filteredNode.getGeometryBounds();if (bounds == null) {dx=dy=dw=dh=0;} else {dx=UnitProcessor.svgHorizontalCoordinateToObjectBoundingBox(dxStr,SVG12Constants.SVG_MX_ATRIBUTE,uctx);dx*=bounds.getWidth();dy=UnitProcessor.svgVerticalCoordinateToObjectBoundingBox(dyStr,SVG12Constants.SVG_MY_ATRIBUTE,uctx);dy*=bounds.getHeight();dw=UnitProcessor.svgHorizontalCoordinateToObjectBoundingBox(dwStr,SVG12Constants.SVG_MW_ATRIBUTE,uctx);dw*=bounds.getWidth();dh=UnitProcessor.svgVerticalCoordinateToObjectBoundingBox(dhStr,SVG12Constants.SVG_MH_ATRIBUTE,uctx);dh*=bounds.getHeight();}break;default :throw new IllegalArgumentException("Invalid unit type");}region.setRect(region.getX() + dx,region.getY() + dy,region.getWidth() + dw,region.getHeight() + dh);return region;}  }
class C{  public static Typeface robotoMediumItalic(Context context){  return FontSourceProcessor.process(R.raw.roboto_mediumitalic,context);}  }
class C{  public void copyResource(String resourceName,File destFile) throws IOException {  copyResource(resourceName,destFile.getPath(),defaultFileHandler);}  }
class C{  private static Configuration loadConfiguration(CommandLine cmdLine) throws KeywordOptimizerException {  PropertiesConfiguration properties=new PropertiesConfiguration();  try {    if (cmdLine.hasOption("kp")) {      String propertiesPath=cmdLine.getOptionValue("kp");      File propertiesFile=new File(propertiesPath);      log("Using keyword optimizer properties file: " + propertiesFile.getAbsolutePath());      FileInputStream is=new FileInputStream(propertiesFile);      properties.load(is);      is.close();    } else {      log("Loading keyword optimizer properties from classpath");      InputStream is=KeywordOptimizer.class.getResourceAsStream(DEFAULT_PROPERTIES_PATH);      properties.load(is);      is.close();    }  } catch (  IOException e) {    throw new KeywordOptimizerException("Error loading the configuration file",e);  }catch (  ConfigurationException e) {    throw new KeywordOptimizerException("Error parsing the configuration file",e);  }  return properties;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoFtsRecAc[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_extId1 = ").append(m_extId1);  buffer.append(", m_extId2 = ").append(m_extId2);  buffer.append(", m_extId3 = ").append(m_extId3);  buffer.append(", m_extId4 = ").append(m_extId4);  buffer.append(", m_path = ").append(m_path);  buffer.append(", m_ts = ").append(m_ts);  buffer.append("]");  return buffer.toString();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSION:return isSetVersion();}throw new IllegalStateException();}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  private Portfolio findPortfolioByName(String name){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Portfolio> query=builder.createQuery(Portfolio.class);    Root<Portfolio> from=query.from(Portfolio.class);    query.select(from);    query.where(builder.equal(from.get("name"),name));    List<Portfolio> items=entityManager.createQuery(query).getResultList();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    throw re;  }}  }
class C{  public Iterator<Map.Entry<String,AssetInfo>> iterator(){  return assets == null ? EMPTY_ITERATOR : assets.entrySet().iterator();}  }
class C{  public Category(String category){  Matcher m=categoryPattern.matcher(category);  if (!m.matches()) {    throw new IllegalArgumentException("Invalid category: " + category);  }  if (m.group(2) != null) {    scheme=m.group(2);  }  term=m.group(3);}  }
class C{  public void updateScrollBars(){  if (vertical != null && visibleLines != 0) {    vertical.setValues(firstLine,visibleLines,0,getLineCount());    vertical.setUnitIncrement(2);    vertical.setBlockIncrement(visibleLines);  }  int width=painter.getWidth();  if (horizontal != null && width != 0) {    horizontal.setValues(-horizontalOffset,width,0,width * 5);    horizontal.setUnitIncrement(painter.getFontMetrics().charWidth('w'));    horizontal.setBlockIncrement(width / 2);  }}  }
class C{  @Unretained @Retained public static Object addressToObject(@Released @Retained long ohAddress,boolean decompress,RegionEntryContext context){  if (isOffHeap(ohAddress)) {    @Unretained OffHeapStoredObject chunk=new OffHeapStoredObject(ohAddress);    @Unretained Object result=chunk;    if (decompress && chunk.isCompressed()) {      try {        byte[] decompressedBytes=chunk.getDecompressedBytes(context);        if (chunk.isSerialized()) {          result=CachedDeserializableFactory.create(decompressedBytes);        } else {          result=decompressedBytes;        }      }  finally {        chunk.release();      }    }    return result;  } else   if ((ohAddress & ENCODED_BIT) != 0) {    TinyStoredObject daa=new TinyStoredObject(ohAddress);    Object result=daa;    if (decompress && daa.isCompressed()) {      byte[] decompressedBytes=daa.getDecompressedBytes(context);      if (daa.isSerialized()) {        result=CachedDeserializableFactory.create(decompressedBytes);      } else {        result=decompressedBytes;      }    }    return result;  } else {    return addrToObj[(int)ohAddress >> 1];  }}  }
class C{  @Override public boolean contains(Object key){  return indexOf(key) >= 0;}  }
class C{  public boolean isBuiltinSoundsEnabled(){  return impl.isBuiltinSoundsEnabled();}  }
class C{  private boolean isIdentifierStartChar(int position){  if (_len >= 0 && position >= _len) {    return false;  }  char ch=_working[position];  return Character.isUnicodeIdentifierStart(ch);}  }
class C{  public void startDragOrResize(final MouseEvent e,final Point origin,boolean allowResize){  if (getSelected() == null) {    return;  }  if (!SwingUtilities.isLeftMouseButton(e)) {    return;  }  if (getSelected() instanceof OperatorAnnotation) {    allowResize=false;  }  ResizeDirection direction=null;  if (allowResize) {    direction=AnnotationResizeHelper.getResizeDirectionOrNull(getSelected(),origin);  }  if (direction != null) {    resized=new AnnotationResizeHelper(selected,direction,origin);  } else {    dragged=new AnnotationDragHelper(selected,origin,model);  }}  }
class C{  public String filterTipText(){  return "The filter to be used.";}  }
class C{  float measure(int offset,boolean trailing,FontMetricsInt fmi){  int target=trailing ? offset - 1 : offset;  if (target < 0) {    return 0;  }  float h=0;  if (!mHasTabs) {    if (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) {      return measureRun(0,offset,mLen,false,fmi);    }    if (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) {      return measureRun(0,offset,mLen,true,fmi);    }  }  char[] chars=mChars;  int[] runs=mDirections.mDirections;  for (int i=0; i < runs.length; i+=2) {    int runStart=runs[i];    int runLimit=runStart + (runs[i + 1] & Layout.RUN_LENGTH_MASK);    if (runLimit > mLen) {      runLimit=mLen;    }    boolean runIsRtl=(runs[i + 1] & Layout.RUN_RTL_FLAG) != 0;    int segstart=runStart;    for (int j=mHasTabs ? runStart : runLimit; j <= runLimit; j++) {      int codept=0;      Bitmap bm=null;      if (mHasTabs && j < runLimit) {        codept=chars[j];        if (codept >= 0xd800 && codept < 0xdc00 && j + 1 < runLimit) {          codept=Character.codePointAt(chars,j);          if (codept >= Layout.MIN_EMOJI && codept <= Layout.MAX_EMOJI) {            bm=Layout.EMOJI_FACTORY.getBitmapFromAndroidPua(codept);          } else           if (codept > 0xffff) {            ++j;            continue;          }        }      }      if (j == runLimit || codept == '\t' || bm != null) {        boolean inSegment=target >= segstart && target < j;        boolean advance=(mDir == Layout.DIR_RIGHT_TO_LEFT) == runIsRtl;        if (inSegment && advance) {          return h+=measureRun(segstart,offset,j,runIsRtl,fmi);        }        float w=measureRun(segstart,j,j,runIsRtl,fmi);        h+=advance ? w : -w;        if (inSegment) {          return h+=measureRun(segstart,offset,j,runIsRtl,null);        }        if (codept == '\t') {          if (offset == j) {            return h;          }          h=mDir * nextTab(h * mDir);          if (target == j) {            return h;          }        }        if (bm != null) {          float bmAscent=ascent(j);          float wid=bm.getWidth() * -bmAscent / bm.getHeight();          h+=mDir * wid;          j++;        }        segstart=j + 1;      }    }  }  return h;}  }
class C{  public void toByteArray(byte[] toBuf,int offset){  int toLen=(toBuf.length > count) ? count : toBuf.length;  System.arraycopy(buf,offset,toBuf,offset,toLen - offset);}  }
class C{  public void testProxyGetPreferredHttpHost_UrlNotlLocalhost() throws Exception {  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"http://"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"http://example.com"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"http://example.com/"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"http://192.168.0.1/"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"file:///foo/bar"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"rtsp://example.com"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"rtsp://example.com/"));  assertEquals(mHttpHost,Proxy.getPreferredHttpHost(mContext,"javascript:alert(1)"));}  }
class C{  public Quorum fail(){  failed++;  checkComplete();  return this;}  }
class C{  @Override public void destroy(Contextual<?> contextual){  getManager().destroy(contextual);}  }
class C{  private boolean readPath(){  _currentUrlMarker.setIndex(UrlPart.PATH,_buffer.length() - 1);  while (!_reader.eof()) {    char curr=_reader.read();    if (curr == ' ' || checkMatchingCharacter(curr) != CharacterMatch.CharacterNotMatched) {      return readEnd(ReadEndState.ValidUrl);    }    _buffer.append(curr);    if (curr == '?') {      return readQueryString();    } else     if (curr == '#') {      return readFragment();    }  }  return readEnd(ReadEndState.ValidUrl);}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void run(){  if (script.isAsynchronous()) {    ThreadingUtils.logThreadStarting("Script " + script.getName());  }  script.touch();  runningThread=Thread.currentThread();  boolean firstRun=true;  while (firstRun || (script.isRepeat() && !ScriptRunningState.STOPPED.equals(script.getStatus()))) {    logger.debug("Running [{}] script: first run = {}, repeat = {}, state = {}",script.getName(),firstRun,script.isRepeat(),script.getStatus());    firstRun=false;    changeState(ScriptRunningState.RUNNING);    if (script.isAsynchronous()) {      new Thread(new ScriptHealthDetector(eventBus,script,executor)).start();    }    try {      runScript();    } catch (    Exception e) {      changeState(ScriptRunningState.FAILED);      setLastThrownException(e);      logger.error("Script execution exception",e);      break;    }    if (script.isRepeat()) {      logger.debug("Re-running script {}",script.getName());    }  }  script.stop();  if (script.isAsynchronous()) {    ThreadingUtils.logThreadEnding();  }}  }
class C{  private void moveOutlet(float xPos){  float scale=mRootView.getWidth() / 10.0f;  mAnimationOutlet=new TranslateAnimation(mOutletPreviousXPos,(scale * xPos) - mOutletOffset,0,0);  mAnimationOutlet.setDuration(700);  mAnimationOutlet.setFillAfter(true);  mAnimationOutlet.setStartOffset(400);  mAnimationOutlet.setAnimationListener(this);  mGameOutlet.startAnimation(mAnimationOutlet);  mOutletPreviousXPos=(scale * xPos) - mOutletOffset;}  }
class C{  public void updateUdaDefinition() throws SaaSApplicationException {  ArgumentValidator.notNull("UdaDefinitionDetails",model);  VOUdaDefinition udaDefitionDetails=UdaModelConverter.convertUdaDefDetailsToVoUdaDefinition(model.getCurrentUdaDefinition());  if (model.getUdaType().equals(UdaBean.CUSTOMER)) {    udaDefitionDetails.setTargetType(UdaBean.CUSTOMER);  } else {    udaDefitionDetails.setTargetType(UdaBean.CUSTOMER_SUBSCRIPTION);  }  persistUda(udaDefitionDetails,true);}  }
class C{  public RSyntaxTextAreaDefaultInputMap(){  int defaultMod=getDefaultModifier();  int shift=InputEvent.SHIFT_MASK;  put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,shift),RSyntaxTextAreaEditorKit.rstaDecreaseIndentAction);  put(KeyStroke.getKeyStroke('}'),RSyntaxTextAreaEditorKit.rstaCloseCurlyBraceAction);  put(KeyStroke.getKeyStroke('/'),RSyntaxTextAreaEditorKit.rstaCloseMarkupTagAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,defaultMod),RSyntaxTextAreaEditorKit.rstaToggleCommentAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_OPEN_BRACKET,defaultMod),RSyntaxTextAreaEditorKit.rstaGoToMatchingBracketAction);  put(CodeTemplateManager.TEMPLATE_KEYSTROKE,RSyntaxTextAreaEditorKit.rstaPossiblyInsertTemplateAction);}  }
class C{  static public Automaton concatenate(Automaton a1,Automaton a2){  return concatenate(Arrays.asList(a1,a2));}  }
class C{  public void testCase3(){  byte aBytes[]={3,4,5,6,7,8,9};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={2,2,2,2,2,2,2};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static String addDotToFileExtension(String fileExt){  String temFileExt=fileExt;  if (fileExt.charAt(0) != '.') {    String dotStr=".";    temFileExt=dotStr.concat(fileExt);  }  return temFileExt;}  }
class C{  public void addItem(ValueNamePair pp){  appendItem(pp.getName(),pp.getValue());}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  public void printRecords(final ResultSet resultSet) throws SQLException, IOException {  final int columnCount=resultSet.getMetaData().getColumnCount();  while (resultSet.next()) {    for (int i=1; i <= columnCount; i++) {      print(resultSet.getString(i));    }    println();  }}  }
class C{  public void endRecovery(long start,long bytesRead){  this.stats.incInt(recoveriesInProgressId,-1);  long end=DistributionStats.getStatTime();  this.stats.incLong(recoveryTimeId,end - start);  this.stats.incLong(recoveredBytesId,bytesRead);}  }
class C{  public Integer offset(){  return offset;}  }
class C{  public boolean isZoomButtonsVisible(){  return mZoomButtonsVisible;}  }
class C{  public static void main(final String[] args){  TransitSchedule schedule=ScheduleTools.readTransitSchedule(args[0]);  TransitSchedule debug=ScheduleTools.createSchedule();  for (  TransitLine tl : schedule.getTransitLines().values()) {    if (tl.getId().toString().equals(args[1])) {      for (      TransitRoute tr : tl.getRoutes().values()) {        if (tr.getId().toString().equals(args[2])) {          TransitLine line=debug.getFactory().createTransitLine(tl.getId());          line.addRoute(tr);          debug.addTransitLine(line);          for (          TransitRouteStop rs : tr.getStops()) {            if (!debug.getFacilities().containsKey(rs.getStopFacility().getId())) {              debug.addStopFacility(rs.getStopFacility());            }          }        }      }    }  }  ScheduleTools.writeTransitSchedule(debug,args[3]);}  }
class C{  public static boolean isLookupOpValid(LookupOp lop,BufferedImage srcImg){  LookupTable table=lop.getTable();  int numComps=table.getNumComponents();  ColorModel srcCM=srcImg.getColorModel();  if (srcCM instanceof IndexColorModel) {    throw new IllegalArgumentException("LookupOp cannot be " + "performed on an indexed image");  }  if (numComps != 1 && numComps != srcCM.getNumComponents() && numComps != srcCM.getNumColorComponents()) {    throw new IllegalArgumentException("Number of arrays in the " + " lookup table (" + numComps + ") is not compatible with"+ " the src image: "+ srcImg);  }  int csType=srcCM.getColorSpace().getType();  if (csType != ColorSpace.TYPE_RGB && csType != ColorSpace.TYPE_GRAY) {    return false;  }  if (numComps == 2 || numComps > 4) {    return false;  }  if (table instanceof ByteLookupTable) {    byte[][] data=((ByteLookupTable)table).getTable();    for (int i=1; i < data.length; i++) {      if (data[i].length > 256 || data[i].length != data[i - 1].length) {        return false;      }    }  } else   if (table instanceof ShortLookupTable) {    short[][] data=((ShortLookupTable)table).getTable();    for (int i=1; i < data.length; i++) {      if (data[i].length > 256 || data[i].length != data[i - 1].length) {        return false;      }    }  } else {    return false;  }  return true;}  }
class C{  public void refreshRow() throws SQLException {  crsInternal.refreshRow();}  }
class C{  private double fps(){  long lastTime=System.nanoTime();  times.addLast(lastTime);  double NANOS=1000000000.0;  double difference=(lastTime - times.getFirst()) / NANOS;  int size=times.size();  int MAX_SIZE=100;  if (size > MAX_SIZE) {    times.removeFirst();  }  return difference > 0 ? times.size() / difference : 0.0;}  }
class C{  @VisibleForTesting public ProjectLocationWorkingSet(final String id,final ProjectLocationAwareWorkingSetManager manager){  super(id,manager);}  }
class C{  public GroupConstraint(Constraint... group){  this.group=group;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__BODY:    setBody((RegularExpressionBody)newValue);  return;case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__FLAGS:setFlags((RegularExpressionFlags)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void visitReference(JCMemberReference tree){  ReferenceTranslationContext localContext=(ReferenceTranslationContext)context;  Symbol refSym=localContext.isSignaturePolymorphic() ? localContext.sigPolySym : tree.sym;  JCExpression init;switch (tree.kind) {case IMPLICIT_INNER:case SUPER:    init=makeThis(localContext.owner.enclClass().asType(),localContext.owner.enclClass());  break;case BOUND:init=tree.getQualifierExpression();init=attr.makeNullCheck(init);break;case UNBOUND:case STATIC:case TOPLEVEL:case ARRAY_CTOR:init=null;break;default :throw new InternalError("Should not have an invalid kind");}List<JCExpression> indy_args=init == null ? List.<JCExpression>nil() : translate(List.of(init),localContext.prev);result=makeMetafactoryIndyCall(localContext,localContext.referenceKind(),refSym,indy_args);}  }
class C{  static public String decodeDirection(int d){  if (d == NONE) {    return "None";  }  StringBuffer b=new StringBuffer();  if ((d & NORTH) != 0) {    appendOne(b,"North");  }  if ((d & SOUTH) != 0) {    appendOne(b,"South");  }  if ((d & EAST) != 0) {    appendOne(b,"East");  }  if ((d & WEST) != 0) {    appendOne(b,"West");  }  if ((d & CW) != 0) {    appendOne(b,"CW");  }  if ((d & CCW) != 0) {    appendOne(b,"CCW");  }  if ((d & LEFT) != 0) {    appendOne(b,"Left");  }  if ((d & RIGHT) != 0) {    appendOne(b,"Right");  }  if ((d & UP) != 0) {    appendOne(b,"Up");  }  if ((d & DOWN) != 0) {    appendOne(b,"Down");  }  final int mask=NORTH | SOUTH | EAST| WEST| CW| CCW| LEFT| RIGHT| UP| DOWN;  if ((d & ~mask) != 0) {    appendOne(b,"Unknown: 0x" + Integer.toHexString(d & ~mask));  }  return b.toString();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.CONFIGURATION_SOURCE__PROPERTY:    return property != null;}return super.eIsSet(featureID);}  }
class C{  @GET @ZeppelinApi public Response listInterpreter(String message){  Map<String,InterpreterSetting> m=interpreterFactory.getAvailableInterpreterSettings();  return new JsonResponse<>(Status.OK,"",m).build();}  }
class C{  public GremlinTransactionManager(GremlinGraphFactory graphFactory){  super();  this.graphFactory=graphFactory;}  }
class C{  @Override public String toString(){  boolean hasCFML=sc != null;  StringBuffer sb=new StringBuffer();  sb.append("Error\n");  sb.append("----------------------------------\n");  if (hasCFML && sc instanceof PageSourceCode) {    sb.append("File: " + ((PageSourceCode)sc).getPageSource().getDisplayPath() + "\n");  }  if (hasCFML) {    int line=sc.getLine();    int counter=0;    sb.append("Line: " + line + "\n");    sb.append("Column: " + sc.getColumn() + "\n");    sb.append("Type: Syntax\n");    sb.append("Code Outprint: \n");    line=(line - 2 < 1) ? 1 : line - 2;    int lineDescLen=(((line + 5) + "").length());    for (int i=line; ; i++) {      if (i > 0) {        String strLine=sc.getLineAsString(i);        if (strLine == null)         break;        String desc=(("" + i).length() < lineDescLen) ? "0" + i : "" + i;        sb.append(desc + ": " + strLine+ "\n");        counter++;      }      if (counter == 5)       break;    }    sb.append("\n");  }  sb.append("Message:\n");  sb.append("" + super.getMessage() + "\n");  return sb.toString();}  }
class C{  public boolean isSetName(){  return this.name != null;}  }
class C{  public static IJavaSearchScope create(IMember[] members,boolean sourceReferencesOnly) throws JavaModelException {  Assert.isTrue(members != null && members.length > 0);  IMember candidate=members[0];  int visibility=getVisibility(candidate);  for (int i=1; i < members.length; i++) {    int mv=getVisibility(members[i]);    if (mv > visibility) {      visibility=mv;      candidate=members[i];    }  }  return create(candidate,true,sourceReferencesOnly);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node removedNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItem("street");  value=removedNode.getNodeValue();  assertEquals("namednodemapRemoveNamedItemReturnNodeValueAssert","No",value);}  }
class C{  public static DoubleMatrix jblas_solvePositive(double[][] A,double[][] B){  return org.jblas.Solve.solvePositive(new DoubleMatrix(A),new DoubleMatrix(B));}  }
class C{  public boolean isIncludeNullsOrg(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsOrg);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getOperatorsDao() : null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public FSTCompletion(FST<Object> automaton,boolean higherWeightsFirst,boolean exactFirst){  this.automaton=automaton;  if (automaton != null) {    this.rootArcs=cacheRootArcs(automaton);  } else {    this.rootArcs=new Arc[0];  }  this.higherWeightsFirst=higherWeightsFirst;  this.exactFirst=exactFirst;}  }
class C{  public static byte[] flipAllBitsInPlace(byte[] bytes){  return flipAllBitsInPlace(bytes,0,bytes.length);}  }
class C{  public static Capabilities forInstances(Instances data) throws Exception {  return forInstances(data,false);}  }
class C{  public boolean isRotationEnabled(){  return mIsRotationEnabled;}  }
class C{  public MbfsPatternRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  @Override public boolean validateParameters(final Player admin,final List<String> args){  if (args.size() != 2) {    admin.sendPrivateText("/script OfflineAdminlevel.class <playername> <newlevel>");    return false;  }  return true;}  }
class C{  public X509AttributeCertificateHolder(AttributeCertificate attrCert){  this.attrCert=attrCert;  this.extensions=attrCert.getAcinfo().getExtensions();}  }
class C{  private Region<?,?> createRegionGlobally(String key){  Region<?,?> r=null;  r=cache.getRegion(key);  if (r != null)   return r;  do {    Result result=cliCmds.createRegion(key,defaultRegionType,null,null,true,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);    r=cache.getRegion(key);    if (result.getStatus() == Status.ERROR && r == null) {      String err="";      while (result.hasNextLine())       err+=result.nextLine();      throw new RegionCreationException(err);    }  } while (r == null);  return r;}  }
class C{  private ItemPanel createItemPanel(Class<? extends IEntity> itemClass,SpriteStore store,String id,String image){  ItemPanel panel=new ItemPanel(id,store.getSprite(image));  slotPanels.put(id,panel);  panel.setAcceptedTypes(itemClass);  return panel;}  }
class C{  public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){  if (exist()) {    getProductionRunRoutingTasks();    if (quantity == null)     getQuantity();    Timestamp endDate=null;    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {      GenericValue routingTask=iter.next();      if (priority.compareTo(routingTask.getLong("priority")) <= 0) {        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);        routingTask.set("estimatedStartDate",startDate);        routingTask.set("estimatedCompletionDate",endDate);        startDate=endDate;      }    }    return endDate;  } else {    return null;  }}  }
class C{  private void loadStoredDelegates(){  HttpClientRequest selfRequest=selfClient.request(HttpMethod.GET,delegatesUri + "?expand=2",null);  selfRequest.setTimeout(120000);  selfRequest.end();}  }
class C{  public void testDeploymentFromFolder() throws Exception {  checkTask("org.apache.ignite.spi.deployment.uri.tasks.GridUriDeploymentTestTask0");  checkTask("GridUriDeploymentTestWithNameTask0");}  }
class C{  public BlockChain(NetworkParameters params,BlockStore blockStore) throws BlockStoreException {  this(params,new ArrayList<BlockChainListener>(),blockStore);}  }
class C{  public static void registerSettingsBundle(ResourceBundle bundle,boolean overwrite){  if (!overwrite) {    SETTINGS_BUNDLE.addResourceBundle(bundle);  } else {    SETTINGS_BUNDLE.addResourceBundleAndOverwrite(bundle);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY:    setBody((Block)null);  return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK:set_lok((LocalArgumentsVariable)null);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_TYPE:setDefinedType((Type)null);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__FPARS:getFpars().clear();return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)null);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__GENERATOR:setGenerator(GENERATOR_EDEFAULT);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_ASYNC:setDeclaredAsync(DECLARED_ASYNC_EDEFAULT);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__TYPE_VARS:getTypeVars().clear();return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF:setDeclaredTypeRef((TypeRef)null);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_METHOD:setDefinedMethod((TStructMethod)null);return;}super.eUnset(featureID);}  }
class C{  @Override public boolean supportsPredictiveItemAnimations(){  return false;}  }
class C{  private void verifyIdAndKeyUniqueness(PlatformUser currentUser,VOSubscription voSubscription) throws NonUniqueBusinessKeyException {  Subscription newSubscription=new Subscription();  newSubscription.setOrganizationKey(currentUser.getOrganization().getKey());  newSubscription.setSubscriptionId(voSubscription.getSubscriptionId());  dataManager.validateBusinessKeyUniqueness(newSubscription);}  }
class C{  public static VPlexVirtualVolumeInfo renameVolumeOnVPlex(VPlexVirtualVolumeInfo vvInfo,String newVolumeName,VPlexApiClient client){  VPlexVirtualVolumeInfo updateVolumeInfo=vvInfo;  try {    String currentVolumeName=vvInfo.getName();    if (!currentVolumeName.equals(newVolumeName)) {      s_logger.info("Renaming VPLEX volume {} to custom name {}",vvInfo.getName(),newVolumeName);      updateVolumeInfo=client.renameResource(vvInfo,newVolumeName);    } else {      s_logger.info("Skip rename as volume is already named {}",newVolumeName);    }  } catch (  Exception e) {    s_logger.warn(String.format("Error attempting to rename VPLEX volume %s to %s",vvInfo.getName(),newVolumeName),e);  }  return updateVolumeInfo;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(size);  for (Iterator i=entrySet().iterator(); i.hasNext(); ) {    Map.Entry e=(Map.Entry)i.next();    s.writeObject(e.getKey());    s.writeObject(e.getValue());  }}  }
class C{  @Override public void panRangeAxes(double percent,PlotRenderingInfo info,Point2D source){  if (!isRangePannable()) {    return;  }  int rangeAxisCount=getRangeAxisCount();  for (int i=0; i < rangeAxisCount; i++) {    ValueAxis axis=getRangeAxis(i);    if (axis == null) {      continue;    }    if (axis.isInverted()) {      percent=-percent;    }    axis.pan(percent);  }}  }
class C{  static public JMenu helpMenu(JMenuBar menuBar,String ref,boolean direct){  JMenu helpMenu=makeHelpMenu(ref,direct);  menuBar.add(helpMenu);  return helpMenu;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  static int numberOfHosts(Map<URI,List<Initiator>> net2InitiatorsMap){  Set<URI> hostSet=new HashSet<URI>();  for (  List<Initiator> initiators : net2InitiatorsMap.values()) {    for (    Initiator init : initiators) {      hostSet.add(init.getHost());    }  }  return hostSet.size();}  }
class C{  public OMRaster(double lt,double ln,int offset_x1,int offset_y1,ImageIcon ii){  this(lt,ln,offset_x1,offset_y1,ii.getImage());}  }
class C{  protected void saveBuffer(String name){  StringBuffer sb=m_History.getNamedBuffer(name);  if (sb != null) {    if (m_SaveOut.save(sb)) {      m_Log.logMessage("Save successful.");    }  }}  }
class C{  private static void recordCompilation(byte compiler,int BCLength,int MCLength,double compTime){  totalMethods[compiler]++;  totalMCLength[compiler]+=MCLength;  totalCompTime[compiler]+=compTime;  if (compiler != JNI_COMPILER) {    totalBCLength[compiler]+=BCLength;    double rate=BCLength / compTime;    if (VM.fullyBooted) {      totalLogOfRates[compiler]+=Math.log(rate);      totalLogValueMethods[compiler]++;    }  }}  }
class C{  @Override public String toString(){  if (isTop()) {    return "[TOP]";  }  if (isBottom()) {    return "[BOTTOM]";  }  StringBuilder buf=new StringBuilder();  buf.append('[');  int numSlots=getNumSlots();  int start=STACK_ONLY ? getNumLocals() : 0;  for (int i=start; i < numSlots; ++i) {    if (!STACK_ONLY && i == getNumLocals()) {      int last=buf.length() - 1;      if (last >= 0) {        if (buf.charAt(last) == ',') {          buf.deleteCharAt(last);        }      }      buf.append('|');    }    String value=valueToString(getValue(i));    if (i == numSlots - 1 && value.endsWith(",")) {      value=value.substring(0,value.length() - 1);    }    buf.append(value);  }  buf.append(']');  return buf.toString();}  }
class C{  public boolean equals(IntVector v){  return x == v.x && y == v.y && z == v.z;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEPointLightElement(prefix,(AbstractDocument)doc);}  }
class C{  public Range(long start,long end,long total){  this.start=start;  this.end=end;  this.length=end - start + 1;  this.total=total;}  }
class C{  public final int match(ContentResolver resolver,Intent intent,boolean resolve,String logTag){  String type=resolve ? intent.resolveType(resolver) : intent.getType();  return match(intent.getAction(),type,intent.getScheme(),intent.getData(),intent.getCategories(),logTag);}  }
class C{  public static final int primaryOrder(int order){  return CollationElementIteratorICU.primaryOrder(order);}  }
class C{  public void add(final String name,final String item,final int price){  Map<String,Integer> shop;  if (contents.containsKey(name)) {    shop=contents.get(name);  } else {    shop=new LinkedHashMap<String,Integer>();    contents.put(name,shop);  }  shop.put(item,Integer.valueOf(price));}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public PublicMapping(String baseStr,String mapFile) throws IOException {  this.baseStr=baseStr;  load(new FileInputStream(baseStr + mapFile));}  }
class C{  public static String constructJobIdRedisKey(String queueName,String shardName){  return String.format("%s_%s_%s",PINLATER_JOB_ID_KEY_PREFIX,shardName,queueName);}  }
class C{  private V doPut(K kkey,V value,boolean onlyIfAbsent){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n != null) {        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        int c=key.compareTo(n.key);        if (c > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value))           return (V)v; else           break;        }      }      Node<K,V> z=new Node<K,V>(kkey,value,n);      if (!b.casNext(n,z))       break;      int level=randomLevel();      if (level > 0)       insertIndex(z,level);      return null;    }  }}  }
class C{  private void updateTransitivePreds(DTNHost host){  MessageRouter otherRouter=host.getRouter();  assert otherRouter instanceof ProphetV2Router : "PRoPHETv2 only works with other routers of same type";  double pForHost=getPredFor(host);  Map<DTNHost,Double> othersPreds=((ProphetV2Router)otherRouter).getDeliveryPreds();  for (  Map.Entry<DTNHost,Double> e : othersPreds.entrySet()) {    if (e.getKey() == getHost()) {      continue;    }    double pOld=getPredFor(e.getKey());    double pNew=pForHost * e.getValue() * beta;    if (pNew > pOld)     preds.put(e.getKey(),pNew);  }}  }
class C{  public void testEquality(){  DeployableType type=DeployableType.toType("war");  assertEquals(DeployableType.WAR,type);  assertSame(DeployableType.WAR,type);}  }
class C{  protected void processCloudletReturn(SimEvent ev){  Cloudlet cloudlet=(Cloudlet)ev.getData();  getCloudletReceivedList().add(cloudlet);  cloudletsSubmitted--;  if (getCloudletList().size() == 0 && cloudletsSubmitted == 0 && NetworkConstants.iteration > 10) {    Log.printConcatLine(CloudSim.clock(),": ",getName(),": All Cloudlets executed. Finishing...");    clearDatacenters();    finishExecution();  } else {    if (getAppCloudletList().size() > 0 && cloudletsSubmitted == 0) {      clearDatacenters();      createVmsInDatacenterBase(0);    }  }}  }
class C{  public boolean verify(byte[] hash,byte[] signature){  return ECKey.verify(hash,signature,getPubKey());}  }
class C{  private Ref scope(String idStr){  if (!limited && idStr.equals("var")) {    String name=identifier(false);    if (name != null) {      cfml.removeSpace();      return new Variable(new lucee.runtime.interpreter.ref.var.Scope(ScopeSupport.SCOPE_VAR),name,limited);    }  }  int scope=limited ? Scope.SCOPE_UNDEFINED : VariableInterpreter.scopeString2Int(pc != null && pc.ignoreScopes(),idStr);  if (scope == Scope.SCOPE_UNDEFINED) {    return new Variable(new lucee.runtime.interpreter.ref.var.Scope(Scope.SCOPE_UNDEFINED),idStr,limited);  }  return new lucee.runtime.interpreter.ref.var.Scope(scope);}  }
class C{  public static void writeMetricHistory(List<? extends ContainerHost> hosts,PowerContainerVmAllocationPolicyMigrationAbstract vmAllocationPolicy,String outputPath){  for (int j=0; j < 10; j++) {    ContainerHost host=hosts.get(j);    if (!vmAllocationPolicy.getTimeHistory().containsKey(host.getId())) {      continue;    }    File file=new File(outputPath + "_" + host.getId()+ ".csv");    try {      file.createNewFile();    } catch (    IOException e1) {      e1.printStackTrace();      System.exit(0);    }    try {      BufferedWriter writer=new BufferedWriter(new FileWriter(file));      List<Double> timeData=vmAllocationPolicy.getTimeHistory().get(host.getId());      List<Double> utilizationData=vmAllocationPolicy.getUtilizationHistory().get(host.getId());      List<Double> metricData=vmAllocationPolicy.getMetricHistory().get(host.getId());      for (int i=0; i < timeData.size(); i++) {        writer.write(String.format("%.2f,%.2f,%.2f\n",timeData.get(i),utilizationData.get(i),metricData.get(i)));      }      writer.close();    } catch (    IOException e) {      e.printStackTrace();      System.exit(0);    }  }}  }
class C{  public boolean isOvershooting(){  return (mStartValue < mEndValue && getCurrentValue() > mEndValue) || (mStartValue > mEndValue && getCurrentValue() < mEndValue);}  }
class C{  protected void cleanupTransactionInfo(TransactionInfo txInfo){  if (txInfo != null) {    DynamicContextHolder.clearDatabaseSchema();    txInfo.restoreThreadLocalStatus();  }}  }
class C{  @SuppressWarnings("unchecked") @Test public void nextTreeComponent(){  bufferBranchIndexer=new BufferBranchIndexer<>(delegateIndexer,childBufferIndexer);  when(childBufferIndexer.sharedInstance()).thenReturn(true);  IBufferTreeComponent<DefaultData> component=bufferBranchIndexer.getNextTreeComponent();  assertThat(component,is(instanceOf(Branch.class)));  assertThat(((Branch<DefaultData>)component).getBufferBranchIndexer(),is((IBufferBranchIndexer<DefaultData>)childBufferIndexer));  when(childBufferIndexer.sharedInstance()).thenReturn(false);  IBufferBranchIndexer<DefaultData> createdChildInstance=mock(IBufferBranchIndexer.class);  when(childBufferIndexer.getNewInstance()).thenReturn(createdChildInstance);  component=bufferBranchIndexer.getNextTreeComponent();  assertThat(component,is(instanceOf(Branch.class)));  assertThat(((Branch<DefaultData>)component).getBufferBranchIndexer(),is(createdChildInstance));  bufferBranchIndexer=new BufferBranchIndexer<>(delegateIndexer,null);  component=bufferBranchIndexer.getNextTreeComponent();  assertThat(component,is(instanceOf(Leaf.class)));}  }
class C{  @Override public void ready(){  if (attacks.isEmpty() && GUIPreferences.getInstance().getNagForNoAction()) {    String title=Messages.getString("TargetingPhaseDisplay.DontFireDialog.title");    String body=Messages.getString("TargetingPhaseDisplay.DontFireDialog.message");    ConfirmDialog response=clientgui.doYesNoBotherDialog(title,body);    if (!response.getShowAgain()) {      GUIPreferences.getInstance().setNagForNoAction(false);    }    if (!response.getAnswer()) {      return;    }  }  disableButtons();  removeTempAttacks();  clientgui.getClient().sendAttackData(cen,attacks);  attacks.removeAllElements();  clientgui.getMenuBar().setEntity(null);  if ((ce() != null) && ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  endMyTurn();}  }
class C{  @Override public synchronized void addDataSourceListener(DataSourceListener dsl){  m_dataListeners.addElement(dsl);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:30.989 -0500",hash_original_method="3FDF2D179E068B8AD4629A716A32BCF6",hash_generated_method="CFBB9677838418A294831DDE7199EB2B") private void sendLoopDetectedResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.LOOP_DETECTED);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    sipStack.addTransactionPendingAck(transaction);    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  private static String oficNumerationFormat(String format,int year,int cont,String code) throws Exception {  String regNumber="";  String parameterValueNumReg=null;  if (!format.equals("")) {    StringTokenizer tokenizer=new StringTokenizer(format,"}");    int numTokens=tokenizer.countTokens();    String token=null;    for (int i=0; i < numTokens; i++) {      token=tokenizer.nextToken();      parameterValueNumReg=getParameterNumRegValue(token,year,cont,code);      if (parameterValueNumReg != null) {        regNumber=regNumber + parameterValueNumReg;      }    }  } else {    regNumber=String.valueOf(year);    for (int i=3; i > code.length(); i--) {      regNumber=regNumber + "0";    }    regNumber=regNumber + code;    String newCont=String.valueOf(cont);    for (int i=8; i > newCont.length(); i--) {      regNumber=regNumber + "0";    }    regNumber=regNumber + cont;  }  return regNumber;}  }
class C{  public static synchronized void afterAll(UnsafeBlock block){  isValidContext("afterAll");  contexts.get().current().addAfterAll(block);}  }
class C{  public BOp clearAnnotations(final String[] names){  final BOpBase tmp=(BOpBase)this.clone();  for (  String name : names) {    tmp._clearProperty(name);  }  return tmp;}  }
class C{  public static ColorStateList generateTextColor(int pressColor,int defaultColor){  ColorStateList stateList=new ColorStateList(new int[][]{{android.R.attr.state_pressed},{}},new int[]{pressColor,defaultColor});  return stateList;}  }
class C{  public final void compileFile(final String strFileName,final String strDestinationFolder) throws JIPSyntaxErrorException {  Compile2.compile(strFileName,strDestinationFolder,this);}  }
class C{  public Neuron(final Network parent){  this.parent=parent;  setUpdateRule(DEFAULT_UPDATE_RULE.deepCopy());}  }
class C{  private synchronized void storeTimestampAndSetStatus(Timestamper.TimestampSucceeded message,TimestampRecord timestampRecord) throws Exception {  try {    persistTimestampRecord(message,timestampRecord);    setTimestampSucceeded();  } catch (  Exception e) {    log.error("Failed to save time-stamp record to database",e);    setTimestampFailedRegardlessOfQueue(new DateTime());    throw e;  }}  }
class C{  public void testAppendRenameNoClose() throws Exception {  if (dual)   return;  if (appendSupported()) {    create(igfs,paths(DIR,SUBDIR),null);    createFile(igfs,FILE,false);    IgfsOutputStream os=null;    try {      os=igfs.append(FILE,false);      igfs.rename(FILE,FILE2);      os.close();    }  finally {      U.closeQuiet(os);    }  }}  }
class C{  @Override public String version(){  return Version.getVersion();}  }
class C{  public boolean transformMethod(MethodNode mn){  boolean changed=transformStrings(mn);  if (changed) {    try {      mn.maxStack++;      Analyzer a=new Analyzer(new StringBooleanInterpreter());      a.analyze(cn.name,mn);      Frame[] frames=a.getFrames();      AbstractInsnNode node=mn.instructions.getFirst();      boolean done=false;      while (!done) {        if (node == mn.instructions.getLast())         done=true;        AbstractInsnNode next=node.getNext();        int index=mn.instructions.indexOf(node);        if (index >= frames.length)         break;        Frame current=frames[index];        if (current == null)         break;        int size=current.getStackSize();        if (node.getOpcode() == Opcodes.IFNE) {          JumpInsnNode branch=(JumpInsnNode)node;          if (current.getStack(size - 1) == StringBooleanInterpreter.STRING_BOOLEAN || isStringMethod(node.getPrevious())) {            logger.info("IFNE -> IFGT");            branch.setOpcode(Opcodes.IFGT);          }        } else         if (node.getOpcode() == Opcodes.IFEQ) {          JumpInsnNode branch=(JumpInsnNode)node;          if (current.getStack(size - 1) == StringBooleanInterpreter.STRING_BOOLEAN || isStringMethod(node.getPrevious())) {            logger.info("IFEQ -> IFLE");            branch.setOpcode(Opcodes.IFLE);          }        } else         if (node.getOpcode() == Opcodes.IF_ICMPEQ) {          JumpInsnNode branch=(JumpInsnNode)node;          if (current.getStack(size - 2) == StringBooleanInterpreter.STRING_BOOLEAN || isStringMethod(node.getPrevious().getPrevious())) {            if (node.getPrevious().getOpcode() == Opcodes.ICONST_0) {              branch.setOpcode(Opcodes.IFLE);              mn.instructions.remove(node.getPrevious());            } else             if (node.getPrevious().getOpcode() == Opcodes.ICONST_1) {              branch.setOpcode(Opcodes.IFGT);              mn.instructions.remove(node.getPrevious());            }          }        } else         if (node.getOpcode() == Opcodes.IF_ICMPNE) {          JumpInsnNode branch=(JumpInsnNode)node;          if (current.getStack(size - 2) == StringBooleanInterpreter.STRING_BOOLEAN || isStringMethod(node.getPrevious().getPrevious())) {            if (node.getPrevious().getOpcode() == Opcodes.ICONST_0) {              branch.setOpcode(Opcodes.IFGT);              mn.instructions.remove(node.getPrevious());            } else             if (node.getPrevious().getOpcode() == Opcodes.ICONST_1) {              branch.setOpcode(Opcodes.IFLE);              mn.instructions.remove(node.getPrevious());            }          }        } else         if (node.getOpcode() == Opcodes.IRETURN) {          if (current.getStack(size - 1) == StringBooleanInterpreter.STRING_BOOLEAN || isStringMethod(node.getPrevious())) {            logger.info("IFEQ -> IFLE");            MethodInsnNode n=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"intToBoolean",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,new Type[]{Type.INT_TYPE}),false);            mn.instructions.insertBefore(node,n);          }        }        node=next;      }    } catch (    Exception e) {      logger.warn("EXCEPTION DURING STRING TRANSFORMATION: " + e);      return changed;    }  }  return changed;}  }
class C{  protected static EventType createEventType(StatementContext statementContext,StatViewAdditionalProps additionalProps,int streamNum){  Map<String,Object> eventTypeMap=new HashMap<String,Object>();  eventTypeMap.put(ViewFieldEnum.CORRELATION__CORRELATION.getName(),Double.class);  StatViewAdditionalProps.addCheckDupProperties(eventTypeMap,additionalProps,ViewFieldEnum.CORRELATION__CORRELATION);  String outputEventTypeName=statementContext.getStatementId() + "_correlview_" + streamNum;  return statementContext.getEventAdapterService().createAnonymousMapType(outputEventTypeName,eventTypeMap,false);}  }
class C{  private ArrowBuf bufferWithoutReservation(final int size,BufferManager bufferManager) throws OutOfMemoryException {  assertOpen();  final AllocationManager manager=new AllocationManager(this,size);  final BufferLedger ledger=manager.associate(this);  final ArrowBuf buffer=ledger.newArrowBuf(0,size,bufferManager);  Preconditions.checkArgument(buffer.capacity() == size,"Allocated capacity %d was not equal to requested capacity %d.",buffer.capacity(),size);  return buffer;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TimePeriodValues)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  TimePeriodValues that=(TimePeriodValues)obj;  if (!ObjectUtilities.equal(this.getDomainDescription(),that.getDomainDescription())) {    return false;  }  if (!ObjectUtilities.equal(this.getRangeDescription(),that.getRangeDescription())) {    return false;  }  int count=getItemCount();  if (count != that.getItemCount()) {    return false;  }  for (int i=0; i < count; i++) {    if (!getDataItem(i).equals(that.getDataItem(i))) {      return false;    }  }  return true;}  }
class C{  boolean nodeSameIndexExists(ArrayList p,int n){  for (int i=0; i < p.size(); i++) {    if (((SemanticNode)p.get(i)).index() == n) {      return true;    }  }  return false;}  }
class C{  public static SelectClause createWildcard(){  List<SelectClauseElement> selectList=new ArrayList<SelectClauseElement>();  selectList.add(new SelectClauseWildcard());  return new SelectClause(StreamSelector.ISTREAM_ONLY,selectList);}  }
class C{  public void addCheckingPaths(TreePath[] paths){  getCheckingModel().addCheckingPaths(paths);}  }
class C{  private void concurrentModification(){  FacesContext ctx=FacesContext.getCurrentInstance();  ctx.getApplication().getNavigationHandler().handleNavigation(ctx,"",CONCURRENT_MODIFICATION_ERROR);  ctx.responseComplete();}  }
class C{  public static int copy(InputStream in,OutputStream out) throws IOException {  Assert.notNull(in,"No InputStream specified");  Assert.notNull(out,"No OutputStream specified");  try {    return StreamUtils.copy(in,out);  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public synchronized boolean isCollected1A0001Today(final String userId){  final Date now=new Date();  final List<JSONObject> records=pointtransferQueryService.getLatestPointtransfers(userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_1A0001_COLLECT,1);  if (records.isEmpty()) {    return false;  }  final JSONObject maybeToday=records.get(0);  final long time=maybeToday.optLong(Pointtransfer.TIME);  return DateUtils.isSameDay(now,new Date(time));}  }
class C{  public static double cosine(double[] dist,double[] reference){  double v_prod=0;  double w_prod=0;  double vw_prod=0;  Preconditions.checkArgument(dist.length == reference.length,"input arrays must be of the same length");  for (int i=0; i < dist.length; i++) {    vw_prod+=dist[i] * reference[i];    v_prod+=dist[i] * dist[i];    w_prod+=reference[i] * reference[i];  }  return vw_prod / (Math.sqrt(v_prod) * Math.sqrt(w_prod));}  }
class C{  public MLOutput execute(String dmlScriptFilePath,Map<String,String> namedArgs,boolean parsePyDML,String configFilePath) throws IOException, DMLException, ParseException {  String[] args=new String[namedArgs.size()];  int i=0;  for (  Entry<String,String> entry : namedArgs.entrySet()) {    if (entry.getValue().trim().isEmpty())     args[i]=entry.getKey() + "=\"" + entry.getValue()+ "\""; else     args[i]=entry.getKey() + "=" + entry.getValue();    i++;  }  return compileAndExecuteScript(dmlScriptFilePath,args,true,parsePyDML,configFilePath);}  }
class C{  protected final void addWorker(WorkerThread worker){synchronized (workers) {    workers.add(worker);  }}  }
class C{  public boolean acceptOffer(final Offer offer,final Player acceptingPlayer){  if (getSlot(OFFERS_SLOT_NAME).has(offer.getID()) && offer.hasItem()) {    int price=offer.getPrice().intValue();    if ((price == 0) || acceptingPlayer.drop("money",price)) {      Item item=offer.getItem();      offer.getSlot(Offer.OFFER_ITEM_SLOT_NAME).remove(item.getID());      acceptingPlayer.equipOrPutOnGround(item);      boolean reward=offer.shouldReward(acceptingPlayer) && price > 0;      final Earning earning=new Earning(offer.getPrice(),offer.getOfferer(),reward);      this.getSlot(EARNINGS_SLOT_NAME).add(earning);      this.getSlot(OFFERS_SLOT_NAME).remove(offer.getID());      if (reward) {        applyTradingBonus(acceptingPlayer);      }      String slotName=null;      String target="ground";      if (item.getContainerSlot() != null) {        slotName=item.getContainerSlot().getName();        target="slot";      }      new ItemLogger().addLogItemEventCommand(new LogSimpleItemEventCommand(item,acceptingPlayer,"market-to-" + target,item.get("name"),Integer.toString(getQuantity(item)),"accept offer",slotName));      this.getZone().storeToDatabase();      return true;    }  }  return false;}  }
class C{  public void test_24() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,false,true);  insertSparql(cxn);  BigdataValueFactory vf=cxn.getValueFactory();  BigdataValue[] values=new BigdataValue[]{vf.createURI("http://s"),vf.createLiteral("1",XMLSchema.INTEGER),vf.createLiteral(2),vf.createLiteral("3.0",XMLSchema.DECIMAL),vf.createLiteral(4.0),vf.createLiteral(true),vf.createLiteral(false),vf.createLiteral("plain string"),vf.createLiteral("datatyped string",XMLSchema.STRING),vf.createLiteral("english string","en")};  cxn.getTripleStore().getLexiconRelation().addTerms(values,values.length,true);  assertFalse(values[0].getIV().isInline());  assertTrue(values[1].getIV().isInline());  assertTrue(values[2].getIV().isInline());  assertTrue(values[3].getIV().isInline());  assertTrue(values[4].getIV().isInline());  assertTrue(values[5].getIV().isInline());  assertTrue(values[6].getIV().isInline());  assertFalse(values[7].getIV().isInline());  assertFalse(values[8].getIV().isInline());  assertFalse(values[9].getIV().isInline());  endTest(cxn);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof DVector2D))   return false;  DVector2D v=(DVector2D)o;  if (vector.length != v.vector.length || !sizes.equals(v.sizes))   return false;  for (int i=0; i < vector.length; ++i)   if (!Arrays.equals(vector[i],v.vector[i]))   return false;  return true;}  }
class C{  public boolean isNaked(){  if (isCompatibleWithClothes()) {    return (dress == null) || dress.equals(0);  } else {    return false;  }}  }
class C{  private Boolean isCompatibleDevice(String storageSystemURI){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,URI.create(storageSystemURI));  if (CompatibilityStatus.COMPATIBLE.name().equalsIgnoreCase(storageSystem.getCompatibilityStatus()) || CompatibilityStatus.UNKNOWN.name().equalsIgnoreCase(storageSystem.getCompatibilityStatus())) {    return true;  } else {    _logger.info("Subscription will not initiated for the incompatible storage device :{}",storageSystemURI);    return false;  }}  }
class C{  public KnowledgeDisplayNode(Node modelNode){  setModelNode(modelNode);  setBackground(DisplayNodeUtils.getNodeFillColor());  setFont(DisplayNodeUtils.getFont());}  }
class C{  protected boolean compareStateVectors(double[] observation,int sampleIndex,int fromOffset,int length){  int i;  for (i=0; i < length; i++) {    if (Math.abs(observation[fromOffset + i] - destNextPastSourceVectors[sampleIndex][fromOffset + i]) > epsilons[fromOffset + i]) {      return false;    }  }  return true;}  }
class C{  public Builder backgroundDrawable(Drawable sliderBackgroundDrawable){  return this;}  }
class C{  protected NamedList invokeCdcrAction(CloudJettyRunner jetty,CdcrParams.CdcrAction action) throws Exception {  ModifiableSolrParams params=new ModifiableSolrParams();  params.set(CommonParams.ACTION,action.toString());  SolrRequest request=new QueryRequest(params);  request.setPath(CDCR_PATH);  return jetty.client.request(request);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void processNode(CAS cas,Node node,StringBuilder documentText){  if (node.hasChildNodes()) {    if (docIdTag != null) {      ensureIdValidity(node);    }    NodeList docFields=node.getChildNodes();    for (int i=0; i < docFields.getLength(); i++) {      Node field=docFields.item(i);      int begin=documentText.length();      String nodeTag=field.getLocalName();      if (nodeTag != null && isIncluded(nodeTag)) {        String nodeText=field.getTextContent();        documentText=documentText.append(nodeText);        int end=documentText.length();        documentText=documentText.append("\n");        if (useSubstitution && substitution.containsKey(nodeTag)) {          nodeTag=substitution.get(nodeTag);        }        createFieldAnnotation(cas,nodeTag,begin,end);      }    }  }}  }
class C{  boolean areAllCreaturesDead(){  for (  final Creature creature : spawnedCreatures) {    if (creature.getHP() > 0) {      return false;    }  }  return true;}  }
class C{  public TSTLookup(Directory tempDir,String tempFileNamePrefix){  this.tempDir=tempDir;  this.tempFileNamePrefix=tempFileNamePrefix;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.POSITION___ASSOCIATION_POSITION_1:    return associationPosition_1 != null && !associationPosition_1.isEmpty();case UmplePackage.POSITION___ELEMENT_POSITION_1:  return elementPosition_1 != null && !elementPosition_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void configure(List<BaleenLoggerBuilder> builders){  SLF4JBridgeHandler.removeHandlersForRootLogger();  SLF4JBridgeHandler.install();  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  Logger rootLogger=context.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);  context.addListener(new LevelChangePropagator());  rootLogger.detachAndStopAllAppenders();  for (  BaleenLoggerBuilder builder : builders) {    PatternLayoutEncoder ple=new PatternLayoutEncoder();    ple.setCharset(StandardCharsets.UTF_8);    ple.setContext(context);    ple.setPattern(builder.getPattern());    ple.start();    Appender<ILoggingEvent> appender=builder.build(context,ple);    if (!appender.isStarted()) {      appender.start();    }    rootLogger.addAppender(appender);  }  LOGGER.debug("Adding instrumented metrics for logging");  InstrumentedAppender instrumentedAppender=new InstrumentedAppender(MetricsFactory.getInstance().getRegistry());  instrumentedAppender.setContext(context);  instrumentedAppender.start();  rootLogger.addAppender(instrumentedAppender);}  }
class C{  public void fillAttributeSet(Set attrSet){  attrSet.add(localName);}  }
class C{  public GenerateCsrAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("GenerateCsrAction.statusbar"));  putValue(NAME,res.getString("GenerateCsrAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("GenerateCsrAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("GenerateCsrAction.image")))));}  }
class C{  public String format(double number){  return "" + number;}  }
class C{  public void addChild(AccessibilityNodeInfoCompat child){  final AccessibilityNodeInfo info=(AccessibilityNodeInfo)mRealObject.getInfo();  final ShadowAccessibilityNodeInfo shadowInfo=((ShadowAccessibilityNodeInfo)ShadowExtractor.extract(info));  shadowInfo.addChild((AccessibilityNodeInfo)child.getInfo());}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  private void loadAttachments(){  log.config("");  String sText=m_attachment.getTextMsg();  if (sText == null)   text.setText(""); else   text.setText(sText);  int size=m_attachment.getEntryCount();  for (int i=0; i < size; i++)   cbContent.appendItem(m_attachment.getEntryName(i),m_attachment.getEntryName(i));  if (size > 0) {    cbContent.setSelectedIndex(0);  }}  }
class C{  public void shutdown(){  this.running=false;}  }
class C{  public boolean isFocusable(){  return getBooleanProperty(BOOLEAN_PROPERTY_FOCUSABLE);}  }
class C{  public static NetworkInfo fromFriendlyName(final String friendlyName){switch (friendlyName) {case "mainnet":    return NetworkInfos.getMainNetworkInfo();case "testnet":  return NetworkInfos.getTestNetworkInfo();case "mijinnet":return NetworkInfos.getMijinNetworkInfo();}throw new IllegalArgumentException(String.format("unknown network name %s",friendlyName));}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public static void assertEqualArrays(Object[] arr1,Object[] arr2){  assertTrue(Arrays.equals(arr1,arr2));}  }
class C{  private static TestCase expandTestCase(TestCase test){  if (!Properties.LOCAL_SEARCH_EXPAND_TESTS)   return test;  TestCaseExpander expander=new TestCaseExpander();  return expander.expandTestCase(test);}  }
class C{  public void rightTrim(int numberOfSample){  trim(0,numberOfSample);}  }
class C{  protected NodeRepresentation deepClone(NodeRepresentation parNode,Vector<NodeRepresentation> parVector){  NodeRepresentation result=new NodeRepresentation();  result.semanticNode=this.semanticNode;  result.nodeText=new String[this.nodeText.length];  for (int i=0; i < result.nodeText.length; i++) {    result.nodeText[i]=this.nodeText[i];  }  result.mapping=null;  if (this.mapping != null) {    result.mapping=this.mapping.clone();    for (int i=0; i < result.mapping.length; i++) {      result.mapping[i]=new Vector<MappingPair>();      for (int j=0; j < this.mapping[i].size(); j++) {        result.mapping[i].add(this.mapping[i].elementAt(j).clone());      }    }  }  result.children=null;  if (this.children != null) {    result.children=new Vector<Vector<NodeRepresentation>>();    for (int i=0; i < this.children.size(); i++) {      Vector<NodeRepresentation> oldParVec=this.children.elementAt(i);      Vector<NodeRepresentation> newParVec=new Vector<NodeRepresentation>();      for (int j=0; j < oldParVec.size(); j++) {        newParVec.addElement(oldParVec.elementAt(j).deepClone(result,newParVec));      }      result.children.addElement(newParVec);    }  }  result.instantiationSubstitutions=this.instantiationSubstitutions.clone();  result.nodeType=this.nodeType;  result.nodeSubtype=this.nodeSubtype;  result.newId=this.newId;  result.initialPosition=this.initialPosition;  result.contextStepName=this.contextStepName;  result.fromGoal=this.fromGoal;  result.fromExists=this.fromExists;  result.parentNode=parNode;  result.parentVector=parVector;  result.isCreated=this.isCreated;  result.onSameLineAsNext=this.onSameLineAsNext;  result.isPrimed=this.isPrimed;  result.isSubexpressionName=this.isSubexpressionName;  result.fromDefs=this.fromDefs.clone();  result.decomposition=null;  if (this.decomposition != null) {    result.decomposition=this.decomposition.clone();  }  if (result.children != null) {    for (int i=0; i < result.children.size(); i++) {      Vector<NodeRepresentation> pvec=result.children.elementAt(i);      for (int j=0; j < pvec.size(); j++) {        NodeRepresentation nr=pvec.elementAt(j);        if (nr.parentNode != result || nr.parentVector != pvec) {          MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 4310 of NewDecomposeProofHandler.");        }      }    }  }  return result;}  }
class C{  public boolean hasMoreElements(){  return current_index < table.length;}  }
class C{  protected void informObservers_after(Statement s,Throwable exceptionThrown){  ExecutionTracer.disable();  try {    for (    ExecutionObserver observer : observers) {      observer.afterStatement(s,scope,exceptionThrown);    }  }  finally {    ExecutionTracer.enable();  }}  }
class C{  private MessageProducer createProducer(Session session,Destination queue) throws JMSException {  MessageProducer producer=session.createProducer(queue);  producer.setDeliveryMode(getDeliveryMode());  return producer;}  }
class C{  private static boolean allOrNoneNull(Object... args){  int nulls=0;  int objs=0;  for (  Object o : args) {    objs++;    if (null == o)     nulls++;  }  return (0 == nulls || nulls == objs);}  }
class C{  public ConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public void testFileFile() throws Exception {  Properties properties=loadProperties("test-file-file");  assertEquals("@cargo.servlet.port@",properties.getProperty("cargo.servlet.port"));}  }
class C{  public static void consoleWrite(String str,boolean isErr){  PlatformCallbackUtils.consoleWrite(str,isErr);}  }
class C{  public static com.linkedin.camus.example.records.DummyLog.Builder newBuilder(){  return new com.linkedin.camus.example.records.DummyLog.Builder();}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public final void pushSubContextList(SubContextList iter){  m_axesIteratorStack.push(iter);}  }
class C{  public ContainerDatacenterCharacteristics(String architecture,String os,String vmm,List<? extends ContainerHost> hostList,double timeZone,double costPerSec,double costPerMem,double costPerStorage,double costPerBw){  setId(-1);  setArchitecture(architecture);  setOs(os);  setHostList(hostList);  setAllocationPolicy(allocationPolicy);  setCostPerSecond(costPerSec);  setTimeZone(0.0);  setVmm(vmm);  setCostPerMem(costPerMem);  setCostPerStorage(costPerStorage);  setCostPerBw(costPerBw);}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  public boolean isStaticInitializer(){  return getName().equals(nameClinit);}  }
class C{  public @NonNull T menuItem(){  return menuItem;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.RELATIONAL_EXPRESSION;}  }
class C{  public void selectionChanged(IAction action,ISelection selection){}  }
class C{  public void addSequence(final double[] datum,final double[] weights){  QL.require(datum.length == weights.length,INCOMPATIBLE_ARRAY_SIZES);  for (int i=0; i < datum.length; i++) {    add(datum[i],weights[i]);  }}  }
class C{  private void initializeNeighborhoods(){  List<Individual> sortedPopulation=new ArrayList<Individual>(population);  for (  Individual individual : population) {    Collections.sort(sortedPopulation,new WeightSorter(individual));    for (int i=0; i < neighborhoodSize; i++) {      individual.addNeighbor(sortedPopulation.get(i));    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.694 -0500",hash_original_method="CC2DAF060546DD565E4193F5085BC2F2",hash_generated_method="B0F75899287A5B3F00C2F73E0E2BF7E4") private Website(){}  }
class C{  private void updateColorView(String s){  if (s.matches("-?[0-9a-fA-F]+")) {    int color=(int)Long.parseLong(s,16);    red=(color >> 16) & 0xFF;    green=(color >> 8) & 0xFF;    blue=(color >> 0) & 0xFF;    colorView.setBackgroundColor(Color.rgb(red,green,blue));    redSeekBar.setProgress(red);    greenSeekBar.setProgress(green);    blueSeekBar.setProgress(blue);  } else {    codHex.setError(c.getResources().getText(R.string.materialcolorpicker__errHex));  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.FUNCTION_DEFINITION___IS_ASYNC:    return isAsync();}return super.eInvoke(operationID,arguments);}  }
class C{  public void addPoint(DataPoint dp,int targetClass){  addPoint(dp.getWeight(),targetClass);}  }
class C{  @Override public boolean existConstraintSet(String constraintSetName,Project aProject){  try {    entityManager.createQuery("FROM ConstraintSet WHERE project = :project" + " AND name = :name ",ConstraintSet.class).setParameter("project",aProject).setParameter("name",constraintSetName).getSingleResult();    return true;  } catch (  NoResultException ex) {    return false;  }}  }
class C{  public static boolean isValidCompilationUnitName(String name){  IStatus status=validateCompilationUnitName(name);switch (status.getSeverity()) {case Status.WARNING:case Status.OK:    return true;default :  return false;}}  }
class C{  @Override public boolean evaluate(DF_LatticeCell[] operands){  ObjectCell lhs=(ObjectCell)operands[0];  if (lhs.isBOTTOM()) {    return false;  }  ObjectCell rhs=(ObjectCell)operands[1];  int[] oldNumbers=null;  boolean lhsWasTOP=lhs.isTOP();  if (!lhsWasTOP)   oldNumbers=lhs.copyValueNumbers();  lhs.clear();  if (rhs.isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  int[] numbers=rhs.copyValueNumbers();  if (numbers != null) {    for (    int number : numbers) {      lhs.add(number);    }  }  lhs.add(valueNumber);  if (lhsWasTOP)   return true;  int[] newNumbers=lhs.copyValueNumbers();  return ObjectCell.setsDiffer(oldNumbers,newNumbers);}  }
class C{  public C3_DTLZ4(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public void clearAll(){  TOMMessage[] requests=new TOMMessage[watched.size()];  rwLock.writeLock().lock();  watched.toArray(requests);  for (  TOMMessage request : requests) {    if (request != null && watched.remove(request) && watched.isEmpty() && rtTask != null) {      rtTask.cancel();      rtTask=null;    }  }  rwLock.writeLock().unlock();}  }
class C{  public <AnnotationType extends Annotation>void register(TypeBinder<AnnotationType> binder){  typeBinders.add(binder);  for (  BinderCache cache : classBinderCacheMap.values()) {    cache.register(binder);  }}  }
class C{  public Interval withPeriodAfterStart(ReadablePeriod period){  if (period == null) {    return withDurationAfterStart(null);  }  Chronology chrono=getChronology();  long startMillis=getStartMillis();  long endMillis=chrono.add(period,startMillis,1);  return new Interval(startMillis,endMillis,chrono);}  }
class C{  public SafeCalendar updatedAt(){  return updatedAt;}  }
class C{  public NormalizedIndicator(Problem problem,NondominatedPopulation referenceSet){  super();  this.problem=problem;  normalizer=new Normalizer(problem,referenceSet);  normalizedReferenceSet=normalizer.normalize(referenceSet);}  }
class C{  public void execute(){  acquireReference();  try {    getSession().execute(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public static BufferedImage loadCompatibleImage(InputStream in) throws IOException {  BufferedImage image=ImageIO.read(in);  if (image == null)   return null;  return toCompatibleImage(image);}  }
class C{  public Bitmap loadBitmap(@NonNull final Asset asset){  return AssetUtil.loadBitmapFromAsset(asset,mHelper.getGoogleApiClient());}  }
class C{  private void createCollectionReader(Object collectionReaderConfig) throws BaleenException {  String className=CpeBuilderUtils.getClassNameFromConfig(collectionReaderConfig);  Map<String,Object> params=CpeBuilderUtils.getParamsFromConfig(collectionReaderConfig);  if (className == null || className.isEmpty()) {    throw new BaleenException("No class specified for Collection Reader, or unable to parse");  }  Optional<CollectionReaderDescription> desc=createCollectionReader(className,params,READER_DEFAULT_PACKAGE);  if (desc.isPresent()) {    setCollectorReader(desc.get());  } else {    throw new BaleenException(String.format("Could not find or instantiate analysis engine %s",className));  }}  }
class C{  public void unsetCollisionExternalListener(){  if (enabled())   getSpi().setExternalCollisionListener(null);}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public static Minutes minutes(int minutes){switch (minutes) {case 0:    return ZERO;case 1:  return ONE;case 2:return TWO;case 3:return THREE;case Integer.MAX_VALUE:return MAX_VALUE;case Integer.MIN_VALUE:return MIN_VALUE;default :return new Minutes(minutes);}}  }
class C{  public char charAt(int pos){  return this.originalString.charAt(pos + this.offset);}  }
class C{  public boolean isAvailable(){  return !mCapabilities.isEmpty();}  }
class C{  @Override public synchronized void clear() throws IOException {  this.countCache.clear();  this.removeDelayedURLs.clear();  this.ram.clear();  this.array.clear();  if (Switchboard.getSwitchboard() != null && Switchboard.getSwitchboard().peers != null && Switchboard.getSwitchboard().peers.mySeed() != null)   Switchboard.getSwitchboard().peers.mySeed().resetCounters();}  }
class C{  public void fireDataPointAdded(){  for (  ProjectorListener listener : listeners) {    listener.datapointAdded();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case BasePackage.NAMED_ELEMENT__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public static GetSubscriptionKeysForSessionIdResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetSubscriptionKeysForSessionIdResponseE object=new GetSubscriptionKeysForSessionIdResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","getSubscriptionKeysForSessionIdResponse").equals(reader.getName())) {          object.setGetSubscriptionKeysForSessionIdResponse(GetSubscriptionKeysForSessionIdResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void determineColors(){switch (getWindowDecorationStyle()) {case JRootPane.FRAME:    activeBackground=UIManager.getColor("activeCaption");  activeForeground=UIManager.getColor("activeCaptionText");activeShadow=UIManager.getColor("activeCaptionBorder");break;case JRootPane.ERROR_DIALOG:activeBackground=UIManager.getColor("OptionPane.errorDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.errorDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.errorDialog.titlePane.shadow");break;case JRootPane.QUESTION_DIALOG:case JRootPane.COLOR_CHOOSER_DIALOG:case JRootPane.FILE_CHOOSER_DIALOG:activeBackground=UIManager.getColor("OptionPane.questionDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.questionDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.questionDialog.titlePane.shadow");break;case JRootPane.WARNING_DIALOG:activeBackground=UIManager.getColor("OptionPane.warningDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.warningDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.warningDialog.titlePane.shadow");break;case JRootPane.PLAIN_DIALOG:case JRootPane.INFORMATION_DIALOG:default :activeBackground=UIManager.getColor("activeCaption");activeForeground=UIManager.getColor("activeCaptionText");activeShadow=UIManager.getColor("activeCaptionBorder");break;}activeBumps.setBumpColors(activeBumpsHighlight,activeBumpsShadow,activeBackground);}  }
class C{  public boolean allocatePesForContainer(Container container,List<Double> mipsShare){  return getContainerScheduler().allocatePesForContainer(container,mipsShare);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.680 -0400",hash_original_method="63DEB46C163A106B104143300A10799E",hash_generated_method="367148E440281F644754D7BE5E4FB411") public int compare(File file1,File file2){  return caseSensitivity.checkCompareTo(file1.getName(),file2.getName());}  }
class C{  @Override protected boolean isBalanced(){  return totalLength >= minLengthByDepth[treeDepth];}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  db.execSQL("DROP TABLE IF EXISTS " + WeatherContract.WeatherConditionsEntry.WEATHER_CONDITIONS_TABLE_NAME);  db.execSQL("DROP TABLE IF EXISTS " + WeatherContract.WeatherValuesEntry.WEATHER_VALUES_TABLE_NAME);  onCreate(db);}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.CONDITIONAL_ROUTE;}  }
class C{  public char[] toCharArray(){synchronized (lock) {    char[] result=new char[count];    System.arraycopy(buf,0,result,0,count);    return result;  }}  }
class C{  public String toString(){  String crlfString="\r\n";  String content="";  Iterator<?> temIter;  content=content.concat("MIME File Name: ");  if (this.name != null) {    content=content.concat(name);  }  content=content.concat(crlfString);  content=content.concat("Description: ");  if (this.description != null) {    content=content.concat(description);  }  content=content.concat(crlfString);  content=content.concat("MIME Type: ");  if (this.mimeType != null) {    content=content.concat(mimeType);  }  content=content.concat(crlfString);  content=content.concat("Icon File: ");  if (this.iconFileName != null) {    content=content.concat(iconFileName);  }  content=content.concat(crlfString);  content=content.concat("File Extension: ");  if (fileExtensionList != null) {    temIter=fileExtensionList.iterator();    if (temIter != null) {      while (temIter.hasNext()) {        content=content.concat((String)temIter.next());        if (temIter.hasNext()) {          content=content.concat(" ");        }      }    }  }  content=content.concat(crlfString);  content=content.concat("Action List: ");  if (actionList != null) {    temIter=actionList.iterator();    if (temIter != null) {      content=content.concat(crlfString);      while (temIter.hasNext()) {        Action temAction=(Action)temIter.next();        content=content.concat(temAction.toString());      }    }  }  content=content.concat(crlfString);  return content;}  }
class C{  public GraphZoomScrollPane wrapWithScrollPane(){  return new GraphZoomScrollPane(this);}  }
class C{  protected boolean shouldAddParameter(Parameter param){  for (  Annotation annotation : param.getAnnotations()) {    if ((annotation.getClass().equals(RequestParam.class)) || (annotation.getClass().equals(RequestBody.class)) || (annotation.getClass().equals(PathVariable.class))) {      return true;    }  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @VisibleForTesting protected State buildPatch(TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  private void finalMergeMaps(int jsrBaseMapIndex,UnusualMaps deltaMap){  int i;  for (i=0; i < bytesPerMap(); i++) {    jsrInfo.unusualReferenceMaps[jsrInfo.mergedReferenceMap + i]=0;    jsrInfo.unusualReferenceMaps[jsrInfo.mergedReturnAddressMap + i]=0;  }  int refMapIndex=deltaMap.getReferenceMapIndex();  int nonRefMapIndex=deltaMap.getNonReferenceMapIndex();  int returnAddressMapIndex=deltaMap.getReturnAddressMapIndex();  for (i=0; i < bytesPerMap(); i++) {    byte deltaRef=jsrInfo.unusualReferenceMaps[refMapIndex + i];    byte deltaNonRef=jsrInfo.unusualReferenceMaps[nonRefMapIndex + i];    byte deltaRtnAddr=jsrInfo.unusualReferenceMaps[returnAddressMapIndex + i];    byte deltaAny=(byte)(deltaRef | deltaNonRef | deltaRtnAddr);    jsrInfo.unusualReferenceMaps[jsrInfo.mergedReturnAddressMap + i]=deltaRtnAddr;    byte thisBase=referenceMaps[jsrBaseMapIndex + i];    byte nextBase=(i + 1 < bytesPerMap()) ? referenceMaps[jsrBaseMapIndex + i + 1] : 0;    byte baseRef=(byte)((thisBase << 1) | ((0xff & nextBase) >>> 7));    byte mergedRef=(byte)(deltaRef | (baseRef & ~deltaAny));    jsrInfo.unusualReferenceMaps[jsrInfo.mergedReferenceMap + i]=mergedRef;  }  if (VM.TraceStkMaps) {    VM.sysWrite("finalmergemaps-jsr total set2ref delta map  = ");    for (i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[refMapIndex + i]);    }    VM.sysWrite("\n");    VM.sysWrite("              -jsr total set2nonref delta map  = ");    for (i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[nonRefMapIndex + i]);    }    VM.sysWrite("\n");    VM.sysWrite("              -jsr base map  = ");    for (i=0; i < bytesPerMap(); i++) {      VM.sysWrite(referenceMaps[jsrBaseMapIndex + i]);    }    VM.sysWrite("\n");    VM.sysWrite("              -combined merged ref map  = ");    for (i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[jsrInfo.mergedReferenceMap + i]);    }    VM.sysWrite("\n");    VM.sysWrite("              -combined merged return address map  = ");    for (i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[jsrInfo.mergedReturnAddressMap + i]);    }    VM.sysWrite("\n");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.010 -0400",hash_original_method="3C27D9617C55070B16FEF12103084D3B",hash_generated_method="C4D486223071A049DEBDC7E656997D4A") public final void trace(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,null);  }}  }
class C{  public Key(File file,KeyType type) throws IOException {  super(file,type);}  }
class C{  public CircledPortrayal2D(SimplePortrayal2D child){  this(child,Color.blue,false);}  }
class C{  protected int readBlock(){  blockSize=read();  int n=0;  if (blockSize > 0) {    try {      int count=0;      while (n < blockSize) {        count=in.read(block,n,blockSize - n);        if (count == -1)         break;        n+=count;      }    } catch (    IOException e) {    }    if (n < blockSize) {      status=STATUS_FORMAT_ERROR;    }  }  return n;}  }
