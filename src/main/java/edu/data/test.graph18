class C{  public String features2context(FeatureDefinition def,FeatureVector featureVector,Vector<String> featureList){  int feaAsInt;  String mary_phone, mary_prev_phone, mary_prev_prev_phone, mary_next_phone, mary_next_next_phone;  if (featureList == null) {    featureList=new Vector<String>(Arrays.asList(def.getFeatureNames().split("\\s+")));  }  feaAsInt=featureVector.getFeatureAsInt(iPhoneme);  mary_phone=replaceTrickyPhones(def.getFeatureValueAsString(iPhoneme,feaAsInt));  feaAsInt=featureVector.getFeatureAsInt(iPrevPhoneme);  if (feaAsInt > 0)   mary_prev_phone=replaceTrickyPhones(def.getFeatureValueAsString(iPrevPhoneme,feaAsInt)); else   mary_prev_phone=mary_phone;  feaAsInt=featureVector.getFeatureAsInt(iPrevPrevPhoneme);  if (feaAsInt > 0)   mary_prev_prev_phone=replaceTrickyPhones(def.getFeatureValueAsString(iPrevPrevPhoneme,feaAsInt)); else   mary_prev_prev_phone=mary_prev_phone;  feaAsInt=featureVector.getFeatureAsInt(iNextPhoneme);  if (feaAsInt > 0)   mary_next_phone=replaceTrickyPhones(def.getFeatureValueAsString(iNextPhoneme,feaAsInt)); else   mary_next_phone=mary_phone;  feaAsInt=featureVector.getFeatureAsInt(iNextNextPhoneme);  if (feaAsInt > 0)   mary_next_next_phone=replaceTrickyPhones(def.getFeatureValueAsString(iNextNextPhoneme,feaAsInt)); else   mary_next_next_phone=mary_next_phone;  StringBuilder contextName=new StringBuilder();  contextName.append("prev_prev_phone=" + mary_prev_prev_phone);  contextName.append("|prev_phone=" + mary_prev_phone);  contextName.append("|phone=" + mary_phone);  contextName.append("|next_phone=" + mary_next_phone);  contextName.append("|next_next_phone=" + mary_next_next_phone);  contextName.append("||");  for (  String f : featureList) {    if (!def.hasFeature(f)) {      throw new IllegalArgumentException("Feature '" + f + "' is not known in the feature definition. Valid features are: "+ def.getFeatureNames());    }    contextName.append(f);    contextName.append("=");    String value=def.getFeatureValueAsString(f,featureVector);    if (f.contains("sentence_punc") || f.contains("punctuation"))     value=replacePunc(value); else     if (f.contains("tobi"))     value=replaceToBI(value);    contextName.append(value);    contextName.append("|");  }  return contextName.toString();}  }
class C{  public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  protected UsersReportQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public void rootModified(ISVNRepositoryLocation root){  Iterator it=listeners.iterator();  while (it.hasNext()) {    IRepositoryListener listener=(IRepositoryListener)it.next();    listener.repositoryModified(root);  }}  }
class C{  public TypeQueryExtensionImpl(){}  }
class C{  void old(){  mYoung=false;}  }
class C{  public void decoding(){  int errNUm=0;  int oneData=0, one=0;  int twoData=0, two=0;  boolean rError=false;  int errCount=0;  for (int i=0; i < allDisks; i++) {    if (inthis.get(i)) {      errCount++;      if (1 == errCount) {        oneData=i + 2;        one=i;        if (one < disks) {          errNUm++;        }      } else       if (2 == errNUm) {        twoData=i + 2;        two=i;        if (two < disks) {          errNUm++;        }      }    }  }  if (disks == two) {    rError=true;  }  if (0 == errNUm) {    System.out.println("No Error data need be recovery!");    return;  }  if (errCount > 2) {    System.out.println("Error NUM is too larger! It should be [1,2]");    return;  }  if (errNUm == 2 && (one < 0 || one >= disks || two < 0 || two >= disks)) {    System.out.println("Error NUM is 2, but detailed error col numbers are wrong! Thay are should be [0,disks)");    return;  }  data.get(0).addAll(odata.get(0));  data.get(1).addAll(odata.get(1));  for (int i=0; i < disks; i++) {    data.get(i + 2).addAll(idata.get(i));  }  for (int i=0; i < stripe_unit_size; i++) {    data.get(oneData).set(i,(char)0);  }  if (errNUm == 1) {    if (rError) {      for (int i=0; i < stripe_unit_size; i++) {        data.get(0).set(i,(char)0);      }      rdp_decoding_d(data,disks,stripe_unit_size,w,oneData);      Collections.copy(idata.get(one),data.get(oneData));    } else {      rdp_decoding_r(data,disks,stripe_unit_size,w,oneData);      Collections.copy(idata.get(one),data.get(oneData));    }  } else {    for (int i=0; i < stripe_unit_size; i++) {      data.get(oneData).set(i,(char)0);      data.get(twoData).set(i,(char)0);    }    rdp_decoding_rd(data,disks,stripe_unit_size,w,oneData,twoData);    Collections.copy(idata.get(one),data.get(oneData));    Collections.copy(idata.get(two),data.get(twoData));  }}  }
class C{  public void configureForForeignSession(ForeignSession session,boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceLabel.setText(session.name);  setTimeLabelVisibility(View.VISIBLE);  mTimeLabel.setText(getTimeString(session));switch (session.deviceType) {case ForeignSession.DEVICE_TYPE_PHONE:    mDeviceIcon.setImageResource(R.drawable.recent_phone);  break;case ForeignSession.DEVICE_TYPE_TABLET:mDeviceIcon.setImageResource(R.drawable.recent_tablet);break;default :mDeviceIcon.setImageResource(R.drawable.recent_laptop);break;}configureExpandedCollapsed(isExpanded);}  }
class C{  public boolean isLibraryClass(){  return Scene.v().getLibraryClasses().contains(this);}  }
class C{  public SlowedProgressBar(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public void zoomTo(float zoom){  this.zoom=zoom;}  }
class C{  public static long decrementExact(final long n) throws MathRuntimeException {  if (n == Long.MIN_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_SUBTRACTION,n,1);  }  return n - 1;}  }
class C{  public void writeLong(long a) throws IOException {  outs.write((byte)(a));  outs.write((byte)(a >> 8));  outs.write((byte)(a >> 16));  outs.write((byte)(a >> 24));  outs.write((byte)(a >> 32));  outs.write((byte)(a >> 40));  outs.write((byte)(a >> 48));  outs.write((byte)(a >> 56));}  }
class C{  public void removeDiscoveryListener(DiscoveryListener l){synchronized (registrars) {    if (terminated) {      throw new IllegalStateException("discovery terminated");    }    listeners.remove(l);  }}  }
class C{  public static <T>IStoredList<T> createRandomScanList(boolean reuseLocks){  return createStoredList(true,reuseLocks);}  }
class C{  @Override public void surfaceDestroyed(SurfaceHolder holder){}  }
class C{  private VersionData(Class<?> vendorOptionType,String name,int version){  this.isNotSet=false;  this.vendorOptionType=vendorOptionType;  this.versionString=name;  this.majorNumber=version;  this.minorNumber=version;  this.pointNumber=version;}  }
class C{  private void makeMultiTraversal(){  Optional<String> roleA=roletypes.get(0);  String playerA=roleplayers.get(0);  Optional<String> roleB=roletypes.get(1);  String playerB=roleplayers.get(1);  multiTraversal=MultiTraversal.create(new FragmentImpl(null,FragmentPriority.EDGE_RELATION,playerA,playerB),new FragmentImpl(null,FragmentPriority.EDGE_RELATION,playerB,playerA));}  }
class C{  public ISourceDataTag findDataTag(final Long dataTagId){  Map<Long,EquipmentConfiguration> equipmentMap=getProcessConfiguration().getEquipmentConfigurations();  for (  EquipmentConfiguration equipmentConfiguration : equipmentMap.values()) {    if (equipmentConfiguration.hasSourceDataTag(dataTagId)) {      return equipmentConfiguration.getSourceDataTag(dataTagId);    }  }  return null;}  }
class C{  public boolean isValidTld(String tld){  tld=unicodeToASCII(tld);  if (allowLocal && isValidLocalTld(tld)) {    return true;  }  return isValidInfrastructureTld(tld) || isValidGenericTld(tld) || isValidCountryCodeTld(tld);}  }
class C{  private void scanQueuedPsiResources(){  PsiManager psiManager=PsiManager.getInstance(myModule.getProject());  for (  PsiValueResourceQueueEntry valueResource : myInitialScanState.myPsiValueResourceQueue) {    PsiFile file=psiManager.findFile(valueResource.file);    if (file != null) {      scanValueFileAsPsi(valueResource.qualifiers,file,valueResource.folderConfiguration);    }  }  for (  PsiFileResourceQueueEntry fileResource : myInitialScanState.myPsiFileResourceQueue) {    PsiFile file=psiManager.findFile(fileResource.file);    if (file != null) {      List<ResourceType> resourceTypes=FolderTypeRelationship.getRelatedResourceTypes(fileResource.folderType);      assert resourceTypes.size() >= 1 : fileResource.folderType;      ResourceType type=resourceTypes.get(0);      ListMultimap<String,ResourceItem> map=getMap(type,true);      scanFileResourceFileAsPsi(fileResource.qualifiers,fileResource.folderType,fileResource.folderConfiguration,type,true,map,file);    }  }}  }
class C{  public GroupsEditManagerQuery isContact(Boolean value){  return unsafeParam("is_contact",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CarveSignet_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200338,num0,skillname);}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  public static <T>void doForAll(Collection<T> c_,ObjectVisitor<T> v_){  for (Iterator<T> iter=c_.iterator(); iter.hasNext(); )   v_.visit(iter.next());}  }
class C{  private void fillDimensionsAndMeasuresForTables(TableSchema tableSchema){  List<CarbonDimension> dimensions=new ArrayList<CarbonDimension>();  List<CarbonMeasure> measures=new ArrayList<CarbonMeasure>();  this.tableDimensionsMap.put(tableSchema.getTableName(),dimensions);  this.tableMeasuresMap.put(tableSchema.getTableName(),measures);  int dimensionOrdinal=0;  int measureOrdinal=0;  int keyOrdinal=0;  int columnGroupOrdinal=-1;  int previousColumnGroupId=-1;  List<ColumnSchema> listOfColumns=tableSchema.getListOfColumns();  int complexTypeOrdinal=-1;  for (int i=0; i < listOfColumns.size(); i++) {    ColumnSchema columnSchema=listOfColumns.get(i);    if (columnSchema.isDimensionColumn()) {      if (columnSchema.getNumberOfChild() > 0) {        CarbonDimension complexDimension=new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,++complexTypeOrdinal);        complexDimension.initializeChildDimensionsList(columnSchema.getNumberOfChild());        dimensions.add(complexDimension);        dimensionOrdinal=readAllComplexTypeChildrens(dimensionOrdinal,columnSchema.getNumberOfChild(),listOfColumns,complexDimension);        i=dimensionOrdinal - 1;        complexTypeOrdinal=assignComplexOrdinal(complexDimension,complexTypeOrdinal);      } else {        if (!columnSchema.getEncodingList().contains(Encoding.DICTIONARY)) {          dimensions.add(new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,-1));        } else         if (columnSchema.getEncodingList().contains(Encoding.DICTIONARY) && columnSchema.getColumnGroupId() == -1) {          dimensions.add(new CarbonDimension(columnSchema,dimensionOrdinal++,keyOrdinal++,-1,-1));        } else {          columnGroupOrdinal=previousColumnGroupId == columnSchema.getColumnGroupId() ? ++columnGroupOrdinal : 0;          previousColumnGroupId=columnSchema.getColumnGroupId();          dimensions.add(new CarbonDimension(columnSchema,dimensionOrdinal++,keyOrdinal++,columnGroupOrdinal,-1));        }      }    } else {      measures.add(new CarbonMeasure(columnSchema,measureOrdinal++));    }  }}  }
class C{  public boolean connect(){  if (mService != null)   Log.e(TAG,"Already connected.");  Intent intent=new Intent(GSA_SERVICE).setPackage(GSAState.SEARCH_INTENT_PACKAGE);  return mContext.bindService(intent,mConnection,Context.BIND_AUTO_CREATE);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public OrLogicalExpr fullCopy(){  OrLogicalExpr tree=(OrLogicalExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean isAtLeastJava17(){  return getMajorJavaVersion() >= JAVA_17;}  }
class C{  public boolean isAlreadyMatched(){  return false;}  }
class C{  @deprecated protected void handleComputeFields(int julianDay){  int[] fields=new int[3];  jdToCE(julianDay,getJDEpochOffset(),fields);  int year;  int era;  int year;  if (isAmeteAlemEra()) {    int era=0;    year=fields[0] + 5500;  } else {    int year;    if (fields[0] > 0) {      int era=1;      year=fields[0];    } else {      era=0;      year=fields[0] + 5500;    }  }  internalSet(19,fields[0]);  internalSet(0,era);  internalSet(1,year);  internalSet(2,fields[1]);  internalSet(5,fields[2]);  internalSet(6,30 * fields[1] + fields[2]);}  }
class C{  public void toAllInRadius(WorldServer world,Vec3i pos,double radius){  toAllInRadius(world,new Vec3d(pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5),radius);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof FloatWritable))   return false;  FloatWritable other=(FloatWritable)o;  return this.value == other.value;}  }
class C{  public Layer(){  super();}  }
class C{  public static String callContentPermissionCheck(Delegator delegator,LocalDispatcher dispatcher,Map<String,Object> context){  Map<String,Object> permResults=callContentPermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  return permissionStatus;}  }
class C{  public ItemStack(final Material type,final int amount,final short damage){  this(type.getId(),amount,damage);}  }
class C{  private boolean addCallbackMethods(SootClass currentClass,Set<SootClass> referenceClasses,String callbackSignature){  if (currentClass == null)   return false;  if (!this.callbackFunctions.containsKey(currentClass.getName()))   return false;  boolean callbackFound=false;  Map<SootClass,Set<SootMethod>> callbackClasses=new HashMap<SootClass,Set<SootMethod>>();  for (  String methodSig : this.callbackFunctions.get(currentClass.getName())) {    SootMethodAndClass methodAndClass=SootMethodRepresentationParser.v().parseSootMethodString(methodSig);    if (!callbackSignature.isEmpty() && !callbackSignature.equals(methodAndClass.getSubSignature()))     continue;    SootClass theClass=Scene.v().getSootClass(methodAndClass.getClassName());    SootMethod theMethod=findMethod(theClass,methodAndClass.getSubSignature());    if (theMethod == null) {      continue;    }    if (getComponentType(theClass) == ComponentType.Activity && AndroidEntryPointConstants.getActivityLifecycleMethods().contains(theMethod.getSubSignature()))     continue;    if (getComponentType(theClass) == ComponentType.Service && AndroidEntryPointConstants.getServiceLifecycleMethods().contains(theMethod.getSubSignature()))     continue;    if (getComponentType(theClass) == ComponentType.BroadcastReceiver && AndroidEntryPointConstants.getBroadcastLifecycleMethods().contains(theMethod.getSubSignature()))     continue;    if (getComponentType(theClass) == ComponentType.ContentProvider && AndroidEntryPointConstants.getContentproviderLifecycleMethods().contains(theMethod.getSubSignature()))     continue;    if (callbackClasses.containsKey(theClass))     callbackClasses.get(theClass).add(theMethod); else {      Set<SootMethod> methods=new HashSet<SootMethod>();      methods.add(theMethod);      callbackClasses.put(theClass,methods);    }  }  if (referenceClasses == null || referenceClasses.isEmpty())   referenceClasses=Collections.singleton(currentClass); else {    referenceClasses=new HashSet<SootClass>(referenceClasses);    referenceClasses.add(currentClass);  }  Stmt beforeCallbacks=Jimple.v().newNopStmt();  body.getUnits().add(beforeCallbacks);  for (  SootClass callbackClass : callbackClasses.keySet()) {    Set<Local> classLocals=new HashSet<Local>();    for (    SootClass parentClass : referenceClasses) {      Local parentLocal=this.localVarsForClasses.get(parentClass.getName());      if (isCompatible(parentClass,callbackClass))       classLocals.add(parentLocal);    }    if (classLocals.isEmpty()) {      Local classLocal=generateClassConstructor(callbackClass,body,referenceClasses);      if (classLocal == null) {        logger.warn("Constructor cannot be generated for callback class {}",callbackClass.getName());        continue;      }      classLocals.add(classLocal);    }    for (    Local classLocal : classLocals) {      for (      SootMethod callbackMethod : callbackClasses.get(callbackClass)) {        JNopStmt thenStmt=new JNopStmt();        createIfStmt(thenStmt);        buildMethodCall(callbackMethod,body,classLocal,generator,referenceClasses);        body.getUnits().add(thenStmt);      }      callbackFound=true;    }  }  if (callbackFound)   createIfStmt(beforeCallbacks);  return callbackFound;}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"vlng");}  }
class C{  @NonNull private boolean hasCamera(@NonNull Context context){  final Intent mockIntent=new Intent();  mockIntent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);  final PackageManager packageManager=context.getPackageManager();  final boolean hasCamera=packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA) || packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT);  final boolean hasCameraApp=isIntentResolvable(mockIntent,context);  log.d(LOG_TAG,String.format(Locale.US,"Camera present: %b, Camera App present: %b",hasCamera,hasCameraApp));  return (hasCamera && hasCameraApp);}  }
class C{  public static String encodePassword(String password){  try {    MessageDigest messageDiegest=MessageDigest.getInstance("SHA-1");    messageDiegest.update(password.getBytes("UTF-8"));    return Base64.encodeToString(messageDiegest.digest(),false);  } catch (  NoSuchAlgorithmException e) {    log.error("Exception while encoding password");    throw new Error(e);  }catch (  UnsupportedEncodingException e) {    log.error("Exception while encoding password");    throw new Error(e);  }}  }
class C{  protected void updateProgress(IProgressMonitor progressMonitor,Object node){  if (node instanceof ITypedElement) {    ITypedElement element=(ITypedElement)node;    progressMonitor.subTask(Policy.bind("CompareEditorInput.fileProgress",new String[]{element.getName()}));    progressMonitor.worked(1);  }}  }
class C{  public boolean isOptional(){  return proto.getLabel() == FieldDescriptorProto.Label.LABEL_OPTIONAL;}  }
class C{  public static int nullSafeHashCode(short[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  public Builder envVar(String key,String value){  this.envVars.put(key,value);  return this;}  }
class C{  ProxyVerifier(TxnManager serverProxy,Uuid proxyID){  if (!(serverProxy instanceof RemoteMethodControl)) {    throw new UnsupportedOperationException("No verifier available for non-constrainable service");  } else   if (!(serverProxy instanceof TrustEquivalence)) {    throw new UnsupportedOperationException("Verifier requires service proxy to implement " + "TrustEquivalence");  } else   if (proxyID == null) {    throw new IllegalArgumentException("Proxy id cannot be null");  }  this.serverProxy=(RemoteMethodControl)serverProxy;  this.proxyID=proxyID;}  }
class C{  public boolean matches(String url){  if (!enabled) {    return false;  }  for (  Pattern pattern : getPatterns()) {    Matcher matcher=pattern.matcher(url);    if (matcher.matches()) {      return true;    }  }  return false;}  }
class C{  public static RequestLog copy(){  RequestLog current=RLOG.get();  return new RequestLog(current);}  }
class C{  static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public <T>String makeStringValueSQ(T value){  return value.toString();}  }
class C{  public void usage(){  consoleWriter.a("Usage: ").a(PROGRAM_NAME).fg(Ansi.Color.CYAN).a(" <command>").reset().a(" [options]").println(2);  consoleWriter.a("Commands:").println();  for (  Command command : commands.values()) {    if (!command.getName().isEmpty()) {      String paddedCommandName=Strings.padStart(command.getName(),20,' ');      consoleWriter.fg(Ansi.Color.CYAN).a(paddedCommandName).reset().a(" ").a(command.getDescription()).println();    }  }  consoleWriter.newLine().a("Get help for a specific command: mojito <command> -h").println(2);}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.comment(text,augs);  }}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  void insert(DynamicAABBTreeNode item){  if (this.root == null) {    this.root=item;    return;  }  AABB itemAABB=item.aabb;  DynamicAABBTreeNode node=this.root;  while (!node.isLeaf()) {    AABB aabb=node.aabb;    double perimeter=aabb.getPerimeter();    AABB union=aabb.getUnion(itemAABB);    double unionPerimeter=union.getPerimeter();    double cost=2 * unionPerimeter;    double descendCost=2 * (unionPerimeter - perimeter);    DynamicAABBTreeNode left=node.left;    DynamicAABBTreeNode right=node.right;    double costl=0.0;    if (left.isLeaf()) {      AABB u=left.aabb.getUnion(itemAABB);      costl=u.getPerimeter() + descendCost;    } else {      AABB u=left.aabb.getUnion(itemAABB);      double oldPerimeter=left.aabb.getPerimeter();      double newPerimeter=u.getPerimeter();      costl=newPerimeter - oldPerimeter + descendCost;    }    double costr=0.0;    if (right.isLeaf()) {      AABB u=right.aabb.getUnion(itemAABB);      costr=u.getPerimeter() + descendCost;    } else {      AABB u=right.aabb.getUnion(itemAABB);      double oldPerimeter=right.aabb.getPerimeter();      double newPerimeter=u.getPerimeter();      costr=newPerimeter - oldPerimeter + descendCost;    }    if (cost < costl && cost < costr) {      break;    }    if (costl < costr) {      node=left;    } else {      node=right;    }  }  DynamicAABBTreeNode parent=node.parent;  DynamicAABBTreeNode newParent=new DynamicAABBTreeNode();  newParent.parent=node.parent;  newParent.aabb=node.aabb.getUnion(itemAABB);  newParent.height=node.height + 1;  if (parent != null) {    if (parent.left == node) {      parent.left=newParent;    } else {      parent.right=newParent;    }    newParent.left=node;    newParent.right=item;    node.parent=newParent;    item.parent=newParent;  } else {    newParent.left=node;    newParent.right=item;    node.parent=newParent;    item.parent=newParent;    this.root=newParent;  }  node=item.parent;  while (node != null) {    node=balance(node);    DynamicAABBTreeNode left=node.left;    DynamicAABBTreeNode right=node.right;    node.height=1 + Math.max(left.height,right.height);    node.aabb=left.aabb.getUnion(right.aabb);    node=node.parent;  }}  }
class C{  private static void decreaseKinahAmount(Player player,long price){  player.getInventory().decreaseKinah(price);}  }
class C{  public void addGlobalElementDeclAll(XSElementDecl decl){  if (fAllGlobalElemDecls.get(decl) == null) {    fAllGlobalElemDecls.put(decl,decl);    if (decl.fSubGroup != null) {      if (fSubGroupCount == fSubGroups.length)       fSubGroups=resize(fSubGroups,fSubGroupCount + INC_SIZE);      fSubGroups[fSubGroupCount++]=decl;    }  }}  }
class C{  public long size(String fileName){  try {    IoChannel fileChannel=getFileChannel(fileName);    return fileChannel.size() / BLOCK_SIZE;  } catch (  IOException e) {    throw new RuntimeException("cannot access " + fileName);  }}  }
class C{  private void writeAltTranslations(AltTranslationsAnnotation ann,Segment segment){  if (ann == null) {    return;  }  for (  AltTranslation alt : ann) {    writer.writeStartElement("alt-trans");    if (segment != null) {      writer.writeAttributeString("mid",segment.getId());    }    if (alt.getCombinedScore() > 0) {      writer.writeAttributeString("match-quality",String.format("%d",alt.getCombinedScore()));    }    if (!Util.isEmpty(alt.getOrigin())) {      writer.writeAttributeString("origin",alt.getOrigin());    }    if (alt.getType() != MatchType.UKNOWN) {      writer.writeAttributeString("okp:" + OKP_MATCHTYPE,alt.getType().toString());    }    if (alt.getEngine() != null) {      writer.writeAttributeString("okp:" + OKP_ENGINE,alt.getEngine());    }    TextContainer cont=alt.getSource();    if (!cont.isEmpty()) {      writer.writeStartElement("source");      writer.writeAttributeString("xml:lang",alt.getSourceLocale().toBCP47());      writer.writeRawXML(xliffCont.toSegmentedString(cont,0,params.getEscapeGt(),false,params.getPlaceholderMode(),params.getIncludeCodeAttrs(),params.getIncludeIts(),trgLoc));      writer.writeEndElementLineBreak();    }    pushAnnotatorsRef(ITSContent.getAnnotatorsRef(alt.getTarget()));    writer.writeStartElement("target");    writer.writeAttributeString("xml:lang",alt.getTargetLocale().toBCP47());    if (params.getIncludeIts()) {      writeAnnotatorsRefIfNeeded();      StringBuilder tmp=new StringBuilder();      itsContForAltTrgCont.outputAnnotations(alt.getTarget().getAnnotation(GenericAnnotations.class),tmp,false,false,false,null);      writer.appendRawXML(tmp.toString());    }    writer.writeRawXML(xliffCont.toSegmentedString(alt.getTarget(),0,params.getEscapeGt(),false,params.getPlaceholderMode(),params.getIncludeCodeAttrs(),params.getIncludeIts(),trgLoc));    writer.writeEndElementLineBreak();    annotatorsRef.pop();    writer.writeEndElementLineBreak();  }}  }
class C{  protected void okPressed(){  if (createNewConfig())   super.okPressed(); else {    Shell defaultShell=SootPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getShell();    String projectName=getSootMainProjectWidget().getText().getText();    MessageDialog.openError(defaultShell,"Unable to find Soot Main Project","Project " + projectName + " does not exist,"+ " is no Java project or is closed.");  }}  }
class C{  @Override public String toString(){  return in.toString();}  }
class C{  private LinkedHashMap<DimensionColumn,DimensionRow> extractDimensionRows(Set<DimensionColumn> dimensionColumns,JsonNode entry){  LinkedHashMap<DimensionColumn,DimensionRow> dimensionRows=new LinkedHashMap<>();  for (  DimensionColumn dc : dimensionColumns) {    JsonNode fieldNode=entry.get(dc.getName());    String fieldValue="";    if (fieldNode != null) {      fieldValue=fieldNode.asText("");    }    DimensionRow drow=dc.getDimension().findDimensionRowByKeyValue(fieldValue);    if (drow == null) {      drow=dc.getDimension().createEmptyDimensionRow(fieldValue);    }    dimensionRows.put(dc,drow);  }  return dimensionRows;}  }
class C{  protected MessagesGetChatUsersQueryWithChatIdsFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public void push(BasicBlock b){  if (b.inq != true) {    b.inq=true;    q.add(b);  }}  }
class C{  public static URL resolveURL(URL base,String target) throws MalformedURLException {  target=target.trim();  if (target.startsWith("?")) {    return fixPureQueryTargets(base,target);  }  return new URL(base,target);}  }
class C{  public static void updateLong(VisualItem item,String field,long val){  item.setLong(getStartField(field),item.getLong(field));  item.setLong(field,val);  item.setLong(getEndField(field),val);}  }
class C{  public void reset(){  fileMap=new HashMap<String,LinkedHashSet<FileAsset>>();  inlineMap=new HashMap<String,LinkedHashSet<String>>();}  }
class C{  public boolean isPresent(String name){  if (!features.isPresent(name)) {    return getVoice().getFeatures().isPresent(name);  } else {    return true;  }}  }
class C{  public InLineFeatureModel(InlineFeatureUpdateInterface parent){  this.parentObj=parent;}  }
class C{  public static boolean isSolo(String cc){  String first4digs=cc.substring(0,4);  String first2digs=cc.substring(0,2);  if (((cc.length() == 16) || (cc.length() == 18) || (cc.length() == 19)) && (first2digs.equals("63") || first4digs.equals("6767")))   return isCreditCard(cc);  return false;}  }
class C{  public void deleteSelectedNodes(){  DefaultTreeModel model=(DefaultTreeModel)dataTree.getModel();  TreePath[] selectedPaths=dataTree.getSelectionPaths();  if (selectedPaths != null) {    for (    TreePath selectedPath : selectedPaths) {      DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectedPath.getLastPathComponent();      node.removeAllChildren();      model.nodeStructureChanged(node);      DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();      if (parent != null) {        parent.remove(node);        model.nodeStructureChanged(parent);      }    }  }}  }
class C{  public SubEquipmentCacheObject(final Long pId,final String pName,final String pDescription,final String pHandlerClassName,final Long pStateTagId,final Long pAliveTagId,final int pAliveInterval,final Long pCommfaultTagId,final Long pParentId){  super(pId,pName,pDescription,pHandlerClassName,pStateTagId,pAliveTagId,pAliveInterval,pCommfaultTagId);  this.parentId=pParentId;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static boolean hasExtension(File file,String extension){  String noDotExtension=extension.startsWith(".") ? extension.substring(1) : extension;  return Files.getFileExtension(file.getName()).equalsIgnoreCase(noDotExtension);}  }
class C{  public void registerCacheStateListener(IClassLoaderCacheStateListener listener){  WeakReference<IClassLoaderCacheStateListener> weakListener=new WeakReference<IClassLoaderCacheStateListener>(listener);  _listeners.add(weakListener);  Set<Long> alreadyRemovedExplicitListeners=new HashSet<Long>();  Set<Long> alreadyRemovedImplicitListeners=new HashSet<Long>();synchronized (_lock) {    long currentTime=SystemTime.timeMillis();    for (    Map.Entry<Long,ClassLoaderContext> entry : _classLoaders.entrySet()) {      if (currentTime - entry.getValue().getTimeStamp() > _removedRelevantWindow)       continue;      if (entry.getValue().getRepresents() == Represent.REMOVED_EXPLICIT)       alreadyRemovedExplicitListeners.add(entry.getKey());      if (entry.getValue().getRepresents() == Represent.REMOVED_IMPLICIT)       alreadyRemovedImplicitListeners.add(entry.getKey());    }  }  dispatchRemovedHelper(listener,weakListener,alreadyRemovedExplicitListeners,true);  dispatchRemovedHelper(listener,weakListener,alreadyRemovedImplicitListeners,false);}  }
class C{  public UsersSearchQuery schoolCountry(Integer value){  return unsafeParam("school_country",value);}  }
class C{  private static int toMinutes(long millis){  return (int)((millis / 1000) % 3600) / 60;}  }
class C{  private void moveCenter(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapRadius){  float dx=x - rect.centerX();  float dy=y - rect.centerY();  if (rect.left + dx < 0 || rect.right + dx > viewWidth || rect.left + dx < bounds.left || rect.right + dx > bounds.right) {    dx/=1.05f;    mTouchOffset.x-=dx / 2;  }  if (rect.top + dy < 0 || rect.bottom + dy > viewHeight || rect.top + dy < bounds.top || rect.bottom + dy > bounds.bottom) {    dy/=1.05f;    mTouchOffset.y-=dy / 2;  }  rect.offset(dx,dy);  snapEdgesToBounds(rect,bounds,snapRadius);}  }
class C{  public void replaceLocationManager(LocationManager locationManager) throws IOException {  InfoSection infoSection=loadInfoSection();  infoSection.syncLocationManager2InfoSection(locationManager);  storeInfoSection();}  }
class C{  public String fixed_class_names(){  return soot.PhaseOptions.getString(options,"fcn");}  }
class C{  public boolean resourceInitializationException(TypeDecl catchType){  ASTNode$State state=state();  try {    for (    ResourceDeclaration resource : getResourceList()) {      if (resource.reachedException(catchType))       return true;    }    return false;  }  finally {  }}  }
class C{  @Override protected void monitor() throws Exception {  checkAvailability();  if (serviceMonitor == null)   serviceMonitor=new GSPingManager();}  }
class C{  public void handleBtnKeyEvent(KeyEvent e){switch (e.getCode()) {case ENTER:    processCommand();  break;case BACK_SPACE:break;case UP:if (nCommandIndicatorPoisition != nCommandsContainerIndicator && nCommandIndicatorPoisition > Settings.ERRORCODE) setServerCommandTextEdit();if (nCommandIndicatorPoisition != nCommandsContainerIndicator) nCommandIndicatorPoisition--;if (nCommandIndicatorPoisition < 0 && sCommandsContainer[Settings.nMaximumSizeOfCommandsContainer - 1] != null) nCommandIndicatorPoisition=Settings.nMaximumSizeOfCommandsContainer - 1;break;case DOWN:if (nCommandIndicatorPoisition != _firstPoistion) nCommandIndicatorPoisition++;if (nCommandIndicatorPoisition >= Settings.nMaximumSizeOfCommandsContainer && sCommandsContainer[Settings.ZEROINIT] != null) nCommandIndicatorPoisition=Settings.ZEROINIT;if (nCommandIndicatorPoisition != nCommandsContainerIndicator && nCommandIndicatorPoisition > Settings.ERRORCODE) setServerCommandTextEdit();break;case LEFT:break;case RIGHT:break;default :e.consume();break;}}  }
class C{  public void purgeCache(IContainer root,boolean deep) throws SVNException {  statusCache.purgeCache(root,deep);}  }
class C{  private static Comparable<?> castToComparable(Object obj){  try {    return (Comparable<?>)obj;  } catch (  ClassCastException cce) {    throw new IllegalArgumentException("Type " + obj.getClass() + " doesn't implement Comparable, Serialization mode might be different than "+ StorageType.OBJECT+ ".",cce);  }}  }
class C{  private void expandTree(){  for (int i=0; i < myChangeTree.getRowCount(); ++i) {    myChangeTree.expandRow(i);  }}  }
class C{  private double[] concatenateSamples(final double[] x,final double[] y){  final double[] z=new double[x.length + y.length];  System.arraycopy(x,0,z,0,x.length);  System.arraycopy(y,0,z,x.length,y.length);  return z;}  }
class C{  private static void translateCanvasToView(View from,View to,Canvas canvas) throws IllegalArgumentException {  assert from != null;  assert to != null;  while (to != from) {    canvas.translate(to.getLeft(),to.getTop());    if (!(to.getParent() instanceof View)) {      throw new IllegalArgumentException("View 'to' was not a desendent of 'from'.");    }    to=(View)to.getParent();  }}  }
class C{  public FuzzyKMeansClusterer(final int k,final double fuzziness,final int maxIterations,final DistanceMeasure measure) throws MathIllegalArgumentException {  this(k,fuzziness,maxIterations,measure,DEFAULT_EPSILON,new JDKRandomGenerator());}  }
class C{  public GroupsSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public MnistManager(String imagesFile,String labelsFile) throws IOException {  if (imagesFile != null) {    images=new MnistImageFile(imagesFile,"r");  }  if (labelsFile != null) {    labels=new MnistLabelFile(labelsFile,"r");  }}  }
class C{  private static String timeOfDay(int hour,int min){  int hh=hour;  if (min > 58)   hh++;  if (hh == 24) {    return "";  } else   if (hh > 17) {    return "in the evening";  } else   if (hh > 11) {    return "in the afternoon";  } else {    return "in the morning";  }}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public DoubleLiteral fullCopy(){  DoubleLiteral tree=(DoubleLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void onWeatherChange(int mapId,Player player){  WeatherEntry[] weatherEntries=getWeatherEntries(mapId);  if (weatherEntries == null) {    return;  }  if (player == null) {    for (Iterator<Player> playerIterator=World.getInstance().getPlayersIterator(); playerIterator.hasNext(); ) {      Player currentPlayer=playerIterator.next();      if (!currentPlayer.isSpawned()) {        continue;      }      if (currentPlayer.getWorldId() == mapId) {        PacketSendUtility.sendPacket(currentPlayer,new SM_WEATHER(weatherEntries));      }    }  } else {    PacketSendUtility.sendPacket(player,new SM_WEATHER(weatherEntries));  }}  }
class C{  private List<FileMatch> filterSourceMatchesThatAreTargetMatches(List<FileMatch> sourceMatchCandidates,List<FileMatch> targetMatchCandidates){  List<FileMatch> filteredSourceMatchCandidates=new ArrayList<>();  List<Path> targetPaths=getPaths(targetMatchCandidates);  for (  FileMatch sourceMatchCandidate : sourceMatchCandidates) {    if (!targetPaths.contains(sourceMatchCandidate.getPath())) {      filteredSourceMatchCandidates.add(sourceMatchCandidate);    }  }  return filteredSourceMatchCandidates;}  }
class C{  private void computeHessians(){  if (rHessian == null) {    final double x=v.getX();    final double y=v.getY();    final double z=v.getZ();    final double x2=x * x;    final double y2=y * y;    final double z2=z * z;    final double rho2=x2 + y2;    final double rho=FastMath.sqrt(rho2);    final double r2=rho2 + z2;    final double xOr=x / r;    final double yOr=y / r;    final double zOr=z / r;    final double xOrho2=x / rho2;    final double yOrho2=y / rho2;    final double xOr3=xOr / r2;    final double yOr3=yOr / r2;    final double zOr3=zOr / r2;    rHessian=new double[3][3];    rHessian[0][0]=y * yOr3 + z * zOr3;    rHessian[1][0]=-x * yOr3;    rHessian[2][0]=-z * xOr3;    rHessian[1][1]=x * xOr3 + z * zOr3;    rHessian[2][1]=-y * zOr3;    rHessian[2][2]=x * xOr3 + y * yOr3;    rHessian[0][1]=rHessian[1][0];    rHessian[0][2]=rHessian[2][0];    rHessian[1][2]=rHessian[2][1];    thetaHessian=new double[2][2];    thetaHessian[0][0]=2 * xOrho2 * yOrho2;    thetaHessian[1][0]=yOrho2 * yOrho2 - xOrho2 * xOrho2;    thetaHessian[1][1]=-2 * xOrho2 * yOrho2;    thetaHessian[0][1]=thetaHessian[1][0];    final double rhor2=rho * r2;    final double rho2r2=rho * rhor2;    final double rhor4=rhor2 * r2;    final double rho3r4=rhor4 * rho2;    final double r2P2rho2=3 * rho2 + z2;    phiHessian=new double[3][3];    phiHessian[0][0]=z * (rho2r2 - x2 * r2P2rho2) / rho3r4;    phiHessian[1][0]=-x * y * z* r2P2rho2 / rho3r4;    phiHessian[2][0]=x * (rho2 - z2) / rhor4;    phiHessian[1][1]=z * (rho2r2 - y2 * r2P2rho2) / rho3r4;    phiHessian[2][1]=y * (rho2 - z2) / rhor4;    phiHessian[2][2]=2 * rho * zOr3 / r;    phiHessian[0][1]=phiHessian[1][0];    phiHessian[0][2]=phiHessian[2][0];    phiHessian[1][2]=phiHessian[2][1];  }}  }
class C{  public WatchedObject addRequestWatch(SocketChannel sock,ConnectionResource client){  return addWatch(new WatchedObject(this,sock,client));}  }
class C{  public PhotosGetQueryWithExtended photoIds(List<String> value){  return unsafeParam("photo_ids",value);}  }
class C{  public DHCPMessage(byte ibuf[],int inPort){  initialize();  internalize(ibuf);  this.destination_IP=BROADCAST_ADDR;  this.gPort=inPort;}  }
class C{  public void prepareForUpdatingIndexValues(CacheManager cacheManager,IEntryCacheInfo pEntry,IEntryData newEntryData){  if (!hasIndexes() || !_typeDataFactory.useEconomyHashMap())   return;  IEntryData entryData=pEntry.getEntryHolder(cacheManager).getEntryData();  for (  TypeDataIndex<Object> index : _indexes) {    if (!index.usedEconomyHashMap())     continue;    if (index.disableIndexUsageForOperation(this,pEntry.getLatestIndexCreationNumber()))     continue;    Object fieldValue=index.getIndexValue(entryData);    Object newFieldValue=index.getIndexValue(newEntryData);    if (!objectsEquality(fieldValue,newFieldValue))     index.prepareForReplacingEntryIndexedField(fieldValue);  }}  }
class C{  public void createRemoteFolder(ISVNRemoteFolder parent,String folderName,String message,IProgressMonitor monitor) throws SVNException {  parent.createRemoteFolder(folderName,message,monitor);}  }
class C{  public Set<NlComponent> dependsOn(Collection<? extends NlComponent> nodes,boolean vertical){  List<ViewData> reachable=new ArrayList<ViewData>();  Set<ViewData> visiting=new HashSet<ViewData>();  for (  NlComponent node : nodes) {    ViewData view=myNodeToView.get(node);    if (view != null) {      findBackwards(view,visiting,reachable,vertical,view);    }  }  Set<NlComponent> dependents=new HashSet<NlComponent>(reachable.size());  for (  ViewData v : reachable) {    dependents.add(v.node);  }  return dependents;}  }
class C{  public static void writeSwappedInteger(OutputStream output,int value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));  output.write((byte)((value >> 16) & 0xff));  output.write((byte)((value >> 24) & 0xff));}  }
class C{  public boolean hasPhysicalStateEffect(){  Iterator<Effect> effectIterator=this.abnormalEffectMap.values().iterator();  while (effectIterator.hasNext()) {    Effect localEffect=effectIterator.next();    if (localEffect.isPhysicalState()) {      return true;    }  }  return false;}  }
class C{  @NotNull public DesignSurfaceFixture requireSelection(@NotNull List<NlComponentFixture> components){  assertEquals(components,getSelection());  return this;}  }
class C{  public SettlerTask(TaskManager manager,WakeupManager wm,TransactionManager txnmgr,Object tid){  super(manager,wm);  if (txnmgr == null)   throw new IllegalArgumentException("SettlerTask: SettlerTask: " + "txnmgr must be non-null");  this.txnmgr=(ExtendedTransactionManager)txnmgr;  this.tid=tid;}  }
class C{  public ObjectFactory(){}  }
class C{  private void callShortcutManager(BooleanSupplier r){  try {    if (!r.getAsBoolean()) {      Utils.showToast(mContext,"Call to ShortcutManager is rate-limited");    }  } catch (  Exception e) {    Log.e(TAG,"Caught Exception",e);    Utils.showToast(mContext,"Error while calling ShortcutManager: " + e.toString());  }}  }
class C{  public void sleepTillEmpty(){  long timeout=0;  while (!queue.isEmpty() || (active.get() > 0)) {    try {      if (timeout <= giveupTime) {        Thread.sleep(DEFAULT_SLEEP);        timeout+=DEFAULT_SLEEP;        logger.debug("After Sleeping for empty: {}, Count: {}",+queue.size(),active.get());      } else {        throw new RuntimeException("Timed out because TPE is too busy...");      }    } catch (    InterruptedException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public static final boolean isMultipartContent(HttpServletRequest request){  final String method=request.getMethod().toLowerCase();  if (!method.equalsIgnoreCase("post") && !method.equalsIgnoreCase("put")) {    return false;  }  String contentType=request.getContentType();  if (contentType == null) {    return false;  }  if (contentType.toLowerCase().startsWith(MULTIPART)) {    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_ME_TO_B(String skillcaster,String value0d,String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200494,skillcaster,value0d,skilltarget,value0,skillname);}  }
class C{  public CounterMap<V,K> invert(){  CounterMap<V,K> invertCounterMap=new CounterMap<>();  for (  K key : this.keySet()) {    Counter<V> keyCounts=this.getCounter(key);    for (    V val : keyCounts.keySet()) {      double count=keyCounts.getCount(val);      invertCounterMap.setCount(val,key,count);    }  }  return invertCounterMap;}  }
class C{  public static int spToPX(final Context ctx,float sp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,ctx.getResources().getDisplayMetrics());}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ConnectionAbsoluteTime)) {    return false;  }  ConnectionAbsoluteTime cc=(ConnectionAbsoluteTime)obj;  return time == cc.time;}  }
class C{  public void addIndexesToColumnFamily(String typeName,List<String> columnNames,SpaceDocumentColumnFamilyMapper mapper){  ColumnFamilyMetadata metadata=metadataCache.getColumnFamilyMetadata(typeName);  if (metadata == null) {    metadata=fetchColumnFamilyMetadata(typeName,mapper);    if (metadata == null) {      throw new SpaceCassandraSchemaUpdateException("Failed finding column family metadata for " + typeName,null,false);    }  }  ReentrantLock lockForType=namedLock.forName(metadata.getTypeName());  lockForType.lock();  try {    metadata.getIndexes().addAll(columnNames);    ColumnFamilyDefinition columnFamilyDefinition=getColumnFamilyDefinition(metadata);    if (columnFamilyDefinition == null) {      throw new SpaceCassandraSchemaUpdateException("column family definition: " + metadata.getColumnFamilyName() + " for type: "+ typeName+ " not found",null,false);    }    ThriftCfDef thriftCfDef=new ThriftCfDef(columnFamilyDefinition);    for (    String columnName : columnNames) {      ByteBuffer serializedColumnName=StringSerializer.get().toByteBuffer(columnName);      ColumnDefinition originalColumnDefinition=getColumnDefinition(serializedColumnName,thriftCfDef);      if (originalColumnDefinition == null) {        String validationClass=ValidatorClassInferer.getBytesTypeValidationClass();        addColumnDefinitionToColumnFamilyDefinition(metadata,thriftCfDef,columnName,validationClass);      } else       if (originalColumnDefinition.getIndexName() != null) {        continue;      } else {        List<ColumnDefinition> currentColumns=thriftCfDef.getColumnMetadata();        thriftCfDef.setColumnMetadata(new ArrayList<ColumnDefinition>());        BasicColumnDefinition replacedColumnDefinition=new BasicColumnDefinition();        replacedColumnDefinition.setName(originalColumnDefinition.getName());        replacedColumnDefinition.setValidationClass(originalColumnDefinition.getValidationClass());        replacedColumnDefinition.setIndexName(generateIndexName(typeName,columnName));        replacedColumnDefinition.setIndexType(ColumnIndexType.KEYS);        for (        ColumnDefinition columnDef : currentColumns) {          if (columnDef != originalColumnDefinition) {            thriftCfDef.addColumnDefinition(columnDef);          } else {            thriftCfDef.addColumnDefinition(replacedColumnDefinition);          }        }      }    }    if (logger.isInfoEnabled()) {      logger.info("Adding indexes to columns: " + columnNames + " of type: "+ metadata.getTypeName()+ ", column family: "+ metadata.getColumnFamilyName());    }    try {      cluster.updateColumnFamily(thriftCfDef,true);    } catch (    Exception e) {      throw new SpaceCassandraSchemaUpdateException("Failed adding column family definition to cassandra",null,true);    }  }  finally {    lockForType.unlock();  }}  }
class C{  protected void onSaveRingtone(Uri ringtoneUri){  persistString(ringtoneUri != null ? ringtoneUri.toString() : "");}  }
class C{  public NotificationsMarkAsViewedQuery markAsViewed(UserActor actor){  return new NotificationsMarkAsViewedQuery(getClient(),actor);}  }
class C{  private static ByteBuffer decodePercentEncodedOctets(String s,int i,ByteBuffer bb){  if (bb == null) {    bb=ByteBuffer.allocate(1);  } else {    bb.clear();  }  while (true) {    bb.put((byte)(decodeHex(s,i++) << 4 | decodeHex(s,i++)));    if (i == s.length()) {      break;    }    if (s.charAt(i++) != '%') {      break;    }    if (bb.position() == bb.capacity()) {      bb.flip();      ByteBuffer bb_new=ByteBuffer.allocate(s.length() / 3);      bb_new.put(bb);      bb=bb_new;    }  }  bb.flip();  return bb;}  }
class C{  public List<PetCategory> findAll(){  log.debug("Request to get all PetCategories");  List<PetCategory> result=petCategoryRepository.findAll();  return result;}  }
class C{  private boolean isValidNewName() throws IOException {  if (mNewName == null || mNewName.length() <= 0 || mNewName.contains(File.separator)) {    return false;  }  String tmpFolderName=FileStorageUtils.getTemporalPath("");  File testFile=new File(tmpFolderName + mNewName);  File tmpFolder=testFile.getParentFile();  tmpFolder.mkdirs();  if (!tmpFolder.isDirectory()) {    throw new IOException("Unexpected error: temporal directory could not be created");  }  try {    testFile.createNewFile();  } catch (  IOException e) {    Log_OC.i(TAG,"Test for validity of name " + mNewName + " in the file system failed");    return false;  }  boolean result=(testFile.exists() && testFile.isFile());  testFile.delete();  return result;}  }
class C{  @Deprecated public void onFailure(int statusCode,Throwable error,String content){  onFailure(error,content);}  }
class C{  private void requestForUpload(OCFile file){  FileUploader.UploadRequester requester=new FileUploader.UploadRequester();  requester.uploadUpdate(mContext,mAccount,file,FileUploader.LOCAL_BEHAVIOUR_MOVE,true);  mTransferWasRequested=true;}  }
class C{  public synchronized void forceUpdate(){  computeRuleResult();  fireUpdateReceivedEvent();}  }
class C{  static List<File> tidyDatabaseList(List<File> databaseFiles){  Set<File> originalAsSet=new HashSet<File>(databaseFiles);  List<File> tidiedList=new ArrayList<File>();  for (  File databaseFile : databaseFiles) {    String databaseFilename=databaseFile.getPath();    String sansSuffix=removeSuffix(databaseFilename,UNINTERESTING_FILENAME_SUFFIXES);    if (sansSuffix.equals(databaseFilename) || !originalAsSet.contains(new File(sansSuffix))) {      tidiedList.add(databaseFile);    }  }  return tidiedList;}  }
class C{  private void startNetLog(){  File outputFile;  try {    outputFile=File.createTempFile("cronet","log",Environment.getExternalStorageDirectory());    cronetEngine.startNetLogToFile(outputFile.toString(),false);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  SearchSuffixDao.dropTable(db,ifExists);}  }
class C{  public void updateDatabaseUploadStart(UploadFileOperation upload){  String localPath=(FileUploader.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour()) ? upload.getStoragePath() : null;  updateUploadStatus(upload.getOCUploadId(),UploadStatus.UPLOAD_IN_PROGRESS,UploadResult.UNKNOWN,upload.getRemotePath(),localPath);}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  private void createExampleDataSource(){  if (internalDataSource == null) {    ConsoleManager.getInstance().error(this,"No internal data source creation object set");  } else {    List<DataSourceInfo> dataSourceInfoList=internalDataSource.connect(this.editorFileInterface);    if ((dataSourceInfoList != null) && (dataSourceInfoList.size() == 1)) {      exampleDataSourceInfo=dataSourceInfoList.get(0);    }  }}  }
class C{  private void appendParagraph(String text,Element root,Locale defaultLocale){  Element insertHere=root;  String rootLanguage=root.getAttribute("xml:lang");  String textLanguage=MaryUtils.locale2xmllang(determineLocale(text,defaultLocale));  if (!textLanguage.equals(rootLanguage)) {    Element voiceElement=MaryXML.appendChildElement(root,MaryXML.VOICE);    voiceElement.setAttribute("xml:lang",textLanguage);    insertHere=voiceElement;  }  insertHere=MaryXML.appendChildElement(insertHere,MaryXML.PARAGRAPH);  insertHere.appendChild(root.getOwnerDocument().createTextNode(text));  Text textNode=(Text)insertHere.getFirstChild();  String textNodeString=textNode.getData();  Log.d(Mary.LOG,"textNodeString=`" + textNodeString + "'");}  }
class C{  public Matrix arrayLeftDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=B.A[i][j] / A[i][j];    }  }  return this;}  }
class C{  public static void push(@Nullable BlazeContext parentContext,@NotNull ScopedOperation scopedOperation){  BlazeContext context=new BlazeContext(parentContext);  try {    scopedOperation.execute(context);  } catch (  RuntimeException e) {    context.setHasError();    LOG.error(e);    throw e;  } finally {    context.endScope();  }}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  needsSyncChildren(false);}  }
class C{  public NeExpr newNeExpr(Value op1,Value op2){  return new JNeExpr(op1,op2);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  @Override public void populateExpression(Object objValue){  String propertyName=null;  if (objValue instanceof PropertyExistsFunction) {    Expression e=((PropertyExistsFunction)objValue).getParameters().get(0);    Object value=((LiteralExpressionImpl)e).getValue();    propertyName=((AttributeExpressionImpl)value).getPropertyName();  } else   if (objValue instanceof AttributeExpressionImpl) {    propertyName=((AttributeExpressionImpl)objValue).getPropertyName();  } else   if (objValue instanceof LiteralExpressionImpl) {    propertyName=AttributeUtils.extract((String)((LiteralExpressionImpl)objValue).getValue());  }  if (propertyName != null) {    oldValueObj=propertyName;    attributeComboBox.setSelectedItem(propertyName);  } else {    oldValueObj=propertyName;    attributeComboBox.setSelectedIndex(-1);  }}  }
class C{  public static Entry[] toEntry(EntryRep[] reps){  Entry[] entries=null;  if (reps != null) {    entries=new Entry[reps.length];    for (int i=reps.length; --i >= 0; ) {      entries[i]=reps[i].get();    }  }  return entries;}  }
class C{  public MxxEdgeEffect(Context context){  mInterpolator=new DecelerateInterpolator();}  }
class C{  public static double readSwappedDouble(InputStream input) throws IOException {  return Double.longBitsToDouble(readSwappedLong(input));}  }
class C{  private void printErrorMessage(String errorMsg){  consoleWriter.newLine().fg(Ansi.Color.RED).a(errorMsg).println(2);}  }
class C{  public String validate(String value){  if (value == null) {    return null;  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      if (count == 1) {        return matcher.group(1);      }      StringBuffer buffer=new StringBuffer();      for (int j=0; j < count; j++) {        String component=matcher.group(j + 1);        if (component != null) {          buffer.append(component);        }      }      return buffer.toString();    }  }  return null;}  }
class C{  public AemDialog cancel(){  return clickDialogFooterButton(CANCEL_BUTTON_TEXT);}  }
class C{  public static Map<String,Object> updatePostalAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");  if (result.size() > 0) {    return result;  }  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));  }  String contactMechId=(String)context.get("contactMechId");  GenericValue contactMech=null;  GenericValue partyContactMech=null;  try {    contactMech=EntityQuery.use(delegator).from("ContactMech").where("contactMechId",contactMechId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    contactMech=null;  }  if (!partyId.equals("_NA_")) {    try {      partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();      if (partyContactMech == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));      } else {        toBeStored.add(partyContactMech);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      contactMech=null;    }  }  if (contactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));  }  GenericValue newContactMech=GenericValue.create(contactMech);  GenericValue newPartyContactMech=null;  if (partyContactMech != null)   newPartyContactMech=GenericValue.create(partyContactMech);  GenericValue relatedEntityToSet=null;  if ("POSTAL_ADDRESS".equals(contactMech.getString("contactMechTypeId"))) {    GenericValue addr=null;    try {      addr=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",contactMechId).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      addr=null;    }    relatedEntityToSet=GenericValue.create(addr);    relatedEntityToSet.set("toName",context.get("toName"));    relatedEntityToSet.set("attnName",context.get("attnName"));    relatedEntityToSet.set("address1",context.get("address1"));    relatedEntityToSet.set("address2",context.get("address2"));    relatedEntityToSet.set("directions",context.get("directions"));    relatedEntityToSet.set("city",context.get("city"));    relatedEntityToSet.set("postalCode",context.get("postalCode"));    relatedEntityToSet.set("postalCodeExt",context.get("postalCodeExt"));    relatedEntityToSet.set("stateProvinceGeoId",context.get("stateProvinceGeoId"));    relatedEntityToSet.set("countryGeoId",context.get("countryGeoId"));    relatedEntityToSet.set("postalCodeGeoId",context.get("postalCodeGeoId"));    if (addr == null || !relatedEntityToSet.equals(addr)) {      isModified=true;    }    relatedEntityToSet.set("contactMechId",newCmId);  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_update_contact_as_POSTAL_ADDRESS_specified",UtilMisc.toMap("contactMechTypeId",contactMech.getString("contactMechTypeId")),locale));  }  if (newPartyContactMech != null) {    newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));    newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));  }  if (!newContactMech.equals(contactMech))   isModified=true;  if (newPartyContactMech != null && !newPartyContactMech.equals(partyContactMech))   isModified=true;  toBeStored.add(newContactMech);  if (newPartyContactMech != null)   toBeStored.add(newPartyContactMech);  if (isModified) {    if (relatedEntityToSet != null)     toBeStored.add(relatedEntityToSet);    newContactMech.set("contactMechId",newCmId);    if (newPartyContactMech != null) {      newPartyContactMech.set("contactMechId",newCmId);      newPartyContactMech.set("fromDate",now);      newPartyContactMech.set("thruDate",null);      try {        Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose",null,null,false));        while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {          GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());          tempVal.set("contactMechId",newCmId);          toBeStored.add(tempVal);        }      } catch (      GenericEntityException e) {        Debug.logWarning(e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));      }      partyContactMech.set("thruDate",now);    }    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  } else {    result.put("newContactMechId",contactMechId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));    return result;  }  result.put("newContactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static String toString(String[] stringArray,int startIndex,int endIndex){  if (startIndex < 0)   startIndex=0;  if (startIndex > stringArray.length - 1)   startIndex=stringArray.length - 1;  if (endIndex < startIndex)   endIndex=startIndex;  if (endIndex > stringArray.length - 1)   endIndex=stringArray.length - 1;  StringBuilder str=new StringBuilder();  for (int i=startIndex; i <= endIndex; i++) {    str.append(stringArray[i]).append(System.getProperty("line.separator"));  }  return str.toString();}  }
class C{  private static void resolveInheritDoc(@NotNull final Method method,@NotNull HashSet<PhpClass> declaredExceptions){  PhpClass clazz=method.getContainingClass();  String methodName=method.getName();  if (null != clazz && !StringUtil.isEmpty(methodName)) {    for (    PhpClass parent : clazz.getSupers()) {      Method parentMethod=parent.findMethodByName(methodName);      if (null != parentMethod) {        resolveThrownExceptions(parentMethod,declaredExceptions);      }    }  }}  }
class C{  protected void resetFrame(){  mLastDispose=mDispose;  mLastImage=mCurrentImage;  mDispose=0;  mDelay=0;}  }
class C{  private void replaceAltClassNames(byte[] classBytes){  for (  Map.Entry<String,String> entry : nameToMangledName.entrySet()) {    String origName=entry.getKey();    origName=origName.replace('.','/');    String mangledName=entry.getValue();    mangledName=mangledName.replace('.','/');    findAndReplace(classBytes,stringToUtf8Pattern(origName),stringToUtf8Pattern(mangledName));    findAndReplace(classBytes,stringToTypeStringPattern(origName),stringToTypeStringPattern(mangledName));  }}  }
class C{  public String formatBytes(long value){  return SimpleXYChartUtils.formatBytes((long)(value * chartFactor));}  }
class C{  public boolean forEach(TIntProcedure procedure){  for (int i=0; i < _pos; i++) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public Object remove(Object key){  Object underlying=this.underlyingObjectGetter.getUnderlyingObject(key);  return removeUsingUnderlying(underlying);}  }
class C{  public EconomyConcurrentHashMap(int initialCapacity,float loadFactor,IHashEntryHandler<K,V> handler){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL,handler);}  }
class C{  public boolean checkFks(boolean insertDummy) throws GenericEntityException {  ModelEntity model=this.getModelEntity();  Iterator<ModelRelation> relItr=model.getRelationsIterator();  while (relItr.hasNext()) {    ModelRelation relation=relItr.next();    if ("one".equalsIgnoreCase(relation.getType())) {      Map<String,Object> fields=new HashMap<String,Object>();      for (      ModelKeyMap keyMap : relation.getKeyMaps()) {        fields.put(keyMap.getRelFieldName(),this.get(keyMap.getFieldName()));      }      EntityFieldMap ecl=EntityCondition.makeCondition(fields);      long count=this.getDelegator().findCountByCondition(relation.getRelEntityName(),ecl,null,null);      if (count == 0) {        if (insertDummy) {          GenericValue newValue=this.getDelegator().makeValue(relation.getRelEntityName());          boolean allFieldsSet=true;          for (          ModelKeyMap mkm : relation.getKeyMaps()) {            if (this.get(mkm.getFieldName()) != null) {              newValue.set(mkm.getRelFieldName(),this.get(mkm.getFieldName()));              if (Debug.infoOn())               Debug.logInfo("Set [" + mkm.getRelFieldName() + "] to - "+ this.get(mkm.getFieldName()),module);            } else {              allFieldsSet=false;            }          }          if (allFieldsSet) {            if (Debug.infoOn())             Debug.logInfo("Creating place holder value : " + newValue,module);            newValue.put(ModelEntity.CREATE_STAMP_FIELD,this.get(ModelEntity.CREATE_STAMP_FIELD));            newValue.put(ModelEntity.CREATE_STAMP_TX_FIELD,this.get(ModelEntity.CREATE_STAMP_TX_FIELD));            newValue.put(ModelEntity.STAMP_FIELD,this.get(ModelEntity.STAMP_FIELD));            newValue.put(ModelEntity.STAMP_TX_FIELD,this.get(ModelEntity.STAMP_TX_FIELD));            newValue.setIsFromEntitySync(true);            newValue.checkFks(true);            newValue.create();          }        } else {          return false;        }      }    }  }  return true;}  }
class C{  protected boolean isEnabledForSVNResource(ISVNLocalResource svnResource) throws SVNException {  if (isEnabledForIgnoredResources() && isEnabledForManagedResources() && isEnabledForUnmanagedResources()&& isEnabledForAddedResources()&& isEnabledForCopiedResources()) {    return true;  }  LocalResourceStatus status=svnResource.getStatusFromCache();  boolean managed=false;  boolean ignored=false;  boolean added=false;  boolean copied=false;  if (!isEnabledForIgnoredResources()) {    if (!status.isManaged() && status.isIgnored()) {      ignored=true;    } else {      ignored=svnResource.isIgnored();    }  }  if (!ignored) {    managed=status.isManaged();    if (managed) {      copied=status.isCopied();      added=status.isAdded();    }  }  if (managed && !isEnabledForManagedResources())   return false;  if (!managed && !isEnabledForUnmanagedResources())   return false;  if (ignored && !isEnabledForIgnoredResources())   return false;  if (copied && added) {    if (!isEnabledForCopiedResources())     return false;  } else   if (added && !isEnabledForAddedResources()) {    return false;  }  return true;}  }
class C{  public RealMatrixFormat(final NumberFormat format){  this(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_ROW_PREFIX,DEFAULT_ROW_SUFFIX,DEFAULT_ROW_SEPARATOR,DEFAULT_COLUMN_SEPARATOR,format);}  }
class C{  public boolean hasRelation(String name){  return relations.isPresent(name);}  }
class C{  private JSONWriter end(char m,char c) throws JSONException {  if (this.mode != m) {    throw new JSONException(m == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(m);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public void remove(String name){  Integer tt=name2index.get(name);  if (tt != null) {    name2index.keySet().remove(name);    index2name.remove(tt);    ntax--;    bits.set(tt,false);  }}  }
class C{  public void close(){  contents.close();}  }
class C{  public SubHyperplane<S> outsideTouching(){  return outsideTouching;}  }
class C{  @Override public Boolean next(){  byte b=iterator.next();  if (b == (byte)0) {    return false;  }  if (b == (byte)1) {    return true;  }  return null;}  }
class C{  public static double covariance(final double[] xArray,final double[] yArray){  double result=0d;  final int length=xArray.length;  final double xMean=mean(xArray);  final double yMean=mean(yArray);  for (int i=0; i < length; i++) {    final double xDev=xArray[i] - xMean;    final double yDev=yArray[i] - yMean;    result+=(xDev * yDev - result) / (i + 1);  }  return result * ((double)length / (double)(length - 1));}  }
class C{  public List<SootMethod> implicit(){  List<SootMethod> ret=new ArrayList<SootMethod>();  addMethod(ret,"<java.lang.System: void initializeSystemClass()>");  addMethod(ret,"<java.lang.ThreadGroup: void <init>()>");  addMethod(ret,"<java.lang.Thread: void exit()>");  addMethod(ret,"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>");  addMethod(ret,"<java.lang.ClassLoader: void <init>()>");  addMethod(ret,"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>");  addMethod(ret,"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>");  addMethod(ret,"<java.lang.ClassLoader: void addClass(java.lang.Class)>");  addMethod(ret,"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>");  addMethod(ret,"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>");  addMethod(ret,"<java.lang.ref.Finalizer: void runFinalizer()>");  addMethod(ret,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>");  addMethod(ret,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>");  return ret;}  }
class C{  void updateCountersForOpen(){  mPreferenceManager.setContextualSearchTapCount(0);  if (isPromoAvailable()) {    getPromoTapCounter().disable();    int count=mPreferenceManager.getContextualSearchPromoOpenCount();    mPreferenceManager.setContextualSearchPromoOpenCount(++count);    ContextualSearchUma.logPromoOpenCount(count);  }}  }
class C{  public double inferenceByGibbsSampling(Document d,double[] pzd,int numBurnIn,int numSampling){  Arrays.fill(pzd,0);  double loglikelihood=0.0;  for (int i=0; i < numBurnIn + numSampling; i++) {    loglikelihood+=gibbsSampling(d);    if (i >= numBurnIn) {      for (      int topic : d.topics) {        if (topic != NO_TOPIC)         pzd[topic]++;      }    } else {      loglikelihood=0;    }  }  normalize(pzd,alpha);  return loglikelihood / numSampling;}  }
class C{  public BracketFinder(double growLimit,int maxEvaluations){  if (growLimit <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,growLimit,0);  }  if (maxEvaluations <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,maxEvaluations,0);  }  this.growLimit=growLimit;  this.maxEvaluations=maxEvaluations;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_A_TO_ME(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200645,skillcaster,skilltarget,skillname);}  }
class C{  private void copyDatabase() throws Exception {  try {    InputStream input=mContext.getAssets().open(DB_NAME);    String outFileName=DB_PATH + DB_NAME;    OutputStream output=new FileOutputStream(outFileName);    byte[] buffer=new byte[1024];    int length;    while (((length=input.read(buffer)) > 0)) {      output.write(buffer,0,length);    }    output.flush();    input.close();    output.close();  } catch (  IOException e) {    e.printStackTrace();    Log.e("DB_ERROR","copyDatabase(): Could not copy DB");  }}  }
class C{  public UsersIsAppUserQuery isAppUser(UserActor actor){  return new UsersIsAppUserQuery(getClient(),actor);}  }
class C{  public static void addLooperPrinter(Looper looper,Printer printer){  if (looper == null) {    throw new RuntimeException("null looper");  }  PrinterWrapper wrapper;synchronized (sLooperPrinters) {    wrapper=sLooperPrinters.get(looper);    if (wrapper == null) {      wrapper=new PrinterWrapper();      sLooperPrinters.put(looper,wrapper);      looper.setMessageLogging(wrapper);    }  }  wrapper.add(printer);}  }
class C{  void assignCoordinateFromPadding(){  mCoordinate=mLayoutFromEnd ? mOrientationHelper.getEndAfterPadding() : mOrientationHelper.getStartAfterPadding();}  }
class C{  public UtilsResolveScreenNameQuery resolveScreenName(String screenName){  return new UtilsResolveScreenNameQuery(getClient(),screenName);}  }
class C{  public String upload_file1(String master_file_id,String prefix_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(master_file_id,parts);  if (this.errno != 0) {    return null;  }  parts=this.upload_file(parts[0],parts[1],prefix_name,file_buff,offset,length,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public void spacing(float spacing){  this.spacing=spacing;  invalidate();}  }
class C{  public static <T>ArrayList<T> arrayList(int initialCapacity){  return new ArrayList<T>(initialCapacity);}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  int total=0;  while (total < len) {    int avail=count - pos;    if (avail <= 0) {      fill();      avail=count - pos;      if (avail <= 0) {        if (total > 0)         return total; else         return -1;      }    }    int copy=Math.min(len - total,avail);    System.arraycopy(buf,pos,b,off + total,copy);    pos+=copy;    total+=copy;  }  return total;}  }
class C{  void validateChildOrder(){  Log.d(TAG,"validating child count " + getChildCount());  if (getChildCount() < 1) {    return;  }  int lastPos=getPosition(getChildAt(0));  int lastScreenLoc=mOrientationHelper.getDecoratedStart(getChildAt(0));  if (mShouldReverseLayout) {    for (int i=1; i < getChildCount(); i++) {      View child=getChildAt(i);      int pos=getPosition(child);      int screenLoc=mOrientationHelper.getDecoratedStart(child);      if (pos < lastPos) {        logChildren();        throw new RuntimeException("detected invalid position. loc invalid? " + (screenLoc < lastScreenLoc));      }      if (screenLoc > lastScreenLoc) {        logChildren();        throw new RuntimeException("detected invalid location");      }    }  } else {    for (int i=1; i < getChildCount(); i++) {      View child=getChildAt(i);      int pos=getPosition(child);      int screenLoc=mOrientationHelper.getDecoratedStart(child);      if (pos < lastPos) {        logChildren();        throw new RuntimeException("detected invalid position. loc invalid? " + (screenLoc < lastScreenLoc));      }      if (screenLoc < lastScreenLoc) {        logChildren();        throw new RuntimeException("detected invalid location");      }    }  }}  }
class C{  public ReachingCopies(Object analyze){  super();  DavaFlowSet temp=(DavaFlowSet)process(analyze,new DavaFlowSet());}  }
class C{  private void appendRestrictedContentType(ContentType contentType){  if (restrictedContentTypesMask == 0) {    restrictedContentTypesMask=contentType.getFlagValue();  } else {    restrictedContentTypesMask|=contentType.getFlagValue();  }}  }
class C{  protected void init(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){  assertIsMutable();  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  if (modelEntity.getPksSize() != 1) {    throw new IllegalArgumentException("Cannot create a GenericEntity with more than one primary key field");  }  this.modelEntity=modelEntity;  this.entityName=modelEntity.getEntityName();  this.delegatorName=delegator.getDelegatorName();  this.internalDelegator=delegator;  this.observable=new Observable();  set(modelEntity.getOnlyPk().getName(),singlePkValue);  if (this.entityName == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null entityName in the modelEntity parameter");  }}  }
class C{  private static boolean isInvoiceTypeRecurse(GenericValue invoiceType,String inputTypeId) throws GenericEntityException {  String invoiceTypeId=invoiceType.getString("invoiceTypeId");  String parentTypeId=invoiceType.getString("parentTypeId");  if (parentTypeId == null || invoiceTypeId.equals(parentTypeId)) {    return false;  }  if (parentTypeId.equals(inputTypeId)) {    return true;  }  return isInvoiceTypeRecurse(invoiceType.getRelatedOne("ParentInvoiceType",false),inputTypeId);}  }
class C{  public static double logAdd(double lx,double ly){  double max, negDiff;  if (lx > ly) {    max=lx;    negDiff=ly - lx;  } else {    max=ly;    negDiff=lx - ly;  }  if (max == Double.NEGATIVE_INFINITY) {    return max;  } else   if (negDiff < -LOGTOLERANCE) {    return max;  } else {    return max + Math.log(1.0 + Math.exp(negDiff));  }}  }
class C{  public NormalDistribution(){  this(0,1);}  }
class C{  private void deleteSnapshot(int ver) throws LogException {  if (ver != 0) {    deleteFile(versionName(snapshotPrefix,ver));  }}  }
class C{  public VideoRestoreCommentQuery restoreComment(UserActor actor,int commentId){  return new VideoRestoreCommentQuery(getClient(),actor,commentId);}  }
class C{  public void buildIndex(List<DataFileFooter> footerList){  segmentProperties=new SegmentProperties(footerList.get(0).getColumnInTable(),footerList.get(0).getSegmentInfo().getColumnCardinality());  BTreeBuilderInfo indexBuilderInfo=new BTreeBuilderInfo(footerList,segmentProperties.getDimensionColumnsValueSize());  BtreeBuilder blocksBuilder=new BlockletBTreeBuilder();  blocksBuilder.build(indexBuilderInfo);  dataRefNode=blocksBuilder.get();  totalNumberOfRows=footerList.get(0).getNumberOfRows();}  }
class C{  synchronized void add(ParticipantHandle handle) throws InternalManagerException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerTransaction.class.getName(),"add",handle);  }  if (handle == null)   throw new NullPointerException("ParticipantHolder: add: " + "cannot add null handle");  try {    if (transactionsLogger.isLoggable(Level.FINEST)) {      transactionsLogger.log(Level.FINEST,"Adding ParticipantHandle: {0}",handle);    }    _parts.put(handle,handle);  } catch (  Exception e) {    if (transactionsLogger.isLoggable(Level.SEVERE)) {      transactionsLogger.log(Level.SEVERE,"Unable to add ParticipantHandle",e);    }    throw new InternalManagerException("TxnManagerTransaction: " + "add: " + e.getMessage());  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerTransaction.class.getName(),"add");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_MATCH_ALREADY_SENT_APPLY(String value0){  return new SM_SYSTEM_MESSAGE(1400216,value0);}  }
class C{  public static String clearEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String name=request.getParameter("UTIL_CACHE_NAME");  if (name == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotClearCache",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  UtilCache<?,?> utilCache=UtilCache.findCache(name);  if (utilCache != null) {    utilCache.clear();    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.clearCache",UtilMisc.toMap("name",name),locale) + ".";    request.setAttribute("_EVENT_MESSAGE_",errMsg);  } else {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotClearCacheNotFoundName",UtilMisc.toMap("name",name),locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  @Deprecated public ShapelessRecipe removeIngredient(Material ingredient,int rawdata){  return removeIngredient(1,ingredient,rawdata);}  }
class C{  private static int convertToInt(String value,int defaultValue){  String trim=value.trim();  if (trim.length() == 0) {    return defaultValue;  }  return Integer.parseInt(trim);}  }
class C{  public java.lang.Boolean isEscaped(){  return escaped;}  }
class C{  private void initSpaceStartupStateManager() throws CreateException {  List<String> targetNames=_clusterPolicy.m_ReplicationPolicy.m_ReplicationGroupMembersNames;  String spaceName=_clusterPolicy.m_ReplicationPolicy.m_OwnMemberName;  _startupManager=new ReplicationStartupManager(spaceName);  for (  String name : targetNames) {    if (name.equals(spaceName))     continue;  }  try {    if (_startupManager.shouldWait(targetNames)) {      _logger.info("Waiting for the first space in cluster to start");      _startupManager.waitForLastSpace();    }  } catch (  InterruptedException e) {    throw new CreateException("ReplicationStartupManager was interrupted",e);  }}  }
class C{  public static URL resolvePropertiesUrl(String resource,Locale locale){  if (UtilValidate.isEmpty(resource)) {    throw new IllegalArgumentException("resource cannot be null or empty");  }  String resourceName=createResourceName(resource,locale,false);  if (propertiesNotFound.contains(resourceName)) {    return null;  }  URL url=null;  try {    if (resource.endsWith(".xml") || resource.endsWith(".properties")) {      url=FlexibleLocation.resolveLocation(resource);      if (url != null) {        return url;      }    }    url=FlexibleLocation.resolveLocation(resourceName + ".properties");    if (url != null) {      return url;    }    url=FlexibleLocation.resolveLocation(resourceName + ".xml");    if (url != null) {      return url;    }    url=FlexibleLocation.resolveLocation(resource + ".xml");    if (url != null) {      return url;    }    url=FlexibleLocation.resolveLocation(resourceName);    if (url != null) {      return url;    }  } catch (  Exception e) {    Debug.logInfo("Properties resolver: invalid URL - " + e.getMessage(),module);  }  if (propertiesNotFound.size() <= 300) {    propertiesNotFound.add(resourceName);  }  return null;}  }
class C{  public static void warnInfo(String msg){  warnInfo("zhibo",msg);}  }
class C{  public void testMissingEnclosingProject() throws IOException {  VirtualFile module=createGradleProjectToImport(dir,module(1),module(2));  assert module != null;  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(module,getProject()));  assertEquals(2,projects.size());  assertModuleRequiredButNotFound(module(2),projects);  assertEquals(module,projects.get(pathToGradleName(module(1))));}  }
class C{  @Override public void onDone(){  mOverlay.remove(mGraphic);}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  @Override public void onClick(View v){  PokePicker.Generations genVal;switch (v.getId()) {case R.id.button_gen_i:    genVal=PokePicker.Generations.GEN_I;  break;case R.id.button_gen_ii:genVal=PokePicker.Generations.GEN_II;break;case R.id.button_gen_iii:genVal=PokePicker.Generations.GEN_III;break;case R.id.button_gen_iv:genVal=PokePicker.Generations.GEN_IV;break;case R.id.button_gen_v:genVal=PokePicker.Generations.GEN_V;break;case R.id.button_gen_vi:genVal=PokePicker.Generations.GEN_VI;break;default :genVal=null;Log.e(TAG,"Error retrieving generation button ids.");break;}if (genVal != null) {PokeListFragment pokeListFragment=new PokeListFragment();Bundle bundle=new Bundle();bundle.putParcelable(GEN_FRAG_KEY,genVal);pokeListFragment.setArguments(bundle);if (!GenActivity.isTwoPane()) {getFragmentManager().beginTransaction().replace(R.id.generations_container,pokeListFragment).addToBackStack(null).commit();} else {getFragmentManager().beginTransaction().replace(R.id.poke_list_container,pokeListFragment).commit();}}}  }
class C{  public static float nextUp(final float a){  return nextAfter(a,Float.POSITIVE_INFINITY);}  }
class C{  private int purgeAscending(final int lowIndex,final int highIndex,final RollingFileManager manager){  int suffixLength=0;  final List<FileRenameAction> renames=new ArrayList<FileRenameAction>();  final StringBuilder buf=new StringBuilder();  manager.getPatternProcessor().formatFileName(subst,buf,highIndex);  String highFilename=subst.replace(buf);  if (highFilename.endsWith(EXT_GZIP)) {    suffixLength=EXT_GZIP.length();  } else   if (highFilename.endsWith(EXT_ZIP)) {    suffixLength=EXT_ZIP.length();  }  int maxIndex=0;  for (int i=highIndex; i >= lowIndex; i--) {    File toRename=new File(highFilename);    if (i == highIndex && toRename.exists()) {      maxIndex=highIndex;    } else     if (maxIndex == 0 && toRename.exists()) {      maxIndex=i + 1;      break;    }    boolean isBase=false;    if (suffixLength > 0) {      final File toRenameBase=new File(highFilename.substring(0,highFilename.length() - suffixLength));      if (toRename.exists()) {        if (toRenameBase.exists()) {          LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} base of {}.",toRenameBase,toRename);          toRenameBase.delete();        }      } else {        toRename=toRenameBase;        isBase=true;      }    }    if (toRename.exists()) {      if (i == lowIndex) {        LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} at low index {}: all slots full.",toRename,i);        if (!toRename.delete()) {          return -1;        }        break;      }      buf.setLength(0);      manager.getPatternProcessor().formatFileName(subst,buf,i - 1);      final String lowFilename=subst.replace(buf);      String renameTo=lowFilename;      if (isBase) {        renameTo=lowFilename.substring(0,lowFilename.length() - suffixLength);      }      renames.add(new FileRenameAction(toRename,new File(renameTo),true));      highFilename=lowFilename;    } else {      buf.setLength(0);      manager.getPatternProcessor().formatFileName(subst,buf,i - 1);      highFilename=subst.replace(buf);    }  }  if (maxIndex == 0) {    maxIndex=lowIndex;  }  for (int i=renames.size() - 1; i >= 0; i--) {    final Action action=renames.get(i);    try {      LOGGER.debug("DefaultRolloverStrategy.purgeAscending executing {} of {}: {}",i,renames.size(),action);      if (!action.execute()) {        return -1;      }    } catch (    final Exception ex) {      LOGGER.warn("Exception during purge in RollingFileAppender",ex);      return -1;    }  }  return maxIndex;}  }
class C{  protected int[] createPalette(int size){switch (m_type) {case Constants.NOMINAL:    return ColorLib.getCategoryPalette(size);case Constants.NUMERICAL:case Constants.ORDINAL:default :  return ColorLib.getGrayscalePalette(size);}}  }
class C{  @Override public void serializeWithType(HasDruidName value,JsonGenerator jgen,SerializerProvider provider,TypeSerializer typeSer) throws IOException {  typeSer.writeTypePrefixForScalar(value,jgen);  serialize(value,jgen,provider);  typeSer.writeTypeSuffixForScalar(value,jgen);}  }
class C{  public String[] lookup(String word){  return lookup(word,false);}  }
class C{  public Builder(){}  }
class C{  public PlacesGetCheckinsQuery place(Integer value){  return unsafeParam("place",value);}  }
class C{  public void paint(Graphics g,Transform trans){  final Graphics2D g2d=(Graphics2D)g;  if (color != null)   g2d.setColor(color);  final Point center=trans.w2d(centerX,centerY);  final double lenX=Geometry.length(Geometry.diff(trans.w2d(lengthA,0),trans.w2d(0,0)));  final double lenY=Geometry.length(Geometry.diff(trans.w2d(0,lengthB),trans.w2d(0,0)));  final AffineTransform old=g2d.getTransform();  g2d.rotate(angleInRadians,center.getX(),center.getY());  g2d.drawOval((int)Math.round(center.getX() - lenX),(int)Math.round(center.getY() - lenY),(int)Math.round(2 * lenX),(int)Math.round(2 * lenY));  g2d.setTransform(old);}  }
class C{  private static BigInteger forIndex(int n){  if (n == 0)   return BigInteger.ZERO;  BigInteger val=BigInteger.ONE.shiftLeft(n);  if (n % 2 == 0) {    val=val.subtract(BigInteger.ONE);  } else {    val=val.add(BigInteger.ONE);  }  return val.divide(BigInteger.valueOf(3));}  }
class C{  private boolean startEquipmentMessageHandler(final EquipmentMessageHandler equipmentMessageHandler){  boolean success=true;  IEquipmentConfiguration equipmentConfiguration=equipmentMessageHandler.getEquipmentConfiguration();  try {    equipmentMessageHandler.connectToDataSource();    equipmentMessageHandler.refreshAllDataTags();  } catch (  EqIOException ex) {    log.error("startEquipmentMessageHandler - Could not connect EquipmentUnit to its data source. EquipmentMessageHandler name :" + equipmentConfiguration.getName() + " id :"+ equipmentConfiguration.getId());    String errMsg="EqIOException : code = " + ex.getErrorCode() + " message = "+ ex.getErrorDescription();    log.error(errMsg);    equipmentMessageHandler.getEquipmentMessageSender().confirmEquipmentStateIncorrect(errMsg);    success=false;  }catch (  Exception ex) {    log.error("startEquipmentMessageHandler - Could not connect EquipmentUnit to its data source. EquipmentMessageHandler name :" + equipmentMessageHandler.getEquipmentConfiguration().getName() + " id :"+ equipmentMessageHandler.getEquipmentConfiguration().getId());    String errMsg="Unexpected exception caught whilst connecting to equipment: ";    log.error(errMsg,ex);    equipmentMessageHandler.getEquipmentMessageSender().confirmEquipmentStateIncorrect(errMsg + ex.getMessage());    success=false;  }  return success;}  }
class C{  public void drawChartTransposed(Graphics2D gc){  final SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  colorTable=getChartColors().getHeatMapTable();  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int scaleWidth=30;  int x1=getWidth() - rightMargin - scaleWidth;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Computing z-scores...",x0,y1 + 20);    viewer.getScrollPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    return;  } else   viewer.getScrollPane().setCursor(Cursor.getDefaultCursor());  final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);  final int numberOfClasses=(classNames == null ? 0 : classNames.length);  if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getClassesList().isDoClustering())   y1+=topTreeSpace;  if (sgc == null)   drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);  if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering()) {    x1-=rightTreeSpace;    int height=(int)Math.round((y0 - y1) / (numberOfSeries + 1.0) * numberOfSeries);    int yStart=y0 + ((y1 - y0) - height) / 2;    final Rectangle rect=new Rectangle(x1,yStart,rightTreeSpace,height);    seriesClusteringTree.paint(gc,rect);  }  if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getClassesList().isDoClustering()) {    int width=(int)((x1 - x0) / (numberOfClasses + 1.0) * numberOfClasses);    int xStart=x0 + ((x1 - x0) - width) / 2;    final Rectangle rect=new Rectangle(xStart,y1 - topTreeSpace,width,topTreeSpace);    classesClusteringTree.paint(gc,rect);  }  double xStep=(x1 - x0) / (double)numberOfClasses;  double yStep=(y0 - y1) / (double)numberOfSeries;  double maxValue=getChartData().getRange().get2().doubleValue();  double inverseMaxValueLog=0;  if (scalingType == ChartViewer.ScalingType.LOG && maxValue > 0) {    maxValue=Math.log(maxValue);    if (maxValue != 0)     inverseMaxValueLog=1 / maxValue;  } else   if (scalingType == ChartViewer.ScalingType.SQRT && maxValue > 0) {    maxValue=Math.sqrt(maxValue);  } else   if (scalingType == ChartViewer.ScalingType.PERCENT)   maxValue=100;  if (numberOfClasses > 0 && numberOfSeries > 0) {    int d=0;    for (    String className : classNames) {      double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelectedClass(className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null) {        sgc.setCurrentItem(new String[]{null,className});        drawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle);        sgc.clearCurrentItem();      }      int c=numberOfSeries - 1;      for (      String series : seriesNames) {        Color color;        if (scalingType == ChartViewer.ScalingType.PERCENT) {          double total=getChartData().getTotalForClassIncludingDisabledSeries(className);          double value;          if (total == 0)           value=0; else           value=100 * getChartData().getValueAsDouble(series,className) / total;          color=colorTable.getColor((int)value,(int)maxValue);        } else         if (scalingType == ChartViewer.ScalingType.LOG) {          double value=getChartData().getValueAsDouble(series,className);          color=colorTable.getColorLogScale((int)value,inverseMaxValueLog);        } else         if (scalingType == ChartViewer.ScalingType.SQRT) {          double value=Math.sqrt(getChartData().getValueAsDouble(series,className));          color=colorTable.getColor((int)value,(int)maxValue);        } else         if (scalingType == ChartViewer.ScalingType.ZSCORE) {          double value=Math.max(-zScoreCutoff,Math.min(zScoreCutoff,zScores.get(series,className)));          color=colorTable.getColor((int)(value + zScoreCutoff),(int)(2 * zScoreCutoff));        } else {          double value=getChartData().getValueAsDouble(series,className);          color=colorTable.getColor((int)value,(int)maxValue);        }        gc.setColor(color);        int[] rect=new int[]{(int)Math.round(x0 + d * xStep),(int)Math.round(y0 - (c + 1) * yStep),(int)Math.round(xStep),(int)Math.round(yStep)};        if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});        if (isGapBetweenBars() && rect[2] > 2 && rect[3] > 2) {          gc.fillRect(rect[0] + 1,rect[1] + 1,rect[2] - 2,rect[3] - 2);        } else         gc.fillRect(rect[0],rect[1],rect[2] + 1,rect[3] + 1);        if (sgc != null)         sgc.clearCurrentItem();        boolean isSelected=getChartData().getChartSelection().isSelectedSeries(series) || getChartData().getChartSelection().isSelectedClass(className);        if (isSelected) {          gc.setStroke(HEAVY_STROKE);          gc.setColor(ProgramProperties.SELECTION_COLOR);          gc.drawRect(rect[0],rect[1],rect[2],rect[3]);          gc.setStroke(NORMAL_STROKE);        }        if (showValues || isSelected) {          String aLabel;          if (scalingType == ChartViewer.ScalingType.ZSCORE)           aLabel=String.format("%.2f",zScores.get(series,className)); else           aLabel="" + (int)getChartData().getValueAsDouble(series,className);          valuesList.add(new DrawableValue(aLabel,rect[0] - rect[2] / 2,rect[1] + rect[3] / 2,isSelected));        }        c--;      }      d++;    }  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,true,true);    valuesList.clear();  }}  }
class C{  public synchronized void changeState(StartupState newState){  if (_currentSpaceState == newState)   return;  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,"Changing space [" + _spaceName + "] state from "+ _currentSpaceState+ " to "+ newState);  }  try {    saveState(newState);  } catch (  IOException e) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING," Error on space connect [" + _spaceName + "] state.",e);    }  }  _currentSpaceState=newState;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  public void init$Children(){}  }
class C{  protected Set<D> computeCallFlowFunction(FlowFunction<D> callFlowFunction,D d1,D d2){  return callFlowFunction.computeTargets(d2);}  }
class C{  public Math_Vector mul(Math_Vector other){  this.x*=other.x;  this.y*=other.y;  return this;}  }
class C{  @Override public XSSimpleType createTypeRestriction(String name,String targetNamespace,short finalSet,XSSimpleType base,XSObjectList annotations){  return new XSSimpleTypeDecl((XSSimpleTypeDecl)base,name,targetNamespace,finalSet,false,annotations);}  }
class C{  @Override public int available(){  int available=0;  for (Iterator it=sources.iterator(); it.hasNext(); ) {    available+=((DoubleDataSource)it.next()).available();  }  return available;}  }
class C{  public TtmlConverterCmdLineParams parse(String[] args) throws ParseException {  TtmlConverterCmdLineParams params=new TtmlConverterCmdLineParams();  CommandLineParser parser=new DefaultParser();  CommandLine line;  try {    line=parser.parse(options,args);  } catch (  org.apache.commons.cli.ParseException e) {    throw new ParseException(e);  }  if (line.hasOption(help.getOpt())) {    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp("ttml2stl",options);    return null;  }  if (line.hasOption(out.getOpt())) {    params.setOutputFile(line.getOptionValue(out.getOpt()));  } else {    throw new ParseException("Output file option must be provided.");  }  params.getTtmlOptions().addAll(Stream.of(line.getOptions()).filter(null).map(null).collect(Collectors.toCollection(null)));  if (params.getTtmlOptions().isEmpty()) {    throw new ParseException("At least one input TTML file must be provided.");  }  return params;}  }
class C{  @SuppressWarnings("unchecked") private T[] buildArray(final int length){  return (T[])Array.newInstance(field.getRuntimeClass(),length);}  }
class C{  public WallRestoreCommentQuery restoreComment(UserActor actor,int commentId){  return new WallRestoreCommentQuery(getClient(),actor,commentId);}  }
class C{  public WebElementLocator(WebElement webElement){  this.webElement=webElement;}  }
class C{  public FactoryConfigurationError(java.lang.String msg){  super(msg);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_NPC_CRITICAL(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1260001,value0,num2,value1);}  }
class C{  protected void processAssociationReport(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  int group=serialMessage.getMessagePayloadByte(offset + 1);  int maxAssociations=serialMessage.getMessagePayloadByte(offset + 2);  int following=serialMessage.getMessagePayloadByte(offset + 3);  if (maxAssociations == 0) {    if (updateAssociationsNode == group) {      logger.debug("NODE {}: All association groups acquired.",getNode().getNodeId());      updateAssociationsNode=0;      getController().notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssociationUpdate,getNode().getNodeId(),ZWaveNetworkEvent.State.Success));    }    return;  }  logger.debug("NODE {}: association group {} has max associations {}",getNode().getNodeId(),group,maxAssociations);  if (pendingAssociation == null) {    pendingAssociation=new ZWaveAssociationGroup(group);  }  if (serialMessage.getMessagePayload().length > (offset + 4)) {    logger.debug("NODE {}: association group {} includes the following nodes:",getNode().getNodeId(),group);    int numAssociations=serialMessage.getMessagePayload().length - (offset + 4);    for (int cnt=0; cnt < numAssociations; cnt++) {      int node=serialMessage.getMessagePayloadByte(offset + 4 + cnt);      logger.debug("Node {}",node);      pendingAssociation.addAssociation(node);    }  }  if (following == 0) {    getNode().getAssociationGroup(pendingAssociation.getIndex()).setAssociations(pendingAssociation.getAssociations());    ZWaveAssociationEvent zEvent=new ZWaveAssociationEvent(getNode().getNodeId(),pendingAssociation);    pendingAssociation=null;    getController().notifyEventListeners(zEvent);  }  if (following == 0 && group == updateAssociationsNode) {    if (updateAssociationsNode < maxGroups) {      updateAssociationsNode++;      SerialMessage outputMessage=getAssociationMessage(updateAssociationsNode);      if (outputMessage != null) {        getController().sendData(outputMessage);      }    } else {      logger.debug("NODE {}: All association groups acquired.",getNode().getNodeId());      updateAssociationsNode=0;      getController().notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssociationUpdate,getNode().getNodeId(),ZWaveNetworkEvent.State.Success));    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FRIENDLY_MOVE_COMBATAREA_IDARENA(String value0){  return new SM_SYSTEM_MESSAGE(1400964,value0);}  }
class C{  @Override public Decimal64 log10(){  return new Decimal64(FastMath.log10(value));}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathOr(String path,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return path(path,or(leftPredicate,rightPredicate));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHostile_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200762,skillcaster,skillname);}  }
class C{  @Override public boolean add(T e){  int index=getInsertIndex(e);  super.add(index,e);  return true;}  }
class C{  @deprecated public final void reset(char[] chars){  int length=0;  if (chars != null) {    length=chars.length;  }  reset(chars,0,length);}  }
class C{  public boolean isEndVisible(int row){  return getBoolean(row,VisualItem.ENDVISIBLE);}  }
class C{  public void startEntity(String name,String publicId,String systemId,String encoding) throws XNIException {}  }
class C{  public DefaultHibernateSpaceSynchronizationEndpointConfigurer deleteById(boolean deleteById){  this.deleteById=deleteById;  return this;}  }
class C{  public void exception(Throwable t){  fail();  addLogEntry(new ExceptionEntry(t));  addLogEntry(browserLogEntryCollector.getBrowserLogEntries());}  }
class C{  @JsonIgnore public boolean isDeleted(){  return state.equals(Experiment.State.DELETED);}  }
class C{  public static BufferedImage createErrorImage(String error){  String str="Error creating map image: " + error;  BufferedImage image=new BufferedImage(500,25,BufferedImage.TYPE_INT_RGB);  Graphics2D graphics=image.createGraphics();  graphics.setColor(Color.WHITE);  graphics.fill(new Rectangle(500,25));  graphics.setColor(Color.RED);  graphics.drawString(str,1,12);  return image;}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  public static RequestQueue newRequestQueue(Context context,String type,String assetFile) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException {  SSLContext sslContext=AndroidSelfSigned.newSSLContext(context,type,assetFile);  HurlStack hurlStack=new HurlStack(null,sslContext.getSocketFactory());  return Volley.newRequestQueue(context,hurlStack);}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  private static List<String> determineMimeTypesByFilename(String filename){  String fileExtension=getExtension(filename);  List<String> mimeTypeList=FILE_EXTENSION_TO_MIMETYPE_MAPPING.get(fileExtension);  if (mimeTypeList != null && mimeTypeList.size() > 0) {    return mimeTypeList;  } else {    String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);    if (mimeType != null) {      return Collections.singletonList(mimeType);    } else {      return new ArrayList<String>();    }  }}  }
class C{  private String printXFormat(long x){  String sx=null;  if (x == Long.MIN_VALUE)   sx="8000000000000000"; else   if (x < 0) {    String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,16);switch (t.length()) {case 1:      sx="800000000000000" + t;    break;case 2:  sx="80000000000000" + t;break;case 3:sx="8000000000000" + t;break;case 4:sx="800000000000" + t;break;case 5:sx="80000000000" + t;break;case 6:sx="8000000000" + t;break;case 7:sx="800000000" + t;break;case 8:sx="80000000" + t;break;case 9:sx="8000000" + t;break;case 10:sx="800000" + t;break;case 11:sx="80000" + t;break;case 12:sx="8000" + t;break;case 13:sx="800" + t;break;case 14:sx="80" + t;break;case 15:sx="8" + t;break;case 16:switch (t.charAt(0)) {case '1':sx="9" + t.substring(1,16);break;case '2':sx="a" + t.substring(1,16);break;case '3':sx="b" + t.substring(1,16);break;case '4':sx="c" + t.substring(1,16);break;case '5':sx="d" + t.substring(1,16);break;case '6':sx="e" + t.substring(1,16);break;case '7':sx="f" + t.substring(1,16);break;}break;}} else sx=Long.toString(x,16);return printXFormat(sx);}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  public int writeClassDef(ClassDef classDef){  int off=data.position();  writeInt(classDef.typeIndex);  writeInt(classDef.accessFlags);  writeInt(classDef.supertypeIndex);  writeInt(classDef.interfacesOffset);  writeInt(classDef.sourceFileIndex);  writeInt(classDef.annotationsOffset);  writeInt(classDef.classDataOffset);  writeInt(classDef.staticValuesOffset);  return off;}  }
class C{  @Override public void deleteObject(String sObjectName,String sObjectCategory){  int index;  super.deleteObject(sObjectName,sObjectCategory);  ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);  index=nlist.indexOf(sObjectName);  nlist.remove(index);  super.saveObject(nlist,sObjectCategory,ListCategoryName);}  }
class C{  public short adjustOrPutValue(final K key,final short adjust_amount,final short put_amount){  int index=insertionIndex(key);  final boolean isNewMapping;  final short newValue;  if (index < 0) {    index=-index - 1;    newValue=(_values[index]+=adjust_amount);    isNewMapping=false;  } else {    newValue=(_values[index]=put_amount);    isNewMapping=true;  }  K oldKey=(K)_set[index];  _set[index]=key;  if (isNewMapping) {    postInsertHook(oldKey == FREE);  }  return newValue;}  }
class C{  public void dump(PrintWriter output,int pad,String title,boolean justRelations){  output.println(" ============ " + title + " ========== ");  if (!justRelations) {    voice.dump(output,pad + 4,"Voice");    features.dump(output,pad + 4,"Features");  }  relations.dump(output,pad + 4,"Relations");  output.flush();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WildcardExtendsType fullCopy(){  WildcardExtendsType tree=(WildcardExtendsType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  static void orderedShowViews(final List<View> views,long animationDuration,int animationDelay){  if (views != null) {    for (int viewIndex=0; viewIndex < views.size(); viewIndex++) {      final View childView=views.get(viewIndex);      childView.setVisibility(View.VISIBLE);      final ScaleAnimation scaleAnimation=new ScaleAnimation(0,childView.getScaleX(),0,childView.getScaleY(),Animation.RELATIVE_TO_SELF,.5f,Animation.RELATIVE_TO_SELF,.5f);      scaleAnimation.setInterpolator(new DecelerateInterpolator());      scaleAnimation.setDuration(animationDuration);      scaleAnimation.setStartOffset(viewIndex * animationDelay);      childView.startAnimation(scaleAnimation);    }  }}  }
class C{  public MessagesDeleteQuery messageIds(List<Integer> value){  return unsafeParam("message_ids",value);}  }
class C{  public WallPinQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public CartPaymentInfo addPayment(String id){  return this.addPaymentAmount(id,null,false);}  }
class C{  @Override public void clearDataTags(){  dataTagTable.clear();}  }
class C{  @Deprecated @Override public void monitor(HostChangeMonitor<ServiceInstance> monitor) throws MonitorException {  throw new UnsupportedOperationException("NameServerSet does not support monitor");}  }
class C{  public static Bucket constantRangeBucket(Bucket bkt,ConstantRange cRange){  ConstantRange newRange=bkt.valueRange().intersect(cRange);  if (!newRange.isValid())   return null;  double newDistVals=bkt.distinctValues(newRange);  if (Double.compare(newDistVals,1.0) < 0)   return null;  double newFreq=bkt.frequency() * newDistVals / bkt.distinctValues();  if (bkt.valuePercentiles() == null)   return new Bucket(newRange,newFreq,newDistVals);  Percentiles newPcts=bkt.valuePercentiles().percentiles(newRange);  return new Bucket(newRange,newFreq,newDistVals,newPcts);}  }
class C{  public void cancel(){  mDna.eliminate();}  }
class C{  private void synchronizeFolder(OCFile folder){  if (mFailedResultsCounter > MAX_FAILED_RESULTS || isFinisher(mLastFailedResult))   return;  RefreshFolderOperation synchFolderOp=new RefreshFolderOperation(folder,mCurrentSyncTime,true,mIsShareSupported,false,getStorageManager(),getAccount(),getContext());  RemoteOperationResult result=synchFolderOp.execute(getClient());  sendLocalBroadcast(EVENT_FULL_SYNC_FOLDER_CONTENTS_SYNCED,folder.getRemotePath(),result);  if (result.isSuccess() || result.getCode() == ResultCode.SYNC_CONFLICT) {    if (result.getCode() == ResultCode.SYNC_CONFLICT) {      mConflictsFound+=synchFolderOp.getConflictsFound();      mFailsInFavouritesFound+=synchFolderOp.getFailsInFavouritesFound();    }    if (synchFolderOp.getForgottenLocalFiles().size() > 0) {      mForgottenLocalFiles.putAll(synchFolderOp.getForgottenLocalFiles());    }    if (result.isSuccess()) {      List<OCFile> children=synchFolderOp.getChildren();      syncChildren(children);    }  } else   if (result.getCode() != ResultCode.FILE_NOT_FOUND) {    if (RemoteOperationResult.ResultCode.UNAUTHORIZED.equals(result.getCode())) {      mSyncResult.stats.numAuthExceptions++;    } else     if (result.getException() instanceof DavException) {      mSyncResult.stats.numParseExceptions++;    } else     if (result.getException() instanceof IOException) {      mSyncResult.stats.numIoExceptions++;    }    mFailedResultsCounter++;    mLastFailedResult=result;  }}  }
class C{  public static void draw2DCoordinateSpace(Canvas canvas){  if (!isDrawAid)   return;  initPaint();  init2DPoint();  canvas.save();  CanvasUtils.drawLine(XHead_2D,XTail_2D,canvas,mPaint);  CanvasUtils.drawLine(XHead_2D,XCap1_2D,canvas,mPaint);  CanvasUtils.drawLine(XHead_2D,XCap2_2D,canvas,mPaint);  CanvasUtils.drawLine(YHead_2D,YTail_2D,canvas,mPaint);  CanvasUtils.drawLine(YHead_2D,YCap1_2D,canvas,mPaint);  CanvasUtils.drawLine(YHead_2D,YCap2_2D,canvas,mPaint);  canvas.restore();}  }
class C{  public AccountListItem(){  mType=TYPE_ACTION_ADD;}  }
class C{  public static DOMImplementationRegistry newInstance() throws ClassNotFoundException, InstantiationException, IllegalAccessException, ClassCastException {  Vector sources=new Vector();  ClassLoader classLoader=getClassLoader();  String p=getSystemProperty(PROPERTY);  if (p == null || p.length() == 0) {    p=getServiceValue(classLoader);  }  if (p == null) {    p=DEFAULT_DOM_IMPLEMENTATION_SOURCE;  }  if (p != null) {    StringTokenizer st=new StringTokenizer(p);    while (st.hasMoreTokens()) {      String sourceName=st.nextToken();      Class sourceClass=null;      if (classLoader != null) {        sourceClass=classLoader.loadClass(sourceName);      } else {        sourceClass=Class.forName(sourceName);      }      DOMImplementationSource source=(DOMImplementationSource)sourceClass.newInstance();      sources.addElement(source);    }  }  return new DOMImplementationRegistry(sources);}  }
class C{  public static double sign(final double x){  if (Double.isNaN(x)) {    return Double.NaN;  }  return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;}  }
class C{  public AndPredicate(){}  }
class C{  public static MutableContextSet fromSet(ContextSet contextSet){  MutableContextSet set=new MutableContextSet();  set.addAll(contextSet.toSet());  return set;}  }
class C{  public Record next(){  return null;}  }
class C{  public void onRemoval(K key,R resource){}  }
class C{  private void addFieldToHostStructure(Structure hostStructure,String fieldName,Field.FieldType fieldtype,Field.DataType fieldDataType,int order){  try {    Field field=FieldFactory.getFieldByName("Host",fieldName);    if (null == field.getVelocityVarName() || field.getVelocityVarName().isEmpty()) {      Field newField=new Field(fieldName,fieldtype,fieldDataType,hostStructure,false,false,true,order,false,false,true);      Logger.info(this,"*Added the field '" + fieldName + "' to the Host structure");      FieldFactory.saveField(newField);    }  } catch (  DotHibernateException e) {    throw new RuntimeException(e.toString(),e);  }}  }
class C{  public FileAlterationObserver(String directoryName,FileFilter fileFilter){  this(new File(directoryName),fileFilter);}  }
class C{  public synchronized boolean isStopped(){  return this.stopped;}  }
class C{  public boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    int position=lookForSelectablePosition(0,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_TOP;      invokeOnItemScrollListener();      moved=true;    }  } else   if (direction == FOCUS_DOWN) {    int position=lookForSelectablePosition(mItemCount - 1,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_BOTTOM;      invokeOnItemScrollListener();    }    moved=true;  }  if (moved && !awakenScrollBars()) {    awakenScrollBars();    invalidate();  }  return moved;}  }
class C{  public MarketSearchQueryWithExtended searchExtended(UserActor actor,int ownerId){  return new MarketSearchQueryWithExtended(getClient(),actor,ownerId);}  }
class C{  public DestTemplateParameterContext addParameter(DestContextParameters destParam,String paramValue){  return addParameter(destParam.getName(),paramValue);}  }
class C{  private T nextAfter(final T t){  final int sign=forward ? 1 : -1;  final double ulp=FastMath.ulp(t.getReal());  return t.add(sign * ulp);}  }
class C{  private static Simulation fromXml(InputSource source) throws ParserConfigurationException, SAXException, IOException {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser parser=factory.newSAXParser();  XmlReader reader=new XmlReader();  parser.parse(source,reader);  Capacity capacity=new Capacity(reader.bodies.size(),reader.joints.size(),10);  World world=new World(capacity);  List<SandboxRay> rays=new ArrayList<SandboxRay>();  Camera camera=new Camera();  world.setSettings(reader.settings);  if (reader.broadphase != null)   world.setBroadphaseDetector(reader.broadphase);  if (reader.narrowphase != null)   world.setNarrowphaseDetector(reader.narrowphase);  if (reader.manifoldSolver != null)   world.setManifoldSolver(reader.manifoldSolver);  if (reader.timeOfImpact != null)   world.setTimeOfImpactDetector(reader.timeOfImpact);  if (reader.gravity != null)   world.setGravity(reader.gravity);  if (reader.bounds != null)   world.setBounds(reader.bounds);  if (reader.worldName != null) {    world.setUserData(reader.worldName);  } else {    world.setUserData(Messages.getString("world.name.default"));  }  for (  SandboxBody body : reader.bodies) {    world.addBody(body);  }  for (  Joint joint : reader.joints) {    world.addJoint(joint);  }  for (  SandboxRay ray : reader.rays) {    rays.add(ray);  }  if (reader.camera != null) {    camera.setScale(reader.camera.getScale());    camera.setTranslation(reader.camera.getTranslation());  }  return new Simulation(camera,rays,world);}  }
class C{  public static ByteBuf deflate(ByteBuf buffer) throws DataFormatException {  ByteBuf dest=PooledByteBufAllocator.DEFAULT.directBuffer();  try {    deflate(buffer,dest);  } catch (  DataFormatException e) {    dest.release();    throw e;  }  return dest;}  }
class C{  public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){  tableLockMap.remove(absoluteTableIdentifier);  tableSegmentMap.remove(absoluteTableIdentifier);}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.processingInstruction(target,data,augs);  }}  }
class C{  public FTPProxyConnector(String proxyHost,int proxyPort,String proxyUser,String proxyPass){  super(true);  this.proxyHost=proxyHost;  this.proxyPort=proxyPort;  this.proxyUser=proxyUser;  this.proxyPass=proxyPass;}  }
class C{  public CPUAccountingMode cpuAccountingMode(){  return cpuAccountingMode;}  }
class C{  @TargetApi(Build.VERSION_CODES.CUPCAKE) public static void image(BitmapListener listener,String type){  BitmapTask task=new BitmapTask();  task.setListener(listener);  task.execute(imageUrl(type));}  }
class C{  private static double[] column(int column,double[]... nums) throws IllegalArgumentException {  double[] ret=new double[nums.length];  for (int i=0; i < nums.length; i++) {    double[] curr=nums[i];    ret[i]=curr[column];  }  return ret;}  }
class C{  public void testSortByVirtualFieldReversed() throws Exception {  deleteAllDocs();  send("addDocument","{fields: {id: 0, boost: 1.0}}");  send("addDocument","{fields: {id: 1, boost: 2.0}}");  send("search","{query: MatchAllDocsQuery, sort: {fields: [{field: logboost, reverse: true}]}, retrieveFields: [id]}");  assertEquals(2,getInt("totalHits"));  assertEquals(1,getInt("hits[0].fields.id"));  assertEquals(0,getInt("hits[1].fields.id"));  assertEquals(.6931f,getFloat("hits[0].fields.sortFields.logboost"),.0001f);  assertEquals(0.0f,getFloat("hits[1].fields.sortFields.logboost"),.0001f);}  }
class C{  public static <T>T insteadThrowRuntime(RuntimeException exception){  throw exception;}  }
class C{  public static void checkFlightPath(List<Coordinate> path,int width,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){  String url=statusPathUrl;  Map<String,String> params=AirMapStatus.getAsParams(takeOffPoint,types,ignoredTypes,weather,date);  params.put("geometry","LINESTRING(" + makeGeoString(path) + ")");  AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));}  }
class C{  private void populateAvailableDataStores(){  DataAccessFactory fac;  logger.debug("Available data store factories:");  Iterator<DataStoreFactorySpi> iterator=DataStoreFinder.getAvailableDataStores();  while (iterator.hasNext()) {    fac=(DataAccessFactory)iterator.next();    logger.debug("\t" + fac.getDisplayName());    availableDataStoreList.add(fac.getDisplayName());  }}  }
class C{  private T doRemove(int index){  keys[index]=0;  states[index]=REMOVED;  final T previous=values[index];  values[index]=missingEntries;  --size;  ++count;  return previous;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public static boolean isWrite(int mod){  return (mod & NOTIFY_WRITE) != 0;}  }
class C{  @Inject public EventLogImpl(@Named("eventlog.threadpoolsize.core") int threadPoolSizeCore,@Named("eventlog.threadpoolsize.max") int threadPoolSizeMax){  listeners=new ConcurrentHashMap<>();  eventDeque=new ConcurrentLinkedDeque<>();  eventPostThreadPoolExecutor=new ThreadPoolExecutor(threadPoolSizeCore,threadPoolSizeMax,0L,MILLISECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  private boolean isSpdyProxyEnabledForUrl(String url){  if (DataReductionProxySettings.getInstance().isDataReductionProxyEnabled() && url != null && !url.toLowerCase(Locale.US).startsWith("https://") && !isIncognito()) {    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_ENTER_GIVEUP(String value0){  return new SM_SYSTEM_MESSAGE(1400184,value0);}  }
class C{  public String message(){  return message;}  }
class C{  public void showLoadingUI(){  removeCallbacks(mDelayedShow);  removeCallbacks(mDelayedHide);  setVisibility(GONE);  postDelayed(mDelayedShow,LOADING_ANIMATION_DELAY_MS);}  }
class C{  private Map<String,List<ChartObject>> calculateGroupedDiffs(Map<String,List<ChartObject>> initial,Sort sorting){  if (initial.keySet().isEmpty())   return new HashMap<>();  if (sorting.toString().contains(Sort.Direction.ASC.name())) {    ArrayList<String> keys=new ArrayList<>(initial.keySet());    Integer previous=Integer.valueOf(initial.get(keys.get(keys.size() - 1)).get(0).getValues().get(getTotalFieldName()));    for (int i=keys.size() - 1; i >= 0; i--) {      Integer current=Integer.valueOf(initial.get(keys.get(i)).get(0).getValues().get(getTotalFieldName()));      initial.get(keys.get(i)).get(0).getValues().put(DELTA,String.valueOf(current - previous));      previous=current;    }  } else {    Integer previous=Integer.valueOf(initial.get(initial.keySet().iterator().next()).get(0).getValues().get(getTotalFieldName()));    for (    Map.Entry<String,List<ChartObject>> entry : initial.entrySet()) {      Integer current=Integer.valueOf(entry.getValue().get(0).getValues().get(getTotalFieldName()));      entry.getValue().get(0).getValues().put(DELTA,String.valueOf(current - previous));      previous=current;    }  }  return initial;}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext,secretKeys,"UTF-8");}  }
class C{  private void init(View root){  swipeStack=(SwipeStack)root.findViewById(R.id.swipeStack);  qrCodeImage=(ImageView)root.findViewById(R.id.qr_code);  apiName=(TextView)root.findViewById(R.id.apiName);  apiImage=(ImageView)root.findViewById(R.id.apiStatus);  root=(LinearLayout)root.findViewById(R.id.root);  progressDialog=new ProgressDialog(getContext());  connectApi=new ConnectAPI(getActivity());}  }
class C{  public S1Interval intersection(final S1Interval y){  if (y.isEmpty()) {    return empty();  }  if (fastContains(y.lo())) {    if (fastContains(y.hi())) {      if (y.getLength() < getLength()) {        return y;      }      return this;    }    return new S1Interval(y.lo(),hi(),true);  }  if (fastContains(y.hi())) {    return new S1Interval(lo(),y.hi(),true);  }  if (y.fastContains(lo())) {    return this;  }  return empty();}  }
class C{  @Override public boolean parse(File file,Model m,String viewname) throws IOException {  InputStream in=null;  OutputStream out=null;  try {    in=new FileInputStream(file);    File f1=new File(Model.GIIWA_HOME + "/html/" + viewname);    if (!f1.exists()) {      f1.getParentFile().mkdirs();      FileOutputStream out1=new FileOutputStream(f1);      IOUtil.copy(in,out1);    }    in=new FileInputStream(file);    out=m.getOutputStream();    m.setContentType(Model.getMimeType(file.getName()));    String date=m.getHeader("If-Modified-Since");    String date2=Language.getLanguage().format(file.lastModified(),"yyyy-MM-dd HH:mm:ss z");    if (date != null && date.equals(date2)) {      m.resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);      return true;    }    m.setHeader("Last-Modified",date2);    m.setHeader("Content-Length",Long.toString(file.length()));    m.setHeader("Accept-Ranges","bytes");    String range=m.getHeader("RANGE");    long start=0;    long end=file.length();    if (range != null) {      String[] ss=range.split("=| |-");      if (ss.length > 1) {        start=X.toLong(ss[1],0);      }      if (ss.length > 2) {        end=X.toLong(ss[2],0);      }      m.setHeader("Content-Range","bytes " + start + "-"+ end+ "/"+ file.length());    }    IOUtil.copy(in,out,start,end,false);    out.flush();    return true;  }  finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {        log.error(e);      }    }  }}  }
class C{  public static ToolbarTapTarget forToolbarNavigationIcon(Toolbar toolbar,CharSequence title){  return forToolbarNavigationIcon(toolbar,title,null);}  }
class C{  @Override public void accept(@NonNull final Object reference){synchronized (this) {    this.reference=reference;  }  updateDispatcher.update();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_INSTANCE_ALREADY_REGISTERED_WITH_DIFFICULTY(String worldname0,String value1){  return new SM_SYSTEM_MESSAGE(1401053,worldname0,value1);}  }
class C{  public boolean haveSelfRezItem(){  return (getSelfRezStone() != null);}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  protected AbstractUnivariateSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);}  }
class C{  public boolean isDateType(){  return valueType.isDate();}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);switch (requestCode) {case REQ_CODE_SPEECH_INPUT:{      if (resultCode == RESULT_OK && null != data) {        ArrayList<String> result=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);        sendMessage(result.get(0));      }      break;    }}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FPHeal_TO_ME(int num0){  return new SM_SYSTEM_MESSAGE(1201197,num0);}  }
class C{  public static int readSwappedInteger(byte[] data,int offset){  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16)+ ((data[offset + 3] & 0xff) << 24));}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  private void installSocksSelector(Properties settings,ProtocolDispatchSelector ps) throws NumberFormatException {  String proxyHost=settings.getProperty("org.gnome.system.proxy.socks host",null);  int proxyPort=Integer.parseInt(settings.getProperty("org.gnome.system.proxy.socks port","0").trim());  if (proxyHost != null && proxyHost.length() > 0 && proxyPort > 0) {    Logger.log(getClass(),LogLevel.TRACE,"Gnome socks proxy is {0}:{1}",proxyHost,proxyPort);    ps.setSelector("socks",new FixedProxySelector(proxyHost.trim(),proxyPort));  }}  }
class C{  public void run(){  processMessageSender.sendAlive();  LOGGER.debug("Alive sent.");}  }
class C{  public ActionList(){  super(0);}  }
class C{  public Expression asExpression(Value bool){  throw new RuntimeException("Unsupported operation.");}  }
class C{  static void recordStartedBy(String packageName,Intent intent){  if (intent == null) {    recordStartedBy(DocumentMetricIds.STARTED_BY_UNKNOWN);    return;  }  int intentSource=DocumentMetricIds.STARTED_BY_UNKNOWN;  IntentHandler.ExternalAppId appId=IntentHandler.determineExternalIntentSource(packageName,intent);  if (intent.hasExtra(IntentHandler.EXTRA_STARTED_BY)) {    intentSource=IntentUtils.safeGetIntExtra(intent,IntentHandler.EXTRA_STARTED_BY,DocumentMetricIds.STARTED_BY_UNKNOWN);  } else   if (IntentUtils.safeGetBooleanExtra(intent,ShortcutHelper.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB,false)) {    intentSource=DocumentMetricIds.STARTED_BY_LAUNCHER;  } else   if (IntentUtils.safeGetBooleanExtra(intent,IntentHandler.EXTRA_APPEND_TASK,false)) {    intentSource=DocumentMetricIds.STARTED_BY_SEARCH_RESULT_PAGE;  } else   if (IntentUtils.safeGetBooleanExtra(intent,IntentHandler.EXTRA_PRESERVE_TASK,false)) {    intentSource=DocumentMetricIds.STARTED_BY_SEARCH_SUGGESTION_EXTERNAL;  } else   if (appId == IntentHandler.ExternalAppId.GMAIL) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_GMAIL;  } else   if (appId == IntentHandler.ExternalAppId.FACEBOOK) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_FACEBOOK;  } else   if (appId == IntentHandler.ExternalAppId.PLUS) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_PLUS;  } else   if (appId == IntentHandler.ExternalAppId.TWITTER) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_TWITTER;  } else   if (appId == IntentHandler.ExternalAppId.CHROME) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_CHROME;  } else   if (appId == IntentHandler.ExternalAppId.HANGOUTS) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_HANGOUTS;  } else   if (appId == IntentHandler.ExternalAppId.MESSENGER) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_MESSENGER;  } else   if (appId == IntentHandler.ExternalAppId.NEWS) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_NEWS;  } else   if (appId == IntentHandler.ExternalAppId.LINE) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_LINE;  } else   if (appId == IntentHandler.ExternalAppId.WHATSAPP) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_WHATSAPP;  } else   if (appId == IntentHandler.ExternalAppId.GSA) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_GSA;  } else   if (appId == IntentHandler.ExternalAppId.OTHER) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_OTHER;  }  if (intentSource == DocumentMetricIds.STARTED_BY_UNKNOWN) {    android.util.Log.d("DocumentUma","Unknown source detected");  }  if (intentSource >= DocumentMetricIds.STARTED_BY_EXTERNAL_APP_GMAIL && intentSource < DocumentMetricIds.STARTED_BY_CONTEXTUAL_SEARCH) {    RecordHistogram.recordEnumeratedHistogram("MobileIntent.PageLoadDueToExternalApp",appId.ordinal(),IntentHandler.ExternalAppId.INDEX_BOUNDARY.ordinal());  }  recordStartedBy(intentSource);}  }
class C{  @Override public Scan open(){  Scan s1=p1.open();  Scan s2=p2.open();  return new ProductScan(s1,s2);}  }
class C{  public void lockUserInput(){  isLocked=true;  getTabbedPane().setEnabled(false);  if (commandManager != null)   commandManager.setEnableCritical(false);  setCursor(new Cursor(Cursor.WAIT_CURSOR));}  }
class C{  public Fail(){  this("");}  }
class C{  @Override public List<Writable> next(){  List<String> next=dataIter.next();  invokeListeners(next);  List<Writable> ret=new ArrayList<>();  for (  String s : next)   ret.add(new Text(s));  return ret;}  }
class C{  @Override protected void reset() throws XNIException {  if (fValidationManager != null)   fValidationManager.reset();  configurePipeline();  super.reset();}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  private DateHelper(){}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="orgUnits/{id}/activities") @ResponseBody public String saveActivityReport2_8(@PathVariable int id,@RequestBody ActivityValue activityValue) throws NotAllowedException {  activityReportingService.saveActivityReport(getUnit(id),activityValue,0);  return ACTIVITY_REPORT_UPLOADED;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REPAIR_ABYSS_DOOR(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400025,value0,value1);}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public void pasteClipboard(){  final Clipboard clipboard=Clipboard.getSystemClipboard();  if (clipboard.getContent(fmt) != null) {    spreadsheetView.pasteClipboard();  } else {    String contents=clipboard.getString().trim().replaceAll("\r\n","\n").replaceAll("\r","\n");    String[] lines=contents.split("\n");    paste(lines);  }}  }
class C{  public static float computeDiscardAlpha(float amount,float range){  if (Math.abs(amount) < 1.0f)   return 1.0f;  float t=amount / range;  t=MathUtils.clamp(t,-1.0f,1.0f);  return 1.f - Math.abs(t);}  }
class C{  public NewsfeedDeleteBanQuery groupIds(List<Integer> value){  return unsafeParam("group_ids",value);}  }
class C{  @Override public List<DataQueryParams> groupByPeriodType(DataQueryParams params){  List<DataQueryParams> queries=new ArrayList<>();  if (params.isSkipPartitioning()) {    queries.add(params);  } else   if (!params.getPeriods().isEmpty()) {    ListMap<String,DimensionalItemObject> periodTypePeriodMap=PartitionUtils.getPeriodTypePeriodMap(params.getPeriods());    for (    String periodType : periodTypePeriodMap.keySet()) {      DataQueryParams query=DataQueryParams.newBuilder(params).addOrSetDimensionOptions(PERIOD_DIM_ID,DimensionType.PERIOD,periodType.toLowerCase(),periodTypePeriodMap.get(periodType)).withPeriodType(periodType).build();      queries.add(query);    }  } else   if (!params.getFilterPeriods().isEmpty()) {    DimensionalObject filter=params.getFilter(PERIOD_DIM_ID);    ListMap<String,DimensionalItemObject> periodTypePeriodMap=PartitionUtils.getPeriodTypePeriodMap(filter.getItems());    DataQueryParams.Builder query=DataQueryParams.newBuilder(params).removeFilter(PERIOD_DIM_ID).withPeriodType(periodTypePeriodMap.keySet().iterator().next());    for (    String periodType : periodTypePeriodMap.keySet()) {      query.addFilter(new BaseDimensionalObject(filter.getDimension(),filter.getDimensionType(),periodType.toLowerCase(),filter.getDisplayName(),periodTypePeriodMap.get(periodType)));    }    queries.add(query.build());  } else {    queries.add(DataQueryParams.newBuilder(params).build());    return queries;  }  if (queries.size() > 1) {    log.debug("Split on period type: " + queries.size());  }  return queries;}  }
class C{  public double cond(){  return new SingularValueDecomposition(this).cond();}  }
class C{  public MathException(Throwable rootCause){  super(rootCause);  this.pattern=getMessage();  this.arguments=new Object[0];}  }
class C{  public ChallengeTask(int ownerId,ChallengeTaskTemplate template){  this.taskId=template.getId();  this.ownerId=ownerId;  Map<Integer,ChallengeQuest> quests=new HashMap<Integer,ChallengeQuest>();  for (  ChallengeQuestTemplate qt : template.getQuests()) {    ChallengeQuest quest=new ChallengeQuest(qt,0);    quest.setPersistentState(PersistentState.NEW);    quests.put(qt.getId(),quest);  }  this.quests=quests;  this.completeTime=new Timestamp(1000);  this.template=template;}  }
class C{  private static int perturb(final int hash){  return hash & 0x7fffffff;}  }
class C{  private Collection<Var> migrateAsRelation(String entityTypeParent,String columnType,String childType){  String roleParentName=namer.roleParentName(columnType);  String roleChildName=namer.roleChildName(columnType);  Var entityTypeChild=var().id(childType).isa("entity-type");  Var roleTypeParent=var().id(roleParentName).isa("role-type");  Var roleTypeChild=var().id(roleChildName).isa("role-type");  Var relationType=var().id(namer.relationName(columnType)).isa("relation-type").hasRole(roleParentName).hasRole(roleChildName);  Var entityTypeParentPlayingRole=var().id(entityTypeParent).playsRole(roleParentName);  entityTypeChild.playsRole(roleChildName);  return Lists.newArrayList(entityTypeChild,roleTypeParent,roleTypeChild,relationType,entityTypeParentPlayingRole);}  }
class C{  public List<Product> readProduct(EntityManager em,String productXml,List<Supplier> suppliers){  List<Product> products=new ArrayList<Product>();  int count=0;  Supplier sup=null;  try {    XMLInputFactory inputFactory=XMLInputFactory.newInstance();    in=getResourceAsInputStream(productXml);    eventReader=inputFactory.createXMLEventReader(in);    Product product=null;    while (eventReader.hasNext()) {      XMLEvent event=eventReader.nextEvent();      if (event.isStartElement()) {        StartElement startElement=event.asStartElement();        if (startElement.getName().getLocalPart() == (PRODUCT)) {          product=new Product();        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_ID)) {          event=eventReader.nextEvent();          product.setProductId(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_CATEGORY_ID)) {          event=eventReader.nextEvent();          String category=getEvent(event);          product.setCategory(category);          product.setCategoryName(category);          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_MEASURE_UNIT)) {          event=eventReader.nextEvent();          product.setQuantityUnit(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_WEIGHT_MEASURE)) {          event=eventReader.nextEvent();          product.setWeight(BigDecimal.valueOf(Double.parseDouble(getEvent(event))));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_WEIGHT_UNIT)) {          event=eventReader.nextEvent();          product.setWeightUnit(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_DESCRIPTION)) {          desFlg=1;          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_DESCRIPTION_LANGUAGE) && desFlg == 1) {          event=eventReader.nextEvent();          String language=event.asCharacters().getData();          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_DESCRIPTION_TEXT) && desFlg == 1) {          event=eventReader.nextEvent();          String text=event.asCharacters().getData();          product.setShortDescription(text);          product.setLongDescription(text);          desFlg=0;          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_NAME)) {          prodNameFlg=1;          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_NAME_LANGUAGE) && prodNameFlg == 1) {          event=eventReader.nextEvent();          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_NAME_NAME) && prodNameFlg == 1) {          event=eventReader.nextEvent();          product.setName(getEvent(event));          prodNameFlg=0;          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_PIC)) {          productPicFlg=1;          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_PIC_URL) && productPicFlg == 1) {          event=eventReader.nextEvent();          String picUrl=getEvent(event);          if (picUrl == null) {            continue;          }          product.setPictureUrl(new File(picUrl).getName());          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_PRICE)) {          event=eventReader.nextEvent();          product.setPrice(BigDecimal.valueOf(Double.parseDouble(getEvent(event))));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_WIDTH)) {          event=eventReader.nextEvent();          product.setDimensionWidth(BigDecimal.valueOf(Double.parseDouble(getEvent(event))));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_DEPTH)) {          event=eventReader.nextEvent();          product.setDimensionDepth(BigDecimal.valueOf(Double.parseDouble(getEvent(event))));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_HEIGHT)) {          event=eventReader.nextEvent();          product.setDimensionHeight(BigDecimal.valueOf(Double.parseDouble(getEvent(event))));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_UNIT)) {          event=eventReader.nextEvent();          product.setDimensionUnit(getEvent(event));          continue;        }      }      if (event.isEndElement()) {        EndElement endElement=event.asEndElement();        if (endElement.getName().getLocalPart() == (PRODUCT)) {          if (!(suppliers == null)) {            product.setSupplierId(suppliers.get(count).getSupplierId());            sup=em.find(Supplier.class,suppliers.get(count).getSupplierId());            product.setSupplier(sup);            count++;            if (count == suppliers.size()) {              count=0;            }          }          em.persist(product);          products.add(product);          desFlg=0;          prodNameFlg=0;          productPicFlg=0;        }      }    }  } catch (  Exception e) {    logger.error("Exception occured",e);    status=false;  } finally {    try {      in.close();      eventReader.close();    } catch (    IOException e) {      logger.error("IO Exception occured",e);      status=false;    }catch (    XMLStreamException e) {      logger.error("XMLStream exception occured",e);      status=false;    }  }  return products;}  }
class C{  private List<int[]> prepareExpectedData(){  List<int[]> indexList=new ArrayList<>(2);  int[] sortIndex={0,3,2,4,1};  int[] sortIndexInverted={0,2,4,1,2};  indexList.add(0,sortIndex);  indexList.add(1,sortIndexInverted);  return indexList;}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public ShowNextTime(){  super(new BorderLayout());  setOpaque(false);  button=new JCheckBox(BundleSupport.getLabel("ShowOnStartup"));  button.setSelected(WelcomeOptions.getDefault().isShowOnStartup());  button.setOpaque(false);  BundleSupport.setAccessibilityProperties(button,"ShowOnStartup");  add(button,BorderLayout.CENTER);  button.addActionListener(this);}  }
class C{  private void render(GL2 gl){  World world=this.simulation.getWorld();  List<SandboxRay> rays=this.simulation.getRays();  Dimension size=this.canvasSize;  Vector2 offset=this.simulation.getCamera().getTranslation();  double scale=this.simulation.getCamera().getScale();  gl.glPushMatrix();  gl.glScaled(scale,scale,scale);  gl.glTranslated(offset.x,offset.y,0.0);  if (Preferences.isBoundsEnabled()) {    gl.glColor4fv(Preferences.getBoundsColor(),0);    RenderUtilities.drawBounds(gl,world.getBounds());  }  int bSize=world.getBodyCount();  for (int i=0; i < bSize; i++) {    SandboxBody body=(SandboxBody)world.getBody(i);    if (body == this.selectBodyAction.getObject())     continue;    if (body == this.editBodyAction.getObject())     continue;    this.renderBody(gl,body);  }  if (Preferences.isBodyAABBEnabled()) {    for (int i=0; i < bSize; i++) {      SandboxBody body=(SandboxBody)world.getBody(i);      if (body == this.selectBodyAction.getObject())       continue;      if (body == this.editBodyAction.getObject())       continue;      this.renderAABB(gl,body);    }  }  int jSize=world.getJointCount();  for (int i=0; i < jSize; i++) {    Joint joint=world.getJoint(i);    if (joint == this.selectedBodyJoint)     continue;    RenderUtilities.drawJoint(gl,joint,world.getStep().getInverseDeltaTime());  }  if (this.selectBodyAction.isActive()) {    this.renderSelectedBody(gl,this.selectBodyAction.getObject());  }  if (this.editBodyAction.isActive()) {    this.renderEditingBody(gl,this.editBodyAction.getObject());  }  if (this.selectedBodyJoint != null) {    RenderUtilities.drawMouseJoint(gl,this.selectedBodyJoint,this.simulation.getWorld().getStep().getInverseDeltaTime());  }  if (Preferences.isContactPairEnabled() || Preferences.isContactImpulseEnabled() || Preferences.isContactPointEnabled()|| Preferences.isFrictionImpulseEnabled()) {    ContactCounter cc=this.simulation.getContactCounter();    List<ContactPoint> contacts=cc.getContacts();    int cSize=contacts.size();    for (int i=0; i < cSize; i++) {      ContactPoint cp=contacts.get(i);      Vector2 c=cp.getPoint();      if (Preferences.isContactPairEnabled()) {        gl.glColor4fv(Preferences.getContactPairColor(),0);        Vector2 p1=cp.getBody1().getTransform().getTransformed(cp.getFixture1().getShape().getCenter());        Vector2 p2=cp.getBody2().getTransform().getTransformed(cp.getFixture2().getShape().getCenter());        RenderUtilities.drawLineSegment(gl,p1,p2,false);      }      if (Preferences.isContactPointEnabled()) {        gl.glColor4fv(Preferences.getContactPointColor(),0);        RenderUtilities.fillRectangleFromCenter(gl,c.x,c.y,0.05,0.05);      }      if (cp instanceof SolvedContactPoint) {        SolvedContactPoint scp=(SolvedContactPoint)cp;        Vector2 n=scp.getNormal();        Vector2 t=n.cross(1.0);        double j=scp.getNormalImpulse();        double jt=scp.getTangentialImpulse();        if (Preferences.isContactImpulseEnabled()) {          gl.glColor4fv(Preferences.getContactImpulseColor(),0);          RenderUtilities.drawLineSegment(gl,c.x,c.y,c.x + n.x * j,c.y + n.y * j,false);        }        if (Preferences.isFrictionImpulseEnabled()) {          gl.glColor4fv(Preferences.getFrictionImpulseColor(),0);          RenderUtilities.drawLineSegment(gl,c.x,c.y,c.x + t.x * jt,c.y + t.y * jt,false);        }      }    }  }  List<RaycastResult> results=new ArrayList<RaycastResult>();  for (int i=0; i < rays.size(); i++) {    SandboxRay ray=rays.get(i);    Vector2 s=ray.getStart();    Vector2 d=ray.getDirectionVector();    double x=size.getWidth() / scale * 0.5 - (s.x + offset.x);    double y=size.getHeight() / scale * 0.5 - (s.y + offset.y);    double ml=Math.sqrt(x * x + y * y);    double l=ray.length > 0.0 ? ray.length : ml;    gl.glColor4f(1.0f,0.0f,0.0f,0.8f);    gl.glBegin(GL.GL_LINES);    gl.glVertex2d(s.x,s.y);    gl.glVertex2d(s.x + d.x * l,s.y + d.y * l);    gl.glEnd();    if (world.raycast(ray,ray.length,ray.sensors,ray.all,results)) {      int rSize=results.size();      gl.glColor4f(0.0f,1.0f,0.0f,1.0f);      for (int j=0; j < rSize; j++) {        RaycastResult result=results.get(j);        Raycast raycast=result.getRaycast();        Vector2 point=raycast.getPoint();        Vector2 normal=raycast.getNormal();        RenderUtilities.fillRectangleFromCenter(gl,point.x,point.y,0.02,0.02);        gl.glBegin(GL.GL_LINES);        gl.glVertex2d(point.x,point.y);        gl.glVertex2d(point.x + normal.x,point.y + normal.y);        gl.glEnd();      }    }  }  if (this.simulation instanceof CompiledSimulation) {    CompiledSimulation cs=(CompiledSimulation)this.simulation;    cs.render(gl);  }  gl.glPopMatrix();  gl.glPushMatrix();  gl.glLoadIdentity();  if (Preferences.isOriginLabeled()) {    double ox=offset.x * scale;    double oy=offset.y * scale;    this.textRenderer.beginRendering(size.width,size.height);    this.textRenderer.setColor(0.0f,0.0f,0.0f,0.8f);    this.textRenderer.draw(ORIGIN_LABEL,(int)Math.floor(ox) + size.width / 2 + 3,(int)Math.floor(oy) + size.height / 2 - 12);    this.textRenderer.endRendering();    gl.glColor4f(0.0f,0.0f,0.0f,0.8f);    RenderUtilities.fillRectangleFromCenter(gl,ox,oy,3,3);  }  boolean bodyLabels=Preferences.isBodyLabeled();  boolean fixtureLabels=Preferences.isFixtureLabeled();  if ((bodyLabels || fixtureLabels) && !this.editBodyAction.isActive()) {    this.textRenderer.beginRendering(size.width,size.height);    this.textRenderer.setColor(0.0f,0.0f,0.0f,0.8f);    bSize=world.getBodyCount();    for (int i=0; i < bSize; i++) {      SandboxBody body=(SandboxBody)world.getBody(i);      Vector2 c=body.getWorldCenter();      int x, y;      if (bodyLabels) {        x=(int)Math.floor((c.x + offset.x) * scale) + size.width / 2 + 3;        y=(int)Math.floor((c.y + offset.y) * scale) + size.height / 2 - 12;        this.textRenderer.draw(body.getName(),x,y);        this.textRenderer.draw(RenderUtilities.formatVector2(c),x,y - 16);      }      if (fixtureLabels) {        Transform tx=body.getTransform();        int fSize=body.getFixtureCount();        for (int j=0; j < fSize; j++) {          BodyFixture bf=body.getFixture(j);          Vector2 lc=bf.getShape().getCenter();          Vector2 wc=tx.getTransformed(lc);          x=(int)Math.floor((wc.x + offset.x) * scale) + size.width / 2 + 3;          y=(int)Math.floor((wc.y + offset.y) * scale) + size.height / 2 - 12;          this.textRenderer.draw((String)bf.getUserData(),x,y);          this.textRenderer.draw(RenderUtilities.formatVector2(wc),x,y - 16);        }      }    }    this.textRenderer.endRendering();  }  if (Preferences.isScaleEnabled()) {    gl.glPushMatrix();    gl.glLoadIdentity();    gl.glTranslated(-size.getWidth() * 0.5,-size.getHeight() * 0.5,0.0);    final int x=5;    final int y=18;    final int lw=3;    final int w=100;    final int h=15;    final int th=7;    float olw=RenderUtilities.setLineWidth(gl,lw);    final int o=(lw - 1) / 2;    double d=w / scale;    gl.glColor4f(0.0f,0.0f,0.0f,1.0f);    gl.glBegin(GL.GL_LINES);    gl.glVertex2i(x + o,y - h - o + th);    gl.glVertex2i(x + o,y);    gl.glVertex2i(x + o,y - o);    gl.glVertex2i(x + w - o,y - o);    gl.glVertex2i(x + w - o,y);    gl.glVertex2i(x + w - o,y - h - o + th);    gl.glEnd();    RenderUtilities.setLineWidth(gl,olw);    gl.glPopMatrix();    this.textRenderer.beginRendering(size.width,size.height);    this.textRenderer.setColor(0.0f,0.0f,0.0f,1.0f);    if (scale < 1.0) {      this.textRenderer.draw(MessageFormat.format(SCALE_CONVERSION_FRACTION,scale),x + (2 * o) + 8,y + 4);    } else {      this.textRenderer.draw(MessageFormat.format(SCALE_CONVERSION_WHOLE,scale),x + (2 * o) + 8,y + 4);    }    this.textRenderer.draw(MessageFormat.format(SCALE_LENGTH,d),x + (2 * o) + 8,y - (2 * o) - 12);    this.textRenderer.endRendering();  }  gl.glPopMatrix();}  }
class C{  public static JsonArray array(long... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  long value : values) {    array.add(value);  }  return array;}  }
class C{  public static Rot genc(Zmat A,int ii1,int ii2,int jj){  A.dirty=true;  int i1=ii1 - A.basex;  int i2=ii2 - A.basex;  int j=jj - A.basex;  Rot P=Rot.genc(A.re[i1][j],A.im[i1][j],A.re[i2][j],A.im[i2][j]);  A.re[i1][j]=P.zr;  A.im[i1][j]=P.zi;  A.re[i2][j]=0;  A.im[i2][j]=0;  return P;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public boolean load() throws Exception {  if (modsDirectory != null) {    searchDirectory();  }  if (searchClassPath) {    searchClassPath();  }  sort();  ModInfo oml=new OMLModInfo();  modList.add(0,oml);  idMap.put(oml.getModID(),oml);  if (checkDependencies() && duplicates.isEmpty()) {    for (    ModInfo mod : modList) {      for (      String exclusion : mod.getTransformerExclusions()) {        Launch.classLoader.addTransformerExclusion(exclusion);      }      for (      String transformer : mod.getTransformers()) {        Launch.classLoader.registerTransformer(transformer);      }    }    return true;  } else {    if (OMLStrippableTransformer.getSide() == Side.CLIENT) {      List<String> missingDeps=new ArrayList<>();      for (      Entry<String,Version> e : this.missingDeps.entrySet()) {        if (e.getValue().getMajor() == 0 && e.getValue().getMinor() == 0 && e.getValue().getPatch() == 0)         missingDeps.add(e.getKey()); else         missingDeps.add(e.getKey() + " v" + e.getValue()+ " or higher");      }      List<String> outdatedDeps=new ArrayList<>();      for (      Entry<ModInfo,Version> e : this.outdatedDeps.entrySet()) {        outdatedDeps.add(e.getKey().getName() + " v" + e.getKey().getVersion()+ " (requires v"+ e.getValue()+ " or higher)");      }      List<String> duplicates=new ArrayList<>();      for (      String modid : this.duplicates.keySet()) {        StringBuilder b=new StringBuilder();        b.append(modid).append(": ");        for (        ModInfo mod : this.duplicates.get(modid)) {          b.append(mod.getModFile().getName()).append(", ");        }        duplicates.add(b.substring(0,b.length() - 2));      }      InternalUtils.openErrorGui(missingDeps,outdatedDeps,duplicates);    } else {      throw new RuntimeException("Errors during load - see log for more information");    }    return false;  }}  }
class C{  public void updateLocations(Iterator iIter){  if (ContainerList != null)   ContainerList.clear();  ContainerList=new ArrayList();  while (iIter.hasNext())   ContainerList.add((Location)iIter.next());  addBehaviour(new MigrateBehaviour());}  }
class C{  static void checkParameterIsNotNull(final String parameterName,final Object parameterValue){  if (parameterValue == null) {    throw new IllegalArgumentException(parameterName + " cannot be null.");  }}  }
class C{  private int computeConstrainedBackoffCoefficient(int numFailedAttempts){  int n=Math.min(MAX_EXPONENT,numFailedAttempts);  int twoToThePowerOfN=1 << n;  return sRandom.nextInt(twoToThePowerOfN) + 1;}  }
class C{  private void pauseModelListNotifications(){  ((ModelList)models).pauseNotifications();}  }
class C{  private void notifyDownloadStart(DownloadFileOperation download){  mLastPercent=0;  mNotificationBuilder=NotificationUtils.newNotificationBuilder(this);  mNotificationBuilder.setSmallIcon(R.drawable.notification_icon).setTicker(getString(R.string.downloader_download_in_progress_ticker)).setContentTitle(getString(R.string.downloader_download_in_progress_ticker)).setOngoing(true).setProgress(100,0,download.getSize() < 0).setContentText(String.format(getString(R.string.downloader_download_in_progress_content),0,new File(download.getSavePath()).getName()));  Intent showDetailsIntent=null;  if (PreviewImageFragment.canBePreviewed(download.getFile())) {    showDetailsIntent=new Intent(this,PreviewImageActivity.class);  } else {    showDetailsIntent=new Intent(this,FileDisplayActivity.class);  }  showDetailsIntent.putExtra(FileActivity.EXTRA_FILE,download.getFile());  showDetailsIntent.putExtra(FileActivity.EXTRA_ACCOUNT,download.getAccount());  showDetailsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showDetailsIntent,0));  mNotificationManager.notify(R.string.downloader_download_in_progress_ticker,mNotificationBuilder.build());}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public double normality(String s){  DistributionWordDocument dDoc=new DistributionWordDocument(NeighbourhoodWindow,SourceNGramSize);  dDoc.setDataString(s,SourceNGramSize,true);  EdgeCachedLocator eclLocator=new EdgeCachedLocator(20);  double dRes=0.0;  int iCnt=0;  try {    Iterator iIter=dDoc.Graph.getEdgeSet().iterator();    while (iIter.hasNext()) {      Edge eCur=(Edge)iIter.next();      Distribution dCur=dDoc.Graph.getEdgeDistro(eCur);      Edge e=eclLocator.locateEdgeInGraph(Graph,eCur.getVertexA(),eCur.getVertexB());      if (e != null) {        Distribution d=(Graph.getEdgeDistro(e) == null) ? new Distribution() : Graph.getEdgeDistro(e);        if (OnCompare != null)         dRes+=OnCompare.compareDistributions(dCur,d); else         dRes+=dCur.similarityTo(d);      }      iCnt++;    }  } catch (  Exception exc) {    exc.printStackTrace();    return 0.0;  }  return dRes / (iCnt == 0 ? 1 : iCnt);}  }
class C{  public void init$Children(){  children=new ASTNode[3];}  }
class C{  public static ArrayList<Integer> convertStringArrayToIntegerArray(List<String> arrayList){  ArrayList<Integer> integers=new ArrayList<>();  for (  String str : arrayList) {    integers.add(Integer.valueOf(str));  }  return integers;}  }
class C{  @Override public void write(String str){synchronized (lock) {    try {      appendLocked(str,0,str.length());    } catch (    IOException e) {    }  }}  }
class C{  public static void writeNullablePbsEntryPacket(PbsOutputStream output,PbsEntryPacket pbsEntry){  if (pbsEntry != null) {    output.writeBoolean(true);    PbsEntryFormatter.writePbsEntryPacket(output,pbsEntry);  } else   output.writeBoolean(false);}  }
class C{  public DocsEditQuery tags(List<String> value){  return unsafeParam("tags",value);}  }
class C{  String internalsprintf(double s) throws IllegalArgumentException {  String s2="";switch (conversionCharacter) {case 'f':    s2=printFFormat(s);  break;case 'E':case 'e':s2=printEFormat(s);break;case 'G':case 'g':s2=printGFormat(s);break;default :throw new IllegalArgumentException("Cannot " + "format a double with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public PulsarAdmin(URL serviceUrl,Authentication auth) throws PulsarClientException {  this(serviceUrl,new ClientConfiguration(){    private static final long serialVersionUID=1L;{      setAuthentication(auth);    }  });}  }
class C{  public static Map<String,Object> updateUserLoginId(DispatchContext ctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  List<String> errorMessageList=new LinkedList<String>();  Locale locale=(Locale)context.get("locale");  String userLoginId=(String)context.get("userLoginId");  String errMsg=null;  if ((userLoginId != null) && ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {    userLoginId=userLoginId.toLowerCase();  }  String partyId=loggedInUserLogin.getString("partyId");  String password=loggedInUserLogin.getString("currentPassword");  String passwordHint=loggedInUserLogin.getString("passwordHint");  if (UtilValidate.isNotEmpty(partyId)) {    if (!loggedInUserLogin.isEmpty()) {      if (!partyId.equals(loggedInUserLogin.getString("partyId"))) {        errMsg=UtilProperties.getMessage(resource,"loginservices.party_with_party_id_exists_not_permission_create_user_login",locale);        errorMessageList.add(errMsg);      }    } else {      errMsg=UtilProperties.getMessage(resource,"loginservices.must_logged_in_have_permission_create_user_login_exists",locale);      errorMessageList.add(errMsg);    }  }  GenericValue newUserLogin=null;  boolean doCreate=true;  try {    newUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_read_failure",messageMap,locale);    errorMessageList.add(errMsg);  }  if (newUserLogin != null) {    if (!newUserLogin.get("partyId").equals(partyId)) {      Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_with_ID_exists",messageMap,locale);      errorMessageList.add(errMsg);    } else {      doCreate=false;    }  } else {    newUserLogin=delegator.makeValue("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));  }  newUserLogin.set("passwordHint",passwordHint);  newUserLogin.set("partyId",partyId);  newUserLogin.set("currentPassword",password);  newUserLogin.set("enabled","Y");  newUserLogin.set("disabledDateTime",null);  if (errorMessageList.size() > 0) {    return ServiceUtil.returnError(errorMessageList);  }  try {    if (doCreate) {      newUserLogin.create();    } else {      newUserLogin.store();    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  loggedInUserLogin.set("enabled","N");  loggedInUserLogin.set("disabledDateTime",null);  try {    loggedInUserLogin.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_disable_old_login_user_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  result.put("newUserLogin",newUserLogin);  return result;}  }
class C{  public int writeTypeList(TypeList typeList){  int off=data.position();  short[] types=typeList.types;  writeInt(types.length);  for (  short type : types) {    writeShort(type);  }  return off;}  }
class C{  public static float calculateBottom(float left,float top,float right,float targetAspectRatio){  final float width=right - left;  final float bottom=(width / targetAspectRatio) + top;  return bottom;}  }
class C{  public UpdateLeasesSpaceOperationRequest(){}  }
class C{  public static void warn(@NonNull String tag,String message,Object... args){  android.util.Log.w(tag,String.format(Locale.ENGLISH,message,args));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Provoker_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200397,skillname);}  }
class C{  public OrFileFilter(final List<IOFileFilter> fileFilters){  if (fileFilters == null) {    this.fileFilters=new ArrayList<IOFileFilter>();  } else {    this.fileFilters=new ArrayList<IOFileFilter>(fileFilters);  }}  }
class C{  public RabbitMqServer listeningToEventsWith(ProcessListener listener){  this.listener=listener;  return this;}  }
class C{  @Override public void cleanup(){  MinecraftForge.EVENT_BUS.unregister(this);  FMLCommonHandler.instance().bus().unregister(this);  structureHasBeenCompleted=false;  MalmoMod.MalmoMessageHandler.deregisterForMessage(this,MalmoMessageType.SERVER_MISSIONOVER);}  }
class C{  public BitSet isScanRequired(byte[][] blkMaxVal,byte[][] blkMinVal){  BitSet bitSet=new BitSet(1);  bitSet.flip(0,1);  return bitSet;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] buffer=new char[n];  int pos=0;  while (pos < n) {    buffer[pos]=next();    if (end()) {      throw syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(buffer);}  }
class C{  private void storeDownloadInfo(String type,Set<String> downloadInfo){  SharedPreferences.Editor editor=mSharedPrefs.edit();  if (downloadInfo.isEmpty()) {    editor.remove(type);  } else {    editor.putStringSet(type,downloadInfo);  }  editor.apply();}  }
class C{  public IsLikeExtended(){  super(null);}  }
class C{  private void loadProcHeader(ByteBuffer bb) throws BufferUnderflowException, UTFDataFormatException {  procHeader=StreamUtils.readUTF(bb);  assert procHeader != null;}  }
class C{  @Override public boolean checkMostRecentRollup(Experiment experiment,Parameters parameters,Date to) throws RepositoryException {  try {    Timestamp toTime=new Timestamp(to.getTime());    final String SQL_SELECT_ID="SELECT day FROM experiment_rollup " + "WHERE experiment_id=? AND context=? ORDER BY day";    List result=transaction.select(SQL_SELECT_ID,experiment.getID(),parameters.getContext().getContext());    if (result.isEmpty()) {      return true;    } else {      Map row=(Map)result.get(0);      Date maxDay=(Date)row.get("day");      Timestamp maxStamp=new Timestamp(maxDay.getTime());      return maxStamp.after(toTime);    }  } catch (  Exception e) {    throw new RepositoryException("error reading counts from MySQL rollups",e);  }}  }
class C{  public static void checkNotNull(Object o) throws NullArgumentException {  if (o == null) {    throw new NullArgumentException(LocalizedCoreFormats.NULL_NOT_ALLOWED);  }}  }
class C{  public static void forkResourceFile(@NotNull DesignSurface surface,@Nullable String newFolder,boolean open){  Configuration configuration=surface.getConfiguration();  if (configuration == null) {    assert false;    return;  }  final VirtualFile file=configuration.getFile();  if (file == null) {    assert false;    return;  }  Module module=configuration.getModule();  if (module == null) {    assert false;    return;  }  XmlFile xmlFile=(XmlFile)configuration.getPsiFile();  ResourceFolderType folderType=ResourceHelper.getFolderType(xmlFile);  if (folderType == null) {    folderType=ResourceFolderType.LAYOUT;  }  forkResourceFile(module.getProject(),folderType,file,xmlFile,newFolder,configuration,open);}  }
class C{  public static float cos2(float fValue){  return sin2(fValue + HALF_PI);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set flipV=" + (!isSelected()) + ";");}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("show what=all;");}  }
class C{  public boolean total_context_counts(){  return soot.PhaseOptions.getBoolean(options,"total-context-counts");}  }
class C{  public RequestHandle head(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params)),null,responseHandler,context);}  }
class C{  @Deprecated @RequestMapping(value="/{type}/_introduce_type",method=RequestMethod.GET,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> introduceType(@PathVariable String type,@RequestParam(value=SPACEID_PARAM,defaultValue="id") String spaceID){  if (logger.isLoggable(Level.FINE))   logger.fine("introducing type: " + type);  Map<String,Object> result=new Hashtable<String,Object>();  try {    GigaSpace gigaSpace=ControllerUtils.xapCache.get();    SpaceTypeDescriptor typeDescriptor=gigaSpace.getTypeManager().getTypeDescriptor(type);    if (typeDescriptor != null) {      throw new TypeAlreadyRegisteredException(type);    }    SpaceTypeDescriptor spaceTypeDescriptor=new SpaceTypeDescriptorBuilder(type).idProperty(spaceID).routingProperty(spaceID).supportsDynamicProperties(true).create();    gigaSpace.getTypeManager().registerTypeDescriptor(spaceTypeDescriptor);    result.put("status","success");  } catch (  IllegalStateException e) {    throw new RestException(e.getMessage());  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_BLOCK_A_TO_ME(String value0){  return new SM_SYSTEM_MESSAGE(1201092,value0);}  }
class C{  public GlobalLexica(InputStream in){  this(XMLUtils.getDocumentElement(in));}  }
class C{  public UnrevealBuilder withTranslateDuration(final int translateDuration){  this.mTranslateDuration=translateDuration;  return this;}  }
class C{  public static TagConfigImpl createTagConfiguration(final TagWithAlarms tagWithAlarms,final Collection<Process> tagProcesses){  Tag tag=tagWithAlarms.getTag();  TagConfigImpl tagConfig=null;  if (tag != null) {    tagConfig=new TagConfigImpl(tag.getId());    tagConfig.setAlarmIds(new ArrayList<Long>(tag.getAlarmIds()));    Boolean controlTag=Boolean.FALSE;    if (tag instanceof ControlTag) {      controlTag=Boolean.TRUE;    }    tagConfig.setControlTag(controlTag);    if (tag instanceof DataTag || tag instanceof ControlTag) {      DataTag dataTag=(DataTag)tag;      if (dataTag.getMinValue() != null)       tagConfig.setMinValue(dataTag.getMinValue().toString());      if (dataTag.getMaxValue() != null)       tagConfig.setMaxValue(dataTag.getMaxValue().toString());      if (dataTag.getAddress() != null) {        tagConfig.setValueDeadbandType(dataTag.getAddress().getValueDeadbandType());        tagConfig.setValueDeadband(dataTag.getAddress().getValueDeadband());        tagConfig.setTimeDeadband(dataTag.getAddress().getTimeDeadband());        tagConfig.setGuaranteedDelivery(dataTag.getAddress().isGuaranteedDelivery());        tagConfig.setPriority(dataTag.getAddress().getPriority());        tagConfig.setAddressParameters(dataTag.getAddress().getAddressParameters());        if (dataTag.getAddress().getHardwareAddress() != null) {          tagConfig.setHardwareAddress(dataTag.getAddress().getHardwareAddress().toConfigXML());        }      }    }    if (tag instanceof RuleTag) {      RuleTag ruleTag=(RuleTag)tag;      tagConfig.setRuleExpressionStr(ruleTag.getRuleText());    }    if (!tag.getRuleIds().isEmpty()) {      tagConfig.addRuleIds(tag.getRuleIds());    }    if (tag.getDipAddress() != null) {      tagConfig.addPublication(Publisher.DIP,tag.getDipAddress());    }    if (tag.getJapcAddress() != null) {      tagConfig.addPublication(Publisher.JAPC,tag.getJapcAddress());    }    if (tag.isLogged()) {      tagConfig.setLogged(Boolean.TRUE);    } else {      tagConfig.setLogged(Boolean.FALSE);    }    ArrayList<String> processNames=new ArrayList<String>();    for (    Process process : tagProcesses) {      processNames.add(process.getName());    }    tagConfig.setProcessNames(processNames);  }  return tagConfig;}  }
class C{  public static final double logX(double dNumber,double dBase){  return Math.log(dNumber) / Math.log(dBase);}  }
class C{  @Override public void onResume(){  super.onResume();  startCameraSource();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OutofSight_ME_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200455,skilltarget,skillcaster,skillname);}  }
class C{  public DefaultHibernateSpaceDataSourceConfigurer useScrollableResultSet(boolean useScrollableResultSet){  this.useScrollableResultSet=useScrollableResultSet;  return this;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  ParametersDialog viewer=(ParametersDialog)getParent();  viewer.setVisible(false);}  }
class C{  private JCTree.JCExpression injectRecordValue(JCTree.JCExpression expr,int anchor,int recordingDepth){  if (limitDepthOnJava8 && System.getProperty("java.version").startsWith("1.8") && recordingDepth > MAX_JAVA8_DEPTH) {    return expr;  }  return treeMaker.Apply(List.<JCTree.JCExpression>nil(),qualifiedName(RECORDER_RUNTIME,"recordValue"),List.of(expr,treeMaker.Literal(anchor)));}  }
class C{  private void doOperation(Account account,String remotePath){  mCurrentSyncOperation=mPendingOperations.get(account.name,remotePath);  if (mCurrentSyncOperation != null) {    RemoteOperationResult result=null;    try {      if (mCurrentAccount == null || !mCurrentAccount.equals(account)) {        mCurrentAccount=account;        mStorageManager=new FileDataStorageManager(account,mService.getContentResolver());      }      OwnCloudAccount ocAccount=new OwnCloudAccount(account,mService);      mOwnCloudClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,mService);      result=mCurrentSyncOperation.execute(mOwnCloudClient,mStorageManager);    } catch (    AccountsException e) {      Log_OC.e(TAG,"Error while trying to get authorization",e);    }catch (    IOException e) {      Log_OC.e(TAG,"Error while trying to get authorization",e);    } finally {      mPendingOperations.removePayload(account.name,remotePath);      mService.dispatchResultToOperationListeners(mCurrentSyncOperation,result);      sendBroadcastFinishedSyncFolder(account,remotePath,result.isSuccess());    }  }}  }
class C{  public static boolean blockVariantMatches(IBlockState bs,List<Variation> allowedVariants){  for (  IProperty prop : (java.util.Set<IProperty>)bs.getProperties().keySet()) {    if (prop.getName().equals("variant") && prop.getValueClass().isEnum()) {      Object current=bs.getValue(prop);      if (current != null) {        for (        Variation var : allowedVariants) {          if (var.getValue().equalsIgnoreCase(current.toString()))           return true;        }      }    }  }  return false;}  }
class C{  public GraphSimilarity(){  this.ValueSimilarity=0.0;  this.ContainmentSimilarity=0.0;  this.SizeSimilarity=0.0;}  }
class C{  public RetriableException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static void closeQuietly(AutoCloseable closeable){  try {    if (closeable != null) {      closeable.close();    }  } catch (  Exception e) {    logger.error("An error occurred closing statement.",e);  }}  }
class C{  private TSDataScanDir(Path dir,List<MetaData> meta_data){  dir_=requireNonNull(dir);  meta_data_=unmodifiableList(requireNonNull(meta_data));}  }
class C{  public static String ice_staticId(){  return __ids[1];}  }
class C{  public void outputTraceMessage(MethodContext methodContext,String... messages){  String lineSep=System.getProperty("line.separator");  StringBuilder buf=new StringBuilder(getSimpleMethod().getFileName());  buf.append(", Line ").append(getLineNumber()).append(" <").append(getTagName()).append("> element: ");  for (int i=0; i < messages.length; i++) {    buf.append(messages[i]);    if (i < messages.length - 1 && messages.length > 1) {      buf.append(lineSep);    }  }  Debug.log(methodContext.getTraceLogLevel(),null,buf.toString(),module);}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public static boolean isValidVector(Vector3f vector){  if (vector == null) {    return false;  }  if (Float.isNaN(vector.x) || Float.isNaN(vector.y) || Float.isNaN(vector.z)) {    return false;  }  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y) || Float.isInfinite(vector.z)) {    return false;  }  return true;}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (object instanceof StatisticalSummaryValues == false) {    return false;  }  StatisticalSummary other=(StatisticalSummary)object;  return Precision.equalsIncludingNaN(other.getMax(),getMax()) && Precision.equalsIncludingNaN(other.getMean(),getMean()) && Precision.equalsIncludingNaN(other.getMin(),getMin())&& Precision.equalsIncludingNaN(other.getN(),getN())&& Precision.equalsIncludingNaN(other.getSum(),getSum())&& Precision.equalsIncludingNaN(other.getVariance(),getVariance());}  }
class C{  public AndExpr newAndExpr(Value op1,Value op2){  return new JAndExpr(op1,op2);}  }
class C{  public TaggedOutputStream(OutputStream proxy){  super(proxy);}  }
class C{  protected boolean newUpdatableStorageConnection(String group_name,String remote_filename) throws IOException, MyException {  if (this.storageServer != null) {    return false;  } else {    TrackerClient tracker=new TrackerClient();    this.storageServer=tracker.getUpdateStorage(this.trackerServer,group_name,remote_filename);    if (this.storageServer == null) {      throw new MyException("getStoreStorage fail, errno code: " + tracker.getErrorCode());    }    return true;  }}  }
class C{  public SingularValueDecomposition svd(){  return new SingularValueDecomposition(this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200311,skillname);}  }
class C{  public List<GenericValue> makeAllAdjustments(){  List<GenericValue> allAdjs=FastList.newInstance();  for (  GenericValue orderAdjustment : this.getAdjustments()) {    allAdjs.add(orderAdjustment);    if ("SHIPPING_CHARGES".equals(orderAdjustment.get("orderAdjustmentTypeId"))) {      Iterator<GenericValue> fsppas=this.freeShippingProductPromoActions.iterator();      while (fsppas.hasNext()) {      }    }  }  for (  ShoppingCartItem item : cartLines) {    Collection<GenericValue> adjs=item.getAdjustments();    if (adjs != null) {      for (      GenericValue orderAdjustment : adjs) {        orderAdjustment.set("orderItemSeqId",item.getOrderItemSeqId());        allAdjs.add(orderAdjustment);        if ("SHIPPING_CHARGES".equals(orderAdjustment.get("orderAdjustmentTypeId"))) {          Iterator<GenericValue> fsppas=this.freeShippingProductPromoActions.iterator();          while (fsppas.hasNext()) {          }        }      }    }  }  return allAdjs;}  }
class C{  public boolean copyToScan(UpdateScan s){  if (!this.next())   return false;  s.insert();  for (  String fldName : sch.fields()) {    s.setVal(fldName,this.getVal(fldName));  }  return true;}  }
class C{  private void unknownPacket(State state,int id){  log.warn(String.format("Unknown packet recived from Chat Server: 0x%02X state=%s",id,state.toString()));}  }
class C{  private static String msecToDateString(FieldDef fd,long value){  assert fd.valueType == FieldDef.FieldValueType.DATE_TIME;  Calendar calendar=new GregorianCalendar(TimeZone.getTimeZone("UTC"),Locale.ROOT);  calendar.setLenient(false);  SimpleDateFormat dateTimeFormat=new SimpleDateFormat(fd.dateTimeFormat,Locale.ROOT);  dateTimeFormat.setCalendar(calendar);  Date date=new Date(value);  String result=dateTimeFormat.format(date);  System.out.println("MSEC TO DATE: value=" + value + " s="+ result);  return result;}  }
class C{  public void addOrUpdateRepository(ISVNRepositoryLocation repository) throws SVNException {  SVNRepositoryLocation existingLocation=(SVNRepositoryLocation)repositories.get(repository.getLocation());  if (existingLocation != null) {    SVNProviderPlugin.getPlugin().getRepositoryResourcesManager().repositoryModified(repository);    ((SVNRepositoryLocation)repository).updateCache();  } else {    addToRepositoriesCache(repository);    ((SVNRepositoryLocation)repository).updateCache();  }  saveState();}  }
class C{  public static void main(String[] args){  BowlingBall simulation=new BowlingBall();  simulation.run();}  }
class C{  void remove(DynamicAABBTreeNode node){  if (this.root == null)   return;  if (node == this.root) {    this.root=null;    return;  }  DynamicAABBTreeNode parent=node.parent;  DynamicAABBTreeNode grandparent=parent.parent;  DynamicAABBTreeNode other;  if (parent.left == node) {    other=parent.right;  } else {    other=parent.left;  }  if (grandparent != null) {    if (grandparent.left == parent) {      grandparent.left=other;    } else {      grandparent.right=other;    }    other.parent=grandparent;    DynamicAABBTreeNode n=grandparent;    while (n != null) {      n=balance(n);      DynamicAABBTreeNode left=n.left;      DynamicAABBTreeNode right=n.right;      n.height=1 + Math.max(left.height,right.height);      n.aabb=left.aabb.getUnion(right.aabb);      n=n.parent;    }  } else {    this.root=other;    other.parent=null;  }}  }
class C{  public FieldConfigBoundingBox(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public String buildErrorMessageForLogs(StringBuilder sb,RequestInfoForLogging request,Collection<ApiError> contributingErrors,Integer httpStatusCode,Throwable cause,List<Pair<String,String>> extraDetailsForLogging){  String errorUid=UUID.randomUUID().toString();  String traceId=extractDistributedTraceId(request);  String requestUri=request.getRequestUri();  String requestMethod=request.getRequestHttpMethod();  String queryString=request.getQueryString();  String headersString=parseRequestHeadersToString(request);  String contributingErrorsString=concatenateErrorCollection(contributingErrors);  sb.append("error_uid=").append(errorUid).append(", dtrace_id=").append(traceId).append(", exception_class=").append(cause.getClass().getName()).append(", returned_http_status_code=").append(httpStatusCode).append(", contributing_errors=\"").append(contributingErrorsString).append("\", request_uri=\"").append(requestUri).append("\", request_method=\"").append(requestMethod).append("\", query_string=\"").append(queryString).append("\", request_headers=\"").append(headersString).append("\"");  if (extraDetailsForLogging != null) {    for (    Pair<String,String> logMe : extraDetailsForLogging) {      sb.append(", ").append(logMe.getLeft()).append("=\"").append(logMe.getRight()).append('\"');    }  }  return errorUid;}  }
class C{  public static PokkitMaterialData fromBukkit(Material material,int bukkitDamage){  @SuppressWarnings("deprecation") int bukkitId=material.getId();  return new PokkitMaterialData(bukkitId,bukkitDamage);}  }
class C{  private static boolean isDebugEnabled(){  try {    String val=SecuritySupport.getSystemProperty("xerces.debug");    return (val != null && (!"false".equals(val)));  } catch (  SecurityException se) {  }  return false;}  }
class C{  public boolean hasNext(){  return next >= 0;}  }
class C{  @Override public void write(String value) throws IOException {  write(value.getBytes(defaultCharset));}  }
class C{  public int lastIndexOf(Object e,int index){  Object[] elements=getArray();  return lastIndexOf(e,elements,index);}  }
class C{  public void unsetQuota(String suName) throws Exception {  this.setQuota(suName,new ResourceQuota());}  }
class C{  @DataProvider public Object[][] ValidAuthProvider(){  String userName=appProperties.getProperty("user-name");  String password=appProperties.getProperty("password");  String userEmail=appProperties.getProperty("user-email");  return new Object[][]{{userName,password,userEmail}};}  }
class C{  public static boolean interfaceOf(Object obj,String interfaceName) throws ClassNotFoundException {  Class<?> interfaceClass=loadClass(interfaceName);  return interfaceOf(obj,interfaceClass);}  }
class C{  public RegisterTypeDescriptorRequestInfo(){}  }
class C{  public static int[] HSLtoRGB(float h,float s,float l,float alpha){  if (s < 0.0f || s > 100.0f) {    String message="Color parameter outside of expected range - Saturation";    throw new IllegalArgumentException(message);  }  if (l < 0.0f || l > 100.0f) {    String message="Color parameter outside of expected range - Luminance";    throw new IllegalArgumentException(message);  }  if (alpha < 0.0f || alpha > 1.0f) {    String message="Color parameter outside of expected range - Alpha";    throw new IllegalArgumentException(message);  }  h=h % 360.0f;  h/=360f;  s/=100f;  l/=100f;  float q=0;  if (l < 0.5)   q=l * (1 + s); else   q=(l + s) - (s * l);  float p=2 * l - q;  int r=Math.round(Math.max(0,HueToRGB(p,q,h + (1.0f / 3.0f)) * 256));  int g=Math.round(Math.max(0,HueToRGB(p,q,h) * 256));  int b=Math.round(Math.max(0,HueToRGB(p,q,h - (1.0f / 3.0f)) * 256));  int[] array={r,g,b};  return array;}  }
class C{  private AnimationUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  final public void forward(String model){  Controller.dispatch(model,req,resp,method);}  }
class C{  private RegistryEntry findParent(Class<?> resourceClass,Set<RegistryEntry> registryEntries){  RegistryEntry foundRegistryEntry=null;  Class<?> currentClass=resourceClass.getSuperclass();  classHierarchy:   while (currentClass != null && currentClass != Object.class) {    for (    RegistryEntry availableRegistryEntry : registryEntries) {      if (availableRegistryEntry.getResourceInformation().getResourceClass().equals(currentClass)) {        foundRegistryEntry=availableRegistryEntry;        break classHierarchy;      }    }    currentClass=currentClass.getSuperclass();  }  return foundRegistryEntry;}  }
class C{  public final void write(AionConnection con,ByteBuffer buffer){  if (con.getState().equals(AionConnection.State.IN_GAME) && con.getActivePlayer().getPlayerAccount().getMembership() == 10) {    if (!this.getPacketName().equals("SM_MESSAGE")) {      PacketSendUtility.sendMessage(con.getActivePlayer(),"0x" + Integer.toHexString(this.getOpcode()).toUpperCase() + " : "+ this.getPacketName());    }  }  this.setBuf(buffer);  buf.putShort((short)0);  writeOP(getOpcode());  writeImpl(con);  buf.flip();  int BufCurrentPos=buf.position();  buf.position(5 + 2);  Player player=con.getActivePlayer();  if (con.getState().equals(State.IN_GAME) && player != null && this.getOpcode() != 24 && player.getAccessLevel() >= DeveloperConfig.SHOW_PACKETS_INCHAT_ACCESSLEVEL) {    if (isPacketFilterd(DeveloperConfig.FILTERED_PACKETS_INCHAT,this.getPacketName())) {      if (DeveloperConfig.SHOW_PACKET_BYTES_INCHAT) {        String PckName=String.format("0x%04X : %s",this.getOpcode(),this.getPacketName());        PacketSendUtility.sendMessage(player,"********************************************");        PacketSendUtility.sendMessage(player,PckName);        PacketSendUtility.sendMessage(player,Util.toHexStream(getByteBuffer(buf,DeveloperConfig.TOTAL_PACKET_BYTES_INCHAT)));      } else       if (DeveloperConfig.SHOW_PACKET_NAMES_INCHAT) {        String PckName=String.format("0x%04X : %s",this.getOpcode(),this.getPacketName());        PacketSendUtility.sendMessage(player,PckName);      }    }  }  buf.position(BufCurrentPos);  buf.putShort((short)buf.limit());  ByteBuffer b=buf.slice();  buf.position(0);  con.encrypt(b);}  }
class C{  @deprecated public final boolean next(){  if (this.scriptLimit >= this.textLimit) {    return false;  }  this.scriptCode=0;  this.scriptStart=this.scriptLimit;  syncFixup();  while (this.textIndex < this.textLimit) {    int ch=UTF16.charAt(this.text,this.textStart,this.textLimit,this.textIndex - this.textStart);    int codePointCount=UTF16.getCharCount(ch);    int sc=UScript.getScript(ch);    int pairIndex=getPairIndex(ch);    this.textIndex+=codePointCount;    if (pairIndex >= 0) {      if ((pairIndex & 0x1) == 0) {        push(pairIndex,this.scriptCode);      } else {        int pi=pairIndex & 0xFFFFFFFE;        while ((stackIsNotEmpty()) && (top().pairIndex != pi)) {          pop();        }        if (stackIsNotEmpty()) {          sc=top().scriptCode;        }      }    }    if (sameScript(this.scriptCode,sc)) {      if ((this.scriptCode <= 1) && (sc > 1)) {        this.scriptCode=sc;        fixup(this.scriptCode);      }      if ((pairIndex >= 0) && ((pairIndex & 0x1) != 0)) {        pop();      }    } else {      this.textIndex-=codePointCount;      break;    }  }  this.scriptLimit=this.textIndex;  return true;}  }
class C{  public Vector2D intersection(final Line other){  final double d=MathArrays.linearCombination(sin,other.cos,-other.sin,cos);  if (FastMath.abs(d) < tolerance) {    return null;  }  return new Vector2D(MathArrays.linearCombination(cos,other.originOffset,-other.cos,originOffset) / d,MathArrays.linearCombination(sin,other.originOffset,-other.sin,originOffset) / d);}  }
class C{  @Override public int compareTo(Storage o){  return ComparisonChain.start().compareTrueFirst(isConsistent(),o.isConsistent()).compareTrueFirst(_masterPrimary,o._masterPrimary).compare(o.getPromotionId(),getPromotionId(),TimeUUIDs.ordering().nullsLast()).compare(_uuid,o._uuid).result();}  }
class C{  @Override public Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  this.tag=tag;  this.settings=new Settings();  return settings;}  }
class C{  @Override public boolean next(){  if (!moreGroups)   return false;  if (aggFns != null)   for (  AggregationFn fn : aggFns)   fn.processFirst(ss);  groupVal=new GroupValue(ss,groupFlds);  while (moreGroups=ss.next()) {    GroupValue gv=new GroupValue(ss,groupFlds);    if (!groupVal.equals(gv))     break;    if (aggFns != null)     for (    AggregationFn fn : aggFns)     fn.processNext(ss);  }  return true;}  }
class C{  @Override public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  View v=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_user,parent,false);  return new ViewHolder(v);}  }
class C{  @Override public boolean onPassphraseEntered(String passphrase){  if (!mProfileSyncService.isBackendInitialized()) {    return false;  }  return handleDecryption(passphrase);}  }
class C{  public boolean isPropDirty(){  SVNStatusKind thePropStatus=getPropStatus();  return thePropStatus.equals(SVNStatusKind.CONFLICTED) || thePropStatus.equals(SVNStatusKind.MODIFIED);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_PARTY_ENEMY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1230222,skilltarget,skillcaster);}  }
class C{  public void deleteFolderAndItsContent(String folderId) throws BoxSDKServiceException {  try {    BoxFolder boxFolder=new BoxFolder(getBoxAPIConnection(),folderId);    boxFolder.delete(true);  } catch (  BoxAPIException e) {    String msg="Error trying to delete folder " + folderId;    logger.error(msg,e);    throw new BoxSDKServiceException(msg,e);  }}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public void restMode(){  SummonsService.restMode(getOwner());}  }
class C{  public static boolean isNullOrEmpty(String[] strings){  for (  String string : strings) {    return TextUtils.isEmpty(string);  }  return false;}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegSign=false;  for (; currentIndex < s.length(); currentIndex++) {    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start) {    foundSeparator=true;    result.mEndWithNegSign=true;  }break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public boolean chiSquareTest(final long[][] counts,final double alpha) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  if ((alpha <= 0) || (alpha > 0.5)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,alpha,0,0.5);  }  return chiSquareTest(counts) < alpha;}  }
class C{  public static String trim(String s,int maxWidth){  if (s.length() <= maxWidth) {    return (s);  }  return (s.substring(0,maxWidth));}  }
class C{  public void handleNotification(Notification e,Object handback){  if (e.getType().equals(XMBeanOperations.OPERATION_INVOCATION_EVENT)) {    final Object message;    if (handback == null) {      JTextArea textArea=new JTextArea("null");      textArea.setEditable(false);      textArea.setEnabled(true);      textArea.setRows(textArea.getLineCount());      message=textArea;    } else {      Component comp=mbeansTab.getDataViewer().createOperationViewer(handback,mbean);      if (comp == null) {        JTextArea textArea=new JTextArea(handback.toString());        textArea.setEditable(false);        textArea.setEnabled(true);        textArea.setRows(textArea.getLineCount());        JScrollPane scrollPane=new JScrollPane(textArea);        Dimension d=scrollPane.getPreferredSize();        if (d.getWidth() > 400 || d.getHeight() > 250) {          scrollPane.setPreferredSize(new Dimension(400,250));        }        message=scrollPane;      } else {        if (!(comp instanceof JScrollPane)) {          comp=new JScrollPane(comp);        }        Dimension d=comp.getPreferredSize();        if (d.getWidth() > 400 || d.getHeight() > 250) {          comp.setPreferredSize(new Dimension(400,250));        }        message=comp;      }    }    new ThreadDialog((Component)e.getSource(),message,Resources.getText("LBL_OperationReturnValue"),JOptionPane.INFORMATION_MESSAGE).run();  } else   if (e.getType().equals(XMBeanNotifications.NOTIFICATION_RECEIVED_EVENT)) {    DefaultMutableTreeNode emitter=(DefaultMutableTreeNode)handback;    Long received=(Long)e.getUserData();    updateReceivedNotifications(emitter,received.longValue());  }}  }
class C{  @Override public Throwable fillInStackTrace(){  return null;}  }
class C{  public ExamplePolygonImplIOM(){}  }
class C{  @Override public void onScrollChange(NestedScrollView v,int scrollX,int scrollY,int oldScrollX,int oldScrollY){  setChildTop(parent,scrollY);}  }
class C{  public static boolean isZeroOrPositiveInteger(String value){  return value != null && INT_VALIDATOR.isValid(value) && POSITIVE_OR_ZERO_INT_PATTERN.matcher(value).matches();}  }
class C{  public void addGroupMessageListener(GroupMessageListener groupMessageListener){  groupMessageListeners.add(groupMessageListener);}  }
class C{  public Plane.Side whichSide(Plane plane){  float distance=plane.pseudoDistance(center);  if (distance <= -radius) {    return Plane.Side.Negative;  } else   if (distance >= radius) {    return Plane.Side.Positive;  } else {    return Plane.Side.None;  }}  }
class C{  protected int addBaseLine(NlComponent node,String id){  int baselineY=node.getBaseline();  if (baselineY != -1) {    Rectangle b=new Rectangle(node.x,node.y,node.w,node.h);    myHorizontalEdges.add(new Segment(b.y + baselineY,b.x,x2(b),node,id,SegmentType.BASELINE,NO_MARGIN));  }  return baselineY;}  }
class C{  public double dotProduct(final Quaternion q){  return dotProduct(this,q);}  }
class C{  private boolean isInterfaceAllowed(NetworkInterface ni) throws SocketException {  return !ni.isLoopback() && !ni.isPointToPoint() && !ni.isVirtual()&& ni.isUp();}  }
class C{  public VisibilityAnnotationAttr(String kind,ArrayList annotations){  attr=new AsciiCP(kind + "Annotations");  list=annotations;  this.kind=kind;}  }
class C{  public int degree(){  return c.length;}  }
class C{  public void mergeWith(Buffer other){  if (this.hasCapacity() || other.hasCapacity() || other.level != this.level) {    throw new MathIllegalStateException(LocalizedCoreFormats.INTERNAL_ERROR);  }  for (int i=0; i < size; i++) {    if (randomGenerator.nextBoolean()) {      data[i]=other.data[i];    }  }  Arrays.sort(data);  other.setLevel(level + 1);  this.setLevel(level + 1);  other.clear();}  }
class C{  @Override public void clear(){  throw new UnsupportedOperationException("Clear is not defined on DelegatingMap. Add is the only allowed modification operation.");}  }
class C{  public Rotation(Vector3D u1,Vector3D u2,Vector3D v1,Vector3D v2) throws MathRuntimeException {  final Vector3D u3=u1.crossProduct(u2).normalize();  u2=u3.crossProduct(u1).normalize();  u1=u1.normalize();  final Vector3D v3=v1.crossProduct(v2).normalize();  v2=v3.crossProduct(v1).normalize();  v1=v1.normalize();  final double[][] m=new double[][]{{MathArrays.linearCombination(u1.getX(),v1.getX(),u2.getX(),v2.getX(),u3.getX(),v3.getX()),MathArrays.linearCombination(u1.getY(),v1.getX(),u2.getY(),v2.getX(),u3.getY(),v3.getX()),MathArrays.linearCombination(u1.getZ(),v1.getX(),u2.getZ(),v2.getX(),u3.getZ(),v3.getX())},{MathArrays.linearCombination(u1.getX(),v1.getY(),u2.getX(),v2.getY(),u3.getX(),v3.getY()),MathArrays.linearCombination(u1.getY(),v1.getY(),u2.getY(),v2.getY(),u3.getY(),v3.getY()),MathArrays.linearCombination(u1.getZ(),v1.getY(),u2.getZ(),v2.getY(),u3.getZ(),v3.getY())},{MathArrays.linearCombination(u1.getX(),v1.getZ(),u2.getX(),v2.getZ(),u3.getX(),v3.getZ()),MathArrays.linearCombination(u1.getY(),v1.getZ(),u2.getY(),v2.getZ(),u3.getY(),v3.getZ()),MathArrays.linearCombination(u1.getZ(),v1.getZ(),u2.getZ(),v2.getZ(),u3.getZ(),v3.getZ())}};  double[] quat=mat2quat(m);  q0=quat[0];  q1=quat[1];  q2=quat[2];  q3=quat[3];}  }
class C{  @Override public ImageWritable transform(ImageWritable image,Random random){  if (image == null) {    return null;  }  Mat mat=converter.convert(image.getFrame());  Point2f src=new Point2f(4);  Point2f dst=new Point2f(4);  src.put(0,0,mat.cols(),0,mat.cols(),mat.rows(),0,mat.rows());  for (int i=0; i < 8; i++) {    dst.put(i,src.get(i) + deltas[i] * (random != null ? 2 * random.nextFloat() - 1 : 1));  }  Mat result=new Mat();  Mat M=getPerspectiveTransform(src,dst);  warpPerspective(mat,result,M,mat.size());  return new ImageWritable(converter.convert(result));}  }
class C{  public boolean isEmbeddedProtocol(){  return StringUtils.equalsIgnoreCase(getProtocol(),EMBEDDED_SPACE_PROTOCOL);}  }
class C{  public Matrix mean(int dim){  Matrix result;switch (dim) {case 1:    result=new Matrix(1,n);  for (int currN=0; currN < n; currN++) {    for (int currM=0; currM < m; currM++)     result.A[0][currN]+=A[currM][currN];    result.A[0][currN]/=m;  }return result;case 2:result=new Matrix(m,1);for (int currM=0; currM < m; currM++) {for (int currN=0; currN < n; currN++) {result.A[currM][0]+=A[currM][currN];}result.A[currM][0]/=n;}return result;default :(new IllegalArgumentException("dim must be either 1 or 2, and not: " + dim)).printStackTrace();return null;}}  }
class C{  @Deprecated public void clearDiscCache(){  clearDiskCache();}  }
class C{  public SymbolTable(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (!this.func_189652_ae()) {    this.motionY-=0.03999999910593033D;  }  this.moveEntity(this.motionX,this.motionY,this.motionZ);  --this.fuse;  if (this.fuse <= 0) {    this.setDead();    if (!this.worldObj.isRemote) {      this.explode();    }  } else {    this.handleWaterMovement();    this.worldObj.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,this.posX,this.posY + 0.5D,this.posZ,0.0D,0.0D,0.0D,new int[0]);  }}  }
class C{  public void addMember(String ownerMemberName,String targetMemberName,String targetMemberURL) throws ClusterException {  addMemberToReplGroup(ownerMemberName,targetMemberName,targetMemberURL);  try {    saveFile();  } catch (  FileNotFoundException ex) {    throw new ClusterException("Failed to add " + targetMemberName + " member to "+ clusterConfigFile+ ". "+ ex.toString(),ex);  }}  }
class C{  public double normF(){  double f=0;  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      f=Maths.hypot(f,A[i][j]);    }  }  return f;}  }
class C{  public void startObjectName(O object){}  }
class C{  @Override public void endPrefixMapping(String prefix) throws SAXException {  return;}  }
class C{  public RecordId currentRecordId(){  int id=rp.currentId();  return new RecordId(new BlockId(fileName,currentBlkNum),id);}  }
class C{  public void target(Quaternion rot,double power){  target(rot,power,Interpolation.SMOOTH);}  }
class C{  public PhotosSaveQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  private void limitUnknownPeers(int limit){  if (peerList.size() < limit)   return;  int unknownPeers=0;  Peer oldestPeer=null;  long oldestDate=System.currentTimeMillis();  for (  Peer peer : peerList) {    if (!peer.hasReceivedData()) {      unknownPeers++;      if (peer.getCreationTime() < oldestDate) {        oldestDate=peer.getCreationTime();        oldestPeer=peer;      }    }  }  if (unknownPeers > limit) {    peerList.remove(oldestPeer);  }  if (unknownPeers - 1 > limit) {    limitKnownPeers(limit);  }}  }
class C{  private ProxySelector installExceptionList(Dict proxySettings,ProxySelector result){  List<?> proxyExceptions=(List<?>)proxySettings.get("ExceptionsList");  if (proxyExceptions != null && proxyExceptions.size() > 0) {    Logger.log(getClass(),LogLevel.TRACE,"OSX uses proxy bypass list: {0}",proxyExceptions);    String noProxyList=toCommaSeparatedString(proxyExceptions);    result=new ProxyBypassListSelector(noProxyList,result);  }  return result;}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<Double>> average(String varName){  return Aggregates.average(varName);}  }
class C{  public JacobiPreconditioner(final double[] diag,final boolean deep){  this.diag=new ArrayRealVector(diag,deep);}  }
class C{  public void removeRepositoryListener(ISVNListener listener){  repositoryListeners.remove(listener);}  }
class C{  public boolean isValidPeriodForDataEntry(Period period){  if (period != null) {    return (startDate == null || startDate.compareTo(period.getStartDate()) <= 0) && (endDate == null || endDate.compareTo(period.getEndDate()) >= 0);  }  return true;}  }
class C{  @Override public synchronized CompletableFuture<Void> disconnect(){  closeFuture=new CompletableFuture<>();  if (!consumers.isEmpty()) {    consumers.forEach(null);    if (havePendingRead && cursor.cancelPendingReadRequest()) {      havePendingRead=false;    }  } else {    closeFuture.complete(null);  }  return closeFuture;}  }
class C{  public InstanceFieldRef newInstanceFieldRef(Value base,SootFieldRef f){  return new GInstanceFieldRef(base,f);}  }
class C{  private void ensureCapacity(int size){  if (fData == null) {    fData=new short[8];  } else   if (fData.length <= size) {    short[] newdata=new short[fData.length * 2];    System.arraycopy(fData,0,newdata,0,fData.length);    fData=newdata;  }}  }
class C{  public void dump(PrintWriter pw,int pad,String title){  Utilities.dump(pw,pad,"========= Relation: " + title + " =========");  Item item=head;  while (item != null) {    item.dump(pw,pad + 4,title);    item=item.getNext();  }}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0,0,0,0,0,0.791089998892,0.730456085931,0.689667290488,0.645278794701,0.578763688757};}  }
class C{  public MarketEditQuery photoIds(Integer... value){  return unsafeParam("photo_ids",value);}  }
class C{  @Override public boolean isSimulated(){  return simulated;}  }
class C{  private ErrorHandler(ErrorHandler parentErrorHandler){  this();  this.parentErrorHandler=parentErrorHandler;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0,1 / 9.0,2 / 9.0,3 / 9.0,4 / 9.0,5 / 9.0,6 / 9.0,7 / 9.0,8 / 9.0,1,1};}  }
class C{  public AutoCloseInputStream(InputStream in){  super(in);}  }
class C{  public boolean separates(int a,int b){  return A.get(a) && B.get(b) || A.get(b) && B.get(a);}  }
class C{  @Override public synchronized boolean isRunning(){  return running;}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigColour copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigColour(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public static void buildCoffeeTable(Connection conn){  try {    Statement stmt=conn.createStatement();    stmt.execute("CREATE TABLE Coffee (" + "Description CHAR(25), " + "ProdNum CHAR(10) NOT NULL PRIMARY KEY, "+ "Price DOUBLE "+ ")");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Bolivian Dark', " + "'14-001', "+ "8.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Bolivian Medium', " + "'14-002', "+ "8.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Brazilian Dark', " + "'15-001', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Brazilian Medium', " + "'15-002', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Brazilian Decaf', " + "'15-003', "+ "8.55 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Central American Dark', " + "'16-001', "+ "9.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Central American Medium', " + "'16-002', "+ "9.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Dark', " + "'17-001', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Decaf', " + "'17-002', "+ "8.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Medium', " + "'17-003', "+ "7.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Sumatra Organic Dark', " + "'17-004', "+ "11.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Kona Medium', " + "'18-001', "+ "18.45 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Kona Dark', " + "'18-002', "+ "18.45 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'French Roast Dark', " + "'19-001', "+ "9.65 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Galapagos Medium', " + "'20-001', "+ "6.85 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Guatemalan Dark', " + "'21-001', "+ "9.95 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Guatemalan Decaf', " + "'21-002', "+ "10.45 )");    stmt.execute("INSERT INTO Coffee VALUES ( " + "'Guatemalan Medium', " + "'21-003', "+ "9.95 )");  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());  }}  }
class C{  public int writeGraphToFile(byte[] img,String file){  File to=new File(file);  return writeGraphToFile(img,to);}  }
class C{  public void saveMovie(int type) throws MovieSaveException {  currentFrame=0;  String desc=null;  if (type == MovieInfoProvider.TYPE_QUICKTIME_JPEG) {    createMOVFormat();    desc=FileTypeDescriptor.QUICKTIME;  } else   if (type == MovieInfoProvider.TYPE_AVI_MJPEG) {    createMJPEGFormat();    desc=FileTypeDescriptor.MSVIDEO;  } else   if (type == MovieInfoProvider.TYPE_AVI_RAW) {    createRGBFormat();    desc=FileTypeDescriptor.MSVIDEO;  } else   throw new UnsupportedOperationException("File Type not supported...");  try {    itm.saveMovie(mip.getMediaLocator(),desc,videoFormat);  } catch (  Exception e) {    throw new MovieSaveException(e);  }}  }
class C{  public final void stop(){  if (!isRunning()) {    resetPersistenceManager();  }  stopped=true;}  }
class C{  public CentroidCluster(final Clusterable center){  super();  this.center=center;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DashATK_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200498,num0,skilltarget,skillname);}  }
class C{  public static <X,Y>boolean containsSubclass(Set<? extends Class<? extends Y>> classes,X superclassInstance){  for (  Class<? extends Y> classs : classes)   if (classs.isInstance(superclassInstance))   return true;  return false;}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  public static String cleanIPv6(String hostOrIP){  if (hostOrIP == null) {    return null;  }  hostOrIP=hostOrIP.trim();  if (hostOrIP.startsWith("[")) {    hostOrIP=hostOrIP.substring(1);  }  if (hostOrIP.endsWith("]")) {    hostOrIP=hostOrIP.substring(0,hostOrIP.length() - 1);  }  return hostOrIP;}  }
class C{  public AXmlNode addChild(AXmlNode child){  if (this.children == null)   this.children=new ArrayList<AXmlNode>();  this.children.add(child);  return this;}  }
class C{  public EnumActionResult onItemUse(ItemStack stack,EntityPlayer playerIn,World worldIn,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){  if (facing != EnumFacing.UP) {    return EnumActionResult.FAIL;  } else {    IBlockState iblockstate=worldIn.getBlockState(pos);    Block block=iblockstate.getBlock();    if (!block.isReplaceable(worldIn,pos)) {      pos=pos.offset(facing);    }    if (playerIn.canPlayerEdit(pos,facing,stack) && this.block.canPlaceBlockAt(worldIn,pos)) {      EnumFacing enumfacing=EnumFacing.fromAngle((double)playerIn.rotationYaw);      int i=enumfacing.getFrontOffsetX();      int j=enumfacing.getFrontOffsetZ();      placeDoor(worldIn,pos,enumfacing,this.block);      SoundType soundtype=this.block.getSoundType();      worldIn.playSound(playerIn,pos,soundtype.getPlaceSound(),SoundCategory.BLOCKS,(soundtype.getVolume() + 1.0F) / 2.0F,soundtype.getPitch() * 0.8F);      --stack.stackSize;      return EnumActionResult.SUCCESS;    } else {      return EnumActionResult.FAIL;    }  }}  }
class C{  protected MarketAddQuery mainPhotoId(int value){  return unsafeParam("main_photo_id",value);}  }
class C{  public boolean isValidateGCFinAccount(Delegator delegator){  try {    GenericValue giftCertSettings=getGiftCertSettingFromStore(delegator);    if (giftCertSettings != null) {      if ("Y".equals(giftCertSettings.getString("validateGCFinAcct"))) {        return true;      } else {        return false;      }    } else {      Debug.logWarning("No product store gift certificate settings found for store [" + getProductStoreId() + "]",module);      return false;    }  } catch (  GenericEntityException ex) {    Debug.logError("Error checking if store requires pin number for GC: " + ex.getMessage(),module);    return false;  }}  }
class C{  public RevealBuilder withHideFromViewAtTranslateInterpolatedTime(final float hideFromViewAtInterpolatedTime){  this.mHideFromViewAtInterpolatedTime=hideFromViewAtInterpolatedTime;  return this;}  }
class C{  public Application createJmxApplication(String connectionString,String displayName,String username,String password,boolean saveCredentials,boolean persistent) throws JmxApplicationException {  if (username == null)   username="";  if (password == null)   password="";  String suggestedName=JmxApplicationProvider.getSuggestedName(displayName,connectionString,username);  EnvironmentProvider epr=new CredentialsProvider.Custom(username,password.toCharArray(),saveCredentials);  return createJmxApplicationImpl(connectionString,displayName,suggestedName,epr,persistent,false);}  }
class C{  public boolean isValueOnly(){  if (valueOnly == null) {    return false;  } else {    return valueOnly;  }}  }
class C{  public DecimalSpinner(){  createUI(0.0,null,null,DEFAULT_STEPSIZE,DEFAULT_NO_OF_DECIMAL_PLACES);}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0)   throw new IllegalArgumentException();  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  protected Datagram createZeroDatagram(int length){  return new Datagram(length,new byte[2 * length]);}  }
class C{  public int size(){  return elementVector.size();}  }
class C{  public WheelPicker(Activity activity){  super(activity);}  }
class C{  public static void quit(Socket sock) throws IOException {  PkgHeader header;  byte[] bs=new byte[FDHT_PROTO_PKG_HEADER_SIZE];  header=new PkgHeader();  header.cmd=FDHT_PROTO_CMD_QUIT;  packHeader(header,bs);  sock.getOutputStream().write(bs);  sock.close();}  }
class C{  @Override public boolean hasField(String fldName){  return s1.hasField(fldName) || s2.hasField(fldName);}  }
class C{  public static <T>T[] addObjectToArray(T[] array,T obj){  Class<?> compType;  if (array != null)   compType=array.getClass().getComponentType(); else   if (obj != null)   compType=obj.getClass(); else   compType=Object.class;  int newArrLength=(array != null ? array.length + 1 : 1);  T[] newArr=(T[])Array.newInstance(compType,newArrLength);  if (array != null)   System.arraycopy(array,0,newArr,0,array.length);  newArr[newArr.length - 1]=obj;  return newArr;}  }
class C{  public DistributedLogClientBuilder name(String name){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._name=name;  return newBuilder;}  }
class C{  public CreatePageWindow selectTemplate(String exactTemplateName){  WebElement template=currentWindow.findElement(By.xpath(".//div[contains(@class, " + "'template-title') and text() = \"" + exactTemplateName + "\"]"));  template.click();  return this;}  }
class C{  public boolean urlToSpeech(String urlPath){  boolean ok=false;  try {    URL url=new URL(urlPath);    InputStream is=url.openStream();    ok=streamToSpeech(is);  } catch (  IOException ioe) {    System.err.println("Can't read data from " + urlPath);  }  return ok;}  }
class C{  public IntIterator columnRows(int col){  return new ColumnRowIterator(rows(),col);}  }
class C{  public static String lower(String string){  return string != null ? string.toLowerCase() : null;}  }
class C{  public static synchronized PropertiesSupport sharedInstance(){  if (INSTANCE == null)   INSTANCE=new PropertiesSupport();  return INSTANCE;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public static String mapCodeToSign(short code){  return extendedMatchCodeMapping[code];}  }
class C{  public Iterator iterator(IntIterator rows){  return new TupleManagerIterator(this,rows);}  }
class C{  public void bodySetup(LocalVariableTable_attribute la,LocalVariableTypeTable_attribute lt,cp_info[] ca){  activeVariableTable=la;  activeConstantPool=ca;  nameToIndexToLocal=null;}  }
class C{  public synchronized void removeDiscoveryListener(DiscoveryListener l){  if (terminated) {    throw new IllegalStateException("discovery terminated");  }  int index=listeners.indexOf(l);  if (index != -1)   listeners.remove(index);}  }
class C{  private ClassHelper(){}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BreakStmt fullCopy(){  BreakStmt tree=(BreakStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void v(String tag,String s,Throwable e){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s,e);}  }
class C{  public Builder timeMathOp(String columnName,MathOp mathOp,long timeQuantity,TimeUnit timeUnit){  return transform(new TimeMathOpTransform(columnName,mathOp,timeQuantity,timeUnit));}  }
class C{  private void syntaxError(String message){  hasSynErrors=true;  int at=matched ? matcher.start(EXPR_TOKEN_GROUP) : expr.length();  error("%s%n  %s%n  %s",message.trim(),expr,Strings.padStart("^",at + 1,' '));}  }
class C{  public Builder cacheConcurrencyLevel(int cacheConcurrencyLevel){  this.cacheConcurrencyLevel=cacheConcurrencyLevel;  return this;}  }
class C{  public HomeCollectionsView(Activity a){  super(a);  this.initialize(a);}  }
class C{  private boolean typeSpecialChar(char c){switch (c) {case '\t':    controller.keyPress(KeyEvent.VK_TAB);  controller.keyRelease(KeyEvent.VK_TAB);return true;case '\n':controller.keyPress(KeyEvent.VK_ENTER);controller.keyRelease(KeyEvent.VK_ENTER);return true;default :return false;}}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  protected void asyncSetValue(final String textValue,final JTable table,final int rowIndex,final int columnIndex){  setText(textValue);  setToolTipText(textValue);  WindowStuffHelper.fireCellChanged(table,rowIndex,columnIndex);}  }
class C{  public Header(Header other){  __isset_bit_vector.clear();  __isset_bit_vector.or(other.__isset_bit_vector);  this.messageType=other.messageType;  if (other.isSetRequestInfo()) {    this.requestInfo=new RequestInfo(other.requestInfo);  }  if (other.isSetResponseInfo()) {    this.responseInfo=new ResponseInfo(other.responseInfo);  }  if (other.isSetTraceInfo()) {    this.traceInfo=new TraceInfo(other.traceInfo);  }  if (other.isSetGlobalContext()) {    this.globalContext=other.globalContext;  }  if (other.isSetLocalContext()) {    this.localContext=other.localContext;  }  if (other.isSetHeartbeatInfo()) {    this.heartbeatInfo=new HeartbeatInfo(other.heartbeatInfo);  }}  }
class C{  public DocumentWordGraph(){  MinSize=1;  MaxSize=2;  CorrelationWindow=3;  InitGraphs();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,List<Integer> albumIds){  return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);}  }
class C{  public Builder opacity(Number opacity){  this.opacity=opacity;  return this;}  }
class C{  public int equivHashCode(){  return hashCode();}  }
class C{  public void createCheckpoint(Transaction checkpointTx){  List<Long> txNums;synchronized (this) {    txNums=new LinkedList<Long>(activeTxs);    checkpointTx.bufferMgr().flushAll();    LogSeqNum lsn=checkpointTx.recoveryMgr().checkpoint(txNums);    VanillaDb.logMgr().flush(lsn);  }}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  public void addBreak(){  Item wordItem=relation.getTail();  if (wordItem != null) {    FeatureSet featureSet=wordItem.getFeatures();    featureSet.setString("break","1");  }}  }
class C{  private static String readFile(String fileName){  StringBuilder sb=new StringBuilder();  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(fileName));  } catch (  FileNotFoundException e1) {    e1.printStackTrace();  }  org.junit.Assert.assertNotNull("Failed to read test file : " + fileName,br);  try {    String line=br.readLine();    while (line != null) {      sb.append(line);      sb.append("\n");      line=br.readLine();    }    return sb.toString();  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  return sb.toString();}  }
class C{  public void addItemFromInflater(Preference preference){  addPreference(preference);}  }
class C{  public int size(){  return mSize;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_TOO_HIGH_STONE_RANK_FOR_SLOT(String value0){  return new SM_SYSTEM_MESSAGE(1300409,value0);}  }
class C{  @Override public void endContentModel(Augmentations augmentations) throws XNIException {}  }
class C{  public int truncate_file1(String appender_file_id) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.truncate_file(parts[0],parts[1]);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200824,skillcaster,skillname);}  }
class C{  public void zoom(float percentage){  double zoomDelta=mViewRange.getLength() * percentage;  requestZoom(mViewRange.getMin() - zoomDelta,mViewRange.getMax() + zoomDelta);}  }
class C{  public TIntHashSet(int[] array){  this(array.length);  addAll(array);}  }
class C{  private int countLetters(Lane lane){  int count=0;  for (int i=lane.getFirstNonGapPosition(); i <= lane.getLastNonGapPosition(); i++) {    if (Character.isLetter(lane.charAt(i)))     count++;  }  return count;}  }
class C{  public static int buff2int(byte[] bs,int offset){  return (((int)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 24) | (((int)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 16) | (((int)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 8)| ((int)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3]));}  }
class C{  public void updatePosition(VisibleObject object,float newX,float newY,float newZ,byte newHeading){  this.updatePosition(object,newX,newY,newZ,newHeading,true);}  }
class C{  protected boolean confirmPassCode(){  mConfirmingPassCode=false;  boolean result=true;  for (int i=0; i < mPassCodeEditTexts.length && result; i++) {    result=((mPassCodeEditTexts[i].getText().toString()).equals(mPassCodeDigits[i]));  }  return result;}  }
class C{  @Override public final int readByte(){  int temp;  try {    temp=raf.read();    if (temp == -1) {      throw new RuntimeException("EOF");    }    read++;    return temp;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_SKILL_POINT_UP(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1330053,value0,value1);}  }
class C{  public void treeCollapsed(TreeExpansionEvent event){  final TreePath path=event.getPath();  final NodeBase node=(NodeBase)path.getLastPathComponent();  if (!inspectorWindow.getClassification2RootNode().values().contains(node)) {    DefaultTreeModel model=(DefaultTreeModel)inspectorWindow.dataTree.getModel();    model.nodeStructureChanged(node);  }  inspectorWindow.updateView(Director.ALL);}  }
class C{  public MapEntryInfoKey(Object value,Object key,ReferenceQueue<Object> queue){  super(value,queue);  _hashCode=_hashCode ^ key.hashCode();  _key=key;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200986,skilltarget,num0,skillcaster,skillname);}  }
class C{  public NativeImageLoader(int height,int width,int channels,ImageTransform imageTransform){  this(height,width,channels);  this.imageTransform=imageTransform;  this.converter=new OpenCVFrameConverter.ToMat();}  }
class C{  public static Converter<String,?> determine(Field field){  Class clazz=field.getType();  Converter<String,?> converter=determinePrimitiveConverter(clazz);  if (converter != null) {    return converter;  }  if (List.class.equals(clazz) || Map.class.equals(clazz) || Set.class.equals(clazz)) {    return determineCollectionConverter((ParameterizedType)field.getGenericType());  }  return new JsonConverter(clazz);}  }
class C{  @SuppressWarnings("deprecation") @Path(path="edit",login=true,access="access.user.admin") public void edit(){  long id=this.getLong("id");  if (method.isPost()) {    String password=this.getString("password");    if (!X.isEmpty(password)) {      JSON jo=new JSON();      User.update(id,V.create("password",password));      jo.put(X.STATE,200);      this.response(jo);      return;    }    JSON j=this.getJSON();    V v=V.create().copy(j);    v.remove("role",X.ID);    v.set("failtimes",this.getInt("failtimes"),true);    if (!"on".equals(this.getString("locked"))) {      User.Lock.removed(id);      v.set("locked",0,true);    } else {      v.set("locked",1,true);    }    User.update(id,v);    User u=User.loadById(id);    String[] roles=this.getStrings("role");    if (roles != null) {      List<Long> list=new ArrayList<Long>();      for (      String s : roles) {        list.add(X.toLong(s));      }      u.setRoles(list);      v.set("roles",list);    }    List<String> list=AuthToken.delete(id);    if (list != null && list.size() > 0) {      for (      String s : list) {        Session.delete(s);      }    }    OpLog.info(user.class,"edit",this.getJSONNonPassword().toString(),login,this.getRemoteHost());    this.set(X.MESSAGE,lang.get("save.success"));    onGet();  } else {    User u=User.loadById(id);    if (u != null) {      this.set(u.getJSON());      this.set("u",u);      Beans<Role> bs=Role.load(0,1000);      if (bs != null) {        this.set("roles",bs.getList());      }      this.set("id",id);      this.show("/admin/user.edit.html");      return;    }    this.set(X.ERROR,lang.get("select.required"));    onGet();  }}  }
class C{  public static int activityCount(){  return getInstance()._activityCount();}  }
class C{  public void addAndRemoveEventListenerAllEvents() throws Exception {  TestActivitiEventListener newListener=new TestActivitiEventListener();  dispatcher.addEventListener(newListener);  ActivitiEntityEventImpl event1=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_CREATED);  ActivitiEntityEventImpl event2=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_CREATED);  dispatcher.dispatchEvent(event1);  dispatcher.dispatchEvent(event2);  assertEquals(2,newListener.getEventsReceived().size());  assertEquals(event1,newListener.getEventsReceived().get(0));  assertEquals(event2,newListener.getEventsReceived().get(1));  dispatcher.removeEventListener(newListener);  newListener.clearEventsReceived();  dispatcher.dispatchEvent(event1);  dispatcher.dispatchEvent(event2);  assertTrue(newListener.getEventsReceived().isEmpty());}  }
class C{  private void registerCallbackMethodsForView(SootClass callbackClass,LayoutControl lc){  if (callbackClass.getName().startsWith("android."))   return;  if (lc.getViewClass().getName().startsWith("android."))   return;{    SootClass sc=lc.getViewClass();    boolean isView=false;    while (sc.hasSuperclass()) {      if (sc.getName().equals("android.view.View")) {        isView=true;        break;      }      sc=sc.getSuperclass();    }    if (!isView)     return;  }  SootClass sc=lc.getViewClass();  Set<String> systemMethods=new HashSet<String>(10000);  for (  SootClass parentClass : Scene.v().getActiveHierarchy().getSuperclassesOf(sc)) {    if (parentClass.getName().startsWith("android."))     for (    SootMethod sm : parentClass.getMethods())     if (!sm.isConstructor())     systemMethods.add(sm.getSubSignature());  }  for (  SootMethod sm : sc.getMethods())   if (!sm.isConstructor())   if (systemMethods.contains(sm.getSubSignature()))   addCallbackMethod(callbackClass.getName(),new AndroidMethod(sm));}  }
class C{  public void clearExpressions(){  this.generator=null;  this.sampleSkipTest=null;}  }
class C{  String calculateHttpEncoding(String httpContentType,String bomEnc,String xmlGuessEnc,String xmlEnc,boolean lenient) throws IOException {  if (lenient && xmlEnc != null) {    return xmlEnc;  }  String cTMime=getContentTypeMime(httpContentType);  String cTEnc=getContentTypeEncoding(httpContentType);  boolean appXml=isAppXml(cTMime);  boolean textXml=isTextXml(cTMime);  if (!appXml && !textXml) {    String msg=MessageFormat.format(HTTP_EX_3,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  if (cTEnc == null) {    if (appXml) {      return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);    } else {      return defaultEncoding == null ? US_ASCII : defaultEncoding;    }  }  if (cTEnc.equals(UTF_16BE) || cTEnc.equals(UTF_16LE)) {    if (bomEnc != null) {      String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    }    return cTEnc;  }  if (cTEnc.equals(UTF_16)) {    if (bomEnc != null && bomEnc.startsWith(UTF_16)) {      return bomEnc;    }    String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  if (cTEnc.equals(UTF_32BE) || cTEnc.equals(UTF_32LE)) {    if (bomEnc != null) {      String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    }    return cTEnc;  }  if (cTEnc.equals(UTF_32)) {    if (bomEnc != null && bomEnc.startsWith(UTF_32)) {      return bomEnc;    }    String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  return cTEnc;}  }
class C{  private Opcodes(){}  }
class C{  protected boolean verifyLocalBufferIsNotCorrupted(OpSendMsg op){  DoubleByteBuf msg=getDoubleByteBuf(op.cmd);  if (msg != null) {    ByteBuf headerFrame=msg.getFirst();    msg.markReaderIndex();    headerFrame.markReaderIndex();    try {      headerFrame.skipBytes(4);      int cmdSize=(int)headerFrame.readUnsignedInt();      headerFrame.skipBytes(cmdSize);      if (hasChecksum(headerFrame)) {        int checksum=readChecksum(headerFrame).intValue();        int metadataChecksum=computeChecksum(headerFrame);        long computedChecksum=resumeChecksum(metadataChecksum,msg.getSecond());        return checksum == computedChecksum;      } else {        log.warn("[{}] [{}] checksum is not present into message with id {}",topic,producerName,op.sequenceId);      }    }  finally {      headerFrame.resetReaderIndex();      msg.resetReaderIndex();    }    return true;  } else {    log.warn("[{}] Failed while casting {} into DoubleByteBuf",producerName,op.cmd.getClass().getName());    return false;  }}  }
class C{  public void reset(){  Iterator iIter=Arrays.asList(getAvailableCategories()).iterator();  while (iIter.hasNext())   Repository.deleteObject((String)iIter.next(),INSECTDB.CATEGORY_TYPE);}  }
class C{  public static List<String> serializeDataSelection(DataSelection dataSelection){  List<String> datasel=new ArrayList<>();  if (true) {    if (dataSelection.isWantReadText()) {      datasel.add("useRead");    }    if (dataSelection.isWantReadText()) {      datasel.add("useReadName");    }    if (dataSelection.isWantReadText()) {      datasel.add("useReadHeader");    }    if (dataSelection.isWantReadText()) {      datasel.add("useReadSequence");    }    if (dataSelection.isWantReadText()) {      datasel.add("useMateUId");    }    if (dataSelection.isWantReadText()) {      datasel.add("useReadLength");    }    if (dataSelection.isWantMatches()) {      datasel.add("useReadComplexity");    }    if (dataSelection.isWantReadText()) {      datasel.add("useReadOriginalNumberOfMatches");    }    if (dataSelection.isWantMatches()) {      datasel.add("useReadNumberOfMatches");    }    if (dataSelection.isWantMatches()) {      datasel.add("useReadWeight");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchText");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchLength");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchTaxonId");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchSeedId");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchKeggId");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchCogId");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchExpected");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchPercentIdentity");    }    if (dataSelection.isWantMatches()) {      datasel.add("useMatchRefSeq");    }  }  return datasel;}  }
class C{  public long last(){  return 0;}  }
class C{  public boolean isNotSet(){  return isNotSet;}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  private static List<String> generateLogInfoOrder(String order){  return Arrays.stream(order.replaceAll("\\s+","").split(",")).filter(not(null)).map(null).collect(Collectors.toList());}  }
class C{  public PitchFrameProvider(DoubleDataSource signal,DoubleDataSource pitchmarks,InlineDataProcessor processor,int samplingRate,int framePeriods,int shiftPeriods){  super(signal,null,0,0,samplingRate,true);  this.pitchmarks=pitchmarks;  this.periodLengths=new int[framePeriods];  this.shiftPeriods=shiftPeriods;  this.periodsInMemory=0;  this.currPitchmark=0;  if (processor instanceof DynamicTwoHalvesWindow)   twoHalvesWindow=(DynamicTwoHalvesWindow)processor; else   this.processor=processor;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  @Override public boolean accept(File dir,String name){  if (dir != null && new File(dir,name).isDirectory()) {    return false;  }  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard)) {      return true;    }  }  return false;}  }
class C{  private byte divmod58(byte[] number,int startAt){  int remainder=0;  for (int i=startAt; i < number.length; i++) {    int digit256=(int)number[i] & 0xFF;    int temp=remainder * BASE_256 + digit256;    number[i]=(byte)(temp / BASE_58);    remainder=temp % BASE_58;  }  return (byte)remainder;}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) public static boolean writeText(String filepath,String content){  return writeText(filepath,content,"utf-8");}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public TCPInputPoller(int portmin,int portmax,boolean choosePortRandomly){  this.requestedPortNumber=0;  this.portRangeMax=portmax;  this.portRangeMin=portmin;  this.choosePortRandomly=choosePortRandomly;  this.commandQueue=new ArrayList<CommandAndIPAddress>();}  }
class C{  public DragForce(float dragCoeff){  params=new float[]{dragCoeff};  minValues=new float[]{DEFAULT_MIN_DRAG_COEFF};  maxValues=new float[]{DEFAULT_MAX_DRAG_COEFF};}  }
class C{  public VideoGetQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public boolean hasUserGroupsToAlert(){  for (  ValidationRuleGroup group : groups) {    if (group.hasUserGroupsToAlert()) {      return true;    }  }  return false;}  }
class C{  final public void deny(String url,String error){  if (log.isDebugEnabled())   log.debug(this.getClass().getName() + "[" + this.getURI()+ "]",new Exception("deny " + error));  if (isAjax()) {    JSON jo=new JSON();    jo.put(X.STATE,HttpServletResponse.SC_UNAUTHORIZED);    jo.put(X.MESSAGE,lang.get("access.deny"));    jo.put(X.ERROR,error);    jo.put(X.URL,url);    this.response(jo);  } else {    setStatus(HttpServletResponse.SC_FORBIDDEN);    this.set("me",this.getUser());    this.set(X.ERROR,error);    this.set(X.URL,url);    this.show("/deny.html");  }}  }
class C{  public LUDecomposition lu(){  return new LUDecomposition(this);}  }
class C{  public String toString(){  StringBuffer sBuffer=new StringBuffer();  sBuffer.append(getClass().getName()).append("[serviceID=").append(serviceID).append(", service=").append(service).append(", attributeSets=");  if (attributeSets != null) {    for (int i=0; i < attributeSets.length - 1; i++)     sBuffer.append(attributeSets[i]).append(" ");    sBuffer.append(attributeSets[attributeSets.length - 1]);  } else {    sBuffer.append((Object)null);  }  return sBuffer.append("]").toString();}  }
class C{  public static synchronized boolean shouldPauseAdding(){  if (Singleton.getPauseBackgroundJobs()) {    return true;  }  int indexQueueSize=Singleton.getCodeIndexQueue().size();  int codeIndexLinesCount=Singleton.getCodeIndexLinesCount();  if (indexQueueSize > MAXINDEXSIZE) {    Singleton.getLogger().info("indexQueueSize " + indexQueueSize + " larger then "+ MAXINDEXSIZE);    return true;  }  if (codeIndexLinesCount > MAXLINESINDEXSIZE) {    Singleton.getLogger().info("codeIndexLinesCount " + codeIndexLinesCount + " larger then "+ MAXLINESINDEXSIZE);    return true;  }  return false;}  }
class C{  public Object nextValue() throws JSONException {  int c=nextCleanInternal();switch (c) {case -1:    throw syntaxError("End of input");case '{':  return readObject();case '[':return readArray();case '\'':case '"':return nextString((char)c);default :pos--;return readLiteral();}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200747,skillcaster,skillname);}  }
class C{  private String htmlDecode(String content){  return Jsoup.parse(content).text();}  }
class C{  public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,double min,double max){  DataFrame frame=DataFrames.toDataFrame(schema,data);  return DataFrames.toRecords(normalize(frame,min,max,Collections.<String>emptyList())).getSecond();}  }
class C{  public boolean retainAll(Collection<?> collection){  return MapCollections.retainAllHelper(this,collection);}  }
class C{  public WKTType(String name,boolean multipleCoordinates,int numOfPoints,String listItem,boolean doFirstLastHaveToBeSame){  this(name,multipleCoordinates,numOfPoints,listItem,false,doFirstLastHaveToBeSame);}  }
class C{  public PolyArea(ZoneName zoneName,int worldId,Point2D[] points,float zMin,float zMax){  super(zoneName,worldId,zMin,zMax);  if (points.length < 3) {    throw new IllegalArgumentException("Not enough points, needed at least 3 but got " + points.length);  }  float[] xPoints=new float[points.length];  float[] yPoints=new float[points.length];  for (int i=0, n=points.length; i < n; i++) {    Point2D p=points[i];    xPoints[i]=p.getX();    yPoints[i]=p.getY();  }  this.poly=new Polygon2D(xPoints,yPoints,points.length);}  }
class C{  public Matrix3f adjoint(Matrix3f store){  if (store == null) {    store=new Matrix3f();  }  store.m00=m11 * m22 - m12 * m21;  store.m01=m02 * m21 - m01 * m22;  store.m02=m01 * m12 - m02 * m11;  store.m10=m12 * m20 - m10 * m22;  store.m11=m00 * m22 - m02 * m20;  store.m12=m02 * m10 - m00 * m12;  store.m20=m10 * m21 - m11 * m20;  store.m21=m01 * m20 - m00 * m21;  store.m22=m00 * m11 - m01 * m10;  return store;}  }
class C{  public final String toJson(){  return getGson().toJson(this);}  }
class C{  public PolynomialCurveFitter withMaxIterations(int newMaxIter){  return new PolynomialCurveFitter(initialGuess,newMaxIter);}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  private static void createAndShowGUI(){  JFrame frame=new JFrame("GridBagLayoutDemo");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  addComponentsToPane(frame.getContentPane());  frame.pack();  frame.setVisible(true);}  }
class C{  XATrasactionContext(Transaction transaction){  this.transaction=transaction;  sentMessages=new LinkedList<GSMessageImpl>();}  }
class C{  public ResourceLazyLoadingScript script(String resourceLocation){  this.resourceLocation=resourceLocation;  return this;}  }
class C{  public void refineByAppraisalPercentageRange(int selectedItemPosition){  int lowest;  int highest;switch (selectedItemPosition) {case 1:    lowest=81;  highest=100;break;case 2:lowest=66;highest=80;break;case 3:lowest=51;highest=65;break;case 4:lowest=0;highest=50;break;default :lowest=0;highest=100;}ArrayList<IVCombination> refinedList=new ArrayList<>();for (IVCombination comb : iVCombinations) {if (comb.percentPerfect >= lowest && comb.percentPerfect <= highest) {refinedList.add(comb);}}iVCombinations=refinedList;}  }
class C{  protected void initializeNetwork(){  logger.debug("Initialising ZWave controller");  Map<String,String> config=new HashMap<String,String>();  config.put("masterController",isMaster.toString());  config.put("isSUC",isSUC ? "true" : "false");  config.put("secureInclusion",secureInclusionMode.toString());  config.put("networkKey",networkKey);  config.put("wakeupDefaultPeriod",wakeupDefaultPeriod.toString());  if (networkKey.length() > 0) {    ZWaveSecurityCommandClass.setRealNetworkKey(networkKey);  }  controller=new ZWaveController(this,config);  controller.addEventListener(this);  discoveryService=new ZWaveDiscoveryService(this,searchTime);  discoveryService.activate();  discoveryRegistration=bundleContext.registerService(DiscoveryService.class.getName(),discoveryService,new Hashtable<String,Object>());}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  DuringImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new DuringExtended();  } else {    filter=new DuringExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  @Override public synchronized void close(){  if (mIsInitializing)   throw new IllegalStateException("Closed during initialization");  if (mDatabase != null && mDatabase.isOpen()) {    mDatabase.close();    mDatabase=null;  }}  }
class C{  public static boolean removeFile(File file){  if (fileExists(file)) {    return file.delete();  } else {    return true;  }}  }
class C{  public void testAnObjectField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public Builder(){}  }
class C{  public void reinitializeBegin(final FieldODEStateInterpolator<T> interpolator) throws MathIllegalStateException {  forward=interpolator.isForward();  final FieldODEStateAndDerivative<T> s0=interpolator.getPreviousState();  t0=s0.getTime();  g0=handler.g(s0);  while (g0.getReal() == 0) {    final T epsilon=max(solver.getAbsoluteAccuracy(),solver.getRelativeAccuracy().multiply(t0).abs());    T tStart=t0.add(epsilon.multiply(forward ? 0.5 : -0.5));    if (tStart.equals(t0)) {      tStart=nextAfter(t0);    }    t0=tStart;    g0=handler.g(interpolator.getInterpolatedState(tStart));  }  g0Positive=g0.getReal() > 0;  increasing=g0Positive;}  }
class C{  public GroupsGetByIdQuery groupIds(List<String> value){  return unsafeParam("group_ids",value);}  }
class C{  public static void v(String msg){  if (isDebug) {    Log.v(TAG,msg);  }}  }
class C{  public static <T>ConsList<T> cons(T newHead,ConsList<T> list){  return list.cons(newHead);}  }
class C{  public final void trace(final Object o,final Throwable t){  log(Level.TRACE,o,t);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public DistanceEstimator(Distribution tmSymbolsPerRank,Distribution tmNonSymbolsPerRank){  SymbolsPerRank=new Distribution();  SymbolsPerRank.asTreeMap().putAll(tmSymbolsPerRank.asTreeMap());  NonSymbolsPerRank=new Distribution();  NonSymbolsPerRank.asTreeMap().putAll(tmNonSymbolsPerRank.asTreeMap());  MinRank=Math.min((Integer)tmSymbolsPerRank.asTreeMap().firstKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().firstKey());  MaxRank=Math.max((Integer)tmSymbolsPerRank.asTreeMap().lastKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().lastKey());  Estimator=new NGramSizeEstimator(SymbolsPerRank,NonSymbolsPerRank);}  }
class C{  public static boolean isConversionSupported(AudioFormat.Encoding targetEncoding,AudioFormat sourceFormat){  List codecs=getFormatConversionProviders();  for (int i=0; i < codecs.size(); i++) {    FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);    if (codec.isConversionSupported(targetEncoding,sourceFormat)) {      return true;    }  }  return false;}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  @Override public void revertToDefaultValue(){}  }
class C{  public void reset(){  npoints=0;  bounds=null;  path=new GeneralPath();  closedPath=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_CHAT_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1310002,value0);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set show-reference=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().setShowReference(value);}  }
class C{  public Quaternion(final double scalar,final double[] v) throws MathIllegalArgumentException {  MathUtils.checkDimension(v.length,3);  this.q0=scalar;  this.q1=v[0];  this.q2=v[1];  this.q3=v[2];}  }
class C{  public DistributedLogClientBuilder checksum(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setChecksumEnabled(enabled);  return newBuilder;}  }
class C{  public void ignoreRelationship(RelatedFinder relatedFinder){  this.ignored.add(relatedFinder);}  }
class C{  public V remove(Object key){  final int index=indexOfKey(key);  if (index >= 0) {    return removeAt(index);  }  return null;}  }
class C{  public FTPFile[] list() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException, FTPListParseException {  return list(null);}  }
class C{  public boolean isManagedByCustodian(){  PrefServiceBridge prefs=PrefServiceBridge.getInstance();  if (showGeolocationSites()) {    return prefs.isAllowLocationManagedByCustodian();  }  if (showCameraSites()) {    return prefs.isCameraManagedByCustodian();  }  if (showMicrophoneSites()) {    return prefs.isMicManagedByCustodian();  }  return false;}  }
class C{  private boolean isThereInternetConnection(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  return (networkInfo != null && networkInfo.isConnectedOrConnecting());}  }
class C{  public boolean matchDelim(char delimiter){  return delimiter == (char)tok.ttype;}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  @NotNull public ImageOverlayBuilder identify(@NotNull IdentificationSet identificationSet,@NotNull RectangleTextPosition textPosition){  CognitiveJColourPalette identificationColor=identificationSet.isIdentified() ? CognitiveJColourPalette.GREEN : CognitiveJColourPalette.RED;  Face candidateFace=identificationSet.getCandidateFace();  outlineFaceOnImage(candidateFace,RectangleType.CORNERED,DEFAULT_BORDER_WEIGHT,identificationColor);  TextOnRectangleFilter textOnRectangleFilter=new TextOnRectangleFilter(new Rectangle(0,0,bufferedImage.getWidth(),bufferedImage.getHeight()),candidateFace.faceRectangle.asAwtRectangle(),new Insets(DEFAULT_BORDER_WEIGHT.thickness(),DEFAULT_BORDER_WEIGHT.thickness(),DEFAULT_BORDER_WEIGHT.thickness(),DEFAULT_BORDER_WEIGHT.thickness()),DEFAULT_TEXT_FONT,identificationColor,textPosition,identificationSet.isIdentified() ? identificationSet.getIdentifiedPerson().name : "Unknown");  bufferedImage=textOnRectangleFilter.applyFilter(bufferedImage);  return this;}  }
class C{  private static double[] computeMean(double[] px,double[] py){  double[] m=new double[px.length];  for (int i=0; i < px.length; i++)   m[i]=0.5 * (px[i] + py[i]);  return m;}  }
class C{  @Override public int available(){  int available=(int)(currentlyInBuffer() + dataLength - totalRead);  return available;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public FriendsDeleteListQuery deleteList(UserActor actor,int listId){  return new FriendsDeleteListQuery(getClient(),actor,listId);}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsConvexHulls();}  }
class C{  public WallGetQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public PictureDrawable createPictureDrawable(){  return new PictureDrawable(picture);}  }
class C{  public SetValueRecord(BasicLogRecord rec){  txNum=(Long)rec.nextVal(BIGINT).asJavaVal();  blk=new BlockId((String)rec.nextVal(VARCHAR).asJavaVal(),(Long)rec.nextVal(BIGINT).asJavaVal());  offset=(Integer)rec.nextVal(INTEGER).asJavaVal();  type=(Integer)rec.nextVal(INTEGER).asJavaVal();  val=rec.nextVal(Type.newInstance(type));  newVal=rec.nextVal(Type.newInstance(type));  lsn=rec.getLSN();}  }
class C{  public static MathRuntimeException createInternalError(){  return new MathRuntimeException(LocalizedCoreFormats.INTERNAL_ERROR,REPORT_URL);}  }
class C{  protected RealMatrix computeCovarianceMatrix(RealMatrix matrix,boolean biasCorrected) throws MathIllegalArgumentException {  int dimension=matrix.getColumnDimension();  Variance variance=new Variance(biasCorrected);  RealMatrix outMatrix=new BlockRealMatrix(dimension,dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < i; j++) {      double cov=covariance(matrix.getColumn(i),matrix.getColumn(j),biasCorrected);      outMatrix.setEntry(i,j,cov);      outMatrix.setEntry(j,i,cov);    }    outMatrix.setEntry(i,i,variance.evaluate(matrix.getColumn(i)));  }  return outMatrix;}  }
class C{  public void populateExpression(String wellKnownName){  if (wellKnownName != null) {    fieldConfigVisitor.populateTextField(FieldIdEnum.EXTERNAL_GRAPHIC,wellKnownName);  }}  }
class C{  public MessagesGetHistoryQuery peerId(Integer value){  return unsafeParam("peer_id",value);}  }
class C{  public void seekToAudio(String id,int milliseconds){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.seekToPlaying(milliseconds);  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  TranslateDao.dropTable(db,ifExists);}  }
class C{  public void add(String expr,int color){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,color);}  }
class C{  public PhotosCreateAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  private void registerFingerprint(ExternalWorkspace exws) throws IOException {  FingerprintMap map=Jenkins.getActiveInstance().getFingerprintMap();  Fingerprint f=map.getOrCreate(run,exws.getDisplayName(),exws.getId());  if (f.getFacet(WorkspaceBrowserFacet.class) == null) {    f.getFacets().add(new WorkspaceBrowserFacet(f,System.currentTimeMillis(),exws));  }  f.save();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200829,skillcaster,num0,skillname);}  }
class C{  public String removeData(){  String olddata=data;  data="";  return olddata;}  }
class C{  public WallRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"wall.restoreComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  @Override public void saveKeyStore(File file,KeyStore keyStore,String keystorePassword){  try {    FileOutputStream fos=new FileOutputStream(file);    keyStore.store(fos,keystorePassword.toCharArray());  } catch (  CertificateException|NoSuchAlgorithmException|IOException|KeyStoreException e) {    throw new KeyStoreAccessException("Unable to save KeyStore to file: " + file.getName(),e);  }}  }
class C{  public @Nullable E pop(){  for (; ; ) {    Node<E> current=top.get();    if (current == null) {      return null;    }    if ((top.get() == current) && top.compareAndSet(current,current.next)) {      return current.get();    }    E e=tryReceive();    if (e != null) {      return e;    }  }}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  @PostConstruct public void initApplication(){  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {      log.error("You have misconfigured your application! It should not run " + "with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {      log.error("You have misconfigured your application! It should not" + "run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  public void createNode(String parentNodePath,String nodeName,String nodeType) throws RepositoryException {  createNode(parentNodePath,nodeName,nodeType,null);}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  private Node launchLocalCluster(){  String home=environment.getRequiredProperty("c2mon.server.eslog.home");  setLocal(true);  log.info("Launching an embedded elasticsearch cluster: home=" + home + ", clusterName="+ cluster);  return nodeBuilder().settings(Settings.settingsBuilder().put("path.home",home).put("cluster.name",cluster).put("node.local",isLocal).put("node.name","ClusterNode").put("node.data",true).put("node.master",true).put("network.host","0.0.0.0").put("http.enabled",true).put("http.cors.enabled",true).put("http.cors.allow-origin","/.*/").build()).node();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public MarketGetCategoriesQuery(VkApiClient client,UserActor actor){  super(client,"market.getCategories",GetCategoriesResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public VoiceResult(String match,float confidence){  mMatch=match;  mConfidence=confidence;}  }
class C{  @Override protected void performHouseholderReflection(int minor,double[][] qrt){  double l2NormSquaredMax=0;  int l2NormSquaredMaxIndex=minor;  for (int i=minor; i < qrt.length; i++) {    double l2NormSquared=0;    for (int j=0; j < qrt[i].length; j++) {      l2NormSquared+=qrt[i][j] * qrt[i][j];    }    if (l2NormSquared > l2NormSquaredMax) {      l2NormSquaredMax=l2NormSquared;      l2NormSquaredMaxIndex=i;    }  }  if (l2NormSquaredMaxIndex != minor) {    double[] tmp1=qrt[minor];    qrt[minor]=qrt[l2NormSquaredMaxIndex];    qrt[l2NormSquaredMaxIndex]=tmp1;    int tmp2=p[minor];    p[minor]=p[l2NormSquaredMaxIndex];    p[l2NormSquaredMaxIndex]=tmp2;  }  super.performHouseholderReflection(minor,qrt);}  }
class C{  public static <T extends IdentifiableObject>List<T> filterNameByKey(List<T> identifiableObjects,String key,boolean ignoreCase){  List<T> objects=new ArrayList<>();  ListIterator<T> iterator=identifiableObjects.listIterator();  if (ignoreCase) {    key=key.toLowerCase();  }  while (iterator.hasNext()) {    T object=iterator.next();    String name=ignoreCase ? object.getDisplayName().toLowerCase() : object.getDisplayName();    if (name.indexOf(key) != -1) {      objects.add(object);    }  }  return objects;}  }
class C{  public void stop(){  engine.stop();}  }
class C{  protected FriendsGetRequestsQueryWithNeedMutual needMutual(Boolean value){  return unsafeParam("need_mutual",value);}  }
class C{  public Bundler putSerializable(String key,Serializable value){  bundle.putSerializable(key,value);  return this;}  }
class C{  private void createUI(){  readConfigFileNoScrollPane(null,this,"geoserver/GeoServerWindBarbSymbol.xml");}  }
class C{  @NotNull public static ValidationResult validateAndroidSdk(@Nullable File sdkPath,boolean includePathInMessage){  return validatedSdkPath(sdkPath,"SDK",false,includePathInMessage);}  }
class C{  public void showIconOnly(){  isIconOnlyMode=true;}  }
class C{  public static byte[][] splitNoDictionaryKey(byte[] NoDictionaryArr,int NoDictionaryCount){  byte[][] split=new byte[NoDictionaryCount][];  ByteBuffer buff=ByteBuffer.wrap(NoDictionaryArr,2,NoDictionaryCount * 2);  int remainingCol=NoDictionaryCount;  short secIndex=0;  short firstIndex=0;  for (int i=0; i < NoDictionaryCount; i++) {    if (remainingCol == 1) {      firstIndex=buff.getShort();      int length=NoDictionaryArr.length - firstIndex;      split[i]=new byte[length + 2];      ByteBuffer splittedCol=ByteBuffer.wrap(split[i]);      splittedCol.putShort((short)length);      System.arraycopy(NoDictionaryArr,firstIndex,split[i],2,length);    } else {      firstIndex=buff.getShort();      secIndex=buff.getShort();      int length=secIndex - firstIndex;      split[i]=new byte[length + 2];      ByteBuffer splittedCol=ByteBuffer.wrap(split[i]);      splittedCol.putShort((short)length);      System.arraycopy(NoDictionaryArr,firstIndex,split[i],2,length);      buff.position(buff.position() - 2);    }    remainingCol--;  }  return split;}  }
class C{  public static void writeProtoBinaryToFile(File outputFile,Message proto) throws IOException {  try (OutputStream prodOutputStream=new FileOutputStream(outputFile)){    proto.writeTo(prodOutputStream);  } }  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200563,num0,skilltarget,skillname);}  }
class C{  public SpaceTypeDescriptorBuilder routingProperty(String routingPropertyName){  return routingProperty(routingPropertyName,SpaceIndexType.BASIC);}  }
class C{  public static Document openDocument(OutputStream outputStream){  return openDocument(outputStream,PageSize.A4);}  }
class C{  public static List<GenericValue> makeTrackingCodeOrders(HttpServletRequest request){  Delegator delegator=(Delegator)request.getAttribute("delegator");  java.sql.Timestamp nowStamp=UtilDateTime.nowTimestamp();  List<GenericValue> trackingCodeOrders=FastList.newInstance();  Cookie[] cookies=request.getCookies();  Timestamp affiliateReferredTimeStamp=null;  String siteId=null;  String isBillable=null;  String trackingCodeId=null;  if (cookies != null && cookies.length > 0) {    for (int i=0; i < cookies.length; i++) {      String cookieName=cookies[i].getName();      if ("Ofbiz.TKCD.SiteId".equals(cookieName)) {        siteId=cookies[i].getValue();      }      if ("Ofbiz.TKCD.UpdatedTimeStamp".equals(cookieName)) {        String affiliateReferredTime=cookies[i].getValue();        if (affiliateReferredTime != null && !affiliateReferredTime.equals("")) {          try {            affiliateReferredTimeStamp=Timestamp.valueOf(affiliateReferredTime);          } catch (          IllegalArgumentException e) {            Debug.logError(e,"Error parsing affiliateReferredTimeStamp value from cookie",module);          }        }      }      if (cookieName.startsWith("TKCDB_")) {        isBillable="Y";        trackingCodeId=cookies[i].getValue();      } else       if (cookieName.startsWith("TKCDT_")) {        isBillable="N";        trackingCodeId=cookies[i].getValue();      }    }  }  GenericValue trackingCode=null;  try {    trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);  }  if (trackingCode != null) {    if (trackingCode.get("fromDate") != null && nowStamp.before(trackingCode.getTimestamp("fromDate"))) {      if (Debug.infoOn())       Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has not yet gone into effect, ignoring this trackingCodeId",module);    }    if (trackingCode.get("thruDate") != null && nowStamp.after(trackingCode.getTimestamp("thruDate"))) {      if (Debug.infoOn())       Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has expired, ignoring this trackingCodeId",module);    }    GenericValue trackingCodeOrder=delegator.makeValue("TrackingCodeOrder",UtilMisc.toMap("trackingCodeTypeId",trackingCode.get("trackingCodeTypeId"),"trackingCodeId",trackingCodeId,"isBillable",isBillable,"siteId",siteId,"hasExported","N","affiliateReferredTimeStamp",affiliateReferredTimeStamp));    Debug.logInfo(" trackingCodeOrder is " + trackingCodeOrder,module);    trackingCodeOrders.add(trackingCodeOrder);  } else {    if (trackingCodeId != null) {      Debug.logError("TrackingCode not found for trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId.",module);    }  }  return trackingCodeOrders;}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(this.getModifiers());}  }
class C{  public void removeOption(byte entryCode){  this.optionsTable.remove(new Byte(entryCode));}  }
class C{  public static double atanh(double a){  boolean negative=false;  if (a < 0) {    negative=true;    a=-a;  }  double absAtanh;  if (a > 0.15) {    absAtanh=0.5 * FastMath.log((1 + a) / (1 - a));  } else {    final double a2=a * a;    if (a > 0.087) {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));    } else     if (a > 0.031) {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));    } else     if (a > 0.003) {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));    } else {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * F_1_5));    }  }  return negative ? -absAtanh : absAtanh;}  }
class C{  public TextPrintImpl(){}  }
class C{  private void recordMessage(final BaseMqttMessage message){  if (recentMessages.size() > 0 && message.getTopic().equals(recentMessages.get(0).getTopic()) && message.getPayload().equals(recentMessages.get(0).getPayload())) {    recentMessages.remove(0);  }  recentMessages.add(0,message);  while (recentMessages.size() > MAX_RECENT_MESSAGES) {    recentMessages.remove(MAX_RECENT_MESSAGES);  }  refreshRecentMessages();}  }
class C{  private boolean isConfigurationPluginAvailable(){  if (configurationPluginAvailable == null) {    try {      String value=APILocator.getPluginAPI().loadProperty(pluginName,"environment");      configurationPluginAvailable=(value != null);    } catch (    Exception e) {      Logger.warn(this,"Exception while trying to get property 'environment' ",e);      configurationPluginAvailable=false;    }    Logger.info(this,"Configuration plugin available: " + configurationPluginAvailable);  }  return configurationPluginAvailable;}  }
class C{  public static String combineExtraStyle(String style,String extraStyle){  String res;  if (style == null) {    style="";  } else {    style=style.trim();  }  if (extraStyle == null) {    extraStyle="";  } else {    extraStyle=extraStyle.trim();  }  if (style.isEmpty()) {    if (extraStyle.startsWith("=") || extraStyle.startsWith("+")) {      res="+" + extraStyle.substring(1);    } else {      res="+" + extraStyle;    }  } else {    if (extraStyle.startsWith("=") || extraStyle.startsWith("+")) {      res=style + " " + extraStyle.substring(1);    } else {      res=style + " " + extraStyle;    }  }  return res;}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public static String[] split(String str,char escapeChar,char separator){  if (str == null) {    return null;  }  List<String> strList=new ArrayList<>();  StringBuilder split=new StringBuilder();  int index=0;  while ((index=findNext(str,separator,escapeChar,index,split)) >= 0) {    ++index;    strList.add(split.toString());    split.setLength(0);  }  strList.add(split.toString());  int last=strList.size();  while (--last >= 0 && "".equals(strList.get(last))) {    strList.remove(last);  }  return strList.toArray(new String[strList.size()]);}  }
class C{  public FitBoundsOptions build(){  FitBoundsOptions options=new FitBoundsOptions();  options.paddingTopLeft=this.paddingTopLeft;  options.paddingBottomRight=this.paddingBottomRight;  options.padding=this.padding;  options.maxZoom=this.maxZoom;  return options;}  }
class C{  public int scanContent(XMLString content) throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(scanContent: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  } else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {    fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];    load(1,false);    fCurrentEntity.position=0;    fCurrentEntity.startPosition=0;  }  int offset=fCurrentEntity.position;  int c=fCurrentEntity.ch[offset];  int newlines=0;  boolean external=fCurrentEntity.isExternal();  if (c == '\n' || (c == '\r' && external)) {    if (DEBUG_BUFFER) {      System.out.print("[newline, " + offset + ", "+ fCurrentEntity.position+ ": ");      XMLEntityManager.print(fCurrentEntity);      System.out.println();    }    do {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == '\r' && external) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }        if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {          fCurrentEntity.position++;          offset++;        } else {          newlines++;        }      } else       if (c == '\n') {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }      } else {        fCurrentEntity.position--;        break;      }    } while (fCurrentEntity.position < fCurrentEntity.count - 1);    for (int i=offset; i < fCurrentEntity.position; i++) {      fCurrentEntity.ch[i]='\n';    }    int length=fCurrentEntity.position - offset;    if (fCurrentEntity.position == fCurrentEntity.count - 1) {      content.setValues(fCurrentEntity.ch,offset,length);      if (DEBUG_BUFFER) {        System.out.print("]newline, " + offset + ", "+ fCurrentEntity.position+ ": ");        XMLEntityManager.print(fCurrentEntity);        System.out.println();      }      return -1;    }    if (DEBUG_BUFFER) {      System.out.print("]newline, " + offset + ", "+ fCurrentEntity.position+ ": ");      XMLEntityManager.print(fCurrentEntity);      System.out.println();    }  }  while (fCurrentEntity.position < fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position++];    if (!XMLChar.isContent(c)) {      fCurrentEntity.position--;      break;    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length - newlines;  content.setValues(fCurrentEntity.ch,offset,length);  if (fCurrentEntity.position != fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position];    if (c == '\r' && external) {      c='\n';    }  } else {    c=-1;  }  if (DEBUG_BUFFER) {    System.out.print(")scanContent: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> '" + (char)c + "'");  }  return c;}  }
class C{  public synchronized void terminate(){  if (_isTerminated)   return;  if (_logger.isLoggable(Level.FINE))   _logger.fine("Terminating...");  try {    changeState(null,State.NONE,false);  } catch (  RemoteException ex) {    if (_logger.isLoggable(Level.FINE))     _logger.fine("Failed to reset current state on " + getNamingService().getName());  }  if (_splitBrainController != null)   _splitBrainController.terminate();  if (_activeFailureDetector != null)   _activeFailureDetector.terminate();  _isTerminated=true;  _logger.fine("Terminated");}  }
class C{  public static Builder wrap(@NonNull Context context,@NonNull PagerAdapter innerAdapter){  return new Builder(context,innerAdapter);}  }
class C{  public boolean runAfter(List tasks,int size){  return false;}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  elementValue=new StringBuilder("");  elementOn=true;  if (localName.equals(ITEM_TITLE)) {    episode=new Episode();    isItem=true;  }  if (localName.equalsIgnoreCase(MP3_1) && isItem) {    episode.setLength(attributes.getValue(LENGTH));    episode.setAudeoUrl(attributes.getValue(MP3_3));  }}  }
class C{  @Override public void onCaptureComplete(Bitmap bitmap){}  }
class C{  public boolean isJavaLibraryMethod(){  SootClass cl=getDeclaringClass();  return cl.isJavaLibraryClass();}  }
class C{  public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){  return delete(null,url,responseHandler);}  }
class C{  public VideoGetQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private Vector2 toWorldCoordinates(Point point){  double x=(point.getX() - this.canvas.getWidth() / 2.0) / this.scale;  double y=-(point.getY() - this.canvas.getHeight() / 2.0) / this.scale;  return new Vector2(x,y);}  }
class C{  public boolean isAdjacent(MonotoneVertex<E> vertex){  return vertex == this.previous || vertex == this.next;}  }
class C{  public static final double poundsToKilograms(double pound){  return pound * POUND_TO_KILOGRAM;}  }
class C{  public void handleCommitSA(CommitBusPacket packet) throws SAException {  Context context=null;  ISAdapterIterator<ITemplateHolder> iter=null;  ILockObject templateLock=null, entryLock=null;  final XtnEntry xtnEntry=packet._xtnEntry;  final XtnData pXtn=xtnEntry.getXtnData();  try {    context=_cacheManager.getCacheContext();    try {      iter=_cacheManager.makeUnderXtnTemplatesIter(context,xtnEntry);      if (iter != null) {        while (true) {          ITemplateHolder template=iter.next();          if (template == null)           break;          try {            templateLock=getTemplateLockObject(template);synchronized (templateLock) {              if (template.isDeleted())               continue;              if (template.isExpired(xtnEntry.m_CommitRollbackTimeStamp)) {                context.setOperationAnswer(template,null,null);                _cacheManager.removeTemplate(context,template,false,true,false);              } else {                context.setOperationAnswer(template,null,new UnknownTransactionException("Transaction was already committed/aborted."));                _cacheManager.removeTemplate(context,template,false,true,false);              }            }          }  finally {            if (templateLock != null) {              freeTemplateLockObject(templateLock);              templateLock=null;            }          }        }      }    }  finally {      if (iter != null)       iter.close();    }    _engine.getFifoGroupsHandler().handleNeedFgOnlyScanOnXtnEnd(context,xtnEntry);    try {      context.setFromReplication(xtnEntry.isFromReplication());      iter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.NEED_NOTIFY_ENTRIES);      if (iter != null) {        while (true) {          IEntryHolder entry=iter.next();          if (entry == null)           break;          if (!_engine.getLeaseManager().isNoReapUnderXtnLeases() && entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp)) && !_engine.isExpiredEntryStayInSpace(entry))           continue;          try {            _engine.touchLastEntryTimestamp();            NotifyContextsHolder notifyContextHolder=null;            context.setOperationID(pXtn.getOperationID(entry.getUID()));            context.setOperationVisibilityTime(packet.getCreationTime());            IEntryHolder shadowEh=entry.getTxnEntryData() != null ? entry.getTxnEntryData().getOtherUpdateUnderXtnEntry() : null;switch (entry.getWriteLockOperation()) {case SpaceOperations.TAKE:case SpaceOperations.TAKE_IE:              if (!_cacheManager.getTemplatesManager().anyNotifyTakeTemplates())               continue;            notifyContextHolder=new NotifyContextsHolder(entry,null,context.getOperationID(),NotifyActionType.NOTIFY_TAKE);          break;case SpaceOperations.UPDATE:{          boolean isMatched=_cacheManager.getTemplatesManager().anyNotifyMatchedTemplates();          boolean isRematched=_cacheManager.getTemplatesManager().anyNotifyRematchedTemplates();          if (_cacheManager.getTemplatesManager().anyNotifyUpdateTemplates() || isRematched || isMatched) {            notifyContextHolder=new UpdateNotifyContextHolder(shadowEh,entry,context.getOperationID(),isMatched,isRematched);          } else           if (!_cacheManager.getTemplatesManager().anyNotifyUnmatchedTemplates())           continue;          break;        }default :      if (!_cacheManager.getTemplatesManager().anyNotifyWriteTemplates())       continue;    notifyContextHolder=new NotifyContextsHolder(null,entry,context.getOperationID(),NotifyActionType.NOTIFY_WRITE);}if (notifyContextHolder != null) _engine.getTemplateScanner().scanNotifyTemplates(notifyContextHolder,context,null,FifoSearch.NO);if (shadowEh != null && _cacheManager.getTemplatesManager().anyNotifyUnmatchedTemplates()) {  notifyContextHolder=new NotifyContextsHolder(shadowEh,entry,context.getOperationID(),NotifyActionType.NOTIFY_UNMATCHED);  _engine.getTemplateScanner().scanNotifyTemplates(notifyContextHolder,context,null,FifoSearch.NO);}} catch (EntryDeletedException ex) {}}}}  finally {if (iter != null) iter.close();context.setFromReplication(false);}ISAdapterIterator entriesIter=null;try {entriesIter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.ALL_ENTRIES,true);if (entriesIter != null) {Collection<ITemplateHolder> wf=null;ENTRY_LOOP: while (true) {IEntryCacheInfo entryCacheHolder=(IEntryCacheInfo)entriesIter.next();if (entryCacheHolder == null) break ENTRY_LOOP;IEntryHolder entry=_cacheManager.getEntryFromCacheHolder(entryCacheHolder);if (entry == null) continue ENTRY_LOOP;if ((_cacheManager.isMemorySpace() || _cacheManager.isResidentEntriesCachePolicy()) && entry.isDeleted()) continue ENTRY_LOOP;boolean entry_has_wf=false;try {entryLock=getEntryLockObject(entry);synchronized (entryLock) {  IEntryHolder eh=null;  if (!entry.isOffHeapEntry())   eh=_cacheManager.getEntry(context,entry.getUID(),null,null,true,true,true); else   eh=_cacheManager.getEntry(context,entry,true,true,true);  if (eh == null || eh.isDeleted())   continue ENTRY_LOOP;  if (!entry.isSameEntryInstance(eh) && _cacheManager.getLockManager().isPerLogicalSubjectLockObject(_cacheManager.isEvictableCachePolicy()))   continue ENTRY_LOOP;  entry=eh;  boolean updatedEntry=pXtn.isUpdatedEntry(entry);  _cacheManager.disconnectEntryFromXtn(context,entry,xtnEntry,true);  if (entry.isExpired(xtnEntry.m_CommitRollbackTimeStamp) && !entry.isEntryUnderWriteLockXtn() && !_engine.isExpiredEntryStayInSpace(entry)) {    if (entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp))) {      if (entry.isOffHeapEntry())       _cacheManager.getEntry(context,entry,true,true,true);      IServerTypeDesc typeDesc=_engine.getTypeManager().getServerTypeDesc(entry.getClassName());      boolean considerExpirationReplication=!xtnEntry.isFromReplication() && _engine.getLeaseManager().replicateLeaseExpirationEventsForEntries();      _engine.removeEntrySA(context,entry,typeDesc,false,true,SpaceEngine.EntryRemoveReasonCodes.LEASE_EXPIRED,!considerExpirationReplication,false,false);      continue ENTRY_LOOP;    }  }  if (updatedEntry && entry.isHasWaitingFor())   _engine.checkWFValidityAfterUpdate(context,entry);  if (entry.isHasWaitingFor()) {    entry_has_wf=true;    wf=entry.getCopyOfTemplatesWaitingForEntry();  }}}  finally {if (entryLock != null) freeEntryLockObject(entryLock);entryLock=null;}if (entry_has_wf && wf != null) {TEMPLATE_LOOP: for (ITemplateHolder template : wf) {  if (template.isDeleted()) {    handleRemoveWaitingForInfoSA_EntryBased(context,entry,template);    continue TEMPLATE_LOOP;  }  if (template.isFifoTemplate())   continue TEMPLATE_LOOP;  try {    _engine.performTemplateOnEntrySA(context,template,entry,true);  } catch (  TransactionConflictException ex) {    continue TEMPLATE_LOOP;  }catch (  TemplateDeletedException ex) {    continue TEMPLATE_LOOP;  }catch (  TransactionNotActiveException ex) {    continue TEMPLATE_LOOP;  }catch (  NoMatchException ex) {    continue TEMPLATE_LOOP;  }catch (  FifoException ex) {    continue TEMPLATE_LOOP;  }catch (  EntryDeletedException ex) {    continue ENTRY_LOOP;  }catch (  RuntimeException ex) {    after_xtn_activity_error(context,template,ex,true);    continue ENTRY_LOOP;  }}}try {_engine.touchLastEntryTimestamp();_engine.getTemplateScanner().scanNonNotifyTemplates(context,entry,null,FifoSearch.NO,FifoGroupsSearch.NO);} catch (EntryDeletedException ex) {continue ENTRY_LOOP;}}}}  finally {if (entriesIter != null) entriesIter.close();}_engine.getTransactionHandler().removeTransactionAfterEnd(xtnEntry);}  finally {_cacheManager.freeCacheContext(context);}}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  @Deprecated public static void makeHiddenFormSubmitForm(Appendable writer,String target,String targetType,String targetWindow,Map<String,String> parameterMap,HttpServletRequest request,HttpServletResponse response,ModelForm modelForm,Map<String,Object> context) throws IOException {  String hiddenFormName=makeLinkHiddenFormName(context,modelForm,"submitForm" + modelForm.getItemIndexSeparator() + new Random().nextInt(Integer.MAX_VALUE));  if (modelForm.getUseRowSubmit())   makeJSForRowSubmit(writer,context,modelForm,hiddenFormName); else   makeJSForInlineSubmit(writer,context,modelForm,hiddenFormName);  writer.append("<form method=\"post\"");  writer.append(" action=\"");  if (UtilValidate.isNotEmpty(target)) {    WidgetWorker.buildHyperlinkUrl(writer,target,targetType,null,null,null,null,null,request,response,context);  }  writer.append("\"");  if (UtilValidate.isNotEmpty(targetWindow)) {    writer.append(" target=\"");    writer.append(targetWindow);    writer.append("\"");  }  writer.append(" onsubmit=\"javascript:submitFormDisableSubmits(this);\"");  writer.append(" name=\"");  writer.append(hiddenFormName);  writer.append("\">");  for (  Map.Entry<String,String> parameter : parameterMap.entrySet()) {    if (parameter.getValue() != null) {      writer.append("<input name=\"");      writer.append(parameter.getKey());      writer.append("\" value=\"");      writer.append(encode(parameter.getValue(),context));      writer.append("\" type=\"hidden\"/>");    }  }  writer.append("</form>");}  }
class C{  public InfoflowResults runInfoflow(ResultsAvailableHandler onResultsAvailable){  if (this.sourceSinkProvider == null)   throw new RuntimeException("Sources and/or sinks not calculated yet");  System.out.println("Running data flow analysis on " + apkFileLocation + " with "+ getSources().size()+ " sources and "+ getSinks().size()+ " sinks...");  Infoflow info;  if (cfgFactory == null)   info=new Infoflow(androidJar,forceAndroidJar,null,new DefaultPathBuilderFactory(pathBuilder,computeResultPaths)); else   info=new Infoflow(androidJar,forceAndroidJar,cfgFactory,new DefaultPathBuilderFactory(pathBuilder,computeResultPaths));  final String path;  if (forceAndroidJar)   path=androidJar; else   path=Scene.v().getAndroidJarPath(androidJar,apkFileLocation);  info.setTaintWrapper(taintWrapper);  if (onResultsAvailable != null)   info.addResultsAvailableHandler(onResultsAvailable);  System.out.println("Starting infoflow computation...");  info.setSootConfig(sootConfig);  info.setStopAfterFirstFlow(stopAfterFirstFlow);  info.setEnableImplicitFlows(enableImplicitFlows);  info.setEnableStaticFieldTracking(enableStaticFields);  info.setEnableExceptionTracking(enableExceptions);  Infoflow.setAccessPathLength(accessPathLength);  info.setFlowSensitiveAliasing(flowSensitiveAliasing);  info.setIgnoreFlowsInSystemPackages(ignoreFlowsInSystemPackages);  info.setCodeEliminationMode(codeEliminationMode);  info.setInspectSources(false);  info.setInspectSinks(false);  info.setCallgraphAlgorithm(callgraphAlgorithm);  if (null != ipcManager) {    info.setIPCManager(ipcManager);  }  info.computeInfoflow(apkFileLocation,path,entryPointCreator,sourceSinkManager);  icfg=info.getiCfg();  this.maxMemoryConsumption=info.getMaxMemoryConsumption();  return info.getResults();}  }
class C{  private static void logOutput(Level level,Command cmd,final String outputType,ByteArrayOutputStream outputBytes){  String string=asString(outputBytes).trim();  if (string.isEmpty()) {    return;  }  for (  String line : string.split(System.lineSeparator())) {    logger.log(level,"'" + cmd.getCommandLineElements()[0] + "' "+ outputType+ ": "+ line);  }}  }
class C{  public NewsfeedGetRecommendedQuery endTime(Integer value){  return unsafeParam("end_time",value);}  }
class C{  public static double pow(double d,long e){  if (e == 0) {    return 1.0;  } else   if (e > 0) {    return new Split(d).pow(e).full;  } else {    return new Split(d).reciprocal().pow(-e).full;  }}  }
class C{  public Matrix3f multLocal(float scale){  m00*=scale;  m01*=scale;  m02*=scale;  m10*=scale;  m11*=scale;  m12*=scale;  m20*=scale;  m21*=scale;  m22*=scale;  return this;}  }
class C{  private void showLoading(){  progressBar.setVisibility(View.VISIBLE);  recyclerView.setVisibility(View.GONE);  emptyTextView.setVisibility(View.GONE);}  }
class C{  private void initView(){  SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_me_swipeBackLayout);  swipeBackLayout.setOnSwipeListener(this);  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_me_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)findViewById(R.id.activity_me_container);  this.appBar=(AppBarLayout)findViewById(R.id.activity_me_appBar);  this.toolbar=(Toolbar)findViewById(R.id.activity_me_toolbar);  if (Mysplash.getInstance().isLightTheme()) {    if (getIntent().getBooleanExtra(EXTRA_BROWSABLE,false)) {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_light);    } else {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);    }    toolbar.inflateMenu(R.menu.activity_me_toolbar_light);  } else {    if (getIntent().getBooleanExtra(EXTRA_BROWSABLE,false)) {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_dark);    } else {      toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);    }    toolbar.inflateMenu(R.menu.activity_me_toolbar_dark);  }  toolbar.setOnMenuItemClickListener(this);  toolbar.setNavigationOnClickListener(this);  this.avatar=(CircleImageView)findViewById(R.id.activity_me_avatar);  this.title=(TextView)findViewById(R.id.activity_me_title);  this.meProfileView=(MeProfileView)findViewById(R.id.activity_me_profileView);  initPages();  this.utils=new DisplayUtils(this);  drawProfile();}  }
class C{  public static Location deserialize(Map<String,Object> args){  World world=Bukkit.getWorld((String)args.get("world"));  if (world == null) {    throw new IllegalArgumentException("unknown world");  }  return new Location(world,NumberConversions.toDouble(args.get("x")),NumberConversions.toDouble(args.get("y")),NumberConversions.toDouble(args.get("z")),NumberConversions.toFloat(args.get("yaw")),NumberConversions.toFloat(args.get("pitch")));}  }
class C{  public void resetInternalTimer(){  this.frameStart=-1;  this.nextFrameStart=0;  this.totalRead=0;}  }
class C{  public static GenericValue create(GenericValue value){  GenericValue newValue=new GenericValue();  newValue.init(value);  return newValue;}  }
class C{  protected DfpDec(final DfpField factory,byte x){  super(factory,x);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CLIENT_APPKEY;case 2:  return TRACE_ID;case 3:return SPAN_ID;case 4:return ROOT_MESSAGE_ID;case 5:return CURRENT_MESSAGE_ID;case 6:return SERVER_MESSAGE_ID;case 7:return DEBUG;case 8:return SAMPLE;case 9:return CLIENT_IP;default :return null;}}  }
class C{  public MessagesSendQuery lat(Float value){  return unsafeParam("lat",value);}  }
class C{  public UseItemPotionResponse.Result usePotion(ItemId itemId) throws LoginFailedException, RemoteServerException {  Item potion=api.getInventories().getItemBag().getItem(itemId);  if (!potion.isPotion() || potion.getCount() < 1 || !isInjured())   return UseItemPotionResponse.Result.ERROR_CANNOT_USE;  UseItemPotionMessageOuterClass.UseItemPotionMessage reqMsg=UseItemPotionMessageOuterClass.UseItemPotionMessage.newBuilder().setItemId(itemId).setPokemonId(getId()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.USE_ITEM_POTION,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  UseItemPotionResponse response;  try {    response=UseItemPotionResponse.parseFrom(serverRequest.getData());    if (response.getResult() == UseItemPotionResponse.Result.SUCCESS) {      setStamina(response.getStamina());    }    return response.getResult();  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }}  }
class C{  @Override public ImageWritable transform(ImageWritable image,Random random){  if (image == null) {    return null;  }  Mat mat=converter.convert(image.getFrame());  int top=random != null ? random.nextInt(cropTop + 1) : cropTop;  int left=random != null ? random.nextInt(cropLeft + 1) : cropLeft;  int bottom=random != null ? random.nextInt(cropBottom + 1) : cropBottom;  int right=random != null ? random.nextInt(cropRight + 1) : cropRight;  int y=Math.min(top,mat.rows() - 1);  int x=Math.min(left,mat.cols() - 1);  int h=Math.max(1,mat.rows() - bottom - y);  int w=Math.max(1,mat.cols() - right - x);  Mat result=mat.apply(new Rect(x,y,w,h));  return new ImageWritable(converter.convert(result));}  }
class C{  public void remove(IObjectInfo<T> oi){  lock.lock();  try {    remove_impl((ObjectInfo<T>)oi);  }  finally {    lock.unlock();  }}  }
class C{  public Constant nextVal(Type type){  Constant val=pg.getVal(currentPos,type);  currentPos+=Page.size(val);  return val;}  }
class C{  Domino<T,R> defaultScheduler(){  return schedule(new DefaultScheduler());}  }
class C{  public static long string2long(String s){  s=s.trim();  final int lastpos=s.length() - 1;  final char lastchar=s.charAt(lastpos);  if (Character.isDigit(lastchar))   return Long.parseLong(s); else {    long prefix=TraditionalBinaryPrefix.valueOf(lastchar).value;    long num=Long.parseLong(s.substring(0,lastpos));    if (num > (Long.MAX_VALUE / prefix) || num < (Long.MIN_VALUE / prefix)) {      throw new IllegalArgumentException(s + " does not fit in a Long");    }    return num * prefix;  }}  }
class C{  public DefaultDeploymentCache(){  this.cache=Collections.synchronizedMap(new HashMap<String,T>());}  }
class C{  public Expression lessThan(Value v1,Value v2){  return new BinaryExpression(v1,v2,ExpressionType.LESS_THAN);}  }
class C{  public static boolean[] identifyDimensionType(List<CarbonDimension> tableDimensionList){  List<Boolean> isDictionaryDimensions=new ArrayList<Boolean>();  Set<Integer> processedColumnGroup=new HashSet<Integer>();  for (  CarbonDimension carbonDimension : tableDimensionList) {    List<CarbonDimension> childs=carbonDimension.getListOfChildDimensions();    if (null != childs && childs.size() > 0) {      break;    }    if (carbonDimension.isColumnar() && hasEncoding(carbonDimension.getEncoder(),Encoding.DICTIONARY)) {      isDictionaryDimensions.add(true);    } else     if (!carbonDimension.isColumnar()) {      if (processedColumnGroup.add(carbonDimension.columnGroupId())) {        isDictionaryDimensions.add(true);      }    } else {      isDictionaryDimensions.add(false);    }  }  boolean[] primitive=ArrayUtils.toPrimitive(isDictionaryDimensions.toArray(new Boolean[isDictionaryDimensions.size()]));  return primitive;}  }
class C{  public static boolean FlymeSetStatusBarLightMode(Window window,boolean dark){  boolean result=false;  if (window != null) {    try {      WindowManager.LayoutParams lp=window.getAttributes();      Field darkFlag=WindowManager.LayoutParams.class.getDeclaredField("MEIZU_FLAG_DARK_STATUS_BAR_ICON");      Field meizuFlags=WindowManager.LayoutParams.class.getDeclaredField("meizuFlags");      darkFlag.setAccessible(true);      meizuFlags.setAccessible(true);      int bit=darkFlag.getInt(null);      int value=meizuFlags.getInt(lp);      if (dark) {        value|=bit;      } else {        value&=~bit;      }      meizuFlags.setInt(lp,value);      window.setAttributes(lp);      result=true;    } catch (    Exception e) {    }  }  return result;}  }
class C{  public void drawScreen(int par1,int par2,float par3){  if (reinit) {    initGui();    reinit=false;  }  super.drawScreen(par1,par2,par3);}  }
class C{  public static final void onPlayerLogin(Player player){  for (  PlayerAlliance alliance : alliances.values()) {    PlayerAllianceMember member=alliance.getMember(player.getObjectId());    if (member != null) {      alliance.onEvent(new PlayerConnectedEvent(alliance,player));    }  }}  }
class C{  public static List<DataFileFooter> readCarbonIndexFile(String taskId,List<TableBlockInfo> tableBlockInfoList,AbsoluteTableIdentifier absoluteTableIdentifier) throws CarbonUtilException {  Collections.sort(tableBlockInfoList);  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());  String carbonIndexFilePath=carbonTablePath.getCarbonIndexFilePath(taskId,"0",tableBlockInfoList.get(0).getSegmentId());  DataFileFooterConverter fileFooterConverter=new DataFileFooterConverter();  try {    return fileFooterConverter.getIndexInfo(carbonIndexFilePath,tableBlockInfoList);  } catch (  IOException e) {    throw new CarbonUtilException("Problem while reading the file metadata",e);  }}  }
class C{  public static <T extends RealFieldElement<T>>T distanceInf(final FieldVector3D<T> v1,final Vector3D v2){  return v1.distanceInf(v2);}  }
class C{  public boolean relative(int rows) throws GenericEntityException {  if (closed)   throw new GenericResultSetClosedException("This EntityListIterator has been closed, this operation cannot be performed");  try {    return resultSet.relative(rows);  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error going to the relative index " + rows,e);  }}  }
class C{  public SM_L2AUTH_LOGIN_CHECK(boolean ok,String accountName){  this.ok=ok;  this.accountName=accountName;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  void onSave(DataSupport baseObj) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  String className=baseObj.getClassName();  List<Field> supportedFields=getSupportedFields(className);  Collection<AssociationsInfo> associationInfos=getAssociationInfo(className);  if (!baseObj.isSaved()) {    if (!ignoreAssociations) {      analyzeAssociatedModels(baseObj,associationInfos);    }    doSaveAction(baseObj,supportedFields);    if (!ignoreAssociations) {      analyzeAssociatedModels(baseObj,associationInfos);    }  } else {    if (!ignoreAssociations) {      analyzeAssociatedModels(baseObj,associationInfos);    }    doUpdateAction(baseObj,supportedFields);  }}  }
class C{  public DynamicTemplateParameterContext appendParameter(String paramName,String paramValue,ContextInfo contextInfo){  return appendParameter(paramName,paramValue,false,false,contextInfo);}  }
class C{  public void renderCenter(GL2 gl){  Vector2 c=this.mass.getCenter();  gl.glColor4fv(Preferences.getBodyCenterColor(),0);  RenderUtilities.drawPoint(gl,c);}  }
class C{  public UnrevealBuilder withUnrevealDuration(final int unrevealDuration){  this.mUnrevealDuration=unrevealDuration;  return this;}  }
class C{  @Override public void flush() throws IOException {  try {    out.flush();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  @Override public void run(){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("scheduler[" + this.sourceDataTag.getId() + "] : entering run()..");  }  try {synchronized (this.sourceDataTag) {      if (isScheduledForSending()) {        SourceDataTagValue currentSDValue=this.sourceDataTag.getCurrentValue();        FilterType filterType;        if (this.lastSourceDataTag == null) {          filterType=FilterType.NO_FILTERING;          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : first time running scheduler");          }        } else {          Object newValueCasted=TypeConverter.cast(currentSDValue.getValue(),this.lastSourceDataTag.getDataType());          ValueUpdate update=new ValueUpdate(newValueCasted,currentSDValue.getValueDescription(),currentSDValue.getTimestamp().getTime());          filterType=this.dataTagValueFilter.isCandidateForFiltering(this.lastSourceDataTag,update,currentSDValue.getQuality());          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : Filter type: "+ filterType);          }        }        if (filterType == FilterType.NO_FILTERING) {          this.lastSourceDataTag=this.sourceDataTag.clone();          currentSDValue.setValueDescription("Time-deadband filtering enabled. " + currentSDValue.getValueDescription());          this.processMessageSender.addValue(currentSDValue);          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : sending value: "+ currentSDValue.getValue());          }        } else {          ValueUpdate update=new ValueUpdate(currentSDValue.getValue(),currentSDValue.getValueDescription(),currentSDValue.getTimestamp().getTime());          if (this.dynamicTimeDeadbandFilterer.isDynamicTimeDeadband(this.sourceDataTag)) {            if (LOGGER.isDebugEnabled()) {              LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : value filtered with Dynamic TimeDeadband : "+ currentSDValue.getValue());            }            this.equipmentSenderFilterModule.sendToFilterModuleByDynamicTimedeadbandFilterer(this.sourceDataTag,update,filterType.getNumber());          } else {            if (LOGGER.isDebugEnabled()) {              LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : value filtered with Static TimeDeadband: "+ currentSDValue.getValue());            }            this.equipmentSenderFilterModule.sendToFilterModule(this.sourceDataTag,update,filterType.getNumber());          }        }        this.sendValue=false;      } else {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : no new value to be sent");        }      }    }  } catch (  Exception exception) {    LOGGER.error("Critical error in scheduler for tag " + this.sourceDataTag.getId(),exception);  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("scheduler[" + this.sourceDataTag.getId() + "] : leaving run()");  }}  }
class C{  public List<Object> toList(){  Object[] copiedElements=new Object[numElements];  System.arraycopy(elements,0,copiedElements,0,numElements);  return Arrays.asList(copiedElements);}  }
class C{  public boolean canSet(Class type){  return false;}  }
class C{  public void run(){  consumerObject.dispatch(task);}  }
class C{  private LocatorReg removeDiscoveredLocator(LookupLocator lct){  Iterator iter=discoveredLocators.iterator();  while (iter.hasNext()) {    LocatorReg reg=(LocatorReg)iter.next();    if (reg.l.equals(lct)) {      iter.remove();      return reg;    }  }  return null;}  }
class C{  public GroupsEditQuery marketContact(Integer value){  return unsafeParam("market_contact",value);}  }
class C{  public PhotosCreateCommentQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.createComment",Integer.class);  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  protected void prepareBlock(){}  }
class C{  public static boolean parseFloatAttribute(@NotNull String value,TypedValue outValue,boolean requireUnit){  value=value.trim();  int len=value.length();  if (len <= 0) {    return false;  }  char[] buf=value.toCharArray();  for (int i=0; i < len; i++) {    if (buf[i] > 255) {      return false;    }  }  if ((buf[0] < '0' || buf[0] > '9') && buf[0] != '.' && buf[0] != '-' && buf[0] != '+') {    return false;  }  Matcher m=sFloatPattern.matcher(value);  if (m.matches()) {    String f_str=m.group(1);    String end=m.group(2);    float f;    try {      f=Float.parseFloat(f_str);    } catch (    NumberFormatException e) {      return false;    }    if (end.length() > 0 && end.charAt(0) != ' ') {      if (parseUnit(end,outValue,sFloatOut)) {        computeTypedValue(outValue,f,sFloatOut[0]);        return true;      }      return false;    }    end=end.trim();    if (end.length() == 0) {      if (outValue != null) {        if (!requireUnit) {          outValue.type=TypedValue.TYPE_FLOAT;          outValue.data=Float.floatToIntBits(f);        } else {          applyUnit(sUnitNames[1],outValue,sFloatOut);          computeTypedValue(outValue,f,sFloatOut[0]);          LOG.warn(String.format(DIMENSION_ERROR_FORMAT,value));        }        return true;      }    }  }  return false;}  }
class C{  @Deployment public void testParallelJoinEndTime(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("forkJoin");  List<Task> tasksToComplete=taskService.createTaskQuery().processInstanceId(processInstance.getId()).list();  assertEquals(2,tasksToComplete.size());  taskService.complete(tasksToComplete.get(0).getId());  taskService.complete(tasksToComplete.get(1).getId());  List<HistoricActivityInstance> historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId("join").processInstanceId(processInstance.getId()).list();  assertNotNull(historicActivityInstance);  assertEquals(2,historicActivityInstance.size());  assertNotNull(historicActivityInstance.get(0).getEndTime());  assertNotNull(historicActivityInstance.get(1).getEndTime());}  }
class C{  public Clock(Log log){  super();  this.log=log;}  }
class C{  public Matrix cov(){  Matrix transe=this.transpose();  Matrix result=new Matrix(transe.m,transe.m);  for (int currM=0; currM < transe.m; currM++) {    for (int currN=currM; currN < transe.m; currN++) {      double covMN=cov(transe.A[currM],transe.A[currN]);      result.A[currM][currN]=covMN;      result.A[currN][currM]=covMN;    }  }  return result;}  }
class C{  public static void main(String[] args){  DocumentSet dsSet=new DocumentSet("/home/ggianna/JInsect/summaries",1.0);  dsSet.createSets();  if (dsSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    System.exit(-1);  }  System.out.println("@relation jinsect\n");  System.out.println("@attribute GraphCooccurenceSimilarity real");  System.out.println("@attribute GraphValueSimilarity real");  System.out.println("@attribute GraphSizeSimilarity real");  System.out.println("@attribute HistogramContainmentSimilarity real");  System.out.println("@attribute HistogramValueSimilarity real");  System.out.println("@attribute HistogramSizeSimilarity real");  System.out.println("@attribute OverallSimilarity real");  System.out.println("@attribute CharGraphCooccurenceSimilarity real");  System.out.println("@attribute CharGraphValueSimilarity real");  System.out.println("@attribute CharGraphSizeSimilarity real");  System.out.println("@attribute NHistogramContainmentSimilarity real");  System.out.println("@attribute NHistogramValueSimilarity real");  System.out.println("@attribute NHistogramSizeSimilarity real");  System.out.println("@attribute NOverallSimilarity real");  System.out.println("@attribute IsSame {TRUE,FALSE}\n");  System.out.println("@data");  HashMap hmCache=new HashMap();  HashMap hmNCache=new HashMap();  int iTotal=dsSet.getTrainingSet().size();  int iCur=0;  StandardDocumentComparator sdcComparator=new StandardDocumentComparator();  Iterator iIter=dsSet.getTrainingSet().iterator();  while (iIter.hasNext()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();    SimpleTextDocument ndDoc1=new SimpleTextDocument();    NGramDocument ndNDoc1=new NGramDocument();    if (hmCache.containsKey(cfeCur.getFileName())) {      ndDoc1=(SimpleTextDocument)hmCache.get(cfeCur.getFileName());      ndNDoc1=(NGramDocument)hmNCache.get(cfeCur.getFileName());    } else {      ndDoc1.loadDataStringFromFile(cfeCur.getFileName());      ndNDoc1.loadDataStringFromFile(cfeCur.getFileName());    }    Iterator iOtherIter=dsSet.getTrainingSet().subList(dsSet.getTrainingSet().indexOf(cfeCur),dsSet.getTrainingSet().size()).iterator();    while (iOtherIter.hasNext()) {      CategorizedFileEntry cfeOther=(CategorizedFileEntry)iOtherIter.next();      SimpleTextDocument ndDoc2=new SimpleTextDocument();      NGramDocument ndNDoc2=new NGramDocument();      if (hmCache.containsKey(cfeOther.getFileName())) {        ndDoc2=(SimpleTextDocument)hmCache.get(cfeOther.getFileName());        ndNDoc2=(SimpleTextDocument)hmCache.get(cfeOther.getFileName());      } else {        ndDoc2.loadDataStringFromFile(cfeOther.getFileName());        ndNDoc2.loadDataStringFromFile(cfeOther.getFileName());      }      try {        GraphSimilarity sSimil;        sSimil=sdcComparator.getSimilarityBetween(ndDoc1,ndDoc2);        GraphSimilarity sSimil2;        sSimil2=sdcComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);        System.out.print(sdcComparator.getGraphSimilarity().ContainmentSimilarity + "," + sdcComparator.getGraphSimilarity().ValueSimilarity+ ","+ sdcComparator.getGraphSimilarity().SizeSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ContainmentSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ValueSimilarity+ ","+ sdcComparator.getHistogramSimilarity().SizeSimilarity+ ","+ sSimil.getOverallSimilarity()+ ",");        System.out.println(sdcComparator.getGraphSimilarity().ContainmentSimilarity + "," + sdcComparator.getGraphSimilarity().ValueSimilarity+ ","+ sdcComparator.getGraphSimilarity().SizeSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ContainmentSimilarity+ ","+ sdcComparator.getHistogramSimilarity().ValueSimilarity+ ","+ sdcComparator.getHistogramSimilarity().SizeSimilarity+ ","+ sSimil.getOverallSimilarity()+ ","+ (((cfeOther.getCategory() == cfeCur.getCategory()) || (cfeCur.getFileName().substring(cfeCur.getFileName().lastIndexOf("/")) == cfeCur.getFileName().substring(cfeCur.getFileName().lastIndexOf("/")))) ? "TRUE" : "FALSE"));      } catch (      InvalidClassException iceE) {        System.err.println("Cannot compare...");      }    }    System.err.println("Completed " + (double)iCur++ / iTotal * 100 + "%");  }}  }
class C{  public void showContent(List<Integer> skipIds){  switchState(CONTENT,null,null,null,null,null,skipIds);}  }
class C{  public void removeAllListeners(){  listeners.clear();}  }
class C{  private List<ColumnModel> findColumnsToAdd(){  List<ColumnModel> columnsToAdd=new ArrayList<ColumnModel>();  for (  ColumnModel columnModel : mTableModel.getColumnModels()) {    String columnName=columnModel.getColumnName();    if (!mTableModelDB.containsColumn(columnName)) {      columnsToAdd.add(columnModel);    }  }  return columnsToAdd;}  }
class C{  public void insert(int offset,short[] values){  insert(offset,values,0,values.length);}  }
class C{  public void insertTemplate(Context context,ITemplateHolder templateHolder,boolean shouldReplicate){  final NotifyTemplateHolder notifyTemplateHolder=templateHolder.isNotifyTemplate() ? (NotifyTemplateHolder)templateHolder : null;  TemplateCacheInfo pTemplate=null;  if (templateHolder.isNotifyTemplate()) {    pTemplate=new TemplateCacheInfo(templateHolder);    TemplateCacheInfo oldValue=_templatesManager.putIfAbsent(pTemplate);    if (oldValue != null) {      if (_logger.isLoggable(Level.WARNING))       _logger.warning("notify template already in space, uid=" + oldValue.m_TemplateHolder.getUID() + " , in class: "+ oldValue.m_TemplateHolder.getClassName());      return;    }  }  templateHolder.setInCache();  if (!templateHolder.isExplicitInsertionToExpirationManager())   _templateExpirationManager.addTemplate(templateHolder);  if (templateHolder.isNotifyTemplate() && templateHolder.getXidOriginatedTransaction() == null && shouldReplicate) {    final IReplicationOutContext replCtx=getReplicationContext(context);    updateReplicationContext(replCtx,context);    _replicationNode.outInsertNotifyTemplate(replCtx,notifyTemplateHolder);  }  if (templateHolder.getXidOriginated() != null && templateHolder.isNotifyTemplate()) {    templateHolder.getXidOriginated().setOperatedUpon();  }  if (pTemplate == null) {    pTemplate=new TemplateCacheInfo(templateHolder);    _templatesManager.put(pTemplate);  }  insertTemplateToCache(context,pTemplate);  if (!context.isSyncReplFromMultipleOperation() && shouldReplicate)   _engine.performReplication(context);  if (notifyTemplateHolder != null) {    CustomInfo customInfo=notifyTemplateHolder.getNotifyInfo().getCustomInfo();    if (customInfo != null && customInfo.isLocalCacheCustomInfo()) {      _localCacheRegistrations.add(notifyTemplateHolder);    }  }}  }
class C{  public void removeItem(final ExpandingItem item){  mContainer.removeView(item);}  }
class C{  protected T createAbstractEquipment(final ConfigurationElement element) throws IllegalAccessException {  abstractEquipmentCache.acquireWriteLockOnKey(element.getEntityId());  try {    LOGGER.debug("Creating (Sub)Equipment " + element.getEntityId());    T abstractEquipment=commonEquipmentFacade.createCacheObject(element.getEntityId(),element.getElementProperties());    try {      configurableDAO.insert(abstractEquipment);      abstractEquipmentCache.putQuiet(abstractEquipment);      if (abstractEquipment.getAliveTagId() != null) {        commonEquipmentFacade.loadAndStartAliveTag(abstractEquipment.getId());      }      if (abstractEquipment.getCommFaultTagId() != null) {        commFaultTagCache.remove(abstractEquipment.getCommFaultTagId());        commFaultTagCache.loadFromDb(abstractEquipment.getCommFaultTagId());      }    } catch (    Exception e) {      if (abstractEquipment.getAliveTagId() != null) {        aliveTimerCache.remove(abstractEquipment.getId());      }      if (abstractEquipment.getCommFaultTagId() != null) {        commFaultTagCache.remove(abstractEquipment.getCommFaultTagId());      }      throw new UnexpectedRollbackException("Exception caught while creating equipment: rolling back changes",e);    }    return abstractEquipment;  }  finally {    abstractEquipmentCache.releaseWriteLockOnKey(element.getEntityId());  }}  }
class C{  @RequestMapping(value="/configs",method=RequestMethod.GET) public JsonResponse pagingConfig(@RequestParam("appId") Long appId,@RequestParam(value="configName",defaultValue="") String configName,@RequestParam(value="pageNo",defaultValue="1") Integer pageNo,@RequestParam(value="pageSize",defaultValue="10") Integer pageSize){  Response<Page<Config>> pagingResp=configService.pagingConfig(appId,configName,pageNo,pageSize);  if (!pagingResp.isSuccess()) {    Logs.error("failed to paging config(appId={}, configName={}), cause: {}",appId,configName,pagingResp.getErr());    return JsonResponse.notOk(pagingResp.getErr());  }  return JsonResponse.ok(pagingResp.getData());}  }
class C{  public boolean equivalent(Object a,Object b){  return nodeToComponent.get(a) == nodeToComponent.get(b);}  }
class C{  public SimpleServiceEngine(ServiceDispatcher dispatcher){  super(dispatcher);}  }
class C{  private void determineSizesFromTaxonomyClassification(){  Map<Integer,Integer[]> class2count=classification2class2counts.get(ClassificationType.Taxonomy.toString());  if (class2count != null) {    int[] sizes=new int[getNumberOfSamples()];    for (    Integer classId : class2count.keySet()) {      Integer[] counts=class2count.get(classId);      if (counts != null) {        for (int i=0; i < getNumberOfSamples(); i++) {          if (counts[i] != null)           sizes[i]+=counts[i];        }      }    }    sampleSizes.clear();    for (    Integer size : sizes)     sampleSizes.add(size);  }}  }
class C{  private void moveOverlayUpOrDownToMatchAppraisalBox(){  if (windowManager == null) {    return;  }  if (infoLayout.getLayoutParams() == null) {    return;  }  moveOverlay(inputBox.getVisibility() == View.VISIBLE && appraisalBox.getVisibility() == View.VISIBLE);}  }
class C{  public Builder categoricalToInteger(String... columnNames){  for (  String s : columnNames) {    transform(new CategoricalToIntegerTransform(s));  }  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_SUMMONED_CRITICAL(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1200003,value0,num2,value1);}  }
class C{  protected void writePalette() throws IOException {  out.write(colorTab,0,colorTab.length);  int n=(3 * 256) - colorTab.length;  for (int i=0; i < n; i++) {    out.write(0);  }}  }
class C{  public final TestSubscriber<T> assertFusionRejected(){  if (establishedFusionMode != Fuseable.NONE) {    throw new AssertionError("Fusion was granted");  }  return this;}  }
class C{  public ReverseGeoCode(ZipInputStream zippedPlacednames,boolean majorOnly) throws IOException {  ZipEntry entry;  do {    entry=zippedPlacednames.getNextEntry();  } while (entry.getName().equals("readme.txt"));  createKdTree(zippedPlacednames,majorOnly);}  }
class C{  public void deletePersistentStore(){  try {    close();  } catch (  IOException e) {  }  try {    deleteLogFile(version);  } catch (  LogException e) {  }  try {    deleteSnapshot(version);  } catch (  LogException e) {  }  try {    deleteFile(fName(versionFile));  } catch (  LogException e) {  }  try {    dir.delete();  } catch (  SecurityException e) {  }}  }
class C{  public void use(int ind){  if (dat.get(ind).check >= 0)   System.out.println("cell reused!!");  if (dat.get(ind).base == 1) {    head=dat.get(ind).check;  } else {    dat.get(-dat.get(ind).base).check=dat.get(ind).check;  }  if (dat.get(ind).check == -datSize) {    tail=dat.get(ind).base;  } else {    dat.get(-dat.get(ind).check).base=dat.get(ind).base;  }  dat.get(ind).check=ind;}  }
class C{  public double sumOfValues(){  double dSum=0;  Iterator iValIter=hDistro.values().iterator();  while (iValIter.hasNext()) {    dSum+=(Double)iValIter.next();  }  return dSum;}  }
class C{  public static StateListDrawable toStateListDrawable(int normalColor,int pressedColor){  return toStateListDrawable(normalColor,pressedColor,pressedColor,normalColor);}  }
class C{  private boolean isBeforeParent(final BSPTree<Sphere1D> node){  final BSPTree<Sphere1D> parent=node.getParent();  if (parent == null) {    return false;  } else {    return node == childBefore(parent);  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException {  _readExternal(in);}  }
class C{  protected NotesEditCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  private void init(T referent){  _hashCode=System.identityHashCode(referent);}  }
class C{  @Override public Optional<Object> provideValue(Object pageObject,Field field,PageObjectContext context){  FramePath framePath=frameMap.get(pageObject);  PageObjectListInvocationHandler handler=new PageObjectListInvocationHandler(PageObjectProviderHelper.getGenericType(field),context.getElementLocatorFactory().createLocator(field),injector,shouldCacheResults(field),framePath);  ClassLoader classLoader=PageObjectProviderHelper.getGenericType(field).getClassLoader();  Object proxyInstance=Proxy.newProxyInstance(classLoader,new Class[]{List.class},handler);  return Optional.of(proxyInstance);}  }
class C{  private void createUI(){  panel=new JPanel();  panel.setLayout(null);  createField(FIELD_DB_TYPE,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.databaseType"));  createField(FIELD_SERVER,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.server"));  createField(FIELD_PORT,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.port"));  createField(FIELD_INSTANCE,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.instance"));  createField(FIELD_USER,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.username"));  createField(FIELD_PASSWORD,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.password"));  panel.setPreferredSize(new Dimension(FIELD_X + FIELD_WIDTH,textFieldMap.size() * ROW_HEIGHT));}  }
class C{  public static boolean AM(int packedTime){  return packedTime < NOON;}  }
class C{  private boolean checkValidation(final SourceDataTag currentSourceDataTag,final ValueUpdate update){  if (!isTimestampValid(currentSourceDataTag,update)) {    return false;  }  if (!isConvertible(currentSourceDataTag,update)) {    return false;  }  if (isNumber(currentSourceDataTag.getDataType()) && !isInRange(currentSourceDataTag,update)) {    return false;  }  return true;}  }
class C{  public int hashCode(){  return (new Integer(head.label)).hashCode();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void copyResidualsPulse(byte[] source,int targetPosition,int targetSize){  int unitSize=source.length;  short sample=(short)(source[0] + 128);  if (unitSize < targetSize) {    residuals[(targetSize - unitSize) / 2]=WaveUtils.shortToUlaw(sample);  } else {    residuals[(unitSize - targetSize) / 2]=WaveUtils.shortToUlaw(sample);  }}  }
class C{  public EntityQuery cache(){  this.useCache=true;  return this;}  }
class C{  @Override public long blocksAccessed(){  return sp.blocksAccessed();}  }
class C{  private void checkAndNotify(FileEntry parent,FileEntry[] previous,File[] files){  int c=0;  FileEntry[] current=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (  FileEntry entry : previous) {    while (c < files.length && comparator.compare(entry.getFile(),files[c]) > 0) {      current[c]=createFileEntry(parent,files[c]);      doCreate(current[c]);      c++;    }    if (c < files.length && comparator.compare(entry.getFile(),files[c]) == 0) {      doMatch(entry,files[c]);      checkAndNotify(entry,entry.getChildren(),listFiles(files[c]));      current[c]=entry;      c++;    } else {      checkAndNotify(entry,entry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);      doDelete(entry);    }  }  for (; c < files.length; c++) {    current[c]=createFileEntry(parent,files[c]);    doCreate(current[c]);  }  parent.setChildren(current);}  }
class C{  public PartialExtractionFunction withPattern(Pattern pattern){  return new PartialExtractionFunction(pattern);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  private void handleException(final Call call,final Exception e,final Callback callback){  if (call.isCanceled()) {    callback.onCancellation();  } else {    callback.onFailure(e);  }}  }
class C{  public ResourceLazyLoadingScript routing(Object routing){  this.routing=routing;  return this;}  }
class C{  private void addInteger(){  int oldPos=pos - 1;  String literal=scanInteger();  final String substring;  final int radix;  if (literal.startsWith("0x") || literal.startsWith("0X")) {    radix=16;    substring=literal.substring(2);  } else   if (literal.startsWith("0") && literal.length() > 1) {    radix=8;    substring=literal.substring(1);  } else {    radix=10;    substring=literal;  }  int value=0;  try {    value=Integer.parseInt(substring,radix);  } catch (  NumberFormatException e) {    error("invalid base-" + radix + " integer constant: "+ literal);  }  addToken(TokenKind.INT,oldPos,pos,value);}  }
class C{  public List<String> endpoints(){  return this.endpoints;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  _compassView=new CompassView(this);  setContentView(_compassView);  mRegisteredSensor=false;  mSensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);}  }
class C{  public CastExpr newCastExpr(Value op1,Type t){  return new JCastExpr(op1,t);}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public Pair<PositionImpl,PositionImpl> cursorUpdated(ManagedCursor cursor,Position newPosition){  checkNotNull(cursor);  long stamp=rwLock.writeLock();  try {    Item item=cursors.get(cursor.getName());    if (item == null) {      return null;    }    PositionImpl previousSlowestConsumer=heap.get(0).position;    item.position=(PositionImpl)newPosition;    if (item.idx == 0 || getParent(item).position.compareTo(item.position) <= 0) {      siftDown(item);    } else {      siftUp(item);    }    PositionImpl newSlowestConsumer=heap.get(0).position;    return Pair.create(previousSlowestConsumer,newSlowestConsumer);  }  finally {    rwLock.unlockWrite(stamp);  }}  }
class C{  public String build(){  return StringUtil.join(Arrays.asList(buildSystemName,commandName,targetString)," ");}  }
class C{  private int transition(int state,int symbol){  for (int i=state; i < transitions.length; i++) {    if ((transitions[i] % vocabularySize) == symbol) {      return (transitions[i] / vocabularySize);    }  }  return -1;}  }
class C{  public static Double scaledZ(final double confidence_level,final double max_decisions){  if (confidence_level <= 0.0 || confidence_level >= 1.0) {    throw new IllegalArgumentException("Confidence level must be in the interval (0, 1).");  }  if (max_decisions <= 0.0) {    throw new IllegalArgumentException("Scale factor must be positive.");  }  double significance_level=1.0 - confidence_level;  return normalInverse(1.0 - significance_level / max_decisions / 2.);}  }
class C{  public ResolvingXMLFilter(XMLReader parent,CatalogManager manager){  super(parent);  catalogManager=manager;  catalogResolver=new CatalogResolver(catalogManager);}  }
class C{  @Override public void startDocument() throws SAXException {  saxParser=null;  abandonHope=false;  return;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public WallGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static String normalize(String value){  if (value == null)   return value;  value=value.trim();  if (value.indexOf("  ") == -1)   return value;  boolean space=false;  int len=value.length();  StringBuilder b=new StringBuilder(len);  for (int i=0; i < len; i++) {    char v=value.charAt(i);    if (v == ' ') {      if (!space)       b.append(v);      space=true;    } else {      b.append(v);      space=false;    }  }  return b.toString();}  }
class C{  public PollsEditQuery edit(UserActor actor,int ownerId,int pollId){  return new PollsEditQuery(getClient(),actor,ownerId,pollId);}  }
class C{  public boolean minusFound(){  return minusFound;}  }
class C{  public AccountSetInfoQuery(VkApiClient client,UserActor actor){  super(client,"account.setInfo",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public boolean has(String o,String n){  String s=get(o);  if (s == null) {    return false;  } else {    if (n.indexOf(":") > -1) {      String[] nn=n.split(":");      String[] ss=s.split("_");      for (      String s1 : ss) {        String[] ss1=s1.split(":");        if (ss1[0].equals(nn[0])) {          return true;        }      }    } else {      String[] ss=s.split("_");      for (      String s1 : ss) {        if (s1.equals(n)) {          return true;        }      }    }  }  return false;}  }
class C{  public void addDiscoveryListener(DiscoveryListener l){  if (l == null) {    throw new NullPointerException("can't add null listener");  }synchronized (this) {    if (terminated) {      throw new IllegalStateException("discovery terminated");    }    if (listeners.contains(l))     return;    listeners.add(l);    if (!discoveredLocators.isEmpty()) {      HashMap groupsMap=new HashMap(discoveredLocators.size());      Iterator iter=discoveredLocators.iterator();      for (int i=0; iter.hasNext(); i++) {        LocatorReg reg=(LocatorReg)iter.next();        groupsMap.put(reg.proxy,reg.memberGroups);      }      ArrayList list=new ArrayList(1);      list.add(l);      addNotify(list,groupsMap,false);    }  }}  }
class C{  public static String checkNotEmpty(String value,String name,Location location) throws EvalException {  if (value.isEmpty()) {    throw new EvalException(location,String.format("Invalid empty field '%s'.",name));  }  return value;}  }
class C{  private static void computeRec(Node v,Integer[] countFromAbove,Map<Integer,Integer[]> profile,Set<Integer> H,int numberOfSamples){  final int taxId=(Integer)v.getInfo();  final NodeData vData=(NodeData)v.getData();  if (H.contains(taxId)) {    Integer[] counts=new Integer[numberOfSamples];    for (int i=0; i < counts.length; i++) {      counts[i]=countFromAbove[i] + (vData.getSummarized(i) - vData.getAssigned(i));    }    profile.put(taxId,counts);  } else {    boolean hasChild=false;    final int[] belowV=new int[numberOfSamples];    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {      Node w=e.getTarget();      if (((Integer)w.getInfo()) > 0) {        final NodeData wData=(NodeData)w.getData();        for (int i=0; i < numberOfSamples; i++) {          belowV[i]+=wData.getSummarized(i);        }        hasChild=true;      }    }    if (!hasChild) {    } else {      for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {        Node w=e.getTarget();        if (((Integer)w.getInfo()) > 0) {          final NodeData wData=(NodeData)w.getData();          Integer[] count=new Integer[numberOfSamples];          for (int i=0; i < numberOfSamples; i++) {            if (belowV[i] > 0) {              final double fraction=(double)wData.getSummarized(i) / (double)belowV[i];              count[i]=wData.getAssigned(i) + (int)(countFromAbove[i] * fraction);            } else             count[i]=0;          }          computeRec(w,count,profile,H,numberOfSamples);        }      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_LOGIN_WARNING_GET_ITEM1(String value0){  return new SM_SYSTEM_MESSAGE(1390260,value0);}  }
class C{  public Configuration loadConfigFromResource(Resource resource){  PropertiesConfiguration result=new PropertiesConfiguration();  try {    result.load(resource.getInputStream());    return result;  } catch (  ConfigurationException|IOException e) {    LOG.error(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);    throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);  }}  }
class C{  public ChatClient registerPlayer(int playerId,String playerLogin,String nick) throws NoSuchAlgorithmException, UnsupportedEncodingException {  MessageDigest md=MessageDigest.getInstance("SHA-256");  md.reset();  md.update(playerLogin.getBytes("UTF-8"),0,playerLogin.length());  byte[] accountToken=md.digest();  byte[] token=generateToken(accountToken);  ChatClient chatClient=new ChatClient(playerId,token,nick);  players.put(playerId,chatClient);  return chatClient;}  }
class C{  public static String stripVersionFromRestName(String restName){  Preconditions.checkNotNull(restName);  String version=extractDefaultMajorVersionFromRestName(restName);  String[] segs=restName.split("\\.");  if (segs.length > 1) {    version=version + ".";  }  return restName.startsWith(version) ? restName.substring(version.length()) : restName;}  }
class C{  public GroupsReorderLinkQuery after(Integer value){  return unsafeParam("after",value);}  }
class C{  public DocsSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void type(String... strings){  for (  String s : strings) {    type(s);  }}  }
class C{  public Object minMax(SelectColumn funcColumn,IQueryResultSet<IEntryPacket> entries,boolean isMax){  Object value, maxMin=null;  Iterator<IEntryPacket> iter=entries.iterator();  while (iter.hasNext()) {    IEntryPacket entry=iter.next();    value=entries.getFieldValue(funcColumn,entry);    if (value == null)     continue;    if (maxMin != null)     if (isMax)     maxMin=(((Comparable)value).compareTo(maxMin) > 0) ? value : maxMin; else     maxMin=(((Comparable)value).compareTo(maxMin) < 0) ? value : maxMin; else     maxMin=value;  }  return maxMin;}  }
class C{  public void testDataAttributeCompletion() throws Throwable {  doTestCompletionVariants("dataAttributeCompletion.xml","android:path","android:pathPrefix","android:pathPattern");}  }
class C{  public WrappedIndentingWriter(Writer out,int width){  this(out,width,"");}  }
class C{  @Override public int hashCode(){  if (isNaN()) {    return 542;  }  return 1759 * MathUtils.hash(alpha);}  }
class C{  @Override public int compareTo(byte[] other,int off,int len){  ensureTextSet();  return _comparatorInstance.compare(getBytes(),0,getLength(),other,off,len);}  }
class C{  private static String convertString(final int i){  return String.valueOf(i);}  }
class C{  public static Boolean checkPartyType(Delegator delegator,String partyId,String checkedPartyType){  GenericValue party=null;  GenericValue partyType=null;  GenericValue checkedTypeOfParty=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();    if (UtilValidate.isNotEmpty(party)) {      partyType=party.getRelatedOne("PartyType",true);      checkedTypeOfParty=EntityQuery.use(delegator).from("PartyType").where("partyTypeId",checkedPartyType).cache().queryOne();    } else {      return false;    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  return EntityTypeUtil.isType(partyType,checkedTypeOfParty);}  }
class C{  public void startFirstSampleTimer(){  timer.start("firstAudio");  firstSample=true;}  }
class C{  private Response assureAcceptJSON(IHTTPSession session){  final Map<String,String> headers=session.getHeaders();  if (!APPLICATION_JSON.equals(headers.get(ACCEPT_FIELD))) {    return newFixedLengthResponse(Response.Status.NOT_ACCEPTABLE,MIME_PLAINTEXT,"set accept to application/json or remove it");  } else {    return null;  }}  }
class C{  public NewsfeedSearchQueryWithExtended(VkApiClient client){  super(client,"newsfeed.search",SearchExtendedResponse.class);  extended(true);}  }
class C{  public VideoSaveQuery privacyComment(String... value){  return unsafeParam("privacy_comment",value);}  }
class C{  @Override public void initialize(Configuration conf,InputSplit split) throws IOException, InterruptedException {  initialize(split);}  }
class C{  public HumanTime m(int n){  delta+=MINUTE * Math.abs(n);  return this;}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisc=options.cacheOnDisc;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  public String[] upload_appender_file(byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String group_name=null;  return this.upload_appender_file(group_name,file_buff,offset,length,file_ext_name,meta_list);}  }
class C{  public List<String> provideWhiteList(){  LinkedList<String> whiteList=new LinkedList<>();  whiteList.add("org.chromium");  return whiteList;}  }
class C{  public byte[] lookupAudio(String inputtype,String locale,String voice,String inputtext) throws SQLException {  return lookupAudio(inputtype,locale,voice,null,null,null,inputtext);}  }
class C{  public FocusControl(String focusGroup,int clicks,String act){  ccount=clicks;  activity=act;  this.group=focusGroup;}  }
class C{  private boolean checkDuplicateDrawables(FileHandle handle,int minimum){  int count=0;  String name=DrawableData.proper(handle.name());  for (int i=0; i < AtlasData.getInstance().getDrawables().size; i++) {    DrawableData data=AtlasData.getInstance().getDrawables().get(i);    if (name.equals(DrawableData.proper(data.file.name()))) {      count++;    }  }  return count > minimum;}  }
class C{  void listFields(){  field_info fi;  ConstantValue_attribute cva;  CONSTANT_Utf8_info cm;  int i, j;  for (i=0; i < fields_count; i++) {    fi=fields[i];    G.v().out.print(fi.prototype(constant_pool));    for (j=0; j < fi.attributes_count; j++) {      cm=(CONSTANT_Utf8_info)(constant_pool[fi.attributes[j].attribute_name]);      if (cm.convert().compareTo(attribute_info.ConstantValue) == 0) {        cva=(ConstantValue_attribute)(fi.attributes[j]);        G.v().out.print(" = " + constant_pool[cva.constantvalue_index].toString(constant_pool));        break;      }    }    G.v().out.println(";");  }}  }
class C{  public void addEntry(Entry e,int dataSetIndex){  if (e == null || dataSetIndex < 0 || dataSetIndex >= mDataSets.size())   return;  IDataSet set=mDataSets.get(dataSetIndex);  if (!set.addEntry(e))   return;  calcMinMax(e,set.getAxisDependency());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_PAINT_REMOVE_SUCCEED(int objectNameId){  return new SM_SYSTEM_MESSAGE(1401435,calculateNameId(objectNameId));}  }
class C{  public static Map<String,Object> calculatePurchasePrice(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  List<GenericValue> orderItemPriceInfos=FastList.newInstance();  boolean validPriceFound=false;  BigDecimal price=BigDecimal.ZERO;  GenericValue product=(GenericValue)context.get("product");  String productId=product.getString("productId");  String currencyUomId=(String)context.get("currencyUomId");  String partyId=(String)context.get("partyId");  BigDecimal quantity=(BigDecimal)context.get("quantity");  Locale locale=(Locale)context.get("locale");  if (!validPriceFound) {    Map<String,Object> priceContext=UtilMisc.toMap("currencyUomId",currencyUomId,"partyId",partyId,"productId",productId,"quantity",quantity);    List<GenericValue> productSuppliers=null;    try {      Map<String,Object> priceResult=dispatcher.runSync("getSuppliersForProduct",priceContext);      if (ServiceUtil.isError(priceResult)) {        String errMsg=ServiceUtil.getErrorMessage(priceResult);        Debug.logError(errMsg,module);        return ServiceUtil.returnError(errMsg);      }      productSuppliers=UtilGenerics.checkList(priceResult.get("supplierProducts"));    } catch (    GenericServiceException gse) {      Debug.logError(gse,module);      return ServiceUtil.returnError(gse.getMessage());    }    if (productSuppliers != null) {      for (      GenericValue productSupplier : productSuppliers) {        if (!validPriceFound) {          price=((BigDecimal)productSupplier.get("lastPrice"));          validPriceFound=true;        }        StringBuilder priceInfoDescription=new StringBuilder();        priceInfoDescription.append(UtilProperties.getMessage(resource,"ProductSupplier",locale));        priceInfoDescription.append(" [");        priceInfoDescription.append(UtilProperties.getMessage(resource,"ProductSupplierMinimumOrderQuantity",locale));        priceInfoDescription.append(productSupplier.getBigDecimal("minimumOrderQuantity"));        priceInfoDescription.append(UtilProperties.getMessage(resource,"ProductSupplierLastPrice",locale));        priceInfoDescription.append(productSupplier.getBigDecimal("lastPrice"));        priceInfoDescription.append("]");        GenericValue orderItemPriceInfo=delegator.makeValue("OrderItemPriceInfo");        String priceInfoDescriptionString=priceInfoDescription.toString();        if (priceInfoDescriptionString.length() > 250) {          priceInfoDescriptionString=priceInfoDescriptionString.substring(0,250);        }        orderItemPriceInfo.set("description",priceInfoDescriptionString);        orderItemPriceInfos.add(orderItemPriceInfo);      }    }  }  if (!validPriceFound) {    List<GenericValue> prices=null;    try {      prices=EntityQuery.use(delegator).from("ProductPrice").where("productId",productId,"productPricePurposeId","PURCHASE").orderBy("-fromDate").queryList();      if (UtilValidate.isEmpty(prices)) {        GenericValue parentProduct=ProductWorker.getParentProduct(productId,delegator);        if (parentProduct != null) {          String parentProductId=parentProduct.getString("productId");          prices=EntityQuery.use(delegator).from("ProductPrice").where("productId",parentProductId,"productPricePurposeId","PURCHASE").orderBy("-fromDate").queryList();        }      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }    prices=EntityUtil.filterByDate(prices);    List<GenericValue> pricesToUse=EntityUtil.filterByAnd(prices,UtilMisc.toMap("productPriceTypeId","AVERAGE_COST"));    if (UtilValidate.isEmpty(pricesToUse)) {      pricesToUse=EntityUtil.filterByAnd(prices,UtilMisc.toMap("productPriceTypeId","DEFAULT_PRICE"));      if (UtilValidate.isEmpty(pricesToUse)) {        pricesToUse=EntityUtil.filterByAnd(prices,UtilMisc.toMap("productPriceTypeId","LIST_PRICE"));      }    }    GenericValue thisPrice=EntityUtil.getFirst(pricesToUse);    if (thisPrice != null) {      price=thisPrice.getBigDecimal("price");      validPriceFound=true;    }  }  result.put("price",price);  result.put("validPriceFound",Boolean.valueOf(validPriceFound));  result.put("orderItemPriceInfos",orderItemPriceInfos);  return result;}  }
class C{  public void requestRequestNetworkUpdate(){  enqueue(new RequestNetworkUpdateMessageClass().doRequest());  logger.debug("ZWave controller request network update");}  }
class C{  private static void normalizeTransformedData(final double[][] dataRI,final DftNormalization normalization,final TransformType type){  final double[] dataR=dataRI[0];  final double[] dataI=dataRI[1];  final int n=dataR.length;  assert dataI.length == n;switch (normalization) {case STANDARD:    if (type == TransformType.INVERSE) {      final double scaleFactor=1.0 / n;      for (int i=0; i < n; i++) {        dataR[i]*=scaleFactor;        dataI[i]*=scaleFactor;      }    }  break;case UNITARY:final double scaleFactor=1.0 / FastMath.sqrt(n);for (int i=0; i < n; i++) {dataR[i]*=scaleFactor;dataI[i]*=scaleFactor;}break;default :throw MathRuntimeException.createInternalError();}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201098,skilltarget,skillcaster,skillname);}  }
class C{  public CMMModel train(DataFrame dataset,String modelFileName,CMMParams params){  CMM cmm=new CMM(params).setVerbose(verbose);  cmmModel=cmm.fit(dataset);  try {    cmmModel.write().overwrite().save(modelFileName);  } catch (  IOException e) {    e.printStackTrace();  }  return cmmModel;}  }
class C{  public CommandBuilder withLongSwitchIfPresent(Map<String,Object> properties,UnaryOperator<String> switchNameMapper,String... keys){  for (  String key : keys) {    withLongSwitchIfPresent(properties,key,switchNameMapper.apply(key));  }  return this;}  }
class C{  public ToolTipControl(String[] fields){  label=fields;  if (fields.length > 1)   sbuf=new StringBuffer();}  }
class C{  public boolean isSwitchOpen(){  return openImage.getVisibility() == View.VISIBLE;}  }
class C{  @RequestMapping(value="/rest/activiti/tasks",method=RequestMethod.POST,produces="application/json") public JsonNode listTasks(@RequestBody ObjectNode requestNode){  ServerConfig serverConfig=retrieveServerConfig();  JsonNode resultNode;  try {    resultNode=clientService.listTasks(serverConfig,requestNode);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }  if (resultNode == null) {    throw new BadRequestException("Empty result returned from activiti");  }  return resultNode;}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  public Bitmap takeBite(Bitmap bitmap,float cx,float cy,float radius,int rotationDegrees){  Canvas c=new Canvas(bitmap);  Paint paint=new Paint();  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  RectF bounds=new RectF(cx - radius,cy - radius,cx + radius,cy + radius);  rectF.set(bounds);  c.drawArc(rectF,rotationDegrees,360,true,paint);  int numTeeth=9;  int angleSlice=180 / numTeeth;  for (int i=0; i < numTeeth; i++) {    int angleStart=(angleSlice * i) + rotationDegrees;    double angleStartRadian=angleStart * Math.PI / 180;    float xStart=(float)(cx + radius * Math.cos(angleStartRadian));    float yStart=(float)(cy + radius * Math.sin(angleStartRadian));    int angleEnd=(angleSlice * (i + 1)) + rotationDegrees;    double angleEndRadian=angleEnd * Math.PI / 180;    float xEnd=(float)(cx + radius * Math.cos(angleEndRadian));    float yEnd=(float)(cy + radius * Math.sin(angleEndRadian));    float circleCenterX=DrawUtils.getPointBetweenTwoPoints(xStart,xEnd,0.5);    float circleCenterY=DrawUtils.getPointBetweenTwoPoints(yStart,yEnd,0.5);    double circumference=DrawUtils.getDistanceBetweenTwoPoints(xStart,yStart,xEnd,yEnd);    int num=i + 1;    if (num > (numTeeth / 2) + 0.5) {      if (num == 6)       num-=2;      if (num == 7)       num-=4;      if (num == 8)       num-=6;      if (num == 9)       num-=8;    }    double angleOfSmallSemiCircle=((180 / numTeeth) * num) - 10;    float radiusSmall=(float)(circumference / 2);    RectF bounds2=new RectF(circleCenterX - radiusSmall,circleCenterY - radiusSmall,circleCenterX + radiusSmall,circleCenterY + radiusSmall);    RectF rectTooth=new RectF();    rectTooth.set(bounds2);    int baseSmallCircleAngleStart=rotationDegrees - 90;    if (i > numTeeth / 2) {      angleOfSmallSemiCircle=90 + (90 - angleOfSmallSemiCircle);    }    float startAngle=(float)(baseSmallCircleAngleStart + angleOfSmallSemiCircle);    c.drawArc(rectTooth,(float)startAngle,180,true,paint);  }  return bitmap;}  }
class C{  public DBSCANClusterer(final double eps,final int minPts) throws MathIllegalArgumentException {  this(eps,minPts,new EuclideanDistance());}  }
class C{  public OpenMapRealVector(int dimension,int expectedSize){  this(dimension,expectedSize,DEFAULT_ZERO_TOLERANCE);}  }
class C{  public VideoReportQuery searchQuery(String value){  return unsafeParam("search_query",value);}  }
class C{  public TShortObjectHashMap(){  super();}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  public static void clearComm(AirMapFlight flight,@Nullable AirMapCallback<Void> callback){  FlightService.clearCommKey(flight,callback);}  }
class C{  public static void main(String[] args) throws IOException {  inTest=true;  Vector<String> pathList=new Vector<>();  BufferedReader input=new BufferedReader(new InputStreamReader(System.in));  int countOfFiles=0;  String filePath;  String directory;  System.err.println("please enter the path of the input file set:");  filePath=input.readLine();  if (filePath.length() != 0) {    if (filePath.lastIndexOf(File.separator) == 0)     directory=File.separator; else     if (filePath.charAt(0) != File.separatorChar) {      if (filePath.lastIndexOf(File.separator) != -1)       directory="." + File.separator + filePath.substring(0,filePath.lastIndexOf(File.separator)); else       directory="." + File.separator;    } else     directory=filePath.substring(0,filePath.lastIndexOf(File.separator));    File path=new File(directory);    String[] list=path.list();    for (    String s : list) {      if (s.matches(filePath.substring(filePath.lastIndexOf(File.separator) + 1))) {        if (directory.lastIndexOf(File.separator) == 0)         pathList.add(directory + s); else         if (directory.equals("." + File.separator))         pathList.add(directory + s); else         pathList.add(directory + File.separator + s);        countOfFiles++;        System.err.println(countOfFiles + ". " + s);      }    }  }  System.err.println();  System.err.println("With Normalization?(Y/N)(Applicable only for 'Goodall's index' and Euclidean distance)");  String withNorm;  boolean normalized=false;  withNorm=input.readLine();  if (withNorm.equalsIgnoreCase("Y"))   normalized=true;  String opt;  System.err.println("please choose result options:");  System.err.println("[1] Goodall's index");  System.err.println("[2] Euclidean distance");  System.err.println("[3] Hellinger distance");  System.err.println("[4] BrayCurtis distance");  System.err.println("[5] Kulczynski distance");  System.err.println("[6] Chi-Squared distance");  opt=input.readLine();  System.err.println();  int option=Integer.parseInt(opt);  InputData inputData=new InputData();switch (option) {case 1:    for (    String p : pathList) {      Vector<Double[]> in=inputData.readInputFile(p);      Vector<Double> range=getRange(in);      Vector<Double[]> transpose=transpose(in,normalized);      System.err.println("Range: " + range);      System.err.println("tranposed:");      for (      Double[] value : transpose) {        for (        Double v : value)         System.err.print(v + ", ");        System.err.println();      }      Vector<Vector<Double[]>> gowercoeffi1=getGowerCoefficient(transpose,range);      System.err.println("gowercoeffi done");      Vector<Double[]> gowercoeffi2=new Vector<>();      for (      Vector<Double[]> vectordarray : gowercoeffi1) {        for (        Double[] darray : vectordarray) {          gowercoeffi2.add(darray);        }      }      Vector<Double[]> pairratio=getPairRatioMatrix(gowercoeffi2);      System.err.println("pairratio done");      Vector<Double> sum=getSumOfLogVector(pairratio);      System.err.println("Vector done");      System.err.println("Vector:");      for (      Double value : sum) {        System.err.println(value);      }      Vector<Vector<Double>> sitedist=getSiteDist(getSiteSym(sum));      System.err.println("sitedist done");      BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream("Goodall_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt",false)));      w.write("#NEXUS" + "\n" + "\n");      w.write("[! Example of Distance Data. Subjective color distances measured by Helm]" + "\n" + "\n");      w.write("BEGIN taxa;" + "\n");      w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");      w.write("TAXLABELS" + "\n");      for (int i=1; i <= transpose.size(); i++) {        w.write("    " + inputData.getFileNamelist()[i] + "\n");      }      w.write(";" + "\n" + "END;"+ "\n"+ "\n");      w.write("BEGIN distances;" + "\n");      w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");      w.write("    FORMAT" + "\n");      w.write("        triangle=upper" + "\n");      w.write("        diagonal" + "\n");      w.write("        labels" + "\n");      w.write("        missing=?" + "\n");      w.write("    ;" + "\n");      w.write("    MATRIX" + "\n");      int spaces=0;      for (      Vector<Double> row : sitedist) {        w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");        for (int count=0; count < spaces; count++) {          w.write("      ");        }        w.write("0.0 ");        for (int m=0; m < row.size() - 1; m++) {          w.write(roundTwoDecimals(row.get(m)) + " ");        }        w.write(roundTwoDecimals(row.get(row.size() - 1)) + "\n");        spaces++;      }      w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");      for (int count=0; count < spaces; count++) {        w.write("      ");      }      w.write("0.0" + "\n");      w.write("    ;" + "\n" + "END;"+ "\n");      w.close();      System.err.println("Goodall_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt"+ " is generated!");    }  break;case 2:for (String p : pathList) {  Vector<Double[]> in=inputData.readInputFile(p);  Vector<Double[]> transpose=transpose(in,normalized);  Vector<Vector<Double>> eucliddist=getEuclidDiff(transpose);  BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream("EuclideanDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt",false)));  w.write("#NEXUS" + "\n" + "\n");  w.write("[! Example of Distance Data. Subjective color distances measured by Helm]" + "\n" + "\n");  w.write("BEGIN taxa;" + "\n");  w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");  w.write("TAXLABELS" + "\n");  for (int i=1; i <= transpose.size(); i++) {    w.write("    " + inputData.getFileNamelist()[i] + "\n");  }  w.write(";" + "\n" + "END;"+ "\n"+ "\n");  w.write("BEGIN distances;" + "\n");  w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");  w.write("    FORMAT" + "\n");  w.write("        triangle=upper" + "\n");  w.write("        diagonal" + "\n");  w.write("        labels" + "\n");  w.write("        missing=?" + "\n");  w.write("    ;" + "\n");  w.write("    MATRIX" + "\n");  int spaces=0;  for (  Vector<Double> row : eucliddist) {    w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");    for (int count=0; count < spaces; count++) {      w.write("      ");    }    w.write("0.0 ");    for (int m=0; m < row.size() - 1; m++) {      w.write(roundTwoDecimals(row.get(m)) + " ");    }    w.write(roundTwoDecimals(row.get(row.size() - 1)) + "\n");    spaces++;  }  w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");  for (int count=0; count < spaces; count++) {    w.write("      ");  }  w.write("0.0" + "\n");  w.write("    ;" + "\n" + "END;"+ "\n");  w.close();  System.err.println("EuclideanDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt"+ " is generated!");}break;case 3:for (String p : pathList) {Vector<Double[]> in=inputData.readInputFile(p);Vector<Double[]> transpose=transpose(in,false);Vector<Vector<Double>> hellingerdist=getDistHellinger(transpose);BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream("HellingerDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt",false)));w.write("#NEXUS" + "\n" + "\n");w.write("[! Example of Distance Data. Subjective color distances measured by Helm]" + "\n" + "\n");w.write("BEGIN taxa;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("TAXLABELS" + "\n");for (int i=1; i <= transpose.size(); i++) {w.write("    " + inputData.getFileNamelist()[i] + "\n");}w.write(";" + "\n" + "END;"+ "\n"+ "\n");w.write("BEGIN distances;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("    FORMAT" + "\n");w.write("        triangle=upper" + "\n");w.write("        diagonal" + "\n");w.write("        labels" + "\n");w.write("        missing=?" + "\n");w.write("    ;" + "\n");w.write("    MATRIX" + "\n");int spaces=0;for (Vector<Double> row : hellingerdist) {w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {  w.write("      ");}w.write("0.0 ");for (int m=0; m < row.size() - 1; m++) {  w.write(roundTwoDecimals(row.get(m)) + " ");}w.write(roundTwoDecimals(row.get(row.size() - 1)) + "\n");spaces++;}w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {w.write("      ");}w.write("0.0" + "\n");w.write("    ;" + "\n" + "END;"+ "\n");w.close();System.err.println("HellingerDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt"+ " is generated!");}break;case 4:for (String p : pathList) {Vector<Double[]> in=inputData.readInputFile(p);Vector<Double[]> transpose=transpose(in,false);Vector<Vector<Double>> braycuritsdist=getDistBrayCurtis(transpose);BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream("BrayCurtisDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt",false)));w.write("#NEXUS" + "\n" + "\n");w.write("[! Example of Distance Data. Subjective color distances measured by Helm]" + "\n" + "\n");w.write("BEGIN taxa;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("TAXLABELS" + "\n");for (int i=1; i <= transpose.size(); i++) {w.write("    " + inputData.getFileNamelist()[i] + "\n");}w.write(";" + "\n" + "END;"+ "\n"+ "\n");w.write("BEGIN distances;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("    FORMAT" + "\n");w.write("        triangle=upper" + "\n");w.write("        diagonal" + "\n");w.write("        labels" + "\n");w.write("        missing=?" + "\n");w.write("    ;" + "\n");w.write("    MATRIX" + "\n");int spaces=0;for (Vector<Double> row : braycuritsdist) {w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {w.write("      ");}w.write("0.0 ");for (int m=0; m < row.size() - 1; m++) {w.write(roundTwoDecimals(row.get(m)) + " ");}w.write(roundTwoDecimals(row.get(row.size() - 1)) + "\n");spaces++;}w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {w.write("      ");}w.write("0.0" + "\n");w.write("    ;" + "\n" + "END;"+ "\n");w.close();System.err.println("BrayCurtisDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt"+ " is generated!");}break;case 5:for (String p : pathList) {Vector<Double[]> in=inputData.readInputFile(p);Vector<Double[]> transpose=transpose(in,false);Vector<Vector<Double>> kulczynskidist=getDistKulczynski(transpose);BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream("KulczynskiDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt",false)));w.write("#NEXUS" + "\n" + "\n");w.write("[! Example of Distance Data. Subjective color distances measured by Helm]" + "\n" + "\n");w.write("BEGIN taxa;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("TAXLABELS" + "\n");for (int i=1; i <= transpose.size(); i++) {w.write("    " + inputData.getFileNamelist()[i] + "\n");}w.write(";" + "\n" + "END;"+ "\n"+ "\n");w.write("BEGIN distances;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("    FORMAT" + "\n");w.write("        triangle=upper" + "\n");w.write("        diagonal" + "\n");w.write("        labels" + "\n");w.write("        missing=?" + "\n");w.write("    ;" + "\n");w.write("    MATRIX" + "\n");int spaces=0;for (Vector<Double> row : kulczynskidist) {w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {w.write("      ");}w.write("0.0 ");for (int m=0; m < row.size() - 1; m++) {w.write(roundTwoDecimals(row.get(m)) + " ");}w.write(roundTwoDecimals(row.get(row.size() - 1)) + "\n");spaces++;}w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {w.write("      ");}w.write("0.0" + "\n");w.write("    ;" + "\n" + "END;"+ "\n");w.close();System.err.println("KulczynskiDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt"+ " is generated!");}break;case 6:for (String p : pathList) {Vector<Double[]> in=inputData.readInputFile(p);Vector<Double[]> transpose=transpose(in,false);Vector<Vector<Double>> chisquareddist=getDistChiSquare(transpose);BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream("ChiSquaredDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt",false)));w.write("#NEXUS" + "\n" + "\n");w.write("[! Example of Distance Data. Subjective color distances measured by Helm]" + "\n" + "\n");w.write("BEGIN taxa;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("TAXLABELS" + "\n");for (int i=1; i <= transpose.size(); i++) {w.write("    " + inputData.getFileNamelist()[i] + "\n");}w.write(";" + "\n" + "END;"+ "\n"+ "\n");w.write("BEGIN distances;" + "\n");w.write("    DIMENSIONS ntax=" + transpose.size() + ";"+ "\n");w.write("    FORMAT" + "\n");w.write("        triangle=upper" + "\n");w.write("        diagonal" + "\n");w.write("        labels" + "\n");w.write("        missing=?" + "\n");w.write("    ;" + "\n");w.write("    MATRIX" + "\n");int spaces=0;for (Vector<Double> row : chisquareddist) {w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {w.write("      ");}w.write("0.0 ");for (int m=0; m < row.size() - 1; m++) {w.write(roundTwoDecimals(row.get(m)) + " ");}w.write(roundTwoDecimals(row.get(row.size() - 1)) + "\n");spaces++;}w.write("    " + inputData.getFileNamelist()[spaces + 1] + " ");for (int count=0; count < spaces; count++) {w.write("      ");}w.write("0.0" + "\n");w.write("    ;" + "\n" + "END;"+ "\n");w.close();System.err.println("ChiSquaredDist_" + p.substring(p.lastIndexOf(File.separator) + 1,p.lastIndexOf(".")) + ".txt"+ " is generated!");}break;}}  }
class C{  public SM_RIFT_ANNOUNCE(RVController rift,boolean isMaster){  this.rift=rift;  this.actionId=isMaster ? 2 : 3;}  }
class C{  private String pluginVersion(){  return ((PluginDescriptor)getPluginContext().get("pluginDescriptor")).getVersion();}  }
class C{  public DocumentNGramGraph(){  InitGraphs();}  }
class C{  public synchronized boolean unexport(boolean force){  if (!mainExporter.unexport(force)) {    return false;  }  bootExporter.unexport(true);  if (ref != null) {    ref.enqueue();  }  return true;}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  private void ensureZero(final double value) throws MathIllegalArgumentException {  if (!Precision.equals(0.0,value,1)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,FastMath.abs(value),0);  }}  }
class C{  public static Map cancelAll(LocalLandlord landlord,Uuid[] cookies){  final int count=cookies.length;  Map map=null;  for (int i=0; i < count; i++) {    try {      landlord.cancel(cookies[i]);    } catch (    UnknownLeaseException e) {      if (map == null)       map=new java.util.HashMap();      map.put(cookies[i],e);    }  }  return map;}  }
class C{  public static String[][] invert(final String[][] array){  final String[][] newarray=new String[array.length][2];  for (int i=0; i < array.length; i++) {    newarray[i][0]=array[i][1];    newarray[i][1]=array[i][0];  }  return newarray;}  }
class C{  public void moveViewToX(float xIndex){  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,0f,getTransformer(AxisDependency.LEFT),this);  addViewportJob(job);}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public BuiltInDataFlavour(){}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  private void begin_Pos(){  if (position.x < posX + this.map_controler.syncCnt)   dir=2; else   dir=14;  if (position.y < posY)   dir=(dir == 2) ? 6 : 10;  sx=this.map_controler.get_Direc_Dis_X(dir);  sy=this.map_controler.get_Direc_Dis_Y(dir);  status=POSITION;}  }
class C{  public PhotosConfirmTagQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception {  return sha1(keyStoreFile,null,null);}  }
class C{  public final boolean contains(Node n){  if (bits == null) {    for (    Node node : nodes) {      if (node == n)       return true;      if (node == null) {        break;      }    }    return false;  } else {    return bits.get(n.getNumber());  }}  }
class C{  public double wilcoxonSignedRank(final double[] x,final double[] y) throws MathIllegalArgumentException, NullArgumentException {  ensureDataConformance(x,y);  final double[] z=calculateDifferences(x,y);  final double[] zAbs=calculateAbsoluteDifferences(z);  final double[] ranks=naturalRanking.rank(zAbs);  double Wplus=0;  for (int i=0; i < z.length; ++i) {    if (z[i] > 0) {      Wplus+=ranks[i];    }  }  final int N=x.length;  final double Wminus=((N * (N + 1)) / 2.0) - Wplus;  return FastMath.max(Wplus,Wminus);}  }
class C{  public NewsfeedSearchQueryWithExtended startTime(Integer value){  return unsafeParam("start_time",value);}  }
class C{  public static String collectionToDelimitedString(Collection<String> coll,String delim,String prefix,String suffix){  if (coll == null) {    return "";  }  StringBuilder sb=new StringBuilder();  Iterator<String> it=coll.iterator();  int i=0;  while (it.hasNext()) {    if (i > 0) {      sb.append(delim);    }    sb.append(prefix).append(it.next()).append(suffix);    i++;  }  return sb.toString();}  }
class C{  public NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public ImmutableList<PathSegment> parse(){  ImmutableList<PathSegment> path=parse(true,false);  if (!pathStartedWithSlash) {    addError("effective path must start with leading '/'.");  }  if (current != null) {    addError("unrecognized input at '%s'.",current);  }  if (configVersion > 0 && CUSTOM_VERB_PATTERN_ILLEGAL.matcher(template).find()) {    addError("invalid token '/:' before the custom verb.");  }  if (hadErrors) {    return null;  }  if (customVerb != null) {    return FluentIterable.from(path).append(new LiteralSegment(customVerb,true)).toList();  }  return path;}  }
class C{  private void performZoom(MotionEvent event){  if (event.getPointerCount() >= 2) {    OnChartGestureListener l=mChart.getOnChartGestureListener();    float totalDist=spacing(event);    if (totalDist > mMinScalePointerDistance) {      PointF t=getTrans(mTouchPointCenter.x,mTouchPointCenter.y);      ViewPortHandler h=mChart.getViewPortHandler();      if (mTouchMode == PINCH_ZOOM) {        mLastGesture=ChartGesture.PINCH_ZOOM;        float scale=totalDist / mSavedDist;        boolean isZoomingOut=(scale < 1);        boolean canZoomMoreX=isZoomingOut ? h.canZoomOutMoreX() : h.canZoomInMoreX();        boolean canZoomMoreY=isZoomingOut ? h.canZoomOutMoreY() : h.canZoomInMoreY();        float scaleX=mChart.isScaleXEnabled() ? scale : 1f;        float scaleY=mChart.isScaleYEnabled() ? scale : 1f;        if (canZoomMoreY || canZoomMoreX) {          mMatrix.set(mSavedMatrix);          mMatrix.postScale(scaleX,scaleY,t.x,t.y);          if (l != null)           l.onChartScale(event,scaleX,scaleY);        }      } else       if (mTouchMode == X_ZOOM && mChart.isScaleXEnabled()) {        mLastGesture=ChartGesture.X_ZOOM;        float xDist=getXDist(event);        float scaleX=xDist / mSavedXDist;        boolean isZoomingOut=(scaleX < 1);        boolean canZoomMoreX=isZoomingOut ? h.canZoomOutMoreX() : h.canZoomInMoreX();        if (canZoomMoreX) {          mMatrix.set(mSavedMatrix);          mMatrix.postScale(scaleX,1f,t.x,t.y);          if (l != null)           l.onChartScale(event,scaleX,1f);        }      } else       if (mTouchMode == Y_ZOOM && mChart.isScaleYEnabled()) {        mLastGesture=ChartGesture.Y_ZOOM;        float yDist=getYDist(event);        float scaleY=yDist / mSavedYDist;        boolean isZoomingOut=(scaleY < 1);        boolean canZoomMoreY=isZoomingOut ? h.canZoomOutMoreY() : h.canZoomInMoreY();        if (canZoomMoreY) {          mMatrix.set(mSavedMatrix);          mMatrix.postScale(1f,scaleY,t.x,t.y);          if (l != null)           l.onChartScale(event,1f,scaleY);        }      }    }  }}  }
class C{  private void siftDown(final Item item){  while (true) {    Item j=null;    Item right=getRight(item);    if (right != null && right.position.compareTo(item.position) < 0) {      Item left=getLeft(item);      if (left.position.compareTo(right.position) < 0) {        j=left;      } else {        j=right;      }    } else {      Item left=getLeft(item);      if (left != null && left.position.compareTo(item.position) < 0) {        j=left;      }    }    if (j != null) {      swap(item,j);    } else {      break;    }  }}  }
class C{  public void doReward(){}  }
class C{  public void writeIntLittleEndian(int a) throws IOException {  ensureSize(size + 4);  bytes[size++]=((byte)(a));  bytes[size++]=((byte)(a >> 8));  bytes[size++]=((byte)(a >> 16));  bytes[size++]=((byte)(a >> 24));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BREAK_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300424,value0);}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public synchronized void reset(){}  }
class C{  public void testProcessDefinitionListenerDefinitionError() throws Exception {  org.activiti.engine.repository.Deployment deployment=repositoryService.createDeployment().addClasspathResource("org/activiti/standalone/event/invalidEventListenerExpression.bpmn20.xml").deploy();  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testInvalidEventExpression");  assertNotNull(processInstance);  repositoryService.deleteDeployment(deployment.getId(),true);  deployment=repositoryService.createDeployment().addClasspathResource("org/activiti/standalone/event/invalidEventListenerClass.bpmn20.xml").deploy();  processInstance=runtimeService.startProcessInstanceByKey("testInvalidEventClass");  repositoryService.deleteDeployment(deployment.getId(),true);}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_FAILED(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300463,descriptionId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXCHANGE_ITEM_CANNOT_BE_EXCHANGED(String value0){  return new SM_SYSTEM_MESSAGE(1300358,value0);}  }
class C{  public void forceMoveToPrimary() throws RemoteException {  _electManager.forceMoveToPrimary();}  }
class C{  public static String appendTail(Matcher matcher,StringBuffer sb){  matcher.appendTail(sb);  return sb.toString();}  }
class C{  public boolean contains(int val){  return index(val) >= 0;}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public static int loadShader(int shaderType,String source){  int shader=GLES20.glCreateShader(shaderType);  checkGlError("glCreateShader type=" + shaderType);  GLES20.glShaderSource(shader,source);  GLES20.glCompileShader(shader);  int[] compiled=new int[1];  GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);  if (compiled[0] == 0) {    Log.e(TAG,"Could not compile shader " + shaderType + ":");    Log.e(TAG," " + GLES20.glGetShaderInfoLog(shader));    GLES20.glDeleteShader(shader);    shader=0;  }  return shader;}  }
class C{  public void addTypeDecl(TypeDecl node){  List<TypeDecl> list=(parent == null || state == null) ? getTypeDeclListNoTransform() : getTypeDeclList();  list.addChild(node);}  }
class C{  public DirectedGraph(FeatureDefinition featDef){  this(null,featDef);}  }
class C{  public void resume(){  if (mPaused && !valueAnimator.isRunning()) {    mPaused=false;    startValueAnimator(elapsedTime / 1000f,fullTime / 1000f,(long)(fullTime - elapsedTime));  }}  }
class C{  public static boolean isSameUser(int uid1,int uid2){  return getUserId(uid1) == getUserId(uid2);}  }
class C{  public void collectErrors(){  nameCheck();  typeCheck();  accessControl();  exceptionHandling();  checkUnreachableStmt();  definiteAssignment();  checkModifiers();  checkWarnings();  for (int i=0; i < getNumChild(); i++) {    getChild(i).collectErrors();  }}  }
class C{  private void clearNotifications0(){  updateNotificationsNodeLabel(currentNode,Resources.getText("LBL_Notifications") + "[0]");}  }
class C{  @Override public void endExternalSubset(Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.endExternalSubset(augs);  if (fDTDHandler != null) {    fDTDHandler.endExternalSubset(augs);  }}  }
class C{  @Override public void addListener(DataSourceUpdatedInterface listener){  if (!listenerList.contains(listener)) {    listenerList.add(listener);    if (getGeometryType() != GeometryTypeEnum.UNKNOWN) {      notifyDataSourceLoaded();    }  }}  }
class C{  private void inflateConnectedText(){  if (mConnectedText != R.string.text_connected) {    connectivityText.setText(mConnectedText);  }}  }
class C{  public Object onMessage(String id,Object data){  if (id.equals("telephone")) {    if ("ringing".equals(data) || "offhook".equals(data)) {      for (      AudioPlayer audio : this.players.values()) {        if (audio.getState() == AudioPlayer.STATE.MEDIA_RUNNING.ordinal()) {          this.pausedForPhone.add(audio);          audio.pausePlaying();        }      }    } else     if ("idle".equals(data)) {      for (      AudioPlayer audio : this.pausedForPhone) {        audio.startPlaying(null);      }      this.pausedForPhone.clear();    }  }  return null;}  }
class C{  public static CommandTagCacheObject createTestCommandTag(){  CommandTagCacheObject commandTag=new CommandTagCacheObject(Long.valueOf(2000),"Test command tag","Test command tag desc","Float",DataTagConstants.MODE_OPERATIONAL);  commandTag.setEquipmentId(Long.valueOf(100));  commandTag.setMaximum(Float.valueOf(5));  commandTag.setMinimum(Float.valueOf(1));  RbacAuthorizationDetails details=new RbacAuthorizationDetails();  details.setRbacClass("class");  details.setRbacDevice("device");  details.setRbacProperty("property");  commandTag.setAuthorizationDetails(details);  commandTag.setClientTimeout(10000);  try {    commandTag.setHardwareAddress(new OPCHardwareAddressImpl("test"));  } catch (  ConfigurationException e) {    e.printStackTrace();  }  commandTag.setSourceTimeout(10000);  commandTag.setSourceRetries(4);  commandTag.setExecTimeout(10000);  commandTag.setProcessId(Long.valueOf(90));  CommandExecutionDetails<Long> commandExecutionDetails=new CommandExecutionDetails<Long>();  commandExecutionDetails.setExecutionStartTime(new Timestamp(System.currentTimeMillis() - 1000));  commandExecutionDetails.setExecutionEndTime(new Timestamp(System.currentTimeMillis()));  commandExecutionDetails.setValue(10L);  commandTag.setCommandExecutionDetails(commandExecutionDetails);  return commandTag;}  }
class C{  public String tableName(){  return tblName;}  }
class C{  @Override public void populateExpression(Object objValue){  TimePeriod timePeriod=new TimePeriod();  if (objValue instanceof String) {    timePeriod.decode((String)objValue);  } else   if (objValue instanceof DefaultPeriod) {    timePeriod.decode((DefaultPeriod)objValue);  }  populateField(timePeriod);}  }
class C{  public void updateCachingAndArtifacts(ParsedDeployment parsedDeployment){  CommandContext commandContext=Context.getCommandContext();  final ProcessEngineConfigurationImpl processEngineConfiguration=Context.getProcessEngineConfiguration();  DeploymentCache<ProcessDefinitionCacheEntry> processDefinitionCache=processEngineConfiguration.getDeploymentManager().getProcessDefinitionCache();  DeploymentEntity deployment=parsedDeployment.getDeployment();  for (  ProcessDefinitionEntity processDefinition : parsedDeployment.getAllProcessDefinitions()) {    BpmnModel bpmnModel=parsedDeployment.getBpmnModelForProcessDefinition(processDefinition);    Process process=parsedDeployment.getProcessModelForProcessDefinition(processDefinition);    ProcessDefinitionCacheEntry cacheEntry=new ProcessDefinitionCacheEntry(processDefinition,bpmnModel,process);    processDefinitionCache.add(processDefinition.getId(),cacheEntry);    addDefinitionInfoToCache(processDefinition,processEngineConfiguration,commandContext);    deployment.addDeployedArtifact(processDefinition);  }}  }
class C{  public static Module currentModule(){  return _currentmodule.get();}  }
class C{  public SenseComparator(){}  }
class C{  protected DerivativeStructure computeObjectiveValueAndDerivative(double point) throws MathIllegalStateException {  incrementEvaluationCount();  return function.value(new DerivativeStructure(1,1,0,point));}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int index,int length){  addEmojis(context,text,emojiSize,index,length,false);}  }
class C{  private boolean updateEventCache(final SupervisionEvent supervisionEvent){  final Long id=supervisionEvent.getEntityId();  boolean updated=true;  cacheLock.writeLock().lock();  try {switch (supervisionEvent.getEntity()) {case PROCESS:      if (!processEventCache.containsKey(id)) {        processEventCache.put(supervisionEvent.getEntityId(),supervisionEvent);      } else       if (!processEventCache.get(id).equals(supervisionEvent)) {        processEventCache.put(supervisionEvent.getEntityId(),supervisionEvent);      } else {        updated=false;      }    break;case EQUIPMENT:  if (!equipmentEventCache.containsKey(id)) {    equipmentEventCache.put(supervisionEvent.getEntityId(),supervisionEvent);  } else   if (!equipmentEventCache.get(id).equals(supervisionEvent)) {    equipmentEventCache.put(supervisionEvent.getEntityId(),supervisionEvent);  } else {    updated=false;  }break;case SUBEQUIPMENT:if (!subEquipmentEventCache.containsKey(id)) {subEquipmentEventCache.put(supervisionEvent.getEntityId(),supervisionEvent);} else if (!subEquipmentEventCache.get(id).equals(supervisionEvent)) {subEquipmentEventCache.put(supervisionEvent.getEntityId(),supervisionEvent);} else {updated=false;}break;default :String errMsg=supervisionEvent.getEntity() + " SupervisionEvent is not supported by this client - ignoring the event";LOG.debug("updateEventCache() - " + errMsg);updated=false;}}  finally {cacheLock.writeLock().unlock();}return updated;}  }
class C{  public void writeTo(OutputStream out) throws IOException {  out.write(_buffer,0,_count);}  }
class C{  @Override public void show(Class<?> parentClass,Class<?> classSelected){  if (classSelected != null) {    String key=classSelected.toString();    PopulateDetailsInterface panel=getPanel(parentClass,key);    if (panel != null) {      CardLayout cl=(CardLayout)(detailsPanel.getLayout());      cl.show(detailsPanel,encodePanelKey(key,panel));      SelectedSymbol selectedSymbol=SelectedSymbol.getInstance();      panel.populate(selectedSymbol);    }  }  repaint();}  }
class C{  protected void clearRowsAndCategories(boolean clearData){  clearRows(clearData);  clearCategories();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_RandomMoveLoc_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200858,skillcaster,skillname);}  }
class C{  public static String nullSafeToString(char[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append("'").append(array[i]).append("'");  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public static byte[] decodeHex(char[] data) throws Exception {  int len=data.length;  if ((len & 0x01) != 0) {    throw new Exception("Odd number of characters.");  }  byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  public EquipmentConfigurationUpdate(final long changeId,final long equipmentId){  setChangeId(changeId);  this.equipmentId=equipmentId;}  }
class C{  public void sync() throws CanceledException {  if (!inSync) {    inSync=true;    IChartData chartData=(IChartData)getChartData();    chartData.clear();    Document doc=((Director)dir).getDocument();    setChartTitle("Taxonomy profile for " + doc.getTitle());    int numberOfSamples=doc.getNumberOfSamples();    if (numberOfSamples > 0) {      MainViewer mainViewer=((Director)dir).getMainViewer();      if (mainViewer.getSelectedNodes().size() == 0) {        mainViewer.selectAllLeaves();        if (mainViewer.getPOWEREDBY() != null)         setChartTitle(getChartTitle() + " (rank=" + mainViewer.getPOWEREDBY()+ ")");      }      chartData.setAllSeries(doc.getSampleNames());      String[] names=doc.getSampleNames().toArray(new String[doc.getSampleNames().size()]);      syncedNodes=mainViewer.getSelectedNodes();      LinkedList<String> taxonNames=new LinkedList<>();      for (      Node v : syncedNodes) {        final String taxonName=TaxonomyData.getName2IdMap().get((Integer)v.getInfo());        taxonNames.add(taxonName);        if (numberOfSamples == 1) {          if (v.getOutDegree() == 0)           chartData.putValue(names[0],taxonName,((NodeData)v.getData()).getCountSummarized()); else           chartData.putValue(names[0],taxonName,((NodeData)v.getData()).getCountAssigned());        } else {          int[] summarized;          if (v.getOutDegree() == 0)           summarized=((NodeData)v.getData()).getSummarized(); else           summarized=((NodeData)v.getData()).getAssigned();          for (int i=0; i < names.length; i++) {            chartData.putValue(names[i],taxonName,summarized[i]);          }        }      }      chartData.setClassNames(taxonNames);    }    updateColorByRank();    chartData.setTree(parentViewer.getInducedTree(TaxonomyData.getName2IdMap().getId2Name(),parentViewer.getSelectedNodes()));    super.sync();    updateView(Director.ALL);    inSync=false;  }}  }
class C{  private static void createTaskListForNode(Map<String,List<List<Distributable>>> outputMap,int noOfTasksPerNode,String key){  List<List<Distributable>> nodeTaskList=new ArrayList<List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (int i=0; i < noOfTasksPerNode; i++) {    List<Distributable> eachTask=new ArrayList<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);    nodeTaskList.add(eachTask);  }  outputMap.put(key,nodeTaskList);}  }
class C{  @Deployment public void testHistoricFormPropertiesOnReEnteringActivity(){  Map<String,Object> variables=new HashMap<String,Object>();  variables.put("comeBack",Boolean.TRUE);  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("HistoricFormPropertiesProcess",variables);  assertNotNull(processInstance);  Map<String,String> data=new HashMap<String,String>();  data.put("formProp1","Property value");  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  formService.submitTaskFormData(task.getId(),data);  List<HistoricDetail> details=historyService.createHistoricDetailQuery().formProperties().processInstanceId(processInstance.getId()).list();  assertNotNull(details);  assertEquals(1,details.size());  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  formService.submitTaskFormData(task.getId(),data);  details=historyService.createHistoricDetailQuery().formProperties().processInstanceId(processInstance.getId()).list();  assertNotNull(details);  assertEquals(2,details.size());  assertNotSame(details.get(0).getActivityInstanceId(),details.get(1).getActivityInstanceId());  HistoricActivityInstance historicActInst1=historyService.createHistoricActivityInstanceQuery().activityInstanceId(details.get(0).getActivityInstanceId()).singleResult();  HistoricActivityInstance historicActInst2=historyService.createHistoricActivityInstanceQuery().activityInstanceId(details.get(1).getActivityInstanceId()).singleResult();  assertEquals(historicActInst1.getActivityId(),historicActInst2.getActivityId());}  }
class C{  public static boolean blockColourMatches(IBlockState bs,List<Colour> allowedColours){  for (  IProperty prop : (java.util.Set<IProperty>)bs.getProperties().keySet()) {    if (prop.getName().equals("color") && prop.getValueClass() == net.minecraft.item.EnumDyeColor.class) {      net.minecraft.item.EnumDyeColor current=(net.minecraft.item.EnumDyeColor)bs.getValue(prop);      for (      Colour col : allowedColours) {        if (current.getName().equalsIgnoreCase(col.name()))         return true;      }    }  }  return false;}  }
class C{  private void upgradeToDataApprovalWorkflows(){  if (executeSql("update dataset set approvedata = approvedata where datasetid < 0") < 0) {    return;  }  executeSql("insert into dataapprovalworkflow ( workflowid, uid, created, lastupdated, name, periodtypeid, userid, publicaccess ) " + "select " + statementBuilder.getAutoIncrementValue() + ", "+ statementBuilder.getUid()+ ", now(), now(), ds.name, ds.periodtypeid, ds.userid, ds.publicaccess "+ "from (select datasetid from dataset where approvedata = true union select distinct datasetid from dataapproval) as a "+ "join dataset ds on ds.datasetid = a.datasetid");  executeSql("insert into dataapprovalworkflowlevels (workflowid, dataapprovallevelid) " + "select w.workflowid, l.dataapprovallevelid from dataapprovalworkflow w " + "cross join dataapprovallevel l");  executeSql("update dataset set workflowid = ( select w.workflowid from dataapprovalworkflow w where w.name = dataset.name)");  executeSql("alter table dataset drop column approvedata cascade");  executeSql("update dataapproval set workflowid = ( select ds.workflowid from dataset ds where ds.datasetid = dataapproval.datasetid)");  executeSql("alter table dataapproval drop constraint dataapproval_unique_key");  executeSql("alter table dataapproval drop column datasetid cascade");  log.info("Added any workflows needed for approvble datasets and/or approved data.");}  }
class C{  public void typeSystemInit(TypeSystem typeSystem) throws AnalysisEngineProcessException {  super.typeSystemInit(typeSystem);  probabilityFeature=AnnotatorUtil.getOptionalFeatureParameter(context,tokenType,UimaUtil.PROBABILITY_FEATURE_PARAMETER,CAS.TYPE_NAME_DOUBLE);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_TITLE_BONUS_SKILL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300775,value0,value1);}  }
class C{  public Location checkPoint(final double point){  final double normalizedPoint=MathUtils.normalizeAngle(point,middle);  if (normalizedPoint < lower - tolerance || normalizedPoint > upper + tolerance) {    return Location.OUTSIDE;  } else   if (normalizedPoint > lower + tolerance && normalizedPoint < upper - tolerance) {    return Location.INSIDE;  } else {    return (getSize() >= MathUtils.TWO_PI - tolerance) ? Location.INSIDE : Location.BOUNDARY;  }}  }
class C{  public EventHandlerGroup<T> after(final EventProcessor... processors){  for (  final EventProcessor processor : processors) {    consumerRepository.add(processor);  }  return new EventHandlerGroup<T>(this,consumerRepository,Util.getSequencesFor(processors));}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  @Override public void cleanup(){  fEntityManager.closeReaders();}  }
class C{  public static double calculateViewStorage(int connectionServerCount,int securityServerCount,int vCenterServerCount){  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.connectionserver.storage.default")) * connectionServerCount;  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.securityserver.storage.default")) * securityServerCount;  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.vcenter.storage.default")) * vCenterServerCount;  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.composer.storage.default"));  final double d=(cs + ss + vc+ co) / 1048576.0;  return d;}  }
class C{  public Shape hexagon(float x,float y,float height){  float width=height / 2;  m_path.reset();  m_path.moveTo(x,y + 0.5f * height);  m_path.lineTo(x + 0.5f * width,y);  m_path.lineTo(x + 1.5f * width,y);  m_path.lineTo(x + 2.0f * width,y + 0.5f * height);  m_path.lineTo(x + 1.5f * width,y + height);  m_path.lineTo(x + 0.5f * width,y + height);  m_path.closePath();  return m_path;}  }
class C{  public RealVectorFormat(final NumberFormat format){  this(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,format);}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  public static boolean isPercentage(String value){  if (!isInteger(value)) {    return false;  }  Integer integer=Integer.valueOf(value);  return integer >= 0 && integer <= 100;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200469,skilltarget);}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  VRSettings.VrOptions num=VRSettings.VrOptions.getEnumOptions(par1GuiButton.id);  Minecraft minecraft=Minecraft.getMinecraft();  if (par1GuiButton.enabled) {    if (par1GuiButton.id == ID_GENERIC_DONE) {      minecraft.vrSettings.saveOptions();      this.mc.displayGuiScreen(this.parentGuiScreen);    } else     if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {      minecraft.vrSettings.renderScaleFactor=1.0f;      minecraft.vrSettings.displayMirrorMode=VRSettings.MIRROR_ON_ONE_THIRD_FRAME_RATE;      minecraft.vrSettings.mixedRealityKeyColor=new Color();      minecraft.vrSettings.mixedRealityRenderHands=false;      minecraft.vrSettings.insideBlockSolidColor=false;      minecraft.gameSettings.fovSetting=70f;      minecraft.vrSettings.useFsaa=false;      minecraft.vrSettings.vrUseStencil=true;      minecraft.reinitFramebuffers=true;      this.guivrSettings.saveOptions();    } else     if (par1GuiButton.id == ID_GENERIC_MODE_CHANGE) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(selectOption);    } else     if (par1GuiButton.id == VRSettings.VrOptions.OTHER_RENDER_SETTINGS.returnEnumOrdinal()) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiOtherRenderOpticsSettings(this,this.guivrSettings));    } else     if (par1GuiButton instanceof GuiSmallButtonEx) {      this.guivrSettings.setOptionValue(((GuiSmallButtonEx)par1GuiButton).returnVrEnumOptions(),1);      par1GuiButton.displayString=this.guivrSettings.getKeyBinding(VRSettings.VrOptions.getEnumOptions(par1GuiButton.id));    }    if (num == VRSettings.VrOptions.MIRROR_DISPLAY || num == VRSettings.VrOptions.FSAA) {      minecraft.reinitFramebuffers=true;    }  }}  }
class C{  public StatelessChunkScrollableDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int chunkSize){  super(hQuery,sessionFactory,fetchSize,chunkSize);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  private FilterOperationCodes(){}  }
class C{  public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,float x,float y,float z){  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new CoordinateDestinationChecker(npc,x,y,z)),1000,1000);}  }
class C{  private void createTextField(JPanel parentPanel,String label,JTextField textField,int fieldWidth){  JPanel panel=new JPanel();  panel.setLayout(null);  parentPanel.add(panel);  JLabel lblName=new JLabel(label);  lblName.setHorizontalAlignment(SwingConstants.TRAILING);  lblName.setBounds(LABEL_X_START,0,LABEL_WIDTH,FIELD_HEIGHT);  panel.add(lblName);  textField.setBounds(LABEL_X_START + LABEL_WIDTH + FIELD_X_OFFSET,0,fieldWidth,FIELD_HEIGHT);  textField.setColumns(30);  panel.add(textField);}  }
class C{  private void processPatch(File androidSdkPath,StudioLoggerProgressIndicator progress,File patchDir){  RepoPackage pendingPackage=null;  File installDir=null;  try {    RepoManager mgr=mySdkHandler.getSdkManager(progress);    Repository repo=InstallerUtil.readPendingPackageXml(patchDir,mgr,myFileOp,progress);    if (repo != null) {      File patch=new File(patchDir,PatchInstallerUtil.PATCH_JAR_FN);      pendingPackage=repo.getLocalPackage();      boolean remote=false;      if (pendingPackage != null) {        installDir=mgr.getPackages().getLocalPackages().get(pendingPackage.getPath()).getLocation();      } else {        pendingPackage=repo.getRemotePackage().get(0);        installDir=((RemotePackage)pendingPackage).getInstallDir(mgr,progress);        remote=true;      }      File existingPackageXml=new File(installDir,LocalRepoLoaderImpl.PACKAGE_XML_FN);      File oldPackageXml=new File(patchDir,OLD_PACKAGE_XML_FN);      if (patch.exists() && existingPackageXml.renameTo(oldPackageXml)) {      } else {        String relativePath=FileOpUtils.makeRelative(androidSdkPath,installDir,myFileOp);        Revision rev=AndroidCommonUtils.parsePackageRevision(androidSdkPath.getPath(),relativePath);        if (rev != null && rev.equals(pendingPackage.getVersion())) {          InstallerFactory dummyFactory=new DummyInstallerFactory();          dummyFactory.setListenerFactory(new StudioSdkInstallListenerFactory(mySdkHandler));          if (remote) {            Installer installer=dummyFactory.createInstaller((RemotePackage)pendingPackage,mgr,new StudioDownloader(),myFileOp);            installer.complete(progress);          } else {            Uninstaller uninstaller=dummyFactory.createUninstaller((LocalPackage)pendingPackage,mgr,myFileOp);            uninstaller.complete(progress);          }        } else {          progress.logWarning("Failed to find version information in " + new File(androidSdkPath,SdkConstants.FN_SOURCE_PROP));          oldPackageXml.renameTo(existingPackageXml);        }      }    }  } catch (  Exception e) {    StringBuilder message=new StringBuilder("A problem occurred while installing ");    message.append(pendingPackage != null ? pendingPackage.getDisplayName() : "an SDK package");    if (installDir != null) {      message.append(" in ").append(installDir);    }    message.append(". Please try again.");    Messages.showErrorDialog(message.toString(),"Error Launching SDK Component Installer");    progress.logWarning("Failed to install SDK package",e);  }  try {    myFileOp.deleteFileOrFolder(patchDir);  } catch (  Exception e) {    progress.logWarning("Problem during patch cleanup",e);  }}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public TransformerConfigurationException(Throwable e){  super(e);}  }
class C{  public void testProperties(BigQuerySinkConfig config){  config.getTopicsToDatasets();  config.getMap(config.DATASETS_CONFIG);  config.getMap(config.TOPICS_TO_TABLES_CONFIG);  config.getList(config.TOPICS_CONFIG);  config.getList(config.TOPICS_TO_TABLES_CONFIG);  config.getList(config.DATASETS_CONFIG);  config.getString(config.KEYFILE_CONFIG);  config.getString(config.PROJECT_CONFIG);  config.getBoolean(config.SANITIZE_TOPICS_CONFIG);  config.getInt(config.AVRO_DATA_CACHE_SIZE_CONFIG);  config.getClass(config.BATCH_WRITER_CONFIG);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_INSTANCE_COOL_TIME_REMAIN(String worldname1,String durationtime0){  return new SM_SYSTEM_MESSAGE(1400178,worldname1,durationtime0);}  }
class C{  public WebappActivity(){  mWebappInfo=WebappInfo.createEmpty();  mDirectoryManager=new WebappDirectoryManager();  mWebappUma=new WebappUma();}  }
class C{  @SuppressWarnings("unchecked") public static <T>T copy(Configuration conf,T src,T dst) throws IOException {  CopyInCopyOutBuffer buffer=cloneBuffers.get();  buffer.outBuffer.reset();  SerializationFactory factory=getFactory(conf);  Class<T> cls=(Class<T>)src.getClass();  Serializer<T> serializer=factory.getSerializer(cls);  serializer.open(buffer.outBuffer);  serializer.serialize(src);  buffer.moveData();  Deserializer<T> deserializer=factory.getDeserializer(cls);  deserializer.open(buffer.inBuffer);  dst=deserializer.deserialize(dst);  return dst;}  }
class C{  public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gGraph.locateVertex(new VertexImpl(sStartNode));  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  EdgeCachedLocator ecl;  if (eclLocator == null)   ecl=new EdgeCachedLocator(100); else   ecl=eclLocator;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=1.0;    dIncreaseWeight=dStartWeight;    WeightedEdge weCorrectEdge=(WeightedEdge)ecl.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        ecl.addedEdge(gGraph.addEdge(vA,vB,dNewWeight));      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public LocalVarNode makeLocalVarNode(Object value,Type type,SootMethod method){  if (opts.rta()) {    value=null;    type=RefType.v("java.lang.Object");    method=null;  } else   if (value instanceof Local) {    Local val=(Local)value;    if (val.getNumber() == 0)     Scene.v().getLocalNumberer().add(val);    LocalVarNode ret=localToNodeMap.get(val);    if (ret == null) {      localToNodeMap.put((Local)value,ret=new LocalVarNode(this,value,type,method));      addNodeTag(ret,method);    } else     if (!(ret.getType().equals(type))) {      throw new RuntimeException("Value " + value + " of type "+ type+ " previously had type "+ ret.getType());    }    return ret;  }  LocalVarNode ret=valToLocalVarNode.get(value);  if (ret == null) {    valToLocalVarNode.put(value,ret=new LocalVarNode(this,value,type,method));    addNodeTag(ret,method);  } else   if (!(ret.getType().equals(type))) {    throw new RuntimeException("Value " + value + " of type "+ type+ " previously had type "+ ret.getType());  }  return ret;}  }
class C{  public byte[] extractFingerprint(Wave wave){  int[][] coordinates;  byte[] fingerprint=new byte[0];  Resampler resampler=new Resampler();  int sourceRate=wave.getWaveHeader().getSampleRate();  int targetRate=fingerprintProperties.getSampleRate();  byte[] resampledWaveData=resampler.reSample(wave.getBytes(),wave.getWaveHeader().getBitsPerSample(),sourceRate,targetRate);  WaveHeader resampledWaveHeader=wave.getWaveHeader();  resampledWaveHeader.setSampleRate(targetRate);  Wave resampledWave=new Wave(resampledWaveHeader,resampledWaveData);  Spectrogram spectrogram=resampledWave.getSpectrogram(sampleSizePerFrame,overlapFactor);  double[][] spectorgramData=spectrogram.getNormalizedSpectrogramData();  List<Integer>[] pointsLists=getRobustPointList(spectorgramData);  int numFrames=pointsLists.length;  coordinates=new int[numFrames][numRobustPointsPerFrame];  for (int x=0; x < numFrames; x++) {    if (pointsLists[x].size() == numRobustPointsPerFrame) {      Iterator<Integer> pointsListsIterator=pointsLists[x].iterator();      for (int y=0; y < numRobustPointsPerFrame; y++) {        coordinates[x][y]=pointsListsIterator.next();      }    } else {      for (int y=0; y < numRobustPointsPerFrame; y++) {        coordinates[x][y]=-1;      }    }  }  List<Byte> byteList=new LinkedList<Byte>();  for (int i=0; i < numFrames; i++) {    for (int j=0; j < numRobustPointsPerFrame; j++) {      if (coordinates[i][j] != -1) {        int x=i;        byteList.add((byte)(x >> 8));        byteList.add((byte)x);        int y=coordinates[i][j];        byteList.add((byte)(y >> 8));        byteList.add((byte)y);        int intensity=(int)(spectorgramData[x][y] * Integer.MAX_VALUE);        byteList.add((byte)(intensity >> 24));        byteList.add((byte)(intensity >> 16));        byteList.add((byte)(intensity >> 8));        byteList.add((byte)intensity);      }    }  }  fingerprint=new byte[byteList.size()];  Iterator<Byte> byteListIterator=byteList.iterator();  int pointer=0;  while (byteListIterator.hasNext()) {    fingerprint[pointer++]=byteListIterator.next();  }  return fingerprint;}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  private void saveOrderToConfig(){  String columnOrder="";  int i=0;  for (  final TableColumn<PokemonModel,?> col : getColumns()) {    if (i != 0) {      columnOrder+=DASH;    }    columnOrder+=String.valueOf(ColumnId.get(col.getText()).ordinal());    i++;  }  ConfigNew.getConfig().setString(ConfigKey.COLUMN_ORDER_POKEMON_TABLE,columnOrder);}  }
class C{  @SubscribeEvent public void onGetPotentialSpawns(PotentialSpawns ps){  boolean allowSpawning=false;  if (currentMissionInit() != null && currentMissionInit().getMission() != null) {    ServerSection ss=currentMissionInit().getMission().getServerSection();    ServerInitialConditions sic=(ss != null) ? ss.getServerInitialConditions() : null;    if (sic != null)     allowSpawning=(sic.isAllowSpawning() == Boolean.TRUE);    if (allowSpawning && sic.getAllowedMobs() != null && !sic.getAllowedMobs().isEmpty()) {      Iterator<SpawnListEntry> it=ps.list.iterator();      while (it.hasNext()) {        SpawnListEntry sle=it.next();        String mobName=EntityList.classToStringMapping.get(sle.entityClass).toString();        boolean allowed=false;        for (        EntityTypes mob : sic.getAllowedMobs()) {          if (mob.value().equals(mobName))           allowed=true;        }        if (!allowed)         it.remove();      }    }  }  if (!allowSpawning)   ps.setCanceled(true);}  }
class C{  public static boolean isProjectStyle(@NotNull String styleResourceUrl){  return !styleResourceUrl.startsWith(ANDROID_STYLE_RESOURCE_PREFIX);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("show webpage taxon=");  String taxon=np.getWordRespectCase();  np.matchIgnoreCase(";");  AttributesWindow viewer=(AttributesWindow)getViewer();  if (viewer != null) {    boolean ok=false;    int taxId;    if (Basic.isInteger(taxon))     taxId=Integer.parseInt(taxon); else     taxId=TaxonomyData.getName2IdMap().get(taxon);    if (taxId > 0) {      try {        final URL url=new URL("http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=" + taxId);        Basic.openWebPage(url);        ok=true;      } catch (      Exception e1) {        Basic.caught(e1);      }    }    if (!ok)     NotificationsInSwing.showError(viewer.getFrame(),"Failed to open NCBI website for taxon: " + taxon);  }}  }
class C{  public void updateGestureRotation(float x,float y){  mChart.setRotationAngle(mChart.getAngleForPoint(x,y) - mStartAngle);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public final void goToLine(final int lineNumber) throws DataFallbackException {  boolean moreLines=true;  int readlines=0;  openFallbackInputStream();  if (lineNumber != 0) {    try {      while (moreLines && readlines < lineNumber) {        if (getInput().readLine() == null)         moreLines=false; else         readlines++;      }    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    }  }}  }
class C{  public void appendConsoleLine(int type,String line){  if (lines == null) {    lines=new String[BUFFER_SIZE];    lineTypes=new int[BUFFER_SIZE];  }  lines[writeIndex]=line;  lineTypes[writeIndex]=type;  if (++writeIndex >= BUFFER_SIZE) {    writeIndex=0;  }  if (writeIndex == readIndex) {    if (++readIndex >= BUFFER_SIZE) {      readIndex=0;    }  }}  }
class C{  public static GenericRecord subsetRecord(GenericRecord record,Schema subsetSchema,Map<String,String> renames){  GenericRecord subRecord=new GenericData.Record(subsetSchema);  for (  Field field : subRecord.getSchema().getFields()) {    String originalFieldName=field.name();    String newFieldName=originalFieldName;    if (renames != null && renames.containsKey(originalFieldName)) {      newFieldName=renames.get(originalFieldName);    }    subRecord.put(newFieldName,record.get(originalFieldName));  }  return subRecord;}  }
class C{  public static DataFrame toDataFrame(Schema schema,JavaRDD<List<Writable>> data){  JavaSparkContext sc=new JavaSparkContext(data.context());  SQLContext sqlContext=new SQLContext(sc);  JavaRDD<Row> rows=data.map(new ToRow(schema));  DataFrame dataFrame=sqlContext.createDataFrame(rows,fromSchema(schema));  return dataFrame;}  }
class C{  private boolean hasXGeoLocationPermission(Context context){  String searchUrl=TemplateUrlService.getInstance().getUrlForSearchQuery("foo");  return mSite.getAddress().matches(searchUrl) && GeolocationHeader.isGeoHeaderEnabledForUrl(context,searchUrl,false);}  }
class C{  public AutomaticDefaultedNamespacedRegistry(Function<String,K> keyFactory,K defaultValueKey){  super(keyFactory);  this.defaultValueKey=defaultValueKey;}  }
class C{  @Override public String resolvePublic(String publicId,String systemId) throws IOException {  String resolved=super.resolvePublic(publicId,systemId);  if (resolved != null) {    return resolved;  }  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == RESOLVER) {      if (systemId != null) {        resolved=resolveExternalSystem(systemId,e.getEntryArg(0));        if (resolved != null) {          return resolved;        }      }      resolved=resolveExternalPublic(publicId,e.getEntryArg(0));      if (resolved != null) {        return resolved;      }    }  }  return resolveSubordinateCatalogs(Catalog.PUBLIC,null,publicId,systemId);}  }
class C{  @Deprecated public void clearDiscCache(){  clearDiskCache();}  }
class C{  public static Aggregate<Map<String,Concept>,Number> sum(String varName){  return Aggregates.sum(varName);}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_view_mini_retryButton:    collectionsPresenter.initRefresh(getContext());  break;}}  }
class C{  protected void createImageDescriptor(String id,String name,URL baseURL){  URL url=null;  try {    url=new URL(baseURL,ISVNUIConstants.ICON_PATH + name);  } catch (  MalformedURLException e) {  }  ImageDescriptor desc=ImageDescriptor.createFromURL(url);  imageDescriptors.put(id,desc);}  }
class C{  @Override public synchronized void close(){  if (mIsInitializing) {    throw new IllegalStateException("Closed during initialization");  }  if (mDatabase != null && mDatabase.isOpen()) {    mDatabase.close();    mDatabase=null;  }}  }
class C{  public void startDocumentParsing(XMLEntityHandler scanner,short version){  if (version == Constants.XML_VERSION_1_0) {    fEntityManager.setScannerVersion(Constants.XML_VERSION_1_0);  } else {    fEntityManager.setScannerVersion(Constants.XML_VERSION_1_1);  }  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());  fEntityManager.setEntityHandler(scanner);  scanner.startEntity(fXMLSymbol,fEntityManager.getCurrentResourceIdentifier(),fEncoding,null);}  }
class C{  public void resume(){  engine.resume();}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();  name=ownerDocument.getNodeName(fNodeIndex);  int extra=ownerDocument.getNodeExtra(fNodeIndex);  isSpecified((extra & SPECIFIED) != 0);  isIdAttribute((extra & ID) != 0);  int extraNode=ownerDocument.getLastChild(fNodeIndex);  type=ownerDocument.getTypeInfo(extraNode);}  }
class C{  public Builder addIntegerDerivedColumn(String columnName,DateTimeFieldType type){  derivedColumns.add(new DerivedColumn(columnName,ColumnType.Integer,null,null,type));  return this;}  }
class C{  @Override public final long readLong() throws IOException {  dis.readFully(work,0,8);  return (long)(work[7]) << 56 | (long)(work[6] & 0xff) << 48 | (long)(work[5] & 0xff) << 40 | (long)(work[4] & 0xff) << 32 | (long)(work[3] & 0xff) << 24 | (long)(work[2] & 0xff) << 16 | (long)(work[1] & 0xff) << 8 | work[0] & 0xff;}  }
class C{  private Reader createLatin1Reader(InputStream stream){  return new Latin1Reader(stream,fTempString.ch.length);}  }
class C{  public static boolean isClassInSystemPackage(String className){  return className.startsWith("android.") || className.startsWith("java.") || className.startsWith("sun.");}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    page=refresh ? 1 : page + 1;    listener=new OnRequestPhotosListener(c,page,refresh);    model.getService().searchPhotos(model.getSearchQuery(),page,listener);  }}  }
class C{  public static int readInt(byte[] bytes){  return ByteBuffer.wrap(bytes).getInt();}  }
class C{  public static void checkDirectoryIsWriteable(@NotNull File directory) throws IOException {  while (!directory.exists() || !directory.isDirectory()) {    directory=directory.getParentFile();  }  if (!directory.canWrite()) {    throw new IOException("Cannot write to folder: " + directory.getAbsolutePath());  }}  }
class C{  public void hideBudgeAtIndex(final int index){  if (badgeList.get(index).getVisibility() == GONE) {    Log.d(TAG,"Budge at index: " + index + " already hidden");  } else {    BadgeHelper.hideBadge(badgeList.get(index));    badgeSaveInstanceHashMap.remove(index);  }}  }
class C{  public void populateAll() throws GeneralException {  for (  ServiceEcaAction ecaAction : serviceEcaRule.getEcaActionList()) {    servicesCalledByThisServiceEca.add(aif.getServiceArtifactInfo(ecaAction.getServiceName()));    UtilMisc.addToSortedSetInMap(this,aif.allServiceEcaInfosReferringToServiceName,ecaAction.getServiceName());  }}  }
class C{  public ArrayFieldVector<T> ebeMultiply(ArrayFieldVector<T> v) throws MathIllegalArgumentException {  checkVectorDimensions(v.data.length);  T[] out=MathArrays.buildArray(field,data.length);  for (int i=0; i < data.length; i++) {    out[i]=data[i].multiply(v.data[i]);  }  return new ArrayFieldVector<T>(field,out,false);}  }
