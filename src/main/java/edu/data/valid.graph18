class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  protected Rectangle lineToRect(Shape a,int line){  Rectangle r=null;  updateMetrics();  if (metrics != null) {    Rectangle alloc=a.getBounds();    if (line == 0) {      alloc.x+=firstLineOffset;      alloc.width-=firstLineOffset;    }    r=new Rectangle(alloc.x,alloc.y + (line * metrics.getHeight()),alloc.width,metrics.getHeight());  }  return r;}  }
class C{  public void paintImmediately(int x,int y,int w,int h){  Component c=this;  Component parent;  if (!isShowing()) {    return;  }  JComponent paintingOigin=SwingUtilities.getPaintingOrigin(this);  if (paintingOigin != null) {    Rectangle rectangle=SwingUtilities.convertRectangle(c,new Rectangle(x,y,w,h),paintingOigin);    paintingOigin.paintImmediately(rectangle.x,rectangle.y,rectangle.width,rectangle.height);    return;  }  while (!c.isOpaque()) {    parent=c.getParent();    if (parent != null) {      x+=c.getX();      y+=c.getY();      c=parent;    } else {      break;    }    if (!(c instanceof JComponent)) {      break;    }  }  if (c instanceof JComponent) {    ((JComponent)c)._paintImmediately(x,y,w,h);  } else {    c.repaint(x,y,w,h);  }}  }
class C{  public SubjectConfirmation(org.w3c.dom.Element subjectConfirmationElement) throws SAMLException {  Element elt=(Element)subjectConfirmationElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("SubjectConfirmation: local name " + "missing");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (!(eltName.equals("SubjectConfirmation"))) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("SubjectConfirmation: " + "invalid root element");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement"));  }  NodeList nl=elt.getChildNodes();  int length=nl.getLength();  for (int n=0; n < length; n++) {    Node child=(Node)nl.item(n);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    String childName=child.getLocalName();    if (childName.equals("ConfirmationMethod")) {      _confirmationMethodList.add(XMLUtils.getElementValue((Element)child));    } else     if (childName.equals("SubjectConfirmationData")) {      if (_subjectConfirmationData != null) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("SubjectConfirmation: " + "SubjectConfirmationData already parsed");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("moreElement"));      }      _subjectConfirmationData=(Element)child;    } else     if (childName.equals("KeyInfo")) {      if (_keyInfo != null) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("SubjectConfirmation: " + "KeyInfo already parsed");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("moreElement"));      }      _keyInfo=(Element)child;    } else {      if (SAMLUtilsCommon.debug.messageEnabled())       SAMLUtilsCommon.debug.message("SubjectConfirmation: " + "unsupported element KeyInfo in SubjectConfirmation");      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("unsupportedElement"));    }  }  if (_confirmationMethodList.isEmpty()) {    if (SAMLUtilsCommon.debug.messageEnabled())     SAMLUtilsCommon.debug.message("SubjectConfirmation: Mandatory " + "element confirmation method missing");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  }}  }
class C{  private int hashCode(Collection<List<Attribute>> attributesLists){  int result=0;  for (  List<Attribute> attributes : attributesLists) {    for (    Attribute a : attributes) {      result+=a.hashCode();    }  }  return result;}  }
class C{  public MBeanParameterInfo createParameterInfo(){  if (info == null) {    info=new MBeanParameterInfo(getName(),getType(),getDescription());  }  return (MBeanParameterInfo)info;}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public void pushCurrentFuncResult(Object val){  m_currentFuncResult.push(val);}  }
class C{  public OAuthVerificationException(final Throwable cause){  super(cause);}  }
class C{  protected static void sleep(long sleepFor){  long startTime=System.currentTimeMillis();  long haveBeenSleeping=0;  while (haveBeenSleeping < sleepFor) {    try {      if (sleepFor - haveBeenSleeping < 750) {        Thread.sleep(sleepFor - haveBeenSleeping);      } else {        Thread.sleep(750);        System.out.print(".");      }    } catch (    InterruptedException ex) {    }    haveBeenSleeping=(System.currentTimeMillis() - startTime);  }}  }
class C{  public boolean equals(SubjectConfirmation subjectConfirmation){  boolean cmEqual=true;  boolean scDataEqual=true;  if (subjectConfirmation != null) {    Set confMethods=subjectConfirmation.getConfirmationMethod();    int passedSize=confMethods.size();    if (passedSize != _confirmationMethodList.size()) {      cmEqual=false;    } else {      Iterator it=confMethods.iterator();      while (it.hasNext()) {        String confMethodStr=(String)it.next();        if (!_confirmationMethodList.contains(confMethodStr)) {          cmEqual=false;          break;        }      }    }    Element scData=subjectConfirmation.getSubjectConfirmationData();    if (_subjectConfirmationData != null) {      if (scData == null) {        scDataEqual=false;      } else {        String thisString=printSCData(_subjectConfirmationData,true,true);        String passString=printSCData(scData,true,true);        scDataEqual=thisString.equals(passString);      }    } else     if (scData != null) {      scDataEqual=false;    }    if (!(cmEqual) || !(scDataEqual)) {      return false;    }  } else {    return false;  }  return true;}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public boolean valueMatches(AttributeType type,ByteString value){  fullyDecode();switch (matchType) {case EQUALITY_MATCH_TYPE:    if (attributeType != null && attributeType.equals(type) && rawAssertionValue != null && value != null && equalityMatchingRule != null) {      return matches(equalityMatchingRule,value,rawAssertionValue);    }  return false;case SUBSTRINGS_TYPE:if (attributeType != null && attributeType.equals(type) && substringAssertion != null) {  try {    return substringAssertion.matches(substringMatchingRule.normalizeAttributeValue(value)).toBoolean();  } catch (  Exception e) {    logger.traceException(e);  }}return false;case GREATER_OR_EQUAL_TYPE:if (attributeType != null && attributeType.equals(type) && assertionValue != null && value != null && orderingMatchingRule != null) {try {ByteString normValue=orderingMatchingRule.normalizeAttributeValue(value);Assertion assertion=orderingMatchingRule.getGreaterOrEqualAssertion(assertionValue);return assertion.matches(normValue).toBoolean();} catch (DecodeException e) {logger.traceException(e);}}return false;case LESS_OR_EQUAL_TYPE:if (attributeType != null && attributeType.equals(type) && assertionValue != null && value != null && orderingMatchingRule != null) {try {ByteString normValue=orderingMatchingRule.normalizeAttributeValue(value);Assertion assertion=orderingMatchingRule.getLessOrEqualAssertion(assertionValue);return assertion.matches(normValue).toBoolean();} catch (DecodeException e) {logger.traceException(e);}}return false;case PRESENT_TYPE:return attributeType != null && attributeType.equals(type);case APPROXIMATE_MATCH_TYPE:if (attributeType != null && attributeType.equals(type) && assertionValue != null && value != null && approximateMatchingRule != null) {return matches(approximateMatchingRule,value,assertionValue);}return false;case EXTENSIBLE_MATCH_TYPE:if (attributeType == null) {return matches(matchingRule,value,assertionValue);} else if (!attributeType.equals(type)) {return false;}return matches(equalityMatchingRule,value,rawAssertionValue);default :return false;}}  }
class C{  public long executeInsert(){  acquireReference();  try {    return getSession().executeForLastInsertedRowId(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public synchronized void addRoute(SIPRequest sipRequest){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("setContact: dialogState: " + this + "state = "+ this.getState());  }  if (this.dialogState == CONFIRMED_STATE && SIPRequest.isTargetRefresh(sipRequest.getMethod())) {    this.doTargetRefresh(sipRequest);  }  if (this.dialogState == CONFIRMED_STATE || this.dialogState == TERMINATED_STATE) {    return;  }  ContactList contactList=sipRequest.getContactHeaders();  if (contactList != null) {    this.setRemoteTarget((ContactHeader)contactList.getFirst());  }  if (sipRequest.getToTag() != null)   return;  RecordRouteList rrlist=sipRequest.getRecordRouteHeaders();  if (rrlist != null) {    this.addRoute(rrlist);  } else {    this.routeList=new RouteList();  }}  }
class C{  public void fireRetransmissionTimer(){  try {    if (this.getInternalState() < 0 || !this.isMapped)     return;    boolean inv=isInviteTransaction();    int s=this.getInternalState();    if ((inv && TransactionState._CALLING == s) || (!inv && (TransactionState._TRYING == s || TransactionState._PROCEEDING == s))) {      if (lastRequest != null) {        if (sipStack.generateTimeStampHeader && lastRequest.getHeader(TimeStampHeader.NAME) != null) {          long milisec=System.currentTimeMillis();          TimeStamp timeStamp=new TimeStamp();          try {            timeStamp.setTimeStamp(milisec);          } catch (          InvalidArgumentException ex) {            InternalErrorHandler.handleException(ex);          }          lastRequest.setHeader(timeStamp);        }        super.sendMessage(lastRequest);        if (this.notifyOnRetransmit) {          TimeoutEvent txTimeout=new TimeoutEvent(this.getSipProvider(),this,Timeout.RETRANSMIT);          this.getSipProvider().handleEvent(txTimeout,this);        }        if (this.timeoutIfStillInCallingState && this.getInternalState() == TransactionState._CALLING) {          this.callingStateTimeoutCount--;          if (callingStateTimeoutCount == 0) {            TimeoutEvent timeoutEvent=new TimeoutEvent(this.getSipProvider(),this,Timeout.RETRANSMIT);            this.getSipProvider().handleEvent(timeoutEvent,this);            this.timeoutIfStillInCallingState=false;          }        }      }    }  } catch (  IOException e) {    this.raiseIOExceptionEvent();    raiseErrorEvent(SIPTransactionErrorEvent.TRANSPORT_ERROR);  }}  }
class C{  private void initSessionServiceDynamicSettings() throws SMSException, SSOException {  ServiceSchemaManager scm=new ServiceSchemaManager(ISAuthConstants.SESSION_SERVICE_NAME,ssoAuthSession);  updateSessionServiceDynamics(scm);  new AuthConfigMonitor(scm);}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(timeout).toString();}  }
class C{  public LinkedHashMap(){  super();  accessOrder=false;}  }
class C{  public AsfExtendedHeader(final long pos,final BigInteger length){  super(GUID.GUID_HEADER_EXTENSION,pos,length);}  }
class C{  public NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodeset();}  }
class C{  protected void readAttribute(List<StringBuilder> lines,StringBuilder line,DN entryDN,Map<ObjectClass,String> objectClasses,Map<AttributeType,List<AttributeBuilder>> userAttrBuilders,Map<AttributeType,List<AttributeBuilder>> operationalAttrBuilders,boolean checkSchema) throws LDIFException {  int colonPos=parseColonPosition(lines,line);  String attrDescStr=line.substring(0,colonPos);  final AttributeDescription attrDesc=parseAttrDescription(attrDescStr);  final AttributeType attrType=attrDesc.getAttributeType();  ByteString value=parseSingleValue(lines,line,entryDN,colonPos,attrDescStr);  if (attrType.isObjectClass()) {    if (!importConfig.includeObjectClasses()) {      logger.trace("Skipping objectclass %s for entry %s due to the import configuration.",value,entryDN);      return;    }    String ocName=value.toString().trim();    ObjectClass objectClass=DirectoryServer.getSchema().getObjectClass(ocName);    if (objectClasses.containsKey(objectClass)) {      logger.warn(WARN_LDIF_DUPLICATE_OBJECTCLASS,entryDN,lastEntryLineNumber,ocName);    } else {      objectClasses.put(objectClass,ocName);    }  } else {    if (!importConfig.includeAttribute(attrType)) {      logger.trace("Skipping attribute %s for entry %s due to the import configuration.",attrDescStr,entryDN);      return;    }    if (checkSchema && !attrType.getSyntax().isBEREncodingRequired() && attrDesc.hasOption("binary")) {      LocalizableMessage message=ERR_LDIF_INVALID_ATTR_OPTION.get(entryDN,lastEntryLineNumber,attrDescStr);      logToRejectWriter(lines,message);      throw new LDIFException(message,lastEntryLineNumber,true);    }    if (checkSchema && DirectoryServer.getSyntaxEnforcementPolicy() != AcceptRejectWarn.ACCEPT) {      LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();      if (!attrType.getSyntax().valueIsAcceptable(value,invalidReason)) {        LocalizableMessage message=WARN_LDIF_VALUE_VIOLATES_SYNTAX.get(entryDN,lastEntryLineNumber,value,attrDescStr,invalidReason);        if (DirectoryServer.getSyntaxEnforcementPolicy() == AcceptRejectWarn.WARN) {          logger.error(message);        } else {          logToRejectWriter(lines,message);          throw new LDIFException(message,lastEntryLineNumber,true);        }      }    }    ByteString attributeValue=value;    final Map<AttributeType,List<AttributeBuilder>> attrBuilders;    if (attrType.isOperational()) {      attrBuilders=operationalAttrBuilders;    } else {      attrBuilders=userAttrBuilders;    }    final List<AttributeBuilder> attrList=attrBuilders.get(attrType);    if (attrList == null) {      AttributeBuilder builder=new AttributeBuilder(attrDesc);      builder.add(attributeValue);      attrBuilders.put(attrType,newArrayList(builder));      return;    }    for (    AttributeBuilder a : attrList) {      if (a.optionsEqual(attrDesc)) {        if (!a.add(attributeValue) && checkSchema) {          LocalizableMessage message=WARN_LDIF_DUPLICATE_ATTR.get(entryDN,lastEntryLineNumber,attrDescStr,value);          logToRejectWriter(lines,message);          throw new LDIFException(message,lastEntryLineNumber,true);        }        if (attrType.isSingleValue() && a.size() > 1 && checkSchema) {          LocalizableMessage message=ERR_LDIF_MULTIPLE_VALUES_FOR_SINGLE_VALUED_ATTR.get(entryDN,lastEntryLineNumber,attrDescStr);          logToRejectWriter(lines,message);          throw new LDIFException(message,lastEntryLineNumber,true);        }        return;      }    }    AttributeBuilder builder=new AttributeBuilder(attrDesc);    builder.add(attributeValue);    attrList.add(builder);  }}  }
class C{  public BitVector(){  sizeInBits=0;  array=new byte[DEFAULT_SIZE_IN_BYTES];}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1)   throw new IllegalStateException();  sentRequestMillis=System.currentTimeMillis();}  }
class C{  public void onLogout(HttpServletRequest req,HttpServletResponse res,SSOToken ssoToken) throws AuthenticationException {  debug.message("ReplayPasswd.onLogout called");}  }
class C{  private int fanout_pass(int p_pass_no){  int components_to_go=sorted_components.size();  int routed_count=0;  int not_routed_count=0;  int insert_error_count=0;  int ripup_costs=thread.hdlg.itera_settings.autoroute_settings.get_start_ripup_costs() * (p_pass_no + 1);  for (  ArtComponent curr_component : sorted_components) {    thread.hdlg.screen_messages.set_batch_fanout_info(p_pass_no + 1,components_to_go);    for (    ArtPin curr_pin : curr_component.smd_pins) {      routing_board.changed_area_clear();      TimeLimitStoppable time_limit=new TimeLimitStoppable(10 + p_pass_no * 10,thread);      ArtResult art_result;      try {        art_result=routing_board.fanout(curr_pin.board_pin,thread.hdlg.itera_settings,ripup_costs,time_limit);      } catch (      Exception exc) {        thread.hdlg.userPrintln(classname + "fanout_pass",exc);        art_result=ArtResult.EXCEPTION;      }      if (art_result == ArtResult.ROUTED) {        ++routed_count;      } else       if (art_result == ArtResult.NOT_ROUTED) {        ++not_routed_count;      } else       if (art_result == ArtResult.INSERT_ERROR) {        ++insert_error_count;      }      if (art_result != ArtResult.NOT_ROUTED) {        thread.hdlg.repaint();      }      if (thread.is_stop_requested()) {        return routed_count;      }    }    --components_to_go;  }  thread.hdlg.userPrintln("fanout pass: " + (p_pass_no + 1) + ", routed: "+ routed_count+ ", not routed: "+ not_routed_count+ ", errors: "+ insert_error_count);  return routed_count;}  }
class C{  public RequestingUserName(String userName,Locale locale){  super(userName,locale);}  }
class C{  protected ArrayList<FoldingCellView> prepareViewsForAnimation(ArrayList<Integer> viewHeights,Bitmap titleViewBitmap,Bitmap contentViewBitmap){  if (viewHeights == null || viewHeights.isEmpty())   throw new IllegalStateException("ViewHeights array must be not null and not empty");  ArrayList<FoldingCellView> partsList=new ArrayList<>();  int partWidth=titleViewBitmap.getWidth();  int yOffset=0;  for (int i=0; i < viewHeights.size(); i++) {    int partHeight=viewHeights.get(i);    Bitmap partBitmap=Bitmap.createBitmap(partWidth,partHeight,Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(partBitmap);    Rect srcRect=new Rect(0,yOffset,partWidth,yOffset + partHeight);    Rect destRect=new Rect(0,0,partWidth,partHeight);    canvas.drawBitmap(contentViewBitmap,srcRect,destRect,null);    ImageView backView=createImageViewFromBitmap(partBitmap);    ImageView frontView=null;    if (i < viewHeights.size() - 1) {      frontView=(i == 0) ? createImageViewFromBitmap(titleViewBitmap) : createBackSideView(viewHeights.get(i + 1));    }    partsList.add(new FoldingCellView(frontView,backView,getContext()));    yOffset=yOffset + partHeight;  }  return partsList;}  }
class C{  public Goomba genGoomba(float[] coords,int stageZone,boolean checkBlocks){  return new Goomba(stageContainer,gameLoop,player,stageZone,checkBlocks,new String[]{null,"M " + ASPECT_LENGTH + ",0 L "+ ASPECT_LENGTH+ ","+ (ASPECT_LENGTH - 6),"M 0," + ASPECT_LENGTH + " L "+ ASPECT_LENGTH+ ","+ ASPECT_LENGTH,"M 0,0 L 0," + (ASPECT_LENGTH - 6),"M 20," + (ASPECT_LENGTH - 1) + " L "+ (ASPECT_LENGTH - 20)+ ","+ (ASPECT_LENGTH - 1),"M 0,0 L 0,0 " + ASPECT_LENGTH + ",0 "+ ASPECT_LENGTH+ ","+ ASPECT_LENGTH+ " 0,"+ ASPECT_LENGTH+ " Z"},coords[0],coords[1] - ASPECT_LENGTH,0.4f * REL_HEIGHT,4.9f * REL_HEIGHT,playerDeathSprites,goomba0,goomba1,goomba2,goomba3);}  }
class C{  public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){  if (file == null) {    throw new NullPointerException("The file must not be null");  }  addTracker(file.getPath(),marker,deleteStrategy);}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Node<E> h=null, t=null;  Object item;  while ((item=s.readObject()) != null) {    @SuppressWarnings("unchecked") Node<E> newNode=new Node<E>((E)item);    if (h == null)     h=t=newNode; else {      t.lazySetNext(newNode);      t=newNode;    }  }  if (h == null)   h=t=new Node<E>(null);  head=h;  tail=t;}  }
class C{  public static Foo fetchByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_First(uuid,orderByComparator);}  }
class C{  public ScriptCompiler shiftLeft(File source){  if (source.isFile()) {    sources.put(source.getName(),source);  } else   throw new IllegalArgumentException("not a file");  return this;}  }
class C{  public boolean hasName(){  return fieldSetFlags()[1];}  }
class C{  public StampingProperties useAppendMode(){  appendMode=true;  return this;}  }
class C{  public long timestamp(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return timestamp;}  }
class C{  public FSRemoteException(String s){  super(s);}  }
class C{  @Override public int available(){  return 0;}  }
class C{  public void requestAuthenticationFailureTimes(){  operations.add(PasswordPolicyStateOperationType.GET_AUTHENTICATION_FAILURE_TIMES);}  }
class C{  public String toString(){  return description;}  }
class C{  private static boolean hasDefaultConfigChanged(KeyManagerProviderCfg keyConfig,TrustManagerProviderCfg trustConfig){  if (keyConfig.isEnabled() && keyConfig instanceof FileBasedKeyManagerProviderCfg && trustConfig.isEnabled()&& trustConfig instanceof FileBasedTrustManagerProviderCfg) {    FileBasedKeyManagerProviderCfg fileKeyConfig=(FileBasedKeyManagerProviderCfg)keyConfig;    boolean pinIsProvidedByFileOnly=fileKeyConfig.getKeyStorePinFile() != null && fileKeyConfig.getKeyStorePin() == null && fileKeyConfig.getKeyStorePinEnvironmentVariable() == null && fileKeyConfig.getKeyStorePinProperty() == null;    return !pinIsProvidedByFileOnly;  }  return true;}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AttributeTypeImpl();}  }
class C{  private Future<JsonObject> checkAvailableInventory(ShoppingCart cart){  Future<List<JsonObject>> allInventories=getInventoryEndpoint().compose(null);  return allInventories.map(null);}  }
class C{  @Override public Container[] findChildren(){synchronized (children) {    Container results[]=new Container[children.size()];    return children.values().toArray(results);  }}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder("Type:");  result.append(type);  result.append("\nScope:");  result.append(scope);  result.append("\nDepth:");  result.append(depth);  result.append("\nOwner:");  result.append(owner);  result.append("\nExpiration:");  result.append(FastHttpDateFormat.formatDate(expiresAt,null));  Enumeration<String> tokensList=tokens.elements();  while (tokensList.hasMoreElements()) {    result.append("\nToken:");    result.append(tokensList.nextElement());  }  result.append("\n");  return result.toString();}  }
class C{  public boolean isLocal(){  return isLocal;}  }
class C{  public PageAttributes(PageAttributes obj){  set(obj);}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  SysexMessage event=new SysexMessage(newData);  return event;}  }
class C{  private TargetFilter(EnumTargetOperator op,SearchFilter filter){  this.op=op;  this.filter=filter;}  }
class C{  @Override public synchronized void reset() throws IOException {  if (buf == null) {    throw new IOException("Stream is closed");  }  if (-1 == markpos) {    throw new IOException("Mark has been invalidated.");  }  pos=markpos;}  }
class C{  private boolean isGuardWithCatch(int pos){  if (pos + 2 >= lambdaForm.names.length)   return false;  Name name0=lambdaForm.names[pos];  Name name1=lambdaForm.names[pos + 1];  Name name2=lambdaForm.names[pos + 2];  return nameRefersTo(name1,MethodHandleImpl.class,"guardWithCatch") && isInvokeBasic(name0) && isInvokeBasic(name2)&& name1.lastUseIndex(name0) == 3 && lambdaForm.lastUseIndex(name0) == pos + 1 && name2.lastUseIndex(name1) == 1 && lambdaForm.lastUseIndex(name1) == pos + 2;}  }
class C{  public static NSObject parse(File f) throws IOException, PropertyListFormatException {  return parse(new FileInputStream(f));}  }
class C{  private static LambdaForm preparedLambdaForm(MemberName m){  assert (m.isInvocable()) : m;  MethodType mtype=m.getInvocationType().basicType();  assert (!m.isMethodHandleInvoke() || "invokeBasic".equals(m.getName())) : m;  int which;switch (m.getReferenceKind()) {case REF_invokeVirtual:    which=LF_INVVIRTUAL;  break;case REF_invokeStatic:which=LF_INVSTATIC;break;case REF_invokeSpecial:which=LF_INVSPECIAL;break;case REF_invokeInterface:which=LF_INVINTERFACE;break;case REF_newInvokeSpecial:which=LF_NEWINVSPECIAL;break;default :throw new InternalError(m.toString());}if (which == LF_INVSTATIC && shouldBeInitialized(m)) {preparedLambdaForm(mtype,which);which=LF_INVSTATIC_INIT;}LambdaForm lform=preparedLambdaForm(mtype,which);maybeCompile(lform,m);assert (lform.methodType().dropParameterTypes(0,1).equals(m.getInvocationType().basicType())) : Arrays.asList(m,m.getInvocationType().basicType(),lform,lform.methodType());return lform;}  }
class C{  public String read(final int length){  if (length > this.length || pos + length > this.length) {    throw new StringIndexOutOfBoundsException();  }  final String substring=source.substring(pos,pos + length);  pos+=length;  return substring;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public static final Index createTestIndexNumericField(){  Index index=new Index("myindexnumericfield");  index.setTable(DB,"mytable");  ArrayList<IndexField> fields=new ArrayList<>();  fields.add(new IndexField("myindexedfield3",FieldDataType.INTEGER));  index.setFields(fields);  index.isUnique(false);  return index;}  }
class C{  public void stop(){  timer.cancel();  timer=null;}  }
class C{  static int divideArrayByInt(int[] quotient,int[] dividend,final int dividendLength,final int divisor){  long rem=0;  long bLong=divisor & 0xffffffffL;  for (int i=dividendLength - 1; i >= 0; i--) {    long temp=(rem << 32) | (dividend[i] & 0xffffffffL);    long quot;    if (temp >= 0) {      quot=(temp / bLong);      rem=(temp % bLong);    } else {      long aPos=temp >>> 1;      long bPos=divisor >>> 1;      quot=aPos / bPos;      rem=aPos % bPos;      rem=(rem << 1) + (temp & 1);      if ((divisor & 1) != 0) {        if (quot <= rem) {          rem-=quot;        } else {          if (quot - rem <= bLong) {            rem+=bLong - quot;            quot-=1;          } else {            rem+=(bLong << 1) - quot;            quot-=2;          }        }      }    }    quotient[i]=(int)(quot & 0xffffffffL);  }  return (int)rem;}  }
class C{  static <K extends Comparable<K>,V>LogFile<K,V> newAppendableLogFile(final File logFilePath,final RecordParser<K,V> parser) throws ChangelogException {  return new LogFile<>(logFilePath,parser,true);}  }
class C{  public int hashCode(){  int hash=addrType.hashCode();  for (int i=0; i < buf.length; i++) {    hash+=buf[i];  }  return hash;}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ExtensionElementImpl();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_AGENT_TYPES",null);    Set agentTypes=AgentConfiguration.getAgentTypes();    if (!agentTypes.isEmpty()) {      for (Iterator i=agentTypes.iterator(); i.hasNext(); ) {        outputWriter.printlnMessage((String)i.next());      }    } else {      outputWriter.printlnMessage(getResourceString("show-agent-type-no-results"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SHOW_AGENT_TYPES",null);  } catch (  SMSException e) {    String[] args={e.getMessage()};    debugError("ShowAgentTypes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_TYPES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={e.getMessage()};    debugError("ShowAgentTypes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_TYPES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.ExactlyOneElement createExactlyOneElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.ExactlyOneElementImpl();}  }
class C{  public MembershipException(LocalizableMessage errorMessage,boolean continueIterating,Throwable cause){  super(errorMessage,cause);  this.continueIterating=continueIterating;}  }
class C{  public ErrorMsg(int sender,int destination,LocalizableMessage details){  super(sender,destination);  this.msgID=getMessageId(details);  this.details=details;  this.creationTime=System.currentTimeMillis();  if (logger.isTraceEnabled()) {    logger.trace(" Creating error message" + this + " "+ stackTraceToSingleLineString(new Exception("trace")));  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InquiryType createInquiryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InquiryTypeImpl();}  }
class C{  Parsed copy(){  Parsed cloned=new Parsed();  cloned.fieldValues.putAll(this.fieldValues);  cloned.zone=this.zone;  cloned.chrono=this.chrono;  cloned.leapSecond=this.leapSecond;  return cloned;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported11.class,args);}  }
class C{  public static Map<String,Object> evaluate(Map<String,Object> map,Bindings bindings) throws ExpressionException {  Map<String,Object> result=new LinkedHashMap<>(map.size());  for (  Map.Entry<String,Object> entry : map.entrySet()) {    result.put(entry.getKey(),evaluate(entry.getValue(),bindings));  }  return result;}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),threadFactory,handler);}  }
class C{  public boolean isSyncEnabled(){  return data.get("enabled").defaultTo(Boolean.TRUE).asBoolean();}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  @Override public <T>List<T> dynamicQuery(DynamicQuery dynamicQuery){  return fooPersistence.findWithDynamicQuery(dynamicQuery);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported04.class,args);}  }
class C{  public static void calculateTiledPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans){  calculateTiledPositions(allocated,total,children,offsets,spans,true);}  }
class C{  @Inject public TrustedDevicesResource(TrustedDevicesDao dao,ContextHelper contextHelper){  super(dao,contextHelper);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ChannelData) {    return Arrays.equals(getUniqueId(),((ChannelData)o).getUniqueId());  } else   return false;}  }
class C{  public void removeRole(String rolename){  UserDatabase database=(UserDatabase)this.resource;  Role role=database.findRole(rolename);  if (role == null) {    return;  }  try {    MBeanUtils.destroyMBean(role);    database.removeRole(role);  } catch (  Exception e) {    IllegalArgumentException iae=new IllegalArgumentException("Exception destroying role [" + rolename + "] MBean");    iae.initCause(e);    throw iae;  }}  }
class C{  public TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_boolean);}  }
class C{  @Override public int read() throws IOException {  try {    beforeRead(1);    int b=in.read();    afterRead(b != -1 ? 1 : -1);    return b;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public int size(){  return waitingQueue.size() + workingList.size();}  }
class C{  public SQLFeatureNotSupportedException(Throwable cause){  super(cause);}  }
class C{  @AfterClass public void cleanUp() throws Exception {  TestCaseUtils.deleteDirectory(tempDir);}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public final void testGetPrivateExponent(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrivateExponent()));}  }
class C{  public AMSearchResults searchRoles(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchRoles(wildcard,null,searchControl);}  }
class C{  private void maybeCompileToBytecode(MethodHandle invoker){  final int EAGER_COMPILE_ARITY_LIMIT=10;  if (targetType == targetType.erase() && targetType.parameterCount() < EAGER_COMPILE_ARITY_LIMIT) {    invoker.form.compileToBytecode();  }}  }
class C{  public static byte[] hexStringToByteArray(String hexString) throws ParseException {  int length;  if (hexString == null || ((length=hexString.length()) == 0)) {    return new byte[0];  }  if ((length % 2) == 1) {    LocalizableMessage message=ERR_HEX_DECODE_INVALID_LENGTH.get(hexString);    throw new ParseException(message.toString(),0);  }  int pos=0;  int arrayLength=length / 2;  byte[] returnArray=new byte[arrayLength];  for (int i=0; i < arrayLength; i++) {switch (hexString.charAt(pos++)) {case '0':      returnArray[i]=0x00;    break;case '1':  returnArray[i]=0x10;break;case '2':returnArray[i]=0x20;break;case '3':returnArray[i]=0x30;break;case '4':returnArray[i]=0x40;break;case '5':returnArray[i]=0x50;break;case '6':returnArray[i]=0x60;break;case '7':returnArray[i]=0x70;break;case '8':returnArray[i]=(byte)0x80;break;case '9':returnArray[i]=(byte)0x90;break;case 'A':case 'a':returnArray[i]=(byte)0xA0;break;case 'B':case 'b':returnArray[i]=(byte)0xB0;break;case 'C':case 'c':returnArray[i]=(byte)0xC0;break;case 'D':case 'd':returnArray[i]=(byte)0xD0;break;case 'E':case 'e':returnArray[i]=(byte)0xE0;break;case 'F':case 'f':returnArray[i]=(byte)0xF0;break;default :LocalizableMessage message=ERR_HEX_DECODE_INVALID_CHARACTER.get(hexString,hexString.charAt(pos - 1));throw new ParseException(message.toString(),0);}switch (hexString.charAt(pos++)) {case '0':break;case '1':returnArray[i]|=0x01;break;case '2':returnArray[i]|=0x02;break;case '3':returnArray[i]|=0x03;break;case '4':returnArray[i]|=0x04;break;case '5':returnArray[i]|=0x05;break;case '6':returnArray[i]|=0x06;break;case '7':returnArray[i]|=0x07;break;case '8':returnArray[i]|=0x08;break;case '9':returnArray[i]|=0x09;break;case 'A':case 'a':returnArray[i]|=0x0A;break;case 'B':case 'b':returnArray[i]|=0x0B;break;case 'C':case 'c':returnArray[i]|=0x0C;break;case 'D':case 'd':returnArray[i]|=0x0D;break;case 'E':case 'e':returnArray[i]|=0x0E;break;case 'F':case 'f':returnArray[i]|=0x0F;break;default :LocalizableMessage message=ERR_HEX_DECODE_INVALID_CHARACTER.get(hexString,hexString.charAt(pos - 1));throw new ParseException(message.toString(),0);}}return returnArray;}  }
class C{  @Override public Filter visitBooleanLiteralFilter(final ObjectClassInfoHelper helper,final boolean value){  if (value) {    return null;  }  throw EMPTY_RESULT_SET_EXCEPTION;}  }
class C{  public void testCertificateFactory01() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertificateFactory certF=CertificateFactory.getInstance(validValues[i]);    assertEquals("Incorrect type: ",validValues[i],certF.getType());  }}  }
class C{  public static void loadDefaultsFromMetadata(Context context){  defaultsLoaded=true;  if (context == null) {    return;  }  ApplicationInfo ai=null;  try {    ai=context.getPackageManager().getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);  } catch (  PackageManager.NameNotFoundException e) {    return;  }  if (ai == null || ai.metaData == null) {    return;  }  if (applicationId == null) {    applicationId=ai.metaData.getString(APPLICATION_ID_PROPERTY);  }  if (appClientToken == null) {    appClientToken=ai.metaData.getString(CLIENT_TOKEN_PROPERTY);  }}  }
class C{  public RadiusAuditLoggingException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected JsonValue returnCertificateRequest(String alias,PKCS10CertificationRequest csr) throws Exception {  JsonValue content=new JsonValue(new LinkedHashMap<String,Object>());  content.put(ResourceResponse.FIELD_CONTENT_ID,alias);  content.put("csr",CertUtil.getCertString(csr));  content.put("publicKey",KeyRepresentation.getKeyMap(csr.getPublicKey()).getObject());  return content;}  }
class C{  public static <T>MenuResult<T> quit(){  return new MenuResult<>(Type.QUIT,Collections.<T>emptyList());}  }
class C{  protected static Long convertDoubleToLong(Double inDoubleValue){  if (inDoubleValue == null) {    return null;  }  if (inDoubleValue > Long.MAX_VALUE) {    return Long.MAX_VALUE;  }  if (inDoubleValue < Long.MIN_VALUE) {    return Long.MIN_VALUE;  }  Long outLongValue=Math.round(inDoubleValue);  return outLongValue;}  }
class C{  @Override public void run(){  if (logger.isTraceEnabled()) {    logger.trace(getMessage("Directory server status analyzer starting."));  }  try {    while (true) {      final boolean requestStatusBroadcastWasRequested;synchronized (eventMonitor) {        if (!isShutdownInitiated() && !pendingStatusMessage) {          eventMonitor.wait(STATUS_ANALYZER_SLEEP_TIME);        }        requestStatusBroadcastWasRequested=pendingStatusMessage;        pendingStatusMessage=false;      }      if (isShutdownInitiated()) {        break;      }      if (requestStatusBroadcastWasRequested) {        replicationServerDomain.sendPendingStatusMessages();      }      if (nextCheckDSDegradedStatusTime < System.currentTimeMillis()) {        replicationServerDomain.checkDSDegradedStatus();        nextCheckDSDegradedStatusTime=System.currentTimeMillis() + STATUS_ANALYZER_SLEEP_TIME;      }    }  } catch (  InterruptedException e) {  }  logger.trace(getMessage("Status analyzer is terminated."));}  }
class C{  public static Application saveApplication(Subject adminSubject,String realm,Application application) throws EntitlementException {  return getApplicationService(adminSubject,realm).saveApplication(application);}  }
class C{  public ImageIcon(byte[] imageData,String description){  this.image=Toolkit.getDefaultToolkit().createImage(imageData);  if (image == null) {    return;  }  this.description=description;  loadImage(image);}  }
class C{  public ParameterBlock add(byte b){  return add(new Byte(b));}  }
class C{  void skipSpace() throws IOException {  while (true) {switch (ch) {case '\n':      ln++;    ch=readCh();  lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;case ' ':case '\t':ch=readCh();break;default :return;}}}  }
class C{  public TriggerWrapper pause(){  if (state != Trigger.STATE_COMPLETE) {    previous_state=state;    state=Trigger.STATE_PAUSED;  }  return this;}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  protected static void lookupFieldResource(Context context,Object instance,Field field,String name,Class<?> clazz) throws NamingException, IllegalAccessException {  Object lookedupResource;  boolean accessibility;  String normalizedName=normalize(name);  if ((normalizedName != null) && (normalizedName.length() > 0)) {    lookedupResource=context.lookup(normalizedName);  } else {    lookedupResource=context.lookup(clazz.getName() + "/" + field.getName());  }synchronized (field) {    accessibility=field.isAccessible();    field.setAccessible(true);    field.set(instance,lookedupResource);    field.setAccessible(accessibility);  }}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (getPredicateCount() > 0)   return super.asNode(xctxt);  int current=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(current);  DTMAxisTraverser traverser=dtm.getAxisTraverser(m_axis);  String localName=getLocalName();  String namespace=getNamespace();  int what=m_whatToShow;  if (DTMFilter.SHOW_ALL == what || localName == NodeTest.WILD || namespace == NodeTest.WILD) {    return traverser.first(current);  } else {    int type=getNodeTypeTest(what);    int extendedType=dtm.getExpandedTypeID(namespace,localName,type);    return traverser.first(current,extendedType);  }}  }
class C{  public static AdjustmentListener add(AdjustmentListener a,AdjustmentListener b){  return (AdjustmentListener)addInternal(a,b);}  }
class C{  public void invokeLDIFImportEndPlugins(LDIFImportConfig importConfig){  for (  DirectoryServerPlugin p : ldifImportEndPlugins) {    p.doLDIFImportEnd(importConfig);  }}  }
class C{  private String pathsToXIncludes(final List<String> paths){  if (paths == null) {    return "";  }  final String nameSpace="xinclude";  final StringBuilder result=new StringBuilder();  for (  String path : paths) {    result.append("<").append(nameSpace).append(":include href='").append(path).append("' />");  }  return result.toString();}  }
class C{  public Pnt extend(double... coords){  double[] result=new double[coordinates.length + coords.length];  System.arraycopy(coordinates,0,result,0,coordinates.length);  System.arraycopy(coords,0,result,coordinates.length,coords.length);  return new Pnt(result);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  AuthPropertiesViewBean vb=(AuthPropertiesViewBean)getViewBean(AuthPropertiesViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.ValueElement createValueElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.ValueElementImpl(value);}  }
class C{  private List<FilterList> checkOutdatedFilterUpdates(boolean force){  if (!force) {    if (!NetworkUtils.isNetworkAvailable(context) || !InternetUtils.isInternetAvailable()) {      LOG.info("checkOutdatedFilterUpdates: internet is not available, doing nothing.");      return new ArrayList<>();    }    if (preferencesService.isUpdateOverWifiOnly() && !NetworkUtils.isConnectionWifi(context)) {      LOG.info("checkOutdatedFilterUpdates: Updates permitted over Wi-Fi only, doing nothing.");      return new ArrayList<>();    }    boolean updateFilters=preferencesService.isAutoUpdateFilters();    if (!updateFilters) {      LOG.info("Filters auto-update is disabled, doing nothing");      return new ArrayList<>();    }  }  List<FilterList> filtersToUpdate=new ArrayList<>();  long timeFromUpdate=new Date().getTime() - UPDATE_INVALIDATE_PERIOD;  for (  FilterList filter : getEnabledFilters()) {    if (force || (filter.getLastTimeDownloaded() == null) || (filter.getLastTimeDownloaded().getTime() - timeFromUpdate < 0)) {      filtersToUpdate.add(filter);    }  }  return checkFilterUpdates(filtersToUpdate,force);}  }
class C{  public URLNotFoundException(Throwable t){  super(t.getMessage());  fillInStackTrace();}  }
class C{  public int indexOf(String string){  return indexOf(string,0);}  }
class C{  public void removePluginSchema(String serviceName,String interfaceName,String pluginName) throws SMSException, SSOException {  ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);  String version=ssm.getVersion();  Set pluginSchemaNames=ssm.getPluginSchemaNames(interfaceName,null);  if (pluginSchemaNames.contains(pluginName)) {    StringBuilder sb=new StringBuilder(100);    sb.append("ou=").append(pluginName).append(",").append("ou=").append(interfaceName).append(",").append(CreateServiceConfig.PLUGIN_CONFIG_NODE).append("ou=").append(version).append(",").append("ou=").append(serviceName).append(",").append(SMSEntry.SERVICES_RDN).append(",");    CachedSMSEntry ce;    try {      ce=CachedSMSEntry.getInstance(token,sb.toString() + SMSEntry.baseDN);      SMSEntry smsEntry=ce.getClonedSMSEntry();      smsEntry.forceDelete(token);      ce.refresh(smsEntry);    } catch (    SSOException ssoe) {      throw (new SMSException(ssoe,"sms-INVALID_SSO_TOKEN"));    }  } else {    throw new SMSException("Condition does not exist");  }  if (debug.messageEnabled()) {    debug.message("removePluginSchema: remove plugin " + pluginName + "from service "+ serviceName);  }}  }
class C{  public IOError(Throwable cause){  super(cause);}  }
class C{  private int performModifyOperation(boolean authenticate) throws Exception {  String path=TestCaseUtils.createTempFile("dn: o=rejectTestCase,o=test","changetype: modify","replace: description","description: New Description");  return LDAPModify.mainModify(modifyArgs(authenticate,path),false,null,null);}  }
class C{  public static boolean isCookieSecure(){  return secureCookie;}  }
class C{  @BeforeClass public void startServerAndCreatePasswordFiles() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.dsconfig("set-sasl-mechanism-handler-prop","--handler-name","DIGEST-MD5","--set","server-fqdn:" + "127.0.0.1");  File pwFile=File.createTempFile("valid-bind-password-",".txt");  pwFile.deleteOnExit();  FileWriter fileWriter=new FileWriter(pwFile);  fileWriter.write("password" + System.getProperty("line.separator"));  fileWriter.close();  validPasswordFile=pwFile.getAbsolutePath();  pwFile=File.createTempFile("invalid-bind-password-",".txt");  pwFile.deleteOnExit();  fileWriter=new FileWriter(pwFile);  fileWriter.write("wrongPassword" + System.getProperty("line.separator"));  fileWriter.close();}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public String toStringImpl(){  return str;}  }
class C{  protected void redefine(int nodetype,String namespace,String localName){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=nodetype + namespace.hashCode() + localName.hashCode();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS05.class,args);}  }
class C{  @Override public void processExtendedOperation(ExtendedOperation operation){  operation.setResponseOID(OID_START_TLS_REQUEST);  ClientConnection clientConnection=operation.getClientConnection();  if (clientConnection == null) {    operation.setResultCode(ResultCode.UNAVAILABLE);    operation.appendErrorMessage(ERR_STARTTLS_NO_CLIENT_CONNECTION.get());    return;  }  TLSCapableConnection tlsCapableConnection;  if (clientConnection instanceof TLSCapableConnection) {    tlsCapableConnection=(TLSCapableConnection)clientConnection;  } else {    operation.setResultCode(ResultCode.UNAVAILABLE);    operation.appendErrorMessage(ERR_STARTTLS_NOT_TLS_CAPABLE.get());    return;  }  LocalizableMessageBuilder unavailableReason=new LocalizableMessageBuilder();  if (!tlsCapableConnection.prepareTLS(unavailableReason)) {    operation.setResultCode(ResultCode.UNAVAILABLE);    operation.setErrorMessage(unavailableReason);    return;  }  operation.setResultCode(ResultCode.SUCCESS);}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ArrayList<Polyline> split_at_point(int p_line_no,PlaPointInt p_point){  ArrayList<Polyline> result=new ArrayList<Polyline>(2);  if (p_line_no < 1 || p_line_no > plaline_len(-2)) {    System.out.println("split_at_point.split: p_line_no out of range");    return result;  }  final PlaLineInt split_line=plaline(p_line_no);  if (!split_line.is_colinear(p_point,2)) {    Stat.instance.userPrintln("split_at_point: p-line_no=" + p_line_no + " NOT colinear");    return result;  }  PlaPoint prev_corner=corner(p_line_no - 1);  PlaPoint next_corner=corner(p_line_no);  if (!p_point.is_inside(prev_corner.round(),next_corner.round(),0)) {    if (Stat.instance.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))     Stat.instance.userPrintln("split_at_point: p_line_no=" + p_line_no + " NOT inside");    return result;  }  if (p_point.equals(prev_corner)) {    if (Stat.instance.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))     Stat.instance.userPrintln("split_at_point: p_line_no=" + p_line_no + " p_point.equals(prev_corner)");    return result;  }  if (p_point.equals(next_corner)) {    if (Stat.instance.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))     Stat.instance.userPrintln("split_at_point: p_line_no=" + p_line_no + " p_point.equals(next_corner)");    return result;  }  PlaDirection split_direction=split_line.direction();  PlaLineIntAlist first_piece=new PlaLineIntAlist(plaline_len());  alist_append_to(first_piece,0,p_line_no);  if (Stat.instance.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG)) {    if (prev_corner.is_rational())     first_piece.add(new PlaLineInt(p_point,split_direction)); else     first_piece.add(new PlaLineInt(prev_corner.round(),p_point));  } else {    first_piece.add(split_line);  }  first_piece.add(new PlaLineInt(p_point,split_direction.rotate_45_deg(2)));  Polyline first_poly=new Polyline(first_piece);  if (first_poly.has_corner_loopt())   return result;  PlaLineIntAlist second_piece=new PlaLineIntAlist(plaline_len());  second_piece.add(new PlaLineInt(p_point,split_direction.rotate_45_deg(2)));  if (Stat.instance.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG)) {    if (next_corner.is_rational())     second_piece.add(new PlaLineInt(p_point,split_direction)); else     second_piece.add(new PlaLineInt(p_point,next_corner.round()));  } else {    second_piece.add(split_line);  }  alist_append_to(second_piece,p_line_no + 1);  Polyline second_poly=new Polyline(second_piece);  if (second_poly.has_corner_loopt())   return result;  result.add(first_poly);  result.add(second_poly);  return result;}  }
class C{  public SetupParameters backendType(String backendType){  this.backendType=backendType;  return this;}  }
class C{  protected LocPathIterator createDTMIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  LocPathIterator lpi=(LocPathIterator)WalkerFactory.newDTMIterator(compiler,opPos,(compiler.getLocationPathDepth() <= 0));  return lpi;}  }
class C{  public HttpUtils(){}  }
class C{  public final void info(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,t);  }}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  private void writeLargeDataToFile(File file,int size) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  byte[] buf=new byte[size];  try {    fos.write(buf);  }  finally {    fos.close();  }}  }
class C{  public static String binEncode(final String value){  return encode(value,16,2);}  }
class C{  @JsonIgnore public boolean isValid(){  return StringUtils.isNotEmpty(getAuthnChain()) && StringUtils.isNotEmpty(getDisplayName()) && StringUtils.isNotEmpty(getIconPath());}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeShortArrayAsOctetString() throws Exception {  super.testDecodeShortArrayAsOctetString();}  }
class C{  protected <V>Promise<V,ResourceException> handleRequest(final Context context,final Request request){  return new NotSupportedException().asPromise();}  }
class C{  public void endMonitoringOf(final InetSocketAddress socketAddress){  candidateSockets.endMonitoringOfSocketIdentifier(SocketIdentifier.fromInet4SocketAddress(socketAddress));}  }
class C{  public boolean isCallOKWhenVisible(){  return callOKWhenVisible;}  }
class C{  public void registerChangeListener(SubentryChangeListener changeListener){  changeListeners.add(changeListener);}  }
class C{  public STRING(String mimeType){  super(mimeType,"java.lang.String");}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized Object clone(){  try {    Vector<E> vector=(Vector<E>)super.clone();    vector.elementData=elementData.clone();    return vector;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  protected void writeStyles() throws IOException {  DefaultStyledDocument styledDoc=((DefaultStyledDocument)getDocument());  Enumeration styleNames=styledDoc.getStyleNames();  while (styleNames.hasMoreElements()) {    Style s=styledDoc.getStyle((String)styleNames.nextElement());    if (s.getAttributeCount() == 1 && s.isDefined(StyleConstants.NameAttribute)) {      continue;    }    indent();    write("p." + addStyleName(s.getName()));    write(" {\n");    incrIndent();    writeAttributes(s);    decrIndent();    indent();    write("}\n");  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public Hashtable(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load: " + loadFactor);  if (initialCapacity == 0)   initialCapacity=1;  this.loadFactor=loadFactor;  table=new Entry<?,?>[initialCapacity];  threshold=(int)Math.min(initialCapacity * loadFactor,MAX_ARRAY_SIZE + 1);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DSTMonthDay createDSTMonthDay() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DSTMonthDayImpl();}  }
class C{  protected boolean updateNextIndex(){  if (nextIndex == -1 && !parent.isExpanded()) {    return false;  }  if (childCount == 0) {    return false;  } else   if (++nextIndex >= childCount) {    return false;  }  FHTreeStateNode child=parent.getChildAtModelIndex(nextIndex);  if (child != null && child.isExpanded()) {    parent=child;    nextIndex=-1;    childCount=treeModel.getChildCount(child.getUserObject());  }  return true;}  }
class C{  public void addBeanContextMembershipListener(BeanContextMembershipListener bcml){  if (bcml == null)   throw new NullPointerException("listener");synchronized (bcmListeners) {    if (bcmListeners.contains(bcml))     return; else     bcmListeners.add(bcml);  }}  }
class C{  public static boolean isAccessTokenValid(String accessToken){  if (TextUtils.isEmpty(accessToken)) {    return false;  }  if (!accessToken.startsWith("pk.") && !accessToken.startsWith("sk.") && !accessToken.startsWith("tk.")) {    return false;  }  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitElement createActivationLimitElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitElementImpl();}  }
class C{  public void printStackTrace(PrintWriter s){  if (getCause() != null) {    getCause().printStackTrace(s);    s.println("--------------- linked to ------------------");  }  super.printStackTrace(s);}  }
class C{  public Dimension minimumLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    boolean ltr=target.getComponentOrientation().isLeftToRight();    Component c=null;    if ((c=getChild(EAST,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(WEST,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(CENTER,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width+=d.width;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(NORTH,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    if ((c=getChild(SOUTH,ltr)) != null) {      Dimension d=c.getMinimumSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right;    dim.height+=insets.top + insets.bottom;    return dim;  }}  }
class C{  protected CompletionStage<Result> onDevServerError(Http.RequestHeader request,UsefulException exception){  ObjectNode jsonError=Json.newObject();  final Throwable cause=exception.cause;  final String description=exception.description;  final String id=exception.id;  final String title=exception.title;  jsonError.put("description",description);  jsonError.put("title",title);  jsonError.put("id",id);  jsonError.put("message",exception.getMessage());  jsonError.set("cause",causesToJson(cause));  return CompletableFuture.completedFuture(Results.internalServerError(jsonError));}  }
class C{  public InformationFieldParser(String informationField){  this.lexer=new Lexer("charLexer",informationField);}  }
class C{  private void searchBaseDN(DN baseDN,DN oldEntryDN,DN newEntryDN){  HashSet<SearchFilter> componentFilters=new HashSet<>();  for (  AttributeType attributeType : attributeTypes) {    componentFilters.add(SearchFilter.createEqualityFilter(attributeType,ByteString.valueOfUtf8(oldEntryDN.toString())));  }  SearchFilter orFilter=SearchFilter.createORFilter(componentFilters);  final SearchRequest request=newSearchRequest(baseDN,SearchScope.WHOLE_SUBTREE,orFilter);  InternalSearchOperation operation=getRootConnection().processSearch(request);switch (operation.getResultCode().asEnum()) {case SUCCESS:    break;case NO_SUCH_OBJECT:  logger.debug(INFO_PLUGIN_REFERENT_SEARCH_NO_SUCH_OBJECT,baseDN);return;default :logger.error(ERR_PLUGIN_REFERENT_SEARCH_FAILED,operation.getErrorMessage());return;}for (SearchResultEntry entry : operation.getSearchEntries()) {deleteAddAttributesEntry(entry,oldEntryDN,newEntryDN);}}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    if (!isOpen()) {      throw new IOException("InputStreamReader is closed");    }    char[] buf=new char[1];    return read(buf,0,1) != -1 ? buf[0] : -1;  }}  }
class C{  private static boolean rightsAccessAllowed(AciLDAPOperationContainer container,AciHandler handler,int mask){  boolean retRight=true, retInfo=true;  if (hasAttrMask(mask,ACL_RIGHTS)) {    container.setCurrentAttributeType(aclRights);    container.setRights(ACI_READ | ACI_SKIP_PROXY_CHECK);    retRight=handler.accessAllowed(container);  }  if (hasAttrMask(mask,ACL_RIGHTS_INFO)) {    container.setCurrentAttributeType(aclRightsInfo);    container.setRights(ACI_READ | ACI_SKIP_PROXY_CHECK);    retInfo=handler.accessAllowed(container);  }  return retRight && retInfo;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobImpressionsSupported);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSpinnerUI();  return MultiLookAndFeel.createUIs(mui,((MultiSpinnerUI)mui).uis,a);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnContextClassRefElement createAuthnContextClassRefElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextClassRefElementImpl();}  }
class C{  public static boolean isXML11Name(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (target.equals("xml-stylesheet")) {    String href=null;    String type=null;    String title=null;    String media=null;    String charset=null;    boolean alternate=false;    StringTokenizer tokenizer=new StringTokenizer(data," \t=\n",true);    boolean lookedAhead=false;    Source source=null;    String token="";    while (tokenizer.hasMoreTokens()) {      if (!lookedAhead)       token=tokenizer.nextToken(); else       lookedAhead=false;      if (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))       continue;      String name=token;      if (name.equals("type")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        type=token.substring(1,token.length() - 1);      } else       if (name.equals("href")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        href=token;        if (tokenizer.hasMoreTokens()) {          token=tokenizer.nextToken();          while (token.equals("=") && tokenizer.hasMoreTokens()) {            href=href + token + tokenizer.nextToken();            if (tokenizer.hasMoreTokens()) {              token=tokenizer.nextToken();              lookedAhead=true;            } else {              break;            }          }        }        href=href.substring(1,href.length() - 1);        try {          if (m_uriResolver != null) {            source=m_uriResolver.resolve(href,m_baseID);          } else {            href=SystemIDResolver.getAbsoluteURI(href,m_baseID);            source=new SAXSource(new InputSource(href));          }        } catch (        TransformerException te) {          throw new org.xml.sax.SAXException(te);        }      } else       if (name.equals("title")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        title=token.substring(1,token.length() - 1);      } else       if (name.equals("media")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        media=token.substring(1,token.length() - 1);      } else       if (name.equals("charset")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        charset=token.substring(1,token.length() - 1);      } else       if (name.equals("alternate")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        alternate=token.substring(1,token.length() - 1).equals("yes");      }    }    if ((null != type) && (type.equals("text/xsl") || type.equals("text/xml") || type.equals("application/xml+xslt")) && (null != href)) {      if (null != m_media) {        if (null != media) {          if (!media.equals(m_media))           return;        } else         return;      }      if (null != m_charset) {        if (null != charset) {          if (!charset.equals(m_charset))           return;        } else         return;      }      if (null != m_title) {        if (null != title) {          if (!title.equals(m_title))           return;        } else         return;      }      m_stylesheets.addElement(source);    }  }}  }
class C{  public int compareTo(XMLString xstr){  int len1=m_length;  int len2=xstr.length();  int n=Math.min(len1,len2);  FastStringBuffer fsb=fsb();  int i=m_start;  int j=0;  while (n-- != 0) {    char c1=fsb.charAt(i);    char c2=xstr.charAt(j);    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  public void destroyModuleState(){  debug.message("clean up module state");  userName=null;  userPrincipal=null;}  }
class C{  public boolean isEmpty(){  long sum=0L;  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> seg=segmentAt(segments,j);    if (seg != null) {      if (seg.count != 0)       return false;      sum+=seg.modCount;    }  }  if (sum != 0L) {    for (int j=0; j < segments.length; ++j) {      Segment<K,V> seg=segmentAt(segments,j);      if (seg != null) {        if (seg.count != 0)         return false;        sum-=seg.modCount;      }    }    if (sum != 0L)     return false;  }  return true;}  }
class C{  static void useServerSideSortRequestControl(Connection connection) throws LdapException {  if (isSupported(ServerSideSortRequestControl.OID)) {    final SearchRequest request=Requests.newSearchRequest("ou=People,dc=example,dc=com",SearchScope.WHOLE_SUBTREE,"(sn=Jensen)","cn").addControl(ServerSideSortRequestControl.newControl(true,new SortKey("cn")));    final SearchResultHandler resultHandler=new MySearchResultHandler();    final Result result=connection.search(request,resultHandler);    try {      final ServerSideSortResponseControl control=result.getControl(ServerSideSortResponseControl.DECODER,new DecodeOptions());      if (control != null && control.getResult() == ResultCode.SUCCESS) {        System.out.println("# Entries are sorted.");      } else {        System.out.println("# Entries not necessarily sorted");      }    } catch (    final DecodeException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());    }  } else {    System.err.println("ServerSideSortRequestControl not supported");  }}  }
class C{  public IdleTimeoutAttribute(int timeout){  super(OctetUtils.toOctets(AttributeType.IDLE_TIMEOUT,timeout));  this.timeout=timeout;}  }
class C{  protected boolean isPWResetEnabled(){  return model.isPasswordResetEnabled();}  }
class C{  private boolean hasNext(Pattern pattern){  if (!hasNext()) {    return false;  }  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));  return matcher.find();}  }
class C{  public boolean isUserExists(String userID) throws DataStoreProviderException {  debug.message("FedletDataStoreProvider.isUserExists(String)");  return false;}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  public ConditionAddViewBean(){  super("ConditionAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public void testIsWeak(){  try {    DESKeySpec.isWeak(null,1);    fail("Should raise an InvalidKeyException " + "in case of null byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key={1,2,3,4,5,6,7,8};  try {    DESKeySpec.isWeak(key,1);    fail("Should raise an InvalidKeyException " + "in case of short byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  for (int i=0; i < semiweaks.length; i++) {    try {      assertTrue("Method returns false when true is expected",DESKeySpec.isWeak(semiweaks[i],0));    } catch (    InvalidKeyException e) {      fail("Unexpected InvalidKeyException was thrown.");    }  }  for (int i=0; i < notsemiweaks.length; i++) {    try {      assertFalse("Method returns true when false is expected",DESKeySpec.isWeak(notsemiweaks[i],0));    } catch (    InvalidKeyException e) {      fail("Unexpected InvalidKeyException was thrown.");    }  }}  }
class C{  public void testDivisionKnuthMultiDigitsByOneDigit(){  byte aBytes[]={113,-83,123,-5,18,-34,67,39,-29};  byte bBytes[]={2,-3,-4,-5};  int aSign=1;  int bSign=-1;  byte rBytes[]={-38,2,7,30,109,-43};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  if (dstStatus == null) {    DSTUtils.debug.error("DSTQueryResponse.toString: Status is null");    return "";  }  String tempPrefix="";  if (includeNS) {    if (prefix == null) {      prefix=DSTConstants.DEFAULT_NS_PREFIX;    }    tempPrefix=prefix + ":";  }  if (declareNS) {    if (nameSpaceURI == null) {      DSTUtils.debug.error("DSTQueryResponse.toString: Name Space is " + "not defined");      return "";    }  }  StringBuffer sb=new StringBuffer(500);  sb.append("<").append(tempPrefix).append("QueryResponse");  if (id != null && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  if (itemIDRef != null && itemIDRef.length() != 0) {    sb.append(" itemIDRef=\"").append(itemIDRef).append("\"");  }  if (dateStamp != null) {    sb.append(" timeStamp=\"").append(DateUtils.toUTCDateFormat(dateStamp)).append("\"");  }  if (declareNS) {    sb.append(" xmlns:").append(prefix).append("=\"").append(nameSpaceURI).append("\"").append(" xmlns=\"").append(nameSpaceURI).append("\"");  }  sb.append(">").append(DSTConstants.NL).append(dstStatus.toString());  Iterator iter=data.iterator();  while (iter.hasNext()) {    DSTData dstData=(DSTData)iter.next();    sb.append(dstData.toString());  }  sb.append("</").append(tempPrefix).append("QueryResponse").append(">");  return sb.toString();}  }
class C{  public boolean updateApplicationLoginInfo(ModelApplication modelApp){  if (isClosed) {    throw new IllegalStateException(TAG + " is closed.");  }  return registeredAppDbAdapter.update(modelApp.getDatabaseId(),null,null,null,null,modelApp.getUsername(),modelApp.getPassword());}  }
class C{  public boolean validate(Set<String> values){  boolean valid=true;  if (!CollectionUtils.isEmpty(values)) {    for (    String value : values) {      if (!valid) {        break;      }      if (value.length() > 0) {        Matcher m=pattern.matcher(value);        valid=m.matches();      }    }  }  if (valid) {    valid=MapDuplicateKeyChecker.checkForNoDuplicateKeyInValue(values);  }  return valid;}  }
class C{  public void startPrefixMapping(String prefix,String uri){}  }
class C{  public boolean isLockedOut(){  String userDN=loginState.getUserToken();  return isLockedOut(userDN);}  }
class C{  protected boolean removeSessionAttribute(ContextName cn,String sessionId,String attributeName,StringManager smClient){  HttpSession session=getSessionForNameAndId(cn,sessionId,smClient).getSession();  if (null == session) {    if (debug >= 1) {      log("WARNING: can't remove attribute '" + attributeName + "' for null session "+ sessionId);    }    return false;  }  boolean wasPresent=(null != session.getAttribute(attributeName));  try {    session.removeAttribute(attributeName);  } catch (  IllegalStateException ise) {    if (debug >= 1) {      log("Can't remote attribute '" + attributeName + "' for invalidated session id "+ sessionId);    }  }  return wasPresent;}  }
class C{  public PasswordPolicyStateExtendedResult(final ResultCode resultCode){  super(resultCode);}  }
class C{  static Map<? extends Attribute,?> addInputMethodAttrs(Map<? extends Attribute,?> oldStyles){  Object value=oldStyles.get(TextAttribute.INPUT_METHOD_HIGHLIGHT);  try {    if (value != null) {      if (value instanceof Annotation) {        value=((Annotation)value).getValue();      }      InputMethodHighlight hl;      hl=(InputMethodHighlight)value;      Map<? extends Attribute,?> imStyles=null;      try {        imStyles=hl.getStyle();      } catch (      NoSuchMethodError e) {      }      if (imStyles == null) {        Toolkit tk=Toolkit.getDefaultToolkit();        imStyles=tk.mapInputMethodHighlight(hl);      }      if (imStyles != null) {        HashMap<Attribute,Object> newStyles=new HashMap<>(5,(float)0.9);        newStyles.putAll(oldStyles);        newStyles.putAll(imStyles);        return newStyles;      }    }  } catch (  ClassCastException e) {  }  return oldStyles;}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(entitygetpublicidnull.class,args);}  }
class C{  int registerSystemFontDirectories(){  int count=0;  String[] withSubDirs={FileUtil.getFontsDir(),"/usr/share/X11/fonts","/usr/X/lib/X11/fonts","/usr/openwin/lib/X11/fonts","/usr/share/fonts","/usr/X11R6/lib/X11/fonts"};  for (  String directory : withSubDirs) {    count+=registerFontDirectory(directory,true);  }  String[] withoutSubDirs={"/Library/Fonts","/System/Library/Fonts"};  for (  String directory : withoutSubDirs) {    count+=registerFontDirectory(directory,false);  }  return count;}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return _fooLocalService.dynamicQueryCount(dynamicQuery,projection);}  }
class C{  private String extractHumanReadableRealmString(String realm){  if (realm == null || !realm.contains("o=")) {    return "";  }  List<String> tokens=new ArrayList<String>();  StringTokenizer tokenizer=new StringTokenizer(realm,",");  while (tokenizer.hasMoreTokens()) {    tokens.add(tokenizer.nextToken());  }  String extractedRealmString="";  for (  String token : tokens) {    if (token.contains("o=")) {      extractedRealmString+="/" + token.substring(token.indexOf("=") + 1);    }  }  extractedRealmString+="/";  return extractedRealmString;}  }
class C{  public int hashCode(){  return getStringValue().hashCode();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509SubjectName createX509DataTypeX509SubjectName(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509SubjectNameImpl(value);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    Response response=messageFactory.createResponse(200,request,null,null);    serverTransactionId.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.DigSigType createDigSigType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DigSigTypeImpl();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=captureManager.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public static QrSegment makeAlphanumeric(String text){  if (text == null)   throw new NullPointerException();  if (!ALPHANUMERIC_REGEX.matcher(text).matches())   throw new IllegalArgumentException("String contains unencodable characters in alphanumeric mode");  BitBuffer bb=new BitBuffer();  int i;  for (i=0; i + 2 <= text.length(); i+=2) {    int temp=ALPHANUMERIC_ENCODING_TABLE[text.charAt(i) - ' '] * 45;    temp+=ALPHANUMERIC_ENCODING_TABLE[text.charAt(i + 1) - ' '];    bb.appendBits(temp,11);  }  if (i < text.length())   bb.appendBits(ALPHANUMERIC_ENCODING_TABLE[text.charAt(i) - ' '],6);  return new QrSegment(Mode.ALPHANUMERIC,text.length(),bb.getBytes(),bb.bitLength());}  }
class C{  @DataProvider(name="testModifyMustChange") public Object[][] createTestModifyMustChange(){  return new Object[][]{{"uid=test.admin,o=test","uid=test.admin,o=test",false},{"uid=test.admin,o=test","uid=test.user,o=test",false},{"uid=test.admin,o=test","o=test",false},{"uid=test.user,o=test","uid=test.admin,o=test",true},{"uid=test.user,o=test","uid=test.user,o=test",true},{"uid=test.user,o=test","o=test",true}};}  }
class C{  public void initObjectGraph(Object module){  mObjectGraph=module != null ? ObjectGraph.create(module) : null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  CharacterData entText;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entRef);  entText=(CharacterData)entRef.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      entText.setNodeValue("newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  protected List<RawModification> decodeRawMods(byte[] in) throws LDAPException, IOException {  List<RawModification> ldapmods=new ArrayList<>();  ASN1Reader asn1Reader=ASN1.getReader(in);  while (asn1Reader.hasNextElement()) {    ldapmods.add(LDAPModification.decode(asn1Reader));  }  return ldapmods;}  }
class C{  private void updateBaseDnsAndIndexes(Set<BaseDNDescriptor> baseDns,Set<IndexDescriptor> indexes,Set<VLVIndexDescriptor> vlvIndexes){  for (  BaseDNDescriptor baseDN : baseDns) {    baseDN.setBackend(this);  }  this.baseDns=new TreeSet<>(baseDns);  for (  IndexDescriptor index : indexes) {    index.setBackend(this);  }  this.indexes=new TreeSet<>(indexes);  for (  VLVIndexDescriptor index : vlvIndexes) {    index.setBackend(this);  }  this.vlvIndexes=new TreeSet<>(vlvIndexes);}  }
class C{  protected MouseInputListener createMouseInputListener(){  return new MouseInputHandler();}  }
class C{  public static <T>LeftValueExpression<T> valueOf(String expression,Class<T> expectedType) throws ExpressionException {  return new LeftValueExpression<>(expression,expectedType);}  }
class C{  private void valueToFilterString(StringBuilder buffer,ByteString value){  if (value == null) {    return;  }  buffer.ensureCapacity(buffer.length() + value.length());  byte b;  for (int i=0; i < value.length(); i++) {    b=value.byteAt(i);    if (((b & 0x7F) != b) || (b <= 0x1F) || (b == 0x28)|| (b == 0x29)|| (b == 0x2A)|| (b == 0x5C)|| (b == 0x7F)) {      buffer.append("\\");      buffer.append(byteToHex(b));    } else {      buffer.append((char)b);    }  }}  }
class C{  public PChargingVectorHeader createChargingVectorHeader(String icid) throws ParseException {  if (icid == null)   throw new NullPointerException("null icid arg!");  PChargingVector chargingVector=new PChargingVector();  chargingVector.setICID(icid);  return chargingVector;}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s3_linear_with_snapshots_light_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  synchronized String[][] internalZoneStrings(){  if (zoneStrings == null) {    zoneStrings=TimeZoneNames.getZoneStrings(locale);  }  return zoneStrings;}  }
class C{  public InvalidName(){  super();}  }
class C{  public ConfigAuditState(String id,String revision,JsonValue before,JsonValue after){  this.id=id;  this.revision=revision;  this.before=before != null ? before : json(null);  this.after=after != null ? after : json(null);}  }
class C{  protected int estimateElementsLen(final HeaderElement[] elems){  if ((elems == null) || (elems.length < 1))   return 0;  int result=(elems.length - 1) * 2;  for (int i=0; i < elems.length; i++) {    result+=estimateHeaderElementLen(elems[i]);  }  return result;}  }
class C{  public boolean is_equal(int p_1,int p_2){  if (p_1 == p_2) {    return true;  }  if (p_1 < 0 || p_2 < 0 || p_1 >= class_count || p_2 >= class_count) {    return false;  }  ClearanceMatrixRow row_1=clearance_rows[p_1];  ClearanceMatrixRow row_2=clearance_rows[p_2];  for (int i=1; i < class_count; ++i) {    if (!row_1.column[i].equals(row_2.column[i])) {      return false;    }  }  return true;}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  while (i < end) {    while (i < end && ignore(data.charAt(i))) {      i++;    }    b1=decodingTable[data.charAt(i++)];    while (i < end && ignore(data.charAt(i))) {      i++;    }    b2=decodingTable[data.charAt(i++)];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex string");    }    out.write((b1 << 4) | b2);    length++;  }  return length;}  }
class C{  private Node firstOfMode(boolean isData){  for (Node p=head; p != null; p=succ(p)) {    if (!p.isMatched())     return (p.isData == isData) ? p : null;  }  return null;}  }
class C{  public void addChargingCollectionFunctionAddress(String ccfAddress) throws ParseException {  if (ccfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");  this.parameters.set(ParameterNamesIms.CCF,ccfAddress);}  }
class C{  void update(Context context) throws SynchronizationException {  if (_id == null) {    throw new SynchronizationException("Attempt to update non-existent link");  }  JsonValue jv=toJsonValue();  try {    UpdateRequest request=newUpdateRequest(linkId(_id),jv).setRevision(_rev);    ResourceResponse resource=mapping.getConnectionFactory().getConnection().update(context,request);    _rev=resource.getRevision();  } catch (  ResourceException ose) {    LOGGER.warn("Failed to update link",ose);    throw new SynchronizationException(ose);  }}  }
class C{  public void removeAllRotationPolicies(){  for (  RotationPolicy<?> policy : rotationPolicies) {    if (policy instanceof SizeBasedRotationPolicy) {      sizeLimit=0;      SizeBasedRotationPolicy sizePolicy=(SizeBasedRotationPolicy)policy;      sizePolicy.currentConfig.removeSizeLimitChangeListener(this);    }  }  this.rotationPolicies.clear();}  }
class C{  public void insert(){  if (item_list == null)   return;  Map<LibPadstack,LibPadstack> padstack_pairs=new TreeMap<LibPadstack,LibPadstack>();  if (layer_changed) {    Iterator<BrdItem> it=item_list.iterator();    while (it.hasNext()) {      BrdItem curr_ob=it.next();      if (curr_ob instanceof BrdAbitVia) {        BrdAbitVia curr_via=(BrdAbitVia)curr_ob;        LibPadstack new_padstack=change_padstack_layers(curr_via.get_padstack(),current_layer,r_brd,padstack_pairs);        curr_via.set_padstack(new_padstack);      }    }  }  Map<Integer,Integer> cmp_no_pairs=new TreeMap<Integer,Integer>();  Collection<BrdComponent> copied_components=new LinkedList<BrdComponent>();  PlaVectorInt translate_vector=current_position.difference_by(start_position);  Iterator<BrdItem> it=item_list.iterator();  while (it.hasNext()) {    BrdItem curr_item=it.next();    int curr_cmp_no=curr_item.get_component_no();    if (curr_cmp_no > 0) {      int new_cmp_no;      Integer curr_key=new Integer(curr_cmp_no);      if (cmp_no_pairs.containsKey(curr_key)) {        Integer curr_value=cmp_no_pairs.get(curr_key);        new_cmp_no=curr_value.intValue();      } else {        BrdComponent old_component=r_brd.brd_components.get(curr_cmp_no);        if (old_component == null) {          System.out.println("CopyItemState: component not found");          continue;        }        PlaPointInt new_location=old_component.get_location().translate_by(translate_vector);        LibPackage new_package;        if (layer_changed) {          LibPackagePin[] new_pin_arr=new LibPackagePin[old_component.get_package().pin_count()];          for (int i=0; i < new_pin_arr.length; ++i) {            LibPackagePin old_pin=old_component.get_package().get_pin(i);            LibPadstack old_padstack=r_brd.brd_library.padstacks.get(old_pin.padstack_no);            if (old_padstack == null) {              System.out.println("CopyItemState.insert: package padstack not found");              return;            }            LibPadstack new_padstack=change_padstack_layers(old_padstack,current_layer,r_brd,padstack_pairs);            new_pin_arr[i]=new LibPackagePin(old_pin.name,new_padstack.pads_no,old_pin.relative_location,old_pin.rotation_in_degree);          }          new_package=r_brd.brd_library.packages.add(new_pin_arr);        } else {          new_package=old_component.get_package();        }        BrdComponent new_component=r_brd.brd_components.add(new_location,old_component.get_rotation_in_degree(),old_component.is_on_front(),new_package);        copied_components.add(new_component);        new_cmp_no=new_component.id_no;        cmp_no_pairs.put(new Integer(curr_cmp_no),new Integer(new_cmp_no));      }      curr_item.set_component_no(new_cmp_no);    }  }  boolean all_items_inserted=true;  boolean first_time=true;  for (  BrdItem curr_item : item_list) {    if (curr_item.r_board != null && curr_item.clearance_violation_count() == 0) {      if (first_time) {        r_brd.generate_snapshot();        first_time=false;      }      r_brd.insert_item(curr_item.copy(0));    } else {      all_items_inserted=false;    }  }  if (all_items_inserted) {    i_brd.screen_messages.set_status_message(resources.getString("all_items_inserted"));  } else {    i_brd.screen_messages.set_status_message(resources.getString("some_items_not_inserted_because_of_obstacles"));  }  actlog_add_corner(this.current_position.to_float());  start_position=current_position;  layer_changed=false;  i_brd.repaint();}  }
class C{  private static byte findLongestExpansion(String uriString,int pos){  byte expansion=-1;  int expansionLength=0;  for (int i=0; i < URL_CODES.size(); i++) {    int key=URL_CODES.keyAt(i);    String value=URL_CODES.valueAt(i);    if (value.length() > expansionLength && uriString.startsWith(value,pos)) {      expansion=(byte)key;      expansionLength=value.length();    }  }  return expansion;}  }
class C{  @Override public boolean isUserInRole(String role){  return this._getHttpServletRequest().isUserInRole(role);}  }
class C{  @Override public void onDrawFrame(GL10 gl10){  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  long currentTimeMillis=System.currentTimeMillis();  updateWithDelta(currentTimeMillis - lastTimeMillis);  lastTimeMillis=currentTimeMillis;}  }
class C{  static double computeFinalSum(double[] summands){  double tmp=summands[0] + summands[1];  double simpleSum=summands[summands.length - 1];  if (Double.isNaN(tmp) && Double.isInfinite(simpleSum))   return simpleSum; else   return tmp;}  }
class C{  @Override public String toString(){  return "Action: " + this.action;}  }
class C{  public boolean isAccessibleChildSelected(int i){  return (i == getSelectionModel().getSelectedIndex());}  }
class C{  public SizeSequence(int numEntries,int value){  this();  insertEntries(0,numEntries,value);}  }
class C{  public boolean export_to_dsn_file(OutputStream p_output_stream,String p_design_name,boolean p_compat_mode){  if (board_is_read_only || p_output_stream == null)   return false;  DsnWriteSesFile writer=new DsnWriteSesFile(this,p_output_stream);  return writer.write(p_design_name,p_compat_mode);}  }
class C{  public BasicTextPaneUI(){  super();}  }
class C{  public PlaPointFloat nearest_point_approx(PlaPointFloat p_from_point){  double min_distance=Double.MAX_VALUE;  PlaPointFloat nearest_point=null;  PlaPointFloat[] corners=corner_approx_arr();  for (int index=0; index < corners.length; ++index) {    double curr_distance=corners[index].distance(p_from_point);    if (curr_distance < min_distance) {      min_distance=curr_distance;      nearest_point=corners[index];    }  }  final double c_tolerance=1;  for (int index=1; index < plaline_len(-1); ++index) {    PlaPointFloat projection=p_from_point.projection_approx(plaline(index));    double curr_distance=projection.distance(p_from_point);    if (curr_distance < min_distance) {      double segment_length=corners[index].distance(corners[index - 1]);      if (projection.distance(corners[index]) + projection.distance(corners[index - 1]) < segment_length + c_tolerance) {        min_distance=curr_distance;        nearest_point=projection;      }    }  }  return nearest_point;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getCollectEntityDao() : null;}  }
class C{  public XObject elementAt(final int i){  return _stackFrames[i];}  }
class C{  public SessionException(String rbName,String messageKey,Object[] args){  super(rbName,messageKey,args);}  }
class C{  static public boolean areEqual(Object aThis,Object aThat){  return aThis == null ? aThat == null : aThis.equals(aThat);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  List serverNames=(List)rc.getOption(IArgument.SERVER_NAMES);  String[] params={siteName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_SITE_MEMBERS",params);  IOutput outputWriter=getOutputWriter();  try {    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.removeServersFromSite(adminSSOToken,siteName,serverNames);      outputWriter.printlnMessage(getResourceString("remove-site-members-succeeded"));    } else {      outputWriter.printlnMessage(getResourceString("remove-site-members-site-not-exist"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_SITE_MEMBERS",params);  } catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("RemoveSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={siteName,e.getMessage()};    debugError("RemoveSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("RemoveSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean isExpired(){  return expired;}  }
class C{  public StaticAttributes(){  propertyValues=new HashSet<String>();}  }
class C{  private void join_connected_sets(IteraNetItem[] p_net_items,Collection<BrdItem> p_from_connected_set,Collection<BrdItem> p_to_connected_set){  for (int i=0; i < p_net_items.length; ++i) {    IteraNetItem curr_item=p_net_items[i];    if (curr_item.connected_set == p_from_connected_set) {      p_to_connected_set.add(curr_item.item);      curr_item.connected_set=p_to_connected_set;    }  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.RedirectRequestElement createRedirectRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.RedirectRequestElementImpl();}  }
class C{  public Bounds(){  super();}  }
class C{  public void test_SelectPrepared() throws SQLException {  String sql="SELECT finteger, ftext, fcharacter, fdecimal, fnumeric," + " fsmallint, ffloat, freal, fdouble, fdate, ftime" + " FROM " + DatabaseCreator.TEST_TABLE2 + " WHERE finteger = ? AND ftext = ? AND fcharacter = ? AND"+ " fdecimal = ? AND fnumeric = ? AND fsmallint = ? AND"+ " freal = ? AND fdouble = ? AND fdate = ?"+ " AND ftime = ?";  PreparedStatement prepStatement=conn.prepareStatement(sql);  CharArrayReader reader=new CharArrayReader(new String(DatabaseCreator.defaultCharacter + "1").toCharArray());  prepStatement.setInt(1,1);  prepStatement.setString(2,DatabaseCreator.defaultString + "1");  prepStatement.setInt(6,1);  prepStatement.setDouble(7,1.1);  prepStatement.setDouble(8,1.1);  prepStatement.setDate(9,date);  prepStatement.setTime(10,time);  int counter=0;  ResultSet result=prepStatement.executeQuery();  while (result.next()) {    int id=result.getInt("finteger");    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultString + id,result.getString("ftext"));    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultCharacter + id,result.getString("fcharacter"));    assertEquals("expected value doesn't equal actual",id,result.getInt("fsmallint"));    assertEquals("expected value doesn't equal actual",(float)(id + 0.1),result.getFloat("ffloat"));    assertEquals("expected value doesn't equal actual",(double)(id + 0.1),result.getDouble("freal"));    assertEquals("expected value doesn't equal actual",(double)(id + 0.1),result.getDouble("fdouble"));    assertEquals("expected value doesn't equal actual",date.toString(),result.getDate("fdate").toString());    assertEquals("expected value doesn't equal actual",time.toString(),result.getTime("ftime").toString());    counter++;  }  prepStatement.close();  result.close();}  }
class C{  private void unRegisterToken(InstanceID instanceID,String senderId) throws IOException {  instanceID.deleteToken(senderId,GoogleCloudMessaging.INSTANCE_ID_SCOPE);  GcmHelper.getInstance().onTokenDeleted(getApplicationContext());}  }
class C{  @Override public void close() throws IOException {  try {    out.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public ListItemRenderer(ListItem modelElement){  super(modelElement);}  }
class C{  private SASLMechanismHandler loadHandler(String className,SASLMechanismHandlerCfg configuration,boolean initialize) throws InitializationException {  try {    SASLMechanismHandlerCfgDefn definition=SASLMechanismHandlerCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends SASLMechanismHandler> handlerClass=propertyDefinition.loadClass(className,SASLMechanismHandler.class);    SASLMechanismHandler handler=handlerClass.newInstance();    if (initialize) {      handler.initializeSASLMechanismHandler(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!handler.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_SASL_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return handler;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_SASL_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  private static String makeKeyFromLDAPUrl(LDAPURL url){  String protocol=isSecureLDAPUrl(url) ? "LDAPS" : "LDAP";  return protocol + ":" + url.getHost()+ ":"+ url.getPort();}  }
class C{  public void initializeAuthenticationPolicies() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addPasswordPolicyAddListener(this);  rootConfiguration.addPasswordPolicyDeleteListener(this);  String[] passwordPolicyNames=rootConfiguration.listPasswordPolicies();  if (passwordPolicyNames.length == 0) {    LocalizableMessage message=ERR_CONFIG_PWPOLICY_NO_POLICIES.get();    throw new ConfigException(message);  }  if (DirectoryServer.getDefaultPasswordPolicyDN() == null) {    LocalizableMessage message=ERR_CONFIG_PWPOLICY_NO_DEFAULT_POLICY.get();    throw new ConfigException(message);  }  for (  String passwordPolicyName : passwordPolicyNames) {    AuthenticationPolicyCfg passwordPolicyConfiguration=rootConfiguration.getPasswordPolicy(passwordPolicyName);    createAuthenticationPolicy(passwordPolicyConfiguration);  }  if (null == DirectoryServer.getDefaultPasswordPolicy()) {    DN defaultPolicyDN=DirectoryServer.getDefaultPasswordPolicyDN();    throw new ConfigException(ERR_CONFIG_PWPOLICY_MISSING_DEFAULT_POLICY.get(defaultPolicyDN));  }  List<SubEntry> pwpSubEntries=DirectoryServer.getSubentryManager().getSubentries();  if (pwpSubEntries != null && !pwpSubEntries.isEmpty()) {    for (    SubEntry subentry : pwpSubEntries) {      if (subentry.getEntry().isPasswordPolicySubentry()) {        try {          PasswordPolicy policy=new SubentryPasswordPolicy(subentry);          DirectoryServer.registerAuthenticationPolicy(subentry.getDN(),policy);        } catch (        Exception e) {          logger.error(ERR_CONFIG_PWPOLICY_INVALID_POLICY_CONFIG,subentry.getDN(),stackTraceToSingleLineString(e));        }      }    }  }  DirectoryServer.getSubentryManager().registerChangeListener(this);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (obj instanceof ActivationGroupID) {    ActivationGroupID id=(ActivationGroupID)obj;    return (uid.equals(id.uid) && system.equals(id.system));  } else {    return false;  }}  }
class C{  User(Principal principal,Guid guid) throws UMSException {  super(principal,guid);  verifyClass();}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("VLVRequestControl(beforeCount=");  buffer.append(beforeCount);  buffer.append(", afterCount=");  buffer.append(afterCount);  if (targetType == TYPE_TARGET_BYOFFSET) {    buffer.append(", offset=");    buffer.append(offset);    buffer.append(", contentCount=");    buffer.append(contentCount);  } else {    buffer.append(", greaterThanOrEqual=");    buffer.append(greaterThanOrEqual);  }  if (contextID != null) {    buffer.append(", contextID=");    buffer.append(contextID);  }  buffer.append(")");}  }
class C{  public boolean isStartNow(){  return startNow;}  }
class C{  public void modifyEntity(String realmName,String universalId,Map values) throws AMConsoleException {  if ((values != null) && !values.isEmpty()) {    String attrNames=AMAdminUtils.getString(values.keySet(),",",false);    try {      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);      validateAttributes(amid,values);      String[] param={universalId,attrNames};      logEvent("ATTEMPT_MODIFY_IDENTITY_ATTRIBUTE_VALUE",param);      String entityName=amid.getName();      String idType=amid.getType().getName();      if (amid.getType().equals(IdType.AGENT) && values.containsKey(AGENT_ATTRIBUTE_LIST) && (amid.getAttribute(AGENT_ATTRIBUTE_LIST) != null)) {        Set newDeviceKeyValue=(Set)values.get(AGENT_ATTRIBUTE_LIST);        Set origDeviceKeyValue=amid.getAttribute(AGENT_ATTRIBUTE_LIST);        for (Iterator items=origDeviceKeyValue.iterator(); items.hasNext(); ) {          String olValue=(String)items.next();          String[] olValues=olValue.split("=");          boolean found=false;          for (Iterator nt=newDeviceKeyValue.iterator(); nt.hasNext(); ) {            String ntValue=(String)nt.next();            String[] ntValues=ntValue.split("=");            if (ntValues[0].equalsIgnoreCase(olValues[0])) {              if ((ntValues.length > 1) && (ntValues[1].trim().length() == 0)) {                nt.remove();              }              found=true;              break;            }          }          if (!found) {            newDeviceKeyValue.add(olValue);          }        }      }      beforeModify(idType,entityName,values);      amid.setAttributes(values);      amid.store();      logEvent("SUCCEED_MODIFY_IDENTITY_ATTRIBUTE_VALUE",param);    } catch (    IdRepoException e) {      String[] paramsEx={universalId,attrNames,getErrorString(e)};      logEvent("IDM_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);      if (e.getErrorCode().equals(IdRepoErrorCode.LDAP_EXCEPTION)) {        throw new AMConsoleException(e.getConstraintViolationDetails());      }      throw new AMConsoleException(getErrorString(e));    }catch (    SSOException e) {      String[] paramsEx={universalId,attrNames,getErrorString(e)};      logEvent("SSO_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);      throw new AMConsoleException(getErrorString(e));    }  }}  }
class C{  public JKValidationException(){  super();}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  String tempPrefix="";  if (includeNS) {    if (prefix == null) {      prefix=DSTConstants.DEFAULT_NS_PREFIX;    }    tempPrefix=prefix + ":";  }  if (declareNS) {    if (nameSpaceURI == null) {      DSTUtils.debug.error("DSTData.toString: Name Space is " + "not defined");      return "";    }  }  StringBuffer sb=new StringBuffer(300);  sb.append("<").append(tempPrefix).append("Data");  if (id != null && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  if (itemIDRef != null && itemIDRef.length() != 0) {    sb.append(" itemIDRef=\"").append(itemIDRef).append("\"");  }  if (declareNS) {    sb.append(" xmlns:").append(prefix).append("=\"").append(nameSpaceURI).append("\"").append(" xmlns=\"").append(nameSpaceURI).append("\"");  }  sb.append(">");  Iterator iter=dstData.iterator();  while (iter.hasNext()) {    Node node=(Node)iter.next();    sb.append(XMLUtils.print(node));  }  sb.append("</").append(tempPrefix).append("Data").append(">");  return sb.toString();}  }
class C{  private Set intersectIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  if (ipWithSubmask1.length != ipWithSubmask2.length) {    return Collections.EMPTY_SET;  }  byte[][] temp=extractIPsAndSubnetMasks(ipWithSubmask1,ipWithSubmask2);  byte ip1[]=temp[0];  byte subnetmask1[]=temp[1];  byte ip2[]=temp[2];  byte subnetmask2[]=temp[3];  byte minMax[][]=minMaxIPs(ip1,subnetmask1,ip2,subnetmask2);  byte[] min;  byte[] max;  max=min(minMax[1],minMax[3]);  min=max(minMax[0],minMax[2]);  if (compareTo(min,max) == 1) {    return Collections.EMPTY_SET;  }  byte[] ip=or(minMax[0],minMax[2]);  byte[] subnetmask=or(subnetmask1,subnetmask2);  return Collections.singleton(ipWithSubnetMask(ip,subnetmask));}  }
class C{  private void parseParam(Node parent) throws JasperException {  if (!reader.matches("<jsp:param")) {    err.jspError(reader.mark(),"jsp.error.paramexpected");  }  Attributes attrs=parseAttributes();  reader.skipSpaces();  Node paramActionNode=new Node.ParamAction(attrs,start,parent);  parseEmptyBody(paramActionNode,"jsp:param");  reader.skipSpaces();}  }
class C{  public void dragMouseMoved(DragSourceDragEvent dsde){  getDragSource().processDragMouseMoved(dsde);}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public Finished(HandshakeIODataStream in,int length) throws IOException {  if (length == 12 || length == 36) {    data=in.read(length);    this.length=data.length;  } else {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect Finished");  }}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private boolean accept(char acceptableSymbol){  return data[index] == acceptableSymbol;}  }
class C{  @Override public void run(){  InternalClientConnection conn=getRootConnection();  for (searchCounter=0; searchCounter < baseDNs.length; searchCounter++) {    DN baseDN=baseDNs[searchCounter];    SearchFilter filter=searchFilters[searchCounter];    final SearchRequest request=newSearchRequest(baseDN,SearchScope.WHOLE_SUBTREE,filter).addAttribute("*","ismemberof");    InternalSearchOperation searchOperation=conn.processSearch(request,this);    ResultCode resultCode=searchOperation.getResultCode();    if (resultCode != ResultCode.SUCCESS) {      if (resultCode == ResultCode.NO_SUCH_OBJECT) {        logger.warn(WARN_DYNAMICGROUP_NONEXISTENT_BASE_DN,baseDN,memberList.getDynamicGroupDN());        continue;      } else {        LocalizableMessage message=ERR_DYNAMICGROUP_INTERNAL_SEARCH_FAILED.get(baseDN,filter,memberList.getDynamicGroupDN(),resultCode,searchOperation.getErrorMessage());        if (!memberList.addResult(new MembershipException(message,true))) {          memberList.setSearchesCompleted();          return;        }      }    }  }  memberList.setSearchesCompleted();}  }
class C{  public static MappedMember findField(MappedClass owner,String name,String desc){  for (  MappedMember mm : owner.getFields()) {    if (matches(mm,name,desc,true)) {      return mm;    }  }  return null;}  }
class C{  public Set createEntity(String ssotoken,String entityName,String entityType,String entityLocation,Map attributes) throws EntityException, SSOException {  Set entitySet=new HashSet();  initializeObject(ssotoken,entityLocation);  try {    int type=0;    type=getIntTypeFromStr(entityType);    Map input=new HashMap(2);    input.put(entityName,attributes);    if (entity != null) {      Set entityObjs=entity.createEntities(type,input);      Iterator it=entityObjs.iterator();      while (it.hasNext()) {        entitySet.add(((AMEntity)it.next()).getDN());      }    }  } catch (  AMException amex) {    EntityUtils.debug.error("EntityObjectImpl.createEntity() : " + "Create Entity Failed. " + amex);    throw EntityUtils.convertException(amex);  }  return entitySet;}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  public OutputStreamWriter(OutputStream out,CharsetEncoder enc){  super(out);  if (enc == null)   throw new NullPointerException("charset encoder");  se=StreamEncoder.forOutputStreamWriter(out,this,enc);}  }
class C{  private void parse(String pattern) throws AciException {  pattern=pattern.trim();  if (pattern.startsWith(parentPat)) {    numLevels=0;    levels[0]=0;    String p=pattern.substring(parentPat.length());    String[] toks=p.split("\\.");    if (toks.length != 2) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_USERATTR_INHERITANCE_PATTERN.get(pattern);      throw new AciException(message);    }    Pattern pattern1=Pattern.compile(ATTR_NAME);    Matcher matcher=pattern1.matcher(toks[1]);    if (!matcher.find() || matcher.groupCount() != 1) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_ATTRIBUTE_TYPE_NAME.get(toks[1]);      throw new AciException(message);    }    attrTypeStr=toks[1];    StringTokenizer tok=new StringTokenizer(toks[0],"],",false);    while (tok.hasMoreTokens()) {      String v=tok.nextToken();      try {        if (numLevels < MAX_LEVELS) {          levels[numLevels++]=Integer.decode(v);        } else {          LocalizableMessage message=WARN_ACI_SYNTAX_MAX_USERATTR_INHERITANCE_LEVEL_EXCEEDED.get(pattern,MAX_LEVELS);          throw new AciException(message);        }      } catch (      NumberFormatException ex) {        LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_INHERITANCE_VALUE.get(pattern);        throw new AciException(message);      }    }  } else {    attrTypeStr=pattern;    if (pattern.startsWith(NULL_LDAP_URL)) {      try {        LDAPURL url=LDAPURL.decode(pattern,true);        LinkedHashSet<String> attrs=url.getAttributes();        if (attrs.size() != 1) {          LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_USERATTR_ATTR_URL.get(pattern);          throw new AciException(message);        }        baseDN=url.getBaseDN();        if (baseDN.isRootDN()) {          LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_USERATTR_BASEDN_URL.get(pattern);          throw new AciException(message);        }        attrTypeStr=attrs.iterator().next();      } catch (      LocalizedIllegalArgumentException|DirectoryException ex) {        throw new AciException(WARN_ACI_SYNTAX_INVALID_USERATTR_URL.get(ex.getMessageObject()));      }    }    numLevels=1;    levels[0]=0;  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AudienceElement createAudienceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceElementImpl();}  }
class C{  private void startRSHeartBeatMonitoring(ConnectedRS rs){  final long heartbeatInterval=config.getHeartbeatInterval();  if (heartbeatInterval > 0) {    heartbeatMonitor=new HeartbeatMonitor(getServerId(),rs.getServerId(),getBaseDN().toString(),rs.session,heartbeatInterval);    heartbeatMonitor.start();  }}  }
class C{  public static final int as_int(double p_value){  if (p_value > 0)   return 1; else   if (p_value < 0)   return -1; else   return 0;}  }
class C{  public SearchResult(String name,Object obj,Attributes attrs){  super(name,obj);  this.attrs=attrs;}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  if ((encryptedResourceID == null && resourceID == null) || dstQueryItems.isEmpty()) {    DSTUtils.debug.error("DSTQuery.toString: ResourceID or QueryItems" + " are null.");    return "";  }  String tempPrefix="";  if (includeNS) {    if (prefix == null) {      prefix=DSTConstants.DEFAULT_NS_PREFIX;    }    tempPrefix=prefix + ":";  }  if (declareNS && nameSpaceURI == null) {    DSTUtils.debug.error("DSTQuery.toString: Name Space is " + "not defined");    return "";  }  StringBuffer sb=new StringBuffer(3000);  sb.append("<").append(tempPrefix).append("Query");  if (id != null && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  if (itemID != null && itemID.length() != 0) {    sb.append(" itemID=\"").append(itemID).append("\"");  }  if (declareNS) {    sb.append(" xmlns:").append(prefix).append("=\"").append(nameSpaceURI).append("\"");  }  sb.append(">");  if (encryptedResourceID == null) {    sb.append("<").append(tempPrefix).append("ResourceID").append(">").append(resourceID).append("</").append(tempPrefix).append("ResourceID").append(">");  } else {    sb.append(encryptedResourceID.toString(nameSpaceURI));  }  Iterator iter=dstQueryItems.iterator();  while (iter.hasNext()) {    DSTQueryItem item=(DSTQueryItem)iter.next();    sb.append(item.toString(true,false));  }  sb.append("</").append(tempPrefix).append("Query").append(">");  if (DSTUtils.debug.messageEnabled()) {    DSTUtils.debug.message("DSTQuery.toString: Query: " + sb.toString());  }  return sb.toString();}  }
class C{  @Override public Class<?> loadClass(String name) throws ClassNotFoundException {  return (loadClass(name,false));}  }
class C{  public PlaLineInt plaline_first(){  return plaline(0);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  String name=evt.getPropertyName();  if (name == "width" || name == "preferredWidth") {    invalidateWidthCache();    fireColumnMarginChanged();  }}  }
class C{  synchronized public void releaseXMLReader(XMLReader reader){  if (m_readerManager != null) {    m_readerManager.releaseXMLReader(reader);  }}  }
class C{  private static Map<ObjectClass,String> decodeObjectClasses(byte ver,ByteSequenceReader entryBuffer,EntryEncodeConfig config) throws DirectoryException {  if (config.compressObjectClassSets()) {    return config.getCompressedSchema().decodeObjectClasses(entryBuffer);  }  Map<ObjectClass,String> objectClasses;{    if (ver < 0x03) {      int ocLength=entryBuffer.readBERLength();      objectClasses=new LinkedHashMap<>();      int startPos=entryBuffer.position();      for (int i=0; i < ocLength; i++) {        if (entryBuffer.readByte() == 0x00) {          int endPos=entryBuffer.position() - 1;          addObjectClass(objectClasses,entryBuffer,startPos,endPos);          entryBuffer.skip(1);          startPos=entryBuffer.position();        }      }      int endPos=entryBuffer.position();      addObjectClass(objectClasses,entryBuffer,startPos,endPos);    } else {      int numOC=entryBuffer.readBERLength();      objectClasses=new LinkedHashMap<>(numOC);      for (int i=0; i < numOC; i++) {        int startPos=entryBuffer.position();        while (entryBuffer.readByte() != 0x00) {        }        int endPos=entryBuffer.position() - 1;        addObjectClass(objectClasses,entryBuffer,startPos,endPos);        entryBuffer.skip(1);      }    }  }  return objectClasses;}  }
class C{  public static List<FilterList> downloadFilterVersions(Context context,List<FilterList> filters) throws IOException, JSONException {  StringBuilder sb=new StringBuilder();  for (  FilterList filter : filters) {    sb.append(filter.getFilterId());    sb.append(",");  }  if (sb.length() > 0) {    sb.deleteCharAt(sb.length() - 1);  } else {    LOG.info("Empty filters list, exiting");    return null;  }  String downloadUrl=RawResources.getCheckFilterVersionsUrl(context).replace("{0}",UrlUtils.urlEncode(sb.toString()));  String response=downloadString(downloadUrl);  if (response == null) {    return null;  }  LOG.debug("Filters update check response: {}",response);  return parseFiltersVersionData(response);}  }
class C{  public void testCertPathValidatorException15(){  CertPathValidatorException tE=new CertPathValidatorException();  assertNull("getCertPath() must return null.",tE.getCertPath());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i]);    assertNull("getCertPath() must return null ",tE.getCertPath());  }  Throwable cause=null;  tE=new CertPathValidatorException(cause);  assertNull("getCertPath() must return null.",tE.getCertPath());  tE=new CertPathValidatorException(tCause);  assertNull("getCertPath() must return null.",tE.getCertPath());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i],tCause);    assertNull("getCertPath() must return null",tE.getCertPath());  }  tE=new CertPathValidatorException(null,null,null,-1);  assertNull("getCertPath() must return null",tE.getCertPath());  for (int i=0; i < msgs.length; i++) {    try {      tE=new CertPathValidatorException(msgs[i],tCause,null,-1);      assertNull("getCertPath() must return null",tE.getCertPath());    } catch (    IndexOutOfBoundsException e) {      fail("Unexpected exception: " + e.getMessage());    }  }  myCertPath mcp=new myCertPath("X.509","");  CertPath cp=mcp.get("X.509");  for (int i=0; i < msgs.length; i++) {    try {      tE=new CertPathValidatorException(msgs[i],tCause,cp,-1);      assertNotNull("getCertPath() must not return null",tE.getCertPath());      assertEquals("getCertPath() must return ".concat(cp.toString()),tE.getCertPath(),cp);    } catch (    IndexOutOfBoundsException e) {      fail("Unexpected IndexOutOfBoundsException was thrown. " + e.toString());    }  }}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  public int hashCode(){  int hash=0;  for (int i=0; i < entries.size(); i++) {    hash+=entries.get(i).hashCode();  }  return hash;}  }
class C{  public JSONStringer endObject() throws JSONException {  return close(Scope.EMPTY_OBJECT,Scope.NONEMPTY_OBJECT,"}");}  }
class C{  Values(Values fromParent){  this.table=fromParent.table.clone();  this.mask=fromParent.mask;  this.size=fromParent.size;  this.tombstones=fromParent.tombstones;  this.maximumLoad=fromParent.maximumLoad;  this.clean=fromParent.clean;  inheritValues(fromParent);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureMethodElement createSignatureMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureMethodElementImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnContextType createAuthnContextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnContextTypeImpl();}  }
class C{  protected OpenDsException(){  this(null,null);}  }
class C{  public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String encodePath(String path){  int maxBytesPerChar=10;  StringBuffer rewrittenPath=new StringBuffer(path.length());  ByteArrayOutputStream buf=new ByteArrayOutputStream(maxBytesPerChar);  OutputStreamWriter writer;  try {    writer=new OutputStreamWriter(buf,"UTF8");  } catch (  Exception e) {    e.printStackTrace();    writer=new OutputStreamWriter(buf);  }  for (int i=0; i < path.length(); i++) {    int c=path.charAt(i);    if (safeCharacters.get(c)) {      rewrittenPath.append((char)c);    } else {      try {        writer.write(c);        writer.flush();      } catch (      IOException e) {        buf.reset();        continue;      }      byte[] ba=buf.toByteArray();      for (int j=0; j < ba.length; j++) {        byte toEncode=ba[j];        rewrittenPath.append('%');        int low=(toEncode & 0x0f);        int high=((toEncode & 0xf0) >> 4);        rewrittenPath.append(hexadecimal[high]);        rewrittenPath.append(hexadecimal[low]);      }      buf.reset();    }  }  return rewrittenPath.toString();}  }
class C{  public static boolean isStatic(int mod){  return (mod & ACC_STATIC) != 0;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  static StringBuffer convertToDN(String orgName){  StringBuffer buf=new StringBuffer();  String placeHold=(realmEnabled) ? SMSEntry.ORGANIZATION_RDN : OrgConfigViaAMSDK.getNamingAttrForOrg();  ArrayList arr=new ArrayList();  StringTokenizer strtok=new StringTokenizer(orgName,"/");  while (strtok.hasMoreElements()) {    String token=strtok.nextToken().trim();    if (token != null && token.length() != 0) {      arr.add(token);    }  }  int size=arr.size();  for (int i=0; i < size; i++) {    String theOrg=(String)arr.get(size - i - 1);    if (theOrg.toLowerCase().startsWith(SMSEntry.SUN_INTERNAL_REALM_NAME)) {      placeHold=SMSEntry.ORGANIZATION_RDN;    }    buf.append(placeHold);    buf.append('=').append(theOrg);    if (i != size - 1) {      buf.append(',');    }  }  if (debug.messageEnabled()) {    debug.message("DNMapper.convertToDN():finalorgdn " + buf.toString());  }  if ((buf.toString()).indexOf("&#47;") >= 0) {    String realmName=SMSSchema.unescapeName(buf.toString());    if (debug.messageEnabled()) {      debug.message("DNMapper.convertToDN():realmName " + realmName);    }    StringBuffer newBuf=new StringBuffer();    newBuf.append(realmName);    buf=newBuf;    if (debug.messageEnabled()) {      debug.message("DNMapper.convertToDN():newRealmName " + buf.toString());    }  }  return (buf);}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension cpd, mbd, tpd;  int cpWidth=Integer.MAX_VALUE;  int cpHeight=Integer.MAX_VALUE;  int mbWidth=Integer.MAX_VALUE;  int mbHeight=Integer.MAX_VALUE;  int tpWidth=Integer.MAX_VALUE;  int tpHeight=Integer.MAX_VALUE;  Insets i=target.getInsets();  JRootPane root=(JRootPane)target;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMaximumSize();    if (cpd != null) {      cpWidth=cpd.width;      cpHeight=cpd.height;    }  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getMaximumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMaximumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  int maxHeight=Math.max(Math.max(cpHeight,mbHeight),tpHeight);  if (maxHeight != Integer.MAX_VALUE) {    maxHeight=cpHeight + mbHeight + tpHeight+ i.top+ i.bottom;  }  int maxWidth=Math.max(Math.max(cpWidth,mbWidth),tpWidth);  if (maxWidth != Integer.MAX_VALUE) {    maxWidth+=i.left + i.right;  }  return new Dimension(maxWidth,maxHeight);}  }
class C{  private static int intToSignedBits(int i,int size){  if (i < 0) {    i=(1 << size - 1) + (i & ((1 << size - 1) - 1));  }  return i;}  }
class C{  public Set<Argument> createGlobalArguments() throws ArgumentException {  argList=new LinkedHashSet<>();  useSSLArg=useSSLArgument();  if (!alwaysUseSSL) {    argList.add(useSSLArg);  } else {    useSSLArg.setPresent(true);  }  useStartTLSArg=startTLSArgument();  if (!alwaysUseSSL) {    argList.add(useStartTLSArg);  }  hostNameArg=hostNameArgument(getDefaultHostName());  argList.add(hostNameArg);  portArg=createPortArgument(AdministrationConnector.DEFAULT_ADMINISTRATION_CONNECTOR_PORT);  argList.add(portArg);  bindDnArg=bindDNArgument(CliConstants.DEFAULT_ROOT_USER_DN);  argList.add(bindDnArg);  adminUidArg=adminUidHiddenArgument(INFO_DESCRIPTION_ADMIN_UID.get());  bindPasswordArg=bindPasswordArgument();  argList.add(bindPasswordArg);  bindPasswordFileArg=bindPasswordFileArgument();  argList.add(bindPasswordFileArg);  saslOptionArg=saslArgument();  argList.add(saslOptionArg);  trustAllArg=trustAllArgument();  argList.add(trustAllArg);  trustStorePathArg=trustStorePathArgument();  argList.add(trustStorePathArg);  trustStorePasswordArg=trustStorePasswordArgument();  argList.add(trustStorePasswordArg);  trustStorePasswordFileArg=trustStorePasswordFileArgument();  argList.add(trustStorePasswordFileArg);  keyStorePathArg=keyStorePathArgument();  argList.add(keyStorePathArg);  keyStorePasswordArg=keyStorePasswordArgument();  argList.add(keyStorePasswordArg);  keyStorePasswordFileArg=keyStorePasswordFileArgument();  argList.add(keyStorePasswordFileArg);  certNicknameArg=certNickNameArgument();  argList.add(certNicknameArg);  connectTimeoutArg=connectTimeOutArgument();  argList.add(connectTimeoutArg);  return argList;}  }
class C{  @Override public int countByUuid(String uuid){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID;  Object[] finderArgs=new Object[]{uuid};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_UUID_2);    }    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  String filter=(String)getDisplayFieldValue(AuthToServiceHelper.ATTR_FILTER);  if ((filter == null) || (filter.trim().length() == 0)) {    setDisplayFieldValue(AuthToServiceHelper.ATTR_FILTER,"*");  }  Set realmNames=getRealmNames(filter);  if (realmNames != null) {    realmNames.add("");  }  boolean nolongExistRealm=false;  String realmValue=(String)propertySheetModel.getValue(AuthToServiceHelper.ATTR_REALM);  if (!bSearchForRealm && !bRealmSelect) {    if (realmValue == null) {      realmValue="";    }    if (realmNames == null) {      realmNames=new HashSet(2);    }    if (!realmNames.contains(realmValue)) {      realmNames.add(realmValue);      nolongExistRealm=true;      if (!isInlineAlertMessageSet()) {        String msg=getModel().getLocalizedString("policy.condition.authlevel.no.longer.exist.realm");        String[] param={realmValue};        setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",MessageFormat.format(msg,(Object[])param));      }    }  }  if ((realmNames != null) && !realmNames.isEmpty()) {    CCSelect sl=(CCSelect)getChild(AuthToServiceHelper.ATTR_REALM);    sl.setOptions(createOptionList(getLabelValueMap(realmNames)));    String realm=(bSearchForRealm) ? (String)realmNames.iterator().next() : (String)sl.getValue();    if (realm == null) {      realm=realmValue;      sl.setValue(realm);    }    if (!nolongExistRealm) {      setServiceNames(realm);    } else {      CCSelect slService=(CCSelect)getChild(AuthToServiceHelper.ATTR_SERVICE);      Set svcName=new HashSet(2);      svcName.add(propertySheetModel.getValue(AuthToServiceHelper.ATTR_SERVICE));      slService.setOptions(createOptionList(svcName));    }  } else {    CCSelect slService=(CCSelect)getChild(AuthToServiceHelper.ATTR_SERVICE);    slService.setOptions(new OptionList());  }}  }
class C{  public PdfCanvas closeTag(){  return endMarkedContent();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateattribute.class,args);}  }
class C{  @Override public void identityRenamed(String universalId){}  }
class C{  public String renameEntry(SSOToken token,int objectType,String entryDN,String newName,boolean deleteOldName) throws AMException {  String newDN=super.renameEntry(token,objectType,entryDN,newName,deleteOldName);  String oldDN=LDAPUtils.formatToRFC(entryDN);  CacheBlock cb=(CacheBlock)sdkCache.remove(oldDN);  newDN=LDAPUtils.formatToRFC(newDN);  sdkCache.put(newDN,cb);  return newDN;}  }
class C{  @After public void afterTest(){}  }
class C{  public SocketFactory socketFactory(){  return socketFactory;}  }
class C{  @Override public void writeValue(ASN1Writer writer) throws IOException {  writer.writeOctetString(transactionId);}  }
class C{  public DSTQueryResponse query(DSTQuery query) throws DSTException, InteractionRedirectException {  DSTUtils.debug.message("DSTClient:query:Init");  if (query == null) {    DSTUtils.debug.message("DSTClient:query:null value");    throw new DSTException(DSTUtils.bundle.getString("nullInputParams"));  }  List request=new ArrayList();  request.add(DSTUtils.parseXML(query.toString(true,true)));  List response=sendMessage(request);  Element queryResponse=(Element)response.get(0);  return new DSTQueryResponse(queryResponse);}  }
class C{  public CODESET_INCOMPATIBLE(String detailMessage){  this(detailMessage,0,CompletionStatus.COMPLETED_NO);}  }
class C{  @Override public Map<String,List<DefaultPooledObjectInfo>> listAllObjects(){  final Map<String,List<DefaultPooledObjectInfo>> result=new HashMap<>();  for (  Map.Entry<K,ObjectDeque<T>> entry : poolMap.entrySet()) {    final K k=entry.getKey();    final ObjectDeque<T> deque=entry.getValue();    if (deque != null) {      final List<DefaultPooledObjectInfo> list=new ArrayList<>();      result.put(k.toString(),list);      for (      final PooledObject<T> p : deque.getAllObjects().values()) {        list.add(new DefaultPooledObjectInfo(p));      }    }  }  return result;}  }
class C{  @Override public boolean equals(final Object other){  if (other instanceof ImmutableList<?>) {    return equals(this,(ImmutableList<?>)other);  }  if (other instanceof java.util.List<?>) {    ImmutableList<A> t=this;    final Iterator<?> it=((java.util.List<?>)other).iterator();    while (t.tail != null && it.hasNext()) {      final Object o=it.next();      if (!(t.head == null ? o == null : t.head.equals(o))) {        return false;      }      t=t.tail;    }    return (t.isEmpty() && !it.hasNext());  }  return false;}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.attributeDecl(eName,aName,type,valueDefault,value);}  }
class C{  private SAXUnmarshallerHandler createUnmarshallerHandler(Locator locator){  SAXUnmarshallerHandler unmarshaller=new SAXUnmarshallerHandlerImpl(this,grammarInfo);  try {    if (isValidating()) {      unmarshaller=ValidatingUnmarshaller.create(context.getGrammar(),unmarshaller,locator);    }  } catch (  JAXBException e) {    e.printStackTrace();  }  return unmarshaller;}  }
class C{  public SAML2ConfigBuilder encryptionKeyAlias(String encryptionKeyAlias){  this.encryptionKeyAlias=encryptionKeyAlias;  return this;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public TelephoneNumber(){  parameters=new NameValueList();}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(SAMLConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefixLIB="";  String uriLIB="";  if (includeNS) {    prefixLIB=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uriLIB=IFSConstants.LIB_NAMESPACE_STRING;    }  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSNameRegistrationResponse.toXMLString: " + "providerId is null in the response with responseId:" + responseID);    throw new FSMsgException("nullProviderID",null);  }  if ((responseID != null) && (inResponseTo != null)) {    xml.append("<").append(prefixLIB).append("RegisterNameIdentifierResponse").append(uriLIB);    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && !(id.length() == 0)) {      xml.append(" id=\"").append(id).append("\" ");    }    xml.append(" ResponseID=\"").append(responseID).append("\" ").append(" InResponseTo=\"").append(inResponseTo).append("\" ").append(" MajorVersion=\"").append(majorVersion).append("\" ").append(" MinorVersion=\"").append(minorVersion).append("\" ").append(" IssueInstant=\"").append(instantString).append("\" ").append(">");  }  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  if (providerId != null) {    xml.append("<").append(prefixLIB).append("ProviderID").append(">").append(providerId).append("</").append(prefixLIB).append("ProviderID").append(">");  }  if (status != null) {    xml.append(status.toString(includeNS,true));  }  if (relayState != null) {    xml.append("<").append(prefixLIB).append("RelayState").append(">").append(relayState).append("</").append(prefixLIB).append("RelayState").append(">");  }  xml.append("</").append(prefixLIB).append("RegisterNameIdentifierResponse>");  return xml.toString();}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  private LDAPMessage operationToResponseLDAPMessage(Operation operation){  ResultCode resultCode=operation.getResultCode();  if (resultCode == null) {    logger.error(ERR_LDAP_CLIENT_SEND_RESPONSE_NO_RESULT_CODE,operation.getOperationType(),operation.getConnectionID(),operation.getOperationID());    resultCode=DirectoryServer.getServerErrorResultCode();  }  LocalizableMessageBuilder errorMessage=operation.getErrorMessage();  DN matchedDN=operation.getMatchedDN();  List<String> referralURLs;  if (ldapVersion == 2) {    referralURLs=null;    if (resultCode == ResultCode.REFERRAL) {      resultCode=ResultCode.CONSTRAINT_VIOLATION;      errorMessage.append(ERR_LDAPV2_REFERRAL_RESULT_CHANGED.get());    }    List<String> opReferrals=operation.getReferralURLs();    if (opReferrals != null && !opReferrals.isEmpty()) {      StringBuilder referralsStr=new StringBuilder();      Iterator<String> iterator=opReferrals.iterator();      referralsStr.append(iterator.next());      while (iterator.hasNext()) {        referralsStr.append(", ");        referralsStr.append(iterator.next());      }      errorMessage.append(ERR_LDAPV2_REFERRALS_OMITTED.get(referralsStr));    }  } else {    referralURLs=operation.getReferralURLs();  }  ProtocolOp protocolOp;switch (operation.getOperationType()) {case ADD:    protocolOp=new AddResponseProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs);  break;case BIND:ByteString serverSASLCredentials=((BindOperationBasis)operation).getServerSASLCredentials();protocolOp=new BindResponseProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs,serverSASLCredentials);break;case COMPARE:protocolOp=new CompareResponseProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs);break;case DELETE:protocolOp=new DeleteResponseProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs);break;case EXTENDED:if (ldapVersion == 2) {logger.error(ERR_LDAPV2_SKIPPING_EXTENDED_RESPONSE,getConnectionID(),operation.getOperationID(),operation);return null;}ExtendedOperationBasis extOp=(ExtendedOperationBasis)operation;protocolOp=new ExtendedResponseProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs,extOp.getResponseOID(),extOp.getResponseValue());break;case MODIFY:protocolOp=new ModifyResponseProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs);break;case MODIFY_DN:protocolOp=new ModifyDNResponseProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs);break;case SEARCH:protocolOp=new SearchResultDoneProtocolOp(resultCode.intValue(),errorMessage.toMessage(),matchedDN,referralURLs);break;default :logger.error(ERR_LDAP_CLIENT_SEND_RESPONSE_INVALID_OP,operation.getOperationType(),getConnectionID(),operation.getOperationID(),operation);return null;}List<Control> controls;if (ldapVersion == 2) {controls=null;} else {controls=operation.getResponseControls();}return new LDAPMessage(operation.getMessageID(),protocolOp,controls);}  }
class C{  public UnsupportedDigestAlgorithmException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void addInputFilter(InputFilter[] inputFilters,String encodingName){  encodingName=encodingName.trim().toLowerCase(Locale.ENGLISH);  if (encodingName.equals("identity")) {  } else   if (encodingName.equals("chunked")) {    inputBuffer.addActiveFilter(inputFilters[Constants.CHUNKED_FILTER]);    contentDelimitation=true;  } else {    for (int i=pluggableFilterIndex; i < inputFilters.length; i++) {      if (inputFilters[i].getEncodingName().toString().equals(encodingName)) {        inputBuffer.addActiveFilter(inputFilters[i]);        return;      }    }    response.setStatus(501);    setErrorState(ErrorState.CLOSE_CLEAN,null);    if (log.isDebugEnabled()) {      log.debug(sm.getString("http11processor.request.prepare") + " Unsupported transfer encoding [" + encodingName+ "]");    }  }}  }
class C{  public Code39Reader(){  this(false);}  }
class C{  public static boolean isLyrics3v2FieldIdentifier(String identifier){  return identifier.length() >= 3 && getInstanceOf().getIdToValueMap().containsKey(identifier.substring(0,3));}  }
class C{  public JAXBException(String message,String errorCode,Throwable exception){  super(message);  this.errorCode=errorCode;  this.linkedException=exception;}  }
class C{  public ByteBufferOutputStream append(int i){  return append((double)i);}  }
class C{  public DSMLAbandonOperation(LDAPConnection connection){  this.connection=connection;}  }
class C{  public static List<Foo> toModels(FooSoap[] soapModels){  if (soapModels == null) {    return null;  }  List<Foo> models=new ArrayList<Foo>(soapModels.length);  for (  FooSoap soapModel : soapModels) {    models.add(toModel(soapModel));  }  return models;}  }
class C{  private void validateException(DirectoryException de){  assertNotNull(de.getResultCode());  de.getMessageObject();  de.getMatchedDN();  de.getReferralURLs();}  }
class C{  protected void onUncaughtException(RequestContext requestContext,Exception e) throws ServletException, IOException {  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  AuthExceptionViewBean vb=(AuthExceptionViewBean)viewBeanManager.getViewBean(com.sun.identity.authentication.UI.AuthExceptionViewBean.class);  exDebug.error("AuthenticationServletBase.onUncaughtException:",e);  vb.forwardTo(requestContext);}  }
class C{  public void read(Reader in,Object desc) throws IOException {  EditorKit kit=getUI().getEditorKit(this);  Document doc=kit.createDefaultDocument();  if (desc != null) {    doc.putProperty(Document.StreamDescriptionProperty,desc);  }  try {    kit.read(in,doc,0);    setDocument(doc);  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public ReplyToParser(String replyTo){  super(replyTo);}  }
class C{  public Set keySet(){  if (keySet == null)   keySet=new SynchronizedSet(new KeySet(),this);  return keySet;}  }
class C{  public EncryptedAttribute encrypt(Key recipientPublicKey,String dataEncAlgorithm,int dataEncStrength,String recipientEntityID) throws SAML2Exception {  Element el=EncManager.getEncInstance().encrypt(toXMLString(true,true),recipientPublicKey,dataEncAlgorithm,dataEncStrength,recipientEntityID,"EncryptedAttribute");  return AssertionFactory.getInstance().createEncryptedAttribute(el);}  }
class C{  public static String applyMargin(String html,int top,int right,int bottom,int left){  return "<div style=\"margin:" + top + "px "+ right+ "px "+ bottom+ "px "+ left+ "px;\">"+ html+ DIV_CLOSE;}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (ignore || (request.getCharacterEncoding() == null)) {    String characterEncoding=selectEncoding(request);    if (characterEncoding != null) {      request.setCharacterEncoding(characterEncoding);    }  }  chain.doFilter(request,response);}  }
class C{  private void initializeInternal(TemplateFile templateFile,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  random=templateFile.getRandom();  if (arguments == null || arguments.length == 0) {    LocalizableMessage message=ERR_MAKELDIF_TAG_NO_RANDOM_TYPE_ARGUMENT.get(lineNumber);    throw new InitializationException(message);  }  int numArgs=arguments.length;  String randomTypeString=toLowerCase(arguments[0]);  if (randomTypeString.equals("alpha")) {    characterSet=ALPHA_CHARS;    decodeLength(arguments,1,lineNumber,warnings);  } else   if (randomTypeString.equals("numeric")) {    if (numArgs == 2) {      randomType=RANDOM_TYPE_CHARS_FIXED;      characterSet=NUMERIC_CHARS;      try {        minLength=Integer.parseInt(arguments[1]);        if (minLength < 0) {          LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_BELOW_LOWER_BOUND.get(minLength,0,getName(),lineNumber);          throw new InitializationException(message);        } else         if (minLength == 0) {          LocalizableMessage message=WARN_MAKELDIF_TAG_WARNING_EMPTY_VALUE.get(lineNumber);          warnings.add(message);        }      } catch (      NumberFormatException nfe) {        LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[1],getName(),lineNumber);        throw new InitializationException(message,nfe);      }    } else     if (numArgs == 3 || numArgs == 4) {      randomType=RANDOM_TYPE_NUMERIC;      if (numArgs == 4) {        try {          decimalFormat=new DecimalFormat(arguments[3]);        } catch (        Exception e) {          LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_FORMAT_STRING.get(arguments[3],getName(),lineNumber);          throw new InitializationException(message,e);        }      } else {        decimalFormat=null;      }      try {        minValue=Long.parseLong(arguments[1]);      } catch (      NumberFormatException nfe) {        LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[1],getName(),lineNumber);        throw new InitializationException(message,nfe);      }      try {        maxValue=Long.parseLong(arguments[2]);        if (maxValue < minValue) {          LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_BELOW_LOWER_BOUND.get(maxValue,minValue,getName(),lineNumber);          throw new InitializationException(message);        }        valueRange=maxValue - minValue + 1;      } catch (      NumberFormatException nfe) {        LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[2],getName(),lineNumber);        throw new InitializationException(message,nfe);      }    } else {      LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,2,4,numArgs);      throw new InitializationException(message);    }  } else   if (randomTypeString.equals("alphanumeric")) {    characterSet=ALPHANUMERIC_CHARS;    decodeLength(arguments,1,lineNumber,warnings);  } else   if (randomTypeString.equals("chars")) {    if (numArgs < 3 || numArgs > 4) {      LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,3,4,numArgs);      throw new InitializationException(message);    }    characterSet=arguments[1].toCharArray();    decodeLength(arguments,2,lineNumber,warnings);  } else   if (randomTypeString.equals("hex")) {    characterSet=HEX_CHARS;    decodeLength(arguments,1,lineNumber,warnings);  } else   if (randomTypeString.equals("base64")) {    characterSet=BASE64_CHARS;    decodeLength(arguments,1,lineNumber,warnings);  } else   if (randomTypeString.equals("month")) {    randomType=RANDOM_TYPE_MONTH;    if (numArgs == 1) {      maxLength=0;    } else     if (numArgs == 2) {      try {        maxLength=Integer.parseInt(arguments[1]);        if (maxLength <= 0) {          LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_BELOW_LOWER_BOUND.get(maxLength,1,getName(),lineNumber);          throw new InitializationException(message);        }      } catch (      NumberFormatException nfe) {        LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[1],getName(),lineNumber);        throw new InitializationException(message,nfe);      }    } else {      LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,1,2,numArgs);      throw new InitializationException(message);    }  } else   if (randomTypeString.equals("telephone")) {    randomType=RANDOM_TYPE_TELEPHONE;  } else {    LocalizableMessage message=ERR_MAKELDIF_TAG_UNKNOWN_RANDOM_TYPE.get(lineNumber,randomTypeString);    throw new InitializationException(message);  }}  }
class C{  public void eleminateRedundentLocals(ElemTemplateElement psuedoVarRecipient){  eleminateRedundent(psuedoVarRecipient,m_paths);}  }
class C{  public void update(MatchingRule matchingRule,Schema schema){  String n=matchingRule.getNameOrOID();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  titlePanel.setDetails(LocalizableMessage.raw(n));  name.setText(n);  oid.setText(matchingRule.getOID());  Syntax s=null;  String syntaxOID=matchingRule.getSyntax().getOID();  for (  Syntax candidate : schema.getSyntaxes()) {    if (candidate.getOID().equals(syntaxOID)) {      s=candidate;      break;    }  }  if (s != null) {    syntax.setText(Utilities.getSyntaxText(s));  } else {    syntax.setText(syntaxOID);  }  n=matchingRule.getDescription();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  description.setText(n);  TreeSet<String> attributes=new TreeSet<>(new LowerCaseComparator());  for (  AttributeType attr : schema.getAttributeTypes()) {    if (matchingRule.equals(attr.getApproximateMatchingRule()) || matchingRule.equals(attr.getEqualityMatchingRule()) || matchingRule.equals(attr.getSubstringMatchingRule())|| matchingRule.equals(attr.getOrderingMatchingRule())) {      attributes.add(attr.getNameOrOID());    }  }  DefaultListModel model=(DefaultListModel)usedByAttributes.getModel();  model.clear();  for (  String attr : attributes) {    model.addElement(attr);  }}  }
class C{  public CertificateNotYetValidException(){  super();}  }
class C{  public int transformToRTF(ElemTemplateElement templateParent) throws TransformerException {  DTM dtmFrag=m_xcontext.getRTFDTM();  return transformToRTF(templateParent,dtmFrag);}  }
class C{  public synchronized boolean addAll(int index,Collection<? extends E> c){  modCount++;  if (index < 0 || index > elementCount)   throw new ArrayIndexOutOfBoundsException(index);  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityHelper(elementCount + numNew);  int numMoved=elementCount - index;  if (numMoved > 0)   System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  System.arraycopy(a,0,elementData,index,numNew);  elementCount+=numNew;  return numNew != 0;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.EndpointReferenceType createEndpointReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.EndpointReferenceTypeImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectConfirmationType createSubjectConfirmationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectConfirmationTypeImpl();}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return _fooLocalService.deleteFoo(fooId);}  }
class C{  public ErrorData(Throwable throwable,int statusCode,String uri,String servletName){  this.throwable=throwable;  this.statusCode=statusCode;  this.uri=uri;  this.servletName=servletName;}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  public boolean isAssured(){  return assuredFlag;}  }
class C{  public void handleBtnRealmRequest(RequestInvocationEvent event){  submitCycle=true;  bRealmSelect=true;  forwardTo();}  }
class C{  public EntitlementException(int errorCode,Object... params){  this.errorCode=errorCode;  this.params=params;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] privateKeyInfoData) throws IOException {  return createKey(PrivateKeyInfo.getInstance(ASN1Primitive.fromByteArray(privateKeyInfoData)));}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  public void addAccessibleSelection(int i){  List.this.select(i);}  }
class C{  public ReplicationParameters baseDn(String baseDn){  this.baseDn=baseDn;  return this;}  }
class C{  @Override public void clear(){  if (locked)   throw new IllegalStateException(sm.getString("parameterMap.locked"));  super.clear();}  }
class C{  public SAMLRequestVersionTooLowException(String s){  super(s);}  }
class C{  public AMSearchResults searchDynamicGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.DYNAMIC_GROUP),wildcard,avPairs,searchControl);}  }
class C{  public boolean isRadio(){  return getFieldFlag(FF_RADIO);}  }
class C{  private void initSessionsList(String pattern) throws AMConsoleException {  pattern=pattern.toLowerCase();  String[] params={serverName,pattern};  logEvent("ATTEMPT_GET_CURRENT_SESSIONS",params);  try {    Session session=sessionCache.getSession(new SessionID(getUserSSOToken().getTokenID().toString()));    SearchResults<Session> result=session.getValidSessions(serverName,pattern);    Set<Session> sessions=result.getSearchResults();    String errorMessage=AMAdminUtils.getSearchResultWarningMessage(result,this);    smSessionCache=new SMSessionCache(sessions,errorMessage,this);    logEvent("SUCCEED_GET_CURRENT_SESSIONS",params);  } catch (  SessionException se) {    String strError=getErrorString(se);    String[] paramsEx={serverName,pattern,strError};    logEvent("SESSION_EXCEPTION_GET_CURRENT_SESSIONS",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  private void handleTaskSearchResult(SearchResultEntry sr,Collection<TaskEntry> taskEntries,List<Exception> ex){  try {    if (isTaskEntry(sr)) {      taskEntries.add(new TaskEntry(Converters.to(sr)));    }  } catch (  RuntimeException e) {    ex.add(e);  }}  }
class C{  public HttpRoute(HttpHost target){  this(null,target,null,false,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  protected void uninstallListeners(){  desktop.removePropertyChangeListener(pcl);  pcl=null;}  }
class C{  public boolean isTrustStoreInMemory(){  return state.trustStoreInMemory;}  }
class C{  public String findURIFromDoc(int owner){  int n=m_sourceTree.size();  for (int i=0; i < n; i++) {    SourceTree sTree=(SourceTree)m_sourceTree.elementAt(i);    if (owner == sTree.m_root)     return sTree.m_url;  }  return null;}  }
class C{  public void handleCreateInstanceButtonRequest(RequestInvocationEvent event){  removePageSessionAttribute(AUTH_INSTANCE_TABLE);  NewAuthInstanceViewBean vb=(NewAuthInstanceViewBean)getViewBean(NewAuthInstanceViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public String toQueryString(){  final StringBuffer buf=new StringBuffer();  final Object value1=this.values.get(0);  buf.append(this.column.getName());switch (this.type) {case STARTS_WIDTH:    buf.append(" like '" + value1 + "%'");  break;case CONTAINS:buf.append(" like '%" + value1 + "%'");break;case ENDS_WITH:buf.append(" like '%" + value1 + "'");break;case DOESNOT_CONTAINS:buf.append(" not like '%" + value1 + "%'");break;case MORE_THAN:buf.append(" > '" + value1 + "'");break;case LESS_THAN:buf.append(" < '" + value1 + "'");break;}return buf.toString();}  }
class C{  public static String removeLeft(final String value,final String prefix){  return removeLeft(value,prefix,true);}  }
class C{  private int readContent(InputStream is){  int nread=0;  log("Read content");  String lengthString=headers.get(requestHeaders[REQ_CONTENT_LENGTH]);  int length=new Integer(lengthString).intValue();  length=readData(is,length);  return length;}  }
class C{  protected static void configureMDC(Span span){  MDC.put(TRACE_ID_MDC_KEY,span.getTraceId());  MDC.put(SPAN_JSON_MDC_KEY,span.toJSON());}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  SIPResponse that=(SIPResponse)other;  return statusLine.equals(that.statusLine) && super.equals(other);}  }
class C{  public static float readSwappedFloat(InputStream input) throws IOException {  return Float.intBitsToFloat(readSwappedInteger(input));}  }
class C{  private CharSequence insertGrouping(CharSequence s){  StringBuilder result=new StringBuilder(s.length() + s.length() / 3);  int digitsLength=s.length();  int i=0;  if (s.charAt(0) == '-') {    --digitsLength;    ++i;    result.append('-');  }  int headLength=digitsLength % 3;  if (headLength == 0) {    headLength=3;  }  result.append(s,i,i + headLength);  i+=headLength;  for (; i < s.length(); i+=3) {    result.append(localeData.groupingSeparator);    result.append(s,i,i + 3);  }  return result;}  }
class C{  public NotLinkException(String file){  super(file);}  }
class C{  public boolean swap_connection_to_pin(boolean p_at_start){  Polyline trace_polyline;  Collection<BrdItem> contact_list;  if (p_at_start) {    trace_polyline=polyline();    contact_list=get_start_contacts();  } else {    trace_polyline=polyline().reverse();    contact_list=get_end_contacts();  }  if (contact_list.size() != 1)   return false;  BrdItem curr_contact=contact_list.iterator().next();  if (!(curr_contact.get_fixed_state() == ItemFixState.SHOVE_FIXED && (curr_contact instanceof BrdTracep))) {    return false;  }  BrdTracep contact_trace=(BrdTracep)curr_contact;  Polyline contact_polyline=contact_trace.polyline();  PlaLineInt contact_last_line=contact_polyline.plaline_last_prev();  PlaLineInt first_line=trace_polyline.plaline_first_next();  boolean check_swap=contact_last_line.direction().projection(first_line.direction()) == Signum.NEGATIVE;  if (!check_swap) {    double half_width=get_half_width();    if (trace_polyline.plaline_len() > 3 && trace_polyline.corner_approx(0).distance_square(trace_polyline.corner_approx(1)) <= half_width * half_width) {      check_swap=(contact_last_line.direction().projection(trace_polyline.plaline(2).direction()) == Signum.NEGATIVE);    }  }  if (!check_swap)   return false;  BrdAbitPin contact_pin=null;  Collection<BrdItem> curr_contacts=contact_trace.get_start_contacts();  for (  BrdItem tmp_contact : curr_contacts) {    if (tmp_contact instanceof BrdAbitPin) {      contact_pin=(BrdAbitPin)tmp_contact;      break;    }  }  if (contact_pin == null)   return false;  Polyline combined_polyline=contact_polyline.combine(trace_polyline);  PlaDirection nearest_pin_exit_direction=contact_pin.calc_nearest_exit_restriction_direction(combined_polyline,get_half_width(),get_layer());  if (nearest_pin_exit_direction == null || nearest_pin_exit_direction.equals(contact_polyline.plaline_first_next().direction())) {    return false;  }  contact_trace.set_fixed_state(get_fixed_state());  combine(20);  return true;}  }
class C{  private void dispatchOrder(Order order,Message<JsonObject> sender){  Future<Void> orderCreateFuture=Future.future();  orderService.createOrder(order,orderCreateFuture.completer());  orderCreateFuture.compose(null).setHandler(null);}  }
class C{  private int copyFiles() throws IOException {  this.filesCopied=0;  this.addCopyNode=false;  for (  FilePostParam file : files) {    if (!FileUtils.checkFileName(file.getName())) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (Pattern.compile(Constants.INVALID_PATH_REGEX).matcher(file.getFolder()).find()) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (configuration.getTypes().get(file.getType()) == null) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (file.getFolder() == null || file.getFolder().equals("")) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (FileUtils.checkFileExtension(file.getName(),this.configuration.getTypes().get(this.type)) == 1) {      creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_EXTENSION,file.getName(),file.getFolder(),file.getType());      continue;    }    if (!this.type.equals(file.getType()) && FileUtils.checkFileExtension(file.getName(),this.configuration.getTypes().get(file.getType())) == 1) {      creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_EXTENSION,file.getName(),file.getFolder(),file.getType());      continue;    }    if (FileUtils.checkIfDirIsHidden(file.getFolder(),this.configuration)) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (FileUtils.checkIfFileIsHidden(file.getName(),this.configuration)) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (!AccessControlUtil.getInstance(this.configuration).checkFolderACL(file.getType(),file.getFolder(),this.userRole,AccessControlUtil.CKFINDER_CONNECTOR_ACL_FILE_VIEW)) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_UNAUTHORIZED;    }    File sourceFile=new File(configuration.getTypes().get(file.getType()).getPath() + file.getFolder(),file.getName());    File destFile=new File(configuration.getTypes().get(this.type).getPath() + this.currentFolder,file.getName());    try {      if (!sourceFile.exists() || !sourceFile.isFile()) {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_FILE_NOT_FOUND,file.getName(),file.getFolder(),file.getType());        continue;      }      if (!this.type.equals(file.getType())) {        Long maxSize=configuration.getTypes().get(this.type).getMaxSize();        if (maxSize != null && maxSize < sourceFile.length()) {          creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_TOO_BIG,file.getName(),file.getFolder(),file.getType());          continue;        }      }      if (sourceFile.equals(destFile)) {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_SOURCE_AND_TARGET_PATH_EQUAL,file.getName(),file.getFolder(),file.getType());        continue;      } else       if (destFile.exists()) {        if (file.getOptions() != null && file.getOptions().indexOf("overwrite") != -1) {          if (!handleOverwrite(sourceFile,destFile)) {            creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());            continue;          } else {            this.filesCopied++;          }        } else         if (file.getOptions() != null && file.getOptions().indexOf("autorename") != -1) {          if (!handleAutoRename(sourceFile,destFile)) {            creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());            continue;          } else {            this.filesCopied++;          }        } else {          creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ALREADY_EXIST,file.getName(),file.getFolder(),file.getType());          continue;        }      } else {        if (FileUtils.copyFromSourceToDestFile(sourceFile,destFile,false,configuration)) {          this.filesCopied++;          copyThumb(file);        }      }    } catch (    SecurityException e) {      if (configuration.isDebugMode()) {        throw e;      } else {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());        continue;      }    }catch (    IOException e) {      if (configuration.isDebugMode()) {        throw e;      } else {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());        continue;      }    }  }  this.addCopyNode=true;  if (creator.hasErrors()) {    return Constants.Errors.CKFINDER_CONNECTOR_ERROR_COPY_FAILED;  } else {    return Constants.Errors.CKFINDER_CONNECTOR_ERROR_NONE;  }}  }
class C{  FileReplicaDB(final int serverId,final DN baseDN,final ReplicationServer replicationServer,final CryptoSuite cryptoSuite,final ReplicationEnvironment replicationEnv) throws ChangelogException {  this.serverId=serverId;  this.baseDN=baseDN;  this.replicationServer=replicationServer;  this.replicationEnv=replicationEnv;  this.log=createLog(replicationEnv,cryptoSuite);  this.csnLimits=new CSNLimits(readOldestCSN(),readNewestCSN());  DirectoryServer.deregisterMonitorProvider(dbMonitor);  DirectoryServer.registerMonitorProvider(dbMonitor);}  }
class C{  private void init(int initCapacity){  table=new Object[2 * initCapacity];}  }
class C{  public boolean removeBackupFiles(){  return removeBackupFilesArg.isPresent();}  }
class C{  public void run(){  allowToChange=false;synchronized (actions) {    if (!actions.isEmpty()) {      for (Iterator iter=actions.iterator(); iter.hasNext(); ) {        ((ScheduleableAction)iter.next()).doAction();        if (removeElementAfterAction) {          iter.remove();        }      }    }  }  reset();}  }
class C{  private void parse_assign() throws SyntaxException {  String op=((Element)current).getContent();  parsedExpsNotEmpty(current);  Expression exp=parsedExps.pop();  LineCol lineCol=current.getLineCol();  if (exp instanceof AST.Access) {    AST.Access access=(AST.Access)exp;    if (access.exp == null && !usedVarNames.contains(access.name) && op.equals("=")) {      VariableDef def=new VariableDef(access.name,modifiers,annos,access.line_col());      annos.clear();      modifiers.clear();      usedVarNames.add(access.name);      Expression e=next_exp(false);      def.setInit(e);      parsedExps.push(def);    } else {      Expression e=next_exp(false);      AST.Assignment a=new AST.Assignment((AST.Access)exp,op,e,lineCol);      parsedExps.push(a);    }  } else   if (exp instanceof AST.Index) {    AST.Index index=(AST.Index)exp;    Expression e=next_exp(false);    AST.Assignment a=new AST.Assignment(new AST.Access(index,null,index.line_col()),op,e,lineCol);    parsedExps.push(a);  } else   if (exp instanceof VariableDef) {    VariableDef def=(VariableDef)exp;    Expression e=next_exp(false);    def.setInit(e);    parsedExps.push(def);  } else {    err.UnexpectedTokenException("assignable variable",exp.toString(),exp.line_col());    err.debug("ignore the assign statement");    throw new ParseFail();  }  parse_expression();}  }
class C{  public final void testGetMGFAlgorithm(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertEquals("MGF1",pssps.getMGFAlgorithm());}  }
class C{  public boolean allowLDAPv2(){  return currentConfig.isAllowLDAPV2();}  }
class C{  public Observable<Void> deleteAccountObservable(String id){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  deleteAccount(id,resultHandler.toHandler());  return resultHandler;}  }
class C{  protected void decryptFinal() throws IOException {  inBuffer.flip();  outBuffer.clear();  try {    cipher.doFinal(inBuffer,outBuffer);    finalDone=true;  } catch (  ShortBufferException e) {    throw new IOException(e);  }catch (  IllegalBlockSizeException e) {    throw new IOException(e);  }catch (  BadPaddingException e) {    throw new IOException(e);  }  inBuffer.clear();  outBuffer.flip();}  }
class C{  public static SimpleBigDecimal approximateDivisionByN(BigInteger k,BigInteger s,BigInteger vm,byte a,int m,int c){  int _k=(m + 5) / 2 + c;  BigInteger ns=k.shiftRight(m - _k - 2 + a);  BigInteger gs=s.multiply(ns);  BigInteger hs=gs.shiftRight(m);  BigInteger js=vm.multiply(hs);  BigInteger gsPlusJs=gs.add(js);  BigInteger ls=gsPlusJs.shiftRight(_k - c);  if (gsPlusJs.testBit(_k - c - 1)) {    ls=ls.add(ECConstants.ONE);  }  return new SimpleBigDecimal(ls,c);}  }
class C{  private String unshortenUrl(String shortURL){  if (!shortURL.startsWith(HTTP_PROTOCOL) && !shortURL.startsWith(HTTPS_PROTOCOL))   return "";  URLConnection urlConn=connectURL(shortURL);  urlConn.getHeaderFields();  String finalResult=urlConn.getURL().toString();  urlConn=connectURL(finalResult);  urlConn.getHeaderFields();  shortURL=urlConn.getURL().toString();  while (!shortURL.equals(finalResult)) {    finalResult=unshortenUrl(finalResult);  }  return finalResult;}  }
class C{  public SessionResponseParser(String xmlString){  document=XMLUtils.toDOMDocument(xmlString,SessionRequestParser.debug);}  }
class C{  @Override public boolean onPrepareOptionsMenu(Menu menu){  Log.d(TAG,"start FmRadioActivity.onPrepareOptionsMenu");  mMenuItemChannelList.setVisible(!mIsInRecordingMode);  mMenuItemOverflow.setVisible(!mIsInRecordingMode);  mMenuItemPower.setVisible(!mIsInRecordingMode);  if (null == mService) {    Log.d(TAG,"mService is null");    return !mIsInRecordingMode;  }  boolean isPlaying=mService.isPowerUp();  boolean isMakePowerdown=mService.isMakePowerDown();  boolean isSeeking=mService.isSeeking();  boolean isScan=mService.isScanning();  refreshActionMenuItem((isSeeking || isScan) ? false : isPlaying);  refreshActionMenuPower((isScan || isSeeking) ? false : (isPlaying || (isMakePowerdown && !mIsNeedDisablePower)));  if (isSeeking) {    Log.d(TAG,"onPrepareOptionsMenu: it is seeking");    startAnimation();  }  Log.d(TAG,"end FmRadioActivity.onPrepareOptionsMenu");  return !mIsInRecordingMode;}  }
class C{  public static ExecuteStatementWrapper executeStatementWrapper(){  return executeStatementWrapper;}  }
class C{  public BrokerInitializer(ReplicationBroker rb,int serverId,boolean createReader){  this.rb=rb;  this.serverId=serverId;  this.createReader=createReader;}  }
class C{  public boolean messageEnabled(){  return this.debugLevel.compareLevel(DebugLevel.MESSAGE) >= 0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  boolean hasChildNodes;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  hasChildNodes=titleAttr.hasChildNodes();  assertTrue("hasChildrenIsTrue",hasChildNodes);}  }
class C{  public boolean isServiceInstanceUpdateEnabled(){  return isSIUEnabled;}  }
class C{  public void recycle(){  state=INITIAL_STATE;  if (cb.getChars().length > size) {    cb=new CharChunk(size);    cb.setLimit(size);    cb.setOptimizedWrite(false);    cb.setCharInputChannel(this);    cb.setCharOutputChannel(this);  } else {    cb.recycle();  }  markPos=-1;  bb.recycle();  closed=false;  if (conv != null) {    conv.recycle();    encoders.get(conv.getCharset()).push(conv);    conv=null;  }  enc=null;}  }
class C{  @Override public int hashCode(){  int hashCode=cachedHashCode;  if (hashCode == 0) {    hashCode=5;    hashCode=11 * hashCode + Arrays.hashCode(eras);    hashCode=11 * hashCode + Arrays.hashCode(months);    hashCode=11 * hashCode + Arrays.hashCode(shortMonths);    hashCode=11 * hashCode + Arrays.hashCode(weekdays);    hashCode=11 * hashCode + Arrays.hashCode(shortWeekdays);    hashCode=11 * hashCode + Arrays.hashCode(ampms);    hashCode=11 * hashCode + Arrays.deepHashCode(getZoneStringsWrapper());    hashCode=11 * hashCode + Objects.hashCode(localPatternChars);    cachedHashCode=hashCode;  }  return hashCode;}  }
class C{  public Set<ResourceSetLabel> list(String realm,String username) throws ResourceException {  return query(realm,username,equality("objectClass",OBJECT_CLASS),false);}  }
class C{  protected void handleSESSION_CREATED(SessionMessage msg,Member sender){  counterReceive_EVT_SESSION_CREATED++;  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.receiveMessage.createNewSession",getName(),msg.getSessionID()));  }  DeltaSession session=(DeltaSession)createEmptySession();  session.setManager(this);  session.setValid(true);  session.setPrimarySession(false);  session.setCreationTime(msg.getTimestamp());  session.setMaxInactiveInterval(getContext().getSessionTimeout() * 60,false);  session.access();  session.setId(msg.getSessionID(),notifySessionListenersOnReplication);  session.resetDeltaRequest();  session.endAccess();}  }
class C{  protected void handleGenericException(Exception e) throws SAXException {  reportError(e.getMessage(),e,false);}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  for (  StringBuilder b : toLDIF()) {    buffer.append(indentBuf);    buffer.append(b);    buffer.append(EOL);  }}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  String command=request.getPathInfo();  String path=request.getParameter("path");  ContextName cn=null;  if (path != null) {    cn=new ContextName(path,request.getParameter("version"));  }  response.setContentType("text/html; charset=" + Constants.CHARSET);  String message="";  if (command == null || command.equals("/")) {  } else   if (command.equals("/list")) {  } else   if (command.equals("/sessions")) {    try {      doSessions(cn,request,response,smClient);      return;    } catch (    Exception e) {      log("HTMLManagerServlet.sessions[" + cn + "]",e);      message=smClient.getString("managerServlet.exception",e.toString());    }  } else   if (command.equals("/sslConnectorCiphers")) {    sslConnectorCiphers(request,response);  } else   if (command.equals("/upload") || command.equals("/deploy") || command.equals("/reload")|| command.equals("/undeploy")|| command.equals("/expire")|| command.equals("/start")|| command.equals("/stop")) {    message=smClient.getString("managerServlet.postCommand",command);  } else {    message=smClient.getString("managerServlet.unknownCommand",command);  }  list(request,response,message,smClient);}  }
class C{  public boolean isLong(){  return (val instanceof Long || val instanceof Integer);}  }
class C{  public AsfTagCoverField createArtworkField(final byte[] data){  return new AsfTagCoverField(data,PictureTypes.DEFAULT_ID,null,null);}  }
class C{  private static final <T>int findIgnoreCase(MapElement<T>[] map,CharChunk name){  return findIgnoreCase(map,name,name.getStart(),name.getEnd());}  }
class C{  @NonNull public static Interpolator anticipate(){  return new AnticipateInterpolator();}  }
class C{  public Mp4TagBinaryField(String id,byte[] data){  super(id);  this.dataBytes=data;}  }
class C{  public ServicesModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  private static void secureConnect(){  Connection connection=null;  try {    final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port,getTrustOptions(host,keystore,storepass));    connection=factory.getConnection();    connection.bind(bindDN,bindPassword.toCharArray());    System.out.println("Authenticated as " + bindDN + ".");  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }catch (  final GeneralSecurityException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_CONNECT_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public PageSize rotate(){  return new PageSize(height,width);}  }
class C{  public boolean isLockedDown(){  return code == Code.LOCKED_DOWN;}  }
class C{  @Override public String toString(){  return asString;}  }
class C{  private void connectToServerClicked(){  Set<String> runningTasks=new HashSet<>();  for (  Task task : getInfo().getTasks()) {    if (task.getState() == Task.State.RUNNING) {      runningTasks.add(task.getTaskDescription().toString());    }  }  boolean confirmed=true;  if (!runningTasks.isEmpty()) {    String allTasks=Utilities.getStringFromCollection(runningTasks,"<br>");    LocalizableMessage title=INFO_CTRL_PANEL_CONFIRMATION_REQUIRED_SUMMARY.get();    LocalizableMessage msg=INFO_CTRL_PANEL_RUNNING_TASKS_CHANGE_SERVER_CONFIRMATION_DETAILS.get(allTasks);    confirmed=Utilities.displayConfirmationDialog(Utilities.getParentDialog(this),title,msg);  }  if (confirmed) {    GenericDialog dlg=ControlCenterMainPane.getLocalOrRemoteDialog(getInfo());    Utilities.centerGoldenMean(dlg,Utilities.getFrame(MainMenuBar.this));    dlg.setVisible(true);  }}  }
class C{  public static AffinityControl newControl(final boolean isCritical){  byte[] randomValue=new byte[5];  ThreadLocalRandom.current().nextBytes(randomValue);  return new AffinityControl(ByteString.valueOfBytes(randomValue),isCritical);}  }
class C{  protected Frame<V> newFrame(final Frame<? extends V> src){  return new Frame<V>(src);}  }
class C{  public MetadataBlockHeader(ByteBuffer rawdata) throws CannotReadException {  isLastBlock=((rawdata.get(0) & 0x80) >>> 7) == 1;  int type=rawdata.get(0) & 0x7F;  if (type < BlockType.values().length) {    blockType=BlockType.values()[type];    dataLength=(u(rawdata.get(1)) << 16) + (u(rawdata.get(2)) << 8) + (u(rawdata.get(3)));    bytes=new byte[HEADER_LENGTH];    for (int i=0; i < HEADER_LENGTH; i++) {      bytes[i]=rawdata.get(i);    }  } else {    throw new CannotReadException(ErrorMessage.FLAC_NO_BLOCKTYPE.getMsg(type));  }}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  boolean retval;  if (!this.getClass().equals(other.getClass())) {    retval=false;  } else {    UDPMessageChannel that=(UDPMessageChannel)other;    retval=this.getKey().equals(that.getKey());  }  return retval;}  }
class C{  public String errorsToString(){  final String idList=!failedServers.isEmpty() ? failedServers.toString() : "none";  return "hasTimeout: " + (hasTimeout ? "yes" : "no") + ", "+ "hasWrongStatus: "+ (hasWrongStatus ? "yes" : "no")+ ", "+ "hasReplayError: "+ (hasReplayError ? "yes" : "no")+ ", "+ "concerned server ids: "+ idList;}  }
class C{  @Override public void removeListener(){  if (DEBUG.messageEnabled()) {    DEBUG.message("removelistener invoked");  }  String psearchBaseDN=CollectionHelper.getMapAttr(configMap,LDAP_PERSISTENT_SEARCH_BASE_DN);  if (StringUtils.isEmpty(psearchBaseDN)) {    if (DEBUG.messageEnabled()) {      DEBUG.message("Persistent search is disabled, no need to unregister.");    }  } else {    String pSearchId=getPSearchId();synchronized (pSearchMap) {      DJLDAPv3PersistentSearch pSearch=pSearchMap.get(pSearchId);      if (pSearch == null) {        DEBUG.error("PSearch is already removed, unable to unregister");      } else {        pSearch.removeMovedOrRenamedListener(this);        pSearch.removeListener(idRepoListener);        if (!pSearch.hasListeners()) {          pSearch.stopSearch();          pSearchMap.remove(pSearchId);        }      }    }  }}  }
class C{  @Override public ShapeTile intersection(ShapeTile p_other){  return p_other.intersection(this);}  }
class C{  public ConfigDeleteListenerAdaptor(ServerManagementContext serverContext,ManagedObjectPath<?,?> path,SetRelationDefinition<?,S> relation,ServerManagedObjectDeleteListener<S> listener){  this.serverContext=serverContext;  this.path=path;  this.optionalRelation=null;  this.instantiableRelation=null;  this.setRelation=relation;  this.listener=listener;  this.cachedManagedObject=null;}  }
class C{  public static void rebuildSessionFactory(){  try {    configuration.configure();    serviceRegistry=new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();    sessionFactory=configuration.buildSessionFactory(serviceRegistry);  } catch (  Exception e) {    System.err.println("%%%% Error Creating SessionFactory %%%%");    e.printStackTrace();  }}  }
class C{  @Override public boolean isRespectHight(){  return true;}  }
class C{  protected void uninstallListeners(JComponent c){  c.removePropertyChangeListener(this);}  }
class C{  protected void defaultPrivateExceptionHandling(Object exchange,Throwable exception) throws Throwable {  this.logger.error(SpincastStatics.getStackTrace(exception));  if (getServer().isResponseHeadersSent(exchange)) {    this.logger.info("Can't sent proper error response, headers are already sent :\n" + SpincastStatics.getStackTrace(exception));    return;  }  String errorMessage=getSpincastDictionary().exception_default_message();  if (getSpincastConfig().isDebugEnabled()) {    errorMessage+="\n\nDebug info :\n\n" + SpincastStatics.getStackTrace(exception);  }  int statusCode=HttpStatus.SC_INTERNAL_SERVER_ERROR;  if (exception instanceof ICustomStatusCodeException) {    statusCode=((ICustomStatusCodeException)exception).getStatusCode();  }  sendErrorUsingBestMatchContentType(exchange,errorMessage,statusCode);}  }
class C{  public boolean remove(String valueString){  return remove(ByteString.valueOfUtf8(valueString));}  }
class C{  public ResourceOwnerConsentRequiredException(OAuth2Constants.UrlLocation urlLocation){  super(400,"consent_required","The request requires consent.",urlLocation);}  }
class C{  private static int[] leftShift(int[] a,int len,int n){  int nInts=n >>> 5;  int nBits=n & 0x1F;  int bitsInHighWord=bitLengthForInt(a[0]);  if (n <= (32 - bitsInHighWord)) {    primitiveLeftShift(a,len,nBits);    return a;  } else {    if (nBits <= (32 - bitsInHighWord)) {      int result[]=new int[nInts + len];      System.arraycopy(a,0,result,0,len);      primitiveLeftShift(result,result.length,nBits);      return result;    } else {      int result[]=new int[nInts + len + 1];      System.arraycopy(a,0,result,0,len);      primitiveRightShift(result,result.length,32 - nBits);      return result;    }  }}  }
class C{  public void deleteOrganizationConfig(String orgName) throws SMSException, SSOException {  removeOrganizationConfiguration(orgName,SMSUtils.DEFAULT);}  }
class C{  public <M extends Configuration>void deregisterAddListener(SetRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterAddListener(baseDN,listener);}  }
class C{  public int compareTo(Object o){  ObjectStreamField f=(ObjectStreamField)o;  boolean thisPrimitive=this.isPrimitive();  boolean fPrimitive=f.isPrimitive();  if (thisPrimitive != fPrimitive) {    return thisPrimitive ? -1 : 1;  }  return this.getName().compareTo(f.getName());}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("Locals");  sb.append("\n");  for (int i=0; i < getLocals(); ++i) {    sb.append("\t");    sb.append("[" + i + "] "+ getLocal(i));    sb.append("\n");  }  sb.append("Stack");  sb.append("\n");  for (int i=0; i < getStackSize(); ++i) {    sb.append("\t");    sb.append("[" + i + "] "+ getStack(i).toString());    sb.append("\n");  }  return sb.toString();}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKey01(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        PKCS8EncodedKeySpec eks=epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK());        if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {          fail(algName[i][0] + " != " + algName[i][1]);        }      } catch (      InvalidKeyException e) {        fail(algName[i][0] + ", " + algName[i][1]+ ": "+ e);      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.SPDescriptorConfigElement createSPDescriptorConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.SPDescriptorConfigElementImpl();}  }
class C{  public void makeImmutable(){  if (mutable) {    if (results != null) {      int length=results.size();      for (int i=0; i < length; i++) {        Result result=(Result)results.get(i);        result.makeImmutable();      }      results=Collections.unmodifiableList(results);    }    mutable=false;  }}  }
class C{  public static LocalizableMessage secondsToTimeString(final int numSeconds){  if (numSeconds < 60) {    return INFO_TIME_IN_SECONDS.get(numSeconds);  } else   if (numSeconds < 3600) {    final int m=numSeconds / 60;    final int s=numSeconds % 60;    return INFO_TIME_IN_MINUTES_SECONDS.get(m,s);  } else   if (numSeconds < 86400) {    final int h=numSeconds / 3600;    final int m=(numSeconds % 3600) / 60;    final int s=numSeconds % 3600 % 60;    return INFO_TIME_IN_HOURS_MINUTES_SECONDS.get(h,m,s);  } else {    final int d=numSeconds / 86400;    final int h=(numSeconds % 86400) / 3600;    final int m=(numSeconds % 86400 % 3600) / 60;    final int s=numSeconds % 86400 % 3600% 60;    return INFO_TIME_IN_DAYS_HOURS_MINUTES_SECONDS.get(d,h,m,s);  }}  }
class C{  @BeforeClass public void startServerAndCreatePasswordFiles() throws Exception {  TestCaseUtils.startServer();  File pwFile=File.createTempFile("valid-bind-password-",".txt");  pwFile.deleteOnExit();  FileWriter fileWriter=new FileWriter(pwFile);  fileWriter.write("newPassword" + System.getProperty("line.separator"));  fileWriter.close();  newPasswordFile=pwFile.getAbsolutePath();  pwFile=File.createTempFile("invalid-bind-password-",".txt");  pwFile.deleteOnExit();  fileWriter=new FileWriter(pwFile);  fileWriter.write("password" + System.getProperty("line.separator"));  fileWriter.close();  currentPasswordFile=pwFile.getAbsolutePath();}  }
class C{  public void processLocalCompare(LocalBackendWorkflowElement wfe) throws CanceledOperationException {  this.backend=wfe.getBackend();  clientConnection=getClientConnection();  checkIfCanceled(false);  try {    AtomicBoolean executePostOpPlugins=new AtomicBoolean(false);    processCompare(executePostOpPlugins);    checkIfCanceled(false);    if (executePostOpPlugins.get()) {      processOperationResult(this,getPluginConfigManager().invokePostOperationComparePlugins(this));    }  }  finally {    LocalBackendWorkflowElement.filterNonDisclosableMatchedDN(this);  }}  }
class C{  protected static String listToCommaDelimitedString(List<String> stringList){  if (stringList == null) {    return "";  }  StringBuilder result=new StringBuilder();  for (Iterator<String> it=stringList.iterator(); it.hasNext(); ) {    Object element=it.next();    if (element != null) {      result.append(element);      if (it.hasNext()) {        result.append(", ");      }    }  }  return result.toString();}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_VIDEO\"";  db.execSQL(sql);}  }
class C{  public JCheckBoxMenuItem(Icon icon){  this(null,icon,false);}  }
class C{  private void computeScrollSpeed(int dx,int dy){  long currTime=SystemClock.elapsedRealtime();  int deltaDist=(directionVertical() ? dy : dx);  if (mFirstScrollBy) {    mFirstScrollBy=false;    int correctedDeltaDist=deltaDist * (mLayoutManager.getReverseLayout() ? -1 : 1);    if (correctedDeltaDist > 0)     deltaDist=getFooterVisibleLength(); else     if (correctedDeltaDist < 0)     deltaDist=getHeaderVisibleLength();    if (mLayoutManager.getReverseLayout()) {      deltaDist*=-1;    }  }  mScrollSpeed=(double)deltaDist / (currTime - mPrevTime);  mPrevTime=currTime;}  }
class C{  public void transform(float a,float b,float c,float d,float e,float f){  mStrokeWidth*=Math.hypot(a + b,c + d);  Node.transform(a,b,c,d,e,f,mNode);}  }
class C{  public static void removeAttributeDefaultValues(String serviceName,String schemaType,String attrName,Set defaultValues,boolean isOrgAttrSchema) throws UpgradeException {  String classMethod="UpgradeUtils:removeAttributeDefaultValues : ";  ServiceSchema ss=null;  if (debug.messageEnabled()) {    debug.message(classMethod + "serviceName : " + serviceName);    debug.message(classMethod + "schemaTpe :" + schemaType);    debug.message(classMethod + "attrName : " + attrName);    debug.message(classMethod + "defaltValues :" + defaultValues);    debug.message(classMethod + "isOrgAttrSchema :" + isOrgAttrSchema);  }  try {    if (isOrgAttrSchema) {      ServiceSchemaManager sm=getServiceSchemaManager(serviceName);      ss=sm.getOrganizationCreationSchema();    } else {      ss=getServiceSchema(serviceName,null,schemaType);    }    if (ss != null) {      AttributeSchema attrSchema=ss.getAttributeSchema(attrName);      for (Iterator i=defaultValues.iterator(); i.hasNext(); ) {        String defaultValue=(String)i.next();        attrSchema.removeDefaultValue(defaultValue);      }    }  } catch (  SMSException sme) {    debug.error(classMethod + "Error removing default values ",sme);  }catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSO Token",ssoe);  }}  }
class C{  public static boolean createKey(){  String errorMessage="";  String createKeyExceptionErrorPrefix="Failed to create key: ";  boolean isKeyCreated=false;  try {    mKeyStore.load(null);    mKeyGenerator.init(new KeyGenParameterSpec.Builder(mClientId,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_CBC).setUserAuthenticationRequired(mUserAuthRequired).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7).build());    mKeyGenerator.generateKey();    isKeyCreated=true;  } catch (  NoSuchAlgorithmException e) {    errorMessage=createKeyExceptionErrorPrefix + "NoSuchAlgorithmException: " + e.toString();    ;  }catch (  InvalidAlgorithmParameterException e) {    errorMessage=createKeyExceptionErrorPrefix + "InvalidAlgorithmParameterException: " + e.toString();    ;  }catch (  CertificateException e) {    errorMessage=createKeyExceptionErrorPrefix + "CertificateException: " + e.toString();    ;  }catch (  IOException e) {    errorMessage=createKeyExceptionErrorPrefix + "IOException: " + e.toString();    ;  }  if (!isKeyCreated) {    Log.e(TAG,errorMessage);    setPluginResultError(errorMessage);  }  return isKeyCreated;}  }
class C{  public GetSymmetricKeyExtendedOperation(){  super();}  }
class C{  private void updateConfigEntryByRemovingAttribute(String entryDn,String attributeName) throws DirectoryException, ConfigException {  final org.forgerock.opendj.ldap.Entry configEntry=configHandler.getEntry(DN.valueOf(entryDn));  final Entry newEntry=removeAttribute(Converters.to(configEntry),attributeName);  configHandler.replaceEntry(configEntry,Converters.from(newEntry));}  }
class C{  public DefaultPooledObject(final T object){  this.object=object;}  }
class C{  public void removeCircleOfTrustMember(String realm,String cotName,String protocolType,String entityId) throws COTException {  removeCircleOfTrustMember(realm,cotName,protocolType,entityId,true);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPPreReadResponseControl(criticality=");  buffer.append(isCritical());  buffer.append(",entry=");  searchEntry.toSingleLineString(buffer);  buffer.append(")");}  }
class C{  public static void writeSwappedShort(OutputStream output,short value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));}  }
class C{  public ManagedObjectNotFoundException(Throwable cause){  super(ERR_MANAGED_OBJECT_NOT_FOUND_EXCEPTION.get(),cause);}  }
class C{  @Override public void cancelCall(){  getCall().cancel();}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void invoke(String invokeMethod,ClientCallback clientCallback){  invoke(invokeMethod,null,clientCallback);}  }
class C{  protected boolean checkIfNoneMatch(HttpServletRequest request,HttpServletResponse response,WebResource resource) throws IOException {  String eTag=resource.getETag();  String headerValue=request.getHeader("If-None-Match");  if (headerValue != null) {    boolean conditionSatisfied=false;    if (!headerValue.equals("*")) {      StringTokenizer commaTokenizer=new StringTokenizer(headerValue,",");      while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {        String currentToken=commaTokenizer.nextToken();        if (currentToken.trim().equals(eTag))         conditionSatisfied=true;      }    } else {      conditionSatisfied=true;    }    if (conditionSatisfied) {      if (("GET".equals(request.getMethod())) || ("HEAD".equals(request.getMethod()))) {        response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);        response.setHeader("ETag",eTag);        return false;      }      response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);      return false;    }  }  return true;}  }
class C{  public static long remainderUnsigned(long dividend,long divisor){  if (dividend > 0 && divisor > 0) {    return dividend % divisor;  } else {    if (compareUnsigned(dividend,divisor) < 0)     return dividend; else     return toUnsignedBigInteger(dividend).remainder(toUnsignedBigInteger(divisor)).longValue();  }}  }
class C{  public static InputSource sourceToInputSource(Source source){  if (source instanceof SAXSource) {    return ((SAXSource)source).getInputSource();  } else   if (source instanceof StreamSource) {    StreamSource ss=(StreamSource)source;    InputSource isource=new InputSource(ss.getSystemId());    isource.setByteStream(ss.getInputStream());    isource.setCharacterStream(ss.getReader());    isource.setPublicId(ss.getPublicId());    return isource;  } else {    return null;  }}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public boolean isTopLevelMenu(){  return getParent() instanceof JMenuBar;}  }
class C{  public ValidationException(String msg){  super(msg);}  }
class C{  @Override public boolean isField2(){  return _foo.isField2();}  }
class C{  private static Object prepareNumber(Object n){  if (n instanceof Integer || n instanceof Short || n instanceof Byte)   return ((Number)n).intValue(); else   if (n instanceof Character)   return (int)(Character)n; else   if (n instanceof Long || n instanceof Float || n instanceof Double)   return n; else   if (n instanceof Number)   return ((Number)n).doubleValue(); else   return null;}  }
class C{  public Set searchUsers(String wildcard,int level) throws AMException, SSOException {  return searchUsers(wildcard,null,level);}  }
class C{  public boolean isAccessibleSelected(int r,int c){  if (validateIfNecessary()) {    if (r < 0 || r >= getAccessibleRowCount() || c < 0 || c >= getAccessibleColumnCount()) {      return false;    }    TableCellElementInfo cell=getCell(r,c);    if (cell != null) {      Element elem=cell.getElement();      int start=elem.getStartOffset();      int end=elem.getEndOffset();      return start >= editor.getSelectionStart() && end <= editor.getSelectionEnd();    }  }  return false;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  public Object clone(){  return new LdapName(unparsed,rdns,0,rdns.size());}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.LocalizedURIType createLocalizedURIType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.LocalizedURITypeImpl();}  }
class C{  public boolean isRepresentationClassRemote(){  return DataTransferer.isRemote(representationClass);}  }
class C{  protected String nullsToString(String couldBeNull,String subForNulls){  return (couldBeNull == null ? subForNulls : couldBeNull);}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  public TestCertificate(String diff,String type){  super(type);  this.diff=diff;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.XPath10Element createXPath10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.XPath10ElementImpl();}  }
class C{  public void endDocument() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endDocument");  m_insideParse=false;  if (m_contentHandler != null) {    m_contentHandler.endDocument();  }  if (m_incremental) {    m_transformer.waitTransformThread();  } else {    m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());    m_transformer.run();  }}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public Vector crossProduct(Vector o){  double newX=y * o.z - o.y * z;  double newY=z * o.x - o.z * x;  double newZ=x * o.y - o.x * y;  x=newX;  y=newY;  z=newZ;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  CharacterData emText;  Node nullChild;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(0);  emText=(CharacterData)emNode.getFirstChild();  nullChild=emText.getFirstChild();  assertNull("nullChild",nullChild);}  }
class C{  public void dragOver(DragSourceDragEvent dsde){}  }
class C{  public static void main(final String[] args) throws FileNotFoundException, IOException {}  }
class C{  public static String tagSwap(String orig){  return tagSwap(orig,false);}  }
class C{  @Nullable public static GrpcStreamingConfig createGrpcStreaming(DiagCollector diagCollector,Method method){  GrpcStreamingType type=getGrpcStreamingType(diagCollector,method);  if (type == null) {    return null;  }  return new GrpcStreamingConfig(null,type);}  }
class C{  @NonNull public static Interpolator accelerate(){  return new AccelerateInterpolator();}  }
class C{  public Point location(int x,int y){  Point loc=new Point(0,0);  int i, d;  if (layoutInfo == null)   return loc;  d=layoutInfo.startx;  if (!rightToLeft) {    for (i=0; i < layoutInfo.width; i++) {      d+=layoutInfo.minWidth[i];      if (d > x)       break;    }  } else {    for (i=layoutInfo.width - 1; i >= 0; i--) {      if (d > x)       break;      d+=layoutInfo.minWidth[i];    }    i++;  }  loc.x=i;  d=layoutInfo.starty;  for (i=0; i < layoutInfo.height; i++) {    d+=layoutInfo.minHeight[i];    if (d > y)     break;  }  loc.y=i;  return loc;}  }
class C{  public void paint(Graphics g){  int width=getWidth();  int height=getHeight();  if ((width <= 0) || (height <= 0)) {    return;  }  if (inBlitPaint) {    super.paint(g);    return;  }  if (repaintAll) {    repaintAll=false;    Rectangle clipB=g.getClipBounds();    if (clipB.width < getWidth() || clipB.height < getHeight()) {      waitingForRepaint=true;      if (repaintTimer == null) {        repaintTimer=createRepaintTimer();      }      repaintTimer.stop();      repaintTimer.start();    } else {      if (repaintTimer != null) {        repaintTimer.stop();      }      waitingForRepaint=false;    }  } else   if (waitingForRepaint) {    Rectangle clipB=g.getClipBounds();    if (clipB.width >= getWidth() && clipB.height >= getHeight()) {      waitingForRepaint=false;      repaintTimer.stop();    }  }  if (!backingStore || isBlitting() || getView() == null) {    super.paint(g);    lastPaintPosition=getViewLocation();    return;  }  Rectangle viewBounds=getView().getBounds();  if (!isOpaque()) {    g.clipRect(0,0,viewBounds.width,viewBounds.height);  }  if (backingStoreImage == null) {    backingStoreImage=createImage(width,height);    Rectangle clip=g.getClipBounds();    if (clip.width != width || clip.height != height) {      if (!isOpaque()) {        g.setClip(0,0,Math.min(viewBounds.width,width),Math.min(viewBounds.height,height));      } else {        g.setClip(0,0,width,height);      }      paintViaBackingStore(g,clip);    } else {      paintViaBackingStore(g);    }  } else {    if (!scrollUnderway || lastPaintPosition.equals(getViewLocation())) {      paintViaBackingStore(g);    } else {      Point blitFrom=new Point();      Point blitTo=new Point();      Dimension blitSize=new Dimension();      Rectangle blitPaint=new Rectangle();      Point newLocation=getViewLocation();      int dx=newLocation.x - lastPaintPosition.x;      int dy=newLocation.y - lastPaintPosition.y;      boolean canBlit=computeBlit(dx,dy,blitFrom,blitTo,blitSize,blitPaint);      if (!canBlit) {        paintViaBackingStore(g);      } else {        int bdx=blitTo.x - blitFrom.x;        int bdy=blitTo.y - blitFrom.y;        Rectangle clip=g.getClipBounds();        g.setClip(0,0,width,height);        Graphics bsg=getBackingStoreGraphics(g);        try {          bsg.copyArea(blitFrom.x,blitFrom.y,blitSize.width,blitSize.height,bdx,bdy);          g.setClip(clip.x,clip.y,clip.width,clip.height);          Rectangle r=viewBounds.intersection(blitPaint);          bsg.setClip(r);          super.paint(bsg);          g.drawImage(backingStoreImage,0,0,this);        }  finally {          bsg.dispose();        }      }    }  }  lastPaintPosition=getViewLocation();  scrollUnderway=false;}  }
class C{  int confirmYN(final LocalizableMessage message,final int defaultOption) throws ClientException {  final ConfirmationCallback confirmYNCallback=new ConfirmationCallback(message.toString(),ConfirmationCallback.WARNING,ConfirmationCallback.YES_NO_OPTION,defaultOption);  try {    handler.handle(new Callback[]{confirmYNCallback});  } catch (  final Exception e) {    throw new ClientException(ReturnCode.ERROR_UNEXPECTED,ERR_UPGRADE_DISPLAY_CONFIRM_ERROR.get(e.getMessage()));  }  return confirmYNCallback.getSelectedIndex();}  }
class C{  public JPEGQTable(int[] table){  if (table == null) {    throw new IllegalArgumentException("table must not be null.");  }  if (table.length != 64) {    throw new IllegalArgumentException("table.length != 64");  }  qTable=Arrays.copyOf(table,table.length);}  }
class C{  public void resume(){  try {    protocolHandler.resume();  } catch (  Exception e) {    log.error(sm.getString("coyoteConnector.protocolHandlerResumeFailed"),e);  }}  }
class C{  private void checkAndSetServiceType(String serviceTypeName) throws NameNotFoundException {  PolicyManager.initAdminSubject();  ServiceTypeManager stm=null;  try {    stm=ServiceTypeManager.getServiceTypeManager();    serviceType=stm.getServiceType(serviceTypeName);  } catch (  SSOException ssoe) {    PolicyManager.debug.error("Unable to get admin SSO token" + ssoe);    throw (new NameNotFoundException(ssoe,serviceTypeName,PolicyException.SERVICE));  }}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSNameIdentifierMappingRequest.signXML");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingRequest.signXML: " + "the request is already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingRequest.signXML: " + "null certAlias");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.REQUEST_ID,this.getRequestID(),false);    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;  } catch (  Exception e) {    FSUtils.debug.error("FSNameIdentifierMappingRequest.signXML: " + "unable to sign",e);    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public SQLNonTransientException(){}  }
class C{  public ConfigurationException(String message){  super(message);}  }
class C{  @Override public void addCookie(Cookie cookie){  this._getHttpServletResponse().addCookie(cookie);}  }
class C{  public Set createOrganizationalUnits(Set organizationalUnits) throws AMException, SSOException {  Iterator iter=organizationalUnits.iterator();  Set orgUnits=new HashSet();  while (iter.hasNext()) {    String orgUnitDN=AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMOrganizationalUnitImpl orgUnitImpl=new AMOrganizationalUnitImpl(super.token,orgUnitDN);    orgUnitImpl.create();    orgUnits.add(orgUnitImpl);  }  return orgUnits;}  }
class C{  public String toString(){  return this.toString(true,false);}  }
class C{  public void test_setEndRuleIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,Calendar.SUNDAY,0);  st.setEndRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("StartRule improperly set3",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setEndRule(12,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,10,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,-1,8,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,-10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(internalSubset01.class,args);}  }
class C{  public static String transformFileName(String from,String to,File file){  return transformFileName(from,to,file,DEFAULT_WILD_CARD);}  }
class C{  public ValidationResult isChoiceValid(String choice,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  boolean ignoreCase=getIgnoreCaseStat(props);  if ((choice != null) && (choice.length() > 0)) {    Iterator iter=props.entrySet().iterator();    while (iter.hasNext()) {      Map.Entry me=(Map.Entry)iter.next();      String key=(String)me.getKey();      if (key.startsWith(STR_VAL_MATCH_PATTERN)) {        String val=(String)me.getValue();        if (val != null) {          if (ignoreCase) {            if (choice.equalsIgnoreCase(val)) {              validRes=ValidationResultStatus.STATUS_SUCCESS;              Debug.log("ChoiceValidator:isChoiceValid(..) " + " comparing value = " + val + ", with choice "+ "="+ choice+ ", ignore case = "+ ignoreCase+ ", comparison result = "+ true);              break;            }          } else {            if (choice.equals(val)) {              validRes=ValidationResultStatus.STATUS_SUCCESS;              Debug.log("ChoiceValidator:isChoiceValid(..) " + " comparing value = " + val + ", with choice "+ "="+ choice+ ", ignore case = "+ ignoreCase+ ", comparison result = "+ true);              break;            }          }        }      }    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_CHOICE,new Object[]{choice});  } else {    returnMessage=LocalizedMessage.get(LOC_VA_MSG_VAL_CHOICE,new Object[]{choice});  }  Debug.log("ChoiceValidator:isChoiceValid(..) Is choice valid ? " + validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public CertificateVerifier(CertificateVerifier verifier){  this.verifier=verifier;}  }
class C{  public void resetModifications(){  mods.clear();}  }
class C{  public LockdowndServiceDescriptor startService(String identifier){  if (identifier == null) {    throw new NullPointerException("identifier");  }  LockdowndServiceDescriptorStructOut serviceOut=new LockdowndServiceDescriptorStructOut();  try {    checkResult(LibIMobileDevice.lockdownd_start_service(getRef(),identifier,serviceOut));    return new LockdowndServiceDescriptor(serviceOut.getValue());  }  finally {    LockdowndServiceDescriptorStruct d=serviceOut.getValue();    if (d != null) {      LibIMobileDevice.lockdownd_service_descriptor_free(d);    }    serviceOut.delete();  }}  }
class C{  public SortKey(String attrID,boolean ascendingOrder,String matchingRuleID){  this.attrID=attrID;  reverseOrder=(!ascendingOrder);  this.matchingRuleID=matchingRuleID;}  }
class C{  public void init(FilterConfig filterConfig) throws ServletException {  setFilterConfig(filterConfig);  servletCtx=filterConfig.getServletContext();  File file=new File(configFile);  if (file.exists()) {    setIDPDiscoveryConfig(configFile);  }}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static int calculateG(int baseG,int level){switch (level) {case 0:    return 238;case 1:  return baseG;case 2:return (int)(baseG * (35 + 59 + 104) / (32f + 35 + 59+ 104));case 3:return (int)(baseG * (59 + 104) / (32f + 35 + 59+ 104));case 4:return (int)(baseG * (104) / (32f + 35 + 59+ 104));default :return 238;}}  }
class C{  @Override public void recycle(){  attributes.clear();  setAuthType(null);  creationTime=0L;  expiring=false;  id=null;  lastAccessedTime=0L;  maxInactiveInterval=-1;  notes.clear();  setPrincipal(null);  isNew=false;  isValid=false;  manager=null;}  }
class C{  public PlaPointInt fortyfive_degree_corner(PlaPointInt p_to_point,boolean p_left_turn){  int dx=p_to_point.v_x - this.v_x;  int dy=p_to_point.v_y - this.v_y;  PlaPointInt result;  if (dy > 0 && dy < dx) {    if (p_left_turn) {      result=new PlaPointInt(p_to_point.v_x - dy,this.v_y);    } else {      result=new PlaPointInt(this.v_x + dy,p_to_point.v_y);    }  } else   if (dx > 0 && dy > dx) {    if (p_left_turn) {      result=new PlaPointInt(p_to_point.v_x,this.v_y + dx);    } else {      result=new PlaPointInt(this.v_x,p_to_point.v_y - dx);    }  } else   if (dx < 0 && dy > -dx) {    if (p_left_turn) {      result=new PlaPointInt(this.v_x,p_to_point.v_y + dx);    } else {      result=new PlaPointInt(p_to_point.v_x,this.v_y - dx);    }  } else   if (dy > 0 && dy < -dx) {    if (p_left_turn) {      result=new PlaPointInt(this.v_x - dy,p_to_point.v_y);    } else {      result=new PlaPointInt(p_to_point.v_x + dy,this.v_y);    }  } else   if (dy < 0 && dy > dx) {    if (p_left_turn) {      result=new PlaPointInt(p_to_point.v_x - dy,this.v_y);    } else {      result=new PlaPointInt(this.v_x + dy,p_to_point.v_y);    }  } else   if (dx < 0 && dy < dx) {    if (p_left_turn) {      result=new PlaPointInt(p_to_point.v_x,this.v_y + dx);    } else {      result=new PlaPointInt(this.v_x,p_to_point.v_y - dx);    }  } else   if (dx > 0 && dy < -dx) {    if (p_left_turn) {      result=new PlaPointInt(this.v_x,p_to_point.v_y + dx);    } else {      result=new PlaPointInt(p_to_point.v_x,this.v_y - dx);    }  } else   if (dy < 0 && dy > -dx) {    if (p_left_turn) {      result=new PlaPointInt(this.v_x - dy,p_to_point.v_y);    } else {      result=new PlaPointInt(p_to_point.v_x + dy,this.v_y);    }  } else {    result=null;  }  return result;}  }
class C{  void installBorder(JRootPane root){  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    LookAndFeel.uninstallBorder(root);  } else {    LookAndFeel.installBorder(root,borderKeys[style]);  }}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  try {    if (shouldIndent())     indent();    final java.io.Writer writer=m_writer;    writer.write('&');    writer.write(name);    writer.write(';');  } catch (  IOException e) {    throw new SAXException(e);  }  if (m_tracer != null)   super.fireEntityReference(name);}  }
class C{  public org.w3c.dom.Element signWithWSSSAMLTokenProfile(org.w3c.dom.Document doc,java.security.cert.Certificate cert,java.lang.String assertionID,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return sp.signWithWSSSAMLTokenProfile(doc,cert,assertionID,algorithm,ids);}  }
class C{  public void initialize(Map configParams){}  }
class C{  @Queries({@Query(operationDescription=@Operation(description=SESSION_RESOURCE + SERVER_QUERY_ID + "."+ ID_QUERY_DESCRIPTION,errors={@ApiError(code=401,description=SESSION_RESOURCE + ERROR_401_DESCRIPTION)},parameters=@Parameter(name=KEYWORD_SERVER_ID,type="string",description=SESSION_RESOURCE + SERVER_QUERY_ID + "."+ ID_QUERY+ KEYWORD_SERVER_ID+ "."+ PARAMETER_DESCRIPTION)),type=QueryType.ID,id=SERVER_QUERY_ID),@Query(operationDescription=@Operation(description=SESSION_RESOURCE + ALL_QUERY_ID + "."+ ID_QUERY_DESCRIPTION,errors={@ApiError(code=401,description=SESSION_RESOURCE + ERROR_401_DESCRIPTION)}),type=QueryType.ID,id=ALL_QUERY_ID)}) public Promise<QueryResponse,ResourceException> queryCollection(Context context,QueryRequest request,QueryResourceHandler handler){  String id=request.getQueryId();  if (KEYWORD_LIST.equals(id)) {    Collection<String> servers=generateListServers();    LOGGER.message("SessionResource.queryCollection() :: Retrieved list of servers for query.");    handler.handleResource(newResourceResponse(KEYWORD_LIST,String.valueOf(currentTimeMillis()),new JsonValue(servers)));  } else {    Collection<SessionInfo> sessions;    if (KEYWORD_ALL.equals(id)) {      sessions=sessionResourceUtil.generateAllSessions();      LOGGER.message("SessionResource.queryCollection() :: Retrieved list of sessions for query.");    } else {      if (SERVER_QUERY_ID.equals(id)) {        id=request.getAdditionalParameter(KEYWORD_SERVER_ID);      }      sessions=sessionResourceUtil.generateNamedServerSession(id);      LOGGER.message("SessionResource.queryCollection() :: Retrieved list of specified servers for query.");    }    for (    SessionInfo session : sessions) {      handler.handleResource(newResourceResponse("Sessions",String.valueOf(currentTimeMillis()),sessionResourceUtil.jsonValueOf(session)));    }  }  return newResultPromise(newQueryResponse());}  }
class C{  public boolean isOpaque(){  return path == null;}  }
class C{  public static boolean isEqual(byte[] digesta,byte[] digestb){  if (digesta == digestb)   return true;  if (digesta == null || digestb == null) {    return false;  }  if (digesta.length != digestb.length) {    return false;  }  int result=0;  for (int i=0; i < digesta.length; i++) {    result|=digesta[i] ^ digestb[i];  }  return result == 0;}  }
class C{  public void _write(OutputStream output){  output.write_Object(value);}  }
class C{  private static void appendHexChars(String dnString,StringBuilder valueString,StringBuilder hexChars) throws DirectoryException {  try {    byte[] hexBytes=hexStringToByteArray(hexChars.toString());    valueString.append(new String(hexBytes,"UTF-8"));    hexChars.delete(0,hexChars.length());  } catch (  Exception e) {    logger.traceException(e);    throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,ERR_ATTR_SYNTAX_DN_ATTR_VALUE_DECODE_FAILURE.get(dnString,e));  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("CallInfoParser.parse");  CallInfoList list=new CallInfoList();  try {    headerName(TokenTypes.CALL_INFO);    while (lexer.lookAhead(0) != '\n') {      CallInfo callInfo=new CallInfo();      callInfo.setHeaderName(SIPHeaderNames.CALL_INFO);      this.lexer.SPorHT();      this.lexer.match('<');      URLParser urlParser=new URLParser((Lexer)this.lexer);      GenericURI uri=urlParser.uriReference(true);      callInfo.setInfo(uri);      this.lexer.match('>');      this.lexer.SPorHT();      super.parse(callInfo);      list.add(callInfo);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        callInfo=new CallInfo();        this.lexer.SPorHT();        this.lexer.match('<');        urlParser=new URLParser((Lexer)this.lexer);        uri=urlParser.uriReference(true);        callInfo.setInfo(uri);        this.lexer.match('>');        this.lexer.SPorHT();        super.parse(callInfo);        list.add(callInfo);      }    }    return list;  }  finally {    if (debug)     dbg_leave("CallInfoParser.parse");  }}  }
class C{  public void doPreLogin(HttpServletRequest request,HttpServletResponse response){  try {    FSUtils.debug.message("FSPreLogin::Entered doPreLogin");    Cookie cookieArray[]=CookieUtils.getCookieArrayFromReq(request);    boolean isTokenValid=false;    boolean isFedCookie=true;    amserverURI=FSServiceUtils.getBaseURL(request);    postLoginURL=amserverURI + IFSConstants.POST_LOGIN_PAGE;    loginURL=amserverURI + IFSConstants.LOGIN_PAGE;    String gotoOnFedCookieNoURL=request.getParameter(IFSConstants.GOTO_ON_FEDCOOKIE_NO_URL);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSPreLogin::gotoOnFedCookieNoURL=" + gotoOnFedCookieNoURL);    }    String returnURL=null;    Map retMap=new HashMap();    String metaAlias=request.getParameter(IFSConstants.META_ALIAS);    Map cookieMap=getCookieMap(cookieArray);    setMetaInfo(metaAlias,request);    if (LibertyManager.isLECPProfile(request)) {      String headerName=LibertyManager.getLECPHeaderName();      String headerValue=request.getHeader(headerName);      response.setHeader(headerName,headerValue);    }    if (doLocalAuth) {      FSUtils.debug.message("FSPreLogin::doPreLogin. do local auth is true ");      returnURL=getLoginURL(false,metaAlias,request);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPreLogin::doPreLogin. returning with url " + returnURL);      }      response.sendRedirect(returnURL);      return;    }    if (cookieMap.containsKey(request)) {      isTokenValid=true;      FSUtils.debug.message("FSPreLogin::doPreLogin. OpenSSO Token is valid");    }    boolean isFedCookiePresent=false;    if (cookieMap.containsKey(fedCookieName)) {      isFedCookiePresent=true;      FSUtils.debug.message("FSPreLogin::doPreLogin. fedCookie is present");      if (((String)cookieMap.get(fedCookieName)).equalsIgnoreCase("no")) {        isFedCookie=false;        FSUtils.debug.message("FSPreLogin::doPreLogin. fedCookie is no");      }    }    String authLevelParam=request.getParameter(IFSConstants.AUTH_LEVEL_KEY);    if (authLevelParam != null) {      HttpSession httpSession=request.getSession();      httpSession.setAttribute(IFSConstants.AUTH_LEVEL_KEY,authLevelParam);    }    if (!isFedCookie) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPreLogin::doPreLogin." + "In case where ISToken invalid and" + "fedcookie no");      }      if (gotoOnFedCookieNoURL != null) {        response.sendRedirect(gotoOnFedCookieNoURL);      } else {        returnURL=getLoginURL(false,metaAlias,request);        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSPreLogin::doPreLogin. returning with url " + returnURL);        }        FSUtils.forwardRequest(request,response,returnURL);      }      return;    } else {      if (isTokenValid) {        if (authLevelParam != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSPreLogin::doPreLogin." + "In case where ISToken valid and " + "fedcookie yes and dolocalauth false and "+ "authLevel present");          }          retMap=createSSOMap(authLevelParam,metaAlias,isFedCookiePresent,request,response);          if (retMap != null) {            setResponse(response,retMap);            String responseData=(String)retMap.get(IFSConstants.RESPONSE_DATA_KEY);            if (responseData != null && responseData.length() != 0) {              response.getOutputStream().write(responseData.getBytes());              response.flushBuffer();            } else {              returnURL=(String)retMap.get(IFSConstants.URL_KEY);              if (FSUtils.debug.messageEnabled()) {                FSUtils.debug.message("FSPreLogin::doPreLogin." + "returning with url " + returnURL);              }              FSUtils.forwardRequest(request,response,returnURL);            }          }          return;        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSPreLogin::doPreLogin." + "In case where ISToken valid and" + "fedcookie yes and dolocalauth false and "+ "authLevel not present");          }          returnURL=getLoginURL(true,metaAlias,request);          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSPreLogin::doPreLogin." + "returning with url " + returnURL);          }          FSUtils.forwardRequest(request,response,returnURL);          return;        }      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSPreLogin::doPreLogin." + "In case where ISToken invalid and" + "fedcookie yes");        }        retMap=createSSOMap(authLevelParam,metaAlias,isFedCookiePresent,request,response);        if (retMap != null) {          setResponse(response,retMap);          String responseData=(String)retMap.get(IFSConstants.RESPONSE_DATA_KEY);          if (responseData != null && responseData.length() != 0) {            response.getOutputStream().write(responseData.getBytes());            response.flushBuffer();          } else {            returnURL=(String)retMap.get(IFSConstants.URL_KEY);            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSPreLogin::doPreLogin." + "returning with url " + returnURL);            }            FSUtils.forwardRequest(request,response,returnURL);          }        }        return;      }    }  } catch (  FSPreLoginException preLoginExp) {    FSUtils.debug.error("FSPreLogin::Exception in doPrelogin. ",preLoginExp);    sendError(request,response);  }catch (  Exception exp) {    FSUtils.debug.error("FSPreLogin::Exception in doPrelogin. ",exp);    sendError(request,response);  }}  }
class C{  public boolean accept(File f){  boolean shown=true;  if (f != null && fileFilter != null) {    shown=fileFilter.accept(f);  }  return shown;}  }
class C{  private static byte[] max(byte[] ip1,byte[] ip2){  for (int i=0; i < ip1.length; i++) {    if ((ip1[i] & 0xFFFF) > (ip2[i] & 0xFFFF)) {      return ip1;    }  }  return ip2;}  }
class C{  public StreamCorruptedException(String reason){  super(reason);}  }
class C{  public static void redirect(HttpServletResponse hres,PrintWriter out,String redirectUrl,Map pmap,String action) throws Exception {  if (action.equals("GET")) {    StringBuilder buf=null;    if (pmap != null) {      String query=queryStringFromMap(pmap);      buf=new StringBuilder();      buf.append(redirectUrl);      if (!redirectUrl.contains("?")) {        buf.append("?");      }      buf.append(query);    }    String finalRedirectUrl=redirectUrl;    if (buf != null)     finalRedirectUrl=buf.toString();    hres.sendRedirect(finalRedirectUrl);  } else {    String html=formFromMap(redirectUrl,pmap,true);    out.write(html);  }}  }
class C{  static <R extends ChronoLocalDate>ChronoZonedDateTime<R> ofBest(ChronoLocalDateTimeImpl<R> localDateTime,ZoneId zone,ZoneOffset preferredOffset){  Objects.requireNonNull(localDateTime,"localDateTime");  Objects.requireNonNull(zone,"zone");  if (zone instanceof ZoneOffset) {    return new ChronoZonedDateTimeImpl<>(localDateTime,(ZoneOffset)zone,zone);  }  ZoneRules rules=zone.getRules();  LocalDateTime isoLDT=LocalDateTime.from(localDateTime);  List<ZoneOffset> validOffsets=rules.getValidOffsets(isoLDT);  ZoneOffset offset;  if (validOffsets.size() == 1) {    offset=validOffsets.get(0);  } else   if (validOffsets.size() == 0) {    ZoneOffsetTransition trans=rules.getTransition(isoLDT);    localDateTime=localDateTime.plusSeconds(trans.getDuration().getSeconds());    offset=trans.getOffsetAfter();  } else {    if (preferredOffset != null && validOffsets.contains(preferredOffset)) {      offset=preferredOffset;    } else {      offset=validOffsets.get(0);    }  }  Objects.requireNonNull(offset,"offset");  return new ChronoZonedDateTimeImpl<>(localDateTime,offset,zone);}  }
class C{  public DHParameters generateParameters(){  BigInteger[] safePrimes=DHParametersHelper.generateSafePrimes(size,certainty,random);  BigInteger p=safePrimes[0];  BigInteger q=safePrimes[1];  BigInteger g=DHParametersHelper.selectGenerator(p,q,random);  return new DHParameters(p,g,q,TWO,null);}  }
class C{  public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  int node;  while (DTM.NULL != (node=iterator.nextNode())) {    addNodeInDocOrder(node,support);  }}  }
class C{  public PartOfSetValue(Integer count,Integer total){  this.count=count;  this.rawCount=count.toString();  this.total=total;  this.rawTotal=total.toString();  resetValueFromCounts();}  }
class C{  public HttpException(final String message){  super(message);}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanParameterInfo))   return false;  MBeanParameterInfo p=(MBeanParameterInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getType(),getType()) && Objects.equals(p.getDescription(),getDescription())&& Objects.equals(p.getDescriptor(),getDescriptor()));}  }
class C{  public Name composeName(Name name,Name prefix) throws NamingException {  return (Name)name.clone();}  }
class C{  private void extractID3v23Formats(final Date dateRecord,final int precision){  logger.fine("Precision is:" + precision + "for date:"+ dateRecord.toString());  Date d=dateRecord;  if (precision == PRECISION_YEAR) {    setYear(formatDateAsYear(d));  } else   if (precision == PRECISION_MONTH) {    setYear(formatDateAsYear(d));    setDate(formatDateAsDate(d));    monthOnly=true;  } else   if (precision == PRECISION_DAY) {    setYear(formatDateAsYear(d));    setDate(formatDateAsDate(d));  } else   if (precision == PRECISION_HOUR) {    setYear(formatDateAsYear(d));    setDate(formatDateAsDate(d));    setTime(formatDateAsTime(d));    hoursOnly=true;  } else   if (precision == PRECISION_MINUTE) {    setYear(formatDateAsYear(d));    setDate(formatDateAsDate(d));    setTime(formatDateAsTime(d));  } else   if (precision == PRECISION_SECOND) {    setYear(formatDateAsYear(d));    setDate(formatDateAsDate(d));    setTime(formatDateAsTime(d));  }}  }
class C{  public void recordAbstractMethodsForOverrideCheck_class(SClassDef c,List<SMethodDef> abstractMethods,List<SMethodDef> visitedMethods,Set<SInterfaceDef> visitedType) throws SyntaxException {  if (c == null || !c.modifiers().contains(SModifier.ABSTRACT))   return;  for (  SMethodDef m : c.methods()) {    if (m.modifiers().contains(SModifier.ABSTRACT)) {      if (null == findMethodWithSameSignature(m,visitedMethods,true)) {        abstractMethods.add(m);      }    }    visitedMethods.add(m);  }  recordAbstractMethodsForOverrideCheck_class(c.parent(),abstractMethods,visitedMethods,visitedType);  for (  SInterfaceDef i : c.superInterfaces()) {    recordAbstractMethodsForOverrideCheck_interface(i,abstractMethods,visitedMethods,visitedType);  }}  }
class C{  private int handleSC(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 2) == 'H') {    if (contains(value,index + 3,2,"OO","ER","EN","UY","ED","EM")) {      if (contains(value,index + 3,2,"ER","EN")) {        result.append("X","SK");      } else {        result.append("SK");      }    } else {      if (index == 0 && !isVowel(charAt(value,3)) && charAt(value,3) != 'W') {        result.append('X','S');      } else {        result.append('X');      }    }  } else   if (contains(value,index + 2,1,"I","E","Y")) {    result.append('S');  } else {    result.append("SK");  }  return index + 3;}  }
class C{  public AsfTagCoverField(final byte[] imageData,final int pictureType,final String description,final String mimeType){  super(new MetadataDescriptor(AsfFieldKey.COVER_ART.getFieldName(),MetadataDescriptor.TYPE_BINARY));  this.getDescriptor().setBinaryValue(createRawContent(imageData,pictureType,description,mimeType));}  }
class C{  public void notify_changed(BrdItem p_item){}  }
class C{  public boolean isCached(){  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(0,16);  childData=child.getData();  assertEquals("data","Dallas, Texas 98551",childData);}  }
class C{  public int countTokenEntries(TokenType tokenType) throws CoreTokenException {  final TokenFilter tokenFilter=new TokenFilterBuilder().returnAttribute(CoreTokenField.TOKEN_ID).and().withAttribute(CoreTokenField.TOKEN_TYPE,tokenType).build();  return store.attributeQuery(tokenFilter).size();}  }
class C{  public void printlnError(String str){  buff.append(str).append("\n");}  }
class C{  public void addFieldAppearanceToPage(PdfFormField field,PdfPage page){  PdfDictionary fieldDict=field.getPdfObject();  PdfArray kids=field.getKids();  if (kids == null || kids.size() > 1) {    return;  }  PdfDictionary kidDict=(PdfDictionary)kids.get(0);  PdfName type=kidDict.getAsName(PdfName.Subtype);  if (type != null && type.equals(PdfName.Widget)) {    if (!kidDict.containsKey(PdfName.FT)) {      mergeWidgetWithParentField(fieldDict,kidDict);    }    defineWidgetPageAndAddToIt(page,fieldDict,false);  }}  }
class C{  public void startFromRemoteRS(ReplServerStartMsg inReplServerStartMsg){  localGenerationId=-1;  oldGenerationId=-100;  try {    sslEncryption=processStartFromRemote(inReplServerStartMsg);    lockDomainWithTimeout();    if (replicationServerDomain.isAlreadyConnectedToRS(this)) {      abortStart(null);      return;    }    this.localGenerationId=replicationServerDomain.getGenerationId();    ReplServerStartMsg outReplServerStartMsg=sendStartToRemote();    logStartHandshakeRCVandSND(inReplServerStartMsg,outReplServerStartMsg);    if (!sslEncryption) {      session.stopEncryption();    }    TopologyMsg inTopoMsg=null;    if (getProtocolVersion() > ProtocolVersion.REPLICATION_PROTOCOL_V1) {      inTopoMsg=waitAndProcessTopoFromRemoteRS();      if (inTopoMsg == null) {        abortStart(null);        return;      }      TopologyMsg outTopoMsg=replicationServerDomain.createTopologyMsgForRS();      sendTopoInfo(outTopoMsg);      logTopoHandshakeRCVandSND(inTopoMsg,outTopoMsg);    } else {      if (generationId == localGenerationId) {        if (logger.isTraceEnabled()) {          logger.trace("In " + replicationServer.getMonitorInstanceName() + " "+ this+ " RS V1 with serverID="+ serverId+ " is connected with the right generation ID");        }      } else {        checkGenerationId();      }    }    replicationServerDomain.register(this);    if (inTopoMsg != null) {      replicationServerDomain.receiveTopoInfoFromRS(inTopoMsg,this,false);    }    logger.debug(INFO_REPLICATION_SERVER_CONNECTION_FROM_RS,getReplicationServerId(),getServerId(),replicationServerDomain.getBaseDN(),session.getReadableRemoteAddress());    super.finalizeStart();  } catch (  IOException e) {    logger.traceException(e);    abortStart(ERR_RS_DISCONNECTED_DURING_HANDSHAKE.get(inReplServerStartMsg.getServerId(),replicationServer.getServerId()));  }catch (  DirectoryException e) {    logger.traceException(e);    abortStart(e.getMessageObject());  }catch (  Exception e) {    logger.traceException(e);    abortStart(LocalizableMessage.raw(e.getLocalizedMessage()));  } finally {    releaseDomainLock();  }}  }
class C{  private String readUnicodeString(int length) throws java.io.IOException {  StringBuilder buf=new StringBuilder();  length/=2;  for (int k=0; k < length; ++k) {    buf.append(raf.readChar());  }  return buf.toString();}  }
class C{  @Override public boolean onOptionsItemSelected(final MenuItem item){  return super.onOptionsItemSelected(item);}  }
class C{  public int size(){  return super.size();}  }
class C{  public void testFlipBitLeftmostNegative(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=-1;  int number=48;  byte rBytes[]={-1,127,-57,-101,14,-36,-26,49};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static ServerSideSortRequestControl newControl(final boolean isCritical,final Collection<SortKey> keys){  Reject.ifNull(keys);  Reject.ifFalse(!keys.isEmpty(),"keys must not be empty");  return new ServerSideSortRequestControl(isCritical,Collections.unmodifiableList(new ArrayList<SortKey>(keys)));}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_util_Map(){  String test="Test string";  try {    AttributedString attrString=new AttributedString(test,new WeakHashMap<AttributedCharacterIterator.Attribute,String>());    AttributedCharacterIterator it=attrString.getIterator();    StringBuffer buf=new StringBuffer();    buf.append(it.first());    char ch;    while ((ch=it.next()) != CharacterIterator.DONE)     buf.append(ch);    assertTrue("Wrong string: " + buf,buf.toString().equals(test));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    Map<AttributedCharacterIterator.Attribute,String> whm=new WeakHashMap<AttributedCharacterIterator.Attribute,String>();    whm.put(new TestAttributedCharacterIteratorAttribute("test"),"value");    new AttributedString("",whm);    fail("Expected IllegalArgumentException was not thrown");  } catch (  Exception e) {  }}  }
class C{  public SearchResults search(SearchTemplate template,SearchControl searchControl) throws UMSException {  return search(template.getSearchFilter(),template.getAttributeSet().getAttributeNames(),searchControl);}  }
class C{  public boolean beginStaticTextHeaderDisplay(ChildDisplayEvent event){  return true;}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  public boolean isUserQuestionEnabled(String realmName){  Set values=getAttributeValues(realmName,PW_RESET_PERSONAL_ANSWER,AMAdminConstants.PW_RESET_SERVICE);  return ((String)AMAdminUtils.getValue(values)).equalsIgnoreCase("true");}  }
class C{  public int next(){  final int node=_currentNode;  _currentNode=NULL;  return returnNode(node);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof ID3v23Frame)) {    return false;  }  ID3v23Frame that=(ID3v23Frame)obj;  return EqualsUtil.areEqual(this.statusFlags,that.statusFlags) && EqualsUtil.areEqual(this.encodingFlags,that.encodingFlags) && super.equals(that);}  }
class C{  private void writePendingText() throws SAXException {  int len=textBuf.length();  if (len != 0)   writer.characters(textBuf.toString().toCharArray(),0,len);}  }
class C{  public void indent(int n) throws SAXException {}  }
class C{  public AllPermissionCollection(){  all_allowed=false;}  }
class C{  public void destroySession(Session requester,SessionID sessionToDestroy) throws SessionException {  if (sessionToDestroy == null) {    return;  }  sessionOperationStrategy.getOperation(sessionToDestroy).destroy(requester,resolveSession(sessionToDestroy));}  }
class C{  public boolean isPropertyValuePattern(String property){  if (property == null)   throw new NullPointerException("key property can't be null");  for (int i=0; i < _ca_array.length; i++) {    Property prop=_ca_array[i];    String key=prop.getKeyString(_canonicalName);    if (key.equals(property))     return (prop instanceof PatternProperty);  }  throw new IllegalArgumentException("key property not found");}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  Hashtable h=hashtableClone(ht100);  Integer key=new Integer(100);  h.put("Value 100",key);  assertTrue("Key/Value not inserted",h.size() == 1 && (h.contains(key)));  h=hashtableClone(htfull);  h.put("Value 100",key);  assertTrue("Key/Value not inserted into full table",h.size() == 8 && (h.contains(key)));  try {    h.put(null,key);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }  try {    h.put("Value 100",null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  private boolean isForceReset(AMIdentity user,String realm){  boolean forceReset=false;  try {    forceReset=isAttributeSet(realm,PASSWORD_RESET_FORCE_RESET);  } catch (  SSOException e) {    debug.warning("PWResetQuestionModelImpl.isForceReset",e);  }catch (  SMSException e) {    debug.error("PWResetQuestionModelImpl.isForceReset",e);  }  if (!forceReset) {    try {      Set set=user.getAttribute(USER_PASSWORD_RESET_FORCE_RESET);      String value=getFirstElement(set);      forceReset=(value != null) && value.equalsIgnoreCase(STRING_TRUE);    } catch (    SSOException e) {      debug.error("PWResetQuestionModelImpl.isForceReset",e);    }catch (    IdRepoException e) {      debug.error("PWResetQuestionModelImpl.isForceReset",e);    }  }  return forceReset;}  }
class C{  public ClosedSelectorException(){}  }
class C{  public <X extends Throwable>long orElseThrow(Supplier<X> exceptionSupplier) throws X {  if (isPresent) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  @Override public String toString(){  return content;}  }
class C{  @Override public void close() throws IOException {  super.close();  closed=true;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String validator=getStringOptionValue(ARGUMENT_VALIDATOR);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,validator};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_ATTRIBUTE_SCHEMA_VALIDATOR",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,validator,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_SET_ATTRIBUTE_SCHEMA_VALIDATOR",args);    }    attrSchema.setValidator(validator);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_ATTRIBUTE_SCHEMA_VALIDATOR",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-set-validator-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,validator,e.getMessage()};    debugError("SetAttributeSchemaValidator.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_VALIDATOR",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,validator,e.getMessage()};    debugError("SetAttributeSchemaValidator.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_VALIDATOR",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public NSObject objectForKey(String key){  return dict.get(key);}  }
class C{  public CMSSignedData generate(CMSProcessable content,boolean encapsulate,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  if (content instanceof CMSTypedData) {    return this.generate(((CMSTypedData)content).getContentType().getId(),content,encapsulate,sigProvider);  } else {    return this.generate(DATA,content,encapsulate,sigProvider);  }}  }
class C{  public StringRefAddr(String addrType,String addr){  super(addrType);  contents=addr;}  }
class C{  public MyProperty(PropertyDefinition<T> pd,Collection<T> defaultValues,Collection<T> activeValues){  this.d=pd;  SortedSet<T> sortedDefaultValues=new TreeSet<>(pd);  sortedDefaultValues.addAll(defaultValues);  this.defaultValues=Collections.unmodifiableSortedSet(sortedDefaultValues);  this.activeValues=new TreeSet<>(pd);  this.activeValues.addAll(activeValues);  this.pendingValues=new TreeSet<>(this.activeValues);}  }
class C{  public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {  if (top != frame.top) {    throw new AnalyzerException(null,"Incompatible stack heights");  }  boolean changes=false;  for (int i=0; i < locals + top; ++i) {    V v=interpreter.merge(values[i],frame.values[i]);    if (!v.equals(values[i])) {      values[i]=v;      changes=true;    }  }  return changes;}  }
class C{  public void iterateDeclaredPrefixes(PrefixCallback callback) throws SAXException {  for (Enumeration e=nss.getDeclaredPrefixes(); e.hasMoreElements(); ) {    String p=(String)e.nextElement();    String uri=nss.getURI(p);    callback.onPrefixMapping(p,uri);  }}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  @After public void afterTest(){  f.clearTestTables();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  String childName;  int length;  Node insertedNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expectedWithWhitespace=new java.util.ArrayList();  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("employeeId");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("name");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("position");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("newChild");  expectedWithWhitespace.add("salary");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("gender");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("address");  expectedWithWhitespace.add("#text");  java.util.List expectedWithoutWhitespace=new java.util.ArrayList();  expectedWithoutWhitespace.add("employeeId");  expectedWithoutWhitespace.add("name");  expectedWithoutWhitespace.add("position");  expectedWithoutWhitespace.add("newChild");  expectedWithoutWhitespace.add("salary");  expectedWithoutWhitespace.add("gender");  expectedWithoutWhitespace.add("address");  java.util.List expected=new java.util.ArrayList();  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  if (equals(6,length)) {    refChild=childList.item(3);    expected=expectedWithoutWhitespace;  } else {    refChild=childList.item(7);    expected=expectedWithWhitespace;  }  newChild=doc.createElement("newChild");  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN100DC=0; indexN100DC < childList.getLength(); indexN100DC++) {    child=(Node)childList.item(indexN100DC);    childName=child.getNodeName();    actual.add(childName);  }  assertEquals("nodeNames",expected,actual);}  }
class C{  private Triangle update(Pnt site,Set<Triangle> cavity){  Set<Set<Pnt>> boundary=new HashSet<Set<Pnt>>();  Set<Triangle> theTriangles=new HashSet<Triangle>();  for (  Triangle triangle : cavity) {    theTriangles.addAll(neighbors(triangle));    for (    Pnt vertex : triangle) {      Set<Pnt> facet=triangle.facetOpposite(vertex);      if (boundary.contains(facet))       boundary.remove(facet); else       boundary.add(facet);    }  }  theTriangles.removeAll(cavity);  for (  Triangle triangle : cavity)   triGraph.remove(triangle);  Set<Triangle> newTriangles=new HashSet<Triangle>();  for (  Set<Pnt> vertices : boundary) {    vertices.add(site);    Triangle tri=new Triangle(vertices);    triGraph.add(tri);    newTriangles.add(tri);  }  theTriangles.addAll(newTriangles);  for (  Triangle triangle : newTriangles)   for (  Triangle other : theTriangles)   if (triangle.isNeighbor(other))   triGraph.add(triangle,other);  return newTriangles.iterator().next();}  }
class C{  public static boolean isXML11ValidNCName(String ncName){  int length=ncName.length();  if (length == 0)   return false;  int i=1;  char ch=ncName.charAt(0);  if (!isXML11NCNameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=ncName.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=ncName.charAt(i);    if (!isXML11NCName(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=ncName.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCName(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  private LocalDateTime with(LocalDate newDate,LocalTime newTime){  if (date == newDate && time == newTime) {    return this;  }  return new LocalDateTime(newDate,newTime);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("TimeStampParser.parse");  TimeStamp timeStamp=new TimeStamp();  try {    headerName(TokenTypes.TIMESTAMP);    timeStamp.setHeaderName(SIPHeaderNames.TIMESTAMP);    this.lexer.SPorHT();    String firstNumber=this.lexer.number();    try {      if (lexer.lookAhead(0) == '.') {        this.lexer.match('.');        String secondNumber=this.lexer.number();        String s=firstNumber + "." + secondNumber;        float ts=Float.parseFloat(s);        timeStamp.setTimeStamp(ts);      } else {        long ts=Long.parseLong(firstNumber);        timeStamp.setTime(ts);      }    } catch (    NumberFormatException ex) {      throw createParseException(ex.getMessage());    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    if (lexer.lookAhead(0) != '\n') {      firstNumber=this.lexer.number();      try {        if (lexer.lookAhead(0) == '.') {          this.lexer.match('.');          String secondNumber=this.lexer.number();          String s=firstNumber + "." + secondNumber;          float ts=Float.parseFloat(s);          timeStamp.setDelay(ts);        } else {          int ts=Integer.parseInt(firstNumber);          timeStamp.setDelay(ts);        }      } catch (      NumberFormatException ex) {        throw createParseException(ex.getMessage());      }catch (      InvalidArgumentException ex) {        throw createParseException(ex.getMessage());      }    }  }  finally {    if (debug)     dbg_leave("TimeStampParser.parse");  }  return timeStamp;}  }
class C{  boolean sendToLocal(){  boolean remoteURLExists=false;  this.urls=session.getSessionEventURLs(eventType,serviceConfig.getLogoutDestroyBroadcast());  if (!urls.isEmpty()) {    for (    Map.Entry<String,Set<SessionID>> entry : urls.entrySet()) {      String url=entry.getKey();      try {        URL parsedUrl=new URL(url);        if (serverConfig.isLocalNotificationService(parsedUrl)) {          for (          SessionID sid : entry.getValue()) {            SessionInfo info=sessionInfoFactory.makeSessionInfo(session,sid);            SessionNotification notification=new SessionNotification(info,eventType.getCode(),currentTimeMillis());            SessionNotificationHandler.handler.processLocalNotification(notification);          }        } else {          remoteURLExists=true;        }      } catch (      Exception e) {        sessionDebug.error("Local Individual notification to " + url,e);      }    }  }  return remoteURLExists;}  }
class C{  private static int sameBaselineUpTo(Font font,char[] text,int start,int limit){  return limit;}  }
class C{  public void paintLabelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static String formatDateTime(long d){  return new SimpleDateFormat(DATETIME_FORMAT).format(d);}  }
class C{  public void testInit() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidAlgorithmParameterException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(b,"SHA1");  DHGenParameterSpec algPS=new DHGenParameterSpec(1,2);  PSSParameterSpec algPSS=new PSSParameterSpec(20);  SecretKeySpec sks1=new SecretKeySpec(b,"RSA");  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    try {      macs[i].init(sks1,algPSS);      fail("init(..) accepts incorrect AlgorithmParameterSpec parameter");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      macs[i].init(sks,algPS);      fail("init(..) accepts incorrect AlgorithmParameterSpec parameter");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      macs[i].init(null,null);      fail("InvalidKeyException must be thrown");    } catch (    InvalidKeyException e) {    }    try {      macs[i].init(null);      fail("InvalidKeyException must be thrown");    } catch (    InvalidKeyException e) {    }  }}  }
class C{  final public WritableRaster createCompatibleWritableRaster(int w,int h){  if ((w <= 0) || (h <= 0)) {    throw new IllegalArgumentException("Width (" + w + ") and height ("+ h+ ") cannot be <= 0");  }  int[] bandmasks;  if (supportsAlpha) {    bandmasks=new int[4];    bandmasks[3]=alpha_mask;  } else {    bandmasks=new int[3];  }  bandmasks[0]=red_mask;  bandmasks[1]=green_mask;  bandmasks[2]=blue_mask;  if (pixel_bits > 16) {    return Raster.createPackedRaster(DataBuffer.TYPE_INT,w,h,bandmasks,null);  } else   if (pixel_bits > 8) {    return Raster.createPackedRaster(DataBuffer.TYPE_USHORT,w,h,bandmasks,null);  } else {    return Raster.createPackedRaster(DataBuffer.TYPE_BYTE,w,h,bandmasks,null);  }}  }
class C{  public Object clone(){  IPv6Condition theClone=null;  try {    theClone=(IPv6Condition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  theClone.dnsList=(ArrayList)dnsList.clone();  theClone.ipList=(ArrayList)ipList.clone();  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  ElemContext elemContext=m_elemContext;  if (elemContext.m_startTagOpen) {    closeStartTag();    elemContext.m_startTagOpen=false;  } else   if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_needToOutputDocTypeDecl) {    String n=name;    if (n == null || n.length() == 0) {      n=localName;    }    outputDocTypeDecl(n);  }  if (null != namespaceURI && namespaceURI.length() > 0) {    super.startElement(namespaceURI,localName,name,atts);    return;  }  try {    ElemDesc elemDesc=getElemDesc2(name);    int elemFlags=elemDesc.getFlags();    if (m_doIndent) {      boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;      if (m_ispreserve)       m_ispreserve=false; else       if ((null != elemContext.m_elementName) && (!m_inBlockElem || isBlockElement)) {        m_startNewLine=true;        indent();      }      m_inBlockElem=!isBlockElement;    }    if (atts != null)     addAttributes(atts);    m_isprevtext=false;    final java.io.Writer writer=m_writer;    writer.write('<');    writer.write(name);    if (m_tracer != null)     firePseudoAttributes();    if ((elemFlags & ElemDesc.EMPTY) != 0) {      m_elemContext=elemContext.push();      m_elemContext.m_elementName=name;      m_elemContext.m_elementDesc=elemDesc;      return;    } else {      elemContext=elemContext.push(namespaceURI,localName,name);      m_elemContext=elemContext;      elemContext.m_elementDesc=elemDesc;      elemContext.m_isRaw=(elemFlags & ElemDesc.RAW) != 0;    }    if ((elemFlags & ElemDesc.HEADELEM) != 0) {      closeStartTag();      elemContext.m_startTagOpen=false;      if (!m_omitMetaTag) {        if (m_doIndent)         indent();        writer.write("<META http-equiv=\"Content-Type\" content=\"text/html; charset=");        String encoding=getEncoding();        String encode=Encodings.getMimeEncoding(encoding);        writer.write(encode);        writer.write("\">");      }    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public void findStream() throws IOException, CannotReadException {  if (raf.length() == 0) {    throw new CannotReadException("Error: File empty");  }  raf.seek(0);  if (isFlacHeader()) {    startOfFlacInFile=0;    return;  }  if (isId3v2Tag()) {    startOfFlacInFile=(int)(raf.getFilePointer() - FLAC_STREAM_IDENTIFIER_LENGTH);    return;  }  throw new CannotReadException(ErrorMessage.FLAC_NO_FLAC_HEADER_FOUND.getMsg());}  }
class C{  public Builder oid(final String oid){  this.oid=oid;  return this;}  }
class C{  public static void showImage(CaptureType captureType,ImageView imageView,Uri fileUri){  if (imageView == null) {    throw new RuntimeException("ImageView not set!");  }  if (fileUri == null) {    throw new NullPointerException("File uri not set!");  }  try {    imageView.setImageBitmap(captureType == CaptureType.CAPTURED_FROM_CAMERA ? getCapturedImageAsBitmap(fileUri) : getSelectedImageAsBitmap(fileUri));  } catch (  NullPointerException e) {    Log.e(TAG,"Failed to generate image bitmap!");    Log.e(TAG,e.getLocalizedMessage());  }}  }
class C{  public final void testGetEncoded01() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      byte[] enc=EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]);      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(enc);      assertTrue(Arrays.equals(enc,epki.getEncoded()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  void checkLabel(final Label label,final boolean checkVisited,final String msg){  if (label == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null)");  }  if (checkVisited && labels.get(label) == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must be visited first)");  }}  }
class C{  @Override @SuppressWarnings("all") protected Path createPath(int width,int height){  if (this.getLayoutParams().width == ViewGroup.LayoutParams.WRAP_CONTENT)   width=height;  if (this.getLayoutParams().height == ViewGroup.LayoutParams.WRAP_CONTENT)   height=width;  Path path=new Path();  RectF area=new RectF(0.0f,0.0f,width,height);  path.addArc(area,this.mAngleStart,this.mAngleSweep);  if (this.mAngleSweep == 360.0f || this.mAngleSweep == -360.0f) {    Matrix matrix=new Matrix();    matrix.postRotate(this.mAngleStart);    path.transform(matrix);  }  return path;}  }
class C{  public void reset(){  super.reset();  bodyContent=null;}  }
class C{  private boolean checkFirst(final byte[] msg){  boolean result=false;  for (int i=9; i < blockSize - 1; i++) {    if (msg[i] == 0x00) {      result=true;    }  }  return result;}  }
class C{  public void test_roll(){  Calendar calendar=Calendar.getInstance();  calendar.set(2008,3,20,17,28,12);  calendar.roll(Calendar.DATE,5);  assertEquals(25,calendar.get(Calendar.DATE));  calendar.roll(Calendar.DATE,-5);  assertEquals(20,calendar.get(Calendar.DATE));  calendar.roll(Calendar.DATE,0);  assertEquals(20,calendar.get(Calendar.DATE));  calendar.set(2008,1,31,17,28,12);  calendar.roll(Calendar.MONTH,1);  assertEquals(2,calendar.get(Calendar.DATE));}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public void checkIsoConformance(Object obj,IsoKey key,PdfResources resources){}  }
class C{  public static void main(String[] args){  try {    Set<String> files=new TreeSet<String>();    for (int i=0; i < args.length; i++) {      getXMLFiles(args[i],files);    }    new LogMessagesFormatter(files);  } catch (  ParserConfigurationException e) {    e.printStackTrace();  }catch (  SAXException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  boolean usedInContractSeq(int c){  return contractFlags.get(c) == 1;}  }
class C{  public void fireTreeExpanded(TreePath path){  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  if (uiTreeExpansionListener != null) {    e=new TreeExpansionEvent(this,path);    uiTreeExpansionListener.treeExpanded(e);  }  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeExpansionListener.class && listeners[i + 1] != uiTreeExpansionListener) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeExpansionListener)listeners[i + 1]).treeExpanded(e);    }  }}  }
class C{  public static boolean isAttributeType(SchemaElement element){  return element instanceof AttributeType;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String propertyName=e.getPropertyName();  if (propertyName == "horizontalScrollBar" || propertyName == "verticalScrollBar") {    if (e.getNewValue() instanceof JScrollBar) {      setScrollBarRelations((JScrollBar)e.getNewValue());    }  }}  }
class C{  public void writeFile(AudioFile f) throws CannotWriteException {  String ext=Utils.getExtension(f.getFile());  AudioFileWriter afw=writers.get(ext);  if (afw == null) {    throw new CannotWriteException(ErrorMessage.NO_WRITER_FOR_THIS_FORMAT.getMsg(ext));  }  afw.write(f);}  }
class C{  public boolean check(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_max_recursion_depth,int p_max_via_recursion_depth){  PlaVectorInt translate_vector=p_location.to_vector();  int calc_from_side_offset=r_board.get_min_trace_half_width();  LibPadstack via_padstack=p_via_info.get_padstack();  for (int index=via_padstack.from_layer(); index <= via_padstack.to_layer(); ++index) {    PlaShape curr_pad_shape=via_padstack.get_shape(index);    if (curr_pad_shape == null)     continue;    curr_pad_shape=(PlaShape)curr_pad_shape.translate_by(translate_vector);    ShapeTile tile_shape=curr_pad_shape.bounding_octagon();    BrdFromSide from_side=r_board.shove_pad_algo.calc_from_side(tile_shape,p_location,index,calc_from_side_offset,p_via_info.get_clearance_class());    if (r_board.shove_pad_algo.check_forced_pad(tile_shape,from_side,index,p_net_no_arr,p_via_info.get_clearance_class(),p_via_info.attach_smd_allowed(),null,p_max_recursion_depth,p_max_via_recursion_depth,false,null) == ShoveDrillResult.NOT_DRILLABLE) {      r_board.shove_fail_layer_set(index);      return false;    }  }  return true;}  }
class C{  public static KeyListener add(KeyListener a,KeyListener b){  return (KeyListener)addInternal(a,b);}  }
class C{  public void createStructure(){  MP3File.getStructureFormatter().openHeadingElement(TYPE_FRAME,getIdentifier());  MP3File.getStructureFormatter().addElement(TYPE_FRAME_SIZE,frameSize);  statusFlags.createStructure();  encodingFlags.createStructure();  frameBody.createStructure();  MP3File.getStructureFormatter().closeHeadingElement(TYPE_FRAME);}  }
class C{  @Override public Object run() throws ClientException, LDAPException {  if (saslMechanism == null) {    LocalizableMessage message=ERR_LDAPAUTH_NONSASL_RUN_INVOCATION.get(getBacktrace());    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message);  } else   if (saslMechanism.equals(SASL_MECHANISM_GSSAPI)) {    doSASLGSSAPI2();    return null;  } else {    LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_RUN_INVOCATION.get(saslMechanism,getBacktrace());    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message);  }}  }
class C{  private static void addOverrides(MappedMember method){  if (method.getFirstOverride() != null) {    return;  }  MappedClass mappedClass=method.getOwner();  List<MappedMember> methodOverridens=new ArrayList<MappedMember>();  MappedClass parent=mappedClass.getParent();  if (parent != null) {    MappedMember parentMethod=ParentUtils.findMethodInParentInclusive(parent,method.getOriginalName(),method.getDesc(),true);    if (parentMethod != null) {      methodOverridens.add(parentMethod);    }  }  for (  MappedClass interfacee : mappedClass.getInterfaces()) {    MappedMember interfaceMethod=ParentUtils.findMethodInParentInclusive(interfacee,method.getOriginalName(),method.getDesc(),true);    if (interfaceMethod != null) {      methodOverridens.add(interfaceMethod);    }  }  for (  MappedMember override : methodOverridens) {    addOverrides(override);    if (!method.getOverrides().contains(override)) {      method.addOverride(override);      override.addMemberThatOverridesMe(method);      method.setIsLibrary(override.isLibrary());    }  }}  }
class C{  private Point2D zoom(double p_factor,Point2D p_location){  final int max_panel_size=10000000;  Dimension old_size=getSize();  Point2D old_center=get_viewport_center();  if (p_factor > 1 && Math.max(old_size.getWidth(),old_size.getHeight()) >= max_panel_size) {    return p_location;  }  int new_width=(int)Math.round(p_factor * old_size.getWidth());  int new_height=(int)Math.round(p_factor * old_size.getHeight());  Dimension new_size=new Dimension(new_width,new_height);  itera_board.gdi_context.change_panel_size(new_size);  setPreferredSize(new_size);  setSize(new_size);  revalidate();  Point2D new_cursor=new Point2D.Double(p_location.getX() * p_factor,p_location.getY() * p_factor);  double dx=new_cursor.getX() - p_location.getX();  double dy=new_cursor.getY() - p_location.getY();  Point2D new_center=new Point2D.Double(old_center.getX() + dx,old_center.getY() + dy);  Point2D adjustment_vector=set_viewport_center(new_center);  repaint();  Point2D adjusted_new_cursor=new Point2D.Double(new_cursor.getX() + adjustment_vector.getX() + 0.5,new_cursor.getY() + adjustment_vector.getY() + 0.5);  return adjusted_new_cursor;}  }
class C{  public void preDeregister() throws java.lang.Exception {}  }
class C{  private void reduceScrollSpeed(double speed,int headerVisible){  mRecyclerView.stopScroll();  int distToStop=minDistanceToScrollBack;  mScroller.setScrollVector(getDecelVector(headerVisible));  mScroller.setTargetPosition(getDecelTargetPos(headerVisible));  mScroller.setDistanceToStop(distToStop);  mScroller.setInitialSpeed((float)Math.abs(speed));  mLayoutManager.startSmoothScroll(mScroller);}  }
class C{  void verify(){  byte[] d=digest.digest();  if (!MessageDigest.isEqual(d,Base64.decode(hash))) {    throw invalidDigest(JarFile.MANIFEST_NAME,name,jarName);  }  verifiedEntries.put(name,certificates);}  }
class C{  public _IDLTypeStub(org.omg.CORBA.portable.Delegate delegate){  super();  _set_delegate(delegate);}  }
class C{  public void doubleBufferingChanged(JRootPane rootPane){}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s2_linear_with_both_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  @SuppressWarnings("unchecked") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,0,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSAuthnRequest.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.signXML: " + "the assertion is " + "already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.REQUEST_ID,this.getRequestID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public Operation nextOperation(TraditionalWorkerThread workerThread){  return retryNextOperation(workerThread,0);}  }
class C{  public void test_read_writeShort() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeShort(Short.MIN_VALUE);  raf.writeShort('T');  raf.writeShort(Short.MAX_VALUE);  raf.writeShort(Short.MIN_VALUE - 1);  raf.writeShort(Short.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Short.MIN_VALUE,raf.readShort());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readShort());  assertEquals("Test 3: Incorrect value written or read;",Short.MAX_VALUE,raf.readShort());  assertEquals("Test 4: Incorrect value written or read;",0x7fff,raf.readShort());  assertEquals("Test 5: Incorrect value written or read;",(short)0x8000,raf.readShort());  try {    raf.readShort();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeShort('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readShort();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public LDAPListener(final int port,final ServerConnectionFactory<LDAPClientContext,Integer> factory,final Options options) throws IOException {  Reject.ifNull(factory,options);  this.provider=getTransportProvider(options);  this.impl=provider.getLDAPListener(new InetSocketAddress(port),factory,options);}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,true);}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public LoginConfig(){  super();}  }
class C{  protected AttributeList defAttributeList(String name,int type,int modifier,String value,String values,AttributeList atts){  Vector<String> vals=null;  if (values != null) {    vals=new Vector<String>();    for (StringTokenizer s=new StringTokenizer(values,"|"); s.hasMoreTokens(); ) {      String str=s.nextToken();      if (str.length() > 0) {        vals.addElement(str);      }    }  }  return new AttributeList(name,type,modifier,value,vals,atts);}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void collide(){  if (hitStats == 0) {    hitStats=1;    Main.powerup_appear.play();  }}  }
class C{  public RelativeRedirectUriException(){  super(400,"relative_redirect_uri","The redirection URI provided is not absolute.");}  }
class C{  public SQLDataException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  private int read1(char[] cbuf,int off,int len) throws IOException {  if (nextChar >= nChars) {    if (len >= cb.length && markedChar <= UNMARKED && !skipLF) {      return in.read(cbuf,off,len);    }    fill();  }  if (nextChar >= nChars)   return -1;  if (skipLF) {    skipLF=false;    if (cb[nextChar] == '\n') {      nextChar++;      if (nextChar >= nChars)       fill();      if (nextChar >= nChars)       return -1;    }  }  int n=Math.min(len,nChars - nextChar);  System.arraycopy(cb,nextChar,cbuf,off,n);  nextChar+=n;  return n;}  }
class C{  public Object clone(){  DSAMERole theClone=null;  try {    theClone=(DSAMERole)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (subjectRoles != null) {    theClone.subjectRoles=new HashSet();    theClone.subjectRoles.addAll(subjectRoles);  }  return theClone;}  }
class C{  public String toString(){  return representation;}  }
class C{  public void postSingleFile(Context context,Handler h,Map<String,String> postParams,String fileParam,String fileName,String fileType,InputStream inputStream){  if (!hasNet(context)) {    doFailed(h,NO_NETWORK);    return;  }  ThreadPoolManager.getInstance().addTask(null);}  }
class C{  public String encode(){  return new StringBuffer(this.headerName).append(COLON).append(SP).append(this.value).append(NEWLINE).toString();}  }
class C{  public void notationDecl(String name,String pubID,String sysID) throws SAXException {  try {    DTDprolog();    m_writer.write("<!NOTATION ");    m_writer.write(name);    if (pubID != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(pubID);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(sysID);    }    m_writer.write("\" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public BindResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs,ByteString serverSASLCredentials){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;  this.serverSASLCredentials=serverSASLCredentials;}  }
class C{  public final String readLineOfInput(final LocalizableMessage prompt) throws ClientException {  if (prompt != null) {    out.print(wrap(prompt));    out.print(" ");  }  try {    final String s=reader.readLine();    if (s == null) {      throw ClientException.adaptInputException(new EOFException("End of input"));    }    return s;  } catch (  final IOException e) {    throw ClientException.adaptInputException(e);  }}  }
class C{  public AndFileFilter(){  this.fileFilters=new ArrayList<IOFileFilter>();}  }
class C{  public void testIsError(){  assertFalse(CoderResult.UNDERFLOW.isError());  assertFalse(CoderResult.OVERFLOW.isError());  assertTrue(CoderResult.malformedForLength(1).isError());  assertTrue(CoderResult.unmappableForLength(1).isError());}  }
class C{  public PlaLineIntAlist plaline_skip(int p_from_no,int p_to_no){  PlaLineIntAlist new_lines=new PlaLineIntAlist(plaline_len());  if (p_from_no < 0 || p_to_no > plaline_len(-1) || p_from_no > p_to_no) {    return new_lines;  }  alist_append_to(new_lines,0,p_from_no);  alist_append_to(new_lines,p_to_no + 1);  return new_lines;}  }
class C{  public int depth(){  if (elementStack == null) {    return 0;  }  return elementStack.size();}  }
class C{  private void checkEglError(String msg){  int error;  if ((error=EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {    throw new RuntimeException(msg + ": EGL error: 0x" + Integer.toHexString(error));  }}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length || count == 0) {    throw new InvalidCipherTextException("pad block corrupted");  }  for (int i=1; i <= count; i++) {    if (in[in.length - i] != count) {      throw new InvalidCipherTextException("pad block corrupted");    }  }  return count;}  }
class C{  public AddressingFeature(boolean enabled){  this(enabled,false,Responses.ALL);}  }
class C{  public void test_setFloatLjava_lang_ObjectIF(){  float[] x={0.0f};  boolean thrown=false;  try {    Array.setFloat(x,0,(float)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getFloat(x,0),0.0);  try {    Array.setFloat(new Object(),0,(float)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setFloat(x,4,(float)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setFloat(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public final void initSign(PrivateKey privateKey,SecureRandom random) throws InvalidKeyException {  engineInitSign(privateKey,random);  state=SIGN;  if (!skipDebug && pdebug != null) {    pdebug.println("Signature." + algorithm + " signing algorithm from: "+ this.provider.getName());  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public final int indexOf(Object elem){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  private static boolean match(String pattern,char[] strArr,boolean caseSensitive){  char[] patArr=pattern.toCharArray();  int patIdxStart=0;  int patIdxEnd=patArr.length - 1;  int strIdxStart=0;  int strIdxEnd=strArr.length - 1;  char ch;  boolean containsStar=false;  for (int i=0; i < patArr.length; i++) {    if (patArr[i] == '*') {      containsStar=true;      break;    }  }  if (!containsStar) {    if (patIdxEnd != strIdxEnd) {      return false;    }    for (int i=0; i <= patIdxEnd; i++) {      ch=patArr[i];      if (ch != '?') {        if (different(caseSensitive,ch,strArr[i])) {          return false;        }      }    }    return true;  }  if (patIdxEnd == 0) {    return true;  }  while (true) {    ch=patArr[patIdxStart];    if (ch == '*' || strIdxStart > strIdxEnd) {      break;    }    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxStart])) {        return false;      }    }    patIdxStart++;    strIdxStart++;  }  if (strIdxStart > strIdxEnd) {    return allStars(patArr,patIdxStart,patIdxEnd);  }  while (true) {    ch=patArr[patIdxEnd];    if (ch == '*' || strIdxStart > strIdxEnd) {      break;    }    if (ch != '?') {      if (different(caseSensitive,ch,strArr[strIdxEnd])) {        return false;      }    }    patIdxEnd--;    strIdxEnd--;  }  if (strIdxStart > strIdxEnd) {    return allStars(patArr,patIdxStart,patIdxEnd);  }  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {    int patIdxTmp=-1;    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {      if (patArr[i] == '*') {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == patIdxStart + 1) {      patIdxStart++;      continue;    }    int patLength=(patIdxTmp - patIdxStart - 1);    int strLength=(strIdxEnd - strIdxStart + 1);    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        ch=patArr[patIdxStart + j + 1];        if (ch != '?') {          if (different(caseSensitive,ch,strArr[strIdxStart + i + j])) {            continue strLoop;          }        }      }      foundIdx=strIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    patIdxStart=patIdxTmp;    strIdxStart=foundIdx + patLength;  }  return allStars(patArr,patIdxStart,patIdxEnd);}  }
class C{  private void createNewTaskBackingFile() throws InitializationException {  String backingFile=taskBackend.getTaskBackingFile();  LDIFExportConfig exportConfig=new LDIFExportConfig(backingFile,ExistingFileBehavior.OVERWRITE);  try {    LDIFWriter writer=new LDIFWriter(exportConfig);    writer.writeComment(INFO_TASKBE_BACKING_FILE_HEADER.get(),80);    taskRootEntry=createEntry(taskBackend.getTaskRootDN());    writer.writeEntry(taskRootEntry);    scheduledTaskParentEntry=createEntry(taskBackend.getScheduledTasksParentDN());    writer.writeEntry(scheduledTaskParentEntry);    recurringTaskParentEntry=createEntry(taskBackend.getRecurringTasksParentDN());    writer.writeEntry(recurringTaskParentEntry);    writer.close();  } catch (  IOException ioe) {    logger.traceException(ioe);    LocalizableMessage message=ERR_TASKSCHED_CANNOT_CREATE_BACKING_FILE.get(backingFile,stackTraceToSingleLineString(ioe));    throw new InitializationException(message,ioe);  }catch (  LDIFException le) {    logger.traceException(le);    LocalizableMessage message=ERR_TASKSCHED_CANNOT_CREATE_BACKING_FILE.get(backingFile,le.getMessage());    throw new InitializationException(message,le);  }}  }
class C{  public XPathExpressionException(String message){  super(message);}  }
class C{  public void paintScrollBarThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public LoginTimeOutException(String rbName,String errCode,Object[] args){  super(rbName,errCode,args);}  }
class C{  @DataProvider(name="createCompareAttributes") public Object[][] createCompareAttributes(){  return new Object[][]{{1,Attributes.empty(cnType),Attributes.empty(cnType),true},{2,Attributes.empty(cnType,"CN"),Attributes.empty(cnType,"cn"),true},{3,Attributes.empty(cnType),Attributes.empty("CN"),true},{4,Attributes.empty("cn"),Attributes.empty("cn"),true},{5,Attributes.empty("cn"),Attributes.empty("CN"),true},{6,Attributes.empty("CN"),Attributes.empty("cn"),true},{7,Attributes.empty("CN"),Attributes.empty("description"),false},{8,Attributes.empty("description"),Attributes.empty("cn"),false},{9,Attributes.create("CN","test"),Attributes.create("cn","test"),true},{10,Attributes.create("description","test"),Attributes.create("cn","test"),false},{11,Attributes.create("cn","test1"),Attributes.create("cn","test2"),false},{12,Attributes.create("CN","test"),Attributes.create("cn","TEST"),true},{13,Attributes.empty("cn"),Attributes.create("cn","TEST"),false},{14,createAttribute(cnType,"cn",noOptions,noValues),createAttribute(cnType,"cn",oneOption,noValues),false},{15,createAttribute(cnType,"cn",noOptions,noValues),createAttribute(cnType,"cn",twoOptions,noValues),false},{16,createAttribute(cnType,"cn",oneOption,noValues),createAttribute(cnType,"cn",oneOption,noValues),true},{17,createAttribute(cnType,"cn",twoOptions,noValues),createAttribute(cnType,"cn",twoOptions,noValues),true},{18,createAttribute(cnType,"cn",oneOption,noValues),createAttribute(cnType,"cn",noOptions,noValues),false},{19,createAttribute(cnType,"cn",twoOptions,noValues),createAttribute(cnType,"cn",noOptions,noValues),false},{20,createAttribute(cnType,"cn",noOptions,noValues),createAttribute(cnType,"cn",noOptions,oneValue),false},{21,createAttribute(cnType,"cn",noOptions,oneValue),createAttribute(cnType,"cn",noOptions,noValues),false},{22,createAttribute(cnType,"cn",noOptions,noValues),createAttribute(cnType,"cn",noOptions,twoValues),false},{23,createAttribute(cnType,"cn",noOptions,twoValues),createAttribute(cnType,"cn",noOptions,noValues),false},{24,createAttribute(cnType,"cn",noOptions,oneValue),createAttribute(cnType,"cn",noOptions,twoValues),false},{25,createAttribute(cnType,"cn",noOptions,twoValues),createAttribute(cnType,"cn",noOptions,oneValue),false},{26,createAttribute(cnType,"cn",oneOption,oneValue),createAttribute(cnType,"cn",oneOption,oneValue),true},{27,createAttribute(cnType,"cn",twoOptions,twoValues),createAttribute(cnType,"cn",twoOptions,twoValues),true}};}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS01.class,args);}  }
class C{  public final void testGetParams(){  assertEquals("wrong params value",params,ecpks.getParams());}  }
class C{  public static String calculateITableName(Index index){  return calculateITableName(index.getDatabaseName(),index.getTableName(),index.getName());}  }
class C{  public void warn(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {  warn(srcLctr,styleNode,sourceNode,msg,null);}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return getService().dynamicQueryCount(dynamicQuery,projection);}  }
class C{  public static void displayWarningDialog(Component parentComponent,LocalizableMessage title,LocalizableMessage msg){  String plainText=msg.toString().replaceAll("<br>",ServerConstants.EOL);  String wrappedText=wrapText(plainText,70);  wrappedText=wrappedText.replaceAll(ServerConstants.EOL,"<br>");  JOptionPane.showMessageDialog(parentComponent,"<html>" + wrappedText,title.toString(),JOptionPane.WARNING_MESSAGE);}  }
class C{  public static boolean verifyResponse(Response response,String requestUrl,HttpServletRequest request){  if (!response.isSignatureValid()) {    debug.message("verifyResponse: Response's signature is invalid.");    return false;  }  String recipient=response.getRecipient();  if ((recipient == null) || (recipient.length() == 0) || ((!equalURL(recipient,requestUrl)) && (!equalURL(recipient,getLBURL(requestUrl,request))))) {    debug.error("verifyResponse : Incorrect Recipient.");    return false;  }  if (!response.getStatus().getStatusCode().getValue().endsWith(SAMLConstants.STATUS_CODE_SUCCESS_NO_PREFIX)) {    debug.error("verifyResponse : Incorrect StatusCode value.");    return false;  }  return true;}  }
class C{  protected Object readResolve() throws ObjectStreamException {  EnumSyntax[] theTable=getEnumValueTable();  if (theTable == null) {    throw new InvalidObjectException("Null enumeration value table for class " + getClass());  }  int theOffset=getOffset();  int theIndex=value - theOffset;  if (0 > theIndex || theIndex >= theTable.length) {    throw new InvalidObjectException("Integer value = " + value + " not in valid range "+ theOffset+ ".."+ (theOffset + theTable.length - 1)+ "for class "+ getClass());  }  EnumSyntax result=theTable[theIndex];  if (result == null) {    throw new InvalidObjectException("No enumeration value for integer value = " + value + "for class "+ getClass());  }  return result;}  }
class C{  public static JEditorPane makeHtmlPane(CharSequence text,Font font){  JEditorPane pane=new JEditorPane();  pane.setContentType("text/html");  pane.setFont(font);  if (text != null) {    pane.setText(applyFont(text,font));  }  pane.setEditable(false);  pane.setBorder(new EmptyBorder(0,0,0,0));  pane.setOpaque(false);  pane.setFocusCycleRoot(false);  return pane;}  }
class C{  private SOAPHeader addCorrelationHeader(SOAPMessage msg,Message req) throws SOAPBindingException {  try {    SOAPHeader header=msg.getSOAPPart().getEnvelope().getHeader();    if (header == null) {      header=msg.getSOAPPart().getEnvelope().addHeader();    }    CorrelationHeader cHeader=new CorrelationHeader();    correlationId=cHeader.getId();    if (req != null) {      cHeader.setRefToMessageID(req.getCorrelationHeader().getMessageID());    }    cHeader.addToParent(header);    return header;  } catch (  Exception ex) {    Utils.debug.error("MessageProcessor.addCorrealtionHeader: " + "Could not add correlation header",ex);    throw new SOAPBindingException(Utils.bundle.getString("cannotAddCorrelationHeader"));  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof PrivilegeSubject)) {    return false;  }  PrivilegeSubject sbj=(PrivilegeSubject)o;  if ((state == null) && (sbj.state == null)) {    return true;  }  if ((state == null) && (sbj.state != null)) {    return false;  }  if ((state != null) && (sbj.state == null)) {    return false;  }  return state.equals(sbj.state);}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  boolean roleMatch=false;  String userLocalDN=token.getPrincipal().getName();  if (selectedRFCRoleDNs.size() > 0) {    SearchResultEntry userEntry=null;    Set userRoles=null;    String tokenID=token.getTokenID().toString();    Iterator items=selectedRFCRoleDNs.iterator();    while (items.hasNext()) {      String roleName=(String)items.next();      Boolean matchFound=null;      if ((matchFound=SubjectEvaluationCache.isMember(tokenID,ldapServer,roleName)) != null) {        if (debug.messageEnabled()) {          debug.message("LDAPRoles.isMember():Got membership " + "from cache of " + userLocalDN + " in LDAP role "+ roleName+ " :"+ matchFound.booleanValue());        }        boolean result=matchFound.booleanValue();        if (result) {          return result;        } else {          continue;        }      }      if (debug.messageEnabled()) {        debug.message("LDAPRoles.isMember():did not find entry " + " for " + roleName + " in SubjectEvaluation "+ "cache,  getting from LDAPRole cache");      }      if (userEntry == null) {        userEntry=getUserEntry(token);        if (userEntry == null) {          if (debug.messageEnabled()) {            debug.message("LDAPRoles.isMember(): User " + userLocalDN + " is not found in the directory");          }          return false;        }      }      if (userRoles == null) {        userRoles=getUserRoles(token,userEntry);      }      if (!PolicyEvaluator.ssoListenerRegistry.containsKey(tokenID)) {        try {          token.addSSOTokenListener(PolicyEvaluator.ssoListener);          PolicyEvaluator.ssoListenerRegistry.put(tokenID,PolicyEvaluator.ssoListener);          if (debug.messageEnabled()) {            debug.message("LDAPRoles.isMember(): sso listener added .\n");          }        } catch (        SSOTokenListenersUnsupportedException ex) {          debug.message("LDAPRoles.isMember(): could not add sso listener: {}",ex.getMessage());        }      }      if ((userRoles != null) && userRoles.size() > 0) {        if (userRoles.contains(roleName)) {          roleMatch=true;        }      }      if (debug.messageEnabled()) {        String member=(roleMatch) ? "is member of" : "is not a member of";        debug.message("LDAPRoles.isMember(): User " + userLocalDN + " "+ member+ " the LDAPRole "+ roleName+ ", adding to Subject eval cache");      }      SubjectEvaluationCache.addEntry(tokenID,ldapServer,roleName,roleMatch);      if (roleMatch) {        break;      }    }  }  if (debug.messageEnabled()) {    if (!roleMatch) {      debug.message("LDAPRoles.isMember(): User " + userLocalDN + " is not a member of this LDAPRoles object");    } else {      debug.message("LDAPRoles.isMember(): User " + userLocalDN + " is a member of this LDAPRoles object");    }  }  return roleMatch;}  }
class C{  public boolean isSuperUser(String dn){  return LazyConfig.superUserIdentity.getUniversalId().equalsIgnoreCase(dn);}  }
class C{  public ConsoleApplication(PrintStream out,PrintStream err){  this.out=out;  this.err=err;}  }
class C{  @DataProvider(name="persistentSearchControl") public Object[][] createPasswordPolicyResponseControlData(){  return new Object[][]{{true,false,true},{false,false,false}};}  }
class C{  @Override public void init(ServletConfig config) throws ServletException {  super.init(config);  cgiPathPrefix=getServletConfig().getInitParameter("cgiPathPrefix");  boolean passShellEnvironment=Boolean.parseBoolean(getServletConfig().getInitParameter("passShellEnvironment"));  if (passShellEnvironment) {    shellEnv.putAll(System.getenv());  }  if (getServletConfig().getInitParameter("executable") != null) {    cgiExecutable=getServletConfig().getInitParameter("executable");  }  if (getServletConfig().getInitParameter("executable-arg-1") != null) {    List<String> args=new ArrayList<>();    for (int i=1; ; i++) {      String arg=getServletConfig().getInitParameter("executable-arg-" + i);      if (arg == null) {        break;      }      args.add(arg);    }    cgiExecutableArgs=args;  }  if (getServletConfig().getInitParameter("parameterEncoding") != null) {    parameterEncoding=getServletConfig().getInitParameter("parameterEncoding");  }  if (getServletConfig().getInitParameter("stderrTimeout") != null) {    stderrTimeout=Long.parseLong(getServletConfig().getInitParameter("stderrTimeout"));  }  if (getServletConfig().getInitParameter("envHttpHeaders") != null) {    envHttpHeadersPattern=Pattern.compile(getServletConfig().getInitParameter("envHttpHeaders"));  }}  }
class C{  @Override public int lengthOfMonth(){  return chrono.getMonthLength(prolepticYear,monthOfYear);}  }
class C{  public static CipherParameters makePBEMacParameters(PBEKeySpec keySpec,int type,int hash,int keySize){  PBEParametersGenerator generator=makePBEGenerator(type,hash);  byte[] key;  CipherParameters param;  key=convertPassword(type,keySpec);  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());  param=generator.generateDerivedMacParameters(keySize);  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionElement createAssertionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AssertionElementImpl();}  }
class C{  private void encodeStubInAddress(RMIServer rmiServer,Map<String,?> attributes) throws IOException {  final String protocol, host;  final int port;  if (address == null) {    if (IIOPHelper.isStub(rmiServer))     protocol="iiop"; else     protocol="rmi";    host=null;    port=0;  } else {    protocol=address.getProtocol();    host=(address.getHost().equals("")) ? null : address.getHost();    port=address.getPort();  }  final String urlPath=encodeStub(rmiServer,attributes);  address=new JMXServiceURL(protocol,host,port,urlPath);}  }
class C{  public boolean visitLiteralResultElement(ElemLiteralResult elem){  return true;}  }
class C{  public static void validateWReplyURL(String orgName,String hostEntityId,String wreply,String role) throws WSFederationException {  if (wreply != null && !wreply.isEmpty()) {    if (!WREPLY_VALIDATOR.isRedirectUrlValid(wreply,ValidWReplyExtractor.WSFederationEntityInfo.from(orgName,hostEntityId,role))) {      throw new WSFederationException(WSFederationUtils.bundle.getString("invalidWReplyUrl"));    }  }}  }
class C{  public static void toUpperCase(byte[] b,StringBuilder buffer,boolean trim){  if (b == null) {    return;  }  int length=b.length;  for (int i=0; i < length; i++) {    if ((b[i] & 0x7F) != b[i]) {      try {        buffer.append(new String(b,i,(length - i),"UTF-8").toUpperCase());      } catch (      Exception e) {        logger.traceException(e);        buffer.append(new String(b,i,(length - i)).toUpperCase());      }      break;    }    int bufferLength=buffer.length();switch (b[i]) {case ' ':      if (trim && bufferLength == 0) {        break;      }    buffer.append(' ');  break;case 'a':buffer.append('A');break;case 'b':buffer.append('B');break;case 'c':buffer.append('C');break;case 'd':buffer.append('D');break;case 'e':buffer.append('E');break;case 'f':buffer.append('F');break;case 'g':buffer.append('G');break;case 'h':buffer.append('H');break;case 'i':buffer.append('I');break;case 'j':buffer.append('J');break;case 'k':buffer.append('K');break;case 'l':buffer.append('L');break;case 'm':buffer.append('M');break;case 'n':buffer.append('N');break;case 'o':buffer.append('O');break;case 'p':buffer.append('P');break;case 'q':buffer.append('Q');break;case 'r':buffer.append('R');break;case 's':buffer.append('S');break;case 't':buffer.append('T');break;case 'u':buffer.append('U');break;case 'v':buffer.append('V');break;case 'w':buffer.append('W');break;case 'x':buffer.append('X');break;case 'y':buffer.append('Y');break;case 'z':buffer.append('Z');break;default :buffer.append((char)b[i]);}}if (trim) {for (int i=buffer.length() - 1; i > 0; i--) {if (buffer.charAt(i) == ' ') {buffer.delete(i,i + 1);} else {break;}}}}  }
class C{  public void test_transferTo_couldDelete() throws Exception {  writeDataToFile(fileOfReadOnlyFileChannel);  writeDataToFile(fileOfWriteOnlyFileChannel);  readOnlyFileChannel.transferTo(0,2,writeOnlyFileChannel);  readOnlyFileChannel.close();  writeOnlyFileChannel.close();  boolean rDel=fileOfReadOnlyFileChannel.delete();  boolean wDel=fileOfWriteOnlyFileChannel.delete();  assertTrue("File " + readOnlyFileChannel + " exists",rDel);  assertTrue("File " + writeOnlyFileChannel + " exists",wDel);}  }
class C{  public static List<Foo> findByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().findByUuid_C(uuid,companyId);}  }
class C{  public static void fill(short[] a,short val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public EditorContainer(){  setLayout(null);}  }
class C{  public SOAPElement create(String localName,String prefix,String uri) throws SOAPException {  return soapFactory.createElement(localName,prefix,uri);}  }
class C{  public void addChangeListener(ChangeListener listener){  if (modelListener == null) {    modelListener=new ModelListener();    getModel().addChangeListener(modelListener);  }  listenerList.add(ChangeListener.class,listener);}  }
class C{  public static void reload(){  server.reload();}  }
class C{  public void shutdownOutput() throws IOException {  if (isClosed())   throw new SocketException("Socket is closed");  if (!isConnected())   throw new SocketException("Socket is not connected");  if (isOutputShutdown())   throw new SocketException("Socket output is already shutdown");  getImpl().shutdownOutput();  shutOut=true;}  }
class C{  public void parse(String[] lines,List<LocalizableMessage> warnings) throws InitializationException, MakeLDIFException {  LinkedHashMap<String,Tag> templateFileIncludeTags=new LinkedHashMap<>();  LinkedHashMap<String,String> templateFileConstants=new LinkedHashMap<>();  LinkedHashMap<DN,Branch> templateFileBranches=new LinkedHashMap<>();  LinkedHashMap<String,Template> templateFileTemplates=new LinkedHashMap<>();  for (int lineNumber=0; lineNumber < lines.length; lineNumber++) {    String line=lines[lineNumber];    line=replaceConstants(line,lineNumber,templateFileConstants,warnings);    String lowerLine=toLowerCase(line);    if (line.length() == 0 || line.startsWith("#")) {      continue;    } else     if (lowerLine.startsWith("include ")) {      String className=line.substring(8).trim();      Class<?> tagClass;      try {        tagClass=Class.forName(className);      } catch (      Exception e) {        LocalizableMessage message=ERR_MAKELDIF_CANNOT_LOAD_TAG_CLASS.get(className);        throw new MakeLDIFException(message,e);      }      Tag tag;      try {        tag=(Tag)tagClass.newInstance();      } catch (      Exception e) {        LocalizableMessage message=ERR_MAKELDIF_CANNOT_INSTANTIATE_TAG.get(className);        throw new MakeLDIFException(message,e);      }      String lowerName=toLowerCase(tag.getName());      if (registeredTags.containsKey(lowerName) || templateFileIncludeTags.containsKey(lowerName)) {        LocalizableMessage message=ERR_MAKELDIF_CONFLICTING_TAG_NAME.get(className,tag.getName());        throw new MakeLDIFException(message);      }      templateFileIncludeTags.put(lowerName,tag);    } else     if (lowerLine.startsWith("define ")) {      int equalPos=line.indexOf('=',7);      if (equalPos < 0) {        LocalizableMessage message=ERR_MAKELDIF_DEFINE_MISSING_EQUALS.get(lineNumber);        throw new MakeLDIFException(message);      }      String name=line.substring(7,equalPos).trim();      if (name.length() == 0) {        LocalizableMessage message=ERR_MAKELDIF_DEFINE_NAME_EMPTY.get(lineNumber);        throw new MakeLDIFException(message);      }      String lowerName=toLowerCase(name);      if (templateFileConstants.containsKey(lowerName)) {        LocalizableMessage message=ERR_MAKELDIF_CONFLICTING_CONSTANT_NAME.get(name,lineNumber);        throw new MakeLDIFException(message);      }      String value=line.substring(equalPos + 1);      if (value.length() == 0) {        LocalizableMessage message=ERR_MAKELDIF_WARNING_DEFINE_VALUE_EMPTY.get(name,lineNumber);        warnings.add(message);      }      templateFileConstants.put(lowerName,value);    } else     if (lowerLine.startsWith("branch: ")) {      int startLineNumber=lineNumber;      ArrayList<String> lineList=new ArrayList<>();      lineList.add(line);      while (true) {        lineNumber++;        if (lineNumber >= lines.length) {          break;        }        line=lines[lineNumber];        if (line.length() == 0) {          break;        }        line=replaceConstants(line,lineNumber,templateFileConstants,warnings);        lineList.add(line);      }      String[] branchLines=new String[lineList.size()];      lineList.toArray(branchLines);      Branch b=parseBranchDefinition(branchLines,lineNumber,templateFileIncludeTags,warnings);      DN branchDN=b.getBranchDN();      if (templateFileBranches.containsKey(branchDN)) {        LocalizableMessage message=ERR_MAKELDIF_CONFLICTING_BRANCH_DN.get(branchDN,startLineNumber);        throw new MakeLDIFException(message);      }      templateFileBranches.put(branchDN,b);    } else     if (lowerLine.startsWith("template: ")) {      int startLineNumber=lineNumber;      ArrayList<String> lineList=new ArrayList<>();      lineList.add(line);      while (true) {        lineNumber++;        if (lineNumber >= lines.length) {          break;        }        line=lines[lineNumber];        if (line.length() == 0) {          break;        }        line=replaceConstants(line,lineNumber,templateFileConstants,warnings);        lineList.add(line);      }      String[] templateLines=new String[lineList.size()];      lineList.toArray(templateLines);      Template t=parseTemplateDefinition(templateLines,startLineNumber,templateFileIncludeTags,templateFileTemplates,warnings);      String lowerName=toLowerCase(t.getName());      if (templateFileTemplates.containsKey(lowerName)) {        LocalizableMessage message=ERR_MAKELDIF_CONFLICTING_TEMPLATE_NAME.get(t.getName(),startLineNumber);        throw new MakeLDIFException(message);      }      templateFileTemplates.put(lowerName,t);    } else {      LocalizableMessage message=ERR_MAKELDIF_UNEXPECTED_TEMPLATE_FILE_LINE.get(line,lineNumber);      throw new MakeLDIFException(message);    }  }  for (  Branch b : templateFileBranches.values()) {    b.completeBranchInitialization(templateFileTemplates);  }  for (  Template t : templateFileTemplates.values()) {    t.completeTemplateInitialization(templateFileTemplates);  }  registeredTags.putAll(templateFileIncludeTags);  constants.putAll(templateFileConstants);  branches.putAll(templateFileBranches);  templates.putAll(templateFileTemplates);}  }
class C{  public <V>V post(final String uri,final Object params,final Type type) throws IOException {  HttpURLConnection request=createPost(uri);  return sendJson(request,params,type);}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (super.canTraverseOutsideSubtree())   return true; else {    int n=m_args.length;    for (int i=0; i < n; i++) {      if (m_args[i].canTraverseOutsideSubtree())       return true;    }    return false;  }}  }
class C{  public static ScrollPaneBorderListener createFullBorderListener(JScrollPane scroll){  ScrollPaneBorderListener listener=createBottomBorderListener(scroll);  listener.etchedBorder=BorderFactory.createMatteBorder(1,1,1,1,ColorAndFontConstants.defaultBorderColor);  return listener;}  }
class C{  private static boolean isNameChar(char ch){  return (ch <= 0xFF && xmlNameChars[ch]) || isNameStartChar(ch) || (ch >= 0x300 && ch <= 0x36F)|| (ch >= 0x203F && ch <= 0x2040);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);  TestCaseUtils.dsconfig("set-global-configuration-prop","--add","allowed-task:org.opends.server.tasks.DummyTask");}  }
class C{  static void resetSelectedUI(){  AppContext.getAppContext().remove(SELECTED_UI_KEY);}  }
class C{  private synchronized void cleanupState(){  sourceIds=null;  targets=null;  if (executor != null) {    executor.shutdown();    executor=null;  }}  }
class C{  public E lastElement(){  return delegate.lastElement();}  }
class C{  public READER(String mimeType){  super(mimeType,"java.io.Reader");}  }
class C{  public static String escapeSom(String s){  if (s == null)   return "";  int idx=s.indexOf('.');  if (idx < 0)   return s;  StringBuilder sb=new StringBuilder();  int last=0;  while (idx >= 0) {    sb.append(s.substring(last,idx));    sb.append('\\');    last=idx;    idx=s.indexOf('.',idx + 1);  }  sb.append(s.substring(last));  return sb.toString();}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  @NonNull public static Animator createCircularReveal(@NonNull Point center,int width,@NonNull View targetView,@NonNull Interpolator interpolator){  final Animator circularReveal=ViewAnimationUtils.createCircularReveal(targetView,center.x,center.y,width,(float)Math.hypot(center.x,center.y));  circularReveal.setInterpolator(interpolator);  return circularReveal;}  }
class C{  public boolean isSynthetic(){  return testAllFlags(SYNTHETIC);}  }
class C{  public void addObserver(final FileAlterationObserver observer){  if (observer != null) {    observers.add(observer);  }}  }
class C{  public SQLClientInfoException(){  this.failedProperties=null;}  }
class C{  public void testGetInstanceStringProvider02() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i],provider);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  static public XObject create(Object val){  XObject result;  if (val instanceof XObject) {    result=(XObject)val;  } else   if (val instanceof String) {    result=new XString((String)val);  } else   if (val instanceof Boolean) {    result=new XBoolean((Boolean)val);  } else   if (val instanceof Double) {    result=new XNumber(((Double)val));  } else {    result=new XObject(val);  }  return result;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public InvalidPasswordException(String rbName,String errCode,Object[] args){  super(rbName,errCode,args);}  }
class C{  public String readEntry(String folderName,int folderId) throws Exception {  String dbName=FolderUtils.getDbName(folderId);  ZipEntry folderEntry=zip.getEntry(dbName);  if (folderEntry == null) {    throw new Exception();  }  ParseData parseData=new ParseData();  parseData.destName=FolderUtils.newDbName(context,mIgnoreDbNames);  parseData.folderName=folderName;  parseData.srcEntry=folderEntry;  mIgnoreDbNames.add(parseData.destName);  mParsedList.add(parseData);  return parseData.destName;}  }
class C{  public SimpleLabelProvider(Class<T> type,String getText,String getIcon){  getTextMethod=findAnyMethod(type,getText);  getIconMethod=findAnyMethod(type,getIcon);}  }
class C{  private void createCopyFielsNode(final Element rootElement){  Element element=creator.getDocument().createElement("CopyFiles");  element.setAttribute("copied",String.valueOf(this.filesCopied));  element.setAttribute("copiedTotal",String.valueOf(this.copiedAll + this.filesCopied));  rootElement.appendChild(element);}  }
class C{  private static boolean removeSchemaChildren(XMPNode schemaNode,boolean doAllProperties){  for (Iterator it=schemaNode.iterateChildren(); it.hasNext(); ) {    XMPNode currProp=(XMPNode)it.next();    if (doAllProperties || !Utils.isInternalProperty(schemaNode.getName(),currProp.getName())) {      it.remove();    }  }  return !schemaNode.hasChildren();}  }
class C{  public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException {  final XPathContext xctxt=transformer.getXPathContext();  final int sourceNode=xctxt.getCurrentNode();  DTMIterator sourceNodes=m_selectExpression.asIterator(xctxt,sourceNode);  try {    final Vector keys=(m_sortElems == null) ? null : transformer.processSortKeys(this,sourceNode);    if (null != keys)     sourceNodes=sortNodes(xctxt,keys,sourceNodes);    xctxt.pushCurrentNode(DTM.NULL);    IntStack currentNodes=xctxt.getCurrentNodeStack();    xctxt.pushCurrentExpressionNode(DTM.NULL);    IntStack currentExpressionNodes=xctxt.getCurrentExpressionNodeStack();    xctxt.pushSAXLocatorNull();    xctxt.pushContextNodeList(sourceNodes);    transformer.pushElemTemplateElement(null);    DTM dtm=xctxt.getDTM(sourceNode);    int docID=sourceNode & DTMManager.IDENT_DTM_DEFAULT;    int child;    while (DTM.NULL != (child=sourceNodes.nextNode())) {      currentNodes.setTop(child);      currentExpressionNodes.setTop(child);      if ((child & DTMManager.IDENT_DTM_DEFAULT) != docID) {        dtm=xctxt.getDTM(child);        docID=child & DTMManager.IDENT_DTM_DEFAULT;      }      final int nodeType=dtm.getNodeType(child);      for (ElemTemplateElement t=this.m_firstChild; t != null; t=t.m_nextSibling) {        xctxt.setSAXLocator(t);        transformer.setCurrentElement(t);        t.execute(transformer);      }      if (m_doc_cache_off) {        if (DEBUG)         System.out.println("JJK***** CACHE RELEASE *****\n" + "\tdtm=" + dtm.getDocumentBaseURI());        xctxt.getSourceTreeManager().removeDocumentFromCache(dtm.getDocument());        xctxt.release(dtm,false);      }    }  }  finally {    xctxt.popSAXLocator();    xctxt.popContextNodeList();    transformer.popElemTemplateElement();    xctxt.popCurrentExpressionNode();    xctxt.popCurrentNode();    sourceNodes.detach();  }}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public final void pushSubContextList(SubContextList iter){  m_axesIteratorStack.push(iter);}  }
class C{  private void deallocate(boolean noNewStreams,boolean released,boolean streamFinished){  RealConnection connectionToClose=null;synchronized (connectionPool) {    if (streamFinished) {      this.stream=null;    }    if (released) {      this.released=true;    }    if (connection != null) {      if (noNewStreams) {        connection.noNewStreams=true;      }      if (this.stream == null && (this.released || connection.noNewStreams)) {        release(connection);        if (connection.streamCount > 0) {          routeSelector=null;        }        if (connection.allocations.isEmpty()) {          connection.idleAtNanos=System.nanoTime();          if (Internal.instance.connectionBecameIdle(connectionPool,connection)) {            connectionToClose=connection;          }        }        connection=null;      }    }  }  if (connectionToClose != null) {    Util.closeQuietly(connectionToClose.getSocket());  }}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public Object clone(){  ParameterBlock theClone;  try {    theClone=(ParameterBlock)super.clone();  } catch (  Exception e) {    return null;  }  if (sources != null) {    theClone.setSources((Vector)sources.clone());  }  if (parameters != null) {    theClone.setParameters((Vector)parameters.clone());  }  return (Object)theClone;}  }
class C{  public PathFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public int versionBuildNumber(){  return Integer.valueOf(properties.getProperty("version.build"));}  }
class C{  public void modify(String tokenID,String objName,String mods) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::modify dn: " + objName);  }  SMSEntry entry=new SMSEntry(getToken(tokenID),objName);  entry.modifyAttributes(getModItems(mods));  entry.save();}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    return;  }  changeSupport.removePropertyChangeListener(listener);}  }
class C{  @Override public void removeMembershipListener(){  listener=null;}  }
class C{  public void putResponse(String responseId,JsonValue json){  Reject.ifNull(responseId);  Reject.ifNull(json);  responses.put(responseId,json.toString());}  }
class C{  public void clear(){synchronized (mapBundles) {    mapBundles.clear();  }}  }
class C{  public String retryFilterMethodName(String key){  return privateMethodName(Name.from(key).join("retry").join("filter"));}  }
class C{  private void updateStyleAndText(){  updateStyleImp(style);  if (attr != null) {    mText=WXAttr.getValue(attr);  }}  }
class C{  public boolean is_stop_requested(){  if (stoppable == null)   return false;  return stoppable.is_stop_requested();}  }
class C{  public String toString(int units,String unitsName){  StringBuffer result=new StringBuffer();  result.append(getX(units));  result.append('x');  result.append(getY(units));  if (unitsName != null) {    result.append(' ');    result.append(unitsName);  }  return result.toString();}  }
class C{  public PdfPage addNewPage(int index){  return addNewPage(index,getDefaultPageSize());}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509IssuerSerial createX509DataTypeX509IssuerSerial() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509IssuerSerialImpl();}  }
class C{  public void invalidateConnection(final Connection connection) throws IllegalStateException {  if (connection == null) {    return;  }  if (connectionPool == null) {    throw new IllegalStateException("Cannot invalidate connection: ConnectionPool is null.");  }  final PoolableConnection poolableConnection;  try {    poolableConnection=connection.unwrap(PoolableConnection.class);    if (poolableConnection == null) {      throw new IllegalStateException("Cannot invalidate connection: Connection is not a poolable connection.");    }  } catch (  final SQLException e) {    throw new IllegalStateException("Cannot invalidate connection: Unwrapping poolable connection failed.",e);  }  try {    connectionPool.invalidateObject(poolableConnection);  } catch (  final Exception e) {    throw new IllegalStateException("Invalidating connection threw unexpected exception",e);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ProviderIDElement createProviderIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ProviderIDElementImpl();}  }
class C{  public Query whereContains(Contact.Field field,Object value){  addNewConstraint(field,Where.contains(field.getColumn(),value));  return this;}  }
class C{  public List<ODocument> query(final String type,QueryRequest request,final ODatabaseDocumentTx database) throws BadRequestException {  final Map<String,String> params=new HashMap<String,String>(request.getAdditionalParameters());  params.put(QueryConstants.RESOURCE_NAME,OrientDBRepoService.typeToOrientClassName(type));  params.putAll(getPagingParameters(request));  if (request.getQueryId() == null && request.getQueryExpression() == null && request.getQueryFilter() == null) {    throw new BadRequestException("Either " + QueryConstants.QUERY_ID + ", "+ QueryConstants.QUERY_EXPRESSION+ ", or "+ QueryConstants.QUERY_FILTER+ " to identify/define a query must be passed in the parameters. "+ params);  }  final QueryInfo<OSQLSynchQuery<ODocument>> queryInfo;  try {    queryInfo=findQueryInfo(type,params,request.getQueryId(),request.getQueryExpression(),request.getQueryFilter());  } catch (  IllegalArgumentException e) {    throw new BadRequestException("The passed identifier " + request.getQueryId() + " does not match any configured queries on the OrientDB repository service.");  }  List<ODocument> result=null;  logger.debug("Evaluate query {}",queryInfo.getQueryString());  Name eventName=getEventName(request.getQueryId(),request.getQueryExpression());  EventEntry measure=Publisher.start(eventName,queryInfo,null);  try {    result=doTokenSubsitutionQuery(queryInfo,params,database);    measure.setResult(result);  } catch (  OQueryParsingException firstTryEx) {    logger.debug("Failed to resolve and parse the query {} with params: {}",queryInfo.getQueryString(),params,firstTryEx);    throw new BadRequestException("Failed to resolve and parse the query.");  }catch (  IllegalArgumentException ex) {    logger.debug("Query is invalid: {} {}",queryInfo.getQueryString(),ex.getMessage(),ex);    throw new BadRequestException("Query is invalid.");  }catch (  OException ex) {    logger.debug("Error executing DB command {} {}",queryInfo.getQueryString(),ex.getMessage(),ex);    throw new BadRequestException("Error executing DB command.");  }catch (  RuntimeException ex) {    logger.warn("Unexpected failure during DB query: {}",ex.getMessage());    throw ex;  } finally {    measure.end();  }  return result;}  }
class C{  @Override public int hashCode(){  int hash=LangUtils.HASH_SEED;  hash=LangUtils.hashCode(hash,this.defaultPort);  hash=LangUtils.hashCode(hash,this.name);  hash=LangUtils.hashCode(hash,this.layered);  hash=LangUtils.hashCode(hash,this.socketFactory);  return hash;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  public AMSearchResults searchUsers(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchUsers(wildcard,null,searchControl);}  }
class C{  private Class<?> findDexClass(String name) throws TestFailed, InvocationTargetException {  Object dexFile=null;  Class dexClass=null;  try {    try {      dexClass=ClassLoader.getSystemClassLoader().loadClass("dalvik.system.DexFile");      Constructor ctor=dexClass.getConstructor(new Class[]{String.class});      dexFile=ctor.newInstance(DEX_FILE);      Method meth=dexClass.getMethod("loadClass",new Class[]{String.class,ClassLoader.class});      meth.invoke(dexFile,name,this);    }  finally {      if (dexFile != null) {        Method meth=dexClass.getMethod("close",(Class[])null);        meth.invoke(dexFile);      }    }  } catch (  NoSuchMethodException nsme) {    throw new TestFailed(nsme);  }catch (  InstantiationException ie) {    throw new TestFailed(ie);  }catch (  IllegalAccessException iae) {    throw new TestFailed(iae);  }catch (  ClassNotFoundException cnfe) {    throw new TestFailed(cnfe);  }  return null;}  }
class C{  public static final boolean isRectangleContainingRectangle(Rectangle a,Rectangle b){  return b.x >= a.x && (b.x + b.width) <= (a.x + a.width) && b.y >= a.y && (b.y + b.height) <= (a.y + a.height);}  }
class C{  public UnbindRequestProtocolOp(){}  }
class C{  private void checkWarningCount(AMAccountLockout amAccountLockout){  try {    int warningCount=amAccountLockout.getWarnUserCount();    if (warningCount == 0) {      lockoutMsg=ISAuthConstants.EMPTY_STRING;    } else {      if (warningCount < 0) {        accountLocked=true;      } else {        String lockoutMsgFmt=bundle.getString("lockOutWarning");        Object[] params=new Object[1];        params[0]=new Integer(warningCount);        lockoutMsg=MessageFormat.format(lockoutMsgFmt,params);        authContext.getLoginState().setLockoutMsg(lockoutMsg);        accountLocked=false;      }    }    if (debug.messageEnabled()) {      debug.message("WARNING COUNT : " + warningCount);      debug.message("WARNING COUNT MESSAGE: " + lockoutMsg);    }  } catch (  Exception e) {    debug.message("Error : ",e);  }}  }
class C{  public NodeTest(int whatToShow,String namespace,String name){  initNodeTest(whatToShow,namespace,name);}  }
class C{  private void validateFilterMap(FilterMap filterMap){  String filterName=filterMap.getFilterName();  String[] servletNames=filterMap.getServletNames();  String[] urlPatterns=filterMap.getURLPatterns();  if (findFilterDef(filterName) == null)   throw new IllegalArgumentException(sm.getString("standardContext.filterMap.name",filterName));  if (!filterMap.getMatchAllServletNames() && !filterMap.getMatchAllUrlPatterns() && (servletNames.length == 0)&& (urlPatterns.length == 0))   throw new IllegalArgumentException(sm.getString("standardContext.filterMap.either"));  for (int i=0; i < urlPatterns.length; i++) {    if (!validateURLPattern(urlPatterns[i])) {      throw new IllegalArgumentException(sm.getString("standardContext.filterMap.pattern",urlPatterns[i]));    }  }}  }
class C{  public void save_for_undo(UndoObjectStorable p_object){  disable_redo();  UndoObjectNode curr_node=objects_map.get(p_object);  if (curr_node == null) {    System.out.println("UndoableObjects.save_for_undo: object node not found");    return;  }  if (curr_node.undo_level < stack_level) {    UndoObjectNode old_node=new UndoObjectNode((UndoObjectStorable)p_object.copy(),curr_node.undo_level);    old_node.undo_object=curr_node.undo_object;    old_node.redo_object=curr_node;    curr_node.undo_object=old_node;    curr_node.undo_level=stack_level;    return;  }}  }
class C{  public JspProperty findJspProperty(String uri){  init();  if (jspProperties == null || uri.endsWith(".tag") || uri.endsWith(".tagx")) {    return defaultJspProperty;  }  String uriPath=null;  int index=uri.lastIndexOf('/');  if (index >= 0) {    uriPath=uri.substring(0,index + 1);  }  String uriExtension=null;  index=uri.lastIndexOf('.');  if (index >= 0) {    uriExtension=uri.substring(index + 1);  }  Collection<String> includePreludes=new ArrayList<>();  Collection<String> includeCodas=new ArrayList<>();  JspPropertyGroup isXmlMatch=null;  JspPropertyGroup elIgnoredMatch=null;  JspPropertyGroup scriptingInvalidMatch=null;  JspPropertyGroup pageEncodingMatch=null;  JspPropertyGroup deferedSyntaxAllowedAsLiteralMatch=null;  JspPropertyGroup trimDirectiveWhitespacesMatch=null;  JspPropertyGroup defaultContentTypeMatch=null;  JspPropertyGroup bufferMatch=null;  JspPropertyGroup errorOnUndeclaredNamespaceMatch=null;  Iterator<JspPropertyGroup> iter=jspProperties.iterator();  while (iter.hasNext()) {    JspPropertyGroup jpg=iter.next();    JspProperty jp=jpg.getJspProperty();    String extension=jpg.getExtension();    String path=jpg.getPath();    if (extension == null) {      if (!uri.equals(path)) {        continue;      }    } else {      if (path != null && uriPath != null && !uriPath.startsWith(path)) {        continue;      }      if (!extension.equals("*") && !extension.equals(uriExtension)) {        continue;      }    }    if (jp.getIncludePrelude() != null) {      includePreludes.addAll(jp.getIncludePrelude());    }    if (jp.getIncludeCoda() != null) {      includeCodas.addAll(jp.getIncludeCoda());    }    if (jp.isXml() != null) {      isXmlMatch=selectProperty(isXmlMatch,jpg);    }    if (jp.isELIgnored() != null) {      elIgnoredMatch=selectProperty(elIgnoredMatch,jpg);    }    if (jp.isScriptingInvalid() != null) {      scriptingInvalidMatch=selectProperty(scriptingInvalidMatch,jpg);    }    if (jp.getPageEncoding() != null) {      pageEncodingMatch=selectProperty(pageEncodingMatch,jpg);    }    if (jp.isDeferedSyntaxAllowedAsLiteral() != null) {      deferedSyntaxAllowedAsLiteralMatch=selectProperty(deferedSyntaxAllowedAsLiteralMatch,jpg);    }    if (jp.isTrimDirectiveWhitespaces() != null) {      trimDirectiveWhitespacesMatch=selectProperty(trimDirectiveWhitespacesMatch,jpg);    }    if (jp.getDefaultContentType() != null) {      defaultContentTypeMatch=selectProperty(defaultContentTypeMatch,jpg);    }    if (jp.getBuffer() != null) {      bufferMatch=selectProperty(bufferMatch,jpg);    }    if (jp.isErrorOnUndeclaredNamespace() != null) {      errorOnUndeclaredNamespaceMatch=selectProperty(errorOnUndeclaredNamespaceMatch,jpg);    }  }  String isXml=defaultIsXml;  String isELIgnored=defaultIsELIgnored;  String isScriptingInvalid=defaultIsScriptingInvalid;  String pageEncoding=null;  String isDeferedSyntaxAllowedAsLiteral=defaultDeferedSyntaxAllowedAsLiteral;  String isTrimDirectiveWhitespaces=defaultTrimDirectiveWhitespaces;  String defaultContentType=defaultDefaultContentType;  String buffer=defaultBuffer;  String errorOnUndelcaredNamespace=defaultErrorOnUndeclaredNamespace;  if (isXmlMatch != null) {    isXml=isXmlMatch.getJspProperty().isXml();  }  if (elIgnoredMatch != null) {    isELIgnored=elIgnoredMatch.getJspProperty().isELIgnored();  }  if (scriptingInvalidMatch != null) {    isScriptingInvalid=scriptingInvalidMatch.getJspProperty().isScriptingInvalid();  }  if (pageEncodingMatch != null) {    pageEncoding=pageEncodingMatch.getJspProperty().getPageEncoding();  }  if (deferedSyntaxAllowedAsLiteralMatch != null) {    isDeferedSyntaxAllowedAsLiteral=deferedSyntaxAllowedAsLiteralMatch.getJspProperty().isDeferedSyntaxAllowedAsLiteral();  }  if (trimDirectiveWhitespacesMatch != null) {    isTrimDirectiveWhitespaces=trimDirectiveWhitespacesMatch.getJspProperty().isTrimDirectiveWhitespaces();  }  if (defaultContentTypeMatch != null) {    defaultContentType=defaultContentTypeMatch.getJspProperty().getDefaultContentType();  }  if (bufferMatch != null) {    buffer=bufferMatch.getJspProperty().getBuffer();  }  if (errorOnUndeclaredNamespaceMatch != null) {    errorOnUndelcaredNamespace=errorOnUndeclaredNamespaceMatch.getJspProperty().isErrorOnUndeclaredNamespace();  }  return new JspProperty(isXml,isELIgnored,isScriptingInvalid,pageEncoding,includePreludes,includeCodas,isDeferedSyntaxAllowedAsLiteral,isTrimDirectiveWhitespaces,defaultContentType,buffer,errorOnUndelcaredNamespace);}  }
class C{  public InterruptedException(String s){  super(s);}  }
class C{  public static void access(Level level,String msgid,String data[]){  access(level,msgid,data,null,null);}  }
class C{  public boolean equals(Object o){  if (o instanceof Manifest) {    Manifest m=(Manifest)o;    return attr.equals(m.getMainAttributes()) && entries.equals(m.getEntries());  } else {    return false;  }}  }
class C{  public void mousePressed(MouseEvent e){  if (!slider.isEnabled()) {    return;  }  calculateGeometry();  currentMouseX=e.getX();  currentMouseY=e.getY();  if (slider.isRequestFocusEnabled()) {    slider.requestFocus();  }  if (thumbRect.contains(currentMouseX,currentMouseY)) {    if (UIManager.getBoolean("Slider.onlyLeftMouseButtonDrag") && !SwingUtilities.isLeftMouseButton(e)) {      return;    }switch (slider.getOrientation()) {case JSlider.VERTICAL:      offset=currentMouseY - thumbRect.y;    break;case JSlider.HORIZONTAL:  offset=currentMouseX - thumbRect.x;break;}isDragging=true;return;}if (!SwingUtilities.isLeftMouseButton(e)) {return;}isDragging=false;slider.setValueIsAdjusting(true);Dimension sbSize=slider.getSize();int direction=POSITIVE_SCROLL;switch (slider.getOrientation()) {case JSlider.VERTICAL:if (thumbRect.isEmpty()) {int scrollbarCenter=sbSize.height / 2;if (!drawInverted()) {direction=(currentMouseY < scrollbarCenter) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;} else {direction=(currentMouseY < scrollbarCenter) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;}} else {int thumbY=thumbRect.y;if (!drawInverted()) {direction=(currentMouseY < thumbY) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;} else {direction=(currentMouseY < thumbY) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;}}break;case JSlider.HORIZONTAL:if (thumbRect.isEmpty()) {int scrollbarCenter=sbSize.width / 2;if (!drawInverted()) {direction=(currentMouseX < scrollbarCenter) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;} else {direction=(currentMouseX < scrollbarCenter) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;}} else {int thumbX=thumbRect.x;if (!drawInverted()) {direction=(currentMouseX < thumbX) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;} else {direction=(currentMouseX < thumbX) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;}}break;}if (shouldScroll(direction)) {scrollDueToClickInTrack(direction);}if (shouldScroll(direction)) {scrollTimer.stop();scrollListener.setDirection(direction);scrollTimer.start();}}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  } else   if (o instanceof ByteSequence) {    final ByteSequence other=(ByteSequence)o;    return other.equals(buffer,offset,length);  } else {    return false;  }}  }
class C{  public AlreadyBoundException(){  super();}  }
class C{  protected Name parseName(Name name) throws NamingException {  if (!initialContext && !name.isEmpty() && name.get(0).startsWith(prefix)) {    if (name.get(0).equals(prefix)) {      return name.getSuffix(1);    } else {      Name result=name.getSuffix(1);      result.add(0,name.get(0).substring(prefixLength));      return result;    }  } else {    if (initialContext) {      return name;    } else {      throw new NamingException(sm.getString("selectorContext.noJavaUrl"));    }  }}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  paintTabbedPaneTabBorder(context,g,x,y,w,h,tabIndex);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamens05.class,args);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.IssuerNameType createIssuerNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.IssuerNameTypeImpl();}  }
class C{  public ValidationMessage[] validate(TagData data){  TagExtraInfo tei=getTagExtraInfo();  if (tei == null) {    return null;  }  return tei.validate(data);}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof CompositeName)) {    throw new ClassCastException("Not a CompositeName");  }  return impl.compareTo(((CompositeName)obj).impl);}  }
class C{  public static Map<String,Object> toMap(Object... list){  if (list.length % 2 != 0) {    throw new IllegalArgumentException("List size should be even");  }  Map map=new LinkedHashMap();  for (int i=0; i < list.length; i+=2) {    map.put(list[i],list[i + 1]);  }  return map;}  }
class C{  public LDIFImportConfig(String ldifFile){  ldifFiles=CollectionUtils.newArrayList(ldifFile);  ldifFileIterator=ldifFiles.iterator();}  }
class C{  public static List<ImageData> createGifFrames(URL url,int[] frameNumbers){  byte[] imageType=readImageType(url);  if (imageTypeIs(imageType,gif)) {    GifImageData image=new GifImageData(url);    Arrays.sort(frameNumbers);    GifImageHelper.processImage(image,frameNumbers[frameNumbers.length - 1] - 1);    List<ImageData> frames=new ArrayList<>();    for (    int frame : frameNumbers) {      frames.add(image.getFrames().get(frame - 1));    }    return frames;  }  throw new IllegalArgumentException("GIF image expected.");}  }
class C{  public FrameBodyTSO2(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void paintTreeBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  attrList=doc.getAttributes();  assertNull("documentAttributesNull",attrList);}  }
class C{  public boolean hasConditions(){  return ifModifiedSince != null || ifNoneMatch != null;}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Modify Request");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  DN:  ");  buffer.append(dn);  buffer.append(EOL);  buffer.append("  Modifications:");  buffer.append(EOL);  for (  RawModification mod : modifications) {    mod.toString(buffer,indent + 4);  }}  }
class C{  @Override public void onBindViewHolder(ListBaseViewHolder holder,int position){  long begin=System.currentTimeMillis();  if (holder == null)   return;  holder.setComponentUsing(true);  WXComponent component=getChild(position);  if (component == null || (component instanceof WXRefresh) || (component instanceof WXLoading) || (component.mDomObj != null && component.mDomObj.isFixed())) {    WXLogUtils.d(TAG,"Bind WXRefresh & WXLoading " + holder);    return;  }  if (component != null && holder.getComponent() != null && holder.getComponent() instanceof WXCell) {    holder.getComponent().applyLayoutAndEvent(component);    holder.getComponent().bindData(component);  }  WXLogUtils.d(TAG,"Bind holder " + (System.currentTimeMillis() - begin) + "  Thread:"+ Thread.currentThread().getName());}  }
class C{  public AndSubject(Set<EntitlementSubject> eSubjects,String pSubjectName){  super(eSubjects,pSubjectName);}  }
class C{  static ComputedDayOfField ofWeekOfYearField(WeekFields weekDef){  return new ComputedDayOfField("WeekOfYear",weekDef,WEEKS,YEARS,WEEK_OF_YEAR_RANGE);}  }
class C{  private void encodeValue(String str,StringBuilder buffer){  if (StaticUtils.needsBase64Encoding(str)) {    buffer.append(": ");    buffer.append(Base64.encode(getBytes(str)));  } else {    buffer.append(" ");    buffer.append(str);  }}  }
class C{  public Fries(int stageZone,float xPos,float yPos,float xVel,float yVel,float powerSize){  super(new String[]{null,"M " + powerSize + ",0 L "+ powerSize+ ","+ (powerSize - (2 * REL_HEIGHT)),null,null,null,"M 0,0 L 0,0 " + powerSize + ",0 "+ powerSize+ ","+ powerSize+ ", 0,"+ powerSize+ ", 0,0"},stageZone,xPos,yPos - 15,xVel,yVel,new Image("res/sprites/stage/powerups/fries.png",powerSize,powerSize,false,true,false));  tempXVel=xVel;  pushThreshold=(float)0.5 * REL_HEIGHT;}  }
class C{  public void fanout_selected_items(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  r_board.generate_snapshot();  interactive_action_thread=new IteraFanoutThread(this);  interactive_action_thread.start();}  }
class C{  public JobImpressionsSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 0) {    throw new IllegalArgumentException("Job K octets value < 0 specified");  }}  }
class C{  @Override protected void onResume(){  super.onResume();  syncUIControlState();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodename.class,args);}  }
class C{  public void deleteField(ID3v22FieldKey id3v22FieldKey) throws KeyNotFoundException {  if (id3v22FieldKey == null) {    throw new KeyNotFoundException();  }  super.doDeleteTagField(new FrameAndSubId(id3v22FieldKey.getFrameId(),id3v22FieldKey.getSubId()));}  }
class C{  protected byte[] serialize() throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(bos);  writeExternal(oos);  oos.flush();  oos.close();  return bos.toByteArray();}  }
class C{  @Override public Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByField2(field2,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  @Override public int hashCode(){  return (int)id;}  }
class C{  public TriggerWrapper(final JsonValue value,final boolean paused){  serialized=value.get("serialized").asString();  name=value.get("name").asString();  group=value.get("group").asString();  previous_state=value.get("previous_state").asInteger();  acquired=value.get("acquired").asBoolean();  revision=value.get("_rev").asString();  if (paused) {    state=Trigger.STATE_PAUSED;  } else {    state=Trigger.STATE_NORMAL;  }  nodeId=value.get("nodeId").asString();}  }
class C{  public void testSHA1(){  Digest oldDigest=new SHA1Digest();  Digest newDigest=new OpenSSLDigest.SHA1();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  private void removeCOTNameFromConfig(String realm,List configList,String cotName,EntityConfigElement entityConfig,IDFFMetaManager idffMetaMgr) throws IDFFMetaException {  for (Iterator iter=configList.iterator(); iter.hasNext(); ) {    BaseConfigType bConfig=(BaseConfigType)iter.next();    List list=bConfig.getAttribute();    for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {      AttributeType avp=(AttributeType)iter2.next();      if (avp.getName().trim().equalsIgnoreCase(COT_LIST)) {        List avpl=avp.getValue();        if (avpl != null && !avpl.isEmpty() && containsValue(avpl,cotName)) {          avpl.remove(cotName);          idffMetaMgr.setEntityConfig(realm,entityConfig);          break;        }      }    }  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSplitPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiSplitPaneUI)mui).uis,a);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AlertInfoParser.parse");  AlertInfoList list=new AlertInfoList();  try {    headerName(TokenTypes.ALERT_INFO);    int lineCount=0;    while ((lexer.lookAhead(0) != '\n') && (lineCount < 20)) {      do {        AlertInfo alertInfo=new AlertInfo();        alertInfo.setHeaderName(SIPHeaderNames.ALERT_INFO);        URLParser urlParser;        GenericURI uri;        this.lexer.SPorHT();        if (this.lexer.lookAhead(0) == '<') {          this.lexer.match('<');          urlParser=new URLParser((Lexer)this.lexer);          uri=urlParser.uriReference(true);          alertInfo.setAlertInfo(uri);          this.lexer.match('>');        } else {          String alertInfoStr=this.lexer.byteStringNoSemicolon();          alertInfo.setAlertInfo(alertInfoStr);        }        this.lexer.SPorHT();        super.parse(alertInfo);        list.add(alertInfo);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');        } else         break;      } while (true);      lineCount++;    }    return list;  }  finally {    if (debug)     dbg_leave("AlertInfoParser.parse");  }}  }
class C{  protected boolean checkCredentials(DirContext context,User user,String credentials) throws NamingException {  boolean validated=false;  if (userPassword == null) {    validated=bindAsUser(context,user,credentials);  } else {    validated=compareCredentials(context,user,credentials);  }  if (containerLog.isTraceEnabled()) {    if (validated) {      containerLog.trace(sm.getString("jndiRealm.authenticateSuccess",user.getUserName()));    } else {      containerLog.trace(sm.getString("jndiRealm.authenticateFailure",user.getUserName()));    }  }  return validated;}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") "+ relOpString()+ " ("+ exp2+ ")";}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  return xmlString;}  }
class C{  public char first(){  if (start == end) {    return DONE;  }  offset=start;  return string.charAt(offset);}  }
class C{  public boolean delete(Long ruleActionParameterID){  if (ruleActionParameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_RULEACTIONPARAMETERID + "=" + ruleActionParameterID,null) > 0;}  }
class C{  public AuthorizationDecisionStatement(Subject subject,String resource,int decision,List action,EvidenceBase evidence) throws SAMLException {  super(subject,resource,decision,action,evidence);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public DERUTCTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  @Override public void close() throws Exception {  if (pool != null) {    pool.close();  }  InstanceKeyDataSourceFactory.removeInstance(getInstanceKey());}  }
class C{  protected void appendQueryParams(NonSyncStringBuffer buffer) throws JspException {  String nvPairs=getQueryParams();  if ((nvPairs != null) && (nvPairs.length() > 0)) {    buffer.append("&amp;");    buffer.append(nvPairs);  }}  }
class C{  public int checkCount(){  return filesPerKeystoreCounter;}  }
class C{  public boolean isIncremental(){  return isIncremental;}  }
class C{  private boolean isVowel(char ch){  return VOWELS.indexOf(ch) != -1;}  }
class C{  protected void paintFocus(Graphics g,Rectangle textRect,Dimension size){}  }
class C{  public SOAPMessage createSOAPFault(final String faultCode,final String faultString,final String detail){  try {    SOAPMessage message=messageFactory.createMessage();    SOAPEnvelope envelope=message.getSOAPPart().getEnvelope();    SOAPFault fault=envelope.getBody().addFault();    fault.setFaultCode(envelope.createName(faultCode,null,SOAPConstants.URI_NS_SOAP_ENVELOPE));    fault.setFaultString(SAML2Utils.bundle.getString(faultString));    if (StringUtils.isNotEmpty(detail)) {      Detail faultDetail=fault.addDetail();      SOAPElement faultDetailEntry=(SOAPElement)faultDetail.addDetailEntry(envelope.createName("Problem"));      faultDetailEntry.addAttribute(envelope.createName("details"),SAML2Utils.bundle.getString(detail));    }    return message;  } catch (  SOAPException e) {    debug.error("createSOAPFault:",e);    return null;  }}  }
class C{  public int[] border_intersections(ShapeTile p_shape){  int[] empty_result=new int[0];  if (!bounding_box().intersects(p_shape.bounding_box()))   return empty_result;  int edge_count=p_shape.border_line_count();  PlaLineInt prev_line=p_shape.border_line(edge_count - 1);  PlaLineInt curr_line=p_shape.border_line(0);  int[] result=new int[2];  PlaPoint[] intersection=new PlaPoint[2];  int intersection_count=0;  PlaPoint line_start=start_point();  PlaPoint line_end=end_point();  for (int edge_line_no=0; edge_line_no < edge_count; ++edge_line_no) {    PlaLineInt next_line;    if (edge_line_no == edge_count - 1) {      next_line=p_shape.border_line(0);    } else {      next_line=p_shape.border_line(edge_line_no + 1);    }    PlaSide start_point_side=curr_line.side_of(line_start);    PlaSide end_point_side=curr_line.side_of(line_end);    if (start_point_side == PlaSide.ON_THE_LEFT && end_point_side == PlaSide.ON_THE_LEFT) {      return empty_result;    }    if (start_point_side == PlaSide.COLLINEAR) {      if (end_point_side != PlaSide.ON_THE_RIGHT)       return empty_result;    }    if (end_point_side == PlaSide.COLLINEAR) {      if (start_point_side != PlaSide.ON_THE_RIGHT)       return empty_result;    }    if (start_point_side != PlaSide.ON_THE_RIGHT || end_point_side != PlaSide.ON_THE_RIGHT) {      PlaPoint is=middle.intersection(curr_line,"what does this do ?");      PlaSide prev_line_side_of_is=prev_line.side_of(is);      PlaSide next_line_side_of_is=next_line.side_of(is);      if (prev_line_side_of_is != PlaSide.ON_THE_LEFT && next_line_side_of_is != PlaSide.ON_THE_LEFT) {        if (prev_line_side_of_is == PlaSide.COLLINEAR) {          PlaPoint prev_prev_corner;          if (edge_line_no == 0) {            prev_prev_corner=p_shape.corner(edge_count - 1);          } else {            prev_prev_corner=p_shape.corner(edge_line_no - 1);          }          PlaPoint next_corner;          if (edge_line_no == edge_count - 1) {            next_corner=p_shape.corner(0);          } else {            next_corner=p_shape.corner(edge_line_no + 1);          }          PlaSide prev_prev_corner_side=middle.side_of(prev_prev_corner);          PlaSide next_corner_side=middle.side_of(next_corner);          if (prev_prev_corner_side == PlaSide.COLLINEAR || next_corner_side == PlaSide.COLLINEAR || prev_prev_corner_side == next_corner_side) {            return empty_result;          }        }        if (next_line_side_of_is == PlaSide.COLLINEAR) {          PlaPoint prev_corner=p_shape.corner(edge_line_no);          PlaPoint next_next_corner;          if (edge_line_no == edge_count - 2) {            next_next_corner=p_shape.corner(0);          } else           if (edge_line_no == edge_count - 1) {            next_next_corner=p_shape.corner(1);          } else {            next_next_corner=p_shape.corner(edge_line_no + 2);          }          PlaSide prev_corner_side=middle.side_of(prev_corner);          PlaSide next_next_corner_side=middle.side_of(next_next_corner);          if (prev_corner_side == PlaSide.COLLINEAR || next_next_corner_side == PlaSide.COLLINEAR || prev_corner_side == next_next_corner_side) {            return empty_result;          }        }        boolean intersection_already_handeled=false;        for (int index=0; index < intersection_count; ++index) {          if (is.equals(intersection[index])) {            intersection_already_handeled=true;            break;          }        }        if (!intersection_already_handeled) {          if (intersection_count < result.length) {            result[intersection_count]=edge_line_no;            intersection[intersection_count]=is;            ++intersection_count;          } else {            System.out.println("border_intersections: intersection_count to big!");          }        }      }    }    prev_line=curr_line;    curr_line=next_line;  }  if (intersection_count == 0) {    return empty_result;  }  if (intersection_count == 2) {    PlaPointFloat is0=intersection[0].to_float();    PlaPointFloat is1=intersection[1].to_float();    PlaPointFloat curr_start=line_start.to_float();    if (curr_start.distance_square(is1) < curr_start.distance_square(is0)) {      int tmp=result[0];      result[0]=result[1];      result[1]=tmp;    }    return result;  }  if (intersection_count != 1) {    System.out.println("LineSegment.border_intersections: intersection_count 1 expected");  }  int[] normalised_result=new int[1];  normalised_result[0]=result[0];  return normalised_result;}  }
class C{  protected void clearToggledPaths(){  expandedState.clear();}  }
class C{  @Activate public void activate(ComponentContext context){  bundleContext=context.getBundleContext();}  }
class C{  protected void installListListeners(){  if ((listMouseListener=createListMouseListener()) != null) {    list.addMouseListener(listMouseListener);  }  if ((listMouseMotionListener=createListMouseMotionListener()) != null) {    list.addMouseMotionListener(listMouseMotionListener);  }  if ((listSelectionListener=createListSelectionListener()) != null) {    list.addListSelectionListener(listSelectionListener);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Attr attribute;  String namespaceURI="http://www.w3.org/XML/1998 /namespace";  String qualifiedName="xml:root";  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:doc",docType);{    boolean success=false;    try {      attribute=newDoc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateattributeNS06",success);  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public Set createEntity(String entityName,String entityType,Map attributes) throws EntityException, SSOException {  try {    Object[] objs={tokenString,entityName,entityType,entityLocation,attributes};    return ((Set)client.send(client.encodeMessage("createEntity",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));  } catch (  RemoteException rex) {    EntityUtils.debug.warning("EntityObject:createEntity->RemoteException",rex);    throw new EntityException(rex.getMessage(),"1000");  }catch (  Exception ex) {    EntityUtils.debug.warning("EntityObject:createEntity->Exception",ex);    throw new EntityException(ex.getMessage(),"1000");  }}  }
class C{  public void deleteAuthConfiguration(String realm,Set names) throws AMConsoleException {  StringBuilder errorList=new StringBuilder();  String message=null;  for (Iterator i=names.iterator(); i.hasNext(); ) {    String config=(String)i.next();    message=null;    try {      AMAuthConfigUtils.removeNamedConfig(config,realm,getUserSSOToken());    } catch (    AMConfigurationException e) {      debug.warning("failed to delete",e);      message=e.getMessage();      errorList.append(config);    }catch (    SMSException e) {      debug.warning("failed to delete",e);      message=e.getMessage();      errorList.append(config);    }catch (    SSOException e) {      debug.warning("failed to delete",e);      message=e.getMessage();      errorList.append(config);    }    if (message != null) {      if (errorList.length() > 0) {        errorList.append(", ");      }    }  }  if (errorList.length() > 0) {    String[] tmp={errorList.toString(),message};    throw new AMConsoleException(MessageFormat.format(getLocalizedString("authentication.config.delete.failed"),(Object[])tmp));  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String02() throws Exception {  try {    TrustManagerFactory.getInstance(null,getDefaultProviderName());    fail();  } catch (  NoSuchAlgorithmException expected) {  }catch (  NullPointerException expected) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],getDefaultProviderName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  private static Remote exportObject(Remote obj,ActivatableServerRef sref) throws RemoteException {  if (obj instanceof Activatable) {    ((Activatable)obj).ref=sref;  }  return sref.exportObject(obj,null,false);}  }
class C{  public final int indexOf(Object elem,int index){  for (int i=index; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public static boolean isCallerValid(Object obj){  if (!checkCaller) {    return (true);  }  if (obj == null) {    return (isCallerValid(CLASSNAME));  }  return (isCallerValid(obj.getClass().getName()));}  }
class C{  void ensureCapacity(final int size){  if (_length + size <= _data.length) {    return;  }  final int length1=2 * _data.length;  final int length2=_length + size;  _data=Arrays.copyOf(_data,length1 > length2 ? length1 : length2);}  }
class C{  public static boolean isHoneycomb(){  return getSdkVersion() >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  SmsRouteTreeBuilder handles(Predicate<String> handlesFunction){  this.handlesFunction=handlesFunction;  return this;}  }
class C{  public void writeBytes(byte[] data,int offset,int len) throws IOException {  _writeBytes(data,offset,len);}  }
class C{  @Override public boolean is_empty(){  if (is_nan)   return true;  return this == EMPTY;}  }
class C{  public Enumeration<?> propertyNames(){  Hashtable<String,Object> h=new Hashtable<>();  enumerate(h);  return h.keys();}  }
class C{  public static void acceptCertificate(X509Certificate[] chain) throws IOException, KeyStoreException, CertificateException, NoSuchAlgorithmException {  logger.info(LocalizableMessage.raw("Accepting certificate chain."));  KeyStore k=getInstance();  for (  X509Certificate aChain : chain) {    if (!containsCertificate(aChain,k)) {      String alias=aChain.getSubjectDN().getName();      int j=1;      while (k.containsAlias(alias)) {        alias=aChain.getSubjectDN().getName() + "-" + j;        j++;      }      k.setCertificateEntry(alias,aChain);    }  }  String keyStorePath=getKeyStorePath();  File f=new File(keyStorePath);  if (!f.exists()) {    Utils.createFile(f);  }  FileOutputStream fos=new FileOutputStream(getKeyStorePath(),false);  k.store(fos,new char[]{});  fos.close();}  }
class C{  public LoginRequiredException(){  super(400,"login_required","The request requires login.");}  }
class C{  public static void displayError(Component parent,LocalizableMessage msg,LocalizableMessage title){  JOptionPane.showMessageDialog(parent,wrapMsg(String.valueOf(msg),100),String.valueOf(title),JOptionPane.ERROR_MESSAGE);}  }
class C{  public SuffixFileFilter(String suffix){  this(suffix,IOCase.SENSITIVE);}  }
class C{  MarshalledObjectInputStream(InputStream objIn,InputStream locIn) throws IOException {  super(objIn);  this.locIn=(locIn == null ? null : new ObjectInputStream(locIn));}  }
class C{  public void removeRole(String roleDN) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  Set userDNs=new HashSet();  userDNs.add(super.entryDN);  dsServices.modifyMemberShip(super.token,userDNs,roleDN,ROLE,REMOVE_MEMBER);}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  if (null != m_exprObj) {    m_lastFetched=next=m_exprObj.nextNode();  } else   m_lastFetched=next=DTM.NULL;  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  public void requestTopDownLeftRightResend(ImageConsumer ic){  if (proxies != null) {    ImageFilter imgf=(ImageFilter)proxies.get(ic);    if (imgf != null) {      imgf.resendTopDownLeftRight(src);    }  }}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    System.out.println("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1) {      dialog=inviteTid.getDialog();      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction tr=sipProvider.getNewClientTransaction(byeRequest);      System.out.println("shootme: got an ACK -- sending bye! ");      dialog.sendRequest(tr);      System.out.println("Dialog State = " + dialog.getState());    } else     ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startElement: " + qName);  if (m_contentHandler != null) {    m_contentHandler.startElement(uri,localName,qName,atts);  }}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);  String name=evt.getPropertyName();  if (name.equals("foreground")) {    updateForeground((Color)evt.getNewValue());  } else   if (name.equals("font")) {    updateFont((Font)evt.getNewValue());  } else   if (name.equals("document")) {    JComponent comp=getComponent();    updateForeground(comp.getForeground());    updateFont(comp.getFont());  }}  }
class C{  @Override public void start() throws LifecycleException {  state=LifecycleState.STARTING_PREP;  WebResource classes=resources.getResource("/WEB-INF/classes");  if (classes.isDirectory() && classes.canRead()) {    localRepositories.add(classes.getURL());  }  WebResource[] jars=resources.listResources("/WEB-INF/lib");  for (  WebResource jar : jars) {    if (jar.getName().endsWith(".jar") && jar.isFile() && jar.canRead()) {      localRepositories.add(jar.getURL());      jarModificationTimes.put(jar.getName(),Long.valueOf(jar.getLastModified()));    }  }  state=LifecycleState.STARTED;}  }
class C{  public EntitlementException(int errorCode,Object[] params,Throwable cause){  super(cause);  this.errorCode=errorCode;  this.params=params;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public BatchUpdateException(String reason,String SQLState,int[] updateCounts,Throwable cause){  super(reason,SQLState,cause);  this.updateCounts=updateCounts;}  }
class C{  public PendingActionContext(final Context parent,Map<String,Object> pendingActionData,String action){  super(checkNotNull(parent,"Cannot instantiate PendingActionContext with null parent Context"),CONTEXT_NAME);  data.put(ATTR_ACTION,action);  data.put(ATTR_ACTION_DATA,pendingActionData);  data.put(ATTR_PENDING,true);}  }
class C{  public ECPRequest createECPRequest(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_REQUEST,value);  if (obj == null) {    return new ECPRequestImpl(value);  } else {    return (ECPRequest)obj;  }}  }
class C{  static <T>T find(Class<T> type,String fallbackClassName) throws FactoryConfigurationError {  final String factoryId=type.getName();  dPrint("find factoryId =" + factoryId);  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(type,systemProp,null,true);    }  } catch (  SecurityException se) {    if (debug)     se.printStackTrace();  }  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          String configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          }        }      }    }    final String factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);      return newInstance(type,factoryClassName,null,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  T provider=findServiceProvider(type);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new FactoryConfigurationError("Provider for " + factoryId + " cannot be found");  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(type,fallbackClassName,null,true);}  }
class C{  public LanguageList(final long pos,final BigInteger size){  super(GUID.GUID_LANGUAGE_LIST,pos,size);}  }
class C{  public int handshake(boolean read,boolean write) throws IOException {  return 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagnamespecialvalue.class,args);}  }
class C{  protected void paintExpandControl(Graphics g,Rectangle clipBounds,Insets insets,Rectangle bounds,TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  Object value=path.getLastPathComponent();  if (!isLeaf && (!hasBeenExpanded || treeModel.getChildCount(value) > 0)) {    int middleXOfKnob;    if (leftToRight) {      middleXOfKnob=bounds.x - getRightChildIndent() + 1;    } else {      middleXOfKnob=bounds.x + bounds.width + getRightChildIndent() - 1;    }    int middleYOfKnob=bounds.y + (bounds.height / 2);    if (isExpanded) {      Icon expandedIcon=getExpandedIcon();      if (expandedIcon != null)       drawCentered(tree,g,expandedIcon,middleXOfKnob,middleYOfKnob);    } else {      Icon collapsedIcon=getCollapsedIcon();      if (collapsedIcon != null)       drawCentered(tree,g,collapsedIcon,middleXOfKnob,middleYOfKnob);    }  }}  }
class C{  public V remove(Object key){  int hash=hash(key.hashCode());  Segment<K,V> s=segmentForHash(hash);  return s == null ? null : s.remove(key,hash,null);}  }
class C{  private DN computeNewDN() throws LocalizedIllegalArgumentException {  if (newSuperior != null) {    return DN.valueOf(newRDN + "," + newSuperior);  }  final DN parentDn=getDN().parent();  return parentDn.child(RDN.valueOf(newRDN));}  }
class C{  public void add(final NioChannel socket,final int interestOps){  PollerEvent r=eventCache.pop();  if (r == null)   r=new PollerEvent(socket,null,interestOps); else   r.reset(socket,null,interestOps);  addEvent(r);  if (close) {    NioEndpoint.NioSocketWrapper ka=(NioEndpoint.NioSocketWrapper)socket.getAttachment();    processSocket(ka,SocketEvent.STOP,false);  }}  }
class C{  private static JsonSchema loadEnvironmentSchemas(ClassLoader classLoader,String... folderPaths) throws IOException {  JsonSchema answer=null;  Enumeration<URL> resources=classLoader.getResources(ENVIRONMENT_SCHEMA_FILE);  while (resources.hasMoreElements()) {    URL url=resources.nextElement();    JsonSchema schema=loadSchema(url);    answer=combineSchemas(answer,schema);  }  for (  String folderPath : folderPaths) {    File file=new File(folderPath,ENVIRONMENT_SCHEMA_FILE);    if (file.isFile()) {      JsonSchema schema=loadSchema(file);      answer=combineSchemas(answer,schema);    }  }  return answer;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof SecurIDPrincipal))   return false;  SecurIDPrincipal that=(SecurIDPrincipal)o;  if (this.getName().equals(that.getName()))   return true;  return false;}  }
class C{  private static void loadCrashIdentifier(Context context){  String deviceIdentifier=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID);  if (!TextUtils.isEmpty(CrashConstants.APP_PACKAGE) && !TextUtils.isEmpty(deviceIdentifier)) {    String combined=CrashConstants.APP_PACKAGE + ":" + deviceIdentifier+ ":"+ createSalt(context);    try {      MessageDigest digest=MessageDigest.getInstance("SHA-1");      byte[] bytes=combined.getBytes("UTF-8");      digest.update(bytes,0,bytes.length);      bytes=digest.digest();      CrashConstants.CRASH_IDENTIFIER=bytesToHex(bytes);    } catch (    Throwable e) {      L.e("Couldn't create CrashIdentifier with Exception:" + e.toString());    }  }}  }
class C{  public MockResponse addHeader(String name,Object value){  return addHeader(name + ": " + String.valueOf(value));}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public ConfigErrorHandler(EntryCacheCommon.ConfigPhase configPhase,List<LocalizableMessage> unacceptableReasons,List<LocalizableMessage> errorMessages){  _configPhase=configPhase;  _unacceptableReasons=unacceptableReasons;  _errorMessages=errorMessages;  _resultCode=ResultCode.SUCCESS;  _isAcceptable=true;  _isAdminActionRequired=false;}  }
class C{  private boolean containsMapping(Object key,Object value){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k)     return tab[i + 1] == value;    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  public void publish(final ReplicationMsg msg) throws IOException {  final byte[] buffer=msg.getBytes(protocolVersion);  if (buffer == null) {    return;  }  if (isRunning.get()) {    while (!closeInitiated) {      try {        if (sendQueue.offer(buffer,100,TimeUnit.MILLISECONDS)) {          return;        }      } catch (      final InterruptedException e) {        setSessionError(e);        throw new IOException(e.getMessage());      }    }  } else {    send(buffer);  }}  }
class C{  public TagResult generateLine(TemplateEntry templateEntry){  TemplateValue value=new TemplateValue(this);  for (  Tag t : tags) {    TagResult result=t.generateValue(templateEntry,value);    if (!result.keepProcessingLine() || !result.keepProcessingEntry() || !result.keepProcessingParent()|| !result.keepProcessingTemplateFile()) {      return result;    }  }  templateEntry.addValue(value);  return TagResult.SUCCESS_RESULT;}  }
class C{  @Override void validateMethod(Request request) throws OAuth2RestletException {  if (!Method.POST.equals(request.getMethod())) {    throw new OAuth2RestletException(405,"method_not_allowed","Required Method: POST found: " + request.getMethod().getName(),null);  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void paint(GlyphView v,Graphics g,Shape a,int p0,int p1){  sync(v);  Segment text;  TabExpander expander=v.getTabExpander();  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  int x=alloc.x;  int p=v.getStartOffset();  int[] justificationData=getJustificationData(v);  if (p != p0) {    text=v.getText(p,p0);    int width=Utilities.getTabbedTextWidth(v,text,metrics,x,expander,p,justificationData);    x+=width;    SegmentCache.releaseSharedSegment(text);  }  int y=alloc.y + metrics.getHeight() - metrics.getDescent();  text=v.getText(p0,p1);  g.setFont(metrics.getFont());  Utilities.drawTabbedText(v,text,x,y,g,expander,p0,justificationData);  SegmentCache.releaseSharedSegment(text);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public CancelResult cancelOperation(int messageID,CancelRequest cancelRequest){  return new CancelResult(ResultCode.CANNOT_CANCEL,LocalizableMessage.raw("Internal operations cannot be cancelled"));}  }
class C{  SearchResultCode(ResultCode resultCode,LocalizableMessageBuilder errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public LDIFImportConfig(TemplateFile templateFile){  this(new MakeLDIFInputStream(templateFile));}  }
class C{  public static String formatToRFC(String dn){  return DN.valueOf(dn).toString().toLowerCase();}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  String filter=(String)getDisplayFieldValue(AuthToServiceHelper.ATTR_FILTER);  if ((filter == null) || (filter.trim().length() == 0)) {    setDisplayFieldValue(AuthToServiceHelper.ATTR_FILTER,"*");  }  Set realmNames=getRealmNames(filter);  if ((realmNames != null) && !realmNames.isEmpty()) {    realmNames.add("");    CCSelect sl=(CCSelect)getChild(AuthToServiceHelper.ATTR_REALM);    sl.setOptions(createOptionList(getLabelValueMap(realmNames)));    String realm=null;    if (!bRealmSelect) {      realm=(String)realmNames.iterator().next();      sl.setValue(realm);    } else {      realm=(String)sl.getValue();    }    setServiceNames(realm);  } else {    CCSelect slService=(CCSelect)getChild(AuthToServiceHelper.ATTR_SERVICE);    slService.setOptions(new OptionList());  }}  }
class C{  static boolean drawGradient(Component c,Graphics g,String key,int x,int y,int w,int h,boolean vertical){  java.util.List gradient=(java.util.List)UIManager.get(key);  if (gradient == null || !(g instanceof Graphics2D)) {    return false;  }  if (w <= 0 || h <= 0) {    return true;  }  GradientPainter.INSTANCE.paint(c,(Graphics2D)g,gradient,x,y,w,h,vertical);  return true;}  }
class C{  private void startRefreshReferralNodes(BasicNode parentNode){  Enumeration<?> e=parentNode.children();  while (e.hasMoreElements()) {    BasicNode child=(BasicNode)e.nextElement();    if (child.getReferral() != null || child.getRemoteUrl() != null) {      startRefreshNode(child,null,true);    } else {      startRefreshReferralNodes(child);    }  }}  }
class C{  public static boolean isInt(String desc){  return desc.endsWith("I");}  }
class C{  public void removeFromRoom(){  if (room != null) {    room.internalRemovePlayer(this);    room=null;  }}  }
class C{  private void initRealmSubjects() throws PolicyException {  if (debug.messageEnabled()) {    debug.message("Initializing realm subjects in realm : " + pmRealmName);  }  try {    realmSubjects=pm.readRealmSubjects();  } catch (  SSOException ssoe) {    throw new PolicyException(ResBundleUtils.rbName,"could_not_initialize_realm_subjects",null,ssoe);  }  if (debug.messageEnabled()) {    debug.message("Initialized realm subjects in realm : " + pmRealmName);  }}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  @Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {  if (uri == null || responseHeaders == null) {    throw new IllegalArgumentException();  }  List<HttpCookie> cookies=parseCookie(responseHeaders);  for (  HttpCookie cookie : cookies) {    if (cookie.getDomain() == null) {      cookie.setDomain(uri.getHost());    }    if (cookie.getPath() == null) {      cookie.setPath(pathToCookiePath(uri.getPath()));    } else     if (!HttpCookie.pathMatches(cookie,uri)) {      continue;    }    if ("".equals(cookie.getPortlist())) {      cookie.setPortlist(Integer.toString(uri.getEffectivePort()));    } else     if (cookie.getPortlist() != null && !HttpCookie.portMatches(cookie,uri)) {      continue;    }    if (policy.shouldAccept(uri,cookie)) {      store.add(uri,cookie);    }  }}  }
class C{  public boolean echoCharIsSet(){  return echoChar != 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechild.class,args);}  }
class C{  public boolean isDataFlavorAvailable(DataFlavor flavor){  if (flavor == null) {    throw new NullPointerException("flavor");  }  Transferable cntnts=getContents(null);  if (cntnts == null) {    return false;  }  return cntnts.isDataFlavorSupported(flavor);}  }
class C{  public boolean containsAll(Collection<?> c){  for (  Object o : c)   if (!contains(o))   return false;  return true;}  }
class C{  public void write(OutputStream s) throws IOException {  byte profileData[];  profileData=getData();  s.write(profileData);}  }
class C{  public SubjectDecision(boolean satisfied,Map<String,Set<String>> advices){  this.satisfied=satisfied;  this.advices=advices;}  }
class C{  public EntryAlreadyExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement02.class,args);}  }
class C{  private int crossCheckGetColumnsAndResultSetMetaData(ResultSet rs,boolean partial) throws SQLException {  Statement s=conn.createStatement();  while (rs.next()) {    String schema=rs.getString("TABLE_SCHEM");    String table=rs.getString("TABLE_NAME");    ResultSet rst=s.executeQuery("SELECT * FROM " + schema + "."+ table);    ResultSetMetaData rsmdt=rst.getMetaData();    for (int col=1; col <= rsmdt.getColumnCount(); col++) {      if (!partial) {        if (col != 1)         assertTrue(rs.next());        assertEquals("ORDINAL_POSITION",col,rs.getInt("ORDINAL_POSITION"));      }      assertEquals("TABLE_CAT","",rs.getString("TABLE_CAT"));      assertEquals("TABLE_SCHEM",schema,rs.getString("TABLE_SCHEM"));      assertEquals("TABLE_NAME",table,rs.getString("TABLE_NAME"));      crossCheckGetColumnRowAndResultSetMetaData(rs,rsmdt);      if (partial)       break;    }    rst.close();  }  int count=rs.getRow();  rs.close();  s.close();  return count;}  }
class C{  public void invokePostSynchronizationDeletePlugins(PostSynchronizationDeleteOperation deleteOperation){  for (  DirectoryServerPlugin p : postSynchronizationDeletePlugins) {    try {      p.doPostSynchronization(deleteOperation);    } catch (    Exception e) {      logException(deleteOperation,p,e,ERR_PLUGIN_POST_SYNCHRONIZATION_PLUGIN_EXCEPTION);    }  }}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("Transition[").append(isGap() ? "Gap" : "Overlap").append(" at ").append(transition).append(offsetBefore).append(" to ").append(offsetAfter).append(']');  return buf.toString();}  }
class C{  public IDFFMetaException(Exception ex){  super(ex);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  @Inject public RestAuthCallbackHandlerManager(RestAuthCallbackHandlerFactory restAuthCallbackHandlerFactory){  this.restAuthCallbackHandlerFactory=restAuthCallbackHandlerFactory;}  }
class C{  @Override public void storeApplicationType(ApplicationType applicationType) throws EntitlementException {  try {    SSOToken token=SubjectUtils.getSSOToken(subject);    if (token == null) {      Object[] arg={applicationType.getName()};      throw new EntitlementException(246,arg);    }    ServiceConfig conf=getApplicationTypeCollectionConfig(token);    if (conf != null) {      ServiceConfig sc=conf.getSubConfig(applicationType.getName());      if (sc == null) {        conf.addSubConfig(applicationType.getName(),EntitlementUtils.APPLICATION_TYPE,0,getApplicationTypeData(applicationType));      } else {        sc.setAttributes(getApplicationTypeData(applicationType));      }    }  } catch (  SMSException ex) {    Object[] arg={applicationType.getName()};    throw new EntitlementException(241,arg,ex);  }catch (  SSOException ex) {    Object[] arg={applicationType.getName()};    throw new EntitlementException(241,arg,ex);  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  forwardToPolicyViewBean();}  }
class C{  public void sendPing(boolean force) throws IOException {  long now=System.nanoTime();  if (force || now - lastPingNanoTime > pingIntervalNano) {    lastPingNanoTime=now;    byte[] payload=new byte[8];synchronized (socketWrapper) {      int sentSequence=++sequence;      PingRecord pingRecord=new PingRecord(sentSequence,now);      inflightPings.add(pingRecord);      ByteUtil.set31Bits(payload,4,sentSequence);      socketWrapper.write(true,PING,0,PING.length);      socketWrapper.write(true,payload,0,payload.length);      socketWrapper.flush(true);    }  }}  }
class C{  public static void error(Level level,String msgid,String data[]){  error(level,msgid,data,null);}  }
class C{  public static boolean isBlank(String toTest){  if (toTest == null) {    return true;  }  for (int i=0; i < toTest.length(); i++) {    if (!Character.isWhitespace(toTest.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public boolean containsKey(Object key){  rwlock.readLock().lock();  boolean found=false;  try {    Entry tab[]=table;    int hash=key.hashCode();    int index=(hash & 0x7FFFFFFF) % tab.length;    for (Entry e=tab[index]; (e != null) && !found; e=e.next) {      found=((e.hash == hash) && e.key.equals(key));    }  }  finally {    rwlock.readLock().unlock();  }  return found;}  }
class C{  public ReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,ClassLoader[] cls,boolean terminate){  super(owner,channel,timeout,mapContextName,AbstractReplicatedMap.DEFAULT_INITIAL_CAPACITY,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT,cls,terminate);}  }
class C{  public void handleTblRequestHandlerListHrefEditActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SCSOAPBindingRequestHandlerListEditViewBean vb=(SCSOAPBindingRequestHandlerListEditViewBean)getViewBean(SCSOAPBindingRequestHandlerListEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue(TBL_REQUEST_HANDLER_LIST_HREF_EDIT_ACTION));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public long longValue(){  return longValue;}  }
class C{  private void fireAdjustmentValueChanged(int id,int type,int value,boolean isAdjusting){  Object[] listeners=listenerList.getListenerList();  AdjustmentEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AdjustmentListener.class) {      if (e == null) {        e=new AdjustmentEvent(this,id,type,value,isAdjusting);      }      ((AdjustmentListener)listeners[i + 1]).adjustmentValueChanged(e);    }  }}  }
class C{  protected Shape adjustAllocation(Shape a){  if (a != null) {    Rectangle bounds=a.getBounds();    int vspan=(int)getPreferredSpan(Y_AXIS);    int hspan=(int)getPreferredSpan(X_AXIS);    if (bounds.height != vspan) {      int slop=bounds.height - vspan;      bounds.y+=slop / 2;      bounds.height-=slop;    }    Component c=getContainer();    if (c instanceof JTextField) {      JTextField field=(JTextField)c;      BoundedRangeModel vis=field.getHorizontalVisibility();      int max=Math.max(hspan,bounds.width);      int value=vis.getValue();      int extent=Math.min(max,bounds.width - 1);      if ((value + extent) > max) {        value=max - extent;      }      vis.setRangeProperties(value,extent,vis.getMinimum(),max,false);      if (hspan < bounds.width) {        int slop=bounds.width - 1 - hspan;        int align=((JTextField)c).getHorizontalAlignment();        if (Utilities.isLeftToRight(c)) {          if (align == LEADING) {            align=LEFT;          } else           if (align == TRAILING) {            align=RIGHT;          }        } else {          if (align == LEADING) {            align=RIGHT;          } else           if (align == TRAILING) {            align=LEFT;          }        }switch (align) {case SwingConstants.CENTER:          bounds.x+=slop / 2;        bounds.width-=slop;      break;case SwingConstants.RIGHT:    bounds.x+=slop;  bounds.width-=slop;break;}} else {bounds.width=hspan;bounds.x-=vis.getValue();}}return bounds;}return null;}  }
class C{  public static StorageStatus unusable(LocalizableMessage reason){  return new StorageStatus(Code.UNUSABLE,reason);}  }
class C{  public int size(){  return modifications.size();}  }
class C{  public static void removeAttributeChoiceValues(String serviceName,String schemaType,String attributeName,Set choiceValues,String subSchema) throws UpgradeException {  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchema,schemaType);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeName);    for (Iterator i=choiceValues.iterator(); i.hasNext(); ) {      String choiceValue=(String)i.next();      attrSchema.removeChoiceValue(choiceValue);    }  } catch (  SSOException ssoe) {    throw new UpgradeException("Invalid SSOToken");  }catch (  SMSException sme) {    throw new UpgradeException("Error removing attribute choice vals");  }}  }
class C{  public void bindAppearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getRef());  if (appearMap == null) {    appearMap=new ConcurrentHashMap<>();  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    appearData=new AppearData();  }  appearData.mAppearComponent=component;  appearData.hasAppear=true;  appearMap.put(component.getRef(),appearData);  mAppearMap.put(getRef(),appearMap);}  }
class C{  public synchronized void cancelAll(){  waitingQueue.clear();  for (  BasicNode node : workingList.keySet()) {    AbstractNodeTask task=workingList.get(node);    cancelList.put(node,node);    task.cancel();  }}  }
class C{  protected void closeFrame(JInternalFrame f){  BasicLookAndFeel.playSound(frame,"InternalFrame.closeSound");  getDesktopManager().closeFrame(f);}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  CompositeType other;  try {    other=(CompositeType)obj;  } catch (  ClassCastException e) {    return false;  }  if (!this.getTypeName().equals(other.getTypeName())) {    return false;  }  if (!this.nameToType.equals(other.nameToType)) {    return false;  }  return true;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureValueElement createSignatureValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureValueElementImpl();}  }
class C{  public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {  PrimaryIndexBucketGeneratorImpl gen=new PrimaryIndexBucketGeneratorImpl(args);  gen.generateAndWrite();}  }
class C{  public OpendsJmxConnector(String serverHostname,int serverPort,Map<String,Object> environment) throws IOException {  serviceURL=new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + serverHostname + ":"+ serverPort+ "/org.opends.server.protocols.jmx.client-unknown");  this.jmxc=JMXConnectorFactory.newJMXConnector(serviceURL,environment);  this.environment=environment;}  }
class C{  public void layoutContainer(Container target){  checkContainer(target);  checkRequests();  int nChildren=target.getComponentCount();  int[] xOffsets=new int[nChildren];  int[] xSpans=new int[nChildren];  int[] yOffsets=new int[nChildren];  int[] ySpans=new int[nChildren];  Dimension alloc=target.getSize();  Insets in=target.getInsets();  alloc.width-=in.left + in.right;  alloc.height-=in.top + in.bottom;  SizeRequirements.calculateAlignedPositions(alloc.width,xTotal,xChildren,xOffsets,xSpans);  SizeRequirements.calculateAlignedPositions(alloc.height,yTotal,yChildren,yOffsets,ySpans);  for (int i=0; i < nChildren; i++) {    Component c=target.getComponent(i);    c.setBounds(in.left + xOffsets[i],in.top + yOffsets[i],xSpans[i],ySpans[i]);  }}  }
class C{  public void sendSubscribe(int notifierPort){  try {    String fromName="BigGuy";    String fromSipAddress="here.com";    String fromDisplayName="The Master Blaster";    String toSipAddress="there.com";    String toUser="LittleGuy";    String toDisplayName="The Little Blister";    SipURI fromAddress=addressFactory.createSipURI(fromName,fromSipAddress);    Address fromNameAddress=addressFactory.createAddress(fromAddress);    fromNameAddress.setDisplayName(fromDisplayName);    FromHeader fromHeader=headerFactory.createFromHeader(fromNameAddress,"12345");    SipURI toAddress=addressFactory.createSipURI(toUser,toSipAddress);    Address toNameAddress=addressFactory.createAddress(toAddress);    toNameAddress.setDisplayName(toDisplayName);    ToHeader toHeader=headerFactory.createToHeader(toNameAddress,null);    SipURI requestURI=addressFactory.createSipURI(toUser,toSipAddress);    ArrayList viaHeaders=new ArrayList();    int port=sipProvider.getListeningPoint(transport).getPort();    ViaHeader viaHeader=headerFactory.createViaHeader("127.0.0.1",port,transport,null);    viaHeaders.add(viaHeader);    CallIdHeader callIdHeader=sipProvider.getNewCallId();    callIdHeader=headerFactory.createCallIdHeader(callIdHeader.getCallId());    CSeqHeader cSeqHeader=headerFactory.createCSeqHeader(1L,Request.SUBSCRIBE);    MaxForwardsHeader maxForwards=headerFactory.createMaxForwardsHeader(70);    Request request=messageFactory.createRequest(requestURI,Request.SUBSCRIBE,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);    String host=listeningPoint.getIPAddress();    SipURI contactUrl=addressFactory.createSipURI(fromName,host);    contactUrl.setPort(listeningPoint.getPort());    SipURI contactURI=addressFactory.createSipURI(fromName,host);    contactURI.setTransportParam(transport);    contactURI.setPort(sipProvider.getListeningPoint(transport).getPort());    Address contactAddress=addressFactory.createAddress(contactURI);    contactAddress.setDisplayName(fromName);    contactHeader=headerFactory.createContactHeader(contactAddress);    request.addHeader(contactHeader);    RouteHeader route=headerFactory.createRouteHeader(addressFactory.createAddress("<sip:127.0.0.1:" + notifierPort + ";transport="+ transport+ ";lr>"));    request.addHeader(route);    subscribeTid=sipProvider.getNewClientTransaction(request);    EventHeader eventHeader=headerFactory.createEventHeader("foo");    eventHeader.setEventId("foo");    request.addHeader(eventHeader);    logger.info("Subscribe Dialog = " + subscribeTid.getDialog());    this.subscriberDialog=subscribeTid.getDialog();    this.dialogs.add(subscriberDialog);    subscribeTid.sendRequest();  } catch (  Throwable ex) {    logger.info(ex.getMessage(),ex);    TestHarness.fail("Failed to send Subscribe to notifier port" + notifierPort + ", because of "+ ex.getMessage());  }}  }
class C{  private Object executeMethod(final Method method,final ApplicationContext context,final Object[] params) throws PrivilegedActionException, IllegalAccessException, InvocationTargetException {  if (SecurityUtil.isPackageProtectionEnabled()) {    return AccessController.doPrivileged(new PrivilegedExecuteMethod(method,context,params));  } else {    return method.invoke(context,params);  }}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  public static SearchRequest newSingleEntrySearchRequest(final String dn,final SearchScope scope,final String filter,final String... attributeDescriptions){  return Requests.newSingleEntrySearchRequest(dn,scope,filter,attributeDescriptions).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public void timeout(){  if (timedOutAt <= 0) {    timedOutAt=currentTimeMillis() / 1000;  }}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeInteger(delayDuration);  writer.writeEndSequence();}  }
class C{  SelectAllAction(){  super(selectAllAction);}  }
class C{  @Deprecated protected void drawMultiLineTextAppearance(Rectangle rect,PdfFont font,int fontSize,String value,PdfFormXObject appearance){  drawMultiLineTextAppearance(rect,font,(float)fontSize,value,appearance);}  }
class C{  protected View createChild(String name){  if (name.equals(LBL_QUESTION)) {    return new StaticTextField(this,LBL_QUESTION,"");  } else   if (name.equals(TF_ANSWER)) {    return new TextField(this,TF_ANSWER,"");  } else   if (name.equals(FLD_ATTR_NAME)) {    return new HiddenField(this,FLD_ATTR_NAME,"");  }  throw new IllegalArgumentException("Invalid child name [" + name + "]");}  }
class C{  public void draw(Graphics p_graphics){}  }
class C{  public static Status generateStatus(String code,String message){  return generateStatus(code,null,message);}  }
class C{  @Override public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof LDAPURL)) {    return false;  }  LDAPURL url=(LDAPURL)o;  return scheme.equals(url.getScheme()) && hostEquals(url) && port == url.getPort() && baseDnsEqual(url) && scope.equals(url.getScope()) && filtersEqual(url) && attributesEqual(url.getAttributes()) && extensionsEqual(url.getExtensions());}  }
class C{  @Override public Object lookupLink(Name name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingName","lookupLink",name));  }  return getBoundContext().lookupLink(parseName(name));}  }
class C{  public DataBufferShort(int size,int numBanks){  super(STABLE,TYPE_SHORT,size,numBanks);  bankdata=new short[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new short[size];  }  data=bankdata[0];}  }
class C{  @Override public int hashCode(){  long hash=minSmallest + minLargest << 16 + minLargest >> 48 + maxSmallest << 32 + maxSmallest >> 32 + maxLargest << 48 + maxLargest >> 16;  return (int)(hash ^ (hash >>> 32));}  }
class C{  public void encode(ByteStringBuilder buffer){  buffer.appendBERLength(1);  buffer.appendByte(encodedRepresentation);}  }
class C{  private static ApplicationType newType(final String name) throws IllegalAccessException, InstantiationException {  return new ApplicationType(name,new HashMap<String,Boolean>(TYPE_ACTIONS),DumbSearchIndex.class,DumbSaveIndex.class,DumbResourceName.class);}  }
class C{  void refresh(SMSEntry e) throws SMSException {  smsEntry.refresh(e);}  }
class C{  @Override void toXML(StringBuilder xml,int level){  indent(xml,level);  xml.append("<array>");  xml.append(NSObject.NEWLINE);  for (  NSObject o : set) {    o.toXML(xml,level + 1);    xml.append(NSObject.NEWLINE);  }  indent(xml,level);  xml.append("</array>");}  }
class C{  public static void release(ClassLoader classLoader){  if (instance == null) {    return;  }  List<URLStreamHandlerFactory> factories=instance.userFactories;  for (  URLStreamHandlerFactory factory : factories) {    ClassLoader factoryLoader=factory.getClass().getClassLoader();    while (factoryLoader != null) {      if (classLoader.equals(factoryLoader)) {        factories.remove(factory);        break;      }      factoryLoader=factoryLoader.getParent();    }  }}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream_Ljava_lang_String01(){  CertificateFactorySpi certFactorySpi=new MyCertificateFactorySpi();  MyCertificateFactorySpi.putMode(true);  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    certFactorySpi.engineGenerateCertPath(dis,"");    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }  try {    assertNull(certFactorySpi.engineGenerateCertPath(dis,"encoding"));  } catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  public Time createTime(Date start,Date stop) throws SdpException {  TimeField timeImpl=new TimeField();  timeImpl.setStart(start);  timeImpl.setStop(stop);  return timeImpl;}  }
class C{  protected boolean checkIfBacktrackContextMatch(GlyphLine line,ContextualSubstRule rule){  int j;  OpenTableLookup.GlyphIndexer gidx=new OpenTableLookup.GlyphIndexer();  gidx.line=line;  gidx.idx=line.idx;  for (j=0; j < rule.getBacktrackContextLength(); ++j) {    gidx.previousGlyph(openReader,lookupFlag);    if (gidx.glyph == null || !rule.isGlyphMatchesBacktrack(gidx.glyph.getCode(),j)) {      break;    }  }  return j == rule.getBacktrackContextLength();}  }
class C{  public void initializeLogRetentionPolicyConfig() throws ConfigException, InitializationException {  RootCfg root=serverContext.getRootConfig();  root.addLogRetentionPolicyAddListener(this);  root.addLogRetentionPolicyDeleteListener(this);  for (  String name : root.listLogRetentionPolicies()) {    LogRetentionPolicyCfg config=root.getLogRetentionPolicy(name);    RetentionPolicy<LogRetentionPolicyCfg> RetentionPolicy=getRetentionPolicy(config);    DirectoryServer.registerRetentionPolicy(config.dn(),RetentionPolicy);  }}  }
class C{  public Object clone(){  UserSelfCheckCondition theClone=null;  try {    theClone=(UserSelfCheckCondition)super.clone();    theClone.properties=Collections.unmodifiableMap(com.sun.identity.sm.SMSUtils.copyAttributes(properties));  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return theClone;}  }
class C{  public void paintTextAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  void drawShape(Graphics g,CSS.Value type,int ax,int ay,int aw,int ah,float align){  int gap=isLeftToRight ? -(bulletgap + 8) : (aw + bulletgap);  int x=ax + gap;  int y=Math.max(ay,ay + (int)(align * ah) - 8);  if (type == CSS.Value.SQUARE) {    g.drawRect(x,y,8,8);  } else   if (type == CSS.Value.CIRCLE) {    g.drawOval(x,y,8,8);  } else {    g.fillOval(x,y,8,8);  }}  }
class C{  public double dsn_to_board(double p_val){  return p_val * scale_factor;}  }
class C{  void onDragEnter(){  mDragging=true;}  }
class C{  public boolean forced_pad(ShapeTile p_pad_shape,BrdFromSide p_from_side,int p_layer,NetNosList p_net_no_arr,int p_cl_type,boolean p_copper_sharing_allowed,Collection<BrdItem> p_ignore_items,int p_max_recursion_depth,int p_max_via_recursion_depth){  if (p_pad_shape.is_empty()) {    System.out.println("ShoveTraceAux.forced_pad: p_pad_shape is empty");    return true;  }  if (!p_pad_shape.is_contained_in(r_board.get_bounding_box())) {    r_board.shove_fail_obstacle_set(r_board.get_outline());    return false;  }  if (!r_board.move_drill_algo.shove_vias(p_pad_shape,p_from_side,p_layer,p_net_no_arr,p_cl_type,p_ignore_items,p_max_recursion_depth,p_max_via_recursion_depth,false)) {    return false;  }  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  AlgoShoveTraceEntries shape_entries=new AlgoShoveTraceEntries(p_pad_shape,p_layer,p_net_no_arr,p_cl_type,p_from_side,r_board);  Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(p_pad_shape,p_layer,NetNosList.EMPTY,p_cl_type);  if (p_ignore_items != null)   obstacles.removeAll(p_ignore_items);  boolean obstacles_shovable=shape_entries.store_items(obstacles,true,p_copper_sharing_allowed) && shape_entries.shove_via_list.isEmpty();  if (!obstacles_shovable) {    r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());    return false;  }  int trace_piece_count=shape_entries.substitute_trace_count();  if (trace_piece_count == 0)   return true;  if (p_max_recursion_depth <= 0) {    r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());    return false;  }  boolean tails_exist_before=r_board.contains_trace_tails(obstacles,p_net_no_arr);  shape_entries.cutout_traces(obstacles);  for (; ; ) {    BrdTracep curr_substitute_trace=shape_entries.next_substitute_trace_piece();    if (curr_substitute_trace == null)     break;    if (curr_substitute_trace.corner_first().equals(curr_substitute_trace.corner_last())) {      continue;    }    NetNosList curr_net_no_arr=curr_substitute_trace.net_nos;    for (int index=0; index < curr_substitute_trace.tile_shape_count(); ++index) {      BrdShapeAndFromSide curr=new BrdShapeAndFromSide(curr_substitute_trace,index,false);      if (!r_board.shove_trace_algo.shove_trace_insert(curr.shape,curr.from_side,p_layer,curr_net_no_arr,curr_substitute_trace.clearance_idx(),p_ignore_items,p_max_recursion_depth - 1,p_max_via_recursion_depth,0)) {        return false;      }    }    for (int index=0; index < curr_substitute_trace.corner_count(); ++index) {      r_board.changed_area_join(curr_substitute_trace.polyline().corner_approx(index),p_layer);    }    PlaPoint[] end_corners=null;    if (!tails_exist_before) {      end_corners=new PlaPoint[2];      end_corners[0]=curr_substitute_trace.corner_first();      end_corners[1]=curr_substitute_trace.corner_last();    }    r_board.insert_item(curr_substitute_trace);    curr_substitute_trace.normalize(r_board.changed_area.get_area(p_layer));    if (tails_exist_before)     continue;    for (int index=0; index < 2; ++index) {      BrdTracep tail=r_board.get_trace_tail(end_corners[index],p_layer,curr_net_no_arr);      if (tail == null)       continue;      r_board.remove_items_unfixed(tail.get_connection_items(BrdStopConnection.VIA));      for (      int curr_net_no : curr_net_no_arr) {        r_board.combine_traces(curr_net_no);      }    }  }  return true;}  }
class C{  public boolean isUsable(ServerManagedObject<?> managedObject,Collection<LocalizableMessage> unacceptableReasons) throws ConfigException {  return true;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=s.putFields();  fields.put("buf",buf);  fields.put("len",len);  fields.put("origLen",origLen);  fields.put("blob",blob instanceof Serializable ? blob : null);  s.writeFields();}  }
class C{  public void stopWork(){  setThreadStateIfNotShuttingDown(ThreadState.IDLE);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.ResponseType createResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.ResponseTypeImpl();}  }
class C{  private void searchEntry(String baseDN,ResultCode expectedRC) throws Exception {  SearchRequest request=newSearchRequest(DN.valueOf(baseDN),SearchScope.BASE_OBJECT);  SearchOperation search=getRootConnection().processSearch(request);  assertEquals(search.getResultCode(),expectedRC);}  }
class C{  public Hopper(BlockFace facingDirection,boolean isActive){  super(Material.HOPPER);  setFacingDirection(facingDirection);  setActive(isActive);}  }
class C{  public Builder withEventTopicsMetaData(EventTopicsMetaData eventTopicsMetaData){  this.eventTopicsMetaData=eventTopicsMetaData;  return this;}  }
class C{  public void paintToggleButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public PolicyPropertyXMLBuilder(Condition condition,AMModel model){  this.model=model;  this.condition=condition;}  }
class C{  final void reject(Runnable command){  handler.rejectedExecution(command,this);}  }
class C{  public StateInteractive left_button_clicked(PlaPointFloat p_location){  return add_corner(p_location);}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_TypeCode);}  }
class C{  public final void popQuick(){  m_firstFree--;  m_map[m_firstFree]=null;}  }
class C{  boolean allowsTrailingArguments(){  return allowsTrailingArguments;}  }
class C{  protected void onDisconnected(){}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws SOAPException {  return find(factoryId,fallbackClassName,true);}  }
class C{  public boolean validate(Set<String> values){  boolean valid=true;  if (!CollectionUtils.isEmpty(values)) {    for (    String value : values) {      if (!valid) {        break;      }      if (value.length() > 0) {        Matcher m=pattern.matcher(value);        valid=m.matches();      }    }  }  if (valid) {    valid=checkForValidIntegerKeyInValue(values);  }  return valid;}  }
class C{  public SubResourceCollection useClientDnNaming(final String dnAttribute){  this.namingStrategy=new DnNamingStrategy(dnAttribute);  return this;}  }
class C{  public void delete(String tokenId,String etag,ResultHandler<String,?> handler) throws CoreTokenException {  Reject.ifNull(tokenId);  try {    taskExecutor.execute(tokenId,taskFactory.delete(tokenId,etag,handler));  } catch (  DataLayerException e) {    throw new CoreTokenException("Error in data layer",e);  }}  }
class C{  public void testDivideBigDecimal1(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="-5E+4";  int resScale=-4;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void writeTo(ASN1Writer writer,short protocolVersion) throws IOException {  if (protocolVersion >= ProtocolVersion.REPLICATION_PROTOCOL_V7) {    for (    CSN csn : serverIdToCSN.values()) {      writer.writeOctetString(csn.toByteString());    }  } else {    for (    CSN csn : serverIdToCSN.values()) {      writer.writeOctetString(csn.toString());    }  }}  }
class C{  @Override public synchronized void reset() throws IOException {  fbIndex=markFbIndex;  if (markedAtStart) {    firstBytes=null;  }  in.reset();}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public static JsonValue toJson(RecordProperties recordProperties){  JsonObject jsonProperties=JsonValueBuilder.jsonValue();  jsonProperties.put(RecordConstants.ISSUE_ID_LABEL,recordProperties.issueID);  jsonProperties.put(RecordConstants.REFERENCE_ID_LABEL,recordProperties.referenceID);  jsonProperties.put(RecordConstants.DESCRIPTION_LABEL,recordProperties.description);  jsonProperties.put(RecordConstants.ZIP_ENABLE_LABEL,recordProperties.zipEnable);  jsonProperties.put(RecordConstants.THREAD_DUMP_LABEL,toThreadDumpJson(recordProperties).asMap());  jsonProperties.put(RecordConstants.CONFIG_EXPORT_LABEL,toConfigExportJson(recordProperties).asMap());  jsonProperties.put(RecordConstants.DEBUG_LOGS_LABEL,toDebugLogsJson(recordProperties).asMap());  return jsonProperties.build();}  }
class C{  @Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  final String path=getRelativePath(req);  if (isSpecialPath(path)) {    resp.sendError(WebdavStatus.SC_NOT_FOUND);    return;  }  final String method=req.getMethod();  if (debug > 0) {    log("[" + method + "] "+ path);  }  if (method.equals(METHOD_PROPFIND)) {    doPropfind(req,resp);  } else   if (method.equals(METHOD_PROPPATCH)) {    doProppatch(req,resp);  } else   if (method.equals(METHOD_MKCOL)) {    doMkcol(req,resp);  } else   if (method.equals(METHOD_COPY)) {    doCopy(req,resp);  } else   if (method.equals(METHOD_MOVE)) {    doMove(req,resp);  } else   if (method.equals(METHOD_LOCK)) {    doLock(req,resp);  } else   if (method.equals(METHOD_UNLOCK)) {    doUnlock(req,resp);  } else {    super.service(req,resp);  }}  }
class C{  SIPTransactionErrorEvent(SIPTransaction sourceTransaction,int transactionErrorID){  super(sourceTransaction);  errorID=transactionErrorID;}  }
class C{  public ApiParameterAssert hasI18nDescriptions(){  for (  Parameter parameter : actual) {    assertI18nDescription(parameter.description(),annotatedClass);  }  return this;}  }
class C{  public HasMetadata convertKubernetesItemToOpenShift(HasMetadata item){  KindAndName key=new KindAndName(item);  HasMetadata answer=openshiftDependencyResources.get(key);  if (answer == null && item instanceof Deployment) {    key=new KindAndName("DeploymentConfig",getName(item));    answer=openshiftDependencyResources.get(key);  }  return answer;}  }
class C{  public static boolean isFileTypeSupported(AudioFileFormat.Type fileType){  List providers=getAudioFileWriters();  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType)) {      return true;    }  }  return false;}  }
class C{  void initialize() throws Exception {  for (  String name : propertyStringValues.keySet()) {    definition.getPropertyDefinition(name);  }}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  public static String readString(DataInput di,int charsToRead) throws IOException {  final byte[] buf=new byte[charsToRead];  di.readFully(buf);  return new String(buf);}  }
class C{  public long position(byte[] pattern,long start) throws SerialException, SQLException {  isValid();  if (start < 1 || start > len) {    return -1;  }  int pos=(int)start - 1;  int i=0;  long patlen=pattern.length;  while (pos < len) {    if (pattern[i] == buf[pos]) {      if (i + 1 == patlen) {        return (pos + 1) - (patlen - 1);      }      i++;      pos++;    } else     if (pattern[i] != buf[pos]) {      pos++;    }  }  return -1;}  }
class C{  static void sort(byte[] a,int left,int right){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_BYTE) {    int[] count=new int[NUM_BYTE_VALUES];    for (int i=left - 1; ++i <= right; count[a[i] - Byte.MIN_VALUE]++)     ;    for (int i=NUM_BYTE_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      byte value=(byte)(i + Byte.MIN_VALUE);      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    for (int i=left, j=i; i < right; j=++i) {      byte ai=a[i + 1];      while (ai < a[j]) {        a[j + 1]=a[j];        if (j-- == left) {          break;        }      }      a[j + 1]=ai;    }  }}  }
class C{  public SessionInfo makeSessionInfo(InternalSession internalSession,SessionID sid) throws SessionException {  SessionInfo info=internalSession.toSessionInfo();  TokenRestriction restriction=internalSession.getRestrictionForToken(sid);  if (restriction != null) {    try {      info.getProperties().put(TOKEN_RESTRICTION_PROP,TokenRestrictionFactory.marshal(restriction));    } catch (    Exception e) {      throw new SessionException(e);    }  } else   if (!sid.equals(internalSession.getID())) {    throw new IllegalArgumentException("Session id mismatch");  }  info.setSessionID(sid.toString());  return info;}  }
class C{  public void convert(MessageBytes mb,boolean query) throws IOException {switch (mb.getType()) {case MessageBytes.T_STR:    String strValue=mb.toString();  if (strValue == null) {    return;  }try {  mb.setString(convert(strValue,query));} catch (RuntimeException ex) {  throw new DecodeException(ex.getMessage());}break;case MessageBytes.T_CHARS:CharChunk charC=mb.getCharChunk();convert(charC,query);break;case MessageBytes.T_BYTES:ByteChunk bytesC=mb.getByteChunk();convert(bytesC,query);break;}}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UserDao.dropTable(db,ifExists);}  }
class C{  @Override public Promise<QueryResponse,ResourceException> filterQuery(Context context,QueryRequest request,QueryResourceHandler handler,RequestHandler next){  CrestAuditor auditor=newAuditor(context,request);  auditor.auditAccessAttempt();  return auditResponse(next.handleQuery(context,request,handler),auditor,request);}  }
class C{  public static SessionID generateStatelessSessionID(SessionServerConfig serverConfig,String domain,String jwt) throws SessionException {  Reject.ifNull(jwt);  String siteID=serverConfig.getPrimaryServerID();  String primaryID=getPrimaryId(serverConfig);  LegacySessionIDExtensions ext=new LegacySessionIDExtensions(primaryID,siteID,null);  final String sessionId=makeSessionID("",ext,jwt);  return new SessionID(sessionId,serverConfig.getLocalServerID(),domain);}  }
class C{  public FramedAppleTalkZoneAttribute(byte[] octets){  super(octets);  this.zone=new String(octets,2,octets.length - 2);}  }
class C{  public boolean equals(Object object){  boolean objectsEqual=false;  if (object == this) {    objectsEqual=true;  } else   if (object != null && object.getClass().equals(getClass())) {    QualifiedCollection castObject=(QualifiedCollection)object;    if ((castObject.isExclusive() == isExclusive()) && (castObject.getCollection().equals(getCollection()))) {      objectsEqual=true;    }  }  return objectsEqual;}  }
class C{  private List<Long> addNegativeBuckets(List<Long> bucketList){  logger.debug("Adding negative buckets...");  List<Long> negBuckets=new ArrayList<>(bucketList.size());  int counter=0;  for (  Long l : bucketList) {    if (l.longValue() != 0) {      negBuckets.add(l * -1);      if (counter % 1000 == 0) {        logger.debug("Added -" + l + " from index: "+ counter);      }      counter++;    }  }  logger.debug("Negative buckets generated.");  negBuckets.addAll(bucketList);  logger.debug("Negative buckets added.");  logger.debug("Done adding negative buckets...");  return negBuckets;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported02.class,args);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  List schemaNames=rc.getOption(ARGUMENT_SCHEMA_NAMES);  IOutput outputWriter=getOutputWriter();  if (subSchemaName == null) {    subSchemaName="/";  }  String[] params=new String[4];  params[0]=serviceName;  params[1]=schemaType;  params[2]=subSchemaName;  ServiceSchema ss=getServiceSchema();  String schemaName="";  try {    for (Iterator iter=schemaNames.iterator(); iter.hasNext(); ) {      schemaName=(String)iter.next();      params[3]=schemaName;      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_SUB_SCHEMA",params);      ss.removeSubSchema(schemaName);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_SUB_SCHEMA",params);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-subschema-succeed"),(Object[])params));    }  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,schemaName,e.getMessage()};    debugError("RemoveSubSchema.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SUB_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,schemaName,e.getMessage()};    debugError("RemoveSubSchema.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SUB_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private void executeFallbacks(TransformerImpl transformer) throws TransformerException {  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK) {      try {        transformer.pushElemTemplateElement(child);        ((ElemFallback)child).executeFallback(transformer);      }  finally {        transformer.popElemTemplateElement();      }    }  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (  E e : this)   s.writeObject(e);  s.writeObject(null);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LMNElement createLMNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LMNElementImpl();}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getContext(),getRequest(),getResponse());}  }
class C{  protected boolean handleDirectory(File directory,int depth,Collection<T> results) throws IOException {  return true;}  }
class C{  private <C extends ConfigurationClient,S extends Configuration>void processRelation(ManagedObjectPath<?,?> path,OptionalRelationDefinition<C,S> r){  AbstractManagedObjectDefinition<C,S> d=r.getChildDefinition();  helpHandler.registerManagedObjectDefinition(d);  processPath(path.child(r,d));  for (  AbstractManagedObjectDefinition<? extends C,? extends S> c : d.getAllChildren()) {    helpHandler.registerManagedObjectDefinition(c);    processPath(path.child(r,c));  }}  }
class C{  public boolean isRollover(){  Boolean rollover=(Boolean)getClientProperty("JToolBar.isRollover");  if (rollover != null) {    return rollover.booleanValue();  }  return false;}  }
class C{  protected void layout(int width,int height){  super.layout(Integer.MAX_VALUE - 1,height);}  }
class C{  @Override public LdapPromise<Void> abandonAsync(final AbandonRequest request){  throw new UnsupportedOperationException("Abandon requests are not supported for synchronous connections");}  }
class C{  public URI(){}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node nodeV;  String value;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  nodeV=nameNode.getFirstChild();  value=nodeV.getNodeValue();  assertEquals("textNodeValue","Roger\n Jones",value);}  }
class C{  @JsonIgnore public Entitlement asEntitlement(){  return entitlement;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbefore.class,args);}  }
class C{  public TemplateEntry(Branch branch){  this.branch=branch;  dn=branch.getBranchDN();  template=null;  parentDN=null;}  }
class C{  private Object checkCast(Object value,Class type) throws SAXException {  if (!type.isInstance(value)) {    throw new SAXException("Expected type " + type + " got "+ value.getClass());  }  return value;}  }
class C{  public void deleteDynamicGroups(Set dynamicGroupDNs) throws AMException, SSOException {  Iterator iter=dynamicGroupDNs.iterator();  while (iter.hasNext()) {    String dynamicGroupDN=(String)iter.next();    AMDynamicGroup dynamicGroup=new AMDynamicGroupImpl(super.token,dynamicGroupDN);    dynamicGroup.delete();  }}  }
class C{  public InvalidSeq(String reason){  super(reason);}  }
class C{  public String toString(){  return this.toString(true,true);}  }
class C{  private String encodeSidURL(String url,String cookieStr,short encodingScheme,boolean escape){  String uri=url;  String qString=null;  int index=url.indexOf(QUERY);  if (index != -1) {    uri=url.substring(0,index);    qString=url.substring(index + 1);  }  String encodedURL=url;  if (encodingScheme == SessionUtils.QUERY) {    encodedURL=encodeSidInQueryString(uri,qString,cookieStr,escape);  } else {    encodedURL=encodeSidInURLPath(uri,qString,cookieStr,encodingScheme);  }  if (debug.messageEnabled()) {    debug.message("encodeSidURL :: URI  :" + uri);    debug.message("encodeSidURL :: qString :" + qString);    debug.message("encodeSidURL :: cookieStr:" + cookieStr);    debug.message("encodeSidURL :: URL  :" + encodedURL);  }  return encodedURL;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  int nodeType;  Element genElement;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  genList=gender.getChildNodes();  gen=genList.item(0);  assertNotNull("genNotNull",gen);  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("genElementNotNull",genElement);{    boolean success=false;    try {      genElement.removeAttribute("domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void testCase23(){  byte aBytes[]={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  byte bBytes[]={-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  int bSign=1;  byte rBytes[]={1,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
