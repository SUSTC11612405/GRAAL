class C{  public VcfEvalParamsBuilder callsFile(final File calls){  mCallsFile=calls;  return self();}  }
class C{  public static void closeQuietly(final LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  public MaximumParetoFrontError(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  public ModbusUDPTransaction(){}  }
class C{  public String toString(){  StringBuffer postFix=new StringBuffer();  if (logLine > 0) {    postFix.append(" at line " + getLogLine());  }  if (startTime != null) {    postFix.append(" around " + startTime);  }  return (getName() + postFix);}  }
class C{  public DeviceAutomator pressSearch(){  mDevice.pressSearch();  return this;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  return true;}  }
class C{  public Instrumenter attachAllMetricCollectors(){  attachHypervolumeCollector();  attachGenerationalDistanceCollector();  attachInvertedGenerationalDistanceCollector();  attachSpacingCollector();  attachAdditiveEpsilonIndicatorCollector();  attachContributionCollector();  attachR1Collector();  attachR2Collector();  attachR3Collector();  return this;}  }
class C{  private void enableSubmitIfReady(){  boolean isReady=false;  if (etUsername.getText().toString().length() >= 1 && etPassword.getText().toString().length() >= 1) {    isReady=true;  }  if (isReady) {    btnLogin.setBackgroundColor(Color.parseColor("#11375B"));    btnLogin.setTextColor(Color.WHITE);    btnLogin.setEnabled(true);  } else {    btnLogin.setBackgroundColor(Color.parseColor("#76756f"));    btnLogin.setTextColor(Color.parseColor("#343331"));    btnLogin.setEnabled(false);  }}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){  declarer.declare(new Fields("entity","profile","message"));}  }
class C{  public MatchQueryBuilder analyzer(String analyzer){  this.analyzer=analyzer;  return this;}  }
class C{  private Statement createBlankLineStatementWithCursorPosition(ASTRewrite rewrite){  Statement blankLineStatement=(Statement)rewrite.createStringPlaceholder("",ASTNode.EMPTY_STATEMENT);  setEndPosition(rewrite.track(blankLineStatement));  return blankLineStatement;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ","+ gamma+ ","+ cut+ ")";}  }
class C{  public IndexDescriptor addIndex(String idxName,GridQueryIndexType type){  IndexDescriptor idx=new IndexDescriptor(type);  if (indexes.put(idxName,idx) != null)   throw new CacheException("Index with name '" + idxName + "' already exists.");  return idx;}  }
class C{  public static boolean isYesterday(long sysTime,long dateTime){  long yesterday=sysTime - DAY;  String s=getTime(yesterday,DATE_FORMAT);  long l=getTime(s,DATE_FORMAT);  return dateTime - l >= 0;}  }
class C{  public BiosCommandResult isiResyncPrep(StorageSystem primarySystem,StorageSystem secondarySystem,String policyName,TaskCompleter completer) throws IsilonException {  _log.info("IsilonMirrorOperations -  isiResyncPrep source system {} and dest system {} - start ",primarySystem.getLabel(),secondarySystem.getLabel());  IsilonApi isiPrimary=getIsilonDevice(primarySystem);  IsilonSyncJob job=new IsilonSyncJob();  job.setId(policyName);  job.setAction(Action.resync_prep);  IsilonSyncPolicy policy=isiPrimary.getReplicationPolicy(policyName);  IsilonApi isiSecondary=null;  IsilonSyncTargetPolicy targetPolicy=null;  if (!policy.getEnabled()) {    policy=doEnableReplicationPolicy(isiPrimary,policyName);  }  isiSecondary=getIsilonDevice(secondarySystem);  targetPolicy=isiSecondary.getTargetReplicationPolicy(policyName);  if (targetPolicy.getFoFbState().equals(FOFB_STATES.resync_policy_created) && targetPolicy.getLastJobState().equals(JobState.finished)) {    return BiosCommandResult.createSuccessfulResult();  }  if (true == policy.getEnabled()) {    isiPrimary.modifyReplicationJob(job);    IsilonSyncJobResync isilonSyncJobResync=new IsilonSyncJobResync(policyName,secondarySystem.getId(),completer,policyName);    try {      ControllerServiceImpl.enqueueJob(new QueueJob(isilonSyncJobResync));      return BiosCommandResult.createPendingResult();    } catch (    Exception ex) {      _log.error("Resync-Prep to Secondary Cluster Failed",ex);      ServiceError error=DeviceControllerErrors.isilon.jobFailed("Resync-Prep FAILED  as : " + ex.getMessage());      if (completer != null) {        completer.error(_dbClient,error);      }      return BiosCommandResult.createErrorResult(error);    }  }  return BiosCommandResult.createSuccessfulResult();}  }
class C{  public AbstractSelectedAction(DrawingEditor editor){  setEditor(editor);}  }
class C{  public int depth(){  final String path=this.path;  final int size=path.length();  assert size >= 1 && path.charAt(0) == SLASH_CHAR : "Expects absolute path: " + path;  if (size == 1)   return 0;  int depth=1;  for (int i=1; i < size; i++)   if (path.charAt(i) == SLASH_CHAR)   depth++;  return depth;}  }
class C{  public static String rtrim(String str,String defaultValue){  if (str == null)   return defaultValue;  int len=str.length();  while ((0 < len) && (str.charAt(len - 1) <= ' ')) {    len--;  }  return (len < str.length()) ? str.substring(0,len) : str;}  }
class C{  public static boolean elementIsInSignature11Space(Element element,String localName){  if (element == null) {    return false;  }  return Constants.SignatureSpec11NS.equals(element.getNamespaceURI()) && element.getLocalName().equals(localName);}  }
class C{  private String addListValidation(StringBuffer sb,int AD_Reference_ID,String columnName,boolean nullable){  StringBuffer retValue=new StringBuffer();  retValue.append("\n/** ").append(columnName).append(" AD_Reference_ID=").append(AD_Reference_ID).append(" */\n").append("public static final int ").append(columnName.toUpperCase()).append("_AD_Reference_ID=").append(AD_Reference_ID).append(";");  boolean found=false;  StringBuffer values=new StringBuffer("Reference_ID=").append(AD_Reference_ID);  StringBuffer statement=new StringBuffer();  if (nullable)   statement.append("if (").append(columnName).append(" == null");  String sql="SELECT Value, Name FROM AD_Ref_List WHERE AD_Reference_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Reference_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String value=rs.getString(1);      values.append(" - ").append(value);      if (statement.length() == 0)       statement.append("if (").append(columnName).append(".equals(\"").append(value).append("\")"); else       statement.append(" || ").append(columnName).append(".equals(\"").append(value).append("\")");      if (!found) {        found=true;        sb.append("if (").append(columnName).append(" == null)" + " throw new IllegalArgumentException (\"").append(columnName).append(" is mandatory\");");      }      String name=rs.getString(2);      char[] nameArray=name.toCharArray();      StringBuffer nameClean=new StringBuffer();      boolean initCap=true;      for (int i=0; i < nameArray.length; i++) {        char c=nameArray[i];        if (Character.isJavaIdentifierPart(c)) {          if (initCap)           nameClean.append(Character.toUpperCase(c)); else           nameClean.append(c);          initCap=false;        } else {          if (c == '+')           nameClean.append("Plus"); else           if (c == '-')           nameClean.append("_"); else           if (c == '>') {            if (name.indexOf('<') == -1)             nameClean.append("Gt");          } else           if (c == '<') {            if (name.indexOf('>') == -1)             nameClean.append("Le");          } else           if (c == '!')           nameClean.append("Not"); else           if (c == '=')           nameClean.append("Eq"); else           if (c == '~')           nameClean.append("Like");          initCap=true;        }      }      retValue.append("/** ").append(name).append(" = ").append(value).append(" */\n");      retValue.append("public static final String ").append(columnName.toUpperCase()).append("_").append(nameClean).append(" = \"").append(value).append("\";");    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    found=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  statement.append(")" + "; " + "else "+ "throw new IllegalArgumentException (\"").append(columnName).append(" Invalid value - \" + ").append(columnName).append(" + \" - ").append(values).append("\");");  if (found && !columnName.equals("EntityType"))   sb.append(statement);  return retValue.toString();}  }
class C{  protected final IntConstantOperand CAL16(int i){  return IC(PPCMaskLower16(i));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  MediaNode[] rv=node != null ? node.getChildren() : null;  return (rv == null) ? null : rv.clone();}  }
class C{  public CountRequest types(String... types){  this.types=types;  return this;}  }
class C{  public PutAllPRMessage createPRMessagesNotifyOnly(int bucketId){  final EntryEventImpl event=getBaseEvent();  PutAllPRMessage prMsg=new PutAllPRMessage(bucketId,putAllDataSize,true,event.isPossibleDuplicate(),!event.isGenerateCallbacks(),event.getCallbackArgument());  if (event.getContext() != null) {    prMsg.setBridgeContext(event.getContext());  }  for (int i=0; i < putAllDataSize; i++) {    prMsg.addEntry(putAllData[i]);  }  return prMsg;}  }
class C{  protected void loadTableOIS(Vector<?> data){  dialog.getMiniTable().removeMiniTableSelectionListener(dialog);  DefaultTableModel model=new DefaultTableModel(data,getOISColumnNames());  dialog.getMiniTable().setModel(model);  configureMiniTable(dialog.getMiniTable());  dialog.getMiniTable().addMiniTableSelectionListener(dialog);}  }
class C{  public JavaModelException(CoreException exception){  super(exception);  this.nestedCoreException=exception;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(getURI(url)),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public FeatureType createFeatureType(){  FeatureTypeImpl featureType=new FeatureTypeImpl();  return featureType;}  }
class C{  protected DataAccessException convertJdbcAccessException(SQLException ex){  SQLExceptionTranslator translator=getJdbcExceptionTranslator();  if (translator == null) {    translator=getDefaultJdbcExceptionTranslator();  }  return translator.translate("Hibernate-related JDBC operation",null,ex);}  }
class C{  public RemoteWarehouseServiceImpl(final DtoWarehouseService service,final ReindexService reindexService,final FederationFacade federationFacade){  super(service);  this.dtoWarehouseService=service;  this.reindexService=reindexService;  this.federationFacade=federationFacade;}  }
class C{  public void addChooserPanel(AbstractColorChooserPanel panel){  AbstractColorChooserPanel[] oldPanels=getChooserPanels();  AbstractColorChooserPanel[] newPanels=new AbstractColorChooserPanel[oldPanels.length + 1];  System.arraycopy(oldPanels,0,newPanels,0,oldPanels.length);  newPanels[newPanels.length - 1]=panel;  setChooserPanels(newPanels);}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  @Get @Put @Post @Delete public String noOp(String postdata){  setStatus(Status.SUCCESS_OK);  return "{\"status\":\"ok\"}";}  }
class C{  public void increment(){  mLoopPhase+=mLoopFrequency;  unwrapPhase();}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.BOOTSTRAP_MODULE;}  }
class C{  @SuppressWarnings("unchecked") public synchronized List<Vertex> allActive(){  UnitOfWork unitOfWork=this.entityManager.unwrap(JpaEntityManager.class).getUnitOfWork();  try {    return unitOfWork.getIdentityMapAccessor().getAllFromIdentityMap(null,BasicVertex.class,null,null);  } catch (  Exception exception) {    return new ArrayList<Vertex>();  }}  }
class C{  public final static byte[] decode(byte[] sArr){  int sLen=sArr.length;  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i] & 0xff] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i] & 0xff] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++] & 0xff];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  private void sb5(int a,int b,int c,int d){  int t1=~a;  int t2=a ^ b;  int t3=a ^ d;  int t4=c ^ t1;  int t5=t2 | t3;  X0=t4 ^ t5;  int t7=d & X0;  int t8=t2 ^ X0;  X1=t7 ^ t8;  int t10=t1 | X0;  int t11=t2 | t7;  int t12=t3 ^ t10;  X2=t11 ^ t12;  X3=(b ^ t7) ^ (X1 & t12);}  }
class C{  public MarketService progress(int id){  this.progress=id;  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TMEMBER___GET_CONTAINING_TYPE:    return getContainingType();case TypesPackage.TMEMBER___GET_MEMBER_ACCESS_MODIFIER:  return getMemberAccessModifier();case TypesPackage.TMEMBER___GET_MEMBER_TYPE:return getMemberType();case TypesPackage.TMEMBER___IS_FIELD:return isField();case TypesPackage.TMEMBER___IS_GETTER:return isGetter();case TypesPackage.TMEMBER___IS_SETTER:return isSetter();case TypesPackage.TMEMBER___IS_ACCESSOR:return isAccessor();case TypesPackage.TMEMBER___IS_METHOD:return isMethod();case TypesPackage.TMEMBER___IS_CONSTRUCTOR:return isConstructor();case TypesPackage.TMEMBER___IS_OPTIONAL:return isOptional();case TypesPackage.TMEMBER___IS_ABSTRACT:return isAbstract();case TypesPackage.TMEMBER___IS_READABLE:return isReadable();case TypesPackage.TMEMBER___IS_WRITEABLE:return isWriteable();case TypesPackage.TMEMBER___GET_MEMBER_AS_STRING:return getMemberAsString();case TypesPackage.TMEMBER___IS_FINAL:return isFinal();case TypesPackage.TMEMBER___IS_STATIC:return isStatic();case TypesPackage.TMEMBER___IS_POLYFILLED:return isPolyfilled();}return super.eInvoke(operationID,arguments);}  }
class C{  public ServiceCall<Void> deleteModel(String modelId){  if ((modelId == null) || modelId.isEmpty()) {    throw new IllegalArgumentException("modelId cannot be null or empty");  }  Request request=RequestBuilder.delete(String.format(PATH_MODEL,modelId)).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public Reflection(){  classPool=null;  converter=new CodeConverter();}  }
class C{  public UnsupportedOptionsException(String s){  super(s);}  }
class C{  public boolean isVersionEqualOrAbove(int majorVersion,int minorVersion){  return serverVersion.isEqualOrAbove(majorVersion,minorVersion);}  }
class C{  public void zoomDomainAxes(double x,double y,double lowerPercent,double upperPercent){}  }
class C{  protected boolean isEmptyTag(String tagName){  return false;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:55.868 -0500",hash_original_method="74620372DF35852D8DF70C07592BB0DB",hash_generated_method="C57146249214A5E939B067E9007562C8") public static Uri addCall(CallerInfo ci,Context context,String number,int presentation,int callType,long start,int duration){  final ContentResolver resolver=context.getContentResolver();  if (presentation == Connection.PRESENTATION_RESTRICTED) {    number=CallerInfo.PRIVATE_NUMBER;    if (ci != null)     ci.name="";  } else   if (presentation == Connection.PRESENTATION_PAYPHONE) {    number=CallerInfo.PAYPHONE_NUMBER;    if (ci != null)     ci.name="";  } else   if (TextUtils.isEmpty(number) || presentation == Connection.PRESENTATION_UNKNOWN) {    number=CallerInfo.UNKNOWN_NUMBER;    if (ci != null)     ci.name="";  }  ContentValues values=new ContentValues(5);  values.put(NUMBER,number);  values.put(TYPE,Integer.valueOf(callType));  values.put(DATE,Long.valueOf(start));  values.put(DURATION,Long.valueOf(duration));  values.put(NEW,Integer.valueOf(1));  if (callType == MISSED_TYPE) {    values.put(IS_READ,Integer.valueOf(0));  }  if (ci != null) {    values.put(CACHED_NAME,ci.name);    values.put(CACHED_NUMBER_TYPE,ci.numberType);    values.put(CACHED_NUMBER_LABEL,ci.numberLabel);  }  if ((ci != null) && (ci.person_id > 0)) {    final Cursor cursor;    if (ci.normalizedNumber != null) {      final String normalizedPhoneNumber=ci.normalizedNumber;      cursor=resolver.query(Phone.CONTENT_URI,new String[]{Phone._ID},Phone.CONTACT_ID + " =? AND " + Phone.NORMALIZED_NUMBER+ " =?",new String[]{String.valueOf(ci.person_id),normalizedPhoneNumber},null);    } else {      final String phoneNumber=ci.phoneNumber != null ? ci.phoneNumber : number;      cursor=resolver.query(Phone.CONTENT_URI,new String[]{Phone._ID},Phone.CONTACT_ID + " =? AND " + Phone.NUMBER+ " =?",new String[]{String.valueOf(ci.person_id),phoneNumber},null);    }    if (cursor != null) {      try {        if (cursor.getCount() > 0 && cursor.moveToFirst()) {          final Uri feedbackUri=DataUsageFeedback.FEEDBACK_URI.buildUpon().appendPath(cursor.getString(0)).appendQueryParameter(DataUsageFeedback.USAGE_TYPE,DataUsageFeedback.USAGE_TYPE_CALL).build();          resolver.update(feedbackUri,new ContentValues(),null,null);        }      }  finally {        cursor.close();      }    }  }  Uri result=resolver.insert(CONTENT_URI,values);  removeExpiredEntries(context);  return result;}  }
class C{  public boolean isError(){  return m_isError;}  }
class C{  private void constraints_67_MemberOverride_checkEntry(MemberMatrix mm,Collection<TMember> membersMissingOverrideAnnotation){  for (  TMember m : mm.owned()) {    for (    TMember s : mm.inherited()) {      if (checkAccessibilityAndOverrideCompatibility(RedefinitionType.overridden,m,s,false,mm) == OverrideCompatibilityResult.COMPATIBLE) {        if (s.isField() && m.isAccessor()) {          if (!mm.hasOwnedAccessorPair()) {            messageFieldOverrideNeedsAccessorPair(m,s);            continue;          }        }        if (!m.isDeclaredOverride()) {          membersMissingOverrideAnnotation.add(m);        }      }    }    if (m.isAccessor() && mm.hasMixedAccessorPair()) {      if (!m.getContainingType().isStaticPolyfill()) {        messageMissingOwnedAccessor((FieldAccessor)m);      }    }  }}  }
class C{  public void preEvaluationStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].preEvaluationStatistics(state);}  }
class C{  static public void assertSchemaName(String s) throws IllegalArgumentException {  if (s == null)   throw new IllegalArgumentException();  if (s.length() == 0)   throw new IllegalArgumentException();  if (s.indexOf('\0') != -1)   throw new IllegalArgumentException();  final Matcher m=pattern_name.matcher(s);  if (!m.matches())   throw new IllegalArgumentException();}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public boolean isContext(){  return context;}  }
class C{  protected boolean createNewInstance(String reason){  Set<NodePortTuple> blockedPorts=new HashSet<NodePortTuple>();  if (!linksUpdated)   return false;  Map<NodePortTuple,Set<Link>> openflowLinks;  openflowLinks=new HashMap<NodePortTuple,Set<Link>>();  Set<NodePortTuple> nptList=switchPortLinks.keySet();  if (nptList != null) {    for (    NodePortTuple npt : nptList) {      Set<Link> linkSet=switchPortLinks.get(npt);      if (linkSet == null)       continue;      openflowLinks.put(npt,new HashSet<Link>(linkSet));    }  }  Set<NodePortTuple> broadcastDomainPorts=identifyBroadcastDomainPorts();  for (  NodePortTuple npt : broadcastDomainPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  for (  NodePortTuple npt : tunnelPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  Map<DatapathId,Set<OFPort>> allPorts=new HashMap<DatapathId,Set<OFPort>>();  ;  for (  DatapathId sw : switchPorts.keySet()) {    allPorts.put(sw,this.getPorts(sw));  }  TopologyInstance nt=new TopologyInstance(switchPorts,blockedPorts,openflowLinks,broadcastDomainPorts,tunnelPorts,switchPortLinks,allPorts);  nt.compute();  currentInstance=nt;  currentInstanceWithoutTunnels=nt;  TopologyEventInfo topologyInfo=new TopologyEventInfo(0,nt.getClusters().size(),new HashMap<DatapathId,List<NodePortTuple>>(),0);  eventCategory.newEventWithFlush(new TopologyEvent(reason,topologyInfo));  return true;}  }
class C{  public void processElement(Wrapper<Element> element){}  }
class C{  private boolean isAllocCall(byte[] name){  for (int i=0; i < allocCallMethods.length; i++) {    byte[] funcName=Services.getArrayNoBarrier(allocCallMethods,i);    if (Magic.getArrayLength(name) == Magic.getArrayLength(funcName)) {      int j=Magic.getArrayLength(funcName) - 1;      while (j >= 0) {        if (Services.getArrayNoBarrier(name,j) != Services.getArrayNoBarrier(funcName,j))         break;        j--;      }      if (j == -1)       return true;    }  }  return false;}  }
class C{  public void shallowCopyTo(final CircularStack<E> destination){  destination.elements.clear();  destination.pushAll(this);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TVARIABLE___GET_VARIABLE_AS_STRING:    return getVariableAsString();case TypesPackage.TVARIABLE___IS_PROVIDED_BY_RUNTIME:  return isProvidedByRuntime();case TypesPackage.TVARIABLE___GET_TYPE_ACCESS_MODIFIER:return getTypeAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public void fatalError(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.fatalError(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public QueryStringDecoder(String uri,Charset charset,boolean hasPath){  this(uri,charset,hasPath,DEFAULT_MAX_PARAMS);}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator c=this.c;  int minGallop=this.minGallop;{    outer:     while (true) {      int count1=0;      int count2=0;      do {        assert len1 > 0 && len2 > 1;        if (c.compare(tmp[cursor2],a[cursor1]) < 0) {          a[dest--]=a[cursor1--];          count1++;          count2=0;          if (--len1 == 0)           break outer;        } else {          a[dest--]=tmp[cursor2--];          count2++;          count1=0;          if (--len2 == 1)           break outer;        }      } while ((count1 | count2) < minGallop);      do {        assert len1 > 0 && len2 > 1;        count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);        if (count1 != 0) {          dest-=count1;          cursor1-=count1;          len1-=count1;          System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);          if (len1 == 0)           break outer;        }        a[dest--]=tmp[cursor2--];        if (--len2 == 1)         break outer;        count2=len2 - gallopLeft(a[cursor1],tmp,0,len2,len2 - 1,c);        if (count2 != 0) {          dest-=count2;          cursor2-=count2;          len2-=count2;          System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);          if (len2 <= 1)           break outer;        }        a[dest--]=a[cursor1--];        if (--len1 == 0)         break outer;        minGallop--;      } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);      if (minGallop < 0)       minGallop=0;      minGallop+=2;    }  }{    this.minGallop=minGallop < 1 ? 1 : minGallop;  }{    if (len2 == 1) {      assert len1 > 0;      dest-=len1;      cursor1-=len1;      System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);      a[dest]=tmp[cursor2];    } else     if (len2 == 0) {    } else {      assert len1 == 0;      assert len2 > 0;      System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    }  }}  }
class C{  public static String toHexString(int val,int size){  char[] c=new char[size];  toHexChars(val,c,0,size);  return new String(c);}  }
class C{  public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){  char ca=a.charAt(ai);  char cb=b.charAt(bi);  if (ignoreCase) {    ca=Character.toUpperCase(ca);    cb=Character.toUpperCase(cb);  }  return ca == cb;}  }
class C{  public HttpWaitStrategy usingTls(){  this.tlsEnabled=true;  return this;}  }
class C{  public boolean canGetString(){  return true;}  }
class C{  public void testSessionIgnoreOldEvent() throws Throwable {  ClientSessionListener listener=createListener();  AtomicBoolean received=new AtomicBoolean();  listener.onEvent("foo",null);  PublishResponse response;  response=handler.handle(PublishRequest.builder().withSession(1).withEventIndex(10).withPreviousIndex(1).withEvents(new Event<String>("foo","Hello world!")).build()).get();  assertEquals(response.status(),Response.Status.OK);  assertEquals(response.index(),10);  assertEquals(state.getEventIndex(),10);  assertTrue(received.get());  received.set(false);  response=handler.handle(PublishRequest.builder().withSession(1).withEventIndex(10).withPreviousIndex(1).withEvents(new Event<String>("foo","Hello world!")).build()).get();  assertEquals(response.status(),Response.Status.OK);  assertEquals(response.index(),10);  assertEquals(state.getEventIndex(),10);  assertFalse(received.get());}  }
class C{  public static void switchSerializerIfHTML(TransformerImpl transformer,String ns,String localName) throws TransformerException {  if (null == transformer)   return;  if (((null == ns) || (ns.length() == 0)) && localName.equalsIgnoreCase("html")) {    if (null != transformer.getOutputPropertyNoDefault(OutputKeys.METHOD))     return;    Properties prevProperties=transformer.getOutputFormat().getProperties();    OutputProperties htmlOutputProperties=new OutputProperties(Method.HTML);    htmlOutputProperties.copyFrom(prevProperties,true);    Properties htmlProperties=htmlOutputProperties.getProperties();    try {      Serializer oldSerializer=null;      if (null != oldSerializer) {        Serializer serializer=SerializerFactory.getSerializer(htmlProperties);        Writer writer=oldSerializer.getWriter();        if (null != writer)         serializer.setWriter(writer); else {          OutputStream os=oldSerializer.getOutputStream();          if (null != os)           serializer.setOutputStream(os);        }        ContentHandler ch=serializer.asContentHandler();        transformer.setContentHandler(ch);      }    } catch (    java.io.IOException e) {      throw new TransformerException(e);    }  }}  }
class C{  public boolean removeKey(int key){  int i=indexOfKey(key);  if (i < 0)   return false;  this.state[i]=REMOVED;  this.distinct--;  if (this.distinct < this.lowWaterMark) {    int newCapacity=chooseShrinkCapacity(this.distinct,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public void revertToDefault(){  stopListening();  DataLineModel<?,?> dlm=(DataLineModel<?,?>)table.getModel();  for (int i=0; i < dlm.getColumnCount(); i++) {    LimeTableColumn ltc=dlm.getTableColumn(i);    setVisibility(ltc,ltc.getDefaultVisibility());    setOrder(ltc,ltc.getDefaultOrder());    setWidth(ltc,ltc.getDefaultWidth());    try {      if (!table.isColumnVisible(ltc.getId())) {        table.setColumnVisible(ltc.getId(),true);        if (listener != null)         listener.columnAdded(ltc,table);      }    } catch (    LastColumnException impossible) {    }  }  TableColumnModel tcm=table.getColumnModel();  for (int i=0; i < dlm.getColumnCount(); i++) {    LimeTableColumn ltc=dlm.getTableColumn(i);    int order=getOrder(ltc);    int current=tcm.getColumnIndex(ltc.getId());    if (current != order)     tcm.moveColumn(current,order);    ltc.setPreferredWidth(ltc.getDefaultWidth());  }  for (int i=0; i < dlm.getColumnCount(); i++) {    LimeTableColumn ltc=dlm.getTableColumn(i);    boolean wantVis=getVisibility(ltc);    try {      if (!wantVis) {        table.setColumnVisible(ltc.getId(),false);        if (listener != null)         listener.columnRemoved(ltc,table);      }    } catch (    LastColumnException ignored) {    }  }  startListening();  save();}  }
class C{  protected void clearEvents(){}  }
class C{  default boolean handleStoreField(GraphBuilderContext b,ValueNode object,ResolvedJavaField field,ValueNode value){  return false;}  }
class C{  @Override public boolean isFocused(){  return mHijackFocus || super.isFocused();}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ParserString))   return false;  return o.toString().equals(this.toString());}  }
class C{  public CompoundComparator(){  this.comparators=new ArrayList<InvertibleComparator<T>>();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String extractDomain(String key){  TextStream stream=new TextStream(key);  stream.next();  return stream.upTo('/');}  }
class C{  protected Boolean computeMaxMessageSizeExceeded() throws MessagingException {  if (0 == getMaxMessageSizeLimit())   return Boolean.FALSE;  return getMessageIn().getSize() > getMaxMessageSizeLimit();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void write(BitStream.Out out,int value){  int code=codes[value];  int bitCount=30 - Integer.numberOfLeadingZeros(code);  for (int i=bitCount; i >= 0; i--) {    out.writeBit((code >> i) & 1);  }}  }
class C{  private static float pxToDip(Context context,float px){  if (context == null) {    return -1;  }  float scale=context.getResources().getDisplayMetrics().density;  return px / scale;}  }
class C{  public static long Extend(long fp,byte b){  long[] mod=ByteModTable_7;  fp=((fp >>> 8) ^ (mod[(b ^ ((int)fp)) & 0xFF]));  return fp;}  }
class C{  private Double lookupRate(String sourceCurrencyCode,String targetCurrencyCode){  Map<String,Double> rhs=rates.get(sourceCurrencyCode);  if (rhs != null) {    return rhs.get(targetCurrencyCode);  }  return null;}  }
class C{  public Path constructPath(Node fromNode,Node toNode,double startTime){  if (toNode == null || fromNode == null)   return null; else {    DijkstraNodeData toData=getData(toNode);    if (!toData.isVisited(this.getIterationId()))     return null;    DijkstraNodeData fromData=getData(fromNode);    if (!fromData.isVisited(this.getIterationId()))     return null;    double arrivalTime=toData.getTime();    return constructPath(fromNode,toNode,startTime,arrivalTime);  }}  }
class C{  @Transactional public ReceiptHeader persistReceiptObject(final ReceiptHeader receiptHeader){  return super.persist(receiptHeader);}  }
class C{  public StateEdit(StateEditable anObject){  super();  init(anObject,null);}  }
class C{  public void appendResults(List<SearchResult> searchResults){  mSearchResults.addAll(searchResults);  for (  SearchResult searchResult : searchResults) {    final ProviderIdentifier id=searchResult.getIdentifier();    final List<String> songs=searchResult.getSongsList();    final List<String> artists=searchResult.getArtistList();    final List<String> playlists=searchResult.getPlaylistList();    final List<String> albums=searchResult.getAlbumsList();    for (    String song : songs) {      SearchEntry entry=new SearchEntry(song,id);      if (!mAllSongs.contains(entry)) {        mAllSongs.add(entry);      }    }    for (    String artist : artists) {      SearchEntry entry=new SearchEntry(artist,id);      if (!mAllArtists.contains(entry)) {        mAllArtists.add(entry);      }    }    for (    String playlist : playlists) {      SearchEntry entry=new SearchEntry(playlist,id);      if (!mAllPlaylists.contains(entry)) {        mAllPlaylists.add(entry);      }    }    for (    String album : albums) {      SearchEntry entry=new SearchEntry(album,id);      if (!mAllAlbums.contains(entry)) {        mAllAlbums.add(entry);      }    }  }  computeResultsList();}  }
class C{  private static int pack8888(int r,int g,int b,int a){  return (r << 0) | (g << 8) | (b << 16)| (a << 24);}  }
class C{  public Builder skipButtonTypefacePath(String typefacePath){  this.skipButtonTypefacePath=typefacePath;  return this;}  }
class C{  public void drawLine(SynthContext context,Object paintKey,Graphics g,int x1,int y1,int x2,int y2,Object styleKey){  if ("dashed".equals(styleKey)) {    if (x1 == x2) {      y1+=(y1 % 2);      for (int y=y1; y <= y2; y+=2) {        g.drawLine(x1,y,x2,y);      }    } else     if (y1 == y2) {      x1+=(x1 % 2);      for (int x=x1; x <= x2; x+=2) {        g.drawLine(x,y1,x,y2);      }    }  } else {    drawLine(context,paintKey,g,x1,y1,x2,y2);  }}  }
class C{  public VisitRegistry clone() throws CloneNotSupportedException {  VisitRegistry res=(VisitRegistry)super.clone();  res.unvisitedCount=this.unvisitedCount;  res.registry=Arrays.copyOfRange(this.registry,0,this.registry.length);  return res;}  }
class C{  public boolean hasMoreDropshipElements(){  return this.getTurnDSEnum().hasMoreElements();}  }
class C{  @NotNull public static VcsLogHighlighter.VcsCommitStyle bold(){  return createStyle(null,null,VcsLogHighlighter.TextStyle.BOLD);}  }
class C{  public static Set<VirtualFile> gitRootsForPaths(final Collection<VirtualFile> roots){  HashSet<VirtualFile> rc=new HashSet<VirtualFile>();  for (  VirtualFile root : roots) {    VirtualFile f=root;    do {      if (f.findFileByRelativePath(DOT_GIT) != null) {        rc.add(f);        break;      }      f=f.getParent();    } while (f != null);  }  return rc;}  }
class C{  private static long calculateChunkHeaderLength(long chunkDataSize){  return Long.toHexString(chunkDataSize).length() + CHUNK_SIGNATURE_HEADER.length() + SIGNATURE_LENGTH+ CLRF.length()+ chunkDataSize+ CLRF.length();}  }
class C{  @Deprecated public static void assertNotEquals(String notExpected,String actual){  try {    Verify.assertNotEquals("string",notExpected,actual);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  private boolean isVersionNewEnough(BytesRef indexedDocId,Object newUserVersion) throws IOException {  assert null != indexedDocId;  assert null != newUserVersion;  oldSolrVersion=-1;  newUserVersion=convertFieldValueUsingType(userVersionField,newUserVersion);  Object oldUserVersion=null;  SolrInputDocument oldDoc=null;  if (useFieldCache) {    oldDoc=RealTimeGetComponent.getInputDocumentFromTlog(core,indexedDocId);    if (oldDoc == RealTimeGetComponent.DELETED) {      return true;    }    if (oldDoc == null) {      RefCounted<SolrIndexSearcher> newestSearcher=core.getRealtimeSearcher();      try {        SolrIndexSearcher searcher=newestSearcher.get();        long lookup=searcher.lookupId(indexedDocId);        if (lookup < 0) {          return true;        }        ValueSource vs=solrVersionField.getType().getValueSource(solrVersionField,null);        Map context=ValueSource.newContext(searcher);        vs.createWeight(context,searcher);        FunctionValues fv=vs.getValues(context,searcher.getTopReaderContext().leaves().get((int)(lookup >> 32)));        oldSolrVersion=fv.longVal((int)lookup);        vs=userVersionField.getType().getValueSource(userVersionField,null);        context=ValueSource.newContext(searcher);        vs.createWeight(context,searcher);        fv=vs.getValues(context,searcher.getTopReaderContext().leaves().get((int)(lookup >> 32)));        oldUserVersion=fv.objectVal((int)lookup);      } catch (      IOException e) {        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error reading version from index",e);      } finally {        if (newestSearcher != null) {          newestSearcher.decref();        }      }    }  } else {    oldDoc=RealTimeGetComponent.getInputDocument(core,indexedDocId);    if (null == oldDoc) {      return true;    }  }  if (oldDoc != null) {    oldUserVersion=oldDoc.getFieldValue(versionFieldName);    oldUserVersion=convertFieldValueUsingType(userVersionField,oldUserVersion);    Object o=oldDoc.getFieldValue(solrVersionField.getName());    if (o == null) {      throw new SolrException(SERVER_ERROR,"No _version_ for document " + oldDoc);    }    oldSolrVersion=o instanceof Number ? ((Number)o).longValue() : Long.parseLong(o.toString());  }  if (null == oldUserVersion) {    throw new SolrException(SERVER_ERROR,"Doc exists in index, but has null versionField: " + versionFieldName);  }  if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {    throw new SolrException(BAD_REQUEST,"old version and new version are not comparable: " + oldUserVersion.getClass() + " vs "+ newUserVersion.getClass());  }  try {    if (0 < ((Comparable)newUserVersion).compareTo((Comparable)oldUserVersion)) {      return true;    }    if (ignoreOldUpdates) {      if (log.isDebugEnabled()) {        log.debug("Dropping update since user version is not high enough: " + newUserVersion + "; old user version="+ oldUserVersion);      }      return false;    } else {      throw new SolrException(CONFLICT,"user version is not high enough: " + newUserVersion);    }  } catch (  ClassCastException e) {    throw new SolrException(BAD_REQUEST,"old version and new version are not comparable: " + oldUserVersion.getClass() + " vs "+ newUserVersion.getClass()+ ": "+ e.getMessage(),e);  }}  }
class C{  @SmallTest public void testBadHtml(){  Spanned spanned=Html.fromHtml("Hello <b>b<i>bi</b>i</i>");  Object[] spans=spanned.getSpans(0,100,Object.class);  assertEquals(Typeface.ITALIC,((StyleSpan)spans[0]).getStyle());  assertEquals(7,spanned.getSpanStart(spans[0]));  assertEquals(9,spanned.getSpanEnd(spans[0]));  assertEquals(Typeface.BOLD,((StyleSpan)spans[1]).getStyle());  assertEquals(6,spanned.getSpanStart(spans[1]));  assertEquals(9,spanned.getSpanEnd(spans[1]));  assertEquals(Typeface.ITALIC,((StyleSpan)spans[2]).getStyle());  assertEquals(9,spanned.getSpanStart(spans[2]));  assertEquals(10,spanned.getSpanEnd(spans[2]));}  }
class C{  public static void push(int method){  Thread t=Thread.currentThread();  if (t.getClass() == CODE) {    CodenameOneThread c=(CodenameOneThread)t;    c.pushStack(method);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DEFINED_TYPE:    setDefinedType((Type)null);  return;case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DECLARED_DYNAMIC:setDeclaredDynamic(DECLARED_DYNAMIC_EDEFAULT);return;case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__ALIAS:setAlias(ALIAS_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private String formatText(Context context,Cursor c,ViewHolder holder){  String label=c.getString(holder.columnLabel);  if (label == null) {    int type=c.getInt(holder.columnType);    label=context.getString(Phone.getTypeLabelResource(type));  }  String name=null;  String[] selectionArgs=new String[]{Long.toString(c.getLong(holder.columnContactId))};  Cursor personCursor=context.getContentResolver().query(Contacts.CONTENT_URI,PROJECTION_CONTACT,WHERE_CLAUSE_CONTACT,selectionArgs,null);  if (personCursor == null) {    throw new SQLException("Query failed!");  }  if (personCursor.moveToFirst()) {    name=personCursor.getString(holder.columnID);  }  personCursor.close();  if (name == null) {    return c.getString(holder.columnNumber);  } else {    return name + " (" + label+ ")";  }}  }
class C{  public V put(K key,V value,int memory){  int hash=getHash(key);  int segmentIndex=getSegmentIndex(hash);  Segment<K,V> s=segments[segmentIndex];synchronized (s) {    s=resizeIfNeeded(s,segmentIndex);    return s.put(key,hash,value,memory);  }}  }
class C{  @Override protected ShardsIterator shards(ClusterState clusterState,ClearIndicesCacheRequest request,String[] concreteIndices){  return clusterState.routingTable().allShards(concreteIndices);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getTitle();  Album al=getAlbumObj(obj);  if (al != null)   return al.getTitle();  SeriesInfo si=getSeriesInfoObj(obj);  return (si == null) ? "" : si.getTitle();}  }
class C{  private static void copyRawFile(Context ctx,int resid,File file,String mode) throws IOException, InterruptedException {  final String abspath=file.getAbsolutePath();  final FileOutputStream out=new FileOutputStream(file);  final InputStream is=ctx.getResources().openRawResource(resid);  byte buf[]=new byte[1024];  int len;  while ((len=is.read(buf)) > 0) {    out.write(buf,0,len);  }  out.close();  is.close();  Runtime.getRuntime().exec("chmod " + mode + " "+ abspath).waitFor();}  }
class C{  public VTimezone(String identifier){  setTimezoneId(identifier);}  }
class C{  public boolean isSnapshot(){  return snapshot;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public int key(){  return _map._set[_index];}  }
class C{  public static String pad(String s,int length){  if (s.length() > length) {    return s.substring(0,length);  }  StringBuffer buffer=new StringBuffer(s);  int spaces=length - s.length();  while (spaces-- > 0) {    buffer.append(' ');  }  return buffer.toString();}  }
class C{  public final DD selfMultiply(double y){  return selfMultiply(y,0.0);}  }
class C{  @SuppressWarnings("rawtypes") public boolean endSession(WBEMClient client,CIMInstance zonesetService,boolean commit) throws WBEMException {  UnsignedInteger32 result=null;  try {    int sessionState=cimIntegerProperty(zonesetService,"SessionState");    if (sessionState == _notApplicable) {      return true;    }    int endMode=commit ? _ended : _terminated;    CIMArgument[] inargs=new CIMArgument[]{_cimArgumentFactory.uint16("RequestedSessionState",endMode)};    result=(UnsignedInteger32)client.invokeMethod(zonesetService.getObjectPath(),"SessionControl",inargs,new CIMArgument[1]);    _log.info("End session returned code: " + result.intValue());    return result.intValue() == 0;  } catch (  WBEMException ex) {    _log.error("Encountered an exception while trying to start a zone session." + ex.getLocalizedMessage());    throw ex;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.BINDING_ELEMENT__VAR_DECL:    return basicSetVarDecl(null,msgs);case N4JSPackage.BINDING_ELEMENT__NESTED_PATTERN:  return basicSetNestedPattern(null,msgs);case N4JSPackage.BINDING_ELEMENT__EXPRESSION:return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  static HeapDoublesSketch copy(DoublesSketch sketch){  HeapDoublesSketch qsCopy;  qsCopy=HeapDoublesSketch.newInstance(sketch.getK());  qsCopy.n_=sketch.getN();  qsCopy.minValue_=sketch.getMinValue();  qsCopy.maxValue_=sketch.getMaxValue();  qsCopy.combinedBufferItemCapacity_=sketch.getCombinedBufferItemCapacity();  qsCopy.baseBufferCount_=sketch.getBaseBufferCount();  qsCopy.bitPattern_=sketch.getBitPattern();  double[] combBuf=sketch.getCombinedBuffer();  qsCopy.combinedBuffer_=Arrays.copyOf(combBuf,combBuf.length);  return qsCopy;}  }
class C{  int updateBillingResultByTkey(Long tkey,BigDecimal netAmount) throws Exception {  String sql=String.format("UPDATE %s SET netamount=? WHERE tkey=?;",TABLE_BILLINGRESULT);  PreparedStatement stmt=getPreparedStatement(sql);  stmt.setBigDecimal(1,netAmount);  stmt.setLong(2,tkey.longValue());  return stmt.executeUpdate();}  }
class C{  public int compareString(String a,String b,boolean ignoreCase){  if (ignoreCase) {    return a.compareToIgnoreCase(b);  }  return a.compareTo(b);}  }
class C{  protected boolean beforeDelete(){  setIsActive(false);  processIt(true);  return true;}  }
class C{  public void remove(int position){  mItems.remove(position);  notifyDataSetChanged();}  }
class C{  private static String resovlePropConfigFile(String prop){  if (prop != null && prop.startsWith("file://")) {    try {      String filePath=prop.substring(7);      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filePath),"UTF-8"));      StringBuffer sb=new StringBuffer();      String str=br.readLine();      while (str != null) {        sb.append(str);        str=br.readLine();      }      return sb.toString();    } catch (    IOException e) {      System.err.println("read classpath failed!");      throw new RuntimeException(" read classpath failed ",e);    }  }  return prop;}  }
class C{  private SecurityUtils(){}  }
class C{  public static boolean isVelocimacro(String vmName,String templateName){  return RuntimeSingleton.isVelocimacro(vmName,templateName);}  }
class C{  public MockTokenizerFactory(Map<String,String> args){  super(args);  String patternArg=get(args,"pattern",Arrays.asList("keyword","simple","whitespace"));  if ("keyword".equalsIgnoreCase(patternArg)) {    pattern=MockTokenizer.KEYWORD;  } else   if ("simple".equalsIgnoreCase(patternArg)) {    pattern=MockTokenizer.SIMPLE;  } else {    pattern=MockTokenizer.WHITESPACE;  }  enableChecks=getBoolean(args,"enableChecks",true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public static boolean isCPrimitiveType(String variable_type){  for (  primitiveType typeIndex : primitiveType.values()) {    if (typeIndex.name().toLowerCase().equals("j" + variable_type)) {      return true;    }  }  return false;}  }
class C{  @Override public void connectionLost(Throwable cause){  log.error("MQTT connection lost!",cause);}  }
class C{  public void closeIdleConnections(){  connMonitor.closeNow();}  }
class C{  private String loadVersion(){  final String className=getClass().getSimpleName() + ".class";  final String classPath=getClass().getResource(className).toString();  try {    final URL classUrl=new URL(classPath);    final JarURLConnection jarConnection=(JarURLConnection)classUrl.openConnection();    final Manifest manifest=jarConnection.getManifest();    final Attributes attributes=manifest.getMainAttributes();    return attributes.getValue("Implementation-Version");  } catch (  final IOException e) {    log.error("Could not load the application's version from it's manifest.",e);  }  return "UNKNOWN";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  PseudoMenu currUI=(stack.getUIMgrSafe() == null) ? null : stack.getUIMgrSafe().getCurrUI();  if (currUI != null)   currUI.refreshByWidgetName(s);  return null;}  }
class C{  @Override public RandomAccessStream openFileRandomAccess() throws IOException {  if (_isWindows && isAux())   throw new FileNotFoundException(_file.toString());  return new FileRandomAccessStream(new RandomAccessFile(getFile(),"rw"));}  }
class C{  public void testAcceptPair(){  int iterations=BluetoothTestRunner.sPairIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("acceptPair iteration " + (i + 1) + " of "+ iterations);    mTestUtils.acceptPair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);    mTestUtils.unpair(adapter,device);  }  mTestUtils.disable(adapter);}  }
class C{  public static double calculateMean(Number[] values,boolean includeNullAndNaN){  ParamChecks.nullNotPermitted(values,"values");  double sum=0.0;  double current;  int counter=0;  for (int i=0; i < values.length; i++) {    if (values[i] != null) {      current=values[i].doubleValue();    } else {      current=Double.NaN;    }    if (includeNullAndNaN || !Double.isNaN(current)) {      sum=sum + current;      counter++;    }  }  double result=(sum / counter);  return result;}  }
class C{  private void parseAttachPlaceholder(Attributes attributes){  if (md.actions != null) {    md.modeUsage=getModeUsage(attributes);    md.actions.setResultAction(new AttachPlaceholderAction(md.modeUsage));  } else   md.modeUsage=null;}  }
class C{  public static void writeDeclaredStaticField(final Class<?> cls,final String fieldName,final Object value,final boolean forceAccess) throws IllegalAccessException {  Field field=FieldUtils.getDeclaredField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "."+ fieldName);  }  FieldUtils.writeField(field,(Object)null,value);}  }
class C{  public static RxANRequest.DownloadBuilder download(String url,String dirPath,String fileName){  return new RxANRequest.DownloadBuilder(url,dirPath,fileName);}  }
class C{  public boolean relocating(){  return state == ShardRoutingState.RELOCATING;}  }
class C{  public static final String operatingSystem(){  return m_osName;}  }
class C{  public void addControllerListener(ControllerListener listener){  listeners.addListener(listener);}  }
class C{  public static Region generateRegion(@NonNull Match match,@NonNull Element element) throws RegionException {  PointRegionParser parser=new PointRegionParser(match,element);  if (parser.getPosition() != null) {    Location location=parser.getPosition().toLocation(match.getWorld(),parser.getYaw(),parser.getPitch());    if (parser.getAngle() != null) {      location.setDirection(parser.getAngle());    }    return new PointRegion(match,location);  } else   if (parser.getRegion() != null) {    return new PointProviderRegion(parser.getRegion(),parser.getAngle(),parser.getYaw(),parser.getPitch());  } else {    throw new MissingRegionPropertyException("position",element);  }}  }
class C{  public SpanNotQuery(SpanQuery include,SpanQuery exclude){  this(include,exclude,0,0);}  }
class C{  public void copySplitValue(int nodeID,byte[] splitPackedValue){  int address=nodeID * bytesPerIndexEntry;  int splitDim=numDims == 1 ? 0 : splitPackedValues[address++] & 0xff;  assert splitDim < numDims;  System.arraycopy(splitPackedValues,address,splitPackedValue,splitDim * bytesPerDim,bytesPerDim);}  }
class C{  public boolean contains(int val){  if (val < 0 || val >= has.length)   return false;  return has[val];}  }
class C{  public Params(){  initial=DEFAULT_INITIAL_MILLIS;  multiplier=DEFAULT_MULTIPLIER;  maximum=DEFAULT_MAXIMUM_MILLIS;}  }
class C{  public CUdeviceptr(){}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new SameTermFilterVisitor());}  }
class C{  private static void swap(double[] keys,int[] vals,int j,int i){  double td=keys[j];  keys[j]=keys[i];  keys[i]=td;  int ti=vals[j];  vals[j]=vals[i];  vals[i]=ti;}  }
class C{  public static LoggingFraction createDefaultLoggingFraction(){  return createDefaultLoggingFraction(Level.INFO);}  }
class C{  public boolean isLiteral(){  return true;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public Boolean createExternalUser(PrincipalDTO externalUser){  Boolean registrationStatus=false;  try {    PrincipalId externalUserId=PrincipalMapper.getPrincipal(externalUser);    registrationStatus=getIDMClient().registerThirdPartyIDPUser(getTenant(),externalUserId);    return registrationStatus;  } catch (  NoSuchTenantException e) {    log.debug("Failed to create external IDP user(FSP) '{}'",externalUser.getName(),e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  PasswordPolicyViolationException|DTOMapperException|InvalidArgumentException|InvalidPrincipalException|NoSuchIdpException e) {    log.debug("Failed to create external IDP user(FSP) '{}' on tenant '{}' due to a client side error",externalUser.getName(),tenant,e);    throw new BadRequestException(sm.getString("res.user.create.failed",externalUser.getName(),tenant),e);  }catch (  Exception e) {    log.error("Failed to create external IDP user(FSP) '{}' on tenant '{}' due to a server side error",externalUser.getName(),tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {}  }
class C{  public static void main(String[] args){  In in;  String urlName="http://introcs.cs.princeton.edu/stdlib/InTest.txt";  System.out.println("readAll() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    System.out.println(in.readAll());  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readString() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readString();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from current directory");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("./InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from relative path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("../stdlib/InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readChar() from file");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("InTest.txt");    while (!in.isEmpty()) {      char c=in.readChar();      System.out.print(c);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println();  System.out.println("readLine() from absolute OS X / Linux path");  System.out.println("---------------------------------------------------------------------------");  in=new In("/n/fs/introcs/www/java/stdlib/InTest.txt");  try {    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from absolute Windows path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("G:\\www\\introcs\\stdlib\\InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }    System.out.println();  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();}  }
class C{  @SuppressWarnings("unchecked") private void writeTagPayload(Tag tag) throws IOException {  TagType type=tag.getType();  byte[] bytes;switch (type) {case BYTE:    os.writeByte((byte)tag.getValue());  break;case SHORT:os.writeShort((short)tag.getValue());break;case INT:os.writeInt((int)tag.getValue());break;case LONG:os.writeLong((long)tag.getValue());break;case FLOAT:os.writeFloat((float)tag.getValue());break;case DOUBLE:os.writeDouble((double)tag.getValue());break;case BYTE_ARRAY:bytes=(byte[])tag.getValue();os.writeInt(bytes.length);os.write(bytes);break;case STRING:bytes=((StringTag)tag).getValue().getBytes(StandardCharsets.UTF_8);os.writeShort(bytes.length);os.write(bytes);break;case LIST:ListTag<Tag> listTag=(ListTag<Tag>)tag;List<Tag> tags=listTag.getValue();os.writeByte(listTag.getChildType().getId());os.writeInt(tags.size());for (Tag child : tags) {writeTagPayload(child);}break;case COMPOUND:Map<String,Tag> map=((CompoundTag)tag).getValue();for (Entry<String,Tag> entry : map.entrySet()) {writeTag(entry.getKey(),entry.getValue());}os.writeByte((byte)0);break;case INT_ARRAY:int[] ints=(int[])tag.getValue();os.writeInt(ints.length);for (int value : ints) {os.writeInt(value);}break;default :throw new IOException("Invalid tag type: " + type + ".");}}  }
class C{  protected AbstractSensorNode(final VisionWorld visionWorld,final Sensor sensor){  super();  if (sensor == null) {    throw new IllegalArgumentException("sensor must not be null");  }  this.sensor=sensor;  setHeight(this.sensor.getReceptiveField().getHeight());  setWidth(this.sensor.getReceptiveField().getWidth());  contextMenu=new JPopupMenu("Context menu");  contextMenu.add(new EditSensorAction());  contextMenu.add(visionWorld.getEditSensorsAction());  setPaint(new Color(0,0,0,0));  setOutlinePaint(new Color(0,0,0,0));  setMouseoverPaint(new Color(80,80,80,40));  setSelectedPaint(new Color(80,80,80,80));  addInputEventListener(new ToolTipTextUpdater());  addInputEventListener(new ContextMenuEventHandler());}  }
class C{  public Address(Locale locale){  mLocale=locale;}  }
class C{  @Uninterruptible public static boolean isReference(int slot){  return slot >= middleOfTable;}  }
class C{  public void fail(final Step step,final Context context,final String message){  Log.error(getClass(),"Exec error " + step.getClass() + ", msg: "+ message);switch (context.getStatus()) {case INITIALIZING:    invalidateContext(context.getProject());  break;case CREATING_PR:context.setStatus(READY_TO_CREATE_PR);break;case UPDATING_PR:context.setStatus(READY_TO_UPDATE_PR);break;default :break;}if (!(step instanceof SyntheticStep)) {eventBus.fireEvent(new StepEvent(context,step,false,message));}}  }
class C{  public LimeTableColumn(int model,final String id,final String name,final Icon icon,int width,boolean vis,boolean visName,Class<?> clazz){  super(model);  initialized=true;  this.defaultVisibility=vis;  this.defaultWidth=width;  if (defaultWidth != -1)   super.setPreferredWidth(width);  this.messageId=id;  super.setIdentifier(id);  this.name=name;  this.icon=icon;  this.visName=visName;  this.clazz=clazz;  setHeaderVisible(true);}  }
class C{  public Polygon2D(int[] xpoints,int[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints];  this.ypoints=new float[npoints];  for (int i=0; i < npoints; i++) {    this.xpoints[i]=xpoints[i];    this.ypoints[i]=ypoints[i];  }  calculatePath();}  }
class C{  public static InlineQueryResultVoiceBuilder builder(){  return new InlineQueryResultVoiceBuilder();}  }
class C{  public void testDivideBigDecimal1(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="-5E+4";  int resScale=-4;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public CoreContainer(String solrHome){  this(new SolrResourceLoader(solrHome));}  }
class C{  public static void unzip(String compressedFileName,String destinationDir){  String dirName=null;  String applicationName=compressedFileName.substring(compressedFileName.lastIndexOf("/"));  int dashIndex=applicationName.indexOf('-');  if (dashIndex != -1) {    dirName=compressedFileName.substring(0,dashIndex);  } else {    dirName=compressedFileName.substring(0,compressedFileName.lastIndexOf('.'));  }  log.debug("Directory: {}",dirName);  File zipDir=new File(compressedFileName);  File parent=zipDir.getParentFile();  log.debug("Parent: {}",(parent != null ? parent.getName() : null));  File tmpDir=new File(destinationDir);  log.debug("Making directory: {}",tmpDir.mkdirs());  try {    ZipFile zf=new ZipFile(compressedFileName);    Enumeration<?> e=zf.entries();    while (e.hasMoreElements()) {      ZipEntry ze=(ZipEntry)e.nextElement();      log.debug("Unzipping {}",ze.getName());      if (ze.isDirectory()) {        log.debug("is a directory");        File dir=new File(tmpDir + "/" + ze.getName());        Boolean tmp=dir.mkdir();        log.debug("{}",tmp);        continue;      }      if (ze.getName().lastIndexOf("/") != -1) {        String zipName=ze.getName();        String zipDirStructure=zipName.substring(0,zipName.lastIndexOf("/"));        File completeDirectory=new File(tmpDir + "/" + zipDirStructure);        if (!completeDirectory.exists()) {          if (!completeDirectory.mkdirs()) {            log.error("could not create complete directory structure");          }        }      }      FileOutputStream fout=new FileOutputStream(tmpDir + "/" + ze.getName());      InputStream in=zf.getInputStream(ze);      copy(in,fout);      in.close();      fout.close();    }    e=null;  } catch (  IOException e) {    log.error("Errord unzipping",e);  }}  }
class C{  @ReflectiveCtor public DebuggerStmt(FilePosition pos,Void value,List<? extends ParseTreeNode> children){  super(pos,NoChildren.class);}  }
class C{  public static double expQuick(final double value){  if (USE_JDK_MATH) {    return Math.exp(value);  }  return Double.longBitsToDouble((long)(int)(1512775.3952 * value + 1.0726481222E9) << 32);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  final String remoteName=getString(stack);  int portNum=getInt(stack);  final SFIRTuner tuney=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tuney == null)   return Boolean.FALSE;  return tuney.addNewRemote(remoteName);}  }
class C{  public boolean isPasscodeEnabled(){  if (isDeviceAdminActive()) {    return devicePolicyManager.isActivePasswordSufficient();  }  return false;}  }
class C{  public static void saveAsocRegsSec(UseCaseConf useCaseConf,Integer bookIdPrim,Integer folderIdPrim,Integer bookIdSec,Integer folderIdSec) throws Exception {  FolderAsocSession.saveAsocRegFdr(useCaseConf.getSessionID(),useCaseConf.getEntidadId(),bookIdPrim.intValue(),folderIdPrim.intValue(),bookIdSec.intValue(),folderIdSec.intValue());}  }
class C{  private Map<ComputeJob,ClusterNode> read(BinaryRawReaderEx reader,Collection<ClusterNode> nodes){  if (reader.readBoolean()) {    if (!reader.readBoolean())     return null;    int size=reader.readInt();    Map<ComputeJob,ClusterNode> map=U.newHashMap(size);    for (int i=0; i < size; i++) {      long ptr=reader.readLong();      Object nativeJob=reader.readBoolean() ? reader.readObjectDetached() : null;      PlatformJob job=ctx.createJob(this,ptr,nativeJob);      UUID jobNodeId=reader.readUuid();      assert jobNodeId != null;      ClusterNode jobNode=ctx.kernalContext().discovery().node(jobNodeId);      if (jobNode == null) {        for (        ClusterNode node : nodes) {          if (node.id().equals(jobNodeId)) {            jobNode=node;            break;          }        }        assert jobNode != null;      }      map.put(job,jobNode);    }    return map;  } else   throw new IgniteException(reader.readString());}  }
class C{  public static SOAPMessage stringToSoap(String soapString) throws SOAPException {  byte[] bytes;  try {    bytes=soapString.getBytes("UTF-8");  } catch (  UnsupportedEncodingException e) {    log.fatal("### Error - this should never happen: " + e.getMessage());    bytes="".getBytes();  }  String protocol;  if (soapString.contains(SOAP_11_NAMESPACE_URL)) {    protocol=javax.xml.soap.SOAPConstants.SOAP_1_1_PROTOCOL;  } else   if (soapString.contains(SOAP_12_NAMESPACE_URL)) {    protocol=javax.xml.soap.SOAPConstants.SOAP_1_2_PROTOCOL;  } else {    throw new SOAPException("Could't not detect SOAP protocol Version");  }  SOAPMessage sm;  try {    sm=MessageFactory.newInstance(protocol).createMessage(null,new ByteArrayInputStream(bytes));  } catch (  IOException e) {    log.fatal("### Error - this should never happen: " + e.getMessage());    sm=MessageFactory.newInstance().createMessage();  }  return sm;}  }
class C{  public SchemaColumnEntity createSchemaColumnEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String columnName){  return createSchemaColumnEntity(businessObjectFormatEntity,columnName,null);}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public void refreshStorageSystem(final URI storageSystemURI){  StorageSystem system=null;  try {    system=utils.getStorageSystem(storageSystemURI);    callEMCRefresh(helper,system);  } catch (  Exception ex) {    log.error("SMI-S error while refreshing storage system {}",storageSystemURI,ex);  }}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  public static void useStemmer(Stemmer stemmer,String[] options) throws Exception {  Reader reader;  StringBuffer input;  Writer output;  String tmpStr;  boolean lowerCase;  if (Utils.getFlag('h',options)) {    System.out.println(makeOptionsString(stemmer));    return;  }  tmpStr=Utils.getOption('i',options);  if (tmpStr.length() == 0) {    throw new IllegalArgumentException("No input file defined!" + makeOptionsString(stemmer));  } else {    reader=new BufferedReader(new InputStreamReader(new FileInputStream(tmpStr)));  }  input=new StringBuffer();  tmpStr=Utils.getOption('o',options);  if (tmpStr.length() == 0) {    output=new BufferedWriter(new OutputStreamWriter(System.out));  } else {    output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpStr)));  }  lowerCase=Utils.getFlag('l',options);  if (stemmer instanceof OptionHandler) {    ((OptionHandler)stemmer).setOptions(options);  }  try {    Utils.checkForRemainingOptions(options);  } catch (  Exception e) {    System.out.println(e.getMessage());    System.out.println(makeOptionsString(stemmer));    reader.close();    return;  }  int character;  while ((character=reader.read()) != -1) {    char ch=(char)character;    if (Character.isWhitespace(ch)) {      if (input.length() > 0) {        output.write(stemmer.stem(input.toString()));        input=new StringBuffer();      }      output.write(ch);    } else {      if (lowerCase) {        input.append(Character.toLowerCase(ch));      } else {        input.append(ch);      }    }  }  output.flush();  reader.close();}  }
class C{  public RemoveAction(@Nullable JComponent target){  this(target,ID);}  }
class C{  private static void log(String text){  if (LOCAL_LOGV) {    Log.v(LOG_TAG,text);  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  private void deleteFilesInDir(File dir){  for (  File child : dir.listFiles()) {    child.delete();  }}  }
class C{  public Annotation createAnnotation(){  AnnotationImpl annotation=new AnnotationImpl();  return annotation;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public void testUnevenArrays(){  Document doc=new Document();  IllegalArgumentException expected;  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("min/max ranges must agree"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.700 -0400",hash_original_method="945094A2860DB0150C551BBD80B2236C",hash_generated_method="68A9701D706038934E9E38AFAF37DD61") final boolean isMatched(){  Object x=item;  return (x == this) || ((x == null) == isData);}  }
class C{  public boolean validateParameters(){  log.config("");  StringBuffer sb=new StringBuffer();  int size=m_mFields.size();  for (int i=0; i < size; i++) {    GridField field=(GridField)m_mFields.get(i);    if (field.isMandatory(true)) {      WEditor wEditor=(WEditor)m_wEditors.get(i);      Object data=wEditor.getValue();      if (data == null || data.toString().length() == 0) {        field.setInserting(true);        field.setError(true);        if (sb.length() > 0)         sb.append(", ");        sb.append(field.getHeader());      } else       field.setError(false);      WEditor wEditor2=(WEditor)m_wEditors2.get(i);      if (wEditor2 != null) {        Object data2=wEditor.getValue();        GridField field2=(GridField)m_mFields2.get(i);        if (data2 == null || data2.toString().length() == 0) {          field.setInserting(true);          field2.setError(true);          if (sb.length() > 0)           sb.append(", ");          sb.append(field.getHeader());        } else         field2.setError(false);      }    }  }  if (sb.length() != 0) {    FDialog.error(m_WindowNo,this,"FillMandatory",sb.toString());    return false;  }  return true;}  }
class C{  public boolean hasDefaultVariant(){  if (CollectionUtils.isEmpty(variants) || variants.size() != 1) {    return false;  }  ProductVariant firstVariant=variants.get(0);  List<OptionValue> optionValues=firstVariant.getOptionValues();  return firstVariant.getTitle().equals("Default Title") && !CollectionUtils.isEmpty(optionValues) && (optionValues.get(0).getValue().equals("Default Title") || optionValues.get(0).getValue().equals("Default"));}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public static void writeIntArray(DataOutput out,@Nullable int[] arr) throws IOException {  if (arr == null)   out.writeInt(-1); else {    out.writeInt(arr.length);    for (    int b : arr)     out.writeInt(b);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  Node childNode;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("staff",false);  childList=doc.getChildNodes();  for (int indexN10043=0; indexN10043 < childList.getLength(); indexN10043++) {    childNode=(Node)childList.item(indexN10043);    nodeType=(int)childNode.getNodeType();    if (equals(8,nodeType)) {      attrList=childNode.getAttributes();      assertNull("attributesNull",attrList);    }  }  childNode=doc.createComment("This is a comment");  attrList=childNode.getAttributes();  assertNull("createdAttributesNull",attrList);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void runTest(){  VelocityContext context=new VelocityContext();  context.put("name","jason");  context.put("Floog","floogie woogie");  try {    Velocity.evaluate(context,compare1,"evaltest",input1);    if (!result1.equals(compare1.toString())) {      fail("Output incorrect.");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  public void pvChanged(PvChangeEvent event){  TimeSeries ts;  EcuDataPv pv;switch (event.getType()) {case PvChangeEvent.PV_MODIFIED:    pv=(EcuDataPv)event.getValue();  if ((ts=selPids.get(getPvId(pv))) != null)   try {    ts.addOrUpdate(new Second(),((Number)pv.get(EcuDataPv.FID_VALUE)).floatValue());  } catch (  Exception e) {    ProcessVar.log.error(e);  }break;case PvChangeEvent.PV_DELETED:pv=(EcuDataPv)event.getValue();selPids.remove(pv);break;case PvChangeEvent.PV_CLEARED:selPids.clear();break;case PvChangeEvent.PV_ADDED:if ((event.getValue() instanceof EcuDataPv)) {pv=(EcuDataPv)event.getValue();addDataSeries(pv);} else if ((event.getValue() instanceof Object[])) {for (Object currPv : (Object[])event.getValue()) {addDataSeries((ProcessVar)currPv);}}break;}updateColumnWidths();}  }
class C{  private Set<String> update(){  Map<String,Integer> updatedVars=new HashMap<String,Integer>();  while (!curState.getNewVariables().isEmpty()) {    Set<String> toProcess=curState.getNewVariables();synchronized (curState) {      curState.reduce();      for (      Model model : domain.getModels()) {        if (model.isTriggered(curState,toProcess)) {          boolean change=model.trigger(curState);          if (change && model.isBlocking()) {            break;          }        }      }      modules.forEach(null);      for (      String v : toProcess) {        int count=updatedVars.compute(v,null);        if (count > 10) {          displayComment("Warning: Recursive update of variable " + v);          return updatedVars.keySet();        }      }    }  }  return updatedVars.keySet();}  }
class C{  public static int levenshtein(String[] candidate,String[] source){  if (source.length == 0)   return candidate.length;  if (candidate.length == 0)   return source.length;  int distances[][]=new int[source.length + 1][candidate.length + 1];  for (int i=0; i <= source.length; i++)   distances[i][0]=i;  for (int j=0; j <= candidate.length; j++)   distances[0][j]=j;  for (int i=1; i <= source.length; i++) {    Object sourceItem=source[i - 1];    for (int j=1; j <= candidate.length; j++) {      Object targetItem=candidate[j - 1];      int cost;      if (sourceItem.equals(targetItem))       cost=0; else       cost=1;      int deletionCost=distances[i - 1][j] + 1;      int insertionCost=distances[i][j - 1] + 1;      int substitutionCost=distances[i - 1][j - 1] + cost;      distances[i][j]=minimum(insertionCost,deletionCost,substitutionCost);    }  }  return distances[source.length][candidate.length];}  }
class C{  public void addDataTable(final DataTable table){  dataTableMap.put(table.getName(),table);  for (  LoggingListener listener : loggingListeners) {    listener.addDataTable(table);  }}  }
class C{  public synchronized Identifier resolve(Environment env,Identifier nm) throws ClassNotFound {  if (tracing)   env.dtEnter("Imports.resolve: " + nm);  if (nm.hasAmbigPrefix()) {    nm=nm.removeAmbigPrefix();  }  if (nm.isQualified()) {    if (tracing)     env.dtExit("Imports.resolve: QUALIFIED " + nm);    return nm;  }  if (checked <= 0) {    checked=0;    resolve(env);  }  Identifier className=(Identifier)classes.get(nm);  if (className != null) {    if (tracing)     env.dtExit("Imports.resolve: PREVIOUSLY IMPORTED " + nm);    return className;  }  Identifier id=Identifier.lookup(currentPackage,nm);  if (importable(id,env)) {    className=id;  } else {    Enumeration e=packages.elements();    while (e.hasMoreElements()) {      IdentifierToken t=(IdentifierToken)e.nextElement();      id=Identifier.lookup(t.getName(),nm);      if (importable(id,env)) {        if (className == null) {          className=id;        } else {          if (tracing)           env.dtExit("Imports.resolve: AMBIGUOUS " + nm);          throw new AmbiguousClass(className,id);        }      }    }  }  if (className == null) {    if (tracing)     env.dtExit("Imports.resolve: NOT FOUND " + nm);    throw new ClassNotFound(nm);  }  classes.put(nm,className);  if (tracing)   env.dtExit("Imports.resolve: FIRST IMPORT " + nm);  return className;}  }
class C{  protected void logErrorDisconnect(OFErrorMsg error){  logError(error);  channel.disconnect();}  }
class C{  private static void logThreadStarting(){  if (logger.isTraceEnabled()) {    logger.trace(String.format(ThreadingUtils.STARTING_THREAD,Thread.currentThread().getId(),Thread.currentThread().getName()));  }}  }
class C{  public PdfGroupingAlgorithms(final PdfData pdf_data,final boolean isXMLExtraction){  this.pdf_data=pdf_data;  this.isXMLExtraction=isXMLExtraction;  colorExtracted=pdf_data.isColorExtracted();}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decodeText(pString);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public static Document readDocument(InputStream in,String encoding) throws IOException, XMLException {  try {    InputStreamReader reader=new InputStreamReader(in,encoding);    InputSource source=new InputSource(new BufferedReader(reader));    Document document;    try {      document=documentBuilder.parse(source);    } catch (    SAXException e) {      throw new XMLException("readDocument failed",e);    }    return document;  }  finally {    in.close();  }}  }
class C{  public PojoValueField(Element el,Class pojoCls){  super(el,pojoCls);  if (el.hasAttribute(STATIC_ATTR))   isStatic=Boolean.parseBoolean(el.getAttribute(STATIC_ATTR).trim().toLowerCase());  if (el.hasAttribute(INDEX_ATTR))   isIndexed=Boolean.parseBoolean(el.getAttribute(INDEX_ATTR).trim().toLowerCase());  if (el.hasAttribute(INDEX_CLASS_ATTR))   idxCls=el.getAttribute(INDEX_CLASS_ATTR).trim();  if (el.hasAttribute(INDEX_OPTIONS_ATTR)) {    idxOptions=el.getAttribute(INDEX_OPTIONS_ATTR).trim();    if (!idxOptions.toLowerCase().startsWith("with")) {      idxOptions=idxOptions.toLowerCase().startsWith("options") ? "with " + idxOptions : "with options = " + idxOptions;    }  }}  }
class C{  private synchronized MLOutput compileAndExecuteScript(String dmlScriptFilePath,String[] args,boolean isFile,boolean isNamedArgument,boolean isPyDML,String configFilePath) throws IOException, DMLException {  try {    if (getActiveMLContext() != null) {      throw new DMLRuntimeException("SystemML (and hence by definition MLContext) doesnot support parallel execute() calls from same or different MLContexts. " + "As a temporary fix, please do explicit synchronization, i.e. synchronized(MLContext.class) { ml.execute(...) } ");    }    _activeMLContext=this;    if (_monitorUtils != null) {      _monitorUtils.resetMonitoringData();    }    if (OptimizerUtils.isSparkExecutionMode()) {      String[] inputs=(_inVarnames != null) ? _inVarnames.toArray(new String[0]) : new String[0];      String[] outputs=(_outVarnames != null) ? _outVarnames.toArray(new String[0]) : new String[0];      Map<String,JavaPairRDD<?,?>> retVal=(_outVarnames != null && !_outVarnames.isEmpty()) ? retVal=new HashMap<String,JavaPairRDD<?,?>>() : null;      Map<String,MatrixCharacteristics> outMetadata=new HashMap<String,MatrixCharacteristics>();      Map<String,String> argVals=DMLScript.createArgumentsMap(isNamedArgument,args);      ExecutionContext ec=executeUsingSimplifiedCompilationChain(dmlScriptFilePath,isFile,argVals,isPyDML,inputs,outputs,_variables,configFilePath);      SparkExecutionContext sec=(SparkExecutionContext)ec;      if (_outVarnames != null) {        if (_variables == null)         throw new DMLRuntimeException("The symbol table returned after executing the script is empty");        for (        String ovar : _outVarnames) {          if (!_variables.keySet().contains(ovar))           throw new DMLException("Error: The variable " + ovar + " is not available as output after the execution of the DMLScript.");          retVal.put(ovar,sec.getRDDHandleForVariable(ovar,InputInfo.BinaryBlockInputInfo));          outMetadata.put(ovar,ec.getMatrixCharacteristics(ovar));        }      }      return new MLOutput(retVal,outMetadata);    } else {      throw new DMLRuntimeException("Unsupported runtime:" + DMLScript.rtplatform.name());    }  }  finally {    _activeMLContext=null;  }}  }
class C{  public boolean isFillViewport(){  return mFillViewport;}  }
class C{  public static int compile(String[] args){  com.redhat.ceylon.langtools.tools.javac.main.Main compiler=new com.redhat.ceylon.langtools.tools.javac.main.Main("javac");  return compiler.compile(args).exitCode;}  }
class C{  private void doDrop(){  Object value=spinner.getValue();  if (value instanceof Integer) {    int amount=(Integer)value;    if (amount > 0) {      target.dropEntity(item,amount,location);    }    popup.setVisible(false);  }}  }
class C{  static void sort(byte[] a,int left,int right){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_BYTE) {    int[] count=new int[NUM_BYTE_VALUES];    for (int i=left - 1; ++i <= right; count[a[i] - Byte.MIN_VALUE]++)     ;    for (int i=NUM_BYTE_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      byte value=(byte)(i + Byte.MIN_VALUE);      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    for (int i=left, j=i; i < right; j=++i) {      byte ai=a[i + 1];      while (ai < a[j]) {        a[j + 1]=a[j];        if (j-- == left) {          break;        }      }      a[j + 1]=ai;    }  }}  }
class C{  public String register() throws NonUniqueBusinessKeyException, ValidationException, ObjectNotFoundException, MailOperationException, RegistrationException {  if (logger.isDebugLoggingEnabled()) {  }  String mId=getMarketplaceId();  String parameter=getRequest().getParameter(Constants.REQ_PARAM_SERVICE_KEY);  String outcome=BaseBean.OUTCOME_SUCCESS;  Long serviceKey=null;  if (parameter != null && parameter.trim().length() > 0) {    serviceKey=Long.valueOf(parameter);  }  if (!isInternalMode()) {    password="";  }  try {    organization=getAccountingService().registerCustomer(getOrganization(),user.getVOUserDetails(),password,serviceKey,mId,getSupplierId());  } catch (  NonUniqueBusinessKeyException ex) {    if (isInternalMode()) {      throw ex;    }    ex.setMessageKey(BaseBean.ERROR_USER_ALREADY_EXIST);    ExceptionHandler.execute(ex,true);    return BaseBean.OUTCOME_ERROR;  }  if (logger.isDebugLoggingEnabled()) {  }  return outcome;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.848 -0500",hash_original_method="9EB0AD05F46BCDC3EFC8C7DBA5311E53",hash_generated_method="5625D4078D53703423DD1E3DB811FD93") private boolean isIPv6Address(String uriHeader){  int hostEnd=uriHeader.indexOf(Lexer.QUESTION);  int semiColonIndex=uriHeader.indexOf(Lexer.SEMICOLON);  if (hostEnd == -1 || (semiColonIndex != -1 && hostEnd > semiColonIndex))   hostEnd=semiColonIndex;  if (hostEnd == -1)   hostEnd=uriHeader.length();  String host=uriHeader.substring(0,hostEnd);  int firstColonIndex=host.indexOf(Lexer.COLON);  if (firstColonIndex == -1)   return false;  int secondColonIndex=host.indexOf(Lexer.COLON,firstColonIndex + 1);  if (secondColonIndex == -1)   return false;  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.994 -0500",hash_original_method="88607DBCC47E4B4D98332640E6FF147F",hash_generated_method="9AD675F881D01A7CFF2FF9537A3A3961") protected CharArrayBuffer initBuffer(CharArrayBuffer buffer){  if (buffer != null) {    buffer.clear();  } else {    buffer=new CharArrayBuffer(64);  }  return buffer;}  }
class C{  protected Logger(String name,String resourceBundleName){  throw new RuntimeException();}  }
class C{  private NumericShaper(int ranges,int defaultContext,boolean isContextual){  this.fRanges=ranges;  this.fDefaultContextIndex=getIndexFromRange(defaultContext);  this.fContextual=isContextual;  if (!fContextual) {    fSingleRangeIndex=getIndexFromRange(ranges);  }}  }
class C{  public boolean isDoc(){  return doc;}  }
class C{  public void close(long stopTimestamp,AlertClosingReason closingReason){  this.stopTimestamp=stopTimestamp;  this.closingReason=closingReason;}  }
class C{  @Override public synchronized void engineNextBytes(byte[] result){  int index=0;  int todo;  byte[] output=remainder;  if (state == null) {    byte[] seed=new byte[DIGEST_SIZE];    SeederHolder.seeder.engineNextBytes(seed);    state=digest.digest(seed);  }  int r=remCount;  if (r > 0) {    todo=(result.length - index) < (DIGEST_SIZE - r) ? (result.length - index) : (DIGEST_SIZE - r);    for (int i=0; i < todo; i++) {      result[i]=output[r];      output[r++]=0;    }    remCount+=todo;    index+=todo;  }  while (index < result.length) {    digest.update(state);    output=digest.digest();    updateState(state,output);    todo=(result.length - index) > DIGEST_SIZE ? DIGEST_SIZE : result.length - index;    for (int i=0; i < todo; i++) {      result[index++]=output[i];      output[i]=0;    }    remCount+=todo;  }  remainder=output;  remCount%=DIGEST_SIZE;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_category);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);}  }
class C{  public EditGridAction(Application app,DrawingEditor editor){  super(editor);  this.app=app;  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);}  }
class C{  protected void handleInfoLine(String line){  if (layer != null) {    layer.fireRequestInfoLine((line == null) ? "" : line);  }}  }
class C{  public static void selectionSort(int[] a){  int minIndex;  for (int i=0; i < a.length - 1; i++) {    minIndex=i;    for (int j=i + 1; j < a.length; j++) {      if (a[j] < a[minIndex]) {        minIndex=j;      }    }    swap(a,i,minIndex);  }}  }
class C{  @LargeTest public void testThumbnailListH263QCIF() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_1_17.3gp";  final int startTime=0;  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() / 4;  final int outHeight=mediaVideoItem.getHeight() / 4;  final long endTime=mediaVideoItem.getDuration() / 2;  final Bitmap thumbNailBmp[]=mediaVideoItem.getThumbnailList(outWidth,outHeight,startTime,endTime,tnCount);  assertNotNull("Thumbnail Retrived is Null",thumbNailBmp);  assertEquals("Thumbnail Count",tnCount,thumbNailBmp.length);  for (int i=0; i < thumbNailBmp.length; i++) {    validateThumbnail(thumbNailBmp[i],outWidth,outHeight);    thumbNailBmp[i]=null;  }}  }
class C{  public ProfilePage(final PageParameters params){  super(params);  final String email=ApplicationDirector.getShoppingCart().getCustomerEmail();  final Customer customer;  if (StringUtils.hasLength(email)) {    customer=customerServiceFacade.getCustomerByEmail(ApplicationDirector.getCurrentShop(),email);  } else {    customer=null;    final PageParameters rparams=new PageParameters();    rparams.set(ShoppingCartCommand.CMD_LOGOUT,ShoppingCartCommand.CMD_LOGOUT);    setResponsePage(Application.get().getHomePage(),rparams);  }  final Model<Customer> customerModel=new Model<Customer>(customer);  add(new FeedbackPanel(FEEDBACK));  add(new PasswordPanel(PASSWORD_PANEL,customerModel));  add(new ManageAddressesView(SHIPPING_ADDR_PANEL,customerModel,Address.ADDR_TYPE_SHIPPING,false));  add(new ManageAddressesView(BILLING_ADDR_PANEL,customerModel,Address.ADDR_TYPE_BILLING,false));  add(new DynaFormPanel(ATTR_PANEL,customerModel));  add(new SummaryPanel(SUMMARY_PANEL,customerModel));  add(new StandardFooter(FOOTER));  add(new StandardHeader(HEADER));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));}  }
class C{  public boolean isSetStruct_thing(){  return this.struct_thing != null;}  }
class C{  void repaintCurrentValue(){  Rectangle r=rectangleForCurrentValue();  comboBox.repaint(r.x,r.y,r.width,r.height);}  }
class C{  @FlashException(referrer={"snapshot"}) public static void addSnapShotSubDir(String id,String shareName,String subDirectroy,String description){  ViPRCoreClient client=BourneUtil.getViprClient();  FileSystemShareParam param=new FileSystemShareParam();  param.setShareName(shareName);  if (subDirectroy != null && !"".equals(subDirectroy)) {    param.setSubDirectory(subDirectroy);  }  if (description != null && !"".equals(description)) {    param.setDescription(description);  }  client.fileSnapshots().share(uri(id),param);  flash.put("info",MessagesUtils.get("resources.filesystem.subdir.add"));  snapshot(id);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private void cleanUpChromeRecents(boolean fromDocument){  ActivityManager am=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.AppTask> taskList=am.getAppTasks();  PackageManager pm=getPackageManager();  for (int i=0; i < taskList.size(); i++) {    AppTask task=taskList.get(i);    String className=DocumentUtils.getTaskClassName(task,pm);    if (className == null)     continue;    RecentTaskInfo taskInfo=DocumentUtils.getTaskInfoFromTask(task);    if (taskInfo == null)     continue;    boolean skip=!fromDocument && DocumentActivity.isDocumentActivity(className);    if (!skip && (taskInfo.id != getTaskId())) {      taskList.get(i).finishAndRemoveTask();    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.GENERATOR_MODEL;}  }
class C{  @CanIgnoreReturnValue public static long copy(ReadableByteChannel from,WritableByteChannel to) throws IOException {  checkNotNull(from);  checkNotNull(to);  if (from instanceof FileChannel) {    FileChannel sourceChannel=(FileChannel)from;    long oldPosition=sourceChannel.position();    long position=oldPosition;    long copied;    do {      copied=sourceChannel.transferTo(position,ZERO_COPY_CHUNK_SIZE,to);      position+=copied;      sourceChannel.position(position);    } while (copied > 0 || position < sourceChannel.size());    return position - oldPosition;  }  ByteBuffer buf=ByteBuffer.wrap(createBuffer());  long total=0;  while (from.read(buf) != -1) {    buf.flip();    while (buf.hasRemaining()) {      total+=to.write(buf);    }    buf.clear();  }  return total;}  }
class C{  private MemoryExampleTable performRightJoin(ExampleSet leftExampleSet,ExampleSet rightExampleSet,List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList,Pair<Attribute[],Attribute[]> keyAttributes) throws ProcessStoppedException {  MemoryExampleTable unionTable=new MemoryExampleTable(unionAttributeList);  Attribute[] leftKeyAttributes=null;  Attribute[] rightKeyAttributes=null;  Map<DoubleArrayWrapper,List<Example>> leftKeyMapping=null;  boolean useId=getParameterAsBoolean(PARAMETER_USE_ID);  Attribute leftIdAttribute=null;  Attribute rightIdAttribute=null;  if (useId) {    leftIdAttribute=leftExampleSet.getAttributes().getId();    rightIdAttribute=rightExampleSet.getAttributes().getId();    leftKeyAttributes=new Attribute[]{leftIdAttribute};    rightKeyAttributes=new Attribute[]{rightIdAttribute};  } else {    leftKeyAttributes=keyAttributes.getFirst();    rightKeyAttributes=keyAttributes.getSecond();    leftKeyMapping=createKeyMapping(leftExampleSet,leftKeyAttributes,rightKeyAttributes);  }  boolean keepBoth=getParameterAsBoolean(PARAMETER_KEEP_BOTH_JOIN_ATTRIBUTES);  boolean removeDoubleAttributes=getParameterAsBoolean(PARAMETER_REMOVE_DOUBLE_ATTRIBUTES);  int progressCounter=0;  for (  Example rightExample : rightExampleSet) {    List<Example> matchingLeftExamples=getMatchingExamples(rightExampleSet,leftExampleSet,rightKeyAttributes,leftKeyMapping,useId,rightExample);    if (matchingLeftExamples != null) {      for (      Example leftExample : matchingLeftExamples) {        addCombinedOccurence(originalAttributeSources,unionAttributeList,unionTable,leftExample,rightExample);      }    } else {      addRightOnlyOccurence(originalAttributeSources,unionAttributeList,unionTable,rightExample,leftKeyAttributes,rightKeyAttributes,keepBoth,removeDoubleAttributes);    }    ++progressCounter;    if (progressCounter % 100 == 0) {      getProgress().step(100);      progressCounter=0;    }  }  return unionTable;}  }
class C{  public void floodWithIslands(){  Address target;  String localhost=null;  try {    localhost=java.net.InetAddress.getLocalHost().getHostAddress();  } catch (  Exception e) {    output.error("Could not get localhost address");  }  Iterator peers=getDRM().getContributions().iterator();  Parameter p=new Parameter(DRMLauncher.P_STATE);  EvolutionAgent island=(EvolutionAgent)parameters.getInstanceForParameterEq(p,null,EvolutionAgent.class);  island.parameters=parameters;  island.data=data;  island.setRoot(new Address(getName()));  while (peers.hasNext()) {    island.setName(p);    target=((ContributionBox)peers.next()).contributor;    if (target.port == Integer.parseInt(base.getProperty("port")) && target.getHost().getHostAddress().equals(localhost)) {      target=null;      continue;    }    IRequest request=base.launch("DIRECT",island,target);    while (request.getStatus() == IRequest.WAITING)     Thread.yield();    if (request.getStatus() != IRequest.DONE)     output.error("There was an error sending the agent: " + request.getThrowable()); else {      output.message("Agent " + island.getName() + " sent to "+ target.name);      islands.add(new Address(target.getHost(),target.port,island.getName()));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:24.385 -0400",hash_original_method="27E0D57FF2AEBC70EE6BF760C51E525C",hash_generated_method="70C186BF3C020F97975A93D7ABF97EE3") public final int length(){  return array.length;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public UCrop useSourceImageAspectRatio(){  mCropOptionsBundle.putBoolean(EXTRA_ASPECT_RATIO_SET,true);  mCropOptionsBundle.putInt(EXTRA_ASPECT_RATIO_X,0);  mCropOptionsBundle.putInt(EXTRA_ASPECT_RATIO_Y,0);  return this;}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 2:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public double[] computeLocalUsingPreviousObservations(double[] source,double[] destination) throws Exception {  return computeLocalUsingPreviousObservations(source,destination,false);}  }
class C{  public int cancelAll(){  return cancelAllInner(null);}  }
class C{  public HttpRequestOptions(){}  }
class C{  public void testmirror(File orig,File origni,File truecolor){  File mirror=TestSupport.addSuffixToName(orig,"_mirror");  File recov=TestSupport.addSuffixToName(orig,"_recov");  long crc0=0;  boolean interlaced;  boolean palete;{    PngReader pngr=new PngReader(orig);    PngWriter pngw=null;    try {      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());      palete=pngr.imgInfo.indexed;      pngr.prepareSimpleDigestComputation();      interlaced=pngr.isInterlaced();      pngw=new PngWriter(mirror,pngr.imgInfo,true);      pngw.setFilterType(FilterType.FILTER_CYCLIC);      pngw.copyChunksFrom(pngr.getChunksList());      IImageLineSet<? extends IImageLine> lines=pngr.readRows();      for (int row=0; row < pngr.imgInfo.rows; row++) {        mirrorLine(lines.getImageLine(row),pngr.imgInfo);        pngw.writeRow(lines.getImageLine(row));      }      pngr.end();      crc0=PngHelperInternal.getDigest(pngr);      pngw.end();    }  finally {      pngr.close();      if (pngw != null)       pngw.close();    }  }{    PngReader pngr2=new PngReader(mirror);    PngWriter pngw=null;    try {      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());      pngw=new PngWriter(recov,pngr2.imgInfo,true);      pngw.setFilterType(FilterType.FILTER_DEFAULT);      pngw.copyChunksFrom(pngr2.getChunksList());      for (int row=0; row < pngr2.imgInfo.rows; row++) {        IImageLine line=pngr2.readRow();        mirrorLine(line,pngr2.imgInfo);        pngw.writeRow(line);      }      pngr2.end();      pngw.end();    }  finally {      pngr2.close();      if (pngw != null)       pngw.close();    }  }  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0); else   TestSupport.testSameCrc(recov,origni);  if (interlaced)   additionalTestInterlaced(orig,origni);  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);}  }
class C{  public OrientedVariant(Variant variant,boolean isAlleleA,int alleleId,int otherAlleleId){  mVariant=variant;  mAlleleId=alleleId;  mOtherAlleleId=otherAlleleId;  mIsAlleleA=isAlleleA;}  }
class C{  @Override public String expect(Pattern pattern){  final String token=read(pattern);  if (token == null) {    throw new ParserException("Expected pattern '" + pattern.pattern() + "' was not encountered in document: "+ document);  }  return token;}  }
class C{  private Operation processRequestWithCallback(Operation localOp,URI callbackLocation){  localOp.setCompletion(null);  return localOp;}  }
class C{  public UnweightedGraph(List<V> vertices,List<Edge> edges){  super(vertices,edges);}  }
class C{  public static boolean copyValues(SetGetModel to,String from_tableName,int from_id,String[] includeFields){  if (to == null || from_tableName == null || from_id <= 0 || includeFields == null || includeFields.length == 0) {    return false;  }  StringBuffer sql=new StringBuffer();  for (  String f : includeFields) {    if (sql.length() > 0)     sql.append(",");    sql.append(f);  }  sql.insert(0,"SELECT ");  sql.append(" FROM ").append(from_tableName).append(" WHERE ").append(from_tableName).append("_ID=").append(from_id);  updateColumns(to,includeFields,sql.toString(),null);  return true;}  }
class C{  public void traceFieldDifferentTypeInHostJdk(){  traceNulledWord(": field different type in host jdk");}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  NodeSequence seq=(NodeSequence)super.clone();  seq.m_next=0;  if (m_cache != null) {    m_cache.increaseUseCount();  }  return seq;}  }
class C{  protected SecretKey engineGenerateKey(){  if (this.random == null) {    this.random=SunJCE.getRandom();  }  byte[] rawkey=new byte[DESedeKeySpec.DES_EDE_KEY_LEN];  if (keysize == 168) {    this.random.nextBytes(rawkey);    DESKeyGenerator.setParityBit(rawkey,0);    DESKeyGenerator.setParityBit(rawkey,8);    DESKeyGenerator.setParityBit(rawkey,16);  } else {    byte[] tmpkey=new byte[16];    this.random.nextBytes(tmpkey);    DESKeyGenerator.setParityBit(tmpkey,0);    DESKeyGenerator.setParityBit(tmpkey,8);    System.arraycopy(tmpkey,0,rawkey,0,tmpkey.length);    System.arraycopy(tmpkey,0,rawkey,16,8);    java.util.Arrays.fill(tmpkey,(byte)0x00);  }  DESedeKey desEdeKey=null;  try {    desEdeKey=new DESedeKey(rawkey);  } catch (  InvalidKeyException ike) {    throw new RuntimeException(ike.getMessage());  }  java.util.Arrays.fill(rawkey,(byte)0x00);  return desEdeKey;}  }
class C{  public void put(MapNode node,double distance){  map.put(node,distance);}  }
class C{  public boolean forEachValue(TIntProcedure procedure){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public static GcsPath fromUri(String uri){  Matcher m=GCS_URI.matcher(uri);  checkArgument(m.matches(),"Invalid GCS URI: %s",uri);  checkArgument(m.group("SCHEME").equalsIgnoreCase(SCHEME),"URI: %s is not a GCS URI",uri);  return new GcsPath(null,m.group("BUCKET"),m.group("OBJECT"));}  }
class C{  public ServiceStateException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private long[][] findDimensions(ArrayDBIDs medoids,Relation<V> database,DistanceQuery<V> distFunc,RangeQuery<V> rangeQuery){  DataStore<DBIDs> localities=getLocalities(medoids,database,distFunc,rangeQuery);  final int dim=RelationUtil.dimensionality(database);  double[][] averageDistances=new double[medoids.size()][];  int i=0;  for (DBIDArrayIter iter=medoids.iter(); iter.valid(); iter.advance(), i++) {    V medoid_i=database.get(iter);    DBIDs l_i=localities.get(iter);    double[] x_i=new double[dim];    for (DBIDIter qr=l_i.iter(); qr.valid(); qr.advance()) {      V o=database.get(qr);      for (int d=0; d < dim; d++) {        x_i[d]+=Math.abs(medoid_i.doubleValue(d) - o.doubleValue(d));      }    }    for (int d=0; d < dim; d++) {      x_i[d]/=l_i.size();    }    averageDistances[i]=x_i;  }  long[][] dimensionMap=new long[medoids.size()][((dim - 1) >> 6) + 1];  List<DoubleIntInt> z_ijs=new ArrayList<>();  for (i=0; i < medoids.size(); i++) {    double[] x_i=averageDistances[i];    double y_i=0;    for (int j=0; j < dim; j++) {      y_i+=x_i[j];    }    y_i/=dim;    double sigma_i=0;    for (int j=0; j < dim; j++) {      double diff=x_i[j] - y_i;      sigma_i+=diff * diff;    }    sigma_i/=(dim - 1);    sigma_i=Math.sqrt(sigma_i);    for (int j=0; j < dim; j++) {      z_ijs.add(new DoubleIntInt((x_i[j] - y_i) / sigma_i,i,j));    }  }  Collections.sort(z_ijs);  int max=Math.max(k * l,2);  for (int m=0; m < max; m++) {    DoubleIntInt z_ij=z_ijs.get(m);    long[] dims_i=dimensionMap[z_ij.dimi];    BitsUtil.setI(dims_i,z_ij.dimj);    if (LOG.isDebugging()) {      StringBuilder msg=new StringBuilder();      msg.append('\n');      msg.append("z_ij ").append(z_ij).append('\n');      msg.append("D_i ").append(BitsUtil.toString(dims_i)).append('\n');      LOG.debugFiner(msg.toString());    }  }  return dimensionMap;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  @Override public XASession createXASession() throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXASession()");  }  checkClosed();  return allocateConnection(type);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:59.228 -0500",hash_original_method="3104127334A31B48E0F0795A4514B3FB",hash_generated_method="83AB2C617D4369F8739FE19B5CE2C164") @DSVerified public void onClick(View v){  if (v == mCancelButton) {    dismiss();  } else   if (v instanceof Button) {    CharSequence result=((Button)v).getText();    replaceCharacterAndClose(result);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void readDefault(){  ClassLoader l=Skeleton.class.getClassLoader();  URL url;  if (l != null) {    url=l.getResource(DEFAULT_LOC);  } else {    url=ClassLoader.getSystemResource(DEFAULT_LOC);  }  if (url == null) {    Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);    throw new GeneratorException();  }  try {    InputStreamReader reader=new InputStreamReader(url.openStream());    readSkel(new BufferedReader(reader));  } catch (  IOException e) {    Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);    throw new GeneratorException();  }}  }
class C{  public final void dropTables(SQL[] tables) throws AdeException {  if (tables == null) {    return;  }  for (int i=0; i < tables.length; i++) {    TableGeneralUtils.dropTable(tables[i].toString());  }}  }
class C{  protected Dimension calculateMaxDimensions(final boolean auth,final int originWidth,final int originHeight,final int maxWidth,final int maxHeight){  int resultWidth;  int resultHeight;  if (auth) {    resultWidth=(maxWidth == 0) ? originWidth : maxWidth;    resultHeight=(maxHeight == 0) ? originHeight : maxHeight;  } else   if ((originWidth > 16) || (originHeight > 16)) {    resultWidth=Math.min(96,originWidth);    resultHeight=Math.min(96,originHeight);  } else {    resultWidth=16;    resultHeight=16;  }  return new Dimension(resultWidth,resultHeight);}  }
class C{  protected void sendDataToPlayer(EntityPlayerMP player){  TheBetweenlands.networkWrapper.sendTo(new MessageSyncChunkData(this.getChunk(),this.writeToNBT(new NBTTagCompound())),player);}  }
class C{  public Map<String,List<URI>> groupVolumesBasedOnExistingGroups(StorageSystem storage,String groupName,List<URI> volumeUris) throws Exception {  CloseableIterator<CIMInstance> cimInstanceItr=null;  CloseableIterator<CIMObjectPath> volumeItr=null;  Map<String,List<URI>> volumeGroup=new HashMap<String,List<URI>>();  try {    CIMObjectPath maskingGroupPath=_cimPath.getMaskingGroupPath(storage,groupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);    if (!this.isCascadedSG(storage,maskingGroupPath)) {      Map<String,URI> volumePaths=getNativeGuidToVolumeUriMap(volumeUris,storage);      volumeItr=groupVolumeBasedOnStorageGroup(storage,volumeGroup,volumePaths,maskingGroupPath);      return volumeGroup;    }    Map<String,URI> volumePaths=getNativeGuidToVolumeUriMap(volumeUris,storage);    cimInstanceItr=getAssociatorInstances(storage,maskingGroupPath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null,PS_ELEMENT_NAME);    while (cimInstanceItr.hasNext()) {      CIMInstance instance=cimInstanceItr.next();      volumeItr=groupVolumeBasedOnStorageGroup(storage,volumeGroup,volumePaths,instance.getObjectPath());    }  }  finally {    closeCIMIterator(cimInstanceItr);    closeCIMIterator(volumeItr);  }  return volumeGroup;}  }
class C{  public boolean isUserProfileConfigured(){  if (TextUtils.isEmpty(getImsProxyAddrForMobile())) {    return false;  }  if (TextUtils.isEmpty(getUserProfileImsDomain())) {    return false;  }  AuthenticationProcedure mode=getImsAuthenticationProcedureForMobile();switch (mode) {case DIGEST:    if (getUserProfileImsUserName() == null) {      return false;    }  if (TextUtils.isEmpty(getUserProfileImsPassword())) {    return false;  }if (TextUtils.isEmpty(getUserProfileImsPrivateId())) {  return false;}break;default :break;}return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.PATTERN__QUANTIFIER:    return getQuantifier();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean createConfigurationXML(){  errors=new ConfigVerification();  xmlConfig=new StringBuilder();  xmlConfig.append("<config>\r\n");  components.toXML(xmlConfig,errors);  xmlConfig.append("</config>\r\n");  if (errors.getRowCount() != 0) {    new ConfigDialog(this).setVisible(true);    return false;  }  return true;}  }
class C{  public void sendIdentifyMessage(){  buildAndSendMessage(null,"Identify");}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  private static boolean isClassPresent(String name){  Class<?> clazz=null;  try {    clazz=Class.forName(name,false,Spliterators.class.getClassLoader());  } catch (  Throwable notPresent) {  }  return clazz != null;}  }
class C{  public static Vector3 floor(Vector3 o){  return new Vector3(Math.floor(o.x),Math.floor(o.y),Math.floor(o.z));}  }
class C{  public static boolean isSunMSCAPI(Provider provider){  Class<?> sunMSCAPI=null;  try {    sunMSCAPI=Class.forName("sun.security.mscapi.SunMSCAPI");  } catch (  Exception e) {    return false;  }  if (sunMSCAPI == null) {    return false;  }  return sunMSCAPI.isInstance(provider);}  }
class C{  public AccessibilityEventListener(){  EventQueueMonitor.addTopLevelWindowListener(this);}  }
class C{  private void importText(){  JFileChooser jc=new JFileChooser();  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),"ImportText"));  jc.setDialogType(JFileChooser.OPEN_DIALOG);  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;  StringBuffer sb=new StringBuffer();  try {    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));    char[] cbuf=new char[1024];    int count;    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);    in.close();  } catch (  Exception e) {    log.log(Level.WARNING,e.getMessage());    return;  }  textArea.setText(sb.toString());  updateStatusBar();}  }
class C{  private HistogramType(String name){  this.name=name;}  }
class C{  public void registerListener(IListener listener){  registerListener(listener,false);}  }
class C{  public static void executeApiTask(ExportGroupService exportGroupService,ExecutorService executorService,DbClient dbClient,Project project,ExportGroup exportGroup,ExportUpdateParam exportUpdateParam,String task,TaskResourceRep taskRes){  CreateExportGroupUpdateSchedulingThread schedulingThread=new CreateExportGroupUpdateSchedulingThread(dbClient,exportGroupService,project,exportGroup,exportUpdateParam,task,taskRes);  try {    executorService.execute(schedulingThread);  } catch (  Exception e) {    String message="Failed to execute export group update API task for resource " + exportGroup.getId();    _log.error(message);    taskRes.setMessage(message);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.TIME_EVENT_SPEC__TYPE:    setType(TYPE_EDEFAULT);  return;case StextPackage.TIME_EVENT_SPEC__VALUE:setValue((Expression)null);return;case StextPackage.TIME_EVENT_SPEC__UNIT:setUnit(UNIT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public int hashCode(){  return getChronology().getId().hashCode() ^ isoDate.hashCode();}  }
class C{  protected void updateComponent(Component comp,Graphics g){  if (comp != null) {    super.updateComponent(comp,g);  }}  }
class C{  private void createRecursivly(String path) throws KeeperException, InterruptedException {  try {    if (zk.exists(path,true) == null && path.length() > 0) {      String temp=path.substring(0,path.lastIndexOf(File.separator));      createRecursivly(temp);      zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);    } else {      return;    }  } catch (  KeeperException e) {    throw e;  }catch (  InterruptedException e) {    throw e;  }}  }
class C{  public ParsePluginsReader(){}  }
class C{  public static void checkSameHost(FileSystem fs,ExecutionSystem es){  Host fsHost=Host.fromUri(fs.getPath("").toUri());  Host esHost=Host.fromUri(es.uri());  checkArgument(fsHost.equals(esHost),"file system host (%s) must equal execution system host (%s)",fsHost,esHost);}  }
class C{  public boolean logoutUser(String username,HttpServletRequest req){  return logoutUser(username,req,true,true);}  }
class C{  public void execute(){  RunnableExecutorPair list;synchronized (this) {    if (executed) {      return;    }    executed=true;    list=runnables;    runnables=null;  }  RunnableExecutorPair reversedList=null;  while (list != null) {    RunnableExecutorPair tmp=list;    list=list.next;    tmp.next=reversedList;    reversedList=tmp;  }  while (reversedList != null) {    executeListener(reversedList.runnable,reversedList.executor);    reversedList=reversedList.next;  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public GraphMLMetadata(String description,String default_value,Function<T,String> function){  this.description=description;  this.transformer=function;  this.default_value=default_value;}  }
class C{  public static String encodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length() * 3);  for (  char c : s.toCharArray()) {    if (c < 256) {      sb.append(c);    } else {      sb.append("\\u");      sb.append(Character.forDigit((c >>> 12) & 0xf,16));      sb.append(Character.forDigit((c >>> 8) & 0xf,16));      sb.append(Character.forDigit((c >>> 4) & 0xf,16));      sb.append(Character.forDigit((c) & 0xf,16));    }  }  return sb.toString();}  }
class C{  public ResponseProcessingTask(Client client,String requestTicket,Collection<ResponseListener> responseListeners,Exception exception){  this.requestTicket=requestTicket;  this.exception=exception;  this.responseListeners=responseListeners;  this.hasException=true;  this.response=null;  this.client=client;}  }
class C{  public void onBackPressed(){  Intent changeToMain=new Intent(getApplicationContext(),MainActivity.class);  startActivity(changeToMain);}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static synchronized void recycle(Rectangle r){  if (pool.size() >= MAX_POOL_SIZE || r == null) {    return;  }  pool.add(r);}  }
class C{  public void verifyDatastore(URI exportGroupId,URI vCenterId,URI vcenterDatacenter,String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  try {    Vcenter vCenter=_dbClient.queryObject(Vcenter.class,vCenterId);    VcenterDataCenter vCenterDataCenter=_dbClient.queryObject(VcenterDataCenter.class,vcenterDatacenter);    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupId);    VCenterAPI api=VcenterDiscoveryAdapter.createVCenterAPI(vCenter);    if (exportGroup != null && exportGroup.getVolumes() != null) {      for (      String volume : exportGroup.getVolumes().keySet()) {        BlockObject blockObject=BlockObject.fetch(_dbClient,URI.create(volume));        if (blockObject != null && blockObject.getTag() != null) {          for (          ScopedLabel tag : blockObject.getTag()) {            String tagValue=tag.getLabel();            if (tagValue != null && tagValue.startsWith(VMFS_DATASTORE_PREFIX)) {              String datastoreName=getDatastoreName(tagValue);              Datastore datastore=api.findDatastore(vCenterDataCenter.getLabel(),datastoreName);              if (datastore != null) {                ComputeSystemHelper.verifyDatastore(datastore,api);              }            }          }        }      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  Exception ex) {    _log.error(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(stepId,DeviceControllerException.errors.jobFailed(ex));  }}  }
class C{  public static String formatStringToCommaSeparated(String[] array){  StringBuffer sbuf=new StringBuffer("");  for (  String s : array) {    if (s != null) {      sbuf=sbuf.append(s + ", ");    }  }  if (sbuf.length() > 2) {    sbuf.setLength(sbuf.length() - 2);  }  return sbuf.toString();}  }
class C{  public void checkpoint() throws IllegalArgumentException, InterruptedException, ExecutionException {  Checkpoint capturedCheckpoint=null;synchronized (this.offsetSynchronizer) {    capturedCheckpoint=new Checkpoint(this.partitionId,this.offset,this.sequenceNumber);  }  persistCheckpoint(capturedCheckpoint);}  }
class C{  public static int opPrec(JCTree.Tag op){switch (op) {case POS:case NEG:case NOT:case COMPL:case PREINC:case PREDEC:    return prefixPrec;case POSTINC:case POSTDEC:case NULLCHK:  return postfixPrec;case ASSIGN:return assignPrec;case BITOR_ASG:case BITXOR_ASG:case BITAND_ASG:case SL_ASG:case SR_ASG:case USR_ASG:case PLUS_ASG:case MINUS_ASG:case MUL_ASG:case DIV_ASG:case MOD_ASG:return assignopPrec;case OR:return orPrec;case AND:return andPrec;case EQ:case NE:return eqPrec;case LT:case GT:case LE:case GE:return ordPrec;case BITOR:return bitorPrec;case BITXOR:return bitxorPrec;case BITAND:return bitandPrec;case SL:case SR:case USR:return shiftPrec;case PLUS:case MINUS:return addPrec;case MUL:case DIV:case MOD:return mulPrec;case TYPETEST:return ordPrec;default :throw new AssertionError();}}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static String callService(String urlString) throws NoItemException, ServiceException {  if (urlString == null || urlString.length() < 1)   return null;  InputStream inputStream=null;  try {    URL url=new URL(urlString);    URLConnection connection=url.openConnection();    HttpURLConnection htpc=(HttpURLConnection)connection;    int responseCode=htpc.getResponseCode();    String responseMessage=htpc.getResponseMessage();    String contentType=htpc.getContentType();    if (responseCode == HttpURLConnection.HTTP_OK) {      inputStream=connection.getInputStream();      ByteBuffer buffer=WWIO.readStreamToBuffer(inputStream);      String charsetName=getCharsetName(contentType);      return decodeBuffer(buffer,charsetName);    } else     if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST) {      throw new NoItemException(responseMessage);    } else {      throw new ServiceException(responseMessage);    }  } catch (  MalformedURLException e) {    String msg=Logging.getMessage("generic.MalformedURL",urlString);    Logging.logger().log(java.util.logging.Level.SEVERE,msg);    throw new WWRuntimeException(msg);  }catch (  IOException e) {    String msg=Logging.getMessage("POI.ServiceError",urlString);    Logging.logger().log(java.util.logging.Level.SEVERE,msg);    throw new ServiceException(msg);  } finally {    WWIO.closeStream(inputStream,urlString);  }}  }
class C{  public static int[] randomPermutation(final int[] out,Random random){  for (int i=out.length - 1; i > 0; i--) {    int ri=random.nextInt(i + 1);    int tmp=out[ri];    out[ri]=out[i];    out[i]=tmp;  }  return out;}  }
class C{  private int totalRopWidth(RegisterSpecList sources){  int sz=sources.size();  int total=0;  for (int i=0; i < sz; i++) {    total+=sources.get(i).getCategory();  }  return total;}  }
class C{  public static void closeShell(boolean root) throws IOException {  if (root) {    Shell.closeRootShell();  } else {    Shell.closeShell();  }}  }
class C{  public void printStackTrace(){synchronized (System.err) {    super.printStackTrace(System.err);  }}  }
class C{  @SuppressWarnings("unchecked") public static <R extends EppResource>Builder<R,? extends Builder<R,?>> prepareDeletedResourceAsBuilder(R resource,DateTime now){  Builder<R,? extends Builder<R,?>> builder=(Builder<R,? extends Builder<R,?>>)resource.asBuilder().setDeletionTime(now).setStatusValues(null).setTransferData(resource.getStatusValues().contains(StatusValue.PENDING_TRANSFER) ? resource.getTransferData().asBuilder().setTransferStatus(TransferStatus.SERVER_CANCELLED).setServerApproveEntities(null).setServerApproveBillingEvent(null).setServerApproveAutorenewEvent(null).setServerApproveAutorenewPollMessage(null).setPendingTransferExpirationTime(null).build() : resource.getTransferData()).wipeOut();  return builder;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public String toString(){  if (tokens == null) {    return "StrTokenizer[not tokenized yet]";  }  return "StrTokenizer" + getTokenList();}  }
class C{  @SuppressWarnings("try") private Register findLockedRegister(PlatformKind kind,OperandMode mode){  AllocatableRegisters allocatableRegisters=registerAllocationConfig.getAllocatableRegisters(kind);  Register[] availableRegs=allocatableRegisters.allocatableRegisters;  Register lockedReg=null;  for (  Register reg : availableRegs) {    if (!isCurrentlyUsed(reg,mode) && !isActiveFixedRegister(reg)) {      lockedReg=reg;      break;    }  }  if (lockedReg == null) {    return null;  }  evacuateRegisterAndSpill(lockedReg);  return lockedReg;}  }
class C{  public void close(){  this._stats.close();}  }
class C{  protected boolean acquiredPrimaryLock(){  if (logger.isDebugEnabled()) {    logger.debug("Acquired primary lock for BucketID {} PR : {}",getBucket().getId(),regionAdvisor.getPartitionedRegion().getFullPath());  }  boolean changedStateToIsPrimary=false;  boolean shouldInvokeListeners=false;  activePrimaryMoveLock.lock();  try {synchronized (this) {      if (isHosting() && (isVolunteering() || isBecomingPrimary())) {        Bucket br=this.regionAdvisor.getBucket(getBucket().getId());        if (br != null && br instanceof BucketRegion) {          ((BucketRegion)br).beforeAcquiringPrimaryState();        }        if (requestPrimaryState(IS_PRIMARY_HOSTING)) {          if (logger.isDebugEnabled()) {            logger.debug("Acquired primary lock for setting primary now BucketID {} PR : {}",getBucket().getId(),regionAdvisor.getPartitionedRegion().getFullPath());          }          setPrimaryMember(getDistributionManager().getId());          changedStateToIsPrimary=true;          if (hasPrimary() && isPrimary()) {            shouldInvokeListeners=true;          }        }      }    }    if (shouldInvokeListeners) {      invokePartitionListeners();    }    return changedStateToIsPrimary;  }  finally {    try {      if (changedStateToIsPrimary) {        sendProfileUpdate();        Bucket br=this.regionAdvisor.getBucket(getBucket().getId());        if (br != null && br instanceof BucketRegion) {          ((BucketRegion)br).processPendingSecondaryExpires();        }        if (br instanceof BucketRegionQueue) {          BucketRegionQueue brq=(BucketRegionQueue)br;          brq.incQueueSize(brq.size());        }        if (br != null && br instanceof BucketRegion) {          ((BucketRegion)br).afterAcquiringPrimaryState();        }      } else {        releasePrimaryLock();      }    }  finally {      activePrimaryMoveLock.unlock();    }  }}  }
class C{  public void onUnwatched(ChunkDataBase chunkStorage,EntityPlayerMP player){  this.watchers.remove(player);}  }
class C{  private static final boolean shouldShowDialogs(Configuration config){  return !(config.keyboard == Configuration.KEYBOARD_NOKEYS && config.touchscreen == Configuration.TOUCHSCREEN_NOTOUCH);}  }
class C{  public final void testSetSeedbyteArray02() throws NoSuchFieldException, SecurityException, IllegalAccessException {  byte[] seed=new byte[LENGTH];  byte[] bytes1=new byte[LENGTH];  byte[] bytes2=new byte[LENGTH];  boolean b;  for (int i=0; i < seed.length; i++) {    seed[i]=(byte)i;  }  sr.setSeed(seed);  sr.setSeed(seed);  sr2.setSeed(seed);  sr.nextBytes(bytes1);  sr2.nextBytes(bytes2);  b=true;  for (int j=0; j < bytes1.length; j++) {    b&=bytes1[j] == bytes2[j];  }  assertFalse("unexpected: sequences are equal",b);}  }
class C{  public final DD add(double y){  return copy(this).selfAdd(y);}  }
class C{  private ArchivedComponent(final WorkspaceComponentSerializer serializer,final WorkspaceComponent component){  this.className=component.getClass().getCanonicalName();  this.id=serializer.getId(component);  this.name=component.getName();  this.format=component.getDefaultFormat();  this.uri="components/" + id + '_'+ name.replaceAll("\\s","_")+ '.'+ format;}  }
class C{  @Override public void delete(){  for (  Project project : projects) {    project.labels.remove(this);    project.update();  }  super.delete();}  }
class C{  public void multiplyVector3fByMatrix(Vector3f vector){  if (matrixValid && matrix.length == 9) {    float x=0;    float y=0;    float z=0;    float[] vectorArray=vector.toArray();    if (!colMaj) {      for (int i=0; i < 3; i++) {        int k=i * 3;        x+=this.matrix[k + 0] * vectorArray[i];        y+=this.matrix[k + 1] * vectorArray[i];        z+=this.matrix[k + 2] * vectorArray[i];      }    } else {      for (int i=0; i < 3; i++) {        x+=this.matrix[0 + i] * vectorArray[i];        y+=this.matrix[3 + i] * vectorArray[i];        z+=this.matrix[6 + i] * vectorArray[i];      }    }    vector.setX(x);    vector.setY(y);    vector.setZ(z);  } else   Log.e("matrix","Matrix is invalid, is " + matrix.length + " long, this function expects the internal matrix to be of size 9");}  }
class C{  public static void main(final String[] args) throws Exception {  System.out.println("Generating public-private key pair...");  final long start=System.nanoTime();  final KeyPairGenerator kpGen=KeyPairGenerator.getInstance("RSA");  kpGen.initialize(RsaConsts.KEY_SIZE_BITS);  final KeyPair kp=kpGen.generateKeyPair();  final PublicKey pubKey=kp.getPublic();  final PrivateKey privKey=kp.getPrivate();  if (DEBUG) {    System.out.println(pubKey.getAlgorithm() + " " + pubKey.getFormat()+ " "+ pubKey.getEncoded().length);    System.out.println(privKey.getAlgorithm() + " " + privKey.getFormat()+ " "+ privKey.getEncoded().length);  }  final KeyFactory kf=KeyFactory.getInstance("RSA");  final RSAPublicKeySpec pubKeySpec=kf.getKeySpec(pubKey,RSAPublicKeySpec.class);  final RSAPrivateKeySpec privKeySpec=kf.getKeySpec(privKey,RSAPrivateKeySpec.class);  if (DEBUG) {    System.out.println(pubKeySpec.getModulus() + " " + pubKeySpec.getPublicExponent());    System.out.println(privKeySpec.getModulus() + " " + privKeySpec.getPrivateExponent());  }  saveKey(pubKeySpec.getModulus(),pubKeySpec.getPublicExponent(),RsaConsts.PATH_PUBLIC_KEY);  saveKey(privKeySpec.getModulus(),privKeySpec.getPrivateExponent(),RsaConsts.PATH_PRIVATE_KEY);  final long end=System.nanoTime();  System.out.println("Done. (" + ((end - start) / 1_000_000) + " ms)");}  }
class C{  private void initializeUiBuilder(){  UIBuilder builder=new UIBuilder();  builder.setReference(this).setSubMenu(this.subMenu).setFooter(this.footer).setTreeView(this.tree).setGraph(this.graph).setMenu(this.menu).setLog(this.log).build();}  }
class C{  public void addDivider(ImageView v){  RelativeLayout.LayoutParams dividerParams=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);  if (mImageView != null) {    dividerParams.addRule(RelativeLayout.BELOW,mImageView.getId());  } else   if (mMissingImage != null) {    dividerParams.addRule(RelativeLayout.BELOW,mMissingImage.getId());  } else   if (mVideoButton != null) {    dividerParams.addRule(RelativeLayout.BELOW,mVideoButton.getId());  } else   if (mAudioButton != null) {    dividerParams.addRule(RelativeLayout.BELOW,mAudioButton.getId());  } else   if (mView_Text != null) {    dividerParams.addRule(RelativeLayout.BELOW,mView_Text.getId());  } else {    Log.e(t,"Tried to add divider to uninitialized ATVWidget");    return;  }  addView(v,dividerParams);}  }
class C{  public String user(){  return user;}  }
class C{  @Override public void renderLimitLines(Canvas c){}  }
class C{  TimeOfDay(TimeOfDay partial,Chronology chrono){  super(partial,chrono);}  }
class C{  double heuristic(Node x,Node y){  Coordinate xnode=x.getCoordinate();  Coordinate ynode=y.getCoordinate();  return Math.sqrt(Math.pow(xnode.x - ynode.x,2) + Math.pow(xnode.y - ynode.y,2));}  }
class C{  @Override public int hashCode(){  int result=hashCode;  if (hashCode == 0) {    result=17;    result=37 * result + getClass().hashCode();    result=37 * result + minimum.hashCode();    result=37 * result + maximum.hashCode();    hashCode=result;  }  return result;}  }
class C{  public boolean inputFormat(Instances instanceInfo){  m_InputFormat=new Instances(instanceInfo,0);  notifyInstanceProduced(new InstanceEvent(this,InstanceEvent.FORMAT_AVAILABLE));  b_FirstInputFinished=false;  return true;}  }
class C{  private CentralRegistrationClass(){}  }
class C{  private void notifyFailure(final PoliticalActionAttachment paa){  getSoundChannel().playSoundForAll(SoundPath.CLIP_POLITICAL_ACTION_FAILURE,m_player);  final String transcriptText=m_bridge.getPlayerID().getName() + " fails on action: " + MyFormatter.attachmentNameToText(paa.getName());  m_bridge.getHistoryWriter().addChildToEvent(transcriptText);  sendNotification(PoliticsText.getInstance().getNotificationFailure(paa.getText()));  notifyOtherPlayers(paa,PoliticsText.getInstance().getNotificationFailureOthers(paa.getText()));}  }
class C{  public Matrix subtract(Matrix mx){  double[][] newMatrix=new double[rows][columns];  for (int i=0; i < rows; i++)   for (int j=0; j < columns; j++)   newMatrix[i][j]=values[i][j] - mx.get(i,j);  return new Matrix(newMatrix);}  }
class C{  private static long idForGlobalId(Uri uri,long globalId){  String[] proj={_ID};  String sel=GLOBAL_ID + " = ?";  String[] args={String.valueOf(globalId)};  return Cursors.firstLong(cr().query(uri,proj,sel,args,null));}  }
class C{  public SortSpinnerAdapter(Activity activity){  super(activity,R.layout.spinner_item_sort);  this.setDropDownViewResource(R.layout.spinner_item_sort_dropdown);  SortItem newest=new SortItem("newest",activity.getString(R.string.Whats_new));  sortItemList.add(newest);  SortItem popularity=new SortItem("popularity",activity.getString(R.string.Recommended));  sortItemList.add(popularity);  SortItem priceDesc=new SortItem("price_DESC",activity.getString(R.string.Highest_price));  sortItemList.add(priceDesc);  SortItem priceAsc=new SortItem("price_ASC",activity.getString(R.string.Lowest_price));  sortItemList.add(priceAsc);}  }
class C{  public void removeElementAt(int i){  if (null == m_map)   return;  if (i >= m_firstFree)   throw new ArrayIndexOutOfBoundsException(i + " >= " + m_firstFree); else   if (i < 0)   throw new ArrayIndexOutOfBoundsException(i);  if (i < m_firstFree - 1)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);  m_firstFree--;  m_map[m_firstFree]=null;}  }
class C{  public GeoShapeQueryBuilder(String name,String indexedShapeId,String indexedShapeType,ShapeRelation relation){  this(name,null,indexedShapeId,indexedShapeType,relation);}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (Iterator<? extends Map.Entry<? extends K,? extends V>> i=m.entrySet().iterator(); i.hasNext(); ) {    Map.Entry<? extends K,? extends V> e=i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  public void createVirtualVolumes(URI vplexURI,List<URI> vplexVolumeURIs,Map<URI,URI> computeResourceMap,String stepId) throws WorkflowException {  List<List<VolumeInfo>> rollbackData=new ArrayList<List<VolumeInfo>>();  List<URI> createdVplexVolumeURIs=new ArrayList<URI>();  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    Map<URI,StorageSystem> storageMap=new HashMap<URI,StorageSystem>();    Map<Volume,List<Volume>> volumeMap=new HashMap<Volume,List<Volume>>();    StringBuffer volumeLabels=new StringBuffer();    List<String> storageSystemGuids=new ArrayList<String>();    for (    URI vplexVolumeURI : vplexVolumeURIs) {      Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);      volumeLabels.append(vplexVolume.getLabel()).append(" ");      volumeMap.put(vplexVolume,new ArrayList<Volume>());      for (      String associatedVolume : vplexVolume.getAssociatedVolumes()) {        Volume storageVolume=getDataObject(Volume.class,new URI(associatedVolume),_dbClient);        URI storageSystemId=storageVolume.getStorageController();        if (storageMap.containsKey(storageSystemId) == false) {          StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageSystemId);          storageMap.put(storageSystemId,storage);          if (!storageSystemGuids.contains(storage.getNativeGuid())) {            storageSystemGuids.add(storage.getNativeGuid());          }        }        volumeMap.get(vplexVolume).add(storageVolume);      }    }    _log.info(String.format("Request to create: %s virtual volume(s) %s",volumeMap.size(),volumeLabels));    long startTime=System.currentTimeMillis();    client.rediscoverStorageSystems(storageSystemGuids);    StringBuilder buf=new StringBuilder();    buf.append("Vplex: " + vplexURI + " created virtual volume(s): ");    boolean thinEnabled=false;    List<VPlexVirtualVolumeInfo> virtualVolumeInfos=new ArrayList<VPlexVirtualVolumeInfo>();    Map<String,Volume> vplexVolumeNameMap=new HashMap<String,Volume>();    List<VPlexClusterInfo> clusterInfoList=null;    for (    Volume vplexVolume : volumeMap.keySet()) {      URI vplexVolumeId=vplexVolume.getId();      _log.info(String.format("Creating virtual volume: %s (%s)",vplexVolume.getLabel(),vplexVolumeId));      URI vplexVolumeVarrayURI=vplexVolume.getVirtualArray();      String clusterId=ConnectivityUtil.getVplexClusterForVarray(vplexVolumeVarrayURI,vplexVolume.getStorageController(),_dbClient);      List<VolumeInfo> vinfos=new ArrayList<VolumeInfo>();      for (      Volume storageVolume : volumeMap.get(vplexVolume)) {        StorageSystem storage=storageMap.get(storageVolume.getStorageController());        List<String> itls=VPlexControllerUtils.getVolumeITLs(storageVolume);        VolumeInfo info=new VolumeInfo(storage.getNativeGuid(),storage.getSystemType(),storageVolume.getWWN().toUpperCase().replaceAll(":",""),storageVolume.getNativeId(),storageVolume.getThinlyProvisioned().booleanValue(),itls);        if (storageVolume.getVirtualArray().equals(vplexVolumeVarrayURI)) {          vinfos.add(0,info);        } else {          vinfos.add(info);        }        if (info.getIsThinProvisioned()) {          thinEnabled=true;        }      }      rollbackData.add(vinfos);      _workflowService.storeStepData(stepId,rollbackData);      if (null == clusterInfoList) {        clusterInfoList=client.getClusterInfoDetails();      }      boolean isDistributed=(vinfos.size() >= 2);      thinEnabled=thinEnabled && verifyVplexSupportsThinProvisioning(vplex);      VPlexVirtualVolumeInfo vvInfo=client.createVirtualVolume(vinfos,isDistributed,false,false,clusterId,clusterInfoList,false,thinEnabled);      if (vvInfo == null) {        VPlexApiException ex=VPlexApiException.exceptions.cantFindRequestedVolume(vplexVolume.getLabel());        throw ex;      }      vplexVolumeNameMap.put(vvInfo.getName(),vplexVolume);      virtualVolumeInfos.add(vvInfo);    }    Map<String,VPlexVirtualVolumeInfo> foundVirtualVolumes=client.findVirtualVolumes(clusterInfoList,virtualVolumeInfos);    if (!foundVirtualVolumes.isEmpty()) {      for (      Entry<String,Volume> entry : vplexVolumeNameMap.entrySet()) {        Volume vplexVolume=entry.getValue();        VPlexVirtualVolumeInfo vvInfo=foundVirtualVolumes.get(entry.getKey());        try {          String hostOrClusterName=null;          URI computeResourceURI=computeResourceMap.get(vplexVolume.getId());          if (computeResourceURI != null) {            DataObject hostOrCluster=null;            if (URIUtil.isType(computeResourceURI,Cluster.class)) {              hostOrCluster=getDataObject(Cluster.class,computeResourceURI,_dbClient);            } else             if (URIUtil.isType(computeResourceURI,Host.class)) {              hostOrCluster=getDataObject(Host.class,computeResourceURI,_dbClient);            }            if ((hostOrCluster != null) && ((vplexVolume.getPersonality() == null) || (vplexVolume.checkPersonality(Volume.PersonalityTypes.SOURCE)))) {              hostOrClusterName=hostOrCluster.getLabel();            }          }          if (CustomVolumeNamingUtils.isCustomVolumeNamingEnabled(customConfigHandler,vplex.getSystemType())) {            String customConfigName=CustomVolumeNamingUtils.getCustomConfigName(hostOrClusterName != null);            Project project=getDataObject(Project.class,vplexVolume.getProject().getURI(),_dbClient);            TenantOrg tenant=getDataObject(TenantOrg.class,vplexVolume.getTenant().getURI(),_dbClient);            DataSource customNameDataSource=CustomVolumeNamingUtils.getCustomConfigDataSource(project,tenant,vplexVolume.getLabel(),vvInfo.getWwn(),hostOrClusterName,dataSourceFactory,customConfigName,_dbClient);            if (customNameDataSource != null) {              String customVolumeName=CustomVolumeNamingUtils.getCustomName(customConfigHandler,customConfigName,customNameDataSource,vplex.getSystemType());              vvInfo=CustomVolumeNamingUtils.renameVolumeOnVPlex(vvInfo,customVolumeName,client);              vplexVolume.setLabel(vvInfo.getName());              NamedURI namedURI=vplexVolume.getProject();              namedURI.setName(vvInfo.getName());              vplexVolume.setProject(namedURI);              namedURI=vplexVolume.getTenant();              namedURI.setName(vvInfo.getName());              vplexVolume.setTenant(namedURI);            }          }        } catch (        Exception e) {          _log.warn(String.format("Error renaming newly created VPLEX volume %s:%s",vplexVolume.getId(),vplexVolume.getLabel()),e);        }        buf.append(vvInfo.getName() + " ");        _log.info(String.format("Created virtual volume: %s path: %s",vvInfo.getName(),vvInfo.getPath()));        vplexVolume.setNativeId(vvInfo.getPath());        vplexVolume.setNativeGuid(vvInfo.getPath());        vplexVolume.setDeviceLabel(vvInfo.getName());        vplexVolume.setThinlyProvisioned(vvInfo.isThinEnabled());        checkThinEnabledResult(vvInfo,thinEnabled,_workflowService.getWorkflowFromStepId(stepId).getOrchTaskId());        vplexVolume.setWWN(vvInfo.getWwn());        vplexVolume.setAllocatedCapacity(0L);        vplexVolume.setProvisionedCapacity(vvInfo.getCapacityBytes());        _dbClient.updateObject(vplexVolume);        createdVplexVolumeURIs.add(vplexVolume.getId());        recordBourneVolumeEvent(vplexVolume.getId(),OperationTypeEnum.CREATE_BLOCK_VOLUME.getEvType(true),Operation.Status.ready,OperationTypeEnum.CREATE_BLOCK_VOLUME.getDescription());      }    }    if (foundVirtualVolumes.size() != vplexVolumeNameMap.size()) {      VPlexApiException ex=VPlexApiException.exceptions.cantFindAllRequestedVolume();      throw ex;    }    long elapsed=System.currentTimeMillis() - startTime;    _log.info(String.format("TIMER: %s virtual volume(s) %s create took %f seconds",volumeMap.size(),volumeLabels.toString(),(double)elapsed / (double)1000));    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception creating Vplex Virtual Volume: " + vae.getMessage(),vae);    for (    URI vplexVolumeURI : vplexVolumeURIs) {      if (!createdVplexVolumeURIs.contains(vplexVolumeURI)) {        recordBourneVolumeEvent(vplexVolumeURI,OperationTypeEnum.CREATE_BLOCK_VOLUME.getEvType(false),Operation.Status.error,OperationTypeEnum.CREATE_BLOCK_VOLUME.getDescription());      }    }    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception creating Vplex Virtual Volume: " + ex.getMessage(),ex);    for (    URI vplexVolumeURI : vplexVolumeURIs) {      if (!createdVplexVolumeURIs.contains(vplexVolumeURI)) {        recordBourneVolumeEvent(vplexVolumeURI,OperationTypeEnum.CREATE_BLOCK_VOLUME.getEvType(false),Operation.Status.error,OperationTypeEnum.CREATE_BLOCK_VOLUME.getDescription());      }    }    String opName=ResourceOperationTypeEnum.CREATE_VIRTUAL_VOLUME.getName();    ServiceError serviceError=VPlexApiException.errors.createVirtualVolumesFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  @Before public void beforeTest() throws Exception {  archiveTestOut=new ByteArrayOutputStream();  recordNo=0;  rotated=false;  System.setProperty(SystemProperties.TEMP_FILES_PATH,"build/tmp/");}  }
class C{  public static boolean isQuery(Object object){  if (object instanceof Query)   return true; else   if (object instanceof ObjectWrap) {    return isQuery(((ObjectWrap)object).getEmbededObject(null));  }  return false;}  }
class C{  public <T>List<T> testTwoThreadsTwoItems(T... items){  List<T> results=Collections.synchronizedList(new ArrayList<T>(4));  Scheduler.scheduleMutator(new TestMutator<T>(results,items[0],items[1]));  Scheduler.scheduleMutator(new TestMutator<T>(results,items[2],items[3]));  Scheduler.schedule();  return results;}  }
class C{  public TColor analog(float theta,float delta){  return analog((int)MathUtils.degrees(theta),delta);}  }
class C{  public Anonymous_moreCode_1_ createAnonymous_moreCode_1_(){  Anonymous_moreCode_1_Impl anonymous_moreCode_1_=new Anonymous_moreCode_1_Impl();  return anonymous_moreCode_1_;}  }
class C{  public byte[] buildAbstractBase(String className){  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);  String internalClass=getInternalClassName(className);  String implName=getInternalClassName(_implementedType.getRawClass().getName());  String superName;  if (_implementedType.isInterface()) {    superName=getInternalClassName(Object.class.getName());    SignatureWriter sw=new SignatureWriter();    final SignatureVisitor sv=sw.visitSuperclass();    sv.visitClassType(superName);    sv.visitEnd();    generateSignature(_implementedType,sw.visitInterface());    sw.visitEnd();    cw.visit(V1_5,ACC_ABSTRACT + ACC_PUBLIC + ACC_SUPER,internalClass,sw.toString(),superName,new String[]{implName});  } else {    superName=implName;    SignatureWriter sw=new SignatureWriter();    generateSignature(_implementedType,sw.visitSuperclass());    sw.visitEnd();    cw.visit(V1_5,ACC_ABSTRACT + ACC_PUBLIC + ACC_SUPER,internalClass,sw.toString(),superName,null);  }  cw.visitSource(className + ".java",null);  BeanBuilder.generateDefaultConstructor(cw,superName);  cw.visitEnd();  return cw.toByteArray();}  }
class C{  public static Object begin(Object o){  if (o == null) {    o=new SecurityManager(){      Class<?> clazz=getClassContext()[2];    }.clazz;  }  Deque<Object> stack=STACK.get();  if (!stack.isEmpty()) {    if (stack.contains(o)) {      return o;    }    while (!stack.isEmpty()) {      Object last=stack.peek();      if (Thread.holdsLock(last)) {        break;      }      stack.pop();    }  }  if (TRACE) {    String thread="[thread " + Thread.currentThread().getId() + "]";    String indent=new String(new char[stack.size() * 2]).replace((char)0,' ');    System.out.println(thread + " " + indent+ "sync "+ getObjectName(o));  }  if (stack.size() > 0) {    markHigher(o,stack);  }  stack.push(o);  return o;}  }
class C{  private void clearBuffer(){  for (int i=0; i < BUF_SIZE; i++) {    buf[i]=0;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }    becameIdleAt=SystemClock.uptimeMillis();  }  if (debugCounting) {    if (counterVal == 0) {      Log.i(TAG,"Resource: " + resourceName + " went idle! (Time spent not idle: "+ (becameIdleAt - becameBusyAt)+ ")");    } else {      Log.i(TAG,"Resource: " + resourceName + " in-use-count decremented to: "+ counterVal);    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  public boolean disposed(){  return disposed;}  }
class C{  public static AnnotationDefinition find(final String name){  return DEFINED_ANNOTATIONS.get(name);}  }
class C{  protected boolean isSSDPDiscovery(String body){  if (body != null && body.startsWith("M-SEARCH * HTTP/1.1") && body.contains("MAN: \"ssdp:discover\"")) {    return true;  }  return false;}  }
class C{  protected void emit_Disjunction_VerticalLineKeyword_1_1_0_p(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  @Override public int hashCode(){  int h=super.hashCode();  h=HashUtilities.hashCode(h,this.zFormat);  h=HashUtilities.hashCode(h,this.zDateFormat);  return h;}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (c == null)   throw new NullPointerException("c == null");  if (c == this)   throw new IllegalArgumentException("c == this");  boolean modified=false;  for (  E e : c)   if (add(e))   modified=true;  return modified;}  }
class C{  void end(int endIndex){  this.tagLength=endIndex - tagStartIndex;  this.modified=false;}  }
class C{  @Override protected void onStart(){  super.onStart();  ResponseHandler.register(mDungeonsPurchaseObserver);  initializeOwnedItems();}  }
class C{  protected void tagCasts(){  for (Iterator sIt=((UnitGraph)graph).getBody().getUnits().iterator(); sIt.hasNext(); ) {    final Stmt s=(Stmt)sIt.next();    if (s instanceof AssignStmt) {      AssignStmt as=(AssignStmt)s;      Value rhs=as.getRightOp();      if (rhs instanceof CastExpr) {        CastExpr cast=(CastExpr)rhs;        Type t=cast.getCastType();        if (t instanceof RefType) {          if (cast.getOp() instanceof Local) {            Local l=(Local)cast.getOp();            LocalTypeSet set=(LocalTypeSet)unitToBeforeFlow.get(s);            s.addTag(new CastCheckTag(set.get(set.indexOf(l,(RefType)t))));          } else {            NullConstant nc=(NullConstant)cast.getOp();            s.addTag(new CastCheckTag(true));          }        }      }    }  }}  }
class C{  private void addPara(Document doc,String text,Font font,int spacing,int alignType) throws DocumentException {  Paragraph p=new Paragraph(text,font);  if (spacing != 0) {    p.setSpacingBefore(spacing);  }  if (alignType != 0) {    p.setAlignment(alignType);  }  doc.add(p);  p.clear();}  }
class C{  public static void main(String[] args){  doLoop(HaitiFood.class,args);  System.exit(0);}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  @Path("copy") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse copy(final CopyRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.copy(request);}  }
class C{  public static void decompress(final File src,final File dst) throws IOException {  if (!src.exists())   throw new FileNotFoundException(src.getAbsolutePath());  if (dst.exists() && dst.length() != 0)   throw new IOException("Output file exists and is not empty: " + dst.getAbsolutePath());  if (log.isInfoEnabled())   log.info("src=" + src + ", dst="+ dst);  InputStream is=null;  OutputStream os=null;  try {    is=new GZIPInputStream(new FileInputStream(src),GZIP_BUFFER);    os=new BufferedOutputStream(new FileOutputStream(dst));    copyStream(is,os);    os.flush();  }  finally {    if (is != null)     try {      is.close();    } catch (    IOException ex) {    }    if (os != null)     try {      os.close();    } catch (    IOException ex) {    }  }}  }
class C{  public IllegalConfigurationValueException(String message,Throwable cause){  super(message,cause);}  }
class C{  public T caseBaseTypeRef(BaseTypeRef object){  return null;}  }
class C{  public SidedPlane(final Vector p,final Vector A,final Vector B){  super(A,B);  sigNum=Math.signum(evaluate(p));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (sd <= 0) {    throw new IllegalStateException();  }}  }
class C{  public void addAttribute(Attribute attr){  _attributes.add(attr);}  }
class C{  public static int bitmapSize(Bitmap bitmap){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    return bitmap.getByteCount();  } else {    return bitmap.getRowBytes() * bitmap.getHeight();  }}  }
class C{  public DrawerBuilder withAdapterWrapper(@NonNull RecyclerView.Adapter adapterWrapper){  if (mAdapter == null) {    throw new RuntimeException("this adapter has to be set in conjunction to a normal adapter which is used inside this wrapper adapter");  }  this.mAdapterWrapper=adapterWrapper;  return this;}  }
class C{  private static byte hexDigit(int value){  value&=0xf;  if (value <= 9) {    return (byte)('0' + value);  } else {    return (byte)('a' + value - 10);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Example(String name,String description,Class<?> mainClass,String... resources){  super();  this.name=name;  this.description=description;  this.mainClass=mainClass;  this.resources=resources;}  }
class C{  public NotImplemented(){  super(Messages.getString("NotImplemented.0"),SQLError.SQL_STATE_DRIVER_NOT_CAPABLE);}  }
class C{  @Override public String toString(){  if (field == null) {    return reason;  } else {    return field + ": " + reason;  }}  }
class C{  private void convertToNetwork(){  if (this.network instanceof Network) {    ((Network)this.network).setCapacityPeriod(3600);  }  for (  OsmParser.OsmRelation relation : this.relations.values()) {    for (    OsmParser.OsmRelationMember member : relation.members) {      MapUtils.getSet(member.refId,relationMembers).add(relation.id);    }  }  TagFilter serviceRailTracksFilter=new TagFilter();  serviceRailTracksFilter.add(OsmTag.SERVICE);  for (  OsmParser.OsmWay way : ways.values()) {    if (!highwayParams.containsKey(way.tags.get(OsmTag.HIGHWAY)) && !railwayParams.containsKey(way.tags.get(OsmTag.RAILWAY)) && !relationMembers.containsKey(way.id)) {      way.used=false;    } else     if (!this.nodes.containsKey(way.nodes.get(0)) || !this.nodes.containsKey(way.nodes.get(way.nodes.size() - 1))) {      way.used=false;    }  }  Iterator<Map.Entry<Long,OsmParser.OsmWay>> it=ways.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<Long,OsmParser.OsmWay> entry=it.next();    if (!entry.getValue().used) {      it.remove();    }  }  for (  OsmParser.OsmWay way : this.ways.values()) {    if (this.nodes.containsKey(way.nodes.get(0)) && this.nodes.containsKey(way.nodes.get(way.nodes.size() - 1))) {      this.nodes.get(way.nodes.get(0)).ways++;      this.nodes.get(way.nodes.get(way.nodes.size() - 1)).ways++;    }    for (    Long nodeId : way.nodes) {      OsmParser.OsmNode node=this.nodes.get(nodeId);      node.used=true;      node.ways++;    }  }  if (!config.getKeepPaths()) {    for (    OsmParser.OsmWay way : this.ways.values()) {      double length=0.0;      OsmParser.OsmNode lastNode=this.nodes.get(way.nodes.get(0));      for (int i=1; i < way.nodes.size(); i++) {        OsmParser.OsmNode node=this.nodes.get(way.nodes.get(i));        if (node.ways > 1) {          length=0.0;          lastNode=node;        } else         if (node.ways == 1) {          length+=CoordUtils.calcEuclideanDistance(lastNode.coord,node.coord);          if (length <= config.getMaxLinkLength()) {            node.used=false;            lastNode=node;          } else {            length=0.0;            lastNode=node;          }        } else {          log.warn("Way node with less than 1 ways found.");        }      }    }    for (    OsmParser.OsmWay way : this.ways.values()) {      int prevRealNodeIndex=0;      OsmParser.OsmNode prevRealNode=this.nodes.get(way.nodes.get(prevRealNodeIndex));      for (int i=1; i < way.nodes.size(); i++) {        OsmParser.OsmNode node=this.nodes.get(way.nodes.get(i));        if (node.used) {          if (prevRealNode == node) {            double increment=Math.sqrt(i - prevRealNodeIndex);            double nextNodeToKeep=prevRealNodeIndex + increment;            for (double j=nextNodeToKeep; j < i; j+=increment) {              int index=(int)Math.floor(j);              OsmParser.OsmNode intermediaryNode=this.nodes.get(way.nodes.get(index));              intermediaryNode.used=true;            }          }          prevRealNodeIndex=i;          prevRealNode=node;        }      }    }  }  for (  OsmParser.OsmNode node : this.nodes.values()) {    if (node.used) {      Node nn=this.network.getFactory().createNode(Id.create(node.id,Node.class),node.coord);      this.network.addNode(nn);    }  }  this.id=1;  for (  OsmParser.OsmWay way : this.ways.values()) {    OsmParser.OsmNode fromNode=this.nodes.get(way.nodes.get(0));    double length=0.0;    OsmParser.OsmNode lastToNode=fromNode;    if (fromNode.used) {      for (int i=1, n=way.nodes.size(); i < n; i++) {        OsmParser.OsmNode toNode=this.nodes.get(way.nodes.get(i));        if (toNode != lastToNode) {          length+=CoordUtils.calcEuclideanDistance(lastToNode.coord,toNode.coord);          if (toNode.used) {            createLink(this.network,way,fromNode,toNode,length);            fromNode=toNode;            length=0.0;          }          lastToNode=toNode;        }      }    }  }  this.nodes.clear();  this.ways.clear();  this.relations.clear();  log.info("= conversion statistics: ==========================");  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  if (this.unknownRailways.size() > 0) {    log.info("The following railway-types had no defaults set and were thus NOT converted:");    for (    String railwayType : this.unknownRailways) {      log.info("- \"" + railwayType + "\"");    }  }  if (this.unknownPTs.size() > 0) {    log.info("The following PT-types had no defaults set and were thus NOT converted:");    for (    String ptType : this.unknownPTs) {      log.info("- \"" + ptType + "\"");    }  }  if (this.unknownWays.size() > 0) {    log.info("The way-types with the following tags had no defaults set and were thus NOT converted:");    for (    String wayType : this.unknownWays) {      log.info("- \"" + wayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  public synchronized VasaAssociationObject[] queryAssociatedCapabilityForLun(String[] lunIds) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedCapabilityForLun(): ";  log.debug(methodName + "Entry");  List<Volume> volumeList=null;  List<VasaAssociationObject> returnList=null;  try {    Boolean supportsBlock=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));    Boolean supportsCapability=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-capability-profile"));    if (supportsBlock == false || supportsCapability == false) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    this.setVolumeIds();    if (Util.isEmpty(lunIds)) {      volumeList=_syncManager.getVolumeDetailList(this._reportedVolumeIdList);    } else {      List<String> inputLunIds=new ArrayList<String>();      this.setVolumeIds();      for (      String inputLunId : lunIds) {        if (!Util.isEmpty(inputLunId)) {          if (!inputLunId.startsWith(VOLUME_IDENTIFIER_PREFIX)) {            throw FaultUtil.InvalidArgument("Given StorageLun Id is invalid: " + inputLunId);          }          if (_reportedVolumeIdList.contains(inputLunId)) {            inputLunIds.add(inputLunId);          }        } else {          throw FaultUtil.InvalidArgument("Given StorageLun Id is invalid: " + inputLunId);        }      }      volumeList=_syncManager.getVolumeDetailList(inputLunIds);    }    returnList=new ArrayList<VasaAssociationObject>();    for (    Volume volume : volumeList) {      VasaAssociationObject associationObject=new VasaAssociationObject();      BaseStorageEntity assoc=new BaseStorageEntity();      assoc.setUniqueIdentifier(volume.getCos().getId());      associationObject.addAssociatedId(assoc);      BaseStorageEntity entity=new BaseStorageEntity();      entity.setUniqueIdentifier(volume.getId());      associationObject.addEntityId(entity);      log.debug(methodName + "LUN id[" + entity.getUniqueIdentifier()+ "] is associated to capability["+ assoc.getUniqueIdentifier()+ "]");      returnList.add(associationObject);    }  } catch (  SOSFailure e) {    log.error(methodName + "StorageOSFailure occured ",e);    throw FaultUtil.StorageFault(e);  }catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }  log.debug(methodName + "Exit returning vasa association objects of size[" + returnList.size()+ "]");  return returnList.toArray(new VasaAssociationObject[0]);}  }
class C{  protected void validate_return(VasaAssociationObject[] param){}  }
class C{  public static void autoBoxing(MethodVisitor mv,Class<?> clz){  autoBoxing(mv,Type.getType(clz));}  }
class C{  public void testSanity() throws Exception {  assertTrue(OrientationIndexTest.isAllOrientationsEqual(OrientationIndexTest.getCoordinates("LINESTRING ( 0 0, 0 1, 1 1)")));}  }
class C{  public EditLabelDialog(final Shell parentShell,final TFSRepository repository,final String initialServerPath){  this(parentShell,repository,null,initialServerPath,null,null);  Check.notNull(repository,"repository");  Check.notNull(initialServerPath,"initialServerPath");}  }
class C{  public final boolean equals(final Object aWifi){  WifiRecord oneWifi=(WifiRecord)aWifi;  return getBssid().equals(oneWifi.getBssid());}  }
class C{  public static void checkNeedForEnclosingInstanceCast(BlockScope scope,Expression enclosingInstance,TypeBinding enclosingInstanceType,TypeBinding memberType){  if (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) {    return;  }  TypeBinding castedExpressionType=((CastExpression)enclosingInstance).expression.resolvedType;  if (castedExpressionType == null) {    return;  }  if (castedExpressionType == enclosingInstanceType) {    scope.problemReporter().unnecessaryCast((CastExpression)enclosingInstance);  } else   if (castedExpressionType == TypeBinding.NULL) {    return;  } else {    TypeBinding alternateEnclosingInstanceType=castedExpressionType;    if (castedExpressionType.isBaseType() || castedExpressionType.isArrayType()) {      return;    }    if (memberType == scope.getMemberType(memberType.sourceName(),(ReferenceBinding)alternateEnclosingInstanceType)) {      scope.problemReporter().unnecessaryCast((CastExpression)enclosingInstance);    }  }}  }
class C{  public int glyphOffset(int glyphId){  if (glyphId < 0 || glyphId >= this.numGlyphs) {    throw new IndexOutOfBoundsException("Glyph ID is out of bounds.");  }  return this.loca(glyphId);}  }
class C{  private void handleChannelInfoResult(RequestType type,String url,String result,int responseCode,String stream){  if (result == null || responseCode != 200) {    handleChannelInfoResultError(stream,type,responseCode);    return;  }  ChannelInfo info=parseChannelInfo(result);  if (info == null) {    LOGGER.warning("Error parsing channel info: " + result);    handleChannelInfoResultError(stream,type,responseCode);    return;  }  if (type == RequestType.CHANNEL_PUT) {    resultListener.putChannelInfoResult(RequestResult.SUCCESS);  }  resultListener.receivedChannelInfo(stream,info,RequestResult.SUCCESS);  cachedChannelInfo.put(stream,info);  userIDs.channelInfoReceived(info);}  }
class C{  public Bits dup(){  Assert.check(currentState != BitsState.UNKNOWN);  Bits tmp=new Bits();  tmp.bits=dupBits();  currentState=BitsState.NORMAL;  return tmp;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public boolean canLoadData(){  return m_bd.canLoadData();}  }
class C{  public double saxMinDist(char[] a,char[] b,double[][] distanceMatrix,int n,int w) throws SAXException {  if (a.length == b.length) {    double dist=0.0D;    for (int i=0; i < a.length; i++) {      if (Character.isLetter(a[i]) && Character.isLetter(b[i])) {        int numA=Character.getNumericValue(a[i]) - 10;        int numB=Character.getNumericValue(b[i]) - 10;        int maxIdx=distanceMatrix[0].length;        if (numA > (maxIdx - 1) || numA < 0 || numB > (maxIdx - 1) || numB < 0) {          throw new SAXException("The character index greater than " + maxIdx + " or less than 0!");        }        double localDist=distanceMatrix[numA][numB];        dist=dist + localDist * localDist;      } else {        throw new SAXException("Non-literal character found!");      }    }    return Math.sqrt((double)n / (double)w) * Math.sqrt(dist);  } else {    throw new SAXException("Data arrays lengths are not equal!");  }}  }
class C{  public String toString(){  String answer=super.toString();  if (rootException != null) {    answer+=" [Root exception is " + rootException + "]";  }  if (remainingName != null) {    answer+="; remaining name '" + remainingName + "'";  }  return answer;}  }
class C{  @Override public boolean addAll(Collection<? extends T> arg0){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  @Override public LogMessage readNextLogMessage(){  try {    if (reader == null) {      return null;    }    while (true) {      String line=reader.readLine();      if (line == null) {        close();        if (currentLog != null && matchRegex(currentLog)) {          incrementLogCount(currentLog);          return currentLog;        }        return null;      }      fileLineNumber++;      LogMessage nextLog=null;      if (parser != null) {        nextLog=parser.parseLine(line,request);      } else {        for (        LogParser parser : parserTable) {          nextLog=parser.parseLine(line,request);          if (!nextLog.isContinuation()) {            this.parser=parser;            break;          }        }        if (nextLog == null || nextLog.isContinuation()) {          status.appendInfo(this.filePath,fileLineNumber);          continue;        }      }      if (nextLog.isContinuation()) {        if (currentLog != null) {          currentLog.appendMessage(LogUtil.stringToBytes(line));        }      } else       if (nextLog.isRejected()) {        if (currentLog != null) {          LogMessage returnedLog=currentLog;          currentLog=null;          if (matchRegex(returnedLog)) {            incrementLogCount(returnedLog);            return returnedLog;          }        }      } else       if (nextLog.isRejectedLast()) {        if (currentLog != null) {          LogMessage returnedLog=currentLog;          currentLog=null;          if (matchRegex(returnedLog)) {            incrementLogCount(returnedLog);            return returnedLog;          }        }        break;      } else {        if (currentLog != null) {          LogMessage returnedLog=currentLog;          currentLog=nextLog;          if (returnedLog.isHeader() && currentLog.isHeader()) {            continue;          }          if (matchRegex(returnedLog)) {            incrementLogCount(returnedLog);            return returnedLog;          }        } else {          currentLog=nextLog;        }      }    }  } catch (  IOException e) {    status.appendErrFileName(filePath);  }  return null;}  }
class C{  public final String readUTF() throws IOException {  return readUTF(this);}  }
class C{  public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  public CarrierPlanXmlReaderV2(Carriers carriers){  this.delegate=new CarrierPlanXmlParserV2(carriers);}  }
class C{  @Override public List<ChangeSet> parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  final List<ChangeSet> changeSets=new ArrayList<ChangeSet>(100);  final NodeList nodes=super.evaluateXPath(stdout,"/history/changeset");  if (nodes != null) {    for (int i=0; i < nodes.getLength(); i++) {      final Element changeset=(Element)nodes.item(i);      final NodeList commentNodes=changeset.getElementsByTagName("comment");      final String comment;      if (commentNodes.getLength() == 1) {        comment=commentNodes.item(0).getTextContent();      } else {        comment="";      }      final List<PendingChange> changes=new ArrayList<PendingChange>(100);      final NodeList childNodes=changeset.getElementsByTagName("item");      for (int j=0; j < childNodes.getLength(); j++) {        final Node child=childNodes.item(j);        final NamedNodeMap attributes=child.getAttributes();        changes.add(new PendingChange(attributes.getNamedItem("server-item").getNodeValue(),attributes.getNamedItem("change-type").getNodeValue()));      }      final NamedNodeMap attributes=changeset.getAttributes();      changeSets.add(new ChangeSet(attributes.getNamedItem("id").getNodeValue(),attributes.getNamedItem("owner").getNodeValue(),attributes.getNamedItem("committer").getNodeValue(),attributes.getNamedItem("date").getNodeValue(),comment,changes));    }  }  return changeSets;}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.716 -0500",hash_original_method="7CB4C89F951B084D5A9568880FECD763",hash_generated_method="FD10B01E03D296994182FBFE110A5ED1") public void write(int ch) throws IOException {synchronized (__client) {    ch&=0xff;    if (__client._requestedWont(TelnetOption.BINARY)) {      if (__lastWasCR) {        if (__convertCRtoCRLF) {          __client._sendByte('\n');          if (ch == '\n') {            __lastWasCR=false;            return;          }        } else         if (ch != '\n')         __client._sendByte('\0');      }      __lastWasCR=false;switch (ch) {case '\r':        __client._sendByte('\r');      __lastWasCR=true;    break;case TelnetCommand.IAC:  __client._sendByte(TelnetCommand.IAC);__client._sendByte(TelnetCommand.IAC);break;default :__client._sendByte(ch);break;}} else if (ch == TelnetCommand.IAC) {__client._sendByte(ch);__client._sendByte(TelnetCommand.IAC);} else __client._sendByte(ch);}}  }
class C{  public boolean canInvert(){  return true;}  }
class C{  private boolean parseAttribute(AttributesImpl attrs) throws JasperException {  String qName=parseName();  if (qName == null)   return false;  String localName=qName;  String uri="";  int index=qName.indexOf(':');  if (index != -1) {    String prefix=qName.substring(0,index);    uri=pageInfo.getURI(prefix);    if (uri == null) {      err.jspError(reader.mark(),"jsp.error.attribute.invalidPrefix",prefix);    }    localName=qName.substring(index + 1);  }  reader.skipSpaces();  if (!reader.matches("="))   err.jspError(reader.mark(),"jsp.error.attribute.noequal");  reader.skipSpaces();  char quote=(char)reader.nextChar();  if (quote != '\'' && quote != '"')   err.jspError(reader.mark(),"jsp.error.attribute.noquote");  String watchString="";  if (reader.matches("<%="))   watchString="%>";  watchString=watchString + quote;  String attrValue=parseAttributeValue(watchString);  attrs.addAttribute(uri,localName,qName,"CDATA",attrValue);  return true;}  }
class C{  public void add(T item,boolean own){  if (item == null) {    return;  }  items.add(item);  owned.add(own);}  }
class C{  protected boolean[] canHandleZeroTraining(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("handle zero training instances");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("train");  accepts.add("value");  int numTrain=0, numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public boolean load(){  if (this.context.getMetricDb() != null) {    try {      List<Subscription> subs=this.context.getMetricDb().loadMetricsSubscriptions();synchronized (this.groupSubscriptions) {        this.groupSubscriptions.clear();        for (        Subscription sub : subs) {          String group=sub.group;          if (!this.groupSubscriptions.containsKey(group)) {            this.groupSubscriptions.put(group,new GroupSubscriptions());          }          this.groupSubscriptions.get(group).addSubscription(sub);        }      }      return true;    } catch (    Exception ex) {      logger.log(Level.WARNING,"Failed to load alert subscriptions",ex);      return false;    }  }  return false;}  }
class C{  private static String createBcryptString(byte[] password,byte[] salt,int cost){  StringBuffer sb=new StringBuffer(60);  sb.append('$');  sb.append(version);  sb.append('$');  sb.append(cost < 10 ? ("0" + cost) : Integer.toString(cost));  sb.append('$');  sb.append(encodeData(salt));  byte[] key=BCrypt.generate(password,salt,cost);  sb.append(encodeData(key));  return sb.toString();}  }
class C{  private static void executeTransaction(IgniteCache<Long,Person> cache){  try (Transaction tx=Ignition.ignite().transactions().txStart()){    Person val=cache.get(id);    System.out.println("Read value: " + val);    val=cache.getAndPut(id,new Person(id,"Isaac","Newton"));    System.out.println("Overwrote old value: " + val);    val=cache.get(id);    System.out.println("Read value: " + val);    tx.commit();  }   System.out.println("Read value after commit: " + cache.get(id));  cache.clear(id);  IgniteCache<Long,Person> cacheSkipStore=cache.withSkipStore();  System.out.println("Read value skipping store (expecting null): " + cacheSkipStore.get(id));  System.out.println("Read value with store lookup (expecting NOT null): " + cache.get(id));  System.out.println("Read value skipping store (expecting NOT null): " + cacheSkipStore.get(id));}  }
class C{  public CreateProjectVisualPanel1(){  initComponents();  jTextField1.setText(projectPath + File.separator + jTextField2.getText());}  }
class C{  @Inline public void addEvent(EventType et,int ival1,double dval1){  if (!enabled)   return;  addEventInternal(et,ival1,dval1);}  }
class C{  public StepSwitcher(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  init();}  }
class C{  public LogFile(File parentDirectory,String fileName){  this(new File(parentDirectory,fileName));}  }
class C{  public boolean isMaintenanceModeSupported(){  return maintenanceModeSupported;}  }
class C{  public RobotDebugVariable(final RobotDebugTarget target,final String name,final Object value,final RobotDebugVariable parent){  super(target);  this.name=name;  this.parent=parent;  debugValue=target.getRobotDebugValueManager().createRobotDebugValue(value,this,target);}  }
class C{  public static float[] convertFilterRes(Element filterElement,BridgeContext ctx){  float[] filterRes=new float[2];  String s=getChainableAttributeNS(filterElement,null,SVG_FILTER_RES_ATTRIBUTE,ctx);  Float[] vals=convertSVGNumberOptionalNumber(filterElement,SVG_FILTER_RES_ATTRIBUTE,s,ctx);  if (filterRes[0] < 0 || filterRes[1] < 0) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FILTER_RES_ATTRIBUTE,s});  }  if (vals[0] == null)   filterRes[0]=-1; else {    filterRes[0]=vals[0].floatValue();    if (filterRes[0] < 0)     throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FILTER_RES_ATTRIBUTE,s});  }  if (vals[1] == null)   filterRes[1]=filterRes[0]; else {    filterRes[1]=vals[1].floatValue();    if (filterRes[1] < 0)     throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_FILTER_RES_ATTRIBUTE,s});  }  return filterRes;}  }
class C{  protected String templateString(){  String result="";  String tempResult="";  for (  int m_ResultsetKeyColumn : m_ResultsetKeyColumns) {    tempResult=m_Template.toString(m_ResultsetKeyColumn) + ' ';    tempResult=Utils.removeSubstring(tempResult,"weka.classifiers.");    tempResult=Utils.removeSubstring(tempResult,"weka.filters.");    tempResult=Utils.removeSubstring(tempResult,"weka.attributeSelection.");    result+=tempResult;  }  return result.trim();}  }
class C{  public MergConnectionConfig(){  super();}  }
class C{  public MultiLineLabel(String s){  this(s,false);}  }
class C{  public static void publishDataToFile(String fileName,int numMessages,int delayInMillis) throws IOException {  PrintWriter out=new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(fileName,true)),"UTF-8"));  try {    for (int i=0; i < Math.max(1,numMessages); i++) {      Long currTime=System.currentTimeMillis();      String message=generateEvent(currTime,delayInMillis);      out.println(message);    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    if (out != null) {      out.flush();      out.close();    }  }}  }
class C{  public static float round(Float number,int precision){  return (float)(Math.floor(number.doubleValue() * Math.pow(10,precision) + 0.5) / Math.pow(10,precision));}  }
class C{  public static boolean isomorphic(Iterable<? extends Statement> model1,Iterable<? extends Statement> model2){  Set<? extends Statement> set1=toSet(model1);  Set<? extends Statement> set2=toSet(model2);  if (set1.size() != set2.size()) {    return false;  }  return isSubsetInternal(set1,set2);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  private IOException syntaxError(String message) throws IOException {  throw new IOException(message + " at path " + getPath());}  }
class C{  public void computeGeneralized(double epsilon){  params=0;  double cw=0;  for (int i=0; i < size; i++) {    int n=intervals.getLineageCount(i);    if (n < 0)     n=0;    double w=intervals.getInterval(i) / mu;    int start=i;    int k=1;    while ((w < epsilon && i < size - 1) || intervals.getIntervalType(i) != IntervalType.COALESCENT) {      i++;      k++;      w+=intervals.getInterval(i) / mu;    }    if (maxTime - cw - w < epsilon) {      for (int j=i + 1; j < size; j++) {        i++;        k++;        w+=intervals.getInterval(i) / mu;      }    }    double m=w * Binomial.choose2(n) / k;    for (int j=start; j < start + k; j++) {      populationSize[j]=m;    }    params++;    cw+=w;  }  eps=epsilon;}  }
class C{  public synchronized final Map<String,Object> snapshot(){  return new LinkedHashMap<>(map);}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  private static void createTaskListForNode(Map<String,List<List<Distributable>>> outputMap,int noOfTasksPerNode,String key){  List<List<Distributable>> nodeTaskList=new ArrayList<List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (int i=0; i < noOfTasksPerNode; i++) {    List<Distributable> eachTask=new ArrayList<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);    nodeTaskList.add(eachTask);  }  outputMap.put(key,nodeTaskList);}  }
class C{  public boolean prestartCoreThread(){  return workerCountOf(ctl.get()) < corePoolSize && addWorker(null,true);}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public boolean contains(double value){  return valueMap.containsKey(value);}  }
class C{  public ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public static int isEqualConstantTime(final int b,final int c){  int result=0;  final int xor=b ^ c;  for (int i=0; i < 8; i++) {    result|=xor >> i;  }  return (result ^ 0x01) & 0x01;}  }
class C{  public boolean isSetOfModelValues(){  return modelValue && !getLabel().equals(getRight());}  }
class C{  private static HashMap<String,Object> cleanLine(String line,boolean moreLines,Class<?>... annotation){  HashMap<String,Object> map=new HashMap<String,Object>();  map.put("newLine",moreLines);  map.put("result",null);  if (moreLines) {    String result=verifyLine(line);    if (!"newLine".equals(result)) {      map.put("newLine",false);      if (result.trim().length() > 0 && !result.trim().equals(","))       map.put("result",result);    }    return map;  }  String result=subtractAnnotation(line,annotation);  if (result.endsWith("newLine")) {    map.put("newLine",true);    result=result.substring(0,result.length() - "newLine".length());  }  if (result.trim().length() > 0)   map.put("result",result);  return map;}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public AttachProvider provider(){  return provider;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.160 -0500",hash_original_method="52A8017CB43DDF5506166F15621D416B",hash_generated_method="8CE23F25206850F891145EB8898653D8") public void open(HttpRoute route,HttpContext context,HttpParams params) throws IOException {  if (route == null) {    throw new IllegalArgumentException("Route must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker != null) && this.tracker.isConnected()) {    throw new IllegalStateException("Connection already open.");  }  this.tracker=new RouteTracker(route);  final HttpHost proxy=route.getProxyHost();  connOperator.openConnection(this.connection,(proxy != null) ? proxy : route.getTargetHost(),route.getLocalAddress(),context,params);  RouteTracker localTracker=tracker;  if (localTracker == null) {    throw new IOException("Request aborted");  }  if (proxy == null) {    localTracker.connectTarget(this.connection.isSecure());  } else {    localTracker.connectProxy(proxy,this.connection.isSecure());  }}  }
class C{  private DownloadSingleInitiationResponse initiateDownload(BusinessObjectData businessObjectData){  return uploadDownloadService.initiateDownloadSingle(businessObjectData.getNamespace(),businessObjectData.getBusinessObjectDefinitionName(),businessObjectData.getBusinessObjectFormatUsage(),businessObjectData.getBusinessObjectFormatFileType(),businessObjectData.getBusinessObjectFormatVersion(),businessObjectData.getPartitionValue(),businessObjectData.getVersion());}  }
class C{  @Override public String toString(){  return fFailedTest + ": " + fThrownException.getMessage();}  }
class C{  public void deleteInstances(int[] rowIndices){  int[] realIndices;  int i;  realIndices=new int[rowIndices.length];  for (i=0; i < rowIndices.length; i++)   realIndices[i]=mIndices[rowIndices[i]];  ((ArffTableModel)getModel()).deleteInstances(realIndices);}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (debug) {      Log.d(TAG,"Memory cache cleared");    }  }synchronized (mDiskCacheLock) {    mDiskCacheStarting=true;    if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {      try {        mDiskLruCache.delete();        if (debug) {          Log.d(TAG,"Disk cache cleared");        }      } catch (      IOException e) {        Log.e(TAG,"clearCache - " + e);      }      mDiskLruCache=null;      initDiskCache();    }  }}  }
class C{  private void announceSessionReady(final boolean signedInAutomatically){  if (mCallback != null) {    mCallback.onConnect(signedInAutomatically);  }}  }
class C{  public void endQuerySend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(querySendInProgressId,-1);  int endQuerySendId;  if (failed) {    endQuerySendId=querySendFailedId;  } else {    endQuerySendId=querySendId;  }  this.sendStats.incInt(endQuerySendId,1);  this.stats.incLong(querySendDurationId,duration);}  }
class C{  public static List<String> splitSmart(String s,char separator){  ArrayList<String> lst=new ArrayList<>(4);  int pos=0, start=0, end=s.length();  char inString=0;  char ch=0;  while (pos < end) {    char prevChar=ch;    ch=s.charAt(pos++);    if (ch == '\\') {      pos++;    } else     if (inString != 0 && ch == inString) {      inString=0;    } else     if (ch == '\'' || ch == '"') {      if (!Character.isLetterOrDigit(prevChar)) {        inString=ch;      }    } else     if (ch == separator && inString == 0) {      lst.add(s.substring(start,pos - 1));      start=pos;    }  }  if (start < end) {    lst.add(s.substring(start,end));  }  return lst;}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public static void main(String[] args){  float f=3.88f - 0.01f;  System.out.println("3.88f - 0.01f = " + f);  int i1=Float.floatToIntBits(f);  System.out.println("answer is " + Integer.toHexString(i1) + " in hex");  if (f == 3.87f) {    System.out.println("Same");  }  float g=3.87f - 0.01f;  System.out.println("3.87f - 0.01f = " + g);  int bitvalue1=Float.floatToIntBits(3.88f);  System.out.println("3.88f is " + Integer.toHexString(bitvalue1));  int bitvalue2=Float.floatToIntBits(0.01f);  System.out.println("0.01f is " + Integer.toHexString(bitvalue2));  int i2=Float.floatToIntBits(3.87f);  System.out.println("3.87  is " + Integer.toHexString(i2));  System.out.println("0x" + Integer.toHexString(0x407851ec) + " : "+ Float.intBitsToFloat(0x407851ec));  System.out.println("0x" + Integer.toHexString(0x407851ed) + " : "+ Float.intBitsToFloat(0x407851ed));  System.out.println("0x" + Integer.toHexString(0x407851ee) + " : "+ Float.intBitsToFloat(0x407851ee));  System.out.println("0x" + Integer.toHexString(0x407851ef) + " : "+ Float.intBitsToFloat(0x407851ef));  int v;  v=(int)(Math.random() * Integer.MAX_VALUE);  System.out.println(Integer.toHexString(v));  System.out.println(Float.intBitsToFloat(v));  v=(int)(Math.random() * Integer.MAX_VALUE);  System.out.println(Integer.toHexString(v));  System.out.println(Float.intBitsToFloat(v));  v=(int)(Math.random() * Integer.MAX_VALUE);  System.out.println(Integer.toHexString(v));  System.out.println(Float.intBitsToFloat(v));}  }
class C{  private void checkPostsDisplayOnRecyclerView(List<Post> postsToCheck,int position){  int columnCount=5;  int size=postsToCheck.size() + position;  int pos=0;  for (int i=position; i < size; i++) {    checkItemAtPosition(i,postsToCheck.get(pos));    if (((i + 1) % columnCount) == 0) {      int nextRowStart=i + columnCount;      int nextRowEnd=nextRowStart - columnCount + 1;      for (int n=nextRowStart; n >= nextRowEnd; n--) {        checkItemAtPosition(n,postsToCheck.get(n - position));      }      i=i + columnCount;    }    pos++;  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if ((params == null) || (params.length < getMinimumParameters())) {    return false;  }  final RPAction action=new RPAction();  action.put("type","alterquest");  action.put("target",params[0]);  action.put("name",params[1]);  if ((params.length > 2) && (params[2] != null)) {    action.put("state",params[2]);  }  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  private void adjustMinPrefForSpanningComps(DimConstraint[] specs,Float[] defPush,FlowSizeSpec fss,ArrayList<LinkedDimGroup>[] groupsLists){  for (int r=groupsLists.length - 1; r >= 0; r--) {    ArrayList<LinkedDimGroup> groups=groupsLists[r];    for (    LinkedDimGroup group : groups) {      if (group.span == 1)       continue;      int[] sizes=group.getMinPrefMax();      for (int s=LayoutUtil.MIN; s <= LayoutUtil.PREF; s++) {        int cSize=sizes[s];        if (cSize == LayoutUtil.NOT_SET)         continue;        int rowSize=0;        int sIx=(r << 1) + 1;        int len=Math.min((group.span << 1),fss.sizes.length - sIx) - 1;        for (int j=sIx; j < sIx + len; j++) {          int sz=fss.sizes[j][s];          if (sz != LayoutUtil.NOT_SET)           rowSize+=sz;        }        if (rowSize < cSize && len > 0) {          for (int eagerness=0, newRowSize=0; eagerness < 4 && newRowSize < cSize; eagerness++)           newRowSize=fss.expandSizes(specs,defPush,cSize,sIx,len,s,eagerness);        }      }    }  }}  }
class C{  @Override public int hashCode(){  return this.trieNode.hashCode();}  }
class C{  public PointF mapViewToImage(PointF viewPoint){  float[] points=mTempValues;  points[0]=viewPoint.x;  points[1]=viewPoint.y;  mActiveTransform.invert(mActiveTransformInverse);  mActiveTransformInverse.mapPoints(points,0,points,0,1);  mapAbsoluteToRelative(points,points,1);  return new PointF(points[0],points[1]);}  }
class C{  public void testIsUnmappable(){  assertFalse(CoderResult.UNDERFLOW.isUnmappable());  assertFalse(CoderResult.OVERFLOW.isUnmappable());  assertFalse(CoderResult.malformedForLength(1).isUnmappable());  assertTrue(CoderResult.unmappableForLength(1).isUnmappable());}  }
class C{  public Iterator<Item> iterator(){  return new ListIterator<Item>(first);}  }
class C{  public String generateDockerfileFor(Map<String,File> plugins) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("FROM scratch").append(NL).append("MAINTAINER Kanstantsin Shautsou <kanstantsin.sha@gmail.com>").append(NL).append("COPY ./ /").append(NL).append("VOLUME /usr/share/jenkins/ref").append(NL);  for (  Map.Entry<String,String> entry : generateLabels(plugins).entrySet()) {    builder.append("LABEL ").append(entry.getKey()).append("=").append(entry.getValue()).append(NL);  }  return builder.toString();}  }
class C{  private synchronized void onAdFetched(NativeExpressAdView adNative){  Log.i(TAG,"onAdFetched");  mFetchFailCount=0;}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public void finish(){  if (mParent == null) {    int resultCode;    Intent resultData;synchronized (this) {      resultCode=mResultCode;      resultData=mResultData;    }    if (false)     Log.v(TAG,"Finishing self: token=" + mToken);    try {      if (resultData != null) {        resultData.prepareToLeaveProcess();      }      if (ActivityManagerNative.getDefault().finishActivity(mToken,resultCode,resultData)) {        mFinished=true;      }    } catch (    RemoteException e) {    }  } else {    mParent.finishFromChild(this);  }}  }
class C{  public static double cauchyRand(){  double u1, u2, v1, v2;  do {    u1=uniformRand();    u2=uniformRand();    v1=2.0 * u1 - 1.0;    v2=u2;  } while (v1 * v1 + v2 * v2 > 1.0);  return (v1 / v2);}  }
class C{  public static String formatFileSize(long longSize,int decimalPos){  Messages messages=AppBeans.get(Messages.NAME);  NumberFormat fmt=NumberFormat.getNumberInstance();  if (decimalPos >= 0) {    fmt.setMaximumFractionDigits(decimalPos);  }  final double size=longSize;  double val=size / (1024 * 1024);  if (val > 1) {    return fmt.format(val).concat(" " + messages.getMessage(FileDownloadHelper.class,"fmtMb"));  }  val=size / 1024;  if (val > 10) {    return fmt.format(val).concat(" " + messages.getMessage(FileDownloadHelper.class,"fmtKb"));  }  return fmt.format(size).concat(" " + messages.getMessage(FileDownloadHelper.class,"fmtB"));}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{        yybegin(IN_KEY_VALUE_SEPARATOR);        return PropertiesTokenTypes.KEY_CHARACTERS;      }case 8:    break;case 7:{    yybegin(IN_VALUE);    return PropertiesTokenTypes.KEY_VALUE_SEPARATOR;  }case 9:break;case 5:{yybegin(YYINITIAL);return PropertiesTokenTypes.VALUE_CHARACTERS;}case 10:break;case 4:{yybegin(YYINITIAL);return PropertiesTokenTypes.END_OF_LINE_COMMENT;}case 11:break;case 2:{return PropertiesTokenTypes.WHITE_SPACE;}case 12:break;case 6:{yybegin(YYINITIAL);return PropertiesTokenTypes.WHITE_SPACE;}case 13:break;case 3:{return PropertiesTokenTypes.BAD_CHARACTER;}case 14:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  protected void createButtons(Composite sectionArea,FormToolkit toolkit,boolean add,boolean edit,boolean remove){  doCreateButtons(sectionArea,toolkit,true,true,true);}  }
class C{  public HexTableModel(HexEditor editor,ResourceBundle msg){  this.editor=editor;  doc=new ByteBuffer(16);  bytesPerRow=16;  undoManager=new UndoManager();  columnNames=new String[17];  for (int i=0; i < 16; i++) {    columnNames[i]="+" + Integer.toHexString(i).toUpperCase();  }  columnNames[16]=msg.getString("AsciiDump");  dumpColBuf=new char[16];  Arrays.fill(dumpColBuf,' ');  byteStrVals=new String[256];  for (int i=0; i < byteStrVals.length; i++) {    byteStrVals[i]=Integer.toHexString(i);  }  paddedLowerByteStrVals=new String[16];  for (int i=0; i < paddedLowerByteStrVals.length; i++) {    paddedLowerByteStrVals[i]="0" + Integer.toHexString(i);  }}  }
class C{  private static String encode64(long time,int counter){  char[] encodedData=new char[MAX_DIGIT];  int i, idx;  for (i=0; i < 7; i++) {    idx=(int)time & 63;    time>>=6;    encodedData[i]=CODE_TABLE[idx];  }  for (; i < MAX_DIGIT; i++) {    idx=counter & 63;    counter>>=6;    encodedData[i]=CODE_TABLE[idx];  }  return new String(encodedData);}  }
class C{  public ProtocolCodecException(Throwable cause){  super(cause);}  }
class C{  public void testCustomAttributes() throws IOException {  assertAnalyzesTo(sentenceAndWord,"He said, \"Are you going?\" John shook his head.",new String[]{"He","said","Are","you","going","John","shook","his","head"},new int[]{0,3,10,14,18,26,31,37,41},new int[]{2,7,13,17,23,30,36,40,45},new int[]{1,1,1,1,1,2,1,1,1});}  }
class C{  public boolean intersectsTriangle(Triangle2D tri){  if (containsPoint(tri.a) || containsPoint(tri.b) || containsPoint(tri.c)) {    return true;  }  if (tri.containsPoint(a) || tri.containsPoint(b) || tri.containsPoint(c)) {    return true;  }  Line2D[] ea=new Line2D[]{new Line2D(a,b),new Line2D(b,c),new Line2D(c,a)};  Line2D[] eb=new Line2D[]{new Line2D(tri.a,tri.b),new Line2D(tri.b,tri.c),new Line2D(tri.c,tri.a)};  for (  Line2D la : ea) {    for (    Line2D lb : eb) {      Type type=la.intersectLine(lb).getType();      if (type != Type.NON_INTERSECTING && type != Type.PARALLEL) {        return true;      }    }  }  return false;}  }
class C{  @SuppressWarnings("deprecation") private void decodeParams(Object[] params,PreparedStatement pstmt) throws SQLException {  int arraySize;  Object[] param=null;  for (int i=0; i < params.length; i++) {    if (params[i] instanceof Object[]) {      param=(Object[])params[i];      if (param.length == 2) {        if (param[0] == null) {          pstmt.setNull(i + 1,((Integer)param[1]).intValue());          continue;        }        if (param[0] instanceof java.sql.Date || param[0] instanceof java.sql.Time || param[0] instanceof java.sql.Timestamp) {          System.err.println(resBundle.handleGetObject("crsreader.datedetected").toString());          if (param[1] instanceof java.util.Calendar) {            System.err.println(resBundle.handleGetObject("crsreader.caldetected").toString());            pstmt.setDate(i + 1,(java.sql.Date)param[0],(java.util.Calendar)param[1]);            continue;          } else {            throw new SQLException(resBundle.handleGetObject("crsreader.paramtype").toString());          }        }        if (param[0] instanceof Reader) {          pstmt.setCharacterStream(i + 1,(Reader)param[0],((Integer)param[1]).intValue());          continue;        }        if (param[1] instanceof Integer) {          pstmt.setObject(i + 1,param[0],((Integer)param[1]).intValue());          continue;        }      } else       if (param.length == 3) {        if (param[0] == null) {          pstmt.setNull(i + 1,((Integer)param[1]).intValue(),(String)param[2]);          continue;        }        if (param[0] instanceof java.io.InputStream) {switch (((Integer)param[2]).intValue()) {case CachedRowSetImpl.UNICODE_STREAM_PARAM:            pstmt.setUnicodeStream(i + 1,(java.io.InputStream)param[0],((Integer)param[1]).intValue());          break;case CachedRowSetImpl.BINARY_STREAM_PARAM:        pstmt.setBinaryStream(i + 1,(java.io.InputStream)param[0],((Integer)param[1]).intValue());      break;case CachedRowSetImpl.ASCII_STREAM_PARAM:    pstmt.setAsciiStream(i + 1,(java.io.InputStream)param[0],((Integer)param[1]).intValue());  break;default :throw new SQLException(resBundle.handleGetObject("crsreader.paramtype").toString());}}if (param[1] instanceof Integer && param[2] instanceof Integer) {pstmt.setObject(i + 1,param[0],((Integer)param[1]).intValue(),((Integer)param[2]).intValue());continue;}throw new SQLException(resBundle.handleGetObject("crsreader.paramtype").toString());} else {pstmt.setObject(i + 1,params[i]);continue;}} else {pstmt.setObject(i + 1,params[i]);}}}  }
class C{  public void removeEmojiconGroup(int position){  emojiconGroupList.remove(position);  pagerView.removeEmojiconGroup(position);  tabBar.removeTab(position);}  }
class C{  public static boolean equals(int[] field1,int[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  public final Int2D discretize(final Double2D location){  return new Int2D((int)(location.x / discretization),(int)(location.y / discretization));}  }
class C{  private static boolean isLeftToRight(JComponent c){  boolean leftToRight=true;  for (int i=c.getComponentCount() - 1; i >= 0 && leftToRight; i--) {    leftToRight=c.getComponent(i).getComponentOrientation().isLeftToRight();  }  return leftToRight;}  }
class C{  private void insertRemoteFile2Article(long rfId,long aId){synchronized (insertRemoteFile2ArticleLock) {    insertRemoteFile2Article.bindLong(1,rfId);    insertRemoteFile2Article.bindLong(2,aId);    if (isDBAvailable()) {      try {        insertRemoteFile2Article.executeInsert();      } catch (      SQLiteConstraintException e) {        Log.w(TAG,"Article with id " + aId + " was removed before we added the corresponding remote-files. This warning can safely be"+ " ignored.");      }    }  }}  }
class C{  public static double[] addVector(final double[] base,final double[] add){  double[] ret=new double[max(base.length,add.length)];  if (add.length == base.length) {    for (int i=0; i < base.length; i++) {      ret[i]=base[i] + add[i];    }  } else {    double[] temp=max(base,add);    int max=max(base.length,add.length);    int min=max - Math.abs(base.length - add.length);    for (int i=0; i < min; i++) {      ret[i]=base[i] + add[i];    }    for (int i=min; i < max; i++) {      ret[i]=temp[i];    }  }  return ret;}  }
class C{  @Override public Properties trackCreateAccountClicked(String appVersion,String source){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  aEvent.properties.putValue(Keys.NAME,Values.CREATE_ACCOUNT_CLICK);  if (!TextUtils.isEmpty(source))   aEvent.properties.putValue(Keys.PROVIDER,source);  aEvent.setAppNameContext();  aEvent.properties=addCategoryToBiEvents(aEvent.properties,Values.CONVERSION,appVersion);  tracker.track(Events.CREATE_ACCOUNT_CLICKED,aEvent.properties);  return aEvent.properties;}  }
class C{  @Override public String toString(){  return "Pair(" + first + ", "+ second+ ")";}  }
class C{  public static short[] intToShortArray(final int src,final int srcPos,final short[] dst,final int dstPos,final int nShorts){  if (0 == nShorts) {    return dst;  }  if ((nShorts - 1) * 16 + srcPos >= 32) {    throw new IllegalArgumentException("(nShorts-1)*16+srcPos is greather or equal to than 32");  }  int shift=0;  for (int i=0; i < nShorts; i++) {    shift=i * 16 + srcPos;    dst[dstPos + i]=(short)(0xffff & (src >> shift));  }  return dst;}  }
class C{  public FrameView(Element elem){  super(elem);}  }
class C{  protected MessageConsumer createConsumer() throws JMSException {  if (durable) {    LOG.info("Creating durable consumer");    return consumeSession.createDurableSubscriber((Topic)consumerDestination,getName());  }  System.out.println(">>>>>>>creating cons on " + consumerDestination);  return consumeSession.createConsumer(consumerDestination);}  }
class C{  void addTestsWithStatus(Collection<TestIdentifier> tests,Deque<String> parentSuiteNames,CtsTestStatus resultFilter){  if (getName() != null) {    parentSuiteNames.addLast(getName());  }  for (  TestSuite suite : mChildSuiteMap.values()) {    suite.addTestsWithStatus(tests,parentSuiteNames,resultFilter);  }  for (  TestCase testCase : mChildTestCaseMap.values()) {    testCase.addTestsWithStatus(tests,parentSuiteNames,resultFilter);  }  if (getName() != null) {    parentSuiteNames.removeLast();  }}  }
class C{  public boolean isPostStatistical(){  Object oo=get_Value(COLUMNNAME_PostStatistical);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ContainerCloudletSchedulerDynamicWorkload(double mips,int numberOfPes){  super();  setMips(mips);  setNumberOfPes(numberOfPes);  setTotalMips(getNumberOfPes() * getMips());  setUnderAllocatedMips(new HashMap<String,Double>());  setCachePreviousTime(-1);}  }
class C{  int[] alloc4(int size){  return new int[size];}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){  this.firstRV=this.findView(R.id.first_rv);  this.firstRV.addItemDecoration(new EasyDividerItemDecoration(this.getContext(),EasyDividerItemDecoration.VERTICAL_LIST));}  }
class C{  public static <V extends NumberVector>V randomVector(NumberVector.Factory<V> factory,int dim){  return randomVector(factory,dim,new Random());}  }
class C{  public boolean equals(final HttpVersion version){  return compareTo(version) == 0;}  }
class C{  private static void error(NetworkForm network){  params.flash();  Validation.keep();  edit(network.id,params.get(VIRTUAL_ARRAY_PARAM));}  }
class C{  public static String relativeFile(Iterable<? extends File> paths,String file){  File path=selectPath(paths,file);  File relFile=relativeFile(path,new File(file));  return relFile.getPath();}  }
class C{  public void start(){  super.start();  setupPortrayals();  display.reset();  display.repaint();}  }
class C{  public void restore(){  if (typeName == null) {    typeName=type.getName();  } else {    type=EquipmentType.get(typeName);  }  if (type == null) {    System.err.println("Mounted.restore: could not restore equipment type \"" + typeName + "\"");  }}  }
class C{  public int lastIndexOfAnyBut(final CharSet s){  return lastIndexOfAnyBut(s,length());}  }
class C{  private Vec3UV transformPosition(Vec3UV scaledPos,ModelRenderer modelRenderer,RotationMatrix rotationMatrix,double modelScale){  Vec3UV scaledRotPos=new Vec3UV(modelRenderer.rotationPointX * modelScale,modelRenderer.rotationPointY * modelScale,modelRenderer.rotationPointZ * modelScale);  if (modelRenderer.rotateAngleX == 0.0F && modelRenderer.rotateAngleY == 0.0F && modelRenderer.rotateAngleZ == 0.0F) {    modelRenderer.rotateAngleX=0.0001F;    modelRenderer.rotateAngleY=0.0001F;    modelRenderer.rotateAngleZ=0.0001F;  }  scaledPos.x+=scaledRotPos.x;  scaledPos.y+=scaledRotPos.y;  scaledPos.z+=scaledRotPos.z;  this.applyRotation(modelRenderer,rotationMatrix);  scaledPos=rotationMatrix.transformVec(scaledPos,scaledRotPos);  return scaledPos;}  }
class C{  private static void quickSort1(int off,int len,IntComparator comp,Swapper swapper){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && (comp.compare(j - 1,j) > 0); j--) {      swapper.swap(j,j - 1);    }    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(l,l + s,l + 2 * s,comp);      m=med3(m - s,m,m + s,comp);      n=med3(n - 2 * s,n - s,n,comp);    }    m=med3(l,m,n,comp);  }  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && ((comparison=comp.compare(b,m)) <= 0)) {      if (comparison == 0) {        if (a == m)         m=b; else         if (b == m)         m=a;        swapper.swap(a++,b);      }      b++;    }    while (c >= b && ((comparison=comp.compare(c,m)) >= 0)) {      if (comparison == 0) {        if (c == m)         m=d; else         if (d == m)         m=c;        swapper.swap(c,d--);      }      c--;    }    if (b > c)     break;    if (b == m)     m=d; else     if (c == m)     m=c;    swapper.swap(b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(swapper,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(swapper,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(off,s,comp,swapper);  if ((s=d - c) > 1)   quickSort1(n - s,s,comp,swapper);}  }
class C{  public Graph search(List<Node> nodes){  this.logger.log("info","Starting PC algorithm");  this.logger.log("info","Independence test = " + getIndependenceTest() + ".");  long startTime=System.currentTimeMillis();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List<Node> allNodes=getIndependenceTest().getVariables();  if (!allNodes.containsAll(nodes)) {    throw new IllegalArgumentException("All of the given nodes must " + "be in the domain of the independence test provided.");  }  FasStableConcurrent fas=new FasStableConcurrent(initialGraph,getIndependenceTest());  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setVerbose(false);  fas.setRecordSepsets(false);  graph=fas.search();  SearchGraphUtils.pcOrientbk(knowledge,graph,nodes);  addColliders(graph);  MeekRules rules=new MeekRules();  rules.setKnowledge(knowledge);  rules.orientImplied(graph);  this.logger.log("graph","\nReturning this graph: " + graph);  this.elapsedTime=System.currentTimeMillis() - startTime;  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.log("info","Finishing PC Algorithm.");  this.logger.flush();  return graph;}  }
class C{  public void write(String str,int off,int len){synchronized (lock) {    int newcount=count + len;    if (newcount > buf.length) {      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));    }    str.getChars(off,off + len,buf,count);    count=newcount;  }}  }
class C{  public int yForLineContaining(int offs) throws BadLocationException {  Rectangle alloc=getVisibleEditorRect();  if (alloc != null) {    RSTAView view=(RSTAView)getRootView(textArea).getView(0);    return view.yForLineContaining(alloc,offs);  }  return -1;}  }
class C{  @Override public boolean isAttackable(){  return true;}  }
class C{  private NotifyUserProxy(){  if (OSUtils.supportsTray()) {    _notifier=new TrayNotifier();    if (!showTrayIcon())     _notifier=new BasicNotifier();  } else {    _notifier=new BasicNotifier();  }}  }
class C{  public static double distancePointPlane(double pointX,double pointY,double pointZ,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z){  double v1Y0Y=v1Y - v0Y;  double v2Z0Z=v2Z - v0Z;  double v2Y0Y=v2Y - v0Y;  double v1Z0Z=v1Z - v0Z;  double v2X0X=v2X - v0X;  double v1X0X=v1X - v0X;  double a=v1Y0Y * v2Z0Z - v2Y0Y * v1Z0Z;  double b=v1Z0Z * v2X0X - v2Z0Z * v1X0X;  double c=v1X0X * v2Y0Y - v2X0X * v1Y0Y;  double d=-(a * v0X + b * v0Y + c * v0Z);  return distancePointPlane(pointX,pointY,pointZ,a,b,c,d);}  }
class C{  public AsyncRequiredErrorMessage(String description){  super(description);}  }
class C{  public boolean emailExists(String email){  return email != null && userEntityRepository.findByEmail(email) != null;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public static void storeSourceType(final Context context,SourceType sourceType){  PreferenceManager.getDefaultSharedPreferences(context).edit().putString(KEY_SOURCE_TYPE,sourceType.name()).apply();}  }
class C{  public static void removeSchemaMap(ServletContext servletContext){  servletContext.removeAttribute(SCHEMA_MAP);}  }
class C{  public JSDocCompletionHint(CompletionKind kind,String prefix,ContentNode nodeToBeCompleted){  this.kind=kind;  this.prefix=prefix;  this.nodeToBeCompleted=nodeToBeCompleted;}  }
class C{  public DialogOptions center(){  return this;}  }
class C{  public void testEquals(){  UnknownAttributesAttribute target=new UnknownAttributesAttribute();  boolean expectedReturn=false;  boolean actualReturn=unknownAttributesAttribute.equals(null);  assertEquals("Equals failed for a null object",expectedReturn,actualReturn);  unknownAttributesAttribute.addAttributeID((char)25);  target.addAttributeID((char)25);  unknownAttributesAttribute.addAttributeID((char)26);  actualReturn=unknownAttributesAttribute.equals(target);  assertEquals("Equals failed when comparing different objects.",expectedReturn,actualReturn);  target.addAttributeID((char)26);  expectedReturn=true;  actualReturn=unknownAttributesAttribute.equals(target);  assertEquals("Equals failed to recognize identical objects.",expectedReturn,actualReturn);}  }
class C{  public static String[] tokenize(String string,String splitOn){  return string.replace(" ","").split(splitOn);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int compareTo(MP4Frame that){  int ret=0;  if (this.time > that.getTime()) {    ret=1;  } else   if (this.time < that.getTime()) {    ret=-1;  } else   if (Double.doubleToLongBits(time) == Double.doubleToLongBits(that.getTime()) && this.offset > that.getOffset()) {    ret=1;  } else   if (Double.doubleToLongBits(time) == Double.doubleToLongBits(that.getTime()) && this.offset < that.getOffset()) {    ret=-1;  }  return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ArtifactID(final String uri){  final String[] parts=decodeURI(uri);  if (parts == null) {    throw new MalformedURIException(String.format("The URI was not able to be decoded: %s",uri));  }  tool=parts[0];  artifactType=parts[1];  toolSpecificId=parts[2];}  }
class C{  public void addTestTree(final TestConfiguration configuration,TestTree testTree,boolean show){  if (testTree == null)   throw new IllegalArgumentException("testTree may not be null");  final String sessionId=testTree.getSessionId() != null ? testTree.getSessionId().getValue() : null;  if (sessionId == null || sessionId.trim().length() == 0)   throw new IllegalArgumentException("testTree must have a non-null, non-empty sessionId");  if (findRootNode(testTree.getSessionId()) != null)   throw new IllegalArgumentException("view already contains a test tree with the same sessionId");  final ResultNode newRoot=createNodes(testTree);  newRoot.startRunning();  registeredSessions.add(new TestSession(configuration,newRoot));  refreshActions();  if (show) {    setShownTestTree(testTree.getSessionId());  }}  }
class C{  @Benchmark public void dollarCoding(){  run();}  }
class C{  public static void main(String[] args){  runFileLoader(new CSVLoader(),args);}  }
class C{  public static Uri createUri(Context ctx){  File root=getStorageDirectory(ctx,null);  root.mkdirs();  File file=new File(root,Long.toString(new Date().getTime()));  Uri uri=Uri.fromFile(file);  return uri;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.219 -0500",hash_original_method="F49A1215DBCAFF371E059D4C820BFFAD",hash_generated_method="D0C5A42D8CF59B609D724814F892DAB7") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void bytesTransferred(CopyStreamEvent event){  bytesTransferred(event.getTotalBytesTransferred(),event.getBytesTransferred(),event.getStreamSize());}  }
class C{  private void tryGrow(Object[] array,int oldCap){  lock.unlock();  Object[] newArray=null;  if (allocationSpinLock == 0 && UNSAFE.compareAndSwapInt(this,allocationSpinLockOffset,0,1)) {    try {      int newCap=oldCap + ((oldCap < 64) ? (oldCap + 2) : (oldCap >> 1));      if (newCap - MAX_ARRAY_SIZE > 0) {        int minCap=oldCap + 1;        if (minCap < 0 || minCap > MAX_ARRAY_SIZE)         throw new OutOfMemoryError();        newCap=MAX_ARRAY_SIZE;      }      if (newCap > oldCap && queue == array)       newArray=new Object[newCap];    }  finally {      allocationSpinLock=0;    }  }  if (newArray == null)   Thread.yield();  lock.lock();  if (newArray != null && queue == array) {    queue=newArray;    System.arraycopy(array,0,newArray,0,oldCap);  }}  }
class C{  public static graphql.schema.GraphQLType iface(Class<?> iface) throws IllegalAccessException, InstantiationException, NoSuchMethodException {  if (iface.getAnnotation(GraphQLUnion.class) != null) {    return unionBuilder(iface).build();  } else   if (!iface.isAnnotationPresent(GraphQLTypeResolver.class)) {    return object(iface);  } else {    return ifaceBuilder(iface).build();  }}  }
class C{  public OptionSet addUriPath(String segment){  if (segment == null)   throw new IllegalArgumentException("URI path option must not be null");  if (segment.getBytes(CoAP.UTF8_CHARSET).length > 255)   throw new IllegalArgumentException("Uri-Path option must be smaller or euqal to 255 bytes (UTF-8 encoded): " + segment);  getUriPath().add(segment);  return this;}  }
class C{  public String toInnerHtml(Node node,Appendable appendable){  NodeVisitor renderer=createRenderer(appendable);  node.visitChildren(renderer);  return appendable.toString();}  }
class C{  @Override public boolean isOutputSensorIncluded(String sensorName) throws IllegalArgumentException {  Sensor s1=InstanceManager.sensorManagerInstance().provideSensor(sensorName);  return isOutputSensorIncluded(s1);}  }
class C{  int crossOverUp(int index,E x){  if (index == 0) {    queue[0]=x;    return 0;  }  int parentIndex=getParentIndex(index);  E parentElement=elementData(parentIndex);  if (parentIndex != 0) {    int grandparentIndex=getParentIndex(parentIndex);    int uncleIndex=getRightChildIndex(grandparentIndex);    if (uncleIndex != parentIndex && getLeftChildIndex(uncleIndex) >= size) {      E uncleElement=elementData(uncleIndex);      if (ordering.compare(uncleElement,parentElement) < 0) {        parentIndex=uncleIndex;        parentElement=uncleElement;      }    }  }  if (ordering.compare(parentElement,x) < 0) {    queue[index]=parentElement;    queue[parentIndex]=x;    return parentIndex;  }  queue[index]=x;  return index;}  }
class C{  @Override public boolean equals(Object object){  if (object == null) {    return false;  }  if (object == this) {    return true;  }  if (super.equals(object) && object instanceof WindNeedle) {    return true;  }  return false;}  }
class C{  public FrameSlot findOrAddFrameSlot(Object identifier){  FrameSlot result=findFrameSlot(identifier);  if (result != null) {    return result;  }  return addFrameSlot(identifier);}  }
class C{  private void printlnInternal(int logLevel,String msg){  String thread=logConfiguration.withThread ? logConfiguration.threadFormatter.format(Thread.currentThread()) : null;  String stackTrace=logConfiguration.withStackTrace ? logConfiguration.stackTraceFormatter.format(StackTraceUtil.getCroppedRealStackTrack(new Throwable().getStackTrace(),logConfiguration.stackTraceDepth)) : null;  printer.println(logLevel,logConfiguration.tag,logConfiguration.withBorder ? logConfiguration.borderFormatter.format(new String[]{thread,stackTrace,msg}) : ((thread != null ? (thread + SystemCompat.lineSeparator) : "") + (stackTrace != null ? (stackTrace + SystemCompat.lineSeparator) : "") + msg));}  }
class C{  @Nonnull public static Observable<Boolean> combineProgressObservable(@Nonnull List<Observable<ResponseOrError<?>>> observables){  return Observable.combineLatest(observables,FunctionsN.returnFalse()).startWith(true);}  }
class C{  public static String toHexString(byte b,boolean upperCase){  return IntegralToString.byteToHexString(b,upperCase);}  }
class C{  public static boolean isMacOs(){  return osName.indexOf("Mac OS") > -1;}  }
class C{  public static void init() throws java.io.IOException {  keywords.put("package",new Integer(sym.PACKAGE));  keywords.put("import",new Integer(sym.IMPORT));  keywords.put("code",new Integer(sym.CODE));  keywords.put("action",new Integer(sym.ACTION));  keywords.put("parser",new Integer(sym.PARSER));  keywords.put("terminal",new Integer(sym.TERMINAL));  keywords.put("non",new Integer(sym.NON));  keywords.put("init",new Integer(sym.INIT));  keywords.put("scan",new Integer(sym.SCAN));  keywords.put("with",new Integer(sym.WITH));  keywords.put("start",new Integer(sym.START));  keywords.put("debug",new Integer(sym.DEBUG));  char_symbols.put(new Integer(';'),new Integer(sym.SEMI));  char_symbols.put(new Integer(','),new Integer(sym.COMMA));  char_symbols.put(new Integer('*'),new Integer(sym.STAR));  char_symbols.put(new Integer('.'),new Integer(sym.DOT));  char_symbols.put(new Integer('|'),new Integer(sym.BAR));  next_char=System.in.read();  if (next_char == EOF_CHAR)   next_char2=EOF_CHAR; else   next_char2=System.in.read();}  }
class C{  public NbtTagDouble(String name){  super(name);}  }
class C{  public DragContext(Node draggable){  this.node=draggable;  this.goToForegroundOnContact=true;  this.touchId=NULL_ID;  this.activated=false;  this.dragLimits=new BoundingBox(0,0,Integer.MAX_VALUE,Integer.MAX_VALUE);  this.dragThreshold=10.0;  this.dragStarted=false;  this.relocateThreshold=1.0;  this.dragInitAction=null;  this.dragFinishAction=null;  touchHandler=null;  mouseHandler=null;  draggable.addEventHandler(TouchEvent.ANY,touchHandler);  draggable.addEventHandler(MouseEvent.ANY,mouseHandler);}  }
class C{  public boolean equals(Object o){  if (o instanceof Manifest) {    Manifest m=(Manifest)o;    return attr.equals(m.getMainAttributes()) && entries.equals(m.getEntries());  } else {    return false;  }}  }
class C{  public static void writeMatrix(final double[][] data,final File theFile){  writeMatrix(Utils.doubleMatrixToStringMatrix(data),theFile);}  }
class C{  public SimpleMethodTest(String caseName,Element mainElement){  this(caseName,mainElement.getAttribute("location"),mainElement.getAttribute("name"));}  }
class C{  public Vertex evaluateGREATERTHANEQUAL(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    if (((Number)left.getData()).doubleValue() >= ((Number)right.getData()).doubleValue()) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof String) && (right.getData() instanceof String)) {    if (((String)left.getData()).compareTo((String)right.getData()) >= 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof java.util.Date) && (right.getData() instanceof java.util.Date)) {    if (((java.util.Date)left.getData()).compareTo((java.util.Date)right.getData()) >= 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if (left.matches(right,variables) == Boolean.TRUE) {    return network.createVertex(Primitive.TRUE);  }  return network.createVertex(Primitive.UNKNOWN);}  }
class C{  void close(ClientSocket stream){  if (log.isLoggable(Level.FINER))   log.finer("close " + stream);  _activeCount.decrementAndGet();}  }
class C{  @Override public int read(byte[] buf,int offset,int length) throws IOException {  int sublen=Math.min(_tail - _offset,length);  System.arraycopy(_pageBuffer,_offset,buf,offset,sublen);  _offset+=sublen;  return sublen > 0 ? sublen : -1;}  }
class C{  public Vector2 subtract(Vector2 that){  return Vector2.subtract(this,that);}  }
class C{  @HLEFunction(nid=0x5963991B,version=150) public int sceNetApctlDelHandler(int handlerId){  if (!apctlHandlers.containsKey(handlerId)) {    log.warn(String.format("sceNetApctlDelHandler unknown handlerId=0x%X",handlerId));    return -1;  }  SceUidManager.releaseUid(handlerId,uidPurpose);  apctlHandlers.remove(handlerId);  return 0;}  }
class C{  public final boolean isDebugEnabled(){  return false;}  }
class C{  public static void throwException(Throwable e){  BaseTestCase.<RuntimeException>throwThis(e);}  }
class C{  public String sqlAD_getViewColumnEntityType(String vendorName,String catalogName,String schemaName,String viewName){  String searchTableName="AD_Column";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("t0.TableName");  columnNames.add("t.ColumnName");  columnNames.add("t.EntityType");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("VIEW_NAME");  aliasNames.add("COLUMN_NAME");  aliasNames.add("ENTITY_TYPE");  ArrayList<String> joinTypes=new ArrayList<String>();  joinTypes.add("INNER JOIN");  ArrayList<String> joinTables=new ArrayList<String>();  joinTables.add("AD_Table");  ArrayList<String> joinConditions=new ArrayList<String>();  joinConditions.add("t.AD_Table_ID = t0.AD_Table_ID");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(new StringBuffer("UPPER(t0.TableName) = '").append(viewName.toUpperCase()).append("'").toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  sortColumns.add("2");  sortColumns.add("3");  return sql_select(vendorName,catalogName,schemaName,searchTableName,null,columnNames,aliasNames,joinTypes,joinTables,null,joinConditions,conditions,sortColumns,false);}  }
class C{  @Override public void encode(BufferedImage bufferedImage,OutputStream outputStream) throws IOException {  ParamChecks.nullNotPermitted(bufferedImage,"bufferedImage");  ParamChecks.nullNotPermitted(outputStream,"outputStream");  Iterator iterator=ImageIO.getImageWritersByFormatName("jpeg");  ImageWriter writer=(ImageWriter)iterator.next();  ImageWriteParam p=writer.getDefaultWriteParam();  p.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);  p.setCompressionQuality(this.quality);  ImageOutputStream ios=ImageIO.createImageOutputStream(outputStream);  writer.setOutput(ios);  writer.write(null,new IIOImage(bufferedImage,null,null),p);  ios.flush();  writer.dispose();  ios.close();}  }
class C{  void dump(String label,Scope s) throws Exception {  dump(label,s,System.err);}  }
class C{  public void train(String savename) throws IOException {  System.out.println("Starting NRC Train");  System.out.println("Tweets: " + this.tweetList.size());  Tagger tagger=new Tagger();  tagger.loadModel("resources/tagger/model.20120919.txt");  Map<String,Double> senti140UniLexi=this.loadLexicon("sentiment140/unigrams-pmilexicon");  Map<String,Double> hashtagUniLexi=this.loadLexicon("hashtag/unigrams-pmilexicon");  Map<String,Double> senti140BiLexi=this.loadLexicon("sentiment140/bigrams-pmilexicon");  Map<String,Double> hashtagBiLexi=this.loadLexicon("hashtag/bigrams-pmilexicon");  Map<String,Double> MPQALexi=this.loadMPQA();  Map<String,Double> BingLiuLexi=this.loadBingLiu();  Map<String,Double> NRCLexi=this.loadNRC();  int featurecount=0;  Map<String,Integer> nGramMap=new HashMap<String,Integer>();  Map<String,Integer> CharNGramMap=new HashMap<String,Integer>();  Map<String,Integer> posMap=new HashMap<String,Integer>();  Map<String,Integer> clusterMap=new HashMap<String,Integer>();  Map<String,Integer> emoticonMap=new HashMap<String,Integer>();  ArrayList<Attribute> attributeList=new ArrayList<Attribute>();  for (  Tweet tweet : this.tweetList) {    this.preProcessTweet(tweet);    this.tokenizeAndTag(tagger,tweet);    this.negate(tweet);    Set<String> nGramSet=this.getNGrams(tweet,4);    for (    String nGram : nGramSet) {      if (!nGramMap.containsKey(nGram)) {        nGramMap.put(nGram,featurecount++);        attributeList.add(new Attribute("NGRAM_" + nGram));      }    }    Set<String> CharNGramSet=this.getCharNGrams(tweet);    for (    String nGram : CharNGramSet) {      if (!CharNGramMap.containsKey(nGram)) {        CharNGramMap.put(nGram,featurecount++);        attributeList.add(new Attribute("CHARNGRAM_" + nGram));      }    }    Map<String,Integer> posTags=this.getPosTags(tweet);    for (    Map.Entry<String,Integer> posTag : posTags.entrySet()) {      if (!posMap.containsKey(posTag.getKey())) {        posMap.put(posTag.getKey(),featurecount++);        attributeList.add(new Attribute("POS_" + posTag.getKey()));      }    }    Set<String> clusterSet=this.getClusters(tweet);    for (    String cluster : clusterSet) {      if (!clusterMap.containsKey(cluster)) {        clusterMap.put(cluster,featurecount++);        attributeList.add(new Attribute("CLUSTER_" + cluster));      }    }    Set<String> emoticonSet=this.getEmoticons(tweet);    for (    String emoticon : emoticonSet) {      if (!emoticonMap.containsKey(emoticon)) {        emoticonMap.put(emoticon,featurecount++);        attributeList.add(new Attribute("EMO_" + emoticon));      }    }  }  Attribute allCaps=new Attribute("allCaps");  attributeList.add(allCaps);  featurecount++;  Attribute hashtags=new Attribute("hashtags");  attributeList.add(hashtags);  featurecount++;  Attribute punctuationCount=new Attribute("punctuationCount");  attributeList.add(punctuationCount);  featurecount++;  Attribute punctuationLast=new Attribute("punctuationLast");  attributeList.add(punctuationLast);  featurecount++;  Attribute emoticonLast=new Attribute("emoticonLast");  attributeList.add(emoticonLast);  featurecount++;  Attribute elongatedWords=new Attribute("elongatedWords");  attributeList.add(elongatedWords);  featurecount++;  Attribute negationCount=new Attribute("negationCount");  attributeList.add(negationCount);  featurecount++;  Attribute senti140UniTotalCountPos=new Attribute("senti140UniTotalCountPos");  attributeList.add(senti140UniTotalCountPos);  featurecount++;  Attribute senti140UniTotalScorePos=new Attribute("senti140UniTotalScorePos");  attributeList.add(senti140UniTotalScorePos);  featurecount++;  Attribute senti140UniMaxScorePos=new Attribute("senti140UniMaxScorePos");  attributeList.add(senti140UniMaxScorePos);  featurecount++;  Attribute senti140UniLastScorePos=new Attribute("senti140UniLastScorePos");  attributeList.add(senti140UniLastScorePos);  featurecount++;  Attribute senti140UniTotalCountNeg=new Attribute("senti140UniTotalCountNeg");  attributeList.add(senti140UniTotalCountNeg);  featurecount++;  Attribute senti140UniTotalScoreNeg=new Attribute("senti140UniTotalScoreNeg");  attributeList.add(senti140UniTotalScoreNeg);  featurecount++;  Attribute senti140UniMaxScoreNeg=new Attribute("senti140UniMaxScoreNeg");  attributeList.add(senti140UniMaxScoreNeg);  featurecount++;  Attribute senti140UniLastScoreNeg=new Attribute("senti140UniLastScoreNeg");  attributeList.add(senti140UniLastScoreNeg);  featurecount++;  Attribute hashtagUniTotalCountPos=new Attribute("hashtagUniTotalCountPos");  attributeList.add(hashtagUniTotalCountPos);  featurecount++;  Attribute hashtagUniTotalScorePos=new Attribute("hashtagUniTotalScorePos");  attributeList.add(hashtagUniTotalScorePos);  featurecount++;  Attribute hashtagUniMaxScorePos=new Attribute("hashtagUniMaxScorePos");  attributeList.add(hashtagUniMaxScorePos);  featurecount++;  Attribute hashtagUniLastScorePos=new Attribute("hashtagUniLastScorePos");  attributeList.add(hashtagUniLastScorePos);  featurecount++;  Attribute hashtagUniTotalCountNeg=new Attribute("hashtagUniTotalCountNeg");  attributeList.add(hashtagUniTotalCountNeg);  featurecount++;  Attribute hashtagUniTotalScoreNeg=new Attribute("hashtagUniTotalScoreNeg");  attributeList.add(hashtagUniTotalScoreNeg);  featurecount++;  Attribute hashtagUniMaxScoreNeg=new Attribute("hashtagUniMaxScoreNeg");  attributeList.add(hashtagUniMaxScoreNeg);  featurecount++;  Attribute hashtagUniLastScoreNeg=new Attribute("hashtagUniLastScoreNeg");  attributeList.add(hashtagUniLastScoreNeg);  featurecount++;  Attribute senti140BiTotalCountPos=new Attribute("senti140BiTotalCountPos");  attributeList.add(senti140BiTotalCountPos);  featurecount++;  Attribute senti140BiTotalScorePos=new Attribute("senti140BiTotalScorePos");  attributeList.add(senti140BiTotalScorePos);  featurecount++;  Attribute senti140BiMaxScorePos=new Attribute("senti140BiMaxScorePos");  attributeList.add(senti140BiMaxScorePos);  featurecount++;  Attribute senti140BiLastScorePos=new Attribute("senti140BiLastScorePos");  attributeList.add(senti140BiLastScorePos);  featurecount++;  Attribute senti140BiTotalCountNeg=new Attribute("senti140BiTotalCountNeg");  attributeList.add(senti140BiTotalCountNeg);  featurecount++;  Attribute senti140BiTotalScoreNeg=new Attribute("senti140BiTotalScoreNeg");  attributeList.add(senti140BiTotalScoreNeg);  featurecount++;  Attribute senti140BiMaxScoreNeg=new Attribute("senti140BiMaxScoreNeg");  attributeList.add(senti140BiMaxScoreNeg);  featurecount++;  Attribute senti140BiLastScoreNeg=new Attribute("senti140BiLastScoreNeg");  attributeList.add(senti140BiLastScoreNeg);  featurecount++;  Attribute hashtagBiTotalCountPos=new Attribute("hashtagBiTotalCountPos");  attributeList.add(hashtagBiTotalCountPos);  featurecount++;  Attribute hashtagBiTotalScorePos=new Attribute("hashtagBiTotalScorePos");  attributeList.add(hashtagBiTotalScorePos);  featurecount++;  Attribute hashtagBiMaxScorePos=new Attribute("hashtagBiMaxScorePos");  attributeList.add(hashtagBiMaxScorePos);  featurecount++;  Attribute hashtagBiLastScorePos=new Attribute("hashtagBiLastScorePos");  attributeList.add(hashtagBiLastScorePos);  featurecount++;  Attribute hashtagBiTotalCountNeg=new Attribute("hashtagBiTotalCountNeg");  attributeList.add(hashtagBiTotalCountNeg);  featurecount++;  Attribute hashtagBiTotalScoreNeg=new Attribute("hashtagBiTotalScoreNeg");  attributeList.add(hashtagBiTotalScoreNeg);  featurecount++;  Attribute hashtagBiMaxScoreNeg=new Attribute("hashtagBiMaxScoreNeg");  attributeList.add(hashtagBiMaxScoreNeg);  featurecount++;  Attribute hashtagBiLastScoreNeg=new Attribute("hashtagBiLastScoreNeg");  attributeList.add(hashtagBiLastScoreNeg);  featurecount++;  Attribute MPQATotalCountPos=new Attribute("MPQATotalCountPos");  attributeList.add(MPQATotalCountPos);  featurecount++;  Attribute MPQATotalScorePos=new Attribute("MPQATotalScorePos");  attributeList.add(MPQATotalScorePos);  featurecount++;  Attribute MPQAMaxScorePos=new Attribute("MPQAMaxScorePos");  attributeList.add(MPQAMaxScorePos);  featurecount++;  Attribute MPQALastScorePos=new Attribute("MPQALastScorePos");  attributeList.add(MPQALastScorePos);  featurecount++;  Attribute MPQATotalCountNeg=new Attribute("MPQATotalCountNeg");  attributeList.add(MPQATotalCountNeg);  featurecount++;  Attribute MPQATotalScoreNeg=new Attribute("MPQATotalScoreNeg");  attributeList.add(MPQATotalScoreNeg);  featurecount++;  Attribute MPQAMaxScoreNeg=new Attribute("MPQAMaxScoreNeg");  attributeList.add(MPQAMaxScoreNeg);  featurecount++;  Attribute MPQALastScoreNeg=new Attribute("MPQALastScoreNeg");  attributeList.add(MPQALastScoreNeg);  featurecount++;  Attribute BingLiuTotalCountPos=new Attribute("BingLiuTotalCountPos");  attributeList.add(BingLiuTotalCountPos);  featurecount++;  Attribute BingLiuTotalScorePos=new Attribute("BingLiuTotalScorePos");  attributeList.add(BingLiuTotalScorePos);  featurecount++;  Attribute BingLiuMaxScorePos=new Attribute("BingLiuMaxScorePos");  attributeList.add(BingLiuMaxScorePos);  featurecount++;  Attribute BingLiuLastScorePos=new Attribute("BingLiuLastScorePos");  attributeList.add(BingLiuLastScorePos);  featurecount++;  Attribute BingLiuTotalCountNeg=new Attribute("BingLiuTotalCountNeg");  attributeList.add(BingLiuTotalCountNeg);  featurecount++;  Attribute BingLiuTotalScoreNeg=new Attribute("BingLiuTotalScoreNeg");  attributeList.add(BingLiuTotalScoreNeg);  featurecount++;  Attribute BingLiuMaxScoreNeg=new Attribute("BingLiuMaxScoreNeg");  attributeList.add(BingLiuMaxScoreNeg);  featurecount++;  Attribute BingLiuLastScoreNeg=new Attribute("BingLiuLastScoreNeg");  attributeList.add(BingLiuLastScoreNeg);  featurecount++;  Attribute NRCTotalCountPos=new Attribute("NRCTotalCountPos");  attributeList.add(NRCTotalCountPos);  featurecount++;  Attribute NRCTotalScorePos=new Attribute("NRCTotalScorePos");  attributeList.add(NRCTotalScorePos);  featurecount++;  Attribute NRCMaxScorePos=new Attribute("NRCMaxScorePos");  attributeList.add(NRCMaxScorePos);  featurecount++;  Attribute NRCLastScorePos=new Attribute("NRCLastScorePos");  attributeList.add(NRCLastScorePos);  featurecount++;  Attribute NRCTotalCountNeg=new Attribute("NRCTotalCountNeg");  attributeList.add(NRCTotalCountNeg);  featurecount++;  Attribute NRCTotalScoreNeg=new Attribute("NRCTotalScoreNeg");  attributeList.add(NRCTotalScoreNeg);  featurecount++;  Attribute NRCMaxScoreNeg=new Attribute("NRCMaxScoreNeg");  attributeList.add(NRCMaxScoreNeg);  featurecount++;  Attribute NRCLastScoreNeg=new Attribute("NRCLastScoreNeg");  attributeList.add(NRCLastScoreNeg);  featurecount++;  ArrayList<String> fvClassVal=new ArrayList<String>();  fvClassVal.add("positive");  fvClassVal.add("neutral");  fvClassVal.add("negative");  Attribute classAttribute=new Attribute("Class",fvClassVal);  attributeList.add(classAttribute);  featurecount++;  Instances trainingSet=new Instances("test",attributeList,tweetList.size());  trainingSet.setClassIndex(classAttribute.index());  for (  Tweet tweet : tweetList) {    SparseInstance instance=new SparseInstance(0);    Set<String> nGramSet=tweet.getnGramList();    for (    String nGram : nGramSet) {      Integer index=nGramMap.get(nGram);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> CharNGramSet=tweet.getCharNGramList();    for (    String nGram : CharNGramSet) {      Integer index=CharNGramMap.get(nGram);      if (index != null) {        instance.setValue(index,1);      }    }    Map<String,Integer> posTags=tweet.getPosTagList();    for (    Map.Entry<String,Integer> posTag : posTags.entrySet()) {      Integer index=posMap.get(posTag.getKey());      if (index != null) {        instance.setValue(index,posTag.getValue());      }    }    Set<String> clusterSet=tweet.getClusterList();    for (    String cluster : clusterSet) {      Integer index=clusterMap.get(cluster);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> emoticonSet=tweet.getEmoticonList();    for (    String emoticon : emoticonSet) {      Integer index=emoticonMap.get(emoticon);      if (index != null) {        instance.setValue(index,1);      }    }    instance.setValue(allCaps,this.getAllCapsCount(tweet.getRawTweetString()));    instance.setValue(hashtags,this.getHashtagCount(tweet.getTweetString()));    instance.setValue(punctuationCount,this.getPunctuation(tweet.getTweetString()));    if (this.isLastPunctuation(tweet.getTweetString())) {      instance.setValue(punctuationLast,1);    } else {      instance.setValue(punctuationLast,0);    }    if (tweet.isLastEmoticon()) {      instance.setValue(emoticonLast,1);    } else {      instance.setValue(emoticonLast,0);    }    instance.setValue(elongatedWords,this.getElongatedCount(tweet.getTweetString()));    instance.setValue(negationCount,tweet.getNegationCount());    List<Double> senti140UniPos=this.getLexiScores(senti140UniLexi,tweet.getWordList(),false);    instance.setValue(senti140UniTotalCountPos,senti140UniPos.get(0));    instance.setValue(senti140UniTotalScorePos,senti140UniPos.get(1));    instance.setValue(senti140UniMaxScorePos,senti140UniPos.get(2));    instance.setValue(senti140UniLastScorePos,senti140UniPos.get(3));    List<Double> hashtagUniPos=this.getLexiScores(hashtagUniLexi,tweet.getWordList(),false);    instance.setValue(hashtagUniTotalCountPos,hashtagUniPos.get(0));    instance.setValue(hashtagUniTotalScorePos,hashtagUniPos.get(1));    instance.setValue(hashtagUniMaxScorePos,hashtagUniPos.get(2));    instance.setValue(hashtagUniLastScorePos,hashtagUniPos.get(3));    List<Double> senti140UniNeg=this.getLexiScores(senti140UniLexi,tweet.getWordList(),true);    instance.setValue(senti140UniTotalCountNeg,senti140UniNeg.get(0));    instance.setValue(senti140UniTotalScoreNeg,senti140UniNeg.get(1));    instance.setValue(senti140UniMaxScoreNeg,senti140UniNeg.get(2));    instance.setValue(senti140UniLastScoreNeg,senti140UniNeg.get(3));    List<Double> hashtagUniNeg=this.getLexiScores(hashtagUniLexi,tweet.getWordList(),true);    instance.setValue(hashtagUniTotalCountNeg,hashtagUniNeg.get(0));    instance.setValue(hashtagUniTotalScoreNeg,hashtagUniNeg.get(1));    instance.setValue(hashtagUniMaxScoreNeg,hashtagUniNeg.get(2));    instance.setValue(hashtagUniLastScoreNeg,hashtagUniNeg.get(3));    Set<String> biGramSet=this.getNGrams(tweet,2,2);    List<Double> senti140BiPos=this.getLexiScoresBi(senti140BiLexi,biGramSet,false);    instance.setValue(senti140BiTotalCountPos,senti140BiPos.get(0));    instance.setValue(senti140BiTotalScorePos,senti140BiPos.get(1));    instance.setValue(senti140BiMaxScorePos,senti140BiPos.get(2));    instance.setValue(senti140BiLastScorePos,senti140BiPos.get(3));    List<Double> hashtagBiPos=this.getLexiScoresBi(hashtagBiLexi,biGramSet,false);    instance.setValue(hashtagBiTotalCountPos,hashtagBiPos.get(0));    instance.setValue(hashtagBiTotalScorePos,hashtagBiPos.get(1));    instance.setValue(hashtagBiMaxScorePos,hashtagBiPos.get(2));    instance.setValue(hashtagBiLastScorePos,hashtagBiPos.get(3));    List<Double> senti140BiNeg=this.getLexiScoresBi(senti140BiLexi,biGramSet,true);    instance.setValue(senti140BiTotalCountNeg,senti140BiNeg.get(0));    instance.setValue(senti140BiTotalScoreNeg,senti140BiNeg.get(1));    instance.setValue(senti140BiMaxScoreNeg,senti140BiNeg.get(2));    instance.setValue(senti140BiLastScoreNeg,senti140BiNeg.get(3));    List<Double> hashtagBiNeg=this.getLexiScoresBi(hashtagBiLexi,biGramSet,true);    instance.setValue(hashtagBiTotalCountNeg,hashtagBiNeg.get(0));    instance.setValue(hashtagBiTotalScoreNeg,hashtagBiNeg.get(1));    instance.setValue(hashtagBiMaxScoreNeg,hashtagBiNeg.get(2));    instance.setValue(hashtagBiLastScoreNeg,hashtagBiNeg.get(3));    List<Double> MPQAPos=this.getLexiScores(MPQALexi,tweet.getWordList(),false);    instance.setValue(MPQATotalCountPos,MPQAPos.get(0));    instance.setValue(MPQATotalScorePos,MPQAPos.get(1));    instance.setValue(MPQAMaxScorePos,MPQAPos.get(2));    instance.setValue(MPQALastScorePos,MPQAPos.get(3));    List<Double> MPQANeg=this.getLexiScores(MPQALexi,tweet.getWordList(),true);    instance.setValue(MPQATotalCountNeg,MPQANeg.get(0));    instance.setValue(MPQATotalScoreNeg,MPQANeg.get(1));    instance.setValue(MPQAMaxScoreNeg,MPQANeg.get(2));    instance.setValue(MPQALastScoreNeg,MPQANeg.get(3));    List<Double> BingLiuPos=this.getLexiScores(BingLiuLexi,tweet.getWordList(),false);    instance.setValue(BingLiuTotalCountPos,BingLiuPos.get(0));    instance.setValue(BingLiuTotalScorePos,BingLiuPos.get(1));    instance.setValue(BingLiuMaxScorePos,BingLiuPos.get(2));    instance.setValue(BingLiuLastScorePos,BingLiuPos.get(3));    List<Double> BingLiuNeg=this.getLexiScores(BingLiuLexi,tweet.getWordList(),true);    instance.setValue(BingLiuTotalCountNeg,BingLiuNeg.get(0));    instance.setValue(BingLiuTotalScoreNeg,BingLiuNeg.get(1));    instance.setValue(BingLiuMaxScoreNeg,BingLiuNeg.get(2));    instance.setValue(BingLiuLastScoreNeg,BingLiuNeg.get(3));    List<Double> NRCPos=this.getLexiScores(NRCLexi,tweet.getWordList(),false);    instance.setValue(NRCTotalCountPos,NRCPos.get(0));    instance.setValue(NRCTotalScorePos,NRCPos.get(1));    instance.setValue(NRCMaxScorePos,NRCPos.get(2));    instance.setValue(NRCLastScorePos,NRCPos.get(3));    List<Double> NRCNeg=this.getLexiScores(NRCLexi,tweet.getWordList(),true);    instance.setValue(NRCTotalCountNeg,NRCNeg.get(0));    instance.setValue(NRCTotalScoreNeg,NRCNeg.get(1));    instance.setValue(NRCMaxScoreNeg,NRCNeg.get(2));    instance.setValue(NRCLastScoreNeg,NRCNeg.get(3));    instance.setValue(classAttribute,tweet.getSentiment());    trainingSet.add(instance);  }  ArffSaver saver=new ArffSaver();  saver.setInstances(trainingSet);  saver.setFile(new File("resources/arff/Trained-Features-" + "NRC" + savename + ".arff"));  saver.writeBatch();  System.out.println("Trained-Features-" + "NRC" + savename + " saved");}  }
class C{  public void search(String query){  if (query == null)   query="";  if (query.equals(m_query))   return;  Tuple[] rem=clearInternal();  m_query=query;  StringTokenizer st=new StringTokenizer(m_query,m_delim);  if (!st.hasMoreTokens())   m_query="";  while (st.hasMoreTokens())   prefixSearch(st.nextToken());  Tuple[] add=getTupleCount() > 0 ? toArray() : null;  fireTupleEvent(add,rem);}  }
class C{  public QuadTreeNode child(QuadTreeNode node){  return node.getSouthEast();}  }
class C{  public static double logGamma(double x){  final double c0=9.1893853320467274e-01, c1=8.3333333333333333e-02, c2=-2.7777777777777777e-03, c3=7.9365079365079365e-04, c4=-5.9523809523809524e-04, c5=8.4175084175084175e-04, c6=-1.9175269175269175e-03;  double g, r, z;  if (x <= 0.0)   return -999;  for (z=1.0; x < 11.0; x++)   z*=x;  r=1.0 / (x * x);  g=c1 + r * (c2 + r * (c3 + r * (c4 + r * (c5 + r + c6))));  g=(x - 0.5) * Math.log(x) - x + c0 + g / x;  if (z == 1.0)   return g;  return g - Math.log(z);}  }
class C{  public void add(@NotNull final ScpOperation operation){  myOps.add(operation);}  }
class C{  public static void e(String tag,String s){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s);}  }
class C{  public static SsaMethod testEdgeSplit(RopMethod rmeth,int paramWidth,boolean isStatic){  SsaMethod result;  result=SsaMethod.newFromRopMethod(rmeth,paramWidth,isStatic);  edgeSplit(result);  return result;}  }
class C{  public boolean isResultSetEnabled(){  return params.isResultSetEnabled;}  }
class C{  protected boolean fullTopologicalPredicate(Geometry geom){  boolean isContained=prepPoly.getGeometry().contains(geom);  return isContained;}  }
class C{  @SuppressWarnings("unchecked") private void consistFromXml(Element consist){  Attribute type, cnumber, isCLong, cID;  Consist newConsist;  cnumber=consist.getAttribute("consistNumber");  isCLong=consist.getAttribute("longAddress");  DccLocoAddress consistAddress;  if (isCLong != null) {    log.debug("adding consist {} with longAddress set to {}.",cnumber,isCLong.getValue());    try {      int number=Integer.parseInt(cnumber.getValue());      consistAddress=new DccLocoAddress(number,isCLong.getValue().equals("yes"));    } catch (    NumberFormatException e) {      log.debug("Consist number not an integer");      return;    }  } else {    log.debug("adding consist {} with default long address setting.",cnumber);    consistAddress=new DccLocoAddress(Integer.parseInt(cnumber.getValue()),false);  }  newConsist=consistMan.getConsist(consistAddress);  if (!(newConsist.getConsistList().isEmpty())) {    log.debug("Consist {} is not empty.  Using version in memory.",consistAddress.toString());    return;  }  type=consist.getAttribute("type");  if (type != null) {    newConsist.setConsistType((type.getValue().equals("CSAC")) ? Consist.CS_CONSIST : Consist.ADVANCED_CONSIST);  } else {    newConsist.setConsistType(Consist.ADVANCED_CONSIST);  }  cID=consist.getAttribute("id");  if (cID != null) {    newConsist.setConsistID(cID.getValue());  }  Iterator<Element> childIterator=consist.getDescendants(new ElementFilter("loco"));  try {    Element e;    do {      e=childIterator.next();      Attribute number, isLong, direction, position;      number=e.getAttribute("dccLocoAddress");      isLong=e.getAttribute("longAddress");      direction=e.getAttribute("locoDir");      position=e.getAttribute("locoName");      log.debug("adding Loco {}",number);      DccLocoAddress address;      if (isLong != null && direction != null) {        log.debug("using direction from file {}",direction.getValue());        address=new DccLocoAddress(Integer.parseInt(number.getValue()),isLong.getValue().equals("yes"));        newConsist.restore(address,direction.getValue().equals("normal"));      } else       if (isLong == null && direction != null) {        log.debug("using direction from file {}",direction.getValue());        address=new DccLocoAddress(Integer.parseInt(number.getValue()),true);        newConsist.restore(address,direction.getValue().equals("normal"));      } else       if (isLong != null && direction == null) {        address=new DccLocoAddress(Integer.parseInt(number.getValue()),isLong.getValue().equals("yes"));        newConsist.restore(address,true);      } else {        address=new DccLocoAddress(Integer.parseInt(number.getValue()),true);        newConsist.restore(address,true);      }      if (position != null && !position.getValue().equals("mid")) {        if (position.getValue().equals("lead")) {          newConsist.setPosition(address,Consist.POSITION_LEAD);        } else         if (position.getValue().equals("rear")) {          newConsist.setPosition(address,Consist.POSITION_TRAIL);        }      } else {        Attribute midNumber=e.getAttribute("locoMidNumber");        if (midNumber != null) {          int pos=Integer.parseInt(midNumber.getValue());          newConsist.setPosition(address,pos);        }      }    } while (true);  } catch (  NoSuchElementException nse) {    log.debug("end of loco list");  }}  }
class C{  private void saveIntegerSettings(){  for (  String settingName : longSettings.keySet()) {    LongSetting setting=longSettings.get(settingName);    Long value=setting.getSettingValue();    if (value != null) {      if (settings.setLong(settingName,setting.getSettingValue()) == Setting.CHANGED) {        changed(settingName);      }    } else {      LOGGER.warning("Invalid number format for setting " + settingName);    }  }}  }
class C{  public static PositionProvider from(N4JSResource resource){  String originalSource=NodeModelUtils.getNode(resource.getScript()).getText();  InputStream in=new ByteArrayInputStream(originalSource.getBytes());  try {    PositionProvider pp=new PositionProvider(in);    in.close();    return pp;  } catch (  IOException e) {    throw new WrappedException("exception while trying to compute line/column positions in resource",e);  }}  }
class C{  public LinkedList<Patch> patch_make(String text1,LinkedList<Diff> diffs){  if (text1 == null || diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Patch> patches=new LinkedList<Patch>();  if (diffs.isEmpty()) {    return patches;  }  Patch patch=new Patch();  int char_count1=0;  int char_count2=0;  String prepatch_text=text1;  String postpatch_text=text1;  for (  Diff aDiff : diffs) {    if (patch.diffs.isEmpty() && aDiff.operation != Operation.EQUAL) {      patch.start1=char_count1;      patch.start2=char_count2;    }switch (aDiff.operation) {case INSERT:      patch.diffs.add(aDiff);    patch.length2+=aDiff.text.length();  postpatch_text=postpatch_text.substring(0,char_count2) + aDiff.text + postpatch_text.substring(char_count2);break;case DELETE:patch.length1+=aDiff.text.length();patch.diffs.add(aDiff);postpatch_text=postpatch_text.substring(0,char_count2) + postpatch_text.substring(char_count2 + aDiff.text.length());break;case EQUAL:if (aDiff.text.length() <= 2 * Patch_Margin && !patch.diffs.isEmpty() && aDiff != diffs.getLast()) {patch.diffs.add(aDiff);patch.length1+=aDiff.text.length();patch.length2+=aDiff.text.length();}if (aDiff.text.length() >= 2 * Patch_Margin) {if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);patch=new Patch();prepatch_text=postpatch_text;char_count1=char_count2;}}break;}if (aDiff.operation != Operation.INSERT) {char_count1+=aDiff.text.length();}if (aDiff.operation != Operation.DELETE) {char_count2+=aDiff.text.length();}}if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);}return patches;}  }
class C{  public String version(){  return System.getProperty("java.runtime.version");}  }
class C{  public boolean minLength(String input,int length){  return GenericValidator.minLength(input,length);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  U.writeByteArray(out,addr.getAddress());}  }
class C{  public static double[] ones(int L){  double m[]=new double[L];  Arrays.fill(m,1.);  return m;}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  private void adjust(double[][] v,double[][] e_czech,double[] vector,int corrDim){  final int dim=v.length;  e_czech[corrDim][corrDim]=1;  double[] v_i=vector.clone();  double[] sum=new double[dim];  for (int k=0; k < corrDim; k++) {    double[] v_k=getCol(v,k);    plusTimesEquals(sum,v_k,transposeTimes(v_i,v_k));  }  minusEquals(v_i,sum);  normalize(v_i);  setCol(v,corrDim,v_i);}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  public static Collection<ClusterNode> allNodes(GridCacheSharedContext ctx,AffinityTopologyVersion topOrder){  return ctx.discovery().cacheNodes(topOrder);}  }
class C{  public ParallecHeader addPair(String key,String value){  this.headerMap.put(key,value);  return this;}  }
class C{  public String(byte[] bytes){}  }
class C{  public SortedExampleSet(ExampleSet parent,int[] mapping){  this.parent=(ExampleSet)parent.clone();  this.mapping=mapping;}  }
class C{  public boolean doit(CtClass clazz,MethodInfo minfo) throws CannotCompileException {  CodeAttribute codeAttr=minfo.getCodeAttribute();  if (codeAttr == null)   return false;  CodeIterator iterator=codeAttr.iterator();  boolean edited=false;  LoopContext context=new LoopContext(codeAttr.getMaxLocals());  while (iterator.hasNext())   if (loopBody(iterator,clazz,minfo,context))   edited=true;  ExceptionTable et=codeAttr.getExceptionTable();  int n=et.size();  for (int i=0; i < n; ++i) {    Handler h=new Handler(et,i,iterator,clazz,minfo);    edit(h);    if (h.edited()) {      edited=true;      context.updateMax(h.locals(),h.stack());    }  }  if (codeAttr.getMaxLocals() < context.maxLocals)   codeAttr.setMaxLocals(context.maxLocals);  codeAttr.setMaxStack(codeAttr.getMaxStack() + context.maxStack);  try {    if (edited)     minfo.rebuildStackMapIf6(clazz.getClassPool(),clazz.getClassFile2());  } catch (  BadBytecode b) {    throw new CannotCompileException(b.getMessage(),b);  }  return edited;}  }
class C{  @Nullable @OnClick(R.id.search) void searchWeb(){  Intent intent=new Intent(ACTION_WEB_SEARCH).putExtra(QUERY,getString(R.string.reviews_public_search,a.getTitle()));  if (Intents.hasActivity(a,intent)) {    startActivity(intent);    event("reviews","search web");  } else {    event("reviews","search web [fail]");  }}  }
class C{  public T caseAnonymous_moreGuards_1_(Anonymous_moreGuards_1_ object){  return null;}  }
class C{  public void callSeriallyAndWait(Runnable r,int timeout){  RunnableWrapper c=new RunnableWrapper(r,0);  callSerially(c);synchronized (lock) {    long t=System.currentTimeMillis();    while (!c.isDone()) {      try {        lock.wait(20);      } catch (      InterruptedException err) {      }      if (System.currentTimeMillis() - t >= timeout) {        return;      }    }  }}  }
class C{  public static Object resolveToolbarConstraint(JToolBar toolbar){  if (toolbar != null) {    Container parent=toolbar.getParent();    if (parent != null) {      LayoutManager m=parent.getLayout();      if (m instanceof BorderLayout) {        BorderLayout b=(BorderLayout)m;        Object con=b.getConstraints(toolbar);        if (con == SOUTH || con == EAST || con == WEST) {          return con;        }        return NORTH;      }    }  }  return NORTH;}  }
class C{  public GoogleTurnCandidateHarvester(TransportAddress turnServer,String shortTermCredentialUsername,String password){  super(turnServer,shortTermCredentialUsername);  this.password=password;}  }
class C{  private void generate(String kind,PartitionListener pl) throws SAXException {  if (pl == null)   return;  handler.startElement("",kind,kind,EMPTY);  String className=pl.getClass().getName();  handler.startElement("",CLASS_NAME,CLASS_NAME,EMPTY);  handler.characters(className.toCharArray(),0,className.length());  handler.endElement("",CLASS_NAME,CLASS_NAME);  Properties props=null;  if (pl instanceof Declarable2) {    props=((Declarable2)pl).getConfig();    generate(props,null);  }  handler.endElement("",kind,kind);}  }
class C{  @Override protected void validateManifest(UploaderInputManifestDto manifest) throws IllegalArgumentException {  super.validateManifest(manifest);  Assert.hasText(manifest.getBusinessObjectFormatVersion(),"Manifest business object format version must be specified.");  Assert.notEmpty(manifest.getManifestFiles(),"Manifest must contain at least 1 file.");  for (  ManifestFile manifestFile : manifest.getManifestFiles()) {    Assert.hasText(manifestFile.getFileName(),"Manifest file can not have a blank filename.");    manifestFile.setFileName(manifestFile.getFileName().trim());    if (manifestFile.getRowCount() != null) {      Assert.isTrue(manifestFile.getRowCount() >= 0,"Manifest file \"" + manifestFile.getFileName() + "\" can not have a negative row count.");    }  }  if (manifest.getAttributes() != null) {    HashSet<String> attributeNameValidationSet=new HashSet<>();    for (    Map.Entry<String,String> entry : manifest.getAttributes().entrySet()) {      String attributeName=entry.getKey().trim();      Assert.hasText(attributeName,"Manifest attribute name must be specified.");      Assert.isTrue(attributeName.length() <= MAX_ATTRIBUTE_NAME_LENGTH,String.format("Manifest attribute name is longer than %d characters.",MAX_ATTRIBUTE_NAME_LENGTH));      String lowercaseAttributeName=attributeName.toLowerCase();      Assert.isTrue(!attributeNameValidationSet.contains(lowercaseAttributeName),String.format("Duplicate manifest attribute name found: %s",attributeName));      if (entry.getValue() != null) {        Assert.isTrue(entry.getValue().length() <= MAX_ATTRIBUTE_VALUE_LENGTH,String.format("Manifest attribute value is longer than %d characters.",MAX_ATTRIBUTE_VALUE_LENGTH));      }      attributeNameValidationSet.add(lowercaseAttributeName);    }  }  if (manifest.getBusinessObjectDataParents() != null) {    HashSet<BusinessObjectDataKey> parentValidationSet=new HashSet<>();    for (    BusinessObjectDataKey businessObjectDataKey : manifest.getBusinessObjectDataParents()) {      Assert.hasText(businessObjectDataKey.getBusinessObjectDefinitionName(),"Manifest parent business object definition name must be specified.");      Assert.hasText(businessObjectDataKey.getBusinessObjectFormatUsage(),"Manifest parent business object format usage must be specified.");      Assert.hasText(businessObjectDataKey.getBusinessObjectFormatFileType(),"Manifest parent business object format file type must be specified.");      Assert.hasText(businessObjectDataKey.getPartitionValue(),"Manifest parent business object data partition value must be specified.");      businessObjectDataKey.setBusinessObjectDefinitionName(businessObjectDataKey.getBusinessObjectDefinitionName().trim());      businessObjectDataKey.setBusinessObjectFormatUsage(businessObjectDataKey.getBusinessObjectFormatUsage().trim());      businessObjectDataKey.setBusinessObjectFormatFileType(businessObjectDataKey.getBusinessObjectFormatFileType().trim());      businessObjectDataKey.setPartitionValue(businessObjectDataKey.getPartitionValue().trim());      BusinessObjectDataKey lowercaseKey=new BusinessObjectDataKey();      lowercaseKey.setBusinessObjectDefinitionName(businessObjectDataKey.getBusinessObjectDefinitionName().toLowerCase());      lowercaseKey.setBusinessObjectFormatUsage(businessObjectDataKey.getBusinessObjectFormatUsage().toLowerCase());      lowercaseKey.setBusinessObjectFormatFileType(businessObjectDataKey.getBusinessObjectFormatFileType().toLowerCase());      lowercaseKey.setBusinessObjectFormatVersion(businessObjectDataKey.getBusinessObjectFormatVersion());      lowercaseKey.setPartitionValue(businessObjectDataKey.getPartitionValue());      lowercaseKey.setBusinessObjectDataVersion(businessObjectDataKey.getBusinessObjectDataVersion());      Assert.isTrue(!parentValidationSet.contains(lowercaseKey),String.format("Duplicate manifest business object data parent found: {%s}",businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));      parentValidationSet.add(lowercaseKey);    }  }}  }
class C{  public static boolean equals(CK_DATE date1,CK_DATE date2){  boolean equal=false;  if (date1 == date2) {    equal=true;  } else   if ((date1 != null) && (date2 != null)) {    equal=equals(date1.year,date2.year) && equals(date1.month,date2.month) && equals(date1.day,date2.day);  } else {    equal=false;  }  return equal;}  }
class C{  private double[] project(ORCLUSCluster c,double[] o){  return transposeTimes(c.basis,o);}  }
class C{  public static <T,X extends Throwable>Tuple3<CompletableFuture<Subscription>,Runnable,CompletableFuture<Boolean>> forEachX(final LazyFutureStream<T> stream,final long x,final Consumer<? super T> consumerElement){  final CompletableFuture<Subscription> subscription=new CompletableFuture<>();  final CompletableFuture<Boolean> streamCompleted=new CompletableFuture<>();  return tuple(subscription,null,streamCompleted);}  }
class C{  public ResourceException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  ZygoteConnection(LocalSocket socket) throws IOException {  mSocket=socket;  mSocketOutStream=new DataOutputStream(socket.getOutputStream());  mSocketReader=new BufferedReader(new InputStreamReader(socket.getInputStream()),256);  mSocket.setSoTimeout(CONNECTION_TIMEOUT_MILLIS);  try {    peer=mSocket.getPeerCredentials();  } catch (  IOException ex) {    Log.e(TAG,"Cannot read peer credentials",ex);    throw ex;  }  peerSecurityContext=SELinux.getPeerContext(mSocket.getFileDescriptor());}  }
class C{  public static float svgVerticalCoordinateToObjectBoundingBox(String s,String attr,Context ctx){  return svgToObjectBoundingBox(s,attr,VERTICAL_LENGTH,ctx);}  }
class C{  private void updateAmmountProfiles(){  int ammountProfiles=mProfilesModel.getProfiles().size() + DEFAULT_OPERATIONS_AM;  if (DEBUG)   Log.i(TAG,"There are now " + ammountProfiles + " profiles.");  mSettingsModel.setAmmountProfiles(ammountProfiles);}  }
class C{  public void flush(){  int level=getLevel().intValue();  for (int i=0; i < _handlers.length; i++) {    Handler handler=_handlers[i];    if (level <= handler.getLevel().intValue())     handler.flush();  }}  }
class C{  public static int addModifier(int modifiers,int mod){  return modifiers | mod;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.148 -0500",hash_original_method="1EF8D36085FFBEBAD22C5568ED91BFE4",hash_generated_method="DD1619FF77139A2F0480F37302994966") public static String toString(short value){  return Integer.toString(value);}  }
class C{  public ClientMessage sendMessage(SimpleString targetAddress,String body){  ClientMessage message=createMessage(body);  sendMessage(targetAddress,message);  return message;}  }
class C{  public static void writeDescriptor(Descriptor descriptor,File file) throws IOException {  writeDescriptor(descriptor,file,"UTF-8",false);}  }
class C{  public static PrincipalUser findByUserName(EntityManager em,String userName){  Class<PrincipalUser> type=PrincipalUser.class;  TypedQuery<PrincipalUser> query=em.createNamedQuery("PrincipalUser.findByUserName",type);  try {    return query.setParameter("userName",userName).getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getFeedAccountDao() : null;}  }
class C{  public T caseScopedElement(ScopedElement object){  return null;}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  @Override public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  @Override public int compareTo(ProtocolVersion protocolVersion){  return this.v - protocolVersion.v;}  }
class C{  public static long generateNonce(){  long nonce=RANDOM.nextLong();  sKnownNonces.add(nonce);  return nonce;}  }
class C{  @Override public long ramBytesUsed(){  return fst == null ? 0 : fst.ramBytesUsed();}  }
class C{  private static float[] generateFloatFromString(final String colorString){  if (debug) {    System.out.println("CHECK generateColorFromString=" + colorString);  }  final StringTokenizer tokens=new StringTokenizer(colorString,"[()] ,");  final float[] toks=new float[tokens.countTokens()];  int i=0;  while (tokens.hasMoreTokens()) {    final String tok=tokens.nextToken();    if (debug) {      System.out.println("token" + (i + 1) + '='+ tok+ ' '+ colorString);    }    toks[i]=Float.parseFloat(tok);    i++;  }  if (i == 0) {    return null;  } else {    return toks;  }}  }
class C{  public boolean canLoad(Entity unit){  boolean result=true;  if (!(unit instanceof BattleArmor)) {    result=false;  } else   if (troopers != Entity.NONE) {    result=false;  } else {    result=((BattleArmor)unit).canDoMechanizedBA();  }  return result;}  }
class C{  void addFill(int row,int col){  RowView rv=getRow(row);  if (rv != null) {    rv.fillColumn(col);  }}  }
class C{  private boolean validUsername(String username){  if (username.length() == 0) {    mUsername.setError("Username cannot be empty.");    return false;  }  if (username.length() > 16) {    mUsername.setError("Username too long.");    return false;  }  return true;}  }
class C{  public static int occurrencesOfChar(String string,char value){  return StringIterate.countChar(string,null);}  }
class C{  public static void main(String argv[]) throws IOException {  int argc=argv.length;  if (argc == 0) {    printUsage(System.out);    System.exit(0);  }  logger.setLevel(Level.FINER);  if (argv[0].equals("-d")) {    if (argc == 2) {      String name=argv[1];      SpatialIndex si=new SpatialIndex(name);      si.dumpIndex(false);    } else     if ((argc == 3) && (argv[1].equals("-b"))) {      String name=argv[2];      SpatialIndex si=new SpatialIndex(name);      si.dumpIndex(true);    } else {      printUsage(System.err);      System.exit(1);    }  } else   if ((argc == 2) && argv[0].equals("-c")) {    String shapeFile=argv[1];    SpatialIndex.FileIndex.create(shapeFile);  } else {    printUsage(System.err);    System.exit(1);  }}  }
class C{  public String readString(Type target){  int len=0;switch (currentDataType) {case AMF.TYPE_LONG_STRING:    len=buf.getInt();  break;case AMF.TYPE_STRING:len=buf.getUnsignedShort();break;default :log.debug("Unknown AMF type: {}",currentDataType);}int limit=buf.limit();String string=bufferToString(buf.buf(),len);buf.limit(limit);return string;}  }
class C{  @Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){  return extractThumbnail(source,width,height,OPTIONS_NONE);}  }
class C{  @Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  String name=req.getParameter("name");  String url=req.getParameter("url");  String durationStr=req.getParameter("duration");  long duration=-1;  try {    duration=Long.parseLong(durationStr);  } catch (  NumberFormatException e) {  }  resp.setContentType("text/plain");  if (name == null || url == null || durationStr == null || name.trim().length() < 1 || url.trim().length() < 10 || durationStr.trim().length() < 1 || duration <= 0) {    resp.sendError(400,"Missing ['name','duration','url'].");  } else {    Video v=new Video(name,url,duration);    videos.add(v);    resp.getWriter().write(VIDEO_ADDED);  }}  }
class C{  public static int codePointAt(char[] seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  if (index < 0 || index >= len) {    throw new IndexOutOfBoundsException();  }  char high=seq[index++];  if (index >= len) {    return high;  }  char low=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return high;}  }
class C{  public void handleCompilationDone(Context cx,DebuggableScript fnOrScript,String source){  if (type != IPROXY_DEBUG)   Kit.codeBug();  if (!fnOrScript.isTopLevel()) {    return;  }  dim.registerTopScript(fnOrScript,source);}  }
class C{  private void populateSpeciesMap(){  speciesPropertyMap=new HashMap<String,SpeciesBean>();  SpeciesBean species=new SpeciesBean();  species.setType("Maia");  species.setLanguage("Black Speech");  species.setImmortal(true);  speciesPropertyMap.put(species.getType(),species);  species=new SpeciesBean();  species.setType("Istari");  species.setLanguage("Common Tongue");  species.setImmortal(true);  speciesPropertyMap.put(species.getType(),species);  species=new SpeciesBean();  species.setType("Elf");  species.setLanguage("Quenya/Sindarin");  species.setImmortal(true);  speciesPropertyMap.put(species.getType(),species);  species=new SpeciesBean();  species.setType("Ent");  species.setLanguage("Quenya/Sindarin");  species.setImmortal(true);  speciesPropertyMap.put(species.getType(),species);  species=new SpeciesBean();  species.setType("Man");  species.setLanguage("Common Tongue");  species.setImmortal(false);  speciesPropertyMap.put(species.getType(),species);  species=new SpeciesBean();  species.setType("Dwarf");  species.setLanguage("Dwarfish");  species.setImmortal(false);  speciesPropertyMap.put(species.getType(),species);  species=new SpeciesBean();  species.setType("Hobbit");  species.setLanguage("Common Tongue");  species.setImmortal(false);  speciesPropertyMap.put(species.getType(),species);}  }
class C{  private UniqueValue(int count,String value){  this.count=count;  this.value=value;}  }
class C{  public boolean checkVolumeAssociatedWithAnySGWithPolicy(String volNativeId,StorageSystem storage,String policy){  CloseableIterator<CIMInstance> sgInstanceIr=null;  try {    _log.info("Trying to find volume {} is associated with any phantom SG with expected FAST {}",volNativeId,policy);    CIMObjectPath volumePath=_cimPath.getVolumePath(storage,volNativeId);    sgInstanceIr=getAssociatorInstances(storage,volumePath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null,SmisConstants.PS_ELEMENT_NAME);    while (sgInstanceIr.hasNext()) {      CIMInstance sgInstance=sgInstanceIr.next();      String gpNameFound=(String)sgInstance.getPropertyValue(SmisConstants.CP_ELEMENT_NAME);      _log.info("Volume {} available in other SG {}",volNativeId,gpNameFound);      if (checkVolumeGroupAssociatedWithPolicy(storage,sgInstance.getObjectPath(),policy)) {        return true;      }    }  } catch (  Exception e) {    _log.warn("Find volume associated with any phantom SG with right policy failed",e);  } finally {    if (null != sgInstanceIr) {      sgInstanceIr.close();    }  }  _log.info("No Phantom SGs found for volume {}",volNativeId);  return false;}  }
class C{  public Jonas4xRuntimeConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.URI,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_SERVER_NAME,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_DOMAIN_NAME,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_CLUSTER_NAME,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_DEPLOYABLE_IDENTIFIER,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_MEJB_JNDI_PATH,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_MEJB_JAAS_FILE,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_MEJB_JAAS_ENTRY,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_MEJB_JNDI_INIT_CTX_FACT,Boolean.TRUE);}  }
class C{  public final void resetTm(){  Tm[0][0]=1;  Tm[0][1]=0;  Tm[0][2]=0;  Tm[1][0]=0;  Tm[1][1]=1;  Tm[1][2]=0;  Tm[2][0]=0;  Tm[2][1]=0;  Tm[2][2]=1;  setTMAtLineStart();}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Path("/{userId}/privileged") @Description("Grants or revokes privileged permissions") public PrincipalUserDto updateUserPrivilege(@Context HttpServletRequest req,@PathParam("userId") final BigInteger userId,@FormParam("privileged") final boolean privileged){  validatePrivilegedUser(req);  if (userId == null || userId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("User Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  PrincipalUser user=_uService.findUserByPrimaryKey(userId);  if (user == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  try {    Method method=PrincipalUser.class.getDeclaredMethod("setPrivileged",boolean.class);    method.setAccessible(true);    method.invoke(user,privileged);  } catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    throw new SystemException("Failed to change privileged status.",e);  }  user=_uService.updateUser(user);  return PrincipalUserDto.transformToDto(user);}  }
class C{  public LogConfigurationException(String message){  super(message);}  }
class C{  private void deleteTargetDeviceGroup(final StorageSystem storage,final CIMObjectPath targetGroupPath){  _log.info(format("Removing target device group {0} from storage system {1}",targetGroupPath,storage.getId()));  try {    CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] outArgs=new CIMArgument[5];    CIMArgument[] inArgs=_helper.getDeleteReplicationGroupInputArguments(storage,targetGroupPath,true);    _helper.invokeMethod(storage,replicationSvc,DELETE_GROUP,inArgs,outArgs);  } catch (  Exception e) {    _log.error(format("An error occurred when removing target device group {0} from storage system {1}",targetGroupPath,storage.getId()),e);  }}  }
class C{  public static int mainInit(String[] args,final OutputStream out){  final OutputStreamWriter wr=new OutputStreamWriter(out);  try {    try {      wr.write(getVersion());      if (args.length > 0 && "--environment".equals(args[0])) {        wr.write(Talkback.getEnvironment());      }    }  finally {      wr.flush();    }  } catch (  final IOException e) {    throw new SlimException(e);  }  return 0;}  }
class C{  public Vector4f mul(float x,float y,float z,float w){  this.x*=x;  this.y*=y;  this.z*=z;  this.w*=w;  return this;}  }
class C{  private EndpointMatrixGraph(List<Node> nodes){  this();  if (nodes == null) {    throw new NullPointerException();  }  for (  Object variable : nodes) {    if (!addNode((Node)variable)) {      throw new IllegalArgumentException();    }  }  this.graphMatrix=new short[nodes.size()][nodes.size()];  for (  Node node : nodes) {    namesHash.put(node.getName(),node);  }  initHashes();}  }
class C{  public final void testGetEncoded04() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      byte[] ec1=epki.getEncoded();      byte[] ec2=epki.getEncoded();      byte[] ec3=epki.getEncoded();      assertNotSame(ec1,ec2);      assertNotSame(ec2,ec3);      assertNotSame(ec1,ec3);      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  @Override protected DomainRestoreInfo inference(Variable var,Assignment assignment,CSP csp){switch (inferenceStrategy) {case FORWARD_CHECKING:    return doForwardChecking(var,assignment,csp);case AC3:  return new AC3Strategy().reduceDomains(var,assignment.getAssignment(var),csp);default :return new DomainRestoreInfo().compactify();}}  }
class C{  public TIntFloatHashMapDecorator(TIntFloatHashMap map){  super();  this._map=map;}  }
class C{  public AbstractDoubleList elements(double[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public DTMNodeProxy(DTM dtm,int node){  this.dtm=dtm;  this.node=node;}  }
class C{  public byte[] quoteAsUTF8(String text){  ByteArrayBuilder byteBuilder=_byteBuilder;  if (byteBuilder == null) {    _byteBuilder=byteBuilder=new ByteArrayBuilder(null);  }  int inputPtr=0;  int inputEnd=text.length();  int outputPtr=0;  byte[] outputBuffer=byteBuilder.resetAndGetFirstSegment();  main_loop:   while (inputPtr < inputEnd) {    final int[] escCodes=CharTypes.get7BitOutputEscapes();    inner_loop:     while (true) {      int ch=text.charAt(inputPtr);      if (ch > 0x7F || escCodes[ch] != 0) {        break inner_loop;      }      if (outputPtr >= outputBuffer.length) {        outputBuffer=byteBuilder.finishCurrentSegment();        outputPtr=0;      }      outputBuffer[outputPtr++]=(byte)ch;      if (++inputPtr >= inputEnd) {        break main_loop;      }    }    if (outputPtr >= outputBuffer.length) {      outputBuffer=byteBuilder.finishCurrentSegment();      outputPtr=0;    }    int ch=(int)text.charAt(inputPtr++);    if (ch <= 0x7F) {      int escape=escCodes[ch];      outputPtr=_appendByteEscape(ch,escape,byteBuilder,outputPtr);      outputBuffer=byteBuilder.getCurrentSegment();      continue main_loop;    } else     if (ch <= 0x7FF) {      outputBuffer[outputPtr++]=(byte)(0xc0 | (ch >> 6));      ch=(0x80 | (ch & 0x3f));    } else {      if (ch < SURR1_FIRST || ch > SURR2_LAST) {        outputBuffer[outputPtr++]=(byte)(0xe0 | (ch >> 12));        if (outputPtr >= outputBuffer.length) {          outputBuffer=byteBuilder.finishCurrentSegment();          outputPtr=0;        }        outputBuffer[outputPtr++]=(byte)(0x80 | ((ch >> 6) & 0x3f));        ch=(0x80 | (ch & 0x3f));      } else {        if (ch > SURR1_LAST) {          _throwIllegalSurrogate(ch);        }        if (inputPtr >= inputEnd) {          _throwIllegalSurrogate(ch);        }        ch=_convertSurrogate(ch,text.charAt(inputPtr++));        if (ch > 0x10FFFF) {          _throwIllegalSurrogate(ch);        }        outputBuffer[outputPtr++]=(byte)(0xf0 | (ch >> 18));        if (outputPtr >= outputBuffer.length) {          outputBuffer=byteBuilder.finishCurrentSegment();          outputPtr=0;        }        outputBuffer[outputPtr++]=(byte)(0x80 | ((ch >> 12) & 0x3f));        if (outputPtr >= outputBuffer.length) {          outputBuffer=byteBuilder.finishCurrentSegment();          outputPtr=0;        }        outputBuffer[outputPtr++]=(byte)(0x80 | ((ch >> 6) & 0x3f));        ch=(0x80 | (ch & 0x3f));      }    }    if (outputPtr >= outputBuffer.length) {      outputBuffer=byteBuilder.finishCurrentSegment();      outputPtr=0;    }    outputBuffer[outputPtr++]=(byte)ch;  }  return _byteBuilder.completeAndCoalesce(outputPtr);}  }
class C{  void displayUserSave(int select){  if (tool.modified == true) {    Point location=tw.getLocationOnScreen();    setLayout(new GridBagLayout());    JLabel label=new JLabel(PolicyTool.getMessage("Save.changes."));    tw.addNewComponent(this,label,USC_LABEL,0,0,3,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.L_TOP_BOTTOM_PADDING);    JPanel panel=new JPanel();    panel.setLayout(new GridBagLayout());    JButton yesButton=new JButton();    ToolWindow.configureButton(yesButton,"Yes");    yesButton.addActionListener(new UserSaveYesButtonListener(this,tool,tw,select));    tw.addNewComponent(panel,yesButton,USC_YES_BUTTON,0,0,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.LR_BOTTOM_PADDING);    JButton noButton=new JButton();    ToolWindow.configureButton(noButton,"No");    noButton.addActionListener(new UserSaveNoButtonListener(this,tool,tw,select));    tw.addNewComponent(panel,noButton,USC_NO_BUTTON,1,0,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.LR_BOTTOM_PADDING);    JButton cancelButton=new JButton();    ToolWindow.configureButton(cancelButton,"Cancel");    ActionListener cancelListener=new CancelButtonListener(this);    cancelButton.addActionListener(cancelListener);    tw.addNewComponent(panel,cancelButton,USC_CANCEL_BUTTON,2,0,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.LR_BOTTOM_PADDING);    tw.addNewComponent(this,panel,USC_PANEL,0,1,1,1,0.0,0.0,GridBagConstraints.BOTH);    getRootPane().registerKeyboardAction(cancelListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);    pack();    setLocationRelativeTo(tw);    setVisible(true);  } else {    userSaveContinue(tool,tw,this,select);  }}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  Instances data=new Instances(instances,0);  for (int i=0; i < instances.numInstances(); i++) {    if (instances.instance(i).weight() > 0) {      data.add(instances.instance(i));    }  }  if (data.numInstances() == 0) {    throw new Exception("No training instances left after removing " + "instance with either a weight null or a missing class!");  }  instances=data;  m_onlyNumeric=true;  for (int i=0; i < instances.numAttributes(); i++) {    if (i != instances.classIndex()) {      if (!instances.attribute(i).isNumeric()) {        m_onlyNumeric=false;        break;      }    }  }  m_Missing=new ReplaceMissingValues();  m_Missing.setInputFormat(instances);  instances=Filter.useFilter(instances,m_Missing);  if (getCapabilities().handles(Capability.NUMERIC_ATTRIBUTES)) {    if (!m_onlyNumeric) {      m_NominalToBinary=new NominalToBinary();      m_NominalToBinary.setInputFormat(instances);      instances=Filter.useFilter(instances,m_NominalToBinary);    } else {      m_NominalToBinary=null;    }  } else {    m_NominalToBinary=null;  }  double y0=instances.instance(0).classValue();  int index=1;  while (index < instances.numInstances() && instances.instance(index).classValue() == y0) {    index++;  }  if (index == instances.numInstances()) {    throw new Exception("All class values are the same. At least two class values should be different");  }  double y1=instances.instance(index).classValue();  if (m_filterType == FILTER_STANDARDIZE) {    m_Filter=new Standardize();    ((Standardize)m_Filter).setIgnoreClass(true);    m_Filter.setInputFormat(instances);    instances=Filter.useFilter(instances,m_Filter);  } else   if (m_filterType == FILTER_NORMALIZE) {    m_Filter=new Normalize();    ((Normalize)m_Filter).setIgnoreClass(true);    m_Filter.setInputFormat(instances);    instances=Filter.useFilter(instances,m_Filter);  } else {    m_Filter=null;  }  if (m_Filter != null) {    double z0=instances.instance(0).classValue();    double z1=instances.instance(index).classValue();    m_x1=(y0 - y1) / (z0 - z1);    m_x0=(y0 - m_x1 * z0);  } else {    m_x1=1.0;    m_x0=0.0;  }  m_optimizer.setSMOReg(this);  m_optimizer.buildClassifier(instances);}  }
class C{  public synchronized L removeWithRight(R rightValue){  L leftValue=tableRight.remove(rightValue);  if (leftValue != null)   tableLeft.remove(leftValue);  return leftValue;}  }
class C{  public boolean isValidPrefix(String path){  if (_prefix == null)   return true; else   return path.startsWith(_prefix);}  }
class C{  public void add(final String key,final IRecordCompressor compressor){  if (compressors.putIfAbsent(key,compressor) != null) {    throw new UnsupportedOperationException("Already declared: " + key);  }}  }
class C{  public static boolean isGoUpOrDown(KeyEvent event){  return isGoDown(event) || isGoUp(event);}  }
class C{  public synchronized void addTarget(NotificationTarget target) throws IllegalArgumentException {  if (target == null)   throw new IllegalArgumentException("Target is null");  notificationTargets.add(target);}  }
class C{  static private IV decodeInlineBNode(final byte flags,final byte[] key,final int o){  final DTE dte=AbstractIV.getDTE(flags);switch (dte) {case XSDInt:{      final int x=KeyBuilder.decodeInt(key,o);      return new NumericBNodeIV<BigdataBNode>(x);    }case UUID:{    final UUID x=KeyBuilder.decodeUUID(key,o);    return new UUIDBNodeIV<BigdataBNode>(x);  }case XSDString:{  final StringBuilder sb=new StringBuilder();  final String str1;  final int nbytes;  try {    nbytes=IVUnicode.decode(new ByteArrayInputStream(key,o,key.length - o),sb);    str1=sb.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return new FullyInlineUnicodeBNodeIV<BigdataBNode>(str1,1 + nbytes);}default :throw new UnsupportedOperationException("dte=" + dte);}}  }
class C{  @Override public boolean isVisible(){  return (getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public CarrotGrower(){}  }
class C{  public static void writeStaticField(final Field field,final Object value) throws IllegalAccessException {  FieldUtils.writeStaticField(field,value,false);}  }
class C{  private double sinusProduct(int start,int end,double[] alpha){  double result=1;  for (int j=start; j < end; j++) {    result*=Math.sin(alpha[j]);  }  return result;}  }
class C{  protected ScriptBuilder bigNum(long num){  return bigNum(chunks.size(),num);}  }
class C{  public Second(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  private void checkIgfsOnRemoteNode(ClusterNode rmtNode) throws IgniteCheckedException {  IgfsAttributes[] locAttrs=ctx.discovery().localNode().attribute(IgniteNodeAttributes.ATTR_IGFS);  IgfsAttributes[] rmtAttrs=rmtNode.attribute(IgniteNodeAttributes.ATTR_IGFS);  if (F.isEmpty(locAttrs) || F.isEmpty(rmtAttrs))   return;  assert rmtAttrs != null && locAttrs != null;  for (  IgfsAttributes rmtAttr : rmtAttrs)   for (  IgfsAttributes locAttr : locAttrs) {    if (!F.eq(rmtAttr.igfsName(),locAttr.igfsName())) {      if (F.eq(rmtAttr.metaCacheName(),locAttr.metaCacheName()))       throw new IgniteCheckedException("Meta cache names should be different for different IGFS instances " + "configuration (fix configuration or set " + "-D" + IGNITE_SKIP_CONFIGURATION_CONSISTENCY_CHECK + "=true system "+ "property) [metaCacheName="+ rmtAttr.metaCacheName()+ ", locNodeId="+ ctx.localNodeId()+ ", rmtNodeId="+ rmtNode.id()+ ", locIgfsName="+ locAttr.igfsName()+ ", rmtIgfsName="+ rmtAttr.igfsName()+ ']');      if (F.eq(rmtAttr.dataCacheName(),locAttr.dataCacheName()))       throw new IgniteCheckedException("Data cache names should be different for different IGFS instances " + "configuration (fix configuration or set " + "-D" + IGNITE_SKIP_CONFIGURATION_CONSISTENCY_CHECK + "=true system "+ "property)[dataCacheName="+ rmtAttr.dataCacheName()+ ", locNodeId="+ ctx.localNodeId()+ ", rmtNodeId="+ rmtNode.id()+ ", locIgfsName="+ locAttr.igfsName()+ ", rmtIgfsName="+ rmtAttr.igfsName()+ ']');      continue;    }    checkSame("Data block size","BlockSize",rmtNode.id(),rmtAttr.blockSize(),locAttr.blockSize(),rmtAttr.igfsName());    checkSame("Affinity mapper group size","GrpSize",rmtNode.id(),rmtAttr.groupSize(),locAttr.groupSize(),rmtAttr.igfsName());    checkSame("Meta cache name","MetaCacheName",rmtNode.id(),rmtAttr.metaCacheName(),locAttr.metaCacheName(),rmtAttr.igfsName());    checkSame("Data cache name","DataCacheName",rmtNode.id(),rmtAttr.dataCacheName(),locAttr.dataCacheName(),rmtAttr.igfsName());    checkSame("Default mode","DefaultMode",rmtNode.id(),rmtAttr.defaultMode(),locAttr.defaultMode(),rmtAttr.igfsName());    checkSame("Path modes","PathModes",rmtNode.id(),rmtAttr.pathModes(),locAttr.pathModes(),rmtAttr.igfsName());    checkSame("Fragmentizer enabled","FragmentizerEnabled",rmtNode.id(),rmtAttr.fragmentizerEnabled(),locAttr.fragmentizerEnabled(),rmtAttr.igfsName());  }}  }
class C{  public SetDebuggerEventSettingsCommand(final int packetId,final DebuggerEventSettings eventSettings){  super(DebugCommandType.CMD_SET_DEBUGGER_EVENT_SETTINGS,packetId);  Preconditions.checkNotNull(eventSettings,"IE00054: Event settings arugment can not be null");  addArgument(new DebugMessageIntegerArgument(eventSettings.getBreakOnDllLoad() ? 1 : 0));  addArgument(new DebugMessageIntegerArgument(eventSettings.getBreakOnDllUnload() ? 1 : 0));}  }
class C{  public static TextEdit reformat(int kind,String source,Region[] regions,int indentationLevel,String lineSeparator,Map<String,String> options){  return ToolFactory.createCodeFormatter(options,ToolFactory.M_FORMAT_EXISTING).format(kind,source,regions,indentationLevel,lineSeparator);}  }
class C{  private static void parseArgs(String[] args){  if (args.length != 3) {    System.err.println("You must pass <user account>, <password>, and <database URL> as arguments to this function.");    System.exit(-1);  }  account=args[0];  password=args[1];  dburl=args[2];}  }
class C{  public K lowerKey(K key){  while (true) {    K k=map.lowerKey(key);    if (k == null || get(k) != null) {      return k;    }    key=k;  }}  }
class C{  public void doAbout(){  try {    StringBuffer message=new StringBuffer();    message.append("Product version: ");    message.append(MainControllerPanel.version);    message.append("\nBuild Label:     ");    message.append(MainControllerPanel.title);    message.append("\nBuild Time:      ");    message.append(MainControllerPanel.date);    JOptionPane.showMessageDialog(this,message,"About Help",JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    this.setErrorMessage("Could not load about help.",ex.getMessage(),ex);  }}  }
class C{  private StatementEnum type(){  byte b=0;  b|=(0x1 << TYPE_BIT);  b|=(0x1 << (TYPE_BIT + 1));  b|=(0x1 << (TYPE_BIT + 2));  b&=flags;switch (b) {case 0:    return null;case 1:  return StatementEnum.Explicit;case 2:return StatementEnum.Axiom;case 3:return StatementEnum.Inferred;case 4:return StatementEnum.History;}throw new IllegalStateException();}  }
class C{  public static void plotTrainingData(INDArray features,INDArray labels,INDArray backgroundIn,INDArray backgroundOut,int nDivisions){  double[] mins=backgroundIn.min(0).data().asDouble();  double[] maxs=backgroundIn.max(0).data().asDouble();  XYZDataset backgroundData=createBackgroundData(backgroundIn,backgroundOut);  JPanel panel=new ChartPanel(createChart(backgroundData,mins,maxs,nDivisions,createDataSetTrain(features,labels)));  JFrame f=new JFrame();  f.add(panel);  f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);  f.pack();  f.setTitle("Training Data");  f.setVisible(true);}  }
class C{  default URI liDatatype(){  return Defaults.LI_DATATYPE;}  }
class C{  private void processAllEvents(ProcessorEventQueue parent){  while (true) {    final AccessibilityEvent event;synchronized (parent.mEventQueue) {      if (parent.mEventQueue.isEmpty()) {        return;      }      event=parent.mEventQueue.dequeue();    }    parent.processAndRecycleEvent(event);  }}  }
class C{  public static ShippingDialogFragment newInstance(ShippingDialogInterface shippingDialogInterface){  ShippingDialogFragment frag=new ShippingDialogFragment();  frag.delivery=null;  frag.shippingDialogInterface=shippingDialogInterface;  return frag;}  }
class C{  protected void insertInitialLoadEvents(){  ProcessInfo processInfo=engine.getStatisticManager().newProcessInfo(new ProcessInfoKey(engine.getNodeService().findIdentityNodeId(),null,ProcessType.INSERT_LOAD_EVENTS));  processInfo.setStatus(ProcessInfo.Status.PROCESSING);  try {    INodeService nodeService=engine.getNodeService();    Node identity=nodeService.findIdentity();    if (identity != null) {      boolean isClusteringEnabled=parameterService.is(ParameterConstants.CLUSTER_LOCKING_ENABLED);      NodeSecurity identitySecurity=nodeService.findNodeSecurity(identity.getNodeId(),!isClusteringEnabled);      if (engine.getParameterService().isRegistrationServer() || (identitySecurity != null && !identitySecurity.isRegistrationEnabled() && identitySecurity.getRegistrationTime() != null)) {        List<NodeSecurity> nodeSecurities=findNodesThatAreReadyForInitialLoad();        if (nodeSecurities != null) {          boolean reverseLoadFirst=parameterService.is(ParameterConstants.INITIAL_LOAD_REVERSE_FIRST);          boolean isInitialLoadQueued=false;          for (          NodeSecurity security : nodeSecurities) {            if (engine.getTriggerRouterService().getActiveTriggerHistories().size() > 0) {              boolean thisMySecurityRecord=security.getNodeId().equals(identity.getNodeId());              boolean reverseLoadQueued=security.isRevInitialLoadEnabled();              boolean initialLoadQueued=security.isInitialLoadEnabled();              boolean registered=security.getRegistrationTime() != null;              if (thisMySecurityRecord && reverseLoadQueued && (reverseLoadFirst || !initialLoadQueued)) {                sendReverseInitialLoad(processInfo);              } else               if (!thisMySecurityRecord && registered && initialLoadQueued&& (!reverseLoadFirst || !reverseLoadQueued)) {                long ts=System.currentTimeMillis();                engine.getDataService().insertReloadEvents(engine.getNodeService().findNode(security.getNodeId()),false,processInfo);                isInitialLoadQueued=true;                ts=System.currentTimeMillis() - ts;                if (ts > Constants.LONG_OPERATION_THRESHOLD) {                  log.warn("Inserted reload events for node {} in {} ms",security.getNodeId(),ts);                } else {                  log.info("Inserted reload events for node {} in {} ms",security.getNodeId(),ts);                }              }            } else {              List<NodeGroupLink> links=engine.getConfigurationService().getNodeGroupLinksFor(parameterService.getNodeGroupId(),false);              if (links == null || links.size() == 0) {                log.warn("Could not queue up a load for {} because a node group link is NOT configured over which a load could be delivered",security.getNodeId());              } else {                log.warn("Could not queue up a load for {} because sync triggers has not yet run",security.getNodeId());                if (!syncTriggersBeforeInitialLoadAttempted) {                  syncTriggersBeforeInitialLoadAttempted=true;                  engine.getTriggerRouterService().syncTriggers();                }              }            }          }          if (isInitialLoadQueued) {            gapDetector.setFullGapAnalysis(true);          }        }        processTableRequestLoads(identity,processInfo);      }    }    processInfo.setStatus(ProcessInfo.Status.OK);  } catch (  Exception ex) {    processInfo.setStatus(ProcessInfo.Status.ERROR);    log.error("",ex);  }}  }
class C{  public static void copy(File src,File dst) throws IOException {  FileInputStream inStream=new FileInputStream(src);  FileOutputStream outStream=new FileOutputStream(dst);  FileChannel inChannel=inStream.getChannel();  FileChannel outChannel=outStream.getChannel();  inChannel.transferTo(0,inChannel.size(),outChannel);  inStream.close();  outStream.close();}  }
class C{  private void initAtpTab(){  m_tableAtp=new MiniTable();  m_tableAtp.setRowSelectionAllowed(true);  m_tableAtp.setMultiSelection(false);  m_tableAtp.addMouseListener(this);  m_tableAtp.setShowTotals(false);  ArrayList<Info_Column> list=new ArrayList<Info_Column>();  list.add(new Info_Column(" ","M_Product_ID",IDColumn.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_Warehouse_ID"),"Warehouse",String.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_Locator_ID"),"Locator",String.class));  list.add(new Info_Column(Msg.getMsg(Env.getCtx(),"Date",true),"Date",Timestamp.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyAvailable"),"QtyAvailable",Double.class,true,true,null));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyOnHand"),"QtyOnHand",Double.class));  list.add(new Info_Column(Msg.getMsg(Env.getCtx(),"ExpectedChange",true),"DeltaQty",Double.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"C_BPartner_ID"),"BP_Name",String.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyOrdered"),"QtyOrdered",Double.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyReserved"),"QtyReserved",Double.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"),"PASI",String.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"DocumentNo"),"DocumentNo",String.class));  m_layoutATP=new Info_Column[list.size()];  list.toArray(m_layoutATP);}  }
class C{  public void close(Result<Boolean> result){  _lifecycle.toDestroy();  SegmentStream nodeStream=_nodeStream;  _nodeStream=null;  if (nodeStream != null) {    nodeStream.closeFsync(result.then(null));  } else {    result.ok(true);  }}  }
class C{  public void append(final char[] data){  if (data == null) {    return;  }  provideCapacity(length + data.length);  System.arraycopy(data,0,c,length,data.length);  length+=data.length;}  }
class C{  public RemuxTranscodeEngine(){}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  public Object put(int key,Object value){  Entry tab[]=table;  int hash=key;  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.hash == hash) {      Object old=e.value;      e.value=value;      return old;    }  }  if (count >= threshold) {    rehash();    tab=table;    index=(hash & 0x7FFFFFFF) % tab.length;  }  Entry e=new Entry(hash,key,value,tab[index]);  tab[index]=e;  count++;  return null;}  }
class C{  @Override public SolrDocumentList docListToSolrDocumentList(DocList docs,SolrIndexSearcher searcher,Set<String> fields,Map<SolrDocument,Integer> ids) throws IOException {  return SolrPluginUtils.docListToSolrDocumentList(docs,searcher,fields,ids);}  }
class C{  public IconButton(String iconName){  setRolloverEnabled(true);  this.iconName=iconName;  this.message="";  this.iconOnly=true;  initialized=true;  useTransparentBackground=true;  updateButton();}  }
class C{  public ColorList complement(){  for (  TColor c : colors) {    c.complement();  }  return this;}  }
class C{  private AccessProfile createAccessProfile(){  final AccessProfile profile=new AccessProfile();  String host=EnvConfig.get("sanity","vnx.host");  String userName=EnvConfig.get("sanity","vnx.username");  String password=EnvConfig.get("sanity","vnx.password");  String portNumber=EnvConfig.get("sanity","vnx.port");  profile.setIpAddress(host);  profile.setUserName(userName);  profile.setPassword(password);  profile.setPortNumber(Integer.parseInt(portNumber));  profile.setSystemType("vnxfile");  profile.setProfileName("VNXFileProfile");  Map<String,String> props=new HashMap<String,String>();  props.put("metering-dump","true");  props.put("metering-dump-location","/tmp");  profile.setProps(props);  profile.setserialID(serialNumber);  return profile;}  }
class C{  public XStringForChars(char[] val,int start,int length){  super(val);  m_start=start;  m_length=length;  if (null == val)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL,null));}  }
class C{  public static double redditScore(final int ups,final int downs,final long t){  final int x=ups - downs;  final double z=Math.max(Math.abs(x),1);  int y=0;  if (x > 0) {    y=1;  } else   if (x < 0) {    y=-1;  }  return Math.log10(z) + y * (t - 1353745196) / 45000;}  }
class C{  private static boolean hasSelectionHandle(final PNode node){  for (Iterator i=node.getChildrenIterator(); i.hasNext(); ) {    PNode n=(PNode)i.next();    if (n instanceof SourceHandle) {      return true;    }  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses=0;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres=null;  double[] classCentre;  ArrayList<double[]> centres=new ArrayList<double[]>();  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  byte initializationMode=0;  long numPixelsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  double centroidMergeDist=30;  int minimumAllowableClassSize=1;  int initialNumClasses=10000;  double maxDist=Double.POSITIVE_INFINITY;  int unassignedClass=-1;  boolean isNoDataPixel;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  maxIterations=Integer.parseInt(args[2]);  percentChangedThreshold=Double.parseDouble(args[3]);  centroidMergeDist=Double.parseDouble(args[4]);  if (!args[5].toLowerCase().contains("not specified")) {    maxDist=Double.parseDouble(args[5]);  }  minimumAllowableClassSize=Integer.parseInt(args[6]);  if (args[7].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  int[] clusterHistory=new int[maxIterations];  double[] changeHistory=new double[maxIterations];  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    numClasses=initialNumClasses;    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentre[i]=imageMetaData[i][1] + generator.nextDouble() * range;        }        centres.add(classCentre);      }    } else {      double range, spacing;      for (a=0; a < numClasses; a++) {        classCentre=new double[numImages];        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentre[i]=imageMetaData[i][1] + spacing * a;        }        centres.add(classCentre);      }    }    j=0;    whichClass=0;    do {      if (j > 0) {        numClasses=classCentres.length;        centres.clear();        for (a=0; a < classCentres.length; a++) {          centres.add(classCentres[a]);        }        ArrayList<Long> numPixels=new ArrayList<Long>();        for (i=0; i < numPixelsInEachClass.length; i++) {          numPixels.add(numPixelsInEachClass[i]);        }        boolean flag=true;        a=0;        do {          if (numPixels.get(a) == 0) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);        long numPixels1, numPixels2;        do {          flag=false;          for (a=0; a < centres.size(); a++) {            if (flag) {              break;            }            classCentre=centres.get(a);            numPixels1=numPixels.get(a);            for (int b=a; b < centres.size(); b++) {              numPixels2=numPixels.get(b);              if (b > a && numPixels1 > 0 && numPixels2 > 0) {                double[] classCentre2=centres.get(b);                dist=0;                for (i=0; i < numImages; i++) {                  dist+=(classCentre[i] - classCentre2[i]) * (classCentre[i] - classCentre2[i]);                }                dist=Math.sqrt(dist);                if (dist < centroidMergeDist) {                  double[] classCentre3=new double[numImages];                  long totalPix=numPixels1 + numPixels2;                  double weight1=(double)numPixels1 / totalPix;                  double weight2=(double)numPixels2 / totalPix;                  for (int k=0; k < numImages; k++) {                    classCentre3[k]=classCentre[k] * weight1 + classCentre2[k] * weight2;                  }                  centres.remove(Math.max(a,b));                  centres.remove(Math.min(a,b));                  centres.add(classCentre3);                  numPixels.remove(Math.max(a,b));                  numPixels.remove(Math.min(a,b));                  numPixels.add(totalPix);                  flag=true;                }                if (flag) {                  break;                }              }            }          }          numClasses=centres.size();        } while (flag);        flag=true;        a=0;        do {          if (numPixels.get(a) < minimumAllowableClassSize) {            centres.remove(a);            numPixels.remove(a);            flag=true;            a=-1;          }          a++;          if (a >= numPixels.size()) {            flag=false;          }        } while (flag);      }      numClasses=centres.size();      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        classCentre=centres.get(a);        classCentres[a]=classCentre.clone();      }      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numPixelsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          isNoDataPixel=false;          for (i=0; i < numImages; i++) {            if (data[i][col] == imageMetaData[i][0]) {              isNoDataPixel=true;              break;            }          }          if (!isNoDataPixel) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            whichClass=unassignedClass;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist && dist <= maxDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numPixelsChanged++;              output.setValue(row,col,whichClass);            }            if (whichClass != unassignedClass) {              numPixelsInEachClass[whichClass]++;              for (i=0; i < numImages; i++) {                classCentreData[whichClass][i]+=(data[i][col] - imageMetaData[i][1]);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a] + imageMetaData[i][1];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numPixelsChanged / totalNumCells * 100;      clusterHistory[j - 1]=numClasses;      changeHistory[j - 1]=percentChanged;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    int numberOfUnassignedPixels=0;    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        isNoDataPixel=false;        for (i=0; i < numImages; i++) {          if (data[i][col] == imageMetaData[i][0]) {            isNoDataPixel=true;            break;          }        }        if (!isNoDataPixel) {          whichClass=(int)(output.getValue(row,col));          if (whichClass != unassignedClass) {            dist=0;            for (i=0; i < numImages; i++) {              dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);            }            totalDeviations[whichClass]+=dist;          } else {            numberOfUnassignedPixels++;          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="Modified k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    retStr+="Number of unassigned pixels (class = -1): " + numberOfUnassignedPixels + "\n\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    retStr+="\nCluster Merger History:\n";    retStr+="Iteration\tNumber of Clusters\tPercent Changed\n";    for (i=0; i < maxIterations; i++) {      if (clusterHistory[i] > 0) {        retStr+=(i + 1) + "\t" + clusterHistory[i]+ "\t"+ changeHistory[i]+ "\n";      } else {        break;      }    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static <A,X extends Throwable>TryTValue<A,X> of(final AnyMValue<Try<A,X>> monads){  return new TryTValue<>(monads);}  }
class C{  public static float parsePercentage(String s) throws NumberFormatException {  if (!s.endsWith("%")) {    throw new NumberFormatException("Percentages must end with %");  }  return Float.parseFloat(s.substring(0,s.length() - 1)) / 100;}  }
class C{  @Override public int hashCode(){  return expressionStr.hashCode();}  }
class C{  @Override public void clear(){  if (null != _head) {    for (TLinkable link=_head.getNext(); link != null; link=link.getNext()) {      TLinkable prev=link.getPrevious();      prev.setNext(null);      link.setPrevious(null);    }    _head=_tail=null;  }  _size=0;}  }
class C{  @Bean NamedParameterJdbcTemplate jdbcTemplate(DataSource dataSource){  return new NamedParameterJdbcTemplate(dataSource);}  }
class C{  public InExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    PivotItem dataItem=(PivotItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Pivot: "+ dataItem.getPivotPrice()+ " Side: "+ dataItem.getPivotSide());  }}  }
class C{  public void endDocument() throws SAXException {  writeText4Links();  write('\n');  super.endDocument();  try {    flush();  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","qdc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  protected static void init(EventAdapterService eventAdapterService,ConfigurationInformation configSnapshot){  Map<String,ConfigurationEventTypeLegacy> classLegacyInfo=new HashMap<String,ConfigurationEventTypeLegacy>();  for (  Map.Entry<String,String> entry : configSnapshot.getEventTypeNames().entrySet()) {    String typeName=entry.getKey();    String className=entry.getValue();    ConfigurationEventTypeLegacy legacyDef=configSnapshot.getEventTypesLegacy().get(typeName);    if (legacyDef != null) {      classLegacyInfo.put(className,legacyDef);    }  }  eventAdapterService.setClassLegacyConfigs(classLegacyInfo);  eventAdapterService.setDefaultPropertyResolutionStyle(configSnapshot.getEngineDefaults().getEventMeta().getClassPropertyResolutionStyle());  eventAdapterService.setDefaultAccessorStyle(configSnapshot.getEngineDefaults().getEventMeta().getDefaultAccessorStyle());  for (  String javaPackage : configSnapshot.getEventTypeAutoNamePackages()) {    eventAdapterService.addAutoNamePackage(javaPackage);  }  Map<String,String> javaClassNames=configSnapshot.getEventTypeNames();  for (  Map.Entry<String,String> entry : javaClassNames.entrySet()) {    try {      String typeName=entry.getKey();      eventAdapterService.addBeanType(typeName,entry.getValue(),false,true,true,true);    } catch (    EventAdapterException ex) {      throw new ConfigurationException("Error configuring engine: " + ex.getMessage(),ex);    }  }  Map<String,ConfigurationEventTypeXMLDOM> xmlDOMNames=configSnapshot.getEventTypesXMLDOM();  for (  Map.Entry<String,ConfigurationEventTypeXMLDOM> entry : xmlDOMNames.entrySet()) {    SchemaModel schemaModel=null;    if ((entry.getValue().getSchemaResource() != null) || (entry.getValue().getSchemaText() != null)) {      try {        schemaModel=XSDSchemaMapper.loadAndMap(entry.getValue().getSchemaResource(),entry.getValue().getSchemaText());      } catch (      Exception ex) {        throw new ConfigurationException(ex.getMessage(),ex);      }    }    try {      eventAdapterService.addXMLDOMType(entry.getKey(),entry.getValue(),schemaModel,true);    } catch (    EventAdapterException ex) {      throw new ConfigurationException("Error configuring engine: " + ex.getMessage(),ex);    }  }  Set<String> dependentMapOrder;  try {    Map<String,Set<String>> typesReferences=toTypesReferences(configSnapshot.getMapTypeConfigurations());    dependentMapOrder=GraphUtil.getTopDownOrder(typesReferences);  } catch (  GraphCircularDependencyException e) {    throw new ConfigurationException("Error configuring engine, dependency graph between map type names is circular: " + e.getMessage(),e);  }  Map<String,Properties> mapNames=configSnapshot.getEventTypesMapEvents();  Map<String,Map<String,Object>> nestableMapNames=configSnapshot.getEventTypesNestableMapEvents();  dependentMapOrder.addAll(mapNames.keySet());  dependentMapOrder.addAll(nestableMapNames.keySet());  try {    for (    String mapName : dependentMapOrder) {      ConfigurationEventTypeMap mapConfig=configSnapshot.getMapTypeConfigurations().get(mapName);      Properties propertiesUnnested=mapNames.get(mapName);      if (propertiesUnnested != null) {        Map<String,Object> propertyTypes=createPropertyTypes(propertiesUnnested);        Map<String,Object> propertyTypesCompiled=EventTypeUtility.compileMapTypeProperties(propertyTypes,eventAdapterService);        eventAdapterService.addNestableMapType(mapName,propertyTypesCompiled,mapConfig,true,true,true,false,false);      }      Map<String,Object> propertiesNestable=nestableMapNames.get(mapName);      if (propertiesNestable != null) {        Map<String,Object> propertiesNestableCompiled=EventTypeUtility.compileMapTypeProperties(propertiesNestable,eventAdapterService);        eventAdapterService.addNestableMapType(mapName,propertiesNestableCompiled,mapConfig,true,true,true,false,false);      }    }  } catch (  EventAdapterException ex) {    throw new ConfigurationException("Error configuring engine: " + ex.getMessage(),ex);  }  Set<String> dependentObjectArrayOrder;  try {    Map<String,Set<String>> typesReferences=toTypesReferences(configSnapshot.getObjectArrayTypeConfigurations());    dependentObjectArrayOrder=GraphUtil.getTopDownOrder(typesReferences);  } catch (  GraphCircularDependencyException e) {    throw new ConfigurationException("Error configuring engine, dependency graph between object array type names is circular: " + e.getMessage(),e);  }  Map<String,Map<String,Object>> nestableObjectArrayNames=configSnapshot.getEventTypesNestableObjectArrayEvents();  dependentObjectArrayOrder.addAll(nestableObjectArrayNames.keySet());  try {    for (    String objectArrayName : dependentObjectArrayOrder) {      ConfigurationEventTypeObjectArray objectArrayConfig=configSnapshot.getObjectArrayTypeConfigurations().get(objectArrayName);      Map<String,Object> propertyTypes=nestableObjectArrayNames.get(objectArrayName);      propertyTypes=resolveClassesForStringPropertyTypes(propertyTypes);      Map<String,Object> propertyTypesCompiled=EventTypeUtility.compileMapTypeProperties(propertyTypes,eventAdapterService);      eventAdapterService.addNestableObjectArrayType(objectArrayName,propertyTypesCompiled,objectArrayConfig,true,true,true,false,false,false,null);    }  } catch (  EventAdapterException ex) {    throw new ConfigurationException("Error configuring engine: " + ex.getMessage(),ex);  }  Map<URI,ConfigurationPlugInEventRepresentation> plugInReps=configSnapshot.getPlugInEventRepresentation();  for (  Map.Entry<URI,ConfigurationPlugInEventRepresentation> entry : plugInReps.entrySet()) {    String className=entry.getValue().getEventRepresentationClassName();    Class eventRepClass;    try {      ClassLoader cl=Thread.currentThread().getContextClassLoader();      eventRepClass=Class.forName(className,true,cl);    } catch (    ClassNotFoundException ex) {      throw new ConfigurationException("Failed to load plug-in event representation class '" + className + "'",ex);    }    Object pluginEventRepObj;    try {      pluginEventRepObj=eventRepClass.newInstance();    } catch (    InstantiationException ex) {      throw new ConfigurationException("Failed to instantiate plug-in event representation class '" + className + "' via default constructor",ex);    }catch (    IllegalAccessException ex) {      throw new ConfigurationException("Illegal access to instantiate plug-in event representation class '" + className + "' via default constructor",ex);    }    if (!(pluginEventRepObj instanceof PlugInEventRepresentation)) {      throw new ConfigurationException("Plug-in event representation class '" + className + "' does not implement the required interface "+ PlugInEventRepresentation.class.getName());    }    URI eventRepURI=entry.getKey();    PlugInEventRepresentation pluginEventRep=(PlugInEventRepresentation)pluginEventRepObj;    Serializable initializer=entry.getValue().getInitializer();    PlugInEventRepresentationContext context=new PlugInEventRepresentationContext(eventAdapterService,eventRepURI,initializer);    try {      pluginEventRep.init(context);      eventAdapterService.addEventRepresentation(eventRepURI,pluginEventRep);    } catch (    Throwable t) {      throw new ConfigurationException("Plug-in event representation class '" + className + "' and URI '"+ eventRepURI+ "' did not initialize correctly : "+ t.getMessage(),t);    }  }  Map<String,ConfigurationPlugInEventType> plugInNames=configSnapshot.getPlugInEventTypes();  for (  Map.Entry<String,ConfigurationPlugInEventType> entry : plugInNames.entrySet()) {    String name=entry.getKey();    ConfigurationPlugInEventType config=entry.getValue();    eventAdapterService.addPlugInEventType(name,config.getEventRepresentationResolutionURIs(),config.getInitializer());  }}  }
class C{  private int subtractIndent(CharSequence correct,CharSequence current,StringBuffer difference,int tabLength){  int c1=computeVisualLength(correct,tabLength);  int c2=computeVisualLength(current,tabLength);  int diff=c1 - c2;  if (diff <= 0)   return diff;  difference.setLength(0);  int len=0, i=0;  while (len < diff) {    char c=correct.charAt(i++);    difference.append(c);    len+=computeVisualLength(c,tabLength);  }  return diff;}  }
class C{  public static ReasonCode valueOf(int value){  ReasonCode entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + RcsServiceRegistration.class.getName() + ""+ value+ "!");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.writeObject(thisX500Name.getEncodedInternal());}  }
class C{  @Override public Object dataAccessObjectProcess(ProceedingJoinPoint pjp) throws AuthorityException, ServiceException, Throwable {  return pjp.proceed();}  }
class C{  public boolean isContactsLoaded(){  return isContactsLoaded;}  }
class C{  public RecipientListRouter createRecipientListRouter(){  RecipientListRouterImpl recipientListRouter=new RecipientListRouterImpl();  return recipientListRouter;}  }
class C{  public int cardinality(){  if (this.isNoView)   return this.elements.size(); else   return super.cardinality();}  }
class C{  private static Map<String,String> convertFieldsMap(Map<String,Class<?>> base){  Map<String,String> res=new LinkedHashMap<>(base.size());  for (  Map.Entry<String,Class<?>> e : base.entrySet())   res.put(e.getKey(),U.compact(e.getValue().getName()));  return res;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void out(final String msg){  try {    mOut.append(msg);    mOut.append(LS);  } catch (  final IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void mergeWithExisting(Annotation existingAnnotation,Annotation... annotations){  mergeWithExisting(existingAnnotation,Arrays.asList(annotations));}  }
class C{  public static ActionBarBackground changeColor(AppCompatActivity activity,int newColor,Boolean fade){  ActionBarBackground abColor=new ActionBarBackground(activity,newColor);  abColor.changeColor(fade);  return abColor;}  }
class C{  private void loadMods(){  mobMods=new ArrayList<Class<? extends MobModifier>>();  mobMods.add(MM_1UP.class);  mobMods.add(MM_Alchemist.class);  mobMods.add(MM_Berserk.class);  mobMods.add(MM_Blastoff.class);  mobMods.add(MM_Bulwark.class);  mobMods.add(MM_Choke.class);  mobMods.add(MM_Cloaking.class);  mobMods.add(MM_Darkness.class);  mobMods.add(MM_Ender.class);  mobMods.add(MM_Exhaust.class);  mobMods.add(MM_Fiery.class);  mobMods.add(MM_Ghastly.class);  mobMods.add(MM_Gravity.class);  mobMods.add(MM_Lifesteal.class);  mobMods.add(MM_Ninja.class);  mobMods.add(MM_Poisonous.class);  mobMods.add(MM_Quicksand.class);  mobMods.add(MM_Regen.class);  mobMods.add(MM_Rust.class);  mobMods.add(MM_Sapper.class);  mobMods.add(MM_Sprint.class);  mobMods.add(MM_Sticky.class);  mobMods.add(MM_Storm.class);  mobMods.add(MM_Vengeance.class);  mobMods.add(MM_Weakness.class);  mobMods.add(MM_Webber.class);  mobMods.add(MM_Wither.class);  config.load();  Iterator<Class<? extends MobModifier>> iter=mobMods.iterator();  while (iter.hasNext()) {    Class<?> c=iter.next();    if (!config.get(Configuration.CATEGORY_GENERAL,c.getSimpleName() + " enabled",true).getBoolean(true)) {      iter.remove();    }  }  config.save();}  }
class C{  EventSupport(LdapCtx ctx){  this.ctx=ctx;}  }
class C{  public String seedTipText(){  return "The random number seed used for selecting attributes.";}  }
class C{  public void resolve(int digitAccuracy){  setAccuracy(digitAccuracy);  resolve();}  }
class C{  public boolean updateDistance(int checkingDistance,AStarNode parentOtherNode){  if (checkingDistance < g) {    g=checkingDistance;    parent=parentOtherNode;    updateTargetCostEstimate();    return true;  }  return false;}  }
class C{  public static boolean isAnnotation(int mod){  return (mod & ANNOTATION) != 0;}  }
class C{  private String parseFirstArtistId(String json){  try {    JsonNode jsonNode=this.objectMapper.readTree(json);    for (    JsonNode node : jsonNode.get("artists").get("items")) {      return node.get("id").asText();    }  } catch (  IOException e) {    throw new RuntimeException("Failed to parse JSON",e);  }  return null;}  }
class C{  public static <T>long queryBatchProcess(HGQuery<T> query,Mapping<T,Boolean> F,int batchSize,T startAfter,long first){  HGSearchResult<T> rs=null;  T lastProcessed=startAfter;  long totalProcessed=0;  while (true) {    T txLastProcessed=lastProcessed;    int currentProcessed=0;    query.getHyperGraph().getTransactionManager().beginTransaction();    try {      rs=query.execute();      if (txLastProcessed == null) {        for (long i=first; i > 0; i--) {          if (!rs.hasNext()) {            rs.close();            rs=null;            query.getHyperGraph().getTransactionManager().endTransaction(false);            return totalProcessed;          } else           rs.next();        }      } else {        GotoResult gt=null;        if (rs instanceof HGRandomAccessResult) {          HGRandomAccessResult<T> rars=(HGRandomAccessResult<T>)rs;          gt=rars.goTo(txLastProcessed,false);        } else {          rs.close();          rs=null;          throw new HGException("Batch processing starting at a specific element is only supported for HGRandomAccessResult.");        }        if (gt == GotoResult.nothing) {          rs.close();          rs=null;          query.getHyperGraph().getTransactionManager().endTransaction(false);          return totalProcessed;        } else         if (gt == GotoResult.found) {          if (!rs.hasNext()) {            rs.close();            rs=null;            query.getHyperGraph().getTransactionManager().endTransaction(false);            return totalProcessed;          } else           rs.next();        }      }      if (!(rs instanceof HGRandomAccessResult))       batchSize=Integer.MAX_VALUE;      int i;      for (i=0; i < batchSize; i++) {        T x=rs.current();        if (!F.eval(x)) {          rs.close();          rs=null;          query.getHyperGraph().getTransactionManager().endTransaction(true);          return totalProcessed + currentProcessed;        }        txLastProcessed=x;        currentProcessed++;        if (!rs.hasNext())         break; else         rs.next();      }      rs.close();      rs=null;      query.getHyperGraph().getTransactionManager().endTransaction(true);      lastProcessed=txLastProcessed;      totalProcessed+=currentProcessed;      if (i < batchSize)       return totalProcessed;    } catch (    Throwable t) {      Throwable cause=getRootCause(t);      if (query.getHyperGraph().getStore().getTransactionFactory().canRetryAfter(cause))       continue;      try {        query.getHyperGraph().getTransactionManager().endTransaction(false);      } catch (      Throwable tt) {        tt.printStackTrace(System.err);      }      throw new RuntimeException(t);    } finally {      closeNoException(rs);    }  }}  }
class C{  public final boolean retract(final JIPTerm term){synchronized (m_globalDB) {    final Clause clause=Clause.getClause(term.getTerm(),getEnvVariable("enable_clause_check").equals("true"));    final Clause retractedClause=m_globalDB.retract(clause);    if (retractedClause == null) {      return false;    }    return clause.unify(retractedClause,new Hashtable(10));  }}  }
class C{  public static int number(String type,Object o){  return getGlobalNumberer(type).number(o);}  }
class C{  public String namespaceURI(){  return this.namespaceURI;}  }
class C{  public GoldEvent_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public static Typeface recognition(Context context){  return FontSourceProcessor.process(R.raw.recognition,context);}  }
class C{  public boolean isRebootNeeded(){  return rebootNeeded;}  }
class C{  public TreeLoader(ClassLoader loader,PathImpl dir){  super(loader);  _dir=dir;  init();}  }
class C{  public boolean hideOverflowMenu(){  if (mPostedOpenRunnable != null && mMenuView != null) {    ((View)mMenuView).removeCallbacks(mPostedOpenRunnable);    mPostedOpenRunnable=null;    return true;  }  MenuPopupHelper popup=mOverflowPopup;  if (popup != null) {    popup.dismiss();    return true;  }  return false;}  }
class C{  public static void reset(){  threadLocal.remove();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.033 -0500",hash_original_method="0EFE42460BC7E37E4F419C0570A5DDF5",hash_generated_method="C853337CD32C4B29B5CE9F3D93BA12E8") private UnsafeAccess(){}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public void trim(){  children.trimToSize();}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((lhSide == null) ? 0 : lhSide.hashCode());  result=prime * result + ((rhSide == null) ? 0 : rhSide.hashCode());  return result;}  }
class C{  public MarketplaceShareResultEvaluator(Document xml) throws Exception {  super(xml,"MarketplaceOwnerRevenueShareResult");}  }
class C{  @Override public void closeWrite() throws IOException {  if (_isCloseWrite) {    return;  }  _isCloseWrite=true;  boolean isShutdownOutput=false;  if (_s != null) {    try {      _s.shutdownOutput();      isShutdownOutput=true;    } catch (    UnsupportedOperationException e) {      log.log(Level.FINEST,e.toString(),e);    }catch (    Exception e) {      log.finer(e.toString());      log.log(Level.FINEST,e.toString(),e);    }  }}  }
class C{  public DB_MySQL(){  super();}  }
class C{  @Override public void addGraphEdge(GraphNode x,GraphNode y){  throw new OptimizingCompilerException("DF_Graph edges implicit");}  }
class C{  public static void track(JTextComponent text){  new TextListener(text);}  }
class C{  void createFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public boolean ping(HostAddress address,int timeout) throws HostException {  return doPing(address.getInetAddress(),timeout);}  }
class C{  public String toString(){  String retValue=name;  if (description != null && description.length() > 0)   retValue+=" (" + description + ")";  return retValue;}  }
class C{  public void flush(){  LinkedList<Runnable> queue=new LinkedList<>();synchronized (mQueue) {    queue.addAll(mQueue);    mQueue.clear();  }  for (  Runnable r : queue) {    r.run();  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writeStroke(this.stroke,stream);}  }
class C{  public double unweightedMicroFmeasure(){  return m_delegate.unweightedMicroFmeasure();}  }
class C{  private void rewriteSaveFile(Iterable<TrackPoint> data){  FileOutputStream fileOutput=null;  DataOutputStream out=null;  try {    fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);    out=new DataOutputStream(new BufferedOutputStream(fileOutput));    out.writeInt(TrackPoint.FORMAT_VERSION);    for (    TrackPoint point : data) {      point.toStream(out);    }  } catch (  Exception e) {    markSavingBroken("Failed to rewrite broken save file",e);  } finally {    SavingHelper.close(out);  }}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public ServiceAlreadyExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  private PdfPTable createContractorTable(final TenderResponse tenderResponse) throws DocumentException, ApplicationException {  final PdfPTable contractorTable=new PdfPTable(3);  contractorTable.setWidthPercentage(100);  contractorTable.setWidths(new float[]{1.6f,3.6f,6.6f});  try {    contractorTable.getDefaultCell().setPadding(5);    contractorTable.getDefaultCell().setBorderWidth(1);    contractorTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);    contractorTable.addCell(pdfLabel.get("tenderNegotiationpdf.contractorcode"));    contractorTable.addCell(pdfLabel.get("tenderNegotiationpdf.contractorname"));    contractorTable.addCell(pdfLabel.get("tenderNegotiationpdf.contractoraddress"));    for (    final TenderResponseContractors tenderResponseContractors : tenderResponse.getTenderResponseContractors()) {      contractorTable.addCell(centerPara(tenderResponseContractors.getContractor().getCode()));      contractorTable.addCell(centerPara(tenderResponseContractors.getContractor().getName()));      contractorTable.addCell(centerPara(tenderResponseContractors.getContractor().getCorrespondenceAddress()));    }  } catch (  final Exception e) {    LOGGER.info("Exception while creating contractor table" + e);  }  return contractorTable;}  }
class C{  public Builder addOptions(EnumSet<QueryOption> queryOptions){  this.querySpec.options.addAll(queryOptions);  return this;}  }
class C{  public synchronized void rewindTo(long time){  if (time > currentTrackTime)   throw new IllegalArgumentException("Cannot rewind to a future timestamp (requested time: " + time + ", current time: "+ currentTrackTime+ ")");  time=Math.max(0,time);  time-=time % 20;  currentTrackTime=time;}  }
class C{  @Deprecated public Long registerUser(String SID,String Username,String Userpass,String lastname,String firstname,String email,Date age,String street,String additionalname,String fax,String zip,long states_id,String town,long language_id,String phone){  return userManagement.registerUser(Username,Userpass,lastname,firstname,email,age,street,additionalname,fax,zip,states_id,town,language_id,phone,"",true,"");}  }
class C{  private static String contentElementToHtml(ContentElement ce){  return contentElementToHtml(ce,"ContentElement","ContentElement");}  }
class C{  @Override public boolean supportsExpressionsInOrderBy(){  debugCodeCall("supportsExpressionsInOrderBy");  return true;}  }
class C{  public String listQuests(final Player player){  final StringBuilder sb=new StringBuilder();  sb.append("\r\n#'Open Quests': ");  boolean first=true;  for (  final IQuest quest : quests) {    if (quest.isStarted(player) && !quest.isCompleted(player)) {      if (!first) {        sb.append(", ");      }      sb.append(quest.getName());      first=false;    }  }  sb.append("\r\n#'Completed Quests': ");  first=true;  for (  final IQuest quest : quests) {    if (quest.isCompleted(player)) {      if (!first) {        sb.append(", ");      }      sb.append(quest.getName());      first=false;    }  }  return sb.toString();}  }
class C{  public static int nChooseK(int n,int k){  k=Math.min(k,n - k);  if (k == 0) {    return 1;  }  int accum=n;  for (int i=1; i < k; i++) {    accum*=(n - i);    accum/=i;  }  return accum / k;}  }
class C{  static void checkInternalName(final String name,final int start,final int end,final String msg){  int max=end == -1 ? name.length() : end;  try {    int begin=start;    int slash;    do {      slash=name.indexOf('/',begin + 1);      if (slash == -1 || slash > max) {        slash=max;      }      checkIdentifier(name,begin,slash,null);      begin=slash + 1;    } while (slash != max);  } catch (  IllegalArgumentException unused) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);  }}  }
class C{  public static WebServerProvider current(){  WebServerProvider systemProvider=_systemProvider;  if (systemProvider != null) {    return systemProvider;  }  Thread thread=Thread.currentThread();  ClassLoader loader=thread.getContextClassLoader();  return getProvider(loader);}  }
class C{  public MulticastSocket socket(){  return _myMulticastSocket;}  }
class C{  public CSearchAction(final Window parent,final IFrontEndDebuggerProvider debugger,final CMemoryViewer memoryView){  super("Search memory");  Preconditions.checkNotNull(parent,"IE01424: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01425: Debugger argument can not be null");  Preconditions.checkNotNull(memoryView,"IE01426: Memory view argument can not be null");  m_parent=parent;  m_memoryView=memoryView;  m_debugger=debugger;  putValue(Action.SHORT_DESCRIPTION,"Search memory");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.152 -0500",hash_original_method="E1523787F7609795EF3E130FC3FDDFF0",hash_generated_method="6C0D31C155D5B9A6CE5EB79BF44C1A6B") protected void fireRetransmissionTimer(){  try {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("fireRetransmissionTimer() -- ");    }    if (isInviteTransaction() && lastResponse != null) {      if (!this.retransmissionAlertEnabled || sipStack.isTransactionPendingAck(this)) {        if (lastResponse.getStatusCode() / 100 > 2 && !this.isAckSeen)         super.sendMessage(lastResponse);      } else {        SipProviderImpl sipProvider=(SipProviderImpl)this.getSipProvider();        TimeoutEvent txTimeout=new TimeoutEvent(sipProvider,this,Timeout.RETRANSMIT);        sipProvider.handleEvent(txTimeout,this);      }    }  } catch (  IOException e) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(e);    raiseErrorEvent(SIPTransactionErrorEvent.TRANSPORT_ERROR);  }}  }
class C{  public void saveToFile(File outputFile) throws IOException {  String filename=outputFile.getName();  int extPoint=filename.lastIndexOf('.');  if (extPoint < 0) {    throw new IOException("Illegal filename, no extension used.");  }  String ext=filename.substring(extPoint + 1);  if (ext.toLowerCase().equals("jpg") || ext.toLowerCase().equals("jpeg")) {    BufferedImage chart=(BufferedImage)getChartImage(false);    saveGraphicJpeg(chart,outputFile,1.0f);  } else {    BufferedImage chart=(BufferedImage)getChartImage(true);    ImageIO.write(chart,ext,outputFile);  }}  }
class C{  final public void Parameter() throws ParseException {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:    jj_consume_token(WHITESPACE);  break;default :jj_la1[18]=jj_gen;;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case STRING_LITERAL:StringLiteral();break;default :jj_la1[19]=jj_gen;if (jj_2_5(2147483647)) {IntegerRange();} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LBRACKET:ObjectArray();break;case TRUE:True();break;case FALSE:False();break;case IDENTIFIER:case LCURLY:Reference();break;case NUMBER_LITERAL:NumberLiteral();break;default :jj_la1[20]=jj_gen;jj_consume_token(-1);throw new ParseException();}}}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:jj_consume_token(WHITESPACE);break;default :jj_la1[21]=jj_gen;;}}  }
class C{  public void execute(final WorkflowExecutor workflow,final Context context){  if (chainIt.hasNext()) {    currentStep=chainIt.next();    Log.info(getClass(),"Executing :: " + context.getProject().getName() + " ::  =>  "+ currentStep.getClass());    currentStep.execute(workflow,context);  }}  }
class C{  public boolean put(K key,V value,long ttlMs){  if (key != null && value != null && ttlMs > 0) {    entries.put(key,new CacheEntry<>(value,ttlMs));    return true;  }  return false;}  }
class C{  public ZombieStatus(){  super("zombie");}  }
class C{  private void updateText(){  if (button.getSelection()) {    button.setText("On");  } else {    button.setText("Off");  }}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  RenderableLayer layer=new RenderableLayer();  wwd.getLayers().addLayer(layer);  List<Position> positions=Arrays.asList(Position.fromDegrees(50,-180,1e5),Position.fromDegrees(30,-100,1e6),Position.fromDegrees(50,-40,1e5));  Path path=new Path(positions);  layer.addRenderable(path);  positions=Arrays.asList(Position.fromDegrees(40,-180,0),Position.fromDegrees(20,-100,0),Position.fromDegrees(40,-40,0));  path=new Path(positions);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setFollowTerrain(true);  layer.addRenderable(path);  positions=Arrays.asList(Position.fromDegrees(30,-180,1e5),Position.fromDegrees(10,-100,1e6),Position.fromDegrees(30,-40,1e5));  path=new Path(positions);  path.setExtrude(true);  layer.addRenderable(path);  positions=Arrays.asList(Position.fromDegrees(20,-180,1e5),Position.fromDegrees(0,-100,1e6),Position.fromDegrees(20,-40,1e5));  ShapeAttributes attrs=new ShapeAttributes();  attrs.setDrawVerticals(true);  attrs.setInteriorColor(new Color(1,1,1,0.5f));  attrs.setOutlineWidth(3);  path=new Path(positions,attrs);  path.setExtrude(true);  layer.addRenderable(path);  return wwd;}  }
class C{  @Override public Object pushBut(final FormObject form){  final Button push=new Button();  final JavaFXControlListener controlListener=new JavaFXControlListener(push);  final StringBuilder styleBuilder=new StringBuilder(200);  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    push.setDisable(true);  }  setupUniversalFeatures(push,form,styleBuilder,controlListener);  setupButton(push,form,controlListener);  addFont(form,false,false,styleBuilder);  styleBuilder.append("-fx-padding:0;-fx-border:none;-fx-background-color:transparent;");  push.setStyle(styleBuilder.toString());  return push;}  }
class C{  void dispatch(String controllerId,String instanceId,PropertyHandler paramHandler) throws Exception {  Operation operationState=paramHandler.getOperation();  FlowState flowState=paramHandler.getState();  logger.debug("Dispatching in VSystemProcessor with OperationState=" + operationState + " and FlowState= "+ flowState);  FlowState newState=null;  String vSystemState=VSystemStatus.NORMAL;  if (paramHandler.getVsysId() != null && paramHandler.getVsysId().length() != 0) {    vSystemState=vsysComm.getVSystemState(paramHandler);    if (!VSystemStatus.NORMAL.equals(vSystemState)) {      logger.debug("Virtual system is currently in state '{}'. This might cause waiting for NORMAL state.",vSystemState);    }    if (VSystemStatus.ERROR.equals(vSystemState)) {      newState=FlowState.FAILED;      disableExclusiveProcessing(controllerId,instanceId,paramHandler);      return;    }  }  paramHandler.getIaasContext().setVSystemStatus(vSystemState);switch (operationState) {case VSYSTEM_CREATION:case VSYSTEM_MODIFICATION:    newState=manageModificationProcess(controllerId,instanceId,paramHandler,flowState);  break;case VSYSTEM_DELETION:newState=manageDeletionProcess(controllerId,instanceId,paramHandler,flowState);break;case VSYSTEM_ACTIVATION:newState=manageActivationProcess(controllerId,instanceId,paramHandler,flowState);break;case VSYSTEM_OPERATION:newState=manageOperations(controllerId,instanceId,paramHandler,flowState);break;default :}if (newState != null) {paramHandler.setState(newState);logger.debug("Dispatch in VSystemProcessor returns new FlowState=" + newState);} else {logger.debug("Dispatch in VSystemProcessor leaves FlowState unchanged");}}  }
class C{  static final private byte[] rawFingerPrint(String type,String keyType,byte[] hostkey){  Digest dig=null;  if ("md5".equals(type)) {    dig=new MD5();  } else   if ("sha1".equals(type)) {    dig=new SHA1();  } else   throw new IllegalArgumentException("Unknown hash type " + type);  if ("ssh-rsa".equals(keyType)) {  } else   if ("ssh-dss".equals(keyType)) {  } else   throw new IllegalArgumentException("Unknown key type " + keyType);  if (hostkey == null)   throw new IllegalArgumentException("hostkey is null");  dig.update(hostkey);  byte[] res=new byte[dig.getDigestLength()];  dig.digest(res);  return res;}  }
class C{  private JCriteriumTreeNode findParentNode(final JCriteriumTreeNode node,final ICriterium criterium){  if (node.getCriterium() == criterium) {    return node;  }  for (int i=0; i < node.getChildCount(); i++) {    final JCriteriumTreeNode child=(JCriteriumTreeNode)node.getChildAt(i);    final JCriteriumTreeNode parent=findParentNode(child,criterium);    if (parent != null) {      return parent;    }  }  return null;}  }
class C{  @Override @Test public void testStopUsingPid() throws Throwable {  final List<String> jvmArguments=getJvmArguments();  final List<String> command=new ArrayList<String>();  command.add(new File(new File(System.getProperty("java.home"),"bin"),"java").getCanonicalPath());  for (  String jvmArgument : jvmArguments) {    command.add(jvmArgument);  }  command.add("-cp");  command.add(System.getProperty("java.class.path"));  command.add(LocatorLauncher.class.getName());  command.add(LocatorLauncher.Command.START.getName());  command.add(getUniqueName());  command.add("--port=" + this.locatorPort);  command.add("--redirect-output");  this.process=new ProcessBuilder(command).directory(this.temporaryFolder.getRoot()).start();  this.processOutReader=new ProcessStreamReader.Builder(this.process).inputStream(this.process.getInputStream()).inputListener(createLoggingListener("sysout",getUniqueName() + "#sysout")).build().start();  this.processErrReader=new ProcessStreamReader.Builder(this.process).inputStream(this.process.getErrorStream()).inputListener(createLoggingListener("syserr",getUniqueName() + "#syserr")).build().start();  int pid=0;  File pidFile=null;  LocatorLauncher pidLauncher=null;  final LocatorLauncher dirLauncher=new LocatorLauncher.Builder().setWorkingDirectory(this.temporaryFolder.getRoot().getCanonicalPath()).build();  try {    waitForLocatorToStart(dirLauncher);    pidFile=new File(this.temporaryFolder.getRoot(),ProcessType.LOCATOR.getPidFileName());    assertTrue(pidFile.exists());    pid=readPid(pidFile);    assertTrue(pid > 0);    assertTrue(ProcessUtils.isProcessAlive(pid));    final String logFileName=getUniqueName() + ".log";    assertTrue("Log file should exist: " + logFileName,new File(this.temporaryFolder.getRoot(),logFileName).exists());    pidLauncher=new Builder().setPid(pid).build();    assertNotNull(pidLauncher);    assertFalse(pidLauncher.isRunning());    try {      pidLauncher.stop();      fail("FileProcessController should have thrown AttachAPINotFoundException");    } catch (    AttachAPINotFoundException e) {    }  } catch (  Throwable e) {    this.errorCollector.addError(e);  }  try {    assertEquals(Status.STOPPED,dirLauncher.stop().getStatus());    waitForPidToStop(pid);    waitForFileToDelete(pidFile);  } catch (  Throwable e) {    this.errorCollector.addError(e);  }}  }
class C{  @Override public void parseEndElement(){  String ns=validatorInfo.getNameSpace();  String ln=validatorInfo.getLocalName();  FacesValidator validator=validatorInfo.getValidator();  if (isNamingContainerTag(validator,ns,ln)) {    nestedInNamingContainer=false;  }}  }
class C{  int throwInvalid(String name,int offset) throws ParseException {  throw new ParseException("Invalid " + name + " value",offset);}  }
class C{  public static <T>T notNull(final T argument,final String name){  if (argument == null) {    throw new IllegalArgumentException(name + " should not be null!");  }  return argument;}  }
class C{  private FileUtil(){  super();}  }
class C{  public Builder map(String fullyQualifiedColumnNames,Class<ColumnMapper> mapperClass){  return map(fullyQualifiedColumnNames,mapperClass,null);}  }
class C{  public static byte[] encode(byte[] input,int offset,int len){  return Base64.encode(input,offset,len,BASE64_FLAG);}  }
class C{  public void removeListener(ConnectableDeviceListener listener){  listeners.remove(listener);}  }
class C{  public CustomCategoriesDialog(Frame owner){  super(owner,"Custom Categories");  try {    setIconImage(TDA.createImageIcon("CustomCat.png").getImage());  } catch (  NoSuchMethodError nsme) {  }  frame=owner;  getContentPane().setLayout(new BorderLayout());  initPanel();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_11:    return ((InternalEList<?>)getAnonymous_activity_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_21:  return ((InternalEList<?>)getAnonymous_activity_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean onlyExpungeDeletes(){  return onlyExpungeDeletes;}  }
class C{  public CDebuggerComboModel(final IDebuggerContainer debuggerContainer){  this.debuggerContainer=Preconditions.checkNotNull(debuggerContainer,"IE01570: Debugger container argument can not be null");  debuggerContainer.addListener(debuggerListener);  updateElements();}  }
class C{  private void sincronizarBase(){  listaUsuario=ControleDAO.getBanco().getUsuarioDAO().listar();}  }
class C{  public boolean isUnicode(){  if ((length >= 2) && (nextToken() == 254) && (nextToken() == 255)) {    return true;  } else {    this.currentCharPointer=0;    return false;  }}  }
class C{  public static <A,B>Pair<A,B> of(A first,B second){  return new Pair<A,B>(first,second);}  }
class C{  public boolean requireEnd(){  return requireEnd;}  }
class C{  public static void putInt(ByteBuffer bb,long value){  bb.putInt((int)(value & 0xffffffffL));}  }
class C{  public static AVList decodeWorldFiles(File worldFiles[],AVList values) throws FileNotFoundException {  if (worldFiles == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (values == null)   values=new AVListImpl();  for (  File file : worldFiles) {    if (!file.exists()) {      String message=Logging.getMessage("generic.FileNotFound",file.getPath());      Logging.logger().severe(message);      throw new FileNotFoundException(message);    }  }  for (  File file : worldFiles) {    if (file.getName().toLowerCase().endsWith("w")) {      scanWorldFile(file,values);    } else     if (file.getName().toLowerCase().endsWith(".hdr")) {      scanHdrFile(file,values);    } else     if (file.getName().toLowerCase().endsWith(".prj")) {      String text=WWIO.readTextFile(file);      decodeOGCCoordinateSystemWKT(text,values);    }  }  int[] size;  Object o=values.getValue(WORLD_FILE_IMAGE_SIZE);  if (o != null && (o instanceof int[])) {    size=(int[])o;  } else {    size=WorldFile.parseSize(values);    if (size != null)     values.setValue(WORLD_FILE_IMAGE_SIZE,size);  }  o=WorldFile.parseByteOrder(values);  if (o != null)   values.setValue(AVKey.BYTE_ORDER,o);  o=WorldFile.parsePixelFormat(values);  if (o != null)   values.setValue(AVKey.PIXEL_FORMAT,o);  o=WorldFile.parseDataType(values);  if (o != null)   values.setValue(AVKey.DATA_TYPE,o);  o=WorldFile.parseMissingDataValue(values);  if (o != null)   values.setValue(AVKey.MISSING_DATA_REPLACEMENT,o);  Sector sector=null;  if (WorldFile.worldFileValuesAppearGeographic(values)) {    if (size != null) {      sector=WorldFile.parseDegrees(values,size[0],size[1]);    } else {      BufferedImage image=(BufferedImage)values.getValue(AVKey.IMAGE);      if (image != null) {        sector=WorldFile.parseDegrees(values,image.getWidth(),image.getHeight());      }    }    if (sector != null) {      values.setValue(AVKey.SECTOR,sector);    }  }  if (null == sector) {    sector=WorldFile.extractSectorFromHeader(values);    if (sector != null)     values.setValue(AVKey.SECTOR,sector);  }  return values;}  }
class C{  private static String generateViewPoint(URL serviceURI,Request request){  StringBuilder viewPoint=new StringBuilder(serviceURI.getUri());  viewPoint.append("." + request.getMethodName());  viewPoint.append("(" + request.getParamtersDesc() + ")?group="+ serviceURI.getGroup());  return viewPoint.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("tel:");  sb.append(number);  if (extension != null) {    writeParameter(PARAM_EXTENSION,extension,sb);  }  if (isdnSubaddress != null) {    writeParameter(PARAM_ISDN_SUBADDRESS,isdnSubaddress,sb);  }  if (phoneContext != null) {    writeParameter(PARAM_PHONE_CONTEXT,phoneContext,sb);  }  for (  Map.Entry<String,String> entry : parameters.entrySet()) {    String name=entry.getKey();    String value=entry.getValue();    writeParameter(name,value,sb);  }  return sb.toString();}  }
class C{  public DomainRestoreInfo reduceDomains(Variable var,Object value,CSP csp){  DomainRestoreInfo result=new DomainRestoreInfo();  Domain domain=csp.getDomain(var);  if (domain.contains(value)) {    if (domain.size() > 1) {      Queue<Variable> queue=QueueFactory.<Variable>createLifoQueue();      queue.add(var);      result.storeDomainFor(var,domain);      csp.setDomain(var,new Domain(new Object[]{value}));      reduceDomains(queue,csp,result);    }  } else {    result.setEmptyDomainFound(true);  }  return result.compactify();}  }
class C{  public void write(int offset,int value){  super.write(offset,value);}  }
class C{  public RequestHandle head(String url,ResponseHandlerInterface responseHandler){  return head(null,url,null,responseHandler);}  }
class C{  protected void adjustRowBy(int amount){  row+=amount;  if (isExpanded) {    for (int counter=getChildCount() - 1; counter >= 0; counter--)     ((FHTreeStateNode)getChildAt(counter)).adjustRowBy(amount);  }}  }
class C{  public R1Indicator(Problem problem,int subdivisions,NondominatedPopulation referenceSet,UtilityFunction utilityFunction,double epsilon){  super(problem,subdivisions,referenceSet,utilityFunction);  this.epsilon=epsilon;}  }
class C{  public void onCustomTileRemoved(StatusBarPanelCustomTile sbc){}  }
class C{  public void connectTo(Peer peer){  if (getConnecting()) {    Log.w(TAG,"connectTo() not connecting to " + peer + " -- already connecting to someone");    return;  }  Log.i(TAG,"connecting to " + peer);  PeerManager peerManager=PeerManager.getInstance(this);  setConnecting(true);  Log.i(TAG,"Starting to connect to " + peer.toString());  mBluetoothSpeaker.connect(peer,mPeerConnectionCallback);}  }
class C{  public void executeJS(String code,final FormObject ref,final AcroRenderer acro){  final String defSetCode;  try {    if (code.isEmpty() && functions.isEmpty()) {      return;    }    String func="";    int index1=code.indexOf("function ");    while (index1 != -1) {      int i=index1 + 8, bracket=0;      char chr=code.charAt(i);      while (true) {        if (chr == '{') {          bracket++;        }        if (chr == '}') {          bracket--;          if (bracket == 0) {            break;          }        }        chr=code.charAt(i++);      }      int indR=code.lastIndexOf('\r',index1);      int indN=code.lastIndexOf('\n',index1);      final int indS=((indN < indR) ? indR : indN) + 1;      indR=code.indexOf('\r',i);      if (indR == -1) {        indR=code.length();      }      indN=code.indexOf('\n',i);      if (indN == -1) {        indN=code.length();      }      final int indE=((indN < indR) ? indN : indR) + 1;      func+=code.substring(indS,indE);      code=code.substring(0,indS) + code.substring(indE);      index1=code.indexOf("function ");    }    if (!func.isEmpty()) {      addCode(func);    }    code=preParseCode(code);    if (cx == null) {      cx=org.mozilla.javascript.Context.enter();      scope=cx.initStandardObjects();      addStdObject(acro);    }    if (ref != null) {      final String name=ref.getTextStreamValue(PdfDictionary.T);      final Object formObj=org.mozilla.javascript.Context.javaToJS(new PDF2JS(ref),scope);      org.mozilla.javascript.ScriptableObject.putProperty(scope,"event",formObj);      if (name != null) {        org.mozilla.javascript.ScriptableObject.putProperty(scope,name,formObj);      }    }    defSetCode=viewerSettings + functions;    cx.evaluateString(scope,defSetCode,"<JS viewer Settings>",1,null);    cx.evaluateString(scope,code,"<javascript>",1,null);  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());  } finally {    final PdfLayerList layersObj=acro.getActionHandler().getLayerHandler();    if (layersObj != null && layersObj.getChangesMade()) {      if (Layer.debugLayer) {        System.out.println("changed");      }      try {        acro.getActionHandler().getPDFDecoder().decodePage(-1);      } catch (      final Exception e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }    javascriptRunning=false;  }}  }
class C{  private TetradApplicationConfig(){  String path;  if (Preferences.userRoot().getBoolean("experimental",false)) {    path="/resources/configplay.xml";  } else {    path="/resources/configpost.xml";  }  InputStream stream=this.getClass().getResourceAsStream(path);  Builder builder=new Builder(true);  try {    Document doc=builder.build(stream);    this.configs=buildConfiguration(doc.getRootElement());    for (    SessionNodeConfig config : this.configs.values()) {      Class[] models=config.getModels();      for (      Class model : models) {        if (classMap.containsKey(model)) {          throw new IllegalStateException("Model " + model + " has two configurations");        }        this.classMap.put(model,config);      }    }  } catch (  Exception ex) {    throw new IllegalStateException("Chould not load configuration",ex);  }}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  if (qName.equals("way")) {  }}  }
class C{  public void addEntry(Song song){  SharedPreferences.Editor editor=mPrefs.edit();  Set<String> entries=new TreeSet<>(mPrefs.getStringSet(PREF_HISTORY_ENTRIES,new TreeSet<String>()));  JSONObject jsonRoot=new JSONObject();  try {    jsonRoot.put(KEY_TIMESTAMP,new Date().getTime());    jsonRoot.put(KEY_SONG_REF,song.getRef());    jsonRoot.put(KEY_PROVIDER,song.getProvider().serialize());  } catch (  JSONException ignore) {  }  entries.add(jsonRoot.toString());  final long now=new Date().getTime();  final long oneSec=1000L;  final long oneMin=oneSec * 60;  final long oneHour=oneMin * 60;  final long oneDay=oneHour * 24;  final long oneMonth=oneDay * 31;  Set<String> removal=new TreeSet<>();  for (  String entry : entries) {    try {      JSONObject obj=new JSONObject(entry);      long timestamp=obj.getLong(KEY_TIMESTAMP);      if (now - timestamp > oneMonth) {        removal.add(entry);      }    } catch (    JSONException e) {      Log.w(TAG,"Cannot parse JSON",e);    }  }  for (  String entry : removal) {    entries.remove(entry);  }  editor.putStringSet(PREF_HISTORY_ENTRIES,entries);  editor.apply();}  }
class C{  protected void filterInspectorPrimitiveDuplication(Statement statement){  Set<Assertion> assertions=new HashSet<Assertion>(statement.getAssertions());  if (assertions.size() < 2)   return;  if (!(statement instanceof MethodStatement))   return;  MethodStatement methodStatement=(MethodStatement)statement;  boolean hasPrimitive=false;  for (  Assertion assertion : assertions) {    if (assertion instanceof PrimitiveAssertion) {      if (assertion.getStatement().equals(statement)) {        hasPrimitive=true;      }    }  }  if (hasPrimitive) {    for (    Assertion assertion : assertions) {      if (assertion instanceof InspectorAssertion) {        InspectorAssertion ia=(InspectorAssertion)assertion;        if (ia.getInspector().getMethod().equals(methodStatement.getMethod().getMethod())) {          statement.removeAssertion(assertion);          return;        }      }    }  }}  }
class C{  public static void startForTest(Context context,String content){  Intent serviceIntent=new Intent(context,ListenClipboardService.class);  serviceIntent.putExtra(KEY_FOR_CMD,CMD_TEST);  serviceIntent.putExtra(KEY_FOR_CONTENT,content);  context.startService(serviceIntent);}  }
class C{  public void output(String msg){  PrintStream out=this.out instanceof PrintStream ? (PrintStream)this.out : new PrintStream(this.out,true);  out.println(msg);}  }
class C{  public void scroll(String amount){  if (UNIT_UP.equals(amount))   this.scroll(-this.getUnitIncrement()); else   if (UNIT_DOWN.equals(amount))   this.scroll(this.getUnitIncrement()); else   if (BLOCK_UP.equals(amount))   this.scroll(-this.getBlockIncrement()); else   if (BLOCK_DOWN.equals(amount))   this.scroll(this.getBlockIncrement());}  }
class C{  public void write(int b) throws IOException {  byte[] buf=new byte[1];  buf[0]=(byte)(b & 0xff);  write(buf,0,1);}  }
class C{  public boolean disableWifi(){  return mWifiManager.setWifiEnabled(false);}  }
class C{  public static synchronized void closeSessionFactory(String name){  log.trace("closeSessionFactory({})",name);  if (sessionFactoryCache.containsKey(name)) {    closeSessionFactory(sessionFactoryCache.get(name));    sessionFactoryCache.remove(name);  }}  }
class C{  public PlaySoundAction(String sound){  this.sound=checkNotNull(sound);  this.delay=false;}  }
class C{  public static void putIntValue(ContentResolver cr,long providerId,String name,int value){  ContentValues v=new ContentValues(3);  v.put(PROVIDER,providerId);  v.put(NAME,name);  v.put(VALUE,value);  cr.insert(CONTENT_URI,v);}  }
class C{  protected void sequence_BindingIdentifierAsVariableDeclaration(ISerializationContext context,VariableDeclaration semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public void removeElementAt(int i){  if (null == m_map)   return;  if (i >= m_firstFree)   throw new ArrayIndexOutOfBoundsException(i + " >= " + m_firstFree); else   if (i < 0)   throw new ArrayIndexOutOfBoundsException(i);  if (i < m_firstFree - 1)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);  m_firstFree--;  m_map[m_firstFree]=null;}  }
class C{  public BandwidthPartitioner(){}  }
class C{  @SuppressWarnings("unchecked") public void updateOldConfiguration(){  boolean updateDone=false;  if (!plugin.getPluginConfig().getKeys(false).contains("DisabledCategories")) {    List<String> list=new ArrayList<String>();    plugin.getPluginConfig().set("DisabledCategories",list,new String[]{"Don't show these categories in the achievement GUI or in the stats output (delete the [] before using).","Also prevent obtaining achievements for these categories and prevent stats from increasing.","If changed, do a full server reload, and not just /aach reload."});    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("AdditionalEffects")) {    plugin.getPluginConfig().set("AdditionalEffects",true,"Set to true to activate particle effects when receiving book and for players in top list.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("FireworkStyle")) {    plugin.getPluginConfig().set("FireworkStyle","BALL_LARGE","Choose BALL_LARGE, BALL, BURST, CREEPER or STAR.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("ObfuscateNotReceived")) {    plugin.getPluginConfig().set("ObfuscateNotReceived",true,"Obfuscate achievements that have not yet been received in /aach list.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("HideNotReceivedCategories")) {    plugin.getPluginConfig().set("HideNotReceivedCategories",false,"Hide categories with no achievements yet received in /aach list.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("TitleScreen")) {    plugin.getPluginConfig().set("TitleScreen",true,"Display achievement name and description as screen titles.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("Color")) {    plugin.getPluginConfig().set("Color","5","Set the color of the plugin (default: 5, dark purple).");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("TimeBook")) {    plugin.getPluginConfig().set("TimeBook",900,"Time in seconds between each /aach book.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("TimeList")) {    plugin.getPluginConfig().set("TimeList",0,"Time in seconds between each /aach list.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("Brewing")) {    HashMap<Object,Object> emptyMap=new HashMap<>();    plugin.getPluginConfig().set("Brewing",emptyMap,"When a potion is brewed.");    List<String> disabledCategories=(List<String>)plugin.getPluginConfig().getList("DisabledCategories");    disabledCategories.add("Brewing");    plugin.getPluginConfig().set("DisabledCategories",disabledCategories);    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("Taming")) {    HashMap<Object,Object> emptyMap=new HashMap<>();    plugin.getPluginConfig().set("Taming",emptyMap,"When an animal is tamed.");    List<String> disabledCategories=(List<String>)plugin.getPluginConfig().getList("DisabledCategories");    disabledCategories.add("Taming");    plugin.getPluginConfig().set("DisabledCategories",disabledCategories);    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("Fireworks")) {    HashMap<Object,Object> emptyMap=new HashMap<>();    List<String> disabledCategories=(List<String>)plugin.getPluginConfig().getList("DisabledCategories");    disabledCategories.add("Fireworks");    plugin.getPluginConfig().set("DisabledCategories",disabledCategories);    plugin.getPluginConfig().set("Fireworks",emptyMap,"When a firework is launched.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("AsyncPooledRequestsSender")) {    plugin.getPluginConfig().set("AsyncPooledRequestsSender",true,"Enable multithreading for database write operations.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("DistanceGliding")) {    HashMap<Object,Object> emptyMap=new HashMap<>();    plugin.getPluginConfig().set("DistanceGliding",emptyMap,new String[]{"When a distance is traveled with elytra.","(ignored on Minecraft versions prior to 1.9)"});    List<String> disabledCategories=(List<String>)plugin.getPluginConfig().getList("DisabledCategories");    disabledCategories.add("DistanceGliding");    plugin.getPluginConfig().set("DisabledCategories",disabledCategories);    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("MusicDiscs")) {    HashMap<Object,Object> emptyMap=new HashMap<>();    plugin.getPluginConfig().set("MusicDiscs",emptyMap,"When a music disc is played.");    List<String> disabledCategories=(List<String>)plugin.getPluginConfig().getList("DisabledCategories");    disabledCategories.add("MusicDiscs");    plugin.getPluginConfig().set("DisabledCategories",disabledCategories);    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("EnderPearls")) {    HashMap<Object,Object> emptyMap=new HashMap<>();    plugin.getPluginConfig().set("EnderPearls",emptyMap,"When a player teleports with an enderpearl.");    List<String> disabledCategories=(List<String>)plugin.getPluginConfig().getList("DisabledCategories");    disabledCategories.add("EnderPearls");    plugin.getPluginConfig().set("DisabledCategories",disabledCategories);    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("ListAchievementFormat")) {    plugin.getPluginConfig().set("ListAchievementFormat","%ICON% %NAME% %ICON%","Set the format of the achievement name in /aach list.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("HideRewardDisplayInList")) {    plugin.getPluginConfig().set("HideRewardDisplayInList",false,"Hide the reward display in /aach list.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("IgnoreVerticalDistance")) {    plugin.getPluginConfig().set("IgnoreVerticalDistance",false,"Ignore vertical dimension (Y axis) when calculating distance statistics.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("TablePrefix")) {    plugin.getPluginConfig().set("TablePrefix","",new String[]{"Prefix added to the tables in the database. If you switch from the default tables names (no prefix),","the plugin will attempt an automatic renaming. Otherwise you have to rename your tables manually.","Do a full server reload or restart to make this effective."});    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("BookChronologicalOrder")) {    plugin.getPluginConfig().set("BookChronologicalOrder",true,"Sort pages of the book in chronological order (false for reverse chronological order).");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("DisableSilkTouchBreaks")) {    plugin.getPluginConfig().set("DisableSilkTouchBreaks",false,"Do not take into accound items broken with Silk Touch for the Breaks achievements.");    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("ObfuscateProgressiveAchievements")) {    plugin.getPluginConfig().set("ObfuscateProgressiveAchievements",false,new String[]{"Obfuscate progressive achievements:","For categories with a series of related achievements where the only thing changing is the number of times","the event has occurred, show achievements that have been obtained and show the next obtainable achievement,","but obfuscate the additional achievements. In order for this to work properly, achievements must be sorted","in order of increasing difficulty. For example, under Places, stone, the first achievement could have a","target of 100 stone,# the second 500 stone, and the third 1000 stone.  When ObfuscateProgressiveAchievements","is true, initially only the 100 stone achievement will be readable in the GUI.  Once 100 stone have been placed,","the 500 stone achievement will become legible."});    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("DisableSilkTouchOreBreaks")) {    plugin.getPluginConfig().set("DisableSilkTouchOreBreaks",false,new String[]{"Do not take into account ores broken with Silk Touch for the Breaks achievements.","DisableSilkTouchBreaks takes precedence over this."});    updateDone=true;  }  if (!plugin.getPluginConfig().getKeys(false).contains("LanguageFileName")) {    plugin.getPluginConfig().set("LanguageFileName","lang.yml","Name of the language file.");    updateDone=true;  }  if (updateDone) {    try {      plugin.getPluginConfig().saveConfig();      plugin.getPluginConfig().reloadConfig();    } catch (    IOException e) {      plugin.getLogger().log(Level.SEVERE,"Error while saving changes to the configuration file: ",e);      plugin.setSuccessfulLoad(false);    }  }}  }
class C{  public double outputValue(NeuralNode node){  double[] weights=node.getWeights();  NeuralConnection[] inputs=node.getInputs();  double value=weights[0];  for (int noa=0; noa < node.getNumInputs(); noa++) {    value+=inputs[noa].outputValue(true) * weights[noa + 1];  }  return value;}  }
class C{  public void insertHandler(Class<?> restrictionClass,H handler){  handlers.add(new Pair<Class<?>,H>(restrictionClass,handler));}  }
class C{  public void testEndDelimiter() throws Exception {  byte[] delim=array(F.t(wrap(2),8));  byte[] data=array(F.t(wrap(1),8),F.t(delim,1));  assertSplit(0,4,0,16,data,delim);  assertSplit(0,8,0,16,data,delim);  assertSplit(0,12,0,16,data,delim);  assertSplit(0,16,0,16,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);  assertSplitNull(2,10,data,delim);  assertSplitNull(2,14,data,delim);  assertSplitNull(8,4,data,delim);  assertSplitNull(8,8,data,delim);  assertSplitNull(10,2,data,delim);  assertSplitNull(10,6,data,delim);}  }
class C{  public CreateIndexRequestBuilder addMapping(String type,Object... source){  request.mapping(type,source);  return this;}  }
class C{  public SnmpAcl(String Owner,String aclFileName) throws UnknownHostException, IllegalArgumentException {  trapDestList=new Hashtable<InetAddress,Vector<String>>();  informDestList=new Hashtable<InetAddress,Vector<String>>();  owner=new PrincipalImpl();  try {    acl=new AclImpl(owner,Owner);    AclEntry ownEntry=new AclEntryImpl(owner);    ownEntry.addPermission(READ);    ownEntry.addPermission(WRITE);    acl.addEntry(owner,ownEntry);  } catch (  NotOwnerException ex) {    if (SNMP_LOGGER.isLoggable(Level.FINEST)) {      SNMP_LOGGER.logp(Level.FINEST,SnmpAcl.class.getName(),"SnmpAcl(String,String)","Should never get NotOwnerException as the owner " + "is built in this constructor");    }  }  if (aclFileName == null)   setDefaultFileName(); else   setAuthorizedListFile(aclFileName);  readAuthorizedListFile();}  }
class C{  public TreeNode inorderSuccessor(TreeNode root,TreeNode p){  if (root == null) {    return null;  }  if (root.val <= p.val) {    return inorderSuccessor(root.right,p);  } else {    TreeNode succ=inorderSuccessor(root.left,p);    return succ == null ? root : succ;  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getCurrFile();}  }
class C{  void handleSelectionEvent(int eventType,float posXPix,float posYPix){  boolean shouldHandleSelection=false;switch (eventType) {case SelectionEventType.SELECTION_HANDLES_SHOWN:    mWasTapGestureDetected=false;  mSelectionType=SelectionType.LONG_PRESS;shouldHandleSelection=true;break;case SelectionEventType.SELECTION_HANDLES_CLEARED:mHandler.handleSelectionDismissal();resetAllStates();break;case SelectionEventType.SELECTION_HANDLE_DRAG_STOPPED:shouldHandleSelection=mShouldHandleSelectionModification;break;case SelectionEventType.SELECTION_ESTABLISHED:mIsSelectionEstablished=true;break;case SelectionEventType.SELECTION_DISSOLVED:mIsSelectionEstablished=false;break;default :}if (shouldHandleSelection) {ContentViewCore baseContentView=getBaseContentView();if (baseContentView != null) {String selection=baseContentView.getSelectedText();if (selection != null) {mX=posXPix;mY=posYPix;mSelectedText=selection;handleSelection(selection,SelectionType.LONG_PRESS);}}}}  }
class C{  private boolean checkReply(final EchoBreakpointsRemovedReply reply){  final List<Pair<RelocatedAddress,Integer>> receivedAddresses=reply.getAddresses();  if (receivedAddresses.size() != m_removedAddresses.size()) {    for (    final Pair<RelocatedAddress,Integer> pair : receivedAddresses) {      final RelocatedAddress receivedAddress=pair.first();      if (!m_removedAddresses.contains(DebuggerHelpers.getBreakpointAddress(m_debugger,receivedAddress))) {        throw new IllegalStateException("IE00680: the number of breakpoints removed differs from the number of received breakpoints in the debugger reply\n" + "The first breakpoint address missmatch is:" + DebuggerHelpers.getBreakpointAddress(m_debugger,receivedAddress));      }    }  }  return true;}  }
class C{  public void ReInit(CharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public Editor edit() throws IOException {  return LruDiskCache.this.editByDiskKey(diskKey,sequenceNumber);}  }
class C{  private static void checkParameters(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  if (dataset == null || renderer == null || dataset.getSeriesCount() != renderer.getSeriesRendererCount()) {    throw new IllegalArgumentException("Dataset and renderer should be not null and should have the same number of series");  }}  }
class C{  public PositionLayer(ImageView icon,double translateX,double translateY){  this.icon=icon;  this.icon.setVisible(false);  this.iconTranslateX=translateX;  this.iconTranslateY=translateY;  getChildren().add(icon);}  }
class C{  @Deprecated public static void encode(String s,Appendable out) throws IOException {  try {    encode(s,"UTF-8",out);  } catch (  UnsupportedEncodingException e) {    throw new AssertionError(e);  }}  }
class C{  public void dismissComplete(){  if (isShowing()) {    mShowing=false;    try {      mWindowManager.removeViewImmediate(mPopupView);    }  finally {    }  }}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public String toString(){  StringBuffer temp=new StringBuffer();  if (m_transformationDictionary != null) {    temp.append(m_transformationDictionary);  }  temp.append("Mining schema:\n\n");  for (  MiningFieldMetaInfo m : m_miningMeta) {    temp.append(m + "\n");  }  if (m_derivedMeta.size() > 0) {    temp.append("\nDerived fields:\n\n");    for (    DerivedFieldMetaInfo d : m_derivedMeta) {      temp.append(d + "\n");    }  }  temp.append("\n");  return temp.toString();}  }
class C{  public Cache(){  this(28,9);}  }
class C{  public String toString(){  return this.getClass().getSimpleName() + " timestamp=" + timestamp;}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  public TraceReactionWillFireItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  RegisterSpecList ssaSetToSpecs(IntSet ssaSet){  RegisterSpecList result=new RegisterSpecList(ssaSet.elements());  IntIterator iter=ssaSet.iterator();  int i=0;  while (iter.hasNext()) {    result.set(i++,getDefinitionSpecForSsaReg(iter.next()));  }  return result;}  }
class C{  public long valueAt(int index){  return mValues[index];}  }
class C{  private void readObject(){}  }
class C{  public float lengthSquared(){  float x=this.m[0];  float y=this.m[1];  float z=this.m[2];  float result=x * x + y * y + z * z;  return result;}  }
class C{  public int indexOf(int value){  int ret=binarysearch(value);  return ret >= 0 ? ret : -1;}  }
class C{  public static boolean isArray(Object obj){  return (obj != null && obj.getClass().isArray());}  }
class C{  boolean checkSignature(String filename,String signature){  if ((ks == null) || (signature == null)) {    System.out.println("No signature for " + filename);    return false;  }  try {    Signature sig=Signature.getInstance("SHA1withRSA");    sig.initVerify(ks.getCertificate(ClientGameConfiguration.get("UPDATE_CERT_NAME")).getPublicKey());    FileInputStream datafis=new FileInputStream(filename);    InputStream buf=new BufferedInputStream(datafis);    byte[] temp=new byte[1024];    int length=0;    try {      while (buf.available() != 0) {        length=buf.read(temp);        sig.update(temp,0,length);      }    }  finally {      buf.close();    }    boolean isVaild=sig.verify(hexStringToByteArray(signature));    System.out.println("Validated " + filename + ": "+ isVaild);    return isVaild;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  private BasicStats createStats(){  BasicStats stats=new BasicStats("spoof",1f);  stats.setNumberOfDocuments(NUMBER_OF_DOCUMENTS);  stats.setNumberOfFieldTokens(NUMBER_OF_FIELD_TOKENS);  stats.setAvgFieldLength(AVG_FIELD_LENGTH);  stats.setDocFreq(DOC_FREQ);  stats.setTotalTermFreq(TOTAL_TERM_FREQ);  return stats;}  }
class C{  public void validateBusinessObjectDataKey(String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedBusinessObjectDataPartitionValue,List<String> expectedBusinessObjectDataSubPartitionValues,Integer expectedBusinessObjectDataVersion,BusinessObjectDataKey actualBusinessObjectDataKey){  assertNotNull(actualBusinessObjectDataKey);  assertEquals(expectedNamespace,actualBusinessObjectDataKey.getNamespace());  assertEquals(expectedBusinessObjectDefinitionName,actualBusinessObjectDataKey.getBusinessObjectDefinitionName());  assertEquals(expectedBusinessObjectFormatUsage,actualBusinessObjectDataKey.getBusinessObjectFormatUsage());  assertEquals(expectedBusinessObjectFormatFileType,actualBusinessObjectDataKey.getBusinessObjectFormatFileType());  assertEquals(expectedBusinessObjectFormatVersion,actualBusinessObjectDataKey.getBusinessObjectFormatVersion());  assertEquals(expectedBusinessObjectDataPartitionValue,actualBusinessObjectDataKey.getPartitionValue());  assertEquals(expectedBusinessObjectDataSubPartitionValues,actualBusinessObjectDataKey.getSubPartitionValues());  assertEquals(expectedBusinessObjectDataVersion,actualBusinessObjectDataKey.getBusinessObjectDataVersion());}  }
class C{  public LongSparseArrayDataRow(){  this(0);}  }
class C{  @Override public int supportedSpeedModes(){  return (jmri.DccThrottle.SpeedStepMode128 | jmri.DccThrottle.SpeedStepMode28 | jmri.DccThrottle.SpeedStepMode27| jmri.DccThrottle.SpeedStepMode14);}  }
class C{  private void adjustAspectRatio(int videoWidth,int videoHeight){  int viewWidth=mTextureView.getWidth();  int viewHeight=mTextureView.getHeight();  double aspectRatio=(double)videoHeight / videoWidth;  int newWidth, newHeight;  if (viewHeight > (int)(viewWidth * aspectRatio)) {    newWidth=viewWidth;    newHeight=(int)(viewWidth * aspectRatio);  } else {    newWidth=(int)(viewHeight / aspectRatio);    newHeight=viewHeight;  }  int xoff=(viewWidth - newWidth) / 2;  int yoff=(viewHeight - newHeight) / 2;  Log.v(TAG,"video=" + videoWidth + "x"+ videoHeight+ " view="+ viewWidth+ "x"+ viewHeight+ " newView="+ newWidth+ "x"+ newHeight+ " off="+ xoff+ ","+ yoff);  Matrix txform=new Matrix();  mTextureView.getTransform(txform);  txform.setScale((float)newWidth / viewWidth,(float)newHeight / viewHeight);  txform.postTranslate(xoff,yoff);  mTextureView.setTransform(txform);}  }
class C{  public static String toString(Object object,String tagName) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  JSONObject jo;  String key;  Iterator keys;  int length;  String string;  Object value;  if (object instanceof JSONObject) {    if (tagName != null) {      sb.append('<');      sb.append(tagName);      sb.append('>');    }    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      value=jo.opt(key);      if (value == null) {        value="";      }      if (value instanceof String) {        string=(String)value;      } else {        string=null;      }      if ("content".equals(key)) {        if (value instanceof JSONArray) {          ja=(JSONArray)value;          length=ja.length();          for (i=0; i < length; i+=1) {            if (i > 0) {              sb.append('\n');            }            sb.append(escape(ja.get(i).toString()));          }        } else {          sb.append(escape(value.toString()));        }      } else       if (value instanceof JSONArray) {        ja=(JSONArray)value;        length=ja.length();        for (i=0; i < length; i+=1) {          value=ja.get(i);          if (value instanceof JSONArray) {            sb.append('<');            sb.append(key);            sb.append('>');            sb.append(toString(value));            sb.append("</");            sb.append(key);            sb.append('>');          } else {            sb.append(toString(value,key));          }        }      } else       if ("".equals(value)) {        sb.append('<');        sb.append(key);        sb.append("/>");      } else {        sb.append(toString(value,key));      }    }    if (tagName != null) {      sb.append("</");      sb.append(tagName);      sb.append('>');    }    return sb.toString();  } else {    if (object.getClass().isArray()) {      object=new JSONArray(object);    }    if (object instanceof JSONArray) {      ja=(JSONArray)object;      length=ja.length();      for (i=0; i < length; i+=1) {        sb.append(toString(ja.opt(i),tagName == null ? "array" : tagName));      }      return sb.toString();    } else {      string=(object == null) ? "null" : escape(object.toString());      return (tagName == null) ? "\"" + string + "\"" : (string.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ string+ "</"+ tagName+ ">";    }  }}  }
class C{  public void addSelectionListener(final SelectionListener listener){  if (listener == null) {    return;  }  addListener(SWT.Selection,new TypedListener(listener));}  }
class C{  public DateMidnight withYearOfEra(int yearOfEra){  return withMillis(getChronology().yearOfEra().set(getMillis(),yearOfEra));}  }
class C{  public static long nanoTime(){  return SysCall.sysCall.sysNanoTime();}  }
class C{  protected void decode(BytesRef buf,IntsRef ordinals){  if (ordinals.ints.length < buf.length) {    ordinals.ints=ArrayUtil.grow(ordinals.ints,buf.length);  }  ordinals.offset=0;  ordinals.length=0;  int upto=buf.offset + buf.length;  int value=0;  int offset=buf.offset;  int prev=0;  while (offset < upto) {    byte b=buf.bytes[offset++];    if (b >= 0) {      ordinals.ints[ordinals.length]=((value << 7) | b) + prev;      value=0;      prev=ordinals.ints[ordinals.length];      ordinals.length++;    } else {      value=(value << 7) | (b & 0x7F);    }  }}  }
class C{  public void transformPoints(int pointSize,float[] in,int srcPos,float[] out,int destPos,int numPoints){switch (type) {case TYPE_TRANSLATION:    impl.translatePoints(pointSize,translateX,translateY,translateZ,in,srcPos,out,destPos,numPoints);  break;case TYPE_SCALE:impl.scalePoints(pointSize,scaleX,scaleY,scaleZ,in,srcPos,out,destPos,numPoints);break;case TYPE_IDENTITY:System.arraycopy(in,srcPos,out,destPos,numPoints * pointSize);break;default :impl.transformPoints(getNativeTransform(),pointSize,in,srcPos,out,destPos,numPoints);break;}}  }
class C{  private static void patternMatchesTest() throws Exception {  if (!Pattern.matches(toSupplementaries("ulb(c*)"),toSupplementaries("ulbcccccc")))   failCount++;  if (Pattern.matches(toSupplementaries("ulb(c*)"),toSupplementaries("zzzulbcccccc")))   failCount++;  if (Pattern.matches(toSupplementaries("ulb(c*)"),toSupplementaries("ulbccccccdef")))   failCount++;  if (!Pattern.matches(toSupplementaries("ulb(c*)"),toSupplementaries("ulbcccccc")))   failCount++;  if (Pattern.matches(toSupplementaries("ulb(c*)"),toSupplementaries("zzzulbcccccc")))   failCount++;  if (Pattern.matches(toSupplementaries("ulb(c*)"),toSupplementaries("ulbccccccdef")))   failCount++;  report("Pattern Matches");}  }
class C{  protected boolean isContinue(){  State cs=this.completed.get(this.completed.size() - 1);  if ((cs.end - cs.start) <= 2)   return false;  for (int i=cs.start; i < cs.end; i++) {    char c=text[i];    if (c != '.')     return false;  }  return true;}  }
class C{  public GridLines(@ArgumentsBundle.EdgeAffinity int edgeAffinity,@FloatRange(from=0f,fromInclusive=false) float step){  this();  mStep=step;  mEdgeAffinity=edgeAffinity;  mPaint.setColor(DEFAULT_GRID_COLOR);}  }
class C{  public double divideBy(Resource other) throws RuntimeException {  if (other.getCpu() == 0 || other.getRam() == 0 || other.getDisk() == 0) {    throw new RuntimeException("Division by 0.");  } else {    double cpuFactor=Math.ceil(this.getCpu() / other.getCpu());    double ramFactor=Math.ceil((double)this.getRam() / other.getRam());    double diskFactor=Math.ceil((double)this.getDisk() / other.getDisk());    return Math.max(cpuFactor,Math.max(ramFactor,diskFactor));  }}  }
class C{  protected void sendKeepAliveMessage() throws StunException {  for (  LocalCandidate candidate : getCandidates())   if (sendKeepAliveMessage(candidate))   break;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  public static int value(String s){  return types.getValue(s);}  }
class C{  public CompletableFuture<Tuple2<UInteger[],UInteger[]>> invoke(UInteger subscriptionId){  Variant[] inputArguments=new Variant[]{new Variant(subscriptionId)};  return invoke(inputArguments).thenCompose(null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.857 -0500",hash_original_method="D7304055711653AFAB319201D507D88D",hash_generated_method="5D2F5BB17E0BBABB512766F7522CD9F0") public static Boolean valueOf(String string){  return new Boolean(string.getTaintBoolean());}  }
class C{  private void initWidget(){  this.widgetCard=(ImageView)findViewById(R.id.widget_day_card);  widgetCard.setVisibility(View.GONE);  this.widgetIcon=(ImageView)findViewById(R.id.widget_day_icon);  this.widgetWeather=(TextView)findViewById(R.id.widget_day_weather);  this.widgetTemp=(TextView)findViewById(R.id.widget_day_temp);  this.widgetRefreshTime=(TextView)findViewById(R.id.widget_day_refreshTime);  ImageView wallpaper=(ImageView)findViewById(R.id.activity_create_widget_day_wall);  wallpaper.setImageDrawable(WallpaperManager.getInstance(this).getDrawable());  this.container=(CoordinatorLayout)findViewById(R.id.activity_create_widget_day_container);  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text,nameList);  adapter.setDropDownViewResource(R.layout.spinner_text);  Spinner locationSpinner=(Spinner)findViewById(R.id.activity_create_widget_day_spinner);  locationSpinner.setAdapter(adapter);  locationSpinner.setOnItemSelectedListener(this);  this.showCardSwitch=(Switch)findViewById(R.id.activity_create_widget_day_showCardSwitch);  showCardSwitch.setOnCheckedChangeListener(new ShowCardSwitchCheckListener());  this.hideRefreshTimeSwitch=(Switch)findViewById(R.id.activity_create_widget_day_hideRefreshTimeSwitch);  hideRefreshTimeSwitch.setOnCheckedChangeListener(new HideRefreshTimeSwitchCheckListener());  this.blackTextSwitch=(Switch)findViewById(R.id.activity_create_widget_day_blackTextSwitch);  blackTextSwitch.setOnCheckedChangeListener(new BlackTextSwitchCheckListener());  Button doneButton=(Button)findViewById(R.id.activity_create_widget_day_doneButton);  doneButton.setOnClickListener(this);}  }
class C{  public Geometry returnPolygon(){  Coordinate[] ring=new Coordinate[this.coordinates.size()];  for (int i=0; i < ring.length; i++)   ring[i]=this.coordinates.get(i);  LinearRing shell=new GeometryFactory().createLinearRing(ring);  Polygon polygon=new GeometryFactory().createPolygon(shell,null);  return polygon;}  }
class C{  private SoundResources(File privateDir){  SoundPool soundPool=new SoundPool(MAX_STREAMS,AudioManager.STREAM_MUSIC,0);  soundPool.setOnLoadCompleteListener(this);  generateSoundFiles(soundPool,privateDir);  if (false) {    try {      Thread.sleep(1000);    } catch (    InterruptedException ie) {    }    for (int i=0; i < NUM_SOUNDS; i++) {      mSounds[i].play();      try {        Thread.sleep(800);      } catch (      InterruptedException ie) {      }    }  }}  }
class C{  public boolean delete(){  if (file.exists()) {    file.delete();    if (Cfg.DEBUG) {      Check.ensures(!file.exists(),"File should be deleted");    }    return true;  }  return false;}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType,Icon icon){}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(TITLE).setVisible(false);  builder.addAttribute(HREF);  builder.addElement(Accept.KEY).setCardinality(Cardinality.MULTIPLE);  builder.addElement(Categories.KEY).setCardinality(Cardinality.MULTIPLE);  builder.addElement(Source.TITLE).setRequired(true);}  }
class C{  private void determineSelectedRange(){  Instances inputFormat=getInputFormat();  if (m_SelectedRange == null) {    StringBuffer fields=new StringBuffer();    for (int j=0; j < inputFormat.numAttributes(); j++) {      if (inputFormat.attribute(j).type() == Attribute.STRING) {        fields.append((j + 1) + ",");      }    }    m_SelectedRange=new Range(fields.toString());  }  m_SelectedRange.setUpper(inputFormat.numAttributes() - 1);  StringBuffer fields=new StringBuffer();  for (int j=0; j < inputFormat.numAttributes(); j++) {    if (m_SelectedRange.isInRange(j) && inputFormat.attribute(j).type() == Attribute.STRING) {      fields.append((j + 1) + ",");    }  }  m_SelectedRange.setRanges(fields.toString());  m_SelectedRange.setUpper(inputFormat.numAttributes() - 1);}  }
class C{  public CF3(){  this(10);}  }
class C{  public ReferenceVectorGuidedPopulation(int numberOfObjectives,int divisions,double alpha,Iterable<? extends Solution> iterable){  super(iterable);  this.numberOfObjectives=numberOfObjectives;  this.divisionsOuter=divisions;  this.divisionsInner=0;  this.alpha=alpha;  initialize();}  }
class C{  public IllegalAccessError(){  super();}  }
class C{  private void invalidateAxisExtrema(){  axisMin.clear();  axisMax.clear();}  }
class C{  private static Rop throwBadType(TypeBearer type){  throw new IllegalArgumentException("bad type: " + type);}  }
class C{  public ZDT5(){  super(11);}  }
class C{  public static boolean isSameSentence(JCas aJcas,int aReferenceOffset,int aCompareOffset){  if (aReferenceOffset == aCompareOffset) {    return true;  }  int offset1=Math.min(aReferenceOffset,aCompareOffset);  int offset2=Math.max(aReferenceOffset,aCompareOffset);  Iterator<Sentence> si=JCasUtil.iterator(aJcas,Sentence.class);  while (si.hasNext()) {    Sentence s=si.next();    if (s.getBegin() <= offset1 && offset1 <= s.getEnd()) {      return s.getBegin() <= offset2 && offset2 <= s.getEnd();    }    if (offset1 < s.getBegin()) {      return false;    }  }  return false;}  }
class C{  @Override public void buildClassifier(Instances train) throws Exception {  getCapabilities().testWithFail(train);  train=new Instances(train);  train.deleteWithMissingClass();  m_ReplaceMissingValues=new ReplaceMissingValues();  m_ReplaceMissingValues.setInputFormat(train);  train=Filter.useFilter(train,m_ReplaceMissingValues);  m_AttFilter=new RemoveUseless();  m_AttFilter.setInputFormat(train);  train=Filter.useFilter(train,m_AttFilter);  m_NominalToBinary=new NominalToBinary();  m_NominalToBinary.setInputFormat(train);  train=Filter.useFilter(train,m_NominalToBinary);  m_structure=new Instances(train,0);  m_ClassIndex=train.classIndex();  m_NumClasses=train.numClasses();  int nK=m_NumClasses - 1;  int nR=m_NumPredictors=train.numAttributes() - 1;  int nC=train.numInstances();  m_Data=new double[nC][nR + 1];  int[] Y=new int[nC];  double[] xMean=new double[nR + 1];  double[] xSD=new double[nR + 1];  double[] sY=new double[nK + 1];  double[] weights=new double[nC];  double totWeights=0;  m_Par=new double[nR + 1][nK];  if (m_Debug) {    System.out.println("Extracting data...");  }  for (int i=0; i < nC; i++) {    Instance current=train.instance(i);    Y[i]=(int)current.classValue();    weights[i]=current.weight();    totWeights+=weights[i];    m_Data[i][0]=1;    int j=1;    for (int k=0; k <= nR; k++) {      if (k != m_ClassIndex) {        double x=current.value(k);        m_Data[i][j]=x;        xMean[j]+=weights[i] * x;        xSD[j]+=weights[i] * x * x;        j++;      }    }    sY[Y[i]]++;  }  if ((totWeights <= 1) && (nC > 1)) {    throw new Exception("Sum of weights of instances less than 1, please reweight!");  }  xMean[0]=0;  xSD[0]=1;  for (int j=1; j <= nR; j++) {    xMean[j]=xMean[j] / totWeights;    if (totWeights > 1) {      xSD[j]=Math.sqrt(Math.abs(xSD[j] - totWeights * xMean[j] * xMean[j]) / (totWeights - 1));    } else {      xSD[j]=0;    }  }  if (m_Debug) {    System.out.println("Descriptives...");    for (int m=0; m <= nK; m++) {      System.out.println(sY[m] + " cases have class " + m);    }    System.out.println("\n Variable     Avg       SD    ");    for (int j=1; j <= nR; j++) {      System.out.println(Utils.doubleToString(j,8,4) + Utils.doubleToString(xMean[j],10,4) + Utils.doubleToString(xSD[j],10,4));    }  }  for (int i=0; i < nC; i++) {    for (int j=0; j <= nR; j++) {      if (xSD[j] != 0) {        m_Data[i][j]=(m_Data[i][j] - xMean[j]) / xSD[j];      }    }  }  if (m_Debug) {    System.out.println("\nIteration History...");  }  double x[]=new double[(nR + 1) * nK];  double[][] b=new double[2][x.length];  for (int p=0; p < nK; p++) {    int offset=p * (nR + 1);    x[offset]=Math.log(sY[p] + 1.0) - Math.log(sY[nK] + 1.0);    b[0][offset]=Double.NaN;    b[1][offset]=Double.NaN;    for (int q=1; q <= nR; q++) {      x[offset + q]=0.0;      b[0][offset + q]=Double.NaN;      b[1][offset + q]=Double.NaN;    }  }  OptObject oO=new OptObject();  oO.setWeights(weights);  oO.setClassLabels(Y);  Optimization opt=null;  if (m_useConjugateGradientDescent) {    opt=new OptEngCG(oO);  } else {    opt=new OptEng(oO);  }  opt.setDebug(m_Debug);  if (m_MaxIts == -1) {    x=opt.findArgmin(x,b);    while (x == null) {      x=opt.getVarbValues();      if (m_Debug) {        System.out.println("First set of iterations finished, not enough!");      }      x=opt.findArgmin(x,b);    }    if (m_Debug) {      System.out.println(" -------------<Converged>--------------");    }  } else {    opt.setMaxIteration(m_MaxIts);    x=opt.findArgmin(x,b);    if (x == null) {      x=opt.getVarbValues();    }  }  m_LL=-opt.getMinFunction();  m_Data=null;  for (int i=0; i < nK; i++) {    m_Par[0][i]=x[i * (nR + 1)];    for (int j=1; j <= nR; j++) {      m_Par[j][i]=x[i * (nR + 1) + j];      if (xSD[j] != 0) {        m_Par[j][i]/=xSD[j];        m_Par[0][i]-=m_Par[j][i] * xMean[j];      }    }  }}  }
class C{  public void removeAllLineHighlights(){  if (lineHighlightManager != null) {    lineHighlightManager.removeAllLineHighlights();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  public String buildUri(String representationId,int segmentNumber,int bandwidth,long time){  StringBuilder builder=new StringBuilder();  for (int i=0; i < identifierCount; i++) {    builder.append(urlPieces[i]);    if (identifiers[i] == REPRESENTATION_ID) {      builder.append(representationId);    } else     if (identifiers[i] == NUMBER_ID) {      builder.append(String.format(identifierFormatTags[i],segmentNumber));    } else     if (identifiers[i] == BANDWIDTH_ID) {      builder.append(String.format(identifierFormatTags[i],bandwidth));    } else     if (identifiers[i] == TIME_ID) {      builder.append(String.format(identifierFormatTags[i],time));    }  }  builder.append(urlPieces[identifierCount]);  return builder.toString();}  }
class C{  public EnableBatteryStatsDump(File logFileAbsoluteLocation){  mLogFileAbsoluteLocation=logFileAbsoluteLocation;}  }
class C{  protected static void remotePutDistributed(String regionName,String entryName,Object value) throws CacheException {  remotePut(regionName,entryName,value,Scope.DISTRIBUTED_NO_ACK);}  }
class C{  public RegisterSpec withSimpleType(){  TypeBearer orig=type;  Type newType;  if (orig instanceof Type) {    newType=(Type)orig;  } else {    newType=orig.getType();  }  if (newType.isUninitialized()) {    newType=newType.getInitializedType();  }  if (newType == orig) {    return this;  }  return makeLocalOptional(reg,newType,local);}  }
class C{  public static String joinSizeTagToKey(String key,String tag){  return new StringBuilder(key).append(SIZE_SP).append(tag).toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.450 -0400",hash_original_method="20DEFBD5799CE860E02C4A46D8229CF6",hash_generated_method="4563B9EF51ED2CB596901FE12F4F0D2E") public WildcardFileFilter(List<String> wildcards,IOCase caseSensitivity){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard list must not be null");  }  this.wildcards=wildcards.toArray(new String[wildcards.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public Project createProject(String workspace,String name,ProjectConfig projectConfig,Map<String,String> options,String visibility) throws ConflictException, ForbiddenException, ServerException, NotFoundException {  final FolderEntry myRoot=getProjectsRoot(workspace);  return createProjectInFolder(myRoot,name,projectConfig,options,visibility);}  }
class C{  public Class loadClass(final String name,boolean lookupScriptFiles,boolean preferClassOverScript,boolean resolve) throws ClassNotFoundException, CompilationFailedException {  Class cls=getClassCacheEntry(name);  boolean recompile=isRecompilable(cls);  if (!recompile)   return cls;  ClassNotFoundException last=null;  try {    Class parentClassLoaderClass=super.loadClass(name,resolve);    if (cls != parentClassLoaderClass)     return parentClassLoaderClass;  } catch (  ClassNotFoundException cnfe) {    last=cnfe;  }catch (  NoClassDefFoundError ncdfe) {    if (ncdfe.getMessage().indexOf("wrong name") > 0) {      last=new ClassNotFoundException(name);    } else {      throw ncdfe;    }  }  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    String className=name.replace('/','.');    int i=className.lastIndexOf('.');    if (i != -1 && !className.startsWith("sun.reflect.")) {      sm.checkPackageAccess(className.substring(0,i));    }  }  if (cls != null && preferClassOverScript)   return cls;  if (lookupScriptFiles) {    try {      final Class classCacheEntry=getClassCacheEntry(name);      if (classCacheEntry != cls)       return classCacheEntry;      URL source=resourceLoader.loadGroovySource(name);      Class oldClass=cls;      cls=null;      cls=recompile(source,name,oldClass);    } catch (    IOException ioe) {      last=new ClassNotFoundException("IOException while opening groovy source: " + name,ioe);    } finally {      if (cls == null) {        removeClassCacheEntry(name);      } else {        setClassCacheEntry(cls);      }    }  }  if (cls == null) {    if (last == null)     throw new AssertionError(true);    throw last;  }  return cls;}  }
class C{  public void addArrayUniqueId(java.lang.String param){  if (localArrayUniqueId == null) {    localArrayUniqueId=new java.lang.String[]{};  }  localArrayUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localArrayUniqueId);  list.add(param);  this.localArrayUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void startPacket(int seqNo) throws IOException {  startPacket(seqNo,true);}  }
class C{  public static String generateNameForClientMsgsRegion(int id){  return ClientSubscriptionConfigImpl.CLIENT_SUBSCRIPTION + "_" + id;}  }
class C{  public static boolean isServerError(int statusCode){  if (statusCode >= 500)   return true; else   return false;}  }
class C{  public Max3(){  super("max3",3);}  }
class C{  public static boolean isSdCardMounted(){  boolean externalStorageAvailable=false;  final String state=Environment.getExternalStorageState();  externalStorageAvailable=Environment.MEDIA_MOUNTED.equals(state);  return externalStorageAvailable;}  }
class C{  private static boolean compareInsns(BasicBlock a,BasicBlock b){  return a.getInsns().contentEquals(b.getInsns());}  }
class C{  public NATURAL_INNER_JOIN NATURAL_INNER_JOIN(String tableToJoin){  return new NATURAL_INNER_JOIN(this,tableToJoin);}  }
class C{  public static String[] decomposeSuperCallName(String origName){  if (origName.contains(SUPER_TRAIT_METHOD_PREFIX)) {    int endIndex=origName.indexOf(SUPER_TRAIT_METHOD_PREFIX);    String tName=origName.substring(0,endIndex).replace('_','.').replace("..","_");    String fName=origName.substring(endIndex + SUPER_TRAIT_METHOD_PREFIX.length());    return new String[]{tName,fName};  }  return null;}  }
class C{  private EventNode read() throws Exception {  XMLEvent event=reader.nextEvent();  if (!event.isEndDocument()) {    if (event.isStartElement()) {      return start(event);    }    if (event.isCharacters()) {      return text(event);    }    if (event.isEndElement()) {      return end();    }    return read();  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.739 -0500",hash_original_method="574E98E1F1761FC0DC94CE21F83FBF8C",hash_generated_method="BFD51DB955FF948501E9BC1252656348") public void windowDismissed(IBinder appWindowToken){  checkFocus();synchronized (mH) {    if (mServedView != null && mServedView.getWindowToken() == appWindowToken) {      finishInputLocked();    }  }}  }
class C{  int useCount(Name n){  int ni=n.index, nmax=names.length;  int end=lastUseIndex(n);  if (end < 0)   return 0;  int count=0;  if (end == nmax) {    count++;    end--;  }  int beg=n.index() + 1;  if (beg < arity)   beg=arity;  for (int i=beg; i <= end; i++) {    count+=names[i].useCount(n);  }  return count;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.681 -0500",hash_original_method="9948141C64D53CA8E17E7FD2EBA08DA8",hash_generated_method="CD57B10B47E4384F9C72F867F5045C16") private GroupMembership(){}  }
class C{  public void fillDefaultValues(){  STDPRule template=new STDPRule();  tfTauPlus.setText("" + template.getTau_plus());  tfTauMinus.setText("" + template.getTau_minus());  tfWPlus.setText("" + template.getW_plus());  tfWMinus.setText("" + template.getW_minus());  tfLearningRate.setText("" + template.getLearningRate());}  }
class C{  public void dump(String infoMsg){  storage.getOnlineMembers();  storage.getOfflineMembers();  storage.getOfflineAndEqualMembers();  storage.getMyInitializingID();  storage.getMyPersistentID();  final StringBuilder buf=new StringBuilder(2000);  if (infoMsg != null) {    buf.append(infoMsg);    buf.append(": ");  }  buf.append("\nMY PERSISTENT ID:\n");  buf.append(storage.getMyPersistentID());  buf.append("\nMY INITIALIZING ID:\n");  buf.append(storage.getMyInitializingID());  buf.append("\nONLINE MEMBERS:\n");  for (  PersistentMemberID id : storage.getOnlineMembers()) {    buf.append("\t");    buf.append(id);    buf.append("\n");  }  buf.append("\nOFFLINE MEMBERS:\n");  for (  PersistentMemberID id : storage.getOfflineMembers()) {    buf.append("\t");    buf.append(id);    buf.append("\n");  }  buf.append("\nOFFLINE AND EQUAL MEMBERS:\n");  for (  PersistentMemberID id : storage.getOfflineAndEqualMembers()) {    buf.append("\t");    buf.append(id);    buf.append("\n");  }  logger.debug(buf.toString());}  }
class C{  private boolean addSpeechRuleLocked(EventSpeechRule speechRule){  final String packageName=speechRule.getPackageName();  List<EventSpeechRule> packageSpeechRules=mPackageNameToSpeechRulesMap.get(packageName);  if (packageSpeechRules == null) {    packageSpeechRules=new LinkedList<>();    mPackageNameToSpeechRulesMap.put(packageName,packageSpeechRules);  }  return packageSpeechRules.add(speechRule);}  }
class C{  protected void createBlankDataSourceFile(String path){  getFileHandler().writeTextFile(path,"<jdbc-data-source xmlns=\"http://www.bea.com/ns/weblogic/90\"/>","UTF-8");}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override protected void createLabels(){  for (int i=1; i <= this.rings.size(); i++) {    this.addLabel(String.valueOf(i));  }}  }
class C{  private VOUserDetails createTestUser(){  VOUserDetails user=new VOUserDetails();  user.setOrganizationId(ORGANIZATION_ID);  user.setUserId(ORGANIZATION_ID + "usera");  user.setEMail("someMail@somehost.com");  user.setFirstName("Harald");  user.setLastName("Wilhelm");  user.setLocale(Locale.ENGLISH.toString());  return user;}  }
class C{  protected String rtrim(String s){  if ((s == null) || (s.length() == 0)) {    return s;  }  int pos=s.length();  while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {    --pos;  }  return s.substring(0,pos);}  }
class C{  BinarySearchTreeNode<E> balance(BinarySearchTreeNode<E> node){  if (node == null)   return null;  if (this.getHeight(node) < 2)   return node;  BinarySearchTreeNode<E> p=node.parent;  BinarySearchTreeNode<E> a=node.left;  BinarySearchTreeNode<E> b=node.right;  int ah=this.getHeight(a);  int bh=this.getHeight(b);  int balance=ah - bh;  if (balance > 1) {    int ach=this.getHeight(a.right);    if (ach > 1) {      BinarySearchTreeNode<E> c=a.right;      a.right=c.left;      if (c.left != null)       c.left.parent=a;      c.left=a;      a.parent=c;      node.left=c;      c.parent=node;    }    BinarySearchTreeNode<E> c=node.left;    node.left=c.right;    if (c.right != null)     c.right.parent=node;    c.right=node;    c.parent=node.parent;    node.parent=c;    if (p != null) {      if (p.left == node) {        p.left=c;      } else {        p.right=c;      }    } else {      this.root=c;    }    return c;  }  if (balance < -1) {    int bch=this.getHeight(b.left);    if (bch > 1) {      BinarySearchTreeNode<E> d=b.left;      b.left=d.right;      if (d.right != null)       d.right.parent=b;      d.right=b;      b.parent=d;      node.right=d;      d.parent=node;    }    BinarySearchTreeNode<E> d=node.right;    node.right=d.left;    if (d.left != null)     d.left.parent=node;    d.left=node;    d.parent=node.parent;    node.parent=d;    if (p != null) {      if (p.left == node) {        p.left=d;      } else {        p.right=d;      }    } else {      this.root=d;    }    return d;  }  return node;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelisttraverselist.class,args);}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  private int rdHexDigit(){  int b=0;  try {    b=buffIn.read();    if ((b >= '0') && (b <= '9')) {      b=b - '0';    } else     if ((b >= 'A') && (b <= 'F')) {      b=b - 'A' + 10;    } else     if ((b >= 'a') && (b <= 'f')) {      b=b - 'a' + 10;    } else {      JOptionPane.showMessageDialog(this,"Invalid hex digit at line " + lineNo,"Hex File",JOptionPane.ERROR_MESSAGE);      log.error("Format Error! Invalid hex digit at line " + lineNo);      b=16;    }  } catch (  IOException e) {    JOptionPane.showMessageDialog(this,"I/O Error reading hex file!","Hex File",JOptionPane.ERROR_MESSAGE);    log.error("I/O Error reading hex file!" + e.toString());  }  return (byte)b;}  }
class C{  public static void main(String[] args) throws java.io.FileNotFoundException {  if (args.length == 0) {    String[] newArgs={"words.english.txt","keys_2.txt","keys_3.txt"};    args=newArgs;  }  fullWords=loadStringArray(new File(BASE,args[0]));  performTwoKeys(new File(BASE,args[1]));  performThreeKeys(new File(BASE,args[2]));}  }
class C{  public int size(){  return bufferList.size();}  }
class C{  public void registerCallback(final ObjectFactory<LifecycleCallback> callbackFactory){  callbackFactoryList.add(callbackFactory);}  }
class C{  private boolean checkMandatory(){  log.config("VPayment.checkMandatory");  ValueNamePair vp=(ValueNamePair)paymentCombo.getSelectedItem();  String PaymentRule=vp.getValue();  if (m_onlyRule)   return true;  String CCType=m_CCType;  int C_BankAccount_ID=0;  boolean dataOK=true;  if (PaymentRule.equals(MOrder.PAYMENTRULE_Cash)) {    if (m_Cash_As_Payment) {      KeyNamePair kp=(KeyNamePair)sBankAccountCombo.getSelectedItem();      if (kp != null)       C_BankAccount_ID=kp.getKey();    }  } else   if (PaymentRule.equals(MOrder.PAYMENTRULE_CreditCard)) {    vp=(ValueNamePair)kTypeCombo.getSelectedItem();    if (vp != null)     CCType=vp.getValue();  } else   if (PaymentRule.equals(X_C_Order.PAYMENTRULE_DirectDeposit) || PaymentRule.equals(X_C_Order.PAYMENTRULE_DirectDebit)) {    KeyNamePair bpba=(KeyNamePair)tAccountCombo.getSelectedItem();    if (bpba == null) {      tAccountCombo.setBackground(AdempierePLAF.getFieldBackground_Error());      ADialog.error(m_WindowNo,this,"PaymentBPBankNotFound");      dataOK=false;    }  } else   if (PaymentRule.equals(X_C_Order.PAYMENTRULE_OnCredit)) {  } else   if (PaymentRule.equals(MOrder.PAYMENTRULE_Check)) {    KeyNamePair kp=(KeyNamePair)sBankAccountCombo.getSelectedItem();    if (kp != null)     C_BankAccount_ID=kp.getKey();    String error=MPaymentValidate.validateRoutingNo(sRoutingField.getText());    if (error.length() != 0) {      sRoutingField.setBackground(AdempierePLAF.getFieldBackground_Error());      ADialog.error(m_WindowNo,this,error);      dataOK=false;    }    error=MPaymentValidate.validateAccountNo(sNumberField.getText());    if (error.length() != 0) {      sNumberField.setBackground(AdempierePLAF.getFieldBackground_Error());      ADialog.error(m_WindowNo,this,error);      dataOK=false;    }    error=MPaymentValidate.validateCheckNo(sCheckField.getText());    if (error.length() != 0) {      sCheckField.setBackground(AdempierePLAF.getFieldBackground_Error());      ADialog.error(m_WindowNo,this,error);      dataOK=false;    }  } else {    log.log(Level.SEVERE,"Unknown PaymentRule " + PaymentRule);    ADialog.error(m_WindowNo,this,"Unknown PaymentRule " + PaymentRule);    return false;  }  if (("KTSD".indexOf(PaymentRule) != -1 || (PaymentRule.equals(MOrder.PAYMENTRULE_Cash) && m_Cash_As_Payment)) && C_BankAccount_ID == 0) {    if (C_BankAccount_ID == 0 && (PaymentRule.equals(MOrder.PAYMENTRULE_Check)) || (PaymentRule.equals(MOrder.PAYMENTRULE_Cash) && m_Cash_As_Payment)) {      ADialog.error(m_WindowNo,this,"PaymentNoProcessor");      dataOK=false;    }  }  log.config("OK=" + dataOK);  return dataOK;}  }
class C{  protected void handlePartialCoverHit(Entity entityTarget,Vector<Report> vPhaseReport,HitData hit,Building bldg,int hits,int nCluster,int bldgAbsorbs){  Report r;  if (!bSalvo) {    r=new Report(3405);    r.subject=subjectId;    r.add(toHit.getTableDesc());    r.add(entityTarget.getLocationAbbr(hit));    vPhaseReport.addElement(r);  } else {    Report.addNewline(vPhaseReport);  }  r=new Report(3460);  r.subject=subjectId;  r.add(entityTarget.getShortName());  r.add(entityTarget.getLocationAbbr(hit));  r.indent(2);  vPhaseReport.addElement(r);  int damagableCoverType=LosEffects.DAMAGABLE_COVER_NONE;  Building coverBuilding=null;  Entity coverDropship=null;  Coords coverLoc=null;  if ((toHit.getCover() == LosEffects.COVER_75RIGHT || toHit.getCover() == LosEffects.COVER_75LEFT) || (toHit.getCover() == LosEffects.COVER_HORIZONTAL && toHit.getDamagableCoverTypeSecondary() != LosEffects.DAMAGABLE_COVER_NONE)) {    int hitLoc=hit.getLocation();    if (hitLoc == Mech.LOC_RLEG || hitLoc == Mech.LOC_RT || hitLoc == Mech.LOC_RARM) {      damagableCoverType=toHit.getDamagableCoverTypePrimary();      coverBuilding=toHit.getCoverBuildingPrimary();      coverDropship=toHit.getCoverDropshipPrimary();      coverLoc=toHit.getCoverLocPrimary();    } else {      damagableCoverType=toHit.getDamagableCoverTypeSecondary();      coverBuilding=toHit.getCoverBuildingSecondary();      coverDropship=toHit.getCoverDropshipSecondary();      coverLoc=toHit.getCoverLocSecondary();    }  } else {    damagableCoverType=toHit.getDamagableCoverTypePrimary();    coverBuilding=toHit.getCoverBuildingPrimary();    coverDropship=toHit.getCoverDropshipPrimary();    coverLoc=toHit.getCoverLocPrimary();  }  if (damagableCoverType == LosEffects.DAMAGABLE_COVER_DROPSHIP) {    ToHitData savedToHit=toHit;    int savedAimingMode=waa.getAimingMode();    waa.setAimingMode(IAimingModes.AIM_MODE_NONE);    int savedAimedLocation=waa.getAimedLocation();    waa.setAimedLocation(Entity.LOC_NONE);    boolean savedSalvo=bSalvo;    bSalvo=true;    Targetable origTarget=target;    target=coverDropship;    hits=calcHits(vPhaseReport);    toHit=new ToHitData(0,"",ToHitData.HIT_NORMAL,Compute.targetSideTable(ae,coverDropship));    int sizeBefore=vPhaseReport.size();    r=new Report(3465);    r.subject=subjectId;    r.add(coverDropship.getShortName());    r.newlines++;    vPhaseReport.add(r);    handleEntityDamage(coverDropship,vPhaseReport,bldg,hits,nCluster,bldgAbsorbs);    if (vPhaseReport.elementAt(sizeBefore).newlines > 0)     vPhaseReport.elementAt(sizeBefore).newlines--;    while (sizeBefore < vPhaseReport.size()) {      vPhaseReport.elementAt(sizeBefore).indent(3);      sizeBefore++;    }    toHit=savedToHit;    waa.setAimingMode(savedAimingMode);    waa.setAimedLocation(savedAimedLocation);    bSalvo=savedSalvo;    target=origTarget;  } else   if (damagableCoverType == LosEffects.DAMAGABLE_COVER_BUILDING) {    Targetable origTarget=target;    target=new BuildingTarget(coverLoc,game.getBoard(),false);    hits=calcHits(vPhaseReport);    int nDamage=2 * hits;    Vector<Report> buildingReport=server.damageBuilding(coverBuilding,nDamage," blocks the shot and takes ",coverLoc);    target=origTarget;    for (    Report report : buildingReport) {      report.subject=subjectId;      report.indent();    }    vPhaseReport.addAll(buildingReport);    Vector<Report> infantryReport=server.damageInfantryIn(coverBuilding,nDamage,coverLoc,wtype.getInfantryDamageClass());    for (    Report report : infantryReport) {      report.indent(2);    }    vPhaseReport.addAll(infantryReport);  }  missed=true;}  }
class C{  private void moduleLoaded(){  final List<Section> sectionList=module.getContent().getSections().getSections();  if (sectionList.isEmpty()) {    return;  }  currentSection=sectionList.get(0);  hexViewData=new HexViewDataAdapter(currentSection);  hexView.setData(hexViewData);  final Collection<TypeInstance> instances=module.getContent().getTypeInstanceContainer().getTypeInstances(currentSection);  initializeHighlighting(hexView,virtualAddresses.isSelected(),instances);  sections.setSections(sectionList);  typeDataModel.setTypeInstanceContainer(module.getContent().getTypeInstanceContainer());  typeDataModel.setSection(currentSection);}  }
class C{  public static String asciiBytesToString(byte[] val){  return asciiBytesToString(val,0,val.length);}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public static ZyLabelContent buildContent(final INaviGroupNode node){  Preconditions.checkNotNull(node,"IE01558: Node argument can not be null");  final ZyLabelContent content=new ZyLabelContent(null);  buildContent(content,node);  return content;}  }
class C{  public void genBeanInfo(String packageName,String classname,Hashtable dochash){  String beanClassName="JInternalFrame";  String beanClassObject="javax.swing.JInternalFrame.class";  String beanDescription="<A description of this component>.";  String beanPropertyDescriptors="<createSwingPropertyDescriptor code>";  String classPropertyDescriptors="<createSwingClassPropertyDescriptor code>";  Class cls=getClass(packageName,classname);  if (cls == null) {    messageAndExit("Can't find class: " + classname);  }  PrintStream out=initOutputFile(classname);  BeanInfo beanInfo=null;  BeanDescriptor beanDescriptor=null;  try {    if (cls == javax.swing.JComponent.class) {      beanInfo=Introspector.getBeanInfo(cls);    } else {      beanInfo=Introspector.getBeanInfo(cls,cls.getSuperclass());    }    beanDescriptor=beanInfo.getBeanDescriptor();    beanDescription=beanDescriptor.getShortDescription();  } catch (  IntrospectionException e) {    messageAndExit("Introspection failed for " + cls.getName() + " "+ e);  }  beanClassName=beanDescriptor.getName();  beanClassObject=cls.getName() + ".class";  if (DEBUG) {    System.out.println(">>>>GenSwingBeanInfo class: " + beanClassName);  }  if (dochash.size() > 0) {    if (dochash.containsKey(beanClassName)) {      DocBeanInfo dbi=(DocBeanInfo)dochash.remove(beanClassName);      classPropertyDescriptors=genBeanDescriptor(dbi);      if (DEBUG)       System.out.println("ClassPropertyDescriptors: " + classPropertyDescriptors);      if (!(dbi.desc.equals("null")))       beanDescription=dbi.desc;    } else     beanDescription=beanDescriptor.getShortDescription();  } else   beanDescription=beanDescriptor.getShortDescription();  beanPropertyDescriptors=genPropertyDescriptors(beanInfo,dochash);  int currentIndex=0;  String template=loadTemplate();  while (currentIndex < template.length()) {    int tokenStart=template.indexOf("@(",currentIndex);    if (tokenStart != -1) {      out.print(template.substring(currentIndex,tokenStart));      int tokenEnd=template.indexOf(")",tokenStart);      if (tokenEnd == -1) {        messageAndExit("Bad @(<token>) beginning at " + tokenStart);      }      String token=template.substring(tokenStart + 2,tokenEnd);      if (token.equals(TOK_BEANCLASS)) {        out.print(beanClassName);      } else       if (token.equals(TOK_CLASSDESC)) {        if (!(classPropertyDescriptors.equals("<createSwingClassPropertyDescriptor code>"))) {          printDescriptors(out,classPropertyDescriptors,template,tokenStart);        }      } else       if (token.equals(TOK_BEANPACKAGE)) {        out.print(packageName);      } else       if (token.equals(TOK_BEANOBJECT)) {        out.print(beanClassObject);      } else       if (token.equals(TOK_BEANDESC)) {        out.print(beanDescription);      } else       if (token.equals(TOK_ENUMVARS)) {        out.print(enumcode);      } else       if (token.equals(TOK_PROPDESC)) {        printDescriptors(out,beanPropertyDescriptors,template,tokenStart);      } else       if (token.equals("#")) {      } else {        messageAndExit("Unrecognized token @(" + token + ")");      }      currentIndex=tokenEnd + 1;    } else {      out.print(template.substring(currentIndex,template.length()));      break;    }  }  out.close();}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public static double km(double radians){  return Length.KM.fromRadians(radians);}  }
class C{  public ConjunctionContextGenerator(Element node){  readFeatureParameters(node);}  }
class C{  protected TransitionReactionImpl(){  super();}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractAttr aa=(AbstractAttr)n;  aa.nodeName=nodeName;  aa.unspecified=false;  aa.isIdAttr=d.isId(aa);  return n;}  }
class C{  public static boolean same(double d1,double d2){  if (Double.isNaN(d1)) {    return Double.isNaN(d2);  }  if (d1 == d2)   return true;  if (Double.isInfinite(d1)) {    return false;  }  return value(d1 - d2) == 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.501 -0500",hash_original_method="9CEA4CE8D7F35B00CDC566F3844E42FB",hash_generated_method="45DDFF708E7F5901D1E683C220FA6C8C") public static SIPDialog createFromNOTIFY(SIPClientTransaction subscribeTx,SIPTransaction notifyST){  SIPDialog d=new SIPDialog(notifyST);  d.serverTransactionFlag=false;  d.lastTransaction=subscribeTx;  storeFirstTransactionInfo(d,subscribeTx);  d.terminateOnBye=false;  d.localSequenceNumber=subscribeTx.getCSeq();  SIPRequest not=(SIPRequest)notifyST.getRequest();  d.remoteSequenceNumber=not.getCSeq().getSeqNumber();  d.setDialogId(not.getDialogId(true));  d.setLocalTag(not.getToTag());  d.setRemoteTag(not.getFromTag());  d.setLastResponse(subscribeTx,subscribeTx.getLastResponse());  d.localParty=not.getTo().getAddress();  d.remoteParty=not.getFrom().getAddress();  d.addRoute(not);  d.setState(CONFIRMED_STATE);  return d;}  }
class C{  public boolean generate(Projection proj){  if (!position(proj)) {    Debug.message("omgraphic","OMBitmap: positioning failed in generate!");    return false;  }  if (getNeedToRegenerate() || bitmap == null) {    int[] imagePixels=computePixels(bits);    pixels=imagePixels;    BufferedImage bi=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);    bi.setRGB(0,0,width,height,imagePixels,0,width);    setImage(bi);  }  if (imageFilter != null) {    setImage(filterImage(bitmap));  }  setShape();  setNeedToRegenerate(false);  return true;}  }
class C{  public void testFunctionEscapeSequenceWithWhitespaces() throws Exception {  check("func1()","{ fn func1()}");  check("func1()","{    fn  func1()}");  check("func1()","{ \n fn\nfunc1()}");  checkFail("{ \n func1()}");}  }
class C{  public double nextGamma(double a) throws Exception {  if (a <= 0.0)   throw new Exception("Shape parameter of Gamma distribution" + "must be greater than 0!"); else   if (a == 1.0)   return nextExponential(); else   if (a < 1.0) {    double b=1.0 + Math.exp(-1.0) * a, p, x, condition;    do {      p=b * super.nextDouble();      if (p < 1.0) {        x=Math.exp(Math.log(p) / a);        condition=x;      } else {        x=-Math.log((b - p) / a);        condition=(1.0 - a) * Math.log(x);      }    } while (nextExponential() < condition);    return x;  } else {    double b=a - 1.0, D=Math.sqrt(b), D1, x1, x2, xl, f1, f2, x4, x5, xr, f4, f5, p1, p2, p3, p4;    if (a <= 2.0) {      D1=b / 2.0;      x1=0.0;      x2=D1;      xl=-1.0;      f1=0.0;    } else {      D1=D - 0.5;      x2=b - D1;      x1=x2 - D1;      xl=1.0 - b / x1;      f1=Math.exp(b * Math.log(x1 / b) + 2.0 * D1);    }    f2=Math.exp(b * Math.log(x2 / b) + D1);    x4=b + D;    x5=x4 + D;    xr=1.0 - b / x5;    f4=Math.exp(b * Math.log(x4 / b) - D);    f5=Math.exp(b * Math.log(x5 / b) - 2.0 * D);    p1=2.0 * f4 * D;    p2=2.0 * f2 * D1 + p1;    p3=f5 / xr + p2;    p4=-f1 / xl + p3;    double u, w=Double.MAX_VALUE, x=b, v, xp;    while (Math.log(w) > (b * Math.log(x / b) + b - x) || x < 0.0) {      u=super.nextDouble() * p4;      if (u <= p1) {        w=u / D - f4;        if (w <= 0.0)         return (b + u / f4);        if (w <= f5)         return (x4 + (w * D) / f5);        v=super.nextDouble();        x=x4 + v * D;        xp=2.0 * x4 - x;        if (w >= f4 + (f4 - 1) * (x - x4) / (x4 - b))         return xp;        if (w <= f4 + (b / x4 - 1) * f4 * (x - x4))         return x;        if ((w < 2.0 * f4 - 1.0) || (w < 2.0 * f4 - Math.exp(b * Math.log(xp / b) + b - xp)))         continue;        return xp;      } else       if (u <= p2) {        w=(u - p1) / D1 - f2;        if (w <= 0.0)         return (b - (u - p1) / f2);        if (w <= f1)         return (x1 + w * D1 / f1);        v=super.nextDouble();        x=x1 + v * D1;        xp=2.0 * x2 - x;        if (w >= f2 + (f2 - 1) * (x - x2) / (x2 - b))         return xp;        if (w <= f2 * (x - x1) / D1)         return x;        if ((w < 2.0 * f2 - 1.0) || (w < 2.0 * f2 - Math.exp(b * Math.log(xp / b) + b - xp)))         continue;        return xp;      } else       if (u < p3) {        w=super.nextDouble();        u=(p3 - u) / (p3 - p2);        x=x5 - Math.log(u) / xr;        if (w <= (xr * (x5 - x) + 1.0) / u)         return x;        w=w * f5 * u;      } else {        w=super.nextDouble();        u=(p4 - u) / (p4 - p3);        x=x1 - Math.log(u) / xl;        if (x < 0.0)         continue;        if (w <= (xl * (x1 - x) + 1.0) / u)         return x;        w=w * f1 * u;      }    }    return x;  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x6CF32CB9,version=271) public int sceUsbCamStopVideo(){  stopVideo();  return 0;}  }
class C{  public boolean supportsResultSetHoldability(int holdability) throws SQLException {  return holdability == ResultSet.CLOSE_CURSORS_AT_COMMIT || holdability == ResultSet.HOLD_CURSORS_OVER_COMMIT;}  }
class C{  protected void disassociate(Control item){  Object element=item.getData();  Assert.isNotNull(element);  unmapElement(element,item);  item.setData(null);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public InputDialog(Window owner,String key,InputValidator<String> inputValidator){  this(owner,key,null,inputValidator);}  }
class C{  private static boolean eq(float v1,float v2){  return v1 == v2;}  }
class C{  public static InterProcessLock lockFabric(String fabricId,CoordinatorClient coordinator){  boolean acquired=false;  InterProcessLock lock=getFabricLock(fabricId,coordinator);  try {    acquired=lock.acquire(60,TimeUnit.MINUTES);  } catch (  Exception ex) {    _log.error("Exception locking fabric: " + fabricId);    throw NetworkDeviceControllerException.exceptions.exceptionAcquiringFabricLock(fabricId,ex);  }  if (acquired == false) {    _log.error("Unable to lock fabric lock: " + fabricId);    throw NetworkDeviceControllerException.exceptions.couldNotAcquireFabricLock(fabricId);  }  return lock;}  }
class C{  public static String longToString(long l){  return convertLong(null,l);}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.762 -0500",hash_original_method="29303BD9CA676DA8DA0C6D61C95B80AD",hash_generated_method="4FEA28EE77F11A453C77B10F7808B967") @DSSafe(DSCat.SAFE_LIST) @Deprecated static public MotionEvent obtain(long downTime,long eventTime,int action,int pointerCount,int[] pointerIds,PointerCoords[] pointerCoords,int metaState,float xPrecision,float yPrecision,int deviceId,int edgeFlags,int source,int flags){synchronized (gSharedTempLock) {    ensureSharedTempPointerCapacity(pointerCount);    final PointerProperties[] pp=gSharedTempPointerProperties;    for (int i=0; i < pointerCount; i++) {      pp[i].clear();      pp[i].id=pointerIds[i];    }    return obtain(downTime,eventTime,action,pointerCount,pp,pointerCoords,metaState,0,xPrecision,yPrecision,deviceId,edgeFlags,source,flags);  }}  }
class C{  private static String explainHop(Hop hop,int level) throws DMLRuntimeException {  if (hop.getVisited() == VisitStatus.DONE || (!SHOW_LITERAL_HOPS && hop instanceof LiteralOp)) {    return "";  }  StringBuilder sb=new StringBuilder();  String offset=createOffset(level);  for (  Hop input : hop.getInput())   sb.append(explainHop(input,level));  sb.append(offset);  if (SHOW_DATA_DEPENDENCIES)   sb.append("(" + hop.getHopID() + ") ");  sb.append(hop.getOpString());  if (SHOW_DATA_DEPENDENCIES) {    StringBuilder childs=new StringBuilder();    childs.append(" (");    boolean childAdded=false;    for (    Hop input : hop.getInput())     if (!(input instanceof LiteralOp)) {      childs.append(childAdded ? "," : "");      childs.append(input.getHopID());      childAdded=true;    }    childs.append(")");    if (childAdded)     sb.append(childs.toString());  }  sb.append(" [" + hop.getDim1() + ","+ hop.getDim2()+ ","+ hop.getRowsInBlock()+ ","+ hop.getColsInBlock()+ ","+ hop.getNnz());  if (hop.getUpdateType().isInPlace())   sb.append("," + hop.getUpdateType().toString().toLowerCase());  sb.append("]");  sb.append(" [" + showMem(hop.getInputMemEstimate(),false) + ","+ showMem(hop.getIntermediateMemEstimate(),false)+ ","+ showMem(hop.getOutputMemEstimate(),false)+ " -> "+ showMem(hop.getMemEstimate(),true)+ "]");  if (SHOW_DATA_FLOW_PROPERTIES) {    if (hop.requiresReblock() && hop.requiresCheckpoint())     sb.append(" [rblk,chkpt]"); else     if (hop.requiresReblock())     sb.append(" [rblk]"); else     if (hop.requiresCheckpoint())     sb.append(" [chkpt]");  }  if (hop.getExecType() != null)   sb.append(", " + hop.getExecType());  sb.append('\n');  hop.setVisited(VisitStatus.DONE);  return sb.toString();}  }
class C{  public boolean dropBufferedUpdates(){  versionInfo.blockUpdates();  try {    if (state != State.BUFFERING)     return false;    if (log.isInfoEnabled()) {      log.info("Dropping buffered updates " + this);    }synchronized (this) {      if (tlog != null) {        tlog.rollback(recoveryInfo.positionOfStart);      }    }    state=State.ACTIVE;    operationFlags&=~FLAG_GAP;  } catch (  IOException e) {    SolrException.log(log,"Error attempting to roll back log",e);    return false;  } finally {    versionInfo.unblockUpdates();  }  return true;}  }
class C{  public ExtensionQueryStringAttr(String pluginId,String extensionPointName,String attributeName){  super(pluginId,extensionPointName,attributeName);}  }
class C{  public final Flux<T> repeat(long numRepeat,BooleanSupplier predicate){  return Flux.defer(null);}  }
class C{  public void onMouseMoved(MapMouseEvent ev){}  }
class C{  private void processTable(int xl,int xr,int[] table){  int size=table.length;  for (int s=0; s < size; s+=2) {    xl^=P[0];    for (int i=1; i < ROUNDS; i+=2) {      xr^=F(xl) ^ P[i];      xl^=F(xr) ^ P[i + 1];    }    xr^=P[ROUNDS + 1];    table[s]=xr;    table[s + 1]=xl;    xr=xl;    xl=table[s];  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.686 -0500",hash_original_method="233BD25D9E931F9CFFEABFD8C1F7AD8D",hash_generated_method="89BE60C16A0FDC38DA060BFBC44C081F") public static long max(long l1,long l2){  return l1 > l2 ? l1 : l2;}  }
class C{  private void markActivityUsed(){  ActivityAssigner.instance(this).markActivityUsed(mActivityIndex,getWebappInfo().id());}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public void close(){  if (this.isTemporaryFile) {    File f1=new File(this.headerFile);    f1.delete();    f1=new File(this.dataFile);    f1.delete();  } else {    if (saveChanges) {      if (isDirty) {        writeAllRows();      }      findMinAndMaxVals();      writeHeaderFile();    }  }  grid=null;}  }
class C{  public String globalInfo(){  return "Filters instances according to the value of an attribute.";}  }
class C{  public void fireAnnotationsMoved(Collection<WorkflowAnnotation> annotations){  fireAnnotationsChanged(AnnotationEvent.ANNOTATIONS_MOVED,annotations);}  }
class C{  public Invoke(IPendingServiceCall call){  super(call);}  }
class C{  public boolean isTypePrintFormat(){  return getPrintFormatType().equals(PRINTFORMATTYPE_PrintFormat);}  }
class C{  public void editSensors(){  Collection<Sensor> sensors=selectionModel.getSelection();  if (!sensors.isEmpty()) {    EditSensorsDialog d=new EditSensorsDialog(sensors);    d.setBounds(100,100,450,500);    d.setVisible(true);  }}  }
class C{  public static List<InheritorsStatisticsSearchResult> search(final @NotNull PsiClass superClass,final @NotNull PsiClass aClass,final @NotNull GlobalSearchScope scope,final int minPercentRatio){  final String superClassName=superClass.getName();  final String aClassName=aClass.getName();  final Set<String> disabledNames=new HashSet<String>();  disabledNames.add(aClassName);  disabledNames.add(superClassName);  final Set<InheritorsCountData> collector=new TreeSet<InheritorsCountData>();  final Couple<Integer> collectingResult=collectInheritorsInfo(superClass,collector,disabledNames);  final int allAnonymousInheritors=collectingResult.getSecond();  final int allInheritors=collectingResult.getFirst() + allAnonymousInheritors - 1;  final List<InheritorsStatisticsSearchResult> result=new ArrayList<InheritorsStatisticsSearchResult>();  Integer firstPercent=null;  for (  final InheritorsCountData data : collector) {    final int inheritorsCount=data.getInheritorsCount();    if (inheritorsCount < allAnonymousInheritors) {      break;    }    final int percent=(inheritorsCount * 100) / allInheritors;    if (percent < 1) {      break;    }    if (firstPercent == null) {      firstPercent=percent;    } else     if (percent * minPercentRatio < firstPercent) {      break;    }    final PsiClass psiClass=data.getPsiClass();    final VirtualFile file=psiClass.getContainingFile().getVirtualFile();    if (file != null && scope.contains(file)) {      result.add(new InheritorsStatisticsSearchResult(psiClass,percent));    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:11.964 -0500",hash_original_method="B867FADDD04B9C54EFA439F8C65B2912",hash_generated_method="2AEA6912E716FBBF2B1EB5A0793C0439") private static StringExponentPair initialParse(String s,int length,boolean isDouble){  StringExponentPair result=new StringExponentPair();  if (length == 0) {    throw invalidReal(s,isDouble);  }  result.negative=(s.charAt(0) == '-');  char c=s.charAt(length - 1);  if (c == 'D' || c == 'd' || c == 'F' || c == 'f') {    length--;    if (length == 0) {      throw invalidReal(s,isDouble);    }  }  int end=Math.max(s.indexOf('E'),s.indexOf('e'));  if (end != -1) {    if (end + 1 == length) {      throw invalidReal(s,isDouble);    }    int exponentOffset=end + 1;    boolean negativeExponent=false;    char firstExponentChar=s.charAt(exponentOffset);    if (firstExponentChar == '+' || firstExponentChar == '-') {      negativeExponent=(firstExponentChar == '-');      ++exponentOffset;    }    String exponentString=s.substring(exponentOffset,length);    if (exponentString.isEmpty()) {      throw invalidReal(s,isDouble);    }    for (int i=0; i < exponentString.length(); ++i) {      char ch=exponentString.charAt(i);      if (ch < '0' || ch > '9') {        throw invalidReal(s,isDouble);      }    }    try {      result.e=Integer.parseInt(exponentString);      if (negativeExponent) {        result.e=-result.e;      }    } catch (    NumberFormatException ex) {      if (negativeExponent) {        result.zero=true;      } else {        result.infinity=true;      }      return result;    }  } else {    end=length;  }  if (length == 0) {    throw invalidReal(s,isDouble);  }  int start=0;  c=s.charAt(start);  if (c == '-') {    ++start;    --length;    result.negative=true;  } else   if (c == '+') {    ++start;    --length;  }  if (length == 0) {    throw invalidReal(s,isDouble);  }  int decimal=s.indexOf('.');  if (decimal > -1) {    result.e-=end - decimal - 1;    s=s.substring(start,decimal) + s.substring(decimal + 1,end);  } else {    s=s.substring(start,end);  }  if ((length=s.length()) == 0) {    throw invalidReal(s,isDouble);  }  end=length;  while (end > 1 && s.charAt(end - 1) == '0') {    --end;  }  start=0;  while (start < end - 1 && s.charAt(start) == '0') {    start++;  }  if (end != length || start != 0) {    result.e+=length - end;    s=s.substring(start,end);  }  final int APPROX_MIN_MAGNITUDE=-359;  final int MAX_DIGITS=52;  length=s.length();  if (length > MAX_DIGITS && result.e < APPROX_MIN_MAGNITUDE) {    int d=Math.min(APPROX_MIN_MAGNITUDE - (int)result.e,length - 1);    s=s.substring(0,length - d);    result.e+=d;  }  if (result.e < -1024) {    result.zero=true;    return result;  } else   if (result.e > 1024) {    result.infinity=true;    return result;  }  result.s=s;  return result;}  }
class C{  private void paintArrows(Graphics2D g,JComponent c,int width,int height){  int xOffset=width / 2 - 5;  int yOffset=height / 2 - 3;  g.translate(xOffset,yOffset);  Shape s=shapeGenerator.createArrowLeft(0.5,0.5,3,4);  g.setPaint(getCommonArrowPaint(s,type));  g.fill(s);  s=shapeGenerator.createArrowRight(6.5,0.5,3,4);  g.setPaint(getCommonArrowPaint(s,type));  g.fill(s);  g.translate(-xOffset,-yOffset);}  }
class C{  public static void validateNoInternalBlockObjects(DbClient dbClient,List<URI> blockObjectURIs,boolean force){  if (blockObjectURIs != null) {    for (    URI blockObjectURI : blockObjectURIs) {      BlockObject blockObject=BlockObject.fetch(dbClient,blockObjectURI);      BlockServiceUtils.validateNotAnInternalBlockObject(blockObject,force);    }  }}  }
class C{  public double maxExtent(){  if (isNull())   return 0.0;  double w=getWidth();  double h=getHeight();  if (w > h)   return w;  return h;}  }
class C{  public void testPosPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,-2,-3,-3,-3,95,15,-9,39,58,-69,87,87,-17,-73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void close(){  this._stats.close();}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  public PickConfig.Builder pickMode(int pickMode){  this.pickMode=pickMode;  return this;}  }
class C{  public Pos3D translate(double x,double y,double z){  xPos+=x;  yPos+=y;  zPos+=z;  return this;}  }
class C{  public void nodeAttributes(Map<String,Object> nodeAttrs){  this.nodeAttrs=nodeAttrs;}  }
class C{  static boolean isPackageAccess(final int modifiers){  return (modifiers & MemberUtils.ACCESS_TEST) == 0;}  }
class C{  @Override public void queueTailRemove(String queueName,Address value){  if (Trace.isEnabled(Item.QUEUE)) {    Clock.stop();    Trace.trace(Item.QUEUE,"tail remove %s from %s",value,queueName);    Clock.start();  }}  }
class C{  public void attrAdded(Attr node,String newv){  if (!mutate) {    value=cssEngine.parsePropertyValue(SVGStylableElement.this,property,newv);  }}  }
class C{  private void processDependencies(GridField changedField){  String columnName=changedField.getColumnName();  for (  GridField field : m_mFields) {    if (field == null || field == changedField)     continue;    verifyChangedField(field,columnName);  }  for (  GridField field : m_mFields2) {    if (field == null || field == changedField)     continue;    verifyChangedField(field,columnName);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.share_capture_activity);  CameraManager.init(getApplication());  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public static void zoomIn(final ZyGraph graph){  checkArguments(graph);  graph.zoomIn();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowDVDPlayer.setDVDDxvaMpegMode(DShowTVPlayer.getDXVACode(getString(stack)));  return null;}  }
class C{  private static float calculateAspectRatio(float left,float top,float right,float bottom){  return (right - left) / (bottom - top);}  }
class C{  public IdentifierRef createIdentifierRef(){  IdentifierRefImpl identifierRef=new IdentifierRefImpl();  return identifierRef;}  }
class C{  public CDeleteModuleAction(final JFrame parent,final IDatabase database,final INaviModule[] modules,final ITreeUpdater updater){  super("Delete Module");  m_parent=Preconditions.checkNotNull(parent,"IE01877: Parent argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01878: Database argument can't be null");  m_modules=Preconditions.checkNotNull(modules,"IE01879: Modules argument can't be null").clone();  m_updater=Preconditions.checkNotNull(updater,"IE01880: Updater argument can not be null");  for (  final INaviModule module : modules) {    Preconditions.checkNotNull(module,"IE01881: Modules list contains a null-element");  }  putValue(ACCELERATOR_KEY,HotKeys.DELETE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_DELETE_MODULE".charAt(0));}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  int nChildIndex=e.getChildIndices()[0];  TreePath pathParent=e.getTreePath();  setSelectionPath(getChildPath(pathParent,nChildIndex));}  }
class C{  public static void checkForUpdatesWithUi(final Window parent,final String productName,final String currentVersion){  checkForUpdatesWithUi(parent,productName,currentVersion,"stable");}  }
class C{  public void testWriteWholeMessage() throws Exception {  TestAllTypes message=TestUtil.getAllSet();  byte[] rawBytes=message.toByteArray();  assertEqualBytes(TestUtil.getGoldenMessage().toByteArray(),rawBytes);  for (int blockSize=1; blockSize < 256; blockSize*=2) {    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);    message.writeTo(output);    output.flush();    assertEqualBytes(rawBytes,rawOutput.toByteArray());  }}  }
class C{  public boolean isLowerCaseNames(){  return this.lowerCaseNames;}  }
class C{  private TableViewerColumn createTableViewerColumn(String title,int width){  final TableViewerColumn viewerColumn=new TableViewerColumn(tableViewer,SWT.NONE);  final TableColumn column=viewerColumn.getColumn();  column.setText(title);  column.setWidth(width);  column.setResizable(true);  column.setMoveable(true);  return viewerColumn;}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  private void initializeView(final TypedArray a){  LayoutInflater inflater=LayoutInflater.from(mContext);  View[] views=new View[]{mFrontView,mBackView};  int[] styleables=new int[]{R.styleable.FlippableView_viewFront,R.styleable.FlippableView_viewBack};  for (int i=0; i < 2; i++) {    if (views[i] != null) {      continue;    }    int viewResId=a.getResourceId(styleables[i],-1);    if (viewResId == -1) {      Log.d(LOG_TAG,"Front and/or back view not set yet (via constructor " + "or XML attribute - will be ignored for now)");      views[i]=null;    } else {      views[i]=inflater.inflate(viewResId,null);    }  }  a.recycle();  inflater.inflate(R.layout.widget_flippable_view,this,true);  setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));  mViewFlipper=(ViewFlipper)getChildAt(0);  if (mFrontView != null && mBackView != null) {    updateFrontAndBack();  }}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  public static <T>ObjectAnimator ofInt(T target,Property<T,Integer> property,int... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setIntValues(values);  return anim;}  }
class C{  private int fieldOrder(BinaryObjectExImpl obj){  if (typeId != obj.typeId()) {    throw new BinaryObjectException("Failed to get field because type ID of passed object differs" + " from type ID this " + BinaryField.class.getSimpleName() + " belongs to [expected="+ typeId+ ", actual="+ obj.typeId()+ ']');  }  int schemaId=obj.schemaId();  BinarySchema schema=schemas.schema(schemaId);  if (schema == null) {    schema=obj.createSchema();    schemas.addSchema(schemaId,schema);  }  assert schema != null;  return schema.order(fieldId);}  }
class C{  public DefaultDocumentType(String elementName,String publicID,String systemID){  this.elementName=elementName;  this.publicID=publicID;  this.systemID=systemID;}  }
class C{  @Override public boolean isCascadedLockingSupported(){  return true;}  }
class C{  public static boolean deleteRecursive(final File file){  boolean result=true;  if (file.isDirectory()) {    for (    final File inner : file.listFiles()) {      result&=deleteRecursive(inner);    }  }  return result & file.delete();}  }
class C{  private String fName(String name){  return dir.getPath() + File.separator + name;}  }
class C{  public void testRuleGaeWildcard() throws IOException, ServletException, InvocationTargetException {  NormalRule rule=new NormalRule();  rule.setFrom("/**");  rule.setTo("/app/$1");  rule.setMatchType("wildcard");  rule.initialise(null);  MockRequest request=new MockRequest("/$%7Bfavicon%7D");  NormalRewrittenUrl rewrittenUrl=(NormalRewrittenUrl)rule.matches(request.getRequestURI(),request,response);  assertEquals("forward should be default type","forward",rule.getToType());  assertEquals("/app/$%7Bfavicon%7D",rewrittenUrl.getTarget());  assertTrue("Should be a forward",rewrittenUrl.isForward());}  }
class C{  @ApiOperation(value="Delete account attribute",notes="Remove attribute from an account. Attribute name is used as a quary parameter. For this API request account/owner, system/admin or system/manager role is required",position=4) @ApiResponses(value={@ApiResponse(code=204,message="OK"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="Invalid attribute name"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}/attribute") @RolesAllowed({"account/owner","system/admin","system/manager"}) public void removeAttribute(@ApiParam(value="Account ID",required=true) @PathParam("id") String accountId,@ApiParam(value="Attribute name to be removed",required=true) @QueryParam("name") String attributeName) throws ConflictException, NotFoundException, ServerException {  validateAttributeName(attributeName);  final Account account=accountDao.getById(accountId);  account.getAttributes().remove(attributeName);  accountDao.update(account);}  }
class C{  private void installTitlePane(){  installDefaults();  installListeners();  createActions();  enableActions();  createActionMap();  setLayout(createLayout());  assembleSystemMenu();  createButtons();  addSubComponents();}  }
class C{  public AccountHeaderBuilder withProfiles(@NonNull List<IProfile> profiles){  this.mProfiles=IdDistributor.checkIds(profiles);  return this;}  }
class C{  @Override public void onChooseCancel(){  pigeonholeView.cancelEdit();}  }
class C{  private boolean hasMatchingParametersMethod(final Method method){  return MethodUtils.getAccessibleMethod(target.getClass(),methodName,method.getParameterTypes()) != null;}  }
class C{  protected boolean addVariable(EnvironmentVariable variable){  String name=variable.getName();  if (getFieldValue().envVars.containsKey(name)) {    boolean overWrite=MessageDialog.openQuestion(getShell(),LaunchConfigurationsMessages.EnvironmentTab_12,MessageFormat.format(LaunchConfigurationsMessages.EnvironmentTab_13,new Object[]{name}));    if (!overWrite) {      return false;    }    getFieldValue().envVars.remove(name);  }  getFieldValue().envVars.put(name,variable.getValue());  notifyFieldChanged();  return true;}  }
class C{  public MqttDevice mqttDevice(){  return mqttDevice;}  }
class C{  public void readOldFormat(Reader reader) throws Exception {  StreamTokenizer tokenizer;  int currentToken;  double firstIndex, secondIndex, weight;  tokenizer=new StreamTokenizer(reader);  initialize();  tokenizer.commentChar('%');  tokenizer.eolIsSignificant(true);  while (StreamTokenizer.TT_EOF != (currentToken=tokenizer.nextToken())) {    if (currentToken == StreamTokenizer.TT_EOL) {      continue;    }    if (currentToken != StreamTokenizer.TT_NUMBER) {      throw new Exception("Only numbers and comments allowed " + "in cost file!");    }    firstIndex=tokenizer.nval;    if (!Utils.eq((int)firstIndex,firstIndex)) {      throw new Exception("First number in line has to be " + "index of a class!");    }    if ((int)firstIndex >= size()) {      throw new Exception("Class index out of range!");    }    if (StreamTokenizer.TT_EOF == (currentToken=tokenizer.nextToken())) {      throw new Exception("Premature end of file!");    }    if (currentToken == StreamTokenizer.TT_EOL) {      throw new Exception("Premature end of line!");    }    if (currentToken != StreamTokenizer.TT_NUMBER) {      throw new Exception("Only numbers and comments allowed " + "in cost file!");    }    secondIndex=tokenizer.nval;    if (!Utils.eq((int)secondIndex,secondIndex)) {      throw new Exception("Second number in line has to be " + "index of a class!");    }    if ((int)secondIndex >= size()) {      throw new Exception("Class index out of range!");    }    if ((int)secondIndex == (int)firstIndex) {      throw new Exception("Diagonal of cost matrix non-zero!");    }    if (StreamTokenizer.TT_EOF == (currentToken=tokenizer.nextToken())) {      throw new Exception("Premature end of file!");    }    if (currentToken == StreamTokenizer.TT_EOL) {      throw new Exception("Premature end of line!");    }    if (currentToken != StreamTokenizer.TT_NUMBER) {      throw new Exception("Only numbers and comments allowed " + "in cost file!");    }    weight=tokenizer.nval;    if (!Utils.gr(weight,0)) {      throw new Exception("Only positive weights allowed!");    }    setCell((int)firstIndex,(int)secondIndex,new Double(weight));  }}  }
class C{  public String makeHeader(String depositId,DateTime watermark,Collection<String> uris,int revision){  XjcRdeMenuType menu=new XjcRdeMenuType();  menu.setVersion("1.0");  menu.getObjURIs().addAll(uris);  XjcRdePolicy policy=new XjcRdePolicy();  policy.setScope("this-will-be-trimmed");  policy.setElement("/make/strict/validation/pass");  XjcRdeContentsType contents=new XjcRdeContentsType();  contents.getContents().add(new XjcRdePolicyElement(policy));  XjcRdeDeposit deposit=new XjcRdeDeposit();  deposit.setId(depositId);  deposit.setWatermark(watermark);  deposit.setType(XjcRdeDepositTypeType.FULL);  if (revision > 0) {    deposit.setResend(revision);  }  deposit.setRdeMenu(menu);  deposit.setContents(contents);  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    XjcXmlTransformer.marshalStrict(deposit,os,UTF_8);  } catch (  XmlException e) {    throw new RuntimeException(e);  }  String rdeDocument=os.toString();  String marker="<rde:contents>\n";  int startOfContents=rdeDocument.indexOf(marker);  verify(startOfContents > 0,"Bad RDE document:\n%s",rdeDocument);  return rdeDocument.substring(0,startOfContents + marker.length());}  }
class C{  public static void writeImagesToMovieFolder(MovieSet movieSet,List<Movie> movies){  if (!MovieModuleManager.MOVIE_SETTINGS.isEnableMovieSetArtworkMovieFolder()) {    return;  }  for (  MediaFileType type : SUPPORTED_ARTWORK_TYPES) {    String url=movieSet.getArtworkUrl(type);    if (StringUtils.isBlank(url)) {      continue;    }    MovieSetImageFetcherTask task=new MovieSetImageFetcherTask(movieSet,url,type,movies);    TmmTaskManager.getInstance().addImageDownloadTask(task);  }}  }
class C{  final void cleanupOperation(double newS,double oldS){  double newM=lnd.getM() + (oldS * oldS / 2.0) - (newS * newS / 2.0);  lnd.setM(newM);}  }
class C{  private String parseFormatDescription(final String pattern,final ParsePosition pos){  final int start=pos.getIndex();  seekNonWs(pattern,pos);  final int text=pos.getIndex();  int depth=1;  for (; pos.getIndex() < pattern.length(); next(pos)) {switch (pattern.charAt(pos.getIndex())) {case START_FE:      depth++;    break;case END_FE:  depth--;if (depth == 0) {  return pattern.substring(text,pos.getIndex());}break;case QUOTE:getQuotedString(pattern,pos);break;default :break;}}throw new IllegalArgumentException("Unterminated format element at position " + start);}  }
class C{  public ccQuad3 originalTile(ccGridSize pos){  int idx=(gridSize_.y * pos.x + pos.y) * ccQuad3.size;  float[] vertArray=new float[ccQuad3.size];  for (int i=0; i < ccQuad3.size; i++) {    vertArray[i]=originalVertices.get(idx + i);  }  return new ccQuad3(vertArray);}  }
class C{  public static List<Mutation> retrieveMutationsInMethod(String className,String methodName){  List<Mutation> r=new ArrayList<Mutation>();  if (mutationMap.get(className) == null)   return r;  List<Mutation> mutants=mutationMap.get(className).get(methodName);  if (mutants != null)   r.addAll(mutants);  return r;}  }
class C{  private void removeTransitionBefore(int index){  final MediaItem mediaItem=mMediaItems.get(index);  final Iterator<Transition> it=mTransitions.iterator();  while (it.hasNext()) {    Transition t=it.next();    if (t.getBeforeMediaItem() == mediaItem) {      mMANativeHelper.setGeneratePreview(true);      it.remove();      t.invalidate();      mediaItem.setBeginTransition(null);      if (index > 0) {        mMediaItems.get(index - 1).setEndTransition(null);      }      break;    }  }}  }
class C{  public JobSettings(final JCas jCas){  this.jCas=jCas;}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("vendor_code_test","id int not null primary key auto_increment, test boolean");  createTable("vendor_code_test2","a INT","PARTITION BY KEY (a) (PARTITION x0, PARTITION x1)");  createTable("vendor_code_test3","a INT","PARTITION BY LIST(a) (PARTITION p0 VALUES IN (1))");  createTable("StatementTestt1","c1 INT, c2 VARCHAR(255)");}  }
class C{  private void handleBrowse(){  ContainerSelectionDialog dialog=new ContainerSelectionDialog(getShell(),ResourcesPlugin.getWorkspace().getRoot(),false,"Select new file container");  if (dialog.open() == Window.OK) {    Object[] result=dialog.getResult();    if (result.length == 1) {      containerText.setText(((Path)result[0]).toString());    }  }}  }
class C{  public void query(String rpfDir){  List<String> frameList=organizeFrames(rpfDir);  if (frameList != null) {    for (Iterator<String> it=frameList.iterator(); it.hasNext(); ) {      Debug.output(it.next().toString());    }  }}  }
class C{  private boolean cmd_select(){  log.config("");  int M_Warehouse_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,"M_Warehouse_ID");  int C_DocType_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,"C_DocType_ID");  if (C_DocType_ID > 0) {    MDocType doctype=new MDocType(Env.getCtx(),C_DocType_ID,null);    String docbase=doctype.getDocBaseType();    if (docbase.equals(MDocType.DOCBASETYPE_MaterialReceipt))     M_Warehouse_ID=0;  }  int M_Locator_ID=0;  M_Locator_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,X_M_MovementLine.COLUMNNAME_M_Locator_ID,true);  String title="";  String sql="SELECT p.Name, w.Name, w.M_Warehouse_ID FROM M_Product p, M_Warehouse w " + "WHERE p.M_Product_ID=? AND w.M_Warehouse_ID" + (M_Locator_ID <= 0 ? "=?" : " IN (SELECT M_Warehouse_ID FROM M_Locator where M_Locator_ID=?)");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,M_Locator_ID <= 0 ? M_Warehouse_ID : M_Locator_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      title=": " + rs.getString(1) + " - "+ rs.getString(2);      M_Warehouse_ID=rs.getInt(3);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  InfoPAttributeInstancePanel pai=new InfoPAttributeInstancePanel(this,title,M_Warehouse_ID,M_Locator_ID,m_M_Product_ID,m_C_BPartner_ID);  if (m_M_AttributeSetInstance_ID != pai.getM_AttributeSetInstance_ID() || !(m_M_AttributeSetInstance_ID == 0 && pai.getM_AttributeSetInstance_ID() == -1)) {    m_changed=true;    if (pai.getM_AttributeSetInstance_ID() != -1) {      m_M_AttributeSetInstance_ID=pai.getM_AttributeSetInstance_ID();      m_M_AttributeSetInstanceName=pai.getM_AttributeSetInstanceName();      m_M_Locator_ID=pai.getM_Locator_ID();    } else {      m_M_AttributeSetInstance_ID=0;      m_M_AttributeSetInstanceName="";    }  }  return m_changed;}  }
class C{  public boolean isPrettyPrint(){  return prettyPrint;}  }
class C{  public static boolean isZipFile(File file) throws IOException {  if (file.isDirectory()) {    return false;  }  final byte[] bytes=new byte[4];  try (FileInputStream fIn=new FileInputStream(file)){    if (fIn.read(bytes) != bytes.length) {      return false;    }  }   ByteBuffer zipFileHeaderSignature=ByteBuffer.wrap(bytes);  zipFileHeaderSignature.order(ByteOrder.LITTLE_ENDIAN);  return 0x04034b50 == zipFileHeaderSignature.getInt();}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length()];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t')     buf[p++]=c;  }  return decode(buf,0,p);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private TaskResourceRep performSRDFProtectionAction(URI consistencyGroupId,Copy copy,String op) throws InternalException {  URI targetVarrayId=copy.getCopyID();  ArgValidator.checkFieldUriType(targetVarrayId,VirtualArray.class,"copyID");  ArgValidator.checkFieldUriType(consistencyGroupId,BlockConsistencyGroup.class,"id");  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  final VirtualArray targetVirtualArray=_permissionsHelper.getObjectById(targetVarrayId,VirtualArray.class);  ArgValidator.checkEntity(consistencyGroup,consistencyGroupId,true);  ArgValidator.checkEntity(targetVirtualArray,targetVarrayId,true);  if (!consistencyGroup.checkForType(Types.SRDF)) {    throw APIException.badRequests.consistencyGroupMustBeSRDFProtected(consistencyGroupId);  }  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(consistencyGroup);  List<Volume> volumeList=BlockConsistencyGroupUtils.getActiveVolumesInCG(consistencyGroup,_dbClient,null);  if (volumeList == null || volumeList.isEmpty()) {    throw APIException.badRequests.consistencyGroupContainsNoVolumes(consistencyGroup.getId());  }  Volume srcVolume=null;  for (  Volume volume : volumeList) {    if (volume.getPersonality() != null && volume.getPersonality().equals(PersonalityTypes.SOURCE.name())) {      srcVolume=volume;      break;    }  }  if (srcVolume == null) {    throw APIException.badRequests.srdfCgContainsNoSourceVolumes(consistencyGroup.getId());  }  BlockConsistencyGroup targetCg=null;  if (srcVolume.getSrdfTargets() != null && !srcVolume.getSrdfTargets().isEmpty()) {    for (    String uri : srcVolume.getSrdfTargets()) {      Volume target=_dbClient.queryObject(Volume.class,URI.create(uri));      if (target.getVirtualArray().equals(targetVarrayId)) {        targetCg=_dbClient.queryObject(BlockConsistencyGroup.class,target.getConsistencyGroup());        break;      }    }  }  List<Volume> targetVolumes=getTargetVolumes(targetCg,targetVarrayId);  for (  Volume tgtVolume : targetVolumes) {    if (!Volume.isSRDFProtectedVolume(tgtVolume)) {      throw APIException.badRequests.volumeMustBeSRDFProtected(tgtVolume.getId());    }  }  if (targetVolumes == null || targetVolumes.isEmpty()) {    throw APIException.badRequests.targetVirtualArrayDoesNotMatch(targetCg.getId(),targetVarrayId);  }  Volume targetVolume=targetVolumes.get(0);  String task=UUID.randomUUID().toString();  Operation status=new Operation();  status.setResourceType(ProtectionOp.getResourceOperationTypeEnum(op));  _dbClient.createTaskOpStatus(Volume.class,targetVolume.getId(),task,status);  if (op.equalsIgnoreCase(ProtectionOp.FAILOVER_TEST_CANCEL.getRestOp()) || op.equalsIgnoreCase(ProtectionOp.FAILOVER_TEST.getRestOp())) {    _dbClient.ready(BlockConsistencyGroup.class,consistencyGroupId,task);    return toTask(targetVolume,task,status);  }  if (op.equalsIgnoreCase(ProtectionOp.SYNC.getRestOp()) && SOURCE_TO_TARGET.toString().equalsIgnoreCase(copy.getSyncDirection())) {    op=ProtectionOp.RESUME.getRestOp();  } else   if (BlockService.isSuspendCopyRequest(op,copy)) {    op=ProtectionOp.SUSPEND.getRestOp();  }  StorageSystem system=_dbClient.queryObject(StorageSystem.class,targetVolume.getStorageController());  ProtectionOrchestrationController controller=getController(ProtectionOrchestrationController.class,ProtectionOrchestrationController.PROTECTION_ORCHESTRATION_DEVICE);  Copy updatedCopy=new Copy(copy.getType(),copy.getSync(),targetVolume.getId(),copy.getName(),copy.getCount());  controller.performSRDFProtectionOperation(system.getId(),updatedCopy,op,task);  return toTask(targetVolume,task,status);}  }
class C{  public void testEntityReferenceSetTextContent() throws TransformerException {  document=builder.newDocument();  Element root=document.createElement("menu");  document.appendChild(root);  EntityReference entityReference=document.createEntityReference("sp");  root.appendChild(entityReference);  try {    entityReference.setTextContent("Lite Syrup");    fail();  } catch (  DOMException e) {  }}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public static YearMonthDay fromCalendarFields(Calendar calendar){  if (calendar == null) {    throw new IllegalArgumentException("The calendar must not be null");  }  return new YearMonthDay(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH) + 1,calendar.get(Calendar.DAY_OF_MONTH));}  }
class C{  public static <T>Iterable<T> eachWithIndex(Iterable<T> self,@ClosureParams(value=FromString.class,options="T,java.lang.Integer") Closure closure){  eachWithIndex(self.iterator(),closure);  return self;}  }
class C{  protected void writeMoveXY(int moveX,int moveY) throws IOException {  int moveBits=OutStream.determineSignedBitSize(moveX);  int moveYBits=OutStream.determineSignedBitSize(moveY);  if (moveYBits > moveBits) {    moveBits=moveYBits;  }  out.writeUBits(5,moveBits);  out.writeSBits(moveBits,moveX);  out.writeSBits(moveBits,moveY);}  }
class C{  public final TextBuilder reverse(){  final int n=_length - 1;  for (int j=(n - 1) >> 1; j >= 0; ) {    char c=charAt(j);    setCharAt(j,charAt(n - j));    setCharAt(n - j--,c);  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.687 -0500",hash_original_method="7EE0A4AE96DC703284542932FE729FBB",hash_generated_method="D9BAA364E4896897364EC470C55B144D") public InReplyToParser(String inReplyTo){  super(inReplyTo);}  }
