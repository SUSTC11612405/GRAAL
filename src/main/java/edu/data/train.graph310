class C{  private void recordUserActionDuringTabRestore(int action){  assert action >= 0 && action < USER_ACTION_DURING_RESTORE_MAX;  RecordHistogram.recordEnumeratedHistogram("Tab.RestoreUserPersistence",action,USER_ACTION_DURING_RESTORE_MAX);}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new float[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    float[][] newBuffers=new float[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  public PeriodType withMonthsRemoved(){  return withFieldRemoved(1,"NoMonths");}  }
class C{  public <T extends Solution>boolean addAll(T[] solutions){  return addAll(Arrays.asList(solutions));}  }
class C{  private void selectPreset(int preset,boolean showToast){  if (mCurrentPreset == preset) {    return;  }  if (mCurrentPreset >= 0) {    mPresetButtons[mCurrentPreset].setBackgroundResource(R.color.preset_button_background);  }  mCurrentPreset=preset;  mPresetButtons[mCurrentPreset].setBackgroundResource(R.color.preset_button_background_selected);  boolean isPlaying=mShimmerViewContainer.isAnimationStarted();  mShimmerViewContainer.useDefaults();  if (mPresetToast != null) {    mPresetToast.cancel();  }switch (preset) {default :case 0:    mPresetToast=Toast.makeText(this,"Default",Toast.LENGTH_SHORT);  break;case 1:mShimmerViewContainer.setDuration(5000);mShimmerViewContainer.setRepeatMode(ObjectAnimator.REVERSE);mPresetToast=Toast.makeText(this,"Slow and reverse",Toast.LENGTH_SHORT);break;case 2:mShimmerViewContainer.setBaseAlpha(0.1f);mShimmerViewContainer.setDropoff(0.1f);mShimmerViewContainer.setTilt(0);mPresetToast=Toast.makeText(this,"Thin, straight and transparent",Toast.LENGTH_SHORT);break;case 3:mShimmerViewContainer.setAngle(ShimmerFrameLayout.MaskAngle.CW_90);mPresetToast=Toast.makeText(this,"Sweep angle 90",Toast.LENGTH_SHORT);break;case 4:mShimmerViewContainer.setBaseAlpha(0);mShimmerViewContainer.setDuration(2000);mShimmerViewContainer.setDropoff(0.1f);mShimmerViewContainer.setIntensity(0.35f);mShimmerViewContainer.setMaskShape(ShimmerFrameLayout.MaskShape.RADIAL);mPresetToast=Toast.makeText(this,"Spotlight",Toast.LENGTH_SHORT);break;}if (showToast) {mPresetToast.show();}if (isPlaying) {mShimmerViewContainer.startShimmerAnimation();}}  }
class C{  public static Map<String,String> convertOAuthUrl(String urlToConvert){  Map<String,String> responseElements=new HashMap<>();  String[] elements=urlToConvert.split("\\?");  elements=elements[1].split("&");  for (  String element : elements) {    String[] keyValue=element.split("=");    responseElements.put(keyValue[0],keyValue[1]);  }  return responseElements;}  }
class C{  public void putShort(String key,short value){  unparcel();  mMap.put(key,value);}  }
class C{  public int renameSubtype(String type,String subtype,String newName){  SQLiteDatabase db=this.getWritableDatabase();  ContentValues contentValues=new ContentValues();  contentValues.put(KEY_SUBTYPE,newName);  return db.update(TABLE_TIMES,contentValues,KEY_TYPE + "=? AND " + KEY_SUBTYPE+ "=?",new String[]{type,subtype});}  }
class C{  public BlackVarianceTermStructure(final Date referenceDate,final Calendar cal,final BusinessDayConvention bdc){  this(referenceDate,cal,bdc,new DayCounter());}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  XYAreaRendererState areaState=(XYAreaRendererState)state;  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  if (Double.isNaN(y1)) {    y1=0.0;  }  double transX1=domainAxis.valueToJava2D(x1,dataArea,plot.getDomainAxisEdge());  double transY1=rangeAxis.valueToJava2D(y1,dataArea,plot.getRangeAxisEdge());  int itemCount=dataset.getItemCount(series);  double x0=dataset.getXValue(series,Math.max(item - 1,0));  double y0=dataset.getYValue(series,Math.max(item - 1,0));  if (Double.isNaN(y0)) {    y0=0.0;  }  double transX0=domainAxis.valueToJava2D(x0,dataArea,plot.getDomainAxisEdge());  double transY0=rangeAxis.valueToJava2D(y0,dataArea,plot.getRangeAxisEdge());  double x2=dataset.getXValue(series,Math.min(item + 1,itemCount - 1));  double y2=dataset.getYValue(series,Math.min(item + 1,itemCount - 1));  if (Double.isNaN(y2)) {    y2=0.0;  }  double transX2=domainAxis.valueToJava2D(x2,dataArea,plot.getDomainAxisEdge());  double transY2=rangeAxis.valueToJava2D(y2,dataArea,plot.getRangeAxisEdge());  double transZero=rangeAxis.valueToJava2D(0.0,dataArea,plot.getRangeAxisEdge());  if (item == 0) {    areaState.area=new GeneralPath();    double zero=rangeAxis.valueToJava2D(0.0,dataArea,plot.getRangeAxisEdge());    if (plot.getOrientation().isVertical()) {      moveTo(areaState.area,transX1,zero);    } else     if (plot.getOrientation().isHorizontal()) {      moveTo(areaState.area,zero,transX1);    }  }  if (plot.getOrientation().isVertical()) {    lineTo(areaState.area,transX1,transY1);  } else   if (plot.getOrientation().isHorizontal()) {    lineTo(areaState.area,transY1,transX1);  }  PlotOrientation orientation=plot.getOrientation();  Paint paint=getItemPaint(series,item);  Stroke stroke=getItemStroke(series,item);  g2.setPaint(paint);  g2.setStroke(stroke);  Shape shape;  if (getPlotShapes()) {    shape=getItemShape(series,item);    if (orientation == PlotOrientation.VERTICAL) {      shape=ShapeUtilities.createTranslatedShape(shape,transX1,transY1);    } else     if (orientation == PlotOrientation.HORIZONTAL) {      shape=ShapeUtilities.createTranslatedShape(shape,transY1,transX1);    }    g2.draw(shape);  }  if (getPlotLines()) {    if (item > 0) {      if (plot.getOrientation() == PlotOrientation.VERTICAL) {        areaState.line.setLine(transX0,transY0,transX1,transY1);      } else       if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {        areaState.line.setLine(transY0,transX0,transY1,transX1);      }      g2.draw(areaState.line);    }  }  if (getPlotArea() && item > 0 && item == (itemCount - 1)) {    if (orientation == PlotOrientation.VERTICAL) {      lineTo(areaState.area,transX1,transZero);      areaState.area.closePath();    } else     if (orientation == PlotOrientation.HORIZONTAL) {      lineTo(areaState.area,transZero,transX1);      areaState.area.closePath();    }    if (this.useFillPaint) {      paint=lookupSeriesFillPaint(series);    }    if (paint instanceof GradientPaint) {      GradientPaint gp=(GradientPaint)paint;      GradientPaint adjGP=this.gradientTransformer.transform(gp,dataArea);      g2.setPaint(adjGP);    }    g2.fill(areaState.area);    if (isOutline()) {      Shape area=areaState.area;      Stroke outlineStroke=lookupSeriesOutlineStroke(series);      if (outlineStroke instanceof BasicStroke) {        BasicStroke bs=(BasicStroke)outlineStroke;        if (bs.getDashArray() != null) {          Area poly=new Area(areaState.area);          Area clip=new Area(new Rectangle2D.Double(dataArea.getX() - 5.0,dataArea.getY() - 5.0,dataArea.getWidth() + 10.0,dataArea.getHeight() + 10.0));          poly.intersect(clip);          area=poly;        }      }      g2.setStroke(outlineStroke);      g2.setPaint(lookupSeriesOutlinePaint(series));      g2.draw(area);    }  }  int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);  int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);  updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    GeneralPath hotspot=new GeneralPath();    if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {      moveTo(hotspot,transZero,((transX0 + transX1) / 2.0));      lineTo(hotspot,((transY0 + transY1) / 2.0),((transX0 + transX1) / 2.0));      lineTo(hotspot,transY1,transX1);      lineTo(hotspot,((transY1 + transY2) / 2.0),((transX1 + transX2) / 2.0));      lineTo(hotspot,transZero,((transX1 + transX2) / 2.0));    } else {      moveTo(hotspot,((transX0 + transX1) / 2.0),transZero);      lineTo(hotspot,((transX0 + transX1) / 2.0),((transY0 + transY1) / 2.0));      lineTo(hotspot,transX1,transY1);      lineTo(hotspot,((transX1 + transX2) / 2.0),((transY1 + transY2) / 2.0));      lineTo(hotspot,((transX1 + transX2) / 2.0),transZero);    }    hotspot.closePath();    Area dataAreaHotspot=new Area(hotspot);    dataAreaHotspot.intersect(new Area(dataArea));    if (dataAreaHotspot.isEmpty() == false) {      addEntity(entities,dataAreaHotspot,dataset,series,item,0.0,0.0);    }  }}  }
class C{  @Override public void notifyHeartbeatStop(){  _isHeartbeatActive=false;  _startSequenceId.incrementAndGet();  clearRecycle();  toFail();}  }
class C{  public static IStatus validateClassFileName(String name){  return validateClassFileName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public void leftTrim(double second){  trim(second,0);}  }
class C{  public String readPropertyName(){  return getString(buf);}  }
class C{  public void finish() throws Exception {}  }
class C{  public void sub(PVector v){  x-=v.x;  y-=v.y;  z-=v.z;}  }
class C{  public static PcRunner serializableInstance(){  return new PcRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  private void upgradeCameraSizeSetting(SettingsManager settingsManager,Context context,CameraDeviceInfo infos,SettingsUtil.CameraDeviceSelector facing){  String key;  if (facing == SettingsUtil.CAMERA_FACING_FRONT) {    key=Keys.KEY_PICTURE_SIZE_FRONT;  } else   if (facing == SettingsUtil.CAMERA_FACING_BACK) {    key=Keys.KEY_PICTURE_SIZE_BACK;  } else {    Log.w(TAG,"Ignoring attempt to upgrade size of unhandled camera facing direction");    return;  }  if (infos == null) {    settingsManager.remove(SettingsManager.SCOPE_GLOBAL,key);    return;  }  String pictureSize=settingsManager.getString(SettingsManager.SCOPE_GLOBAL,key);  int camera=SettingsUtil.getCameraId(infos,facing);  if (camera != -1) {    List<Size> supported=CameraPictureSizesCacher.getSizesForCamera(camera,context);    if (supported != null) {      Size size=SettingsUtil.getPhotoSize(pictureSize,supported,camera);      settingsManager.set(SettingsManager.SCOPE_GLOBAL,key,SettingsUtil.sizeToSettingString(size));    }  }}  }
class C{  void sendFile(PrintStream ps) throws IOException {  int dataSize=TestWebData.tests[testNum].length;  if (chunked) {    psPrint(ps,Integer.toHexString(dataSize));    psWriteEOL(ps);    psWrite(ps,TestWebData.tests[testNum],dataSize);    psWriteEOL(ps);    psPrint(ps,"0");    psWriteEOL(ps);    psWriteEOL(ps);  } else {    psWrite(ps,TestWebData.tests[testNum],dataSize);  }}  }
class C{  public boolean isLoaded(String name){  PluginHolder<T> result=registry.get(name);  if (result == null)   return false;  return result.isLoaded();}  }
class C{  private static void updateAverageMovingSpeed(Context context,RemoteViews remoteViews,int[] ids,TripStatistics tripStatistics,boolean metricUnits,boolean reportSpeed){  String averageMovingSpeedLabel=context.getString(reportSpeed ? R.string.stats_average_moving_speed : R.string.stats_average_moving_pace);  remoteViews.setTextViewText(ids[0],averageMovingSpeedLabel);  Double speed=tripStatistics == null ? Double.NaN : tripStatistics.getAverageMovingSpeed();  String[] speedParts=StringUtils.getSpeedParts(context,speed,metricUnits,reportSpeed);  if (speedParts[0] == null) {    speedParts[0]=context.getString(R.string.value_unknown);  }  remoteViews.setTextViewText(ids[1],speedParts[0]);  remoteViews.setTextViewText(ids[2],speedParts[1]);}  }
class C{  public AttributesFactory(){}  }
class C{  public static boolean isNetworkConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  if (connectivityManager == null)   return false;  NetworkInfo[] info=connectivityManager.getAllNetworkInfo();  if (info == null)   return false;  for (int i=0; i < info.length; i++)   if (info[i].getState() == NetworkInfo.State.CONNECTED)   return true;  return false;}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public static List<Number> measurements(List<EvaluationStatistics> stats,MultiLabelClassifier classifier,Instances dataset,String measurement){  return measurements(stats,OptionUtils.toCommandLine(classifier),dataset.relationName(),measurement);}  }
class C{  private static void validateDHPublicKey(DHPublicKey publicKey) throws InvalidKeyException {  DHParameterSpec paramSpec=publicKey.getParams();  BigInteger p=paramSpec.getP();  BigInteger g=paramSpec.getG();  BigInteger y=publicKey.getY();  validateDHPublicKey(p,g,y);}  }
class C{  public void forEach(BiConsumer<? super K,? super V> action){  inner.forEach(null);}  }
class C{  private static String javaCharset(String charset){  if (charset == null) {    return null;  }  String mappedCharset=MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));  if (mappedCharset == null) {    return charset;  }  return mappedCharset;}  }
class C{  public AliasKeyManager(KeyStore ks,String alias,String keyPassword){  _ks=ks;  _alias=alias;  _keyPassword=keyPassword;}  }
class C{  public Builder addPhoneNumber(PhoneNumber phoneNumber){  phoneNumbers.add(phoneNumber);  return this;}  }
class C{  public NinePatchBorder(Insets insets,NinePatch np){  this.insets=insets;  this.np=np;}  }
class C{  public void close() throws IOException {  fInputStream.close();}  }
class C{  protected AbstractAnimation createAnimation(AnimationTarget target){  AnimatableValue from=parseAnimatableValue(SVG_FROM_ATTRIBUTE);  AnimatableValue to=parseAnimatableValue(SVG_TO_ATTRIBUTE);  AnimatableValue by=parseAnimatableValue(SVG_BY_ATTRIBUTE);  return new ColorAnimation(timedElement,this,parseCalcMode(),parseKeyTimes(),parseKeySplines(),parseAdditive(),parseAccumulate(),parseValues(),from,to,by);}  }
class C{  private RegisterAttributes attributes(Register reg){  return registerAttributes[reg.number];}  }
class C{  private Expression parseExpression() throws ParseException {  return parseAndExpression();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  public Builder circle(){  if (mParam.type != Type.Circle) {    mParam.type=Type.Circle;  }  return this;}  }
class C{  public static boolean isTrait(final Class clazz){  return clazz != null && clazz.getAnnotation(Trait.class) != null;}  }
class C{  public void deleteInstances(int[] rowIndices){  int i;  Arrays.sort(rowIndices);  addUndoPoint();  m_IgnoreChanges=true;  for (i=rowIndices.length - 1; i >= 0; i--) {    deleteInstanceAt(rowIndices[i],false);  }  m_IgnoreChanges=false;  notifyListener(new TableModelEvent(this,rowIndices[0],rowIndices[rowIndices.length - 1],TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE));}  }
class C{  public static String experimenterToString(OFInstructionExperimenter inst,Logger log){  return STR_SUB_EXPERIMENTER_VALUE + "=" + Long.toString(inst.getExperimenter());}  }
class C{  public Tag basicGetTag(){  if (eContainerFeatureID() != DomPackage.TAG_TITLE__TAG)   return null;  return (Tag)eInternalContainer();}  }
class C{  private static CacheConfiguration cacheConfiguration(ProductLoader productLoader){  CacheConfiguration cacheCfg=new CacheConfiguration();  cacheCfg.setCacheMode(CacheMode.PARTITIONED);  cacheCfg.setName(CACHE_NAME);  cacheCfg.setCacheStoreFactory(new FactoryBuilder.SingletonFactory(productLoader));  return cacheCfg;}  }
class C{  private boolean isReady(){  endOfStream|=checkEndOfStream();  needCommit|=coordinatorRequests.commitRequests().remove(taskName);  if (needWindow || needCommit || endOfStream) {    return messagesInFlight.get() == 0 && !windowOrCommitInFlight;  } else {    return messagesInFlight.get() < maxConcurrency && !windowOrCommitInFlight;  }}  }
class C{  private void disconnect(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(ConnectionStatus.DISCONNECTED);  c.addAction("Disconnect Failed - an error occured");}  }
class C{  public ListenerList(){  this(Mode.EQUALITY);}  }
class C{  public void deleteItem(String itemId) throws XMPPException {  Collection<String> items=new ArrayList<String>(1);  items.add(itemId);  deleteItem(items);}  }
class C{  @Override public boolean canBeCollidedWith(){  return true;}  }
class C{  public boolean dismissPopupMenus(){  boolean result=hideOverflowMenu();  result|=hideSubMenus();  return result;}  }
class C{  public void deserialize(final Deserializer deserializer,final int version,final TData data){  this.extensions.stream().filter(null).forEach(null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isEnum(){  return isEnum;}  }
class C{  public final double doOperation() throws OperatorFailedException {  final double scale=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));  double oldValue=variance.getParameterValue(0);  double newValue=scale * oldValue;  double logq=-Math.log(scale);  final Bounds<Double> bounds=variance.getBounds();  if (newValue < bounds.getLowerLimit(0) || newValue > bounds.getUpperLimit(0)) {    throw new OperatorFailedException("proposed value outside boundaries");  }  variance.setParameterValue(0,newValue);  NodeRef root=tree.getRoot();  final int index=root.getNumber();  List<NodeRef> listNode=new ArrayList<NodeRef>();  getSubtree(listNode,tree.getNode(index));  final double rateScale=Math.sqrt(scale);  for (  NodeRef node : listNode) {    oldValue=tree.getNodeRate(node);    newValue=oldValue * rateScale;    tree.setNodeRate(node,newValue);  }  logq+=(listNode.size() - 2) * Math.log(rateScale);  return logq;}  }
class C{  @Deprecated public Digraph G(){  return graph;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  try {    int n;    while ((n=inf.inflate(b,off,len)) == 0) {      if (inf.finished() || inf.needsDictionary()) {        reachEOF=true;        return -1;      }      if (inf.needsInput()) {        fill();      }    }    return n;  } catch (  DataFormatException e) {    String s=e.getMessage();    throw new ZipException(s != null ? s : "Invalid ZLIB data format");  }}  }
class C{  public String query(String handler,SolrQueryRequest req) throws Exception {  try {    SolrCore core=req.getCore();    SolrQueryResponse rsp=new SolrQueryResponse();    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    core.execute(core.getRequestHandler(handler),req,rsp);    if (rsp.getException() != null) {      throw rsp.getException();    }    StringWriter sw=new StringWriter(32000);    QueryResponseWriter responseWriter=core.getQueryResponseWriter(req);    responseWriter.write(sw,req,rsp);    return sw.toString();  }  finally {    req.close();    SolrRequestInfo.clearRequestInfo();  }}  }
class C{  int decrypt(byte[] in,int inOff,int len,byte[] out,int outOff){  if ((len % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  for (int i=len; i >= blockSize; i-=blockSize) {    embeddedCipher.decryptBlock(in,inOff,out,outOff);    inOff+=blockSize;    outOff+=blockSize;  }  return len;}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.WILDCARD;}  }
class C{  protected Node handleFloatingNodeAfterAdd(MethodScope methodScope,LoopScope loopScope,Node node){  return node;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  static void generateMethod(String className,String fqClassName,String methodName,String returnType,String[] paramTypes,int modifiers,ClassWriter cw){  String[] exceptions=null;  boolean isStatic=(modifiers & ACC_STATIC) != 0;  if (returnType == null)   returnType=OBJECT;  String methodDescriptor=getMethodDescriptor(returnType,paramTypes);  CodeVisitor cv=cw.visitMethod(modifiers,methodName,methodDescriptor,exceptions);  if ((modifiers & ACC_ABSTRACT) != 0)   return;  if (isStatic)   pushBshStatic(fqClassName,className,cv); else {    cv.visitVarInsn(ALOAD,0);    cv.visitFieldInsn(GETFIELD,fqClassName,BSHTHIS + className,"Lbsh/This;");  }  cv.visitLdcInsn(methodName);  generateParameterReifierCode(paramTypes,isStatic,cv);  cv.visitInsn(ACONST_NULL);  cv.visitInsn(ACONST_NULL);  cv.visitInsn(ACONST_NULL);  cv.visitInsn(ICONST_1);  cv.visitMethodInsn(INVOKEVIRTUAL,"bsh/This","invokeMethod",Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{Type.getType(String.class),Type.getType(Object[].class),Type.getType(Interpreter.class),Type.getType(CallStack.class),Type.getType(SimpleNode.class),Type.getType(Boolean.TYPE)}));  cv.visitMethodInsn(INVOKESTATIC,"bsh/Primitive","unwrap","(Ljava/lang/Object;)Ljava/lang/Object;");  generateReturnCode(returnType,cv);  cv.visitMaxs(0,0);}  }
class C{  private void renderReport(final HttpServletResponse resp,final byte[] reportData,final FileFormat reportFormat){  try (BufferedOutputStream outputStream=new BufferedOutputStream(resp.getOutputStream())){    resp.setHeader(ReportConstants.HTTP_HEADER_CONTENT_DISPOSITION,ReportViewerUtil.getContentDisposition(reportFormat));    resp.setContentType(ReportViewerUtil.getContentType(reportFormat));    resp.setContentLength(reportData.length);    outputStream.write(reportData);  } catch (  final Exception e) {    final String errMsg="Exception in rendering report with format [" + reportFormat + "]!";    LOGGER.error(errMsg,e);    throw new ApplicationRuntimeException(errMsg,e);  }}  }
class C{  List<String> findFailures(){  List<String> messages=new ArrayList<>();  for (  StatType statType : StatType.values()) {    if (statCounts.count(statType) < statType.requirement) {      messages.add(String.format("Failure: %s %s found.",(statType.requirement == 1 ? "No" : "Not enough"),statType.description()));    }  }  return messages;}  }
class C{  @Override public void incrementRenewedTokens(String tenantName,IIdmServiceContext serviceContext) throws RemoteException, IDMException {  try (IDiagnosticsContextScope ctxt=getDiagnosticsContext(tenantName,serviceContext,"incrementRenewedTokens")){    try {      this.incrementRenewedTokens(tenantName);    } catch (    Exception ex) {      throw ServerUtils.getRemoteException(ex);    }  } }  }
class C{  public static Long makeLong(String s){  if (WWUtil.isEmpty(s)) {    return null;  }  try {    return Long.valueOf(s);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  private void prepareMethodsChangeSignature(final PsiClass currentClass,final PsiElement memberToChangeSignature,final PsiType memberType){  if (memberToChangeSignature instanceof PsiMethod) {    final PsiMethod method=MethodSignatureUtil.findMethodBySuperMethod(currentClass,(PsiMethod)memberToChangeSignature,true);    if (method != null && method.getContainingClass() == currentClass) {      myLabeler.addRoot(new TypeMigrationUsageInfo(method),memberType,method,false);    }  } else   if (memberToChangeSignature instanceof PsiParameter && ((PsiParameter)memberToChangeSignature).getDeclarationScope() instanceof PsiMethod) {    final PsiMethod superMethod=(PsiMethod)((PsiParameter)memberToChangeSignature).getDeclarationScope();    final int parameterIndex=superMethod.getParameterList().getParameterIndex((PsiParameter)memberToChangeSignature);    final PsiMethod method=MethodSignatureUtil.findMethodBySuperMethod(currentClass,superMethod,true);    if (method != null && method.getContainingClass() == currentClass) {      final PsiParameter parameter=method.getParameterList().getParameters()[parameterIndex];      myLabeler.addRoot(new TypeMigrationUsageInfo(parameter),memberType,parameter,false);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  NodeList childList;  Node childToRemove;  Node removedChild;  Node parentNode;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  childList=rootNode.getChildNodes();  childToRemove=childList.item(1);  removedChild=rootNode.removeChild(childToRemove);  parentNode=removedChild.getParentNode();  assertNull("nodeRemoveChildAssert1",parentNode);}  }
class C{  public void addSVGMenuItem(JMenu menu){  try {    Object obj=com.bbn.openmap.util.ComponentFactory.create("com.bbn.openmap.image.SVGFormatter");    if (obj != null) {      Class.forName("org.apache.batik.swing.JSVGCanvas").newInstance();      menu.add(new SaveAsImageMenuItem("SVG",(AbstractImageFormatter)obj));      return;    }  } catch (  ClassNotFoundException cnfe) {  }catch (  InstantiationException ie) {  }catch (  IllegalAccessException iae) {  }catch (  NoClassDefFoundError ncdfe) {  }  if (Debug.debugging("basic")) {    Debug.output("SVG not added to the Save As options, because Batik was not found in classpath.");  }}  }
class C{  public static void multiplyInPlace(double[] a,double c){  for (int i=0; i < a.length; i++) {    a[i]=a[i] * c;  }}  }
class C{  public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThanOrEqual(this);  return this.num() >= obj2.num();}  }
class C{  public JsonApiMapper(EntityDictionary dictionary,ObjectMapper mapper){  this.mapper=mapper;  mapper.registerModule(JsonApiSerializer.getModule(dictionary));}  }
class C{  @Override public void draw(final Graphics g,final int destx,final int desty,final int x,final int y,final int w,final int h){}  }
class C{  private void collectRPStatistics(ProtectionSystem protectionSystem) throws InternalException {  RecoverPointClient rpClient=RPHelper.getRecoverPointClient(protectionSystem);  Set<RPSite> rpSites=rpClient.getAssociatedRPSites();  RecoverPointStatisticsResponse response=rpClient.getRPSystemStatistics();  _rpStatsHelper.updateProtectionSystemMetrics(protectionSystem,rpSites,response,_dbClient);}  }
class C{  public void clear(){  n=0;}  }
class C{  protected void kludge(Map<String,Monitor> map){  if (Boolean.getBoolean("sun.jvmstat.perfdata.disableKludge")) {    return;  }  String name="java.vm.version";  StringMonitor jvm_version=(StringMonitor)map.get(name);  if (jvm_version == null) {    jvm_version=(StringMonitor)findByAlias(name);  }  name="java.vm.name";  StringMonitor jvm_name=(StringMonitor)map.get(name);  if (jvm_name == null) {    jvm_name=(StringMonitor)findByAlias(name);  }  name="hotspot.vm.args";  StringMonitor args=(StringMonitor)map.get(name);  if (args == null) {    args=(StringMonitor)findByAlias(name);  }  assert ((jvm_name != null) && (jvm_version != null) && (args != null));  if (jvm_name.stringValue().indexOf("HotSpot") >= 0) {    if (jvm_version.stringValue().startsWith("1.4.2")) {      kludgeMantis(map,args);    }  }}  }
class C{  public final void testGetPrimeExponentP(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeExponentP()));}  }
class C{  public boolean isMaxXSet(){  return isMaxXSet(0);}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte[] binValue=new byte[HEADER_LENGTH + DATA_LENGTH_USE_CANDIDATE];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(DATA_LENGTH_USE_CANDIDATE >> 8);  binValue[3]=(byte)(DATA_LENGTH_USE_CANDIDATE & 0x00FF);  return binValue;}  }
class C{  public void writeMessageSetExtension(final int fieldNumber,final MessageLite value) throws IOException {  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_START_GROUP);  writeUInt32(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber);  writeMessage(WireFormat.MESSAGE_SET_MESSAGE,value);  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_END_GROUP);}  }
class C{  protected WebDriver createNativeDriver(){  return new FirefoxDriver(new FirefoxCapabilitiesFactory().createCapabilities(webDriverConfig));}  }
class C{  public FluentSupplier<R> retry(final int times,final int backoffStartTime){  return FluentFunctions.of(null);}  }
class C{  public NotificationChain basicSetImplementedProjects(ImplementedProjects newImplementedProjects,NotificationChain msgs){  ImplementedProjects oldImplementedProjects=implementedProjects;  implementedProjects=newImplementedProjects;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTED_PROJECTS,oldImplementedProjects,newImplementedProjects);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Builder sslSettings(SslSettings sslSettings){  this.sslSettings=sslSettings;  return this;}  }
class C{  private boolean inPublishMode(){  checkState(STATE.isActive,"No test is active");  return STATE.expectedTopic != null;}  }
class C{  protected void sendFunctionGroup2(){  sendSpeedCmd();}  }
class C{  protected void forEach(int slot,Allocation ain,Allocation aout,FieldPacker v,LaunchOptions sc){  if (ain == null && aout == null) {    throw new RSIllegalArgumentException("At least one of ain or aout is required to be non-null.");  }  if (sc == null) {    forEach(slot,ain,aout,v);    return;  }  int in_id=0;  if (ain != null) {    in_id=ain.getID(mRS);  }  int out_id=0;  if (aout != null) {    out_id=aout.getID(mRS);  }  byte[] params=null;  if (v != null) {    params=v.getData();  }  mRS.nScriptForEachClipped(getID(mRS),slot,in_id,out_id,params,sc.xstart,sc.xend,sc.ystart,sc.yend,sc.zstart,sc.zend);}  }
class C{  public void postLoad(){  if (defaultSelector != null) {    this.selector=defaultSelector.createSelector();  }}  }
class C{  public final int indexOf(int elem,int index){  for (int i=index; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public void cancel(){  if (null == mRequest) {    return;  }  mRequest.cancel();}  }
class C{  public CaptureFlagUseListener(Player target){  this.target=target;  this.targetName=target.getName();}  }
class C{  protected void saveSelection(){  if (detail == null)   return;  log.config("OK=" + m_ok);  if (!m_ok) {    m_results.clear();    return;  }  if (p_multiSelection) {    m_results.clear();    m_results.addAll(getSelectedRowKeys());  } else {    Integer data=getSelectedRowKey();    if (data != null)     m_results.add(data);  }  detail.clearTable();}  }
class C{  public synchronized String validateRequest(String code) throws JPlagException {  if (code.length() < 12) {    throw new JPlagException("validateRequest","Wrong verification code given: " + code,"Please check the correct spelling of the code!");  }  String username=code.substring(11);  System.out.println("[" + new Date() + "] validateRequest: username="+ username+ " code="+ code);  NodeList reqs=nonValidatedRequestsElement.getElementsByTagName("request");  for (int i=0; i < reqs.getLength(); i++) {    Element elem=(Element)reqs.item(i);    if (elem.getAttribute("username").equals(username)) {      if (elem.getAttribute("code").equals(code)) {        nonValidatedRequestsElement.removeChild(elem);        elem.removeAttribute("code");        elem.setAttribute("validated",new Date() + "");        validatedRequestsElement.appendChild(elem);        writeXMLFile();        return username;      } else       throw new JPlagException("validateRequest","Wrong verification code given: " + code,"Please check the correct spelling of the code!");    }  }  reqs=validatedRequestsElement.getElementsByTagName("request");  for (int i=0; i < reqs.getLength(); i++) {    Element elem=(Element)reqs.item(i);    if (elem.getAttribute("username").equals(username)) {      throw new JPlagException("validateRequest","The request's email address has already been " + "verified!","Please wait until the administrator has" + " decided on your request!");    }  }  throw new JPlagException("validateRequest","No request for user \"" + username + "\" found!","Please check the correct spelling of the username! " + "The request may also have expired.");}  }
class C{  protected BCSChild createBCSChild(Object targetChild,Object peer){  return new BCSSChild(targetChild,peer);}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public static void applySaveOnCloseMethod(Stage stage,String name){  stage.setOnCloseRequest(null);}  }
class C{  private void EM_Init(Instances inst) throws Exception {  int i, j, k;  SimpleKMeans bestK=null;  double bestSqE=Double.MAX_VALUE;  for (i=0; i < 10; i++) {    SimpleKMeans sk=new SimpleKMeans();    sk.setSeed(m_rr.nextInt());    sk.setNumClusters(m_num_clusters);    sk.setNumExecutionSlots(m_executionSlots);    sk.setDisplayStdDevs(true);    sk.buildClusterer(inst);    if (sk.getSquaredError() < bestSqE) {      bestSqE=sk.getSquaredError();      bestK=sk;    }  }  m_num_clusters=bestK.numberOfClusters();  m_weights=new double[inst.numInstances()][m_num_clusters];  m_model=new DiscreteEstimator[m_num_clusters][m_num_attribs];  m_modelNormal=new double[m_num_clusters][m_num_attribs][3];  m_priors=new double[m_num_clusters];  m_modelPrev=new DiscreteEstimator[m_num_clusters][m_num_attribs];  m_modelNormalPrev=new double[m_num_clusters][m_num_attribs][3];  m_priorsPrev=new double[m_num_clusters];  Instances centers=bestK.getClusterCentroids();  Instances stdD=bestK.getClusterStandardDevs();  int[][][] nominalCounts=bestK.getClusterNominalCounts();  int[] clusterSizes=bestK.getClusterSizes();  for (i=0; i < m_num_clusters; i++) {    Instance center=centers.instance(i);    for (j=0; j < m_num_attribs; j++) {      if (inst.attribute(j).isNominal()) {        m_model[i][j]=new DiscreteEstimator(m_theInstances.attribute(j).numValues(),true);        for (k=0; k < inst.attribute(j).numValues(); k++) {          m_model[i][j].addValue(k,nominalCounts[i][j][k]);        }      } else {        double minStdD=(m_minStdDevPerAtt != null) ? m_minStdDevPerAtt[j] : m_minStdDev;        double mean=(center.isMissing(j)) ? inst.meanOrMode(j) : center.value(j);        m_modelNormal[i][j][0]=mean;        double stdv=(stdD.instance(i).isMissing(j)) ? ((m_maxValues[j] - m_minValues[j]) / (2 * m_num_clusters)) : stdD.instance(i).value(j);        if (stdv < minStdD) {          stdv=inst.attributeStats(j).numericStats.stdDev;          if (Double.isInfinite(stdv)) {            stdv=minStdD;          }          if (stdv < minStdD) {            stdv=minStdD;          }        }        if (stdv <= 0) {          stdv=m_minStdDev;        }        m_modelNormal[i][j][1]=stdv;        m_modelNormal[i][j][2]=1.0;      }    }  }  for (j=0; j < m_num_clusters; j++) {    m_priors[j]=clusterSizes[j];  }  Utils.normalize(m_priors);}  }
class C{  public int sizeof(){  return DataConstants.SIZE_INT + data.length;}  }
class C{  public void tagRemoveObject(int charId,int depth) throws IOException {  if (tags != null) {    tags.tagRemoveObject(charId,depth);  }}  }
class C{  protected int numNodes(TSTNode startingNode){  return recursiveNodeCalculator(startingNode,false,0);}  }
class C{  @Override public Model learn(ExampleSet exampleSet) throws OperatorException {  Parameter params=getParameters(exampleSet);  if (exampleSet.size() < 2) {    throw new UserError(this,110,2);  }  Linear.resetRandom();  Linear.disableDebugOutput();  Problem problem=getProblem(exampleSet);  de.bwaldvogel.liblinear.Model model=Linear.train(problem,params);  return new FastMarginModel(exampleSet,model,getParameterAsBoolean(PARAMETER_USE_BIAS));}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y, x1, x2, y1, y2;  int progress;  double z;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxFlowpathLength;  double[][] flowpath1;  double[][] flowpath2;  double dist;  double gridResX, gridResY, diagGridRes;  double[] gridRes;  final double lnOf2=Math.log(2);  byte baseTestByte;  byte testByte;  int curPosFlowpath1, curPosFlowpath2;  boolean flag1, flag2;  int flowDir;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pntrHeaderFile=args[0];  String outputHeader=args[1];  baseTestByte=30;  if ((pntrHeaderFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr1=new WhiteboxRaster(pntrHeaderFile,"r");    int rows=pntr1.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr1.getNumberColumns();    int colsLessOne=cols - 1;    double noData=pntr1.getNoDataValue();    gridResX=pntr1.getCellSizeX();    gridResY=pntr1.getCellSizeY();    diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    gridRes=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    maxFlowpathLength=(int)(2 * Math.sqrt(cols * cols + rows * rows));    WhiteboxRaster pntr2=new WhiteboxRaster(pntrHeaderFile,"r");    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pntrHeaderFile,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    updateProgress("Loop 1 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=pntr1.getValue(row,col);        if (z != noData) {          testByte=baseTestByte;          if (row == rowsLessOne) {            testByte=2;          }          if (col == 0) {            testByte=BitOps.clearBit(testByte,(byte)4);          }          if (col == colsLessOne) {            testByte=BitOps.clearBit(testByte,(byte)1);            testByte=BitOps.clearBit(testByte,(byte)2);          }          for (int c=1; c < 5; c++) {            if (BitOps.checkBit(testByte,(byte)c)) {              x=col + dX[c];              y=row + dY[c];              flowpath1=new double[3][maxFlowpathLength];              flowpath2=new double[3][maxFlowpathLength];              x1=col;              y1=row;              x2=col + dX[c];              y2=row + dY[c];              curPosFlowpath1=0;              curPosFlowpath2=0;              flowpath1[0][curPosFlowpath1]=x1;              flowpath1[1][curPosFlowpath1]=y1;              flowpath1[2][curPosFlowpath1]=0;              flowpath2[0][curPosFlowpath1]=x2;              flowpath2[1][curPosFlowpath1]=y2;              flowpath2[2][curPosFlowpath1]=0;              flag1=true;              flag2=true;              do {                if (flag1) {                  flowDir=(int)pntr1.getValue(y1,x1);                  if (flowDir > 0) {                    curPosFlowpath1++;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x1+=dX[flowDir];                    y1+=dY[flowDir];                    flowpath1[0][curPosFlowpath1]=x1;                    flowpath1[1][curPosFlowpath1]=y1;                    flowpath1[2][curPosFlowpath1]=flowpath1[2][curPosFlowpath1 - 1] + dist;                    for (int d=curPosFlowpath2; d >= 0; d--) {                      if (flowpath2[0][d] == x1 && flowpath2[1][d] == y1) {                        dist=flowpath1[2][curPosFlowpath1];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        dist=flowpath2[2][d];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag1=false;                    if (!flag2) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }                if (flag2) {                  flowDir=(int)pntr2.getValue(y2,x2);                  if (flowDir > 0) {                    curPosFlowpath2+=1;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x2+=dX[flowDir];                    y2+=dY[flowDir];                    flowpath2[0][curPosFlowpath2]=x2;                    flowpath2[1][curPosFlowpath2]=y2;                    flowpath2[2][curPosFlowpath2]=flowpath2[2][curPosFlowpath2 - 1] + dist;                    for (int d=curPosFlowpath1; d >= 0; d--) {                      if (flowpath1[0][d] == x2 && flowpath1[1][d] == y2) {                        dist=flowpath2[2][curPosFlowpath2];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        dist=flowpath1[2][d];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag2=false;                    if (!flag1) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }              } while (flag1 || flag2);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    updateProgress("Loop 2 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) != noData) {          output.setValue(row,col,output.getValue(row,col) / 1000);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr1.close();    pntr2.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void share(String text,String image,String mimeType){  share(text,image,mimeType,null);}  }
class C{  public int size(){  return (head == null ? 0 : 1) + (tail == null ? 0 : tail.size());}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public static void link(final CCallgraphNode parent,final CCallgraphNode child){  Preconditions.checkNotNull(parent,"IE01236: Parent argument can not be null");  Preconditions.checkNotNull(child,"IE01237: Child argument can not be null");  parent.m_children.add(child);  child.m_parents.add(parent);}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.symDifference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.symDifference(g1,g2);    }    ShapeFile output=null;    int numFields=3;    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum1=0;      int parentRecNum2=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum1=-999;        parentRecNum2=-999;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum1);          rowData[2]=new Double(parentRecNum2);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].crosses(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void removeMessageListener(BrokerChangeListener listener){  this.listenerList.remove(BrokerChangeListener.class,listener);}  }
class C{  public static void execute(Connection connection,String rawSqlQuery,Object... parameters) throws SQLException {  PreparedStatement stmt=null;  ResultSet rs=null;  try {    stmt=connection.prepareStatement(rawSqlQuery);    for (int index=0; index < parameters.length; index++) {      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);    }    stmt.execute();  }  finally {    JdbcUtils.closeResultSet(rs);    JdbcUtils.closeStatement(stmt);  }}  }
class C{  public <T>T unmarshal(final HierarchicalStreamReader reader,final T root,final DataHolder dataHolder){  try {    @SuppressWarnings("unchecked") final T t=(T)marshallingStrategy.unmarshal(root,reader,dataHolder,converterLookup,mapper);    return t;  } catch (  final ConversionException e) {    final Package pkg=getClass().getPackage();    final String version=pkg != null ? pkg.getImplementationVersion() : null;    e.add("version",version != null ? version : "not available");    throw e;  }}  }
class C{  public static int identifyRegions(char[][] img,char offChar){  for (int i=0; i < img.length; i++) {    for (int j=0; j < img[0].length; j++) {      if (img[i][j] != offChar) {        img[i][j]=ON;      }    }  }  char next=FirstRegion;  IConvexHull alg=new ConvexHullScan();  while (true) {    IPoint p=locate(img);    if (p == null)     return (next - FirstRegion);    Collection<IPoint> points=new LinkedList<IPoint>();    points.add(p);    spread(img,(int)p.getX(),(int)p.getY(),points,next);    IPoint[] raw=points.toArray(new TwoDPoint[]{});    IPoint[] hull=alg.compute(raw);    for (    IPoint h : hull) {      img[(int)h.getX()][(int)h.getY()]=HULL;    }    next++;  }}  }
class C{  private void extractAndAddStaticHeadersToHook(final JsonObject jsonHook,final HttpHook hook){  JsonObject staticHeaders=jsonHook.getJsonObject(STATIC_HEADERS);  if (staticHeaders != null && staticHeaders.size() > 0) {    hook.addStaticHeaders(new LinkedHashMap<>());    for (    Map.Entry<String,Object> entry : staticHeaders.getMap().entrySet()) {      hook.getStaticHeaders().put(entry.getKey(),entry.getValue().toString());    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String generateFinished() throws Exception {  return "";}  }
class C{  private List<Product> loadNonDeletedProducts(Organization supplier){  Query query=null;  query=ds.createNamedQuery("Product.getProductsForVendor");  query.setParameter("vendorKey",Long.valueOf(supplier.getKey()));  query.setParameter("filterOutWithStatus",EnumSet.of(ServiceStatus.DELETED));  @SuppressWarnings("unchecked") List<Product> result=query.getResultList();  return result;}  }
class C{  public static Tuple median(Iterator tuples,String field,Comparator cmp){  Object[] t=new Tuple[100];  int i=0;  for (; tuples.hasNext(); ++i) {    if (i >= t.length)     t=ArrayLib.resize(t,3 * t.length / 2);    t[i]=(Tuple)tuples.next();  }  ArrayLib.trim(t,i);  Object[] v=new Object[t.length];  int[] idx=new int[t.length];  for (i=0; i < t.length; ++i) {    idx[i]=i;    v[i]=((Tuple)t[i]).get(field);  }  ArrayLib.sort(v,idx,cmp);  return (Tuple)t[idx[idx.length / 2]];}  }
class C{  @Override public DefaultProjectClient project(){  return new DefaultProjectClient(url,authenticationManager);}  }
class C{  protected void sequence_ArrowFunctionTypeExpression_FunctionTypeExpressionOLD_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void removeThreadLocal(ThreadLocal<?> threadLocal){  if (threadLocal == null) {    return;  }  toPropagate.remove(threadLocal);}  }
class C{  public NondominatedPopulation run(){  isCanceled.set(false);  return runSingleSeed(1,1,properties.getInt("maxEvaluations",25000));}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public static boolean checkIfAutoLoadMergingRequired(){  String isLoadMergeEnabled=CarbonProperties.getInstance().getProperty(CarbonCommonConstants.ENABLE_AUTO_LOAD_MERGE,CarbonCommonConstants.DEFAULT_ENABLE_AUTO_LOAD_MERGE);  if (isLoadMergeEnabled.equalsIgnoreCase("false")) {    return false;  }  return true;}  }
class C{  public boolean isEditing(JTree tree){  return (editingComponent != null);}  }
class C{  protected void incrementTaskDone(Set<TaskImageContainer> tasks) throws RuntimeException {synchronized (mShadowTaskMap) {    for (    TaskImageContainer task : tasks) {      ImageShadowTask shadowTask=mShadowTaskMap.get(task.mSession);      if (shadowTask == null) {        throw new RuntimeException("Session NOT previously registered." + " ImageShadowTask booking-keeping is incorrect.");      }      shadowTask.getProtocol().addCount(1);    }  }}  }
class C{  public int availableBytes(){  return this.stream.available();}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final Collection<?> coll){  buffer.append(coll);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  private void checkOpenCursorCount(int expectCount){  Cursor c=getQueryCursor(null);  assertEquals(expectCount,c.getCount());  c.close();}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.NAMESPACE___NAMESPACE_1:    return getNamespace_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedataend.class,args);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String suffix="_new";  String inputFilesString=null;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String[] imageFiles;  int numImages=0;  int i;  int col, row;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      suffix=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("double")) {        dataType=DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=DataType.INTEGER;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");      int rows=image.getNumberRows();      int cols=image.getNumberColumns();      double inputNoData=image.getNoDataValue();      outputHeader=inputHeader.replace(".dep",suffix + ".dep");      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,inputNoData);      double[] data=null;      if (dataType == DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            output.setValue(row,col,data[col]);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.FLOAT) {        double outputNoData=-32768;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              output.setValue(row,col,data[col]);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.INTEGER) {        double outputNoData=-32768;        double z;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              z=Math.round(data[col]);              output.setValue(row,col,(int)z);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      }      image.close();      output.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean disableDoubleBuffering(Component c){  if (!(c instanceof JComponent))   return false;  JComponent jc=(JComponent)c;  boolean wasBuffered=jc.isDoubleBuffered();  jc.setDoubleBuffered(false);  return wasBuffered;}  }
class C{  private void sendPacket(){  float progress=mFormatter.format();  if (progress == PacketFilter.STATUS_NEED) {    SendPacket packet=takePacket();    mFormatter.setPacket(packet);    if (packet != null) {      sendPacket();    }  } else {    notifyProgress(progress);    if (progress == PacketFilter.STATUS_END)     mFormatter.setPacket(takePacket());    sendAsync();  }}  }
class C{  public static String[] split(String str,String delim){  return StringUtils.splitByWholeSeparatorPreserveAllTokens(str,delim);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("<");  sb.append(this.first == null ? "null" : this.first.toString());  sb.append(", ");  sb.append(this.second == null ? "null" : this.second.toString());  sb.append(">");  return sb.toString();}  }
class C{  @Override public void encrypt(int[] inbuffer,int[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(inbuffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  public void destroy() throws DestroyFailedException {  screds.destroy();}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.331 -0500",hash_original_method="F5E2B33BAA7F2110DB7AE2D50276D662",hash_generated_method="E07D899195A0F34DC826BBB3CFA25B61") public boolean isScrollable(){  return getBooleanProperty(PROPERTY_SCROLLABLE);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataAppendDataAssert",24,childLength);}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  private void delete(HttpServletRequest request,File dir,List<String> elementList) throws IOException {  if (elementList == null) {    return;  }  for (Iterator<String> it=elementList.iterator(); it.hasNext(); ) {    String element=it.next();    if (element.length() > 0) {      File file=new File(dir,element);      if (isAccessible(request,file)) {        if (file.isDirectory()) {          delete(request,file,Arrays.asList(file.list()));        }        if (!file.delete()) {          addError(request,ERROR_DELETE + element);        }      }    }  }}  }
class C{  public Iterator<OMGraphic> iteratorCopy(){  return new OMGraphicList(graphics).iterator();}  }
class C{  public static Class toClass(ClassFile cf,ClassLoader loader) throws CannotCompileException {  return toClass(cf,loader,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.542 -0500",hash_original_method="B6764DC3BD8B6ED5267E5A941E3F8260",hash_generated_method="63F6B353EC34D087B37B1C1A1F64F9C8") public boolean onKeyUp(View view,Editable content,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    release(content,CAP,event);    return true;  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    release(content,ALT,event);    return true;  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    release(content,SYM,event);    return true;  }  return false;}  }
class C{  public MutableDirectedGraph(final List<NodeType> nodes,final List<EdgeType> edges){  m_nodes=Preconditions.checkNotNull(nodes,"Nodes argument can not be null");  m_edges=Preconditions.checkNotNull(edges,"Edges argument can not be null");  for (  final NodeType node : nodes) {    Preconditions.checkNotNull(node,"Node list contains null-nodes");    m_nodeToEdges.put(node,new ArrayList<EdgeType>());  }  for (  final EdgeType edge : edges) {    updateNodeToEdgeMapping(edge);  }}  }
class C{  private static LinkedHashMap<String,String> createParameterMap(final String queryString){  if ((queryString == null) || queryString.isEmpty()) {    return null;  }  final String[] pairs=queryString.split("&");  final Map<String,String> params=new LinkedHashMap<>(pairs.length);  for (  final String pair : pairs) {    if (pair.isEmpty()) {      continue;    }    String[] tokens=pair.split("=",2);switch (tokens.length) {case 1:      if (pair.charAt(0) == '=') {        params.put("",tokens[0]);      } else {        params.put(tokens[0],"");      }    break;case 2:  params.put(tokens[0],tokens[1]);break;}}return new LinkedHashMap<>(params);}  }
class C{  @Nullable public synchronized V remove(K key){  V oldValue=mMap.remove(key);  mSizeInBytes-=getValueSizeInBytes(oldValue);  return oldValue;}  }
class C{  @Override public void handleGet(Operation get){  QueryTask.QuerySpecification q=new QueryTask.QuerySpecification();  q.options=EnumSet.of(QueryOption.EXPAND_CONTENT,QueryOption.INCLUDE_ALL_VERSIONS);  q.query.setTermPropertyName(ServiceDocument.FIELD_NAME_SELF_LINK).setTermMatchValue(getSelfLink());  QueryTask task=QueryTask.create(q).setDirect(true);  URI uri=UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_QUERY_TASKS);  Operation startPost=Operation.createPost(uri).setBody(task);  sendWithDeferredResult(startPost,QueryTask.class).thenApply(null).thenApply(null).whenCompleteNotify(get);}  }
class C{  @MonkeyRunnerExported(doc="reboot device",args={},argDocs={},returns="boolean") public boolean reboot(PyObject[] args,String[] kws) throws Exception {  ArgParser ap=JythonUtils.createArgParser(args,kws);  Preconditions.checkNotNull(ap);  boolean ret=true;  this.refreshProgressData();  Thread.sleep(5000);  return ret;}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }}  }
class C{  public boolean removeCondition(FallbackCondition condition){  return this.fallbackConditions.remove(condition);}  }
class C{  public boolean isResolvedTypeInferredFromExpectedType(){  return this.ast.getBindingResolver().isResolvedTypeInferredFromExpectedType(this);}  }
class C{  public Item withTag(Object object){  this.mTag=object;  return (Item)this;}  }
class C{  private Put createPut(byte[] rowKey,ColumnList cols,Durability durability){  Put put=new Put(rowKey);  put.setDurability(durability);  addColumns(cols,put);  return put;}  }
class C{  @Override public void update(){  if (inputMode) {    if (testData == null) {      throw new NullPointerException("Test data variable is null," + " but neuron group " + getLabel() + " is in input"+ " mode.");    }    readNextInputUnsafe();  } else {    Network.updateNeurons(neuronList);  }  if (isRecording()) {    writeActsToFile();  }}  }
class C{  @Override public void showMessage(String message){  if (progress == null) {    progress=createAlertBox(message);  }  contentLabel.setText(message);}  }
class C{  public static boolean isUsingSDCardPrivateStorage(){  String primaryPath=Environment.getExternalStorageDirectory().getAbsolutePath();  String currentPath=ConfigurationManager.instance().getStoragePath();  return !primaryPath.equals(currentPath);}  }
class C{  public ColorRGBA(int r,int g,int b){  super(new Scalar(r,g,b,255));}  }
class C{  public script removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private void checkGutterVisibility(){  int count=gutter.getComponentCount();  if (count == 0) {    if (getRowHeader() != null && getRowHeader().getView() == gutter) {      setRowHeaderView(null);    }  } else {    if (getRowHeader() == null || getRowHeader().getView() == null) {      setRowHeaderView(gutter);    }  }}  }
class C{  @Deprecated public EmailListRecipientFeed retrieveAllRecipients(String emailList) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving all recipients in emailList '" + emailList + "'.");  URL retrieveUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/"+ emailList+ "/recipient/");  EmailListRecipientFeed allRecipients=new EmailListRecipientFeed();  EmailListRecipientFeed currentPage;  Link nextLink;  do {    currentPage=emailListRecipientService.getFeed(retrieveUrl,EmailListRecipientFeed.class);    allRecipients.getEntries().addAll(currentPage.getEntries());    nextLink=currentPage.getLink(Link.Rel.NEXT,Link.Type.ATOM);    if (nextLink != null) {      retrieveUrl=new URL(nextLink.getHref());    }  } while (nextLink != null);  return allRecipients;}  }
class C{  public final void testSetMaxLength(){  int maxLength=2;  MaxLengthValidator maxLengthValidator=new MaxLengthValidator("foo",1);  maxLengthValidator.setMaxLength(maxLength);  assertEquals(maxLength,maxLengthValidator.getMaxLength());}  }
class C{  @Override protected Object readPostProcess(Object o) throws Exception {  Element node;  Experiment exp;  int i;  Vector<Element> children;  exp=(Experiment)o;  children=XMLDocument.getChildTags(m_Document.getDocument().getDocumentElement());  for (i=0; i < children.size(); i++) {    node=children.get(i);    if (node.getAttribute(ATT_NAME).equals(NAME_CLASSFIRST)) {      exp.classFirst(new Boolean(XMLDocument.getContent(node)).booleanValue());      break;    }  }  return o;}  }
class C{  public void testFindNonExistent() throws Exception {  File logDir=prepareLogDir("testStutteringLogReadback");  DiskLog log=openLog(logDir,false);  log.release();  DiskLog logR=openLog(logDir,true,1000000,1000,0,0);  LogConnection conn=logR.connect(true);  assertFalse("Cannot find non-existent value",conn.seek(-2,(short)0));  long[] seqno1={1,2,100};  for (  long seqno : seqno1) {    assertTrue("Seeking non-existent value in empty log",conn.seek(seqno));    assertNull("No value in empty log",conn.next(false));  }  conn.release();  logR.release();  log=openLog(logDir,false);  writeEventsToLog(log,50);  log.release();  logR=openLog(logDir,false,1000000,1000,0,0);  conn=logR.connect(true);  assertFalse("Cannot find non-existent value",conn.seek(-2,(short)0));  long[] seqno2={51,52,100000};  for (  long seqno : seqno2) {    assertTrue("Can seek non-existent seqno",conn.seek(seqno,(short)0));    assertNull("Cannot find non-existing event",conn.next(false));  }  logR.release();}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.324 -0500",hash_original_method="1BECDA97215EAB893F9C0F926E7877B4",hash_generated_method="64FB3B23E4B608915AFCC88012E2AD53") public boolean startScanActive(){  try {    mService.startScan(true);    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public void removePollMessage(TamsMessage tm,TamsListener tl){  for (  PollMessage pm : pollQueue) {    if (pm.getListener() == tl && pm.getMessage().toString().equals(tm.toString())) {      pollQueue.remove(pm);    }  }}  }
class C{  public static Number count(Object[] self,Object value){  return count((Iterable)Arrays.asList(self),value);}  }
class C{  private void cleanRCSRawContactsInAB() throws ContactManagerException {  Cursor cursor=null;  try {    cursor=mContentResolver.query(Data.CONTENT_URI,PROJ_RAW_CONTACT_DATA1,SEL_DATA_MIMETYPE_NUMBER,null,null);    CursorUtil.assertCursorIsNotNull(cursor,Data.CONTENT_URI);    if (!cursor.moveToFirst()) {      return;    }    int contactColumnIdx=cursor.getColumnIndexOrThrow(Data.RAW_CONTACT_ID);    int data1ColumnIdx=cursor.getColumnIndexOrThrow(Data.DATA1);    ArrayList<ContentProviderOperation> ops=new ArrayList<>();    do {      String phoneNumber=cursor.getString(data1ColumnIdx);      PhoneNumber number=ContactUtil.getValidPhoneNumberFromAndroid(phoneNumber);      if (number == null) {        if (sLogger.isActivated()) {          sLogger.warn("Cannot parse contact " + phoneNumber);        }        continue;      }      ContactId contact=ContactUtil.createContactIdFromValidatedData(number);      long rawContactId=cursor.getLong(contactColumnIdx);      if (getRawContactIdsFromPhoneNumber(contact).isEmpty()) {        ops.add(ContentProviderOperation.newDelete(RawContacts.CONTENT_URI).withSelection(SEL_RAW_CONTACT,new String[]{Long.toString(rawContactId)}).build());        mLocalContentResolver.delete(AggregationData.CONTENT_URI,WHERE_RCS_RAW_CONTACT_ID,new String[]{Long.toString(rawContactId)});      }    } while (cursor.moveToNext());    if (!ops.isEmpty()) {      mContentResolver.applyBatch(ContactsContract.AUTHORITY,ops);    }  } catch (  RemoteException|OperationApplicationException e) {    throw new ContactManagerException("Unable to apply batch updates !",e);  } finally {    CursorUtil.close(cursor);  }}  }
class C{  protected static TimeSourceService makeTimeSource(ConfigurationInformation configSnapshot){  if (configSnapshot.getEngineDefaults().getTimeSource().getTimeSourceType() == ConfigurationEngineDefaults.TimeSourceType.NANO) {    TimeSourceServiceImpl.IS_SYSTEM_CURRENT_TIME=false;  }  return new TimeSourceServiceImpl();}  }
class C{  static final long encode(long v){  if (v < 0) {    v=v - 0x8000000000000000L;  } else {    v=v + 0x8000000000000000L;  }  return v;}  }
class C{  public WHERE WHERE(String condition){  return new WHERE(this,condition);}  }
class C{  protected Object decrement(Object value){  return InvokerHelper.invokeMethod(value,"previous",null);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public LocalListenerRepository(){  urlToListenersMap=new HashMap<String,Set<Listener>>();  listenerToUrlMap=new HashMap<String,Listener>();}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public SearchRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  private void processRaw() throws IOException {  int pos;  int i;  while (state != STATE_DONE) {switch (state) {case STATE_AWAITING_CHUNK_HEADER:      pos=rawPos;    while (pos < rawCount) {      if (rawData[pos] == '\n') {        break;      }      pos++;      if ((pos - rawPos) >= MAX_CHUNK_HEADER_SIZE) {        error=true;        throw new IOException("Chunk header too long");      }    }  if (pos >= rawCount) {    return;  }String header=new String(rawData,rawPos,pos - rawPos + 1,"US-ASCII");for (i=0; i < header.length(); i++) {if (Character.digit(header.charAt(i),16) == -1) break;}try {chunkSize=Integer.parseInt(header.substring(0,i),16);} catch (NumberFormatException e) {error=true;throw new IOException("Bogus chunk size");}rawPos=pos + 1;chunkRead=0;if (chunkSize > 0) {state=STATE_READING_CHUNK;} else {state=STATE_AWAITING_TRAILERS;}break;case STATE_READING_CHUNK:if (rawPos >= rawCount) {return;}int copyLen=Math.min(chunkSize - chunkRead,rawCount - rawPos);if (chunkData.length < chunkCount + copyLen) {int cnt=chunkCount - chunkPos;if (chunkData.length < cnt + copyLen) {byte tmp[]=new byte[cnt + copyLen];System.arraycopy(chunkData,chunkPos,tmp,0,cnt);chunkData=tmp;} else {System.arraycopy(chunkData,chunkPos,chunkData,0,cnt);}chunkPos=0;chunkCount=cnt;}System.arraycopy(rawData,rawPos,chunkData,chunkCount,copyLen);rawPos+=copyLen;chunkCount+=copyLen;chunkRead+=copyLen;if (chunkSize - chunkRead <= 0) {state=STATE_AWAITING_CHUNK_EOL;} else {return;}break;case STATE_AWAITING_CHUNK_EOL:if (rawPos + 1 >= rawCount) {return;}if (rawData[rawPos] != '\r') {error=true;throw new IOException("missing CR");}if (rawData[rawPos + 1] != '\n') {error=true;throw new IOException("missing LF");}rawPos+=2;state=STATE_AWAITING_CHUNK_HEADER;break;case STATE_AWAITING_TRAILERS:pos=rawPos;while (pos < rawCount) {if (rawData[pos] == '\n') {break;}pos++;}if (pos >= rawCount) {return;}if (pos == rawPos) {error=true;throw new IOException("LF should be proceeded by CR");}if (rawData[pos - 1] != '\r') {error=true;throw new IOException("LF should be proceeded by CR");}if (pos == (rawPos + 1)) {state=STATE_DONE;closeUnderlying();return;}String trailer=new String(rawData,rawPos,pos - rawPos,"US-ASCII");i=trailer.indexOf(':');if (i == -1) {throw new IOException("Malformed tailer - format should be key:value");}String key=(trailer.substring(0,i)).trim();String value=(trailer.substring(i + 1,trailer.length())).trim();responses.add(key,value);rawPos=pos + 1;break;}}}  }
class C{  public void decrementActiveRequests(){  if (!_statsOn) {    return;  }  _activeRequests.decrementAndGet();}  }
class C{  public boolean hasAdditionalProperties(){  return false;}  }
class C{  public NotificationChain basicSetType(Expression newType,NotificationChain msgs){  Expression oldType=type;  type=newType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.ARGUMENT_DEFINITION__TYPE,oldType,newType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public ICursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){  if (mTables == null) {    return null;  }  if (mStrict && selection != null && selection.length() > 0) {    String sqlForValidation=buildQuery(projectionIn,"(" + selection + ")",groupBy,having,sortOrder,limit);    validateQuerySql(db,sqlForValidation);  }  String sql=buildQuery(projectionIn,selection,groupBy,having,sortOrder,limit);  if (Logger.isLoggable(TAG,Logger.Level.DEBUG)) {    Logger.d(TAG,"Performing query: " + sql);  }  return db.rawQueryWithFactory(mFactory,sql,selectionArgs,SQLiteDatabase.findEditTable(mTables));}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  @Override public void configureBuilderPreferenceStoreInitializer(com.google.inject.Binder binder){  binder.bind(org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer.class).annotatedWith(com.google.inject.name.Names.named("builderPreferenceInitializer")).to(eu.numberfour.n4js.ui.preferences.N4JSBuilderPreferenceAccess.Initializer.class);}  }
class C{  @Override public double approximateConservativeKnnDistance(int k){  return conservativeApproximation.getApproximatedKnnDistance(k);}  }
class C{  public static boolean isNextWindow(NamedURI id){  return (id == null) || isNextWindow(id.getURI());}  }
class C{  @Provides @Config("dnsTldUpdateBatchSize") public static int provideDnsTldUpdateBatchSize(){  return 100;}  }
class C{  public static String obscure(String clearValue,String obscureType){  Obscure ob=new Obscure(clearValue,obscureType);  return ob.getObscuredValue();}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:44.749 -0500",hash_original_method="4CDEA202B3139E78A079F62F7879F788",hash_generated_method="1F0B839B8FD566BE358767B61EF6803A") public static final Intent addDrmFile(ContentResolver cr,FileInputStream fis,String title){  OutputStream os=null;  Intent result=null;  try {    DrmRawContent content=new DrmRawContent(fis,(int)fis.available(),DrmRawContent.DRM_MIMETYPE_MESSAGE_STRING);    String mimeType=content.getContentType();    long size=fis.getChannel().size();    DrmRightsManager manager=manager=DrmRightsManager.getInstance();    DrmRights rights=manager.queryRights(content);    InputStream stream=content.getContentInputStream(rights);    Uri contentUri=null;    if (mimeType.startsWith("audio/")) {      contentUri=DrmStore.Audio.CONTENT_URI;    } else     if (mimeType.startsWith("image/")) {      contentUri=DrmStore.Images.CONTENT_URI;    } else {      Log.w(TAG,"unsupported mime type " + mimeType);    }    if (contentUri != null) {      ContentValues values=new ContentValues(3);      values.put(DrmStore.Columns.TITLE,title);      values.put(DrmStore.Columns.SIZE,size);      values.put(DrmStore.Columns.MIME_TYPE,mimeType);      Uri uri=cr.insert(contentUri,values);      if (uri != null) {        os=cr.openOutputStream(uri);        byte[] buffer=new byte[1000];        int count;        while ((count=stream.read(buffer)) != -1) {          os.write(buffer,0,count);        }        result=new Intent();        result.setDataAndType(uri,mimeType);      }    }  } catch (  Exception e) {    Log.e(TAG,"pushing file failed",e);  } finally {    try {      if (fis != null)       fis.close();      if (os != null)       os.close();    } catch (    IOException e) {      Log.e(TAG,"IOException in DrmStore.addDrmFile()",e);    }  }  return result;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public boolean isPeriodicBoundaryConditions(){  return periodicBoundaryConditions;}  }
class C{  public boolean hasArchiveResourceIds(){  return hasRepeatingExtension(ArchiveResourceId.class);}  }
class C{  @Override public NativePooledByteBufferOutputStream newOutputStream(){  return new NativePooledByteBufferOutputStream(mPool);}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle a=allocation.getBounds();  setSize(a.width,a.height);  if (captionIndex != -1) {    short top=(short)painter.getInset(TOP,this);    short bottom=(short)painter.getInset(BOTTOM,this);    if (top != getTopInset()) {      int h=getTopInset() - top;      a.y+=h;      a.height-=h;    } else {      a.height-=getBottomInset() - bottom;    }  }  painter.paint(g,a.x,a.y,a.width,a.height,this);  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    v.paint(g,getChildAllocation(i,allocation));  }}  }
class C{  public ByteArrayDataSource(byte[] data,String type){  m_data=data;  if (type != null && type.length() > 0)   m_type=type;}  }
class C{  @Override protected void initData(){}  }
class C{  public int fillCounts(int[] counts){  missingCount=0;  leafUpto=0;  rollup(root,counts,false);  return missingCount;}  }
class C{  public static void acquireWakeLockNow(Context context){  if (sWakeLock == null || !sWakeLock.isHeld()) {    PowerManager powerManager=Assertions.assertNotNull((PowerManager)context.getSystemService(POWER_SERVICE));    sWakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,HeadlessJsTaskService.class.getSimpleName());    sWakeLock.setReferenceCounted(false);    sWakeLock.acquire();  }}  }
class C{  public Instances resample(Random random){  Instances newData=new Instances(this,numInstances());  while (newData.numInstances() < numInstances()) {    newData.add(instance(random.nextInt(numInstances())));  }  return newData;}  }
class C{  public BrokerChangeEvent(Object source,BrokerModel brokerManagerModel){  super(source);  this.brokerManagerModel=brokerManagerModel;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr districtAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("lang");  districtAttr=testEmployee.setAttributeNode(newAttribute);  assertNull("elementSetAttributeNodeNullAssert",districtAttr);}  }
class C{  public static XMLTree from(Path path) throws IOException {  return new XMLTree(readAllBytes(path));}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  CatchStatement s=(CatchStatement)clone();  if (body != null) {    s.body=body.copyInline(ctx,valNeeded);  }  if (field != null) {    s.field=field.copyInline(ctx);  }  return s;}  }
class C{  public static void shuffle(List<?> list,Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  public void select(OMGraphicList list){  if (list != null) {    for (    OMGraphic omg : list) {      if (selectedList == null) {        selectedList=new OMGraphicList();      }      if (omg instanceof OMGraphicList && !((OMGraphicList)omg).isVague()) {        select((OMGraphicList)omg);      } else {        selectedList.add(omg);      }    }  }}  }
class C{  public void playFileForEntrance(String fileName,VoiceJoinEvent event) throws Exception {  if (event == null)   return;  try {    moveToChannel(event.getChannel(),event.getGuild());    LOG.info("Playing file for entrance of user: " + fileName);    try {      playFile(fileName,event.getGuild());    } catch (    SoundPlaybackException e) {      LOG.info("Could not find any sound to play for entrance of user: " + fileName);    }  } catch (  SoundPlaybackException e) {    LOG.debug(e.toString());  }}  }
class C{  @Field(38) public Pointer<DECIMAL> pdecVal(){  return this.io.getPointerField(this,38);}  }
class C{  private static PlotDataSolverFactory instance(){  if (null == singleton) {    createSingleton();  }  return singleton;}  }
class C{  public static void combineIdenticalTransitRoutes(TransitSchedule schedule){  log.info("Combining TransitRoutes with identical stop sequence...");  int combined=0;  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    Map<List<String>,List<TransitRoute>> profiles=new HashMap<>();    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      List<String> stopFacilitySequence=new LinkedList<>();      for (      TransitRouteStop routeStop : transitRoute.getStops()) {        stopFacilitySequence.add(routeStop.getStopFacility().getId().toString());      }      MapUtils.getList(stopFacilitySequence,profiles).add(transitRoute);    }    for (    List<TransitRoute> routeList : profiles.values()) {      if (routeList.size() > 1) {        TransitRoute finalRoute=routeList.get(0);        for (int i=1; i < routeList.size(); i++) {          combined++;          transitLine.removeRoute(routeList.get(i));          for (          Departure departure : routeList.get(i).getDepartures().values()) {            finalRoute.addDeparture(departure);          }        }      }    }  }  log.info("... Combined " + combined + " transit routes");}  }
class C{  protected void timeoutLinks(){  List<Link> eraseList=new ArrayList<Link>();  Long curTime=System.currentTimeMillis();  boolean linkChanged=false;  lock.writeLock().lock();  try {    Iterator<Entry<Link,LinkInfo>> it=this.links.entrySet().iterator();    while (it.hasNext()) {      Entry<Link,LinkInfo> entry=it.next();      Link lt=entry.getKey();      LinkInfo info=entry.getValue();      if ((info.getUnicastValidTime() != null) && (info.getUnicastValidTime().getTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        info.setUnicastValidTime(null);        linkChanged=true;      }      if ((info.getMulticastValidTime() != null) && (info.getMulticastValidTime().getTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        info.setMulticastValidTime(null);        linkChanged=true;      }      if (info.getUnicastValidTime() == null && info.getMulticastValidTime() == null) {        eraseList.add(entry.getKey());      } else       if (linkChanged) {        updates.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),getLinkType(lt,info),UpdateOperation.LINK_UPDATED));      }    }    if ((eraseList.size() > 0) || linkChanged) {      deleteLinks(eraseList,"LLDP timeout");    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  private SerializerWriteString(){}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.TERMINAL_EXPRESSION;}  }
class C{  @Deprecated DataEvent(){}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  ArrayList<Attribute> atts;  atts=new ArrayList<Attribute>();  atts.add(new Attribute("x"));  m_RawData=new Instances(getRelationNameToUse(),atts,0);  m_Filter=new AddExpression();  m_Filter.setName("y");  m_Filter.setExpression(getExpression());  m_Filter.setInputFormat(m_RawData);  return super.defineDataFormat();}  }
class C{  public static List<Node> asList(int[] indices,List<Node> nodes){  List<Node> list=new LinkedList<>();  for (  int i : indices) {    list.add(nodes.get(i));  }  return list;}  }
class C{  private void initGeneralRegistrationPostData(List<NameValuePair> regParams,RequestData data){  setUserProperties(data,regParams);  setAuthenticationPostParameters(regParams,data);  setWPFControlParameters(data,regParams);  setCallbackPostParameters(regParams,data);  setChoiceRestrictionPostParameters(regParams,data);  regParams.add(new NameValuePair(HeidelpayPostParameter.IDENTIFICATION_TRANSACTIONID,data.getOrganizationKey() + " registration"));  regParams.add(new NameValuePair(HeidelpayPostParameter.PAYMENT_INFO_KEY,String.valueOf(data.getPaymentInfoKey())));  regParams.add(new NameValuePair(HeidelpayPostParameter.PAYMENT_INFO_ID,data.getPaymentInfoId()));  regParams.add(new NameValuePair(HeidelpayPostParameter.PAYMENT_TYPE_KEY,String.valueOf(data.getPaymentTypeKey())));  regParams.add(new NameValuePair(HeidelpayPostParameter.ORGANIZATION_KEY,String.valueOf(data.getOrganizationKey())));  regParams.add(new NameValuePair(HeidelpayPostParameter.USER_LOCALE,data.getCurrentUserLocale()));  String baseUrl=data.getProperty(HeidelpayConfigurationKey.BASE_URL.name());  regParams.add(new NameValuePair(HeidelpayPostParameter.BASE_URL,baseUrl));  String jsPath=data.getProperty(HeidelpayConfigurationKey.PSP_FRONTEND_JS_PATH.name());  regParams.add(new NameValuePair(HeidelpayPostParameter.FRONTEND_JS_SCRIPT,jsPath));  regParams.add(new NameValuePair(HeidelpayPostParameter.BES_PAYMENT_REGISTRATION_WSDL,data.getProperty(HeidelpayConfigurationKey.PSP_PAYMENT_REGISTRATION_WSDL.name())));  regParams.add(new NameValuePair(HeidelpayPostParameter.BES_PAYMENT_REGISTRATION_ENDPOINT,data.getProperty(HeidelpayConfigurationKey.PSP_PAYMENT_REGISTRATION_ENDPOINT.name())));}  }
class C{  public void load(){}  }
class C{  public boolean isEnabled(){  return getBooleanProperty(PROPERTY_ENABLED);}  }
class C{  private int lChild(int i){  return (i << 1) + 1;}  }
class C{  public void addModel(Model model){  models.add(model);}  }
class C{  public Observable<BrewerySearchResult> searchBreweries(String query){  return routes.searchBreweries(KEY,Normalizer.get().normalizeSearchQuery(query)).flatMapIterable(null);}  }
class C{  private static int normalizeCapacity(int initialCapacity){  int actualCapacity=1;  while (actualCapacity < initialCapacity) {    actualCapacity<<=1;    if (actualCapacity < 0) {      actualCapacity=1 << 30;      break;    }  }  return actualCapacity;}  }
class C{  public static void recursiveSetEnabled(Composite composite,boolean enabled){  for (  Control control : composite.getChildren()) {    if (control instanceof Composite) {      recursiveSetEnabled((Composite)control,enabled);    }    control.setEnabled(enabled);  }}  }
class C{  public boolean isParseSitemapXml(){  return parseSitemapXml;}  }
class C{  public void generateWindowRef(){  String initref=this.getClass().getName();  if ((this.getTitle() != null) && (!this.getTitle().equals(""))) {    if (initref.equals(JmriJFrame.class.getName())) {      initref=this.getTitle();    } else {      initref=initref + ":" + this.getTitle();    }  }  int refNo=1;  String ref=initref;  for (  JmriJFrame j : list) {    if (j != this && j.getWindowFrameRef() != null && j.getWindowFrameRef().equals(ref)) {      ref=initref + ":" + refNo;      refNo++;    }  }  log.debug("Created windowFrameRef: {}",ref);  windowFrameRef=ref;}  }
class C{  public Vertex parseStateByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex state=network.createTemporyVertex();  state.addRelationship(Primitive.INSTANTIATION,Primitive.STATE);  long id=dataStream.readLong();  while (id > 0) {    Vertex next=network.findById(id);    Vertex vertex=null;    if (next == null) {      id=dataStream.readLong();      continue;    }    if (next.is(Primitive.CASE)) {      vertex=parseCaseByteCode(dataStream,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (next.is(Primitive.QUOTIENT)) {      parseQuotientByteCode(state,dataStream,network);    } else     if (next.is(Primitive.DO)) {      vertex=parseDoByteCode(dataStream,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (next.is(Primitive.GOTO)) {      vertex=parseGotoByteCode(dataStream,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (next.is(Primitive.PUSH)) {      vertex=parsePushByteCode(dataStream,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (next.is(Primitive.RETURN)) {      vertex=parseReturnByteCode(dataStream,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    }    id=dataStream.readLong();  }  return state;}  }
class C{  public boolean logModified(Logger log){  if (!CauchoUtil.getFullVersion().equals(_version)) {    log.info("Baratine version has changed to " + CauchoUtil.getFullVersion());    return true;  } else   return false;}  }
class C{  public static boolean isElementWithName(@NotNull final Collection<? extends PyElement> elements,@NotNull final FQNamesProvider... namesProviders){  for (  final PyElement element : elements) {    if (isName(element,namesProviders)) {      return true;    }  }  return false;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof MAssignmentSlot) {    MAssignmentSlot cmp=(MAssignmentSlot)obj;    if (m_startTime.equals(cmp.getStartTime()) && m_endTime.equals(cmp.getEndTime()) && m_status == cmp.getStatus() && m_name.equals(cmp.getName()) && m_description.equals(cmp.getDescription()))     return true;  }  return false;}  }
class C{  @SuppressWarnings("TooBroadScope") private void rehash(){  if (cnt >= MAXIMUM_CAPACITY || cnt <= threshold)   return;  boolean release=false;  long oldTblAddr=-1;  long oldMemCap=-1;  lock.writeLock().lock();  try {    long oldCap=cap;    oldMemCap=memCap;    oldTblAddr=tblAddr;    if (cnt >= MAXIMUM_CAPACITY || cnt <= threshold)     return;    long newCap=oldCap << 1;    long newMemCap=newCap * 8;    if (DEBUG)     X.println("Rehashing [size=" + totalCnt.sum() + ", segIdx="+ idx+ ", oldCap="+ oldCap+ ", oldMemCap="+ oldMemCap+ ", newCap="+ newCap+ ", newMemCap="+ newMemCap+ ']');    long newTblAddr=mem.allocateSystem(newMemCap,true);    long oldTblEnd=oldTblAddr + memCap;    for (long oldBinAddr=oldTblAddr; oldBinAddr < oldTblEnd; oldBinAddr+=8) {      long entryAddr=Bin.first(oldBinAddr,mem);      if (entryAddr == 0)       continue;      while (true) {        int hash=Entry.hash(entryAddr,mem);        long next=Entry.nextAddress(entryAddr,mem);        long newBinAddr=binAddress(hash,newTblAddr,newCap);        long newFirst=Bin.first(newBinAddr,mem);        Bin.first(newBinAddr,entryAddr,mem);        Entry.nextAddress(entryAddr,newFirst,mem);        if (next == 0)         break; else         entryAddr=next;      }    }    tblAddr=newTblAddr;    memCap=newMemCap;    cap=newCap;    threshold=(long)(newCap * load);    release=true;    if (evtLsnr != null)     evtLsnr.onEvent(REHASH);  }  finally {    lock.writeLock().unlock();    if (release) {      assert oldTblAddr != tblAddr;      assert oldTblAddr != -1;      assert oldMemCap != -1;      mem.releaseSystem(oldTblAddr,oldMemCap);    }  }}  }
class C{  protected boolean dropMessage(RTMP rtmp,int channelId,IRTMPEvent message){  boolean drop=false;  if (rtmp.getMode() == RTMP.MODE_SERVER) {    boolean isVideo=false;    if (message instanceof Ping) {      final Ping pingMessage=(Ping)message;      if (pingMessage.getEventType() == Ping.STREAM_PLAYBUFFER_CLEAR) {        final int channel=(4 + ((pingMessage.getValue2() - 1) * 5));        rtmp.setLastTimestampMapping(channel,null);        rtmp.setLastTimestampMapping(channel + 1,null);        rtmp.setLastTimestampMapping(channel + 2,null);      }      return false;    }    if ((isVideo=message instanceof VideoData) || message instanceof AudioData) {      if (message.getTimestamp() == 0) {        return false;      }      boolean isLive=message.getSourceType() == Constants.SOURCE_TYPE_LIVE;      long timestamp=(message.getTimestamp() & 0xFFFFFFFFL);      LiveTimestampMapping mapping=rtmp.getLastTimestampMapping(channelId);      long now=System.currentTimeMillis();      if (mapping == null || timestamp < mapping.getLastStreamTime()) {        log.debug("Resetting clock time ({}) to stream time ({})",now,timestamp);        mapping=new LiveTimestampMapping(now,timestamp);        rtmp.setLastTimestampMapping(channelId,mapping);      }      mapping.setLastStreamTime(timestamp);      long clockTimeOfMessage=mapping.getClockStartTime() + timestamp - mapping.getStreamStartTime();      long tardiness=clockTimeOfMessage - now;      if (isLive && dropLiveFuture) {        tardiness=Math.abs(tardiness);      }      IConnection conn=Red5.getConnectionLocal();      if (conn != null) {        tardiness-=conn.getLastPingTime();      } else {        log.debug("Connection is null");      }      if (tardiness < baseTolerance) {      } else       if (tardiness > highestTolerance) {        log.debug("Dropping late message: {}",message);        if (isVideo) {          mapping.setKeyFrameNeeded(true);        }        drop=true;      } else {        if (isVideo) {          VideoData video=(VideoData)message;          if (video.getFrameType() == FrameType.KEYFRAME) {            mapping.setKeyFrameNeeded(false);          } else           if (tardiness >= baseTolerance && tardiness < midTolerance) {            if (video.getFrameType() == FrameType.DISPOSABLE_INTERFRAME) {              log.debug("Dropping disposible frame; message: {}",message);              drop=true;            }          } else           if (tardiness >= midTolerance && tardiness <= highestTolerance) {            log.debug("Dropping disposible or inter frame; message: {}",message);            drop=true;          }        }      }    }    log.debug("Drop data: {}",drop);  }  return drop;}  }
class C{  private MobileDoc preparePage(String loginInfo){  MobileDoc doc=MobileDoc.create("Workflow");  head header=doc.getHead();  body b=doc.getBody();  header.addElement(new script("",MobileEnv.getBaseDirectory("/js/window.js")));  header.addElement(new link().setRel("stylesheet").setHref(MobileEnv.getBaseDirectory("/css/window.css")));  String title="Workflow" + " - " + loginInfo;  b.addElement(new script("top.document.title='" + title + "';"));  return doc;}  }
class C{  protected IntervalleObject computeContinuousStatistic(DimensionIndex root){  try {    ExpressionAST def=root.getAxis().getDefinitionSafe();    if (def instanceof ColumnReference) {      Column column=((ColumnReference)def).getColumn();      Universe universe=root.getAxis().getParent().getUniverse();      DatasourceDefinition ds=DatabaseServiceImpl.INSTANCE.getDatasourceDefinition(universe.getProject());      IDatabaseStatistics stats=ds.getDBManager().getStatistics();      if (stats != null) {        if (stats.isPartitionTable(column.getTable())) {          PartitionInfo partition=stats.getPartitionInfo(column.getTable());          if (partition.isPartitionKey(column)) {            List<PartitionTable> partitions=partition.getPartitionTables();            Object lower=null;            Object upper=null;            for (            PartitionTable partitionTable : partitions) {              try {                ObjectStatistics tableStats=stats.getStatistics(partitionTable.getTable());                if (tableStats.getSize() > 0) {                  Object min=partitionTable.getRangeStart();                  Object max=partitionTable.getRangeEnd();                  IntervalleObject range=IntervalleObject.createInterval(min,max);                  if (range != null) {                    if (lower == null) {                      lower=range.getUpperBound();                    } else {                      if (range.compareUpperBoundTo(lower) < 0) {                        lower=range.getUpperBound();                      }                    }                    if (upper == null) {                      upper=range.getLowerBound();                    } else {                      if (range.compareLowerBoundTo(upper) > 0) {                        upper=range.getLowerBound();                      }                    }                  }                }              } catch (              SQLException e) {                logger.warn(e.getMessage());              }            }            return IntervalleObject.createInterval(lower,upper);          }        } else {          ColumnStatistics colstats=stats.getStatistics(column);          if (colstats != null) {            Object min=colstats.getMin();            Object max=colstats.getMax();            return IntervalleObject.createInterval(min,max);          }        }      }    }  } catch (  ExecutionException e) {    logger.error(e.getMessage());  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getTitle();}  }
class C{  public static Command show(String title,String text,Command defaultCommand,Command[] cmds,int type,Image icon,long timeout,Transition transition){  Map<String,String> h=UIManager.getInstance().getBundle();  if (h != null && text != null) {    Object o=h.get(text);    if (o != null) {      text=(String)o;    }  }  TextArea t=new TextArea(text,3,30);  t.setUIID("DialogBody");  t.setEditable(false);  return show(title,t,defaultCommand,cmds,type,icon,timeout,transition);}  }
class C{  public static InetAddress findConnectingAddress(InetSocketAddress targetAddress,long maxWaitMillis,long startLoggingAfter) throws IOException {  if (targetAddress == null) {    throw new NullPointerException("targetAddress must not be null");  }  if (maxWaitMillis <= 0) {    throw new IllegalArgumentException("Max wait time must be positive");  }  final long startTime=System.currentTimeMillis();  long currentSleepTime=MIN_SLEEP_TIME;  long elapsedTime=0;  while (elapsedTime < maxWaitMillis) {    AddressDetectionState strategy=AddressDetectionState.LOCAL_HOST;    boolean logging=elapsedTime >= startLoggingAfter;    if (logging) {      LOG.info("Trying to connect to " + targetAddress);    }    do {      InetAddress address=findAddressUsingStrategy(strategy,targetAddress,logging);      if (address != null) {        return address;      }switch (strategy) {case LOCAL_HOST:        strategy=AddressDetectionState.ADDRESS;      break;case ADDRESS:    strategy=AddressDetectionState.FAST_CONNECT;  break;case FAST_CONNECT:strategy=AddressDetectionState.SLOW_CONNECT;break;case SLOW_CONNECT:strategy=null;break;default :throw new RuntimeException("Unsupported strategy: " + strategy);}} while (strategy != null);elapsedTime=System.currentTimeMillis() - startTime;long toWait=Math.min(maxWaitMillis - elapsedTime,currentSleepTime);if (toWait > 0) {if (logging) {LOG.info("Could not connect. Waiting for {} msecs before next attempt",toWait);} else {LOG.debug("Could not connect. Waiting for {} msecs before next attempt",toWait);}try {Thread.sleep(toWait);} catch (InterruptedException e) {throw new IOException("Connection attempts have been interrupted.");}}currentSleepTime=Math.min(2 * currentSleepTime,MAX_SLEEP_TIME);}LOG.warn("Could not connect to {}. Selecting a local address using heuristics.",targetAddress);InetAddress heuristic=findAddressUsingStrategy(AddressDetectionState.HEURISTIC,targetAddress,true);if (heuristic != null) {return heuristic;} else {LOG.warn("Could not find any IPv4 address that is not loopback or link-local. Using localhost address.");return InetAddress.getLocalHost();}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void unconfigureArrowButton(){  if (arrowButton != null) {    arrowButton.removeMouseListener(popup.getMouseListener());    arrowButton.removeMouseMotionListener(popup.getMouseMotionListener());  }}  }
class C{  public void wipeSlot(int slot){  for (  T obj : objToCounts.keySet()) {    resetSlotCountToZero(obj,slot);  }}  }
class C{  public CategoryFilter(List<ICategory> included,List<ICategory> excluded){  if (included != null) {    categories=included;  } else {    categories=new LinkedList<ICategory>();  }  if (excluded != null) {    excludeCategories=excluded;  } else {    excludeCategories=new LinkedList<ICategory>();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void writeVerifyTypeInfo(int tag,int data){  output.write(tag);  if (tag == StackMap.OBJECT || tag == StackMap.UNINIT)   write16bit(data);}  }
class C{  public boolean isStandby(){  return !isActiveSite();}  }
class C{  public static TreeMap<Integer,Collection<Revisions>> listIDs(final String hostport,final int depth,final State state){switch (state) {case INVENTORY:    return inventory.listIDs(hostport,depth);case ARCHIVE:  return archive.listIDs(hostport,depth);default :TreeMap<Integer,Collection<Revisions>> a=inventory.listIDs(hostport,depth);a.putAll(archive.listIDs(hostport,depth));return a;}}  }
class C{  private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel rsm,ListSelectionModel csm){  int totalCount;  int minX, maxX, minY, maxY;  boolean rs=table.getRowSelectionAllowed();  boolean cs=table.getColumnSelectionAllowed();  if (rs && cs) {    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();    minX=csm.getMinSelectionIndex();    maxX=csm.getMaxSelectionIndex();    minY=rsm.getMinSelectionIndex();    maxY=rsm.getMaxSelectionIndex();  } else   if (rs) {    totalCount=table.getSelectedRowCount();    minX=0;    maxX=table.getColumnCount() - 1;    minY=rsm.getMinSelectionIndex();    maxY=rsm.getMaxSelectionIndex();  } else   if (cs) {    totalCount=table.getSelectedColumnCount();    minX=csm.getMinSelectionIndex();    maxX=csm.getMaxSelectionIndex();    minY=0;    maxY=table.getRowCount() - 1;  } else {    totalCount=0;    minX=maxX=minY=maxY=0;  }  boolean stayInSelection;  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {    stayInSelection=false;    maxX=table.getColumnCount() - 1;    maxY=table.getRowCount() - 1;    minX=Math.min(0,maxX);    minY=Math.min(0,maxY);  } else {    stayInSelection=true;  }  if (dy == 1 && leadColumn == -1) {    leadColumn=minX;    leadRow=-1;  } else   if (dx == 1 && leadRow == -1) {    leadRow=minY;    leadColumn=-1;  } else   if (dy == -1 && leadColumn == -1) {    leadColumn=maxX;    leadRow=maxY + 1;  } else   if (dx == -1 && leadRow == -1) {    leadRow=maxY;    leadColumn=maxX + 1;  }  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);  do {    calcNextPos(dx,minX,maxX,dy,minY,maxY);  } while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));  return stayInSelection;}  }
class C{  public static Settings init(){  return settings;}  }
class C{  public boolean hasReview(PlatformUser user){  return (getProductReview(user) != null);}  }
class C{  public Matrix4f transpose3x3(){  return transpose3x3(this);}  }
class C{  public void put(int column,int row,boolean value){  if (column < 0 || column >= columns || row < 0 || row >= rows)   throw new IndexOutOfBoundsException("column:" + column + ", row:"+ row);  QuickBitVector.put(bits,row * columns + column,value);}  }
class C{  protected IonInt integer(int i){  return system().newInt(i);}  }
class C{  void remove(final Profile profile){  profiles.remove(profile);}  }
class C{  public static void refreshIOFiles(@NotNull final Collection<File> files){  if (!files.isEmpty()) {    LocalFileSystem.getInstance().refreshIoFiles(files);  }}  }
class C{  public MiniSolrCloudCluster(int numServers,Path baseDir,JettyConfig jettyConfig) throws Exception {  this(numServers,baseDir,DEFAULT_CLOUD_SOLR_XML,jettyConfig,null);}  }
class C{  public final boolean containsKey(String key){  return this.cards.containsKey(key);}  }
class C{  public <T>List<T> testTwoThreadsOneItem(T a,T b){  Trace.trace(Item.SCHEDULER,"testTwoThreadsOneItem: in");  List<T> results=Collections.synchronizedList(new ArrayList<T>(2));  Scheduler.scheduleMutator(new TestMutator<T>(results,a));  Scheduler.scheduleMutator(new TestMutator<T>(results,b));  Scheduler.schedule();  Trace.trace(Item.SCHEDULER,"testTwoThreadsOneItem: out");  return results;}  }
class C{  public PredictiveInfoCalculatorKraskov() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(MI_CALCULATOR_KRASKOV2);}  }
class C{  @Override public void printGeneralUserData(IStructuredOutputWriter out) throws Exception {  super.printGeneralUserData(out);}  }
class C{  private Replace parseReplace(){  Replace command=new Replace(session);  currentPrepared=command;  read("INTO");  Table table=readTableOrView();  command.setTable(table);  if (readIf("(")) {    if (isSelect()) {      command.setQuery(parseSelect());      read(")");      return command;    }    Column[] columns=parseColumnList(table);    command.setColumns(columns);  }  if (readIf("VALUES")) {    do {      ArrayList<Expression> values=New.arrayList();      read("(");      if (!readIf(")")) {        do {          if (readIf("DEFAULT")) {            values.add(null);          } else {            values.add(readExpression());          }        } while (readIfMore());      }      command.addRow(values.toArray(new Expression[values.size()]));    } while (readIf(","));  } else {    command.setQuery(parseSelect());  }  return command;}  }
class C{  protected double computePrefWidth(double height,double topInset,double rightInset,double bottomInset,double leftInset){  MultiSelect<E> control=getSkinnable();  double hgap=control.getHgap().doubleValue();  double vgap=control.getVgap().doubleValue();  double prefRowHeight=getPrefRowHeight();  int childCount=getChildren().size();  int rows=height <= 0 ? 1 : (int)Math.max(1,Math.floor((prefRowHeight + vgap) / height));  int perRow=(int)Math.ceil(childCount / rows);  double widestRow=0;  int childPos=0;  for (int rowCount=0; rowCount < rows; rowCount++) {    double rowWidth=0;    double childPosInRow=0;    while (childPosInRow < perRow && childPos < childCount) {      Node child=getChildren().get(childPos);      rowWidth+=child.prefWidth(prefRowHeight) + hgap;      childPos++;      childPosInRow++;    }    if (rowWidth > widestRow)     widestRow=rowWidth;  }  return widestRow + leftInset + rightInset - hgap;}  }
class C{  public final void testEqualsObject07(){  assertFalse(new ECFieldF2m(2000).equals(new Object()));}  }
class C{  private static void adjustMappingPairVector(int col,int incr,Vector<MappingPair> vec){  int i;  for (i=0; (i < vec.size()) && (vec.elementAt(i).col < col); i++) {  }  if (i == vec.size()) {    vec.add(new MappingPair(col,incr));  } else   if (vec.elementAt(i).col == col) {    vec.elementAt(i).inc=vec.elementAt(i).inc + incr;  } else {    vec.insertElementAt(new MappingPair(col,incr),i);  }}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    dynParameter();    jbInit();    dynInit();    frame.getContentPane().add(mainPanel,BorderLayout.CENTER);    frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public final void sendRequest() throws IOException {  if (responseSource != null) {    return;  }  prepareRawRequestHeaders();  initResponseSource();  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache != null) {    responseCache.trackResponse(responseSource);  }  if (requestHeaders.isOnlyIfCached() && responseSource.requiresConnection()) {    if (responseSource == ResponseSource.CONDITIONAL_CACHE) {      Util.closeQuietly(cachedResponseBody);    }    this.responseSource=ResponseSource.CACHE;    this.cacheResponse=GATEWAY_TIMEOUT_RESPONSE;    RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(cacheResponse.getHeaders(),true);    setResponse(new ResponseHeaders(uri,rawResponseHeaders),cacheResponse.getBody());  }  if (responseSource.requiresConnection()) {    sendSocketRequest();  } else   if (connection != null) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  public IdThread(int id){  this.id=id;}  }
class C{  public boolean shouldParse(){  return shouldParseId || shouldParseRouting || shouldParseTimestamp;}  }
class C{  public static boolean isHttpStatusCode(Throwable throwable,int statusCode){  return throwable instanceof HttpException && ((HttpException)throwable).code() == statusCode;}  }
class C{  public boolean isLastInstructionInMethod(){  return equals(getRawCFG().getInstructionWithBiggestId());}  }
class C{  public SparseTernaryPolynomial(IntegerPolynomial intPoly){  this(intPoly.coeffs);}  }
class C{  public void decorate(OutputNode node,Decorator secondary){  decorator.decorate(node,secondary);}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public static ClusterNode primaryNode(GridCacheContext ctx,Object key){  assert ctx != null;  assert key != null;  CacheConfiguration cfg=ctx.cache().configuration();  if (cfg.getCacheMode() != PARTITIONED)   return ctx.localNode();  return ctx.affinity().primary(key,ctx.affinity().affinityTopologyVersion());}  }
class C{  private static boolean areArgumentsValid(String everythingBeforeQuery,String query,String fragment){  if (everythingBeforeQuery == null || query == null || fragment == null)   return false;  URLHelper newHelper=new URLHelper(everythingBeforeQuery + query + fragment);  if (!newHelper.getEverythingBeforeQuery().equals(everythingBeforeQuery) || !newHelper.getQuery().equals(query) || !newHelper.getFragment().equals(fragment)) {    return false;  }  return true;}  }
class C{  public void start(@NonNull Activity activity){  start(activity,REQUEST_CROP);}  }
class C{  public boolean isBackgroundSnapshotsSupported(){  return backgroundSnapshotsSupported;}  }
class C{  public boolean isFile() throws SmbException {  if (getUncPath0().length() == 1) {    return false;  }  exists();  return (attributes & ATTR_DIRECTORY) == 0;}  }
class C{  public String toString(){  return "Organic";}  }
class C{  public Iterator inNeighbors(Node n){  return new NeighborIterator(n,inEdges(n));}  }
class C{  @Path("revert") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse revert(final RevertRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.revert(request);}  }
class C{  public static String encodeQueryParamSaveEncodings(String segment){  String result=encodeFromArray(segment,queryNameValueEncoding,false);  result=encodeNonCodes(result);  return result;}  }
class C{  public final double mean(){  return distribution.mean() + offset;}  }
class C{  private static boolean hasConditions(Request request){  return request.header("If-Modified-Since") != null || request.header("If-None-Match") != null;}  }
class C{  public HelloRequest(HandshakeIODataStream in,int length) throws IOException {  if (length != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect HelloRequest");  }}  }
class C{  public Intent putStringArrayListExtra(String name,ArrayList<String> value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putStringArrayList(name,value);  return this;}  }
class C{  public JenkinsServer(URI serverUri,String username,String passwordOrToken){  this(new JenkinsHttpClient(serverUri,username,passwordOrToken));}  }
class C{  public void populateDAO(Object value,int row,int column){  final CodeAttribute element=getData().getCodeAttribute().get(row);switch (column) {case 0:{      element.setName((String)value);      break;    }case 1:{    element.setDescription((String)value);    break;  }case 2:{  element.setDefaultValue((String)value);  break;}case 3:{element.setClassName(((DataType)value).getCode());break;}case 4:{element.setEditorClassName((String)value);break;}default :{}}element.setDirty(true);}  }
class C{  void addEntry(int hash,K key,V value,int bucketIndex){  Entry<K,V> e=table[bucketIndex];  table[bucketIndex]=new Entry<>(hash,key,value,e,keyEquality);  if (size++ >= threshold)   resize(2 * table.length);}  }
class C{  public void endGeneralEntity(String name,Augmentations augs) throws XNIException {  try {    if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fLexicalHandler != null) {        fLexicalHandler.endEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public void addTable(Table table){  if (table != null) {    tables.add(table);  }}  }
class C{  protected int finish() throws IOException {  int result=0;  String outDir=CeylonUtils.resolveRepoUrl(opts.getOutRepo());  if (!isURL(outDir)) {    File root=new File(outDir);    if (root.exists()) {      if (!(root.isDirectory() && root.canWrite())) {        logger.error("Cannot write to " + root + ". Stop.");        result=1;      }    } else {      if (!FileUtil.mkdirs(root)) {        logger.error("Cannot create " + root + ". Stop.");        result=1;      }    }  }  for (  Map.Entry<Module,JsOutput> entry : output.entrySet()) {    JsOutput jsout=entry.getValue();    if (!compilingLanguageModule) {      jsout.publishUnsharedDeclarations(names);    }    if (opts.isModulify()) {      jsout.closeWrapper();    }    String moduleName=entry.getKey().getNameAsString();    String moduleVersion=entry.getKey().getVersion();    if (opts.getDiagnosticListener() != null)     opts.getDiagnosticListener().moduleCompiled(moduleName,moduleVersion);    final File jsart=jsout.close();    final File modart=jsout.getModelFile();    if (entry.getKey().isDefaultModule()) {      logger.info("Created module " + moduleName);    } else     if (!compilingLanguageModule) {      logger.info("Created module " + moduleName + "/"+ moduleVersion);    }    if (compilingLanguageModule) {      ArtifactContext artifact=new ArtifactContext(null,"delete","me",ArtifactContext.JS);      artifact.setForceOperation(true);      outRepo.putArtifact(artifact,jsart);    } else {      final ArtifactContext artifact=new ArtifactContext(null,moduleName,moduleVersion,ArtifactContext.JS);      artifact.setForceOperation(true);      outRepo.putArtifact(artifact,jsart);      final ArtifactContext martifact=new ArtifactContext(null,moduleName,moduleVersion,ArtifactContext.JS_MODEL);      martifact.setForceOperation(true);      outRepo.putArtifact(martifact,modart);      ShaSigner.signArtifact(outRepo,artifact,jsart,logger);      ShaSigner.signArtifact(outRepo,martifact,modart,logger);      if (opts.isGenerateSourceArchive()) {        ArtifactCreator sac=CeylonUtils.makeSourceArtifactCreator(outRepo,opts.getSrcDirs(),moduleName,moduleVersion,opts.hasVerboseFlag("cmr"),logger);        sac.copy(FileUtil.filesToPathList(jsout.getSources()));      }      if (resFiles != null && !resFiles.isEmpty()) {        ArtifactCreator sac=CeylonUtils.makeResourceArtifactCreator(outRepo,opts.getSrcDirs(),opts.getResourceDirs(),opts.getResourceRootName(),moduleName,moduleVersion,opts.hasVerboseFlag("cmr"),logger);        sac.copy(FileUtil.filesToPathList(filterForModule(resFiles,opts.getResourceDirs(),moduleName)));      }      if (!entry.getKey().isDefaultModule()) {        String npmdesc=new NpmDescriptorGenerator(entry.getKey(),opts.isGenerateSourceArchive(),resFiles != null && !resFiles.isEmpty()).generateDescriptor();        File npmfile=File.createTempFile("npm","json");        try {          try (FileWriter fw=new FileWriter(npmfile)){            fw.write(npmdesc);          }           final ArtifactContext npmArtifact=new ArtifactContext(null,moduleName,moduleVersion,ArtifactContext.NPM_DESCRIPTOR);          npmArtifact.setForceOperation(true);          outRepo.putArtifact(npmArtifact,npmfile);        }  finally {          npmfile.delete();        }      }    }    FileUtil.deleteQuietly(jsart);    if (modart != null) {      FileUtil.deleteQuietly(modart);    }  }  return result;}  }
class C{  public static Pair<Integer,Integer> count(final List<NaviNode> nodes){  int selected=0;  int invisible=0;  for (  final NaviNode graphNode : nodes) {    if (graphNode.getRawNode().isSelected()) {      selected++;    }    if (!graphNode.getRawNode().isVisible()) {      invisible++;    }  }  return new Pair<Integer,Integer>(selected,invisible);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== JPEG2000PictureSubDescriptor ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("rSiz = %d",this.rSiz));  sb.append(String.format("xSiz = %d",this.xSiz));  sb.append(String.format("ySiz = %d",this.ySiz));  sb.append(String.format("xoSiz = %d",this.xoSiz));  sb.append(String.format("yoSiz = %d",this.yoSiz));  sb.append(String.format("xtSiz = %d",this.xtSiz));  sb.append(String.format("ytSiz = %d",this.ytSiz));  sb.append(String.format("xtoSiz = %d",this.xtoSiz));  sb.append(String.format("ytoSiz = %d",this.ytoSiz));  sb.append(String.format("cSiz = %d",this.cSiz));  sb.append(this.picture_component_sizing.toString());  String codingStyleDefaultString="";  for (  byte b : coding_style_default) {    codingStyleDefaultString=codingStyleDefaultString.concat(String.format("%02x",b));  }  sb.append(String.format("coding_style_default = %s",codingStyleDefaultString));  String quantisationDefaultString="";  for (  byte b : coding_style_default) {    quantisationDefaultString=quantisationDefaultString.concat(String.format("%02x",b));  }  sb.append(String.format("quantisation_default = %s",quantisationDefaultString));  return sb.toString();}  }
class C{  public DLSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public void eventSetReceived(EventSet set){  currentEventSet=set;}  }
class C{  @Override public void process(T tuple){  boolean contains=values.contains(tuple);  if ((contains && !inverse) || (!contains && inverse)) {    filter.emit(cloneValue(tuple));  }}  }
class C{  public static <T>LinkedList<T> linkedList(){  return new LinkedList<T>();}  }
class C{  public static boolean isTrailSurrogate(char char16){  return (TRAIL_SURROGATE_MIN_VALUE <= char16 && char16 <= TRAIL_SURROGATE_MAX_VALUE);}  }
class C{  private Function wrapValueMethod(Method method){  return null;}  }
class C{  public double[] expectedCosts(double[] classProbs,Instance inst) throws Exception {  if (classProbs.length != m_size) {    throw new Exception("Length of probability estimates don't " + "match cost matrix");  }  if (!replaceStrings()) {    return expectedCosts(classProbs);  }  double[] costs=new double[m_size];  for (int x=0; x < m_size; x++) {    for (int y=0; y < m_size; y++) {      Object element=getCell(y,x);      double costVal;      if (!(element instanceof Double)) {        costVal=((AttributeExpression)element).evaluateExpression(inst);      } else {        costVal=((Double)element).doubleValue();      }      costs[x]+=classProbs[y] * costVal;    }  }  return costs;}  }
class C{  protected N4ClassDefinitionImpl(){  super();}  }
class C{  protected boolean pushNamespace(String prefix,String uri){  try {    if (m_prefixMap.pushNamespace(prefix,uri,m_elemContext.m_currentElemDepth)) {      startPrefixMapping(prefix,uri);      return true;    }  } catch (  SAXException e) {  }  return false;}  }
class C{  default boolean handleStoreStaticField(GraphBuilderContext b,ResolvedJavaField field,ValueNode value){  return false;}  }
class C{  protected MessageDigest(String algorithm){  this.algorithm=algorithm;}  }
class C{  public SVGOMSVGElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public CorrelationSpout(Config config,String topologyId,IMetadataChangeNotifyService changeNotifyService,int numOfRouterBolts){  this(config,topologyId,changeNotifyService,numOfRouterBolts,AlertConstants.DEFAULT_SPOUT_NAME,AlertConstants.DEFAULT_ROUTERBOLT_NAME);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void sendMessage(byte[] content,String contentType) throws NetworkException {  ByteArrayInputStream stream=new ByteArrayInputStream(content);  String msgId=IdGenerator.getIdentifier().replace('_','-');  mMsrpMgr.sendChunks(stream,msgId,contentType,content.length,TypeMsrpChunk.Unknown);  mTxPendingMessageIds.add(msgId);}  }
class C{  public boolean isVisibleInCatalog(){  return dataContainer.isVisibleInCatalog();}  }
class C{  public Building(){  super();}  }
class C{  public boolean containsKey(K key){  return contains(key);}  }
class C{  private void createFramebufferTexture(){  this.tex=glGenTextures();  glBindTexture(GL_TEXTURE_2D,tex);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  @Deprecated protected ActionListener createKeyboardResizeToggleListener(){  return new KeyboardResizeToggleHandler();}  }
class C{  public DragForce(float dragCoeff){  params=new float[]{dragCoeff};  minValues=new float[]{DEFAULT_MIN_DRAG_COEFF};  maxValues=new float[]{DEFAULT_MAX_DRAG_COEFF};}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addFrame(byte[] data,long timestamp){  addFrame(data,timestamp,null);}  }
class C{  public void removeCSSNavigableDocumentListener(CSSNavigableDocumentListener l){  EventListener[] listeners=(EventListener[])cssNavigableDocumentListeners.get(l);  if (listeners == null) {    return;  }  XBLEventSupport es=(XBLEventSupport)initializeEventSupport();  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",listeners[0],false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",listeners[1],false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",listeners[2],false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",listeners[3],false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",listeners[4],false);  cssNavigableDocumentListeners.remove(l);}  }
class C{  @Override public void updateNCharacterStream(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNCharacterStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void test_Of_EEEEE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c,EnumWithInnerClass.d,EnumWithInnerClass.e);  assertEquals("Size of enumSet should be 5:",5,enumSet.size());  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.a));  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.e));  try {    EnumSet.of((EnumWithInnerClass)null,null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.d,HugeEnumWithInnerClass.e);  assertEquals(5,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.e));  try {    EnumSet.of((HugeEnumWithInnerClass)null,null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }}  }
class C{  private void init(){  setLayout(new GridBagLayout());  GridBagConstraints constraints=new GridBagConstraints();  constraints.gridx=0;  constraints.gridy=99;  constraints.insets=new Insets(10,0,0,0);  constraints.weighty=1.0;  constraints.fill=GridBagConstraints.VERTICAL;  JLabel verticalFillLabel=new JLabel();  add(verticalFillLabel,constraints);}  }
class C{  public XMLString newstr(String string){  return new XString(string);}  }
class C{  private int calculateBarHeight(@IntRange(from=0) int minHeight,@IntRange(from=0) int maxHeight,float barX,int containerWidth){  float height;  if (barX <= containerWidth / 2) {    height=easeOut(barX,minHeight,maxHeight - minHeight,containerWidth / 2f);  } else {    height=easeIn(barX - containerWidth / 2f,maxHeight,minHeight - maxHeight,containerWidth / 2f);  }  return (int)Math.floor(height);}  }
class C{  public boolean equals(final Object obj){  if (obj instanceof RFC1960Filter) {    final RFC1960Filter filter=(RFC1960Filter)obj;    if (operands.size() != filter.operands.size()) {      return false;    }    final Filter[] operandArray=operands.toArray(new Filter[operands.size()]);    final Filter[] operandArray2=filter.operands.toArray(new Filter[operands.size()]);    for (int i=0; i < operandArray.length; i++) {      if (!operandArray[i].equals(operandArray2[i])) {        return false;      }    }    return true;  }  return false;}  }
class C{  public Route(Element e){  Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in route element when reading operations");  }  if ((a=e.getAttribute(Xml.NAME)) != null) {    _name=a.getValue();  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=a.getValue();  }  if (e.getChildren(Xml.LOCATION) != null) {    @SuppressWarnings("unchecked") List<Element> eRouteLocations=e.getChildren(Xml.LOCATION);    log.debug("route: ({}) has {} locations",getName(),eRouteLocations.size());    for (    Element eRouteLocation : eRouteLocations) {      register(new RouteLocation(eRouteLocation));    }  }}  }
class C{  private void createNotification(final int messageResId,final int defaults){  final Intent parentIntent=new Intent(this,FeaturesActivity.class);  parentIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  final Intent targetIntent=new Intent(this,CGMSActivity.class);  final Intent disconnect=new Intent(ACTION_DISCONNECT);  final PendingIntent disconnectAction=PendingIntent.getBroadcast(this,DISCONNECT_REQ,disconnect,PendingIntent.FLAG_UPDATE_CURRENT);  final PendingIntent pendingIntent=PendingIntent.getActivities(this,OPEN_ACTIVITY_REQ,new Intent[]{parentIntent,targetIntent},PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setContentIntent(pendingIntent);  builder.setContentTitle(getString(R.string.app_name)).setContentText(getString(messageResId,getDeviceName()));  builder.setSmallIcon(R.drawable.ic_stat_notify_cgms);  builder.setShowWhen(defaults != 0).setDefaults(defaults).setAutoCancel(true).setOngoing(true);  builder.addAction(new NotificationCompat.Action(R.drawable.ic_action_bluetooth,getString(R.string.csc_notification_action_disconnect),disconnectAction));  final Notification notification=builder.build();  final NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(NOTIFICATION_ID,notification);}  }
class C{  public void testRemoteConnect() throws Exception {  String methodName="testRemoteConnect";  IMqttAsyncClient mqttClient=null;  try {    mqttClient=new MqttAndroidClient(mContext,mqttServerURI,"testRemoteConnect");    IMqttToken connectToken=null;    IMqttToken subToken=null;    IMqttDeliveryToken pubToken=null;    IMqttToken disconnectToken=null;    connectToken=mqttClient.connect(null,null);    connectToken.waitForCompletion(waitForCompletionTime);    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);    MqttV3Receiver mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    MqttConnectOptions mqttConnectOptions=new MqttConnectOptions();    mqttConnectOptions.setCleanSession(false);    connectToken=mqttClient.connect(mqttConnectOptions,null,null);    connectToken.waitForCompletion(waitForCompletionTime);    String[] topicNames=new String[]{methodName + "/Topic"};    int[] topicQos={0};    subToken=mqttClient.subscribe(topicNames,topicQos,null,null);    subToken.waitForCompletion(waitForCompletionTime);    byte[] payload=("Message payload " + classCanonicalName + "."+ methodName).getBytes();    pubToken=mqttClient.publish(topicNames[0],payload,1,false,null,null);    pubToken.waitForCompletion(waitForCompletionTime);    boolean ok=mqttV3Receiver.validateReceipt(topicNames[0],0,payload);    if (!ok) {      fail("Receive failed");    }    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);  } catch (  Exception exception) {    fail("Failed:" + methodName + " exception="+ exception);  } finally {    if (mqttClient != null) {      mqttClient.close();    }  }}  }
class C{  private void sendNotModified(Response response,String etag,long lastModified){  response.status=Http.StatusCode.NOT_MODIFIED;  response.setHeader(ETAG,etag);}  }
class C{  public boolean isInheritedMember(){  return lastRetrievedSource == INHERITED;}  }
class C{  public static String executeRaw(String[] commandArray){  log.debug("Executing: {}",Arrays.toString(commandArray));  InputStreamReader in=null;  try {    Process p=Runtime.getRuntime().exec(commandArray,envp);    in=new InputStreamReader(p.getInputStream(),Charsets.UTF_8);    StringBuilder out=new StringBuilder();    int c;    while ((c=in.read()) != -1)     out.append((char)c);    return out.toString();  } catch (  IOException ex) {    log.error("IOException executing: {} envp: {}",Arrays.toString(commandArray),Arrays.toString(envp),ex);  } finally {    if (in != null) {      try {        in.close();      } catch (      Exception ignore) {      }    }  }  return "";}  }
class C{  public static double roundDownY(final double startValue){  return startValue - yStep;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static Minutes standardMinutesIn(ReadablePeriod period){  int amount=BaseSingleFieldPeriod.standardPeriodIn(period,DateTimeConstants.MILLIS_PER_MINUTE);  return Minutes.minutes(amount);}  }
class C{  public void testSecretKeyFactory04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SecretKeyFactory.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SecretKeyFactory.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException was not thrown as expected (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String name=m_arg0.execute(xctxt).str();  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int doc=dtm.getDocument();  String uri=dtm.getUnparsedEntityURI(name);  return new XString(uri);}  }
class C{  public static Vec2D fromRadians2(double angleInRad,double magnitude){  double x=magnitude * Math.sin(angleInRad);  double y=magnitude * Math.cos(angleInRad);  return new Vec2D(x,y);}  }
class C{  void cellToCenterPoint(int cellX,int cellY,int[] result){  regionToCenterPoint(cellX,cellY,1,1,result);}  }
class C{  public boolean isAlive(){  return alive;}  }
class C{  public static void assertEqualLines(String message,String expected,String actual){  String[] expectedLines=Strings.convertIntoLines(expected);  String[] actualLines=Strings.convertIntoLines(actual);  String expected2=(expectedLines == null ? null : Strings.concatenate(expectedLines,"\n"));  String actual2=(actualLines == null ? null : Strings.concatenate(actualLines,"\n"));  assertEquals(message,expected2,actual2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.673 -0500",hash_original_method="0D9E6D76CFD125A61E2F4A9B060ECF6F",hash_generated_method="0A2232B81CED8AC5B5403BB3517306E9") public GeneralName(int tag,byte[] name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if ((tag < 0) || (tag > 8)) {    throw new IOException("GeneralName: unknown tag: " + tag);  }  this.tag=tag;  this.name_encoding=new byte[name.length];  System.arraycopy(name,0,this.name_encoding,0,name.length);  this.name=nameASN1[tag].decode(this.name_encoding);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST:    return annotationList != null;case N4JSPackage.N4_CLASS_EXPRESSION__NAME:  return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  private String createString(String f){  return "maxThreadsPerBlock=" + maxThreadsPerBlock + f+ "maxThreadsDim="+ Arrays.toString(maxThreadsDim)+ f+ "maxGridSize="+ Arrays.toString(maxGridSize)+ f+ "sharedMemPerBlock="+ sharedMemPerBlock+ f+ "totalConstantMemory="+ totalConstantMemory+ f+ "regsPerBlock="+ regsPerBlock+ f+ "SIMDWidth="+ SIMDWidth+ f+ "memPitch="+ memPitch+ f+ "regsPerBlock="+ regsPerBlock+ f+ "clockRate="+ clockRate+ f+ "textureAlign="+ textureAlign;}  }
class C{  public TermVectorsRequest doc(BytesReference doc,boolean generateRandomId){  if (generateRandomId) {    this.id(String.valueOf(randomInt.getAndAdd(1)));  }  this.doc=doc;  return this;}  }
class C{  public DataModelPipeline(Regressor baseRegressor,DataTransform... transforms){  this(baseRegressor,new DataTransformProcess(transforms));}  }
class C{  public static void print(boolean x){  out.print(x);  out.flush();}  }
class C{  public int groupIndex(){  return groupIndex;}  }
class C{  public Quantity_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_normalizedUnit=jcas.getRequiredFeatureDE(casType,"normalizedUnit","uima.cas.String",featOkTst);  casFeatCode_normalizedUnit=(null == casFeat_normalizedUnit) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_normalizedUnit).getCode();  casFeat_normalizedQuantity=jcas.getRequiredFeatureDE(casType,"normalizedQuantity","uima.cas.Double",featOkTst);  casFeatCode_normalizedQuantity=(null == casFeat_normalizedQuantity) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_normalizedQuantity).getCode();  casFeat_unit=jcas.getRequiredFeatureDE(casType,"unit","uima.cas.String",featOkTst);  casFeatCode_unit=(null == casFeat_unit) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_unit).getCode();  casFeat_quantity=jcas.getRequiredFeatureDE(casType,"quantity","uima.cas.Double",featOkTst);  casFeatCode_quantity=(null == casFeat_quantity) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_quantity).getCode();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (variableName: ");  result.append(variableName);  result.append(')');  return result.toString();}  }
class C{  public String toString(){  if (null != m_value) {    return (m_value.toString());  } else   if (null != m_invalidValue) {    return m_invalidValue;  } else {    return "";  }}  }
class C{  @Override public void validate(){  this.archiveTable.revalidate();  this.surrogatePanel.validate();}  }
class C{  public MatrixReader(File file,int numberOfColumns) throws FileNotFoundException {  this(new FileReader(file),numberOfColumns);}  }
class C{  AuditService(ArgusHttpClient client){  super(client);}  }
class C{  public void paintToggleButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof PeriodType == false) {    return false;  }  PeriodType other=(PeriodType)obj;  return (Arrays.equals(iTypes,other.iTypes));}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static boolean bytesEqual(byte[] a1,byte[] a2){  if (a1 == a2) {    return true;  } else   if (a1 == null || a2 == null) {    return false;  } else   if (a1.length != a2.length) {    return false;  } else {    for (int i=0; i < a1.length; i++)     if (a1[i] != a2[i])     return false;  }  return true;}  }
class C{  public double sty(final double y){  if (y >= 0) {    if (y < height)     return y;    return y - height;  }  return y + height;}  }
class C{  @Override public ParamsRequestCondition combine(ParamsRequestCondition other){  Set<ParamExpression> set=new LinkedHashSet<>(this.expressions);  set.addAll(other.expressions);  return new ParamsRequestCondition(set);}  }
class C{  public void dispose(){  m_synchronizer.dispose();}  }
class C{  public JsProxy createResourceModel(String className){  return createModel(className,request.getResource());}  }
class C{  @Deprecated public static void logMessage(String message,int verbosityLevel){  getGlobal().log(message,verbosityLevel);}  }
class C{  private boolean processParameter(HttpServletRequest request,Properties ctx,MPayment p,WebUser wu){  StringBuffer sb=new StringBuffer();  p.setTenderType(MPayment.TENDERTYPE_CreditCard);  p.setTrxType(MPayment.TRXTYPE_Sales);  p.setA_EMail(wu.getEmail());  String ccType=WebUtil.getParameter(request,"CreditCard");  p.setCreditCardType(ccType);  String ccNumber=WebUtil.getParameter(request,"CreditCardNumber");  p.setCreditCardNumber(ccNumber);  String AD_Message=MPaymentValidate.validateCreditCardNumber(ccNumber,ccType);  if (AD_Message.length() > 0)   sb.append(Msg.getMsg(ctx,AD_Message)).append(" - ");  String ccVV=WebUtil.getParameter(request,"CreditCardVV");  p.setCreditCardVV(ccVV);  if (ccVV != null && ccVV.length() > 0) {    AD_Message=MPaymentValidate.validateCreditCardVV(ccVV,ccType);    if (AD_Message.length() > 0)     sb.append(Msg.getMsg(ctx,AD_Message)).append(" - ");  }  int mm=WebUtil.getParameterAsInt(request,"CreditCardExpMM");  p.setCreditCardExpMM(mm);  int yy=WebUtil.getParameterAsInt(request,"CreditCardExpYY");  p.setCreditCardExpYY(yy);  AD_Message=MPaymentValidate.validateCreditCardExp(mm,yy);  if (AD_Message.length() > 0)   sb.append(Msg.getMsg(ctx,AD_Message)).append(" - ");  String aName=WebUtil.getParameter(request,"A_Name");  if (aName == null || aName.length() == 0)   sb.append("Name - "); else   p.setA_Name(aName);  String aStreet=WebUtil.getParameter(request,"A_Street");  p.setA_Street(aStreet);  String aCity=WebUtil.getParameter(request,"A_City");  if (aCity == null || aCity.length() == 0)   sb.append("City - "); else   p.setA_City(aCity);  String aState=WebUtil.getParameter(request,"A_State");  p.setA_State(aState);  String aZip=WebUtil.getParameter(request,"A_Zip");  if (aZip == null || aZip.length() == 0)   sb.append("Zip - "); else   p.setA_Zip(aZip);  String aCountry=WebUtil.getParameter(request,"A_Country");  p.setA_Country(aCountry);  boolean ok=sb.length() == 0;  p.setErrorMessage(sb.toString());  if (ok) {    String SP="SavePayment";    String SavePayment=WebUtil.getParameter(request,SP);    if (SP.equals(SavePayment))     p.saveToBP_BankAccount(wu.getBankAccount());  }  return ok;}  }
class C{  public ReadyReconnectHandler(ImplDiscordAPI api){  super(api,false,"READY_RECONNECT");}  }
class C{  public static PluginInternalPreferences createDefault(final Context context){  final PluginInternalPreferences pluginPrefs=new PluginInternalPreferences();  pluginPrefs.setAppBuildVersion(VersionHelper.applicationVersionCode(context));  pluginPrefs.setWwwFolderInstalled(false);  pluginPrefs.setPreviousReleaseVersionName("");  pluginPrefs.setReadyForInstallationReleaseVersionName("");  pluginPrefs.setCurrentReleaseVersionName("");  final ApplicationConfig appConfig=ApplicationConfig.configFromAssets(context,PluginFilesStructure.CONFIG_FILE_NAME);  if (appConfig != null) {    pluginPrefs.setCurrentReleaseVersionName(appConfig.getContentConfig().getReleaseVersion());  }  return pluginPrefs;}  }
class C{  public Vertex parseTemplate(Vertex formula,TextStream stream,boolean debug,Network network){  return parseFormula(formula,stream,debug,network);}  }
class C{  public org.apache.nutch.storage.ProtocolStatus.Builder clearArgs(){  args=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  public Set<BreakpointAddress> stop(){  NaviLogger.info("Finalizing event list %s with %d events",eventList.getName(),eventList.getEventCount());  if (activeEchoBreakpointCount() == 0) {    return new HashSet<BreakpointAddress>();  }  lock.lock();  removeListeners();  final Set<BreakpointAddress> ebps=new HashSet<>(activeEchoBreakpoints.keySet());  breakpointManager.removeBreakpoints(BreakpointType.ECHO,ebps);  try {    for (    final ITraceLoggerListener listener : listeners) {      listener.removedBreakpoint();    }  } catch (  final IllegalArgumentException exception) {  }  activeEchoBreakpoints.clear();  lock.unlock();  for (  final ITraceLoggerListener listener : listeners) {    try {      listener.finished(eventList);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  return ebps;}  }
class C{  public int parseByte() throws DecodeException {  if (bufsize - offset < 1) {    throw new DecodeException("Insufficient data");  }  return buf[offset++] & 0xff;}  }
class C{  public static boolean shouldAnalyze(String className){  if (isTargetClassName(className))   return true;  if (inheritanceTree == null) {    return false;  }  if (Properties.INSTRUMENT_PARENT) {    if (inheritanceTree.getSuperclasses(Properties.TARGET_CLASS).contains(className))     return true;  }  if (Properties.INSTRUMENT_CONTEXT || ArrayUtil.contains(Properties.CRITERION,Criterion.DEFUSE)) {    CallGraph callGraph=callGraphs.get(Properties.TARGET_CLASS);    if (callGraph != null && callGraph.isCalledClass(className)) {      return true;    }  }  return false;}  }
class C{  public static <T1,T2,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,final Func2<T1,T2,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,joinFunction));}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeUTF(this.facetName);}  }
class C{  public SourceDocInfo_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_uri=jcas.getRequiredFeatureDE(casType,"uri","uima.cas.String",featOkTst);  casFeatCode_uri=(null == casFeat_uri) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_uri).getCode();  casFeat_offsetInSource=jcas.getRequiredFeatureDE(casType,"offsetInSource","uima.cas.Integer",featOkTst);  casFeatCode_offsetInSource=(null == casFeat_offsetInSource) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_offsetInSource).getCode();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void cancel(){  mHandleQueue.clear();}  }
class C{  public static byte[] PKCS5PasswordToBytes(char[] password){  return PBEParametersGenerator.PKCS5PasswordToBytes(password);}  }
class C{  private boolean classExists(Class<?> aClass){  if (xmlJmapper.classes == null)   return false;  return findXmlClass(aClass) != null ? true : false;}  }
class C{  @Override protected void tearDown() throws NamingException, JMSException {  NamingEnumeration<Binding> iter=context.listBindings("");  while (iter.hasMore()) {    Binding binding=iter.next();    Object connFactory=binding.getObject();    if (connFactory instanceof ActiveMQConnectionFactory) {    }  }}  }
class C{  @Override public void modifyVariableId(String oldId,String newId){  if (variable.equals(oldId)) {    variable=newId;  }}  }
class C{  protected static Button createRadioButton(Composite aParent,String aLabel){  Button button=new Button(aParent,SWT.RADIO | SWT.LEFT);  button.setText(aLabel);  button.setFont(aParent.getFont());  return button;}  }
class C{  public double predTransform(double pred){  return pred;}  }
class C{  public void drawPolygon(int xPoints[],int yPoints[],int nPoints){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing polygon: " + " nPoints: "+ nPoints+ " X's: "+ xPoints+ " Y's: "+ yPoints);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawPolygon(xPoints,yPoints,nPoints);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawPolygon(xPoints,yPoints,nPoints);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawPolygon(xPoints,yPoints,nPoints);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void scheduleTimer(CCTimer timer){  assert false : "Not implemented. Use scheduleSelector:forTarget:";}  }
class C{  @Override public void writeDefaultNamespace(String namespaceURI) throws XMLStreamException {  log.log(Level.FINE,"writeDefaultNamespace({0})",namespaceURI);  writeNamespace(XMLConstants.XMLNS_ATTRIBUTE,namespaceURI);}  }
class C{  public CharArrayMap(Map<?,? extends V> c,boolean ignoreCase){  this(c.size(),ignoreCase);  putAll(c);}  }
class C{  public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {  boolean lenient=json.isLenient();  json.setLenient(true);  try {    return Streams.parse(json);  } catch (  StackOverflowError e) {    throw new JsonParseException("Failed parsing JSON source: " + json + " to Json",e);  }catch (  OutOfMemoryError e) {    throw new JsonParseException("Failed parsing JSON source: " + json + " to Json",e);  }catch (  JsonParseException e) {    if (e.getCause() instanceof EOFException) {      return JsonNull.INSTANCE;    }    throw e;  } finally {    json.setLenient(lenient);  }}  }
class C{  public <A>boolean write(ByteBuffer src,long position,A attachment,CompletionHandler<Integer,? super A> handler){  writeReadChannelLock.lock();  try {    if (this.isOpened()) {      fileChannel.write(src,position,attachment,handler);      return true;    } else {      return false;    }  }  finally {    writeReadChannelLock.unlock();  }}  }
class C{  public boolean isModified(boolean isAsync){  long now=CurrentTime.currentTime();  if (now < _checkExpiresTime)   return _isModified;  if (_isChecking.getAndSet(true))   return _isModified;  _checkExpiresTime=now + _checkInterval;  if (isAsync) {    getWorker().wake();  } else {    try {      checkImpl();    }  finally {      _isChecking.set(false);    }  }  return _isModified;}  }
class C{  private void discoverPorts(VPlexApiClient client,StorageSystem vplexStorageSystem,List<StoragePort> allPorts,Map<String,StoragePort> autoUpgradePortsMap) throws VPlexCollectionException {  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  List<Initiator> newInitiatorPorts=new ArrayList<Initiator>();  try {    String initiatorHostName=null;    List<VPlexPortInfo> portInfoList=client.getPortInfo(false);    Map<String,VPlexTargetInfo> portTargetMap=client.getTargetInfoForPorts(portInfoList);    for (    VPlexPortInfo portInfo : portInfoList) {      s_logger.debug("VPlex port info: {}",portInfo.toString());      if (null == portInfo.getPortWwn()) {        s_logger.info("Not a FC port, skipping port {}",portInfo.getName());        continue;      }      if ((!portInfo.isFrontendPort()) && (!portInfo.isBackendPort())) {        s_logger.debug("Not a front/back-end port, skipping port {}",portInfo.getName());        continue;      }      String portWWN=WWNUtility.getWWNWithColons(portInfo.getPortWwn());      String portType=portInfo.isBackendPort() ? PortType.backend.name() : PortType.frontend.name();      s_logger.info("Found {} port {}",portType,portWWN);      if ((portWWN == null) || (portWWN.equals(OFFLINE_PORT_WWN))) {        s_logger.info("Skipping port {} with WWN {}",portInfo.getName(),portWWN);        continue;      }      StoragePort storagePort=findPortInDB(vplexStorageSystem,portInfo,autoUpgradePortsMap);      if (storagePort == null) {        s_logger.info("Creating new port {}",portWWN);        storagePort=new StoragePort();        storagePort.setId(URIUtil.createId(StoragePort.class));        storagePort.setPortNetworkId(portWWN);        storagePort.setPortName(portInfo.getName());        storagePort.setStorageDevice(vplexStorageSystem.getId());        String nativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,storagePort);        storagePort.setNativeGuid(nativeGuid);        storagePort.setLabel(nativeGuid);        storagePort.setPortType(portType);        storagePort.setTransportType(StorageProtocol.Block.FC.name());        setHADomainForStoragePort(vplexStorageSystem,storagePort,portInfo);        storagePort.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        newStoragePorts.add(storagePort);      } else {        existingStoragePorts.add(storagePort);      }      storagePort.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());      storagePort.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      storagePort.setPortSpeed(portInfo.getCurrentSpeed(SpeedUnits.GBITS_PER_SECOND));      storagePort.setOperationalStatus(getPortOperationalStatus(portInfo,portTargetMap));      if (portInfo.isBackendPort()) {        Initiator initiatorPort=findInitiatorInDB(portInfo);        if (initiatorPort == null) {          s_logger.info("Creating initiator for backend port",portWWN);          if (initiatorHostName == null) {            initiatorHostName=getInitiatorHostName(vplexStorageSystem);          }          s_logger.info("Host name is {}",initiatorHostName);          initiatorPort=new Initiator(StorageProtocol.Block.FC.name(),portWWN,WWNUtility.getWWNWithColons(portInfo.getNodeWwn()),initiatorHostName,false);          initiatorPort.setId(URIUtil.createId(Initiator.class));          newInitiatorPorts.add(initiatorPort);        }      }    }    _dbClient.createObject(newStoragePorts);    _dbClient.updateObject(existingStoragePorts);    _dbClient.createObject(newInitiatorPorts);    allPorts.addAll(newStoragePorts);    allPorts.addAll(existingStoragePorts);    List<StoragePort> notVisiblePorts=DiscoveryUtils.checkStoragePortsNotVisible(allPorts,_dbClient,vplexStorageSystem.getId());    if (notVisiblePorts != null && !notVisiblePorts.isEmpty()) {      allPorts.addAll(notVisiblePorts);    }  } catch (  Exception e) {    s_logger.error("Error discovering ports for the VPLEX storage system {}:",vplexStorageSystem.getIpAddress(),e);    throw VPlexCollectionException.exceptions.failedPortsDiscovery(vplexStorageSystem.getId().toString(),e.getLocalizedMessage(),e);  }}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  protected void enforceSealed(){  if (!isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on a not sealed instance.");  }}  }
class C{  public boolean remove(int val){  if (!map.containsKey(val)) {    return false;  }  int idx=map.remove(val);  int lastValue=list.remove(list.size() - 1);  if (val != lastValue) {    list.set(idx,lastValue);    map.put(lastValue,idx);  }  return true;}  }
class C{  private void writeUnlock(){  lock.writeLock().unlock();}  }
class C{  public BasicShoppingCartPersisterImpl(final TargetSource tuplizerPool){  this.tuplizerPool=tuplizerPool;}  }
class C{  public MinLengthValidator(final String parameterValue,final int minLength){  this.parameterValue=parameterValue;  this.minLength=minLength;}  }
class C{  public Collection values(){  return totalValueSet();}  }
class C{  private EmrStep buildEmrStepFromAwsStep(StepSummary stepSummary,boolean verbose){  EmrStep emrStep=new EmrStep();  emrStep.setId(stepSummary.getId());  emrStep.setStepName(stepSummary.getName());  emrStep.setStatus(stepSummary.getStatus().getState());  if (verbose) {    emrStep.setJarLocation(stepSummary.getConfig().getJar());    emrStep.setMainClass(stepSummary.getConfig().getMainClass());    emrStep.setScriptArguments(stepSummary.getConfig().getArgs());    emrStep.setContinueOnError(stepSummary.getActionOnFailure());  }  return emrStep;}  }
class C{  public void transformValues(TDoubleFunction function){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.795 -0500",hash_original_method="91B40E19A4EE68D85BFA3F1F256EBA72",hash_generated_method="C97A7DCA62EDED3DB3829661D6065AF8") public final Iterator<String> actionsIterator(){  ArrayList<String> actions=new ArrayList<String>();  actions.add(mActions);  return mActions != null ? actions.iterator() : null;}  }
class C{  public Source(String uri){  super(uri);}  }
class C{  public static boolean computeInstancesStopState(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIdsToStop,ArrayList<Boolean> stopFlags) throws Throwable {  checkInstancesStopped(client,host,instanceIdsToStop,stopFlags);  Boolean finalState=true;  for (  Boolean b : stopFlags) {    finalState=finalState & b;  }  return finalState;}  }
class C{  public static int clampToUInt8(int n){  return clamp(n,0,255);}  }
class C{  private Geometry unionUsingEnvelopeIntersection(Geometry g0,Geometry g1,Envelope common){  List disjointPolys=new ArrayList();  Geometry g0Int=extractByEnvelope(common,g0,disjointPolys);  Geometry g1Int=extractByEnvelope(common,g1,disjointPolys);  Geometry union=unionActual(g0Int,g1Int);  disjointPolys.add(union);  Geometry overallUnion=GeometryCombiner.combine(disjointPolys);  return overallUnion;}  }
class C{  protected void onStartClose(int position,boolean right){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onStartClose(position,right);  }}  }
class C{  public void testIsCurrency(){  try {    assertFalse(rsmd.isCurrency(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.testGetScale()" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isCurrency(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.isCurrency(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rs.close();    rsmd.isCurrency(1);    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public boolean containsKey(Object name){  return map.containsKey(name);}  }
class C{  public void addRestriction(String whereClause,boolean andCondition,int joinDepth){  if (whereClause == null || whereClause.trim().length() == 0)   return;  Restriction r=new Restriction(whereClause,andCondition,joinDepth);  m_list.add(r);  m_newRecord=whereClause.equals(NEWRECORD);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testUrlInvalid(){  setParameterToInitMockMethod("http://myurl.com/my_page",TestSolution.FAILED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public static boolean isPalindrome(int number){  return number == reverse(number) ? true : false;}  }
class C{  public boolean isBefore(){  return before;}  }
class C{  public static ReilFunction translate(final Function function) throws InternalTranslationException {  Preconditions.checkNotNull(function,"Error: Function argument can't be null");  try {    return new ReilFunction(m_translator.translate(new StandardEnvironment(),function.getNative()));  } catch (  final com.google.security.zynamics.reil.translators.InternalTranslationException e) {    throw new InternalTranslationException(e,InstructionFinders.findInstruction(function,e.getInstruction()));  }}  }
class C{  protected SelectedSparseDoubleMatrix1D(AbstractIntDoubleMap elements,int[] offsets){  this(offsets.length,elements,0,1,offsets,0);}  }
class C{  public void close(){  this.removeClassPath(classPath);  classPath.close();  classes.clear();  softcache.clear();}  }
class C{  public Blade plugin(Class<? extends Plugin> plugin){  Assert.notNull(plugin);  plugins.add(plugin);  return this;}  }
class C{  public void executeCommand(String shellCmd){  if (mThread != null && mThread.isAlive()) {    mShellThread.stop();    mResults=new StringBuilder();  }  mCurrentCommand=shellCmd;  mShellThread=new ShellThread();  mThread=new Thread(mShellThread);  mThread.start();}  }
class C{  public void addPanListener(PanListener listener){  mTouchHandler.addPanListener(listener);}  }
class C{  private static void closeBadRequest(HttpServletResponse resp,int httpStatus,String error) throws ServletException {  try {    resp.sendError(httpStatus,error);  } catch (  IOException ex) {    throw (ServletException)new ServletException().initCause(ex);  }}  }
class C{  public ArmenianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public static <T>void register(Class<T> pluginClass,T pluginImpl) throws IllegalStateException {  INSTANCE.registerInternal(pluginClass,pluginImpl);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter list1: ");  int[] list1=new int[input.nextInt()];  for (int i=0; i < list1.length; i++)   list1[i]=input.nextInt();  System.out.print("Enter list2: ");  int[] list2=new int[input.nextInt()];  for (int i=0; i < list2.length; i++)   list2[i]=input.nextInt();  System.out.println("Two lists are" + (equals(list1,list2) ? " " : " not ") + "strictly identical");}  }
class C{  protected void appendMore(QDataWriter qDataWriter) throws IOException {}  }
class C{  protected void revalidate(){  if (valid) {    return;  }  valid=true;  missing=false;  malformed=false;  String s=getValueAsString();  if (s == null) {    missing=true;    return;  }  try {    ListBuilder builder=new ListBuilder();    doParse(s,builder);    if (builder.getList() != null) {      clear(itemList);    }    itemList=builder.getList();  } catch (  ParseException e) {    itemList=new ArrayList(1);    malformed=true;  }}  }
class C{  public static void doArrayLoad(Instruction s,IR ir,Operator op,int logwidth){  if (LOWER_ARRAY_ACCESS) {    RegisterOperand result=ALoad.getClearResult(s);    Operand array=ALoad.getClearArray(s);    Operand index=ALoad.getClearIndex(s);    Operand offset;    LocationOperand loc=ALoad.getClearLocation(s);    if (index instanceof IntConstantOperand) {      offset=AC(Address.fromIntZeroExtend(((IntConstantOperand)index).value << logwidth));    } else {      if (logwidth != 0) {        offset=insertBinary(s,ir,INT_SHL,TypeReference.Int,index,IC(logwidth));        offset=InsertUnary(s,ir,INT_2ADDRZerExt,TypeReference.Offset,offset.copy());      } else {        offset=InsertUnary(s,ir,INT_2ADDRZerExt,TypeReference.Offset,index);      }    }    Load.mutate(s,op,result,array,offset,loc,ALoad.getClearGuard(s));  }}  }
class C{  public ComplexFeedForwardGainControl(int window){  mEnvelopeHistory=new FloatCircularBuffer(window);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_CONDITION___LHS_1:    return getLHS_1();case UmplePackage.TRACE_CONDITION___CONDITION_RHS_1:  return getConditionRHS_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addFork(S source,List<S> targets){  this.forks.put(source,targets);}  }
class C{  private static void logNotSupportedReasonForTieringPolicyChange(Map<String,Change> changes,StringBuffer notSuppReasonBuff,String[] exclude,String vPoolType){  notSuppReasonBuff.append(String.format("These target %s differences are invalid: ",vPoolType));  for (  String key : changes.keySet()) {    s_logger.info("Unexpected Auto-tiering Policy {} attribute change: {}",vPoolType,key);    notSuppReasonBuff.append(key + " ");  }  s_logger.info("Virtual Pool change not supported {}",notSuppReasonBuff.toString());  s_logger.info(String.format("Parameters other than %s were changed",Arrays.toString(exclude)));}  }
class C{  public boolean isFile(){  return this.isBase64File() || this.isLocalFile();}  }
class C{  public void testReadFromFile() throws Exception {  System.out.println("readFromFile");  final String tmp=System.getProperty("java.io.tmpdir");  final File file=File.createTempFile("test",".xml");  file.deleteOnExit();  DirectoryScannerConfig dir1=new DirectoryScannerConfig("scan1");  dir1.setRootDirectory(tmp);  ScanManagerConfig bean=new ScanManagerConfig("session1");  bean.putScan(dir1);  XmlConfigUtils instance=new XmlConfigUtils(file.getPath());  instance.writeToFile(bean);  ScanManagerConfig expResult=bean;  ScanManagerConfig result=instance.readFromFile();  System.out.println(result);  assertEquals(expResult,result);}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  int streamId=outHttp.nextStream(_request.channel());  _request.init(streamId);  OutHeader outHeader=outHttp.getOutHeader();  outHeader.openHeaders(streamId,getFlagsHttp());  outHeader.header(":method",_method);  outHeader.header(":scheme","http");  outHeader.header(":authority",_host);  outHeader.header(":path",_path);  if (_headers != null) {    for (    Map.Entry<String,String> entry : _headers.entrySet()) {      outHeader.header(entry.getKey(),entry.getValue());    }  }  outHeader.closeHeaders();  if (getFlagsHttp() == FlagsHttp.END_STREAM) {    _request.channel().closeWrite();  }}  }
class C{  public static void passedFieldMethodCall(Object callee,Object caller,int defuseId){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  if (DefUsePool.isKnownAsDefinition(defuseId)) {    Definition passedDef=DefUsePool.getDefinitionByDefUseId(defuseId);    passedDefinition(callee,caller,passedDef.getDefId());  } else   if (DefUsePool.isKnownAsUse(defuseId)) {    Use passedUse=DefUsePool.getUseByDefUseId(defuseId);    passedUse(callee,caller,passedUse.getUseId());  } else   throw new EvosuiteError("instrumentation called passedFieldMethodCall with invalid defuseId: " + defuseId + ", known IDs: "+ DefUsePool.getDefUseCounter());}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  public static SimpleScheduleBuilder repeatSecondlyForever(){  return simpleSchedule().withIntervalInSeconds(1).repeatForever();}  }
class C{  public void submenus(ToggleButton menu,VBox box,ToggleButton... submenus){  if (box.getChildren().isEmpty()) {    box.getChildren().addAll(submenus);    Animacao.fade(box);    estilo(menu,"menu-grupo");  } else {    desativarSubmenus(box);    estilo(menu,"menu-grupo-inativo");  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void testDivisionKnuthIsNormalized(){  byte aBytes[]={-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5};  byte bBytes[]={-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  int bSign=-1;  byte rBytes[]={0,-9,-8,-7,-6,-5,-4,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public void runPlugin(String pluginName,String[] args){  host.runPlugin(pluginName,args);  if (automaticallyClose) {    this.dispose();  }}  }
class C{  public void addHeader(String name,String value){  header.put(name,value);}  }
class C{  public StatusInfo(int severity,String message){  fStatusMessage=message;  fSeverity=severity;}  }
class C{  public NBTTagCompound writeToPacketNBT(NBTTagCompound nbt){  return this.writeToNBT(nbt);}  }
class C{  public ObjectNotFoundException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @Override public void onActivityCreated(Activity activity,Bundle savedInstanceState){}  }
class C{  public void initializeThisValue(AnnotationMirror a,TypeMirror underlyingType){  if (a != null) {    thisValue=analysis.createSingleAnnotationValue(a,underlyingType);  }}  }
class C{  public static <T>TopGroups<T> merge(TopGroups<T>[] shardGroups,Sort groupSort,Sort docSort,int docOffset,int docTopN,ScoreMergeMode scoreMergeMode) throws IOException {  if (shardGroups.length == 0) {    return null;  }  int totalHitCount=0;  int totalGroupedHitCount=0;  Integer totalGroupCount=null;  final int numGroups=shardGroups[0].groups.length;  for (  TopGroups<T> shard : shardGroups) {    if (numGroups != shard.groups.length) {      throw new IllegalArgumentException("number of groups differs across shards; you must pass same top groups to all shards' second-pass collector");    }    totalHitCount+=shard.totalHitCount;    totalGroupedHitCount+=shard.totalGroupedHitCount;    if (shard.totalGroupCount != null) {      if (totalGroupCount == null) {        totalGroupCount=0;      }      totalGroupCount+=shard.totalGroupCount;    }  }  @SuppressWarnings({"unchecked","rawtypes"}) final GroupDocs<T>[] mergedGroupDocs=new GroupDocs[numGroups];  final TopDocs[] shardTopDocs;  if (docSort.equals(Sort.RELEVANCE)) {    shardTopDocs=new TopDocs[shardGroups.length];  } else {    shardTopDocs=new TopFieldDocs[shardGroups.length];  }  float totalMaxScore=Float.MIN_VALUE;  for (int groupIDX=0; groupIDX < numGroups; groupIDX++) {    final T groupValue=shardGroups[0].groups[groupIDX].groupValue;    float maxScore=Float.MIN_VALUE;    int totalHits=0;    double scoreSum=0.0;    for (int shardIDX=0; shardIDX < shardGroups.length; shardIDX++) {      final TopGroups<T> shard=shardGroups[shardIDX];      final GroupDocs<?> shardGroupDocs=shard.groups[groupIDX];      if (groupValue == null) {        if (shardGroupDocs.groupValue != null) {          throw new IllegalArgumentException("group values differ across shards; you must pass same top groups to all shards' second-pass collector");        }      } else       if (!groupValue.equals(shardGroupDocs.groupValue)) {        throw new IllegalArgumentException("group values differ across shards; you must pass same top groups to all shards' second-pass collector");      }      if (docSort.equals(Sort.RELEVANCE)) {        shardTopDocs[shardIDX]=new TopDocs(shardGroupDocs.totalHits,shardGroupDocs.scoreDocs,shardGroupDocs.maxScore);      } else {        shardTopDocs[shardIDX]=new TopFieldDocs(shardGroupDocs.totalHits,shardGroupDocs.scoreDocs,docSort.getSort(),shardGroupDocs.maxScore);      }      maxScore=Math.max(maxScore,shardGroupDocs.maxScore);      totalHits+=shardGroupDocs.totalHits;      scoreSum+=shardGroupDocs.score;    }    final TopDocs mergedTopDocs;    if (docSort.equals(Sort.RELEVANCE)) {      mergedTopDocs=TopDocs.merge(docOffset + docTopN,shardTopDocs);    } else {      mergedTopDocs=TopDocs.merge(docSort,docOffset + docTopN,(TopFieldDocs[])shardTopDocs);    }    final ScoreDoc[] mergedScoreDocs;    if (docOffset == 0) {      mergedScoreDocs=mergedTopDocs.scoreDocs;    } else     if (docOffset >= mergedTopDocs.scoreDocs.length) {      mergedScoreDocs=new ScoreDoc[0];    } else {      mergedScoreDocs=new ScoreDoc[mergedTopDocs.scoreDocs.length - docOffset];      System.arraycopy(mergedTopDocs.scoreDocs,docOffset,mergedScoreDocs,0,mergedTopDocs.scoreDocs.length - docOffset);    }    final float groupScore;switch (scoreMergeMode) {case None:      groupScore=Float.NaN;    break;case Avg:  if (totalHits > 0) {    groupScore=(float)(scoreSum / totalHits);  } else {    groupScore=Float.NaN;  }break;case Total:groupScore=(float)scoreSum;break;default :throw new IllegalArgumentException("can't handle ScoreMergeMode " + scoreMergeMode);}mergedGroupDocs[groupIDX]=new GroupDocs<>(groupScore,maxScore,totalHits,mergedScoreDocs,groupValue,shardGroups[0].groups[groupIDX].groupSortValues);totalMaxScore=Math.max(totalMaxScore,maxScore);}if (totalGroupCount != null) {TopGroups<T> result=new TopGroups<>(groupSort.getSort(),docSort.getSort(),totalHitCount,totalGroupedHitCount,mergedGroupDocs,totalMaxScore);return new TopGroups<>(result,totalGroupCount);} else {return new TopGroups<>(groupSort.getSort(),docSort.getSort(),totalHitCount,totalGroupedHitCount,mergedGroupDocs,totalMaxScore);}}  }
class C{  private void handleFormChange(){  view.setEnableCustomRevision(view.isCustomRevision());  if (view.isCustomRevision() && view.getRevision().isEmpty()) {    view.setEnableUpdateButton(false);  } else {    view.setEnableUpdateButton(true);  }}  }
class C{  public static String encode(String string){  int length;  char c;  CharacterReference candidate;  StringBuffer ret;  ret=new StringBuffer(string.length() * 6);  length=string.length();  for (int i=0; i < length; i++) {    c=string.charAt(i);    candidate=lookup(c);    if (null != candidate) {      ret.append('&');      ret.append(candidate.getKernel());      ret.append(';');    } else     if (!(c < 0x007F)) {      ret.append("&#");      if (ENCODE_HEXADECIMAL) {        ret.append("x");        ret.append(Integer.toHexString(c));      } else       ret.append((int)c);      ret.append(';');    } else     ret.append(c);  }  return (ret.toString());}  }
class C{  public boolean isSlpDiscoveryEnabled(){  return slpDiscoveryEnabled;}  }
class C{  public static BigInteger calculateMPrime(BigInteger n,byte[] message){  if (n.bitLength() > message.length * 8) {    return new BigInteger(1,message);  } else {    int messageBitLength=message.length * 8;    BigInteger trunc=new BigInteger(1,message);    if (messageBitLength - n.bitLength() > 0) {      trunc=trunc.shiftRight(messageBitLength - n.bitLength());    }    return trunc;  }}  }
class C{  public void visitTypeArgument(){}  }
class C{  @Override public void runPlugin(String pluginName,String[] args,boolean runOnDedicatedThread){  host.runPlugin(pluginName,args,runOnDedicatedThread);  if (automaticallyClose) {    this.dispose();  }}  }
class C{  public double nextDouble(){  return nextDouble(alpha,lambda);}  }
class C{  public static short readUByte(ByteBuffer buffer){  byte b=buffer.get();  return (short)(b & 0xff);}  }
class C{  @Inline @Entrypoint public static Extent extentFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_EXTENT_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().extentRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return Extent.zero();}  }
class C{  public boolean verifyCopyIsCurrentSourceCopy(FunctionalAPIImpl port,ConsistencyGroupCopyUID groupCopy) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception {  VerifyConsistencyGroupStateParam stateParam=new VerifyConsistencyGroupStateParam();  stateParam.setSourceCopy(groupCopy);  TransactionID transactionID=port.verifyConsistencyGroupStateWithDefaultTimeout(groupCopy.getGroupUID(),stateParam);  TransactionResult result;  try {    result=getTransactionResult(port,transactionID);    if (result != null) {      if (result.getExceptionMessage() != null) {        logger.error("verifyGroupSourceCopy failed with: " + result.getExceptionMessage());      }    }  } catch (  InterruptedException e) {    logger.error("Caught InterruptedException while checking for failover complete",e);    return false;  }  return (result != null) && (result.getExceptionType() == null);}  }
class C{  protected void addError(String message,ASTNode node,SourceUnit source){  source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(new SyntaxException(message,node.getLineNumber(),node.getColumnNumber(),node.getLastLineNumber(),node.getLastColumnNumber()),source));}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedChild;  doc1=(Document)load("hc_staff",false);  doc2=(Document)load("hc_staff",true);  newChild=doc1.createElement("br");  elementList=doc2.getElementsByTagName("p");  elementNode=elementList.item(1);  oldChild=elementNode.getFirstChild();{    boolean success=false;    try {      replacedChild=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public void test_8_3_1() throws Exception {  if (!store.isQuads())   return;  new TestHelper("named-graphs-8-3-1","named-graphs-8-3-1.rq","named-graphs-8-3-1.trig","named-graphs-8-3-1.srx").runTest();}  }
class C{  public void deleteUser(String username){  try {    logger.info("JenkinsService : deleteUser " + username);    if (rootToken == null || rootToken.trim().length() == 0) {      logger.warn("Cannot use this feature because no token for Jenkins");      return;    }    if (jenkinsOpen) {      HttpClient httpclient=HttpClientBuilder.create().build();      ArrayList<NameValuePair> parameters=new ArrayList<NameValuePair>();      HttpPost post=new HttpPost("http://" + JENKINS_IP + "/securityRealm/user/"+ username+ "/doDelete");      parameters.add(new BasicNameValuePair("json","{}"));      parameters.add(new BasicNameValuePair("Submit","Oui"));      post.setEntity(new UrlEncodedFormEntity(parameters));      post.setHeader("Authorization",rootToken);      post.setHeader("Content-Type","application/x-www-form-urlencoded");      httpclient.execute(post);    }  } catch (  Exception e) {    logger.error(username,e);  }}  }
class C{  private void addRuleToFlowMapping(int ruleId,String flowName){  if (!ruleId2FlowName.containsKey(ruleId)) {    ruleId2FlowName.put(ruleId,new HashSet<String>());  }  ruleId2FlowName.get(ruleId).add(flowName);}  }
class C{  public static SpanQuery spanTermQuery(String field,String term){  return spanQuery(new SpanTermQuery(new Term(field,term)));}  }
class C{  public MetaParameter(){  m_aParams=new ArrayList();}  }
class C{  public ObjectFactory(){}  }
class C{  public static boolean isLongKeyId(String keyId){  return isValidKeyId(keyId) && keyId.length() == HEX_LONG_KEY_ID_LENGTH;}  }
class C{  protected synchronized void workerComplete(){  if (!isCancelled()) {    currentWorker=null;    layer.repaint();  } else {    setCancelled(false);    currentWorker=new LOSWorker();    currentWorker.execute();  }}  }
class C{  @Override public void start(){  if (this.logger == null) {    throw new CargoException("Please call setLogger first!");  }  if (this.serverSocket == null) {    throw new CargoException("Please call setListeningParameters first!");  }  this.stopped=false;  Thread thread=new Thread(this);  thread.setDaemon(true);  thread.start();}  }
class C{  private BlockMirror createBlockMirror(String nativeGuid,StorageSystem system,UnManagedVolume unManagedVolume,VirtualPool vPool,VirtualArray vArray,Project project){  BlockMirror mirror=new BlockMirror();  mirror.setId(URIUtil.createId(BlockMirror.class));  mirror.setInactive(false);  StoragePool pool=_dbClient.queryObject(StoragePool.class,unManagedVolume.getStoragePoolUri());  updateVolume(mirror,system,nativeGuid,pool,vArray,vPool,unManagedVolume,project);  String syncInstance=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.SYNCHRONIZED_INSTANCE.toString(),unManagedVolume.getVolumeInformation());  mirror.setSynchronizedInstance(syncInstance);  String syncState=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.SYNC_STATE.toString(),unManagedVolume.getVolumeInformation());  mirror.setSyncState(syncState);  String syncType=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.SYNC_TYPE.toString(),unManagedVolume.getVolumeInformation());  mirror.setSyncType(syncType);  String autoTierPolicyId=getAutoTierPolicy(unManagedVolume,system,vPool);  validateAutoTierPolicy(autoTierPolicyId,unManagedVolume,vPool);  if (null != autoTierPolicyId) {    updateTierPolicyProperties(autoTierPolicyId,mirror);  }  return mirror;}  }
class C{  private void checkPossibleLadder(AStarNode node){  int x=node.x;  int y=node.y;  int z=node.z;  if (AStarStatic.isLadder(worldObj,worldObj.getBlockState(new BlockPos(x,y,z)).getBlock(),x,y,z)) {    AStarNode ladder;    if (AStarStatic.isLadder(worldObj,worldObj.getBlockState(new BlockPos(x,y + 1,z)).getBlock(),x,y + 1,z)) {      ladder=new AStarNode(x,y + 1,z,node.getG() + 2,node,targetNode);      if (!tryToUpdateExistingHeapNode(node,ladder)) {        addToBinaryHeap(ladder);      }    }    if (AStarStatic.isLadder(worldObj,worldObj.getBlockState(new BlockPos(x,y - 1,z)).getBlock(),x,y - 1,z)) {      ladder=new AStarNode(x,y - 1,z,node.getG() + 2,node,targetNode);      if (!tryToUpdateExistingHeapNode(node,ladder)) {        addToBinaryHeap(ladder);      }    }  }}  }
class C{  public static Map<String,Map<String,Double>> flattenFeatureWithDropout(FeatureVector featureVector,double dropout){  long seed=random.nextLong();  return flattenFeatureStreamToMap(flattenFeatureWithDropoutAsStream(featureVector,dropout,seed));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.022 -0500",hash_original_method="BEE01A65F8C60BA60426262AE9228EF3",hash_generated_method="62F162BDAC42E41A72B1AB1A48D56246") public static String cdmaBcdToString(byte[] data,int offset,int length){  StringBuilder ret=new StringBuilder(length);  int count=0;  for (int i=offset; count < length; i++) {    int v;    v=data[i] & 0xf;    if (v > 9)     v=0;    ret.append((char)('0' + v));    if (++count == length)     break;    v=(data[i] >> 4) & 0xf;    if (v > 9)     v=0;    ret.append((char)('0' + v));    ++count;  }  return ret.toString();}  }
class C{  public void reset(){  bundles=null;}  }
class C{  public X509Name(boolean reverse,String dirName){  this(reverse,DefaultLookUp,dirName);}  }
class C{  private Coordinate[] reduce(Coordinate[] inputPts){  Coordinate[] polyPts=computeOctRing(inputPts);  if (polyPts == null)   return inputPts;  TreeSet reducedSet=new TreeSet();  for (int i=0; i < polyPts.length; i++) {    reducedSet.add(polyPts[i]);  }  for (int i=0; i < inputPts.length; i++) {    if (!CGAlgorithms.isPointInRing(inputPts[i],polyPts)) {      reducedSet.add(inputPts[i]);    }  }  Coordinate[] reducedPts=CoordinateArrays.toCoordinateArray(reducedSet);  if (reducedPts.length < 3)   return padArray3(reducedPts);  return reducedPts;}  }
class C{  public VeriniceArchive(byte[] data) throws VeriniceArchiveNotValidException {  super();  uuid=UUID.randomUUID().toString();  if (LOG.isDebugEnabled()) {    LOG.debug("Creating new VeriniceArchive...");  }  try {    extractZipEntries(data);  } catch (  VeriniceArchiveNotValidException e) {    LOG.error("Error while reading verinice archive",e);    throw e;  }catch (  Exception e) {    LOG.error("Error while reading verinice archive",e);    throw new VeriniceArchiveNotValidException(e);  }}  }
class C{  public static DataStoreEvent removalEvent(DBIDs removals){  return new DataStoreEvent(DBIDUtil.EMPTYDBIDS,removals,DBIDUtil.EMPTYDBIDS);}  }
class C{  public void testFourNodeSubmitQueryWithLinearizableConsistency() throws Throwable {  testSubmitQuery(4,Query.ConsistencyLevel.LINEARIZABLE);}  }
class C{  public boolean isAtributoId(){  return TransferenciasElectronicasConstants.TIPO_ATRIBUTO_SE_ID.equalsIgnoreCase(tipoAtributo);}  }
class C{  public static void addGhoulBootsTexture(Item boots,ResourceLocation res){  if (boots == null || res == null)   return;  if (ghoul_boots.containsKey(boots))   FMLLog.log("AbyssalCraftAPI",Level.INFO,"Mod %s is overwriting the texture for Boots %s",Loader.instance().activeModContainer().getModId(),boots.getItemStackDisplayName(new ItemStack(boots)));  ghoul_boots.put(boots,res);}  }
class C{  public static ExpressionTree skipParens(final ExpressionTree tree){  ExpressionTree t=tree;  while (t.getKind() == Tree.Kind.PARENTHESIZED)   t=((ParenthesizedTree)t).getExpression();  return t;}  }
class C{  public static void openDesktopEditor(File file){  if (!java.awt.Desktop.isDesktopSupported()) {    log.warn("desktop not supported");    return;  }  java.awt.Desktop desktop=java.awt.Desktop.getDesktop();  if (desktop.isSupported(java.awt.Desktop.Action.EDIT)) {    try {      desktop.edit(file);    } catch (    IOException e) {      e.printStackTrace();    }  } else   if (desktop.isSupported(java.awt.Desktop.Action.OPEN)) {    try {      desktop.open(file);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    log.warn("desktop edit or open not supported");  }}  }
class C{  static void basicTest(File blah) throws Exception {  for (int i=0; i < 100; i++) {    long testSize=generator.nextInt(1000) + 10;    initTestFile(blah,testSize);    try (FileChannel fc=(i < 50) ? new RandomAccessFile(blah,"rw").getChannel() : FileChannel.open(blah.toPath(),READ,WRITE)){      if (fc.size() != testSize)       throw new RuntimeException("Size failed");      long position=generator.nextInt((int)testSize * 2);      fc.position(position);      long newSize=generator.nextInt((int)testSize * 2);      fc.truncate(newSize);      if (newSize > testSize) {        if (fc.size() != testSize)         throw new RuntimeException("Attempt to expand file changed size");      } else {        if (fc.size() != newSize)         throw new RuntimeException("Unexpected size after truncate");      }      if (position > newSize) {        if (fc.position() != newSize)         throw new RuntimeException("Position greater than size");      } else {        if (fc.position() != position)         throw new RuntimeException("Truncate changed position");      }      ;    }   }}  }
class C{  private int convertHexToInt(String hexValue){  int value;  try {    value=Integer.parseInt(hexValue,16);  } catch (  NumberFormatException e) {    logger.error("Failed to convert binary data to integer (" + hexValue + ")",e);    return 0;  }  return value;}  }
class C{  public URI(final String scheme,final String userinfo,final String host,final int port,final String path) throws URIException {  this(scheme,userinfo,host,port,path,null,null);}  }
class C{  public SwitchStatement createSwitchStatement(){  SwitchStatementImpl switchStatement=new SwitchStatementImpl();  return switchStatement;}  }
class C{  private void assertNoBackendCodeInUIThread(){  Assert.assertTrue("Test requires active MonitorAspect aspect!",MonitorAdaptor.aspectIsActive());  Assert.assertFalse("Backend code (e.g. parsing must not be executed in UI thread) times executed: " + MonitorAdaptor.getTriggeredJoinPoints().size(),MonitorAdaptor.hasTriggeredBackendCode());  MonitorAdaptor.reset();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static Method findApplyMethod(){  try {    Class clz=SharedPreferences.Editor.class;    return clz.getMethod("apply");  } catch (  NoSuchMethodException e) {  }  return null;}  }
class C{  public static List<Revision> parseRevisions(String log,String repositoryName){  try {    Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(log)));    NodeList nl=doc.getElementsByTagName("logentry");    ImmutableList.Builder<Revision> resultBuilder=ImmutableList.builder();    for (int i=0; i < nl.getLength(); i++) {      String revId=nl.item(i).getAttributes().getNamedItem("revision").getNodeValue();      resultBuilder.add(Revision.create(revId,repositoryName));    }    return resultBuilder.build();  } catch (  Exception e) {    throw new MoeProblem("Could not parse xml log: " + log + e.getMessage());  }}  }
class C{  public static boolean isGagged(final Player player){  if (player.hasQuest("gag")) {    return true;  }  return false;}  }
class C{  public void testDeepNestedFunction(){  check("func1(func2(func3(field1)))","{fn func1({fn func2({fn func3(field1)})})}");  check("func1(func2(func3(func4(field1))))","{fn func1({fn func2({fn func3({fn func4(field1)})})})}");  check("select func1(field1, func2(func3(field2), field3))","select {fn func1(field1, {fn func2({fn func3(field2)}, field3)})}");  check("select func1(field1, func2(func3(field2), field3)) from SomeTable;","select {fn func1(field1, {fn func2({fn func3(field2)}, field3)})} from SomeTable;");}  }
class C{  public DateTimeFormatterBuilder appendWeekyear(int minDigits,int maxDigits){  return appendSignedDecimal(DateTimeFieldType.weekyear(),minDigits,maxDigits);}  }
class C{  public static void CF2(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double N=2.0;  double a=1.0;  double t;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    if (j % 2 == 1) {      yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);      sum1+=yj * yj;      count1++;    } else {      yj=x[j - 1] - Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum2+=yj * yj;      count2++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2;  t=f[1] + Math.sqrt(f[0]) - a * Math.sin(N * PI * (Math.sqrt(f[0]) - f[1] + 1.0)) - 1.0;  c[0]=MYSIGN(t) * Math.abs(t) / (1 + Math.exp(4.0 * Math.abs(t)));}  }
class C{  public NotificationChain basicSetProjectVersion(DeclaredVersion newProjectVersion,NotificationChain msgs){  DeclaredVersion oldProjectVersion=projectVersion;  projectVersion=newProjectVersion;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__PROJECT_VERSION,oldProjectVersion,newProjectVersion);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void update(int timeout) throws IOException {  updateThread=Thread.currentThread();synchronized (updateLock) {  }  long startTime=System.currentTimeMillis();  int select=0;  if (timeout > 0) {    select=selector.select(timeout);  } else {    select=selector.selectNow();  }  if (select == 0) {    emptySelects++;    if (emptySelects == 100) {      emptySelects=0;      long elapsedTime=System.currentTimeMillis() - startTime;      try {        if (elapsedTime < 25)         Thread.sleep(25 - elapsedTime);      } catch (      InterruptedException ex) {      }    }  } else {    emptySelects=0;    isClosed=false;    Set<SelectionKey> keys=selector.selectedKeys();synchronized (keys) {      for (Iterator<SelectionKey> iter=keys.iterator(); iter.hasNext(); ) {        SelectionKey selectionKey=iter.next();        iter.remove();        try {          int ops=selectionKey.readyOps();          if ((ops & SelectionKey.OP_READ) == SelectionKey.OP_READ) {            if (selectionKey.attachment() == tcp) {              while (true) {                Object object=tcp.readObject(this);                if (object == null)                 break;                if (!tcpRegistered) {                  if (object instanceof RegisterTCP) {                    id=((RegisterTCP)object).connectionID;synchronized (tcpRegistrationLock) {                      tcpRegistered=true;                      tcpRegistrationLock.notifyAll();                      if (TRACE)                       trace("kryonet",this + " received TCP: RegisterTCP");                      if (udp == null)                       setConnected(true);                    }                    if (udp == null)                     notifyConnected();                  }                  continue;                }                if (udp != null && !udpRegistered) {                  if (object instanceof RegisterUDP) {synchronized (udpRegistrationLock) {                      udpRegistered=true;                      udpRegistrationLock.notifyAll();                      if (TRACE)                       trace("kryonet",this + " received UDP: RegisterUDP");                      if (DEBUG) {                        debug("kryonet","Port " + udp.datagramChannel.socket().getLocalPort() + "/UDP connected to: "+ udp.connectedAddress);                      }                      setConnected(true);                    }                    notifyConnected();                  }                  continue;                }                if (!isConnected)                 continue;                keepAlive();                if (DEBUG) {                  String objectString=object == null ? "null" : object.getClass().getSimpleName();                  if (!(object instanceof FrameworkMessage)) {                    debug("kryonet",this + " received TCP: " + objectString);                  } else                   if (TRACE) {                    trace("kryonet",this + " received TCP: " + objectString);                  }                }                notifyReceived(object);              }            } else {              if (udp.readFromAddress() == null)               continue;              Object object=udp.readObject(this);              if (object == null)               continue;              keepAlive();              if (DEBUG) {                String objectString=object == null ? "null" : object.getClass().getSimpleName();                debug("kryonet",this + " received UDP: " + objectString);              }              notifyReceived(object);            }          }          if ((ops & SelectionKey.OP_WRITE) == SelectionKey.OP_WRITE)           tcp.writeOperation();        } catch (        CancelledKeyException ignored) {        }      }    }  }  if (isConnected) {    long time=System.currentTimeMillis();    if (tcp.isTimedOut(time)) {      if (DEBUG)       debug("kryonet",this + " timed out.");      close();    } else {      keepAlive();    }    if (isIdle())     notifyIdle();  }}  }
class C{  public static String formatElapsedTime(StringBuilder recycle,long elapsedSeconds){  long hours=0;  long minutes=0;  long seconds=0;  if (elapsedSeconds >= 3600) {    hours=elapsedSeconds / 3600;    elapsedSeconds-=hours * 3600;  }  if (elapsedSeconds >= 60) {    minutes=elapsedSeconds / 60;    elapsedSeconds-=minutes * 60;  }  seconds=elapsedSeconds;  StringBuilder sb=recycle;  if (sb == null) {    sb=new StringBuilder(8);  } else {    sb.setLength(0);  }  Formatter f=new Formatter(sb,Locale.getDefault());  initFormatStrings();  if (hours > 0) {    return f.format(sElapsedFormatHMMSS,hours,minutes,seconds).toString();  } else {    return f.format(sElapsedFormatMMSS,minutes,seconds).toString();  }}  }
class C{  private PostgreSQLViewTagLoader(){}  }
class C{  private void updatePacketRecvAddress(DatagramPacket packet){  packet.setAddress(connectedAddress);  packet.setPort(connectedPort);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void checkValid(LineString g){  checkInvalidCoordinates(g.getCoordinates());  if (validErr != null)   return;  GeometryGraph graph=new GeometryGraph(0,g);  checkTooFewPoints(graph);}  }
class C{  private void deleteInactiveVmEntity(String vmId,FutureCallback<Void> callback){  String documentLink=InactiveVmFactoryService.SELF_LINK + "/" + vmId;  try {    Operation deleteOperation=Operation.createDelete(UriUtils.buildUri(getHost(),documentLink)).setBody(new ServiceDocument()).setCompletion(null);    sendRequest(deleteOperation);  } catch (  Throwable t) {    callback.onFailure(t);  }}  }
class C{  public <T>IgniteStandardMXBean(T implementation,Class<T> mbeanInterface) throws NotCompliantMBeanException {  super(implementation,mbeanInterface);}  }
class C{  public static void test(String testDatapath,String dataFormat,boolean verbose) throws Exception {  Data testData=new Data(testDatapath,testDatapath,dataFormat,new String[]{},new String[]{});  ExpressiveFeaturesAnnotator.annotate(testData);  Vector<Data> data=new Vector<>();  data.addElement(testData);  NETaggerLevel1 taggerLevel1=new NETaggerLevel1(ParametersForLbjCode.currentParameters.pathToModelFile + ".level1",ParametersForLbjCode.currentParameters.pathToModelFile + ".level1.lex");  NETaggerLevel2 taggerLevel2=null;  if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("PredictionsLevel1")) {    taggerLevel2=new NETaggerLevel2(ParametersForLbjCode.currentParameters.pathToModelFile + ".level2",ParametersForLbjCode.currentParameters.pathToModelFile + ".level2.lex");  }  for (int i=0; i < data.size(); i++)   Decoder.annotateDataBIO(data.elementAt(i),taggerLevel1,taggerLevel2);  reportPredictions(data.get(0));}  }
class C{  private void ensureCapacity(){  if (size >= data.length) {    E[] newData=(E[])(new Object[size * 2 + 1]);    System.arraycopy(data,0,newData,0,size);    data=newData;  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.QUANTIFIER__NON_GREEDY:    setNonGreedy((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public StringDict copy(){  StringDict outgoing=new StringDict(count);  System.arraycopy(keys,0,outgoing.keys,0,count);  System.arraycopy(values,0,outgoing.values,0,count);  for (int i=0; i < count; i++) {    outgoing.indices.put(keys[i],i);  }  outgoing.count=count;  return outgoing;}  }
class C{  private ExecutableTimer(int numberOfSamples,Consumer<ExecutableTimer> uponCompletion){  histogram=new Histogram(new UniformReservoir(numberOfSamples));  numSamples=numberOfSamples;  resultsHandler=uponCompletion;}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateStartState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      loadContainerTemplateService(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public void makeNoise(final String state){  if (noises == null) {    return;  }  if (noises.get(state) == null) {    return;  }  if (noises.get(state).size() > 0) {    final int pos=Rand.rand(noises.get(state).size());    say(noises.get(state).get(pos));  }}  }
class C{  @RpcMethod public void transferImage(String imageId,String source,String destination,ServerAddress destinationHost,AsyncMethodCallback<Host.AsyncClient.copy_image_call> handler) throws RpcException {  ensureClient();  TransferImageRequest transferImageRequest=new TransferImageRequest();  transferImageRequest.setDestination_datastore_id(destination);  transferImageRequest.setDestination_host(destinationHost);  transferImageRequest.setSource_datastore_id(source);  transferImageRequest.setSource_image_id(imageId);  clientProxy.setTimeout(TRANSFER_IMAGE_TIMEOUT_MS);  logger.info("transfer_image target {}, request {}",getHostIp(),transferImageRequest);  try {    clientProxy.transfer_image(transferImageRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeSchemaProcessing(){  Min<Double> oper=new Min<Double>();  CountAndLastTupleTestSink minSink=new CountAndLastTupleTestSink();  oper.min.setSink(minSink);  oper.beginWindow(0);  Double a=2.0;  Double b=20.0;  Double c=1000.0;  oper.data.process(a);  oper.data.process(b);  oper.data.process(c);  a=1.0;  oper.data.process(a);  a=10.0;  oper.data.process(a);  b=5.0;  oper.data.process(b);  b=12.0;  oper.data.process(b);  c=22.0;  oper.data.process(c);  c=14.0;  oper.data.process(c);  a=46.0;  oper.data.process(a);  b=2.0;  oper.data.process(b);  a=23.0;  oper.data.process(a);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,minSink.count);  Assert.assertEquals("emitted high value was ",1.0,minSink.tuple);}  }
class C{  protected void sequence_TypeFacet(ISerializationContext context,Facet semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void startElement(String ns,String ln,String qn,Attributes attrs){  maybeSnagTLPrefixes(qn,attrs);  validatorInfo.setNameSpace(ns);  validatorInfo.setLocalName(ln);  validatorInfo.setQName(qn);  validatorInfo.setAttributes(attrs);  commandTagParser.parseStartElement();  if (commandTagParser.hasFailed()) {    failed=true;  }}  }
class C{  public static boolean validationOn(){  return !"none".equals(UtilProperties.getPropertyValue("minilang.properties","validation.level"));}  }
class C{  public ZoneGroupsXMLLoader(final URI uri){  this.uri=uri;}  }
class C{  void mergeWords(){  mergeCompoundNames();  mergeThreeWordExpressions();  if (mergeTwoWordExpressions() > 0) {    mergeThreeWordExpressions();  }}  }
class C{  public void flush() throws IOException {  if (out != null)   out.flush();}  }
class C{  private static void writelnWithFlush(boolean flush){  add(NEW_LINE_CHAR);  if (flush) {    flush();  }}  }
class C{  public Point2D screenToGame(Point2D screenPoint){  return screenPoint.multiply(1.0 / FXGL.getDisplay().getScaleRatio()).add(viewport.getOrigin());}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final RdKNNLeafEntry that=(RdKNNLeafEntry)o;  return knnDistance == that.knnDistance;}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple4<Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4));}  }
class C{  protected void registerFlowGroupsAttributes(){  addAttributeProcessor(new HorizontalSpacingLmlAttribute(),"spacing");  addAttributeProcessor(new VerticalSpacingLmlAttribute(),"spacing");}  }
class C{  public void processText(Token<HtmlTokenType> textToken){  if (CajaTreeBuilder.DEBUG) {    System.err.println("processText(\"" + textToken.text.replaceAll("\r\n?|\n","\\n") + "\")");  }  String text=textToken.text.replaceAll("\r\n?","\n");  if (textToken.type == HtmlTokenType.TEXT) {    text=fixBrokenEntities(text,textToken.pos);  }  if (text.equals(textToken.text)) {    textToken=Token.instance(text,textToken.type,textToken.pos);  }  char[] chars;  int n=text.length();  if (n <= charBuf.length) {    chars=charBuf;    text.getChars(0,n,chars,0);  } else {    chars=text.toCharArray();  }  builder.setTokenContext(textToken,textToken);  try {    builder.characters(chars,0,n);  } catch (  SAXException ex) {    throw new SomethingWidgyHappenedError(ex);  }}  }
class C{  public void storeMessage(String source,String target,String message,String messagetype){  DBTransaction transaction=TransactionPool.get().beginWork();  try {    storeMessage(transaction,source,target,message,messagetype);    TransactionPool.get().commit(transaction);  } catch (  SQLException e) {    TransactionPool.get().rollback(transaction);    logger.error(e,e);  }}  }
class C{  public WeightMatrixViewer(List<Neuron> sourceList,List<Neuron> targetList,NetworkPanel panel){  init(sourceList,targetList,panel);}  }
class C{  public Symbol(String value,boolean isTerminal){  super();  this.value=value;  this.isTerminal=isTerminal;}  }
class C{  public void writeChangeLogPartitionMapping(Map<TaskName,Integer> changelogEntries){  log.debug("Updating changelog information with: ");  for (  Map.Entry<TaskName,Integer> entry : changelogEntries.entrySet()) {    log.debug("TaskName: {} to Partition: {}",entry.getKey().getTaskName(),entry.getValue());    send(new SetChangelogMapping(getSource(),entry.getKey().getTaskName(),entry.getValue()));  }}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof PowerFunction2D)) {    return false;  }  PowerFunction2D that=(PowerFunction2D)obj;  if (this.a != that.a) {    return false;  }  if (this.b != that.b) {    return false;  }  return true;}  }
class C{  private boolean doctestOutputMatches(String expected,String actual){  expected=expected.trim();  actual=actual.trim().replace("\r\n","\n");  if (expected.equals(actual))   return true;  for (  Map.Entry<String,String> entry : doctestCanonicalizations.entrySet()) {    expected=expected.replace(entry.getKey(),entry.getValue());  }  if (expected.equals(actual))   return true;  Pattern p=Pattern.compile("@[0-9a-fA-F]+");  Matcher expectedMatcher=p.matcher(expected);  Matcher actualMatcher=p.matcher(actual);  for (; ; ) {    if (!expectedMatcher.find())     return false;    if (!actualMatcher.find())     return false;    if (actualMatcher.start() != expectedMatcher.start())     return false;    int start=expectedMatcher.start();    if (!expected.substring(0,start).equals(actual.substring(0,start)))     return false;    String expectedGroup=expectedMatcher.group();    String actualGroup=actualMatcher.group();    String mapping=doctestCanonicalizations.get(expectedGroup);    if (mapping == null) {      doctestCanonicalizations.put(expectedGroup,actualGroup);      expected=expected.replace(expectedGroup,actualGroup);    } else     if (!actualGroup.equals(mapping)) {      return false;    }    if (expected.equals(actual))     return true;  }}  }
class C{  public void addHeader(final String name,final String value){  if (header == null) {    header=new TreeMap<String,String>(new CaseInsensitiveStringComparator());  }  header.put(name,value);}  }
class C{  private int findNearestValue(double key){  int low=0;  int high=m_NumValues;  int middle=0;  while (low < high) {    middle=(low + high) / 2;    double current=m_Values[middle];    if (current == key) {      return middle;    }    if (current > key) {      high=middle;    } else     if (current < key) {      low=middle + 1;    }  }  return low;}  }
class C{  private static boolean isGlobalResourceAllowed(User user,GlobalResource resource,Operation operation){  if (operation == Operation.ASSIGN_ISSUE && resource.getType() == ResourceType.PROJECT) {    Project project=Project.find.byId(Long.parseLong(resource.getId()));    return user.isMemberOf(project) || (!project.isPrivate() && isMember(project.organization,user));  }  if (resource.getType() == ResourceType.ATTACHMENT && resource.getContainer().getType() == ResourceType.USER) {    return user.id.toString().equals(resource.getContainer().getId());  }  if (operation == Operation.READ) {    if (resource.getType() == ResourceType.PROJECT) {      Project project=Project.find.byId(Long.valueOf(resource.getId()));      if (project == null) {        return false;      }      return project.isPublic() || user.isMemberOf(project) || isAdmin(project.organization,user)|| isAllowedIfGroupMember(project,user);    }    return true;  }  if (operation == Operation.WATCH) {    if (resource.getType() == ResourceType.PROJECT) {      Project project=Project.find.byId(Long.valueOf(resource.getId()));      if (project == null) {        return false;      }      return (project.isPublic() && !user.isAnonymous()) || (user.isMemberOf(project) || isAdmin(project.organization,user)) || isAllowedIfGroupMember(project,user);    }  }  if (operation == Operation.LEAVE) {    if (resource.getType() == ResourceType.PROJECT) {      Project project=Project.find.byId(Long.valueOf(resource.getId()));      return project != null && !project.isOwner(user) && user.isMemberOf(project);    }  }switch (resource.getType()) {case USER:case USER_AVATAR:    return user.id.toString().equals(resource.getId());case PROJECT:  if (ProjectUser.isManager(user.id,Long.valueOf(resource.getId()))) {    return true;  }Project project=Project.find.byId(Long.valueOf(resource.getId()));if (project == null) {return false;}return OrganizationUser.isAdmin(project.organization,user);case ORGANIZATION:return OrganizationUser.isAdmin(Long.valueOf(resource.getId()),user.id);default :return false;}}  }
class C{  public void appendKtab(String tab) throws IOException, KrbException {  writeKtab(tab,true);}  }
class C{  public void testNullConstruction(){  List parents=new ArrayList();  for (int i=0; i < 5; i++) {    parents.add(new IndexedParent(1,2));  }  parents.set(RandomUtil.getInstance().nextInt(5),null);  try {    new BooleanFunction((IndexedParent[])parents.toArray(new IndexedParent[0]));  } catch (  NullPointerException e) {    return;  }  fail("Should have thrown an NullPointerException.");}  }
class C{  public synchronized void initialize(){  if (initialized) {    loggersSupplier.get().apply("").warn("Strongback has already been initialized. Make sure you configure and initialize Strongback only once");  }  initialized=true;  INSTANCE=new Strongback(this,Strongback.INSTANCE);}  }
class C{  public Enumeration<VecsEntry> enumerateEntries(VecsEntryInfoLevel infoLevel){  return new VecsEntryEnumeration(this,_storeHandle,_serverName,_userName,_storeName,infoLevel);}  }
class C{  private void updateGui(){  final IDebugger debugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  final TargetProcessThread thread=debugger == null ? null : debugger.getProcessManager().getActiveThread();  final boolean connected=debugger != null && debugger.isConnected();  final boolean suspended=connected && thread != null;  m_refreshButton.setEnabled(suspended);}  }
class C{  private CAbstractGraphPanelExtensionFactory(){}  }
class C{  protected List<String> explodeClassPath(String classPath){  List<String> ret=new ArrayList<String>();  StringTokenizer tokenizer=new StringTokenizer(classPath,File.pathSeparator);  while (tokenizer.hasMoreTokens()) {    String originalDir=tokenizer.nextToken();    String canonicalDir;    try {      canonicalDir=new File(originalDir).getCanonicalPath();      ret.add(canonicalDir);    } catch (    IOException e) {      throw new CompilationDeathException("Couldn't resolve classpath entry " + originalDir + ": "+ e);    }  }  return ret;}  }
class C{  public static List<Polygon> SpatialKnnQuery(PolygonRDD objectRDD,Point queryCenter,Integer k){  @SuppressWarnings("serial") JavaRDD<Polygon> tmp=objectRDD.getRawPolygonRDD().mapPartitions(new PolygonKnnJudgement(queryCenter,k));  return tmp.takeOrdered(k,new PolygonDistanceComparator(queryCenter));}  }
class C{  private int findStudent(String student){  for (int i=0; i < numberOfStudents; i++) {    if (students[i].equals(student)) {      return i;    }  }  return -1;}  }
class C{  private Composite createLinkControlProviderComposite(final Group linkDetailsGroup){  final Composite composite=new Composite(linkDetailsGroup,SWT.NONE);  final GridLayout layout=new GridLayout(2,false);  layout.marginWidth=getHorizontalMargin();  layout.marginHeight=getVerticalMargin();  composite.setLayout(layout);  return composite;}  }
class C{  void displayToolWindow(String args[]){  setTitle(PolicyTool.getMessage("Policy.Tool"));  setResizable(true);  addWindowListener(new ToolWindowListener(tool,this));  getContentPane().setLayout(new GridBagLayout());  initWindow();  pack();  setLocationRelativeTo(null);  setVisible(true);  if (tool.newWarning == true) {    displayStatusDialog(this,PolicyTool.getMessage("Errors.have.occurred.while.opening.the.policy.configuration.View.the.Warning.Log.for.more.information."));  }}  }
class C{  protected void paintExpandControl(Graphics g,Rectangle clipBounds,Insets insets,Rectangle bounds,TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  Object value=path.getLastPathComponent();  if (!isLeaf && (!hasBeenExpanded || treeModel.getChildCount(value) > 0)) {    int middleXOfKnob;    if (leftToRight) {      middleXOfKnob=bounds.x - getRightChildIndent() + 1;    } else {      middleXOfKnob=bounds.x + bounds.width + getRightChildIndent() - 1;    }    int middleYOfKnob=bounds.y + (bounds.height / 2);    if (isExpanded) {      Icon expandedIcon=getExpandedIcon();      if (expandedIcon != null)       drawCentered(tree,g,expandedIcon,middleXOfKnob,middleYOfKnob);    } else {      Icon collapsedIcon=getCollapsedIcon();      if (collapsedIcon != null)       drawCentered(tree,g,collapsedIcon,middleXOfKnob,middleYOfKnob);    }  }}  }
class C{  public WeakReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  public void onSearchBoxTextChanged(String searchText,boolean forceReloadEventIfSameText){  if (!forceReloadEventIfSameText && Utility.stringsEqualOrEmpty(this.searchText,searchText)) {    return;  }  if (TextUtils.isEmpty(searchText)) {    searchText=null;  }  this.searchText=searchText;  hasSearchTextChangedSinceLastQuery=true;  if (searchTextTimer == null) {    searchTextTimer=createSearchTextTimer();  }}  }
class C{  public VNXeCommandJob createQuotaDirectory(final String fsName,final String quotaName,final Long hardLimit,final Long softLimit,final long softGrace) throws VNXeException {  _logger.info("Creating quota directory with path: {} for fs: {}","/" + quotaName,fsName);  FileSystemQuotaCreateParam param=new FileSystemQuotaCreateParam();  FileSystemQuotaConfigParam qcParam=new FileSystemQuotaConfigParam();  if (softGrace > 0) {    qcParam.setGracePeriod(softGrace);  }  FileSystemListRequest fsReq=new FileSystemListRequest(_khClient);  param.setPath("/" + quotaName);  if (hardLimit > 0) {    param.setHardLimit(hardLimit);  }  FileSystemQuotaRequests req=new FileSystemQuotaRequests(_khClient);  param.setFilesystem(fsReq.getByFSName(fsName).getId());  if (softLimit > 0) {    param.setSoftLimit(softLimit);  }  VNXeCommandResult res=req.createFileSystemQuotaSync(param);  return req.updateFileSystemQuotaConfig(res.getId(),qcParam);}  }
class C{  public static void ensureNoDuplicateEdges(List<Node> nodes){  Set<Character> uniqueChars=new HashSet<Character>(nodes.size());  for (  Node node : nodes) {    uniqueChars.add(node.getIncomingEdgeFirstCharacter());  }  if (nodes.size() != uniqueChars.size()) {    throw new IllegalStateException("Duplicate edge detected in list of nodes supplied: " + nodes);  }}  }
class C{  public static PatternObserverExpr timerInterval(double seconds){  return new PatternObserverExpr("timer","interval",new Expression[]{Expressions.constant(seconds)});}  }
class C{  public static <K,V>HashBagMultimap<V,K> flip(BagMultimap<K,V> bagMultimap){  HashBagMultimap<V,K> result=new HashBagMultimap<>();  bagMultimap.forEachKeyMultiValues(null);  return result;}  }
class C{  public void testCasts(){  String sql_begin="SELECT ";  String[][] sql_tests=new String[][]{{"cast('N' as char)","cast('N' as char)"},{"cast('this is a string' as nvarchar2(40))","cast('this is a string' as VARCHAR)"},{"cast('this is a string as a ''string''' as nvarchar2(40))","cast('this is a string as a ''string''' as VARCHAR)"},{"cast(tbl.IsView as char)","cast(tbl.IsView as char)"},{"cast(trunc(tbl.Updated,'MONTH') as date)","cast(trunc(tbl.Updated,'MONTH') as TIMESTAMP)"},{"cast(NULL as nvarchar2(255))","cast(NULL as VARCHAR)"},{"cast(NULL as number(10))","cast(NULL as NUMERIC)"}};  String sql_end=" FROM AD_Table tbl";  StringBuffer sql=new StringBuffer(sql_begin);  StringBuffer sqle=new StringBuffer(sql_begin);  for (int i=0; i < sql_tests.length; i++) {    if (i > 0) {      sql.append(",");      sqle.append(",");    }    sql.append(sql_tests[i][0]);    sqle.append(sql_tests[i][1]);  }  sql.append(sql_end);  sqle.append(sql_end);  String[] r=convert.convert(sql.toString());  assertEquals(sqle.toString(),r[0]);}  }
class C{  protected TextAnnotation(String text){  super();  ParamChecks.nullNotPermitted(text,"text");  this.text=text;  this.font=DEFAULT_FONT;  this.paint=DEFAULT_PAINT;  this.textAnchor=DEFAULT_TEXT_ANCHOR;  this.rotationAnchor=DEFAULT_ROTATION_ANCHOR;  this.rotationAngle=DEFAULT_ROTATION_ANGLE;}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  getHandler().mouseWheelMoved(e);}  }
class C{  protected SparqlSession createHTTPClient(){  SparqlSession httpClient=getSesameClient().createSparqlSession(queryEndpointUrl,updateEndpointUrl);  httpClient.setValueFactory(SimpleValueFactory.getInstance());  httpClient.setPreferredTupleQueryResultFormat(TupleQueryResultFormat.SPARQL);  httpClient.setAdditionalHttpHeaders(additionalHttpHeaders);  if (username != null) {    httpClient.setUsernameAndPassword(username,password);  }  return httpClient;}  }
class C{  public boolean increment(int key){  return adjustValue(key,1);}  }
class C{  public boolean randomNextBoard(int r){  int sz=nextValidRowPositions.size();  if (sz == 0) {    return false;  }  int c=(int)(Math.random() * sz);  board[r][nextValidRowPositions.get(c)]=true;  return true;}  }
class C{  protected boolean runTestIfSysPropDefined(String propName){  String prop=System.getProperty(propName);  return (prop != null) && (prop.length() > 0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.289 -0500",hash_original_method="7B5FF6221D53537744EF141B1F8CB9FD",hash_generated_method="7BFA11D2C887423F4364FA64BC7ED080") public V put(K key,V value){  if (value == null)   throw new NullPointerException();  int hash=hash(key.hashCode());  return segmentFor(hash).put(key,hash,value,false);}  }
class C{  public void testRouteCascade(){  String viewExpr="every tag=" + SupportBean.class.getName();  EPStatement patternStmt=epService.getEPAdministrator().createPattern(viewExpr);  CascadeRouteUpdateListener listener=new CascadeRouteUpdateListener();  patternStmt.addListener(listener);  sendEvent(2);  assertEquals(9,listener.getCountReceived());  assertEquals(8,listener.getCountRouted());}  }
class C{  public K minValue(){  if (refSet.isEmpty()) {    return null;  }  return refSet.firstKey();}  }
class C{  @Override public int compareTo(DynamicField other){  return other.wildcard.length() - wildcard.length();}  }
class C{  public static void join(StringBuilder out,CharSequence sep,Iterable<? extends CharSequence> items){  try {    join((Appendable)out,sep,items);  } catch (  IOException ex) {    throw new SomethingWidgyHappenedError("StringBuilder does not throw IOException",ex);  }}  }
class C{  public void startContactPicker(int pickContactRequest){  Intent intent=new Intent(Intent.ACTION_PICK,ContactsContract.Contacts.CONTENT_URI);  Bundle bundle=ActivityOptions.makeSceneTransitionAnimation(mActivity).toBundle();  mActivity.startActivityForResult(intent,pickContactRequest,bundle);}  }
class C{  public static Type toType(String cfType,boolean axistype) throws PageException {  return toType(Caster.cfTypeToClass(cfType),axistype);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public static TransactionSignature decodeFromBitcoin(byte[] bytes,boolean requireCanonical) throws VerificationException {  if (requireCanonical && !isEncodingCanonical(bytes))   throw new VerificationException("Signature encoding is not canonical.");  ECKey.ECDSASignature sig;  try {    sig=ECKey.ECDSASignature.decodeFromDER(bytes);  } catch (  IllegalArgumentException e) {    throw new VerificationException("Could not decode DER",e);  }  TransactionSignature tsig=new TransactionSignature(sig.r,sig.s);  tsig.sighashFlags=bytes[bytes.length - 1];  return tsig;}  }
class C{  public boolean isPrepared(){  if (!prepared && tracksBuilt) {    for (int i=0; i < sampleQueues.size(); i++) {      if (!sampleQueues.valueAt(i).hasFormat()) {        return false;      }    }    prepared=true;    sampleQueueFormats=new MediaFormat[sampleQueues.size()];    for (int i=0; i < sampleQueueFormats.length; i++) {      MediaFormat format=sampleQueues.valueAt(i).getFormat();      if (MimeTypes.isVideo(format.mimeType) && (adaptiveMaxWidth != MediaFormat.NO_VALUE || adaptiveMaxHeight != MediaFormat.NO_VALUE)) {        format=format.copyWithMaxVideoDimensions(adaptiveMaxWidth,adaptiveMaxHeight);      }      sampleQueueFormats[i]=format;    }  }  return prepared;}  }
class C{  private void reply(final String response,final boolean error,final String errorMessage,final String stackTrace,final String statusCode,final int statusCodeInt){  if (!sentReply) {    sentReply=true;    if (channel != null && channel.isOpen())     channel.close().awaitUninterruptibly();    final ResponseOnSingeRequest res=new ResponseOnSingeRequest(response,error,errorMessage,stackTrace,statusCode,statusCodeInt,PcDateUtils.getNowDateTimeStrStandard(),null);    if (!getContext().system().deadLetters().equals(sender)) {      sender.tell(res,getSelf());    }    if (getContext() != null) {      getContext().stop(getSelf());    }  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public void test_sparql_bev_5_withFilterInOptionalGroup() throws Exception {  final String queryStr="" + "PREFIX  xsd: <http://www.w3.org/2001/XMLSchema#>\n" + "PREFIX  : <http://example.org/ns#>"+ "SELECT ?a \n"+ "WHERE"+ "    { ?a :p ?v . \n"+ "      OPTIONAL \n"+ "        { ?a :q ?w ."+ "          FILTER (BOUND(?w)) \n"+ "        } \n"+ "    }\n";  final BigdataValueFactory f=store.getValueFactory();  final BigdataURI p=f.createURI("http://example.org/ns#p");  final BigdataURI q=f.createURI("http://example.org/ns#q");  final BigdataValue[] values=new BigdataValue[]{p,q};  store.getLexiconRelation().addTerms(values,values.length,false);  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  ASTDeferredIVResolution.resolveQuery(store,astContainer);  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  QueryRoot queryRoot=astContainer.getOriginalAST();  queryRoot=(QueryRoot)new ASTSetValueExpressionsOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  queryRoot=BOpUtility.deepCopy(queryRoot);  queryRoot=(QueryRoot)new ASTSimpleOptionalOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  final JoinGroupNode expectedClause=new JoinGroupNode();{    expectedClause.addChild(new StatementPatternNode(new VarNode("a"),new ConstantNode(new Constant(p.getIV())),new VarNode("v"),null,Scope.DEFAULT_CONTEXTS));    final StatementPatternNode liftedSp=new StatementPatternNode(new VarNode("a"),new ConstantNode(new Constant(q.getIV())),new VarNode("w"),null,Scope.DEFAULT_CONTEXTS);    expectedClause.addChild(liftedSp);    liftedSp.setOptional(true);    final List<FilterNode> filters=new LinkedList<FilterNode>();    final FilterNode filterNode=new FilterNode(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("w")}));    final GlobalAnnotations globals=new GlobalAnnotations(context.getLexiconNamespace(),context.getTimestamp());    AST2BOpUtility.toVE(getBOpContext(),globals,filterNode.getValueExpressionNode());    filters.add(filterNode);    liftedSp.setAttachedJoinFilters(filters);  }  assertSameAST(expectedClause,queryRoot.getWhereClause());}  }
class C{  public Partial addWrapFieldToCopy(int valueToAdd){  int[] newValues=iPartial.getValues();  newValues=getField().addWrapField(iPartial,iFieldIndex,newValues,valueToAdd);  return new Partial(iPartial,newValues);}  }
class C{  @Override public void updateShort(int columnIndex,short x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateShort(" + columnIndex + ", (short) "+ x+ ");");    }    update(columnIndex,ValueShort.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public LoggingConfigurator(){  this(LogContext.getSystemLogContext());}  }
class C{  protected Collection<Segment> loadSegments(){  storage.directory().mkdirs();  TreeMap<Long,Segment> segments=new TreeMap<>();  for (  File file : storage.directory().listFiles(null)) {    if (SegmentFile.isSegmentFile(name,file)) {      SegmentFile segmentFile=new SegmentFile(file);      SegmentDescriptor descriptor=new SegmentDescriptor(FileBuffer.allocate(file,SegmentDescriptor.BYTES));      if (descriptor.locked()) {        Segment segment=loadSegment(descriptor.id(),descriptor.version());        Map.Entry<Long,Segment> previousEntry=segments.floorEntry(segment.index());        if (previousEntry != null) {          Segment previousSegment=previousEntry.getValue();          if (previousSegment.index() == segment.index()) {            if (segment.descriptor().version() > previousSegment.descriptor().version()) {              LOGGER.debug("Replaced segment {} with newer version: {} ({})",previousSegment.descriptor().id(),segment.descriptor().version(),segmentFile.file().getName());              segments.remove(previousEntry.getKey());              previousSegment.close();              previousSegment.delete();            } else {              segment.close();              segment.delete();              continue;            }          } else           if (previousSegment.index() + previousSegment.length() > segment.index()) {            segment.close();            segment.delete();            continue;          }        }        LOGGER.debug("Found segment: {} ({})",segment.descriptor().id(),segmentFile.file().getName());        segments.put(segment.index(),segment);        Map.Entry<Long,Segment> nextEntry=segments.higherEntry(segment.index());        while (nextEntry != null) {          if (nextEntry.getValue().index() < segment.index() + segment.length()) {            segments.remove(nextEntry.getKey());            nextEntry=segments.higherEntry(segment.index());          } else {            break;          }        }        descriptor.close();      } else {        LOGGER.debug("Deleting unlocked segment: {}-{} ({})",descriptor.id(),descriptor.version(),segmentFile.file().getName());        descriptor.close();        descriptor.delete();      }    }  }  for (  Long segmentId : segments.keySet()) {    Segment segment=segments.get(segmentId);    Map.Entry<Long,Segment> previousEntry=segments.floorEntry(segmentId - 1);    if (previousEntry != null) {      Segment previousSegment=previousEntry.getValue();      if (previousSegment.index() + previousSegment.length() - 1 < segment.index()) {        previousSegment.skip(segment.index() - (previousSegment.index() + previousSegment.length()));      }    }  }  return segments.values();}  }
class C{  public String attributeSelectionMethodTipText(){  return "Set the method used to select attributes for use in the linear " + "regression. Available methods are: no attribute selection, attribute " + "selection using M5's method (step through the attributes removing the one "+ "with the smallest standardised coefficient until no improvement is observed "+ "in the estimate of the error given by the Akaike "+ "information criterion), and a greedy selection using the Akaike information "+ "metric.";}  }
class C{  private static final int[] implSquareToLen(int[] x,int len,int[] z,int zlen){  int lastProductLowWord=0;  for (int j=0, i=0; j < len; j++) {    long piece=(x[j] & LONG_MASK);    long product=piece * piece;    z[i++]=(lastProductLowWord << 31) | (int)(product >>> 33);    z[i++]=(int)(product >>> 1);    lastProductLowWord=(int)product;  }  for (int i=len, offset=1; i > 0; i--, offset+=2) {    int t=x[i - 1];    t=mulAdd(z,x,offset,i - 1,t);    addOne(z,offset - 1,i,t);  }  primitiveLeftShift(z,zlen,1);  z[zlen - 1]|=x[len - 1] & 1;  return z;}  }
class C{  void eat(Food food) throws Barf {}  }
class C{  public ConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public static void updateAccountVersion(Context context){  Account currentAccount=AccountUtils.getCurrentOwnCloudAccount(context);  AccountManager accountMgr=AccountManager.get(context);  if (currentAccount != null) {    String currentAccountVersion=accountMgr.getUserData(currentAccount,Constants.KEY_OC_ACCOUNT_VERSION);    if (currentAccountVersion == null) {      Log_OC.i(TAG,"Upgrading accounts to account version #" + ACCOUNT_VERSION);      Account[] ocAccounts=accountMgr.getAccountsByType(MainApp.getAccountType());      String serverUrl, username, newAccountName, password;      Account newAccount;      for (      Account account : ocAccounts) {        serverUrl=accountMgr.getUserData(account,Constants.KEY_OC_BASE_URL);        username=account.name.substring(0,account.name.lastIndexOf('@'));        newAccountName=com.synox.android.lib.common.accounts.AccountUtils.buildAccountName(Uri.parse(serverUrl),username);        if (!newAccountName.equals(account.name)) {          Log_OC.d(TAG,"Upgrading " + account.name + " to "+ newAccountName);          newAccount=new Account(newAccountName,MainApp.getAccountType());          password=accountMgr.getPassword(account);          accountMgr.addAccountExplicitly(newAccount,(password != null) ? password : "",null);          accountMgr.setUserData(newAccount,Constants.KEY_OC_BASE_URL,serverUrl);          accountMgr.setUserData(newAccount,Constants.KEY_OC_VERSION,accountMgr.getUserData(account,Constants.KEY_OC_VERSION));          accountMgr.setUserData(newAccount,Constants.KEY_COOKIES,accountMgr.getUserData(account,Constants.KEY_COOKIES));          String isSamlStr=accountMgr.getUserData(account,Constants.KEY_SUPPORTS_SAML_WEB_SSO);          boolean isSaml="TRUE".equals(isSamlStr);          if (isSaml) {            accountMgr.setUserData(newAccount,Constants.KEY_SUPPORTS_SAML_WEB_SSO,"TRUE");          }          String isOauthStr=accountMgr.getUserData(account,Constants.KEY_SUPPORTS_OAUTH2);          boolean isOAuth="TRUE".equals(isOauthStr);          if (isOAuth) {            accountMgr.setUserData(newAccount,Constants.KEY_SUPPORTS_OAUTH2,"TRUE");          }          if (currentAccount.name.equals(account.name)) {            AccountUtils.setCurrentOwnCloudAccount(context,newAccountName);          }          accountMgr.removeAccount(account,null,null);        } else {          Log_OC.d(TAG,account.name + " needs no upgrade ");          newAccount=account;        }        Log_OC.d(TAG,"Setting version " + ACCOUNT_VERSION + " to "+ newAccountName);        accountMgr.setUserData(newAccount,Constants.KEY_OC_ACCOUNT_VERSION,Integer.toString(ACCOUNT_VERSION));      }    }  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  s=domesticAttr.getNextSibling();  assertNull("attrNextSiblingNullAssert",s);}  }
class C{  public boolean isDraft(){  return hasDraft() && Draft.Value.YES.equals(getElementValue(Draft.KEY));}  }
class C{  void appletCharacterEncoding(){  showStatus(amh.getMessage("appletencoding",encoding));}  }
class C{  private void addEdges(int numvert){  int count1=0;  for (Vertex tmp=nodes[0]; tmp != null; tmp=tmp.next()) {    Hashtable hash=tmp.neighbors();    for (int i=0; i < numvert; i++) {      if (i != count1) {        int dist=computeDist(i,count1,numvert);        hash.put(nodes[i],new Integer(dist));      }    }    count1++;  }}  }
class C{  public OkHttpDownloader(final File cacheDir){  this(cacheDir,Utils.calculateDiskCacheSize(cacheDir));}  }
class C{  public boolean isSystemClass(SootClass clz){  return allSystemClasses.contains(clz);}  }
class C{  public static void main(String[] argv){  runFilter(new RemovePercentage(),argv);}  }
class C{  public static <T>LazyQueueX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  protected Vector tokenize(String line){  Object ob;  Vector v=new Vector(12,10);  unitInit(new StringReader(line));  int cnt=0;  while ((ob=unit()) != EOF) {    v.addElement(ob);    if (ob instanceof Double)     nargs[cnt]=((Number)ob).intValue(); else     nargs[cnt]=0;    cnt++;  }  return v;}  }
class C{  public Person_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_title=jcas.getRequiredFeatureDE(casType,"title","uima.cas.String",featOkTst);  casFeatCode_title=(null == casFeat_title) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_title).getCode();  casFeat_gender=jcas.getRequiredFeatureDE(casType,"gender","uima.cas.String",featOkTst);  casFeatCode_gender=(null == casFeat_gender) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_gender).getCode();}  }
class C{  final boolean isUnmatchedRequest(){  return !isData && item == null;}  }
class C{  static void errorUnexpectedEntity(String systemID,int lineNr,String entity) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"No entity reference is expected here (" + entity + ")");}  }
class C{  public void success(String message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public void output(PrintWriter out){  boolean prettyPrint=getPrettyPrint();  int tabLevel=getTabLevel();  if (registry.size() == 0) {    if ((prettyPrint && this instanceof Printable) && (tabLevel > 0))     putTabs(tabLevel,out);    super.output(out);  } else {    if ((prettyPrint && this instanceof Printable) && (tabLevel > 0))     putTabs(tabLevel,out);    out.write(createStartTag());    if (getTagText() != null)     out.write(getTagText());    Enumeration<String> en=registryList.elements();    while (en.hasMoreElements()) {      Object obj=registry.get(en.nextElement());      if (obj instanceof GenericElement) {        Element e=(Element)obj;        if (prettyPrint && this instanceof Printable) {          if (getNeedLineBreak()) {            out.write('\n');            e.setTabLevel(tabLevel + 1);          }        }        e.output(out);      } else {        if (prettyPrint && this instanceof Printable) {          if (getNeedLineBreak()) {            out.write('\n');            putTabs(tabLevel + 1,out);          }        }        String string=obj.toString();        if (getFilterState())         out.write(getFilter().process(string)); else         out.write(string);      }    }    if (getNeedClosingTag()) {      if (prettyPrint && this instanceof Printable) {        if (getNeedLineBreak()) {          out.write('\n');          if (tabLevel > 0)           putTabs(tabLevel,out);        }      }      out.write(createEndTag());    }  }}  }
class C{  public String buttonGetCaption(final int nFace){switch (nFace) {case 1:    return getDictionary(PdfDictionary.MK).getTextStreamValue(PdfDictionary.AC);case 2:  return getDictionary(PdfDictionary.MK).getTextStreamValue(PdfDictionary.RC);default :return getDictionary(PdfDictionary.MK).getTextStreamValue(PdfDictionary.CA);}}  }
class C{  public void testBoostOnlyRewrite() throws Exception {  Directory directory=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),directory);  addDoc("Lucene",writer);  addDoc("Lucene",writer);  addDoc("Lucenne",writer);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  writer.close();  FuzzyQuery query=new FuzzyQuery(new Term("field","lucene"));  query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));  ScoreDoc[] hits=searcher.search(query,1000).scoreDocs;  assertEquals(3,hits.length);  assertEquals("Lucene",reader.document(hits[0].doc).get("field"));  assertEquals("Lucene",reader.document(hits[1].doc).get("field"));  assertEquals("Lucenne",reader.document(hits[2].doc).get("field"));  reader.close();  directory.close();}  }
class C{  public static boolean isNumber(Object value,boolean alsoBooleans){  if (alsoBooleans && isBoolean(value))   return true;  return isNumber(value);}  }
class C{  public boolean forEachKey(TObjectProcedure<K> procedure){  return forEach(procedure);}  }
class C{  protected Derivation inconsistency(OwlRule rule,Fact source){  Derivation d=new Derivation(this.currentIteration,rule,this.node);  d.addSource(source);  return d;}  }
class C{  public boolean isStateActive(State state){switch (state) {case constOnlyDefaultScope_main_region_A:    return stateVector[0] == State.constOnlyDefaultScope_main_region_A;case constOnlyDefaultScope_main_region_B:  return stateVector[0] == State.constOnlyDefaultScope_main_region_B;case constOnlyDefaultScope_main_region_C:return stateVector[0] == State.constOnlyDefaultScope_main_region_C;default :return false;}}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  public static void notifyAll(final DiagnosticEvent<?> event){  if (event != null) {    for (    final DiagnosticListener listener : LISTENERS) {      listener.handleDiagnosticEvent(event);    }  }}  }
class C{  private void addOutgoingGroupFileTransfer(String fileTransferId,String chatId,MmContent content,MmContent fileicon,State state,long timestamp,long timestampSent){  Set<ContactId> recipients=mChatService.getOrCreateGroupChat(chatId).getRecipients();  if (recipients == null) {    throw new ServerApiPersistentStorageException("Unable to determine recipients of the group chat " + chatId + " to set as recipients for the the group file transfer "+ fileTransferId+ "!");  }  mMessagingLog.addOutgoingGroupFileTransfer(fileTransferId,chatId,content,fileicon,recipients,state,FileTransfer.ReasonCode.UNSPECIFIED,timestamp,timestampSent);}  }
class C{  void onParentPositionChange(){}  }
class C{  public void writeUnsafeTo(final PacketOutputStream os){  os.writeUnsafe(ParameterWriter.QUOTE);  os.writeUnsafe(dateToBytes());  ParameterWriter.formatMicrosecondsUnsafe(os,(int)(time.getTime() % 1000) * 1000,fractionalSeconds);  os.writeUnsafe(ParameterWriter.QUOTE);}  }
class C{  protected double predictFileTransferTime(List<String> requiredFiles){  double time=0.0;  Iterator<String> iter=requiredFiles.iterator();  while (iter.hasNext()) {    String fileName=iter.next();    for (int i=0; i < getStorageList().size(); i++) {      Storage tempStorage=getStorageList().get(i);      File tempFile=tempStorage.getFile(fileName);      if (tempFile != null) {        time+=tempFile.getSize() / tempStorage.getMaxTransferRate();        break;      }    }  }  return time;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Path prepend(Object state){  Path prependedPath=new Path();  prependedPath.add(state);  prependedPath.addAll(this);  return prependedPath;}  }
class C{  public boolean appendFn(){  return this.appendFn_;}  }
class C{  private static LinkedHashMap<String,Object> makeTestDataInterfaces(){  LinkedHashMap<String,Object> testData=new LinkedHashMap<String,Object>();  testData.put("e1",new ISupportCImpl("C1"));  testData.put("e2",new ISupportABCImpl("A1","B1","BaseB","C1"));  testData.put("e3",new ISupportAImpl("A1","BaseAB"));  testData.put("e4",new ISupportBImpl("B1","BaseAB"));  testData.put("e5",new ISupportDImpl("D1","BaseD","BaseDBase"));  testData.put("e6",new ISupportBCImpl("B2","BaseAB2","C2"));  testData.put("e7",new ISupportBaseABImpl("BaseAB3"));  testData.put("e8",new SupportOverrideOneA("OA1","O1","OBase"));  testData.put("e9",new SupportOverrideOneB("OB1","O2","OBase"));  testData.put("e10",new SupportOverrideOne("O3","OBase"));  testData.put("e11",new SupportOverrideBase("OBase"));  testData.put("e12",new ISupportAImplSuperGImplPlus("G1","A3","BaseAB4","B4","C2"));  testData.put("e13",new ISupportAImplSuperGImpl("G2","A14","BaseAB5"));  return testData;}  }
class C{  protected void sequence_AnnotatedExportableElement(ISerializationContext context,ExportedVariableStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Source<Float> fromZeroToFloatMax(){  return Compositions.weightWithValues(Floats.fromZeroToFloatMax(),Float.MAX_VALUE,0f);}  }
class C{  public AttemptAndTimeBoundedExponentialBackOff(int maximumNumberOfAttempts,long initialIntervalMillis,long maximumTotalWaitTimeMillis,ResetPolicy resetPolicy,NanoClock nanoClock){  super(maximumNumberOfAttempts,initialIntervalMillis);  checkArgument(maximumTotalWaitTimeMillis > 0,"Maximum total wait time must be greater than zero.");  checkArgument(maximumTotalWaitTimeMillis < MAX_ELAPSED_TIME_MILLIS,"Maximum total wait time must be less than " + MAX_ELAPSED_TIME_MILLIS + " milliseconds");  checkArgument(resetPolicy != null,"resetPolicy may not be null");  checkArgument(nanoClock != null,"nanoClock may not be null");  this.maximumTotalWaitTimeMillis=maximumTotalWaitTimeMillis;  this.resetPolicy=resetPolicy;  this.nanoClock=nanoClock;  endTimeMillis=getTimeMillis() + maximumTotalWaitTimeMillis;}  }
class C{  public T caseActiveDefinition_(ActiveDefinition_ object){  return null;}  }
class C{  @Override public void doRun(int run) throws Exception {  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  Instances runInstances=new Instances(m_Instances);  runInstances.randomize(new Random(run));  m_ResultProducer.setResultListener(this);  if (m_LowerSize == 0) {    m_CurrentSize=m_StepSize;  } else {    m_CurrentSize=m_LowerSize;  }  while (m_CurrentSize <= m_Instances.numInstances() && ((m_UpperSize == -1) || (m_CurrentSize <= m_UpperSize))) {    m_ResultProducer.setInstances(new Instances(runInstances,0,m_CurrentSize));    m_ResultProducer.doRun(run);    m_CurrentSize+=m_StepSize;  }}  }
class C{  public boolean isSoapBodyLogged(SoapMessageImpl message,boolean clientSide){  Collection<ClientId> overrides;  if (clientSide) {    overrides=configurator.getRemoteProducerOverrides();  } else {    overrides=configurator.getLocalProducerOverrides();  }  boolean producerSubsystemIsOverridden=isClientInCollection(message.getService().getClientId(),overrides);  if (configurator.isSoapBodyLoggingEnabled()) {    return !producerSubsystemIsOverridden;  } else {    return producerSubsystemIsOverridden;  }}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public void deleteInstanceAt(int rowIndex,boolean notify){  if ((rowIndex >= 0) && (rowIndex < getRowCount())) {    if (!m_IgnoreChanges) {      addUndoPoint();    }    m_Data.delete(rowIndex);    if (notify) {      notifyListener(new TableModelEvent(this,rowIndex,rowIndex,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE));    }  }}  }
class C{  private void prepareTechnicalProduct(TechnicalProduct tProd) throws NonUniqueBusinessKeyException {  ParameterDefinition pd=TechnicalProducts.addParameterDefinition(ParameterValueType.INTEGER,"intParam",ParameterType.SERVICE_PARAMETER,tProd,mgr,null,null,true);  ParameterOption option=new ParameterOption();  option.setOptionId("OPT");  option.setParameterDefinition(pd);  List<ParameterOption> list=new ArrayList<ParameterOption>();  list.add(option);  pd.setOptionList(list);  mgr.persist(option);  TechnicalProducts.addEvent("eventId",EventType.SERVICE_EVENT,tProd,mgr);}  }
class C{  @Override public boolean equals(Object o){  if (o == this)   return true;  if (o instanceof Range) {    Range<?> r=(Range<?>)o;    return r.lbt.equals(lbt) && r.ubt.equals(ubt) && (r.lowerEndpoint == null ? r.lowerEndpoint == lowerEndpoint : r.lowerEndpoint.equals(lowerEndpoint))&& (r.upperEndpoint == null ? r.upperEndpoint == upperEndpoint : r.upperEndpoint.equals(upperEndpoint));  }  return false;}  }
class C{  public static <T>List<T> collectFutures(Collection<Future<T>> futures) throws ExecutionException, InterruptedException {  ArrayList<T> collected=new ArrayList<T>(futures.size());  for (  Future<T> future : futures)   collected.add(future.get());  return collected;}  }
class C{  public Holder(GeneralNames entityName){  this(entityName,V2_CERTIFICATE_HOLDER);}  }
class C{  public final boolean contains(String key){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(key))     return true;  }  return false;}  }
class C{  public Object[] evaluateAgainstNode(TagNode node) throws XPatherException {  if (node == null) {    throw new XPatherException("Cannot evaluate XPath expression against null value!");  }  Collection collectionResult=evaluateAgainst(singleton(node),0,tokenArray.length - 1,false,1,0,false,null);  Object[] array=new Object[collectionResult.size()];  Iterator iterator=collectionResult.iterator();  int index=0;  while (iterator.hasNext()) {    array[index++]=iterator.next();  }  return array;}  }
class C{  public Paragraph insertParagraph(int index){  Paragraph p=new Paragraph(this,this,factory);  setParagraphMagic(p,index);synchronized (paragraphs) {    paragraphs.add(index,p);  }  if (noteEventListener != null) {    noteEventListener.onParagraphCreate(p);  }  return p;}  }
class C{  public AbstractResources<T> withInternal(boolean internal){  this.includeInternal=internal;  return this;}  }
class C{  protected void continueOutputProcessingView(boolean doOutput,boolean forceUpdate){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingView");  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.continueOutputLimitedLastAllNonBufferedView(isGenerateSynthetic,isAll);  continueOutputProcessingViewAndJoin(doOutput,forceUpdate,newOldEvents);}  }
class C{  public static void startRingbackSound(Context context){  Log.d(LOG_TAG,"startRingbackSound");  if (null != mRingTone) {    Log.d(LOG_TAG,"already ringing");    return;  }  mRingbackTone=getRingTone(context,R.raw.ringback,"ringback.ogg");  if (null != mRingbackTone) {    if (null != mRingTone) {      mRingTone.stop();      mRingTone=null;    }    if (null != mCallEndTone) {      mCallEndTone.stop();      mCallEndTone=null;    }    MXCallsManager.setSpeakerphoneOn(context,true);    mRingbackTone.play();    return;  }  if (null == mRingbackPlayer) {    mRingbackPlayer=MediaPlayer.create(context.getApplicationContext(),R.raw.ringback);    if (null != mRingbackPlayer) {      mRingbackPlayer.setLooping(true);      mRingbackPlayer.setVolume(1.0f,1.0f);    }  }  if (null != mRingbackPlayer) {    if (!mRingbackPlayer.isPlaying()) {      if ((null != mCallEndPlayer) && mCallEndPlayer.isPlaying()) {        mCallEndPlayer.stop();      }      if ((null != mRingingPlayer) && mRingingPlayer.isPlaying()) {        mRingingPlayer.stop();      }      MXCallsManager.setSpeakerphoneOn(context,true);      mRingbackPlayer.start();    }  }}  }
class C{  public boolean hasInFilters(String name){  return (filters != null ? filters.containsKey(name) : false);}  }
class C{  private void processNestedComment(){  int nestedCommentsAmount=1;  while (templateReader.hasNextCharacter()) {    final char commentCharacter=templateReader.nextCharacter();    if (isCommentClosingMarker(commentCharacter) && templateReader.hasNextCharacter() && templateReader.peekCharacter() == syntax.getTagClosing()) {      templateReader.nextCharacter();      if (--nestedCommentsAmount == 0) {        break;      }    }    if (commentCharacter == syntax.getTagOpening() && templateReader.hasNextCharacter() && isCommentOpeningMarker(templateReader.peekCharacter())) {      templateReader.nextCharacter();      nestedCommentsAmount++;    }  }}  }
class C{  public void bindString(int index,String value){}  }
class C{  public List<Page> expandPages(List<Page> pages){  List<Page> expandedPages=new ArrayList<Page>();  Set<String> inAndOutLinks=new HashSet<String>();  for (int i=0; i < pages.size(); i++) {    Page currP=pages.get(i);    if (!expandedPages.contains(currP)) {      expandedPages.add(currP);    }    List<String> currInlinks=currP.getInlinks();    for (int j=0; j < currInlinks.size(); j++) {      inAndOutLinks.add(currInlinks.get(i));    }    List<String> currOutlinks=currP.getOutlinks();    for (int j=0; j < currOutlinks.size(); j++) {      inAndOutLinks.add(currOutlinks.get(i));    }  }  Iterator<String> it=inAndOutLinks.iterator();  while (it.hasNext()) {    String addr=it.next();    Page p=pTable.get(addr);    if (p != null && !expandedPages.contains(p)) {      expandedPages.add(p);    }  }  return expandedPages;}  }
class C{  public int toHashCode(){  return iTotal;}  }
class C{  public static HeaderParser createParser(String line) throws ParseException {  String headerName=Lexer.getHeaderName(line);  String headerValue=Lexer.getHeaderValue(line);  if (headerName == null || headerValue == null)   throw new ParseException("The header name or value is null",0);  Class parserClass=(Class)parserTable.get(SIPHeaderNamesCache.toLowerCase(headerName));  if (parserClass != null) {    try {      Constructor cons=(Constructor)parserConstructorCache.get(parserClass);      if (cons == null) {        cons=parserClass.getConstructor(constructorArgs);        parserConstructorCache.put(parserClass,cons);      }      Object[] args=new Object[1];      args[0]=line;      HeaderParser retval=(HeaderParser)cons.newInstance(args);      return retval;    } catch (    Exception ex) {      InternalErrorHandler.handleException(ex);      return null;    }  } else {    return new HeaderParser(line);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void endFitDataSession(FitDataTypeSetting[] dataTypeSettings,OnDataPointListener listener){  if (mGoogleApiClient.isConnected()) {    PendingResult<SessionStopResult> pendingResult=Fitness.SessionsApi.stopSession(mGoogleApiClient,null);    pendingResult.setResultCallback(new FitResultCallback<SessionStopResult>(this,FitResultCallback.RegisterType.SESSION,null,false));    for (    FitDataTypeSetting dataTypeSetting : dataTypeSettings) {      stopRecordingFitData(dataTypeSetting);      unregisterFitDataListener(listener);    }  }}  }
class C{  public static NonceAttribute createNonceAttribute(byte nonce[]){  NonceAttribute attribute=new NonceAttribute();  attribute.setNonce(nonce);  return attribute;}  }
class C{  public HorizontalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter,float touchDragRatioFwd,float touchDragRatioBck,float decelerateFactor){  super(viewAdapter,decelerateFactor,touchDragRatioFwd,touchDragRatioBck);}  }
class C{  public IStatus redo(IProgressMonitor monitor,IAdaptable uiInfo){  if (isValid()) {    redoTextChange();    redoRichTextChange();    fDocumentUndoManager.resetProcessChangeState();    fDocumentUndoManager.fireDocumentUndo(fStart,fText,fPreservedText,uiInfo,RichDocumentUndoEvent.REDONE,false);    return Status.OK_STATUS;  }  return IOperationHistory.OPERATION_INVALID_STATUS;}  }
class C{  public static void parseRequest(TermVectorsRequest termVectorsRequest,XContentParser parser) throws IOException {  XContentParser.Token token;  String currentFieldName=null;  List<String> fields=new ArrayList<>();  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {    if (token == XContentParser.Token.FIELD_NAME) {      currentFieldName=parser.currentName();    } else     if (currentFieldName != null) {      if (currentFieldName.equals("fields")) {        if (token == XContentParser.Token.START_ARRAY) {          while (parser.nextToken() != XContentParser.Token.END_ARRAY) {            fields.add(parser.text());          }        } else {          throw new ElasticsearchParseException("failed to parse term vectors request. field [fields] must be an array");        }      } else       if (currentFieldName.equals("offsets")) {        termVectorsRequest.offsets(parser.booleanValue());      } else       if (currentFieldName.equals("positions")) {        termVectorsRequest.positions(parser.booleanValue());      } else       if (currentFieldName.equals("payloads")) {        termVectorsRequest.payloads(parser.booleanValue());      } else       if (currentFieldName.equals("term_statistics") || currentFieldName.equals("termStatistics")) {        termVectorsRequest.termStatistics(parser.booleanValue());      } else       if (currentFieldName.equals("field_statistics") || currentFieldName.equals("fieldStatistics")) {        termVectorsRequest.fieldStatistics(parser.booleanValue());      } else       if (currentFieldName.equals("dfs")) {        termVectorsRequest.dfs(parser.booleanValue());      } else       if (currentFieldName.equals("per_field_analyzer") || currentFieldName.equals("perFieldAnalyzer")) {        termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));      } else       if (currentFieldName.equals("filter")) {        termVectorsRequest.filterSettings(readFilterSettings(parser,termVectorsRequest));      } else       if ("_index".equals(currentFieldName)) {        termVectorsRequest.index=parser.text();      } else       if ("_type".equals(currentFieldName)) {        termVectorsRequest.type=parser.text();      } else       if ("_id".equals(currentFieldName)) {        if (termVectorsRequest.doc != null) {          throw new ElasticsearchParseException("failed to parse term vectors request. either [id] or [doc] can be specified, but not both!");        }        termVectorsRequest.id=parser.text();      } else       if ("doc".equals(currentFieldName)) {        if (termVectorsRequest.id != null) {          throw new ElasticsearchParseException("failed to parse term vectors request. either [id] or [doc] can be specified, but not both!");        }        termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));      } else       if ("_routing".equals(currentFieldName) || "routing".equals(currentFieldName)) {        termVectorsRequest.routing=parser.text();      } else       if ("_version".equals(currentFieldName) || "version".equals(currentFieldName)) {        termVectorsRequest.version=parser.longValue();      } else       if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName) || "version_type".equals(currentFieldName)|| "versionType".equals(currentFieldName)) {        termVectorsRequest.versionType=VersionType.fromString(parser.text());      } else {        throw new ElasticsearchParseException("failed to parse term vectors request. unknown field [{}]",currentFieldName);      }    }  }  if (fields.size() > 0) {    String[] fieldsAsArray=new String[fields.size()];    termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));  }}  }
class C{  public boolean isPure(Collection<Kind> kinds){  return types.containsAll(kinds);}  }
class C{  private void init(){  state=PlayerState.RESET;  bufferPercent=0;  isSeekable=true;  isFullScreen=false;  isPlayingLocally=true;  playWhenPrepared=false;  lastCurrentPosition=0;  lastDuration=0;  isFrozen=false;  autoHideControls=true;}  }
class C{  protected boolean doDrop() throws AdeException {  System.out.println("Deleting the database Tables");  new TableManagerExt().dropTables();  super.doDrop(a_ade.getDataStore());  return true;}  }
class C{  private void composeLuaScript(LuaScript luaScriptType){  log.info("read the lua script for script type: " + luaScriptType + " with logoutput: "+ logoutput);  this.script=readLuaScriptFromClasspath(luaScriptType);  this.sha=DigestUtils.sha1Hex(this.script);}  }
class C{  private void displayErrorGettingPlaylistMessage(String details){  switchToPanel(R.id.info_panel);  infoTitle.setText(R.string.error_getting_playlist);  infoMessage.setText(String.format(getString(R.string.error_message),details));}  }
class C{  public IndexedConnectivity(LagGraph lagGraph){  this(lagGraph,false);}  }
class C{  public EventStoreBuilder tcpNoDelayEnabled(){  tcpSettingsBuilder.tcpNoDelay(true);  return this;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public SizedTextField(final Dimension dim){  setPreferredSize(dim);  setMaximumSize(dim);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.962 -0500",hash_original_method="74B9CFC0074F7A248036F63581582633",hash_generated_method="076330BA7A41AC303F0CDDB0218DD374") public boolean isRetryNeeded(){  boolean retVal=mRetryForever || (mRetryCount < mMaxRetryCount);  if (DBG)   log("isRetryNeeded: " + retVal);  return retVal;}  }
class C{  public void writeFacilityCoordinates(String file){  log.info("Writing facility coordinates to " + file);  BufferedWriter bw=IOUtils.getBufferedWriter(file);  try {    bw.write("FacilityId,Long,Lat");    bw.newLine();    for (    Id id : this.shops.getFacilities().keySet()) {      ActivityFacility facility=this.shops.getFacilities().get(id);      bw.write(id.toString());      bw.write(",");      bw.write(String.format("%.0f,%.0f\n",facility.getCoord().getX(),facility.getCoord().getY()));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + file);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + file);    }  }  log.info("Done writing coordinates to file.");}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public boolean add(terminal sym) throws internal_error {  boolean result;  not_null(sym);  result=_elements.get(sym.index());  if (!result)   _elements.set(sym.index());  return result;}  }
class C{  public boolean isIsNetworkHealthy(){  return isNetworkHealthy;}  }
class C{  public static List<Integer> createRanges(int... startEnds){  assert startEnds.length % 2 == 0;  ArrayList<Integer> ret=new ArrayList<Integer>();  for (int si=0; si < startEnds.length; si++) {    final int start=startEnds[si++];    final int end=startEnds[si];    assert end >= start;    ret.ensureCapacity(ret.size() + ((end - start) + 1));    for (int i=start; i <= end; i++) {      ret.add(new Integer(i));    }  }  return ret;}  }
class C{  private void loadBeans(){  Vector jarNames=getJarNames();  for (int i=0; i < jarNames.size(); i++) {    String jarFileName=(String)jarNames.elementAt(i);    try {      JarLoader.loadJarDoOnBean(jarFileName,helper);    } catch (    Throwable th) {      System.out.println("BP::loadBeans: jar load failed: " + jarFileName);      th.printStackTrace();    }  }}  }
class C{  public void addFilter(Predicate<Pair<Constituent,SpanLabelView>> filter){  this.gazetteerFilters.add(filter);}  }
class C{  public ToggleInlineMenuButtonBuilder<T> toggleButton(){  return new ToggleInlineMenuButtonBuilder<>(this,buttons().size());}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool name: " + this.getClass().getName());  LOG.info(" - input: " + args.input);  LOG.info(" - output: " + args.output);  LOG.info(" - partitions: " + args.partitions);  getConf().set("mapred.child.java.opts","-Xmx2048m");  Job job=Job.getInstance(getConf());  job.setJobName(String.format("IterateBfs[input: %s, output: %s, partitions: %d]",args.input,args.output,args.partitions));  job.setJarByClass(EncodeBfsGraph.class);  job.setNumReduceTasks(args.partitions);  FileInputFormat.addInputPath(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setInputFormatClass(SequenceFileInputFormat.class);  job.setOutputFormatClass(SequenceFileOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(BfsNode.class);  job.setOutputKeyClass(IntWritable.class);  job.setOutputValueClass(BfsNode.class);  job.setMapperClass(MapClass.class);  job.setReducerClass(ReduceClass.class);  FileSystem.get(job.getConfiguration()).delete(new Path(args.output),true);  job.waitForCompletion(true);  return 0;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean supportsCreateDB(){  return false;}  }
class C{  @RequestMapping(method=RequestMethod.GET) public String defaultEndpoint(final Model model){  final String view=super.providerConfiguration(model);  model.mergeAttributes(OIDCUtils.buildOidcServerConfigurationModelForDiscovery(model));  return view;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:08.781 -0500",hash_original_method="D76B0B21507A74EBC38ECF8BA836254A",hash_generated_method="84E64B986B0F051C6A6795357BB0DE66") public int next(){  return NativeCollation.next(address);}  }
class C{  public StructType(String _desc){  members=new Vector();  parseDescription(_desc);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject left=m_left.execute(xctxt,true);  XObject right=m_right.execute(xctxt,true);  XObject result=operate(left,right);  left.detach();  right.detach();  return result;}  }
class C{  private boolean Routine_L31(){  --gj;  if (gj < jss)   return true;  idir=2;  if (funcArray[gj - 1][gi - 1] <= cont) {    doInterpolation();    return true;  }  fij=funcArray[gj - 1][gi - 1];  return (Routine_L41());}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public SnmpString(Byte[] v){  value=new byte[v.length];  for (int i=0; i < v.length; i++) {    value[i]=v[i].byteValue();  }}  }
class C{  public StreamingDataMessage(final byte[] body,final long timestamp){  this.body=body;  this.timestamp=timestamp;}  }
class C{  protected void introduceConstrainst(ConstraintSet constraints){  this.instance.constraints.addExtraConstraint(constraints);}  }
class C{  static <T0>Tuple1<T0> of(T0 e0){  return new Tuple1Impl<>(e0);}  }
class C{  public boolean hasWildcard(){  return false;}  }
class C{  public static void main(String[] arg) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);  String query=parser.getValue("query","query","q");  String nresults=parser.getValue("nresults","nresults","nr");  String start=parser.getValue("start","index","start");  boolean help=parser.containsKey("help","h");  if (help || (query == null)) {    usage();    System.exit(1);  }  CodeSearchClient client=new CodeSearchClient(query,nresults,start);  client.run(System.out);}  }
class C{  public static RefactoringStatus checkFieldName(String name,IJavaElement context){  return checkName(name,JavaConventionsUtil.validateFieldName(name,context));}  }
class C{  public void cancelAllRequests(boolean mayInterruptIfRunning){  for (  List<RequestHandle> requestList : requestMap.values()) {    if (requestList != null) {      for (      RequestHandle requestHandle : requestList) {        requestHandle.cancel(mayInterruptIfRunning);      }    }  }  requestMap.clear();}  }
class C{  AnnotationDefinitionBuilder transitive(){  this.transitive=true;  return this;}  }
class C{  public void clearNameInUnoccupiedBlocks(){  for (int i=0; i < mBlockEntries.size(); i++) {    Block b=mBlockEntries.get(i);    if (b.getState() == Block.UNOCCUPIED) {      b.setValue("  ");    }  }}  }
class C{  public SimpleServiceEngine(ServiceDispatcher dispatcher){  super(dispatcher);}  }
class C{  @Override public boolean supportsColumnAliasing(){  debugCodeCall("supportsColumnAliasing");  return true;}  }
class C{  @Override public boolean hasNext(){  return this.parent.hasNext();}  }
class C{  private AccessorMaker isAccessibleField(CtField f,FieldInfo finfo) throws CompileError {  if (AccessFlag.isPrivate(finfo.getAccessFlags()) && f.getDeclaringClass() != thisClass) {    CtClass declClass=f.getDeclaringClass();    if (isEnclosing(declClass,thisClass)) {      AccessorMaker maker=declClass.getAccessorMaker();      if (maker != null)       return maker; else       throw new CompileError("fatal error.  bug?");    } else     throw new CompileError("Field " + f.getName() + " in "+ declClass.getName()+ " is private.");  }  return null;}  }
class C{  @Override public Check apply(List<ReferenceValue> tuple){  for (  ObjectContract contract : contracts) {    assert tuple.size() == contract.getArity() : "value tuple size " + tuple.size() + " must match contract arity "+ contract.getArity();    if (typesMatch(contract.getInputTypes(),tuple)) {      if (Log.isLoggingOn()) {        Log.logLine("Checking contract " + contract.getClass());      }      Object[] values=getValues(tuple);      Check check=checkContract(contract,values);      if (check != null) {        return check;      }    }  }  return null;}  }
class C{  public T caseLineTag(LineTag object){  return null;}  }
class C{  protected static Object[][] parseKey(Connection conn,String key){  ArrayList<String> columns=New.arrayList();  ArrayList<String> data=New.arrayList();  JdbcConnection c=(JdbcConnection)conn;  Session session=(Session)c.getSession();  Parser p=new Parser(session);  Expression expr=p.parseExpression(key);  addColumnData(columns,data,expr);  Object[] col=new Object[columns.size()];  columns.toArray(col);  Object[] dat=new Object[columns.size()];  data.toArray(dat);  Object[][] columnData={col,dat};  return columnData;}  }
class C{  public int size(){  return Long.bitCount(elements);}  }
class C{  @Path("revert") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse revert(final RevertRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.revert(request);}  }
class C{  public void addTab(String title,Component component){  insertTab(title,null,component,tabsContainer.getComponentCount());}  }
class C{  public ValidationDriver(){  this(PropertyMap.EMPTY,PropertyMap.EMPTY,null);}  }
class C{  public VolumeRestRep checkFullCopyProgress(URI sourceURI,URI fullCopyURI) throws InternalException {  s_logger.info("START full copy progress check for {}",fullCopyURI);  Map<URI,BlockObject> resourceMap=BlockFullCopyUtils.verifySourceAndFullCopy(sourceURI,fullCopyURI,_uriInfo,_dbClient);  Volume fullCopyVolume=(Volume)resourceMap.get(fullCopyURI);  if (BlockFullCopyUtils.isFullCopyDetached(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.cannotCheckProgressFullCopyDetached(fullCopyURI.toString());  }  BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fullCopyVolume);  s_logger.info("FINISH full copy progress check for {}",fullCopyURI);  VolumeRestRep volumeRestRep=fullCopyApiImpl.checkProgress(sourceURI,fullCopyVolume);  return volumeRestRep;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  super.execute(mapping,form,request,response);  InstructorEditForm frm=(InstructorEditForm)form;  frm.setMatchFound(null);  ActionMessages errors=new ActionMessages();  String op=frm.getOp();  if (op.equals(MSG.actionBackToInstructors())) {    response.sendRedirect(response.encodeURL("instructorList.do"));    return null;  }  if (sessionContext.getAttribute(SessionAttribute.DepartmentId) != null) {    String deptId=(String)sessionContext.getAttribute(SessionAttribute.DepartmentId);    Department d=new DepartmentDAO().get(new Long(deptId));    frm.setDeptName(d.getName().trim());    frm.setDeptCode(d.getDeptCode());  }  sessionContext.checkPermission(frm.getDeptCode(),"Department",Right.InstructorAdd);  if (op.equals(MSG.actionSaveInstructor())) {    errors=frm.validate(mapping,request);    if (errors.size() == 0 && isDeptInstructorUnique(frm,request)) {      doUpdate(frm,request);      response.sendRedirect(response.encodeURL("instructorList.do"));      return null;    } else {      if (errors.size() == 0) {        errors.add("uniqueId",new ActionMessage("errors.generic",MSG.errorInstructorIdAlreadyExistsInList()));      }      saveErrors(request,errors);      return mapping.findForward("showAdd");    }  }  if (op.equals(MSG.actionLookupInstructor())) {    errors=frm.validate(mapping,request);    if (errors.size() == 0) {      findMatchingInstructor(frm,request);      if (frm.getMatchFound() == null || !frm.getMatchFound().booleanValue()) {        errors.add("lookup",new ActionMessage("errors.generic",MSG.errorNoMatchingRecordsFound()));      }    }    saveErrors(request,errors);    return mapping.findForward("showAdd");  }  if (op.equals(MSG.actionSelectInstructor())) {    String select=frm.getSearchSelect();    if (select != null && select.trim().length() > 0) {      if (select.equalsIgnoreCase("i2a2")) {        fillI2A2Info(frm,request);      } else {        fillStaffInfo(frm,request);      }    } else {      errors.add("lookup",new ActionMessage("errors.generic",MSG.errorNoInstructorSelectedFromList()));      saveErrors(request,errors);    }    return mapping.findForward("showAdd");  }  return mapping.findForward("showAdd");}  }
class C{  public static void ccDrawCubicBezier(GL10 gl,CGPoint origin,CGPoint control1,CGPoint control2,CGPoint destination,int segments){  FloatBuffer vertices=getVertices(2 * (segments + 1));  float t=0;  for (int i=0; i < segments; i++) {    float x=(float)Math.pow(1 - t,3) * origin.x + 3.0f * (float)Math.pow(1 - t,2) * t* control1.x + 3.0f * (1 - t) * t* t* control2.x + t * t * t* destination.x;    float y=(float)Math.pow(1 - t,3) * origin.y + 3.0f * (float)Math.pow(1 - t,2) * t* control1.y + 3.0f * (1 - t) * t* t* control2.y + t * t * t* destination.y;    vertices.put(x);    vertices.put(y);    t+=1.0f / segments;  }  vertices.put(destination.x);  vertices.put(destination.y);  vertices.position(0);  gl.glDisable(GL_TEXTURE_2D);  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL_COLOR_ARRAY);  gl.glVertexPointer(2,GL_FLOAT,0,vertices);  gl.glDrawArrays(GL_LINE_STRIP,0,segments + 1);  gl.glEnableClientState(GL_COLOR_ARRAY);  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL_TEXTURE_2D);}  }
class C{  public void render(final Writer w) throws IOException {{    w.write("From: " + formatter.date(t.firstTimestamp));    w.write("\tTo: " + formatter.date(t.lastTimestamp));    w.write("\n");    w.write("\t");    for (    ICounter counter : t.a) {      formatter.writeFullPath(w,counter.getPath());      w.write("\t");    }    w.write("\n");    w.write(t.units + "\t");    for (    ICounter counter : t.a) {      final String[] groups=QueryUtil.getCapturedGroups(pattern,counter);      final String label;      if (groups != null) {        final StringBuilder sb=new StringBuilder();        for (int i=0; i < groups.length; i++) {          final String s=groups[i];          if (i > 0)           sb.append(":");          sb.append(s);        }        label=sb.toString();      } else {        label=counter.getName();      }      w.write(label);      w.write("\t");    }    w.write("Timestamp\n");  }  for (int row=0; row < t.nrows; row++) {    final String[] valStr=new String[t.a.length];    for (int col=0; col < t.ncols; col++) {      final ICounter c=t.a[col];      final IHistoryEntry e=t.data[row][col];      valStr[col]=formatter.value(c,e == null ? "" : e.getValue());    }    final long timestamp=t.getTimestamp(row);    final String timeStr=formatter.unitsFormat.format(((double)timestamp - t.getTimestamp(0)) / t.period);    w.write(timeStr + "\t");    for (    String s : valStr) {      w.write(s + "\t");    }    w.write(formatter.date(timestamp) + "\n");  }}  }
class C{  public ImageEntry(final DigestURL imageurl,final String alt,final int width,final int height,long fileSize){  assert imageurl != null;  this.imageurl=imageurl;  this.linkurl=null;  this.alt=alt;  this.width=width;  this.height=height;  this.fileSize=fileSize;}  }
class C{  private void accomodateIndex(DiscreteVariable variable,int index){  if (!variable.isAccommodateNewCategories()) {    throw new IllegalArgumentException("This variable is not set " + "to accomodate new categories.");  }  if (index >= variable.getNumCategories()) {    adjustCategories(variable,index + 1);  }}  }
class C{  static private boolean matchPrefix(String s1,String s2){  return s1.startsWith(s2) || s2.startsWith(s1);}  }
class C{  public String toString(){  return "(" + this.lat + ", "+ this.lng+ ")";}  }
class C{  public static void moveNotes(Context context,String host,String hash,List<Note> movedNotes) throws IOException, JSONException, AuthenticatorException {  for (  Note localNote : movedNotes) {    moveNote(host,hash,localNote);    localNote.setSyncStatus(DatabaseContract.NoteEntry.NOTE_STATUS.synced);    NoteDataSource.getInstance(context).updateNote(localNote);  }}  }
class C{  public static DimensionValueList query(Dfareporting reporting,String dimensionName,Long userProfileId,String startDate,String endDate,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing available %s values%n",dimensionName);  System.out.println("=================================================================");  DimensionValueRequest request=new DimensionValueRequest();  request.setDimensionName(dimensionName);  request.setStartDate(new DateTime(startDate));  request.setEndDate(new DateTime(endDate));  Query dimensionQuery=reporting.dimensionValues().query(userProfileId,request);  dimensionQuery.setMaxResults(maxPageSize);  DimensionValueList values=dimensionQuery.execute();  if ((values.getItems() != null) && !values.getItems().isEmpty()) {    for (    DimensionValue value : values.getItems()) {      System.out.printf("%s with value \"%s\" was found.%n",dimensionName,value.getValue());    }  } else {    System.out.println("No values found.");  }  System.out.println();  return values;}  }
class C{  public static Vec4 fromArray2(double[] array,int offset){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  return fromDoubleArray(array,offset,2);}  }
class C{  public EventPoint min(){  return events.poll();}  }
class C{  public void testGetName() throws Exception {  Container c=new Jetty8xInstalledLocalContainer(null);  String name=c.getName();  assertEquals("Jetty 8.x",name);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void addFlexTrapezoid(float x,float y,float z,int w,int h,int d,float scale,float bScale1,float bScale2,float bScale3,float bScale4,float fScale1,float fScale2,int dir){  float f4=x + w;  float f5=y + h;  float f6=z + d;  x-=scale;  y-=scale;  z-=scale;  f4+=scale;  f5+=scale;  f6+=scale;  int m=(mirror ? -1 : 1);  if (mirror) {    float f7=f4;    f4=x;    x=f7;  }  float[] v={x,y,z};  float[] v1={f4,y,z};  float[] v2={f4,f5,z};  float[] v3={x,f5,z};  float[] v4={x,y,f6};  float[] v5={f4,y,f6};  float[] v6={f4,f5,f6};  float[] v7={x,f5,f6};switch (dir) {case MR_RIGHT:    v[2]-=fScale1;  v1[2]-=fScale1;v4[2]+=fScale2;v5[2]+=fScale2;v[1]-=bScale1;v[2]-=bScale3;v3[1]+=bScale2;v3[2]-=bScale3;v4[1]-=bScale1;v4[2]+=bScale4;v7[1]+=bScale2;v7[2]+=bScale4;break;case MR_LEFT:v[2]-=fScale1;v1[2]-=fScale1;v4[2]+=fScale2;v5[2]+=fScale2;v1[1]-=bScale1;v1[2]-=bScale3;v2[1]+=bScale2;v2[2]-=bScale3;v5[1]-=bScale1;v5[2]+=bScale4;v6[1]+=bScale2;v6[2]+=bScale4;break;case MR_FRONT:v1[1]-=fScale1;v5[1]-=fScale1;v2[1]+=fScale2;v6[1]+=fScale2;v[0]-=m * bScale4;v[1]-=bScale1;v1[0]+=m * bScale3;v1[1]-=bScale1;v2[0]+=m * bScale3;v2[1]+=bScale2;v3[0]-=m * bScale4;v3[1]+=bScale2;break;case MR_BACK:v1[1]-=fScale1;v5[1]-=fScale1;v2[1]+=fScale2;v6[1]+=fScale2;v4[0]-=m * bScale4;v4[1]-=bScale1;v5[0]+=m * bScale3;v5[1]-=bScale1;v6[0]+=m * bScale3;v6[1]+=bScale2;v7[0]-=m * bScale4;v7[1]+=bScale2;break;case MR_TOP:v1[2]-=fScale1;v2[2]-=fScale1;v5[2]+=fScale2;v6[2]+=fScale2;v[0]-=m * bScale1;v[2]-=bScale3;v1[0]+=m * bScale2;v1[2]-=bScale3;v4[0]-=m * bScale1;v4[2]+=bScale4;v5[0]+=m * bScale2;v5[2]+=bScale4;break;case MR_BOTTOM:v1[2]-=fScale1;v2[2]-=fScale1;v5[2]+=fScale2;v6[2]+=fScale2;v2[0]+=m * bScale2;v2[2]-=bScale3;v3[0]-=m * bScale1;v3[2]-=bScale3;v6[0]+=m * bScale2;v6[2]+=bScale4;v7[0]-=m * bScale1;v7[2]+=bScale4;break;}float[] qValues=new float[]{Math.abs((v[0] - v1[0]) / (v3[0] - v2[0])),Math.abs((v[0] - v1[0]) / (v4[0] - v5[0])),Math.abs((v4[0] - v5[0]) / (v7[0] - v6[0])),Math.abs((v3[0] - v2[0]) / (v7[0] - v6[0])),Math.abs((v[1] - v3[1]) / (v1[1] - v2[1])),Math.abs((v4[1] - v7[1]) / (v5[1] - v6[1])),Math.abs((v[1] - v3[1]) / (v4[1] - v7[1])),Math.abs((v1[1] - v2[1]) / (v5[1] - v6[1])),Math.abs((v[2] - v4[2]) / (v1[2] - v5[2])),Math.abs((v[2] - v4[2]) / (v3[2] - v7[2])),Math.abs((v1[2] - v5[2]) / (v2[2] - v6[2])),Math.abs((v3[2] - v7[2]) / (v2[2] - v6[2]))};addRectShape(v,v1,v2,v3,v4,v5,v6,v7,w,h,d);}  }
class C{  public void put(K key,V value){  Set<V> set=map.get(key);  if (set == null) {    set=new LinkedHashSet<>();  }  set.add(value);  map.put(key,set);}  }
class C{  public CCTexture2D addImageExternal(String path){  assert path != null : "TextureMgr: path must not be null";  WeakReference<CCTexture2D> texSR=textures.get(path);  CCTexture2D tex=null;  if (texSR != null)   tex=texSR.get();  if (tex == null) {    tex=createTextureFromFilePathExternal(path);    textures.put(path,new WeakReference<CCTexture2D>(tex));  }  return tex;}  }
class C{  public void paint(Graphics2D g2D,Rectangle bounds,boolean isView){  Point pageStart=new Point(bounds.getLocation());  getElements();  for (int i=0; i < m_pe.length; i++)   m_pe[i].paint(g2D,0,pageStart,m_ctx,isView);}  }
class C{  boolean isLeaseHeld(){  return this.lessee != null && this.leaseId > -1;}  }
class C{  public boolean isSingleMarker(){  return singleMarker;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public List<Feature> apply(Feature feature){  String featureName=Feature.createName(DEFAULT_NAME,feature.getName());  Object featureValue=feature.getValue();  if (featureValue == null)   return Collections.emptyList(); else   if (featureValue instanceof String) {    String value=featureValue.toString();    if (value == null || value.length() == 0)     return Collections.emptyList();    if (NumericTypeUtil.isDigits(value)) {      if (yearDigitsPattern.matcher(value).matches()) {        return Collections.singletonList(new Feature(featureName,NumericType.YEAR_DIGITS.toString()));      } else       return Collections.singletonList(new Feature(featureName,NumericType.DIGITS.toString()));    } else     if (NumericTypeUtil.containsDigits(value)) {      if (alphanumericPattern.matcher(value).matches() && someLetters.matcher(value).find()) {        return Collections.singletonList(new Feature(featureName,NumericType.ALPHANUMERIC.toString()));      } else       return Collections.singletonList(new Feature(featureName,NumericType.SOME_DIGITS.toString()));    } else     if (romanNumeralPattern.matcher(value).matches()) {      return Collections.singletonList(new Feature(featureName,NumericType.ROMAN_NUMERAL.toString()));    }  }  return Collections.emptyList();}  }
class C{  public boolean isMultiLineTabbed(){  return multiLineTab;}  }
class C{  public String normalizeUri(String uri) throws IOException {  return normalizeUri(uri,HomeUtil.isWindows());}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public Americanize(int flags){  if ((flags & DONT_CAPITALIZE_TIMEX) != 0) {    capitalizeTimex=false;  }}  }
class C{  @Override public String toString(){  final StringBuilder result=new StringBuilder();  result.append("Generators: ");  if (getInputs() != null) {    for (    final Input<String> input : getInputs()) {      result.append(input.getClass().getName()).append(";");    }  }  result.append("\n");  result.append("Segments: ");  if (segments != null) {    for (    final String segment : segments) {      result.append(segment).append(";");    }  }  result.append("\n");  return result.toString();}  }
class C{  public int start_production(){  return 0;}  }
class C{  void regionToRect(int cellX,int cellY,int spanX,int spanY,Rect result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  final int left=hStartPadding + cellX * (mCellWidth + mWidthGap);  final int top=vStartPadding + cellY * (mCellHeight + mHeightGap);  result.set(left,top,left + (spanX * mCellWidth + (spanX - 1) * mWidthGap),top + (spanY * mCellHeight + (spanY - 1) * mHeightGap));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:08.471 -0500",hash_original_method="41572E8B48AA4FFDEDC5648FC4357E34",hash_generated_method="A38AC4790B73304A5AFBA25675780FA5") public void addReference(String msgId){  if (references == null) {    references=new StringBuffer();    references.append("References: ");  }  references.append(msgId);  references.append("\t");}  }
class C{  public BatchUpdateException(String reason,String SQLState,int vendorCode,int[] updateCounts,Throwable cause){  super(reason,SQLState,vendorCode,cause);  this.updateCounts=updateCounts;}  }
class C{  public final void quickPop(int n){  m_firstFree-=n;}  }
class C{  public static Drawable bitmapToDrawable(Bitmap b){  return b == null ? null : new BitmapDrawable(b);}  }
class C{  public void cancelAnimations(){  mAnimationManager.cancelAnimations();}  }
class C{  private void liveInAtStatement(){  if (statementIndex == 0) {    blockN.addLiveIn(regV);    BitSet preds=blockN.getPredecessors();    liveOutBlocks.or(preds);  } else {    statementIndex-=1;    nextFunction=NextFunction.LIVE_OUT_AT_STATEMENT;  }}  }
class C{  public Graph next(){  if (storedGraph != null) {    Graph temp=storedGraph;    storedGraph=null;    return temp;  }  if (decoratedGraphs.size() == 1 && decoratedGraphs.getLast().getEdge() == null && !returnedOne) {    returnedOne=true;    return new EdgeListGraph(decoratedGraphs.getLast().getGraph());  }  do {    while (!decoratedGraphs.isEmpty()) {      DecoratedGraph graph=decoratedGraphs.removeLast();      if (graph.isOrientable()) {        decoratedGraphs.addLast(graph);        break;      }    }    if (decoratedGraphs.isEmpty()) {      return null;    }    DecoratedGraph graph;    while ((graph=decoratedGraphs.getLast().orient()) != null) {      decoratedGraphs.addLast(graph);    }  } while (decoratedGraphs.getLast().getEdge() == null && !allowNewColliders && !GraphUtils.listColliderTriples(decoratedGraphs.getLast().getGraph()).equals(colliders));  return new EdgeListGraphSingleConnections(decoratedGraphs.getLast().getGraph());}  }
class C{  public static List<Integer> killAll() throws Exception {  MonitoredHost monitoredHost=MonitoredHost.getMonitoredHost(new HostIdentifier("localhost"));  Set<Integer> jvms=monitoredHost.activeVms();  List<Integer> res=new ArrayList<>();  for (  Integer jvmId : jvms) {    try {      MonitoredVm vm=monitoredHost.getMonitoredVm(new VmIdentifier("//" + jvmId + "?mode=r"),0);      if (IgniteNodeRunner.class.getName().equals(MonitoredVmUtil.mainClass(vm,true))) {        Process killProc=U.isWindows() ? Runtime.getRuntime().exec(new String[]{"taskkill","/pid",jvmId.toString(),"/f","/t"}) : Runtime.getRuntime().exec(new String[]{"kill","-9",jvmId.toString()});        killProc.waitFor();        res.add(jvmId);      }    } catch (    Exception e) {      X.printerrln("Could not kill IgniteNodeRunner java processes. Jvm pid = " + jvmId,e);    }  }  return res;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  super.endElement(handler,uri,localName,rawName);  handler.popElemTemplateElement().setEndLocaterInfo(handler.getLocator());}  }
class C{  public static String generateXPath(Node node,boolean ignoreWhitespace,boolean includeValues,boolean noIndex){  boolean noValues=!includeValues;  if (node == null)   return "";  Node parent=node.getParentNode();  int index=noIndex ? 0 : getXPathNodeIndex(node,ignoreWhitespace);  String indexStr="";  if (index > 0)   indexStr="[" + Integer.toString(index) + "]";  if (node.getNodeType() == Node.DOCUMENT_NODE) {    return "";  } else   if (node.getNodeType() == Node.TEXT_NODE) {    return generateXPath(parent,ignoreWhitespace,noValues,noIndex) + (noValues ? node.getNodeValue() + indexStr : "/TEXT(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.ELEMENT_NODE) {    return generateXPath(parent,ignoreWhitespace,noValues,noIndex) + "/" + node.getNodeName()+ indexStr;  } else   if (node.getNodeType() == Node.COMMENT_NODE) {    return generateXPath(parent,ignoreWhitespace,noValues,noIndex) + (noValues ? node.getNodeValue() + indexStr : "/COMMENT(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.ENTITY_REFERENCE_NODE) {    return generateXPath(parent,ignoreWhitespace,noValues,noIndex) + (noValues ? node.getNodeValue() + indexStr : "/EntityReference(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {    return generateXPath(parent,ignoreWhitespace,noValues,noIndex) + (noValues ? node.getNodeValue() + indexStr : "/PI(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.ATTRIBUTE_NODE) {    return generateXPath(((Attr)node).getOwnerElement(),ignoreWhitespace,noValues,noIndex) + "/'@" + node.getNodeName()+ (noValues ? "" : "=" + node.getNodeValue())+ "]";  } else   if (node.getNodeType() == Node.DOCUMENT_TYPE_NODE) {    return generateXPath(parent,ignoreWhitespace,noValues,noIndex) + (noValues ? node.getNodeValue() : "/DOCTYPE(" + node.getNodeName() + ")");  } else   if (node.getNodeType() == Node.CDATA_SECTION_NODE) {    return generateXPath(parent,ignoreWhitespace,noValues,noIndex) + (noValues ? node.getNodeValue() : "/CDATA(" + node.getNodeName() + ")");  }  return "";}  }
class C{  private void searchForFleas(final int expectedTotalHits) throws IOException {  Directory realDirectory=newFSDirectory(path);  IndexReader indexReader=DirectoryReader.open(realDirectory);  IndexSearcher indexSearcher=newSearcher(indexReader);  TopDocs topDocs=indexSearcher.search(new TermQuery(new Term(TEXT_FIELD,"fleas")),10);  assertNotNull(topDocs);  assertEquals(expectedTotalHits,topDocs.totalHits);  indexReader.close();  realDirectory.close();}  }
class C{  @PatchMethod(override=true) public static void loginWithOAuth(JsOAuthWindow window,String authUrl,String errUrl,int popupHeight,int popupWidth,int clientHeight,int clientWidth){}  }
class C{  public static boolean isLocalTimeInRange(LocalTime value,LocalTime optionalMinimum,LocalTime optionalMaximum,boolean inclusiveOfEndpoints){  LocalTime minimum=(optionalMinimum == null) ? LocalTime.MIN : optionalMinimum;  LocalTime maximum=(optionalMaximum == null) ? LocalTime.MAX : optionalMaximum;  if (value == null) {    return false;  }  if (maximum.isBefore(minimum) || maximum.equals(minimum)) {    return false;  }  if (inclusiveOfEndpoints) {    return ((value.isAfter(minimum) || value.equals(minimum)) && (value.isBefore(maximum) || value.equals(maximum)));  } else {    return (value.isAfter(minimum) && value.isBefore(maximum));  }}  }
class C{  protected boolean loadField(DDFRecord record,String tagName,int fieldIndex){  if (fields.get(tagName) == null) {    DDFField ddf=record.findField(tagName,fieldIndex);    if (ddf != null) {      fields.put(tagName,ddf);      ddf.toString();      return true;    }  }  return false;}  }
class C{  public static boolean isUniversalExceptionHandler(ObjectType catchType){  return catchType == null || catchType.equals(Type.THROWABLE);}  }
class C{  @Override public ObjInfo objInfo(Selector obj) throws UiObjectNotFoundException {  if (obj.toUiObject2() == null) {    return ObjInfo.getObjInfo(device.findObject(obj.toUiSelector()));  }  return ObjInfo.getObjInfo(obj.toUiObject2());}  }
class C{  @RequestMapping(value="/job/{jobId}/download",method={RequestMethod.GET}) @ResponseBody public void dumpJobDiagnosisInfo(@PathVariable String jobId,final HttpServletRequest request,final HttpServletResponse response){  String filePath;  try {    filePath=dgService.dumpJobDiagnosisInfo(jobId);  } catch (  IOException e) {    throw new InternalErrorException("Failed to dump job diagnosis info. " + e.getMessage(),e);  }  setDownloadResponse(filePath,response);}  }
class C{  public double addEnergy(double amount){  if (FMLCommonHandler.instance().getEffectiveSide().isClient())   return 0;  if (amount > capacity - energyStored)   amount=capacity - energyStored;  energyStored+=amount;  return amount;}  }
class C{  public GenericEntityStreamReaderMT(String serviceName,SearchCondition condition) throws Exception {  this(serviceName,condition,2);}  }
class C{  private void scoreWaypointResults(Collection<Waypoint> waypoints,SearchQuery query,Collection<ScoredResult> output){  for (  Waypoint waypoint : waypoints) {    double score=scoreWaypointResult(query,waypoint);    output.add(new ScoredResult(waypoint,score));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Interval domCommunicationNoise(){  return new Interval(0,.2);}  }
class C{  public static double[] mul(double[][] matrix,double[] x){  double[] val=new double[matrix.length];  for (int i=0; i < matrix.length; i++) {    double sum=0.0;    double[] m=matrix[i];    for (int j=0; j < m.length; j++)     sum+=m[j] * x[j];    val[i]=sum;  }  return val;}  }
class C{  private static void updateWindowUI(Window window){  updateStyles(window);  Window ownedWins[]=window.getOwnedWindows();  for (  Window w : ownedWins) {    updateWindowUI(w);  }}  }
class C{  public ArrayIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  public JSONArray put(int value){  put(new Integer(value));  return this;}  }
class C{  public int size(){  return n;}  }
class C{  public static void main(String... args) throws Exception {  FileUtils.deleteRecursive("~/temp",false);  Connection conn;  Class.forName("org.h2.Driver");  conn=DriverManager.getConnection("jdbc:h2:split:22:~/temp/test");  System.out.println("adding test data...");  Statement stat=conn.createStatement();  stat.execute("create table test(id int primary key, name varchar) " + "as select x, space(1000) from system_range(1, 2000)");  System.out.println("defrag to reduce random access...");  stat.execute("shutdown defrag");  conn.close();  System.out.println("create the zip file...");  Backup.execute("~/temp/test.zip","~/temp","",true);  DeleteDbFiles.execute("split:~/temp","test",true);  System.out.println("open the database from the zip file...");  conn=DriverManager.getConnection("jdbc:h2:split:zip:~/temp/test.zip!/test");  conn.close();}  }
class C{  public boolean hasExperimentId(){  return hasExtension(GwoExperimentId.class);}  }
class C{  @Override public void acquire(){synchronized (this) {    long start=startWait();    while (holder != null && !timedOut(start)) {      try {        wait(WAIT_TIME);      } catch (      InterruptedException ie) {      }    }    if (timedOut(start)) {      String holderName=holder == null ? "<no-one>" : holder.getName();      Harness.dumpStateAndExit("Timed out waiting for " + name + ", held by "+ holderName);    }    holder=Thread.currentThread();  }}  }
class C{  public DelegatingWork(Runnable delegate){  this.delegate=delegate;}  }
class C{  @SuppressWarnings("WeakerAccess") public StreamInfo(AbstractStreamInfo avi){  this.id=avi.id;  this.title=avi.title;  this.uploader=avi.uploader;  this.thumbnail_url=avi.thumbnail_url;  this.webpage_url=avi.webpage_url;  this.upload_date=avi.upload_date;  this.upload_date=avi.upload_date;  this.view_count=avi.view_count;  if (avi instanceof StreamPreviewInfo) {    this.duration=((StreamPreviewInfo)avi).duration;  }}  }
class C{  @Override public V put(K key,V value){  int hash=hash(key);  return segmentFor(hash).put(key,hash,value,false);}  }
class C{  public NbtTagCompound(String name,Map<String,NbtTag> tags){  super(name);  this.tags=new HashMap<>(tags);}  }
class C{  @RequestMapping(value="/SAML2/SSOSSL/{tenant:.*}",method={RequestMethod.GET,RequestMethod.POST}) public void ssoSSLDummy(Locale locale,Model model,@PathVariable(value="tenant") String tenant,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to ssoSSLDummy handler! " + tenant);  try {    RelyingParty rp=validateRelyingParty(request,tenant);    if (rp != null) {      logger.info("Send ssl probing reponse for: " + rp.getUrl());      URL rpUrl=new URL(rp.getUrl());      URL redirectUrl=new URL(rpUrl.getProtocol(),rpUrl.getHost(),rpUrl.getPort(),"/vsphere-client/");      String redirectUrlStr=redirectUrl.toString() + "?" + ssoSSLDummyQueryString(request);      response.sendRedirect(redirectUrlStr);    } else {      logger.error("Not able to respond to the request posted to /SAML2/SSOSSL/" + tenant + ": No replying party was found to match the given query parameter!");      sendError(locale,response,"Not able to respond to the request posted to /SAML2/SSOSSL/");    }  } catch (  Exception e) {    logger.error("Caught exception in ssoSSLDummy",e);    sendError(locale,response,e.getLocalizedMessage());  }}  }
class C{  public boolean isInside(Object objA,Object objB){  SpatialKey a=(SpatialKey)objA;  SpatialKey b=(SpatialKey)objB;  if (a.isNull() || b.isNull()) {    return false;  }  for (int i=0; i < dimensions; i++) {    if (a.min(i) <= b.min(i) || a.max(i) >= b.max(i)) {      return false;    }  }  return true;}  }
class C{  private static Pair<String,String> preIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String index=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + immediateNodeValue,qw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  private static void addRegisterParent(Idocarchhdr idoc,AxSf axsf,Locale locale,Element parent){  Element register=parent.addElement(XML_REGISTER_PARENT_TEXT);  Element book=register.addElement(XML_BOOK_TEXT);  book.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA(idoc.getName()));  addField("0",idoc.getId().toString(),locale,register);  addField("0",axsf.getAttributeValueAsString("fdrid"),locale,register);  addField("1",axsf.getAttributeValueAsString("fld1"),locale,register);  addField("2",longFormatter.format((Date)axsf.getAttributeValue("fld2")),locale,register);  int value=0;  if (axsf.getAttributeValue("fld6") instanceof BigDecimal) {    value=((BigDecimal)axsf.getAttributeValue("fld6")).intValue();  } else   if (axsf.getAttributeValue("fld6") instanceof Integer) {    value=((Integer)axsf.getAttributeValue("fld6")).intValue();  }  String text=RBUtil.getInstance(locale).getProperty("book." + "fld6" + "."+ value,"");  addField("6",text,locale,register);  text="";  if (axsf.getFld5() != null) {    text=axsf.getFld5().getCode() + GUION + axsf.getFld5().getName();  }  addField("5",text,locale,register);  text="";  if (axsf.getFld7() != null) {    text=axsf.getFld7().getCode() + GUION + axsf.getFld7().getName();  }  addField("7",text,locale,register);  text="";  if (axsf.getFld8() != null) {    text=axsf.getFld8().getCode() + GUION + axsf.getFld8().getName();  }  addField("8",text,locale,register);  if (axsf instanceof AxSfIn) {    text=RBUtil.getInstance(locale).getProperty("asocregfdr.9.in","");  } else {    text=RBUtil.getInstance(locale).getProperty("asocregfdr.9.out","");  }  addField("9",text,axsf.getAttributeValueAsString("fld9"),locale,register);  text="";  ScrCa scr=null;  if (axsf instanceof AxSfIn) {    scr=((AxSfIn)axsf).getFld16();  } else {    scr=((AxSfOut)axsf).getFld12();  }  if (scr != null) {    text=scr.getCode() + GUION + scr.getMatter();  }  addField("16",text,locale,register);  if (axsf instanceof AxSfIn) {    text=axsf.getAttributeValueAsString("fld17");  } else {    text=axsf.getAttributeValueAsString("fld13");  }  addField("17",text,locale,register);}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawBackground(0);  Block block=Block.getBlockFromName(nameBox.getText());  int x=width / 2 - 9;  int y=height / 2 - 32;  ItemStack itemStack=new ItemStack(Item.getItemFromBlock(block));  GlStateManager.enableRescaleNormal();  GlStateManager.enableBlend();  RenderHelper.enableGUIStandardItemLighting();  GlStateManager.tryBlendFuncSeparate(770,771,1,0);  if (itemStack.getItem() != null)   try {    Minecraft.getMinecraft().getRenderItem().renderItemAndEffectIntoGUI(itemStack,x,y);  } catch (  Exception e) {    e.printStackTrace();  } else   mc.fontRendererObj.drawString("?",x + 6,y + 5,10526880);  Minecraft.getMinecraft().getRenderItem().renderItemOverlays(Minecraft.getMinecraft().fontRendererObj,itemStack,x + 4,y + 4);  RenderHelper.disableStandardItemLighting();  GlStateManager.disableRescaleNormal();  GlStateManager.disableBlend();  try {    drawCenteredString(fontRendererObj,"Name: " + (itemStack.getItem() == null ? block.getLocalizedName() : itemStack.getDisplayName()),width / 2,y + 24,10526880);    drawCenteredString(fontRendererObj,"ID: " + Block.getIdFromBlock(block),width / 2,y + 36,10526880);    drawCenteredString(fontRendererObj,"Block exists: " + (block != null),width / 2,y + 48,10526880);  } catch (  Exception e) {    mc.fontRendererObj.drawString("?",x + 6,y + 5,10526880);    drawCenteredString(fontRendererObj,"Name: unknown",width / 2,y + 24,10526880);    drawCenteredString(fontRendererObj,"ID: unknown",width / 2,y + 36,10526880);    drawCenteredString(fontRendererObj,"Block exists: " + (block != null),width / 2,y + 48,10526880);  }  drawCenteredString(fontRendererObj,"Add a Block",width / 2,20,16777215);  drawString(fontRendererObj,"Name or ID",width / 2 - 100,67,10526880);  nameBox.drawTextBox();  super.drawScreen(par1,par2,par3);}  }
class C{  public UnsignedLong(long value){  if (value < 0)   throw new IllegalArgumentException("Value underflow");  this.value=value;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private final void resetTokenMark(int mark){  int qsz=m_compiler.getTokenQueueSize();  m_processor.m_queueMark=(mark > 0) ? ((mark <= qsz) ? mark - 1 : mark) : 0;  if (m_processor.m_queueMark < qsz) {    m_processor.m_token=(String)m_compiler.getTokenQueue().elementAt(m_processor.m_queueMark++);    m_processor.m_tokenChar=m_processor.m_token.charAt(0);  } else {    m_processor.m_token=null;    m_processor.m_tokenChar=0;  }}  }
class C{  @Override public void changeEvent(final IChangeRecord record){  if (record.getChangeAction() == ChangeAction.UPDATED) {    return;  }  if (ivs == null) {    ivs=new LinkedHashSet<IV<?,?>>();    size=0;  }  final ISPO spo=record.getStatement();  if (log.isTraceEnabled())   log.trace("Invalidation notice: spo=" + spo);  if (ivs.add(spo.s()))   size++;  if (ivs.add(spo.o()))   size++;  if (size > threshold) {    flush();  }}  }
class C{  public void onProgressData(byte[] responseBody){  AsyncHttpClient.log.d(LOG_TAG,"onProgressData(byte[]) was not overriden, but callback was received");}  }
class C{  public void deleteOneToOneChat(ContactId contact) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteOneToOneChat(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public Property weekOfWeekyear(){  return new Property(this,getChronology().weekOfWeekyear());}  }
class C{  protected void processTuple(Object tuple){  sendMessage(tuple);}  }
class C{  public int length(){  return branches.size();}  }
class C{  public static Iterator iterator(final Object iterable){  if (iterable == null) {    throw new NullPointerException();  }  if (iterable instanceof Collection) {    return ((Collection)iterable).iterator();  }  if (iterable instanceof net.sourceforge.retroweaver.runtime.java.lang.Iterable) {    return ((net.sourceforge.retroweaver.runtime.java.lang.Iterable)iterable).iterator();  }  throw new RuntimeException("iterator call on " + iterable.getClass());}  }
class C{  public boolean remove(Solution solution){  modCount++;  return data.remove(solution);}  }
class C{  public static JsonValue value(float value){  if (Float.isInfinite(value) || Float.isNaN(value)) {    throw new IllegalArgumentException("Infinite and NaN values not permitted in JSON");  }  return new JsonNumber(cutOffPointZero(Float.toString(value)));}  }
class C{  public void remove(HistoryReference href){synchronized (hrefList) {    int index=hrefList.indexOf(href);    if (index >= 0) {      hrefList.remove(index);      fireTableRowsDeleted(index,index);    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Inline public static int computeHeaderSize(RVMType type){  if (type.isArrayType()) {    return computeArrayHeaderSize(type.asArray());  } else {    return computeScalarHeaderSize(type.asClass());  }}  }
class C{  @Override @SuppressWarnings("PMD.SignatureDeclareThrowsException") public void handleRequestBody(SolrQueryRequest req,SolrQueryResponse rsp) throws Exception {  LOGGER.debug("Handling analysis request {}",req);  String rowsParam=req.getParams().get(CommonParams.ROWS,null);  int rows=-1;  if (rowsParam != null) {    rows=Integer.parseInt(rowsParam);  }  SolrDocumentList results=new SolrDocumentList();  String[] filterQueries=req.getParams().getParams(CommonParams.FQ);  JoinFunction key=new JoinFunction(filterQueries);  Map<String,List<SolrDocument>> collectedDocs=collectDocuments(req,key);  if (rows == 0) {    results.setNumFound(collectedDocs.keySet().size());  } else {    final QueryFunctions queryFunctions=QueryEvaluator.extractFunctions(filterQueries);    final List<SolrDocument> resultDocuments=analyze(req,queryFunctions,key,collectedDocs,!JoinFunction.isDefaultJoinFunction(key));    results.addAll(resultDocuments);    results.setNumFound(resultDocuments.size());  }  rsp.add("response",results);}  }
class C{  public final void error(Object o){  if (console != null)   console.error("// Error: " + o + "\n"); else {    err.println("// Error: " + o);    err.flush();  }}  }
class C{  @After public void basicTearDown() throws Exception {  defaultDatabaseTearDown(fbManager);  fbManager=null;}  }
class C{  public static boolean blacklistFileContains(final File listsPath,final String blacklistToUse,final String newEntry){  final Set<String> blacklist=new HashSet<String>(FileUtils.getListArray(new File(listsPath,blacklistToUse)));  return blacklist != null && blacklist.contains(newEntry);}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);  fileArrayParams.remove(key);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","tsnc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static void rollback(Connection conn) throws SQLException {  if (conn != null) {    conn.rollback();  }}  }
class C{  public RequestBuilder withStdErrRedirection(OutputRedirection errRedirection){  Preconditions.checkNotNull(errRedirection,"Std Err Redirection is null");  this.errRedirection=errRedirection;  return this;}  }
class C{  protected IStatus run(IProgressMonitor monitor){  this.startTime=System.currentTimeMillis();  ProverUIActivator.getDefault().logDebug("Run method called " + getCurRelTime());  colorPredicates=new ColorPredicate[ProverPreferencePage.NUM_STATUS_COLORS];  IPreferenceStore store=ProverUIActivator.getDefault().getPreferenceStore();  for (int i=1; i <= colorPredicates.length; i++) {    String predicate=store.getString(ProverPreferencePage.getColorPredPrefName(i));    boolean appliesToLeafOnly=store.getBoolean(ProverPreferencePage.getAppliesToLeafPrefName(i));    colorPredicates[i - 1]=new ColorPredicate((appliesToLeafOnly ? "leaf " : "") + predicate);  }  initializeFields();  if (nodeToProve == null) {    return new Status(IStatus.INFO,ProverUIActivator.PLUGIN_ID,"The module has parse errors. The prover cannot be run.");  }  try {    IPath modulePath=module.getLocation();    if (!modulePath.toFile().exists()) {      ProverUIActivator.getDefault().logDebug("Module file given to ProverJob does not exist.");      return new Status(IStatus.ERROR,ProverUIActivator.PLUGIN_ID,"Module file does not exist.");    } else     if (Platform.getOS().equals(Platform.OS_WIN32) && cygwinPath != null && !cygwinPath.toFile().exists()) {      ProverUIActivator.getDefault().logDebug("The given cygwin path does not exist.");      return new Status(IStatus.ERROR,ProverUIActivator.PLUGIN_ID,"The given cygwin path " + cygwinPath + " does not exist.");    }    lastJob=this;    try {      ProverHelper.clearObligationMarkers(module.getProject());      ObligationsView.refreshObligationView();      ProverHelper.prepareModuleForProverLaunch(module,this);    } catch (    CoreException e1) {      ProverUIActivator.getDefault().logError("Error clearing obligation markers for project of module " + modulePath,e1);    }    command=constructCommand();    ProcessBuilder pb=new ProcessBuilder(command);    ProverUIActivator.getDefault().logDebug("Prover ARGUMENTS: " + Arrays.toString(command));    pb.directory(modulePath.toFile().getParentFile());    if (Platform.isRunning() && Platform.getOS().equals(Platform.OS_WIN32)) {      String pathVar="Path";      if (cygwinPath != null) {        pb.environment().put(pathVar,cygwinPath.toOSString() + ";" + pb.environment().get(pathVar));      }    }    pb.redirectErrorStream(true);    ProverUIActivator.getDefault().logDebug("TLAPM launched " + getCurRelTime());    Process process=pb.start();    setUpStreamListening(process,monitor);    if (proverProcess != null) {      while (checkAndSleep()) {        if (monitor.isCanceled()) {          proverProcess.getStreamsProxy().write("kill\n");          ProverUIActivator.getDefault().logDebug("Sent kill to tlapm.");          while (checkAndSleep()) {          }          return Status.CANCEL_STATUS;        }      }      try {        if (proverProcess.isTerminated() && proverProcess.getExitValue() == 2) {          return new Status(IStatus.ERROR,ProverUIActivator.PLUGIN_ID,"Incorrect arguments to the PM. The command to launch the PM was :\n" + getLaunchProverCommand());        }        if (proverProcess.isTerminated() && proverProcess.getExitValue() != 0 && proverProcess.getExitValue() != 1) {          return new Status(IStatus.ERROR,ProverUIActivator.PLUGIN_ID,"Error running tlapm. Report a bug with the error code to the developers at https://tlaplus.codeplex.com/workitem/list/basic." + "\n \n Error code: " + proverProcess.getExitValue());        }      } catch (      DebugException e) {        return new Status(IStatus.ERROR,ProverUIActivator.PLUGIN_ID,"Error getting exit code for tlapm process. This is a bug. Report it to the developers at https://tlaplus.codeplex.com/workitem/list/basic");      }      return Status.OK_STATUS;    } else {      return new Status(IStatus.ERROR,ProverUIActivator.PLUGIN_ID,"Error launching prover. Launching the prover returned a null process.");    }  } catch (  IOException e) {    return new Status(IStatus.ERROR,ProverUIActivator.PLUGIN_ID,"The following error occurred while running the PM : \n" + e.getMessage(),e);  } finally {    if (listener != null) {      listener.streamClosed();    }    monitor.done();    DebugPlugin.getDefault().getLaunchManager().removeLaunch(launch);    if (proverProcess != null && listener != null) {      proverProcess.getStreamsProxy().getErrorStreamMonitor().removeListener(listener);      proverProcess.getStreamsProxy().getOutputStreamMonitor().removeListener(listener);    }    ProverUIActivator.getDefault().logDebug("Done with proving " + getCurRelTime());    EditorUtil.setReadOnly(module,false);    try {      ProverHelper.removeSANYStepMarkers(module);    } catch (    CoreException e) {      ProverUIActivator.getDefault().logError("Error removing SANY step markers after prover finished running.",e);    }  }}  }
class C{  public static double jaccardDistance(String strA,String strB){  return 1.0 - jaccard(strA,strB);}  }
class C{  public static SitesEntry updateSiteSettings(WebmasterToolsService myService,String siteUrl) throws IOException, ServiceException {  System.out.println("Site: " + siteUrl);  String siteId=URLEncoder.encode(siteUrl,"UTF-8");  URL updateUrl=new URL(getSitesFeedUrl() + siteId);  try {    System.out.println("Updating geographic location...");    SitesEntry entryUpdate=new SitesEntry();    entryUpdate.setGeolocation(SAMPLE_LOCATION);    myService.update(updateUrl,entryUpdate);    System.out.println("Updating desired crawl rate...");    entryUpdate=new SitesEntry();    entryUpdate.setCrawlRate(SAMPLE_RATE);    myService.update(updateUrl,entryUpdate);    System.out.println("Updating preferred domain...");    entryUpdate=new SitesEntry();    entryUpdate.setPreferredDomain(SAMPLE_PREFERRED_DOMAIN);    myService.update(updateUrl,entryUpdate);    System.out.println("Updating enhanced image search...");    entryUpdate=new SitesEntry();    entryUpdate.setEnhancedImageSearch(SAMPLE_ENHANCED_IMAGE_SEARCH);    return myService.update(updateUrl,entryUpdate);  } catch (  ServiceException e) {    System.out.println("Please make sure that the site to update " + "contains a trailing forward slash");    throw (e);  }}  }
class C{  public void store(long value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  DefaultNativeList(Pointer<T> pointer,ListType type){  if (pointer == null || type == null) {    throw new IllegalArgumentException("Cannot build a " + getClass().getSimpleName() + " with "+ pointer+ " and "+ type);  }  this.io=pointer.getIO("Cannot create a list out of untyped pointer " + pointer);  this.type=type;  this.size=pointer.getValidElements();  this.pointer=pointer;}  }
class C{  public boolean hasMatching(ItemStack stack){  final ItemStack s=get();  if (stack == null) {    return s == null;  } else   if (stack != null && s != null) {    return stack.isItemEqual(s);  }  return false;}  }
class C{  public boolean startsWith(Name n){  if (n instanceof CompoundName) {    return (impl.startsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  @Override public void process(V tuple){  Max.this.process(tuple);}  }
class C{  private AbstractAnalysisFactory initialize(Class<? extends AbstractAnalysisFactory> factoryClazz) throws IOException {  Map<String,String> args=new HashMap<>();  args.put("luceneMatchVersion",Version.LATEST.toString());  Constructor<? extends AbstractAnalysisFactory> ctor;  try {    ctor=factoryClazz.getConstructor(Map.class);  } catch (  Exception e) {    throw new RuntimeException("factory '" + factoryClazz + "' does not have a proper ctor!");  }  AbstractAnalysisFactory factory=null;  try {    factory=ctor.newInstance(args);  } catch (  InstantiationException|IllegalAccessException e) {    throw new RuntimeException(e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof IllegalArgumentException) {      return null;    }  }  if (factory instanceof ResourceLoaderAware) {    try {      ((ResourceLoaderAware)factory).inform(new StringMockResourceLoader(""));    } catch (    IOException ignored) {    }catch (    IllegalArgumentException ignored) {    }  }  return factory;}  }
class C{  public Stream<T> dropWhile(Predicate<? super T> predicate){  requireNonNull(predicate);  if (predicate.test(element)) {    return empty();  } else {    return this;  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private static void addMonitorInfo(ThreadInfo info,StringBuilder sb,int stackDepth){  if (VersionUtils.isJava16OrAbove()) {    try {      Method m=ThreadInfo.class.getMethod("getLockedMonitors");      Object o=m.invoke(info);      if (o != null) {        Class<?> monitorInfoClass=Class.forName("java.lang.management.MonitorInfo");        int length=Array.getLength(o);        for (int i=0; i < length; i++) {          Object mi=Array.get(o,i);          Method depthMethod=monitorInfoClass.getMethod("getLockedStackDepth");          Object depth=depthMethod.invoke(mi);          if (depth != null && depth.equals(Integer.valueOf(stackDepth)))           sb.append("\t-  locked " + mi + "\n");        }      }    } catch (    Throwable t) {      LOG.info("Error retrieving monitor info",t);    }  }}  }
class C{  protected String doIt() throws Exception {  if (p_BasedInDamnd.equals("Y")) {    if (!generateDistributionDemand())     throw new Exception(Msg.getMsg(getCtx(),"ProcessFailed"),CLogger.retrieveException());  } else {    if (!generateDistribution())     throw new Exception(Msg.getMsg(getCtx(),"ProcessFailed"),CLogger.retrieveException());  }  if (!executeDistribution())   throw new Exception(Msg.getMsg(getCtx(),"ProcessFailed"),CLogger.retrieveException());  return Msg.getMsg(getCtx(),"ProcessOK");}  }
class C{  public int pauseDownload(long... ids){  initPauseMethod();  if (pauseDownload == null) {    return -1;  }  try {    return (Integer)pauseDownload.invoke(downloadManager,ids);  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  private final String buildSQL(StringBuffer selectClause,boolean useOrderByClause){  if (selectClause == null) {    POInfo info=POInfo.getPOInfo(this.ctx,table.getAD_Table_ID(),trxName);    if (info == null) {      throw new IllegalStateException("No POInfo found for AD_Table_ID=" + table.getAD_Table_ID());    }    selectClause=info.buildSelect();  }  StringBuffer whereBuffer=new StringBuffer();  if (!Util.isEmpty(this.whereClause,true)) {    if (whereBuffer.length() > 0)     whereBuffer.append(" AND ");    whereBuffer.append("(").append(this.whereClause).append(")");  }  if (this.onlyActiveRecords) {    if (whereBuffer.length() > 0)     whereBuffer.append(" AND ");    whereBuffer.append("IsActive=?");  }  if (this.onlyClient_ID) {    if (whereBuffer.length() > 0)     whereBuffer.append(" AND ");    whereBuffer.append("AD_Client_ID=?");  }  if (this.onlySelection_ID > 0) {    String[] keys=table.getKeyColumns();    if (keys.length != 1) {      throw new DBException("Table " + table + " has 0 or more than 1 key columns");    }    if (whereBuffer.length() > 0)     whereBuffer.append(" AND ");    whereBuffer.append(" EXISTS (SELECT 1 FROM T_Selection s WHERE s.AD_PInstance_ID=?" + " AND s.T_Selection_ID=" + table.getTableName() + "."+ keys[0]+ ")");  }  StringBuffer sqlBuffer=new StringBuffer(selectClause);  if (whereBuffer.length() > 0) {    sqlBuffer.append(" WHERE ").append(whereBuffer);  }  if (useOrderByClause && !Util.isEmpty(orderBy,true)) {    sqlBuffer.append(" ORDER BY ").append(orderBy);  }  String sql=sqlBuffer.toString();  if (applyAccessFilter) {    MRole role=MRole.getDefault(this.ctx,false);    sql=role.addAccessSQL(sql,table.getTableName(),applyAccessFilterFullyQualified,applyAccessFilterRW);  }  if (CLogMgt.isLevelFinest())   log.finest("TableName = " + table.getTableName() + "... SQL = "+ sql);  return sql;}  }
class C{  public boolean isPingSupported(String jid){  try {    DiscoverInfo result=ServiceDiscoveryManager.getInstanceFor(connection).discoverInfo(jid);    return result.containsFeature(NAMESPACE);  } catch (  XMPPException e) {    return false;  }}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on; " + " this is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values; specify an inclusive"+ " range with \"-\", eg: \"first-3,5,6-10,last\".";}  }
class C{  public IndexRequest source(Map source,XContentType contentType) throws ElasticsearchGenerationException {  try {    XContentBuilder builder=XContentFactory.contentBuilder(contentType);    builder.map(source);    return source(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  public Builder mergeVarintField(final int number,final int value){  if (number == 0) {    throw new IllegalArgumentException("Zero is not a valid field number.");  }  getFieldBuilder(number).addVarint(value);  return this;}  }
class C{  void onBindAppWidget(Launcher launcher){  if (!mHasNotifiedInitialWidgetSizeChanged) {    notifyWidgetSizeChanged(launcher);  }}  }
class C{  public synchronized boolean removeAll(Collection c){  Object[] elements=getArray();  int len=elements.length;  if (len != 0) {    int newlen=0;    Object[] temp=new Object[len];    for (int i=0; i < len; ++i) {      Object element=elements[i];      if (!c.contains(element))       temp[newlen++]=element;    }    if (newlen != len) {      setArray(copyOfRange(temp,0,newlen,Object[].class));      return true;    }  }  return false;}  }
class C{  private Node createSecurityTokenReference(String refId) throws ParserException {  ObjectFactory secExtFactory=new ObjectFactory();  SecurityTokenReferenceType stRef=secExtFactory.createSecurityTokenReferenceType();  ReferenceType ref=secExtFactory.createReferenceType();  ref.setURI("#" + refId);  ref.setValueType(X509_CERTIFICATE_TYPE);  stRef.getAny().add(ref);  return marshallJaxbElement(stRef).getFirstChild();}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public DatacenterCharacteristics(String architecture,String os,String vmm,List<? extends Host> hostList,double timeZone,double costPerSec,double costPerMem,double costPerStorage,double costPerBw){  setId(-1);  setArchitecture(architecture);  setOs(os);  setHostList(hostList);  setAllocationPolicy(allocationPolicy);  setCostPerSecond(costPerSec);  setTimeZone(0.0);  setVmm(vmm);  setCostPerMem(costPerMem);  setCostPerStorage(costPerStorage);  setCostPerBw(costPerBw);}  }
class C{  public ScriptableInputStream(InputStream in,Scriptable scope) throws IOException {  super(in);  this.scope=scope;  enableResolveObject(true);  Context cx=Context.getCurrentContext();  if (cx != null) {    this.classLoader=cx.getApplicationClassLoader();  }}  }
class C{  public final void notify(){  return;}  }
class C{  public HadoopLocalFileSystemV1(){  super(new HadoopRawLocalFileSystem());}  }
class C{  private void initComponents(){  toolButtonGroup=new javax.swing.ButtonGroup();}  }
class C{  public h4 removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void mouseExited(MouseEvent evt){}  }
class C{  public static QueryTask.QuerySpecification buildQuerySpec(Class documentType,ImmutableMap<String,String> terms){  checkNotNull(documentType,"Cannot build query spec for unspecified documentType");  QueryTask.QuerySpecification spec=new QueryTask.QuerySpecification();  QueryTask.Query documentKindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(documentType));  if (terms == null || terms.isEmpty()) {    spec.query=documentKindClause;  } else {    spec.query.addBooleanClause(documentKindClause);    for (    String key : terms.keySet()) {      QueryTask.Query clause=new QueryTask.Query().setTermPropertyName(key).setTermMatchValue(terms.get(key));      spec.query.addBooleanClause(clause);    }  }  return spec;}  }
class C{  private void initializeLayout(){  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  Border padding=BorderFactory.createEmptyBorder(5,5,5,5);  if (revealOption) {    JPanel topPanel=new JPanel();    topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.X_AXIS));    topPanel.add(layoutCb);    topPanel.add(Box.createHorizontalStrut(100));    topPanel.add(layoutParameterReveal);    topPanel.setAlignmentX(CENTER_ALIGNMENT);    topPanel.setBorder(padding);    add(topPanel);  } else {    layoutCb.setAlignmentX(RIGHT_ALIGNMENT);    layoutCb.setBorder(padding);    add(layoutCb);  }  layoutPanel.setVisible(layoutParameterReveal.isDown() || !revealOption);  layoutPanel.setAlignmentX(CENTER_ALIGNMENT);  add(layoutPanel);  if (revealOption) {    setBorder(BorderFactory.createTitledBorder("Layout"));  }  if (useApplyButton) {    JPanel applyPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));    applyPanel.add(applyButton);    add(Box.createRigidArea(new Dimension(0,10)));    add(applyPanel);  }}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);  invalidateOptionsMenu();}  }
class C{  public Tree buildAnnotatedType(AnnotatedTypeMirror annotatedType){  return createAnnotatedType(annotatedType);}  }
class C{  public void gotoFrame(String label) throws IOException {  print("gotoFrame",new String[]{"\"" + label + "\""});}  }
class C{  protected ContinuousVariableAnalysis analyzeData(Set<String> excludedVariables) throws IOException {  ContinuousVariableAnalysis variableAnalysis=new ContinuousVariableAnalysis();  extractVariables(excludedVariables,variableAnalysis);  return variableAnalysis;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @ObjectiveCName("resumeUploadWithRid:") public void resumeUpload(long rid){  modules.getFilesModule().resumeUpload(rid);}  }
class C{  public static long composeExpandableChildId(@IntRange(from=MIN_GROUP_ID,to=MAX_GROUP_ID) long groupId,@IntRange(from=MIN_CHILD_ID,to=MAX_CHILD_ID) long childId){  if (groupId < MIN_GROUP_ID || groupId > MAX_GROUP_ID) {    throw new IllegalArgumentException("Group ID value is out of range. (groupId = " + groupId + ")");  }  if (childId < MIN_CHILD_ID || childId > MAX_CHILD_ID) {    throw new IllegalArgumentException("Child ID value is out of range. (childId = " + childId + ")");  }  return ((groupId << BIT_OFFSET_GROUP_ID) & BIT_MASK_GROUP_ID) | ((childId << BIT_OFFSET_CHILD_ID) & BIT_MASK_CHILD_ID);}  }
class C{  public boolean earlyRestrictOptLevels(){  return dcgOrg != null && !dcgOrg.someDataAvailable();}  }
class C{  public boolean isFocusTraversable(JComboBox a){  boolean returnValue=((ComboBoxUI)(uis.elementAt(0))).isFocusTraversable(a);  for (int i=1; i < uis.size(); i++) {    ((ComboBoxUI)(uis.elementAt(i))).isFocusTraversable(a);  }  return returnValue;}  }
class C{  public void storeObject(@NonNull OddObject object){  long expiration=maxAge != null ? maxAge + new Date().getTime() : Long.MAX_VALUE;  objectStore.put(object.getId(),new StoredObject(object,expiration));  List<OddObject> included=object.getIncluded();  if (included != null) {    storeObjects(included);  }}  }
class C{  public void renameAttribute(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().renameAttribute();}  }
class C{  public static void pickCards(int[] deck,int[] picks){  for (int i=0; i < picks.length; i++) {    picks[i]=deck[pickCards(deck)];  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Trigger tempAfter(String name){  Trigger trigger=after(name);  trigger.isTemp=true;  return trigger;}  }
class C{  public static void enumerateResources(VerificationHost host,URI peerURI,ResourceEnumerationTaskState enumTask,String testCase) throws Throwable {  host.log("Performing resource enumeration");  ResourceEnumerationTaskState enumTaskState=performResourceEnumeration(host,peerURI,enumTask);  host.waitForFinishedTask(ResourceEnumerationTaskState.class,createServiceURI(host,peerURI,enumTaskState.documentSelfLink));  host.log("\n==%s==Total Time Spent in Enumeration==\n",testCase + getVMCount(host,peerURI));  ServiceStats enumerationStats=host.getServiceState(null,ServiceStats.class,UriUtils.buildStatsUri(createServiceURI(host,peerURI,GCPEnumerationAdapterService.SELF_LINK)));  host.log(Utils.toJsonHtml(enumerationStats));}  }
class C{  private Optional(){  this.value=null;}  }
class C{  public String tableize(String className){  return pluralize(underscore(className));}  }
class C{  public EquivalentAttributeRemoval(int numberOfSamples,double epsilon,boolean recalculateAttributeStatistics,RandomGenerator random,Operator op){  this.numberOfSamples=numberOfSamples;  this.epsilon=epsilon;  this.recalculateAttributeStatistics=recalculateAttributeStatistics;  this.random=random;  this.operator=op;}  }
class C{  public static synchronized void flagForRenewal(){  renewConnectionTime=new Date().getTime();}  }
class C{  public boolean isCritical(){  Object oo=get_Value(COLUMNNAME_IsCritical);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @org.junit.Test public void testResponseMatching(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("this is a very complicated sentence");  String response=waitForOutput(output);  if (!response.equals("this is a very complicated sentence")) {    fail("did not mimic: " + response);  }  text.input(new TextInput("this is a good reply to that",true,false));  response=waitForOutput(output);  if (!response.equals("this is a good reply to that")) {    fail("did not mimic: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("this is a very complicated sentence");  response=waitForOutput(output);  if (!response.equals("this is a good reply to that")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("this very complicated sentence");  response=waitForOutput(output);  if (!response.equals("this is a good reply to that")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("complicated sentence");  response=waitForOutput(output);  if (response.equals("this is a good reply to that")) {    fail("should not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("complicated");  response=waitForOutput(output);  if (response.equals("this is a good reply to that")) {    fail("should not match: " + response);  }  bot.shutdown();}  }
class C{  protected void balanceTree(){  BinarySearchTreeNode<E> root=this.root;  boolean balancing=this.selfBalancing;  this.root=null;  this.size=0;  this.selfBalancing=true;  Iterator<E> iterator=new BinarySearchTreeIterator<E>(root);  while (iterator.hasNext()) {    BinarySearchTreeNode<E> node=new BinarySearchTreeNode<E>(iterator.next());    this.insert(node);  }  this.selfBalancing=balancing;}  }
class C{  @Override public SimpleQueryStringBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  @Override public boolean applyTo(ImageView imageView,String tag){  if (getUri() != null) {    boolean consumed=DrawerImageLoader.getInstance().setImage(imageView,getUri(),tag);    if (!consumed) {      imageView.setImageURI(getUri());    }  } else   if (getIcon() != null) {    imageView.setImageDrawable(getIcon());  } else   if (getBitmap() != null) {    imageView.setImageBitmap(getBitmap());  } else   if (getIconRes() != -1) {    imageView.setImageResource(getIconRes());  } else   if (mIIcon != null) {    imageView.setImageDrawable(new IconicsDrawable(imageView.getContext(),mIIcon).actionBar());  } else {    imageView.setImageBitmap(null);    return false;  }  return true;}  }
class C{  @Override public boolean copyFile(String source,String dest){  try {    mDBApi.copy(source,dest);    return true;  } catch (  DropboxException e) {    e.printStackTrace();    return false;  }}  }
class C{  public static UTMPoint LLtoUTM(LatLonPoint llpoint,Ellipsoid ellip,UTMPoint utmpoint){  int zoneNumber=getZoneNumber(llpoint.getY(),llpoint.getX());  boolean isnorthern=(llpoint.getLatitude() >= 0f);  return LLtoUTM(llpoint,ellip,utmpoint,zoneNumber,isnorthern);}  }
class C{  @Override public void writeTo(Object value,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException {  Class<?> view;  Annotation[] annotations2;  if (httpHeaders.containsKey(JsonDeepReadPreStreamInterceptor.KEY_DEEP_READ)) {    view=DeepReadView.class;    List<Annotation> annotationsList=new ArrayList<Annotation>();    annotationsList.addAll(Arrays.asList(annotations));    annotationsList.add(DEEP_READ_ANNOTATION);    annotations2=new Annotation[annotationsList.size()];    annotations2=annotationsList.toArray(annotations2);    httpHeaders.remove(JsonDeepReadPreStreamInterceptor.KEY_DEEP_READ);  } else {    view=Object.class;    annotations2=annotations;  }  AnnotationBundleKey key=new AnnotationBundleKey(annotations2,type);  JsonEndpointConfig endpoint;synchronized (_writers) {    endpoint=_writers.get(key);  }  if (endpoint == null) {    ObjectMapper mapper=locateMapper(type,mediaType);    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);    endpoint=_configForWriting(mapper,annotations,view);synchronized (_writers) {      _writers.put(key.immutableKey(),endpoint);    }  }  _modifyHeaders(value,type,genericType,annotations,httpHeaders,endpoint);  ObjectWriter writer=endpoint.getWriter();  JsonEncoding enc=findEncoding(mediaType,httpHeaders);  JsonGenerator g=_createGenerator(writer,entityStream,enc);  try {    if (writer.isEnabled(SerializationFeature.INDENT_OUTPUT)) {      g.useDefaultPrettyPrinter();    }    JavaType rootType=null;    if (genericType != null && value != null) {      if (genericType.getClass() != Class.class) {        rootType=writer.getTypeFactory().constructType(genericType);        if (rootType.getRawClass() == Object.class) {          rootType=null;        }      }    }    if (rootType != null) {      writer=writer.withType(rootType);    }    value=endpoint.modifyBeforeWrite(value);    ObjectWriterModifier mod=ObjectWriterInjector.getAndClear();    if (mod != null) {      writer=mod.modify(endpoint,httpHeaders,value,writer,g);    }    writer.writeValue(g,value);  }  finally {    g.close();  }}  }
class C{  public boolean isData(){  return label.isData();}  }
class C{  public final int errorCount(){  return errors.size();}  }
class C{  public static void printArray(int[] arr){  System.out.print("[ ");  for (int j=0; j < (arr.length - 1); j++) {    System.out.print(arr[j] + ", ");  }  if (arr.length > 0) {    System.out.print(arr[arr.length - 1]);  }  System.out.println(" ]");}  }
class C{  public void performTest() throws Exception {  for (int i=0; i < KEY_CNT; i++)   grid(0).cache(CACHE_NAME).put(i,"val" + i);  for (int i=0; i < KEY_CNT_OTHER; i++)   grid(GRID_CNT - 1).cache(CACHE_NAME_OTHER).put(i,"val" + i);  for (int i=0; i < GRID_CNT - 1; i++) {    IgniteCache<Object,Object> cache=grid(i).cache(CACHE_NAME);    assertEquals("Key set [i=" + i + ']',KEY_CNT,cache.localSize(CachePeekMode.ALL));  }  assert grid(GRID_CNT - 1).cache(CACHE_NAME_OTHER).localSize() == KEY_CNT_OTHER;  grid(0).cache(CACHE_NAME).clear();  for (int i=0; i < GRID_CNT - 1; i++)   assert grid(i).cache(CACHE_NAME).localSize() == 0;  assert grid(GRID_CNT - 1).cache(CACHE_NAME_OTHER).localSize() == KEY_CNT_OTHER;}  }
class C{  private void deriveDetails(){  viewGraph=viewInfo.buildGraphView();  updateExposedGraph();  hierarchies=new HierarchyCache<NodeDisplayProperty>(getNodeDisplayPropertyProvider(),getViewGraph());  relationSetChoices=buildViewChoices(viewInfo);  elementKindChoices=ElementKindDescriptors.buildViewChoices(viewInfo);  edgeMatcherChoices=GraphEdgeMatcherDescriptors.buildViewChoices(viewInfo);  ElementKindStats stats=new ElementKindStats(elementKindChoices);  stats.incrStats(viewInfo.getViewNodes());  elementKindStats=stats.createStats();  jungGraph=buildJungGraph();  ranking=rankGraph(jungGraph);}  }
class C{  public boolean isPushData(){  return opcode <= OP_16;}  }
class C{  public static void isEqual(String member,BigDecimal inputValue,BigDecimal checkValue) throws ValidationException {  if (inputValue != null && checkValue != null && inputValue.compareTo(checkValue) == 0) {    ValidationException vf=new ValidationException(ReasonEnum.VALUE_NOT_IN_RANGE,member,new Object[]{inputValue});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public ClassTemplateInfo(Class<? extends ConverterPropertyEditorBase> templateClass){  this.templateClass=templateClass;  try {    ConverterPropertyEditorBase tc=templateClass.newInstance();    Class<?> templateTargetClass=tc.getTargetClass();    loadTemplateBytes();    classNameConstant=findConstant(getVMClassName(templateClass));    classNameRefConstant=findConstant(new StringBuilder(64).append('L').append(getVMClassName(templateClass)).append(';').toString());    targetClassConstant=findConstant(getVMClassName(templateTargetClass));  } catch (  InstantiationException|IllegalAccessException|IOException e) {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,"Unexected exception ClassTemplateInfo",e);    }  }}  }
class C{  protected void computeAdditionalDimensionForCompositeAggregators(){  Map<Set<String>,Integer> keysToCombinationId=getKeysToCombinationId();  final int initialKeysCombinationsSize=dimensionsDescriptorIDToKeys.size();  for (int keysIndex=0; keysIndex < initialKeysCombinationsSize; ++keysIndex) {    Set<String> keys=dimensionsDescriptorIDToKeys.get(keysIndex).getFields();    int ddId=keysIndex * customTimeBucketsCombination.size();    Map<String,Set<String>> valueToAggregators=dimensionsDescriptorIDToValueToCompositeAggregator.get(ddId);    Map<String,Set<String>> compositeAggregatorToValues=getAggregatorToValues(valueToAggregators);    for (    Map.Entry<String,Set<String>> aggregatorToValuesEntry : compositeAggregatorToValues.entrySet()) {      AbstractTopBottomAggregator aggregator=getCompositeAggregatorByName(aggregatorToValuesEntry.getKey());      Set<String> subCombination=aggregator.getSubCombinations();      addSubKeysAndAggregator(aggregatorToValuesEntry.getValue(),keys,subCombination,aggregator.getEmbedAggregatorName(),keysToCombinationId);    }  }}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  public static void error(int windowNo,Component comp,String adMessage,String message){  Properties ctx=Env.getCtx();  logger.info(adMessage + " - " + message);  if (CLogMgt.isLevelFinest()) {    Trace.printStack();  }  String out=constructMessage(adMessage,message);  try {    Messagebox.showDialog(out,AEnv.getDialogHeader(ctx,windowNo),Messagebox.OK,Messagebox.ERROR);  } catch (  InterruptedException exception) {    Thread.currentThread().interrupt();  }  return;}  }
class C{  public static boolean terminate(ExecutorService service,long timeout,TimeUnit timeUnit){  if (service != null) {    service.shutdown();    try {      if (service.awaitTermination(timeout,timeUnit)) {        return true;      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }    service.shutdownNow();  }  return false;}  }
class C{  private long registerLock(Lock lock){  long id=LOCK_ID_GEN.incrementAndGet();  lockMap.put(id,lock);  return id;}  }
class C{  public static double[] means(double[][] input,int startRow,int length){  double[] theMeans=sums(input,startRow,length);  for (int i=0; i < theMeans.length; i++) {    theMeans[i]=theMeans[i] / length;  }  return theMeans;}  }
class C{  public float lengthSquared(){  return Vector2.lengthSquared(this);}  }
class C{  public static final CButton createCustomizeButton(boolean withText){  if (withText)   return createCustomizeButton(Msg.getMsg(Env.getCtx(),A_CUSTOMIZE));  return createCustomizeButton(null);}  }
class C{  public boolean hasConditions(){  return ifModifiedSince != null || ifNoneMatch != null;}  }
class C{  public static SWTBotTreeItem selectProjectItem(SWTBotTreeItem item,String... folderPath){  for (  String folder : folderPath) {    if (item == null) {      return null;    }    item.doubleClick();    item=item.getNode(folder);  }  return item;}  }
class C{  public final int offsetXZ(int padding){  return this.rand.nextInt(32 - padding * 2) + padding;}  }
class C{  public SnmpCounter(long v) throws IllegalArgumentException {  super(v);}  }
class C{  @SuppressWarnings("unused") private SerialMessage(){}  }
class C{  public static String formatDate(Date fecha){  String cadena=null;  if (fecha != null) {    cadena=SDF.format(fecha);  }  return cadena;}  }
class C{  private boolean isUrlCorrect(@NotNull String url){  if (!END_URL.test(url)) {    view.showUrlError(locale.importProjectMessageUrlInvalid());    return false;  }  if (WHITESPACE.test(url)) {    view.showUrlError(locale.importProjectMessageStartWithWhiteSpace());    return false;  }  if (!URL_REGEX.test(url)) {    view.showUrlError(locale.importProjectMessageUrlInvalid());    return false;  }  view.hideUrlError();  return true;}  }
class C{  public static int replaceColorAlpha(int color,int alpha){  return (color & 0x00ffffff) | (alpha << 24);}  }
class C{  private void savePlacements(){  final String fileName=new FileSave("Where To Save place.txt ?","place.txt",s_mapFolderLocation).getPathString();  try {    if (fileName == null) {      return;    }    final FileOutputStream out=new FileOutputStream(fileName);    PointFileReaderWriter.writeOneToMany(out,new HashMap<>(m_placements));    out.flush();    out.close();    System.out.println("Data written to :" + new File(fileName).getCanonicalPath());  } catch (  final Exception ex) {    ClientLogger.logQuietly("fileName = " + fileName,ex);  }}  }
class C{  private void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2,y / 2);}  }
class C{  public static String stripMetaFromName(String fileName){  int end=fileName.indexOf(",S=");  if (end == -1)   end=fileName.indexOf(":2,");  if (end == -1)   return fileName;  return fileName.substring(0,end);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild2.class,args);}  }
class C{  protected boolean scrollUp(TextView widget,Spannable buffer,int amount){  final Layout layout=widget.getLayout();  final int top=widget.getScrollY();  int topLine=layout.getLineForVertical(top);  if (layout.getLineTop(topLine) == top) {    topLine-=1;  }  if (topLine >= 0) {    topLine=Math.max(topLine - amount + 1,0);    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(topLine));    return true;  }  return false;}  }
class C{  public static boolean deleteContents(File directory){  File[] files=directory.listFiles();  boolean success=true;  if (files != null) {    for (    File file : files) {      success&=deleteRecursively(file);    }  }  return success;}  }
class C{  public boolean checkPattern(List<LockPatternView.Cell> pattern){  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"r");    final byte[] stored=new byte[(int)raf.length()];    int got=raf.read(stored,0,stored.length);    raf.close();    if (got <= 0) {      return true;    }    return Arrays.equals(stored,LockPatternUtils.patternToHash(pattern));  } catch (  FileNotFoundException fnfe) {    return true;  }catch (  IOException ioe) {    return true;  }}  }
class C{  @Override public void rewrite() throws FitsException, IOException {  ArrayDataOutput dos=(ArrayDataOutput)this.input;  if (rewriteable()) {    FitsUtil.reposition(dos,this.fileOffset);    write(dos);    dos.flush();  } else {    throw new FitsException("Invalid attempt to rewrite Header.");  }}  }
class C{  private static void storePreferences(Preferences preferences){  try {    preferences.flush();  } catch (  BackingStoreException e) {    Activator.getDefault().logError("Error storing the preference node",e);  }}  }
class C{  public static void clearDU(IR ir){  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=reg.getNext()) {    reg.defList=null;    reg.useList=null;    reg.clearSeenUse();  }  for (Enumeration<Register> e=ir.regpool.getPhysicalRegisterSet().enumerateAll(); e.hasMoreElements(); ) {    Register reg=e.nextElement();    reg.defList=null;    reg.useList=null;    reg.clearSeenUse();  }  if (TRACE_DU_ACTIONS || DEBUG) {    VM.sysWrite("Cleared DU\n");  }}  }
class C{  public DeltaCRLIndicatorExtension(int crlNum) throws IOException {  super(PKIXExtensions.DeltaCRLIndicator_Id,true,BigInteger.valueOf(crlNum),NAME,LABEL);}  }
class C{  private GridRouterClientImpl createClient(GridTcpRouterConfiguration routerCfg) throws GridClientException {  UUID clientId=UUID.randomUUID();  return new GridRouterClientImpl(clientId,routerCfg);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return attributes;}  }
class C{  protected JsOutput newJsOutput(Module m) throws IOException {  return new JsOutput(m,isCompilingLanguageModule());}  }
class C{  public List<A> prependList(List<A> xs){  if (this.isEmpty())   return xs;  if (xs.isEmpty())   return this;  if (xs.tail.isEmpty())   return prepend(xs.head);  List<A> result=this;  List<A> rev=xs.reverse();  Assert.check(rev != xs);  while (rev.nonEmpty()) {    List<A> h=rev;    rev=rev.tail;    h.setTail(result);    result=h;  }  return result;}  }
class C{  public RectListManager(Rectangle[] rects,int off,int sz){  this.size=sz;  this.rects=new Rectangle[sz];  System.arraycopy(rects,off,this.rects,0,sz);  Arrays.sort(this.rects,comparator);}  }
class C{  public static long periodEnd(long now,long period){  QDate localCalendar=QDate.allocateLocalDate();  long endTime=periodEnd(now,period,localCalendar);  QDate.freeLocalDate(localCalendar);  return endTime;}  }
class C{  public boolean hasField(final int number){  if (number == 0) {    throw new IllegalArgumentException("Zero is not a valid field number.");  }  return number == lastFieldNumber || fields.containsKey(number);}  }
class C{  @Restrictions({@Restrict({"SYSTEM_ADMIN","SECURITY_ADMIN"}),@Restrict({"RESTRICTED_SYSTEM_ADMIN","RESTRICTED_SECURITY_ADMIN"})}) public static void testSmtpSettings(SetupForm setup){  setup.validateSmtp();  Validation.required("setup.smtpTo",setup.smtpTo);  Validation.email("setup.smtpTo",setup.smtpTo);  if (Validation.hasErrors()) {    renderJSON(ValidationResponse.collectErrors());  }  MailSettingsValidator.Settings settings=new MailSettingsValidator.Settings();  if (StringUtils.isNotEmpty(setup.nameservers) && !InetAddresses.isInetAddress(setup.smtpServer)) {    Set<String> ips=Sets.newHashSet(setup.nameservers.split(","));    try {      settings.server=DnsUtils.getHostIpAddress(ips,setup.smtpServer).getHostAddress();    } catch (    ViPRException e) {      renderJSON(ValidationResponse.invalid(e.getMessage()));    }  } else {    settings.server=setup.smtpServer;  }  settings.port=ConfigProperties.getPort(setup.smtpPort,setup.smtpEnableTls);  settings.username=setup.smtpUsername;  settings.password=PasswordUtil.decryptedValue(setup.smtpPassword);  settings.channel=StringUtils.equals("yes",setup.smtpEnableTls) ? "starttls" : "clear";  settings.authType=setup.smtpAuthType;  settings.fromAddress=setup.smtpFrom;  try {    MailSettingsValidator.validate(settings,setup.smtpTo);  } catch (  RuntimeException e) {    Logger.error(e,"Failed to send email");    Validation.addError(null,"setup.testEmail.failure",e.getMessage());    if (StringUtils.isEmpty(setup.nameservers)) {      Validation.addError(null,"setup.smtpServer.invalidEmptyNameserver");    }  }  if (Validation.hasErrors()) {    renderJSON(ValidationResponse.collectErrors());  } else {    renderJSON(ValidationResponse.valid(MessagesUtils.get("setup.testEmail.success")));  }}  }
class C{  private static void deleteNodesNotOnPath(final View view,final ViewNode startNode,final ViewNode targetNode){  final Set<ViewNode> succs=GraphAlgorithms.getSuccessors(startNode);  final Set<ViewNode> preds=GraphAlgorithms.getPredecessors(targetNode);  final HashSet<ViewNode> combined=new HashSet<ViewNode>(succs);  combined.retainAll(preds);  combined.add(startNode);  combined.add(targetNode);  final List<ViewNode> nodesToDelete=new ArrayList<ViewNode>();  for (  final ViewNode node : view.getGraph().getNodes()) {    if (!combined.contains(node)) {      nodesToDelete.add(node);    }  }  for (  final ViewNode node : nodesToDelete) {    view.deleteNode(node);  }}  }
class C{  public static String uuid(){  char[] uuid=new char[36];  int r;  uuid[8]=uuid[13]=uuid[18]=uuid[23]='-';  uuid[14]='4';  for (int i=0; i < 36; i++) {    if (uuid[i] == 0) {      r=(int)(Math.random() * 16);      uuid[i]=CHARS[(i == 19) ? (r & 0x3) | 0x8 : r & 0xf];    }  }  return new String(uuid);}  }
class C{  public ClientParamsStack(HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  applicationParams=aparams;  clientParams=cparams;  requestParams=rparams;  overrideParams=oparams;}  }
class C{  public TableBuilder addIndexes(Collection<? extends IndexBuilder> indexes){  if (indexes != null) {    for (    IndexBuilder col : indexes) {      addIndex(col);    }  }  return this;}  }
class C{  @Override public String toString(){  return "[size=" + this.valueToString(this.getSize()) + "]";}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  private td createTD(Element element){  td td=new td().addElement(element).setAlign(AlignType.LEFT).setVAlign(AlignType.TOP);  if (m_longField)   td.setColSpan(3);  return td;}  }
class C{  private void sendSipMessageDeliveryStatus(DeliveryStatus deliveryStatus,String remoteInstanceId) throws PayloadException, NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.debug("Send delivery status " + deliveryStatus.getStatus() + " for message "+ deliveryStatus.getMsgId());    }    String from=ChatUtils.ANONYMOUS_URI;    String to=ChatUtils.ANONYMOUS_URI;    String imdn=ChatUtils.buildImdnDeliveryReport(deliveryStatus.getMsgId(),deliveryStatus.getStatus(),deliveryStatus.getTimestamp());    String cpim=ChatUtils.buildCpimDeliveryReport(from,to,imdn,System.currentTimeMillis());    SessionAuthenticationAgent authenticationAgent=new SessionAuthenticationAgent(mImService.getImsModule());    String toUri=PhoneUtils.formatContactIdToUri(deliveryStatus.getRemote()).toString();    SipDialogPath dialogPath=new SipDialogPath(mImService.getImsModule().getSipManager().getSipStack(),mImService.getImsModule().getSipManager().getSipStack().generateCallId(),1,toUri,ImsModule.getImsUserProfile().getPublicUri(),toUri,mImService.getImsModule().getSipManager().getSipStack().getServiceRoutePath(),mRcsSettings);    dialogPath.setRemoteSipInstance(remoteInstanceId);    if (sLogger.isActivated()) {      sLogger.info("Send first MESSAGE");    }    SipRequest msg=SipMessageFactory.createMessage(dialogPath,FeatureTags.FEATURE_OMA_IM,CpimMessage.MIME_TYPE,cpim.getBytes(UTF8));    SipTransactionContext ctx=mImService.getImsModule().getSipManager().sendSipMessageAndWait(msg);    analyzeSipResponse(ctx,authenticationAgent,dialogPath,cpim);  } catch (  InvalidArgumentException|ParseException e) {    throw new PayloadException("Unable to set authorization header for remoteInstanceId: " + remoteInstanceId,e);  }}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public Collection<SynchronizingStorageEngine> values(){  return localStores.values();}  }
class C{  public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  public void addToEquivalentMasks(ExportMask exportMask,ExportMaskPolicy policy){  String key=generatePolicyKey(policy);  Set<URI> similarMasks=equivalentMasks.get(key);  if (similarMasks == null) {    similarMasks=new HashSet<>();    equivalentMasks.put(key,similarMasks);  }  similarMasks.add(exportMask.getId());  exportMaskPolicy.put(exportMask.getId(),policy);}  }
class C{  static List<String> tokenizeMessage(String message){  ArrayList<String> result=new ArrayList<>();  if (TextUtils.isEmpty(message)) {    return result;  }  boolean foundPercent=false;  int lastSplit=0;  int lastPercent=-1;  for (int i=0, length=message.length(); i < length; i++) {    char currChar=message.charAt(i);    if (currChar == '%') {      if (i + 1 < length) {        char nextChar=message.charAt(i + 1);        if (nextChar == '%' || !Character.isDigit(nextChar)) {          i++;          continue;        }      } else {        continue;      }      foundPercent=true;      lastPercent=i;    } else     if (foundPercent) {      if (Character.isDigit(currChar)) {        continue;      } else {        String potentialText=message.substring(lastSplit,lastPercent).trim();        if (!TextUtils.isEmpty(potentialText)) {          result.add(potentialText);        }        result.add(message.substring(lastPercent,i));        lastSplit=i;        foundPercent=false;      }    }  }  if (lastSplit != message.length() - 1) {    if (lastPercent > lastSplit) {      String potentialText=message.substring(lastSplit,lastPercent).trim();      if (!TextUtils.isEmpty(potentialText)) {        result.add(potentialText);      }      result.add(message.substring(lastPercent,message.length()));    } else {      String potentialText=message.substring(lastSplit,message.length()).trim();      if (!TextUtils.isEmpty(potentialText)) {        result.add(potentialText);      }    }  }  return result;}  }
class C{  private boolean canMoveSelection(){  Selection<?> selection=agent.getSelection();  if (selection == null || selection.isEmpty()) {    return false;  }  if (appContext.getCurrentProject() == null || appContext.getCurrentProject().getRootProject() == null) {    return false;  }  String projectPath=appContext.getCurrentProject().getRootProject().getPath();  for (  Object o : selection.getAllElements()) {    if (!(o instanceof ResourceBasedNode<?> && o instanceof HasStorablePath)) {      return false;    }    if (projectPath.equals(((HasStorablePath)o).getStorablePath())) {      return false;    }  }  return true;}  }
class C{  public void update(byte buffer[],int off,int len){  if (skip)   return;  for (int i=0; i < digests.size(); i++) {    digests.get(i).update(buffer,off,len);  }}  }
class C{  String generateModel(String packageName,boolean annotateSchema,boolean trimStrings){  Set<String> imports=New.hashSet();  imports.add(JQSchema.class.getCanonicalName());  imports.add(JQTable.class.getCanonicalName());  imports.add(JQIndex.class.getCanonicalName());  imports.add(JQColumn.class.getCanonicalName());  StringBuilder fields=new StringBuilder();  List<ColumnInspector> sortedColumns=New.arrayList(columns.values());  Collections.sort(sortedColumns);  for (  ColumnInspector col : sortedColumns) {    fields.append(generateColumn(imports,col,trimStrings));  }  StringBuilder model=new StringBuilder();  if (!StringUtils.isNullOrEmpty(packageName)) {    model.append("package " + packageName + ";");    model.append(EOL).append(EOL);  }  List<String> sortedImports=new ArrayList<String>(imports);  Collections.sort(sortedImports);  for (  String imp : sortedImports) {    model.append("import ").append(imp).append(';').append(EOL);  }  model.append(EOL);  if (annotateSchema && !StringUtils.isNullOrEmpty(schema)) {    model.append('@').append(JQSchema.class.getSimpleName());    model.append('(');    AnnotationBuilder ap=new AnnotationBuilder();    ap.addParameter("name",schema);    model.append(ap);    model.append(')').append(EOL);  }  model.append('@').append(JQTable.class.getSimpleName());  model.append('(');  AnnotationBuilder ap=new AnnotationBuilder();  ap.addParameter("name",table);  if (primaryKeys.size() > 1) {    StringBuilder pk=new StringBuilder();    for (    String key : primaryKeys) {      pk.append(key).append(' ');    }    pk.trimToSize();    ap.addParameter("primaryKey",pk.toString());  }  model.append(ap);  model.append(')').append(EOL);  ap=new AnnotationBuilder();  generateIndexAnnotations(ap,"standard",IndexType.STANDARD);  generateIndexAnnotations(ap,"unique",IndexType.UNIQUE);  generateIndexAnnotations(ap,"hash",IndexType.HASH);  generateIndexAnnotations(ap,"uniqueHash",IndexType.UNIQUE_HASH);  if (ap.length() > 0) {    model.append('@').append(JQIndex.class.getSimpleName());    model.append('(');    model.append(ap);    model.append(')').append(EOL);  }  String clazzName=ModelUtils.convertTableToClassName(table);  model.append(MessageFormat.format("public class {0} '{'",clazzName)).append(EOL);  model.append(EOL);  model.append(fields);  model.append("\t" + "public ").append(clazzName).append("() {").append(EOL);  model.append("\t}").append(EOL);  model.append('}');  model.trimToSize();  return model.toString();}  }
class C{  public ServerTransaction(ServerSession server,boolean readOnly,IsolationLevel isolationLevel,PeriodicallyCommit periodicallyCommit){  this.session=server.getSession();  this.txnService=server.getTransactionService();  txnService.beginTransaction(session);  this.isolationLevel=txnService.setIsolationLevel(session,isolationLevel);  this.readOnly=readOnly || txnService.isolationLevelRequiresReadOnly(session,false);  this.periodicallyCommit=periodicallyCommit;}  }
class C{  private void publishAgentMappingsUpdateEvent(){  AgentMappingsUpdateEvent event=new AgentMappingsUpdateEvent(this);  eventPublisher.publishEvent(event);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.467 -0500",hash_original_method="178909B2C58CF7188A6A8BC8023FFA15",hash_generated_method="BA098F90A3D5AA4F49CACD160D9F0877") public static String toHexString(byte b,boolean upperCase){  String str=new String();  str.addTaint(b);  str.addTaint(upperCase);  return str;}  }
class C{  public BufferIterator bigEndianIterator(){  return new NioBufferIterator(address,(int)size,ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN);}  }
class C{  public VariableDeclarationStatement newVariableDeclarationStatement(VariableDeclarationFragment fragment){  if (fragment == null) {    throw new IllegalArgumentException();  }  VariableDeclarationStatement result=new VariableDeclarationStatement(this);  result.fragments().add(fragment);  return result;}  }
class C{  public static String generateStackTrace(String msg){  StringBuffer sb=new StringBuffer();  sb.append(msg);  StackTraceElement[] trace=Thread.currentThread().getStackTrace();  for (int i=3; i < trace.length; i++) {    sb.append("\tat ");    sb.append(trace[i]).append("\n");  }  return sb.toString();}  }
class C{  private boolean needsExploreByTouchHelper(int previousVersion){  return (Build.VERSION.SDK_INT == 16) && (previousVersion == 68) && !mSharedPreferences.getBoolean(TalkBackService.PREF_FIRST_TIME_USER,true);}  }
class C{  protected void closeStartTag() throws SAXException {  try {    if (m_tracer != null)     super.fireStartElem(m_elemContext.m_elementName);    int nAttrs=m_attributes.getLength();    if (nAttrs > 0) {      processAttributes(m_writer,nAttrs);      m_attributes.clear();    }    m_writer.write('>');    if (m_CdataElems != null)     m_elemContext.m_isCdataSection=isCdataSection();    if (m_doIndent) {      m_isprevtext=false;      m_preserves.push(m_ispreserve);    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  private void uninstallAppEvent(String packageName,AptoideDatabase db,boolean replacing,String uninstallEvent){  db.deleteInstalledApk(packageName);  Logger.d("AptoideUpdates","Deleting " + packageName);  BusProvider.getInstance().post(new OttoEvents.UnInstalledApkEvent(packageName));  if (!replacing) {    String action=db.getNotConfirmedRollbackAction(packageName);    if (action != null && action.equals(RollBackItem.Action.UNINSTALLING.toString())) {      db.confirmRollBackAction(packageName,action,RollBackItem.Action.UNINSTALLED.toString());      Logger.d("InstalledBroadcastReceiver","uninstalled rollback action");    }    BusProvider.getInstance().post(new OttoEvents.UnInstalledApkEvent(uninstallEvent));  }}  }
class C{  private void liveOutAtStatement(){  SsaInsn statement=blockN.getInsns().get(statementIndex);  RegisterSpec rs=statement.getResult();  if (!statement.isResultReg(regV)) {    if (rs != null) {      interference.add(regV,rs.getReg());    }    nextFunction=NextFunction.LIVE_IN_AT_STATEMENT;  }}  }
class C{  public void markDead(){  alive=false;}  }
class C{  public static String wekaStaticWrapper(Sourcable filter,String className,Instances input,Instances output) throws Exception {  StringBuffer result;  int i;  int n;  result=new StringBuffer();  result.append("// Generated with Weka " + Version.VERSION + "\n");  result.append("//\n");  result.append("// This code is public domain and comes with no warranty.\n");  result.append("//\n");  result.append("// Timestamp: " + new Date() + "\n");  result.append("// Relation: " + input.relationName() + "\n");  result.append("\n");  result.append("package weka.filters;\n");  result.append("\n");  result.append("import weka.core.Attribute;\n");  result.append("import weka.core.Capabilities;\n");  result.append("import weka.core.Capabilities.Capability;\n");  result.append("import weka.core.DenseInstance;\n");  result.append("import weka.core.Instance;\n");  result.append("import weka.core.Instances;\n");  result.append("import weka.core.Utils;\n");  result.append("import weka.filters.Filter;\n");  result.append("import java.util.ArrayList;\n");  result.append("\n");  result.append("public class WekaWrapper\n");  result.append("  extends Filter {\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Returns only the toString() method.\n");  result.append("   *\n");  result.append("   * @return a string describing the filter\n");  result.append("   */\n");  result.append("  public String globalInfo() {\n");  result.append("    return toString();\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Returns the capabilities of this filter.\n");  result.append("   *\n");  result.append("   * @return the capabilities\n");  result.append("   */\n");  result.append("  public Capabilities getCapabilities() {\n");  result.append(((Filter)filter).getCapabilities().toSource("result",4));  result.append("    return result;\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * turns array of Objects into an Instance object\n");  result.append("   *\n");  result.append("   * @param obj	the Object array to turn into an Instance\n");  result.append("   * @param format	the data format to use\n");  result.append("   * @return		the generated Instance object\n");  result.append("   */\n");  result.append("  protected Instance objectsToInstance(Object[] obj, Instances format) {\n");  result.append("    Instance		result;\n");  result.append("    double[]		values;\n");  result.append("    int		i;\n");  result.append("\n");  result.append("    values = new double[obj.length];\n");  result.append("\n");  result.append("    for (i = 0 ; i < obj.length; i++) {\n");  result.append("      if (obj[i] == null)\n");  result.append("        values[i] = Utils.missingValue();\n");  result.append("      else if (format.attribute(i).isNumeric())\n");  result.append("        values[i] = (Double) obj[i];\n");  result.append("      else if (format.attribute(i).isNominal())\n");  result.append("        values[i] = format.attribute(i).indexOfValue((String) obj[i]);\n");  result.append("    }\n");  result.append("\n");  result.append("    // create new instance\n");  result.append("    result = new DenseInstance(1.0, values);\n");  result.append("    result.setDataset(format);\n");  result.append("\n");  result.append("    return result;\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * turns the Instance object into an array of Objects\n");  result.append("   *\n");  result.append("   * @param inst	the instance to turn into an array\n");  result.append("   * @return		the Object array representing the instance\n");  result.append("   */\n");  result.append("  protected Object[] instanceToObjects(Instance inst) {\n");  result.append("    Object[]	result;\n");  result.append("    int		i;\n");  result.append("\n");  result.append("    result = new Object[inst.numAttributes()];\n");  result.append("\n");  result.append("    for (i = 0 ; i < inst.numAttributes(); i++) {\n");  result.append("      if (inst.isMissing(i))\n");  result.append("  	result[i] = null;\n");  result.append("      else if (inst.attribute(i).isNumeric())\n");  result.append("  	result[i] = inst.value(i);\n");  result.append("      else\n");  result.append("  	result[i] = inst.stringValue(i);\n");  result.append("    }\n");  result.append("\n");  result.append("    return result;\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * turns the Instances object into an array of Objects\n");  result.append("   *\n");  result.append("   * @param data	the instances to turn into an array\n");  result.append("   * @return		the Object array representing the instances\n");  result.append("   */\n");  result.append("  protected Object[][] instancesToObjects(Instances data) {\n");  result.append("    Object[][]	result;\n");  result.append("    int		i;\n");  result.append("\n");  result.append("    result = new Object[data.numInstances()][];\n");  result.append("\n");  result.append("    for (i = 0; i < data.numInstances(); i++)\n");  result.append("      result[i] = instanceToObjects(data.instance(i));\n");  result.append("\n");  result.append("    return result;\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Only tests the input data.\n");  result.append("   *\n");  result.append("   * @param instanceInfo the format of the data to convert\n");  result.append("   * @return always true, to indicate that the output format can \n");  result.append("   *         be collected immediately.\n");  result.append("   */\n");  result.append("  public boolean setInputFormat(Instances instanceInfo) throws Exception {\n");  result.append("    super.setInputFormat(instanceInfo);\n");  result.append("    \n");  result.append("    // generate output format\n");  result.append("    ArrayList<Attribute> atts = new ArrayList<Attribute>();\n");  result.append("    ArrayList<String> attValues;\n");  for (i=0; i < output.numAttributes(); i++) {    result.append("    // " + output.attribute(i).name() + "\n");    if (output.attribute(i).isNumeric()) {      result.append("    atts.add(new Attribute(\"" + output.attribute(i).name() + "\"));\n");    } else     if (output.attribute(i).isNominal()) {      result.append("    attValues = new ArrayList<String>();\n");      for (n=0; n < output.attribute(i).numValues(); n++) {        result.append("    attValues.add(\"" + output.attribute(i).value(n) + "\");\n");      }      result.append("    atts.add(new Attribute(\"" + output.attribute(i).name() + "\", attValues));\n");    } else {      throw new UnsupportedAttributeTypeException("Attribute type '" + output.attribute(i).type() + "' (position "+ (i + 1)+ ") is not supported!");    }  }  result.append("    \n");  result.append("    Instances format = new Instances(\"" + output.relationName() + "\", atts, 0);\n");  result.append("    format.setClassIndex(" + output.classIndex() + ");\n");  result.append("    setOutputFormat(format);\n");  result.append("    \n");  result.append("    return true;\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Directly filters the instance.\n");  result.append("   *\n");  result.append("   * @param instance the instance to convert\n");  result.append("   * @return always true, to indicate that the output can \n");  result.append("   *         be collected immediately.\n");  result.append("   */\n");  result.append("  public boolean input(Instance instance) throws Exception {\n");  result.append("    Object[] filtered = " + className + ".filter(instanceToObjects(instance));\n");  result.append("    push(objectsToInstance(filtered, getOutputFormat()));\n");  result.append("    return true;\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Performs a batch filtering of the buffered data, if any available.\n");  result.append("   *\n");  result.append("   * @return true if instances were filtered otherwise false\n");  result.append("   */\n");  result.append("  public boolean batchFinished() throws Exception {\n");  result.append("    if (getInputFormat() == null)\n");  result.append("      throw new NullPointerException(\"No input instance format defined\");;\n");  result.append("\n");  result.append("    Instances inst = getInputFormat();\n");  result.append("    if (inst.numInstances() > 0) {\n");  result.append("      Object[][] filtered = " + className + ".filter(instancesToObjects(inst));\n");  result.append("      for (int i = 0; i < filtered.length; i++) {\n");  result.append("        push(objectsToInstance(filtered[i], getOutputFormat()));\n");  result.append("      }\n");  result.append("    }\n");  result.append("\n");  result.append("    flushInput();\n");  result.append("    m_NewBatch = true;\n");  result.append("    m_FirstBatchDone = true;\n");  result.append("\n");  result.append("    return (inst.numInstances() > 0);\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Returns only the classnames and what filter it is based on.\n");  result.append("   *\n");  result.append("   * @return a short description\n");  result.append("   */\n");  result.append("  public String toString() {\n");  result.append("    return \"Auto-generated filter wrapper, based on " + filter.getClass().getName() + " (generated with Weka "+ Version.VERSION+ ").\\n"+ "\" + this.getClass().getName() + \"/"+ className+ "\";\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Runs the filter from commandline.\n");  result.append("   *\n");  result.append("   * @param args the commandline arguments\n");  result.append("   */\n");  result.append("  public static void main(String args[]) {\n");  result.append("    runFilter(new WekaWrapper(), args);\n");  result.append("  }\n");  result.append("}\n");  result.append("\n");  result.append(filter.toSource(className,input));  return result.toString();}  }
class C{  protected TypeArgumentInference createTypeArgumentInference(){  return new DefaultTypeArgumentInference();}  }
class C{  public static ExpressionParser parse(String expr) throws ParsiiInvalidException, ParseException {  if (expr == null)   throw new IllegalStateException("Expression to parse is null");synchronized (_exprParserCache) {    ExpressionParser parser=_exprParserCache.get(expr);    if (parser == null) {      parser=new ExpressionParser(expr);      _exprParserCache.put(expr,parser);    }    return parser;  }}  }
class C{  public static byte[] add(byte[] a,byte[] b){  if (a == null) {    if (b == null) {      return new byte[0];    } else {      return b;    }  }  if (b == null) {    return a;  }  byte[] result=new byte[a.length + b.length];  System.arraycopy(a,0,result,0,a.length);  System.arraycopy(b,0,result,a.length,b.length);  return result;}  }
class C{  public Boolean evalBoolean(String xpath){  return (Boolean)eval(xpath,XPathConstants.BOOLEAN);}  }
class C{  public static void stretch(double[] y,int rate,double[] ystretched){  int n=Math.min(y.length,ystretched.length / rate);  Arrays.fill(ystretched,0.f);  for (int i=0; i < n; i++)   ystretched[i * rate]=y[i];}  }
class C{  public boolean removeNode(N node){  if (node == null)   return false;  rw.writeLock().lock();  try {    if (!nodes.remove(node))     return false;    for (Iterator<SortedSet<N>> it=circle.values().iterator(); it.hasNext(); ) {      SortedSet<N> set=it.next();      if (!set.remove(node))       continue;      if (set.isEmpty())       it.remove();    }    return true;  }  finally {    rw.writeLock().unlock();  }}  }
class C{  public void testZigZagInt(){  assertEquals(0,SmileUtil.zigzagEncode(0));  assertEquals(1,SmileUtil.zigzagEncode(-1));  assertEquals(2,SmileUtil.zigzagEncode(1));  assertEquals(0xFFFFFFFF,SmileUtil.zigzagEncode(Integer.MIN_VALUE));  assertEquals(0xFFFFFFFE,SmileUtil.zigzagEncode(Integer.MAX_VALUE));  assertEquals(0,SmileUtil.zigzagDecode(0));  assertEquals(-1,SmileUtil.zigzagDecode(1));  assertEquals(1,SmileUtil.zigzagDecode(2));  assertEquals(0x7fffFFFF,SmileUtil.zigzagDecode(0xFFFFFFFE));  assertEquals(Integer.MIN_VALUE,SmileUtil.zigzagDecode(0xFFFFFFFF));  assertEquals(Integer.MIN_VALUE,SmileUtil.zigzagDecode(SmileUtil.zigzagEncode(Integer.MIN_VALUE)));  assertEquals(Integer.MAX_VALUE,SmileUtil.zigzagDecode(SmileUtil.zigzagEncode(Integer.MAX_VALUE)));}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public PostgreSQLSharedAuthenticationProvider() throws GuacamoleException {  super(new PostgreSQLInjectorProvider(),SharedAuthenticationProviderService.class);}  }
class C{  public void permuteRows(){  List<Integer> permutation=new ArrayList<>();  for (int i=0; i < getNumRows(); i++) {    permutation.add(i);  }  Collections.shuffle(permutation);  DataBox data2=dataBox.like();  for (int i=0; i < getNumRows(); i++) {    for (int j=0; j < getNumColumns(); j++) {      data2.set(i,j,dataBox.get(permutation.get(i),j));    }  }  this.dataBox=data2;}  }
class C{  @CanIgnoreReturnValue public final double addAndGet(double delta){  while (true) {    long current=value;    double currentVal=longBitsToDouble(current);    double nextVal=currentVal + delta;    long next=doubleToRawLongBits(nextVal);    if (updater.compareAndSet(this,current,next)) {      return nextVal;    }  }}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  @SuppressWarnings("unchecked") IOObjectCollection<IOObject> expected=(IOObjectCollection<IOObject>)expectedObj;  @SuppressWarnings("unchecked") IOObjectCollection<IOObject> actual=(IOObjectCollection<IOObject>)actualObj;  message=message + "Collection \"" + actual.getSource()+ "\" of IOObjects are not equal: ";  Assert.assertEquals(message + " (number of items)",expected.size(),actual.size());  RapidAssert.assertEquals(message,expected.getObjects(),actual.getObjects());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ORDINAL_OP___GREATER_OP_1:    return greaterOp_1 != null && !greaterOp_1.isEmpty();case UmplePackage.ORDINAL_OP___LESS_OP_1:  return lessOp_1 != null && !lessOp_1.isEmpty();case UmplePackage.ORDINAL_OP___MORE_OP_1:return moreOp_1 != null && !moreOp_1.isEmpty();case UmplePackage.ORDINAL_OP___SMALLER_OP_1:return smallerOp_1 != null && !smallerOp_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static NetworkSystem createAndAddSystem(SystemManager systemManager,ServerBartender selfServer,Config config){  NetworkSystem clusterSystem=new NetworkSystem(systemManager,selfServer,config);  createAndAddSystem(clusterSystem);  return clusterSystem;}  }
class C{  public static List<DictionaryEntry> loadDefaultDictionary(){  List<DictionaryEntry> entries=new ArrayList<DictionaryEntry>();  InputStream in=NameConverter.class.getResourceAsStream("dictionary.txt");  String str=IOUtils.loadStream(in,"UTF-8");  str=str.replaceAll("\r\n","\n");  str=str.replaceAll("\r","\n");  String[] lines=str.split("\n");  for (  String line : lines) {    String key=line.substring(0,line.indexOf('='));    String value=line.substring(line.indexOf('=') + 1);    boolean partMatch=false;    if (key.startsWith("_")) {      partMatch=true;      key=key.substring(1);    }    entries.add(new DictionaryEntry(key,value,partMatch));  }  return entries;}  }
class C{  public static boolean isChangeRef(String name){  return Id.fromRef(name) != null;}  }
class C{  public boolean removeItem(T object){  int size=0;  for (int i=0, listsSize=lists.size(); i < listsSize; i++) {    List<? extends T> list=lists.get(i);    if (list.size() == 1) {      Object item=list.get(0);      if ((object == null) ? (item == null) : object.equals(item)) {        lists.remove(i);        modCount+=1;        listeners.notifyRemoved(this,size,1);        return true;      }    }    size+=list.size();  }  return false;}  }
class C{  public void addFeature(Feature f){  features.add(f);}  }
class C{  static void convertEntities(FormattedTweetText formattedTweetText,Tweet tweet){  if (tweet.entities == null)   return;  final List<UrlEntity> coreUrls=tweet.entities.urls;  if (coreUrls != null) {    for (    UrlEntity entity : coreUrls) {      final FormattedUrlEntity formattedUrlEntity=new FormattedUrlEntity(entity);      formattedTweetText.urlEntities.add(formattedUrlEntity);    }  }  final List<MediaEntity> coreMedia=tweet.entities.media;  if (coreMedia != null) {    for (    MediaEntity entity : coreMedia) {      final FormattedMediaEntity formattedMediaEntity=new FormattedMediaEntity(entity);      formattedTweetText.mediaEntities.add(formattedMediaEntity);    }  }}  }
class C{  public GridNode(String id,Coord coord){  this(id);  this.isShifting=false;  this.xMean=coord.getX();  this.yMean=coord.getY();}  }
class C{  public boolean hasWildcard(){  return WILDCARD.equals(type) || WILDCARD.equals(subtype);}  }
class C{  public static void putOperationInvocation(final Message message,final String resourceName,final String operationName) throws Exception {  ManagementHelper.putOperationInvocation(message,resourceName,operationName,(Object[])null);}  }
class C{  public AVT(StylesheetHandler handler,String uri,String name,String rawName,String stringedValue,ElemTemplateElement owner) throws javax.xml.transform.TransformerException {  m_uri=uri;  m_name=name;  m_rawName=rawName;  StringTokenizer tokenizer=new StringTokenizer(stringedValue,"{}\"\'",true);  int nTokens=tokenizer.countTokens();  if (nTokens < 2) {    m_simpleString=stringedValue;  } else {    FastStringBuffer buffer=null;    FastStringBuffer exprBuffer=null;    if (USE_OBJECT_POOL) {      buffer=StringBufferPool.get();      exprBuffer=StringBufferPool.get();    } else {      buffer=new FastStringBuffer(6);      exprBuffer=new FastStringBuffer(6);    }    try {      m_parts=new Vector(nTokens + 1);      String t=null;      String lookahead=null;      String error=null;      while (tokenizer.hasMoreTokens()) {        if (lookahead != null) {          t=lookahead;          lookahead=null;        } else         t=tokenizer.nextToken();        if (t.length() == 1) {switch (t.charAt(0)) {case ('\"'):case ('\''):{              buffer.append(t);              break;            }case ('{'):{            try {              lookahead=tokenizer.nextToken();              if (lookahead.equals("{")) {                buffer.append(lookahead);                lookahead=null;                break;              } else {                if (buffer.length() > 0) {                  m_parts.addElement(new AVTPartSimple(buffer.toString()));                  buffer.setLength(0);                }                exprBuffer.setLength(0);                while (null != lookahead) {                  if (lookahead.length() == 1) {switch (lookahead.charAt(0)) {case '\'':case '\"':{                        exprBuffer.append(lookahead);                        String quote=lookahead;                        lookahead=tokenizer.nextToken();                        while (!lookahead.equals(quote)) {                          exprBuffer.append(lookahead);                          lookahead=tokenizer.nextToken();                        }                        exprBuffer.append(lookahead);                        lookahead=tokenizer.nextToken();                        break;                      }case '{':{                      error=XSLMessages.createMessage(XSLTErrorResources.ER_NO_CURLYBRACE,null);                      lookahead=null;                      break;                    }case '}':{                    buffer.setLength(0);                    XPath xpath=handler.createXPath(exprBuffer.toString(),owner);                    m_parts.addElement(new AVTPartXPath(xpath));                    lookahead=null;                    break;                  }default :{                  exprBuffer.append(lookahead);                  lookahead=tokenizer.nextToken();                }            }          } else {            exprBuffer.append(lookahead);            lookahead=tokenizer.nextToken();          }        }        if (error != null) {          break;        }      }      break;    } catch (    java.util.NoSuchElementException ex) {      error=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{name,stringedValue});      break;    }  }case ('}'):{  lookahead=tokenizer.nextToken();  if (lookahead.equals("}")) {    buffer.append(lookahead);    lookahead=null;  } else {    try {      handler.warn(XSLTErrorResources.WG_FOUND_CURLYBRACE,null);    } catch (    org.xml.sax.SAXException se) {      throw new TransformerException(se);    }    buffer.append("}");  }  break;}default :{buffer.append(t);}}} else {buffer.append(t);}if (null != error) {try {handler.warn(XSLTErrorResources.WG_ATTR_TEMPLATE,new Object[]{error});} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}break;}}if (buffer.length() > 0) {m_parts.addElement(new AVTPartSimple(buffer.toString()));buffer.setLength(0);}}  finally {if (USE_OBJECT_POOL) {StringBufferPool.free(buffer);StringBufferPool.free(exprBuffer);} else {buffer=null;exprBuffer=null;};}}if (null == m_parts && (null == m_simpleString)) {m_simpleString="";}}  }
class C{  public FilePermission(String path,String actions){  super(path);  init(getMask(actions));}  }
class C{  public static String formatHeaderByte(int b){  return "Dim: " + ((b >> 3) & 0x1F) + ((b & 0x02) != 0 ? " function" : " address ")+ ((b & 0x01) != 0 ? " extended" : " ");}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(signedAttr),new SimpleAttributeTableGenerator(unsignedAttr),signedAttr);}  }
class C{  public int addNewDivider(String name,int parentId,boolean isFixed) throws Exception {  FolderTokenDivider div;  int id;  id=super.generateNextNewNodeId();  div=new FolderTokenDivider(id,name,parentId,isFixed,FolderEditFlag.NEW);  super.add(div);  return id;}  }
class C{  public void stopScroll(){  mStopped=true;  mHandler.removeCallbacks(mScrollRunnable);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WFieldUpdate.init");}  }
class C{  public PKCS7(byte[] bytes) throws ParsingException {  try {    DerInputStream derin=new DerInputStream(bytes);    parse(derin);  } catch (  IOException ioe1) {    ParsingException pe=new ParsingException("Unable to parse the encoded bytes");    pe.initCause(ioe1);    throw pe;  }}  }
class C{  public boolean removeMetricCollector(final IGangliaMetricsCollector c){  if (c == null)   throw new IllegalArgumentException();  return metricCollectors.remove(c);}  }
class C{  @SuppressWarnings("unchecked") public static int binarySearch(Object[] array,int startIndex,int endIndex,Object object){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  if (array.length == 0) {    return -1;  }  if (NumberComparator.isNumber(object)) {    return binarySearch(array,startIndex,endIndex,object,NumberComparator.createComparator(object.getClass()));  }  int low=startIndex, mid=-1, high=endIndex - 1, result=0;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=((java.lang.Comparable<Object>)array[mid]).compareTo(object)) < 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (((java.lang.Comparable<Object>)object).compareTo(array[index]) < 0) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (result >= 0 ? 1 : 2);}  }
class C{  public final boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof TextBuilder))   return false;  TextBuilder that=(TextBuilder)obj;  if (this._length != that._length)   return false;  for (int i=0; i < _length; ) {    if (this.charAt(i) != that.charAt(i++))     return false;  }  return true;}  }
class C{  public Paint createPaint(BridgeContext ctx,Element patternElement,Element paintedElement,GraphicsNode paintedNode,float opacity){  RootGraphicsNode patternContentNode;  patternContentNode=(RootGraphicsNode)ctx.getElementData(patternElement);  if (patternContentNode == null) {    patternContentNode=extractPatternContent(patternElement,ctx);    ctx.setElementData(patternElement,patternContentNode);  }  if (patternContentNode == null) {    return null;  }  Rectangle2D patternRegion=SVGUtilities.convertPatternRegion(patternElement,paintedElement,paintedNode,ctx);  String s;  AffineTransform patternTransform;  s=SVGUtilities.getChainableAttributeNS(patternElement,null,SVG_PATTERN_TRANSFORM_ATTRIBUTE,ctx);  if (s.length() != 0) {    patternTransform=SVGUtilities.convertTransform(patternElement,SVG_PATTERN_TRANSFORM_ATTRIBUTE,s,ctx);  } else {    patternTransform=new AffineTransform();  }  boolean overflowIsHidden=CSSUtilities.convertOverflow(patternElement);  short contentCoordSystem;  s=SVGUtilities.getChainableAttributeNS(patternElement,null,SVG_PATTERN_CONTENT_UNITS_ATTRIBUTE,ctx);  if (s.length() == 0) {    contentCoordSystem=SVGUtilities.USER_SPACE_ON_USE;  } else {    contentCoordSystem=SVGUtilities.parseCoordinateSystem(patternElement,SVG_PATTERN_CONTENT_UNITS_ATTRIBUTE,s,ctx);  }  AffineTransform patternContentTransform=new AffineTransform();  patternContentTransform.translate(patternRegion.getX(),patternRegion.getY());  String viewBoxStr=SVGUtilities.getChainableAttributeNS(patternElement,null,SVG_VIEW_BOX_ATTRIBUTE,ctx);  if (viewBoxStr.length() > 0) {    String aspectRatioStr=SVGUtilities.getChainableAttributeNS(patternElement,null,SVG_PRESERVE_ASPECT_RATIO_ATTRIBUTE,ctx);    float w=(float)patternRegion.getWidth();    float h=(float)patternRegion.getHeight();    AffineTransform preserveAspectRatioTransform=ViewBox.getPreserveAspectRatioTransform(patternElement,viewBoxStr,aspectRatioStr,w,h,ctx);    patternContentTransform.concatenate(preserveAspectRatioTransform);  } else {    if (contentCoordSystem == SVGUtilities.OBJECT_BOUNDING_BOX) {      AffineTransform patternContentUnitsTransform=new AffineTransform();      Rectangle2D objectBoundingBox=paintedNode.getGeometryBounds();      patternContentUnitsTransform.translate(objectBoundingBox.getX(),objectBoundingBox.getY());      patternContentUnitsTransform.scale(objectBoundingBox.getWidth(),objectBoundingBox.getHeight());      patternContentTransform.concatenate(patternContentUnitsTransform);    }  }  GraphicsNode gn=new PatternGraphicsNode(patternContentNode);  gn.setTransform(patternContentTransform);  if (opacity != 1) {    Filter filter=gn.getGraphicsNodeRable(true);    filter=new ComponentTransferRable8Bit(filter,ConcreteComponentTransferFunction.getLinearTransfer(opacity,0),ConcreteComponentTransferFunction.getIdentityTransfer(),ConcreteComponentTransferFunction.getIdentityTransfer(),ConcreteComponentTransferFunction.getIdentityTransfer());    gn.setFilter(filter);  }  return new PatternPaint(gn,patternRegion,!overflowIsHidden,patternTransform);}  }
class C{  public boolean isMailClient(){  return this.isMail;}  }
class C{  public boolean isCacheable(RequestHeaders request){  int responseCode=headers.getResponseCode();  if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_AUTHORITATIVE && responseCode != HttpURLConnection.HTTP_MULT_CHOICE && responseCode != HttpURLConnection.HTTP_MOVED_PERM && responseCode != HttpURLConnection.HTTP_GONE) {    return false;  }  if (request.hasAuthorization() && !isPublic && !mustRevalidate&& sMaxAgeSeconds == -1) {    return false;  }  if (noStore) {    return false;  }  return true;}  }
class C{  public static boolean inCompiledCode(){  return false;}  }
class C{  public void removeListeners(){  if (listeners != null) {    listeners=null;  }}  }
class C{  public static void read(Context context){  Intent intent=new Intent(context,MultiProcessService.class);  intent.putExtra(INTENT_MODE,INTENT_MODE_READ);  context.startService(intent);}  }
class C{  public String toString(){  return JSDocSerializer.toJSDocString(this);}  }
class C{  public static <T>void acceptChildren(T visitor,IVisitable<T> child){  if (child != null) {    child.accept(visitor);  }}  }
class C{  @Override public IStriterator makeUnique(){  return addFilter(new UniquenessFilter());}  }
class C{  public TestStackRequest clone(){  TestStackRequest result=new TestStackRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.TestId=TestId;  result.Iteration=Iteration;  result.Input=Input;  return result;}  }
class C{  public SnackbarBuilder actionClickListener(OnClickListener actionClickListener){  this.actionClickListener=actionClickListener;  return this;}  }
class C{  public static Test suite(){  return new TestSuite(MergeManyValuesTest.class);}  }
class C{  public UnweightedGraph(List<Edge> edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  public static Months months(int months){switch (months) {case 0:    return ZERO;case 1:  return ONE;case 2:return TWO;case 3:return THREE;case 4:return FOUR;case 5:return FIVE;case 6:return SIX;case 7:return SEVEN;case 8:return EIGHT;case 9:return NINE;case 10:return TEN;case 11:return ELEVEN;case 12:return TWELVE;case Integer.MAX_VALUE:return MAX_VALUE;case Integer.MIN_VALUE:return MIN_VALUE;default :return new Months(months);}}  }
class C{  public ExportDeclaration createExportDeclaration(){  ExportDeclarationImpl exportDeclaration=new ExportDeclarationImpl();  return exportDeclaration;}  }
class C{  public XmlHandler deleteGlobal(Class<?> aClass){  try {    xml.deleteGlobal(aClass);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public void testFloatValue(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  assertEquals(0.0f,ai.floatValue());  ai.accumulate(1.0);  assertEquals(1.0f,ai.floatValue());}  }
class C{  public void print_array(Object[] array){  print("array: size=" + array.length);  for (int i=0; i < array.length; i++) {    ps(" " + array[i].toString(),false);  }}  }
class C{  public Cell(){}  }
class C{  private static Map<String,SoInfo> findProvidedLibraries(JarFile apk){  Pattern libPattern=Pattern.compile("^lib/([^/]+)/([^/]+\\.so)$");  HashMap<String,SoInfo> providedLibraries=new HashMap<>();  String[] supportedAbis=SysUtil.getSupportedAbis();  Enumeration<JarEntry> entries=apk.entries();  while (entries.hasMoreElements()) {    JarEntry entry=entries.nextElement();    Matcher m=libPattern.matcher(entry.getName());    if (m.matches()) {      String libraryAbi=m.group(1);      String soName=m.group(2);      int abiScore=SysUtil.findAbiScore(supportedAbis,libraryAbi);      if (abiScore >= 0) {        SoInfo so=providedLibraries.get(soName);        if (so == null || abiScore < so.abiScore) {          providedLibraries.put(soName,new SoInfo(soName,entry,abiScore));        }      }    }  }  return providedLibraries;}  }
class C{  public TemplatePersistenceData[] read(InputStream stream,ResourceBundle bundle) throws IOException {  return read(new InputSource(stream),bundle,null);}  }
class C{  public void removeCmrRepositoryDefinition(CmrRepositoryDefinition cmrRepositoryDefinition){  for (  CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {    cmrRepositoryDefinition.removeCmrRepositoryChangeListener(repositoryChangeListener);  }  cmrRepositoryDefinitions.remove(cmrRepositoryDefinition);  savePreference();  for (  CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {    repositoryChangeListener.repositoryRemoved(cmrRepositoryDefinition);  }  UpdateRepositoryJob updateRepositoryJob=repositoryUpdateJobMap.remove(cmrRepositoryDefinition);  if (null != updateRepositoryJob) {    updateRepositoryJob.cancel();  }}  }
class C{  public DTMIterator asNodeIterator(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public void hideDecorations(){  for (Iterator<TargetDecoration> it=targetDecorations.iterator(); it.hasNext(); ) {    TargetDecoration targetDecoration=(TargetDecoration)it.next();    ControlDecoration decoration=targetDecoration.decoration;    updater.update(decoration,null);  }}  }
class C{  public boolean doWindowDeActivated(){  return true;}  }
class C{  @Override final public boolean isLeaf(){  return true;}  }
class C{  void join(int millis) throws InterruptedException {  thread.join(millis);}  }
class C{  public ObjectMatrix1D assign(Object[] values){  if (isNoView) {    if (values.length != size)     throw new IllegalArgumentException("Must have same number of cells: length=" + values.length + "size()="+ size());    System.arraycopy(values,0,this.elements,0,values.length);  } else {    super.assign(values);  }  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.208 -0500",hash_original_method="38790ED2FB6D0EF1B7954716C7615F0D",hash_generated_method="8F4CC75C5322703DE6168A66DB4A0AED") public boolean onSearchRequested(){  final SearchManager searchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  final ComponentName appName=getAssociatedActivity();  if (appName != null && searchManager.getSearchableInfo(appName) != null) {    searchManager.startSearch(null,false,appName,null,false);    dismiss();    return true;  } else {    return false;  }}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public PermissionCollection newPermissionCollection(){  return new AllPermissionCollection();}  }
class C{  protected InitModulesImpl(){  super();}  }
class C{  public int intersectSphere(Vector3fc center,float radius){  return intersectSphere(center.x(),center.y(),center.z(),radius);}  }
class C{  public ActorXPositionComparator(boolean ascending){  this.ascending=ascending;}  }
class C{  public FastUtilShortIterator(short[] primitiveArray){  super(primitiveArray);}  }
class C{  public void resetCount(){  progress=0;  setText("0%");  invalidate();}  }
class C{  public Object[] createFields(int len){  return new String[len];}  }
class C{  public void testOpen() throws Exception {  create(igfs,paths(DIR,SUBDIR),null);  createFile(igfs,FILE,true,chunk);  checkFileContent(igfs,FILE,chunk);  checkFileContent(igfs,FILE,chunk);}  }
class C{  public static Plane fromPoints(Vec4 pa,Vec4 pb,Vec4 pc){  if (pa == null || pb == null || pc == null) {    throw new IllegalArgumentException("Vec4 Is Null");  }  Vec4 vab=pb.subtract3(pa);  Vec4 vac=pc.subtract3(pa);  Vec4 n=vab.cross3(vac);  double d=-n.dot3(pa);  return new Plane(n.x,n.y,n.z,d);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private static <T>void batchReject(T[] array,int start,int end,FastListRejectProcedure<T> castProcedure){  for (int i=start; i < end; i++) {    castProcedure.value(array[i]);  }}  }
class C{  public static boolean checkUnManagedResourceAddedToConsistencyGroup(UnManagedVolume unManagedVolume){  _logger.info("Determining if the unmanaged volume {} belongs to an unmanaged consistency group",unManagedVolume.getLabel());  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String isVolumeAddedToConsistencyGroup=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString());  if (null != isVolumeAddedToConsistencyGroup && Boolean.parseBoolean(isVolumeAddedToConsistencyGroup)) {    _logger.info("The unmanaged volume {} belongs to an unmanaged consistency group",unManagedVolume.getLabel());    return true;  }  _logger.info("The unmanaged volume {} does not belong to an unmanaged consistency group",unManagedVolume.getLabel());  return false;}  }
class C{  public RegularStateItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void clear(){  _indexes.clear();  super.clear();}  }
class C{  @Override public double evaluateAttribute(int attribute) throws Exception {  int[] featArray=new int[2];  double errorRate;  Evaluation o_Evaluation;  Remove delTransform=new Remove();  delTransform.setInvertSelection(true);  Instances trainCopy=new Instances(m_trainInstances);  featArray[0]=attribute;  featArray[1]=trainCopy.classIndex();  delTransform.setAttributeIndicesArray(featArray);  delTransform.setInputFormat(trainCopy);  trainCopy=Filter.useFilter(trainCopy,delTransform);  o_Evaluation=new Evaluation(trainCopy);  String[] oneROpts={"-B","" + getMinimumBucketSize()};  Classifier oneR=AbstractClassifier.forName("weka.classifiers.rules.OneR",oneROpts);  if (m_evalUsingTrainingData) {    oneR.buildClassifier(trainCopy);    o_Evaluation.evaluateModel(oneR,trainCopy);  } else {    o_Evaluation.crossValidateModel(oneR,trainCopy,m_folds,new Random(m_randomSeed));  }  errorRate=o_Evaluation.errorRate();  return (1 - errorRate) * 100.0;}  }
class C{  private static Object parseValue(int type,LuaValue value){switch (type) {case LuaValue.TBOOLEAN:    if (isBoolean(value))     return value.checkboolean();  break;case LuaValue.TNUMBER:if (isNumber(value)) return value.checknumber();break;case LuaValue.TSTRING:if (isString(value)) return value.checkjstring();break;case LuaValue.TTABLE:if (isTable(value)) return value.checktable();break;case LuaValue.TFUNCTION:if (isFunction(value)) return value.checkfunction();break;case LuaValue.TUSERDATA:if (isUserdata(value)) return value.checkuserdata();break;case LuaValue.TVALUE:return value;}return null;}  }
class C{  public static final void disconnectFromDS(){  GemFireCacheImpl.testCacheXml=null;  if (system != null) {    system.disconnect();    system=null;  }  for (; ; ) {    DistributedSystem ds=InternalDistributedSystem.getConnectedInstance();    if (ds == null) {      break;    }    try {      ds.disconnect();    } catch (    Exception e) {    }  }  AdminDistributedSystemImpl ads=AdminDistributedSystemImpl.getConnectedInstance();  if (ads != null) {    ads.disconnect();  }}  }
class C{  public TransactionInput addInput(TransactionOutput from){  return addInput(new TransactionInput(params,this,from));}  }
class C{  public boolean isDirectorySelectionEnabled(){  return ((fileSelectionMode == DIRECTORIES_ONLY) || (fileSelectionMode == FILES_AND_DIRECTORIES));}  }
class C{  public Synapse(Neuron source,Neuron target,SynapseUpdateRule learningRule,Network parent){  setSourceAndTarget(source,target);  setLearningRule(learningRule);  initSpikeResponder();  parentNetwork=parent;  isTemplate=source == null;}  }
class C{  private VisorCacheMetricsCollectorJob(IgniteBiTuple<Boolean,Collection<String>> arg,boolean debug){  super(arg,debug);}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public ResumeSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  @Override public void acceptDataSet(DataSetEvent e){  processTrainingOrDataSourceEvents(e);}  }
class C{  private void addBefore(MemoryChunk memoryChunk,MemoryChunk reference){  memoryChunk.previous=reference.previous;  memoryChunk.next=reference;  reference.previous=memoryChunk;  if (memoryChunk.previous != null) {    memoryChunk.previous.next=memoryChunk;  }  if (low == reference) {    low=memoryChunk;  }}  }
class C{  public static InvokeExpr makeInvokeExpression(SootMethod method,Local local,List<Value> args){  if (method.isConstructor()) {    return Jimple.v().newSpecialInvokeExpr(local,method.makeRef(),args);  } else   if (method.isStatic()) {    return Jimple.v().newStaticInvokeExpr(method.makeRef(),args);  } else {    return Jimple.v().newVirtualInvokeExpr(local,method.makeRef(),args);  }}  }
class C{  public boolean add(final int[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public boolean addAll(int index,Collection c){  throw new UnsupportedOperationException();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.716 -0500",hash_original_method="D35AB7435540D0F4BFFD2328F86D6A01",hash_generated_method="107BFF018AB9A289802BDEAFD968A9A7") private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop;}  }
